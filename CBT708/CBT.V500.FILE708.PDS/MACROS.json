{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "GSI", "INMTNODE": "SSC", "INMTUID": "GSI", "INMFTIME": "20070310184503000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 16, "INMDSNAM": "CBT.FILE708.MACROS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.FILE708.MACROS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "070069", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\xc0\\x00\\x00\\x01'", "DS1LSTAR": "b'\\x00\\x0b\\x14'", "DS1TRBAL": "b'M*'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0b\\x00\\x00\\x04\\x99\\xbdp'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0b\\x00\\x00\\x04\\x99\\xbdp'", "b'P\\xf3\\xca@\\x00\\x00\\x02\\x1c\\x00\\x00\\x02\\x1d\\x00\\x0e\\x00\\x1e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$BSM": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x02\\x8f\\x00\\x98\\x02\\x8f\\x11\\x12\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe3\\xc5\\xc3\\xc8\\xd4\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-28T00:00:00", "modifydate": "1998-01-28T11:12:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "TECHMN"}, "text": "         MACRO\n&NAME    $BSM  &OFF,&BR1\n         GBLC  &ADRMODE\n         AIF   ('&ADRMODE' EQ '24').GO24\n&NAME    BSM   &OFF,&BR1\n         AGO   .BSMEXIT\n.GO24    ANOP\n&NAME    DS    0H\n.BSMEXIT ANOP\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOCDYNA": {"ttr": 22, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\xb3\\x00\\xb3\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 179, "newlines": 179, "modlines": 0, "user": "DYNALLC"}, "text": "\n  DYNAMIC ALLOCATION MACROS\n\n\n  MACROS (ALLOC FREE)\n\n  NAME     ALLOC DUMMY,PERM,DSN=,DDN=,DDNRET=,MEMBER=,DISP=,\n                 WAITDSN=NO,WAITUNIT=NO,WAITVOL=NO,\n                 VOL=,UNIT=,SYSOUT=,FREE=,COPIES=,LABEL=,\n                 BLKSIZE=,DEN=,DSORG=,KEYLEN=,LRECL=,RECFM=,\n                 PASWORD=,DSNRET=,MF=AUTO,PREFIX=,ERROR=,\n                 SPACE=,F=,FILE=,DA=,QNAME=,DSORGRT=,\n                 VOLRET=,DCBDSN=,DCBDDN=,SPECIAL=,DDNTO=,\n                 FCB=,\n                 DEFER=,UNITCNT=,\n                 FORMS=,DEST=,SSREQ=,FORUSER=,TU=,DSNPDE=\n\n\n  NAME     FREE  UNALC,DSN=,DDN=,MEMBER=,DISP=,SYSOUT=,\n                 ERROR=,MF=AUTO,PREFIX=,FILE=,F=,DA=,HOLD=\n\n\n  NAME     DYNSPACE TYPE\n\n\n  DOCUMENTATION\n\n  This  macro provides a dynamic allocation function by build-\n  ing a dynamic allocation parameter list and invoking SVC 99.\n\n  It first sets up a workarea environment  for  the  parameter\n  list  and then tests the keywords supplied and invokes inner\n  macros to build the text units. The inner macros  themselves\n  use inner macros to update global variables, store text unit\n  pointers  etc  there  are  three ways of specifying the work\n  area address.\n\n  A) MF=AUTO, MF=G, MF=(E,address,lnthsymb).\n  In the first form, an inner macro DYNSPACE is called to name\n  a work area, the name being returned in the global SETC var-\n  iable &DYNSP. A DSECT is created to  map  this  area.    The\n  global variables &dtuo (text unit offset counter) and &DTUPO\n  (text  unit  pointer  offset  accumulator)  are set to zero.\n  These accumulators are updated as each text  unit  processor\n  aquires  storage.  After all text units have been built, the\n  amount of space used is calculated, and the  DYNSPACE  macro\n  is then called again to log the amount needed. DYNSPACE Sets\n  a global variable &DYNSPQ to the highest amount any ALLOC or\n  FREE  macro  requested,  and when called with the expand op-\n  tion, (no operands or name field supplied), expands  into  a\n  ds for that quantity. (See DYNSPACE)\n\n  MF=G  specifies  that  the ALLOC macro enter the begin macro\n  workarea to acquire the storage necessary. It does this  via\n  the RCPDS macro. (See RCPDS). However, if the ALLOC macro is\n  called several times with this option, a lot of storage will\n  be  used  up,  as the storage will not be shared. Thus, this\n  form should only be used if the ALLOC/FREE macro is only  to\n  be used once or twice during an assembly.\n\n  MF=E causes the macro to use a user specified work area. The\n  second  parameter gives the name of the workarea, and an op-\n  tional third parameter is the name of a symbol to be equated\n  to the length of the required work area.\n\n  Dynamic allocation functions are similar to those  available\n  with  JCL, using the same keywords. However, certain formats\n  are slightly different. For instance, certain  keywords  can\n  have  varying  parameters,  eg  dataset name, DDNAME, VOLSER\n  etc.  Provision is made for both variable specification.  In\n  the absolute form, the parameter is entered in quotes,\n  ex.    ALLOC DSN='SYS1.LINKLIB',DISP=SHR\n  however, this name remains fixed for the assembly.   In  the\n  variable  format,  the  address  of  a locator is specified,\n  where the locator consists of a six byte field, the first  4\n  bytes  of  which  point to the parameter, while the next two\n  contain the length.\n\n  ex.         ALLOC DSN=LOCATOR\n     LOCATOR  DC    A(dsn),Y(12)\n     DSN      DC    C'SYS1.LINKLIB'\n\n  Numeric quantities e.g. COPIES= for  sysout,  should  either\n  specify  a  numeric  value, COPIES=3, a value in a register,\n  COPIES=(r3), or the  name  off  a  fullword  containing  the\n  value,  COPIES=numcopys,  where  numcopys  is  the name of a\n  fullword field.\n\n  Other keywords such as DISP=  can  only  have  the  absolute\n  form, and values should not be entered within quotes.  Addi-\n  tional  facilities  not available with JCL are the return by\n  the system of information on the dataset, eg DSORG. This  is\n  done  by specifying DSORGRT=symbol, where symbol is a symbol\n  which will be equated to a two  byte  field  containing  the\n  DSORG type (see Job Management, Supervisor and TSO).\n\n  The  system  can  also generate and return a DDNAME. This is\n  carried out  by  entering  DDNTO=(addr1,addr2,,...)    Where\n  addr1,addr2  etc are the names of 8 byte fields which are to\n  receive the DDNAME.\n\n  Note that WAITDSN=YES, WAITVOL=YES or  WAITUNIT=YES  require\n  that  the  program  be  APF authorized, or in Key 0-7, or in\n  supervisor state.\n\n  For  further information on dynamic allocation, see Job Man-\n  agement, Supervisor and TSO SPL's.\n\n\n  DYNSPACE\n\n  This is an inner macro to ALLOC/FREE.  It is called to:\n\n  1.  Log the various amounts needed by each, remembering  the\n      largest.\n\n  2.  Generating a DS for the largest amount.\n\n  The  first  two  functions  are invoked by ALLOC/FREE macros\n  only, and the third is used by the  programmer,  either  ex-\n  plicitly, or by BEGINWKA, if the latter is used.\n\n  To invoke the naming function, ALLOC/FREE generate:\n\n  name DYNSPACE\n\n  Note.  The  naming  operation  only  generates a name on the\n  first call in the assembly. The name remains the same  until\n  DYNSPACE is called to expand into a DS.\n\n  The second function is invoked by the macro call\n       DYNSPACE ADD\n\n  (no name field and one operand) it uses the global variables\n  &dtuo  and  &DTUPO  to calculate the space for this request,\n  and updates &DYNSPQ only if the current  request  is  for  a\n  greater amount\n\n  The  third  function  is invoked by calling DYNSPACE with no\n  name or operand field.\n\n  This expands into a define storage, clears the DYNSPACE name\n  global SETC, and the &DYNSPQ GLOBAL SETA.   Thus, the  macro\n  is serially reusable in all functions.\n\n  S99FAIL\n\n  S99FAIL  macro  will  invoke the dynamic allocation (SVC 99)\n  error message display routine.\n\n\n  EXAMPLES\n\n           ALLOC DUMMY,DDN=DDNAME\n           ALLOC DDN=DDNAME,DSN=DSNAME,DISP=SHR\n           FREE  DDN=DDNAME\n           ALLOC DDN=DDNAME,UNIT=UNITADDR\n           S99FAIL\n\n           data areas\n\n           DYNSPACE\n                    SPACE\n           UNITADDR DC    A(UNIT)\n           UNITL    DC    Y(3)\n           UNIT     DC    CL3' '\n                    SPACE\n           DDNAME   DC    A(DDN)\n           DDNL     DC    Y(8)\n           DDN      DC    CL8' '\n                    SPACE\n           DSNAME   DC    A(DSN)\n           DSNL     DC    Y(44)\n           DSN      DC    CL44' '\n\n         These are required as mapping for the above macros:\n\n           IEFZB4D0\n           IEFZB4D2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$SW24": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x02\\x8f\\x00\\x98\\x02\\x8f\\x08Y\\x00\\r\\x00\\r\\x00\\x00\\xe3\\xc5\\xc3\\xc8\\xd4\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-28T00:00:00", "modifydate": "1998-01-28T08:59:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "TECHMN"}, "text": "         MACRO\n&NAME    $SW24\n         GBLC  &ADRMODE\n         AIF   ('&ADRMODE' EQ '24').GO24\n         LCLC  &IDX\n&IDX     SETC  '&SYSNDX'\n* MACRO TO SWITCH TO 24 BIT TEMPORARILY\n&NAME    LA    R15,LA&IDX           ------->\n         N     R15,=A(X'7FFFFFFF')  |SWITCH TO 24 BIT MODE\n         $BSM  0,R15                ------->\nLA&IDX   DS    0H\n.GO24    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SW31": {"ttr": 2833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x02\\x8f\\x00\\x98\\x02\\x8f\\t\\x00\\x00\\r\\x00\\r\\x00\\x00\\xe3\\xc5\\xc3\\xc8\\xd4\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-28T00:00:00", "modifydate": "1998-01-28T09:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "TECHMN"}, "text": "         MACRO\n&NAME    $SW31\n         GBLC  &ADRMODE\n         AIF   ('&ADRMODE' EQ '24').GO24\n         LCLC  &IDX\n&IDX     SETC  '&SYSNDX'\n* MACRO TO SWITCH TO 31 BIT AGAIN\n&NAME    LA    R15,LA&IDX           ------->\n         O     R15,=A(X'80000000')  |SWITCH TO 31 BIT MODE\n         $BSM  0,R15                ------->\nLA&IDX   DS    0H\n.GO24    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLOC": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x01T\\x01T\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 340, "newlines": 340, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&NAME    ALLOC &DUMMY,&PERM,                                           X\n               &WAITDSN=NO,&WAITVOL=NO,&WAITUNIT=NO,                   X\n               &DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,                   X\n               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X\n               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X\n               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X\n               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X\n               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,&TERM=,    X\n               &FCB=,                                                  X\n               &CHARS=,                                     *LBD 11/88*X\n               &DEFER=,                                    *LBD 03/86* X\n               &UNITCNT=,                                  *LBD 06/86* X\n               &OUTDES=,                                    *LBD 11/88*X\n               &MGMTCLAS=,                                 *LBD-08MAY96X\n               &STORCLAS=,                                 *LBD-08MAY96X\n               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=,&MSVGP=\n.**********************************************************************\n.*                                                                    *\n.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *\n.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *\n.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *\n.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *\n.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *\n.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *\n.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *\n.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *\n.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *\n.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *\n.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *\n.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *\n.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *\n.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *\n.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *\n.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *\n.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *\n.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *\n.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *\n.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *\n.*    THAT QUANTITY. (SEE DYNSPACE)                                   *\n.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *\n.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *\n.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *\n.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *\n.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *\n.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *\n.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *\n.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *\n.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *\n.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *\n.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *\n.*                                                                    *\n.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *\n.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *\n.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *\n.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *\n.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *\n.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *\n.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *\n.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *\n.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *\n.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *\n.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *\n.*    CONTAIN THE LENGTH.                                            *\n.*    EG          ALLOC DSN=LOCATOR                                  *\n.*       LOCATOR  DC    A(DSN),Y(12)                                 *\n.*       DSN      DC    C'SYS1.LINKLIB'                              *\n.*                                                                   *\n.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *\n.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *\n.*       A VALUE IN A REGISTER, COPIES=(R3),                         *\n.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *\n.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *\n.*       FULLWORD FIELD.                                             *\n.*                                                                   *\n.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *\n.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *\n.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *\n.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *\n.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *\n.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *\n.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *\n.*       SUPERVISOR AND TSO).                                        *\n.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *\n.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *\n.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *\n.*       ARE TO RECEIVE THE DDNAME.                                  *\n.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *\n.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *\n.*                                                                   *\n.**********************************************************************\n.*  MODIFIED 08/25/82 TO ADD MSVGP SUPPORT .                         *\n.*  MODIFIED 09/10/82 TO ADD TERM  SUPPORT .                         *\n.*  MODIFIED 10/27/83 TO:                                            *\n.*             ADD WAITVOL TO WAIT FOR VOLUME TO BE MOUNTED.         *\n.*             ADD WAITDSN TO WAIT FOR DSN TO BECOME AVAILABLE.      *\n.*             ADD WAITUNIT TO WAIT FOR UNIT TO BECOME AVAILABLE.    *\n.*             **  THESE THREE OPTIONS ARE VALID ONLY IF THE USER    *\n.*             **  IS AN AUTHORIZED PROGRAM                          *\n.*                   LIONEL DYCK/ROCKWELL INT'L  (213) 594-1647      *\n.* MODIFIED 03/31/86 TO ADD DEFER SUPPORT.                 *LBD 03/86*\n.*                   LIONEL DYCK/ROCKWELL INT'L  (213) 594-1125      *\n.**********************************************************************\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS\n         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS\n         LCLA  &I                 COUNTER\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n.*\n.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         AIF   ('&WAITDSN' EQ 'NO').NWD\n         OI    S99FLG21,S99WTDSN       SET WAIT FOR DSN FLAG\n.NWD     AIF   ('&WAITVOL' EQ 'NO').NWV\n         OI    S99FLG21,S99WTVOL       SET WAIT FOR VOLUME\n.NWV     AIF   ('&WAITUNIT' EQ 'NO').NWU\n         OI    S99FLG21,S99WTUNT       SET WAIT FOR UNIT\n.NWU     ANOP\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&SSREQ' EQ 'YES').SSREQ\n.TDSN    AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&DSNPDE' NE '').DSNPDE\n         AIF   ('&DSNRET' NE '').DSNRT\n         AIF   ('&SYSOUT' NE '').SYSOUT\n         AIF   ('&DUMMY' NE '').DUMMY\n         AIF   ('&QNAME' NE '').QNAME\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n         AIF   ('&DDNRET&DDNTO' NE '').DDNRT\n.TMCLAS  AIF   ('&MGMTCLAS' NE '').MCLAS                   *LBD-08MAY96\n.TSCLAS  AIF   ('&STORCLAS' NE '').SCLAS                   *LBD-08MAY96\n.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT\n.TDEFER  AIF   ('&DEFER' EQ 'YES').DEFER                   *LBD 03/86*\n.TVOLRET AIF   ('&VOLRET' NE '').VOLRET\n.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT\n.TLABEL  AIF   ('&LABEL' NE '').LABEL\n.TPSWD   AIF   ('&PASWORD' NE '').PASWORD\n.TFORUSE AIF   ('&FORUSER' NE '').FORUSER\n.TTU     AIF   ('&TU' NE '').TU\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TSPACE  AIF   ('&SPACE' NE '').SPACE\n.TLRECL  AIF   ('&LRECL' NE '').DCB\n         AIF   ('&DEN' NE '').DCB\n         AIF   ('&RECFM' NE '').DCB\n         AIF   ('&BLKSIZE' NE '').DCB\n         AIF   ('&DSORG' NE '').DCB\n         AIF   ('&KEYLEN' NE '').DCB\n.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN\n.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN\n.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343\n.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM\n         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM\n.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL\n.TMSVGP  AIF   ('&MSVGP' NE '').MSVGP\n.TTERM   AIF   ('&TERM' NE '').TERM\n         AGO   .SVC99\n.MCLAS   RCPMCLAS &MGMTCLAS                                *LBD-08MAY96\n         AGO   .TSCLAS                                     *LBD-08MAY96\n.SCLAS   RCPSCLAS &STORCLAS                                *LBD-08MAY96\n         AGO   .TUNIT                                      *LBD-08MAY96\n.TERM    RCPTERM\n         AGO   .SVC99\n.SSREQ   RCPSSREQ\n         AGO   .TDSN\n.DSN     RCPDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.DSNPDE  RCPDSNPD &DSNPDE\n         AGO   .TDDN\n.DSNRT   RCPDSNRT &DSNRET\n&DSNRTO  SETA  &DTUO-46\n         AGO   .TDDN\n.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X\n               FORMS=&FORMS,FCB=&FCB,CHARS=&CHARS,OUTDES=&OUTDES\n         AGO   .TDDN\n.DUMMY   RCPDUMMY &DUMMY\n         AGO   .TDDN\n.QNAME   RCPQNAME &QNAME\n         AGO   .TDDN\n.DDN     RCPDDN &DDN&F&FILE\n         AGO   .TMCLAS\n.DDNRT   RCPDDNRT &DDNRET\n&DDNRTO  SETA  &DTUO-10\n         AGO   .TUNIT\n.UNIT   RCPUNIT &UNIT,&VOL\n         AIF   ('&UNITCNT' EQ '').TDEFER                   *LBD 06/86*\n         RCPUNITC &UNITCNT                                 *LBD 06/86*\n         AGO   .TDEFER                                     *LBD 03/86*\n*        AGO   .TVOLRET\n.DEFER   RCPDEFER                                          *LBD 03/86*\n         AGO   .TVOLRET                                    *LBD 03/86*\n.VOLRET  RCPVOLRT &VOLRET\n&VOLRTO  SETA  &DTUO-8\n         AGO   .TDSRGO\n.DSORGRT RCPDSRGR\n&DSRGRTO SETA  &DTUO-2\n         AGO   .TLABEL\n.LABEL   RCPLABEL &LABEL\n         AGO   .TPSWD\n.PASWORD RCPPSWD &PASWORD\n         AGO   .TFORUSE\n.FORUSER RCPFORUS &FORUSER\n         AGO   .TTU\n.TU      RCPTU &TU\n         AGO   .TDISP\n.DISP    RCPDISP &DISP\n         AGO   .TSPACE\n.SPACE   RCPSPACE &SPACE\n         AGO   .TLRECL\n.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X\n               DSORG=&DSORG,KEYLEN=&KEYLEN\n         AGO .TDCBDSN\n.DCBDSN  RCPDCBDS &DCBDSN\n         AGO .TDCBDDN\n.DCBDDN  RCPDCBDD &DCBDDN\n         AGO .TFREE                                              TE7343\n.FREE    RCPFREE  &FREE                                          TE7343\n         AGO   .TPERM\n.PERM    RCPPERM\n         AGO   .TSPECI\n.MSVGP   RCPMSVGP &MSVGP\n         AGO   .SVC99\n.SPECIAL RCPSPEC &SPECIAL\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n.DYNA    DYNALLOC\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **\n.LTR     AIF   ('&ERROR' EQ '').TDDTO\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE\n&I       SETA  0\n.DDNTOL  ANOP\n&I       SETA  &I+1\n         AIF   ('&DDNTO(&I)' EQ '').RESERVE\n         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR\n         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.DDNTOR  ANOP\n&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)\n         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE 1\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU21\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AIF   (&DSNRTO EQ 0).TDDNRTO\n&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN\n.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11\n&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME\n.DTU11   AIF   (&VOLRTO EQ 0).DTU12\n&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER\n.DTU12   AIF   (&DSRGRTO EQ 0).DTU10\n&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG\n         AGO   .DTU10\n.DTU21   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONCAT": {"ttr": 259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00<\\x00<\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         CONCAT &POSIT,&TYPE=,&EXIT=\n         GBLA  &CONCATN,&CONCATX\n         GBLB  &CONCATB,&CONCATD,&DDDFAIL,&DDDD\n         AIF   (&DDDD).ERRDDDD\n         AIF   ('&POSIT' EQ 'E').ENDCONC\n         AIF   ('&POSIT' NE 'B').ERRPARM\n         AIF   ('&TYPE&EXIT' EQ '').CONCB\n         MNOTE 4,'TYPE AND EXIT IGNORED ON CONCAT B'\n.CONCB   AIF   (&CONCATB).ERRB\n&CONCATB SETB  1\n&CONCATX SETA  4              INITIAL DISPLACEMENT INTO DDNAME LIST\n*\n         MNOTE *,'*   BEGIN CONCATENATION'\n*\n         MEXIT\n.ENDCONC AIF   (NOT &CONCATB).ERRE\n&CONCATB SETB  0\n&CONCATD SETB  0\n&CONCATX SETA  &CONCATX/10             INITIAL 4 WILL ROUND TO 0\n         AIF   (&CONCATN GE &CONCATX).CONCT\n&CONCATN SETA  &CONCATX\n.CONCT   AIF   (&CONCATX LE 1).ERRNUMB\n         MVC   ALOCONCA(4),=Y(X'01',&CONCATX) CODE, NUMBER OF DDNAMES\n         LA    14,ALOCONCA             ADDRESS OF CONCATENATION TU\n         AIF   ('&TYPE' EQ '' OR '&TYPE' EQ 'PERM').PERM\n         AIF   ('&TYPE' NE 'TEMP').ERRTYPE\n         ST    14,ALOBLOCK+20\n         OI    ALOBLOCK+20,X'80'       SET END OF TU ADDR LIST\n         AGO   .CONCA\n.PERM    MVC   ALOBLOCK-8(4),=Y(X'04',0) PERMANENTLY CONCATENATED\n         LA    15,ALOBLOCK-8\n         STM   14,15,ALOBLOCK+20\n         OI    ALOBLOCK+24,X'80'       SET END OF TU ADDR LIST\n.CONCA   LA    0,X'0320'               DYNAMIC CONCATENATION\n         AIF   ('&EXIT' EQ '').EXITDEF\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n         AGO   .BALDDDD\n.EXITDEF LA    15,ALODDERR             LOAD ERROR EXIT RTN ADDRESS\n&DDDFAIL SETB  1                       IN-LINE EXIT NEEDED\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n*\n         MNOTE *,'*   END CONCATENTATION OF &CONCATX DDNAMES'\n*\n         MEXIT\n.ERRDDDD MNOTE 12,'CONCAT MAY NOT BE ISSUED AFTER DDDD'\n         MEXIT\n.ERRB    MNOTE 12,'CONCAT E  MUST BE ISSUED BEFORE RE-ISSUING CONCAT B'\n         MEXIT\n.ERRE    MNOTE 12,'CONCAT E  MAY BE ISSUED ONLY AFTER CONCAT B'\n         MEXIT\n.ERRNUMB MNOTE 12,'AT LEAST 2 DD''S MUST BE CONCATENATED'\n         MEXIT\n.ERRTYPE MNOTE 8,'INVALID TYPE, &TYPE.. IGNORED'\n         AGO   .PERM\n.ERRPARM MNOTE 12,'INVALID POSITIONAL PARAMETER. SPECIFY B OR E'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAPL": {"ttr": 261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x16\\x00\\x16\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&X       DAPL  &Y,&DSECT=NO\n***********************************************************************\n*                                                                     *\n*            DYNAMIC   ALLOCATION   PARAMETER   LIST                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         AIF   ('&DSECT' NE 'NO').DSECT\nDAPL     DS    0A .                     DAIR PARM LIST\n         AGO   .COM\n.DSECT   ANOP\nDAPL     DSECT ,                        DAIR PARM LIST\n.COM     ANOP\nDAPLUPT  DC    A(0) .                   USER PROF. TAB\nDAPLECT  DC    A(0) .                   ENV. CTL TAB\nDAPLECB  DC    A(0) .                   ECB\nDAPLPSCB DC    A(0) .                   PROT STEP CB\nDAPLDAPB DC    A(0) .                   DAIR PARM BLOCK\nDAPLLEN  EQU   *-DAPL .                 LENGTH\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD": {"ttr": 263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00i\\x00i\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 105, "newlines": 105, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&DDNAME  DDD   &DUMMY,&DSN=,&DSNAME=,&DISP=,&TERM=,&FREE=END,          *\n               &UNIT=,&SPACE=,&MSVGP=,&VOL=,&VOLUME=,&LABEL=,&PROTECT=,*\n               &DCB=,&SUBSYS=,                                         *\n               &SYSOUT=,&DEST=,&HOLD=,&COPIES=,&OUTLIM=,&FCB=,&UCS=,   *\n               &BURST=,&CHARS=,&FLASH=,&MODIFY=,                       *\n               &KEYADDS=,&TYPE=PERM,&MOUNT=NO,&EXIT=ALODDERR\n         GBLA  &X,&Y,&H,&N,&CONCATX,&R\n         GBLB  &CONCATB,&CONCATD,&DDDFAIL,&DDDD\n         LCLA  &A\n         LCLC  &C,&D\n         AIF   (&DDDD).ERRDDDD\n&X       SETA  20 DISPLACEMENT FROM ALOBLOCK TO FIRST TEXT UNIT POINTER\n&Y       SETA  20         NEGATIVE DISTANCE FROM ALOBLOCK TO FIRST DATA\n&R       SETA  14                      FIRST REGISTER LOADED\n         DDD5  &DDNAME,&DSN,&DSNAME,&DISP\n         AIF   ('&TERM' EQ '').TERMX\n         AIF   ('&TERM' NE 'TS').ERRTERM\n         DDD0  =Y(X'28',0),,,,'TERM=TS'\n.TERMX   AIF   ('&FREE' EQ 'END').FREEX\n         AIF   ('&FREE' NE 'CLOSE').ERRFREE\n         DDD0  =Y(X'1C',0),,,,'FREE=CLOSE'\n.FREEX   AIF   ('&UNIT&SPACE&MSVGP' EQ '').DDD1X\n         DDD1  &UNIT,&SPACE,&MSVGP\n.DDD1X   AIF   ('&VOL&VOLUME&LABEL&PROTECT' EQ '').DDD2X\n         AIF   ('&VOLUME' EQ '').DDD2V\n         AIF   ('&VOL' NE '').ERRVOL\n         DDD2  &VOLUME,&LABEL,&PROTECT\n         AGO   .DDD2X\n.DDD2V   DDD2  &VOL,&LABEL,&PROTECT\n.DDD2X   AIF   ('&DUMMY&DCB&SUBSYS' EQ '').DDD3X\n         DDD3  &DUMMY,&DCB,&SUBSYS\n.DDD3X   AIF   ('&SYSOUT&DEST&HOLD&COPIES&OUTLIM&FCB&UCS' EQ '' AND    *\n               '&BURST&CHARS&FLASH&MODIFY' EQ '').DDD4X\n         DDD4  &SYSOUT,&DEST,&HOLD,&COPIES,&OUTLIM,&FCB,&UCS,          *\n               &BURST,&CHARS,&FLASH,&MODIFY\n.DDD4X   AIF   ('&KEYADDS' EQ '').KEYADDX\n&A       SETA  0\n.KEYLOOP AIF   (&A GE N'&KEYADDS).KEYADDX\n&A       SETA  &A+1\n&C       SETC  '&KEYADDS(&A)'\n         AIF   ('&C' EQ '').KEYLOOP\n         AIF   ('&C'(1,1) EQ '(').KEYADDR\n         DDD0  &C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDR DDD0  0&C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDX AIF   ('&TYPE' EQ 'PERM').TYPEP\n         AIF   ('&TYPE' EQ 'TEMP').TYPEX\n         AIF   ('&TYPE' NE 'CNVRT').ERRTYPE\n         DDD0  =Y(X'53',0),,,,'TYPE=CNVRT  CONVERTIBLE'\n.TYPEP   DDD0  =Y(X'52',0),,,,'PERMANENTLY ALLOCATED'\n.TYPEX   AIF   (&R NE 14).R14X\n&X       SETA  &X-4\n         AGO   .RX\n.R14X    AIF   (&R NE 15).R15X\n         ST    14,ALOBLOCK+&X\n         AGO   .RX\n.R15X    AIF   (&R NE 0).R0X\n         STM   14,15,ALOBLOCK+&X\n&X       SETA  &X+4\n         AGO   .RX\n.R0X     STM   14,0,ALOBLOCK+&X\n&X       SETA  &X+8\n.RX      OI    ALOBLOCK+&X,X'80'        SET END OF TEXT UNIT ADDR LIST\n&C       SETC  'X''0100''+X''0020'''   ALLOC, NOMOUNT\n         AIF   ('&MOUNT' EQ 'NO').MOUNTX\n         AIF   ('&MOUNT' NE 'YES').ERRMOUN\n&C       SETC  'X''0100'''             ALLOC\n.MOUNTX  AIF   (NOT &CONCATD).CONCADX\n&C       SETC  '&C+X''0080'''          DON'T USE EXISTING UNLESS CNVRT\n.CONCADX LA    0,&C                    LOAD VERB, FLAGS1\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n&DDDFAIL SETB  ('&EXIT' EQ 'ALODDERR' OR &DDDFAIL)\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n         SPACE 1\n         AIF   (NOT &CONCATB).CONCX\n&CONCATD SETB  1\n         MVC   ALOCONCA+&CONCATX.(10),ALORTDDN+4 SAVE DDNAME FOR CONCAT\n&CONCATX SETA  &CONCATX+1\n         MVI   ALOCONCA+&CONCATX,8     SET LENGTH TO 8 FOR SPACING\n&CONCATX SETA  &CONCATX+9\n         SPACE 1\n.CONCX   AIF   (&H GE &Y).HX\n&H       SETA  &Y\n.HX      AIF   (&N GE &X).MEXIT\n&N       SETA  &X\n.MEXIT   MEXIT\n.ERRDDDD MNOTE 12,'DDD MAY NOT BE ISSUED AFTER DDDD'\n         MEXIT\n.ERRFREE MNOTE 8,'FREE=&FREE INVALID. FREE=END ASSUMED.'\n         AGO   .FREEX\n.ERRVOL  MNOTE 12,'BOTH VOL= AND VOLUME= SPECIFIED. VOLUME=&VOLUME IGNO*\n               RED.'\n         AGO   .DDD2V\n.ERRTERM MNOTE 8,'INVALID VALUE, TERM=&TERM.. IGNORED.'\n         AGO   .TERMX\n.ERRTYPE MNOTE 8,'TYPE=&TYPE INVALID. TYPE IGNORED.'\n         AGO   .TYPEP\n.ERRMOUN MNOTE 8,'MOUNT=&MOUNT INVALID. IGNORED.'\n         AGO   .MOUNTX\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDDD": {"ttr": 265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00E\\x00E\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         DDDD  &ROLE\n         GBLA  &H,&N,&CONCATN\n         GBLB  &RTDDN,&FREEB,&DDDFAIL,&DDDD\n&DDDD    SETB  1\n         AIF   ('&ROLE' EQ 'STORAGE').CODEX\n         DC    Y(X'8032'-X'10000')     CONTROL BITS FOR DAIRFAIL\nALOROUT  STCM  0,B'0011',ALOBLOCK+1    SET VERB AND FLAGS1\n         AIF   ('&ROLE' EQ '').COMMON\n         AIF   ('&ROLE' NE 'CODE').ERRROLE\n         MVI   ALOBLOCK,20             SET BLOCK LENGTH = 20\n         XC    ALOBLOCK+3(17),ALOBLOCK+3  PRESET BLOCK TO ZEROS\n         LA    0,ALOBLOCK+20           POINTER TO TEXT UNIT ADDRESSES\n         ST    0,ALOBLOCK+8            SET INTO BLOCK\n         LA    0,ALOBLOCK              ADDRESS OF REQUEST BLOCK\n         ST    0,ALOBLOCK-20           POINTER FOR SVC\n         OI    ALOBLOCK-20,X'80'       SET END OF POINTER\n.COMMON  LA    1,ALOBLOCK-20           POINT TO POINTER\n         STM   14,1,12(13)             SAVE REGS IN CASE OF ERROR\n         DYNALLOC ,                    DYNALLOC SVC\n         LTR   15,15                   IF RETURN CODE IS ZERO,\n         BZR   14                      RETURN TO MAINSTREAM\n         ST    15,20(,13)              SAVE RETURN CODE IN REG 0 AREA\n         LM    15,1,16(13)             LOAD EXIT ADDR, RC, AND POINTER\n         ST    0,ALOBLOCK-4            RETURN CODE FOR DAIRFAIL\n         BR    15                      GO TO EXIT RTN\n         AIF   (NOT &DDDFAIL).EXITX\nALODDERR DS    0H\n         AIF   (NOT &FREEB).FREEX\n         CLC   ALOBLOCK+4(2),=X'0438'  \"NOT FREED, IS NOT ALLOCATED\"\n         BER   14                      IS A PERMISSABLE ERROR\n         CLC   ALOBLOCK+4(2),=X'0440'  \"NOT FREED, IS NOT ALLOCATED\"\n         BER   14                      IS A PERMISSABLE ERROR\n.FREEX   ANOP\nALODFAIL DS    0H\n         L     15,16                   ADDRESS CVT\n         AIF   ('&ROLE' EQ '').PARAMX\n         LA    14,ALOBLOCK-4           RETURN CODE IN FULLWORD\n         LA    15,976(,15)             CVTEFF02 POINTS TO IKJEFF02\n         LA    0,ALOROUT-2             BITS TO CONTROL IKJEFF18\n         STM   14,0,ALOBLOCK-20+4\n         AGO   .STOREX\n.PARAMX  LA    15,976(,15)             CVTEFF02 POINTS TO IKJEFF02\n         ST    15,ALOBLOCK-20+8\n.STOREX  LINK  EP=IKJEFF18,            INVOKE DAIRFAIL TO ISSUE WTP    *\n               MF=(E,ALOBLOCK-20)\n         L     1,=A(X'80000000'+99)    ABEND CODE IS USER 99,DUMP\n         ABEND (1)                     ABEND\n.EXITX   AIF   ('&ROLE' EQ 'CODE').MEXIT\n.CODEX   ANOP\n&H       SETA  &H/2-2\n         DS    &H.H                    SPACE FOR SOME TEXT UNITS\n         DC    A(*-X'7FFFFFEC')        ADDRESS OF ALOBLOCK\n         DC    A(ALOBLOCK-4)           ADDRESS OF SVC RC FOR DAIRFAIL\n         DC    A(0)                    ADDRESS OF FULLWORD -> IKJEFF02\n         DC    A(ALOROUT-2)        ADDRESS OF CONTROL BITS FOR DAIRFAIL\n         DS    F                   RETURN CODE FROM SVC 99 FOR DAIRFAIL\nALOBLOCK DC    X'14002000'             LENGTH, VERB, FLAGS1\n         DC    A(0,*+12,0,0)   ERROR CODES, TU LIST ADDR, RESV, FLAGS2\n&N       SETA  &N/4-4\n         DS    &N.A                    TU ADDRESS LIST\n         AIF   (NOT &RTDDN).ARTDDNX\nALORTDDN DC    Y(X'55',1,8),CL8' '     TU FOR RETURN OF DDNAME\nDDDNAME  EQU   ALORTDDN+6,8,C'C'\n.ARTDDNX AIF   (&CONCATN EQ 0).MEXIT\nALOCONCA DC    Y(1,0),&CONCATN.XL10'0' TU FOR DDNAMES TO CONCATENATE\n.MEXIT   MEXIT\n.ERRROLE MNOTE 12,'&ROLE IS INVALID. USE CODE OR STORAGE.'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DDDMSG": {"ttr": 267, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x06\\x00\\x06\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         DDDMSG\n         LINK  EP=IKJEFF18,            INVOKE DAIRFAIL TO ISSUE WTP    *\n               PARAM=(,ALOBLOCK-4,=F'0',ALOROUT-2),                    *\n               MF=(E,ALOBLOCK-20)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDDMVC": {"ttr": 269, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x07\\x00\\x07\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&NAME    DDDMVC &PARMS=,&RETURN=\n         MVC   PARMLIST,ALOBLOCK-20\n&NAME    LINK  EP=IKJEFF18,            INVOKE DAIRFAIL TO ISSUE WTP    *\n               PARAM=(,ALOBLOCK-4,=F'0',=X'C032',=F'0',&RETURN),       *\n               VL=1,MF=(E,&PARMS)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD0": {"ttr": 514, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00k\\x00k\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 107, "newlines": 107, "modlines": 0, "user": "DYNALLC"}, "text": "***********************************************************************\n*                                                                     *\n*   MACRO DDD0                                                        *\n*                                                                     *\n*    FUNCTION: MOVE A SINGLE TEXT UNIT INTO THE TEXT UNIT AREA,       *\n*      SET ITS ADDRESS INTO A REGISTER.  STORE ADDRESSES INTO THE     *\n*      TEXT UNIT ADDRESS ARRAY.                                       *\n*                                                                     *\n*    OPERANDS: THERE ARE 5 POSITIONAL OPERANDS, P1 THRU P5.           *\n*      OPERAND P5 IS ALWAYS A QUOTED STRING THAT DDD0 EXPANDS INTO A  *\n*      COMMENT MNOTE. OPERANDS P1-P4 SPECIFY A TEXT UNIT IN ONE OF    *\n*      SEVERAL WAYS:                                                  *\n*        ADDRESS ONLY: P1 IS AN RX-TYPE ADDRESS OF A TEXT UNIT        *\n*          PREFORMATTED BY THE INVOKER. DDD0 DOES NOT COPY THE TEXT   *\n*          UNIT IN THIS CASE. THIS MODE IS SELECTED WHEN P2 IS        *\n*          OMITTED.                                                   *\n*        TWO-PART TEXT UNIT: P1 IS THE LENGTH (NON-RELOCATABLE        *\n*          EXPRESSION WHOSE FIRST CHARACTER IS NUMERIC) AND P2 IS     *\n*          THE ADDRESS (RS-TYPE) OF THE FIRST PART OF THE TEXT UNIT.  *\n*          P3 IS THE LENGTH (NON-RELOCATABLE EXPRESSION) AND P4 IS    *\n*          THE ADDRESS (RS-TYPE) OF THE SECOND PART OF THE TEXT       *\n*          UNIT. DDD0 COPIES BOTH PARTS TO THE TEXT UNIT AREA. THIS   *\n*          MODE IS SELECTED WHEN P2 IS NOT OMITTED, THE FIRST         *\n*          CHARACTER OF P1 IS NUMERIC AND P3 IS NOT OMITTED.          *\n*        ONE-PART TEXT UNIT: P1 IS THE LENGTH (NON-RELOCATABLE        *\n*          EXPRESSION WHOSE FIRST CHARACTER IS NUMERIC) AND P2 IS     *\n*          THE ADDRESS (RS-TYPE) OF THE TEXT UNIT.  DDD0 COPIES THE   *\n*          TEXT UNIT TO THE TEXT UNIT AREA. THIS MODE IS SELECTED     *\n*          WHEN P2 IS NOT OMITTED, THE FIRST CHARACTER OF P1 IS       *\n*          NUMERIC AND P3 IS OMITTED.                                 *\n*        CHARACTER-STRING VALUE: P1 (A-TYPE ADDRESS CONSTANT WHOSE    *\n*          FIRST CHARACTER IS NOT NUMERIC) IS THE KEY AND NUMBER OF   *\n*          PARAMETERS (MUST BE 1) OF THE TEXT UNIT.  P2 IS AN         *\n*          UNQUOTED STRING USED BY DDD0 AS THE VALUE OF THE FIRST     *\n*          PARAMETER. DDD0 WILL EFFECTIVELY REMOVE THE FIRST          *\n*          CHARACTER OF THE STRING IF THE FIRST TWO CHARACTERS ARE    *\n*          BOTH AMPERSANDS. DDD0 SETS THE LENGTH OF THE FIRST         *\n*          PARAMETER TO THE LENGTH OF THE P2 STRING (AFTER AMPERSAND  *\n*          REMOVAL, IF ANY). P3 IS AN UPPER LIMIT TO THE LENGTH OF    *\n*          P2 (BEFORE AMPERSAND REMOVAL). DDD0 COPIES THE TEXT UNIT   *\n*          TO THE TEXT UNIT AREA. THIS MODE IS SELECTED WHEN P2 IS    *\n*          NOT OMITTED AND P1'S FIRST CHARACTER IS NOT NUMERIC.       *\n*                                                                     *\n***********************************************************************\n         MACRO\n         DDD0  &ID,&CH,&L2,&A2,&COMMENT\n         GBLA  &X,&Y,&R\n         LCLA  &A,&K\n         LCLC  &C\n         SPACE 1\n         MNOTE *,&COMMENT\n         AIF   (T'&CH NE 'O').KEYADDX\n         AIF   ('&ID'(K'&ID,1) NE '@').PSREGX\n&C       SETC  '&ID'(1,K'&ID-1)\n         L     &R,&C\n         AGO   .CODEX\n.PSREGX  LA    &R,&ID\n         AGO   .CODEX\n.KEYADDX ANOP\n.*\n         AIF   ('&ID'(1,1) LT '0').MOVLITX\n         AIF   (T'&L2 EQ 'O').MOVVALX\n&Y       SETA  (&Y+&L2+1)/2*2\n         MVC   ALOBLOCK-&Y.(&L2),&A2\n.MOVVALX ANOP\n&Y       SETA  (&Y+&ID+1)/2*2\n         MVC   ALOBLOCK-&Y.(&ID),&CH\n         LA    &R,ALOBLOCK-&Y\n         AGO   .CODEX\n.MOVLITX ANOP\n.*\n&K       SETA  K'&CH\n         AIF   (&K GT &L2).ERRLEN\n&C       SETC  '&CH '(1,2)\n&A       SETA  3\n         AIF   ('&C' NE '&&').LOOP\n&A       SETA  4\n&C       SETC  '&CH '(1,3)\n.LOOP    AIF   (&A GT &K).SETK\n&C       SETC  '&C'',C'''.'&CH   '(&A,4)\n&A       SETA  &A+4\n         AGO   .LOOP\n.SETK    AIF   ('&CH '(1,2) NE '&&').LA\n&K       SETA  &K-1\n.LA      ANOP\n&A       SETA  &K+6\n&Y       SETA  (&Y+&A+1)/2*2\n         MVC   ALOBLOCK-&Y.(&A),=A(&ID,&K*X'10000'+C'&C')\n         LA    &R,ALOBLOCK-&Y\n.CODEX   ANOP\n.*\n         AIF   (&R NE 14).R14X\n&R       SETA  15\n         MEXIT\n.R14X    AIF   (&R NE 15).R15X\n&R       SETA  0\n         MEXIT\n.R15X    AIF   (&R NE 0).R0X\n&R       SETA  1\n         MEXIT\n.R0X     STM   14,1,ALOBLOCK+&X\n&X       SETA  &X+16\n&R       SETA  14\n         MEXIT\n.ERRLEN  MNOTE 12,'OPERAND ''&CH'' EXCEEDS &L2 CHARACTERS. OPERAND IGNO*\n               RED.'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD1": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x9c\\x00\\x9c\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 156, "newlines": 156, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         DDD1  &UNIT,&SPACE,&MSVGP\n         LCLA  &A,&K\n         LCLB  &B,&T\n         LCLC  &C,&D\n         AIF   ('&UNIT' EQ '').UNITX\n         AIF   (N'&UNIT GT 3).ERRUNI9\n&C       SETC  '&UNIT(1)'\n         AIF   ('&C' EQ '').UNIT1X\n         AIF   ('&C'(K'&C,1) NE '@').UNIT1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'15',1,8),8,&C,'UNIT=CL8 AT &C'\n         AGO   .UNIT1X\n.UNIT1@X DDD0  X'00150001',&C,8,,'UNIT=&C'\n.UNIT1X  AIF   (N'&UNIT LE 1).UNITX\n&C       SETC  '&UNIT(2)'\n         AIF   ('&C' EQ '').UNIT2X\n         AIF   ('&C' NE 'P').UNITC\n         DDD0  =Y(X'17',0),,,,'UNIT=(,P)  PARALLEL MOUNT'\n         AGO   .UNIT2X\n.UNITC   AIF   ('&C'(K'&C,1) NE '@').UNITC@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'16',1,1),1,&C,'UNIT=(,AL1 AT &C)  UNIT COUNT'\n         AGO   .UNIT2X\n.UNITC@X DDD0  7,=AL1(0,X'16',0,1,0,1,&C),,,'UNIT=(,&C)  UNIT COUNT'\n.UNIT2X  AIF   ('&UNIT(3)' EQ '').UNITX\n         AIF   ('&UNIT(3)' NE 'DEFER').ERRUNIT\n         DDD0  =Y(X'6C',0),,,,'UNIT=(,,DEFER)  DEFERRED MOUNTING'\n.UNITX   AIF   ('&SPACE' EQ '').SPACEX\n         AIF   (N'&SPACE GT 5).ERRSPA9\n&C       SETC  '&SPACE(1)'\n         AIF   ('&C' EQ '').SPACE1X\n         AIF   ('&C' NE 'TRK').SPACE1C\n         DDD0  =Y(X'07',0),,,,'SPACE=(TRK)'\n         AGO   .SPACE1X\n.SPACE1C AIF   ('&C' NE 'CYL').SPACE1A\n         DDD0  =Y(X'08',0),,,,'SPACE=(CYL)'\n         AGO   .SPACE1X\n.SPACE1A AIF   ('&C'(K'&C,1) NE '@').SPAC1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'09',1,3),3,&C,                                   *\n               'SPACE=(AL3 AT &C)  AVERAGE BLOCK SIZE'\n         AGO   .SPACE1X\n.SPAC1@X DDD0  9,=AL3(X'000900',X'010003',&C),,,                       *\n               'SPACE=(&C)  AVERAGE BLOCK SIZE'\n.SPACE1X AIF   ('&SPACE(2)' EQ '').SPACE2X\n&C       SETC  '&SPACE(2)'\n         AIF   ('&C'(1,1) NE '(').SPACE2W\n&A       SETA  2\n.SPACE2A AIF   ('&C'(&A,1) EQ ',' AND &K EQ 0).SPACE2C\n&B       SETB  ('&C'(&A,1) EQ '(')\n&T       SETB  ('&C'(&A,1) EQ ')')\n&K       SETA  &K+&B-&T\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).SPACE2A\n.SPACE2C AIF   (&A EQ 2).SPAC21X\n&D       SETC  '&C'(2,&A-2)\n         AIF   ('&D'(K'&D,1) NE '@').SPA21@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'0A',1,3),3,&D,'SPACE=(,(AL3 AT &D))'\n         AGO   .SPAC21X\n.SPA21@X DDD0  9,=AL3(X'000A00',X'010003',&D),,,'SPACE=(,(&D))'\n.SPAC21X AIF   (&A GE K'&C).SPACE2X\n&C       SETC  '&C'(&A+1,K'&C-&A)\n&A       SETA  1\n.SPACE2D AIF   ('&C'(&A,1) EQ ',' AND &K EQ 0).SPACE2E\n&B       SETB  ('&C'(&A,1) EQ '(')\n&T       SETB  ('&C'(&A,1) EQ ')')\n&K       SETA  &K+&B-&T\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).SPACE2D\n.SPACE2E AIF   (&A EQ 1).SPAC22X\n&D       SETC  '&C'(1,&A-1)\n         AIF   ('&D'(K'&D,1) NE '@').SPA22@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'0B',1,3),3,&D,'SPACE=(,(,AL3 AT &D))'\n         AGO   .SPAC22X\n.SPA22@X DDD0  9,=AL3(X'000B00',X'010003',&D),,,'SPACE=(,(,&D))'\n.SPAC22X AIF   (&A GE K'&C).SPACE2X\n&C       SETC  '&C'(&A+1,K'&C-&A)\n&A       SETA  1\n.SPACE2G AIF   ('&C'(&A,1) EQ ',' AND &K EQ 0).ERRSPA2\n&B       SETB  ('&C'(&A,1) EQ '(')\n&T       SETB  ('&C'(&A,1) EQ ')')\n&K       SETA  &K+&B-&T\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).SPACE2G\n&D       SETC  '&C'(1,&A-1)\n         AIF   ('&D'(K'&D,1) NE '@').SPA23@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'0C',1,3),3,&D,'SPACE=(,(,,AL3 AT &D))'\n         AGO   .SPACE2X\n.SPA23@X DDD0  9,=AL3(X'000C00',X'010003',&D),,,'SPACE=(,(,,&D))'\n         AGO   .SPACE2X\n.SPACE2W AIF   ('&C'(K'&C,1) NE '@').SPAC2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'0A',1,3),3,&C,'SPACE=(,AL3 AT &C)'\n         AGO   .SPACE2X\n.SPAC2@X DDD0  9,=AL3(X'000A00',X'010003',&C),,,'SPACE=(,&C)'\n.SPACE2X AIF   (N'&SPACE LE 3).SPACE3\n         AIF   ('&SPACE(5)' EQ '').SPACE4\n         AIF   ('&SPACE(5)' NE 'ROUND').ERRSPA5\n         DDD0  =Y(X'0F',0),,,,'SPACE=(,,,,ROUND)'\n.SPACE4  ANOP\n&C       SETC  '&SPACE(4)'\n         AIF   ('&C' EQ '').SPACE3\n         AIF   ('&C' NE 'CONTIG').SPACE4A\n         DDD0  7,=AL1(0,X'0E',0,1,0,1,X'08'),,,'SPACE=(,,,CONTIG)'\n         AGO   .SPACE3\n.SPACE4A AIF   ('&C' NE 'ALX').SPACE4M\n         DDD0  7,=AL1(0,X'0E',0,1,0,1,X'02'),,,'SPACE=(,,,ALX)'\n         AGO   .SPACE3\n.SPACE4M AIF   ('&C' NE 'MXIG').SPACE4@\n         DDD0  7,=AL1(0,X'0E',0,1,0,1,X'04'),,,'SPACE=(,,,MXIG)'\n         AGO   .SPACE3\n.SPACE4@ AIF   ('&C'(K'&C,1) NE '@').ERRSPA4\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'0E',1,1),1,&C,'SPACE=(,,,XL1 AT &C)'\n.SPACE3  AIF   ('&SPACE(3)' EQ '').SPACEX\n         AIF   ('&SPACE(3)' NE 'RLSE').ERRRLSE\n         DDD0  =Y(X'0D',0),,,,'SPACE=(,,RLSE)'\n.SPACEX  AIF   ('&MSVGP' EQ '').MSVGPX\n         AIF   (N'&MSVGP GT 2).ERRMSV9\n         AIF   (N'&MSVGP LE 1).MSVDDX\n         MNOTE 8,'SECOND SUBPARAMETER OF MSVGP NOT SUPPORTED BY DYNAMIC*\n                ALLOCATION.'\n.MSVDDX  ANOP\n&C       SETC  '&MSVGP(1)'\n         AIF   ('&C' EQ '').MSVGPX\n         AIF   ('&C'(K'&C,1) NE '@').MSVGP@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'5E',1,8),8,&C,'MSVGP=CL8 AT &C'\n         AGO   .MSVGPX\n.MSVGP@X DDD0  X'005E0001',&C,8,,'MSVGP=&C'\n.MSVGPX  MEXIT\n.ERRUNI9 MNOTE 8,'ONLY THREE SUBPARAMETERS ALLOWED IN UNIT=&UNIT.. UNIT*\n                IGNORED.'\n         AGO   .UNITX\n.ERRUNIT MNOTE 8,'UNIT=(,,&UNIT(3)) IS INVALID. IGNORED.'\n         AGO   .UNITX\n.ERRSPA9 MNOTE 8,'ONLY FIVE SUBPARAMETERS ALLOWED IN SPACE=&SPACE.. SPA*\n               CE IGNORED.'\n         AGO   .SPACEX\n.ERRSPA2 MNOTE 8,'TOO MAY SUBPARAMETERS IN SECOND SPACE PARAMETER, &SPA*\n               CE(2)'\n         AGO   .SPACE2X\n.ERRRLSE MNOTE 8,'INVALID THIRD SPACE PARAMETER, &SPACE(3)'\n         AGO   .SPACEX\n.ERRSPA4 MNOTE 8,'INVALID FOURTH SPACE PARAMETER, &C'\n         AGO   .SPACE3\n.ERRSPA5 MNOTE 8,'INVALID FIFTH SPACE PARAMETER, &SPACE(5)'\n         AGO   .SPACE4\n.ERRMSV9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN MSVGP=&MSVGP.. MSVG*\n               P IGNORED.'\n         AGO   .MSVGPX\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD2": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\xc6\\x00\\xc6\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 198, "newlines": 198, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         DDD2  &VOL,&LABEL,&PROTECT\n         LCLA  &A\n         LCLC  &C,&D\n         AIF   ('&VOL' EQ '').VOLX\n&C       SETC  '&VOL(N'&VOL)'\n         AIF   ('&C'(1,4) NE 'SER=').VOLREF\n         AIF   ('&C'(5,1) EQ '(').VOLMULT\n         AIF   ('&C'(K'&C,1) NE '@').VOLS1@X\n&C       SETC  '&C'(5,K'&C-5)\n         DDD0  6,=Y(X'10',1,6),6,&C,'VOL=SER=CL6 AT &C'\n         AGO   .VOLKEYX\n.VOLS1@X AIF   (K'&C NE 10).ERRVOS1\n&C       SETC  '&C'(5,6)\n         DDD0  X'00100001',&C,6,,'VOL=SER=&C'\n         AGO   .VOLKEYX\n.VOLMULT AIF   ('&C'(K'&C-1,1) NE '@').VOLMU@X\n&C       SETC  '&C'(6,K'&C-7)\n         DDD0  6,=Y(X'10',1,6),6,&C,'VOL=SER=CL6 AT &C'\n         AGO   .VOLKEYX\n.VOLMU@X ANOP\n&D       SETC  'X''00060000''+C'''.'&C'(6,2).''',C'''.'&C'(8,4).''''\n&A       SETA  12\n.VOLLOOP AIF   ('&C'(&A,1) NE ',').ERRVOLS\n&D       SETC  '&D,X''00060000''+C'''.'&C'(&A+1,2).''',C'''.'&C'(&A+3,4*\n               ).''''\n&A       SETA  &A+7\n         AIF   (&A LT K'&C).VOLLOOP\n&A       SETA  &A/7\n&D       SETC  'X''00100000''+&A,&D'\n&A       SETA  &A*8+4\n         DDD0  &A,=A(&D),,,'VOL=&C'\n         AGO   .VOLKEYX\n.VOLREF  AIF   ('&C'(1,4) NE 'REF=').VOL4\n         AIF   ('&C'(5,1) EQ '*').ERRVOLR\n         AIF   ('&C'(K'&C,1) NE '@').VOLRE@X\n&C       SETC  '&C'(5,K'&C-5)\n         DDD0  6,=Y(X'14',1,44),44,&C,'VOL=REF=CL44 AT &C'\n         AGO   .VOLKEYX\n.VOLRE@X ANOP\n&C       SETC  '&C'(5,K'&C-4)\n         DDD0  X'00140001',&C,44,,'VOL=REF=&C'\n.VOLKEYX AIF   (N'&VOL LE 1).VOLX\n         AIF   (N'&VOL LE 2).VOL2X\n         AIF   (N'&VOL LE 3).VOL3X\n         AIF   (N'&VOL LE 4).VOL4X\n         AIF   (N'&VOL LE 5).VOL5X\n.VOL4    AIF   (N'&VOL GT 4).ERRVOL9\n.VOL5X   ANOP\n&C       SETC  '&VOL(4)'\n         AIF   ('&C' EQ '').VOL4X\n         AIF   ('&C'(K'&C,1) NE '@').VOL4@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'13',1,1),1,&C,'VOL=(,,,AL1 AT &C)  VOLUME COUNT'\n         AGO   .VOL4X\n.VOL4@X  DDD0  7,=AL1(0,X'13',0,1,0,1,&C),,,'VOL=(,,,&C)  VOLUME COUNT'\n.VOL4X   ANOP\n&C       SETC  '&VOL(3)'\n         AIF   ('&C' EQ '').VOL3X\n         AIF   ('&C'(K'&C,1) NE '@').VOL3@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'12',1,2),2,&C,'VOL=(,,AL2 AT &C)  VOLUME SEQUENCE*\n                NUMBER'\n         AGO   .VOL3X\n.VOL3@X  DDD0  8,=Y(X'12',1,2,&C),,,'VOL=(,,&C)  VOLUME SEQUENCE NUMBER*\n               '\n.VOL3X   AIF   ('&VOL(2)' EQ '').VOL2X\n         AIF   ('&VOL(2)' NE 'RETAIN').ERRVOL2\n         MNOTE 8,'VOL=(,RETAIN) NOT SUPPORTED BY DYNAMIC ALLOCATION'\n.VOL2X   AIF   ('&VOL(1)' EQ '').VOLX\n         AIF   ('&VOL(1)' NE 'PRIVATE').ERRVOL1\n         DDD0  =Y(X'11',0),,,,'VOL=(PRIVATE)'\n.VOLX    AIF   ('&LABEL' EQ '').LABELX\n&C       SETC  '&LABEL(N'&LABEL)'\n         AIF   ('&C'(1,6) NE 'EXPDT=').LABELEX\n         AIF   ('&C'(K'&C,1) NE '@').LABE@X\n&C       SETC  '&C'(7,K'&C-7)\n         DDD0  6,=Y(X'22',1,5),5,&C,'LABEL=EXPDT=CL5 AT &C'\n         AGO   .LABKEYX\n.LABE@X  AIF   (K'&C NE 11).ERREXPD\n&C       SETC  '&C'(7,5)\n         DDD0  X'00220001',&C,5,,'LABEL=EXPDT=&C'\n         AGO   .LABKEYX\n.LABELEX AIF   ('&C'(1,6) NE 'RETPD=').LABELRX\n         AIF   ('&C'(K'&C,1) NE '@').LABR@X\n&C       SETC  '&C'(7,K'&C-7)\n         DDD0  6,=Y(X'23',1,2),2,&C,'LABEL=RETPD=AL2 AT &C'\n         AGO   .LABKEYX\n.LABR@X  ANOP\n&C       SETC  '&C'(7,K'&C-6)\n         DDD0  8,=Y(X'23',1,2,&C),,,'LABEL=RETPD=&C'\n.LABKEYX AIF   (N'&LABEL LE 1).LABELX\n         AIF   (N'&LABEL LE 2).LABEL2X\n         AIF   (N'&LABEL LE 3).LABEL3X\n         AIF   (N'&LABEL LE 4).LABEL4X\n         AIF   (N'&LABEL LE 5).LABEL5X\n.LABELRX AIF   (N'&LABEL GT 4).ERRLAB9\n.LABEL5X ANOP\n&C       SETC  '&LABEL(4)'\n         AIF   ('&C' EQ '').LABEL4X\n         AIF   ('&C' NE 'IN').LABEL4A\n         DDD0  7,=AL1(0,X'21',0,1,0,1,X'80'),,,'LABEL=(,,,IN)'\n         AGO   .LABEL4X\n.LABEL4A AIF   ('&C' NE 'OUT').LABEL4@\n         DDD0  7,=AL1(0,X'21',0,1,0,1,X'40'),,,'LABEL=(,,,OUT)'\n         AGO   .LABEL4X\n.LABEL4@ AIF   ('&C'(K'&C,1) NE '@').ERRLAB4\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'21',1,1),1,&C,'LABEL=(,,,XL1 AT &C)  INPUT ONLY O*\n               R OUTPUT ONLY'\n.LABEL4X ANOP\n&C       SETC  '&LABEL(3)'\n         AIF   ('&C' EQ '').LABEL3X\n         AIF   ('&C' NE 'PASSWORD').LABEL3A\n         DDD0  7,=AL1(0,X'20',0,1,0,1,X'10'),,,'LABEL=(,,PASSWORD)'\n         AGO   .LABEL3X\n.LABEL3A AIF   ('&C' NE 'NOPWREAD').LABEL3@\n         DDD0  7,=AL1(0,X'20',0,1,0,1,X'30'),,,'LABEL=(,,NOPWREAD)'\n         AGO   .LABEL3X\n.LABEL3@ AIF   ('&C'(K'&C,1) NE '@').ERRLAB3\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'20',1,1),1,&C,'LABEL=(,,XL1 AT &C)  PASSWORD PROT*\n               ECTION'\n.LABEL3X ANOP\n&C       SETC  '&LABEL(2)'\n         AIF   ('&C' EQ '').LABEL2X\n         AIF   ('&C' NE 'NSL').LABEL2A\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'04'),,,'LABEL=(,NSL)'\n         AGO   .LABEL2X\n.LABEL2A AIF   ('&C' NE 'SL').LABEL2B\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'02'),,,'LABEL=(,SL)'\n         AGO   .LABEL2X\n.LABEL2B AIF   ('&C' NE 'NL').LABEL2C\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'01'),,,'LABEL=(,NL)'\n         AGO   .LABEL2X\n.LABEL2C AIF   ('&C' NE 'BLP').LABEL2D\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'10'),,,'LABEL=(,BLP)'\n         AGO   .LABEL2X\n.LABEL2D AIF   ('&C' NE 'SUL').LABEL2E\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'08'),,,'LABEL=(,SUL)'\n         AGO   .LABEL2X\n.LABEL2E AIF   ('&C' NE 'AL').LABEL2F\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'40'),,,'LABEL=(,AL)'\n         AGO   .LABEL2X\n.LABEL2F AIF   ('&C' NE 'AUL').LABEL2G\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'48'),,,'LABEL=(,AUL)'\n         AGO   .LABEL2X\n.LABEL2G AIF   ('&C' NE 'LTM').LABEL2@\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'21'),,,'LABEL=(,LTM)'\n         AGO   .LABEL2X\n.LABEL2@ AIF   ('&C'(K'&C,1) NE '@').ERRLAB2\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1E',1,1),1,&C,'LABEL=(,XL1 AT &C)  LABEL TYPE'\n.LABEL2X ANOP\n&C       SETC  '&LABEL(1)'\n         AIF   ('&C' EQ '').LABELX\n         AIF   ('&C'(K'&C,1) NE '@').LABE1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1F',1,2),2,&C,'LABEL=(AL2 AT &C)  DATASET SEQUENC*\n               E NUMBER'\n         AGO   .LABELX\n.LABE1@X DDD0  8,=Y(X'1F',1,2,&C),,,'LABEL=(&C)  DATASET SEQUENCE NUMBE*\n               R'\n.LABELX  AIF   ('&PROTECT' EQ '').PROTECX\n         AIF   ('&PROTECT' NE 'YES').ERRPROT\n         DDD0  =Y(X'61',0),,,,'PROTECT=YES'\n.PROTECX MEXIT\n.ERRVOL9 MNOTE 8,'ONLY FOUR POSITIONAL SUBPARAMETERS ALLOWED IN VOL=&VO*\n               L.. POSITIONAL SUBPARAMETERS OF VOL IGNORED'\n         AGO   .VOLX\n.ERRVOS1 ANOP\n&A       SETA  12\n.ERRVOLS ANOP\n&A       SETA  &A/7\n         MNOTE 8,'VOLUME &A IN VOL=&C DOES NOT HAVE 6 CHARACTERS. VOL=S*\n               ER IGNORED.'\n         AGO   .VOLKEYX\n.ERRVOLR MNOTE 8,'VOLUME REFERENCE BY DDNAME IN VOL=&C NOT SUPPORTED BY*\n                DYNAMIC ALLOCATION. IGNORED.'\n         AGO   .VOLKEYX\n.ERRVOL2 MNOTE 8,'VOL=(,&VOL(2)) INVALID. IGNORED.'\n         AGO   .VOL2X\n.ERRVOL1 MNOTE 8,'VOL=(&VOL(1)) INVALID. IGNORED.'\n         AGO   .VOLX\n.ERRLAB9 MNOTE 8,'ONLY FOUR POSITIONAL SUBPARAMETERS ALLOWED IN LABEL=&*\n               LABEL.. POSITIONAL SUBPARAMETERS OF LABEL IGNORED'\n         AGO   .LABELX\n.ERREXPD MNOTE 8,'LABEL=&C INVALID. IGNORED.'\n         AGO   .LABKEYX\n.ERRLAB2 MNOTE 8,'LABEL=(,&C) INVALID. IGNORED.'\n         AGO   .LABEL2X\n.ERRLAB3 MNOTE 8,'LABEL=(,,&LABEL(3)) INVALID. IGNORED.'\n         AGO   .LABEL3X\n.ERRLAB4 MNOTE 8,'LABEL=(,,,&C) INVALID. IGNORED.'\n         AGO   .LABEL4X\n.ERRPROT MNOTE 8,'PROTECT=&PROTECT INVALID. PROTECT IGNORED'\n         AGO   .PROTECX\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD3": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x01(\\x01(\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 296, "newlines": 296, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         DDD3  &DUMMY,&DCB,&SUBSYS\n         GBLA  &Y\n         LCLA  &A,&K,&L,&M1,&M2\n         LCLB  &@,&B0,&B1,&B2,&B3,&B4,&B5,&B6\n         LCLB  &O0,&O1,&O2,&O3,&O4,&O5,&O6,&O7\n         LCLC  &C,&D\n         AIF   ('&DUMMY' EQ '').DUMMYX\n         AIF   ('&DUMMY' NE 'DUMMY').ERRDUMM\n         DDD0  =Y(X'24',0),,,,'DUMMY'\n.DUMMYX  AIF   ('&DCB' EQ '').DCBX\n&A       SETA  N'&DCB+1\n.DCBLOOP AIF   (&A LE 1).DCBX\n&A       SETA  &A-1\n&C       SETC  '&DCB(&A)'\n&@       SETB  0\n         AIF   ('&C'(K'&C,1) NE '@').@X\n&@       SETB  1\n&C       SETC  '&C'(1,K'&C-1)\n.@X      AIF   (K'&C LE 5).DCB4\n         AIF   ('&C'(1,8) NE 'BLKSIZE=').BLKSIZX\n&C       SETC  '&C'(9,K'&C-8)\n         AIF   (&@).BLKSIZ@\n         DDD0  8,=Y(X'30',1,2,&C),,,'DCB=BLKSIZE=&C'\n         AGO   .DCBLOOP\n.BLKSIZ@ DDD0  6,=Y(X'30',1,2),2,&C,'DCB=BLKSIZE=AL2 AT &C'\n         AGO   .DCBLOOP\n.BLKSIZX AIF   ('&C'(6,1) NE '=').DCB7\n&D       SETC  '&C'(1,5)\n&C       SETC  '&C'(7,K'&C-6)\n         AIF   ('&D' NE 'BUFNO').BUFNOX\n         AIF   (&@).BUFNO@\n         DDD0  7,=AL1(0,X'34',0,1,0,1,&C),,,'DCB=BUFNO=&C'\n         AGO   .DCBLOOP\n.BUFNO@  DDD0  6,=Y(X'34',1,1),1,&C,'DCB=BUFNO=AL1 AT &C'\n         AGO   .DCBLOOP\n.BUFNOX  AIF   ('&D' NE 'RECFM').RECFMX\n         AIF   (&@).RECFM@\n&K       SETA  K'&C+1\n.RECFMA  AIF   (&K LE 1).RECFMW\n&K       SETA  &K-1\n&D       SETC  '&C'(&K,1)\n         AIF   ('&D' NE 'F' AND '&D' NE 'U' AND '&D' NE 'V').RECFMB\n&B0      SETB  ('&D' EQ 'F' OR '&D' EQ 'U')\n&B1      SETB  ('&D' EQ 'V' OR '&D' EQ 'U')\n         AGO   .RECFMA\n.RECFMB  AIF   ('&D' NE 'B').RECFMC\n&B3      SETB  1\n         AGO   .RECFMA\n.RECFMC  AIF   ('&D' NE 'S').RECFMD\n&B4      SETB  1\n         AGO   .RECFMA\n.RECFMD  AIF   ('&D' NE 'A').RECFME\n&B5      SETB  1\n         AGO   .RECFMA\n.RECFME  AIF   ('&D' NE 'M').RECFMF\n&B6      SETB  1\n         AGO   .RECFMA\n.RECFMF  AIF   ('&D' NE 'T').RECFMG\n&B2      SETB  1\n         AGO   .RECFMA\n.RECFMG  AIF   ('&D' NE 'D').RECFMH\n&B2      SETB  1\n         AGO   .RECFMA\n.RECFMH  AIF   ('&D' NE 'G').RECFMI\n&B5      SETB  1\n         AGO   .RECFMA\n.RECFMI  AIF   ('&D' NE 'R').ERRRECF\n&B6      SETB  1\n         AGO   .RECFMA\n.RECFMW  DDD0  7,=AL1(0,X'49',0,1,0,1,B'&B0&B1&B2&B3&B4&B5&B6.0'),,,   *\n               'DCB=RECFM=&C'\n         AGO   .DCBLOOP\n.RECFM@  DDD0  6,=Y(X'49',1,1),1,&C,'DCB=RECFM=XL1 AT &C'\n         AGO   .DCBLOOP\n.RECFMX  AIF   ('&D' NE 'OPTCD').OPTCDX\n         AIF   (&@).OPTCD@\n&K       SETA  K'&C+1\n.OPTCDA  AIF   (&K LE 1).OPTCDW\n&K       SETA  &K-1\n&D       SETC  '&C'(&K,1)\n         AIF   ('&D' NE 'W').OPTCDWX\n&O0      SETB  1\n         AGO   .OPTCDA\n.OPTCDWX AIF   ('&D' NE 'B' AND '&D' NE 'U').OPTCBUX\n&O1      SETB  1\n         AGO   .OPTCDA\n.OPTCBUX AIF   ('&D' NE 'C' AND '&D' NE 'E').OPTCCEX\n&O2      SETB  1\n         AGO   .OPTCDA\n.OPTCCEX AIF   ('&D' NE 'F' AND '&D' NE 'H' AND '&D' NE 'O').OPTFHOX\n&O3      SETB  1\n         AGO   .OPTCDA\n.OPTFHOX AIF   ('&D' NE 'A' AND '&D' NE 'Q').OPTCAQX\n&O4      SETB  1\n         AGO   .OPTCDA\n.OPTCAQX AIF   ('&D' NE 'Z').OPTCDZX\n&O5      SETB  1\n         AGO   .OPTCDA\n.OPTCDZX AIF   ('&D' NE 'T').OPTCDTX\n&O6      SETB  1\n         AGO   .OPTCDA\n.OPTCDTX AIF   ('&D' NE 'R' AND '&D' NE 'J').ERROPTC\n&O7      SETB  1\n         AGO   .OPTCDA\n.OPTCDW  DDD0  7,=AL1(0,X'45',0,1,0,1,B'&O0&O1&O2&O3&O4&O5&O6&O7'),,,  *\n               'DCB=OPTCD=&C'\n         AGO   .DCBLOOP\n.OPTCD@  DDD0  6,=Y(X'45',1,1),1,&C,'DCB=OPTCD=XL1 AT &C'\n         AGO   .DCBLOOP\n.OPTCDX  AIF   ('&D' NE 'LRECL').LRECLX\n         AIF   (&@).LRECL@\n         AIF   ('&C' EQ 'X').LRECLA\n         DDD0  8,=Y(X'42',1,2,&C),,,'DCB=LRECL=&C'\n         AGO   .DCBLOOP\n.LRECL@  DDD0  6,=Y(X'42',1,2),2,&C,'DCB=LRECL=AL2 AT &C'\n         AGO   .DCBLOOP\n.LRECLA  DDD0  8,=Y(X'42',1,2,-X'8000'),'DCB=LRECL=X  VBS ONLY'\n         AGO   .DCBLOOP\n.LRECLX  AIF   ('&D' NE 'DSORG').DSORGX\n         AIF   (&@).DSORG@\n         AIF   ('&C' NE 'PO').DSORGS\n         DDD0  8,=Y(X'3C',1,2,X'0200'),,,'DCB=DSORG=PO'\n         AGO   .DCBLOOP\n.DSORGS  AIF   ('&C' NE 'PS').DSORGD\n         DDD0  8,=Y(X'3C',1,2,X'4000'),,,'DCB=DSORG=PS'\n         AGO   .DCBLOOP\n.DSORGD  AIF   ('&C' NE 'DA').ERRDSOR\n         DDD0  8,=Y(X'3C',1,2,X'2000'),,,'DCB=DSORG=DA'\n         AGO   .DCBLOOP\n.DSORG@  DDD0  6,=Y(X'3C',1,2),2,&C,'DCB=DSORG=XL2 AT &C'\n         AGO   .DCBLOOP\n.DSORGX  AIF   ('&D' NE 'EROPT').EROPTX\n         AIF   (&@).EROPT@\n         AIF   ('&C' NE 'ACC').EROPTA\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'80'),,,'DCB=EROPT=ACC'\n         AGO   .DCBLOOP\n.EROPTA  AIF   ('&C' NE 'SKP').EROPTB\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'40'),,,'DCB=EROPT=SKP'\n         AGO   .DCBLOOP\n.EROPTB  AIF   ('&C' NE 'ABE').EROPTC\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'20'),,,'DCB=EROPT=ABE'\n         AGO   .DCBLOOP\n.EROPTC  AIF   ('&C' NE 'T').ERREROP\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'10'),,,'DCB=EROPT=T'\n         AGO   .DCBLOOP\n.EROPT@  DDD0  6,=Y(X'3D',1,1),1,&C,'DCB=EROPT=XL1 AT &C'\n         AGO   .DCBLOOP\n.EROPTX  AIF   ('&D' NE 'LIMCT').ERRDCB\n         AIF   (&@).LIMCT@\n         DDD0  9,=AL3(X'004100',X'010003',&C),,,'DCB=LIMCT=&C'\n         AGO   .DCBLOOP\n.LIMCT@  DDD0  6,=Y(X'41',1,3),3,&C,'DCB=LIMCT=AL3 AT &C'\n         AGO   .DCBLOOP\n.DCB7    AIF   ('&C'(1,7) NE 'KEYLEN=').DCB5\n&C       SETC  '&C'(8,K'&C-7)\n         AIF   (&@).KEYLEN@\n         DDD0  7,=AL1(0,X'40',0,1,0,1,&C),,,'DCB=KEYLEN=&C'\n         AGO   .DCBLOOP\n.KEYLEN@ DDD0  6,=Y(X'40',1,1),1,&C,'DCB=KEYLEN=AL1 AT &C'\n         AGO   .DCBLOOP\n.DCB5    AIF   ('&C'(1,5) NE 'BUFL=').DCB4\n&C       SETC  '&C'(6,K'&C-5)\n         AIF   (&@).BUFL@\n         DDD0  8,=Y(X'32',1,2,&C),,,'DCB=BUFL=&C'\n         AGO   .DCBLOOP\n.BUFL@   DDD0  6,=Y(X'32',1,2),2,&C,'DCB=BUFL=AL2 AT &C'\n         AGO   .DCBLOOP\n.DCB4    AIF   ('&C'(4,1) NE '=').DCBREF\n&D       SETC  '&C'(1,3)\n&C       SETC  '&C'(5,K'&C-4)\n         AIF   ('&D' NE 'DEN').DCBDENX\n         AIF   (&@).DEN@\n         AIF   ('&C' NE '4').DEN3\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'D3'),,,'DCB=DEN=4'\n         AGO   .DCBLOOP\n.DEN3    AIF   ('&C' NE '3').DEN2\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'C3'),,,'DCB=DEN=3'\n         AGO   .DCBLOOP\n.DEN2    AIF   ('&C' NE '2').DEN1\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'83'),,,'DCB=DEN=2'\n         AGO   .DCBLOOP\n.DEN1    AIF   ('&C' NE '1').DEN0\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'43'),,,'DCB=DEN=1'\n         AGO   .DCBLOOP\n.DEN0    AIF   ('&C' NE '0').ERRDEN\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'03'),,,'DCB=DEN=0'\n         AGO   .DCBLOOP\n.DEN@    DDD0  6,=Y(X'3B',1,1),1,&C,'DCB=DEN=XL1 AT &C'\n         AGO   .DCBLOOP\n.DCBDENX AIF   ('&D' NE 'NCP').ERRDCB\n         AIF   (&@).NCP@\n         DDD0  7,=AL1(0,X'44',0,1,0,1,&C),,,'DCB=NCP=&C'\n         AGO   .DCBLOOP\n.NCP@    DDD0  6,=Y(X'44',1,1),1,&C,'DCB=NCP=AL1 AT &C'\n         AGO   .DCBLOOP\n.DCBREF  AIF   (&A NE 1).ERRDCB2  POSITIONAL PARAMETER\n         AIF   ('&C'(1,2) NE '*.').REFDSN\n&C       SETC  '&C'(3,K'&C-2)\n         AIF   (&@).DCBDDN@\n         DDD0  X'002D0001',&C,8,,'DCB=*.&C'\n         AGO   .DCBLOOP\n.DCBDDN@ DDD0  6,=Y(X'2D',1,8),8,&C,'DCB=*.CL8 AT &C'\n         AGO   .DCBLOOP\n.REFDSN  MNOTE *,'*,* DATASET REFERENCE ASSUMED IN DCB=&C'\n         AIF   (&@).DCBDSN@\n         DDD0  X'002C0001',&C,44,,'DSNAME REFERENCE  DCB=&C'\n         AGO   .DCBLOOP\n.DCBDSN@ DDD0  6,=Y(X'2C',1,44),44,&C,'DSNAME REFERENCE  DCB=CL44 AT &C*\n               '\n         AGO   .DCBLOOP\n.DCBX    AIF   ('&SUBSYS' EQ '').SUBSYSX\n&C       SETC  '&SUBSYS(1)'\n&K       SETA  K'&C\n         AIF   ('&C' EQ '').SUB1X\n         AIF   ('&C'(&K,1) NE '@').SUB1@X\n&C       SETC  '&C'(1,&K-1)\n         DDD0  6,=Y(X'5F',1,4),4,&C,'SUBSYS=(CL4 AT &C)'\n         AGO   .SUB1X\n.SUB1@X  DDD0  X'005F0001',&C,4,,'SUBSYS=(&C)'\n.SUB1X   ANOP\n&A       SETA  N'&SUBSYS+1\n         AIF   (&A LE 2).SUBSYSX\n         SPACE 1\n.ALOOP   AIF   (&A LE 2).AX\n&A       SETA  &A-1\n&D       SETC  '&SUBSYS(&A)   '\n         AIF   ('&D'(1,1) NE '''').DX\n&D       SETC  '&D'(2,K'&D-5).'   '\n.DX      ANOP\n&K       SETA  K'&D-3\n         AIF   ('&D'(&K,1) EQ '@').ERRSUB@\n.ERRSUBX ANOP\n&M       SETA  0\n&M1      SETA  0\n.M2LOOP  AIF   (&M1 GE 2).M2X\n&M1      SETA  &M1+1\n&M       SETA  &M+1\n         AIF   ('&D'(&M,2) NE '''''' AND '&D'(&M,2) NE '&&').M2LOOP\n&K       SETA  &K-1\n&M       SETA  &M+1\n         AGO   .M2LOOP\n.M2X     ANOP\n&C       SETC  '&D'(1,&M)\n.LLOOP   AIF   (&M GE K'&D-3).LX\n&L       SETA  &M+1\n&M1      SETA  0\n.M4LOOP  AIF   (&M1 GE 4).M4X\n&M1      SETA  &M1+1\n&M       SETA  &M+1\n         AIF   ('&D'(&M,2) NE '''''' AND '&D'(&M,2) NE '&&').M4LOOP\n&K       SETA  &K-1\n&M       SETA  &M+1\n         AGO   .M4LOOP\n.M4X     ANOP\n&C       SETC  '&C'',C'''.'&D'(&L,&M-&L+1)\n         AGO   .LLOOP\n.LX      AIF   (&K GT 67).ERRK67\n.K67X    ANOP\n&L       SETA  &K+2\n&Y       SETA  &Y+&L\n         MVC   ALOBLOCK-&Y.(&L),=A(&K*X'10000'+C'&C')\n         AGO   .ALOOP\n.AX      ANOP\n&A       SETA  N'&SUBSYS-1\n&Y       SETA  &Y+4\n         MVC   ALOBLOCK-&Y.(4),=Y(X'60',&A)\n         DDD0  ALOBLOCK-&Y,,,,'SUBSYS=(, )'\n.SUBSYSX MEXIT\n.ERRDUMM MNOTE 8,'INVALID POSITIONAL PARAMETER, &DUMMY.. IGNORED.'\n         AGO   .DUMMYX\n.ERREROP MNOTE 8,'INVALID EROPT, &C.. IGNORED.'\n         AGO   .DCBLOOP\n.ERRRECF MNOTE 8,'INVALID CHAR &D IN RECFM=&C.. RECFM IGNORED.'\n         AGO   .DCBLOOP\n.ERROPTC MNOTE 8,'INVALID CHAR &D IN OPTCD=&C.. OPTCD IGNORED.'\n         AGO   .DCBLOOP\n.ERRDCB2 MNOTE 8,'INVALID DCB PARAMETER, &C.. IGNORED.'\n         AGO   .DCBLOOP\n.ERRDCB  MNOTE 8,'INVALID DCB PARAMETER, &D=&C.. IGNORED.'\n         AGO   .DCBLOOP\n.ERRDSOR MNOTE 8,'DSORG=&C NOT SUPPORTED. IGNORED.'\n         AGO   .DCBLOOP\n.ERRDEN  MNOTE 8,'DEN=&C INVALID. IGNORED.'\n         AGO   .DCBLOOP\n.ERRSUB@ ANOP\n&C       SETC  '&D'(1,&K)\n         MNOTE *,'*,* SUBSYSTEM PARAMETER, ''&C'', TAKEN AS LITERAL'\n         AGO   .ERRSUBX\n.ERRK67  ANOP\n&D       SETC  '&D'(1,K'&D-3)\n         MNOTE 8,'SUBSYSTEM SUBPARAMETER, ''&D'', EXCEEDS 67 CHARACTERS*\n               . TRUNCATED.'\n&K       SETA  67\n         AGO   .K67X\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD4": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\xdc\\x00\\xdc\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 220, "newlines": 220, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         DDD4  &SYSOUT,&DEST,&HOLD,&COPIES,&OUTLIM,&FCB,&UCS,          *\n               &BURST,&CHARS,&FLASH,&MODIFY\n         LCLA  &A,&K\n         LCLC  &C,&D\n         AIF   ('&SYSOUT' EQ '').SYSOUTX\n         AIF   (N'&SYSOUT GT 3).ERRSYS9\n&C       SETC  '&SYSOUT(1)'\n         AIF   ('&C' EQ '').SYSOU1X\n         AIF   ('&C' NE '*').SYSOUT1\n         DDD0  =Y(X'18',0),,,,'SYSOUT=*'\n         AGO   .SYSOU1X\n.SYSOUT1 AIF   ('&C'(K'&C,1) NE '@').SYSO1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'18',1,1),1,&C,'SYSOUT=CL1 AT &C'\n         AGO   .SYSOU1X\n.SYSO1@X DDD0  X'00180001',&C,1,,'SYSOUT=&C'\n.SYSOU1X AIF   (N'&SYSOUT LT 2).SYSOUTX\n&C       SETC  '&SYSOUT(2)'\n         AIF   ('&C' EQ '').SYSOU2X\n         AIF   ('&C'(K'&C,1) NE '@').SYSO2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'19',1,8),8,&C,'SYSOUT=(,CL8 AT &C)'\n         AGO   .SYSOU2X\n.SYSO2@X DDD0  X'00190001',&C,8,,'SYSOUT=(,&C)'\n.SYSOU2X AIF   ('&SYSOUT(3)' EQ '').SYSOUTX\n&C       SETC  '&SYSOUT(3)'\n         AIF   ('&C'(K'&C,1) NE '@').SYSO3@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1A',1,4),4,&C,'SYSOUT=(,,CL4 AT &C)'\n         AGO   .SYSOUTX\n.SYSO3@X DDD0  X'001A0001',&C,4,,'SYSOUT=(,,&C)'\n.SYSOUTX AIF   ('&DEST' EQ '').DESTX\n&C       SETC  '&DEST'\n         AIF   ('&C'(K'&C,1) NE '@').DEST@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'58',1,7),7,&C,'DEST=CL7 AT &C'\n         AGO   .DESTX\n.DEST@X  DDD0  X'00580001',&C,7,,'DEST=&C'\n.DESTX   AIF   ('&HOLD' EQ '' OR '&HOLD' EQ 'NO').HOLDX\n         AIF   ('&HOLD' NE 'YES').ERRHOLD\n         DDD0  =Y(X'59',0),,,,'HOLD=YES'\n.HOLDX   AIF   ('&COPIES' EQ '').COPIESX\n         AIF   (N'&COPIES GT 2).ERRCOP9\n&C       SETC  '&COPIES(1)'\n         AIF   ('&C' EQ '').COPIE1X\n         AIF   ('&C'(K'&C,1) NE '@').COPIE@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1D',1,1),1,&C,'COPIES=AL1 AT &C'\n         AGO   .COPIE1X\n.COPIE@X DDD0  7,=AL1(0,X'1D',0,1,0,1,&C),,,'COPIES=&C'\n.COPIE1X AIF   (N'&COPIES LT 2).COPIESX\n&C       SETC  '&COPIES(2)'\n         AIF   ('&C'(1,1) EQ '(').COPIES2\n         DDD0  7,=AL1(0,X'66',0,1,0,1,&C),,,'COPIES=(,&C)  GROUP VALUE'\n         AGO   .COPIESX\n.COPIES2 ANOP\n&A       SETA  2\n.COPLOOP AIF   ('&C'(&A,1) EQ ',').COPLOPX\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).COPLOOP\n.COPLOPX ANOP\n&D       SETC  '&D,0,1,'.'&C'(2,&A-2)\n&C       SETC  '&C'(&A,K'&C-&A+1)\n&K       SETA  &K+1\n         AIF   (K'&C GT 1).COPIES2\n&A       SETA  &K*3+4\n         DDD0  &A,=AL1(0,X'66',0,&K&D),,,'COPIES=(,&COPIES(2))  GROUP V*\n               ALUES'\n.COPIESX AIF   ('&OUTLIM' EQ '').OUTLIMX\n         AIF   ('&OUTLIM'(K'&OUTLIM,1) NE '@').OUTLI@X\n&C       SETC  '&OUTLIM'(1,K'&OUTLIM-1)\n         DDD0  6,=Y(X'1B',1,3),3,&C,'OUTLIM=AL3 AT &C'\n         AGO   .OUTLIMX\n.OUTLI@X DDD0  9,=AL3(X'001B00',X'010003',&OUTLIM),,,'OUTLIM=&OUTLIM'\n.OUTLIMX AIF   ('&FCB' EQ '').FCBX\n         AIF   (N'&FCB GT 2).ERRFCB9\n&C       SETC  '&FCB(1)'\n         AIF   ('&C' EQ '').FCB1X\n         AIF   ('&C'(K'&C,1) NE '@').FCB1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'25',1,4),4,&C,'FCB=(CL4 AT &C)'\n         AGO   .FCB1X\n.FCB1@X  DDD0  X'00250001',&FCB(1),4,,'FCB=(&FCB(1))'\n.FCB1X   AIF   ('&FCB(2)' EQ '').FCBX\n&C       SETC  '&FCB(2)'\n         AIF   ('&C' NE 'VERIFY').FCB2A\n         DDD0  7,=AL1(0,X'26',0,1,0,1,X'04'),,,'FCB=(,VERIFY)'\n         AGO   .FCBX\n.FCB2A   AIF   ('&C' NE 'ALIGN').FCB2@\n         DDD0  7,=AL1(0,X'26',0,1,0,1,X'08'),,,'FCB=(,ALIGN)'\n         AGO   .FCBX\n.FCB2@   AIF   ('&C'(K'&C,1) NE '@').ERRFCB\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'26',1,1),1,&C,'FCB=(,XL1 AT &C)'\n.FCBX    AIF   ('&UCS' EQ '').UCSX\n         AIF   (N'&UCS GT 3).ERRUCS9\n&C       SETC  '&UCS(1)'\n         AIF   ('&C' EQ '').UCS1X\n         AIF   ('&C'(K'&C,1) NE '@').UCS1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'29',1,4),4,&C,'UCS=(CL4 AT &C)'\n         AGO   .UCS1X\n.UCS1@X  DDD0  X'00290001',&C,4,,'UCS=(&C)'\n.UCS1X   AIF   ('&UCS(2)' EQ '').UCS2X\n         AIF   ('&UCS(2)' NE 'FOLD').ERRUCS2\n         DDD0  =Y(X'2A',0),,,,'UCS=(,FOLD)'\n.UCS2X   AIF   ('&UCS(3)' EQ '').UCSX\n         AIF   ('&UCS(3)' NE 'VERIFY').ERRUCS3\n         DDD0  =Y(X'2B',0),,,,'UCS=(,,VERIFY)'\n.UCSX    AIF   ('&BURST' EQ '').BURSTX\n         AIF   ('&BURST' NE 'YES' AND '&BURST' NE 'Y').BURSTYX\n         DDD0  7,=AL1(0,X'64',0,1,0,1,X'02'),,,'BURST=&BURST'\n         AGO   .BURSTX\n.BURSTYX AIF   ('&BURST' NE 'NO' AND '&BURST' NE 'N').BURSTNX\n         DDD0  7,=AL1(0,X'64',0,1,0,1,X'04'),,,'BURST=&BURST'\n         AGO   .BURSTX\n.BURSTNX AIF   ('&BURST'(K'&BURST,1) NE '@').ERRBURS\n&C       SETC  '&BURST'(1,K'&BURST-1)\n         DDD0  6,=Y(X'64',1,1),1,&C,'BURST=XL1 AT &C'\n.BURSTX  AIF   ('&CHARS' EQ '').CHARSX\n         AIF   (N'&CHARS GT 1).CHARMUL\n&C       SETC  '&CHARS(1)'\n         AIF   ('&C'(K'&C,1) NE '@').CHARS@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'65',1,4),4,&C,'CHARS=CL4 AT &C'\n         AGO   .CHARSX\n.CHARS@X DDD0  X'00650001',&C,4,,'CHARS=&CHARS'\n         AGO   .CHARSX\n.CHARMUL AIF   (N'&CHARS GT 4).ERRCHA9\n&C       SETC  ''\n.CHLOOP  ANOP\n&A       SETA  &A+1\n         AIF   (K'&CHARS(&A) LT 1).ERRCHA1\n         AIF   ('&CHARS(&A)'(K'&CHARS(&A),1) EQ '@').ERRCHA@\n         AIF   (K'&CHARS(&A) GT 4).ERRCHA4\n&C       SETC  '&C,4,C'''.'&CHARS(&A) '(1,2).''',C'''.'&CHARS(&A)   '(3*\n               ,2).''''\n         AIF   (&A LT N'&CHARS).CHLOOP\n&C       SETC  '&A&C'\n&A       SETA  &A*6+4\n         DDD0  &A,=AL2(X'65',&C),,,'CHARS=&CHARS'\n.CHARSX  AIF   ('&FLASH' EQ '').FLASHX\n         AIF   (N'&FLASH GT 2).ERRFLS9\n&C       SETC  '&FLASH(1)'\n         AIF   ('&C' EQ '').FLASH1X\n         AIF   ('&C'(K'&C,1) NE '@').FLAS1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'67',1,4),4,&C,'UCS=(CL4 AT &C)'\n         AGO   .FLASH1X\n.FLAS1@X DDD0  X'00670001',&C,4,,'FLASH=(&C)'\n.FLASH1X AIF   (N'&FLASH LT 2).FLASHX\n&C       SETC  '&FLASH(2)'\n         AIF   ('&C'(K'&C,1) NE '@').FLSH2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'68',1,1),1,&C,'FLASH=(,AL1 AT &C)  FORMS OVERLAY *\n               COUNT'\n         AGO   .FLASHX\n.FLSH2@X DDD0  7,=AL1(0,X'68',0,1,0,1,&C),,,'FLASH=(,&C)  FORMS OVERLAY*\n                COUNT'\n.FLASHX  AIF   ('&MODIFY' EQ '').MODIFYX\n         AIF   (N'&MODIFY GT 2).ERRMOD9\n&C       SETC  '&MODIFY(1)'\n         AIF   ('&C' EQ '').MODIF1X\n         AIF   ('&C'(K'&C,1) NE '@').MODI1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'69',1,4),4,&C,'MODIFY=(CL4 AT &C)'\n         AGO   .MODIF1X\n.MODI1@X DDD0  X'00690001',&C,4,,'MODIFY=(&C)'\n.MODIF1X AIF   (N'&MODIFY LT 2).MODIFYX\n&C       SETC  '&MODIFY(2)'\n         AIF   ('&C'(K'&C,1) NE '@').MODI2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'6A',1,1),1,&C,'MODIFY=(,XL1 AT &C)  TABLE REFEREN*\n               CE CHARACTER'\n         AGO   .MODIFYX\n.MODI2@X DDD0  7,=AL1(0,X'6A',0,1,0,1,&C),,,'MODIFY=(,&C)  TABLE REFERE*\n               NCE CHARACTER'\n.MODIFYX MEXIT\n.ERRSYS9 MNOTE 8,'ONLY THREE SUBPARAMETERS ALLOWED IN SYSOUT=&SYSOUT.. *\n               SYSOUT IGNORED.'\n         AGO   .SYSOUTX\n.ERRHOLD MNOTE 8,'HOLD=&HOLD INVALID. HOLD IGNORED.'\n         AGO   .HOLDX\n.ERRCOP9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN COPIES=&COPIES.. CO*\n               PIES IGNORED.'\n         AGO   .COPIESX\n.ERRFCB9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN FCB=&FCB.. FCB IGNO*\n               RED.'\n         AGO   .FCBX\n.ERRFCB  MNOTE 8,'INVALID VALUE, FCB=(,&C). IGNORED.'\n         AGO   .FCBX\n.ERRUCS9 MNOTE 8,'ONLY THREE SUBPARAMETERS ALLOWED IN UCS=&UCS.. UCS IG*\n               NORED.'\n         AGO   .UCSX\n.ERRUCS2 MNOTE 8,'INVALID VALUE, UCS=(,&UCS(2)). IGNORED.'\n         AGO   .UCS2X\n.ERRUCS3 MNOTE 8,'INVALID VALUE, UCS=(,,&UCS(3)). IGNORED.'\n         AGO   .UCSX\n.ERRBURS MNOTE 8,'BURST=&BURST INVALID. BURST IGNORED.'\n         AGO   .BURSTX\n.ERRCHA1 MNOTE 8,'NULL SUBPARAMETER IN CHARS=&CHARS NOT ALLOWED. CHARS *\n               IGNORED.'\n         AGO   .CHARSX\n.ERRCHA@ MNOTE 8,'ONLY ONE CHARACTER ARRANGEMENT TABLE NAME MAY BE SPEC*\n               IFIED WHEN USING ''@''. CHARS=&CHARS IGNORED.'\n         AGO   .CHARSX\n.ERRCHA4 MNOTE 8,'CHARACTER ARRANGEMENT TABLE NAMES MUST BE ONE TO FOUR*\n                CHARACTERS LONG. CHARS=&CHARS IGNORED.'\n         AGO   .CHARSX\n.ERRCHA9 MNOTE 8,'ONLY FOUR SUBPARAMETERS ALLOWED IN CHARS=&CHARS.. CHA*\n               RS IGNORED.'\n         AGO   .CHARSX\n.ERRFLS9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN FLASH=&FLASH.. FLAS*\n               H IGNORED.'\n         AGO   .FLASHX\n.ERRMOD9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN MODIFY=&MODIFY.. MO*\n               DIFY IGNORED.'\n         AGO   .MODIFYX\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD5": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00n\\x00n\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         DDD5  &DDNAME,&DSN,&DSNAME,&DISP\n         GBLB  &RTDDN,&CONCATB\n         LCLA  &A,&X\n         LCLC  &C,&D\n         AIF   ('&DDNAME' EQ '' OR '&DDNAME' EQ 'RETURN').DDNAMEQ\n         AIF   ('&DDNAME'(K'&DDNAME,1) NE '@').DDNAM@X\n&C       SETC  '&DDNAME'(1,K'&DDNAME-1)\n         DDD0  6,=Y(X'01',1,8),8,&C,'DDNAME CL8 AT &C'\n         AGO   .DDNAMEQ\n.DDNAM@X DDD0  X'00010001',&DDNAME,8,,'DDNAME IS &DDNAME'\n.DDNAMEQ AIF   (NOT &CONCATB AND '&DDNAME' NE 'RETURN').DDNAMEX\n         MVC   ALORTDDN(14),=Y(X'55',1,8,C'  ',C'  ',C'  ',C'  ')\n         DDD0  ALORTDDN,,,,'RETURN THE DDNAME'\n&RTDDN   SETB  1\n.DDNAMEX AIF   ('&DSN&DSNAME' EQ '').DSNAMEX\n&C       SETC  '&DSN'\n         AIF   ('&DSNAME' EQ '').DSNAMEB\n         AIF   ('&DSN' NE '').ERRDSN\n&C       SETC  '&DSNAME'\n.DSNAMEB AIF   ('&C'(1,1) EQ '*').ERRDREF\n&A       SETA  K'&C\n         AIF   ('&C'(&A,1) NE ')').DSNAME\n.MEMLOOP AIF   (&A LE 1).ERRMEM\n&A       SETA  &A-1\n         AIF   ('&C'(&A,1) NE ')').PARENX\n&X       SETA  &X+1\n.PARENX  AIF   ('&C'(&A,1) NE '(').MEMLOOP\n&X       SETA  &X-1\n         AIF   (&X GE 0).MEMLOOP\n&D       SETC  '&C'(&A+1,K'&C-&A-1)\n         AIF   ('&D'(K'&D,1) NE '@').MEMBE@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'03',1,8),8,&D,'DSN=...(CL8 AT &D)'\n         AGO   .MEMBERX\n.MEMBE@X DDD0  X'00030001',&D,8,,'DSN=...(&D)'\n.MEMBERX AIF   (&A  EQ 1).DSNAMEX\n&C       SETC  '&C'(1,&A-1)\n.DSNAME  AIF   ('&C'(K'&C,1) NE '@').DSNAM@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'02',1,44),44,&C,'DSNAME=CL44 AT &C'\n         AGO   .DSNAMEX\n.DSNAM@X DDD0  X'00020001',&C,44,,'DSN=&C'\n.DSNAMEX AIF   ('&DISP' EQ '').DISPX\n&C       SETC  '&DISP(1)'\n         AIF   ('&C' EQ '').STATUSX\n         AIF   ('&C' NE 'SHR' AND '&C' NE 'SHARE').STATUSA\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'08'),,,'DISP=(&C)'\n         AGO   .STATUSX\n.STATUSA AIF   ('&C' NE 'OLD').STATUSB\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'01'),,,'DISP=(OLD)'\n         AGO   .STATUSX\n.STATUSB AIF   ('&C' NE 'NEW').STATUSC\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'04'),,,'DISP=(NEW)'\n         AGO   .STATUSX\n.STATUSC AIF   ('&C' NE 'MOD').STATUSD\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'02'),,,'DISP=(MOD)'\n         AGO   .STATUSX\n.STATUSD AIF   ('&C'(K'&C,1) NE '@').ERRSTA\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'04',1,1),1,&C,'DISP=(XL1 AT &C)'\n.STATUSX AIF   ('&DISP(2)' EQ '').NDISPX\n&C       SETC  '&DISP(2)'\n         AIF   ('&C' NE 'CATLG').NDISPA\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'02'),,,'DISP=(,CATLG)'\n         AGO   .NDISPX\n.NDISPA  AIF   ('&C' NE 'DELETE').NDISPK\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'04'),,,'DISP=(,DELETE)'\n         AGO   .NDISPX\n.NDISPK  AIF   ('&C' NE 'KEEP').NDISPU\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'08'),,,'DISP=(,KEEP)'\n         AGO   .NDISPX\n.NDISPU  AIF   ('&C' NE 'UNCATLG').NDISP@\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'01'),,,'DISP=(,UNCATLG)'\n         AGO   .NDISPX\n.NDISP@  AIF   ('&C'(K'&C,1) NE '@').ERRNDIS\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'05',1,1),1,&C,'DISP=(,XL1 AT &C)'\n.NDISPX  AIF   ('&DISP(3)' EQ '').DISPX\n&C       SETC  '&DISP(3)'\n         AIF   ('&C' NE 'CATLG').CDISPA\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'02'),,,'DISP=(,,CATLG)'\n         AGO   .DISPX\n.CDISPA  AIF   ('&C' NE 'DELETE').CDISPB\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'04'),,,'DISP=(,,DELETE)'\n         AGO   .DISPX\n.CDISPB  AIF   ('&C' NE 'KEEP').CDISPU\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'08'),,,'DISP=(,,KEEP)'\n         AGO   .DISPX\n.CDISPU  AIF   ('&C' NE 'UNCATLG').CDISP@\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'01'),,,'DISP=(,,UNCATLG)'\n         AGO   .DISPX\n.CDISP@  AIF   ('&C'(K'&C,1) NE '@').ERRCDIS\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'06',1,1),1,&C,'DISP=(,,XL1 AT &C)'\n.DISPX   MEXIT\n.ERRDSN  MNOTE 12,'BOTH DSN= AND DSNAME= SPECIFIED. BOTH IGNORED.'\n         AGO   .DSNAMEX\n.ERRDREF MNOTE 8,'DSNAME BY DDNAME REFERENCE IN DSN=&C NOT SUPPORTED BY*\n                DYNAMIC ALLOCATION. DSN IGNORED.'\n         AGO   .DSNAMEX\n.ERRMEM  MNOTE 12,'INVALID DSNAME, &C'\n         AGO   .DSNAMEX\n.ERRSTA  MNOTE 12,'INVALID FIRST DISP PARAMETER, &C'\n         AGO   .STATUSX\n.ERRNDIS MNOTE 12,'INVALID SECOND DISP PARAMETER, &C'\n         AGO   .NDISPX\n.ERRCDIS MNOTE 12,'INVALID THIRD DISP VALUE, &C'\n         AGO   .DISPX\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDI": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00]\\x00]\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&DDNAME  DDI   &DISP=,                                                 *\n               &KEYADDS=,&EXIT=ALODFAIL\n         GBLA  &X,&Y,&H,&N,&R\n         GBLB  &DDDFAIL,&DDDD\n         LCLA  &A,&AD1,&AD2,&AD3\n         LCLC  &C,&CD1,&CD2,&CD3\n         AIF   (&DDDD).ERRDDDD\n&X       SETA  20 DISPLACEMENT FROM ALOBLOCK TO FIRST TEXT UNIT POINTER\n&Y       SETA  20         NEGATIVE DISTANCE FROM ALOBLOCK TO FIRST DATA\n&R       SETA  14                      FIRST REGISTER LOADED\n         DDD5  &DDNAME\n         AIF   ('&DISP' EQ '').DISPX\n&C       SETC  '&DISP(1)'\n         AIF   ('&C' EQ '').DISP1X\n         AIF   ('&C'(K'&C,1) EQ '@').DISP1@\n         MNOTE 8,'DISP=( ) MUST BE INDIRECT ADDRESS. DISP=(&C) IGNORED.*\n               '\n         AGO   .DISP1X\n.DISP1@  ANOP\n&CD1     SETC  '&C'(1,K'&C-1)\n         DDD0  7,=AL1(0,X'07',0,1,0,1,0),,,                            *\n               'DISP=(XL1 RETURNED AT &CD1)'\n&AD1     SETA  &Y-6\n.DISP1X  ANOP\n&C       SETC  '&DISP(2)'\n         AIF   ('&C' EQ '').DISP2X\n         AIF   ('&C'(K'&C,1) EQ '@').DISP2@\n         MNOTE 8,'DISP=(, ) MUST BE INDIRECT ADDRESS. DISP=(,&C) IGNORE*\n               D.'\n         AGO   .DISP2X\n.DISP2@  ANOP\n&CD2     SETC  '&C'(1,K'&C-1)\n         DDD0  7,=AL1(0,X'08',0,1,0,1,0),,,                            *\n               'DISP=(,XL1 RETURNED AT &CD2)'\n&AD2     SETA  &Y-6\n.DISP2X  ANOP\n&C       SETC  '&DISP(3)'\n         AIF   ('&C' EQ '').DISPX\n         AIF   ('&C'(K'&C,1) EQ '@').DISP3@\n         MNOTE 8,'DISP=(,, ) MUST BE INDIRECT ADDRESS. DISP=(,,&C) IGNO*\n               RED.'\n         AGO   .DISPX\n.DISP3@  ANOP\n&CD3     SETC  '&C'(1,K'&C-1)\n         DDD0  7,=AL1(0,X'09',0,1,0,1,0),,,                            *\n               'DISP=(,,XL1 RETURNED AT &CD3)'\n&AD3     SETA  &Y-6\n.DISPX   AIF   ('&KEYADDS' EQ '').KEYADDX\n&A       SETA  0\n.KEYLOOP AIF   (&A GE N'&KEYADDS).KEYADDX\n&A       SETA  &A+1\n&C       SETC  '&KEYADDS(&A)'\n         AIF   ('&C' EQ '').KEYLOOP\n         AIF   ('&C'(1,1) EQ '(').KEYADDR\n         DDD0  &C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDR DDD0  0&C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDX AIF   (&R NE 14).R14X\n&X       SETA  &X-4\n         AGO   .RX\n.R14X    AIF   (&R NE 15).R15X\n         ST    14,ALOBLOCK+&X\n         AGO   .RX\n.R15X    AIF   (&R NE 0).R0X\n         STM   14,15,ALOBLOCK+&X\n&X       SETA  &X+4\n         AGO   .RX\n.R0X     STM   14,0,ALOBLOCK+&X\n&X       SETA  &X+8\n.RX      OI    ALOBLOCK+&X,X'80'        SET END OF TEXT UNIT ADDR LIST\n         LA    0,X'0700'                LOAD VERB, FLAGS1\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n&DDDFAIL SETB  ('&EXIT' EQ 'ALODFAIL' OR &DDDFAIL)\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n         SPACE 1\n         AIF   (&AD1 EQ 0).D1X\n         MVC   &CD1.(1),ALOBLOCK-&AD1\n.D1X     AIF   (&AD2 EQ 0).D2X\n         MVC   &CD2.(1),ALOBLOCK-&AD2\n.D2X     AIF   (&AD3 EQ 0).D3X\n         MVC   &CD3.(1),ALOBLOCK-&AD3\n.D3X     AIF   (&H GE &Y).HX\n&H       SETA  &Y\n.HX      AIF   (&N GE &X).NX\n&N       SETA  &X\n.NX      MEXIT\n.ERRDDDD MNOTE 12,'DDI MAY NOT BE ISSUED AFTER DDDD'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDTU": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x01\\x0f\\x01\\x0f\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 271, "newlines": 271, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO                                                          01675\n&DDNAME  DDTU  &DUMMY,&DSN=,&DSNAME=,&DISP=,&TERM=,&FREE=,             *01676*92\n               &UNIT=,&SPACE=,&MSVGP=,&VOL=,&LABEL=,&PROTECT=,         *01677*92\n               &DCB=,&SUBSYS=,                                         *01678*92\n               &SYSOUT=,&DEST=,&HOLD=,&COPIES=,&OUTLIM=,&FCB=,&UCS=,   *01679*90\n               &PASWORD=                                                01680*90\n         LCLA  &K,&A                                                    01681*53\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6                              01682*90\n         LCLC  &C,&D                                                    01683\n         AIF   ('&DDNAME' EQ '' OR '&DDNAME' EQ 'RETURN').DDNAMEQ       01684*90\n&DDNAME  DC    Y(X'01',1,8)            DDNAME                           01685*92\n.DDNAMEQ AIF   ('&DDNAME' NE 'RETURN').DDNAMEX                          01686*90\nRETURN   DC    Y(X'55',1,8)            RETURN THE DDNAME                01687*90\n.DDNAMEX AIF   ('&DSN&DSNAME' EQ '').DSNAMEX                            01688*90\n&C       SETC  '&DSN'                                                   01689*90\n         AIF   ('&DSNAME' EQ '').DSNAMEB                                01690*90\n         AIF   ('&DSN' NE '').ERRDSN                                    01691*90\n&C       SETC  '&DSNAME'                                                01692*90\n.DSNAMEB ANOP                                                           01693*90\n&A       SETA  K'&C                                                     01694*90\n         AIF   ('&C'(&A,1) NE ')').DSNAME                               01695*90\n.MEMLOOP AIF   (&A LE 1).ERRMEM                                         01696*92\n&A       SETA  &A-1                                                     01697*90\n         AIF   ('&C'(&A,1) NE '(').MEMLOOP                              01698*90\n&D       SETC  '&C'(&A+1,K'&C-&A-1)                                     01699*92\n&D       DC    Y(X'03',1,8)            DSN=...( )                       01700*92\n&C       SETC  '&C'(1,&A-1)                                             01701*92\n.DSNAME  AIF   ('&C' EQ '').DSNAMEX                                     01702*90\n&C       DC    Y(X'02',1,44)           DSN=                             01703*92\n.DSNAMEX AIF   ('&DISP' EQ '').DISPX                                    01704*90\n         AIF   ('&DISP(1)' EQ '').STATUSX                               01705*90\n&DISP(1) DC    Y(X'04',1,1)             DISP=( )                        01706*92\n.STATUSX AIF   ('&DISP(2)' EQ '').NDISPX                                01707*90\n&DISP(2) DC    Y(X'05',1,1)             DISP=(, )                       01708*92\n.NDISPX  AIF   (N'&DISP LT 3).DISPX                                     01709*90\n&DISP(3) DC    Y(X'06',1,1)             DISP=(,, )                      01710*92\n.DISPX   AIF   ('&TERM' EQ '').TERMX                                    01711*90\n&TERM    DC    Y(X'28',0)              TERM=TS                          01712*90\n.TERMX   AIF   ('&FREE' EQ '').FREEX                                    01713*90\n&FREE    DC    Y(X'1C',0)              FREE=CLOSE                       01714*90\n.FREEX   AIF   ('&UNIT&SPACE&MSVGP' EQ '').DDD1X                        01715*90\n         AIF   ('&UNIT' EQ '').UNITX                                    01716*90\n         AIF   ('&UNIT(1)' EQ '').UNIT1X                                01717*90\n&UNIT(1) DC    Y(X'15',1,8)            UNIT=( )                         01718*90\n.UNIT1X  AIF   ('&UNIT(2)' EQ '').UNIT2X                                01719*90\n         AIF   ('&UNIT(2)' NE 'P').UNITC                                01720*90\nP        DC    Y(X'17',0)              UNIT=(,P)  PARALLEL MOUNT        01721*90\n         AGO   .UNIT2X                                                  01722*90\n.UNITC   ANOP                                                           01723*90\n&UNIT(2) DC    Y(X'16',1,1)            UNIT=(, )  UNIT COUNT            01724*90\n.UNIT2X  AIF   ('&UNIT(3)' EQ '').UNITX                                 01725*90\n         MNOTE 8,'UNIT=(,,DEFER) NOT SUPPORTED BY DYNAMIC ALLOCATION.'  01726*90\n.UNITX   AIF   ('&SPACE' EQ '').SPACEX                                  01727*90\n&C       SETC  '&SPACE(1)'                                              01728*90\n         AIF   ('&C' EQ '').SPACE2                                      01729*90\n         AIF   ('&C' NE 'TRK').SPACE1C                                  01730*90\nTRK      DC    Y(X'07',0)              SPACE=(TRK)                      01731*92\n         AGO   .SPACE2                                                  01732*90\n.SPACE1C AIF   ('&C' NE 'CYL').SPACE1A                                  01733*90\nCYL      DC    Y(X'08',0)              SPACE=(CYL)                      01734*92\n         AGO   .SPACE2                                                  01735*90\n.SPACE1A ANOP                                                           01736*90\n&C       DC    Y(X'09',1,3)            SPACE=( )                        01737*92\n.SPACE2  AIF   ('&SPACE(2)' EQ '').SPACE2X                              01738*90\n&C       SETC  '&SPACE(2)'                                              01739*90\n         AIF   ('&C'(1,1) NE '(').SPACE2W                               01740*90\n&K       SETA  2                                                        01741*90\n.SPACE2A AIF   ('&C'(&K,1) EQ ',').SPACE2B                              01742*90\n&K       SETA  &K+1                                                     01743*90\n         AIF   (&K LT K'&C).SPACE2A                                     01744*90\n.SPACE2B AIF   (&K EQ 2).SPACE2C                                        01745*92\n&D       SETC  '&C'(2,&K-2)                                             01746*92\n&D       DC    Y(X'0A',1,3)            SPACE=(,( ))                     01747*90\n.SPACE2C AIF   (&K GE K'&C).SPACE2X                                     01748*90\n&K       SETA  &K+1                                                     01749*90\n&A       SETA  &K                                                       01750*90\n.SPACE2D AIF   ('&C'(&K,1) EQ ',').SPACE2E                              01751*90\n&K       SETA  &K+1                                                     01752*90\n         AIF   (&K LT K'&C).SPACE2D                                     01753*90\n.SPACE2E AIF   (&K EQ &A).SPACE2F                                       01754*90\n&D       SETC  '&C'(&A,&K-&A)                                           01755*90\n&D       DC    Y(X'0B',1,3)            SPACE=(,(, ))                    01756*90\n.SPACE2F AIF   (&K GE K'&C).SPACE2X                                     01757*90\n&K       SETA  &K+1                                                     01758*90\n         AIF   (&K GE K'&C).SPACE2X                                     01759*90\n&A       SETA  &K                                                       01760*90\n.SPACE2G AIF   ('&C'(&K,1) EQ ',').ERRSPA2                              01761*90\n&K       SETA  &K+1                                                     01762*90\n         AIF   (&K LT K'&C).SPACE2G                                     01763*90\n&D       SETC  '&C'(&A,&K-&A)                                           01764*90\n&D       DC    Y(X'0C',1,3)            SPACE=(,(,, ))                   01765*90\n         AGO   .SPACE2X                                                 01766*90\n.SPACE2W ANOP                                                           01767*90\n&C       DC    Y(X'0A',1,3)            SPACE=(,( ))                     01768*90\n.SPACE2X AIF   (N'&SPACE LE 3).SPACE3                                   01769*90\n&C       SETC  '&SPACE(5)'                                              01770*90\n&D       SETC  '&SPACE(4)'                                              01771*90\n         AIF   ('&C' EQ '').SPACE4                                      01772*90\n&C       DC    Y(X'0F',0)              SPACE=(,,,,ROUND)                01773*90\n.SPACE4  AIF   ('&D' EQ '').SPACE3                                      01774*90\n&D       DC    Y(X'0E',1,1)            SPACE=(,,, )                     01775*90\n.SPACE3  AIF   ('&SPACE(3)' EQ '').SPACEX                               01776*90\n&C       SETC  '&SPACE(3)'                                              01777*90\n&C       DC    Y(X'0D',0)              SPACE=(,,RLSE)                   01778*90\n.SPACEX  AIF   ('&MSVGP' EQ '').MSVGPX                                  01779*90\n&MSVGP   DC    Y(X'5E',1,8)            MSVGP=                           01780*90\n.MSVGPX  ANOP                                                           01781*90\n.DDD1X   AIF   ('&VOL&LABEL&PROTECT' EQ '').DDD2X                       01782*92\n         AIF   ('&VOL' EQ '').VOLX                                      01783*90\n&C       SETC  '&VOL(N'&VOL)'                                           01784*90\n         AIF   ('&C'(1,4) NE 'SER=').VOLREF                             01785*90\n&C       SETC  '&C'(5,K'&C-4)                                           01786*90\n&C       DC    Y(X'10',1,6)            VOL=SER=                         01787*90\n         AGO   .VOLKEYX                                                 01788*90\n.VOLREF  AIF   ('&C'(1,4) NE 'REF=').VOL4                               01789*90\n&C       SETC  '&C'(5,K'&C-4)                                           01790*90\n&C       DC    Y(X'14',1,44)           VOL=REF=                         01791*90\n.VOLKEYX AIF   (N'&VOL LE 1).VOLX                                       01792*90\n         AIF   (N'&VOL LE 2).VOL2X                                      01793*90\n         AIF   (N'&VOL LE 3).VOL3X                                      01794*90\n         AIF   (N'&VOL LE 4).VOL4X                                      01795*90\n.VOL4    AIF   ('&VOL(4)' EQ '').VOL4X                                  01796*90\n&VOL(4)  DC    Y(X'13',1,1)            VOL=(,,, )                       01797*90\n.VOL4X   AIF   ('&VOL(3)' EQ '').VOL3X                                  01798*90\n&VOL(3)  DC    Y(X'12',1,2)            VOL=(,, )                        01799*90\n.VOL3X   AIF   ('&VOL(2)' EQ '').VOL2X                                  01800*90\n         MNOTE 8,'VOL=(,RETAIN) NOT SUPPORTED BY DYNAMIC ALLOCATION'    01801*90\n.VOL2X   AIF   ('&VOL(1)' EQ '').VOLX                                   01802*90\n&VOL(1)  DC    Y(X'11',0)              VOL=(PRIVATE)                    01803*90\n.VOLX    AIF   ('&LABEL' EQ '').LABELX                                  01804*90\n&C       SETC  '&LABEL(N'&LABEL)'                                       01805*90\n         AIF   ('&C'(1,6) NE 'EXPDT=').LABELEX                          01806*90\n&C       SETC  '&C'(7,K'&C-6)                                           01807*90\n&C       DC    Y(X'22',1,5)            LABEL=EXPDT=                     01808*90\n         AGO   .LABKEYX                                                 01809*90\n.LABELEX AIF   ('&C'(1,6) NE 'RETPD=').LABELRX                          01810*90\n&C       SETC  '&C'(7,K'&C-6)                                           01811*90\n&C       DC    Y(X'23',1,2)            LABEL=RETPD=                     01812*90\n.LABKEYX AIF   (N'&LABEL LE 1).LABELX                                   01813*90\n         AIF   (N'&LABEL LE 2).LABEL2X                                  01814*90\n         AIF   (N'&LABEL LE 3).LABEL3X                                  01815*90\n         AIF   (N'&LABEL LE 4).LABEL4X                                  01816*90\n.LABELRX AIF   ('&LABEL(4)' EQ '').LABEL4X                              01817*90\n&C       SETC  '&LABEL(4)'                                              01818*90\n&C       DC    Y(X'21',1,1)            LABEL=(,,, )                     01819*90\n.LABEL4X AIF   ('&LABEL(3)' EQ '').LABEL3X                              01820*90\n&C       SETC  '&LABEL(3)'                                              01821*90\n&C       DC    Y(X'20',1,1)            LABEL=(,, )                      01822*90\n.LABEL3X AIF   ('&LABEL(2)' EQ '').LABEL2X                              01823*90\n&C       SETC  '&LABEL(2)'                                              01824*90\n&C       DC    Y(X'1E',1,1)            LABEL=(, )                       01825*90\n.LABEL2X AIF   ('&LABEL(1)' EQ '').LABELX                               01826*90\n&C       SETC  '&LABEL(1)'                                              01827*90\n&C       DC    Y(X'1F',1,2)            LABEL=( )                        01828*90\n.LABELX  AIF   ('&PROTECT' EQ '').PROTECX                               01829*92\n&PROTECT DC    Y(X'61',0)              PROTECT=YES                      01830*92\n.PROTECX ANOP                                                           01831*92\n.DDD2X   AIF   ('&DUMMY&DCB&SUBSYS' EQ '').DDD3X                        01832*92\n         AIF   ('&DUMMY' EQ '').DUMMYX                                  01833*90\n&DUMMY   DC    Y(X'24',0)              DUMMY                            01834*90\n.DUMMYX  AIF   ('&DCB' EQ '').DCBX                                      01835*90\n&A       SETA  N'&DCB+1                                                 01836*90\n.DCBLOOP AIF   (&A LE 1).DCBX                                           01837*90\n&A       SETA  &A-1                                                     01838*90\n&C       SETC  '&DCB(&A)'                                               01839*90\n         AIF   (K'&C LE 5).DCB4                                         01840*90\n         AIF   ('&C'(1,8) NE 'BLKSIZE=').BLKSIZX                        01841*90\n&C       SETC  '&C'(9,K'&C-8)                                           01842*90\n&C       DC    Y(X'30',1,2)            DCB=BLKSIZE=                     01843*92\n         AGO   .DCBLOOP                                                 01844*90\n.BLKSIZX AIF   ('&C'(6,1) NE '=').DCB7                                  01845*90\n&D       SETC  '&C'(7,K'&C-6)                                           01846*90\n&C       SETC  '&C'(1,5)                                                01847*90\n         AIF   ('&C' NE 'BUFNO').BUFNOX                                 01848*90\n&D       DC    Y(X'34',1,1)            DCB=BUFNO=                       01849*90\n         AGO   .DCBLOOP                                                 01850*90\n.BUFNOX  AIF   ('&C' NE 'RECFM').RECFMX                                 01851*90\n&D       DC    Y(X'49',1,1)            DCB=RECFM=                       01852*90\n         AGO   .DCBLOOP                                                 01853*90\n.RECFMX  AIF   ('&C' NE 'LRECL').LRECLX                                 01854*90\n&D       DC    Y(X'42',1,2)            DCB=LRECL=                       01855*90\n         AGO   .DCBLOOP                                                 01856*90\n.LRECLX  AIF   ('&C' NE 'DSORG').DSORGX                                 01857*90\n&D       DC    Y(X'3C',1,2)            DCB=DSORG=                       01858*92\n         AGO   .DCBLOOP                                                 01859*90\n.DSORGX  AIF   ('&C' NE 'EROPT').EROPTX                                 01860*90\n&D       DC    Y(X'3D',1,1)            DCB=EROPT=                       01861*90\n         AGO   .DCBLOOP                                                 01862*90\n.EROPTX  AIF   ('&C' NE 'LIMCT').ERRDCB                                 01863*90\n&D       DC    Y(X'41',1,3)            DCB=LIMCT=                       01864*90\n         AGO   .DCBLOOP                                                 01865*90\n.DCB7    AIF   ('&C'(1,7) NE 'KEYLEN=').DCB5                            01866*90\n&C       SETC  '&C'(8,K'&C-7)                                           01867*90\n&C       DC    Y(X'40',1,1)            DCB=KEYLEN=                      01868*90\n         AGO   .DCBLOOP                                                 01869*90\n.DCB5    AIF   ('&C'(1,5) NE 'BUFL=').DCB4                              01870*90\n&C       SETC  '&C'(6,K'&C-5)                                           01871*90\n&C       DC    Y(X'32',1,2)            DCB=BUFL=                        01872*90\n         AGO   .DCBLOOP                                                 01873*90\n.DCB4    AIF   ('&C'(4,1) NE '=').DCBREF                                01874*90\n&D       SETC  '&C'(5,K'&C-4)                                           01875*90\n&C       SETC  '&C'(1,3)                                                01876*90\n         AIF   ('&C' NE 'DEN').DCBDENX                                  01877*90\n&D       DC    Y(X'3B',1,1)            DCB=DEN=                         01878*90\n         AGO   .DCBLOOP                                                 01879*90\n.DCBDENX AIF   ('&C' NE 'NCP').ERRDCB                                   01880*90\n&D       DC    Y(X'44',1,1)            DCB=NCP=                         01881*90\n         AGO   .DCBLOOP                                                 01882*90\n.DCBREF  AIF   (&A NE 1).ERRDCB2  POSITIONAL PARAMETER                  01883*90\n         AIF   ('&C'(1,2) NE '*.').REFDSN                               01884*90\n&C       SETC  '&C'(3,K'&C-2)                                           01885*90\n&C       DC    Y(X'2D',1,8)            DCB=*. DDNAME REFERENCE          01886*90\n         AGO   .DCBLOOP                                                 01887*90\n.REFDSN  MNOTE 0,'DATASET REFERENCE ASSUMED IN DCB=&C'                  01888*90\n&C       DC    Y(X'2C',1,44)           DCB= DSNAME REFERENCE            01889*90\n         AGO   .DCBLOOP                                                 01890*90\n.DCBX    AIF   ('&SUBSYS' EQ '').SUBSYSX                                01891*92\n&C       SETC  '&SUBSYS(1)'                                             01892*92\n         AIF   ('&C' EQ '').SUB1X                                       01893*92\n&C       DC    Y(X'5F',1,4)            SUBSYS=( )                       01894*92\n.SUB1X   AIF   ('&SUBSYS(2)' EQ '').SUBSYSX                             01895*92\n&C       SETC  '&SUBSYS(2)'                                             01896*92\n&C       DC    Y(X'60',1,256)          SUBSYS=(, )                      01897*92\n.SUBSYSX ANOP                                                           01898*92\n.DDD3X   AIF   ('&SYSOUT&DEST&HOLD&COPIES&OUTLIM&FCB&UCS' EQ '').DDD4X  01899*90\n         AIF   ('&SYSOUT' EQ '').SYSOUTX                                01900*90\n         AIF   ('&SYSOUT(1)' EQ '').SYSOU1X                             01901*90\n&C       SETC  '&SYSOUT(1)'                                             01902*90\n&C       DC    Y(X'18',1,1)            SYSOUT=( )                       01903*90\n.SYSOU1X AIF   (N'&SYSOUT LE 1).SYSOUTX                                 01904*90\n&C       SETC  '&SYSOUT(2)'                                             01905*90\n         AIF   ('&C' EQ '').SYSOU2X                                     01906*90\n&C       DC    Y(X'19',1,8)            SYSOUT=(, )                      01907*90\n.SYSOU2X AIF   ('&SYSOUT(3)' EQ '').SYSOUTX                             01908*90\n&C       SETC  '&SYSOUT(3)'                                             01909*90\n&C       DC    Y(X'1A',1,4)            SYSOUT=(,, )                     01910*90\n.SYSOUTX AIF   ('&DEST' EQ '').DESTX                                    01911*90\n&DEST    DC    Y(X'58',1,7)            DEST=                            01912*92\n.DESTX   AIF   ('&HOLD' EQ '').HOLDX                                    01913*90\n&HOLD    DC    Y(X'59',0)              HOLD=YES                         01914*90\n.HOLDX   AIF   ('&COPIES' EQ '').COPIESX                                01915*90\n&COPIES  DC    Y(X'1D',1,1)            COPIES=                          01916*90\n.COPIESX AIF   ('&OUTLIM' EQ '').OUTLIMX                                01917*90\n&OUTLIM  DC    Y(X'1B',1,3)            OUTLIM=                          01918*90\n.OUTLIMX AIF   ('&FCB' EQ '').FCBX                                      01919*90\n         AIF   ('&FCB(1)' EQ '').FCB1X                                  01920*90\n&FCB(1)  DC    Y(X'25',1,4)            FCB=( )                          01921*90\n.FCB1X   AIF   ('&FCB(2)' EQ '').FCBX                                   01922*90\n&FCB(2)  DC    Y(X'26',1,1)            FCB=(, )                         01923*90\n.FCBX    AIF   ('&UCS' EQ '').UCSX                                      01924*90\n         AIF   ('&UCS(1)' EQ '').UCS1X                                  01925*90\n&UCS(1)  DC    Y(X'29',1,4)            UCS=( )                          01926*90\n.UCS1X   AIF   ('&UCS(2)' EQ '').UCS2X                                  01927*90\n&UCS(2)  DC    Y(X'2A',0)              UCS=(,FOLD)                      01928*90\n.UCS2X   AIF   ('&UCS(3)' EQ '').UCSX                                   01929*90\n&UCS(3)  DC    Y(X'2B',0)              UCS=(,,VERIFY)                   01930*90\n.UCSX    ANOP                                                           01931*90\n.DDD4X   AIF   ('&PASWORD' EQ '').PASWORX                               01932*90\n&PASWORD DC    Y(X'50',1,8)            PASWORD=                         01933*90\n.PASWORX MEXIT                                                          01934*90\n.ERRDSN  MNOTE 12,'BOTH DSN= AND DSNAME= SPECIFIED. BOTH IGNORED.'      01935*90\n         AGO   .DSNAMEX                                                 01936*90\n.ERRMEM  MNOTE 12,'INVALID DSNAME, &C'                                  01937*90\n         AGO   .DSNAMEX                                                 01938*90\n.ERRSPA2 MNOTE 8,'TOO MAY SUBPARAMETERS IN SECOND SPACE PARAMETER, &C'  01939*90\n         AGO   .SPACE2X                                                 01940*90\n.ERRDCB2 MNOTE 8,'INVALID DCB PARAMETER, &C.. IGNORING.'                01941*90\n         AGO   .DCBLOOP                                                 01942*90\n.ERRDCB  MNOTE 8,'INVALID DCB PARAMETER, &C=&D.. IGNORED.'              01943*90\n         AGO   .DCBLOOP                                                 01944*90\n         MEND                                                           01945\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNALC": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x02%\\x02%\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 549, "newlines": 549, "modlines": 0, "user": "DYNALLC"}, "text": "***********************************************************************\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'SUFFIX'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DYNALC DSNAME=SYS1.PARMLIB        *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.  THE ONLY      *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES THAT ARE SPECIFICALLY CODED.   *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              FOR SVC 99 RB POINTER, THE LABELS GENERATED ARE THE    *\n*              IEFZB4D0 MACRO LABEL MINUS THE S99 PREFIX AND SUFFIXED *\n*              BY A UNIQUE 3 BYTE VALUE (AUTOMATICALLY SUPPLIED OR AS *\n*              SPECIFIED BY 'SUFFIX=XXX'.  FOR EACH TEXT UNIT FIELD,  *\n*              THE LABELS GENERATED ARE THE IEFZB4D2 MACRO LABEL      *\n*              MINUS THE DAL PREFIX AND SUFFIXED AS SPECIFIED ABOVE.  *\n***********************************************************************\n         MACRO\n&NAME    DYNALC                                                        X\n               &DSNAME=,       DATASET NAME               (1-44 BYTES) X\n               &DDNAME=,       DDNAME                      (1-8 BYTES) X\n               &MEMBER=,       MEMBER NAME/GDG NUMBER        \"    \"    X\n               &STATUS=,       DATASET STATUS        (OLD/MOD/NEW/SHR) X\n               &NDISP=,        DATASET NORMAL DISP   (KEEP/DELETE/ETC) X\n               &CDISP=,        DATASET COND. DISP      \"     \"     \"   X\n               &TYPSP=,        TYPE SPACE            (CYL/TRK/BLKSIZE) X\n               &PRIME=,        PRIMARY SPACE REQUIREMENT (ANY NUMERIC) X\n               &SECND=,        SECONDARY SPACE REQUIREMENT      \"      X\n               &DIR=,          DIRECTORY BLOCKS OR INDEX SPACE  \"      X\n               &RLSE=,         RELEASE UNUSED SPACE        (ANY VALUE) X\n               &SPFRM=,        SPACE FORM            (ALX/MXIG/CONTIG) X\n               &ROUND=,        ROUND BLOCKS TO CYLINDERS   (ANY VALUE) X\n               &VOLSER=,       VOLUME SERIAL               (1-6 BYTES) X\n               &VOLCNT=,       VOLUME COUNT                    (1-255) X\n               &UNIT=,         UNIT TYPE                   (1-8 BYTES) X\n               &MSVGP=,        MSVGP GROUP                   \"    \"    X\n               &SYSOUT=,       SYSOUT CLASS              (A-Z/0-9/ETC) X\n               &SPGNM=,        SYSOUT PGM NAME             (1-8 BYTES) X\n               &FORM=,         SYSOUT FORM NAME              \"    \"    X\n               &OUTLIM=,       SYSOUT OUTPUT LIMIT       (ANY NUMERIC) X\n               &FREE=,         FREE AT CLOSE                   (CLOSE) X\n               &COPIES=,       SYSOUT NUMBER OF COPIES         (1-255) X\n               &LABEL=,        LABEL TYPE           (SL/NL/AL/BLP/ETC) X\n               &DSSEQ=,        DATASET SEQUENCE NUMBER   (TAPE FILE #) X\n               &PASPR=,        PASSWORD PROTECTION               (R/W) X\n               &EXPDT=,        EXPIRATION DATE                 (YYDDD) X\n               &RETPD=,        RETENTION PERIOD          (ANY NUMERIC) X\n               &DUMMY=,        DUMMY DATASET               (ANY VALUE) X\n               &DCBDS=,        DSNAME OF MODEL DSCB           (DSNAME) X\n               &DCBDD=,        DDNAME OF MODEL DSCB           (DDNAME) X\n               &BLKSIZE=,      BLOCKSIZE                 (ANY NUMERIC) X\n               &DEN=,          TAPE DENSITY                  (1/2/3/4) X\n               &DSORG=,        DATASET ORG.         (PO/PS/DA/POU/ETC) X\n               &EROPT=,        ERROR OPTIONS             (ABE/SKP/ACC) X\n               &KEYLEN=,       KEY LENGTH                (ANY NUMERIC) X\n               &LRECL=,        LOGICAL RECORD LENGTH          \"        X\n               &OPTCD=,        OPTION CODE                   (B/W/C/Z) X\n               &RECFM=,        RECORD FORMAT       (F/FB/VB/VBA/U/ETC) X\n               &PASSWRD=,      PASSWORD                    (1-8 BYTES) X\n               &PERM=,         PERM ALLOC                  (ANY VALUE) X\n               &RETDD=,        RETURN DDNAME                    \"      X\n               &RETDS=,        RETURN DSNAME                    \"      X\n               &RETVOL=,       RETURN VOLSER                    \"      X\n               &FUNC=,         FOR PUNCH OUTPUT INTERPRETING       (I) X\n               &SUFFIX=,       UNIQUE SUFFIX FOR LABELS    (MAX LEN=3) X\n               &DEALLOC=       FOR DEALLOCATION            (ANY VALUE)\n         LCLA  &A1,&A2,&A3\n         LCLC  &X,&NM\n         AIF   (T'&SUFFIX EQ 'O').SETSFX\n         AIF   (K'&SUFFIX GT 3).SFXERR\n&X       SETC  '&SUFFIX'\n         AGO   .CONT\n.SFXERR  MNOTE 8,'SUFFIX=&SUFFIX LONGER THAN 3 BYTES, FIRST THREE USED'\n&X       SETC  '&SUFFIX'(1,3)\n         AGO   .CONT\n.SETSFX  ANOP\n&X       SETC  '&SYSNDX'(2,3)\n.CONT    ANOP\n         AIF   (T'&NAME NE 'O').SETRB\n         MNOTE 8,'REQUIRED LABEL MISSING ON MACRO CALL'\n.SETRB   ANOP\n&NAME    DC    A(DYNRB&X+X'80000000') POINTER TO REQUEST BLOCK\n         AIF   (T'&DEALLOC EQ 'O').ALOCCHK\nDYNRB&X  DC    AL1(20,2,0,0)       LENGTH, DEALLOC VERB, FLAGS1\n         AGO   .ERINCHK\n.ALOCCHK ANOP\nDYNRB&X  DC    AL1(20,1,0,0)       LENGTH, ALLOC VERB, FLAGS1\n.ERINCHK ANOP\nERROR&X  DC    AL2(0)              ERROR CODE\nINFO&X   DC    AL2(0)              INFORMATION CODE\nTUPTR&X  DC    A(TXTPP&X),AL4(0,0) TEXT UNIT POINTER, RSVD, FLAGS2\n&A1      SETA  1\n         AIF   (T'&DDNAME EQ 'O').DSNCHK\n         AIF   (K'&DDNAME GT 8).DDNERR\nTS&X&A1  DC    XL2'01',AL2(1,8)    DDNAME KEY, NUM, PARMLEN\nDDNAM&X  DC    CL8'&DDNAME'        DDNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .DSNCHK\n.DDNERR  MNOTE 8,'DDNAME=&DDNAME GREATER THAN 8 BYTES'\n.DSNCHK  AIF   (T'&DSNAME EQ 'O').MEMCHK\n         AIF   (K'&DSNAME GT 44).DSNERR\nTS&X&A1  DC    XL2'02',AL2(1,44)   DSNAME KEY, NUM, PARMLEN\nDSNAM&X  DC    CL44'&DSNAME'       DSNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .MEMCHK\n.DSNERR  MNOTE 8,'DSNAME=&DSNAME GREATER THAN 44 BYTES'\n.MEMCHK  AIF   (T'&MEMBER EQ 'O').STATCHK\n         AIF   (K'&MEMBER GT 8).MEMERR\nTS&X&A1  DC    XL2'03',AL2(1,8)    MEMBER/GDG KEY, NUM, PARMLEN\nMEMBR&X  DC    CL8'&MEMBER'        MEMBER NAME/GDG LEVEL FIELD\n&A1      SETA  &A1+1\n         AGO   .STATCHK\n.MEMERR  MNOTE 8,'MEMBER=&MEMBER GREATER THAN 8 BYTES'\n.STATCHK AIF   (T'&STATUS EQ 'O').NDSPCHK\nTS&X&A1  DC    XL2'04',AL2(1,1)    DATASET STATUS KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&STATUS' NE 'OLD').STA1CHK  OLD = X'01'\nSTATS&X  DC    XL1'01'             CONSTANT FOR DISP=OLD\n         AGO   .NDSPCHK\n.STA1CHK AIF   ('&STATUS' NE 'MOD').STA2CHK  MOD = X'02'\nSTATS&X  DC    XL1'02'             CONSTANT FOR DISP=MOD\n         AGO   .NDSPCHK\n.STA2CHK AIF   ('&STATUS' NE 'NEW').STA3CHK  NEW = X'04'\nSTATS&X  DC    XL1'04'             CONSTANT FOR DISP=NEW\n         AGO   .NDSPCHK\n.STA3CHK AIF   ('&STATUS' NE 'SHR').STAERR   SHR = X'08'\nSTATS&X  DC    XL1'08'             CONSTANT FOR DISP=SHR\n         AGO   .NDSPCHK\n.STAERR  MNOTE 8,'STATUS=&STATUS INVALID'\n.NDSPCHK AIF   (T'&NDISP EQ 'O').CDSPCHK\nTS&X&A1  DC    XL2'05',AL2(1,1)    NORMAL DISP KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&NDISP' NE 'UNCATLG').NDS1CHK UNCATLG = X'01'\nNDISP&X  DC    XL1'01'             CONSTANT FOR NORMAL DISP=UNCATLG\n         AGO   .CDSPCHK\n.NDS1CHK AIF   ('&NDISP' NE 'CATLG').NDS2CHK CATLG   = X'02'\nNDISP&X  DC    XL1'02'             CONSTANT FOR NORMAL DISP=CATLG\n         AGO   .CDSPCHK\n.NDS2CHK AIF   ('&NDISP' NE 'DELETE').NDS3CHK DELETE = X'04'\nNDISP&X  DC    XL1'04'             CONSTANT FOR NORMAL DISP=DELETE\n         AGO   .CDSPCHK\n.NDS3CHK AIF   ('&NDISP' NE 'KEEP').NDSERR   KEEP    = X'08'\nNDISP&X  DC    XL1'08'             CONSTANT FOR NORMAL DISP=KEEP\n         AGO   .CDSPCHK\n.NDSERR  MNOTE 8,'NDISP=&NDISP INVALID'\n.CDSPCHK AIF   (T'&CDISP EQ 'O').TSPCCHK\nTS&X&A1  DC    XL2'06',AL2(1,1)    COND DISP KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&CDISP' NE 'UNCATLG').CDS1CHK UNCATLG = X'01'\nCDISP&X  DC    XL1'01'             CONSTANT FOR COND DISP=UNCALTG\n         AGO   .TSPCCHK\n.CDS1CHK AIF   ('&CDISP' NE 'CATLG').CDS2CHK   CATLG   = X'02'\nCDISP&X  DC    XL1'02'             CONSTANT FOR COND DISP=CATLG\n         AGO   .TSPCCHK\n.CDS2CHK AIF   ('&CDISP' NE 'DELETE').CDS3CHK  DELETE  = X'04'\nCDISP&X  DC    XL1'04'             CONSTANT FOR COND DISP=DELETE\n         AGO   .TSPCCHK\n.CDS3CHK AIF   ('&CDISP' NE 'KEEP').CDSERR     KEEP    = X'08'\nCDISP&X  DC    XL1'08'             CONSTANT FOR COND DISP=KEEP\n         AGO   .TSPCCHK\n.CDSERR  MNOTE 8,'CDISP=&CDISP INVALID'\n.TSPCCHK AIF   (T'&TYPSP EQ 'O').PSPCCHK\n         AIF   ('&TYPSP' NE 'TRK').TSP1CHK  IF TYPE SPACE SPECIFICATION\nTS&X&A1  DC    XL2'07',AL2(0)      TRACK SPACE KEY, NUM\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TSP1CHK AIF   ('&TYPSP' NE 'CYL').TSP2CHK  NOT TRK OR CYL THEN\nTS&X&A1  DC    XL2'08',AL2(0)      CYLINDER SPACE KEY, NUM\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TSP2CHK AIF   (T'&TYPSP NE 'N').TYPERR\n&A3      SETA  &TYPSP\n         AIF   (&A3 GT 32768).TYPERR\nTS&X&A1  DC    XL2'09',AL2(1,3)    BLOCK SPACE KEY, NUM, PARMLEN\nBLKLN&X  DC    AL3(&TYPSP)         AVG BLOCK LENGTH FIELD\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TYPERR  MNOTE 8,'TYPSP=&TYPSP INVALID OR GREATER THAN 32768'\n.PSPCCHK AIF   (T'&PRIME EQ 'O').DIRCCHK\n         AIF   (T'&PRIME NE 'N').PSPCERR\nTS&X&A1  DC    XL2'0A',AL2(1,3)    PRIME SPACE KEY, NUM, PARMLEN\nPRIME&X  DC    AL3(&PRIME)         PRIMARY SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .SSPCCHK\n.PSPCERR MNOTE 8,'PRIME=&PRIME INVALID'\n.SSPCCHK AIF   (T'&SECND EQ 'O').DIRCCHK\n         AIF   (T'&SECND NE 'N').SSPCERR\nTS&X&A1  DC    XL2'0B',AL2(1,3)    SECONDARY SPACE, NUM, PARMLEN\nSECND&X  DC    AL3(&SECND)         SECONDARY SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .DIRCCHK\n.SSPCERR MNOTE 8,'SECND=&SECND INVALID'\n.DIRCCHK AIF   (T'&DIR EQ 'O').RLSECHK\n         AIF   (T'&DIR NE 'N').DIRCERR\nTS&X&A1  DC    XL2'0C',AL2(1,3)    DIR SPACE KEY, NUM, PARMLEN\nDIR&X    DC    AL3(&DIR)           DIR SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .RLSECHK\n.DIRCERR MNOTE 8,'DIR=&DIR INVALID'\n.RLSECHK AIF   (T'&RLSE EQ 'O').FMSPCHK\nTS&X&A1  DC    XL2'0D',AL2(0)      RELEASE SPACE KEY, NUM\n&A1      SETA  &A1+1\n.FMSPCHK AIF   (T'&SPFRM EQ 'O').RNDCHK\nTS&X&A1  DC    XL2'0E',AL2(1,1)    SPACE FORM KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&SPFRM' NE 'ALX').FMS1CHK\nSPFRM&X  DC    XL1'02'             ALX SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMS1CHK AIF   ('&SPFRM' NE 'MXIG').FMS2CHK\nSPFRM&X  DC    XL1'04'             MXIG SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMS2CHK AIF   ('&SPFRM' NE 'CONTIG').FMSERR\nSPFRM&X  DC    XL1'02'             CONTIG SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMSERR  ANOP\n         MNOTE 8,'SPFRM=&SPFRM INVALID'\n.RNDCHK  AIF   (T'&ROUND EQ 'O').VSERCHK\nTS&X&A1  DC    XL2'0F',AL2(0)      ROUND KEY, NUM\n&A1      SETA  &A1+1\n.VSERCHK AIF   (T'&VOLSER EQ 'O').VLCNCHK\n         AIF   (K'&VOLSER GT 6).VLSRERR\nTS&X&A1  DC    XL2'10',AL2(1,6)    VOLSER KEY, NUM, PARMLEN\nVLSER&X  DC    CL6'&VOLSER'        VOLUME SERIAL FIELD\n&A1      SETA  &A1+1\n         AGO   .VLCNCHK\n.VLSRERR MNOTE 8,'VOLSER=&VOLSER GREATER THAN 6 BYTES'\n.VLCNCHK AIF   (T'&VOLCNT EQ 'O').UNITCHK\n         AIF   (T'&VOLCNT NE 'N').VLCERR\n&A3      SETA  &VOLCNT\n         AIF   (&A3 GT 255).VLCERR\nTS&X&A1  DC    XL2'13',AL2(1,1)    VOLUME COUNT KEY, NUM, PARMLEN\nVLCNT&X  DC    AL1(&VOLCNT)        VOLUME COUNT FIELD\n&A1      SETA  &A1+1\n         AGO   .UNITCHK\n.VLCERR  MNOTE 8,'VOLCNT=&VOLCNT IS INVALID OR GREATER THAN 255'\n.UNITCHK AIF   (T'&UNIT EQ 'O').SCLSCHK\nTS&X&A1  DC    XL2'15',AL2(1,8)    UNIT TYPE KEY, NUM, PARMLEN\nUNIT&X   DC    CL8'&UNIT'          UNIT TYPE FIELD\n&A1      SETA  &A1+1\n.SCLSCHK AIF   (T'&SYSOUT EQ 'O').SYSPCHK\nTS&X&A1  DC    XL2'18',AL2(1,1)    SYSOUT CLASS KEY, NUM, PARMLEN\nSYSOU&X  DC    CL1'&SYSOUT'        SYSOUT CLASS FIELD\n&A1      SETA  &A1+1\n.SYSPCHK AIF   (T'&SPGNM EQ 'O').FORMCHK\n         AIF   (K'&SPGNM GT 8).SYSPERR\nTS&X&A1  DC    XL2'19',AL2(1,8)    SYSOUT PGM KEY, NUM, PARMLEN\nSPGNM&X  DC    CL8'&SPGNM'         SYSOUT PGM FIELD\n&A1      SETA  &A1+1\n         AGO   .FORMCHK\n.SYSPERR MNOTE 8,'SPGNM=&SPGNM IS GREATER THAN 8 BYTES'\n.FORMCHK AIF   (T'&FORM EQ 'O').OUTLCHK\n         AIF   (K'&FORM GT 4).FORMERR\nTS&X&A1  DC    XL2'1A',AL2(1,4)    SYSOUT FORM KEY, NUM, PARMLEN\nFMNO&X   DC    CL4'&FORM'          SYSOUT FORM NUMBER FIELD\n&A1      SETA  &A1+1\n         AGO   .OUTLCHK\n.FORMERR MNOTE 8,'FORM=&FORM IS GREATER THAN 4 BYTES'\n.OUTLCHK AIF   (T'&OUTLIM EQ 'O').FREECHK\nTS&X&A1  DC    XL2'1B',AL2(1,3)    OUTLIM KEY, NUM, PARMLEN\nOUTLM&X  DC    AL3(&OUTLIM)        OUTLIM PGM FIELD\n&A1      SETA  &A1+1\n.FREECHK AIF   (T'&FREE EQ 'O').COPYCHK\n         AIF   ('&FREE' NE 'CLOSE').FREERR\nTS&X&A1  DC    XL2'1C',AL2(0)      FREE=CLOSE KEY, NUM\n&A1      SETA  &A1+1               ALL ELSE WILL GENERATE MNOTE\n         AGO   .COPYCHK\n.FREERR  MNOTE 8,'FREE=&FREE INVALID'\n.COPYCHK AIF   (T'&COPIES EQ 'O').LABLCHK\n&A3      SETA  &COPIES\n         AIF   (&A3 GT 255).COPYERR\nTS&X&A1  DC    XL2'1D',AL2(1,1)    SYSOUT COPIES KEY, NUM, PARMLEN\nCOPYS&X  DC    AL1(&COPIES)        SYSOUT COPIES FIELD\n&A1      SETA  &A1+1\n         AGO   .LABLCHK\n.COPYERR MNOTE 8,'COPIES=&COPIES GREATER THAN 255'\n.LABLCHK AIF   (T'&LABEL EQ 'O').DSSQCHK\nTS&X&A1  DC    XL2'1E',AL2(1,1)    LABEL TYPE KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&LABEL' NE 'NL').LAB1CHK NL  = X'01'\nLABEL&X  DC    XL1'01'             LABEL = NL\n         AGO   .DSSQCHK\n.LAB1CHK AIF   ('&LABEL' NE 'SL').LAB2CHK SL  = X'02'\nLABEL&X  DC    XL1'2'              LABEL = SL\n         AGO   .DSSQCHK\n.LAB2CHK AIF   ('&LABEL' NE 'NSL').LAB3CHK NSL = X'04'\nLABEL&X  DC    XL1'04'             LABEL = NSL\n         AGO   .DSSQCHK\n.LAB3CHK AIF   ('&LABEL' NE 'SUL').LAB4CHK SUL = X'0A'\nLABEL&X  DC    XL1'0A'             LABEL = SUL\n         AGO   .DSSQCHK\n.LAB4CHK AIF   ('&LABEL' NE 'BLP').LAB5CHK BLP = X'10'\nLABEL&X  DC    XL1'10'             LABEL = BLP\n         AGO   .DSSQCHK\n.LAB5CHK AIF   ('&LABEL' NE 'LTM').LAB6CHK LTM = X'21'\nLABEL&X  DC    XL1'21'             LABEL = LTM\n         AGO   .DSSQCHK\n.LAB6CHK AIF   ('&LABEL' NE 'AL').LAB7CHK AL  = X'40'\nLABEL&X  DC    XL1'40'             LABEL = AL\n         AGO   .DSSQCHK\n.LAB7CHK AIF   ('&LABEL' NE 'AUL').LABERR  AUL = X'48'\nLABEL&X  DC    XL1'48'             LABEL = AUL\n         AGO   .DSSQCHK\n.LABERR  MNOTE 8,'LABEL=&LABEL INVALID'\n.DSSQCHK AIF   (T'&DSSEQ EQ 'O').PASSCHK\n         AIF   (T'&DSSEQ NE 'N').DSSQERR\n         AIF   (&DSSEQ GT 9999).DSSQERR\nTS&X&A1  DC    XL2'1F',AL2(1,2)    DSN SEQUNECE KEY, NUM, PARMLEN\nDSSEQ&X  DC    AL2(&DSSEQ)         DSN SEQUENCE FIELD\n&A1      SETA  &A1+1\n         AGO   .PASSCHK\n.DSSQERR MNOTE 8,'DSSEQ=&DSSEQ INVALID OR OUT OF RANGE'\n.PASSCHK AIF   (T'&PASPR EQ 'O').EXPDCHK\n         AIF   ('&PASPR' NE 'R' AND 'PASPR' NE 'W').PASPERR\nTS&X&A1  DC    XL2'20',AL2(1,1)    PASSWORD PROTECT KEY, NUM, PARMLEN\n         AIF   ('&PASPR' EQ 'R').PASSRD\nPASPR&X  DC    X'30'               WRITE PROTECTION\n&A1      SETA  &A1+1\n         AGO   .EXPDCHK\n.PASSRD  ANOP\nPASPR&X  DC    X'10'               READ/WRITE PROTECTION\n&A1      SETA  &A1+1\n         AGO   .EXPDCHK\n.PASPERR MNOTE 8,'PASPR=&PASPR INVALID-SHOULD BE \"R\" OR \"W\"'\n.EXPDCHK AIF   (T'&EXPDT EQ 'O').RETPCHK\n         AIF   (K'&EXPDT GT 5).EXPDERR\nTS&X&A1  DC    XL2'22',AL2(1,5)    EXPIRATION DATE KEY, NUM, PARMLEN\nEXPDT&X  DC    CL5'&EXPDT'         EXPIRATION DATE FIELD\n&A1      SETA  &A1+1\n         AGO   .RETPCHK\n.EXPDERR MNOTE 8,'EXPDT=&EXPDT GREATER THAN 5 BYTES'\n.RETPCHK AIF   (T'&RETPD EQ 'O').DUMMCHK\n         AIF   (T'&RETPD NE 'N').RETPERR\n&A3      SETA  &RETPD\n         AIF   (&RETPD GT 9999).RETPERR\nTS&X&A1  DC    XL2'23',AL2(1,2)    RETENTION PERIOD KEY, NUM, PARMLEN\nRETPD&X  DC    AL2(&RETPD)         RETENTION PERIOD FIELD\n&A1      SETA  &A1+1\n         AGO   .DUMMCHK\n.RETPERR MNOTE 8,'RETPD=&RETPD NOT NUMERIC OR GREATER THAN 9999'\n.DUMMCHK AIF   (T'&DUMMY EQ 'O').DCBSCHK\nTS&X&A1  DC    XL2'24',AL2(0)      DUMMY DATASET KEY, NUM\n&A1      SETA  &A1+1\n.DCBSCHK AIF   (T'&DCBDS EQ 'O').DCBDCHK\n         AIF   (K'&DCBDS GT 44).DCBSERR\nTS&X&A1  DC    XL2'2C',AL2(1,44)   DCB REFERENCE DSN KEY, NUM, PARMLEN\nDCBDS&X  DC    CL44'&DCBDS'        DCB REFERENCE DSNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .DCBDCHK\n.DCBSERR MNOTE 8,'DCBDS=&DCBDS GREATER THAN 44 BYTES'\n.DCBDCHK AIF   (T'&DCBDD EQ 'O').BLKSCHK\n         AIF   (K'&DCBDS GT 8).DCBDERR\nTS&X&A1  DC    XL2'2D',AL2(1,8)    DCB REFERENCE DDN KEY, NUM, PARMLEN\nDCBDS&X  DC    CL8'&DCBDD'         DCB REFERENCE DDNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .BLKSCHK\n.DCBDERR MNOTE 8,'DCBDD=&DCBDD GREATER THAN 8 BYTES'\n.BLKSCHK AIF   (T'&BLKSIZE EQ 'O').DENSCHK\n         AIF   (T'&BLKSIZE NE 'N').BLKSERR\n&A3      SETA  &BLKSIZE\n         AIF   (&A3 GT 32768).BLKSERR\nTS&X&A1  DC    XL2'30',AL2(1,2)    BLOCKSIZE KEY, NUM, PARMLEN\nBLKSZ&X  DC    AL2(&BLKSIZE)       BLOCKSIZE FIELD\n&A1      SETA  &A1+1\n         AGO   .DENSCHK\n.BLKSERR MNOTE 8,'BLKSIZE=&BLKSIZE INVALID OR GREATER THAN 32768'\n.DENSCHK AIF   (T'&DEN EQ 'O').DSORCHK\nTS&X&A1  DC    XL2'3B',AL2(1,1)    DENSITY KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&DEN' NE '4').DEN1CHK DEN4 = X'D3'\nDEN&X    DC    XL1'D3'             DEN = 4\n         AGO   .DSORCHK\n.DEN1CHK AIF   ('&DEN' NE '3').DEN2CHK DEN3 = X'C3'\nDEN&X    DC    XL1'C3'             DEN = 3\n         AGO   .DSORCHK\n.DEN2CHK AIF   ('&DEN' NE '2').DEN3CHK DEN2 = X'83'\nDEN&X    DC    XL1'83'             DEN = 2\n         AGO   .DSORCHK\n.DEN3CHK AIF   ('&DEN' NE '1').DENERR  DEN1 = X'43'\nDEN&X    DC    XL1'43'             DEN = 1\n         AGO   .DSORCHK\n.DENERR  MNOTE 8,'DEN=&DEN INVALID'\n.DSORCHK AIF   (T'&DSORG EQ 'O').EROPCHK\nTS&X&A1  DC    XL2'3C',AL2(1,2)    DSORG KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&DSORG' NE 'PO').DSO1CHK DSORG PO = X'0200'\nDSORG&X  DC    XL2'0200'           DSORG = PO\n         AGO   .EROPCHK\n.DSO1CHK AIF   ('&DSORG' NE 'PS').DSO2CHK DSORG PS = X'4000'\nDSORG&X  DC    XL2'4000'           DSORG = PS\n         AGO   .EROPCHK\n.DSO2CHK AIF   ('&DSORG' NE 'DA').DSO3CHK DSORG DA = X'2000'\nDSORG&X  DC    XL2'2000'           DSORG = DA\n         AGO   .EROPCHK\n.DSO3CHK AIF   ('&DSORG' NE 'VS').DSO4CHK DSORG VS = X'0008'\nDSORG&X  DC    XL2'0008'           DSORG = VS\n         AGO   .EROPCHK\n.DSO4CHK AIF   ('&DSORG' NE 'POU').DSO5CHK DSORG POU = X'0300'\nDSORG&X  DC    XL2'0300'           DSORG = POU\n         AGO   .EROPCHK\n.DSO5CHK AIF   ('&DSORG' NE 'PSU').DSO6CHK DSORG PSU = X'4100'\nDSORG&X  DC    XL2'4100'           DSORG = PSU\n         AGO   .EROPCHK\n.DSO6CHK AIF   ('&DSORG' NE 'DAU').DSOERR  DSORG DAU = X'2100'\nDSORG&X  DC    XL2'2100'           DSORG = DAU\n         AGO   .EROPCHK\n.DSOERR  MNOTE 8,'DSORG=&DSORG INVALID'\n.EROPCHK AIF   (T'&EROPT EQ 'O').KEYLCHK\nTS&X&A1  DC    XL2'3D',AL2(1,1)    EROPT KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&EROPT' NE 'ABE').ERO1CHK EROPT ABE = X'20'\nEROPT&X  DC    XL1'20'             EROPT = ABE\n         AGO   .KEYLCHK\n.ERO1CHK AIF   ('&EROPT' NE 'SKP').ERO2CHK EROPT SKP = X'40'\nEROPT&X  DC    XL1'40'             EROPT = SKP\n         AGO   .KEYLCHK\n.ERO2CHK AIF   ('&EROPT' NE 'ACC').EROERR  EROPT ACC = X'80'\nEROPT&X  DC    XL1'80'             EROPT = ACC\n         AGO   .KEYLCHK\n.EROERR  MNOTE 8,'EROPT=&EROPT INVALID'\n.KEYLCHK AIF   (T'&KEYLEN EQ 'O').LRECCHK\nTS&X&A1  DC    XL2'40',AL2(1,1)    KEYLEN KEY, NUM, PARMLEN\nKYLEN&X  DC    AL1(&KEYLEN)        KEYLEN FIELD\n&A1      SETA  &A1+1\n.LRECCHK AIF   (T'&LRECL EQ 'O').OPTCCHK\nTS&X&A1  DC    XL2'42',AL2(1,2)    LRECL KEY, NUM, PARMLEN\nLRECL&X  DC    AL2(&LRECL)         LRECL FIELD\n&A1      SETA  &A1+1\n.OPTCCHK AIF   (T'&OPTCD EQ 'O').RECFCHK\nTS&X&A1  DC    XL2'45',AL2(1,1)    OPTCD KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&OPTCD' NE 'B').OPT1CHK OPTCD B = X'40'\nOPTCD&X  DC    XL1'40'             OPTCD = B\n         AGO   .RECFCHK\n.OPT1CHK AIF   ('&OPTCD' NE 'W').OPT2CHK OPTCD W = X'80'\nOPTCD&X  DC    XL1'80'             OPTCD = W\n         AGO   .RECFCHK\n.OPT2CHK AIF   ('&OPTCD' NE 'C').OPT3CHK OPTCD C = X'20'\nOPTCD&X  DC    XL1'20'             OPTCD = C\n         AGO   .RECFCHK\n.OPT3CHK AIF   ('&OPTCD' NE 'Z').OPTERR  OPTCD Z = X'04'\nOPTCD&X  DC    XL1'04'             OPTCD = Z\n         AGO   .RECFCHK\n.OPTERR  MNOTE 8,'OPTCD=&OPTCD INVALID'\n.RECFCHK AIF   (T'&RECFM EQ 'O').PASWCHK\nTS&X&A1  DC    XL2'49',AL2(1,1)    RECFM KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&RECFM' NE 'FBA').REC1CHK RECFM FBA = X'94'\nRECFM&X  DC    XL1'94'             RECFM = FBA\n         AGO   .PASWCHK\n.REC1CHK AIF   ('&RECFM' NE 'VBA').REC2CHK RECFM VBA = X'54'\nRECFM&X  DC    XL1'54'             RECFM = VBA\n         AGO   .PASWCHK\n.REC2CHK AIF   ('&RECFM' NE 'FB').REC3CHK RECFM FB = X'90'\nRECFM&X  DC    XL1'90'             RECFM = FB\n         AGO   .PASWCHK\n.REC3CHK AIF   ('&RECFM' NE 'VB').REC4CHK RECFM VB = X'50'\nRECFM&X  DC    XL1'50'             RECFM = VB\n         AGO   .PASWCHK\n.REC4CHK AIF   ('&RECFM' NE 'F').REC5CHK RECFM F = X'80'\nRECFM&X  DC    XL1'80'             RECFM = F\n         AGO   .PASWCHK\n.REC5CHK AIF   ('&RECFM' NE 'V').REC6CHK RECFM V = X'40'\nRECFM&X  DC    XL1'40'             RECFM = V\n         AGO   .PASWCHK\n.REC6CHK AIF   ('&RECFM' NE 'FBS').REC7CHK RECFM FBS = X'98'\nRECFM&X  DC    XL1'98'             RECFM = FBS\n         AGO   .PASWCHK\n.REC7CHK AIF   ('&RECFM' NE 'VBS').REC8CHK RECFM VBS = X'58'\nRECFM&X  DC    XL1'58'             RECFM = VBS\n         AGO   .PASWCHK\n.REC8CHK AIF   ('&RECFM' NE 'FA').REC9CHK RECFM FA = X'84'\nRECFM&X  DC    XL1'84'             RECFM = FA\n         AGO   .PASWCHK\n.REC9CHK AIF   ('&RECFM' NE 'VA').RECACHK RECFM VA = X'44'\nRECFM&X  DC    XL1'44'             RECFM = VA\n         AGO   .PASWCHK\n.RECACHK AIF   ('&RECFM' NE 'FBM').RECBCHK RECFM FBM = X'92'\nRECFM&X  DC    XL1'92'             RECFM = FBM\n         AGO   .PASWCHK\n.RECBCHK AIF   ('&RECFM' NE 'VBM').RECCCHK RECFM VBM = X'52'\nRECFM&X  DC    XL1'52'             RECFM = VBM\n         AGO   .PASWCHK\n.RECCCHK AIF   ('&RECFM' NE 'FBSA').RECDCHK RECFM FBSA = X'9C'\nRECFM&X  DC    XL1'9C'             RECFM = FBSA\n         AGO   .PASWCHK\n.RECDCHK AIF   ('&RECFM' NE 'U').RECFERR RECFM U = X'C0'\nRECFM&X  DC    XL1'C0'             RECFM = U\n         AGO   .PASWCHK\n.RECFERR MNOTE 8,'RECFM=&RECFM INVALID'\n.PASWCHK AIF   (T'&PASSWRD EQ 'O').PERMCHK\n         AIF   (K'&PASSWRD GT 8).PASWERR\nTS&X&A1  DC    XL2'50',AL2(1,8)    PASSWORD KEY, NUM, PARMLEN\nPASSW&X  DC    CL8'&PASSWRD'       PASSWORD\n&A1      SETA  &A1+1\n         AGO   .PERMCHK\n.PASWERR MNOTE 8,'PASSWRD=&PASSWRD GREATER THAN 8 BYTES'\n.PERMCHK AIF   (T'&PERM EQ 'O').RTDDCHK\nTS&X&A1  DC    XL2'52',AL2(0)      PERM ALLOC KEY, NUM\n&A1      SETA  &A1+1\n.RTDDCHK AIF   (T'&RETDD EQ 'O').RTDSCHK\nTS&X&A1  DC    XL2'55',AL2(1,8)    RETURN DDNAME, NUM, PARMLEN\nRTDDN&X  DC    CL8' '              RETURNED DDNAME\n&A1      SETA  &A1+1\n.RTDSCHK AIF   (T'&RETDS EQ 'O').FUNCCHK\nTS&X&A1  DC    XL2'56',AL2(1,44)   RETURN DSNAME, NUM, PARMLEN\nRTDSN&X  DC    CL44' '             RETURNED DSNAME\n&A1      SETA  &A1+1\n.FUNCCHK AIF   (T'&FUNC EQ 'O').RTVLCHK\n         AIF   ('&FUNC' NE 'I').FUNCERR\nTS&X&A1  DC    XL2'5A',AL2(1,1)    FUNCTION KEY, NUM, PARMLEN\nFUNC&X   DC    XL1'80'             INTERPRET FUNCTION FIELD\n&A1      SETA  &A1+1\n         AGO   .RTVLCHK\n.FUNCERR MNOTE 8,'FUNC=&FUNC NOT SUPPORTED BY MACRO'\n.RTVLCHK AIF   (T'&RETVOL EQ 'O').MSVGCHK\nTS&X&A1  DC    XL2'5D',AL2(1,6)    RETURN VOLSER, NUM, PARMLEN\nRTVOL&X  DC    CL6' '              RETURNED VOLSER\n&A1      SETA  &A1+1\n.MSVGCHK AIF   (T'&MSVGP EQ 'O').TUPLGEN\nTS&X&A1  DC    XL2'5E',AL2(1,8)    MSVGP KEY, NUM, PARMLEN\nMSVGP&X  DC    CL8'&MSVGP'         MSVGP FIELD\n&A1      SETA  &A1+1\n.TUPLGEN ANOP\n&A2      SETA  1\n&A1      SETA  &A1-1 BB\n         AIF   (&A1 GE 1).GENOK BB\n         MNOTE 8,'NO TEXT UNIT POINTERS WERE GENERATED' BB\n         MEXIT BB\n.GENOK   ANOP BB\n&NM      SETC  'TXTPP&X'\n.TULOOP  AIF   (&A2 EQ &A1).EOFGEN\n&NM      DC    A(TS&X&A2)          TEXT UNIT POINTER\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .TULOOP\n.EOFGEN  AIF   (&A1 NE 1).SKIPCLR\n&NM      SETC  'TXTPP&X'\n.SKIPCLR ANOP\n&NM      DC    A(TS&X&A2+X'80000000') LAST TEXT UNIT POINTER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYNSPACE": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x004\\x004\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&NAME    DYNSPACE &TYPE\n.*\n.*    THIS IS AN INNER MACRO TO ALLOC/FREE.\n.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST\n.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY\n.*                         EACH, REMEMBERING THE LARGEST.\n.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.\n.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,\n.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,\n.*    OR BY BEGINWKA, IF THE LATTER IS USED.\n.*\n.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE\n.*     NAME DYNSPACE\n.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE\n.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL\n.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.\n.*\n.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL\n.*          DYNSPACE ADD\n.*     (NO NAME FIELD AND ONE OPERAND)\n.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE\n.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE\n.*     CURRENT REQUEST IS FOR A GREATER AMOUNT\n.*\n.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO\n.*     NAME OR OPERAND FIELD.\n.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME\n.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.\n.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.\n.*\n         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN\n         GBLC  &DYNP,&DYNSP\n         LCLA  &I\n         AIF   ('&NAME' NE '').NAME\n         AIF   ('&TYPE' EQ '').ALLOC\n.*   THE ACCUMULATE FUNCTION IS REQUIRED\n&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST\n         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT\n&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM\n         MEXIT\n.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT\n&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME\n.EXIT    MEXIT\n.ALLOC   AIF   ('&DYNSP' EQ '').EXIT\n*\n**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA\n*\n&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE\n&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0\n&DYNSPQ  SETA 0\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ELSE": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x01\\x05\\x01?\\x01\\x05\\x01?!\\t\\x00\\t\\x00\\n\\x00\\x00\\xc7\\xe2\\xc9@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-01-13T00:00:00", "modifydate": "2005-01-13T21:09:52", "lines": 9, "newlines": 10, "modlines": 0, "user": "GSI"}, "text": "          MACRO\n          ELSE\n          GBLC  &STACK(100)\n          GBLA  &STACKPT\n          GBLB  &ELSEF(100)\n&ELSEF(&STACKPT) SETB 1\n          B   IFB&STACK(&STACKPT)\nIFA&STACK(&STACKPT) EQU *\n          MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDIF": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x01\\x05\\x01?\\x01\\x05\\x01?!\\x10\\x00\\r\\x00\\x0e\\x00\\x00\\xc7\\xe2\\xc9@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-01-13T00:00:00", "modifydate": "2005-01-13T21:10:03", "lines": 13, "newlines": 14, "modlines": 0, "user": "GSI"}, "text": "          MACRO\n          ENDIF\n          GBLC  &STACK(100)\n          GBLA  &STACKPT\n          GBLB  &ELSEF(100)\n          AIF (&ELSEF(&STACKPT)).SEQ02\nIFA&STACK(&STACKPT) EQU *\n          AGO .SEQ01\n.SEQ02    ANOP\nIFB&STACK(&STACKPT) EQU *\n.SEQ01    ANOP\n&STACKPT  SETA &STACKPT-1\n          MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER": {"ttr": 2835, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x07\\x06\\x8f\\x01\\x07\\x06\\x8f\\x11V\\x00\\x8e\\x00\\x8e\\x00\\x00\\xc7\\xc7\\xc7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-03-09T00:00:00", "modifydate": "2007-03-09T11:56:56", "lines": 142, "newlines": 142, "modlines": 0, "user": "GGG"}, "text": "         MACRO\n&LABEL   ENTER &AMODE=31,                                              *\n               &RMODE=ANY,                                             *\n               &LEN=,                                                  *\n               &EQU=YES,                                               *\n               &STATS=YES,                                             *\n               &BRANCH=,                                               *\n               &HEADER=YES,                                            *\n               &BASEREG=R12,                                           *\n               &WSREG=R11,                                             *\n               &EPREG=R15,                                             *\n               &RETREG=R14,                                            *\n               &SP=0,                                                  *\n               &LOC=RES,                                               *\n               &CALLRKY=YES\n\n.**********************************************************************\n.*                                                                    *\n.*                             E N T E R                              *\n.*                                                                    *\n.*                                                                    *\n.*FU T U R I T Y   S O F T W A R E   I N T E R N A T I O N A L   I N C*\n.*                                                                    *\n.*                                                                    *\n.*                  CHIEF ARCHITECT: GARRY G. GREEN                   *\n.*                 ARCHITECT EN CHEF: GARRY G. GREEN                  *\n.*                                                                    *\n.*                      COPYRIGHT MAY 2005 FSI                        *\n.*                                                                    *\n.**********************************************************************\n\n.**********************************************************************\n.*                                                                    *\n.*  CHANGE ACTIVITY                                                   *\n.*  $G00=20051399 GGG VERSION 1.0 BASE                                *\n.*  $G01=20060730 GGG ADDED SUPPORT FOR STATS AND BRANCH PARAMETERS   *\n.*  $G02=20070302 GGG ADDED SUPPORT FOR HEADER, BASEREG, WSREG, EPREG,*\n.*                    AND RETREG - R14,R15,R0,AND R1 MAY NOT BE USED  *\n.*                                                                    *\n.**********************************************************************\n\n\n.**********************************************************************\n.*                                                                    *\n.*  ESTABLISH STANADARD ENTRY PROLOG                                  *\n.*                                                                    *\n.*                                                                    *\n.*    - PARAMETERS ARE:                                               *\n.*                                                                    *\n.*        LABEL  - USED FOR CSECT NAME AND BASE FOR BASEREG - REQ'D   *\n.*        AMODE  - CSECT'S AMODE - DEFAULT IS 31                      *\n.*        RMODE  - CSECT'S RMODE - DEFAULT IS ANY                     *\n.*        LEN    - LEN OF VIRTUAL STORAGE TO OBTAIN - DEFAULT IS NONE *\n.*                 TYPICALLY USED TO OBTAIN VIRTUAL STORAGE FOR       *\n.*                 WORKING STORAGE FOR REFRESHABLE PROGRAMS; LOCATION *\n.*                 OF OBTAINED STORAGE IS RETURNED IN WSREG           *\n.*        EQU    - GENERATE GENERAL REGISTER EQUATES - DEFAULT IS YES *\n.*        STATS  - MACRO GENERATES A *STATS RECORD USED BY FSIASMX0   *\n.*                 ASSEMBLER EXIT (SEE HEADER BELOW) - DEFAULT IS YES *\n.*        BRANCH - LABEL TO BRANCH TO AFTER ENTRY PROLOG - USED TO    *\n.*                 BRANCH AROUND STATIC VARIABLES AND MODEL DYNAMIC   *\n.*                 VARIABLES; IF NOT SPECIFIED, CONTROL IS RETURNED   *\n.*                 IMMEDIATLY FOLLOWING THE ENTER MACRO               *\n.*        HEADER - GENERATE MODULE HEADER YES/NO - IF NO THEN *STATS  *\n.*                 WILL NOT BE GENERATED - DEFAULT IS YES             *\n.*        BASEREG- REG TO BE USED AS BASE REGISTER-DEFAULT IS R12     *\n.*                 MUST BE R2-R12 AND NOT THE SAME AS WSREG           *\n.*        WSREG  - REG TO RETURN OBTAINED STORAGE- DEFAULT IS R11     *\n.*                 MUST BE R2-R12 AND NOT THE SAME AS BASEREG         *\n.*        EPREG  - REG AT ENTRY CONTAINING EP ADDR-DEFAULT IS R15     *\n.*                 MUST NOT BE THE SAME AS RETREG                     *\n.*        RETREG - REG AT ENTRY CONTAINING RETURN ADDR-DEFAULT IS R14 *\n.*                 MUST NOT BE R0 NOR THE SAME AS EPREG               *\n.*                                                                    *\n.*        THE FOLLOWING PARAMETERS ARE RELEVENT ONLY IF A VALUE FOR   *\n.*        LEN IS SPECIFIED; REFER TO IBM'S DOCUMENTATION FOR THE MACRO*\n.*        STORAGE OBTAIN FOR A DESCRIPTION OF THESE PARAMETERS:       *\n.*                                                                    *\n.*          SP       - SUBPOOL FOR VIRTUAL STORAGE - DEFAULT IS 0     *\n.*          LOC      - LOCATION FOR VIRTUAL STORAGE - DEFAULT IS RES  *\n.*          CALLRKEY - VALUE FOR CALLRKEY - DEFAULT IS YES            *\n.*                                                                    *\n.*    - NOTE THAT IF LEN IS SPECIFIED, USER MUST EXPLICITLY CODE A    *\n.*      STORAGE RELEASE TO RELEASE STORAGE BEFORE RETURNING TO CALLER *\n.*                                                                    *\n.*    - RETURN ACCOMPLISHED VIA PR - THIS RESTORES R2-R14 FROM THE    *\n.*      STACK THEN BRANCHES TO REGISTER SPECIFIED IN 1ST OPERAND OF   *\n.*      BAKR USED TO SAVE STATE                                       *\n.*                                                                    *\n.**********************************************************************\n\n         PUSH      PRINT                     SAVE PRINTING STATUS\n         PRINT     OFF,NOPRINT               SUPRESS PRINTING REG EQ\n         AIF       ('&EQU' NE 'YES').NOEQU   SKIP REG EQUATES YES/NO\n         YREGS     ,                         REGISTER EQUATES\n.NOEQU   ANOP                                COMMON RETURN\n         POP       PRINT                     RESTORE PRINTING STATUS\n&LABEL   CSECT     ,                         NAME OF PROGRAM\n&LABEL   AMODE     &AMODE                    SPECIFY AMODE\n&LABEL   RMODE     &RMODE                    SPECIFY RMODE\n         BAKR      &RETREG,0                 SAVE STATE\n         LAE       &BASEREG,0(&EPREG)        LOAD CODE PAGE REGISTER\n         USING     &LABEL,&BASEREG           MAP  CODE PAGE REGISTER\n         AIF       ('&LEN' EQ '').NOREFR     NO WORKING STORAGE REQ\n         STORAGE   OBTAIN,                   OBTAIN WORKING STORAGE    *\n               LENGTH=&LEN,                  FOR THIS LENGTH           *\n               SP=&SP,                       IN THIS SUBPOOL           *\n               LOC=(&LOC),                   AT THIS LOCATION          *\n               CALLRKY=&CALLRKY              USE CALLER'S KEY Y/N\n         LR        &WSREG,R1                 COPY @ WORKING STORAGE\n         EREG      R14,R1                    RESTORE REGS USED BY\n*                                            STORAGE MACRO\n.NOREFR  ANOP                                REFR NOT REQUIRED\n         LAE       R13,@&SYSNDX.0            @ PSEUDO SAVE AREA\n         AIF       ('&BRANCH' EQ '').NOBR    USE DEFAULT BRANCH LABEL\n         B         &BRANCH                   GOTO USER SUPPLIED LABEL\n         AGO       .BR2                      SKIP MACRO SUPPLIED LABEL\n.NOBR    ANOP                                USE MACRO SUPPLIED LABEL\n         B         @&SYSNDX.1                GOTO TO MAC SUPPLIED LABEL\n.BR2     ANOP                                COMMON GATHERING\n         AIF       ('&HEADER' EQ 'NO').NOHDR NO HEADER\n         DC        C'*CSECT:'                EYECATCHER\n         DC        C'&LABEL'                 MODULE NAME\n         DC        C'*COMPILED:'             EYECATCHER\n         DC        CL19'&SYSCLOCK'           DATE AND TIME STAMP\n         ORG       *-9                       OVERLAY BLANK IN SYSCLOCK\n         DC        C'*'                      CHANGE TO AN *\n         ORG       ,                         STOP OVERLAYING\n.NOHDR   ANOP                                DO NOT GENERATE MOD HEADER\n         AIF       ('&STATS' EQ 'NO').NOSTATS DONT GENERATE *STATS LINE\n*STATS                                       USED BY FSIASMX0\n.*                                           BLANK LINES FOLLOWING DUE\n.*                                           TO ASSEMBLER EXIT APAR\n\n\n.NOSTATS ANOP                                DON'T GENERATE *STATS REC\n@&SYSNDX.0 DC      F'0',C'F1SA'              R13 @ HERE INDICATING SA\n*                                            USES LINKAGE STACK\n         AIF       ('&BRANCH' NE '').BR1     BYPASS CREATE BRANCH LABEL\n@&SYSNDX.1 DS      0H                        DEFAULT BRANCH LABEL\n.BR1     ANOP                                SKIP CREATE BRANCH LABEL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FREE": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x85\\x00\\x85\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 133, "newlines": 133, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&NAME    FREE  &UNALC,&DSN=,&DDN=,&MEMBER=,&DISP=,&SYSOUT=,            X\n               &ERROR=,&MF=AUTO,&PREFIX=,&FILE=,&F=,&DA=,&HOLD=\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n&T       SETC  'A'\n&PAR     SETC  '&MF(2)+4'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n&PAR     SETC  '&MF(2)'(2,K'&MF(2)-2)\n&T       SETC  'R'\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n&PAR     SETC  '4&MF(2)'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n&T       SETC  'A'\n&PAR     SETC  '&DYNP.RB'\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBUN        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&SYSOUT' NE '').SYSOUT\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TUNALC  AIF   ('&UNALC' NE '').PERM\n.THOLD   AIF   ('&HOLD' NE '').HOLD\n         AGO   .SVC99\n.DSN     RCPFDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.SYSOUT  RCPFSYS &SYSOUT\n         AGO   .TDDN\n.DDN     RCPFDDN &DDN&F&FILE\n         AGO   .TDISP\n.DISP RCPFDISP &DISP\n         AGO   .TUNALC\n.PERM    RCPUNALC\n         AGO   .THOLD\n.HOLD    RCPFHOLD &HOLD\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n.DYNA    DYNALLOC\n         AIF   ('&ERROR' EQ '').RESERVE\n         AIF   ('&PAR' EQ '').LTR\n         L&T   R14,&PAR                 LOAD REG 14 WITH ADDRESS OF RB\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n.LTR     LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n**       NOTE.  R14 POINTS TO REQUEST BLOCK, R15 HAS RETURN CODE     **\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC DATA                             **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU11\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AGO   .DTU10\n.DTU11   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FREEDD": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00U\\x00U\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&DDNAME  FREEDD &DSN=,&DSNAME=,&DISP=,&SYSOUT=,&DEST=,&HOLD=,          *\n               &KEYADDS=,&TYPE=UNALLOC,&EXIT=ALODDERR\n         GBLA  &X,&Y,&H,&N,&R\n         GBLB  &CONCATB,&FREEB,&DDDFAIL,&DDDD\n         LCLA  &A\n         LCLC  &C,&D\n         AIF   (&DDDD).ERRDDDD\n         AIF   (&CONCATB).ERRCONC\n&X       SETA  20 DISPLACEMENT FROM ALOBLOCK TO FIRST TEXT UNIT POINTER\n&Y       SETA  20         NEGATIVE DISTANCE FROM ALOBLOCK TO FIRST DATA\n&R       SETA  14                      FIRST REGISTER LOADED\n&FREEB   SETB  1\n         AIF   ('&DDNAME&DSN&DSNAME&DISP' EQ '').DDD5X\n         AIF   ('&DDNAME' EQ 'RETURN').ERRRET\n.DDNAMEX AIF   ('&DISP(1)' NE '').ERRDIS1\n.DISP1X  AIF   ('&DISP(3)' NE '').ERRDIS3\n.DISP3X  DDD5  &DDNAME,&DSN,&DSNAME,&DISP\n.DDD5X   AIF   ('&SYSOUT&DEST&HOLD' EQ '').DDD4X\n         AIF   (N'&SYSOUT GT 1).ERRSYSO\n.SYSOUTX DDD4  &SYSOUT,&DEST,&HOLD\n         AIF   ('&HOLD' NE 'NO').DDD4X\n         DDD0  =Y(X'0A',0),,,,'HOLD=NO'\n.DDD4X   AIF   ('&KEYADDS' EQ '').KEYADDX\n&A       SETA  0\n.KEYLOOP AIF   (&A GE N'&KEYADDS).KEYADDX\n&A       SETA  &A+1\n&C       SETC  '&KEYADDS(&A)'\n         AIF   ('&C' EQ '').KEYLOOP\n         AIF   ('&C'(1,1) EQ '(').KEYADDR\n         DDD0  &C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDR DDD0  0&C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDX AIF   ('&TYPE' EQ 'EITHER' OR '&TYPE' EQ '').TYPEX\n         AIF   ('&TYPE' NE 'UNALLOC').TYPER\n.TYPEU   DDD0  =Y(X'07',0),,,,                                         *\n               'TYPE=UNALLOC  EVEN IF PERMANENTLY ALLOCATED'\n         AGO   .TYPEX\n.TYPER   AIF   ('&TYPE' NE 'REMOVE').ERRTYPE\n         DDD0  =Y(X'08',0),,,,'TYPE=REMOVE  IN-USE ATTRIBUTE'\n.TYPEX   AIF   (&R NE 14).R14X\n&X       SETA  &X-4\n         AGO   .RX\n.R14X    AIF   (&R NE 15).R15X\n         ST    14,ALOBLOCK+&X\n         AGO   .RX\n.R15X    AIF   (&R NE 0).R0X\n         STM   14,15,ALOBLOCK+&X\n&X       SETA  &X+4\n         AGO   .RX\n.R0X     STM   14,0,ALOBLOCK+&X\n&X       SETA  &X+8\n.RX      OI    ALOBLOCK+&X,X'80'        SET END OF TEXT UNIT ADDR LIST\n         LA    0,X'0220'               LOAD VERB, FLAGS1\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n&DDDFAIL SETB  ('&EXIT' EQ 'ALODDERR' OR &DDDFAIL)\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n         AIF   (&H GE &Y).HX\n&H       SETA  &Y\n.HX      AIF   (&N GE &X).NX\n&N       SETA  &X\n.NX      MEXIT\n.ERRDDDD MNOTE 12,'FREEDD MAY NOT BE ISSUED AFTER DDDD'\n         MEXIT\n.ERRCONC MNOTE 12,'FREEDD MAY NOT BE ISSUED DURING CONCATENATION.'\n         MEXIT\n.ERRRET  MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT RETURN OF THE *\n               DDNAME.'\n         AGO   .DDNAMEX\n.ERRDIS1 MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT DISP=(&DISP(1)*\n               ).'\n         AGO   .DISP1X\n.ERRDIS3 MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT DISP=(,,&DISP(*\n               3)).'\n         AGO   .DISP3X\n.ERRSYSO MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT SYSOUT=(,&SYSO*\n               UT(2),&SYSOUT(3)).'\n         AGO   .SYSOUTX\n.ERRTYPE MNOTE 8,'TYPE=&TYPE INVALID. TYPE IGNORED.'\n         AGO   .TYPEU\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEX": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00G\\x01\\x05\\x02\\x0f\\x01\\x05\\x02\\x0f\\x14'\\x00\\x0f\\x00\\x0f\\x00\\x03\\xe2\\xc7\\xd6\\xd3\\xd6\\xc2@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-01-20T00:00:00", "modifydate": "2005-01-20T14:27:47", "lines": 15, "newlines": 15, "modlines": 3, "user": "SGOLOB"}, "text": "         MACRO\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAVER4B\n         STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         L     R4,SAVER4B\n         LM    15,1,HEXSAVE\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IF": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x05\\x01?\\x01\\x05\\x01?!\\x10\\x00\\x14\\x00\\x15\\x00\\x00\\xc7\\xe2\\xc9@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-01-13T00:00:00", "modifydate": "2005-01-13T21:10:06", "lines": 20, "newlines": 21, "modlines": 0, "user": "GSI"}, "text": "         MACRO\n         IF    &COND\n         GBLC  &STACK(100)\n         GBLA  &STACKPT\n         GBLB  &ELSEF(100)\n&STACKPT SETA &STACKPT+1\n&STACK(&STACKPT) SETC '&SYSNDX'\n&ELSEF(&STACKPT) SETB 0\n          L 0,&COND(1)\n          C 0,&COND(3)\n          AIF   ('&COND(2)' NE 'EQ').SEQ01\n          BNE   IFA&SYSNDX\n.SEQ01    ANOP\n          AIF ('&COND(2)' NE 'LT').SEQ02\n          BC   10,IFA&SYSNDX\n.SEQ02    ANOP\n          AIF ('&COND(2)' NE 'GT').SEQ03\n          BC   12,IFA&SYSNDX\n.SEQ03    ANOP\n          MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPBFRGS": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x13\\x00\\x13\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPBFRGS &BUFPTR,&WKREGS\n         GBLC  &RCPBFRP,&RCPBFR1,&RCPBFR2\n         AIF   ('&BUFPTR' EQ '').TGP\n&RCPBFRP SETC  '&BUFPTR'\n         AGO   .TWK1\n.TGP     AIF   ('&RCPBFRP' NE '').TWK1\n&RCPBFRP SETC  'R1'\n.TWK1    AIF   ('&WKREGS(1)' EQ '').TG1\n&RCPBFR1 SETC  '&WKREGS(1)'\n         AGO   .TWK2\n.TG1     AIF   ('&RCPBFR1' NE '').TWK2\n&RCPBFR1 SETC  'R14'\n.TWK2    AIF   ('&WKREGS(2)' EQ '').TG2\n&RCPBFR2 SETC  '&WKREGS(2)'\n         MEXIT\n.TG2     AIF   ('&RCPBFR2' NE '').EXIT\n&RCPBFR2 SETC  'R15'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPBTU": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x11\\x00\\x11\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO GENERATE TEXT UNITS ENTERED\n.*  IN QUOTES\n.*\n&L       SETA  K'&PAR-2                GET LENGTH OF TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,&NUM         SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           MOVE IN LENGTH\n         MVC   S99TUPAR(&L.),=C&PAR    MOVE IN TEXT UNIT\n&L       SETA  &L+6\n         AIF   (&L/2 EQ (&L+1)/2).LOK\n&L       SETA  &L+1\n.LOK     RCPDINC &L\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPBTU2": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x13\\x00\\x13\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         GBLA  &DTUPO\n         GBLC  &DYNP\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO BRANCH AROUND TEXT UNIT AND\n.*  CREATE TEXT UNIT\n.*\n&L       SETA  K'&PAR+8                GET LENGTH TO BRANCH AROUND\n         AIF   (&L/2 EQ (&L+1)/2).LOK  MAKE SURE LENGTH IS EVEN\n&L       SETA  &L+1\n.LOK     BAL   R14,*+&L                BRANCH AROUND TEXT UNIT\n&L       SETA  K'&PAR-2\n         DC    Y(&KEY,&NUM,&L),C&PAR   TEXT UNIT\n         LA    R14,0(R14)              CLEAR HIGH ORDER BYTE\n         ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPCKID": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00-\\x00-\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&NAME    RCPCKID              &CHECKID\n         GBLB  &RCPECT(2),&RCPPSCB(2)\n         GBLC  &RCPPRE\n         LCLC  &CHARVAR,&P\n         LCLA  &COUNTR,&L\n&P       SETC  '&RCPPRE'\n&RCPPSCB(1) SETB  1\n&RCPECT(1)  SETB  1\n         EJECT\n         SPACE 4\n***********************************************************************\n***  THE USERID OF THE USER IS CHECKED. IF IT IS NOT VALID, THE    ****\n***   COMMAND PRETENDS IT DOES NOT EXIST BY LINKING TO EXEC IN     ****\n***   THE SAME WAY THE TMP DOES IF IT CANNOT FIND THE COMMAND.     ****\n***********************************************************************\n         SPACE 3\n         L     R1,CPPLPSCB             LOAD ADDRESS OF PSCB\n         USING PSCB,R1                 PSCB ADDRESSABILITY\n.NID     ANOP\n&COUNTR  SETA  &COUNTR+1\n         AIF   ('&CHECKID(&COUNTR)' EQ '').ENDID\n&CHARVAR SETC  '&CHECKID(&COUNTR)'\n&L       SETA  K'&CHARVAR\n         AIF   ('&CHARVAR'(1,1) EQ '''').QCID\n         CLC   PSCBUSER(&L),=C'&CHARVAR'  IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.QCID    ANOP\n&L       SETA  &L-2\n         CLC   PSCBUSER(&L),=C&CHARVAR    IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.ENDID   L     R1,CPPLECT              LOAD ECT ADDRESS\n         SPACE 2\n         USING ECT,R1\n         MVC   ECTPCMD,&P.EXECN        MOVE IN COMMAND NAME\n         DROP  R1                      KILL ECT ADDRESSABILITY\n         L     R1,CPPLCBUF             LOAD CBUF ADDRESS\n         XC    2(2,R1),2(R1)           ZERO OFFSET FIELD\n         L     R1,&P.CPPL              RELOAD CPPL ADDRESS\n         XCTL  EPLOC=&P.EXECN\n&P.EXECN DC    CL8'EXEC'               NAME OF EXEC PROCESSOR\n&P.IDOK  DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDDCB": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\xa4\\x00\\xa4\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 164, "newlines": 164, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDDCB &LRECL=,&BLKSIZE=,&RECFM=,&DEN=,&DSORG=,&KEYLEN=\n         GBLC  &DYNP\n         AIF   ('&DEN' EQ '').DSORG\n         SPACE\n***********************************************************************\n**   DCB DENSITY TEXT UNIT                                           **\n***********************************************************************\n         AIF   ('&DEN' EQ '0').DEN0\n         AIF   ('&DEN' EQ '1').DEN1\n         AIF   ('&DEN' EQ '2').DEN2\n         AIF   ('&DEN' EQ '3').DEN3\n         AIF   ('&DEN' EQ '4').DEN4\n         MNOTE 8,'DENSITY INVALID'\n         AGO   .DSORG\n.DEN0    ANOP\n         MVI   S99TUPAR,X'03'          SET PARAMETER\n         AGO   .DODEN\n.DEN1    ANOP\n         MVI   S99TUPAR,X'43'          SET PARAMETER\n         AGO   .DODEN\n.DEN2    ANOP\n         MVI   S99TUPAR,X'83'          SET PARAMETER\n         AGO   .DODEN\n.DEN3    ANOP\n         MVI   S99TUPAR,X'C3'          SET PARAMETER\n         AGO   .DODEN\n.DEN4    ANOP\n         MVI   S99TUPAR,X'D3'          SET PARAMETER\n         AGO   .DODEN\n.DODEN   ANOP\n         MVI   S99TUKEY+1,DALDEN       SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,1            SET LENGTH\n         RCPDINC 8\n.DSORG   AIF   ('&DSORG' EQ '').BLKSIZE\n         SPACE\n***********************************************************************\n**    DCB DSORG TEXT UNIT                                            **\n***********************************************************************\n         AIF   ('&DSORG' EQ 'PO').PO\n         AIF   ('&DSORG' EQ 'PS').PS\n         AIF   ('&DSORG' EQ 'PO').DA\n         MNOTE 8,'DSORG INVALID'\n         AGO   .BLKSIZE\n.PO      ANOP\n         MVC   S99TUPAR(2),=X'0200'    SET PARAMETER\n         AGO   .DODSORG\n.PS      ANOP\n         MVC   S99TUPAR(2),=X'4000'    SET PARAMETER\n         AGO   .DODSORG\n.DA      ANOP\n         MVC   S99TUPAR(2),=X'2000'    SET PARAMETER\n         AGO   .DODSORG\n.DODSORG ANOP\n         MVI   S99TUKEY+1,DALDSORG     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,2            SET LENGTH\n         RCPDINC 8\n.BLKSIZE ANOP\n         AIF   ('&BLKSIZE' EQ '').LRECL\n         SPACE\n***********************************************************************\n**    DCB BLKSIZE TEXT UNIT                                          **\n***********************************************************************\n         MVI   S99TUKEY+1,DALBLKSZ     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,2            SET LENGTH\n         MVC   S99TUPAR(2),=AL2(&BLKSIZE) SET PARAMETER\n         RCPDINC 10\n.LRECL   ANOP\n         AIF   ('&LRECL' EQ '').RECFM\n         SPACE\n***********************************************************************\n**    DCB LRECL TEXT UNIT                                            **\n***********************************************************************\n         MVI   S99TUKEY+1,DALLRECL     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,2            SET LENGTH\n         MVC   S99TUPAR(2),=AL2(&LRECL) SET PARAMETER\n         RCPDINC 10\n.RECFM   ANOP\n         AIF   ('&RECFM' EQ '').KEYLEN\n         SPACE\n***********************************************************************\n**    DCB RECFM TEXT UNIT                                            **\n***********************************************************************\n         AIF   ('&RECFM' EQ 'F').RF\n         AIF   ('&RECFM' EQ 'FA').RFA\n         AIF   ('&RECFM' EQ 'FM').RFM\n         AIF   ('&RECFM' EQ 'FB').RFB\n         AIF   ('&RECFM' EQ 'FBM').RFBM\n         AIF   ('&RECFM' EQ 'FBA').RFBA\n         AIF   ('&RECFM' EQ 'V').RV\n         AIF   ('&RECFM' EQ 'VA').RVA\n         AIF   ('&RECFM' EQ 'VM').RVM\n         AIF   ('&RECFM' EQ 'VB').RVB\n         AIF   ('&RECFM' EQ 'VBM').RVBM\n         AIF   ('&RECFM' EQ 'VBA').RVBA\n         AIF   ('&RECFM' EQ 'U').RU\n         MNOTE 8,'INVALID RECFM'\n         AGO   .KEYLEN\n.RF      ANOP\n         MVI   S99TUPAR,X'80'\n         AGO   .DORECFM\n.RFA     ANOP\n         MVI   S99TUPAR,X'84'\n         AGO   .DORECFM\n.RFM     ANOP\n         MVI   S99TUPAR,X'82'\n         AGO   .DORECFM\n.RFB     ANOP\n         MVI   S99TUPAR,X'90'\n         AGO   .DORECFM\n.RFBA    ANOP\n         MVI   S99TUPAR,X'94'\n         AGO   .DORECFM\n.RFBM    ANOP\n         MVI   S99TUPAR,X'92'\n         AGO   .DORECFM\n.RFBS    ANOP\n         MVI   S99TUPAR,X'9A'\n         AGO   .DORECFM\n.RV      ANOP\n         MVI   S99TUPAR,X'40'\n         AGO   .DORECFM\n.RVA     ANOP\n         MVI   S99TUPAR,X'44'\n         AGO   .DORECFM\n.RVM     ANOP\n         MVI   S99TUPAR,X'42'\n         AGO   .DORECFM\n.RVB     ANOP\n         MVI   S99TUPAR,X'50'\n         AGO   .DORECFM\n.RVBA    ANOP\n         MVI   S99TUPAR,X'54'\n         AGO   .DORECFM\n.RVBM    ANOP\n         MVI   S99TUPAR,X'52'\n         AGO   .DORECFM\n.RVBS    ANOP\n         MVI   S99TUPAR,X'5A'\n         AGO   .DORECFM\n.RU      ANOP\n         MVI   S99TUPAR,X'C0'\n         AGO   .DORECFM\n.DORECFM ANOP\n         MVI   S99TUKEY+1,DALRECFM     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,1            SET LENGTH\n         RCPDINC 8\n.KEYLEN  ANOP\n         AIF   ('&KEYLEN' EQ '').EXIT\n         SPACE\n***********************************************************************\n**    DCB KEYLEN TEXT UNIT                                           **\n***********************************************************************\n         MVI   S99TUKEY+1,DALKYLEN     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,1            SET LENGTH\n         MVI   S99TUPAR,AL1(&KEYLEN)   SET PARAMETER\n         RCPDINC 8\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDDN": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDDN &DDN\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DALDDNAM,1,&DDN\n         MEXIT\n.BTU     RCPTUBFR DALDDNAM,14,&DDN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDDNRT": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDDNRT\n         SPACE 1\n***********************************************************************\n**    DDNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,8            SET LENGTH FIELD\n         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDEBUG": {"ttr": 1555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x13\\x00\\x13\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDEBUG &ON\n         GBLA  &RCPBGN#,&RCPSWS(10)\n         GBLB  &RCPDBUG\n         GBLC  &RCPPRE,&RCPWKDS,&RCPWKCS\n         AIF   ('&ON' EQ '').TSW\n&RCPDBUG SETB 1\n.TSW     AIF   (&RCPDBUG).DEBUG\n         MEXIT\n.DEBUG   MNOTE *,'RCPBGN# IS &RCPBGN#'\n         MNOTE *,'RCPSWS(1) IS &RCPSWS(1)'\n         MNOTE *,'RCPSWS(2) IS &RCPSWS(2)'\n         MNOTE *,'RCPSWS(3) IS &RCPSWS(3)'\n         MNOTE *,'RCPSWS(4) IS &RCPSWS(4)'\n         MNOTE *,'RCPSWS(5) IS &RCPSWS(5)'\n         MNOTE *,'RCPWKCS IS ''&RCPWKCS'''\n         MNOTE *,'RCPWKDS IS ''&RCPWKDS'''\n         MNOTE *,'RCPPRE IS ''&RCPPRE'''\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDEFER": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\t\\x00\\t\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDEFER\n         SPACE\n***********************************************************************\n**     DEFER VOLUME MOUNT TEXT ATTRIBUTE UNIT                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALDEFER     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDFPL": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00,\\x00,\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDFPL\n         GBLC  &RCPPRE\n         GBLB  &RCPDFPL(2)\n         GBLB  &RCPDFPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPDFPL(2)).BYPDFPL\n&RCPDFPL(2) SETB 1\n         IKJDFPL\nL#DFPL   EQU   *-DFPL                  LENGTH OF DEFAULT PARAM LIST\n         IKJDFPB\nL#DFPB   EQU   *-DFPB                  LENGTH OF DEFAULT PARAM BLOCK\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPDFPL RCPDS\n&P.DFPL  DS    CL(L#DFPL)              RESERVE SPACE FOR DFPL\n&P.DFPB  DS    CL(L#DFPB)              RESERVE SPACE FOR DFPB\n&P.DSNB  DS    CL48                    RESERVE SPACE FOR DSNAME BUFFER\n         RCPDS\n         EJECT\n***********************************************************************\n***   THIS CODE GENERATES AN DEFAULT SERVICE ROUTINE PARAMETER LIST ***\n***       AND PARAMETER BLOCK                                       ***\n***********************************************************************\n         LA    R1,&P.DFPL              LOAD DFPL ADDRESS\n         USING DFPL,R1                 DFPL ADDRESSABLE\n         MVC   DFPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   DFPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,DFPLECB             AND STORE IN DFPL\n         LA    R15,&P.DFPB             LOAD DFBP ADDRESS\n         ST    R15,DFPLDFPB             AND STORE IT IN DFPB\n         DROP  R1\n         USING DFPB,R15                ADDRESS DFPB DSECT\n         XC    DFPB(L#DFPB),DFPB       CLEAR DEFAULT PARAMETER BLOCK\n         MVC   DFPBPSCB,CPPLPSCB       MOVE IN ADDRESS OF PSCB\n         LA    R1,&P.DSNB              LOAD DSNAME BUFFER ADDRESS\n         ST    R1,DFPBDSN               AND STORE IT INTO DFPB\n         MVI   DFPBCODE,DFPB04          SET ENTRY CODE\n         DROP  R15                     DFPB NO LONGER ADDRESSABLE\n         EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDINC": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\r\\x00\\r\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDINC &L1\n         GBLA  &DTUO,&DTUPO\n         GBLC  &DYNP\n         AIF   ('&L1' EQ '').T2\n         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT\n&DTUPO   SETA  &DTUPO+4\n&DTUO    SETA  &DTUO+&L1\n         MEXIT\n.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDISP": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x005\\x005\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDISP &DISP\n         LCLA  &I\n         LCLB  &B(4)\n         AIF   ('&DISP(1)' EQ '').TD2\n         SPACE\n***********************************************************************\n**     DATA SET INITIAL STATUS                                       **\n***********************************************************************\n&B(1)    SETB  ('&DISP(1)' EQ 'SHR')\n&B(2)    SETB  ('&DISP(1)' EQ 'NEW')\n&B(3)    SETB  ('&DISP(1)' EQ 'MOD')\n&B(4)    SETB  ('&DISP(1)' EQ 'OLD')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1\n         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'\n&B(1)    SETB  1\n.OK1     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')\n         RCPDINC 8\n.TD2     AIF   ('&DISP(2)' EQ '').TD3\n         SPACE\n***********************************************************************\n**    DATA SET NORMAL DISPOSITION                                    **\n***********************************************************************\n&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2\n         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'\n&B(1)    SETB  1\n.OK2     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.TD3     AIF   ('&DISP(3)' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   DATASET CONDITIONAL DISPOSITION                                 **\n***********************************************************************\n&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDS": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDS\n         GBLB  &RCPDSBR\n         GBLC  &RCPWKDS,&RCPWKCS,&RCPDS\n         AIF   ('&RCPDS' NE '').RESUME\n&RCPDS   SETC  '&SYSECT'\n         AIF   ('&RCPWKDS' EQ '').CSECT\n&RCPWKDS DSECT                         ENTER WORKAREA DSECT\n         MEXIT\n.CSECT   AIF   ('&RCPWKCS' EQ '').BRANCH\n&RCPWKCS CSECT                         ENTER WORKAREA CSECT\n         MEXIT\n.RESUME  AIF   (&RCPDSBR).BRTO\n&RCPDS   CSECT                         RESUME PROGRAM CSECT\n&RCPDS   SETC  ''\n         MEXIT\n.BRANCH  ANOP\n&RCPDS   SETC  'RCP&SYSNDX'\n&RCPDSBR SETB  1\n         B     &RCPDS                  BRANCH AROUND CONSTANTS\n         MEXIT\n.BRTO    ANOP\n&RCPDS   DS    0H\n&RCPDSBR SETB  0\n&RCPDS   SETC  ''\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSECT": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&NAME    RCPDSECT &LTORG=YES\n         AIF   ('&LTORG' NE 'YES').RCPDS\n***********************************************************************\n****                  LITERALS                                     ****\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n.RCPDS   RCPDS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSN": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00D\\x00D\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE DSNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         AIF   ('&DSN'  EQ '*').TERM\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 52\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.TERM    MVI   S99TUKEY+1,DALTERM\n         RCPDINC 4\n         MEXIT\n.BD      RCPTUBFR DALDSNAM,52,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DALDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   BUILD THE MEMBER NAME TEXT UNIT                                 **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DALMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DALMEMBR,1,&MEMBER\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSNPD": {"ttr": 1807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\t\\x00\\t\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDSNPD &PDE\n         AIF   ('&PDE'(1,1) EQ '(').RPDE\n         RCPDSN &PDE,8+&PDE\n         RCPPSWD 16+&PDE\n         MEXIT\n.RPDE    RCPDSN &PDE,8&PDE\n         RCPPSWD 16(&PDE)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSNRT": {"ttr": 1809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDSNRT\n         SPACE\n***********************************************************************\n**    DSNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDSN     SET RETURN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,44           SET LENGTH FIELD\n         RCPDINC 52\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDSRGR": {"ttr": 1811, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDSRGR\n         SPACE\n***********************************************************************\n**    DSORG RETURN TEXT UNIT                                         **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTORG     SET RETURN DSORG KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,2            SET LENGTH FIELD\n         XC    S99TUPAR(2),S99TUPAR    INITIALIZE FIELD TO ZERO\n         RCPDINC 8\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPDUMMY": {"ttr": 1813, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\t\\x00\\t\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPDUMMY &DUMMY\n         SPACE\n***********************************************************************\n**      DUMMY DATASET TEXT UNIT                                      **\n***********************************************************************\n         MVI   S99TUPAR+1,DALDUMMY     MOVE IN DUMMY DS TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPENDD": {"ttr": 1815, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00%\\x00%\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n&NAME    RCPENDD\n         GBLB  &RCPECT(2),&RCPUPT(2),&RCPPSCB(2),&RCPS99(2)\n         GBLC  &RCPPRE,&RCPWKDS,&RCPDS\n         LCLC  &P,&CS\n&CS      SETC  '&RCPDS'                PROGRAM CSECT\n         AIF   (NOT &RCPS99(1)).TDS\n         DYNSPACE\n.TDS     AIF   ('&RCPWKDS' EQ '').RCPDS\n         DS    0D                      ALIGN TO DOUBLEWORD\n&P       SETC  '&RCPPRE'\n&P.WKLEN EQU   *-&RCPWKDS              LENGTH OF WORK AREA\n.RCPDS   RCPDS\n         EJECT\n         AIF   (NOT &RCPECT(1) OR &RCPECT(2)).TRYUPT\n         IKJECT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPECT(2)     SETB           1\n.TRYUPT  AIF   (NOT &RCPUPT(1) OR &RCPUPT(2)).TRYPSCB\n         IKJUPT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPUPT(2) SETB  1\n.TRYPSCB AIF   (NOT &RCPPSCB(1) OR &RCPPSCB(2)).TRYS99\n         IKJPSCB\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPPSCB(2) SETB  1\n.TRYS99  AIF   (NOT &RCPS99(1) OR &RCPS99(2)).TRYREST\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPS99(2) SETB  1\n.TRYREST MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFDDN": {"ttr": 1817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPFDDN &DDN\n         GBLC &DYNP\n         SPACE\n***********************************************************************\n**        FREE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').B\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DUNDDNAM,1,&DDN\n         MEXIT\n.B       RCPTUBFR DUNDDNAM,14,&DDN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFDISP": {"ttr": 1819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"#\\x00\\x14\\x00\\x14\\x00\\x00\\xc4\\xe8\\xd5\\xc1\\xd3\\xd3\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:23:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "DYNALLC"}, "text": "         MACRO\n         RCPFDISP &DISP\n         LCLB  &B(4)\n         LCLA  &I\n         SPACE\n***********************************************************************\n**       OVERRIDING DISPOSITION                                      **\n***********************************************************************\n&B(1)    SETB  ('&DISP' EQ 'KEEP')\n&B(2)    SETB  ('&DISP' EQ 'DELETE')\n&B(3)    SETB  ('&DISP' EQ 'CATLG')\n&B(4)    SETB  ('&DISP' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP IS INVALID, DISP=KEEP USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DUNOVDSP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFDSN": {"ttr": 1821, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**      FREE DATA SET TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DUNDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 52\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.BD      RCPTUBFR DUNDSNAM,52,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DUNDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**       FREE MEMBER NAME TEXT UNIT                                  **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DUNMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DUNMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DUNMEMBR,1,&MEMBER\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFHOLD": {"ttr": 1823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFHOLD &H\n         AIF   ('&H' EQ 'YES').YES\n         AIF   ('&H' EQ 'NO').NO\n         MNOTE 4,'HOLD PARMETER VALUE INCORRECT - IGNORED'\n         MEXIT\n.YES     ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT HOLD TEXT UNIT                             **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEXIT\n.NO      ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT NO HOLD TEXT UNIT                          **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFORUS": {"ttr": 2049, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - TO SET UP SVC 99 TEXT UNIT 'FOR USER'\n         RCPFORUS &T\n         SPACE 1\n***********************************************************************\n**       'FOR USER' TEXT UNIT                                        **\n***********************************************************************\n         RCPVCHAR 0,8,&T,N=DALUSRID\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPFREE": {"ttr": 2051, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPFREE &FREE\n         SPACE\n***********************************************************************\n**      UNALLOC AT CLOSE TEXT UNIT                                   **\n***********************************************************************\n         MVI   S99TUPAR+1,DALCLOSE     MOVE IN CLOSE TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPIOPL": {"ttr": 2053, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPIOPL\n         GBLC  &RCPPRE\n         GBLB  &RCPIOPL(2)\n         GBLB  &RCPSTPB(2),&RCPPTPB(2),&RCPPGPB(2),&RCPGTPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPIOPL(2)).BYPIOPL\n&RCPIOPL(2) SETB 1\n         IKJIOPL\nL#IOPL   EQU   *-IOPL                  LENGTH OF IO PARAM LIST\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPIOPL RCPDS\n&P.IOPL  DS    CL(L#IOPL)              RESERVE SPACE FOR IOPL\n         RCPDS\n         SPACE 5\n***********************************************************************\n***   THIS CODE GENERATES AN I/O SERVICE ROUTINE PARAMETER LIST     ***\n***********************************************************************\n         LA    R1,&P.IOPL              LOAD IOPL ADDRESS\n         USING IOPL,R1                 IOPL ADDRESSABLE\n         MVC   IOPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   IOPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,IOPLECB             AND STORE IN IOPL\n         DROP  R1\n  AIF (&RCPSTPB(1) OR &RCPGTPB(1) OR &RCPPGPB(1) OR &RCPPTPB(1)).I\n         MEXIT\n.I       EJECT\n         AIF   (NOT &RCPSTPB(1) OR &RCPSTPB(2)).TPT\n         IKJSTPB\n&RCPSTPB(2) SETB 1\nL#STPB   EQU   *-STPB         LENGTH OF STPB\n&SYSECT  CSECT\n.TPT     AIF   (NOT &RCPPTPB(1) OR &RCPPTPB(2)).TGT\n         IKJPTPB\n&RCPPTPB(2) SETB 1\nL#PTPB   EQU   *-PTPB         LENGTH OF PTPB\n&SYSECT  CSECT\n.TGT     AIF   (NOT &RCPGTPB(1) OR &RCPGTPB(2)).TPG\n         IKJGTPB\n&RCPGTPB(2) SETB 1\nL#GTPB   EQU   *-GTPB         LENGTH OF GTPB\n&SYSECT  CSECT\n.TPG     AIF   (NOT &RCPPGPB(1) OR &RCPPGPB(2)).STO\n         IKJPGPB\n&RCPPGPB(2) SETB 1\nL#PGPB   EQU   *-PGPB         LENGTH OF PGPB\n&SYSECT  CSECT\n.STO     SPACE 3\n&L       SETC  ''\n         RCPDS\n         AIF   (NOT &RCPSTPB(1)).XPT\n&P.STPB  DS    CL(L#STPB)              RESERVE SPACE FOR STPB\n&L       SETC  '&L.+L#STPB'\n.XPT     AIF   (NOT &RCPPTPB(1)).XGT\n&P.PTPB  DS    CL(L#PTPB)              RESERVE SPACE FOR PTPB\n&L       SETC  '&L.+L#PTPB'\n.XGT     AIF   (NOT &RCPGTPB(1)).XPG\n&P.GTPB  DS    CL(L#GTPB)              RESERVE SPACE FOR GTPB\n&L       SETC  '&L.+L#GTPB'\n.XPG     AIF   (NOT &RCPPGPB(1)).XC\n&P.PGPB  DS    CL(L#PGPB)              RESERVE SPACE FOR PGPB\n&L       SETC  '&L.+L#PGPB'\n.XC      RCPDS\n&L1      SETC  '&L'(2,K'&L-1)\n&L       SETC  '&P'.'&L1'(3,4)\n         XC    &L.(&L1.),&L            CLEAR IOPB AREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLINK": {"ttr": 2055, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPLINK &MODULE\n         LCLC  &OFFSET,&C\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&OFFSET  SETC  '736'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&OFFSET  SETC  '444'\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&OFFSET  SETC  '348'\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&OFFSET  SETC  '464'\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&OFFSET  SETC  '472'\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LINK USED'\n*\n         AGO   .LINK\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R15,&OFFSET.(R15)       LOAD MODULE ADDRESS\n         LTR   R15,R15                 IS MODULE ADDRESS THERE?\n&C       SETC  'RCP&SYSNDX'\n         BNM   &C.L                     IF NOT, BRANCH TO LINK\n         BALR  R14,R15                  ELSE BALR TO IT\n         B     &C.B                      AND BYPASS LINK\n&C.L     LINK  EP=&MODULE\n&C.B     DS    0H                      BRANCHED TO IF LINK BYPASSED\n         MEXIT\n.LINK    ANOP\n&NAME    LINK  EP=&MODULE\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOAD": {"ttr": 2057, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPLOAD &MOD,&EP1\n         GBLC  &RCPPTEP,&RCPGTEP,&RCPPGEP\n         GBLC  &RCPDFEP,&RCPSTEP,&RCPPREP\n         GBLC  &RCPPRE\n         LCLA  &I,&J\n         LCLB  &EPXISTS\n         LCLC  &OFFSET,&C,&EP,&MODULE\n&EP      SETC  '&EP1'\n&MODULE  SETC  '&MOD'\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE'(K'&MOD,1) NE ')').NOBR\n&I       SETA  K'&MOD\n.LOOP    ANOP\n&I       SETA  &I-1\n         AIF   (&I LT 2).NOLB\n         AIF   ('&MOD'(&I,1) NE '(').LOOP\n&MODULE  SETC  '&MOD'(1,&I-1)\n&J       SETA  K'&MOD-1-&I\n&EP      SETC  '&MOD'(&I+1,&J)\n         RCPDS\n&EP      DS    F                       TO STORE MODULE ADDRESS\n         RCPDS\n.NOBR    ANOP\n&EPXISTS  SETB  ('&EP' NE '')\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n&RCPPREP SETC '&EP'\n         AIF   (&EPXISTS).START\n         RCPDS\n&RCPPREP SETC '&RCPPRE.PREP'\n&EP      SETC  '&RCPPREP'\n&RCPPREP DS    F                       TO HOLD ADDRESS OF IKJPARS\n         RCPDS\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&RCPDFEP SETC  '&EP'\n&OFFSET  SETC  '736'\n         AIF   (&EPXISTS).START\n&RCPDFEP SETC  '&RCPPRE.DFEP'\n         RCPDS\n&RCPDFEP DS    F                       ADDR OF DEFAULT SERVICE ROUTINE\n         RCPDS\n&EP      SETC  '&RCPDFEP'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&RCPPTEP SETC  '&EP'\n&OFFSET  SETC  '444'\n         AIF   (&EPXISTS).START\n&RCPPTEP SETC  '&RCPPRE.PTEP'\n&EP      SETC  '&RCPPTEP'\n         RCPDS\n&RCPPTEP DS    F                       ADDR OF PUTLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&RCPGTEP SETC  '&EP'\n&OFFSET  SETC  '348'\n         AIF   (&EPXISTS).START\n&RCPGTEP SETC  '&RCPPRE.GTEP'\n&EP      SETC  '&RCPGTEP'\n         RCPDS\n&RCPGTEP DS    F                       ADDR OF GETLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&RCPPGEP SETC  '&EP'\n&OFFSET  SETC  '464'\n         AIF   (&EPXISTS).START\n&RCPPGEP SETC  '&RCPPRE.PGEP'\n&EP      SETC  '&RCPPGEP'\n         RCPDS\n&RCPPGEP DS    F                       ADDR OF PUTGET ROUTINE\n         RCPDS\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&RCPSTEP SETC  '&EP'\n&OFFSET  SETC  '472'\n         AIF   (&EPXISTS).START\n&RCPSTEP SETC  '&RCPPRE.STEP'\n&EP      SETC  '&RCPSTEP'\n         RCPDS\n&RCPSTEP DS    F                       ADDR OF STACK ROUTINE\n         RCPDS\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LOAD USED'\n*\n         AGO   .LOAD\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R0,&OFFSET.(R15)        LOAD MODULE ADDRESS\n         LTR   R0,R0                   IS MODULE LOADED?\n&C       SETC  'RCP&SYSNDX'\n         BM    &C                      IF SO, BYPASS LOAD MACRO\n.LOAD    LOAD EP=&MODULE.\n         AIF   ('&EP' EQ '').EPERR\n&C       ST    R0,&EP                  STORE ENTRY POINT ADDRESS\n         MEXIT\n.EPERR   MNOTE 4,'EP RETURN FIELD NOT SPECIFIED'\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEXIT\n.NOLB    MNOTE 4,'INVALID MODULE NAME ''&MOD'''\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOCSW": {"ttr": 2059, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLB  &RCPDSW3(20)   INVERT INDICATOR\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N\n         LCLB  &NOT\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8+8            INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n&NOT     SETB  0\n         AIF   ('&SW2'(1,1) NE '\u00ac' AND '&SW2'(1,1) NE '-').TNOT2\n&SW2     SETC  '&SW2'(2,K'&SW2-1)       REMOVE NOT SIGN\n&NOT     SETB  1                       INDICATE INVERT FUNCTION\n         AGO   .LOOP1A                 CONTINUE\n.TNOT2   AIF   (K'&SW2 LT 5).LOOP1A    CHECK LENGTH\n         AIF   ('&SW2'(1,4) NE 'NOT-').LOOP1A  WAS SWITCH INVERTED?\n&SW2     SETC  '&SW2'(5,K'&SW2-4)      STRIP OFF 'NOT-'\n&NOT     SETB  1                       INDICATE INVERTED\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n         AIF   (&RCPDSW3(&K) NE &NOT).SWL1  ENSURE INVERT BIT THE SAME\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NEWSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n&RCPDSW3(&RCPDSW0) SETB (&NOT)         SET INVERT INDICATOR\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&C       SETC  '&RCPGSWB(&I)'\n         AIF   (&L LT K'&C).LOOP2\n         AIF   ('&SW2'(1,K'&C) NE '&C').LOOP2\n&SW1     SETC  '&RCPGSWN(&I)'\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOCS1": {"ttr": 2061, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8              INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NENSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&SW1     SETC  '&RCPGSWN(&I)'\n         AIF   (&L LT K'&SW1).LOOP2\n         AIF   ('&SW1'(1,&L) NE '&SW2').LOOP2\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPLOCS2": {"ttr": 2063, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1                SWITCH BYTE NAME\n         GBLC  &RCPDSW2                SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH BIT\n&J       SETA  &RCPDSW#*8+8            ARRAY POS OF LAST SW BIT\n&I       SETA  8                       ARRAY POS-1 OF 1ST SW BIT\n.LOOP1   AIF   (&I GE &J).TGEN         IF SW NOT FOUND IN 1ST ARRAY,\n.*                                      GO SEARCH GENERIC NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&RCPDSW2').LOOP1  LOOK FOR MATCH\n.*\n.*       OK, WE'VE FOUND A MATCH.\n.*\n&I       SETA  (&I-1)/8               GET POS OF SWITCH BYTE\n&RCPDSW1 SETC  '&RCPDSWN(&I)'         MOVE IT TO EXIT PARM VAR\n&I       SETA  &I*8+1                 POINT TO 1ST SW BIT IN IT\n&J       SETA  &I+8                   POINT TO LAST SW BIT IN IT\n&M       SETA  N'&SW                  GET NO OF SWITCHES\n&L       SETA  1\n.*\n.*       NOW WE PROCESS SUBSEQUENT SWITCHES IN THE LIST\n.*\n.LOOP2   AIF   (&L GE &M).EXIT        EXIT WHEN FINISHED\n&L       SETA  &L+1                   POINT TO NEXT SW IN LIST\n&C       SETC  '&SW(&L)'               EXTRACT IT\n&RCPDSW2 SETC  '&RCPDSW2.+&C'           THEN APPEND TO PREVIOUS\n.*\n.*       NOW WE CHECK THAT THE SWITCH IS DECLARED IN THE SAME\n.*       BYTE AS THE FIRST.\n.*\n&N       SETA  &I-1                     POINT TO 1ST BIT POS MINUS 1\n.LOOP3   AIF   (&N GE &J).NM            IF SW NOT FOUND, ISSUE MNOTE\n&N       SETA  &N+1                     POINT TO NEXT\n         AIF   ('&C' NE '&RCPDSWB(&N)').LOOP3  SEARCH FOR MATCH\n         AGO   .LOOP2                   IF FOUND, GO PROCESS NEXT\n.NM      MNOTE 4,'WARNING: SWITCH ''&C'' NOT DECLARED IN SAME BYTE AS  X\n               SWITCH ''&SW(1)'' - LOGIC ERROR MAY OCCUR'\n         AGO   .LOOP2            CONTINUE FOR NEXT SWITCH BIT\n.*\n.*       IF THE SWITCH WAS NOT LOCATED IN THE EXPLICIT NAME ARRAY,\n.*       THE GENERIC NAME ARRAY IS SEARCHED.\n.*\n.TGEN    ANOP\n&I       SETA  0\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH\n&L       SETA  K'&RCPDSW2              GET LENGTH OF 1ST SW\n.LOOP4   AIF   (&I GE &RCPGSW#).ERROR  IF NOT SW NOT DECLARED, ERROR\n&I       SETA  &I+1\n&C       SETC  '&RCPGSWB(&I)'          GET GENERIC PREFIX\n&K       SETA  K'&C                    GET LENGTH OF GENERIC PREFIX\n         AIF   (&L LT &K).LOOP4         AND SKIP IF LEN OF SWITCH NAME\n.*                                          < LEN OF GENERIC PREFIX\n         AIF   ('&RCPDSW2'(1,&K) NE '&C').LOOP4  ALSO SKIP IF NO MATCH\n&RCPDSW1 SETC  '&RCPGSWN(&I)'          SAVE SWITCH BYTE NAME\n&I       SETA   1\n&J       SETA   N'&SW\n.LOOP5   AIF   (&I GE &J).EXIT         EXIT WHEN FINISHED\n&I       SETA   &I+1\n&RCPDSW2 SETC   '&RCPDSW2.+&SW(&I)'     APPEND THIS SWITCH\n         AIF    ('&SW(&I)    '(1,&K) EQ '&C').LOOP5 CHECK PREFIX\n         MNOTE 4,'WARNING: SWITCH ''&SW(&I)'' NOT GENERICALLY EQUAL TO X\n               SWITCH ''&SW(1)'''\n         AGO   .LOOP5\n.ERROR   MNOTE 8,'SWITCH ''&SW(1)'' NOT DECLARED'\n&RCPDSW1 SETC  ''             INDICATE ERROR\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPMCA": {"ttr": 2065, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPMCA &DSECT=YES\n         GBLC  &RCPPRE\n         GBLA  &RCPSWS(10)\n         LCLC  &P\n     RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPSWS(2) NE 2).DSECT\n&P.MCA   DS    0F                      MODULE COMMUNICATIONS AREA\n         AGO   .MCA2\n.DSECT   ANOP\n&P.MCA   DSECT                         MODULE COMMUNICATIONS AREA\n.MCA2    ANOP\n&P.XDS   DS    F                       ADDR OF EXTERNAL DUMMY SECTION\n         AIF   (&RCPSWS(3) LT 1).EXIT\n&P.A#GET DS    F                       ADDRESS OF LIFO GET ROUTINE\n&P.A#FRE DS    F                       ADDRESS OF LIFO FREE ROUTINE\n&P.#S    DS    F                       ADDRESS OF CURRENT LIFO STACK\n&P.#E    DS    F                       ADDRESS OF END OF LIFO STACK\n&P.#N    DS    F                       ADDRESS OF NEXT FREE AREA\n&P.#C    DS    F                       ADDRESS OF NEXT LIFO STACK\n&P.#L    DS    F                       LENGTH OF CURRENT LIFO STACK\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPMCLAS": {"ttr": 2067, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPMCLAS &MCLAS\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE MGMTCLAS TEXT UNIT                                    **\n***********************************************************************\n.MCLAS   RCPTUBFX DALMGCL,14,&MCLAS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPMSVGP": {"ttr": 2306, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPMSVGP &MSVGP\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE MSVGP TEXT UNIT                                       **\n***********************************************************************\n         AIF   ('&MSVGP'(K'&MSVGP,1) EQ '/').BTU\n         AIF   ('&MSVGP'(1,1) EQ '''').Q\n         RCPSR2\n         AIF   ('&MSVGP'(1,1) EQ '(').R\n         L     R14,&MSVGP              LOAD ADDRESS OF MSVGP\n         LH    R2,&MSVGP+4             LOAD LENGTH OF MSVGP\n         AGO   .STH\n.R       L     R14,0&MSVGP             LOAD ADDRESS OF MSVGP\n         LH    R2,4&MSVGP              LOAD LENGTH OF MSVGP\n.STH     STH   R2,S99TULNG             STORE MSVGP LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE MSVGP\n         MVI   S99TUKEY+1,DALMSVGP     MOVE IN MSVGP KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DALMSVGP,1,&MSVGP\n         MEXIT\n.BTU     RCPTUBFR DALMSVGP,14,&MSVGP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPNTU": {"ttr": 2308, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPNTU &KEY,&LEN,&PAR\n.*\n.*     THIS IS AN ALLOC/FREE MACRO TEXT UNIT PROCESSOR SUBROUTINE\n.*     MACRO. IT BUILDS NUMERIC TYPE TEXT UNITS.\n.*\n         LCLA  &L,&R\n         LCLC  &C\n         GBLC  &RCPTYPE\n.*  ALLOC/FREE INNER MACRO TO SET UP NUMERIC TEXT UNITS\n&L       SETA  1                       DEFAULT LENGTH\n         AIF   ('&LEN' EQ '').NL\n&L       SETA  &LEN\n.NL      MVI   S99TUKEY+1,&KEY         SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           SET LENGTH FIELD\n         AIF   ('&PAR'(1,1) EQ '(').REG\n         RCPTYPE &PAR                  ANALYSE PARAMETER\n         AIF   ('&RCPTYPE' EQ 'N').NUMERIC\n&R       SETA  4-&L\n         MVC   S99TUPAR(&L),&R+&PAR    MOVE IN QUANTITY\n         RCPDINC 10\n         MEXIT\n.NUMERIC AIF   (&L EQ 1).NL1\n         MVC   S99TUPAR(&L.),=AL&L.(&PAR) MOVE IN QUANTITY\n&R       SETA  &L+6\n         AIF   (&R/2 EQ (&R+1)/2).LOK ENSURE LENGTH EVEN\n&R       SETA  &R+1\n.LOK     RCPDINC &R\n         MEXIT\n.NL1     MVI   S99TUPAR,&PAR           MOVE IN QUANTITY\n         RCPDINC 8\n         MEXIT\n.REG     ANOP\n&C       SETC  '&PAR'(2,K'&PAR-2)\n         AIF   (&L EQ 3).STCM\n         AIF   (&L EQ 2).STH\n         AIF   (&L EQ 1).STC\n         ST    &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STH     STH   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STC     STC   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STCM    STCM  &C,7,S99TUPAR           STORE TEXT UNIT QUANTITY\n.RCPDINC RCPDINC 10\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPERM": {"ttr": 2310, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPPERM\n         SPACE\n***********************************************************************\n**     PERMANENTLY ALLOCATED ATTRIBUTE TEXT UNIT                     **\n***********************************************************************\n         MVI   S99TUKEY+1,DALPERMA     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPPL": {"ttr": 2312, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    RCPPPL &PCL=,&NOPARM=,&PARSERR=,&PDLREG=R11,                  X\n               &PDLNAME=,&PARSEP=,&PARSWKA=\n         GBLB  &RCPPPL(2),&RCPECT(2)\n         GBLC  &RCPPRE,&RCPPREP\n         LCLC  &P\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPPPL(2)).BPPL\n         EJECT\n         IKJPPL\nL#PPL    EQU   *-PPL                   LENGTH OF PPL\n&SYSECT  CSECT\n         SPACE 1\n&RCPPPL(2) SETB 1\n.BPPL    RCPDS\n&P.PPL   DS    CL(L#PPL)               RESERVE SPACE FOR PPL\n&P.PDLP  DS    F                       POINTER TO PDL\n         RCPDS\n         SPACE 6\n***********************************************************************\n***   THIS CODE GENERATES A PARSE PARAMETER LIST                    ***\n***********************************************************************\n         XC    &P.PDLP,&P.PDLP         ZERO PDL POINTER\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' NE '').PB2\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1                  ECT ADDRESSABLE\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)              NO, BRANCH OUT\n         SPACE\n.PB2     LA    R1,&P.PPL               LOAD PPL ADDRESS\n         USING PPL,R1\n         MVC   PPLUPT,CPPLUPT          MOVE IN UPT ADDRESS\n         MVC   PPLECT,CPPLECT          MOVE IN ECT ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE IN CBUF ADDRESS\n         LA    R15,&P.ECB              LOAD ATTN ECB ADDRESS\n         ST    R15,PPLECB              AND STORE IN PPL\n         LA    R15,&P.PDLP             LOAD PDL POINTER ADDRESS\n         ST    R15,PPLANS               AND STORE IN PPL\n         AIF   ('&PARSWKA' EQ '').PB3\n         AIF   ('&PARSWKA'(1,1) EQ '').PB4\n         LA    R15,&PARSWKA            LOAD ADDRESS OF WORK AREA\n         ST    R15,PPLUWA               AND STORE IN PPL\n         AGO   .PB3\n.PB4     ST    &PARSWKA(1),PPLUWA      STORE ADDRESS OF WORKAREA\n.PB3     AIF   ('&PCL' EQ '').EXIT\n         L     R15,=V(&PCL)            LOAD PCL ADDRESS\n         ST    R15,PPLPCL              AND STORE IN PPL\n         SPACE 2\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' EQ '').PB5\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)               NO, BRANCH OUT\n         SPACE\n.PB5     AIF   ('&SYSPARM' EQ 'MVT').MVTBYP\n         AIF   ('&RCPPREP' EQ '').NOPREP\n         L     R15,&RCPPREP            LOAD EP OF IKJPARS\n         BALR  R14,R15                  AND ENTER IT\n         AGO   .PRET\n.NOPREP  ANOP\n         L     R15,16                  LOAD CVT ADDRESS\n         TM    524(R15),X'80'          IS IKJPARS LOADED?\n         AIF   ('&PARSEP' EQ '').PBL1\n         BZ    &P.LOAD                  NO, BRANCH TO LOAD SVC\n         L     R15,524(15)             LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE ITS ADDRESS\n         BALR  R14,R15                 THEN BALR TO IT\n         B     &P.PLNKB                BYPASS LOAD SVC\n&P.LOAD  LOAD  EP=IKJPARS\n         LR    R15,R0                  LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE IT\n         BALR  R14,R15                 THEN BALR TO IT\n&P.PLNKB DS    0H\n         AGO   .PRET\n.PBL1    BZ    &P.PLINK                 NO, BRANCH TO LINK SVC\n         L     R15,524(R15)            ELSE LOAD ITS ADDRESS\n         BALR  R14,R15                  AND BALR TO IT\n         B     &P.PLNKB                BYPASS LINK SVC\n.MVTBYP  ANOP\n&P.PLINK LINK  EP=IKJPARS\n&P.PLNKB DS    0H\n.PRET    AIF   ('&PARSERR' EQ '').EXIT\n         SPACE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &PARSERR                 AND BRANCH ON NON-ZERO\n         SPACE\n         AIF   ('&PDLREG' EQ '' OR '&PDLNAME' EQ '').EXIT\n         L     &PDLREG,&P.PDLP         LOAD PDL ADDRESS\n         USING &PDLNAME,&PDLREG        PDL DSECT ADDRESSABLE\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPROC": {"ttr": 2314, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPPROC &WKCSECT=,&WKDSECT=,                                  X\n               &REG1=,&REG0=,&ISA=,&SAVEPRE=,                          X\n               &SAVESUF=,&SP=\n         GBLA  &RCPSWS(10)\n         GBLC  &RCPPRE,&RCPWKCS,&RCPWKDS\n         GBLC  &RCPSPN\n         LCLC  &P,&C\n         RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   ('&WKCSECT' EQ '').TDS\n         SPACE\n         MNOTE 4,'WKCSECT= OPTION INVALID WITH PROC OPTION, '\n         MNOTE *,'    WKDSECT=  USED INSTEAD'\n&RCPWKDS SETC  '&WKCSECT'\n         AGO   .SETCS\n.TDS     AIF   ('&WKDSECT' EQ '').SYSECT\n&RCPWKDS SETC  '&WKDSECT'\n         AGO   .SETCS\n.SYSECT  ANOP\n&RCPWKDS SETC  '&SYSECT'\n.SET1    AIF   (K'&RCPWKDS LT 8).LOK\n&RCPWKDS SETC  '&RCPWKDS'(1,4)'&RCPWKDS'(6,3)'1'\n         AGO   .SETCS\n.LOK     ANOP\n&RCPWKDS SETC  '&RCPWKDS.1'\n.SETCS   ANOP\n&RCPWKCS SETC  ''\n&RCPSWS(4) SETA &RCPSWS(2)-1 SET W/A TO BE FREED OPT IF PROC(MAIN)\n         AIF   ('&ISA' EQ '').NISA\n&RCPSWS(3) SETA 1                      SET LIFO FLAG IF ISA SPEC\n.NISA    ANOP\n         SPACE 2\n         RCPDS\n         DS    9D                      SAVE AREA\n&P.RCODE DS    F                       RETURN CODE\n         RCPMCA\n         RCPDS\n         SPACE 2\n         AIF   ('&REG1' EQ '').TR0\n         LR    &REG1,R1                SAVE CONTENTS OF REG 1\n.TR0     AIF   ('&REG0' EQ '').TP\n         LR    &REG0,R0                SAVE CONTENTS OF REG 0\n.TP      AIF   (&RCPSWS(2) EQ 2).PROCMN   PROCMAIN OPTION\n         AIF   (&RCPSWS(3) EQ 1).PL    LIFO OPTION\n         L     R15,0(R13)              R15 -> MODULE COMMUNIC. AREA\n         L     R15,&P.XDS-&P.MCA(R15)  LOAD EXTERNAL DUMMY SECT ADDR\n         AL    R15,&P.QCON             GET OFFSET TO WORK AREA\n         ST    R15,8(R13)              CHAIN SAVE\n         ST    R13,4(R15)               AREAS TOGETHER\n         MVC   0(4,R15),0(R13)         COPY POINTER TO COMM AREA\n         LR    R13,R15                 LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13              ESTABLISH ADDRESSABLITY TO IT\n         MEXIT\n.PL      ANOP\n***********************************************************************\n*        GET WORKAREA FROM LIFO STACK                                 *\n***********************************************************************\n         #GET  LV=&P.WKLEN\n         ST    R1,8(R13)               CHAIN SAVE\n         ST    R13,4(R1)                AREAS TOGETHER\n         MVC   0(4,R1),0(R13)          PROPAGATE MODULE COMM. AREA ADDR\n         LR    R13,R1                  LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13             ESTABLISH ADDRESSABILITY TO IT\n         MEXIT\n.PROCMN  L     R0,&P.CXD               LOAD WORK AREA LENGTH\n         AIF   ('&SYSPARM' EQ 'MVT').MVT\n MNOTE *,'      GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE'\n         GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE\n         AGO   .CONT\n.MVT     AIF   ('&SP' EQ '').NOSP\n         ICM   R0,8,=AL1(&SP)          INSERT SUBPOOL NUMBER\n.NOSP    ANOP\n*        GETMAIN R,LV=(0)              OBTAIN A WORK AREA\n.CONT    ANOP\n&RCPSPN  SETC  '&SP'\n         LR    R15,R13                 SAVE CALLER'S SAVE AREA ADDR\n         LR    R13,R1                  LOAD EXT DUMMY SECTION ADDR\n         AL    R13,&P.QCON              ADD OFFSET TO WORK AREA\n         ST    R13,8(R15)              CHAIN SAVE\n         ST    R15,4(R13)               AREAS TOGETHER\n         USING &RCPWKDS,R13            GET WORKAREA ADDRESSABILITY\n         ST    R1,&P.XDS               STORE DUMMY SECTION ADDR IN     X\n                                         MODULE COMMUNICATIONS AREA\n         LA    R15,&P.MCA              STORE COMMUNICATIONS AREA ADDR\n         ST    R15,0(R13)               IN WORD 1 OF SAVE AREA\n         AIF   (&RCPSWS(3) EQ 0 AND '&ISA' EQ '').EXIT\n&RCPSWS(3) SETA 1                      SET LIFO IN CASE ONLY ISA SPEC\n&C       SETC  '&ISA'\n         AIF   ('&ISA' NE '').TK\n&C       SETC  '8192'\n         AGO   .NK\n.TK      AIF   ('&C'(K'&C,1) NE 'K').NK\n&C       SETC  '&C'(1,K'&C-1)'*1024'\n.NK      EJECT\n***********************************************************************\n**       INITIALIZE MODULE COMMUNICATIONS AREA WITH POINTERS         **\n**       TO LIFO STACK AND LIFO GET/FREE ROUTINES                    **\n***********************************************************************\n         SPACE 1\n         MVC   &P.A#GET,=V(#####GET)   MOVE LIFO GET AND FREE\n         MVC   &P.A#FRE,=V(####FREE)    ROUTINE ADDRESSES TO MCA\n         L     R15,=Q(#####ISA)        COMPUTE LIFO STACK\n         AL    R15,&P.XDS               PSEUDO REGISTER OFFSET\n         ST    R15,&P.#S                 AND INITIALIZE POINTERS\n         ST    R15,&P.#N                  IN MODULE COMMUNICATIONS AREA\n         L     R14,=A(&C)              LOAD SIZE OF INITIAL STACK AREA\n         ST    R14,&P.#L               STORE THIS IN MCA\n         ALR   R15,R14                  THEN COMPUTE STACK END ADDRESS\n         ST    R15,&P.#E                 AND STORE THIS INTO MCA\n         EJECT\n***********************************************************************\n**       LIFO STACK GET/FREE ROUTINES                                **\n***********************************************************************\n         SPACE 1\n#####ISA DXD   CL(&C)                  DEFINE PSEUDO REGISTER FOR ISA\n         SPACE 1\n#####GET CSECT                         LIFO GET ROUTINE\n         USING *,R15\n         USING &P.MCA,R1\n         A     R0,&P.F7                ROUND LENGTH UP TO\n         N     R0,&P.F8                 A MULTIPLE OF 8\n         AL    R0,&P.#N                COMPUTE NEXT FREE LIFO SLOT ADDR\n         CL    R0,&P.#E                COMPARE TO STACK END ADDRESS\n         BH    &P.GA                    AND IF TOO BIG, BRANCH\n         LR    R15,R1                  PRESERVE MCA ADDRESS\n         USING &P.MCA,R15              NEW BASE\n         L     R1,&P.#N                LOAD ADDRESS OF SLOT\n         ST    R0,&P.#N                 AND STORE ADDRESS OF NEXT SLOT\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.GA    EQU   *                       IF CURRENT SLOT TOO SMALL\n*        ABEND 1000,DUMP                ABEND FOR NOW\n         ABEND 1000,DUMP\n         SPACE 2\n####FREE DS    0H                      LIFO FREE ROUTINE\n         ENTRY ####FREE\n         USING *,R15                   BASE ADDRESS\n         USING &P.MCA,R1               MCA ADDRESS\n         CL    R0,&P.#S                CHECK THAT\n         BL    &P.FA                    ADDRESS TO BE\n         CL    R0,&P.#E                  FREED IS WITHIN\n         BH    &P.FA                      BOUND OF CURRENT STACK\n         AL    R0,&P.F7                GET UPPER DOUBLE\n         N     R0,&P.F8                 WORD BOUNDARY\n         ST    R0,&P.#N                  AND UPDATE MCA\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.FA    EQU   *                       IF ADDRESS NOT WITHIN THIS STACK\n*        ABEND 1001,DUMP               ABEND\n         ABEND 1001,DUMP\n         SPACE 2\n&P.F7    DC    F'7'                    CONSTANTS\n&P.F8    DC    F'-8'                    TO ROUND UP TO DOUBLEWORD SIZE\n         DROP  R1,R15                  KILL ADDRESSABILITY\n&SYSECT  CSECT                         RESUME MAIN PROGRAM CSECT\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPPSWD": {"ttr": 2316, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPPSWD &PASSW\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE PASSWORD TEXT UNIT                                    **\n***********************************************************************\n         RCPVCHAR DALPASSW,14,&PASSW\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPQNAME": {"ttr": 2318, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPQNAME &QNAME\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE QNAME TEXT UNIT                                       **\n***********************************************************************\n         RCPVCHAR DALQNAME,14,&QNAME\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPRNGE": {"ttr": 2320, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - BREAK A RANGE PARAMETER INTO TWO\n         RCPRNGE &P\n         GBLC  &RCPRNGE(2)\n         LCLA  &I,&J,&K\n&K       SETA  K'&P\n&RCPRNGE(1) SETC ''\n&RCPRNGE(2) SETC ''\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &K).NR\n         AIF   ('&P'(&I,1) NE '-' AND '&P'(&I,1) NE ':').LOOP\n&RCPRNGE(1) SETC '&P'(1,&I-1)\n&RCPRNGE(2) SETC '&P'(&I+1,&K-&I)\n         MEXIT\n.NR      ANOP\n&RCPRNGE(1) SETC '&P'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSCLAS": {"ttr": 2322, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSCLAS &SCLAS\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE STORCLAS TEXT UNIT                                    **\n***********************************************************************\n.BTU     RCPTUBFX DALSTCL,14,&SCLAS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSPACE": {"ttr": 2324, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSPACE &SPACE\n         GBLA  &RCPSUB#                NO OF SUBLIST ELEMENTS\n         GBLC  &RCPSUBL(100)           SUBLIST ELEMENTS\n.**********************************************************************\n.*    THIS IS AN ALLOC INNER MACRO TO BUILD THE ALLOCATION SPACE\n.*    QUANTITY TEXT UNIT. IT SHOULD BE SPECIFIED AS:-\n.*     SPACE=(TYPE,(PRIMARY,SECONDARY,DIRECTORY),RLSE,CONTIG,ROUND)\n.*   WHERE TYPE IS 'TRK', 'CYL', 'ABSTR' OR A BLOCK QUANTITY\n.*     'CYL' OR 'TRK' SHOULD NOT BE ENTERED IN QUOTES. THE BLOCK\n.*     QUANTITY CAN BE A NUMBER, A REGISTER (IN BRACKETS), OR THE\n.*     NAME OF A FULLWORD CONTAINING THE BLOCK SIZE.\n.**********************************************************************\n         AIF   ('&SPACE(1)' EQ '' OR '&SPACE(1)' EQ 'TRK').TRK\n         AIF   ('&SPACE(1)' EQ 'CYL').CYL\n***********************************************************************\n**        SPACE UNIT IN BLOCKS                                       **\n***********************************************************************\n         RCPNTU DALBLKLN,3,&SPACE(1)  GENERATE BLOCK UNIT TU\n         AGO   .TPRIME        GO TEST PRIME QUANTITY\n.TRK     ANOP  TRACK SPEC REQ OR DEFAULTED\n         SPACE\n***********************************************************************\n**       SPACE QUANTITY IN TRACKS                                    **\n***********************************************************************\n         MVI   S99TUKEY+1,DALTRK       SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TPRIME\n.CYL     ANOP  CYL QUANTITY\n         SPACE 1\n***********************************************************************\n**      SPACE UNIT IN CYLINDERS                                      **\n***********************************************************************\n         MVI   S99TUKEY+1,DALCYL       SET TEXT UNIT KEY\n         RCPDINC 4                     STORE TEXT UNIT ADDR\n.TPRIME  RCPSUBL &SPACE(2)             BREAK UP SUBLIST\n         AIF   (&RCPSUB# EQ 0).TCONTIG\n         AIF   ('&RCPSUBL(1)' EQ '').TSP2\n         SPACE\n***********************************************************************\n**       PRIMARY SPACE QUANTITY                                      **\n***********************************************************************\n         RCPNTU DALPRIME,3,&RCPSUBL(1)\n.TSP2    AIF   (&RCPSUB# LT 2).TCONTIG\n         AIF   ('&RCPSUBL(2)' EQ '').TSP3\n         SPACE\n***********************************************************************\n**       SECONDARY SPACE QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALSECND,3,&RCPSUBL(2)\n.TSP3    AIF   (&RCPSUB# LT 3).TCONTIG\n         AIF   ('&RCPSUBL(3)' EQ '').TCONTIG\n         SPACE\n***********************************************************************\n**       DIRECTORY BLOCK QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALDIR,3,&RCPSUBL(3)\n.TCONTIG AIF  ('&SPACE(3)' EQ 'CONTIG' OR '&SPACE(4)' EQ 'CONTIG').CON\n         AIF   ('&SPACE(3)' EQ 'MXIG' OR '&SPACE(4)' EQ 'MXIG').MXIG\n         AIF   ('&SPACE(3)' EQ 'ALX' OR '&SPACE(4)' EQ 'ALX').ALX\n.TRLSE   AIF   ('&SPACE(3)' EQ 'RLSE' OR '&SPACE(4)' EQ 'RLSE').RLSE\n.TROUND  AIF   ('&SPACE(4)'EQ'ROUND'OR'&SPACE(5)'EQ'ROUND').ROUND\n         MEXIT\n.CON     ANOP\n***********************************************************************\n**      CONTIGUOUS SPACE TEXT UNIT                                   **\n***********************************************************************\n         RCPNTU DALSPFRM,1,8\n         AGO   .TRLSE\n.MXIG    ANOP\n***********************************************************************\n**       MAXIMUM CONTIGUOUS SPACE TEXT UNIT                          **\n***********************************************************************\n         RCPNTU DALSPFRM,1,4\n         AGO   .TRLSE\n.ALX     ANOP\n***********************************************************************\n**       'ALX' SPACE TEXT UNIT                                       **\n***********************************************************************\n         RCPNTU DALSPFRM,1,2\n         AGO   .TRLSE\n.RLSE    ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRLSE      SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TROUND\n.ROUND   ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALROUND     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSPEC": {"ttr": 2326, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - SET UP USER DEFINED TEXT UNIT\n         RCPSPEC &T\n         LCLA  &I,&J\n&I       SETA  1\n&J       SETA  K'&T\n         SPACE\n***********************************************************************\n**       PROCESS SPECIAL TEXT UNITS                                  **\n***********************************************************************\n.LOOP    RCPVCHAR &T(&I),&T(&I+2),&T(&I+3),N=&T(&I+1)\n&I       SETA  &I+4\n         AIF   (&I LE &J).LOOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSR2": {"ttr": 2328, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSR2 &A\n         GBLB  &RCPSR2\n         GBLC  &DYNP\n         LCLC  &C\n.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY\n.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND\n.*    GENERATES MOVE INSTRUCTION FOR EXECUTE\n         AIF   ('&A' NE '').UNSAVE\n         AIF   (&RCPSR2).EXIT\n&RCPSR2  SETB  1\n         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2\n         MEXIT\n.UNSAVE  AIF   (NOT &RCPSR2).EXIT\n         B     *+10                    SKIP NEXT INSTRUCTION\n&C       SETC  '&DYNP.MVC'\n&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE\n         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2\n&RCPSR2  SETB  0\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSSREQ": {"ttr": 2561, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSSREQ\n         SPACE 1\n***********************************************************************\n**       SUBSYSTEM REQUEST TEXT UNIT                                 **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DALSSREQ MOVE IN TEXT UNIT KEY\n         RCPDINC                   4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSUBL": {"ttr": 2563, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - BREAK DOWN A SUBLIST\n         RCPSUBL &L\n         GBLA  &RCPSUB#                NO OF ELEMENTS FOUND\n         GBLC  &RCPSUBL(100)           ELEMENTS\n         LCLA  &I,&J,&K\n&RCPSUB# SETA  0                       INITIALIZE\n         AIF   ('&L' EQ '').EXIT       EXIT IF NULL STRING\n         AIF   ('&L'(1,1) NE '(').NOSUB\n&K       SETA  K'&L-1\n&I       SETA  2\n&J       SETA  1\n.LOOP    ANOP\n&J       SETA  &J+1\n         AIF   (&J  GT &K).LAST\n         AIF   ('&L'(&J,1) NE ',').LOOP\n&RCPSUB# SETA &RCPSUB#+1\n         AIF   (&J EQ &I).NULL\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n&I       SETA  &J+1\n         AGO   .LOOP\n.NULL    ANOP\n&RCPSUBL(&RCPSUB#) SETC ''\n&I       SETA  &J+1\n         AGO   .LOOP\n.LAST    AIF   (&J EQ &I).LASTNUL\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n         AGO   .EXIT\n.LASTNUL ANOP\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC ''\n         AGO   .EXIT\n.NOSUB   ANOP\n&RCPSUBL(1) SETC '&L'\n&RCPSUB# SETA 1\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPSYSOU": {"ttr": 2565, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPSYSOU &CLASS,&COPIES=,&FREE=,&DEST=,&FORMS=,&FCB=,&CHARS=, X\n               &OUTDES=                                     *LBD 11/88*\n         GBLC  &DYNP\n         LCLC  &C\n         AIF   ('&CLASS(1)' EQ '').TPGN\n&C       SETC  '&CLASS(1)'\n         SPACE\n***********************************************************************\n**       SYSOUT CLASS TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&C'(1,1) EQ '''').Q\n         AIF   ('&C'(K'&C,1) EQ '/').BS\n         AIF   ('&C'(1,1) EQ '(').REG\n         L     R14,&C                  LOAD ADDRESS OF SYSOUT CLASS\n         MVC   S99TUPAR(1),0(R14)       AND MOVE IT TO TEXT UNIT\n         AGO   .SKEY\n.REG     MVC   S99TUPAR(1),0&C         MOVE SYSOUT CLASS TO TEXT UNIT\n.SKEY    MVI   S99TUKEY+1,DALSYSOU     SET SYSOUT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            SET LENGTH FIELD\n         RCPDINC 8\n         AGO   .TPGN\n.BS      RCPTUBFR DALSYSOU,14,&C\n         AGO   .TPGN\n.Q       RCPBTU DALSYSOU,1,&C\n.TPGN    AIF   ('&CLASS(2)' EQ '').TCOP\n         SPACE\n***********************************************************************\n**   SYSOUT PROGRAM NAME TEXT UNIT                                   **\n***********************************************************************\n&C       SETC  '&CLASS(2)'\n         RCPVCHAR DALSPGNM,14,&C\n.TCOP    AIF   ('&COPIES' EQ '').TFREE\n         SPACE\n***********************************************************************\n**    SYSOUT COPIES TEXT UNIT                                        **\n***********************************************************************\n         RCPNTU DALCOPYS,1,&COPIES\n.TFREE   AIF   ('&FREE' EQ '').TDEST\n         SPACE\n***********************************************************************\n**     FREE = CLOSE TEXT UNIT                                        **\n***********************************************************************\n         AIF   ('&FREE' EQ 'CLOSE').CLOSEOK\n         MNOTE 4,' **** FREE=&FREE INVALID, FREE=CLOSE USED'\n.CLOSEOK MVI   S99TUKEY+1,DALCLOSE     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n.TDEST   AIF   ('&DEST' EQ '').TFORMS\n         SPACE\n***********************************************************************\n**       SYSOUT DESTINATION TEXT UNIT                                **\n***********************************************************************\n         RCPVCHAR DALSUSER,14,&DEST\n.TFORMS  AIF   ('&FORMS' EQ '').TFCB\n         SPACE\n***********************************************************************\n**     SYSOUT FORMS NUMBER TEXT UNIT                                 **\n***********************************************************************\n         RCPVCHAR DALSFMNO,14,&FORMS\n.TFCB    AIF   ('&FCB' EQ '').TCHARS                        *LBD 11/88*\n         SPACE\n***********************************************************************\n**     SYSOUT FCB NAME TEXT UNIT                                     **\n***********************************************************************\n         RCPVCHAR DALFCBIM,14,&FCB\n.TCHARS  AIF   ('&CHARS' EQ '').TOUTD                       *LBD 11/88*\n         SPACE\n***********************************************************************\n**     SYSOUT CHARS TEXT UNIT                                        **\n***********************************************************************\n         RCPVCHAR DALCHARS,14,&CHARS                        *LBD 11/88*\n         SPACE\n.TOUTD   AIF   ('&OUTDES' EQ '').EXIT                       *LBD 11/88*\n         SPACE\n***********************************************************************\n**     SYSOUT OUTPUT JCL STATEMENT REFERENCE TEXT UNIT               **\n***********************************************************************\n         RCPVCHR2 DALOUTPT,26,&OUTDES                       *LBD 11/88*\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTERM": {"ttr": 2567, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPTERM\n         SPACE\n***********************************************************************\n**      TERM  DATASET TEXT UNIT                                      **\n***********************************************************************\n         MVI   S99TUKEY+1,DALTERM      MOVE IN TERM DS TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTU": {"ttr": 2569, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPTU &TU            TEXT UNIT LIST\n         GBLA  &DTUPO         TEXT UNIT POINTER OFFSET\n         GBLC  &DYNP          ALLOC SYMBOL PREFIX\n         LCLA  &I,&J\n         LCLC  &C\n         SPACE 1\n***********************************************************************\n**       ADD SPECIAL TEXT UNITS                                      **\n***********************************************************************\n&J       SETA  N'&SYSLIST\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &J).EXIT\n         AIF   ('&TU(&I)'(1,1) EQ '(').R\n         LA    R15,&TU(&I)             LOAD TEXT UNIT ADDRESS\n         ST    R15,&DYNP.TUP+&DTUPO     AND STORE IT IN POINTER LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.R       ANOP\n&C       SETC  '&TU(&I)'(2,K'&TU(&I)-2)\n         ST    &C,&DYNP.TUP+&DTUPO     STORE TEXT UNIT ADDR IN PTR LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTUBFR": {"ttr": 2571, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO  - BUILD TEXT UNIT FROM BUFFER\n         RCPTUBFR &KEY,                TEXT UNIT KEY                   X\n               &L,                     MAXIMUM LENGTH VALUE            X\n               &C,                     TEXT UNIT                       X\n               &N=1                    TEXT UNIT NUMBER\n         GBLC  &EXECNAM\n         LCLC  &C1,&C2\n         LCLA  &I,&K\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         AIF   ('&N' EQ '' OR '&N' EQ '1').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER\n.ENDN    ANOP\n&K       SETA  K'&C\n&I       SETA  &K-1\n.LOOP1   ANOP\n&K       SETA  &K-1\n         AIF   (&K LE 0).STD\n         AIF   ('&C'(&K,1) NE '/').LOOP1\n&C2      SETC  '&C'(&K+1,&I-&K)\n&C1      SETC  '&C'(1,&K-1)\n         AIF   ('&C1'(1,1) NE '(').TC2\n&C1      SETC  '0&C1'\n.TC2     AIF   ('&C2' EQ '0000').V2B\n         AIF   ('&C2' EQ '00').V1B\n         AIF   ('&C2' EQ '0').V0B\n         AIF   ('&C2'(1,1) EQ '(').RL\n         MVI   S99TULNG+1,&C2          SET LENGTH FIELD\n         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.STD     ANOP\n&K       SETA  &L-6\n         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH\n&C1      SETC  '&C'(1,&I)              REMOVE TRAILING SLASH\n         MVC   S99TUPAR(&K),&C1        MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER\n&C1      SETC  '4+&C1'\n         AGO   .MOVE\n.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n&C1      SETC  '2+&C1'\n         AGO   .MOVE\n.V0B     SLR   R14,R14                 CLEAR FOR IC\n         IC    R14,&C1                 INSERT TEXT UNIT LENGTH\n&C1      SETC  '1+&C1'\n         AGO   .MOVE\n.RL      ANOP\n&C2      SETC  '&C2'(2,K'&C2-2)\n         LR    R14,&C2                 LOAD TEXT UNIT LENGTH\n.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD\n         BCTR  R14,0                   GET MACHINE LENGTH\n         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1\n         EX    R14,&EXECNAM            MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTUBFX": {"ttr": 2573, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO  - BUILD TEXT UNIT FROM BUFFER\n         RCPTUBFX &KEY,                TEXT UNIT KEY                   X\n               &L,                     MAXIMUM LENGTH VALUE            X\n               &C,                     TEXT UNIT                       X\n               &N=1                    TEXT UNIT NUMBER\n         GBLC  &EXECNAM\n         LCLC  &C1,&C2\n         LCLA  &I,&K\n         MVC   S99TUKEY,=AL2(&KEY)     SET TEXT UNIT KEY\n         AIF   ('&N' EQ '' OR '&N' EQ '1').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER\n.ENDN    ANOP\n&K       SETA  K'&C\n&I       SETA  &K-1\n.LOOP1   ANOP\n&K       SETA  &K-1\n         AIF   (&K LE 0).STD\n         AIF   ('&C'(&K,1) NE '/').LOOP1\n&C2      SETC  '&C'(&K+1,&I-&K)\n&C1      SETC  '&C'(1,&K-1)\n         AIF   ('&C1'(1,1) NE '(').TC2\n&C1      SETC  '0&C1'\n.TC2     AIF   ('&C2' EQ '0000').V2B\n         AIF   ('&C2' EQ '00').V1B\n         AIF   ('&C2' EQ '0').V0B\n         AIF   ('&C2'(1,1) EQ '(').RL\n         MVI   S99TULNG+1,&C2          SET LENGTH FIELD\n         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.STD     ANOP\n&K       SETA  &L-6\n         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH\n.*&C1    SETC  '&C'(1,&I)              REMOVE TRAILING SLASH\n         MVC   S99TUPAR(&K),=C&C       MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER\n&C1      SETC  '4+&C1'\n         AGO   .MOVE\n.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n&C1      SETC  '2+&C1'\n         AGO   .MOVE\n.V0B     SLR   R14,R14                 CLEAR FOR IC\n         IC    R14,&C1                 INSERT TEXT UNIT LENGTH\n&C1      SETC  '1+&C1'\n         AGO   .MOVE\n.RL      ANOP\n&C2      SETC  '&C2'(2,K'&C2-2)\n         LR    R14,&C2                 LOAD TEXT UNIT LENGTH\n.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD\n         BCTR  R14,0                   GET MACHINE LENGTH\n         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1\n         EX    R14,&EXECNAM            MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTXTL": {"ttr": 2575, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - TO COUNT CHARACTERS IN A STRING\n         RCPTXTL &S\n         GBLA  &RCPTXTL\n         LCLA  &I,&K,&L\n&RCPTXTL SETA  0\n         AIF   (K'&S LT 3).MEND\n&RCPTXTL SETA  K'&S-2\n&L       SETA  &RCPTXTL\n&I       SETA  1\n.LOOP    ANOP\n&I       SETA  &I+1\n.LOOP2   AIF   (&I GT &L).MEND\n         AIF   ('&S'(&I,2) NE '''''' AND '&S'(&I,2) NE '&&').LOOP\n&I       SETA  &I+2\n&RCPTXTL SETA  &RCPTXTL-1\n         AGO   .LOOP2\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPTYPE": {"ttr": 2577, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPTYPE &T\n         GBLC  &RCPTYPE\n         LCLA  &I,&K\n&K       SETA  K'&T\n&RCPTYPE SETC  ''\n         AIF   (&K EQ 0).EXIT\n&RCPTYPE SETC  'C'\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   ('&T'(&I,1) LT '0' OR '&T'(&I,1) GT '9').EXIT\n         AIF   (&I LT &K).LOOP\n&RCPTYPE SETC  'N'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPUNALC": {"ttr": 2579, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPUNALC\n         SPACE 1\n***********************************************************************\n**     FREE EVEN IF PERMANENTLY ALLOCATED                            **\n***********************************************************************\n         MVI   S99TUKEY+1,DUNUNALC     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPUNIT": {"ttr": 2581, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPUNIT &U,&V\n         GBLC  &DYNP\n         AIF   ('&U' EQ '').TVOL\n         SPACE 1\n***********************************************************************\n**       UNIT NAME TEXT UNIT                                         **\n***********************************************************************\n         RCPVCHAR DALUNIT,14,&U\n.TVOL    AIF   ('&V' EQ '').EXIT\n         SPACE 1\n***********************************************************************\n**       VOLUME SERIAL TEXT UNIT                                     **\n***********************************************************************\n         RCPVCHAR DALVLSER,14,&V\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPUNITC": {"ttr": 2583, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPUNITC &CNT\n         SPACE\n***********************************************************************\n**     UNIT ALLOCATION COUNT TEXT UNIT                               **\n***********************************************************************\n         RCPNTU DALUNCNT,1,&CNT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPVCHAR": {"ttr": 2585, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPVCHAR &KEY,&LEN,&C,&N=1\n         GBLC  &DYNP\n         AIF   ('&C'(K'&C,1) EQ '/').BM\n         AIF   ('&C'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&C'(1,1) EQ '(').RM\n         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT\n         AGO   .STHM\n.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         MOVE IN TEXT UNIT KEY\n         AIF   ('&N' EQ '1' OR '&N' EQ '').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD\n.ENDN    RCPDINC &LEN\n         MEXIT\n.BM      RCPTUBFR &KEY,&LEN,&C\n         MEXIT\n.QM      RCPBTU &KEY,&N,&C\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPVCHR2": {"ttr": 2587, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPVCHR2 &KEY,&LEN,&C,&N=1\n         GBLC  &DYNP\n         AIF   ('&C'(K'&C,1) EQ '/').BM\n         AIF   ('&C'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&C'(1,1) EQ '(').RM\n         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT\n         AGO   .STHM\n.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT\n         MVC   S99TUKEY,=AL2(&KEY)     MOVE IN TEXT UNIT KEY\n         AIF   ('&N' EQ '1' OR '&N' EQ '').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD\n.ENDN    RCPDINC &LEN\n         MEXIT\n.BM      RCPTUBFR &KEY,&LEN,&C\n         MEXIT\n.QM      RCPBTU &KEY,&N,&C\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCPVOLRT": {"ttr": 2589, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         RCPVOLRT\n         SPACE 1\n***********************************************************************\n**    VOLUME SERIAL RETURN TEXT UNIT                                 **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTVOL     SET RETURN VOLUME SERIAL KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,6            SET LENGTH FIELD\n         MVC   S99TUPAR(6),=CL6' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S99FAIL": {"ttr": 2817, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    S99FAIL &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=\n         GBLB  &RCPCPPL(2)             CP INDICATOR\n         GBLC  &RCPPRE\n         LCLB  &GEN\n         LCLC  &C\n&NAME    DS    0H\n         AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF(1)' EQ 'E').EXEC\n         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'\n.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS\n&GEN     SETB  1\n         AGO   .L\n.EXEC    AIF   ('&MF(2)' NE '').LISTOK\n         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'\n         MEXIT\n.LISTOK  AIF   ('&MF(3)' EQ '').TMF2\n&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST\n.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L\n         AIF   ('&MF(2)'(1,1) EQ '(').REG\n         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS\n         AGO   .L\n.REG     ANOP\n&C       SETC  '&MF(2)'(2,K'&MF(2)-2)\n         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR\n.L       AIF   ('&RB'(1,1) EQ '(').RBR\n         AIF   ('&RB' NE '').RBA\n         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'\n         MEXIT\n.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS\n         AGO   .RC\n.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK\n         ST    R14,0(R1)          AND STORE IN PLIST\n.RC      AIF   ('&RC'(1,1) EQ '(').RCR\n         LA    R14,&RC            LOAD ADDRESS OF RET CODE\n         ST    R14,4(R1)          AND STORE IN PLIST\n         AGO   .EFF02\n.RCR     ANOP\n.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD\n         ST    &RC(1),0(R14)      STORE RET CODE\n         ST    R14,4(R1)          AND STORE ITS ADDRESS\n.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0\n         ST    R14,8(R1)          STORE IT.\n         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID\n         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)          AND STORE IT\n         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER\n         AGO   .GO\n.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)         AND STORE IT\n         AIF   ('&CPPL' EQ '').DCPPL\n         AIF   ('&CPPL'(1,1) EQ '(').RCPPL\n         LA    R14,&CPPL          LOAD CPPL ADDRESS\n         ST    R14,16(R1)          AND STORE IT\n         AGO   .GO\n.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS\n         AGO   .GO\n.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL\n.GO      LINK  EP=IKJEFF18\n         AIF   (NOT &GEN).EXIT\n         SPACE 1\n         RCPDS\n&C SETC 'FAIL&SYSNDX'\n&C       DS    6F             RESERVE SPACE FOR PARAM LIST\n         RCPDS\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTOPEN": {"ttr": 2819, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TESTOPEN  &DCB,&BRANCH\n&NAME    LA    1,&DCB              REG 1 = DCB ADDRESS\n         TM    48(1),X'10'         TEST FOR SUCCESSFUL OPEN.\n         AIF   ('&BRANCH' EQ '').NOEXIT\n         BZ    &BRANCH             NOT OPEN BRANCH\n         MEXIT\n.NOEXIT  EQU   *                   OPEN OR NO BRANCH ADDR SPECIFIED\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT708/CBT.V500.FILE708.PDS/MACROS.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT708/CBT.V500.FILE708.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}