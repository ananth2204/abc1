{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012527000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2704156, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE649.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2704156, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2704156, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE649.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00+\\x02'", "DS1TRBAL": "b'\\xcd\\x10'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x99\\x00\\x0c\\x04\\x9c\\x00\\n\\x00,'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\t\\x07\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T09:07:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-463"}, "text": "REGULAR CBT TAPE - VERSION 463    FILE:  649\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT463.FILE649\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 25,664 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/16/03    09:07:37    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RECEIVE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00!\\x01\\x00\"/\\x01\\x03%\\x8f#A\\x00\\x1f\\x00\\x0e\\x00\\x00\\xd9\\xc5\\xc3\\xc5\\xc9\\xe5\\xc5@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2000-08-09T00:00:00", "modifydate": "2003-09-15T23:41:21", "lines": 31, "newlines": 14, "modlines": 0, "user": "RECEIVE"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*------------------------------------------------------------*//\n//*--  THIS JOB IS IN MY LOCAL FORMAT.  SBG                  --*//\n//*--                                                        --*//\n//*--  TSO-IN-BATCH RECEIVE JOB TO CREATE PDS'ES FOR PDS2PDS --*//\n//*--   (CHANGE USERID AND DATASET NAMING FOR YOUR SHOP)     --*//\n//*--                                                        --*//\n//*--  NOTE THAT EXTRA PARAMETERS FOR RECEIVE MUST BE ON     --*//\n//*--   THE SECOND LINE, OR THEY WON'T WORK ...              --*//\n//*--                                                        --*//\n//*--  CHANGE SBGOLOB TO YOUR OWN HIGH LEVEL QUALIFIER       --*//\n//*--   CHANGE DATA04 TO YOUR VOLUME FOR THE OUTPUT DSN'S    --*//\n//*--                                                        --*//\n//*------------------------------------------------------------*//\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n RECEIVE INDS('SBGOLOB.CBT463.FILE649(COBMVS)')\n    VOL(DATA04) DSN('SBGOLOB.PDS2PDS.COBMVS') UNIT(SYSALLDA)\n RECEIVE INDS('SBGOLOB.CBT463.FILE649(COBOL)')\n    VOL(DATA04) DSN('SBGOLOB.PDS2PDS.COBOL')  UNIT(SYSALLDA)\n RECEIVE INDS('SBGOLOB.CBT463.FILE649(COB2)')\n    VOL(DATA04) DSN('SBGOLOB.PDS2PDS.COB2')   UNIT(SYSALLDA)\n RECEIVE INDS('SBGOLOB.CBT463.FILE649(EXEC)')\n    VOL(DATA04) DSN('SBGOLOB.PDS2PDS.EXEC')   UNIT(SYSALLDA)\n RECEIVE INDS('SBGOLOB.CBT463.FILE649(ISPMLIB)')\n    VOL(DATA04) DSN('SBGOLOB.PDS2PDS.ISPMLIB') UNIT(SYSALLDA)\n RECEIVE INDS('SBGOLOB.CBT463.FILE649(ISPPLIB)')\n    VOL(DATA04) DSN('SBGOLOB.PDS2PDS.ISPPLIB') UNIT(SYSALLDA)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE649": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\t\\x07\\x00\\x03\\x00\\x03\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T09:07:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "CBT-463"}, "text": "//***FILE 649 is from Mike Newell and contains his PDS to PDS       *   FILE 649\n//*           comparison utility.                                   *   FILE 649\n//*                                                                 *   FILE 649\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COBMVS": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x8f\\x01\\x03%\\x8f#\\x19\\x1e\\x01\\x1e\\x01\\x00\\x00\\xd4\\xd5\\xc5\\xe6\\xc5\\xd3\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-15T00:00:00", "modifydate": "2003-09-15T23:19:00", "lines": 7681, "newlines": 7681, "modlines": 0, "user": "MNEWELL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "COBOL": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x8f\\x01\\x03%\\x8f#\\x19\\x08\\x12\\x08\\x12\\x00\\x00\\xd4\\xd5\\xc5\\xe6\\xc5\\xd3\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-15T00:00:00", "modifydate": "2003-09-15T23:19:00", "lines": 2066, "newlines": 2066, "modlines": 0, "user": "MNEWELL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "COB2": {"ttr": 4361, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x8f\\x01\\x03%\\x8f#\\x19\\x1d\\xbe\\x1d\\xbe\\x00\\x00\\xd4\\xd5\\xc5\\xe6\\xc5\\xd3\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-15T00:00:00", "modifydate": "2003-09-15T23:19:00", "lines": 7614, "newlines": 7614, "modlines": 0, "user": "MNEWELL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DOCUMENT": {"ttr": 7434, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x19\\x01\\x03%\\x8f\\x01\\x03%\\x8f#2\\x07\\t\\x07\\t\\x00\\x00\\xd4\\xd5\\xc5\\xe6\\xc5\\xd3\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-09-15T00:00:00", "modifydate": "2003-09-15T23:32:19", "lines": 1801, "newlines": 1801, "modlines": 0, "user": "MNEWELL"}, "text": "1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                  PDS2PDS V3.02\n\n\n\n\n                  THE PDS to PDS Comparison/Maintenance Utility\n\n\n\n\n                                August 15, 1999\n\n\n\n\n\n\n\n\n                                  Created by\n\n                           Michael A. Newell, WB4HUC\n\n                      http://wb4huc.home.texas.net/pds2pds\n\n                                wb4huc@texas.net\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n DISCLAIMER:\n\n\n\n This software is offered free of charge and contains no warranties\n or guarantees of any kind.\n\n The author makes no claims, express or implied, about the suitability\n of this software for any purpose.\n\n The author cannot be held responsible for any damage done through the\n use of this software.\n\n This software should be thoroughly tested in a non-production\n environment before using it on important or critical files.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1                  1  Overview\n\n\n\n Introduction      PDS2PDS is an MVS REXX/SPF Dialog Manager utility that will\n                   display two partitioned datasets side by side on the screen\n                   and let you perform different operations on them.\n\n                   With PDS2PDS you can, among other things:\n\n                   o  copy a member or members from one pds to the other\n                   o  move a member or members from one pds to the other\n                   o  edit a member or members in either pds\n                   o  delete a member or members from either pds\n                   o  rename a member or members in either pds\n                   o  browse a member or members in either pds\n\n\n                   This document explains in detail how PDS2PDS works, all of\n                   its various features, how to install it, and how to use it.\n\n\n\n This Document     ------------------------------------------------------------\n Contains          Chapter   Title                                         Page\n                   ------------------------------------------------------------\n                   1         Overview                                       1-1\n                   2         Installation                                   2-1\n                   3         How to Use                                     3-1\n                   4         Adding New Commands                            4-1\n                   ------------------------------------------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Overview                       August 15, 1999      1-1\n1                  2  Installation\n\n\n\n Introduction      This chapter explains how to unpack the PDS2PDS.ZIP file and\n                   install the individual files into your TSO/ISPF environment.\n\n\n\n This Chapter      ------------------------------------------------------------\n Contains          Section                                                 Page\n                   ------------------------------------------------------------\n                   Unpacking PDS2PDS.ZIP                                   2-1\n                   Uploading the Files to the Mainframe via FTP            2-2\n                   Restoring the Datasets with the RECEIVE Command         2-2\n                   Compiling the COBOL programs                            2-4\n                   Customizing PDS2PDS                                     2-4\n                   List of Members                                         2-6\n                   List of Stored Variables                                2-7\n                   ------------------------------------------------------------\n\n\n\n Unpacking         PDS2PDS is delivered in MS-DOS/PC-DOS format ZIP files.\n PDS2PDS.ZIP       Use WinZip or something compatible to unpack these zip files\n                   and create the following binary files and text files.\n\n                   ------------------------------------------------------------\n                   ZIP File      Contains      Description\n                   ------------------------------------------------------------\n                   PDS2PDS.ZIP   $HISTORY.TXT  Change history of PDS2PDS\n\n                                 P2PREXX.XMI   REXX Execs\n\n                                 P2PPANLS.XMI  ISPF Panels\n\n                                 P2PMSGS.XMI   ISPF Message File Member\n\n                                 P2PSRCE.XMI   COBOL Source Programs\n\n                                 P2PALLOC.REX  REXX Installation Exec\n\n                                 P2PRECV.REX   REXX Installation Exec\n\n                                 COMPCOB2.TXT  Compile JCL for COBOL II\n\n                                 COMPCMVS.TXT  Compile JCL for COBOL for MVS/VM\n\n                   P2PCMVSL.ZIP  P2PCMVSL.XMI  COBOL load modules compiled for\n                                               COBOL for MVS and VM\n\n                   P2PCOB2L.ZIP  P2PCOB2L.XMI  COBOL load modules compiled for\n                                               COBOL II\n                   ------------------------------------------------------------\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Installation                   August 15, 1999      2-1\n1                  2  Installation\n\n\n\n Uploading the     Once you have unpacked the files from PDS2PDS.ZIP you need to\n Files to the      transfer the .XMI files to MVS. This should be done using a\n Mainframe via     binary FTP transfer method.\n FTP\n                   You can give these files any name you want on MVS.\n\n                   You can use either the COBOL II or the COBOL for MVS and VM\n                   versions of the load modules. You don't need both.\n\n                   After you transfer the .XMI files to MVS they should each\n                   have the following attributes:\n\n                   DSORG=PS, RECFM=FB, LRECL=80, BLKSIZE=3120\n\n                   The easiest way to ensure that these files have the proper\n                   attributes is to preallocate them then transfer the PC files\n                   to the preallocated MVS files.\n\n                   Included with the PDS2PDS.ZIP file is a REXX exec, P2PALLOC,\n                   that can preallocate these files for you. Follow the comments\n                   in the exec to modify it for your use.\n\n\n\n  Restoring the    Once the .XMI files are on MVS you need to run the TSO\n  Datasets with    RECEIVE command to load each of these files back into a\n  the RECEIVE      partitioned dataset. Here are the attributes for each of the\n  Command          datasets:\n\n                   -------------------------------------------------------------\n                   File            Attributes\n                   -------------------------------------------------------------\n\n                   P2PREXX.XMI     RECFM=FB LRECL=80 BLKSIZE=23440 UNIT=3380\n                                   10 tracks  5 directory blocks   26 members\n\n                   P2PPANLS.XMI    RECFM=FB LRECL=80 BLKSIZE=23440 UNIT=3380\n                                    6 tracks 11 directory blocks   65 members\n\n                   P2PMSGS.XMI     RECFM=FB LRECL=80 BLKSIZE=23440 UNIT=3380\n                                    1 track   1 directory block     1 member\n\n                   P2PSRCE.XMI     RECFM=U  LRECL=0  BLKSIZE=32760 UNIT=3380\n                                    5 tracks  1 directory block     2 members\n\n                   P2PCOB2L.XMI    RECFM=U  LRECL=0  BLKSIZE=32760 UNIT=3380\n                                   17 tracks  1 directory block     2 members\n\n                   P2PCMVSL.XMI    RECFM=U  LRECL=0  BLKSIZE=32760 UNIT=3380\n                                   17 tracks  1 directory block     2 members\n                   -------------------------------------------------------------\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Installation                   August 15, 1999      2-2\n1                  2  Installation\n\n\n\n                   You do not have to preallocate the partitioned datasets that\n                   will be output from the RECEIVE command. The RECEIVE command\n                   will create them for you.\n\n                   Included in the PDS2PDS.ZIP file is a REXX exec, P2PRECV,\n                   that can execute the RECEIVE command for you. Follow the\n                   comments in the exec to modify it for your use.\n\n                   If you would rather execute the RECEIVE command yourself,\n                   here's how:\n\n                   -------------------------------------------------------------\n                   Step  Description\n                   -------------------------------------------------------------\n                   1     Issue the command:\n\n                         TSO RECEIVE INDATASET('P2PREXX.XMI')\n\n                         At the prompt:\n\n                         \"INMR906A ENTER RESTORE PARAMETERS OR 'DELETE' OR\n                         'END' +\"\n\n                         reply:\n\n                         DA('DATA.SET.NAME') VOLUME(volid) SPACE(20 0) TRACKS\n\n                         where 'data.set.name' is the name of the pds where you\n                         want the members to go.\n\n                         The VOLUME parameter is optional but might be needed if\n                         the default volumes in your shop are work volumes.\n                   -------------------------------------------------------------\n\n\n\n                   Repeat this sequence once for each .XMI file, remembering\n                   that you only need one of the COBOL load libraries.\n\n                   Once the partitioned datasets are created you need to copy:\n\n                   o the REXX execs to your TSO REXX library\n                     (SYSPROC or SYSEXEC)\n\n                   o the ISPF panels to your ISPF panel library\n                     (ISPPLIB)\n\n                   o the ISPF message member to your ISPF message library\n                     (ISPMLIB)\n\n                   o the COBOL load modules to your TSO load library\n                     (ISPLLIB)\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Installation                   August 15, 1999      2-3\n1                  2  Installation\n\n\n\n Compiling the     If you didn't download the COBOL load modules from the\n COBOL Programs    web site you can just compile the source code using the\n                   supplied JCL members.\n\n                   COMPCOB2 will compile the programs using COBOL II and\n                   COMPCMVS will compile the programs using COBOL for MVS and\n                   VM.\n\n                   You will have to modify the JCL members with your own job\n                   card, system libraries, etc. before you can run them.\n\n\n\n Customizing       Before you execute PDS2PDS for the first time you should take\n PDS2PDS           a look at REXX exec P2PCUSTM. In this exec are some variables\n                   whose values you may want to change. These variables are:\n\n                   -------------------------------------------------------------\n                   Variable  Description\n                   -------------------------------------------------------------\n                   p2puntu   These variables are used in TSO ALLOCATE commands\n                   p2puntw   executed by PDS2PDS. The value of these variables\n                   p2punts   reflects the names used in the UNIT parm of the\n                             ALLOCATE commands.\n\n                             In PDS2PDS there are three categories of allocated\n                             files:\n\n                             1) The left- and right-side dataset names entered\n                                on the dataset name panel. If the VOLSER field\n                                is entered on this panel then both the UNIT and\n                                VOLUME parameters are used in the ALLOCATE\n                                command for these files. Set variable P2PUNTU to\n                                the proper value in your shop for existing\n                                uncataloged files.\n\n                                If the VOLSER field is not entered in the\n                                dataset name panel the ALLOCATE statement does\n                                not use either the VOLUME or UNIT parameters.\n\n                             2) Temporary sequential work files are created by\n                                PDS2PDS to hold member name and stats data that\n                                are processed by the two COBOL programs. These\n                                new temporary files are allocated before the\n                                COBOL programs are called and then deleted when\n                                the COBOL programs are finished executing. Set\n                                variable P2PUNTW to the proper value in your\n                                shop for temporary work files. These files can\n                                be put on work volumes, virtual I/O volumes,\n                                etc.\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Installation                   August 15, 1999      2-4\n1                  2  Installation\n\n\n\n                             3) The SuperCe statements datasets created by the\n                                P2PLSUP and P2PGSUP REXX execs are permanent\n                                cataloged files. If these files already exist\n                                when the SC line or global commands are issued\n                                they are deleted and reallocated. Set variable\n                                P2PUNTS to the proper value in your shop for\n                                permanent cataloged files.\n\n                             If the same esoteric or unit name is used in your\n                             shop for all these different types of files then\n                             you can set all three variables to the same value.\n                             The default for these variables is 'SYSDA'.\n\n                   p2pgstmt  Change this variable to the desired dataset name\n                             for the SuperCe statements dataset created by REXX\n                             exec P2PGSUP. This exec executes the SC Global\n                             command. You can assign a fully- or partially-\n                             qualified dataset name for this variable. The\n                             default value for this variable is 'P2PGSUP.STMT'.\n\n                   p2plstmt  Change this variable to the desired dataset name\n                             for the SuperCe statements dataset created by REXX\n                             exec P2PLSUP. This exec executes the SC Line\n                             command. You can assign a fully- or partially-\n                             qualified dataset name for this variable. The\n                             default value for this variable is 'P2PLSUP.STMT'.\n                   -------------------------------------------------------------\n\n                   You should also make sure that the appropriate COBOL runtime\n                   libraries are available to your TSO session.\n\n                   Your systems programming staff can tell you which libraries\n                   you need. Just let them know if you're using the COBOL II\n                   or COBOL for MVS and VM versions of the programs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Installation                   August 15, 1999      2-5\n1                  2  Installation\n\n\n\n List of Members   Here is a list of members that should have been installed\n                   with the PDS2PDS application.\n\n                   REXX Execs (from P2PREXX.XMI)\n\n                   PDS2PDS  P2PCUSTM P2PDSNP  P2PDSNS  P2PGALL  P2PGBRW\n                   P2PGCMP  P2PGCPY  P2PGDEL  P2PGEDT  P2PGINF  P2PGMOV\n                   P2PGREN  P2PGSUP  P2PGTTL  P2PLALL  P2PLBRW  P2PLCPY\n                   P2PLDEL  P2PLEDT  P2PLMOV  P2PLREN  P2PLSUP  P2PMBRL\n                   P2PSTLF  P2PSTRT\n\n\n\n                   ISPF Panels (from P2PPANLS.XMI)\n\n                   P2PDSNP  P2PGALL  P2PGBRW  P2PGCPY  P2PGDEL  P2PGEDT\n                   P2PGINF  P2PGMOV  P2PGREN  P2PGTTL  P2PLALL  P2PLCPY\n                   P2PLDEL  P2PLMOV  P2PLREN  P2PMBRL  P2PPMSG  P2P00000\n                   P2P10000 P2P11000 P2P11010 P2P11020 P2P12000 P2P12010\n                   P2P12020 P2P13000 P2P13010 P2P13020 P2P13030 P2P13040\n                   P2P13050 P2P13060 P2P13070 P2P13080 P2P20000 P2P21000\n                   P2P21010 P2P21020 P2P21030 P2P21040 P2P21050 P2P22000\n                   P2P23000 P2P23010 P2P23020 P2P23020 P2P23040 P2P23050\n                   P2P23060 P2P23070 P2P23080 P2P23090 P2P23100 P2P23110\n                   P2P23120 P2P24000 P2P24010 P2P24020 P2P24030 P2P24040\n                   P2P24050 P2P24060 P2P24070 P2P24080 P2P24090\n\n\n\n                   ISPF Message Library Members (from P2PMSGS.XMI)\n\n                   PTPM00\n\n\n\n                   COBOL Load Modules (from either P2PCOB2L.XMI or P2PCMVSL.XMI)\n\n                   READDIR  P2PBTBL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Installation                   August 15, 1999      2-6\n1                  2  Installation\n\n\n\n List of Stored    The following is a list of variable names that PDS2PDS\n Variables         stores in the user's ISPF Profile Pool. These variables are\n                   stored with the 'VPUT (...) PROFILE' Dialog Service and\n                   are retrieved with the 'VGET (...) PROFILE' Dialog Service.\n\n                   If these same variable names are stored in the profile pool\n                   by other software they will be overwritten by PDS2PDS.\n\n                   Here are the variable names:\n\n                   CNFRML      CNFRMR\n                   DISPLINE\n                   DSNL        DSNR\n                   DTL1        DTL2        DTL3        DTL4\n                   DTL5        DTL6        DTL7\n                   HDL         HDR\n                   MASK        MASKOPTL    MASKOPTR\n                   MBRLEFT     MBRRITE\n                   NAMEDIFF    NAMESAME\n                   OLDRLEFT    OLDRRITE\n                   P2PGSTMT    P2PLSTMT    P2PUNTS     P2PUNTU     P2PUNTW\n                   P2PVERNO\n                   STATDIFF    STATSAME\n                   UNIQLEFT    UNIQRITE\n                   VOLIDL      VOLIDR\n\n\n\n                   The values of the following ISPF System variables are changed\n                   temporarily during the execution of the SuperCe (SC) Global\n                   and Line commands:\n\n                   SCENWFL     SCEODFL     SCECMLN     SCESSFL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Installation                   August 15, 1999      2-7\n1                  3  How to Use\n\n\n\n Introduction      This chapter will explain the various input fields on the two\n                   PDS2PDS screens, the Dataset Name and Display Options panel\n                   and the Member List panel.\n\n\n\n This Chapter      ------------------------------------------------------------\n Contains          Section                                                 Page\n                   ------------------------------------------------------------\n                   Starting PDS2PDS                                        3-1\n                   The Dataset Name and Display Options panel              3-1\n                   The Member List panel                                   3-4\n                   Order of Command Processing                             3-6\n                   Primary Commands                                        3-7\n                   ------------------------------------------------------------\n\n\n\n Starting          To start PDS2PDS just enter TSO PDS2PDS on the ISPF\n PDS2PDS           command line. The Dataset Name and Member Display Options\n                   panel should appear.\n\n                   You could also define a shortcut command like 'P2P' in your\n                   ISPF command table. This way you could start PDS2PDS by just\n                   entering P2P on the command line.\n\n                   For Help with using PDS2PDS, press PF1 when either the\n                   Dataset Name or Member List panel is displayed. This will\n                   start a small tutorial that you can follow to learn the\n                   various commands and functions of the utility.\n\n                   Placing the cursor on a PDS2PDS input field and pressing PF1\n                   will display a help screen for that field. This works for\n                   both the Dataset Name and the Member List panels.\n\n\n\n The Dataset       The fields on this panel are:\n Name and Display\n Options Panel     The Dataset Name, Member Name/Pattern, Include/Exclude\n                   member, and volser fields for the two datasets to be\n                   displayed.\n\n                   There are two sets of these fields, one for each partitioned\n                   dataset.\n\n                   Below these dataset/member fields are the eight member\n                   selection/display option fields.\n\n                   In the Left-Side Dataset Name field you enter the name of the\n                   pds whose members will be displayed on the left side of the\n                   member list panel.\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            How to Use                     August 15, 1999      3-1\n1                  3  How to Use\n\n\n\n                   In the Right-Side Dataset Name field you enter the name of\n                   the pds whose members will be displayed on the right side of\n                   the member list panel.\n\n                   For either dataset name you can enter either a member name or\n                   a member name pattern. The pattern can contain the wildcard\n                   characters '*' and '%'.\n\n                   The Include/Exclude field can contain the letters 'I' or 'X'.\n\n                   An 'I' will display ONLY the members that match the member\n                   name pattern.\n\n                   An 'X' will display all members EXCEPT those that match the\n                   member name pattern. In other words, the members that match\n                   the pattern are Excluded from the member list display.\n\n                   If you leave either the member name pattern field or the\n                   Include/Exclude field blank all members will be selected.\n\n                   In the VOLSER field you can enter the name of the dasd volume\n                   where the dataset resides. You only need to use this field\n                   if the dataset is not cataloged.\n\n                   Once the member names are read from the datasets the member\n                   display option you pick is applied to decide which of the\n                   selected members will be displayed.\n\n                   You can only choose one option at a time.\n\n                   Here are the options and their descriptions:\n\n\n\n                   Display only if member names match\n\n                      Matching members in both datasets are displayed.\n\n                      Members that appear only in one dataset or the other are\n                      not displayed.\n\n\n                   Display only if member names and stats match\n\n                      Matching members in both datasets are displayed IF their\n                      statistics fields are the same.\n\n                      Members that appear only in one dataset or the other are\n                      not displayed.\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            How to Use                     August 15, 1999      3-2\n1                  3  How to Use\n\n\n\n                   Display only if member names match but stats don't match\n\n                      Matching members in both datasets are displayed ONLY IF\n                      their statistics fields DO NOT match.\n\n                      Members that appear only in one dataset or the other are\n                      not displayed.\n\n\n                   Display only if member names are different\n\n                      This option will show only the member names from each\n                      dataset that DO NOT have a matching member in the other\n                      dataset.\n\n                      Members that exist in both datasets will not be displayed.\n\n\n                   Show only the members unique to the left-side dataset\n\n                      This option will show those members that only exist in the\n                      left-side dataset.\n\n                      Members that exist in both datasets or members that only\n                      exist in the right-side dataset will not be displayed.\n\n\n                   Show only the members unique to the right-side dataset\n\n                      This option will show those members that only exist in the\n                      right-side dataset.\n\n                      Members that exist in both datasets or members that only\n                      exist in the left-side dataset will not be displayed.\n\n\n                   Show members on left that are older than members on right\n\n                      This option will show matching members in both datasets.\n\n                      The members on the left will have date and/or time stamps\n                      that are earlier than members on the right.\n\n                      Members that exist only in one dataset or the other will\n                      not be displayed.\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            How to Use                     August 15, 1999      3-3\n1                  3  How to Use\n\n\n\n                   Show members on right that are older than members on left\n\n                      This option will show matching members in both datasets.\n\n                      The members on the right will have date and/or time stamps\n                      that are earlier than members on the left.\n\n                      Members that exist only in one dataset or the other will\n                      not be displayed.\n\n\n\n The Member List   After you fill in the Dataset Name panel and press the ENTER\n Panel             key the Member List panel is displayed.\n\n                   This section describes the input fields on the member list\n                   panel.\n\n\n                   Member Display Options\n\n                      Input fields for the same member display options used on\n                      the Dataset Name panel are presented on the Member List\n                      panel. This allows you to change the options without\n                      having to return to the Dataset Name panel. The options\n                      are listed in the same order as on the Dataset Name panel.\n\n\n                   Confirm Line Command\n\n                      This field can contain 'Y', 'N', or blank. If it contains\n                      'Y' then when the C, M, R, or D line commands are executed\n                      a pop-up window will be displayed that asks you to press\n                      the ENTER key to confirm that you want to execute the\n                      command.\n\n                      If the field contains 'N' or blank then no confirmation\n                      panel is displayed and the command is executed\n                      automatically.\n\n\n\n                   Global Command Field\n\n                      This field is where you enter commands that operate on the\n                      dataset or on all members of the dataset.\n\n                      This field is located on the field heading line to the\n                      left of the 'Name' heading.\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            How to Use                     August 15, 1999      3-4\n1                  3  How to Use\n\n\n\n                      The Global commands are:\n\n                      o  C  - Copy all members to the other pds\n                      o  M  - Move all members to the other pds\n                      o  R  - Rename all members in this pds\n                      o  D  - Delete all members from this pds\n                      o  E  - Edit all members in this pds\n                      o  B  - Browse all members in this pds\n                      o  V  - View all members in this pds\n                      o  Z  - Compress this pds\n                      o  I  - Show dataset information\n                      o  AL - Show all member statistics\n                      o  SC - Invoke SuperCe to compare both datasets\n                      o  TL - Show total number of lines in both\n                              datasets\n\n                      The phrase 'all members' means all members that are\n                      displayed on the member list panel, not necessarily all\n                      members of the dataset.\n\n                      If the member name pattern or display options were used to\n                      choose only some of the members for display then only\n                      these members will be affected by global commands.\n\n\n\n                   Line Command Fields\n\n                      Commands entered in these fields operate only on the\n                      member name given next to the field.\n\n                      The line command fields are located next to each member\n                      name, on both sides of the member list panel.\n\n                      The Line commands are:\n\n                      o  C  - Copy this member to the other pds\n                      o  M  - Move this member to the other pds\n                      o  R  - Rename this member in this pds\n                      o  D  - Delete this member from this pds\n                      o  E  - Edit this member in this pds\n                      o  B  - Browse this member of this pds\n                      o  V  - View this member of this pds\n                      o  AL - Show all member statistics\n                      o  SC - Invoke SuperCe to compare this member in both\n                              datasets\n\n\n                   For more detailed descriptions of each global and line\n                   command press PF1 on either the Dataset Name or Member list\n                   panel and view the Help Tutorial for the command, or place\n                   the cusor on the Global or Line command field to go directly\n                   to the help screens for these fields.\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            How to Use                     August 15, 1999      3-5\n1                  3  How to Use\n\n\n\n Order of          PDS2PDS is designed so that only one type of command is\n Command           executed with each press of the ENTER key. This was done to\n Processing        prevent the various types of commands from conflicting with\n                   each other. If you were to enter selections into all of the\n                   input fields at once, they would be processed in the\n                   following order:\n\n                   o  Confirm Line Command\n                   o  Display Options\n                   o  Primary Commands\n                   o  Global Commands\n                   o  Line Commands\n\n                   The Confirm Line Command fields are checked first even though\n                   they are not the first fields on the member list panel. This\n                   is because editing of this field is done in the panel\n                   definition and not in the REXX exec.\n\n                   In most cases the line command fields are completely blanked\n                   out when other input fields are processed and must be\n                   re-entered when the higher-priority command has finished.\n\n                   In the case of input errors in the higher-priority fields, a\n                   message will be displayed telling you of the error and the\n                   line command fields may not be blanked out. Once you have\n                   corrected the error and processed the command any non-blank\n                   line command fields will be blanked.\n\n                   Some examples of command order processing are:\n\n                   If you enter both a global command and one or more line\n                   commands, the global command is executed and all the line\n                   command fields will be blanked out. After the global command\n                   finishes you must re-enter the line commands.\n\n                   If you enter both the left- and right-side global commands\n                   the left-side command will be executed with the first\n                   press of the ENTER key. You will have to press the ENTER key\n                   again to process the right-side global command.\n\n                   If you select a new display option and enter commands in\n                   the global command fields, the display option processing\n                   will occur on the first press of the ENTER key. Press the\n                   ENTER key again to process the left-side global command;\n                   when it finishes press the ENTER key one more time to\n                   process the right-side global command.\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            How to Use                     August 15, 1999      3-6\n1                  3  How to Use\n\n\n\n Primary           There are five commands that can be entered on the ISPF\n Commands          command line that control the member list display.\n\n                   They are:\n\n                   The Locate command - this command will find the member name\n                   entered and position it to the top of the member list panel.\n\n                   The Refresh command - this command will re-read both datasets\n                   and rebuild the member list panel.\n\n                   The Flip command - this command will swap the left and\n                   right displays to the opposite side of the screen.\n\n                   The LF command - This will move the display of statistics\n                   information one field to the left.\n\n                   The RI command - This will move the display of statistics\n                   information one field to the right.\n\n                   Press PF1 on either the Dataset Name or Member List panels\n                   and view the Help Tutorial for more detailed information\n                   about these primary commands.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            How to Use                     August 15, 1999      3-7\n1                  4  Adding New Commands\n\n\n\n Introduction      One of the new features of PDS2PDS is the ability to easily\n                   add new global or line commands or modify the existing ones.\n                   This chapter explains how.\n\n\n\n This Chapter      ------------------------------------------------------------\n Contains          Section                                                 Page\n                   ------------------------------------------------------------\n                   Adding Global Commands                                  4-1\n                   Adding Line Commands                                    4-6\n                   The Member List Table                                   4-11\n                   ------------------------------------------------------------\n\n\n\n Adding Global     In the REXX exec P2PMBRL is a procedure called\n Commands          'Process_Global_Commands:'.\n\n                   In this procedure is a SELECT...OTHERWISE...END structure.\n\n                   Within this SELECT..OTHERWISE..END structure is a series\n                   of WHEN statements. Each of these WHEN statements calls a\n                   different internal procedure to execute the global command\n                   that was entered.\n\n                   Just add your WHEN statement to the list of existing ones to\n                   call your new internal procedure.\n\n                   Within the internal procedure you will call an external\n                   routine to perform the global command. After returning from\n                   the external subroutine the internal procedure will:\n\n                   o pull any data from the stack that might have been placed\n                     there by the external subroutine\n                   o check the return code issued by the external subroutine\n                   o display any errors that might have been issued by the\n                     external subroutine\n\n                   Within your new internal procedure you can call the external\n                   subroutine any way you want, via a function call or a CALL\n                   statement. Whether or not you pass any arguments to the new\n                   external subroutine is entirely up to you and depends upon\n                   what your new command is supposed to do.\n\n                   Your new command can execute a REXX exec, a CLIST, an\n                   external function written in COBOL, Assembler, or any other\n                   supported language. The only thing the new program has to do\n                   is follow the conventions for passing back error messages to\n                   be displayed.\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-1\n1                  4  Adding New Commands\n\n\n\n                   The following is a list of variables passed to and used by\n                   the existing external subroutines. These variables are\n                   already set at the time the external subroutine calls are\n                   made and do not have to be changed.\n\n                   Here are the variable definitions:\n\n                   LR_SW\n\n                      This variable contains 'L' if the global command was\n                      entered for the left-side dsn or an 'R' if it was entered\n                      for the right-side dsn.\n\n                   TBLNAME\n\n                      This variable contains the name of the ISPF table that\n                      holds the member list display.\n\n                   GCMD\n\n                      This variable contains the global command, if entered.\n\n                   CMDL\n\n                      This variable contains the left-side line command, if\n                      entered.\n\n                   CMDR\n\n                      This variable contains the right-side line command, if\n                      entered.\n\n                   DSNL\n\n                      This variable contains the left-side dataset name.\n\n                   DSNR\n\n                      This variable contains the right-side dataset name.\n\n                   P2PVERNO\n\n                      This variable contains the product name and version number\n                      which is displayed in the first line of all the screens.\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-2\n1                  4  Adding New Commands\n\n\n\n                   MEMLO\n\n                      This is the number of members contained in the left-side\n                      member list.\n\n                      If the external routine adds members to or deletes members\n                      from the left-side list it should also change this value\n                      to reflect these additions or deletions.\n\n                      If the external subroutine changes MEMLO it should QUEUE\n                      MEMLO to the stack so the internal routine within P2PMBRL\n                      can PULL it from the stack.\n\n                      This variable is displayed on the member list panel on the\n                      same line as the Confirm Line Command field.\n\n                   MEMRO\n\n                      This is the number of members contained in the right-side\n                      member list.\n\n                      If the external routine adds members to or deletes members\n                      from the right-side list it should also change this value\n                      to reflect these additions or deletions.\n\n                      If the external subroutine changes MEMRO it should QUEUE\n                      MEMRO to the stack so the internal routine within P2PMBRL\n                      can PULL it from the stack.\n\n                      This variable is displayed on the member list panel on the\n                      same line as the Confirm Line Command field.\n\n                   VOLIDL\n\n                      This variable contains the name of the DASD volume where\n                      the left-side dataset resides. This field is used for\n                      uncataloged datasets.\n\n                   VOLIDR\n\n                      This variable contains the name of the DASD volume where\n                      the right-side dataset resides. This field is used for\n                      uncataloged datasets.\n\n                   NBR_OF_MBRS\n\n                      This variable contains the total number of entries in the\n                      ISPF member list table.\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-3\n1                  4  Adding New Commands\n\n\n\n                   Of course you're not limited to only these variables, and\n                   you may not need to pass any of them at all depending upon\n                   what your external routine does.\n\n                   Within your external subroutine you may also retrieve the\n                   variables p2punt, p2pgstmt and p2plstmt from the user's\n                   profile pool if you need them. These are the custom variables\n                   that you may have changed in the P2PCUSTM REXX exec.\n\n                   The current global command external subroutines use the\n                   following conventions for passing parameters back to the\n                   calling routine:\n\n                   If the return code from the function call is zero, then no\n                   messages are issued. If the external subroutine QUEUED any\n                   data to the stack the internal procedure may PULL it.\n\n                   If the return code from the function call is 4, then the\n                   internal procedure will issue these instructions:\n\n                   'PARSE PULL p2psmsg'\n                   'PARSE PULL p2plmsg'\n                   'pnl_msg = 'MSG(PTPM009Z)'\n\n                   Variables p2psmsg and p2plmsg are the short and long messages\n                   to be displayed by message id PTPM009Z. PTPM009Z is defined\n                   in the PTPM00 message library member.\n\n                   When the function call ends with a return code of 4 it\n                   usually means that some ISPF Service invoked by the external\n                   routine has failed. The external routine will then QUEUE\n                   the variables zerrsm and zerrlm to the stack then end with\n                   a return code of 4.\n\n                   Upon returning from the external subroutine the internal\n                   procedure will PULL zerrsm and zerrlm from the stack and\n                   assign their values to p2psmsg and p2plmsg, respectively.\n\n                   If the global command external subroutine ended with a return\n                   code of 8 then the internal procedure will issue this\n                   instruction:\n\n                   'PARSE PULL pnl_msg'\n\n                   pnl_msg is used in routine Disp_Mbrl_Panel. It is used to\n                   hold the message id of any message that should be displayed\n                   after the internal procedure has ended.\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-4\n1                  4  Adding New Commands\n\n\n\n                   The value of pnl_msg should be in the form 'MSG(PTPMxxxx)'.\n                   PTPMxxxx would be the id of a messaged defined in the PTPM00\n                   message library member. If you create your own new messages\n                   be sure to define them in the PTPM00 member.\n\n                   When the external subroutine ends with a return code of 8 it\n                   usually means that some error condition was encountered that\n                   requires the display of one of the PTPM00 messages. The\n                   external routine passes back the message id to be displayed\n                   and lets P2PMBRL display it.\n\n                   To get a clearer picture of how all of this works just look\n                   at any of the internal procedures called in the SELECT...\n                   OTHERWISE...END structure of the Process_Global_Commands:\n                   procedure of REXX exec P2PMBRL.\n\n                   Then look at the matching external subroutine to see how\n                   they pass parameters and error messages back to the\n                   calling routine. The external global command subroutine names\n                   all begin with 'P2PG'.\n\n                   You are not limited to using return codes 4 and 8 from your\n                   external subroutines. These subroutines can end with any\n                   return code you want.\n\n                   The important thing they must do is pass back the zerrsm and\n                   zerrlm variables for any ISPF Service that issues error\n                   messages, or they must pass back a properly formatted\n                   PTPMxxxx message if the external routine itself issues a\n                   message.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-5\n1                  4  Adding New Commands\n\n\n\n Adding Line       In the REXX exec P2PMBRL is a procedure called\n Commands          'Execute_Line_Command:'.\n\n                   In this procedure is a SELECT...OTHERWISE...END structure.\n\n                   Within this SELECT..OTHERWISE..END structure is a series\n                   of WHEN statements. Each of these WHEN statements calls a\n                   different internal procedure to execute the line command that\n                   was entered.\n\n                   Just add your WHEN statement to the list of existing ones to\n                   call your new internal procedure.\n\n                   Within the internal procedure you will call an external\n                   routine to perform the line command. After returning from the\n                   external subroutine the internal procedure will:\n\n                   o pul any data from the stack that might have been placed\n                     there by the external subroutine\n                   o check the return code issued by the external subroutine\n                   o display any errors that might have been issued by the\n                     external subroutine\n\n                   Within your new internal procedure you can call the external\n                   subroutine any way you want, via a function call or a CALL\n                   statement. Whether or not you pass any arguments to the new\n                   external subroutine is entirely up to you and depends upon\n                   what your new command is supposed to do.\n\n                   Your new command can execute a REXX exec, a CLIST, an\n                   external function written in COBOL, Assembler, or any other\n                   supported language. The only thing the new program has to do\n                   is follow the conventions for passing back error messages to\n                   be displayed.\n\n\n                   The following is a list of variables passed to and used by\n                   the existing external subroutines. These variables are\n                   already set at the time the external subroutine calls are\n                   made and do not have to be changed.\n\n                   Here are the variable definitions:\n\n                   LR_SW\n\n                      This variable contains 'L' if the global command was\n                      entered for the left-side dsn or an 'R' if it was entered\n                      for the right-side dsn.\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-6\n1                  4  Adding New Commands\n\n\n\n                   TBLNAME\n\n                      This variable contains the name of the ISPF table that\n                      holds the member list display.\n\n                   GCMD\n\n                      This variable contains the global command, if entered.\n\n                   CMDL\n\n                      This variable contains the left-side line command, if\n                      entered.\n\n                   CMDR\n\n                      This variable contains the right-side line command, if\n                      entered.\n\n                   DSNL\n\n                      This variable contains the left-side dataset name.\n\n                   DSNR\n\n                      This variable contains the right-side dataset name.\n\n                   P2PVERNO\n\n                      This variable contains the product name and version number\n                      which is displayed in the first line of all the screens.\n\n                   MEMLO\n\n                      This is the number of members contained in the left-side\n                      member list.\n\n                      If the external routine adds members to or deletes members\n                      from the left-side list it should also change this value\n                      to reflect these additions or deletions.\n\n                      If the external subroutine changes MEMLO is should QUEUE\n                      MEMLO to the stack so the internal routine within P2PMBRL\n                      can PULL it from the stack.\n\n                      This variable is displayed on the member list panel on the\n                      same line as the Confirm Line Command field.\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-7\n1                  4  Adding New Commands\n\n\n\n                   MEMRO\n\n                      This is the number of members contained in the right-side\n                      member list.\n\n                      If the external routine adds members to or deletes members\n                      from the right-side list it should also change this value\n                      to reflect these additions or deletions.\n\n                      If the external subroutine changes MEMRO is should QUEUE\n                      MEMRO to the stack so the internal routine within P2PMBRL\n                      can PULL it from the stack.\n\n                      This variable is displayed on the member list panel on the\n                      same line as the Confirm Line Command field.\n\n                   VOLIDL\n\n                      This variable contains the name of the DASD volume where\n                      the left-side dataset resides. This field is used for\n                      uncataloged datasets.\n\n                   VOLIDR\n\n                      This variable contains the name of the DASD volume where\n                      the right-side dataset resides. This field is used for\n                      uncataloged datasets.\n\n                   NBR_OF_MBRS\n\n                      This variable contains the total number of entries in the\n                      ISPF member list table.\n\n\n\n                   Of course you're not limited to only these variables, and\n                   you may not need to pass any of them at all depending upon\n                   what your external routine does.\n\n                   Within your external subroutine you may also retrieve the\n                   variables p2punt, p2pgstmt and p2plstmt from the user's\n                   profile pool if you need them. These are the custom variables\n                   that you may have changed in the P2PCUSTM REXX exec.\n\n                   The current line command external subroutines use the\n                   following conventions for passing parameters back to the\n                   calling routine:\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-8\n1                  4  Adding New Commands\n\n\n\n                   If the line command external subroutine ends with a return\n                   code of 0 then no error messages are issued and no variables\n                   are pulled from the stack.\n\n                   If the return code from the function call is 10, then no\n                   error messages are issued but there is data in the stack and\n                   the internal routine needs to PULL this data from the stack.\n\n                   If the return code from the function call is 4, then the\n                   internal procedure will issue these instructions:\n\n                   'PARSE PULL p2psmsg'\n                   'PARSE PULL p2plmsg'\n                   'pnl_msg = 'MSG(PTPM009Z)'\n\n                   Variables p2psmsg and p2plmsg are the short and long messages\n                   to be displayed by message id PTPM009Z. PTPM009Z is defined\n                   in the PTPM00 message library member.\n\n                   When the function call ends with a return code of 4 it\n                   usually means that some ISPF Service invoked by the external\n                   routine has failed. The external routine will then QUEUE\n                   the variables zerrsm and zerrlm to the stack then end with\n                   a return code of 4.\n\n                   Upon returning from the external subroutine the internal\n                   procedure will PULL zerrsm and zerrlm from the stack and\n                   assign their values to p2psmsg and p2plmsg respectively.\n\n                   If the line command external subroutine ended with a return\n                   code of 8 then the internal procedure will issue this\n                   instruction:\n\n                   'PARSE PULL pnl_msg'\n\n                   pnl_msg is used in routine Disp_Mbrl_Panel. It is used to\n                   hold the message id of any message that should be displayed\n                   after the internal procedure has ended.\n\n                   The value of pnl_msg should be in the form 'MSG(PTPMxxxx)'.\n                   PTPMxxxx would be the id of a messaged defined in the PTPM00\n                   message library member. If you create your own new messages\n                   be sure to define them in the PTPM00 member.\n\n                   When the external subroutine ends with a return code of 8 it\n                   usually means that some error condition was encountered that\n                   requires the display of one of the PTPM00 messages. The\n                   external routine passes back the message id to be displayed\n                   and lets P2PMBRL display it.\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999      4-9\n1                  4  Adding New Commands\n\n\n\n                   When the line command external subroutine ends with a return\n                   code of 4 or 8 then the internal procedure will call the\n                   Line_Command_Error procedure.\n\n                   The Line_Command_Error procedure sets an error switch,\n                   positions the cursor to the correct line of the panel, and\n                   clears out the line command process flag.\n\n                   To get a clearer picture of how all of this works just look\n                   at any of the internal procedures called in the SELECT...\n                   OTHERWISE...END structure of the 'Execute_Line_Command:'\n                   procedure of REXX exec P2PMBRL.\n\n                   Then look at the matching external subroutines to see how\n                   they pass parameters and error messages back to the calling\n                   routine. The external global command subroutine names all\n                   begin with 'P2PL'.\n\n                   You are not limited to using return codes 4 and 8 from your\n                   external subroutines. These subroutines can end with any\n                   return code you want.\n\n                   The important thing they must do is pass back the zerrsm and\n                   zerrlm variables for any ISPF Service that issues error\n                   messages, or they must pass back a properly formatted\n                   PTPMxxxx message if the external routine itself issues a\n                   message.\n\n                   They must also call the Line_Command_Error subroutine if any\n                   error message is to be displayed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999     4-10\n1                  4  Adding New Commands\n\n\n\n The Member List   The member list table is an ISPF table that PDS2PDS creates\n Table             to hold the member list that is displayed on the screen.\n\n                   This table contains all of the fields that make up the member\n                   list. When you add members to or remove members from either\n                   pds you need to update the member list table to reflect the\n                   changes.\n\n                   You manipulate the table through the normal ISPF table\n                   services. When you want to change one of the table rows just\n                   use the appropriate table service to position to the row and\n                   retrieve it.\n\n                   After you've retrieved the desired row, just set the variable\n                   names to the new values then delete the old row and add the\n                   new row.\n\n                   You can look at any of the P2PGxxx or P2PLxxx REXX execs to\n                   see examples of how to manipulate the table.\n\n                   Panel P2PMBRL is used to dispay the member list table.\n\n                   Since you can have up to 99 active PDS2PDS sessions at once\n                   the member list table names will be P2PTB001 through\n                   P2PTB099.\n\n                   Here are the variables contained in the table:\n\n                   RESL and RESR\n\n                      These fields are display only fields on the member list\n                      panel. They are located between the member name and the\n                      line command input field. RESL is for the left-side member\n                      list and RESR is for the right-side member list.\n\n                      Use this field to show what was done to the member. If the\n                      member was edited, put an 'E' in the field. If copied, put\n                      a 'C' in the field, etc.\n\n                   MBRL and MBRR\n\n                      These fields are the member names for the left- and right-\n                      side member lists, respectively.\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999     4-11\n1                  4  Adding New Commands\n\n\n\n                   The STATxL and STATxR fields\n\n                      These fields contain the statistics information for each\n                      member. STATxL fields are for the left-side members and\n                      STATxR fields are for the right-side members.\n\n                      On the member list display there is only room to show\n                      three statistics fields at a time. Each of the STATxL or\n                      STATxR variables contains three of these displayed fields.\n\n                      When you issue the LF or RI primary commands PDS2PDS is\n                      simply changing which of the STATx variables that it\n                      displays.\n\n                      STAT1L and STAT1R contain the vvmm, created, and changed\n                      stats fields.\n\n                      STAT2L and STAT2R contain the created, changed, and time\n                      stats fields.\n\n                      STAT3L and STAT3R contain the changed, time, and size\n                      stats fields.\n\n                      STAT4L and STAT4R contain the time, size, and init\n                      stats fields.\n\n                      STAT5L and STAT5R contain the size, init, and mod\n                      stats fields.\n\n                      STAT6L and STAT6R contain the init, mod, and user\n                      stats fields.\n\n                      STAT7L and STAT7R contain the mod, user, and alias\n                      stats fields.\n\n                      To see how the table is initially constructed, look at\n                      the P2PBTBL COBOL source program.\n\n                      To see an example of how the stats fields are updated\n                      after they're changed, look at REXX execs P2PGEDT and\n                      P2PLEDT.\n\n                      To see how the LF and RI primary commands work, look at\n                      REXX execs P2PSTLF and P2PSTRT.\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999     4-12\n1                  4  Adding New Commands\n\n\n\n                   If you want to see the innards of the table itself, use the\n                   Dialog Test functions to set a breakpoint within PDS2PDS so\n                   that execution will stop and let you view the table.\n\n                   Enter Dialog Test (ISPF 7).\n\n                   Choose selection 8 (Breakpoints).\n\n                   Enter TBDISPL under Service, enter BEFORE under When, enter\n                   PDS2PDS under Function, and enter YES under Active.\n\n                   Press PF3 to return to the main Dialog Test menu.\n\n                   Choose selection 1 (Functions).\n\n                   Under Invoke Command:, on the CMD line, enter PDS2PDS\n                   and press the ENTER key.\n\n                   Fill in the Dataset Names and Display Options panel and\n                   press ENTER again.\n\n                   Now you should see the Breakpoint Primary Option Panel.\n                   At the bottom of this panel is the TBDISPL service and its\n                   parameters.\n\n                   On this panel choose selection 4 (Tables). This will take\n                   you to the panel where you can view the table.\n\n                   If you only have one active PDS2PDS session the table name\n                   should be P2PTB1. Enter this in the Table Name field, and\n                   now you can use any of the functions on this panel to view\n                   table information and contents.\n\n                   When you're done with the tables panel press PF3 and return\n                   to the breakpoints panel. On the breakpoints panel enter\n                   'G' in the command line field to continue execution of\n                   PDS2PDS.\n\n                   Eventually, after you have exited PDS2PDS via PF3 or PF4 you\n                   will be returned to the Invoke Dialog Function panel. From\n                   here you can just keep pressing PF3 until you are back at\n                   the main ISPF menu.\n\n\n\n\n\n\n\n\n\n\n\n\n -------------------------------------------------------------------------------\n $INSTALL.TXT            Adding New Commands            August 15, 1999     4-13\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXEC": {"ttr": 8201, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x8f\\x01\\x03%\\x8f#\\x19\\x10\\xda\\x10\\xda\\x00\\x00\\xd4\\xd5\\xc5\\xe6\\xc5\\xd3\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-15T00:00:00", "modifydate": "2003-09-15T23:19:00", "lines": 4314, "newlines": 4314, "modlines": 0, "user": "MNEWELL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPMLIB": {"ttr": 9992, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x8f\\x01\\x03%\\x8f#\\x19\\x004\\x004\\x00\\x00\\xd4\\xd5\\xc5\\xe6\\xc5\\xd3\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-15T00:00:00", "modifydate": "2003-09-15T23:19:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "MNEWELL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPPLIB": {"ttr": 9994, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x8f\\x01\\x03%\\x8f#\\x19\\x08*\\x08*\\x00\\x00\\xd4\\xd5\\xc5\\xe6\\xc5\\xd3\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-15T00:00:00", "modifydate": "2003-09-15T23:19:00", "lines": 2090, "newlines": 2090, "modlines": 0, "user": "MNEWELL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT649/FILE649.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT649", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}