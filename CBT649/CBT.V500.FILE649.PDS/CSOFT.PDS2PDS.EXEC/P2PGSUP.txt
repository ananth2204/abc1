/* REXX */
/*===================================================================*\
|Program Name: P2PGSUP                                                |
|Date Written: May 31, 1999                                           |
|      Author: Michael A. Newell                                      |
|              Austin, TX                                             |
|              http://wb4huc.home.texas.net                           |
|              http://wb4huc.home.texas.net/pds2pds                   |
|                                                                     |
| Description: This exec processes the SuperCe Command for the        |
|              PDS2PDS utility                                        |
|                                                                     |
|   Called By: P2PMBRL                                                |
|                                                                     |
|       Calls:                                                        |
|                                                                     |
\*===================================================================*/
ADDRESS ISPEXEC                             /*cmds dflt to ISPF       */
dummy = OUTTRAP("allocmsg.",,"noconcat")    /*trap terminal output    */
ARG lr_sw,tblname,dsnl,dsnr,volidl,volidr   /*get args from caller    */
INTERPRET 'dsn = dsn'lr_sw                  /*set dsname              */
"VGET (SCENWFL SCEODFL SCECMLN SCESSFL)" ,  /*get SuperCe variables   */
      "PROFILE"                             /*                        */
"VGET (p2pgstmt p2punts) PROFILE"           /*get p2pcustm options    */
scenwfl_hold = SCENWFL                      /*put scenwfl in hold     */
sceodfl_hold = SCEODFL                      /*put sceodfl in hold     */
scecmln_hold = SCECMLN                      /*put scecmln in hold     */
scessfl_hold = SCESSFL                      /*put scessfl in hold     */
lsdivl = ''                                 /*initialize field        */
lsdivr = ''                                 /*initialize field        */
IF volidl /= '' THEN                        /*if volid left entered   */
   lsdivl = 'VOLUME('volidl')'              /*   use it               */
listdsi_rc = LISTDSI(dsnl lsdivl)           /*get left dsn info       */
dsnl_recfm = SYSRECFM                       /*get left dsn recfm      */
IF volidr /= '' THEN                        /*if volid right entered  */
   lsdivr = 'VOLUME('volidr')'              /*   use it               */
listdsi_rc = LISTDSI(dsnr lsdivr)           /*get right dsn info      */
dsnr_recfm = SYSRECFM                       /*get right dsn recfm     */
IF lr_sw = 'L' THEN                         /*if copy left to right   */
   DO;new = 'L';old = 'R';END               /*  src = left;tgt = right*/
ELSE                                        /*else                    */
   DO;new = 'R';old = 'L';END               /*  src = right;tgt = left*/
mbrlist_rc = Build_Mbrlist()                /*bld select stmt list    */
IF mbrlist_rc = 4 THEN                      /*if bad rc from stmt bld */
   DO                                       /*   do                   */
     QUEUE zedsmsg                          /*     queue short msg    */
     QUEUE zedlmsg                          /*     queue long msg     */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
IF mbrlist_rc = 8 THEN                      /*if bad rc from stmt bld */
   RETURN 8                                 /*   return to caller     */
IF volidl /= '' THEN                        /*                        */
   dsnl = ''                                /*                        */
If volidr /= '' THEN                        /*                        */
   dsnr = ''                                /*                        */
IF lr_sw = 'L' THEN                         /*                        */
   DO                                       /*                        */
      SCENWFL = dsnl                        /*                        */
      SCEODFL = dsnr                        /*                        */
   END                                      /*                        */
ELSE                                        /*                        */
   DO                                       /*                        */
      SCENWFL = dsnr                        /*                        */
      SCEODFL = dsnl                        /*                        */
   END                                      /*                        */
SCESSFL = p2pgstmt                          /*set SuperCe stmts dsn   */
SCECMLN = '*'                               /*set SuperCe mbr name    */
"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)" ,  /*store new SuperCe vars  */
      "PROFILE"                             /*                        */
"CONTROL DISPLAY SAVE"                      /*save current display    */
"SELECT PGM(ISRSEPRM)"                      /*call SuperCe            */
"CONTROL DISPLAY RESTORE"                   /*restore display         */
SCESSFL = scessfl_hold                      /*restore scessfl         */
SCENWFL = scenwfl_hold                      /*restore scenwfl         */
SCEODFL = sceodfl_hold                      /*restore sceodfl         */
SCECMLN = scecmln_hold                      /*restore scecmln         */
"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)" ,  /*store original vars back*/
      "PROFILE"                             /*  in profile pool       */
RETURN 0                                    /*return to caller        */

Build_Mbrlist:
   dsnstat = SYSDSN(p2pgstmt)               /*get dataset status      */
   SELECT                                   /*select                  */
     WHEN dsnstat = 'DATASET NOT FOUND' THEN/*  when not found        */
          CALL Allocate_Dataset             /*    allocate it         */
     WHEN dsnstat = 'OK' THEN               /*  when ok               */
           DO                               /*    do                  */
             ADDRESS TSO "DELETE" p2pgstmt  /*      delete it         */
             CALL Allocate_Dataset          /*      reallocate it     */
           END                              /*    end                 */
   OTHERWISE                                /*otherwise               */
     NOP                                    /*  do                    */
   END                                      /*end                     */
   IF dataset_not_allocated THEN            /*if err in ds allocation */
      RETURN 4                              /*   return to caller     */
   read_stmts_rc = Read_Old_SuperC_Stmts()  /*read old stmts dataset  */
   IF read_stmts_rc > 0 THEN                /*if bad read rc          */
      DO                                    /*   do                   */
        DROP scmbrlst.                      /*     drop stmts variable*/
        scmbrlst.0 = 0                      /*     init nbr stmts     */
        stmt_nbr = scmbrlst.0               /*     init stmt number   */
      END                                   /*   end                  */
   ELSE                                     /*else                    */
      stmt_nbr = scmbrlst.0                 /*   set stmt nbr         */
   "TBTOP" tblname                          /*position to top of tbl  */
   "TBQUERY" tblname "ROWNUM(TBLROWS)"      /*get nbr rows in table   */
   select_stmt = ''                         /*init select statement   */
   select_sw = 0                            /*reset select sw         */
   nbr_mbrs = 0                             /*reset nbr mbrs          */
   DO tblrows                               /*do once for each member */
      "TBSKIP" tblname                      /*   skip to mbr name     */
      "TBGET" tblname                       /*   retrieve row from tbl*/
      mbrnamel = STRIP(LEFT(mbrl,8))        /*   drop spaces in name  */
      mbrnamer = STRIP(LEFT(mbrr,8))        /*   drop spaces in name  */
      IF mbrnamel = '' | mbrnamer = '' THEN /*   if either name blank */
         ITERATE                            /*      skip to next mbr  */
      select_stmt = select_stmt mbrnamel',' /*   add mbr to sel stmt  */
      nbr_mbrs = nbr_mbrs + 1               /*   add to nbr of mbrs   */
      IF nbr_mbrs = 6 THEN                  /*   if 6 mbrs in stmt    */
         DO                                 /*      do                */
           select_stmt = 'SELECT' || ,      /*        add 'select'    */
                         select_stmt        /*                        */
           select_stmt = LEFT(select_stmt, ,/*        drop comma from */
           LENGTH(select_stmt) - 1)         /*          end of stmt   */
           stmt_nbr = stmt_nbr + 1          /*        incr stmt number*/
           scmbrlst.0 = stmt_nbr            /*        set nbr stmts   */
           scmbrlst.stmt_nbr = select_stmt  /*        add stmt to var */
           select_stmt = ''                 /*        blank stmt      */
           select_sw = 1                    /*        set select sw   */
           nbr_mbrs = 0                     /*        reset nbr mbrs  */
         END                                /*      end               */
   END                                      /*end                     */
   IF select_stmt = '' THEN                 /*if no select stmts      */
      NOP                                   /*   bypass               */
   ELSE                                     /*else                    */
      DO                                    /*   do                   */
        select_stmt = 'SELECT' || ,         /*     add 'select'       */
                      select_stmt           /*                        */
        select_stmt = LEFT(select_stmt, ,   /*     drop comma from end*/
        LENGTH(select_stmt) - 1)            /*       of stmt          */
        stmt_nbr = stmt_nbr + 1             /*     incr stmt number   */
        scmbrlst.0 = stmt_nbr               /*     set nbr of stmts   */
        scmbrlst.stmt_nbr = select_stmt     /*     add stmt to var    */
        select_stmt = ''                    /*     blank stmt         */
        select_sw = 1                       /*     set select sw      */
        nbr_mbrs = 0                        /*     reset nbr mbrs     */
      END                                   /*   end                  */
   IF select_sw = 0 THEN                    /*if no mbrs selected     */
      DO                                    /*   do                   */
        ADDRESS TSO"FREE DDNAME(SCMBRLST)"  /*     free stmts dataset */
        QUEUE 'MSG(PTPM001E)'               /*     set message id     */
        RETURN 8                            /*     return to caller   */
      END                                   /*   end                  */
   DO i = 1 to scmbrlst.0                   /*do once per select stmt */
      QUEUE scmbrlst.i                      /*   put stmt in stack    */
   END                                      /*end                     */
   ADDRESS TSO "EXECIO" scmbrlst.0       ,  /*write stmts to stmt     */
               "DISKW SCMBRLST (FINIS"      /*   dataset              */
   ADDRESS TSO "FREE DDNAME(SCMBRLST)"      /*free statements dataset */
RETURN 0                                    /*return to caller        */

Allocate_Dataset:
   dataset_not_allocated = 0                /*reset error sw          */
   ADDRESS TSO  "ALLOCATE"      ,           /*allocate statements     */
         "DDNAME(SCMBRLST)"     ,           /*   dataset              */
         "DSNAME("p2pgstmt")"   ,           /*set in p2pcustm         */
         "NEW REU"              ,           /*                        */
         "UNIT("p2punts")"      ,           /*set in p2pcustm         */
         "TRACKS"               ,           /*                        */
         "SPACE(15,15)"         ,           /*                        */
         "LRECL(80)"            ,           /*                        */
         "BLKSIZE(23440)"       ,           /*                        */
         "RECFM(F B)"           ,           /*                        */
         "DSORG(PS)"                        /*                        */
   alloc_rc = rc                            /*set return code         */
   IF alloc_rc > 0 THEN                     /*if bad return code      */
      CALL Bad_Allocate                     /*   write error msgs     */
RETURN

Bad_Allocate:
   dataset_not_allocated = 1                /*set bad alloc sw        */
   term_width = SYSVAR(SYSWTERM)            /*get terminal width      */
   zedsmsg = 'Error - Press PF1       '     /*set short message       */
   zedlmsg = 'Error: REXX Exec P2PGSUP'  ,  /*                        */
     ' - Procedure Allocate_Dataset'        /*set long message        */
   zedlmsg = LEFT(zedlmsg,term_width)       /*set to term width       */
   msg2 = 'Error Allocating Dataset:'    ,  /*msg 2                   */
     p2pgstmt                               /*                        */
   msg2 = LEFT(msg2,term_width)             /*set to term width       */
   zedlmsg = zedlmsg msg2                   /*add to long messge      */
   msg3 = LEFT('MESSAGE:',term_width)       /*msg 3                   */
   zedlmsg = zedlmsg msg3                   /*add to long message     */
   DO x = 1 to allocmsg.trapped             /*do once per err msg     */
      allocmsg.x = LEFT(allocmsg.x, ,       /*   set to term width    */
                  term_width)               /*                        */
      zedlmsg = zedlmsg allocmsg.x          /*   concatenate          */
   END                                      /*end                     */
RETURN

Read_Old_SuperC_Stmts:
   dsnstat = SYSDSN(SCESSFL)                /*get stmts dsn status    */
   IF dsnstat \= 'OK' THEN                  /*if not ok               */
      RETURN 12                             /*   return to caller     */
   ADDRESS TSO "ALLOCATE DDNAME(OLDSTMTS)" ,/*allocate old stmts ds   */
               "DA("SCESSFL") SHR"          /*                        */
   IF rc > 0 THEN                           /*if alloc not successful */
      RETURN 12                             /*   return to caller     */
   ADDRESS TSO "EXECIO * DISKR OLDSTMTS" ,  /*read old stmts ds       */
               "(STEM scmbrlst. FINIS"      /*                        */
   execio_rc = rc                           /*set return code         */
   ADDRESS TSO "FREE DDNAME(OLDSTMTS)"      /*free stmts ds           */
RETURN execio_rc
