/* REXX */
/*===================================================================*\
|Program Name: P2PGCPY                                                |
|Date Written: May 31, 1999                                           |
|      Author: Michael A. Newell                                      |
|              Austin, TX                                             |
|              http://wb4huc.home.texas.net                           |
|              http://wb4huc.home.texas.net/pds2pds                   |
|                                                                     |
| Description: This exec processes the Global Copy Command for the    |
|              PDS2PDS utility                                        |
|                                                                     |
|   Called By: P2PMBRL                                                |
|                                                                     |
|       Calls:                                                        |
|                                                                     |
\*===================================================================*/
ADDRESS ISPEXEC                             /*commands dflt to ispf   */
ARG lr_sw,tblname,dsnl,dsnr,volidl,volidr,, /*get args from caller  */
    p2pverno,memlo,memro,nbr_of_mbrs        /*                        */
IF lr_sw = 'L' THEN                         /*if copy left to right   */
   DO;src = 'L';tgt = 'R';END               /*  src = left;tgt = right*/
ELSE                                        /*else                    */
   DO;src = 'R';tgt = 'L';END               /*  src = right;tgt = left*/
INTERPRET 'pnldsns = dsn'src                /*set src dsname          */
INTERPRET 'pnldsnt = dsn'tgt                /*set tgt dsname          */
INTERPRET 'volids = volid'src               /*set source volser name  */
INTERPRET 'volidt = volid'tgt               /*set target volser name  */
IF volids /= '' THEN                        /*if volid entered        */
   volids = 'VOLUME('volids')'              /*   use it               */
"LMINIT DATAID("ddvars")"    ,              /*get dataid for source   */
       "DATASET("pnldsns")"  ,              /*    dataset             */
       volids                ,              /*                        */
       "ENQ(SHR)"                           /*                        */
lminit_rc = rc                              /*set return code         */
IF lminit_rc \= 0 THEN                      /*if bad return code      */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     CALL Queue_Mbrs                        /*     queue nbr mbrs     */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
IF volidt /= '' THEN                        /*if volid entered        */
   volidt = 'VOLUME('volidt')'              /*   use it               */
"LMINIT DATAID("ddvart")"    ,              /*get dataid for target   */
       "DATASET("pnldsnt")"  ,              /*    dataset             */
       volidt                ,              /*                        */
       "ENQ(SHRW)"                          /*                        */
lminit_rc = rc                              /*set return code         */
IF lminit_rc \= 0 THEN                      /*if bad return code      */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     CALL Queue_Mbrs                        /*     queue nbr mbrs     */
     CALL Free_Files                        /*     free files         */
     RETURN 4                               /*     return             */
   END                                      /*   end                  */
"TBTOP" tblname                             /*go to top of table      */
"TBQUERY" tblname "ROWNUM(TBLROWS)"         /*nbr of rows in table    */
lmcopy_rc = 0                               /*init return code        */
cnfrmoff = ' '                              /*reset cmd confirm fld   */
DO tblrows                                  /*do once for each row    */
   "TBSKIP" tblname "NUMBER(1)"             /*   skip to next row     */
   "TBGET" tblname                          /*   get a row            */
   INTERPRET 'mbrs = mbr'src                /*   set src mbr name     */
   INTERPRET 'mbrt = mbr'src                /*   set tgt mbr name     */
   IF mbrs = ' ' THEN                       /*   if src mbr name blank*/
      ITERATE                               /*      get next member   */
   IF cnfrmoff = ' ' THEN                   /*   if cmd confirm off   */
      DO                                    /*      do                */
        "ADDPOP ROW(0) COLUMN(0)"           /*        show popup win  */
        "DISPLAY PANEL(P2PGCPY)"    ,       /*        display panel   */
                "CURSOR(REPLMBRS)"          /*                        */
        panel_rc = rc                       /*        set panel rc    */
        "REMPOP"                            /*        remove popup win*/
        IF panel_rc = 8 THEN                /*        if pf3/pf4 presd*/
           ITERATE                          /*           go to nxt mbr*/
        IF panel_rc /= 0 THEN               /*        if bad rc       */
           DO                               /*           do           */
             CALL System_Error              /*             stack msgs */
             LEAVE                          /*             quit       */
           END                              /*           end          */
      END                                   /*      end               */
   IF cancelop \= ' ' THEN                  /*   if cmd cancelled     */
      LEAVE                                 /*      quit              */
   IF mbrl = mbrr THEN                      /*   if same member name  */
      IF replmbrs = ' ' THEN                /*      if not replace mbr*/
         ITERATE                            /*         get next mbr   */
   "LMCOPY FROMID("ddvars")"    ,           /*   copy member          */
          "FROMMEM("mbrs")"     ,           /*                        */
          "TODATAID("ddvart")"  ,           /*                        */
          "TOMEM("mbrt")"       ,           /*                        */
          "REPLACE"                         /*                        */
   lmcopy_rc = rc                           /*   set return code      */
   IF lmcopy_rc \= 0 THEN                   /*   if bad return code   */
      DO                                    /*      do                */
        CALL System_Error                   /*        put msgs in stak*/
        LEAVE                               /*        quit            */
      END                                   /*      end               */
   INTERPRET ,                              /*   add 1 to nbr mbrs in */
     'IF mbr'tgt '= "" THEN' ,              /*   tgt dataset          */
        'mem'tgt'o = mem'tgt'o + 1'         /*   if necessary         */
   "TBDELETE" tblname                       /*   delete table row     */
   INTERPRET 'res'src '= "C"'               /*   set results field    */
   INTERPRET 'mbr'tgt '= mbr'src            /*   set tgt mbr name     */
   INTERPRET 'stat1'tgt '= stat1'src        /*   set tgt stats line 1 */
   INTERPRET 'stat2'tgt '= stat2'src        /*   set tgt stats line 2 */
   INTERPRET 'stat3'tgt '= stat3'src        /*   set tgt stats line 3 */
   INTERPRET 'stat4'tgt '= stat4'src        /*   set tgt stats line 4 */
   INTERPRET 'stat5'tgt '= stat5'src        /*   set tgt stats line 5 */
   INTERPRET 'stat6'tgt '= stat6'src        /*   set tgt stats line 6 */
   INTERPRET 'stat7'tgt '= stat7'src        /*   set tgt stats line 7 */
   "TBADD" tblname "MULT("nbr_of_mbrs")"    /*   re-add row to table  */
   tbadd_rc = rc                            /*   set return code      */
   IF tbadd_rc > 8 THEN                     /*   if bad return code   */
      DO                                    /*      do                */
        CALL System_Error                   /*        put msgs in stak*/
        LEAVE                               /*        exit loop       */
      END                                   /*      end               */
END                                         /*end                     */

CALL Queue_Mbrs                             /*queue nbr mbrs to stack */
CALL Free_Files                             /*close filee             */

EXIT lmcopy_rc

Queue_Mbrs:
   QUEUE memlo                              /*nbr mbrs left side ds   */
   QUEUE memro                              /*nbr mbrs right side ds  */
RETURN

System_Error:
   QUEUE zerrsm                             /*put short msg in stack  */
   QUEUE zerrlm                             /*put long msg in stack   */
   lmcopy_rc = 4                            /*set subroutine ret code */
RETURN

Free_Files:
   "LMFREE DATAID("ddvars")"                /*free source dataset     */
   "LMFREE DATAID("ddvart")"                /*free target dataset     */
RETURN
