/* REXX */
/*===================================================================*\
|Program Name: P2PLMOV                                                |
|Date Written: May 31, 1999                                           |
|      Author: Michael A. Newell                                      |
|              Austin, TX                                             |
|              http://wb4huc.home.texas.net                           |
|              http://wb4huc.home.texas.net/pds2pds                   |
|                                                                     |
| Description: This exec processes the Move Member command for the    |
|              PDS2PDS utility                                        |
|                                                                     |
|   Called By: P2PMBRL                                                |
|                                                                     |
|       Calls:                                                        |
|                                                                     |
\*===================================================================*/
ADDRESS ISPEXEC                             /*commands dflt to ispf   */
ARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */
    memlo,memro,mbrl,mbrr,cnfrml,cnfrmr, ,  /*                        */
    volidl,volidr,nbr_of_mbrs               /*                        */
IF lr_sw = 'L' THEN                         /*if copy left to right   */
   DO;src = 'L';tgt = 'R';END               /*  src = left;tgt = right*/
ELSE                                        /*else                    */
   DO;src = 'R';tgt = 'L';END               /*  src = right;tgt = left*/
"TBTOP" tblname                             /*go to top of table      */
INTERPRET 'pnldsns = dsn'src                /*set src dsname          */
INTERPRET 'pnldsnt = dsn'tgt                /*set tgt dsname          */
INTERPRET 'volids = volid'src               /*set src volser          */
INTERPRET 'volidt = volid'tgt               /*set src volser          */
INTERPRET 'mbrm = mbr'lr_sw                 /*set mbr name for panel  */
INTERPRET                           ,       /*find member             */
  '"TBSCAN"' tblname                ,       /*                        */
           '"ARGLIST(mbr'lr_sw')'   ,       /*                        */
           'CONDLIST(EQ)'           ,       /*                        */
           'PREVIOUS'               ,       /*                        */
           'POSITION(crpn)'         ,       /*                        */
           'ROWID(currow)"'                 /*                        */
tbscan_rc = rc                              /*set return code         */
IF tbscan_rc = 8 THEN                       /*if mbr not found        */
   DO                                       /*   do                   */
     QUEUE 'MSG(PTPM007)'                   /*     set short message  */
     RETURN 8                               /*     return to caller   */
   END                                      /*   end                  */
IF tbscan_rc > 8 THEN                       /*if other error          */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
IF volids /= '' THEN                        /*if volid entered        */
   volids = 'VOLUME('volids')'              /*   use it               */
"LMINIT DATAID("ddvars")"    ,              /*get dataid for source   */
       "DATASET("pnldsns")"  ,              /*    dataset             */
       volids                ,              /*                        */
       "ENQ(SHR)"                           /*                        */
lminit_rc = rc                              /*set return code         */
IF lminit_rc \= 0 THEN                      /*if bad return code      */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
IF volidt /= '' THEN                        /*if volid entered        */
   volidt = 'VOLUME('volidt')'              /*   use it               */
"LMINIT DATAID("ddvart")"    ,              /*get dataid for target   */
       "DATASET("pnldsnt")"  ,              /*    dataset             */
       volidt                ,              /*                        */
       "ENQ(SHRW)"                          /*                        */
lminit_rc = rc                              /*set return code         */
IF lminit_rc \= 0 THEN                      /*if bad return code      */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
"TBTOP" tblname                             /*go to top of table      */
lmmove_rc = 0                               /*init return code        */
"TBSKIP" tblname "ROW("currow")"            /*skip to next row        */
"TBGET" tblname                             /*retrieve row            */
INTERPRET 'mbrs = mbr'src                   /*set src mbr name        */
INTERPRET 'mbrt = mbr'src                   /*set tgt mbr name        */
panel_rc = 0                                /*initialize panel rc     */
IF (lr_sw = 'L' & cnfrml = 'Y') | ,         /*if confirm line cmd     */
   (lr_sw = 'R' & cnfrmr = 'Y') THEN        /*                        */
   DO                                       /*   do                   */
     "ADDPOP ROW(0) COLUMN(0)"              /*     show popup window  */
     "DISPLAY PANEL(P2PLMOV)"               /*     display panel      */
     panel_rc = rc                          /*     set panel ret code */
     "REMPOP"                               /*     remove popup window*/
   END                                      /*   end                  */
IF panel_rc = 8 THEN                        /*if pf3/pf4 pressed      */
   DO                                       /*   do                   */
     CALL Free_Files                        /*     free files         */
     RETURN 0                               /*     return to caller   */
   END                                      /*   end                  */
IF panel_rc /= 0 THEN                       /*if bad panel ret code   */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
"LMMOVE FROMID("ddvars")"    ,              /*move member             */
       "FROMMEM("mbrs")"     ,              /*                        */
       "TODATAID("ddvart")"  ,              /*                        */
       "TOMEM("mbrt")"       ,              /*                        */
       "REPLACE"                            /*                        */
lmmove_rc = rc                              /*set return code         */
IF lmmove_rc \= 0 THEN                      /*if bad return code      */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
INTERPRET ,                                 /*add 1 to nbr mbrs in    */
  'IF mbr'tgt '= "" THEN' ,                 /*tgt dataset if necessary*/
     'mem'tgt'o = mem'tgt'o + 1'            /*                        */
INTERPRET 'mem'src'o = mem'src'o - 1'      /*                        */
"TBDELETE" tblname                          /*delete table row        */
INTERPRET 'res'src '= "M"'                  /*set results field       */
INTERPRET 'mbr'tgt '= mbr'src               /*set tgt mbr name        */
INTERPRET 'stat1'tgt '= stat1'src           /*set tgt stats line 1    */
INTERPRET 'stat2'tgt '= stat2'src           /*set tgt stats line 2    */
INTERPRET 'stat3'tgt '= stat3'src           /*set tgt stats line 3    */
INTERPRET 'stat4'tgt '= stat4'src           /*set tgt stats line 4    */
INTERPRET 'stat5'tgt '= stat5'src           /*set tgt stats line 5    */
INTERPRET 'stat6'tgt '= stat6'src           /*set tgt stats line 6    */
INTERPRET 'stat7'tgt '= stat7'src           /*set tgt stats line 7    */
INTERPRET 'mbr'src '= " "'                  /*set src mbr name        */
INTERPRET 'stat1'src '= " "'                /*set src stats line 1    */
INTERPRET 'stat2'src '= " "'                /*set src stats line 1    */
INTERPRET 'stat3'src '= " "'                /*set src stats line 1    */
INTERPRET 'stat4'src '= " "'                /*set src stats line 1    */
INTERPRET 'stat5'src '= " "'                /*set src stats line 1    */
INTERPRET 'stat6'src '= " "'                /*set src stats line 1    */
INTERPRET 'stat7'src '= " "'                /*set src stats line 1    */
"TBADD" tblname "MULT("nbr_of_mbrs")"       /*   re-add row to table  */
tbadd_rc = rc                               /*set return code         */
IF tbadd_rc > 8 THEN                        /*if bad return code      */
   DO                                       /*   do                   */
     CALL System_Error                      /*     put msgs in stack  */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */

QUEUE memlo                                 /*put memlo in stack      */
QUEUE memro                                 /*put memro in stack      */
CALL Free_Files                             /*free files              */

EXIT 10

System_Error:
   QUEUE zerrsm                             /*put short msg in stack  */
   QUEUE zerrlm                             /*put long msg in stack   */
   CALL Free_Files                          /*close filee             */
RETURN

Free_Files:
   "LMFREE DATAID("ddvars")"                /*free source dataset     */
   "LMFREE DATAID("ddvart")"                /*free target dataset     */
RETURN
