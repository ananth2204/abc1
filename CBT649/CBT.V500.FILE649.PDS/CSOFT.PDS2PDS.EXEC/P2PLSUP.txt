/* REXX */
/*===================================================================*\
|Program Name: P2PLSUP                                                |
|Date Written: May 31, 1999                                           |
|      Author: Michael A. Newell                                      |
|              Austin, TX                                             |
|              http://wb4huc.home.texas.net                           |
|              http://wb4huc.home.texas.net/pds2pds                   |
|                                                                     |
| Description: This exec processes the SuperCe Command for the        |
|              PDS2PDS utility                                        |
|                                                                     |
|   Called By: P2PMBRL                                                |
|                                                                     |
|       Calls:                                                        |
|                                                                     |
\*===================================================================*/
ADDRESS ISPEXEC                             /*cmds dflt to ISPF       */
dummy = OUTTRAP("allocmsg.",,"noconcat")    /*trap error msg output   */
ARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */
    mbrl,mbrr,volidl,volidr                 /*                        */
IF mbrl = '' | mbrr = '' THEN               /*if either mbr name blank*/
   DO                                       /*   do                   */
     QUEUE 'MSG(PTPM009)'                   /*     set message id     */
     RETURN 8                               /*     return to caller   */
   END                                      /*   end                  */
"VGET (SCENWFL SCEODFL SCECMLN SCESSFL)" ,  /*get SuperCe variables   */
      "PROFILE"                             /*                        */
"VGET (p2plstmt p2punts) PROFILE"           /*get p2pcustm options    */
scenwfl_hold = SCENWFL                      /*put scenwfl in hold     */
sceodfl_hold = SCEODFL                      /*put sceodfl in hold     */
scecmln_hold = SCECMLN                      /*put scecmln in hold     */
scessfl_hold = SCESSFL                      /*put scessfl in hold     */
lsdivl = ''                                 /*initialize field        */
lsdivr = ''                                 /*initialize field        */
IF volidl /= '' THEN                        /*if volid left entered   */
   lsdivl = 'VOLUME('volidl')'              /*   use it               */
listdsi_rc = LISTDSI(dsnl lsdivl)           /*get left dataset info   */
dsnl_recfm = SYSRECFM                       /*get left dataset recfm  */
IF volidr /= '' THEN                        /*if volid left entered   */
   lsdivr = 'VOLUME('volidr')'              /*   use it               */
listdsi_rc = LISTDSI(dsnr lsdivr)           /*get right dataset info  */
dsnr_recfm = SYSRECFM                       /*get right dataset recfm */
IF lr_sw = 'L' THEN                         /*if copy left to right   */
   DO;new = 'L';old = 'R';END               /*  src = left;tgt = right*/
ELSE                                        /*else                    */
   DO;new = 'R';old = 'L';END               /*  src = right;tgt = left*/
bld_mbrlist_rc = Build_Mbrlist()            /*bld select stmts        */
IF bld_mbrlist_rc = 4 THEN                  /*if sel stmts not built  */
   DO                                       /*   do                   */
     QUEUE zedsmsg                          /*     put msg in stack   */
     QUEUE zedlmsg                          /*     put msg in stack   */
     RETURN 4                               /*     return to caller   */
   END                                      /*   end                  */
IF bld_mbrlist_rc = 8 THEN                  /*if sel stmts not built  */
   RETURN 8                                 /*     return to caller   */
IF volidl /= '' THEN                        /*                        */
   dsnl = ''                                /*                        */
If volidr /= '' THEN                        /*                        */
   dsnr = ''                                /*                        */
IF lr_sw = 'L' THEN                         /*                        */
   DO                                       /*                        */
      SCENWFL = dsnl                        /*                        */
      SCEODFL = dsnr                        /*                        */
   END                                      /*                        */
ELSE                                        /*                        */
   DO                                       /*                        */
      SCENWFL = dsnr                        /*                        */
      SCEODFL = dsnl                        /*                        */
   END                                      /*                        */
SCESSFL = p2plstmt                          /*set statements dsn      */
SCECMLN = '*'                               /*set member name         */
"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)" ,  /*store variables in      */
      "PROFILE"                             /*   profile pool         */
"CONTROL DISPLAY SAVE"                      /*save current display    */
"SELECT PGM(ISRSEPRM)"                      /*invoke SuperCe          */
"CONTROL DISPLAY RESTORE"                   /*restore display         */
SCESSFL = scessfl_hold                      /*restore scessfl         */
SCENWFL = scenwfl_hold                      /*restore scenwfl         */
SCEODFL = sceodfl_hold                      /*restore sceodfl         */
SCECMLN = scecmln_hold                      /*restore scecmln         */
"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)" ,  /*restore original vars to*/
      "PROFILE"                             /*   profile pool         */
RETURN 0                                    /*return to caller        */

Build_Mbrlist:
   dsnstat = SYSDSN(p2plstmt)               /*get dataset status      */
   SELECT                                   /*select                  */
     WHEN dsnstat = 'DATASET NOT FOUND' THEN/*  when not found        */
          CALL Allocate_Dataset             /*    allocate it         */
     WHEN dsnstat = 'OK' THEN               /*  when dataset is ok    */
           DO                               /*    do                  */
             ADDRESS TSO "DELETE" p2plstmt  /*      delete it         */
             CALL Allocate_Dataset          /*      reallocate it     */
           END                              /*    end                 */
   OTHERWISE                                /*otherwise               */
     NOP                                    /*  do nothing            */
   END                                      /*end select              */
   IF dataset_not_allocated THEN            /*if ds not allocated     */
      RETURN 4                              /*   return to caller     */
   IF Read_Old_SuperC_Stmts() > 0 THEN      /*if bad rc from read     */
      DO                                    /*   do                   */
        DROP scmbrlst.                      /*     drop stmts variable*/
        scmbrlst.0 = 0                      /*     reset nbr stmts    */
        stmt_nbr = scmbrlst.0               /*     reset stmt number  */
      END                                   /*   end                  */
   ELSE                                     /*else                    */
      stmt_nbr = scmbrlst.0                 /*   set stmt number      */
   stmt_nbr = stmt_nbr + 1                  /*incr stmt number        */
   scmbrlst.stmt_nbr = 'SELECT' mbrl        /*add 'select' to stmt    */
   scmbrlst.0 = stmt_nbr                    /*set nbr of sel stmts    */
   DO i = 1 to scmbrlst.0                   /*do once per sel stmt    */
      QUEUE scmbrlst.i                      /*   queue stmt to stack  */
   END                                      /*end                     */
   ADDRESS TSO "EXECIO" scmbrlst.0       ,  /*write stmts dataset     */
               "DISKW SCMBRLST (FINIS"      /*                        */
   ADDRESS TSO "FREE DDNAME(SCMBRLST)"      /*free stmts dataset      */
RETURN 0

Allocate_Dataset:
   dataset_not_allocated = 0                /*reset bad alloc sw      */
   ADDRESS TSO  "ALLOCATE"      ,           /*allocate stmts dataset  */
         "DDNAME(SCMBRLST)"     ,           /*                        */
         "DSNAME("p2plstmt")"   ,           /*set in p2pcustm         */
         "NEW REU"              ,           /*                        */
         "UNIT("p2punts")"      ,           /*set in p2pcustm         */
         "TRACKS"               ,           /*                        */
         "SPACE(15,15)"         ,           /*                        */
         "LRECL(80)"            ,           /*                        */
         "BLKSIZE(23440)"       ,           /*                        */
         "RECFM(F B)"           ,           /*                        */
         "DSORG(PS)"                        /*                        */
   alloc_rc = rc                            /*set alloc ret code      */
   IF alloc_rc > 0 THEN                     /*if bad return code      */
      CALL Bad_Allocate                     /*   display messages     */
RETURN

Bad_Allocate:
   dataset_not_allocated = 1                /*set bad alloc sw        */
   term_width = SYSVAR(SYSWTERM)            /*get terminal width      */
   zedsmsg = 'Error - Press PF1       '     /*set short message       */
   zedlmsg = 'Error: REXX Exec P2PGSUP'  ,  /*                        */
     ' - Procedure Allocate_Dataset'        /*set long message        */
   zedlmsg = LEFT(zedlmsg,term_width)       /*set to term width       */
   msg2 = 'Error Allocating Dataset:'    ,  /*msg 2                   */
     p2plstmt                               /*                        */
   msg2 = LEFT(msg2,term_width)             /*set to term width       */
   zedlmsg = zedlmsg msg2                   /*add to long messge      */
   msg3 = LEFT('MESSAGE:',term_width)       /*msg 3                   */
   zedlmsg = zedlmsg msg3                   /*add to long message     */
   DO x = 1 to allocmsg.trapped             /*do once per err msg     */
      allocmsg.x = LEFT(allocmsg.x, ,       /*   set to term width    */
                  term_width)               /*                        */
      zedlmsg = zedlmsg allocmsg.x          /*   add to long message  */
   END                                      /*end                     */
RETURN

Read_Old_SuperC_Stmts:
   dsnstat = SYSDSN(SCESSFL)                /*get old stmt ds status  */
   IF dsnstat \= 'OK' THEN                  /*if not ok               */
      RETURN 12                             /*   return to caller     */
   ADDRESS TSO "ALLOCATE DDNAME(OLDSTMTS)", /*allocate old stmt ds    */
               "DA("SCESSFL") SHR"          /*                        */
   IF rc > 0 THEN                           /*if bad rc from allocate */
      RETURN 12                             /*   return to caller     */
   ADDRESS TSO "EXECIO * DISKR OLDSTMTS"  , /*read old stmts dataset  */
               "(STEM scmbrlst. FINIS"      /*                        */
   execio_rc = rc                           /*set return code         */
   ADDRESS TSO "FREE DDNAME(OLDSTMTS)"      /*free old stmts dataset  */
RETURN execio_rc
