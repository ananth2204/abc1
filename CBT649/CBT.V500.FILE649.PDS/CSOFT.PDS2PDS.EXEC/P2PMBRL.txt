/* REXX */
/*===================================================================*\
|Program Name: P2PMBRL                                                |
|Date Written: May 31, 1999                                           |
|      Author: Michael A. Newell                                      |
|              Austin, TX                                             |
|              http://wb4huc.home.texas.net                           |
|              http://wb4huc.home.texas.net/pds2pds                   |
|                                                                     |
| Description: This program is used in the PDS2PDS application. It    |
|              displays and processes the member list panel.          |
|                                                                     |
|   Called By: PDS2PDS                                                |
|                                                                     |
|       Calls: READDIR   P2PBTBL  (COBOL PROGRAMS)                    |
|              P2PGCPY   P2PLCPY                                      |
|              P2PGMOV   P2PLMOV                                      |
|              P2PGDEL   P2PLDEL                                      |
|              P2PGREN   P2PLREN                                      |
|              P2PGEDT   P2PLEDT                                      |
|              P2PGBRW   P2PLBRW                                      |
|              P2PGINF                                                |
|              P2PGCMP                                                |
|              P2PGALL   P2PLALL                                      |
|              P2PGSUP   P2PLSUP                                      |
|              P2PGTTL                                                |
|              P2PSTLF                                                |
|              P2PSTRT                                                |
|                                                                     |
\*===================================================================*/
ADDRESS ISPEXEC                             /*cmds default to ISPF    */
CALL Initialize_Variables                   /*init program variables  */
Call Get_Stored_Variables                   /*get scrn vars from pool */
maskdatal = LEFT(mbrleft,8) || maskoptl     /*mbr pattern and inc/exc */
maskdatar = LEFT(mbrrite,8) || maskoptr     /*mbr pattern and inc/exc */
old_displopt = LEFT(namesame,1)  || ,       /*bld display options     */
               LEFT(statsame,1)  || ,       /*  comparison field      */
               LEFT(statdiff,1)  || ,       /*                        */
               LEFT(namediff,1)  || ,       /*                        */
               LEFT(uniqleft,1)  || ,       /*                        */
               LEFT(uniqrite,1)  || ,       /*                        */
               LEFT(oldrleft,1)  || ,       /*                        */
               LEFT(oldrrite,1)             /*                        */
IF Read_Pds(dsnl,'L',maskdatal) > 0 THEN    /*if trouble reading dsn  */
   DO                                       /*   do                   */
     Call End_Of_Job                        /*     call eoj stuff     */
     RETURN pfkpresd                        /*     return to caller   */
   END                                      /*   end                  */
IF Read_Pds(dsnr,'R',maskdatar) > 0 THEN    /*if trouble reading dsn  */
   DO                                       /*   do                   */
     Call End_Of_Job                        /*     call eoj stuff     */
     RETURN pfkpresd                        /*     return to caller   */
   END                                      /*   end                  */
IF Create_Pds_Mbr_Table() > 0 THEN          /*if bad table create     */
   DO                                       /*   do                   */
     Call End_of_Job                        /*     do eoj stuff       */
     RETURN pfkpresd                        /*     return to caller   */
   END                                      /*   end                  */
IF displine = '' | dtl1 = '' THEN           /*fld is blank on first   */
   CALL Set_Initial_Display                 /*  time, so initialize   */
CALL Disp_Mbrl_Panel                        /*dspl mbr list panel     */
DO UNTIL pfkpresd = 'PF03' | ,              /*do until pf3 or pf4     */
         pfkpresd = 'PF15' | ,              /*   or pf15              */
         pfkpresd = 'PF16' | ,              /*   or pf16              */
         pfkpresd = 'PF04'                  /*   pressed              */
   IF list_panel_rc = 8 THEN                /*   if pf3/pf4 pressed   */
        ITERATE                             /*      loop again        */
   IF list_panel_rc \= 0 THEN               /*   if bad rc from panel */
      LEAVE                                 /*      leave loop        */
   SELECT                                   /*   select               */
     WHEN Check_DisplOpt() = 1 THEN         /*     if displopts chngd */
          CALL Refresh_Display              /*        refresh display */
     WHEN displopt_rc = 12 THEN             /*     if err in displopts*/
          NOP                               /*        exit select stmt*/
     WHEN zcmd \= '' THEN                   /*     if prmy command    */
          CALL Process_Primary_Commands     /*        process it      */
     WHEN gcmdl \= ' ' THEN                 /*     if global cmd left */
          CALL Process_Global_Commands   ,  /*        process it      */
               gcmdl, 'L'                   /*                        */
     WHEN gcmdr \= ' ' THEN                 /*     if global cmd right*/
          CALL Process_Global_Commands   ,  /*        process it      */
               gcmdr, 'R'                   /*                        */
     WHEN ztdsels > 0 THEN                  /*     if line command    */
          CALL Process_Line_Commands        /*        process it      */
   OTHERWISE                                /*   otherwise            */
      CALL Fix_Position                     /*     retain panel pos   */
   END                                      /*   end select           */
   IF error_msg THEN                        /*   if any error         */
      DO                                    /*      do                */
        pnlname = ''                        /*        blank panel name*/
        autosel = 'AUTOSEL(YES)'            /*        set autosel on  */
        CALL Disp_Mbrl_Panel                /*        display panel   */
        error_msg = 0                       /*        reset err sw    */
      END                                   /*      end               */
   ELSE                                     /*   else                 */
      CALL Disp_Mbrl_Panel                  /*      disp normal panel */
END                                         /*end                     */
CALL End_Of_Job                             /*do end of job stuff     */
RETURN pfkpresd                             /*return to calling pgm   */

End_Of_Job:
   INTERPRET 'TBCLOSE' tblname              /*close mbr list table    */
   Call Put_Stored_Variables                /*put screen vars in pool */
RETURN

Get_Stored_Variables:
   "VGET (dsnl"     ,                       /*dataset name - left     */
         "dsnr"     ,                       /*dataset name - left     */
         "mbrleft"  ,                       /*member name - left      */
         "mbrrite"  ,                       /*member name - right     */
         "maskoptl" ,                       /*member name pattern     */
         "maskoptr" ,                       /*member name pattern     */
         "cnfrml"   ,                       /*dataset prot - left     */
         "cnfrmr"   ,                       /*dataset prot - right    */
         "namesame" ,                       /*same name sel proc opt  */
         "statsame" ,                       /*name/stats sel proc opt */
         "statdiff" ,                       /*diff stats sel proc opt */
         "namediff" ,                       /*diff name sel proc opt  */
         "uniqleft" ,                       /*only left side proc opt */
         "uniqrite" ,                       /*only right side proc opt*/
         "oldrleft" ,                       /*show l mbrs older than r*/
         "oldrrite" ,                       /*show r mbrs older than l*/
         "volidl"   ,                       /*volser name - left      */
         "volidr"   ,                       /*volser name - right     */
         "dtl1"     ,                       /*detail line 1           */
         "dtl2"     ,                       /*detail line 2           */
         "dtl3"     ,                       /*detail line 3           */
         "dtl4"     ,                       /*detail line 4           */
         "dtl5"     ,                       /*detail line 5           */
         "dtl6"     ,                       /*detail line 6           */
         "dtl7"     ,                       /*detail line 7           */
         "hdl"      ,                       /*left side header line   */
         "hdr"      ,                       /*right side header line  */
         "displine" ,                       /*stats line to show      */
         "p2pverno)",                       /*stats line to show      */
         "PROFILE"                          /*user's profile pool     */
RETURN

Put_Stored_Variables:
   "VPUT (dsnl"     ,                       /*dataset name - left     */
         "dsnr"     ,                       /*dataset name - left     */
         "mbrleft"  ,                       /*member name - left      */
         "mbrrite"  ,                       /*member name - right     */
         "maskoptl" ,                       /*member name pattern     */
         "maskoptr" ,                       /*member name pattern     */
         "cnfrml"   ,                       /*dataset prot - left     */
         "cnfrmr"   ,                       /*dataset prot - right    */
         "namesame" ,                       /*same name sel proc opt  */
         "statsame" ,                       /*name/stats sel proc opt */
         "statdiff" ,                       /*diff stats sel proc opt */
         "namediff" ,                       /*diff name sel proc opt  */
         "uniqleft" ,                       /*only left side proc opt */
         "uniqrite" ,                       /*only right side proc opt*/
         "oldrleft" ,                       /*show l mbrs older than r*/
         "oldrrite" ,                       /*show r mbrs older than l*/
         "volidl"   ,                       /*volser name - left      */
         "volidr"   ,                       /*volser name - right     */
         "dtl1"     ,                       /*detail line 1           */
         "dtl2"     ,                       /*detail line 2           */
         "dtl3"     ,                       /*detail line 3           */
         "dtl4"     ,                       /*detail line 4           */
         "dtl5"     ,                       /*detail line 5           */
         "dtl6"     ,                       /*detail line 6           */
         "dtl7"     ,                       /*detail line 7           */
         "hdl"      ,                       /*left side header line   */
         "hdr"      ,                       /*right side header line  */
         "displine)",                       /*stats line to show      */
         "PROFILE"                          /*user's profile pool     */
RETURN

Set_Initial_Display:
   displine = 'dtl1'
   dtl1 = '$Z @Z*mbrl    *stat1l                   $Z @Z*mbrr    *stat1r'
   dtl2 = 'omit'
   dtl3 = 'omit'
   dtl4 = 'omit'
   dtl5 = 'omit'
   dtl6 = 'omit'
   dtl7 = 'omit'
   hdl = 'vv.mm Created  Changed'
   hdr = 'vv.mm Created  Changed'
RETURN

Check_DisplOpt:
   displopt_rc = 0                          /*reset return code       */
   new_displopt = LEFT(namesame,1)  || ,    /*bld new display option  */
                  LEFT(statsame,1)  || ,    /*    comparison field    */
                  LEFT(statdiff,1)  || ,    /*                        */
                  LEFT(namediff,1)  || ,    /*                        */
                  LEFT(uniqleft,1)  || ,    /*                        */
                  LEFT(uniqrite,1)  || ,    /*                        */
                  LEFT(oldrleft,1)  || ,    /*                        */
                  LEFT(oldrrite,1)          /*                        */
   displopt_chars = STRIP(new_displopt)     /*                        */
   IF LENGTH(displopt_chars) > 1 THEN       /*                        */
      DO                                    /*do                      */
        "SETMSG MSG(PTPM001C)"              /*  show message          */
        csr_pos = csr_namesame              /*  set csr position      */
        error_msg = 1                       /*  set err msg           */
        cmdl = ''                           /*  blank lf line cmd     */
        cmdr = ''                           /*  blank rt line cmd     */
        displopt_rc = 12                    /*  set return code       */
        RETURN displopt_rc                  /*  return to caller      */
      END                                   /*end do                  */
   IF POS('/',old_displopt) \=         ,    /*if old/new opts not same*/
      POS('/',new_displopt) THEN            /*                        */
      DO                                    /*   do                   */
        displopt_rc = 1                     /*     set changed switch */
        old_displopt = new_displopt         /*     set old to new     */
        cmdl = ''                           /*     blank lf line cmd  */
        cmdr = ''                           /*     blank rt line cmd  */
      END                                   /*   end                  */
RETURN displopt_rc

Read_Pds:
   ARG dsn,lr_flag, maskdata                /*get args from calller   */
   bldmsg1 = gather_msg                     /*set panel message       */
   bldmsg2 = dsn                            /*set panel message       */
   volid = ''                               /*blank volume parm       */
   unit_parm = ''                           /*blank unit parm         */
   INTERPRET 'volid = volid'lr_flag         /*get volume id (volser)  */
   IF volid \= '' THEN                      /*if volid entered        */
      DO                                    /*   do                   */
        bldmsg3 = 'From Volume'             /*     set panel message  */
        bldmsg4 = volid                     /*     set panel message  */
      END                                   /*   end                  */
   CALL Show_Popup_Window                   /*display panel           */
   bldmsg3 = ''                             /*blank panel message     */
   bldmsg4 = ''                             /*blank panel message     */
   IF volid \= '' THEN                      /*if volid entered        */
      DO                                    /*   do                   */
         volid = 'VOLUME('volid')'          /*     set volume parm    */
         unit_parm = 'UNIT('p2puntu')'      /*     set unit parm      */
      END                                   /*                        */
   ADDRESS TSO "FREE DDNAME(PDSIN)"         /*just in case            */
   ADDRESS TSO "FREE DDNAME(PDSOUT)"        /*just in case            */
   ADDRESS TSO "ALLOCATE DD(PDSIN)"      ,  /*allocate input pds      */
                        "DA("dsn")"      ,
                        "RECFM(U)"       ,
                        "LRECL(256)"     ,
                        unit_parm        ,
                        volid            ,
                        "BLKSIZE(256)"   ,
                        "SHR"
   alloc_rc = rc                            /*set return code         */
   IF alloc_rc > 0 THEN                     /*if bad return code      */
      DO                                    /*   do                   */
        msg_dsn = dsn                       /*     tell which dataset */
        CALL Bad_Allocate                   /*     display messages   */
        RETURN alloc_rc                     /*     return to caller   */
      END                                   /*   end                  */
   ADDRESS TSO "ALLOCATE DDNAME(PDSOUT)" ,  /*allocate output seq     */
                        "NEW REU"        ,
                        "UNIT("p2puntw")",
                        "TRACKS"         ,
                        "SPACE(15,15)"   ,
                        "LRECL(80)"      ,
                        "BLKSIZE(0)"     ,
                        "RECFM(F B)"     ,
                        "DSORG(PS)"
   alloc_rc = rc                            /*set return code         */
   IF alloc_rc > 0 THEN                     /*if bad return code      */
      DO                                    /*   do                   */
        msg_dsn = 'DDNAME(PDSOUT)'          /*     tell which dataset */
        ADDRESS TSO "FREE DDNAME(PDSIN)"    /*     free input pds     */
        CALL Bad_Allocate                   /*     display messages   */
        RETURN alloc_rc                     /*     return to caller   */
      END                                   /*   end                  */
   CALL READDIR                             /*call cobol pgm          */
   readdir_rc = RESULT                      /*get return code         */
   IF readdir_rc > 0 THEN                   /*if bad return code      */
      DO                                    /*   do                   */
        ADDRESS TSO "FREE DDNAME(PDSIN)"    /*     free input pds     */
        ADDRESS TSO "FREE DDNAME(PDSOUT)"   /*     free seq output    */
        RETURN readdir_rc                   /*     return to caller   */
      END                                   /*   end                  */
   IF lr_flag = 'L' THEN                    /*if left-side file       */
      DO                                    /*   do                   */
        ADDRESS TSO "FREE DDNAME(MBRLISTL)" /*     free file          */
        mbrddn = 'MBRLISTL'                 /*     set ddname         */
      END                                   /*   end                  */
   ELSE                                     /*else                    */
      DO                                    /*   do                   */
        ADDRESS TSO "FREE DDNAME(MBRLISTR)" /*     free right-side dd */
        mbrddn = 'MBRLISTR'                 /*     set right-side ddn */
      END                                   /*   end                  */
   ADDRESS TSO "ALLOCATE DD("mbrddn")",     /*allocate mbr list file  */
                        "NEW REU"        ,
                        "UNIT("p2puntw")",
                        "TRACKS"         ,
                        "SPACE(15,15)"   ,
                        "LRECL(80)"      ,
                        "BLKSIZE(0)"     ,
                        "RECFM(F B)"     ,
                        "DSORG(PS)"
   alloc_rc = rc                            /*set return code         */
   IF alloc_rc > 0 THEN                     /*if bad return code      */
      DO                                    /*   do                   */
        msg_dsn = ,                         /*     set dsn in message */
        'DDNAME(MBRLIST'lr_flag')'          /*                        */
        ADDRESS TSO "FREE DDNAME(PDSIN)"    /*     free input pds     */
        ADDRESS TSO "FREE DDNAME(PDSOUT)"   /*     free output seq    */
        CALL Bad_Allocate                   /*     display messages   */
        RETURN alloc_rc                     /*     return to caller   */
      END                                   /*   end                  */
   ADDRESS TSO "EXECIO * DISKR PDSOUT",     /*read member list into   */
               "(STEM" pdsmem. "FINIS"      /*     stemmed variable   */
   nbr_mbrs = pdsmem.0                      /*set nbr of members      */
   ADDRESS TSO "EXECIO" nbr_mbrs "DISKW" ,  /*write member list to    */
      mbrddn "(STEM" pdsmem. "FINIS"        /*  new file              */
   DROP pdsmem.                             /*drop compound variable  */
   ADDRESS TSO "FREE DDNAME(PDSIN)"         /*free input file         */
   ADDRESS TSO "FREE DDNAME(PDSOUT)"        /*free output file        */
RETURN readdir_rc

Bad_Allocate:
   dataset_not_allocated = 1                /*set bad alloc sw        */
   term_width = SYSVAR(SYSWTERM)            /*get term width          */
   zedsmsg = 'Error - Press PF1       '     /*set short message       */
   zedlmsg = 'Error: REXX Exec P2PMBRL'  ,  /*                        */
     ' - Procedure Read_PDS'                /*set long message        */
   zedlmsg = LEFT(zedlmsg,term_width)       /*set to term width       */
   msg2 = 'Error Allocating Dataset:'    ,  /*msg 2                   */
     msg_dsn                                /*                        */
   msg2 = LEFT(msg2,term_width)             /*set to term width       */
   zedlmsg = zedlmsg msg2                   /*add to long messge      */
   msg3 = LEFT('MESSAGE:',term_width)       /*msg 3                   */
   zedlmsg = zedlmsg msg3                   /*add to long message     */
   DO x = 1 to termout.trapped              /*do once per error msg   */
      termout.x = LEFT(termout.x,term_width)/*   set to term width    */
      zedlmsg = zedlmsg termout.x           /*   add to long message  */
   END                                      /*end                     */
   "SETMSG MSG(ISRZ001)"                    /*display messages        */
RETURN

Create_Pds_Mbr_Table:
   bldmsg1 = display_msg                    /*set panel message       */
   bldmsg2 = ' '                            /*blank panel message     */
   bldmsg3 = ' '                            /*blank panel message     */
   CALL Show_Popup_Window                   /*display panel           */
   tbcreate_rc = 0                          /*init return code        */
   pnl_msg = 'MSG()'                        /*set panel message       */
   displopt = POS('/',old_displopt)         /*set display opt         */
   tbcreate_rc = P2PBTBL()                  /*call cobol pgm          */
   ADDRESS TSO "FREE DDNAME(MBRLISTL)"      /*free mbr list left file */
   ADDRESS TSO "FREE DDNAME(MBRLISTR)"      /*free mbr list right file*/
   displopt = 0                             /*reset display opt field */
   IF LEFT(tbcreate_rc,1) = 'E' THEN        /*if err in cobol program */
      DO                                    /*   do                   */
        tbcreate_rc = ,                     /*     get return code    */
          SUBSTR(tbcreate_rc,3,2)           /*                        */
        RETURN tbcreate_rc                  /*     return to caller   */
      END                                   /*   end                  */
   IF LEFT(tbcreate_rc,1) = '1' THEN        /*if good data returned   */
      DO                                    /*   do                   */
        PARSE VAR tbcreate_rc          ,    /*     break rc into parts*/
          rtn_type tblname memlo memro ,    /*                        */
          nbr_of_mbrs                       /*                          */
        tbcreate_rc = 0                     /*                        */
      END                                   /*                        */
RETURN tbcreate_rc

Show_Popup_Window:
   "CONTROL DISPLAY LOCK"                   /*lock display            */
   "ADDPOP ROW(11) COLUMN(8)"               /*popup window position   */
   "DISPLAY PANEL(P2PPMSG)"                 /*dspl panel in window    */
   "REMPOP"                                 /*remove window           */
RETURN

Process_Primary_Commands:
   IF zcmd = '' THEN                        /*if no command entered   */
      RETURN                                /*   just return          */
   PARSE VAR zcmd ,                         /*parse primary cmd into  */
      prmy_cmd ,                            /*  primary cmd           */
      prmy_cmd_parm                         /*  and cmd parm          */
   cmdl = ''                                /*blank left line cmd     */
   cmdr = ''                                /*blank right line cmd    */
   csr_row = 0                              /*reset cursor row        */
   SELECT                                   /*select                  */
     WHEN prmy_cmd = 'LOCATE'  | ,          /*  when 'locate' cmd     */
       prmy_cmd = 'LOC'        | ,          /*                        */
       prmy_cmd = 'L' THEN                  /*                        */
       CALL Locate_Member                   /*    call locate member  */
     WHEN prmy_cmd = 'FLIP'    | ,          /*  when 'flip' cmd       */
       prmy_cmd = 'FL' THEN                 /*                        */
       CALL Flip_Display                    /*    call flip dsply     */
     WHEN prmy_cmd = 'REFRESH' | ,          /*  when 'refresh' cmd    */
       prmy_cmd = 'REF'        | ,          /*                        */
       prmy_cmd = 'R' THEN                  /*                        */
       CALL Refresh_Display                 /*    call refresh dsply  */
     WHEN prmy_cmd = 'LF' THEN              /*   when 'lf' cmd        */
       CALL Move_Stats_Left                 /*     call mov stats left*/
     WHEN prmy_cmd = 'RI' THEN              /*   when 'ri' cmd        */
       CALL Move_Stats_Right                /*     call mov stats rite*/
   OTHERWISE                                /*otherwise               */
       CALL Fix_Position                    /*                        */
   END                                      /*end                     */
RETURN

Locate_Member:
   IF prmy_cmd_parm = '' THEN               /*if no mbr name to find  */
      RETURN                                /*   just return          */
   "TBTOP" tblname                          /*go to top of table      */
   mbrl = LEFT(prmy_cmd_parm,8)             /*set tbscan parm         */
   mbrr = LEFT(prmy_cmd_parm,8)             /*set tbscan parm         */
   "TBSCAN" tblname                    ,    /*scan table for name     */
           "ARGLIST(mbrl,mbrr)"        ,    /*                        */
           "CONDLIST(LE,LE)"           ,    /*                        */
           "PREVIOUS"                  ,    /*                        */
           "POSITION(crpn)"            ,    /*                        */
           "ROWID(currow)"                  /*                        */
   tbscan_rc = rc                           /*get scan return code    */
   IF tbscan_rc = 0 THEN                    /*if good return code     */
      "TBSKIP" tblname "ROW("currow")"      /*     skip to mbr name   */
RETURN

Flip_Display:
   dsnl_hold = dsnl                         /*place dsnl in hold      */
   dsnl = dsnr                              /*swap left dataset name  */
   dsnr = dsnl_hold                         /*swap right dataset name */
   dsnld_hold = dsnld                       /*place panel dsn in hold */
   dsnld = dsnrd                            /*swap left panel dsn     */
   dsnrd = dsnld_hold                       /*swap right panel dsn    */
   volid_hold = volidl                      /*swap left volser name   */
   volidl = volidr                          /*place r volser in hold  */
   volidr = volid_hold                      /*swap right volser name  */
   cnfrml_hold = cnfrml                     /*place cnfrml in hold    */
   cnfrml = cnfrmr                          /*swap cnfrml             */
   cnfrmr = cnfrml_hold                     /*swap cnfrmr             */
   mbrleft_hold = mbrleft                   /*place mbrleft in hold   */
   mbrleft = mbrrite                        /*swap mbrleft            */
   mbrrite = mbrleft_hold                   /*swap mbrrite            */
   maskoptl_hold = maskoptl                 /*place maskoptl in hold  */
   maskoptl = maskoptr                      /*swap maskoptl           */
   maskoptr = maskoptl_hold                 /*swap maskoptr           */
   maskdatal_hold = maskdatal               /*place mask data in hold */
   maskdatal = maskdatar                    /*swap left mask data     */
   maskdatar = maskdatal_hold               /*swap right mask data    */
   CALL Refresh_Display                     /*refresh the display     */
RETURN

Refresh_Display:
   INTERPRET 'TBCLOSE' tblname              /*close mbr list table    */
   CALL Read_Pds dsnl,'L',maskdatal         /*if trouble reading dsn  */
   CALL Read_Pds dsnr,'R',maskdatar         /*if trouble reading dsn  */
   CALL Create_Pds_Mbr_Table                /*create mbr list table   */
   CALL Fix_Position                        /*fix display position    */
RETURN

Move_Stats_Left:
   CALL P2PSTLF displine                    /*move stats to the left  */
   CALL Get_Shifted_Lines                   /*get new order of lines  */
   CALL Fix_Position                        /*fix display position    */
RETURN

Move_Stats_Right:
   CALL P2PSTRT displine                    /*move stats to the right */
   CALL Get_Shifted_Lines                   /*get new order of lines  */
   CALL Fix_Position                        /*fix display position    */
RETURN

Get_Shifted_Lines:
   PARSE PULL dtl7                          /*get new detail line 7   */
   PARSE PULL dtl6                          /*get new detail line 6   */
   PARSE PULL dtl5                          /*get new detail line 5   */
   PARSE PULL dtl4                          /*get new detail line 4   */
   PARSE PULL dtl3                          /*get new detail line 3   */
   PARSE PULL dtl2                          /*get new detail line 2   */
   PARSE PULL dtl1                          /*get new detail line 1   */
   PARSE PULL displine                      /*get new displayed line #*/
   PARSE PULL hdl                           /*get new left heading    */
   PARSE PULL hdr                           /*get new right heading   */
RETURN

Process_Global_Commands:
   ARG gcmd,lr_sw                           /*get cmd and left/rite sw*/
   gc_rtn_code = 0                          /*reset global cmd rtn cde*/
   hold_ztdtop = ztdtop                     /*place ztdtop in hold    */
   csr_row = 0                              /*reset cursor row        */
   cmdl = ''                                /*blank left line cmd     */
   cmdr = ''                                /*blank right line cmd    */
   SELECT                                   /*select                  */
     WHEN gcmd = 'C' THEN                   /*  when command 'C'      */
       CALL Execute_Copy_G_Command          /*                        */
     WHEN gcmd = 'M' THEN                   /*  when command 'M'      */
       CALL Execute_Move_G_Command          /*                        */
     WHEN gcmd = 'D' THEN                   /*  when command 'D'      */
       CALL Execute_Delete_G_Command        /*                        */
     WHEN gcmd = 'R' THEN                   /*  when command 'R'      */
       CALL Execute_Rename_G_Command        /*                        */
     WHEN gcmd = 'E' THEN                   /*  when command 'R'      */
       CALL Execute_Edit_G_Command          /*                        */
     WHEN gcmd = 'B' | gcmd = 'V' THEN      /*  when command 'B'      */
       CALL Execute_Browse_G_Command        /*                        */
     WHEN gcmd = 'Z' THEN                   /*  when command 'Z'      */
       CALL Execute_Compress_G_Command      /*                        */
     WHEN gcmd = 'I' THEN                   /*  when command 'I'      */
       CALL Execute_Info_G_Command          /*                        */
     WHEN gcmd = 'AL' THEN                  /*  when command 'AL'     */
       CALL Execute_All_G_Command           /*                        */
     WHEN gcmd = 'SC' THEN                  /*  WHEN command 'SC'     */
       CALL Execute_SC_G_Command            /*                        */
     WHEN gcmd = 'TL' THEN                  /*  WHEN command 'TL'     */
       CALL Execute_Total_G_Command         /*                        */
   OTHERWISE                                /*otherwise               */
     DO                                     /*  do                    */
       INTERPRET                         ,  /*    set csr position    */
         "csr_pos = 'CURSOR(GCMD"lr_sw")'"  /*                        */
       pnl_msg = 'MSG(PTPM004)'             /*    set error message   */
       CALL Fix_Position                    /*    fix display pos     */
       RETURN                               /*    return to caller    */
     END                                    /*  end                   */
   END                                      /*end                     */
   INTERPRET "gcmd"lr_sw" = ''"             /*blank global cmd field  */
   INTERPRET                         ,      /*set cursor position     */
     "csr_pos = 'CURSOR(GCMD"lr_sw")'"      /*                        */
   CALL Fix_Position                        /*fix display position    */
RETURN

Execute_Copy_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGCPY'       || ,       /*call P2PGCPY            */
                '(lr_sw,'        || ,       /*  left/right switch     */
                 'tblname,'      || ,       /*  mbr list table name   */
                 'dsnl,'         || ,       /*  left dsname           */
                 'dsnr,'         || ,       /*  right dsname          */
                 'volidl,'       || ,       /*  left dsn volser       */
                 'volidr,'       || ,       /*  right dsn volser      */
                 'p2pverno,'     || ,       /*  pds2pds version       */
                 'memlo,'        || ,       /*  nbr mbrs left side    */
                 'memro,'        || ,       /*  nbr mbrs right side   */
                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   PARSE PULL memlo                         /*get memlo from stack    */
   PARSE PULL memro                         /*get memro from stack    */
RETURN

Execute_Move_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGMOV'       || ,       /*call P2PGMOV            */
                '(lr_sw,'        || ,       /*  left/right switch     */
                 'tblname,'      || ,       /*  mbr list table name   */
                 'dsnl,'         || ,       /*  left dsname           */
                 'dsnr,'         || ,       /*  right dsname          */
                 'volidl,'       || ,       /*  left dsn volser       */
                 'volidr,'       || ,       /*  right dsn volser      */
                 'p2pverno,'     || ,       /*  pds2pds version       */
                 'memlo,'        || ,       /*  nbr mbrs left side    */
                 'memro,'        || ,       /*  nbr mbrs right side   */
                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   PARSE PULL memlo                         /*get memlo from stack    */
   PARSE PULL memro                         /*get memro from stack    */
RETURN

Execute_Delete_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGDEL'       || ,       /*call P2PGDEL            */
                '(lr_sw,'        || ,       /*  left/right switch     */
                 'tblname,'      || ,       /*  mbr list table name   */
                 'dsnl,'         || ,       /*  left dsname           */
                 'dsnr,'         || ,       /*  right dsname          */
                 'volidl,'       || ,       /*  left dsn volser       */
                 'volidr,'       || ,       /*  right dsn volser      */
                 'p2pverno,'     || ,       /*  pds2pds version       */
                 'memlo,'        || ,       /*  left member name      */
                 'memro,'        || ,       /*  right member name     */
                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   PARSE PULL memlo                         /*get memlo from stack    */
   PARSE PULL memro                         /*get memro from stack    */
RETURN

Execute_Rename_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGREN'       || ,       /*call P2PGREN            */
                '(lr_sw,'        || ,       /*  left/right switch     */
                 'tblname,'      || ,       /*  mbr list table name   */
                 'dsnl,'         || ,       /*  left dsname           */
                 'dsnr,'         || ,       /*  right dsname          */
                 'volidl,'       || ,       /*  left dsn volser       */
                 'volidr,'       || ,       /*  right dsn volser      */
                 'p2pverno,'     || ,       /*  pds2pds version       */
                 'memlo,'        || ,       /*  left member name      */
                 'memro,'        || ,       /*  right member name     */
                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
RETURN

Execute_Edit_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGEDT'       || ,       /*call P2PGEDT            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'volidl,'       || ,       /*  left dsn volser       */
                 'volidr,'       || ,       /*  right dsn volser      */
                 'p2pverno,'     || ,       /*     pds2pds version    */
                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
RETURN

Execute_Browse_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGBRW'       || ,       /*call P2PGBRW            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'gcmd,'         || ,       /*     left line command  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'volidl,'       || ,       /*  left dsn volser       */
                 'volidr,'       || ,       /*  right dsn volser      */
                 'p2pverno,'     || ,       /*     pds2pds version    */
                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
RETURN

Execute_Compress_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGCMP'       || ,       /*call P2PGCMP            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'volidl,'       || ,       /*     left dsn volser    */
                 'volidr)'                  /*     right dsn volser   */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
RETURN

Execute_Info_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGINF'       || ,       /*call P2PGINF            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'volidl,'       || ,       /*     left dsn volser    */
                 'volidr)'                  /*     right dsn volser   */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
RETURN

Execute_All_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGALL'       || ,       /*call P2PGALL            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'p2pverno)'                /*     pds2pds version    */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
RETURN

Execute_SC_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGSUP'       || ,       /*call P2PGSUP            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'volidl,'       || ,       /*                        */
                 'volidr)'                  /*                        */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF gc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
RETURN

Execute_Total_G_Command:
   INTERPRET                        ,
   'gc_rtn_code = P2PGTTL'       || ,       /*call P2PGTTL            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'p2pverno)'                /*     pds2pds version    */
   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
RETURN

Process_Line_Commands:
   hold_ztdtop = ztdtop                     /*place ztdtop in hold    */
   lc_rtn_code = 0                          /*init line cmd rtn code  */
   process_flag = 1                         /*set process flag        */
   DO WHILE process_flag                    /*do while flag set       */
      IF cmdl \= '' & cmdr \= '' THEN       /*if 2 line cmds entered  */
         DO                                 /*  do                    */
            pnl_msg = 'MSG(PTPM008)'        /*    set error message   */
            CALL Line_Command_Error         /*    do invalid cmd stuff*/
            csr_pos = 'CURSOR(CMDL)'        /*    set cursor position */
            RETURN                          /*    return to caller    */
         END                                /*  end                   */
      IF cmdl \= ' ' THEN                   /*   if right cmd entered */
         DO                                 /*      do                */
           lcmd = cmdl                      /*        set line command*/
           lr_sw = 'L'                      /*        set l/r switch  */
           CALL Execute_Line_Command        /*        exec line cmd   */
         END                                /*      end               */
      IF error_msg THEN                     /*   if any error         */
         RETURN                             /*      return to caller  */
      IF cmdr \= ' ' THEN                   /*   if right cmd entered */
         DO                                 /*      do                */
           lcmd = cmdr                      /*        set line command*/
           lr_sw = 'R'                      /*        set l/r switch  */
           CALL Execute_Line_Command        /*        exec line cmd   */
         END                                /*      end               */
      IF error_msg THEN                     /*   if any error         */
         RETURN                             /*      end               */
      CALL Get_Next_Linecmd                 /*   get next line cmd    */
   END                                      /*end                     */
   cmdl = ' '                               /*blank left line cmd fld */
   cmdr = ' '                               /*blank right line cmd fld*/
   ztdtop = hold_ztdtop                     /*restore ztdtop          */
   CALL Fix_Position                        /*fix display position    */
RETURN

Execute_Line_Command:
   csr_row = crpn                           /*set cursor row          */
   INTERPRET "csr_pos = "  ,                /*set cursor position     */
             "'CURSOR(CMD"lr_sw")'"         /*set cursor row position */
   SELECT                                   /*select                  */
     WHEN lcmd = 'C' THEN                   /*  when command 'C'      */
       CALL Execute_Copy_L_Command          /*                        */
     WHEN lcmd = 'M' THEN                   /*  when command 'M'      */
       CALL Execute_Move_L_Command          /*                        */
     WHEN lcmd = 'D' THEN                   /*  when command 'D'      */
       CALL Execute_Delete_L_Command        /*                        */
     WHEN lcmd = 'R' THEN                   /*  when command 'R'      */
       CALL Execute_Rename_L_Command        /*                        */
     WHEN lcmd = 'E' THEN                   /*  when command 'R'      */
       CALL Execute_Edit_L_Command          /*                        */
     WHEN lcmd = 'B' | lcmd = 'V' THEN      /*  when command 'B'      */
       CALL Execute_Browse_L_Command        /*                        */
     WHEN lcmd = 'AL' THEN                  /*  when command 'AL'     */
       CALL Execute_All_L_Command           /*                        */
     WHEN lcmd = 'SC' THEN                  /*  WHEN command 'SC'     */
       CALL Execute_SC_L_Command            /*                        */
   OTHERWISE                                /*otherwise               */
     DO                                     /*  do                    */
       pnl_msg = 'MSG(PTPM005)'             /*    set error message   */
       CALL Line_Command_Error              /*    do invalid cmd stuff*/
       RETURN                               /*    return to caller    */
     END                                    /*  end                   */
   END                                      /*end                     */
RETURN

Get_Next_Linecmd:
   IF ztdsels = 1 THEN                      /*if this is last line cmd*/
      DO                                    /*   do                   */
        process_flag = 0                    /*     reset process flag */
        RETURN                              /*     return to caller   */
      END                                   /*   end                  */
   "TBDISPL" tblname                ,       /*read next command line  */
           "POSITION(CRPN)"         ,       /*                        */
           "ROWID(CURROW)"                  /*                        */
RETURN

Execute_Copy_L_Command:
   INTERPRET ,                              /*                        */
     'IF mbr'lr_sw '= "" THEN;'  ,          /*if mbr name blank       */
        'RETURN'                            /*   return               */
   INTERPRET                        ,
   'lc_rtn_code = P2PLCPY'       || ,       /*call P2PLCPY            */
                '(lr_sw,'        || ,       /*  left/right switch     */
                 'tblname,'      || ,       /*  mbr list table name   */
                 'dsnl,'         || ,       /*  left dsname           */
                 'dsnr,'         || ,       /*  right dsname          */
                 'p2pverno,'     || ,       /*  pds2pds version       */
                 'memlo,'        || ,       /*  nbr mbrs left side    */
                 'memro,'        || ,       /*  nbr mbrs right side   */
                 'mbrl,'         || ,       /*  left member name      */
                 'mbrr,'         || ,       /*  right member name     */
                 'cnfrml,'       || ,       /*  left cnfrm line cmd   */
                 'cnfrmr,'       || ,       /*  right cnfrm line cmd  */
                 'volidl,'       || ,       /*  left volser           */
                 'volidr,'       || ,       /*  right volser          */
                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */
   IF lc_rtn_code = 10 THEN                 /*if no errors            */
      DO                                    /*   do                   */
        PARSE PULL memlo                    /*     get memlo from stak*/
        PARSE PULL memro                    /*     get memro from stak*/
        RETURN                              /*     return to caller   */
      END                                   /*   end                  */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Execute_Move_L_Command:
   INTERPRET ,                              /*                        */
     'IF mbr'lr_sw '= "" THEN;'  ,          /*if mbr name blank       */
        'RETURN'                            /*   return               */
   INTERPRET                        ,
   'lc_rtn_code = P2PLMOV'       || ,       /*call P2PLMOV            */
                '(lr_sw,'        || ,       /*  left/right switch     */
                 'tblname,'      || ,       /*  mbr list table name   */
                 'dsnl,'         || ,       /*  left dsname           */
                 'dsnr,'         || ,       /*  right dsname          */
                 'p2pverno,'     || ,       /*  pds2pds version       */
                 'memlo,'        || ,       /*  nbr mbrs left side    */
                 'memro,'        || ,       /*  nbr mbrs right side   */
                 'mbrl,'         || ,       /*  left member name      */
                 'mbrr,'         || ,       /*  right member name     */
                 'cnfrml,'       || ,       /*  left cnfrm line cmd   */
                 'cnfrmr,'       || ,       /*  rite cnfrm line cmd   */
                 'volidl,'       || ,       /*  left volser           */
                 'volidr,'       || ,       /*  right volser          */
                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */
   IF lc_rtn_code = 10 THEN                 /*if no errors            */
      DO                                    /*   do                   */
        PARSE PULL memlo                    /*     get memlo from stak*/
        PARSE PULL memro                    /*     get memro from stak*/
        RETURN                              /*     return to caller   */
      END                                   /*   end                  */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Execute_Delete_L_Command:
   INTERPRET ,                              /*                        */
     'IF mbr'lr_sw '= "" THEN;'  ,          /*if mbr name blank       */
        'RETURN'                            /*   return               */
   INTERPRET                        ,
   'lc_rtn_code = P2PLDEL'       || ,       /*call P2PLDEL            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'p2pverno,'     || ,       /*     pds2pds version    */
                 'memlo,'        || ,       /*     nbr mbrs left side */
                 'memro,'        || ,       /*     nbr mbrs right side*/
                 'mbrl,'         || ,       /*     left member name   */
                 'mbrr,'         || ,       /*     right member name  */
                 'cnfrml,'       || ,       /*     left cnfrm line cmd*/
                 'cnfrmr,'       || ,       /*     rite cnfrm line cmd*/
                 'volidl,'       || ,       /*  left volser           */
                 'volidr,'       || ,       /*  right volser          */
                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */
   IF lc_rtn_code = 10 THEN                 /*if no errors            */
      DO                                    /*   do                   */
        PARSE PULL memlo                    /*     get memlo from stak*/
        PARSE PULL memro                    /*     get memro from stak*/
        RETURN                              /*     return to caller   */
      END                                   /*   end                  */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Execute_Rename_L_Command:
   INTERPRET ,                              /*                        */
     'IF mbr'lr_sw '= "" THEN;'  ,          /*if mbr name blank       */
        'RETURN'                            /*   return               */
   INTERPRET                        ,
   'lc_rtn_code = P2PLREN'       || ,       /*call P2PLREN            */
                '(lr_sw,'        || ,       /*  left/right switch     */
                 'tblname,'      || ,       /*  mbr list table name   */
                 'dsnl,'         || ,       /*  left dsname           */
                 'dsnr,'         || ,       /*  right dsname          */
                 'p2pverno,'     || ,       /*  pds2pds version       */
                 'mbrl,'         || ,       /*  left member name      */
                 'mbrr,'         || ,       /*  right member name     */
                 'volidl,'       || ,       /*  left volser           */
                 'volidr,'       || ,       /*  right volser          */
                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Execute_Edit_L_Command:
   INTERPRET ,                              /*                        */
     'IF mbr'lr_sw '= "" THEN;'  ,          /*if mbr name blank       */
        'RETURN'                            /*   return               */
   INTERPRET                        ,
   'lc_rtn_code = P2PLEDT'       || ,       /*call P2PLEDT            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'p2pverno,'     || ,       /*     pds2pds version    */
                 'mbrl,'         || ,       /*     left member name   */
                 'mbrr,'         || ,       /*     right member name  */
                 'volidl,'       || ,       /*  left volser           */
                 'volidr,'       || ,       /*  right volser          */
                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Execute_Browse_L_Command:
   INTERPRET ,                              /*                        */
     'IF mbr'lr_sw '= "" THEN;'  ,          /*if mbr name blank       */
        'RETURN'                            /*   return               */
   INTERPRET                        ,
   'lc_rtn_code = P2PLBRW'       || ,       /*call P2PLBRW            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'cmdl,'         || ,       /*     left line command  */
                 'cmdr,'         || ,       /*     right line command */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'p2pverno,'     || ,       /*     pds2pds version    */
                 'mbrl,'         || ,       /*     left member name   */
                 'mbrr,'         || ,       /*     right member name  */
                 'volidl,'       || ,       /*  left volser           */
                 'volidr,'       || ,       /*  right volser          */
                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Execute_All_L_Command:
   INTERPRET                        ,
   'lc_rtn_code = P2PLALL'       || ,       /*call P2PLALL            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'p2pverno,'     || ,       /*     pds2pds version    */
                 'mbrl,'         || ,       /*     left member name   */
                 'mbrr,'         || ,       /*     right member name  */
                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Execute_SC_L_Command:
   INTERPRET                        ,
   'lc_rtn_code = P2PLSUP'       || ,       /*call P2PLSUP            */
                '(lr_sw,'        || ,       /*     left/right switch  */
                 'tblname,'      || ,       /*     mbr list table name*/
                 'dsnl,'         || ,       /*     left dsname        */
                 'dsnr,'         || ,       /*     right dsname       */
                 'p2pverno,'     || ,       /*     pds2pds version    */
                 'mbrl,'         || ,       /*     left member name   */
                 'mbrr,'         || ,       /*     right member name  */
                 'volidl,'       || ,       /*     left dsn volser    */
                 'volidr)'                  /*     right dsn volser   */
   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */
      DO                                    /*   do                   */
        PARSE PULL p2psmsg                  /*     get system msg     */
        PARSE PULL p2plmsg                  /*     get system msg     */
        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */
      END                                   /*   end                  */
   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */
      PARSE PULL pnl_msg                    /*   get msg from stack   */
   IF lc_rtn_code > 0 THEN                  /*if bad return code      */
        CALL Line_Command_Error             /*     other error stuff  */
RETURN

Line_Command_Error:
   error_msg = 1                            /*set error switch        */
   csr_row = crpn                           /*set cursor row          */
   process_flag = 0                         /*reset process flag      */
RETURN

Disp_Mbrl_Panel:
   "TBDISPL" tblname           ,            /*display the panel       */
           pnlname             ,            /*                        */
           "POSITION(crpn)"    ,            /*                        */
           csr_pos             ,            /*                        */
           pnl_msg             ,            /*                        */
           "CSRROW("csr_row")" ,            /*                        */
           "ROWID(currow)"     ,            /*                        */
           autosel                          /*                        */
   csr_pos = 'CURSOR()'                     /*set cursor position     */
   pnl_msg = 'MSG()'                        /*set panel message       */
   pnlname = 'PANEL(P2PMBRL)'               /*set panel name          */
   autosel = 'AUTOSEL(NO)'                  /*set autoselect field    */
   csr_row = 0                              /*set cursor row          */
   list_panel_rc = rc                       /*get return code         */
   IF list_panel_rc <> 0 & ,                /*if not an acceptable rc */
      list_panel_rc <> 4 & ,                /*                        */
      list_panel_rc <> 8 THEN               /*                        */
      DO                                    /*   do                   */
        "SETMSG MSG(ISRZ002)"               /*     display error msg  */
         csr_pos = csr_fld                  /*     set cursor pos     */
         RETURN                             /*     return             */
      END                                   /*   end do               */
   IF list_panel_rc = 4 THEN                /*if line commands entered*/
      list_panel_rc = 0                     /*   set rc to zero       */
RETURN

Fix_Position:
   "TBTOP" tblname                          /*go to top of table      */
   "TBSKIP" tblname "NUMBER("ztdtop")"      /*skip to prev position   */
RETURN

Initialize_Variables:
   csr_namesame = 'CURSOR(NAMESAME)'
   csr_fld = 'CURSOR()'
   csr_pos = csr_fld
   msg_fld = 'MSG()'
   pnlname = 'PANEL(P2PMBRL)'
   autosel = 'AUTOSEL(NO)'
   error_msg = 0
   displopt = 0
   pfkpresd = ' '
   dummy = OUTTRAP("termout.",,"noconcat")
   "CONTROL ERRORS RETURN"
   gather_msg = 'PDS2PDS is reading the member list for'
   display_msg = 'PDS2PDS is creating the member list display'
   csr_row = 0
   "VGET (p2puntu p2puntw) PROFILE"         /*get custom unit name    */
RETURN
