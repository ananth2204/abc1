{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "SYSDHC", "INMTNODE": "BBX", "INMTUID": "MMSMAK", "INMFTIME": "20030915120016000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 23440, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CSOFT.PDS2PDS.EXEC", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CSOFT.PDS2PDS.EXEC": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 23440, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "030258", "DS1SCEXT": "b'\\x80[\\x90'", "DS1SCALO": "b'P\\x00\\x00\\x06'", "DS1LSTAR": "b'\\x00\\x07\\x04'", "DS1TRBAL": "b'y\\xa8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0b\\xc0\\x00\\x04\\x87`@'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0b\\xc0\\x00\\x04\\x87`@'", "b'X\\xf3\\x9a\\x08\\x00\\x00\\x00K\\x00\\x01\\x00K\\x00\\x08\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"PDS2PDS": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x17\\x00\\x99\\x06O\\x00\\x99)O\\tI\\x00-\\x00$\\x00\\x00\\xe2\\xe8\\xe2\\xc4\\xc8\\xc3@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1999-03-05T00:00:00", "modifydate": "1999-10-21T09:49:17", "lines": 45, "newlines": 36, "modlines": 0, "user": "SYSDHC"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: PDS2PDS                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This is the driver exec for the PDS2PDS application    |\n|                                                                     |\n|      Syntax: (TSO) PDS2PDS                                          |\n|                                                                     |\n|   Called By: Invocation from ISPF command line                      |\n|                                                                     |\n|       Calls: P2PDSNP                                                |\n|              P2PMBRL                                                |\n|              P2PCUSTM                                               |\n\\*===================================================================*/\nIF SYSVAR(\"SYSISPF\") = ,          /*if ispf is                       */\n         \"NOT ACTIVE\" THEN        /*   not active then               */\n   DO                             /*   do                            */\n     \"ISPF CMD(PDS2PDS)\"          /*     start ispf/pds2pds          */\n     EXIT                         /*     leave pds2pds/ispf          */\n   END                            /*   end                           */\nCALL P2PCUSTM                     /*customize p2p for your shop      */\nreturn_code = ' '                 /*initialize return code           */\nDO WHILE return_code = ' '        /*do while enter key being pressed */\n   return_code = P2PDSNP()        /*   PROCESS DSN ENTRY PANEL       */\n   IF return_code = 'PF03' | ,    /*   if pf3 or                     */\n      return_code = 'PF04' | ,    /*      pf4 from dsn entry panel   */\n      return_code = 'PF15' | ,    /*      pf15                       */\n      return_code = 'PF16' | ,    /*      pf16                       */\n      return_code > 0 THEN        /*      bad rc from dsn entry panel*/\n      LEAVE                       /*      quit                       */\n   return_code = P2PMBRL()        /*   process member list panel     */\n   IF return_code = 'PF03' THEN   /*   if pf3 from member list panel */\n      DO                          /*      do                         */\n         return_code = ' '        /*        reset return code        */\n         ITERATE                  /*        redisplay dsn entry panel*/\n      END                         /*      end                        */\n   IF return_code = 'PF04' THEN   /*   if pf4 from member list panel */\n      LEAVE                       /*      leave loop/exit pds2pds    */\nEND                               /*end do                           */\nEXIT                              /*exit pds2pds                     */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PCUSTM": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00G\\x00\\x99\\x14O\\x01\\x00\\x03\\x1f\\x08\\x11\\x00I\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xc4\\xc8\\xc3@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1999-05-24T00:00:00", "modifydate": "2000-01-31T08:11:47", "lines": 73, "newlines": 16, "modlines": 0, "user": "SYSDHC"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PCUSTM                                               |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: Modify the variables in this exec to suit your own     |\n|              requirements                                           |\n|                                                                     |\n|   Called By: PDS2PDS                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\n\nADDRESS ISPEXEC                             /*cmds default to ispf    */\n\n/*********************************************************************\\\n|                                                                     |\n| P2PUNTU is used when allocating the left- and right-side partitioned|\n| datasets when they are uncataloged. If the left- and right-side     |\n| datasets are cataloged, P2PUNTU is not used                         |\n|                                                                     |\n\\*********************************************************************/\n\np2puntu = 'SYSALLDA'                        /*set the UNIT dev name   */\n\n/*********************************************************************\\\n|                                                                     |\n| P2PUNTW is used when allocating new temporary work files. These     |\n| are the files created in P2PMBRL to hold the member lists for the   |\n| left- and right-side datasets. They are written to by COBOL program |\n| READDIR and read by COBOL program P2PBTBL. After P2PBTBL executes   |\n| these files are deleted.                                            |\n|                                                                     |\n\\*********************************************************************/\n\np2puntw = 'SYSALLDA'                        /*set the UNIT dev name   */\n\n/*********************************************************************\\\n|                                                                     |\n| P2PUNTS is used when allocating the SuperCe statements datasets     |\n| used in REXX execs P2PLSUP and P2PGSUP. These are permanent files.  |\n|                                                                     |\n\\*********************************************************************/\n\np2punts = 'SYSALLDA'                        /*set the UNIT dev name   */\n\n/*********************************************************************\\\n|                                                                     |\n| Set the SuperCe statements dataset names used in the Global SC and  |\n| line SC commands (P2PGSUP and P2PLSUP, respectively)                |\n|                                                                     |\n\\*********************************************************************/\n\np2pgstmt = \"P2PGSUP.STMT\"                   /*global sc stmts dsn     */\np2plstmt = \"P2PLSUP.STMT\"                   /*local  sc stmts dsn     */\n\n/*********************************************************************\\\n|                                                                     |\n| Write the default values to the user's variable profile pool        |\n|                                                                     |\n\\*********************************************************************/\n\n\"VPUT (p2puntu\"   ,                         /*unit device name        */\n      \"p2puntw\"   ,                         /*unit device name        */\n      \"p2punts\"   ,                         /*unit device name        */\n      \"p2pgstmt\"  ,                         /*global sc stmts dsn     */\n      \"p2plstmt)\" ,                         /*local  sc stmts dsn     */\n      \"PROFILE\"                             /*user's profile pool     */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PDSNP": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00E\\x00\\x99\\x03O\\x00\\x99\\x19o\\x12\\x02\\x00\\xbd\\x02\\x1e\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-07-15T12:02:45", "lines": 189, "newlines": 542, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PDSNP                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This program is used in the PDS2PDS application and    |\n|              displays and processes the Dataset Name Entry Panel    |\n|                                                                     |\n|   Called By: PDS2PDS                                                |\n|                                                                     |\n|       Calls: P2PDSNS                                                |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*cmds default to ISPF    */\nCall Get_Stored_Variables                   /*get scrn vars from pool */\nCALL Initialize_Variables                   /*init program variables  */\nloop_exit_flag = ' '                        /*initialize return code  */\nDO WHILE loop_exit_flag = ' '               /*loop until pf3/pf4      */\n   CALL Display_Dsn_Entry_Panel             /*  dspl dsn entry panel  */\n   IF entry_panel_rc = 8 THEN               /*  if pf3/pf4 pressed    */\n      DO                                    /*     do                 */\n        loop_exit_flag = pfkpresd           /*       set exit flag    */\n        ITERATE                             /*       loop again       */\n      END                                   /*     end                */\n   IF VALIDDSN(dsnl, dsnr) > 0 THEN         /*  if dsn was invalid    */\n      ITERATE                               /*     loop again         */\n   IF Validate_Mbr_Disp_Opts() > 0 THEN     /*  if bad proc options   */\n      ITERATE                               /*     loop again         */\n   loop_exit_flag = 'ENTER'                 /*  set loop exit flag    */\nEND                                         /*end                     */\nCall Put_Stored_Variables                   /*put screen vars in pool */\nRETURN loop_exit_flag                       /*EXIT PDS2PDS            */\n\nGet_Stored_Variables:\n   \"VGET (dsnl\"      ,                      /*dataset name - left     */\n         \"dsnr\"      ,                      /*dataset name - right    */\n         \"mbrleft\"   ,                      /*same name sel proc opt  */\n         \"mbrrite\"   ,                      /*same name sel proc opt  */\n         \"volidl\"    ,                      /*volser name - left      */\n         \"volidr\"    ,                      /*volser name - right     */\n         \"namesame\"  ,                      /*same name sel proc opt  */\n         \"statsame\"  ,                      /*name/stats sel proc opt */\n         \"statdiff\"  ,                      /*diff stats sel proc opt */\n         \"namediff\"  ,                      /*diff name sel proc opt  */\n         \"uniqleft\"  ,                      /*only left side proc opt */\n         \"uniqrite\"  ,                      /*only right side proc opt*/\n         \"oldrleft\"  ,                      /*show l mbrs older than r*/\n         \"oldrrite\"  ,                      /*show r mbrs older than l*/\n         \"mask\"      ,                      /*mbr name pattern mask   */\n         \"maskoptl\"  ,                      /*inc/exc masked fields   */\n         \"maskoptr\"  ,                      /*inc/exc masked fields   */\n         \"p2pverno)\" ,                      /*pds2pds version number  */\n         \"PROFILE\"                          /*user's profile pool     */\nRETURN\n\nPut_Stored_Variables:\n   \"VPUT (dsnl\"      ,                      /*dataset name - left     */\n         \"dsnr\"      ,                      /*dataset name - right    */\n         \"mbrleft\"   ,                      /*same name sel proc opt  */\n         \"mbrrite\"   ,                      /*same name sel proc opt  */\n         \"volidl\"    ,                      /*volser name - left      */\n         \"volidr\"    ,                      /*volser name - right     */\n         \"namesame\"  ,                      /*same name sel proc opt  */\n         \"statsame\"  ,                      /*name/stats sel proc opt */\n         \"statdiff\"  ,                      /*diff stats sel proc opt */\n         \"namediff\"  ,                      /*diff name sel proc opt  */\n         \"uniqleft\"  ,                      /*only left side proc opt */\n         \"uniqrite\"  ,                      /*only right side proc opt*/\n         \"oldrleft\"  ,                      /*show l mbrs older than r*/\n         \"oldrrite\"  ,                      /*show r mbrs older than l*/\n         \"mask\"      ,                      /*mbr name pattern mask   */\n         \"maskoptl\"  ,                      /*inc/exc masked fields   */\n         \"maskoptr\"  ,                      /*inc/exc masked fields   */\n         \"p2pverno)\" ,                      /*pds2pds version number  */\n         \"PROFILE\"                          /*user's profile pool     */\nRETURN\n\nDisplay_Dsn_Entry_Panel:\n   entry_panel_rc = 0                       /*initialize return code  */\n   \"DISPLAY PANEL(P2PDSNP)\" pnl_msg csr_pos /*display panel PDSMATP1  */\n   csr_pos = csr_dsnl                       /*put csr on left-side dsn*/\n   pnl_msg = no_pnl_msg                     /*blank out panel message */\n   entry_panel_rc = rc                      /*set panel dspl ret code */\n   IF entry_panel_rc /= 8 THEN              /*if not pf3/pf4          */\n      IF entry_panel_rc /= 0 THEN           /*   if not rtn code 0    */\n         DO                                 /*      do                */\n           \"SETMSG MSG(ISRZ002)\"            /*        set msg display */\n            csr_pos = 'CURSOR()'            /*        set cursor pos  */\n            EXIT 12                         /*        exit pds2pds    */\n         END                                /*      end do            */\nRETURN entry_panel_rc\n\nValidate_Mbr_Disp_Opts:\n   disp_opt_count = 0                       /*reset option counter    */\n   disp_opt_rc = 0                          /*reset return code       */\n   mbr_displopt = LEFT(namesame,1)  || ,    /*bld display options     */\n                  LEFT(statsame,1)  || ,    /*  check field           */\n                  LEFT(statdiff,1)  || ,    /*                        */\n                  LEFT(namediff,1)  || ,    /*                        */\n                  LEFT(uniqleft,1)  || ,    /*                        */\n                  LEFT(uniqrite,1)  || ,    /*                        */\n                  LEFT(oldrleft,1)  || ,    /*                        */\n                  LEFT(oldrrite,1)          /*                        */\n   mbr_displopt = STRIP(mbr_displopt)       /*strip excess spaces     */\n   IF LENGTH(mbr_displopt) > 1 THEN         /*if more than 1 entered  */\n      DO                                    /*   do                   */\n        disp_opt_rc = 12                    /*     set return code    */\n        csr_pos = csr_namesame              /*     set cursor pos     */\n        \"SETMSG MSG(PTPM001C)\"              /*     show message       */\n      END                                   /*   end do               */\nRETURN disp_opt_rc\n\nVALIDDSN:\n   PARSE ARG dsnl, dsnr                     /*get data from caller    */\n   CALL Parse_Dsnames                       /*check dsns for quotes   */\n   IF Dsn_Validation(dsnl,'L') > 0 THEN     /*if bad dataset name     */\n     RETURN return_code                     /*   return bad dsnl info */\n   IF Dsn_Validation(dsnr,'R') > 0 THEN     /*if bad dataset name     */\n     RETURN return_code                     /*   return bad dsnr info */\nRETURN rc                                   /*return good rc          */\n\nDsn_Validation:\n   ARG dsn,lr_flag                          /*get dsn from caller     */\n   INTERPRET \"volid = volid\"lr_flag         /*get volser id           */\n   return_code = P2PDSNS(dsn,volid)         /*get dataset status      */\n   IF return_code = 22 THEN                 /*                        */\n      INTERPRET 'csr_pos = csr_volid'lr_flag/*set panel cursor pos    */\n   ELSE                                     /*                        */\n      INTERPRET 'csr_pos = csr_dsn'lr_flag  /*set panel cursor pos    */\n   INTERPRET 'dsn'lr_flag '= dsn'           /*set panel dsname        */\nRETURN return_code\n\nParse_Dsnames:\n   return_code = 0                          /*set return code         */\n   dsnlq = dsnl                             /*initialize dsnlq        */\n   dsnrq = dsnr                             /*initialize dsnrq        */\n   \"VGET zprefix SHARED\"                    /*get tso dataset prefix  */\n   IF LEFT(dsnlq,1) /= \"'\" & ,              /*if no left quote and    */\n      right(dsnlq,1) /= \"'\" THEN            /*   no right quote       */\n      IF zprefix /= '' THEN                 /*   if prefix exists     */\n         dsnlq = \"'\"zprefix'.'dsnlq\"'\"      /*      add to dsname     */\n      ELSE                                  /*   else                 */\n         dsnlq = \"'\"dsnlq\"'\"                /*      use dsname as is  */\n   IF LEFT(dsnlq,1) /= \"'\" & ,              /*if left dsn has r quote */\n      RIGHT(dsnlq,1) = \"'\" THEN             /*   but not l quote      */\n      dsnlq = \"'\"dsnlq                      /*   add left quote       */\n   IF LEFT(dsnlq,1)  = \"'\" & ,              /*if left dsn has l quote */\n      RIGHT(dsnlq,1) /= \"'\" THEN            /*   but not r quote      */\n      dsnlq = dsnlq\"'\"                      /*   add right quote      */\n   IF LEFT(dsnrq,1) /= \"'\" & ,              /*if no left quote and    */\n      right(dsnrq,1) /= \"'\" THEN            /*   no right quote       */\n      IF zprefix /= '' THEN                 /*   if prefix exists     */\n         dsnrq = \"'\"zprefix'.'dsnrq\"'\"      /*      add to dsname     */\n      ELSE                                  /*   else                 */\n         dsnrq = \"'\"dsnrq\"'\"                /*      us dsname as is   */\n   IF LEFT(dsnrq,1) /= \"'\" & ,              /*if right dsn has r quote*/\n      RIGHT(dsnrq,1) = \"'\" THEN             /*   but not left quote   */\n      dsnrq = \"'\"dsnrq                      /*   add left quote       */\n   IF LEFT(dsnrq,1)  = \"'\" & ,              /*if right dsn has l quote*/\n      RIGHT(dsnrq,1) /= \"'\" THEN            /*   but not right quote  */\n      dsnrq = dsnrq\"'\"                      /*   add right quote      */\n   dsnl = dsnlq                             /*set qualified dsname    */\n   dsnr = dsnrq                             /*set qualified dsname    */\nRETURN\n\nInitialize_Variables:\n   p2pverno = 'PDS2PDS 3.02'\n   msg_stat = MSG('OFF')\n   dummy = OUTTRAP(\"termout.\")\n   \"CONTROL ERRORS RETURN\"\n   csr_dsnl = 'CURSOR(DSNL)'\n   csr_dsnr = 'CURSOR(DSNR)'\n   csr_volidl = 'CURSOR(VOLIDL)'\n   csr_volidr = 'CURSOR(VOLIDR)'\n   csr_pos = csr_dsnl\n   no_pnl_msg = 'MSG()'\n   pnl_msg = no_pnl_msg\n   gather_msg = 'PDS2PDS is reading the member list for'\n   validate_dsn_msg = 'PDS2PDS is validating datasets - Please Wait'\n    \"ISPEXEC VGET (\"zprefix\") SHARED\"\n   msg_stat = MSG('OFF')\n   disp_opt_count = 0\n   disp_opt_rc = 0\n   csr_namesame = 'CURSOR(NAMESAME)'\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PDSNS": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\t\\x00\\x99\\x05\\x7f\\x00\\x99!O\\x16Q\\x00i\\x00\\x9d\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1999-02-26T00:00:00", "modifydate": "1999-08-02T16:51:09", "lines": 105, "newlines": 157, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PDSNS                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This program uses the LISTDSI and SYSDSN functions to  |\n|              verify that datasets exist and are available, and that |\n|              the specified datasets are partitioned.                |\n|                                                                     |\n|   Called By: P2PDSNP                                                |\n|                                                                     |\n|       Calls: LISTDSI                                                |\n|              SYSDSN                                                 |\n|                                                                     |\n\\*===================================================================*/\nPARSE ARG dsn,volid                         /* get args from caller   */\nCALL Initialize_Variables                   /* initialize variables   */\nCALL Check_Dsn_Status                       /* get dataset status     */\nEXIT ldsi_reason                            /* exit program           */\n\nCheck_Dsn_Status:\n   IF volid = '' THEN                       /*if volid blank          */\n      ldsi_arg = dsn                        /*   arg = dsn            */\n   ELSE                                     /*else                    */\n      ldsi_arg = dsn 'VOLUME('volid')'      /*   arg = dsn & volid    */\n   ldsi_arg = ldsi_arg 'RECALL'             /*always recall if archivd*/\n   ldsi_rc = LISTDSI(ldsi_arg)              /*get dataset status      */\n   IF ldsi_rc = 0 | ldsi_rc = 4 THEN        /*   if dataset ok        */\n      IF SYSDSORG /= 'PO' THEN              /*      if dataset not pds*/\n         DO                                 /*         do             */\n           zedsmsg = dsn_not_pds_s          /*           set short msg*/\n           zedlmsg = dsn_not_pds_l          /*           set long msg */\n           ldsi_reason=4                    /*           set ret code */\n           \"ISPEXEC SETMSG MSG(ISRZ001)\"    /*           displ msg    */\n           RETURN                           /*           return       */\n         END                                /*         end            */\n   IF ldsi_rc = 16 THEN                     /*if bad return code      */\n      ldsi_reason = RIGHT(SYSREASON,2)      /*   get reason code      */\n   IF ldsi_reason > 0 THEN                  /*if reason code gt zero  */\n      SELECT                                /* start select           */\n        WHEN ldsi_reason = 1 THEN           /*   dsn or volid invalid */\n          DO                                /*     do                 */\n            zedsmsg = inv_dsn_s             /*       set short message*/\n            zedlmsg = inv_dsn_l             /*       set long message */\n          END                               /*     end                */\n        WHEN ldsi_reason = 5 THEN           /*   dataset not found    */\n          DO                                /*     do                 */\n            zedsmsg = dsn_notfnd_s          /*       set short message*/\n            zedlmsg = dsn_notfnd_l          /*       set long message */\n          END                               /*     end                */\n        WHEN ldsi_reason = 22 THEN          /*   dasd volume not found*/\n          DO                                /*     do                 */\n            zedsmsg = vol_notfnd_s          /*       set short message*/\n            zedlmsg = vol_notfnd_l          /*       set long message */\n          END                               /*     end                */\n        WHEN ldsi_reason = 24 THEN          /*   dataset not found    */\n          DO                                /*     do                 */\n            zedsmsg = dsn_notfnd_s          /*       set short message*/\n            zedlmsg = dsn_notfnd_l          /*       set long message */\n          END                               /*     end                */\n      OTHERWISE                             /* otherwise              */\n        CALL Unknown_Error                  /*   do                   */\n      END                                   /* end select             */\n   IF ldsi_rc > 0 THEN                      /* if an error occurred   */\n      \"ISPEXEC SETMSG MSG(ISRZ001)\"         /*    display err msg     */\nRETURN\n\n\nUnknown_Error:\n   term_width = SYSVAR(SYSWTERM)            /*get term width          */\n   zedsmsg = 'Error - Press PF1       '     /*set short message       */\n   zedlmsg = 'Error: REXX Exec P2PDSNS'  ,  /*set long message        */\n     ' - Procedure Check_Dsn:'              /*set long message        */\n   zedlmsg = LEFT(zedlmsg,term_width)       /*set to term width       */\n   msg2 = 'Error Processing Dataset:' dsn   /*msg 2                   */\n   msg2 = LEFT(msg2,term_width)             /*set to term width       */\n   zedlmsg = zedlmsg msg2                   /*add to long messge      */\n   msg3 = 'LISTDSI Return Code:' ldsi_rc    /*msg 3                   */\n   msg3 = LEFT(msg3,term_width)             /*set to term width       */\n   zedlmsg = zedlmsg msg3                   /*add to long message     */\n   msg4 = SYSMSGLVL2                        /*msg 4                   */\n   msg4 = LEFT(msg4,term_width)             /*set to term width       */\n   zedlmsg = zedlmsg msg4                   /*add to long messge      */\nRETURN\n\nInitialize_Variables:\n   msg_stat = MSG('OFF')\n   dummy = OUTTRAP(\"xyz.\")\n   ldsi_reason   = 0\n   zedsmsg       = ''\n   zedlmsg       = ''\n   dsn_notfnd_s  = 'Dataset Not Found       '\n   dsn_notfnd_l  =  dsn 'could not be found'\n   vol_notfnd_s  =  volid 'Not Found'\n   vol_notfnd_l  =  'DASD Volume' volid 'could not be found'\n   inv_dsn_s     = 'Invalid DSN or VOLSER   '\n   inv_dsn_l     =  'Either the dataset name or the volser is invalid'\n   dsn_not_pds_s = 'Dataset is not a PDS    '\n   dsn_not_pds_l =  dsn 'is not a partitioned dataset'\n   dataset_error = 'Dataset Error-Press PF1  '\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGALL": {"ttr": 12, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x007\\x00\\x99\\x11\\x9f\\x00\\x99\\x14o\\x159\\x00T\\x00)\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "1999-04-29T00:00:00", "modifydate": "1999-05-26T15:39:37", "lines": 84, "newlines": 41, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGALL                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the ALL command for the            |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno        /*get args from caller    */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nIF lr_sw = 'L' THEN                         /*if we did left stats    */\n   otherside = 'R'                          /*  swap to right stats   */\nELSE                                        /*else                    */\n   otherside = 'L'                          /*  swap to left stats    */\nall_rc = 0                                  /*set return code         */\nDO tblrows                                  /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   INTERPRET 'mbr = mbr'lr_sw               /*   set member name      */\n   IF mbr = '' THEN                         /*   if mbr name blank    */\n      INTERPRET 'mbr = mbr'otherside        /*      use other mbr name*/\n   CALL Explode_Stats lr_sw                 /*   extract stats fields */\n   CALL Explode_Stats otherside             /*   extract stats fields */\n   \"ADDPOP ROW(0) COLUMN(0)\"                /*   pop-up window pos    */\n   \"DISPLAY PANEL(P2PGALL)\"                 /*   displ rename panel   */\n   panel_rc = rc                            /*   set panel return code*/\n   \"REMPOP\"                                 /*   remove pop-up window */\n   IF panel_rc = 8 THEN                     /*   if pf3/pf4 pressed   */\n      LEAVE                                 /*      quit              */\n   IF panel_rc /= 0 THEN                    /*   if rc not zero       */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        quit            */\n      END                                   /*      end               */\n   IF cancelop \\= ' ' THEN                  /*   if command cancelled */\n      LEAVE                                 /*      then leave        */\nEND                                         /*end                     */\nRETURN all_rc                               /*return to caller        */\n\nExplode_Stats:\n   ARG mbr_flag                             /*get left/right indicator*/\n   INTERPRET ,                              /*extract stats for mbr   */\n   'IF mbr'mbr_flag '/= \" \" & stat'mbr_flag '/= \" \" THEN;'   ,\n      'DO;'                                                  ,\n         'vvmm'mbr_flag '= LEFT(stat1'mbr_flag',5);'         ,\n         'cre'mbr_flag  '= LEFT(stat2'mbr_flag',8);'         ,\n         'cha'mbr_flag  '= LEFT(stat3'mbr_flag',8);'         ,\n         'time'mbr_flag '= LEFT(stat4'mbr_flag',8);'         ,\n         'size'mbr_flag '= LEFT(stat5'mbr_flag',5);'         ,\n         'init'mbr_flag '= LEFT(stat6'mbr_flag',5);'         ,\n         'mod'mbr_flag  '= LEFT(stat7'mbr_flag',5);'         ,\n         'user'mbr_flag '= SUBSTR(stat7'mbr_flag',7,8);'     ,\n         'al'mbr_flag   '= SUBSTR(stat7'mbr_flag',16,3);'    ,\n      'END;'                                                 ,\n   'ELSE;'                                                   ,\n      'DO;'                                                  ,\n         'vvmm'mbr_flag '=  \" \";'                            ,\n         'cre'mbr_flag  '=  \" \";'                            ,\n         'cha'mbr_flag  '=  \" \";'                            ,\n         'time'mbr_flag '=  \" \";'                            ,\n         'size'mbr_flag '=  \" \";'                            ,\n         'init'mbr_flag '=  \" \";'                            ,\n         'mod'mbr_flag  '=  \" \";'                            ,\n         'user'mbr_flag '=  \" \";'                            ,\n         'al'mbr_flag   '=  \" \";'                            ,\n      'END;'\nRETURN\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   all_rc = 4                               /*set return code         */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGBRW": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00U\\x00\\x99\\x11?\\x00\\x99\\x17\\x9f\\x16D\\x00j\\x00C\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1999-04-23T00:00:00", "modifydate": "1999-06-28T16:44:55", "lines": 106, "newlines": 67, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGBRW                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Global Browse Command for the  |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,gcmd,tblname,dsnl,dsnr,         , /*get args from caller  */\n    volidl,volidr,p2pverno,nbr_of_mbrs      /*get args from caller  */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set panel dsname        */\nINTERPRET 'volid = volid'lr_sw              /*set volser name         */\nIF gcmd = 'B' THEN cmd = 'BROWSE'           /*do we browse? or..      */\nIF gcmd = 'V' THEN cmd = 'VIEW'             /*do we view?             */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nbrowse_rc = 0                               /*init return code        */\ncnfrmoff = ' '                              /*reset command cnfrm sw  */\nDO i = 1 to tblrows                         /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   INTERPRET 'mbr = mbr'lr_sw               /*   set mbr name         */\n   IF mbr = '' THEN                         /*   if mbr name blank    */\n      IF i = tblrows THEN                   /*      if last mbr       */\n         LEAVE                              /*         quit           */\n      ELSE                                  /*      else              */\n         ITERATE                            /*         get next mbr   */\n   IF cnfrmoff = ' ' THEN                   /*   if cmd cnfrm off     */\n      DO                                    /*      do                */\n        \"ADDPOP ROW(0) COLUMN(0)\"           /*        create popup win*/\n        \"DISPLAY PANEL(P2PGBRW)\"            /*        display panel   */\n        panel_rc = rc                       /*        set panel rc    */\n        \"REMPOP\"                            /*        remove popup win*/\n        IF panel_rc = 8 THEN                /*        if pf3/pf4      */\n           ITERATE                          /*           get nxt mbr  */\n        IF panel_rc /= 0 THEN               /*        if bad panel rc */\n           DO                               /*           do           */\n             CALL System_Error              /*             error      */\n             LEAVE                          /*             leave      */\n           END                              /*           end          */\n      END                                   /*      end               */\n   IF cancelop  \\= ' ' THEN                 /*   if time to leave     */\n      LEAVE                                 /*      then leave        */\n   \"CONTROL DISPLAY SAVE\"                   /*   save current display */\n   IF lr_sw = 'L' THEN                      /*   if browse/view left  */\n      INTERPRET '\"'cmd               ,      /*                        */\n             \"DATASET(\"            ||,      /*      browse/view left  */\n              Build_Dsn(dsnl,mbrl) ||,      /*      member            */\n              \")\"                    ,      /*                        */\n              volid'\"'                      /*                        */\n   ELSE                                     /*   else                 */\n      INTERPRET '\"'cmd               ,      /*                        */\n             \"DATASET(\"            ||,      /*      browse/view right */\n              Build_Dsn(dsnr,mbrr) ||,      /*      member            */\n              \")\"                    ,      /*                        */\n              volid'\"'                      /*                        */\n   browse_rc = rc                           /*   set return code      */\n   \"CONTROL DISPLAY RESTORE\"                /*   restore current displ*/\n   IF browse_rc > 0 THEN                    /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        quit            */\n      END                                   /*      end               */\n   INTERPRET 'res'lr_sw '=' gcmd            /*   set results field    */\n   \"TBDELETE\" tblname                       /*   delete table row     */\n   tbdel_rc = rc                            /*   set return code      */\n   IF tbdel_rc > 0 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        quit            */\n      END                                   /*      end               */\n   \"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"    /*   re-add row to table  */\n   tbadd_rc = rc                            /*   se return code       */\n   IF tbadd_rc > 0 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        quit            */\n      END                                   /*      end               */\nEND                                         /*end                     */\nEXIT browse_rc\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   browse_rc = 4                            /*set return code         */\nRETURN\n\nBuild_Dsn:\n   ARG dsn,mbrname                          /*get dsn & mbrname       */\n   mbrname = STRIP(mbrname)                 /*drop spaces from mbrname*/\n   dsn_length = LENGTH(dsn) - 1             /*get dsn length          */\n   dsn = LEFT(dsn,dsn_length)               /*drop right quote        */\n   dsn = dsn || \"(\" || mbrname || \")'\"      /*add mbrname/right paren */\nRETURN dsn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGCMP": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x007\\x00\\x99\\x11\\x7f\\x00\\x99\\x18/\\x139\\x00Y\\x00X\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1999-04-27T00:00:00", "modifydate": "1999-07-01T13:39:37", "lines": 89, "newlines": 88, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGCMP                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Compress command for the       |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*cmds default to ispf    */\nARG lr_sw,dsnl,dsnr,volidl,volidr           /*get args from caller    */\nmsg_stat = MSG('OFF')                       /*turn msg display off    */\ndummy = OUTTRAP(\"xyz.\")                     /*trap other messages     */\nINTERPRET 'dsnc = dsn'lr_sw                 /*set dataset name        */\nINTERPRET 'volid = volid'lr_sw              /*set source volser name  */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\n\"ISPEXEC LMINIT\"            ,               /*initialize dataset      */\n        \"DATAID(\"dsncomp\")\" ,               /*                        */\n        \"DATASET(\"dsnc\")\"   ,               /*                        */\n        volid               ,               /*                        */\n        \"ENQ(EXCLU)\"                        /*                        */\ninit_rc = rc                                /*set return code         */\nIF init_rc \\=0 THEN                         /*if bad init return code */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nsallocb = ''                                /*reset space alloc before*/\nsusedb = ''                                 /*reset space used before */\nsextentb = ''                               /*reset nbr extents before*/\nlistdsi_rc = LISTDSI(dsnc DIRECTORY volid)  /*list dataset information*/\nsallocb = sysalloc                          /*set space alloc before  */\nsusedb = sysused                            /*set space used before   */\nsextentsb = sysextents                      /*set nbr extents before  */\n\"ISPEXEC LMCOMP\"          ,                 /*compress dataset        */\n        \"DATAID(\"dsncomp\")\"                 /*                        */\ncompress_rc = rc                            /*set compress return code*/\nIF compress_rc \\= 0 THEN                    /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nsalloca = ''                                /*reset space alloc after */\nsuseda = ''                                 /*reset space used after  */\nsextenta = ''                               /*reset nbr extents after */\nlistdsi_rc = LISTDSI(dsnc DIRECTORY)        /*get dataset information */\nsalloca = sysalloc                          /*set space alloc after   */\nsuseda = sysused                            /*set space used after    */\nsextentsa = sysextents                      /*set nbr extents after   */\nsunitsb = sysunits                          /*get unit type before    */\nsunitsa = sysunits                          /*get unit type after     */\nIF sallocb > 1 THEN                         /*if more than 1 unit     */\n   sunitsb = sunitsb || 'S'                 /*   make plural          */\nIF salloca > 1 THEN                         /*if more than 1 unit     */\n   sunitsa = sunitsa || 'S'                 /*   make plural          */\nterm_width = SYSVAR(SYSWTERM)               /*get terminal width      */\ncmsg_const = LEFT(dsnc 'was compressed:', , /*set message line 1      */\n                  term_width)               /*                        */\ncmsg_before = 'BEFORE:' sallocb           , /*set before compress info*/\n                        sunitsb           , /*                        */\n                        susedb  'used'    , /*                        */\n                        sextentsb         , /*                        */\n                        'extents  '         /*                        */\ncmsg_before = LEFT(cmsg_before,term_width)  /*set before message      */\ncmsg_after = 'AFTER: ' salloca            , /*set after compress info */\n                       sunitsa            , /*                        */\n                       suseda  'used'     , /*                        */\n                       sextentsa          , /*                        */\n                       'extents'            /*                        */\ncmsg_after  = LEFT(cmsg_after,term_width)   /*set after message       */\nzerrsm  = 'Dataset Compressed'              /*set short message       */\nzerrlm  = cmsg_const cmsg_before cmsg_after /*set long message        */\nCALL System_Error                           /*just for passing msgs   */\nRETURN 4                                    /*return to caller        */\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   \"ISPEXEC LMFREE DATAID(\"dsncomp\")\"       /*free dataset            */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGCPY": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x06\\x00\\x99\\x11\\x1f\\x00\\x99\\x18/\\tR\\x00\\x8b\\x00\\x11\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "1999-04-21T00:00:00", "modifydate": "1999-07-01T09:52:06", "lines": 139, "newlines": 17, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGCPY                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Global Copy Command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,volidl,volidr,, /*get args from caller  */\n    p2pverno,memlo,memro,nbr_of_mbrs        /*                        */\nIF lr_sw = 'L' THEN                         /*if copy left to right   */\n   DO;src = 'L';tgt = 'R';END               /*  src = left;tgt = right*/\nELSE                                        /*else                    */\n   DO;src = 'R';tgt = 'L';END               /*  src = right;tgt = left*/\nINTERPRET 'pnldsns = dsn'src                /*set src dsname          */\nINTERPRET 'pnldsnt = dsn'tgt                /*set tgt dsname          */\nINTERPRET 'volids = volid'src               /*set source volser name  */\nINTERPRET 'volidt = volid'tgt               /*set target volser name  */\nIF volids /= '' THEN                        /*if volid entered        */\n   volids = 'VOLUME('volids')'              /*   use it               */\n\"LMINIT DATAID(\"ddvars\")\"    ,              /*get dataid for source   */\n       \"DATASET(\"pnldsns\")\"  ,              /*    dataset             */\n       volids                ,              /*                        */\n       \"ENQ(SHR)\"                           /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     CALL Queue_Mbrs                        /*     queue nbr mbrs     */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volidt /= '' THEN                        /*if volid entered        */\n   volidt = 'VOLUME('volidt')'              /*   use it               */\n\"LMINIT DATAID(\"ddvart\")\"    ,              /*get dataid for target   */\n       \"DATASET(\"pnldsnt\")\"  ,              /*    dataset             */\n       volidt                ,              /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     CALL Queue_Mbrs                        /*     queue nbr mbrs     */\n     CALL Free_Files                        /*     free files         */\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nlmcopy_rc = 0                               /*init return code        */\ncnfrmoff = ' '                              /*reset cmd confirm fld   */\nDO tblrows                                  /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   INTERPRET 'mbrs = mbr'src                /*   set src mbr name     */\n   INTERPRET 'mbrt = mbr'src                /*   set tgt mbr name     */\n   IF mbrs = ' ' THEN                       /*   if src mbr name blank*/\n      ITERATE                               /*      get next member   */\n   IF cnfrmoff = ' ' THEN                   /*   if cmd confirm off   */\n      DO                                    /*      do                */\n        \"ADDPOP ROW(0) COLUMN(0)\"           /*        show popup win  */\n        \"DISPLAY PANEL(P2PGCPY)\"    ,       /*        display panel   */\n                \"CURSOR(REPLMBRS)\"          /*                        */\n        panel_rc = rc                       /*        set panel rc    */\n        \"REMPOP\"                            /*        remove popup win*/\n        IF panel_rc = 8 THEN                /*        if pf3/pf4 presd*/\n           ITERATE                          /*           go to nxt mbr*/\n        IF panel_rc /= 0 THEN               /*        if bad rc       */\n           DO                               /*           do           */\n             CALL System_Error              /*             stack msgs */\n             LEAVE                          /*             quit       */\n           END                              /*           end          */\n      END                                   /*      end               */\n   IF cancelop \\= ' ' THEN                  /*   if cmd cancelled     */\n      LEAVE                                 /*      quit              */\n   IF mbrl = mbrr THEN                      /*   if same member name  */\n      IF replmbrs = ' ' THEN                /*      if not replace mbr*/\n         ITERATE                            /*         get next mbr   */\n   \"LMCOPY FROMID(\"ddvars\")\"    ,           /*   copy member          */\n          \"FROMMEM(\"mbrs\")\"     ,           /*                        */\n          \"TODATAID(\"ddvart\")\"  ,           /*                        */\n          \"TOMEM(\"mbrt\")\"       ,           /*                        */\n          \"REPLACE\"                         /*                        */\n   lmcopy_rc = rc                           /*   set return code      */\n   IF lmcopy_rc \\= 0 THEN                   /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        quit            */\n      END                                   /*      end               */\n   INTERPRET ,                              /*   add 1 to nbr mbrs in */\n     'IF mbr'tgt '= \"\" THEN' ,              /*   tgt dataset          */\n        'mem'tgt'o = mem'tgt'o + 1'         /*   if necessary         */\n   \"TBDELETE\" tblname                       /*   delete table row     */\n   INTERPRET 'res'src '= \"C\"'               /*   set results field    */\n   INTERPRET 'mbr'tgt '= mbr'src            /*   set tgt mbr name     */\n   INTERPRET 'stat1'tgt '= stat1'src        /*   set tgt stats line 1 */\n   INTERPRET 'stat2'tgt '= stat2'src        /*   set tgt stats line 2 */\n   INTERPRET 'stat3'tgt '= stat3'src        /*   set tgt stats line 3 */\n   INTERPRET 'stat4'tgt '= stat4'src        /*   set tgt stats line 4 */\n   INTERPRET 'stat5'tgt '= stat5'src        /*   set tgt stats line 5 */\n   INTERPRET 'stat6'tgt '= stat6'src        /*   set tgt stats line 6 */\n   INTERPRET 'stat7'tgt '= stat7'src        /*   set tgt stats line 7 */\n   \"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"    /*   re-add row to table  */\n   tbadd_rc = rc                            /*   set return code      */\n   IF tbadd_rc > 8 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        exit loop       */\n      END                                   /*      end               */\nEND                                         /*end                     */\n\nCALL Queue_Mbrs                             /*queue nbr mbrs to stack */\nCALL Free_Files                             /*close filee             */\n\nEXIT lmcopy_rc\n\nQueue_Mbrs:\n   QUEUE memlo                              /*nbr mbrs left side ds   */\n   QUEUE memro                              /*nbr mbrs right side ds  */\nRETURN\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   lmcopy_rc = 4                            /*set subroutine ret code */\nRETURN\n\nFree_Files:\n   \"LMFREE DATAID(\"ddvars\")\"                /*free source dataset     */\n   \"LMFREE DATAID(\"ddvart\")\"                /*free target dataset     */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGDEL": {"ttr": 259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x05\\x00\\x99\\x11/\\x00\\x99\\x17/\\x16\\x06\\x00v\\x00\\x94\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1999-04-22T00:00:00", "modifydate": "1999-06-21T16:06:05", "lines": 118, "newlines": 148, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGDEL                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Global Delete Command for the  |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,volidl,volidr,, /*get args from caller  */\n    p2pverno,memlo,memro,nbr_of_mbrs        /*                        */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set dsname for panel    */\nINTERPRET 'volid = volid'lr_sw              /*set volser name         */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\n\"LMINIT DATAID(\"ddvar\")\"     ,              /*get dataid for target   */\n       \"DATASET(\"pnldsn\")\"   ,              /*    dataset             */\n       volid                 ,              /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     CALL Queue_Mbrs                        /*     put memlo/ro in stk*/\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"LMOPEN DATAID(\"ddvar\")\"     ,              /*open dataset            */\n       \"OPTION(OUTPUT)\"                     /*                        */\nlmopen_rc = rc                              /*set return code         */\nIF lmopen_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     CALL Queue_Mbrs                        /*     put mbrs in stack  */\n     CALL Free_File                         /*     free file          */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nlmmdel_rc = 0                               /*init return code        */\ncnfrmoff = ' '                              /*set cmd confirm sw      */\nDO tblrows                                  /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   INTERPRET 'mbro = mbr'lr_sw              /*   set mbr name         */\n  IF mbro = ' ' THEN                        /*   if member name blank */\n     ITERATE                                /*      get next member   */\n  IF cnfrmoff = ' ' THEN                    /*   if cmd cnfrm off     */\n     DO                                     /*      do                */\n       \"ADDPOP ROW(0) COLUMN(0)\"            /*        show popup win  */\n       \"DISPLAY PANEL(P2PGDEL)\"             /*        display panel   */\n        panel_rc = rc                       /*        set panel rc    */\n       \"REMPOP\"                             /*        remove popup win*/\n        IF panel_rc = 8 THEN                /*        if pf3/pf4 presd*/\n           ITERATE                          /*           go to nxt mbr*/\n        IF panel_rc /= 0 THEN               /*        if bad rc       */\n           DO                               /*           do           */\n             CALL System_Error              /*             stack msgs */\n             LEAVE                          /*             quit       */\n           END                              /*           end          */\n      END                                   /*      end               */\n   IF cancelop \\= ' ' THEN                  /*    if cmd not confirmed*/\n      LEAVE                                 /*       get next member  */\n  \"LMMDEL DATAID(\"ddvar\")\"     ,            /*   delete member        */\n         \"MEMBER(\"mbro\")\"                   /*                        */\n  lmmdel_rc = rc                            /*   set return code      */\n  IF lmmdel_rc \\= 0 THEN                    /*   if bad return code   */\n     DO                                     /*      do                */\n       CALL System_Error                    /*        put msgs in stak*/\n       LEAVE                                /*        quit            */\n     END                                    /*      end               */\n   INTERPRET 'mem'lr_sw'o = mem'lr_sw'o - 1'/*   if necessary         */\n   \"TBDELETE\" tblname                       /*   delete table row     */\n   INTERPRET 'res'lr_sw '= \"D\"'             /*   set results field    */\n   INTERPRET 'mbr'lr_sw '= \" \"'             /*   blank mbr name       */\n   INTERPRET 'stat1'lr_sw '= \" \"'           /*   blank   stats line 1 */\n   INTERPRET 'stat2'lr_sw '= \" \"'           /*   blank stats line 1   */\n   INTERPRET 'stat3'lr_sw '= \" \"'           /*   blank stats line 1   */\n   INTERPRET 'stat4'lr_sw '= \" \"'           /*   blank stats line 1   */\n   INTERPRET 'stat5'lr_sw '= \" \"'           /*   blank stats line 1   */\n   INTERPRET 'stat6'lr_sw '= \" \"'           /*   blank stats line 1   */\n   INTERPRET 'stat7'lr_sw '= \" \"'           /*   blank stats line 1   */\n   \"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"    /*   re-add row to table  */\n   tbadd_rc = rc                            /*   set return code      */\n   IF tbadd_rc > 8 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        exit loop       */\n      END                                   /*      end               */\nEND                                         /*end                     */\n\nCALL Queue_Mbrs                             /*queue nbr mbrs to stack */\nCALL Free_File                              /*close filee             */\n\nEXIT lmdel_rc\n\nQueue_Mbrs:\n   QUEUE memlo                              /*nbr mbrs left side ds   */\n   QUEUE memro                              /*nbr mbrs right side ds  */\nRETURN\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   lmdel_rc = 4                             /*set subroutine ret code */\nRETURN\n\nFree_File:\n   \"LMFREE DATAID(\"ddvar\")\"                 /*free daaset             */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGEDT": {"ttr": 517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00U\\x00\\x99\\x11?\\x00\\x99\\x17_\\t\\x12\\x00\\xbf\\x00_\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1999-04-23T00:00:00", "modifydate": "1999-06-24T09:12:55", "lines": 191, "newlines": 95, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGEDT                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Global Edit Command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,volidl,volidr,, /*get args from caller  */\n    p2pverno,nbr_of_mbrs                    /*                        */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set panel dsname        */\nINTERPRET 'volid = volid'lr_sw              /*set volser name         */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nedit_rc = 0                                 /*init return code        */\ncnfrmoff = ' '                              /*set line cmd cnfrm off  */\nDO tblrows                                  /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   INTERPRET 'mbr = mbr'lr_sw               /*   set mbr name         */\n   IF mbr = '' THEN                         /*   if mbr name blank    */\n      IF i = tblrows THEN                   /*      if last mbr       */\n         LEAVE                              /*         quit           */\n      ELSE                                  /*      else              */\n         ITERATE                            /*         get next mbr   */\n   IF cnfrmoff = ' ' THEN                   /*   if cmd confirm off   */\n      DO                                    /*      do                */\n        \"ADDPOP ROW(0) COLUMN(0)\"           /*        show popup win  */\n        \"DISPLAY PANEL(P2PGEDT)\"            /*        display panel   */\n        panel_rc = rc                       /*        set panel rc    */\n        \"REMPOP\"                            /*        remove popup win*/\n        IF panel_rc = 8 THEN                /*        if pf3/pf4      */\n           ITERATE                          /*           get next mbr */\n        IF panel_rc /= 0 THEN               /*        if bad panel rc */\n           DO                               /*           do           */\n             CALL System_Error              /*             error msg  */\n             LEAVE                          /*             leave      */\n           END                              /*           end          */\n      END                                   /*      end               */\n   IF cancelop \\= ' ' THEN                  /*   if command cancelled */\n      LEAVE                                 /*      quit              */\n   \"CONTROL DISPLAY SAVE\"                   /*   save current display */\n   IF lr_sw = 'L' THEN                      /*   if edit left         */\n      \"EDIT DATASET\"                 ,      /*      edit left member  */\n            \"(\"                      ,      /*                        */\n            Build_Dsn(dsnl,mbrl)     ,      /*                        */\n            \")\"                      ,      /*                        */\n            volid                           /*                        */\n   ELSE                                     /*   else                 */\n      \"EDIT DATASET\"                 ,      /*      edit right member */\n            \"(\"                      ,      /*                        */\n            Build_Dsn(dsnr,mbrr)     ,      /*                        */\n            \")\"                      ,      /*                        */\n            volid                           /*                        */\n   edit_rc = rc                             /*   set return code      */\n   \"CONTROL DISPLAY RESTORE\"                /*   restore current displ*/\n   IF edit_rc = 4 THEN                      /*   if data not saved    */\n      DO                                    /*     do                 */\n        INTERPRET 'res'lr_sw '= \"E\"'        /*       set results field*/\n        \"TBDELETE\" tblname                  /*       delete row       */\n        \"TBADD\" tblname    ,                /*       re-add row       */\n                \"MULT(\"nbr_of_mbrs\")\"       /*                        */\n        tbadd_rc = rc                       /*   set return code      */\n        IF tbadd_rc > 8 THEN                /*   if bad return code   */\n           DO                               /*      do                */\n             CALL System_Error              /*        put msgs in stak*/\n             LEAVE                          /*        exit loop       */\n           END                              /*      end               */\n        edit_rc = 0                         /*       reset ret code   */\n        ITERATE                             /*       get next member  */\n      END                                   /*     end                */\n   IF edit_rc \\= 0 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        queue msgs      */\n        LEAVE                               /*        quit            */\n      END                                   /*      end               */\n   IF Get_New_Stats() > 0 THEN              /*   if bad rc from stats */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        queue msgs      */\n        LEAVE                               /*        quit            */\n      END                                   /*      end               */\n   \"TBDELETE\" tblname                       /*   delete table row     */\n   \"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"    /*   re-add table row     */\n   tbadd_rc = rc                            /*   set return code      */\n   IF tbadd_rc > 8 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        exit loop       */\n      END                                   /*      end               */\nEND                                         /*end                     */\n\nEXIT edit_rc\n\nBuild_Dsn:\n   ARG dsn,mbrname                          /*get dsn & mbrname       */\n   mbrname = STRIP(mbrname)                 /*drop spaces from mbrname*/\n   dsn_length = LENGTH(dsn) - 1             /*get dsn length          */\n   dsn = LEFT(dsn,dsn_length)               /*drop right quote        */\n   dsn = dsn || \"(\" || mbrname || \")'\"      /*add mbrname/right paren */\nRETURN dsn                                  /*                        */\n\nGet_New_Stats:\n   INTERPRET 'edit_dsn = dsn'lr_sw          /*set dsname to edit      */\n   \"LMINIT DATAID(\"ddvar\")\"     ,           /*   get dataset dataid   */\n          \"DATASET(\"edit_dsn\")\" ,           /*                        */\n          volid                 ,           /*                        */\n          \"ENQ(SHRW)\"                       /*                        */\n   lminit_rc = rc                           /*   set return code      */\n   IF lminit_rc \\= 0 THEN                   /*   if bad return code   */\n      RETURN 4                              /*      return to caller  */\n   \"LMOPEN DATAID(\"ddvar\")\"     ,           /*   open dataset         */\n          \"OPTION(INPUT)\"                   /*                        */\n   lmopen_rc = rc                           /*   set return code      */\n   IF lmopen_rc \\= 0 THEN                   /*   if bad return code   */\n      RETURN 4                              /*      return to caller  */\n   INTERPRET 'mbrname = mbr'lr_sw           /*                        */\n   \"LMMLIST DATAID(\"ddvar\")\"    ,           /*   get member stats     */\n           \"OPTION(LIST)\"       ,           /*                        */\n           \"MEMBER(MBRNAME)\"    ,           /*                        */\n           \"STATS(YES)\"                     /*                        */\n   lmmlist_rc = rc                          /*   set return code      */\n   IF lmmlist_rc \\= 0 THEN                  /*   if bad return code   */\n      RETURN 4                              /*      return to caller  */\n   CALL Set_Stats                           /*   get new mbr stats    */\n   CALL Close_File                          /*   close file           */\nRETURN 0\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   CALL Close_File                          /*close file              */\n   edit_rc = 4                              /*set return code         */\nRETURN\n\nClose_File:\n   \"LMCLOSE DATAID(\"ddvar\")\"                /*close dataset           */\n   \"LMFREE DATAID(\"ddvar\")\"                 /*free dataset            */\n   DROP DDVAR                               /*drop data id            */\nRETURN\n\nSet_Stats:\n   INTERPRET 'stat1'lr_sw '= \" \"'           /*blank stats line 1      */\n   INTERPRET 'stat2'lr_sw '= \" \"'           /*blank stats line 2      */\n   INTERPRET 'stat3'lr_sw '= \" \"'           /*blank stats line 3      */\n   INTERPRET 'stat4'lr_sw '= \" \"'           /*blank stats line 4      */\n   INTERPRET 'stat5'lr_sw '= \" \"'           /*blank stats line 5      */\n   INTERPRET 'stat6'lr_sw '= \" \"'           /*blank stats line 6      */\n   INTERPRET 'stat7'lr_sw '= \" \"'           /*blank stats line 7      */\n   IF zlvers = '' THEN                      /*if stats flds are blank */\n      RETURN                                /*   return               */\n   PARSE VAR zlmtime hh ':' mm              /*fix time display format */\n   zlmtime = hh || mm || ':' || zlmsec      /*fix time display format */\n   INTERPRET ,                              /*new stats line 1        */\n     'stat1'lr_sw '= zlvers || \".\" || ' ,   /*                        */\n                    'zlmod zlcdate zlmdate' /*                        */\n   INTERPRET ,                              /*new stats line 2        */\n     'stat2'lr_sw '= zlcdate zlmdate '  ,   /*                        */\n                    'zlmtime'               /*                        */\n   INTERPRET ,                              /*new stats line 3        */\n     'stat3'lr_sw '= zlmdate zlmtime '  ,   /*                        */\n                    'RIGHT(zlcnorc,5)'      /*                        */\n   INTERPRET ,                              /*new stats line 4        */\n     'stat4'lr_sw '= zlmtime '          ,   /*                        */\n                    'RIGHT(zlcnorc,5) ' ,   /*                        */\n                    'RIGHT(zlinorc,5)'      /*                        */\n   INTERPRET ,                              /*new stats line 5        */\n     'stat5'lr_sw '= RIGHT(zlcnorc,5) ' ,   /*                        */\n                    'RIGHT(zlinorc,5) ' ,   /*                        */\n                    'RIGHT(zlmnorc,5)'      /*                        */\n   INTERPRET ,                              /*new stats line 6        */\n     'stat6'lr_sw '= RIGHT(zlinorc,5) ' ,   /*                        */\n                    'RIGHT(zlmnorc,5) ' ,   /*                        */\n                    'LEFT(zluser,8)'        /*                        */\n   INTERPRET ,                              /*new stats line 7        */\n     'stat7'lr_sw '= RIGHT(zlmnorc,5) ' ,   /*                        */\n                    'LEFT(zluser,8) '   ,   /*                        */\n                    'RIGHT(stat7'lr_sw',3)' /*                        */\n   INTERPRET 'res'lr_sw '= \"E\"'             /*                        */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGINF": {"ttr": 263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x02\\x00\\x99\\x11\\x8f\\x00\\x99\\x17?\\tG\\x008\\x00,\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1999-04-28T00:00:00", "modifydate": "1999-06-22T09:47:02", "lines": 56, "newlines": 44, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGINF                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Information command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*cmds default to ispf    */\nARG lr_sw,dsnl,dsnr,volidl,volidr           /*get args from caller    */\nmsg_stat = MSG('OFF')                       /*turn off msg display    */\ndummy = OUTTRAP(\"xyz.\")                     /*trap screen output      */\nINTERPRET 'dsni = dsn'lr_sw                 /*set dataset name        */\nINTERPRET 'volid = volid'lr_sw              /*set volser              */\nIF volid /= ' ' THEN                        /*if volser entered       */\n   volid = 'VOLUME('volid')'                /*   set volume parm      */\nlistdsi_rc = LISTDSI(dsni DIRECTORY volid)  /*get dataset information */\nsysvolu = sysvolume                         /*volume name             */\nsysdsor = sysdsorg                          /*dataset organization    */\nsysrecf = sysrecfm                          /*record format           */\nsyslrec = syslrecl                          /*logical record length   */\nsysblks = sysblksize                        /*block size              */\nsysunts = sysunits                          /*kind of unit allocation */\nsysallo = sysalloc                          /*total space allocation  */\nsysprim = sysprimary                        /*space used              */\nsysseco = sysseconds                        /*secondary used          */\nsysexte = sysextents                        /*number of extents       */\nsysadir = sysadirblk                        /*allocated dir blocks    */\nsysudir = sysudirblk                        /*used dir blocks         */\nsysmbrs = sysmembers                        /*number of members       */\ncurdate = DATE(J)                           /*today's date            */\nsysrefd = sysrefdate                        /*last date referenced    */\nsyscrea = syscreate                         /*date created            */\nsysexda = sysexdate                         /*expiration date         */\n\"ADDPOP ROW(0) COLUMN(0)\"                   /*create popup window     */\n\"ISPEXEC DISPLAY PANEL(P2PGINF)\"            /*display panel           */\npanel_rc = rc                               /*set panel rc            */\n\"REMPOP\"                                    /*remove popup window     */\nIF panel_rc = 8 THEN                        /*if pf3/pf4 pressed      */\n   RETURN 0                                 /*   return to caller     */\nIF panel_rc > 0 THEN                        /*if bad panel rc         */\n   DO                                       /*   do                   */\n     QUEUE zerrsm                           /*     queue short msg    */\n     QUEUE zerrlm                           /*     queue long msg     */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nRETURN 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGMOV": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1b\\x00'\\x00\\x99\\x11/\\x00\\x99\\x18/\\tY\\x00\\x93\\x00\\x91\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@\"", "ispf": {"version": "01.27", "flags": 0, "createdate": "1999-04-22T00:00:00", "modifydate": "1999-07-01T09:59:27", "lines": 147, "newlines": 145, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGMOV                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Global Move Command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,volidl,volidr,, /*get args from caller  */\n    p2pverno,memlo,memro,nbr_of_mbrs        /*                        */\nIF lr_sw = 'L' THEN                         /*if copy left to right   */\n   DO;src = 'L';tgt = 'R';END               /*  src = left;tgt = right*/\nELSE                                        /*else                    */\n   DO;src = 'R';tgt = 'L';END               /*  src = right;tgt = left*/\nINTERPRET 'pnldsns = dsn'src                /*set src dsname          */\nINTERPRET 'pnldsnt = dsn'tgt                /*set tgt dsname          */\nINTERPRET 'volids = volid'src               /*set source volser name  */\nINTERPRET 'volidt = volid'tgt               /*set target volser name  */\nIF volids /= '' THEN                        /*if volid entered        */\n   volids = 'VOLUME('volids')'              /*   use it               */\n\"LMINIT DATAID(\"ddvars\")\"    ,              /*get dataid for source   */\n       \"DATASET(\"pnldsns\")\"  ,              /*    dataset             */\n       volids,                              /*                        */\n       \"ENQ(SHR)\"                           /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     CALL Queue_Mbrs                        /*     queue nbr mbrs     */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volidt /= '' THEN                        /*if volid entered        */\n   volidt = 'VOLUME('volidt')'              /*   use it               */\n\"LMINIT DATAID(\"ddvart\")\"    ,              /*get dataid for target   */\n       \"DATASET(\"pnldsnt\")\"  ,              /*    dataset             */\n       volidt,                              /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     CALL Queue_Mbrs                        /*     queue nbr mbrs     */\n     CALL Free_Files                        /*     free the files     */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nlmmove_rc = 0                               /*init return code        */\ncnfrmoff = ' '                              /*reset cmd confirm sw    */\nDO tblrows                                  /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   INTERPRET 'mbrs = mbr'src                /*   set src mbr name     */\n   INTERPRET 'mbrt = mbr'src                /*   set tgt mbr name     */\n   IF mbrs = ' ' THEN                       /*   if src mbr name blank*/\n      ITERATE                               /*      get next member   */\n   IF cnfrmoff = ' ' THEN                   /*   if cmd confirm off   */\n      DO                                    /*      do                */\n        \"ADDPOP ROW(0) COLUMN(0)\"           /*        show popup win  */\n        \"DISPLAY PANEL(P2PGMOV)\"    ,       /*        display panel   */\n                \"CURSOR(REPLMBRS)\"          /*                        */\n        panel_rc = rc                       /*        set panel rc    */\n        \"REMPOP\"                            /*        remove popup win*/\n        IF panel_rc = 8 THEN                /*        if pf3/pf4 presd*/\n           ITERATE                          /*           go to nxt mbr*/\n        IF panel_rc /= 0 THEN               /*        if bad rc       */\n           DO                               /*           do           */\n             CALL System_Error              /*             stack msgs */\n             LEAVE                          /*             quit       */\n           END                              /*           end          */\n      END                                   /*      end               */\n   IF cancelop \\= ' ' THEN                  /*    if cmd was cancelled*/\n      LEAVE                                 /*       quit             */\n   IF mbrl = mbrr THEN                      /*    if mbr names equal  */\n      IF replmbrs = ' ' THEN                /*       if not repl mbr  */\n         ITERATE                            /*          get next mbr  */\n   \"LMMOVE FROMID(\"ddvars\")\"    ,           /*    move member         */\n          \"FROMMEM(\"mbrs\")\"     ,           /*                        */\n          \"TODATAID(\"ddvart\")\"  ,           /*                        */\n          \"TOMEM(\"mbrt\")\"       ,           /*                        */\n          \"REPLACE\"                         /*                        */\n  lmmove_rc = rc                            /*   set return code      */\n  IF lmmove_rc \\= 0 THEN                    /*   if bad return code   */\n     DO                                     /*      do                */\n       CALL System_Error                    /*        put msgs in stak*/\n       LEAVE                                /*        quit            */\n     END                                    /*      end               */\n   INTERPRET ,                              /*   add 1 to nbr mbrs in */\n     'IF mbr'tgt '= \"\" THEN' ,              /*   tgt dataset          */\n        'mem'tgt'o = mem'tgt'o + 1'         /*   if necessary         */\n   \"TBDELETE\" tblname                       /*   delete table row     */\n   INTERPRET 'res'src '= \"M\"'               /*   set results field    */\n   INTERPRET 'mbr'tgt '= mbr'src            /*   set tgt mbr name     */\n   INTERPRET 'stat1'tgt '= stat1'src        /*   set tgt stats line 1 */\n   INTERPRET 'stat2'tgt '= stat2'src        /*   set tgt stats line 2 */\n   INTERPRET 'stat3'tgt '= stat3'src        /*   set tgt stats line 3 */\n   INTERPRET 'stat4'tgt '= stat4'src        /*   set tgt stats line 4 */\n   INTERPRET 'stat5'tgt '= stat5'src        /*   set tgt stats line 5 */\n   INTERPRET 'stat6'tgt '= stat6'src        /*   set tgt stats line 6 */\n   INTERPRET 'stat7'tgt '= stat7'src        /*   set tgt stats line 7 */\n   INTERPRET 'mbr'src '= \" \"'               /*   set src mbr name     */\n   INTERPRET 'stat1'src '= \" \"'             /*   set src stats line 1 */\n   INTERPRET 'stat2'src '= \" \"'             /*   set src stats line 1 */\n   INTERPRET 'stat3'src '= \" \"'             /*   set src stats line 1 */\n   INTERPRET 'stat4'src '= \" \"'             /*   set src stats line 1 */\n   INTERPRET 'stat5'src '= \" \"'             /*   set src stats line 1 */\n   INTERPRET 'stat6'src '= \" \"'             /*   set src stats line 1 */\n   INTERPRET 'stat7'src '= \" \"'             /*   set src stats line 1 */\n   \"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"    /*   re-add row to table  */\n   tbadd_rc = rc                            /*   set return code      */\n   IF tbadd_rc > 8 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        LEAVE                               /*        exit loop       */\n      END                                   /*      end               */\nEND                                         /*end                     */\n\nCALL Queue_Mbrs                             /*queue nbr mbrs to stack */\nCALL Free_Files                             /*close file              */\n\nEXIT lmmove_rc\n\nQueue_Mbrs:\n   QUEUE memlo                              /*nbr mbrs left side ds   */\n   QUEUE memro                              /*nbr mbrs right side ds  */\nRETURN\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   lmmove_rc = 4                            /*set subroutine ret code */\nRETURN\n\nFree_Files:\n   \"LMFREE DATAID(\"ddvars\")\"                /*free source dataset     */\n   \"LMFREE DATAID(\"ddvart\")\"                /*free target dataset     */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGREN": {"ttr": 261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01+\\x00\\x01\\x00\\x99\\x11/\\x00\\x99\\x17/\\x16\\x10\\x00x\\x00k\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.43", "flags": 0, "createdate": "1999-04-22T00:00:00", "modifydate": "1999-06-21T16:10:01", "lines": 120, "newlines": 107, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGREN                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Global Rename Command for the  |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,volidl,volidr,, /*get args from caller  */\n    p2pverno,memlo,memro,nbr_of_mbrs        /*                        */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set dsname for panel    */\nINTERPRET 'volid = volid'lr_sw              /*set source volser name  */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\n\"LMINIT DATAID(\"ddvar\")\"     ,              /*get dataid for target   */\n       \"DATASET(\"pnldsn\")\"   ,              /*   dataset              */\n       volid                 ,              /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"LMOPEN DATAID(\"ddvar\")\"     ,              /*open dataset            */\n       \"OPTION(OUTPUT)\"                     /*                        */\nlmopen_rc = rc                              /*set return code         */\nIF lmopen_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     CALL Free_File                         /*     free dataset       */\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nlmmren_rc = 0                               /*init return code        */\nDO tblrows                                  /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   INTERPRET 'mbro = mbr'lr_sw              /*   set member name      */\n   IF mbro = '' THEN                        /*   if mbr name blank    */\n      ITERATE                               /*      get next mbr      */\n   mbr_err = 1                              /*   set switch           */\n   DO while mbr_err = 1                     /*   do while mbrs not sam*/\n      \"ADDPOP ROW(0) COLUMN(0)\"             /*      show popup win    */\n      \"DISPLAY PANEL(P2PGREN)\"  ,           /*      show panel        */\n                   \"CURSOR(MBRN)\"           /*                        */\n      panel_rc = rc                         /*      set panel rc      */\n      \"REMPOP\"                              /*      remove popup win  */\n      mbr_err = 0                           /*      reset mbr err sw  */\n      lmmren_rc = 0                         /*      reset return code */\n      IF panel_rc = 8 THEN                  /*      if pf3/pf4 pressed*/\n         LEAVE                              /*         quit           */\n      IF panel_rc /= 0 THEN                 /*      if bad rc         */\n         DO                                 /*         do             */\n           CALL System_Error                /*           queue msgs   */\n           Call Free_File                   /*           free file    */\n           RETURN 4                         /*           quit         */\n         END                                /*         end            */\n      IF mbrn = mbro THEN                   /*      if mbr names same */\n         DO                                 /*         do             */\n           \"SETMSG MSG(PTPM006)\"            /*           dsp err msg  */\n           mbr_err = 1                      /*           set err sw   */\n           ITERATE                          /*           try again    */\n         END                                /*         end            */\n      IF cancelop \\= ' ' THEN               /*   if cmd cancelled     */\n         LEAVE                              /*      quit              */\n      \"LMMREN DATAID(\"ddvar\")\"     ,        /*   rename member        */\n             \"MEMBER(\"mbro\")\"      ,        /*                        */\n             \"NEWNAME(\"mbrn\")\"              /*                        */\n      lmmren_rc = rc                        /*   set return code      */\n      IF lmmren_rc \\= 0 THEN                /*   if bad return code   */\n         DO                                 /*      do                */\n           \"SETMSG MSG(ISRZ002)\"            /*        display message */\n           mbr_err = 1                      /*        set err sw      */\n           ITERATE                          /*        try again       */\n         END                                /*      end               */\n      \"TBDELETE\" tblname                    /*   delete tbl row       */\n      INTERPRET 'res'lr_sw '= R'            /*   set results field    */\n      INTERPRET 'mbr'lr_sw '= mbrn'         /*   set member name      */\n      \"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\" /*   re-add table row     */\n      tbadd_rc = rc                         /*   set return code      */\n      IF tbadd_rc > 8 THEN                  /*   if bad return code   */\n         DO                                 /*      do                */\n           CALL System_Error                /*        put msgs in stak*/\n           CALL Free_File                   /*        free files      */\n           RETURN 4                         /*        return to caller*/\n         END                                /*      end               */\n      mbrn = ' '                            /*   blank mbr name       */\n   END                                      /*   end                  */\n   IF panel_rc = 8 THEN                     /*   if pf3/pf4 pressed   */\n      ITERATE                               /*      get next mbr      */\n   IF cancelop \\= ' ' THEN                  /*   if cmd cancelled     */\n      LEAVE                                 /*      leave             */\nEND                                         /*end                     */\n                                            /*                        */\nCALL Free_File                              /*free file               */\n\nEXIT lmmren_rc\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   lmmren_rc = 4                            /*set subroutine ret code */\nRETURN\n\nFree_File:\n   \"LMCLOSE DATAID(\"ddvar\")\"                /*close dataset           */\n   \"LMFREE  DATAID(\"ddvar\")\"                /*free dataset            */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGSUP": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01)\\x00\\x01\\x00\\x99\\x11\\x7f\\x00\\x99 O\\x11T\\x00\\xd4\\x00\\xc7\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.41", "flags": 0, "createdate": "1999-04-27T00:00:00", "modifydate": "1999-07-23T11:54:01", "lines": 212, "newlines": 199, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGSUP                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the SuperCe Command for the        |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*cmds dflt to ISPF       */\ndummy = OUTTRAP(\"allocmsg.\",,\"noconcat\")    /*trap terminal output    */\nARG lr_sw,tblname,dsnl,dsnr,volidl,volidr   /*get args from caller    */\nINTERPRET 'dsn = dsn'lr_sw                  /*set dsname              */\n\"VGET (SCENWFL SCEODFL SCECMLN SCESSFL)\" ,  /*get SuperCe variables   */\n      \"PROFILE\"                             /*                        */\n\"VGET (p2pgstmt p2punts) PROFILE\"           /*get p2pcustm options    */\nscenwfl_hold = SCENWFL                      /*put scenwfl in hold     */\nsceodfl_hold = SCEODFL                      /*put sceodfl in hold     */\nscecmln_hold = SCECMLN                      /*put scecmln in hold     */\nscessfl_hold = SCESSFL                      /*put scessfl in hold     */\nlsdivl = ''                                 /*initialize field        */\nlsdivr = ''                                 /*initialize field        */\nIF volidl /= '' THEN                        /*if volid left entered   */\n   lsdivl = 'VOLUME('volidl')'              /*   use it               */\nlistdsi_rc = LISTDSI(dsnl lsdivl)           /*get left dsn info       */\ndsnl_recfm = SYSRECFM                       /*get left dsn recfm      */\nIF volidr /= '' THEN                        /*if volid right entered  */\n   lsdivr = 'VOLUME('volidr')'              /*   use it               */\nlistdsi_rc = LISTDSI(dsnr lsdivr)           /*get right dsn info      */\ndsnr_recfm = SYSRECFM                       /*get right dsn recfm     */\nIF lr_sw = 'L' THEN                         /*if copy left to right   */\n   DO;new = 'L';old = 'R';END               /*  src = left;tgt = right*/\nELSE                                        /*else                    */\n   DO;new = 'R';old = 'L';END               /*  src = right;tgt = left*/\nmbrlist_rc = Build_Mbrlist()                /*bld select stmt list    */\nIF mbrlist_rc = 4 THEN                      /*if bad rc from stmt bld */\n   DO                                       /*   do                   */\n     QUEUE zedsmsg                          /*     queue short msg    */\n     QUEUE zedlmsg                          /*     queue long msg     */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF mbrlist_rc = 8 THEN                      /*if bad rc from stmt bld */\n   RETURN 8                                 /*   return to caller     */\nIF volidl /= '' THEN                        /*                        */\n   dsnl = ''                                /*                        */\nIf volidr /= '' THEN                        /*                        */\n   dsnr = ''                                /*                        */\nIF lr_sw = 'L' THEN                         /*                        */\n   DO                                       /*                        */\n      SCENWFL = dsnl                        /*                        */\n      SCEODFL = dsnr                        /*                        */\n   END                                      /*                        */\nELSE                                        /*                        */\n   DO                                       /*                        */\n      SCENWFL = dsnr                        /*                        */\n      SCEODFL = dsnl                        /*                        */\n   END                                      /*                        */\nSCESSFL = p2pgstmt                          /*set SuperCe stmts dsn   */\nSCECMLN = '*'                               /*set SuperCe mbr name    */\n\"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)\" ,  /*store new SuperCe vars  */\n      \"PROFILE\"                             /*                        */\n\"CONTROL DISPLAY SAVE\"                      /*save current display    */\n\"SELECT PGM(ISRSEPRM)\"                      /*call SuperCe            */\n\"CONTROL DISPLAY RESTORE\"                   /*restore display         */\nSCESSFL = scessfl_hold                      /*restore scessfl         */\nSCENWFL = scenwfl_hold                      /*restore scenwfl         */\nSCEODFL = sceodfl_hold                      /*restore sceodfl         */\nSCECMLN = scecmln_hold                      /*restore scecmln         */\n\"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)\" ,  /*store original vars back*/\n      \"PROFILE\"                             /*  in profile pool       */\nRETURN 0                                    /*return to caller        */\n\nBuild_Mbrlist:\n   dsnstat = SYSDSN(p2pgstmt)               /*get dataset status      */\n   SELECT                                   /*select                  */\n     WHEN dsnstat = 'DATASET NOT FOUND' THEN/*  when not found        */\n          CALL Allocate_Dataset             /*    allocate it         */\n     WHEN dsnstat = 'OK' THEN               /*  when ok               */\n           DO                               /*    do                  */\n             ADDRESS TSO \"DELETE\" p2pgstmt  /*      delete it         */\n             CALL Allocate_Dataset          /*      reallocate it     */\n           END                              /*    end                 */\n   OTHERWISE                                /*otherwise               */\n     NOP                                    /*  do                    */\n   END                                      /*end                     */\n   IF dataset_not_allocated THEN            /*if err in ds allocation */\n      RETURN 4                              /*   return to caller     */\n   read_stmts_rc = Read_Old_SuperC_Stmts()  /*read old stmts dataset  */\n   IF read_stmts_rc > 0 THEN                /*if bad read rc          */\n      DO                                    /*   do                   */\n        DROP scmbrlst.                      /*     drop stmts variable*/\n        scmbrlst.0 = 0                      /*     init nbr stmts     */\n        stmt_nbr = scmbrlst.0               /*     init stmt number   */\n      END                                   /*   end                  */\n   ELSE                                     /*else                    */\n      stmt_nbr = scmbrlst.0                 /*   set stmt nbr         */\n   \"TBTOP\" tblname                          /*position to top of tbl  */\n   \"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"      /*get nbr rows in table   */\n   select_stmt = ''                         /*init select statement   */\n   select_sw = 0                            /*reset select sw         */\n   nbr_mbrs = 0                             /*reset nbr mbrs          */\n   DO tblrows                               /*do once for each member */\n      \"TBSKIP\" tblname                      /*   skip to mbr name     */\n      \"TBGET\" tblname                       /*   retrieve row from tbl*/\n      mbrnamel = STRIP(LEFT(mbrl,8))        /*   drop spaces in name  */\n      mbrnamer = STRIP(LEFT(mbrr,8))        /*   drop spaces in name  */\n      IF mbrnamel = '' | mbrnamer = '' THEN /*   if either name blank */\n         ITERATE                            /*      skip to next mbr  */\n      select_stmt = select_stmt mbrnamel',' /*   add mbr to sel stmt  */\n      nbr_mbrs = nbr_mbrs + 1               /*   add to nbr of mbrs   */\n      IF nbr_mbrs = 6 THEN                  /*   if 6 mbrs in stmt    */\n         DO                                 /*      do                */\n           select_stmt = 'SELECT' || ,      /*        add 'select'    */\n                         select_stmt        /*                        */\n           select_stmt = LEFT(select_stmt, ,/*        drop comma from */\n           LENGTH(select_stmt) - 1)         /*          end of stmt   */\n           stmt_nbr = stmt_nbr + 1          /*        incr stmt number*/\n           scmbrlst.0 = stmt_nbr            /*        set nbr stmts   */\n           scmbrlst.stmt_nbr = select_stmt  /*        add stmt to var */\n           select_stmt = ''                 /*        blank stmt      */\n           select_sw = 1                    /*        set select sw   */\n           nbr_mbrs = 0                     /*        reset nbr mbrs  */\n         END                                /*      end               */\n   END                                      /*end                     */\n   IF select_stmt = '' THEN                 /*if no select stmts      */\n      NOP                                   /*   bypass               */\n   ELSE                                     /*else                    */\n      DO                                    /*   do                   */\n        select_stmt = 'SELECT' || ,         /*     add 'select'       */\n                      select_stmt           /*                        */\n        select_stmt = LEFT(select_stmt, ,   /*     drop comma from end*/\n        LENGTH(select_stmt) - 1)            /*       of stmt          */\n        stmt_nbr = stmt_nbr + 1             /*     incr stmt number   */\n        scmbrlst.0 = stmt_nbr               /*     set nbr of stmts   */\n        scmbrlst.stmt_nbr = select_stmt     /*     add stmt to var    */\n        select_stmt = ''                    /*     blank stmt         */\n        select_sw = 1                       /*     set select sw      */\n        nbr_mbrs = 0                        /*     reset nbr mbrs     */\n      END                                   /*   end                  */\n   IF select_sw = 0 THEN                    /*if no mbrs selected     */\n      DO                                    /*   do                   */\n        ADDRESS TSO\"FREE DDNAME(SCMBRLST)\"  /*     free stmts dataset */\n        QUEUE 'MSG(PTPM001E)'               /*     set message id     */\n        RETURN 8                            /*     return to caller   */\n      END                                   /*   end                  */\n   DO i = 1 to scmbrlst.0                   /*do once per select stmt */\n      QUEUE scmbrlst.i                      /*   put stmt in stack    */\n   END                                      /*end                     */\n   ADDRESS TSO \"EXECIO\" scmbrlst.0       ,  /*write stmts to stmt     */\n               \"DISKW SCMBRLST (FINIS\"      /*   dataset              */\n   ADDRESS TSO \"FREE DDNAME(SCMBRLST)\"      /*free statements dataset */\nRETURN 0                                    /*return to caller        */\n\nAllocate_Dataset:\n   dataset_not_allocated = 0                /*reset error sw          */\n   ADDRESS TSO  \"ALLOCATE\"      ,           /*allocate statements     */\n         \"DDNAME(SCMBRLST)\"     ,           /*   dataset              */\n         \"DSNAME(\"p2pgstmt\")\"   ,           /*set in p2pcustm         */\n         \"NEW REU\"              ,           /*                        */\n         \"UNIT(\"p2punts\")\"      ,           /*set in p2pcustm         */\n         \"TRACKS\"               ,           /*                        */\n         \"SPACE(15,15)\"         ,           /*                        */\n         \"LRECL(80)\"            ,           /*                        */\n         \"BLKSIZE(23440)\"       ,           /*                        */\n         \"RECFM(F B)\"           ,           /*                        */\n         \"DSORG(PS)\"                        /*                        */\n   alloc_rc = rc                            /*set return code         */\n   IF alloc_rc > 0 THEN                     /*if bad return code      */\n      CALL Bad_Allocate                     /*   write error msgs     */\nRETURN\n\nBad_Allocate:\n   dataset_not_allocated = 1                /*set bad alloc sw        */\n   term_width = SYSVAR(SYSWTERM)            /*get terminal width      */\n   zedsmsg = 'Error - Press PF1       '     /*set short message       */\n   zedlmsg = 'Error: REXX Exec P2PGSUP'  ,  /*                        */\n     ' - Procedure Allocate_Dataset'        /*set long message        */\n   zedlmsg = LEFT(zedlmsg,term_width)       /*set to term width       */\n   msg2 = 'Error Allocating Dataset:'    ,  /*msg 2                   */\n     p2pgstmt                               /*                        */\n   msg2 = LEFT(msg2,term_width)             /*set to term width       */\n   zedlmsg = zedlmsg msg2                   /*add to long messge      */\n   msg3 = LEFT('MESSAGE:',term_width)       /*msg 3                   */\n   zedlmsg = zedlmsg msg3                   /*add to long message     */\n   DO x = 1 to allocmsg.trapped             /*do once per err msg     */\n      allocmsg.x = LEFT(allocmsg.x, ,       /*   set to term width    */\n                  term_width)               /*                        */\n      zedlmsg = zedlmsg allocmsg.x          /*   concatenate          */\n   END                                      /*end                     */\nRETURN\n\nRead_Old_SuperC_Stmts:\n   dsnstat = SYSDSN(SCESSFL)                /*get stmts dsn status    */\n   IF dsnstat \\= 'OK' THEN                  /*if not ok               */\n      RETURN 12                             /*   return to caller     */\n   ADDRESS TSO \"ALLOCATE DDNAME(OLDSTMTS)\" ,/*allocate old stmts ds   */\n               \"DA(\"SCESSFL\") SHR\"          /*                        */\n   IF rc > 0 THEN                           /*if alloc not successful */\n      RETURN 12                             /*   return to caller     */\n   ADDRESS TSO \"EXECIO * DISKR OLDSTMTS\" ,  /*read old stmts ds       */\n               \"(STEM scmbrlst. FINIS\"      /*                        */\n   execio_rc = rc                           /*set return code         */\n   ADDRESS TSO \"FREE DDNAME(OLDSTMTS)\"      /*free stmts ds           */\nRETURN execio_rc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PGTTL": {"ttr": 14, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x01\\x00\\x99\\x12\\x0f\\x00\\x99\\x14o\\x15A\\x00D\\x00:\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1999-04-30T00:00:00", "modifydate": "1999-05-26T15:41:01", "lines": 68, "newlines": 58, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PGTTL                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the TOTAL LINES command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno        /*get args from caller    */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBQUERY\" tblname \"ROWNUM(TBLROWS)\"         /*nbr of rows in table    */\nsizelttl = 0                                /*init total size left    */\ninitlttl = 0                                /*init total init left    */\nsizerttl = 0                                /*init total size right   */\ninitrttl = 0                                /*init total init right   */\nmbrlcnt = 0                                 /*init nbr mbrs left      */\nmbrrcnt = 0                                 /*init nbr mbrs right     */\nDO tblrows                                  /*do once for each row    */\n   \"TBSKIP\" tblname \"NUMBER(1)\"             /*   skip to next row     */\n   \"TBGET\" tblname                          /*   get a row            */\n   CALL Count_Lines                         /*   count total lines    */\nEND                                         /*end                     */\n\"ADDPOP ROW(0) COLUMN(0)\"                   /*show popup window       */\n\"DISPLAY PANEL(P2PGTTL)\"                    /*display panel           */\npanel_rc = rc                               /*set panel rc            */\n\"REMPOP\"                                    /*remove popup window     */\nIF panel_rc = 8 THEN                        /*if pf3 or pf4 pressed   */\n   RETURN 0                                 /*   return to caller     */\nIF panel_rc /= 0 THEN                       /*if bad panel rc         */\n   DO                                       /*   do                   */\n     QUEUE zerrsm                           /*     queue short msg    */\n     QUEUE zerrlm                           /*     queue long msg     */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nRETURN 0\n\nCount_Lines:\n   IF mbrl /= ' ' & stat1l /= ' ' THEN      /*if mbr has stats        */\n      DO                                    /*   do                   */\n        mbrlcnt = mbrlcnt + 1               /*     add 1 to mbr count */\n        sizel  = LEFT(stat5l,5)             /*     extract size fld   */\n        initl  = LEFT(stat6l,5)             /*     extract init fld   */\n        IF DATATYPE(sizel) = 'NUM' THEN     /*     if numeric         */\n           sizelttl = sizelttl + sizel      /*        add to total    */\n        IF DATATYPE(initl) = 'NUM' THEN     /*     if numeric         */\n           initlttl = initlttl + initl      /*        add to total    */\n      END                                   /*   end                  */\n   IF mbrr /= ' ' & stat1r /= ' ' THEN      /*if mbr has stats        */\n      DO                                    /*   do                   */\n        mbrrcnt = mbrrcnt + 1               /*     add 1 to mbr count */\n        sizer  = LEFT(stat5r,5)             /*     extract size fld   */\n        initr  = LEFT(stat6r,5)             /*     extract init fld   */\n        IF DATATYPE(sizer) = 'NUM' THEN     /*     if numeric         */\n           sizerttl = sizerttl + sizer      /*        add to total    */\n        IF DATATYPE(initr) = 'NUM' THEN     /*     if numeric         */\n           initrttl = initrttl + initr      /*        add to total    */\n      END                                   /*   end                  */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLALL": {"ttr": 16, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\t\\x00\\x99\\x12\\x0f\\x00\\x99\\x14o\\x15A\\x00Y\\x00a\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1999-04-30T00:00:00", "modifydate": "1999-05-26T15:41:09", "lines": 89, "newlines": 97, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLALL                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the ALL command for the            |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */\n    mbrl,mbrr,nbr_of_mbrs                   /*                        */\n\"TBTOP\" tblname                             /*go to top of table      */\n\"TBSCAN\" tblname                   ,        /*locate member name      */\n         \"ARGLIST(mbrl,mbrr)\"      ,        /*                        */\n         \"CONDLIST(EQ)\"            ,        /*                        */\n         \"PREVIOUS\"                ,        /*                        */\n         \"POSITION(crpn)\"          ,        /*                        */\n         \"ROWID(currow)\"                    /*                        */\ntbscan_rc = rc                              /*set return code         */\nIF tbscan_rc = 8 THEN                       /*if mbr not found        */\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM007)'                   /*     set message id     */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\nIF tbscan_rc >8 THEN                        /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"TBGET\" tblname                             /*get tble row            */\nIF lr_sw = 'L' THEN                         /*if we did left stats    */\n   otherside = 'R'                          /*  swap to right stats   */\nELSE                                        /*else                    */\n   otherside = 'L'                          /*  swap to left stats    */\nCALL Explode_Stats lr_sw                    /*extract stats fields    */\nCALL Explode_Stats otherside                /*extract stats fields    */\nINTERPRET 'mbr = mbr'lr_sw                  /*set panel mbr name      */\nIF mbr = '' THEN                            /*if mbr name blank       */\n   INTERPRET 'mbr = mbr'otherside           /*   use other mbr name   */\n\"ADDPOP ROW(0) COLUMN(0)\"                   /*show popup window       */\n\"DISPLAY PANEL(P2PLALL)\"                    /*show panel              */\npanel_rc = rc                               /*set panel rc            */\n\"REMPOP\"                                    /*remove pop-up window    */\nIF panel_rc = 8 THEN                        /*if pf3/pf4 pressed      */\n   RETURN 0                                 /*   return to caller     */\nIF panel_rc /= 0 THEN                       /*if bad panel rc         */\n   DO                                       /*   do                   */\n      CALL System_Error                     /*     put msgs in stack  */\n      RETURN 4                              /*     return to caller   */\n   END                                      /*   end                  */\nRETURN 0\n\nExplode_Stats:\n   ARG mbr_flag                             /*get lr_switch           */\n   INTERPRET ,                              /*extract stats for mbr   */\n   'IF mbr'mbr_flag '/= \" \" & stat'mbr_flag '/= \" \" THEN;' ,\n      'DO;'                                          ,\n         'vvmm'mbr_flag '= LEFT(stat1'mbr_flag',5);' ,\n         'cre'mbr_flag  '= LEFT(stat2'mbr_flag',8);'  ,\n         'cha'mbr_flag  '= LEFT(stat3'mbr_flag',8);'  ,\n         'time'mbr_flag '= LEFT(stat4'mbr_flag',8);' ,\n         'size'mbr_flag '= LEFT(stat5'mbr_flag',5);' ,\n         'init'mbr_flag '= LEFT(stat6'mbr_flag',5);' ,\n         'mod'mbr_flag  '= LEFT(stat7'mbr_flag',5);'  ,\n         'user'mbr_flag '= SUBSTR(stat7'mbr_flag',7,8);' ,\n         'al'mbr_flag   '= SUBSTR(stat7'mbr_flag',16,3);' ,\n      'END;'                                         ,\n   'ELSE;'                                           ,\n      'DO;'                                          ,\n         'vvmm'mbr_flag '=  \" \";'                    ,\n         'cre'mbr_flag  '=  \" \";'                     ,\n         'cha'mbr_flag  '=  \" \";'                     ,\n         'time'mbr_flag '=  \" \";'                    ,\n         'size'mbr_flag '=  \" \";'                    ,\n         'init'mbr_flag '=  \" \";'                    ,\n         'mod'mbr_flag  '=  \" \";'                     ,\n         'user'mbr_flag '=  \" \";'                    ,\n         'al'mbr_flag   '=  \" \";'                      ,\n      'END;'\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLBRW": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00G\\x00\\x99\\x11o\\x00\\x99\\x18\\x0f\\x10Y\\x00f\\x00c\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1999-04-26T00:00:00", "modifydate": "1999-06-29T10:59:47", "lines": 102, "newlines": 99, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLBRW                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Edit Member Command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,cmdl,cmdr,tblname,dsnl,dsnr,   ,  /*get args from caller    */\n    p2pverno,mbrl,mbrr,volidl,volidr,    ,  /*get args from caller    */\n    nbr_of_mbrs                             /*                        */\n\"TBTOP\" tblname                             /*go to top of table      */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set dsname for panel    */\nINTERPRET 'volid = volid'lr_sw              /*set volser name         */\nINTERPRET 'mbrm = mbr'lr_sw                 /*set mbr name for panel  */\nIF cmdl = 'V' THEN cmd = 'VIEW'             /*do we view? or...       */\nIF cmdl = 'B' THEN cmd = 'BROWSE'           /*do we browse?           */\nIF cmdr = 'V' THEN cmd = 'VIEW'             /*do we view? or...       */\nIF cmdr = 'B' THEN cmd = 'BROWSE'           /*do we browse?           */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\nINTERPRET                           ,       /*find member             */\n  '\"TBSCAN\"' tblname                ,       /*                        */\n           '\"ARGLIST(mbr'lr_sw')'   ,       /*                        */\n           'CONDLIST(EQ)'           ,       /*                        */\n           'PREVIOUS'               ,       /*                        */\n           'POSITION(crpn)'         ,       /*                        */\n           'ROWID(currow)\"'                 /*                        */\ntbscan_rc = rc                              /*set return code         */\nIF tbscan_rc = 8 THEN                       /*if mbr not found        */\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM007)'                   /*     set short message  */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\nIF tbscan_rc >8 THEN                        /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nbrowse_rc = 0                               /*init return code        */\n\"TBSKIP\" tblname \"ROW(\"currow\")\"            /*skip to next row        */\n\"TBGET\" tblname                             /*get a row               */\nINTERPRET 'mbro = mbr'lr_sw                 /*set mbr name to edit    */\n\"CONTROL DISPLAY SAVE\"                      /*save current display    */\nIF lr_sw = 'L' THEN                         /*   if browse left       */\n   INTERPRET '\"'cmd               ,         /*                        */\n          \"DATASET(\"            ||,         /*      browse/view left  */\n           Build_Dsn(dsnl,mbrl) ||,         /*      member            */\n           \")\"                    ,         /*                        */\n           volid'\"'                         /*                        */\nELSE                                        /*   else                 */\n      INTERPRET '\"'cmd               ,      /*                        */\n             \"DATASET(\"            ||,      /*      browse/view right */\n              Build_Dsn(dsnr,mbrr) ||,      /*      member            */\n              \")\"                    ,      /*                        */\n              volid'\"'                      /*                        */\nbrowse_rc = rc                              /*set return code         */\n\"CONTROL DISPLAY RESTORE\"                   /*restore current displ   */\nIF browse_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     RETURN 4                               /*     leave              */\n   END                                      /*   end                  */\nINTERPRET 'res'lr_sw '=' LEFT(cmd,1)        /*set results field       */\n\"TBDELETE\" tblname                          /*delete table row        */\ntbdel_rc = rc                               /*set return code         */\nIF tbdel_rc >8 THEN                         /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"       /*re-add row              */\ntbadd_rc = rc                               /*set return code         */\nIF tbadd_rc >8 THEN                         /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nEXIT 0\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\nRETURN\n\nBuild_Dsn:\n   ARG dsn,mbrname                          /*get dsn & mbrname       */\n   mbrname = STRIP(mbrname)                 /*drop spaces from mbrname*/\n   dsn_length = LENGTH(dsn) - 1             /*get dsn length          */\n   dsn = LEFT(dsn,dsn_length)               /*drop right quote        */\n   dsn = dsn || \"(\" || mbrname || \")'\"      /*add mbrname/right paren */\nRETURN dsn                                  /*                        */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLCPY": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x19\\x00\\x99\\x11o\\x00\\x99\"\\x1f\\x11\\x15\\x00\\x92\\x00\\x82\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "1999-04-26T00:00:00", "modifydate": "1999-08-09T11:15:19", "lines": 146, "newlines": 130, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLCPY                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Copy Member command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */\n    memlo,memro,mbrl,mbrr,cnfrml,cnfrmr, ,  /*                        */\n    volidl,volidr,nbr_of_mbrs               /*                        */\nIF lr_sw = 'L' THEN                         /*if copy left to right   */\n   DO;src = 'L';tgt = 'R';END               /*  src = left;tgt = right*/\nELSE                                        /*else                    */\n   DO;src = 'R';tgt = 'L';END               /*  src = right;tgt = left*/\n\"TBTOP\" tblname                             /*go to top of table      */\nINTERPRET 'pnldsns = dsn'src                /*set src dsname          */\nINTERPRET 'pnldsnt = dsn'tgt                /*set tgt dsname          */\nINTERPRET 'volids = volid'src               /*set src volser          */\nINTERPRET 'volidt = volid'tgt               /*set src volser          */\nINTERPRET 'mbrm = mbr'lr_sw                 /*set mbr name for panel  */\nINTERPRET                           ,       /*find member             */\n  '\"TBSCAN\"' tblname                ,       /*                        */\n           '\"ARGLIST(mbr'lr_sw')'   ,       /*                        */\n           'CONDLIST(EQ)'           ,       /*                        */\n           'PREVIOUS'               ,       /*                        */\n           'POSITION(crpn)'         ,       /*                        */\n           'ROWID(currow)\"'                 /*                        */\ntbscan_rc = rc                              /*set return code         */\nIF tbscan_rc = 8 THEN                       /*if mbr not found        */\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM007)'                   /*     set message id     */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\nIF tbscan_rc > 8 THEN                       /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volids /= '' THEN                        /*if volid entered        */\n   volids = 'VOLUME('volids')'              /*   use it               */\n\"LMINIT DATAID(\"ddvars\")\"    ,              /*get dataid for source   */\n       \"DATASET(\"pnldsns\")\"  ,              /*    dataset             */\n       volids                ,              /*                        */\n       \"ENQ(SHR)\"                           /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volidt /= '' THEN                        /*if volid entered        */\n   volidt = 'VOLUME('volidt')'              /*   use it               */\n\"LMINIT DATAID(\"ddvart\")\"    ,              /*get dataid for target   */\n       \"DATASET(\"pnldsnt\")\"  ,              /*    dataset             */\n       volidt                ,              /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\nlmcopy_rc = 0                               /*initialize return code  */\n\"TBSKIP\" tblname \"ROW(\"currow\")\"            /*skip to next row        */\n\"TBGET\" tblname                             /*retrieve row            */\nINTERPRET 'mbrs = mbr'src                   /*set src mbr name        */\nINTERPRET 'mbrt = mbr'src                   /*set tgt mbr name        */\npanel_rc = 0                                /*initialize panel rc     */\nIF (lr_sw = 'L' & cnfrml = 'Y') | ,         /*if cnfrm line cmd is on */\n   (lr_sw = 'R' & cnfrmr = 'Y') THEN        /*                        */\n   DO                                       /*   do                   */\n     \"ADDPOP ROW(0) COLUMN(0)\"              /*     show popup window  */\n     \"DISPLAY PANEL(P2PLCPY)\"               /*     display panel      */\n     panel_rc = rc                          /*     set panel rc       */\n     \"REMPOP\"                               /*     remove popup window*/\n   END                                      /*   end                  */\nIF panel_rc = 8 THEN                        /*if pf3/pf4 pressed      */\n   DO                                       /*   do                   */\n     CALL Free_Files                        /*     free files         */\n     RETURN 0                               /*     return to caller   */\n   END                                      /*   end                  */\nIF panel_rc /= 0 THEN                       /*if bad panel ret code   */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*    end                 */\n\"LMCOPY FROMID(\"ddvars\")\"    ,              /*copy mbr to other pds   */\n       \"FROMMEM(\"mbrs\")\"     ,              /*                        */\n       \"TODATAID(\"ddvart\")\"  ,              /*                        */\n       \"TOMEM(\"mbrt\")\"       ,              /*                        */\n       \"REPLACE\"                            /*                        */\nlmcopy_rc = rc                              /*set return code         */\nIF lmcopy_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     display message    */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nINTERPRET ,                                 /*add 1 to nbr mbrs in    */\n  'IF mbr'tgt '= \"\" THEN' ,                 /*tgt dataset if necessary*/\n     'mem'tgt'o = mem'tgt'o + 1'            /*                        */\n\"TBDELETE\" tblname                          /*delete table row        */\nINTERPRET 'res'src '= \"C\"'                  /*set results field       */\nINTERPRET 'mbr'tgt '= mbr'src               /*set tgt mbr name        */\nINTERPRET 'stat1'tgt '= stat1'src           /*set tgt stats line 1    */\nINTERPRET 'stat2'tgt '= stat2'src           /*set tgt stats line 2    */\nINTERPRET 'stat3'tgt '= stat3'src           /*set tgt stats line 3    */\nINTERPRET 'stat4'tgt '= stat4'src           /*set tgt stats line 4    */\nINTERPRET 'stat5'tgt '= stat5'src           /*set tgt stats line 5    */\nINTERPRET 'stat6'tgt '= stat6'src           /*set tgt stats line 6    */\nINTERPRET 'stat7'tgt '= stat7'src           /*set tgt stats line 7    */\n\"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"       /*re-add row to table     */\ntbadd_rc = rc                               /*set return codfe        */\nIF tbadd_rc > 8 THEN                        /*if error readding row   */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\nQUEUE memlo                                 /*put memlo in stack      */\nQUEUE memro                                 /*put memro in stack      */\nCALL Free_Files                             /*free files              */\n\nEXIT 10\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   CALL Free_Files                          /*close filee             */\nRETURN\n\nFree_Files:\n   \"LMFREE DATAID(\"ddvars\")\"                /*free source dataset     */\n   \"LMFREE DATAID(\"ddvart\")\"                /*free target dataset     */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLDEL": {"ttr": 265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x12\\x00\\x99\\x11o\\x00\\x99\\x17?\\x107\\x00\\x82\\x00\\x83\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1999-04-26T00:00:00", "modifydate": "1999-06-22T10:37:12", "lines": 130, "newlines": 131, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLDEL                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Delete Member Command for the  |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */\n    memlo,memro,mbrl,mbrr,cnfrml,cnfrmr, ,  /*                        */\n    volidl,volidr,nbr_of_mbrs               /*                        */\n\"TBTOP\" tblname                             /*go to top of table      */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set dsname for panel    */\nINTERPRET 'volid = volid'lr_sw              /*set volser              */\nINTERPRET 'mbrm = mbr'lr_sw                 /*set mbr name for panel  */\nINTERPRET                           ,       /*find member             */\n  '\"TBSCAN\"' tblname                ,       /*                        */\n           '\"ARGLIST(mbr'lr_sw')'   ,       /*                        */\n           'CONDLIST(EQ)'           ,       /*                        */\n           'PREVIOUS'               ,       /*                        */\n           'POSITION(crpn)'         ,       /*                        */\n           'ROWID(currow)\"'                 /*                        */\ntbscan_rc = rc                              /*set return code         */\nIF tbscan_rc = 8 THEN                       /*if mbr not found        */\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM007)'                   /*     set message id     */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\nIF tbscan_rc > 8 THEN                       /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\n\"LMINIT DATAID(\"ddvar\")\"     ,              /*get dataid for dataset  */\n       \"DATASET(\"pnldsn\")\"   ,              /*                        */\n       volid                 ,              /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"LMOPEN DATAID(\"ddvar\")\"     ,              /*open dataset            */\n       \"OPTION(OUTPUT)\"                     /*                        */\nlmopen_rc = rc                              /*set return code         */\nIF lmopen_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\nlmmdel_rc = 0                               /*init return code        */\n\"TBSKIP\" tblname \"ROW(\"currow\")\"            /*skip to next row        */\n\"TBGET\" tblname                             /*get a row               */\nINTERPRET 'mbro = mbr'lr_sw                 /*set member name         */\npanel_rc = 0                                /*initialize panel rc     */\nIF (lr_sw = 'L' & cnfrml = 'Y') | ,         /*if confirm line cmd     */\n   (lr_sw = 'R' & cnfrmr = 'Y') THEN        /*                        */\n   DO                                       /*   do                   */\n     \"ADDPOP ROW(0) COLUMN(0)\"              /*     show popup win     */\n     \"DISPLAY PANEL(P2PLDEL)\"               /*     display panel      */\n     panel_rc = rc                          /*     set panel rc       */\n     \"REMPOP\"                               /*     remove popup       */\n   END                                      /*   end                  */\nIF panel_rc = 8 THEN                        /*if pf3 or pf4 pressed   */\n   DO                                       /*   do                   */\n     CALL Close_File                        /*     close file         */\n     RETURN 0                               /*     return to caller   */\n   END                                      /*   end                  */\nIF panel_rc /= 0 THEN                       /*if bad panel rc         */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     set return code    */\n   END                                      /*   end                  */\n\"LMMDEL DATAID(\"ddvar\")\"     ,              /*   delete member        */\n       \"MEMBER(\"mbro\")\"                     /*                        */\nlmmdel_rc = rc                              /*set return code         */\nIF lmmdel_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nINTERPRET 'mem'lr_sw'o = mem'lr_sw'o - 1'   /*sub 1 from nbr mbrs     */\n\"TBDELETE\" tblname                          /*delete table row        */\nINTERPRET 'res'lr_sw '= \"D\"'                /*set results field       */\nINTERPRET 'mbr'lr_sw '= \" \"'                /*blank mbr name          */\nINTERPRET 'stat1'lr_sw '= \" \"'              /*blank stats line 1      */\nINTERPRET 'stat2'lr_sw '= \" \"'              /*blank stats line 2      */\nINTERPRET 'stat3'lr_sw '= \" \"'              /*blank stats line 3      */\nINTERPRET 'stat4'lr_sw '= \" \"'              /*blank stats line 4      */\nINTERPRET 'stat5'lr_sw '= \" \"'              /*blank stats line 5      */\nINTERPRET 'stat6'lr_sw '= \" \"'              /*blank stats line 6      */\nINTERPRET 'stat7'lr_sw '= \" \"'              /*blank stats line 7      */\n\"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"       /*re-add row to table     */\ntbadd_rc = rc                               /*set return code         */\nIF tbadd_rc > 8 THEN                        /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\nQUEUE memlo                                 /*put memlo in stack      */\nQUEUE memro                                 /*put memro in stack      */\nCALL Close_File                             /*close file              */\n\nExit 10\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   CALL Close_File                          /*close filee             */\nRETURN\n\nCLOSE_File:\n   \"LMCLOSE DATAID(\"ddvar\")\"                /*close dataset           */\n   \"LMFREE DATAID(\"ddvar\")\"                 /*free dataset            */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLEDT": {"ttr": 515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x007\\x00\\x99\\x11o\\x00\\x99\\x17_\\t\\t\\x00\\xb6\\x00\\xd2\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "1999-04-26T00:00:00", "modifydate": "1999-06-24T09:09:37", "lines": 182, "newlines": 210, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLEDT                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Edit Member Command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */\n    mbrl,mbrr,volidl,volidr,nbr_of_mbrs     /*                        */\n\"TBTOP\" tblname                             /*go to top of table      */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set dsname for panel    */\nINTERPRET 'volid = volid'lr_sw              /*set volser name         */\nINTERPRET 'mbrm = mbr'lr_sw                 /*set mbr name for panel  */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\nINTERPRET                           ,       /*find member             */\n  '\"TBSCAN\"' tblname                ,       /*                        */\n           '\"ARGLIST(mbr'lr_sw')'   ,       /*                        */\n           'CONDLIST(EQ)'           ,       /*                        */\n           'PREVIOUS'               ,       /*                        */\n           'POSITION(crpn)'         ,       /*                        */\n           'ROWID(currow)\"'                 /*                        */\ntbscan_rc = rc                              /*set return code         */\nIF tbscan_rc = 8 THEN                       /*if mbr not found        */\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM007)'                   /*     set message id     */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\nIF tbscan_rc >8 THEN                       /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nedit_rc = 0                                 /*init return code        */\n\"TBSKIP\" tblname \"ROW(\"currow\")\"            /*skip to next row        */\n\"TBGET\" tblname                             /*retrieve row            */\nINTERPRET 'mbro = mbr'lr_sw                 /*set mbr name to edit    */\n\"CONTROL DISPLAY SAVE\"                      /*save current display    */\nIF lr_sw = 'L' THEN                         /*If edit left            */\n   \"EDIT DATASET\"                 ,         /*   edit left member     */\n         \"(\"                      ,         /*                        */\n         Build_Dsn(dsnl,mbrl)     ,         /*                        */\n         \")\"                      ,         /*                        */\n         volid                              /*                        */\nELSE                                        /*else                    */\n   \"EDIT DATASET\"                 ,         /*   edit right member    */\n         \"(\"                      ,         /*                        */\n         Build_Dsn(dsnr,mbrr)     ,         /*                        */\n         \")\"                      ,         /*                        */\n         volid                              /*                        */\nedit_rc = rc                                /*set return code         */\n\"CONTROL DISPLAY RESTORE\"                   /*restore current displ   */\nIF edit_rc = 4 THEN                         /*if data not saved       */\n   DO                                       /*   do                   */\n     INTERPRET 'res'lr_sw '= \"E\"'           /*     set results field  */\n     \"TBDELETE\" tblname                     /*     delete row         */\n     \"TBADD\" tblname    ,                   /*     re-add row         */\n             \"MULT(\"nbr_of_mbrs\")\"          /*                        */\n     tbadd_rc = rc                          /*     set return code    */\n     IF tbadd_rc > 8 THEN                   /*     if error adding row*/\n        DO                                  /*        do              */\n          CALL System_Error                 /*          stack msgs    */\n          RETURN 4                          /*          return        */\n        END                                 /*        end             */\n     RETURN 0                               /*                        */\n   END                                      /*                        */\nIF edit_rc \\= 0 THEN                        /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF Get_New_Stats() > 0 THEN                 /*if err getting stats    */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"TBDELETE\" tblname                          /*delete row              */\n\"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"       /*re-add row              */\ntbadd_rc = 0                                /*set return code         */\nIF tbadd_rc >8 THEN                         /*if error adding tbl row */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\nEXIT 0\n\nBuild_Dsn:\n   ARG dsn,mbrname                          /*get dsn & mbrname       */\n   mbrname = STRIP(mbrname)                 /*drop spaces from mbrname*/\n   dsn_length = LENGTH(dsn) - 1             /*get dsn length          */\n   dsn = LEFT(dsn,dsn_length)               /*drop right quote        */\n   dsn = dsn || \"(\" || mbrname || \")'\"      /*add mbrname/right paren */\nRETURN dsn                                  /*                        */\n\nGet_New_Stats:\n   INTERPRET 'edit_dsn = dsn'lr_sw          /*set dsname to edit      */\n   \"LMINIT DATAID(\"ddvar\")\"     ,           /*get dataset dataid      */\n          \"DATASET(\"edit_dsn\")\" ,           /*                        */\n          volid                 ,           /*                        */\n          \"ENQ(SHRW)\"                       /*                        */\n   lminit_rc = rc                           /*set return code         */\n   IF lminit_rc \\= 0 THEN                   /*if bad return code      */\n      RETURN 4                              /*   return to caller     */\n   \"LMOPEN DATAID(\"ddvar\")\"     ,           /*open dataset            */\n          \"OPTION(INPUT)\"                   /*                        */\n   lmopen_rc = rc                           /*set return code         */\n   IF lmopen_rc \\= 0 THEN                   /*if bad return code      */\n      RETURN 4                              /*   return to caller     */\n   INTERPRET 'mbrname = mbr'lr_sw           /*set mbrname             */\n   \"LMMLIST DATAID(\"ddvar\")\"    ,           /*list mbr stats          */\n           \"OPTION(LIST)\"       ,           /*                        */\n           \"MEMBER(MBRNAME)\"    ,           /*                        */\n           \"STATS(YES)\"                     /*                        */\n   lmmlist_rc = rc                          /*set return code         */\n   IF lmmlist_rc \\= 0 THEN                  /*if bad return code      */\n      RETURN 4                              /*   return to caller     */\n   CALL Set_Stats                           /*get new mbr stats       */\n   CALL Close_File                          /*close file              */\nRETURN 0\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   CALL Close_File                          /*close filee             */\nRETURN\n\nClose_File:\n   \"LMCLOSE DATAID(\"ddvar\")\"                /*close target dataset    */\n   \"LMFREE DATAID(\"ddvar\")\"                 /*free target dataset     */\nRETURN\n\nSet_Stats:\n   INTERPRET 'stat1'lr_sw '= \" \"'           /*blank stats line 1      */\n   INTERPRET 'stat2'lr_sw '= \" \"'           /*blank stats line 2      */\n   INTERPRET 'stat3'lr_sw '= \" \"'           /*blank stats line 3      */\n   INTERPRET 'stat4'lr_sw '= \" \"'           /*blank stats line 4      */\n   INTERPRET 'stat5'lr_sw '= \" \"'           /*blank stats line 5      */\n   INTERPRET 'stat6'lr_sw '= \" \"'           /*blank stats line 6      */\n   INTERPRET 'stat7'lr_sw '= \" \"'           /*blank stats line 7      */\n   IF zlvers = '' THEN                      /*if stats flds are blank */\n      RETURN                                /*   return               */\n   PARSE VAR zlmtime hh ':' mm              /*fix time display format */\n   zlmtime = hh || mm || ':' || zlmsec      /*fix time display format */\n   INTERPRET ,                              /*new stats line 1        */\n     'stat1'lr_sw '= zlvers || \".\" || ' ,   /*                        */\n                    'zlmod zlcdate zlmdate' /*                        */\n   INTERPRET ,                              /*new stats line 2        */\n     'stat2'lr_sw '= zlcdate zlmdate '  ,   /*                        */\n                    'zlmtime'               /*                        */\n   INTERPRET ,                              /*new stats line 3        */\n     'stat3'lr_sw '= zlmdate zlmtime '  ,   /*                        */\n                    'RIGHT(zlcnorc,5)'      /*                        */\n   INTERPRET ,                              /*new stats line 4        */\n     'stat4'lr_sw '= zlmtime '          ,   /*                        */\n                    'RIGHT(zlcnorc,5) ' ,   /*                        */\n                    'RIGHT(zlinorc,5)'      /*                        */\n   INTERPRET ,                              /*new stats line 5        */\n     'stat5'lr_sw '= RIGHT(zlcnorc,5) ' ,   /*                        */\n                    'RIGHT(zlinorc,5) ' ,   /*                        */\n                    'RIGHT(zlmnorc,5)'      /*                        */\n   INTERPRET ,                              /*new stats line 6        */\n     'stat6'lr_sw '= RIGHT(zlinorc,5) ' ,   /*                        */\n                    'RIGHT(zlmnorc,5) ' ,   /*                        */\n                    'LEFT(zluser,8)'        /*                        */\n   INTERPRET ,                              /*new stats line 7        */\n     'stat7'lr_sw '= RIGHT(zlmnorc,5) ' ,   /*                        */\n                    'LEFT(zluser,8) '   ,   /*                        */\n                    'RIGHT(stat7'lr_sw',3)' /*                        */\n   INTERPRET 'res'lr_sw '= \"E\"'             /*                        */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLMOV": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00G\\x00\\x99\\x11o\\x00\\x99\\x18/\\tY\\x00\\x9b\\x00\\x92\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1999-04-26T00:00:00", "modifydate": "1999-07-01T09:59:47", "lines": 155, "newlines": 146, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLMOV                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Move Member command for the    |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */\n    memlo,memro,mbrl,mbrr,cnfrml,cnfrmr, ,  /*                        */\n    volidl,volidr,nbr_of_mbrs               /*                        */\nIF lr_sw = 'L' THEN                         /*if copy left to right   */\n   DO;src = 'L';tgt = 'R';END               /*  src = left;tgt = right*/\nELSE                                        /*else                    */\n   DO;src = 'R';tgt = 'L';END               /*  src = right;tgt = left*/\n\"TBTOP\" tblname                             /*go to top of table      */\nINTERPRET 'pnldsns = dsn'src                /*set src dsname          */\nINTERPRET 'pnldsnt = dsn'tgt                /*set tgt dsname          */\nINTERPRET 'volids = volid'src               /*set src volser          */\nINTERPRET 'volidt = volid'tgt               /*set src volser          */\nINTERPRET 'mbrm = mbr'lr_sw                 /*set mbr name for panel  */\nINTERPRET                           ,       /*find member             */\n  '\"TBSCAN\"' tblname                ,       /*                        */\n           '\"ARGLIST(mbr'lr_sw')'   ,       /*                        */\n           'CONDLIST(EQ)'           ,       /*                        */\n           'PREVIOUS'               ,       /*                        */\n           'POSITION(crpn)'         ,       /*                        */\n           'ROWID(currow)\"'                 /*                        */\ntbscan_rc = rc                              /*set return code         */\nIF tbscan_rc = 8 THEN                       /*if mbr not found        */\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM007)'                   /*     set short message  */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\nIF tbscan_rc > 8 THEN                       /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volids /= '' THEN                        /*if volid entered        */\n   volids = 'VOLUME('volids')'              /*   use it               */\n\"LMINIT DATAID(\"ddvars\")\"    ,              /*get dataid for source   */\n       \"DATASET(\"pnldsns\")\"  ,              /*    dataset             */\n       volids                ,              /*                        */\n       \"ENQ(SHR)\"                           /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volidt /= '' THEN                        /*if volid entered        */\n   volidt = 'VOLUME('volidt')'              /*   use it               */\n\"LMINIT DATAID(\"ddvart\")\"    ,              /*get dataid for target   */\n       \"DATASET(\"pnldsnt\")\"  ,              /*    dataset             */\n       volidt                ,              /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\nlmmove_rc = 0                               /*init return code        */\n\"TBSKIP\" tblname \"ROW(\"currow\")\"            /*skip to next row        */\n\"TBGET\" tblname                             /*retrieve row            */\nINTERPRET 'mbrs = mbr'src                   /*set src mbr name        */\nINTERPRET 'mbrt = mbr'src                   /*set tgt mbr name        */\npanel_rc = 0                                /*initialize panel rc     */\nIF (lr_sw = 'L' & cnfrml = 'Y') | ,         /*if confirm line cmd     */\n   (lr_sw = 'R' & cnfrmr = 'Y') THEN        /*                        */\n   DO                                       /*   do                   */\n     \"ADDPOP ROW(0) COLUMN(0)\"              /*     show popup window  */\n     \"DISPLAY PANEL(P2PLMOV)\"               /*     display panel      */\n     panel_rc = rc                          /*     set panel ret code */\n     \"REMPOP\"                               /*     remove popup window*/\n   END                                      /*   end                  */\nIF panel_rc = 8 THEN                        /*if pf3/pf4 pressed      */\n   DO                                       /*   do                   */\n     CALL Free_Files                        /*     free files         */\n     RETURN 0                               /*     return to caller   */\n   END                                      /*   end                  */\nIF panel_rc /= 0 THEN                       /*if bad panel ret code   */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\"LMMOVE FROMID(\"ddvars\")\"    ,              /*move member             */\n       \"FROMMEM(\"mbrs\")\"     ,              /*                        */\n       \"TODATAID(\"ddvart\")\"  ,              /*                        */\n       \"TOMEM(\"mbrt\")\"       ,              /*                        */\n       \"REPLACE\"                            /*                        */\nlmmove_rc = rc                              /*set return code         */\nIF lmmove_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nINTERPRET ,                                 /*add 1 to nbr mbrs in    */\n  'IF mbr'tgt '= \"\" THEN' ,                 /*tgt dataset if necessary*/\n     'mem'tgt'o = mem'tgt'o + 1'            /*                        */\nINTERPRET 'mem'src'o = mem'src'o - 1'      /*                        */\n\"TBDELETE\" tblname                          /*delete table row        */\nINTERPRET 'res'src '= \"M\"'                  /*set results field       */\nINTERPRET 'mbr'tgt '= mbr'src               /*set tgt mbr name        */\nINTERPRET 'stat1'tgt '= stat1'src           /*set tgt stats line 1    */\nINTERPRET 'stat2'tgt '= stat2'src           /*set tgt stats line 2    */\nINTERPRET 'stat3'tgt '= stat3'src           /*set tgt stats line 3    */\nINTERPRET 'stat4'tgt '= stat4'src           /*set tgt stats line 4    */\nINTERPRET 'stat5'tgt '= stat5'src           /*set tgt stats line 5    */\nINTERPRET 'stat6'tgt '= stat6'src           /*set tgt stats line 6    */\nINTERPRET 'stat7'tgt '= stat7'src           /*set tgt stats line 7    */\nINTERPRET 'mbr'src '= \" \"'                  /*set src mbr name        */\nINTERPRET 'stat1'src '= \" \"'                /*set src stats line 1    */\nINTERPRET 'stat2'src '= \" \"'                /*set src stats line 1    */\nINTERPRET 'stat3'src '= \" \"'                /*set src stats line 1    */\nINTERPRET 'stat4'src '= \" \"'                /*set src stats line 1    */\nINTERPRET 'stat5'src '= \" \"'                /*set src stats line 1    */\nINTERPRET 'stat6'src '= \" \"'                /*set src stats line 1    */\nINTERPRET 'stat7'src '= \" \"'                /*set src stats line 1    */\n\"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"       /*   re-add row to table  */\ntbadd_rc = rc                               /*set return code         */\nIF tbadd_rc > 8 THEN                        /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\n\nQUEUE memlo                                 /*put memlo in stack      */\nQUEUE memro                                 /*put memro in stack      */\nCALL Free_Files                             /*free files              */\n\nEXIT 10\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   CALL Free_Files                          /*close filee             */\nRETURN\n\nFree_Files:\n   \"LMFREE DATAID(\"ddvars\")\"                /*free source dataset     */\n   \"LMFREE DATAID(\"ddvart\")\"                /*free target dataset     */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLREN": {"ttr": 513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x11\\x00\\x99\\x11o\\x00\\x99\\x17?\\x10@\\x00}\\x00s\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "1999-04-26T00:00:00", "modifydate": "1999-06-22T10:40:11", "lines": 125, "newlines": 115, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLREN                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the Rename Member Command for the  |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*commands dflt to ispf   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno, ,     /*get args from caller    */\n    mbrl,mbrr,volidl,volidr,nbr_of_mbrs     /*                        */\n\"TBTOP\" tblname                             /*go to top of table      */\nINTERPRET 'pnldsn = dsn'lr_sw               /*set dsname for panel    */\nINTERPRET 'volid = volid'lr_sw              /*set volser              */\nINTERPRET 'mbrm = mbr'lr_sw                 /*set mbr name for panel  */\nINTERPRET                           ,       /*find member             */\n  '\"TBSCAN\"' tblname                ,       /*                        */\n           '\"ARGLIST(mbr'lr_sw')'   ,       /*                        */\n           'CONDLIST(EQ)'           ,       /*                        */\n           'PREVIOUS'               ,       /*                        */\n           'POSITION(crpn)'         ,       /*                        */\n           'ROWID(currow)\"'                 /*                        */\ntbscan_rc = rc                              /*set return code         */\nIF tbscan_rc = 8 THEN                       /*if mbr not found        */\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM007)'                   /*     set short message  */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\nIF tbscan_rc > 8 THEN                       /*if other error          */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF volid /= '' THEN                         /*if volid entered        */\n   volid = 'VOLUME('volid')'                /*   use it               */\n\"LMINIT DATAID(\"ddvar\")\"            ,       /*get dataid for dataset  */\n       \"DATASET(\"pnldsn\")\"          ,       /*                        */\n       volid                        ,       /*                        */\n       \"ENQ(SHRW)\"                          /*                        */\nlminit_rc = rc                              /*set return code         */\nIF lminit_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"LMOPEN DATAID(\"ddvar\")\"            ,       /*open dataset            */\n       \"OPTION(OUTPUT)\"                     /*                        */\nlmopen_rc = rc                              /*set return code         */\nIF lmopen_rc \\= 0 THEN                      /*if bad return code      */\n   DO                                       /*   do                   */\n     CALL System_Error                      /*     put msgs in stack  */\n     RETURN 4                               /*     return             */\n   END                                      /*   end                  */\n\"TBTOP\" tblname                             /*go to top of table      */\nlmmren_rc = 0                               /*init return code        */\n\"TBSKIP\" tblname \"ROW(\"currow\")\"            /*skip to next row        */\n\"TBGET\" tblname                             /*retrieve row            */\nINTERPRET 'mbro = mbr'lr_sw                 /*set member name         */\nmbr_err = 1                                 /*set switch              */\nDO WHILE mbr_err = 1                        /*do while error          */\n   \"ADDPOP ROW(0) COLUMN(0)\"                /*   show popup window    */\n   \"DISPLAY PANEL(P2PLREN) CURSOR(MBRN)\"    /*   display panel        */\n   panel_rc = rc                            /*   set panel rc         */\n   \"REMPOP\"                                 /*   remove pop-up window */\n   mbr_err = 0                              /*   reset switch         */\n   lmmren_rc = 0                            /*   reset return code    */\n   IF panel_rc = 8 THEN                     /*   if pf3 or pf4 pressed*/\n      DO                                    /*      do                */\n        CALL Close_File                     /*        close file      */\n        RETURN 0                            /*        return to caller*/\n      END                                   /*      end               */\n   IF panel_rc /= 0 THEN                    /*   if bad panel rc      */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        RETURN 4                            /*        return to caller*/\n      END                                   /*      end               */\n   IF mbrn = mbro THEN                      /*   if mbr names are same*/\n      DO                                    /*      do                */\n        \"SETMSG MSG(PTPM006)\"               /*        display message */\n        mbr_err = 1                         /*        set error sw    */\n        ITERATE                             /*        do again        */\n      END                                   /*      end               */\n   \"LMMREN DATAID(\"ddvar\")\"            ,    /*   rename member        */\n         \"MEMBER(\"mbro\")\"              ,    /*                        */\n         \"NEWNAME(\"mbrn\")\"                  /*                        */\n   lmmren_rc = rc                           /*   set return code      */\n   IF lmmren_rc \\= 0 THEN                   /*   if bad return code   */\n      DO                                    /*      do                */\n        \"SETMSG MSG(ISRZ002)\"               /*        display message */\n        mbr_err = 1                         /*        set error sw    */\n        ITERATE                             /*        do again        */\n      END                                   /*      end               */\n   \"TBDELETE\" tblname                       /*   delete table row     */\n   INTERPRET 'res'lr_sw '= R'               /*   set results fld      */\n   INTERPRET 'mbr'lr_sw '= mbrn'            /*   set member name      */\n   \"TBADD\" tblname \"MULT(\"nbr_of_mbrs\")\"    /*   re-add row to table  */\n   tbadd_rc = rc                            /*   set return code      */\n   IF tbadd_rc > 8 THEN                     /*   if bad return code   */\n      DO                                    /*      do                */\n        CALL System_Error                   /*        put msgs in stak*/\n        RETURN 4                            /*        return to caller*/\n      END                                   /*      end               */\nEND                                         /*end                     */\nCALL Close_File                             /*close file              */\nEXIT 0\n\nSystem_Error:\n   QUEUE zerrsm                             /*put short msg in stack  */\n   QUEUE zerrlm                             /*put long msg in stack   */\n   CALL Close_File                          /*close filee             */\nRETURN\n\nClose_File:\n   \"LMCLOSE DATAID(\"ddvar\")\"                /*close dataset           */\n   \"LMFREE DATAID(\"ddvar\")\"                 /*free dataset            */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PLSUP": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01*\\x00B\\x00\\x99\\x12\\x0f\\x00\\x99 O\\x11S\\x00\\xaa\\x00\\xc3\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.42", "flags": 0, "createdate": "1999-04-30T00:00:00", "modifydate": "1999-07-23T11:53:42", "lines": 170, "newlines": 195, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PLSUP                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This exec processes the SuperCe Command for the        |\n|              PDS2PDS utility                                        |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*cmds dflt to ISPF       */\ndummy = OUTTRAP(\"allocmsg.\",,\"noconcat\")    /*trap error msg output   */\nARG lr_sw,tblname,dsnl,dsnr,p2pverno,    ,  /*get args from caller    */\n    mbrl,mbrr,volidl,volidr                 /*                        */\nIF mbrl = '' | mbrr = '' THEN               /*if either mbr name blank*/\n   DO                                       /*   do                   */\n     QUEUE 'MSG(PTPM009)'                   /*     set message id     */\n     RETURN 8                               /*     return to caller   */\n   END                                      /*   end                  */\n\"VGET (SCENWFL SCEODFL SCECMLN SCESSFL)\" ,  /*get SuperCe variables   */\n      \"PROFILE\"                             /*                        */\n\"VGET (p2plstmt p2punts) PROFILE\"           /*get p2pcustm options    */\nscenwfl_hold = SCENWFL                      /*put scenwfl in hold     */\nsceodfl_hold = SCEODFL                      /*put sceodfl in hold     */\nscecmln_hold = SCECMLN                      /*put scecmln in hold     */\nscessfl_hold = SCESSFL                      /*put scessfl in hold     */\nlsdivl = ''                                 /*initialize field        */\nlsdivr = ''                                 /*initialize field        */\nIF volidl /= '' THEN                        /*if volid left entered   */\n   lsdivl = 'VOLUME('volidl')'              /*   use it               */\nlistdsi_rc = LISTDSI(dsnl lsdivl)           /*get left dataset info   */\ndsnl_recfm = SYSRECFM                       /*get left dataset recfm  */\nIF volidr /= '' THEN                        /*if volid left entered   */\n   lsdivr = 'VOLUME('volidr')'              /*   use it               */\nlistdsi_rc = LISTDSI(dsnr lsdivr)           /*get right dataset info  */\ndsnr_recfm = SYSRECFM                       /*get right dataset recfm */\nIF lr_sw = 'L' THEN                         /*if copy left to right   */\n   DO;new = 'L';old = 'R';END               /*  src = left;tgt = right*/\nELSE                                        /*else                    */\n   DO;new = 'R';old = 'L';END               /*  src = right;tgt = left*/\nbld_mbrlist_rc = Build_Mbrlist()            /*bld select stmts        */\nIF bld_mbrlist_rc = 4 THEN                  /*if sel stmts not built  */\n   DO                                       /*   do                   */\n     QUEUE zedsmsg                          /*     put msg in stack   */\n     QUEUE zedlmsg                          /*     put msg in stack   */\n     RETURN 4                               /*     return to caller   */\n   END                                      /*   end                  */\nIF bld_mbrlist_rc = 8 THEN                  /*if sel stmts not built  */\n   RETURN 8                                 /*     return to caller   */\nIF volidl /= '' THEN                        /*                        */\n   dsnl = ''                                /*                        */\nIf volidr /= '' THEN                        /*                        */\n   dsnr = ''                                /*                        */\nIF lr_sw = 'L' THEN                         /*                        */\n   DO                                       /*                        */\n      SCENWFL = dsnl                        /*                        */\n      SCEODFL = dsnr                        /*                        */\n   END                                      /*                        */\nELSE                                        /*                        */\n   DO                                       /*                        */\n      SCENWFL = dsnr                        /*                        */\n      SCEODFL = dsnl                        /*                        */\n   END                                      /*                        */\nSCESSFL = p2plstmt                          /*set statements dsn      */\nSCECMLN = '*'                               /*set member name         */\n\"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)\" ,  /*store variables in      */\n      \"PROFILE\"                             /*   profile pool         */\n\"CONTROL DISPLAY SAVE\"                      /*save current display    */\n\"SELECT PGM(ISRSEPRM)\"                      /*invoke SuperCe          */\n\"CONTROL DISPLAY RESTORE\"                   /*restore display         */\nSCESSFL = scessfl_hold                      /*restore scessfl         */\nSCENWFL = scenwfl_hold                      /*restore scenwfl         */\nSCEODFL = sceodfl_hold                      /*restore sceodfl         */\nSCECMLN = scecmln_hold                      /*restore scecmln         */\n\"VPUT (SCESSFL SCENWFL SCEODFL SCECMLN)\" ,  /*restore original vars to*/\n      \"PROFILE\"                             /*   profile pool         */\nRETURN 0                                    /*return to caller        */\n\nBuild_Mbrlist:\n   dsnstat = SYSDSN(p2plstmt)               /*get dataset status      */\n   SELECT                                   /*select                  */\n     WHEN dsnstat = 'DATASET NOT FOUND' THEN/*  when not found        */\n          CALL Allocate_Dataset             /*    allocate it         */\n     WHEN dsnstat = 'OK' THEN               /*  when dataset is ok    */\n           DO                               /*    do                  */\n             ADDRESS TSO \"DELETE\" p2plstmt  /*      delete it         */\n             CALL Allocate_Dataset          /*      reallocate it     */\n           END                              /*    end                 */\n   OTHERWISE                                /*otherwise               */\n     NOP                                    /*  do nothing            */\n   END                                      /*end select              */\n   IF dataset_not_allocated THEN            /*if ds not allocated     */\n      RETURN 4                              /*   return to caller     */\n   IF Read_Old_SuperC_Stmts() > 0 THEN      /*if bad rc from read     */\n      DO                                    /*   do                   */\n        DROP scmbrlst.                      /*     drop stmts variable*/\n        scmbrlst.0 = 0                      /*     reset nbr stmts    */\n        stmt_nbr = scmbrlst.0               /*     reset stmt number  */\n      END                                   /*   end                  */\n   ELSE                                     /*else                    */\n      stmt_nbr = scmbrlst.0                 /*   set stmt number      */\n   stmt_nbr = stmt_nbr + 1                  /*incr stmt number        */\n   scmbrlst.stmt_nbr = 'SELECT' mbrl        /*add 'select' to stmt    */\n   scmbrlst.0 = stmt_nbr                    /*set nbr of sel stmts    */\n   DO i = 1 to scmbrlst.0                   /*do once per sel stmt    */\n      QUEUE scmbrlst.i                      /*   queue stmt to stack  */\n   END                                      /*end                     */\n   ADDRESS TSO \"EXECIO\" scmbrlst.0       ,  /*write stmts dataset     */\n               \"DISKW SCMBRLST (FINIS\"      /*                        */\n   ADDRESS TSO \"FREE DDNAME(SCMBRLST)\"      /*free stmts dataset      */\nRETURN 0\n\nAllocate_Dataset:\n   dataset_not_allocated = 0                /*reset bad alloc sw      */\n   ADDRESS TSO  \"ALLOCATE\"      ,           /*allocate stmts dataset  */\n         \"DDNAME(SCMBRLST)\"     ,           /*                        */\n         \"DSNAME(\"p2plstmt\")\"   ,           /*set in p2pcustm         */\n         \"NEW REU\"              ,           /*                        */\n         \"UNIT(\"p2punts\")\"      ,           /*set in p2pcustm         */\n         \"TRACKS\"               ,           /*                        */\n         \"SPACE(15,15)\"         ,           /*                        */\n         \"LRECL(80)\"            ,           /*                        */\n         \"BLKSIZE(23440)\"       ,           /*                        */\n         \"RECFM(F B)\"           ,           /*                        */\n         \"DSORG(PS)\"                        /*                        */\n   alloc_rc = rc                            /*set alloc ret code      */\n   IF alloc_rc > 0 THEN                     /*if bad return code      */\n      CALL Bad_Allocate                     /*   display messages     */\nRETURN\n\nBad_Allocate:\n   dataset_not_allocated = 1                /*set bad alloc sw        */\n   term_width = SYSVAR(SYSWTERM)            /*get terminal width      */\n   zedsmsg = 'Error - Press PF1       '     /*set short message       */\n   zedlmsg = 'Error: REXX Exec P2PGSUP'  ,  /*                        */\n     ' - Procedure Allocate_Dataset'        /*set long message        */\n   zedlmsg = LEFT(zedlmsg,term_width)       /*set to term width       */\n   msg2 = 'Error Allocating Dataset:'    ,  /*msg 2                   */\n     p2plstmt                               /*                        */\n   msg2 = LEFT(msg2,term_width)             /*set to term width       */\n   zedlmsg = zedlmsg msg2                   /*add to long messge      */\n   msg3 = LEFT('MESSAGE:',term_width)       /*msg 3                   */\n   zedlmsg = zedlmsg msg3                   /*add to long message     */\n   DO x = 1 to allocmsg.trapped             /*do once per err msg     */\n      allocmsg.x = LEFT(allocmsg.x, ,       /*   set to term width    */\n                  term_width)               /*                        */\n      zedlmsg = zedlmsg allocmsg.x          /*   add to long message  */\n   END                                      /*end                     */\nRETURN\n\nRead_Old_SuperC_Stmts:\n   dsnstat = SYSDSN(SCESSFL)                /*get old stmt ds status  */\n   IF dsnstat \\= 'OK' THEN                  /*if not ok               */\n      RETURN 12                             /*   return to caller     */\n   ADDRESS TSO \"ALLOCATE DDNAME(OLDSTMTS)\", /*allocate old stmt ds    */\n               \"DA(\"SCESSFL\") SHR\"          /*                        */\n   IF rc > 0 THEN                           /*if bad rc from allocate */\n      RETURN 12                             /*   return to caller     */\n   ADDRESS TSO \"EXECIO * DISKR OLDSTMTS\"  , /*read old stmts dataset  */\n               \"(STEM scmbrlst. FINIS\"      /*                        */\n   execio_rc = rc                           /*set return code         */\n   ADDRESS TSO \"FREE DDNAME(OLDSTMTS)\"      /*free old stmts dataset  */\nRETURN execio_rc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PMBRL": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x07\\x00\\x99\\x14\\x1f\\x00\\x99)O\\tP\\x04V\\x057\\x00\\x00\\xe2\\xe8\\xe2\\xc4\\xc8\\xc3@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1999-05-21T00:00:00", "modifydate": "1999-10-21T09:50:07", "lines": 1110, "newlines": 1335, "modlines": 0, "user": "SYSDHC"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PMBRL                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: This program is used in the PDS2PDS application. It    |\n|              displays and processes the member list panel.          |\n|                                                                     |\n|   Called By: PDS2PDS                                                |\n|                                                                     |\n|       Calls: READDIR   P2PBTBL  (COBOL PROGRAMS)                    |\n|              P2PGCPY   P2PLCPY                                      |\n|              P2PGMOV   P2PLMOV                                      |\n|              P2PGDEL   P2PLDEL                                      |\n|              P2PGREN   P2PLREN                                      |\n|              P2PGEDT   P2PLEDT                                      |\n|              P2PGBRW   P2PLBRW                                      |\n|              P2PGINF                                                |\n|              P2PGCMP                                                |\n|              P2PGALL   P2PLALL                                      |\n|              P2PGSUP   P2PLSUP                                      |\n|              P2PGTTL                                                |\n|              P2PSTLF                                                |\n|              P2PSTRT                                                |\n|                                                                     |\n\\*===================================================================*/\nADDRESS ISPEXEC                             /*cmds default to ISPF    */\nCALL Initialize_Variables                   /*init program variables  */\nCall Get_Stored_Variables                   /*get scrn vars from pool */\nmaskdatal = LEFT(mbrleft,8) || maskoptl     /*mbr pattern and inc/exc */\nmaskdatar = LEFT(mbrrite,8) || maskoptr     /*mbr pattern and inc/exc */\nold_displopt = LEFT(namesame,1)  || ,       /*bld display options     */\n               LEFT(statsame,1)  || ,       /*  comparison field      */\n               LEFT(statdiff,1)  || ,       /*                        */\n               LEFT(namediff,1)  || ,       /*                        */\n               LEFT(uniqleft,1)  || ,       /*                        */\n               LEFT(uniqrite,1)  || ,       /*                        */\n               LEFT(oldrleft,1)  || ,       /*                        */\n               LEFT(oldrrite,1)             /*                        */\nIF Read_Pds(dsnl,'L',maskdatal) > 0 THEN    /*if trouble reading dsn  */\n   DO                                       /*   do                   */\n     Call End_Of_Job                        /*     call eoj stuff     */\n     RETURN pfkpresd                        /*     return to caller   */\n   END                                      /*   end                  */\nIF Read_Pds(dsnr,'R',maskdatar) > 0 THEN    /*if trouble reading dsn  */\n   DO                                       /*   do                   */\n     Call End_Of_Job                        /*     call eoj stuff     */\n     RETURN pfkpresd                        /*     return to caller   */\n   END                                      /*   end                  */\nIF Create_Pds_Mbr_Table() > 0 THEN          /*if bad table create     */\n   DO                                       /*   do                   */\n     Call End_of_Job                        /*     do eoj stuff       */\n     RETURN pfkpresd                        /*     return to caller   */\n   END                                      /*   end                  */\nIF displine = '' | dtl1 = '' THEN           /*fld is blank on first   */\n   CALL Set_Initial_Display                 /*  time, so initialize   */\nCALL Disp_Mbrl_Panel                        /*dspl mbr list panel     */\nDO UNTIL pfkpresd = 'PF03' | ,              /*do until pf3 or pf4     */\n         pfkpresd = 'PF15' | ,              /*   or pf15              */\n         pfkpresd = 'PF16' | ,              /*   or pf16              */\n         pfkpresd = 'PF04'                  /*   pressed              */\n   IF list_panel_rc = 8 THEN                /*   if pf3/pf4 pressed   */\n        ITERATE                             /*      loop again        */\n   IF list_panel_rc \\= 0 THEN               /*   if bad rc from panel */\n      LEAVE                                 /*      leave loop        */\n   SELECT                                   /*   select               */\n     WHEN Check_DisplOpt() = 1 THEN         /*     if displopts chngd */\n          CALL Refresh_Display              /*        refresh display */\n     WHEN displopt_rc = 12 THEN             /*     if err in displopts*/\n          NOP                               /*        exit select stmt*/\n     WHEN zcmd \\= '' THEN                   /*     if prmy command    */\n          CALL Process_Primary_Commands     /*        process it      */\n     WHEN gcmdl \\= ' ' THEN                 /*     if global cmd left */\n          CALL Process_Global_Commands   ,  /*        process it      */\n               gcmdl, 'L'                   /*                        */\n     WHEN gcmdr \\= ' ' THEN                 /*     if global cmd right*/\n          CALL Process_Global_Commands   ,  /*        process it      */\n               gcmdr, 'R'                   /*                        */\n     WHEN ztdsels > 0 THEN                  /*     if line command    */\n          CALL Process_Line_Commands        /*        process it      */\n   OTHERWISE                                /*   otherwise            */\n      CALL Fix_Position                     /*     retain panel pos   */\n   END                                      /*   end select           */\n   IF error_msg THEN                        /*   if any error         */\n      DO                                    /*      do                */\n        pnlname = ''                        /*        blank panel name*/\n        autosel = 'AUTOSEL(YES)'            /*        set autosel on  */\n        CALL Disp_Mbrl_Panel                /*        display panel   */\n        error_msg = 0                       /*        reset err sw    */\n      END                                   /*      end               */\n   ELSE                                     /*   else                 */\n      CALL Disp_Mbrl_Panel                  /*      disp normal panel */\nEND                                         /*end                     */\nCALL End_Of_Job                             /*do end of job stuff     */\nRETURN pfkpresd                             /*return to calling pgm   */\n\nEnd_Of_Job:\n   INTERPRET 'TBCLOSE' tblname              /*close mbr list table    */\n   Call Put_Stored_Variables                /*put screen vars in pool */\nRETURN\n\nGet_Stored_Variables:\n   \"VGET (dsnl\"     ,                       /*dataset name - left     */\n         \"dsnr\"     ,                       /*dataset name - left     */\n         \"mbrleft\"  ,                       /*member name - left      */\n         \"mbrrite\"  ,                       /*member name - right     */\n         \"maskoptl\" ,                       /*member name pattern     */\n         \"maskoptr\" ,                       /*member name pattern     */\n         \"cnfrml\"   ,                       /*dataset prot - left     */\n         \"cnfrmr\"   ,                       /*dataset prot - right    */\n         \"namesame\" ,                       /*same name sel proc opt  */\n         \"statsame\" ,                       /*name/stats sel proc opt */\n         \"statdiff\" ,                       /*diff stats sel proc opt */\n         \"namediff\" ,                       /*diff name sel proc opt  */\n         \"uniqleft\" ,                       /*only left side proc opt */\n         \"uniqrite\" ,                       /*only right side proc opt*/\n         \"oldrleft\" ,                       /*show l mbrs older than r*/\n         \"oldrrite\" ,                       /*show r mbrs older than l*/\n         \"volidl\"   ,                       /*volser name - left      */\n         \"volidr\"   ,                       /*volser name - right     */\n         \"dtl1\"     ,                       /*detail line 1           */\n         \"dtl2\"     ,                       /*detail line 2           */\n         \"dtl3\"     ,                       /*detail line 3           */\n         \"dtl4\"     ,                       /*detail line 4           */\n         \"dtl5\"     ,                       /*detail line 5           */\n         \"dtl6\"     ,                       /*detail line 6           */\n         \"dtl7\"     ,                       /*detail line 7           */\n         \"hdl\"      ,                       /*left side header line   */\n         \"hdr\"      ,                       /*right side header line  */\n         \"displine\" ,                       /*stats line to show      */\n         \"p2pverno)\",                       /*stats line to show      */\n         \"PROFILE\"                          /*user's profile pool     */\nRETURN\n\nPut_Stored_Variables:\n   \"VPUT (dsnl\"     ,                       /*dataset name - left     */\n         \"dsnr\"     ,                       /*dataset name - left     */\n         \"mbrleft\"  ,                       /*member name - left      */\n         \"mbrrite\"  ,                       /*member name - right     */\n         \"maskoptl\" ,                       /*member name pattern     */\n         \"maskoptr\" ,                       /*member name pattern     */\n         \"cnfrml\"   ,                       /*dataset prot - left     */\n         \"cnfrmr\"   ,                       /*dataset prot - right    */\n         \"namesame\" ,                       /*same name sel proc opt  */\n         \"statsame\" ,                       /*name/stats sel proc opt */\n         \"statdiff\" ,                       /*diff stats sel proc opt */\n         \"namediff\" ,                       /*diff name sel proc opt  */\n         \"uniqleft\" ,                       /*only left side proc opt */\n         \"uniqrite\" ,                       /*only right side proc opt*/\n         \"oldrleft\" ,                       /*show l mbrs older than r*/\n         \"oldrrite\" ,                       /*show r mbrs older than l*/\n         \"volidl\"   ,                       /*volser name - left      */\n         \"volidr\"   ,                       /*volser name - right     */\n         \"dtl1\"     ,                       /*detail line 1           */\n         \"dtl2\"     ,                       /*detail line 2           */\n         \"dtl3\"     ,                       /*detail line 3           */\n         \"dtl4\"     ,                       /*detail line 4           */\n         \"dtl5\"     ,                       /*detail line 5           */\n         \"dtl6\"     ,                       /*detail line 6           */\n         \"dtl7\"     ,                       /*detail line 7           */\n         \"hdl\"      ,                       /*left side header line   */\n         \"hdr\"      ,                       /*right side header line  */\n         \"displine)\",                       /*stats line to show      */\n         \"PROFILE\"                          /*user's profile pool     */\nRETURN\n\nSet_Initial_Display:\n   displine = 'dtl1'\n   dtl1 = '$Z @Z*mbrl    *stat1l                   $Z @Z*mbrr    *stat1r'\n   dtl2 = 'omit'\n   dtl3 = 'omit'\n   dtl4 = 'omit'\n   dtl5 = 'omit'\n   dtl6 = 'omit'\n   dtl7 = 'omit'\n   hdl = 'vv.mm Created  Changed'\n   hdr = 'vv.mm Created  Changed'\nRETURN\n\nCheck_DisplOpt:\n   displopt_rc = 0                          /*reset return code       */\n   new_displopt = LEFT(namesame,1)  || ,    /*bld new display option  */\n                  LEFT(statsame,1)  || ,    /*    comparison field    */\n                  LEFT(statdiff,1)  || ,    /*                        */\n                  LEFT(namediff,1)  || ,    /*                        */\n                  LEFT(uniqleft,1)  || ,    /*                        */\n                  LEFT(uniqrite,1)  || ,    /*                        */\n                  LEFT(oldrleft,1)  || ,    /*                        */\n                  LEFT(oldrrite,1)          /*                        */\n   displopt_chars = STRIP(new_displopt)     /*                        */\n   IF LENGTH(displopt_chars) > 1 THEN       /*                        */\n      DO                                    /*do                      */\n        \"SETMSG MSG(PTPM001C)\"              /*  show message          */\n        csr_pos = csr_namesame              /*  set csr position      */\n        error_msg = 1                       /*  set err msg           */\n        cmdl = ''                           /*  blank lf line cmd     */\n        cmdr = ''                           /*  blank rt line cmd     */\n        displopt_rc = 12                    /*  set return code       */\n        RETURN displopt_rc                  /*  return to caller      */\n      END                                   /*end do                  */\n   IF POS('/',old_displopt) \\=         ,    /*if old/new opts not same*/\n      POS('/',new_displopt) THEN            /*                        */\n      DO                                    /*   do                   */\n        displopt_rc = 1                     /*     set changed switch */\n        old_displopt = new_displopt         /*     set old to new     */\n        cmdl = ''                           /*     blank lf line cmd  */\n        cmdr = ''                           /*     blank rt line cmd  */\n      END                                   /*   end                  */\nRETURN displopt_rc\n\nRead_Pds:\n   ARG dsn,lr_flag, maskdata                /*get args from calller   */\n   bldmsg1 = gather_msg                     /*set panel message       */\n   bldmsg2 = dsn                            /*set panel message       */\n   volid = ''                               /*blank volume parm       */\n   unit_parm = ''                           /*blank unit parm         */\n   INTERPRET 'volid = volid'lr_flag         /*get volume id (volser)  */\n   IF volid \\= '' THEN                      /*if volid entered        */\n      DO                                    /*   do                   */\n        bldmsg3 = 'From Volume'             /*     set panel message  */\n        bldmsg4 = volid                     /*     set panel message  */\n      END                                   /*   end                  */\n   CALL Show_Popup_Window                   /*display panel           */\n   bldmsg3 = ''                             /*blank panel message     */\n   bldmsg4 = ''                             /*blank panel message     */\n   IF volid \\= '' THEN                      /*if volid entered        */\n      DO                                    /*   do                   */\n         volid = 'VOLUME('volid')'          /*     set volume parm    */\n         unit_parm = 'UNIT('p2puntu')'      /*     set unit parm      */\n      END                                   /*                        */\n   ADDRESS TSO \"FREE DDNAME(PDSIN)\"         /*just in case            */\n   ADDRESS TSO \"FREE DDNAME(PDSOUT)\"        /*just in case            */\n   ADDRESS TSO \"ALLOCATE DD(PDSIN)\"      ,  /*allocate input pds      */\n                        \"DA(\"dsn\")\"      ,\n                        \"RECFM(U)\"       ,\n                        \"LRECL(256)\"     ,\n                        unit_parm        ,\n                        volid            ,\n                        \"BLKSIZE(256)\"   ,\n                        \"SHR\"\n   alloc_rc = rc                            /*set return code         */\n   IF alloc_rc > 0 THEN                     /*if bad return code      */\n      DO                                    /*   do                   */\n        msg_dsn = dsn                       /*     tell which dataset */\n        CALL Bad_Allocate                   /*     display messages   */\n        RETURN alloc_rc                     /*     return to caller   */\n      END                                   /*   end                  */\n   ADDRESS TSO \"ALLOCATE DDNAME(PDSOUT)\" ,  /*allocate output seq     */\n                        \"NEW REU\"        ,\n                        \"UNIT(\"p2puntw\")\",\n                        \"TRACKS\"         ,\n                        \"SPACE(15,15)\"   ,\n                        \"LRECL(80)\"      ,\n                        \"BLKSIZE(0)\"     ,\n                        \"RECFM(F B)\"     ,\n                        \"DSORG(PS)\"\n   alloc_rc = rc                            /*set return code         */\n   IF alloc_rc > 0 THEN                     /*if bad return code      */\n      DO                                    /*   do                   */\n        msg_dsn = 'DDNAME(PDSOUT)'          /*     tell which dataset */\n        ADDRESS TSO \"FREE DDNAME(PDSIN)\"    /*     free input pds     */\n        CALL Bad_Allocate                   /*     display messages   */\n        RETURN alloc_rc                     /*     return to caller   */\n      END                                   /*   end                  */\n   CALL READDIR                             /*call cobol pgm          */\n   readdir_rc = RESULT                      /*get return code         */\n   IF readdir_rc > 0 THEN                   /*if bad return code      */\n      DO                                    /*   do                   */\n        ADDRESS TSO \"FREE DDNAME(PDSIN)\"    /*     free input pds     */\n        ADDRESS TSO \"FREE DDNAME(PDSOUT)\"   /*     free seq output    */\n        RETURN readdir_rc                   /*     return to caller   */\n      END                                   /*   end                  */\n   IF lr_flag = 'L' THEN                    /*if left-side file       */\n      DO                                    /*   do                   */\n        ADDRESS TSO \"FREE DDNAME(MBRLISTL)\" /*     free file          */\n        mbrddn = 'MBRLISTL'                 /*     set ddname         */\n      END                                   /*   end                  */\n   ELSE                                     /*else                    */\n      DO                                    /*   do                   */\n        ADDRESS TSO \"FREE DDNAME(MBRLISTR)\" /*     free right-side dd */\n        mbrddn = 'MBRLISTR'                 /*     set right-side ddn */\n      END                                   /*   end                  */\n   ADDRESS TSO \"ALLOCATE DD(\"mbrddn\")\",     /*allocate mbr list file  */\n                        \"NEW REU\"        ,\n                        \"UNIT(\"p2puntw\")\",\n                        \"TRACKS\"         ,\n                        \"SPACE(15,15)\"   ,\n                        \"LRECL(80)\"      ,\n                        \"BLKSIZE(0)\"     ,\n                        \"RECFM(F B)\"     ,\n                        \"DSORG(PS)\"\n   alloc_rc = rc                            /*set return code         */\n   IF alloc_rc > 0 THEN                     /*if bad return code      */\n      DO                                    /*   do                   */\n        msg_dsn = ,                         /*     set dsn in message */\n        'DDNAME(MBRLIST'lr_flag')'          /*                        */\n        ADDRESS TSO \"FREE DDNAME(PDSIN)\"    /*     free input pds     */\n        ADDRESS TSO \"FREE DDNAME(PDSOUT)\"   /*     free output seq    */\n        CALL Bad_Allocate                   /*     display messages   */\n        RETURN alloc_rc                     /*     return to caller   */\n      END                                   /*   end                  */\n   ADDRESS TSO \"EXECIO * DISKR PDSOUT\",     /*read member list into   */\n               \"(STEM\" pdsmem. \"FINIS\"      /*     stemmed variable   */\n   nbr_mbrs = pdsmem.0                      /*set nbr of members      */\n   ADDRESS TSO \"EXECIO\" nbr_mbrs \"DISKW\" ,  /*write member list to    */\n      mbrddn \"(STEM\" pdsmem. \"FINIS\"        /*  new file              */\n   DROP pdsmem.                             /*drop compound variable  */\n   ADDRESS TSO \"FREE DDNAME(PDSIN)\"         /*free input file         */\n   ADDRESS TSO \"FREE DDNAME(PDSOUT)\"        /*free output file        */\nRETURN readdir_rc\n\nBad_Allocate:\n   dataset_not_allocated = 1                /*set bad alloc sw        */\n   term_width = SYSVAR(SYSWTERM)            /*get term width          */\n   zedsmsg = 'Error - Press PF1       '     /*set short message       */\n   zedlmsg = 'Error: REXX Exec P2PMBRL'  ,  /*                        */\n     ' - Procedure Read_PDS'                /*set long message        */\n   zedlmsg = LEFT(zedlmsg,term_width)       /*set to term width       */\n   msg2 = 'Error Allocating Dataset:'    ,  /*msg 2                   */\n     msg_dsn                                /*                        */\n   msg2 = LEFT(msg2,term_width)             /*set to term width       */\n   zedlmsg = zedlmsg msg2                   /*add to long messge      */\n   msg3 = LEFT('MESSAGE:',term_width)       /*msg 3                   */\n   zedlmsg = zedlmsg msg3                   /*add to long message     */\n   DO x = 1 to termout.trapped              /*do once per error msg   */\n      termout.x = LEFT(termout.x,term_width)/*   set to term width    */\n      zedlmsg = zedlmsg termout.x           /*   add to long message  */\n   END                                      /*end                     */\n   \"SETMSG MSG(ISRZ001)\"                    /*display messages        */\nRETURN\n\nCreate_Pds_Mbr_Table:\n   bldmsg1 = display_msg                    /*set panel message       */\n   bldmsg2 = ' '                            /*blank panel message     */\n   bldmsg3 = ' '                            /*blank panel message     */\n   CALL Show_Popup_Window                   /*display panel           */\n   tbcreate_rc = 0                          /*init return code        */\n   pnl_msg = 'MSG()'                        /*set panel message       */\n   displopt = POS('/',old_displopt)         /*set display opt         */\n   tbcreate_rc = P2PBTBL()                  /*call cobol pgm          */\n   ADDRESS TSO \"FREE DDNAME(MBRLISTL)\"      /*free mbr list left file */\n   ADDRESS TSO \"FREE DDNAME(MBRLISTR)\"      /*free mbr list right file*/\n   displopt = 0                             /*reset display opt field */\n   IF LEFT(tbcreate_rc,1) = 'E' THEN        /*if err in cobol program */\n      DO                                    /*   do                   */\n        tbcreate_rc = ,                     /*     get return code    */\n          SUBSTR(tbcreate_rc,3,2)           /*                        */\n        RETURN tbcreate_rc                  /*     return to caller   */\n      END                                   /*   end                  */\n   IF LEFT(tbcreate_rc,1) = '1' THEN        /*if good data returned   */\n      DO                                    /*   do                   */\n        PARSE VAR tbcreate_rc          ,    /*     break rc into parts*/\n          rtn_type tblname memlo memro ,    /*                        */\n          nbr_of_mbrs                       /*                          */\n        tbcreate_rc = 0                     /*                        */\n      END                                   /*                        */\nRETURN tbcreate_rc\n\nShow_Popup_Window:\n   \"CONTROL DISPLAY LOCK\"                   /*lock display            */\n   \"ADDPOP ROW(11) COLUMN(8)\"               /*popup window position   */\n   \"DISPLAY PANEL(P2PPMSG)\"                 /*dspl panel in window    */\n   \"REMPOP\"                                 /*remove window           */\nRETURN\n\nProcess_Primary_Commands:\n   IF zcmd = '' THEN                        /*if no command entered   */\n      RETURN                                /*   just return          */\n   PARSE VAR zcmd ,                         /*parse primary cmd into  */\n      prmy_cmd ,                            /*  primary cmd           */\n      prmy_cmd_parm                         /*  and cmd parm          */\n   cmdl = ''                                /*blank left line cmd     */\n   cmdr = ''                                /*blank right line cmd    */\n   csr_row = 0                              /*reset cursor row        */\n   SELECT                                   /*select                  */\n     WHEN prmy_cmd = 'LOCATE'  | ,          /*  when 'locate' cmd     */\n       prmy_cmd = 'LOC'        | ,          /*                        */\n       prmy_cmd = 'L' THEN                  /*                        */\n       CALL Locate_Member                   /*    call locate member  */\n     WHEN prmy_cmd = 'FLIP'    | ,          /*  when 'flip' cmd       */\n       prmy_cmd = 'FL' THEN                 /*                        */\n       CALL Flip_Display                    /*    call flip dsply     */\n     WHEN prmy_cmd = 'REFRESH' | ,          /*  when 'refresh' cmd    */\n       prmy_cmd = 'REF'        | ,          /*                        */\n       prmy_cmd = 'R' THEN                  /*                        */\n       CALL Refresh_Display                 /*    call refresh dsply  */\n     WHEN prmy_cmd = 'LF' THEN              /*   when 'lf' cmd        */\n       CALL Move_Stats_Left                 /*     call mov stats left*/\n     WHEN prmy_cmd = 'RI' THEN              /*   when 'ri' cmd        */\n       CALL Move_Stats_Right                /*     call mov stats rite*/\n   OTHERWISE                                /*otherwise               */\n       CALL Fix_Position                    /*                        */\n   END                                      /*end                     */\nRETURN\n\nLocate_Member:\n   IF prmy_cmd_parm = '' THEN               /*if no mbr name to find  */\n      RETURN                                /*   just return          */\n   \"TBTOP\" tblname                          /*go to top of table      */\n   mbrl = LEFT(prmy_cmd_parm,8)             /*set tbscan parm         */\n   mbrr = LEFT(prmy_cmd_parm,8)             /*set tbscan parm         */\n   \"TBSCAN\" tblname                    ,    /*scan table for name     */\n           \"ARGLIST(mbrl,mbrr)\"        ,    /*                        */\n           \"CONDLIST(LE,LE)\"           ,    /*                        */\n           \"PREVIOUS\"                  ,    /*                        */\n           \"POSITION(crpn)\"            ,    /*                        */\n           \"ROWID(currow)\"                  /*                        */\n   tbscan_rc = rc                           /*get scan return code    */\n   IF tbscan_rc = 0 THEN                    /*if good return code     */\n      \"TBSKIP\" tblname \"ROW(\"currow\")\"      /*     skip to mbr name   */\nRETURN\n\nFlip_Display:\n   dsnl_hold = dsnl                         /*place dsnl in hold      */\n   dsnl = dsnr                              /*swap left dataset name  */\n   dsnr = dsnl_hold                         /*swap right dataset name */\n   dsnld_hold = dsnld                       /*place panel dsn in hold */\n   dsnld = dsnrd                            /*swap left panel dsn     */\n   dsnrd = dsnld_hold                       /*swap right panel dsn    */\n   volid_hold = volidl                      /*swap left volser name   */\n   volidl = volidr                          /*place r volser in hold  */\n   volidr = volid_hold                      /*swap right volser name  */\n   cnfrml_hold = cnfrml                     /*place cnfrml in hold    */\n   cnfrml = cnfrmr                          /*swap cnfrml             */\n   cnfrmr = cnfrml_hold                     /*swap cnfrmr             */\n   mbrleft_hold = mbrleft                   /*place mbrleft in hold   */\n   mbrleft = mbrrite                        /*swap mbrleft            */\n   mbrrite = mbrleft_hold                   /*swap mbrrite            */\n   maskoptl_hold = maskoptl                 /*place maskoptl in hold  */\n   maskoptl = maskoptr                      /*swap maskoptl           */\n   maskoptr = maskoptl_hold                 /*swap maskoptr           */\n   maskdatal_hold = maskdatal               /*place mask data in hold */\n   maskdatal = maskdatar                    /*swap left mask data     */\n   maskdatar = maskdatal_hold               /*swap right mask data    */\n   CALL Refresh_Display                     /*refresh the display     */\nRETURN\n\nRefresh_Display:\n   INTERPRET 'TBCLOSE' tblname              /*close mbr list table    */\n   CALL Read_Pds dsnl,'L',maskdatal         /*if trouble reading dsn  */\n   CALL Read_Pds dsnr,'R',maskdatar         /*if trouble reading dsn  */\n   CALL Create_Pds_Mbr_Table                /*create mbr list table   */\n   CALL Fix_Position                        /*fix display position    */\nRETURN\n\nMove_Stats_Left:\n   CALL P2PSTLF displine                    /*move stats to the left  */\n   CALL Get_Shifted_Lines                   /*get new order of lines  */\n   CALL Fix_Position                        /*fix display position    */\nRETURN\n\nMove_Stats_Right:\n   CALL P2PSTRT displine                    /*move stats to the right */\n   CALL Get_Shifted_Lines                   /*get new order of lines  */\n   CALL Fix_Position                        /*fix display position    */\nRETURN\n\nGet_Shifted_Lines:\n   PARSE PULL dtl7                          /*get new detail line 7   */\n   PARSE PULL dtl6                          /*get new detail line 6   */\n   PARSE PULL dtl5                          /*get new detail line 5   */\n   PARSE PULL dtl4                          /*get new detail line 4   */\n   PARSE PULL dtl3                          /*get new detail line 3   */\n   PARSE PULL dtl2                          /*get new detail line 2   */\n   PARSE PULL dtl1                          /*get new detail line 1   */\n   PARSE PULL displine                      /*get new displayed line #*/\n   PARSE PULL hdl                           /*get new left heading    */\n   PARSE PULL hdr                           /*get new right heading   */\nRETURN\n\nProcess_Global_Commands:\n   ARG gcmd,lr_sw                           /*get cmd and left/rite sw*/\n   gc_rtn_code = 0                          /*reset global cmd rtn cde*/\n   hold_ztdtop = ztdtop                     /*place ztdtop in hold    */\n   csr_row = 0                              /*reset cursor row        */\n   cmdl = ''                                /*blank left line cmd     */\n   cmdr = ''                                /*blank right line cmd    */\n   SELECT                                   /*select                  */\n     WHEN gcmd = 'C' THEN                   /*  when command 'C'      */\n       CALL Execute_Copy_G_Command          /*                        */\n     WHEN gcmd = 'M' THEN                   /*  when command 'M'      */\n       CALL Execute_Move_G_Command          /*                        */\n     WHEN gcmd = 'D' THEN                   /*  when command 'D'      */\n       CALL Execute_Delete_G_Command        /*                        */\n     WHEN gcmd = 'R' THEN                   /*  when command 'R'      */\n       CALL Execute_Rename_G_Command        /*                        */\n     WHEN gcmd = 'E' THEN                   /*  when command 'R'      */\n       CALL Execute_Edit_G_Command          /*                        */\n     WHEN gcmd = 'B' | gcmd = 'V' THEN      /*  when command 'B'      */\n       CALL Execute_Browse_G_Command        /*                        */\n     WHEN gcmd = 'Z' THEN                   /*  when command 'Z'      */\n       CALL Execute_Compress_G_Command      /*                        */\n     WHEN gcmd = 'I' THEN                   /*  when command 'I'      */\n       CALL Execute_Info_G_Command          /*                        */\n     WHEN gcmd = 'AL' THEN                  /*  when command 'AL'     */\n       CALL Execute_All_G_Command           /*                        */\n     WHEN gcmd = 'SC' THEN                  /*  WHEN command 'SC'     */\n       CALL Execute_SC_G_Command            /*                        */\n     WHEN gcmd = 'TL' THEN                  /*  WHEN command 'TL'     */\n       CALL Execute_Total_G_Command         /*                        */\n   OTHERWISE                                /*otherwise               */\n     DO                                     /*  do                    */\n       INTERPRET                         ,  /*    set csr position    */\n         \"csr_pos = 'CURSOR(GCMD\"lr_sw\")'\"  /*                        */\n       pnl_msg = 'MSG(PTPM004)'             /*    set error message   */\n       CALL Fix_Position                    /*    fix display pos     */\n       RETURN                               /*    return to caller    */\n     END                                    /*  end                   */\n   END                                      /*end                     */\n   INTERPRET \"gcmd\"lr_sw\" = ''\"             /*blank global cmd field  */\n   INTERPRET                         ,      /*set cursor position     */\n     \"csr_pos = 'CURSOR(GCMD\"lr_sw\")'\"      /*                        */\n   CALL Fix_Position                        /*fix display position    */\nRETURN\n\nExecute_Copy_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGCPY'       || ,       /*call P2PGCPY            */\n                '(lr_sw,'        || ,       /*  left/right switch     */\n                 'tblname,'      || ,       /*  mbr list table name   */\n                 'dsnl,'         || ,       /*  left dsname           */\n                 'dsnr,'         || ,       /*  right dsname          */\n                 'volidl,'       || ,       /*  left dsn volser       */\n                 'volidr,'       || ,       /*  right dsn volser      */\n                 'p2pverno,'     || ,       /*  pds2pds version       */\n                 'memlo,'        || ,       /*  nbr mbrs left side    */\n                 'memro,'        || ,       /*  nbr mbrs right side   */\n                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   PARSE PULL memlo                         /*get memlo from stack    */\n   PARSE PULL memro                         /*get memro from stack    */\nRETURN\n\nExecute_Move_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGMOV'       || ,       /*call P2PGMOV            */\n                '(lr_sw,'        || ,       /*  left/right switch     */\n                 'tblname,'      || ,       /*  mbr list table name   */\n                 'dsnl,'         || ,       /*  left dsname           */\n                 'dsnr,'         || ,       /*  right dsname          */\n                 'volidl,'       || ,       /*  left dsn volser       */\n                 'volidr,'       || ,       /*  right dsn volser      */\n                 'p2pverno,'     || ,       /*  pds2pds version       */\n                 'memlo,'        || ,       /*  nbr mbrs left side    */\n                 'memro,'        || ,       /*  nbr mbrs right side   */\n                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   PARSE PULL memlo                         /*get memlo from stack    */\n   PARSE PULL memro                         /*get memro from stack    */\nRETURN\n\nExecute_Delete_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGDEL'       || ,       /*call P2PGDEL            */\n                '(lr_sw,'        || ,       /*  left/right switch     */\n                 'tblname,'      || ,       /*  mbr list table name   */\n                 'dsnl,'         || ,       /*  left dsname           */\n                 'dsnr,'         || ,       /*  right dsname          */\n                 'volidl,'       || ,       /*  left dsn volser       */\n                 'volidr,'       || ,       /*  right dsn volser      */\n                 'p2pverno,'     || ,       /*  pds2pds version       */\n                 'memlo,'        || ,       /*  left member name      */\n                 'memro,'        || ,       /*  right member name     */\n                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   PARSE PULL memlo                         /*get memlo from stack    */\n   PARSE PULL memro                         /*get memro from stack    */\nRETURN\n\nExecute_Rename_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGREN'       || ,       /*call P2PGREN            */\n                '(lr_sw,'        || ,       /*  left/right switch     */\n                 'tblname,'      || ,       /*  mbr list table name   */\n                 'dsnl,'         || ,       /*  left dsname           */\n                 'dsnr,'         || ,       /*  right dsname          */\n                 'volidl,'       || ,       /*  left dsn volser       */\n                 'volidr,'       || ,       /*  right dsn volser      */\n                 'p2pverno,'     || ,       /*  pds2pds version       */\n                 'memlo,'        || ,       /*  left member name      */\n                 'memro,'        || ,       /*  right member name     */\n                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\nRETURN\n\nExecute_Edit_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGEDT'       || ,       /*call P2PGEDT            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'volidl,'       || ,       /*  left dsn volser       */\n                 'volidr,'       || ,       /*  right dsn volser      */\n                 'p2pverno,'     || ,       /*     pds2pds version    */\n                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\nRETURN\n\nExecute_Browse_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGBRW'       || ,       /*call P2PGBRW            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'gcmd,'         || ,       /*     left line command  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'volidl,'       || ,       /*  left dsn volser       */\n                 'volidr,'       || ,       /*  right dsn volser      */\n                 'p2pverno,'     || ,       /*     pds2pds version    */\n                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\nRETURN\n\nExecute_Compress_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGCMP'       || ,       /*call P2PGCMP            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'volidl,'       || ,       /*     left dsn volser    */\n                 'volidr)'                  /*     right dsn volser   */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\nRETURN\n\nExecute_Info_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGINF'       || ,       /*call P2PGINF            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'volidl,'       || ,       /*     left dsn volser    */\n                 'volidr)'                  /*     right dsn volser   */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\nRETURN\n\nExecute_All_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGALL'       || ,       /*call P2PGALL            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'p2pverno)'                /*     pds2pds version    */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\nRETURN\n\nExecute_SC_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGSUP'       || ,       /*call P2PGSUP            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'volidl,'       || ,       /*                        */\n                 'volidr)'                  /*                        */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF gc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\nRETURN\n\nExecute_Total_G_Command:\n   INTERPRET                        ,\n   'gc_rtn_code = P2PGTTL'       || ,       /*call P2PGTTL            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'p2pverno)'                /*     pds2pds version    */\n   IF gc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\nRETURN\n\nProcess_Line_Commands:\n   hold_ztdtop = ztdtop                     /*place ztdtop in hold    */\n   lc_rtn_code = 0                          /*init line cmd rtn code  */\n   process_flag = 1                         /*set process flag        */\n   DO WHILE process_flag                    /*do while flag set       */\n      IF cmdl \\= '' & cmdr \\= '' THEN       /*if 2 line cmds entered  */\n         DO                                 /*  do                    */\n            pnl_msg = 'MSG(PTPM008)'        /*    set error message   */\n            CALL Line_Command_Error         /*    do invalid cmd stuff*/\n            csr_pos = 'CURSOR(CMDL)'        /*    set cursor position */\n            RETURN                          /*    return to caller    */\n         END                                /*  end                   */\n      IF cmdl \\= ' ' THEN                   /*   if right cmd entered */\n         DO                                 /*      do                */\n           lcmd = cmdl                      /*        set line command*/\n           lr_sw = 'L'                      /*        set l/r switch  */\n           CALL Execute_Line_Command        /*        exec line cmd   */\n         END                                /*      end               */\n      IF error_msg THEN                     /*   if any error         */\n         RETURN                             /*      return to caller  */\n      IF cmdr \\= ' ' THEN                   /*   if right cmd entered */\n         DO                                 /*      do                */\n           lcmd = cmdr                      /*        set line command*/\n           lr_sw = 'R'                      /*        set l/r switch  */\n           CALL Execute_Line_Command        /*        exec line cmd   */\n         END                                /*      end               */\n      IF error_msg THEN                     /*   if any error         */\n         RETURN                             /*      end               */\n      CALL Get_Next_Linecmd                 /*   get next line cmd    */\n   END                                      /*end                     */\n   cmdl = ' '                               /*blank left line cmd fld */\n   cmdr = ' '                               /*blank right line cmd fld*/\n   ztdtop = hold_ztdtop                     /*restore ztdtop          */\n   CALL Fix_Position                        /*fix display position    */\nRETURN\n\nExecute_Line_Command:\n   csr_row = crpn                           /*set cursor row          */\n   INTERPRET \"csr_pos = \"  ,                /*set cursor position     */\n             \"'CURSOR(CMD\"lr_sw\")'\"         /*set cursor row position */\n   SELECT                                   /*select                  */\n     WHEN lcmd = 'C' THEN                   /*  when command 'C'      */\n       CALL Execute_Copy_L_Command          /*                        */\n     WHEN lcmd = 'M' THEN                   /*  when command 'M'      */\n       CALL Execute_Move_L_Command          /*                        */\n     WHEN lcmd = 'D' THEN                   /*  when command 'D'      */\n       CALL Execute_Delete_L_Command        /*                        */\n     WHEN lcmd = 'R' THEN                   /*  when command 'R'      */\n       CALL Execute_Rename_L_Command        /*                        */\n     WHEN lcmd = 'E' THEN                   /*  when command 'R'      */\n       CALL Execute_Edit_L_Command          /*                        */\n     WHEN lcmd = 'B' | lcmd = 'V' THEN      /*  when command 'B'      */\n       CALL Execute_Browse_L_Command        /*                        */\n     WHEN lcmd = 'AL' THEN                  /*  when command 'AL'     */\n       CALL Execute_All_L_Command           /*                        */\n     WHEN lcmd = 'SC' THEN                  /*  WHEN command 'SC'     */\n       CALL Execute_SC_L_Command            /*                        */\n   OTHERWISE                                /*otherwise               */\n     DO                                     /*  do                    */\n       pnl_msg = 'MSG(PTPM005)'             /*    set error message   */\n       CALL Line_Command_Error              /*    do invalid cmd stuff*/\n       RETURN                               /*    return to caller    */\n     END                                    /*  end                   */\n   END                                      /*end                     */\nRETURN\n\nGet_Next_Linecmd:\n   IF ztdsels = 1 THEN                      /*if this is last line cmd*/\n      DO                                    /*   do                   */\n        process_flag = 0                    /*     reset process flag */\n        RETURN                              /*     return to caller   */\n      END                                   /*   end                  */\n   \"TBDISPL\" tblname                ,       /*read next command line  */\n           \"POSITION(CRPN)\"         ,       /*                        */\n           \"ROWID(CURROW)\"                  /*                        */\nRETURN\n\nExecute_Copy_L_Command:\n   INTERPRET ,                              /*                        */\n     'IF mbr'lr_sw '= \"\" THEN;'  ,          /*if mbr name blank       */\n        'RETURN'                            /*   return               */\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLCPY'       || ,       /*call P2PLCPY            */\n                '(lr_sw,'        || ,       /*  left/right switch     */\n                 'tblname,'      || ,       /*  mbr list table name   */\n                 'dsnl,'         || ,       /*  left dsname           */\n                 'dsnr,'         || ,       /*  right dsname          */\n                 'p2pverno,'     || ,       /*  pds2pds version       */\n                 'memlo,'        || ,       /*  nbr mbrs left side    */\n                 'memro,'        || ,       /*  nbr mbrs right side   */\n                 'mbrl,'         || ,       /*  left member name      */\n                 'mbrr,'         || ,       /*  right member name     */\n                 'cnfrml,'       || ,       /*  left cnfrm line cmd   */\n                 'cnfrmr,'       || ,       /*  right cnfrm line cmd  */\n                 'volidl,'       || ,       /*  left volser           */\n                 'volidr,'       || ,       /*  right volser          */\n                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */\n   IF lc_rtn_code = 10 THEN                 /*if no errors            */\n      DO                                    /*   do                   */\n        PARSE PULL memlo                    /*     get memlo from stak*/\n        PARSE PULL memro                    /*     get memro from stak*/\n        RETURN                              /*     return to caller   */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nExecute_Move_L_Command:\n   INTERPRET ,                              /*                        */\n     'IF mbr'lr_sw '= \"\" THEN;'  ,          /*if mbr name blank       */\n        'RETURN'                            /*   return               */\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLMOV'       || ,       /*call P2PLMOV            */\n                '(lr_sw,'        || ,       /*  left/right switch     */\n                 'tblname,'      || ,       /*  mbr list table name   */\n                 'dsnl,'         || ,       /*  left dsname           */\n                 'dsnr,'         || ,       /*  right dsname          */\n                 'p2pverno,'     || ,       /*  pds2pds version       */\n                 'memlo,'        || ,       /*  nbr mbrs left side    */\n                 'memro,'        || ,       /*  nbr mbrs right side   */\n                 'mbrl,'         || ,       /*  left member name      */\n                 'mbrr,'         || ,       /*  right member name     */\n                 'cnfrml,'       || ,       /*  left cnfrm line cmd   */\n                 'cnfrmr,'       || ,       /*  rite cnfrm line cmd   */\n                 'volidl,'       || ,       /*  left volser           */\n                 'volidr,'       || ,       /*  right volser          */\n                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */\n   IF lc_rtn_code = 10 THEN                 /*if no errors            */\n      DO                                    /*   do                   */\n        PARSE PULL memlo                    /*     get memlo from stak*/\n        PARSE PULL memro                    /*     get memro from stak*/\n        RETURN                              /*     return to caller   */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nExecute_Delete_L_Command:\n   INTERPRET ,                              /*                        */\n     'IF mbr'lr_sw '= \"\" THEN;'  ,          /*if mbr name blank       */\n        'RETURN'                            /*   return               */\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLDEL'       || ,       /*call P2PLDEL            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'p2pverno,'     || ,       /*     pds2pds version    */\n                 'memlo,'        || ,       /*     nbr mbrs left side */\n                 'memro,'        || ,       /*     nbr mbrs right side*/\n                 'mbrl,'         || ,       /*     left member name   */\n                 'mbrr,'         || ,       /*     right member name  */\n                 'cnfrml,'       || ,       /*     left cnfrm line cmd*/\n                 'cnfrmr,'       || ,       /*     rite cnfrm line cmd*/\n                 'volidl,'       || ,       /*  left volser           */\n                 'volidr,'       || ,       /*  right volser          */\n                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */\n   IF lc_rtn_code = 10 THEN                 /*if no errors            */\n      DO                                    /*   do                   */\n        PARSE PULL memlo                    /*     get memlo from stak*/\n        PARSE PULL memro                    /*     get memro from stak*/\n        RETURN                              /*     return to caller   */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nExecute_Rename_L_Command:\n   INTERPRET ,                              /*                        */\n     'IF mbr'lr_sw '= \"\" THEN;'  ,          /*if mbr name blank       */\n        'RETURN'                            /*   return               */\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLREN'       || ,       /*call P2PLREN            */\n                '(lr_sw,'        || ,       /*  left/right switch     */\n                 'tblname,'      || ,       /*  mbr list table name   */\n                 'dsnl,'         || ,       /*  left dsname           */\n                 'dsnr,'         || ,       /*  right dsname          */\n                 'p2pverno,'     || ,       /*  pds2pds version       */\n                 'mbrl,'         || ,       /*  left member name      */\n                 'mbrr,'         || ,       /*  right member name     */\n                 'volidl,'       || ,       /*  left volser           */\n                 'volidr,'       || ,       /*  right volser          */\n                 'nbr_of_mbrs)'             /*  nbr mbrs in table     */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nExecute_Edit_L_Command:\n   INTERPRET ,                              /*                        */\n     'IF mbr'lr_sw '= \"\" THEN;'  ,          /*if mbr name blank       */\n        'RETURN'                            /*   return               */\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLEDT'       || ,       /*call P2PLEDT            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'p2pverno,'     || ,       /*     pds2pds version    */\n                 'mbrl,'         || ,       /*     left member name   */\n                 'mbrr,'         || ,       /*     right member name  */\n                 'volidl,'       || ,       /*  left volser           */\n                 'volidr,'       || ,       /*  right volser          */\n                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nExecute_Browse_L_Command:\n   INTERPRET ,                              /*                        */\n     'IF mbr'lr_sw '= \"\" THEN;'  ,          /*if mbr name blank       */\n        'RETURN'                            /*   return               */\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLBRW'       || ,       /*call P2PLBRW            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'cmdl,'         || ,       /*     left line command  */\n                 'cmdr,'         || ,       /*     right line command */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'p2pverno,'     || ,       /*     pds2pds version    */\n                 'mbrl,'         || ,       /*     left member name   */\n                 'mbrr,'         || ,       /*     right member name  */\n                 'volidl,'       || ,       /*  left volser           */\n                 'volidr,'       || ,       /*  right volser          */\n                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nExecute_All_L_Command:\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLALL'       || ,       /*call P2PLALL            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'p2pverno,'     || ,       /*     pds2pds version    */\n                 'mbrl,'         || ,       /*     left member name   */\n                 'mbrr,'         || ,       /*     right member name  */\n                 'nbr_of_mbrs)'             /*     nbr mbrs in table  */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nExecute_SC_L_Command:\n   INTERPRET                        ,\n   'lc_rtn_code = P2PLSUP'       || ,       /*call P2PLSUP            */\n                '(lr_sw,'        || ,       /*     left/right switch  */\n                 'tblname,'      || ,       /*     mbr list table name*/\n                 'dsnl,'         || ,       /*     left dsname        */\n                 'dsnr,'         || ,       /*     right dsname       */\n                 'p2pverno,'     || ,       /*     pds2pds version    */\n                 'mbrl,'         || ,       /*     left member name   */\n                 'mbrr,'         || ,       /*     right member name  */\n                 'volidl,'       || ,       /*     left dsn volser    */\n                 'volidr)'                  /*     right dsn volser   */\n   IF lc_rtn_code = 4 THEN                  /*if return code = 4      */\n      DO                                    /*   do                   */\n        PARSE PULL p2psmsg                  /*     get system msg     */\n        PARSE PULL p2plmsg                  /*     get system msg     */\n        pnl_msg = 'MSG(PTPM009Z)'           /*     show system msg    */\n      END                                   /*   end                  */\n   IF lc_rtn_code = 8 THEN                  /*if return code = 8      */\n      PARSE PULL pnl_msg                    /*   get msg from stack   */\n   IF lc_rtn_code > 0 THEN                  /*if bad return code      */\n        CALL Line_Command_Error             /*     other error stuff  */\nRETURN\n\nLine_Command_Error:\n   error_msg = 1                            /*set error switch        */\n   csr_row = crpn                           /*set cursor row          */\n   process_flag = 0                         /*reset process flag      */\nRETURN\n\nDisp_Mbrl_Panel:\n   \"TBDISPL\" tblname           ,            /*display the panel       */\n           pnlname             ,            /*                        */\n           \"POSITION(crpn)\"    ,            /*                        */\n           csr_pos             ,            /*                        */\n           pnl_msg             ,            /*                        */\n           \"CSRROW(\"csr_row\")\" ,            /*                        */\n           \"ROWID(currow)\"     ,            /*                        */\n           autosel                          /*                        */\n   csr_pos = 'CURSOR()'                     /*set cursor position     */\n   pnl_msg = 'MSG()'                        /*set panel message       */\n   pnlname = 'PANEL(P2PMBRL)'               /*set panel name          */\n   autosel = 'AUTOSEL(NO)'                  /*set autoselect field    */\n   csr_row = 0                              /*set cursor row          */\n   list_panel_rc = rc                       /*get return code         */\n   IF list_panel_rc <> 0 & ,                /*if not an acceptable rc */\n      list_panel_rc <> 4 & ,                /*                        */\n      list_panel_rc <> 8 THEN               /*                        */\n      DO                                    /*   do                   */\n        \"SETMSG MSG(ISRZ002)\"               /*     display error msg  */\n         csr_pos = csr_fld                  /*     set cursor pos     */\n         RETURN                             /*     return             */\n      END                                   /*   end do               */\n   IF list_panel_rc = 4 THEN                /*if line commands entered*/\n      list_panel_rc = 0                     /*   set rc to zero       */\nRETURN\n\nFix_Position:\n   \"TBTOP\" tblname                          /*go to top of table      */\n   \"TBSKIP\" tblname \"NUMBER(\"ztdtop\")\"      /*skip to prev position   */\nRETURN\n\nInitialize_Variables:\n   csr_namesame = 'CURSOR(NAMESAME)'\n   csr_fld = 'CURSOR()'\n   csr_pos = csr_fld\n   msg_fld = 'MSG()'\n   pnlname = 'PANEL(P2PMBRL)'\n   autosel = 'AUTOSEL(NO)'\n   error_msg = 0\n   displopt = 0\n   pfkpresd = ' '\n   dummy = OUTTRAP(\"termout.\",,\"noconcat\")\n   \"CONTROL ERRORS RETURN\"\n   gather_msg = 'PDS2PDS is reading the member list for'\n   display_msg = 'PDS2PDS is creating the member list display'\n   csr_row = 0\n   \"VGET (p2puntu p2puntw) PROFILE\"         /*get custom unit name    */\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P2PSTLF": {"ttr": 18, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x12\\x00\\x99\\x10\\x9f\\x00\\x99\\x14o\\x15B\\x00\\x92\\x00y\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1999-04-19T00:00:00", "modifydate": "1999-05-26T15:42:12", "lines": 146, "newlines": 121, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PSTLF                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: Moves displayed statistics to the left when the LF     |\n|              primary command is entered on the member list panel    |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nPARSE ARG displine\nCALL Initialize_Variables\nCALL Move_Left\nQUEUE dtl7\nQUEUE dtl6\nQUEUE dtl5\nQUEUE dtl4\nQUEUE dtl3\nQUEUE dtl2\nQUEUE dtl1\nQUEUE displine\nQUEUE hdl\nQUEUE hdr\nEXIT\n\nMove_Left:\n   SELECT\n     WHEN displine = 'dtl1' THEN\n        DO\n          dtl7 = dtl7cnst\n          dtl6 = 'omit'\n          dtl5 = 'omit'\n          dtl4 = 'omit'\n          dtl3 = 'omit'\n          dtl2 = 'omit'\n          dtl1 = 'omit'\n          displine = 'dtl7'\n          hdl = hdr7\n          hdr = hdr7\n        END\n   WHEN displine = 'dtl7' THEN\n        DO\n          dtl6 = dtl6cnst\n          dtl7 = 'omit'\n          dtl5 = 'omit'\n          dtl4 = 'omit'\n          dtl3 = 'omit'\n          dtl2 = 'omit'\n          dtl1 = 'omit'\n          displine = 'dtl6'\n          hdl = hdr6\n          hdr = hdr6\n        END\n   WHEN displine = 'dtl6' THEN\n        DO\n          dtl5 = dtl5cnst\n          dtl7 = 'omit'\n          dtl6 = 'omit'\n          dtl4 = 'omit'\n          dtl3 = 'omit'\n          dtl2 = 'omit'\n          dtl1 = 'omit'\n          displine = 'dtl5'\n          hdl = hdr5\n          hdr = hdr5\n        END\n   WHEN displine = 'dtl5' THEN\n        DO\n          dtl4 = dtl4cnst\n          dtl7 = 'omit'\n          dtl6 = 'omit'\n          dtl5 = 'omit'\n          dtl3 = 'omit'\n          dtl2 = 'omit'\n          dtl1 = 'omit'\n          displine = 'dtl4'\n          hdl = hdr4\n          hdr = hdr4\n        END\n   WHEN displine = 'dtl4' THEN\n        DO\n          dtl3 = dtl3cnst\n          dtl7 = 'omit'\n          dtl6 = 'omit'\n          dtl5 = 'omit'\n          dtl4 = 'omit'\n          dtl2 = 'omit'\n          dtl1 = 'omit'\n          displine = 'dtl3'\n          hdl = hdr3\n          hdr = hdr3\n        END\n   WHEN displine = 'dtl3' THEN\n        DO\n          dtl2 = dtl2cnst\n          dtl7 = 'omit'\n          dtl6 = 'omit'\n          dtl5 = 'omit'\n          dtl4 = 'omit'\n          dtl3 = 'omit'\n          dtl1 = 'omit'\n          displine = 'dtl2'\n          hdl = hdr2\n          hdr = hdr2\n        END\n   WHEN displine = 'dtl2' THEN\n        DO\n          dtl1 = dtl1cnst\n          dtl7 = 'omit'\n          dtl6 = 'omit'\n          dtl5 = 'omit'\n          dtl4 = 'omit'\n          dtl3 = 'omit'\n          dtl2 = 'omit'\n          displine = 'dtl1'\n          hdl = hdr1\n          hdr = hdr1\n        END\n  OTHERWISE\n    NOP\n  END\nRETURN\n\nInitialize_Variables:\n   dtl1cnst = '$Z @Z*mbrl    *stat1l                   $Z @Z*mbrr    *stat1r'\n   dtl2cnst = '$Z @Z*mbrl    *stat2l                   $Z @Z*mbrr    *stat2r'\n   dtl3cnst = '$Z @Z*mbrl    *stat3l                   $Z @Z*mbrr    *stat3r'\n   dtl4cnst = '$Z @Z*mbrl    *stat4l                   $Z @Z*mbrr    *stat4r'\n   dtl5cnst = '$Z @Z*mbrl    *stat5l                   $Z @Z*mbrr    *stat5r'\n   dtl6cnst = '$Z @Z*mbrl    *stat6l                   $Z @Z*mbrr    *stat6r'\n   dtl7cnst = '$Z @Z*mbrl    *stat7l                   $Z @Z*mbrr    *stat7r'\n   hdr1 = 'vv.mm Created  Changed'\n   hdr2 = 'Created  Changed  Time'\n   hdr3 = 'Changed  Time     Size'\n   hdr4 = 'Time     Size  Init'\n   hdr5 = ' Size  Init   Mod'\n   hdr6 = ' Init   Mod User'\n   hdr7 = '  Mod User     Alias'\nRETURN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "P2PSTRT": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x19\\x00\\x99\\x10\\x9f\\x00\\x99\\x14o\\x15B\\x00\\x92\\x00\\x92\\x00\\x00\\xe2\\xc1\\xe2\\xd4\\xc9\\xd5\\xf2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1999-04-19T00:00:00", "modifydate": "1999-05-26T15:42:19", "lines": 146, "newlines": 146, "modlines": 0, "user": "SASMIN2"}, "text": "/* REXX */\n/*===================================================================*\\\n|Program Name: P2PSTRT                                                |\n|Date Written: May 31, 1999                                           |\n|      Author: Michael A. Newell                                      |\n|              Austin, TX                                             |\n|              http://wb4huc.home.texas.net                           |\n|              http://wb4huc.home.texas.net/pds2pds                   |\n|                                                                     |\n| Description: Moves displayed statistics to the right when the RI    |\n|              primary command is entered on the member list panel    |\n|                                                                     |\n|   Called By: P2PMBRL                                                |\n|                                                                     |\n|       Calls:                                                        |\n|                                                                     |\n\\*===================================================================*/\nPARSE ARG displine\nCALL Initialize_Variables\nCALL Move_Right\nQUEUE dtl7\nQUEUE dtl6\nQUEUE dtl5\nQUEUE dtl4\nQUEUE dtl3\nQUEUE dtl2\nQUEUE dtl1\nQUEUE displine\nQUEUE hdl\nQUEUE hdr\nEXIT\n\nMove_Right:\n   Select\n     WHEN displine = 'dtl1' THEN\n        DO\n          dtl2 = dtl2cnst\n          dtl1 = 'omit'\n          dtl3 = 'omit'\n          dtl4 = 'omit'\n          dtl5 = 'omit'\n          dtl6 = 'omit'\n          dtl7 = 'omit'\n          displine = 'dtl2'\n          hdl = hdr2\n          hdr = hdr2\n        END\n     WHEN displine = 'dtl2' THEN\n        DO\n          dtl3 = dtl3cnst\n          dtl1 = 'omit'\n          dtl2 = 'omit'\n          dtl4 = 'omit'\n          dtl5 = 'omit'\n          dtl6 = 'omit'\n          dtl7 = 'omit'\n          displine = 'dtl3'\n          hdl = hdr3\n          hdr = hdr3\n        END\n     WHEN displine = 'dtl3' THEN\n        DO\n          dtl4 = dtl4cnst\n          dtl1 = 'omit'\n          dtl2 = 'omit'\n          dtl3 = 'omit'\n          dtl5 = 'omit'\n          dtl6 = 'omit'\n          dtl7 = 'omit'\n          displine = 'dtl4'\n          hdl = hdr4\n          hdr = hdr4\n        END\n     WHEN displine = 'dtl4' THEN\n        DO\n          dtl5 = dtl5cnst\n          dtl1 = 'omit'\n          dtl2 = 'omit'\n          dtl3 = 'omit'\n          dtl4 = 'omit'\n          dtl6 = 'omit'\n          dtl7 = 'omit'\n          displine = 'dtl5'\n          hdl = hdr5\n          hdr = hdr5\n        END\n     WHEN displine = 'dtl5' THEN\n        DO\n          dtl6 = dtl6cnst\n          dtl1 = 'omit'\n          dtl2 = 'omit'\n          dtl3 = 'omit'\n          dtl4 = 'omit'\n          dtl5 = 'omit'\n          dtl7 = 'omit'\n          displine = 'dtl6'\n          hdl = hdr6\n          hdr = hdr6\n        END\n     WHEN displine = 'dtl6' THEN\n        DO\n          dtl7 = dtl7cnst\n          dtl1 = 'omit'\n          dtl2 = 'omit'\n          dtl3 = 'omit'\n          dtl4 = 'omit'\n          dtl5 = 'omit'\n          dtl6 = 'omit'\n          displine = 'dtl7'\n          hdl = hdr7\n          hdr = hdr7\n        END\n     WHEN displine = 'dtl7' THEN\n        DO\n          dtl1 = dtl1cnst\n          dtl2 = 'omit'\n          dtl3 = 'omit'\n          dtl4 = 'omit'\n          dtl5 = 'omit'\n          dtl6 = 'omit'\n          dtl7 = 'omit'\n          displine = 'dtl1'\n          hdl = hdr1\n          hdr = hdr1\n        END\n  OTHERWISE\n    NOP\n  END\nRETURN\n\nInitialize_Variables:\n   dtl1cnst = '$Z @Z*mbrl    *stat1l                   $Z @Z*mbrr    *stat1r'\n   dtl2cnst = '$Z @Z*mbrl    *stat2l                   $Z @Z*mbrr    *stat2r'\n   dtl3cnst = '$Z @Z*mbrl    *stat3l                   $Z @Z*mbrr    *stat3r'\n   dtl4cnst = '$Z @Z*mbrl    *stat4l                   $Z @Z*mbrr    *stat4r'\n   dtl5cnst = '$Z @Z*mbrl    *stat5l                   $Z @Z*mbrr    *stat5r'\n   dtl6cnst = '$Z @Z*mbrl    *stat6l                   $Z @Z*mbrr    *stat6r'\n   dtl7cnst = '$Z @Z*mbrl    *stat7l                   $Z @Z*mbrr    *stat7r'\n   hdr1 = 'vv.mm Created  Changed'\n   hdr2 = 'Created  Changed  Time'\n   hdr3 = 'Changed  Time     Size'\n   hdr4 = 'Time     Size  Init'\n   hdr5 = ' Size  Init   Mod'\n   hdr6 = ' Init   Mod User'\n   hdr7 = '  Mod User     Alias'\nRETURN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT649/CBT.V500.FILE649.PDS/EXEC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT649/CBT.V500.FILE649.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}