       IDENTIFICATION DIVISION.
       PROGRAM-ID. READDIR.
      *
      * THIS COBOL II PROGRAM IS MEANT TO BE CALLED FROM A REXX EXEC.
      *
      * THIS PROGRAM WILL READ THE DIRECTORY OF A PARTITIONED DATASET
      * AND CREATE A FILE CONTAINING THE MEMBER STATS FOR THE PDS
      * DIRECTORY. THE REXX PROGRAM WILL THEN USE EXECIO TO READ THE
      * FILE CREATED BY THIS PROGRAM.
      *
       AUTHOR.     MICHAEL A. NEWELL.  (READDIR)
      *
      *            ARNOLD STONE        (MATCHPAT)
      *
      *
      * LEGAL STUFF:
      *
      *   THIS PROGRAM IS SUPPLIED FREE OF CHARGE AND WITHOUT
      *   WARRANTY OF ANY KIND.
      *
      *   THE AUTHOR HAS TESTED THIS PROGRAM AS FULLY AS POSSIBLE
      *   USING THE COMPUTER SYSTEMS AND FACILITIES AVAILABLE.
      *
      *   HOWEVER, THE AUTHOR TAKES NO RESPONSIBILITY FOR ANY DAMAGE
      *   DONE TO ANY COMPUTER FILES OR OTHER RESOURCES BY THIS PROGRAM.
      *
      *   CHANGES: 05/18/1998 - MOVED SPACES TO THE FIELD 'WS-MS-ALIAS'
      *                         WHEN MEMBER IS NOT AN ALIAS. THIS
      *                         PREVENTS THE FIELD FROM BEING OCCUPIED
      *                         BY RANDOM OR UNKNOWN CHARACTERS.
      *
      *            05/26/1998 - IF MEMBER HAD NO STATS, BUT WAS AN ALIAS,
      *                         THE FACT THAT IT WAS AN ALIAS WAS NOT REPORTED
      *                         ON THE MEMBER LIST DISPLAY. IF THE MEMBER HAD
      *                         STATS AND WAS AN ALIAS, ALIAS INFO WAS O.K.
      *
      *DATE-WRITTEN.  02/20/98.
       DATE-COMPILED.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.
           IBM-370.
       OBJECT-COMPUTER.
           IBM-370.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT PDS-DIRECTORY
               ASSIGN TO PDSIN.
           SELECT PDS-MEMBERS
               ASSIGN TO PDSOUT.
       DATA DIVISION.
       FILE SECTION.
       FD  PDS-DIRECTORY
           RECORDING MODE IS U
           DATA RECORD IS PDS-DIR-BLOCK.
       01  PDS-DIR-BLOCK.
           05  FILLER                    PIC X(256).
       FD  PDS-MEMBERS
           RECORDING MODE IS F
           BLOCK CONTAINS 0 RECORDS
           DATA RECORD IS PDS-MEMBER-RECORD.
       01  PDS-MEMBER-RECORD             PIC X(80).
       WORKING-STORAGE SECTION.
      *
      *PROGRAM CONSTANTS
      *
       01  WS-HEADER                     PIC X(35)         VALUE
           'READDIR WORKING-STORAGE BEGINS HERE'.
       01  WS-ALIAS-MSG                  PIC X(05)         VALUE
           'ALIAS'.
       01  WS-MBR-STATIC-BYTES           PIC 9(02)         VALUE 12.
      *
      *REXX FUNCTION CALL VARIABLES
      *
       01  WS-VARIABLE-LENGTH          PIC S9(09)     COMP VALUE +10.
       01  VARNAME                     PIC X(10)           VALUE
           'READDIR_RC'.
       01  VARNAME-MASK                PIC X(10)           VALUE
           'MASKDATA'.
       01  DUMMY-PARM                  PIC X(04)           VALUE SPACE.
       01  SHVBLOCK.
           05  SHVNEXT                 PIC S9(09)     COMP VALUE ZERO.
           05  SHVUSER                 PIC S9(09)     COMP VALUE ZERO.
           05  SHVCODE                 PIC X(01)           VALUE SPACE.
           05  SHVRET                  PIC X(01)           VALUE SPACE.
           05  FILLER                  PIC X(02)           VALUE SPACE.
           05  SHVBUFL                 PIC S9(09)     COMP VALUE ZERO.
           05  SHVNAMA                 POINTER.
           05  SHVNAML                 PIC S9(09)     COMP VALUE ZERO.
           05  SHVVALA                 POINTER.
           05  SHVVALL                 PIC S9(09)     COMP VALUE ZERO.
      *
      *PROGRAM VARIABLES
      *
       01  WS-DIR-BLOCK-COUNTER          PIC 9(05)         VALUE ZERO.
       01  WS-ENTRY-LEN                  PIC 9(05)         VALUE ZERO.
       01  WS-ENTRY-BEG-POS              PIC 9(03)         VALUE 1.
       01  WS-BYTES-IN-BLOCK             PIC 9(04)         VALUE ZERO.
       01  WS-BYTES-REM                  PIC 9(03)         VALUE ZERO.
       01  WS-1BYTE-COMP                 PIC 9(02)
                                   COMP.
       01  WS-1BYTE-REDEF          REDEFINES
           WS-1BYTE-COMP.
           05  WS-1BYTE-LEFT             PIC X(01).
           05  WS-1BYTE-RIGHT            PIC X(01).
       01  WS-C-DEC                      PIC 9(04).
       01  WS-NBR-DIV                    PIC 9(01).
       01  WS-NBR-REM                    PIC 9(01).
       01  WS-NBR-DEC                    PIC 9(03).
       01  WS-VV-MM-WORK.
           05 WS-VV-WORK                 PIC 9(02).
           05 FILLER                     PIC X(01)         VALUE '.'.
           05 WS-MM-WORK                 PIC 9(02).
       01  WS-TIME-WORK.
           05  WS-HR-LEFT-WORK           PIC 9(01).
           05  WS-HR-RIGHT-WORK          PIC 9(01).
           05  FILLER                    PIC X(01)         VALUE ':'.
           05  WS-MIN-LEFT-WORK          PIC 9(01).
           05  WS-MIN-RIGHT-WORK         PIC 9(01).
           05  FILLER                    PIC X(01)         VALUE ':'.
           05  WS-SEC-LEFT-WORK          PIC 9(01).
           05  WS-SEC-RIGHT-WORK         PIC 9(01).
       01  WS-SIZE-WORK                  PIC 9(05).
       01  WS-INIT-WORK                  PIC 9(05).
       01  WS-MOD-WORK                   PIC 9(05).
       01  WS-CENTURY-CREATED            PIC 9(01).
       01  WS-CENTURY-CHANGED            PIC 9(01).
       01  WS-YEAR-4DIGITS               PIC 9(04).
       01  WS-YEAR-WORK.
           05  WS-YEAR-LEFT-WORK         PIC 9(01).
           05  WS-YEAR-RIGHT-WORK        PIC 9(01).
       01  WS-YEAR-WORK-PIC9       REDEFINES
           WS-YEAR-WORK                  PIC 9(02).
       01  WS-DAY-WORK.
           05  WS-DAY-LEFT-WORK          PIC 9(01).
           05  WS-DAY-RIGHT-WORK         PIC 9(01).
       01  WS-DAY-WORK-ACCUM             PIC 9(03).
       01  WS-LEAPYEAR-DIV               PIC 9(04).
       01  WS-LEAPYEAR-REM               PIC 9(04).
       01  WS-MONTH-SUB                  PIC 9(02).
       01  WS-DAYS-LEFT                  PIC 9(03).
       01  WS-DATE-WORK.
           05  WS-MMDDYY-YEAR            PIC 9(04).
           05  FILLER                    PIC X(01)        VALUE '/'.
           05  WS-MMDDYY-MONTH           PIC 9(02).
           05  FILLER                    PIC X(01)        VALUE '/'.
           05  WS-MMDDYY-DAY             PIC 9(02).
      *
      *PROGRAM SWITCHES
      *
       01  WS-PDS-EOF-SW                 PIC 9(01)         VALUE ZERO.
           88 WS-PDS-EOF                                   VALUE 1.
       01  WS-END-OF-DIR-BLOCK-SW        PIC 9(01)         VALUE ZERO.
           88 WS-END-OF-DIR-BLOCK                          VALUE 1.
      *
      *DATA STORAGE AREAS
      *
       01  WS-MONTH-DATA.
           05  FILLER                    PIC 9(02)         VALUE 31.
           05  WS-FEBRUARY-ENTRY         PIC 9(02)         VALUE 28.
           05  FILLER                    PIC 9(02)         VALUE 31.
           05  FILLER                    PIC 9(02)         VALUE 30.
           05  FILLER                    PIC 9(02)         VALUE 31.
           05  FILLER                    PIC 9(02)         VALUE 30.
           05  FILLER                    PIC 9(02)         VALUE 31.
           05  FILLER                    PIC 9(02)         VALUE 31.
           05  FILLER                    PIC 9(02)         VALUE 30.
           05  FILLER                    PIC 9(02)         VALUE 31.
           05  FILLER                    PIC 9(02)         VALUE 30.
           05  FILLER                    PIC 9(02)         VALUE 31.
       01  WS-MONTH-TABLE            REDEFINES
           WS-MONTH-DATA.
           05  WS-MONTH-ELEMENT          PIC 9(02)
                                     OCCURS 12 TIMES.
      *
      * THIS 01-LEVEL ITEM HOLDS THE ENTIRE DIRECTORY BLOCK
      *
       01  WS-PDS-DIR-BLOCK.
           10  WS-BYTES-USED-L           PIC X(01).
           10  WS-BYTES-USED-R           PIC X(01).
           10  WS-DIR-ENTRIES            PIC X(254).
      *
      * THIS 01-LEVEL ITEM HOLDS ONE DIRECTORY ENTRY FROM THE ABOVE
      * DIRECTORY BLOCK
      *
       01  WS-DIR-ENTRY.
           05  WS-ENTRY-NAME             PIC X(08).
           05  WS-TTR                    PIC X(03).
           05  WS-C                      PIC X(01).
           05  WS-USER-INFO              PIC X(30).
           05  WS-USER-INFO-EXPANDED     REDEFINES
               WS-USER-INFO.
               10  WS-VV                 PIC X(01).
               10  WS-MM                 PIC X(01).
               10  FILLER                PIC X(01).
               10  WS-SEC-MOD            PIC X(01).
               10  WS-CREATED.
                   15 WS-CR-YR-LEFT      PIC X(01).
                   15 WS-CR-YR-RIGHT     PIC X(01).
                   15 WS-CR-DY-LEFT      PIC X(01).
                   15 WS-CR-DY-RIGHT     PIC S9(01)
                                     COMP-3.
               10  WS-CHANGED.
                   15 WS-CH-YR-LEFT      PIC X(01).
                   15 WS-CH-YR-RIGHT     PIC X(01).
                   15 WS-CH-DY-LEFT      PIC X(01).
                   15 WS-CH-DY-RIGHT     PIC S9(01)
                                     COMP-3.
               10  WS-HR                 PIC X(01).
               10  WS-MIN                PIC X(01).
               10  WS-SIZEL              PIC X(01).
               10  WS-SIZER              PIC X(01).
               10  WS-INITL              PIC X(01).
               10  WS-INITR              PIC X(01).
               10  WS-MODL               PIC X(01).
               10  WS-MODR               PIC X(01).
               10  WS-USER               PIC X(08).
               10  FILLER                PIC X(02).
      *
      * THIS 01-LEVEL ITEM HOLDS THE MEMBER NAME AND STATS THAT ARE
      * WRITTEN TO THE OUTPUT FILE AND READ BY THE REXX PROGRAM
      *
       01  WS-MEMBER-STATS.
           05  WS-MS-ENTRY-NAME          PIC X(08).
           05  WS-MS-USER-INFO.
               10  WS-MS-VV-MM           PIC X(05).
               10  WS-MS-DATE-CREATED    PIC X(10).
               10  WS-MS-DATE-CHANGED    PIC X(10).
               10  WS-MS-TIME            PIC X(08).
               10  WS-MS-SIZE            PIC ZZZZ9.
               10  WS-MS-INIT            PIC ZZZZ9.
               10  WS-MS-MOD             PIC ZZZZ9.
               10  WS-MS-USER            PIC X(08).
               10  WS-MS-ALIAS           PIC X(03).
               10  FILLER                PIC X(13).
      *
      * BREAK DOWN OF MASKDATA VARIABLE FROM REXX
      *
       01   COB-DATA.
            03  MASK                     PIC X(8).
            03  MASKOPT                  PIC X.

       LINKAGE SECTION.
      *
      * REXX FUNCTION CALL STUFF
      *
       01  EFPLCOM                     PIC X(04).
       01  EFPLBARG                    PIC X(04).
       01  EFPLEARG                    PIC X(04).
       01  EFPLFB                      PIC X(04).
       01  EFPLARG.
           05  ARG-TBL-ENT             OCCURS 5 TIMES.
               10  ARG-ADDR            POINTER.
               10  ARG-LEN             PIC S9(09)     COMP.
       01  EFPLEVAL                    POINTER.
       01  ARG-STRING                  PIC X(250).
       01  EVALBLOCK.
           05  EVALBLOCK-EVPAD1        PIC X(04).
           05  EVALBLOCK-EVSIZE        PIC S9(09)     COMP.
           05  EVALBLOCK-EVLEN         PIC S9(09)     COMP.
           05  EVALBLOCK-EVPAD2        PIC X(04).
           05  EVALBLOCK-EVDATA.
               10  EVALBLOCK-RETCODE   PIC 9(02).
               10  FILLER              PIC X(248).
        PROCEDURE DIVISION
                 USING EFPLCOM
                       EFPLBARG
                       EFPLEARG
                       EFPLFB
                       EFPLARG
                       EFPLEVAL.
       0000-MAIN.
      *
      *    RETRIEVE THE MASK VALUE AND MASK OPTION
      *
           MOVE 'F' TO SHVCODE.
           MOVE 8 TO SHVNAML.
           SET SHVVALA TO ADDRESS OF EVALBLOCK-EVDATA.
           CALL 'SETPTR' USING VARNAME-MASK
                               SHVNAMA.
           MOVE 9 TO SHVBUFL.
           CALL 'SETPTR' USING COB-DATA
                               SHVVALA.
           CALL 'IRXEXCOM' USING BY CONTENT   'IRXEXCOM'
                                 BY REFERENCE DUMMY-PARM
                                              DUMMY-PARM

                                              SHVBLOCK.
           OPEN INPUT  PDS-DIRECTORY.
           OPEN OUTPUT PDS-MEMBERS.
           PERFORM 0100-PROCESS-PDS-DIRECTORY THRU
                   0199-PROCESS-PDS-EXIT
             UNTIL WS-PDS-EOF.

           CLOSE PDS-DIRECTORY
                 PDS-MEMBERS.
      *
      *    SET UP THE RETURN TO THE REXX PROGRAM
      *
           SET ADDRESS OF EVALBLOCK TO EFPLEVAL.
      *
      *    MOVE RETURN CODE OF ZERO TO REXX VARIABLE
      *
           MOVE ZERO TO  EVALBLOCK-RETCODE.
           MOVE +2  TO EVALBLOCK-EVLEN.
      *
      *    SET UP REXX PROGRAM ADDRESSABILITY TO VARIABLE AND VAR DATA
      *
           MOVE 'S' TO SHVCODE.
           CALL 'SETPTR' USING VARNAME
                               SHVNAMA.
           MOVE WS-VARIABLE-LENGTH TO SHVNAML.
           SET SHVVALA TO ADDRESS OF EVALBLOCK-EVDATA.
           MOVE EVALBLOCK-EVLEN TO SHVVALL.
           CALL 'IRXEXCOM' USING BY CONTENT   'IRXEXCOM'
                                 BY REFERENCE DUMMY-PARM
                                              DUMMY-PARM
                                              SHVBLOCK.
           GOBACK.

      * READ A DIRECTORY BLOCK AND PROCESS ALL MEMBERS.
      *
      * OUTER LOOP:  0100-PROCESS-PDS-DIRECTORY
      * INNER LOOP:  0200-PROCESS-DIR-ENTRY
      *
      * 0100-PROCESS-PDS-DIRECTORY IS CALLED ONCE FOR EACH DIRECTORY
      * BLOCK.
      *
      * WITHIN 0100-PROCESS-PDS-DIRECTORY, 0200-PROCESS-DIR-ENTRY IS
      * CALLED ONCE FOR EACH MEMBER CONTAINED IN THE CURRENT DIRECTORY
      * BLOCK
      *
       0100-PROCESS-PDS-DIRECTORY.
           READ PDS-DIRECTORY INTO WS-PDS-DIR-BLOCK
             AT END
                MOVE 1 TO WS-PDS-EOF-SW
                GO TO 0199-PROCESS-PDS-EXIT.
      *
      *    CALCULATE NUMBER OF BYTES USED IN BLOCK.
      *
      *    MOVE HIGH-ORDER BYTE OF BYTES USED
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-BYTES-USED-L TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-BYTES-IN-BLOCK.
           COMPUTE WS-BYTES-IN-BLOCK = WS-BYTES-IN-BLOCK * 256.
      *
      *    MOVE LOW-ORDER BYTE OF BYTES USED
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-BYTES-USED-R TO WS-1BYTE-RIGHT.
           ADD  WS-1BYTE-COMP TO WS-BYTES-IN-BLOCK.
      *
      *    IF THIS BLOCK UNUSED WE MUST BE AT END OF PDS DIRECTORY
      *
           IF WS-BYTES-IN-BLOCK EQUAL ZERO THEN
              MOVE 1 TO WS-PDS-EOF-SW
              GO TO 0199-PROCESS-PDS-EXIT.
      *
      *    ADD 1 TO NUMBER OF DIR BLOCKS AND RESET SWITCHES AND
      *    COUNTERS
      *
           ADD 1 TO WS-DIR-BLOCK-COUNTER.
           MOVE ZERO TO WS-END-OF-DIR-BLOCK-SW.
           MOVE 1    TO WS-ENTRY-BEG-POS.
      *
      *    PROCESS INDIVIDUAL DIRECTORY ENTRIES UNTIL END OF CURRENT
      *    DIRECTORY BLOCK
      *
           PERFORM 0200-PROCESS-DIR-ENTRY THRU
                   0299-PROCESS-DIR-EXIT
             UNTIL WS-END-OF-DIR-BLOCK.
       0199-PROCESS-PDS-EXIT.
           EXIT.
      *
      * PROCESS A SINGLE DIRECTORY ENTRY.
      *
       0200-PROCESS-DIR-ENTRY.
      *
      *    MOVE STATIC MEMBER INFO FROM DIRECTORY BLOCK TO SINGLE
      *    ENTRY DATA AREA
      *
           MOVE WS-DIR-ENTRIES(WS-ENTRY-BEG-POS:WS-MBR-STATIC-BYTES)
             TO WS-DIR-ENTRY.
      *
      *    IF MEMBER NAME IS EQUAL TO HIGH-VALUES (ALL X'FF'S)
      *    WE HAVE REACHED THE LAST MEMBER OF THE LAST USED DIR BLOCK
      *    OF THE DATASET
      *
           IF WS-ENTRY-NAME EQUAL HIGH-VALUES
              MOVE 1 TO WS-END-OF-DIR-BLOCK-SW
                        WS-PDS-EOF-SW
              GO TO 0299-PROCESS-DIR-EXIT.
      *
      *    MOVE MEMBER NAME TO PRINT LINE
      *
           MOVE WS-ENTRY-NAME TO WS-MS-ENTRY-NAME.
      *
      *    GET NUMBER OF BYTES OF USER DATA FOR THIS ENTRY.
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-C TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-C-DEC.
      *
      *    LOP OFF LEFTMOST BIT OF FIELD (1XXXXXXX)
      *
      *    THIS BIT INDICATES THE MEMBER IS AN ALIAS
      *
           IF WS-C-DEC GREATER THAN 128 OR
              WS-C-DEC EQUAL TO 128
              COMPUTE WS-C-DEC = WS-C-DEC - 128
              MOVE 'YES' TO WS-MS-ALIAS
051898     ELSE
051898        MOVE SPACES TO WS-MS-ALIAS.
      *
      *    LOP OFF 2ND LEFTMOST BIT OF FIELD (X1XXXXXX)
      *
      *    THIS BIT IS THE LEFT BIT OF THE MEMBER'S TTR
      *
           IF WS-C-DEC GREATER THAN 64 OR
              WS-C-DEC EQUAL TO 64
              COMPUTE WS-C-DEC = WS-C-DEC - 64.
      *
      *    LOP OFF 3RD LEFTMOST BIT OF FIELD (XX1XXXXX)
      *
      *    THIS BIT IS THE RIGHT BIT OF THE MEMBER'S TTR
      *
           IF WS-C-DEC GREATER THAN 32 OR
              WS-C-DEC EQUAL TO 32
              COMPUTE WS-C-DEC = WS-C-DEC - 32.
      *
      *    DETERMINE IF THIS MEMBER IS WANTED |
      *
           IF MASK NOT = SPACES
              CALL 'MATCHPAT' USING MASK WS-MS-ENTRY-NAME
              IF (RETURN-CODE = 4 AND MASKOPT = 'I') OR
                 (RETURN-CODE = 0 AND MASKOPT = 'X')
                 IF WS-C-DEC EQUAL ZERO
                    COMPUTE WS-ENTRY-BEG-POS = WS-ENTRY-BEG-POS +
                            WS-MBR-STATIC-BYTES
                 ELSE
                    COMPUTE WS-C-DEC = WS-C-DEC * 2
                    COMPUTE WS-ENTRY-LEN = WS-C-DEC +
                            WS-MBR-STATIC-BYTES
                    COMPUTE WS-ENTRY-BEG-POS = WS-ENTRY-BEG-POS +
                            WS-ENTRY-LEN
                 END-IF
                 COMPUTE WS-BYTES-REM =
                         WS-BYTES-IN-BLOCK - WS-ENTRY-BEG-POS
                 IF WS-BYTES-REM  LESS THAN WS-MBR-STATIC-BYTES OR
                    WS-ENTRY-BEG-POS > WS-BYTES-IN-BLOCK
                     MOVE 1 TO WS-END-OF-DIR-BLOCK-SW
                 END-IF
                 GO TO 0299-PROCESS-DIR-EXIT
              END-IF
           END-IF
      *
      *    WHAT'S LEFT AFTER LOPPING OFF THE THREE LEFTMOST BITS IS
      *    THE NUMBER OF HALFWORDS OF USER DATA IN THE DIRECTORY
      *    ENTRY. IF THIS NUMBER IS ZERO, THERE IS NO USER DATA FOR
      *    THIS MEMBER.
      *
           IF WS-C-DEC EQUAL ZERO
              PERFORM 0300-PROCESS-NO-MEMBER-STATS THRU
                      0399-PROCESS-NO-MEMBER-EXIT
           ELSE
              PERFORM 0400-PROCESS-MEMBER-STATS THRU
                      0499-PROCESS-MEMBER-EXIT.
      *
      *    COMPUTE NUMBER OF BYTES REMAINING IN THE DIRECTORY BLOCK
      *
           COMPUTE WS-BYTES-REM =
                   WS-BYTES-IN-BLOCK - WS-ENTRY-BEG-POS.
      *
      *    IF THE NUMBER OF BYTES REMAINING IS LESS THAN THE NUMBER
      *    OF BYTES USED FOR THE STATIC INFORMATION FOR A MEMBER,
      *    THEN WE DON'T HAVE ANY MORE MEMBERS IN THIS DIRECTORY
      *    BLOCK SO WE SET THE END OF BLOCK SWITCH AND RETURN
      *
           IF WS-BYTES-REM LESS THAN WS-MBR-STATIC-BYTES
              MOVE 1 TO WS-END-OF-DIR-BLOCK-SW
              GO TO 0299-PROCESS-DIR-EXIT.
      *
      *    IF OUR NEXT BEGINNING POSITION (CALCULATED IN 0300-PROCESS...
      *    OR 0400-PROCESS...) IS PAST THE END OF THE DIRECTORY BLOCK
      *    THEN WE DON'T HAVE ANY MORE MEMBERS IN THIS BLOCK SO WE SET
      *    THE END OF BLOCK SWITCH AND RETURN
      *
           IF WS-ENTRY-BEG-POS GREATER THAN WS-BYTES-IN-BLOCK
              MOVE 1 TO WS-END-OF-DIR-BLOCK-SW.
       0299-PROCESS-DIR-EXIT.
           EXIT.

       0300-PROCESS-NO-MEMBER-STATS.
      *
      *    WE'VE ALREADY MOVED THE MEMBER NAME TO THE OUTPUT RECORD SO
      *    ALL WE NEED TO DO HERE IS WRITE THE OUTPUT RECORD, CALCULATE
      *    THE BEGINNING POSITION IN THE BLOCK OF THE NEXT DIR ENTRY,
      *    AND RETURN
      *
052698     IF WS-MS-ALIAS = 'YES'
052698        MOVE SPACES TO WS-MS-USER-INFO
052698        MOVE 'YES' TO WS-MS-ALIAS
052698     ELSE
052698        MOVE SPACES TO WS-MS-USER-INFO.
           WRITE PDS-MEMBER-RECORD FROM WS-MEMBER-STATS.
           MOVE SPACES TO WS-MEMBER-STATS.
           COMPUTE WS-ENTRY-BEG-POS = WS-ENTRY-BEG-POS +
                   WS-MBR-STATIC-BYTES.
       0399-PROCESS-NO-MEMBER-EXIT.
           EXIT.
      *
      * PROCESS A DIRECTORY ENTRY THAT HAS MEMBER STATISTICS
      *
       0400-PROCESS-MEMBER-STATS.
      *
      *    COMPUTE LENGTH OF DIRECTORY ENTRY
      *
      *    THE FIELD WS-C-DEC IS THE NUMBER OF HALFWORDS OF USER
      *    INFORMATION FOR THIS DIRECTORY ENTRY. WE MULTIPLY IT BY 2
      *    TO GET THE NUMBER OF BYTES OF USER INFORMATION FOR THIS
      *    ENTRY
      *
           COMPUTE WS-C-DEC = WS-C-DEC * 2.
           COMPUTE WS-ENTRY-LEN = WS-C-DEC + WS-MBR-STATIC-BYTES.
           MOVE WS-DIR-ENTRIES(WS-ENTRY-BEG-POS:WS-ENTRY-LEN) TO
                WS-DIR-ENTRY.
      *
      *    IF USER INFO DOESN'T SEEM TO BE FOR SOME SORT OF SOURCE
      *    PROGRAM LIBRARY DON'T TRY TO READ THE USER DATA.
      *
           IF WS-C-DEC NOT EQUAL TO 30
              MOVE SPACES TO WS-MS-USER-INFO
              WRITE PDS-MEMBER-RECORD FROM WS-MEMBER-STATS
              MOVE SPACES TO WS-MEMBER-STATS
              COMPUTE WS-ENTRY-BEG-POS = WS-ENTRY-BEG-POS +
                      WS-ENTRY-LEN
              GO TO 0499-PROCESS-MEMBER-EXIT.
      *
      *    EXTRACT ENTRY VERSION NUMBER
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-VV TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-VV-WORK.
      *
      *    EXTRACT ENTRY MAINTENANCE LEVEL
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-MM TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-MM-WORK.

           MOVE WS-VV-MM-WORK TO WS-MS-VV-MM.
      *
      *    EXTRACT CENTURY FROM DATE CREATED FIELD
      *
      *    IF THIS BYTE IS EQUAL TO 1 IT INDICATES THAT
      *    THE YEAR IS IN THE 21ST CENTURY. IF THIS BYTE IS
      *    EQUAL TO 0 THE YEAR IS IN THE 20TH CENTURY
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CR-YR-LEFT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-CENTURY-CREATED.
      *
      *    EXTRACT THE YEAR FROM DATE CREATED FIELD
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CR-YR-RIGHT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           MOVE WS-NBR-DIV TO WS-YEAR-LEFT-WORK.
           MOVE WS-NBR-REM TO WS-YEAR-RIGHT-WORK.
           MOVE WS-YEAR-WORK-PIC9 TO WS-YEAR-4DIGITS.
           IF WS-CENTURY-CREATED EQUAL ZERO
              ADD 1900 TO WS-YEAR-4DIGITS
           ELSE
              ADD 2000 TO WS-YEAR-4DIGITS.
      *
      *    EXTRACT THE DATE FROM DATE CREATED FIELD
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CR-DY-LEFT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           MOVE WS-NBR-DIV TO WS-DAY-LEFT-WORK.
           MOVE WS-NBR-REM TO WS-DAY-RIGHT-WORK.
           MOVE WS-DAY-WORK TO WS-DAY-WORK-ACCUM.
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CR-DY-RIGHT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           ADD  WS-NBR-REM TO WS-DAY-WORK-ACCUM.
      *
      *    CONVERT YYYYDDD TO MM/DD/YYYY
      *
           PERFORM 0500-CONVERT-DATE THRU
                   0599-CONVERT-EXIT.

           MOVE WS-DATE-WORK TO WS-MS-DATE-CREATED.
      *
      *    EXTRACT CENTURY FROM DATE CHANGED FIELD
      *
      *    IF THIS BYTE IS EQUAL TO 1 IT INDICATES THAT
      *    THE YEAR IS IN THE 21ST CENTURY. IF THIS BYTE IS
      *    EQUAL TO 0 THE YEAR IS IN THE 20TH CENTURY
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CH-YR-LEFT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-CENTURY-CHANGED.
      *
      *    EXTRACT THE YEAR THAT THE MEMBER WAS LAST CHANGED
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CH-YR-RIGHT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           MOVE WS-NBR-DIV TO WS-YEAR-LEFT-WORK.
           MOVE WS-NBR-REM TO WS-YEAR-RIGHT-WORK.
           MOVE WS-YEAR-WORK-PIC9 TO WS-YEAR-4DIGITS.
           IF WS-CENTURY-CHANGED EQUAL ZERO
              ADD 1900 TO WS-YEAR-4DIGITS
           ELSE
              ADD 2000 TO WS-YEAR-4DIGITS.
      *
      *    EXTRACT THE DAY THAT THE MEMBER WAS LAST CHANGED
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CH-DY-LEFT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           MOVE WS-NBR-DIV TO WS-DAY-LEFT-WORK.
           MOVE WS-NBR-REM TO WS-DAY-RIGHT-WORK.
           MOVE WS-DAY-WORK TO WS-DAY-WORK-ACCUM.
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-CH-DY-RIGHT TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           ADD  WS-NBR-REM TO WS-DAY-WORK-ACCUM.
      *
      *    CONVERT YYYYDDD TO MM/DD/YYYY
      *
           PERFORM 0500-CONVERT-DATE THRU
                   0599-CONVERT-EXIT.

           MOVE WS-DATE-WORK TO WS-MS-DATE-CHANGED.
      *
      *    EXTRACT HOUR PORTION OF TIME FIELD
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-HR TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           MOVE WS-NBR-DIV TO WS-HR-LEFT-WORK.
           MOVE WS-NBR-REM TO WS-HR-RIGHT-WORK.
      *
      *    EXTRACT MINUTE PORTION OF TIME FIELD
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-MIN TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           MOVE WS-NBR-DIV TO WS-MIN-LEFT-WORK.
           MOVE WS-NBR-REM TO WS-MIN-RIGHT-WORK.
      *
      *    EXTRACT SECONDS PORTION OF TIME FIELD
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-SEC-MOD TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-NBR-DEC.
           DIVIDE WS-NBR-DEC BY 16 GIVING WS-NBR-DIV
                  REMAINDER WS-NBR-REM.
           MOVE WS-NBR-DIV TO WS-SEC-LEFT-WORK.
           MOVE WS-NBR-REM TO WS-SEC-RIGHT-WORK.

           MOVE WS-TIME-WORK TO WS-MS-TIME.
      *
      *    EXTRACT CURRENT SIZE OF ENTRY
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-SIZEL TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-SIZE-WORK.
           COMPUTE WS-SIZE-WORK = WS-SIZE-WORK * 256.
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-SIZER TO WS-1BYTE-RIGHT.
           ADD  WS-1BYTE-COMP TO WS-SIZE-WORK.

           MOVE WS-SIZE-WORK TO WS-MS-SIZE.
      *
      *    EXTRACT INITIAL SIZE OF ENTRY
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-INITL TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-INIT-WORK.
           COMPUTE WS-INIT-WORK = WS-INIT-WORK * 256.
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-INITR TO WS-1BYTE-RIGHT.
           ADD  WS-1BYTE-COMP TO WS-INIT-WORK.

           MOVE WS-INIT-WORK TO WS-MS-INIT.
      *
      *    EXTRACT MODIFICATION LEVEL
      *
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-MODL TO WS-1BYTE-RIGHT.
           MOVE WS-1BYTE-COMP TO WS-MOD-WORK.
           COMPUTE WS-MOD-WORK = WS-MOD-WORK * 256.
           MOVE ZEROES TO WS-1BYTE-COMP.
           MOVE WS-MODR TO WS-1BYTE-RIGHT.
           ADD  WS-1BYTE-COMP TO WS-MOD-WORK.

           MOVE WS-MOD-WORK TO WS-MS-MOD.
      *
      *    MOVE USER ID OF LAST CHANGE TO OUTPUT RECORD
      *
           MOVE WS-USER TO WS-MS-USER.
      *
      *    COMPUTE NEXT DIR ENTRY POSITION WITHIN DIRECTORY BLOCK
      *
           COMPUTE WS-ENTRY-BEG-POS = WS-ENTRY-BEG-POS +
                   WS-ENTRY-LEN.

           WRITE PDS-MEMBER-RECORD FROM WS-MEMBER-STATS.
           MOVE SPACES TO WS-MEMBER-STATS.
       0499-PROCESS-MEMBER-EXIT.
           EXIT.
      *
      * CONVERT DATE FROM YYYYDDD TO MM/DD/YYYY
      *
       0500-CONVERT-DATE.
      *
      *    DETERMINE IF THE YEAR IS A LEAP YEAR
      *
           MOVE 28 TO WS-FEBRUARY-ENTRY.
           DIVIDE WS-YEAR-4DIGITS BY 4 GIVING WS-LEAPYEAR-DIV
                  REMAINDER WS-LEAPYEAR-REM.
           COMPUTE WS-LEAPYEAR-DIV = WS-LEAPYEAR-DIV * 4.
           IF WS-LEAPYEAR-DIV NOT EQUAL WS-YEAR-4DIGITS
              GO TO 0510-CONVERT-DATE.
           DIVIDE WS-YEAR-4DIGITS BY 100 GIVING WS-LEAPYEAR-DIV
                  REMAINDER WS-LEAPYEAR-REM.
           COMPUTE WS-LEAPYEAR-DIV = WS-LEAPYEAR-DIV * 100.
           IF WS-LEAPYEAR-DIV NOT EQUAL WS-YEAR-4DIGITS
              MOVE 29 TO WS-FEBRUARY-ENTRY
              GO TO 0510-CONVERT-DATE.
           DIVIDE WS-YEAR-4DIGITS BY 400 GIVING WS-LEAPYEAR-DIV
                  REMAINDER WS-LEAPYEAR-REM.
           COMPUTE WS-LEAPYEAR-DIV = WS-LEAPYEAR-DIV * 400.
           IF WS-LEAPYEAR-DIV = WS-YEAR-4DIGITS
              MOVE 29 TO WS-FEBRUARY-ENTRY.
      *
      *    DETERMINE MM/DD FROM YYY
      *
       0510-CONVERT-DATE.
           IF WS-DAY-WORK-ACCUM GREATER THAN 366
              MOVE ZEROES TO WS-MMDDYY-YEAR
                             WS-MMDDYY-DAY
                             WS-MMDDYY-MONTH
              GO TO 0599-CONVERT-EXIT.
           MOVE 1 TO WS-MONTH-SUB.
           MOVE WS-DAY-WORK-ACCUM TO WS-DAYS-LEFT.
           IF WS-DAYS-LEFT LESS THAN 32
              NEXT SENTENCE
           ELSE
              PERFORM UNTIL WS-DAYS-LEFT IS LESS THAN
                            WS-MONTH-ELEMENT(WS-MONTH-SUB) OR
                            WS-DAYS-LEFT IS EQUAL TO
                            WS-MONTH-ELEMENT(WS-MONTH-SUB)
                 SUBTRACT WS-MONTH-ELEMENT(WS-MONTH-SUB)
                     FROM WS-DAYS-LEFT GIVING WS-DAYS-LEFT
                 ADD 1 TO WS-MONTH-SUB
              END-PERFORM.
           MOVE WS-MONTH-SUB TO WS-MMDDYY-MONTH.
           MOVE WS-DAYS-LEFT TO WS-MMDDYY-DAY.
           MOVE WS-YEAR-4DIGITS TO WS-MMDDYY-YEAR.
       0599-CONVERT-EXIT.
           EXIT.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. SETPTR.
       DATA DIVISION.
       LINKAGE SECTION.
       01  VAR-DATA                      PIC X(250).
       01  VAR-PTR                       POINTER.
       PROCEDURE DIVISION
                 USING VAR-DATA
                       VAR-PTR.
           SET VAR-PTR TO ADDRESS OF VAR-DATA.
           GOBACK.
       END PROGRAM SETPTR.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. MATCHPAT.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  NAME-IN                       PIC X(8).
       01  NAME-INR REDEFINES NAME-IN.
           03  NAME-P                    PIC X
               OCCURS 8 INDEXED BY NAME-I.
       01  NAME-END                      PIC S9(4) COMP.

       01  MATCH-PAT                     PIC X(8).
       01  MATCH-PATR REDEFINES MATCH-PAT.
           03  MATCH-P                   PIC X
               OCCURS 8 INDEXED BY MATCH-I.
       01  MATCH-END                     PIC S9(4) COMP.

       01  SWITCHES.
           03  DROP-OUT                  PIC S9(4) COMP.
           03  MATCHED                   PIC S9(4) COMP.

       01  PATTERN-STACK.
           03  PS-NUM                    PIC S9(4) COMP.
           03  PS OCCURS 10 INDEXED BY PS-I.
               05  PS-P-POS              PIC S9(4) COMP.
               05  PS-N-POS              PIC S9(4) COMP.
       LINKAGE SECTION.
       01  MATCH-PAT-P                   PIC X(8).
       01  NAME-IN-P                     PIC X(8).
       PROCEDURE DIVISION USING MATCH-PAT-P NAME-IN-P.
       100-MAIN SECTION.
           MOVE NAME-IN-P TO NAME-IN.
           MOVE MATCH-PAT-P TO MATCH-PAT.

       110-MAIN.
      *
      *    ESTABLISH END OF NAME AND MATCH STRINGS
      *
           MOVE 0 TO NAME-END
           INSPECT NAME-IN TALLYING NAME-END FOR CHARACTERS
                   BEFORE INITIAL SPACE.
           ADD 1 TO NAME-END.

           MOVE 0 TO MATCH-END
           INSPECT MATCH-PAT TALLYING MATCH-END FOR CHARACTERS
                   BEFORE INITIAL SPACE.
           ADD 1 TO MATCH-END.
      *
      *    INITIALIZE STACK
      *
           MOVE 0 TO PS-NUM.
           MOVE 0 TO MATCHED.
           SET MATCH-I TO 1.
           SET NAME-I TO 1.

           PERFORM WITH TEST AFTER
                   UNTIL PS-NUM < 1 OR MATCHED = 1
             IF PS-NUM > 0
                SET MATCH-I TO PS-P-POS (PS-NUM)
                ADD 1 TO PS-N-POS (PS-NUM)
                SET NAME-I TO PS-N-POS (PS-NUM)
             END-IF

             MOVE 0 TO DROP-OUT
             PERFORM UNTIL NAME-I = NAME-END
                      OR   MATCH-I = MATCH-END
                      OR   DROP-OUT = 1
               PERFORM 200-CHECK-MATCH
             END-PERFORM
      *
      *      DETERMINE IF SUCCESSFULLY MATCHED
      *
             EVALUATE TRUE
               WHEN DROP-OUT = 1 AND PS-NUM > 0
                  CONTINUE
               WHEN NAME-I = NAME-END
                  IF MATCH-I = MATCH-END OR
                     (MATCH-I = MATCH-END - 1 AND
                      MATCH-P (MATCH-I) = '*')
                      MOVE 1 TO MATCHED
                  ELSE
                      SUBTRACT 1 FROM PS-NUM
                  END-IF
               WHEN MATCH-I = MATCH-END
                  IF MATCH-P (MATCH-END - 1) = '*'
                      MOVE 1 TO MATCHED
                  END-IF
               WHEN OTHER
                  SUBTRACT 1 FROM PS-NUM
             END-EVALUATE
           END-PERFORM.

           IF MATCHED = 1
              MOVE 0 TO RETURN-CODE
           ELSE
              MOVE 4 TO RETURN-CODE.

           GOBACK.

       200-CHECK-MATCH SECTION.
       210-CHECK-MATCH.
      *
      *    PLACE * ON STACK
      *
           IF MATCH-P (MATCH-I) = '*'
              ADD 1 TO PS-NUM
              SET PS-N-POS (PS-NUM) TO NAME-I
              SET PS-P-POS (PS-NUM) TO MATCH-I
              ADD 1 TO  PS-P-POS (PS-NUM)
      *
      *       IGNORE CONSECUTIVE *'S
      *
              PERFORM UNTIL MATCH-I = MATCH-END OR
                            MATCH-P (MATCH-I) NOT = '*'
                SET MATCH-I UP BY 1
              END-PERFORM
              GO TO 299-EXIT
           END-IF.
      *
      *    INCREMENT BOTH INDEXES IF ANY CHAR OK
      *
           IF MATCH-P (MATCH-I) = '%'
              SET MATCH-I UP BY 1
              SET NAME-I UP BY 1
              GO TO 299-EXIT
           END-IF.
      *
      *    CHECK FOR NUMERIC
      *
           IF MATCH-P (MATCH-I) = '.'
              IF NAME-P (NAME-I) NUMERIC
                 SET MATCH-I UP BY 1
                 SET NAME-I UP BY 1
                 GO TO 299-EXIT
              ELSE
                 MOVE 1 TO DROP-OUT
                 GO TO 299-EXIT
              END-IF
           END-IF
      *
      *    CHECK FOR ALPHABETIC
      *
           IF MATCH-P (MATCH-I) = '!'
              IF NAME-P (NAME-I) ALPHABETIC
                 SET MATCH-I UP BY 1
                 SET NAME-I UP BY 1
                 GO TO 299-EXIT
              ELSE
                 MOVE 1 TO DROP-OUT
                 GO TO 299-EXIT
              END-IF
           END-IF

           IF NAME-P (NAME-I) = MATCH-P (MATCH-I)
              SET MATCH-I UP BY 1
              SET NAME-I UP BY 1
              GO TO 299-EXIT
           ELSE
              MOVE 1 TO DROP-OUT
              GO TO 299-EXIT
           END-IF.

       299-EXIT.
           EXIT.
       END PROGRAM MATCHPAT.
       END PROGRAM READDIR.
