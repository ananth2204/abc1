{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011747000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE320.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE320.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x03'", "DS1TRBAL": "b'\\xb5J'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02o\\x00\\x06\\x02o\\x00\\n\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"FASTDSS": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//JGSTDSS   JOB  (9542,Q301),'JOHN GRADY SULLIVAN',CLASS=Q,MSGCLASS=T\n/*JOBPARM   LINES=15,TIME=10\n//*JOBPARM   SYSAFF=(JGPT)\n//*ROUTE     XEQ   JGS2\n//* JOBCAT    DD  DISP=SHR,DSN=CATALOG.VSYSGEN\n//*    *****  SYSJS.PDS.ASM(DSSEXITS)   *****\n//S1  EXEC  ASMHCL,                OR ASMFCL = IFOX00 (XF) ASSEMBLER\n//       PARM.ASM='NODECK,OBJECT,SYSPARM(JGS)',\n//       REGION.ASM=500K,\n//       COND.LKED=(04,LT),\n//       PARM.LKED='LET,LIST,MAP,NCAL,REFR,RENT,REUS',\n//       MAC1='SYS1.AMODGEN'\n//SYSLIB   DD  UNIT=3390,VOL=SER=INDIAN          SYS1.MACLIB\n//         DD  UNIT=3380,VOL=SER=NAVAJO          SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=SYS1.SAMPLIB,        DF/DSS PRIVATE MACROS\n//             UNIT=3390,VOL=SER=INDIAN\n//* STEPLIB  DD  DISP=SHR,DSN=SYSJS.ASMHV2.DUDALOAD\n//SYSIN    DD  *\nFASTDSS  TITLE 'JOHN GRADY SULLIVAN - DRIVER FOR DF/DSS V2.5.0'\n*\n*  JOHN GRADY SULLIVAN - (SHARE CODE LLU)                       * JGS *\n*   MANAGER, TECHNICAL SERVICES DEPARTMENT / B737               * JGS *\n*   LOMA LINDA UNIVERSITY MEDICAL CENTER                        * JGS *\n*   P.O. BOX 2000                                               * JGS *\n*   11234 ANDERSON STREET                                       * JGS *\n*   LOMA LINDA,                                                 * JGS *\n*   CALIFORNIA  92354                                           * JGS *\n*   714-824-4317 X5116                                          * JGS *\n*\n*  JAMES R. LEWIS - (SHARE CODE LAS - WAS KS - KAISER STEEL)    **JRL**\n*   MANAGER, OPERATIONS AND SYSTEMS PROGRAMMING                 **JRL**\n*   SENIOR SYSTEMS PROGRAMMER                                   **JRL**\n*   LOCKHEED AIRCRAFT SERVICE COMPANY                           **JRL**\n*   P.O. BOX 33                                                 **JRL**\n*   ONTARIO,                                                    **JRL**\n*   CALIFORNIA  91761                                           **JRL**\n*   714-988-2259                                                **JRL**\n*\n*  ARNOLD CASINGHINO - CONNECTICUT BANK AND TRUST COMPANY (CBT) * JGS *\n*  MVS MODIFICATIONS TAPE FILE 320 - (11/81) (8/82) (03/84)     * JGS *\n*                                    (04/84) (04/89-V23.57)     * JGS *\n*                                    (07/90-V25.63)             * JGS *\n*\n*  STEVE HAGGERTY - LOS ANGELES MVS USER'S GROUP    (07/84)     * JGS *\n*  MERV HEMP      - LOS ANGELES MVS USER'S GROUP    (06/88)     * JGS *\n*\n*  IF YOU USE THIS EXIT, LET ME KNOW AND I WILL SEND YOU UPDATES* JGS *\n*   STEPHANIE WINKLER @ KAISER FOUNDATION HOSPITAL 415-946-3407 * JGS *\n*   JOHN ROBERT @ HUB DISTRIBUTING            714-988-6431 X770 * JGS *\n*\n*   EDWARD THE              (V23.56 89/02/10)      805-961-4633 * JGS *\n*   U.C. SANTA BARBARA, 1205 E. GIRVETZ HALL,                   * JGS *\n*   SANTA BARBARA, CALIFORNIA 93106                             * JGS *\n*\n*   GLEN KUHN  509-376-8355 (V23.57 89/04/19)                   * JGS *\n*   WESTINGHOUSE HANFORD COMPANY                                * JGS *\n*   C/O BCSR - ATTN: GLEN KUHN  A1-05                           * JGS *\n*   FEDERAL BUILDING                                            * JGS *\n*   825 JADWIN ACENUE                                           * JGS *\n*   RICHLAND, WASHINGTON 99352                                  * JGS *\n*\n*  HISTORY :\n*        WRITTEN BY JOHN GRADY SULLIVAN, JUNE 1980,             * JGS *\n*         TO SUPPORT IBM'S PROGRAM PRODUCT DRWDASDR (5740-UT1)  * JGS *\n*         81/06/15 TO SUPPORT DF/DSS V1    ADRDSSU  (5740-UT3)  * JGS *\n*         88/06/02 TO SUPPORT DF/DSS V2.3  ADRDSSU  (5665-327)  * JGS *\n*         DF/DSS V2.5.0 (HAE2502) 90/04/13 ADRDSSU  (5665-327)  * JGS *\n*        FASTDSS (ADRDSSU V1 R2.0) IS 25 TRACKS OF 3350.        * JGS *\n*        FASTDSS (ADRDSSU V1 R2.1) IS 11 TRACKS OF 3380.        * JGS *\n*        FASTDSS (ADRDSSU V2 R3.0) IS 25 TRACKS OF 3380.        * JGS *\n*        FASTDSS (ADRDSSU V2 R4.0) IS 32 TRACKS OF 3380.        * JGS *\n*        FASTDSS (ADRDSSU V2.5.0) IS 36 TRACKS OF 3380.         * JGS *\n*\n*        MODIFIED BY J.R.LEWIS 12/02/80 - SEE **JRL**           **JRL**\n*         TO ADD NON-ZERO ABEND AND                             **JRL**\n*         SELECTIVE ENQ (FOR STORAGE VOLUMES)                   **JRL**\n*\n*        MODIFIED BY KSC SYSTEMS SUPPORT 06/15/81               **JRL**\n*         TO SUPPORT DF/DSS (ADRDSSU (5740-UT3))                **JRL**\n*         RATHER THAN DRWDASDR (5740-UT1).                      **JRL**\n*\n*        MODIFIED BY JGS - 02/20/82 FOLLOWING ENHANCEMENTS :    * JGS *\n*        JGS - ADDED ASSEMBLER SYSPARM SUPPORT IN ORDER TO      * JGS *\n*         SIMPLIFY SHARING OF IMPROVEMENTS TO THESE EXITS.      * JGS *\n*         VALID OPTIONS ARE SYSPARM(JGS) OR SYSPARM(JRL).       * JGS *\n*         (SEE BELOW FOR SYSPARM SUPPORTED DIFFERENCES).        * JGS *\n*         AUTHORIZATION ROUTINE SUPPORT FOR THE 'VOLUME'        * JGS *\n*           ENTRIES WHERE THE FORMAT 1 DSCB IS NOT PASSED TO    * JGS *\n*           OUR EXIT.                                           * JGS *\n*\n*        MODIFIED BY JGS - 07/12/82 FOLLOWING ENHANCEMENTS :    * JGS *\n*        JGS - ADDED TESTAUTH TO SKIP AUTH SVC'S IF UN-NEEDED.  * JGS *\n*\n*        MODIFIED BY JGS - 08/16/82 FOLLOWING ENHANCEMENTS :    * JGS *\n*        JGS - ADDED CODE TO UTILIZE MVS/SP 1.2+ (1.3, 2.XA)'S  * JGS *\n*              UCB LOOKUP ROUTINE (IF AVAILABLE).  (DOWNWARD    * JGS *\n*              COMPATIBLE WITH BASE MVS 3.8 AND SHOULD BE       * JGS *\n*              UPWARD COMPATIBLE WITH MVS/XA).                  * JGS *\n*\n*        MODIFIED BY JGS - 01/11/84 FOLLOWING ENHANCEMENTS :    * JGS *\n*        JGS - SUPPORT DF/DSS RELEASE 2.0 (HAE1400).            * JGS *\n*              PARAMETER LISTS PASSED TO EXITS WERE CHANGED     * JGS *\n*              (WILL NOT FUNCTION WITH PRIOR RELEASES).         * JGS *\n*              ENHANCED AUTHORIZATION ROUTINE TO ISSUE MLWTO    * JGS *\n*              WITH ADDITIONAL INFORMATION REGARDING THE        * JGS *\n*              CURRENT ACTIVITY, AND TO ALLOW ADDITIONAL        * JGS *\n*              REPLIES FOR USABILITY AND DEBUGGING.             * JGS *\n*              IF YOU REPLY WITH A NUMBER 0 - 9 TO THE          * JGS *\n*              AUTHORIZATION PROMPT, THE REPLY WILL BE          * JGS *\n*              MULTIPLIED BY 4 AND USED AS THE RETURN CODE      * JGS *\n*              FROM THE EXIT.                                   * JGS *\n*              RENUMBERED SOURCE (SORRY).                       * JGS *\n*\n*        MODIFIED BY JGS - 04/19/84 FOLLOWING ENHANCEMENTS :    * JGS *\n*        JGS - SUPPORT DF/DSS RELEASE 2.1 (HAE1500).            * JGS *\n*              USE THE DF/DSS R2.X MACRO ADRUPB  TO MAP THE     * JGS *\n*              PARAMETER LIST PASSED TO THE AUTHORIZATION EXIT. * JGS *\n*              USE THE DF/DSS R2.X MACRO ADRUNQB TO MAP THE     * JGS *\n*              PARAMETER LIST PASSED TO THE VOLUME ENQUE EXIT.  * JGS *\n*              (MACROS ARE IN SYS1.SAMPLIB, NOT SYS1.MACLIB).   * JGS *\n*              ADDED AN IDENTIFY OF MODULE/CSECT ADRRELVL       * JGS *\n*              (WXTRN FOR R2.0 COMPATABILITY) WHICH CONTAINS    * JGS *\n*              DF/DSS VERSION - RELEASE - MODIFICATION LEVEL.   * JGS *\n*              ADDED A TEST FOR MVS IN THE UCB SCAN ROUTINE     * JGS *\n*              FOR VS/1 USERS OF DF/DSS WITH A SHORTER CVT.     * JGS *\n*              ADDED A CHECK FOR SPECIAL JOBNAME/STEPNAME       * JGS *\n*              COMBINATION AND ALWAYS ISSUE PASSWORD PROMPT     * JGS *\n*              IF PRESENT (JGSTDSS/TESTDSS).                    * JGS *\n*\n*        MODIFIED BY JGS - 06/22/84 FOLLOWING ENHANCEMENTS :    * JGS *\n*        JGS - REMOVED REFERENCE TO CVTILK2 (CVT+X'028')        * JGS *\n*              (NAMED CVTLLTRM IN MVS/XA CVT) TO AVOID          * JGS *\n*              ASSEMBLY ERROR - UNDEFINED SYMBOL (IN THE        * JGS *\n*              CODE PATH FOR PRE SP 1.3 UCB LOOK-UP).           * JGS *\n*\n*        MODIFIED BY JGS - 88/06/02 FOLLOWING ENHANCEMENTS :    * JGS *\n*         SUPPORT DF/DSS V2.3 ADRDSSU (5665-327) (HAE2302).     * JGS *\n*         AMODE=31 AND SPLEVEL 2 (CURRENT DEFAULT - MVS/XA 2.2) * JGS *\n*         IMPROVED AUTHORIZATION CHECKING IN MVS/XA CAUSED      * JGS *\n*         ABEND 306-0C WHILE TESTING FROM AN AUTHORIZED LIBRARY,* JGS *\n*         SO CODE WAS ADDED TO TURN ON THE BITS                 * JGS *\n*         CDSYSLIB AND CDAUTH IN THE CDE.                       * JGS *\n*\n*        MODIFIED BY JGS - 89/05/30 FOLLOWING ENHANCEMENTS :    * JGS *\n*         SUPPORT DF/DSS V2.4 ADRDSSU (5665-327) (HAE2402).     * JGS *\n*         ADD VERSION-RELEASE-MODIFICATION LEVEL INFORMATION    * JGS *\n*         TO MESSAGE ADR992I.                                   * JGS *\n*\n         EJECT ,\n*\n*        SYSPARM SUPPORTED DIFFERENCES ARE AS FOLLOWS :         * JGS *\n*        MAGIC SVC REQUIREMENTS AND SVC NUMBER (HANDY FOR       * JGS *\n*         TESTING FROM AN UNAUTHORIZED DATASET).                * JGS *\n*        JGS - RETURN CODE AS PASSED FROM DF/DSS (NO ABEND)     * JGS *\n*        JGS - ALWAYS USE SHORT DURATION ENQUE                  * JGS *\n*        JRL - ABEND IF DF/DSS GIVES NON-ZERO RETURN CODE       **JRL**\n*        JRL - USE LONG DURATION ENQUE FOR STORAGE VOLUMES,     **JRL**\n*              AND SHORT DURATION ENQUE IF NOT STORAGE          **JRL**\n*\n*        ANY OTHER SYSPARM WILL GET :                           * JGS *\n*         MNOTE 4,'SYSPARM(&SYSPARM) NOT SUPPORTED'             * JGS *\n*         NO MAGIC SVC                                          * JGS *\n*         RETURN CODE AS ISSUED BY DF/DSS (NO ABEND)            * JGS *\n*         LONG VTOC ENQUE SUPPORT                               * JGS *\n*         OPERATOR PROMPT FOR U OR T IF THERE ARE PASSWORD      * JGS *\n*          PROTECTED DATASETS ON THE OUTPUT (TARGET) VOLUME     * JGS *\n         EJECT ,\n*  FUNCTIONS :\n*    1. INVOKE IBM'S DF/DSS (FAST DUMP/RESTORE PROGRAM) UTILITY\n*         YET PROVIDING OUR USER EXITS TO MAKE LIFE EASIER.\n*         KEEP THE VANILLA IBM PRODUCT AROUND IN CASE ANYONE\n*         SHOULD TRY TO RUN IT.  WE ALSO AVOID MAINTENANCE (SMP)\n*         INTERSECTION PROBLEMS.  AFTER DOING MAINTENANCE, JUST BE\n*         SURE TO REASSEMBLE AND RELINK THIS MODULE.\n*    2. ADRUENQ - USER VTOC ENQUE ROUTINE.\n*         SUPPRESS THE SYSVTOC ENQUE ON THE FROM (SOURCE) VOLUME.\n*    3. ADRUPSWD - USER AUTHORIZATION DECISION ROUTINE.\n*         SUPPRESS PASSWORD CHECKING ON THE FROM (SOURCE) VOLUME.\n*         PROMPT OPERATOR TO ALLOW CONTINUATION WITHOUT PASSWORD\n*           CHECKING ON THE TO (TARGET) VOLUME.\n*         THIS ROUTINE IS ALSO APPLICABLE TO VSAM DATASETS.     * JGS *\n*           WITH THESE EXITS, YOU WILL NO LONGER NEED VSAM      * JGS *\n*           JOBCAT OR STEPCAT DD CARDS IN YOUR JCL IN ORDER TO  * JGS *\n*           PERFORM OPERATIONS AGAINST PACKS WITH VSAM ON THEM. * JGS *\n*         I DON'T KNOW ABOUT EFFECTS ON RACF OR ACF-2.          * JGS *\n*\n*  INPUT :\n*    1. REGULAR OS JCL PARM FIELD AS EXPECTED BY DF/DSS.\n*        PARM FIELD IS PASSED TO DF/DSS WITHOUT ANY EXAMINATION.\n*          DF/DSS SEEMS TO IGNORE INVALID PARM OPTIONS.\n*\n*  OUTPUT :\n*    1. NONE - OTHER THAN THAT PROVIDED BY DF/DSS.\n*\n*  NOTE : DF/DSS (AND THESE EXITS) MUST RUN AUTHORIZED.         * JGS *\n*        SINCE THEY ARE LINK EDITED REENTRANT, PROGRAM FETCH    * JGS *\n*        WILL LOAD THEM INTO STORAGE SUBPOOL 252 (KEY ZERO),    * JGS *\n*        SO THEY BETTER BE KEPT REENTRANT.                      * JGS *\n*\n         AIF   ('&SYSPARM' EQ 'JGS').SPARMOK                    * JGS *\n         AIF   ('&SYSPARM' EQ 'JRL').SPARMOK                    * JGS *\n         MNOTE 4,'SYSPARM(&SYSPARM.) NOT SUPPORTED'             * JGS *\n.SPARMOK ANOP                                                   * JGS *\n         EJECT\nFASTDSS  CSECT\n         SPACE 1\nFASTDSS  AMODE 31                                               * JGS *\nFASTDSS  RMODE ANY                                              * JGS *\n         SPACE 1\n*\n*  JOHN GRADY SULLIVAN - JUNE, 1980\n*\n*  FUNCTION :\n*         FRONT END / DRIVER FOR DF/DSS (PGM=ADRDSSU)\n*\n*  INPUT :\n*    REGISTER 1 POINTS TO A ONE WORD PARAMETER LIST :\n*      PARAMETER 1 -> OS PARM FIELD IN JCL\n*\n*  OUTPUT :\n*    R15  :        THE RETURN CODE FROM DF/DSS (PGM=ADRDSSU)    * JGS *\n*  OUTPUT (OPTIONAL WITH SYSPARM 'JRL') :\n*    R15  = 0  =>  THE RETURN CODE FROM DF/DSS (PGM=ADRDSSU)    **JRL**\n*\n*    R15 \u00ac= 0  =>  USER '99' ABEND WILL BE ISSUED               **JRL**\n*\n*                                                               * JGS *\n*  REGISTER USAGE :\n*        R0    SYSTEM\n*        R1    SYSTEM - OS PARM FIELD.\n*        R2    WORK\n*        R3    WORK\n*        R4    WORK\n*        R5    WORK\n*        R6    UNUSED\n*        R7    UNUSED\n*        R8    UNUSED\n*        R9    UNUSED\n*        R10   UNUSED\n*        R11   BASE REGISTER FOR WORK AREA TO MAINTAIN REENTRANCY.\n*        R12   BASE REGISTER FOR PROGRAM\n*        R13   SYSTEM - SAVE AREA CHAIN\n*        R14   RETURN ADDRESS\n*        R15   WORK, SYSTEM, AND RETURN CODE\n*\n         EJECT\n         GBLC  &SYSSPLV\n&SYSSPLV SETC  '1'                 SET TO ENSURE MVS/SP VER. 1  * JGS *\n         MNOTE *,'*        THE VALUE OF SPLEVEL IS NOW 1'       * JGS *\n* * *    SPLEVEL SET=1             SEE MVS/SP 1.3 UZ56757-8307  * JGS *\n         SPACE 2\n         SPLEVEL SET               RESET AS APPROPRIATE (2 OR 3)* JGS *\n         SPACE 2\n         SAVE (14,12),,FASTDSS__JOHN_GRADY_SULLIVAN_&SYSDATE.\n         SPACE 1\n         LA    12,0(,15)           CLEAR HIGH ORDER BIT/BYTE\n         USING FASTDSS,12          ESTABLISH ADDRESSABILITY\n         SPACE 1\n         GETMAIN R,LV=72           GETMAIN A NEW SAVE AREA\n         ST    13,4(1)             BACKCHAIN TO PREVIOUS SAVE AREA\n         ST    1,8(13)             FORWARD CHAIN FROMPREVIOUS SAVE AREA\n         LR    13,1                MAKE OUR SAVE AREA CURRENT\n         SPACE 2\nR0       EQU   0                   REGISTER EQUATES\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n*  TO KEEP OUR PROGRAM REENTRANT, ONE MUST OBTAIN AND\n*   INITIALIZE A WORK AREA EXTERNAL TO OUR PROGRAM\n*   FOR THINGS WHICH MAY BE MODIFIED DURING EXECUTION\n*   (SUCH AS SVC PARAMETER LISTS, RETURN CODE SAVE AREAS, ETC.).\n         SPACE 1\n         GETMAIN   R,LV=FASTRLEN   GETMAIN FOR MODIFIABLE AREA\n         SPACE 1\n*  SET UP TO INITIALIZE OUR NEWLY FOUND WORK AREA\n         LR    R2,R1               TARGET ADDRESS\n         LA    R3,FASTRLEN         TARGET LENGTH\n         LA    R4,FASTRSTR         SOURCE ADDRESS\n         LR    R5,R3               SOURCE LENGTH\n         SPACE 1\n         MVCL  R2,R4               INITIALIZE MODIFIABLE AREA\n         SPACE 1\n         LA    R11,0(,R1)          SAVE THE ADDRESS TO OUR AREA\n         USING FASTRSTR,R11        ESTABLISH ADDRESSABILITY\n         SPACE 3\n*        CHECK AND/OR GET AUTHORIZATION                         * JGS *\n         SPACE 1\n         TESTAUTH FCTN=1           TEST CURRENT AUTHORIZATION   * JGS *\n         LTR   R15,R15             ARE WE ALREADY AUTHORIZED ?  * JGS *\n         BZ    FASTAUTH            R15 = 0 => YES, SO BRANCH    * JGS *\n         SPACE 2                                                * JGS *\n         OI    AUTHFLAG,X'01'      INDICATE AUTH SVC USED       * JGS *\n         MNOTE 0,'MAGIC SVC ISSUED HERE (MAYBE). '              * JGS *\n         AIF   ('&SYSPARM' NE 'JGS').TRYJRL1                    * JGS *\n         L     R1,=C'AUTH'         INDICATE AUTH ON             * JGS *\n         SVC   211                 GET AUTHORIZED               * JGS *\n         AGO   .ENDMOD1                                         * JGS *\n.TRYJRL1 AIF   ('&SYSPARM' NE 'JRL').ENDMOD1                    * JGS *\n         LA    R1,=C'AUTH'                                      **JRL**\n         SVC   237                 GET AUTHORIZED WHILE TESTING **JRL**\n.ENDMOD1 ANOP                                                   * JGS *\n         SPACE 1\n         L     R2,CVTPTR           POINT TO THE CVT             * JGS *\n         USING CVT,R2              ADDRESSABILITY               * JGS *\n         L     R2,CVTTCBP          R2 -> A(NEXT & CURRENT TCBS) * JGS *\n         L     R2,4(,R2)           R2 -> OUR TCB                * JGS *\n         DROP  R2                  UNADDRESSABILITY             * JGS *\n         USING TCB,R2              ADDRESSABILITY               * JGS *\n         L     R2,TCBJPQ           R2 -> JPQ (JOB PACK QUEUE)CDE* JGS *\n         DROP  R2                  UNADDRESSABILITY             * JGS *\n         USING CDENTRY,R2          ADDRESSABILITY               * JGS *\n         CLC   CDNAME(8),=CL8'FASTDSS '    CDE FOR OUR MODULE ? * JGS *\n         BNE   FASTNCDA            NO, BRANCH, NOT OUR MODULE   * JGS *\n         SPACE 1\n         MODESET KEY=ZERO          CHANGE PSW KEY AS NEEDED     * JGS *\n         SPACE 1\n         OI    CDATTR2,CDSYSLIB+CDAUTH  IND PGM & LIB ARE AUTH  * JGS *\n         DROP  R2                  UNADDRESSABILITY             * JGS *\n         SPACE 1\n         MODESET KEY=NZERO         CHANGE PSW KEY AS NEEDED     * JGS *\n         SPACE 1                                                * JGS *\nFASTNCDA DS    0H                  SKIP CHANGE TO CDAUTH        * JGS *\n         SPACE 1                                                * JGS *\nFASTAUTH DS    0H                  AUTHORIZATION IS NOW OK      * JGS *\n         EJECT\n*  ISSUE IDENTIFY SVCS TO CREATE ENTRY POINTS WITH OUR VERSIONS\n*   OF ADRUENQ AND ADRUPSWD CONTAINING OUR USER EXITS.\n*   THIS WILL CAUSE DF/DSS TO USE OUR ROUTINES RATHER THAN\n*   LOAD THE REAL ONES FROM LINKLIB AT EXECUTION.\n         SPACE 1\n*  THE ENTRY POINTS CREATED STARTING WITH JGS..... ARE TO MAKE IT\n*   CLEAR IN A DUMP THAT THE JGS SUPPLIED ENTRY POINTS ARE PRESENT.\n*   THEY WILL ALSO STAND OUT IN A LOAD MODULE MAP.\n*   THESE ARE ACTUALLY RESOLVED AT LINK EDIT TIME, NOT AT EXECUTION.\n         SPACE 1\n         BALR  R10,0               ADDRESS FOR DEBUGGING\n         LA    R2,SUBRTBLE         GET ADDRESS OF SUBROUTINE TABLE\n         LA    R3,SUBRTCNT         COUNT OF ENTRIES IN TABLE\n         SPACE 1\nIDLDLOOP DS    0H\n         LA    R0,0(,R2)           R0 -> ENTRY NAME\n         L     R1,8(,R2)           R1 -> ENTRY POINT OF ROUTINE\n         LA    R1,0(,R1)           CLEAR HIGH ORDER BIT/BYTE    * JGS *\n         LTR   R1,R1               TEST FOR 0 (UNRESOLVED VCON) * JGS *\n         BZ    IDLDSKIP            YES, 0 => UNRESOLVED VCON, BR* JGS *\n         SPACE 1\n         IDENTIFY EPLOC=(0),ENTRY=(1)    CREATE THE ENTRY\n         SPACE 1\n         LTR   R15,R15             TEST RETURN CODE FROM IDENTIFY\n         BNZ   JGSABEND            IF NOT ZERO, GO ABEND\n         SPACE 1\n         LA    R0,0(,R2)           R0 -> ENTRY NAME\n         LOAD  EPLOC=(0)           INCREMENT USE COUNT (FOR DEBUGGING)\n         SPACE 1\nIDLDSKIP DS    0H                                               * JGS *\n         LA    R2,12(,R2)          BUMP TO NEXT SUBROUTINE NAME\n         BCT   R3,IDLDLOOP         ISSUE IDENTIFY & LOAD UNTIL DONE\n         EJECT\n*  GET THE PARM FIELD ADDRESS FROM THE PRIOR OS SAVE AREA.\n         L     R1,4(,R13)          R1 = ADDRESS OF PRIOR SAVE AREA\n         L     R1,24(,R1)          R1 = ADDRESS OF PARM FIELD POINTER\n         SPACE 1\n*  NOW LINK TO DF/DSS, PASSING THE OS PARM FIELD.\n         LINK  EP=ADRDSSU,MF=(E,(1)),SF=(E,ADRDLINK)   OFF WE GO...\n         SPACE 1\n         ST    R15,FASTRET         SAVE THE RETURN CODE FROM DF/DSS\n         SPACE 3\n*  ISSUE DELETE SVCS TO REMOVE OUR ENTRY POINTS.                * JGS *\n         SPACE 1                                                * JGS *\n         LA    R2,SUBRTBLE         ADDRESS OF SUBROUTINE TABLE  * JGS *\n         LA    R3,SUBRTCNT         COUNT OF ENTRIES IN TABLE    * JGS *\n         SPACE 1                                                * JGS *\nDELELOOP EQU   *                                                * JGS *\n         LA    R0,0(,R2)           R0 -> ENTRY NAME             * JGS *\n         L     R1,8(,R2)           R1 -> ENTRY POINT OF ROUTINE * JGS *\n         LA    R1,0(,R1)           CLEAR HIGH ORDER BIT/BYTE    * JGS *\n         LTR   R1,R1               TEST FOR 0 (UNRESOLVED VCON) * JGS *\n         BZ    DELESKIP            YES, 0 => UNRESOLVED VCON, BR* JGS *\n         SPACE 1                                                * JGS *\n         DELETE EPLOC=(0)          LOWER USE COUNT FROM LOAD    * JGS *\n         SPACE 1                                                * JGS *\n         LTR   R15,R15             TEST RETURN CODE FROM DELETE * JGS *\n         BNZ   JGSABEND            IF NOT ZERO, GO ABEND        * JGS *\n         SPACE 1                                                * JGS *\nDELESKIP DS    0H                                               * JGS *\n         LA    R2,12(,R2)          BUMP TO NEXT SUBROUTINE NAME * JGS *\n         BCT   R3,DELELOOP         ISSUE DELETE'S UNTIL DONE    * JGS *\n         SPACE 2                                                * JGS *\n         TM    AUTHFLAG,X'01'      WAS      AUTH SVC USED       * JGS *\n         BNO   NOUNAUTH            NO,  BRANCH, SKIP UNAUTH CODE* JGS *\n         AIF   ('&SYSPARM' NE 'JGS').TRYJRL2                    * JGS *\n         MNOTE *,'MAGIC SVC ISSUED HERE'                        * JGS *\n         L     R1,=C'UNAU'         INDICATE AUTH OFF            * JGS *\n         NI    AUTHFLAG,X'FF'-X'01' INDICATE AUTH SVC UNUSED    * JGS *\n         SVC   211                 ISSUE AUTH SVC               * JGS *\n         AGO   .ENDMOD2                                         * JGS *\n.TRYJRL2 AIF   ('&SYSPARM' NE 'JRL').ENDMOD2                    * JGS *\n         MNOTE 0,'JIM, I NEED SOME CODE HERE... '               * JGS *\n* * *    LA    R1,=C'AUTH'                                      **JRL**\n* * *    SVC   237                 ISSUE AUTH SVC               **JRL**\n.ENDMOD2 ANOP                                                   * JGS *\n         SPACE 2                                                * JGS *\nNOUNAUTH DS    0H                                               * JGS *\n         SPACE 2                                                * JGS *\n         EJECT\n*  PRESERVE RETURN CODE IN R2 SINCE FREEMAIN GIVES A RETURN CODE IN R15\n         L     R2,FASTRET          PICK UP RETURN CODE FROM WORKAREA\n         SPACE 1\n         FREEMAIN  R,LV=FASTRLEN,A=(R11)   FREEMAIN WORK AREA\n         SPACE 1\n         LR    R1,R13              SET UP FOR FREEMAIN OF SAVE AREA\n         L     R13,4(,R13)         POINT TO PRIOR (CALLER'S) SAVE AREA\n         FREEMAIN  R,LV=72,A=(1)   ISSUE FREEMAIN OF OUR SAVE AREA\n         SPACE 3\n         LR    R15,R2              RELOAD R15 AFTER FREEMAIN\n         SPACE 1\n         AIF   ('&SYSPARM' NE 'JGS').TRYJRL3                    * JGS *\n*        PRESERVE RETURN CODE AS PASSED FROM DF/DSS,            * JGS *\n*        AND SUPPRESS ABEND FOR NON-ZERO RETURN CODE            * JGS *\n         AGO   .ENDMOD3                                         * JGS *\n.TRYJRL3 AIF   ('&SYSPARM' NE 'JRL').ENDMOD3                    * JGS *\n         LTR   R15,15              TEST OF ALL OK               **JRL**\n         BNZ   JRLABEND            NON-ZERO, ABEND              **JRL**\n.ENDMOD3 ANOP                                                   * JGS *\n         SPACE 1\n         RETURN (14,12),T,RC=(15)  RETURN TO CALLER\n         SPACE 5                                                **JRL**\nJRLABEND WTO   'ADR993I DF/DSS NON-ZERO RETURN CODE. STEP WILL  ABEND...\n               '                                                **JRL**\n         SPACE 2                                                **JRL**\n         WTO   'ADR993I CHECK SYSPRINT.'                        **JRL**\n         SPACE 2                                                **JRL**\n         ABEND 99,DUMP                                          **JRL**\n         EJECT\n*  NON MODIFIABLE PROGRAM STORAGE\n         SPACE 2\nJGSABEND DC    F'0'                CAUSE AN S-0C1 ABEND IF EXECUTED\n         DC    C' ABEND 0C1 FORCED DUE TO ERROR.'\n         DC    C' REG 10 POINTS TO THE FAILING CODE. '\n         SPACE 2\n*  ADRUENQ  AND ADRUPSWD ARE THE ENTRY POINTS ACTUALLY\n*   NEEDED DURING EXECUTION.\n*  ADRRELVL IS A CSECT WHICH CONTAINS THE DF/DSS                * JGS *\n*   VERSION - RELEASE - MODIFICATION LEVEL (X'00VVRRMM')        * JGS *\n*  THE OTHERS ARE TO MAKE OUR PRESENCE KNOWN IN A DUMP\n         SPACE 1\nSUBRTBLE DC    0F'0'               BOUNDARY ALIGNMENT\n         DC    CL8'ADRDSSU',V(ADRDSSU)    DF/DSS ENTRY POINT\n         WXTRN ADRRELVL            UNRESOLVED VCON IS OK        * JGS *\n         DC    CL8'ADRRELVL',V(ADRRELVL)  DF/DSS VER-REL-MOD    * JGS *\n         DC    CL8'ADRUENQ',V(ADRUENQ)    USER ENQUE ROUTINE\n         DC    CL8'JGSUENQ',V(JGSUENQ)    USER ENQUE ROUTINE EP\n         DC    CL8'ADRUPSWD',V(ADRUPSWD)  USER AUTHORIZATION ROUTINE\n         DC    CL8'JGSUPSWD',V(JGSUPSWD)  USER AUTHORIZATION ROUTINE EP\nSUBRTCNT EQU   (*-SUBRTBLE)/12     COUNT OF SUBROUTINES IN TABLE\n         SPACE 1\n         LTORG\n         SPACE 2\n*  THIS IS THE WORK AREA FOR PRESERVING REENTRANCY.\n*  THIS DATA IS ACTUALLY COPIED TO A GETMAINED AREA DURING EXECUTION,\n*   WHICH IS ADDRESSED BY R11.\n         SPACE 1\nFASTRSTR DC    0D'0',C'FASTRSTR'   BOUNDARY ALIGNMENT AND ID\nFASTRET  DC    F'0'                RETURN CODE FROM DF/DSS\n         SPACE 1\nADRDLINK LINK  EP=ADRDSSU,SF=L     LIST FORM OF LINK MACRO\n         SPACE 1\nAUTHFLAG DC    X'00'               X'01' => AUTH SVC USED\n         DC    CL8'FASTREND'\nFASTREND DC    0D'0'               END OF MODIFIABLE AREA\nFASTRLEN EQU   FASTREND-FASTRSTR   LENGTH OF WORK AREA\n         SPACE 2\n         DROP  ,                   DROP ALL PREVIOUS BASE REGISTERS\n         SPACE 1\n*  THIS IS THE LOGICAL END OF FASTDSS - DRIVER FOR DF/DSS\n         TITLE 'JOHN GRADY SULLIVAN - ADRUENQ - ENQUE ROUTINE'\nADRUENQ  CSECT\n         SPACE 1\nADRUENQ  AMODE 31                                               * JGS *\nADRUENQ  RMODE ANY                                              * JGS *\n         SPACE 1\n         ENTRY JGSUENQ             CREATE AN EXTERNAL SYMBOL ENTRY\nJGSUENQ EQU    *                   DEFINE THE SYMBOL IN THE PROGRAM\n         SPACE 1\n*\n*  JOHN GRADY SULLIVAN - JUNE, 1980\n*\n*  FUNCTION :\n*         BYPASS THE SYSVTOC ENQUE ON THE FROM (SOURCE) VOLUME\n*\n*  INPUT :\n*    REGISTER 1 POINTS TO A TWO WORD PARAMETER LIST :\n*      PARAMETER 1 -> VOLUME SERIAL FIELD IN THE UCB\n*      PARAMETER 2 =  FLAGS (NOT A POINTER TO FLAGS) INDICATING * JGS *\n*                       THE OPERATION IN PROGRESS               * JGS *\n*        BYTE 1 : FLAGS            UNFLG1 = 4(R10)              * JGS *\n*          BIT 0 : END OF PARAMETER LIST (ALWAYS 1)             * JGS *\n*          BIT 1 :       RESERVED.                              * JGS *\n*          BIT 2 : 1 => DUMP OPERATION                          * JGS *\n*          BIT 3 :       RESERVED                               * JGS *\n*          BIT 4 : 1 => COPY OPERATION                          * JGS *\n*          BIT 5 : 1 => PRINT OPERATION                         * JGS *\n*          BIT 6 :       RESERVED                               * JGS *\n*          BIT 7 :       RESERVED                               * JGS *\n*        BYTE 2 : FLAGS            UNFLG2 = 5(R10)              * JGS *\n*          BIT 0 : 1 => DATASET-BY-NAME OPERATION               * JGS *\n*          BIT 1 : 1 => FULL VOLUME OPERATION                   * JGS *\n*          BIT 2 : 1 => PARTIAL VOLUME OPERATION                * JGS *\n*          BIT 3 - 7 :   RESERVED                               * JGS *\n*        BYTE 3 : FLAGS            UNFLG3 = 6(R10)              * JGS *\n*          BIT 0 : 1 => TOLERATE(ENQFAILURE) IS USED            * JGS *\n*          BIT 1 - 7 :   RESERVED                               * JGS *\n*        BYTE 4 :        RESERVED         = 7(R10)              * JGS *\n*\n*\n*  OUTPUT :\n*    R15  = 0  =>  ENQUE ON THE VOLUME BEING DUMPED FOR THE     * JGS *\n*                  DURATION OF THE OPERATION (LONG ENQUE)       * JGS *\n*    R15  = 4  =>  ENQUE ON VOLUME ONLY FOR THE DURATION        * JGS *\n*                  OF THE VTOC ACCESS (SHORT ENQUE).            * JGS *\n*                  RC = 4 REQUIRED AS PER APAR PP91793          * JGS *\n*                  AND DOCUMENTATION APAR PP94829.              * JGS *\n*    R15  = ?  =>  SAME AS 0 => LONG ENQUE                      * JGS *\n*\n*    JGS  : ALWAYS SET R15 = 4 TO GET SHORT ENQUE               * JGS *\n*    JRL  : SET R15 = 0 FOR LONG ENQUE IF STORAGE VOLUME        **JRL**\n*    JRL  : SET R15 = 4 FOR SHORT ENQUE IF NOT STORAGE VOLUME   **JRL**\n*\n         EJECT 1\n*\n*  REGISTER USAGE :\n*                                                               * JGS *\n*        R0    SYSTEM\n*        R1    INPUT  - POINTER TO THE PARAMETER LIST           * JGS *\n*        R1    WORK   - POINTER TO THE UCB PARAMETER LIST (UPL) * JGS *\n*        R2    CVT=>,   OUTPUT RETURN CODE ( 0 OR 4 )           * JGS *\n*        R3    UCB=>                                            * JGS *\n*        R4    UCBILK2=>                                        * JGS *\n*        R5    UCB LOOK UP ROUTINE (INTERNAL) WORK REGISTER     * JGS *\n*        R6\n*        R7\n*        R8    PARAMETER 2 -> VOLUME SERIAL NUMBER IN UCB       * JGS *\n*        R9\n*        R10   BASE REGISTER FOR ADRUNQB (PARAMETER LIST/FLAGS) * JGS *\n*        R11   BASE REGISTER FOR REENTRANT WORK AREA            * JGS *\n*        R12   BASE REGISTER FOR PROGRAM\n*        R13   SYSTEM - SAVE AREA CHAIN\n*        R14   RETURN ADDRESS\n*        R15   SYSTEM & RETURN CODE\n*                                                               **JRL**\n* A SCAN OF UCB'S USING CVTILK2 TABLE IS REQUIRED DUE TO        **JRL**\n* APAR PP89259 CHANGING THE PARAMETER NOW POINTING TO           **JRL**\n* A STORAGE AREA NOT IN UCB.                                    **JRL**\n*                                                               **JRL**\n         EJECT\n         SAVE (14,12),,ADRUENQ__JOHN_GRADY_SULLIVAN_&SYSDATE.\n         SPACE 1\n         LA    12,0(,15)           CLEAR HIGH ORDER BIT/BYTE\n         USING ADRUENQ,12          ESTABLISH ADDRESSABILITY\n         SPACE 1\n         LA    R10,0(,R1)          -> INPUT PARAMETER LIST      * JGS *\n         USING ADRUNQB,R10         ESTABLISH ADDRESSABILITY     * JGS *\n         SPACE 1                                                **JRL**\n         GETMAIN R,LV=72           GETMAIN A NEW SAVE AREA      **JRL**\n         SPACE 1                                                **JRL**\n         ST    R13,4(,R1)          BACKCHAIN                    **JRL**\n         ST    R1,8(,R13)          FORWARD CHAIN                **JRL**\n         LR    13,R1               CURRENT SAVE AREA            **JRL**\n         EJECT                                                  **JRL**\n* TO KEEP OUR PROGRAM REENTRANT, ONE MUST OBTAIN AND            **JRL**\n*  INITIALIZE A WORK AREA EXTERNAL TO OUR PROGRAM               **JRL**\n*  FOR THINGS WHICH MAY BE MODIFIED DURING EXECUTION            **JRL**\n*  (SUCH AS SVC PARAMETER LISTS, RETURN CODE SAVE AREA, ETC.).  **JRL**\n         SPACE 1                                                **JRL**\n         GETMAIN R,LV=UENQRLEN GETMAIN FOR MODIFIABLE AREA      **JRL**\n         SPACE 1                                                **JRL**\n* SETUP TO INITIALIZE OUR NEWLY FOUND WORK AREA                 **JRL**\n         LR    R2,R1               TARGET AREA                  **JRL**\n         LA    R3,UENQRLEN         TARGET LENGTH                **JRL**\n         LA    R4,UENQRSTR         SOURCE ADDRESS               **JRL**\n         SPACE 1                                                **JRL**\n         MVCL  R2,R4               INITIALIZE MODIFIABLE AREA   **JRL**\n         SPACE 1                                                **JRL**\n         LA    R11,0(,R1)          SAVE THE ADDRESS OF OUR AREA **JRL**\n         USING UENQRSTR,R11 ESTABLISH ADDRESSABILITY            **JRL**\n         SPACE 3                                                **JRL**\n*  R10 -> ADRUNQB (THE INPUT PARAMETER LIST).                   * JGS *\n* GET THE PARAMETER ADDRESS FROM THE PRIOR OS SAVE AREA         **JRL**\n* * *    L     R1,4(,R13)          R1 = ADDRESS PREV SAVE AREA  **JRL**\n* * *    L     R1,24(,R1)          R1 = ADDR OF PARAMETER LIST  **JRL**\n* * *    USING ADRUNQB,R1          ESTABLISH ADDRESSABILITY     * JGS *\n         L     R8,UNUCBVSA         ADDRESS OF VOLID TO R8       * JGS *\n* * *    LA    R10,4(,R1)          R10 -> FLAGS, NOT HOLD FLAGS * JGS *\n         SPACE 2                                                **JRL**\n         AIF   ('&SYSPARM' NE 'JGS').TRYJRL4                    * JGS *\n         MNOTE 0,'SUBROUTINE BYPASSED, SHORT ENQUE FORCED'      * JGS *\n         LA    R2,4                SETUP FOR SHORT ENQUE/RESERVE* JGS *\n         B     UENQRET             BYPASS REST OF SUBROUTINE    * JGS *\n         SPACE 1                                                * JGS *\n         AGO   .ENDMOD4                                         * JGS *\n.TRYJRL4 AIF   ('&SYSPARM' NE 'JRL').ENDMOD4                    * JGS *\n.ENDMOD4 ANOP                                                   * JGS *\n         EJECT                                                  **JRL**\n* SCAN UCB LIST FOR VOLID SPECIFIED                             **JRL**\n*                                                               * JGS *\n*        JGS - ADDED CODE TO UTILIZE MVS/SP 1.2+ (1.3, 2.XA)'S  * JGS *\n*              UCB LOOKUP ROUTINE (IF AVAILABLE).  (DOWNWARD    * JGS *\n*              COMPATIBLE WITH BASE MVS 3.8 AND SHOULD BE       * JGS *\n*              UPWARD COMPATIBLE WITH MVS/XA).                  * JGS *\n*        JGS - THANKS! TO C. JOHN KINN AT LOCKHEED (BURBANK)    * JGS *\n*              FOR PUTTING THE BASIC CODE ON THE JES2 MODS TAPE * JGS *\n*                                                               * JGS *\n*  REGISTER USAGE :                                             * JGS *\n*  R1    UPL  - UCB LOOK-UP ROUTINE PARAMETER LIST              * JGS *\n*  R2    WORK / CVT POINTER                                     * JGS *\n*  R3    WORK / UCB POINTER                                     * JGS *\n*  R4    WORK - UCB LOOK-UP (CVTILK2 POINTER)                   * JGS *\n*  R5    WORK - UCB LOOK-UP DEVICE CLASS                        * JGS *\n*  R13   SAVE - MUST POINT TO A USABLE SAVE AREA                * JGS *\n*  R14   LINKAGE RETURN ADDRESS (FROM UCB LOOK-UP ROUTINE)      * JGS *\n*  R15   WORK / LINKAGE ADDRESS ( TO  UCB LOOK-UP ROUTINE)      * JGS *\n*                                                               * JGS *\n         SPACE 5                                                * JGS *\n         PUSH  USING                                            * JGS *\n         SPACE 1                                                * JGS *\n* UCB SCAN ROUTINE - INITIALIZATION                             * JGS *\n         SPACE 1                                                * JGS *\n         LA    R1,UPLWRKAD         ADDRESS THE UPL WORK AREA    * JGS *\n         LR    R4,R1               CLEAR STORAGE                * JGS *\n         LA    R5,UPLSIZE            FROM GETMAIN               * JGS *\n         SLR   R15,R15                 FOR UCB                  * JGS *\n         MVCL  R4,R14                    PARAMETER LIST         * JGS *\n         SPACE 1                                                * JGS *\n***      MVI   UPLCLASS,X'00'      SET DEVICE CLASS IN UPL (ANY)* JGS *\n         MVI   UPLCLASS,UCB3DACC   SET DEVICE CLASS IN UPL (DA) * JGS *\n         LA    R2,UPLWORK          STORE POINTER                * JGS *\n         ST    R2,UPLWRKAD           TO WORK AREA               * JGS *\n         LA    R2,UPLCLASS         STORE POINTER                * JGS *\n         ST    R2,UPLCLSAD           TO DEVICE CLASS            * JGS *\n         LA    R2,UPLUCB           STORE POINTER                * JGS *\n         ST    R2,UPLUCBAD           TO UCB                     * JGS *\n         OI    UPLUCBAD,X'80'      INDICATE END OF LIST         * JGS *\n         EJECT                                                  * JGS *\n* UCB SCAN ROUTINE - PREPARE FOR INVOCATION OR EMULATION        * JGS *\n         SPACE 1                                                * JGS *\nUCBUSCAN DS    0H                                               * JGS *\n         L     R2,CVTPTR           GET CVT ADDRESS              * JGS *\n         SPACE 1                                                * JGS *\n         USING CVT,R2              CVT ADDRESSABILITY           * JGS *\n         SPACE 1                                                * JGS *\n* CHECK FOR MVS (VS/1 HAS A SHORTER CVT)                        * JGS *\n         TM    CVTDCB,CVTMVS2      MVS SYSTEM ?                 * JGS *\n         BNO   UCBUEMUL            NO, NOT MVS, SO BRANCH       * JGS *\n         SPACE 1                                                * JGS *\n         L     R15,CVT+X'434'      ADDR (IOS UCB SCAN) (ANY)    * JGS *\n*        L     R15,CVTRV628        ADDR (IOS UCB SCAN) (NO SP)  * JGS *\n*        L     R15,CVTUCBSC        ADDR (IOS UCB SCAN) (SP & XA)* JGS *\n*                                  = CVTUCBSC  DC  V(IOSVSUCB)  * JGS *\n         SPACE 2                                                * JGS *\n         LTR   R15,R15             BR IF THIS                   * JGS *\n         BNZ   UCBUSP2               IS MVS / SP 1.2, 1.3, 2.XA * JGS *\n         EJECT                                                  * JGS *\n* UCB SCAN ROUTINE - EMULATION                                  * JGS *\n         SPACE 1                                                * JGS *\nUCBUEMUL DS    0H                                               * JGS *\n         USING UCBDSECT,R3         UCB ADDRESSABILITY           * JGS *\n         SPACE 1                                                * JGS *\n         ICM   R4,B'1111',UPLWORK  BR IF THIS IS                * JGS *\n         BNZ   UCBUBEGN              SECOND OR LATER CALL       * JGS *\n*  SYMBOL CVTILK2 REPLACED BY CVT OFFSET TO AVOID ASSEMBLY      * JGS *\n*        ERRORS (UNDEFINED SYMBOL) USING MVS/XA CVT MACRO.      * JGS *\n         L     R4,CVT+X'028'       ADDR (UCB VECTOR TABLE) NO-XA* JGS *\n*        L     R4,CVTILK2          ADDR (UCB VECTOR TABLE) NO-XA* JGS *\n         BCTR  R4,0                BACK UP TO ZEROTH            * JGS *\n         BCTR  R4,0                  UCB POINTER                * JGS *\nUCBUBEGN LA    R15,4               ASSUME UCB WILL NOT BE FOUND * JGS *\n         IC    R5,UPLCLASS         RE-FETCH DEVICE CLASS        * JGS *\n         SR    R3,R3               ZERO UCB ADDRESS POINTER     * JGS *\n         SPACE 1                                                * JGS *\nUCBUNEXT LA    R4,2(,R4)           BUMP TO NEXT POINTER         * JGS *\n         ICM   R3,B'0011',0(R4)    ADDR OF UCB                  * JGS *\n         BP    UCBUEXAM            BR IF VALID UCB ADDRESS      * JGS *\n         BZ    UCBUNEXT            BR IF NULL ENTRY             * JGS *\n         TM    1(R4),X'FF'         EXIT IF END                  * JGS *\n         BO    UCBUEND               OF VECTOR                  * JGS *\n         SPACE 1                                                * JGS *\nUCBUEXAM CLM   R5,B'0001',UCBTBYT3 BR IF THIS UCB               * JGS *\n         BNE   UCBUNEXT              IS NOT DESIRED CLASS       * JGS *\n         ST    R3,UPLUCB           PROVIDE ADDRESS OF UCB       * JGS *\n         ST    R4,UPLWORK          REMEMBER WHERE TO RESUME     * JGS *\n         SPACE 1                                                * JGS *\n* CHECK FOR DUPLICATE CHANNEL PATH                              * JGS *\n         SPACE 1                                                * JGS *\n*  SYMBOL CVTILK2 REPLACED BY CVT OFFSET TO AVOID ASSEMBLY      * JGS *\n*        ERRORS (UNDEFINED SYMBOL) USING MVS/XA CVT MACRO.      * JGS *\n         L     R4,CVT+X'028'       ADDR (UCB VECTOR TABLE) NO-XA* JGS *\n*        L     R4,CVTILK2          ADDR (UCB VECTOR TABLE) NO-XA* JGS *\nUCBULOP2 ICM   R3,B'0011',0(R4)    ADDR OF NEXT UCB             * JGS *\n         CL    R4,UPLWORK          EXIT IF NO DUPLICATE         * JGS *\n         BE    UCBUSPXT              CHANNEL PATH FOUND         * JGS *\n         LA    R4,2(,R4)           ADDR OF NEXT POINTER         * JGS *\n         CL    R3,UPLUCB           CONTINUE LOOP IF THIS IS NOT * JGS *\n         BNE   UCBULOP2              DUPLICATE CHANNEL PATH     * JGS *\n         L     R4,UPLWORK          SETUP TO RESUME SCAN         * JGS *\n         B     UCBUNEXT              AND GO RE-ENTER LOOP       * JGS *\n         SPACE 1                                                * JGS *\nUCBUSPXT SR    R15,R15             GIVE APPROPRIATE RETURN CODE * JGS *\n         B     UCBUEND             EXIT                         * JGS *\n         SPACE 1                                                * JGS *\n         DROP  R2                  DROP => CVT                  * JGS *\n         DROP  R3                  DROP => UCB                  * JGS *\n         EJECT                                                  * JGS *\n* UCB SCAN ROUTINE - INVOCATION OF THE MVS VERSION              * JGS *\n         SPACE 1                                                * JGS *\nUCBUSP2  DS    0H                                               * JGS *\n         BALR  R14,R15             ENTER MVS UCB SCAN ROUTINE   * JGS *\n         SPACE 3                                                * JGS *\n* UCB SCAN ROUTINE - COMMON RETURN POINT                        * JGS *\n         SPACE 1                                                **JRL**\n* DECIDE IF THIS IS THE DESIRED UCB                             * JGS *\nUCBUEND  DS    0H                                               * JGS *\n         L     R3,8(,R1)           R3 = A(RETURNED UCB ADDRESS) * JGS *\n         L     R3,0(,R3)           R3 => UCB                    * JGS *\n         USING UCBDSECT,R3         UCB ADDRESSABILITY           * JGS *\n         LTR   R15,R15             R15 = 0 => GOT A UCB         * JGS *\n         BZ    UCBCHECK            YES, 0, SO BRANCH (VALIDATE) * JGS *\n         B     UCBLAST             NO - OUT OF UCB'S            * JGS *\nUCBCHECK DS    0H                  UCB VALIDATION               * JGS *\n         CLC   UCBVOLI,0(R8)       DESIRED VOLID ?              * JGS *\n         BE    UCBISIT             EQUAL => YES, SO BRANCH      * JGS *\n         B     UCBUSCAN            NO, BRANCH, AND SCAN AGAIN   * JGS *\n         SPACE 2                                                * JGS *\nUCBLAST  DS    0H                  UCB NOT FOUND                * JGS *\n         MVC   ADR994I+4+8(6),0(R8) MOVE IN VOLID               **JRL**\n         LA    R2,4                SETUP FOR SHORT ENQUE/RESERVE**JRL**\n         WTO   MF=(E,ADR994I)                                   **JRL**\n         B     UENQRET                                          **JRL**\n         SPACE 2                                                * JGS *\nUCBISIT  DS    0H                  UCB FOUND & VALIDATED        * JGS *\n         LA    R2,4                SETUP FOR SHORT ENQUE/RESERVE**JRL**\n         SPACE 2                                                **JRL**\n         TM    UCBSTAB,UCBBSTR     STORAGE VOLUME ?             **JRL**\n         BZ    NOTSTOR             NO, NOT STORAGE, SO BRANCH   **JRL**\n         MVC   ADR995I+4+8(6),0(R8) MOVE IN VOLID               **JRL**\n         WTO   MF=(E,ADR995I)                                   **JRL**\n         SLR   R2,R2               MAKE LONG ENQUE/RESERVE      **JRL**\n         B     UENQRET                                          **JRL**\n         SPACE 2                                                **JRL**\nNOTSTOR  MVC   ADR995I+4+8(6),0(R8) MOVE IN VOLID               **JRL**\n         MVC   ADR995I+4+15(7),=CL7'PRIVATE'                    **JRL**\n         TM    UCBSTAB,UCBBPUB     PUBLIC VOLUME ?              * JGS *\n         BZ    NOTPUB              NO, NOT PUBLIC, SO BRANCH    * JGS *\n         MVC   ADR995I+4+15(7),=CL7' PUBLIC'                    * JGS *\n         SPACE 2                                                * JGS *\nNOTPUB   MVC   ADR995I+4+32(9),=CL9'NOT USED.'                  **JRL**\n         WTO   MF=(E,ADR995I)                                   **JRL**\n         B     UENQRET                                          **JRL**\n         SPACE 2                                                **JRL**\n         DROP  R3                  DROP => UCB                  * JGS *\n         POP   USING               RESTORE USINGS               * JGS *\n         SPACE 5                                                **JRL**\n*  R2 SHOULD CONTAIN A VALID RETURN CODE (0 OR 4) AT THIS POINT * JGS *\n         SPACE 1                                                * JGS *\nUENQRET  FREEMAIN R,LV=UENQRLEN,A=(R11) FREEMAIN WORK AREA      **JRL**\n         SPACE 1                                                **JRL**\n         LR    R1,R13              SETUP FOR SAVEAREA FREEMAIN  **JRL**\n         L     R13,4(,R13)         PRIOR SAVE AREA              **JRL**\n         FREEMAIN R,LV=72,A=(1)    FREE OUR SAVEAREA            **JRL**\n         SPACE 1                                                **JRL**\n         LR    R15,R2              RETURN CODE                  **JRL**\n         RETURN (14,12),T,RC=(15)  RETURN TO CALLER\n         SPACE 2                                                **JRL**\n         LTORG                                                  **JRL**\n         EJECT                                                  **JRL**\n* THIS IS THE WORK AREA FOR PRESERVING REENTRANCY.              **JRL**\n* THIS DATA IS ACTUALLY COPIED TO A GETMAINED AREA DURING EXEC. **JRL**\n* WHICH IS ADDRESSED BY R11                                     **JRL**\n         SPACE 1                                                **JRL**\nUENQRSTR DC    0D'0',C'UENQRSTR'   BOUNDARY ALIGNMENT AND ID    **JRL**\n         SPACE 1                                                **JRL**\nADR994I  WTO   'ADR994I VOLSER NOT MOUNTED, RESERVE NOT USED.', **JRL**-\n               MF=L                                             **JRL**\n         SPACE 1                                                **JRL**\n* ALTERNATE WORDS==>           PRIVATE          NOT USED.       **JRL**\n*                               PUBLIC          NOT USED.       * JGS *\nADR995I  WTO   'ADR995I VOLSER STORAGE, RESERVE USED.    ',     **JRL**-\n               MF=L                                             **JRL**\n         SPACE 2\nUPLDSECT DC    0D'0'               UCB PARAMETER LIST DSECT     * JGS *\n*                                  (NEED DOUBLEWORD BOUNDARY)   * JGS *\n         SPACE 1                                                * JGS *\nUPLWRKAD DS    A(UPLWORK)          POINTER TO UPL WORK AREA     * JGS *\nUPLCLSAD DS    A(UPLCLASS)         POINTER TO DEVICE CLASS      * JGS *\nUPLUCBAD DS    A(UPLUCB)           POINTER TO UCB ADDRESS       * JGS *\nUPLUCB   DS    F                   UCB ADDRESS                  * JGS *\nUPLWORK  DS    CL100               WORK AREA (DBLWORD BOUNDARY) * JGS *\nUPLSAVE  DS    18F                 SAVE AREA                    * JGS *\nUPLCLASS DS    X'00'               DEVICE CLASS                 * JGS *\nUPLSIZE  EQU   *-UPLDSECT          LENGTH OF UPL                * JGS *\n         SPACE 2                                                * JGS *\n         DC    CL8'UENQREND'                                    **JRL**\nUENQREND DC    0D'0'               END OF MODIFIABLE AREA       **JRL**\nUENQRLEN EQU   UENQREND-UENQRSTR   LENGTH OF WORK AREA          **JRL**\n         SPACE 3\n         DROP  ,                   DROP ALL PREVIOUS BASE REGISTERS\n         SPACE 1\n*  THIS IS THE LOGICAL END OF JGSUENQ/ADRUENQ - USER ENQUE ROUTINE\n         TITLE 'JOHN GRADY SULLIVAN - ADRUPSWD - AUTHORIZATION ROUTINE'\nADRUPSWD CSECT\n         SPACE 1\nADRUPSWD AMODE 31                                               * JGS *\nADRUPSWD RMODE ANY                                              * JGS *\n         SPACE 1\n         ENTRY JGSUPSWD            CREATE AN EXTERNAL SYMBOL ENTRY\nJGSUPSWD EQU   *                   DEFINE THE SYMBOL IN THE PROGRAM\n         SPACE 1\n*\n*  JOHN GRADY SULLIVAN - JUNE, 1980\n*\n*  FUNCTION :\n*    REDUCE OR ELIMINATE OPERATOR PASSWORD PROMPTING WHILE RUNNING\n*      DF/DSS\n*\n*                                                               * JGS *\n*  INPUT :\n*    REGISTER 1 POINTS TO A FOUR WORD PARAMETER LIST            * JGS *\n*    (ADRUPB DSECT BASED OFF OF REGISTER R10) :                 * JGS *\n*      UPDSCBAD  :                                              * JGS *\n*      PARAMETER 1 -> FORMAT 1 DSCB FOR THE PASSWORD PROTECTED  * JGS *\n*        OR VSAM DATASET, OR 0 FOR VOLUME LEVEL ENTRY           * JGS *\n*      UPCATP    :                                              * JGS *\n*      PARAMETER 2 -> CATALOG NAME, OR 0 FOR VOLUME LEVEL ENTRY * JGS *\n*      UPUCBVSA  :                                              * JGS *\n*      PARAMETER 3 -> VOLUME SERIAL FIELD IN THE UCB            * JGS *\n*      PARAMETER 4 =  FLAGS (NOT A POINTER TO FLAGS) INDICATING * JGS *\n*                       THE OPERATION IN PROGRESS               * JGS *\n*      UPFLG1    :                                              * JGS *\n*        BYTE 1 : FLAGS            UPFLG1 = 12(R10)             * JGS *\n*          BIT 0 : END OF PARAMETER LIST (ALWAYS 1)             * JGS *\n*          BIT 1 : 1 => SOURCE VOLUME, 0 => TARGET VOLUME       * JGS *\n*          BIT 2 : 1 => DUMP OPERATION                          **JRL**\n*          BIT 3 : 1 => RESTORE OPERATION                       **JRL**\n*          BIT 4 : 1 => COPY OPERATION                          **JRL**\n*          BIT 5 : 1 => PRINT OPERATION                         **JRL**\n*          BIT 6 : 1 => DEFRAG OPERATION                        * JGS *\n*          BIT 7 : 1 => COMPRESS OPERATION                      * JGS *\n*      UPFLG2    :                                              * JGS *\n*        BYTE 2 : FLAGS            UPFLG2 = 13(R10)             **JRL**\n*          BIT 0 : 1 => DATASET-BY-NAME OPERATION               **JRL**\n*          BIT 1 : 1 => FULL VOLUME OPERATION                   **JRL**\n*          BIT 2 : 1 => PARTIAL (BY TRACKS) VOLUME OPERATION    * JGS *\n*          BIT 3 : 1 => RELEASE OPERATION                       * JGS *\n*          BIT 4 - 7 :   RESERVED                               * JGS *\n*      UPFLG3    :                                              * JGS *\n*        BYTE 3 : FLAGS            UPFLG3 = 14(R10)             * JGS *\n*          BIT 1 : 1 => VOLUME ENTRY, 0 => DATASET ENTRY        * JGS *\n*          BIT 2 : 1 => VSAM DATASET IN AN ICF CATALOG          * JGS *\n*          BIT 3 - 7 :   RESERVED                               * JGS *\n*        BYTE 4 :        RESERVED  UPFLG4 = 15(R10)             * JGS *\n*\n*  OUTPUT :\n*    FOR THE SOURCE (FROM) VOLUME, SET REG 15 = 0 TO BYPASS\n*      PASSWORD CHECKING.\n*    FOR THE TARGET (TO) VOLUME, ASK THE OPERATOR WHETHER THIS\n*      OPERATION SHOULD CONTINUE (U), OR TERMINATE (T).\n*\n         EJECT\n*\n*    RETURN CODE   MEANING\n*    DEC   HEX\n*      0 =  0  =>  BYPASS PASSWORD CHECKS, DO NOT RETURN TO THIS EXIT\n*      4 =  4  =>  BYPASS PASSWORD CHECKS THIS DS, RETURN FOR NEXT DS\n*      8 =  8  =>  DO PASSWORD CHECKING THIS DS, RETURN NEXT DS\n*     12 =  C  =>  DO PASSWORD CHECKING THIS VOLUME, DO NOT RETURN\n*     16 = 10  =>  DO NOT PROCESS THIS DS, RETURN FOR NEXT DS   * JGS *\n*     20 = 14  =>  TERMINATE THIS COPY, DUMP, OR RESTORE OPERATION\n*\n*  REGISTER USAGE :\n*        R0    SYSTEM\n*        R1    INPUT - POINTER TO THE PARAMETER LIST / WORK\n*        R2    WORK / RETURN CODE MANIPULATION\n*        R3    WORK\n*        R4    WORK / UCB POINTER\n*        R5    WORK\n*        R6    PARAMETER 1 -> FORMAT 1 DSCB (OR 0 => VOLUME ENTRY)\n*        R7    PARAMETER 2 -> CATALOG NAME  (OR 0 => VOLUME ENTRY)\n*        R8    PARAMETER 3 -> VOLUME SERIAL NUMBER IN UCB\n*        R9\n*        R10   BASE REGISTER FOR ADRUPB (PARAMETER LIST & FLAGS)* JGS *\n*        R11   BASE REGISTER FOR WORK AREA TO MAINTAIN REENTRANCY.\n*        R12   BASE REGISTER FOR PROGRAM\n*        R13   SYSTEM - SAVE AREA CHAIN\n*        R14   RETURN ADDRESS\n*        R15   WORK, SYSTEM, AND RETURN CODE\n         SPACE 3\n**       XC    0(4,15),0(15)       CAUSE AN ABEND S0C1 ON SECOND PASS\n**       SR    15,15\n**       BR    14                  AND RETURN\n         SPACE 1\n         SAVE (14,12),,ADRUPSWD_JOHN_GRADY_SULLIVAN_&SYSDATE.\n         SPACE 1\n         LA    12,0(,15)           CLEAR HIGH ORDER BIT/BYTE\n         USING ADRUPSWD,12         ESTABLISH ADDRESSABILITY\n         SPACE 1\n         LA    R10,0(,R1)          -> INPUT PARAMETER LIST      * JGS *\n         USING ADRUPB,R10          ESTABLISH ADDRESSABILITY     * JGS *\n         EJECT\n         GETMAIN R,LV=72           GETMAIN A NEW SAVE AREA\n         SPACE 1\n         ST    13,4(1)             BACKCHAIN TO PREVIOUS SAVE AREA\n         ST    1,8(13)             FORWARD CHAIN PREVIOUS SAVE AREA\n         LR    13,1                MAKE OUR SAVE AREA CURRENT\n         SPACE 2\n*  TO KEEP OUR PROGRAM REENTRANT, ONE MUST OBTAIN AND\n*   INITIALIZE A WORK AREA EXTERNAL TO OUR PROGRAM\n*   FOR THINGS WHICH MAY BE MODIFIED DURING EXECUTION\n*   (SUCH AS SVC PARAMETER LISTS, RETURN CODE SAVE AREAS, ETC.).\n         SPACE 1\n         GETMAIN   R,LV=PSWDRLEN   GETMAIN FOR MODIFIABLE AREA\n         SPACE 1\n*  SET UP TO INITIALIZE OUR NEWLY FOUND WORK AREA\n         LR    R2,R1               TARGET ADDRESS\n         LA    R3,PSWDRLEN         TARGET LENGTH\n         LA    R4,PSWDRSTR         SOURCE ADDRESS\n         LR    R5,R3               SOURCE LENGTH\n         SPACE 1\n         MVCL  R2,R4               INITIALIZE MODIFIABLE AREA\n         SPACE 1\n         LA    R11,0(,R1)          SAVE THE ADDRESS TO OUR AREA\n         USING PSWDRSTR,R11        ESTABLISH ADDRESSABILITY\n         SPACE 3\n*  R10 -> ADRUPB (THE INPUT PARAMETER LIST).                    * JGS *\n* * *    GET THE PARAMETER ADDRESSES FROM THE PRIOR OS SAVE AREA.\n* * *    L     R1,4(,R13)          R1 = ADDRESS OF PRIOR SAVE AREA\n* * *    L     R1,24(,R1)          GET ADDRESS OF PARAMETER LIST IN R1\n* * *    USING ADRUPB,R1           ESTABLISH ADDRESSABILITY     * JGS *\n         L     R6,UPDSCBAD         R6 -> FORMAT 1 DSCB / 0      * JGS *\n         L     R7,UPCATP           R7 -> CATALOG NAME / 0       * JGS *\n         L     R8,UPUCBVSA         R8 -> VOLUME SERIAL IN UCB   * JGS *\n* * *    LA    R9,UPFLG1           R9 -> FLAGS, NOT HOLD FLAGS  * JGS *\n* * *    USING UPFLG1,R9           ESTABLISH ADDRESSABILITY     * JGS *\n* * *    DROP  R1                  DROP => ADRUPB PARAMETER LIST* JGS *\n* * *    LM    R6,R8,0(R1)         GET THE ADDRESSES TO PARAMETERS\n* * *    LA    R9,12(,R1)          R9 -> FLAGS, NOT HOLD FLAGS  * JGS *\n         SPACE 3\n         MVI   PSWDRCU,X'00'       RC = 0, SUPPRESS PASSWORD PROMPTING\n         EJECT\nPSWDPREP EQU   *                   SET UP FOR PROMPTING THE OPERATOR\n         SPACE 1\n*  INDICATE WHICH OPERATION IS BEING PERFORMED IN THE PARAMETER\n*   MESSAGE ('OP = ???' IS THE DEFAULT, AND IS ALREADY IN THE MESSAGE).\n         SPACE 1\n         TM    UPFLG1,UPDUMP       IS THIS A DUMP ?             * JGS *\n         BZ    PSWDNDMP            NO, NOT DUMP, SO BRANCH      * JGS *\n         MVC   ADR992IO(8),=CL8'DUMP.   '        OVERLAYS 'OP = ???'\nPSWDNDMP EQU   *\n         SPACE 1\n         TM    UPFLG1,UPREST       IS THIS A RESTORE ?          * JGS *\n         BZ    PSWDNRST            NO, NOT RESTORE, SO BRANCH   * JGS *\n         MVC   ADR992IO(8),=CL8'RESTORE.'        OVERLAYS 'OP = ???'\nPSWDNRST EQU   *\n         SPACE 1\n         TM    UPFLG1,UPCOPY       IS THIS A COPY ?             * JGS *\n         BZ    PSWDNCPY            NO, NOT COPY, SO BRANCH      * JGS *\n         MVC   ADR992IO(8),=CL8'COPY.   '        OVERLAYS 'OP = ???'\nPSWDNCPY EQU   *\n         SPACE 1\n         TM    UPFLG1,UPPRINT      IS THIS A PRINT ?            * JGS *\n         BZ    PSWDNPRT            NO, NOT PRINT, SO BRANCH     * JGS *\n         MVC   ADR992IO(8),=CL8'PRINT.  '        OVERLAYS 'OP = ???'\nPSWDNPRT EQU   *\n         SPACE 1\n         TM    UPFLG1,UPDEFRAG     IS THIS A DEFRAG ?           * JGS *\n         BZ    PSWDNDFR            NO, NOT DEFRAG, SO BRANCH    * JGS *\n         MVC   ADR992IO(8),=CL8'DEFRAG. '        OVERLAYS 'OP = ???'\nPSWDNDFR EQU   *\n         SPACE 1\n         TM    UPFLG1,UPCOMPR      IS THIS A COMPRESS ?         * JGS *\n         BZ    PSWDNCMP            NO, NOT COMPRESS, SO BRANCH  * JGS *\n         MVC   ADR992IO(8),=CL8'COMPRESS'        OVERLAYS 'OP = ???'\nPSWDNCMP EQU   *\n         SPACE 1\n         TM    UPFLG2,UPRLSE       IS THIS A RELEASE?           * JGS *\n         BZ    PSWDNRLS            NO, NOT RELEASE, SO BRANCH   * JGS *\n         MVC   ADR992IO(8),=CL8'RELEASE.'        OVERLAYS 'OP = ???'\nPSWDNRLS EQU   *\n         EJECT ,\n         L     R2,CVTPTR           POINT TO THE CVT             * JGS *\n         USING CVT,R2              ADDRESSABILITY               * JGS *\n         L     R2,CVTTCBP          R2 -> A(NEXT & CURRENT TCBS) * JGS *\n         L     R2,4(,R2)           R2 -> OUR TCB                * JGS *\n         DROP  R2                  UNADDRESSABILITY             * JGS *\n         USING TCB,R2              ADDRESSABILITY               * JGS *\n         L     R2,TCBTIO           R2 -> TIOT (JOBNAME)         * JGS *\n         DROP  R2                  UNADDRESSABILITY             * JGS *\n         MVC   ADR991DJ(8),0(R2)   JOBNAME  TO WTOR (OPER PROMPT)\n         MVC   ADR991DS(8),8(R2)   STEPNAME TO WTOR (OPER PROMPT)\n         SPACE 1\n         MVC   ADR992IJ(8),0(R2)   JOBNAME  TO WTO  (PARAMETERS)\n         MVC   ADR992IS(8),8(R2)   STEPNAME TO WTO  (PARAMETERS)\n         SPACE 1\n         LA    R4,0(,R8)                       R4 -> VOLSER IN UCB\n         S     R4,=F'28'                       R4 -> BEGINNING OF UCB\n         USING UCBDSECT,R4                     ADDRESSABILITY   * JGS *\n         SPACE 1\n         MVC   ADR991DU(3),UCBNAME             UCB CUU TO WTOR\n         MVC   ADR991DV(6),UCBVOLI             UCB VOLSER TO WTOR\n         MVC   ADR991DX(58),=CL58'TARGET VOLUME = VOLSER (PARTIAL VOLUM*\n               E). (U,T, ?).'                                   * JGS *\n         MVC   ADR991DX+16(6),UCBVOLI          UCB VOLSER TO WTOR\n         MVC   ADR992IV+7(6),UCBVOLI           UCB VOLSER TO WTO* JGS *\n         SPACE 1\n         DROP  R4                  DROP => UCB                  * JGS *\n         EJECT\n*  IF THIS IS THE FROM DEVICE, EXIT AND SUPPRESS PASSWORD PROMPTING\n*  UNLESS IT IS OUR TESTING STEPNAME\n         TM    UPFLG1,UPFRTO       0 => TARGET (TO) DEVICE ?    * JGS *\n         BZ    PSWDNSRC            YES, 0 => TARGET, SO BRANCH  * JGS *\n         SPACE 1\n*  LOOK FOR OUR TESTING JOBNAME / STEPNAME COMBINATION          * JGS *\n*        CLC   ADR991DJ(8),=CL8'JGSTDSS '   TEST - JOBNAME      * JGS *\n*        BNE   PSWDRET             NO - BRANCH, SKIP PW PROMPT  * JGS *\n         CLC   ADR991DS(8),=CL8'TESTDSS '   TEST - STEPNAME     * JGS *\n         BNE   PSWDRET             NO - BRANCH, SKIP PW PROMPT  * JGS *\n         SPACE 1\n         MVC   ADR991DX(6),=CL6'SOURCE'                         * JGS *\n         MVC   ADR992IW(5),=CL5' READ'                          * JGS *\n         NOP   PSWDRET             NOP RETURN (COULD ZAP TO BR) * JGS *\nPSWDNSRC EQU   *                                                * JGS *\n         SPACE 2\n         TM    UPFLG2,UPDSN        1 => DATASET-BY-NAME OPER ?  **JRL**\n         BZ    PSWDNDSN            0 => NO, NOT DS-BY-NAME, SO BRANCH\n         SPACE 1\n*  DATASET BY NAME OPERATION -\n*    SET RETURN CODE AND PROMPT OPERATOR ACCORDINGLY\n         SPACE 1\n*  RETURN CODE X'08' FOR THE VOLUME ENTRY WILL CAUSE THE EXIT   * JGS *\n*              TO BE INVOKED AT THE DATASET LEVEL               * JGS *\n         MVI   PSWDRCU,X'08'       RETURN CODE IF OPER SAYS 'U' * JGS *\n         TM    UPFLG3,UPIND        1 => VOLUME LEVEL ENTRY    ? * JGS *\n         BNZ   PSWDNVDS            1 => YES, VOLUME ENTRY, SO BR* JGS *\n         LTR   R6,R6               R6 = 0 => NO DSN VOLUME ENTRY* JGS *\n         BZ    PSWDNVDS            0 => YES, NO DSN, SO BRANCH  * JGS *\n         SPACE 1\n*  RETURN CODE X'04' WILL BYPASS OPERATOR PROMPT ONLY FOR THIS DATASET\n         MVI   PSWDRCU,X'04'       RETURN CODE IF OPER SAYS 'U'\n         SPACE 1\nPSWDNVDS EQU   *\n         SPACE 1\n*        ADD TEXT TO 'TARGET VOLUME = VOLSER.' (FROM ABOVE)     * JGS *\n         MVC   ADR991DX+23(17),=CL24'(BY DSNAME).    '          * JGS *\n         MVC   ADR992ID(24),=CL24'(BY DSNAME).    '             * JGS *\n         SPACE 1\nPSWDNDSN EQU   *\n         EJECT\n*  NOT DATASET BY NAME - FULL OR PARTIAL VOLUME OPERATION\n         SPACE 1\n*        ADD TEXT TO 'TARGET VOLUME = VOLSER.' (FROM ABOVE)     * JGS *\n         TM    UPFLG2,UPFRTO       1 => FULL VOLUME             * JGS *\n         BZ    PSWDNFVO            0 => NO, NOT FULL, SO BRANCH * JGS *\n         MVI   PSWDRCU,X'00'       RETURN CODE IF OPER SAYS 'U'\n         MVC   ADR991DX+23(17),=CL24'(FULL VOLUME).'            * JGS *\n         MVC   ADR992ID(24),=CL24'(FULL VOLUME).'               * JGS *\n         MVC   ADR992IV+14(24),=CL24'(FULL VOLUME).'            * JGS *\nPSWDNFVO EQU   *\n         SPACE 2\n         TM    UPFLG2,UPPART       1 => PARTIAL VOLUME          * JGS *\n         BZ    PSWDNPVO            0 => NO, NOT PARTIAL, SO BR  * JGS *\n         MVI   PSWDRCU,X'00'       RETURN CODE IF OPER SAYS 'U'\n         MVC   ADR991DX+23(17),=CL24'(PARTIAL VOLUME).'         * JGS *\n         MVC   ADR992ID(24),=CL24'(PARTIAL VOLUME).'            * JGS *\n         MVC   ADR992IV+14(24),=CL24'(PARTIAL VOLUME).'         * JGS *\nPSWDNPVO EQU   *                                                * JGS *\n         SPACE 2\n         EJECT\n*  VOLUME OR DATA SET LEVEL ENTRY ?                             * JGS *\n         SPACE 1\n         MVC   ADR991DV+08(19),=CL19'ACCESS REQUESTED - '       * JGS *\n         MVC   ADR992IE,=CL13'VOLUME ENTRY.'                    * JGS *\n         SPACE 1\n         TM    UPFLG3,UPIND        1 => VOLUME LEVEL ENTRY    ? * JGS *\n         BNZ   PSWDNVLE            1 => YES, VOLUME ENTRY, SO BR* JGS *\n         LTR   R6,R6               R6 = 0 => NO DSN VOLUME ENTRY* JGS *\n         BZ    PSWDNVLE            0 => YES, NO DSN, SO BRANCH  * JGS *\n         SPACE 1                                                * JGS *\n         MVC   ADR992IE,=CL13'DSNAME ENTRY.'                    * JGS *\n         MVC   ADR991DX(4),=CL4'DSN='                           * JGS *\n         MVC   ADR991DX+4(44),0(R6)    DSNAME TO WTOR           * JGS *\n         MVC   ADR991DX+4+44(2),=CL2'  '  BLANK ').' IN WTOR    * JGS *\n         MVC   ADR992IV(4),=CL4'DSN='                           * JGS *\n         MVC   ADR992IV+4(44),0(R6)    DSNAME TO WTO            * JGS *\nPSWDNVLE EQU   *                                                * JGS *\n         SPACE 3\n*  CATALOG NAME PRESENT ?                                       * JGS *\n         SPACE 1\n         LTR   R7,R7               R7 = 0 => NO CAT NAME PASSED * JGS *\n         BZ    PSWDNCAT            0 => YES, NO CAT, SO BRANCH  * JGS *\n         SPACE 1                                                * JGS *\n         MVC   ADR992IC(4),=CL4'VSAM'                           * JGS *\n         TM    UPFLG3,UPVSMDAT     1 => VSAM DS IN ICF CAT    ? * JGS *\n         BZ    PSWDNICF            0 => NO, NOT ICF/VSAM, SO BR * JGS *\n         MVC   ADR992IC(4),=CL4' ICF'                           * JGS *\nPSWDNICF EQU   *                                                * JGS *\n         MVC   ADR992IC+4(44),0(R7)    CATALOG NAME TO WTO      * JGS *\n         B     PSWDECAT            BRANCH AROUND ALTERNATE CODE * JGS *\n         SPACE 1\nPSWDNCAT EQU   *                                                * JGS *\n         SPACE 2\n*  NO CATALOG NAME PRESENT - END MLWTO WITHOUT CATALOG NAME     * JGS *\n         MVC   ADR992IC-4(4),ADR992IL SHIFT END FLAGS OF MLWTO  * JGS *\n         SPACE 1\nPSWDECAT EQU   *                                                * JGS *\n         SPACE 3\n         EJECT\nPSWDPRMT XC    PSWDECB,PSWDECB     CLEAR THE ECB TO AWAIT THE REPLY\n         SPACE 1\n         WTOR  ,PSWDRPLY,,PSWDECB,MF=(E,ADR991D)   ASK THE OPER\n         SPACE 1\n         WAIT  ECB=PSWDECB         WAIT FOR A REPLY\n         SPACE 1\n         L     R1,PSWDMGID         GET WTO MESSAGE ID TO DOM\n         LTR   R1,R1               R1 = 0 => NO MESSAGE TO DOM\n         BZ    PSWDNDOM            0, SO BRANCH, NO MESSAGE TO DOM\n         SPACE 1\n         DOM   MSG=(1)             DOM - DELETE MESSAGE ADR992I\n         SPACE 1\nPSWDNDOM OI    PSWDRPLY,C' '       MAKE REPLY UPPER CASE\n         CLI   PSWDRPLY,C'U'       U (CONTINUE) ?\n         BE    PSWDU               YES, U, SO BRANCH\n         CLI   PSWDRPLY,C'T'       T (TERMINATE) ?\n         BE    PSWDT               YES, T, SO BRANCH\n         CLI   PSWDRPLY,C'Y'       Y (CONTINUE) ?               * JGS *\n         BE    PSWDU               YES, Y, SO BRANCH            * JGS *\n         CLI   PSWDRPLY,C'N'       N (TERMINATE) ?              * JGS *\n         BE    PSWDT               YES, N, SO BRANCH            * JGS *\n         CLI   PSWDRPLY,C'D'       D (DEBUG 0C1 DUMP) ?         * JGS *\n         BE    PSWDD               YES, D, SO BRANCH            * JGS *\n         CLI   PSWDRPLY,C'0'       0 (DEBUG RETURN CODE) ?      * JGS *\n         BNL   PSWD0               YES, 0-9, SO BRANCH          * JGS *\n         SPACE 1\n*  OPERATOR GAVE AN INVALID RESPONSE -                          * JGS *\n*    OPERATOR WANTS TO KNOW WHAT OPERATION IS BEING PERFORMED   * JGS *\n*    OR MAYBE JUST MADE A MISTAKE IN THE REPLY.                 * JGS *\n         SPACE 1\n         SLR   R0,R0               ZERO R0 FOR MLWTO            * JGS *\n         WTO   MF=(E,ADR992I)      TELL OPERATOR - REPLY IN ERROR\n         SPACE 1\n         ST    R1,PSWDMGID         SAVE WTO MESSAGE ID FOR DOM\n         SPACE 1\n         B     PSWDPRMT            ASK OPERATOR AGAIN\n         EJECT\nPSWDU    B     PSWDRET             GO EXIT - RETURN CODE IS ALREADY SET\n         SPACE 2\nPSWDT    MVI   PSWDRCU,X'14'       TERMINATE THIS OPERATION\n         B     PSWDRET             AND GO EXIT\n         SPACE 2\nPSWDD    DC    H'0'                ABEND 0C1 (FOR DUMP)         * JGS *\n         DC    CL10'ABEND 0C1 '    IDENTIFY NON-ACCIDENTAL DUMP * JGS *\n         DC    0H'0'               BOUNDARY ALIGNMENT           * JGS *\n         SPACE 2\nPSWD0    IC    R2,PSWDRPLY         PUT RESPONSE IN R2           * JGS *\n         SLL   R2,2                MULTIPLY BY 4                * JGS *\n         N     R2,=F'63'           TURN OFF EXTRANEOUS BITS     * JGS *\n         STC   R2,PSWDRCU          SAVE RETURN CODE             * JGS *\n         B     PSWDRET             AND GO EXIT                  * JGS *\n         SPACE 5\nPSWDRET  SR    R2,R2               CLEAR R2\n         IC    R2,PSWDRCU          PICK UP RETURN CODE FROM WORKAREA\n*  SAVE OUR RETURN CODE IN R2 SINCE FREEMAIN GIVES A RETURN CODE IN R15\n         SPACE 1\n         FREEMAIN  R,LV=PSWDRLEN,A=(R11)   FREEMAIN WORK AREA\n         SPACE 1\n         LR    R1,R13              SET UP FOR FREEMAIN OF SAVE AREA\n         L     R13,4(,R13)         POINT TO PRIOR (CALLER'S) SAVE AREA\n         FREEMAIN  R,LV=72,A=(1)   ISSUE FREEMAIN OF OUR SAVE AREA\n         SPACE 3\n         LR    R15,R2              RELOAD R15 AFTER FREEMAIN\n         RETURN (14,12),T,RC=(15)  RETURN TO CALLER\n         EJECT\n         LTORG\n         EJECT\n*  THIS IS THE WORK AREA FOR PRESERVING REENTRANCY.\n*  THIS DATA IS ACTUALLY COPIED TO A GETMAINED AREA DURING EXECUTION,\n*   WHICH IS ADDRESSED BY R11.\n         SPACE 1\nPSWDRSTR DC    0D'0',C'PSWDRSTR'   BOUNDARY ALIGNMENT AND ID\n         SPACE 1\nPSWDMGID DC    F'0'                ADR992I WTO MESSAGE ID FOR DOM\nPSWDECB  DC    F'0'                ECB FOR WAIT ON WTOR\nPSWDRCU  DC    F'0'                DEFAULT RETURN CODE IF OPER SAYS 'U'\nPSWDRPLY DC    CL10'  PSWDRPLY'    WILL SHOW UP IN DUMP\n         SPACE 2\n         PUSH  PRINT                                            * JGS *\n         PRINT ON,GEN,DATA         FOR CALCULATING OFFSETS      * JGS *\n         SPACE 1\n*              0        10        20        30        40        50\n*              01234567890123456789012345678901234567890123456789012345\n*                 60        70        80        90       100       110\n*              67890123456789012345678901234567890123456789012345678901\n*                    120\n*              23456789012         MAXIMUM OF 122 CHARACTERS IN WTOR\n         SPACE 2\n* ALTERNATE WORDS ==> 'TARGET VOLUME = VOLSER.'  OVERLAY DSN=...* JGS *\nADR991D  WTOR  'ADR991D JOBNAME., STEPNAME, CUU, VOLSER. ACCESS REQUEST*\n               ED - DSN=A2345678.B2345678.C2345678.D2345678.E2345678. (*\n               U,T, ?)',                                               *\n               ,1,,DESC=(2),ROUTCDE=(4),MF=L     REPLY LENGTH=1 * JGS *\n         SPACE 2\nADR991DJ EQU   ADR991D+12+8,8,C'C'     JOBNAME                  * JGS *\nADR991DS EQU   ADR991D+12+18,8,C'C'    STEPNAME                 * JGS *\nADR991DU EQU   ADR991D+12+28,3,C'C'    UCB UNIT ADDRESS         * JGS *\nADR991DV EQU   ADR991D+12+33,6,C'C'    VOLSER. ACCESS REQUESTED * JGS *\nADR991DX EQU   ADR991D+12+60,58,C'C'   DSN= | TARGET VOL=...U,T)* JGS *\n         SPACE 2\n*DR992I  WTO   'ADR992I JOBNAME., STEPNAME, REPLY IN ERROR. REPLY WITH *\n               \"U\" (USE) OR \"T\" (TERMINATE) - TARGET OF OP = ???',     *\n               DESC=(2),ROUTCDE=(4),MF=L           COPY,PRINT,RESTORE.\nADR992I  WTO   ('ADR/JGS992I JOBNAME., STEPNAME, V.2.5 PARAMETERS ARE: *\n               ',L),                                                   *\n               ('REPLY WITH \"U\" (CONTINUE) OR \"T\" (TERMINATE) OP = ??? *\n               ',L),                                                   *\n               ('WRITE (PARTIAL VOLUME). VOLUME ENTRY.                 *\n               ',D),                                                   *\n               ('VOLUME=VOLSER (PARTIAL VOLUME).                       *\n               ',D),                                                   *\n               ('VSAM CAT= (NONE).                                     *\n               ',D),                                                   *\n               ('THIS ENDING LINE WILL NOT APPEAR IN THE MLWTO.        *\n               ',E),                                                   *\n               DESC=(2),ROUTCDE=(4),MF=L                        * JGS *\n         SPACE 2\nADR992IJ EQU   ADR992I+4+012,8,C'C'   JOBNAME                   * JGS *\nADR992IS EQU   ADR992I+4+022,8,C'C'   STEPNAME                  * JGS *\nADR992IR EQU   ADR992I+4+034,3,C'C'   VERSION-RELEASE-MOD LEVEL * JGS *\nADR992IO EQU   ADR992I+4+111,8,C'C'   OPERATION                 * JGS *\nADR992IW EQU   ADR992I+4+124,5,C'C'   READ | WRITE              * JGS *\nADR992ID EQU   ADR992I+4+130,18,C'C'  PARTIAL | FULL | BY DSNAME* JGS *\nADR992IE EQU   ADR992I+4+148,13,C'C'  ENTRY (VOLUME | DSNAME)   * JGS *\nADR992IV EQU   ADR992I+4+182,48,C'C'  VOLUME=... | DSN=...      * JGS *\nADR992IC EQU   ADR992I+4+240,53,C'C'  VSAM CAT=...              * JGS *\nADR992IL EQU   ADR992I+4+294,53,C'C'  END LINE LEN + LINE TYPE  * JGS *\n         SPACE 1\n         POP   PRINT                                            * JGS *\n         SPACE 2\n         DC    CL8'PSWDREND'\nPSWDREND DC    0D'0'               END OF MODIFIABLE AREA\nPSWDRLEN EQU   PSWDREND-PSWDRSTR   LENGTH OF WORK AREA\n         SPACE 2\n         DROP  ,                   DROP ALL PREVIOUS BASE REGISTERS\n         SPACE 2\n*  THIS IS THE LOGICAL END OF JGSUPSWD/ADRUPSWD\n*        - USER AUTHORIZATION ROUTINE\n         SPACE 3\n         IEZBITS                   DEFINE BITS TO TEST\n         SPACE 6\n         ADRUPB                    AUTHORIZATION EXIT PARM LIST * JGS *\n         SPACE 3\n         ADRUNQB                   ENQUE EXIT PARAMETER LIST    * JGS *\n         EJECT\n         SPACE 3                                                * JGS *\n         IHACDE ,                                               * JGS *\n         SPACE 3                                                * JGS *\n         IKJTCB ,                                               * JGS *\n         SPACE 3                                                * JGS *\n         PUSH  PRINT                                            * JGS *\n         PRINT NOGEN                                            * JGS *\nUCBDSECT DSECT                                                  **JRL**\n         SPACE 1                                                **JRL**\n         IEFUCBOB                                               **JRL**\n         POP   PRINT                                            * JGS *\n         SPACE 5\n         CVT   DSECT=YES                                        **JRL**\n         SPACE 5\n         END   FASTDSS,(JOHN.GRADY,.SUL,LIVAN)                  * JGS *\n/*\n//LKED.SYSLMOD   DD  DISP=SHR,DSN=SYS1.LINKLIB,\n//             UNIT=3390,VOL=SER=INDIAN,SPACE=\n//LKED.SYSPRINT  DD  SYSOUT=*\n//LKED.SYSLIB    DD  DISP=SHR,DSN=SYS1.LINKLIB,\n//             UNIT=3390,VOL=SER=INDIAN\n//LKED.SYSIN     DD  *\n  INCLUDE  SYSLIB(ADRDSSU)\n  ENTRY    FASTDSS\n  ORDER    FASTDSS(P)\n  SETCODE  AC(1)\n  NAME     FASTDSS(R)\n/*\n//TESTDSS    EXEC  PGM=FASTDSS,REGION=2000K\n//TESTDSS.SYSPRINT DD SYSOUT=*\n//SYSUDUMP   DD  SYSOUT=*\n//STEPLIB    DD  DISP=(SHR,PASS),DSN=*.S1.LKED.SYSLMOD,\n//             VOL=REF=*.S1.LKED.SYSLMOD\n//DISK       DD  DISP=SHR,DSN=SYS1.NUCLEUS,\n//             UNIT=3390,VOL=SER=INDIAN\n//OUTDD      DD  UNIT=SYSDA,SPACE=(CYL,(2,2))   NO VIO FOR DF/DSS V2\n//SYSIN      DD  *\n  DUMP     INDD(DISK) OUTDD(OUTDD) TRACKS( (0,0,0,0) )\n  DUMP     INDD(DISK) OUTDD(OUTDD)     -\n           DATASET( INCLUDE(SYS1.BLGMAC2) BY((DSORG \u00ac= VSAM)) )\n  COMPRESS DDN(DISK)     -\n                    INCLUDE(SYS1.BLGMAC2) BY((DSORG \u00ac= VSAM))\n  PRINT    INDD(DISK) TRACKS( (0,0,0,0) )\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT320/FILE320.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT320", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}