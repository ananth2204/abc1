An on-line DASD monitor


Introduction

The daily monitoring and management of DASD space at an
installation can be a time consuming and arduous task. In order
to facilitate this task at our installation I decided to write a
DASD monitoring utility to keep track of the DASD space
statistics.

The utility was developed in two phases. Initially a REXX
EXEC was coded that allowed me to display the status and
statistics of all on-line DASD under TSO - the output was in
line mode and could be executed under TSO or ISPF. Sample
output is shown in Figure 1.

The fields from the output of the ODASD REXX EXEC have
the following meanings:

Volume      VOLSER of DASD

Dev Add      Device address

Dev Type      Device type (3350, 3380 etc)

IX      Is VTOC index active?

Mn At      Mount attribute (PRivate, PUblic or STorage)

CHP      Channel first 2 paths to device from UCB

PG      Paging volume?

SR      System residence volume?

Free Cyls/Trks      Total number of free cylinders and tracks

#Free      Total number of free extents

Max Cyls/Trks      Maximum extent size in cylinders and tracks.

Finally, I created an ISPF dialog front-end to the ODASD
REXX EXEC to present the information in a full-screen display
with a graphical representation of the data. The dialog is called
DMON. Sample output is shown in Figure 2. The ISPF panel
displays data in colour. The DMON utility has support built in
for 3330, 3350, 3375, 3380, and 3390 device types.


Using DMON

To use DMON issue the following command under ISPF:

      TSO %DMON <optional_volser_prefix>

The DMON REXX EXEC will call the ODASD REXX EXEC
to gather information for all or for a subset of the installation's
DASD, depending on whether or not a VOLSER prefix is
given on the command. ODASD finds all on-line DASD via
the UCB control block chain in MVS. It calls LSPACE and
OBTAIN external REXX functions to gather additional
information. The output shown in Figure 1 is produced by
ODASD and is trapped by DMON via the REXX OUTTRAP
function. DMON then processes the data and presents it to the
user via an ISPF panel.

The user can opt to see only a subset of the DASD by entering
a VOLSER prefix in the Volume Mask field on the panel. The
user can also set a 'hi-threshold' value - this will cause all
DASD that have space utilization greater than the high
threshold to be highlighted. The user also has the ability to sort
the displayed data in device address, maximum extent size,
percentage used, or VOLSER order.

The total capacity of the current pool of DASD, identified by
the VOLSER prefix, is given, together with the amounts free
and used.


Development of DMON

I started off by writing a REXX EXEC, ODASD, that searched
for all on-line DASD (via the UCB chain) and reported on the
VOLSER, status, type (3350, 3380 etc).

I soon found that it would be impossible to get the real DASD
information (space utilization, device characteristics, etc) via
REXX EXECs. The information I required could be obtained
using IBM's LSPACE and OBTAIN macros. In order to use
them I wrote two REXX external functions.

These were essentially two small Assembler programs (see
SC28-1883, TSO/E REXX Reference manual for details on
how to code REXX external functions). Both the LSPACE and
the OBTAIN macros are documented in SC26-4567,
MVS/DFP System Programming Reference. Finally I wrote an
ISPF dialog, using two ISPF panels (DMONP01 and
DMONHP01) and another REXX EXEC (DMON) to front-end
the original REXX EXEC to give a graphical enhanced view of
all on-line DASD, showing the total DASD capacity of the
installation at a glance, together with other useful features such
as sorting capabilities and the ability to display specific DASD
pools.

The external functions need to be placed either in a STEPLIB
library or in the system LINKLIST so that they are accessible
to the user invoking the REXX EXECs. The REXX EXECs
and the panels need to be placed in the ISPPROC and ISPPLIB
libraries allocated to the user's TSO log-on procedure.


DMON REXX EXEC

/*------------------------------ Rexx -------------------------------*/
/* Function   : Display information for all on-line DASD             */
/* Callers    : TSO user/DMON exec                                   */
/* Dependancy : LSPACE/OBTAIN (external functions)                   */
/* Syntax     : ODASD <volser_mask>                                  */
/*-------------------------------------------------------------------*/
arg volser .
x = 0
if volser = '' then
  do
     volser = '*'
     x = -1
  end
say 'Searching for online DASD with volser ==> 'volser
if x = 0 then
  do
     x = pos('*',volser)
     if x > 0 then volser = substr(volser,1,x-1)
     if x = 0 and length(volser) < 6 then x = 1
  end
/* Set up constants */
dasd_ucb = '20'x
online = '80'x
indx_vtoc = '80'x
/* Find UCB area via CVT */
cvt = storage(10,4)
cvtucba = storage(d2x(c2d(cvt) + c2d('4e4'x)),4)
ucba = cvtucba
say
say '       Dev Dev   I Mn       P S  -----Free----- #Free ---Max---'
say 'Volume Add Type  X At  CHP  G R  Cyls Trks  %    Exts Cyls Trks'
do forever
   ucbtbyt3 =  storage(d2x(c2d(ucba) + c2d('12'x)),1)
   /* ensure bit 2 of ucbtbyt3 field is set (ie: UCB for DASD) */
   bit2 = bitand(ucbtbyt3,dasd_ucb)
   if (bit2 = dasd_ucb) then
     do
       ucbstat = storage(d2x(c2d(ucba) + c2d('03'x)),1)
       /* ensure bit 0 of ucbstat field is set (ie: online) */
       bit0 = bitand(ucbstat,online)
       if bit0 = online then ,
         do
            if bitand(ucbstat,'02'x) = '02'x then sysr = 'Y'
            else sysr = 'N'
            ucbuntyp = storage(d2x(c2d(ucba) + c2d('13'x)),1)
            devt = 'DASD'
            if bitand(ucbuntyp,'09'x) = '09'x then devt = '3330'
            if bitand(ucbuntyp,'0B'x) = '0B'x then devt = '3350'
            if bitand(ucbuntyp,'0C'x) = '0C'x then devt = '3375'
            if bitand(ucbuntyp,'0E'x) = '0E'x then devt = '3380'
            if bitand(ucbuntyp,'0F'x) = '0F'x then devt = '3390'
            ucbname = storage(d2x(c2d(ucba) + c2d('0d'x)),3)
            ucbvol1 = storage(d2x(c2d(ucba) + c2d('1c'x)),6)
            if c2x(ucbvol1) = '000000000000' then ucbvol1 = ' N/A '
            ucbstab = storage(d2x(c2d(ucba) + c2d('22'x)),1)
            use = ''
            if bitand(ucbstab,'10'x) = '10'x then use = 'PR'
            if bitand(ucbstab,'08'x) = '08'x then use = 'PU'
            if bitand(ucbstab,'04'x) = '04'x then use = 'ST'
            if bitand(ucbstab,'40'x) = '40'x then page = 'Y'
            else page = 'N'
            chp = c2x(storage(d2x(c2d(ucba) - c2d('18'x)),8))
            chps = substr(chp,1,2)'-'substr(chp,3,2)
            other = chps' 'page' 'sysr
            ix = 'N'
            if ((x < 1) | (substr(ucbvol1,1,length(volser)) = volser)),
                 & bit0 = online then ,
                do
                   fmt4 = obtain(ucbvol1)
                   ds4devsz = substr(fmt4,19,4)
                   cyls = c2d(substr(ds4devsz,1,2))-1
                   trks_per_cyl = c2d(substr(ds4devsz,3,2))
                   ds4devtk = c2d(substr(fmt4,23,2))
                   den = 0
                   if (devt = '3330' | devt = '3350' | devt = '3375'),
                      then den = 1
                   if devt = '3380' then den = cyls%885
                   if devt = '3390' then den = cyls%1113
                 select
                   when den = 1 then devt = devt'S'
                   when den = 2 then devt = devt'D'
                   when den = 3 then devt = devt'T'
                   otherwise devt = devt'?'
                 end
                 lsp = lspace(ucba)
                 retc = length(lsp)
                 if retc >= 36 then retc = 0
                 select
                   when retc = 0 then
                     do
                      lspdstat = substr(lsp,2,1)
                      lspdnext = format(c2d(substr(lsp,5,4)),4)
                      lspdtcyl = format(c2d(substr(lsp,9,4)),4)
                      lspdttrk = format(c2d(substr(lsp,13,4)),4)
                      lspdlcyl = format(c2d(substr(lsp,17,4)),4)
                      lspdltrk = format(c2d(substr(lsp,21,4)),4)
                      perc = ((c2d(substr(lsp,9,4)) + ,
                             c2d(substr(lsp,13,4))/trks_per_cyl)/cyls)
                      perc = format(perc*100,2,1)
                      exts = lspdnext
                      tfre = lspdtcyl' 'lspdttrk' 'perc
                      lext = lspdlcyl' 'lspdltrk
                      if bitand(lspdstat,indx_vtoc) = indx_vtoc then,
                         ix = 'Y'
                      other = other' 'tfre'  'exts' 'lext
                     end
                   when retc = 4 then,
                       other = other' Permanent_I/O_Error'
                   when retc = 8 then,
                       other = other' Non-Standard_OS_Volume'
                   when retc = 12 then,
                       other = other' Invalid_Parm_or_UCB_Not_Ready'
                   when retc = 16 then,
                       other = other' Invalid_Parm_List'
                   otherwise,
                       other = other' LSPACE:_Invalid_UCB_addr'
                 end
                 say ucbvol1 ucbname devt ix use other
              end
         end
     end
   else nop
   ucba = storage(d2x(c2d(ucba) + c2d('08'x)),4)  /* UCBNXUCB */
   if c2d(ucba) = 0 then leave
end
say 'All 'status' volumes searched.'
exit


LSPACE SOURCE CODE

         TITLE 'LSPACE - Obtain DASD Volume Information'
*====================================================================*
*                   A T T R I B U T E S                              *
* LSPACE AC(0),AMODE(31),RMODE(ANY)                                  *
* FUNCTION  : This is a REXX external function routine that returns  *
*             DASD volume information by using the LSPACE macro.     *
*             The length of data returned is 36 bytes, unless an     *
*             error is returned from the LSPACE macro. This will be  *
*             indicated by the length of the data returned - the     *
*             actual data in this case will itself be invalid, only  *
*             the length will be significant.                        *
* INVOCATION: Use as any normal REXX function. For example:          *
*                DATA = LSPACE(hex_dasd_ucb_addr)                    *
*====================================================================*
         TITLE 'LSPACE - INITIALIZATION'
*====================================================================*
*--------------------------------------- SAVE AREA CHAINING ---------*
LSPACE   CSECT
LSPACE   AMODE 31
LSPACE   RMODE ANY
         SAVE (14,12),,'LSPACE.&SYSDATE..G B Din'
         BASR  R12,0
         USING *,R12
         LA    R2,SAVE                 ->MY SAVEAREA
         ST    R13,4(R2)               - SAVE CALLERS SAVEAREA ADDR
         ST    R2,8(R13)               - MY SAVEAREA ADDR IN CALLERS
         LR    R13,R2                  ->MY SAVEAREA
         TITLE 'LSPACE - MAINLINE CODE'
*--------------------------------------- GET PARAMETER INFO ---------*
         LR    R11,R1                  ->EFPL
         USING EFPL,R11
         L     R10,EFPLARG             ->ARGUMENTS TABLE
         USING ARGTABLE_ENTRY,R10
         L     R8,EFPLEVAL             ->ADDRESS OF EVALBLOCK
         L     R9,0(0,R8)              ->EVALBLOCK
         USING EVALBLOCK,R9
*--------------------------------------- GET ASID -------------------*
         L     R8,ARGTABLE_ARGSTRING_PTR ->UCB_ADDR Field
         C     R8,=F'-1'               - END OF PARMLIST ?
         BNE   GETUCB
         LA    R15,20                  - SIGNAL ERROR
         B     EXIT                    - EXIT
GETUCB   L     R7,ARGTABLE_ARGSTRING_LENGTH - LENGTH OF UCB FIELD
         C     R7,=F'4'                - IS LENGTH = 4 BYTE ?
         BE    MVCUCB                  - YES, GET UCB address
         LA    R15,20                  - SIGNAL ERROR
         B     EXIT                    - EXIT
MVCUCB   ICM   R3,B'1111',0(R8)        ->UCB
         LA    R5,36                   - LENGTH of data to be returned
         ST    R5,EVALBLOCK_EVLEN      - LENGTH OF DATA RETURNED
         LA    R4,EVALBLOCK_EVDATA     ->OUTPUT AREA
*--------------------------------------- Issue LSPACE macro ---------*
         LSPACE UCB=(R3),DATA=(R4),MF=I
         LTR   R15,R15
         BZ    EXIT
         ST    R15,EVALBLOCK_EVLEN      - Indicate RC in length field
         LA    R15,0                    - Reset RC to zero
         TITLE 'LSPACE - RETURN TO CALLER'
*--------------------------------------- RETURN TO CALLER -----------*
EXIT     L     R13,SAVE+4              ->CALLERS SAVEAREA
         L     R14,12(,R13)
         LM    R1,R12,24(R13)
         BSM   R0,R14                  - RETURN WITH RC IN R15
         TITLE 'LSPACE - SAVE/WORKAREA'
*--------------------------------------- REGISTER SAVEAREA ----------*
SAVE     DS    0F
         DC    C'PL1 PSA NSA RET EP  R0  R1  R2  R3  '
         DC    C'R4  R5  R6  R7  R8  R9  R10 R11 R12 '
*--------------------------------------- MISC. CONSTANTS ------------*
*--------------------------------------- LITERAL POOL ---------------*
         LTORG
         TITLE 'LSPACE - MACROS'
*--------------------------------------- DSECTS ---------------------*
         IRXEFPL
         IRXARGTB
         IRXEVALB
         END


OBTAIN SOURCE CODE

         TITLE 'OBTAIN - Read a Format4 DSCB'
*====================================================================*
*                   A T T R I B U T E S                              *
* OBTAIN AC(0),AMODE(31),RMODE(ANY)                                  *
* FUNCTION  : This is a REXX external function routine that returns  *
*             the format4 DSCB for a VOLSER using the OBTAIN macro.  *
*             The length of data returned is 140 bytes.              *
* INVOCATION: Use as any normal REXX function. For example:          *
*                FMT4 = OBTAIN(volser)                               *
*====================================================================*
         TITLE 'OBTAIN - INITIALIZATION'
*--------------------------------------- SAVE AREA CHAINING ---------*
OBTAIN   CSECT
OBTAIN   AMODE 31
OBTAIN   RMODE ANY
         SAVE (14,12),,'OBTAIN.&SYSDATE..G B Din'
         BASR  R12,0
         USING *,R12
         LA    R2,SAVE                 ->MY SAVEAREA
         ST    R13,4(R2)               - SAVE CALLERS SAVEAREA ADDR
         ST    R2,8(R13)               - MY SAVEAREA ADDR IN CALLERS
         LR    R13,R2                  ->MY SAVEAREA
         TITLE 'OBTAIN - MAINLINE CODE'
*--------------------------------------- GET PARAMETER INFO ---------*
         LR    R11,R1                  ->EFPL
         USING EFPL,R11
         L     R10,EFPLARG             ->ARGUMENTS TABLE
         USING ARGTABLE_ENTRY,R10
         L     R8,EFPLEVAL             ->ADDRESS OF EVALBLOCK
         L     R9,0(0,R8)              ->EVALBLOCK
         USING EVALBLOCK,R9
*--------------------------------------- GET ASID -------------------*
         L     R8,ARGTABLE_ARGSTRING_PTR ->VOL_ADDR Field
         C     R8,=F'-1'               - END OF PARMLIST ?
         BNE   GETVOL
         LA    R15,20                  - SIGNAL ERROR
         B     EXIT                    - EXIT
GETVOL   L     R7,ARGTABLE_ARGSTRING_LENGTH - LENGTH OF VOL FIELD
         C     R7,=F'6'                - IS LENGTH = 6 BYTE ?
         BE    MVCVOL                  - YES, GET VOLSER
         LA    R15,20                  - SIGNAL ERROR
         B     EXIT                    - EXIT
MVCVOL   MVC   VOLSER,0(R8)            - VOLSER
         LA    R5,140                  - LENGTH of data to be returned
         ST    R5,EVALBLOCK_EVLEN      - LENGTH OF DATA RETURNED
*--------------------------------------- Issue OBTAIN macro ---------*
         OBTAIN FORMAT4
         LTR   R15,R15
         BZ    CONT
         ST    R15,EVALBLOCK_EVLEN      - Indicate RC in length field
         LA    R15,0                    - Reset RC to zero
CONT     MVC   EVALBLOCK_EVDATA(140),DSCBAREA - Return DSCB
         TITLE 'OBTAIN - RETURN TO CALLER'
*--------------------------------------- RETURN TO CALLER -----------*
EXIT     L     R13,SAVE+4              ->CALLERS SAVEAREA
         L     R14,12(,R13)
         LM    R1,R12,24(R13)
         BSM   R0,R14                  - RETURN WITH RC IN R15
         TITLE 'OBTAIN - SAVE/WORKAREA'
*--------------------------------------- REGISTER SAVEAREA ----------*
SAVE     DS    0F
         DC    C'PL1 PSA NSA RET EP  R0  R1  R2  R3  '
         DC    C'R4  R5  R6  R7  R8  R9  R10 R11 R12 '
*--------------------------------------- MISC. CONSTANTS ------------*
FORMAT4  CAMLST SEARCH,DSN,VOLSER,DSCBAREA
DSN      DC    44X'04'
VOLSER   DS    CL6
DSCBAREA DS    CL140
*--------------------------------------- LITERAL POOL ---------------*
         LTORG
         TITLE 'OBTAIN - MACROS'
*--------------------------------------- DSECTS ---------------------*
         IRXEFPL
         IRXARGTB
         IRXEVALB
         END


JCL TO COMPILE AND LINK THE REXX EXTERNAL FUNCTIONS

//JOBcard information
//*-------------------------------------------------------------------*
//*                   COMPILE AND LINK  JCL                           *
//*-------------------------------------------------------------------*
//ACL      EXEC ASMHCL,PARM.L='LIST,LET,MAP',COND.L=(4,LT)
//C.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//C.SYSPRINT DD SYSOUT=A
//C.SYSIN  DD *
<REXX external function source code>
//L.SYSLMOD DD DSN=<user_load_library>
//L.SYSPRINT DD SYSOUT=*
//L.SYSIN  DD *
  NAME LSPACE(R)
//* or OBTAIN(R)


DMON REXX EXEC

/*------------------------------ Rexx -------------------------------*/
/* Function   : Display the Free space for all or selected DASD.     */
/* Callers    : TSO User                                             */
/* Dependancy : ODASD (exec)                                         */
/* Syntax     : DMON <mask>                                          */
/*-------------------------------------------------------------------*/
arg mask .
if mask = '' then mask = '*'
/*---------------------------------------------------------------*/
/* Perform initialization - set up constants etc.                */
/*---------------------------------------------------------------*/
/* System related information from CVT etc. */
cvt = storage(10,4)
cvtext2 = storage(d2x(c2d(cvt) + c2d('149'x)),3)
cvtuser = storage(d2x(c2d(cvt) + c2d('cc'x)),4)
/* find CPU type */
cpup = storage(208,4)
cpu = storage(d2x(c2d(cpup) + 12),4)
/* find sys-id   */
cvtsname = d2x(c2d(cvt) + c2d('154'x))
sid = storage(cvtsname,8)
/* find os level */
cvtprod = d2x(c2d(cvt) - c2d('28'x))
splvl = storage(cvtprod,16)
/* capacity in Gbytes of 3330 */
C3330S = 0.095
/* capacity in Gbytes of 3350 */
C3350S = 0.32
/* capacity in Gbytes of 3375 */
C3375S = 0.41
/* capacity in Gbytes of single, double and triple density 3380 */
C3380S = 0.63; C3380D = 1.26; C3380T = 1.89
/* capacity in Gbytes of single, double and triple density 3390 */
C3390S = 0.95; C3390D = 1.89; C3390T = 2.83
/* Hi-Threshold for DASD utilization monitoring */
hi = 80
/* ISPF panel attribute characters */
bl = '51'x
gr = '52'x
re = '53'x
/* Determine size of display area */
address ispexec "VGET (ZSCREEND) SHARED"
lines_in_display = zscreend - 10
/* Misc variables */
s = 'V'                          /* Default sort field (volser)  */
end = 0
do while (¬end)
  /*---------------------------------------------------------------*/
  /* Get data related to all on-line DASD from system.             */
  /*---------------------------------------------------------------*/
  null = OUTTRAP('dasd.')
  address TSO "ODASD" mask
  null = OUTTRAP()
  r = 'N'
  do while (r = 'N')
    cp = 0
    used = 0
    max_line = 0
    do i = 5 to (dasd.0)-1
      vol = word(dasd.i,1)         /* VolSer                        */
      if mask ¬= '*' then ,
        if substr(vol,1,length(mask)) ¬= mask then iterate
      dev = word(dasd.i,2)         /* Device address                */
      devt = word(dasd.i,3)        /* Device type                   */
      ix = word(dasd.i,4)          /* Indexed VTOC indicator        */
      att = word(dasd.i,5)         /* Mount attribute               */
      chps = word(dasd.i,6)        /* Channel paths (1st two only)  */
      pg = word(dasd.i,7)          /* Paging volume indicator       */
      sr = word(dasd.i,8)          /* Sysres volume indicator       */
      text = word(dasd.i,12)       /* Total number of free extents  */
      /* cater for permanent error in device condition */
      if datatype(text) ¬= 'NUM' then
        do
          text = '0'
          unuse = 100
          max = '0'
        end
      else
        do
          unuse = word(dasd.i,11)  /* %Used space on volume         */
          max = word(dasd.i,13)    /* Maximum free cyl-extent size  */
        end
      text = format(text,4)
      max = format(max,4)
      use = 100-unuse
      /* Special case for an uninitialized unit */
      if (use = 100) & (max > 0) then use = 0
      if use >= hi then co = re
      else co = gr
      bar = copies('*',format(use/4,3,0))
      use = format(use,3,1)
      den = substr(devt,5,1)
      if den ¬= '?' then
        do
          interpret 'cp = cp + C'devt
          interpret 'used = used + C'devt'*(use/100)'
        end
      else
        do
          cp = cp + C3380T
          used = used + C3380T*(use/100)
        end
      /* Build panel data-line */
      max_line = max_line + 1      /* Increase max data-line count  */
      lne.max_line = bl || dev || co || vol || bl || att'  ' ||,
                     co || max' 'text' 'ix' 'pg' 'sr || co || devt' ',
                     chps' 'use'    'bar
      lne.max_line = left(lne.max_line,80)
    end
    /* work out percentage free space */
    free = cp - used
    free = format(free,5,2)
    used = format(used,5,2)
    if cp > 0 then pf = format((free/cp)*100,5,2)
    else pf = 0
    /*--------------------------------------------------------------*/
    /* Function  : Sort according DASD info using requested field.  */
    /*--------------------------------------------------------------*/
    sorted = 0
    select                           /* Set sort field positions    */
      when s = 'D' then
        do
          sp = 2
          ln = 3
        end
      when s = 'V' then
        do
          sp = 6
          ln = 6
        end
      when s = 'U' then
        do
          sp = 47
          ln = 5
        end
      when s = 'M' then
        do
          sp = 18
          ln = 4
        end
      otherwise nop
    end
    do while (¬sorted)
      sorted = 1
      do l = 2 to max_line           /* Perform a bubble sort       */
        m = l - 1
        if substr(lne.l,sp,ln) < substr(lne.m,sp,ln) then
           do
             sorted = 0
             prev_lne = lne.m
             lne.m = lne.l
             lne.l = prev_lne
           end
      end
    end
    full_data = ''                 /* Sorted array of data-lines    */
    do l = 1 to max_line
      full_data = full_data || lne.l
    end
    /* Set start and end positions of data display */
    start_line = 1
    end_line = lines_in_display
    if max_line < end_line then end_line = max_line
    enter = 0
    do while (¬enter)
      l1 = format((80+start_line-1)/80,3,0)
      l2 = format(end_line,3,0)
      l3 = format(max_line,3,0)
      pdata = substr(full_data,start_line,end_line*80)
      pdate = date('U')
      ptime = time()
      address ispexec "DISPLAY PANEL(DMONP01)"
      retc = RC
      /*------------------------------------------------------------*/
      /* Process return code/pfk from panel return.                 */
      /*------------------------------------------------------------*/
        select
          when pfk = 'UP' then
            do
              start_line = start_line - (lines_in_display*80)
              if start_line < 1 then start_line = 1
              end_line = (80+start_line-1)/80 + lines_in_display - 1
              if max_line < end_line then end_line = max_line
            end
          when pfk = 'DOWN' then
            do
              end_line = end_line + lines_in_display
              if max_line < end_line then end_line = max_line
              start_line = (end_line - lines_in_display)*80 + 1
              if start_line < 1 then start_line = 1
            end
          when retc = 8 then             /* Set flags to allow exit */
            do
              enter = 1
              end = 1
              r = 'Y'
            end
          otherwise enter = 1
        end
    end
  end
end
exit


DMONP01 PANEL

)Attr default(|+_)
  $ type(output) intens(high) color(yellow) just(left ) caps(off) pad(' ')
  ! type(text) intens(high) color(green) caps(off) hilite(reverse)
  + type(text) intens(low) color(turq) caps(off)
  $ type(input) intens(high) color(red) caps(on)
  @ area(dynamic) scroll(on) extend(on)
  ff type(datain) intens(high) color(pink)
  51 type(dataout) intens(low) color(blue)
  52 type(dataout) intens(low) color(green)
  53 type(dataout) intens(high) color(red)
)Body expand(\\)
! \ \ DMON Ver2.2 \ \
+        CPU:$cpu +SYSID:$sid +REL:$splvl   +DATE:$pdate   +TIME:$ptime   +
|Command ===>_zcmd
+Volume Mask:$mask  + Hi-Threshold:$hi+% Sort:$s+(D,M,U,V) Refresh:$r+(Y/N)
+Pool Total:$cp   +Gb Used:$used +Gb/Free:$free +Gb($pf   +%) $l1 +to$l2 +of$l3
|Dev        Mnt  Max  Tot# I P S Dev                       2    4    6    8    0
|Add VolSer Att CylEx Exts X G R Type  CHPids %Used   0----0----0----0----0----0
@pdata                                                                         @
\ \ |PF3+END |PF7+UP |PF8+DOWN \ \
+
)Init
 .help = DMONHP01
 .cursor = zcmd
 if (&r = &z)
   &r = 'N'
 if (&s = &z)
   &s = 'V'
)Proc
 if (&mask = ' ')
   &mask = '*'
 ver (&r,list,Y,N)
 ver (&s,list,D,V,U,M)
 ver (&hi,range,0,100)
 &pfk = &zverb
)End


DMONHP01 HELP PANEL

)Attr default(|+_)
  $ type(output) intens(high) color(yellow) just(left ) caps(off) pad(' ')
  ! type(text) intens(high) color(green) caps(off) hilite(reverse)
  + type(text) intens(low) color(turq) caps(off)
  $ type(input) intens(high) color(red) caps(on)
  @ type(text) intens(high) color(blue)
)Body expand(\\)
! \ \ DMON Help \ \
+        CPU:$cpu +SYSID:$sid +REL:$splvl   +DATE:$pdate   +TIME:$ptime   +
|Command ===>_zcmd
+
+DMON@allows you to get a global view of the state of all online DASD.
+
@Input field descriptions:
+
+   Volume Mask:@This field is used to select only those online volumes, whose
@                volser starts with the specified mask. The mask can be 1 to 6
@                characters long or can be an "*" to represent any volser.
+
+  Hi-Threshold:@This field is used to specify the DASD utilization after which
@                the entry for a volume is highlighted.
+
+          Sort:@This field is used to specify which of the columns to sort on.
@                The valid values are:+D@Device address,+M@Max free cylinder
@                extent,+U@%Used, and+V@Volser.
+       Refresh:@A+Y@in this field causes the DASDMON to refresh all the data by
@                scanning system control blocks and using the LSPACE and OBTAIN
@                macros.
+
\ \ |PF3+END \ \
)Init
)Proc
)End


G B Din
Technical Consultant
IMI Computing Ltd (UK)                                    c Xephon 1992

