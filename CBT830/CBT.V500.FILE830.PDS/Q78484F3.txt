Exploiting dynamic EDT

Previously, when an Eligible Device Table (EDT) change was
required, an outage for an IPL was required. These EDT changes
were often to reflect the deletion or addition of DASD on our
floor; however, there were times when these changes were only
temporary for a particular batch cycle, eg processing a year-end
cycle when an extra volume defined to the work SYSPOOL was
required to handle the extra data processed during year-end sorts.
This would require two outages: one to add the volume to the
SYSPOOL and another to remove it upon completion of the batch
cycle.

To avoid the above outages, we migrated our MVSCP/IOCP
information to an Input/Output Definition File (IODF), which in
turn allowed us to get to dynamic software, which in turn allowed
dynamic EDT changes.

An IBM ES/9000 series processor is not a requirement to exploit
dynamic software. In fact, our processor is non-IBM and runs
MVS (JES2) 4.2.2. Getting to dynamic software is not hardware-
dependent; on the other hand, dynamic hardware requires an IBM
ES/9000 (DRM) or OEM equivalent and MVS 4.2 or higher. To
re-iterate, if one has MVS 4.2 or higher then dynamic software is
possible.

OVERVIEW

Previously, when we wanted to make EDT changes, we would
modify the EDT statement in our deck (we have MVSCP and
IOCP in the same deck) and then submit a batch job to process
the modified deck which in turn would rebuild the IEFEDTxx
member in SYS1.NUCLEUS. Once this was complete, an IPL of
the system would be performed, which would pick up the EDT
changes and write them to storage. Given the location of the EDT,
it would remain unchanged for the life of the IPL.

The following outlines the steps we took to migrate to dynamic
software in order to eliminate the need for an outage to modify the
EDT.

Verify HCD environment in place

In order to get to dynamic software, or hardware for that matter,
you need to build an IODF (and IPL from it) and in order to do
that you need the Hardware Configuration Definition (HCD)
ISPF dialog in place. All dialog to the IODF, by the user, is done
through this facility. The following are the datasets related to
HCD:

o      SYS1.SCBDCLST (CLIST)

o      SYS1.SCBDMENU (load)

o      SYS1.SCBDPENU (panel)

o      SYS1.SCBDHENU (help)

o      SYS1.SCBDTENU (table).

Within SYS1.SCBDCLST, the member CBDHCHCD is the
main CLIST that invokes HCD. The table, panel, and message
library are LIBDEFed within this CLIST. The log-on procedure
was modified to include the CLIST library in the SYSPROC
concatenation and the HCD load library in the ISPLLIB
concatenation.

Note that the HCD dialog also needs access to SYS1.NUCLEUS.
Within SYS1.NUCLEUS are Unit Information Modules (UIMs).
These modules are used by the dialog for device verification.
Verification includes ensuring that correct features for a device are
specified, etc. These UIMs are also used at IPL time to build UCB
information, which is why they reside in SYS1.NUCLEUS
(modules are prefixed with 'CB'). To allow HCD access to these
modules we concatenated SYS1.NUCLEUS to ISPLLIB within
the log-on procedure. To restrict access to the procedure, we
created a separate HCD log-on procedure and limited access to it
via RACF.

Upon completion of the above, our HCD environment was in
place.

MigratING our MVSCP/IOCP deck to an IODF

Next we took our existing MVSCP/IOCP deck and migrated it
into a work IODF. The IODF is the linear VSAM file that
contains all the information about your MVSCP/IOCP
configuration. There are two types of IODF: work and production.
Modifications are made to work IODFs. Upon completion of
modifications to the work IODF, it is migrated to a production
IODF. It is the production IODF that is used during IPL time or
activated during the life of the current IPL.

The migration process is made simple with the HCD dialog and
consisted of these stages:

o      Signed on to HCD for the first time and on the main panel,
along with the list of options, was the name of the active IODF
dataset that would be used for this session (in this case
SYS1.IODF00.WORK).

o      Selected option 8 to migrate. Since SYS1.IODF00.WORK
did not exist, HCD prompted us for space allocation information
and a VOLSER to which it could allocate the dataset. We let
HCD use the default space allocation of 256 blocks and input the
test SYSRES VOLSER.

o      After the space and VOLSER information was given, HCD
created the work IODF and took us to the migration panel. From
this panel we entered the processor-id, a configuration-id, and the
MVSCP/IOCP deck name. The processor name that we gave this
IODF was TEST1. When we entered this, HCD prompted us for
CPU type and model. In our case we are equivalent to a 3090
600E (LPAR=NO). For configuration we called it CONFIG00.
HCD prompted us for a description of the CONFIG00, which we
gave. We then entered the 'PDS(membername)' that contained
the MVSCP/IOCP, selected 1 to only validate and not save
migrated data, and then hit enter. Note that it is the CONFIG00
and the production IODF name that is used as input to the
LOADxx described later.

o      After the validation completed we went in and corrected the
errors (of which there were many) that HCD reported. In fact this
was the hardest part of the entire process of getting to dynamic
software. Things one used to be able to get away with one
couldn't any more because the dialog was checking the input. A
good example was coding UNIT=DUMMY on the CNTLUNIT
macro. I think this is a fairly common practice when defining
printers and the like. Unfortunately, HCD takes offence at this and
we ended up coding a CNTLUNIT and IODEVICE macro for
each of our printers instead of one CNTLUNIT UNIT=DUMMY
and three IODEVICEs with UNIT=4248 all pointing back to the
dummied CNTLUNIT. Another problem occurred when a device
that was in our MVSCP/IOCP deck had no associated UIM and
HCD could not validate the device. In this case it was an IBM
device so we ordered the UIM through IBMLINK and then
applied the PTF when it arrived.

We discovered through the migration process that there were
discrepancies in our MVSCP/IOCP that needed to be corrected
even if we weren't going to migrate. In fact even if one had no
intention of migrating at this point in time, it might be worth the
trouble to run your deck through HCD and see what errors, if any,
it reports. Note that if your clean-up involves making IOCP
changes then you should rewrite the IOCDS to ensure the UCWs
built into the HSA at PWRONRST match the UCBs built into
NUC/ENUC or SQA/ESQA (if the device is dynamic) at IPL
time.

After our migration validation completed successfully, we
changed the processing mode option on the migration panel to
'2' and hit enter to migrate the MVSCP/IOCP data into the work
IODF. HCD then loaded up our work IODF.

CreatING a PRODUCTION IODF

After the work IODF was loaded, we had to create a production
IODF. From HCD we selected option 3 and input the current
work IODF (00) that we wanted to create a production IODF
from. We were prompted once again by HCD to give device
VOLSER and space information about the new production IODF
(SYS1.IODF00). Once again we created the production IODF on
the SYSRES volume and went with default space. After hitting
enter, SYS1.IODF00 (production) was created: it contained one
configuration (CONFIG00) and one EDT (00).

Setting up Load Parm

It is the LOADxx parameter in SYS1.PARMLIB that we modified
to get the system to IPL using the IODF production file. The
LOADxx tells the system the name of the IODF file (in this case
SYS1.IODF00), the name of the configuration to use within the
IODF (in this case CONFIG00), and it also says specifically that
software information will come from the IODF rather than the
nucleus members NIPCON, EDT, and UCB (IODF rather then
MVSCP in column 1). This LOADxx also says use EDT table 0
within the CONFIG00.

Note: LOADxx does not have to be in SYS1.PARMLIB: it could
be in SYSn.IPLPARM. This is discussed in detail in the first two
paragraphs of the LOADxx description in the Initialization and
Tuning Guide. The following is an example of an actual LOADxx
member that we use. It points to SYS1.IODF00 using CONFIG00
and EDT 00 within the IODF.

IODF     00 SYS1     CONFIG00 00 X
NUCLEUS  1
NUCLST   00 Y
SYSCAT   SYSLD5113CSYS1.TBTMCAT
SYSPARM  00

We created another LOADxx member (01) identical to LOAD00
except that the SYSPARM (which in the LOAD00 points to the
IEASYS00 member) was changed to point to 01 (IEASYS01).
Within IEASYS01 the only statement we put in was CLPA.
Within IEASYS00 we removed the CLPA parameter. Whenever
we wanted to come up without a CLPA we would IPL with
LOAD00: when CLPA was required we would IPL with
LOAD01. Note: IEASYS00 is always read during an IPL. When
we point to LOAD01, IEASYS01 is read and the CLPA request
is recorded, then IEASYS00 is read and all the other requests
within it are recorded.

IPLING with LOADxx member

At this point our production IODF and LOADxx members were
ready for an IPL but before IPLing we still had to set the LOAD
parameter on the system console's OE frame (OPRCTL frame on
IBM).

Example one

We IPLed the system with LOAD01 (CLPA). The IODF named
in LOAD01 was to be found on volume at address B74. We did
not prompt operations for any responses but showed them all
related messages. The back-up Nucleus was '06'. The load parm
was 0B7401M6

System messages

IEA371I SYS1.PARMLIB ON DEVICE 0B74 SELECTED FOR IPL PARAMETERS
IEA246I LOAD   ID 01 SELECTED
IEA246I NUCLST ID 00 SELECTED
IEA519I IODF DSN = SYS1.IODF00
IEA520I CONFIGURATION ID = CONFIG00. IODF DEVICE NUMBER = 0B74
IEA091I NUCLEUS 1 SELECTED

Example two

We IPLed again but changed the load parm so the operator would
get a prompt. Also we didn't want a CLPA. The load parm was
0B7400A6.

System messages

IEA371I SYS1.PARMLIB ON DEVICE 0B74 SELECTED FOR IPL PARAMETERS
IEA246I LOAD ID 00 SELECTED
IEA246I NUCLST ID 00 SELECTED
IEA519I IODF DSN = SYS1.IODF00
IEA520I CONFIGURATION ID = CONFIG00. IODF DEVICE NUMBER = 0B74
IEA091I NUCLEUS 1 SELECTED
IEA101A SPECIFY SYSTEM PARAMETERS .............
IEE600I REPLY TO 00 IS;
IEA347A SPECIFY MASTER CATALOG PARAMETER
IEE600I REPLY TO 00 IS;
IEA370I MASTER CATALOG SELECTED IS SYS1.TBTMCAT

ChangING devices to dynamic

After we IPLed and were running on a production IODF we
issued a 'D IOS,CONFIG' and verified that the IODF running
was SYS1.IODF00/CONFIG00. We then signed back on to
HCD and went into the production IODF to define a group of
DASD as dynamic. We chose to make the work SYSPOOL
dynamic and one spare volume. The spare volume would be used
to see if we could add it to the work SYSPOOL dynamically.

First we had to flag the devices in HCD as dynamic. This was
done by selecting option '1' from the HCD primary menu after
pointing HCD to the active IODF SYS1.IODF00. This brought
up a list of CONFIGs in the IODF, in this case CONFIG00. We
selected CONFIG00 which brought up another pop-up menu. We
selected '3' from this which gave us a list of all the devices in the
IODF. We then scrolled down to the device addresses we wanted
to make dynamic (in this case three work volumes and one spare
volume) and flagged them as dynamic. Note: defining devices as
dynamic changes the location in storage of any information about
that device (eg its UCB). It is important that one checks and
ensures that other OEM products and any in-house programs will
not be affected by defining devices as dynamic. If these products
are affected then fixes should be applied to the other products
before making the device dynamic (eg maybe the vendor is not
using the UCBSCAN services macros correctly if at all).

When we went to exit this IODF, HCD informed us that this was
a production IODF and it came up with the same prompts
previously mentioned to allocate a new work IODF. After HCD
allocated the new work IODF, it copied the modified IODF into it
leaving the current production IODF unchanged. We then
migrated the new work IODF (SYS1.IODF01.WORK) into a
production IODF (SYS1.IODF01).

Note: after you flag a device that wasn't previously defined as
dynamic in the IODF used in the IPL, another IPL will be
required to set the device as dynamic. Dynamic device
information is built in the SQA (150 bytes per device) and ESQA
(48 bytes per device). One should monitor SQA/ESQA allocation
with RMF as the IEASYSxx parameters that dictate storage
allocation for this (SQA=) may have to be increased with the
number of dynamic devices defined.

We then created a LOAD02 member in SYS1.PARMLIB and
changed it to point to the new production IODF SYS1.IODF01
and IPLed with the load parm 0B7402M6. Upon completion of
the IPL, we issued a 'D IOS,CONFIG' to verify that the new
IODF was being used.

Modifying THE EDT

The system was now running on a IODF that had our WORK
pool and one spare volume defined as dynamic. Our first test was
to add the spare volume to the work SYSPOOL.

From the HCD main menu we selected option '1' for system
configuration. We then selected CONFIG00 with a view option
which brought up an EDT pop-up menu. We selected '1' to view
EDTs and then selected EDT '00'. We then did a view on the
table, which gave us a list of our esoterics. We scrolled down to
the esoteric WORK and did a view on the devices in the work
SYSPOOL, which were listed by address. We selected 'add' to
add the spare volume to the list of addresses for the work
SYSPOOL. When we went to exit, we were once again prompted
to create a new work IODF. The new work IODF (02) was then
migrated to production IODF SYS1.IODF02.

We were ready to activate the new IODF (02). From the HCD
main menu we selected option 5.5. One of the options it gave us
was to first activate the IODF as a test. This was done and the
following message was returned:

IOS500I
ACTIVATE RESULTS
TEST DETECTED NO CONDITIONS WHICH WOULD RESULT IN
ACTIVATE FAILURE
NOTE = 0100,SOFTWARE-ONLY CHANGE
COMPID=SC1C3

We then activated without the test option and the following was
returned:

IOS500I
ACTIVATE COMPLETED SUCCESSFULLY
NOTE = 0100,SOFTWARE-ONLY CHANGE
COMPID=SC1C3

A 'D IOS,CONFIG' was issued to verify that SYS1.IODF02 was
the active IODF.

We ran an IEFBR14 to allocate a dataset on the spare volume and
specified UNIT=WORK in the JCL to see if the allocation would
work, and it did. At this point we created several EDTs within the
CONFIG00 to test this further. This included removing addresses
from the work SYSPOOL, adding devices back in, and changing
the name of the SYSPOOL. All of these worked.

We modified our LOADxx members so that they would all, if
used, come up with the current production IODF (SYS1.IODF2)
on IPL.

Using the HCD 'Maintain IODF' option we deleted any old
IODFs that were no longer needed.

We concluded that Dynamic EDT, though not yet fully
implemented, was in place.

Summary

At the end of this exercise:

o      We could now make EDT changes on the fly, if the device
was defined as dynamic (we still had to review which devices
would be made dynamic).

o      Discrepancies in our MVSCP/IOCP were corrected.

o      We could exploit the reporting facility of HCD to generate
detail reports on our I/O subsystem.

o      The fact that our system was running on an IODF meant that
we had one thing less to migrate when we decide to go to
MVS/ESA Version 5.



