Effects of block size and buffer space

In most computer installations physical I/O determines the task elapsed
time, ie response time in on-line systems and run-time in batch systems.

One physical I/O consists of several steps: software overhead to start
the I/O and handle the I/O interrupt, channel or I/O-processor handling
time, queue time for the channel/path, seek time on the disk, search
time on the disk, queue time for the channel/path for reconnect, and
data transfer time.

Assuming a path and device utilisation of 0.2, a device type 3380, and a
block size of 4K, the following figures can be used:

*    3 msec software time
*    3 msec channel/path handling overhead
*    3 msec channel/path queue time
*    16 msec seek time
*    8 msec search time
*    3 msec reconnect queue time
*    2 msec data transfer time.

This gives a total time of accessing a 4K block of 38 msec.  Accessing a
block of half-track size costs 44 msec (8 msec for data transfer).  This
means that accessing six times more data costs 15% in additional clock
time.  If the access is random this could, of course, be too much data;
but if access is sequential (or the data is in a PDS) the effects,
besides more data in less time, are:

*    Less CPU overhead
*    Less overhead on the channel/path
*    Less contention of the disk actuator.

These considerations also apply to tape I/O with appropriate
modifications: here a block size equal to the maximum supported by the
software (32K) will be optimal.

One effect of using a large block size on disk, provided the block size
is selected under consideration of the physical track length, is that
the storage media will be able to contain the maximum amount of data,
avoiding waste on unnecessary inter-record gaps.

On 3380s the track size is 47.5K and the inter-record gap around 0.7K:
having a block size as close as possible to 23476, but not above, will
give the best utilisation.

For disks with a track size of less than 32K the optimal block size,
from a utilisation point of view, is equal to the track size.  Another
way of speeding up data access is I/O-chaining and CPU-I/O overlap via
multiple buffers.

The main types of buffer handling that can be identified are:

1    QSAM - by default, five buffers equal in size to the block size are
used.  More than five buffers can be allocated using the DCB parameter,
BUFNO.  One I/O can, at maximum, transfer 240K of data or 30 buffers,
whichever is the least.  Buffer space greater than the above limitation
can be useful to facilitate CPU- I/O overlap.

     JCL example: DCB=(RECFM=FB,LRECL=200,BLKSIZE= 23400,BUFNO=24)

2    PDS - since PDS-organised datasets are now exclusively used for
libraries, data in such files is accessed sequentially.  Similar rules
for block sizes apply here although it is usually not possible to
accommodate a buffer number.  It should be noted that the indicated
block size is a maximum block size; if a member contains less data than
the block size can contain, the member is built as a short block, which
means that accessing a small member (like an ISPF panel) from a library
with a large block size means only transferring a block with the actual
size and not with the defined dataset block size.

3    VSAM (non-DL/I) - the default is two data buffers equal to the data
Control Interval size and, in the case of KSDS files, one index buffer
equal to the index Control Interval size.  In random mode elapsed time
can be reduced by having more index blocks in memory at the same time;
and in sequential mode more data buffers means that more data can be
transferred in one I/O.  The JCL AMP parameter, BUFND, defines the
number of data buffers and BUFNI defines the number of index buffers
(BUFSP can be used instead of BUFND and BUFNI).  The MVS/XA VSAM
Administrator's Guide GC26-4151-2 pages 87-93 gives an excellent
description of VSAM buffering.

     Example of JCL parameter: AMP=('AMORG,BUFND=32, BUFNI=64')

4    VSAM DL/I - the number of buffers is allocated as specified in the
dataset defined under the DDNAME DFSVSAMP.  Buffers can be specified as
0.5K, 1K, 2K, 4K, 8K, 12K, 16K, 20K, 24K, 28K and 32K, and to each
buffer size a number of buffers is assigned.  From the allocated buffers
the accessed files will use buffers corresponding to their  Control
Interval size or, in the case of no match, the next highest will be
used.  It should be noted that a specified buffer size multiplied by the
number of buffers will be allocated even if no file can actually use
this buffer size, thus unnecessarily increasing the size of the region.
It is therefore probably best to have a large amount of buffers in the
range 0.5K to 8K, thus catching most databases since control interval
sizes tend to be in the lower end and have one large pool of 32K buffers
taking all the rest of the Control Interval sizes.  Having a large
amount of buffers will speed up access, supporting more data in memory
at the same time, or allowing larger amounts of data to be transferred
in one I/O.  Refer to the manual IMS/VS Installation Guide SH20-9081-8
pages 249-251.

     Example of buffer specifications:
     512,64
     1024,64
     2048,48
     4096,48
     8192,48
     32768,24

Figures 1, 2, and 3 show the results from actual test runs on an IBM
4381-Q14 with 24Mb under MVS/XA 2.1.7, DFP 2.2.0, and IMS/DB 1.3.0 (the
runs were performed on an otherwise empty machine).

RUN I-BLK I-BUF O-BLK O-BUF BUFSP ELAPSE-SEC CPU-SEC EXCP   SU  RECORDS
 1    4K    5     4K    5     40K      124      15    25K  292K    122K
 2    4K   32     4K   32    256K       41      10    25K  285K    122K
 3    4K   32    23K   32    864k       38       8    15K  191K    122K
 4   23K    5    23K    5    230K       68       7     4K   68K    122K
 5   23K   32    23K   32   1472K       28       7     4K   90K    122K

Using a 23K block size and 32 buffers gives the shortest elapsed time;
elapsed time is reduced by a factor of 4.4 and CPU time by 2 from the
worst to the best case.

Figure 1: QSAM to QSAM (copy 122000 records in a sequential file from
3380 to 3380)

RUN I-CI  I-BUF O-CI  O-BUF BUFSP ELAPSE-SEC CPU-SEC EXCP   SU  RECORDS
 1    4K    2   23K     2     54K      342      72    16K  378K    122K
 2    4K    2    4K     2     16K      660      91    26K  493K    122K
 3    4K   16    4K    16    128K      252      65     4K  233K    122K
 4    4K   32    4K    32    256K      174      66     3K  271K    122K
 5   23K    2   23K     2     16K      300      58     6K  221K    122K
 6   23K   16   23K    16    736K      138      50     2K  294K    122K
 7   23K   32   23K    32   1472K      144      50     2K  379K    122K

For the small control interval size of 4K, 32 buffers seem to give the
shortest elapsed time, whereas for a Control Interval size of 23K it
does not seem to matter if 16 or 32 buffers are used.  Elapsed time is
reduced by a factor of 4.8 and CPU time by 1.8 from the worst to the
best case.

Figure 2: VSAM non-DL/I (copy 122000 records from ESDS on 3380 to ESDS
on 3380)

                                                        ELAPSE
RUN   BUFFER DEFINITIONS                  BUFSP   SEC  CPU-SEC EXCP   SU
 1 8*2K,8*4K,8*8K,8*32K                   386K    846   139    41K 1209K
 2 16*.5K,16*1K,16*2K,16*4K,16*8K,16*32K  760K    444    98    16K 1084K
 3 32*.5K,32*1K,32*2K,32*4K,32*8K,16*32K 1008K    225    79     8K  888K
 4 64*.5K,64*1K,48*2K,48*4K,48*8K,32*32K 1536K    167    73     5K  918K

Further experiments using larger amounts of buffers and/or buffers of
sizes 12K, 16K, 20K, 24K, and 28K did not reduce elapsed time or CPU
time further but did increase the region size and real storage
allocated.  Elapsed time is reduced by a factor of 5 and CPU time by 1.9
from the worst to the best case.

Figure 3: VSAM DL/I (running an actual application using several DL/I
databases)

SERVICE UNITS

Service units (SUs) are a measure of resource utilisation composed of
CPU consumption, physical I/Os, and real storage times CPU time
consumption (each component multiplied by its own individual weight
factor selected by the installation).  Therefore the SU does not express
an exact price, but gives only an idea of the resource utilisation
relationships.

REGION SIZE

It is obvious that a bigger block size or a larger amount of buffers
will require a larger region size than is otherwise necessary.  We found
that with the above-mentioned test runs we had to increase the region
size in general from 2Mb to 6Mb.  When using a 6Mb region we did not
experience any out-of-region abends at all.

STORAGE UTILISATION

Since I/O buffers are page-fixed during the physical I/O, it is expected
that real storage requirements will grow using a big block size and/or
many buffers.  But the real storage used is best expressed as a product
of the total I/O time and the storage used, which means that the
reduction of the number of I/Os will, to some extent, compensate for the
larger buffer space.  All in all, some small additional real storage
utilisation could be experienced.

CONCLUSION

Using the largest possible block size that the hardware can accommodate
and a buffer number specification much bigger than the default number
that the access method will allocate, ie in the range 16 to 64, has
tremendous effects on elapsed times and CPU consumption: elapsed times
can be reduced by up to a factor of 5 and CPU time by a factor of up to
2.

The following CLIST/EDIT macro is used to calculate an optimum block
size given the record length.

 /* CLIST AND EDIT MACRO TO TELL THE INSTALLATION RECOMMENDED BLOCKSIZE.
PROC 1 LRECL
ISREDIT MACRO PROCESS
CONTROL NOMSG NOFLUSH NOLIST NOCONLIST NOSYMLIST
ERROR DO
 SET &RET = &LASTCC
 RETURN
END
IF &DATATYPE(&LRECL) NE NUM THEN DO
 EXIT
END
IF &LRECL = 0 THEN DO
 SET &LRECL = 1
END
SET &MAXDSK = 23476                   /* 3380 VALUE */
IF &LRECL > &MAXDSK THEN DO
 SET &MAXDSK = 32760                  /* MAX ACCESS METHOD SUPPORTED */
 IF &LRECL > &MAXDSK THEN DO
  WRITE SORRY LRECL SHOULD NOT BE GREATER THAN 32760
  EXIT
 END
END
SET &VBLK = &MAXDSK                   /* 3380 VALUE FOR RECFM=VB */
IF &LRECL > (&VBLK - 4) THEN DO
 SET &VBLK = 32760
END
SET &VTBLK = 32760                    /* MAX TAPE BLK SIZE */
SET &NOBLK = &MAXDSK / &LRECL
SET &OPTBLK = &NOBLK * &LRECL
SET &NOTBLK = 32760 / &LRECL
SET &TOPTBLK = &NOTBLK * &LRECL
WRITE RECOMMENDED DISK BLKSIZE IS &OPTBLK FOR RECFM=FB LRECL=&LRECL
WRITE RECOMMENDED TAPE BLKSIZE IS &TOPTBLK FOR RECFM=FB LRECL=&LRECL
WRITE
IF &VBLK < &LRECL + 4 THEN DO
 WRITE LRECL TOO BIG FOR DISK AND RECFM=VB
END
ELSE DO
 WRITE RECOMMENDED DISK BLKSIZE IS &VBLK FOR RECFM=VB LRECL=&LRECL
END
IF &VTBLK < &LRECL + 4 THEN DO
 WRITE LRECL TOO BIG FOR TAPE AND RECFM=VB
END
ELSE DO
 WRITE RECOMMENDED TAPE BLKSIZE IS &VTBLK FOR RECFM=VB LRECL=&LRECL
END


Nils Plum
Systems Programmer (Denmark)  € Xephon 1988



