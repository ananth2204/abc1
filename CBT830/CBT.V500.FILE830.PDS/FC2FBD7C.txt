Communication task cross memory service

The MVS communication task cross memory service routine
(IEAVH600) can be used to pass information to operator consoles
and bypass the overhead associated with SVC 35 (WTO/WTOR)
processing and the subsystem interface.  This is accomplished by
building the necessary control blocks and issuing the cross
memory PC directly rather than having SVC 35 perform this
function for you.

The ability to do this can be beneficial if you are executing in a
routine in which you don't want to issue an SVC or can't issue an
SVC, yet you still want to communicate with the operator.  By
executing the cross memory routine directly, the console message
can still be issued without invoking SVC 35.

Another benefit of using IEAVH600 directly is the ability to issue
a console message and avoid having the WQE passed to the
subsystem interface and subsequently through the function code 9
subsystem ring.  An ESTAE created in a subsystem function code
9 routine can make use of this feature as the ESTAE can directly
call IEAVH600 to issue the console messages without having the
WQE that is being created passed to a potentially faulty function
code routine.  The capability of issuing a console message and
bypassing the subsystem interface can also be useful for multi-
system global console configurations, as operator messages issued
from source systems can be displayed at consoles on target
systems without passing through the subsystem interface
processing routines of the target system.

Upon entry to IEAVH60, register 1 contains the address of the
fullword area that contains the address of the Get WQE Parameter
List GWPL) as shown in Figure 1.

The GWPL (see the IEAVM100 macro definition) contains the
information necessary to have IEAVH600 create a console
message and send it to active consoles or to SYSLOG or to both.
the IEAVM100 macro definition that follows indicates how the
GWPL is used to relay this information to IEAVH600.

         MACRO
         IEAVM100
GWPL     DSECT         GET WQE PARAMETER LIST
GWPID    DS    CL4     CONTROL BLOCK ID 'GWPL'
GWPVERSN DS    XL1     OPERATING SYSTEM VERSION LEVEL
GWPFUNC1 DS    XL1     FUNCTION FLAGS BYTE ONE
GWPFNDMJ EQU   X'80'   FIND MAJOR WQE AND COPY BACK TO CALLER
GWPCPYWQ EQU   X'40'   GET WQE, COPY DUMMY TO REAL WQE, CHAIN IT
GWPPDSPQ EQU   X'20'   TURN ON SUSPEND FLAG IN MAJOR WQE
GWPCHNWQ EQU   X'10'   CHAIN WQE TO ORE
GWPMLWTO EQU   X'08'   WQE FOR MLWTO
GWPCNNCT EQU   X'04'   WQE IS BEING CONNECTED
GWPCPFKT EQU   X'02'   PFK TABLE IS TO BE COPIED INTO CTAS
GWPCNTDN DS    XL1     NUMBER OF WQE'S PROCESSED BY IEAVH600
GWPWQCNT DS    XL1     NUMBER OF WQE'S TO BE PROCESSED BY IEAVH600
GWPWQSTK DS    A       POINTER TO FIRST WQE IN STACK
GWPWQEID DS    F       WTO SEQUENCE NUMBER
GWPWQEAD DS    A       POINTER TO CALLERS MAJOR WQE
GWPOREAD DS    A       POINTER TO ORE FOR WTOR
GWPXSAAD DS    A       POINTER TO CALLERS XSA
GWPPFKT  DS    A       POINTER TO PFK TABLE
GWPFUNC2 DS    XL1     FUNCTION FLAGS BYTE TWO
GWPVERAR EQU   X'80'   VERIFY/SELECT AN OUT-OF-LINE AREA
GWPPOSTR EQU   X'40'   POST TRACK ECB'S
GWPREVAR EQU   X'20'   RE-VERIFY SPECIFIED AREA ID
GWPRSV02 DS    CL2     RESERVED
GWPAREID DS    XL1     AN OUT-OF-LINE AREA ID
GWPRDCMA DS    A       POINTER TO AN RDCM
GWPREACD DS    F       REASON CODE
         MEND

When requesting that a console message be issued, a minimum of
four fields in the GWPL should include valid data.

1   GWPID should contain the control block identifier 'GWPL'.

2   GWPFUNC1 should contain the flag settings to indicate what
operation IEAVH600 should perform.

3   GWPWQCNT should contain a value indicating the number
of WQEs that will be processed.

4   GWPWQSTK should contain the address of the dummy WQE
that will be used for that call.

The dummy WQE, pointed to by GWPWQSTK in the GWPL, is
mapped by the system macro IHAWQE.  It contains the
information required to present the message at the console in the
desired fashion as well as additional information that will only be
reflected in the hardcopy SYSLOG record.  A message can be
displayed at the console through IEAVH600 with only a few of
the WQE fields requiring data.

Test case examples have indicated that at least three fields in the
WQE should contain valid data for a message to be displayed at
active consoles.  The WQETXT field must contain the message
text as it is to be displayed at the console.  The WQETXTLN field
contains the length of the message text.  The WQEMCSF field
must have the WQEMCSFF flag set to indicate that the message is
to be broadcast to active consoles.

For example, the following code could be inserted into a program
to issue a single-line console message.

*   SHOULD BE IN SUPERVISOR STATE/KEY OF ZERO YOU WOULD NOT NEED THIS
*   MODESET IF YOU ENTER THIS CODE ALREADY IN THE APPROPRIATE STATE
         MODESET MODE=SUP,KEY=ZERO
         GETMAIN RU,LV=WQESIZE,SP=231       GET STORAGE FOR WQE
         LTR   R15,R15                      GOT STORAGE O.K.?
         BNZ   GETERROR                     NO - ISSUE ERROR
         ST    R1,WQEADDR                   SAVE STORAGE ADDRESS
         GETMAIN RU,LV=GWPLLEN,SP=229       GET STORAGE FOR GWPL
         LTR   R15,R15                      GOT STORAGE O.K.?
         BNZ   GETERROR                     NO - ISSUE ERROR
         ST    R1,GWPLADDR                  SAVE STORAGE ADDRESS
         .
         .
         L     R1,GWPLADDR                  GET GWPL AREA ADDRESS
         USING GWPL,R1
         XC    0(44,R1),0(R1)               CLEAR OUT THE GWPL AREA
         MVC   GWPID,=C'GWPL'               MOVE IN CONTROL BLOCK ID
         OI    GWPFUNC1,GWPCPYWQ            SET BLD AND CHAIN WQE FLAG
         MVI   GWPWQCNT,X'01'               SET COUNT TO ONE
         MVC   GWPWQSTK,WQEADDR             MOVE IN WQE ADDRESS
         ST    R1,GWPLAREA                  SAVE GWPL AREA ADDRESS
         L     R1,WQEADDR                   GET WQE AREA ADDRESS
         USING WQE,R1
         LR    R2,R1                        GET WQE ADDRESS
         LA    R3,WQESIZE                   GET WQE SIZE
         LR    R4,R2                        SOURCE ADDRESS
         XR    R5,R5                        CLEAR SOURCE BYTE
         MVCL  R2,R4                        CLEAR AREA
         MVC   WQEPAD(147),=147C' '         FILL PART OF IT WITH BLANKS
         MVC   WQETXT+1(L'WTO1),WTO1        MOVE IN THE MESSAGE
         LA    R8,L'WTO1+1                  GET MESSAGE LENGTH
         STCM  R8,B'0011',WQETXTLN          PUT INTO WQE
         OI    WQEMCSF,WQEMCSFF             SET QUEUE TO CONSOLE FLAG
WQEBUILT EQU   *
         LA    R1,GWPLAREA                  GET ADDR OF GWPL AREA ADDR
         ESAR  R14                          ESTABLISH SECONDARY ASN
         STM   R14,R12,12(R13)              SAVE ENVIRONMENT
         L     R5,16                        GET CVT ADDRESS
         L     R5,X'304'(,R5)       ADDRESS OF SYSTEM FUNCTION TABLE   X
                                    CONTAINING LX & EX NUMBERS FOR     X
                                    SYSTEM ROUTINES
         L     R2,X'64'(,R5)                OBTAIN IEAVH600 PC NUMBER
         PC    0(R2)                        DO THE PC
         L     R14,12(,R13)                 GET SECONDARY ASN
         SSAR  R14                          SET SECONDARY ASN
         LM    R2,R12,28(R13)               RESTORE THE ENVIRONMENT
         LTR   R15,R15                      EVERYTHING O.K.?
         BNZ   ERROR                        NO - CREATE ERROR CONDITION
         .
         .
         L     R2,WQEADDR                   GET STORAGE ADDRESS
         FREEMAIN RU,LV=WQESIZE,SP=231,A=(2)
         L     R2,GWPLADDR                  GET STORAGE ADDRESS
         FREEMAIN RU,LV=GWPLLEN,SP=229,A=(2)
*    YOU WOULD ONLY NEED THIS MODESET IF YOU
*    ENTERED THIS CODE IN PROBLEM STATE/NONZERO KEY
          MODESET MODE=PROB,KEY=NZERO
         B     END                          FINISH UP
GETERROR EQU   *
         ABEND 998,DUMP                     ISSUE ABEND
ERROR    EQU   *
         ABEND 999,DUMP                     ISSUE ABEND
END      EQU   *
*    INSERT CODE TO ALLOW FOR NORMAL RETURN
         .
         .
WTO1     DC    C'IEAVH600 TEST FOR ISSUING A CONSOLE MESSAGE'
GWPLAREA DS    F
GWPLADDR DS    F
WQEADDR  DS    F
         .
         .
         IEAVM100                           DSECT DESCRIBED ABOVE
GWPLLEN  EQU   *-GWPL
         IHAWQE DSECT=YES
         END

As is shown in the above example, the user of IEAVH600 should
be in supervisor state and key zero.  The dummy WQE should be
built in storage obtained from subpool 231 and the GWPL should
be built in storage obtained from subpool 229.

The MVS Debugging Handbooks describe the WQE control block
in detail.  By examining the control block description, it is
obvious that many fields can be manipulated to allow the message
to be displayed as desired.  For example, if you wanted to issue
the message in the previous example with a route code of '1' and a
descriptor code of '1', the following code could be added just prior
to label WQEBUILT:

         OI    WQEMCSF,WQEMCSA              ROUTING AND DESCRIPTOR     X
                                            CODE FIELDS EXIST
         OI    WQEROUT1,WQEROUTA            ROUTE TO MASTER CONSOLE
         OI    WQEDC1,WQEDCA                SYSTEM FAILURE MESSAGE

Multi-line messages can also be issued through IEAVH600.
Sample code for issuing a multi-line message would be as
follows.

*   SHOULD BE IN SUPERVISOR STATE/KEY OF ZERO
*   YOU WOULD NOT NEED THIS MODESET IF YOU ENTER THIS
*   CODE ALREADY IN THE APPROPRIATE STATE
         MODESET MODE=SUP,KEY=ZERO
         GETMAIN RU,LV=WQESIZE*2,SP=231     GET STORAGE FOR WQE
         LTR   R15,R15                      GOT STORAGE O.K.?
         BNZ   GETERROR                     NO - ISSUE ERROR
         ST    R1,WQEADDR                   SAVE STORAGE ADDRESS
         GETMAIN RU,LV=GWPLLEN,SP=229       GET STORAGE FOR GWPL
         LTR   R15,R15                      GOT STORAGE O.K.?
         BNZ   GETERROR                     NO - ISSUE ERROR
         ST    R1,GWPLADDR                  SAVE STORAGE ADDRESS
         .
         .
         L     R1,GWPLADDR                  GET GWPL AREA ADDRESS
         USING GWPL,R1
         XC    0(44,R1),0(R1)               CLEAR OUT THE GWPL AREA
         MVC   GWPID,=C'GWPL'               MOVE IN CONTROL BLOCK ID
         OI    GWPFUNC1,GWPCPYWQ            SET BLD AND CHAIN WQE FLAG
         MVI   GWPWQCNT,X'01'               SET COUNT TO ONE
         MVC   GWPWQSTK,WQEADDR             MOVE IN WQE ADDRESS
         ST    R1,GWPLAREA                  SAVE GWPL AREA ADDRESS
         L     R1,WQEADDR                   GET WQE AREA ADDRESS
         USING WQE,R1
         LR    R2,R1                        GET WQE ADDRESS
         LA    R3,WQESIZE*2                 GET WQE SIZE
         LR    R4,R2                        SOURCE ADDRESS
         XR    R5,R5                        CLEAR SOURCE BYTE
         MVCL  R2,R4                        CLEAR AREA
         MVC   WMJMPAD(95),=95C' '          CLEAR OUT THE AREA
         MVC   WMJMTXT+1(L'MLWTO1),MLWTO1   MOVE IN MESSAGE
         LA    R8,L'MLWTO1+1                GET MESSAGE LENGTH
         STCM  R8,B'0011',WMJMTXTL          SAVE LENGTH
         OI    WMJMMLW,WMJMMLWB+WMJMMLWD    SET MLWTO FLAGS
         OI    WMJMLTY1,WMJMLTYC            SET DATA LINE FLAG
         OI    WMJMCS1,WMJMCS1F             QUEUE TO ACTIVE CONSOLES
         OI    WMJMCS2,WMJMCS2B             SET MLWTO FLAG
         LA    R8,WQESIZE(,R1)              GET ADDRESS OF MINOR WQE
         ST    R8,WMJMMIN                   SAVE MINOR WQE ADDRESS
         LR    R1,R8
         OI    WMNMML1,WMNMML1C+WMNMML1H    SET MINOR WQE FLAGS
         OI    WMNMLT1,WMNMLT1D             SET END LINE FLAG
         MVI   WMNMLTH1,WMNMNX2-WMNMNX1     SET LENGTH OF ONE MINOR WQE
         LA    R8,L'MLWTO2                  GET MESSAGE LENGTH
         STC   R8,WMNMTL1                   SAVE IN MINOR WQE
         MVC   WMNMTXT1(72),=72C' '         CLEAR OUT TEXT AREA
         MVC   WMNMTXT1(L'MLWTO2),MLWTO2    PUT IN MESSAGE TEXT
         LA    R1,GWPLAREA                  GET ADDR OF GWPL AREA ADDR
         ESAR  R14                          ESTABLISH SECONDARY ASN
         STM   R14,R12,12(R13)              SAVE ENVIRONMENT
         L     R5,16                        GET CVT ADDRESS
         L     R5,X'304'(,R5)       ADDRESS OF SYSTEM FUNCTION TABLE   X
                                    CONTAINING LX & EX NUMBERS FOR     X
                                    SYSTEM ROUTINES
         L     R2,X'64'(,R5)                OBTAIN IEAVH600 PC NUMBER
         PC    0(R2)                        DO THE PC
         L     R14,12(,R13)                 GET SECONDARY ASN
         SSAR  R14                          SET SECONDARY ASN
         LM    R2,R12,28(R13)               RESTORE THE ENVIRONMENT
         LTR   R15,R15                      EVERYTHING O.K.?
         BNZ   ERROR                        NO - CREATE ERROR CONDITION
         .
         .
         L     R2,WQEADDR                   GET STORAGE ADDRESS
         FREEMAIN RU,LV=WQESIZE*2,SP=231,A=(2)
         L     R2,GWPLADDR                  GET STORAGE ADDRESS
         FREEMAIN RU,LV=GWPLLEN,SP=229,A=(2)
*   YOU WOULD ONLY NEED THIS MODESET IF YOU
*   ENTERED THIS CODE IN PROBLEM STATE/NONZERO KEY
         MODESET MODE=PROB,KEY=NZERO
         B     END                          FINISH UP
GETERROR EQU   *
         ABEND 998,DUMP                     ISSUE ABEND
ERROR    EQU   *
         ABEND 999,DUMP                     ISSUE ABEND
END      EQU   *
*   INSERT CODE TO ALLOW FOR NORMAL RETURN
         .
         .
MLWTO1   DC    C'IEAVH600 TEST FIRST LINE OF A MULTI-LINE
MESSAGE'
MLWTO2   DC    C'IEAVH600 TEST LAST LINE OF A MULTI-LINE
MESSAGE'
GWPLAREA DS    F
GWPLADDR DS    F
WQEADDR  DS    F
         .
         .
         IEAVM100                           DSECT DESCRIBED ABOVE
GWPLLEN  EQU   *-GWPL
         IHAWQE DSECT=YES
         END

The above discussion has outlined the communication task cross
memory service routine of MVS.  Some potential uses have been
described and the coding examples have shown how it can be
implemented.  The uses of the routine, as we have talked about
here, can be interesting and varied and this article may have even
provided some insight into how some of the vendor-supplied
software in your shop works.


    € Xephon 1989

