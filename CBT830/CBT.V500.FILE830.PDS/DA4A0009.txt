PDS member access

If you have ever written a program that accesses a member of a
PDS you will be familiar with several macros that are required to
perform this function.  You must OPEN the dataset for access and
then possibly make buffer storage available using GETBUF (or
GETPOOL).  Next you have to FIND the member you are trying to
access and then perform repeated READs to retrieve member
records, all the while CHECKing for successful record access.  Once
you have finished with the member, if you have obtained buffer
storage, it is necessary to release it using FREEBUF (or FREEPOOL)
and then CLOSE the dataset.  Of course, you must provide the
address of the DCB to each of the above macros.

Although this is the standard method used for PDS member access,
it can be a time-consuming deterrent to establishing this
environment, especially if the program is required quickly or is a
one-time ad hoc request.

As an alternative, MVS provides a routine (IEEMB878 - the same
routine MVS uses to read SYS1. PARMLIB) that will read members
of a PDS if the PDS meets certain restrictions.  In the case of
MVS/370, the restrictions imposed by this routine are that the
PDS must contain 80-byte records that are fixed, unblocked, and
reside in a single extent.  For MVS/XA, the restrictions imposed by
this routine are that the PDS must contain 80-byte records that
are fixed and either blocked or unblocked.  To use this routine you
must have pre-allocated the dataset to DDNAME IEFPARM.  The
following code can be inserted into any program that has a
requirement for reading a member of a PDS that meets the above
criteria.

*  FILL FIELD 'MEMBER' WITH THE MEMBER TO BE ACCESSED
*  PRIOR TO ENTERING THIS PORTION OF THE CODE
          XC     PARMS(20),PARMS          CLEAR PARM AREA
          LA     R1,BUFAREA               GET BUFFER ADDRESS
          ST     R1,PARMBUF               SAVE BUFFER ADDRESS
          MVC    PARMMEM(8),MEMBER        MOVE IN MEMBER
          LOAD   EP=IEEMB878              GET MODULE ADDRESS
          ST     R0,RTNPTR                SAVE ADDRESS
          LA     R1,PARMS                 GET PARM ADDRESS
READLOOP  L      R15,RTNPTR               GET ROUTINE ADDRESS
          BALR   R14,R15                  READ
          B      BRTBL1(R15)              GO WHERE WE SHOULD
BRTBL1    B      READOK         RC(00) -  READ OK
          B      EOF            RC(04) -  END OF MEMBER
          B      IOERROR        RC(08) -  I/O ERROR
          B      OPENERR        RC(12) -  OPEN FAILED
          B      NOMEMBER       RC(16) -  MEMBER NOT FOUND
*  INSERT CODE THAT IS TO BE USED TO PROCESS
*  EACH RECORD THAT HAS BEEN READ
*  FIELD 'BUFAREA' CONTAINS THE RECORD THAT HAS JUST BEEN READ
READ      B      READLOOP                 GET NEXT RECORD
EOF       B      READDONE                 FINISHED READING MEMBER
IOERROR   MVC    ERRORMSG(39),ERROR1      MOVE IN ERROR MESSAGE
          B      END                      ALL DONE
OPENERR   MVC    ERRORMSG(28),ERROR2      MOVE IN ERROR MESSAGE
          B      END                      ALL DONE
NOMEMBER  MVC    ERRORMSG(37),ERROR3      MOVE IN ERROR MESSAGE
          B      END                      ALL DONE
ERRORMSG  DC     80C' '                   ERROR MESSAGE AREA
ERROR1    DC     C'PDSREAD1 - I/O ERROR READING PDS MEMBER'
ERROR2    DC     C'PDSREAD2 - ERROR OPENING PDS'
ERROR3    DC     C'PDSREAD3 - REQUESTED MEMBER NOT FOUND'
RTNPTR    DS     F                        READ ROUTINE ADDRESS
PARMS     DS     0F                       PARM AREA
          DS     1X                       FLAGS
PARMCID   DS     1X                       CONSOLE ID
          DS     2X                       RESERVED
PARMBUF   DS     F                        RECORD BUFFER ADDRESS
PARMMEM   DS     8C                       MEMBER NAME
          DS     F                        WORK AREA (0 FOR FIRST READ)
BUFAREA   DS     80C                      RECORD BUFFER
MEMBER    DC     C'       '
END       EQU    *
*  INSERT CODE TO PERFORM CLEANUP PROCESSING THAT IS TO
*  TAKE PLACE AFTER AN ERROR
READDONE  EQU    *
*  INSERT CODE TO PERFORM PROCESSING THAT IS TO TAKE PLACE
*  AFTER SUCCESSFULLY READING THE MEMBER


    â‚¬ Xephon 1989

