Virtual storage display using ISPF and REXX

Products such as OMEGAMON can be purchased to provide
the ability to display virtual storage, but these are expensive
and notorious for not conforming to the familiar ISPF user
interface appearance.  What is often required for debugging or
testing program logic is a quick and simple display of virtual
storage under ISPF.

I have developed a small REXX EXEC which will allow the
display of any virtual storage accessible to an unauthorized
program.  This uses the built-in STORAGE function together
with a dynamic ISPF panel.  Figure 1 illustrates how a display
would appear to a user.  Once displayed, storage can be
scrolled through and also modified if permitted.  REXX does
not abend but simply ignores invalid accesses.  Colours are
used to distinguish areas when used on a colour terminal.

To invoke the REXX simply enter its name as a TSO command
- it will display storage starting at location zero.  Various line
commands are then available to supplement scrolling.  The
most useful is '/' which takes the first displayed fullword as the
next address to display storage - this can be used to chain
through control block sequences.

Other commands include '&xxxx' to save the current address
as the name xxxx - this position can be later recalled with the
command '*xxxx'.  The last displayed position can also be
recalled with the command '<' as the display start points are
retained on a LIFO stack.  Storage can be overlaid with a
hexadecimal string (command '!') or characters (command '?').

To save time, some common control blocks can be accessed
with commands such as '*ACEE' to display the current RACF
ACEE.  Others may be added by extending the REXX
appropriately.  For a list of all the commands please see the
tutorial panel STORE2 below.  REXX has a complete set of
functions to handle conversion between hexadecimal,
character, and decimal formats and is ideal for creating this
kind of TSO utility.


REXX EXEC TO DISPLAY VIRTUAL STORAGE

/* REXX : STORAGE DISPLAY                                           */
/* VIRTUAL STORAGE DISPLAY WITH ISPF DYNAMIC PANEL, ALLOWS SCROLL-  */
/* ING THROUGH STORAGE AND VARIOUS COMMANDS TO ADJUST POSITION. IT  */
/* IS ALSO POSSIBLE TO OVERLAY STORAGE. NO SPECIAL PROGRAMS USED.   */
/********************************************************************/
ADDRESS ISPEXEC "VGET (ZSCREEND) SHARED"
NUMERIC DIGITS 10                       /* ALLOW FOR FULLWORD ADDR  */
C1 = '51'X ;  C4 = '54'X                /* HEX ATTRIBUTE BYTES      */
C2 = '52'X ;  C5 = '55'X
C3 = '53'X ;  C6 = '56'X
NL = ZSCREEND - 3                       /* MAX LINES ON SCREEN      */
LC = 0; SL = 0; PRC = 0                 /* START AT LOCATION ZERO   */
DO WHILE (PRC = 0)                      /* DISPLAY PANEL IF NOT END */
   DATA = ''                            /* NO DATA AT ALL YET       */
   IF SL < 0 THEN SL = 0                /* PREVENT SCROLL BEYOND 0  */
   ADDR = SL                            /* USE ACTUAL VALUE         */
   DO V = 1 TO NL
      HSL = RIGHT(D2X(ADDR),8,'0')      /* HEX ADDR OF STORAGE      */
      HOF = RIGHT(D2X((V-1)*16),3,'0')  /* OFFSET ON SCREEN         */
      STORE  = STORAGE(HSL,16)          /* ACTUAL DATA IN STORAGE   */
      HSTORE = C2X(STORE)               /* HEX REPRESENTATION OF IT */
      HEX    = SUBSTR(HSTORE,1,8) || C1 || SUBSTR(HSTORE,9,8),
               SUBSTR(HSTORE,17,8)         SUBSTR(HSTORE,25,8)
      STORE = TRANSLATE(STORE,'000000000000'X,'515253545556'X)
      LINE = C5 || HSL || C3 '+' HOF || C1 HEX || C2 STORE C1
      DATA = DATA || SUBSTR(LINE,1,80)  /* ALLOW VARIOUS LENGTHS    */
      ADDR = ADDR + 16
   END
   DATA = OVERLAY(C6,DATA,1)             /* HIGHLIGHT CURRENT ADDR  */
   DATA = OVERLAY(C4,DATA,18)            /* HIGHLIGHT FIRST FULLW   */
   BITS = '00000000'                     /* PREPARE BIT ANALYSE     */
   IF SUBSTR(DATA,19,2) = '' THEN        /* IF INVALID DATA         */
      CH = '00'X
   ELSE
      CH = X2C(SUBSTR(DATA,19,2))        /* EXTRACT FIRST BYTE      */
   IF BITAND(CH,'80'X) = '80'X THEN BITS = OVERLAY('1',BITS,1)
   IF BITAND(CH,'40'X) = '40'X THEN BITS = OVERLAY('1',BITS,2)
   IF BITAND(CH,'20'X) = '20'X THEN BITS = OVERLAY('1',BITS,3)
   IF BITAND(CH,'10'X) = '10'X THEN BITS = OVERLAY('1',BITS,4)
   IF BITAND(CH,'08'X) = '08'X THEN BITS = OVERLAY('1',BITS,5)
   IF BITAND(CH,'04'X) = '04'X THEN BITS = OVERLAY('1',BITS,6)
   IF BITAND(CH,'02'X) = '02'X THEN BITS = OVERLAY('1',BITS,7)
   IF BITAND(CH,'01'X) = '01'X THEN BITS = OVERLAY('1',BITS,8)
   ADDRESS ISPEXEC "DISPLAY PANEL(STORE1)"       /* DYNAMIC PANEL   */
   PRC = RC
   IF ZCMD ¬= '<' THEN                   /* PUSH CURRENT ADDRESS    */
      PUSH SL
   IF ZCMD = ' ' THEN                    /* NO CMD, SO ALLOW SCROLL */
      DO
         ADDRESS ISPEXEC "VGET (ZVERB ZSCROLLN)"
         SELECT
         WHEN (ZVERB = 'UP') THEN        /* SCROLL UP BY THE AMT    */
            SL = SL - ZSCROLLN * 16
         WHEN (ZVERB = 'DOWN') THEN      /* SCROLL DOWN BY THE AMT  */
            SL = SL + ZSCROLLN * 16
         OTHERWISE NOP
         END
      END
   ELSE                                  /* COMMAND ENTERED IN ZCMD */
      DO
         CMD = SUBSTR(ZCMD,1,1)              /* COMMAND CHARACTER   */
         OPR = STRIP(SUBSTR(ZCMD,2))         /* COMMAND OPERAND     */
         SELECT
         WHEN (CMD = '/') THEN               /* GOTO FIRST ADDRESS  */
            SL = X2D(SUBSTR(DATA,19,8))
         WHEN (CMD = '@') THEN               /* HEX ADDRESS ENTERED */
            SL = X2D(OPR)
         WHEN (CMD = '&') THEN               /* SAVE ADDR VAR XXXX  */
            INTERPRET OPR '= SL'
         WHEN (CMD = '#') THEN               /* DEC ADDRESS ENTERED */
            SL = OPR
         WHEN (CMD = '+') THEN               /* INCREMENT IN HEX    */
            SL = SL + X2D(OPR)
         WHEN (CMD = '-') THEN               /* DECREMENT IN HEX    */
            SL = SL - X2D(OPR)
         WHEN (CMD = ')') THEN               /* INCREMENT IN DEC    */
            SL = SL + OPR
         WHEN (CMD = '(') THEN               /* DECREMENT IN DEC    */
            SL = SL - OPR
         WHEN (CMD = '!' | CMD = '?') THEN   /* OVERLAY STORAGE     */
            DO
               IF CMD = '!' THEN
                  REP = X2C(OPR)             /* HEX TO CHAR DATA    */
               ELSE
                  REP = OPR
               LC  = LENGTH(REP)             /* LENGTH OF OVERLAY   */
               REP = STORAGE(D2X(SL),LC,REP) /* DO IT, SAVE OLD     */
            END
         WHEN (CMD = '¬') THEN               /* RESET STORAGE CHGE  */
            IF LC >= 0 THEN
               REP = STORAGE(D2X(SL),LC,REP) /* REVERSE LAST UPDATE */
         WHEN (CMD = '<') THEN               /* RESUME PREVIOUS LOC */
            IF QUEUED() > 0 THEN
               PULL SL                       /* RETRIEVE LAST ADDR  */
            ELSE
               SL = 0
         WHEN (CMD = '*') THEN               /* CONTROL BLOCK DISP  */
            SELECT
            WHEN (OPR = 'CVT') THEN          /* DISPLAY CVT         */
               SL = C2D(STORAGE('0010',4))
            WHEN (OPR = 'ASCB') THEN         /* DISPLAY ASCB        */
               SL = C2D(STORAGE('0224',4))
            WHEN (OPR = 'ASXB') THEN         /* DISPLAY ASXB        */
               DO
                  SL = C2D(STORAGE('0224',4))   /* FIND ASCB        */
                  SL = ADDC(SL,'6C')            /* FIND ASXB        */
               END
            WHEN (OPR = 'ACEE') THEN         /* DISPLAY ACEE        */
               DO
                  SL = C2D(STORAGE('0224',4))   /* FIND ASCB        */
                  SL = ADDC(SL,'6C')            /* FIND ASXB        */
                  SL = ADDC(SL,'C8')            /* FIND ACEE        */
               END
            WHEN (OPR = 'TCB') THEN          /* DISPLAY TCB         */
               SL = C2D(STORAGE('021C',4))
            WHEN (OPR = 'TIOT') THEN         /* DISPLAY TIOT        */
               DO
                  SL = C2D(STORAGE('021C',4))   /* FIND TCB         */
                  SL = ADDC(SL,'0C')            /* FIND TIOT        */
               END
            OTHERWISE
               INTERPRET 'SL = ' OPR         /* RELOAD VAR XXXX     */
            END
         OTHERWISE
            ADDRESS ISPEXEC "SETMSG MSG(ISPZ001)"    /* INVALID CMD */
         END
         ZCMD = ' '
      END
END
"DELSTACK"                                 /* FLUSH REMAINING STACK */
EXIT 0                                     /* MAIN ROUTINE EXIT     */
ADDC:ARG AD1,AD2                           /* CALC ADDRESS FUNCTION */
RETURN C2D(STORAGE(D2X(AD1+X2D(AD2)),4))


DYNAMIC ISPF PANEL (STORE1)

)ATTR DEFAULT(%$_)
  ` AREA(DYNAMIC) SCROLL(ON)   EXTEND(ON)
 51 TYPE(DATAOUT) INTENS(LOW)  COLOR(GREEN)
 52 TYPE(DATAOUT) INTENS(HIGH) COLOR(PINK)
 53 TYPE(DATAOUT) INTENS(LOW)  COLOR(BLUE)
 54 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)
 55 TYPE(DATAOUT) INTENS(LOW)  COLOR(RED)
 56 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE) HILITE(USCORE)
)BODY
%VIRTUAL STORAGE DISPLAY -------------------------------- BYTE BITMAP = &BITS
%COMMAND ===>_ZCMD                                            %SCROLL ===>_AMT $
$--------  -----  0------- 4------- 8------- C-------  0---4---8---C--- -------
`DATA                                                                          `
)INIT
  IF (&AMT = &Z)
     &AMT  = 'CSR'
  .CURSOR = ZCMD
  .HELP = STORE2
)PROC
  &NL = LVLINE(DATA)
  IF (&ZCMD = 'CAN','CANCEL','RES','RESET')
     .RESP = END
)END


TUTORIAL ISPF PANEL (STORE2)

)ATTR DEFAULT(%$_)
)BODY
%TUTORIAL--------------------- VIRTUAL STORAGE DISPLAY -----------------TUTORIAL
%COMMAND ===>_ZCMD
$
% VIRTUAL STORAGE DISPLAY $ No special access to storage is given.
$
% Normal SCROLL$commands will move the display up and down in storage.
% Other Commands$are available as below (blank after 1st char is optional).
$
% /       $ takes the first DISPLAYED fullword as the display address
% @ HHHH  $ takes HHHH as a hexadecimal address for the display address
% # DDDD  $ takes DDDD as a decimal address for the display address
% + HHHH  $ increments display address by HHHH hexadecimal bytes
% - HHHH  $ decrements display address by HHHH hexadecimal bytes
% ) DDDD  $ increments display address by DDDD decimal bytes
% ( DDDD  $ decrements display address by DDDD decimal bytes
% ! HHHH  $ overlays storage at current location by HHHH hex data
% ? CCCC  $ overlays storage at current location by CCCC character data
% & XXXX  $ save current address as variable name XXXX
% * NAME  $ load variable or control block, XXXX or CVT/ASCB/ASXB/ACEE/TCB/TIOT
% ¬       $ replaces last overidden data at current location
% <       $ return to previously displayed address (stacked)
$
$ Press%END$to return to the storage display.
)PROC
   &ZCONT = STORE2
)END


                                                                  c Reserved 199

