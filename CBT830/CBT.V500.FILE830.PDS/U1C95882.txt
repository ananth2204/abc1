3990 cache performance monitor (continued)

This month we conclude our description of a 3990 cache
performance monitor with the publication of the source code of
the reporting program, CACHEREP.


CACHEREP SOURCE CODE

 IDENTIFICATION DIVISION.
 PROGRAM-ID     CACHEREP.
 DATE-COMPILED.
*REMARKS
******************************************************************
* THIS IS A PRINT PROGRAM TO GENERATE THE RESOURCE UTILIZATION   *
* REPORT FOR A LIST OF SUBSYSTEMS                                *
******************************************************************
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 SOURCE-COMPUTER. IBM-4381.
 OBJECT-COMPUTER. IBM-4381.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
      SELECT INP-FILE ASSIGN TO INPFIL
      ORGANIZATION IS SEQUENTIAL
      ACCESS MODE  IS SEQUENTIAL.
      SELECT PRT-FILE ASSIGN TO PRTFIL.
 DATA DIVISION.
 FILE SECTION.
 FD  INP-FILE
     LABEL RECORDS ARE OMITTED.
 01  INPREC                PIC X(253).
 FD  PRT-FILE
     LABEL RECORDS ARE OMITTED.
 01  PRT-REC               PIC X(132).
 WORKING-STORAGE SECTION.
 01  WS-INPREC.
     05 WS-DATE             PIC 9(5).
     05 WS-TIME.
        10 WS-TIME1         PIC 9(4).
        10 WS-TIME2         PIC 9(2).
     05 WS-INT              PIC 9(4).
     05 WS-CUTYPE           PIC X(4).
     05 WS-CUMODEL          PIC X(2).
     05 WS-VOLUME           PIC X(6).
     05 WS-DEVNO            PIC X(2).
     05 WS-SSID             PIC X(4).
     05 WS-CNT              PIC 9(11) OCCURS 20.
 01  W9-TOTAL.
     05 FILLER              OCCURS 64.
        10 WS-VOLID         PIC X(6).
        10 WS-SUBSYS        PIC X(4).
        10 W9-CNT           PIC 9(11) OCCURS 20.
        10 W9-E-DATE        PIC 9(5).
        10 W9-E-TIME.
           15 W9-E-TIME1    PIC 9(2).
           15 W9-E-TIME2    PIC 9(2).
           15 W9-E-TIME3    PIC 9(2).
        10 W9-S-INT         PIC 9(4).
        10 W9-S-DATE        PIC 9(5).
        10 W9-S-TIME        PIC 9(6).
        10 W9-TOTINT        PIC 9(11).
        10 W9-S-TIME1       PIC 9(6).
 01  W9-VOL-TABLE.
     05 FILLER              OCCURS 64.
        10 WS-VOLID1        PIC X(6).
        10 WS-SUBSYS1       PIC X(4).
        10 W9-INT-TOT       PIC 9(11).
        10 W9-V-TOT         PIC 9(11) OCCURS 6.
        10 W9-VOL-IORATE    PIC 9(3)V9(8).
 01  W9-V-TOTAL.
     05 W9-V-TOT1           PIC 9(11) OCCURS 6.
     05 W9-V-TOT2           PIC 9(3)V9(8).
     05 W9-V-TOT3           PIC 9(3)V9(8).
 01  W9-RATIO.
     05 W9-RAT1             PIC 9(1)V9(3).
     05 W9-RAT2             PIC 9(3)V9(2).
     05 W9-RAT2-R           REDEFINES W9-RAT2  PIC X(5).
 01  W9-TEMP                PIC 9(11)V9(2).
 01  W9-T-TOTAL             PIC 9(11).
 01  W9-PAGE-CNT            PIC 9(3) VALUE 0.
 01  W9-LINE-CNT            PIC 9(3) VALUE 0.
 01  WS-T-DATE              PIC X(5).
 01  WS-T-TIME              PIC X(6).
 01  W9-HH                  PIC 9(2).
 01  W9-MM                  PIC 9(2).
 01  W9-SS                  PIC 9(2).
 01  W9-REM                 PIC 9(4).
 01  W9-S-TIMEX             PIC 9(6).
 01  WX-SUBSYS              PIC X(3).
 01  WX-S-TIME              PIC 9(6).
 01  WX-S-SUBSYS            PIC X(4).
 01  WS-SORT-VARS.
     05 I                   PIC 9(2).
     05 J                   PIC 9(2).
     05 K                   PIC 9(2).
     05 M                   PIC 9(2).
     05 N                   PIC 9(2).
 01  WX-EOF                 PIC X(1) VALUE 'N'.
     88 E-O-F               VALUE 'Y'.
 01  WS-DASHES.
     05 FILLER              PIC X(132) VALUE ALL '_'.
 01  WS-HEAD1.
     05 FILLER              PIC X(51) VALUE SPACES.
     05 FILLER              PIC X(16)  VALUE '3990-03 SUB-SYS ' .
     05 WSH1-TYPE           PIC X(8).
     05 FILLER              PIC X(7) VALUE ' REPORT'.
     05 FILLER              PIC X(40) VALUE SPACES.
     05 FILLER              PIC X(7) VALUE 'Page : '.
     05 WSH1-PAGE           PIC ZZ9.
 01  WS-HEAD2.
     05 FILLER              PIC X(13) VALUE '   SUB-SYS : '.
     05 WSH2-SUBSYS         PIC X(6) VALUE SPACES.
     05 FILLER              PIC X(7).
     05 FILLER              PIC X(26) VALUE
            'Data  Collected  Between  '.
     05 WSH2-ST-DT.
        10 WSH2-ST-DT-YY    PIC X(2).
        10 FILLER           PIC X(1) VALUE '.'.
        10 WSH2-ST-DT-DD    PIC X(3).
        10 FILLER           PIC X(2) VALUE SPACES.
     05 WSH2-ST-TM.
        10 WSH2-ST-TM-HH    PIC X(2).
        10 FILLER           PIC X(1) VALUE ':'.
        10 WSH2-ST-TM-MM    PIC X(2).
     05 FILLER              PIC X(5) VALUE ' and '.
     05 WSH2-END-DT.
        10 WSH2-END-DT-YY   PIC X(2).
        10 FILLER           PIC X(1) VALUE '.'.
        10 WSH2-END-DT-DD   PIC X(3).
        10 FILLER           PIC X(2) VALUE SPACES.
     05 WSH2-END-TM.
        10 WSH2-END-TM-HH   PIC X(2).
        10 FILLER           PIC X(1) VALUE ':'.
        10 WSH2-END-TM-MM   PIC X(2).
     05 FILLER              PIC X(14) VALUE ' - Interval : '.
     05 WSH2-INT.
        10 WSH2-INT-HH      PIC Z(2)9.
        10 FILLER           PIC X(1) VALUE ':'.
        10 WSH2-INT-MM      PIC 9(2).
        10 FILLER           PIC X(1) VALUE ':'.
        10 WSH2-INT-SS      PIC 9(2).
     05 FILLER              PIC X(26).
 01  WS-HEAD3.
     05 FILLER              PIC X(33) VALUE
              'H/R  = Hit Ratio'.
     05 FILLER              PIC X(33) VALUE
              'R/W = (Search+Read)/Write'.
     05 FILLER              PIC X(33) VALUE
              'I/O  = Search+Read+Write'.
     05 FILLER              PIC X(33) VALUE
              'FW  = Fast Write'.
 01  WS-HEAD4.
     05 FILLER              PIC X(57) VALUE SPACES.
     05 FILLER              PIC X(75) VALUE
              'CHANNEL OPERATIONS'.
 01  WS-HEAD5.
     05 FILLER              PIC X(20) VALUE SPACES.
     05 FILLER              PIC X(58) VALUE
     '.........SEARCH/READ........  ..................WRITE.....'.
     05 FILLER              PIC X(54) VALUE
     '............... ......... TOTAL I/O ............ CACHE'.
 01  WS-HEAD6.
     05 FILLER              PIC X(25) VALUE SPACES.
     05 FILLER              PIC X(55) VALUE
        'TOTAL  CACHE-READ   H/R          TOTAL      DASDFW CACH'.
     05 FILLER              PIC X(52) VALUE
        'E-WRITE   H/R         TOTAL   CACHE-I/O  H/R    R/W'.
 01  WS-HEAD7.
     05 FILLER              PIC X(132) VALUE ' REQUESTS'.
 01  WS-HEAD8.
     05 WSH8-TITLE          PIC X(20).
     05 WSH8-TREAD          PIC Z(9)9(1).
     05 FILLER              PIC X(2) VALUE SPACES.
     05 WSH8-CREAD          PIC Z(9)9(1).
     05 FILLER              PIC X(1) VALUE SPACES.
     05 WSH8-RHR            PIC Z(1)9(1).9(3).
     05 FILLER              PIC X(4) VALUE SPACES.
     05 WSH8-TWRIT          PIC Z(9)9(1).
     05 FILLER              PIC X(2) VALUE SPACES.
     05 WSH8-DWRIT          PIC Z(9)9(1).
     05 WSH8-DWRIT-R        REDEFINES WSH8-DWRIT
                            PIC X(10).
     05 FILLER              PIC X(2) VALUE SPACES.
     05 WSH8-CWRIT          PIC Z(9)9(1).
     05 FILLER              PIC X(1) VALUE SPACES.
     05 WSH8-WHR            PIC Z(1)9(1).9(3).
     05 FILLER              PIC X(3) VALUE SPACES.
     05 WSH8-TIO            PIC Z(9)9(1).
     05 FILLER              PIC X(2) VALUE SPACES.
     05 WSH8-CIO            PIC Z(9)9(1).
     05 FILLER              PIC X(1) VALUE SPACES.
     05 WSH8-IOHR           PIC Z(1)9(1).9(3).
     05 FILLER              PIC X(1) VALUE SPACES.
     05 WSH8-CRW            PIC Z(1)9(1).9(2).
     05 WSH8-CRW-R          REDEFINES WSH8-CRW PIC X(5).
 01  WS-HEAD9.
     05 FILLER              PIC X(9)   VALUE ' REQUESTS'.
     05 FILLER              PIC X(19)  VALUE SPACES.
     05 FILLER              PIC X(104) VALUE 'CHANNEL OPERATIONS'.
 01  WS-HEAD10.
     05 WSH14-TITLE         PIC X(35).
     05 WSH14-INHC-BYPC     PIC Z(10)9(1).
     05 FILLER              PIC X(86) VALUE SPACES.
 01  WS-HEAD11.
     05 FILLER              PIC X(1) VALUE ' '.
     05 FILLER              PIC X(35) VALUE 'TRANSFER OPERATIONS'.
     05 FILLER              PIC X(96) VALUE
             '....DASD/CACHE...   ....CACHE/DASD...'.
 01  WS-HEAD12.
     05 FILLER              PIC X(36) VALUE SPACES.
     05 FILLER              PIC X(96) VALUE
             '     TOTAL  RATE         TOTAL   RATE'.
 01  WS-HEAD13.
     05 WSH13-TITLE         PIC X(36).
     05 FILLER              OCCURS 2.
        10 WSH13-VAL        PIC Z(9)9(1).
        10 WSH13-VALX       REDEFINES WSH13-VAL PIC X(10).
        10 FILLER           PIC X(2) VALUE SPACES.
        10 WSH13-RATE       PIC Z(1)9(1).9(2).
        10 WSH13-RATE-R     REDEFINES WSH13-RATE PIC X(5).
        10 FILLER           PIC X(4) VALUE SPACES.
     05 FILLER              PIC X(54) VALUE SPACES.
 01  WS-HEAD14.
     05 FILLER              PIC X(40) VALUE
        ' SEQUENTIAL STAGES/TOTAL I/O REQUESTS'.
     05 WSH14-SSTGIO        PIC Z(2)9(1).9(2).
     05 FILLER              PIC X(87) VALUE SPACES.
 01  WS-HEAD15.
     05 FILLER              PIC X(35) VALUE
        ' DASD FAST WRITE RETRIES'.
     05 WSH15-DFWRT         PIC Z(9)9(1).
     05 FILLER              PIC X(87) VALUE SPACES.
 01  WS-HEAD16.
     05 FILLER              PIC X(48) VALUE
              ' Vol ID       Reads   %     Read Hits  H/R      '.
     05 FILLER              PIC X(48) VALUE
              ' Writes   %    Write Hits  H/R          I/O   % '.
     05 FILLER              PIC X(36) VALUE
              '     I/O Hits  H/R  I/O Rate   R/W'.
 01  WS-HEAD17.
     05 FILLER              PIC X(124) VALUE SPACES.
     05 FILLER              PIC X(08)  VALUE 'Contd...'.
 01  WS-DETAIL-LINE.
     05 FILLER              PIC X(1).
     05 WDL-VOLID           PIC X(6).
     05 WS-DETAIL-LINE1     OCCURS 6.
        10 FILLER           PIC X(2).
        10 WDL-IOS          PIC Z(9)9(1).
        10 FILLER           PIC X(1).
        10 WDL-PERCENT      PIC Z(1)9(1).9(2).
        10 WDL-HR           REDEFINES WDL-PERCENT PIC 9(1).9(3) .
     05 FILLER              PIC X(4).
     05 WDL-TOTIORATE       PIC Z(1)9(1).9(2).
     05 FILLER              PIC X(1).
     05 WDL-RW-RATIO        PIC Z(2)9(1).9(2).
     05 WDL-RW-RATIO1       REDEFINES WDL-RW-RATIO   PIC  X(6) .
 01  WS-TRAILER-LINE.
     05 FILLER              PIC X(8) VALUE ' TOTAL '.
     05 WS-TRAILER-LINE1    OCCURS 6.
        10 WTL-IOS          PIC Z(10)9(1).
        10 FILLER           PIC X(1).
        10 WTL-PERCENT      PIC Z(4)9(1).
        10 WTL-HR           REDEFINES WTL-PERCENT PIC 9(1).9(3).
        10 FILLER           PIC X(1).
     05 FILLER              PIC X(2).
     05 WTL-TOTIORATE       PIC Z(2)9(1).9(2).
     05 FILLER              PIC X(1).
     05 WTL-RW-RATIO        PIC Z(2)9(1).9(2).
     05 WTL-RW-RATIO1       REDEFINES WTL-RW-RATIO   PIC  X(6) .
 01  WX-REP-TYPE.
     05 FILLER              PIC X(1).
     05 WX-TITLE1           PIC X(6).
     05 FILLER              PIC X(1).
     05 FILLER              OCCURS 11.
         10 WX-SUB-ID       PIC X(4).
         10 FILLER          PIC X(1).
     05 FILLER              PIC X(2).
 01  WX-DATE.
     05 FILLER              PIC X(1).
     05 WX-TITLE2           PIC X(4).
     05 FILLER              PIC X(1).
     05 WX-FROM-DATE        PIC 9(5).
     05 FILLER              PIC X(1).
     05 WX-TO-DATE          PIC 9(5).
 01  WX-TIME.
     05 FILLER              PIC X(1).
     05 WX-TITLE3           PIC X(4).
     05 FILLER              PIC X(1).
     05 WX-FROM-TIME        PIC 9(4).
     05 FILLER              PIC X(1).
     05 WX-TO-TIME          PIC 9(4).
 01  WX-TYPE.
     05 FILLER              PIC X(1).
     05 WX-SUMM-INT         PIC X(3).
 PROCEDURE DIVISION.
 A10-MAIN-PARA.
     OPEN INPUT INP-FILE OUTPUT PRT-FILE.
     INITIALIZE WS-INPREC W9-TOTAL WS-SORT-VARS W9-VOL-TABLE .
     PERFORM B10-ACCEPT-PARA.
     PERFORM X10-READ-FILE-PARA.
     PERFORM D10-SUBSYS-PARA THRU D99-EXIT  UNTIL E-O-F
     IF WX-SUMM-INT = 'SUM'
        PERFORM F10-PRINT-PARA VARYING I FROM 1 BY 1 UNTIL
                           WS-SUBSYS(I) = SPACES OR LOW-VALUES
     END-IF
     CLOSE INP-FILE PRT-FILE .
     STOP RUN.
 B10-ACCEPT-PARA.
     ACCEPT WX-REP-TYPE.
     ACCEPT WX-DATE.
     ACCEPT WX-TIME.
     ACCEPT WX-TYPE.
 D10-SUBSYS-PARA.
     MOVE WX-SUB-ID(1) TO WX-SUBSYS.
     IF E-O-F GO TO D99-EXIT .
     IF WX-SUBSYS = 'ALL' GO TO D20-PARA .
     PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10 OR
                     WX-SUB-ID(I) = SPACES OR LOW-VALUES
        IF WS-SSID = WX-SUB-ID(I)
           GO TO D30-PARA
        END-IF
     END-PERFORM.
     PERFORM X10-READ-FILE-PARA.
     GO TO D99-EXIT.
 D20-PARA.
     PERFORM VARYING I FROM 1 BY 1 UNTIL
                     WS-SUBSYS(I) = SPACES OR LOW-VALUES
        IF WS-SSID = WS-SUBSYS(I)
           GO TO D30-PARA
        END-IF
     END-PERFORM.
 D30-PARA.
     PERFORM VARYING K FROM 1 BY 1 UNTIL
                     WS-SUBSYS1(K) = SPACES OR LOW-VALUES
        IF ((WS-SSID = WS-SUBSYS1(K)) AND
           (WS-VOLUME = WS-VOLID1(K)))
           GO TO D40-PARA
        END-IF
     END-PERFORM.
 D40-PARA.
     IF ((((WS-DATE >=  WX-FROM-DATE)  AND
        (WS-DATE    <=  WX-TO-DATE))   AND
        (WS-TIME1   >=  WX-FROM-TIME)) AND
        (WS-TIME1   <   WX-TO-TIME))
        IF W9-S-DATE(I) = ZEROES
           MOVE WS-DATE TO W9-S-DATE(I)
           MOVE WS-TIME TO W9-S-TIME(I)
        END-IF
        MOVE WS-VOLUME  TO WS-VOLID(I)  WS-VOLID1(K)
        MOVE WS-SSID    TO WS-SUBSYS(I) WS-SUBSYS1(K)
        IF WX-SUMM-INT = 'INT'
           MOVE WS-TIME TO WX-S-TIME
           MOVE WS-SSID TO WX-S-SUBSYS
           PERFORM UNTIL E-O-F OR (WS-TIME NOT = WX-S-TIME) OR
                         (WS-SSID NOT = WX-S-SUBSYS)
              MOVE WS-VOLUME  TO WS-VOLID1(K)
              MOVE WS-SSID    TO WS-SUBSYS1(K)
              PERFORM I10-COMPUTE-SUBSYS-PARA
              PERFORM X10-READ-FILE-PARA
              ADD 1 TO K
           END-PERFORM
           PERFORM F10-PRINT-PARA
           INITIALIZE W9-TOTAL W9-V-TOTAL W9-VOL-TABLE
           GO TO D10-SUBSYS-PARA
        END-IF
        PERFORM I10-COMPUTE-SUBSYS-PARA
     END-IF.
     PERFORM X10-READ-FILE-PARA.
 D99-EXIT.
     EXIT.
 E10-PRINT-HEADING-PARA.
     ADD  1                 TO  W9-PAGE-CNT.
     MOVE W9-PAGE-CNT       TO  WSH1-PAGE.
     IF WX-SUMM-INT = 'SUM'
        MOVE 'SUMMARY'  TO WSH1-TYPE
     ELSE
        MOVE 'INTERVAL' TO WSH1-TYPE
     END-IF.
     MOVE WS-SUBSYS(I)    TO  WSH2-SUBSYS
     PERFORM K10-ACT-START-DATE-PARA.
     WRITE PRT-REC FROM WS-HEAD1  AFTER PAGE .
     WRITE PRT-REC FROM WS-HEAD2 AFTER 2
     WRITE PRT-REC FROM WS-DASHES AFTER 1
     WRITE PRT-REC FROM WS-HEAD3  AFTER 1.
     WRITE PRT-REC FROM WS-HEAD4  AFTER 2.
     WRITE PRT-REC FROM WS-HEAD5  AFTER 1.
     WRITE PRT-REC FROM WS-HEAD6 AFTER 1.
     WRITE PRT-REC FROM WS-HEAD7 AFTER 1.
     MOVE 14 TO W9-LINE-CNT.
 F10-PRINT-PARA .
     PERFORM L10-ACT-END-DATE-PARA
     PERFORM E10-PRINT-HEADING-PARA
     INITIALIZE W9-RATIO.
     MOVE '   NORMAL'        TO WSH8-TITLE.
     MOVE W9-CNT(I, 1)       TO WSH8-TREAD
     MOVE W9-CNT(I, 2)       TO WSH8-CREAD
     MOVE W9-CNT(I, 3)       TO WSH8-TWRIT
     MOVE W9-CNT(I, 4)       TO WSH8-DWRIT
     MOVE W9-CNT(I, 5)       TO WSH8-CWRIT
     COMPUTE W9-T-TOTAL   = W9-CNT(I, 1) + W9-CNT(I, 3)
     MOVE W9-T-TOTAL         TO WSH8-TIO
     COMPUTE W9-T-TOTAL   = W9-CNT(I, 2) + W9-CNT(I, 5)
     MOVE W9-T-TOTAL         TO WSH8-CIO
     IF W9-CNT(I, 2) NOT = 0
        COMPUTE W9-RAT1    =  W9-CNT(I, 2) / W9-CNT(I, 1).
     MOVE W9-RAT1            TO WSH8-RHR
     INITIALIZE W9-RAT1.
     IF W9-CNT(I, 4) NOT   = 0
        COMPUTE W9-RAT1    =  W9-CNT(I, 5) / W9-CNT(I, 3).
     MOVE W9-RAT1            TO WSH8-WHR
     INITIALIZE W9-RAT1.
     COMPUTE W9-RAT2       =  W9-CNT(I, 2) / W9-CNT(I, 5)
        ON SIZE ERROR MOVE '*****' TO WSH8-CRW-R
        NOT ON SIZE ERROR
           MOVE W9-RAT2      TO WSH8-CRW.
     INITIALIZE W9-RAT2.
     IF (W9-CNT(I, 2) + W9-CNT(I, 5)) NOT = 0
        COMPUTE W9-RAT1    =  (W9-CNT(I, 2) + W9-CNT(I, 5)) /
                              (W9-CNT(I, 1) + W9-CNT(I, 3))
     MOVE W9-RAT1            TO WSH8-IOHR
     INITIALIZE W9-RAT1.
     WRITE PRT-REC FROM WS-HEAD8 AFTER 1.
     MOVE '   SEQUENTIAL'    TO WSH8-TITLE.
     MOVE W9-CNT(I, 6)       TO WHS8-TREAD
     MOVE W9-CNT(I, 7)       TO WHS8-CREAD
     MOVE W9-CNT(I, 8)       TO WSH8-TWRIT
     MOVE W9-CNT(I, 9)       TO WSH8-DWRIT
     MOVE W9-CNT(I, 10)      TO WSH8-CWRIT
     COMPUTE W9-T-TOTAL    = W9-CNT(I, 6) + W9-CNT(I, 8)
     MOVE W9-T-TOTAL         TO WSH8-TIO
     COMPUTE W9-T-TOTAL    = W9-CNT(I, 7) + W9-CNT(I, 10)
     MOVE W9-T-TOTAL         TO WSH8-CIO
     IF W9-CNT(I, 7) NOT = 0
        COMPUTE W9-RAT1    = W9-CNT(I, 7) / W9-CNT(I, 6).
     MOVE W9-RAT1            TO WSH8-RHR
     INITIALIZE W9-RAT1.
     IF W9-CNT(I, 9) NOT      = 0
        COMPUTE W9-RAT1       =  W9-CNT(I, 10) / W9-CNT(I, 8).
     MOVE W9-RAT1            TO WSH8-WHR
     COMPUTE W9-RAT2       =  W9-CNT(I, 7) / W9-CNT(I, 10)
        ON SIZE ERROR MOVE '*****' TO WSH8-CRW-R
        NOT ON SIZE ERROR
        MOVE W9-RAT2         TO WSH8-CRW.
     INITIALIZE W9-RAT2.
     IF (W9-CNT(I, 7) + W9-CNT(I, 10)) NOT = 0
        COMPUTE W9-RAT1  =  (W9-CNT(I, 7) + W9-CNT(I, 10)) /
                            (W9-CNT(I, 6) + W9-CNT(I, 8))
     MOVE W9-RAT1            TO WSH8-IOHR.
     INITIALIZE W9-RAT1.
     WRITE PRT-REC FROM WS-HEAD8 AFTER 1.
     MOVE '   CACHE FAST WRITE'    TO WSH8-TITLE.
     MOVE W9-CNT(I, 11)      TO WSH8-TREAD
     MOVE W9-CNT(I, 12)      TO WSH8-CREAD
     MOVE W9-CNT(I, 13)      TO WSH8-TWRIT
     MOVE '       N/A'       TO WSH8-DWRIT-R
     MOVE W9-CNT(I, 14)      TO WSH8-CWRIT
     COMPUTE W9-T-TOTAL      =  W9-CNT(I, 11) + W9-CNT(I, 13)
     MOVE W9-T-TOTAL         TO WSH8-TIO
     COMPUTE W9-T-TOTAL      =  W9-CNT(I, 12) + W9-CNT(I, 14)
     MOVE W9-T-TOTAL         TO WSH8-CIO
     IF W9-CNT(I, 12) NOT     = 0
        COMPUTE W9-RAT1       =  W9-CNT(I, 12) / W9-CNT(I, 11).
     MOVE W9-RAT1            TO WSH8-RHR.
     INITIALIZE W9-RAT1.
     IF W9-CNT(I, 14) NOT     = 0
        COMPUTE W9-RAT1       =  W9-CNT(I, 14) / W9-CNT(I, 13).
     MOVE W9-RAT1            TO WSH8-WHR
     INITIALIZE W9-RAT1.
     COMPUTE W9-RAT2       =  W9-CNT(I, 12) / W9-CNT(I, 14)
        ON SIZE ERROR MOVE '*****' TO WSH8-CRW-R
        NOT ON SIZE ERROR
        MOVE W9-RAT2         TO WSH8-CRW.
     INITIALIZE W9-RAT2.
     IF (W9-CNT(I, 12) + W9-CNT(I, 14)) NOT = 0
        COMPUTE W9-RAT1   =  (W9-CNT(I, 12) + W9-CNT(I, 14)) /
                             (W9-CNT(I, 11) + W9-CNT(I, 13)).
     MOVE W9-RAT1            TO WSH8-IOHR
     INITIALIZE W9-RAT1.
     WRITE PRT-REC FROM WS-HEAD8 AFTER 1.
     COMPUTE W9-V-TOT1(1) = W9-CNT(I, 1) + W9-CNT(I, 6)  +
                            W9-CNT(I, 11)
     COMPUTE W9-V-TOT1(2) = W9-CNT(I, 2) + W9-CNT(I, 7)  +
                            W9-CNT(I, 12)
     COMPUTE W9-V-TOT1(3) = W9-CNT(I, 3) + W9-CNT(I, 8)  +
                            W9-CNT(I, 13)
     COMPUTE W9-V-TOT1(4) = W9-CNT(I, 5) + W9-CNT(I, 10) +
                            W9-CNT(I, 14)
     COMPUTE W9-V-TOT1(5) = W9-V-TOT1(1) + W9-V-TOT1(3)
     COMPUTE W9-V-TOT1(6) = W9-V-TOT1(2) + W9-V-TOT1(4)
     COMPUTE W9-T-TOTAL     = W9-CNT(I, 4) + W9-CNT(I, 9)
     MOVE '   TOTALS'      TO WSH8-TITLE.
     MOVE W9-V-TOT1(1)       TO WSH8-TREAD
     MOVE W9-V-TOT1(2)       TO WSH8-CREAD
     MOVE W9-V-TOT1(3)       TO WSH8-TWRIT
     MOVE W9-T-TOTAL         TO WSH8-DWRIT
     MOVE W9-V-TOT1(4)       TO WSH8-CWRIT
     MOVE W9-V-TOT1(5)       TO WSH8-TIO
     MOVE W9-V-TOT1(6)       TO WSH8-CIO
     IF W9-V-TOT1(2) NOT      = 0
        COMPUTE W9-RAT1 =  W9-V-TOT1(2) / W9-V-TOT1(1).
     MOVE W9-RAT1            TO WSH8-RHR.
     INITIALIZE W9-RAT1.
     IF W9-V-TOT1(4) NOT      = 0
        COMPUTE W9-RAT1 = W9-V-TOT1(4) / W9-V-TOT1(3).
     MOVE W9-RAT1            TO WSH8-WHR
     INITIALIZE W9-RAT1.
     IF W9-V-TOT1(6)    NOT = 0
        COMPUTE W9-RAT1 = W9-V-TOT1(6) / W9-V-TOT1(5).
     MOVE W9-RAT1            TO WSH8-IOHR
     INITIALIZE W9-RAT1.
     COMPUTE W9-RAT2       = W9-V-TOT1(2) / W9-V-TOT1(4)
        ON SIZE ERROR MOVE '*****' TO WSH8-CRW-R
        NOT ON SIZE ERROR
        MOVE W9-RAT2         TO WSH8-CRW.
     INITIALIZE W9-RAT2.
     WRITE PRT-REC FROM WS-HEAD8 AFTER 2.
     WRITE PRT-REC FROM WS-HEAD9 AFTER 2.
     MOVE '   INHIBIT CACHE LOADING'  TO WSH14-TITLE.
     MOVE W9-CNT(I, 15)               TO WSH14-INHC-BYPC.
     WRITE PRT-REC FROM WS-HEAD10 AFTER 1.
     MOVE '   BYPASS CACHE'           TO WSH14-TITLE.
     MOVE W9-CNT(I,  16)              TO WSH14-INHC-BYPC.
     WRITE PRT-REC FROM WS-HEAD10 AFTER 1.
     WRITE PRT-REC FROM WS-HEAD11 AFTER 2.
     WRITE PRT-REC FROM WS-HEAD12 AFTER 1.
     MOVE '   NORMAL'                 TO  WSH13-TITLE.
     MOVE  W9-CNT(I, 17)              TO  WSH13-VAL(1).
     MOVE  W9-CNT(I, 18)              TO  WSH13-VAL(2).
     IF W9-CNT(I, 17) NOT = 0
        COMPUTE W9-RAT1       =  W9-CNT(I, 17) / W9-TOTINT(I).
     MOVE  W9-RAT1                    TO  WSH13-RATE(1).
     INITIALIZE W9-RAT1.
     IF W9-CNT(I, 18) NOT = 0
        COMPUTE W9-RAT1       =  W9-CNT(I, 18) / W9-TOTINT(I).
     MOVE  W9-RAT1                    TO  WSH13-RATE(2).
     INITIALIZE W9-RAT1.
     WRITE PRT-REC                   FROM WS-HEAD13 AFTER 2.
     MOVE '   SEQUENTIAL'             TO  WSH13-TITLE.
     MOVE  W9-CNT(I, 19)              TO  WSH13-VAL(1).
     MOVE  '       N/A'               TO  WSH13-VALX(2).
     MOVE  '  N/A'                    TO  WSH13-RATE-R(2).
     IF W9-CNT(I, 19) NOT = 0
        COMPUTE W9-RAT1       =  W9-CNT(I, 19) / W9-TOTINT(I).
     MOVE  W9-RAT1                    TO  WSH13-RATE(1).
     INITIALIZE W9-RAT1.
     WRITE PRT-REC                   FROM WS-HEAD13 AFTER 1.
     IF W9-CNT(I, 19) NOT = 0
        COMPUTE W9-RAT1 = W9-CNT(I,  19) / W9-V-TOT1(5).
     MOVE  W9-RAT1                    TO  WSH14-SSTGIO.
     INITIALIZE W9-RAT1.
     WRITE PRT-REC                   FROM WS-HEAD14 AFTER 2.
     MOVE  W9-CNT(I, 20)              TO WSH15-DFWRT.
     WRITE PRT-REC                   FROM WS-HEAD15 AFTER 2.
     ADD 19 TO W9-LINE-CNT.
     PERFORM G10-PRINT-DETAILS-PARA .
 G10-PRINT-DETAILS-PARA .
     WRITE PRT-REC FROM WS-DASHES AFTER 2.
     WRITE PRT-REC FROM WS-HEAD16 AFTER 1.
     WRITE PRT-REC FROM WS-DASHES AFTER 1.
     ADD 4 TO W9-LINE-CNT.
     IF WX-SUMM-INT = 'SUM'
        IF I = 1
           MOVE 1 TO J , M
        END-IF
     ELSE
        MOVE 1 TO M
     END-IF
     COMPUTE W9-V-TOT3 = W9-V-TOT1(5) / W9-TOTINT(I)
     MOVE WS-SUBSYS(I) TO WS-SUBSYS1(J)
     PERFORM VARYING J FROM M BY 1 UNTIL
                       ((WS-SUBSYS1(J) NOT = WS-SUBSYS(I)) OR
                       (WS-VOLID1(J) = SPACES OR LOW-VALUES))
        INITIALIZE WS-DETAIL-LINE W9-TEMP
        MOVE WS-VOLID1(J)       TO    WDL-VOLID
        PERFORM VARYING N FROM 1 BY 2 UNTIL N > 5
          COMPUTE WDL-PERCENT(N) = W9-V-TOT(J, N) * 100
                                   / W9-V-TOT1(N)
          MOVE W9-V-TOT(J, N) TO  WDL-IOS(N)
        END-PERFORM
        PERFORM VARYING N FROM 2 BY 2 UNTIL N > 6
          MOVE W9-V-TOT(J, N) TO  WDL-IOS(N)
          COMPUTE WDL-HR(N) = W9-V-TOT(J, N) / W9-V-TOT(J, N - 1)
            ON SIZE ERROR  MOVE ZEROS TO WDL-HR(N)
          END-COMPUTE
        END-PERFORM
        INITIALIZE W9-VOL-IORATE(J)
        IF W9-V-TOT(J, 5) NOT = 0
           COMPUTE W9-VOL-IORATE(J) =
                                 W9-V-TOT(J, 5) / W9-INT-TOT(J)
        END-IF
        MOVE W9-VOL-IORATE(J)  TO    WDL-TOTIORATE
        COMPUTE WDL-RW-RATIO = W9-V-TOT(J, 1) / W9-V-TOT(J, 3)
           ON SIZE ERROR MOVE '******' TO WDL-RW-RATIO1
        END-COMPUTE
        WRITE PRT-REC FROM WS-DETAIL-LINE AFTER 1
        ADD 1 TO W9-LINE-CNT
        IF W9-LINE-CNT > 65
           WRITE PRT-REC FROM WS-HEAD17 AFTER 1
           ADD  1             TO W9-PAGE-CNT
           MOVE W9-PAGE-CNT   TO WSH1-PAGE
           WRITE PRT-REC FROM WS-DASHES AFTER 2
           WRITE PRT-REC FROM WS-HEAD16 AFTER 1
           WRITE PRT-REC FROM WS-DASHES AFTER 1
           MOVE 6 TO W9-LINE-CNT
        END-IF
     END-PERFORM.
     PERFORM VARYING N FROM 1 BY 2 UNTIL N > 5
        MOVE W9-V-TOT1(N)      BY WTL-IOS(N)
        MOVE 100               TO WTL-PERCENT(N)
     END-PERFORM
     PERFORM VARYING N FROM 2 BY 2 UNTIL N > 6
        MOVE W9-V-TOT1(N)      TO WTL-IOS(N)
        COMPUTE WTL-HR(N) = W9-V-TOT1(N) / W9-V-TOT1( N - 1 )
     END-PERFORM
     MOVE W9-V-TOT3            TO WTL-TOTIORATE
     COMPUTE WTL-RW-RATIO = W9-V-TOT1(1) / W9-V-TOT1(3)
       ON SIZE ERROR  MOVE '******' TO WTL-RW-RATIO1
     END-COMPUTE
     WRITE PRT-REC FROM WS-DASHES AFTER 1
     WRITE PRT-REC FROM WS-TRAILER-LINE AFTER 1
     INITIALIZE WS-TRAILER-LINE W9-V-TOTAL
     WRITE PRT-REC FROM WS-DASHES AFTER 1.
     MOVE J TO M.
 H10-COMPUTE-DEVICE-PARA.
     PERFORM VARYING N FROM 1 BY 1 UNTIL N > 20
        ADD WS-CNT(N) TO W9-CNT(I, N)
     END-PERFORM
     MOVE WS-DATE       TO   W9-E-DATE(I)
     MOVE WS-TIME       TO   W9-E-TIME(I)
     MOVE WS-INT        TO   W9-S-INT(I).
     IF WS-TIME NOT = W9-S-TIME1(I)
        COMPUTE W9-TOTINT(I) = W9-TOTINT(I) + WS-INT
        MOVE WS-TIME TO W9-S-TIME1(I)
     END-IF .
 I10-COMPUTE-SUBSYS-PARA.
     COMPUTE W9-V-TOT(K, 1) = W9-V-TOT(K, 1)
                            + WS-CNT(1) + WS-CNT(6) + WS-CNT(11)
     COMPUTE W9-V-TOT(K, 2) = W9-V-TOT(K, 2)
                            + WS-CNT(2) + WS-CNT(7) + WS-CNT(12)
     COMPUTE W9-V-TOT(K, 3) = W9-V-TOT(K, 3)
                            + WS-CNT(3) + WS-CNT(8) + WS-CNT(13)
     COMPUTE W9-V-TOT(K, 4) = W9-V-TOT(K, 4)
                            + WS-CNT(5) + WS-CNT(10) + WS-CNT(14)
     COMPUTE W9-V-TOT(K, 5) = W9-V-TOT(K, 1) + W9-V-TOT(K, 3)
     COMPUTE W9-V-TOT(K, 6) = W9-V-TOT(K, 2) + W9-V-TOT(K, 4)
     COMPUTE W9-INT-TOT(K)  = W9-INT-TOT(K)  + WS-INT
     PERFORM H10-COMPUTE-DEVICE-PARA.
 K10-ACT-START-DATE-PARA .
     MOVE SPACES            TO WS-T-DATE WS-T-TIME
     MOVE W9-S-DATE(I)      TO WS-T-DATE.
     MOVE WS-T-DATE(1:2)    TO WSH2-ST-DT-YY.
     MOVE WS-T-DATE(3:3)    TO WSH2-ST-DT-DD.
     MOVE W9-S-TIME(I)      TO WS-T-TIME
     MOVE WS-T-TIME(1:2)    TO WSH2-ST-TM-HH.
     MOVE WS-T-TIME(3:2)    TO WSH2-ST-TM-MM.
 L10-ACT-END-DATE-PARA .
     MOVE SPACES            TO WS-T-DATE
     MOVE W9-E-DATE(I)      TO WS-T-DATE
     MOVE WS-T-DATE(1:2)    TO WSH2-END-DT-YY
     MOVE WS-T-DATE(3:3)    TO WSH2-END-DT-DD
     COMPUTE W9-S-TIMEX = W9-E-TIME1(I) * 3600 +
              W9-E-TIME2(I) * 60  + W9-E-TIME3(I) + W9-S-INT(I)
     DIVIDE W9-S-TIMEX BY 3600 GIVING W9-HH REMAINDER W9-REM
     DIVIDE W9-REM BY 60 GIVING W9-MM REMAINDER W9-SS
     MOVE W9-HH             TO WSH2-END-TM-HH
     MOVE W9-MM             TO WSH2-END-TM-MM
     INITIALIZE W9-HH W9-MM W9-SS W9-REM W9-E-TIME(I)
     DIVIDE W9-TOTINT(I) BY 3600 GIVING W9-HH REMAINDER W9-REM
     DIVIDE W9-REM BY 60 GIVING W9-MM REMAINDER W9-SS
     MOVE W9-HH      TO       WSH2-INT-HH
     MOVE W9-MM      TO       WSH2-INT-MM
     MOVE W9-SS      TO       WSH2-INT-SS .
 X10-READ-FILE-PARA .
     READ INP-FILE
       INTO WS-INPREC
       AT END MOVE 'Y' TO WX-EOF .


M V George and S K Nambiar
Systems Programmers
Qatar Ministry of Interior (Qatar)                               c Xephon 1993

