Monitoring and cleaning up APF list

The problems

The following article addresses two common problems
concerning the APF list.

Problem one

It is common knowledge that the MVS APF list contains a list of
very sensitive libraries. Any module that resides in this list and has
been linked with the AC=1 attribute is authorized to issue
privileged instructions and/or system SVCs. For example, the
MODESET macro can be issued to switch from program state to
supervisor state and/or storage key zero. The usual approach to
safeguard the APF list is to examine the IEAAPFxx member
manually to make sure all listed entries are legitimate, valid, and
real physical datasets. This approach may work with a fairly short
list of APF list libraries and where the APF list is constantly being
checked manually. However, in a large installation, the APF list
will usually grow over a period of time simply because entries
originally put in the APF list for older versions of products are not
deleted when the products are removed. The result is that a lot of
entries in the APF list do not have any corresponding real datasets
on DASD. (During system initialization, NIP does not try to
locate datasets that are listed in IEAAPFxx.) Anyone that happens
to find such entries could simply create an authorized library with
a dataset name and VOLSER that match the obsolete APF list
entry. To prevent this from happening, all entries in IEAAPFxx
with obsolete datasets must be detected and deleted as quickly as
possible.

Problem two

At IPL time, MVS reads in the IEAAPFxx member, builds a
table, and stores the entry point in CVT (CVTAUTHL).
Individuals that have access to some special software monitors or
some home-grown routines can actually modify or expand this
table dynamically to create new authorized libraries. The changes
or expansions are effective immediately and no changes or log
entries are written anywhere in the system! The only way to detect
this is to compare the memory-resident APF list against the
IEAAPFxx member in SYS1.PARMLIB to see if any dynamic
changes have been made.

The solution

PWLAPF1 is an ISPF application developed to automate the
process of examining the memory-resident APF list and identify
entries that should be cleaned up to avoid possible security risks.
Optionally, it can also compare the memory-resident APF list
against a specified IEAAPFxx member to detect dynamic changes
made to the resident APF list.

The program PWLAPF1 uses ISPF table services and is invoked
by using a CLIST (also called PWLAPF1). It requires three
panels (PWLAPF10, PWLAPF20, and PWLAPF30) to be
installed in the user's ISPF panel library.

The first panel displayed is PWLAPF10. It will prompt the user to
select either an option to display the resident APF list only, or an
option to compare the resident APF list against a PARMLIB
IEAAPFxx member.

If option 2 is selected, PWLAPF20 will be displayed to prompt
the user to override the default PARMLIB dataset name, SYSP
suffix, and/or APF suffix (used for the current IPL) - the default is
SYS1.PARMLIB, IEASYS00, and IEAAPF00.

Each entry of the resident APF list is then displayed using panel
PWLAPF30, along with a status indicator. Following is a list of
the possible status indicators and the recommended actions:

o      *NOT CATLGED* - the listed DSN/VOLSER
      combination is not catalogued. The entry should either be
      properly re-catalogued or removed if no longer required.

o      *NONEXISTENT* - there is no real dataset to match the
      DSN/VOLSER combination. The entry should be removed
      immediately.

o      *DIFF. FROM CATLG* - the listed DSN/VOLSER
      (uncatalogued) combination does not match the catalog
      information. In other words, the catalog entry shows the
      dataset is residing on another volume. Determine which one is
      being used in production and delete either the catalogued
      entry or the listed entry.

o      ? - a '?' sign by itself or with any of the above indicates the
      listed entry does not match the corresponding entry in the
      specified IEAAPFxx list (used in the current IPL). The entry
      has either been modified or is a new dynamic addition. The
      program PWLAPF1 does a simple line by line comparison
      between the resident APF list and the specified IEAAPFxx
      members. Under normal circumstances there should be no
      entry flagged with the '?' sign. If an entry is dynamically
      added to the list, it will usually show up at the end of the
      display with a '?' sign. If numerous entries are flagged with
      the '?' sign, it may be because numerous entries have been
      modified or one or more entries have been deleted. In either
      case, a closer scrutiny is required to find out the exact cause. If
      this is happening too often, a slip trap may have to be set up to
      detect further changes to the resident APF list.

A quick run of this program can usually identify one or more
entries that should be examined further and/or removed
immediately, eliminating the time-consuming task of checking the
IEAAPFxx member manually. Figure 1 shows a sample display
produced by PWLAPF1.


COMMAND ===>                                               ROW 1 OF 138
    Display Resident APF Library List     94/09/14  15.:46
     Option selected = 2
     PARMLIB specified for compare = SYS1.PARMLIB
     SYSP suffix  = 00      APF suffix = 01
     APF library name                              VOLSER Status
     ============================================= ====== ====================
     SYS1.LINKLIB                                  MVSRES
     SYS1.SVCLIB                                   MVSRES
     SYS1.PROD1.LOADLIB                            MVS001 *NONEXISTENT*
     SYS1.PROD2.LOADLIB                            MVS001
     SYS1.APPL1.LOAD                               MVS001
     SYS1.APPL1.LOAD                               MVS002 *DIFF. FROM CATLG*
     SYS2.APPL2.LOAD                               MVS003
     SYS2.APPL3.AUTHLIB                            APP001 *NOT CATLGED*
     SYSX.TEMP.AUTHLIB                             TSO002 ?

Figure 1: Sample display from PWLAPF1

Source code for program PWLAPF1

         TITLE ' LIST APF LIBRARIES '
PWLAPF1  PWLINIT
* PROGRAM TO DISPLAY APF LIST.
* CAN BE CALLED FROM ISPF OR BATCH.
* WHEN CALLED FROM BATCH, OUTPUT IS WRITTEN TO DDNAME APFLIST
* WHEN CALLED FROM ISPF, OUPUT IS DISPLAYED USING ISPF TABLE SERVICES.
         LR    R7,R1                       SAVE R1
         MVI   PFLAG1,X'00'
         CALL  ISPQRY                      ISPF?
         LTR   R15,R15
         BZ    ISPF10                      YES. ISPF CALLERS
* GET BATCH OR TSO CALLERS PARM: SYSP=XX,APF=XX,PARMLIB=,O=
         LR    R1,R7               RESTORE R1
         MVC   PARMLIB(12),=C'SYS1.PARMLIB' DEFAULT PARMLIB
         MVI   OPTION,C'1'                  DEFAULT OPTION
         MVC   APFSUFX,=C'  '               DEFAULT APF SUFFIX
         MVC   SYSPSUFX,=C'  '              DEFAULT SYSP SUFFIX
         LR    R2,R1
         $#FIND REC=(R2),CHAR=('OPTION=','O=')
         LTR   R1,R1
         BZ    PARM10
         MVC   OPTION,0(1)
PARM10   DS    0H
         $#FIND REC=(R2),CHAR=('PARMLIB=','P=')
         LTR   R1,R1
         BZ    PARM20
         LR    R3,R1
         $#MOVE TO=PARMLIB,FROM=(R3),STOP=(' ',',')
PARM20   DS    0H
         $#FIND REC=(R2),CHAR=('APF=','A=')
         LTR   R1,R1
         BZ    PARM30
         MVC   APFSUFX,0(R1)
         B     PARM42
PARM30   DS    0H
         $#FIND REC=(R2),CHAR=('SYSP=','S=')
         LTR   R1,R1
         BZ    PARM40
         MVC   SYSPSUFX,0(R1)
         B     PARM42
PARM40   DS    0H
         MVC   APFSUFX(2),=C'00'
PARM42   DS    0H
         $#FIND REC=(R2),CHAR=('DEBUG=YES','D=Y')
         LTR   R1,R1
         BZ    PARM50
         OI    PFLAG1,P1DEBUG
PARM50   DS    0H
         B     ISPF90
ISPF10   DS    0H
         OI    PFLAG1,P1ISPF       INDICATE ISPF CALLER
ISPF90   DS    0H
         L     R2,CVTPTR           ADDRESS OF CVT.
         USING CVT,R2
         L     R10,CVTAUTHL        ADDRESS OF RESIDENT APF LIBRARY LIST
         DROP  R2
         TM    PFLAG1,P1ISPF
         BO    OPEN10
         OPEN  (APFLIST,OUTPUT)    OPEN BATCH OUTPUT LIST
         B     OPEN92
OPEN10   DS    0H                  ESTABLISH ISPF ENVIRONMENT
         CALL  ISPLINK,(VDEFINE,APF1,APFLIB,CHAR,L44),VL,              X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(VDEFINE,APF2,APFVOL,CHAR,L6),VL,               X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(VDEFINE,APF3,APFSTA,CHAR,L20),VL,              X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(VDEFINE,LCMD,LINECM,CHAR,L4),VL,               X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(VDEFINE,O1,OPTION,CHAR,L1),VL,                 X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(VDEFINE,PARM,PARMLIB,CHAR,L44),VL,             X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(VDEFINE,APF,APFSUFX,CHAR,L2),VL,               X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(VDEFINE,SYSP,SYSPSUFX,CHAR,L2),VL,             X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(TBERASE,APFTAB),VL,                            X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(TBCREATE,APFTAB,,NLIST1,NOWRITE),VL,           X
               MF=(E,PARMLIST)
OPEN90   DS    0H
* VGET O1, PARM, APF, SYSP
         CALL  ISPLINK,(VGET,NLIST2),VL,                               X
               MF=(E,PARMLIST)
OPEN92   DS    0H
         CLI   OPTION,C'2'                  OPTION 2(COMPARE)?
         BNE   RDAPF12                      NO.
         OI    PFLAG1,P1COMP
* CALL PWLRPDS2 TO READ IEAAPFXX OR IEASYSXX.
         MVC   PARMLIST(44),PARMLIB         DSN OF PARMLIB
         CLI   APFSUFX,C' '                 IEAAPFXX SUFFIX SPEC'D?
         BNE   RDAPF10                      YES. GO READ IEAAPFXX
         MVC   PARMLIST+44(8),IEASYSXX
RDSYS02  DS    0H
         LA    R1,PARMS
         CALL  PWLRPDS2                     READ IEASYSXX
         LTR   R15,R15
         BNZ   ERREXIT1
         USING TDSECT,R11
         LR    R11,R1
         LA    R9,TFIRST                    GET FIRST ENTRY
         L     R8,TNUMREC
RDSYS10  DS    0H
         $#FIND REC=(R9),CHAR=('APF=','APF=')
         LTR   R2,R1                        FOUND?
         BZ    RDSYS20                      NO.
         $#MOVE TO=APFSUFX,FROM=(R2),STOP=(' ',',')
         B     RDAPF10                      GO READ IEAAPFXX
RDSYS20  DS    0H
         AH    R9,TRECL                     SKIP TO NEXT ENTRY
         BCT   R8,RDSYS10
         CLC   =C'IEASYS00',PARMLIST+44     IEASYS00?
         BE    RDSYS30
         MVC   PARMLIST+44(8),=C'IEASYS00'
         B     RDSYS02
RDSYS30  DS    0H
         MVC   APFSUFX(2),=C'00'            DEFAULT TO IEAAPF00
RDAPF10  DS    0H
         MVC   PARMLIST+44(8),IEAAPFXX
         LA    R1,PARMS
         CALL  PWLRPDS2
         LTR   R15,R15
         BNZ   ERREXIT1
* ON RETURN, R1 = ADDR OF TABLE CONTAINING EITHER IEASYSXX OR IEAAPFXX
         USING TDSECT,R11
         LR    R11,R1
         LA    R9,TFIRST                    GET FIRST ENTRY
         SH    R9,TRECL
RDAPF12  DS    0H
         TM    PFLAG1,P1ISPF
         BO    RDAPF14
         MVC   APFLIB(L'MSG1),MSG1
         MVC   APFSTA(L'MSG2),MSG2
         BAL   R6,PUT
         MVC   APFLIB(L'MSG3),MSG3
         MVC   APFVOL(L'MSG4),MSG4
         MVC   APFSTA(L'MSG6),MSG6
         BAL   R6,PUT
         MVC   APFLIB(L'MSG5),MSG5
         MVC   APFVOL(L'MSG4),MSG5
         MVC   APFSTA(L'MSG6),MSG5
         BAL   R6,PUT
         BAL   R6,PUT
RDAPF14  DS    0H
         USING ADSECT,R10
         SLR   R8,R8
         ICM   R8,3,ATOTAL         SAVE TOTAL NUMBER OF ENTRIES
         LA    R10,ALEN(,R10)      SKIP OVER HEADER
         USING A1DSECT,R10
LISTENT  DS    0H
         SLR   R1,R1
         ICM   R1,1,A1LEN          LENGTH OF THIS ENTRY
         LR    R3,R1               LENGTH OF THIS ENTRY
         LA    R3,1(,R3)             PLUS 1ST BYTE
         SH    R1,=H'7'            MINUS LENGTH OF VOLSER AND A1LEN
         EX    R1,MOVELIB          GET LIBRARY NAME
         MVC   APFVOL(6),A1VOL     GET VOLSER FROM APF LIST
         TM    PFLAG1,P1COMP       COMP?
         BNO   LSTENT04            NO. GO TO CHECK RESIDENT ENTRY
         TM    PFLAG1,P1TEND       END OF IEAAPFXX?
         BO    LSTENT02
         ICM   R1,15,SKIP          DON'T COMPARE 1ST TWO RESIDENT
         BZ    LSTENT01               ENTRIES
         BCTR  R1,R0
         ST    R1,SKIP
         B     LSTENT04
LSTENT01 DS    0H
         LR    R2,R9
         MVI   T1LIB,C' '
         MVC   T1LIB+1(L'T1LIB-1),T1LIB
         MVI   T1VOL,C' '
         MVC   T1VOL+1(L'T1VOL-1),T1VOL
         $#MOVE TO=T1LIB,FROM=(R2),STOP=(' ',',')
         LR    R2,R14
         $#MOVE TO=T1VOL,FROM=(R2),STOP=(' ',','),SKIP=(' ')
         CLC   T1LIB,APFLIB
         BNE   LSTENT02
         CLC   T1VOL,APFVOL
         BNE   LSTENT02
         B     LSTENT04
LSTENT02 DS    0H
         MVI   APFSTA,C'?'         INDICATE RESIDENT ENTRY CHANGED
LSTENT04 DS    0H
         OBTAIN CAMLST1            OBTAIN DATASET
         LTR   R15,R15
         BZ    LSTENT10            OK.
         MVC   APFSTA+1(L'STAT1),STAT1   NON-EXISTENT DATASET
         B     LSTENT90
LSTENT10 DS    0H
         LOCATE CAMLST2            LOCATE DATASET
         LTR   R15,R15
         BZ    LSTENT20            OK.
         MVC   APFSTA+1(L'STAT2),STAT2   NOT CATALOGUED
         B     LSTENT90
LSTENT20 DS    0H
         LA    R4,WORK1            POINT TO VOLUME LIST
         USING VDSECT,R4
         LA    R4,VLEN(,R4)        SKIP OVER HEADER
         USING V1DSECT,R4
         CLC   V1VOL,APFVOL        ASSUME ONLY ONE VOLUME
         BE    LSTENT90
         MVC   APFSTA+1(L'STAT3),STAT3   DIFFERENT FROM CATALOG
LSTENT90 DS    0H
         BAL   R6,PUT
         AR    R10,R3              SKIP TO NEXT ENTRY (RESIDENT)
         TM    PFLAG1,P1COMP       COMPARE?
         BNO   LSTENT94            NO.
         TM    PFLAG1,P1TEND       END OF IEAAPFXX TABLE?
         BO    LSTENT94
         ICM   R1,15,SKIP
         BNZ   LSTENT94
         AH    R9,TRECL            SKIP TO NEXT ENTRY (IEAAPFXX)
         L     R1,TNUMREC
         BCTR  R1,R0
         ST    R1,TNUMREC
         LTR   R1,R1
         BNM   LSTENT94
         OI    PFLAG1,P1TEND
LSTENT94 DS    0H
         BCT   R8,LISTENT
         TM    PFLAG1,P1ISPF
         BO    CLOSE10
         CLOSE APFLIST
         B     CLOSE90
CLOSE10  DS    0H
         CALL  ISPLINK,(TBTOP,APFTAB),VL,                              X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(TBDISPL,APFTAB,PWLAPF30),VL,                   X
               MF=(E,PARMLIST)
         CALL  ISPLINK,(TBCLOSE,APFTAB),VL,                            X
               MF=(E,PARMLIST)
CLOSE90  DS    0H
         B     EXIT
ERREXIT1 DS    0H
         WTO   'PWLAPF1A - ERROR RETURN FROM PWLRPDS2',ROUTCDE=11
         MVI   RC,X'04'
         B     EXIT
MOVELIB  MVC   APFLIB(0),A1LIB
PUT      DS    0H
         TM    PFLAG1,P1ISPF
         BO    PUT10
         PUT   APFLIST,LIST
         B     PUT90
PUT10    DS    0H
         CALL  ISPLINK,(TBADD,APFTAB,NLIST1),VL,                       X
               MF=(E,PARMLIST)
PUT90    DS    0H
         MVI   LIST,X'40'
         MVC   LIST+1(L'LIST-1),LIST
         BR    R6
* DSECTS, CONSTANTS
PARMS    DS    0F                    15F PARM AREA
PFLAG1   DS    XL1
P1ISPF   EQU   X'80'                 CALLED FROM TSO/ISPF
P1TEND   EQU   X'40'                 END OF IEAAPFXX TABLE
P1COMP   EQU   X'20'                 COMPARE SELECTED (OPTION 2)
P1DEBUG  EQU   X'10'                 DEBUG OPTION SPECIFIED
PFLAG2   DS    XL1
PFLAG3   DS    XL1
PFLAG4   DS    XL1
PARMLIST DS    14F
MSG1     DC    C'Display Resident Authorized Library List'
MSG2     DC    C'Peter Lee       '
MSG3     DC    C'Authorized library name'
MSG4     DC    C'VOLSER'
MSG5     DC    C'============================================'
MSG6     DC    CL20'STATUS'
SKIP     DC    F'2'
PARMLIB  DC    CL44' '
LIST     DS    0CL80
LINECM   DC    CL4' '
APFLIB   DC    CL44' '
         DC    CL4' '
APFVOL   DC    CL6' '
         DC    C' '
APFSTA   DC    CL20' '
         ORG   LIST+80
STAT1    DC    C'*NONEXISTENT*'
STAT2    DC    C'*NOT CATLGED*'
STAT3    DC    C'*DIFF. FROM CATLG*'
VDEFINE  DC    C'VDEFINE '
VGET     DC    C'VGET    '
TBCREATE DC    C'TBCREATE'
TBDISPL  DC    C'TBDISPL '
TBERASE  DC    C'TBERASE '
TBCLOSE  DC    C'TBCLOSE '
TBADD    DC    C'TBADD   '
TBTOP    DC    C'TBTOP   '
WRITE    DC    C'WRITE   '
NOWRITE  DC    C'NOWRITE '
PWLAPF30 DC    C'PWLAPF30'
IEAAPFXX DC    C'IEAAPF'
APFSUFX  DC    C'  '
IEASYSXX DC    C'IEASYS'
SYSPSUFX DC    C'  '
OPTION   DC    C' '
L44      DC    F'44'
L6       DC    F'6'
L4       DC    F'4'
L2       DC    F'2'
L1       DC    F'1'
L20      DC    F'20'
CHAR     DC    C'CHAR '
APFTAB   DC    C'APFTAB '
NLIST1   DC    F'4'
         DC    F'0'
LCMD     DC    CL8'LCMD'
APF1     DC    CL8'APF1'
APF2     DC    CL8'APF2'
APF3     DC    CL8'APF3'
NLIST2   DC    F'4'
         DC    F'0'
O1       DC    CL8'O1'
PARM     DC    CL8'PARM'
APF      DC    CL8'APF'
SYSP     DC    CL8'SYSP'
CAMLST1  CAMLST SEARCH,APFLIB,APFVOL,WORK1
CAMLST2  CAMLST NAME,APFLIB,,WORK1
T1LIB    DS    CL44                   LIB FROM IEAAPFXX
T1VOL    DS    CL6                    VOL FROM IEAAPFXX
         DS    0D
WORK1    DS    CL256
APFLIST  DCB   DDNAME=APFLIST,MACRF=PM,DSORG=PS
         CVT   DSECT=YES,LIST=NO
         IHAPSA
         IHAASCB
ADSECT   DSECT
ATOTAL   DS    XL2                    TOTAL NUMBER OF ENTRIES
ALEN     EQU   *-ATOTAL               LENGTH OF HEADER
A1DSECT  DSECT                        EACH APF A1LIB ENTRY
A1LEN    DS    XL1                    LENGTH OF THIS ENTRY
A1VOL    DS    CL6
A1LIB    DS    XL44                   DSNAME OF THIS A1LIB(MAX 44)
VDSECT   DSECT                        VOLUME LIST
VTOTAL   DS    XL2                    TOTAL NUMBER OF ENTRIES
VLEN     EQU   *-VTOTAL               LENGTH OF HEADER
V1DSECT  DSECT                        EACH APF A1LIB ENTRY
V1DEVC   DS    XL4                    DEVICE CODE
V1VOL    DS    XL6                    VOLSER
V1SEQ    DS    XL2                    DEVICE SEQUENCE NUMBER
TDSECT   DSECT
TNUMREC  DS    XL4
TRECL    DS    XL2
TRESV1   DS    XL2
TNEXTTB  DS    XL4
TRESV2   DS    XL4
TFIRST   EQU   *                      FIRST RECORD
         END   PWLAPF1

Source code for routine PWLRPDS2

PWLRPDS2 PWLINIT
* READ IN RECORDS OF A FIXED BLOCKED PDS MEMBER
* INPUT
*        R1  = ADDR OF PARMLIST
*             +0   FLAGS
*             +4   44 BYTE DSN
*             +48  8 BYTE MEMBER NAME
* OUTPUT:
*        R15 = 4   ERROR IN READING PDS
*              0   SUCCESSFUL COMPLETION
*        R1  = ADDR OF A TABLE
*            +0   NUMBER OF RECORDS READ IN TABLE
*            +4   RECORD LENGTH
*            +8   ADDR OF NEXT TABLE
*            +12  ADDR OF PREV TABLE
*            +16  FIRST RECORD
* CALL PWLDYNA1 TO ALLOCATE REQUESTED DSN
         LR    R8,R1                    SAVE R1
         MVC   PFLAGS(4),0(R8)          SAVE PFLAGS
         LA    R1,4(,R1)                SKIP TO DSN
         CALL  PWLDYNA1
         LTR   R15,R15
         BNZ   ERREXIT4
         MVC   PDS+40(8),0(R1)          MOVE IN ALLOCATED DDNAME
         OPEN  (PDS,INPUT)
         TM    PFLAG1,P1DEBUG
         BNO   RPDS0002
         OPEN  (PARMLIST,OUTPUT)
RPDS0002 DS    0H
         TM    PDS+X'24',X'40'          RECFM=U OR V?
         BNO   RPDS0010                 NO. GO PROCESS FIXED.
         B     ERREXIT1                 ERROR EXIT
RPDS0010 DS    0H
         LH    R0,PDS+DCBBLKSI-IHADCB   BLOCKSIZE FROM DCB
         ST    R0,PDSBLKSI
         LA    R1,TAB#ENT
         MH    R1,TABENTL
         AH    R1,=H'16'                16-BYTE PREFIX
         ST    R1,TABSIZE
         A     R0,TABSIZE               ADD TABLE SIZE
         ST    R0,WORKSIZE
         GETMAIN RC,LV=(0),SP=3         GET BUFFER
         LTR   R15,R15
         BNZ   ERREXIT2
         ST    R1,PDSBUF
         LR    R11,R1
         A     R11,PDSBLKSI
         USING TDSECT,R11               POINT TO OUTPUT TABLE
RPDS0020 DS    0H                       SAME DDNAME
         MVC   MEMNAME,48(R8)           MOVE IN MEMBER NAME
         LA    R10,TFIRST               POINT TO FIRST ENTRY IN TAB
         XC    TNUMREC,TNUMREC
         FIND  PDS,MEMNAME,D            SEARCH DIRECTORY FOR MEMBER
         LTR   R15,R15
         BNZ   ERREXIT3
         MVC   TRECL,PDS+DCBLRECL-IHADCB  LRECL FROM DCB
RPDS0030 DS    0H
         L     R3,PDSBUF
         READ  PDSECB,SF,PDS,(R3),'S'
         CHECK PDSECB
         LH    R4,PDS+DCBBLKSI-IHADCB   BLKSIZE (BYTES REQUESTED)
         L     R1,PDSECB+16             GET IOB ADDR
         SH    R4,14(,R1)               SUBTRACT RESIDUAL COUNT IN IOB
*                                       TO GET ACTUAL BLOCK LENGTH
RPDS0040 DS    0H
         LH    R1,TRECL
         EX    R1,MOVE1                 STORE IN TABLE
         BAL   R6,PUT
         AH    R3,TRECL                 STEP TO NEXT RECORD
         AH    R10,TRECL                STEP TO NEXT TABLE ENTRY
         L     R1,TNUMREC
         LA    R1,1(,R1)
         ST    R1,TNUMREC
         LA    R1,TAB#ENT
         C     R1,TNUMREC               MAXIMUM NUM OF ENTRIES?
         BL    ERREXIT5
         SH    R4,TRECL
         BNZ   RPDS0040                 DEBLOCK NEXT RECORD
         B     RPDS0030                 GET NEXT BLOCK
MOVE1    MVC   0(0,R10),0(R3)           STORE IN TABLE
ERREXIT1 DS    0H
         WTO   'PWLRPDS2A - INPUT DATASET NOT FIXED',ROUTCDE=11
         MVI   RC,X'04'
         B     EXIT
ERREXIT2 DS    0H
         WTO   'PWLRPDS2B - GETMAIN FOR BUFFER FAILED',ROUTCDE=11
         MVI   RC,X'04'
         B     EXIT
ERREXIT3 DS    0H
         WTO   'PWLRPDS2C - MEMBER DOES NOT EXIST',ROUTCDE=11
         MVI   RC,X'04'
         B     EXIT
ERREXIT4 DS    0H
         WTO   'PWLRPDS2D - ERROR RETURN FROM PWLDYNA1',ROUTCDE=11
         MVI   RC,X'04'
         B     EXIT
ERREXIT5 DS    0H
         WTO   'PWLRPDS2E - MAXIMUM TABLE SIZE EXCEEDED',ROUTCDE=11
         MVI   RC,X'04'
         B     EXIT
EXIT1    DS    0H
         LR    R10,R11
         BAL   R6,PUT              DEBUG - WRITE OUT TABLE PREFIX
EXIT2    DS    0H
         CLOSE PDS
         TM    PFLAG1,P1DEBUG
         BNO   EXIT3
         CLOSE PARMLIST
EXIT3    DS    0H
         LR    R1,R11              RETURN TABLE ADDR
         B     EXIT
PUT      DS    0H
         TM    PFLAG1,P1DEBUG
         BNOR  R6
         PUT   PARMLIST,0(R10)
         BR    R6
PARMLIST DCB   DDNAME=PARMLIST,MACRF=PM,DSORG=PS
PDS      DCB   DDNAME=PDS,MACRF=(R),DSORG=PO,EODAD=EXIT1
BLANKS   DC    CL8' '
MEMNAME  DS    CL8
PDSBUF   DS    F
PDSBLKSI DS    F
WORKSIZE DS    F
TABSIZE  DS    F                     TAB#ENT*TABENTL+16
TAB#ENT  EQU   255                   NUMBER OF TABLE ENTRIES
TABENTL  DC    H'80'                 LENGTH OF TABLE ENTRY
PFLAGS   DS    0F
PFLAG1   DS    XL1
P1ISPF   EQU   X'80'                 CALLED FROM TSO/ISPF
P1TEND   EQU   X'40'                 END OF IEAAPFXX TABLE
P1COMP   EQU   X'20'                 COMPARE SELECTED (OPTION 2)
P1DEBUG  EQU   X'10'                 DEBUG OPTION SPECIFIED
PFLAG2   DS    XL1
PFLAG3   DS    XL1
PFLAG4   DS    XL1
         LTORG
         DCBD  DSORG=(PO),DEVD=DA
TDSECT   DSECT                   OUTPUT TABLE
TNUMREC  DS    XL4
TRECL    DS    XL2
TRESV1   DS    XL2
TNEXTTB  DS    XL4
TPREVTB  DS    XL4
TFIRST   EQU   *                 FIRST RECORD
         END   PWLRPDS2

Source code for routine PWLDYNA1

PWLDYNA1 PWLINIT
* ALLOCATE EXISTING DATASET DYNAMICALLY USING SPECIFIED DATASET NAME
* ENTRY:
*        R1 = ADDR OF PARMLIST
*             +0 44-BYTE DATASET NAME
* EXIT:
*        R1 = ADDR OF 8-BYTE DDNAME OF ALLOCATED DATASET
         MVC   ALLOCDSN,0(R1)
         MVC   RETDSN,0(R1)
         MVC   ALLOCDSL(2),=X'002C'
         LA    R1,RBSPACE
         LR    R8,R1
         USING S99RBP,R8             R8 = RB PTR
         USING S99RB,R4              R4 = RB
         USING S99TUPL,R5            R5 = RB TU POINTER LIST
         LA    R4,S99RBPTR+4
         ST    R4,S99RBPTR           STORE RB ADDR INTO RBPTR
         OI    S99RBPTR,S99RBPND     TURN ON HIGH ORDER BIT
         XC    S99RB(RBLEN),S99RB    CLEAR OUT RB
         MVI   S99RBLN,RBLEN         SET RB LENGTH
*** ALLOCATE DATASET
         MVI   S99VERB,S99VRBAL      SET VERB=DSNAME ALLOCATION
         LA    R5,S99RB+RBLEN        START TU POINTERS
         ST    R5,S99TXTPP           SAVE IN RB
         LA    R6,ALLOCDS
         ST    R6,S99TUPTR           1. DSNAME
         LA    R6,ALLOCSTA
         LA    R5,S99TUPL+4
         ST    R6,S99TUPTR           2. STATUS
         OI    S99TUPTR,S99TUPLN     INDICATE END OF TEXT PTRS
         LR    R1,R8
         DYNALLOC
         LTR   R15,R15
         BNZ   ERREXIT1
*** RETRIEVE DDNAME
         XC    RBSPACE,RBSPACE
         LA    R4,S99RBPTR+4
         ST    R4,S99RBPTR           STORE RB ADDR INTO RBPTR
         OI    S99RBPTR,S99RBPND     TURN ON HIGH ORDER BIT
         MVI   S99RBLN,RBLEN         SET RB LENGTH
         MVI   S99VERB,S99VRBIN      SET VERB=INFO RETRIEVAL
         LA    R5,S99RB+RBLEN        START TU POINTERS
         ST    R5,S99TXTPP
         LA    R6,RETDS
         ST    R6,S99TUPTR           1. DSNAME
         LA    R6,STATUSTU           RETURN STATUS
         LA    R5,S99TUPL+4
         ST    R6,S99TUPTR           2. STATUS
         LA    R6,ORGTU              RETURN DSORG
         LA    R5,S99TUPL+4
         ST    R6,S99TUPTR           3. ORG
         LA    R6,RETDDN             RETURN DDNAME
         LA    R5,S99TUPL+4
         ST    R6,S99TUPTR           4. DDN
         LA    R6,TYPETU             RETURN DATASET TYPE
         LA    R5,S99TUPL+4
         ST    R6,S99TUPTR           5. TYPE
         OI    S99TUPTR,S99TUPLN     INDICATE END OF TEXT PTRS
         LR    R1,R8
         DYNALLOC
         LTR   R15,R15
         BNZ   ERREXIT2
         CLC   DSORG,=X'0200'      PO?
         BE    DYNA0100
         CLC   DSORG,=X'0300'      POU?
         BE    DYNA0100
         OI    PFLAG1,P1NPDS       NOT A PDS
DYNA0100 DS    0H
         CLI   STATUS,X'04'        NEW DATASET?
         BNE   DYNA0200
         OI    PFLAG1,P1NEW
DYNA0200 DS    0H
         B     EXIT2
ERREXIT1 DS    0H
         MVI   RC,X'04'
         WTO   'PWLDYNA1A - ERROR ON ALLOCATE',ROUTCDE=11
         B     EXIT
ERREXIT2 DS    0H
         MVI   RC,X'04'
         WTO   'PWLDYNA1B - ERROR ON RETRIEVE',ROUTCDE=11
         B     EXIT
EXIT2    DS    0H
         MVI   RC,X'00'
         LA    R1,RETDDNAM            RETURN DDNAME TO CALLER
         B     EXIT
PFLAG1   DS    XL1
P1NEW    EQU   X'80'
P1NPDS   EQU   X'40'
RBSPACE  DS    CL52   RBPTR(4)+RB(20)+7 TEXT PTRS(28)
RETDS    DC    AL2(DINDSNAM)               KEY
         DC    X'0001'                     #
RETDSL   DC    X'002C'                     LEN
RETDSN   DC    CL44'SYS1.PARMLIB'          DSNAME
RETDDN   DC    AL2(DINRTDDN)          RETURN DDNAME
         DC    X'0001'
         DC    X'0008'
RETDDNAM DC    CL8'DDABC123'
STATUSTU DC    AL2(DINRTSTA)
         DC    X'0001'
         DC    X'0001'
STATUS   DC    X'00'
ORGTU    DC    AL2(DINRTORG)
         DC    X'0001'
         DC    X'0002'
DSORG    DC    X'0000'
TYPETU   DC    AL2(DINRTTYP)
         DC    X'0001'
TYPELEN  DC    X'0001'
TYPE     DC    X'00'
* DSNAME ALLOCATION TEXT UNITS
ALLOCDS  DC    AL2(DALDSNAM)               KEY
         DC    X'0001'                     #
ALLOCDSL DC    X'002C'                     LEN
ALLOCDSN DC    CL44'SYS1.PARMLIB'          DSNAME
ALLOCSTA DC    AL2(DALSTATS)               KEY
         DC    X'0001'                     #
         DC    X'0001'                     LEN
         DC    AL1(SHR)                    STATUS
OLD      EQU   X'01'
MOD      EQU   X'02'
NEW      EQU   X'04'
SHR      EQU   X'08'
         IEFZB4D0
         IEFZB4D2
RBLEN    EQU  (S99RBEND-S99RB)
         END   PWLDYNA1

Source code for macro PWLINIT

         MACRO
&L       PWLINIT
.* INIT MACRO FOR NON-RENT CODE
&L       CSECT ,
INIT_A&SYSNDX DS 0H
R0       EQU   0
R1       EQU   1
R2       EQU   2
      etc
R15      EQU   15
         USING *,R15                    TEMPORARY
         B     INIT_B&SYSNDX
         DC    AL4(INIT_B&SYSNDX-INIT_A&SYSNDX-8)
         DC    CL23'&L   &SYSDATE &SYSTIME'
INIT_B&SYSNDX DS 0H
         STM   R14,R12,12(R13)
         LR    R1,R13                   WORK REGISTER
         CNOP  0,4
         BAL   R13,*+4+72               SET UP R13
         DC    18F'0'                   SAVE AREA
         LA    R13,0(,R13)              IN CASE 31-BIT
         ST    R1,4(,R13)               SAVE LAST IN THIS
         ST    R13,8(,R1)               SAVE THIS IN LAST
         USING *-84,R13
         B     INIT_C&SYSNDX
         DROP  R15
EXIT     DS    0H
         LA    R15,0                    STORE RETURN CODE
RC       EQU   *-1,1                    RETURN CODE
         L     R14,4(,R13)              PREV SAVE AREA
         STM   R0,R1,20(R14)            SAVE R0,R1 IN PREV SAVE AREA
         L     R13,4(,R13)              RESTORE REG 13
         L     R14,12(R13)              RESTORE R14
         LM    R0,R12,20(R13)
         BR    R14
INITMODE DC    H'0'
INIT_C&SYSNDX MVI RC,0                  ENSURE RETURN CODE = 0
         L     R1,4(,R13)
         LM    R14,R2,12(R1)            RESTORE LINKAGE REGS
         AGO   .MEND
.MEND    ANOP
         MEND

Source code for macro $#FIND

         MACRO
&LBL     $#FIND   &REC=,&CHAR=,&RECLEN=72
.*
.*       PWL  .....................................
.*
         AIF   ('&REC' EQ '').ERR1
         AIF   ('&REC'(1,1) EQ '(').ISREG1
         LA    R1,&REC
         AGO   .XM02
.ISREG1  ANOP
         LA    R1,0&REC
.XM02    ANOP
         AIF   ('&CHAR' EQ '').ERR2
&T1      SETA  N'&CHAR
         AIF   (&T1 EQ 1).CHAROK,                                      X
               (&T1 EQ 2).CHAROK
         MNOTE 12,'$#FIND ONLY SUPPORTS 1 OR 2 CHAR STRINGS'
         MEXIT ,
.CHAROK  ANOP  ,
         B     FN01&SYSNDX
C1&SYSNDX DC   C&CHAR(1)
         AIF   (&T1 EQ 1).NOCHAR2
C2&SYSNDX DC   C&CHAR(2)
.NOCHAR2 ANOP  ,
&L11     SETA  K'&CHAR(1)
&L11     SETA  &L11-2
&L1      SETC  '&L11'
         MNOTE ' &L11  &L1  '
         AIF   (&T1 EQ 1).NOL22A
&L22     SETA  K'&CHAR(2)
&L22     SETA  &L22-2
&L2      SETC  '&L22'
         MNOTE ' &L22  &L2  '
.NOL22A  ANOP  ,
FN01&SYSNDX DS 0H
         LA    R15,&RECLEN-&L11            COUNTER
FN02&SYSNDX DS 0H
         CLC   C1&SYSNDX,0(R1)
         BE    FN03&SYSNDX
         AIF   (&T1 EQ 1).NOCHAR2B
         CLC   C2&SYSNDX,0(R1)
         BE    FN04&SYSNDX
.NOCHAR2B ANOP ,
         LA    R1,1(,R1)
         BCT   R15,FN02&SYSNDX
         SLR   R1,R1
         B     FN99&SYSNDX
FN03&SYSNDX DS 0H
         LA    R1,&L1.(,R1)
         B     FN99&SYSNDX
         AIF   (&T1 EQ 1).NOCHAR2C
FN04&SYSNDX DS 0H
         LA    R1,&L2.(,R1)
         B     FN99&SYSNDX
.NOCHAR2C ANOP ,
FN99&SYSNDX DS 0H
.ERR1    ANOP
.ERR2    ANOP
.MEND    MEND

Source code for macro $#MOVE

         MACRO
&LBL     $#MOVE   &TO=,&FROM=,&STOP=,&SKIP=,&MAX=
.*
.*       PWL  .....................................
.*
         AIF   ('&TO' EQ '').ERR1
         AIF   ('&TO'(1,1) EQ '(').ISREG1
         LA    R1,&TO
         AGO   .XM02
.ISREG1  ANOP
         LA    R1,0&TO
.XM02    ANOP
         AIF   ('&FROM' EQ '').ERR1
         AIF   ('&FROM'(1,1) EQ '(').ISREG2
         LA    R14,&FROM
         AGO   .XM04
.ISREG2  ANOP
         LA    R14,0&FROM
.XM04    ANOP
         AIF   ('&STOP' EQ '').ERR2
         AIF   ('&MAX' EQ '').XM05
         AIF   ('&MAX'(1,1) EQ '(').ISREG3
         LA    R0,&MAX
         AGO   .XM06
.ISREG3  ANOP
         LA    R0,0&MAX
         AGO   .XM06
.XM05    ANOP
         LA    R0,80               TEMP SET MAX TO 80 BYTES
.XM06    ANOP
         B     FN01&SYSNDX
C1&SYSNDX DC   C&STOP(1)
C2&SYSNDX DC   C&STOP(2)
FN01&SYSNDX DS 0H
         CLI   C1&SYSNDX,C' '
         BE    FN03&SYSNDX
         CLI   C2&SYSNDX,C' '
         BE    FN03&SYSNDX
         CLI   0(R14),C' '                SKIP LEADING BLANKS
         BNE   FN03&SYSNDX
FN02&SYSNDX DS 0H
         LA    R14,1(R14)
         BCT   R0,FN01&SYSNDX
         B     FN99&SYSNDX
FN03&SYSNDX DS 0H
         AIF   ('&SKIP' EQ '').FN05
         CLI   0(R14),C&SKIP(1)
         BE    FN02&SYSNDX
.FN05    ANOP
         CLI   0(R14),C&STOP(1)
         BE    FN99&SYSNDX
         CLI   0(R14),C&STOP(2)
         BE    FN99&SYSNDX
         CLI   0(R14),C' '                BLANK IS DEFAULT STOP
         BE    FN99&SYSNDX
         MVC   0(1,R1),0(R14)
         LA    R1,1(R1)
         LA    R14,1(R14)
         BCT   R0,FN03&SYSNDX
FN99&SYSNDX DS 0H
.ERR1    ANOP
.ERR2    ANOP
.MEND    MEND

Sample JCL to assemble and link modules

//DYNA1  EXEC  PWLASM1,LPARM='AMODE=24',PROG=PWLDYNA1,COND.LKED=(0,LE)
//ASM.SYSPUNCH DD DSN=&&OBJ(PWLDYNA1),SPACE=(3200,(300,50,5))
//RPDS2  EXEC  PWLASM1,LPARM='AMODE=24',PROG=PWLRPDS2,COND.LKED=(0,LE)
//ASM.SYSPUNCH DD DSN=&&OBJ(PWLRPDS2)
//APF1   EXEC  PWLASM1,LPARM='AMODE=24',PROG=PWLAPF1
//ASM.SYSPUNCH DD DSN=&&OBJ(PWLAPF1)
//LKED.SYSLIN  DD *
   INCLUDE LIB1(ISPLINK)
   INCLUDE OBJ(PWLDYNA1)
   INCLUDE OBJ(PWLRPDS2)
   INCLUDE OBJ(PWLAPF1)
   ENTRY PWLAPF1
   NAME PWLAPF1(R)
//LKED.LIB1 DD DISP=SHR,DSN=your.ISPF.LINKLIB (to include ISPLINK)
//LKED.OBJ DD DSN=&&OBJ,DISP=SHR

Source code for clist PWLAPF1

PROC 0
CONTROL NOMSG
FREE F(APFLIST,PARMLIST)
ALLOC F(APFLIST) DA(*)
ALLOC F(PARMLIST) DUMMY
ISPEXEC DISPLAY PANEL(PWLAPF10)
IF &O1 = 2 THEN -
    ISPEXEC DISPLAY PANEL(PWLAPF20)
ISPEXEC VPUT (O1,PARM,SYSP,APF)
CALL 'your.loadlib(PWLAPF1)'
FREE F(APFLIST,PARMLIST)
EXIT

Source code for panel PWLAPF10

)ATTR DEFAULT(%+_)
  /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
  /*  + TYPE(TEXT) INTENS(LOW)       information only            */
  /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
  / TYPE(OUTPUT) INTENS(LOW) PAD(' ') JUST(LEFT)
  # TYPE(OUTPUT) INTENS(HIGH) PAD(' ') JUST(LEFT)
  ! TYPE(INPUT) INTENS(LOW) PAD('.') CAPS(ON) JUST(LEFT)
  @ TYPE(INPUT) INTENS(LOW) PAD(' ') CAPS(ON) JUST(LEFT)
)BODY
+
+
+
+    Display Resident APF Library List
+
+       %Enter you selection: _O1
+
+           1 - Display resident APF list only
+
+           2 - Display and compare with PARMLIB
+
+
+
)INIT
 &O1 = 1
)REINIT
 &O1 = 1
)PROC
 VER (&O1,RANGE,1,2)
)END

Source code for panel PWLAPF20

)ATTR DEFAULT(%+_)
 /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
 /*  + TYPE(TEXT) INTENS(LOW)       information only            */
 /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
  / TYPE(OUTPUT) INTENS(LOW) PAD(' ') JUST(LEFT)
  # TYPE(OUTPUT) INTENS(HIGH) PAD(' ') JUST(LEFT)
  ! TYPE(INPUT) INTENS(LOW) PAD('.') CAPS(ON) JUST(LEFT)
  @ TYPE(INPUT) INTENS(LOW) PAD(' ') CAPS(ON) JUST(LEFT)
)BODY
+    Display Resident APF Library List
+
%    Specify PARMLIB dataset name: %_PARM
+
+    Compare with APF list in PARMLIB
+
%        Specify either one of the following:
+
+           Suffix for IPL system parameter (SYSP=xx): %_SYSP
+
+           Suffix for APF system parameter (APF=xx):  %_APF
+
+
+
+        ( APF suffix will override SYSP suffix if specified )
+
+
+
+
)INIT
 &PARM = SYS1.PARMLIB
)REINIT
 &PARM = SYS1.PARMLIB
)PROC
 VER (&PARM,DSNAME)
 IF (&SYSP = ' ')
    VER (&APF,NONBLANK,LEN,EQ,2)
 ELSE VER (&SYSP,LEN,EQ,2)
 IF (&APF = ' ')
    VER (&SYSP,NONBLANK,LEN,EQ,2)
 ELSE VER (&APF,LEN,EQ,2)
)END

Source code for panel PWLAPF30

)ATTR DEFAULT(%+_)
 /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
 /*  + TYPE(TEXT) INTENS(LOW)       information only            */
 /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
  / TYPE(OUTPUT) INTENS(LOW) PAD(' ') JUST(LEFT)
  # TYPE(OUTPUT) INTENS(HIGH) PAD(' ') JUST(LEFT)
  ! TYPE(INPUT) INTENS(LOW) PAD('.') CAPS(ON) JUST(LEFT)
  @ TYPE(INPUT) INTENS(LOW) PAD(' ') CAPS(ON) JUST(LEFT)
)BODY
%
%COMMAND ===>_ZCMD                                            +SCROLL ===>_AMT +
%    Display Resident APF Library List    &ZDATE  &ZTIME
%     Option selected = &O1
%     PARMLIB specified for compare = &PARM
%     SYSP suffix  = &SYSP      APF suffix = &APF
%     APF library name                              VOLSER Status
%     ============================================  ====== ====================
)MODEL
@LCMD/APF1                                         /APF2  #APF3
)INIT
)END

BATCH EXECUTION

The program PWLAPF1 can also be executed in batch using the
provided sample JCL. For example, a job can be submitted to run
PWLAPF1 in a remote MVS system or an MVS machine under
VM where there is no TSO/ISPF facility.

A number of different execution parameters can be passed to
PWLAPF1 as follows:

o      O=n or OPTION=n - n=1  for display only, n=2  for display
      and compare with IEAAPFxx. The default is 1 if not specified.

o      P=dsn or PARMLIB=dsn, dsn = alternative dataset name for
      SYS1.PARMLIB. The default is SYS1.PARMLIB if not
      specified.

o      S=xx or SYSP=xx, xx = suffix for IEASYSxx (used for the
      current IPL). The default is 00 if not specified.

o      A=xx or APF=xx, xx = suffix for IEAAPFxx (used for the
      current IPL). The default is the APF suffix found in
      IEASYS00 or IEASYSxx if not specified.

o      D=y or DEBUG=YES. This will cause PWLRPDS2 to write
      the contents of IEASYSxx and/or IEAAPFxx (read from the
      specified PARMLIB or SYS1.PARMLIB) to PARMLIST for
      debugging purposes.

Sample JCL to execute PWLAPF1 in batch

//* THE FOLLOWING WILL REQUEST A LIST OF RESIDENT APF LIST
//STA  EXEC  PGM=PWLAPF1
//* THE FOLLOWING WILL REQUEST A LIST OF RESIDENT APF LIST AND COMPARE
//*   IT WITH IEAAPFxx USING THE APF SUFFIX FOUND IN IEASYS00.
//*TA  EXEC  PGM=PWLAPF1,PARM='O=2'
//* THE FOLLOWING WILL REQUEST A LIST OF RESIDENT APF LIST AND COMPARE
//*   IT WITH IEAAPFXX USING THE APF SUFFIX FOUND IN IEASYST1.
//*TA  EXEC  PGM=PWLAPF1,PARM='O=2,S=T1'
//* THE FOLLOWING WILL REQUEST A LIST OF RESIDENT APF LIST AND COMPARE
//*   IT WITH IEAAPFT2.
//*TA  EXEC  PGM=PWLAPF1,PARM='A=T2,S=T1,O=2'
//* THE FOLLOWING WILL REQUEST A LIST OF RESIDENT APF LIST AND COMPARE
//*   IT WITH IEAAPF01 READ FROM ALTERNAT.SYS1.PARMLIB.
//*TA  EXEC  PGM=PWLAPF1,PARM=('P=ALTERNAT.SYS1.PARMLIB ','A=01','O=2')
//STEPLIB DD DSN=your.loadlib,DISP=SHR
//* IEASYSXX AND/OR IEAAPFXX FROM SPECIFIED PARMLIB WILL BE WRITTEN TO
//*   PARMLIST IF DEBUG=YES IS SPECIFIED.
//PARMLIST DD SYSOUT=*,DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)
//* RESIDENT APF LIST IS WRITTEN TO APFLIST
//APFLIST  DD SYSOUT=*,DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)

With a slight programming change, it is also possible to run
PWLAPF1 as a started task to compare the resident APF list
against the IEAAPFxx parmlib member at regular intervals to
continuously monitor dynamic changes made to the resident APF
list.

Peter W K Lee
Software Analyst (Canada)

