Writing SCLM parsers in COBOL II

INTRODUCTION

As installations' use of SCLM increases, most reach a point when
they wish to include a source type in SCLM for which there is no
supplied parser. The SCLM manual does give instructions for
writing parsers and gives examples, but the supplied code is
Assembler and PL/I.

At first it would appear difficult to write a parser in COBOL as
SCLM reserves blocks of storage into which the accounting
information is to be written, and passes their addresses to the
parser. Thanks to the 'SET ADDRESS' command, using passed
addresses in COBOL is now possible.

The most important function of an SCLM parser is to tell SCLM
of all include/copy code in the source, as it is these entries in the
accounting information that trigger SCLM to track the included
members. The following example is a simple parser written to
process ISPF skeletons and, while it does gather statistics such as
the number of lines of code, its primary function is to find and
record )IM (imbed) commands.

DEFINING THE PARSER TO SCLM

Below is the SCLM project definition for the COBOL parser. The
project definition entry is shown before the source code as there
are several tie-ins between the two which need to be observed.

         FLMLANGL    LANG=PROCSKEL,VERSION=V1.0,BUFSIZE=20
* PARSER FOR ISPF SKEL
          FLMTRNSL   CALLNAM='ISPF SKEL PARSER',                       C
               FUNCTN=PARSE,                                           C
               COMPILE=SKELPARS,                                       C
               DSNAME=SYS3.MLGEN.LOADLIB,                              C
               PORDER=1,                                               C
               OPTIONS=(@@FLMSTP,@@FLMLIS,@@FLMSIZ)
*          (* SOURCE      *)
           FLMALLOC  IOTYPE=A,DDNAME=SORSLIB
           FLMCPYLB @@FLMPRJ.@@FLMGRP.@@FLMTYP(@@FLMMBR)
*

The first parameter to notice is BUFSIZE=20 on the FLMLANG
macro. This defines the size of the list area that SCLM reserves for
INCLUDE entries, the address of which is passed to the parser.
This value should be set to the maximum number of )IM
commands expected in any single ISPF skeleton, although the
code is able to cope with the situation of too many )IM
commands.

The OPTIONS=() parameter of the FLMTRNSL macro defines
the parameters to be passed to the parser. @@xxx signifies a
variable which SCLM substitutes at execution time. Three are
shown:

o      @@FLMSTP contains the address of a fixed size block of
      storage reserved by SCLM into which the parser should write
      source code statistics, such as number of lines of code.

o      @@FLMLIS contains the address of a variable size block of
      storage, the size of which is governed by the BUFSIZE
      parameter, into which the parser is to record all INCLUDE
      code member names.

o      @@FLMSIZ contains the size of the block of storage
      pointed to by the @@FLMLIS variable.

The FLMALLOC macro tells SCLM to allocate the source
member to be analysed, ready for the parser.

THE PARSER

The source code

       *****************************************************************
        Identification Division.
       *****************************************************************
        Program-id.      SKELPARS.
       *************************************************************
       * This program is the SCLM parser for ISPF SKELS            *
       *************************************************************
        Environment Division.
       *****************************************************************
        Configuration Section.
       *****************************************************************
        Source-computer.    IBM-3090.
        Object-computer.    IBM-3090.
        Input-output section.
        File-control.
            Select optional source-file
                assign to sorslib.
        Data division.
        File section.
       *************************************************************
       * Source file for SOURCE calls                              *
       *************************************************************
        FD  Source-file
            label records are standard
            recording mode is f
            block contains 0 records.
        01  source-rec.
            03  sr-byte                   pic x occurs 80 times.
       *************************************************************
        Working-storage section.
       *************************************************************
        01  ws-source-rec.
            03  ws-skel-command           pic x(3).
            03  filler                    pic x(77).
        77  WS-NUM1    PIC S9(9).
        77  WS-NUM2    PIC S9(9).
        77  WS-NUM1-C  PIC S9(9) COMP.
        77  WS-NUM2-C  PIC S9(9) COMP.
        77  WS-number-of-list-items       pic 9(5).
        01  WS-STATS-ADDR.
            03  WS-STATS-ADDRESS POINTER.
        01  WS-LIST-ADDR.
            03  WS-LIST-ADDRESS POINTER.
        01  WS-input-LIST-SIZE-X.
            03  WS-input-LIST-SIZE PIC 9999.
        77  ws-list-size          Pic 9(6).
        01  ws-counter            pic 9(2) comp.
        01  ws-copy-counter       pic 9(2) comp.
        01  ws-list-counter       pic 9(2) comp value zero.
        01  ws-start-of-copy-name pic 9(2) comp.
        01  ws-copy-name.
            03  ws-copy-name-byte pic x occurs 8.
        01  ws-flags.
            03  ws-error-flag      pic x  value '0'.
                88  there-was-an-error    value '1'.
       *#################
        LINKAGE SECTION.
       *#################
        01  Lk-list-area.
            03  Lk-list-record occurs 20 times.
                05  lk-list-type          pic x(4).
                05  lk-list-entry         pic x(224).
       *************************************************************
       * The following area is passed from SCLM.                   *
       *************************************************************
        01  ws-data-area.
            03  filler                    pic xx.
            03  ws-parsed-info            pic x(100).
       *************************************************************
       * The following area is used to pass stats back to SCLM     *
       *************************************************************
        01  Lk-stats-info.
            03  Lk-stats-total-lines      pic s9(9) comp.
            03  Lk-stats-comment-lines    pic s9(9) comp.
            03  Lk-stats-non-comm-lines   pic s9(9) comp.
            03  Lk-stats-blank-lines      pic s9(9) comp.
            03  Lk-stats-prolog-lines     pic s9(9) comp.
            03  Lk-stats-total-stmts      pic s9(9) comp.
            03  Lk-stats-comment-stmts    pic s9(9) comp.
            03  Lk-stats-control-stmts    pic s9(9) comp.
            03  Lk-stats-assignment-stmts pic s9(9) comp.
            03  Lk-stats-non-comm-stmts   pic s9(9) comp.
       ******************************************************************
        Procedure division using ws-data-area.
       ******************************************************************
        A-main-control section.
            Perform B-establish-addressability.
            Perform C-analize-source.
            If there-was-an-error
                Move 8 to return-code
              else
                Perform D-Final-Analysis
            end-if.
        A-stop-run.
            stop run.
        A-exit.
            Exit.
        B-establish-addressability section.
       *************************************************************
       * This section is called to address the areas passed from   *
       * and back to SCLM.                                         *
       *************************************************************
       *************************************************************
       * DisSect the data area passed from SCLM                    *
       *************************************************************
            Unstring ws-parsed-info delimited by ','
                into ws-num1
                     ws-num2
                     ws-input-list-size-x.
       *************************************************************
       * Calculate the number of entries allowed in the list table *
       * Each table entry is 228 bytes long.                       *
       *************************************************************
            Compute ws-list-size = ws-input-list-size / 228.
       *************************************************************
       * Convert the display format addresses to COMP.             *
       *************************************************************
            Move ws-num1 to ws-num1-c.
            Move ws-num2 to ws-num2-c.
       *************************************************************
       * Move the addresses to pointer fields.                     *
       *************************************************************
            Move ws-num1-c to ws-stats-addr.
            Move ws-num2-c to ws-list-addr.
       *************************************************************
       * Establish addressability of the list and stats areas      *
       *************************************************************
            Set address of lk-list-area  to ws-list-address.
            Set address of lk-stats-info to ws-stats-address.
            move low-values to lk-list-area.
            divide ws-input-list-size  by 228 giving
               ws-number-of-list-items.
        B-exit.
            exit.
        C-analize-source section.
       *************************************************************
       * This section reads through each line of the source code   *
       * and gathers stats and copy code for sclm                  *
       *************************************************************
            Open input source-file.
            Perform E-process-source-records.
            Close source-file.
        C-exit.
            exit.
        D-Final-Analysis section.
       **************************************************************
       * This section does the calculations for any remaininG stats *
       **************************************************************
            Add +1 to ws-list-counter.
            Move 'END'  to lk-list-type (ws-list-counter).
            Move spaces to lk-list-entry (ws-list-counter).
            Compute lk-stats-non-comm-lines = lk-stats-total-lines
                  - lk-stats-comment-lines
            Move lk-stats-non-comm-lines to lk-stats-total-stmts.
            Move zero to lk-stats-prolog-lines
                         lk-stats-comment-stmts
                         lk-stats-blank-lines
                         lk-stats-control-stmts
                         lk-stats-assignment-stmts
                         lk-stats-non-comm-stmts.
        D-exit.
            exit.
        E-process-source-records section.
       *************************************************************
       * This section reads through the source file and gathers    *
       *  stats                                                    *
       ****************************************************************
       * Read a record from the source file                           *
       ****************************************************************
            Read source-file
                at end go to e-exit.
       ****************************************************************
       * Increment the counter FOR the number of source lines         *
       ****************************************************************
            Add +1 to lk-stats-total-lines.
       ****************************************************************
       * Move the read record to working storage                      *
       ****************************************************************
            Move source-rec to ws-source-rec.
       ****************************************************************
       * Check to see if the line is a comment                        *
       * If it is increment the comment counter                       *
       ****************************************************************
            If ws-skel-command = ')CM'
                Add +1 to lk-stats-comment-lines
                go to e-process-source-records
            End-if.
       *************************************************************
       * Check for a )IM  statement                                *
       *************************************************************
            If ws-skel-command not = ')IM'
                Go to e-process-source-records
            End-if.
       ****************************************************************
       * Search the source record for the start of the imbed name     *
       ****************************************************************
            Move +4 to ws-counter.
            Perform until sr-byte (ws-counter) not = space
                add +1 to ws-counter
            End-perform.
       ****************************************************************
       *  continue along the input source line looking for the end    *
       *    of the imbed name                                         *
       ****************************************************************
            Move ws-counter to ws-start-of-copy-name.
            Perform until sr-byte (ws-counter) = space
                add +1 to ws-counter
            End-perform.
       ****************************************************************
       * Reset some work fields                                       *
       ****************************************************************
            Move spaces to ws-copy-name.
            Move zero to ws-copy-counter.
       ****************************************************************
       * Move the imbed name character by character into the copy-name*
       *   field                                                      *
       ****************************************************************
            Perform until ws-start-of-copy-name = ws-counter
                Add +1 to ws-copy-counter
                Move sr-byte (ws-start-of-copy-name) to
                      ws-copy-name-byte (ws-copy-counter)
                Add +1 to ws-start-of-copy-name
            End-perform.
       ****************************************************************
       * Up the list counter and then check we've not exceeded the    *
       *    supplied table size                                       *
       ****************************************************************
            Add +1 to ws-list-counter.
            If ws-list-counter > ws-number-of-list-items
                Display 'SKELPARS:List table size exceeded - Increase BUF
       -        'SIZE parameter in FLMLANGL macro.' upon console
                move '1' to ws-error-flag
                go to e-exit
            End-if.
       ****************************************************************
       * Add an extry to the include table                            *
       ****************************************************************
            Move 'INCL' to lk-list-type (ws-list-counter).
            Move ws-copy-name to lk-list-entry (ws-list-counter).
       ****************************************************************
       *  Go back and read the next record.                           *
       ****************************************************************
            Go to e-process-source-records.
        E-Exit.
            Exit.

Program definitions

The first point to notice about this progam is the SELECT
statement in the FILE-CONTROL SECTION. This defines the
DDNAME of the input source file, as defined to SCLM by the
FLMALLOC macro in the project definition. The DDNAME is
arbitrary, but bear in mind that frequently-used DDNAMEs such
as SYSIN, SYSOUT, and SYSUT1 should be avoided as this
program will be run under ISPF, and ISPF may already be using
these names.

The FD entry for the input file should match the input source file,
in this case fixed blocked with an LRECL of 80.

The linkage section shown contains three areas:

1      The LK-LIST-AREA is the layout of the area passed by
      SCLM, into which the parser writes all INCLUDE or )IM
      member names. This area is a table and the number of items
      corresponds to the number specified in the BUFSIZE
