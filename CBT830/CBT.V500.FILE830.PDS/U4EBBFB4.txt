Resetting GDG associations

THE PROBLEM

The basic implementation of a Generation Data Group (GDG)
does not allow for the removal of all associations, unless they
can be defined as a constant number of entries.  If the number
is constant, the EMPTY attribute is coded at GDG definition
time and the GDG will be reset each time the LIMIT number of
associations is reached.  I recently ran into a situation which
was ideal for the EMPTY concept, but had an unpredictable
number of entries.  The situation involved merging daily SMF
data to a weekly tape and in turn merging the weekly tapes to a
monthly tape.  The weekly tapes were then of no value and, in
fact, it was desirable to get rid of them.  This was because the
entire group of GDG entries could be referenced by simply
coding the base GDG name in the JCL.  Unfortunately, the
number of weekly tapes could not be guaranteed.  It was
generally five but could be six.  Therefore, resetting the weekly
GDG associations back to zero prior to the next month's
processing presented a problem.

THE SOLUTION

I decided to write a program which would determine the
number of current GDG associations and in turn uncatalogue
and delete them.  The basic concept was to exploit the abilities
of IDCAMS by linking to it at key points within an Assembler
program.  The program, called GDGRESET, initially
determines what GDG name to reset by reading it from the
GDGINPUT DD.  The GDGINPUT format is simply the GDG
name, left justified starting in column 1.  Any number of
GDGs can be processed  by  putting them on separate input
records.  After formatting a LISTC statement for the GDG
name, GDGRESET links to IDCAMS to determine all the
current associations.

One key ingredient in communicating with IDCAMS was to
establish a DD for SYSIN that GDGRESET writes to and
closes, then IDCAMS opens and reads.  Likewise, a
SYSPRINT DD was established which IDCAMS writes to and
GDGRESET reads.  After GDGRESET identifies all
associations, it breaks them down into formatted delete
statements to pass back to IDCAMS.  The program is sensitive
to the device type of the associated entries.  A disk file requires
a true delete, but a tape file can be disposed of more
appropriately by adding the NOSCRATCH attribute so no drive
allocation takes place.

GDGRESET is also sensitive to any non-zero return codes
from IDCAMS during both the LISTC and DELETE phase.  It
will pass the return code on and indicate with a WTO if a
problem occurred.  To allow for an audit trail of what
IDCAMS has done and to facilitate any problem analysis, the
SYSPRINT output is transferred by GDGRESET to the
DISPLAY DD for viewing.  Note that when defining a GDG
which will make use of this concept, it would be convenient to
use a LIMIT value of 255.  That way the variable number of
entries would have unlimited flexibility up to the maximum.

GDGRESET SOURCE CODE

GDGRESET CSECT
         STM   R14,R12,12(R13)           HOUSEKEEPING
         BALR  R12,R0
         USING *,R12
         LR    R7,R1                     KEEP REG 1 FOR IDCAMS LINK
         LA    R2,REGSAVE
         ST    R2,8(R13)
         ST    R13,4(R2)
         LR    R13,R2
         OPEN  (GDGINPUT)
         OPEN  (DISPLAY,(OUTPUT))
GDGRS010 OPEN  (SYSIN,(OUTPUT))
         MVI   PHASEFLG,C'L'           INDICATE LISTC PHASE
         GET   GDGINPUT
         MVC   GDGIN(80),0(R1)         SAVE THE INPUT RECORD
         MVC   LISTDSN,GDGDSN          GET THE DSNAME FOR LISTC
         PUT   SYSIN,LISTCARD          PUT LISTC OUT FOR IDCAMS
         CLOSE SYSIN                   GET READY
         LR    R1,R7                             FOR IDCAMS LINK
         LINK  EP=IDCAMS
         LTR   R15,R15                 DID IDCAMS WORK?
         BZ    GDGRS015                IF YES, CONTINUE ON
         ST    R15,SAVERC              SAVE BAD RC
         WTO   '**  BAD RETURN CODE FROM IDCAMS LISTCAT  **'
GDGRS015 OPEN  SYSPRINT                SYSPRINT IS THE IDCAMS LISTCAT
GDGRS040 GET   SYSPRINT
         LH    R5,0(R1)                 GET THE LENGTH
         SH    R5,=H'5'                 GET READY FOR SYSPRINT MOVE
         MVI   SAVEPRNT,X'40'           SPACE OUT THE SAVE AREA
         MVC   SAVEPRNT+1(L'SAVEPRNT-1),SAVEPRNT
         EX    R5,PRNTMOVE              MOVE THE SYSPRINT RECORD
         LR    R6,R1                    SAVE REG 1
         PUT   DISPLAY,SAVEPRNT         DISPLAY SYSPRINT
         LA    R6,4(R6)                 SKIP OVER LENGTH
         CLC   =C'NONVSAM',4(R6)        IS THIS A NONVSAM ENTRY?
         BE    GDGRS050                 IF YES, WE WANT IT
         CLI   DEVTYPSW,C'0'            NEED DEVTYPE?
         BNE   GDGRS040                 IF NOT, GO ON
         CLC   =C'VOLSER',8(R6)         IS THIS A VOLSER RECORD?
         BE    GDGRS060                 IF YES, GO PROCESS
         B     GDGRS040                 GO LOOK FOR MORE
GDGRS050 MVI   SAVEDSN,X'40'            SPACE OUT THE SAVE AREA
         MVC   SAVEDSN+1(L'SAVEDSN-1),SAVEDSN
         SH    R5,=H'17'                GET READY FOR DSNAME MOVE
         EX    R5,DSNMOVE               SAVE THE DATASET NAME
         MVI   DEVTYPSW,C'0'            INDICATE WE NEED DEVTYPE
         B     GDGRS040                 GO LOOK FOR MORE
GDGRS060 MVI   DEVTYPSW,C'1'            INDICATE WE HAVE DEVTYPE
         CLC   =C'80',56(R6)            IS THIS A TAPE ENTRY?
         BNE   GDGRS065                 IF NOT IT MUST BE DISK
         MVI   SAVDVTYP,C'T'            INDICATE IT'S TAPE
         B     GDGRS070
GDGRS065 MVI   SAVDVTYP,C'D'            INDICATE IT'S DISK
GDGRS070 GETMAIN R,LV=49                NEED 49 BYTES FOR SAVE AREA
         MVC   0(4,R1),GETMNQUE         SAVE PRIOR GETMAIN ADDRESS
         MVC   4(1,R1),SAVDVTYP         SAVE DISK OR TAPE TYPE
         MVC   5(44,R1),SAVEDSN         SAVE DATASET NAME
         ST    R1,GETMNQUE              SAVE CURRENT GETMAIN ADDRESS
         B     GDGRS040                 GO LOOK FOR MORE
GDGRS080 CLOSE SYSPRINT                  THAT'S ALL FROM LISTC
         CLI   PHASEFLG,C'D'             WHAT PHASE?
         BE    GDGRS127                  IF DELETE, GO ON
         L     R15,SAVERC                RELOAD LISTC RC
         LTR   R15,R15                   WAS LISTC RC ZERO?
         BNZ   GDGRS150                  IF NOT, GET OUT
         OPEN  (SYSIN,(OUTPUT))          OPEN FOR IDCAMS STATEMENTS
         L     R2,GETMNQUE               WHERE DOES THE CHAIN START?
         B     GDGRS095
GDGRS090 L     R2,0(R2)                  LOAD NEXT ADDRESS IN CHAIN
GDGRS095 LTR   R2,R2                     IF ZERO,
         BZ    GDGRS120                          AT END OF CHAIN
         CLI   4(R2),C'T'                WAS IT A TAPE?
         BNE   GDGRS100
         MVC   NOSCRATC,=C'NOSCRATCH'    DON'T TRY TO DELETE A TAPE
         B     GDGRS110
GDGRS100 MVC   NOSCRATC,=C'         '    OK TO DELETE A DISK DSN
GDGRS110 MVC   UNCATDSN(44),5(R2)        PUT THE DSN INTO DELETE CARD
         PUT   SYSIN,UNCATCRD            GIVE DELETE TO IDCAMS
         B     GDGRS090                  GO GET THE NEXT ONE
GDGRS120 CLOSE SYSIN
         MVI   PHASEFLG,C'D'             INDICATE DELETE PHASE
         LR    R1,R7                     GET READY FOR IDCAMS
         LINK  EP=IDCAMS
         ST    R15,SAVERC                SAVE RC
         OPEN  SYSPRINT
GDGRS125 GET   SYSPRINT
         LH    R5,0(R1)                 GET THE LENGTH
         SH    R5,=H'5'                 GET READY FOR SYSPRINT MOVE
         MVI   SAVEPRNT,X'40'           SPACE OUT THE SAVE AREA
         MVC   SAVEPRNT+1(L'SAVEPRNT-1),SAVEPRNT
         EX    R5,PRNTMOVE              MOVE THE SYSPRINT RECORD
         PUT   DISPLAY,SAVEPRNT         DISPLAY SYSPRINT
         B     GDGRS125
GDGRS127 L     R15,SAVERC
         LTR   R15,R15                   DID IDCAMS WORK?
         BZ    GDGRS130                  IF YES, CONTINUE ON
         WTO   '**  BAD RETURN CODE FROM IDCAMS DELETE  **'
         B     GDGRS150                  IF NON ZERO, GET OUT
GDGRS130 MVC   GETMNQUE,ZEROADDR         ZERO OUT QUE START ADDRESS
         B     GDGRS010                  GO SEE IF THERE ARE MORE GDGS
GDGRS150 CLOSE (DISPLAY,,GDGINPUT)
         L     R15,SAVERC                RESTORE
         L     R13,REGSAVE+4                    REGISTERS
         ST    R15,16(R13)                               AND
         LM    R14,R12,12(R13)                              GO
         BR    R14                                            HOME
DSNMOVE  MVC   SAVEDSN(0),17(R1)         MVC FOR DATASET NAME
PRNTMOVE MVC   SAVEPRNT(0),4(R1)         MVC FOR SYSPRINT
         LTORG
REGSAVE  DS    18F
SAVERC   DC    A(0)
GETMNQUE DC    A(0)
ZEROADDR DC    A(0)
DEVTYPSW DS    C
PHASEFLG DS    C
SAVEDSN  DS    CL44
SAVDVTYP DS    C
SAVEPRNT DS    CL133
UNCATCRD DC    CL80' DELETE'
         ORG   UNCATCRD+10
UNCATDSN DS    CL44
         DC    C'  '
NOSCRATC DC    CL9'NOSCRATCH'
         ORG
LISTCARD DC    CL80' '
         ORG   LISTCARD
         DC    C' LISTC ENTRIES('
LISTDSN  DC    CL44' '
         DC    C') ALL'
         ORG
GDGIN    DS    CL80
         ORG   GDGIN
GDGDSN   DS    CL44
         ORG
DISPLAY  DCB   DDNAME=DISPLAY,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=133,    X
               BLKSIZE=133
GDGINPUT DCB   DDNAME=GDGINPUT,DSORG=PS,MACRF=GL,EODAD=GDGRS150
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=GL,EODAD=GDGRS080
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=F,LRECL=80,        X
               BLKSIZE=80
         END

SAMPLE JCL TO RUN THE GDGRESET PROGRAM

//STEP1    EXEC PGM=GDGRESET
//DISPLAY  DD   SYSOUT=*
//SYSPRINT DD   UNIT=VIO,SPACE=(CYL,1)
//SYSIN    DD   UNIT=VIO,SPACE=(CYL,1)
//GDGINPUT DD   *
EISHMAN.TAPE.GDG
SYS2.TEST.DATA


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                                 â‚¬ Xephon 1990

