Getting rid of your UADS

ABSTRACT

This article describes the opportunities and facilities available
for MVS users in Version 1 Release 8 of RACF, paying
particular attention to the ability to access the TSO log-on
information in the RACF database.  The background section is
for those who have no experience or knowledge of RACF
basics.  The reader should have knowledge of the terms used
when defining TSO users in UADS.


BACKGROUND

In the last few years a lot of things have happened to RACF.
As you may know, the interfaces to RACF are through:

o      TSO Commands for adding/deleting/updating RACF entities.

o      Assembler macros for interrogating RACF information in
      special situations.

In both cases, security measures are taken (if implemented) to
prohibit unauthorized use of the interface.

The TSO commands for RACF are used as the basis for the
TSO UADS conversion mentioned below.

RACF originated from the need to protect datasets, which
subsequently proved to be part of a more general need to
protect all resources. This led to the introduction of resource
classes, of which dataset is just one.  The RACF database
consists of a table with resource classes and, for each of these,
a table with installation-added resource name occurrences like
SYS1.PARMLIB for the dataset class.  The resource names in
RACF are also called resource profiles or simply profiles.
There are also tables for users and user groups with their inter-
relationships.

The job of the security administrator and resource owners
consists of permitting the groups (and sometimes users) access
to resources, identified by class and name.  There are two
categories of permission:

o      Granting access is done by specifying PERMIT with
      certain access authority levels such as READ, UPDATE,
      and ALTER.

o      Denying access is done by specifying PERMIT with the
      access authority level NONE.

Certain system dataset resources need similar security
protection.  As a consequence, a lot of similar PERMITs would
emerge, which could be cumbersome to maintain.  In order to
minimize the maintenance work, generic resource names as
well as the universal access authority level were invented.

With generic resource names you can make one profile cover
several actual resources.  For example, with datasets you can
have the generic resource 'SYS1.*', which covers all datasets
whose name starts with 'SYS1.'.  The generic facility is good,
but how about minimizing the number of PERMITs?  Together
with the command that adds the generic resource profile you
can specify a universal access authority level similar to the
access authority levels used in the PERMIT, ie NONE, READ,
UPDATE, or ALTER.  This will result in fewer PERMITs.
For example, the 'SYS1.*' profile could be specified as
UACC(NONE), meaning that no-one can access datasets
starting with 'SYS1.'.

In practice, there will always be some users who have to reach
such resources (eg the technical support people).  So by
permitting those (usually a group) access to the generic
resource you can override the universal access authority,
thereby granting access.

In the situation where two generic resource profiles overlap one
or more resource name occurrences, there must be a rule telling
RACF which one to verify authorization from.  RACF searches
from the most specific to the least specific resource profile.
This search stops at the most specific resource profile.

Take the case where there is a 'SYS1.*' profile and a
'SYS1.LINK*' profile.  If a user tries to access the
SYS1.LINKLIB dataset, the 'SYS1.LINK*' profile will be
used to verify authorization.  This seems simple, and so it
should be.

To get a feeling of the evolution of RACF, a list of some added
main facilities is shown below:

o      Automatic Dataset Protection (ADSP), to let the system
      create/delete dataset profiles when datasets are
      allocated/deleted.

o      Generic resource naming.

o      The ability to let RACF handle user verification and
      transaction authorization for IMS and CICS.

o      The ability to let RACF verify user authorization to terminals.

o      Volume protection (DASDVOL and TAPEVOL).

o      Conditional program authorization, which permits access
      to a resource only if it is accessed by a given program.


NEW FACILITIES

With the introduction of RACF Version 1 Release 8 several
facilities were introduced; some of which are:

o      Department of Defense class C2 protection level.

o      Protection of the IBM 3090 Vector Facility.

o      DFP support in lieu of DFSMS.

o      Execution control libraries, to limit use of load libraries to
      only fetching/executing modules.

o      Enhanced generic naming of resources.

o      Protection control of program dumps.

o      RACF Extract Macro (RACXTRT) enhancements.

o      Profile field authorization, also named field level access checking.

o      TSO log-on information included in the user profile.

For the rest of the article we will concentrate on the last
mentioned facility.


TSO LOG-ON INFORMATION CONVERSION

The possibility of converting the UADS to RACF exists if you
have TSO/E at the minimum level of Version 1 Release 4.  The
author's conversion experiences are with TSO/E Version 2
Release 1.0.

TSO stores the following information in the UADS for each
user:

1      User-id together with:
      o      Password
      o      Maximum region size this user is authorized to specify
      o      User data
      o      RBA of the MAIL directory
      o      Default SYSOUT destination
      o      Default JOB, MESSAGE, HOLD, and SYSOUT classes
      o      Default UNIT name
      o      Log-on default information stored each time the user
             successfully logs on consisting of:
            -   Account number
            -   Procedure name
            -   Region size
            -   Performance group
            -   Mail
            -   Notices
            -   OID card
            -   TSO/E command.

2      TSO/E authorities such as:
      o      JCL
      o      OPERATOR
      o      MOUNT
      o      ACCOUNT
      o      RECOVER.

3      Log-on procedure name(s) this user is authorized to specify.

4      Log-on account code(s) this user is authorized to specify.

5      Log-on performance group(s) this user is authorized to specify.

RACF (1.8 and later) groups this information into:

*   Existing user-related information (except the password, which may already ex
o      New ACCTNUM resource class to contain account numbers.

o      New TSOPROC resource class to contain procedure names.

o      New PERFGRP resource class to contain performance groups.

o      New TSOAUTH resource class to contain TSO/E authority types.

The intention is, just as with datasets, that the security
administrator uses PERMITs to grant or deny users or (more
likely) user groups authority to access resources defined in the
four new resource classes.  The problem is now how do we
move the information from the UADS to RACF?

This is assisted by a conversion command available with
TSO/E called RACONVRT.  The following describes the steps
and precautions you must make, when converting the UADS to
RACF.

Step by step technical description

First of all you must have control over which users are added
and deleted during the conversion period, which should not last
more than one week.  You have to have a TSO user-id
authorized to execute the RACONVRT and SYNC commands
and it is necessary to have a TSO user-id, authorized by
RACF, to issue RACF commands to add/delete/alter user/group
information as well as the SETROPTS command.  In order to
activate the new resource classes enter the following RACF
command:

      SETROPTS CLASSACT(TSOPROC + ACCTNUM PERFGRP TSOAUTH)

Now you freeze your TSO UADS and you execute the
RACONVRT command in a TSO batch job.  The
RACONVRT creates a dataset userid.IKJ.RACONVRT.CLIST
in which it creates several CLIST members with RACF
commands necessary to perform the conversion.  Do not
specify parameters - you will make changes to the generated
conversion commands later on anyway.  The commands and
their syntax can be found in the RACF Command Language
Reference manual.

The generated CLIST dataset contains the members listed
below.  For each member the actions to be performed are given
together with some precautions that should be taken.

ADDUSER

This member consists of RACF commands to define users with
the TSO information and to create a generic profile for each
user to provide access to their own datasets.  This member
should not be used if you are already using RACF for your
TSO/E user-id verification.  If you're going to use it please
read the section on the ALTUSER member before executing it.

DEFAUTH

This member consists of RACF commands to define the TSO/E
authorities (OPER for operator, ACCT for account, JCL,
MOUNT, and RECOVER) as RACF resources and PERMITs
to give users authority to access these resources.  Now is the
time your security administrator comes in and revises the
TSO/E authorities.  Maybe too many have authority to use the
OPERATOR and ACCOUNT commands.  Maybe the users
that should be authorized to those are all in same group.  You
should make a RACF group containing these users (if not
already done) and edit this member so that one PERMIT gives
the group authority to the OPERATOR command and another
PERMIT gives the group authority for the ACCOUNT
command.  This will limit the amount of PERMITs and
therefore the amount of the work to keep them up to date.

DEFPROC

This member consists of RACF commands to define log-on
procedures and PERMITs to give users authority to access
these resources.

DEFACCT

This member consists of RACF commands to define log-on
account codes and PERMITs to give users authority to access
these resources.  Now is the time for your technical support
group to revise which account codes should exist. Often when
account codes are removed and obsolete, the TSO
administrator fails to remove the definitions in the UADS.  The
wrong information should not be incorporated into RACF.

If the remaining account codes are used by user-groups, you
should make a RACF group containing these users (if not
already done) and edit this member and PERMIT the relevant
account codes to the groups needing the access.
If your naming standard of account codes allows it, you could
consider making them generic so they could cover several
account code occurrences.  For example, if your account code
begins with the division code followed by the department
number and your accounting is at the division level, you can
define the account code as the division code followed by '*'.

If you want to use generic names, the PERMITs have to be
changed to use the generic names too.  This will ensure that
users from the above example can only use account codes from
the division they belong to.  This will limit the amount of
PERMITs and reduce the amount of work to keep them up to
date.

It may be desirable to change the TSO/E submit exit in order to
change the account code submitted from ISPF/TSO to the
default value from the RACF user profile.  If you want to
check the authority to an account code in a batch job, you have
to modify your JES exits (exit 3: job statement accounting field
scan exit) to make a RACROUTE VERIFY macro call.

DEFPERF

This member consists of RACF commands to define log-on
performance groups and PERMITs to give users authority to
access these resources.  Now is the time your technical support
group comes in and revises which performance groups should
exist.  Often when performance groups are removed and
obsolete, the TSO administrator fails to remove the definitions
in the UADS.  The wrong information should not be
incorporated into RACF.  Depending on your use of these, it
may be desirable to make those generic in order to limit the
number of PERMITs.

ALTUSER

This member consists of RACF commands to define/change the
RACF user profiles to incorporate the TSO segment which
holds the TSO log-on information.  This member should be
edited if you do not use the ADDUSER member.

You must be aware that every user that has the TSO segment
present when doing a log-on to TSO/E is not using UADS.  In
other words the presence of the TSO segment in the user
profile triggers TSO/E to use that rather than the UADS (after
CLASS is activated).

Depending on how many changes you have made to the other
members and the environment, you will have to make changes
to this member.  You will have to delete the commands
regarding selected users, such as IBMUSER and some
technical support users (and possibly started task users, if any),
in order to be able to start TSO/E without RACF on your
system.

RUN

This member consists of commands to execute the members
above: I would recommend reviewing it but not using it.
Follow the sequence above and execute the members when you
are ready to do so.

After you have reviewed the above generated commands, try to
experiment with a single dummy RACF user and a little subset
of account codes, performance groups, procedures, and TSO/E
authorities to see how they work and to get a feeling of how
you should handle your installation's conversion requirements.
This can lead to a considerable amount of reworking of the
current set-up with exits and so forth.  But let us proceed with
the basic conversion steps.

To bring the resource class profiles into storage to eliminate
I/O to the RACF database, enter the command:

      SETROPTS RACLIST(TSOPROC + ACCTNUM PERFGRP TSOAUTH)

If you have made any changes to profiles in those classes enter
this command:

      SETROPTS RACLIST(TSOPROC + ACCTNUM PERFGRP TSOAUTH) + REFRESH

Delete the members in UADS that you have converted but
leave the users that should still be able to run from UADS
(IBMUSER etc).

Synchronize the UADS with the BROADCAST dataset using
the TSO command:

      SYNC BOTH


CONCLUSION

The result from the RACONVRT command is entirely based
on relationships between users and resources.  This is, at most
installations, not adequate to implement since this does not take
advantage of the group facility of RACF.  This would end up
in a lot of PERMITs and, what is more important, you could
waste a lot of time trying to maintain them.

The moral of this story is to think of the groups or
combinations of users, account codes, log-on procedures,
performance groups, and TSO/E authorities that you have or
would like to have, and implement this grouping in the output
of RACONVRT.  You may have to change a lot, so consider
'machine aided' conversion in this process.  Consider RACF
field-level access checking for the situation where you would
allow the users to change some of their profile fields
themselves (eg ACCTNUM).

To do the conversion successfully, you will need an
understanding of:

o      RACF groups
o      RACF users
o      RACF RDEFINEs
o      RACF generic naming
o      RACF PERMITs
o      RACF field-level access checking.

The benefits you will get from this conversion are:
o      A single place to look when any user has trouble with log-on.

o      A simplified method of adding/updating and deleting
      user-ids.  (A single person or function like the security
      department can, without any technical knowledge of
      TSO/E but with some RACF knowledge, perform the
      updating.)

o      Removal of some I/Os to the UADS (let RACF do this a
      little bit faster through non-PDS access).

o      Strengthening of security: no information about passwords,
      log-on procedures etc can found by browsing the UADS.

o      A basis for a future user repository, that you can access by
      RACF commands as well as RACF macros.


LITERATURE

The following manuals are needed and are presented in a
prioritized sequence.

1      SC28-1340 RACF Security Administrator's Guide,  pages
      4-39 to 4-44.

2      SC28-1872 TSO/E V.2 Customization, Chapter 17

3      SC28-0733 RACF Command Language Reference,  pages
      3-24 to 3-37 (ADDUSER), pages 3-55 to 3-73
      (ALTUSER), pages 3-156 to 3-171 (RDEFINE), pages 3-
      126 to 3-133 (PERMIT), and more if other commands are
      needed.

4      SC28-1878 TSO/E V.2 System Programming Command
      Reference, page 2-145

5      SC28-1345 RACF Macros and Interfaces, pages 1-2 to 1-
      16 (ICHERCDE).

Peter Rosenberg
Senior Analyst
CRI A/S (Denmark)                             c Xephon 1991

