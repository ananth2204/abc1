Packing TSO datasets to save DASD space

Even as the cost per megabyte of DASD declines, software
which compresses data to make more efficient use of available
DASD continues to make economic sense.  IBM's TSO/E
Release 2 and ISPF/PDF Release 3 have built-in capabilities to
compress data and save space on DASD.  All that is needed is
a convenient way to make use of these facilities.  The
accompanying REXX EXEC, edit macro, and JCL example
make it possible to shrink and expand TSO datasets with a
minimum of effort.  DASD savings of 40 percent or more are
possible with data such as JCL libraries where each record
contains a significant proportion of spaces or other redundant
characters.

The capability to pack data is built into the ISPF/PDF editor.
When entered on the command line in an edit session, PACK
ON tells the editor to compress the data when it is saved back
to disk.  The PACK setting (ON or OFF) is remembered in the
dataset's edit profile.  Both BROWSE and EDIT automatically
recognize the packed format and unpack the data for display
purposes.  To return the data to its fully expanded format on
disk, the PACK OFF command must be entered in an edit
session prior to saving.

Packing every member of a PDS requires that each member is
individually edited, has PACK turned ON, and is saved.  It is
hard to blame even the most conscientious and DASD-thrifty
TSO users for an unwillingness to undertake such a process
manually.  If the raw tedium were not daunting enough, the
first B37 abend due to accumulating PDS gas would surely
signal the end of the project.  The accompanying PACK EXEC
and PACKMAC edit macro solve both of those problems.  The
PACK EXEC will pack every member in a PDS after
compressing it and ensuring that there is at least 50 percent free
space to accommodate the gaseous byproduct.

Packing may be done to sequential datasets as well as to
members of a PDS.  JCL libraries are ideal candidates for
packing, both because of the amount of white space in each
record and because of the way they are usually used.
Typically, a member of a JCL library has to be edited prior to
submitting it to run as a batch job in the background.  Because
the editor unpacks the data for display during the edit session,
the JCL will be submitted in its expanded, JES-compatible
format.  To submit packed JCL outside of edit, use the
accompanying SP (Submit Packed) EXEC in place of the
SUBMIT command.

The PACK EXEC may be invoked from the command area of a
3.4 dataset list display as well as from a command line with the
dataset name being supplied as an argument.  The PACK
EXEC, SP EXEC, and the PACKMAC edit macro should be
placed in a library in the SYSPROC DD concatenation, where
it can co-exist with CLISTs, or in the SYSEXEC concatenation
if your system is set up to search SYSEXEC for REXX
EXECs.

Support for packed libraries of programming language source
code is built into both the foreground and background language
processing options.  ISPF/PDF inserts an ISRLEMX step
similar to the accompanying JCL to unpack the source code
prior to passing it to the compiler or assembler.  If you wish to
pack datasets which must interface to programs that do not
support the packed format, you need to make similar
arrangements.  Briefly, ISRLEMX reads its packed input from
the ISRLCODE DD and writes its expanded output to the
ISRLEXPD DD.  Error messages, if any, are written to the
ISRLMSG DD.  If the dataset identified by the ISRLCODE
DD is a PDS, the input member name is passed as the second
parameter in the PARM string.  If the input is a sequential
dataset, the second parameter is ignored.  The ISRLEMX
program is distributed with PDF and is documented in
ISPF/PDF Planning and Customizing (SC34-4134 for Version
3).  See also the ISPF/PDF Guide under the topics JCL
generation - compilers and Expanding packed data for
additional considerations.

The ICQSPC00 CLIST which is invoked from within the
PACK EXEC is worthy of special mention.  It is used in the
EXEC to compress the PDS being PACKed and to ensure that
after compression there is at least 50 percent free space
available (counting primary and all 15 possible secondary
extents).  ICQSPC00 is part of TSO/E 2 and is documented in
TSO/E Version 2 Programming Services.  It is a potentially
very useful CLIST for other functions as well.  It can automate
the process of re-allocating a sequential dataset or PDS which
has become full, copying the data from the old to the new,
deleting the old and renaming the new, all with one command.
It can also be used to allocate new datasets and to clone
existing datasets.

One final note on using the PACK EXEC: although PACK uses
ICQSPC00 to compress (in the IEBCOPY sense) the PDS both
before and after PACKing, the space allocation of the PDS
may have actually been increased to accommodate the creation
of a newly-packed copy of every member.  After PACKing a
dataset, therefore, you should execute the 'F' function against
the dataset from a 3.4 dataset list display to free the unused
space.  Only by taking this final action will you actually realize
the space savings which packed data makes possible.  As
examples of the kind of space savings that are possible: a 10
track PDS of text was reduced to 5 tracks, and a 42 track JCL
library was reduced to 28 tracks.


PACK REXX

/* REXX ----------------------------------------------------------*/
/* This exec is used to pack every member of a pds. It can be     */
/* invoked as a prefix command from a 3.4 DSLIST panel or as a    */
/* command with the PDS name as an argument. It can also be used  */
/* to pack a sequential data set.                                 */
/*----------------------------------------------------------------*/
Arg dsn .
If Left(dsn,1) = "'"    Then /* dsn arg from 3.4 comes with tickies */
   Do
      dsn = Strip(Translate(dsn," ","'"))
   End
Else               /* dsn entered as primary command without tickies */
   Do
      dsn = Userid()"."dsn
   End
qdsn = "'"dsn"'"   /* qdsn gets quoted version of dsn with tickies */
Stat = SYSDSN(qdsn)  /* See if data set exists */
If Stat <> "OK" Then
   Do
     Say qdsn "not found."
     Exit
   End
/* Find out if it's sequential or PDS */
fc = LISTDSI(qdsn)
If fc <> 0 Then
   Do
      Say "LISTDSI returned function code" fc
      Say "Reason Code =" SYSREASON
   End
If fc > 4 Then Exit
dsorg = SYSDSORG
If dsorg <> "PS" & dsorg <> "PO" Then
   Do
      Say "Only PDS's and sequential files may be PACKed."
      Exit
   End
Address ISPEXEC
/* Do Library Management style ALLOCATE */
"LMINIT DATAID(DATAID) DATASET("qdsn") ENQ(EXCLU)"
If rc <> 0 Then               /* Return codes                     */
  Do
    Say "Error from LMINIT. RC =" rc
    Select
      When rc = 8
        Then Do
             Say "Data set or file not allocated, or"
             Say "DDname not found, or"
             Say "Data set or file organization not supported."
        End
      When rc = 12
        Then Say "Invalid parameter value."
      When rc = 16
        Then Do
             Say "Truncation or translation error"
             Say "in accessing dialog variables."
        End
      When rc = 20
        Then Say "Severe error."
    End
    Exit
  End
/* Do Library Management style OPEN */
"LMOPEN DATAID("dataid") OPTION(INPUT)"
If rc <> 0 Then               /* Return codes                      */
  Do
    Say "Error from LMMOPEN. RC =" rc
    Select
      When rc = 8
        Then Do
             Say "Open failed, or"
             Say "Data set record format not supported by ISPF."
        End
      When rc = 10
        Then Say "No data set associated with the data-id."
      When rc = 12
        Then Do
             Say "Invalid parameter value, or"
             Say "Data set is already open, or"
             Say "Cannot open data set allocated SHR for output."
        End
      When rc = 16
        Then Do
             Say "Truncation or translation error"
             Say "in storing defined variables."
        End
      When rc = 20
        Then Say "Severe error."
    End                            /* End of Select */
    "LMFREE  DATAID("dataid")"
    Exit
  End
If dsorg = PO Then
   Do
      member = "        "  /* Set up LMLIST to get first member name */
      "LMMLIST DATAID("dataid") OPTION(LIST) MEMBER(MEMBER) STATS(NO)"
      If rc <> 0 Then
        Do
          Say "Error from LMMLIST. RC =" rc
          Select
            When rc = 4
              Then Say "Empty member list."
            When rc = 8
              Then Say "LIST option, end of member list."
            When rc = 10
              Then Say "No data set or file associated" ,
                       "with the given data-id."
            When rc = 12
              Then Do
                   Say "Data set or file not open or not partitioned,"
                   Say "or invalid parameter value."
              End
            When rc = 16
              Then Say "Truncation or translation error" ,
                       "in accessing dialog variables."
            When rc = 20
              Then Say "Severe error."
          End
          "LMCLOSE DATAID("dataid")"
          "LMFREE  DATAID("dataid")"
          Exit
        End
      PDS. =                 /* Initialize stem variable array */
      M = 0                  /* Initialize member count */
      Do while RC = 0 /* Get member names in stem variable array */
                      /* RC = 8 when no more member names to return */
        M = M + 1
        PDS.M = Strip(Member) /* Strip spaces off member name */
        /* Now get next member name */
       "LMMLIST DATAID("Dataid") OPTION(LIST) MEMBER(MEMBER) STATS(NO)"
      End
      "LMMLIST DATAID("dataid") OPTION(FREE)" /* Free list storage */
      "LMCLOSE DATAID("dataid")" /* Library Management style CLOSE */
      /* Compress the PDS and make sure it's no more than 50% full */
      Address TSO
      "%ICQSPC00" qdsn "SPACEFULL(50) COMPRESS"
      If rc <> 0 Then
         Do
            Say "Error from ICQSPC00 clist. RC =" rc
            Exit
         End
      PDS.0 = M              /* PDS.0 gets number of members */
      Do M = 1 to PDS.0
         /* Edit each member and turn PACK ON */
         "ISPEXEC EDIT DATAID("dataid") MEMBER("PDS.M") MACRO(PACKMAC)"
      End
      /* Compress again after having saved each packed member */
      "%ICQSPC00" qdsn "SPACEFULL(90) COMPRESS"
      If rc <> 0 Then
         Do
            Say "Error from ICQSPC00 clist. RC =" rc
            Exit
         End
   End /* end of DSORG = PO */
Else   /* DSORG = PS */
   Do
      /* Edit and pack the sequential data set */
      "ISPEXEC EDIT DATAID("dataid") MACRO(PACKMAC)"
   End
/* Library Management style FREE */
"ISPEXEC LMFREE DATAID("dataid")"
Say "PACK completed successfully."
Say "Now use 3.4 'F' function to free unused space."
Exit


PACKMAC REXX

/* REXX -----------------------------------------------------------*/
/*  This macro turns PACK mode on and saves the data being edited. */
/*-----------------------------------------------------------------*/
"ISREDIT MACRO"                     /* Tell ISPF it's a macro */
"ISREDIT PACK ON"
"ISREDIT SAVE"
"ISREDIT END"
Exit


SUBMAC REXX

/* REXX -----------------------------------------------------------*/
/*  This macro SUBMITs the data to run as a background job and     */
/*  ENDs the EDIT session.                                         */
/*-----------------------------------------------------------------*/
"ISREDIT MACRO"                     /* Tell ISPF it's a macro */
"ISREDIT SUBMIT"
"ISREDIT END"
Exit


JCL FOR ISRLEMX

//TS21JJC9 JOB 916572T,MSGCLASS=X,CLASS=J,NOTIFY=TS21JJC
//SCAN   EXEC PGM=ISRLEMX,
//   PARM=('ASM,AAUVSPL,B,N,E,4,,,ENG,4,7',
//        '1,/,WORKDA')
//*
//* INSERT STEPLIB DD CARDS HERE FOR ISRLEMX AND THE NATIONAL LANGUAGE
//* LITERAL LOAD MODULE IF THEY ARE NOT IN YOUR SYSTEM LIBRARY
//*
//ISRLCODE DD  DSN=TS21JJC.TEST.CNTL,DISP=SHR
//ISRLEXPD DD  UNIT=TSODA,DISP=(NEW,CATLG),SPACE=(TRK,(5,2),RLSE),
//             DSN=TS21JJC.TEST.EXPANDED
//ISRLMSG  DD  SYSOUT=(X)


John Cornman
Senior Systems Programmer
Key Services Corporation (USA)                              c Xephon 1990

