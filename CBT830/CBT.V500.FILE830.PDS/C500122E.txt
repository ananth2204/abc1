Automating disaster recovery

INTRODUCTION

One of the problems we found when testing our disaster recovery
procedures was that there was always a possibility that we would
lose the information (normally a LISTCAT) about the current
back-ups sent to the disaster recovery site and the order of the
volume serial numbers. Also it was time-consuming plugging this
information into the DSF and DFDSS JCL at the time of the
disaster recovery test, as we wanted to simulate the test as close as
possible to a real disaster. Although there were numerous ways of
implementing an automatic procedure, I decided on the following
method.

I set up an esoteric device type called DISASTER, and defined to
it all the device numbers that would need to be restored in a
disaster. This had the benefit that when I added new devices or
changed devices around I would reflect this in DISASTER. I then
wrote a program that would obtain the UCBs associated with
DISASTER and construct DSF and DFDSS restore JCL.

Input to the program is the esoteric name: this is communicated
through SYSIN. Also input are the device numbers and the types
of device (ie single, double, or triple density) that are available at
the disaster recovery site to reload our system. This is not critical
as the main objective is to construct the DSF and DFDSS JCL.

Three tables are constructed: one for each density type that has
been input. The format for the input is as follows:

Columns 1-4:      Device number starting range

Column 5:      Dash

Columns 6-10:      Device number ending range

Column 11:      Density (S for single, D for double, or T for triple).

Examples

0E40-0E50      S:      Device numbers E40 through to E50, single
     density

0F40-0F50      T:      Device numbers F40 through to F50, triple
      density

0B40      D:       Device number B40 double density.

A call to IEFEB4UV, the Unit Verification Service, is issued to
obtain the list of UCB addresses associated with the disaster
recovery esoteric.

Our standards for pack back-up dataset names are:

      hilev.BACKUP.Vvolser

where the last qualifier is a V, followed by the pack name. I am
sure that most sites follow this sort of standard.

The volume serial number in the first UCB returned by
IEFEB4UV is moved to the last qualifier of the GDG back-up
dataset name, which is located in a CAMLST parameter area, and
a LOCATE is issued for the current GDG pack back-up. This will
return, in order, a list of tape volume serial numbers required to
restore this pack. This logic is performed for each UCB returned
by IEFEB4UV.

I then try to match the UCB with a device of equal or greater
density at the disaster recovery site. Once a match is found, a DSF
INIT and a DFDSS RESTORE job is written to a dataset on tape.
A duplicate file is also created on tape, so that one can be sent to
the disaster recovery site and the second sent to our off-site vault
for back-up purposes.

This process will continue until all UCB addresses in the disaster
recovery esoteric name have been dealt with.

JCL required to execute DRECV01

//DISTREC     EXEC   PGM=DRECV01
//DRJCL1      DD     DSN=PROD.DISASTER.TAPE(+1),
//                   DISP=(NEW,CATLG,DELETE),
//                   UNIT=CART,
//                   DCB=(RECFM=FB,LRECL=80,BLKSIZE=32000)
//DRJCL1      DD     DSN=PROD.DISASTER.TAPE2(+1)
//                   DISP=(NEW,CATLG,DELETE),
//                   UNIT=CART,
//                   DCB=(RECFM=FB,LRECL=80,BLKSIZE=32000)
//DEVNUMB     DD     DSN=PROD.GENERAL.CNTRLLIB(DEVNUMS),
//                   DISP=SHR
//SYSUDUMP    DD     SYSOUT=*
//SYSPRINT    DD     SYSOUT=*
//SYSIN       DD     *
DISASTER                 <==== ESOTERIC NAME
/*
//

DRECV01 SOURCE CODE

DRECV01  TITLE 'GENERATE DFDSS RESTORE JCL FOR DISASTER RECOVERY'
         MACRO
         BALS  &REG,&BRTO
         BAS   &REG,&BRTO
         DC    S(*+2)
         MEND
DRECV01  CSECT
* THIS PROGRAM WILL GENERATE DFDSS RESTORE JOBS FOR DISASTER RECOVERY *
* PURPOSES. AN ESOTERIC HAS BEEN GENERATED WHICH INCLUDES ALL THE     *
* PACKS THAT WILL BE RESTORED IN A DISASTER. THIS PROGRAM WILL OBTAIN *
* THE VOLUME SERIAL NUMBERS UNDER THAT ESOTERIC AND THEN  WILL USE    *
* THAT INFORMATION TO OBTAIN THE TAPE VOLUME SERIAL NUMBERS THAT WERE *
* USED TO DUMP THE DASD. THE DFDSS RESTORE JOBS CAN THEN BE CREATED.  *
*        REGISTER CONVENTIONS = STANDARD CONVENTIONS.                 *
*                    REGISTER  2       = BAL REGISTER                 *
*                    REGISTER  3       = WORK REGISTER                *
*                    REGISTER  4       = BASE REGISTER                *
*                    REGISTER  5       = WORK REGISTER                *
*                    REGISTER  6       = WORK REGISTER                *
*                    REGISTER  7       = WORK REGISTER                *
*                    REGISTER  8       = WORK REGISTER                *
*                    REGISTER  9       = WORK REGISTER                *
*                    REGISTER  10      = I/O AREA ADDRESS             *
*                    REGISTER  11      = WORK REGISTER                *
*                    REGISTER  12      = BASE REGISTER                *
*                    REGISTER  13      = SAVE AREA ADDRESS            *
*                    REGISTER  14      = RETURN ADDRESS               *
*                    REGISTER  15      = INITIAL ENTRY ADDRESS        *
NEXTSA   EQU   8                       POINTER TO PREVIOUS SAVEAREA
BLANK    EQU   C' '                    BLANK
RBRACKET EQU   C')'                    RIGHT BRACKET
COMMA    EQU   C','                    COMMA
DASH     EQU   C'-'                    DASH
SINGLE   EQU   C'S'                    SINGLE
DOUBLE   EQU   C'D'                    DOUBLE
TRIPLE   EQU   C'T'                    TRIPLE
MAXLEN   EQU   67
ODDNO    EQU   X'01'                   TEST FOR ODD
SIGNF    EQU   X'F0'                   FORCE SIGN TO F
TAKEN    EQU   C'T'                    INDICATE TABLE ENTRY TAKEN
AVAILBLE EQU   C'R'                    INDICATE TABLE ENTRY AVAILABLE
DSFINIT  EQU   C'I'                    DSF INIT
DFDSSRES EQU   C'R'                    DFDSS RESTORE
         TITLE 'MAIN PROCESSING LOGIC'
         SAVE  (14,12),,DRECV01_&SYSDATE-&SYSTIME
         USING DRECV01,R12,R11          SET UP BASE ADDRESSABILITY
         LR    R12,R15                  ENTRY POINT ADDRESS
         LA    R11,4095(,R12)           @ SECOND BASE REGISTER
         LA    R11,1(,R11)              4096
         ST    R13,PREVSA               PREVIOUS SAVEAREA ADDRESS
         LR    R15,R13                  SWITCH
         LA    R13,SAVEAREA             LENGTH OF WORKAREA
         ST    R13,8(,R15)              STORE IN CALLER'S NEXT SA
         TITLE 'OPEN THE FILES'
OPEN     EQU   *
         USING IHADCB,R10               INFORM THE ASSEMBLER
         OPEN (JCLDCB1,(OUTPUT),JCLDCB2,(OUTPUT),SYSINDCB,(INPUT),     X
               DEVNUMBS,(INPUT))
         LA    R10,JCLDCB1              ADDRESS JCL DCB
         TM    DCBOFLGS,X'10'           OPEN OKAY?
         BZ    OPNERR1                  NO-
         LA    R10,JCLDCB2              ADDRESS JCL DCB
         TM    DCBOFLGS,X'10'           OPEN OKAY?
         BZ    OPNERR1                  NO-
         LA    R10,SYSINDCB             ADDRESS SYSINDCB DCB
         TM    DCBOFLGS,X'10'           OPEN OKAY?
         BZ    OPNERR2                  NO-
         LA    R10,DEVNUMBS             ADDRESS DEVNUMBS DCB
         TM    DCBOFLGS,X'10'           OPEN OKAY?
         BZ    OPNERR3                  NO-
         TITLE 'READ SYSIN FOR REQUESTED ESOTERIC'
RDSYSIN  EQU   *
         GET   SYSINDCB,INPUTREC        READ SYSIN RECORD
         BALS  R2,SYSINCHK              SYSIN INPUT
         TITLE 'SETUP DASD TABLES'
DEVRANGE EQU   *
         GET   DEVNUMBS,DEVADREC        READ A RECORD
         CLI   DEVDASH,BLANK            SINGLE ENTRY?
         BNE   CHKDASH                  NO-
         MVC   DEVRNGE2,DEVRNGE1        RANGE 1 = RANGE 2
         MVI   DEVDASH,DASH             DASH
CHKDASH  EQU   *
         CLI   DEVDASH,DASH             DASH?
         BNE   DEVERR                   NO- ERROR
RCHECK   EQU   *
         LA    R4,DEVRNGE1              FIRST DEVICE RANGE
         LA    R5,L'DEVRNGE1            LENGTH
         BALS  R2,CHKRNGE               CHECK THE RANGE
         LA    R4,DEVRNGE2              SECOND DEVICE RANGE
         LA    R5,L'DEVRNGE2            LENGTH
         BALS  R2,CHKRNGE               CHECK THE RANGE
         MVC   RNGE1,=X'0000'           CLEAR
         LA    R4,DEVRNGE1              @ DEVICE RANGE 1
         LA    R6,RNGE1                 @ RANGE 1 OUTPUT AREA
         LA    R7,L'DEVRNGE1            LENGTH OF RANGE 1
         BALS  R2,CONVBIN               CONVERT RANGE TO BINARY FMT
         MVC   RNGE2,=X'0000'           CLEAR
         LA    R4,DEVRNGE2              @ DEVICE RANGE 2
         LA    R6,RNGE2                 @ RANGE 2 OUTPUT AREA
         LA    R7,L'DEVRNGE2            LENGTH OF RANGE 2
         BALS  R2,CONVBIN               CONVERT RANGE TO BINARY FMT
         CLC   RNGE2,RNGE1              RANGE 2 < RANGE 1?
         BL    DEVRERR                  YES-
         USING DEVTABLE,R4              INFORM THE ASSEMBLER
         LA    R4,SINGLES               @ SINGLES TABLE
         CLI   DEVTYPE,SINGLE           SINGLE DENSITY?
         BE    UPDTAB                   YES-
         LA    R4,DOUBLES               @ DOUBLES TABLE
         CLI   DEVTYPE,DOUBLE           DOUBLE DENSITY?
         BE    UPDTAB                   YES-
         CLI   DEVTYPE,TRIPLE           TRIPLE DENSITY?
         BNE   DEVTERR                  NO- ERROR
         LA    R4,TRIPLES               @ DOUBLES TABLE
UPDTAB   EQU   *
         SR    R5,R5                    ZEROIZE
         ICM   R5,B'0011',RNGE2         DEVICE RANGE 2
         SR    R6,R6                    ZEROIZE
         ICM   R6,B'0011',RNGE1         DEVICE RANGE 1
         SR    R5,R6                    NO OF DEVICES IN RANGE
         LA    R5,1(,R5)                + 1
         LA    R3,DEVTABNE              MAX NO OF DEVICE ENTRIES
SLOT     EQU   *
         CLC   DEVNO,=C'RR'             AVAILABLE SLOT?
         BE    BLDENT                   YES- BUILD ENTRY
         LA    R4,DEVTABLN(,R4)         NEXT ENTRY
         BCT   R3,SLOT                  DO WHILE R3 > 0?
         B     TABERR                   NO MORE ROOM IN TABLE
BLDENT   EQU   *
         SR    R6,R6                    ZEROIZE
         MVC   DEVNO,RNGE1              STARTING ADDRESS
         ICM   R6,B'0011',RNGE1         STARTING RANGE
         BCT   R5,NXTSLOT               DO WHILE R5 > 0?
         B     DEVRANGE                 START AGAIN
NXTSLOT  EQU   *
         LA    R4,DEVTABLN(,R4)         NEXT TABLE ENTRY
         BCT   R3,INCRDNO               INCREMENT DEVICE NO
         B     TABERR                   NO MORE ROOM
INCRDNO  EQU   *
         LA    R6,1(,R6)                NEXT DEVICE NO
         STCM  R6,B'0011',DEVNO         STORE IN TABLE
         BCT   R5,NXTSLOT               DO WHILE R5 > 0?
         B     DEVRANGE                 START AGAIN
         TITLE 'OBTAIN DASD VOLUMES UNDER ESOTERIC'
GETDASD  EQU   *
         MVC   UNITTAB(L'ESOTERIC),ESOTERIC ESOTERIC NAME
         LA    R1,UNITPARM              @ PARM FIELD
         LINK  EP=IEFEB4UV              LINK TO UNIT VERIFICATION RTNE
         LTR   R15,R15                  OKAY?
         BNZ   EDTERROR                 NO-
         BALS  R2,SORTDEVN              SORT THE DEVICE NOS
         ICM   R3,B'1111',UCBPTR        @ UCB ADDRESSES
         USING UCBPLST,R3               INFORM THE ASSEMBLER
         ICM   R5,B'1111',UCBNENT       NO OF UCB ADDRESSES
         LA    R4,UCBADDR               @ FIRST UCB ADDRESS
* R4 = BEGINNING OF UCB LIST
* R5 = NO OF DEVICES RETURNED
* R6 = UCB ADDRESS
         USING UCB,R6                   INFORM THE ASSEMBLER
UCBSCAN  EQU   *
         ICM   R6,B'1111',0(R4)         UCB ADDRESS
         MVC   VOL,UCBVOLI              VOLUME SERIAL NO
         MVC   GEN,GENZERO              GENERATION 0
         LOCATE LOCPARM                 LOCATE DSN
         LTR   R15,R15                  LOCATE OKAY?
         BNZ   LOCERR                   NO-
         AP    JOBNO,=P'1'              INCREMENT JOB NO
         UNPK  JOBNUMB,JOBNO            MOVE TO JOB CARD
         OI    JOBNUMB+L'JOBNUMB-1,SIGNF FORCE SIGN TO F
         MVI   JOBID,DSFINIT            MOVE 'I'
         MVC   UTILITY,DSF              UTILITY TO JOBCARD
         LA    R10,JOBCARD              @ JOBCARD
         BALS  R2,JCLCRT                PUT
         LA    R10,JOBCARD2             @ JOBCARD CONT
         BALS  R2,JCLCRT                PUT
         MVC   DSFSTNME,UCBVOLI         STEPNAME = VOLSER
         LA    R10,EXECDSF              @ EXEC CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,SYSPRINT             @ SYSPRINT CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,SYSIN                @ SYSIN CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,INIT                 @ DSF INIT CARD
         BALS  R2,JCLCRT                PUT
         STCM  R6,B'1111',UCB@          UCB @ FOR DEVTYPE
         DEVTYPE ,(DEVINFO,DEVSIZE),DEVTAB,UCBLIST=(UCB@,UCBLSIZE)
         LTR   R15,R15                  OKAY?
         BNZ   DTYPERR                  NO- DAMM
         CLI   DDEVTYPE,X'03'           SINGLE?
         BNE   DBLEDEV                  NO-
         LA    R7,SINGLES               @ SINGLES TABLE
         BALS  R2,DASDFIT               LET'S GET A DASD FIT
         LTR   R15,R15                  DEVICE MATCHED?
         BZ    BLDCCUU                  YES-
         LA    R7,DOUBLES               @ DOUBLES TABLE
         B     DBLEFIT                  LET'S PUT A SINGLE ON A DOUBLE
DBLEDEV  EQU   *
         LA    R7,DOUBLES               @ DOUBLES TABLE
         CLI   DDEVTYPE,X'06'           DOUBLE?
         BNE   TRPLEDEV                 NO-
DBLEFIT  EQU   *
         BALS  R2,DASDFIT               LET'S GET A DASD FIT
         LTR   R15,R15                  DEVICE MATCHED
         BZ    BLDCCUU                  YES-
         LA    R7,TRIPLES               @ TRIPLES TABLE
         B     TRPLEFIT                 LET'S PUT A D/S ON A TRIPLE
TRPLEDEV EQU   *
         CLI   DDEVTYPE,X'0A'           TRIPLE?
         BNE   DEVUNK                   NO- WHAT THE HELL IS IT?
         LA    R7,TRIPLES               @ TRIPLES TABLE
TRPLEFIT EQU   *
         BALS  R2,DASDFIT               LET'S GET A DASD FIT
         LTR   R15,R15                  DEVICE MATCHED?
         BNZ   FITERR                   NO-
BLDCCUU  EQU   *
         MVC   CDEVNUM,=C'0000'         ZEROIZE
         LA    R8,L'CDEVNUM             LENGTH OF OUTPUT AREA
         LA    R10,CDEVNUM              @ OF OUTPUT AREA
         BALS  R2,CONVCHAR              CONVERT BINARY TO CHARACTER
         MVC   CCUU,CDEVNUM             CONVERTED BINARY NO
         ICM   R6,B'1111',0(R4)         UCB ADDRESS
         LA    R10,UADDR                @ DSF UNITADDR CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,MAP                  @ DSF MAP CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,NORECLAM             @ DSF NORECLAIM CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,NOCHK                @ DSF NOCHK CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,NOVERIFY             @ DSF NOVERIFY PARM
         BALS  R2,JCLCRT                PUT
         LA    R10,OWNER                @ DSF OWNER PARM
         BALS  R2,JCLCRT                PUT
         MVC   VOLIDUPD,UCBVOLI         MOVE VOLSER TO VOLID
         LA    R10,VOLID                @ DSF VOLID PARM
         BALS  R2,JCLCRT                PUT
         LA    R10,PURGE                @ DSF PURGE PARM
         BALS  R2,JCLCRT                PUT
         LA    R10,NVAL                 @ DSF NVAL PARM
         BALS  R2,JCLCRT                PUT
         LA    R10,VTOC                 @ DSF VTOC PARM
         BALS  R2,JCLCRT                PUT
         LA    R10,EOJ                  @ '//' CARD
         MVI   JOBID,DFDSSRES           MOVE 'R'
         BALS  R2,JCLCRT                PUT
         MVC   UTILITY,DFDSS            UTILITY TO JOB CARD
         LA    R10,JOBCARD              @ JOB CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,JOBCARD2             @ JOB CARD CONT
         BALS  R2,JCLCRT                PUT
         MVC   STEPNAME,UCBVOLI         STEPNAME = VOLSER
         LA    R10,EXECCARD             @ EXEC CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,SYSPRINT             @ SYSPRINT CARD
         BALS  R2,JCLCRT                PUT
         MVC   DASDVSER,UCBVOLI         SET UP DFDSS OUTPUT VOLSER
         LA    R10,DASD                 @ DASD CARD
         BALS  R2,JCLCRT                PUT
         MVC   CARTVSER,UCBVOLI         SET UP DFDSS INPUT DSN
         MVC   CARTGDG,FULLGEN          FULL GDG DSN
         LA    R10,CART                 @ TAPE CARD
         BALS  R2,JCLCRT                PUT
         SR    R9,R9                    ZEROIZE
         LA    R8,VOLSER                @ VOLSER OUTPUT AREA
         ICM   R9,B'0011',VOLCOUNT      NO OF DFDSS DUMP TAPES
         LA    R7,DEVCODE               @ FIRST LOCATE VOLSER
         USING LOCVOLS,R7               INFORM THE ASSEMBLER
         LA    R3,9(0,0)                MAX VOLSERS PER JCL CARD
         MVI   VOLSER,BLANK             CLEAR JCL AREA
         MVC   VOLSER+L'BLANK(MAXLEN),VOLSER
VOLPARM  EQU   *
         MVC   0(L'VOLSER,R8),VSER      MOVE VOLSER TO VOL=SER(XXXXXX,
         MVI   L'VOLSER(R8),COMMA       MOVE IN THE COMMA
         LA    R8,L'VOLSER+L'COMMA(,R8) MOVE ALONG JCL CARD
         BCT   R3,CHKVOLCT              DO WHILE R3 > 0?
         LA    R10,VOLSERS              @ OUTPUT JCL CARD
         CH    R9,=H'1'                 LAST VOLSER TO OUTPUT?
         BNE   PUTCARD                  NO-
         BCTR  R8,0                     POSITION ONTO TO COMMA
         MVI   0(R8),RBRACKET           MOVE IN ')'
PUTCARD  EQU   *
         BALS  R2,JCLCRT                PUT
         MVI   VOLSER,BLANK             CLEAR JCL AREA
         MVC   VOLSER+L'BLANK(MAXLEN),VOLSER
         LA    R8,VOLSER                @ VOLSER OUTPUT AREA
         LA    R3,9(0,0)                MAX VOLSERS PER JCL CARD
CHKVOLCT EQU   *
         LA    R7,LOCARALN(,R7)         NEXT LOCATE VOLSER
         BCT   R9,VOLPARM               DO WHILE R9 > 0?
         CLI   VOLSER,BLANK             RECORD JUST WRITTEN?
         BE    NXTUCB                   YES-
         BCTR  R8,0                     POSITION ONTO COMMA
         MVI   0(R8),RBRACKET           MOVE IN ')'
         LA    R10,VOLSERS              @ OUTPUT JCL CARD
         BALS  R2,JCLCRT                PUT
NXTUCB   EQU   *
         LA    R10,SYSIN                @ SYSIN CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,RESTORE              @ DFDSS RESTORE CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,INDD                 @ DFDSS INPUT CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,OUTDD                @ DFDSS OUTPUT CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,TOLENQF              @ DFDSS TOL(ENQF) CARD
         BALS  R2,JCLCRT                PUT
         LA    R10,EOJ                  @ '//' CARD
         BALS  R2,JCLCRT                PUT
         LA    R4,L'UCBADDR(,R4)        NEXT LOCATE VOLSER
         BCT   R5,UCBSCAN               DO WHILE R5 > 0?
         B     RETURN                   LET'S CLEAN UP AND RETURN
         TITLE 'SYSIN RANGE CHECKS'
SYSINCHK EQU   *
         MVC   SYSCHKEX+2(2),0(R2)      EXIT ADDRESS
         CLI   INPBLANK,BLANK           BLANK?
         BNE   INVINPUT                 NO-INVALID
SYSCHKEX B     0                        RETURN TO THE CALLER
         TITLE 'CREATE JCL FILE'
JCLCRT   EQU   *
         MVC   JCLCRTEX+2(2),0(R2)      EXIT ADDRESS
         PUT   JCLDCB1,(R10)            WRITE
         PUT   JCLDCB2,(R10)            WRITE
JCLCRTEX B     0                        RETURN TO THE CALLER
         TITLE 'SORT UCB ADDRESSES INTO DEV NO ORDER'
SORTDEVN EQU   *
         MVC   SORTDVEX+2(2),0(R2)      EXIT ADDRESS
         ICM   R3,B'1111',UCBPTR        UCB PTR
         USING UCBPLST,R3               INFORM THE ASSEMBLER
         ICM   R5,B'1111',UCBNENT       NO OF UCB ADDRESSES
         BCTR  R5,0                     -1
         LA    R4,UCBADDR               @ UCB ADDRESSES
         LA    R7,L'UCBADDR(,R4)        NEXT UCB ADDRESS
SORTPOS  EQU   *
         LR    R9,R5                    NO OF ENTRIES TO SCAN
         ICM   R6,B'1111',0(R4)         @ OF UCB
SORTNAME EQU   *
         ICM   R8,B'1111',0(R7)         @ OF UCB
         CLC   4(L'UCBCHAN,R6),4(R8)    = | LOW?
         BNH   INCRR7                   YES-
         XC    0(L'UCBADDR,R4),0(R7)    SWITCH
         XC    0(L'UCBADDR,R7),0(R4)    THE
         XC    0(L'UCBADDR,R4),0(R7)    FIELDS
         ICM   R6,B'1111',0(R4)         @ OF NEW UCB FIELD
INCRR7   EQU   *
         LA    R7,L'UCBADDR(,R7)        NEXT UCB ADDRESS
         BCT   R9,SORTNAME              DO WHILE R9 > 0?
         LA    R4,L'UCBADDR(,R4)        MOVE DOWN THE TABLE
*                                       ONE AT A TIME
         LA    R7,L'UCBADDR(,R4)        NEXT UCB ADDRESS
         BCT   R5,SORTPOS               DO WHILE R5 > 0?
SORTDVEX B     0
         TITLE 'CONVERT RANGE TO BINARY'
* 0001 R= ODD
* 0010 L= EVEN
* 0011 R= ODD
* 0100 L= EVEN
CONVBIN  EQU   *
         MVC   CONVBNEX+2(2),0(R2)      EXIT ADDRESS
CVB      EQU   *
         SR    R5,R5                    ZEROIZE
         IC    R5,0(R4)                 PICK UP RANGE 1 BYTE
         N     R5,=X'0000000F'          FORCE HIGH NIBBLE OFF
         SLL   R5,1(0)                  X 2
         CLI   0(R4),C'F'               NUMERIC?
         BH    NUMERIC                  YES-
         LA    R3,ALPHATAB              @ ALPHA TABLE
         B     CONVB                    CONVERT TO BINARY
NUMERIC  EQU   *
         LA    R3,NUMTAB                @ NUMERIC TABLE
CONVB    EQU   *
         AR    R3,R5                    POSITION IN TABLE
         STC   R7,BYTE                  LOW BYTE OF LENGTH
         TM    BYTE,ODDNO               LENGTH ODD?
         BNO   EVEN                     NO- EVEN
ODD      EQU   *
         OC    0(1,R6),0(R3)            FORCE HIGH NIBBLE
         LA    R6,1(,R6)                NEXT BYTE IN OUTPUT AREA
         B     NEXTBYTE                 KEEP CONVERTING
EVEN     EQU   *
         OC    0(1,R6),1(R3)            FORCE LOW NIBBLE
NEXTBYTE EQU   *
         LA    R4,1(,R4)                NEXT BYTE TO CHECK
         BCT   R7,CVB                   DO WHILE R7 > 0?
CONVBNEX B     0                        RETURN TO THE CALLER
         TITLE 'CONVERT BINARY DEVNO TO CHARACTER'
* 0001 R= ODD
* 0010 L= EVEN
* 0011 R= ODD
* 0100 L= EVEN
CONVCHAR EQU   *
         MVC   CONVCHEX+2(2),0(R2)      EXIT ADDRESS
CVC      EQU   *
         SR    R9,R9                    ZEROIZE
         IC    R9,0(R7)                 PICK UP 1 BYTE
         STC   R8,BYTE                  STORE
         TM    BYTE,ODDNO               LENGTH ODD?
         BO    ODDNUM                   YES-
EVENNUM  EQU   *
         SRL   R9,4(0)                  SHIFT INTO LOW NIBBLE
         B     CALPHA                   CHECK FOR ALPHA
ODDNUM   EQU   *
         N     R9,=X'0000000F'          HIGH NIBBLE
CALPHA   EQU   *
         CH    R9,=H'9'                 > 9? (F0-F9)
         BH    ALPHADGT                 YES- ALPHA DIGIT
         STCM  R9,B'0001',0(R10)        MOVE TO CHARACTER AREA
         OI    0(R10),SIGNF             FORCE SIGN TO F
         B     NEXTCHAR                 CHECK NEXT CHAR MAYBE
ALPHADGT EQU   *
         LA    R1,ALPHACNV              POSITION ONTO
         AR    R1,R9                    ALPHA TABLE
         MVC   0(1,R10),0(R1)           MOVE TO CHARACTER AREA
NEXTCHAR EQU   *
         LA    R10,1(,R10)              NEXT POSITION IN OUTPUT AREA
         TM    BYTE,ODDNO               ODD?
         BNO   DECRR8                   NO-
         LA    R7,1(,R7)                NEXT BYTE INSTEAD OF HALF BYTE
DECRR8   EQU   *
         BCT   R8,CVC                   DO WHILE R8 > 0?
CONVCHEX B     0                        RETURN TO THE CALLER
         TITLE 'CHECK UNIT ADDRESS RANGES'
CHKRNGE  EQU   *
         MVC   CHKRNGEX+2(2),0(R2)      EXIT ADDRESS
RNGLOOP  EQU   *
         CLI   0(R4),C'A'               < 'A'?
         BL    DEVRERR                  YES-
         CLI   0(R4),C'G'               < 'G'?
         BL    NXTCHAR                  YES-
         CLI   0(R4),C'0'               < '0'?
         BL    DEVRERR                  YES-
         CLI   0(R4),C'9'               > '9'?
         BH    DEVRERR                  YES-
NXTCHAR  EQU   *
         LA    R4,1(,R4)                NEXT CHARACTER
         BCT   R5,RNGLOOP               DO WHILE R5 > 0?
CHKRNGEX B     0                        RETURN TO THE CALLER
         TITLE 'MATCH FOR A DASD FIT'
DASDFIT  EQU   *
         MVC   DASDFTEX+2(2),0(R2)      EXIT ADDRESS
         USING DEVTABLE,R7              INFORM THE ASSEMBLER
         LA    R6,DEVTABNE              MAX NO OF TABLE ENTRIES
         LA    R15,4(0,0)               SET BAD RETURN CODE
FITIT    EQU   *
         CLC   DEVNO,=C'RR'             ANY MORE DEVICES?
         BE    DASDFTEX                 NO-
         CLI   DEVCHAR,AVAILBLE         AVAILABLE ENTRY?
         BNE   NXTDENT                  NO-
         MVI   DEVCHAR,TAKEN            INDICATE ENTRY TAKEN
         SR    R15,R15                  GOOD RETURN CODE
         B     DASDFTEX                 LET'S GET OUT
NXTDENT  EQU   *
         LA    R7,DEVTABLN(,R7)         NEXT TABLE ENTRY
         BCT   R6,FITIT                 DO WHILE R7 > 0?
DASDFTEX B     0                        EXIT ADDRESS
         TITLE 'EOF ON SYSIN'
SYSINEOF EQU    *
         B      NOINPUT                 MUST INPUT SOMETHING
         TITLE 'ERROR ROUTINES'
OPNERR1  EQU   *
         ABEND 001,DUMP                 OPEN ERROR JCL DCB
OPNERR2  EQU   *
         ABEND 002,DUMP                 OPEN ERROR SYSIN
OPNERR3  EQU   *
         ABEND 003,DUMP                 OPEN ERROR DEVNUMB
EDTERROR EQU   *
         ABEND 004,DUMP                 EDT MACRO ERROR
INVINPUT EQU   *
         ABEND 005,DUMP                 INVALID INPUT
LOCERR   EQU   *
         ABEND 006,DUMP                 LOCATE ERROR
NOINPUT  EQU   *
         ABEND 007,DUMP                 NO INPUT FROM SYSIN
DEVRERR  EQU   *
         ABEND 008,DUMP                 DEVICE RANGE ERROR
DEVTERR  EQU   *
         ABEND 009,DUMP                 DEVICE TYPE ERROR
DEVERR   EQU   *
         ABEND 010,DUMP                 DEVICE TYPE ERROR
TABERR   EQU   *
         ABEND 011,DUMP                 DEVICE TABLE OVERFLOW
DTYPERR  EQU   *
         ABEND 012,DUMP                 DEVICE TYPE ERROR
DEVUNK   EQU   *
         ABEND 013,DUMP                 DEVICE DENSITY UNKNOWN
FITERR   EQU   *
         ABEND 014,DUMP                 NO DEVICE FIT AVAILABLE
         TITLE 'RETURN TO THE INITIATOR'
RETURN   EQU   *
         CLOSE (JCLDCB1,,JCLDCB2,,SYSINDCB,,DEVNUMBS) CLOSE THE FILES
         L     R13,PREVSA               ADDRESS OF THE PREVIOUS SA
         RETURN (14,12),,RC=0           RETURN TO THE INITIATOR
         LTORG
SAVEAREA DC    18F'0'                   REGISTER SAVEAREA
PREVSA   EQU   SAVEAREA+4,4             PREVIOUS SAVEAREA
BYTE     DC    X'00'                    WORKAREA
RANGEIND DC    X'00'                    RANGE INDICATOR
RNGE1    DC    XL2'0000'                RANGE 1 IN BINARY
RNGE2    DC    XL2'0000'                RANGE 2 IN BINARY
CDEVNUM  DC    CL4'0000'                AREA FOR CONVERTED BINARY NO
JOBNO    DC    PL2'0'                   JOB NO
GENZERO  DC    CL8'(0)     '
JOBCARD  DC    CL80'//DISNNNI JOB (P0938,00-0000-0650-00-O),''DSF   '',X
               '
JOBNUMB  EQU   JOBCARD+5,3              JOB NUMBER
JOBID    EQU   JOBCARD+8,1              I/R
UTILITY  EQU   JOBCARD+41,6             UTILITY
DSF      DC    CL6'DSF999'              UTILITY DSF
DFDSS    DC    CL6'DFD999'              UTILITY DFDSS
JOBCARD2 DC    CL80'//  CLASS=Z,MSGCLASS=A,MSGLEVEL=(1,1),TYPRUN=HOLD'
EXECCARD DC    CL80'//XXXXXX EXEC PGM=ADRDSSU,REGION=4096K'
STEPNAME EQU   EXECCARD+2,6            STEPNAME
SYSPRINT DC    CL80'//SYSPRINT DD SYSOUT=*'
DASD     DC    CL80'//DASD     DD UNIT=3380,VOL=(PRIVATE,SER=XXXXXX),DIX
               SP=SHR'
DASDVSER EQU   DASD+41,6                VOLSER
CART     DC    CL80'//CART     DD DSN=BICOD.BACKUP.XXXXXX.G0000V00,DISPX
               =SHR,UNIT=TAPEC,'
CARTVSER EQU   CART+31,6                VOLSER
CARTGDG  EQU   CART+38,8                RELATIVE GENERATION NUMBER
VOLSERS  DC    CL80'// VOL=SER=('
VOLSER   EQU   VOLSERS+12,6
SYSIN    DC    CL80'//SYSIN    DD *'
RESTORE  DC    CL80'      RESTORE FULL          -'
INDD     DC    CL80'            INDDNAME(CART)  -'
OUTDD    DC    CL80'            OUTDDNAME(DASD) -'
TOLENQF  DC    CL80'            TOL(ENQF)'
EOJ      DC    CL80'//'
EXECDSF  DC    CL80'//XXXXXX EXEC PGM=ICKDSF,REGION=512K'
DSFSTNME EQU   EXECDSF+2,6              STEPNAME
INIT     DC    CL80'       INIT -'
UADDR    DC    CL80'            UNITADDRESS(CCUU) -'
CCUU     EQU   UADDR+24,4
MAP      DC    CL80'            MAP               -'
NORECLAM DC    CL80'            NORECLAIM         -'
NOCHK    DC    CL80'            NCHK              -'
NOVERIFY DC    CL80'            NOVERIFY          -'
OWNER    DC    CL80'            OWNER(N2BID)      -'
VOLID    DC    CL80'            VOLID(XXXXXX)     -'
VOLIDUPD EQU   VOLID+18,6
PURGE    DC    CL80'            PURGE             -'
NVAL     DC    CL80'            NVAL              -'
VTOC     DC    CL80'            VTOC(440,0,15)'
DSN      DS    0CL44
         DC    CL13'BICOD.BACKUP.'
VOL      DC    CL6' '
GEN      DC    CL8'(0)     '
         DC    CL17' '
FULLGEN  EQU   GEN+1,8
*************************NUMERIC TABLE*********************************
NUMTAB   DS    0X
         DC    X'00',X'00'
         DC    X'01',X'10'
         DC    X'02',X'20'
         DC    X'03',X'30'
         DC    X'04',X'40'
         DC    X'05',X'50'
         DC    X'06',X'60'
         DC    X'07',X'70'
         DC    X'08',X'80'
         DC    X'09',X'90'
*************************ALPHA TABLE***********************************
ALPHATAB DS    0X
         DC    X'00',X'00'
         DC    X'0A',X'A0'
         DC    X'0B',X'B0'
         DC    X'0C',X'C0'
         DC    X'0D',X'D0'
         DC    X'0E',X'E0'
         DC    X'0F',X'F0'
******************BINARY TO ALPHA CONVERSION TABLE*********************
ALPHACNV DS    0X
         DC    10X'00'
         DC    C'A'
         DC    C'B'
         DC    C'C'
         DC    C'D'
         DC    C'E'
         DC    C'F'
*************************CAMLST MACRO**********************************
LOCPARM  CAMLST NAME,DSN,,LOCAREA
LOCAREA  DS    0D
VOLINFO  DS    265C                    LOCATE AREA
VOLCOUNT EQU   VOLINFO,2               NO OF VOLUMES IN LIST
DEVCODE  EQU   VOLINFO+2,4             DEVICE CODE
VOLSERN  EQU   VOLINFO+6,6             VOLSER
VOLSEQ   EQU   VOLINFO+12,2            VOL SEQ
************************DEVTYPE RETURNED INFO**************************
UCB@     DC    F'0'                    UCB ADDRESS
UCBLSIZE EQU   1                       NO OF UCB ADDRESSES
DEVSIZE  EQU   36                      RETURNED INFO LENGTH
DEVINFO  DS    CL36                    DEVICE INFO AREA
DUCBTYP  EQU   DEVINFO,4               UCB TYPE
DMAXBLK  EQU   DEVINFO+4,4             MAX BLOCK SIZE
DDEVTAB  EQU   DEVINFO+8,12            DEVICE INFO
DDEVTYPE EQU   DEVINFO+8,1             WHAT DASD TYPE
DEVRPS   EQU   DEVINFO+20,4            RPS INFO
*************************SYSIN INPUT AREA******************************
INPUTREC DS    CL80
ESOTERIC EQU   INPUTREC,8              ESOTERIC
INPBLANK EQU   INPUTREC+8,1            BLANK REQUIRED
*************************DEVNUMB INPUT AREA****************************
DEVADREC DS    CL80
DEVRNGE1 EQU   DEVADREC,4              DEVICE RANGE 1
DEVRNGE2 EQU   DEVADREC+5,4            DEVICE RANGE 2
DEVRNGE  EQU   DEVADREC,9              DEVICE RANGE
DEVTYPE  EQU   DEVADREC+10,1           DEVICE TYPE (S,D,T)
DEVDASH  EQU   DEVADREC+4,1            DASH
***********************IEFEB4UV PARAMETERS*****************************
         DS    0F
UNITPARM DS    0XL1
         DC    A(UNITTAB)              UNIT TABLE @
         DC    A(UNITFLAG)             UNIT FLAG
UNITFLAG DC    X'1000'                 FUNCTION CODE 3
UNITTAB  DS    0XL1
         DC    CL8' '                  ESOTERIC NAME
UCBPTR   DC    XL4'0'                  UCB PTR TABLE
         DC    XL4'0'                  UCB PTR TABLE
************************** JCL DCB ************************************
JCLDCB1  DCB   DSORG=PS,DEVD=DA,MACRF=(PM),DDNAME=DRJCL1
JCLDCB2  DCB   DSORG=PS,DEVD=DA,MACRF=(PM),DDNAME=DRJCL2
*********************** SYSIN DCB *************************************
SYSINDCB DCB   DSORG=PS,DEVD=DA,MACRF=(GM),DDNAME=SYSIN,EODAD=SYSINEOF
********************** DEVNUMD DCB ************************************
DEVNUMBS DCB   DSORG=PS,DEVD=DA,MACRF=(GM),DDNAME=DEVNUMB,EODAD=GETDASD
************************ DEVICE TABLES ********************************
SINGLES  DC    300C'R'                 SINGLES
SINGLEN  EQU   *-SINGLES               LENGTH
DOUBLES  DC    300C'R'                 DOUBLES
TRIPLES  DC    300C'R'                 TRIPLES
************************* DCB DSECT ***********************************
         DCBD  DSORG=(QS),DEVD=DA
************************* UCB PLIST ***********************************
UCBPLST  DSECT
UCBSUBP  DS    XL1                     SUBPOOL
UCBSLEN  DS    XL3                     + LENGTH
UCBNENT  DS    XL4                     NO OF UCB ENTRIES
UCBADDR  DS    XL4                     START OF UCB ADDRESSES
************************* LOCATE PARM LIST ****************************
LOCVOLS  DSECT
DEVCDE   DS    XL4                     DEVICE CODE
VSER     DS    CL6                     VOLUME SERIAL NUMBER
VSEQ     DS    CL2                     VOLUME SEQ NO
LOCARALN EQU   *-LOCVOLS               AN ENTRY LENGTH
************************* DEVICE NO DSECT *****************************
DEVTABLE DSECT
DEVNO    DS    XL2                     DEVICE NO
DEVCHAR  DS    X                       DEVICE AVAILABILITY
DEVTABLN EQU   *-DEVTABLE              TABLE ENTRY LENGTH
DEVTABNE EQU   SINGLEN/DEVTABLN        MAX TABLE ENTRIES
************************** UCB DSECT **********************************
UCB      DSECT
         IEFUCBOB LIST=YES,PREFIX=NO
         END   DRECV01


R F Perretta
Systems Consultant (UK)

