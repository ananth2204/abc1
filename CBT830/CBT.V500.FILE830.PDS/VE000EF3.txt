Determining whether a DD is present

Many programs perform different operations depending on which
DDNAMEs are allocated.  A program might, for example,
produce a detail report if a DETAIL DD exists, and/or a summary
report if a SUMMARY DD exists.  The program could issue an
open for a particular DD and, if the open failed, would not use
that DD.  This method, however, relies on a failure (the open) to
determine what action to take.  Also, the failure of the open could
be the result of conditions other that a missing DD statement.

The FINDDD program that follows can be used to determine
whether a DD statement exists.  It is simply passed an eight-
character DDNAME, and passes back a return code indicating
whether or not the DDNAME was found.  With this method,
opens can be by-passed for non-existent DDs.

If you have a program with a supported but undocumented DD,
your program can now check for that DD without advertising it.
With the open method, message IEC130I is issued and contains
the missing DDNAME.  With FINDDD, you could use dummy
DDs to control program operation.  By checking which DDs are
specified in the JCL, your program could take different action, or
produce additional diagnostics.

SAMPLE USE

         .
* CHECK FOR DD BEFORE OPENING
         CALL  FINDDD,(LISTDDN)   IS LISTING DD PRESENT?
         LTR   R15,R15
         BZ    OPNLIST             YES... THEN GO OPEN LISTING DD
         B     NOLIST              NO... THEN SKIP THE OPEN AND LISTING
         .
* CHECK FOR CONTROL INFORMATION IN FORM OF DD
         CALL  FINDDD,(DEBUGDDN)  IS DEBUG DD PRESENT?
         LTR   R15,R15
         BZ    DEBUGON             YES... THEN DEBUG OPTION REQUESTED
         B     DEBUGOFF            NO... THEN NO DEBUGGING TO BE DONE
         .
LISTDDN  DC    CL8'LISTING'
DEBUGDDN DC    CL8'DEBUG'

FINDDD SOURCE CODE

FINDDD   CSECT SCD
* THIS ROUTINE IS USED TO DETERMINE WHETHER A DD IS ALLOCATED.
* THE ROUTINE IS PASSED THE ADDRESS OF A 8 BYTE DDNAME IN REGISTER 1.
* RETURN CODES:
*                   0 - DD WAS FOUND
*                   4 - DD WAS NOT FOUND
         USING FINDDD,R12
         STM   R14,R12,12(R13)
         LR    R12,R15                  SET INITIAL BASE
         L     R5,0(,R1)                GET ADDRESS OF DDNAME TO SEARCH
         L     R4,CVTPTR                FIND CVT ADDRESS
         USING CVTMAP,R4                ADDRESS CVT
         L     R4,CVTTCBP               FIND TCB POINTER
         L     R4,R(,R4)                FIND OUR TCB
         USING TCB,R4                   ADDRESS TCB
         L     R4,TCBJSCB               FIND JOB STEP CONTROL BACCT
         USING IEZJSCB,R4               ADDRESS JSCB
         L     R4,JSCDSABQ              FIND QDB ADDRESS
         USING QDB,R4                   ADDRESS QDB
         CLC   QDBNELMS,=F'0'           ANY DD PRESENT?
         BE    NOTFOUND                 NO...
         L     R4,QDBFELMP              LOAD ADDRESS OF FIRST DSAB
         USING DSAB,R4
LOOP     L     R3,DSABTIOT              LOAD ADDRESS OF TIOT ENTRY
         USING TIOENTRY,R3              ADDRESS TO TIOT
         CLC   TIOEDDNM(8),0(R5)        DDNAME FOUND?
         BE    FOUND                    YES...
NEXTDSAB L     R4,DSABFCHN              LOAD POINTER TO NEXT DSAB ENTRY
         LTR   R4,R4                    END OF CHAIN?
         BNZ   LOOP                     NO...CONTINUE
NOTFOUND L     R15,=F'4'                SET NOT FOUND RETURN CODE
         B     RETURN
FOUND    SR    R15,R15                  SET FOUND RETURN CODE
RETURN   L     R14,12(R13)              RESTORE R14
         LM    R0,R12,20(R13)           RESTORE R0 - R12
         BR    R14                      RETURN TO CALLER
         CVT   DSECT=YES
         IKJTCB
         IEZJSCB
QDB      DSECT
QDBQDB   DS    CL4
QDBATTR  DS    CL2
QDBRV001 DS    CL2
QDBNELMS DS    CL4
QDBFELMP DS    CL4
QDBLELMP DS    CL4
QDBFPTDS DS    CL2
QDBBPTDS DS    CL2
QDBPRSZ  DS    CL2
QDBPRDS  DS    CL2
QDBRV002 DS    CL4
DSAB     IHADSAB
TIOT     DSECT
         IEFTIOT1
         END


	â‚¬ Xephon 1989

