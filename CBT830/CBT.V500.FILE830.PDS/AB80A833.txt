Pattern matching

INTRODUCTION

I have written a small Assembler program to do pattern matching.
This program provides great flexibility when adapted to the FIND
command in ISPF edit or browse modes.  It could also be adapted
to be used on the member selection screens of ISPF, providing a
very powerful form of selection criterion.  I have used it to hunt
through dumps looking for strings where I knew only some
characters.

FUNCTION OF THE PROGRAM

This program receives two strings as parameters.  The first is a
raw string and the second is a pattern.  The program returns with a
return code of zero in register 15 if the string matches the pattern
otherwise it returns with a return code of one.  It can be used to
accept file pattern selection on an ISPF browse or edit selection
screen to extract members selectively from a PDS.  For example,
PDSNAME(??BC*) will select only those members of the PDS
whose third and fourth characters are B and C.

PROGRAM LOGIC

It uses a pseudo-recursion method.  There is only one copy of the
program in storage at any point in time.  The working storage is
all GETMAINed and this keeps each call's variable intact between
each call.  If a character matches, the rest of the raw string and the
rest of the pattern are input to a recursive call to find out if they
match.  If the rest of the string does not match, a check is made to
determine whether the previous character in the pattern is a '*'.  If
it is, we check if the raw string has any characters later in it which
match the pattern.

PATMAT   CSECT
***  ENVIRONMENT     : TSO,MVS/XA                                   ***
*    PARAMETERS      : R1 POINTS TO A LIST OF 4 FULLWORDS WHICH       *
*                      MEAN THE FOLLOWING                             *
*                      WORD1    =   ADDRESS OF RAW STRING             *
*                      WORD2    =   LENGTH OF RAW STRING              *
*                      WORD3    =   ADDRESS OF PATTERN STRING         *
*                      WORD4    =   LENGTH OF PATTERN STRING          *
*    USAGE           :  PATMAT('ABCDEF',6,'*C*',3)   WILL RETURN 1    *
*                       PATMAT('ABCDEF',6,'A??C*',5) WILL RETURN 1    *
*                       PATMAT('ABCDEF'.6.'??B*',4)  WILL RETURN 0    *
*                      A '*' IS A WILD CARD TO ALLOW ZERO OR MORE     *
*                      CHARACTERS IN THE PLACE IT APPEARS             *
*                      A '?' IS A WILD CARD TO ALLOW ANY CHARACTER    *
***                    IN IT'S LOCATION.                            ***
         USING PATMAT,R12          *USE 12 AS BASE REGISTER
         USING PROGSTOR,R13        *USE 13 AS GETMAIN STORAGE BASE
BEGPROG  STM   R14,R12,12(R13)     *SAVE PREVIOUS CALL'S REGISTERS
         LR    R12,R15             *ESTABLISH BASE
         LR    R2,R1               *SAVE REGISTER 1= PARM LIST
         GETMAIN R,LV=1024         *GET 1K OF WORKING STORAGE
         LTR   R15,R15             *HAVE WE GOT IT?
         BNZ   NOMAIN
         LA    R1,0(R1)            *CLEAR HI ORDER BYTE OF RETURNED ADDR
         ST    R1,8(R13)           *CHAIN FORWARD POINTER
         ST    R13,4(R1)           *CHAIN BACKWARD POINTER
         LR    R13,R1              *R13 WILL POINT TO CURRENT STORAGE
         LR    R1,R2               *RESTORE R1
         LTR   R1,R1               *ANY PARAMETERS AT ALL?
         BZ    MISMATCH            *NO SO RETURN WITH CODE 1
         L     R2,0(R1)            *R2-> RAW STRING
         L     R3,4(R1)            *R3=  LENGTH OF RAW STRING
         L     R4,8(R1)            *R4-> PATTERN STRING
         L     R5,12(R1)           *R5=  LENGTH OF PATTERN
*** IF IT IS END OF THE RAW STRING & THE PATTERN AT THE SAME TIME,  ***
*   THEN BOTH STRINGS MUST HAVE MATCHED.SO TWO ZERO LENGTH STRINGS    *
*** WILL ALWAYS MATCH.                                              ***
         C     R3,=F'0'            *IS IT END OF RAW STRING?
         BH    CONTINUE            *NO SO CONTINUE CHECKING
         C     R5,=F'0'            *IS IT END OF PATTERN?
         BE    MATCH               *PATTERN & RAW ENDED SO MATCH
CONTINUE CLI   0(R4),C'*'          *IS PATTERN A WILD CARD '*' ?
         BNE   NOTSTAR
         C     R5,=F'1'            *IS '*' LAST CHARACTER OF PATTERN?
         BE    MATCH               *THEN RAW MATCHES THE PATTERN
         LA    R6,0                *USE R6 AS AN INDEX INTO RAW STRING
         LR    R7,R2               *POINT R2 TO START OF RAW STRING
LOOP     EQU   *              *DO WHILE THERE IS RAW STRING..
         CR    R6,R3               *IS INDEX > LENGTH OF RAW STRING?
         BH    MISMATCH
         AR    R7,R6               *POINT R7 TO CHARACTER OF INDEX
         CLI   1(R4),C'?'          *IS NXT CHAR IN PATTERN A WILD CARD?
         BE    CHKNEXT             *YES SO MATCH REST OF PATTERN.
         CLC   1(1,R4),0(R7)       *IS CHARACTER IN RAW & PAT SAME?
         BE    CHKNEXT
         B     UPDINDX
CHKNEXT  LA    R8,1(R7)            *POINT TO NEXT CHAR OF RAW
         ST    R8,PARM1A           *STORE INTO PARAMETER LIST
         LR    R8,R3               *GET RAW STRING LENGTH
         SR    R8,R6               *REDUCE BY LENGTH CHECKED
         BCTR  R8,0                *R8 = LENGTH OF REMAINING RAW STRING
         ST    R8,PARM1L           *STORE LENGTH INTO PARAMETER LIST
         LA    R8,2(R4)            *GET ADDRESS OF NEXT CHAR TO MATCH
         ST    R8,PARM2A           *STORE INTO PARAMETER LIST
         LR    R8,R5               *GET LENGTH OF REMAINING PATTERN
         BCTR  R8,0
         BCTR  R8,0
         ST    R8,PARM2L           *STORE PATTERN LENGTH REMAINING
         LA    R1,PARM1A           *POINT R1 TO PARAMETER LIST
         LA    R15,BEGPROG     *DO FROM BEGPROG AS IF SUBROUTINE
         BALR  R14,R15         *AMOUNTS TO A RECURSIVE CALL
         LTR   R15,R15             *DID REST OF PATTERN MATCH?
         BZ    MATCH               *YES SO THE WHOLE PATTERN MATCHED
UPDINDX  LA    R6,1(R6)            *UPDATE CHARACTER INDEX
         B     LOOP        *END OF DO WHILE..
NOTSTAR  C     R3,=F'0'            *IS IT END OF RAW STRING?
         BE    MISMATCH
         CLI   0(R4),C'?'          *IS PATTERN A WILD CARD?
         BE    CHKMORE
         CLC   0(1,R2),0(R4)       *OR CHARACTERS MATCH?
         BE    CHKMORE
         B     MISMATCH
CHKMORE  LA    R6,1(R2)            *GET RAW STRING ADDRESS+1
         ST    R6,PARM1A           *STORE INTO PARAMETER LIST
         LR    R6,R3               *GET RAW STRING LENGTH
         BCTR  R6,0                *REDUCE BY 1
         ST    R6,PARM1L           *STORE INTO PARAMETER LIST
         LA    R6,1(R4)            *DO THE SAME WITH PATTERN
         ST    R6,PARM2A
         LR    R6,R5
         BCTR  R6,0
         ST    R6,PARM2L
         LA    R1,PARM1A           *POINT R1 TO PARAMETER LIST
         LA    R15,BEGPROG     *REDO FROM BEGINNING TREATING THIS
         BALR  R14,R15         *AS A RECURSIVE CALL
         LTR   R15,R15             *DID REST OF STRING MATCH?
         BZ    MATCH
MISMATCH LA    R15,1               *THERE IS A MISMATCH
         B     RETURNF             *RETURN & FREE CURRENT WORK STORAGE
MATCH    LA    R15,0               *STRING & PATTERN MATCH
         B     RETURNF             *RETURN & FREE CURRENT WORK STORAGE
RETURNF  LR    R2,R13              *SAVE CURRENT WORK AREA ADDRESS
         LR    R3,R15              *SAVE RETURN CODE SET BEFORE
         L     R13,4(R13)          *R13 = PREVIOUS CALLS WORKING STORE
         FREEMAIN R,LV=1024,A=(R2)  *FREE THIS CALLS WORKING STORAGE
         LR    R15,R3              *IGNORE ERRORS & RESTORE RETURN CODE
         B     RETURN
NOMAIN   EQU   *
RETURN   L     R14,12(R13)         *RESTORE ALL REGISTERS EXCEPT 15
         LM    R0,R12,20(R13)
         BR    R14                 *RETURN TO CALLER
PROGSTOR DSECT       THIS IS GETMAINED STORAGE & IS POINTED TO BY R13
         LTORG
SAVE     DS    18F
PARM1A   DS    F
PARM1L   DS    F
PARM2A   DS    F
PARM2L   DS    F
         DS    0F
         END


C Sreenath Chary
Technical Consultant
Qantas (Australia)	â‚¬ Xephon 1989

