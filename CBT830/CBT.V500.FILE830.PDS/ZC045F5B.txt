A TSO log-on pre-prompt exit (continued)

This month, we conclude this article by taking a look at the
RACF TSO data extraction routine.


THE RACF TSO DATA EXTRACTION ROUTINE

The RACF TSO data extraction routine is imbedded into the
application selection exit (exit STEXIT15 for users who also
have NCI from Westinghouse).  As this code already ran in the
authorized state there was no problem interfacing with RACF.
The main purpose of this routine is to extract the TSO user
defaults for account number, log-on procedure, region size,
and RACF group name.  User-id/password verification is done
through the RACINIT macro and at the same time the user's
RACF ACEE is created.  The RACINIT call is outside the
routine because, in the NCI exit, this code was already there.
In the following Assembler listing you can find how to set up
the RACINIT interface.  Once this environment is established
it is possible to use the RACXTRT macro to retrieve the TSO-
required items.  The items are moved (in our case) to NCI
global variables which are further used to build the CINIT data
that is passed to TSO.  It should not be too difficult to adapt
this code to your own environment.

*  THIS ROUTINE IS DESIGNED TO RUN AS A SUBROUTINE OF NCI EXIT        *
*  STEXIT15                                                           *
*  IT COLLECTS FROM THE RACF DATABASE:                                *
*  1. TSO DATA: LOGON PROC, REGIONSIZE AND ACCOUNT NUMBER REQUIRED FOR*
*     AUTOMATED TSO LOGON (I.E. WITHOUT TSO PROMPTING WITH THE IBM TSO*
*     LOGON SCREEN)                                                   *
*  2. GENERAL DATA: DEFAULT RACF-GROUP, PASSWORD CHANGE INTERVAL AND  *
*     PASSWORD LAST CHANGED DATE, REQUIRED FOR NCI PROCESSING.        *
*  THE RACF ITMES ARE MOVED TO NCI VARIABLE:                          *
*  1. ACCOUNT NUMBER: MOVED INTO THE NCI-FIELD: &USRACCT IF ABSENT LOW*
*     VALUES ARE MOVED INTO &USRACCT                                  *
*  2. LOGON PROCEDURE: MOVED INTO THE NCI-FIELD: &USRPROC IF ABSENT   *
*     LOW VALUES ARE MOVED INTO &USRPROC                              *
*  3. REGION SIZE: MOVED INTO THE NCI-FIELD: &USRSIZE IF ABSENT LOW   *
*     VALUES ARE MOVED INTO &USRSIZE                                  *
*  4. RACF GROUP: MOVED INTO THE NCI-FIELD: &USRRGRP IF ABSENT LOW    *
*     VALUES ARE MOVED INTO &USRRGRP                                  *
*  5. PASSWORD EXPIRATION INTERVAL                                    *
*  6. PASSWORD LAST CHANGED DATE FROM PASSWORD EXPIRATION DATE AND    *
*     LAST CHANGED DATE. THE NUMBER OF DAYS WHEN PASSWORD WILL EXPIRE *
*     IS CALCULATED AND STORED IN THE NCI-FIELD:&USRXPDT. IF ABSENT   *
*     LOW VALUES ARE MOVED INTO &USRXPDT. THE TSO DATA ITIMES ARE     *
*     PLACED INTO THE CINIT DATA AND APPLIED TO THE TSO COMMAND       *
*     PROCESSOR                                                       *
*  FUNCTION: THE ROUNTINE RECEIVES CONTROL AFTER RACINIT PROCESSING   *
*            (USERID/PSW VERIFICATION)                                *
*  OPERATION: THE OPERATION OF THE ROUTINE IS CONTROLLED BY THE       *
*             PARMETER LIST PASSED TO THIS ROUTINE VIA REG.1          *
* 0 ¦  @USERID   ¦--->¦ 1 ¦   USERID  7                ¦              *
* 4 ¦   @ACEE    ¦--->¦   ACEE    4 ¦                                 *
* 8 ¦ @NCIPARM   ¦--->¦   NCIPARM 4 ¦                                 *
*    ATTRIBUTES:                                                      *
*                  LOCATION:      NCI LOADLIB, AC=1                   *
*                  STATE:         PROBLEM STATE, UPON ENTRY           *
*                  AMODE:         24 BIT                              *
*                  RMODE:         24 BIT                              *
*                  KEY:           KEY 8                               *
*                  TYPE:          REENTRANT,REUSEABLE,REFRESHABLE     *
*    NOTE BECAUSE OF USE OF RACXTRT MACRO THIS ROUTINE CAN ONLY BE    *
*         RMODE=AMODE= 24 BIT                                         *
*  INPUT:     THE OPERATION OF THE MODULE IS CONTROLLED BY THE        *
*             DATA AREA'S POINTED TO BY REGISTER 1 UPON ENTRY         *
*  OUTPUT: R15: 00 ==> ALL OKE                                        *
*               18 ==> RACXTRT MACRO ERROR SEE MSG IFF401I            *
RACFXTRT CSECT , REENTRANT         CSECT NAME DECLARED
* RETURN CODES
RCXTRT   EQU   18                   RETURN CODE
BEGIN    SAVE  (14,12),,RACFXTRT_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING RACFXTRT,R12          SET UP BASE ADDRESSABILITY
         LR    R10,R1                SAVE PARMLIST ADDRESS IN R10
         XR    R11,R11               SET RETURN CODE
         GETMAIN RU,LV=LWORKA,SP=21  GET WORKING STORAGE
         ST    R13,4(R1)             SAVE R13 IN PROG SAVEAREA
         ST    R1,8(R13)             SAVE R1 IN MAINPGM SAVEAREA
         LR    R13,R1                R13 POINTER TO EXITS SAVE AREA
         USING WORKA,R13             USE R13 = BASE INTO EXIT STORAGE
         ST    R10,PLSTPTR           SAVE ADDRESS OF PARMLIST
*  PRIME DESTINATION FIELDS
         MVC   RGRPFLD(L'RGRPFLD),LOWVAL  PRIME RGRP FIELD
         MVC   ACCTFLD(L'ACCTFLD),LOWVAL  PRIME ACCT FIELD
         MVC   PROCFLD(L'PROCFLD),LOWVAL  PRIME PROC FIELD
         MVC   SIZEFLD(L'SIZEFLD),LOWVAL  PRIME SIZE FIELD
         MVC   XPDTFLD(L'XPDTFLD),LOWVAL  PRIME XPDT FIELD
         L     R3,0(R10)             R3 = ADDRESS USERID LENGTH FIELD
         LA    R3,1(R3)              R3 = ADDRESS USERID NAME
         L     R4,4(R10)             R4 = ADDRESS OF ADDRESS OF ACEE
         L     R5,0(R4)              R5 = ADDRESS OF ACEE
DORXTRT  DS    0H                EXTRACT DATA FROM RACF DATABASE
         MVC   RACXTRT(LRXTRTMP),RXTRTMP   COPY RACINIT TEMPLATE
         LA    R1,RACXTRT            R1 POINTS TO PARM LIST
*                                    R3 = USERID NAME ADDRESS
         LA    R4,RXLST              R4 = FIELD LIST
*                                    R5 = ADDRESS OF ACEE
         RACXTRT TYPE=EXTRACT,       EXTRACT USER DATA FROM RACF       X
               RELEASE=1.8,          OTHERWISE IT WON'T WORK           X
               SUBPOOL=21,           STORE RESULT IN MINE SUBPOOL      X
               ENTITY=(R3),                                            X
               FIELDS=(R4),                                            X
               ACEE=(R5),                                              X
               MF=(E,(R1))           CLASS=USER IS DEFAULT
*  R1 POINTS TO A RACXTRT GETM AREA IN SUBPOOL=21
         LTR   R15,R15               RETURN CODE ?
         BNZ   ERRXTRT               ¬=0 SO GOTO ERROR HANDLING
XTRTOKE  DS    0H
         ST    R1,RXTRLPTR           R1 IS SAVE RACXTRT RESULT PTR
         LR    R9,R1                 R9 WILL USED FURTHER
         LR    R10,R1                R10 WILL BE BASE FOR XRACXTRT
         USING XRACXTRT,R10          DSECT
         AH    R9,XOFFSET            CALCULATE START OF FIELDS
*  MOVE DEFAULT/CURRENT CONNECT RACF GROUP
         MVI   RGRPFLD,C' '          BLANC FIELD
         MVC   RGRPFLD+1(L'RGRPFLD-1),RGRPFLD
         MVC   RGRPFLD(L'RGRPFLD),XCONGRP
         DROP  R10                   NO LONGER NEEDED
MVACCNT  DS    0H                    MOVE ACCOUNT INFO
         L     R3,0(R9)              R3 = LENGTH OF ACCOUNT FIELD
         LA    R4,4(R9)              R4 = START OF ACCOUNT FIELD
         LR    R9,R4                 R9 POINTS TO ACCOUNT FIELD TOO
         AR    R9,R3                 R9 POINTS TO NEXT FIELD
         LTR   R3,R3                 IF LENGTH = 0 THEN SKIP
         BZ    MVPROC                I.E. THIS INFO IS NOT IN RACF
         MVC   ACCTFLD(L'ACCTFLD),0(R4) MOVE IN MAX 4 BYTES OF ACCT
MVPROC   DS    0H                    MOVE LOGON PROC
         L     R3,0(R9)              R3 = LENGTH OF PROC FIELD
         LA    R4,4(R9)              R4 = START OF PROC FIELD
         LR    R9,R4                 R9 POINTS TO PROC FIELD TOO
         AR    R9,R3                 R9 POINTS TO NEXT FIELD
         LTR   R3,R3                 IF LENGTH = 0 THEN SKIP
         BZ    MVREGION              I.E. THIS INFO IS NOT IN RACF
         MVC   PROCFLD(L'PROCFLD),0(R4) MOVE IN MAX 8 BYTES OF PROC
MVREGION DS    0H                    MOVE REGION SIZE
         L     R3,0(R9)              R3 = LENGTH OF REGION FIELD
         LA    R4,4(R9)              R4 = START OF REGION FIELD
         LR    R9,R4                 R9 POINTS TO REGION FIELD TOO
         AR    R9,R3                 R9 POINTS TO NEXT FIELD
         LTR   R3,R3                 IF LENGTH = 0 THEN SKIP
         BZ    PSWINT
*  NOTE IF TSO INFO IS ABSENT, REGION VALUE IS STILL RETURNED
*  AS A NEGATIVE NUMBER: FFFFFFFF.
         L     R5,0(R4)              R5 = REGION SIZE IN BIN FORMAT
         LTR   R5,R5
         BZ    PSWINT                IF REGIONSIZE = 0 THEN SKIP
         BM    PSWINT                IF REGIONSIZE = NEGATIVE THEN SKIP
         CVD   R5,PACKWORK           MAKE SIZE VALUE DECIMAL
         UNPK  ZONEDEC(L'ZONEDEC),PACKWORK(8) MAKE IT ALMOST EBCEDIC
         OI    ZONEDEC+L'ZONEDEC-1,X'F0' CORRECT LAST DIGIT
*  MOVE LAST SEVEN BYTES INTO SIZE FIELD
         MVC   SIZEFLD(L'SIZEFLD),ZONEDEC+L'ZONEDEC-L'SIZEFLD
PSWINT   DS    0H                    PICK UP PASSWORD CHANGE INTERVAL
         L     R3,0(R9)              R3 = LENGTH OF PSWINT FIELD
         LA    R4,4(R9)              R4 = START OF PSWINT FIELD
         LR    R9,R4                 R9 POINTS TO PSWINT FIELD TOO
         AR    R9,R3                 R9 POINTS TO NEXT FIELD
         LTR   R3,R3                 IF LENGTH = 0 THEN SKIP
         BZ    STNCIPRM
*   LENGTH OF PSWINT IS ALWAYS ONE SO WE CAN USE IC INSTR.
*   FORMAT IS ONE BYTE BINARY.
         XR    R5,R5                 CLEAR
         IC    R5,0(R4)              R5 = PSWINT IN BIN FORMAT
         CVD   R5,PCKPSWI            MAKE IT PACKED DECIMAL
PSWLDATE DS    0H                    PICK UP PASSWORD LAST CHANGED DATE
         L     R3,0(R9)              R3 = LENGTH OF PSWLDATE FIELD
         LA    R4,4(R9)              R4 = START OF PSWLDATE FIELD
         LTR   R3,R3                 IF LENGTH = 0 THEN SKIP
         BZ    STNCIPRM
*   LENGTH OF PSW LAST CHANGE DATE IS ALWAYS 3.
*   FORMAT: YYDDDS  YY --> DECIMAL (E.G. 90)
*                  DDD --> DECIMAL (E.G. 321)
*                    S --> PACKED DECIMAL SIGN
*   PICK YEAR AND DETERMINE WHETHER IT IS A LEAP YEAR
         XR    R6,R6                 CLEAR R6
         ST    R6,PACKWORK           CLEAR HIGH ORDER PART
         ICM   R6,B'1000',0(R4)      (R6) = YY000000
         SRL   R6,20                 (R6) = 00000YY0
         O     R6,=X'0000000C'       (R6) = 00000YYC => PACKED DEC.
         ST    R6,PACKWORK+4
         CVB   R6,PACKWORK           (R6) = BIN FORMAT OF YY
         XR    R7,R7                 CLEAR R7
         SRDL  R6,2    DIVIDE BY 4   R7 = 00 ==> LEAP YEAR
*   DETERMINE EXPIRATION DATE = LAST CHANGED DATE + INTERVAL
         ZAP   PCKPSWD,=P'0'         CLEAR PCKPSWD FIELD
         MVC   PCKPSWD+6(2),1(R4)    PSW LAST CHANGED DAYS = PACKED
         AP    PCKPSWD,PCKPSWI       LAST CHANGED DATE + INTERVAL
CURRDATE DS    0H                    DETERMINE CURENT DATE
         TIME                       (R1) = DATE IN FORMAT 0CYYDDDF
         LR    R2,R1                 SAVE RESULT IN R2
         N     R1,=X'0000FFFF'       STRIP OFF CURRENT DAY INFO
         ZAP   PACKWORK,=P'0'        CLEAR PACKWORK
         ST    R1,PACKWORK+4
         LR    R1,R2                 ORIGINAL DATE IN R1
         N     R1,=X'00FF0000'       STRIP OFF CURRENT YEAR INFO
         XR    R3,R3                 CLEAR
         ICM   R3,B'0100',0(R4)      LAST CHANGED YEAR IN R3
         CLR   R1,R3                 IF CURRENT YY = LAST CHANGED YY
         BE    CALCXPDT              THEN NO ADAPTION OF CURRENT DDD
*   ADAPT CURRENT DDD AS IF THERE HAS BEEN NO NEW YEAR'S EVE
         AP    PACKWORK,=P'365'      CURRENT DDD = CURRENT DDD + 365
         LTR   R7,R7                 IF LEAP YEAR THEN
         BNZ   CALCXPDT
         AP    PACKWORK,=P'1'        CURRENT DDD = CURRENT DDD + 1
CALCXPDT DS    0H
         SP    PCKPSWD,PACKWORK      PCKPSWD = # EXPDT DAYS
         BNM   CONVXPDT
         ZAP   PCKPSWD,=P'0'         IF NEGATIVE THEN MAKE IS ZERO
CONVXPDT DS    0H
         UNPK  ZONEDEC(L'ZONEDEC),PCKPSWD(8) MAKE IT ALMOST EBCEDIC
         OI    ZONEDEC+L'ZONEDEC-1,X'F0' CORRECT LAST DIGIT
*   MOVE LAST FOUR BYTES INTO EXPDT FIELD
         MVC   XPDTFLD(L'XPDTFLD),ZONEDEC+L'ZONEDEC-L'XPDTFLD
*   MOVE FIELDS INTO NCI VARIABLES
STNCIPRM DS    0H
         L     R4,PLSTPTR            R4 = ADDRESS OF PARMLIST
         L     R5,8(R4)              R5 = ADDRESS NCIPARM
         L     R5,0(R5)              R5 = NCIPARM
         NCDIALOG SET,               RACF GROUP                        X
               PARM=(5),                                               X
               VAR=VUSRRGRP,                                           X
               AREA=RGRPFLD,                                           X
               LEN=L'RGRPFLD
         NCDIALOG SET,               ACCOUNT NUMBER                    X
               PARM=(5),                                               X
               VAR=VUSRACCT,                                           X
               AREA=ACCTFLD,                                           X
               LEN=L'ACCTFLD
         NCDIALOG SET,               LOGON PROC                        X
               PARM=(5),                                               X
               VAR=VUSRPROC,                                           X
               AREA=PROCFLD,                                           X
               LEN=L'PROCFLD
         NCDIALOG SET,               REGION SIZE                       X
               PARM=(5),                                               X
               VAR=VUSRSIZE,                                           X
               AREA=SIZEFLD,                                           X
               LEN=L'SIZEFLD
         NCDIALOG SET,               PASSWORD EXPIRATION DAYS          X
               PARM=(5),                                               X
               VAR=VUSRXPDT,                                           X
               AREA=XPDTFLD,                                           X
               LEN=L'XPDTFLD
         B     RETURN
MOVEWRDS MVC   0(0,R5),0(R4)         MOVE INSTR FROM EX
* EXIT ERROR PROCESSING SECTION                                       *
*  RACF EXTRACT FAILURE
*  REG 15 AND REG 0 TELL WHAT IS WRONG SEE RACF SPL, RACXTRT MACRO
ERRXTRT  DS    0H                  RACXTRT ERROR
         MVC   MESSAGE(LIFF401I),IFF401I      MOVE MSG TO WORK
         L     R3,PLSTPTR            PARMLIST ADDRESS IN R3
         L     R3,0(R3)              R3 = ADDRESS USERID LENGTH FIELD
         LA    R3,1(R3)              R3 = ADDRESS USERID NAME
         MVC   MESSAGE+29(7),0(R3)   INSERT USERID
         LR    R1,R15
         BAL   R8,CONVEBC          CONVERT RACXTRT RC TO EBCEDIC
         MVC   MESSAGE+59(LCONVFLD),CONVFLD     INSERT RET CODE
         LR    R1,R0
         BAL   R8,CONVEBC          CONVERT REASON CODE TO EBCEDIC
         MVC   MESSAGE+74(LCONVFLD),CONVFLD     INSERT RET CODE
         WTO   MF=(E,MESSAGE)      ISSUE WTO MSG
         LA    R11,RCXTRT          SET RETURNCODE
         B     STNCIPRM
* EXIT CLEAN UP SECTION:                                              *
RETURN   DS    0H                  EXIT PROCESSING
*  FREE MAIN RACXTRT GETMAINED AREA IF RACXTRT SERVICE WAS REQUESTED
FREERXTR DS    0H
         L     R1,RXTRLPTR          R1 = START OF RACXTRT GETM AREA
         LTR   R1,R1                IF NO AREA WAS AQUIRED THEN DON'T
         BZ    FREEWKST                FREE IT
         L     R0,0(R1)             R0 = PTR TO SUBPOOL # AND LENGTH
         FREEMAIN R,LV=(0),A=(1)    FREE STORAGE AQUIRED BY RACXTRT
FREEWKST DS    0H
*  FREE MAIN WORKING STORAGE
         LR    R1,R13              ADDRESS OF WORKA IN R1
         L     R13,4(R13)          R13 POINT TO CALLER SAVE AREA
         FREEMAIN RU,LV=LWORKA,A=(1),SP=21  FREE STORAGE
*  RETURN TO CALLER
         L     R14,12(R13)         LOAD R14 WITH RETURN ADDRESS
         LR    R15,R11             SET RC
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,14                RETURN TO CALLER AND SET
*                                  THE CALLERS EXECUTION & ADDRESS MODE
*    INTERNAL ROUTINES                                                *
*   CONVEBC ROUTINE
*   CONVERT R1 CONTENTS INTO EBCDIC
*    ENTRY :    CONVEBC
*    INPUT :    REGISTER 1 ( ONLY RIGHT HALF)
*               REGISTER 8  RETURN ADDRESS
*    OUTPUT:    CONVFLD
*    DESTROYS:  REGISTER: 4,6,7
*    NOTE     : THIS ROUTINE DOES NOT USE CONVENTIONS
CONVEBC  DS    0H
         LA    R4,4                    LOOP COUNTER
         LR    R6,R1                   REASON OR RETURNCD INTO REG 6
RCERRLP  DS    0H
         SRDL  R6,4                    SHIFT R6 THRU R7
         SRL   R7,4                    SHIFT R7 APPEND 0 BEFORE DIGIT
         BCT   R4,RCERRLP              LOOP 4 TIMES
         ST    R7,CONVFLD              PREPARE FOR TR INSTR.
         TR    CONVFLD(LCONVFLD),CONVTAB   CONVERT TO EBCEDIC
*  RETURN TO CALLER
         BR    R8                          RETURN
*                        CONSTANT DEFINITIONS                         *
         LTORG
CONVTAB  DC    C'0123456789ABCDEF'   HEX TO EBCEDIC CONVERSION TABLE
LOWVAL   DC    XL10'0'               LOW VALUES
VUSRRGRP DC    CL8'&&USRRGRP'        NCI VARIABLE NAME: USRRGRP
VUSRACCT DC    CL8'&&USRACCT'        NCI VARIABLE NAME: USRACCT
VUSRPROC DC    CL8'&&USRPROC'        NCI VARIABLE NAME: USRPROC
VUSRSIZE DC    CL8'&&USRSIZE'        NCI VARIABLE NAME: USRSIZE
VUSRXPDT DC    CL8'&&USRXPDT'        NCI VARIABLE NAME: USRXPDT
LSIZEFLD DC    A(L'SIZEFLD)          LENGTH OF SIZEFLD
LXPDTFLD DC    A(L'XPDTFLD)          LENGTH OF XPDTFLD
RXTRTMP  RACXTRT TYPE=EXTRACT,       EXTRACT USER DATA FROM RACF       X
               RELEASE=1.8,          OTHERWISE IT WON'T WORK           X
               SUBPOOL=21,           STORE RESULT IN MINE SUBPOOL      X
               FIELDS=*-*,                                             X
               ENTITY=*-*,                                             X
               ACEE=*-*,                                               X
               MF=L
LRXTRTMP EQU   *-RXTRTMP
RXLST    DC    A(5)                    RACXTRT FIELD SPECIFICATION
         DC    CL8'TACCNT'             DEFAULT ACCOUNT CODE
         DC    CL8'TLPROC'             DEFAULT LOGON PROC
         DC    CL8'TLSIZE'             DEFAULT REGION SIZE
         DC    CL8'PASSINT'            PASSWORD INTERVAL
         DC    CL8'PASSDATE'           PASSWORD LAST CHANGE DATE
* MESSAGE TEMPLATES
IFF401I  WTO   'IFF401I RACFXTRT USERID: ??????? RACXTRT FAILURE, RC = X
               ????, REASON = ????',ROUTCDE=(1,9,11),MF=L
LIFF401I EQU   *-IFF401I
*               GETMAINED DSECT  DEFINITIONS                          *
WORKA    DSECT
SAVEAREA DS    18F     SAVE AREA
PLSTPTR  DS    F       INPUT PARMLIST ADDRESS
RXTRLPTR DS    F       RACXTRT RESULT LIST ADDRESS
PACKWORK DS    D       DOUBLE WORD FOR CVD INSTR.
PCKPSWI  DS    D       DOUBLE WORD FOR PSW INTERVAL
PCKPSWD  DS    D       DOUBLE WORD FOR PSW LAST CHANGE DATE
CONVFLD  DS    F       WORK FIELD: HEX TO EBCEDIC CONV.
LCONVFLD EQU   *-CONVFLD
RACXTRT  RACXTRT TYPE=EXTRACT,       EXTRACT USER DATA FROM RACF       X
               RELEASE=1.8,          OTHERWISE IT WON'T WORK           X
               SUBPOOL=21,           STORE RESULT IN MINE SUBPOOL      X
               ENTITY=*-*,                                             X
               FIELDS=*-*,                                             X
               ACEE=*-*,                                               X
               MF=L
ZONEDEC  DS    ZL10    ZONED/EBCEDIC FOR UNPK INSTR.
RGRPFLD  DS    CL8     RACF USER GROUP FIELD
ACCTFLD  DS    CL4     ACCOUNT DESTINATION FIELD (LIMITED TO MAX 4)
PROCFLD  DS    CL8     PROC    DESTINATION FIELD
SIZEFLD  DS    CL7     SIZE    DESTINATION FIELD
XPDTFLD  DS    CL4     XPDT    DESTINATION FIELD
MESSAGE  DS    CL100   WTO MESSAGE AREA
LWORKA   EQU   *-WORKA LENGTH OF GETMAINED AREA
*  GETMAINED AREA THRU EXITS RACXTRT CALL
XRACXTRT DSECT
XGMDEF   DS    F       SUBPOOL # AND LENGTH
XOFFSET  DS    H       OFFSET TO START TO OPTIONAL FIELDS
XRESERVE DS    18X     RESERVED BYTES
XUSERID  DS    CL8     USERID
XCONGRP  DS    CL8     USERID'S CONNECT GROUP
LXRACXTR EQU   *-XRACXTRT LENGTH OF THIS BLOCK
* LAYOUT OF OPTIONAL FIELDS POINTED TO BY XRACXTRT+XOFFSET
*  ¦ LENGTH DATA1 ¦             ACCOUNT INFO               ¦
*  ¦ LENGTH DATA2 ¦       LOGON PROC          ¦
*  ¦ LENGTH DATA3 ¦       REGION SIZE               ¦
*  ¦ LENGTH DATA4 ¦   PSW INTERVAL  ¦
*  ¦ LENGTH DATA5 ¦   PSW LAST CHANGED DATE      ¦
         END

Notes

1      RACXTRT returns an area that contains the requested
      items which must be FREEMAINed after use.

2      As you can see, the routine does not only extract TSO
      data, it also reads the RACF default user group name, last
      password change date, and password interval.  The RACF
      default group is passed to NCI code, where the last
      password change data and password interval are used to
      calculate the number of days before the password expires,
      which is displayed each time the user signs on to the
      application selection monitor.


GENERAL REMARKS

1      This code is designed for MVS/XA 2.2.0, RACF 1.8,
      TSO/E 1.4, and NCI 2.3.

2      See the TSO/E User Exits and Mods Vol 2 SC28-1380
      manual for a description of the TSO pre-prompt exit
      IKJEFLD.

3      See RACF SPL SC28-1343 for a description of the
      RACINIT and RACXTRT macros.

4      Instead of using the RACINIT and RACXTRT macros one
      could also use the RACROUTE macro, which makes it
      possible to use the code above the 16-megabyte line.  The
      disadvantage of using RACROUTE instead is that it
      returns fewer possible return codes than RACXTRT so that
      problem determination of what actually is wrong is almost
      impossible.

5      During testing of IKJEFLD, I found it very useful to create
      a driver routine which was link-edited to IKJEFLA instead.
      The actual exit code was located in a LINKLIST load
      library under another name (ie IKJTEST) and is shown
      below.  This avoided the need to re-IPL with option CLPA
      after each change of IKJEFLD.

*   THE CODE BELOW IS AN EXAMPLE OF HOW TO CALL THE RACFXTRT
*   ROUTINE. ITS MAIN PERPOSE IS TO ESTABLISH AN ACEE FOR THE
*   RACXTRT MACRO, USED IN RACFXTRT.
*   1. HOUSE KEEPING
*      SAVE CALLER REGISTER
*      GET WORKING STORAGE
*   2. RETRIEVE USERID, PASSWORD AND (OPTIONAL) NEWPASSWORD
*      LOAD USERID AND ITS LENGTH INTO USERIDL
*      LOAD PASSWORD AND ITS LENGTH INTO PASSWDL
*      LOAD NEW PASSWORD AND ITS LENGTH INTO NEWPASSL
         MVC   RAC1(RAC1L),RACDEF     * MOVE IN TEMPLATE
         LA    R4,USERIDL             * POINT TO USERIDL+USERID PARMS
         LA    R5,PASSWDL             * POINT TO PASSWORD PARAMETER
         LA    R7,ACEEADDR            * POINT TO AREA TO SAVE ACEE ADDR
         SR    R6,R6                  * CLEAR A(NEW PASSWORD) PARM
         ICM   R6,1,NEWPASSL          * GET NEW PASSWORD LENGTH
         BZ    NONEWP                 * IF NO NEW PASSWORD TO PROCESS
         LA    R6,NEWPASSL            * POINT TO NEW PASSWORD PARAMETER
NONEWP   DS    0H
         RACINIT USERID=(4),          * LOCATE USERID                  +
               PASSWRD=(5),           * LOCATE PASSWORD                +
               NEWPASS=(6),           * CREATE NEW PWD IF SUPPLIED     +
               ACEE=(7),              * ADDRESS OF ACEE ADDRESS        +
               MF=(E,RAC1)            * EXECUTE FORM FOR REENTRANCY
         LTR   R15,R15                * IF NON ZERO RETCODE THEN ...
         BNZ   EXIT                   *    NO ACEE TO DELETE
* CALL RACFXTRT ROUTINE TO READ THE RACF VARIABLES:
*   1. RACF GROUP
*   2. PASSWORD LAST CHANGED DATE
*   3. PASSWORD INTERVAL CHANCE
*   4. TSO LOGON PROCEDURE
*   5. TSO ACCOUNT NUMBER
*   6. TSO REGION SIZE
INTFRACF DS    0H
         LA    R1,USERIDL
         ST    R1,RXTRTTAB            * USERID ADDRESS TO PARML
         LA    R1,ACEEADDR
         ST    R1,RXTRTTAB+4          * ACEE STORAGE ADDRESS TO PARML
         LA    R1,NCPARM
         ST    R1,RXTRTTAB+8          * NCI PARMLIST ADDRESS TO PARML
         LA    R1,RXTRTTAB            * INPUT FOR RACFXTRT
         CNOP  0,4                    * ALIGN ON FULL WORD
         B     LOADENTR               * BRANCH AROUND ROUTINE ADDR
XTRTROUT DC    V(RACFXTRT)            * TO BE REOLVED BY LKEDIT
LOADENTR DS    0H
         L     R15,XTRTROUT           * LOAD ENTRY POINT
         LTR   R15,R15                * IF NOT RESOLVED THEN SKIP
         BZ    SKIPRXTR
         BALR  R14,R15                * GO TO RACFXTRT ROUTINE
         LTR   R15,R15                * RC CAN BE 00 OR 18
         BNZ   DELACEE                * EXTRACT FAILED
SKIPRXTR DS    0H
* DELETE RACF ACEE
DELACEE  EQU   *
         LA    R7,ACEEADDR            * POINT TO POINTER TO ACEE
         MVC   RAC1(RAC1L),RACDEF     * SET UP DEFAULT RACF PARMS
         RACINIT ENVIR=DELETE,        * DELETE ACEE                    +
               ACEE=(7),              * ADDRESS OF ACEE ADDRESS        +
               MF=(E,RAC1)            * EXECUTE FORM FOR REENTRANCY
EXIT     DS    0H
* FREE WORKING STORAGE - RETURN TO CALLER
RACDEF   RACINIT MF=L
WAREA    DSECT        *  WORKING STORAGE - GETMAINED
         DS    18F                    * REGISTER SAVE AREA
NCPARM   DS    F                      * NCDIALOG PLIST ADDRESS
ACEEADDR DS    F                      * ACEE ADDRESS FROM RACINIT
USERIDL  DS    XL1                    * L'USERID
USERID   DS    CL8                    * USERID FROM PARM LIST.
PASSWDL  DS    XL1                    * L'PASSWORD.
PASSWORD DS    CL8                    * PASSWORD FROM PARM LIST.
NEWPASSL DS    XL1                    * L'NEW PASSWORD.
NEWPASSW DS    CL8                    * NEW PASSWORD FROM PARM LIST.
RXTRTTAB DS    3F                     * RACFXTRT INPUT TABLE
RAC1     RACINIT MF=L                 * RACINIT PLIST
RAC1L    EQU   *-RAC1                 * L'RACINIT PLIST
WAREAL   EQU   *-WAREA
         END


Karel Bastiaansen
Systems Programmer
IFF Nederland BV (The Netherlands)                                     c Xephon

