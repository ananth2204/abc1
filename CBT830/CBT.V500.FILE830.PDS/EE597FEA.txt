How to deal with 'difficult' ghost files


GHOSTBUS REXX EXEC

/*== REXX MVS =======================================================*/
/*  GHOSTBUS - Renames and disposes of uncatalogued files            */
/*             by zapping the vtoc and the vtoc index.               */
/*  Input: Arg1: File name                                           */
/*         Arg2: Volume where uncatalogued file resides              */
/*         Arg3: New File name (with same length as the original)    */
/*         Arg4: Disposition of new file: D-Delete C-Catalog K-Keep  */
/*===================================================================*/
 dasd     = "339¬"                                   /* generic unit */
 pds_exec = "SIS.REXX"                /* pds where this exec resides */
 limite   = 28
 arg arg1 arg2 arg3 arg4 .
 parse source . . progname . . . env .     /* select execution cycle */
 if env = "TSO" then call execucao_tso
                else call execucao_batch
 exit
/*===================================================================*/
 execucao_tso:
 if arg1 = "" then do
    say progname" >>>>> File name?"
    pull arg1 .
    if arg1 = "" then exit
 end
 arg1 = strip(arg1,,"'")
    say progname" >>>>> Volume where it is uncatalogued?"
    pull arg2 .
    if arg2 = "" then exit
 end
 xx = listdsi("'"arg1"'")
 if sysreason ¬= 5 then do          /* if catalogued, check volume */
    if sysvolume = arg2 then do
       say "The file in volume " arg2 "is catalogued!"
       exit
    end
 end
 if arg3 = "" then do
    say progname" >>>>> New name? (must have the same number"
    say "               of characters of the original name)"
    pull arg3 .
    if arg3 = "" then exit
 end
 arg3 = strip(arg3,,"'")
 if length(arg3) ¬= length(arg1) then do
    say "Names must have the same length"
    exit
 end
 if arg3 = arg1 then do
    say "Names cannot be equal!"
    exit
 end
 xx = prompt(off)                 /* check if new name already exists */
 xx = msg(off)
 "free dd(xxxxxxxx)"
 "alloc dd(xxxxxxxx) da('"arg3"') shr"
 if rc=0 then do
    say "Invalid new name; file" arg3 "already exists!"
    "free dd(xxxxxxxx)"
    exit
 end
 if arg4 = "" then do
    say progname" >>>>> Disposition of new file"
    say " (D - DELETE, C - Catalog, K - Keep)"
    pull arg4 .
    select
       when arg4 = "D" then arg4 = "DELETE"
       when arg4 = "C" then arg4 = "CATLG"
       when arg4 = "K" then arg4 = "KEEP"
       otherwise do
          say "Invalid disposition"
          exit
       end
    end
 end
jobnome = userid()".tempjcl"
"alloc da('"jobnome"') dd(jobe) new reuse blksize(8000) lrecl(80),
   recfm(f,b) dsorg(ps) space (1 1) tracks release delete"
if rc ¬= 0 then do; say "Error allocating "jobnome; exit; end
dropbuf
queue "//"userid()"F JOB CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1)"
queue "//*"
queue "//STEP1    EXEC PGM=IEHLIST,REGION=2M"
queue "//SYSPRINT DD DISP=(NEW,PASS),DSN=&&TEMP1,UNIT=VIO,"
queue "//  DCB=(RECFM=FB,LRECL=121,BLKSIZE=2420),SPACE=(CYL,(2,2))="
queue "//DD1      DD DISP=SHR,UNIT="dasd",VOL=SER="arg2
queue "//SYSIN    DD *"
queue "  LISTVTOC DUMP,VOL="dasd"="arg2
queue "/*"
queue "//*"
queue "//STEP2 EXEC PGM=AMASPZAP,REGION=2M,COND=(4,LT,STEP1)"
queue "//SYSPRINT DD DISP=(NEW,PASS),DSN=&&TEMP2,UNIT=VIO,"
queue "//  DCB=(RECFM=FB,LRECL=121,BLKSIZE=2420),SPACE=(CYL,(5,5))="
queue "//SYSLIB   DD DISP=SHR,UNIT="dasd",VOLUME=SER="arg2","
queue "//         DSN=SYS1.VTOCIX."arg2
queue "//SYSIN    DD *"
queue "  ABSDUMP  ALL"
queue "/*"
queue "//*"
queue "//STEP3    EXEC PGM=IRXJCL,REGION=2M,COND=(4,LT,STEP2),"
queue "//         PARM='"progname"'"
queue "//SYSEXEC  DD DISP=SHR,DSN="pds_exec
queue "//TEMP1    DD DISP=(OLD,DELETE),DSN=&&TEMP1"
queue "//TEMP2    DD DISP=(OLD,DELETE),DSN=&&TEMP2"
queue "//VTOCINDX DD DISP=SHR,UNIT="dasd",VOLUME=SER="arg2","
queue "//         DSN=SYS1.VTOCIX."arg2
queue "//OUTPUN   DD SYSOUT=(B,INTRDR),DCB=(LRECL=80,RECFM=F)"
queue "//SYSPRINT DD SYSOUT=*"
queue "//SYSTSPRT DD SYSOUT=*"
queue "//SYSTSIN  DD *"
queue  arg1
queue  arg2
queue  arg3
queue  arg4
queue "/*"
queue "//"
queue ""
"execio * diskw jobe (finis"
submit "'"jobnome"'"
say "Jobs submitted; Answer 'Y' to message AMA117D at console"
return
/*===================================================================*/
 execucao_batch:
 pull arg1 .                               /* get input from systsin */
 pull arg2 .
 pull arg3 .
 pull arg4 .
 arg1h = c2x(arg1)                    /* translate filenames to hexa */
 arg3h = c2x(arg3)
 dropbuf                       /* seek hexa filename in vtoc listing */
 found_vtoc = 0                /* to find the record address         */
 do alpha = 0
    execio 1 diskr temp1
    if rc ¬=0 then leave alpha
    pull linha
    if left(linha,1) ='1' then iterate alpha
    if substr(linha,2,6)='DATE: ' then iterate alpha
    if space(substr(linha,2,44),0) = arg3 then do  /* if new name    */
       found_vtoc = 3                              /* already exists */
       leave alpha                                 /* exit error 3   */
    end
    if space(substr(linha,2,44),0) = arg1 then do  /* found name     */
       found_vtoc = 1
       iterate alpha
    end
    if found_vtoc = 1 then do                      /* seek address   */
       if substr(linha,105,10)¬="          "&,
          substr(linha,95,10)  ="          "&,
          substr(linha,115,5)  ="     " then do
             cylhdr_vtoc = substr(linha,105,10)
             found_vtoc = 2                        /* found address, */
       end                                         /* seek no more   */
    end
 end
 execio 0 diskr temp1 "(finis"
 if found_vtoc = 0 then do
    say "File "arg1" not found in the vtoc of" arg2
    exit 12
 end
 if found_vtoc = 3 then do
    say "File "arg3" already exists in the vtoc of" arg2
    exit 13
 end
 dropbuf
 found_indx = 0                      /* read vtocindex file directly */
 do beta = 1 to 999999               /* to find offset within record */
    execio 1 diskr vtocindx
    if rc ¬= 0 then leave beta
    pull linha
    if substr(linha,1,4)="VIER" then do
       if pos(arg1,linha) > 0 then do             /* file found ?    */
          pos1 = pos(arg1,linha)
          pos1 = pos1+length(arg1)                /* next byte must  */
          if substr(linha,pos1,1) = " " |,        /* be space or x'00*/
             substr(linha,pos1,1) =x2c(00) then do
             numlin = beta                        /* keep number of  */
             poslin = pos(arg1,linha)-1           /* line where found*/
             poshex_a = d2x(poslin)               /* hex offset      */
             if length(poshex_a)//2 ¬=0 then,     /* make even number*/
                poshex_a = "0"poshex_a
             found_indx = 1
             leave beta
          end
       end
    end
 end
 execio 0 diskr temp2 "(finis"
 if found_indx = 0 then do
    say "File "arg1" not found in SYS1.VTOCIX of" arg2
    exit 14
 end
 dropbuf                               /* seek vtocindex dump        */
 lines = 0                             /* to find the record address */
 cylhdr_indx = 0
 do gama = 0
    execio 1 diskr temp2
    if rc ¬= 0 then leave gama
    pull linha
    if left(linha,10) ¬= " **CCHHR- ",
       then iterate gama
    lines = lines + 1                  /* increase counter of CCHHR  */
    if lines = numlin then do          /* if counter = line where the*/
       cylhdr_indx = word(linha,2)     /* file was found, get address*/
       leave gama
    end
 end
 execio 0 diskr temp2 "(finis"
 if cylhdr_indx = 0 then do
    say "File "arg1" not found in SYS1.VTOCIX DUMP of" arg2
    exit 15
 end
 if length(arg1) > limite then do        /* if hex name does not fit */
    split_name = 1                       /* in one line, split it    */
    limite2 = limite*2
    arg1h_a = left(arg1h,limite2)
    arg1h_b = substr(arg1h,limite2+1)
    arg3h_a = left(arg3h,limite2)
    arg3h_b = substr(arg3h,limite2+1)
    poshex_b= d2x(poslin+limite)
    if length(poshex_b)//2 ¬=0 then,
       poshex_b = "0"poshex_b
 end
 else do                                          /* no split needed */
    split_name = 0
    arg1h_a = arg1h
    arg3h_a = arg3h
 end
queue "//"userid()"F JOB CLASS=A,MSGCLASS=X,"
queue "//  MSGLEVEL=(1,1),NOTIFY="userid()
queue "//*"
queue "//*======= VTOC RENAME "
queue "//*"
queue "//XSTEP1 EXEC PGM=AMASPZAP,REGION=2M"
queue "//SYSPRINT DD SYSOUT=* "
queue "//SYSLIB   DD DISP=SHR,DSN=FORMAT4.DSCB,UNIT="dasd","
queue "//            VOLUME=SER="arg2
queue "//SYSIN    DD * "
queue "  CCHHR   "cylhdr_vtoc
queue "  VER   00 "arg1h_a
if split_name = 1 then queue "  VER   "d2x(limite) arg1h_b
queue "  REP   00 "arg3h_a
if split_name = 1 then queue "  REP   "d2x(limite) arg3h_b
queue "/* "
queue "//*"
queue "//*======= VTOC INDEX FILE RENAME "
queue "//*"
queue "//XSTEP2 EXEC PGM=AMASPZAP,REGION=2M,COND=(1,LT,XSTEP1)"
queue "//SYSPRINT DD SYSOUT=* "
queue "//SYSLIB   DD DISP=SHR,UNIT="dasd",VOLUME=SER="arg2","
queue "//            DSN=SYS1.VTOCIX."arg2
queue "//SYSIN    DD * "
queue "  CCHHR   "cylhdr_indx
queue "  VER  "poshex_a arg1h_a
if split_name = 1 then queue "  VER  "poshex_b arg1h_b
queue "  REP  "poshex_a arg3h_a
if split_name = 1 then queue "  REP  "poshex_b arg3h_b
queue "/* "
queue "//*"
queue "//*======= DISPOSE OF RENAMED FILE"
queue "//*"
queue "//XSTEP3 EXEC PGM=IEFBR14,REGION=1M,COND=(1,LT,XSTEP1)"
queue "//SYSPRINT DD SYSOUT=* "
queue "//DD1      DD DISP=(OLD,"arg4"),"
queue "//            UNIT="dasd",VOLUME=SER="arg2","
queue "//            DSN="arg3
queue "//"
queue ""
execio "*" diskw outpun "(finis"
return


Luis Paulo Figueiredo Sousa Ribeiro
Systems Programmer
Edinfor (Portugal)                     c Xephon 1996

