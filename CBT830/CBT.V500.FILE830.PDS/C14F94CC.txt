Full screen LISTCAT display (continued)

This month, we conclude this article by publishing the remaining
source code for the program, VSAMINFO.

***      Extract component information      ***
COMPFND2 MVC   $COMTYPE+3(5),3(R2)
COMPFND3 MVC   $COMNAME(44),16(R2)
         MVI   DISPLAY,X'FF'
GETLOOP  BAL   R10,GETAWS
         CLC   7(8,R2),=C'EXTENTS:'
         BE    NEXTPART
         CLC   5(6,R2),=C'IN CAT'
         BE    #CATALOG
         CLC   36(8,R2),=C'CREATION'
         BE    #CRDATE
         CLC   36(8,R2),=C'EXPIRATI'
         BE    #EXDATE
         CLC   7(6,R2),=C'KEYLEN'
         BE    #KEYLEN
         CLC   7(3,R2),=C'RKP'
         BE    #RKP
         CLC   7(5,R2),=C'AXRKP'
         BE    #AXRKP
         CLC   7(8,R2),=C'SHROPTNS'
         BE    #SHROPTS
         CLC   7(10,R2),=C'SPACE TYPE'
         BE    #SPACE1
         CLC   7(9,R2),=C'SPACE PRI'
         BE    #SPACE2
         CLC   7(9,R2),=C'SPACE SEC'
         BE    #SPACE3
         CLC   7(6,R2),=C'VOLSER'
         BE    #VOLSER
         CLC   7(9,R2),=C'REC TOTAL'
         BE    RECTOTAL
         CLC   7(9,R2),=C'REC DELET'
         BE    RECDELET
         CLC   7(9,R2),=C'REC INSER'
         BE    RECINSER
         CLC   7(9,R2),=C'REC UPDAT'
         BE    RECUPDAT
         CLC   7(9,R2),=C'REC RETRI'
         BE    RECRETRI
         B     GETLOOP
RECTOTAL MVC   $RECORDS(9),22(R2)
         MVC   $CISPLIT(6),54(R2)
         MVC   $EXCPS(9),80(R2)
         B     GETLOOP
RECDELET MVC   $DELETES(9),22(R2)
         MVC   $CASPLIT(6),54(R2)
         MVC   $EXTENTS(5),84(R2)
         B     GETLOOP
RECINSER MVC   $INSERTS(9),22(R2)
         B     GETLOOP
RECUPDAT MVC   $UPDATES(9),22(R2)
         B     GETLOOP
RECRETRI MVC   $READS(9),22(R2)
         B     GETLOOP
#CATALOG MVC   $CATALOG(44),16(R2)
         B     GETLOOP
#CRDATE  MVC   $CRDATE(6),54(R2)
         B     GETLOOP
#EXDATE  MVC   $EXDATE(6),54(R2)
         B     GETLOOP
#KEYLEN  MVC   $KEYLEN(5),26(R2)
         MVC   $AVLRECL(5),55(R2)
         MVC   $BUFFSP(6),83(R2)
         MVC   $CISIZE(5),113(R2)
         B     GETLOOP
#AXRKP   MVC   $RKP+5(5),26(R2)
         B     GETLOOP
#RKP     MVC   $RKP(10),26(R2)
         MVC   $MXLRECL(5),55(R2)
         B     GETLOOP
#SHROPTS MVC   $OPT1(53),7(R2)
         MVC   $OPT2(53),65(R2)
         BAL   R10,GETAWS
         MVC   $OPT3(53),7(R2)
         MVC   $OPT4(53),65(R2)
         B     GETLOOP
#SPACE1  MVC   $ALLOC(8),23(R2)
         B     GETLOOP
#SPACE2  MVC   $PRIME(5),26(R2)
         B     GETLOOP
#SPACE3  MVC   $SECND(5),26(R2)
         B     GETLOOP
#VOLSER  MVC   $VOLSER(6),25(R2)
         B     GETLOOP
***      Display component information      ***
NEXTPART EQU   *
ENDINPUT CLI   ERROR,X'FF'             | If IDCAMS error occurred
         BE    TERMIN                  | return
         CLI   DISPLAY,X'FF'           | If no display pending
         BNE   TERMIN                  | return
         MVI   RESPONS2,C' '           | Clear message line
         MVC   RESPONS2+1(59),RESPONS2
         CLI   5(R7),X'FF'             | If last entry
         BE    NOMSG                   | then no message
         MVC   RESPONS2(31),=CL31'Press ENTER for xxxxx component'
         MVC   RESPONS2+16(5),5(R7)
NOMSG    TPUT  @CLEAR,L'@CLEAR,FULLSCR
         TPUT  SCREEN2,SLEN2,FULLSCR
TGET2    TGET  INPUT,80,ASIS
         CLI   INPUT,PA2
         BE    TERMIN
         CLI   INPUT,CLEAR
         BE    TERMIN
         CLI   5(R7),X'FF'             | If last entry
         BE    TERMIN                  | then terminate
         LA    R7,5(R7)                | Point to next component type
         MVC   SEARCH(5),0(R7)
         B     NEXTSCRN
***      Termination      ***
TERMIN   CLOSE AWS
         CLI   ERROR,X'FF'
         BE    EXIT
         TPUT  @CLEAR,L'@CLEAR,ASIS
         TCLEARQ
EXIT     TPUT  END,L'END
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         XR    R15,R15
         BR    R14
* Subroutine: Get variable length record *
GETAWS   GET   AWS
         LR    R2,R1
         MVI   RECORD,C' '
         MVC   RECORD+1(120),RECORD
         LH    R3,0(R2)
         SH    R3,=H'6'
         LA    R2,5(R2)
         EX    R3,MOVEREC
         LA    R2,RECORD
         CLC   RECORD(7),=CL7'IDCAMS'
         BE    GETAWS
         LA    R1,RECORD
         LA    R3,120
TRIMLOOP CLI   0(R1),C'-'              | Loop to trim dashes
         BNE   NODASH
         MVI   0(R1),C' '
NODASH   LA    R1,1(R1)
         BCT   R3,TRIMLOOP
         BR    R10
* Error routine: Parameter missing or invalid *
NOPARM   TPUT  @ERROR,L'@ERROR
         B     EXIT
***      Dynamic allocation error      ***
DYNERROR CVD   R15,$DOUBLE              | Save DYNALLOC return code
         UNPK  ERRORRC(2),$DOUBLE+3(2)  | Unpack return code
         OI    ERRORRC+1,X'F0'          | Make printable
         USING S99RB,R3                 | Base reg
         UNPK  ERRCODE,S99ERROR(3)      | Unpack error code
         TR    ERRCODE,HEXTOCHR         | Translate to EBCDIC
         MVI   ERRCODE+L'ERRCODE-1,C' ' | Blank garbage byte
         UNPK  ERRINFO,S99INFO(3)       | Unpack info code
         TR    ERRINFO,HEXTOCHR         | Translate to EBCDIC
         MVI   ERRINFO+L'ERRINFO-1,C' ' | Blank garbage byte
         DROP  R3
         TPUT  DYNMESS,80
         B     EXIT
***      DATA AREAS      ***
SAVEAREA DS    18F
MOVEDSN  MVC   VSAMDSN(0),2(R1)         | Executed instruction
MOVEREC  MVC   RECORD(0),0(R2)          | Executed instruction
AWS      DCB   DDNAME=AMSPRINT,DSORG=PS,MACRF=GL,EODAD=ENDINPUT,       X
               RECFM=VBA,LRECL=125,BLKSIZE=629
AMSIN    DCB   DDNAME=AMSIN,DSORG=PS,MACRF=PM,                         X
               RECFM=FB,LRECL=80,BLKSIZE=80
$DOUBLE  DS    D
RECORD   DS    CL121
#TYPE    DC    CL3' '
DISPLAY  DC    X'00'
#MORE    DC    X'00'
ERROR    DC    X'00'
SEARCH   DC    CL5' '
$COMPS   DC    25X'FF'
@SPACES  DC    CL44' '
@ERROR   DC    C'VSAMINFO: Missing or invalid parm field'
@CLEAR   DC    X'C31140403C5D7F40'
END      DC    CL60'VSAMINFO program terminated'
* Format of first screen
SCREEN1  DC    X'C211C1501DE8'
RESPONS1 DC    CL60' ',X'11C2601D60'
         DC    CL30' ',C'DATA SET INFORMATION'
         DC    X'11C540'
$TYPE    DC    C'     CLUSTER       ===>',X'1DE8'
$NAME    DC    CL44' ',X'1D60',X'11C650'
         DC    C'     CATALOG       ===>',X'1DE8'
$CATNAME DC    CL44' ',X'1D60',X'11C760'
         DC    C'     VOLSER        ===>',X'1DE8'
$VOL0    DC    CL6' ',X'1D60',X'11C8F0'
         DC    C'     ATTRIBUTES    ===>',X'1DE8'
$ATTRIB0 DC    CL50' ',X'1D60',X'114B50'
         DC    C'          ASSOCIATIONS      '
         DC    X'114C60'
         DC    C'          ------------------'
         DC    X'1DE8',X'114DF0'
$ASSOC1  DC    CL70' ',X'114F40'
$ASSOC2  DC    CL70' ',X'115050'
$ASSOC3  DC    CL70' ',X'11D160'
$ASSOC4  DC    CL70' ',X'11D2F0'
$ASSOC5  DC    CL70' ',X'11D440'
$ASSOC6  DC    CL70' ',X'11D550'
$ASSOC7  DC    CL70' ',X'11D660'
$ASSOC8  DC    CL70' ',X'11D7F0'
$ASSOC9  DC    CL70' ',X'11D940'
$ASSOC10 DC    CL70' ',X'115A50'
$ASSOC11 DC    CL70' ',X'115B60'
$ASSOC12 DC    CL70' ',X'115CF0'
$ASSOC13 DC    CL70' ',X'11404013'
SLEN1    EQU   *-SCREEN1
* Format of subsequent screens
SCREEN2  DC    X'C211C1501DE8'
RESPONS2 DC    CL60' '
         DC    X'11C2601D60',CL30' '
         DC    C'DATA SET INFORMATION',X'11C540'
$COMTYPE DC    C'   XXXXX COMPONENT ===>',X'1DE8'
$COMNAME DC    CL44' ',X'1D60',X'11C650'
         DC    C'     VOLUMES       ===>',X'1DE8'
$VOLSER  DC    CL6' ',X'1D60',X'11C760'
         DC    C'     CATALOG       ===>',X'1DE8'
$CATALOG DC    CL44' ',X'1D60',X'114A40'
         DC    C'     ALLOCATION    ===>',X'1DE8'
$ALLOC   DC    CL8' ',X'1D60',CL10' '
         DC    C'AVERAGE LRECL ===>',X'1DE8'
$AVLRECL DC    CL5' ',X'1D60',X'114B50'
         DC    C'     PRIMARY SPACE ===>',X'1DE8'
$PRIME   DC    CL5' ',X'1D60',CL13' '
         DC    C'MAXIMUM LRECL ===>',X'1DE8'
$MXLRECL DC    CL5' ',X'1D60',X'114C60'
         DC    C'     SECONDARY     ===>',X'1DE8'
$SECND   DC    CL5' ',X'1D60',CL13' '
         DC    C'CI SIZE       ===>',X'1DE8'
$CISIZE  DC    CL5' ',X'1D60',X'114DF0'
         DC    C'     EXTENTS       ===>',X'1DE8'
$EXTENTS DC    CL5' ',X'1D60',CL13' '
         DC    C'KEY LENGTH    ===>',X'1DE8'
$KEYLEN  DC    CL5' ',X'1D60',X'114FE8'
         DC    C'   RKP           ===>',X'1DE8'
$RKP     DC    CL11' ',X'1D60',X'115050'
         DC    C'     TOTAL RECORDS ===>',X'1DE8'
$RECORDS DC    CL9' ',X'1D60',CL6' '
         DC    C'   BUFFER SPACE  ===>',X'1DE8'
$BUFFSP  DC    CL11' ',X'1D60',X'11D160'
         DC    C'       DELETED     ===>',X'1DE8'
$DELETES DC    CL9' ',X'1D60',CL9' '
         DC    C'C/I SPLITS    ===>',X'1DE8'
$CISPLIT DC    CL6' ',X'1D60',X'11D2F0'
         DC    C'       INSERTED   ===>',X'1DE8'
$INSERTS DC    CL9' ',X'1D60',CL9' '
         DC    C'C/A SPLITS    ===>',X'1DE8'
$CASPLIT DC    CL6' ',X'1D60',X'11D440'
         DC    C'       UPDATED     ===>',X'1DE8'
$UPDATES DC    CL9' ',X'1D60',X'11D550'
         DC    C'       RETRIEVED   ===>',X'1DE8'
$READS   DC    CL9' ',X'1D60',CL9' '
         DC    C'CREATION DATE ===>',X'1DE8'
$CRDATE  DC    CL6' ',X'1D60',X'11D660'
         DC    C'     EXCP COUNT    ===>',X'1DE8'
$EXCPS   DC    CL9' ',X'1D60',CL9' '
         DC    C'EXPIRY DATE   ===>',X'1DE8'
$EXDATE  DC    CL6' ',X'11D9401D60',CL9' '
$OPT1    DC    CL53' ',X'115A50',CL10' '
$OPT2    DC    CL53' ',X'115B60',CL10' '
$OPT3    DC    CL53' ',X'115CF0',CL10' '
$OPT4    DC    CL53' ',X'11404013'
SLEN     EQU   *-SCREEN2
INPUT    DS    CL80
OPTIONS  DC    H'0,0'
DDNAMES  DC    H'48'
         DC    32X'00'
         DC    CL8'AMSIN',CL8'AMSPRINT'
***      DYNALLOC error message      ***
DYNMESS  DC    CL80' Allocation error '
         ORG   DYNMESS
         DC    C' Allocation error - RETCD='
ERRORRC  DC    CL3' ',C'Error code ='
ERRCODE  DC    CL5' ',C'Info code ='
ERRINFO  DC    CL5' '
         ORG
***      IDCAMS command      ***
COMMAND  DC    CL80' LISTCAT ALL ENTRY('
         ORG   COMMAND+19
VSAMDSN  DC    CL44' '
         ORG
***      Dynamic allocation parameters for AMSPRINT      ***
$$SPRINT DC    A(X'80000000'+$$SPRNTA)
$$SPRNTA DC    AL1(S99RBEND-S99RB,S99VRBAL,S99NOMNT,0)
         DC    Y(0,0),A($$SPRNTX,0,0)
$$SPRNTX DC    A($$DDNM1)          DDNAME
         DC    A($$STAT1)          STATUS
         DC    A($$DISP1)          NORMAL DISPOSITION
         DC    A($$DISP2)          CONDITIONAL DISPOSITION
         DC    A($$UNIT)           UNIT NAME
         DC    A($$TRAX)           TRACKS
         DC    A($$SPC1)           SPACE
         DC    A(X'80000000')      END OF TEXT UNIT LIST
***      Dynamic allocation parameters for AMSIN      ***
$$SYSIN  DC    A(X'80000000'+$$SYSINA)
$$SYSINA DC    AL1(S99RBEND-S99RB,S99VRBAL,S99NOMNT,0)
         DC    Y(0,0),A($$SYSINX,0,0)
$$SYSINX DC    A($$DDNM2)          DDNAME
         DC    A($$STAT1)          STATUS
         DC    A($$DISP1)          NORMAL DISPOSITION
         DC    A($$DISP2)          CONDITIONAL DISPOSITION
         DC    A($$UNIT)           UNIT NAME
         DC    A($$TRAX)           TRACKS
         DC    A($$SPC2)           SPACE
         DC    A(X'80000000')      END OF TEXT UNIT LIST
***      Dynamic allocation of text units      ***
$$DDNM1  DC    Y(DALDDNAM,1,8),CL8'AMSPRINT'
$$DDNM2  DC    Y(DALDDNAM,1,5),CL8'AMSIN'
$$DSN1   DC    Y(DALDSNAM,1,7),CL7'&&PRINT'
$$DSN2   DC    Y(DALDSNAM,1,7),CL7'&&AMSIN'
$$STAT1  DC    Y(DALSTATS,1,1),X'04'
$$DISP1  DC    Y(DALNDISP,1,1),X'04'
$$DISP2  DC    Y(DALCDISP,1,1),X'04'
$$UNIT   DC    Y(DALUNIT,1,8),C'SYSALLDA'
$$TRAX   DC    Y(DALTRK,0)
$$SPC1   DC    Y(DALPRIME,1,3),X'00000F'
$$SPC2   DC    Y(DALPRIME,1,3),X'000001'
HEXTOCHR EQU   *-C'0'
         DC    C'0123456789ABCDEF'
         IEFZB4D0 ,                    SVC99 REQUEST BLOCK
         IEFZB4D2 ,                    SVC99 TEXT UNITS
PA2      EQU   X'6E'
CLEAR    EQU   X'6D'
         END


Paul Beesley
Senior Systems Programmer
Revlon Group (UK)	€ Xephon 1989

