Automatic SDUMP archiving with MVS 4.1


INTRODUCTION

The following exit program was written to automate the
archiving of system dumps (SDUMPs), primarily as a result of
CICS's enthusiasm for filling up all the system dump datasets.
As there are only a limited number of system dump datasets,
when they are all full no more system dumps can be taken by
any address space until at least one is cleared down. As a
result, SDUMPs from CICS or other address spaces may be
lost.

Program IEA911E runs as a Message Processing Facility
(MPF) exit, which is invoked when message IEA911E is
written to the console. This message occurs whenever an
SDUMP is taken. Program IEA911E issues the following
command:

      S DUMPSAVE,N=nn

where nn is the number of the system dump dataset, extracted
from the IEA911E message.


PROGRAM IEA911E SOURCE CODE

******************************************************************
*  DESC  : IEA911E MSG HANDLER                                   *
*          SYSTEM DUMP TAKEN, THIS EXIT ISSUES START CMD TO      *
*          ARCHIVE AND CLEAR A SYSTEM DUMP DATASET               *
*          ASM/LKED TO SYS1.LINKLIB                              *
*          NOTE : SPECIFY SETCODE AC(1)                          *
*                 IN THE LINK EDIT. MUST BE AUTHORIZED.          *
******************************************************************
COMPLETE_DUMPNN EQU 34                 OFFSET TO DUMP NO IN MSG
PARTIAL_DUMPNN  EQU 33                 DITTO FOR PARTIAL DUMP
         IEZVX100
MSGTEXT  DSECT
MSGID    DC    C'IEA911E'
         DS    C
MSG_TYPE DS    CL3                   COM=COMPLETE, PAR=PARTIAL
STORAGE  DSECT
SAVEAREA DS    18F
MGL      MGCRE MF=(L)
MGL_LEN  EQU   *-MGL
CMD      DS    0C
         DC    AL2(CMDLEN)
CMDTXT   DC    C'S DUMPSAVE,N='
CMD_DUMP DC    C'??'
CMDLEN   EQU   *-CMDTXT
CMD_INIT_LEN EQU *-CMD
STRGLEN  EQU   *-STORAGE
IEA911E  AMODE 31
IEA911E  RMODE ANY
IEA911E  CSECT
         SAVE  (14,12)                  SAVE CALLER'S REG
         LR    R12,R15
         USING IEA911E,R12
         L     R10,0(R1)                ADDRESS CTXT PARM AREA
         USING CTXT,R10
         L     R9,CTXTTXPJ              ADDRESS ATTRIBUTES
         USING CTXTATTR,R9
         LA    R8,CTXTTMSG              ADDRESS MSG TEXT
         USING MSGTEXT,R8
         LA    R0,STRGLEN               LENGTH OF WORK AREA
         GETMAIN RU,LV=(R0),SP=230      GET WORK AREA
         LR    R11,R1                   ADDRESS WORK AREA
         USING STORAGE,R11
         ST    R13,SAVEAREA+4           BACK POINTER
         LA    R15,SAVEAREA             MY SAVEAREA
         ST    R15,8(R13)               FWD POINTER
         LR    R13,R15                  MY SAVEAREA IS CURRENT
         MVC   CMD(CMD_INIT_LEN),CMD_INIT    INIT COMMAND AREA
         CLC   MSGID,MSG911E            IF NOT MY MSG
         BNE   RET_TO_CALLER            END
*  CHECK TYPE OF DUMP. DUMP DATASET NUMBER IS AT A DIFFERENT LOCATION
*  IN THE MESSAGE FOR COMPLETE AND PARTIAL DUMPS
         CLC   MSG_TYPE,COMPLETE            CHECK DUMP TYPE
         BE    A_COMPLETE                   COMPLETE DUMP
         MVC   CMD_DUMP,MSGTEXT+PARTIAL_DUMPNN    PICK UP DUMP NO
         B     A_CONTINUE                         CARRY ON
A_COMPLETE DS  0H
         MVC   CMD_DUMP,MSGTEXT+COMPLETE_DUMPNN   PICK UP DUMP NO
A_CONTINUE DS  0H
         MVC   MGL(MGL_LEN),MGL_INIT    INIT PARM AREA
         LA    R2,CMD                   ADDRESS COMMAND AREA
         L     R3,CTXTFCNP              POINTER TO CONSID
         L     R3,0(R3)                 GET CONSOLID
         MGCRE TEXT=(R2),MF=(E,MGL),CONSID=(R3)   ISSUE START CMD
RET_T0_CALLER DS 0H
         L     R13,4(R13)               CALLER'S SAVE AREA
         LA    R0.STRGLEN               LEN TO FREE
         FREEMAIN RU,LV=(R0),A=(R11),SP=230
         LM  R14,R12,12(R13)            RESTORE CALLER'S REG
         BR  R14                        AND END
MSG911E  DC    C'IEA911E'
COMPLETE DC    C'COM'
PARTIAL  DC    C'PAR'
CMD_INIT DS    0C
         DC    AL2(CMDLEN)
         DC    C'S DUMPSAVE,N=??'    START COMMAND TO ARCHIVE
*                                    DUMP AND CLEAR
MGL_INIT MGCRE MF=(L)
         LTORG
         END


ASSEMBLING THE EXIT

IEA911E should be assembled and link edited as an authorized
program to either SYS1.LINKLIB or another authorized library
specified in the LINKLIST.

To link edit as an authorized program, specify SET AC(1) in
the input to the linkage editor.

If LLA is active you may need to issue:

      F LLA.REFRESH

to cause LLA to refresh its directory list in order for MVS to
find the IEA911E program in LINKLIB. You will also need to
do this if you make any changes to the exit after it is active.


ACTIVATING THE EXIT

Create an MPFLSTnn member in SYS1.PARMLIB or update
your current one to include the following statement:

      IEA911E,SUP(NO),USEREXIT(IEA911E)

This tells MVS to invoke the exit program IEA911E whenever
message IEA911E is issued to the console. SUP(NO) prevents
the message from being suppressed so that it is still visible on
the console. Message IEA911E is issued whenever a system
dump is written to the system dump datasets.


ACTIVATING THE MPF LIST

To activate the MPF list and thus the exit program for the
IEA911E message you can:

1      Issue the SET MPF=nn at the console or

2      Include the SET MPF=nn command in a PARMLIB
      (COMMNDnn) member used at IPL time or

3      Specify the MPF suffix on the INIT statement of the
      CONSOLxx member of PARMLIB.


THE ARCHIVE PROCEDURE

The following is the DUMPSAVE procedure, which can be
used to archive and clear a dump dataset.

The sample JCL copies the dump dataset to a GDG. Obviously
you can copy the dump wherever you like.

Note that there is one IPCS directory per dump dataset to
prevent conflicts between dump archives running concurrently.

//DUMPSAVE PROC N=
//*   N= specifies dump dataset number. EG 00,01,02 etc
//ARCHIVE  EXEC PGM=IKJEFT01,REGION=1M,
//         PARM='IPCS'
//SYSTSPRT DD  SYSOUT=*
//IPCSTOC  DD  SYSOUT=*
//IPCSPRNT DD  SYSOUT=*
//IPCSDDIR DD  DISP=SHR,DSN=SYS1.DUMPSAVE.IPCSDDIR.DUMP&N
//DUMP     DD  DISP=SHR,DSN=SYS1.DUMP&N
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSUT2   DD  DSN=BACKUP.DUMP&N(+1),        COPY DUMP TO GDG
//             DISP=(NEW,CATLG,DELETE),
//             UNIT=TAPE,
//             DCB=SYS1.DUMP&N
//SYSTSIN  DD  DISP=SHR,DSN=SYS1.PARMLIB(DUMPSAVE)

The following are the SYS1.PARMLIB(DUMPSAVE)
parameters:

SETDEF DDNAME(DUMP) NOCONFIRM
DROPDUMP DDNAME(DUMP)
COPYDUMP INFILE(DUMP) OUTFILE(SYSUT2) NOPRINT NOCONFIRM CLEAR
DROPDUMP DDNAME(DUMP)
END

These parameters:

1      Set the default dump to that identified by DDNAME
      DUMP and prevent IPCS from requesting conformation to commands.

2      Remove any previous entries for the same dump dataset on
      the directory (in case any previous job using this directory
      failed to clean up).

3      Copy the dump (identified by DDNAME DUMP) to the
      file identified by DDNAME SYSUT2, and clear down the
      source dump when the copy is complete.

4      Clean up the IPCS directory.

5      End IPCS. This is required.


CREATING THE IPCS DIRECTORIES

The following JCL can be used to create the IPCS directories,
one for each system dump dataset. This allows multiple
archives to run concurrently. You could use a single IPCS
directory for all dump archives if you specify DISP=OLD on
the DUMPSAVE procedure; however, this would preclude
concurrent archives as each must wait for the IPCS directory.

//DEFINE   EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
   /*  nn specifies corresponding dump dataset no eg 00,01 etc */
   DEFINE CLUSTER(NAME(SYS1.DUMPSAVE.IPCSDDIR.DUMPnn) +
          VOLUMES(VOLSER)  +
          CYLINDERS(1 1)   +
          KEYS(128 0)      +
          CISZ(4096)       +
          )
/*
//IPCSDDIR EXEC PGM=IKJEFT01,REGION=1M
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  SYSOUT=*
   IPCSDDIR 'SYS1'DUMPSAVE'IPCSDDIR.DUMPnn'
/*


David E Ellis
Senior Systems Programmer (Saudi Arabia)             c Xephon 1993

