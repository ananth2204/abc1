Elapsed time display

The following program can be useful for checking how long a
batch job has been running. The result is placed into a TSO
variable to allow it to be displayed in an ISPF panel. The code
can easily be changed to give elapsed time for started tasks (the
fields to check are documented in the code).

**********************************************************************
* MODULE:   CHEKTIME                                                 *
* FUNCTION: FIND OUT (FROM TSO) HOW LONG A JOB OR STC HAS BEEN       *
*           RUNNING, AND RETURN THE VALUE IN TSO VARIABLE 'ELAPSTIM' *
* METHOD:   SCAN THE ASCBS TO SEE IF JOB/STC IS RUNNING. IF NOT,     *
*           GO BACK WITH RC=4. IF IT IS, EXTRACT THE TIMING DATA     *
*           FROM THE ASCB AND CALCULATE THE ELAPSED TIME, THEN       *
*           CONVERT THIS INTO 'HH:MM:SS' AND PLACE THIS INTO THE     *
*           TSO VARIABLE 'ELAPSTIM'.IF THE JOB IS SWAPPED OUT, THEN  *
*           APPEND THE TIME WITH AN '*'.                             *
* INPUT:    (VIA CPPL)   JOBNAME/STCNAME                             *
* OUTPUT:   RETURN CODE  0  - TIME VALUE LOCATED, AND RETURNED       *
*                        4  - REQUESTED STC/JOB NOT RUNNING          *
*                        8  - NO JOBNAME PASSED, OR JOBNAME TOO LONG *
*                       12  - UNABLE TO UPDATE TSO VARIABLE          *
*           TSO VARIABLE 'ELAPSTIM' - SET BY THE 'IKJCT441' ROUTINE. *
**********************************************************************
CHEKTIME CSECT
CHEKTIME AMODE 31
CHEKTIME RMODE ANY
* HOUSEKEEPING...                                                    *
         BAKR  R14,0                   SAVE CALLER DATA ON STACK
         LR    R12,R15                 GET ENTRY POINT
         USING CHEKTIME,R12            ESTABLISH ADDRESSABILITY
**********************************************************************
* CHECK THAT A JOBNAME HAS BEEN PASSED... PARMS ARE PASSED TO US     *
* IN THE FOLLOWING FORMAT:                                           *
*                   ---------------------------                      *
*                  |XXXX|YYYY|CHEKTIME ZZZZ    |                     *
*                   ---------------------------                      *
* XXXX = 2 BYTE LENGTH OF HEADER + DATA                              *
* YYYY = 2 BYTE LENGTH OF COMMAND NAME + ANY FOLLOWING SPACES        *
* ZZZZ = VARIABLE LENGTH DATA PASSED TO COMMAND (JOBNAME)            *
**********************************************************************
         LR    R3,R1                   GET CPPL POINTER
         L     R2,0(R3)                GET COMMAND BUFFER POINTER
         LH    R4,0(R2)                GET TOTAL LENGTH
         SH    R4,=H'4'                LESS LENGTH OF LENGTH FIELDS
         LH    R5,2(R2)                GET LENGTH OF COMMAND + SPACES
         CR    R4,R5                   IF EQUAL THEN ONLY SPACES...
         BE    SETRC8                  ...PASSED - THAT'S NO GOOD
         LH    R4,=H'4'                GET LENGTH OF LENGTH FIELDS...
         AH    R4,2(R2)                ...ADD LENGTH OF CMD + SPACES
         LH    R6,0(R2)                GET TOTAL LENGTH
         CH    R6,=H'12'               ANY JOBNAME?
         BE    SETRC8                  NO...SET RC=8
         SR    R6,R4                   CALC. LENGTH OF JOBNAME ENTERED
         CH    R6,=H'8'                JOBNAME OK?
         BH    SETRC8                  NO...TOO LONG: SET RC=8
         LH    R4,2(R2)                GET LENGTH OF JOBNAME/SPACES
         LA    R3,4(R4,R2)             POINT TO START OF JOBNAME
         BCTR  R6,0                    LESS 1 FOR 'EX'
         EX    R6,EXMVC                MOVE JOBNAME
         OC    JOBNAME(8),=8X'40'      UPPERCASE XLATE
* SCAN ASCBS TO SEE IF WE HAVE A MATCH ON OUR JOBNAME/STCNAME...    *
         L     R2,16                   GET CVT ADDRESS
         USING CVTMAP,R2               ADDRESSABILITY TO CVT
         L     R2,CVTASVT              GET ASVT ADDRESS
         DROP  R2
         USING ASVT,R2                 ADDRESSABILITY TO ASVT
         L     R5,ASVTMAXU             GET MAX NUMBER OF ADDR SPACES
NEXTASCB DS    0H
         L     R3,ASVTENTY             R3 --> ASCB
         USING ASCB,R3                 ADDRESSABILITY TO ASCB
         CLC   ASCBASCB,=C'ASCB'       CONSTANT PRESENT?
         BNE   NEXTONE                 NO...SKIP THIS ASCB
***-----------------USE THIS TO FIND STARTED TASKS------------------***
***      L     R4,ASCBJBNS *STCNAME*   R4 -> STCNAME FIELD          ***
***-----------------------------------------------------------------***
         L     R4,ASCBJBNI *JOBNAME*   R4 --> JOBNAME FIELD
         LTR   R4,R4                   POINTER TO JOBNAME PRESENT?
         BNZ   GOTIT                   YES..FIND TIMING INFO
         B     NEXTONE
GOTIT    DS    0H
         CLC   0(8,R4),JOBNAME         IS IT OUR JOB?
         BE    CHEKOUT                 YES..SEE IF SWAPPED IN/OUT
NEXTONE  DS    0H
         LA    R2,4(R2)                POINT TO NEXT ASCB
         BCT   R5,NEXTASCB             KEEP LOOKING
         B     SETRC4                  NOT FOUND: GO AND SET RC=4
* IF IT'S SWAPPED OUT WE'LL APPEND AN '*' TO THE TIME...             *
CHEKOUT  DS    0H
         TM    ASCBRCTF,ASCBOUT        SWAPPED OUT?
         BNO   GETTIME                 NO...DON'T WORRY
         MVI   TIMEOUT,C'*'            YES..ADD THE '*'
* CALCULATE TIME. NOTE THAT TIMES ARE 64-BITS, WITH ONLY THE HIGH    *
* ORDER 52-BITS RELEVANT...                                          *
GETTIME  DS    0H
         TIME  STCK,DWORD              GET TOD CLOCK (64 BITS)
         LM    R6,R7,DWORD             LOAD TIME
         SL    R7,ASCBINTS+4           LESS JOB SELECTION TIME
         BC    3,SUBTRTIM              BRANCH IF ANY CARRY
         BCTR  R6,0                    NO CARRY...TAKE 1 OFF
SUBTRTIM DS    0H
         SL    R6,ASCBINTS             LESS JOB SELECTION TIME
CALCTIME DS    0H
         SRDL  R6,12                   MOVE OUT IRRELEVANT BITS
         D     R6,=F'1000000'          DIVIDE BY 1000000: R7=SECONDS
*                                      CALCULATE HOURS
         LA    R1,3600                 3600 SECONDS IN AN HOUR
         XR    R6,R6                   CLEAR R6
         DR    R6,R1                   R7 = HOURS, R6=SECS LEFT OVER
         CVD   R7,DWORD                CONVERT HOURS TO DECIMAL
         UNPK  UNPKFLD(5),DWORD+3(5)
         OI    UNPKFLD+4,X'F0'         SET CORRECT SIGN
         MVC   TIMEHH(2),UNPKFLD+3     MOVE TO HH AREA
*                                      CALCULATE MINUTES/SECONDS
         LA    R1,60                   GET SECONDS IN A MINUTE
         SRDA  R6,32                   SECS LEFT OVER TO R7, CLEAR R6
         DR    R6,R1                   R7=MINUTES, R6=SECS LEFT OVER
         CVD   R7,DWORD                R7 = MINUTES
         UNPK  UNPKFLD(5),DWORD+3(5)
         OI    UNPKFLD+4,X'F0'         SET CORRECT SIGN
         MVC   TIMEMM(2),UNPKFLD+3     MOVE TO MM AREA
         CVD   R6,DWORD                R6 = SECONDS
         UNPK  UNPKFLD(5),DWORD+3(5)
         OI    UNPKFLD+4,X'F0'         SET CORRECT SIGN
         MVC   TIMESS(2),UNPKFLD+3     MOVE TO SS AREA
* CALL 'IKJCT441' TO UPDATE TSO VARIABLE...                         *
PUTVAR   DS    0H
         MVC   VALUE(9),TIME           SET VALUE IN PARMS
         LINK  EP=IKJCT441,            PUT VALUE INTO VARIABLE         X
               PARAM=(ECODE,                                           X
               NAMEPTR,                                                X
               NAMELEN,                                                X
               VALUEPTR,                                               X
               VALUELEN,                                               X
               TOKEN),                                                 X
               VL=1
         LTR   R15,R15                 OK?
         BZ    SETRC0                  YES..GO AND SET RC=0
         B     SETRC12                 NO...SET RC=12
* SET RELEVANT RETURN CODE BEFORE EXIT...                           *
SETRC0   DS    0H
         XR    R15,R15                 SUCCESS!
         B     GO_BACK
SETRC4   DS    0H
         LA    R15,4                   REQUESTED JOB NOT RUNNING
         B     GO_BACK
SETRC8   DS    0H
         LA    R15,8                   NO/INVALID JOBNAME PASSED
         B     GO_BACK
SETRC12  DS    0H
         LA    R15,12                  UNABLE TO UPDATE TSO VARIABLE
         B     GO_BACK
* RETURN WITH RELEVANT RC...                                         *
GO_BACK  DS    0H
         PR    ,
         LTORG
DWORD    DS    D
UNPKFLD  DS    CL5
TIME     DC    C'HH:MM:SS '
TIMEHH   EQU   TIME+0,2
TIMEMM   EQU   TIME+3,2
TIMESS   EQU   TIME+6,2
TIMEOUT  EQU   TIME+8,1
EXMVC    MVC   JOBNAME(0),0(R3)        EXECUTED MVC
JOBNAME  DS    CL8
* IKJCT441 PARMLIST (TSO VARIABLE ACCESS ROUTINE)...                 *
NAME     DC    C'ELAPSTIM'             TSO VARIABLE = ELAPSTIM
NAMELN   EQU   *-NAME                  VARIABLE LENGTH
NAMELEN  DC    A(NAMELN)                  "        "
VALUE    DC    CL9' '                  VALUE
VALUELN  EQU   *-VALUE                 VALUE LENGTH
VALUELEN DC    A(VALUELN)                "      "
NAMEPTR  DC    A(NAME)                 POINTER TO VARIABLE NAME
VALUEPTR DC    A(VALUE)                POINTER TO VARIABLE VALUE
TOKEN    DC    F'0'                    TOKEN (UNUSED HERE)
ECODE    DC    A(TSVEUPDT)             ENTRY CODE FOR 'SET'
         IHAASCB
         IHAASVT
         CVT   DSECT=YES
         IKJTSVT
         END

The following is a sample REXX EXEC to run the program:

/* REXX */
 "CHEKTIME TESTJOB"
 retc = rc
 If retc = 4 Then Do
   say "Job 'TESTJOB' not running"
   Return
 End
 If retc Â¬=0 Then Do
   say "Return Code = "retc
   Return
 End
 "Call 'SYS2.LINKLIB(WAIT)' '1'"
 Say "Elapsed time for job = "elapstim


G Carson (UK)                                     c Xephon 1992

