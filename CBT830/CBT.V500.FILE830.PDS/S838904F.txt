Obtaining absolute generation numbers

One of our systems development personnel queried whether it
was possible to obtain the absolute generation number of a
dataset by entering the relative generation through TSO. There
are various ways of doing this and I developed the following
program to accomplish the operation. This command processor
can be issued from the TSO command line as follows:

      BGDG SYS1.GEN.DATASET(-1)

and produces output similar to this:

      THE FOLLOWING RELATIVE GENERATION:-
      SYS1.GEN.DATASET(-1)
      HAS ABSOLUTE GENERATION:-
      SYS1.GEN.DATASET.G0231V00

The only parameter that is required is a valid relative
generation dataset name. The command returns the output to
the screen.

The command can also be issued from within a TSO CLIST or
a REXX EXEC. The program uses TSO services to create two
TSO variables. These variables can then be retrieved by the
CLIST or REXX EXEC and used to perform further
operations. This variable creation is used by the systems
development personnel in several of our ISPF dialogs. I have
provided examples of a TSO CLIST and a REXX EXEC that
retrieve the variables created by the Assembler program and
write them to the TSO screen.


EXAMPLE OF CLIST INVOCATION

PROC 1 &VAR1
BGDG &VAR1
WRITE &STR(RELATIVE GENERATION = &VGDGDSNI)
WRITE &STR(ABSOLUTE GENERATION = &VGDGDSNO)


EXAMPLE OF REXX INVOCATION

/* REXX */
/*       ********************************************************
/*       * PURPOSE:      TO EXECUTE THE TSO BGDG COMMAND.       *
/*       ********************************************************
ARG VAR1
BGDG VAR1
SAY 'RELATIVE GENERATION = 'VGDGDSNI
SAY 'ABSOLUTE GENERATION = 'VGDGDSNO
EXIT


SOURCE CODE FOR THE BGDG COMMAND PROCESSOR

*        **************************************************************
*        * PURPOSE:      TO RETURN AN ABSOLUTE GENERATION WHEN A      *
*        *               RELATIVE GENERATION IS INPUT.                *
*        **************************************************************
BGDG     CSECT
         SAVE      (14,12)             /* SAVE REGISTERS.            */
         LR        R12,R15             /* LOAD ENTRY POINT.          */
         USING     BGDG,R12            /* ESTABLISH A BASE.          */
         ST        R13,SAVEAREA+4      /* STORE SAVEAREA ADDRESS.    */
         LA        R15,SAVEAREA        /* CHAIN SAVEAREA.            */
         ST        R15,8(R13)          /* CHAIN SAVEAREA.            */
         LR        R13,R15             /* LOAD NEW SAVEAREA.         */
BGDG0010 EQU       *
         L         R2,0(0,R1)          /* LOAD PARAMETERS.           */
         LH        R3,0(0,R2)          /* LOAD LENGTH OF COMMAND.    */
* REG. 3 CONTAINS LENGTH OF INVOKING COMMAND (+4 FOR HEADER WORD).
         SH        R3,=H'04'
* SUBTRACT HEADER-WORD FROM LENGTH.
         SH        R3,2(0,R2)
* REG#3 NOW CONTAINS LENGTH OF OPERAND PORTION.
         LTR       R3,R3                /* R3 ZERO.                  */
         BZ        ERROR                /* YES,ERROR.                */
         AH        2,2(0,R2)            /* INCREMENT R2.             */
         LA        2,4(0,R2)            /* POINT TO OPERANDS.        */
* MAKE UPPER-CASE BY ISSUING FOLLOWING EXECUTE.
         EX        R3,ORCHR             /* OUT OF LINE INSTRUCTION.  */
*        *************************************************************
*        * BGDG0020 SKIPS LEADING SPACES AND PROCESSES COMMAND.      *
*        *************************************************************
BGDG0020 EQU       *
         CLI       0(R2),C' '          /* FIRST CHARACTER SPACE?     */
         BNE       BGDG0030            /* NO,BRNCH EXAMINE COMMAND.  */
         LA        2,1(0,R2)           /* INCREMENT ADDR BY 1.       */
         BCT       R3,BGDG0020         /* LOOP IF NOT END-OF-LINE.   */
         B         ERROR               /* BRNCH TO ERROR.            */
*        *************************************************************
*        * BGDG0030 EXTRACTS INFORMATION FROM THE COMMAND ISSUED.    *
*        *************************************************************
BGDG0030 EQU       *
         LA        R6,0(R2)            /* LOAD START ADDR OF DSN.    */
BGDG0040 EQU       *
         MVC       BGDGIN(44),0(R6)    /* GET INPUT FIELD.           */
         CLC       BGDGIN,=C'       '  /* IS IT BLANK?               */
         BE        ERROR               /* YES,GO FAIL.               */
BGDG0050 EQU       *
         MVC       DSNAME(44),BGDGIN   /* MOVE INPUT TO CAMLST.      */
         LOCATE    CAMLSTL             /* ISSUE LOCATE.              */
         LTR       R15,R15             /* OK?                        */
         BZ        BGDG0060            /* YES, GO AND PROCESS.       */
         B         *+4(R15)            /* BRANCH INTO ERROR MSG TBL. */
         B         ERR4                /* GO ISSUE ERROR MSG.        */
         B         ERR8                /* GO ISSUE ERROR MSG.        */
         B         ERR12               /* GO ISSUE ERROR MSG.        */
         B         ERR16               /* GO ISSUE ERROR MSG.        */
         B         ERR20               /* GO ISSUE ERROR MSG.        */
         B         ERR24               /* GO ISSUE ERROR MSG.        */
         B         ERR28               /* GO ISSUE ERROR MSG.        */
         B         ERR32               /* GO ISSUE ERROR MSG.        */
BGDG0060 EQU       *
         MVC       DSNOUT(44),DSNAME   /* MOVE ABSOLUTE GEN NUMBER.  */
         MVC       VDSNI(44),0(R6)     /* MOVE RELATIVE GEN NUMBER.  */
         MVC       VDSNO(44),DSNOUT    /* MOVE ABSOLUTE GEN NUMBER.  */
         ST        R3,REGSTORE         /* STORE ORIGINAL LENGTH.     */
         TPUT      MSG1,L'MSG1         /* WRITE TO SCREEN.           */
         TPUT      MSG2,L'MSG2         /* WRITE TO SCREEN.           */
         TPUT      (R6),(R3),R         /* WRITE TO SCREEN.           */
         TPUT      MSG2,L'MSG2         /* WRITE TO SCREEN.           */
         TPUT      MSG3,L'MSG3         /* WRITE TO SCREEN.           */
         TPUT      MSG2,L'MSG2         /* WRITE TO SCREEN.           */
         LA        R6,DSNOUT           /* LOAD ADDRESS OF ABSL DSN.  */
         LA        R3,6(R3)            /* POINT TO END OF DSN.       */
         TPUT      (R6),(R3),R         /* WRITE TO SCREEN.           */
         L         R1,X'10'            /* CVT ADDRESS.               */
         USING     CVT,R1              /* MAP CVT.                   */
         L         R1,CVTTVT           /* LOAD R1 WITH CVTTVT FLD.   */
         DROP      R1                  /* RELEASE R1.                */
         USING     TSVT,R1             /* BASE R1 AT TSO TSVT.       */
         MVC       IKJCT441,TSVTVACC   /* ADDR OF VAR UPD RTN.       */
         DROP      R1                  /* RELEASE R1.                */
         LA        R9,PRMLST           /* POINT TO PARMLIST.         */
         L         R8,IKJCT441         /* GET ENTRY ADDR.            */
BGDG0070 EQU       *
         LA        R2,VGDGDSNI         /* DSNAME CLIST VAR.          */
         LA        R3,VDSNI            /* FIELD CONTAINING VALUE.    */
         L         R4,REGSTORE         /* LNGTH OF DSNAME.           */
         BAL       R14,VARSET          /* GO SET CLIST VARIABLE.     */
         LA        R2,VGDGDSNO         /* DSNAME CLIST VAR.          */
         LA        R3,VDSNO            /* FIELD CONTAINING VALUE.    */
         L         R4,REGSTORE         /* LNGTH OF DSNAME.           */
         LA        R4,6(R4)            /* LNGTH OF DSNAME.           */
         BAL       R14,VARSET          /* GO SET CLIST VARIABLE.     */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERROR    EQU       *
         TPUT      ERRMSG1,L'ERRMSG1   /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR4     EQU       *
         TPUT      ERRM4,L'ERRM4       /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR8     EQU       *
         TPUT      ERRM8,L'ERRM8       /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR12    EQU       *
         TPUT      ERRM12,L'ERRM12     /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR16    EQU       *
         TPUT      ERRM16,L'ERRM16     /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR20    EQU       *
         TPUT      ERRM20,L'ERRM20     /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR24    EQU       *
         TPUT      ERRM24,L'ERRM24     /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR28    EQU       *
         TPUT      ERRM28,L'ERRM28     /* ISSUE ERROR MESSAGE.       */
         B         BGDGEXIT            /* BRANCH TO EXIT.            */
ERR32    EQU       *
         TPUT      ERRM32,L'ERRM32     /* ISSUE ERROR MESSAGE.       */
BGDGEXIT EQU       *
         SR        R15,R15             /* ZEROIZE RETURN CODE.       */
         L         R13,4(R13)          /* RELOAD SAVEAREA ADDRESS.   */
         RETURN    (14,12),RC=(15)     /* RETURN TO TSO.             */
ORCHR    OC        0(0,R2),SPCS        /* OUT OF LINE INSTRUCTION.   */
*        *************************************************************
*        * VARSET IS A SUBROUTINE USED TO SETUP EACH CLIST VARIABLE  *
*        * USING THE NECESSARY MODULES.                              *
*        *************************************************************
VARSET   DS        0H
         ST        R2,VNMPTR           /* STORE VARIABLE TO BE SET.  */
         ST        R3,VALPTR           /* VALUE TO BE ASSIGNED.      */
         LA        R3,0(R4,R3)         /* R4 = MAX-LTH.              */
         BCTR      R3,0                /* POINT TO END OF FIELD.     */
VARS0010 DS        0H
         CLI       0(R3),C' '          /* BLANK?                     */
         BNE       VARS0020            /* NO, CARRY ON.              */
         BCTR      R4,0                /* YES,DECREMENT LTH.         */
         BCTR      R3,0                /* YES,POINT TO PREV CHAR.    */
         B         VARS0010            /* LOOP BACK.                 */
VARS0020 DS        0H
         ST        R4,VALULEN          /* STORE LNGTH INTO PRMLIST.  */
         LR        R15,R8              /* POINT TO ROUTINE.          */
         LR        R1,R9               /* POINT TO PARM LIST.        */
         LR        R6,R14              /* SAVE PREV RETURN ADDR.     */
         BALR      R14,R15             /* SET VARIABLE.              */
         BR        R6                  /* RETURN TO MAIN PROGRAM.    */
*        **************************************************************
PRMLST   DC        A(ECODE),A(VNMPTR),A(VNLEN)
         DC        A(VALPTR),A(VALULEN),X'80',AL3(TOKEN)
ECODE    DC        A(TSVEUPDT)   CREATE/UPDATE ENTRY-CODE
VNMPTR   DS        A
VNLEN    DC        F'8'
VALPTR   DS        A
VALULEN  DS        F
TOKEN    DC        A(0)
VDSNI    DS        CL44
VGDGDSNI DC        C'VGDGDSNI'
VDSNO    DS        CL44
VGDGDSNO DC        C'VGDGDSNO'
IKJCT441 DS        A
SAVEAREA DS        18F
REGSTORE DS        F
ERRMSG1  DC        C'ERROR ISSUING COMMAND, PLEASE RETRY'
ERRM4    DC        C'LOCATE MACRO FAILURE - RETURN CODE = 4'
ERRM8    DC        C'LOCATE MACRO FAILURE - RETURN CODE = 8'
ERRM12   DC        C'LOCATE MACRO FAILURE - RETURN CODE = 12'
ERRM16   DC        C'LOCATE MACRO FAILURE - RETURN CODE = 16'
ERRM20   DC        C'LOCATE MACRO FAILURE - RETURN CODE = 20'
ERRM24   DC        C'LOCATE MACRO FAILURE - RETURN CODE = 24'
ERRM28   DC        C'LOCATE MACRO FAILURE - RETURN CODE = 28'
ERRM32   DC        C'LOCATE MACRO FAILURE - RETURN CODE = 32'
MSG1     DC        C'THE FOLLOWING RELATIVE GENERATION:-'
MSG2     DC        C' '
MSG3     DC        C'HAS ABSOLUTE GENERATION:-'
SPCS     DC        C' '
BGDGIN   DC        C'                                            '
DSNOUT   DC        C'                                            '
CAMLSTL  CAMLST    NAME,DSNAME,,AREA
DSNAME   DC        CL44' '
AREA     DS        0D
         DS        265C
         LTORG
         IKJTSVT
         CVT       DSECT=YES
         END


JCL TO ASSEMBLE AND LINK-EDIT BGDG

//STS01V      JOB   (SDTS),'J.BRADLEY',CLASS=A,MSGCLASS=Q,
//            MSGLEVEL=(1,1),NOTIFY=STS01
//*
//ASM1        EXEC  PGM=IEV90,PARM='OBJ,NODECK,XREF(SHORT)'
//SYSLIB      DD    DSN=SYS1.MACLIB,DISP=SHR
//            DD    DSN=SYS1.AMODGEN,DISP=SHR
//            DD    DSN=STS01.BD.MACLIB,DISP=SHR
//            DD    DSN=SYS1.HASPSRC,DISP=SHR
//            DD    DSN=SYS1.ATSOMAC,DISP=SHR
//SYSUT1      DD    UNIT=SYSDA,SPACE=(1700,(600,100))
//SYSUT2      DD    UNIT=SYSDA,SPACE=(1700,(300,50))
//SYSUT3      DD    UNIT=SYSDA,SPACE=(1700,(300,50))
//SYSPRINT    DD    SYSOUT=*
//SYSLIN      DD    UNIT=SYSDA,SPACE=(80,(200,50)),DISP=(,PASS)
//SYSIN       DD    DSN=STS01.BD.SOURCE(BGDG),DISP=SHR
//*
//LKED1       EXEC  PGM=IEWL,PARM=('MAP,LET,LIST,NCAL'),
//            COND=(0,NE,ASM1)
//SYSUT1      DD    UNIT=SYSDA,SPACE=(1024,(50,20))
//SYSPRINT    DD    SYSOUT=*
//SYSLMOD     DD    DSN=STS01.BD.LOAD,DISP=SHR
//SYSLIB      DD    DSN=*.ASM1.SYSLIN,DISP=(OLD,DELETE)
//SYSLIN      DD    *
 INCLUDE SYSLIB
 NAME    BGDG(R)
/*


John Bradley
Senior Technical Support Engineer (UK)                      c Xephon 1992

