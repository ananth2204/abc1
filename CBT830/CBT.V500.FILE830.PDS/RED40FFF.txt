Low-level resource monitoring (continued)

This article is concluded in this month's issue with a look at the JCL
used to assemble and link-edit the module together with a SAS analysis
program used to process EXECUMON SMF records.

EXECUMON is assembled and linked into the load module containing the
CSECT or entry name to be monitored.  The applicable JCL and source are
listed below, with the JCL taking the form of an example with
explanatory footnotes.  Following this is a SAS program which can be
used for reporting purposes.

JCL TO ASSEMBLE AND LINK EXECUMON

//Jobname  JOB job card parameters
//ASMHCL   PROC
//ASM      EXEC PGM=ASMBLR,
//         PARM=(OBJECT,NODECK,'XREF(SHORT)',
//         'SYSPARM(&LMODM,&CSECTM,&CSECTTN,&AMODE,&RMODE)')
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE)=CYL,(1,1))
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DISP=(,PASS),UNIT=VIO,SPACE=(CYL,(1,1)),
//         DCB=BLKSIZE=3200,DSN=&&LOADSET
//LKED     EXEC PGM=IEWL,PARM'AC=1,&LKPARM',COND=(8,LT,ASM)
//SYSLIN   DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//         DD DDNAME=SYSIN
//LMODLIB  DD DSN=&LMODLIB(&LMODM),DISP=SHR
//SYSLMOD  DD DSN=&SYSLMOD(&LMODOUT),DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT DD SYSOUT=*
//         PEND
//ASMHCL   EXEC ASMHCL,
//         LKPARM'LIST,XREF,LET',     See note 1
//         LMODLIB='SYS1.LINKLIB',    See note 2
//         LMODM=IEBCOPY,             See note 3
//         CSECTM=IEBDSCPY,           See note 4
//         CSECTTN=TEMP,              See note 5
//         AMODE=24,RMODE=24,         See note 6
//         SYSLMOD='TEST.LOADLIB',    See note 7
//         LMODOUT=IEBCOPY            See note 8
//ASM.SYSIN DD *

         EXECUMON source goes here

//LKED.SYSIN DD *
 ORDER IEBDSMCA(P)                    See note 9
 ORDER IEBDSCPY
 ENTRY IEBDSCPY
//

Notes

1    Link-edit parameters are those associated with the load module
containing the CSECT or entry name to be monitored.  AC=1 is specified
on the PARM for the LKED step; this is necessary because EXECUMON issues
SYSEVENTs which require authorisation.  Consequently, the output load
module from this assembly and link edit must be placed in a LNKLST
library or an explicitly-authorised private library to ensure that
authorisation is enabled.

2    LMODLIB is the library containing the load module with the CSECT or
entry name to be monitored.

3    LMODM is the load module with the CSECT/entry name to be monitored.

4    CSECTM is the CSECT or entry name to be monitored.

5    CSECTTN is a temporary name to which the CSECT or entry name to be
monitored will be renamed so that EXECUMON may be implanted under the
original name.  The temporary name may be any valid name which does not
appear already as a CSECT or entry name in the load module.  In the
example above, the original IEBDSCPY will be renamed to TEMP, after
which EXECUMON will be given the name IEBDSCPY.  The EXECUMON code will
then call TEMP.

6    The AMODE and RMODE to be assigned are those of the CSECT or entry
name to be monitored.  One way of determining these is with the
widely-distributed user- written 'PDS' facility under TSO; if the
version used supports MVS/XA, then the MAP command will display the
AMODE and RMODE of each CSECT.

7    SYSLMOD is the library to contain the output load module with
EXECUMON implanted.  See note 1 for authorisation requirements.

8    LMODOUT is the name of the output load module.

9    Any additional required linkage editor control statements are
specified here.  An ENTRY statement is almost mandatory to ensure that
control is passed to the proper CSECT or entry name when a load module
is reprocessed.

SAS ANALYSIS PROGRAM

The following program reads from a dataset with a DDNAME of SMF, which contains
the EXECUMON SMF records.

* PROCESS EXECUMON SMF RECORDS *
 DATA      DATA1;
 ADJ=-3;
 INFILE    SMF;
 INPUT
           @005+ADJ            RECTYPE  PIB1.
           @018+ADJ            SUBTYPE  PIB1. @;
 IF        RECTYPE=255 AND SUBTYPE=1;
 INPUT
           @006+ADJ            SMFTIME  SMFSTAMP8.
           @014+ADJ            SMFID    $4.
           @019+ADJ            JOBNAME  $8.
           @027+ADJ            RDRTIME  SMFSTAMP8.
           @035+ADJ            USERID   $8.
           @043+ADJ            JOBID    $8.
           @051+ADJ            JOBSTPGM $8.
           @059+ADJ            JOBSTP   $8.
           @067+ADJ            PGMRNAME $20.
           @087+ADJ            LOADMOD  $8.
           @095+ADJ            CSECT    $8.
           @103+ADJ            CSECTBEG TODSTAMP8.
           @111+ADJ            TCBBEG   MSEC8.
           @119+ADJ            SRBBEG   MSEC8.
           @127+ADJ            IOBEG    P1B4.
           @131+ADJ            CSECTEND TODSTAMP8.
           @139+ADJ            TCBEND   MSEC8.
           @147+ADJ            SRBEND   MSEC8.
           @155+ADJ            IOEND    PIB4.
           @159+ADJ            PAD0     PIB1.
           @160+ADJ            TOTSRVC1 PIB4.
           @164+ADJ            TRANACT1 PIB4.
           @168+ADJ            PERFGRP1 PIB2.
           @170+ADJ            TRANNO1  PIB2.
           @172+ADJ            RESTIME1 PIB4.
           @176+ADJ            CPUSRVC1 PIB4.
           @180+ADJ            IOCSRVC1 PIB4.
           @184+ADJ            MSOSRVC1 PIB4.
           @188+ADJ            SRBSRVC1 PIB4.
           @192+ADJ            PAD1     $8.
           @200+ADJ            TOTSRVC2 PIB4.
           @204+ADJ            TRANACT2 PIB4.
           @208+ADJ            PERFGRP2 PIB2.
           @210+ADJ            TRANNO2  PIB2.
           @212+ADJ            RESTIME2 PIB4.
           @216+ADJ            CPUSRVC2 PIB4.
           @220+ADJ            IOCSRVC2 PIB4.
           @224+ADJ            MSOSRVC2 PIB4.
           @228+ADJ            SRBSRVC2 PIB4.
           @232+ADJ            PAD2     $8.
            ;
           TOTCPU=(TCBEND+SRBEND)-(TCBBEG+SRBBEG);
           TOTIO=IOEND-IOBEG;
           TOTSRVC=TOTSRVC2-TOTSRVC1;
           CPUSRVC=SPUSRVC2-CPUSRVC1;
           SRBSRVC=SRBSRVC2-SRBSRVC1;
           IOCSRVC=IOCSRVC2-IOCSRVC1;
           MSOSRVC=MSOSRVC2-MSOSRVC1;
 FORMAT
           CSECTBEG DATETIME18.
           CSECTEND DATETIME18.
           ;
 PROC SORT    DATA=DATA1; BY DESCENDING TOTCPU;
 PROC PRINT   DATA=DATA1 NOOBS;
              SUM TOTCPU TOTIO TOTSRVC CPUSRVC SRBSRVC IOCSRVC MSOSRVC;
              VAR SMFID JOBNAME JOBID JOBSTP JOBSTPGM LOADMOD CSECT
              CSECTBEG CSECTEND TOTCPU TOTIO
              TOTSRVC CPUSRVC SRBSRVC IOCSRVC MSOSRVC;
 TITLE
 CSECT RESOURCE CONSUMPTION BY CPU UTILIZATION;


     â‚¬ Xephon 1989

