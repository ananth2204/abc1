Analysing the completeness of back-ups

INTRODUCTION

One of the most important functions of the person responsible for
DASD management is to ensure all datasets are getting backed
up in a timely and appropriate manner. I found in my environment
that it was all too often possible to have datasets bypassed in
back-up processing. This left us exposed to situations where
appropriate recovery would not be possible if datasets were
corrupted or lost for any reason. It seemed there was no single
reason for datasets not getting backed up: there was always some
new idiosyncrasy related to the attributes of a dataset, the logic in
back-up processing, bugs in back-up programs, etc. After
manually stumbling across some of these situations, I decided that
an automated procedure was necessary to handle these exceptions
on a daily basis to avoid disaster.

The procedure I've put in place uses both historical back-up data
and current dataset snapshot information to analyse and report on
any problems. The procedure was written specifically for an
environment where DMS is the DASD management software.
The concept is straightforward and could be adapted to other
DASD management software by changing the historical back-up
extracts for datasets and volumes to other appropriate utilities.
Although this is a fairly simplistic approach to the problem, it has
become a vital part of our overall back-up strategy. In discussing
DASD management approaches with other shops, I was surprised
to hear some never did this type of analysis because they assumed
everything was working fine. This prompted me to think others
could benefit from implementing a similar process to ours.

The analysis is executed via an eleven-step JCL procedure
consisting of DMS utilities, sorts, and three customized programs.
The ultimate goal is to determine if there are any datasets in the
system that do not have a current back-up. If any are detected, a
special back-up is executed to ensure a back-up exists. The
analysis is run on a daily basis after all back-up processing is
complete. This allows for just one step, the final one, to be
checked for any potential problems in back-up processing. If there
are no exceptions, everything is fine. If there are exceptions, the
problem is traced back to where the dataset should have been
backed up. Appropriate changes are then made to compensate for
the missed back-up in future runs. Changes can range anywhere
from parameter modifications to the application of PTF fixes.

The first seven steps deal with extracting and manipulating DMS
historical back-up data into a format used to compare against
current snapshot data. This is where shops with other DASD
management software would substitute similar utilities as
appropriate, also making changes to sort and conversion steps to
reflect record layouts. Step 1 executes a DMS utility to extract
information related to active individual dataset back-ups DMS has
available. Since most datasets have many back-ups available, all
but the most recent information for each dataset is discarded in
step 2 via SYNCSORT. Step 3 uses SYNCSORT to reformat and
sort this information by serial number of the tape containing an
individual dataset back-up. Step 4 is a DMS utility to extract all
volume level information. The volume record contains the date
when the back-up was taken. This information is then sorted by
volume serial number in step 5. Step 6 uses a COBOL program
called NOBACK01 to combine dataset and date information into
a single file which is in tape volume serial order. Step 7 sorts the
combined information back to dataset level order. Step 8 invokes
an Assembler program called NOBACK02 containing logic to
DCOLLECT current information for all datasets on the system.
The output of this step is a file of all datasets for which a back-up
should exist. Information for temporary datasets and all but the
first volume of a multi-volume dataset is discarded as not
applicable. Also, since we choose not to back-up VSAM AIX
files, they are excluded from processing. NOBACK02 is
instructed via DD file input to exclude information for certain
datasets and volumes. There are many datasets which knowingly
don't get backed up (SYS1.VVDS and SYS1.HASP datasets for
instance), so there is no reason to constantly report them. Also,
there are volumes on the system which receive full volume back-
ups, so data is likewise bypassed for them. Masking is available to
simplify coding dataset level exceptions. Masks are ? (single
character), * (single qualifier), and / (all remaining). In step 8, DD
EXCLVOLS contains volume excludes and DD EXCLDSNS
contains dataset excludes. Both are 80-byte records with one left
justified exclude per record. Step 9 sorts the DCOLLECT data
extracted in step 8 into dataset level order.

At this point, it is possible in step 10 to use a COBOL program
called NOBACK03 to compare historical back-up information
with what currently exists in the system. This leads to a
determination of which datasets do not have current back-ups or
possibly no back-up at all. The program prints a report of all
problems and creates a request passed to step 11 to perform a
special back-up for each exception. A return code of 0 in step 10
informs step 11 there are exceptions to process, otherwise step 11
is bypassed via condition code checking. NOBACK03 has logic
to avoid common situations where datasets have been created or
updated and not yet had an opportunity to be backed up. For
example, if the creation or update date is today's date, it's
assumed the dataset will get picked up on the next back-up cycle.
Information contained in the report includes dataset name,
creation date, use date, last known back-up date, change bit on/off,
and volume containing dataset. A check is made on the catalog
status of a dataset to avoid reporting uncatalogued datasets. The
process is relatively quick, taking only about seven minutes to
analyse back-ups for approximately 20,000 datasets on my
system. It's a small price to pay to avoid finding out you don't
have a dataset backed up which someone inadvertently deletes or
resides on a failed HDA.

EXECUTION JCL

//*    UNLOAD DMS DATASET INDEX
//JSTEP01   EXEC PGM=ADSMI002,PARM=ADSDM177
//CMDPRINT  DD   SYSOUT=*
//FILES     DD   DSN=DMS.R815.FILES,DISP=SHR
//MSGPRINT  DD   SYSOUT=*
//PARMLIB   DD   DSN=DMS.R815.PARMLIB,DISP=SHR
//SYSPRINT  DD   SYSOUT=*
//SEQFILES  DD   DSN=&&TEMP1,DISP=(,PASS,DELETE),
//          LRECL=268,RECFM=VB,SPACE=(CYL,(35,5))
//SYSIN     DD   *
   UNLOAD FILES=DSNINDEX
//*    SORT DATASET INDEX BY DSN, ONLY KEEP MOST RECENT
//JSTEP02   EXEC PGM=SORT
//SYSOUT    DD   SYSOUT=*
//SORTIN    DD   DSN=&&TEMP1,DISP=(OLD,DELETE)
//SORTOUT   DD   DSN=&&TEMP2,DISP=(,PASS,DELETE),
//          LRECL=268,RECFM=VB,SPACE=(CYL,(20,5))
//SYSIN     DD   *
  SORT FIELDS=(13,44,CH,A),EQUALS
  SUM FIELDS=NONE
//*    SORT REMAINING DATASETS BY TAPE VOL SER
//JSTEP03   EXEC PGM=SORT
//SYSOUT    DD   SYSOUT=*
//SORTIN    DD   DSN=&&TEMP2,DISP=(OLD,DELETE)
//SORTOUT   DD   DSN=&&TEMP3,DISP=(,PASS,DELETE),
//          LRECL=80,RECFM=FB,SPACE=(CYL,(5,5))
//SYSIN     DD   *
  SORT FIELDS=(95,6,CH,A)
  OUTREC FIELDS=(10X,13,44,6X,95,6,14X),CONVERT
//*    UNLOAD DMS VOLUMES INDEX
//JSTEP04   EXEC PGM=ADSMI002,PARM=ADSDM177
//CMDPRINT  DD   SYSOUT=*
//FILES     DD   DSN=DMS.R815.FILES,DISP=SHR
//MSGPRINT  DD   SYSOUT=*
//PARMLIB   DD   DSN=DMS.R815.PARMLIB,DISP=SHR
//SYSPRINT  DD   SYSOUT=*
//SEQFILES  DD   DSN=&&TEMP4,DISP=(,PASS,DELETE),
//          LRECL=268,RECFM=VB,SPACE=(CYL,(5,5))
//SYSIN     DD   *
   UNLOAD FILES=ARCHVOLS
//*    REFORMAT DATE AND SORT VOLUME INDEX BY TAPE VOL SER
//JSTEP05   EXEC PGM=SORT
//SYSOUT    DD   SYSOUT=*
//SORTIN    DD   DSN=&&TEMP4,DISP=(OLD,DELETE)
//SORTOUT   DD   DSN=&&TEMP5,DISP=(,PASS,DELETE),SPACE=(CYL,(5,5)),
//          LRECL=80,RECFM=FB
//SYSIN     DD   *
  SORT FIELDS=(13,6,CH,A)
  OUTREC FIELDS=(60X,13,6,X,62,7,6X),CONVERT
//*    COMBINE DATASET AND BACKUP DATE FROM DSNINDEX AND VOLINDEX
//JSTEP06   EXEC PGM=CHKBCK01
//SYSOUT    DD   SYSOUT=*
//INFILE1   DD   DSN=&&TEMP5,DISP=(OLD,DELETE)
//INFILE2   DD   DSN=&&TEMP3,DISP=(OLD,DELETE)
//OUTFILE   DD   DSN=&&TEMP6,DISP=(,PASS,DELETE),SPACE=(CYL,(9,1))
//*    SORT COMBINDED DATA BY DATASET
//JSTEP07   EXEC PGM=ICEMAN
//SYSOUT    DD   SYSOUT=*
//SORTIN    DD   DSN=&&TEMP6,DISP=(OLD,DELETE)
//SORTOUT   DD   DSN=&&TEMP7,DISP=(,PASS,DELETE),
//          LRECL=80,SPACE=(CYL,(9,1))
//SYSIN     DD   *
    SORT FIELDS=(1,44,CH,A)
//*    DCOLLECT ALL DATASETS ON THE SYSTEM, EXCEPT EXCLUDES
//JSTEP08   EXEC PGM=CHKBCK02
//OUTFILE   DD   DSN=&&TEMP8,DISP=(,PASS,DELETE),
//          LRECL=80,RECFM=FB,SPACE=(CYL,(8,1))
//SYSPRINT  DD   SYSOUT=*
//SYSIN     DD   UNIT=VIO,SPACE=(CYL,(1,1))
//*    FOLLOWING TWO DDS GIVE VOLUMES AND DATASETS TO EXCLUDE
//EXCLVOLS  DD   DSN=DMS.R815.PARMLIB(XCLVOL),DISP=SHR
//EXCLDSNS  DD   DSN=DMS.R815.PARMLIB(XCLDSN),DISP=SHR
//DCOLLECT  DD   DSN=&&DCOLLECT,DISP=(,DELETE),
//          LRECL=264,RECFM=VB,DSORG=PS,SPACE=(CYL,(25,5))
//*    SORT DCOLLECT DATA BY DATASET
//JSTEP09   EXEC PGM=ICEMAN
//SYSOUT    DD   SYSOUT=*
//SORTIN    DD   DSN=&&TEMP8,DISP=(OLD,DELETE)
//SORTOUT   DD   DSN=&&TEMP9,DISP=(,PASS,DELETE),
//          LRECL=80,SPACE=(CYL,(8,1))
//SYSIN     DD   *
    SORT FIELDS=(1,44,CH,A)
//DUMMYDD   DD   DSN=SYS2.TEMP10,DISP=(,CATLG),
//          UNIT=SYSWK,SPACE=(CYL,1),
//          DCB=(LRECL=80,BLKSIZE=6800,RECFM=FB)
//*    MATCH DCOLLECT DATA WITH BACKUPS TO DETERMINE MISSING BACKUPS
//JSTEP10   EXEC PGM=CHKBCK03
//SYSOUT    DD   SYSOUT=*
//INFILE1   DD   DSN=&&TEMP7,DISP=(OLD,DELETE)
//INFILE2   DD   DSN=&&TEMP9,DISP=(OLD,DELETE)
//BACKUPS   DD   DSN=&&TEMP11,DISP=(,PASS,DELETE),
//          LRECL=80,RECFM=FB,SPACE=(CYL,(1,1))
//IDCSYSIN  DD   DSN=SYS2.TEMP10,DISP=(OLD,DELETE)
//SYSIN     DD   DSN=SYS2.TEMP10,DISP=OLD
//SYSPRINT  DD   SYSOUT=*
//*    EXECUTE A SPECIAL BACKUP IF DATASETS EXIST WITHOUT A BACKUP
//          IF (JSTEP10.RC EQ 0) THEN
//JSTEP11   EXEC ARCHIVE,S='*'
//SYSPARMS  DD   *
VSALOSHRY
//SYSIN     DD   DSN=&&TEMP11,DISP=(OLD,DELETE)
//          ENDIF

CHCKBCK01 SOURCE CODE

       IDENTIFICATION DIVISION.
       PROGRAM-ID. CHKBCK01
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OUTFILE ASSIGN TO OUTFILE.
           SELECT INFILE1 ASSIGN TO INFILE1.
           SELECT INFILE2 ASSIGN TO INFILE2.
       DATA DIVISION.
       FILE SECTION.
       FD  INFILE1
           LABEL RECORDS STANDARD
           BLOCK 0 RECORDS.
       01  INFILE1-RECORD.
           03  FILLER   PIC X(60).
           03  IF1-VOL  PIC X(6).
           03  FILLER   PIC X(3).
           03  IF1-DATE PIC X(5).
           03  FILLER   PIC X(6).
       FD  INFILE2
           LABEL RECORDS STANDARD
           BLOCK 0 RECORDS.
       01  INFILE2-RECORD.
           03  FILLER      PIC X(10).
           03  IF2-DSN     PIC X(44).
           03  FILLER      PIC X(6).
           03  IF2-VOL     PIC X(6).
           03  FILLER      PIC X(14).
       FD  OUTFILE
           LABEL RECORDS STANDARD
           BLOCK 0 RECORDS.
       01  OUTFILE-RECORD.
           03  OF-DSN      PIC X(44).
           03  OF-DATE     PIC X(5).
           03  FILLER      PIC X(31).
       WORKING-STORAGE SECTION.
       01  EOF-FLAG1     PIC 9 VALUE 0.
           88 EOF1   VALUE 1.
       01  EOF-FLAG2     PIC 9 VALUE 0.
           88 EOF2   VALUE 1.
       PROCEDURE DIVISION.
       000-MAINLINE.
           OPEN OUTPUT OUTFILE.
           OPEN INPUT INFILE1 INFILE2.
           READ INFILE1.
           READ INFILE2.
           PERFORM 100-WRITE-IT UNTIL EOF2.
           CLOSE OUTFILE INFILE1 INFILE2.
           STOP RUN.
       100-WRITE-IT.
           IF IF2-VOL = IF1-VOL
                MOVE IF2-DSN TO OF-DSN
                MOVE IF1-DATE TO OF-DATE
                WRITE OUTFILE-RECORD
                PERFORM 110-READ2
           ELSE
                IF NOT EOF1
                    PERFORM 120-READ1
                ELSE DISPLAY 'FORCED ABEND, PREMATURE EOF1 ENCOUNTERED'
                     COMPUTE EOF-FLAG1 = EOF-FLAG1 / EOF-FLAG2.
       110-READ2.
           READ INFILE2 AT END MOVE 1 TO EOF-FLAG2.
       120-READ1.
           READ INFILE1 AT END MOVE 1 TO EOF-FLAG1.

CHKBCK02 SOURCE CODE

CHKBCK02  CSECT
          STM   14,12,12(R13)           SAVE REGS
          LR    R10,R15                 SAVE ENTRY ADDRESS
          USING CHKBCK02,R10            ESTABLISH ADDRESSABILITY
          LA    R6,REGSAVE              LOAD REGSAVE ADDRESS
          ST    R6,8(R13)               STORE OUR REGSAVE ADDRESS SAVE
          ST    R13,4(R6)               STORE CALLING REGSAVE ADDRESS
          LR    R13,R6                  LOAD OUR REGSAVE
          OPEN  EXCLDSNS                PREPARE TO READ DSNS
          LA    R6,DSNSTABL             ADDRESS DSNS SAVE TABLE
CHBK0201  GET   EXCLDSNS                READ A DSN MASK
          MVC   0(44,R6),0(R1)          SAVE IT
          LA    R6,44(R6)               BUMP TO NEXT TABLE ENTRY
          CLC   0(2,R6),=C'XX'          AT END OF TABLE?
          BE    CHBK0213                IF YES, GO SEE IF THERE'S MORE
          B     CHBK0201                GET NEXT ONE
CHBK0203  CLOSE EXCLDSNS                CLOSE DSNS FILE
CHBK0206  OPEN  EXCLVOLS                PREPARE TO READ VOL
          LA    R6,VOLSTABL             ADDRESS VOL SAVE TABLE
CHBK0208  GET   EXCLVOLS                READ A VOLUME
          MVC   0(6,R6),0(R1)           SAVE IT
          LA    R6,6(R6)                BUMP TO NEXT TABLE ENTRY
          CLC   0(2,R6),=C'XX'          AT END OF TABLE?
          BE    CHBK0216                IF YES, GO SEE IF THERE'S MORE
          B     CHBK0208                GET NEXT ONE
CHBK0211  CLOSE EXCLVOLS                CLOSE VOL FILE
          B     CHBK0218                GO CALL DCOLLECT
CHBK0213  GET   EXCLDSNS                WAS THAT THE LAST DSN?
          WTO   '*  MAXIMUM OF 50 DSN EXCL MASKS, EXPAND TABLE *'
          ABEND 996
CHBK0216  GET   EXCLVOLS                WAS THAT THE LAST VOL?
          WTO   '*  MAXIMUM OF 20 VOL EXCLUDES, EXPAND TABLE *'
          ABEND 997
CHBK0218  OPEN  (SYSIN,(OUTPUT),OUTFILE,(OUTPUT))
          PUT   SYSIN,DCOLCARD          PUT DCOLLECT OUT TO IDCAMS
          CLOSE SYSIN                   CLOSE SYSIN SO IDCAMS CAN READ
          LA    R1,0                    PREPARE FOR IDCAMS LINK
          LINK  EP=IDCAMS               CALL IDCAMS TO DO DCOLLECT
          LTR   R15,R15                 ZERO RC FROM IDCAMS DCOLLECT?
          BZ    CHBK0221                IF YES, CONTINUE
          WTO   '*  NON ZERO DATA DCOLLECT RC, REVIEW SYSPRINT *'
          ABEND 998
CHBK0221  OPEN  DCOLLECT                PREPARE TO READ DCOLLECT DATA
CHBK0223  GET   DCOLLECT                READ DATA FROM DCOLLECT
          LA    R9,4(R1)                POINT TO RECORD
          USING IDCDOUT,R9              ESTABLISH ADDRESSABILITY
          CLI   DCURCTYP,C'D'           DATASET RECORD?
          BNE   CHBK0223                IF NO, DON'T WANT IT
          TM    DCDFLAG1,DCDTEMP        IS IT TEMPORARY?
          BO    CHBK0223                IF YES, DON'T WANT IT
          CLC   DCDVOLSR,DCDDSSER       MULTIVOLUME, NOT FIRST VOLUME?
          BNE   CHBK0223                IF YES, DON'T WANT IT
          MVC   SAVEVOL,DCDDSSER        SAVE THE VOLUME SERIAL #
          CLC   DCDERROR,=X'00'         ANY ERRORS?
          BE    CHBK0226                IF NO, OK TO PROCESS
          WTO   ' DCOLLECT ERROR FOR DATASET:' INDICATE ERRORS EXIST
          MVC   WTOLIST+6(44),DCDDSNAM  SET UP DATASET DISPLAY
          WTO   MF=(E,WTOLIST)          DISPLAY DATASET IN ERROR
          B     CHBK0223                GO PROCESS NEXT ONE
CHBK0226  UNPK  WORK,DCDCREDT           UNPACK CREATE DATE
          MVC   OUTCDATE,WORKDATE       SAVE IT
          UNPK  WORK,DCDLSTRF           UNPACK LAST USE DATE
          MVC   OUTUDATE,WORKDATE       SAVE IT
          MVI   OUTCHNG,C'N'            ASSUME NOT CHANGED
          TM    DCDFLAG1,DCDCHIND       CHANGE BIT ON?
          BNO   CHBK0228                IF YES, FLAG OK
          MVI   OUTCHNG,C'Y'            CHANGE FLAG TO YES
CHBK0228  TM    DCDDSORG+1,DCDDSGVS     IS THIS VSAM?
          BO    CHBK0230                IF YES, PROCESS IT
          MVC   OUTDSN,DCDDSNAM         SAVE DSNAME AS IS
          B     CHBK0237                CONTINUE PROCESSING
CHBK0230  GET   DCOLLECT                READ DATA FROM DCOLLECT
          LA    R9,4(R1)                POINT TO RECORD
          CLI   DCURCTYP,C'A'           ASSOCIATED RECORD?
          BE    CHBK0232                IF YES, WE'RE OK
          WTO   '* LOGIC ERROR *'       SHOULDN'T HAVE VSAM WITHOUT 'A'
          ABEND 999
CHBK0232  TM    DCAFLAG1,DCAAIX         IS THIS AN AIX?
          BO    CHBK0223                IF YES, DON'T BOTHER
          TM    DCAFLAG1,DCADATA        IS THIS DATA COMPONENT NAME?
          BO    CHBK0235                IF YES, PROCESS
          B     CHBK0223                IF NO, GO LOOK AT NEXT RECORD
CHBK0235  MVC   OUTDSN,DCAASSOC         SAVE THE CLUSTER NAME
CHBK0237  LA    R6,DSNSTABL             PREPARE TO CHECK COPY MASKS
CHBK0240  LA    R7,44(R6)               ADDRESS OF NEXT MASK
          CLC   0(2,R6),=C'XX'          END OF TABLE?
          BE    CHBK0261                IF YES, DIDN'T MATCH
          CLI   0(R6),C' '              VALID ENTRY?
          BE    CHBK0261                IF YES, DIDN'T MATCH
          LA    R8,OUTDSN               ADDRESS DCOLLECT DSNAME
          LA    R3,OUTDSN+44            END OF DCOLLECT DSNAME
CHBK0243  CLI   0(R6),C'*'              GENERIC TO END OF QUALIFER?
          BE    CHBK0250                IF YES, GO PROCESS
          CLI   0(R6),C'?'              GENERIC CHARACTER?
          BE    CHBK0255                IF YES, GET NEXT ONE
          CLI   0(R6),C'/'              GENERIC TO END OF DSN?
          BE    CHBK0223                IF YES, DON'T WANT IT
          CLI   0(R6),C' '              AT END OF MASK?
          BE    CHBK0248                IF YES, SEE IF AT END OF DSN
          CLC   0(1,R6),0(R8)           MATCH ON THIS CHARACTER?
          BE    CHBK0255                IF YES, GET NEXT ONE
CHBK0246  LR    R6,R7                   LOAD NEXT MASK ADDRESS
          B     CHBK0240                CHECK NEXT MASK
CHBK0248  CLI   0(R8),C' '              IS IT A BLANK?
          BE    CHBK0223                IF YES, DON'T WANT IT
          B     CHBK0246                GO TO NEXT MASK
CHBK0250  LA    R8,1(R8)                POSITION TO NEXT CHARACTER
          CLI   0(R8),C'.'              IS IT A .?
          BE    CHBK0258                IF YES, AT END OF QUALIFIER
          CLI   0(R8),C' '              IS IT A BLANK?
          BE    CHBK0253                IF YES, HIT LAST CHARACTER
          CR    R8,R3                   AT END OF DSNAME?
          BL    CHBK0250                IF NO, CONTINUE
CHBK0253  LA    R6,1(R6)                NEXT MASK CHARACTER
          CLI   0(R6),C' '              IS MASK AT BLANK?
          BNE   CHBK0246                IF NO, NOT A HIT
          B     CHBK0223                IT WAS A HIT
CHBK0255  LA    R8,1(R8)                NEXT DCDDSNAM CHARACTER
CHBK0258  LA    R6,1(R6)                NEXT MASK CHARACTER
          B     CHBK0243                GO CHECK FOR A MATCH
CHBK0261  LA    R6,VOLSTABL             LOAD VOLUME TABLE ADDRESS
CHBK0263  CLC   0(6,R6),SAVEVOL         IS VOLUME A MATCH?
          BE    CHBK0223                IF YES, DON'T WANT IT
          CLI   0(R6),C' '              VALID ENTRY?
          BE    CHBK0267                IF NO, IT'S OK
          CLC   0(2,R6),=C'XX'          END OF TABLE?
          BE    CHBK0267                IF YES, IT'S OK
          LA    R6,6(R6)                ADDRESS NEXT VOL
          B     CHBK0263                GO CHECK IT
CHBK0267  MVC   OUTVOL,SAVEVOL          SAVE VOLUME IT'S ON
          PUT   OUTFILE,OUTCARD         WRITE THE COLLECTED INFO
          B     CHBK0223                GO PROCESS NEXT RECORD
CHBK0299  CLOSE DCOLLECT                CLOSE DATA DCOLLECT DD
          L     R13,REGSAVE+4           RELOAD REG 13
          ST    R15,16(R13)             STORE RC
          LM    14,12,12(R13)           RELOAD REGS
          BR    14                      GO HOME
          LTORG
REGSAVE   DS    18F                     REGISTER SAVE AREA
SAVEVOL   DS    CL6                     VOLUME SAVE
DSNSTABL  DC    50CL44' '               DATASET EXCLUDE TABLE
          DC    C'XX'                   INDICATE END OF TABLE
VOLSTABL  DC    20CL6' '                VOLUME EXCLUDE TABLE
          DC    C'XX'                   INDICATE END OF TABLE
WORK      DS    0CL7                    UNPACK DATE WORK FIELD
          DS    CL2                     FILLER
WORKDATE  DS    CL5                     THE ACTUAL DATE
WTOLIST   WTO '  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',MF=L
OUTCARD   DC    CL80' '                 IDCAMS DATA DCOLLECT CARD
          ORG   OUTCARD
OUTDSN    DS    CL44                    DATASET NAME
OUTCDATE  DS    CL5                     CREATE DATE
OUTUDATE  DS    CL5                     LAST USE DATE
OUTCHNG   DS    CL1                     CHANGED FLAG
OUTVOL    DS    CL6                     VOLUME
          ORG
DCOLCARD  DC    CL80' '                 IDCAMS DATA DCOLLECT CARD
          ORG   DCOLCARD
          DC    C' DCOLLECT'
          DC    C' OFILE(DCOLLECT)'
          DC    C' VOL(*)'
          DC    C' NOVOLUMEINFO'
          ORG
EXCLDSNS  DCB   DDNAME=EXCLDSNS,DSORG=PS,MACRF=GL,EODAD=CHBK0203
EXCLVOLS  DCB   DDNAME=EXCLVOLS,DSORG=PS,MACRF=GL,EODAD=CHBK0211
OUTFILE   DCB   DDNAME=OUTFILE,DSORG=PS,MACRF=PM,                      X
               LRECL=80,RECFM=FB
DCOLLECT  DCB   DDNAME=DCOLLECT,DSORG=PS,MACRF=GL,EODAD=CHBK0299
SYSIN     DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,                        X
               LRECL=80,BLKSIZE=80,RECFM=F
          IDCDOUT
          END

CHKBCK03 SOURCE CODE

       IDENTIFICATION DIVISION.
       PROGRAM-ID. CHKBCK03
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT INFILE1  ASSIGN TO INFILE1.
           SELECT INFILE2  ASSIGN TO INFILE2.
           SELECT BACKUPS  ASSIGN TO BACKUPS.
           SELECT IDCSYSIN ASSIGN TO IDCSYSIN.
       DATA DIVISION.
       FILE SECTION.
       FD  BACKUPS
           LABEL RECORDS STANDARD
           BLOCK 0 RECORDS.
       01  BACKUPS-RECORD PIC X(80).
       FD  INFILE1
           LABEL RECORDS STANDARD
           BLOCK 0 RECORDS.
       01  INFILE1-RECORD.
           03  IF1-DSN  PIC X(44).
           03  IF1-DATE PIC X(5).
           03  FILLER   PIC X(31).
       FD  INFILE2
           LABEL RECORDS STANDARD
           BLOCK 0 RECORDS.
       01  INFILE2-RECORD.
           03  IF2-DSN     PIC X(44).
           03  IF2-CDATE   PIC X(5).
           03  IF2-UDATE   PIC X(5).
           03  IF2-CHNG    PIC X.
           03  IF2-VOL     PIC X(6).
           03  FILLER      PIC X(19).
       FD  IDCSYSIN
           LABEL RECORDS ARE STANDARD
           RECORDING MODE F
           BLOCK 0 RECORDS.
       01  IDCSYSIN-RECORD     PIC X(80).
       WORKING-STORAGE SECTION.
       01  INDX          PIC 99.
       01  JUL-DATE      PIC X(5).
       01  EOF-FLAG1     PIC 9 VALUE 0.
           88 EOF1   VALUE 1.
       01  EOF-FLAG2     PIC 9 VALUE 0.
           88 EOF2   VALUE 1.
       01  HAD-A-HIT-FLAG PIC 9 VALUE 0.
           88 HAD-A-HIT VALUE 1.
       01  LISTC-COMMAND.
           03  FILLER           PIC X(15)     VALUE ' LISTC ENTRIES('.
           03  LISTC-DSN        PIC X(44).
           03  FILLER           PIC X         VALUE ')'.
           03  FILLER           PIC X(20)     VALUE SPACES.
       01  IDCAMS                   PIC X(6) VALUE 'IDCAMS'.
       01  BACKUP-STATEMENT1.
           03 FILLER  PIC X(13) VALUE ' ARCHIVE DSN='.
           03 BS-DSN.
              05  BS-DSN-CHARACTER PIC X OCCURS 45 TIMES.
           03 FILLER  PIC X(22) VALUE SPACES.
       01  BACKUP-STATEMENT2.
           03 FILLER  PIC X(13) VALUE SPACES.
           03 FILLER  PIC X(26) VALUE 'NOCATALOG,NOSCRATCH,RESET'.
           03 FILLER  PIC X(41) VALUE SPACES.
       PROCEDURE DIVISION.
       MAINLINE.
           OPEN INPUT INFILE1 INFILE2
                OUTPUT BACKUPS.
           ACCEPT JUL-DATE FROM DAY.
           DISPLAY
           ' THE FOLLOWING DATASETS DO NOT HAVE A CURRENT DMS BACKUP'.
           DISPLAY ' '.
           MOVE HIGH-VALUES TO IF1-DSN.
           PERFORM 120-READ1.
           PERFORM 110-READ2.
           PERFORM 100-CHECK-IT UNTIL EOF2.
           IF HAD-A-HIT
               MOVE 0 TO RETURN-CODE
           ELSE
               MOVE 4 TO RETURN-CODE.
           CLOSE INFILE1 INFILE2 BACKUPS.
           STOP RUN.
       100-CHECK-IT.
           IF IF2-DSN = IF1-DSN
               IF IF2-CDATE > IF1-DATE
                   IF IF2-CDATE = JUL-DATE
                       PERFORM 110-READ2
                   ELSE
                       IF IF2-CHNG = 'Y'
                           DISPLAY IF2-DSN ' CREATED:' IF2-CDATE
                       '  LASTUSED:' IF2-UDATE '  BACKED UP:' IF1-DATE
                         '  CHANGE BIT:' IF2-CHNG '  VOLUME:' IF2-VOL
                           MOVE SPACES TO BS-DSN
                           MOVE IF2-DSN TO BS-DSN
                           MOVE 1 TO INDX
                           PERFORM 130-CHECK-FOR-SPACE
                           PERFORM 140-CHECK-AND-WRITE
                           PERFORM 110-READ2
                       ELSE
                           PERFORM 110-READ2
               ELSE
                   IF IF2-UDATE > IF1-DATE
                       IF IF2-CHNG = 'Y'
                           IF IF2-UDATE = JUL-DATE
                               PERFORM 110-READ2
                           ELSE
                       DISPLAY IF2-DSN ' CREATED:' IF2-CDATE
                     '  LASTUSED:' IF2-UDATE '  BACKED UP:' IF1-DATE
                     '  CHANGE BIT:' IF2-CHNG '  VOLUME:' IF2-VOL
                           MOVE SPACES TO BS-DSN
                           MOVE IF2-DSN TO BS-DSN
                           MOVE 1 TO INDX
                           PERFORM 130-CHECK-FOR-SPACE
                           PERFORM 140-CHECK-AND-WRITE
                           PERFORM 110-READ2
                       ELSE
                           PERFORM 110-READ2
                   ELSE
                       PERFORM 110-READ2
           ELSE
               IF IF2-DSN < IF1-DSN
                   IF IF2-CDATE = JUL-DATE
                       PERFORM 110-READ2
                   ELSE
                       DISPLAY IF2-DSN ' CREATED:' IF2-CDATE
                     '  LASTUSED:' IF2-UDATE '  BACKED UP:NEVER'
                     '  CHANGE BIT:' IF2-CHNG '  VOLUME:' IF2-VOL
                       MOVE SPACES TO BS-DSN
                       MOVE IF2-DSN TO BS-DSN
                       MOVE 1 TO INDX
                       PERFORM 130-CHECK-FOR-SPACE
                       PERFORM 140-CHECK-AND-WRITE
                     PERFORM 110-READ2
               ELSE
                   IF NOT EOF1
                      PERFORM 120-READ1.
       110-READ2.
           READ INFILE2 AT END MOVE 1 TO EOF-FLAG2.
       120-READ1.
           READ INFILE1 AT END MOVE 1 TO EOF-FLAG1
                               MOVE HIGH-VALUES TO IF1-DSN.
       130-CHECK-FOR-SPACE.
           IF BS-DSN-CHARACTER(INDX) = ' '
               MOVE ',' TO BS-DSN-CHARACTER(INDX)
           ELSE
               ADD 1 TO INDX
               GO TO 130-CHECK-FOR-SPACE.
       140-CHECK-AND-WRITE.
           MOVE IF2-DSN TO LISTC-DSN.
           OPEN OUTPUT IDCSYSIN.
           WRITE IDCSYSIN-RECORD FROM LISTC-COMMAND.
           CLOSE IDCSYSIN.
           CALL IDCAMS.
           IF RETURN-CODE = 0
               MOVE 1 TO HAD-A-HIT-FLAG
               WRITE BACKUPS-RECORD FROM BACKUP-STATEMENT1
               WRITE BACKUPS-RECORD FROM BACKUP-STATEMENT2.


Ernie Ishman
Manager Systems Support
Geisinger System Services (USA)                                c Xephon 1994

