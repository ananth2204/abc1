Searching the LINKLIST concatenation

A common problem at many MVS sites is the duplication of
load modules within standard search sequences. Finding these
rogue modules, and imposing the necessary version control,
can be a laborious and time-consuming task, particularly if
there are numerous execution libraries.

LLS is a TSO command processor, written in 370 Assembler,
that will access the concatenation of LINKLIST datasets via the
in-storage LLT. A member name is specified as the only
parameter, and each dataset is searched in turn for the specified
module. Thus, all occurrences of a particular module in the
LINKLIST can be obtained with one TSO command.

The program has no need of APF authorization, and can be
link-edited AMODE(31), RMODE(24).

         MACRO
         ALLOCATE &DDN=,&LOC=,&DSN=
         DS    0H
&S       SETC '&SYSNDX'           SET 'S' VARIABLE FOR UNIQUE DD NAMES
* FREE SPECIFIED DDNAME BEFORE WE TRY AND ALLOCATE IT.              *
         LA    R1,RBPD&S          R1 POINTS TO REQUEST BLOCK POINTER
         B     SVCD&S             BRANCH AROUND CONSTANTS............
DDD&S    DC X'0001',X'0001',X'0008',CL8'&DDN'   DDNAME TEXT UNITS
PTRD&S   DC A(DDD&S+X'80000000')                POINTER TO ABOVE
RBD&S    DC AL1(20,2,0,0)                       REQUEST BLOCK
         DS F
         DC A(PTRD&S)
         DC AL4(0,0)
RBPD&S   DC A(RBD&S+X'80000000')                POINTER TO ABOVE
SVCD&S   SVC   99                 ......AND ISSUE SVC 99 TO DEALLOC..
* NOW ALLOCATE DSNAME TO THE DDNAME FREE'D ABOVE.                   *
         DS    0H
         AIF   ('&LOC' EQ '').LOADIT  'LOC' OR 'DSN' IS SPECIFIED...
         MVC   DSN&S+6(L'&LOC),&LOC   MOVE DSN IN FROM LOCATION 'LOC'
.LOADIT  ANOP
         LA    R1,RBPA&S          R1 POINTS TO REQUEST BLOCK POINTER
         B     SVCA&S             BRANCH AROUND CONSTANTS............
DDA&S    DC X'0001',X'0001',X'0008',CL8'&DDN'   DDNAME TEXT UNITS
DSN&S    DC X'0002',X'0001',X'002C'             DSNAME TEXT UNITS
         DC CL44'&DSN '
DISP&S   DC X'0004',X'0001',X'0001',X'08'        DISP TEXT UNITS
PTRA&S   DC A(DDA&S,DSN&S,DISP&S+X'80000000') POINTER TO TEXT UNITS
RBA&S    DC AL1(20,1,0,0)                          REQUEST BLOCK
         DS F
         DC A(PTRA&S)
         DC AL4(0,0)
RBPA&S   DC A(RBA&S+X'80000000')              POINTER TO ABOVE
SVCA&S   SVC   99                 ......AND ISSUE SVC 99 TO ALLOC....
         LA  1,RBA&S              POINT R1 AT RB FOR DEBUGGING
         MEND
LLS      CSECT
* THIS COMMAND PROCESSOR SEARCHES THE IN-STORAGE LINKLIST
* CONCATENATION FOR A GIVEN MODULE. IT IS INVOKED BY :
*       ==> TSO LLS MEMNAME
         STM    R14,R12,12(R13)    SAVE CALLER'S REGS IN HIS SAVE AREA
         LR     R12,R15            ESTABLISH OUR BASE REG
         USING  LLS,R12            ADDRESSABILITY TO THIS CSECT
         LA     R14,SAVE           POINT R14 AT OUR SAVE AREA
         ST     R14,8(R13)         STORE ADD OF OUR SAVE AREA IN HIS
         ST     R13,SAVE+4         STORE ADD OF HIS SAVE AREA IN OURS
         LA     R13,SAVE           NOW POINT R13 AT OUR SAVE AREA
* PROCESS PARM; R1 POINTS TO CMD BUFFER; 2(R1) IS DISPL TO 1ST PARM
         USING  CPPL,R1            ADDRESSABILITY TO CPPL
         L      R1,CPPLCBUF        GET ADDR OF COMMAND BUFFER INTO R1
         DROP   R1                 DROP R1 AS BASE
         LH     R2,2(R1)           NOW R2 IS DISPLACEMENT TO PARM FIELD
         LH     R3,0(R1)           NOW R3 IS LENGTH OF COMMAND BUFFER
         SR     R3,R2              NOW R3 IS LENGTH OF PARM
         C      R3,=F'4'           NO PARM ????
         BE     NOPARM
         C      R3,=F'12'          PARM TOO LONG ????
         BH     PARMLONG
         LA     R1,4(R2,R1)        NOW R1 POINTS TO FIRST OPERAND
         BCTR   R3,R0              SUB 1 FROM R3 FOR EX MVC INSTRUCTION
         SH     R3,=H'4'           FINALLY SUB 4 HEADER BYTES
         EX     R3,EXMVC1          EX MVC INSTR WITH LENGTH FROM R3
         OC     MEMNAME,=8X'40'    CONVERT INPUT TO UPPER CASE
         MVC    MSG02(8),MEMNAME   MOVE MEMBER NAME INTO MESSAGES
         MVC    MSG03(8),MEMNAME   --------------- "" -----------
* ACCESS IN-STORAGE LINKLIST TABLE CVT+1244
READLOOP DS    0H           ALIGN ON HALFWORD BOUNDARY
         L      R1,CVTPTR   ACCESS TO CVT
         USING  CVT,R1
         L      R2,CVTLLTA   R2 CONTAINS LLT ADDRESS
         DROP   R1
         LA     R3,0         COUNTER FOR NUM OF ENTRIES
         L      R5,4(R2)     R5 CONTAINS NUM OF ENTRIES
         LA     R2,8(R2)     JUMP OVER 'LLT ' AND 4 BYTES OF NUM ENT
         LA     R2,1(R2)     NOW JUMP OVER ENTRY LENGTH INDICATOR
SCAN     CR     R3,R5        NUM OF ENTRIES PROCESSED = R5? (LIMIT)
         BE     NOMORE
         MVC    LINKLIB,0(R2)   MOVE DSNAME TO 'LINKLIB' FIELD
         LA     R2,45(R2)    BUMP R2 44 FOR DSNAME AND 1 FOR LEN FIELD
         LA    R15,FINDMEM          B TO FINDMEM ROUTINE.....
         BASR  R8,R15               .....RETURNING VIA R8
         LA     R3,1(R3)         INCR NUM OF ENTRIES PROCESSED BY 1
         LTR   R15,R15           IS R15 NON-ZERO???
         BNZ   SCAN          ....THEN NO FIND....GO READ ANOTHER ENTRY
* TO GET THIS FAR R15 MUST HAVE RETURNED 0....IE IT FOUND THE MEMBER
* ....NOW INFORM THE USER, AND FIND OUT IF HE WANTS TO CARRY ON SEARCH.
ASK      TPUT   MSG00,L'MSG00       BLANK LINE TO SPACE IT
         TPUT   MSG05,L'MSG05       FOUND!!.SO ASK CONTINUE Y/N??
         TGET   REPLY,L'REPLY,EDIT,WAIT  .....GET REPLY FROM TERMINAL
         OC     REPLY(3),=X'404040'  CONVERT REPLY TO UPPER CASE
         CLC    REPLY(3),=C'YES'      WAS REPLY 'YES'??....
         BE     SCAN                  ...THEN GO SEARCH ANOTHER DSN
         CLC    REPLY(3),=C'NO '      WAS REPLY 'NO'??.......
         BE     EXIT                  ...THEN GET OUT
         B      ASK                   RESHOW QUESTION IF REPLY NOT Y/N
NOMORE   DS    0H                ALIGN ON HALFWORD BOUNDARY
         TPUT   MSG00,L'MSG00    SEND BLANK LINE TO SPACE IT OUT
         TPUT   MSG04,L'MSG04    SEND MSG SAYING 'ALL SEARCHED'
EXIT     L      R13,SAVE+4       POINT R13 AT CALLER'S SAVE AREA
         LM     R14,R12,12(R13)  RESTORE CALLER'S SAVE AREA
         SR     R15,R15          SET RETURN CODE TO ZERO
         BR     R14
NOPARM   TPUT   MSG06,L'MSG06    SET 'NO PARM' MSG
         L      R13,SAVE+4       POINT R13 AT CALLER'S SAVE AREA
         LM     R14,R12,12(R13)  RESTORE CALLER'S SAVE AREA
         SR     R15,R15          SET RETURN CODE TO ZERO
         BR     R14
PARMLONG TPUT   MSG07,L'MSG07    SET 'TOO LONG' MSG
         L      R13,SAVE+4       POINT R13 AT CALLER'S SAVE AREA
         LM     R14,R12,12(R13)  RESTORE CALLER'S SAVE AREA
         SR     R15,R15          SET RETURN CODE TO ZERO
         BR     R14
*        EXECUTED INSTRUCTIONS
EXMVC1   MVC    MEMNAME(*-*),0(R1)
FINDMEM  DS    0H                          FINDMEM  SUBROUTINE
         ALLOCATE DDN=LINKLIB,LOC=LINKLIB
         OPEN  (INLINK,(INPUT))            OPEN DCB FOR LINKLIB DATASET
         MVC  MSG01+10(L'LINKLIB),LINKLIB  MOVE DSNAME TO MESSAGES
         MVC  MSG02+18(L'LINKLIB),LINKLIB
         MVC  MSG03+22(L'LINKLIB),LINKLIB
         TPUT MSG00,L'MSG00     SEND BLANK LINE TO SPACE IT OUT
         TPUT MSG01,L'MSG01     SEND MSG RE WHICH DSN BEING SEARCHED
         FIND INLINK,MEMNAME,D  FIND MEMBER SPECIFIED IN MEMNAME
         LTR    R15,R15         TEST R15 FOR OUTCOME OF FIND MACRO
         BNZ    NOT_ZERO        NOT ZERO MEANS NOT FOUND...B NOT_ZERO
         TPUT MSG02,L'MSG02     SEND MSG SAYING 'FOUND IT '
         CLOSE  INLINK
         LA     R15,0
         BR     R8              BACK TO CALLER WITH RC 0...(FOUND IT)
NOT_ZERO TPUT MSG03,L'MSG03     SEND MSG SAYING 'NOT FOUND '
         CLOSE  INLINK
         LA     R15,4
         BR     R8              BACK TO CALLER WITH RC 4...(NOT FOUND)
* DATA AREAS AND CONTROL BLOCKS
INLINK   DCB DSORG=PO,MACRF=R,DDNAME=LINKLIB
SAVE     DS  18F
MEMNAME  DC CL8' '
LINKLIB  DC CL44' '
REPLY  DC CL80' '
MSG00  DC C' '
MSG01  DC CL70'SEARCHING '
MSG02  DC CL70'         FOUND IN'
MSG03  DC CL70'         NOT FOUND IN'
MSG04  DC C'------ ALL LINKLIST LIBRARIES SEARCHED ------'
MSG05  DC C'LOAD MODULE FOUND....CONTINUE SEARCH ?   (YES/NO)'
MSG06  DC C'NO MEMBER NAME SPECIFIED'
MSG07  DC C'MEMBER NAME TOO LONG; GREATER THAN 8 CHARACTERS.'
       REGS
       CVT DSECT=YES
       IKJCPPL
       END


Steven Leek
Systems Programmer
British Gas (UK)                                    c   Xephon 1993

