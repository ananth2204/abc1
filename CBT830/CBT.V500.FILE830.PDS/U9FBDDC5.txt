Partitioned dataset scan utility

In our shop we frequently need to find out in which JCL job
stream a particular program is executed.  This created the need
for a Partitioned dataset (PDS) scan utility.  I wrote the
following Assembler program to scan any PDS for any
character string.  The program opens the PDS directory from
which the member name and TTRS are read.  Each member is
then scanned for the target string.  The output of this utility is a
dated report listing members in which the target string was
found.

* FUNCTION : TO SCAN A PARTITIONED DATA SET FOR A TARGET TEXT.
* INPUT    :  1. NAME OF THE DATASET TO BE SCANNED VIA DD STATEMENT.
*             2. TARGET TEXT VIA DD STATEMENT SPECIFYING DATASET
*                CONTAINING ONE CARD ON WHICH TEXT IS PLACED.
* OUTPUT   :  NAME OF OUTPUT DATASET TO RECEIVE UTILITY OUTPUT.
SCANPDS  CSECT
         STM   R14,R12,12(R13)        SAVE REGISTERS
         BALR  R12,0                    LOAD BASE REGISTER
         USING *,R12                    ESTABLISH ADDRESSABILITY
         ST    13,SAVEAREA+4           STORE CALLER'S S/A @ IN OUR S/A
         LR    14,13                   SAVE CALLER'S S/A @ IN R14
         LA    13,SAVEAREA             POINT R13 TO OUR SAVE AREA
         ST    13,8(14)                STORE OUR S/A @ IN CALLER'S S/A
         OPEN  (SCANTEXT,INPUT,RPT$FILE,OUTPUT)
*              READ , VALIDATE AND EXTRACT TARGET TEXT
         GET   SCANTEXT,SCANIN       READ IN THE TARGET TEXT CARD.
         TRT   SCANIN(80),SCANTAB1   LOOK FOR THE LEFT QUOTE.
         BZ    INVALDIN              IF EMPTY CARD SEND ERRMSG & EXIT.
         CLM   R2,B'1000',X'CC'      FIRST HIT A QUOTE?
         BNE   INVALDIN              NO, SEND ERRMSG & EXIT.
         LA    R1,1(0,R1)            YES, SAVE THE ADDR OF CHARACTER
         LR    R5,R1                 NEXT TO QUOTE IN R5.R5=LOW TXT ADR
         LA    R6,SCANIN+79          SET R6 TO HI ADDR OF INPUT CARD.
NXTQUOTE LR    R4,R6                 SET R4 TO CURRENT STRING LENGTH
         SR    R4,R1                 R4=HI REC ADDR-CURNT CHAR ADDR
         EX    R4,TRTINSTR           LOOK FOR THE RIGHT QUOTE.
         BC    B'0010',ENDSCAN       IF QUOT LST CARD CHAR,TEXT IS VLID
         BZ    INVALDIN              IF NO RIGHT QUOT SND ERRMSG & EXIT
         CLI   1(R1),C' '            IF CHAR NEXT TO QUOT IS SPACE THEN
         BE    ENDSCAN               TEXT IS VALID.
         CLI   1(R1),X'7D'           ELSE IT GOT TO BE ANOTHER QUOTE.
         BNE   INVALDIN              IF NOT SEND ERRMSG & EXIT.
         LA    R1,2(R1,0)            IF YES, POINT TO THE NEXT CHAR.
         B     NXTQUOTE              CONTINUE LOOKING FOR QUOTES.
ENDSCAN  LR    R3,R1                 SET R3 = HIGH TEXT ADDRESS
         BCTR  R3,R0
         SR    R1,R5                 SET R1=TXT LNGTH=HI-LOW TXT ADR
         LA    R10,INTEXT            R10 = ADDR OF FILTERED TEXT.
         LR    R8,R10
         LA    R2,1                  R2 = INCRMNT VALUE = 1
MOVTEXT  MVC   0(1,R10),0(R5)        MOVE CHARS FROM INPUT CARD TO
         LA    R10,1(R0,R10)         FILTERED TEXT BUFFER.
         CLI   0(R5),X'7D'           REPLACE EVERY TWO CONSECUTIVE
         BNE   NOTQUOT               QUOTES WITH ONE QUOTE.
         LA    R5,1(R0,R5)
NOTQUOT  BXLE  R5,R2,MOVTEXT         CONTINUE MOVING CHARS.
         SR    R10,R8
         BCTR  R10,R0                R10=TXT LNGTH=HI-LOW TEXT ADDRS
         PUT   RPT$FILE,PRNTHDR0     OUTPUT FILTERED TEXT
         PUT   RPT$FILE,PRNTHDR1
         B     INTEXTOK              INPUT TEXT IS VALID.
INVALDIN PUT   RPT$FILE,MSG01
         B     EOF
*           INTEXT CONTAINS VALID TEXT,R10 CONTAINS TEXT LENGTH
*           END OF READ INPUT SCAN TEXT
INTEXTOK DS    0H
         OPEN  (PDS$FILE,INPUT,DIR$FILE,INPUT)
         LA    R2,PDS$FILE           EXTRACT BLK & REC LENGTH
         LH    R0,62(R2)             R0 = BLK LNGTH
         LH    R4,82(R2)             R4 = LRECLNGTH
         GETMAIN  RU,LV=(0)          R1 = AREA ADDRS, R0 = STORG SIZE
         LR    R5,R0                 R5 = BLK LNGTH , R0 IS FREE
         LR    R3,R1                 R3 = AREA ADDRESS , R1 IS FREE
         LA    R6,4                  TEST FOR STORAGE AVAILABILITY
         CR    R15,R6                TEST RETURN CODE FOR 4
         BNE   STORGOK               IF NOT 4, STORAGE WAS OBTAINED.
         PUT   RPT$FILE,MSG03        ELSE SEND ERRMSG AND EXIT.
         B     EOF
STORGOK  DS    0H                    STORG FOR DATASET BLK OBTAINED
         TIME  DEC                   OBTAIN SYSTEM TIME
         ST    R0,TIMEFLD            GET PACKED TIME FROM R0
         ST    R1,DATEFLD            GET PACKED DATE FROM R1
         UNPK  TIMEFLD(7),TIMEFLD(4)
         UNPK  DATEFLD(5),DATEFLD(4)
         MVC   HH(2),H               MOVE DATE AND TIME TO HEADER LINE
         MVC   MM(2),M
         MVC   SS(2),S
         MVC   DDD(3),D
         MVC   YY(2),Y
         PUT   RPT$FILE,PRNTHDR2     PRINT UTILITY HEADER
         PUT   RPT$FILE,BLNKLINE
         SP    LINCOUNT(2),LINCOUNT(2)  INITIALIZE LINE COUNTER
         MVI   FOUNDFLG,C'N'         SET FLAG TO INDICATE TXT NOT FOUND
         AR    R5,R3                 R5=HI BLK ADDRS=STRG ADRS+BLKLNGTH
         ST    R5,HIBLKAD            SAVE HIGH BLOCK ADDRESS
         SR    R5,R4                 R5=LOOP LIMIT=HI BLK ADDRS-LRECL
GETNEXT  DS    0H
         READ  D1,SF,DIR$FILE,DIRBLK READ A DIRECTORY BLOCK
         CHECK D1
         LA    R6,DIRBLK             SET R6 TO THE BEGINNING OF DIRBLK
         A     R6,TWO                SKIP LENGTH FIELD(2 BYTES)
NXTMMBR  CLC   NULENTRY,0(R6)        NO MORE ENTRIES IN DIRECTORY BLK?
         BE    TSTLSTDB              YES, TEST FOR LAST BLOCK.
         CLC   YES,0(R6)             IS IT LAST DIRECTORY BLOCK?
         BE    DIREND                YES, SEND END MSG & EXIT.
         MVC   MEMBER(8),0(R6)       NO, FETCH MBR NAME FOR PROCESSING
*                      S C A N     L O G I C
*     R4 = LRECLNGTH  R3 = SAVED AREA ADDRESS
         LA    R8,1                  R8 = CHAR INCREMNT = 1
*        PUT   RPT$FILE,MEMBER       PRINT NAME OF MMBER BEING SCANNED
         FIND  PDS$FILE,MEMBER,D     LOCATE THE MEMBER.
NEXTBLK  L     R9,HIBLKAD            SET R9 TO HI BLK ADDR.
         BCTR  R9,R0
         LR    R2,R3                 SET R2 TO THE BEGINNING OF BLOCK
INITBLK  NI    0(R2),X'00'           RESET BLOCK TO BINARY ZEROS.
         BXLE  R2,R8,INITBLK
         READ  D2,SF,PDS$FILE,(R3)   READ A BLOCK FROM MEMBER.
         CHECK D2
         LR    R9,R3                 PREPARE R9 TO BE USED AS A LOOP
         SR    R9,R10                LIMIT WHEN SCANNING A RECORD
         BCTR  R9,R0                 R9=RCRD LOOP LMT=LRECL-TXTLNTH
         LR    R11,R3                R11= ADDRESS OF MEMBER BLOCK
NEXTREC  LR    R2,R11                R2 = BEGINNING OF NEW RECORD
         AR    R9,R4                 R9 =HI RCRD ADDRS=RCRD LOOP LMT
NEXTCHR  EX    R10,CLCINSTR          COMPARE TEXT WITH CURRENT STRING.
         BNE   NOTFOUND              IF NOT EQUAL,TEST NEXT STRING.
         MVI   FOUNDFLG,C'Y'         IF FOUND,SET A FLAG
         MVC   PRNTLIN1+8(8),MEMBER  PRINT MEMBER NAME CONTAINING THE
         PUT   RPT$FILE,PRNTLIN1     TARGET TEXT.
         MVC   PRNTLIN2+1(80),0(R11) PRINT THE RECORD CONTAINING THE
         PUT   RPT$FILE,PRNTLIN2     TEXT.
         PUT   RPT$FILE,BLNKLINE
         AP    LINCOUNT(2),THREE(1)  INCREMENT LINE COUNTER.
         CP    LINCOUNT(2),PAGESIZE(2)  PAGE SIZE REACHED?
         BL    NOTFOUND
         PUT   RPT$FILE,PRNTHDR2     IF YES PRINT THE UTILITY HEADER
         PUT   RPT$FILE,BLNKLINE
         SP    LINCOUNT(2),LINCOUNT(2)  AND RESET LINE COUNTER.
NOTFOUND BXLE  R2,R8,NEXTCHR         GO THRU RECORD CHAR BY CHAR.
         BXLE  R11,R4,NEXTREC        GO THRU BLOCK RECORD BY RECORD.
         B     NEXTBLK               GO THRU ALL MEMBER BLOCKS.
**********************  E N D   O F   S C A N   L O G I C  ************
EOFMMBR  DS    0H
         ICM   R7,B'1111',8(R6)      SET R6 TO POINT TO THE NEXT
         A     R6,TWELVE             MEMBER ENTRY
         N     R7,MASK1
         SLL   R7,1
         AR    R6,R7
         LA    R8,12                 PLACE FOR MORE ENTRIES IN THE BLK?
         CR    R6,R8
         BL    TSTLSTDB              NO, TEST FOR LAST DIRECTORY BLK.
         B     NXTMMBR               YES, READ NEXT MEMBER
TSTLSTDB CLC   LAST,YES              IS BLOCK READ LAST DIRECTORY BLK?
         BE    DIREND                YES, END THE SCAN PROCESS.
         B     GETNEXT               NO, CONTINUE WITH THE NEXT BLOCK.
DIREND   DS    0H                    SCAN ENDED.
         CLI   FOUNDFLG,C'Y'         TEST FOUND FLAG & DISPLAY THE
         BE    FOUNDTXT              FOOTER.
         PUT   RPT$FILE,PRNTLIN3
         B     EOF
FOUNDTXT PUT   RPT$FILE,PRNTLIN4
EOF      DS    0H
         CLOSE (SCANTEXT,,DIR$FILE,,RPT$FILE) CLOSE FILES
         CLOSE (PDS$FILE)
         L     13,SAVEAREA+4         LOAD CALLER'S R13
         LM    14,12,12(13)          RESTORE THE REGISTERS
         LA    15,0(0,0)             LOAD RETURN CODE
         BR    14                    RETURN
SAVEAREA DS    18F                     SAVE AREA
PRNTHDR0 DS    0CL81                 LINE 1 OF UTILITY TITLE
         DC    C'1'
         DC    CL80' TARGET TEXT :'
PRNTHDR1 DS    0CL81                 LINE 2 OF UTILITY TITLE
         DC    C' '
INTEXT   DC    80C' '                  FILTERED TARGET TEXT
PRNTHDR2 DS    0CL81                 LINE 3 OF UTILITY TITLE
         DC    C'1'
         DC    CL51'PDS SCAN UTILITY'
         DC    CL6' TIME'
HH       DC    2C' '
         DC    CL1':'
MM       DC    2C' '
         DC    CL1':'
SS       DC    2C' '
         DC    CL8'   DATE'
DDD      DC    3C' '
         DC    CL1' '
YY       DC    2C' '
         DC    CL1' '
PRNTLIN1 DC    CL81' MEMBER='
PRNTLIN2 DC    81C' '
BLNKLINE DC    81C' '
PRNTLIN3 DC    CL81' ***  TARGET  TEXT  NOT  FOUND  IN  DATA  SET  ***'
PRNTLIN4 DC    CL81' ***  TARGET  TEXT  WAS  FOUND  IN  DATA  SET  ***'
DIRBLK   DS    0CL256
LAST     DC    8CL1' '
         DC    248CL1' '
TIMEFLD  DS    0CL7
H        DC    2C' '
M        DC    2C' '
S        DC    2C' '
         DS    1C' '
DATEFLD  DS    0CL5
Y        DC    2C' '
D        DC    3C' '
FOUNDFLG DC    C' '
YES      DC    8X'FF'
NULENTRY DC    8X'00'
SCANIN   DS    0CL80
         DC    80C' '
SCANTAB1 DC    256X'FF'
         ORG   SCANTAB1+X'40'
         DC    X'00'
         ORG   SCANTAB1+X'7D'
         DC    X'CC'
         ORG
SCANTAB2 DC    256X'00'
         ORG   SCANTAB2+X'7D'
         DC    X'CC'
         ORG
TRTINSTR TRT   0(0,R1),SCANTAB2
CLCINSTR CLC   INTEXT(0),0(R2)
FULWORD  DS    0F
MASK1    DC    X'0000000F'             USED IN LOGICAL AND OPERATION.
HIBLKAD  DC    4X'00'                  TO SAVE HI BLOCK ADDRESS.
MEMBER   DC    8C' '                   TO SAVE CURRENT MEMBER NAME.
PAGESIZE DC    P'58'                    PAGE SIZE LIMIT.
LINCOUNT DC    PL2'0'                   TRACKS NUMBER OF LINES PRINTED.
THREE    DC    P'3'
TWO      DC    F'2'
TWELVE   DC    F'12'
MSG01    DC    CL81'1*** INVALID OR NO INPUT. VALID FORMAT:''TEXT''***'
MSG03    DC    CL81'1*** NO STORAGE AVAILABLE ***'
DIR$FILE DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=R,EODAD=EOF,               X
               RECFM=F,BLKSIZE=256
PDS$FILE DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=EOFMMBR
RPT$FILE DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=81,BLKSIZE=810,   X
               RECFM=FBA
SCANTEXT DCB   DDNAME=SYSUT3,DSORG=PS,MACRF=GM
         END

SAMPLE JCL

//*********************************************************************
//* THIS IS A SCAN UTILITY THAT CAN BE USED TO SCAN ANY PARTITIONED
//* DATA SET(PDS). FOLLOWING IS A DESCRIPTION OF DD STATEMENTS :
//*    SYSUT1 : DEFINES THE NAME OF PDS TO BE SCANED.
//*    SYSUT2 : THE OUTPUT REPORT OF THE SCAN UTILITY.
//*    SYSUT3 : THE TARGET TEXT TO SCANED FOR.
//*             THE TARGET TEXT MUST BE ENCLOSED WITHIN TWO QUOTES.
//*             THE TARGET TEXT CAN BE 1-78 CHARACTERS LONG. IF A QUOTE
//*             IS PART OF THE TEXT, IT SHOULD BE REPRESENTED BY TWO
//*             QUOTES.
//*********************************************************************
//STEP01  EXEC PGM=SCANPDS
//SYSPRINT DD  SYSOUT=J
//SYSABEND DD  SYSOUT=J
//SYSUT1   DD  DSN=DATA.SET.NAME,DISP=SHR
//SYSUT2   DD  SYSOUT=J
//SYSUT3   DD  *
   'TARGET TEXT'
//


Khalid S Alturairi
System Programmer
Saudi Petrochemical Company (Saudi Arabia)         € Khalid S Alturairi 1990

