Dynamically updating the EDT

The Eligible Device Table (EDT) is the table used by MVS to
determine the group of valid devices that will satisfy a given
allocation request.  This table contains all the generic device
types (eg  3380, 3480, 3277-2) defined in the MVS control
program generation as well as all the esoteric unit names (eg
TAPE, DISK, WORK) defined in the UNITNAME macro of
the MVS control program generation input.  For allocation
requests, the EDT is interrogated and a list of valid UCBs that
will satisfy the request is returned.  There are times when it
would be advantageous to change the EDT values to include or
remove devices in an esoteric list.  One way to accomplish this
is to update the EDT dynamically so that new or changed
esoteric groups can be brought into place without a system
outage.

As of MVS/XA 2.2.0, the EDT was moved from the Link Pack
Area  and was relocated to reside in extended CSA in storage
subpool 241, thereby allowing easier manipulation.  The EDT
anchor remains in the JESEDT pointer of the JES Control
Table (JESCT).  The location and content of JESEDT have
remained constant through several generations of MVS (ie it
contains the pointer to the current EDT).  The program,
ALTEREDT, is used to verify and load a new EDT (which has
been created by the MVS control program EDTGEN process)
into storage and then update the EDT pointer in the JESCT to
reflect this new EDT.  It is this pointer change that allows a
new EDT to be referenced by subsequent MVS requests.  Once
initialized, the ALTEREDT program permits a number of EDT
maintenance options including the following:

*     Leaving the new EDT active at program termination

*     Reactivating the old EDT at program termination

*     Reactivating the old EDT during normal program
      execution

*     Activating different EDTs during normal program
      execution.

Valid requests to the ALTEREDT program could include:

1     F jobname,LOAD,EDT=OLD
2     F jobname,LOAD,EDT=BK
3     F jobname,LOAD,EDT=99.

The first of the above requests would reactivate the EDT that
was active when the ALTEREDT program was started.  The
second and third requests would activate different, alternative,
EDTs (IEFEDTBK and IEFEDT99, respectively).

The ALTEREDT program should reside in an authorized
LINKLST library and should be linked with AC(1).  The
following is a sample procedure that might be used to invoke
an ALTEREDT started task.

//ALTEREDT PROC EDTID=00
//STEP1    EXEC PGM=ALTEREDT,TIME=1440,PARM='&EDTID'
//EDT      DD   DSN=SYS1.NUCLEUS,DISP=SHR
//SYSPRINT DD   SYSOUT=*
//SYSOUT   DD   SYSOUT=*

A console command of 'S ALTEREDT,EDTID=BK' could be
used to load EDT member IEFEDTBK as an alternative EDT.

The authorized library list, IEAAPFxx, should be updated to
include SYS1.NUCLEUS.  The program should always be
terminated with the MVS HALT command (ie 'P jobname') to
ensure that proper clean-up is performed.  The ALTEREDT
program provided will function properly only on an MVS/XA
2.2.0 system.  The format of the EDT for earlier releases of
MVS differs from the one allowed for by this program,
although the concepts could be used in creating a program of
similar functionality for prior MVS releases.

ALTEREDT PROGRAM SOURCE

ALTEREDT CSECT
*   DESCRIPTION   - ALTEREDT IS A PROGRAM THAT CAN BE USED TO
*                   DYNAMICALLY REPLACE THE EDT (ELIGIBLE DEVICE
*                   TABLE).  THIS ALLOWS FOR FLEXIBLE AND CHANGING
*                   UNITNAME REQUIREMENTS TO BE HANDLED EXPEDITIOUSLY
*                   WITHOUT A SYSTEM OUTAGE.
*   ATTRIBUTES    - AC(1)
*   STARTUP       - THE PROGRAM CAN BE RUN AS EITHER A STARTED TASK
*                   OR BATCH JOB
*   REQUIREMENTS  - 1. SYS1.NUCLEUS IS CONTAINED IN THE IEAAPF
*                      AUTHORIZED LIBRARY LIST.
*                   2. THE SYSTEM MUST BE AN MVS/XA 2.2.0 SYSTEM
*                      ALTHOUGH THIS CODE COULD BE ALTERED TO RUN
*                      ON EARLIER RELEASES OF MVS.
*   MACRO LIBS    - SYS1.MACLIB
*                   SYS1.AMODGEN
*   TERMINATION   - THE PROGRAM IS TERMINATED WITH THE HALT COMMAND.
*                   - EG. - P JOBNAME
*                   IF THE PROGRAM IS CANCELLED OR NOT HALTED
*                   NORMALLY, SOME GETMAINED STORAGE WILL NOT BE
*                   FREED AND THE UPDATED EDT WILL BE LEFT AS THE
*                   CURRENT FUNCTIONAL EDT.
*   MISCELLANEOUS - COMMANDS CAN BE ENTERED THROUGH THE CONSOLE TO
*                   ALTER THE EDT ENVIRONMENT AFTER THE INITIAL UPDATE
*                   REQUEST.  THE FOLLOWING ARE THE VALID MODIFY
*                   COMMANDS ACCEPTED BY THE PROGRAM:
*                   F JOBNAME,LOAD,EDT=XX
*                   - EG. - F ALTEREDT,LOAD,EDT=BK
*                           - THIS MODIFY COMMAND WILL CAUSE IEFEDTBK
*                             FROM SYS1.NUCLEUS TO BE LOADED AS THE
*                             CURRENT ACTIVE EDT
*                   - EG. - F ALTEREDT,LOAD,EDT=OLD
*                           - THIS MODIFY COMMAND WILL CAUSE THE
*                             ORIGINAL EDT TO BE RELOADED
         $REQU
         STM   R14,R12,12(R13)       SAVE INCOMING ENVIRONMENT
         LR    R10,R15               SET ...
         USING ALTEREDT,R10,R11         UP ...
         LA    R11,4095(,R10)              MODULE ...
         LA    R11,1(,R11)                    ADDRESSABILITY
         ST    R13,SAVEAREA+4        SAVE OLD SAVEAREA
         LA    R13,SAVEAREA          GET NEW SAVEAREA
         ST    R1,INPARMS            SAVE INCOMING PARAMETERS
         XC    OLDEDT(4),OLDEDT      CLEAR AREA
         XC    MODADDR(4),MODADDR    CLEAR AREA
         XC    FLAG(4),FLAG          CLEAR AREA
         OPEN  (OUTPUT,OUTPUT)       OPEN MESSAGE DATASET
         TM    OUTPUT+48,X'10'       SUCCESSFUL?
         BO    GETPARMS              YES - GET PARAMETERS
         WTO   'EDTUPD21 - ERROR OPENING SYSOUT DATASET OR SYSOUT DD HAX
               S BEEN OMITTED.',ROUTCDE=(11)
         L     R15,=F'8'             SET RETURN CODE
         B     END                   GO END
GETPARMS L     R1,INPARMS            GET PARAMETERS
         L     R2,0(,R1)             GET ADDRESS OF FIRST PARAMETER
         XR    R3,R3                 CLEAR R3
         LH    R3,0(,R2)             GET LENGTH OF FIRST PARAMETER
         LTR   R3,R3                 ANY PARAMETER?
         BZ    DEFAULT               NO - SET DEFAULT
         C     R3,=F'2'              LENGTH TWO?
         BNE   PARMERR1              NO - WE HAVE A PARAMETER ERROR
         LA    R2,2(,R2)             POINT PAST LENGTH
*  MAKE SURE THAT THE EDT SUFFIX IS VALID.
         CLI   0(R2),C'A'            VALID SUFFIX?
         BL    PARMERR2              NO - WE HAVE A PARAMETER ERROR
         CLI   0(R2),C'9'            VALID SUFFIX?
         BH    PARMERR2              NO - WE HAVE A PARAMETER ERROR
         CLI   1(R2),C'A'            VALID SUFFIX?
         BL    PARMERR2              NO - WE HAVE A PARAMETER ERROR
         CLI   1(R2),C'9'            VALID SUFFIX?
         BH    PARMERR2              NO - WE HAVE A PARAMETER ERROR
         MVC   EDTID(2),0(R2)        MOVE IN EDT SUFFIX
DEFAULT  EQU   *
         MVI   FLAG,X'00'            RESET FLAG
*   VERIFY THE INCOMING EDT TO CHECK FOR ANY UCB MISMATCHES.
         LA    R1,EDTPARM            GET PARAMETER ADDRESS
         LINK  EP=IEFEB400           EXECUTE VERIFICATION ROUTINE
         LTR   R15,R15               VERIFIED O.K.?
         BNZ   VERERROR              NO - ISSUE ERROR AND END
         MVC   EDTMEM+6(6),EDTID     MOVE IN EDT ID
*   OPEN THE DATASET WHICH CONTAINS THE NEW EDT.  VERIFY THAT THE
*   MEMBER EXISTS AND DETERMINE ITS SIZE.  OBTAIN THE REQUIRED CSA
*   STORAGE AND LOAD THE MODULE AT THIS LOCATION.
         OPEN  PDSIN                 OPEN DATASET
         TM    PDSIN+48,X'10'        SUCCESSFUL?
         BZ    OPENERR               NO - ISSUE ERROR AND END
         MVC   BLDLLIST+4(8),EDTMEM  SET MEMBER NAME
         BLDL  PDSIN,BLDLLIST        FIND DIRECTORY ENTRY
         LTR   R15,R15               MEMBER FOUND?
         BNZ   NOMEMERR              NO - ISSUE ERROR
         XR    R3,R3                 CLEAR R3
         ICM   R3,B'0111',BLDLLIST+28 GET MODULE LENGTH
         ST    R3,MODLEN             SAVE MODULE LENGTH
         L     R14,=A(X'80000000'+*+6) SET BRANCH ADDRESS
         BSM   R0,R14                ESTABLISH AMODE=31
         MODESET KEY=ZERO,MODE=SUP   GET AUTHORIZED
         GETMAIN RU,LV=(3),SP=241,LOC=ANY GET TABLE AREA STORAGE
         LTR   R15,R15               GOT STORAGE O.K.?
         BNZ   GETERROR              NO - ISSUE ERROR
         ST    R1,MODADDR            SAVE MODULE ADDRESS
         LR    R3,R1                 GET MODULE ADDRESS
         LOAD  EPLOC=EDTMEM,DCB=PDSIN,ADDR=(3) LIBRARY MUST BE APFAUTH
         LTR   R15,R15               EDT LOADED O.K.?
         BNZ   LOADERR               NO - ISSUE ERROR
         MODESET KEY=NZERO,MODE=PROB GET BACK TO NORMAL
         CLOSE PDSIN                 CLOSE DATASET
*   MAKE SURE THAT THE EDT WE HAVE LOADED MATCHES THE FORMAT OF AN
*   MVS/XA 2.2.0 EDT.
         CLC   0(3,R3),=C'EDT'       CORRECT LEVEL OF EDT?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         CLI   3(R3),X'02'           CORRECT LEVEL OF EDT?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         MVC   EDTLUVSP(32),X'1C'(R3) MOVE IN TABLE POINTERS
         L     R4,EDTLUVSP           GET LOOKUP VALUE TABLE POINTER
         CLC   0(8,R4),=C'LUVTAB  '  LOOKUP VALUE TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         L     R4,EDTGENSP           GET GENERIC SECTION TABLE POINTER
         CLC   0(8,R4),=C'GENTAB  '  GENERIC SECTION TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         L     R4,EDTGRPPP           GET GROUP PTR SECTION TABLE PTR
         CLC   0(8,R4),=C'GPPTAB  '  GROUP PTR SECTION TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         L     R4,EDTGRPSP           GET GROUP SECTION TABLE POINTER
         CLC   0(8,R4),=C'GRPTAB  '  GROUP SECTION TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         L     R4,EDTUCBSP           GET DEVICE SECTION TABLE POINTER
         CLC   0(8,R4),=C'DEVTAB  '  DEVICE SECTION TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         L     R4,EDTPREFP           GET DEVICE PREFERENCE TBL POINTER
         CLC   0(8,R4),=C'PREFTAB '  DEVICE PREFERENCE TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         L     R4,EDTTAPEP           GET TAPE DEVICE TABLE POINTER
         CLC   0(8,R4),=C'TAPTAB  '  TAPE DEVICE TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         L     R4,EDTMSKTP           GET DEVICE MASK TABLE POINTER
         CLC   0(8,R4),=C'GMSTAB  '  DEVICE MASK TABLE HEADER?
         BNE   EDTERROR              NO - ISSUE ERROR AND END
         LA    R14,*+6               SET BRANCH ADDRESS
         BSM   R0,R14                ESTABLISH AMODE=24
         L     R4,16                 GET CVT ADDRESS
         L     R4,CVTJESCT-CVT(,R4)  GET JESCT ADDRESS
         ST    R4,PTRJESCT           SAVE JESCT ADDRESS
         L     R5,JESEDT-JESCT(,R4)  LOAD OLD EDT ADDRESS
         ST    R5,OLDEDT             SAVE IT
         ST    R5,DBL2               PUT IN STORAGE
         UNPK  DBL1(9),DBL2(5)       UNPACK IT
         NC    DBL1(8),=8X'0F'       CLEAR HIGH NIBBLES
         TR    DBL1(8),=C'0123456789ABCDEF'
         MVC   EDTMSG01+24(8),DBL1   MOVE IN OLD ADDRESS
         ST    R3,DBL2               PUT IN STORAGE
         UNPK  DBL1(9),DBL2(5)       UNPACK IT
         NC    DBL1(8),=8X'0F'       CLEAR HIGH NIBBLES
         TR    DBL1(8),=C'0123456789ABCDEF'
         MVC   EDTMSG01+46(8),DBL1   MOVE IN NEW ADDRESS
*   CHECK TO SEE IF UPDATE SHOULD CONTINUE
REDO     XC    ECBAREA(4),ECBAREA    CLEAR ECB
         LA    R6,ECBAREA            GET ECB ADDRESS
         MVI   WTOREPLY,C' '         PRIME REPLY AREA
         LA    R7,WTOREPLY           GET REPLY AREA ADDRESS
         WTOR  'EDTUPD05 - CONTINUE WITH EDT UPDATE (Y/N)?',           X
               (R7),1,(R6),ROUTCDE=(1)
         WAIT  ECB=ECBAREA           WAIT FOR REPLY
         OI    0(R7),X'40'           SET TO UPPER CASE
         CLI   0(R7),C'Y'            CONTINUE WITH UPDATE?
         BE    UPDATE                YES - GO UPDATE
         CLI   0(R7),C'N'            CONTINUE WITH UPDATE?
         BE    ALLDONE               NO - ALL DONE
         B     REDO                  UNRECOGNIZED RESPONSE - GO AGAIN

The remaining source code for the program ALTEREDT will
be published in next month's issue of MVS Update.

                                                                   € Xephon 1990


