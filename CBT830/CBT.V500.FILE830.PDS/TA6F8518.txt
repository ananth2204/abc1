Creating files from stem variables

      frv = STMFILE(ddname,qualifier,stem)

Example ONE

      frv = STMFILE('SYSIN',SYSVAR('SYSUID'),S.)

Example TWO

      frv = STMFILE('SYSIN','TEST.FILE',S.)

/* rexx */
s.1 = " COPY INDD=DD1,OUTDD=DD2"
s.2 = " EXCLUDE MEMBER=EDITPGM"
s.0 = 2
frv = STMFILE('SYSIN','TEST',S.)
IF frv = 0
  THEN DO
    "ALLOC F(SYSPRINT) DA(*) REUS"
    "ALLOC F(DD1) DA('indsn') SHR REUS"
    "ALLOC F(DD2) DA('outdsn') SHR REUS"
    "CALL 'linklib(IEBCOPY)'"
  END
  ELSE SAY 'STMFILE RC:' frv

STMFILE SOURCE code

         TITLE 'REXX - Create output file from stem'
STMFILE  CSECT
STMFILE  AMODE 31
STMFILE  RMODE 24
         BAKR  R14,0                 save regs
         BASSM R12,0                 set base register
         USING *,R12
         B     *+26                  program identifier
         DC    CL8'STMFILE'
         DC    CL8'&SYSDATE',C'/'    compilation date
         DC    CL5'&SYSTIME'         compilation time
         LA    R13,SA                set internal save area
         MVC   4(4,R13),=C'F1SA'
         USING EFPL,R1
         L     R11,EFPLEVAL          PTR(evaluation block)
         L     R11,0(R11)            A(evaluation block)
         USING EVALBLOCK,R11
         L     R10,EFPLARG           PTR(argument list)
         USING ARGTABLE_ENTRY,R10
         LR    R9,R0                 A(environment block)
         USING ENVBLOCK,R9
         L     R9,ENVBLOCK_IRXEXTE
         USING IRXEXTE,R9
         LA    R2,8                  preload return code
* DD-name
         LM    R3,R4,ARGTABLE_ARGSTRING_PTR
* R3: A(argument); R4: L(argument)
         LTR   R4,R4
         BNH   EXIT                  parameter missing or null
         LA    R0,L'DDNAME
         CR    R4,R0
         BH    EXIT                  parameter too long
         STH   R4,P01L
         MVC   DDNAME,=CL8' '        blank <DDNAME>
         SH    R4,=H'1'              LC(argument)
         MVC   DDNAME(0),0(R3)
         EX    R4,*-6
* qualifier
         LA    R10,8(R10)            second parameter
         LM    R3,R4,ARGTABLE_ARGSTRING_PTR
* R3: A(argument); R4: L(argument)
         LTR   R4,R4
         BNH   EXIT                  parameter missing or null
         CH    R4,=AL2(L'DSN)
         BH    EXIT                  parameter too long
         MVI   QUALIFER,C' '         blank <QUALIFER>
         MVC   QUALIFER+1(L'QUALIFER-1),QUALIFER
         SH    R4,=H'1'              LC(argument)
         MVC   QUALIFER(0),0(R3)
         EX    R4,*-6
         CH    R4,=AL2(L'QUALIFER)
         LA    R4,DSN+1(R4)
         MVI   P04CODE,#CATLG
         MVC   P09LEN,=H'8'
         MVC   P09CLASS,=CL8'STANDARD'
         BH    NONTEMP               fully-qualified dataset name
* create temporary DS-Name
* <qualifier>.Dyyyyddd.Thhmmss.TEMP
* management class
         MVI   P04CODE,#DELETE
         MVC   P09LEN,=H'4'
         MVC   P09CLASS,=CL8'WORK'
         USING TEMPNAME,R4
         TIME  DEC,TOD,LINKAGE=SYSTEM
         UNPK  XYYYYDDDX,DATE(5)
         MVC   QD,=C'.D'
         UNPK  HHMMSSX,TOD(4)
         MVC   QT,=C'.T'
         MVC   TEMP,=C'.TEMP'
         LA    R4,TEMPNAMEL(R4)
NONTEMP  LA    R0,DSN
         SR    R4,R0
         STH   R4,P02L               L(DSNAME)
* stem
         LA    R10,8(R10)            third parameter
         LM    R3,R4,ARGTABLE_ARGSTRING_PTR
* R3: A(argument); R4: L(argument)
         LTR   R4,R4
         BNH   EXIT                  parameter missing or null
         LA    R0,L'STEM
         CR    R4,R0
         BH    EXIT                  parameter too long
         MVI   STEM,C' '             blank <STEM>
         MVC   STEM+1(L'STEM-1),STEM
         SH    R4,=H'1'              LC(argument)
         MVC   STEM(0),0(R3)
         EX    R4,*-6
* append trailing '.' (if missing)
         LA    R1,STEM(R4)
         CLI   0(R1),C'.'
         BE    *+12
         MVI   0(R1),C'.'
         LA    R4,1(R4)
         LA    R4,1(R4)
         STH   R4,STEML
* get <stem.>0
         MVC   VN,STEM
         LH    R1,STEML
         LA    R1,VN(R1)
         MVC   0(2,R1),=C'0 '
         BAL   R14,GETVAR
*  R3: A(variable)
*  R4: L(variable)
         LA    R2,24                 preload return code
         LTR   R4,R4
         BZ    EXIT                  omitted
         BCTR  R4,0
         EX    R4,EXPACK
         ZAP   NRECS,D
         BZ    EXIT                  error
         ZAP   CT,=P'0'
* FREE (UNALLOC)
         MVI   S99VERB,X'02'
         MVC   S99TXTPP,=A(S99TUPL1)
         LA    R1,S99RBPTR
         SVC   99
* ALLOC
         MVI   S99VERB,X'01'
         MVC   S99TXTPP,=A(S99TUPL2)
         LA    R1,S99RBPTR
         SVC   99
         LTR   R15,R15
         BZ    DYNOK
* SEDYNALC (DYNALLOC) error
         LA    R2,12                 preload return code
         B     EXIT
DYNOK    LA    R1,FILE
         USING IHADCB,R1
         MVC   DCBDDNAM,DDNAME
         LA    R2,16                 preload return code
         OPEN  (FILE,(OUTPUT))
         LTR   R15,R15
         BNZ   EXIT
GETLOOP  LA    R2,20
         LA    R15,*+10
         O     R15,=X'80000000'
         BSM   R0,R15             set AMODE=31
         AP    CT,=P'1'
         CP    CT,NRECS
         BH    EOJ
         MVC   WK,=X'402020202020'
         EDMK  WK,CT
         MVC   VN,STEM
         LH    R15,STEML
         LA    R15,VN(R15)
         MVC   0(8,R15),0(R1)
         BAL   R14,GETVAR
*  R3: A(variable)
*  R4: L(variable)
         LTR   R15,R15
         BNZ   EXIT                  error
         LTR   R4,R4                 null record
         BZ    EXIT                  error
         LR    R14,R3                A(data)
         LR    R15,R4                L(data)
         O     R15,=X'40000000'      pad character = blank
         LA    R0,IOAREA
         LA    R1,L'IOAREA
         MVCL  R0,R14                move data
         LA    R15,*+6
         BSM   R0,R15                set AMODE=24
         PUT   FILE,IOAREA
         B     GETLOOP
EOJ      DS    0H
         LA    R15,*+6
         BSM   R0,R15                set AMODE=24
         CLOSE FILE
         LA    R2,0                  normal return
         CP    CT,=P'0'
         BNE   *+8
         LA    R2,4                  normal return (empty stack)
EXIT     DS    0H
         LA    R15,*+10
         O     R15,=X'80000000'
         BSM   R0,R15                set AMODE=31
         CVD   R2,D                  set function return value
         MVC   WK,=X'402020202120'
         LA    R1,WKE
         EDMK  WK,D+5
         LA    R15,WK+L'WK
         SR    R15,R1                L(result)
         ST    R15,EVALBLOCK_EVLEN   entry size
         BCTR  R15,0                 LC(result)
         EX    R15,EXMOVE
         LA    R15,0                 normal function return
         PR    ,                     program end
EXMOVE   MVC   EVALBLOCK_EVDATA(0),0(R1)
EXPACK   PACK  D,0(0,R3)
         TITLE 'Subroutines'
GETVAR   ST    R14,RSA
* Function: Get REXX variable
* input:
*  <VN>: variable name
* output:
*  R3: A(variable)
*  R4: L(variable)
         BAL   R14,GETVNL         get L(VN)
         LA    R6,IRX_SHVBLOCK
         USING SHVBLOCK,R6
         ST    R0,SHVNAML         L(name), normalized
         LA    R1,VN              A(name)
         ST    R1,SHVNAMA
         MVI   SHVCODE,SHVFETCH   Fetch
         ST    R3,SHVVALA         A(buffer)
         ST    R3,SHVBUFL         L(buffer)
         L     R15,IRXEXCOM       A(IRXEXCOM)
         CALL (15),(IRX_IRXEXCOM,0,0,IRX_SHVBLOCK),VL
         L     R4,SHVVALL         L(data)
         L     R14,RSA
         TM    SHVRET,SHVNEWV     new variable?
         BZR   R14                :no, return
         SR    R4,R4              else zeroize length
         BR    R14                return
RSA      DS    A
GETVNL   DS    0H
* Function: Determine actual (normalized) length of name
* input: <VN> - name
* output: R0: L(name), normalised
         LA    R1,L'VN
         SR    R0,R0              counter
         LA    R15,VN
GETVNL1  CLI   0(R15),C' '
         BER   R14                end found
         AH    R0,=H'1'           increment counter
         LA    R15,1(R15)         bump address
         BCT   R1,GETVNL1
         BR    R14
         TITLE 'Data areas'
RC       DC    H'0'
SA       DS    18F
CT       DC    PL3'0'
D        DS    0D,PL8
NRECS    DS    PL3
* edit-workareas
WK       DS    CL6
WKE      EQU   *-1
         DC    CL8' ' filler
FILE     DCB   DSORG=PS,DEVD=DA,LRECL=80,BLKSIZE=4000,MACRF=PM
IOAREA   DS    CL80
STEML    DS    H
STEM     DS    CL16
VN       DS    2CL16
IRX_IRXEXCOM DC CL8'IRXEXCOM'
IRX_SHVBLOCK DS (SHVBLEN)X'0'
S99RBPTR DC    A(S99RB+X'80000000')
S99RB    DS    0A
S99RBLN  DC    AL1(20)
S99VERB  DS    X
S99FLAG1 DC    H'0'
S99ERROR DS    H
S99INFO  DS    H
S99TXTPP DS    A
         DC    A(0)
S99FLAG2 DC    F'0'
* DYNALLOC arguments
S99TUPL1 DC    A(P01+X'80000000')
S99TUPL2 DC    A(P01,P02,P03,P04,P05,P06,P07,P08,P09+X'80000000')
P01      DC    XL2'0001',HL2'1'
P01L     DS    HL2
DDNAME   DS    CL8
P02      DC    XL2'0002',HL2'1'
P02L     DS    HL2
DSN      DS    CL44
         ORG   DSN
QUALIFER DS    CL8
         ORG
P03      DC    XL2'0004',HL2'1,1',X'04' NEW
P04      DC    XL2'0005',HL2'1,1'       DELETE/CATLG
P04CODE  DC    X'00'
#CATLG    EQU   X'02'
#DELETE   EQU   X'04'
P05      DC    XL2'0007',HL2'0'         TRK
P06      DC    XL2'000A',HL2'1,3',AL3(1) primary quantity (PRIQ)=1
P07      DC    XL2'000B',HL2'1,3',AL3(10) secondary quant. (SECQ)=10
P08      DC    XL2'0049',HL2'1,1',X'90' RECFM=FB
P09      DC    XL2'8005',HL2'1' MGMTCLAS=WORK or STANDARD
P09LEN   DS    HL2'8' 8 or 4
P09CLASS DS    CL8'STANDARD'
TOD      DS    XL8 HHMMSS..
DATE     DS    XL4 0YYYYDDD
         DS    XL4
VA       DS    A
VL       DS    F
FRC      DS    F
         LTORG
         TITLE 'DSECTs'
TEMPNAME DSECT
QD       DS    C'.D'
         ORG   *-1
XYYYYDDDX DS   C'XYYYYDDDX'
         ORG   *-1
QT       DS    C'.T'
HHMMSSX  DS    C'HHMMSSX'
         ORG   *-1
TEMP     DS    C'.TEMP'
TEMPNAMEL EQU  *-TEMPNAME
         IRXEFPL
         IRXENVB
         IRXEXTE
         IRXEVALB
         IRXARGTB
         IRXSHVB
         DCBD  DSORG=PS,DEVD=DA
         END


Anthony Rudd
Technical Consultant (Germany)                                     c A S Rudd 19

