A simple debugging facility

The following macro, DEBUG, illustrates how an ESPIE
environment can be set up and used to provide a simple
debugging facility for Assembler programs. The ESPIE routine
is given control after an 0C1 interrupt and outputs the contents
of the registers at the time of the interrupt via WTO. Execution
of the program is then resumed at the next instruction.

The following macro invocations are available:

o      DEBUG ON will establish the 0C1 intercept

o      DEBUG OFF will disable the intercept

o      DEBUG will add a DC X'0000' to your code to generate
      an 0C1.

o      DEBUG CODE will add the necessary ESPIE routine
      (code to format the registers etc).

You can add as many 0C1 interrupts as required to your
program. You can control the maximum number of 0C1
interrupts to be processed by adjusting the value of $DMAX if
required (it is set at 10 in this example).

         MACRO
         DEBUG        &P1
         AIF ('&P1' EQ 'CODE').CODE
         AIF ('&P1' EQ 'ON').ON
         AIF ('&P1' EQ 'OFF').OFF
         AIF ('&P1' NE '').ERROR
         DC    X'0000'                  generate an 0C1
         MEXIT
.ON      ANOP
         ESPIE SET,D$CODE,(1)           establish ESPIE
         ST    R1,D$TOK                 save token for reset
         MEXIT
.OFF     ANOP
         ESPIE RESET,D$TOK              cancel our ESPIE environment
         MEXIT
.CODE    ANOP
D$CODE   AP    D$COUNT,D$P1             +1 to counter
         CP    D$COUNT,D$MAX            too many ?
         BH    D$EXIT                   yes - ignore interrupt
         MVC   D$HEAD+11(4),D$PATN      edit pattern
         ED    D$HEAD+11(4),D$COUNT     convert to display
         LA    R1,8(,R1)                r1 --> registers in EPIE
         LA    R2,16                    loop counter
         LA    R4,D$REGS
D$LOOP1  UNPK  D$ZONED(9),0(5,R1)       unpack
         NC    D$ZONED(8),D$ZOFF        turn off zones
         TR    D$ZONED(8),D$TRTAB       convert to character
         MVC   4(8,R4),D$ZONED
         LA    R4,13(,R4)               r4 --> next register slot
         LA    R1,4(,R1)                r1 --> next register in EPIE
         BCT   R2,D$LOOP1
         MVI   D$WTO+4,C' '
         MVC   D$WTO+5(L'D$REGS-1),D$WTO+4
         WTO   MF=(E,D$WTO)
         MVC   D$WTO+4(L'D$HEAD),D$HEAD
         WTO   MF=(E,D$WTO)
         LA    R2,4                     loop counter
         LA    R3,D$REGS
D$LOOP2  MVC   D$WTO+4(L'D$REGS),0(R3)
         WTO   MF=(E,D$WTO)
         LA    R3,L'D$REGS(,R3)         r3 --> next line of text
         BCT   R2,D$LOOP2
         CP    D$COUNT,D$MAX            reached our max ?
         BNE   D$EXIT
         MVI   D$WTO+4,C' '
         MVC   D$WTO+5(L'D$REGS-1),D$WTO+4
         WTO   MF=(E,D$WTO)
         MVC   D$WTO+4(L'D$MSG),D$MSG
         WTO   MF=(E,D$WTO)             reached maximum message
D$EXIT   BR    R14                      resume execution (after 0C1)
D$TOK    DC    F'0'
D$ZONED  DC    CL9' '
D$ZOFF   DC    8X'0F'
D$MAX    DC    PL2'10'                  maximum number of interrupts
D$P1     DC    PL2'1'
D$COUNT  DC    PL2'0'                   no of interrupts so far
D$TRTAB  DC    C'0123456789ABCDEF'      translate table
D$HEAD   DC    C'Debug count    '
D$MSG    DC    C'Debug maximum reached'
D$PATN   DC    X'40202021'
D$REGS   DC    C'R0  xxxxxxxx R1  xxxxxxxx R2  xxxxxxxx R3  xxxxxxxx '
         DC    C'R4  xxxxxxxx R5  xxxxxxxx R6  xxxxxxxx R7  xxxxxxxx '
         DC    C'R8  xxxxxxxx R9  xxxxxxxx R10 xxxxxxxx R11 xxxxxxxx '
         DC    C'R12 xxxxxxxx R13 xxxxxxxx R14 xxxxxxxx R15 xxxxxxxx '
D$WTO    WTO   '                                                     ',X
               MCSFLAG=HRDCPY,MF=L
         MEXIT
.ERROR   ANOP
         MNOTE 4,'&P1 is invalid'
         MEND

David Welch (New Zealand)                                    c Xephon 1993

