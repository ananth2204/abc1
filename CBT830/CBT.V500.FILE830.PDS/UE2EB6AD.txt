How to develop a JES2 external writer

An external writer is a program that reads SYSOUT from the
JES2 spool.  A number of software packages are available that
operate in this way and IBM supplies a basic external writer
with JES2.  Several articles have been published showing how
to code exits for the IBM-supplied external writer to convert it
into a more flexible utility.  However, it is rather better to code
your own external writer and in fact this is not as difficult as it
seems.

To acquire SYSOUT from JES2 it is first necessary to use the
JES2 subsystem interface request type 'SO'.  This allows
selection criteria to be passed (such as SYSOUT class) and
returns the name of the first available JES2 subsystem dataset
to match the criteria.  This is not a real dataset but a subsystem
dataset name formatted as 'JES2.JOBnnnnn.Pnnnnnnn'.  The
second qualifier is the job number and the third is the part of
the output (PSnnnnnn pre-JES2 3.1.1).  This represents a
selectable piece of SYSOUT residing on the spool.

Having obtained the subsystem dataset name for the next
SYSOUT to be processed it is necessary to allocate it
dynamically via SVC 99.  The DYNALLOC SVC has an
option to route the request to a subsystem (in this case JES2)
although the caller must run authorised to use it.  With the
subsystem dataset now allocated to a DDNAME, it can be read
with normal QSAM macros such as OPEN, GET, and CLOSE.
In fact the HASP Access Method (HAM) is invoked by QSAM
to read the spool records but the program can assume them to
be normal data records in VB format.  The records can be
processed as required, for example analysed and then stored.
At the end of file, the JES2 dataset is closed and then
dynamically unallocated with the delete option.  This purges
the subsystem dataset from the JES2 spool making the next
available.

This process is repeated.  The end of a complete job can be
detected by the job number changing or no more available
SYSOUT being indicated.  Particular parts of job SYSOUT can
be recognised by the number of the dataset-id (part of output),
for example the JCL log is P0000002.

The writer must run APF authorised but has no other
restrictions on its environment, unlike the IBM supplied-
program.  If SYSOUT is read that contains invalid JES2 record
count information, then the SYNAD exit will be called or a
S001 abend will occur if it is not present.  This can happen if
JES2 went down whilst writing SYSOUT records and,
although it is rare, can be allowed for by coding
SYNAD=EOF, where EOF is the program label used for
EODAD (end of file).  Thus if invalid data occurs the writer
will simply ignore it without abending S001.

Selection of SYSOUT can be performed on a variety of criteria
which may be combined, such as a certain SYSOUT class and
destination.  If no SYSOUT is available then a wait can be
performed before retrying.  Only non-held output is available
to be selected by JES2.

Developing an external writer in this way gives the installation
complete control over what it does and also provides maximum
efficiency.  The use of subsystem interfaces means that there is
no dependency on JES2 internal formats.  All spool access is
done by JES2 itself.  The DCB used to read the JES2 file
should be coded as:

    DSORG=PS,MACRF=GM,RECFM=VB,LRECL=256,BLKSIZE=4096,
    EODAD=EOF,SYNAD=EOF,DDNAME=INJES

During development issue WTOs to record the JES2
information passed back from the subsystem interface to verify
the correct processing.

The logic of the external writer main routine could be as below:

                Initialise
      L1        Wait 30 seconds
                If operator close command then goto L4
                Request next available JES2 sysout dataset
(If jobid changed or none available then it is the end of last job)
                If none available (SSOBRETN > 0) then goto L1
                Dynamically allocate JES2 sysout dataset
                Open JES2 sysout file for INPUT
      L2        Read JES2 sysout record
                If end of file goto L3 (EODAD).
                Process JES2 sysout record as required
                Goto L2
      L3        Close JES2 sysout file
                Dynamically unallocate JES2 sysout dataset
                Goto L1
      L4        Terminate

This logic does not include the allocation and writing of actual
datasets to store the SYSOUT or other installation-specific
requirements which can be added at great length if needed.

The uses of an external writer are extremely varied but could
include the analysis and storage of production SYSOUT.  If
storing it in a PDS, one member per job-id could be used.  In
this case, dynamically allocating the dataset and member then
writing to the file with the QSAM macros is much simpler than
using BPAM.  If using a PDS  remember to consider the fact
that JES2 job-ids can be reused and therefore the member name
should be coded to ensure uniqueness - perhaps by including
characters for the month/day, or by using a sequential
numbering system indexed by a separate file.

The intention of this article is to highlight these little known
facilities rather than list pages of code, but to aid in the coding
of an actual external writer the following extracts are provided.

Selection of the JES2 dataset with a subsystem request

         LA    R10,SSOBZ          ADDRESS SSOB AREA
         USING SSOB,R10           ESTABLISH ADDRESSABILITY
         XC    SSOBEGIN(SSOBLEN1),SSOBEGIN CLEAR
         MVC   SSOBID,=C'SSOB'    AREA IDENTIFIER
         LA    R4,SSOBHSIZ        HEADER SIZE
         STH   R4,SSOBLEN         STORE INTO BLOCK
         LA    R4,SSSOSIZE        EXTENSION SIZE
         STH   R4,SSSOLEN         STORE INTO BLOCK
         LA    R4,SSSOBGN         EXTENSION ADDRESS
         ST    R4,SSOBINDV        STORE INTO HEADER
         MVC   SSSOPGMN,=C'ABCPGM  ' IDENTIFY THIS PROGRAM
         MVI   SSOBFUNC+1,SSOBSOUT FUNCTION = SELECT SYSOUT (SO)
         OI    SSSOFLG1,SSSOSCLS+SSSODST  CLASS AND DEST CRITERIA
         MVC   SSSOCLSL,=CL8'X'    SET CLASS LIST (CLASS X ONLY)
         MVC   SSSODEST,=CL8'FRED' SET DEST NAME (DEST FRED ONLY)
         MODESET KEY=ZERO,MODE=SUP
         LA    R1,ASSOB            ADDRESS REQUEST
         IEFSSREQ                  SUB-SYSTEM REQUEST
         LTR   R15,R15             TEST RETURN CODE
         BNZ   FAIL                REQUEST ERROR
         MODESET KEY=NZERO,MODE=PROB

* the following fields are now set (amongst others)
     SSOBRETN   RETURN CODE, 0 IF A DSN WAS AVAILABLE, > 0 IF NOT
     SSSODSN    SUBSYSTEM DATASET NAME SELECTED
     SSSOJOBN   JOBNAME SELECTED
* data area in program contains
SSOBZ    DC    150X'00'
ASSOB    DC    AL1(X'80'),AL3(SSOBZ)
         CVT   DSECT=YES
         IEFJESCT TYPE=DSECT,MNTBL=YES
         IEFJSSOB (SO,AG,AL),CONTIG=YES

Allocation of the JES2 dataset using DYNALLOC

         MVC   DSNAME,SSSODSN     SET SUB-SYSTEM DATASET NAME
         LA    R1,RBPOINT         ADDR REQUEST BLOCK
         DYNALLOC                 SVC 99
         LTR   R15,R15            TEST RETURN CODE
         BNZ   FAIL               FAILED

* in the event of failure, examine ERROR and INFO for DAIR codes.
RBPOINT  DS    0D             POINTER TO REQUEST BLOCK
         DC    AL1(X'80'),AL3(RB)
RB       DS    0D
         DC    AL1(20)        LENGTH
         DC    AL1(S99VRBAL)  REQUEST ALLOCATION
         DC    AL1(0)
         DC    AL1(0)
ERROR    DC    AL2(0)         DAIR ERROR CODE
INFO     DC    AL2(0)         DAIR INFORMATION CODE
         DC    AL4(TXTPOINT)  TEXT POINTERS ADDRESS
         DC    AL4(0)         RESERVED
         DC    AL4(0)         SPECIAL FLAGS
TXTPOINT DS    0D
         DC    AL4(DSNAM)     DSNAME
         DC    AL4(DDNAME)    DDNAME
         DC    AL1(X'80'),AL3(SSREQ)  SUBSYSTEM REQUEST
DSNAM    DC    AL2(DALDSNAM)
         DC    AL2(1)
         DC    AL2(44)        LENGTH
DSNAME   DC    CL44' '        JES2 DATASET NAME FROM SSOB
SSREQ    DC    AL2(DALSSREQ)
         DC    AL2(1)
         DC    AL2(4)
         DC    CL4'JES2'      NAME OF JES2 SUBSYSTEM
DDNAME   DC    AL2(DALDDNAM)
         DC    AL2(1)
         DC    AL2(8)
DDN      DC    CL8'INJES   '  DDNAME TO ALLOCATE DSID TO
         IEFZB4D0
         IEFZB4D2

Unallocation of the JES2 dataset using DYNALLOC

         LA    R1,RBPOINTU    ADDRESS REQUEST BLOCK
         DYNALLOC             SVC 99
         BNZ   FAIL           FAILED
         LR    R9,R15         SAVE RETURN CODE

* in the event of failure, examine ERRORU and INFOU for DAIR codes.
RBPOINTU DS    0D             POINTER TO REQUEST BLOCK
         DC    AL1(X'80'),AL3(RBU)
RBU      DS    0D
         DC    AL1(20)        LENGTH
         DC    AL1(S99VRBUN)  REQUEST UNALLOCATION
         DC    AL1(0)
         DC    AL1(0)
ERRORU   DC    AL2(0)         DAIR ERROR CODE
INFOU    DC    AL2(0)         DAIR INFO CODE
         DC    AL4(TXTPUNAL)  TEXT POINTERS ADDRESS
         DC    AL4(0)         RESERVED
         DC    AL4(0)         SPECIAL FLAGS
TXTPUNAL DS    0D
         DC    AL4(DISP)
         DC    AL1(X'80'),AL3(UDDNAME)
UDDNAME  DC    AL2(DUNDDNAM)
         DC    AL2(1)
         DC    AL2(8)
UDDN     DC    CL8'INJES   '  DDNAME (SAME AS USED FOR ALLOC)
DISP     DC    AL2(DUNOVDSP)  DISPOSITION
         DC    AL2(1)
         DC    AL2(1)
         DC    AL1(4)         DELETE ON UNALLOCATION
         IEFZB4D0
         IEFZB4D2

Operator command interface initialisation

         EXTRACT COMM,'S',FIELDS=(COMM) GET COMMAREA ADDR
         L     R7,COMM                 ADDR OF COMMS FIELDS
         L     R8,0(R7)                COMMS ECB ADDR
         ST    R8,COMMECB              SAVE IT
         LA    R9,4(R7)                GET ORIGIN ADDRESS FOR QEDIT
         ST    R9,SAVEQ                SAVE QEDIT BASE
         ICM   R7,15,0(R9)             IS THERE START COMMAND WAITING
         BZ    BATCH                   NO BATCH EXECUTION
         QEDIT ORIGIN=(R9),BLOCK=(R7)  YES FREE START COMMAND
BATCH    EQU   *
         QEDIT ORIGIN=(R9),CIBCTR=10   ALLOW STACKED COMMANDS (10)

COMM     DC    F'0'
COMMECB  DC    F'0'
SAVEQ    DC    F'0'

Operator command interface checking

         L     R7,COMMECB             LOAD COMM ECB ADDR
         CLI   0(R7),X'00'            CHECK FOR REQUEST
         BE    CONT                   NONE YET
         L     R9,SAVEQ               LOAD QEDIT BASE
         L     R8,0(R9)               CIB ADDR
         CLI   4(R8),X'40'            IS IT STOP COMMAND (CIBVERB)
         BNE   CONT2                  NO
         WTO   'WRITER STOPPED BY OPERATOR REQUEST'
         B     RETURN                 TERMINATE
CONT2    EQU   *
         QEDIT ORIGIN=(R9),BLOCK=(R8) FREE THE CIB
         WTO   'INVALID COMMAND IGNORED'    MODIFIES ETC
CONT     EQU   *                      CONTINUE PROCESSING


                                                 € Reserved 1990

