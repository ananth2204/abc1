Macros for re-entrant/recursive programs

In the October 1988 Issue of MVS Update, an implementation
of a Last In First Out (LIFO) stack for save areas and working
storage was published. Here is a different method, using
prologue and epilogue macros for the main program and
subroutines and also for the work area DSECTs of both. These
macros provide an easy way to create re-entrant and recursive
Assembler programs. The example below shows how these
macros can be used for recursive programming. The program
processes a binary tree. The minimum parameters are a label in
front of $PROLOGM and $PROLOGS and an identification as
a positional parameter to join corresponding macro calls.

Note that parameter checking is omitted. You may add this
feature, as well as others, such as:

o      A second base register

o      Other constants, eg programmer name

o      Resetting the work area to zero

o      Propagating the main program's work area address to
      subroutines.


PROGRAMMING EXAMPLE

********************************* MAIN PROGRAM
MAINPGM  $PROLOGM MAIN,VERSION=1.1.0,RMODE=ANY,AMODE=31
         L     R7,=V(TREE)
         LA    R15,SUBRTN1        PROCESS ROOT
         CALL  (15),(=CL10'ROOT',(R7)),MF=(E,PARM)  CALL SUBROUTINE
         $EPILOGM MAIN,RC=0
********************************* CONSTANTS FOR MAIN PROGRAM
         LTORG
********************************* SUBROUTINE
SUBRTN1  $PROLOGS SUB1
         LM    R8,R9,0(R1)
         USING LEAF,R9            ADDRESS LEAF
         MVC   WTOL,WTOP
         MVC   WTOL+4+8(10),0(R8)
         MVC   WTOL+4+26(L'DATA),DATA
         WTO   ,MF=(E,WTOL)       DISPLAY DATA OF LEAF
         ICM   R7,B'1111',LEFT
         BZ    NOLEFT             NO LEFT LEAF
         LA    R15,SUBRTN1
* PROCESS LEFT LEAF, CALL SUBROUTINE RECURSIVELY
         CALL  (15),(=CL10'LEFT LEAF ',(R7)),MF=(E,PARS)
NOLEFT   DS    0H
         ICM   R7,B'1111',RIGHT
         BZ    NORIGHT            NO RIGHT LEAF
         LA    R15,SUBRTN1
* PROCESS RIGHT LEAF, CALL SUBROUTINE RECURSIVELY
         CALL  (15),(=CL10'RIGHT LEAF',(R7)),MF=(E,PARS)
NORIGHT  DS    0H
         $EPILOGS SUB1,RC=0
********************************* CONSTANTS FOR SUBROUTINE
         LTORG
WTOC     WTO   '******* .........., DATA: ....',ROUTCDE=(11),MF=L
WTOP     EQU   WTOC,*-WTOC
********************************* WORKING STORAGE FOR MAIN PROGRAM
MAINWORK $WRKPROM MAIN
PARM     CALL  ,(,),MF=L
         $WRKEPIM MAIN,LWSUB=4096 4K TOTAL WORKING STRG FOR SUBROUTINES
********************************* WORKING STORAGE FOR SUBROUTINE
SUB1WORK $WRKPROS SUB1
PARS     CALL  ,(,),MF=L
WTOL     DS    CL(L'WTOP)
         $WRKEPIS SUB1
********************************* LEAF OF TREE
LEAF     DSECT
LEFT     DS    A
RIGHT    DS    A
DATA     DS    CL4
********************************* BINARY TREE
TREE     CSECT
*                    0
*                    !
*                1---+---6
*                !       !
*              2-+-5   7-+
*              !
*              +-4
ROOT     DC    A(LEAF1,LEAF6),CL4'0000'
LEAF1    DC    A(LEAF2,LEAF5),CL4'0001'
LEAF2    DC    A(00000,LEAF4),CL4'0002'
LEAF4    DC    A(00000,00000),CL4'0004'
LEAF5    DC    A(00000,00000),CL4,0005'
LEAF6    DC    A(LEAF7,00000),CL4'0006'
LEAF7    DC    A(00000,00000),CL4'0007'
********************************* END OF PROGRAM
         END   MAINPGM


$PROLOGM MACRO

         MACRO
&NAME    $PROLOGM &ID,            PROLOGUE FOR MAIN PROGRAM            +
               &VERSION=,&RMODE=24,&AMODE=24
&NAME    CSECT
&NAME    RMODE &RMODE
&NAME    AMODE &AMODE
         AIF   ('&VERSION' EQ '').PRO0100
         B     4+1+8+15+10(,R15)  BRANCH AROUND CONSTANT
         DC    AL1(8+15+10)       LENGTH OF CONSTANT
         DC    CL8'&NAME'         CSECT NAME
         DC    CL15' &SYSDATE &SYSTIME'  TIME OF ASSEMBLY
         DC    CL10' &VERSION'    VERSION
         AGO   .PRO0200
.PRO0100 ANOP
         B     4+1+8+15(,R15)     BRANCH AROUND CONSTANT
         DC    AL1(8+15)          LENGTH OF CONSTANT
         DC    CL8'&NAME'         CSECT NAME
         DC    CL15' &SYSDATE &SYSTIME'  TIME OF ASSEMBLY
.PRO0200 ANOP
         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS
         LR    R12,R15            LOAD PROGRAM BASE
         USING &NAME,R12          TELL IT ASSEMBLER
         AIF   ('&AMODE' EQ '31').PRO0300
         GETMAIN RU,LV=L'$&ID     GET WORKING STORAGE
         AGO   .PRO0400
.PRO0300 ANOP
         GETMAIN RU,LOC=(ANY,ANY),LV=L'$&ID    GET WORKING STORAGE
.PRO0400 ANOP
         LR    R14,R1             ADDR OF NEW SAVEAREA
         CNOP  0,4
         B     *+4+4+4            BRANCH AROUND CONSTANT
         DC    A(L'$&ID-L'$$&ID)  LENGTH OF OWN WORKING STORAGE
         DC    A(L'$$&ID)         LENGTH OF FREE STRG FOR SUBROUTINES
         LM    R15,R0,*-4-4
         STM   R15,R0,72(R14)     STORE BEHIND NEW SAVEAREA
         ST    R13,4(,R14)        ADDR OF CALLER'S SAVEAREA INTO NEW SA
         ST    R14,8(,R13)        ADDR OF NEW SAVEAREA INTO CALLER'S SA
         SLR   R0,R0
         ST    R0,8(,R14)         NEW SAVEAREA NOW IS THE LAST ONE
         LM    R13,R1,8(R13)      ADDR OF NEW STRG, R14..R1 ORIGINAL
         USING $&ID,R13           ADDR OF SAVEAREA = ADDR OF WORK.STRG
         MEND


$EPILOGM MACRO

         MACRO
&NAME    $EPILOGM &ID,&RC=        EPILOGUE FOR MAIN PROGRAM
&NAME    DS    0H
         AIF   ('&RC' EQ '').EPI0200
         AIF   ('&RC'(1,1) EQ '(').EPI0100
         LA    R15,&RC            LOAD RETURN CODE (CONSTANT)
         AGO   .EPI0200
.EPI0100 ANOP
         LR    R15,&RC(1)         LOAD RETURN CODE (REGISTER)
.EPI0200 ANOP
         DROP  R13                DROP WORKING STORAGE BASE
         LR    R1,R13             ADDR OF SAVEAREA = ADDR OF WORK.STRG
         L     R13,4(,R13)        ADDR OF CALLER'S SAVEAREA
         ST    R15,16(,R13)       SET RETURN CODE
         FREEMAIN RU,A=(1),LV=L'$&ID  FREE WORKING STORAGE
         LM    R14,R12,12(R13)    RESTORE CALLER'S REGISTERS
         DROP  R12                DROP PROGRAM BASE
         BR    R14                RETURN
         MEND


$WRKPROM MACRO

         MACRO
&NAME    $WRKPROM &ID             START OF WORKING STORAGE FOR MAIN PGM
&NAME    DSECT
&ID      DS    0D
         DS    18F                SAVEAREA
         DS    F                  LENGTH OF WORKING STRG FOR MAIN PGM
         DS    F                  LENGTH OF FREE STORAGE
         MEND


$WRKEPIM MACRO

         MACRO
&NAME    &WRKEPIM &ID,&LWSUB=     END OF WORKING STORAGE FOR MAIN PGM
&NAME    DS    0D
$$&ID    DS    XL(((80+&LWSUB-1)/8+1)*8)  WORKING STRG FOR SUBROUTINES
         DS    0D
$&ID     EQU   &ID,*-&ID
         MEND


$PROLOGS MACRO

         MACRO
&NAME    $PROLOGS &ID             PROLOGUE FOR INTERNAL SUBROUTINE
&NAME    DS    0H                 START OF SUBROUTINE
         B     4+1+9(,R15)        BRANCH AROUND CONSTANT
         DC    AL1(9)             LENGTH OF CONSTANT
         DC    CL9'&NAME'         NAME OF SUBROUTINE
         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS
         LR    R12,R15            LOAD NEW PROGRAM BASE
         USING &NAME,R12          TELL IT ASSEMBLER
         L     R0,76(,R13)        LENGTH OF FREE STORAGE
         CNOP  0,4
         B     *+4+4              BRANCH AROUND CONSTANT
         DC    A(L'$&ID)          LENGTH OF WORKING STORAGE
         L     R15,*-4
         SR    R0,R15             NEW LENGTH OF FREE STORAGE
         BNM   $$$&SYSNDX         IF >= 0 THEN STORAGE IS SUFFICIENT
         ABEND X'80A'             (U2058) STORAGE IS NOT SUFFICIENT
$$$&SYSNDX DS  0H
         LR    R14,R13            INCREMENT ADDR OF STORAGE
         AL    R14,72(,R13)       BY LENGTH OF CALLER'S STORAGE
         STM   R15,R0,72(R14)     SAVE LNG OF NEW / LNG OF FREE STRG
         ST    R13,4(,R14)        ADDR OF CALLER'S SAVEAREA INTO NEW SA
         ST    R14,8(,R13)        ADDR OF NEW SAVEAREA INTO CALLER'S SA
         SLR   R0,R0
         ST    R0,8(,R14)         NEW SAVEAREA NOW IS THE LAST ONE
         LM    R13,R0,8(R13)      ADDR OF NEW STRG, R14..R0 ORIGINAL
         USING $&ID,R13           WORKING STORAGE BASE
         MEND


$EPILOGS MACRO

         MACRO
&NAME    $EPILOGS &ID,&RC=        EPILOGUE FOR INTERNAL SUBROUTINE
&NAME    DS    0H
         AIF   ('&RC' EQ '').EPI0200
         AIF   ('&RC'(1,1) EQ '(').EP10100
         LA    R15,&RC            LOAD RETURN CODE (CONSTANT)
         AGO   .EPI0200
.EPI0100 ANOP
         LR    R15,&RC(1)         LOAD RETURN CODE (REGISTER)
.EPI0200 ANOP
         DROP  R13
         L     R13,4(,R13)        ADDR OF CALLER'S SAVEAREA
         L     R14,12(,R13)       RESTORE RETURN ADDR
         LM    R0,R12,20(R13)     RESTORE CALLER'S REGISTERS
         DROP  R12                DROP PROGRAM BASE
         BR    R14                RETURN
         MEND


$WRKPROS MACRO

         MACRO
&NAME    $WRKPROS &ID             START OF WORKING STRG FOR SUBROUTINE
&NAME    DSECT
&ID      DS    0D
         DS    18F                SAVEAREA
         DS    F                  LENGTH OF WORKING STRG FOR SUBROUTINE
         DS    F                  LENGTH OF FREE STORAGE
         MEND


$WRKEPIS MACRO

         MACRO
&NAME    $WRKEPIS &ID             END OF WORKING STORAGE FOR SUBROUTINE
&NAME    DS    0D
$&ID     EQU   &ID,*-&ID
         MEND


Walter Wiedemann
Consultant (Germany)                                     c Xephon 1992

