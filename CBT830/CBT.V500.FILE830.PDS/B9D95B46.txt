Controlling program execution
It is sometimes useful to be able to restrict the execution of some programs,
for example IMASPZAP.
There are the following possible alternatives:
1    Put the program into a PDS that is not in the LINKLIST so that a job must
go through STEPLIB to use it.  You can then use RACF to control access to the
PDS.
2    Re-name the module to a name only you know (and can remember!).
3    Re-link the program including the following CSECT, which finds the RACF
user-id the job is running under and then if the user is not authorised
terminates execution.
THE CSECT
I00ZAP   CSECT
         USING I00ZAP,R15
         B     START
         DC    C'I00ZAP '
         DC    C'&SYSDATE'
         DROP  R15
START    DS    0H
         STM   R14,R12,12(R13)         SAVE REGISTERS
         BALR  R12,0                   LOAD BASE REGISTER
         USING *,R12                   ASSIGN BASE REGISTER
         ST    R13,SAVEAREA+4          BACKWARD POINTER
         LA    R14,SAVEAREA            ADDRESS OF MY SAVEAREA
         ST    R14,8(R13)              FORWARD POINTER
         LR    R13,R14                 R13 --> MY SAVEAREA
         ST    R1,PARMPTR              SAVE PARM ADDRESS
         EXTRACT ASIDNAME,'S',FIELDS=(ASID)  ASID OF THIS ASCB
         L     R3,CVTPTR               R3 ---> CVT
         USING CVT,R3                  ESTABLISH ADDRESSABILITY OF CVT
         L     R4,CVTASCBH             R4 ---> HIGH ASCB
         L     R5,CVTASCBL             R5 ---> LOW ASCB
         LA    R9,0                    CLEAR R9 FOR COUNTER
A001     EQU   *
         USING ASCB,R4                 ADDRESSABILITY FOR ASCB
         L     R10,ASCBASXB            R10  ---> ADDRESS OF ASXB
         CLC   ASCBASID,ASIDNAME+2     IS THIS OUR ASCB ?
         BE    A002                    YES - PROCESS ACEE
         L     R7,ASCBFWDP             R7 -->  ADDRESS OF NEXT ASCB
         CLR   R5,R7                   IS THIS LAST ASCB ON CHAIN ?
         BE    A00Y                    YES - GO DUMP
         LR    R4,R7                   R4 -->  ADDRESS OF NEXT ASCB
         LA    R9,1(R9)                ADD 1 TO LOOP COUNT
         ST    R9,COUNT                NUMBER OF LOOPS TAKEN
         CLC   COUNT,MAXLOOP           TOO MANY ?
         BE    A00Y                    YES - GO AND DUMP
         B     A001                    NO - CONTINUE THRU ASCB LOOP
A002     EQU   *
         USING ASXB,R10                ADDRESSABILITY OF ASXB
         L     R8,ASXBSENV             R8 ---> ADDRESS OF ACEE
         CLC   0(4,R8),=C'ACEE'        IS THIS THE ACEE ?
         BNE   A00Y                    NO - GO AND DUMP
         USING ACEE,R8
         CLC   ACEEUSRI(6),=C'I50N00'  THIS USERID OK ?
         BE    A003
*        not authorised - take whatever action required
         ...........
         ...........
         B     RETURN
A003     EQU   *
         L     R15,EXTADDR             R15 ---> MODULE TO CALL
         L     R1,PARMPTR              R1  ---> ANY PARM DATA
         BALR  R14,R15
RETURN   L     R13,4(R13)              R13 --> CALLERS SAVEAREA
         L     R14,12(R13)             RETURN ADDRESS
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGISTERS
         BR    R14
A00Y     DC    H'0'                    CAUSE S0C1 ABEND
SAVEAREA DC    18F'0'
EXTADDR  DC    V(modname)              MODULE WE WANT TO CALL
ASIDNAME DS    F                       ADDRESS SPACE ID
COUNT    DS    F                       LOOP COUNTER
PARMPTR  DS    F                       POINTER TO PARM DATA
MAXLOOP  DC    X'000000FF'             MAX TIMES THROUGH ASCB LOOP
         CVT   DSECT=YES
         IHAASCB
         IHAASXB
         IHAACEE
         END
Assemble the CSECT and link it as 'modname' with an entry point of I00ZAP.  The
original module 'modname' will be included as part of the new replacement load
module (you may want to link it into a different PDS initially for testing).

David Welch
Systems Programmer
Natcom Information Services (New Zealand)    â‚¬ Xephon 1988














































