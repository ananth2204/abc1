An automated job activity scan facility

Program JOBSCAN1 has been created for the use of our Master
Console Operators (MCOs) in response to their request for an
automated process to check what jobs should be active at any
given time.

A started task has been placed on each system for their use.  To
initiate the process, the following command is used:
    *T SYssssss,S JOBSCAN,CHECK=xxxxxx
where SYssssss denotes the system in question and xxxxxx will be
replaced in the above command by a partitioned dataset member
built by the MCOs.

Each member can be built to perform a different check depending
on the time of day, or the day of the week, that you might need to
check.  Each job name placed in a particular member will be
compared with what is running at that time.  If the job name is
not active a WTO will be issued to report the discrepancy.

JOBSCAN1 will not find an entry for SYSLOG - SYSLOG is part of the
operating system and has no address space vector table entry.
The DDNAME JOBSCAN1 uses for input is SYSIN.  Create a fixed
block partitioned dataset with a logical record length of 80 to use
as input.  The job names to check will be in positions 1 to 8 in the
partitioned dataset member you create.


ASSEMBLER SOURCE

*  GO FROM THE CVT,TO THE ASVT,TO THE ASCB,AND MOVE DATA FROM
*  THE JOBNAME POINTERS IN EACH ASCB TO AN ARRAY IN STORAGE.
*  COMPARE EACH ENTRY IN THE ARRAY TO EVERY JOBNAME IN
*  FILE NAME SYSIN. IF THE JOB IN THE CONTROL DATA SET IS
*  NOT ACTIVE TELL THE OPERATOR.
         CVT   DSECT=YES
         IHAASVT
         IHAASCB
JOBSCAN1 CSECT
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             TRANSFER THE BASE
         USING JOBSCAN1,R12        SET UP R12 FOR BASE
         ST    R13,SAVE+4          CREATE A BACKWARD POINTER(CALLER'S)
         LA    R5,SAVE             LOAD BY SAVEAREA ADDRESS(CALLEE'S)
         ST    R5,8(,R13)          CREATE A FORWARD POINTER(CALL)
         LR    R13,R5              TRANSFER SAVE ADDRESS
         B     START               AND AWAY WE GO!!!!
         DC    CL8'JOBSCAN1'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
*        FIND THE ASVT,ASCB, AND THE POINTER TO JOBNAME,
*        MOVE THE JOBNAME TO JOBHOLD
START    DS    0F
         OPEN  (INFILE,INPUT)
         SR    R4,R4                     CLEAR OUT R4
         SR    R3,R3                     CLEAR OUT R3
         LA    R6,3                      SET UP BCT REGISTER
         L     R8,=X'80000000'           END OF ASVT SECTION
         L     R7,CVTPTR                 LOAD IN HEX 10
         L     R7,CVTASVT-CVTMAP(,R7)    POINTER TO ASVT
         L     R7,ASVTDSHD-ASVTPRFX(,R7) NON REUSABLE REPLACEMENT Q
         CR    R7,R8                     QUEUE OF SLOTS RESERVED TO
*                                        REPLACE NONREUSABLE ASIDS FULL
         BNE   LOADARAY
         BCTR  R6,0                      R6 = R6 -1 FOUND END MARKER
LOADARAY LA    R2,JOBHOLD                GET ARRAY ADDRESS
SELECTA  L     R7,CVTPTR                 POINTER TO CVT
         L     R7,CVTASVT-CVTMAP(,R7)    POINTER TO ASVT
         L     R7,ASVTENTY-ASVTPRFX(R4,R7) POINT TO THE ASCB,
*                                        R7=FIRST ASVT ENTRY,R4=INDEX
         CR    R7,R8                     END OF ASVT SECTION ?
         BE    COMPAREJ                  YES ?
         ST    R7,ASIDWORK               SAVE THE ASVT ENTRY
         MVC   FLAG1,ASIDWORK
         TM    FLAG1,B'10000000'         TEST IF ASID IS AVAILABLE
         BO    BUMPIT                    GO TO NEXT ENTRY
         L     R9,ASCBJBNS-ASCBEGIN(,R7) POINTER TO STARTED TASKS
         CLC   0(8,R9),=C'INIT    '      IS THIS A BATCH JOB
         BNE   NOTINIT                   JUMP IF ITS A STARTED TASK
         L     R9,ASCBJBNI-ASCBEGIN(,R7) POINTER TO BATCH JOBS
NOTINIT  MVC   0(8,R2),0(R9)             STORE THE JOBNAME
         LA    R2,8(,R2)                 8 MORE BYTES-BUMP ARRAY
BUMPIT   LA    R4,4(,R4)                 4 MORE BYTES-NEXT ASVT
         B     SELECTA                   DO IT AGAIN
COMPAREJ BCT   R6,BUMPIT   BRANCH BACK UNTIL 0 , 3 SECTIONS IN THE ASVT
NEXTREC  GET   INFILE,INRECORD
         LA    R2,JOBHOLD                RESET THE POINTER
CYCLE    CLC   JOBNAME,0(R2)             COMPARE THE NAME
         BE    NEXTREC                   IT MUST BE ACTIVE!
         CLC   0(8,R2),=X'00000000'      LAST ENTRY IN JOBHOLD ?
         BE    PUTWTO                    JOB IS NOT ACTIVE
         LA    R2,8(,R2)                 BUMP R2 8 BYTES -NEXT ENTRY
         B     CYCLE                     COMPARE ARRAY ENTRY AGAIN
PUTWTO   MVC   WTOMSG+13(8),JOBNAME
WTOTAG   WTO   '*---------------------------------------*',ROUTCDE=(2)
WTOMSG   WTO   ' JOB          WAS NOT FOUND TO BE ACTIVE',DESC=(1)
         LA    R2,8(,R2)                 BUMP R2 8 BYTES -NEXT ENTRY
         LA    R3,1(R3)                  ADD 1 TO REG 3
         B     NEXTREC
ALLDONE  SR    R2,R2                     CLEAR OUT R2
         CR    R2,R3                     COMPARE,
         BNE   CLOSE                     DID WTOTAG DO ANYTHING ?
         WTO   '*---------------------------------------*',ROUTCDE=(2)
         WTO   ' ALL JOBS IN CONTROL DATA SET ARE ACTIVE',DESC=(1)
CLOSE    WTO   '*---------------------------------------*',ROUTCDE=(2)
         CLOSE (INFILE)
*--      RETURN TO CALLER            --
         L     R13,SAVE+4          LOAD CALLER'S SAVEAREA.
         LM    R14,R12,12(R13)     RESTORE REGISTERS.
         SR    R15,R15             SET COND CODE
         BR    R14                 RETURN TO CALLER.
INFILE   DCB   DSORG=PS,RECFM=FB,MACRF=GM,LRECL=80,DDNAME=SYSIN,       X
               EODAD=ALLDONE
INRECORD DS    0CL80
JOBNAME  DS    CL8
         DS    CL72
SAVE     DS    18F
JOBHOLD  DS    350CL8'0'
ASIDWORK DS    F'0'
FLAG1    DS    CL1' '
         LTORG
         END


SAMPLE JCL

//JOBSCAN  PROC CHECK=SYZ
//STEP01   EXEC PGM=JOBSCAN1
//STEPLIB DD DSN=SSCAT.SYS.LOAD,DISP=SHR
//SYSUDUMP DD SYSOUT=O
//SYSPRINT DD SYSOUT=O
//SYSIN    DD DSN=MCO.JOBNAME(&CHECK),DISP=SHR


Thomas Leroy Alley
Member of Technical Staff
US West (USA) â‚¬ US West 1989

