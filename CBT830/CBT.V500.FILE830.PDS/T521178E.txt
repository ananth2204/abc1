Checking the LINKLIST for 'new' extents

The following program is used at our installation to compare
the LINKLIST DEB against the DSCB extent descriptors for
each LINKLIST dataset to see if any extents have been added
since the last IPL.  If any are found, the members found in
'undefined' extents are listed.  If all is OK only the LINKLIST
DSNAMEs are listed.

The program must be invoked as a TSO CP and not via a
CALL.  The program will only run under MVS/XA or
MVS/ESA since it requires the LLT.

If all installations followed IBM's advice and didn't allocate
LINKLIST with secondary space this program would not be
necessary.  HoweverÂŸ

LNKCHK   CSECT ,
         SAVE  (14,12),,LNKCHK-&SYSDATE-&SYSTIME   SAVE REGS/SET ID
         LR    R12,R15               COPY BASE REG
         USING LNKCHK,R12            ADDRESSABILITY FOR CSECT
         BAL   R1,*+8                SKIP CONSTANT
         DC    AL4(DYNLEN)           DSA LENGTH
         L     R0,0(R1)              DYNAMIC SA LEN
         BAL   1,*+4                 INDICATE GETMAIN
         SVC   10                    GETMAIN R,LV=(0)
         LR    R15,R1                SAVE GETMAINED ADDR
         LM    R0,R1,20(R13)         RESTORE PARM REGS FROM PREV SA
         ST    R13,4(R15)            HSA
         ST    R15,8(R13)            LSA
         LR    R13,R15               COPY SA PTR
         USING DYNAREA,R13           ADDRESSABILITY FOR DSECT
*              I N I T I A L I S A T I O N
         TM    0(R1),X'80'         SINGLE PARM ?
         BZ    PARMOK              BIF NOT...SHOULD BE OK
         WTO   'LNKCHK MUST BE INVOKED AS A TSO CP',ROUTCDE=11,DESC=7
         B     RETURN0             CAN'T USE PUTLINE SO END....
PARMOK   DS    0H
         MVC   IOPL(4),4(R1)       SAVE UPT PTR FOR PUTLINE
         MVC   IOPL+4(4),12(R1)    SAVE ECT PTR  ..   ..
         MVC   IOPL+8(4),=A(TSOECB) SAVE ECB PTR  ..   ..
         MVC   IOPL+12(4),=A(IOPB) SAVE IOPB PTR ..   ..
         L     R2,CVTPTR           => CVT
         USING CVT,R2
         L     R3,CVTZDTAB         => DVCT
         ST    R3,DVCTPTR          SAVE IT FOR LATER
         L     R3,CVTLINK          => LINKLIST DCB
         L     R3,44(,R3)          => LINKLIST DEB
         SLR   R4,R4               ZERO REG
         IC    R4,16(,R3)          NO OF EXTENTS
         STH   R4,DEB#             SAVE ACTUAL EXTENT COUNT
         LA    R5,32(,R3)          => DEB DASD SECTION
         ST    R5,DEB1PTR          SAVE PTR TO 1ST DASD DEB
*              LOOP AROUND LINKLIST TABLE ENTRIES
         L     R2,CVTLLTA          => LINKLIST TABLE
         DROP  R2                  DONT NEED THE CVT ANY MORE
         LH    R3,6(,R2)           NO OF TABLE ENTRIES
         LA    R2,8(,R2)           => 1ST ENTRY
LOOP     DS    0H
         MVC   DSN,1(R2)           COPY DSNAME (SKIP LENGTH BYTE)
         LOCATE CAMLST1            OTHERWISE LOCATE DSN VIA CATALOG
         LTR   R15,R15             OBTAINED OK ?
         BZ    LOCOK               BIF SO
         MVC   MSG1DSN,DSN         COPY DSN TO MESSAGE
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(MSG1X,SINGLE,DATA),MF=(E,IOPL)  LOCATE FAILED
         B     NEXTDS              CHECK ALL DATASETS
LOCOK    DS    0H
         OBTAIN CAMLST2            READ DSCB BY DSN/VOL
         LTR   R15,R15             OBTAINED OK ?
         BZ    OBTOK               BIF SO
         XC    TSOECB,TSOECB       CLEAR THE ECB
         MVC   MSG2DSN,DSN         COPY DSN TO MESSAGE
         PUTLINE OUTPUT=(MSG2X,SINGLE,DATA),MF=(E,IOPL)  NOT ON VOLUME
         B     NEXTDS              CHECK ALL DATASETS
OBTOK    DS    0H
         LA    R4,DSCB1            => OBTAINED DSCB
         USING IECSDSL1,R4         ADDRESS DSCB
         SLR   R5,R5               ZERO REG
         IC    R5,DS1NOEPV         NO OF EXTENTS
         MVC   DSCBX#+1(1),DS1NOEPV SAVE IT
         XC    XDESCS(160),XDESCS  ZERO FIELD
         MVC   XDESCS(30),DS1EXT1  COPY EXT DESCS FROM FMT1 DSCB
         CLC   DS1NOEPV,=X'3'      > 3 EXTENTS ? (FMT3 PRESENT)
         BNH   FMT3EXIT            BIF NOT...FORGET FORMAT3 DSCB
*              LINKLIST TABLE LOOP....CONTINUED
         MVC   CCHHR,DS1PTRDS      CCHHR OF FMT3 DSCB
         OBTAIN CAMLST3            READ DSCB BY CCHHR
         LTR   R15,R15             OBTAINED OK ?
         BZ    CAM3OK              BIF SO
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(MSG3X,SINGLE,DATA),MF=(E,IOPL)  WEIRD ERROR
         B     NEXTDS              TRY NEXT DATASET
CAM3OK   DS    0H
         LA    R4,DSCB1            => OBTAINED DSCB
         USING IECSDSL3,R4         ADDRESS DSCB
         MVC   XDESCS+30(40),DS3EXTNT  COPY 4 EXT DESCS FROM FMT3 DSCB
         MVC   XDESCS+70(90),DS3ADEXT  COPY 9 EXT DESCS FROM FMT3 DSCB
         DROP  R4
FMT3EXIT DS    0H
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(DSNX,SINGLE,DATA),MF=(E,IOPL)  WRITE THE DSN
         BAL   R10,COMPARE         COMPARE EXTENTS...
         ICM   R15,B'1111',MAXTT   MAX VALID TTR SET ?
         BZ    NEXTDS              BIF NOT...DS IS OK
         BAL   R10,LISTMEM         LIST ANY DUFF MEMBERS
NEXTDS   DS    0H
         NI    FLAG,255-BADEND     RESET FLAG
         LA    R2,45(,R2)          => NEXT LLT ENTRY
         BCT   R3,LOOP             LIST ALL ENTRIES
*              T E R M I N A T E
RETURN0  DS    0H
         SLR   R15,R15             ZERO RETURN CODE
RETURN   DS    0H
         LR    R14,R13             SAVE PTR TO DYNAMIC SAVE AREA
         L     R13,4(R13)          => CALLING PROGS SAVE AREA
         ST    R15,16(R13)         SAVE RETURN CODE (R15)
         BAL   R1,*+8              SKIP CONSTANTS
         DC    AL4(DYNLEN)         DYNAMIC SA LENGTH
         L     R0,0(R1)            LOAD IT
         LR    R1,R14              => DSA
*        FREEMAIN R,LV=(0),A=(1)   THIS IS WHAT WE'RE DOING
         LA    1,0(0,1)            CLEAR HI-ORDER OF DSA ADDR
         SVC   10                  FREE IT
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         BR    R14                 AND END
         TITLE 'LIST MEMBERS IN THE INVALID EXTENTS'
LISTMEM  DS    0H
         STM   R0,R15,SUBSAVE      SAVE REGS
         MVC   MY99DSN,DSN         DSN FOR DYNALLOC
         LA    R1,MY99RBP          => REQ BLK PTR
         SVC   99                  ALLOCATE THIS DATASET
         ST    R15,MYDFRC          STORE SVC 99 RETURN CODE
         LTR   R15,R15             ALLOCATED OK ?
         BZ    ALLOCOK             BIF SO...
*              WRITE ALLOCATION ERROR MESSAGES
         LA    R1,MYDFAREA
         LINK  EP=IKJEFF18
         B     LISTMEMX            FORGET THIS DATASET
SAVEDD   MVC   DWORK(0),MY99TXDD+6 << EXECUTED >>
ALLOCOK  DS    0H
         LH    R14,MY99TXDD+4      LEN OF RETURNED DDNAME
         BCTR  R14,0               LENGTH MINUS 1 FOR EX
         MVC   DWORK,=CL8' '       BLANK TARGET FIELD
         EX    R14,SAVEDD          SET DDNAME FOR DCBS
         MVC   INDIR+40(8),DWORK   SAVE DDNAME IN DIRECTORY DCB
         MVC   INMEM+40(8),DWORK   DITTO FOR MEMBER DCB
         OPEN  INDIR                   OPEN DIRECTORY
         LA    R3,INDIR                ADDRESS DCB
         USING IHADCB,R3
         TM    DCBOFLGS,X'10'          OPEN OK ?
         BO    DIROK                   BRANCH IF SO
         XC    TSOECB,TSOECB           CLEAR THE ECB
         PUTLINE OUTPUT=(MSG5X,SINGLE,DATA),MF=(E,IOPL)  WRITE ERR MSG
         B     LISTMEMX                AND FINISH
DIROK    DS    0H
*              READ AND PROCESS THE DIRECTORY
         XC    TTRK,TTRK               INIT HIGHEST VALID TTR
READDIR  DS    0H
         LA    R10,DIRREC              => DIRECTORY 'BUFFER'
         READ  DECB,SF,INDIR,(10),'S'
         CHECK DECB                    WAIT FOR IT....
         LH    R3,DIRREC               SAVE NO OF BYTES USED
         SH    R3,=H'2'                MINUS LEN OF THIS FIELD
         LA    R4,DIRREC+2             POINT TO 1ST ENTRY
QENDIR   DS    0H
         CLC   0(4,R4),=F'-1'          END OF DIRECTORY ?
         BE    EODIR                   BIF SO
         OI    FLAG,GOTMEM             AT LEAST 1 MBR PRESENT IN DS
         CLC   8(3,R4),MAXTT+1         TTR > MAX LINKLIST TTR ?
         BL    TTRLO                   BIF NOT...
         MVC   BADMBR,0(R4)            SAVE THIS MEMBER NAME
         OI    FLAG,BADMBRF            SHOW WE'VE GOT A BADDIE
         XC    TSOECB,TSOECB           CLEAR THE ECB
         PUTLINE OUTPUT=(MMSGX,SINGLE,DATA),MF=(E,IOPL)  WRITE MBR NAME
         B     TTREX                   DONT NEED TO SAVE THE NAME
TTRLO    DS    0H
         CLC   8(3,R4),TTRK            TTR > CURRENT HI OK TTR ?
         BNH   TTREX                   BIF NOT...NEXT ONE PLEASE
         MVC   TTRK(3),8(R4)           SAVE TTR
         MVC   MEMBER,0(R4)            SAVE MEMBER NAME
TTREX    DS    0H
         TM    11(R4),X'1F'            IS NO OF USER HALFWORDS ZERO ?
         BZ    NEXTENT                 YES...SO SKIP
         SLR   R5,R5                   ZERO WORK REG
         IC    R5,11(R4)               NO...GET COUNT
         N     R5,=X'0000001F'         'AND' OUT THE REST
         SLL   R5,1                    TIMES 2 (=BYTES)
         AR    R4,R5                   ADD COUNT INTO POINTER
         SR    R3,R5                   SUBTRACT FROM BYTES USED..
NEXTENT  DS    0H
         LA    R4,12(,R4)              MOVE POINTER BY FIXED BIT..
         SH    R3,=H'12'               SAME FOR USED COUNT (ONLY MINUS)
         BNP   READDIR                 READ NEXT DIR REC IF R3 <= 0
         B     QENDIR                  OTHERWISE GET NEXT MEMBER
EODIR    DS    0H
         CLOSE INDIR
*              READ THE LAST MEMBER IN THE LAST VALID EXTENT
         OPEN  INMEM                   OPEN REST OF PDS
         LA    R3,INMEM                ADDRESS DCB
         USING IHADCB,R3
         TM    DCBOFLGS,X'10'          OPEN OK ?
         BO    MEMOK                   BRANCH IF SO
         XC    TSOECB,TSOECB           CLEAR THE ECB
         PUTLINE OUTPUT=(MSG6X,SINGLE,DATA),MF=(E,IOPL)  WRITE ERR MSG
         B     LISTMEMX                AND FINISH
MEMOK    DS    0H
         LH    R4,DCBBLKSI             LOAD MAX BLKSIZE
         STH   R4,BLKSIZE              SAVE IT FOR LATER
         GETMAIN R,LV=(4)              SPACE FOR BUFFER (1 BLOCK)
         LR    R10,R1                  SAVE ADDRESS OF STORAGE
         TM    FLAG,GOTMEM             AT LEAST 1 MBR IN DS ?
         BZ    LASTMEX                 BIF NOT...NOTHING TO LOOK FOR
         FIND  INMEM,TTRK,C            OTHERWISE LOCATE MEMBER
READLOOP DS    0H
         READ  PECB,SF,INMEM,(10),'S'  READ RECORD
         CHECK PECB                    AND WAIT.....
         B     READLOOP                READ UNTIL EOMEM
EOMEM    DS    0H
         CLC   VALEXT#+1(1),INMEM+5    LAST RECORD IN A VALID EXTENT ?
         BH    LASTMEX             BIF SO...ITS OK
         BL    PUTMEM              BIF NOT...DEFINITELY BAD
         TM    FLAG,BADEND         IS THIS A 'RELEASED' EXTENT ?
         BZ    PUTMEM              BIF NOT...DEFINITELY BAD
         CLC   HICCHH,INMEM+8      THIS MEM WITHIN THIS EXTENT ?
         BNL   LASTMEX             BIF SO...WE'RE OK
PUTMEM   DS    0H
         MVC   BADMBR,MEMBER       PUT MBR NAME IN MSG
         OI    FLAG,BADMBRF        SHOW WE'VE GOT A BADDIE
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(MMSGX,SINGLE,DATA),MF=(E,IOPL)  WRITE MBR NAME
LASTMEX  DS    0H
         TM    FLAG,BADMBRF        ANY BADDIES ?
         BO    MBRDONE             BIF SO...
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(MSG7X,SINGLE,DATA),MF=(E,IOPL)  NO INVALID MBR
MBRDONE  DS    0H
         CLOSE (INMEM,FREE)        CLOSE AND FREE THIS DATASET
         LH    R4,BLKSIZE          RELOAD BUFFER (BLOCK) SIZE
         FREEMAIN R,LV=(4),A=(R10) FREE BUFFER SPACE
LISTMEMX DS    0H
         NI    FLAG,255-BADMBRF-GOTMEM   RESET FLAGS
         LM    R0,R15,SUBSAVE      RESTORE REGS
         BR    R10                 RETURN TO CALLER
         TITLE 'COMPARE DSCB EXTENTS AGAINST ACTUAL LINKLIST EXTENTS'
COMPARE  DS    0H
         STM   R0,R15,SUBSAVE      SAVE REGS
         XC    MAXTT,MAXTT         ZERO MAX VALID TT FIELD
         XC    VALEXT#,VALEXT#     INIT COUNT OF VALID EXTENTS
         L     R2,DEB1PTR          => 1ST LINKLIST DASD DEB
         LH    R3,DEB#             NO OF EXTENTS IN LINKLIST
         LA    R4,XDESCS           => 1ST DSCB EXT DESCRIPTOR
         LH    R5,DSCBX#           NO OF EXTENTS IN DATASET
         NI    FLAG,255-X1MATCH    ZERO MATCH FLAG
         SLR   R7,R7               ZERO TT(R) COUNTER
CLOOP1   DS    0H
         L     R6,0(,R2)           => UCB FOR THIS DEB
         CLC   VOLSER,28(R6)       THIS OUR VOLSER ?
         BE    VOLOK               BIF SO...
         TM    FLAG,X1MATCH        PREVIOUS EXTENT MATCHED ?
         BZ    CHKALL              BIF SO...END OF THIS DATASET
         B     LISTREST            OTHERWISE LIST MISMATCHED EXTENTS
VOLOK    DS    0H
         CLC   2(4,R4),6(R2)       EXTENT MATCH ?
         BE    XOK1                BIF SO...OK SO FAR
         TM    FLAG,X1MATCH        1ST EXTENT MATCHED ?
         BZ    CHKALL              BIF NOT...KEEP LOOKING
         B     LISTREST            LIST ANY UNMATCHED EXTENTS
XOK1     DS    0H
         OI    FLAG,X1MATCH        START OF 1ST EXTENT MATCHED
         CLC   6(4,R4),10(R2)      (END OF) EXTENT MATCH ?
         BE    XOK2                BIF SO...OK SO FAR
         MVC   HICCHH,10(R2)       (THIS IS UNLIKELY) DS EXTENT > LLT
         BH    XBAD1               BIF DATASET EXTENT BIGGER THAN LLT
         MVC   HICCHH,6(R4)        CCHH FOR END OF DATASET EXTENT
XBAD1    DS    0H
*              WORK OUT HIGHEST VALID TT(R) AS DEB DOESN'T APPLY
         OI    FLAG,BADEND         END OF EXTENT NOT MATCHED
         L     R3,DVCTPTR          RESTORE DVCT ADDR
         USING DVCTI,R3
         LA    R15,DVCTYPMK        TYPE MASK
         N     R15,16(,R6)         AND WITH UCBTYP => OFFSET OF OFFSET
         IC    R15,DVCTIOFF(R15)   OFFSET TO DEVICE ENTRY
         AR    R3,R15              => DEVICE ENTRY
         USING DVCT,R3
         LH    R15,HICCHH          CC FOR END OF EXTENT
         SH    R15,2(,R4)          MINUS CC FOR START OF EXTENT
         MH    R15,DVCTRK          TIMES TRK/CYL FROM DVCT
         DROP  R3                  END OF DVCT
         AH    R15,HICCHH+2        PLUS HH FROM END OF EXTENT
         SH    R15,4(,R4)          MINUS HH FOR START OF EXTENT
         LA    R15,1(,R15)         PLUS 1 = TRKS IN THIS EXTENT
         AR    R7,R15              CORRECT MAX VALID TT VALUE
         B     LISTREST            LIST ANY UNMATCHED EXTENTS
XOK2     DS    0H
         LH    R15,VALEXT#         CURRENT VALID EXTENT COUNT
         LA    R15,1(,R15)         ADD NEW VALID EXTENT
         STH   R15,VALEXT#         AND SAVE IT BACK
         AH    R7,14(,R2)          INCREMENT ALLOC TRACK COUNT
         LA    R4,L'XDESCS(,R4)    => NEXT 'OBTAINED' DESCRIPTOR
         BCT   R5,CHKALL           PROCESS ALL EXTENTS IN DATASET
         B     COMPDONE            ALL DONE...NO PROBLEM
CHKALL   DS    0H
         LA    R2,16(,R2)          => NEXT LINKLIST DASD DEB
         BCT   R3,CLOOP1           CHECK ENTIRE LINKLIST IF NEEDED
*              LIST ANY UNMATCHED EXTENTS
LISTREST DS    0H
         SLL   R7,8                ALLOW FOR R BYTE OF TTR
         ST    R7,MAXTT            MAX TTR FOR DATASET
         TM    FLAG,X1MATCH        ANY EXTENTS MATCHED AT ALL ?
         BO    COMPOK1             BIF SO...
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(MSG4X,SINGLE,DATA),MF=(E,IOPL) NO EXTNTS MATCH
         B     COMPDONE            ALL DONE...
COMPOK1  DS    0H
         LTR   R5,R5               ANY DATASET EXTENTS 'SPARE' ?
         BZ    COMPDONE            BIF NOT...THIS DATASET IS OK ASIS
         LR    R15,R7              COPY TTR LIMIT
         BAL   R14,R15HEX          HEX IT (TO DWORK)
         MVC   MAXTTR,DWORK+2      COPY TO MESSAGE
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(TTMSGX,SINGLE,DATA),MF=(E,IOPL)  WRITE MAX TTR
         MVI   EXTRA,X'40'         PREPARE TO BLANK FIELD
         MVC   EXTRA+1(L'EXTRA-1),EXTRA   DO IT
         MVC   XMTEXT,XMTEXT1      DEFAULT EXTENT ERROR TEXT
         TM    FLAG,BADEND         MISMATCHED END OF EXTENT ?
         BZ    CLOOP2              BIF NOT....
         MVC   XMTEXT,XMTEXT2      OTHERWISE SAY SO
         L     R15,6(,R2)          START OF LINKLIST EXTENT
         BAL   R14,R15HEX          HEX IT (TO DWORK)
         MVC   STADDRL,DWORK       COPY THE RESULT
         L     R15,10(,R2)         END OF LINKLIST EXTENT
         BAL   R14,R15HEX          HEX IT (TO DWORK)
         MVC   EADDRL,DWORK        COPY THE RESULT
         MVC   EXTRA,LEXT          COPY ADDRS TO MESSAGE
CLOOP2   DS    0H
         L     R15,2(,R4)          START OF UNMATCHED EXTENT
         BAL   R14,R15HEX          HEX IT (TO DWORK)
         MVC   STADDR,DWORK        COPY THE RESULT
         L     R15,6(,R4)          END OF UNMATCHED EXTENT
         BAL   R14,R15HEX          HEX IT (TO DWORK)
         MVC   EADDR,DWORK         COPY THE RESULT
         XC    TSOECB,TSOECB       CLEAR THE ECB
         PUTLINE OUTPUT=(XMSGX,SINGLE,DATA),MF=(E,IOPL) WRITE EXT ADDRS
         LA    R4,L'XDESCS(,R4)    => NEXT 'OBTAINED' DESCRIPTOR
         MVI   EXTRA,X'40'         PREPARE TO BLANK FIELD
         MVC   EXTRA+1(L'EXTRA-1),EXTRA   DO IT
         MVC   XMTEXT,XMTEXT1      RESET DEFAULT EXTENT ERROR TEXT
         BCT   R5,CLOOP2           LIST ALL DUBIOUS EXTENTS
COMPDONE DS    0H
         LM    R0,R15,SUBSAVE      RESTORE REGS
         BR    R10                 RETURN TO CALLER
         TITLE 'PRINTABLE HEX FROM BINARY R15'
*              THE CONTENTS OF R15 ARE CONVERTED TO HEX AND PLACED
*              IN FIELD 'DWORK'. R14 CONTAINS THE RETURN ADDRESS.
R15HEX   DS    0H
         STCM  R15,B'1000',DWORK       1ST CHAR
         MVO   DWORK(2),DWORK(1)       SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R15,B'1000',DWORK+1     1ST CHAR AGAIN
         NI    DWORK+1,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R15,B'0100',DWORK+2     2ND CHAR
         MVO   DWORK+2(2),DWORK+2(1)   SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R15,B'0100',DWORK+3     2ND CHAR AGAIN
         NI    DWORK+3,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R15,B'0010',DWORK+4     3RD CHAR
         MVO   DWORK+4(2),DWORK+4(1)   SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R15,B'0010',DWORK+5     3RD CHAR AGAIN
         NI    DWORK+5,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R15,B'0001',DWORK+6     4TH CHAR
         MVO   DWORK+6(2),DWORK+6(1)   SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R15,B'0001',DWORK+7     4TH CHAR AGAIN
         NI    DWORK+7,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         TR    DWORK,=CL16'0123456789ABCDEF' CONVERT TO HEX CHARS
         BR    R14                     RETURN TO CALLER
         TITLE 'CONSTANTS AND STORAGE RESERVATIONS'
         LTORG
DSCBX#   DC    H'0'                EXTENT# FROM DSCB
TTRK     DC    F'0'                TTR FOR 'FIND' MACRO
FLAG     DC    X'00'
X1MATCH  EQU   X'80'               EXTENT MATCH
BADEND   EQU   X'40'               END OF EXTENT MISMATCH
BADMBRF  EQU   X'20'               AT LEAST 1 INVALID MEMBER IN DS
GOTMEM   EQU   X'10'               AT LEAST 1 MEMBER IN DS
CAMLST1  CAMLST NAME,DSN,,LOCAREA         LOCATE DSN VIA CATALOG
CAMLST2  CAMLST SEARCH,DSN,VOLSER,DSCB2   RETURN DSCB BY DSN/VOL
CAMLST3  CAMLST SEEK,CCHHR,VOLSER,DSCB1   RETURN DSCB BY CCHHR
CCHHR    DS    CL5                CCHHR OF DSCB
LOCAREA  DS    0D           FIELDS USED BY LOCATE AND OBTAIN
VOLCOUNT DS    H
DEVTYPE  DS    XL4
VOLSER   DS    CL6
SEQNO    DS    H
DSCB1    DS    CL44         DSN FOR FMT 1 DSCB
DSCB2    DS    CL96         REST OF DSCB FOR FMT1 DSCB
         DS    CL5          SPACE FOR CCHHR OF DSCB
ENDLOC   DS    CL106        END OF AREA FOR LOCATE
XMSGX    DC    AL2(XMSGL),AL2(0)
XMTEXT   DC    C'   ==> INVALID EXTENT : '
         DC    C'DSCB='
STADDR   DS    CL8
         DC    C'-'
EADDR    DS    CL8
EXTRA    DS    CL(LEXTL)           SPACE FOR EXTRA TEXT
XMSGL    EQU   *-XMSGX
XMTEXT1  DC    C'   ==> INVALID EXTENT : '
XMTEXT2  DC    C'   ==> EXTENT SIZE CHG: '
LEXT     DC    C'  LINKLIST='      EXTRA TEXT FOR XMSGX
STADDRL  DS    CL8                 WHEN EXTENT SIZES ARE DIFFERENT
         DC    C'-'
EADDRL   DS    CL8
LEXTL    EQU   *-LEXT
MSG1X    DC    AL2(MSG1L),AL2(0)
MSG1     DC    C'   ==> CATALOG SEARCH FAILED FOR '
MSG1DSN  DS    CL44
MSG1L    EQU   *-MSG1X
MSG2X    DC    AL2(MSG2L),AL2(0)
MSG2     DC    C'   ==> CATALOG POINTS TO WRONG VOLUME FOR '
MSG2DSN  DS    CL44
MSG2L    EQU   *-MSG2X
MSG3X    DC    AL2(MSG3L),AL2(0)
MSG3     DC    C'   ==> ERROR IN DSCB3 OBTAIN'
MSG3L    EQU   *-MSG3X
MSG4X    DC    AL2(MSG4L),AL2(0)
MSG4     DC    C'   ==> NO MATCHED EXTENTS <=='
MSG4L    EQU   *-MSG4X
MSG5X    DC    AL2(MSG5L),AL2(0)
MSG5     DC    C'   ==> DIRECTORY OPEN FAILED'
MSG5L    EQU   *-MSG5X
MSG6X    DC    AL2(MSG6L),AL2(0)
MSG6     DC    C'   ==> MEMBER DCB OPEN FAILED'
MSG6L    EQU   *-MSG6X
MSG7X    DC    AL2(MSG7L),AL2(0)
MSG7     DC    C'   ==> ALL MEMBERS ARE INSIDE LINKLIST'
MSG7L    EQU   *-MSG7X
TTMSGX   DC    AL2(TTMSGL),AL2(0)
         DC    C'   ==> TTRS > '
MAXTTR   DS    CL6
         DC    C' ARE INVALID'
TTMSGL   EQU   *-TTMSGX
MMSGX    DC    AL2(MMSGL),AL2(0)
         DC    C'   ==> INVALID MEMBER: '
BADMBR   DS    CL8
MMSGL    EQU   *-MMSGX
DSNX     DC    AL2(DSNL),AL2(0)
DSN      DS    CL44
DSNL     EQU   *-DSNX
TSOECB   DS    F
IOPB     PUTLINE MF=L
IOPL     DS    4F
MY99RBP  DC    XL1'80',AL3(MY99RB)   SVC 99 RB POINTER
MY99RB   DS    0F                    SVC 99 REQUEST BLK (MAC IEFZB4D0)
         DC    XL1'14',XL1'01'       S99RBLN & S99VERB
         DC    H'0'                  S99FLAG1
MY99RSC  DC    F'0'                  S99ERROR/S99INFO
         DC    A(MY99TUPL)           => TEXT UNIT POINTERS
         DC    F'0'                  RESERVED
         DC    F'0'                  FLAGS2
*              TEXT UNIT POINTERS
MY99TUPL DS    0A                    SVC 99 TEXT UNIT POINTERS
MY99TUDD DC    A(MY99TXDD)           TU PTR, DDNAME
MY99TUDS DC    A(MY99TXDS)           TU PTR, DSNAME
MY99TUST DC    XL1'80',AL3(MY99TXST) TU PTR, STATUS (DISP=SHR)
*              TEXT UNITS
MY99TXDD DC    H'85',H'1',H'8',CL8' '      TEXT UNIT, RETURN DDNAME
MY99TXDS DC    H'2',H'1',H'44'             TEXT UNIT, DSNAME (PART1)
MY99DSN  DC    CL44' '                     DSN TU (PART 2) = DSN
MY99TXST DC    H'4',H'1',H'1',X'08'        TEXT UNIT, STATUS (DISP=SHR)
*              FIELDS FOR SVC99 FAILURE MESSAGES
MYDFAREA DS    0F                  (IKJEFFDF DFDSECT=YES)
DFS99RBP DC    A(MY99RB)           => SVC99 RB
DFRCP    DC    A(MYDFRC)           => SVC99 RETCODE
DFJEFF02 DC    A(MYJEFF02)         => IKJEFF02 ADDRESS
DFIDP    DC    A(MYDFID)           => TYPE OF FAILURE
DFCPPLP  DC    F'0'                => CPPL IF AVAILABLE
MYDFRC   DS    F                   SVC 99 RETURN CODE
MYJEFF02 DC    F'0'                NO IKJEFF02 ADDRESS
MYDFID   DC    XL2'8032'           GENERAL SVC 99 FAILURE/USE WTP
INDIR    DCB   DDNAME=X,DSORG=PS,MACRF=(R),EODAD=EODIR,                C
               LRECL=256,BLKSIZE=256,RECFM=F
INMEM    DCB   DDNAME=X,DSORG=PO,MACRF=(R),EODAD=EOMEM
DYNAREA  DSECT                     WORK AREA
         DS    18F
DWORK    DS    D
MAXTT    DS    F                   HIGHEST VALID TTR IN LINKLIST DS
HICCHH   DS    XL4                 ENDING CCHH OF LAST VALID EXTENT
DVCTPTR  DS    F                   => DVCT
DEB1PTR  DS    F                   => 1ST LINKLIST DASD DEB
DEB#     DS    H                   NO OF DASD EXTENTS IN LINKLIST
SUBSAVE  DS    16F                 SUBROUTINE SAVEAREA
VALEXT#  DS    XL2
BLKSIZE  DS    H
MEMBER   DS    CL8                 TTR FOR 'FIND' MACRO
DIRREC   DS    CL256
XDESCS   DS    16CL10              SPACE FOR 16 EXTENT DESCRIPTORS
DYNLEN   EQU   *-DYNAREA
         DCBD  DSORG=(PS,PO),DEVD=DA
         CVT   DSECT=YES
         IHADVCT ,
         IECSDSL1 (1,3)
         END   LNKCHK


    â‚¬ Xephon 1990

