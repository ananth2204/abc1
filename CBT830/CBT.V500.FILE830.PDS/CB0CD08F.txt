Processing SMF records with COBOL

Everyone knows that to read and process SMF records yourself
you must write an Assembler routine or program, right?
Wrong. VS COBOL II provides adequate facilities for doing
just this.

The following sample program demonstrates how to read and
process SMF records from a QSAM DUMP (IFASMFDP) of
the SMF dataset. The key to the process is to work from the
Linkage Section using the 'ADDRESS OF' and 'USAGE IS
POINTER' features of COBOL II. By manipulating fullword
items that redefine pointer items, we can access the variably
located and multiple-occurring sections in the SMF record.
(Pointer items can only be altered using the SET verb.)
Restrictions on the targets of the 'ADDRESS OF' operator
require us to work out of the Linkage Section.

Since we must work out of the Linkage Section, a small
Assembler routine (alas!) is required to GETMAIN some
storage for the SMF record. The program obtains 32K bytes to
hold a record in linkage, and the various record sections
'overlay' this area at calculated starting locations in the record.
The sample program reads and processes SMF type 30 subtype-
4 (step termination) records. From these records, it extracts the
name of the executed program for that step as well as the
EXCP count for all DDs used in that step. The name of the
executed program comes from the identification section of the
record, which occurs once per SMF record. The total EXCP
count, however, must be accumulated from all of the EXCP
sections in the record. A record may contain many EXCP
sections. These two pieces of information were chosen as
examples of how to access any single- or multiple-occurrence
section in any SMF record.


ASSEMBLER ROUTINE TO GETMAIN STORAGE

GETSTORG CSECT
         COPY  EQUATES
*    PARMS: LENGTH OF STORAGE (4-BYTES BINARY - PIC S9(8) COMP)       *
*           UPDATED ADDRESS   (4-BYTES BINARY - USAGE POINTER )       *
         STM   R14,R12,12(R13)    SAVE REGS
         LR    R12,R15            LOAD BASE REG
         USING GETSTORG,R12       ADDRESSABILITY
         LR    R15,R13            OLD SAVE AREA ADDRESS
         LA    R13,SAVEA          POINT TO NEW SAVE AREA
         ST    R15,4(R13)         PUT OLD SAVE ADDR IN IT
         L     R2,0(R1)           GET ADDRESS OF STORAGE LENGTH
         ICM   R2,15,0(R2)        GET ACTUAL STORAGE LENGTH
         L     R3,4(R1)           GET ADDRESS OF AREA TO UPDATE
         GETMAIN EU,LV=(2),A=(3)  GET STORAGE
         L     R13,4(R13)         GET OLD SAVE AREA ADDRESS
         LM    R14,R12,12(R13)    RESTORE REGS
         LA    R15,0              SET RC=0
         BR    R14                RETURN
SAVEA    DC    18F'0'             SAVE AREA
         LTORG
         END   GETSTORG


READSMF SOURCE CODE

 IDENTIFICATION DIVISION.
 PROGRAM-ID.  READSMF.
 AUTHOR. STEVE BAGGETT.
 ENVIRONMENT DIVISION.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
     SELECT SMFDATA
         ASSIGN TO SMFDATA
         ORGANIZATION IS SEQUENTIAL
         ACCESS MODE IS SEQUENTIAL.
 DATA DIVISION.
 FILE SECTION.
* SMF INPUT: QSAM, RECFM=VBS, BLKSIZE=4096 LRECL=32767
 FD  SMFDATA
     LABEL RECORDS ARE STANDARD
     RECORDING MODE IS S
     BLOCK CONTAINS  4096 CHARACTERS
     RECORD CONTAINS 18 TO 32763 CHARACTERS.
 01  SMFDATA-MIN-RECORD PIC X(18).
 01  SMFDATA-MAX-RECORD PIC X(32763).
 WORKING-STORAGE SECTION.
 01  BIN4-32768   PIC 9(8) COMP VALUE 32768 SYNC.
 01  SMF00-POINTER USAGE IS POINTER         SYNC.
 01  SMF00-ADDRVAL REDEFINES SMF00-POINTER  PIC S9(9) COMP.
 01  SMF30RPS-POINTER USAGE IS POINTER      SYNC.
 01  SMF30RPS-ADDRVAL REDEFINES SMF30RPS-POINTER PIC S9(9) COMP.
 01  SMF30ID-POINTER  USAGE IS POINTER      SYNC.
 01  SMF30ID-ADDRVAL  REDEFINES SMF30ID-POINTER  PIC S9(9) COMP.
 01  SMF30EXP-POINTER USAGE IS POINTER      SYNC.
 01  SMF30EXP-ADDRVAL REDEFINES SMF30EXP-POINTER PIC S9(9) COMP.
 01  END-OF-FILE-FLAG PIC X VALUE 'N'.
     88 END-OF-FILE         VALUE 'Y'.
 01  BIN2-30  PIC 9(4) COMP VALUE 30.
 01  FILLER REDEFINES BIN2-30.
     02  FILLER  PIC X(1).
     02  BIN1-30 PIC X(1).
 01  DD                PIC 9(8) COMP VALUE 0.
 01  STEP-INFORMATION.
     02  PROGRAM-NAME  PIC X(8).
     02  FILLER        PIC X(1) VALUE SPACE.
     02  TOTAL-EXCPS   PIC 9999999.
 LINKAGE SECTION.
*    Generic SMF record.
 01  SMF00-RECORD.
     02  SMF00FLG    PIC X(1).
     02  SMF00RTY    PIC X(1).
     02  SMF00TME    PIC 9(9) COMP.
     02  SMF00DTE    PIC 9(7) COMP-3.
     02  SMF00SID    PIC X(4).
     02  SMF00WID    PIC X(4).
     02  SMF00STP    PIC 9(4) COMP.
     02  FILLER      PIC X(32743).
 01  SMF30RPS.
*    Header for type 30 record
     02  SMF30RHD.
         03  SMF30FLG    PIC X(1).
         03  SMF30RTY    PIC X(1).
         03  SMF30TME    PIC X(4).
         03  SMF30DTE    PIC 9(7) COMP-3.
         03  SMF30SID    PIC X(4).
         03  SMF30WID    PIC X(4).
         03  SMF30STP    PIC 9(4) COMP.
*    Self-defining section of type 30 record
     02  SMF30S.
         03  SMF30SOF    PIC 9(9) COMP.
         03  SMF30SLN    PIC 9(4) COMP.
         03  SMF30SON    PIC 9(4) COMP.
         03  SMF30IOF    PIC 9(9) COMP.
         03  SMF30ILN    PIC 9(4) COMP.
         03  SMF30ION    PIC 9(4) COMP.
         03  SMF30UOF    PIC 9(9) COMP.
         03  SMF30ULN    PIC 9(4) COMP.
         03  SMF30UON    PIC 9(4) COMP.
         03  SMF30TOF    PIC 9(9) COMP.
         03  SMF30TLN    PIC 9(4) COMP.
         03  SMF30TON    PIC 9(4) COMP.
         03  SMF30COF    PIC 9(9) COMP.
         03  SMF30CLN    PIC 9(4) COMP.
         03  SMF30CON    PIC 9(4) COMP.
         03  SMF30AOF    PIC 9(9) COMP.
         03  SMF30ALN    PIC 9(4) COMP.
         03  SMF30AON    PIC 9(4) COMP.
         03  SMF30ROF    PIC 9(9) COMP.
         03  SMF30RLN    PIC 9(4) COMP.
         03  SMF30RON    PIC 9(4) COMP.
         03  SMF30POF    PIC 9(9) COMP.
         03  SMF30PLN    PIC 9(4) COMP.
         03  SMF30PON    PIC 9(4) COMP.
         03  SMF30OOF    PIC 9(9) COMP.
         03  SMF30OLN    PIC 9(4) COMP.
         03  SMF30OON    PIC 9(4) COMP.
         03  SMF30EOF    PIC 9(9) COMP.
         03  SMF30ELN    PIC 9(4) COMP.
         03  SMF30EON    PIC 9(4) COMP.
         03  SMF30EOR    PIC 9(4) COMP.
         03  SMF30RVD    PIC 9(4) COMP.
         03  SMF30EOS    PIC 9(9) COMP.
*    Job / Session Identification section
 01  SMF30ID.
     02  SMF30JBN    PIC X(8).
     02  SMF30PGM    PIC X(8).
     02  SMF30STM    PIC X(8).
     02  SMF30UIF    PIC X(8).
     02  SMF30JNM    PIC X(8).
     02  SMF30STN    PIC 9(4) COMP.
     02  SMF30CLS    PIC X(1).
     02  FILLER      PIC X(1).
     02  SMF30PGN    PIC 9(4) COMP.
     02  SMF30JPT    PIC 9(4) COMP.
     02  SMF30AST    PIC 9(9) COMP.
     02  SMF30PPS    PIC 9(9) COMP.
     02  SMF30SIT    PIC 9(9) COMP.
     02  SMF30STD    PIC 9(7) COMP-3.
     02  SMF30RST    PIC 9(9) COMP.
     02  SMF30RSD    PIC 9(7) COMP-3.
     02  SMF30RDE.
         03  SMF30RET    PIC 9(9) COMP.
         03  SMF30RED    PIC 9(7) COMP-3.
     02  SMF30USR    PIC X(20).
     02  SMF30GRP    PIC X(8).
     02  SMF30RUD    PIC X(8).
     02  SMF30TID    PIC X(8).
     02  SMF30TSN    PIC X(8).
*    EXCP Section
 01  SMF30EXP.
     02  SMF30KEY.
         03  SMF30DEV    PIC X(1).
         03  SMF30UTP    PIC X(1).
         03  SMF30CUA    PIC 9(4) COMP.
         03  SMF30DDN    PIC X(8).
     02  SMF30BLK    PIC 9(9) COMP.
     02  SMF30BSZ    PIC 9(4) COMP.
     02  SMF30DCT    PIC 9(9) COMP.
 PROCEDURE DIVISION.
     CALL 'GETSTORG' USING BIN4-32768 SMF00-POINTER.
     SET ADDRESS OF SMF00-RECORD TO SMF00-POINTER.
     OPEN INPUT SMFDATA.
     PERFORM UNTIL END-OF-FILE
       READ SMFDATA INTO SMF00-RECORD
         AT END MOVE 'Y' TO END-OF-FILE-FLAG
       END-READ
       IF NOT END-OF-FILE AND
          SMF00RTY = BIN1-30 AND SMF00STP = 4
            PERFORM TYPE30-PROCESS THRU TYPE30-END
       END-IF
     END-PERFORM.
     CLOSE SMFDATA.
     GOBACK.
 TYPE30-PROCESS.
* The following code addresses the header and self-defining
* sections.
     MOVE SMF00-ADDRVAL       TO SMF30RPS-ADDRVAL.
     SET  ADDRESS OF SMF30RPS TO SMF30RPS-POINTER.
* The following code addresses the identification section of
* the record and copies the program name. Note that we must
* subtract 4 bytes from the offsets to account for the RDW
* which is not included in our record.
     COMPUTE SMF30ID-ADDRVAL = SMF30RPS-ADDRVAL
                               + SMF30IOF - 4.
     SET ADDRESS OF SMF30ID   TO SMF30ID-POINTER.
     MOVE SMF30PGM TO PROGRAM-NAME.
* The following code addresses the EXCP sections in this record
* one at a time and sums the EXCP counts for all DD entries.
     MOVE 0 TO TOTAL-EXCPS.
     IF SMF30EON NOT = 0
        COMPUTE SMF30EXP-ADDRVAL = SMF30RPS-ADDRVAL
                                   + SMF30EOF - 4
        SET ADDRESS OF SMF30EXP  TO SMF30EXP-POINTER
        PERFORM VARYING DD FROM 1 BY 1 UNTIL DD > SMF30EON

           COMPUTE TOTAL-EXCPS = TOTAL-EXCPS + SMF30BLK
           COMPUTE SMF30EXP-ADDRVAL = SMF30EXP-ADDRVAL
                                      + SMF30ELN
           SET ADDRESS OF SMF30EXP  TO SMF30EXP-POINTER
        END-PERFORM
     END-IF.
     DISPLAY STEP-INFORMATION.
 TYPE30-END.   EXIT.


Steve Baggett
Senior Systems Programmer
AutoZone Inc (USA)                                          c Xephon 1992

