Linear dataset loading and unloading

The advent of MVS/XA 2.2 saw the appearance of Data In Virtual
(DIV), a performance-oriented access method using techniques
similar to those employed by the Auxiliary Storage Manager
(ASM) component of virtual storage administration in MVS.  The
vehicle for Linear Dataset (LDS) creation is IDCAMS DEFINE,
while IDCAMS REPRO is proffered as the utility for supplying
data transfer functions.

The limitations associated with REPRO quickly become apparent
when an initial attempt is made to load an LDS.  REPRO does not
support mixed-mode transfer, ie transfer between LDS and non-
LDS formats.  IBM states that the approved procedure consists of
defining the dataset initially as an ESDS, executing a REPRO to
effect the data load, and ALTERing the ESDS to an LDS.  This
recommendation overlooks the fact that an ESDS contains
embedded VSAM control information which remains with the
dataset after it is altered into linear format, effectively constituting
garbage.  There is thus no direct error-free means of loading an
LDS from non-LDS input.  Similarly, because of the REPRO
prohibition of mixed-mode data transfer, there exists no direct
means of unloading an LDS into a non-LDS format.

It was with these limitations in view that DIVLOAD and
DIVUNLD were written.  DIVLOAD allows data transfer from
any non-LDS or LDS to an LDS.  DIVUNLD allows an LDS to
be unloaded to a RECFM=FB sequential dataset.  In both cases,
the last output record is zero-padded if there is insufficient data to
fill it.  DIVUNLD allows any LRECL and BLKSIZE valid for
RECFM=FB.  Both utilities attempt to provide meaningful
messages for the most commonly-occurring abnormal conditions
for which control is returned to the problem program.  In all such
cases, registers and storage are displayed via SNAP should more
detailed information be necessary.

DIV is a welcome addition to the access method fold.  Hopefully
DIVLOAD and DIVUNLD will ease some of the burden
associated with handling DIV data and allow its full benefits to be
more easily realised.

DIVLOAD SOURCE

         TITLE 'D I V L O A D  -  D-I-V LINEAR DATA SET LOAD'
         MACRO
&NAME    LABEL
&NAME    MVC   LABEL,=CL8'&NAME'
         MEND
         MACRO
&NAME    AMODE24
&NAME    LA    R1,*+6                   CLEAR BIT 0, SET BRANCH ADDR
         BSM   0,R1                     SET AMODE BIT
         MEND
         MACRO
&NAME    AMODE31
         CNOP  2,4                      HALFWORD ALIGN
&NAME    LA    R1,*+14                  SET BRANCH ADDR
         O     R1,*+6                   TURN ON BIT 0 - AMODE = 31
         BSM   0,R1                     SET AMODE BIT
         DC    X'80000000'
         MEND
DIVLOAD  AMODE 31
DIVLOAD  CSECT
         STM   R14,R12,12(R13)          ENTRY LINKAGE
         LR    R12,R15
         USING DIVLOAD,R12
         LA    R9,4095(R12)
         LA    R9,1(R9)
         USING DIVLOAD+4096,R9
         ST    R13,SAVEAREA+4
         LA    R15,SAVEAREA
         ST    R15,8(R13)
         LA    R13,SAVEAREA
         B     DIVL0001
RETURN   SR    R15,R15
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14
DIVL0001 OPEN  (SYSPRINT,(OUTPUT))      OPEN MESSAGE DATA SET
         TM    SYSPRINT+DCBOFLGS-IHADCB,DCBOFOPN OK?
         BO    DIVL0005                 YES
         WTO   'SYSPRINT OPEN ERROR - TERMINATING'
         LA    R15,12                   LOAD RETURN CODE
         B     RETURN+2                 END
DIVL0005 OPEN  (SNAP,(OUTPUT))
         TM    SNAP+DCBOFLGS-IHADCB,DCBOFOPN OK?
         BO    DIVL0010                 YES
         WTO   'SNAP OPEN ERROR - TERMINATING'
         LA    R15,12                   LOAD RETURN CODE
         B     RETURN+2                 END
DIVL0010 AMODE24
         PUT   SYSPRINT,HEADING
         PUT   SYSPRINT,BLANKS
         AMODE31
         LA    R4,0                     LENGTH ACCUMULATOR
         LA    R6,0                     LENGTH AND OFFSET ADJUSTMENT
         RDJFCB (DCB1)                  GET JFCB
         TM    JFCB1+JFCDSRG2-INFMJFCB,JFCORGAM VSAM INPUT?
         BZ    DIVL0065                 NO
* OPEN VSAM INPUT DATA SET *
DIVL0015 LABEL
         OPEN  (ACB1)                   OPEN VSAM INPUT
         LTR   R15,R15                  OK?
         BZ    DIVL0017                 YES
         CLI   ACB1+ACBERFLG-IFGACB,X'A0' LIKELY EMPTY?
         BNZ   DIVL2000                 NO, SOMETHING ELSE
         LR    R2,R15                   SAVE RETURN CODE
         AMODE24
         PUT   SYSPRINT,MSG05
         AMODE31
         LR    R15,R2                   RESTORE RETURN CODE
         B     DIVL2000
DIVL0017 LABEL
         TESTCB ACB=ACB1,ATRB=LDS       LINEAR INPUT?
         BE    DIVL0021                 YES
         TESTCB ACB=ACB1,ATRB=ESDS      ESDS INPUT?
         BNE   DIVL0075                 NO
DIVL0019 LABEL
         MODCB RPL=RPL1,OPTCD=(ADR)     SWITCH ACCESS MODE
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
         B     DIVL0075
DIVL0021 OI    FLAG1,LINEAR             INDICATE
DIVL0023 LABEL
         CLOSE ACB1                     CLOSE THE ACB
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
* ACCESS LINEAR INPUT DATA SET *
DIVL0025 LABEL
         DIV   IDENTIFY,ID=DIVID1,DDNAME=DIVDDN1,TYPE=DA
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
DIVL0030 LABEL
         DIV   ACCESS,ID=DIVID1,MODE=READ,SIZE=DIVSIZE1
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
         GETMAIN RU,LV=32768,BNDRY=PAGE GET BUFFER STORAGE
         ST    R1,DIVAREA1
         LR    R11,R1                   SET BASE REGISTER
DIVL0040 LABEL
         DIV  MAP,ID=DIVID1,AREA=DIVAREA1,OFFSET=DIVOFFS1,SPAN=DIVSPAN1
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
         LA    R6,0                     MAP TRACKER
         LR    R7,R11                   BUFFER POINTER
         LA    R8,0                     'RECORD' COUNTER
         B     DIVL0075
* OPEN NONVSAM INPUT DATA SET *
DIVL0065 LABEL
         OPEN  (DCB1,(INPUT))           OPEN NONVSAM INPUT
         TM    DCB1+DCBOFLGS-IHADCB,DCBOFOPN OK?
         BO    DIVL0070                 YES
         LA    R15,12                   SET RETURN CODE
         B     DIVL2000
DIVL0070 TM    DCB1+DCBRECFM-IHADCB,DCBRECV VARIABLE LENGTH?
         BZ    DIVL0075                 NO
         LA    R6,4                     ADJUST OFFSET
* ACCESS LINEAR OUTPUT DATA SET *
DIVL0075 LABEL
         DIV   IDENTIFY,ID=DIVID2,DDNAME=DIVDDN2,TYPE=DA
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
DIVL0090 LABEL
         DIV   ACCESS,ID=DIVID2,MODE=UPDATE
         LTR   R15,R15                  OK?
         BZ    DIVL0100                 YES
         CLM   R0,B'0011',=X'0802'      I/O DRIVER FAILURE?
         BE    DIVL0095                 YES
         CLM   R0,B'0011',=X'001C'      INACCESSIBLE OBJECT?
         BE    DIVL0097                 YES
         B     DIVL2000                 SOMETHING ELSE
DIVL0095 LR    R2,R15                   SAVE RETURN CODE
         AMODE24
         PUT   SYSPRINT,MSG06
         AMODE31
         LR    R15,R2                   RESTORE RETURN CODE
         B     DIVL2000
DIVL0097 LR    R2,R15                   SAVE RETURN CODE
         AMODE24
         PUT   SYSPRINT,MSG08
         AMODE31
         LR    R15,R2                   RESTORE RETURN CODE
         B     DIVL2000
DIVL0100 GETMAIN RU,LV=65536,BNDRY=PAGE GET BUFFER STORAGE
         ST    R1,DIVAREA2
         LR    R10,R1                   SET BASE REGISTER
         LR    R5,R10                   BUFFER POINTER
* INITIAL OUTPUT WINDOW MAP *
DIVL0110 LABEL
         DIV  MAP,ID=DIVID2,AREA=DIVAREA2,OFFSET=DIVOFFS2,SPAN=DIVSPAN2
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
* CHECK INPUT DATA SET TYPE*
DIVL0115 TM    JFCB1+JFCDSRG2-INFMJFCB,JFCORGAM VSAM INPUT?
         BZ    DIVL0130                 NO
         TM    FLAG1,LINEAR             LINEAR INPUT?
         BO    DIVL0200                 YES
* GET A VSAM RECORD *
DIVL0120 LABEL
         GET   RPL=RPL1                 GET A VSAM RECORD
         LTR   R15,R15                  OK?
         BZ    DIVL0125                 YES
         CLI   RPL1+RPLRTNCD-IFGRPL,8   LOGICAL ERROR?
         BNE   DIVL2000                 NO
         CLI   RPL1+RPLERRCD-IFGRPL,4   END OF FILE?
         BE    DIVL1000                 YES
         B     DIVL2000
DIVL0125 L     R2,AREA1                 RECORD ADDRESS
         L     R3,RPL1+RPLRLEN-IFGRPL   RECORD LENGTH
         B     DIVL0350
* GET A NONVSAM RECORD *
DIVL0130 AMODE24
         GET   DCB1                     GET A NONVSAM RECORD
         LA    R2,0(R6,R1)              OFFSET ADJUSTMENT
         AMODE31
         LH    R3,DCB1+DCBLRECL-IHADCB  RECORD LENGTH
         SR    R3,R6                    LENGTH ADJUSTMENT
         B     DIVL0350
* GET A LINEAR RECORD *
DIVL0200 C     R8,DIVSIZE1              ALL 'RECORDS' PROCESSED?
         BL    DIVL0210                 NOT YET
DIVL0205 LABEL
         DIV   UNIDENTIFY,ID=DIVID1     UNIDENTIFY
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
         B     DIVL1000                 YES, END OF THE LINE
DIVL0210 LTR   R6,R6                    TIME FOR A MAP?
         BNZ   DIVL0250                 NOT YET
         LR    R7,R11                   RESET BUFFER POINTER
DIVL0220 LABEL
         DIV   UNMAP,ID=DIVID1,AREA=DIVAREA1
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
DIVL0230 LABEL
         DIV  MAP,ID=DIVID1,AREA=DIVAREA1,OFFSET=DIVOFFS1,SPAN=DIVSPAN1
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
DIVL0250 LR    R2,R7                    'RECORD' ADDRESS
         LH    R3,=H'4096'              'RECORD' LENGTH
         LA    R6,1(R6)                 UPDATE RE-MAP TRACKER
         C     R6,DIVSPAN1              PAST CURRENT WINDOW?
         BL    DIVL0280                 NOT YET
         A     R6,DIVOFFS1
         ST    R6,DIVOFFS1              UPDATE OFFSET FOR NEXT TIME
         LA    R6,0                     RESET RE-MAP TRACKER
DIVL0280 AH    R7,=H'4096'              UPDATE BUFFER POINTER
         LA    R8,1(R8)                 UPDATE 'RECORD' COUNTER
*  MOVE RECORD TO LINEAR OUTPUT BUFFER *
DIVL0350 LR    R0,R5                    TARGET ADDRESS - OUTPUT BUFFER
         LR    R1,R3                    LENGTH
         LR    R14,R2                   SOURCE ADDRESS - INPUT DATA
         LR    R15,R1
         MVCL  R0,R14                   MOVE DATA
* UPDATE ACCUMULATORS AND POINTERS *
         AP    UT1COUNT,=PL1'1'         INCREMENT RECORD COUNT
         AR    R4,R3                    INCREMENT LENGTH ACCUMULATOR
         AR    R5,R3                    AND BUFFER POINTER
         C     R4,=A(4096*8)            32K OR MORE NOW IN BUFFER?
         BL    DIVL0115                 NOT YET
DIVL0410 LABEL
         DIV SAVE,ID=DIVID2,OFFSET=DIVOFFS2,SPAN=DIVSPAN2,SIZE=DIVSIZE2
         LTR   R15,R15                  OK?
         BZ    DIVL0420                 YES
         LA    R4,0                     BUFFER NOT WRITTEN, CLEAR COUNT
         CLM   R0,B'0011',=X'001A'      UNMAPPED AREA?
         BNE   DIVL2000                 NO, SOMETHING ELSE
         LR    R2,R15                   SAVE RETURN CODE
         AMODE24
         PUT   SYSPRINT,MSG07
         AMODE31
         LR    R15,R2                   RESTORE RETURN CODE
         B     DIVL2000
DIVL0420 LABEL
         DIV   UNMAP,ID=DIVID2,AREA=DIVAREA2 UNMAP CURRENT AREA
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
* MAP NEXT OUTPUT AREA *
         L     R1,DIVOFFS2              GET OFFSET
         A     R1,DIVSPAN2              INCREMENT BY SPAN
         ST    R1,DIVOFFS2              STORE BACK
DIVL0425 LABEL
         DIV  MAP,ID=DIVID2,AREA=DIVAREA2,OFFSET=DIVOFFS2,SPAN=DIVSPAN2
         LTR   R15,R15                  OK?
         BZ    DIVL0440                 YES
         C     R4,=A(4096*8)            THIS MAP NECESSARY I.E > 32K?
         BNH   DIVL0440                 NO, IGNORE FAILURE FOR NOW
         CLM   R0,B'0011',=X'0802'      I/O DRIVER FAILURE?
         BNE   DIVL2000                 NO, SOMETHING ELSE
         LR    R2,R15                   SAVE RETURN CODE
         AMODE24
         PUT   SYSPRINT,MSG07
         AMODE31
         LR    R15,R2                   RESTORE RETURN CODE
         B     DIVL2000
DIVL0440 S     R4,=A(4096*8)            GET LENGTH IN EXCESS OF 32K
         BZ    DIVL0460                 NONE, WAS EXACTLY 32K
         SR    R5,R4                    BACK UP TO START OF EXCESS
         LR    R0,R10                   START OF BUFFER
         LR    R1,R4                    LENGTH OF EXCESS
         LR    R14,R5                   START OF EXCESS
         LR    R15,R1
         MVCL  R0,R14                   MOVE EXCESS TO BUFFER START
DIVL0460 LA    R5,0(R10,R4)             NEW STARTING ADDRESS
         B     DIVL0115                 RECYCLE
* END-OF-FILE ON INPUT *
DIVL1000 AMODE31                        ENSURE AMODE 31
         LTR   R4,R4                    ANYTHING TO SAVE?
         BZ    DIVL1200                 NO
DIVL1100 LABEL
         DIV SAVE,ID=DIVID2,OFFSET=DIVOFFS2,SPAN=DIVSPAN2,SIZE=DIVSIZE2
         LTR   R15,R15                  OK?
         BZ    DIVL1200                 YES
         LA    R4,0                     BUFFER NOT WRITTEN, CLEAR COUNT
         CLM   R0,B'0011',=X'001A'      UNMAPPED AREA?
         BNE   DIVL2000                 NO, SOMETHING ELSE
         LR    R2,R15                   SAVE RETURN CODE
         AMODE24
         PUT   SYSPRINT,MSG07
         AMODE31
         LR    R15,R2                   RESTORE RETURN CODE
         B     DIVL2000
DIVL1200 LABEL
         DIV   UNIDENTIFY,ID=DIVID2
         LTR   R15,R15                  OK?
         BNZ   DIVL2000                 NO
         BAL   R14,DIVL3000             ISSUE RECORD COUNT MESSAGES
         B     RETURN
* ERROR ROUTINE *
DIVL2000 LR    R2,R15
         SNAP  DCB=SNAP,PDATA=REGS,STORAGE=(SNAPBEG,SNAPEND)
         MVC   MSG01A+16(8),LABEL
         AMODE24
         PUT   SYSPRINT,MSG01A
         PUT   SYSPRINT,MSG01B
         AMODE31
         BAL   R14,DIVL3000             ISSUE RECORD COUNT MESSAGES
         LR    R15,R2
         B     RETURN+2
* INTERNAL SUBROUTINES *
* ISSUE RECORD COUNT MESSAGES *
DIVL3000 ST    R14,R14SAVE1             SAVE RETURN ADDRESS
         MVC   MSG03+21(10),=X'40202020202020202120'
         ED    MSG03+21(10),UT1COUNT    EDIT INPUT RECORD COUNT
         AMODE24
         PUT   SYSPRINT,MSG03           PUT IT OUT
         AMODE31
* COMPUTE NO. OF OUTPUT BLOCKS WRITTEN *
         LA    R0,0
         LR    R1,R4                    LENGTH OF REMAINING BUFFER DATA
         D     R0,=A(4096)              NO. OF 4K BLOCKS
         LTR   R0,R0                    ANY REMAINDER?
         BZ    DIVL3050                 NO
         LA    R1,1(R1)                 YES, INCREMENT QUOTIENT
DIVL3050 A     R1,DIVOFFS2              ADD BLOCKS ALREADY WRITTEN
         CVD   R1,WORK1                 CONVERT TO PACKED
         MVC   MSG04+21(10),=X'40202020202020202120'
         ED    MSG04+21(10),WORK1+3     EDIT OUTPUT RECORD COUNT
         AMODE24
         PUT   SYSPRINT,MSG04           PUT IT OUT
         AMODE31
         L     R14,R14SAVE1             RELOAD RETURN ADDRESS
         BR    R14                      RETURN
SAVEAREA DC    18F'0'
HEADING  DC    CL80'                                 D I V L O A D'
BLANKS   DC    CL80' '
MSG01A   DC    CL80'ERROR AT LABEL ''XXXXXXXX'' - CHECK ''SNAP'' DATA S*
               ET FOR REGISTERS AND STORAGE'
MSG01B   DC    CL80'ALSO CHECK THE JOB LOG FOR ANY SYSTEM ERROR MESSAGE*
               S'
MSG03    DC    CL80'SYSUT1 RECORD COUNT = XXXXXXXXX  (NO. OF 4K BLOCKS *
               IF INPUT IS LINEAR)'
MSG04    DC    CL80'SYSUT2 RECORD COUNT = XXXXXXXXX  (NO. OF 4K BLOCKS *
               WRITTEN)'
MSG05    DC    CL80'ERROR AT LABEL GIVEN BELOW - POSSIBLE CAUSE IS AN E*
               MPTY INPUT DATA SET'
MSG06    DC    CL80'ERROR AT LABEL GIVEN BELOW - POSSIBLE CAUSE IS A NO*
               N-LINEAR OUTPUT DATA SET'
MSG07    DC    CL80'ERROR AT LABEL GIVEN BELOW - POSSIBLE CAUSE IS A FU*
               LL OUTPUT DATA SET'
MSG08    DC    CL80'ERROR AT LABEL GIVEN BELOW - POSSIBLE CAUSE IS AN O*
               UTPUT DATA SET ALREADY IN USE'
R14SAVE1 DC    A(0)
SNAPBEG  EQU   *
FLAG1    DC    X'00'
LINEAR   EQU   X'80'
UT1COUNT DC    PL5'0'
ACB1     ACB   AM=VSAM,DDNAME=SYSUT1,BUFND=16,BUFNI=4
RPL1     RPL   AM=VSAM,ACB=ACB1,AREA=AREA1,AREALEN=4,ARG=ARG1,OPTCD=LOC
AREA1    DC    F'0'
ARG1     DC    F'0'
DCB1     DCB   DDNAME=SYSUT1,DEVD=DA,MACRF=GL,DSORG=PS,EODAD=DIVL1000, *
               BFTEK=A,EXLST=EXLST1
SYSPRINT DCB   DDNAME=SYSPRINT,DEVD=DA,MACRF=PM,DSORG=PS,RECFM=FB,     *
               LRECL=80,BLKSIZE=800
SNAP     DCB   DDNAME=SNAP,RECFM=VBA,LRECL=125,BLKSIZE=1632,MACRF=(W), *
               DSORG=PS
LABEL    DC    CL8' '
DIVID1   DC    XL8'0'
DIVDDN1  DC    X'06',C'SYSUT1'
DIVAREA1 DC    A(0)
DIVOFFS1 DC    F'0'
DIVSPAN1 DC    F'8'
DIVSIZE1 DC    F'0'
DIVID2   DC    XL8'0'
DIVDDN2  DC    X'06',C'SYSUT2'
DIVAREA2 DC    A(0)
DIVOFFS2 DC    F'0'
DIVSPAN2 DC    F'8'
DIVSIZE2 DC    F'0'
WORK1    DC    D'0'
EXLST1   DC    0F'0',AL1(7),AL3(JFCB1)
JFCB1    DC    0F'0',XL176'0'
SNAPEND  EQU   *
         LTORG
         DCBD  DEVD=DA,DSORG=PS
         IFGACB AM=VSAM
         IFGRPL AM=VSAM
         DSECT
         IEFJFCBN
         END

EXECUTION JCL
//jobname  JOB
//DIVLOAD  EXEC PGM=DIVLOAD
//SYSUT1   DD   DSN=any.data.set,DISP=SHR
//SYSUT2   DD   DSN=linear.data.set,DISP=SHR
//SYSPRINT DD   SYSOUT=*
//SYSUDUMP DD   SYSOUT=*
//SNAP     DD   SYSOUT=*

The source code for DIVUNLD and an example of the JCL
required to execute it will be published in next month's issue.

    € Xephon 1989

