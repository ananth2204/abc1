Displaying on-line DASD volumes

The article An on-line DASD monitor by G B Din, published in
MVS Update in September 1992 (issue 72), inspired me to
enhance the interesting REXX EXEC ODASD (now called
ODASDN) in order to run it stand-alone to obtain some
complementary information about volumes: for example, their
SMS status and storage group, the CHPIDs connected to them,
their occupancy, any 'special' usage (eg SYSRES, RACF,
paging, mastercat volume), etc.

Four external Assembler routines are called by ODASDN.
LSPACE (gets occupancy information) and OBTAIN (reads the
VTOC DSCB 4) are not supplied (as the above-mentioned article
has them); STORGRP returns the SMS storage group to which a
volume belongs and TESTENQV tests whether a SYSVTOC
ENQ/RESERVE has been issued against the volume (in which
case, neither OBTAIN nor LSPACE are done to avoid waiting).
STORGRP and TESTENQV use an authorization SVC (SVC
235). You may call ODASDN with the 'GLOBAL' parameter if
you need only the final statistics. The 'I' column indicates the
status of the indexed VTOC (active or not); the 'Sms' column
displays 'SMS' (SMS converted volume) or 'SMSi' (SMS initial
volume).

Figure 1 shows an example of the display you will get.

   %ODASDN 66*
Friday 04 Feb 1994 (02/04/94,94035) 16:51:46 9021 SYSB MVS/SP3.1.3
Searching for online DASD with volser or address ==> 66

Volser Cuu Type Density I %Full   Gb  Stat. Usage Sms Storgrp Chpids
SYSBR2 660 3390 Triple  Y  62.6  2.84       PRIV              24-27-17-0E Sys
SYS004 661 3390 Triple  Y  77.3  2.84 ALLOC PRIV              24-27-17-0E RACF
EXPW02 662 3390 Triple  Y   1.0  2.84       PRIV  SMS SOGTRAV 24-27-17-0E
SYSBW0 663 3390 Triple  Y  19.3  2.84 ALLOC STOR  SMS TEMP    24-27-17-0E
SYS002 664 3390 Triple  Y  76.0  2.84 ALLOC PRIV              24-27-17-0E
SYSP01 665 3390 Triple  Y  62.7  2.84 ALLOC PRIV  SMS SYSPP   24-27-17-0E
DUPD17 666 3390 Triple  Y  89.9  2.84 ALLOC PRIV              24-27-17-0E
EXPD11 667 3390 Triple  Y  99.7  2.84 ALLOC PRIV              24-27-17-0E
SYS005 668 3390 Triple  Y  78.6  2.84 ALLOC PRIV              24-27-17-0E Pag
DUPV02 669 3390 Triple  Y  96.9  2.84 ALLOC PRIV              24-27-17-0E
DUPD18 66A 3390 Triple  Y  93.2  2.84 ALLOC PRIV              24-27-17-0E
SYS003 66B 3390 Triple  Y  77.0  2.84 ALLOC PRIV              24-27-17-0E
DUPD35 66C 3390 Triple  Y  93.7  2.84 ALLOC PRIV              24-27-17-0E
SYSAG1 66D 3390 Triple  Y  71.7  2.84 ALLOC PRIV              24-27-17-0E
SYSB03 66E 3390 Triple  Y  60.4  2.84 ALLOC PRIV              24-27-17-0E MCat
SPARE1 66F 3390 Triple  Y  39.2  2.84       PRIV  SMS         24-27-17-0E

16 volumes processed, average occupancy  68.7 %
Total capacity :     45.41 billions of bytes

Figure 1: Sample display

ODASDN source

/*------------------------------ Rexx -----------------------------*/
/* Function   : Display information for all on-line DASD           */
/* Callers    : TSO user or BATCH job                              */
/* Dependency : LSPACE OBTAIN STORGRP TESTENQV (external functions)*/
/* Syntax     : ODASDN <volser_mask or address_mask>  <GLOBAL>     */
/*-----------------------------------------------------------------*/
 arg volser  opt
 x = 0
/*-----------------------------------------------------------------*/
/* DASD physical characteristics :                                 */
/* please add a new line for any new type of DASD                  */
/*-----------------------------------------------------------------*/
 T3330    = 13030       /* bytes available on 1 track (3330)       */
 T3350    = 19069       /* bytes available on 1 track (3350)       */
 T3375    = 35616       /* bytes available on 1 track (3375)       */
 T3380    = 47476       /* bytes available on 1 track (3380)       */
 T3390    = 56664       /* bytes available on 1 track (3390)       */
 T9345    = 46456       /* bytes available on 1 track (9345)       */
/*-----------------------------------------------------------------*/
/* DASD physical characteristics (for models with different        */
/* capacities)   please add a new line for any new type of DASD    */
/*-----------------------------------------------------------------*/
 Cyls3380 = 885         /* cylinders for single capacity (3380)    */
 Cyls3390 = 1113        /* cylinders for single capacity (3390)    */
 Cyls9345 = 1440        /* cylinders for single capacity (9345)    */
/*-----------------------------------------------------------------*/
/*  Date - time information                                        */
/*-----------------------------------------------------------------*/
 tbmon = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'
 today = date(w)
 today = today substr(date(e),1,2)
 month = substr(date(u),1,2)
 today = today word(tbmon,month)
 year  = substr(date(s),1,4)
 today = today year '('||date(u)||','||date(j)||')'  time()
/*-----------------------------------------------------------------*/
/*  System information                                             */
/*-----------------------------------------------------------------*/
 cvt = storage(10,4)
 cvtext2 = storage(d2x(c2d(cvt) + c2d('149'x)),3)
 cvtuser = storage(d2x(c2d(cvt) + c2d('cc'x)),4)
 cpu = storage(d2x(c2d(storage(208,4)) + 12),4)    /* cpu type     */
 sid = storage(d2x(c2d(cvt) + c2d('154'x)),8)      /* system id    */
 sid = word(sid,1)
 splvl = storage(d2x(c2d(cvt) - c2d('28'x)),8)     /* mvs level    */
 today = today cpu sid 'MVS/'||splvl
/*                                                                 */
/*                                                                 */
 if volser = '' then
      do
      volser = '*'
      x = -1
      end
 if opt ¬= 'GLOBAL' then say today
 if opt ¬= 'GLOBAL' then ,
 say 'Searching for online DASD with volser or address ==> 'volser
 if x = 0 then
      do
      x = pos('*',volser)
      if x > 0 then volser = substr(volser,1,x-1)
      if x = 0 and length(volser) < 6 then x = 1
      end
/*-----------------------------------------------------------*/
/*         Get MASTERCAT volume                              */
/*-----------------------------------------------------------*/
 cvt  = storage(10,4)                   /* cvt address in memory */
                                        /* cvt+256=addr amcbs    */
 amcbs  = storage(d2x(256+c2d(cvt)),4)  /* address amcbs         */
                                        /* amcbs+8=addr mcat acb */
 acb    = storage(d2x(8+c2d(amcbs)),4)  /* address acb mastercat */
                                        /* acb+40 =addr caxwa    */
 caxwa  = storage(d2x(64+c2d(acb)),4)   /* address caxwa         */
                                        /* caxwa+34=dsn mcat     */
 dsncat = storage(d2x(52+c2d(caxwa)),44) /* address caxwa        */
 ucbcat = storage(d2x(28+c2d(caxwa)),4)  /* address ucb volume   */
 volcat = storage(d2x(28+c2d(ucbcat)),6) /* volser               */
/*-----------------------------------------------------------*/
/*         Get RACF volume                                   */
/*-----------------------------------------------------------*/
 cvt  = storage(10,4)                   /* cvt address in memory */
                                        /* cvt+3e0=addr rcvt     */
 rcvt   = storage(d2x(992+c2d(cvt)),4)  /* address rcvt          */
                                        /* rcvt+38 =dsn racf db  */
 dsnrac = ''
 volrac = ''
 if c2d(rcvt) ¬= 0 then do
 dsnrac = storage(d2x(56+c2d(rcvt)),44) /* dsn                   */
 ucbrac = storage(d2x(36+c2d(rcvt)),4)  /* rcvt+24 = ucb db racf */
 volrac = storage(d2x(28+c2d(ucbrac)),6)     /* volser           */
 end
/* Set up constants */
 dasd_ucb = '20'x
 online = '80'x
 ucbalo = '08'x
 indx_vtoc = 'C0'x
 /* Initializations  */
 nv    = 0                             /* total volumes accessed */
 nve   = 0                             /* total volumes in error */
 occup = 0                             /* occupancy              */
 nbytes_all = 0                        /* total capacity in bytes */
 /* Find UCB area via CVT */
 cvtucba = storage(d2x(c2d(cvt) + c2d('4e4'x)),4)
 ucbnext = cvtucba
 say
/*-----------------------------------------------------------*/
/*         Display the header                                */
/*-----------------------------------------------------------*/
 if opt ¬= 'GLOBAL' then say 'Volser Cuu Type Density I %Full  ' ,
   'Gb  Stat. Usage Sms  Storgrp  Chpids'
/*-----------------------------------------------------------*/
/*         Main loop : process all ucbs                      */
/*-----------------------------------------------------------*/
 do while c2d(ucbnext) ¬= 0      /* until end of ucb chain reached */
 ucba = ucbnext
 ucbnext = storage(d2x(c2d(ucba) + c2d('08'x)),4)      /* UCBNXUCB */
 if debug = 'Y' then say storage(d2x(c2d(ucba) + c2d('0d'x)),3)
/*                                                           */
/*  Keep only ucbs for DASD devices                          */
/*                                                           */
 ucbtbyt3 =  storage(d2x(c2d(ucba) + c2d('12'x)),1)
 if (bitand(ucbtbyt3,dasd_ucb) ¬= dasd_ucb) then iterate
/*                                                           */
/*  Keep only ONLINE devices                                 */
/*                                                           */
 ucbstat = storage(d2x(c2d(ucba) + c2d('03'x)),1)
 if bitand(ucbstat,online) ¬= online  then iterate
/*                                                           */
/*  System resident disk                                     */
/*                                                           */
 if bitand(ucbstat,'02'x) = '02'x then sysr = 'Y'
                                  else sysr = 'N'
/*                                                           */
/*  Get all defined chpids that access that unit             */
/*                                                           */
 chp = c2x(storage(d2x(c2d(ucba) - c2d('18'x)),8))
 chps = substr(chp,1,2)
 if (substr(chp,3,2)¬='FF') then chps=chps'-'substr(chp,3,2)
 if (substr(chp,5,2)¬='FF') then chps=chps'-'substr(chp,5,2)
 if (substr(chp,7,2)¬='FF') then chps=chps'-'substr(chp,7,2)
 if (substr(chp,9,2)¬='FF') then chps=chps'-'substr(chp,9,2)
 if (substr(chp,11,2)¬='FF') then chps=chps'-'substr(chp,11,2)
 if (substr(chp,13,2)¬='FF') then chps=chps'-'substr(chp,13,2)
 if (substr(chp,15,2)¬='FF') then chps=chps'-'substr(chp,15,2)
/*                                                           */
/*  Other characteristics (type, volser, usage, paging dev)  */
/*                                                           */
 stat = '     '
 if (ucbalo = bitand(ucbstat,ucbalo)) then stat = 'ALLOC'
 ucbuntyp = storage(d2x(c2d(ucba) + c2d('13'x)),1)
 devt = 'DASD'
/*  Add a test for any new DASD model                        */
 if bitand(ucbuntyp,'04'x) = '04'x then devt = '9345'
 if bitand(ucbuntyp,'09'x) = '09'x then devt = '3330'
 if bitand(ucbuntyp,'0B'x) = '0B'x then devt = '3350'
 if bitand(ucbuntyp,'0C'x) = '0C'x then devt = '3375'
 if bitand(ucbuntyp,'0E'x) = '0E'x then devt = '3380'
 if bitand(ucbuntyp,'0F'x) = '0F'x then devt = '3390'
 ucbname = storage(d2x(c2d(ucba) + c2d('0d'x)),3)        /* address */
 ucbvol1 = storage(d2x(c2d(ucba) + c2d('1c'x)),6)        /* volser  */
 if debug = 'Y' then say ucbvol1
 if c2x(ucbvol1) = '000000000000' then ucbvol1 = ' N/A '
 ucbstab = storage(d2x(c2d(ucba) + c2d('22'x)),1)
 use = ''
 if bitand(ucbstab,'10'x) = '10'x then use = 'PRIV '
 if bitand(ucbstab,'08'x) = '08'x then use = 'PUB  '
 if bitand(ucbstab,'04'x) = '04'x then use = 'STOR '
 if bitand(ucbstab,'40'x) = '40'x then page = 'Y'
                                  else page = 'N'
/*                                                           */
/* If volser or address matches our mask, process the device */
/*                                                           */
 if ((x ¬< 1) & ,        /* if we don't select all volumes      */
 (substr(ucbvol1,1,length(volser)) ,
 ¬= volser)   & ,        /* and the volume doesn't match name   */
 (substr(ucbname,1,length(volser)) ,
 ¬= volser))    ,        /* and the address doesn't match, drop */
     then iterate
/*                                                           */
/* Test SYSVTOC ENQ in order to avoid wait during OBTAIN     */
/*                                                           */
 if TESTENQV(ucbvol1) ¬= 0 then do
   say ucbvol1 ucbname devt '** ENQ/VTOC-not accessed **' ,
       use '???  ??????? ' chps
   nve = nve + 1
   iterate
   end
/*-----------------------------------------------------------*/
/* Obtain DSCB-4 from VTOC, and extract from it              */
/*   SMS flag, storage group, capacity, density              */
/*-----------------------------------------------------------*/
 fmt4 = OBTAIN(ucbvol1)
/* non-SMS disk, or SMS converted, or initial ?              */
 ds4smsfg = substr(fmt4,17,1)
 if (ds4smsfg = '00'x) then sms = '    '   /* non-SMS disk         */
 if (ds4smsfg = 'c0'x) then sms = 'SMS '   /* SMS disk (converted) */
 if (ds4smsfg = '40'x) then sms = 'SMSi'   /* SMS disk (initial)   */
 stg = '        '
/* If SMS volume, determine SMS storage group it belongs to  */
 if (ds4smsfg = 'c0'x) | (ds4smsfg = '40'x) then do
      stg = STORGRP(ucbvol1)
      stg = word(stg,1)
      stg = substr(stg,1,8,' ')                   /* padding */
      if stg = '?' then stg = '        '   /* sms DASD with no stg */
      end
 ds4devsz = substr(fmt4,19,4)
 cyls = c2d(substr(ds4devsz,1,2))-1      /* number of logical cyls */
 trks_per_cyl = c2d(substr(ds4devsz,3,2))  /* tracks in a log. cyl */
/* Physical size of the track (e.g.: 47968 for 3380, 58786 for 3390)*/
 ds4devtk = c2d(substr(fmt4,23,2))       /* device track length    */
/*                                                           */
/*  Compute DASD capacity in gigabytes                       */
/*                                                           */
 interpret 'bytes_per_trk = T'||devt     /* use the Txxxx variables */
 nbyts = cyls * trks_per_cyl * bytes_per_trk
 Gb = format(nbyts/1E9,2,2)
 nbytes_all = nbytes_all + nbyts             /* big total    */
/*                                                           */
/*  Evaluate the density                                     */
/*                                                           */
 den = 0
 if (devt = '3330' | devt = '3350' | devt = '3375')  then den = 1
    else do  /* calculate density pour 3380, 3390  */
         interpret 'ncyls = cyls'||devt  /* use the CYLSxxxx vars   */
         den  =  cyls%ncyls              /* to get the density      */
         if den < cyls/ncyls then den = den + 1   /* rounding up    */
         end                             /* (for example : 9345-2)  */
 select
   when den = 1 then devt = devt' Single '
   when den = 2 then devt = devt' Double '
   when den = 3 then devt = devt' Triple '
   otherwise do
             devt = devt 'Model_'||den    /* example : IBM 3390-9   */
             end
 end   /* end of select */
/*-----------------------------------------------------------*/
/* LSPACE gives free space and VTOCIX status                 */
/*-----------------------------------------------------------*/
 lsp = LSPACE(ucba)
 retc = length(lsp)
 if retc >= 36 then retc = 0
 ix = '?'
 perc = '?????'
 select
 when retc = 0 then    /* LSPACE ended normally, evaluate % full */
   do                                     /* and vtoc-index      */
    perc = ((c2d(substr(lsp,9,4)) + ,
           c2d(substr(lsp,13,4))/trks_per_cyl)/cyls)
    perc = 1-perc
    if perc > 1 then say 'error :' ucbvol1 100*perc ,
                ' full'
                else do   /* Compute vol number and total bytes */
                nv = nv+1
                occup = occup+perc
                end
    perc = format(perc*100,3,1)
    ix = 'N'
    lspdstat = substr(lsp,2,1)
    if bitand(lspdstat,indx_vtoc) = indx_vtoc then ix = 'Y'
    end
/*                                                 */
/* LSPACE ended abnormally, issue an error message */
/*                                                 */
 when retc = 4 then,
     msgerr =    ' LSPACE Permanent I/O Error            RC=4'
 when retc = 8 then,
     msgerr =    ' LSPACE Non-Standard OS Volume         RC=8'
 when retc = 12 then,
     msgerr =    ' LSPACE Invalid Parm or UCB Not Ready  RC=12'
 when retc = 16 then,
     msgerr =    ' LSPACE Invalid Parm List              RC=16'
 otherwise,
     msgerr =    ' LSPACE Invalid UCB addr               RC='||retc
 end
 if  retc ¬= 0 then say ucbvol1 ':' msgerr
/*                                                */
/* Add a comment for some special disks           */
/*                                                */
 comment = ''
 if (page = 'Y')       then comment =         'Pag'
 if (sysr = 'Y')       then comment = comment 'Sys'
 if (ucbvol1 = volcat) then comment = comment 'MCat'
 if (ucbvol1 = volrac) then comment = comment 'RACF'
/*                                             */
/* Display the current line for that disk      */
/*                                             */
 if opt ¬= 'GLOBAL' then say ucbvol1 ucbname devt ix perc Gb ,
                    stat use sms stg chps comment
 end  /* process next ucb */
/*-----------------------------------------------------------*/
/* Final Statistics (occupancy)                              */
/*-----------------------------------------------------------*/
 say
 if nv > 0 then do
        say nv 'volumes processed, average occupancy' ,
        format(100*occup/nv,3,1) '%'
        say 'Total capacity : '  format(nbytes_all/1E9,5,2) ,
        'billions of bytes'
        end
 if nve > 0 then say '**' nve 'volume(s) could not be accessed' ,
        'due to VTOC enqueue'
 exit

STORGRP source code

* STORGRP  - RETURNS THE STORAGE GROUP A DASD VOLUME BELONGS TO
* INPUT  : volser (1-6 bytes)
* OUTPUT : storage group name (30 bytes)
* Invocation :  sgname = STORGRP(volser)
         IRXEFPL
         IRXARGTB
         IRXEVALB
         IGDSGD  ,   STORAGE GROUP DEFINITION
         IEFSSSA ,   SSOB EXTENSION FOR SMS SSI REQUESTS
         IEFJESCT
         CVT  DSECT=YES
STORGRP  CSECT
STORGRP  AMODE 24
STORGRP  RMODE 24
         SAVE (14,12),,'STORGRP.&SYSDATE.GET SMS STORAGE GROUP NAME'
         BASR  R12,0
         USING *,R12
         LA    R2,SAVE                   SAVE AREA CHAINING
         ST    R13,4(R2)
         ST    R2,8(R13)
         LR    R13,R2
* OBTAIN PARAMETERS
         LR    R11,R1                    EFPL
         USING EFPL,R11
         L     R10,EFPLARG               ARGUMENTS TABLE
         USING ARGTABLE_ENTRY,R10
         L     R8,EFPLEVAL               ADDRESS EVALBLOCK
         L     R9,0(0,R8)                EVALBLOCK
         USING EVALBLOCK,R9
         L     R8,ARGTABLE_ARGSTRING_PTR
         C     R8,=F'-1'                 END OF PARMLIST ?
         BNE   GETVOL
         LA    R15,20                    YES, ERROR
         B     EXIT                      EXIT
GETVOL   L     R7,ARGTABLE_ARGSTRING_LENGTH   LENGTH OF VOLSER
         C     R7,=F'0'                  = 0 ?
         BE    ERRVOL                    YES, ERROR
         C     R7,=F'6'                  <= 6 ?
         BNH   MVCVOL                    YES, CORRECT
ERRVOL   LA    R15,20                    NO, ERROR
         B     EXIT                      EXIT
MVCVOL   MVC   VOLSMS,=CL6' '            VOLSMS
         BCTR  R7,0
         EX    R7,MOVEVOL
         LA    R5,30                     ZONE IS 30 BYTES LONG
         ST    R5,EVALBLOCK_EVLEN
         MVC   EVALBLOCK_EVDATA(30),=CL30' '
* PREPARE THE SSI REQUEST
         LA    R7,ZONE
         USING IGDSGD,R7
         LA    R8,EXTE
         USING IEFSSSA,R8
         MVC   SSSALEN,=H'4096'
         MVC   SSSAID,=CL4'SSSA'         IDENTIFIER
         MVC   SSSASFN,=H'1'             SUBFUNCTION CODE  (SSSAACTV)
         MVC   SSOBFUNC,=H'55'           FUNCTION CODE     (SSOBSSSM)
         MVC   SSSAVER,=H'1'             VERSION           (SSOBSSVR)
         MVI   SSSA1TYP,X'8'             RETURN STGROUP  -  SSSA1VSG
* ZONE TO RECEIVE REQUIRED DATA :
         MVC   SSSA1LEN,=F'256'          LENGTH OF ZONE
         MVC   SSSA1PTR,=A(ZONE)         ADDRESS OF ZONE
* REQUIRED DATA :
         MVC   SSSA1CNT,=F'1'            NUMBER OF CONSTRUCTS : 1
         MVC   SSSA1NML,=H'6'            LENGTH OF CONSTRUCT : 6
         MVC   SSSA1NAM(6),VOLSMS        NAME OF CONSTRUCT
         LA    R0,1
         SVC   235                       QUICK AUTHORIZATION
         MODESET KEY=ZERO,MODE=SUP
         LA    R1,PARAM
         OI    PARAM,X'80'
         IEFSSREQ     ,                  ISSUE SMS SSI REQUEST
         ST    R15,RETCODE
         MODESET KEY=NZERO,MODE=PROB
         XR    R0,R0
         SVC   235                       QUICK AUTHORIZATION
         CLC   RETCODE,=F'0'
         BNE   ERRORSSI
         LH    R1,SGDNMLEN               LENGTH OF NAME
         ST    R1,EVALBLOCK_EVLEN        REXX VARIABLE LENGTH
         LTR   R1,R1
         BZ    EXIT                      NOTHING WAS FOUND
         BCTR  R1,0
         EX    R1,MOVSGN                 GET NAME OF GROUP
         B     EXIT
* ERROR (REASON CODE IS IN SSSARSN)
ERRORSSI MVI   EVALBLOCK_EVDATA,C'?'     STG = '?'
         LA    R5,1
         ST    R5,EVALBLOCK_EVLEN
         B     EXIT                      TERMINATED
* RETURN TO CALLER
EXIT     DS    0H
         XR    R15,R15
         L     R13,SAVE+4
         L     R14,12(,R13)
         LM    R1,R12,24(R13)
         BSM   R0,R14                    RC = R15
MOVEVOL  MVC   VOLSMS(1),0(R8)           VOLSMS
MOVSGN   MVC   EVALBLOCK_EVDATA(1),SGDFNAME
SAVE     DS    18F
VOLSMS   DS    CL6
* DATA FOR SMS SSI REQUEST
RETCODE  DC    F'0'
PARAM    DC    A(SSOB)
* SSOB TO DESCRIBE OUR REQUEST
SSOB     DS    0F
SSOBID   DC    C'SSOB'                   SSOB IDENTIFIER
SSOBLEN  DC    H'28'                     SSOB LENGTH
SSOBFUNC DC    H'0'                      REQUIRED FUNCTION
SSOBSSIB DC    A(SSIB)                   SSIB ADDRESS = 0
SSOBRETN DC    F'0'                      SUBSYSTEM RETURN CODE
SSOBINDV DC    A(EXTE)                   EXTENSION ADDRESS
         DC    D'0'                      2 WORDS FOR SSI
* SSIB TO INDICATE THE SUBSYSTEM WE ARE CALLING
SSIB     DS    0F
SSIBID   DC    CL4'SSIB'
SSIBLEN  DC    AL2(36)
SSIBFLG1 DS    CL1
SSIBSSID DS    CL1
SSIBSSNM DC    CL4'SMS'
SSIBJBID DC    CL8'SMS'
SSIBDEST DC    CL8' '
SSIBRSV1 DS    F
SSIBSUSE DS    F
         DS    0F
ZONE     DS    CL256    ZONE TO RECEIVE THE STORAGE GROUP NAME FROM SSI
         LTORG
         DS    0F
EXTE     DS    CL4096   SSOB EXTENSION FOR SMS FUNCTIONS
         END

TESTENQV source code

* TESTENQV - TEST FOR ENQ ON SYSVTOC
* Sysvtoc enq is a long-standing one (dfdss, ickdsf, etc)
* We test for it to prevent waits during OBTAIN processing
* INPUT  : volser (6 bytes)
* OUTPUT : '0' if no ENQ, '4' if ENQ was already issued
* Invocation : if TESTENQV(volser) = 0 then ...
TESTENQV CSECT
TESTENQV AMODE 31
TESTENQV RMODE ANY
         SAVE (14,12),,'TESTENQV.&SYSDATE.&SYSTIME.TEST SYSVTOC ENQ'
         BASR  R12,0
         USING *,R12
         LA    R2,SAVE                 MY SAVEAREA
         ST    R13,4(R2)               SAVE CALLER'S SAVEAREA ADDR
         ST    R2,8(R13)               MY SAVEAREA ADDR IN CALLER'S
         LR    R13,R2                  MY SAVEAREA
* GET PARAMETER INFO
         LR    R11,R1                  EFPL
         USING EFPL,R11
         L     R10,EFPLARG             ARGUMENTS TABLE
         USING ARGTABLE_ENTRY,R10
         L     R8,EFPLEVAL             ADDRESS OF EVALBLOCK
         L     R9,0(0,R8)              EVALBLOCK
         USING EVALBLOCK,R9
         L     R8,ARGTABLE_ARGSTRING_PTR
         C     R8,=F'-1'               END OF PARMLIST ?
         BNE   GETVOL
         LA    R15,20                  SIGNAL ERROR
         B     EXIT                    EXIT
GETVOL   L     R7,ARGTABLE_ARGSTRING_LENGTH   LENGTH OF VOL FIELD
         C     R7,=F'6'                IS LENGTH = 6 BYTE ?
         BE    MVCVOL                  YES, GET VOLSER
         LA    R15,20                  SIGNAL ERROR
         B     EXIT                    EXIT
MVCVOL   MVC   VOLSER,0(R8)            VOLSER
         LA    R5,1                    LENGTH OF DATA TO BE RETURNED
         ST    R5,EVALBLOCK_EVLEN      LENGTH OF DATA RETURNED
* ISSUE ENQ MACRO, IN TEST MODE
         LA    R0,1
         SVC   235                     QUICK AUTHORIZATION
         MODESET KEY=ZERO,MODE=SUP
         ENQ  (QNAME,VOLSER,E,6,SYSTEMS),RET=TEST
         ST    R15,RC
         MODESET KEY=NZERO,MODE=PROB
         XR    R0,R0
         SVC   235                     QUICK AUTHORIZATION
         L     R15,RC
         MVI   EVALBLOCK_EVDATA,C'0'
         LTR   R15,R15
         BZ    EXIT
         MVI   EVALBLOCK_EVDATA,C'4'   AN ENQUEUE WAS ISSUED
* RETURN TO CALLER
EXIT     XR    R15,R15
         L     R13,SAVE+4              CALLER'S SAVEAREA
         L     R14,12(,R13)
         LM    R1,R12,24(R13)
         BSM   R0,R14                  RETURN WITH RC IN R15
SAVE     DS    18F
QNAME    DC    CL8'SYSVTOC '           QNAME FOR ENQ
RC       DS    F
VOLSER   DS    CL6                     RNAME FOR ENQ = VOLSER
         LTORG
         IRXEFPL
         IRXARGTB
         IRXEVALB
         END


Thierry Falissard
Systems Engineer
Banque la Henin (France)                                                       c

