Reporting on load module updates

Occasionally, situations arise that lead you to believe that
something has changed, but you aren't sure exactly what it
might be.  A tool that can be helpful if this occurs would be a
program that provides a listing of all modules in a load library
that have changed (have either been link-edited or zapped)
since a given date.

The CHNGDATE program provides this capability.  The
program accepts a Julian date input parameter which is used as
the compare date.  If the date parameter is specified, the
program produces a listing of modules that have been updated
since the specified date including the date the update was
performed and the reason for the update (ie LKED, ZAP, or
BOTH).  When no parameter is specified, the program
produces a listing that includes the names of all modules in the
library, the date each module was linked, and the date each
module was last zapped if this is applicable (ie the module
must have been zapped at least once to have valid zap date
data).

For example, the following could be used to produce a listing
of all modules from SYS1.NUCLEUS that have been updated
since July 1, 1990:

//STEP1    EXEC PGM=CHNGDATE,PARM='90182'
//STEPLIB  DD   DSN=CHNGDATE.LIBRARY,DISP=SHR
//INLIB    DD   DSN=SYS1.NUCLEUS,DISP=SHR
//SYSPRINT DD   SYSOUT=A

Figure 1 illustrates what the output from the above run might
look like.

Figure 2 shows what the output from the above run would look
like if the parameter was omitted.


CHNGDATE PROGRAM

         MACRO
&LBL     $XCL  &SRCADDR=,&DATALEN=
.*   THE CONTENTS OF REGS R0, R1, R14, R15 ARE NOT PRESERVED BY THIS
.*   MACRO AND THEY SHOULD NOT BE USED AS INPUT PARAMETER REGISTERS
.*   SRCADDR:  IS THE ADDRESS OF THE DATA AREA TO BE CLEARED
.*   DATALEN:  IS THE LENGTH OF THE AREA TO BE CLEARED
         AIF   ('&SRCADDR'(1,1) EQ '(').ISAREG1
&LBL     LA    0,&SRCADDR              SET DATA AREA ADDRESS
         AGO   .GETLEN                 GET DATA AREA LENGTH
.ISAREG1 ANOP
&LBL     LR    0,&SRCADDR(1)           SET DATA AREA ADDRESS
.GETLEN  ANOP
         AIF   ('&DATALEN'(1,1) EQ '(').ISAREG2
         AIF   (T'&DATALEN NE 'N').SETLEN1
         AIF   (&DATALEN LE 4095).SETLEN2
         MNOTE 5,'CONSTANT GREATER THAN 4095'
.SETLEN1 L     1,&DATALEN               SET DATA AREA LENGTH
         AGO   .ALLDONE
.SETLEN2 XR    1,1                      CLEAR R1
         LA    1,&DATALEN               SET DATA AREA LENGTH
         AGO   .ALLDONE
.ISAREG2 LR    1,&DATALEN(1)            SET DATA AREA LENGTH
.ALLDONE ANOP
         LR    14,0                     COPY DATA AREA ADDRESS
         XR    15,15                    CLEAR R15
         MVCL  0,14                     CLEAR THE DATA AREA
         MEND
CHNGDATE CSECT
*   THE CHNGDATE PROGRAM TAKES AN INPUT PARAMETER WHICH IS A JULIAN
*   DATE (EG. - YYDDD) AND RETURNS A LISTING OF ALL MODULES IN THE
*   INLIB INPUT DATASET WHICH HAVE BEEN UPDATED (LKED OR ZAPPED) SINCE
*   THIS DATE.  IF NO PARAMETER IS SPECIFED, A LISTING OF ALL MODULES
*   AND THEIR LAST LKED DATE AND LAST ZAP DATE (IF ANY) IS PRODUCED.
*   NON-ZERO RETURN CODES ARE PRODUCED FOR THE FOLLOWING CONDITIONS:
*   04 - OPEN HAS FAILED FOR THE SYSPRINT OUTPUT DATASET
*   08 - AN ERROR OCCURRED READING THE JFCB FOR THE INLIB INPUT DATASET
*   12 - OPEN HAS FAILED FOR THE INLIB INPUT DATASET
*   16 - GETMAIN FOR THE INPUT RECORD STORAGE HAS FAILED
*   20 - INLIB DATASET READ ERROR HAS OCCURRED
*   THE FOLLOWING JOB STEP COULD BE USED TO PRODUCE A LISTING OF ALL
*   MODULES IN 'SYS1.LINKLIB' THAT HAVE BEEN UPDATED SINCE
*   JANUARY 1, 1991:
*   //STEP1    EXEC PGM=CHNGDATE,PARM='91001'
*   //STEPLIB  DD   DSN=CHNGDATE.LIBRARY,DISP=SHR
*   //INLIB    DD   DSN=SYS1.LINKLIB,DISP=SHR
*   //SYSPRINT DD   SYSOUT=A
         $REQU
         STM   R14,R12,12(R13)          SAVE INCOMING ENVIRONMENT
         LR    R10,R15                  SET UP MODULE ...
         USING CHNGDATE,R10                ADDRESSABILITY
         ST    R13,SAVEAREA+4           SAVE PREVIOUS SAVEAREA
         LA    R13,SAVEAREA             GET NEW SAVEAREA ADDRESS
         L     R2,0(,R1)                GET PARM ADDRESS
         XR    R3,R3                    CLEAR R3
         LH    R3,0(,R2)                GET LENGTH
         LTR   R3,R3                    ANYTHING?
         BZ    DOALL                    NO - WE WILL DO ALL MODULES
         LA    R2,2(,R2)                POINT PAST LENGTH
         MVC   DATE(5),0(R2)            SAVE COMPARE DATE
DOALL    EQU   *
         OPEN  (SYSPRINT,OUTPUT)        OPEN THE OUTPUT FILE
         TM    SYSPRINT+48,X'10'        OPEN O.K.?
         BZ    RET04                    NO - GO END
         RDJFCB MODLIB                  READ THE JFCB FOR INPUT DATASET
         LTR   R15,R15                  JFCB READ O.K.?
         BNZ   RET08                    NO - GO END
         OPEN  (DIRIN,,MODLIB)          OPEN THE INPUT FILE
         TM    DIRIN+48,X'10'           OPEN O.K.?
         BZ    RET12                    NO - GO END
         TM    MODLIB+48,X'10'          OPEN O.K.?
         BZ    RET12                    NO - GO END
         MVC   HEADER1+4(44),JFCBAREA   MOVE IN DATASET NAME
         MVC   HEADER2+7(6),JFCBAREA+118 MOVE IN VOLSER
         MVC   HEADER3+15(5),DATE       MOVE IN PARAMETER DATE
         PUT   SYSPRINT,HEADER1         WRITE OUT HEADER
         PUT   SYSPRINT,HEADER2         WRITE OUT HEADER
         CLC   DATE(5),=8C'0'           A VALID PARM DATE?
         BE    NOHDR3                   NO - DON'T WRITE NEXT HEADER
         PUT   SYSPRINT,HEADER3         WRITE OUT HEADER
NOHDR3   PUT   SYSPRINT,BLANKS          WRITE A BLANK LINE
         XR    R2,R2                    CLEAR R2
         ICM   R2,B'0011',MODLIB+62     GET BLKSIZE
         GETMAIN RU,LV=(R2)             GET STORAGE FOR READ
         LTR   R15,R15                  GOT STORAGE O.K.?
         BNZ   RET16                    NO - GO END
         LR    R9,R1                    SAVE STORAGE ADDRESS
READDIR  EQU   *
         GET   DIRIN,DIRAREA            READ A DIRECTORY BLOCK
         XR    R6,R6                    CLEAR R6
         ICM   R6,B'0011',DIRAREA       GET USED COUNT
         LA    R3,DIRAREA+2             POINT PAST LENGTH
CHECKEND CLC   0(8,R3),LASTMEM          LAST ENTRY
         BE    CLOSEALL                 YES - CLOSE FILES
         B     READMEM                  READ THE MEMBER DATA
NEXTMEM  IC    R5,11(,R3)               GET NUMBER OF USER HALFWORDS
         N     R5,BITMAP                CLEAR OUT UNUSED BITS
         SLL   R5,1                     MULTIPLY BY 2
         LA    R3,12(R5,R3)             POINT TO NEXT MEMBER ENTRY
         LA    R8,DIRAREA               GET AREA ADDRESS
         LR    R1,R3                    SAVE CURRENT LOCATION
         SR    R1,R8                    CALCULATE OFFSET
         CR    R1,R6                    END OF BLOCK?
         BL    CHECKEND                 NO - GET NEXT MEMBER
         B     READDIR                  READ NEXT DIRECTORY BLOCK
READMEM  EQU   *
         FIND  MODLIB,(3),D             POINT TO MEMBER
         NI    FLAGAREA,255-X'03'       RESET FLAGS
GETBLOCK $XCL  SRCADDR=(R9),DATALEN=(R2) CLEAR THE AREA
         READ  DECBIN01,SF,MODLIB,(9),'S' READ A BLOCK
         CHECK DECBIN01                 WAIT FOR IT
         CLC   0(3,R9),=X'80FA01'       A ZAP RECORD?
         BE    SVDATE01                 SAVE LATEST ZAP DATE
         CLC   0(3,R9),=X'801102'       LINKEDIT DATE RECORD?
         BE    SVDATE02                 YES - GO EXTRACT WHAT YOU NEED
         B     GETBLOCK                 READ NEXT RECORD
SVDATE01 EQU   *
         TM    3(R9),X'40'              NEXT RECORD IS ZAP RECORD?
         BZ    LASTZAP                  NO - MUST BE LAST ZAP RECORD
         MVC   SVZAPBLK(256),0(R9)      SAVE THIS ZAP RECORD
NEXTZAP  $XCL  SRCADDR=(R9),DATALEN=(R2) CLEAR THE AREA
         READ  DECBIN02,SF,MODLIB,(9),'S' READ NEXT ZAP RECORD
         CHECK DECBIN02                 WAIT FOR IT
         IC    R7,3(,R9)                GET NUMBER OF ZAP ENTRIES
         N     R7,=X'0000003F'          LEAVE LAST SIX BITS
         LTR   R7,R7                    ANY ENTRIES?
         BNZ   SVDATE01                 YES - SEE IF IT'S THE LAST
         TM    3(R9),X'40'              NEXT RECORD IS ZAP RECORD?
         BNZ   NEXTZAP                  YES - GET NEXT ZAP RECORD
         MVC   0(256,R9),SVZAPBLK       MOVE BACK LAST BLK OF ZAP DATA
LASTZAP  OI    FLAGAREA,X'02'           SET ZAP DATE FLAG
         MVC   DATEZAP(8),=8C'0'        CLEAR THE ZAP DATE
         IC    R7,3(,R9)                GET NUMBER OF ZAP ENTRIES
         N     R7,=X'0000003F'          LEAVE LAST SIX BITS
         LTR   R7,R7                    ANYTHING?
         BNZ   GETZDATE                 YES - GET ZAP DATE
         TM    FLAGAREA,X'01'           LINKEDIT DATE FOUND ALREADY?
         BO    PUTINFO                  YES - GO WRITE THE INFORMATION
         B     GETBLOCK                 GO READ NEXT BLOCK
GETZDATE BCTR  R7,0                     REDUCE BY ONE
         MH    R7,=H'13'                MULTIPLY BY 13
         LA    R7,4(R7,R9)              POINT TO LAST ZAP ENTRY
         UNPK  DBLWORK(8),2(3,R7)       UNPACK ZAP DATE
         MVC   DATEZAP(5),DBLWORK+3     SAVE THE LAST ZAP DATE
         TM    FLAGAREA,X'03'           BOTH FLAGS SET
         BO    PUTINFO                  YES - CHECK FOR OUTPUT
         B     GETBLOCK                 NO - GET NEXT BLOCK
SVDATE02 EQU   *
         OI    FLAGAREA,X'01'           SET LKED DATE FLAG
         UNPK  DBLWORK(8),15(3,R9)      UNPACK LKED DATE
         MVC   DATELKED(5),DBLWORK+3    SAVE THE LAST LKED DATE
         TM    FLAGAREA,X'03'           BOTH FLAGS SET?
         BNO   GETBLOCK                 NO - GET NEXT BLOCK
PUTINFO  MVC   OUTLINE(80),BLANKS       CLEAR THE AREA
         MVC   OUTLINE(8),0(R3)         MOVE IN MEMBER NAME
         CLC   DATE(5),=8C'0'           A DATE ENTERED?
         BE    NODATE                   NO - LIST EVERYTHING
         CLC   DATELKED(5),DATEZAP      LKED DATE MORE RECENT?
         BH    SETLKED                  YES - SET TO LKED DATE
         BE    SETBOTH                  EQUAL - SET BOTH
         MVC   OUTLINE+13(5),DATEZAP    MOVE IN ZAP DATE
         MVC   OUTLINE+27(4),=C'ZAP '   MOVE IN ZAP TYPE
         B     CHKDATE                  GO CHECK AGAINST PARM DATE
SETLKED  MVC   OUTLINE+13(5),DATELKED   MOVE IN LKED DATE
         MVC   OUTLINE+27(4),=C'LKED'   MOVE IN LKED TYPE
         B     CHKDATE                  GO CHECK AGAINST PARM DATE
SETBOTH  MVC   OUTLINE+13(5),DATELKED   MOVE IN DATE
         MVC   OUTLINE+27(4),=C'BOTH'   MOVE IN BOTH TYPE
CHKDATE  CLC   DATE(5),OUTLINE+13       DATE LOW?
         BH    NEXTMEM                  YES - DON'T PRINT IT
         TM    FLAGAREA,X'80'           FIRST ONE?
         BO    NOTFIRST                 NO - DON'T WRITE HEADERS
         PUT   SYSPRINT,HEADER4         WRITE OUT HEADER
         PUT   SYSPRINT,BLANKS          WRITE A BLANK LINE
         OI    FLAGAREA,X'80'           SET FLAG
NOTFIRST PUT   SYSPRINT,OUTLINE         PRINT OUT THE INFORMATION
         B     NEXTMEM                  GET NEXT MEMBER
NODATE   TM    FLAGAREA,X'80'           FIRST ONE?
         BO    NODATE01                 NO - DON'T WRITE HEADERS
         PUT   SYSPRINT,HEADER5         WRITE OUT HEADER
         PUT   SYSPRINT,BLANKS          WRITE A BLANK LINE
         OI    FLAGAREA,X'80'           SET FLAG
NODATE01 MVC   OUTLINE+12(5),DATELKED   MOVE IN LKED DATE
         MVC   OUTLINE+23(5),DATEZAP    MOVE IN ZAP DATE
         CLC   OUTLINE+23(5),=8C'0'     A ZAP DATE?
         BNE   NOTFIRST                 YES - WRITE OUT DETAIL LINE
         MVC   OUTLINE+23(5),=C' N/A '  SET NO ZAP DATE INDICATOR
         B     NOTFIRST                 WRITE OUT DETAIL LINE
CLOSEALL EQU   *
         TM    FLAGAREA,X'80'           FLAG SET?
         BO    FOUNDONE                 YES - AT LEAST ONE FOUND
         PUT   SYSPRINT,MSG1            WRITE OUT NOT FOUND MESSAGE
FOUNDONE CLOSE MODLIB                   CLOSE ...
         CLOSE DIRIN                       THE ...
         CLOSE SYSPRINT                       FILES
         FREEMAIN RU,LV=(R2),A=(R9)     FREE THE STORAGE
         XR    R15,R15                  SET THE RETURN CODE
RETURN   L     R13,SAVEAREA+4           GET OLD SAVEAREA ADDRESS
         L     R14,12(,R13)             GET RETURN ADDRESS
         LM    R0,R12,20(R13)           RESTORE THE ENVIRONMENT
         BR    R14                      GO HOME
RET04    L     R15,=F'4'                SET RETURN CODE
         B     RETURN                   END IT
RET08    L     R15,=F'8'                SET RETURN CODE
         B     RETURN                   END IT
RET12    L     R15,=F'12'               SET RETURN CODE
         B     RETURN                   END IT
RET16    L     R15,=F'16'               SET RETURN CODE
         B     RETURN                   END IT
RET20    L     R15,=F'20'               SET RETURN CODE
         B     RETURN                   END IT
HEADER1  DC    CL80'DSN='
HEADER2  DC    CL80'VOLSER='
HEADER3  DC    CL80'PARAMETER DATE='
HEADER4  DC    CL80' MODULE   CHANGE DATE   CHANGE TYPE'
HEADER5  DC    CL80' MODULE   LKED DATE   ZAP DATE'
BLANKS   DC    80C' '
MSG1     DC    C'NO MODULES FOUND WITH CHANGE DATE GREATER THAN SPECI'
         DC    C'FIED PARAMETER DATE.        '
DIRAREA  DS    CL256
SVZAPBLK DS    CL256
LASTMEM  DC    8X'FF'
FLAGAREA DC    F'0'
SAVEAREA DS    18F
DBLWORK  DS    D
BITMAP   DC    X'0000001F'
OUTLINE  DC    80C' '
DATE     DC    8C'0'
DATEZAP  DS    CL8
DATELKED DS    CL8
MODLIB   DCB   MACRF=R,DSORG=PO,DDNAME=INLIB,EODAD=NEXTMEM,            X
               EXLST=EXITLIST,SYNAD=RET20
DIRIN    DCB   MACRF=GM,DDNAME=INLIB,BLKSIZE=256,RECFM=F,DSORG=PS,     X
               LRECL=256,EODAD=CLOSEALL,SYNAD=RET20
SYSPRINT DCB   MACRF=PM,DDNAME=SYSPRINT,DSORG=PS,LRECL=80
EXITLIST DS    0F
         DC    X'87'
         DC    AL3(JFCBAREA)
JFCBAREA DS    CL176
         END


                                                                            c Xe

