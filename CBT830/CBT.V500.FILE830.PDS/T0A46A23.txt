Viewing variable length datasets

One assertion which meets with near-unanimous agreement in
the technical support community is that of the value of ISPF as
a productivity aid.  This is particularly true among those whose
vintage dates back to pre-ISPF days.  However, it is a rare
facility which does not have at least a few deficiencies, minor
though they may be.  One such example in the ISPF
environment is the lack of standard browse support  for
variable spanned sequential datasets.  Since this format is
nearly unavoidable when working with SMF data, the ability to
view such data directly can save the time and resources which
would normally be required to convert to a format acceptable to
ISPF browse.

SPANVIEW is a re-entrant AMODE(31) RMODE(24)
application which uses the BRowse InterFace (BRIF) service
introduced in ISPF 2.3 to support the V(B)S format.  It utilizes
BSAM to allow for low-level positioning and access
operations.  To improve forward and backward scrolling
performance, a Record Address Table (RAT) of selected
logical record numbers and their DASD addresses is built
during its forward travel through the dataset.  These table
entries are used subsequently to speed positioning via direct
access POINT operations when a scrolling redisplay of
previously read data is requested.  Table entries are recorded
for logical records which are the first in a block and are wholly
contained within the block, or for logical records whose first
segment begins the block.  The number of entries in the table is
governed by the fullword at label MAXTENTS in CSECT
SPANVIEW - the default of 10 000 should be adequate for
most situations.  Each table entry is nine bytes long, so the
default results in a 90 000-byte table storage requirement.
Filling the table will not result in a problem other than reduced
performance experienced when doing lengthy scrolling
operations in the area beyond that indexed by the table.

Records are displayed as variable length, with the RDW
comprising the first four bytes displayed.  This is consistent
with the record layouts contained within the SPL: SMF manual
and so facilitates the task of SMF field location and
identification.

To install SPANVIEW, assemble the source modules
SPANVIEW and SPANREAD individually with the
accompanying macros and copy members made available at
assembly time via SYSLIB, and link both together with the
RENT attribute under the load module name and entry point
SPANVIEW.  The SPVP0001 panel member should be placed
in an ISPPLIB dataset, and the SPVM01 message member in
an ISPMLIB dataset.  Then add appropriate entries to the
primary option panel from which you will invoke SPANVIEW.
The following is an example of such a panel:

%--------------------------- PRIMARY OPTION PANEL -----------------------------
%Select option ===>_ZCMD    +
%
% S    +SPANVIEW
%
)PROC
  &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                S,'PGM(SPANVIEW)'
              ' ',' '
                *,'?' )
)END

Re-enter the ISPF environment after all the changes have been
made and SPANVIEW should be operational.

SPANVIEW - SPANNED RECORD VIEWER MAIN ROUTINE

SPANVIEW AMODE 31
SPANVIEW RMODE 24
SPANVIEW CSECT
         B     12(R15)                  BRANCH AROUND PROLOG
         DC    CL8'SPANVIEW'            ID
         STM   R14,R12,12(R13)          SAVE REGISTERS
         LR    R12,R15                  ESTABLISH BASE
         USING SPANVIEW,R12             DECLARE IT
         CNOP  0,4                      FULLWORD ALIGN
         ICM   R0,15,*+8                LOAD SUBPOOL & LENGTH
         B     *+8                      BRANCH AROUND IT
         DC    AL1(11),AL3(WORKLEN)     SUBPOOL & LENGTH
         LR    R3,R0                    LOAD LENGTH FOR FOLLOWING CLEAR
         LA    R3,0(R3)                 CLEAR HIGH ORDER BIT/BYTE
         GETMAIN R,LV=(0)               GET STORAGE FOR SAVE AREA
         LR    R2,R1                    TARGET ADDRESS
         SR    R4,R4                    NO SOURCE ADDRESS
         SR    R5,R5                    PAD CHARACTER = 0
         MVCL  R2,R4                    CLEAR GOTTEN STORAGE
         ST    R13,4(R1)                STORE OLD SAVEAREA ADDRESS
         ST    R1,8(R13)                CHAIN
         LR    R15,R13                  SAVE OLD SAVE AREA ADDRESS
         LR    R13,R1                   SET NEW SAVEAREA ADDRESS
         LM    R0,R4,20(R15)            RELOAD ORIGINAL CONTENTS
         B     @#LINKE                  END OF LINKAGE - START PROGRAM
@#RETURN DS    0H
         SR    R15,R15                  CLEAR R15
         LR    R2,R15                   SAVE R15 OVER THE FREEMAIN IF
         LR    R3,R0                    SAME FOR R0
         LR    R1,R13                   SAVE ADDRESS TO BE FREEMAINED
         L     R13,4(R13)               RELOAD OLD SAVE AREA ADDRESS
         CNOP  0,4                      FULLWORD ALIGN
         ICM   R0,15,*+8                LOAD SUBPOOL & LENGTH
         B     *+8                      BRANCH AROUND IT
         DC    AL1(11),AL3(WORKLEN)     SUBPOOL & LENGTH
         FREEMAIN R,LV=(0),A=(1)        FREE SAVE AREA STORAGE
         LR    R15,R2                   RESTORE REGISTER 15
         LR    R0,R3                    AND R0
         L     R14,X'10'                CVT ADDR
         TM    X'74'(R14),X'80'         XA?
         BZ    *+14                     NO
         LM    R1,R12,24(R13)           RELOAD REGS
         L     R14,12(,R13)             RELOAD R14
         BSM   0,R14                    RETURN
         LM    R1,R12,24(R13)           RELOAD REGS
         L     R14,12(,R13)             RELOAD R14
         BR    R14                      RETURN
@#LINKE  DS    0H
         LA    R11,4095(R12)
         LA    R11,1(R11)
         USING SPANVIEW+4096,R11
         USING MAINWORK,R13             SET USING FOR WORKAREA
         ST    R1,R1SAVE                SAVE R1
         LA    R2,BRIFWORK              BRIF ROUTINES WORK AREA ADDRESS
         ST    R2,DLGDATA               DIALOG DATA PARAMETER
* VDEFINE VARIABLES *
         LOAD  EP=ISPLINK               FIND ISPF SERVICE ROUTINE
         ST    R0,ISPLINK               SAVE ITS ADDRESS
         LR    R15,R0
         CALL  (15),(VDEFINE,NAMES10,VARS10,CHAR,LEN26),VL,            X
               MF=(E,CALLLIST)
         L     R15,ISPLINK              ISPF ADDRESS
         CALL  (15),(VDEFINE,NAMES20,VARS20,CHAR,LEN08),VL,            X
               MF=(E,CALLLIST)
         L     R15,ISPLINK              ISPF ADDRESS
         CALL  (15),(VDEFINE,NAMES30,VARS30,HEX,LEN04),VL,             X
               MF=(E,CALLLIST)
* INITIALIZE ADDITIONAL FIELDS *
         LA    R1,ALCRB                 SVC 99 FIELDS
         ST    R1,ALCRBPTR
         OI    ALCRBPTR,X'80'
         MVC   ALCRB(8),=X'1400000000000000'
         LA    R1,ALCTUPL
         ST    R1,ALCTXTPP
SPNV0040 DS    0H                       PATTERN FIELDS
         LA    R0,PATTERND              TARGET ADDRESS
         LA    R1,PATTERNL              LENGTH
         LA    R14,PATTERNC             SOURCE ADDRESS
         LR    R15,R1                   SAME LENGTH
         MVCL  R0,R14                   MOVE PATTERN
* DISPLAY THE SPANNED RECORD BROWSE PANEL *
         L     R15,ISPLINK              ISPF ADDRESS
         CALL (15),(DISPLAY,SPVP0001,MSGID,DSNM),VL,MF=(E,CALLLIST)
         B     *+4(R15)
         B     SPNV0100                 OK
         B     SPNV0100                 WON'T HAPPEN
         B     @#RETURN                 TERMINATION REQUESTED
SPNV0100 DS    0H                    GET THE PANEL VARIABLES
         L     R15,ISPLINK              ISPF ADDRESS
         CALL (15),(VCOPY,NAMES40,LENS40,PTRS40),VL,MF=(E,CALLLIST)
         CLC   =F'0',LENS40             ANY DSNAME ENTERED?
         BE    SPNV0040                 NO
         LA    R14,DSNAME+6             TARGET AREA IN TEXT UNIT
         L     R15,PTRS40               GET DSNAME POINTER
         L     R1,LENS40                GET DSNAME LENGTH
         STH   R1,DSNAME+4              STORE INTO TEXT UNIT
         BCTR  R1,0                     DECREMENT FOR EXECUTE
         EX    R1,MVC1                  MOVE DSNAME TO TEXT UNIT
         MVC   DDNAME1+6(8),=CL8' '     BLANK THE DDNAME
         CLC   =F'0',LENS40+4           ANY VOLSER ENTERED?
         BNE   SPNV0120                 YES
         XC    VOLSER1(2),VOLSER1       DISABLE THE TEXT UNIT
         B     SPNV0150
SPNV0120 DS    0H
         MVC   VOLSER1(2),=X'0010'      ENABLE THE TEXT UNIT
         LA    R14,VOLSER1+6            TARGET AREA IN TEXT UNIT
         L     R15,PTRS40+4             GET VOLSER POINTER
         L     R1,LENS40+4              GET VOLSER LENGTH
         STH   R1,VOLSER1+4             STORE INTO TEXT UNIT
         BCTR  R1,0                     DECREMENT FOR EXECUTE
         EX    R1,MVC1                  MOVE VOLSER TO TEXT UNIT
SPNV0150 LABEL                       DYNAMICALLY ALLOCATE THE DATA SET
         MVI   ALCVERB,S99VRBAL
         LA    R1,ALCTUS                POINT TO TU AREA
         LA    R0,DSNAME                ADDRESS
         ST    R0,ALCTUA1
         ST    R1,ALCTUA2               STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALSTATS)   KEY
         MVC   2(2,R1),=AL2(1)          NUMBER
         MVC   4(2,R1),=AL2(1)          LENGTH
         MVI   6(R1),X'08'
         LA    R1,7(R1)                 UPDATE TU ADDRESS
         ST    R1,ALCTUA3               STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALUNIT)    KEY
         MVC   2(2,R1),=AL2(1)          NUMBER
         MVC   4(2,R1),=AL2(8)          LENGTH
         MVC   6(8,R1),=C'SYSALLDA'     PARM
         LA    R1,(6+8)(R1)             UPDATE TU ADDRESS
         LA    R0,VOLSER1               ADDRESS
         ST    R0,ALCTUA4
         LA    R0,DDNAME1               ADDRESS
         ST    R0,ALCTUA5
         LA    R0,VOLSER2               ADDRESS
         ST    R0,ALCTUA6
         OI    ALCTUA6,X'80'            TURN ON HIGH BIT FOR LAST TUA
         LA    R1,ALCRBPTR              POINT TO RB POINTER
         SVC   99                       ALLOCATE
         LTR   R15,R15                  OK?
         BZ    SPNV0170                 YES
         CH    R15,=H'4'                RETURN CODE 4?
         BNE   SPNV3000                 NO
         CL    R0,=A(X'17080000')       DATA SET NOT FOUND?
         BNE   SPNV3000                 NO, SOME OTHER ERROR
         B     SPNV0172                 YES
SPNV0170 DS    0H
         MVC   DDNAME2+6(8),DDNAME1+6   MOVE DDNAME TO UNALLOCATION TU
* CHECK DATA SET CHARACTERISTICS *
         LA    R1,DSNAME+6              STORE CAMLST PARAMETERS
         ST    R1,CAMLST+4
         LA    R1,VOLSER2+6
         ST    R1,CAMLST+8
         LA    R1,WORK3
         ST    R1,CAMLST+12
         OBTAIN CAMLST
         LTR   R15,R15                  OK?
         BZ    SPNV0175                 YES
         CH    R15,=H'8'                DATA SET NOT FOUND?
         BNE   SPNV3100                 NO, SOMETHING ELSE
SPNV0172 DS    0H
         MVC   MSGID,=CL8'SPVM010G'     MOVE MESSAGE ID
         L     R15,ISPLINK
         CALL  (15),(SETMSG,MSGID),VL,MF=(E,CALLLIST)
         B     SPNV0177
SPNV0175 DS    0H
         TM    WORK3+DS1RECFM-DS1FMTID,DS1RECFV+DS1RECFS VAR. SPANNED?
         BO    SPNV0180                 YES
         MVC   MSGID,=CL8'SPVM010M'     MOVE MESSAGE ID
         L     R15,ISPLINK
         CALL  (15),(SETMSG,MSGID),VL,MF=(E,CALLLIST)
SPNV0177 DS    0H
         MVI   ALCVERB,S99VRBUN
         LA    R1,ALCTUS                POINT TO TU AREA
         LA    R0,DDNAME2               ADDRESS
         ST    R0,ALCTUA1
         OI    ALCTUA1,X'80'            TURN ON HIGH BIT FOR LAST TUA
         LA    R1,ALCRBPTR              POINT TO RB POINTER
         SVC   99                       UNALLOCATE
         B     SPNV0040                 RECYCLE
SPNV0180 DS    0H
         MVC   DCB1+DCBDDNAM-IHADCB(8),DDNAME1+6 ALLOC. DDNAME TO DCB'S
         MVC   DCB1+DCBEODA-IHADCB(3),=VL3(SPNR5000) PLUG EODAD
         OPEN  (DCB1,(INPUT)),MF=(E,OPENLIST)         OPEN THE DATA SET
         MVC   LRECL+2(2),DCB1+DCBLRECL-IHADCB MOVE LRECL
         CLC   LRECL,=F'32760'          > 32760?
         BNH   SPNV0190                 NO
         MVC   LRECL,=F'32760'          YES, FORCE IT
SPNV0190 DS    0H                    GET RECORD ADDRESS TABLE STORAGE
         L     R2,MAXTENTS              LOAD MAXIMUM TABLE ENTRIES
         MH    R2,RATELEN+2             COMPUTE STORAGE NEEDED
         L     R3,SUBPOOL               LOAD SUBPOOL
         GETMAIN VRU,LV=((R2),0),SP=(R3)
         ST    R0,RATLEN                STORE ACTUAL RAT LENGTH
         ST    R1,RATADDR               STORE TABLE ADDRESS
         LR    R1,R0                    LOAD LENGTH
         SH    R0,RATELEN+2             MINUS LENGTH OF AN ENTRY
         ST    R0,RATLENM               STORE
         L     R0,RATADDR               LOAD TABLE ADDRESS
         L     R1,RATLEN                LOAD TABLE LENGTH
         LA    R14,0
         LA    R15,0
         MVCL  R0,R14                   CLEAR STORAGE
* INITIALIZE FIRST RAT ENTRY AND RAT CURRENT ENTRY POINTER *
         L     R1,RATADDR
         MVC   0(4,R1),=F'1'            RELATIVE RECORD NO.
         MVC   4(1,R1),DCB1+DCBFDAD-IHADCB+0 MOVE 'M'
         MVC   5(2,R1),DCB1+DCBFDAD-IHADCB+3 MOVE 'CC'
         MVC   7(1,R1),DCB1+DCBFDAD-IHADCB+6 MOVE 'H'
         MVI   8(R1),1                  SET 'R' = 1
         ST    R1,RATCEPTR              PLUG CURRENT ENTRY POINTER
* RETURN CONTROL TO THIS DIALOG IF A BRIF ERROR IS ENCOUNTERED *
         MVC   BRIFREAD,=V(SPANREAD)    PLUG ROUTINE ADDRESS
SPNV0350 DS    0H
         L     R15,ISPLINK              ISPF ADDRESS
         CALL  (15),(CONTROL,ERRORS,RETURN),VL,                        X
               MF=(E,CALLLIST)
* CALL THE ISPF BROWSE INTERFACE SERVICE *
         L     R15,ISPLINK              LOAD ROUTINE ADDRESS
         CALL (15),(BRIF,DSNAME+6,RECFMU,LRECL,BRIFREAD,,              X
               DLGDATA),                                               X
               VL,MF=(E,CALLLIST)
         LR    R2,R15                   SAVE RETURN CODE
* RETURN CONTROL TO ISPF IF AN ERROR IS ENCOUNTERED *
         L     R15,ISPLINK              ISPF ADDRESS
         CALL  (15),(CONTROL,ERRORS,CANCEL),VL,                        X
               MF=(E,CALLLIST)
* PROCESS BRIF RETURN CODE *
         B     *+4(R2)
         B     SPNV1000                 RC = 00, OK
         B     SPNV1000                 RC = 04, WON'T HAPPEN
         B     SPNV1000                 RC = 08, WON'T HAPPEN
         B     SPNV0900                 RC = 12, NO DATA TO BROWSE
         B     SPNV1000                 RC = 16, WON'T HAPPEN
* READ ROUTINE ERROR *
SPNV0650 DS    0H                       RC = 20, READ ROUTINE ERROR
         L     R15,READRET              GET ACTUAL READ RETCODE
         B     *+4(R15)
         B     SPNV0700                 RC = 00, WON'T HAPPEN
         B     SPNV0700                 RC = 04, WON'T HAPPEN
SPNV0700 DS    0H                       RC = 08, DISPLAY ERROR MESSAGE
         CLOSE (DCB1),MF=(E,CLOSLIST)   CLOSE THE DATA SET
SPNV0750 DS    0H                       RC = 08, DISPLAY ERROR MESSAGE
         MVI   ALCVERB,S99VRBUN
         LA    R1,ALCTUS                POINT TO TU AREA
         LA    R0,DDNAME2               ADDRESS
         ST    R0,ALCTUA1
         OI    ALCTUA1,X'80'            TURN ON HIGH BIT FOR LAST TUA
         LA    R1,ALCRBPTR              POINT TO RB POINTER
         SVC   99                       UNALLOCATE
         ICM   R0,15,RATLEN             RAT LENGTH
         BZ    SPNV0800                 ZERO, NOT GETMAIN'ED
         L     R1,RATADDR               RAT ADDRESS
         L     R2,SUBPOOL               SUBPOOL
         FREEMAIN RU,LV=(R0),A=(R1),SP=(R2) FREE THE RAT
SPNV0800 DS    0H
         L     R15,ISPLINK
         CALL  (15),(SETMSG,MSGID),VL,MF=(E,CALLLIST)
         B     SPNV0040                 RECYCLE WITH ERROR MESSAGE
SPNV0900 DS    0H                    EMPTY DATA SET
         MVC   MSGID,=CL8'SPVM010P'     MOVE MESSAGE ID
         L     R15,ISPLINK
         CALL  (15),(SETMSG,MSGID),VL,MF=(E,CALLLIST)
SPNV1000 DS    0H                    START CLEANUP
         ICM   R0,15,RATLEN             RAT LENGTH
         BZ    SPNV1050                 ZERO, NOT GETMAIN'ED
         L     R1,RATADDR               RAT TABLE ADDRESS
         L     R2,SUBPOOL               SUBPOOL
         FREEMAIN RU,LV=(R0),A=(R1),SP=(R2) FREE THE RAT
SPNV1050 LABEL
         CLOSE (DCB1),MF=(E,CLOSLIST)   CLOSE THE DATA SET
SPNV1150 LABEL
         MVI   ALCVERB,S99VRBUN
         LA    R1,ALCTUS                POINT TO TU AREA
         LA    R0,DDNAME2               ADDRESS
         ST    R0,ALCTUA1
         OI    ALCTUA1,X'80'            TURN ON HIGH BIT FOR LAST TUA
         LA    R1,ALCRBPTR              POINT TO RB POINTER
         SVC   99                       UNALLOCATE
         LTR   R15,R15                  OK?
         BNZ   SPNV3000                 NO
         B     SPNV0040                 NORMAL COMPLETION, RECYCLE
* ------- ERROR REPORTING ------- *
SPNV3000 DS    0H                    ALLOCATION ERROR
         MVC   MSG1,ERROR010            MOVE ERROR MESSAGE
         B     SPNV7100                 GO CLEAN UP
SPNV3100 DS    0H                    OBTAIN ERROR
         MVC   MSG1,ERROR020            MOVE ERROR MESSAGE
         B     SPNV7050                 GO CLEAN UP
SPNV7000 DS    0H                    CLEAN UP AND STORE ERROR INFO
         STM   R15,R0,REQCODES          SET REQUEST RETURN/REASON CODES
         CLOSE (DCB1),MF=(E,CLOSLIST)   CLOSE THE DATA SET
         B     SPNV7060
SPNV7050 DS    0H
         STM   R15,R0,REQCODES          SET REQUEST RETURN/REASON CODES
SPNV7060 DS    0H
         MVI   ALCVERB,S99VRBUN
         LA    R1,ALCTUS                POINT TO TU AREA
         LA    R0,DDNAME2               ADDRESS
         ST    R0,ALCTUA1
         OI    ALCTUA1,X'80'            TURN ON HIGH BIT FOR LAST TUA
         LA    R1,ALCRBPTR              POINT TO RB POINTER
         SVC   99                       UNALLOCATE
         B     SPNV7110
SPNV7100 DS    0H
         STM   R15,R0,REQCODES          SET REQUEST RETURN/REASON CODES
SPNV7110 DS    0H
         ICM   R0,15,RATLEN             RAT LENGTH
         BZ    SPNV7150                 RAT NOT YET GETMAIN'ED
         L     R1,RATADDR               RAT ADDRESS
         L     R2,SUBPOOL               SUBPOOL
         FREEMAIN RU,LV=(R0),A=(R1),SP=(R2) FREE THE RAT
SPNV7150 DS    0H
         MVC   MSGID,=CL8'SPVM010A'     MOVE MESSAGE ID
         L     R15,ISPLINK
         CALL  (15),(SETMSG,MSGID),VL,MF=(E,CALLLIST)
         B     SPNV0040                 RECYCLE
MVC1     MVC   0(0,R14),0(R15)          GENERALIZED MOVE
CONTROL  DC    CL8'CONTROL'
ERRORS   DC    CL8'ERRORS'
CANCEL   DC    CL8'CANCEL'
RETURN   DC    CL8'RETURN'
SETMSG   DC    CL8'SETMSG'
VDEFINE  DC    CL8'VDEFINE'
VCOPY    DC    CL8'VCOPY'
DISPLAY  DC    CL8'DISPLAY'
BRIF     DC    CL8'BRIF'
NAMES10  DC    C'(MSG1)'                SHORT MESSAGE
NAMES20  DC    C'(LABEL)'               LABEL NAME WHERE ERROR OCCURS
NAMES30  DC    C'(RETCODE RSNCODE)'     R15, R0/FDBK/ERROR CONTENTS
NAMES40  DC    C'(DSNAME VOLSER)'
HEX      DC    CL8'HEX'
CHAR     DC    CL8'CHAR'
LEN26    DC    F'26'                    SHORT MESSAGE LENGTH
LEN08    DC    F'08'                    LABEL NAME LENGTH
LEN04    DC    F'04'                    RETCODE / RSNCODE LENGTHS
SPVP0001 DC    CL8'SPVP0001'            DISPLAY PANEL NAME
DSNM     DC    CL8'TNAME1'              DATA SET TEMPORARY NAME
RECFMU   DC    CL2'U'                   RECFM OF BROWSE FILE
MAXTENTS DC    F'10000'                 MAX. RAT TABLE ENTRIES
SUBPOOL  DC    F'1'                     SUBPOOL
PATTERNC DS    0D                       PATTERN IN CSECT
         DC    CL8' '                   MESSAGE ID
         DC    X'000200010000',CL54' '  DSNAME TU
         DC    X'001000010006',CL06' '  VOLSER TU
         DC    X'005500010008',CL8' '   RETURN DDNAME TU
         DC    X'005D00010006',CL6' '   RETURN VOLSER TU
         DC    X'000100010008',CL8' '   UNALLOCATE DDNAME TU
         OPEN  (,),MF=L                 OPEN LIST FORM
         CLOSE (,),MF=L                 CLOSE LIST FORM
         DCB   DSORG=PS,MACRF=(RP),DDNAME=DUMMY
         CAMLST SEARCH,0,0,0            TARGET OF OBTAIN
         DC    X'00'                    FLAG BYTE
         DC    F'9'                     RAT ENTRY LENGTH
         DC    F'0'                     RAT LENGTH
         DC    D'0'                     WORK DOUBLEWORD
         DC    4F'0'                    WORK FIELD
PATTERNL EQU   *-PATTERNC               PATTERN LENGTH
         COPY  MSGTEXTS
MAINWORK DSECT                          SPANVIEW WORK AREA
         DS    18F                      SAVE AREA FOR SPANVIEW CALLS
* ------ DYNAMIC ALLOCATION FIELDS ------ *
* DYNAMIC ALLOCATION REQUEST BLOCK POINTER *
         DS     0F                     FULLWORD ALIGNMENT
ALCRBPTR DC     X'80',AL3(ALCRB)       REQUEST BLOCK POINTER
* DYNAMIC ALLOCATION REQUEST BLOCK *
ALCRB    DS     0F                     REQUEST BLOCK
ALCRBLN  DC     AL1(20)                LENGTH OF REQUEST BLOCK
ALCVERB  DC     AL1(00)                VERB CODE
ALCFLAG1 DC     AL2(0)                 FLAGS
ALCERROR DC     AL2(00)                ERROR REASON CODE
ALCINFO  DC     AL2(00)                INFORMATION REASON CODE
ALCTXTPP DC     A(ALCTUPL)             ADDR OF LIST OF TEXT UNIT PTRS
ALCRSV01 DS     F                      RESERVED
ALCFLAG2 DS     AL4(0)                 FLAGS FOR AUTHORIZED FUNCTIONS
* DYNAMIC ALLOCATION TEXT UNIT POINTER LIST *
ALCTUPL  DS     0F
ALCTUA1  DC     A(0)                   TEXT UNIT ADDRESS
ALCTUA2  DC     A(0)                   TEXT UNIT ADDRESS
ALCTUA3  DC     A(0)                   TEXT UNIT ADDRESS
ALCTUA4  DC     A(0)                   TEXT UNIT ADDRESS
ALCTUA5  DC     A(0)                   TEXT UNIT ADDRESS
ALCTUA6  DC     A(0)                   TEXT UNIT ADDRESS
* DYNAMIC ALLOCATION TEXT UNITS *
ALCTUS   DS     0F
         DS     21C
* END OF DYNAMIC ALLOCATION FIELDS *
BRIFWORK DS    0D                       BRIF ROUTINES WORK AREA
         DS    18F                      SAVE AREA FOR BRIF RTNS. CALLS
         COPY  WORKFLDS                 COPY FIELD DEFINITIONS
WORKLEN  EQU   *-MAINWORK
         IEFZB4D0
         IEFZB4D2
         IECSDSL1 1
         DCBD  DSORG=PS,DEVD=DA
         END

This article will be concluded next month with the publication
of the source code for  the module SPANREAD; the
AMODE24, AMODE31, and LABEL macros; the
MSGTEXTS and WORKFLDS copy members; the SPVM01
message member; and the SPVP0001 panel member.

                              € Xephon 1990
