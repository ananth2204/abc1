Two GQSCAN programs


INTRODUCTION

Personnel in our shop often need to find out which of their
colleagues is enqueued on a file they need. Until recently, the
only way to find out this information was to ask everyone until
the current user was found. Now this information can be
determined under TSO, using the command:

      %ed dataset_name

The dataset name can be fully qualified or it can be a generic
part. The output will have this format:

QNAME               RNAME                           JOBNAME   DISP  STATUS
--------------------------------------------------------------------------
SYSDSN   / Z03AF.DRS.IDCAMS                         U284      SHR   USING
SYSDSN   / Z03AF.DRS.IDCAMS                         Z03JDELT  OLD   WAITING

Similarly, it is sometimes convenient to know just what
resources a job owns.  This can be determined using the
command:

      %ej jobname

The CLISTs 'ed' and 'ej' invoke the programs ENQDSN and
ENQJOB respectively. These programs expect to receive a
parameter string - either the dataset name or the job name the
user is interested in.  Both of them utilize the GQSCAN macro
to get the desired information from MVS/XA. You can find
more information on the GQSCAN macro in the manuals
MVS/XA SPL: System Macros and Facilities, Volumes 1 and 2.

Please note that ENQJOB requires that SYS1.AMODGEN is
concatenated to the SYSLIB DD card under your assembly
step. Both ENQJOB and ENQDSN need SYS1.MACLIB
under the SYSLIB DD as well.


ENQDSN SOURCE CODE

*  ENQDSN:  THIS PROGRAM DETERMINES WHO IS USING A PARTICULAR FILE OR
*           GENERIC GROUP OF FILES.  IT REQUIRES A FULL OR PARTIAL
*           FILE NAME AS AN INPUT PARAMETER.
*  THIS PROGRAM NEEDS NO SPECIAL AUTHORIZATION TO RUN PROPERLY.
*  THIS PROGRAM HAS BEEN TESTED ONLY ON AN MVS/XA 2.2.0 SYSTEM, BUT
*  SHOULD RUN ON ESA SYSTEMS.
ENQDSN   CSECT
         STM   R14,R12,12(R13)         SET UP ADDRESSABILITY
         LR    R12,R15
         USING ENQDSN,R12
         LA    R11,SAVE
         ST    R11,8(R13)
         ST    R13,4(R11)
         LR    R13,R11
         L     R1,0(R1)                GET INPUT PARAMETER
         LH    R2,0(R1)
         LTR   R2,R2
         BZ    EXIT                    EXIT IF NO INPUT PARAMETER
         C     R2,=F'44'
         BNH   LENOK
         LA    R2,44                   MAXIMUM ALLOWED INPUT PARM=44
LENOK    ST    R2,RNAMELEN             SAVE LENGTH
         BCTR  R2,R0                   SUB FOR EX OPERATION
         EX    R2,MOVPNAME             MOVE PARM
*                                      OPEN OUTPUT FILE
OPENFILE OPEN  (OUTFILE,OUTPUT)
         MVI   HEADFLAG,C'N'           MARK HEADERS AS UNWRITTEN
         MVC   TOK(R4),ZEROTOK         ZERO THE GQSCAN TOKEN
SCANLOOP L     R2,RIBS                 POINT R2 AT RIB HOLDING AREA
         L     R3,AMOUNTL              SET R3 TO AMOUNT OF RIB SPACE
         LA    R4,QNAME                POINT R4 TO QNAME FIELD
         LA    R5,RNAME                POINT R5 TO RNAME FIELD
         L     R6,RNAMELEN             SET R6 TO LENGTH OF RNAME
*                                      GO GET GQSCAN INFO
         GQSCAN AREA=((R2),(R3)),RESNAME=((R4),(R5),(R6),GENERIC,8),   C
               SCOPE=ALL,TOKEN=TOK
         LR    R11,R15                 SAVE RETURN CODE
         C     R15,=F'4'
         BE    EXIT                    EXIT IF NO DATA
         C     R15,=F'8'
         BH    EXIT                   EXIT IF ERROR OTHER THAN OVERFLOW
         LR    R6,R0
         SRL   R6,16                   GET SIZE OF FIXED RIB PART
         LR    R7,R0
         SLL   R7,16
         SRL   R7,16                   GET SIZE OF FIXED RIBE PART
         LR    R10,R1                  GET NUMBER OF RIBS
         USING RIB,R2
*                                      GET RESOURCE NAME
RIBLOOP  LR    R3,R2                   POINT AT CURRENT RIB
         AR    R3,R6                   ADD FIXED LENGTH PORTION
         AH    R3,RIBVLEN              ADD VARIABLE LENGTH PORTION
         USING RIBE,R3                 NOW POINTING AT FIRST RIBE
         L     R4,RIBNRIBE             GET # OF RIBES FOR THIS RIB
         LR    R5,R2
         AR    R5,R6                   POINT AT RIB VARIABLE PART
         USING RIBVAR,R5
         MVC   OUTREC(80),=CL80'         / '    CLEAR OUTPUT RECORD
         SR    R8,R8
         IC    R8,RIBRNMLN             GET RNAME LENGTH
         MVC   OUTREC(8),RIBQNAME      MOVE QNAME TO OUTPUT RECORD
         BCTR  R8,R0                   SUB FOR EX
         EX    R8,MOVRNAME             MOVE RNAME TO OUTPUT RECORD
*                                      FIND OUT WHO HAS RIB (RESOURCE)
RIBELOOP MVC   OUTREC+56(8),RIBEJBNM   GET NAME OF USER FOR THIS RIBE
         TM    RIBERFLG,RIBETYPE       TEST TYPE OF USER
         BO    NOTEXCL
         MVC   OUTREC+66(3),=CL3'OLD'  SET OUTPUT REC FOR EXCL USER
         B     WAITCHK
NOTEXCL  MVC   OUTREC+66(3),=CL3'SHR'  SET OUTPUT REC FOR SHRD USER
WAITCHK  TM    RIBESFLG,RIBESTAT       TEST FOR STATUS OF USER'S REQ
         BO    OWNS
         MVC   OUTREC+72(7),=CL7'WAITING'  SET OUTPUT REC FOR WAITING
         B     PUTREC
OWNS     MVC   OUTREC+72(5),=CL5'USING'    SET OUTPUT REC FOR USING
PUTREC   CLI   HEADFLAG,C'N'           HEADERS WRITTEN?
         BNE   PUTREC2
         MVI   HEADFLAG,C'Y'           IF NOT, MARK AS WRITTEN AND
         PUT   OUTFILE,HEADER          WRITE HEADERS
         PUT   OUTFILE,HEADER2
PUTREC2  PUT   OUTFILE,OUTREC          WRITE RECORD
         AR    R3,R7                   POINT TO NEXT RIBE
         BCT   R4,RIBELOOP             LOOP TILL NO MORE RIBES
         LR    R2,R3                   SET PTR TO NEXT RIB
         BCT   R10,RIBLOOP             LOOP TILL NO MORE RIBS
         C     R11,=F'8'               MORE DATA (OVERFLOW)?
         BE    SCANLOOP                BRANCH IF SO
EXIT     CLOSE (OUTFILE)               CLOSE OUTFILE
         LR    R15,R11                 SET RETURN CODE
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14                     RETURN
*  EX INSTRUCTIONS
MOVRNAME MVC   OUTREC+11(0),RIBRNAME
MOVPNAME MVC   RNAME(0),2(R1)
*  DATA AREA
OUTFILE  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTFILE,BLKSIZE=23440,RECFM=FB,X
               LRECL=80
OUTREC   DS    CL80
SAVE     DS    18F
RIBS     DC    XL1'80',AL3(AMOUNT)
AMOUNTL  DC    F'10000'
TOK      DS    F
ZEROTOK  DC    F'0'
HEADER   DC    CL40'QNAME               RNAME'
         DC    CL40'                JOBNAME   DISP  STATUS'
HEADER2  DC    CL40'----------------------------------------'
         DC    CL40'--------------------------------------'
HEADFLAG DS    CL2
QNAME    DC    CL8'SYSDSN'
RNAME    DC    CL44' '
RNAMELEN DS    F
         LTORG
AMOUNT   DS    2500F                   RIB DATA AREA
         ISGRIB
         END


ENQJOB SOURCE CODE

*  ENQJOB:  THIS PROGRAM DETERMINES WHAT RESOURCES A PARTICULAR
*           JOB IS USING.  IT REQUIRES THE JOBNAME AS THE INPUT
*           PARAMETER.
*  THIS PROGRAM NEEDS NO SPECIAL AUTHORIZATION TO RUN PROPERLY.
*  TO ASSEMBLE, USE SYS1.MACLIB AND SYS1.AMODGEN UNDER THE SYSLIB
*  DD CARD.
*  THIS CODE HAS BEEN TESTED ONLY UNDER MVS/XA 2.2.0, BUT SHOULD
*  RUN ON ESA SYSTEMS AS WELL.
ENQJOB   CSECT
         STM   R14,R12,12(R13)         SET UP ADDRESSABILITY
         LR    R12,R15
         USING ENQJOB,R12
         LA    R11,SAVE
         ST    R11,8(R13)
         ST    R13,4(R11)
         LR    R13,R11
         L     R1,0(R1)                GET INPUT PARM
         LH    R2,0(R1)
         LTR   R2,R2
         BZ    EXIT2                   EXIT IF NO PARM
         C     R2,=F'8'
         BNH   LENOK
         LA    R2,8                    SET MAX PARM LENGTH ALLOWED
LENOK    BCTR  R2,R0
         EX    R2,MOVEPARM
         OPEN  (OUTFILE,OUTPUT)        OPEN OUTPUT FILE
         L     R3,CVTPTR               GET CVT POINTER
         USING CVT,R3
         L     R7,CVTASVT              GET ASVT POINTER
         USING ASVT,R7
         L     R9,ASVTMAXU             GET MAXIMUM NUMBER OF ASCBS
         LA    R7,ASVTENTY             POINT TO FIRST PTR FOR ASCBS
         L     R8,0(R7)                GET FIRST ASCB ADDR
         USING ASCB,R8
SCANJOBS L     R10,ASCBJBNI            GET POINTER TO JOBNAME
         LTR   R10,R10                 TEST PTR FOR VALIDITY
         BNZ   ANALJOB                 BRANCH IF THIS IS A JOB
         L     R10,ASCBJBNS            GET POINTER TO STC NAME
         LTR   R10,R10                 TEST PTR FOR VALIDITY
         BZ    NEXTJOB                 BRANCH IF THIS IS NOT A JOB
ANALJOB  CLC   0(8,R10),JOBNAME        IS THIS THE JOB SPECIFIED
         BNE   NEXTJOB                 BRANCH IF NOT
         LH    R10,ASCBASID            SAVE ASID
         ST    R10,ASID
NEXTJOB  LA    R7,4(R7)                GET NEXT ASCB PTR
         BCT   R9,NEXTJOB2             LOOP TILL NO MORE ASCBS
         B     ENDOFCHN               WHEN DONE,GO TO END-OF-CHAIN CODE
NEXTJOB2 TM    0(R7),X'80'             IS THIS ASCB IN USE?
         BO    NEXTJOB                 LOOP HERE IF IT IS NOT
         L     R8,0(R7)                ELSE POINT AT ASCB
         B     SCANJOBS                AND CHECK IT OUT
ENDOFCHN L     R10,ASID                DID WE FIND THE JOBNAME?
         C     R10,=F'-1'
         BE    EXIT                    BRANCH IF WE DID NOT
         PUT   OUTFILE,HEADER          WRITE HEADERS AND ZERO TOKEN
         PUT   OUTFILE,HEADER2
         MVC   TOK(R4),ZEROTOK
SCANLOOP L     R2,RIBS                 POINT AT RIB AREA
         L     R3,AMOUNTL              SET R3 TO AREA SIZE
         L     R5,ASID                 SET R5 TO ASID VALUE
*                                      GET DATA FOR THIS JOB
         GQSCAN AREA=((R2),(R3)),SYSNAME=(0,(R5)),                     C
               SCOPE=ALL,TOKEN=TOK
         LR    R11,R15                 SAVE RETURN CODE
         C     R15,=F'4'
         BE    EXIT                    BRANCH IF NO DATA
         C     R15,=F'8'
         BH    EXIT                 BRANCH IF ERROR OTHER THAN OVERFLOW
         LR    R6,R0
         SRL   R6,16                   GET SIZE OF FIXED PART OF RIB
         LR    R7,R0
         SLL   R7,16
         SRL   R7,16                   GET SIZE OF FIXED PART OF RIBE
         LR    R10,R1                  GET NUMBER OF RIBS
         USING RIB,R2
*                                      GET RESOURCE NAME
RIBLOOP  LR    R3,R2                   POINT AT CURRENT RIB
         AR    R3,R6                   ADD FIXED LENGTH PORTION
         AH    R3,RIBVLEN              ADD VARIABLE LENGTH PORTION
         USING RIBE,R3                 NOW POINTING AT FIRST RIBE
         L     R4,RIBNRIBE             GET # OF RIBES FOR THIS RIB
         LR    R5,R2
         AR    R5,R6                POINT AT START OF RIB VARIABLE AREA
         USING RIBVAR,R5
         MVC   OUTREC(80),=CL80'         / '  CLEAR OUTPUT RECORD
         SR    R8,R8
         IC    R8,RIBRNMLN             GET RIB VARIABLE AREA LENGTH
         C     R8,=F'44'               DON'T LET RNAME LENGTH BE > 44
         BNH   RNAMLNOK
         LA    R8,44
RNAMLNOK MVC   OUTREC(8),RIBQNAME      MOVE QNAME
         BCTR  R8,R0                   SUB FOR EX
         EX    R8,MOVRNAME             MOVE RNAME
*                                      GET NAMES OF USERS OF RESOURCE
RIBELOOP MVC   OUTREC+56(8),RIBEJBNM   MOVE JOBNAME
         TM    RIBERFLG,RIBETYPE       TEST TYPE OF USE
         BO    NOTEXCL
         MVC   OUTREC+66(4),=CL4'OLD'  MARK USE AS EXCL
         B     WAITCHK
NOTEXCL  MVC   OUTREC+66(4),=CL4'SHR'  MARK USE AS SHARED
WAITCHK  TM    RIBESFLG,RIBESTAT       TEST STATUS OF REQUEST
         BO    OWNS
         MVC   OUTREC+72(7),=CL7'WAITING'   MARK REQUEST AS WAITING
         B     PUTREC
OWNS     MVC   OUTREC+72(5),=CL5'USING'     MARK REQUEST AS USING
PUTREC   PUT   OUTFILE,OUTREC          WRITE RECORD
         AR    R3,R7                   POINT TO NEXT RIBE
         BCT   R4,RIBELOOP             LOOP TILL NO MORE RIBES
         LR    R2,R3                   SET PTR TO NEXT RIB
         BCT   R10,RIBLOOP             LOOP TILL NO MORE RIBS
         C     R11,=F'8'               WAS THERE AN OVERFLOW?
         BE    SCANLOOP                GO GET REST OF DATA IF SO
EXIT     CLOSE (OUTFILE)               CLOSE OUTFILE
EXIT2    LR    R15,R11                 SET RETURN CODE
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14                     RETURN
*  EX INSTRUCTIONS
MOVRNAME MVC   OUTREC+11(0),RIBRNAME
MOVEPARM MVC   JOBNAME(0),2(R1)
*  DATA AREAS
OUTFILE  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTFILE,BLKSIZE=23440,RECFM=FB,X
               LRECL=80
OUTREC   DS    CL80
JOBNAME  DC    CL8' '
SAVE     DS    18F
RIBS     DC    XL1'80',AL3(AMOUNT)
AMOUNTL  DC    F'10000'
TOK      DS    F
ZEROTOK  DC    F'0'
ASID     DC    F'-1'
HEADER   DC    CL40'QNAME               RNAME'
         DC    CL40'                JOBNAME   DISP  STATUS'
HEADER2  DC    CL40'----------------------------------------'
         DC    CL40'--------------------------------------'
         LTORG
AMOUNT   DS    2500F                   RIB DATA AREA
         CVT   DSECT=YES
         IHAASVT
         IHAASCB
         ISGRIB
         END


ED CLIST

PROC 1 DSN
ALLOC DSNAME(*) DDNAME(OUTFILE)
CALL 'YOUR.LOADLIB(ENQDSN)' '&DSN'
FREE DDNAME(OUTFILE)


EJ CLIST

PROC 1 JOB
ALLOC DSNAME(*) DDNAME(OUTFILE)
CALL 'YOUR.LOADLIB(ENQJOB)' '&JOB'
FREE DDNAME(OUTFILE)


David Saunders
Computer Systems Engineer
University of Virginia (USA)                  c University of Virginia 1993

