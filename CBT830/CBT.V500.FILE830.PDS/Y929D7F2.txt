Panel exit interface


Problem addressed

Dialog Manager is a powerful program package for the
processing of dialogues in the ISPF environment that provides
standard validity checking for many input data field types (for
example the VER panel statement for numerical data, range
checking, etc). Other simple panel statements are available for
user-specific checking. Although these facilities are sufficient
for many applications, more complex logic often needs to be
performed by CLISTs or programs. IBM increased the power
of panel processing by providing, with ISPF Version 2 Release
3, a panel exit facility to interface directly with a user-written
routine from a panel.

The first release allowed only a pre-loaded program to be
invoked (the PGM parameter with the entry point address
contained in a named ISPF variable), which virtually restricted
this feature to applications written in a compiled programming
language. Subsequent ISPF releases have increased the
flexibility by allowing the panel exit program to be loaded as
required (the LOAD parameter with the name of the load
module). Unfortunately, the processing routine remains an
executable (ie compiled) program - the most natural
programming language for such purposes, REXX, is not
supported. The PANEX program described in this article is a
(panel exit) program that can be called as an interface to a user
REXX EXEC. Other than the invocation requirements (the
name of the REXX EXEC is specified as the first parameter -
subsequent parameters specify the names of ISPF variables to
be passed to the REXX EXEC), the PANEX interface program
is transparent to the dialogue programmer.

The user-written REXX EXEC must satisfy the same
restrictions as a panel exit program, namely:

o      The exit routine may not invoke any ISPF services.

o      The exit routine may not change the length of a passed
      variable (if necessary, the panel can initialize target
      variables of the required length).


Solution

The PANEX program is given the name of the REXX EXEC to
be invoked and the names of the ISPF variables to be passed to
the REXX EXEC. The PANEX program loads this REXX
EXEC and passes the specified ISPF variables (address and
length) to the REXX EXEC. The invoked REXX EXEC uses
the usual REXX facilities (eg PARSE ARG and STORAGE) to
retrieve and set the ISPF variables. The PANEX program must
be stored in a program load library that can be accessed for
ISPF applications (eg ISPLLIB).


Invocation

Calling sequence (in ISPF panel):

      PANEXIT ((cmdnameÝ,parm¨...),LOAD,PANEX)

cmdname and parm are two ISPF variables: cmdname is the
name of the REXX EXEC to process the panel exit and parm is
the argument to be passed to the REXX EXEC (eg
parm(1),...). PANEX is the name of the panel exit interface
program.


Invoking sequence of the REXX exec

The REXX EXEC receives two parameters for each argument
(parm(i)):

o      The address of parm(i)
o      The length of the parm(i) address.

The address refers to the entry in the ISPF pool.

All parameters are in character format. The address is
hexadecimal, the length is decimal (all variables are right-
justified, padded with 0s).


Return codes
The invoked REXX EXEC sets a single-digit return code to
indicate the success (or otherwise) of the processing performed:

0      OK (successful processing)
8      Not OK.

This value is returned to ISPF - 4 is returned if a processing
error occurs (eg too many parameters). Dialog Manager
displays a message of the form:

PANEL 'PAN1' ERROR
SEVERE ERROR ENCOUNTERED DURING PANEL EXIT ROUTINE.


Sample invocation

The following simple example uses a panel exit to convert the
contents of a field containing hexadecimal characters
(HEXVAR) to a field with the character equivalent
(CHARVAR). For example, HEXVAR containing C1F2 would
be converted to A2 in CHARVAR. The processing logic is
shown in Figure 1.

Invoking REXX EXEC RX1 (to display panel)

      ADDRESS ISPEXEC "DISPLAY PANEL(P1)"

Panel P1

)ATTR
$ TYPE(OUTPUT) CAPS(OFF)
)BODY
+ Hex:_HEXVAR          +
+Char:$CHARVAR +
)INIT
&PROCNAME = RX2 /* panel exit exec name
)PROC
  &CHARVAR = '        ' /* reserve space
  IF (VER(&HEXVAR,NB,HEX))
    PANEXIT ((PROCNAME,HEXVAR,CHARVAR),LOAD,PANEX)
  ELSE VER(&HEXVAR,NB,HEX) /* force error message
)END

Invoked REXX EXEC RX2 (panel exit processing routine)

/* convert ISPF variable from hex to character */
PARSE ARG p1, l1, p2, l2 /* get parameters */
inparm = STORAGE(p1,l1); /* source variable (hex) */
outparm = X2C(inparm); /* convert hex to character */
outparm = LEFT(outparm,L2,' '); /* left justify */
x = STORAGE(p2,l2,outparm); /* target variable (character) */
EXIT 0; /* normal return */


PANEX program code

PANEX    CSECT
PANEX    AMODE 31
PANEX    RMODE ANY
         BAKR  R14,0              save return address
         BALR  R12,0
         USING *,R12
         LM    R5,R8,16(R1)
* R5: A(array dimension)
* R6: A(varname array)
* R7: A(varlen array, each element F)
* R8: A(varvalue array)
         LA    R13,SA
         MVC   4(4,R13),=C'F1ST'  indicate stack used
         L     R3,0(R5)           dimension (no of entries)
         CH    R3,=H'1'
         BL    ERROR              error (invalid no of parms)
         CH    R3,=AL2(MAXPARM)
         BH    ERROR              error (too many parms)
         L     R2,0(R7)           L(first value)
         CH    R2,=H'8'
         BH    ERROR              too long
         SH    R2,=H'1'           LC
         BM    ERROR              omitted
         MVC   EXEC_MEMBER(0),0(R8)
         EX    R2,*-6             move member name
         LA    R9,ARGENTRY
         LA    R10,PARMEXEC
         USING WKDSECT,R10
         LA    R8,1(R2,R8)        A(next value)
         B     FIRST
LOOP     LA    R7,4(R7)           length ptr
         ST    R8,WORD            A(data)
         BAL   R14,CTOX
         LA    R1,HEX
         ST    R1,0(R9)           A(data)
         LA    R1,8
         ST    R1,4(R9)           length
         L     R2,0(R7)
         CVD   R2,PL8
         UNPK  WK,PL8
         OC    WK,=8C'0'
         LA    R1,WK
         ST    R1,8(R9)           A(data)
         LA    R1,8
         ST    R1,12(R9)          length
         LA    R8,0(R2,R8)        A(next value)
         LA    R9,16(R9)
         LA    R10,16(R10)        A(next exec parameter)
FIRST    BCT   R3,LOOP
         MVC   0(8,R9),=2F'-1' set end of ArgList
         CALL  IRXEXEC,                                                X
               (AEXECBLK,AARGLIST,FLAGS,A0,A0,AEVALBLK,A0,A0),VL
         SR    R15,R15            zeroize
         IC    R15,EVAL_EVDATA    Return Code from exec
         N     R15,=X'0000000F'   clear high-order
EOJ      PR    ,                  terminate program
ERROR    LA    R15,4              processing error
         B     EOJ
CTOX     DS    0H  convert characters (WORD) to hex (HEX)
         LA    R1,WORD            A(source)
         LA    R0,4
         LA    R15,HEX            A(target)
CTOXLOOP MVC   0(1,R15),0(R1)     1st half-byte
         TR    0(1,R15),TRTAB1
         MVC   1(1,R15),0(R1)     2nd half-byte
         TR    1(1,R15),TRTAB2
         LA    R1,1(R1)
         LA    R15,2(R15)
         BCT   R0,CTOXLOOP
         BR    R14
         LTORG
A0       DC    A(0)            zero constant
MAXPARM  EQU   10              maximum no. of arguments
AARGLIST DC    A(ARGENTRY)
ARGENTRY DS    (MAXPARM*4+2)A    pointer, length
PARMEXEC DS    (MAXPARM*2)CL8
FLAGS    DC    X'80000000'     exec invoked as command
AEXECBLK DC    A(EXECBLK)
EXECBLK  DC    CL8'IRXEXECB'
         DC    A(EXECBLKE-EXECBLK)          L(EXECBLK)
         DS    F               reserved
EXEC_MEMBER DC CL8' '          member name
EXEC_DDNAME DC CL8'SYSPROC'    ddname name
         DC    CL8' ',2A(0)
EXECBLKE EQU   *
AEVALBLK DC    A(EVALBLOCK)
EVALBLOCK DS   0F
EVAL_EVPAD1 DC F'0'
EVAL_EVSIZE DC A((EVALBLOCKE-EVALBLOCK)/8)
EVAL_EVLEN  DS F
EVAL_EVPAD2 DC F'0'
EVAL_EVDATA DS CL8
EVALBLOCKE EQU *
TRTAB1   DC    16C'0'
         DC    16C'1'
         DC    16C'2'
         DC    16C'3'
         DC    16C'4'
         DC    16C'5'
         DC    16C'6'
         DC    16C'7'
         DC    16C'8'
         DC    16C'9'
         DC    16C'A'
         DC    16C'B'
         DC    16C'C'
         DC    16C'D'
         DC    16C'E'
         DC    16C'F'
TRTAB2   DC    16C'0123456789ABCDEF'
SA       DS    18F
WORD     DS    F
PL8      DS    0D,PL8
WKDSECT  DSECT
HEX      DS    CL8
WK       DS    CL8
         END

Note: programs using REXX services must operate in 31-bit
addressing mode.

Anthony Rudd
Technical Consultant (Germany)                              c A S Rudd 1993

