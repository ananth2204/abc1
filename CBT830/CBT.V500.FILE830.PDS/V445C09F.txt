Two useful table handling routines


BINARY SEARCH

The first routine performs a binary search of a table.  While
this may be more useful for Assembler applications
programmers, I have had a few occasions where I needed to
perform such a table look-up.  The table is assumed to be a
load module but comments in the code show where to modify it
if the table is to be part of the program.  It also assumes that
the key you wish to search on is at the beginning of each table
entry (although this may be easily modified) and that each table
entry is fixed in length.  Instructions marked with (<==) or
with an asterisk (*) should be modified depending on the
location of the table and length of the key.  If this code will be
used as a subroutine, you should perform register saving as
registers 0, 1, 5, 6, 7, 8, and 9 are modified.

***********************************************************************
*        THOSE RIGHT HAND SIDE COMMENTS BEGINNING WITH (<===) MAY     *
*        NEED TO BE MODIFIED DEPENDING ON WHERE THE TABLE IS LOCATED  *
*        AND WHAT THE KEY LENGTH IS.  THE KEY IS ASSUMED TO BE THE    *
*        FIRST PART OF A TABLE ENTRY (OFFSET 0 IN EACH ENTRY).        *
***********************************************************************
BEGREG   EQU   5
HOLDREG  EQU   7
ENDREG   EQU   8
LENREG   EQU   9
         MVC   KEY(L'KEY),=CL8'AB' <===LOAD SEARCH KEY FROM PARM
         LOAD  EP=TABLE            <===LOAD TABLE INTO STORAGE
***      LA    R0,TABLE            <===LOAD ADDR OF TABLE IN PGM
***      L     R1,TABLEN           <===LOAD TABLEN(TABEND EQU *-TABLE)
         LR    BEGREG,R0               SAVE A(LOADED TABLE)
         N     R1,=X'00FFFFFF'     <===NOT NEEDED WHEN TABLE IN PGM
         SLL   R1,3                <===MULT BY 8 NOT NEEDED AS ABOVE
         LR    LENREG,R1               SAVE LENGTH(LOADED TABLE)
         SR    R6,R6                   CLEAR REGISTER
         SR    ENDREG,ENDREG           CLEAR REGISTER
         AR    ENDREG,BEGREG           GET A(END OF TABLE)
         AR    ENDREG,LENREG           GET A(END OF TABLE) + 1 ENTRY
         CLC   0(L'KEY,BEGREG),KEY <===TABLE ENTRY=KEY?(ADJUST LENGTHS)
         BNE   LOWBRNCH                NO, GO SPLIT TABLE
         LR    HOLDREG,BEGREG          ELSE
         B     EQUALRTN
LOWBRNCH LR    HOLDREG,ENDREG          SAVE A(END OF TABLE) + 1 ENTRY
HIBRNCH  SR    HOLDREG,BEGREG          SUBTRACT
         D     R6,ENTRYLEN             DIVIDE HOLDREG PAIR/ENTRY LENGTH
         SRL   HOLDREG,1               DIVIDE HOLDREG/2
         LTR   HOLDREG,HOLDREG         IS RESULT ZERO
         BZ    NOMATCH                 YES, NOT IN TABLE
         SR    R6,R6                   ELSE, CLEAR HOLDREG PAIR REG
         M     R6,ENTRYLEN             MULT HOLDREG PAIR*ENTRY LENGTH
         AR    HOLDREG,BEGREG          ADD
         CLC   0(L'KEY,HOLDREG),KEY <==TABLE ENTRY=KEY?(ADJUST LENGTHS)
         BE    EQUALRTN                YES, ENTRY FOUND
         BH    HIBRNCH                 ELSE HIGH, GO SPLIT TABLE AGAIN
LOWRTN   LR    BEGREG,HOLDREG          ELSE LOW, SET SPLIT POINT
         B     LOWBRNCH                AND GO SPLIT TABLE AGAIN
EQUALRTN EQU   *
         .
         .
NOMATCH  EQU   *
         .
         .
KEY      DS    CL8                 <===ADJUST TABLE KEY LENGTH
ENTRYLEN DC    F'80'               <===ADJUST TABLE ENTRY LENGTH


BUBBLE SORT

The next routine is a macro to perform a bubble sort on a table.
It would be useful in conjunction with the above routine to sort
an unordered table before performing the binary search.  It uses
registers 0, 1, 14, and 15 and performs only character
comparisons for sorting.  It can also only handle one sort field
- multiple fields can be handled by multiple SORT macro
passes.  Table entries may not exceed 256 bytes in length and
the sort fields may occur anywhere with the table entry.  The
macro only needs to know the key position and length, whether
to sort in ascending or descending sequence, and the location
of both the first and last entries in the table.  The sort is
performed in-place using the storage occupied by the table.
There are no return codes provided since no other services are
invoked.


         MACRO
&LABEL   SORT &FIELDS=(1,1,CH,A),&FIRST=,&LAST=,&LENGTH=
.**********************************************************************
.* FUNCTION:     GENERATE CODING TO SORT A TABLE IN ASCENDING OR      *
.*               DESCENDING ORDER BASED ON A KEY FIELD IN EACH ENTRY. *
.* DESCRIPTION:  A BUBBLE SORT IS PERFORMED.  THE KEYS OF             *
.*               CONSECUTIVE ITEMS ARE COMPARED.  THE ITEMS ARE       *
.*               SWITCHED IF NECESSARY.  PROCESSING PROCEEDS TO THE   *
.*               NEXT PAIR OF ENTRIES.  AT THE END OF ONE PASS, AT    *
.*               LEAST THE HIGHEST KEY IS IN THE PROPER POSITION.     *
.*               THE LIST IS REDUCED TO A SUBLIST FROM THE FIRST      *
.*               ENTRY TO THE LAST ENTRY WHICH WAS SWITCHED AND THE   *
.*               SUBLIST IS THEN PROCESSED AS WAS THE ORIGINAL LIST.  *
.*               THIS CONTINUES UNTIL THE ENTIRE LIST HAS BEEN SORTED.*
.*               IF AT ANY POINT, PROCESSING THE LIST RESULTS IN NO   *
.*               ENTRIES BEING SWITCHED, THE LIST IS IN ORDER AND     *
.*               PROCESSING IS TERMINATED.                            *
.*               REGISTERS 0, 1, 14, AND 15 ARE USED BY THE SORT AND  *
.*               MUST NOT BE SPECIFIED AS FIRST OR LAST VALUES.       *
.* SYNTAX:       LABEL    SORT FIELDS=(KEYPOS,KEYLEN,FMT,ORDER),      *
.*                              FIRST=SYMBOL1,LAST=SYMBOL2,LENGTH=NUM *
.*               LABEL  - SPECIFIES THE LABEL TO BE ASSIGNED TO THE   *
.*                        FIRST INSTRUCTION GENERATED(OPTIONAL).      *
.*               FIELDS - SPECIFIES THE SORT PARAMETERS.              *
.*                        KEYPOS - SPECIFIES THE RELATIVE KEY         *
.*                                 POSITION IN THE RECORD.            *
.*                        KEYLEN - SPECIFIES THE LENGTH OF THE KEY.   *
.*                        FMT    - SPECIFIES THE FORMAT OF THE DATA TO*
.*                                 BE SORTED.  THE ONLY VALID FORMAT  *
.*                                 IS CHARACTER(CH).                  *
.*                        ORDER  - SPECIFIES SORTING IN ASCENDING(A)  *
.*                                 OR DESCENDING(D) ORDER. DEFAULT(A) *
.*               FIRST  - SPECIFIES THE SYMBOLIC NAME OF THE FIRST    *
.*                        ENTRY IN THE TABLE OR A REGISTER WHICH      *
.*                        CONTAINS THE ADDRESS OF THE FIRST ENTRY.    *
.*                        IF A SYMBOLIC NAME IS SPECIFIED, IT MUST BE *
.*                        ADDRESSABLE.  IF A REGISTER IS SPECIFIED,   *
.*                        IT MUST BE ENCLOSED IN PARENTHESES.  THIS   *
.*                        PARAMETER IS REQUIRED.                      *
.*               LAST   - SPECIFIES THE SYMBOLIC NAME OF THE LAST     *
.*                        ENTRY IN THE TABLE OR A REGISTER WHICH      *
.*                        CONTAINS THE ADDRESS OF THE LAST ENTRY.     *
.*                        IF A SYMBOLIC NAME IS SPECIFIED, IT MUST BE *
.*                        ADDRESSABLE.  IF A REGISTER IS SPECIFIED,   *
.*                        IT MUST BE ENCLOSED IN PARENTHESES.  THIS   *
.*                        PARAMETER IS REQUIRED.                      *
.*               LENGTH - SPECIFIES THE LENGTH OF THE ENTRIES IN THE  *
.*                        TABLE.  THIS PARAMETER IS REQUIRED.         *
.* ERRORS:       INVALID NUMBER OF ENTRIES IN FIELDS PARAMETER - 8    *
.*               FORMAT TYPE NOT SUPPORTED                     - 8    *
.*               FIRST VALUE NOT SPECIFIED                     - 8    *
.*               LAST  VALUE NOT SPECIFIED                     - 8    *
.*               LENGTH VALUE NOT SPECIFIED                    - 8    *
.* EXAMPLE:      SORT A TABLE OF ENTRIES WHERE THE FIRST 8 BYTES ARE  *
.*               ARE THE KEYS.  THE LENGTH OF EACH ENTRY IS 50 BYTES. *
.*               SORTLABL SORT FIELDS=(1,8,CH,A),LENGTH=50,           *
.*                              FIRST=BEGIN,LAST=END                  *
.*               BEGIN    DC    CL8'A',CL42'ENTRY 1'                  *
.*                        DC    CL8'D',CL42'ENTRY 2'                  *
.*                        DC    CL8'X',CL42'ENTRY 3'                  *
.*                        DC    CL8'$',CL42'ENTRY 4'                  *
.*                        DC    CL8'Q',CL42'ENTRY 5'                  *
.*               END      DC    CL8'M',CL42'ENTRY 6'                  *
.**********************************************************************
         LCLA  &X,&Y,&Z,&LEN
         LCLC  &HI,&I
&I       SETC  '#SOR'.'&SYSNDX'(2,3)
&X       SETA  N'&FIELDS
         AIF   (&X NE 4).ERR1
         AIF   ('&FIELDS(3)' NE 'CH').ERR2
&HI      SETC  'H'
         AIF   ('&FIELDS(&X)' NE 'D').TESTA
&HI      SETC  'L'
         AGO   .SETREGS
.TESTA   AIF   ('&FIELDS(&X)' EQ 'A').SETREGS
         MNOTE *,'*** SORT TYPE NOT A OR D - A ASSUMED'
.SETREGS ANOP
&LEN     SETA  &LENGTH
&X       SETA  &FIELDS(1)-1            OFFSET WITHIN RECORD
&Y       SETA  &FIELDS(2)              LENGTH OF SORT-KEY
&Z       SETA  &X+&LEN                 OFFSET WITHIN NEXT RECORD
         AIF   ('&FIRST'  EQ '').ERR3
         AIF   ('&LAST'   EQ '').ERR4
         AIF   ('&LENGTH' EQ '').ERR5
&LABEL   LA    R0,&LENGTH              LOAD LENGTH OF AN ENTRY
         AIF   ('&LAST'(1,1) EQ '(').RFORM1
         LA    R1,&LAST                LOAD LAST ENTRY ADDRESS
         AGO   .CONT1
.RFORM1  LR    R1,&LAST                LOAD LAST ENTRY ADDRESS
.CONT1   ANOP
&I.A     SR    R14,R14                 CLEAR LAST SWITCH ADDRESS
         AIF   ('&FIRST'(1,1) EQ '(').RFORM2
         LA    R15,&FIRST              LOAD FIRST ENTRY ADDRESS
         AGO   .CONT2
.RFORM2  LR    R15,&FIRST              LOAD FIRST ENTRY ADDRESS
.CONT2   SR    R1,R0                   POINT TO PENULTIMATE
         CR    R15,R1                  TEST AGAINST FIRST ENTRY
         BH    &I.D                    IF HIGH, LIST SORTED
&I.B     CLC   &X.(&Y,R15),&Z.(R15)    COMPARE KEYS
         BN&HI &I.C
         XC    0(&LEN,R15),&LEN.(R15)  SWITCH ENTRIES
         XC    &LEN.(&LEN,R15),0(R15)
         XC    0(&LEN,R15),&LEN.(R15)
         LR    R14,R15                 SAVE ADDRESS OF SWITCHED ENTRY
&I.C     BXLE  R15,R0,&I.B             POINT TO NEXT ENTRY
         LTR   R1,R14                  COPY AND TEST LAST SWITCHED ADDR
         BNZ   &I.A
&I.D     EQU   *
         MEXIT
.ERR1    MNOTE 8,'INVALID NO. OF ENTRIES IN FIELDS PARAMETER'
         MEXIT
.ERR2    MNOTE 8,'FORMAT TYPE IS NOT SUPPORTED'
         MEXIT
.ERR3    MNOTE 8,'FIRST ENTRY ADDRESS NOT SPECIFIED.'
         MEXIT
.ERR4    MNOTE 8,'LAST  ENTRY ADDRESS NOT SPECIFIED.'
         MEXIT
.ERR5    MNOTE 8,'LENGTH NOT SPECIFIED.'
         MEND
         .
         .
         STM   R0,R14,SAVESORT    SAVE REGISTERS
         L     R3,TBLADDR         LOAD A(TABLE)
         L     R4,TBLEND          LOAD /A(LAST TABLE ENTRY)
         SORT  FIELDS=(1,4,CH,A),FIRST=(R3),LAST=(R4),LENGTH=4
         LM    R0,R14,SAVESORT    RESTORE REGISTERS
         .
         .


                                                                 c Reserved 1991

