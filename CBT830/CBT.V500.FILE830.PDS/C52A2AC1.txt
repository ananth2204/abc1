Files not saved by HSM

//ARCINBAK JOB SYS69,ARCINBAK,CLASS=Y,MSGCLASS=8,MSGLEVEL=(1,1),
//        NOTIFY=SYST1
//* BACKUP VTAM PDS
//ARCINBAK EXEC PGM=ARCINBAK
//ARCSNAP DD DUMMY
//ARCPRINT  DD SYSOUT=*
//BACK0001  DD DSNAME=RDVUSER.VTAMLST.LYO,DISP=SHR
//BACK0002  DD DSNAME=RDVUSER.VTAMLIB,DISP=SHR

SAMPLE JOB STREAM

//XRHSMCAT JOB XRHSMCAT,CEXP,CLASS=W,MSGCLASS=2,COND=(9,LT),
//         NOTIFY=CEXP,
//         RESTART=*
//* BATCH JOB UNDER MVS/ESA (WITH TSOBATCH AND REXX )
//* LIST DIFFERENCES BETWEEN BCDS (BACK-UP CONTROL DATASET) OF
//* HSM (HIERARCHICAL STORAGE MANAGER ) AND LIST FROM CATALOG
//* USING  AMS (ACCESS METHOD SERVICE ) ,LISTCAT VOLUME FOR
//* EACH VSAM CATALOG
//* THEN WE BACK-UP ALL THESE FILES WITH HSM
//*  (FILES ARE NOT IN HSM BCDS )
//*   IN STEP4 YOU SHOULD GIVE THE NAME OF YOUR OWN VSAM CATALOG
//*-------------------------------------------------------------------
//*  CHANGE EXPL69.CEXP.LOADLIB BY YOUR OWN LOADLIB NAME
//JOBLIB DD DSN=EXPL69.CEXP.LOADLIB,DISP=SHR
//       DD DSN=SYS1.VSCLLIB,DISP=SHR
//*
//*---------------------------------------------------------------
//*-STEP1          >>>>> DELETE FILES    IN OUTPUT               *
//*---------------------------------------------------------------
//STEP1 EXEC PGM=IDCAMS,REGION=2M
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   *
  DELETE  (EXPL69.FICH.NBACK)
  DELETE  (EXPL69.hback.list)
/*
//*---------------------------------------------------------------
//*-STEP2 LIST HSM BACK-UP                                       *
//*---------------------------------------------------------------
//STEP2    EXEC PGM=IKJEFT01
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
 HSEND LIST DATASETNAME BACKUPCONTROLDATASET    ODS(EXPL69.hback.list)
//*---------------------------------------------------------------
//*-STEP3 >>>>>>>>>>>>><  DELETE FILES  CREATED BY STEP4 >       *
//*---------------------------------------------------------------
//STEP3 EXEC PGM=IDCAMS,TIME=1
//SYSPRINT DD SYSOUT=*
//SYSIN DD *
  DEL (EXPL69.CTRL.CATS.VOL)
  DEL (EXPL69.CTRL.CATS.DSK)
  DEL (EXPL69.CTRL.CATS.DSKTRIF)
  DEL (EXPL69.CTRL.CATS.CATALL)
/*
//*---------------------------------------------------------------
//*-STEP4 AMS LISTCAT VOLUME    OUTPUT ON EXPL69.CTRL.CATS.VOL   *
//*---------------------------------------------------------------
//STEP4 EXEC PGM=IDCAMS,REGION=2M
//SYSPRINT DD  DSN=EXPL69.CTRL.CATS.VOL,DISP=(,CATLG,DELETE),
//         SPACE=(CYL,(27,9)),DCB=(LRECL=125,RECFM=VBA,BLKSIZE=629),
//         UNIT=SYSDA
//*-------------------------------------------------------------------
//* ======     YOU SHOULD                   ===========================
//*  WRITE BELOW THE NAMES OF THE  CATALOGS TO LIST
//*-------------------------------------------------------------------
//SYSIN    DD  *
 LISTCAT VOL CAT(CATALOG.MVSICFM.VRDVCAT)
 LISTCAT VOL CAT(CATALOG.HSM)
 LISTCAT VOL CAT(CAT.EXPL)
 LISTCAT VOL CAT(CAT.EXPL2)
 LISTCAT VOL CAT(CAT.TSO)
 LISTCAT VOL CAT(CAT.TEST)
 LISTCAT VOL CAT(CATALOG.VDLB204)
/*
//*---------------------------------------------------------------
//*-STEP5 COBOL PROGRAM TO GET THE NAMES OF ALL THE FILES
//*---------------------------------------------------------------
//STEP5   EXEC PGM=LSTCATV,TIME=10
//*   SYSPRINT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=W
//SYSDBOUT DD SYSOUT=*
//*   SYSOUT   DD SYSOUT=*
//SYSOUT   DD  SYSOUT=*
//VOLUME   DD DSN=EXPL69.CTRL.CATS.VOL,DISP=SHR
//DISQUE   DD DSN=EXPL69.CTRL.CATS.DSK,DISP=(,CATLG,DELETE),
//         SPACE=(CYL,(1,1)),UNIT=SYSDA
//CATALL   DD DSN=EXPL69.CTRL.CATS.CATALL,DISP=(,CATLG,DELETE),
//         SPACE=(CYL,(1,1)),UNIT=SYSDA
//*---------------------------------------------------------------
//*-STEP6 DFSORT SORT BY NAME
//*---------------------------------------------------------------
//STEP6    EXEC PGM=ICEMAN,PARM='SIZE(MAX)'
//SORTLIB  DD DSN=SYS1.SORTLIB,DISP=SHR
//SYSOUT   DD SYSOUT=*
//SORTIN   DD DSN=EXPL69.CTRL.CATS.DSK,DISP=OLD
//SORTOUT  DD DSN=EXPL69.CTRL.CATS.DSKTRIF,DISP=(,CATLG,DELETE),
//         SPACE=(CYL,(1,1)),UNIT=SYSDA
//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)
//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)
//SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,5)
//SORTWK04 DD UNIT=SYSDA,SPACE=(CYL,5)
//SORTWK05 DD UNIT=SYSDA,SPACE=(CYL,5)
//SYSIN    DD *
 SORT FIELDS=(1,3,A,39,40,A),FILSZ=E15000,FORMAT=BI
/*
//*---------------------------------------------------------------
//*-STEP7    COBOL PROGRAM
//* BATCH JOB WHICH SEARCHES FOR FILES NOT BACKED UP BY HSM
//* RESULT IN EXPL69.FICH.NBACK (YOU CAN CHANGE IT)
//*-------------------------------------------------------------------
//STEP7    EXEC PGM=XRHSMCAT,TIME=1,REGION=4096K
//STEPLIB DD  DSN=EXPL69.CEXP.LOADLIB,DISP=SHR
//SYSOUT DD SYSOUT=*
//SYSABOUT DD SYSOUT=*
//SYSDBOUT DD SYSOUT=*
//HBACKLT DD DSN=EXPL69.HBACK.LIST,DISP=SHR
//CTRLTRI DD DSN=EXPL69.CTRL.CATS.DSKTRIF,DISP=SHR
//VERIF DD DSN=EXPL69.FICH.NBACK,DISP=(,CATLG,DELETE),UNIT=SYSDA,
//      SPACE=(TRK,(1,1)),
//      DCB=(LRECL=80,RECFM=FB)
/*
//*---------------------------------------------------------------
//*-STEP8
//* OPCBATCH REXX CLIST IS   EXECUTED IN BATCH
//* THIS REXX EXEC IS USED TO DO AN HBACKDS COMMAND ===================
//*IN ORDER TO DO A BACK-UP WITH HSM
//*-------------------------------------------------------------------
//STEP8   EXEC PGM=IKJEFT01
//*-- RDVLYO.COMMU.EXEC IS THE PDS CONTAINING  THE OPCBACK CLIST- *
//*-- THE OPCBACK CLIST SENDS TSO BATCH BACKDS COMMAND TO HSM     *
//*-- THE BACKDS COMMAND IS A BACK-UP FOR HSM                     *
//SYSEXEC  DD   DSN=RDVLYO.COMMU.EXEC,DISP=SHR
//SYSTSPRT DD   SYSOUT=*
//SYSTSIN  DD   *
  EXECUTIL SEARCHDD(YES)
  %OPCBACK
/*
//

LSTCATV SOURCE CODE

 ID DIVISION.
 PROGRAM-ID. LSTCATV.
*****************************************************************
* LSTCATV :                                                     *
* COBOL PROGRAM                                                 *
* LIST AMS LISTCAT VOLUME IN INPUT                              *
* WRITE ALL NAME OF FILES FROM CATALOG IN OUTPUT                *
* - CREATE FILE (OUTPUT)  :                                     *
*   -----------------------                                     *
*   - DISQUE            >>>>> CATALOG / DISK                    *
*   ----------------------                                      *
*****************************************************************
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
      SELECT VOLUME   ASSIGN UT-S-VOLUME.
      SELECT DISQUE   ASSIGN UT-S-DISQUE.
 DATA DIVISION.
 FILE SECTION.
 FD   VOLUME LABEL RECORD STANDARD BLOCK 0 RECORDING MODE V.
 01   VOL    PIC X(125).
 FD   DISQUE LABEL RECORD STANDARD BLOCK 0.
 01   DSK    PIC X(80).
 WORKING-STORAGE SECTION.
 77   XGDG   PIC 9    VALUE 0.
 01   MAN    PIC X(125).
 01   MANT REDEFINES MAN.
      02 FILLER PIC X.
      02 MANT-1 PIC X(23).
      02 FILLER PIC X(43).
      02 MANT-2 PIC X(14).
      02 FILLER PIC X(44).
 01   MAND REDEFINES MAN.
      02 FILLER PIC X.
      02 MAND-1 PIC X(29).
      02 MAND-2 PIC X(24).
      02 MAND-3 PIC X(23).
      02 FILLER PIC X(48).
 01   MAN1 REDEFINES MAN.
      02 FILLER PIC X.
      02 MAN1-1 PIC X(16).
      02 MAN1-2 PIC X(44).
      02 FILLER PIC X(64).
 01   MAN2 REDEFINES MAN.
      02 FILLER PIC X.
      02 FILLER PIC X(52).
      02 MAN2-2 PIC X(8).
      02 FILLER PIC X(64).
 01   MAN3 REDEFINES MAN.
      02 FILLER PIC X(26).
      02 MAN3-1 PIC X(18).
      02 FILLER PIC X(93).
 01  TIT1.
     02 FILLER   PIC X(50) VALUE ' X1  (LSTCATV) LIST OF FILES
-    ' CATALOGED  ON  '.
     02 TIT1-1   PIC X(25) VALUE SPACES.
 01  TIT2.
     02 FILLER   PIC X(5)  VALUE ' X2  '.
     02 FILLER   PIC X(70) VALUE ALL '*'.
 01  TIT3.
     02 FILLER   PIC X(5)  VALUE ' X3  '.
     02 FILLER   PIC X(20) VALUE ' DATE  ====>'.
     02 TIT3-JJ  PIC 99.
     02 FILLER   PIC X VALUE '/'.
     02 TIT3-MM  PIC 99.
     02 FILLER   PIC X VALUE '/'.
     02 TIT3-AA  PIC 99.
     02 FILLER   PIC XX VALUE SPACES.
     02 TIT3-H   PIC X(14).
 01  TIT4.
     02 FILLER   PIC X(5)  VALUE ' X4  '.
     02 FILLER   PIC X(44) VALUE ALL '='.
 01  DAT.
     02 DAT-MM   PIC 99.
     02 FILLER   PIC X.
     02 DAT-JJ   PIC 99.
     02 FILLER   PIC X.
     02 DAT-AA   PIC 99.
 01  ZECR.
     02 ZECR-1   PIC X(5)  VALUE 'X    '.
     02 ZECR-2   PIC X(9)  VALUE SPACES.
     02 ZECR-3   PIC X(8)  VALUE SPACES.
     02 ZECR-4   PIC X(16) VALUE SPACES.
     02 ZECR-5   PIC X(42) VALUE SPACES.
 01  MANVOL.
     02 MANVOL1  PIC X.
     02 FILLER   PIC X(5).
 01  MANVOLR REDEFINES MANVOL.
     02 MANVOL2  PIC XX.
     02 FILLER   PIC X(4).
 01  MANCAT      PIC X(23).
 01  MANCATV     PIC X(6).
 PROCEDURE DIVISION.
     OPEN INPUT VOLUME OUTPUT DISQUE.
     MOVE CURRENT-DATE TO DAT
     MOVE DAT-JJ TO TIT3-JJ
     MOVE DAT-MM TO TIT3-MM
     MOVE DAT-AA TO TIT3-AA.
 LECTIME.
     READ VOLUME INTO MAN AT END GO TO ERRLEC.
     IF MANT-1 NOT = 'IDCAMS  SYSTEM SERVICES' GO TO ERRLEC.
     MOVE MANT-2 TO TIT3-H.
     MOVE 'DISK   ' TO TIT1-1
     MOVE TIT1     TO DSK     WRITE DSK
     MOVE TIT2     TO DSK     WRITE DSK
     MOVE TIT3     TO DSK     WRITE DSK
     MOVE TIT4     TO DSK     WRITE DSK.
 LECENT.
     READ VOLUME INTO MAN AT END GO TO FIN.
     IF   MAND-1 = SPACES
     AND  MAND-2 = 'LISTING FROM CATALOG -- '
     GO TO MEFCAT.
     IF MAN1-1 = '   DATA ------- ' GO TO MEF1.
     IF MAN1-1 = '   INDEX ------ ' GO TO MEF1.
     IF MAN1-1 = 'NONVSAM ------- ' GO TO MEF1.
     IF MAN1-1 = '   NONVSAM ---- ' GO TO MEF1.
     IF MAN1-1 = 'GDG BASE ------ '
                  MOVE 1 TO XGDG
                  GO TO MEF1.
     IF MAN1-1 = 'USERCATALOG --- '
                  GO TO MEF1.
     IF MAN1-1 = '       DATASET-O' GO TO MEF2.
     IF MAN1-1 = '       VOLSER---' GO TO MEF3.
     GO TO LECENT.
 MEF1.
     MOVE SPACES TO ZECR-2 ZECR-3 ZECR-4 ZECR-5
     MOVE MAN1-1 TO ZECR-4
     MOVE MAN1-2 TO ZECR-5
     GO TO LECENT.
 MEF2.
     MOVE MAN2-2 TO ZECR-2
     IF XGDG = 1
             MOVE 0 TO XGDG
             MOVE MANCATV TO ZECR-3
             GO TO ECRDSK.
     GO TO LECENT.
 MEF3.
     IF ZECR-4 = 'USERCATALOG --- ' GO TO LECENT.
     MOVE MAN3-1 TO ZECR-3 MANVOL.
 ECRDSK.
     MOVE ZECR TO DSK
     WRITE DSK.
 MEFCAT.
     MOVE MAND-3 TO MANCAT
     GO TO LECENT.
     DISPLAY '*******************************'
     DISPLAY 'READ ERROR  : ON INPUT FILE    '
     DISPLAY '*******************************'
     MOVE 200 TO RETURN-CODE.
     GO TO FIN.
 ERRLEC.
     DISPLAY '*******************************'
     DISPLAY 'READ ERROR  : ON INPUT FILE    '
     DISPLAY '*******************************'
     MOVE 100 TO RETURN-CODE.
 FIN.
     DISPLAY '******************************'
     DISPLAY '=============================='
     DISPLAY '          END                 '
     DISPLAY '=============================='
     DISPLAY '******************************'
     CLOSE VOLUME DISQUE
     STOP RUN.

XRHSMCAT SOURCE CODE

       IDENTIFICATION DIVISION.
       PROGRAM-ID. XRHSMCAT.
      *****************************************************************
      *  PROGRAM   TO VERIFY IF THE FILE HAS BEEN BACKED UP BY HSM
      *            FROM :
      *          HBACKLT (LIST OF FILES BACKED UP BY HSM)
      * AND      CTRLTRI (LIST OF FILES FROM CATALOG)
      ******************************************************************
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT HBACKLT  ASSIGN TO UT-S-HBACKLT.
           SELECT CTRLTRI  ASSIGN TO UT-S-CTRLTRI.
           SELECT VERIF    ASSIGN TO UT-S-VERIF.
       DATA DIVISION.
       FILE SECTION.
       FD  HBACKLT
           LABEL RECORD STANDARD RECORD CONTAINS 121 CHARACTERS
           BLOCK 0 RECORDS
           DATA RECORD IS ART-HBACKLT.
       01  ART-HBACKLT.
           02  FILLER   PIC X(121).
       FD  CTRLTRI
           LABEL RECORD STANDARD RECORD CONTAINS 80  CHARACTERS
           BLOCK 0 RECORDS
           DATA RECORD IS ART-CTRLTRI.
       01  ART-CTRLTRI.
           02  FILLER      PIC X(80).
       FD  VERIF
           LABEL RECORD STANDARD RECORD CONTAINS 80  CHARACTERS
           BLOCK 0 RECORDS
           DATA RECORD IS ETATS.
       01  ETATS.
           02  FILLER   PIC X(80).
       WORKING-STORAGE SECTION.
       77  I                     PIC 9999 VALUE 0.
       77  J                     PIC 9(6) VALUE 0.
       77  K                     PIC 9(6) VALUE 0.
       01  W-HBACKLT.
           02  FILLER        PIC X.
           02  W-DSN    PIC X(9).
               88  LIB-DSN    VALUE 'DSNAME = '.
           02  W-HBACK-DSN   PIC X(40).
           02  FILLER   PIC X(30).
       01  W-CTRLTRI.
           02  FILLER        PIC X(14).
           02  W-MIGRAT      PIC X(6).
               88  LIB-MIGRAT VALUE 'MIGRAT'.
           02  FILLER        PIC X(2).
           02  W-GDGBASE     PIC X(8).
               88  LIB-GDGBAS VALUE 'GDG BASE'.
           02  FILLER        PIC X(4).
           02  W-TRAIT       PIC X(3).
           02  FILLER        PIC X.
           02  W-CTR-DSN     PIC X(40).
           02  W-CTR-DSN-HSM REDEFINES W-CTR-DSN.
               04  FIL-PAGE  PIC XXXX.
               88  LIB-PAGE  VALUE 'PAGE' 'SWAP'.
               88  LIB-HSM   VALUE 'HSM.'.
               88  LIB-SYS1  VALUE 'SYS1'.
               04  FIL-HSM   PIC XXXX.
               88  LIB-HSMPLUS   VALUE 'VTOC' 'HMIG' 'BACK' 'DUMP'.
               88  LIB-VVDS      VALUE '.VVD'.
               04  FILLER    PIC X(32).
           02  FILLER        PIC XX.
       01  W-GDG.
           02  W-1-GDG       PIC X OCCURS 40.
       01  RES-DSN           PIC X(40) VALUE SPACES.
       PROCEDURE DIVISION.
       TEST-PART.
           OPEN INPUT  HBACKLT
                       CTRLTRI.
           OPEN OUTPUT VERIF.
       LECTURE-HBACKLT.
           READ HBACKLT INTO W-HBACKLT  AT END
                      MOVE HIGH-VALUE TO W-HBACKLT W-HBACK-DSN
                      GO TO FIN-HBACKLT.
           DISPLAY ART-HBACKLT.
           DISPLAY W-HBACKLT.
           IF LIB-DSN  NEXT SENTENCE
                  ELSE GO TO LECTURE-HBACKLT.
           DISPLAY W-HBACK-DSN.
           MOVE W-HBACK-DSN TO W-GDG.
           MOVE 0 TO J K.
       RECH-GDG.
           ADD 1 TO J
           IF W-1-GDG (J) = ' '  OR
              J > 32 GO TO FIN-RECH-GDG.
           IF W-1-GDG (J) = '.' NEXT SENTENCE ELSE GO TO RECH-GDG.
           MOVE J TO K.
           ADD 1 TO J
           IF W-1-GDG (J) = 'G' NEXT SENTENCE ELSE MOVE K TO J
                                       GO TO RECH-GDG.
           ADD 1 TO J
           IF W-1-GDG (J) = '0' NEXT SENTENCE ELSE MOVE K TO J
                                       GO TO RECH-GDG.
           ADD 4 TO J
           IF W-1-GDG (J) = 'V' NEXT SENTENCE ELSE MOVE K TO J
                                       GO TO RECH-GDG.
      *    DISPLAY '* FIND   GDG'.
           GO TO LECTURE-HBACKLT.
       FIN-RECH-GDG. EXIT.
      *    ADD 1 TO I
      *    IF I < 50 GO TO LECTURE-HBACKLT.
      *    MOVE 0 TO I.
       FIN-HBACKLT.  EXIT.
       LECTURE-CTRLTRI.
           IF W-CTRLTRI = HIGH-VALUE GO TO APPAR.
           READ CTRLTRI INTO W-CTRLTRI   AT END
                      MOVE HIGH-VALUE TO W-CTRLTRI  W-CTR-DSN
                      GO TO APPAR.
           IF W-TRAIT = '---' NEXT SENTENCE
                      ELSE GO TO LECTURE-CTRLTRI.
      *    DISPLAY ART-CTRLTRI.
           IF LIB-MIGRAT OR LIB-GDGBAS  GO TO LECTURE-CTRLTRI.
           IF LIB-PAGE GO TO LECTURE-CTRLTRI.
           IF LIB-HSM AND LIB-HSMPLUS GO TO LECTURE-CTRLTRI.
           IF LIB-SYS1 AND LIB-VVDS   GO TO LECTURE-CTRLTRI.
      *    DISPLAY W-CTRLTRI.
      *    DISPLAY W-CTR-DSN.
           MOVE W-CTR-DSN TO W-GDG.
           MOVE 0 TO J K.
       RECH-GDG-B.
           ADD 1 TO J
           IF W-1-GDG (J) = ' '  OR
              J > 32 GO TO FIN-RECH-GDG-B.
           IF W-1-GDG (J) = '.' NEXT SENTENCE ELSE GO TO RECH-GDG-B.
           MOVE J TO K.
           ADD 1 TO J
           IF W-1-GDG (J) = 'G' NEXT SENTENCE ELSE MOVE K TO J
                                       GO TO RECH-GDG-B.
           ADD 1 TO J
           IF W-1-GDG (J) = '0' NEXT SENTENCE ELSE MOVE K TO J
                                       GO TO RECH-GDG-B.
           ADD 4 TO J
           IF W-1-GDG (J) = 'V' NEXT SENTENCE ELSE MOVE K TO J
                                       GO TO RECH-GDG-B.
      *    DISPLAY '* TROUVE GDG'.
           GO TO LECTURE-CTRLTRI.
       FIN-RECH-GDG-B. EXIT.
       RECH-DATA.
           MOVE 0 TO J K.
       BOUCL-DATA.
           ADD 1 TO J
           IF W-1-GDG (J) = ' ' OR J > 35 MOVE 0 TO J K
                             GO TO BOUCL-INDEX.
           IF W-1-GDG (J) = '.' NEXT SENTENCE  ELSE GO TO BOUCL-DATA.
           MOVE J TO K
           ADD 1 TO J
           IF W-1-GDG (J) = 'D' NEXT SENTENCE  ELSE MOVE K TO J
                                GO TO BOUCL-DATA.
           ADD 1 TO J
           IF W-1-GDG (J) = 'A' NEXT SENTENCE  ELSE MOVE K TO J
                                GO TO BOUCL-DATA.
           ADD 1 TO J
           IF W-1-GDG (J) = 'T' NEXT SENTENCE  ELSE MOVE K TO J
                                GO TO BOUCL-DATA.
           ADD 1 TO J
           IF W-1-GDG (J) = 'A' NEXT SENTENCE  ELSE MOVE K TO J
                                GO TO BOUCL-DATA.
           ADD 1 TO J
           IF W-1-GDG (J) = ' ' NEXT SENTENCE  ELSE MOVE K TO J
                                GO TO BOUCL-DATA.
      *    DISPLAY W-GDG     ' ' RES-DSN.
           PERFORM EFFAC THRU FIN-EFFAC 5 TIMES.
      *    DISPLAY W-GDG     ' ' RES-DSN.
           IF W-GDG     = RES-DSN GO TO LECTURE-CTRLTRI.
           MOVE W-GDG     TO RES-DSN W-CTR-DSN.
           GO TO APPAR.
       BOUCL-INDEX.
           ADD 1 TO J
           IF W-1-GDG (J) = ' ' OR J > 35 MOVE 0 TO J K
                             GO TO APPAR.
           IF W-1-GDG (J) = '.' NEXT SENTENCE  ELSE GO TO BOUCL-INDEX.
           MOVE J TO K
           ADD 1 TO J
           IF W-1-GDG (J) = 'I' NEXT SENTENCE  ELSE MOVE K TO J
                               GO TO BOUCL-INDEX.
           ADD 1 TO J
           IF W-1-GDG (J) = 'N' NEXT SENTENCE  ELSE MOVE K TO J
                               GO TO BOUCL-INDEX.
           ADD 1 TO J
           IF W-1-GDG (J) = 'D' NEXT SENTENCE  ELSE MOVE K TO J
                               GO TO BOUCL-INDEX.
           ADD 1 TO J
           IF W-1-GDG (J) = 'E' NEXT SENTENCE  ELSE MOVE K TO J
                               GO TO BOUCL-INDEX.
           ADD 1 TO J
           IF W-1-GDG (J) = 'X' NEXT SENTENCE  ELSE MOVE K TO J
                               GO TO BOUCL-INDEX.
           ADD 1 TO J
           IF W-1-GDG (J) = ' ' NEXT SENTENCE  ELSE MOVE K TO J
                               GO TO BOUCL-INDEX.
      *    DISPLAY W-GDG     ' ' RES-DSN.
           PERFORM EFFAC THRU FIN-EFFAC 6 TIMES.
      *    DISPLAY W-GDG     ' ' RES-DSN.
           IF W-GDG     = RES-DSN GO TO LECTURE-CTRLTRI.
           MOVE W-GDG     TO RES-DSN W-CTR-DSN.
           MOVE 0 TO J K.
           GO TO APPAR.
       EFFAC.
           MOVE ' ' TO W-1-GDG (K).
           ADD 1 TO K.
       FIN-EFFAC. EXIT.
       APPAR.
           IF W-HBACKLT = HIGH-VALUE   AND W-CTRLTRI = HIGH-VALUE
                       GO TO FIN-FIN.
           IF W-HBACK-DSN = W-CTR-DSN  GO TO LECTURE-HBACKLT.
      *    IF I > 50 GO TO FIN-FIN.
           IF W-HBACK-DSN > W-CTR-DSN
           ADD 1 TO I
      *             DISPLAY W-CTR-DSN ' NOT IN  HBACKL'
                    MOVE W-CTR-DSN TO ETATS  WRITE ETATS
                    GO TO LECTURE-CTRLTRI.
      *             DISPLAY W-HBACK-DSN ' NOT IN   CTRLTRI'
                    PERFORM LECTURE-HBACKLT THRU FIN-RECH-GDG.
           GO TO APPAR.
       FIN-FIN.
           DISPLAY  'NUMBER OF ERRORS ' I.
           CLOSE HBACKLT  CTRLTRI VERIF.
           STOP RUN.

OPCBACK CLIST

/* REXX */
/*********************************************************************/
/* rexx clist which reads the name of file in fichjob               **/
/****    this file has  not been backed up by HSM                   **/
/****    certainly because it was opened when HSM tried to          **/
/****                back it up.                                    **/
/****    A hbackds command is send to H S M                         **/
/*********************************************************************/
Trace all
ALLOC:
 FCODE=SYSDSN("'EXPL69.FICH.NBACK'")
 If FCode = 'OK' Then Do
 Address TSO "ALLOCATE DATASET('"expl69.fich.nback"')",
             " FILE(FICHJOB) OLD REUSE"
                      End
LIRE:
 ADDRESS TSO "EXECIO * DISKR FICHJOB (STEM T. FINIS"
  If  rc > 0      then Do
                          Say 'EXECIO Erreur : ' rc
                          Address TSO "FREE FILE(FichJob)"
                          Exit 100
                       End
 i=1
 do until i = t.0
 t.i=strip(t.i)
Address TSO "hbackds '"t.i"' wait"
 say  t.i
 i = i + 1
  end
FIN:
 ADDRESS TSO "FREE FILE(FICHJOB)"
exit




