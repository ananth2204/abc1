ICF catalog clean-up

THE PROBLEM

Over time, ICF catalogs have a way of accumulating stray
entries that do not have actual matching datasets on disk.
Situations which cause this generally fall into the category of
'non-standard', but, as system programmers, we all know they
happen.  Some examples would be: initializing a pack prior to
cleaning it up, losing a pack because of hardware failure and
having problems in the re-build process, or using a previous
master catalog as a user catalog when upgrading an operating
system.

I have had all these situations and more lead to stray entries in
catalogs.  In addition, I recently had a problem which forced
me to consider an automated way of getting rid of these bogus
entries.  It occurred in relation to testing a disaster recovery
plan.  In the plan, there were two options which presented
themselves in respect of how the catalogs were being recovered
- either rebuild them from scratch or restore them in their
entirety.  By defining and then rebuilding the catalogs from
scratch during the recovery process, only those datasets which
were restored in the process would appear in the catalogs.

At first that seemed to be the logical way to go.  However, this
option neglected tape datasets, which obviously were an
integral piece of the recovery effort.  Thus, the entire group of
tapes involved in the recovery would have to be re-catalogued
very early in the process.  This proved to be unacceptable in
our case and I am sure it would be in most other shops too.
The second option of restoring the catalogs does bring back all
tape entries.  However, this option also causes entries for
DASD datasets to be present before they are actually restored.
In turn, the procedure for restoring some of these datasets runs
into problems when a duplicate entry is detected.  Most of the
problems experienced were with DB2 and other VSAM-related
files.  After analysing the situation, it was obvious there was
only one manageable way to handle the catalogs - restore them
and then clean up all the stray entries prior to proceeding with
the individual restores.

THE SOLUTION

A technique which combines the abilities of IDCAMS, a
COBOL program, an Assembler program, and JCL was
devised to remove entries from catalogs which do not have
actual matching datasets.  At the heart of the technique is an
Assembler program called CHECKIT.  This program takes a
dataset name and uses the OBTAIN macro to determine
whether it exists.  To break a catalog down into individual
dataset names, IDCAMS is used to get a LISTC VOLUME
listing.  Using JCL, the listing is passed on to a COBOL
program called CLEANCAT, which extracts the dataset name,
device type, and volume information.

As mentioned earlier, tape datasets would not be candidates for
removal.  To handle this and other exceptions to the clean-up
process, the program reads in 'bypass exception' data at the
dataset name, device type, and volume level.  Thus, typical
device types input for bypass are those related to 3420 or 3480
devices.  An example of a volume-level bypass in my case is
ARCIVE.  This is a pseudo volume used when datasets are re-
catalogued on a date since the last archiving  process.  So in
reality, they too reside only on tape.

An example of a dataset bypass would be SYS1.VVDS.  In my
shop a VVDS delete requires the originating pack to be
available.  This is not true on all releases of MVS/XA and
there is a PTF to correct it at my level, but it's not on yet.
Thus, if the VVDS catalog entry is being deleted, the pack
doesn't exist so there is no use proceeding with the delete.
One feature of the dataset name bypass is to compare up to the
first blank.  This allows for bypassing based on a high-level
mask as in the case of SYS1.VVDS.  All three exceptions have
an input limit of 10 which can easily be changed.

After the COBOL program has broken down a dataset name,
and assuming it does not match any bypass criteria, the
Assembler program is called to check for its existence.  If the
dataset cannot be found, the COBOL program formats an
IDCAMS DELETE NOSCRATCH statement for it.  In some
cases, the stray entries found contain a high-level qualifier
which has either lost its alias to the catalog or has had the alias
directed to another catalog.  Because of this, the DELETE
statement is also formatted with the CATALOG parameter to
point it in the right direction.  The PURGE parameter is also
inserted in case of an unexpired expiration date on some
VSAM files.  After the program has examined all entries in the
catalog, the DELETE statements are passed on to an IDCAMS
step via JCL, which in turn deletes the datasets from the
catalog.  This process can be simulated and refined by putting
the delete requests into a permanent dataset and examining it.
Keep running the first two steps of the job until the desired
results are attained and then feed the dataset into the final
IDCAMS step.

CLEANCAT SOURCE

IDENTIFICATION DIVISION.
PROGRAM-ID.     CLEANCAT.
AUTHOR.         ERNIE ISHMAN.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT IDCAMSOT  ASSIGN TO IDCAMSOT.
    SELECT LISTCIN   ASSIGN TO LISTCIN.
    SELECT PARMSIN   ASSIGN TO PARMSIN.
DATA DIVISION.
FILE SECTION.
FD  LISTCIN
    LABEL RECORDS ARE STANDARD
    RECORDING MODE V
    BLOCK 0 RECORDS.
01  LISTCIN-RECORD   PIC X(133).
FD  PARMSIN
    LABEL RECORDS ARE STANDARD
    RECORDING MODE F
    BLOCK 0 RECORDS.
01  PARMSIN-RECORD.
    03  PR-TYPE      PIC XX.
    03  PR-DATASET.
        05  PR-DEVICE-TYPE.
            07  PR-VOLUME  PIC X(6).
            07  FILLER     PIC XX.
        05  FILLER   PIC X(36).
    03  FILLER       PIC X(34).
FD  IDCAMSOT
    LABEL RECORDS ARE STANDARD
    RECORDING MODE F
    BLOCK 0 RECORDS.
01  IDCAMSOT-RECORD  PIC X(80).
WORKING-STORAGE SECTION.
01  DSCB.
    05  FILLER           PIC X(44).
    05  DSCB-ASTERISKS   PIC X(3).
    05  FILLER           PIC X(93).
01  INREC.
    03  FILLER           PIC X.
    03  IR-POS2-98.
        05  IR-POS-2-11.
            07  FILLER       PIC X(3).
            07  IR-POS-5-11  PIC X(7).
        05  IR-REDEF-1 REDEFINES IR-POS-2-11.
            07  IR-POS-2-8   PIC X(7).
            07  FILLER       PIC X(3).
        05  FILLER       PIC X(6).
        05  IR-POS-18-61 PIC X(44).
        05  FILLER       PIC X(37).
    03  IR-REDEF-2 REDEFINES IR-POS2-98.
        05  FILLER       PIC X(7).
        05  IR-POS-9-14  PIC X(6).
        05  FILLER       PIC X(12).
        05  IR-POS-27-32 PIC X(6).
        05  FILLER       PIC X(20).
        05  IR-POS-53-60 PIC X(8).
        05  FILLER       PIC X(38).
    03  IR-REDEF-3 REDEFINES IR-POS2-98.
        05  FILLER       PIC X(29).
        05  IR-POS-31-50 PIC X(20).
        05  FILLER       PIC X(4).
        05  IR-POS-55-98 PIC X(44).
    03  FILLER           PIC X(35).
01  HOLD-VOLUME          PIC X(6)    VALUE SPACES.
01  HOLD-DEVICE-TYPE     PIC X(8)    VALUE SPACES.
01  HOLD-DSN             PIC X(44)   VALUE SPACES.
01  ENTRY-CNT            PIC 99  COMP VALUE 0.
01  POSITION-CNT         PIC 99  COMP VALUE 0.
01  DS-CNT               PIC 99  COMP VALUE 0.
01  DT-CNT               PIC 99  COMP VALUE 0.
01  VL-CNT               PIC 99  COMP VALUE 0.
01  WHAT-DO-WE-HAVE-FLAG PIC 9  COMP VALUE 0.
    88  WE-HAVE-NONVSAM              VALUE 1.
    88  WE-HAVE-VSAM                 VALUE 2.
01  EOF-FLAG             PIC 9  COMP VALUE 0.
    88  EOF                          VALUE 1.
01  MATCH-FLAG           PIC 9  COMP VALUE 0.
    88  NOMATCH                      VALUE 1.
01  SKIP-IT-FLAG         PIC 9  COMP VALUE 0.
    88  SKIP-IT                      VALUE 1.
01  IDCAMS-COMMAND-1.
    03 FILLER            PIC X(8)    VALUE ' DELETE '.
    03 IDCAMS-DSN.
         05  IDCAMS-DSN-CHARACTER OCCURS 44 TIMES PIC X.
    03 FILLER            PIC X(18)
       VALUE ' NOSCRATCH PURGE -'.
01  IDCAMS-COMMAND-2.
    03  FILLER           PIC X(9)    VALUE ' CATALOG('.
    03  IDCAMS-CAT       PIC X(44).
    03  FILLER           PIC X       VALUE ')'.
01  EXCLUDE-ENTRIES.
    03  EXCLUDE-DATASET               OCCURS 10 TIMES.
        05  EXCLUDE-DATASET-CHARACTER OCCURS 44 TIMES PIC X.
    03  EXCLUDE-VOLUME      PIC X(6)  OCCURS 10 TIMES.
    03  EXCLUDE-DEVICE-TYPE PIC X(8)  OCCURS 10 TIMES.
PROCEDURE DIVISION.
100-MAINLINE SECTION.
    OPEN INPUT LISTCIN PARMSIN
         OUTPUT IDCAMSOT.
    PERFORM 190-LOAD-PARMSIN-ENTRIES UNTIL EOF.
    MOVE 0 TO EOF-FLAG.
    PERFORM 200-READ-LISTCIN.
    PERFORM 130-GET-CATALOG.
    PERFORM 150-PROCESS UNTIL EOF.
    PERFORM 250-SHUTDOWN.
130-GET-CATALOG.
    IF IR-POS-31-50  = 'LISTING FROM CATALOG'
        MOVE IR-POS-55-98 TO IDCAMS-CAT
    ELSE
        PERFORM 200-READ-LISTCIN
        IF NOT EOF
            GO TO 130-GET-CATALOG.
150-PROCESS.
    IF IR-POS-2-8  = 'NONVSAM' OR
       IR-POS-5-11 = 'NONVSAM'
        MOVE 1 TO WHAT-DO-WE-HAVE-FLAG
        MOVE IR-POS-18-61 TO IDCAMS-DSN HOLD-DSN
    ELSE
        IF IR-POS-2-8  = 'CLUSTER'
            MOVE 2 TO WHAT-DO-WE-HAVE-FLAG
            MOVE IR-POS-18-61 TO IDCAMS-DSN
            PERFORM 155-GET-VSAM-DATA-NAME.
    IF WE-HAVE-NONVSAM OR WE-HAVE-VSAM
        PERFORM 160-GET-VOLUME
        MOVE 0 TO ENTRY-CNT SKIP-IT-FLAG WHAT-DO-WE-HAVE-FLAG
        PERFORM 170-CHECK-VOLUME VL-CNT TIMES
        IF NOT SKIP-IT
            MOVE 0 TO ENTRY-CNT
            PERFORM 180-CHECK-DEVICE-TYPE DT-CNT TIMES
            IF NOT SKIP-IT
                MOVE 0 TO ENTRY-CNT MATCH-FLAG
                PERFORM 185-CHECK-DATASET DS-CNT TIMES
                IF NOT SKIP-IT
                    MOVE SPACES TO DSCB
                    CALL 'CHECKIT' USING HOLD-DSN HOLD-VOLUME
                         DSCB
                    IF DSCB-ASTERISKS = '***'
                        WRITE IDCAMSOT-RECORD FROM
                              IDCAMS-COMMAND-1
                        WRITE IDCAMSOT-RECORD FROM
                              IDCAMS-COMMAND-2.
    PERFORM 200-READ-LISTCIN.
155-GET-VSAM-DATA-NAME.
    PERFORM 200-READ-LISTCIN.
    IF IR-POS-2-8  = '   DATA'
        MOVE IR-POS-18-61 TO HOLD-DSN
    ELSE
        GO TO 155-GET-VSAM-DATA-NAME.
160-GET-VOLUME.
    PERFORM 200-READ-LISTCIN.
    IF IR-POS-9-14 = 'VOLSER'
        MOVE IR-POS-27-32 TO HOLD-VOLUME
        MOVE IR-POS-53-60 TO HOLD-DEVICE-TYPE
    ELSE
        GO TO 160-GET-VOLUME.
170-CHECK-VOLUME.
    ADD 1 TO ENTRY-CNT.
    IF HOLD-VOLUME = EXCLUDE-VOLUME(ENTRY-CNT)
         MOVE 1 TO SKIP-IT-FLAG.
180-CHECK-DEVICE-TYPE.
    ADD 1 TO ENTRY-CNT.
    IF HOLD-DEVICE-TYPE = EXCLUDE-DEVICE-TYPE(ENTRY-CNT)
        MOVE 1 TO SKIP-IT-FLAG.
185-CHECK-DATASET.
    IF NOT SKIP-IT
        ADD 1 TO ENTRY-CNT
        MOVE 1 TO POSITION-CNT
        PERFORM 187-CHECK-DATASET-CHARACTER UNTIL NOMATCH OR
            POSITION-CNT = 45 OR
            EXCLUDE-DATASET-CHARACTER(ENTRY-CNT, POSITION-CNT)
            = SPACE
        IF NOMATCH
            MOVE 0 TO MATCH-FLAG
        ELSE
            MOVE 1 TO SKIP-IT-FLAG.
187-CHECK-DATASET-CHARACTER.
    IF IDCAMS-DSN-CHARACTER(POSITION-CNT) NOT =
        EXCLUDE-DATASET-CHARACTER(ENTRY-CNT, POSITION-CNT)
            MOVE 1 TO MATCH-FLAG
    ELSE
        ADD 1 TO POSITION-CNT.
190-LOAD-PARMSIN-ENTRIES.
    READ PARMSIN AT END MOVE 1 TO EOF-FLAG.
    IF NOT EOF
        IF PR-TYPE = 'DT'
            ADD 1 TO DT-CNT
            IF DT-CNT = 11
                DISPLAY 'DEVICE TYPE EXCLUDE TABLE EXCEEDED'
                MOVE 999 TO RETURN-CODE
                PERFORM 250-SHUTDOWN
            ELSE
                MOVE PR-DEVICE-TYPE TO
                    EXCLUDE-DEVICE-TYPE(DT-CNT)
        ELSE
            IF PR-TYPE = 'VL'
                ADD 1 TO VL-CNT
                IF VL-CNT = 11
                    DISPLAY 'VOLUME EXCLUDE TABLE EXCEEDED'
                    MOVE 999 TO RETURN-CODE
                    PERFORM 250-SHUTDOWN
                ELSE
                    MOVE PR-VOLUME TO EXCLUDE-VOLUME(VL-CNT)
            ELSE
                IF PR-TYPE = 'DS'
                    ADD 1 TO DS-CNT
                    IF DS-CNT = 11
                        DISPLAY 'DATASET EXCLUDE TABLE EXCEEDED'
                        MOVE 999 TO RETURN-CODE
                        PERFORM 250-SHUTDOWN
                    ELSE
                        MOVE PR-DATASET TO
                            EXCLUDE-DATASET(DS-CNT)
                ELSE
                    DISPLAY 'BAD EXCLUDE RECORD - '
                            PARMSIN-RECORD
                    MOVE 999 TO RETURN-CODE
                    PERFORM 250-SHUTDOWN.
200-READ-LISTCIN.
    READ LISTCIN INTO INREC AT END
         MOVE 1 TO EOF-FLAG.
250-SHUTDOWN.
    CLOSE LISTCIN PARMSIN IDCAMSOT.
    STOP RUN.

Sample output from the CLEANCAT program

 DELETE EISHMAN.TEST.DATA                            NOSCRATCH PURGE -
 CATALOG(CATALOG.VSYSCAT.MCAT                        )
 DELETE PITT.EXTRACT.FILE                            NOSCRATCH PURGE -
 CATALOG(CATALOG.VSYSCAT.MCAT                        )
 DELETE SYS2.OLDCOPY.LIST                            NOSCRATCH PURGE -
 CATALOG(CATALOG.VSYSCAT.MCAT                        )

CHECKIT SOURCE

*      PROGRAM: CHECKIT
*  DESCRIPTION: USED BY CLEANCAT TO CHECK EXISTENCE OF A DATASET ON DISK
CHECKIT  CSECT
         STM   R14,R12,12(R13)       SAVE CALLERS REGISTERS
         LA    R14,0(R13)            SAVE ADDRESS OF CALLERS SAVE AREA
         BAL   R13,84(R15)           BRANCH AROUND OUR SAVE AREA
         USING *,R13
         DS    18F
         ST    R14,4(R13)            SAVE ADDRESS OF CALLERS SAVE AREA
         ST    R13,8(R14)            SAVE ADDRESS OF OUR SAVE AREA
         LM    R2,R4,0(R1)           GET PARM VALUES
         MVC   DSCB1(44),0(R2)       SAVE THE DATASET NAME
         MVC   PARMVOL,0(R3)         SAVE THE VOLUME
         OBTAIN CAMDSCB1             CHECK IF ITS THERE
         LTR   R15,R15               WAS IT THERE?
         BZ    EOJ                   IF YES, GET OUT
         MVI   DSCB1+44,C'*'         IF NOT,
         MVC   DSCB1+45(95),DSCB1+44         MOVE IN ASTERISKS
EOJ      MVC   0(140,R4),DSCB1       MOVE THE DSCB INFO
         L     R13,4(R13)            RELOAD CALLERS SAVE ADDRESS
         LM    R14,R12,12(R13)       RELOAD CALLERS REGISTERS
         LA    R15,0                 ZERO RETURN CODE
         BR    R14                   GO BACK TO CALLER
CAMDSCB1 CAMLST SEARCH,DSCB1,PARMVOL,DSCB1+44
PARMVOL  DS    CL6
DSCB1    DS    CL140
         END

JCL FOR CLEANING STRAY ENTRIES OUT OF AN ICF CATALOG

//STEP1    EXEC PGM=IDCAMS
//*   CHANGE THE FOLLOWING TO THE CATALOG BEING CLEANED
//STEPCAT  DD   DSN=CATALOG.VSYSCAT.MCAT,DISP=SHR
//SYSPRINT DD   DSN=&&LISTCIN,DISP=(,PASS),
//    SPACE=(CYL,5),UNIT=SYSWK
//SYSIN    DD   *
 LISTC VOLUME
//*
//STEP2    EXEC PGM=CLEANCAT
//LISTCIN  DD   DSN=&&LISTCIN,DISP=(OLD,DELETE)
//*   TO SIMULATE THE PROCESS, MAKE THE FOLLOWING A PERMANENT
//*   DATASET TILL PROPER RESULTS ARE ATTAINED, THEN RUN STEP3
//*   WITH THE PERMANENT DATASET AS INPUT.
//IDCAMSOT DD   DSN=&&IDCAMS,UNIT=SYSWK,SPACE=(CYL,1),
//  DCB=(LRECL=80,BLKSIZE=6800,RECFM=FB),DISP=(,PASS)
//SYSOUT   DD   SYSOUT=*
//SYSDBOUT DD   SYSOUT=*
//SYSUDUMP DD   SYSOUT=*
//*  PARMSIN VALUES AND LAYOUT:
//*           COLUMN 1-2 - TYPE OF EXCLUDE.
//*                            DS - DATASET
//*                            VL - VOLUME
//*                            DT - DEVICE TYPE
//*          COLUMN 3-46 - DATASET NAME, VOLUME ID, OR DEVICE TYPE.
//*                        MUST BE LEFT JUSTIFIED.
//*         COLUMN 47-80 - COMMENTS RELATIVE TO THE ENTRY
//PARMSIN DD   *
DSSYS1.VVDS.                                     MASK FOR VVDS'S
DT78008080                                       CARTRIDGE TAPE
DT32108003                                       REEL TAPE
DT32008003                                       REEL TAPE
DT33008003                                       REEL TAPE
DT34008003                                       REEL TAPE
DT00098000                                       REEL TAPE
VLARCIVE                                         ARCHIVAL VOLUME
//*
//STEP3    EXEC PGM=IDCAMS
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   DSN=&&IDCAMS,DISP=(OLD,DELETE)


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)           € Geisinger System Services 1990

