Listing the active LPA queue

Just before the program manager tries to locate a module in the
pageable LPA it will look in the active LPA queue - these
modules can be found in a chain of Contents Directory Entries
(CDEs). Thus a module located in both the pageable LPA and the
active LPA will always be found in the active LPA. Usually, the
modules in the active LPA and the pageable LPA are the same,
because modules from the pageable LPA are added to the CDE
chain whenever that module is activated. But during NIP, the first
modules added to the CDE chain are modules specified in the
SYS1.PARMLIB members IEALPAxx, IEAFIXxx, and
IEALODxx. These modules may be different.

The listing produced by the LISTLPA parameter of program
AMBLIST will provide the location of a module in the pageable
LPA, which will never be used if the module also exists in the
active LPA!

I wrote the program CDELIST in order to list the active LPA
modules. The layout of the output is similar to that of the
LISTLPA output and will be written to SYSPRINT. The kind of
listing can be specified via PARM information in the EXEC
statement. You can use the following parameters:

o      PRINT=NOSORT - This is also the default when no PARM
      is specified. It is the order in which the CDEs are built (first
      module on this listing is the most recent module from the
      pageable LPA that has been activated).

o      PRINT=EP - Listing of CDEs sorted by entry point
(location).

o      PRINT=NAME - Listing of CDEs sorted by module name.

o      PRINT=ALL - This is the same as specifying
      PRINT=NOSORT,EP,NAME.

Example of JCL

//jobname (acct),'programmer name',CLASS=A,MSGCLASS=X
//STEP1    EXEC PGM=CDELIST,PARM='PRINT=EP,NAME'
//STEPLIB  DD   DSN=your.loadlib,DISP=SHR
//SYSPRINT DD   SYSOUT=A

CDELIST SOURCE CODE

         TITLE 'CDELIST: Display contents directory entries (CDE)'
*----------------------------------------------------------------------
*   THIS PROGRAM SHOWS ALL LOAD MODULES IN THE CDE
*   This program lists all load modules that are loaded into the job
*   pack area, fixed LPA, modified LPA, or activated in the pageable
*   LPA.
*----------------------------------------------------------------------
CDELIST  CSECT
         STM   R14,R12,12(R13)
         BALR  R12,0
         USING *,R12
         ST    R13,SAVELIST+4
         LR    R2,R13
         LA    R13,SAVELIST
         ST    R13,8(R2)
LISTMAIN EQU   *
         L     R10,0(R1)           R10: Addr of PARM field
         XR    R11,R11             Reset R11
         ICM   R11,B'0011',0(R10)  R11: Length of PARM field
         LTR   R11,R11             Did user specify a PARM field ?
         BZ    NOSORT              No, print only unsorted CDE list
* Validate PARM field
GETPARM  EQU   *
         LA    R10,2(R10)          Skip length indicator
         CLC   0(6,R10),=C'PRINT=' PARM starting with "PRINT=" ?
         BNE   BADPARM1            No, print error message (RC=08)
         LA    R10,6(R10)          Skip "PRINT="
         SH    R11,=H'6'           Bytes remaining after skip
         LA    R6,TABKEYW          R6: Addr valid keyword table
LOOPKEYW EQU   *
         XR    R8,R8               Reset R8
         ICM   R8,B'0001',0(R6)    R8: Length of keyword
         LTR   R8,R8               End of keyword table reached ?
         BZ    BADPARM2            Yes, keyword unknown (RC=04)
         LA    R9,1(R6)            R9: Addr of keyword
         EX    R8,CLCPARM
         BE    FOUNDIT
         LA    R6,8(R6)            Go to next keyword in table
         B     LOOPKEYW            Examine next keyword
FOUNDIT  EQU   *
         OC    PRTFLAG(1),7(R6)    Set desired list bit to '1'
         SR    R11,R8              Subtract length keyword
         SH    R11,=H'2'           from bytes remaining in PARM field
         LTR   R11,R11             Are there more keywords ?
         BNP   GETCDES             No, start filling TABLE with CDEs
         AR    R10,R8              Skip keyword
         AH    R10,=H'2'           and separator
         LA    R6,TABKEYW
         B     LOOPKEYW            Examine next keyword
CLCPARM  CLC   0(0,10),0(9)
NOSORT   EQU   *
         OI    PRTFLAG,F#NOSORT    Print only unsorted
GETCDES  EQU   *
         LA    R2,0                Set return code
         GETMAIN RU,LV=TABLELEN
         LR    R11,R1
         USING TABLE,R11           Establish addressability
         XR    R5,R5               Reset R5
         ST    R5,#ENTRIES         #ENTRIES = zero
         LA    R5,TABLE
         ST    R5,TABPTR           Set pointer on start of TABLE
         LA    R6,TABLELEN/25      R6: maximum #entries in TABLE
         L     R3,CVTPTR           Get the CVT pointer
         L     R3,CVTQLPAQ-CVT(R3) Ptr most recent entry on CDE queue
         USING CDENTRY,R3          Addressability CDE
         L     R3,CDCHAIN          Skip first CDE (not a module)
         LA    R3,0(,R3)           Remove high-order bit
         USING XTLST,R4            Addressability extent list addr
CDELOOP  EQU   *
         MVC   TABNAME(8),CDNAME
         L     R5,CDENTPT
         STCM  R5,B'0111',TABEP
         L     R4,CDXLMJP
         TM    CDATTR,CDMIN        Is this a minor CDE ?
         BO    MINOR               Yes
MAJOR    EQU   *
         L     R5,XTLMSBLA
         STCM  R5,B'0111',TABLEN
         L     R5,XTLMSBAA
         STCM  R5,B'0111',TABLOC
         MVC   TABCDE(8),BLANKS8
         B     NEXTCDE             Get next CDE
MINOR    EQU   *
         MVC   TABLEN(3),BLANKS8
         MVC   TABLOC(3),BLANKS8
         DROP  R4
         USING CDENTRY,R4          Addressability CDE
         MVC   TABCDE(8),CDNAME
         DROP  R4
         USING XTLST,R4            Addressability extent list addr
NEXTCDE  EQU   *
         L     R5,TABPTR
         MVC   0(25,R5),TABENTRY   Put TABENTRY in TABLE
         LA    R5,25(,R5)          Set pointer to next TABLE entry
         ST    R5,TABPTR
         L     R5,#ENTRIES
         LA    R5,1(,R5)           Add 1 to #ENTRIES
         CR    R5,R6               Maximum # of entries reached ?
         BE    TABFULL             Yes, print error message (RC=02)
         ST    R5,#ENTRIES
         L     R3,CDCHAIN          Get the next CDE entry
         LA    R3,0(,R3)           Remove high-order bit
         LTR   R3,R3               Last CDE ?
         BNZ   CDELOOP             No, get next CDE
UNSORTED EQU   *
         TM    PRTFLAG,F#NOSORT    User asks for unsorted CDEs ?
         BZ    SORTNAME            No, try next list
         LA    R1,=A(0,#ENTRIES,HEADER1)
         ST    R11,0(R1)
         L     R15,=V(CDEPRNT)
         BALR  R14,R15
SORTNAME EQU   *
         TM    PRTFLAG,F#NAME      User asks for CDEs sorted by NAME ?
         BZ    SORTEP              No, try next list
         LA    R1,=A(0,#ENTRIES,25,0,8)  Sort by module name
         ST    R11,0(R1)
         L     R15,=V(CDESORT)
         BALR  R14,R15
PRTNAME  EQU   *
         LA    R1,=A(0,#ENTRIES,HEADER2)
         ST    R11,0(R1)
         L     R15,=V(CDEPRNT)
         BALR  R14,R15
SORTEP   EQU   *
         TM    PRTFLAG,F#EP        User asks for CDEs sorted by EP ?
         BZ    RELSTRGE            No, release storage & leave program
         LA    R1,=A(0,#ENTRIES,25,16,3)  Sort by EP addr
         ST    R11,0(R1)
         L     R15,=V(CDESORT)
         BALR  R14,R15
PRTEP    EQU   *
         LA    R1,=A(0,#ENTRIES,HEADER3)
         ST    R11,0(R1)
         L     R15,=V(CDEPRNT)
         BALR  R14,R15
RELSTRGE EQU   *
         FREEMAIN RU,A=(R11),LV=TABLELEN
EXIT     EQU   *
         L     R13,SAVELIST+4
         ST    R2,16(R13)          Change return code
         LM    R14,R12,12(R13)     Reload caller's registers
         BR    R14                 Return to caller
BADPARM1 EQU   *
         LA    R1,=A(8,0,ERRMSG1)  Parameters for CDEPRNT
         LA    R2,8                Set return code
         B     PRINTMSG
BADPARM2 EQU   *
         LA    R1,=A(8,0,ERRMSG2)  Parameters for CDEPRNT
         LA    R2,4                Set return code
PRINTMSG EQU   *
         L     R15,=V(CDEPRNT)
         BALR  R14,R15
         B     EXIT                Release storage & leave program
TABFULL  EQU   *
         LA    R1,=A(8,0,ERRMSG3)  Parameters for CDEPRNT
         LA    R2,2                Set return code
         L     R15,=V(CDEPRNT)
         BALR  R14,R15
         B     RELSTRGE            Release storage & leave program
         TITLE   'CDELIST: Data area'
ERRMSG1  DC    CL80'1PARAMETER MUST START WITH "PRINT="'
ERRMSG2  DC    CL80'1INVALID KEYWORD SPECIFIED, VALID KEYWORDS ARE: EP,-
               NAME, NOSORT, ALL'
ERRMSG3  DC    CL80'1TABLE IS FULL. THERE ARE TOO MANY CDE ENTRIES'
#ENTRIES DS    F
TABPTR   DS    F
PRTFLAG  DS    B
F#ALL    EQU   B'11100000'      Print all lists
F#NOSORT EQU   B'10000000'      Print CDE entries unsorted
F#NAME   EQU   B'01000000'      Print CDE entries sorted by NAME
F#EP     EQU   B'00100000'      Print CDE entries sorted by EP address
TABKEYW  EQU   *                Table with valid keywords in PARM field
         DC    X'02',C'ALL   ',AL1(F#ALL)
         DC    X'05',C'NOSORT',AL1(F#NOSORT)
         DC    X'03',C'NAME  ',AL1(F#NAME)
         DC    X'01',C'EP    ',AL1(F#EP)
         DC    X'00',C'******',AL1(0)      End of TABKEYW
TABENTRY DS    0CL25
TABNAME  DS    CL8
TABCDE   DS    CL8
TABEP    DS    CL3
TABLOC   DS    CL3
TABLEN   DS    CL3
         LTORG
HEADER1  DC    CL80'1          CDELIST - MOST RECENT ENTRY FIRST'
HEADER2  DC    CL80'1          CDELIST - ALPHABETICALLY   BY NAME   '
HEADER3  DC    CL80'1          CDELIST - NUMERICALLY BY   LOCATION'
BLANKS8  DC    CL8' '
SAVELIST DS    18F                 Save registers
         DS    7500C               Space for 300 entries
TABLELEN EQU   *-TABLE
         CVT   DSECT=YES
         IHACDE
         IHAXTLST
*----------------------------------------------------------------------
         TITLE 'CDESORT: Sort table routine'
CDESORT  CSECT
*        Straight insertion sort subroutine CDESORT(TBL,N,L,KP,KL)
*        where TBL = Address of first entry in TABLE to be sorted
*        N = Address of number of entries in the TABLE
*        L = Length of each entry (number of bytes)
*        KP = Relative position of entry key (0=1st position)
*        KL = Length of key   (number of bytes)
TBL      EQU   1        REG 1 = Addr of 1st TABLE entry
N        EQU   2        REG 2 (temporary) = # entries in TABLE
NADDR    EQU   2        REG 2 = Addr of last TABLE entry
L        EQU   3        REG 3 = L, Length of each entry
KP       EQU   4        REG 4 = KP, Relative byte position of key
KLX      EQU   5        REG 5 = KL-1, One less than key length
KL       EQU   KLX
LX       EQU   6        REG 6 = L-1, One less than entry length
RI       EQU   7        REG 7 = Addr of record 'I'
KI       EQU   8        REG 8 = Addr of key in record 'I'
RI1      EQU   9        REG 9 = Addr of record 'I+1'
RJ       EQU   10       REG 10 = Addr of record 'J'
KJ       EQU   11       REG 11 = Addr of key in 'RECDJ' temp area
XEVEN    EQU   10       REG 10 = (temp) EVEN# reg for computing (N-1)*L
XODD     EQU   11       REG 11 = (temp) ODD#      ,,          ,,
         STM   R14,R12,12(R13)
         BALR  R12,0
         USING *,R12
         ST    R13,SAVESORT+4
         LA    R13,SAVESORT
         LM    TBL,KL,0(1)       Get PARMS in registers 1 thru 5
         L     N,0(N)
         C     N,=F'1'
         BNH   EXITSORT          if 'N' not greater than 1, don't sort
         LR    LX,L              LX = L-1 for 'EX' instruction
         SH    LX,=H'1'
         LR    XODD,N
         SH    XODD,=H'1'        Compute (N-1)*L in reg 'XODD'
         MR    XEVEN,L           NADDR = (N-1)*L + addr of TABLE
         LA    NADDR,0(XODD,TBL) = Addr of last TABLE entry
         SH    KLX,=H'1'         KLX = KL-1 for 'EX' instruction
         LA    RJ,0(L,TBL)       RJ = Addr of Jth entry
*        Main loop for comparing records and moving them when necessary
MAINLOOP EX    LX,MOVEJ          Move Jth record to temp area
         LA    KJ,RECDJ(KP)      KJ = Addr of key in temp area
         LR    RI,RJ             RI = Addr of Ith record
         SR    RI,L              Initially, I = J-1
COMPLOOP LA    RI1,0(L,RI)       RI1 = Addr of (I+1)st record
         LA    KI,0(KP,RI)       KI  = Addr of key in Ith record
         EX    KLX,COMPARE       Is Jth record > or = Ith record ?
         BNL   COMPYES           If so, branch to 'COMPYES'
         EX    LX,MOVEI          Else, move Ith record to (I+1)st
         SR    RI,L              Back up to (I-1)st record
         CR    RI,TBL            Is this the ZEROth record ?
         BNL   COMPLOOP          If not, repeat the compare/move loop
         LR    RI1,TBL           If I=0, set RI1 = Addr of 1st   entry
*  If Jth record greater than Ith, or if 'I' has been reduced to zero
COMPYES  EX    LX,MOVE           Move Jth record from temp to (I+1)th
         AR    RJ,L              Increment to (J+1)th record
         CR    RJ,NADDR          Was Jth record the Nth (last) record?
         BNH   MAINLOOP          If not, go do next pass with J=J+1
EXITSORT L     R13,SAVESORT+4
         LM    R14,R12,12(R13)
         BR    R14               Return to caller
MOVEI    MVC   0(0,RI1),0(RI)    Move Ith record to (I+1)th
MOVEJ    MVC   RECDJ(0),0(RJ)    Move Jth record to temp area
MOVE     MVC   0(0,RI1),RECDJ    Move Jth record from temp to (I+1)th
COMPARE  CLC   0(0,KJ),0(KI)     Compare Jth recd(in temp area) to Ith
         LTORG
         TITLE 'CDESORT: Data area'
RECDJ    DS    CL256             Temp space for max length Jth record
SAVESORT DS    18F               Register save area
*----------------------------------------------------------------------
         TITLE 'CDEPRNT: Format and print CDE table entries'
CDEPRNT  CSECT
*        Print CDE entries with subroutine CDEPRNT(R2,R3,R4)
*        where R2 = Address of first entry in TABLE to be printed
*        R3 = Address of number of entries in the TABLE
*        R4 = Address of header
         STM   R14,R12,12(R13)
         BALR  R12,0
         USING *,R12
         ST    R13,SAVEPRNT+4
         LA    R13,SAVEPRNT
         LM    R2,R4,0(1)        Get PARMS in registers 2 thru 4
         L     R3,0(R3)          R3: Number of entries
PRNTMAIN EQU   *
         OPEN  (SYSPRINT,OUTPUT)
PRNTHEAD EQU   *
         MVI   PRNTLINE,C' '
         MVC   PRNTLINE+1(L'PRNTLINE-1),PRNTLINE
         MVC   PRNTLINE(80),0(R4)
         CH    R2,=H'8'      Error indication instead of address TABLE?
         BE    EXITPRNT      Yes, print only the error message
         PUT   SYSPRINT,PRNTLINE
         MVC   PRNTLINE(114),HEADER
         PUT   SYSPRINT,PRNTLINE
         LA    R5,55         #lines to be printed per page
PRNTLOOP EQU   *
         MVI   PRNTLINE,C' '
         MVC   PRNTLINE+1(L'PRNTLINE-1),PRNTLINE
         MVC   PRNTENT(25),0(R2)
         BAL   R14,SUBFORMT      Format PLINE
         MVC   PRNTLINE+1(47),PLINE
         BCTR  R3,0
         LTR   R3,R3             Is this the last entry ?
         BZ    EXITPRNT          Yes, print it and leave
         LA    R2,25(,R2)        Get next entry
         MVC   PRNTENT(25),0(R2)
         BAL   R14,SUBFORMT      Format PLINE
         MVC   PRNTLINE+62(47),PLINE
         BCTR  R3,0
         LTR   R3,R3             Is this the last entry ?
         BZ    EXITPRNT          Yes, print it and leave
         PUT   SYSPRINT,PRNTLINE
         LA    R2,25(,R2)        Get next entry
         BCTR  R5,0              R5 = R5 - 1
         LTR   R5,R5             55 lines printed ?
         BZ    PRNTHEAD          Yes, newpage
         B     PRNTLOOP          Repeat till last entry
EXITPRNT EQU   *
         PUT   SYSPRINT,PRNTLINE
         CLOSE SYSPRINT
         L     R13,SAVEPRNT+4
         LM    R14,R12,12(R13)
         BR    R14               Return to   caller
         TITLE 'CDEPRNT: Subroutines'
*----------------------------------------------------------------------
*  S U B R O U T I N E:   Convert   HEX to EBCDIC code
*----------------------------------------------------------------------
SUBX2E   EQU   *
         LA    R9,EBCDIC         R9  = Addr of EBCDIC code table
         LA    R10,WORK8         R10 = Addr of first result byte
         L     R11,=F'8'         R11 = Loop control counter
X2ELOOP  XR    R6,R6             R6 is cleared, then next HEX
         SLDL  R6,4              digit is shifted into it, and
         LA    R8,0(R6,R9)       is used to compute ADDR of
         MVC   0(1,R10),0(R8)    corresponding EBCDIC code.
         LA    R10,1(R10)        Adjust ADDR to next result byte
         BCT   R11,X2ELOOP       Repeat till eight digits done
         BR    R14
EBCDIC   DC    C'0123456789ABCDEF'
WORK8    DS    CL8
*----------------------------------------------------------------------
*  S U B R O U T I N E:   Format CDE to be printed
*----------------------------------------------------------------------
         DS    F
SUBFORMT EQU   *
         ST    R14,SUBFORMT-4    Save return address
         MVC   PNAME(8),PRNTNAME
         MVC   PCDE(8),PRNTCDE
         XR    R7,R7
         ICM   R7,B'0111',PRNTEP
         BAL   R14,SUBX2E
         MVC   PEP(6),WORK8+2
         CLC   PRNTLOC,=C'   '
         BNE   CONVLOC
         MVC   PLOC(6),BLANKS6
         B     CHECKLEN
CONVLOC  EQU   *
         XR    R7,R7
         ICM   R7,B'0111',PRNTLOC
         BAL   R14,SUBX2E
         MVC   PLOC(6),WORK8+2
CHECKLEN EQU   *
         CLC   PRNTLEN,=C'   '
         BNE   CONVLEN
         MVC   PLEN(6),BLANKS6
         B     EXITFORM
CONVLEN  EQU   *
         XR    R7,R7
         ICM   R7,B'0111',PRNTLEN
         BAL   R14,SUBX2E
         MVC   PLEN(6),WORK8+2
EXITFORM EQU   *
         L     R14,SUBFORMT-4    GET  RETURN ADDRESS
         BR    R14
*----------------------------------------------------------------------
         TITLE 'CDEPRNT: Data area'
PLINE    DS    0CL47
PNAME    DS    CL8
         DC    C' '
PLOC     DS    CL6
         DC    CL4' '
PLEN     DS    CL6
         DC    CL4' '
PEP      DS    CL6
         DC    CL4' '
PCDE     DS    CL8
SYSPRINT DCB   DDNAME=SYSPRINT,BLKSIZE=1330,RECFM=FBA,LRECL=133,       X
               DSORG=PS,MACRF=(PM)
HEADER   DC    C'-NAME     LOCATION  LENGTH    EP ADDR  MAJOR CDE NAME'
         DC    CL8' '
         DC    C' NAME     LOCATION  LENGTH    EP ADDR  MAJOR CDE NAME'
BLANKS6  DC    CL6' '
PRNTENT  DS    0CL25
PRNTNAME DS    CL8
PRNTCDE  DS    CL8
PRNTEP   DS    CL3
PRNTLOC  DS    CL3
PRNTLEN  DS    CL3
PRNTLINE DS    CL133
         LTORG
SAVEPRNT DS    18F               Register save area
         END


Jim de Vries
Systems Programmer (The Netherlands)                                   c Xephon

