Dataset contention revisited


INTRODUCTION

Most installations have a TSO command processor - frequently
called WHOHAS - to display the allocations of a dataset by
job. I am sure you are familiar with such a TSO command
processor and many of you have even coded your own
versions.

I myself coded one some time ago, but it did not take me long
to realise that I needed another command processor. WHOHAS
can be useful and it is still needed, but it needs another
command processor to complement it. I called the new
command processor, WHOBLOCK. The syntax is:

      WHOBLOCK jobname

As we know, a batch job or an STC job that needs to use a
dataset must wait for the dataset if other jobs (including TSO
jobs) have been using the dataset and if any of these jobs
(including the first job) need the dataset exclusively.

When this happens to our job, we would want to know which
jobs and datasets are involved. In the first place, we would like
to have a way of telling whether a job is waiting for any dataset
without browsing SYSLOG. We cannot use WHOHAS in this
case because it requires us to know the datasets involved; and
even if we know the datasets involved, we have to key in their
names one by one to get the whole picture.

Like WHOHAS, WHOBLOCK uses the GQSCAN macro to
get the RIBs. Before the system detects that a job is awaiting
some datasets, the ENQ or RESERVE macro has already been
issued and the RIBs for these datasets are available through
GQSCAN. In fact, there is a flag called RIBESFLG in RIBE
(part of the RIB), whose first bit indicates whether a job is
currently waiting for or owning a dataset. By scanning the
RIBs, we can list out any datasets that are being waited for by
a job.

A sample listing is shown in Figure 1.

In this example, IS2ABC1 is awaiting the two datasets shown,
which are being used by the submitter's TSO session and job
IS2DEF1, respectively.


WHOBLOCK SOURCE CODE

         TITLE 'WHOBLOCK'
*---------------------------------------------------------------------
*OVERVIEW:
*  The program uses GQSCAN to get the RIB (Resource Infor Block).
*  The format of the RIB:
*           +=========================================================+
*  RIB (40) |                                                         |
*           +---------------------------------------------------------+
*       20  | nribe(4): No of RIBE                                    |
*           +---------------------------------------------------------+
*       28  | vlen(2): RIBVAR len | ..(1) | rnmln(1): resour name len |
*           +---------------------------------------------------------+
*       32  | qname(8): QNAME; eg: SYSDSN, SPFEDIT                    |
*           +=========================================================+
*  RIBvar   | rname:    Resource name (Its length is given in vlen;   |
*           |           Actual length used given in rnmln)            |
*           +=========================================================+
*  RIBel(36)| ejbnm(8): Job name                                      |
*           +---------------------------------------------------------+
*        8  | esysn(8): system name                                   |
*           +---------------------------------------------------------+
*       30  | erflg(1): etype (x'80') means SHARED                    |
*           +---------------------------------------------------------+
*       32  | esflg(1): estat (x'80') means job not awaiting dataset  |
*           +=========================================================+
*  RIBe2(36)| ejbnm(8): Job name                                      |
*           | ...                                                     |
*  RIBen(36)| ejbnm(8): Job name; n is given in nribe                 |
*           +=========================================================+
*---------------------------------------------------------------------
WHOBLOCK CSECT
         SAVE  (14,12)
         LR    12,15            SET BASE ADDRESS
         USING WHOBLOCK,12      USE R12 AS BASE REG
         LR    3,1              SAVE ADDR OF CPPL
         GETMAIN R,LV=WORKLEN   GET WORKAREA
         ST    13,4(1)
         ST    1,8(13)
         LR    13,1
         XR    15,15
         USING WORKAREA,13
GETJOBID L     3,0(3)       GET THE PARM FROM COMMAND BUFFER
         L     10,0(3)      GET LENGTH OF
         SRL   10,16          COMMAND BUFFER
         LH    8,2(3)       GET OFFSET TO COMMAND PARM
         SR    10,8         GET LENGTH OF
         SH    10,=H'4'       PARM AND KEEP IT IN R10
         BZ    FREE2        EXIT - NO PARM SPECIFIED
         LR    11,10        STORE THE LENGTH OF THE PARM IN R11 ALSO
         LA    9,4(3)
         AR    9,8          STORE THE ADDR OF THE PARM IN R8
         LR    8,9            AND R9
CAPSON   CLI   0(8),X'81'   PARM MIGHT BE IN LOWER CASE -
         BL    NEXTCHAR       TURN
         CLI   0(8),X'A9'       CAPS
         BH    NEXTCHAR           ON
         OI    0(8),X'40'
NEXTCHAR LA    8,1(8)
         BCT   10,CAPSON
CLRSCR   TPUT   MSG,MSGLEN,FULLSCR
PRTJOB   BCTR  11,0            SUBTRACT 1 FROM PARM LENGTH FOR EX INST
         EX    11,MOVEJOB      MOVE JOB NAME TO MSGAREA
         TPUT  JOBMSG,14       DISPLAY THE JOB NAME ENTERED AS PARM
         TPUT  BLANK,1
DSPLHEAD TPUT  HEAD1,HEAL1LEN  DISPLAY HEADINGS
         TPUT  HEAD2,HEAD2LEN
         TPUT  BLANK,1
VIRSIZE  EQU   592000          LENGTH = 296 * NUMBER OF RESOURCES
GETSTORG GETMAIN R,LV=VIRSIZE  GETMAIN STORAGE FOR STORING RIBS
*----------------------------------------------------------------------
* 1. EACH RIB TAKES ABOUT 296 BYTES; ASSUME THAT THE NUMBER OF
*    RESOURCES USED IN THE SYSTEM AT ANY TIME IS LESS THAN 2000,
*    SIZE OF STORAGE NEEDED = 296 * 2000 = 592,000
* 2. IF THE STORAGE PROVIDED IS NOT ENOUGH, GQSCAN WILL GIVE RET CODE 8
*----------------------------------------------------------------------
         LR    2,1
         ST    2,MAINADDR
GETRIBS  GQSCAN AREA=((2),VIRSIZE),SCOPE=ALL
         LTR   15,15           CHECK FOR ERROR
         BNZ   DSPLERR
         USING RIB,2           R2 POINTS TO RIB
INIT     LR    5,1             R1 STORES THE NO OF RIBS
         LR    3,0             STORE THE LENGTH
         SRL   3,16              OF RIB
         STH   3,RIBLENG           IN RIBLENG
         LR    3,0             STORE THE LENGTH
         SLL   3,16              OF
         SRL   3,16                RIBE
         STH   3,RIBELENG            IN RIBELENG
         LA    9,RIBAOVER      STORE END ADDRESS OF RIBAREA
         ST    9,RIBAEND         IN RIBAEND
         LA    9,0             USE R9 AS A COUNTER FOR THE NO OF DSNS
*                              AWAITED BY THE JOB
SCANRIB  EQU   *
*----------------------------------------------------------------------
*    SCAN THROUGH A RIB AND EXTRACT RESOURCE NAME AND QNAME FROM IT
*----------------------------------------------------------------------
         LA    11,RIBAREA
         LR    7,2
         AH    7,RIBLENG
         LR    6,7
         USING RIBVAR,6         R6 POINTS TO RIBE
         XR    8,8
         IC    8,RIBRNMLN       STORE LENGTH OF RESOURCE NAME IN R8
         BCTR  8,0              SUBTRACT 1 FOR EX INST
         EX    8,MOVEDSN        MOVE RESOURCE NAME AND
         MVC   QNAME(8),RIBQNAME  QNAME IN TEMP WORK AREA
         AH    7,RIBVLEN
         MVC   RIBVLENG(2),RIBVLEN
         USING RIBE,7           R7 POINTS TO RIBE
         L     10,RIBNRIBE      R10 STORES THE NO OF RIBES IN A RIB
         LA    4,0              USE R4 TO COUNT THE NUMBER OF RIBES
*                                 SCANNED SO FAR
SCANRIBE EQU   *
*----------------------------------------------------------------------
*    SCAN THROUGH A RIBE AND EXTRACT JOB NAME & REQUEST TYPE
*----------------------------------------------------------------------
         MVC   JOBID(8),RIBEJBNM  MOVE JOBNAME INTO TEMP WORK AREA
         LA    4,1(4)
         TM    RIBERFLG,RIBETYPE
         BZ    EXCLUSIV
SHARED   MVC   DIS(3),=C'YES'     MOVE REQUEST TYPE
         B     MOVEMSG              INTO
EXCLUSIV MVC   DISP(3),=C'NO '        TEMP WORK AREA
*----------------------------------------------------------------------
MOVEMSG  MVC   0(79,11),MSGLINE   MOVE DATA IN TEMP AREA TO RIBAREA
*----------------------------------------------------------------------
* RIBAREA CONTAINS ALLOCATION DATA FOR A RESOURCE AT JOB LEVEL. FOR
*   EACH RIBE, RIBAREA HAS A 79-BYTE AREA TO KEEP RESOURCE NAME, JOB
*   NAME, QNAME AND REQUEST TYPE.
* ASSUME THAT AT ANY TIME, A RESOURCE IS NEEDED BY AT MOST N JOBS OR
*   USERS. THEN THE SIZE OF RIBAREA = N * 79
* IF RIBAREA IS NOT BIG ENOUGH, THE PROGRAM WILL COMPLAIN.
*----------------------------------------------------------------------
&N       SETA  50                 SET N = 50 ;
* INCREASE THE VALUE OF N IF IT IS TOO SMALL
&RIBALEN SETA  &N*79              LENGTH OF RIBAREA = N * 79
         LA    11,79(11)          POINT R11 TO NEXT 79-BYTE AREA IN
*                                   RIBAREA
         C     11,RIBAEND         CHECK WHETHER RIBAREA IS BIG ENOUGH
         BNL   DSPLERR2             TO HOLD THE ALLOCATION DATA
CHKWAIT  LA    8,7                SET LENGTH OF COMPARISON
         EX    8,COMPJOB          JOB IN RIBE = JOB SPECIFIED AS PARM?
         BNE   CHKEND             NO - DO NOT PRINT RIBAREA
         TM    RIBESFLG,RIBESTAT  IS THE JOB AWAITING DATASET?
         BO    CHKEND             NO - DO NOT PRINT RIBAREA
         LA    11,RIBAREA         YES - START PRINTING
PRTALLOC TPUT  0(11),79             THE ALLOCATIONS
         LA    11,79(11)              FROM RIBAREA
         BCT   4,PRTALLOC
         TPUT  LINE,LINELEN
         LA    9,1(9)             INCREASE NUMBER OF DATASETS AWAITED
CHKEND   BCT   10,NXTRIBE         ANY MORE RIBE? YES - PROCESS NXT RIBE
         BCT   5,NXTRIB           ANY MORE RIB? YES - PROCESS NEXT RIB
         B     CHKBLOCK           NO MORE RIB - EXIT
NXTRIBE  AH    7,RIBELENG         GET NEXT RIBE
         AH    2,RIBELENG
         B     SCANRIBE
NXTRIB   AH    2,RIBLENG          GET NEXT RIB
         AH    2,RIBVLENG
         AH    2,RIBELENG
CLRMSG   MVI   DSN,C' '           CLEAR WORK AREA BEFORE PROCEEDING
         MVC   DSN+1(78),DSN
         B     SCANRIB
CHKBLOCK LTR   9,9                CHECK NUMBER OF DATASETS AWAITED
         BZ    DSPLMSG2           ZERO - INFORM USER
         B     FREE1
DSPLMSG2 TPUT  MSG2,MSG2LEN
         B     FREE1
DSPLERR  TPUT  MSG3,MSG3LEN       DISPLAY ERROR MSG, IF NEEDED
         B     FREE1
DSPLERR2 TPUT  MSG4,MSG4LEN       DISPLAY ERROR MSG, IF NEEDED
FREE1    EQU   *                  LET'S FINISH OFF
         L     1,MAINADDR
         FREEMAIN R,LV=VIRSIZE,A=(1)
FREE2    LR    1,13
         L     13,4(13)
         FREEMAIN R,LV=WORKLEN,A=(1)
         RETURN (14,12),RC=(15)
MOVEJOB  MVC   JOBNAME(0),0(9)
MOVEDSN  MVC   DSN(0),RIBRNAME
COMPJOB  CLC   JOBNAME(0),RIBEJBNM
BLANK    DC    C' '
HEAD1    EQU   *
         DC    CL44'DATASET AWAITED'
         DC    CL10'MEMBER'
         DC    CL10'JOB NAME'
         DC    CL10' QNAME  '
         DC    CL5'SHR '
*        DC    CL7'REMARKS'
HEAD1LEN EQU   *-HEAD1
HEAD2    EQU   *
         DC    CL44'=========================================='
         DC    CL10'========'
         DC    CL10'========'
         DC    CL10'========'
         DC    CL5'===='
HEAD2LEN EQU   *-HEAD2
LINE     EQU   *
         DC    CL44'------------------------------------------'
         DC    CL10'--------'
         DC    CL10'--------'
         DC    CL10'--------'
         DC    CL5'----'
LINELEN  EQU   *-LINE
MAINADDR DS    F
MSGLINE  EQU   *
DSN      DS    CL54' '
JOBID    DS    CL10' '
QNAME    DS    CL10' '
DISP     DC    CL5' '
JOBMSG   DC    C'JOB = '
JOBNAME  DC    CL8' '
MSG      DC    X'27F57A'
MSGLEN   EQU   *-MSG
MSG2     DC    C'+++ THE JOB IS NOT AWAITING ANY DATA SET +++'
MSG2LEN  EQU   *-MSG2
MSG3     DC    C'+++ GQSCAN FAILED +++'
MSG3LEN  EQU   *-MSG3
MSG4     DC    C'+++ RIBAREA IS TOO SMALL - PLS ENLARGE IT +++'
MSG4LEN  EQU   *-MSG4
WORKAREA DSECT
SAVEAREA DS    18F
RIBLENG  DS    H
RIBVLENG DS    H
RIBELENG DS    H
RIBAREA  DS    CL&RIBALEN
RIBAOVER EQU   *
RIBAEND  DS    A
WORKLEN  EQU   *-WORKAREA
         CVT DSECT=YES
         ISGRIB
         END   WHOBLOCK


Ho Piang Kim
Systems Programmer
Chung Khiaw Bank (Malaysia)                               c Xephon 1992

