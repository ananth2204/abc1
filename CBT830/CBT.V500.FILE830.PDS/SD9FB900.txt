Another dynamic GDDM application

This article continues the theme described in Dynamic graphic
display of critical resources (MVS Update, March 1992). It
describes a GDDM application that can be used to monitor
several resources of an MVS system and can be useful in
learning how to use basic GDDM calls from Assembler
language programs. The application is composed of two
programs: SURVEYOR, which performs the GDDM functions
and handles screen I/O, and SURVEY01, which collects data
from MVS control blocks.

Four speedometers are drawn on the right-hand side of the
screen - these are semi-circles divided with different colours to
represent graphically:

o      Percentage CPU busy
o      UIC count
o      Page-in rate
o      Number of expanded storage frames in use.

The number of page-ins is calculated by capturing the value
from RSM and subtracting the value captured in the preceding
cycle. The interval between collections is three seconds so the
value is divided by three to have the page-ins per second.
Values about expanded storage in use are also captured from
RSM. UIC and CPU are captured from the RCT. Note that the
RCT is not documented in the MVS/ESA 4.2 Data Areas
manuals, so don't throw out your old manuals.

On the left of the screen a rectangle with a graph showing the
recent CPU percentage utilization trend is displayed.

This simple application produces a great effect in your
computer room and is also a useful monitor. You can easily
modify it to collect your favourite data from MVS control
blocks.

The application has been tested under MVS/ESA 4.2, TSO/E
Version 2, and GDDM 2.3. It runs in the problem state. Do not
code admdefs procopt=fastupd otherwise the screen
is refreshed at every update and you lose the 'cartoon' effect.
Processing can be interrupted by pressing the attention key
(PA1).


SOURCE CODE FOR SURVEYOR

         TITLE 'SURVEYOR - A GRAPHIC MONITOR FOR MVS'
* DRAW A NICE "CRUISE CONTROL PANEL" DISPLAYING SEVERAL        *
* "SPEEDOMETERS" TO HELP YOU DRIVE MVS SYSTEMS.                *
* EXECUTES IN PROBLEM STATE UNDER TSO.                         *
* AMODE 24                                                     *
* RMODE 24                                                     *
* "CRUISER" CLIST TO CALL THE PROGRAM                          *
* PROC 0                                                       *
* CALL 'YOUR.LIB.LOAD(SURVEYOR)'                               *
* EXIT                                                         *
* AUTOUPDATE MODE IS ESTABLISHED AUTOMATICALLY AT START,       *
* INTERVAL IS THREE SECONDS. USE ATTENTION KEY (PA1) TO EXIT.  *
* SEE "PRINCIPLES OF OPERATION" ABOUT CONVERSION TO            *
* FLOATING POINT (GDDM NEEDS IT).                              *
SURVEYOR CSECT
         USING SURVEYOR,R15
         B     STM0001
SAVE0001 DC    18F'0'
BASE0001 DC    A(SAVE0001)
         DC    A(SAVE0001+1*4096)
STM0001  DS    0H
         STM   R14,R12,12(R13)
         LR    R1,R13
         LA    R13,SAVE0001
         ST    R13,8(R1)
         ST    R1,4(R13)
         L     R10,BASE0001
         L     R12,BASE0001+4
         DROP  R15
         USING SAVE0001,R10,R12
         CALL  FSINN,(0),VL              INITIALIZE GDDM
* NOW ESTABLISH AN ATTENTION EXIT SO THAT WE CAN INTERRUPT WITH PA1
         LA    R3,STAXLIST
         STAX  ATTNEXIT,USADDR=SWUPD,OBUF=(OUTBUF,22),MF=(E,(3))
         LTR   R15,R15
         BZ    OKSTAX
         TPUT  ERRMSG2,L'ERRMSG2
         B     FINITO
OKSTAX   DS    0H
         CALL  GSPS,(E1,E1),VL                    SET ASPECT RATIO
         CALL  GSWIN,(W1,W2,W3,W4),VL             DEFINE WINDOW
         CALL  GSCOL,(NEUTRAL),VL                 SET NEUTRAL COLOR
         CALL  ASDFLD,(C1,C1,C1,C1,C80,C2),VL     DEFINE ALPHAN FIELDS
         CALL  ASDFLD,(C3,C3,C1,C1,C11,C2),VL       "       "     "
         CALL  ASDFLD,(C4,C4,C1,C1,C11,C2),VL       "       "     "
         CALL  ASDFLD,(C5,C5,C1,C1,C11,C2),VL       "       "     "
         CALL  ASDFLD,(C7,C7,C1,C1,C22,C2),VL       "       "     "
         CALL  ASDFLD,(C8,C8,C1,C1,C22,C2),VL       "       "     "
REDRAW   DS    0H
         CALL  GSPAT,(C9),VL                      SET THE PATTERN
         CALL  GSCH,(E2,E1),VL
         CALL  GSCB,(E1,E8),VL                    SET CHAR BOX
* NOW PLACE NUMBERS NEAR HALF-CIRCLES (00 50 100 255 ...)
         MVC   LL,=F'1'                           SET LENGTH
         CALL  GSCHAR,(E35,E56,LL,H0),VL          WRITE GRAPH CHAR
         CALL  GSCHAR,(E35,E26,LL,H0),VL            "     "     "
         CALL  GSCHAR,(E103,E56,LL,H0),VL           "     "     "
         CALL  GSCHAR,(E75,E26,LL,H0),VL            "     "     "
         MVC   LL,=F'2'                           SET LENGTH
         CALL  GSCHAR,(E48,E69,LL,H1),VL          WRITE GRAPH CHAR
         MVC   LL,=F'3'
         CALL  GSCHAR,(E63,E56,LL,H4),VL
         CALL  GSCHAR,(E63,E26,LL,H4),VL
         CALL  GSCHAR,(E72,E56,LL,H255),VL
         MVC   LEG1,=C'CPU %'
         MVC   LL,=F'5'                           S
         CALL  GSCHAR,(XXX,YYY,LL,LEG1),VL         A
         MVC   LL,=F'3'                             M
         MVC   LEG1,=C'UIC'                          E
         CALL  GSCHAR,(XX1,YYY,LL,LEG1),VL
         MVC   LL,=F'10'                               S
         MVC   LEG1,=C'PAGEIN/SEC'                      T
         CALL  GSCHAR,(XX2,YY1,LL,LEG1),VL               O
         MVC   LL,=F'11'                                  R
         MVC   LEG1,=C'ESTOR MB   '                        Y
         CALL  GSCHAR,(XX3,YY1,LL,LEG1),VL
         MVC   LEG1,=C'CPU % TREND'
         CALL  GSCHAR,(XX0,YY1,LL,LEG1),VL
* DRAW A RECTANGLE ( FOR CPU % TREND GRAPH)
         CALL  GSMOVE,(XT0,YT0),VL                 SET START POINT
         CALL  GSCOL,(PINK),VL                     SET PINK COLOUR
         CALL  GSPLNE,(COU,XL1,YL1),VL             DRAW LINES
         CALL  GSCOL,(GREEN),VL                    SET GREEN COLOUR
LLINE    DS    0H
         TM    SWUPD,STATIC                        STAX MODIFIED IT ?
         BO    FINITO                              YES, TERMINATE
         TIME  DEC                                 HAVE TIME
         ST    R0,WORK
         OI    WORK+3,X'0F'
         MVC   TITLETIM(9),=X'4021207A20207A2020'
         ED    TITLETIM(9),WORK
         CALL  ASCPUT,(C1,C80,TITLE),VL            WRITE TITLE
         MVC   ENDTIME,STARTIME                    SAVE TIME
         TIME  BIN                                 HAVE TIME
         ST    R0,STARTIME
         S     R0,ENDTIME
         ST    R0,DELAY                            SAVE DIFFERENCE
         CVD   R0,DOUB
         OI    DOUB+7,X'0F'
         UNPK  SECS,DOUB+6(2)
         CALL  SURVEY01,(CPU),VL                   COLLECT MVS DATA
         L     R1,PGI
         S     R1,OLDPGI
         ST    R1,PGICURR
         BAL   R5,CLEA                             DRAW BASIC ARCS
         MVC   OLDCPU,CPU                          SAVE PRECEED.VALUES
         MVC   OLDUIC,UIC                           "      "      "
         MVC   OLDESI,ESINU                         "      "      "
         L     R9,CPU
         CVD   R9,DOUB
         UNPK  TEXT1(3),DOUB+5(3)
         MVZ   TEXT1+2(1),=X'F0'                   PRINT CPU %
         L     R9,UIC
         CVD   R9,DOUB
         UNPK  TEXT2(3),DOUB+5(3)                  PRINT UIC
         MVZ   TEXT2+2(1),=X'F0'
         L     R9,PGICURR                IF PAGEIN = 0...
         C     R9,=F'000'
         BNH   NORES1                       ... BYPASS PROCESSING IT
         XR    R8,R8
         D     R8,C3                     DIVIDE BY 3 BECAUSE SAMPLE IS
*                                        3 SECONDS AND WE WANT PIN RATE
*                                        AT ONE SECOND
         C     R9,=F'100'                NO MORE THAN 100 PAGES/SEC
         BNH   NORES1
         LA    R9,100                    RESET TO 100
NORES1   DS    0H
         ST    R9,PGICURR
         L     R9,PGICURR
         CVD   R9,DOUB
         UNPK  TEXT3(3),DOUB+5(3)                  PRINT PAGEIN
         MVZ   TEXT3+2(1),=X'F0'
         MVC   OLDPGI,PGI
         MVC   OLDPGIC,PGICURR
         CLI   SWFIRST,C'1'                        IF FIRST TIME...
         BNE   BYROUND                             BYPASS DISPLAY...
         L     R9,CPU
         C     R9,=F'100'                          IF CPU > 100...
         BNH   NORES
         LA    R9,100                              ...RESET IT TO 100
NORES    DS    0H
* CALCULATE THE DEGREES TO DRAW THE ARC REPRESENTING CPU % (FREE PART)*
* FORMULA :                                                           *
* (100 - CPU) : X = 100 :180                                          *
* X = DEGREES USED TO DRAW THE ARC                                    *
* 0 DEGREES = 100 % CPU                                               *
* 180 DEGREES = 0 % CPU                                               *
         ST    R9,CPU
         LA    R9,100
         S     R9,CPU
         M     R8,=F'180'
         D     R8,=F'100'
* CONVERT VALUE IN REG9 TO FLOAT AND PLACE RESULT IN REG4
         BAL   R5,CONVERT                R9=INPUT R4=OUTPUT(FLOAT)
         STD   4,GUNK
         CALL  GSMOVE,(E62,E56),VL       GO TO RIGHT POINT
         CALL  GSAREA,(AREA),VL          OPEN AREA
* USE THE VALUE DRAW THE ARC
         CALL  GSARC,(E50,E56,GUNK),VL   DRAW THE ARC
         CALL  GSLT,(BLACK),VL           SET LINE TYPE
         CALL  GSLINE,(E50,E56),VL       DRAW LINE TO CLOSE ARC
         CALL  GSLT,(DEFAULT),VL         SET LINE TYPE
         CALL  GSENDA,(0),VL             CLOSE THE ARC AND FILL IT
* PROCESS TO CALCULATE DEGREES TO DRAW THE ARC IS SIMILAR TO
* THE ONE USED FOR CPU BUT...
* (100 - PGICURR) : X = 100 : 180
         LA    R9,100
         S     R9,PGICURR
         XR    R8,R8
         M     R8,=F'180'
         D     R8,=F'100'
         BAL   R5,CONVERT
         STD   4,GUNK
         CALL  GSMOVE,(E62,E26),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E50,E26,GUNK),VL
         CALL  GSLT,(BLACK),VL
         CALL  GSLINE,(E50,E26),VL
         CALL  GSLT,(DEFAULT),VL
         CALL  GSENDA,(0),VL
*        INSTEAD FOR UIC...
*  UIC : 255 = X : 180
         L     R9,UIC
         M     R8,=F'180'
         D     R8,=F'255'
         BAL   R5,CONVERT
         STD   4,GUNK
         CALL  GSMOVE,(E102,E56),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E90,E56,GUNK),VL
         CALL  GSLT,(BLACK),VL
         CALL  GSLINE,(E90,E56),VL
         CALL  GSLT,(DEFAULT),VL
         CALL  GSENDA,(0),VL
* ... AND ALSO FOR EXPANDED STORAGE ...
         XR    R8,R8
         L     R9,ESTOT
         M     R8,=F'4'
         D     R8,=F'1024'
         ST    R9,ESTOTZ
         CVD   R9,DOUB
         MVC   TEXT4(4),=X'40202120'
         ED    TEXT4(4),DOUB+6
         MVI   TEXT4+4,C'M'                    PRINT THE TOTAL ESTOR
         XR    R8,R8
         L     R9,ESINU
         M     R8,=F'4'
         D     R8,=F'1024'
         ST    R9,ESINUZ
         CVD   R9,DOUB
         MVC   TEXT5(4),=X'40202120'
         ED    TEXT5(4),DOUB+6
         MVI   TEXT5+4,C'M'                    PRINT THE ESTOR IN USE
         L     R9,ESTOTZ
         S     R9,ESINUZ
         XR    R8,R8
         M     R8,=F'180'
*  TOTAL-ESTOR : 180 = USED-ESTOR : X
         C     R9,=F'0'
         BNH   NOESTOR
         D     R8,ESTOTZ
         XR    R8,R8
NOESTOR  DS    0H
         BAL   R5,CONVERT
         STD   4,GUNK
         CALL  GSMOVE,(E102,E26),VL            MOVE TO ...
         CALL  GSAREA,(AREA),VL                OPEN THE AREA
         CALL  GSARC,(E90,E26,GUNK),VL         DRAW THE ARC
         CALL  GSLT,(BLACK),VL                 SET LINE TYPE
         CALL  GSLINE,(E90,E26),VL             DRAW THE LINE
         CALL  GSLT,(DEFAULT),VL               SET LINE TYPE
         CALL  GSENDA,(0),VL                   END AREA
         CALL  ASCPUT,(C3,C11,TEXT1A),VL       WRITE APLHA FIELDS
         CALL  ASCPUT,(C4,C11,TEXT2A),VL        "      "      "
         CALL  ASCPUT,(C5,C11,TEXT3A),VL        "      "      "
         CALL  ASCPUT,(C7,C22,TEXT4A),VL        "      "      "
         CALL  ASCPUT,(C8,C22,TEXT5A),VL        "      "      "
         CALL  GSMOVE,(XT1,YT1),VL            POSITION TO OLD POINT
* NOW CONVERT CPU % TO A GOOD VALUE TO BE REPRESENTED IN THE RECTANGLE
* ON THE LEFT (CPU TREND)
         L     R9,CPU
         M     R8,=F'40'
         D     R8,=F'100'
         BAL   R5,CONVERT
         AE    R4,E30
         STE   R4,YT1
         LE    R2,XT1
         AE    R2,EFR
         STE   R2,XT1
* NOW DRAW THE LINES ABOUT CPU % TREND
         CALL  GSCOL,(GREEN),VL                SET GREEN COLOUR
         CALL  GSLINE,(XT1,YT1),VL             DRAW THE LINE
         CALL  GSLINE,(XT1,E30),VL              "    "    "  TO BOTTOM
         CALL  FSFRCE,(0),VL                   DISPLAY ON SCREEN
BYROUND  DS    0H
         STIMER WAIT,BINTVL=BINTVL             WAIT THREE SECONDS
         AP    COUNT,=P'1'
         CP    COUNT,=P'082'                   GRAPH FILLED ?
         BL    CONTIN                          NO...
         LE    R2,XT1ST
         STE   R2,XT1
         LE    R2,YT1ST
         STE   R2,YT1
         MVI   SWFIRST,C'0'
         ZAP   COUNT,=P'00'                |   RESET COUNTER
         CALL  GSCLR,(0),VL                |   CLEAR THE SCREEN IF
         BAL   R5,CLEA1                    |   THE GRAPH ON THE LEFT
         B     REDRAW                      |  (CPU TREND) WAS COMPLETLY
*                                          |   FILLED...
CONTIN   DS    0H
         CLI   SWFIRST,C'0'
         BNE   LLINE
         XR    R8,R8
         L     R9,ESTOT
         M     R8,=F'4'
         D     R8,=F'1024'
         ST    R9,ESTOTZ
         CVD   R9,DOUB
         MVC   TEXT4(4),=X'40202020'
         ED    TEXT4(4),DOUB+6                      PRINT TOTAL ESTOR
         MVC   LL,=F'4'
* NOW WRITE THE TOTAL ESTOR VALUE ON THE RIGHT OF THAT SPEEDOMETER
         CALL  GSCHAR,(E103,E26,LL,TEXT4),VL
         MVI   SWFIRST,C'1'
         B     LLINE
FINITO   DS    0H
         CALL  FSTERM,(0),VL                  TERMINATE GDDM...
         L     R13,4(R13)
         LA    R15,0
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         MVI   12(R13),X'FF'
         BR    R14
CONVERT  DS    0H
* INPUT = R9 WITH VALUE TO BE CONVERTED          *
* OUT   = R4 VALUE CONVERTED IN FLOATING POINT   *
* SEE PRINCIPLES OF OPERATION........            *
         MVC   TWO31,=X'4E00000080000000'
         X     R9,TWO31+4
         ST    R9,TEMP+4
         MVC   TEMP(4),TWO31
         LD    4,TEMP
         SD    4,TWO31
         BR    R5
* THE CLEA ROUTINE DRAWS THE COMPLETE ARCS ONLY IF NEW PARTIAL ARCS
* WILL BE SMALLER THAT THE ONES DRAWN IN THE PRECEDING DISPLAY SO THAT
* THE ARCS ARE COMPLETELY REFRESHED ONLY SOMETIMES (BETTER EFFECT ON
* THE SCREEN...)
CLEA     DS    0H
         CALL  GSCOL,(RED),VL
         L     R1,OLDCPU
         C     R1,CPU
         BNL   BYPCL1
         CALL  GSMOVE,(E62,E56),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E50,E56,G180),VL
         CALL  GSLINE,(E50,E56),VL
         CALL  GSENDA,(0),VL
BYPCL1   DS    0H
         CALL  GSCOL,(TURQ),VL
         L     R1,OLDPGIC
         C     R1,PGICURR
         BNL   BYPCL1A
         CALL  GSMOVE,(E62,E26),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E50,E26,G180),VL
         CALL  GSLINE,(E50,E26),VL
         CALL  GSENDA,(0),VL
BYPCL1A  DS    0H
         CALL  GSCOL,(YELLOW),VL
         L     R1,OLDUIC
         C     R1,UIC
         BNH   BYPCL2
         CALL  GSMOVE,(E102,E56),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E90,E56,G180),VL
         CALL  GSLINE,(E90,E56),VL
         CALL  GSENDA,(0),VL
BYPCL2   DS    0H
         CALL  GSCOL,(BLUE),VL
         L     R1,OLDESI
         C     R1,ESINU
         BNL   BYPCL3
         CALL  GSMOVE,(E102,E26),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E90,E26,G180),VL
         CALL  GSLINE,(E90,E26),VL
         CALL  GSENDA,(0),VL
BYPCL3   DS    0H
         CALL  GSCOL,(NEUTRAL),VL
         BR    R5
* CLEA1 ROUTINE DRAWS THE COMPLETE ARCS AT START...
CLEA1    DS    0H
         CALL  GSPAT,(C9),VL
         CALL  GSCOL,(RED),VL
         CALL  GSMOVE,(E62,E56),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E50,E56,G180),VL
         CALL  GSLINE,(E50,E56),VL
         CALL  GSENDA,(0),VL
         CALL  GSCOL,(TURQ),VL
         CALL  GSMOVE,(E62,E26),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E50,E26,G180),VL
         CALL  GSLINE,(E50,E26),VL
         CALL  GSENDA,(0),VL
         CALL  GSCOL,(YELLOW),VL
         CALL  GSMOVE,(E102,E56),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E90,E56,G180),VL
         CALL  GSLINE,(E90,E56),VL
         CALL  GSENDA,(0),VL
         CALL  GSCOL,(BLUE),VL
         CALL  GSMOVE,(E102,E26),VL
         CALL  GSAREA,(AREA),VL
         CALL  GSARC,(E90,E26,G180),VL
         CALL  GSLINE,(E90,E26),VL
         CALL  GSENDA,(0),VL
         CALL  GSCOL,(NEUTRAL),VL
         BR    R5
ERRMSG2  DC    C'****     STAX ERROR     ****'
STAXLIST STAX  ATTNEXIT,MF=L
* HERE IS THE STAX ROUTINE TO INTERCEPT ATTENTION KEY
ATTNEXIT DS    0H
         USING *,R15
         STM   R14,R12,12(R13)
         L     R1,8(,R1)
         OI    0(R1),STATIC
         STLINENO LINE=1                      RESTORE FULL SCREEN
         STFSMODE ON                          ... IF NEEDED ...
         LM    R0,R12,20(R13)
         BR    R14
         DROP  R15
OUTBUF   DC    C'PROCESS INTERRUPTED...'
SWUPD    DC    X'00'
STATIC   EQU   X'01'
TEN      DC    F'10'
H1       DC    C'50'
H0       DC    C'00'
H2       DC    C'25'
H3       DC    C'75'
H4       DC    C'100'
H255     DC    C'255'
LEG1     DC    C'                    '
LL       DC    F'00'
EFR      DC    E'0.6'
E00      DC    E'000'
E1       DC    E'001'
E2       DC    E'002'
E8       DC    E'008'
E20      DC    E'20'
E26      DC    E'26'
E25      DC    E'25'
E30      DC    E'30'
E34      DC    E'34'
E35      DC    E'35'
E40      DC    E'40'
E47      DC    E'047'
E48      DC    E'048'
E49      DC    E'049'
E50      DC    E'50'
E56      DC    E'56'
E62      DC    E'062'
E63      DC    E'063'
E65      DC    E'065'
E67      DC    E'067'
E68      DC    E'068'
E69      DC    E'069'
E70      DC    E'070'
E72      DC    E'72'
E73      DC    E'73'
E75      DC    E'75'
E90      DC    E'090'
E102     DC    E'102'
E103     DC    E'103'
TEXT1A   DC    C'CPU % : '
TEXT1    DC    3C' '
TEXT2A   DC    C'UIC   : '
TEXT2    DC    3C' '
TEXT3A   DC    C'PIN/S : '
TEXT3    DC    3C' '
TEXT4A   DC    C'EX-STOR AVAIL. : '
TEXT4    DC    5C' '
TEXT5A   DC    C'EX-STOR USED   : '
TEXT5    DC    5C' '
TITLE    DC    20C' '
         DC    C'      THE CRUISE CONTROL PANEL'
         DC    21C' '
TITLETIM DC    8C' '
         DC    10C' '
C1       DC    F'1'
C2       DC    F'2'
C3       DC    F'3'
C4       DC    F'4'
C5       DC    F'5'
C6       DC    F'6'
C7       DC    F'7'
C8       DC    F'8'
C9       DC    F'9'
C10      DC    F'10'
C11      DC    F'11'
C20      DC    F'20'
C21      DC    F'21'
C22      DC    F'22'
C24      DC    F'24'
C80      DC    F'80'
GUNK     DC    D'00'
G95      DC    E'095'
G100     DC    E'100'
G130     DC    E'130'
G180     DC    E'180'
G360     DC    E'360'
BINTVL   DC    F'300'
         DS    0D
TEMP     DS    CL8
TWO31    DS    CL8
CPU      DC    F'000'
UIC      DC    F'255'
PGI      DC    F'000'
ESTOT    DC    F'000'
ESINU    DC    F'000'
OLDCPU   DC    F'000'
OLDUIC   DC    F'255'
OLDESI   DC    F'999'
OLDPGI   DC    F'000'
OLDPGIC  DC    F'000'
ESTOTZ   DC    F'000'
ESINUZ   DC    F'000'
PGICURR  DC    F'000'
         DS    CL100
TI1      DS    F
TI2      DS    F
TI3      DS    F
AREA     DC    F'1'
YELLOW   DC    F'6'
TURQ     DC    F'5'
RED      DC    F'2'
GREEN    DC    F'4'
PINK     DC    F'3'
BLUE     DC    F'1'
BLACK    DC    F'8'
NEUTRAL  DC    F'7'
DEFAULT  DC    F'0'
DOUBLE   DC    F'2'
DOUB     DS    D
WORK     DS    F
W1       DC    E'0'
W2       DC    E'100'
W3       DC    E'0'
W4       DC    E'100'
XXX      DC    E'047'
XX1      DC    E'087'
XX0      DC    E'-5'
YYY      DC    E'052'
YY1      DC    E'022'
XX2      DC    E'042'
XX3      DC    E'083'
ENDTIME  DC    F'00'
STARTIME DC    F'00'
DELAY    DC    F'00'
SWFIRST  DC    C'0'
SECS     DS    CL3
XT0      DC    E'-20'
YT0      DC    E'+70'
XT1      DC    E'-20'
YT1      DC    E'+30'
XT1ST    DC    E'-20'
YT1ST    DC    E'+30'
XL1      DC    E'+30'
         DC    E'+30'
         DC    E'-20'
         DC    E'-20'
YL1      DC    E'70'
         DC    E'30'
         DC    E'30'
         DC    E'70'
COU      DC    F'4'
COUNT    DC    PL4'00'
         END


SOURCE CODE FOR SURVEY01

*****    THIS PROGRAM IS CALLED FROM PROGRAM SURVEYOR
*        IT RETRIEVES AVERAGE CPU UTILIZATION, UIC COUNT,
*        PAGEIN RATES, AND EXPANDED STORAGE VALUES FROM MVS
*        CONTROL BLOCKS.
*        PARAMETERS ARE PASSED BACK TO THE INVOKING  PROGRAM
*        IN THIS ORDER :
*        CPU                 (ONE WORD)
*        UIC                 (ONE WORD)
*        PAGEINS             (ONE WORD)
*        TOTAL ESTORE FRAMES (ONE WORD)
*****    USED  ESTORE FRAMES (ONE WORD)
         CVT   DSECT=YES
SURVEY01 CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         L     R6,0(R1)
         USING SURVEY01,R12
         ST    R13,SAVE+4
         LA    R13,SAVE
         L     R1,AMODE31A
         BSM   0,R1
AMODE31A DC    A(AMODE31B+X'80000000')
AMODE31B DS    0H
         L     R2,CVTPTR
         USING CVT,R2
         L     R2,CVTOPCTP
         MVC   CATCH,RMCT
         CLC   RMCT,0(R2)
         BNE   NOTFOUND
         L     R4,228(R2)
         MVC   CATCH,RCT
         CLC   RCT,0(R4)
         BNE   NOTFOUND
         MVC   UIC(2),54(R4)
         LH    R1,UIC
         ST    R1,VOIX
         MVC   4(4,R6),VOIX               UIC COUNT
         LH    R1,56(R4)
         SRL   R1,4
         STH   R1,CPU
         ST    R1,VOIX
         MVC   0(4,R6),VOIX               CPU BUSY %
         L     R5,CVTPTR
         USING CVT,R5
         L     R5,CVTRCEP
         L     R1,68(R5)
         ST    R1,VOIX
         MVC   8(4,R6),VOIX               PAGEIN COUNTS
         MVC   12(4,R6),160(R5)           ES. FRAMES TOTAL
         MVC   16(4,R6),164(R5)           ES. FRAMES IN USE
         LA    R1,AMODE24
         BSM   0,R1
AMODE24  DS    0H
ENDOFPGM L      R13,4(R13)
         RETURN (14,12),T,RC=0
NOTFOUND DS     0H
         MVC    ERRMSG+24(4),CATCH
         TPUT   ERRMSG,80
         ABEND  0001,DUMP
ERRMSG   DC     CL80'** ERROR RETRIEVING --> XXXX IN CORE   **'
CATCH    DC     C'    '
RMCT     DC     C'RMCT'
RCT      DC     C'RCT '
UIC      DS     H
CPU      DS     H
VOIX     DS     F
* SAVE AREA
SAVE     DS     18F     MY SAVE AREA
* WORK ZONES
WRKD     DS     D
         LTORG
         END


Franco Masone
Systems Programmer (Italy)                                    c Xephon 1993

