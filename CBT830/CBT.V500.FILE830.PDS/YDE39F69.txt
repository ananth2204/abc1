Using the MVS UCB scan service routine

The MVS UCB scan service, documented in the IBM manual GC28-1046 OS/VS2
System Programming Library:  Supervisor allows any unauthorised program
to scan all UCBs or selected UCBs by device type.  The scan service
routine (IOSVSUCB) is easier to use than the IOSLOOK macro and does not
require the issuer to be in supervisor state, a particular protect key,
hold any locks, or know the particular device address to deal with.

The IOSVSUCB routine requires a three-word parameter list.  The first
word of the list is the address of a 100-byte area provided by the
caller to be used by IOSVSUCB as a work area during multiple calls.  The
second word is the address of a byte that contains the device class to
which the search may be restricted, or optionally X'00' to indicate that
all UCBs are to be scanned.  The device class is the same as those
specified in the UCB mapping macro IEFUCBOB, specifically those at label
UCBDVCLS at offset X'12' in the UCB.  The third word in the list
contains the address of a word in which IOSVSUCB will return the UCB
address.  Standard linkage conventions apply to calling IOSVSUCB,
including register 1 pointing to the parameter list, register 13
pointing to the caller's save area, and registers 14 and 15 for the
return address and entry point of IOSVSUCB.  The entry point for
IOSVSUCB is located in the CVTUCBCSC field of the CVT.

Each time the IOSVSUCB routine is called, it will obtain the address of
the common segment of one UCB.  Note that IOSVSUCB only returns the
address of an on-line UCB when scanning by device class, although the
manual does not explicitly state this.  When scanning for all UCBs, both
on-line and off-line UCBs are returned.  Therefore, if you wish to scan
for all DASD UCBs, you must set the device class flag to X'00' and check
each UCB yourself for the proper device class.  If you wish to scan
multiple UCBs, IOSVSUCB must be re-invoked for each UCB without changing
the parameter list or the 100-byte work area.  Since IOSVSUCB uses the
100-byte work area to keep track of where it left off, this area cannot
be modified except to clear the area to binary zeros if you wish to
start the entire scan over again at the first UCB in the system or from
a particular device class.

I have written a sample program called CKIXVTOC, which uses the IOSVSUCB
scan service to return the address of each on-line direct access type
UCB in the system.  The program will scan all on-line DASD UCBs or will
accept a parameter list consisting of a list of volume serial numbers to
scan for.  As each DASD UCB is found, the CVAFTST macro is invoked using
the UCB address as an operand.  The CVAFTST macro will show if a DASD
volume has an active indexed VTOC or not.  The program will then issue a
TPUT macro indicating the volume serial number and device address as
well as a message indicating whether or not the volume has an indexed
VTOC.  The program can be called with no parameter list or with a
parameter of 'ALL' to indicate that all on-line DASD UCBs should be
checked.  It may also be called with a parameter of multiple volumes to
indicate that only the specified volumes should be checked.  Some
examples of invocation are:

*    CALL 'your.load.library(CKIXVTOC)' - to check all volumes
*    CALL 'your.load.library(CKIXVTOC)' 'ALL' - to check all volumes
*    CALL 'your.load.library(CKIXVTOC)' 'WORK01,WORK02,WORK03' - to
check the specified volumes.

Since the program is not a command processor, a CLIST similar to the one
below may be used to invoke it.  In this example, the CLIST name is
CKINDXVT.

PROC 00 LIST VOLUMES(ALL)
IF &SYSISPF = ACTIVE THEN ISPEXEC CONTROL DISPLAY LINE START(1)
IF &LIST EQ LIST THEN CONTROL LIST
CALL 'your.load.library(CKIXVTOC)' '&VOLUMES'
Invocation of the CLIST would be as follows:
*    %CKINDXVT - to check all volumes
*    %CKINDXVT VOLUMES(ALL) - to check all volumes
*    %CKINDXVT VOL('WORK01,WORK02,WORK03') - to check the specified
*         volumes.

THE SOURCE CODE FOR CKIXVTOC

CKIXVTOC CSECT
         SAVE  (14,12),,CKIXVTOC-&SYSDATE
         LR    R8,R15
         USING CKIXVTOC,R8
         ST    13,SAVE+4
         LA    14,SAVE
         ST    14,8(13)
         LR    13,14
         L     R11,0(,R1)              L R1 W/A(PARM LIST)
         LH    R12,0(,R11)             L R12 W/LENGTH OF PARM LIST
         C     R12,ZEROS               WAS THERE A PARM LIST
         BE    NOPARM                  NO, ASSUME ALL
         A     R12,ONE                 ADD 1 TO LENGTH FOR LATER
         A     R11,TWO                 BUMP R11 TO A(FIRST PARM)
         CLC   ALL,0(R11)              SHOULD WE CHECK ALL VOLSERS
         BNE   UCBSCAN                 NO, CHECK FOR VOLUMES
NOPARM   MVI   ALLSW,X'FF'             ELSE SHOW CHECK ALL VOLUMES
*------------------------------------------------------------------- *
*        GET ALL DISK DEVICE ADDR TO CHECK FOR INDEX VTOC            *
*------------------------------------------------------------------- *
UCBSCAN  L     R4,CVTPTR               LOAD R4 W/A(CVT)
         USING CVTMAP,R4
         XC    IOSWORK,IOSWORK         CLEAR WORK AREA
         MVI   IOSUCBTY,UCB3DACC       SET SCAN FOR DASD ONLY
UCBLOOP  LA    R1,PARMLIST             LOAD R1 W/(PARM LIST)
         L     R15,CVTUCBSC            LOAD R15 W/A(SCAN SERVICE)
         BALR  R14,R15                 BRANCH TO SERVICE
         LTR   R15,R15                 CHECK RETURN CODE
         BZ    LOADUCB                 IF NOT DONE, GO GET A(UCB)
         CLI   ALLSW,X'FF'             ARE WE CHECKING ALL VOLUMES
         BE    RETURN                  YES, THEN DONE SO RETURN
         MVC   MSGVOL,0(R11)           ELSE, MOVE VOLSER
         MVC   MSGUCB,STARS                  CLEAR UCB
         B     NOTMNT                        GO ISSUE MESSAGE
LOADUCB  L     R3,IOSUCBPT             LOAD R3 W/A(UCB)
         USING UCBOB,R3
         MVC   MSGVOL,UCBVOLI          GET VOLSER FROM UCB
         MVC   MSGUCB,UCBNAME          GET UCBNAME FROM UCB
         CLI   MSGVOL,C'A'             IS THIS A VALID VOLSER
         BL    UCBLOOP                 NO, GO GET NEXT
         CLI   MSGVOL,C'9'             IS THIS A VALID VOLSER
         BH    UCBLOOP                 NO, GO GET NEXT
         CLI   ALLSW,X'FF'             ARE WE CHECKING ALL UCB'S
         BE    FOUNDIT                 YES, DON'T CHECK FOR VOLSER
         CLC   MSGVOL,0(R11)           ELSE IS THIS A GOOD VOLSER
         BE    FOUNDIT                 YES, CONTINUE
         B     UCBLOOP                 ELSE, GO GET ANOTHER
FOUNDIT  CVAFTST UCB=(3)               CHECK FOR INDEXED VTOC
         B     BRTABLE(R15)            BRANCH OFF BRANCH TABLE
BRTABLE  B     RETURN                  NO CVAF SUPPORT
         B     NOTINDX                 NO INDEXED VTOC ON VOLUME
         B     INDEX                   INDEXED VTOC ON VOLUME
         B     NOTMNT                  VOLUME NOT MOUNTED
         B     RETURN                  ERROR
NOTINDX  MVC   MSGLINE,MSGLNE1         NOT INDEX MESSAGE
         B     WRITEMSG
INDEX    MVC   MSGLINE,MSGLNE2         INDEXED MESSAGE
         B     WRITEMSG
NOTMNT   MVC   MSGLINE,MSGLNE3         NOT MOUNTED MESSAGE
WRITEMSG LA    R1,MSG                  LOAD R1 W/A(MESSAGE)
         LA    R0,L'MSG                LOAD R0 W/LENGTH OF MESSAGE
         TPUT  (R1),(R0)               ISSUE TPUT
         CLI   ALLSW,X'FF'             ARE WE CHECKING ALL VOLUMES
         BE    UCBLOOP                 YES, GO GET NEXT ONE
CHKPARMS S     R12,SEVEN               ELSE DECREMENT PARM LENGTH
         C     R12,ZEROS               ARE WE DONE WITH PARMS
         BE    RETURN                  YES, RETURN
         A     R11,SEVEN               ELSE BUMP TO NEXT PIECE OF PARM
         B     UCBSCAN                 GO SCAN FOR THIS VOLUME
RETURN   L     R13,SAVE+4
         RETURN (14,12),RC=0
SAVE     DC    18F'0'
FOXES    DC    XL2'FF'
ZEROS    DC    F'00'
ONE      DC    F'1'
TWO      DC    F'2'
SEVEN    DC    F'7'
ALL      DC    CL3'ALL'
STARS    DC    C'***'
ALLSW    DC    X'00'
MSG      DS    0CL70          --------------|
MSGVOL   DC    CL6' '                       |
         DC    C' ('                        |
MSGUCB   DC    CL3' '                       |
         DC    C') '                        |
         DC    C' '                         |
MSGLINE  DC    CL31' '                      |
         DC    CL(70-(*-MSG))' ' -----------|
MSGLNE1  DC    CL31'DOES NOT HAVE AN INDEXED VTOC '
MSGLNE2  DC    CL31'DOES HAVE AN INDEXED VTOC     '
MSGLNE3  DC    CL31'IS NOT MOUNTED TO THE SYSTEM  '
PARMLIST DC    A(IOSWORK)              IOSVSUCB PARAMETER LIST-----|
         DC    A(IOSUCBTY)                                         |
         DC    A(IOSUCBPT+X'80000000') HIGH-ORDER BIT ON-----------|
IOSWORK  DC    XL100'00'
IOSUCBTY DC    X'00'
IOSUCBPT DC    F'0'
         CVT   DSECT=YES
         IEFUCBOB
         END


Bruce Bordonaro
System Software Manager
EDS (USA) â‚¬ EDS 1988
































