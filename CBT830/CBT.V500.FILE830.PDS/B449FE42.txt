Unconditional DFDSS restore

Recently when we started to implement a disaster fall back
procedure for our site, we ran into the following problem with
DFDSS (Version 2.5): after a restore of the system volumes (ie
a full volume restore) and a logical restore of the user catalogs,
the DFDSS (logical) restore of the VSAM application datasets
fails because DFDSS is hindered by the loose VSAM entries in
the user catalogs. IBM APAR PL57115 describes this problem
for DFDSS Version 2.4 yet apparently it is not yet solved in
Version 2.5.

To solve this problem, one has to scratch all VSAM dataset
entries from the catalogs before the restore can take place - not
a feasible solution when there are hundreds of VSAM clusters.
I started to investigate available DFDSS exits and created the
following Assembler programs to form the basis of an
alternative solution.


IFFDFDSS

In order to activate DFDSS exits one has to front-end them
with a User Interface Module. This program scans the input
PARM card for the following strings:

o      RESTORE - invokes ADRDSSU restore without any
      rename facilities.

o      RESTORE,PFX=xxxxxxx - invokes ADRDSSU restore
      with the unconditional rename function for only the first-
      level qualifier.

o      COPY,PFX=xxxxxxxx - invokes ADRDSSU copy with
      the unconditional rename for the first-level qualifier.

If none of these PARM cards is specified, it just invokes
ADRDSSU, so that it can, in fact, replace all ADRDSSU calls.

IFFDFDSS source code

* DESCRIPTION: THIS PGM IS USED TO DRIVE SOME DFDSS EXIT POINTS AS
*              DESCRIBED IN SC26-4389 DFDSS REFERENCE
*              THE PURPOSE IS TO ALLOW DFDSS TO RESTORE A DATASET
*              EVEN WHEN ONLY THE ENTRY EXITS IS THE CATALOG.
*              THIS IS ESPECIALLY TRUE IN A DISASTER FALL BACK CASE
*              JUST AFTER THE RESTORE OF THE CATALOGS AND BEFORE
*              (LOGICAL) RESTORE OF THE APPLICATION DATA.
* INPUT: PARM CARD
*    1. IF NO PARM THEN CALL NORMAL DFDSS, WITHOUT PARM
*    2. IF COPY,PFX=...  THEN SET UP FOR DFDSS COPY RENUNC(...)
*    3. IF RESTORE       THEN SET UP FOR DFDSS RESTORE
*    4. IF RESTORE,PFX=  THEN SET UP FOR DFDSS RESTORE RENUNC(...)
*    5. IF ANY OTHER PARM THEN PASS TO DFDSS ASIS
IFFDFDSS CSECT                     CSECT NAME DECLARED
IFFDFDSS AMODE 31
IFFDFDSS RMODE 24
         EXTRN PARSE
*  CONSTANT EQUATES
RCOMMNT  EQU  B'00000001'
FSTRING  EQU  B'00000010'
RC256    EQU   256                 RETURN CODE
BEGIN    SAVE  (14,12),,IFFDFDSS_&SYSDATE._&SYSTIME
         LR    R12,R15               COPY ENTRY POINT
         USING IFFDFDSS,R12          SET UP BASE ADDRESSABILITY
         ST    R13,SAVEMAIN+4        SAVE R13 IN PROG SAVEMAIN AREA
         LA    R14,SAVEMAIN
         ST    R14,8(R13)            STORE SAVEMAIN ADDR. IN SAVE AREA
         LR    R13,R14               R13 POINTS TO NEW SAVEAREA
         MVI   EXECPARM,C' '         COPY OF PARMS ON EXEC CARD
         MVC   EXECPARM+1(L'EXECPARM-1),EXECPARM
         MVI   OPTIONS,C' '          INIT OPTIONS WITH BLANK
         MVC   OPTIONS+1(L'OPTIONS-1),OPTIONS
         XR    R4,R4
         ST    R4,REC1FLAG           INIT REC1FLAG
         ST    R4,WTOFLAG            INIT WTOFLAG
         STH   R4,OPTPTR             NO PARAMETERS FOR DFDSS
         LA    R4,WTOMSG             INIT WTO ADDRESS FOR COMMAREA
         ST    R4,WTO@
         LA    R4,RESTORE            ASSUME NORMAL RESTORE
         ST    R4,DFDSSF@             NO RESTORE AND RENUNC
         XR    R4,R4                  THEN ALSO SET PFX ADDRESS TO 0
         ST    R4,PFX@                NO RESTORE AND RENUNC
*  R1 POINT TO PARM CARD
         L     R2,0(,R1)             GET PARM ADDRESS
         LH    R3,0(,R2)             GET PARM LENGTH
         LA    R2,2(,R2)             POINT R2 AT START OF STRING
         LTR   R3,R3                 IF LENGTH=0 THEN NOPARM
         BNZ   DFDSSPAR              PARAMETER SPECIFIED
*    ELSE SIMPLE CALL DFDSS
         LINK  EP=ADRDSSU
         LR    R11,R15                  SAVE RETURN CODE IN R11
         B     RETMAIN
DFDSSPAR BCTR  R3,0                  DECREMENT FOR EX INST
         EX    R3,MVCEXECP           MOVE PARM TO INTERNAL BUFFER
         EX    R3,OCEXECP            MAKE UPPERCASE
         LA    R2,EXECPARM           FROM NOW ON REF INTERNAL BUFFER
         LA    R3,1(,R3)             CORRECT LENGTH
         STH   R3,EXECPLNG           FILL IN LENGTH
         LA    R1,RCOMMNT+FSTRING    SET FUNCTION FOR PARSE
         ST    R1,PARSEINP+8         REMOVE AND SCAN FOR STRING
         LA    R4,PARSELST           R4 IS PTR INTO PARSE LST
         XR    R6,R6                 R6 = COUNTER, IS ZERO
SCANKEYW ST    R4,PARSEINP+4         R4, POINT TO PARSING STRING
         LH    R5,0(,R4)             R5 = LENGTH OF PARSING STRING
         LTR   R5,R5                 IF ZERO THEN READY
         BZ    NOIFFKEY              NO SPECIAL KEY FOUND
         LA    R1,PARSEINP           R1 = INPUT FOR PARSE
         L     R15,=A(PARSE)         PARSE ROUTINE
         BASR  R14,R15                AND CALL THIS ROUTINE
         LTR   R15,R15               CHECK IF FOUND
         BZ    IFFKEY                YES, THEN KEYWORD FOUND
         LA    R1,FSTRING            SET FUNCTION FOR PARSE
         ST    R1,PARSEINP+8         ONLY SCAN FOR STRING
         AR    R4,R5
         LA    R4,2(,R4)             R4 POINTS TO NEXT PARSE STRING
         LA    R6,1(,R6)             INCR COUNTER
         B     SCANKEYW              LOOP BACK
*   ALL NORMAL DFDSS PARMS
NOIFFKEY MVC  OPTIONS(L'OPTIONS),EXECPARM
         MVC  OPTPTR(L'OPTPTR),EXECPLNG
         LINK  EP=ADRDSSU,                                             X
               PARAM=(OPTPTR),                                         X
               VL=1
         LR    R11,R15                  SAVE RETURN CODE IN R11
         B     RETMAIN
IFFKEY   DS    0H                    R1 POINTS TO PFX STRING IF ANY
*                                    R6 WAS COUNTER
         SLL   R6,2                  MULTIPLY BY FOUR
         LA    R7,PARSEBRT
         L     R7,0(R6,R7)           GET BRANCH ADDRESS
         BR    R7                    AND GO THERE
* BRANCH ENTRY POINTS:
*  1 RESTORE: WHEN KEYWORD WAS RESTORE
*  2 COPYPFX: WHEN KEYWORD WAS COPY,PFX=....
*  3 RESTPFX: WHEN KEYWORD WAS RESTORE,PFX=....
DOREST   B     CALLDFDS              ALL BELOW HAVE A PFX VALUE
COPYPFX  CLI   0(R1),C' '            VALUE AFTER PFX= BLANK?
         BE    ERRPARM                 YES THEN ERROR
         MVC   PFXC(L'PFXC),0(R1)    COPY PFX VALUE INTO DFDSS STRING
         LA    R4,COPYUNC            COPY WITH RENAME UNCONDITIONAL
         ST    R4,DFDSSF@
         LA    R4,PFXC               FILL IN PFX ADDRES
         ST    R4,PFX@
         B     CALLDFDS
RESTPFX  CLI   0(R1),C' '            VALUE AFTER PFX= BLANK?
         BE    ERRPARM                 YES THEN ERROR
         MVC   PFXR(L'PFXR),0(R1)    COPY PFX VALUE INTO DFDSS STRING
         LA    R4,RESTUNC            REST WITH RENAME UNCONDITIONAL
         ST    R4,DFDSSF@
         LA    R4,PFXR               FILL IN PFX ADDRES
         ST    R4,PFX@
         B     CALLDFDS
CALLDFDS LINK  EP=ADRDSSU,                                             X
               PARAM=(OPTPTR,DDNPTR,PAGEPTR,UIMPTR,UAPTR),             X
               VL=1
         LR R11,R15                  SAVE RETURN CODE IN R11
         B     RETMAIN
RETMAIN  DS    0H                    RETURN TO CALLER
         L     R13,SAVEMAIN+4        RESET R13 TO CALLER'S SAVE AREA
         L     R14,12(R13)           LOAD R14 WITH RETURN ADDRESS
         LR    R15,R11               SET RC
         LM    R0,R12,20(R13)        RESTORE REGISTERS
         BR    R14                   RETURN TO CALLER
*   ERROR EXIT POINTS                                                 *
ERRPARM  DS    0H
ERRPARSE DS    0H
         WTO   'IFFD40A IFFDFDSS, MIS-SPECIFICATION OF PARMFIELD',     X
               ROUTCDE=(1,9,11)
         LA    R11,RC256
         B     RETMAIN
*                        DATA AREA FOR MAIN ROUTINE                   *
*  EX INSTR
MVCEXECP MVC   EXECPARM,0(R2)     MOVE PARM TO INTERNAL BUFFER
OCEXECP  OC    EXECPARM,BLANCS    MAKE UPPERCASE
         LTORG
SAVEMAIN DS    18F                   SAVE AREA FOR MAIN PGM
EXECPLNG DS    AL2
EXECPARM DS    CL256
PARSELST DS    0H
CPFX     DC    AL2(RPFX-CPFX-2),C'COPY,PFX='
RPFX     DC    AL2(R-RPFX-2),C'RESTORE,PFX='
R        DC    AL2(ENDLIST-R-2),C'RESTORE'
ENDLIST  DC    AL2(0)
PARSEBRT DS    0F                    ORDER MUST MATCH PARSE LIST !!!
         DC    A(COPYPFX)
         DC    A(RESTPFX)
         DC    A(DOREST)
PARSEINP DC    A(EXECPLNG)           PARSE PARMETER BLOCK
         DC    A(0)                  TO BE FILLED IN
         DC    A(3)                  REMOVE COMMENT AND FIND STRING
BLANCS   DC    CL256' '
*  ARGUMENT LIST FOR LINK TO ADRSDSSU
DATAAREA DS    0H
         CNOP  2,4
OPTPTR   DS    AL2                   DFDSS EXEC PARMS
OPTIONS  DS    CL256
         CNOP  2,4
DDNPTR   DC    AL2(DDNLEN)           DEFAULT SYSIN AND SYSPRINT ASSUMED
DDNAMES  DC    XL8'00'               MUST BE 8 * 00
         DC    XL8'00'               MUST BE 8 * 00
         DC    XL8'00'               MUST BE 8 * 00
         DC    XL8'00'               MUST BE 8 * 00
SYSIN    DC    XL8'00'               USE STANDARD SYSIN
SYSPRINT DC    XL8'00'               USE STANDARD SYSPRINT
DDNLEN   EQU   *-DDNAMES
         CNOP  2,4
PAGEPTR  DC    H'0'                  DEFAULT PAGE NUMBER FOR SYSOUT
         CNOP  2,4
UIMPTR   DC    AL2(UIMLEN)           POINTER TO OUR EXIT MODULE
UIM      DC    CL8'EXTDFDSS'         ADDR OF OUR DFDSS EXIT ROUTINE
UIMLEN   EQU   *-UIM
         CNOP  2,4
UAPTR    DC    AL2(UALEN)            POINTER TO OUR USER INTERFACE
UA@      DC    A(COMMAREA)           FIELD ADDRESS ==> COMMAREA
UALEN    EQU   *-UA@
*   COMMAREA: THIS AREA WILL BE PASSED BY DFDSS TO EACH EXIT AND
*   WILL BE USED TO EXCHANGE INTRA EXIT INFORMATION:
*      DATA WILL BE FILLED IN EXIT POINT: EIOPTION 1
*      DATA WILL BE READ   IN EXIT POINT: EIOPTION 21
*   FORMAT:
*   1. FLAG WHETHER IT IS THE FIRST RECORD OF SYSIN THAT IS BEING
*      PROCESSED (0 ==> YES, IT IS FIRST RECORD)           FULL WORD
*   2. FLAG WHETHER WTO WAS ALREADY ISSED FOR SYSIN RECORD PRESENTED
*      PROCESSED (0 ==> NO)                                FULL WORD
*   3. ADDRESS OF WTO MESSAGE INCASE AN ERROR IS DETECTED  FULL  WORD
*   4. ADDRESS OF RESTORE SYSIN STRING                     FULL WORD
*   5. ADDRESS OF TOBE RENAMED PFX STRING, THIS ADDRESS IS 0 FOR
*      JUST A RESTORE WITHOUT A RENAME                     FULL WORD
*      NOTE: THE RENAME STRING IS MAX 8 CHARACTERS LEFT JUSTIFIED
*            PADDED WITH BLANKS
COMMAREA DS    0F                    FULL WORD BOUNDARY
REC1FLAG DS    A(0)                  FIRST RECORD IN SYSIN INDICATOR
WTOFLAG  DS    A(0)                  FLAG TO IND. WTO WAS ISSUED
WTO@     DS    A(0)                  ADDRESS OF WTO MSG
DFDSSF@  DS    A(0)                  ADDRESS OF RESTORE
PFX@     DS    A(0)                  ADDRESS OF PFX
         DS    0F
WTOMSG   DC    AL2(L'WTOM)
WTOM  DC CL80'  WTO ''IFFDFDSS, KEYWORD NOT SUPPORTED, SEE ====> '' '
         DS    0F
RESTORE  DC    AL2(L'RSTR)
RSTR     DC    CL80'   RESTORE       -  '
         DS    0F
RESTUNC  DC    AL2(LRSTU)
RESTU    DC    C'   RESTORE  RENUNC('
PFXR     DC    CL8' '                      CONTAINS RENAME LEFT JUST.
         DC    CL(80-L'PFXR-L'RESTU)')  - '
LRSTU    EQU   *-RESTU
         DS    0F
COPYUNC  DC    AL2(LCOPU)
COPYU    DC    C'   COPY RENUNC('
PFXC     DC    CL8' '                      CONTAINS RENAME LEFT JUST.
         DC    CL(80-L'PFXC-L'COPYU)')  - '
LCOPU    EQU   *-COPYU
LCOMM    EQU   *-COMMAREA
LDATA    EQU   *-DATAAREA
         END

This article will be concluded next month when we shall be looking at the remain

Karel Bastiaansen
MVS Systems Programmer
IFF Nederland BV (The Netherlands)                        c Xephon 1993

