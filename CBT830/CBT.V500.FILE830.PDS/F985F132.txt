Displaying on-line tape units

Example of display

COMMAND ===>                                                 ROW 1 TO 12 OF 12
                                                                 Scroll> PAGE
SY02   SYSB      O n l i n e   T a p e   U n i t s      (12/48)   94.322  15:07

Volser Cua  ----Status----   Ds    Type  Job in    #IO  Acl/ Last   Chpids
                                           I/O          Comp open
K00657 020  Mount Pd NRD A         3490  ET22RES      8             00-1F-32-33
K01752 021  in use   RD  A   6,SL  3490            9773    C K01752 00-1F-32-33
K03635 022  rewindng RD  A     SL  3490  DFHSM       36  A C        00-1F-32-33
 n/a   023           NRD           3490              18  A C K04647 00-1F-32-33
DS0017 024   I / O   RD  A  55,SL  3490  CADSDISP  2402  A C DS0017 00-1F-32-33
K00950 025  mounted  RD        SL  3490              11  A C        00-1F-32-33
K04728 028  mounted  RD        SL  3490              11  A C        00-1F-32-33
Privat 029  Mount Pd NRD A         3490  SY02SAVE     4  A          00-1F-32-33
305    030  Intervnt NRD A         3422  KS02ODC      8             13-32
000016 031  rewindng RD  A     SL  3422  PA2150SR     0             13-32
WGD040 040   I / O   RD  A   2,NL  3420  CICARCHI 64088      WGD040 07
WMGVO1 041  in use   RD  A         3420               2             07

REXX EXEC

/*------------------------------ Rexx ------------------------------*/
/* Function   : Display information for all on-line tape units      */
/*------------------------------------------------------------------*/
 arg  opt
 if opt = 'DEBUG' then debug = 'Y'
 code = 0
 /* Set up constants */
 tape_ucb = '80'x
 online = '80'x
 ucbalo = '08'x
 /* Find UCB area via CVT */
 cvt = storage(10,4)
 cvtucba = storage(d2x(c2d(cvt) + c2d('4e4'x)),4)
 /* Set 'ISPF' or 'TSO' flag               */
 if sysvar(sysispf) = 'ACTIVE' then flag = 'I'
                               else flag = 'T'
/*-----------------------------------------------------------*/
/*  Main loop (do while END key not pressed)                 */
/*-----------------------------------------------------------*/
do while code = 0
 ucbnext = cvtucba
 tot     = 0            /* number of tape units generated in MVS */
 toton   = 0            /* number of online tape units           */
/*-----------------------------------------------------------*/
/*         Display the head line  (TSO only)                 */
/*-----------------------------------------------------------*/
 if flag = 'T' then do
      say '******************* O n l i n e    T a p e    U n i t s '
      say 'Volser Cua  ----Status----    ds  type' ,
          '   Job    #I/Os Acl/ Last     Chpids'
      say '                                      ' ,
          '  in I/O        Comp open          '
      code = 16                        /* to get out immediatly  */
      end
/*-----------------------------------------------------------*/
/*         Create the ISPF table  (ISPF only)                */
/*-----------------------------------------------------------*/
 if flag = 'I' then do
      address ispexec "TBERASE  TAPETB "
      address ispexec "TBCREATE TAPETB " || ,
              "NAMES(UCBVOL1 UCBNAME ACTION NR  STAT SL "|| ,
                    "UCBTYPE JOBIO   SIO    LIB CHPS) NOWRITE REPLACE"
      if rc > 4 then say 'TBCREATE Error rc=' rc
      end
/*-----------------------------------------------------------*/
/*          UCB loop : process all generated ucbs            */
/*-----------------------------------------------------------*/
 do while c2d(ucbnext) ¬= 0      /* until end of ucb chain reached */
 ucba = ucbnext
 ucbnext = storage(d2x(c2d(ucba) + c2d('08'x)),4)      /* UCBNXUCB */
 if debug = 'Y' then say storage(d2x(c2d(ucba) + c2d('0d'x)),3)
 ucbtbyt3 =  storage(d2x(c2d(ucba) + c2d('12'x)),1)
 lib = ''
/*         Keep only tape units                              */
  if tape_ucb ¬= bitand(ucbtbyt3,tape_ucb) then iterate
  tot     = tot + 1
  ucbstat = storage(d2x(c2d(ucba) + c2d('03'x)),1)
  ucbwgt  = storage(d2x(c2d(ucba) + c2d('0c'x)),1)
  ucbjbnr = storage(d2x(c2d(ucba) + c2d('00'x)),1)
  ucbextp = storage(d2x(c2d(ucba) + c2d('15'x)),3) /* ucb extension */
/*         Keep only online units                            */
  if online ¬= bitand(ucbstat,online) then iterate
  toton   = toton + 1
/*         Get chpid information                             */
  chp = c2x(storage(d2x(c2d(ucba) - c2d('18'x)),8))
  chps = substr(chp,1,2)
  if (substr(chp,3,2)¬='FF')  then chps=chps'-'substr(chp,3,2)
  if (substr(chp,5,2)¬='FF')  then chps=chps'-'substr(chp,5,2)
  if (substr(chp,7,2)¬='FF')  then chps=chps'-'substr(chp,7,2)
  if (substr(chp,9,2)¬='FF')  then chps=chps'-'substr(chp,9,2)
  if (substr(chp,11,2)¬='FF') then chps=chps'-'substr(chp,11,2)
  if (substr(chp,13,2)¬='FF') then chps=chps'-'substr(chp,13,2)
  if (substr(chp,15,2)¬='FF') then chps=chps'-'substr(chp,15,2)
  stat = ' '
  if (ucbalo = bitand(ucbstat,ucbalo)) then do
                                       alloc = 'Y'
                                       stat = 'A'
                                       end
                                       else alloc = 'N'
  ucbuntyp = storage(d2x(c2d(ucba) + c2d('13'x)),1)
  ucbfl1  =  storage(d2x(c2d(ucba) + c2d('06'x)),1)
  if bitand(ucbfl1,'40'x) = '40'x then nr = 'NRD'
                                  else nr = 'RD '
  ucbvol1 = storage(d2x(c2d(ucba) + c2d('1c'x)),6)
/*         Find which job has issued an I/O                  */
  jobio = '        '
  ucbioq  = storage(d2x(c2d(ucba) - 44),4)
  if c2d(ucbioq) ¬= 0 then do
           asid  = storage(d2x(c2d(ucbioq) + 28),2)
           jobio = getjbn(c2d(asid))
           if c2d(asid) = 1 then jobio = '        ' /*  *master*  */
           end
/*    Determine unit status ; we assume that :               */
/*   - not ready + allocated          = mount pending        */
/*   - ready + allocated + jobname    = I/O in progress      */
/*   - ready + allocated + no jobname = in use               */
/*   - ready + not allocated + volser = mounted              */
/* List of status :                                          */
/*    " I / O"   "in use"   "mounted"   "rewindng"           */
/*    "Intervnt"   "Mount Pd"   "unloadng"                   */
  action = '         '
  ucbflc  =     storage(d2x(c2d(ucba) + c2d('14'x)),1)
  if alloc = 'Y' & nr = 'NRD'   then action = ' Mount Pd'
  if alloc = 'Y' & nr = 'RD ' & jobio ¬= '        ' ,
  then action = '  I / O  '
  if alloc = 'Y' & nr = 'RD ' & jobio  = '        ' ,
  then action = ' in use  '
  if alloc = 'N' & nr = 'RD ' & c2x(ucbvol1) ¬= '000000000000' ,
  then action = ' mounted '
  if bitand(ucbstat,'10'x) = '10'x then action = ' unloadng'
  if bitand(ucbwgt ,'10'x) = '10'x then action = ' rewindng'
  if bitand(ucbjbnr,'04'x) = '04'x then action = ' Mount Pd'
  if bitand(ucbstat,'01'x) = '01'x then sl = '    SL'
                                   else sl = '      '
/*              Process UCB extension      (IECDUCBT)        */
  if c2d(ucbextp) ¬= 0 then do
           ucbtfl1 = storage(d2x(c2d(ucbextp) + c2d('7b'x)),1)
           ucbtfl2 = storage(d2x(c2d(ucbextp) + c2d('7a'x)),1)
           ucbstab = storage(d2x(c2d(ucbextp) + c2d('72'x)),1)
           /* file sequence number                             */
           ucbfseq = storage(d2x(c2d(ucbextp) + c2d('6a'x)),2)
           if c2d(ucbfseq) < 1000 then ,
           fseq    = format(c2d(ucbfseq),3,0)   /* ds number  */
                          else do
                               fseq =  c2d(ucbfseq)%1000
                               fseq =  fseq||'K'
                               end
           if fseq = 0 then fseq= '   '
                       else ,
                            if sl = 'SL' then sl = fseq||',SL'
                                         else sl = fseq||',NL'
           ucbfser = storage(d2x(c2d(ucbextp) + c2d('74'x)),6)
           if bitand(ucbtfl1,'02'x) = '02'x then action = ' Mount Pd'
           if bitand(ucbtfl1,'04'x) = '04'x then lib = lib||'A'
                                            else lib = lib||' '
           if bitand(ucbtfl2,'20'x) = '20'x then lib = lib 'C'
                                            else lib = lib ' '
           if bitand(ucbstab,'01'x) ¬= '01'x then lib = lib ucbfser
                                            else lib = lib '      '
           end
/*     Process Magnetic tape device dependent extension      */
  if c2d(ucbextp) ¬= 0 then do
           ucbxtnb = storage(d2x(c2d(ucbextp) + c2d('7d'x)),3)
           if debug = 'Y' then say '    ucbxtnb=' c2x(ucbxtnb)
           /* number of IOs (from 0 to 65535)               */
           ucbsio  = storage(d2x(c2d(ucbxtnb) + c2d('06'x)),2)
           sio = format(c2d(ucbsio),5,0)    /* IOs number    */
           end
  if bitand(ucbflc,'08'x) = '08'x then action =  ' Intervnt'
  if debug = 'Y' then say '     ucbflc='  c2x(ucbflc)
/*         Find unit type                                    */
  ucbtype = c2x(storage(d2x(c2d(ucba) + c2d('10'x)),4))
  if ucbtype = '78008080'  then ucbtype = '3480 '
  if ucbtype = '78048080'  then ucbtype = '3480X'
  if ucbtype = '78048081'  then ucbtype = '3490 '
  if ucbtype = '32108003'  then ucbtype = '3422 '
  if ucbtype = '34008003'  then ucbtype = '3420 '
  if ucbtype = '32008003'  then ucbtype = '3420 '
/*         Find unit address and volser                      */
   ucbname = storage(d2x(c2d(ucba) + c2d('0d'x)),3)
   if c2x(ucbvol1) = '000000000000'    then ucbvol1 = ' n/a  '
   if c2x(substr(ucbvol1,1,1)) = 'FF'  then ucbvol1 = 'Privat'
/*         Display information line about the unit  (TSO)    */
  if debug = 'Y' then say ucbname 'ucb addr=' c2x(ucba) c2x(ucbvol1)
  if flag = 'T' then do
                     say ucbvol1 ucbname  action nr stat sl ,
                     ucbtype jobio sio lib chps
                     end
/*         Display information line about the unit  (ISPF)   */
  if flag = 'I' then address ispexec "TBADD TAPETB "
  end                                    /* process next ucb */
/*  If TSO,  display totals, then stop                       */
  if flag = 'T' then say ,
              '('||toton||' online units / '||tot||' generated)'
/*  If ISPF, display the table, and loop till END key pressed*/
  if flag = 'I' then do
      total = '('||toton||'/'||tot||')'
      address ispexec "TBTOP   TAPETB "
      address ispexec "TBDISPL TAPETB PANEL(OTAPEP)"
      code = rc
      end
  end                                    /* process next ISPF ENTER */
  exit
/*----------------------- Rexx subroutine -------------------------*/
/* Get the jobname corresponding to an asid number                 */
/*         jobname = getjbn(asid)                                  */
/*-----------------------------------------------------------------*/
 getjbn: procedure
 arg asid
 cvt  = storage(10,4)                   /* cvt address in memory   */
 asvt   = storage(d2x(556+c2d(cvt)),4)  /* asvt address            */
 offset = 4*asid-4
 ascb   = storage(d2x(offset+528+c2d(asvt)),4)
 if substr(c2x(ascb),1,1) = '8' then do /* bypass this asvt entry  */
        return '?'
        exit(0)
        end
 ascbjbni   = storage(d2x(172+c2d(ascb)),4)   /* address of jobname */
 ascbjbns   = storage(d2x(176+c2d(ascb)),4)   /* address of stcname */
 if c2x(ascbjbns) ¬= 0 then jobname = storage(c2x(ascbjbns),8)
 if c2x(ascbjbni) ¬= 0 then jobname = storage(c2x(ascbjbni),8)
 return jobname

OTAPEP PANEL

)ATTR
 ó TYPE(INPUT) INTENS(LOW)
 | TYPE(OUTPUT) INTENS(HIGH)
 ! TYPE(OUTPUT) INTENS(LOW)
 $ TYPE(TEXT)  INTENS(HIGH)  COLOR(YELLOW)
 % TYPE(TEXT)  INTENS(HIGH)  COLOR(RED)  HILITE(REVERSE)
)BODY
+COMMAND ===> _ZCMD
+                                                                $Scroll>óZ   +
|ZUSER |ZSYSID%   O n l i n e   T a p e   U n i t s     !TOTAL    |ZJDATE |ZTIME
+
$Volser Cua  ----Status----   Ds    Type  Job in    #I/O Acl/ Last   Chpids
$                                           I/O          Comp open
)MODEL
óZ     !Z  |ACTION   |NR |Z!SL     !Z    |JOBIO   |SIO   !LIB       !CHPS
)INIT
  .ZVARS = '(ZSCML UCBVOL1 UCBNAME STAT UCBTYPE)'
)PROC
)END


Thierry Falissard
MVS Manager (France)                                                         c X

