Automatic extent reduction

I recently had reason to automate the process of consolidating
extents for multiple-extent partitioned and sequential files.
After installing DFSMS, this remained as one of the few
DASD management tasks still handled manually. My shop has
a product which intercepts x37 abend processing including
allowance for volume switching when 16 extents are reached
on one volume. Thus it is not uncommon to have multi-extent,
multi-volume files. ISMF offers the CONDENSE verb but I do
not have DFHSM and, even if I did, this would seem best
suited to processing a limited number of files. I needed the
ability to run a job which would examine the whole DASD
pool and consolidate appropriate PS and PO files with multiple
extents. Initially I tried to use DFDSS's ability to copy only
filtered datasets. This option did not prove to be very practical
as the job ran for much too long and the flexibility within a
single step was limited.

In contrast, I had recently written other programs to interface
with IDCAMS DCOLLECT and was quite pleased with the
speed at which data could be collected. In my environment it
takes only one and a half minutes to collect data for
approximately 20,000 datasets. I decided to write a program
which would interface with DCOLLECT to determine which
files were candidates for extent reduction, and then call DFDSS
to do the actual reduction. The Assembler program, called
REDUCEXT, was written in a DFSMS environment but is
applicable to non-DFSMS datasets as well.

To maximize flexibility, REDUCEXT accepts PARM values
which determine the logic path used to perform extent
reduction. Two values (VL and SG) are available to indicate
which volumes or storage groups are used to select datasets. If
neither VL nor SG is coded, all volumes are processed. After
collecting data for appropriate volumes, each dataset is
individually examined. Non-temporary datasets, which have a
DSORG of PO or PS and are not marked unmovable, are
considered potential candidates. An NX PARM tells the
program what value to use in the extent comparison. A dataset
must have a number of extents greater than or equal to the NX
value for reduction to take place. If NX is not coded, a default
value of 03 is used. Note that when a dataset goes to multiple
volumes, it will show up in DCOLLECT as having 16 extents
on the primary volume with additional records indicating
extents on other volumes. Thus an NX value of 16 can be used
to consolidate multi-volume datasets back to one volume. For
this same reason, when an NX value larger than 16 is coded it
is not accepted.

It is possible to take two different approaches to extent
reduction. For DFSMS-managed datasets, extents are reduced
by just issuing one DFDSS copy against the dataset. This will
move it to another appropriately selected DFSMS volume and
consolidate extents in the process. In the case of unmanaged
datasets, it is necessary to inform DFDSS which volume to
copy the dataset to. This is communicated to the program via
PARM WK. The program considers this to be an interim work
volume. By default, after copying the dataset to the work
volume it will be copied back to the source volume. If you do
not wish to copy it back, an option called ONEWAY can be
coded to bypass the copy back for unmanaged datasets.
Managed datasets will always be copied back into a DFSMS
pool. Although the work volume technique is primarily for
unmanaged data, I found it necessary for some managed
datasets when it was not possible to allocate another DFSMS
volume. An example of this is when a dataset resides on a
volume which is the only one in a storage group, and no other
storage group can be made available.

When extent reduction is attempted on a system dataset with a
high-level qualifier of SYS1, DFDSS will, by default, not
process it. If it is desirable to process these datasets, a PARM
of SYS1 can be coded to bypass this precaution. If there is a
need to determine which datasets will be selected prior to
actual processing, two options exist. When PARM SIM is
coded, only the simulated input which would have been
processed by DFDSS is displayed. When PARM NORUN is
coded, the COPY requests are passed to DFDSS in NORUN
mode. This is especially useful to determine datasets that
cannot be processed because of outstanding enqueues.


JCL TO EXECUTE REDUCEXT

//*  This job can be run to consolidate multiple extent PO and PS files.
//* Parm values: VL=;  Volume(s) eligible for processing. Mask * can be used
//*                    to indicate all remaining characters. If neither VL or
//*                    SG are coded, the default is all (*).
//*              SG=;  Storage group eligible for processing. No default.
//*              NX=;  Number of extents.  Datasets with a lesser number of
//*                    extents will not be processed.  Two digits with leading
//*                    zero.  Default is 03.
//*              SIM;  Only the simulated input to DFDSS is displayed.
//*              NORUN;  DFDSS is called in 'NORUN' mode.
//*              WK=;  Requested volume is used as an interim work pack.
//*              ONEWAY; Non-SMS datasets are not copied back to source volume.
//*              SYS1;  Processing of SYS1 datasets is permitted.
//STEP1    EXEC PGM=REDUCEXT,
//       PARM=('SG=SG3390','NX=05',SIM,ONEWAY,SYS1,'WK=MVS021')
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   UNIT=VIO,SPACE=(CYL,(10,1))
//DCOLLECT DD   UNIT=VIO,SPACE=(CYL,(10,1)),
//       DCB=(LRECL=264,RECFM=VB,DSORG=PS)
//DISPLAY  DD   SYSOUT=*


SOURCE CODE FOR REDUCEXT

R1        EQU   1       PARM ADDRESS
R4        EQU   4       WORK REG
R5        EQU   5       WORK REG
R6        EQU   6       WORK REG
R7        EQU   7       DFDSS ENTRY POINT
R9        EQU   9       DCOLLECT RECORD BASE
R12       EQU   12      PROGRAM BASE
R13       EQU   13      REG SAVE ADDRESS
R14       EQU   14      RETURN ADDRESS
R15       EQU   15      RETURN CODE WORK REG
REDUCEXT  CSECT
          STM   R14,R12,12(R13)        HOUSEKEEPING
          BALR  R12,0
          USING *,R12
          LA    R4,REGSAVE
          ST    R4,8(R13)
          ST    R13,4(R4)
          LR    R13,R4
          L     R4,0(R1)               GET PARM LENGTH ADDRESS
          LH    R5,0(R4)               LENGTH OF PARM DATA
          LTR   R5,R5                  IS IT ZERO?
          BZ    REDUCX52               YES, NO PARM
          LA    R5,2(R5,R4)            END OF PARM DATA
          LA    R4,1(,R4)              POSITION FOR COMPARE
REDUCX02  LA    R4,1(,R4)              POSITION FOR COMPARE
          CLC   0(3,R4),=C'NX='        NUMBER OF EXTENTS?
          BE    REDUCX30               YES, SAVE IT
          CLC   0(3,R4),=C'SG='        STORAGE GROUP?
          BE    REDUCX10               YES, SAVE IT
          CLC   0(3,R4),=C'VL='        VOLUME?
          BE    REDUCX15               YES, SAVE IT
          CLC   0(3,R4),=C'WK='        WORK VOLUME?
          BE    REDUCX25               YES, SAVE IT
          CLC   0(3,R4),=C'SIM'        SIMULATE?
          BE    REDUCX35               YES, SET FLAG
          CLC   0(5,R4),=C'NORUN'      NORUN?
          BE    REDUCX40               YES, SET FLAG
          CLC   0(6,R4),=C'ONEWAY'     COPY ONLY ONEWAY?
          BE    REDUCX32               YES, SET FLAG
          CLC   0(4,R4),=C'SYS1'       PROCESS SYS1?
          BE    REDUCX37               YES, SET IT UP
REDUCX05  BCTR  R4,0                   BACK UP 1 CHARACTER
          MVC   WTOBPARM+32(8),0(R4)   SET UP BAD PARM DISPLAY
          WTO   MF=(E,WTOBPARM)        INDICATE BAD PARM DATA
          ABEND 997
REDUCX10  LA    R6,DCOLSTO2            POINT TO DCOLLECT STORGRP
          MVI   PRIMEFLG,C'1'          INDICATE THERE WAS A STORGRP
          MVC   DCOLSTO1,=C' STOG('    PRIME DCOLLECT
          MVI   DCOLSTO3,C')'
          LA    R4,3(R4)               POINT TO STORGRP CHARACTER
          B     REDUCX20               GO MOVE IT
REDUCX15  LA    R6,DCOLVOL2            POINT TO DCOLLECT VOLUME
          MVI   PRIMEFLG,C'1'          INDICATE THERE WAS A VOLUME
          MVC   DCOLVOL1,=C' VOL('     PRIME DCOLLECT
          MVI   DCOLVOL3,C')'
          LA    R4,3(R4)               POINT TO VOLUME CHARACTER
REDUCX20  MVC   0(1,R6),0(R4)          MOVE CHARACTER
          LA    R4,1(R4)               NEXT CHARACTER
          CR    R4,R5                  AT END OF PARMS?
          BE    REDUCX52               IF YES, GO PROCESS
          CLI   0(R4),C','             IS IT A COMMA?
          BE    REDUCX02               IF YES, WHAT'S NEXT
          LA    R6,1(R6)               NEXT POSITION IN RECORD
          B     REDUCX20               GO MOVE IT
REDUCX25  LA    R4,3(R4)               POINT TO WORK VOLUME
          MVC   WKPARM(6),0(R4)        SAVE WORK VOLUME
          MVI   WORKFLG,C'1'
          LA    R4,6(R4)               SKIP OVER VOLUME
          B     REDUCX50               GO CHECK FOR END
REDUCX30  LA    R4,3(R4)               POINT TO NUMBER EXTENTS
          MVC   NXPARM(2),0(R4)        MOVE NUMBER EXTENTS
          PACK  DBLWORK1,NX16          PREPARE FOR COMPARE
          PACK  DBLWORK2,NXPARM        PACK NX PARM
          CP    DBLWORK1,DBLWORK2      IS 16 < PARM?
          BL    REDUCX05               IF LESS, NO GOOD
          LA    R4,2(R4)               JUMP PAST NX VALUE
          B     REDUCX50               GO CHECK FOR END
REDUCX32  MVI   WAYFLG,C'1'            INDICATE ONEWAY COPY
          LA    R4,6(R4)               SKIP OVER ONEWAY
          B     REDUCX50               GO CHECK FOR END
REDUCX35  MVI   SIMFLG,C'1'            INDICATE SIMULATION
          LA    R4,3(R4)               JUMP PAST SIM
          B     REDUCX50               GO CHECK FOR END
REDUCX37  MVC   COPYSYS1,PROCSYS1      INDICATE OK TO PROCESS SYS1
          LA    R4,4(R4)               SKIP OVER SYS1
          B     REDUCX50               GO CHECK FOR END
REDUCX40  MVI   NORUNFLG,C'1'          INDICATE NORUN
          LA    R4,5(R4)               SKIP OVER NORUN
REDUCX50  CR    R4,R5                  AT END OF PARMS?
          BE    REDUCX52               IF YES, GO PROCESS
          B     REDUCX02               GO CHECK NEXT PARM
REDUCX52  CLI   PRIMEFLG,C'1'          WAS THERE A STORGRP OR VOLUME?
          BE    REDUCX55               IF YES, CONTINUE
          MVC   DCOLVOL1,=C' VOL('     IF NO, NEED TO PRIME DCOLLECT
          MVC   DCOLVOL2,=C'*     '
          MVI   DCOLVOL3,C')'
REDUCX55  CLC   NXPARM,=C'  '          WAS THERE AN NX PARM?
          BNE   REDUCX60               IF YES, GO PROCESS
REDUCX57  PACK  DBLWORK2,NXDEFLT       NO NX PARM, USE DEFAULT
REDUCX60  OPEN  (SYSIN,(OUTPUT))       GET READY FOR DCOLLECT
          PUT   SYSIN,DCOLCARD         PUT DCOLLECT OUT TO IDCAMS
          CLOSE SYSIN                  CLOSE SYSIN SO IDCAMS CAN READ
          LA    R1,0                   PREPARE FOR IDCAMS LINK
          LINK  EP=IDCAMS              CALL IDCAMS TO DO DCOLLECT
          LTR   R15,R15                ZERO RC FROM IDCAMS DCOLLECT?
          BZ    REDUCX65               IF YES, CONTINUE
          WTO   '*  NON ZERO RC FROM DCOLLECT, REVIEW SYSPRINT *'
          ABEND   998
REDUCX65  LOAD  EP=ADRDSSU             GET READY TO CALL DFDSS
          LR    R7,0                   SAVE DFDSS ENTRY POINT
          OPEN  DCOLLECT               PREPARE TO READ DCOLLECT DATA
          CLI   SIMFLG,C'1'            ARE WE SIMULATING?
          BE    REDUCX70               IF YES, OPEN DISPLAY
          CLI   NORUNFLG,C'1'          IS THIS A NORUN?
          BE    REDUCX75               IF YES, CONTINUE ON
          MVC   OPTPTR,ZEROADDR        INDICATE NO PARMS PRESENT
          B     REDUCX75               IF NO, IGNORE DISPLAY
REDUCX70  OPEN  (DISPLAY,(OUTPUT))     GET READY FOR DISPLAY
          PUT   DISPLAY,SIMLINE        INDICATE SIMULATE RUN ONLY
REDUCX75  GET   DCOLLECT               READ DATA FROM DCOLLECT
          LA    R9,4(R1)               POINT TO RECORD
          USING IDCDOUT,R9             ADDRESS DCOLLECT RECORD
          CLI   DCURCTYP,C'D'          DATASET RECORD?
          BNE   REDUCX75               IF NO, DON'T WANT IT
          TM    DCDFLAG1,DCDTEMP       IS IT TEMPORARY?
          BO    REDUCX75               IF YES, DON'T WANT IT
          TM    DCDDSORG,DCDDSGU       IS IT UNMOVABLE?
          BO    REDUCX75               IF YES, DON'T WANT IT
          CLC   DCDVOLSR,DCDDSSER      MULTI-VOLUME RECORD?
          BNE   REDUCX75               IF YES, DON'T WANT IT
          TM    DCDDSORG,DCDDSGPS+DCDDSGPO IS IT PS OR PO?
          BZ    REDUCX75               IF NO, DON'T WANT IT
          MVC   SAVEXTNT(1),DCDNMEXT   PREPARE FOR
          L     R4,SAVNMEXT               EXTENT COMPARE
          CVD   R4,DBLWORK1            CONVERT TO DECIMAL
          CP    DBLWORK1,DBLWORK2      COMPARE ACTUAL WITH PARM
          BL    REDUCX75               IF LESS, BYPASS DATASET
          CLI   WORKFLG,C'1'           IS THERE A WORK VOLUME?
          BNE   REDUCX80               IF NO, DON'T SET IT UP
          MVC   COPYODY,WKPARM         SAVE WORK VOLUME
          MVI   COPYCONT,C'-'          INDICATE INPUT IS CONTINUED
REDUCX80  MVC   COPYDSN(44),DCDDSNAM   PRIME THE DATASET FOR DFDSS
          CLI   SIMFLG,C'1'            IF THIS A SIMULATION?
          BNE   REDUCX85               IF NO, CALL DFDSS
          PUT   DISPLAY,COPYCRD1       DISPLAY COPY RECORD 1
          PUT   DISPLAY,COPYCRD2       DISPLAY COPY RECORD 2
          CLI   WORKFLG,C'1'           NEED RECORD 3?
          BNE   REDUCX75               IF NOT, CONTINUE ON
          PUT   DISPLAY,COPYCRD3       DISPLAY COPY RECORD 3
          B     REDUCX75               GO GET NEXT DCOLLECT RECORD
REDUCX85  OPEN  (SYSIN,(OUTPUT))       PREPARE TO WRITE DFDSS INPUT
          PUT   SYSIN,COPYCRD1         GIVE RECORD 1 TO DFDSS
          PUT   SYSIN,COPYCRD2         GIVE RECORD 2 TO DFDSS
          CLI   WORKFLG,C'1'           NEED RECORD 3?
          BNE   REDUCX90               IF NOT, SKIP
          MVC   COPYNULL,NULLCLAS      SET UP NULLSTORCLAS
          MVC   COPYBYP,BYPASACS       SET UP BYPASSACS
          PUT   SYSIN,COPYCRD3         GIVE RECORD 3 TO DFDSS
          CLI   NORUNFLG,C'1'          IS THIS A NORUN?
          BE    REDUCX90               IF YES, DON'T COPY BACK
          TM    DCDFLAG1,DCDSMSM       IS IT SMS MANAGED?
          BO    REDUCX87               IF YES, CAN'T BYPASS COPY BACK
          CLI   WAYFLG,C'1'            ONEWAY COPY REQUESTED?
          BE    REDUCX90               IF YES, DON'T COPY BACK
REDUCX87  MVC   COPYODY,DCDVOLSR       KEEP ORIGINAL VOLUME
          MVI   COPYNULL,C' '          BLANK OUT NULLSTORCLAS
          MVC   COPYNULL+1(L'COPYNULL-1),COPYNULL
          MVI   COPYBYP,C' '           BLANK OUT BYPASSACS
          MVC   COPYBYP+1(L'COPYBYP-1),COPYBYP
          PUT   SYSIN,COPYCRD1         GIVE RECORD 1 TO DFDSS
          PUT   SYSIN,COPYCRD2         GIVE RECORD 2 TO DFDSS
          PUT   SYSIN,COPYCRD3         GIVE RECORD 3 TO DFDSS
REDUCX90  MVC   WTOINPRG+24(44),DCDDSNAM PUT DATASET IN PROCESSING MSG
          WTO   MF=(E,WTOINPRG)        DISPLAY PROCESSING MSG
          CLOSE SYSIN                  CLOSE SO DFDSS CAN READ
          LR    15,R7                  LOAD DFDSS ENTRY POINT
          CALL  (15),(OPTPTR),VL       CALL DFDSS
          LTR   R15,R15                WAS COPY RC ZERO?
          BZ    REDUCX75               IF YES, CONTINUE
          WTO   MF=(E,WTONONZR)        DISPLAY NON ZERO MSG
          B     REDUCX75               GO READ NEXT DCOLLECT RECORD
REDUCX95  CLOSE DCOLLECT               CLEAN UP
          L     R13,REGSAVE+4          RESTORE REGISTERS
          ST    R15,16(R13)                      AND
          LM    R14,R12,12(R13)                     GO
          BR    R14                                    HOME
          LTORG
WTOINPRG  WTO   'PROCESSING DATASET: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
               XXXXXXXXXX',MF=L
WTONONZR  WTO   '* NON ZERO RC FOR PRIOR COPY, REVIEW SYSPRINT *',MF=L
WTOBPARM  WTO   '* BAD PARM DATA STARTING AT XXXXXXXX *',MF=L
REGSAVE   DS    18F                    REGISTER SAVE AREA
          CNOP  2,4
OPTPTR    DC    AL2(OPTLEN)            PARM TO PASS DFDSS
OPTION    DC    C'TYPRUN=NORUN'
OPTLEN    EQU   *-OPTION
DBLWORK1  DS    D                      ACTUAL VALUE WORK AREA
DBLWORK2  DS    D                      PARM VALUE WORK AREA
NXPARM    DC    CL2' '                 NX PARM
NXDEFLT   DC    CL2'03'                DEFAULT NX PARM
NX16      DC    CL2'16'                CHECK FOR NX GREATER
WKPARM    DC    CL6' '                 WK PARM
SAVNMEXT  DS    0F                     DSN NUMBER OF EXTENTS
          DC    X'000000'
SAVEXTNT  DS    X
PRIMEFLG  DC    C' '                   DCOLLECT VOLUME PRIME FLAG
NORUNFLG  DC    C' '                   NORUN FLAG
SIMFLG    DC    C' '                   SIMULATION FLAG
WORKFLG   DC    C' '                   WORK VOLUME FLAG
WAYFLG    DC    C' '                   ONEWAY COPY FLAG
ZEROADDR  DC    X'0000'                USED IF NORUN NOT SPECIFIED
ZERO      DC    X'0C'                  USED TO CHECK FOR PARM
NULLCLAS  DC    C' NULLSTORCLAS'
BYPASACS  DC    C' BYPASSACS(**)'
PROCSYS1  DC    C'PROCESS(SYS1)'
SIMLINE   DC    CL80'** SIMULATION ONLY **' SIMULATION MESSAGE
DCOLCARD  DC    CL80' '                IDCAMS DCOLLECT RECORD
          ORG   DCOLCARD
          DC    C' DCOLLECT'
          DC    C' OFILE(DCOLLECT)'
DCOLVOL1  DC    CL5' '
DCOLVOL2  DC    CL6' '
DCOLVOL3  DC    C' '
DCOLSTO1  DC    CL6' '
DCOLSTO2  DC    CL8' '
DCOLSTO3  DC    C' '
          DC    C' NOVOLUMEINFO'
          ORG
COPYCRD1  DC    CL80' '                DFDSS COPY RECORD 1
          ORG   COPYCRD1
          DC    C' COPY'
          DC    C' DATASET (INCLUDE ('
COPYDSN   DS    CL44' '
          DC    C'))'
          DC    C' -'
          ORG
COPYCRD2  DC    CL80' '                DFDSS COPY RECORD 2
          ORG   COPYCRD2
          DC    C' DELETE ALLDATA(*) ALLEXCP PURGE '
COPYSYS1  DC    CL13' '
COPYCONT  DS    C
          ORG
COPYCRD3  DC    CL80' '                DFDSS COPY RECORD 3
          ORG   COPYCRD3
          DC    C' OUTDYNAM('
COPYODY   DS    CL6' '
          DC    C')'
          DC    C' CATALOG'
COPYNULL  DC    C' NULLSTORCLAS'
COPYBYP   DC    C' BYPASSACS(**)'
          ORG
DISPLAY   DCB   DDNAME=DISPLAY,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=80
DCOLLECT  DCB   DDNAME=DCOLLECT,DSORG=PS,MACRF=GL,EODAD=REDUCX95
SYSIN     DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=F,LRECL=80,       X
               BLKSIZE=80
          IDCDOUT
          END


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                        c Xephon 1992

