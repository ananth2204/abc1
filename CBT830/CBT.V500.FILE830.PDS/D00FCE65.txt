Using the TSO/E variable access routine

Contrary to what has been stated in a previous issue of MVS
Update, TSO/E CLISTs are not superseded by REXX EXECs.
In fact, IBM continues to enhance TSO/E functionality.  One
such example is the TSO/E variable access routine
(IKJCT441).  This feature, introduced I believe in TSO/E
Version 1.4, allows a user to perform the following for CLIST
and REXX variables:

o      Update or create a variable value
o      Return a variable value
o      Return all active variables and their values.

The address of the variable access routine can be found in the
TSVTVACC field of the TSO Vector Table (TVT).  The TVT
is pointed to by the CVTTVT field of the Communications
Vector Table (CVT).  Register 1 is used to point to the
parameter list for IKJCT441.  The parameter list has nine
fields, with the last three being optional.  Basically, the
variable access routine needs to know the type of function
being requested, the location and length of the variable name,
the location and length of the variable value, and a token which
is used only when IKJCT441 is called to find all active
variables.  The ninth parameter is a chain pointer to the next set
of information, if requested.  In this way, requests for multiple
variables can be serviced in a single call to IKJCT441.  In
practice, however, in order to make code easier to read, I opt
for coding separate calls to the variable access routine.

IKJCT441 is meant to be called in either a CLIST or REXX
environment.  Failure to do so will result in a return code of 40
or X'28'.  IKJCT441 does not allow a caller to update a CLIST
built-in function or control variable, instead setting a return
code of 16 or X'10'.  If IKJCT441 is successful in setting or
retrieving a variable, a return code of 0 is returned.  Other
return codes and further details on the parameter list format can
be found in the TSO/E Programming Services manual (SC28-
1875 for TSO/E Version 2).

The sample program below uses IKJCT441 to set up a group of
variables.  The program, called CLISTVAR, calls IKJCT441
once for each variable to be set.  The variable names and
values are documented in comments at the beginning of the
program.  Also stated in the beginning of the program is the
fact that the program name must appear in the TSO/E
authorized commands table located in the IKJTSOxx member
of SYS1.PARMLIB.  This is because the program issues the
MODESET macro to go back and forth between key zero and
key eight in order to access some of the information it requires.
A sample section of the IKJTSOxx member is as follows:

     AUTHCMD NAMES(          /* AUTHORIZED COMMANDS      */      +
        RECEIVE              /* TSO COMMANDS             */      +
        TRANSMIT XMIT        /*                          */      +
        LISTB    LISTBC      /*                          */      +
        SE       SEND        /*                          */      +
        RACONVRT             /*                          */      +
        SYNC                 /*                          */      +
        CLISTVAR)            /* BUILD CLIST VARIABLES    */      +

The program loads the address of the variable access routine
from the TVT.  If the address is zero, it attempts to link to
IKJCT441 instead.  This is a convention used for calling many
service routines where their address might or might not be in a
control block.  The rationale is to try to locate the module in
the system LINKLIST and/or LPALIST libraries if the module
address is not stored in the TVT.

Again I would like to reiterate that CLISTs are still very much
alive and well.  I have experimented with REXX when it first
became available on my system and have found a few areas
where REXX has no equivalent to the CLIST counterparts.
One such area is the passing of positional and keyword
parameters which is trivial in CLIST but just about impossible
in REXX.  Add to this the fact that the CLIST language has
been in existence a very long time (not a great reason by itself),
and that most of the (MVS) world has extensive experience
with the CLIST language (a pretty good reason) as well as the
fact that IBM provides full support for CLISTs and is still
enhancing the CLIST language (a very good reason).  Based on
the information above, I conclude that the CLIST language will
probably be the choice of many (especially systems
programmers) for quite a while to come.


SOURCE CODE FOR CLISTVAR

***********************************************************************
* FUNCTION: TSO COMMAND TO GET THE FOLLOWING FIELDS IN THE FOLLOWING  *
*           CLIST VARIABLES FOR LATER CLIST USE:                      *
*     FIELD                                VARIABLE NAME    VALUES    *
*     JOBNAME (FOR ANY BATCH JOB,          &JOBNAME         JOBNAME   *
*              STARTED TASK OR TSO USER)                              *
*     JOBID (JOBNNNNN/TSUNNNNN/STCNNNNN)   &JOBID           JES JOBID *
*     SMF SYSTEM ID                        &SMFID           SMF ID    *
*     TIME FROM TIME MACRO (HHMMSSTH)      &TIME            TIME      *
*     OPERATING SYSTEM LEVEL               &OPSYS           MVS/370   *
*                                                           MVS/XA    *
*                                                           MVS/ESA   *
*     USER HAS ACCOUNT AUTHORITY *         &ACCT *          Y OR N    *
*     USER HAS OPERATOR AUTHORITY *        &OPER *          Y OR N    *
*     USER HAS MOUNT AUTHORITY *           &MOUNT *         Y OR N    *
*     ITEMS WITH AN ASTERISK (*) ARE ONLY VALID FOR TSO USERS AND     *
*     ARE SET TO 'N' FOR ALL OTHER TYPES OF ADDRESS SPACES.           *
*     THIS COMMAND MUST BE PUT IN THE AUTHORIZED COMMAND TABLE TO     *
*     RUN AUTHORIZED (BECAUSE IT ISSUES MODESET MACROS).              *
***********************************************************************
CLISTVAR CSECT
         SAVE  (14,12),,CLISTVAR-&SYSDATE
         LR    R12,R15                 LOAD BASE REGISTER
         USING CLISTVAR,R12            ADDRESSABILITY
         ST    R13,SAVEAREA+4          SAVE A(CALLERS S/A)
         LA    R15,SAVEAREA            LOAD A(MY S/A)
         ST    R15,8(,R13)             SAVE A(MY S/A) IN CALLERS S/A
         LR    R13,R15                 LOAD A(MY S/A)
*******  BUILD TIME
         TIME  DEC                     GET TIME
         ST    R0,TOD                  STORE R0 AS TOD
         UNPK  TIME(9),TOD(5)          UNPACK TIME INTO VALUE FIELD
         OI    TIME+7,X'F0'            MAKE SIGN PRINTABLE
*******  BUILD OPERATING SYSTEM
         L     R14,CVTPTR              LOAD A(CVT)
         TM    CVTDCB-CVT(R14),CVTMVSE ARE WE IN 370-XA MODE
         BZ    SET370                  NO, GO SHOW 370
         TM    CVTDCB-CVT(R14),CVTOSEXT IS CVTOSLVL AREA PRESENT
         BZ    SETXA                   NO, GO SHOW XA
         MVC   OPSYS,=CL7'MVS/ESA'     SAY ESA MODE
         B     SETSMFID                GO SET SMF SYSTEM ID
SETXA    MVC   OPSYS,=CL7'MVS/XA '     SAY XA  MODE
         MVI   OPSYSLEN+3,X'06'        SET LENGTH TO 6
         B     SETSMFID                GO SET SMF SYSTEM ID
SET370   MVC   OPSYS,=CL7'MVS/370'     SAY 370 MODE
*******  BUILD SMF ID
SETSMFID L     R15,CVTSMCA-CVT(,R14)   LOAD A(SMCA)
         MVC   SMFSYSID,SMCASID-SMCABASE(R15) SAVE SMF SYSTEM ID
*******  BUILD JOB NAME
         L     R15,CVTTCBP-CVT(,R14)   LOAD A(TCB WORDS)
         L     R15,0(,R15)             LOAD A(CURRENT TCB)
         L     R15,TCBTIO-TCB(,R15)    LOAD A (TIOT)
         MVC   JOBNM,TIOCNJOB-TIOT1(R15) SAVE JOB NAME
         LA    R1,8                    LOAD MAX LENGTH OF JOBNM
         LA    R2,JOBNM+7              LOAD A(LAST BYTE)
JOBLOOP  CLC   0(1,R2),=C' '           IS THIS BYTE BLANK
         BNE   JOBDONE                 NO, GO SET LENGTH
         BCTR  R2,R0                   BACK UP ONE BYTE
         BCT   R1,JOBLOOP              ELSE, LOOP TO CHECK PREV. BYTE
JOBDONE  STCM  R1,1,JOBNMLEN+3         STORE LENGTH
         MODESET KEY=ZERO,MODE=SUP
*******  BUILD JOB ID
         L     R15,CVTTCBP-CVT(,R14)   LOAD A(TCBWORDS)
         L     R15,0(,R15)             LOAD A(CURRENT TCB)
         L     R15,TCBJSTCB-TCB(R15)   LOAD A(JOB STEP TCB)
         L     R15,TCBJSCB-TCB(R15)    LOAD A(JSCB)
         ST    R15,JSCBADDR            SAVE A(JSCB) FOR LATER
         L     R15,JSCBSSIB-IEZJSCB(,R15) LOAD A(SUBSYSTEM SSIB)
         MVC   JOBID,SSIBJBID-SSIB(R15) SAVE JOBID
*******  BUILD OPERATOR/ACCOUNT/MOUNT
         MVI   OPER,C'N'               ASSUME NO OPER
         MVI   ACCT,C'N'               ASSUME NO ACCOUNT
         MVI   MOUNT,C'N'              ASSUME NO MOUNT
         L     R15,JSCBADDR            LOAD A(JSCB)
         ICM   R15,15,JSCBPSCB-IEZJSCB(R15) LOAD A(PSCB) IF ANY
         BZ    NOPSCB                  SKIP IF NONE
         TM    PSCBATR1-PSCB(R15),PSCBCTRL DOES USER HAVE OPER
         BZ    CHKACCT                 NO, GO CHECK NEXT
         MVI   OPER,C'Y'               ELSE SHOW OPER
CHKACCT  TM    PSCBATR1-PSCB(R15),PSCBACCT DOES USER HAVE ACCT
         BZ    CHKMOUNT                NO, GO CHECK NEXT
         MVI   ACCT,C'Y'               ELSE SHOW ACCT
CHKMOUNT TM    PSCBATR1-PSCB(R15),PSCBVMNT DOES USER HAVE MOUNT
         BZ    NOPSCB                  NO, THEN DONE
         MVI   MOUNT,C'Y'              ELSE SHOW MOUNT
NOPSCB   EQU   *
         MODESET KEY=NZERO,MODE=PROB
*******  CALL VARIABLE ACCESS ROUTINE
         L     R15,CVTTVT-CVT(,R14)    LOAD A(TSVT)
         ICM   R2,15,TSVTVACC-TSVT(R15) LOAD A(VARIABLE ACCESS RTN)
         BNZ   CALL441                 IF PRESENT, CALL IKJCT441
* ENTRY CODE, VARIABLE NAME POINTER, VARIABLE NAME LENGTH,
* VARIABLE VALUE POINTER, VARIABLE VALUE LENGTH, ACCESS SERVICE TOKEN
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR1,NAMELEN1,SMFIDPTR,SMFIDLEN,     X
               TOKEN1),VL=1
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR2,NAMELEN2,JOBNMPTR,JOBNMLEN,     X
               TOKEN2),VL=1
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR3,NAMELEN3,TIMEPTR,TIMELEN,       X
               TOKEN3),VL=1
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR4,NAMELEN4,OPSYSPTR,OPSYSLEN,     X
               TOKEN4),VL=1
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR5,NAMELEN5,MOUNTPTR,MOUNTLEN,     X
               TOKEN5),VL=1
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR6,NAMELEN6,OPERPTR,OPERLEN,       X
               TOKEN6),VL=1
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR7,NAMELEN7,ACCTPTR,ACCTLEN,       X
               TOKEN7),VL=1
         LINK  EP=IKJCT441,                                            X
               PARAM=(ENTCODE,NAMEPTR8,NAMELEN8,MOUNTPTR,MOUNTLEN,     X
               TOKEN8),VL=1
         B     CHECKRC
CALL441  LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR1,NAMELEN1,SMFIDPTR,SMFIDLEN,TOKEN1),VL
         LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR2,NAMELEN2,JOBNMPTR,JOBNMLEN,TOKEN2),VL
         LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR3,NAMELEN3,TIMEPTR,TIMELEN,TOKEN3),VL
         LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR4,NAMELEN4,OPSYSPTR,OPSYSLEN,TOKEN4),VL
         LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR5,NAMELEN5,JOBIDPTR,JOBIDLEN,TOKEN5),VL
         LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR6,NAMELEN6,OPERPTR,OPERLEN,TOKEN6),VL
         LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR7,NAMELEN7,ACCTPTR,ACCTLEN,TOKEN7),VL
         LR    R15,R2                  LOAD A(IKJCT441)
         CALL  (15),                   A(IKJCT441)                     X
               (ENTCODE,NAMEPTR8,NAMELEN8,MOUNTPTR,MOUNTLEN,TOKEN8),VL
CHECKRC  LTR   R2,R15                  IS RETURN CODE = 0
         BZ    RETURN                  IF YES, GO RETURN TO CALLER
         TPUT  SMFSYSID,L'SMFSYSID     ELSE PRINT MESSAGE
         TPUT  JOBNM,L'JOBNM                PRINT MESSAGE
         TPUT  TIME,L'TIME                  PRINT MESSAGE
         TPUT  OPSYS,L'OPSYS                PRINT MESSAGE
         TPUT  JOBID,L'JOBID                PRINT MESSAGE
         MVC   PSCBDATA(1),OPER             MOVE INFO
         MVC   PSCBDATA+1(1),ACCT           MOVE INFO
         MVC   PSCBDATA+2(1),MOUNT          MOVE INFO
         TPUT  PSCBMSG,PSCBMSGL             PRINT MESSAGE
RETURN   LR    R15,R2                  RELOAD RETURN CODE
         L     R13,SAVEAREA+4          LOAD A(CALLERS S/A)
         RETURN (14,12,),RC=(15)       RETURN TO CALLER
SAVEAREA DS    18F                     OS SAVEAREA
JSCBADDR DC    A(0)                    SAVEAREA FOR JSCB ADDRESS
ENTCODE  DC    A(TSVEUPDT)             ENTRY CODE FOR SETTING VALUES
PSCBMSG  DC    C'OPER/ACCT/MOUNT='
PSCBDATA DC    CL3' '                  FIELD FOR FLAGS
PSCBMSGL EQU   *-PSCBMSG               EQUATE FOR MESSAGE LENGTH
         DS    0D
TOD      DS    PL5'0'                  SAVEAREA FOR TOD
NAMEPTR1 DC    A(NAMEVAL1)             POINTER TO THE VARIABLE NAME
SMFIDPTR DC    A(SMFSYSID)             POINTER TO THE VARIABLE VALUE
NAMELEN1 DC    A(L'NAMEVAL1)           LENGTH OF THE VARIABLE NAME
NAMEVAL1 DC    C'SMFID'                VARIABLE NAME
SMFSYSID DC    CL(L'SMCASID)' '        VARIABLE VALUE
SMFIDLEN DC    A(L'SMFSYSID)           VARIABLE LENGTH
TOKEN1   DC    A(0)                    TOKEN
NAMEPTR2 DC    A(NAMEVAL2)             POINTER TO THE VARIABLE NAME
JOBNMPTR DC    A(JOBNM)                POINTER TO THE VARIABLE VALUE
NAMELEN2 DC    A(L'NAMEVAL2)           LENGTH OF THE VARIABLE NAME
NAMEVAL2 DC    C'JOBNAME'              VARIABLE NAME
JOBNM    DC    CL8' '                  VARIABLE VALUE
JOBNMLEN DC    A(L'JOBNM)              VARIABLE LENGTH
TOKEN2   DC    A(0)                    TOKEN
NAMEPTR3 DC    A(NAMEVAL3)             POINTER TO THE VARIABLE NAME
TIMEPTR  DC    A(TIME)                 POINTER TO THE VARIABLE VALUE
NAMELEN3 DC    A(L'NAMEVAL3)           LENGTH OF THE VARIABLE NAME
NAMEVAL3 DC    C'TIME'                 VARIABLE NAME
TIME     DC    CL8' '                  VARIABLE VALUE
         DS    X                       PAD BYTE FOR UNPACK OF TIME
TIMELEN  DC    A(L'TIME)               VARIABLE LENGTH
TOKEN3   DC    A(0)                    TOKEN
NAMEPTR4 DC    A(NAMEVAL4)             POINTER TO THE VARIABLE NAME
OPSYSPTR DC    A(OPSYS)                POINTER TO THE VARIABLE VALUE
NAMELEN4 DC    A(L'NAMEVAL4)           LENGTH OF THE VARIABLE NAME
NAMEVAL4 DC    C'OPSYS'                VARIABLE NAME
OPSYS    DC    CL7' '                  VARIABLE VALUE
OPSYSLEN DC    A(L'OPSYS)              VARIABLE LENGTH
TOKEN4   DC    A(0)                    TOKEN
NAMEPTR5 DC    A(NAMEVAL5)             POINTER TO THE VARIABLE NAME
JOBIDPTR DC    A(JOBID)                POINTER TO THE VARIABLE VALUE
NAMELEN5 DC    A(L'NAMEVAL5)           LENGTH OF THE VARIABLE NAME
NAMEVAL5 DC    C'JOBID'                VARIABLE NAME
JOBID    DC    CL(L'SSIBJBID)' '       VARIABLE VALUE
JOBIDLEN DC    A(L'JOBID)              VARIABLE LENGTH
TOKEN5   DC    A(0)                    TOKEN
NAMEPTR6 DC    A(NAMEVAL6)             POINTER TO THE VARIABLE NAME
OPERPTR  DC    A(OPER)                 POINTER TO THE VARIABLE VALUE
NAMELEN6 DC    A(L'NAMEVAL6)           LENGTH OF THE VARIABLE NAME
NAMEVAL6 DC    C'OPER'                 VARIABLE NAME
OPER     DC    C' '                    VARIABLE VALUE
OPERLEN  DC    A(L'OPER)               VARIABLE LENGTH
TOKEN6   DC    A(0)                    TOKEN
NAMEPTR7 DC    A(NAMEVAL7)             POINTER TO THE VARIABLE NAME
ACCTPTR  DC    A(ACCT)                 POINTER TO THE VARIABLE VALUE
NAMELEN7 DC    A(L'NAMEVAL7)           LENGTH OF THE VARIABLE NAME
NAMEVAL7 DC    C'ACCT'                 VARIABLE NAME
ACCT     DC    C' '                    VARIABLE VALUE
ACCTLEN  DC    A(L'ACCT)               VARIABLE LENGTH
TOKEN7   DC    A(0)                    TOKEN
NAMEPTR8 DC    A(NAMEVAL8)             POINTER TO THE VARIABLE NAME
MOUNTPTR DC    A(MOUNT)                POINTER TO THE VARIABLE VALUE
NAMELEN8 DC    A(L'NAMEVAL8)           LENGTH OF THE VARIABLE NAME
NAMEVAL8 DC    C'MOUNT'                VARIABLE NAME
MOUNT    DC    C' '                    VARIABLE VALUE
MOUNTLEN DC    A(L'MOUNT)              VARIABLE LENGTH
TOKEN8   DC    A(0)                    TOKEN
         CVT   DSECT=YES,LIST=NO
         IEESMCA
         IKJTSVT
         IKJTCB DSECT=YES,LIST=NO
         IEZJSCB
         IEFJSSIB
         IKJPSCB
TIOT     DSECT
         IEFTIOT1
         END


                                                                  c Xephon 1991

