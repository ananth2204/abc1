Displaying console activity under TSO


PROBLEM ADDRESSED

Our company is a new IBM customer running MVS/ESA under
4381. Our CBIPO order did not contain the SDSF product.
Most MVS customers are familiar with SDSF capabilities,
which offer, among other things, the display of console
activity. I found it necessary to create the following program,
which enables TSO users to view messages from the master
console and allows authorized TSO users to enter commands.


SOLUTION

The following program is not a complete substitute for the
SDSF display log but has made life easier for our users. The
data is retrieved from the master trace from within the MVS
master address space.

This program uses MVS/ESA cross memory access to another
address space and requires MVS authority. It also allows users
with TSO OPER and ACCOUNT authority to issue commands
to MVS through the use of SVC 34.

The program is tested under MVS/ESA 3.1.2 and requires the
following:

1      The program must be linked with AC(1) and executed from
      an MVS-authorized library.

2      The program should be authorized under TSO (ie specified
      in IKJTSO00).

3      The program must be executed from within basic TSO or
      under ISPF through the call command.

This program demonstrates the following techniques, which
may interest systems programmers.

1      The use of full screen TPUT.

2      Cross memory access to another address space.

3      Switching between access register (AR) and normal mode.

4      The use of SVC 34 for command processing.

5      Retrieving the TSO user name and other TSO fields from
      the protected step control block.

Figure 1 shows an example of a typical display.

HBKCMND  TITLE 'DISPLAY MVSLOG CONSOLE ACTIVITY UNDER TSO
***********************************************************************
*=> MODULE NAME = HBKCMND                                             *
*=> DESCRIPTIVE NAME =  DISPLAY MVS CONSOLE LOG UNDER TSO             *
*=> FUNCTION = PROCESS MASTER ASCB LOG ENTRIES UNDER TSO. THE PROGRAM *
*   MUST RUN AUTHORIZED TO USE CROSS MEMORY UNDER MVS/ESA. THE ENTRY  *
*   OF MASTER ASID UNIQUE TOKEN IS PLACED IN THE AUTHORIZED ACCESS    *
*   LIST TABLE ENTRY. THE DATA IS PROCESSED AND DISPLAYED UNDER TSO   *
*   USING TPUT FULL SCREEN PROCESSING.                                *
*   THIS PROGRAM ALLOWS USERS WHO ARE AUTHORIZED FOR ACCOUNT AND OPER *
*   TSO COMMANDS TO ENTER COMMANDS TO MVS AND VIEW RESPONSE           *
*=> OPERATION = OPERATING UNDER MVS/ESA                               *
*=> RESTRICTIONS = USED UNDER MVS/ESA AND RUN AUTHORIZED WITH AC(1)   *
*=> PROCESSOR = ASM                                                   *
*=> ATTRIBUTES = PROTECT KEY 0                                        *
*=> ENTRY POINTS = HBKCMND  (ONLY ENTRY POINT)                        *
*=> LINKAGE      = CALL 'DATASET(HBKCMND)'                            *
*   DATASET = AUTHORIZED DATASET IN THE MVS APF AUTH TABLE            *
*=> INPUT = MASTER ASID LOG DATA                                      *
*=> OUTPUT = FULLSCREEN PAGE OF DISPLAY                               *
*=> EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14             *
*=> RETURN CODE = ZERO                                                *
*=> EXTERNAL REFERENCES =  NONE                                       *
*=> CONTROL BLOCKS = TCB,ASCB,PSCB,JSCB,BASE,MTTABLE,ASSB             *
*=> MACROS = MODESET,ALESERV,STFSMODE,STLINENO,TIME,SYSSTATE,YREGS    *
*                      TCLEARQ,STIMER,TPUT,TGET,WTO                   *
         YREGS                         REG EQUATES
CVTPNTR  EQU   X'10'                   CVT POINTER FROM PSA
PSATOLD  EQU   X'21C'                  TCB POINTER FROM PSA
*START AND BASE REG SET UP
HBKCMND  CSECT
         STM   R14,R12,12(R13)         SAVE REGS
         LR    R12,R15                 SET BASE REGS
         USING HBKCMND,R12             IDENTIFY BASE REGS
         LR    R11,R13                 CALLING PROG SAVE AREA PNTR
         LA    R13,PGMSAVE             MY SAVEAREA PNTR
         ST    R13,8(R11)              INTO CALLING PROG SAVEAREA.
         ST    R11,4(R13)              INTO MY SAVEAREA.
         L     R2,PSATOLD              TCB POINTER
         L     R2,TCBJSCB-TCB(R2)      JSCB POINTER
         L     R2,JSCBPSCB-IEZJSCB(R2) PSCB POINTER
*GET TSO USER NAME AND AUTHORITY
         USING PSCB,R2                 ADDRESS PSCB
         XR    R3,R3                   CLEAR REG
         IC    R3,PSCBUSRL             TSO USERNAME LENGTH
         BCTR  R3,0                    PREPARE FOR EXECUTE
         EX    R3,*+4                  MOVE THE USERNAME
         MVC   PAGEUSER+5(0),PSCBUSER  THE MVC INSTR
         MVC   MVSCMDL(1),PSCBATR1     AUTHORITY ATTR FOR LATER USE
         DROP  R2                      DROP USABILITY
         L     R2,CVTPNTR              CVT POINTER
         L     R2,CVTMSER-CVTMAP(R2)   MASTER SCHED.RESIDENT MSER PNTR
         ST    R2,SAVER2               SAVE MSER POINTER
         L     R3,BAASCB-BASE(R2)      MASTER ASCB PNTR
         L     R3,ASCBASSB-ASCB(R3)    ASID SECONDARY ADDR. PNTR
         MVC   PGMSTKN,ASSBSTKN-ASSB(R3) ASID STOKEN REQ. FOR ALESERV.
* ADD ASID TOKEN TO ALET
         MODESET KEY=ZERO,MODE=SUP     SUP. MODE FOR ALESERV
         ALESERV ADD,ALET=PGMALET,STOKEN=PGMSTKN,                      X
               CHKEAX=NO,ACCESS=PUBLIC
* FULLSCREEN MODE
         STFSMODE ON,INITIAL=YES       SET FULL SCREEN MODE
         STLINENO LINE=1               CLEAR THE SCREEN
         BAL   R14,CLEAR               CLEAR WORK AREAS
         TIME  DEC                     GET DATE IN R1 SIGNED DEC
         LR    R3,R1                   DATE FORMAT 00YYDDDF
         SRL   R3,16                   CLEAR DDDF
         STCM  R3,B'0001',WORKAREA+7   STORE RESULT
*CHECK LEAP YEAR
         TM    WORKAREA+7,X'01'
         BO    MVCDATE
         TM    WORKAREA+7,X'12'
         BM    MVCDATE
         MVI   PFEB,29                 UPDATE FOR LEAP YEAR
MVCDATE  MVC   ODATE+7(3),=X'402020'   PREPARE FOR EDIT
         ED    ODATE+8(2),WORKAREA+7   MOVE EDITED YEAR
         N     R1,=X'0000FFFF'         GET RID OF 00YY
         ST    R1,WORKAREA+4           PREPARE FOR CVB
         CVB   R1,WORKAREA             DDDF IN BINARY
         SLR   R0,R0                   CLEAR REG
         LA    R3,OYEARTAB-4           ADDRESS YEAR TABLE
DATELP   EQU   *
         SLR   R1,R0                   SUBTR LOGICAL PREV MONTH DAYS
         LA    R3,4(R3)                NEXT MONTH ENTRY
         IC    R0,0(R3)                GET THE NO OF DAYS
         CLR   R0,R1                   COMPARE LOGICAL
         BL    DATELP                  LOOP UNTIL NOT LOWER
         MVC   WORKAREA,=8XL1'00'      CLEAR WORK AREA
         CVD   R1,WORKAREA             CONVERT REST OF NO OF DAYS TO
         UNPK  ODATE+1(2),WORKAREA+6(2) PACKED DEC. THEN UNPACK
         OI    ODATE+2,X'F0'           CHANGE SIGN
         MVC   ODATE+4(3),1(R3)        MVC MTH NAME FROM YEARTABLE
REFRESH  EQU   *
         SAC   0                       NORMAL MODE
         TIME  DEC                     GET TIME IN R0
         ST    R0,PKTIME               WORK WITH TIME TO SHOW IT
         UNPK  UNPKTIME,PKTIME         IN READABLE FORMAT
         MVC   HH,UNPKTIME+1
         MVC   MM,UNPKTIME+3
         MVC   SS,UNPKTIME+5
         L     R2,SAVER2               RESTORE POINTER TO BASE
         SAC   512                     AR MODE
         SYSSTATE ASCENV=AR            INFORM ASSEMBLER
         LAM   2,2,PGMALET             ACCESS LIST ENTRY TABLE
         LAM   7,7,PGMALET             ACCESS LIST ENTRY TABLE
         LAM   5,5,PGMALET             ACCESS LIST ENTRY TABLE
         L     R2,BAMTTBL-BASE(,R2)    MASTER TRACE PNTR
         USING MTTABLE,R2              MAP IT
         L     R5,MTTCURPT             BEG ENTRY
         L     R6,MTTENDPT             END ENTRY
         MVC   PAGEDATE+36(12),MTTWRPTM TIME WRAPPED
         L     R4,=A(PAGE1+SCRL-80)    PAGE1 WORKAREA POINTER
         L     R3,=A(PAGE2+SCRL-80)    PAGE2 WORKAREA POINTER
         XR    R8,R8                   CLEAR REGS
         LA    R10,SCRLINES            NO OF SCREEN LINES
         USING SRECDEF1,R4             INFORM ASSEMBLER
         USING SRECDEF2,R3
         USING MTENTRY,R5              MAP MTTABLE ENTRY
LOOP1    EQU   *
         ICM   R8,B'0011',MTENTLEN     LENGTH TO BE MOVED
         LA    R7,MTENTDAT             EACH ENTRY DATA POINTER
         USING FRECDEF,R7
         MVC   SJDATE,FJDATE           MOVE THE DATE
         MVC   STIME,FTIME             THE TIME
         MVC   SUSER,FUSER             AND USER
         LR    R9,R8                   WORK OUT THE REST OF DATA LENGTH
         SH    R9,=H'55'               SKIP DATE,TIME,USER,LEN
         CH    R9,=H'53'               CAN WE FIT THE REST IN 1ST PAGE
         BH    SNDPAGE                 NO THEN TO 2ND PAGE
         BCTR  R9,0                    MOVE IT TO 1ST PAGE
         EX    R9,MOVE1                EXECUTE
MOVE1    MVC   SDATA1(0),FDATA         THE FIRST PART IN PAGE1
         B     SKIP                    SKIP PAGE2 DATA
SNDPAGE  EQU   *
         MVC   SDATA1(53),FDATA        MOVE FIRST PART TO PAGE1
         SH    R9,=H'53'               SKIP FIRST PART DATA
         CH    R9,=H'0'                CHECK REST OF LENGTH
         BE    *+6                     SKIP DECREMENT
         BCTR  R9,0                    R9-1
         EX    R9,MOVE2                MOVE IT
MOVE2    MVC   SDATA2(0),FDATA+53      THE SECOND PART IN PAGE2
SKIP     EQU   *
         BCTR  R10,0                   SCREEN LINECNTR - 1
         LTR   R10,R10                 CHECK COUNTER
         BNZ   PROCESS
*PROCESS DISPLAY
         MVC   PAGE1ADR,=A(PAGE1)      SAVE PAGE1&PAGE2 ADDR
         MVC   PAGE2ADR,=A(PAGE2)
         LA    R15,SCRL
         ST    R15,PAGESIZE
         L     R14,PAGE1ADR
         MVI   PAGENO+5,C'1'
         BAL   R11,DSP1
PROCESS  EQU   *
         S     R3,=F'80'               DECR. OUT LINE PNTR IN PAGE1
         S     R4,=F'80'               DECR. OUT LINE PNTR IN PAGE2
         LA    R8,10(R8)               POINT PAST EACH TRACE ENTRY HDR
         LA    R5,0(R8,R5)             POINT TO NEXT ENTRY
         LA    R7,2(R7)                POINT TO NEXT RECEIVE ENTRY
         CR    R5,R6                   DID WE REACH THE LAST ENTRY
         BL    LOOP1                   LOOP FOR ALL ENTRIES
         ST    R4,PAGE1ADR
         ST    R3,PAGE2ADR
         L     R15,=A(PAGE1+SCRL)
         SR    R15,R4
         ST    R15,PAGESIZE
         L     R14,PAGE1ADR
         MVI   PAGENO+5,C'1'
         BAL   R11,DSP1
         B     REFRESH
         SAC   0                       RETURN TO PROBLEM PROG. MODE
         SYSSTATE ASCENV=P             INFORM ASSEMBLER
RETURN   EQU   *
         MODESET KEY=NZERO,MODE=PROB   PROBLEM PGM MODE
         ALESERV DELETE,ALET=PGMALET   DELETE THE ACCESS LIST ENTRY
         TCLEARQ INPUT                 CLEAR TIOC INPUT
         TCLEARQ OUTPUT                CLEAR TIOC OUTPUT
         L     R13,4(R13)              GET BACK
         RETURN (14,12),RC=(15)
EXECCMD  EQU   *
         XR    R1,R1                   CLEAR
         LH    R1,MVSCMDL+2            LENGTH INTO THE CMNDL
         CH    R1,=H'1722'             CHECK RECEIVED SCREEN LENGTH
         BNHR  R14                     NO COMMAND GET OUT
         MVC   TRLATTR,TRLSHOW         FLAG TO DISPLAY ERROR MESSAGE
         TM    MVSOPT,PSCBACCT+PSCBCTRL CHECK AUTH FOR COMMAND
         BNOR  R14                     GET OUT IF NOT AUTHORIZED
         MVC   TRLATTR,TRLHIDE         HIDE THE MESSAGE
         SH    R1,=H'1722'             INCR BY 4 AND INTO THE MVSCMND
         LTR   R1,R1                   CHECK REMAINING LENGTH
         BZ    EXECMVC
         BCTR  R1,0                    LENGTH -1
*EXCUTE COMMAND USING SVC34
EXECMVC  EQU   *
         XC    MVSCMND+4(125),MVSCMND+4  CLEAR AREA
         L     R3,=A(RESPCMD)          FROM RECEIVE AREA
         L     R4,=A(MVSCMND)          TO   COMMAND AREA
         EX    R1,*+4
         MVC   4(0,R4),0(R3)           MOVE COMMAND TO COMMAND BUFFER
         AH    R1,=H'5'                ADJUST COMMAND LENGTH FOR SVC34
         STH   R1,MVSCMND              LENGTH INTO THE CMND
         MVC   MVSMSG+35(8),PAGEUSER+5 MOVE TSO USERNAME TO MVSMSG
MVSMSG   WTO  ' * COMMAND ENTERED BY =>            <=*',ROUTCDE=13
         SLR   R0,R0                   CLEAR THE REG
         LA    R1,MVSCMND              GET ADDRESS OF COMMAND I SMF
         SVC   34                      ISSUE COMMAND VIA SVC 34
         STIMER WAIT,BINTVL=ONESEC     WAIT FOR 1 SEC
         BR    R14
*CLEAR WORK AREAS USING MVCL
CLEAR    EQU   *
         L     R0,=A(PAGE1)            AREA ADDR
         LA    R1,SCRL                 AREA LENGTH
         XR    R15,R15                 PADDING REG
         ICM   R15,B'1000',=C' '       BLANK FOR PADDING CHARACTER
         MVCL  R0,R14
         L     R0,=A(PAGE2)            DO THE SAME FOR THE REST
         LA    R1,SCRL
         XR    R15,R15
         ICM   R15,B'1000',=C' '
         MVCL  R0,R14
         L     R0,=A(SCR)
         LA    R1,SCRL
         XR    R15,R15
         ICM   R15,B'1000',=C' '
         MVCL  R0,R14
         BR    R14                     RETURN
*MOVE DATA FROM WORK AREA TO SCREEN AREA
DSP1     EQU   *
         LA    R1,SCRL                 RECEIVE SIZE
         L     R15,PAGESIZE            SEND SIZE
         ICM   R15,B'1000',=C' '       BLANK FOR PADDING CHARACTER
         L     R0,=A(SCR)              RECEIVE AREA
         MVCL  R0,R14                  SEND THE DATA
         SAC   0                       NORMAL MODE
         SYSSTATE ASCENV=P             INFORM ASSEMBLER
*FULL SCREEN DISPLAY
         TPUT  HDR,HDRL,FULLSCR
         TGET  MVSRESP,L'MVSRESP,ASIS  GET RESP
         STH   R1,MVSCMDL+2            RECEIVED LENGTH
         CLI   MVSRESP,X'F3'           PROCESS PF3 KEY
         BE    RETURN
         CLI   MVSRESP,X'F7'           PF7 KEY
         BE    ENTER
         CLI   MVSRESP,X'7A'           PF10 KEY
         BE    PF10
         CLI   MVSRESP,X'7B'           PF11 KEY
         BE    PF11
         B     ENTER                   DEFAULT
PF10     EQU   *
         TCLEARQ INPUT                 CLEAR TIOC INPUT
         TCLEARQ OUTPUT                CLEAR TIOC OUTPUT
*RESTORE POINTERS
         L     R14,PAGE1ADR
         MVI   PAGENO+5,C'1'           PAGE NO
         MVC   PAGENO+12(2),=C'->'     DIRECTION
         B     DSP1
PF11     EQU   *
         TCLEARQ INPUT                 CLEAR TIOC INPUT
         TCLEARQ OUTPUT                CLEAR TIOC OUTPUT
         L     R14,PAGE2ADR
         MVI   PAGENO+5,C'2'           PAGE NO
         MVC   PAGENO+12(2),=C'<-'     DIRECTION
         B     DSP1
ENTER    EQU   *
         TCLEARQ INPUT                 CLEAR TIOC INPUT
         TCLEARQ OUTPUT                CLEAR TIOC OUTPUT
         BAL   R14,CLEAR               CLEAR WORK AREAS
         BAL   R14,EXECCMD             PROCESS COMMAND IF ANY
*RESTORE REGS FOR NEXT EXECUTION
         L     R4,=A(PAGE1+SCRL-80)
         L     R3,=A(PAGE2+SCRL-80)
         LA    R10,SCRLINES
         LA    R15,SCRL
         ST    R15,PAGESIZE
         SAC   512                     AR MODE
         CLI   MVSRESP,X'7D'           CHECK ENTER KEY
         BE    REFRESH                 REFRESH SCREEN AGAIN
         BR    R11
         LTORG
* DATA AREA
         DS 0F
PGMSAVE  DC 18F'0'
PGMSTKN  DC D'0'
PGMALET  DC F'0'
ONESEC   DC F'100'                     100 HUNDREDTHS SEC. FOR STIMER
PAGESIZE DC F'0'
PAGE1ADR DC F'0'
PAGE2ADR DC F'0'
SAVER5   DC F'0'
SAVER2   DC F'0'
MVSCMDL  DC F'0'
         ORG MVSCMDL
MVSOPT   DS X
         ORG
PKTIME   DC F'0'
UNPKTIME DC D'0'
         ORG UNPKTIME
WORKAREA DS D
         ORG
MVSCMND  DC Y(0),Y(0),CL125' '
HDR      DC    X'27F5C2'
         DC    X'114040' R 01 C 01
         DC    X'1DF9'   PROTECT HIGH
PAGEUSER DC    C'USER=              THE MVSLOG MASTER CONSOLE PROCESS '
         DC    X'11C140' R 01 C 65
PAGENO   DC    C'PAGE 1 OF 2 ->'
         DC    X'11C150' R 02 C 01
PAGEDATE DC    C'DATE=          -TIME=HH:MM:SS-WRAPPED=           '
         ORG   PAGEDATE+5
ODATE    DS    CL10
         DS    CL6
HH       DS    CL2
         DS    CL1
MM       DS    CL2
         DS    CL1
SS       DS    CL2
         ORG
         DC    X'3CC25E',C'-' REPEAT TO ADDR. R 02 C 79
         DC    X'11C25F1DF111C260'   PROTECT NORM
SCR      DS    CL1520
SCRL     EQU   ((*-SCR)-80)
SCRLINES EQU   (SCRL/80)
TRL      DC    X'115A501DF9' R 22 C 01
         DC    C'CMD'
         DC    X'115A7C'     R 22 C 45
TRLATTR  DC    XL6'1D7D40404040'
         DC    C'<NOT AUTHORIZED FOR COMMAND>'
         DC    X'115B601DF9' R 23 C 01
         DC    C'==>'
         DC    X'115BE41DC913' UNPROT R 23 C 05
         DC    X'115C6E1DF8'   PROT   R 23 C 79
         DC    X'115CF0'       R 24 C 01
*                HIGH             LOW
         DC    X'1DE5',C'PF3=',X'1DF9',C'QUIT '
         DC    X'1DE5',C'PF7=',X'1DF9',C'BWD '
         DC    X'1DE5',C'PF10=',X'1DF9',C'SHL '
         DC    X'1DE5',C'PF11=',X'1DF9',C'SHR '
         DC    X'1DE5',C'ENTER=',X'1DF9',C'REFRESH'
HDRL     EQU   *-HDR
TRLSHOW  DC    X'290242F241F2'
TRLHIDE  DC    X'1D7D40404040'
OYEARTAB DC    AL1(31),C'JAN',AL1(28),C'FEB'
         DC    AL1(31),C'MAR',AL1(30),C'APR'
         DC    AL1(31),C'MAY',AL1(30),C'JUN'
         DC    AL1(31),C'JUL',AL1(31),C'AUG'
         DC    AL1(30),C'SEP',AL1(31),C'OCT'
         DC    AL1(30),C'NOV',AL1(255),C'DEC'
PFEB     EQU   OYEARTAB+4
MVSRESP  DS CL1920
         ORG MVSRESP+1644
RESPCMD  DS CL80
         ORG
MVSRESPL EQU *-MVSRESP
PAGE1    DS CL1520
PAGE1L   EQU *-PAGE1
PAGE2    DS CL1520
PAGE2L   EQU *-PAGE2
FRECDEF  DSECT
FREC     DS    CL19
FJDATE   DS    CL5
         DS    CL1
FTIME    DS    CL11
         DS    CL1
FUSER    DS    CL8
         DS    CL10
FDATA    DS    CL200
SRECDEF1 DSECT
SJDATE   DS    CL5
         DS    CL1
STIME    DS    CL11
         DS    CL1
SUSER    DS    CL8
         DS    CL1
SDATA1   DS    CL53
SRECDEF2 DSECT
SDATA2   DS    CL80
         CVT PREFIX=YES,DSECT=YES,LIST=YES COMM. VECTOR TABLE
         IEEBASEA                      MAP MSTR.SCHD. RES. DATA AREA
         IHAASCB DSECT=YES,LIST=YES    ADDR.SPACE CONTROL BLOCK
         IHAASSB LIST=YES              ADDR.SPACE SECONDAR BLOCK
         IEEZB806                      MAP. MTRACE TABLE
         IKJTCB                        TASK CONTROL BLOCK
         IEZJSCB                       JOB/STEP CONTROL BLOCK
         IKJPSCB                       PROTECTED STEP CONTROL BLOCK
         END


Mohamad Q A Hammad
Senior Systems Programmer (Jordan)                   c Xephon 1993

