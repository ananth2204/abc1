An intelligent external writer (IEXTWTR)

Many shops make use of external writers to collect output from the JES2
spool and place it in permanent datasets.  Unfortunately, an external
writer simply reads all output in a specified class and writes it all to
a single dataset.  In order to separate output into different datasets,
different output classes have to be used with an external writer for
each class.  The separation is then done by having jobs use different
output classes.

The Intelligent External Writer allows for output separation into
different datasets, but does so using a single output class.  All jobs
use the same output class but can have their output placed into
individual datasets.

The Intelligent External Writer makes use of a two-step started task.
The first step runs the normal External Writer (IASXWR00) but uses an
exit routine.  The exit routine, IEXTWTR1, places control records
between the output from different jobs.  When the External Writer is
stopped, the second step of the started task runs program IEXTWTR2.
IEXTWTR2 uses the control records written by IEXTWTR1 and separates the
output into different datasets as defined in its PARMLIB.

The PARMLIB dataset contains job names and/or partial job names (masked)
and the associated DDNAME to which output is to be written.  This allows
for the separation of output by job name into different datasets.  For
example, in the sample PARMLIB shown below, all output jobs that begin
with ACCT (ACCT****) are to be written to the ACCOUNT DD in the started
task.  Full masking is available, so that common job names are not
restricted.  The PARMLIB example shows two types of PAYROLL job both
beginning with PAY, but the production jobs end with P (PAY****P) and
the test jobs end with T (PAY****T).  Any output that does not match a
job name specified in the PARMLIB is written to the default NOLOSS
dataset.  Each DD statement in the started task can only be referenced
once in the PARMLIB.

By using GDGs or some other form of unique dataset naming, job output
can be further separated by days.  The sample started task JCL uses
simple permanent datasets, and if used, should be started the first time
with 'S IEXTWTR,DISP1=NEW'.

PROGRAM IEXTWTR1

IEXTWTR1 CSECT  SCD
* IEXTWTR1 IS AN EXIT FOR IASXWR00 (EXTERNAL WRITER)
* IT PRODUCES CONTROL RECORDS BETWEEN JOB OUTPUT FOR USE BY IEXTWTR2
         SAVE  (14,12),,*              SAVE CALLERS REGS
         LR    R12,R15                 SET INITIAL BASE
         USING IEXTWTR1,R12            ADDRESS CSECT
         LR    R10,R1                  SAVE REG 1
         GETMAIN RU,LV=SWKLEN          GET SAVEAREA
         ST    R13,4(R1)               BKWD CHAIN IN CSECT SAVE AREA
         ST    R1,8(R13)               FWD CHAIN IN CALLER'S SAVE AREA
         LR    R13,R1                  ADDRESS SAVEAREA
         L     R3,4(,R10)              LOAD DCB ADDRESS
         USING IHADCB,R3               ADDRESS DCB
         L     R4,8(,R10)              LOAD JOBNAME ADDRESS
         L     R5,12(,R10)             LOAD CLASS ADDRESS
         PUT   (R3)                    WRITE DUMMY OR PREV RECORD
         LR    R11,R1                  ADDRESS BUFFER
         USING BUFFER,R11              ADDRESS RECORD
         L     R6,DCBRECA+3            LOAD LRECL
         CH    R6,=H'37'               RECORDS BIG ENOUGH ?
         BL    ERROR1                  NO...ERROR
         MVI   RECORD,X'40'            BLANK TO FIRST BYTE
         BCTR  R6,0                          - 1
         BCTR  R6,0                          - 1
         EX    R6,CLEAR                CLEAR RECORD
         TM    DCBRECFM,DCBRECF        RECFM=FB ?
         BO    FIXED                   YES...GO PROCESS
         TM    DCBRECFM,DCBRECV        RECFM=VB ?
         BNO   ERROR2                  NO...THAN UNSUPPORTED
         MVC   RDW(4),=X'00250000'     MOVE IN RDW
         LA    R11,4(,R11)             SKIP RDW
FIXED    MVI   DATA,C'1'               SKIP PAGE
         MVC   ID(8),=X'IEXTWTR1'      MOVE ID OUT
         MVC   JOBNAME(8),0(R4)        MOVE JOBNAME OUT
         MVC   CLASS(1),0(5)           MOVE CLASS OUT
         TIME  DEC                     GET TIME AND DATE
         STM   R0,R1,TIMEDATE          AND STORE THEM
         UNPK  DOUBLE(5),TIMEDATE(3)   TIME PRINTABLE
         MVC   HOURS,DOUBLE            MOVE HOURS
         MVI   COLON,C':'              AND COLON
         MVC   MINUTES,DOUBLE+2        AND MINUTES OUT
         UNPK  DOUBLE(7),TIMEDATE+5(4) DATE PRINTABLE
         MVC   YEAR,DOUBLE             MOVE YEAR
         MVI   PERIOD,C'.'             AND PERIOD
         MVC   DAYS,DOUBLE+2           AND DAYS OUT
         L     R9,DCBSYNAD             SAVE SYNAD ADDRESS
         MVC   DCBSYNAD(4),=A(ERROR)   STORE NEW SYNAD EXIT
         PUT   (R3)                    WRITE RECORD OUT
         SR    R10,R10                 SET RETURN CODE
FREEUP   ST    R9,DCBSYNAD             RESTORE SYNAD ADDRESS
         LR    R3,R13                  SAVEWORK AREA
         L     R13,4(R13)              CALLER'S SAVE AREA
         FREEMAIN RU,LV=SWKLEN,A=(R3)  FREEMAIN
         LR    R15,R10                 SET RETURN CODE
         RETURN (14,12),RC=(15)
ERROR    L     R10,=F'8'               SET RETURN CODE
         B     FREEUP                  AND RETURN
ERROR1   ABEND 991
ERROR2   ABEND 992
CLEAR    MVC   RECORD+1(0),RECORD      BLANK TO REST
TIMEDATE DS    D                       TIME AND DATE AREA
DOUBLE   DS    D                       WORK AREA
         LTORG
         $SETR
SAVEWORK DSECT                         R1 AFTER GETMAIN
SAVEAREA DS    18F                     STANDARD SAVE AREA, <- R13
SWKLEN   EQU   *-SAVEWORK              LENGTH OF AREA FOR GETMAIN
BUFFER   DSECT
RECORD   DS    0C
RDW      DS    0CL4
DATA     DS    C
ID       DS    CL8
         DS    C
JOBNAME  DS    CL8
         DS    C
CLASS    DS    C
         DS    C
HOURS    DS    CL2
COLON    DS    C
MINUTES  DS    CL2
         DS    C
YEAR     DS    CL2
PERIOD   DS    C
DAYS     DS    CL3
         DCBD  DSORG=PS
         END
PROGRAM IEXTWTR2
IEXTWTR2 CSECT SCD
* IEXTWTR2 USES CONTROL CARDS CREATED BY IEXTWTR1 AND SYSIN INFORMATION
* TO PERFORM OUTPUT SEPARATION INTO DIFFERENT DATASETS
         SAVE  (14,12),,*              SAVE CALLERS REGS
         LR    R12,R15                 SET INITIAL BASE
         USING IEXTWTR2,R12            ADDRESS CSECT
         LR    R10,R1                  SAVE REG 1
         GETMAIN RU,LV=SWKLEN          GET SAVEAREA
         USING SAVEWORK,R1             ADDRESS SAVEAREA AND WORKAREA
         LA    R5,DDSTART              WORKAREA ADDRESSABILITY
         USING DDSTART,R5              ADDRESS WORK AREA
         DROP  R1
         ST    R13,4(R1)               BKWD CHAIN IN CSECT SAVE AREA
         ST    R1,8(R13)               FWD CHAIN IN CALLER'S SAVE AREA
         LR    R13,R1                  ADDRESS SAVEAREA
         USING DDTABLE,R6
         OPEN  SYSIN                   OPEN SYSIN DATASET
         LA    R10,SYSIN               ADDRESS DCB
         USING IHADCB,R10
         TM    DCBOFLGS,X'10'          OPEN O.K. ?
         BZ    OPENERR1                NO...INDICATE ERROR
         DROP  R10
         USING SYSINREC,R10
         LA    R6,DDADDR               GET ADDRESS OF DDTABLE
         LR    R7,R6                   GET DDTABLE ADDRESS
         LA    R7,380(,R7)             ADDRESS FIRST BYTE OF LAST ENTRY
         ST    R7,DDTABLIM             STORE LIMIT
SYSINLP  GET   SYSIN                   READ A RECORD
         LR    R10,R1                  ADDRESS INPUT RECORD
         CLI   COMMENT,C' '            NON-COMMENT
         BNE   SYSINLP                 YES...NEXT
         MVC   DDMASK,MASKIN           MOVE IN MASK
         MVC   DDNAME,DDNAMEIN         MOVE IN DDNAME
         MVC   DCBADDR,=F'0'           ZERO DCB ADDRESS
         LA    R6,20(,R6)              ADDRESS NEXT ENTRY
         C     R6,DDTABLIM             END OF TABLE
         BNH   SYSINLP                 NO...CONTINUE INPUT
SYSINEOD CLOSE (SYSIN)                 CLOSE SYSIN DATASET
         MVC   DDMASK(20),NLENTRY      MOVE NOLOSS ENTRY IN
         ST    R6,NLADDR               SAVE ENTRY ADDRESS
         LA    R6,20(,R6)              ADDRESS NEXT ENTRY
         MVC   DDMASK(4),=F'-1'        INDICATE END OF TABLE
         DROP  R10
         OPEN  IEFRDER                 OPEN INPUT DATASET
         LA    R10,IEFRDER             ADDRESS DCB
         USING IHADCB,R10
         TM    DCBOFLGS,X'10'          OPEN O.K. ?
         BZ    OPENERR2                NO...INDICATE ERROR
         TM    DCBRECFM,DCBRECF        RECFM=FB ?
         BO    IEFLOOP                 YES...GO PROCESS
         TM    DCBRECFM,DCBRECV        RECFM=VB ?
         BNO   ERROR1                  NO...THEN UNSUPPORTED
         MVC   VAR(4),=F'4'            VARIABLE ADDITION
         DROP  R10
IEFLOOP  GET   IEFRDER                 READ A RECORD
         LR    R10,R1                  ADDRESS INPUT RECORD
         LR    R11,R10                 GET INPUT RECORD ADDRESS
         A     R11,VAR                 ADJUST FOR RECORD TYPE
         USING CONTROL,R11             ADDRESS INPUT RECORD
         CLC   ID(8),=C'IEXTWTR1'      CONTROL RECORD ?
         BE    FILESET                 YES...GO LOCATE DCB
FIRST    BC    15,NOCNTRL              FIRST READ NOT CONTROL
         TM    FLAG,X'40'              PREVIOUS RECORD CONTROL ?
         BNO   FILEOUT                 NO...CONTINUE
         NI    FLAG,X'BF'              NO PREVIOUS CONTROL
         CLI   DATA,C'1'               IS IT SKIP ?
         BNE   FILEOUT                 NO...CONTINUE
         MVI   DATA,C' '               YES...THEN TURN OFF
FILEOUT  PUT   (R7),(R10)              WRITE A RECORD
         B     IEFLOOP                 GO PROCESS NEXT
FILESET  NI    FIRST+1,X'0F'           TURN OFF NO CONTROL BRANCH
         OI    FLAG,X'40'              INDICATE PREVIOUS CONTROL
         LA    R6,DDADDR               ADDRESS DDTABLE
         MVC   WKMASK(8),DDMASK        MOVE IN MASK
MASKSET  L     R1,=F'8'                LOAD LOOP COUNT
         LA    R2,WKMASK               ADDRESS MASK
         LA    R3,JOBNAME              ADDRESS JOBNAME
MASKLOOP CLC   0(1,R2),=C'*'           CHECK FOR MASK
         BNE   LOOPEND                 NO...SKIP OVERLAY
         MVC   0(1,R2),0(R3)           OVERLAY MASK
LOOPEND  LA    R2,1(,R2)               NEXT BYTE
         LA    R3,1(,R3)               NEXT BYTE
         BCT   R1,MASKLOOP             NEXT CHARACTER
         CLC   WKMASK(8),JOBNAME       MATCH ?
         BNE   CHECKDCB                YES...PROCESS
         LA    R6,20(,R6)              ADDRESS NEXT ENTRY
         MVC   WKMASK(8),DDMASK        MOVE IN MASK
         CLC   DDMASK(4),=F'-1'        END OF TABLE
         BNE   MASKSET                 NO...CHECK NEXT ENTRY
         B     ERROR2                  NO MATCH ERROR
CHECKDCB TM    DCBADDR,X'80'           DCB OPEN ?
         BNO   OPENSET                 NO...GO OPEN
         L     R7,DCBADDR              LOAD ADDRESS OF DCB
         B     FILEOUT                 AND GO WRITE
OPENSET  GETMAIN RU,LV=DCBSIZE         GET DCB AREA
         LR    R7,R1                   DCB ADDRESS
         MVC   0(DCBSIZE,R1),OUTPUT    COPY OUT DCB
         USING IHADCB,R7               ADDRESS DCB
         MVC   DDWTO1+24(8),DDNAME
DDWTO1   WTO   'IEXTWTR2 - OPEN DDDDDDDD',                             X
               ROUTCDE=(2),DESC=(3)
         MVC   DCBDDNAM,DDNAME         MOVE IN DDNAME
         OPEN  ((R7),(OUTPUT))         OPEN DCB
         TM    DCBOFLGS,X'10'          OPEN O.K. ?
         BZ    BADOPEN                 NO...
         DROP  R7
         ST    R7,DCBADDR              SAVE DCB ADDRESS
         OI    DCBADDR,X'80'           INDICATE DCB OPEN
         B     FILEOUT                 RETURN
BADOPEN  FREEMAIN RU,LV=DCBSIZE,A=(R7) FREE DCB AREA
         MVC   DDWTO2+31(8),DDNAME
DDWTO2   WTO   'IEXTWTR2 - OPEN FAILED DDDDDDDD',                      X
               ROUTCDE=(2),DESC=(3)
         C     R6,NLADDR               OPEN FAIL FOR NOLOSS ?
         BE    OPENERR3                YES...THEN ERROR
NOCNTRL  L     R6,NLADDR               ADDRESS NO LOSS ENTRY
         NI    FIRST+1,X'0F'           TURN OFF NO CONTROL BRANCH
         B     CHECKDCB
NORMAL   LA    R6,DDADDR               ADDRESS DD TABLE
FREELOOP TM    DCBADDR,X'80'           WAS DCB OPENED ?
         BNO   DDNEXT                  NO...THEN CHECK NEXT
         MVC   DDWTO3+25(8),DDNAME
DDWTO3   WTO   'IEXTWTR2 - CLOSE DDDDDDDD',                            X
               ROUTCDE=(2),DESC=(3)
         L     R7,DCBADDR              LOAD DCB ADDRESS
         LA    R7,0(,R7)               GET AN ADDRESS
         CLOSE ((R7))                  CLOSE DCB
         FREEMAIN RU,LV=DCBSIZE,A=(R7) FREE DCB AREA
DDNEXT   LA    R6,20(,R6)              ADDRESS NEXT ENTRY
         CLC   DDMASK(4),=F'-1'        END OF TABLE ?
         BNE   FREELOOP                NO...CONTINUE
         CLOSE (IEFRDER)               CLOSE DATASET
         LR    R3,R13                  SAVEWORK AREA
         L     R13,4(R13)              CALLER'S SAVE AREA
         FREEMAIN RU,LV=SWKLEN,A=(R3)  FREEMAIN
         SR    R15,R15                 SET RETURN CODE
         RETURN (14,12),RC=(15)
ERROR1   ABEND 981
ERROR2   ABEND 982
OPENERR1 ABEND 991
OPENERR2 ABEND 992
OPENERR3 ABEND 993
FLAG     DC    X'00'
NLADDR   DS    F                       NO LOSS ENTRY ADDR
NLENTRY  DC    CL8'********'           MASK
         DC    CL8'NOLOSS'             DDNAME
         DC    F'0'                    DCB ADDRESS
WKMASK   DS    D
VAR      DC    F'0'                    VAR ADDITION AMOUNT
SYSIN    DCB      DSORG=PS,MACRF=GL,DDNAME=SYSIN,EODAD=SYSINEOD
IEFRDER  DCB      DSORG=PS,MACRF=GL,DDNAME=IEFRDER,EODAD=NORMAL
OUTPUT   DCB      DSORG=PS,MACRF=PM,DDNAME=DDNAME78
DCBSIZE  EQU      *-OUTPUT
         $SETR
SAVEWORK DSECT                         R1 AFTER GETMAIN
SAVEAREA DS    18F                     STANDARD SAVE AREA, <- R13
DDSTART  DS    0D
DDTABLIM DS    F                       TABLE LIMIT
DDADDR   DS    CL400                   ALLOW TWENTY DD CARDS
         DS    CL20                    ROOM FOR NOLOSS ENTRY
         DS    CL20                    DUMMY LAST ENTRY
WORKLEN  EQU   *-DDSTART               LENGTH OF WORK PART OF SAVE/WORK
SWKLEN   EQU   *-SAVEWORK              LENGTH OF AREA FOR GETMAIN
DDTABLE  DSECT
DDMASK   DS    CL8
DDNAME   DS    CL8
DCBADDR  DS    CL4
DCBOPEN  EQU   X'80'
CONTROL  DSECT       IEFRDER CONTROL RECORD LAYOUT
RECORD   DS    0C
RDW      DS    0CL4
DATA     DS    C
ID       DS    CL8
         DS    1C
JOBNAME  DS    CL8
         DS    C
CLASS    DS    C
SYSINREC DSECT       SYSIN RECORD LAYOUT
COMMENT  DS    C                       * IS COMMENT
MASKIN   DS    CL8                     JOB NAME MASK
         DS    C
DDNAMEIN DS    CL8                     DDNAME
         DCBD  DSORG=PS
         END

SAMPLE PARMLIB MEMBER

* *** IEXTWTR PARMLIB DATASET ***
* THIS IS PATTERN MASKS AND DD NAMES FOR IEXTWTR (IEXTWTR2)
* THE LAYOUT IS AS FOLLOWS:
*  COL  1 - COMMENT FIELD IF NON-BLANK
*  COL  2 - 8 BYTE PATTERN MASK
*  COL 11 - 8 BYTE DDNAME
*  COL 19 - COL 80 COMMENTS
*  DATA IS WRITTEN TO THE FIRST MATCH,
*  SO THE MASK ORDER IN THIS FILE IS IMPORTANT
*  EXAMPLE:    ABCD**** DDNAME1
*              ABCDEF** DDNAME2
*     DDNAME2 WOULD NEVER BE WRITTEN TO
*  BY DEFAULT THE LAST ENTRY IS  ******** NOLOSS (INTERNAL)
*  ********************************************************
*  *               ** W A R N I N G **                    *
*  *    ONLY ONE MASK CAN BE ASSIGNED TO ANY ONE DDNAME   *
*  *          (EACH DDNAME MUST BE UNIQUE)                *
*  ********************************************************
*--MASK-- -DDNAME-
 ACCT**** ACCOUNT  WRITE ALL JOBS BEGINNING WITH ACCT TO DD ACCOUNT
 PAY****P PAYROLLP BEGINNING WITH PAY ENDING WITH P TO DD PAYROLLP
 PAY****T PAYROLLT BEGINNING WITH PAY ENDING WITH T TO DD PAYROLLT
 USERID** USERID   WRITE ALL JOBS BEGINNING WITH USERID TO DD USERID
*   WRITE ANYTHING ELSE TO NOLOSS DD (INTERNAL DEFAULT)

SAMPLE STARTED TASK JCL

//IEXTWTR  PROC DISP1=MOD
//***
//***      RUNS AN EXTERNAL WRITER TO PUT CLASS 'X'
//***      SYSOUT INTO A MACHINE-READABLE DATASET.
//***
//***      THIS WRITER REQUIRES THE FOLLOWING PROGRAMS
//***      - IEXTWTR1 - EXTERNAL WRITER SEPARATOR
//***                   THIS PROGRAM WRITES SEPARATOR RECORDS
//***                   USED BY IEXTWTR2 TO SPLIT THE DATA
//***      - IEXTWTR2 - DATA SPLITTING
//***                   USING THE SEPARATOR RECORDS CUT BY
//***                   IEXTWTR1, THIS PROGRAM DIRECTS THE DATA
//***                   TO A SPECIFIC DD AS INDICATED BY THE MASKS
//***                   IN THE SYSIN DATASET
//***
//IEFPROC  EXEC PGM=IASXWR00,PARM='PX,IEXTWTR1',TIME=1440
//IEFRDER  DD DSN=IEXTWTR.CURRENT.DATA,DISP=(MOD,PASS,CATLG),
//            DCB=(BLKSIZE=4088,LRECL=137,BUFL=4088,BUFNO=5,RECFM=VBA),
//            UNIT=3380,SPACE=(CYL,(5,10))
//SYSUDUMP DD SYSOUT=A
//***
//***      SEPARATION TAKES PLACE AFTER THE EXTERNAL WRITER HAS
//***      BEEN STOPPED.
//***
//***      ABEND CODES FROM IEXTWTR2
//***      - U0981 - IEFRDER DATASET RECFM OTHER THAN FB OR VB
//***      - U0982 - MASK MATCH ERROR
//***      - U0991 - OPEN FAILED FOR SYSIN DATASET
//***      - U0992 - OPEN FAILED FOR IEFRDER DATASET
//***      - U0993 - OPEN FAILED FOR NOLOSS DATASET
//***
//***      IF AN OPEN FAILS FOR ANY OF THE OUTPUT DATASETS THE
//***      DATA WILL BE WRITTEN TO THE NOLOSS DATASET
//***
//***
//IEXTWTR2 EXEC PGM=IEXTWTR2
//SYSUDUMP DD SYSOUT=A
//SYSIN    DD DSN=IEXTWTR.PARMLIB,DISP=SHR
//IEFRDER  DD DSN=IEXTWTR.CURRENT.DATA,
//            DISP=(OLD,DELETE,CATLG)
//NOLOSS   DD DSN=IEXTWTR.NOLOSS.DATASET,
//   DISP=(&DISP1,CATLG),SPACE=(TRK,(5,5),RLSE),UNIT=3380,
//   DCB=(BLKSIZE=4088,LRECL=137,BUFL=4088,BUFNO=5,RECFM=VBA)
//***
//***      PLACE OUTPUT DD STATEMENTS HERE
//***
//ACCOUNT  DD DSN=IEXTWTR.ACCOUNT.DATASET,
//   DISP=(&DISP1,CATLG),SPACE=(CYL,(5,5),RLSE),UNIT=3380,
//   DCB=(BLKSIZE=4088,LRECL=137,BUFL=4088,BUFNO=5,RECFM=VBA)
//PAYROLLP  DD DSN=IEXTWTR.PAYROLL.PROD.DATASET,
//   DISP=(&DISP1,CATLG),SPACE=(CYL,(5,5),RLSE),UNIT=3380,
//   DCB=(BLKSIZE=4088,LRECL=137,BUFL=4088,BUFNO=5,RECFM=VBA)
//PAYROLLT  DD DSN=IEXTWTR.PAYROLL.TEST.DATASET,
//   DISP=(&DISP1,CATLG),SPACE=(CYL,(5,5),RLSE),UNIT=3380,
//   DCB=(BLKSIZE=4088,LRECL=137,BUFL=4088,BUFNO=5,RECFM=VBA)
//USERID   DD DSN=IEXTWTR.USERID.DATASET,
//   DISP=(&DISP1,CATLG),SPACE=(CYL,(5,5),RLSE),UNIT=3380,
//   DCB=(BLKSIZE=4088,LRECL=137,BUFL=4088,BUFNO=5,RECFM=VBA)


     € Xephon 1988






