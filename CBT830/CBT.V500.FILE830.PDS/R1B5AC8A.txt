FDR/ABR - a RACF interface

When a user deletes a dataset on a backed-up volume,
FDR/ABR creates a dummy entry in its Scratch Catalog with
the same name as the DSN, prefixed with a special character,
'#'.  The dummy entry is required by FDR/ABR to facilitate its
search for the dataset when a need to restore it arises.
Moreover, the ISPF interface of FDR/ABR also uses the
dummy entry to prepare and submit the restore job
automatically.  It is normally kept in a separate user catalog
maintained only by FDR/ABR.

With RACF external security implementation, we have defined
a single generic dataset profile '#.**' to cover all the dummy
entries with a universal access authority (UACC) of READ.
This access authority prevents FDR/ABR from creating these
dummy entries mainly because it gets the authority from the
user which is normally the same as the UACC.  Without the
dummy entries, our DASD administrator has to go through the
FDR/ABR volume back-up reports to find out where the
dataset originally resided.

To allow FDR/ABR to create these entries, we need to grant
everybody ALTER authority or simply set the UACC with the
same level of access.  However, ALTER would also mean
giving the users the authority to delete or uncatalogue these
datasets. While I'm sure nobody would attempt to do that
unless, of course, they were pretty upset with the DASD
administrator or disgruntled with the company, the risk is not
worth taking.

We understand from the FDR/ABR technical support staff that
the FDR/ABR scratch exit, IGG029DU, initiates the definition
of the dummy entry.  Because of the RACF system option of
'ALWAYS CALL', a RACDEF SVC is issued through the
MVS SAF router.  We have therefore coded a RACDEF pre-
processing exit, ICHRDX01, to trap all RACDEF calls for the
dataset entity prefixed with the special high level qualifier of
'#'.  If found, the RACF exit verifies whether the call is
coming from FDR/ABR or not.  The FDR/ABR people
suggested we look at the fourth RB in the MVS RB chain.  The
WLIC code should be X'0002001D' for the scratch SVC.

We have tried this method and have never had any more
problems.  We are able to keep the UACC for the dummy
entry's RACF profile as READ and still allow FDR/ABR to
create the dummy entries.  We also tested uncataloguing the
dummy entries using ISPF 3.4 and were failed by RACF.  Our
DASD administrator can now sleep soundly knowing
FDR/ABR's Scratch Catalog is protected and intact.

Our environment uses FDR/ABR Version 5.0E and RACF
Version 1.8.1.

DX01     TITLE 'RACDEF PREPROCESSING EXIT'
*****************************************************************
*        MODULE         - ICHRDX01                              *
*        ENTRY POINT    - ICHRDX01                              *
*        ENVIRONMENT    - MVS/SP 1.3.5                          *
*        REFERENCE      - SPL: RESOURCE ACCESS CONTROL FACILITY *
*                         (SC28-1343)   CHAPTER 8               *
*        FUNCTION                                               *
*        THE ICHRDX01 IS USED FOR ADDITIONAL PROCESSING OR      *
*        AUTHORIZATION CHECKS BEFORE THE NORMAL FUNCTION OF     *
*        THE RACDEF SVC TAKES PLACE.  THESE CAN BE TO ALLOW     *
*        OR FAIL THE ACCESS REQUEST EVEN BEFORE THE NORMAL      *
*        RACDEF SVC PROCESS.                                    *
*        THIS EXIT CHECKS FOR RESOURCE '#.**' USED IN           *
*        FDR/ABR SCRATCH CATALOG.  WHENEVER AN ARCHIVED         *
*        DATASET IS DELETED, FDR/ABR CREATES AN ENTRY           *
*        IN ITS SCRATCH CATALOG FOR THE DELETED DATASET         *
*        PREFIXED WITH THE SPECIAL CHARACTER '#'                *
*        THIS EXIT WILL BYPASS THE NORMAL RACF CHECKS           *
*        FOR THE RESOURCE '#.**' ONLY IF THE ACCESS IS          *
*        REQUESTED BY THE FDR/ABR PROGRAM - IGG029DU.           *
*        ACCORDING TO FDR/ABR TECH SUPPORT, THE MODULE          *
*        NAME CANNOT BE FOUND IN THE RB CHAIN, HENCE            *
*        SUGGESTED TO CHECK FOR THE WLIC FIELD IN THE           *
*        SVRB WHICH SHOULD BE THE FOURTH FROM THE CURRENT       *
*        RB IN THE CHAIN.  THE WLIC CODE SHOULD BE  =           *
*        ......'0002001D' (SVC 29 - X'1D' SCRATCH)......        *
*****************************************************************
ICHRDX01 CSECT
*CHRDX01 AMODE 31           31-BIT ADDR MODE - MVS/XA & ABOVE ONLY
*CHRDX01 RMODE ANY          31-BIT RESIDENCE - MVS/XA & ABOVE ONLY
*****************************************************************
*        STANDARD ENTRY LINKAGE                                 *
*****************************************************************
         STM   R14,R12,12(R13)     SAVE REGISTERS 14 - 12
         BALR  R12,R0              ICHRDX01 BASE REGISTER
         USING *,R12               ==> BASE REGISTER
         SR    R15,R15             SET DEFAULT RC IN R15
*****************************************************************
*        ESTABLISH ADDRESSABILITY TO EXIT PARAMETERS            *
*****************************************************************
         USING RDXPL,R1            ==> EXIT PARAMETER LIST
*****************************************************************
*        TEST FOR FDR/ABR SCRATCH DATASET HLQ '#'               *
*****************************************************************
         L     R2,RDXENTIT         ADDR OF RESOURCE NAME
         CLI   0(R2),C'#'          IF FDR/ABR DATASET PREFIX
         BNE   PP900               NO - GOBACK TO RACDEF PROCESS
*****************************************************************
*        TEST FOR ACCESS REQUEST BY FDR/ABR - 4TH RB = SVC 1D   *
*****************************************************************
PP000    EQU   *
         SR    R3,R3               POINT R3 TO PSA
         USING PSA,R3              ==> PREFIXED SAVE AREA
         L     R4,PSATOLD          CURRENT TCB POINTER
* ANOTHER WAY OF GETTING THE CURRENT TCB TO USE THE CVT POINTER
* TO THE TCB FIELDS, AS FOLLOWS:
*        L     R3,16               POINT TO CVT  (CVTPTR)
*        L     R3,0(,R3)           POINT TO TCBWORDS (CVTTCBP)
*        L     R4,4(,R3)           POINT TO CURRENT TCB (2ND TCB WORD)
         USING TCB,R4              ==> TASK CONTROL BLOCK PROPER
         ICM   R4,B'1000',ZEROES   ZERO OUT HIGH ORDER BYTE
         L     R5,TCBRBP           CURRENT RB POINTER
         USING RBBASIC,R5          ==> REQUEST BLOCK BASIC
         L     R5,RBLINK           SECOND RB POINTER
         ICM   R5,B'1000',ZEROES   ZERO OUT HIGH ORDER BYTE
         CR    R4,R5               IS 2ND RB = TCB
         BE    PP900               YES - GOBACK TO RACDEF PROCESS
         L     R5,RBLINK           THIRD  RB POINTER
         ICM   R5,B'1000',ZEROES   ZERO OUT HIGH ORDER BYTE
         CR    R4,R5               IS 3RD RB = TCB
         BE    PP900               YES - GOBACK TO RACDEF PROCESS
         L     R5,RBLINK           FOURTH RB POINTER (SVC 1D)
         ICM   R5,B'1000',ZEROES   ZERO OUT HIGH ORDER BYTE
         CR    R4,R5               IS 4TH RB = TCB
         BE    PP900               YES - GOBACK TO RACDEF PROCESS
         SH    R5,HALF40           OFFSET AT RB PREFIX
         USING RBPRFX,R5           ==> REQUEST BLOCK + PREFIX
         CLC   RBRTICIL,SVC1D      TEST LENGTH/INTERRUPT = SVC 1D
         BE    PP100               YES - ALLOW ACCESS REQUEST
         CLC   RBINTCDA,SVC1D+1    SAME AS ABOVE BUT SECONDARY AREA
         BNE   PP900               NO - GOBACK TO RACDEF PROCESS
PP100    LA    R15,12              RC = C (ALLOW REQ, BYPASS AUTHCHK)
*****************************************************************
*        RETURN CONTROL TO SYSTEM                               *
*****************************************************************
PP900    L     R14,12(R13)         RESTORE REGISTERS 14
         LM    R0,R12,20(R13)      RESTORE REGISTERS 0 - 12
         BR    R14                 GOBACK
*****************************************************************
*        EXIT WORKING STORAGE - NOT MODIFIABLE                  *
*****************************************************************
         DS    0F                  FULLWORD ALIGNMENT
SVC1D    DC    XL4'0002001D'       LENGTH/INTERRUPT CODE FOR SVC 1D
ZEROES   DC    XL4'00000000'       FOR ICM TO REGISTERS
HALF40   DC    H'64'               NEGATIVE OFFSET FOR RB PREFIX
*****************************************************************
*        DUMMY SECTIONS                                         *
*****************************************************************
         ICHRDXP                             RDXP EXIT PARAMETER LIST
         IHAPSA DSECT=YES,LIST=YES           PSA - PREFIXED SAVE AREA
         IKJTCB DSECT=YES,LIST=YES,SYS=AOS2  TCB - TASK CONTROL BLOCK
         IHARB  DSECT=YES,SYS=AOS2           RB  - REQUEST BLOCK
         END


Pedronilo T Perez
RCG/Vectron Systems Inc (USA)                             c Xephon 1991

