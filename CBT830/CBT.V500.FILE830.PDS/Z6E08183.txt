CLIST exit for user-written built-in functions

Release 4 of TSO/E provides a CLIST built-in function that can be
performed on variables, expressions, and character strings.  When
a CLIST process encounters a variable starting with &SYSX, the
built-in function exit gets control.  If the exit  successfully
evaluates the built-in function,  CLIST processing assigns the
result of this evaluation to the requested function.  You can use
the exit for several purposes, eg string manipulation, calculations
etc.

At our site we used several programs (mostly badly documented)
written by different people, which were able to evaluate variables
necessary in CLISTs, eg system-id, default RACF group etc.

By installing this exit, you will be able to retrieve all these
variable evaluations, thus avoiding complex command definitions,
reducing the possibility of losing the source code, and keeping
your environment simple.

The given example of IKJCT44B enables you to determine some
variables relating to system-id, terminal-id, CPU-id, user-id, and
RACF default group.

The appearance of &SYSXSMF, for example, in a CLIST
statement triggers IKJCT44B and the SMF system-id is evaluated
and assigned to the variable &SYSXSMF.

The following is an example of built-in function variable
evaluation:

1	Create an ISPF application command table (ISPF utility).

2	Add the command SID with action SELECT
CMD(%SMFID).

3	Create a CLIST SMFID which contains:

		PROC 0
		SET &ZEDSMSG = &STR(** &SYSXSMF **)
		ISPEXEC SETMSG MSG(ISRZ001)

After refreshing your command table, keying SID at the ISPF
command line will result in a display of your system-id at the
upper-right corner of that panel.  Extension of functions is done
by adding the built-in function variable between the labels
FNCLNGTH and  FNCENTRY with its address label pointing to
your inserted Assembler coding.

This Assembler coding must result in register 1 pointing to the
result data and register 15 has to contain the length of this data.
Conclude your extension by a branch to label RESULT.  Testing
new functions can be done by calling ISPF in a batch job with a
STEPLIB (APF) containing your test version of IKJCT44B and
processing a CLIST which calls your new function.

         TITLE 'IKJCT44B - CLIST built-in function exit routine'
***  NAME : IKJCT44B                                                ***
*    FUNCTION :                                                       *
*        Replace CLIST built-in functions starting with &SYSX         *
*        with the requested data.                                     *
*    ENTRY POINT : IKJCT44B                                           *
*    REGS ON ENTRY :                                                  *
*        R0  - Unpredictable                                          *
*        R1  - Address of standard exit parameter list. Exit-dependent*
*              data starts at offset +36 (dec) in parameter list.     *
*        R2-12 - Unpredictable                                        *
*        R13 - Address of standard save area                          *
*        R14 - Return address                                         *
*        R15 - Load module start address                              *
*    REGS USED :         (Described by REGEQU macro)                  *
*        R1  - On return from routine address of result data.         *
*        R2  - Work register                                          *
*        R3  - Work register                                          *
*        R4  - Pointer to entered command (without prefix SYSX)       *
*        R5/9 - Work registers                                        *
*        R10 - Workarea base                                          *
*        R11 - Second base register                                   *
*        R12 - Module base                                            *
*        R13 - Pointer to a standard save area                        *
*        R14 - Return address                                         *
*    REGS ON RETURN :                                                 *
*        R0-14 - Same as on entry                                     *
*        R15   - Return code :                                        *
*                0  - Function evaluated and answer returned in       *
*                     256-byte answer area.                           *
*                4  - Function evaluated and answer returned in       *
*                     obtained alternate buffer.                      *
*                8  - Variable could not be evaluated. Null variable  *
*                12 - Error exit processing. Display message, set     *
*                     CLIST rc=604 and set program rc in &SYSREASON.  *
*                16 - Error exit processing. No message display and   *
*                     control is passed to the ERROR exit.            *
*    ATTRIBUTES :                                                     *
*        Reusable,Refreshable,Reentrant                               *
*        AMODE(13),RMODE(ANY)                                         *
*        APF-authorized                                               *
*    REMARKS :                                                        *
*        Module must be linked into an LPA library                    *
***      Documentation: SC28-1380 TSO Extensions Customization      ***
***  ADD FUNCTIONS TO THE EXIT :                                    ***
*        In order to add a new function to the exit you must do the   *
*        following steps :                                            *
*        - Add the function entry to the function validation table.   *
*        - Write the conversion routine and at the end branch to the  *
***        post processing routine with label RESULT.               ***
         SPLEVEL SET=2                 Set SYSSPLV
FNCPNTR  CSECT
FNCPNTR  AMODE 31
FNCPNTR  RMODE ANY
         DC    A(FNCTABLE)             Pointer to function table
         DC    A(FNCLNGTH)             Length table entry
         DC    A(FNCENTRY)             # entries in table
IKJCT44B CSECT
IKJCT44B AMODE 31
IKJCT44B RMODE ANY
         SAVE  (14,12),,IKJCT44B.RW26904.&SYSDATE Save registers
         LR    R12,R15                 Save entry point address
         USING IKJCT44B,R12,R11        Setup addressability
         LA    R11,2048(,R12)          Set displacement ...
         LA    R11,2048(,R11)          ... second base register
         LR    R2,R1                   Save parameter address
         GETMAIN RU,LV=WORKLEN         Get working storage
         LR    R10,R1                  Save workarea start address
         USING WORKAREA,R10            Make it addressable
         ST    R13,SAVEAREA+4          Save savearea address
         LA    R15,SAVEAREA            Get address savearea
         ST    R15,8(R13)              Save new-sa in old-sa
         LR    R13,R15                 address new savearea
         XC    RETCODE,RETCODE         Zero return code area
         ST    R2,PARMADRS             Save parameter pointer
         MVI   RETCODE,8               Invalid built-in function code
         L     R3,36(,R2)              Load address builtin function
         L     R15,4(R3)               Load length builtin function
         SH    R15,=H'4'               Subtract prefix SYSX length
         LTR   R15,R15                 Any data left for compare
         BZ    RETURN                  No, exit
***  ROUTINE FUNCTION :                                             ***
*        Compare the built-in command table with the entered command  *
*        and branch to supplied conversion routine.                   *
*        If no match found in command table return to CLIST processing*
*        with return code = 8.                                        *
*    ON START TABLE SEARCH :                                          *
*      - R15 contains the length-1 of the entered built-in function   *
*        without the prefix SYSX. If entered function is &SYSXDATA    *
*        the length in R15 is DATA-1 = 3.                             *
*      - R3 points to the function data of the built-in function. For *
*        &SYSXDATA that would be DATA.                                *
*    WHEN MATCH FOUND :                                               *
*      - R4 points to found command.                                  *
*      - R6 contains the length-1 of the found command without the    *
*        prefix.                                                      *
***    - R15 contains the address of the conversion routine.        ***
         BCTR  R15,R0                  Subtract one for compare
         L     R3,8(R3)                Point to builtin command string
         LA    R3,4(,R3)               Point past SYSX function prefix
         LA    R4,FNCTABLE             Point to start of table
         LA    R5,FNCENTRY             Get # entries in table
FNCCHECK LH    R6,0(R4)                load compare length-1 function
         CR    R6,R15                  Compare length and if ...
         BNE   FNCNEXT                 ... unequal check next entry
         EX    R6,FNCCOMP              Compare entry with builtin data
         BNE   FNCNEXT                 If not equal try next one
         L     R15,12(R4)              Load routine address
         LA    R4,2(,R4)               Point to entered function cmd
         XC    RETCODE,RETCODE         Reset return code function ok
         BR    R15                     Branch to routine
FNCNEXT  LA    R4,FNCLNGTH(,R4)        Point to next table entry
         BCT   R5,FNCCHECK             Try next entry
         B     RETURN                  If no match found exit
FNCCOMP  CLC   2(0,R4),0(R3)           Compare table with builtin data
***  POST PROCESSING ROUTINE :                                      ***
*        Place the found data into the supplied return area (Total    *
*        should not exceed 256-bytes for the moment) update the       *
*        length argument and return to CLIST processing.              *
*    ON ENTRY :                                                       *
*        R1 points to the result data.                                *
***      R15 contains the actual length of the output data.         ***
RESULT   L     R2,PARMADRS             Load parameter pointer
         L     R2,44(R2)               Point to result parmlist
         ST    R15,4(R2)               Set length result in parmlist
         L     R2,8(R2)                Point to parameter data area
         BCTR  R15,R0                  Subtract one for execute
         EX    R15,RSLTCOPY            Copy data into area
         B     RETURN                  Exit to CLIST processing
RSLTCOPY MVC   0(0,R2),0(R1)           Move data into result area
***  RETURN ROUTINE :                                               ***
*      - Save function return code.                                   *
*      - Free obtained working storage                                *
***    - Restore registers and set return code for function driver. ***
RETURN   L     R13,4(R13)              Restore old-sa address
         XR    R2,R2                   Clear REG2 for insertion
         IC    R2,RETCODE              Save retcode
         FREEMAIN RU,LV=WORKLEN,A=(R10) Free gotten storage
         LR    R15,R2                  Set OS return code
         L     R14,12(R13)             Restore REG14
         LM    R0,R12,20(R13)          Restore all registers
         BSM   0,R14                   Return to OS
*** RETRIEVAL ROUTINES :                                            ***
*        Every function has it's own retrieval routine. The only      *
*        function is to retrieve the required data for the post       *
*        processor.                                                   *
*   ON ENTRY :                                                        *
*        R4  - Pointer to entered built-in function word.             *
*        R6  - Built-in function length-1 minus function prefix.      *
*   ON RETURN TO RESULT :                                             *
*        R1  - Points to result data                                  *
***      R15 - Actual length result data.                           ***
*        Retrieve SMF system id                                       *
SMFID    L     R1,CVTPTR               Load address CVT
         L     R1,CVTSMCA-CVT(R1)      Point to SMF blocks
         LA    R1,SMCASID-SMCABASE(R1) Set data pointer to SMFID
         LA    R15,4                   Set length data
         B     RESULT                  Do function update processing
*        Retrieve RACF user id from ACEE                              *
RACFUSER L     R1,PSAAOLD-PSA          load last dispatched ascb
         L     R1,ASCBASXB-ASCB(R1)    then the extension block
         L     R1,ASXBSENV-ASXB(R1)    get racf control block
         XR    R15,R15                 clear reg for insert
         ICM   R15,B'0001',ACEEUSRL-ACEE(R1)  Get actual length data
         LA    R1,ACEEUSRI-ACEE(R1)    Point to userid area
         B     RESULT                  Do function update processing
*        Retrieve RACF default group name from ACEE                   *
RACFGRP  L     R1,PSAAOLD-PSA          Load last dispatched ASCB
         L     R1,ASCBASXB-ASCB(R1)    Get ASCB extension block
         L     R1,ASXBSENV-ASXB(R1)    Get RACF control block
         XR    R15,R15                 Clear reg for insert
         ICM   R15,B'0001',ACEEGRPL-ACEE(R1)  Get actual length data
         LA    R1,ACEEGRPN-ACEE(R1)    Point to group data area
         B     RESULT                  Do function update processing
*        Retrieve TERMINAL id from RACF ACEE                          *
TERMID   L     R1,PSAAOLD-PSA          Load last dispatched ASCB
         L     R1,ASCBASXB-ASCB(R1)    Get ASCB extension block
         L     R1,ASXBSENV-ASXB(R1)    Get RACF control block
         LA    R1,ACEETRID-ACEE(R1)    Point to group data area
         LA    R15,8                   Set length terminal id
         B     RESULT                  Do function update processing
*        Retrieve Current CPU id.                                     *
CPUID    L     R1,PSAPCCAV-PSA         Load PCCA address
         LA    R1,PCCACPID-PCCA(R1)    Point to PCCA CPUID identifier
         LA    R15,12                  Set CPUID length
         B     RESULT                  Do function update processing
***  BUILT-IN FUNCTION VALIDATION TABLE :                           ***
*        This table defines all supported function. The format of     *
*        the entries is as follows :                                  *
*            Offset  Length  Description                              *
*             +0       2     Length argument-1 (For compare step).    *
*             +2       10    Argument. In the CLIST this function     *
*                            will be prefixed with &SYSX.             *
*             +12      4     Address conversion routine.              *
*             +16      40    Function explaining text. This text will *
*                            be display by the FOKBLTIN command.      *
*        All entry length are fixed values. Do not change the length  *
*        of the entries.                                              *
***      >>>>> Only add entries between the comment statements <<<<<***
FNCTABLE DC    AL2(2),CL10'SMF       ',A(SMFID)
         DC    CL40'SMF system ID as specified in SMFPRMxx  ' Text
FNCLNGTH EQU   *-FNCTABLE
*        Add entries after this comment.                              *
         DC    AL2(7),CL10'RACFUSER  ',A(RACFUSER)
         DC    CL40'Current RACF userid from ACEE           ' Text
         DC    AL2(4),CL10'RUSER     ',A(RACFUSER)
         DC    CL40'Current RACF userid from ACEE.    ALIAS ' Text
         DC    AL2(8),CL10'RACFGROUP ',A(RACFGRP)
         DC    CL40'User default RACF connect group         ' Text
         DC    AL2(3),CL10'RGRP      ',A(RACFGRP)
         DC    CL40'User default RACF connect group   ALIAS ' Text
         DC    AL2(5),CL10'TERMID    ',A(TERMID)
         DC    CL40'Session terminal node name.             ' Text
         DC    AL2(4),CL10'CPUID     ',A(CPUID)
         DC    CL40'Hardware CPU id from current CPU.       ' Text
*        Add entries before this comment.                             *
FNCENTRY EQU   (*-FNCTABLE)/FNCLNGTH
*        Constant definitions.                                        *
         LTORG
WORKAREA DSECT
         DS    0F                      Alignment
SAVEAREA DS    18F                     Register save area
RETCODE  DS    F                       Return code save area
PARMADRS DS    A                       Parameter address save area
WORKLEN  EQU   *-WORKAREA
         CVT   DSECT=YES
         IEESMCA
         IHAASCB
         IHAASXB
         IHAACEE
         IHAPSA
         IHAPCCA
         END


Ruud de Wit
Systems Programmer
Fokker Aircraft BV (The Netherlands)	€ Xephon 1989

