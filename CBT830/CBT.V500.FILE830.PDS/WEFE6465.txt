ISPF edit monitor


SOURCE CODE FOR SEDIT

         TITLE 'PROGRAM TO LIST ENQUEUES'
         ENTRY SEDIT
SEDIT    RMODE 24
SEDIT    AMODE 31
SEDIT    CSECT
         BAKR  R14,0              save registers
         LA    R10,0(R15,0)       set base address register
         USING SEDIT,R10          set module addressability
         LA    R13,SAVEAREA       put save area address in r13
         MVC   4(4,R13),=C'F1SA'  set macro in save area
         USING RIB,R7
         USING RIBVAR,R8
         USING RIBE,R9
         B     MAIN               skip load comments
         DC    C' PROGRAM TO DISPLAY DATASET ENQUES'
         DC    C' AUTHOR: FERNANDO NUNES '
MAIN     DS    0H
* ispf variables definition
         CALL  ISPLINK,(VDEFINE,DEFJOB,JOB,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,DEFPFKEY,PFKEY,CHAR,L4),VL
         CALL  ISPLINK,(VDEFINE,DEFDSN,DSN,CHAR,L80),VL
         CALL  ISPLINK,(VDEFINE,DEFNAME,NAME,CHAR,L20),VL
         CALL  ISPLINK,(VDEFINE,DEFMBR,MBR,CHAR,L8),VL
         CALL  ISPLINK,(VDEFINE,DEFRNAME,DSNAME,CHAR,L80),VL
         CALL  ISPLINK,(VDEFINE,DEFJOBN,JOBNAME,CHAR,L8),VL
         CALL  ISPLINK,(DISPLAY,DEFMAP),VL  display input panel
         CLC   PFKEY(4),=C'PF03'  F3 pressed ?
         BE    EXIT               yes, then exit to TSO
INIT     CALL  ISPLINK,(TBCREATE,TBL,,NAMES,NOWRITE,REPLACE),VL
         SR    R3,R3
         ST    R3,TOKEN           clear TOKEN variable
MAINLOOP BAL   R14,GQSCAN         scan for enqueues
         CLI   RC,0               check subroutine rc ?
         BE    CONT               if zero or
         CLI   RC,8               eighth
         BE    CONT               process results
         B     SHOWVAR            otherwise display results
CONT     L     R4,RIBCPY          process results obtained
         LA    R7,AREA
RIBLOOP  ST    R4,RIBCPY
         BAL   R14,NEWRIB         set up rib and ribe addressability
         BAL   R14,LDRIB          load rib variables
         L     R4,NRIBE
RIBELOOP ST    R4,NRIBE
         BAL   R14,LDRIBE         load ribe variables
         CLI   JOB,C' '           job specified ?
         BE    CHKRNAME           no, then check access
         CALL  COMPARE,(JOB,JOBNAME,L8),VL
         LTR   R15,R15
         BNZ   NEXT               no, then skip this record
CHKRNAME CLI   DSN,C' '           dataset name specified ?
         BE    FILTER             no, then check access
         CALL  COMPARE,(DSN,RNAME,L80),VL compare dataset name
         LTR   R15,R15
         BNZ   NEXT               different, then skip this record
*        skip dataset names defined by '*.ispf.ispprof'
FILTER   CALL  COMPARE,(ISPFEDIT,RNAME,L80),VL
         LTR   R15,R15
         BZ    NEXT               different, then skip this record
         LA    R1,80              clear dsname
         LA    R2,DSNAME
CLEAR    MVI   R1(R2),C' '
         LA    R2,1(R2)
         BCT   R1,CLEAR
         LA    R7,RNAME
         LA    R6,RNAME+44
CPLOOP1  BCTR  R6,0               calculate rname size
         CLI   0(R6),C' '
         BE    CPLOOP1
         SR    R6,R7
         EX    R6,MVCRNAME        and move it
         CLI   MBR,C' '           is there a member present ?
         BE    GETNAME            yes, then don't add it
         LA    R4,C'('
         STC   R4,DSNAME+1(R6)
         LA    R5,DSNAME+2(R6)
         LA    R7,MBR
         LA    R6,MBR+8
CPLOOP2  BCTR  R6,0
         CLI   0(R6),C' '
         BE    CPLOOP2
         SR    R6,R7
         EX    R6,MVCMBR
         LA    R4,C')'
         STC   R4,1(R6,R5)
GETNAME  GETUSRN JOBNAME,NAME     obtain racf defined name
TABLEADD CALL  ISPLINK,(TBADD,TBL),VL  add record to the ispf table
NEXT     L     R2,RIBESIZE
         ALR   R9,R2
         L     R4,NRIBE
         BCT   R4,RIBELOOP        process next ribe
         LR    R7,R9
         L     R4,RIBCPY
         BCT   R4,RIBLOOP         process next rib
         CLI   RC,8               end of processing ?
         BE    MAINLOOP           no, then get more data
SHOWVAR  CALL  ISPLINK,(TBSORT,TBL,SORTLIST),VL  sort ispf table
         CALL  ISPLINK,(TBTOP,TBL),VL            set top position
         CALL  ISPLINK,(TBDISPL,TBL,DEFMAP),VL   display table
         CALL  ISPLINK,(TBEND,TBL),VL            delete table
         CLC   PFKEY(4),=C'PF03'  F3 key pressed ?
         BE    EXIT               yes, then exit
         B     INIT               no, get more commands
* exit to TSO
EXIT     EQU   *
         CALL  ISPLINK,(VDELETE,VARS),VL  delete ispf variables
         PR                       return to TSO
MVCRNAME MVC   DSNAME(0),RNAME
MVCMBR   MVC   0(0,R5),MBR
*-*******************************************************************-*
*- GQSCAN:    SUBROUTINE                                             -*
*- Function:  extract information from global serialization queue    -*
*- Operation:                                                        -*
*-       invoke macro GQSCAN with the necessary parameters           -*
*-       return to caller                                            -*
*-*******************************************************************-*
GQSCAN   DS    0H
         LA    R4,DSN
         LA    R6,1
         LA    R7,DSN+79
         LA    R2,0
LENCALC  CLI   0(R4),C' '
         BZ    SCAN
         ALR   R2,R6
         BXLE  R4,R6,LENCALC
SCAN     GQSCAN AREA=(AREA,AREASIZE),SCOPE=ALL,TOKEN=TOKEN,            *
               RESNAME=(QNAME,,,GENERIC),REQCNT=1
         LR    R4,R0
         SRL   R4,16
         ST    R4,RIBSIZE
         LR    R4,R0
         SLL   R4,16
         SRL   R4,16
         ST    R4,RIBESIZE
         ST    R1,RIBCPY
         STCM  R15,B'0001',RC
         BR    R14
*-*******************************************************************-*
*- NEWRIB:    SUBROUTINE                                             -*
*- Function:  set up rib and ribe addressability                      -*
*- Operation:                                                        -*
*-       set rib addressability                                      -*
*-       set ribe addressability                                     -*
*-       return to caller                                            -*
*-*******************************************************************-*
NEWRIB   DS    0H
         L     R4,RIBSIZE
         LR    R8,R7
         ALR   R8,R4              R8=R7+ribe size
* ribe addressability
         LR    R9,R8
         LH    R6,RIBVLEN
         AR    R9,R6              ribe=ribevar+ribe var size
         BR    R14
*-*******************************************************************-*
*- LDRIB:     SUBROUTINE                                             -*
*- Function:  rib variables reading                                  -*
*- Operation:                                                        -*
*-       get resource major name (qname), and the number of ribes    -*
*-         retrieved for this rib                                    -*
*-       return to caller                                            -*
*-*******************************************************************-*
LDRIB    DS    0H
         MVC   QNAME(8),RIBQNAME  get qname variable
         L     R4,RIBNRIBE        get number of ribes retreived
         ST    R4,NRIBE           for this rib
         BR    R14
*-*******************************************************************-*
*- LDRIBE:    SUBROUTINE                                             -*
*- Function:  read ribe variables                                    -*
*- Operation:                                                        -*
*-       get resource name  and job name                             -*
*-       return to caller                                            -*
*-*******************************************************************-*
LDRIBE   DS    0H
         LH    R6,RIBRNMLN
         SRL   R6,8
         LA    R2,79
         BCTR  R6,0
         CR    R2,R6
         BH    CRNAME
         LA    R6,79
CRNAME   LA    R1,80
         LA    R2,RNAME
CLCRNAME MVI   R1(R2),C' '
         LA    R2,1(R2)
         BCT   R1,CLCRNAME
         EX    R6,MVRNAME                get resource name
         MVC   JOBNAME(8),RIBEJBNM       get job name
         BR    R14
         USING RIBVAR,R7
MVRNAME  MVC   RNAME(0),RIBRNAME
*-******************************************************************-*
*                       program variables                            *
*-******************************************************************-*
         DS    0F
SAVEAREA DS    18A
STACK    DS    16A
NRIBE    DS    A
RIBSIZE  DS    A
RIBESIZE DS    A
RIBCPY   DS    A
RC       DS    C
* gqscan macro used variables
TOKEN    DS    F
QNAME    DC    CL8'SPFEDIT '
* ispf defined variables
RNAME    DS    CL80
DSNAME   DS    CL80
MBR      EQU   RNAME+44
JOB      DC    9C' '
JOBNAME  DS    CL8
NAME     DS    CL20
PFKEY    DS    CL8
DSN      DC    80C' '
* ispf constants definitions
DISPLAY  DC    CL8'DISPLAY'
TBDISPL  DC    CL8'TBDISPL'
TBTOP    DC    CL8'TBTOP'
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
TBCREATE DC    CL8'TBCREATE'
TBADD    DC    CL8'TBADD'
TBSORT   DC    CL8'TBSORT'
TBEND    DC    CL8'TBEND'
DEFPFKEY DC    CL9'PFKEY'
DEFRNAME DC    CL9'RNAME'
DEFNAME  DC    CL9'NAME'
DEFJOB   DC    CL9'USR'
DEFJOBN  DC    CL9'USERNAME'
DEFDSN   DC    CL9'DSN'
DEFMBR   DC    CL9'MBR'
DEFMAP   DC    CL9'PSEDIT'
TBL      DC    CL9'SEDITBL'
NAMES    DC    C'(RNAME,NAME,USERNAME)'
VARS     DC    C'(USR,PFKEY,DSN,RNAME,NAME,USERNAME,MBR)'
SORTLIST DC    C'(RNAME,C,A)'
CHAR     DC    CL8'CHAR'
REPLACE  DC    CL8'REPLACE'
NOWRITE  DC    CL8'NOWRITE'
L4       DC    AL4(4)
L8       DC    AL4(8)
L20      DC    AL4(20)
L44      DC    AL4(44)
L80      DC    AL4(80)
         LTORG ,
ISPFEDIT DC    CL80'*.ISPF.ISPPROF'
AREA     DS    8192C
AREASIZE EQU   8192
* gqscan macro buffer
*-******************************************************************-*
*                       dummy sections                               *
*-******************************************************************-*
         ISGRIB                   rib and ribe mapping
         IRRPRXTW
         END


COMPARE SOURCE

         TITLE 'GENERIC STRING COMPARE PROGRAM'
         ENTRY COMPARE
COMPARE  RMODE 24
COMPARE  AMODE 31
COMPARE  CSECT
         BAKR  R14,0              save regs
         LA    R10,0(R15,0)       set base address regs
         USING COMPARE,R10
         B     MAIN               branch load comments
         DC    C' GENERIC STRING COMPARE PROGRAM'
         DC    C' AUTHOR: FERNANDO NUNES '
MAIN     DS    0H
         USING PARM,R1            input parm addressability
         L     R2,LENADDR
         USING LENGTH,R2
         L     R4,MASKADDR
         USING MASK,R4
         L     R5,STRADDR
         USING STRING,R5
         L     R3,LEN
RECURS   LTR   R3,R3              test string length
         BZ    EQUAL              if zero, then equal
         CLI   MSK,C' '           mask, space char ?
         BE    L1
         CLI   MSK,C'%'           mask, non-space generic char ?
         BE    L2
         CLI   MSK,C'*'           mask, generic string ?
         BE    L3
         CLI   STR,C' '           mask, space char ?
         BE    DIFF
         CLC   STR(1),MSK         str, equal chars ?
         BNE   DIFF
NEXT     BCTR  R3,0
         LA    R4,MSK+1
         LA    R5,STR+1
         B     RECURS             test next string position
L1       DS    0H
         CLI   STR,C' '
         BE    EQUAL              if both spaces, then equal
         B     DIFF
L2       DS    0H
         CLI   STR,C' '           str should be non-space
         BE    DIFF               else, different
         B     NEXT
L3       DS    0H                 generic string detected
         LA    R4,MSK+1
         CLI   MSK,C' '
         BE    EQUAL
LOOP     LA    R15,RECURS
         BAKR  0,R15              test substring, (recursive call)
         LTR   R15,R15
         BZ    EQUAL
         LA    R5,STR+1
         BCT   R3,LOOP            repeat for all possible substrings
DIFF     LA    R15,12             return different
         PR
EQUAL    LA    R15,00             return equal
         PR
*-*******************************************************************-*
*-                    Dummy Sections                                 -*
*-*******************************************************************-*
PARM     DSECT                    input parm dsects
MASKADDR DS    A
STRADDR  DS    A
LENADDR  DS    A
MASK     DSECT
MSK      DS    CL80               may have any size
STRING   DSECT
STR      DS    CL80               may have any size
LENGTH   DSECT
LEN      DS    A
         END


GETUSRN MACRO

          MACRO
.******************************************************************
.*   MACRO DOCUMENTATION INFORMATION                              *
.*   NAME:     GETUSRN                                            *
.*   PURPOSE:  OBTAINS USER'S RACF DEFINED NAME                   *
.*             INVOKED WITH TWO PARMS:                            *
.*              USERID ADDRESS (8 CHAR FIELD)                     *
.*              USERNAME ADDRESS (20 CHAR FIELD)                  *
.******************************************************************
&NAME    GETUSRN &USERID,&USERNAME
         AIF    ('&SYSLIST(1)' EQ '').NOOP1
         AIF    ('&SYSLIST(2)' EQ '').NOOP2
         AIF    ('&SYSLIST(3)' NE '').MANYOP
         LCLC  &LABEL
&LABEL   SETC  'GET'.'&SYSNDX'
&NAME    LA    R1,&LABEL.A
         B     &LABEL.B
&LABEL.A DC    A(&USERID)
         DC    A(&USERNAME)
&LABEL.B SVC   254
         MEXIT
.NOOP1   ANOP
         MNOTE 12,'FIRST OPERAND OMITTED -- REQUIRED FIELD'
         MEXIT
.NOOP2   ANOP
         MNOTE 12,'SECOND OPERAND OMITTED -- REQUIRED FIELD'
         MEXIT
.MANYOP  ANOP
         MNOTE 12,'ONLY TWO OPERANDS REQUIRED'
         MEXIT
         MEND


IGC0025D SVC

IGC00254 TITLE '-- SVC TO EXTRACT RACF INFORMATION --'
*******************************************************************
* THIS SVC EXTRACT THE RACF DEFINE NAME                           *
*******************************************************************
IGC00254 START 0
         USING IGC00254,R6        svc addressability
         L     R8,0(R1)
         L     R9,4(R1)
         USING USERID,R8          userid addressability
         USING USERNAME,R9        username addressability
         LR    R7,R14             save return address
         GETMAIN R,LV=DYNLEN,LOC=(RES,ANY) get dynamic storage
         LR    R11,R1
         USING DYNAREA,R11
         MVC   DYNRACR(RACLEN),RACSTAT     initialize dynamic storage
         RACROUTE REQUEST=EXTRACT,ENTITY=USERID,RELEASE=1.9,           X
               WORKA=RACWORK,FIELDS=FLDLST,                            X
               TYPE=EXTRACT,MF=(E,DYNRACR) extract user name from racf
         LTR   R15,R15
         BNZ   EXIT
         USING EXTWKEA,R1
         LA    R2,EXTWOPT
         USING EXTWANM,R2
         MVC   USERNAME(20),EXTWNAME       copy user name
         XR    R3,R3
         ICM   R3,1,EXTWSP
         XR    R2,R2
         ICM   R2,7,EXTWLN
         FREEMAIN R,LV=(R2),A=(R1),SP=(R3) free racf output area
EXIT     DS    0H
         FREEMAIN R,LV=DYNLEN,A=(R11)      free dynamic area
         BR    R7                          return
*-******************************************************************-*
*-             Static Variables                                     -*
*-******************************************************************-*
FLDLST   DC    A(1)
         DC    CL8'PGMRNAME'               additional requested field
RACSTAT  RACROUTE REQUEST=EXTRACT,ENTITY=*-*,RELEASE=1.9,              X
               WORKA=*-*,FLDACC=NO,CLASS='USER',FIELDS=*-*,            X
               TYPE=EXTRACT,MF=L
RACLEN   EQU   *-RACSTAT
         LTORG ,
*-******************************************************************-*
*-              Dummy Sections                                      -*
*-******************************************************************-*
         DS    0H
USERID   DS    CL8
         DS    0H
USERNAME DS    CL20
DYNAREA  DSECT
DYNRACR  RACROUTE REQUEST=EXTRACT,ENTITY=*-*,RELEASE=1.9,              X
               WORKA=*-*,FLDACC=NO,CLASS='USER',FIELDS=*-*,            X
               TYPE=EXTRACT,MF=L
RACWORK  DS    128F
DYNLEN   EQU   *-DYNAREA
         IRRPRXTW
         END


PHSEDIT PANEL

)ATTR DEFAULT(_{})
! TYPE(TEXT)   INTENS(LOW)   COLOR(WHITE)
? TYPE(TEXT)   INTENS(LOW)   COLOR(GREEN)
# TYPE(TEXT)   INTENS(HIGH)  COLOR(YELLOW)
$ TYPE(TEXT)   INTENS(HIGH)  COLOR(RED)
_ TYPE(TEXT)   INTENS(HIGH)  COLOR(WHITE)
)BODY
_BONANCA SA {================#ISPF EDIT MONITOR{===========================_FCN
{
!                                  HELP
! Function :?Displays current ISPF Edit sessions.
{
! Input Fields:
{   Dataset-?Dataset name filter.
{   User id-?TSO user id filter.
{
! Output Fields:
{   Dataset name -?Edited dataset.
{   User id      -?TSO user id.
{   User name    -?RACF defined user name.
{
$ note:?generic filter characters are accepted:
            {*?for zero or more characters
            {%?for one non-space character

?              Example:{*.D4.*.%? <=> ?RHD.DEVT.D4.BETA.S
                                      ?MILL.D4.XPTO.CNTL.D
                                      ?.D4..A               $PRESS F3 TO RETURN
)END


PSEDIT PANEL

)ATTR
! TYPE(TEXT)   INTENS(LOW)   COLOR(WHITE)
? TYPE(TEXT)   INTENS(LOW)   COLOR(GREEN)
# TYPE(TEXT)   INTENS(HIGH)  COLOR(YELLOW)
$ TYPE(TEXT)   INTENS(HIGH)  COLOR(RED)
@ TYPE(OUTPUT) INTENS(LOW)   COLOR(GREEN)
_ TYPE(OUTPUT) INTENS(LOW)   COLOR(WHITE) JUST(ASIS)
$ TYPE(OUTPUT) INTENS(LOW)   COLOR(YELLOW) CAPS(OFF)
* TYPE(INPUT)  INTENS(HIGH)  JUST(LEFT)
)BODY CMD(CMD)
%BONANCA SA +================#ISPF EDIT MONITOR+===========================%FCN
!COMMAND ===>*CMD
+
!Dataset ==>*DSN
!User id ==>*USR     +
+
!Dataset name                            ?User id #User name
+===============================================================================
)MODEL
_RNAME                                   @USERNAME$NAME
)INIT
.CURSOR = DSN
.HELP = PHSEDIT
 VGET (DSN)
 VGET (JOB)
)PROC
 &PFKEY=.PFKEY
 VPUT (DSN)
 VPUT (JOB)
)END


Fernando Manuel Carvalho Nunes
Systems Programmer
Bonanìa Seguros (Portugal)           c Xephon 1996

