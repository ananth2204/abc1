Use of CONTROL MAIN in ISPF CLISTs

CLIST writers will be aware of the need to code either
CONTROL MAIN or CONTROL NOFLUSH in most CLISTs.
This is to prevent the CLIST from being flushed after 'errors'
such as a non-zero return code from a command processor.  If
neither of these statements is included then any situation such
as return code 4 from the command ALLOCATE would
terminate the CLIST.

Normally, it is desirable to continue and test the return code.
However, there is an important difference between CONTROL
MAIN and CONTROL NOFLUSH when executing CLISTs
under ISPF.  CONTROL MAIN prevents ISPF from flushing
the CLIST after a severe ISPF error.  This can cause problems
and result in continual severe ISPF errors because ISPF is
unable to flush the CLIST that is causing the problem.

An example would be a CLIST issuing a TBOPEN that failed
for some reason with a severe ISPF error.  ISPF attempts to
flush the CLIST.  The next time any CLIST is invoked the
previous one will continue regardless and probably result in
another severe ISPF error and so on.  CONTROL MAIN is
preventing the first CLIST from being flushed from the stack.

Fortunately the solution is simple: coding CONTROL
NOFLUSH will allow control to be retained after non-zero
return codes in the CLIST but will allow ISPF to flush the
CLIST stack after a severe error.  All occurrences of
CONTROL MAIN should be changed to CONTROL
NOFLUSH if the CLIST is to execute under ISPF and to issue
ISPF services.

One alternative is to issue the ISPEXEC CONTROL ERRORS
RETURN service which instructs ISPF to suppress severe
errors and to return to the dialog.  This should only be used
when the dialog has logic to handle every possible severe error
return code itself. Indiscriminate use of this service will lead to
errors being ignored and possible data loss.


                                                                c Xephon 1991

