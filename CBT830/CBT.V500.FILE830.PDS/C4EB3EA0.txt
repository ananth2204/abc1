Dynamic TSO output creation

The following program is used at our installation to create or delete
JCL output statements for TSO users dynamically.  The facility only
works using MVS/ESA and TSO/E 1.3 or above.

Once created, the output statement can be used by the TSO ALLOCATE
command to give access to the PAGEDEF, FORMDEF, etc options which
are otherwise only available dynamically if you have TSO/E Version
2.

Only a subset of the possible options is supported.  The valid options
are CLASS(SYSOUT CLASS), DEST, COPIES, PAGEDEF, FORMDEF, CHARS,
LINECT, and PRMODE.

DYNOUT   TITLE 'CP TO CREATE/DELETE AN OUTPUT STATEMENT DYNAMICALLY'
*****    EXAMPLE SYNTAX:                                          *****
*            DYNOUT OUT1 PAGEDEF(PDEF1) FORMDEF(FDEF2) COPIES(3)      *
*         - WILL GENERATE AN OUTPUT STATEMENT CALLED OUT1 WITH THE    *
*           REQUESTED OPTIONS.                                        *
*            DYNOUT OUT1 DEL                                          *
*         - WILL DELETE THE OUT1 OUTPUT STATEMENT IF IT WAS CREATED   *
*****       DYNAMICALLY (IE NOT VIA JCL)                          *****
DYNOUT   CSECT ,
         SAVE  (14,12),,DYNOUT-&SYSDATE-&SYSTIME   SAVE REGS/SET ID
         LR    R12,R15               BASE REG FOR CSECT
         USING DYNOUT,R12
         CNOP  0,4                   ALIGN TO FULLWORD
         LA    R15,*+8               SET SA ADDRESS AND CLEAR HI-ORDER
         B     *+76                  SKIP SAVE AREA
         DC    18A(0)                SAVE AREA
         ST    R13,4(R15)            => CALLING PROGS SAVEAREA
         ST    R15,8(R13)            => MY SAVEAREA
         LR    R13,R15               BY CONVENTION
*              PARSE THE COMMAND BUFFER
         TM    0(R1),X'80'         SINGLE PARM ?
         BZ    PARMOK              BIF NOT...SHOULD BE OK
         TPUT  =C'DYNOUT MUST BE INVOKED AS A TSO CP',34
         B     RETURN0             CAN'T USE PARSE ETC SO END....
PARMOK   DS    0H
         LR    R2,R1               COPY CPPL ADDRESS
         USING CPPL,R2
         LA    R3,MYPPL            NOW SET UP PARSE PARM LIST
         USING PPL,R3
         MVC   PPLUPT(4),CPPLUPT   UPT ADDR
         MVC   PPLECT(4),CPPLECT   ECT ADDR
         LA    R4,MYECB
         ST    R4,PPLECB
         L     R4,=A(Â£PCL)         PCL CSECT ADDR
         ST    R4,PPLPCL
         LA    R4,PDLADDR
         ST    R4,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF CMD BUFFER ADDR
         XC    PPLUWA,PPLUWA       ZERO UWA ADDRESS
         XC    MYECB,MYECB         CLEAR ECB
         LR    R1,R3               COPY PPL ADDRESS
         CALLTSSR EP=IKJPARS       CALL PARSE
         LTR   R11,R15             WAS PARSE SUCCESSFUL ?
         BZ    PARSEOK             BIF SO
         TPUT  =C'PARSE ERROR',11
         LR    R15,R11             RESTORE RETCODE
         B     RETURN              AND END
*              SUCCESSFUL PARSE....NOW SET OPTION FIELDS
PARSEOK  DS    0H
         L     R2,PDLADDR          LOAD PDL ADDRESS
         USING IKJPARMD,R2         AND MAP IT
         LA    R3,POUTNAME         => PDE
         LA    R4,OUTNAME          => OUTNAME FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         CLC   =H'1',PDELETE       DELETE OPTION REQUESTED ?
         BE    OUTDEL              BIF SO...EASY PEASY
         LA    R3,SCLASS           => PDE
         LA    R4,CLASS            => TARGET FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   CLASSX              BIF PARM NOT ENTERED
         LA    R15,TUCLASS         => CLASS TU
         ST    R15,OTUCLASS        SAVE IN TU PTR LIST
CLASSX   DS    0H
         LA    R3,SDEST            => PDE
         LA    R4,DEST             => TARGET FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   DESTX               BIF PARM NOT ENTERED
         LA    R15,TUDEST          => DEST TU
         ST    R15,OTUDEST         SAVE IN TU PTR LIST
DESTX    DS    0H
         LA    R3,SCOPIES          => PDE
         LA    R4,COPIES           => TARGET FIELD
         OI    FLAG,DEC1FLD        INDICATE NUMERIC FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   COPIESX             BIF PARM NOT ENTERED
         LA    R15,TUCOPIES        => COPIES TU
         ST    R15,OTUCOPIS        SAVE IN TU PTR LIST
         CLI   COPIES,X'00'        ZERO COPIES REQUESTED ?
         BNE   COPIESX             BIF NOT..STICK WITH IT
         MVI   COPIES,X'01'        SET COPIES=1
COPIESX  DS    0H
*              STILL SETTING OPTION FIELDS...
         LA    R3,SPDEF            => PDE
         LA    R4,PAGEDEF          => TARGET FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   PDEFX               BIF PARM NOT ENTERED
         LA    R15,TUPDEF          => PAGEDEF TU
         ST    R15,OTUPDEF         SAVE IN TU PTR LIST
PDEFX    DS    0H
         LA    R3,SFDEF            => PDE
         LA    R4,FORMDEF          => TARGET FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   FDEFX               BIF PARM NOT ENTERED
         LA    R15,TUFDEF          => FORMDEF TU
         ST    R15,OTUFDEF         SAVE IN TU PTR LIST
FDEFX    DS    0H
         LA    R3,SCHARS           => PDE
         LA    R4,CHARS            => TARGET FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   CHARSX              BIF PARM NOT ENTERED
         LA    R15,TUCHARS         => CHARS TU
         ST    R15,OTUCHARS        SAVE IN TU PTR LIST
CHARSX   DS    0H
         LA    R3,SLINECT          => PDE
         LA    R4,LINECT           => TARGET FIELD
         OI    FLAG,DEC1FLD        INDICATE NUMERIC FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   LINECTX             BIF PARM NOT ENTERED
         LA    R15,TULINCT         => LINECT TU
         ST    R15,OTULINCT        SAVE IN TU PTR LIST
LINECTX  DS    0H
         LA    R3,SPRMODE          => PDE
         LA    R4,PRMODE           => TARGET FIELD
         BAL   R14,COPYFLD         COPY INPUT TO OUTPUT
         BNZ   PRMODEX             BIF PARM NOT ENTERED
         LA    R15,TUPRMODE        => PRMODE TU
         ST    R15,OTUPRMOD        SAVE IN TU PTR LIST
PRMODEX  DS    0H
*              CREATE OR DELETE THE OUTPUT STATEMENT
         OUTADD NAME=OUTNAME,TEXTPTR=OUTUPTRS,MF=(E,ADDPARML)
         LTR   R15,R15             OK ?
         BZ    RETURN0             BIF SO...IT'S COOL
         B     ERRORMSG            OTHERWISE ISSUE ERROR MESSAGE
OUTDEL   DS    0H
         OUTDEL NAME=OUTNAME,MF=(E,DELPARML)
         LTR   R15,R15             OK ?
         BZ    RETURN0             BIF SO...IT'S COOL
ERRORMSG DS    0H
         STM   R15,R1,OUTARET      SAVE RETCODE/REASON/KEY IN ERR
         SLL   R15,24              SHIFT RH BYTE TO LH BYTE
         SLL   R0,8                SHIFT RH HWORD TO MIDDLE
         AR    R1,R0               ADD SHIFTED REASON CODE
         AR    R1,R15              COMPOSITE RETCODE/REASON/KEY-IN-ERR
         LR    R11,R1              SAVE IT
         LA    R2,MSGTAB           => MESSAGE TABLE
         LA    R3,MSGENT#          NO OF ENTRIES IN TABLE
MSGLOOP  DS    0H
         CLC   0(2,R2),OUTARSN+2   THIS REASON CODE ?
         BE    GOTMSG              BIF SO...WRITE THE MESSAGE
         LA    R2,MSGLEN(,R2)      => NEXT MESSAGE
         BCT   R3,MSGLOOP          TRY ALL REASON CODES
         BAL   R14,R11HEX          HEX R11 (COMPOSITE RETCODE)
         MVC   ERRRC,DWORD         RETURN CODE
         MVC   ERRRSN,DWORD+2      REASON CODE
         MVC   ERRKEY,DWORD+6      KEY IN ERROR (IF ANY)
         TPUT  ERRMSG,ERRMSGL      WRITE ERROR MSG
         LR    R15,R11             SAVE RETCODE
         B     RETURN              AND END
GOTMSG   DS    0H
         TPUT  2(R2),MSGLEN-2      WRITE ERROR MSG
         LR    R15,R11             SET RETCODE
         B     RETURN              AND END
*              T E R M I N A T E
RETURN0  DS    0H
         SLR   R15,R15                        ZERO RETURN CODE
RETURN   DS    0H
         L     R13,4(R13)          => CALLING PROGS SAVE AREA
         ST    R15,16(R13)         RETURN CODE (R15)
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         BR    R14
*              COPY INPUT FIELD
COPYFLD  DS    0H
         TM    6(R3),X'80'         FIELD PRESENT ?
         BZ    COPYNZ              BIF NOT...
         L     R15,0(,R3)          => INPUT FIELD
         LH    R3,4(,R3)           LEN OF INPUT
         BCTR  R3,0                MINUS 1 FOR EXECUTE
         TM    FLAG,DEC1FLD        NUMERIC FIELD ?
         BZ    COPYONLY            BIF NOT...STRAIGHT COPY
         EX    R3,FLDPACK          PACK INPUT FIELD
         CVB   R15,DWORD           MAKE BINARY
         STC   R15,0(,R4)          SAVE IN SINGLE BYTE TARGET
         SLR   R15,R15             SHOW FIELD IS PRESENT
         B     COPYX               AND RETURN TO CALLER
COPYONLY DS    0H
         EX    R3,FLDCOPY          COPY INPUT TO TARGET FIELD
         SLR   R15,R15             SHOW FIELD IS PRESENT
         B     COPYX               AND RETURN TO CALLER
FLDCOPY  MVC   0(*-*,R4),0(R15)    << EXECUTED >>
FLDPACK  PACK  DWORD(8),0(*-*,R15) << EXECUTED >>
COPYNZ   DS    0H
         LA    R15,1               R15 NON-ZERO = FIELD NOT PRESENT
COPYX    DS    0H
         NI    FLAG,255-DEC1FLD    RESET NUMERIC FIELD FLAG
         LTR   R15,R15             SET RETURN CODE
         BR    R14                 RETURN TO CALLER
*              ROUTINE TO CONVERT R11 CONTENTS TO PRINTABLE HEX CHARS
*              OUTPUT VALUE SAVED IN FIELD DWORD
R11HEX   DS    0H
         STCM  R11,B'1000',DWORD       1ST CHAR
         MVO   DWORD(2),DWORD(1)       SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R11,B'1000',DWORD+1     1ST CHAR AGAIN
         NI    DWORD+1,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R11,B'0100',DWORD+2     2ND CHAR
         MVO   DWORD+2(2),DWORD+2(1)   SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R11,B'0100',DWORD+3     2ND CHAR AGAIN
         NI    DWORD+3,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R11,B'0010',DWORD+4     3RD CHAR
         MVO   DWORD+4(2),DWORD+4(1)   SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R11,B'0010',DWORD+5     3RD CHAR AGAIN
         NI    DWORD+5,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         STCM  R11,B'0001',DWORD+6     4TH CHAR
         MVO   DWORD+6(2),DWORD+6(1)   SHIFT RIGHT + ZERO HIGH NIBBLE
         STCM  R11,B'0001',DWORD+7     4TH CHAR AGAIN
         NI    DWORD+7,X'0F'           ZERO HIGH NIBBLE OF 2ND BYTE
         TR    DWORD,=CL16'0123456789ABCDEF' CONVERT TO HEX CHARS
         BR    R14                RETURN TO CALLER
*              CONSTANTS AND STORAGE RESERVATIONS
         LTORG
FLAG     DC    X'00'
DEC1FLD  EQU   X'80'               DECIMAL FIELD....STC INTO TARGET
DWORD    DS    D
PDLADDR  DS    F
MYECB    DS    F
MYPPL    DS    7F
MSGTAB   EQU   *
         DC    X'0300',CL35'INVALID FIELD VALUE'
MSGLEN   EQU   *-MSGTAB
         DC    X'038B',CL35'INVALID DESCRIPTOR NAME'
         DC    X'0401',CL35'NAMED DESCRIPTOR ALREADY EXISTS'
         DC    X'0402',CL35'NOT DELETED - IT DOESNT EXIST'
         DC    X'0403',CL35'NOT DELETED - CREATED VIA JCL'
MSGENT#  EQU   (*-MSGTAB)/MSGLEN
ERRMSG   EQU   *
         DC    C'ERROR RC='
ERRRC    DC    CL2' ',C' RSN='
ERRRSN   DC    CL4' ',C' KEY='
ERRKEY   DC    CL2' ',C' (HEX)'
ERRMSGL  EQU   *-ERRMSG
ADDPARML OUTADD MF=L
DELPARML OUTDEL MF=L
OUTNAME  DC    CL8' '              OUTPUT DESCRIPTOR NAME
OUTARET  DS    F                   OUTADD RETURN CODE
OUTARSN  DS    F                   OUTADD REASON CODE
OUTAKEY  DS    F                   OUTADD KEY IN ERROR
OUTUPTRS DS    0F                  TU PTRS
OTUCLASS DC    A(0) A(TUCLASS)     => CLASS TU
OTUDEST  DC    A(0) A(TUDEST)      => DEST TU
OTUFDEF  DC    A(0) A(TUFDEF)      => FORMDEF TU
OTUPDEF  DC    A(0) A(TUPDEF)      => PAGEDEF TU
OTUCHARS DC    A(0) A(TUCHARS      => CHARS TU
OTULINCT DC    A(0) A(TULINCT)     => LINECT TU
OTUPRMOD DC    A(0) A(TUPRMODE)    => PRMODE TU
OTUCOPIS DC    A(0) A(TUCOPIES)    => COPIES TU
OTUDEFLT DC    X'80',AL3(TUDEFLT)  => 'DEFAULT' TU
         DS    0H                  ---- HWORD ALIGN
TUCLASS  DC    AL2(DOCLASS),H'1',H'1'
CLASS    DS    CL1                 CLASS VALUE
         DS    0H                  ---- HWORD ALIGN
TUDEST   DC    AL2(DODEST),H'1',H'17'
DEST     DC    CL17' '             DEST
         DS    0H                  ---- HWORD ALIGN
TUCOPIES DC    AL2(DOCOPIE9),H'1',H'1'
COPIES   DS    XL1                 COPIES VALUE
         DS    0H                  ---- HWORD ALIGN
TUFDEF   DC    AL2(DOFORMD),H'1',H'6'
FORMDEF  DC    CL6' '              FORMDEF VALUE
         DS    0H                  ---- HWORD ALIGN
TUPDEF   DC    AL2(DOPAGEDE),H'1',H'6'
PAGEDEF  DC    CL6' '              PAGEDEF VALUE
         DS    0H                  ---- HWORD ALIGN
TUCHARS  DC    AL2(DOCHARS),H'1',H'4'
CHARS    DC    CL4' '              CHARS VALUE
         DS    0H                  ---- HWORD ALIGN
TULINCT  DC    AL2(DOLINECT),H'1',H'1'
LINECT   DS    XL1                 LINECT VALUE
         DS    0H                  ---- HWORD ALIGN
TUPRMODE DC    AL2(DOPRMODE),H'1',H'8'
PRMODE   DC    CL8' '              PRMODE VALUE
         DS    0H                  ---- HWORD ALIGN
TUDEFLT  DC    AL2(DODEFAUL),H'1',H'1'
DEFAULT  DC    XL1'80'             DEFAULT VALUE (NO)
*              P A R S E   P A R A M E T E R   L I S T
Â£PCL     IKJPARM  DSECT=IKJPARMD
POUTNAME IKJIDENT 'OUTNAME',FIRST=ALPHA,OTHER=ALPHANUM,                X
               MAXLNTH=8,PROMPT='NAME FOR OUTPUT STMT'
PDELETE  IKJKEYWD
         IKJNAME 'DELETE'
PCLASS   IKJKEYWD
         IKJNAME 'CLASS',SUBFLD=CLASSUB
PDEST    IKJKEYWD
         IKJNAME 'DEST',SUBFLD=DESTSUB
PCOPIES  IKJKEYWD
         IKJNAME 'COPIES',SUBFLD=COPYSUB
PPDEF    IKJKEYWD
         IKJNAME 'PAGEDEF',SUBFLD=PDEFSUB
PFDEF    IKJKEYWD
         IKJNAME 'FORMDEF',SUBFLD=FDEFSUB
PCHARS   IKJKEYWD
         IKJNAME 'CHARS',SUBFLD=CHARSUB
PLINECT  IKJKEYWD
         IKJNAME 'LINECT',SUBFLD=LINECSUB
PPRMODE  IKJKEYWD
         IKJNAME 'PRMODE',SUBFLD=PMODESUB
*              P P L   S U B F I E L D S
FDEFSUB  IKJSUBF
SFDEF    IKJIDENT 'FORMDEF',FIRST=ALPHANUM,OTHER=ALPHANUM,             X
               MAXLNTH=6,PROMPT='FORM DEFINITION NAME'
PDEFSUB  IKJSUBF
SPDEF    IKJIDENT 'PAGEDEF',FIRST=ALPHANUM,OTHER=ALPHANUM,             X
               MAXLNTH=6,PROMPT='PAGE DEFINITION NAME'
CHARSUB  IKJSUBF
SCHARS   IKJIDENT 'CHARS',FIRST=ALPHANUM,OTHER=ALPHANUM,               X
               MAXLNTH=4,PROMPT='CHARS FIELD NAME'
LINECSUB IKJSUBF
SLINECT  IKJIDENT 'LINECT',FIRST=NUMERIC,OTHER=NUMERIC,                X
               MAXLNTH=3,PROMPT='LINECT (0-255)'
PMODESUB IKJSUBF
SPRMODE  IKJIDENT 'PRMODE',FIRST=NONATNUM,OTHER=NONATNUM,              X
               MAXLNTH=8,PROMPT='PRMODE (LINE/PAGE/USER-DEFINED-NAME)'
CLASSUB  IKJSUBF
SCLASS   IKJIDENT 'CLASSNAME',FIRST=NONATNUM,MAXLNTH=1,                X
               PROMPT='SYSOUT CLASS'
DESTSUB  IKJSUBF
SDEST    IKJIDENT 'DESTINATION',MAXLNTH=8,                             X
               FIRST=ALPHA,OTHER=ALPHANUM,                             X
               PROMPT='REMOTE STATION ID FOR THE DEST KEYWORD'
COPYSUB  IKJSUBF
SCOPIES  IKJIDENT 'COPIES',MAXLNTH=3,                                  X
               FIRST=NUMERIC,OTHER=NUMERIC,                            X
               PROMPT='NUMBER OF COPIES OF OUTPUT (1-255)'
         IKJENDP
         IKJCPPL ,                 CPPL DSECT
PPL      IKJPPL ,                  PPL DSECT
         CVT   DSECT=YES           CVT DSECT
         IEFDOKEY ,                MAP OUTPUT DESCRIPTORS
         END   DYNOUT


    â¬ Xephon 1990
