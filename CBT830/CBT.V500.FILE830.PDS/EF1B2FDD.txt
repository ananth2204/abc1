A macro to enable cursor-driven edit

/* REXX */
ADDRESS ISREDIT
"MACRO (DUMMY)"
"(LPTR,COL) = CURSOR"
"(LRECL)    = LRECL"
"(NUMMODE,NUMTYPE) = NUMBER"
PARSE VAR NUMTYPE STD COBOL DISPLAY
xx = SYSVAR("syspref")                           /* If profile prefix*/
IF xx ¬= '' THEN                                 /* is on then save  */
   DO                                            /* it and switch it */
   pref = xx                                     /* off.  It will be */
   ADDRESS TSO "PROF NOPRE"                      /* reset on leaving */
   END                                           /* the dialog       */
/* Subtract 8 from lrecl if standard numbers are being used......    */
SELECT
WHEN  nummode = ON & std = STD  THEN
  DO
  lrecl = lrecl-8
  END
OTHERWISE NOP
END
/* if cursor isn't on a data line, then set message and quit.....    */
SELECT
WHEN  col = 0 THEN
  DO
  zmsg000l = "Put cursor on dataset name"
  CALL QUIT
  END
OTHERWISE NOP
END
/* Truncate the line from cursor pos thru to first space or comma... */
/* ..If we are on the start of a dataset name, this should give us   */
/* the name....                                                      */
"(RECORD) = LINE" lptr
record = SUBSTR(record,col,lrecl)
poscomma = POS(',',record)
posspace = POS(' ',record)
IF poscomma = 0 THEN poscomma = lrecl
IF posspace = 0 THEN posspace = lrecl
pos2 = MIN(poscomma,posspace) - 1
/* What we have left SHOULD be a dataset name.....................   */
dsn   = SUBSTR(record,1,pos2)
/* Now find any single or double quotes...........................   */
blippos   = POS("'",dsn) ;  quotepos  = POS('"',dsn)
/* Remove single or double quotes (if any found)..................   */
SELECT
WHEN ( blippos = 0 & quotepos = 0 ) THEN
     NOP
WHEN ( blippos ¬= 0 && quotepos ¬=0 ) THEN
     dsn = SUBSTR(dsn,1,blippos+quotepos-1)
OTHERWISE
     DO
     len = MIN(blippos,quotepos)
     dsn = SUBSTR(dsn,1,len-1)
     END
END
/* Now find any '(' or ')'.......................................   */
braktest  = POS('(',dsn)
braktst2  = POS(')',dsn)
/* Remove '(' or ')' (if any found)..............................   */
SELECT
WHEN (braktest ¬= 0) THEN
     dsn = SUBSTR(dsn,1,braktest-1)
WHEN (braktst2 ¬= 0) THEN
     dsn = SUBSTR(dsn,1,braktst2-1)
OTHERWISE NOP
END
/* Now split the dataset up into it's separate qualifiers in case   */
/* we need to resolve any symbolics..(eg &HLQ..SPF.CNTL).........   */
dsn = TRANSLATE(dsn,' ','.')
numparts = WORDS(dsn)
resdsn = ''
/* Loop thru each separate qualifier of the dataset name and call   */
/* the SYMBRES subroutine, which will determine if any symbolic     */
/* resolution needs to be done.                                     */
DO x=1 TO numparts
part.x = WORD(dsn,x)
CALL SYMBRES part.x
resdsn = resdsn||"."||result
END
/* We now have the fully resolved dataset name...................   */
dsn = SUBSTR(resdsn,2)
/* Turn msg off, and issue SYSDSN to enquire on the status of our   */
/* dataset.............                                             */
x = MSG(OFF)
x = SYSDSN(dsn)
/* If dataset status is anything other than OK, set a msg and quit */
SELECT
WHEN numparts = 1  THEN
  DO
  zmsg000l = "Invalid Dataset name."
  CALL QUIT
  END
WHEN x ¬= "OK" THEN
  DO
  zmsg000l = dsn "-" SYSDSN(dsn)
  CALL QUIT
  END
OTHERWISE NOP
END
x = MSG(ON)
/* Now get dataset info to display in a pop-up window when we go    */
/* into edit.........                                               */
zz = LISTDSI(dsn DIRECTORY NORECALL)
vol  = sysvolume
blk  = sysblksize
fm   = sysrecfm
recl = syslrecl
SELECT
WHEN sysexdate = 0 THEN exdate = "EXPDT(**NONE**)"
OTHERWISE exdate = "EXPDT("sysexdate")"
END
SELECT
WHEN sysunits  = "BLOCK" THEN
  units = blk
OTHERWISE units = sysunits
END
/* Now set long msg with dataset info to be displayed in a popup window....  */
/* NB different msg if dsn is partitioned..                               .  */
SELECT
WHEN sysdsorg = PO THEN
  DO
  zmsg000l = ,
  "DSN="dsn",VOL=SER="vol" DSORG="sysdsorg" MEMBERS("sysmembers")" exdate" ",
  "DCB=(RECFM="fm",LRECL="recl",BLOCKSIZE="blk")",
  "SPACE=("units",("sysprimary","sysseconds","sysadirblk"))",
  "EXTENTS("sysextents") CREATED("syscreate")",
  "USED=("units"="sysused",DIRBLKS="sysudirblk")"
  END
OTHERWISE
  DO
  zmsg000l = ,
  "DSN="dsn",VOL=SER="vol" DSORG="sysdsorg  exdate" ",
  "DCB=(RECFM="fm",LRECL="recl",BLOCKSIZE="blk")",
  "SPACE=("units",("sysprimary","sysseconds"))",
  "EXTENTS("sysextents") CREATED("syscreate")",
  "USED=("units"="sysused")"
  END
END
/* Now set a msg with dataset information. (msg is long enough to force a    */
/* pop-up window to be displayed)...........                                 */
ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
/* Now go into edit on the dataset..........                                 */
ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "EDIT   DATASET('"dsn"')"
SELECT
WHEN rc <=  4  THEN
  DO
  zmsg000l =  ' '
  CALL QUIT
  END
WHEN rc  =  14 THEN
  DO
  zmsg000s = "Dataset in use."
  CALL QUIT
  END
WHEN rc  =  16 THEN
  DO
  zmsg000s = "No members in dataset."
  CALL QUIT
  END
OTHERWISE NOP
END
/* If the dataset is no good for edit (eg recfm=u), then go into browse      */
/* instead..................                                                 */
ADDRESS ISPEXEC "BROWSE DATASET('"dsn"')"
SELECT
WHEN rc   = 0  THEN
  DO
  zmsg000l = " "
  CALL QUIT
  END
WHEN rc  =  12 THEN
  DO
  zmsg000s = "Empty Dataset."
  CALL QUIT
  END
WHEN rc  =  16 THEN
  DO
  zmsg000s = "No members in dataset."
  CALL QUIT
  END
WHEN rc  >  16 THEN
  DO
  zmsg000l = "Severe error on Edit/Browse."
  CALL QUIT
  END
OTHERWISE NOP
END
/* ------------------------- CALLED SUBROUTINES ---------------------------- */
QUIT:
IF pref ¬= 'PREF' THEN                           /* RESTORE PREFIX   */
  DO
  ADDRESS TSO "PROF PREFIX("pref")"
  END
ADDRESS ISPEXEC "CONTROL ERRORS CANCEL"
ADDRESS ISPEXEC "SETMSG MSG(ISPZ000)"
"CURSOR = " lptr col
EXIT
RETURN
/* ------------------------------------------------------------------------- */
SYMBRES:
ARG qual
/* If the qualifier does not contain a '&', then no symbolic resolution is   */
/* needed. Just return the value we came in with...........                  */
IF POS('&',qual) = 0 THEN RETURN qual
/* strip the leading '&' from the qualifier so we can search for it.......   */
symbolic = STRIP(qual,LEADING,'&')"="
where = FIRST
/* search for the symbolic. If it is not present in the JCL, then set a      */
/* message and exit........                                                  */
DO i=1
"SEEK C'"symbolic"'" where
IF rc ¬= 0 THEN
  DO
  zmsg000l = "Value not found for symbolic "qual"."
  CALL QUIT
  END
/* We are now positioned on the symbolic.                                    */
"(PROCLPTR,PROCCOL) = CURSOR"
"(PROCLINE) = LINE " proclptr
/* Truncate the line from cursor pos thru to first space or comma... */
proccol  = proccol + LENGTH(symbolic)
procline = SUBSTR(procline,proccol,lrecl)
poscomma = POS(',',procline)
posspace = POS(' ',procline)
IF poscomma = 0 THEN poscomma = lrecl
IF posspace = 0 THEN posspace = lrecl
pos2     = MIN(poscomma,posspace) - 1
symres   = SUBSTR(procline,1,pos2)
blippos  = POS("'",symres)
/* Remove any single quotes that may be present............                  */
SELECT
WHEN  blippos ¬= 0  THEN  symres = STRIP(symres,BOTH,"'")
OTHERWISE NOP
END
/* If the symbolic is blank, then we may have found the default value in the */
/* jcl procedure. Keep searching to try and find a value for it............. */
SELECT
WHEN symres   = "" THEN where = NEXT
OTHERWISE LEAVE i
END
END
/* now we have dropped out of the end of the loop with a value for the       */
/* symbolic; Return to the caller with this value.....................       */
RETURN symres


Steven Leek
Systems Programmer
British Gas (UK)

