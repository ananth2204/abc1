An on-line MVS/XA CSA monitor

Even in an MVS/XA system the CSA below the 16 MB line can be constrained and be
a problem, as it was in MVS/370, especially in a large IMS environment when
there is more then one control region active on one system.

In our installation with two 3090-200 processors, we run our production IMS on
one system, and an IMS used for application development on the other.

The production IMS uses about 1.6 MB and the development IMS uses about 1.3 MB
of CSA below the 16 MB line.  Our CSA has a size of 5 MB as specified in the
IEASYS00 member of SYS1.PARMLIB, which results in a private area size of about
8.2 MB.  We cannot extend the CSA because we have requirements for such a large
private area.  In the case of any processor damage we must run both IMSs on one
system, which means that about 3 MB of CSA below the 16 MB line will be used by
the two IMS control regions.  The (small) remainder of about 2 MB must then be
enough for all other applications.

What we could do to decrease this problem is to install the XA releases of key
components such as DFP Version 2, VTAM Version 3, and JES3/SP 2.1.5, which all
use the extended CSA (E-CSA) above the 16 MB line.

The next step would be the installation of IMS Version 2.2 (we are currently at
the 1.3 level), which would finally resolve our problem because it also uses the
E-CSA instead of the CSA.

As one can see, the usage of CSA below the 16 MB line can still be a permanent
problem, and the measurement of the growth in that area must permanently be
monitored.  Unfortunately, there is no IBM standard software available which
allows one to monitor the CSA usage on-line.  With RMF for example you must use
the post processor, which is based on the SMF records written by RMF monitor I,
which requires that at least the SMF datasets have been dumped.

In MVS/370 one had to write a routine to extract this information out of the MVS
control blocks.  In MVS/XA the VSMLIST service has been implemented, which is a
nice function, because it allows one to get this information regardless of the
internal control block format.  Based on this VSMLIST service I wrote a program
that allows the measurement of the CSA usage on-line, either from a TSO
terminal, via a batch job, or using a started task.

The routine calculates the sizes of the allocated CSA and E-CSA storage by
subpool and key, the total storage allocated in both areas and the size of the
free areas within the allocated blocks.  Additionally, it displays the size of
the whole CSA/E-CSA areas and their virtual addresses.

With this routine I am able to measure the current usage and fragmentation of
both common service areas and, based on the storage keys, I can quickly
determine which component currently uses how much storage in which subpools.  In
this way I can determine trends.  For example, I can check the increase of CSA
allocation before CSA shortages occur (which can result in a re-IPL of the whole
system).  Additionally, I use it to check the effective CSA-requirement of a new
program product or application, which in practice often differs from what the
vendor writes in his manuals.

To install the program only a simple assembly and link-edit must be performed
and there is no special authorisation required.  An example of a typical report
is shown in Figure 1.

*----------------------------------------------------------------------*
*  TITLE:      XAMONCSF.                                               *
*  FUNCTION:   THIS MODULE CALCULATES THE ALLOCATED/FREE CSA STORAGE   *
*              BY SUBPOOL AND KEY. IT WILL ALSO DISPLAY THE START      *
*              ADDRESSES AND THE SIZES OF THE CSA/E-CSA. FINALLY IT    *
*              WILL DISPLAY THE TOTAL STORAGE ALLOCATED/FREE FOR THE   *
*              CSA/E-CSA.                                              *
*  SCP-LEVEL:  MVS/XA SP 2.1.3 (JBB2133).                              *
*   DEPENDENCIES:                                                      *
*              MVS/SP 2.1.1 (JBB2110) OR HIGHER.                       *
*  PARAMETERS: NONE.                                                   *
*  INPUT:      NONE.                                                   *
*  OUTPUT:     CSA FRAGMENTATION REPORT.                               *
*              IF THE ROUTINE IS CALLED BY A BATCH JOB, THE OUTPUT     *
*              WILL BE WRITTEN TO A SYSOUT FILE WITH THE DD-STATEMENT  *
*              REPORT, WHICH WILL BE DYNAMICALLY ALLOCATED.            *
*              TO DIRECT THE REPORT TO ANOTHER SYSOUT-CLASS THAN THE   *
*              DEFAULT MESSAGE-CLASS, A DD-STATEMENT WITH THE DDNAME   *
*              "REPORT" AND THE DESIRED SYSOUT-CLASS HAS TO BE CODED.  *
*              IF THE ROUTINE IS CALLED BY A TSO-USER, THE OUTPUT WILL *
*               BE SENT TO THE APPROPRIATE TSO-TERMINAL USING TSO      *
*              TPUT-SERVICES.                                          *
*              IF THE ROUTINE IS CALLED BY A STARTED TASK, THE OUTPUT  *
*              WILL BE SENT TO THE APPROPRIATE CONSOLE(S) USING WTO-   *
*              SERVICES.                                               *
*  LINKAGE:    THIS ROUTINE IS A FUNCTION OF XAMON AND WILL BE CALLED  *
*              (VIA LINK) BY THE XAMON DRIVER MODULE.                  *
*              IT CAN ALSO BE EXECUTED OUTSIDE OF XAMON BY USING A TSO *
*              CALL-COMMAND, BY A BATCH JOB USING AN APPROPRIATE EXEC- *
*              STATEMENT, OR AL STARTED TASK USING A PROCEDURE.        *
*  ATTRIBUTES: AMODE=31, RMODE=24, NORENT, NOREUS, AC(0).              *
*  NOTE:       IF THIS PROGRAM IS CALLED BY A BATCH JOB, THE MESSAGE   *
*              ROUTINE WILL ISSUE A BSM-INSTRUCTION TO SWITCH INTO     *
*               24-BIT-MODE TO BE ABLE TO USE QSAM PUT-SERVICES TO     *
*              WRITE TO THE DYNAMICALLY ALLOCATED SYSOUT FILE.         *
*  EXECUTABLE MACROS:                                                  *
*              WTO, VSMLIST, EXTRACT, SAVE, RETURN, GETMAIN, FREEMAIN, *
*              GTSIZE, TPUT, TGET, DYNALLOC, OPEN, PUT, CLOSE.         *
*  MAPPING MACROS:                                                     *
*              CVT, IHAGDA, IHAPSA, IHAASCB, IRAOUCB, IEESMCA, DCBD,   *
*              IEFZB4D0, IEFZB4D2.                                     *
*  REGISTER USAGE:                                                     *
*              R0:        USED BY MACROS                               *
*              R1:        MESSAGE POINTER                              *
*              R2-R9:     WORK REGISTERS                               *
*              R10-R11:   BASE REGISTERS                               *
*              R13:       SAVE AREA POINTER                            *
*              R14:       BAL, BALR, BSM                               *
*              R15:       USED BY MACROS                               *
*----------------------------------------------------------------------*
XAMONSCF CSECT
XAMONCSF AMODE 31
XAMONCSF RMODE 24
         SAVE  (14,12),,XAMONCSF/S.SASSO/&SYSDATE
         LR    R10,R15                  COPY BASE-ADDRESS
         LA    R11,2048                 GET HALF OF MAX ADDRESSING
         LA    R11,2048(R11,R10)        LOAD THIRD BASE
         USING XAMONCSF,R10,R11         TELL THE ASSEMBLER
         LA    R14,SA                   GET LSA-ADDRESS
         ST    R13,4(R14)               SA-FORWARD-CHAINING.
         ST    R14,8(R13)               SA-BACK-CHAINING.
         LR    R13,R14                  COPY SAVE AREA ADDRESS
*        DETERMINE IF CALLER IS STC, TSO OR BATCH                      *
INIT0000 L     R7,PSAAOLD-PSA           PICK UP ASCB-POINTER
         ICM   R1,15,ASCBJBNI-ASCB(R7)  INSERT JOBNAME POINTER
         BNZ   INIT0030                 WE ARE BATCH
         L     R7,ASCBOUCB-ASCB(,R7)    POINT TO OUCB
         TM    OUCBYFL-OUCB(R7),OUCBLOG TSO USER ?
         BO    INIT0010                 BIY, CONTINUE
         EXTRACT ANS,'S',FIELDS=(TSO,COMM)
         LM    R1,R2,ANS                GET A(COMSECT)
         USING COMSECT,R2               AND TELL THE ASSEMBLER
         L     R2,CIBADDR               GET A(CIB)
         DROP  R2                       NO FURTHER USE OF THIS BASE
         USING CIB,R2                   TELL THE ASSEMBLER
         MVC   CONSID+3(1),CIBCONID     SAVE MCS-CONSOLE-ID
         DROP  R2                       NO FURTHER USE OF THIS BASE
         OI    FLGCALL,STCCALL          SET STC-FLAG
         B     INIT0050                 GO CONTINUE
INIT0010 OI    FLGCALL,TSOCALL          SET TSO-FLAG
         GTSIZE ,                       GET SCREEN SIZE
         LTR   R0,R0                    SCREEN SIZE RETURNED ?
         BNZ   INIT0020                 BIY, CONTINUE
         LA    R1,TERMMSG               POINT TO MESSGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         B     TERM0000                 GO TERMINATE
INIT0020 SH    R0,=H'2'                 REDUCE REG0 BY 2
         ST    R0,SCRSIZE               SAVE SCREEN SIZE
         TPUT  CLRCMDS,CLRCMDE-CLRCMDS,FULLSCR CLEAR TERMINAL SCREEN
         B     INIT0050                 GO CONTINUE
*        BATCH-CALL:  DYNALLOC THE REPORT PRINT FILE AND OPEN IT:      *
INIT0030 OI    FLGCALL,BTCHCALL         SET BATCH-FLAG
         GETMAIN R,LV=200,LOC=ANY       GET THE STORAGE NEEDED
         LR    R7,R1                    COPY THE ADDRESS
         USING S99RBP,R7                AND TELL THE ASSEMBLER
         LA    R4,S99RBPTR+4            POINT 4 BYTES PASS S99RBPTR
         USING S99RB,R4                 ADDRESS RB DSECT
         ST    R4,S99RBPTR              MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND        TURN ON HIGH-ORDER BIT IN RBPTR
         XC    S99RB(RBLEN),S99RB       ZERO OUT ENTIRE RB
         MVI   S99RBLN,RBLEN            STORE RB-LENGTH INTO RB
         MVI   S99VERB,S99VRBAL         SET VERB TO ALLOCATION FUNCTION
         LA    R5,S99RB+RBLEN           POINT PAST RB TO TUP-LIST
         USING S99TUPL,R5               ADDRESS TEXT UNIT POINTERS
         ST    R5,S99TXTPP              STORE THE ADDRESS INTO RB
         LA    R6,DDNAMET1              POINT TO FIRST TEXT UNIT
         ST    R6,S99TUPTR              AND STORE IN TUP-LIST
         LA    R5,S99TUPL+4             POINT TO NEXT TUP-LIST
         LA    R6,SYSOUTTU              POINT TO SECOND TEXT UNIT
         ST    R6,S99TUPTR              AND STORE IN TUP-LIST
         OI    S99TUPTR,S99TUPLN        HIGH ORDER BIT ON (LAST ENTRY)
         LR    R1,R7                    COPY REQUEST BLOCK ADDR IN R1
         DYNALLOC                       INVOKE SVC 99 TO PROCESS REQ
         LTR   R15,R15                  ALLOCATION OK ?
         BZ    INIT0040                 BIY, CONTINUE
         CLC   S99ERROR,=XL2'0410'      DDNAME STILL IN USE ?
         BE    INIT0040                 BIY, THERE'S JUST A REPORT-FILE
         XR    R1,R1                    CLEAR R1
         ICM   R1,B'0011',S99ERROR      GET ERROR CODE
         BAL   R14,CONVHEX              GO CONVERT TO DECIMAL
         MVC   DYNMSG1+24(4),HEXNUM+4   INSERT INTO MESSAGE
         ICM   R1,B'0011',S99INFO       GET INFO CODE
         BAL   R14,CONVHEX              GO CONVERT TO DECIMAL
         MVC   DYNMSG1+37(4),HEXHUM+4   INSERT INTO MESSAGE
         LA    R1,DYNMSG1               POINT TO THE MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,DYNMSG2               POINT TO THE MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         DROP  R4,R5,R7                 NO FURTHER USE OF THESE BASES
         B     TERM0010                 GO TERMINATE
INIT0040 FREEMAIN R,LV=200,A=(R7)       FREE STORAGE
         OPEN  (REPORT,(OUTPUT))        OPEN OUTPUT-FILE
         LA    R2,REPORT                POINT TO DCB
         TM    DCBOFLGS-IHADCB(R2),DCBOFOPN OPEN SUCCESSFUL ?
         BO    INIT0050                 BIY, CONTINUE
         LA    R1,OPENMSG               POINT TO ERROR MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         B     TERM0000                 GO TERMINATE
*        CHECK IF WE ARE RUNNING ON AN MVS/XA SYSTEM:                  *
INIT0050 L     R2,CVTPTR                PICK UP CVT-ADDRESS
         TM    CVTDCB-CVT(R2),CVTMVSE   IS THIS AN MVS/XA SYSTEM ?
         BO    INIT0060                 BIY, CONTINUE
         LA    R1,MSGNONXA              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MESSAGE
         B     TERM0000                 GO TERMINATE
*        GET SMF SYSTEM IDENTIFIER:                                    *
INIT0060 L     R2,CVTPTR                PICK UP CVT-ADDRESS
         L     R2,CVTSMCA-CVT(,R2)      POINT TO SMCA
         MVC   SYSTEMID,SMCASID-SMCABASE(R2) INSERT SYSTEM IDENTIFIER
*        GET CURRENT TIME AND DATE FROM THE SYSTEM:                    *
         TIME  DEC                      GET DATE AND TIME
         ST    R1,ADATE                 SAVE DATE
         ST    R0,ATIME                 CONVERT TIME
         NI    ADATE+3,X'FC'            CORRECT SIGN FOR EDIT
         MVC   DATE,DATEMASK            COPY DATE PATTERN
         ED    DATE,ADATE+1             EDIT THE ACTUAL DATE
         MVC   TIME,TIMEMASK            MOVE MASK
         ED    TIME,ATIME               EDIT TIME
         MVC   TIME+9(3),=CL3' '        CLEAR TH
         CLI   TIME+1,X'40'             LESS THEN 10 HOURS ?
         BNE   INIT0070                 NO, CONTINUE
         MVI   TIME+1,X'F0'             ZERO FIRST DIGIT OF HOUR
INIT0070 LA    R1,HDRMSG01              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSGE
         LA    R1,HDRMSG02              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE

The remainder of the source code for this Assembler routine will appear in next
month's issue.


Silvio Sasso
Systems Engineer
Winterthur Insurances (Switzerland)     € Winterthur Insurances 1987




























