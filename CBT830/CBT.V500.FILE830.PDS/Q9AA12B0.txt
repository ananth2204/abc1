Remote laser printers under JES2

INTRODUCTION

Many shops replace their old 3286/3287 impact printers with
personal laser printers equipped with a coaxial adapter. These new
printers offer powerful facilities, such as paper orientation, different
fonts, and line/character density. But the implementation of these
functions from the host requires the manipulation of long and
unfriendly strings to set up the printer in a particular configuration.
Moreover there is no standard and the function codes differ from
one coaxial adapter to the other.

That's why I wrote the following external writer that automatically
adds the required record at the beginning of each JES2 dataset. It
also adds a record at the end of the dataset to reset the printer to a
default configuration.

THE PROGRAM

SYSOUT is selected by the WRITER keyword in JCL. The
program uses the Subsystem Interface to retrieve the datasets from
JES2 spool. Based on the CLASS, DEST, and FORM, it then
writes it back to the spool with the control lines necessary to set
up the printer.

It must run authorized either by being link-edited with an
authorization code of 1 into an APF library or by using an
authorization SVC (SVC 241 in the source - you have to
uncomment 4 lines near label EPILOG to apply this method).

You can customize the program at label C3CREAD if you want
to use other features of the printer, such as font selection based on
a dummy ASA control character (for example, B for Bold, I for
Italic, etc). The program simply gets and puts every record, with
no other processing.

The control characters to set up the printers are stored in an
external table that you can reload without stopping/restarting the
writer. In fact, the program runs as a permanent STC, and accepts
the following four 'modify' commands:

1      F LASERWRT,NEW - load a new table of definitions.

2      F LASERWRT,STOP - stop the STC.

3      F LASERWRT,DONTSWAP - make the STC non-
       swappable (for debugging purpose mainly).

4      F LASERWRT,OKSWAP - make the STC swappable.

I added a timer after label CHAPTER4 to eliminate the S522
abend if the STC remains a long while with no work. Note that in
case of error, the program takes a snap of the data area with
eyecatchers to the main control blocks used.

LASERWRT SOURCE CODE

LASERWRT  CSECT                             .
PROLOG    DS    0H                          .
          STM   R14,R12,12(R13)             STANDARD ..
          LR    R12,R15                     .
          USING LASERWRT,R12                .. OS ..
          ST    R13,SAVEAREA+4              ...
          LA    R15,SAVEAREA                .... LINKAGE ..
          ST    R15,8(R13)                  .....
          LA    R13,SAVEAREA                ...... CONVENTION
*         LA    R0,1                        TURN ON ..
*         SVC   241                         .. AUTHORIZATION
          B     CHAPTER1                    BRANCH TO START
EPILOG    DS    0H                          .
*         LA    R0,0                        TURN OFF ..
*         SVC   241                         .. AUTHORIZATION
          L     R13,4(R13)                  STANDARD ..
          L     R14,12(R13)                 . OS ..
          LM    R0,R12,20(R13)              .. LINKAGE
          BR    R14                         BACK TO CALLER
*** CHAPTER 1 : INITIALIZATION ****************************************
CHAPTER1  DS    0H                          .
*** VALIDATE AND SAVE PARAMETER ***************************************
          LA    R15,16                      SET RETURN CODE
          L     R1,0(R1)                    GET ADDRESS OF PARM
          LTR   R1,R1                       PARM SPECIFIED ?
          BZ    EPILOG                      NO -> ERROR
          LH    R2,0(R1)                    GET LENGTH OF PARM
          CH    R2,=H'8'                    LENGTH OK ?
          BNE   EPILOG                      NO -> ERROR
          MVC   WRITER,2(R1)                SAVE PARM
*** OPEN SYSPRINT FOR RESULTS *****************************************
          LA    R15,8                       SET RETURN CODE
          OPEN  (SYSPRINT,(OUTPUT))         OPEN SYSPRINT
          TM    SYSPRINT+(DCBOFLGS-IHADCB),DCBOFOPN OPEN OK ?
          BNO   EPILOG                      NO -> ERROR
          OPEN  (SYSSNAP,(OUTPUT))          OPEN SYSSNAP
          TM    SYSSNAP+(DCBOFLGS-IHADCB),DCBOFOPN OPEN OK ?
          BNO   EPILOG                      NO -> ERROR
*** ESTABLISH COMMUNICATION WITH CONSOLE ******************************
          EXTRACT COMMLPTR,FIELDS=COMM      OBTAIN ADDRESS OF COMM AREA
          L     R2,COMMLPTR                 LOAD ADDRESS OF COMM AREA
          USING COMLIST,R2                  .
          LM    R9,R10,COMLIST              GET ECB/CIB ADDRESSES
          ST    R9,ECBCOMND                 SAVE ECB ADDRESS
          LTR   R10,R10                     CIB AVAILABLE ?
          BZ    C1BYPASS                    NO -> GO ON
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R10) FREE START CIB
          LTR   R15,R15                     QEDIT OK ?
          BNZ   ABENDSSR                    NO -> ABEND
C1BYPASS  DS    0H                          .
          QEDIT ORIGIN=COMCIBPT,CIBCTR=1    SET LIMIT TO 1
          DROP  R2                          .
*** LOAD PRINTER TABLE ************************************************
          BAL   R14,LOADTABL                INITIAL LOAD OF PARM TABLE
*** BUILD SUB SYSTEM IDENTIFICATION BLOCK *****************************
          MVC   MYSSIB+(SSIBID-SSIB)(L'SSIBID),=CL4'SSIB'
          MVC   MYSSIB+(SSIBLEN-SSIB)(L'SSIBLEN),=AL2(SSIBSIZE)
          MVI   MYSSIB+(SSIBSSID-SSIB),SSIBJES2
          MVC   MYSSIB+(SSIBSSNM-SSIB)(L'SSIBSSNM),=CL4'JES2'
          WTO   'LASERWRT : READY AND WAITING FOR WORK' ISSUE MESSAGE
*** CHAPTER 2 : INVOKE SUBSYSTEM INTERFACE TO GET DSNAME FOR WRITER  **
CHAPTER2  DS    0H                          .
          USING SSOB,R4                     .
          LA    R4,SSOBSO                   POINT TO SSOB
          MVC   SSOBID,=CL4'SSOB'           BUILD ..
          MVC   SSOBLEN,=AL2(SSOBHSIZ)      .
          MVC   SSOBFUNC,=AL2(SSOBSOUT)     .. SUB ..
          MVC   SSOBSSIB,=A(MYSSIB)         ...
          MVC   SSOBINDV,=A(SSOBSO+SSOBHSIZ) ... SYSTEM ..
          MVC   SSSOLEN,=AL2(SSSOSIZE)      ...
          MVI   SSSOFLG1,SSSOSPGM           .. OPTION ..
          MVI   SSSOFLG2,SSSOEXTD+SSSOPSEE  .
          MVC   SSSOPGMN,WRITER             BLOCK
          MVI   SSSODSN,X'00'               .
          MODESET MODE=SUP                  SUPERVISOR MODE
          LA    R1,SSRPRMSO                 POINT TO SSOB
          IEFSSREQ                          CALL SUBSYSTEM INTERFACE
          MODESET MODE=PROB                 PROBLEM MODE
          LTR   R15,R15                     CALL OK ?
          BNZ   ABENDSSR                    NO -> ABEND TO DUMP
          MVC   WHERE,=CL8'IEFSSSO1'        PREPARE MESSAGE
          L     R15,SSOBRETN                GET RETURN CODE
          CLC   SSOBRETN,=A(SSSOEODS)       NO MORE DATA ?
          BE    CHAPTER4                    OK -> GO AND WAIT
          CLC   SSOBRETN,=A(SSSORTOK)       GOT ONE DATA SET ?
          BNE   ERROR                       NO -> ERROR
          MVC   ALDSNAME,SSSODSN            GET DATA ..
          MVC   ALCLAS,SSSOCLAS             .. FOR ..
          MVC   ALDEST,SSSODEST             .. DYNAMIC ALLOCATION
          MVC   KEY+00(01),SSSOCLAS         GET DATA ..
          MVC   KEY+01(08),SSSODEST         .. FOR ..
          MVC   KEY+09(04),SSSOFORM         .. TABLE SEARCH
          MVC   MSGDSN(44),SSSODSN          GET ..
          MVC   MSGCLAS(01),SSSOCLAS        .. DATA ..
          MVC   MSGDEST(08),SSSODEST        .. FOR ..
          MVC   MSGFORM(04),SSSOFORM        .. MESSAGE
          PUT   SYSPRINT,MESSAGE            PRINT MESSAGE
*** CHAPTER 3 : PROCESS DATASET ***************************************
CHAPTER3  DS    0H                          .
*** ALLOCATE AND OPEN INPUT DATASET ***********************************
          LA    R1,S9ARBPTR                 POINT TO PARM LIST
          DYNALLOC                          ALLOCATE INPUT
          MVC   WHERE,=CL8'DYNALOCI'        PREPARE MESSAGE
          LTR   R15,R15                     OK ?
          BNZ   ERROR                       NO -> ERROR
          OPEN  (INPUT,(INPUT))             OPEN INPUT DATASET
          MVC   WHERE,=CL8'OPEN INP'        PREPARE MESSAGE
          TM    INPUT+(DCBOFLGS-IHADCB),X'10' OPEN OK ?
          BNO   ERROR                       NO -> ERROR
*** PREPARE DCB AND FCB FOR OUTPUT DATASET ****************************
          MVC   OUTPUT+(DCBRECFM-IHADCB),INPUT+(DCBRECFM-IHADCB)
          MVC   OUTPUT+(DCBBLKSI-IHADCB),INPUT+(DCBBLKSI-IHADCB)
          MVC   OUTPUT+(DCBLRECL-IHADCB),INPUT+(DCBLRECL-IHADCB)
          L     R1,TABLADDR                 POINT TO PRINTER TABLE
          L     R2,0(R1)                    GET COUNTER
          LA    R1,4(R1)                    BYPASS COUNTER
          MVI   ALFCBOF,X'80'               LAST PARM IS DEST
          MVC   ALFCB,=CL4'****'            INITIALIZE FCB
C3ALOOP   DS    0H                          .
          CLC   KEY,0(R1)                   KEY FOUND ?
          BE    C3AFOUND                    YES -> PROCESS
          LA    R1,PRNTLEN(R1)              NEXT ENTRY
          BCT   R2,C3ALOOP                  DECREMENT COUNTER
          B     C3AEND                      BYPASS PROCESS
C3AFOUND  DS    0H                          .
          MVI   ALFCBOF,X'00'               LAST PARM IS FCB
          MVC   ALFCB,(PRNTFCB-PRNTBEG)(R1) SET FCB
C3AEND    DS    0H                          .
*** ALLOCATE AND OPEN OUTPUT DATASET **********************************
          LA    R1,S9BRBPTR                 POINT TO PARM LIST
          DYNALLOC                          ALLOCATE OUTPUT
          MVC   WHERE,=CL8'DYNALOCO'        PREPARE MESSAGE
          LTR   R15,R15                     OK ?
          BNZ   ERROR                       NO -> ERROR
          OPEN  (OUTPUT,(OUTPUT))           OPEN OUTPUT DATASET
          MVC   WHERE,=CL8'OPEN OUT'        PREPARE MESSAGE
          TM    OUTPUT+(DCBOFLGS-IHADCB),X'10' OPEN OK ?
          BNO   ERROR                       NO -> ERROR
*** SCAN TABLE FOR SPECIFIED CONFIGURATION ****************************
          L     R1,TABLADDR                 POINT TO PRINTER TABLE
          L     R2,0(R1)                    GET COUNTER
          LA    R1,4(R1)                    BYPASS COUNTER
          XC    BUFADDR,BUFADDR             CLEAR AREA
C3BLOOP   DS    0H                          .
          CLC   KEY,0(R1)                   KEY FOUND ?
          BE    C3BFOUND                    YES -> PROCESS
          LA    R1,PRNTLEN(R1)              NEXT ENTRY
          BCT   R2,C3BLOOP                  DECREMENT COUNTER
          MVC   BUFADDR,=F'-1'              INDICATE NO MODIFICATION
          B     C3BEND                      BYPASS PROCESS
C3BFOUND  DS    0H                          .
          L     R2,(PRNTADDR-PRNTBEG)(R1)   GET ADDRESS OF STRING
          TM    OUTPUT+(DCBRECFM-IHADCB),DCBRECU RECFM = U
          BO    C3BFIX                      YES -> GO AHEAD
          TM    OUTPUT+(DCBRECFM-IHADCB),DCBRECF RECFM = F
          BO    C3BFIX                      YES -> GO AHEAD
          B     C3BPUT                      AND PUT LINE
C3BFIX    DS    0H                          .
          LH    R1,OUTPUT+(DCBLRECL-IHADCB) GET LRECL
          GETMAIN R,LV=(1)                  OBTAIN STORAGE
          ST    R1,BUFADDR                  SAVE ADDRESS
          MVI   0(R1),C' '                  INITIAL CHARACTER
          LH    R3,OUTPUT+(DCBLRECL-IHADCB) GET LRECL
          BCTR  R3,0                        ADJUST FOR MOVE
          BCTR  R3,0                        ADJUST FOR EXECUTE
          EX    R3,C3BCLEAR                 INITIALIZE AREA
          LH    R3,0(R2)                    GET LENGTH TO MOVE
          BCTR  R3,0                        ADJUST FOR EXECUTE
          EX    R3,C3BMOVE                  MOVE STRING
          L     R2,BUFADDR                  POINT TO BUFFER
C3BPUT    DS    0H                          .
          PUT   OUTPUT,(R2)                 PRINT STRING
          B     C3BEND                      .
C3BCLEAR  MVC   1(0,R1),0(R1)               TO INITIALIZE AREA
C3BMOVE   MVC   0(0,R1),4(R2)               TO MOVE DATA
C3BEND    DS    0H                          .
*** PROCESS DATASET ***************************************************
C3CREAD   DS    0H                          .
          GET   INPUT                       COPY ..
          LR    R2,R1                       .. INPUT
          PUT   OUTPUT,(R2)                 .. ON
          B     C3CREAD                     .. OUTPUT
*** END OF FILE PROCESSING ********************************************
C3DEOF    DS    0H                          .
          CLC   BUFADDR,=F'-1'              CONFIGURATION CHANGED ?
          BE    C3EEND                      NO -> BYPASS NEXT CODE
*** SET DEFAULT CONFIGURATION *****************************************
          MVC   KEY+09(04),=CL4'STD'        SEARCH DEFAULT SET UP
          L     R1,TABLADDR                 POINT TO PRINTER TABLE
          L     R2,0(R1)                    GET COUNTER
          LA    R1,4(R1)                    BYPASS COUNTER
C3ELOOP   DS    0H                          .
          CLC   KEY,0(R1)                   KEY FOUND ?
          BE    C3EFOUND                    YES -> PROCESS
          LA    R1,PRNTLEN(R1)              NEXT ENTRY
          BCT   R2,C3ELOOP                  DECREMENT COUNTER
          B     C3EGO_ON                    BYPASS PROCESS
C3EFOUND  DS    0H                          .
          L     R2,(PRNTADDR-PRNTBEG)(R1)   GET ADDRESS OF STRING
          L     R1,BUFADDR                  GET ADDRESS OF BUFFER
          LTR   R1,R1                       BUFFER AVAILABLE
          BZ    C3EPUT                      NO -> CONTINUE
          MVI   0(R1),C' '                  INITIAL CHARACTER
          LH    R3,OUTPUT+(DCBLRECL-IHADCB) GET LRECL
          BCTR  R3,0                        ADJUST FOR MOVE
          BCTR  R3,0                        ADJUST FOR EXECUTE
          EX    R3,C3ECLEAR                 INITIALIZE AREA
          LH    R3,0(R2)                    GET LENGTH TO MOVE
          BCTR  R3,0                        ADJUST FOR EXECUTE
          EX    R3,C3EMOVE                  MOVE STRING
          L     R2,BUFADDR                  POINT TO BUFFER
C3EPUT    DS    0H                          .
          PUT   OUTPUT,(R2)                 PRINT STRING
          B     C3EGO_ON                    .
C3ECLEAR  MVC   1(0,R1),0(R1)               TO INITIALIZE AREA
C3EMOVE   MVC   0(0,R1),4(R2)               TO MOVE DATA
C3EGO_ON  DS    0H                          .
          L     R1,BUFADDR                  GET ADDRESS OF BUFFER
          LTR   R1,R1                       BUFFER AVAILABLE
          BZ    C3EEND                      NO -> CONTINUE
          LH    R2,OUTPUT+(DCBLRECL-IHADCB) GET LENGTH TO FREE
          FREEMAIN R,A=(1),LV=(2)           FREE STORAGE
C3EEND    DS    0H                          .
*** CLOSE AND FREE OUTPUT *********************************************
          CLOSE OUTPUT                      CLOSE OUTPUT DATASET
          MVC   WHERE,=CL8'CLOS OUT'        PREPARE MESSAGE
          LTR   R15,R15                     CLOSE OK ?
          BNZ   ERROR                       NO -> ERROR
          LA    R1,S9GRBPTR                 POINT TO PARAMETER LIST
          DYNALLOC                          FREE OUTPUT
          MVC   WHERE,=CL8'DYNFREEO'        PREPARE MESSAGE
          LTR   R15,R15                     OK ?
          BNZ   ERROR                       NO -> ERROR
*** CLOSE AND FREE INPUT **********************************************
          CLOSE INPUT                       CLOSE INPUT DATASET
          MVC   WHERE,=CL8'CLOS INP'        PREPARE MESSAGE
          LTR   R15,R15                     CLOSE OK ?
          BNZ   ERROR                       NO -> ERROR
          LA    R1,S9FRBPTR                 POINT TO PARAMETER LIST
          DYNALLOC                          FREE INPUT
          MVC   WHERE,=CL8'DYNFREEI'        PREPARE MESSAGE
          LTR   R15,R15                     OK ?
          BNZ   ERROR                       NO -> ERROR
          B     CHAPTER2                    GO AND REQUEST NEXT DATASET
*** CHAPTER4 : WAIT FOR DATA TO PROCESS, CONSOLE COMMAND OR TIMER *****
CHAPTER4  DS    0H                          .
          LA    R4,SSOBSO                   POINT TO SSOB
          L     R1,SSSOWTRC                 GET SUBSYSTEM ECB ADDRESS
          ST    R1,ECBJES2                  STORE IN ECB LIST
          XC    ECBTIMR,ECBTIMR             CLEAR TIMER ECB
          STIMER REAL,TIMREXIT,DINTVL=TIMINTVL START TIMER
          WTO   'LASERWRT : WAITING FOR WORK' ISSUE MESSAGE
          MODESET MODE=SUP,KEY=ZERO         SUPERVISOR MODE KEY ZERO
          WAIT  1,ECBLIST=ECBLIST,LONG=YES  WAIT ON EVENT
          LA    R4,SSOBSO                   POINT TO SSOB
          L     R1,SSSOWTRC                 GET ADDRESS OF ECB
          L     R1,0(R1)                    GET ECB
          ST    R1,ECBJES2                  SAVE ECB
          MODESET MODE=PROB,KEY=NZERO       PROBLEM MODE KEY NON ZERO
          TM    ECBJES2,X'40'               JES2 ECB POSTED ?
          BO    CHAPTER2                    YES -> PROCESS DATASET
          TM    ECBTIMR,X'40'               TIMER ECB POSTED ?
          BO    CHAPTER4                    YES -> WAIT AGAIN
          L     R2,COMMLPTR                 LOAD ADDRESS OF COMM AREA
          USING COMLIST,R2                  .
          L     R9,COMCIBPT                 GET CIB ADDRESS
          LTR   R9,R9                       CIB AVAILABLE
          BZ    CHAPTER4                    NO -> THAT'S ALL
          USING CIBNEXT,R9                  .
          CLI   CIBVERB,CIBSTOP             CIB FOR STOP COMMAND ?
          BE    CHAPTER5                    YES -> CLEAN UP
          CLI   CIBVERB,CIBMODFY            CIB FOR MODIFY COMMAND ?
          BNE   C4FRECIB                    NO -> FREE CIB
          CLC   =C'STOP',CIBDATA            TEST COMMAND FOR 'STOP'
          BE    CHAPTER5                    PROCESS IT
          CLC   =C'DONTSWAP',CIBDATA        TEST COMMAND FOR 'DONTSWAP'
          BE    C4DONTSW                    PROCESS IT
          CLC   =C'OKSWAP',CIBDATA          TEST COMMAND FOR 'OKSWAP'
          BE    C4OKSWAP                    PROCESS IT
          CLC   =C'NEW',CIBDATA             TEST COMMAND FOR 'NEW'
          BE    C4NEWTAB                    PROCESS IT'
          WTO   'LASERWRT : COMMANDE INVALIDE' ISSUE MESSAGE
          B     C4FRECIB                    FREE CIB
C4DONTSW  DS    0H                          .
          SYSEVENT DONTSWAP                 MAKE STC NON-SWAPPABLE
          WTO   'LASERWRT : DONTSWAP OK'    ISSUE MESSAGE
          B     C4FRECIB                    FREE CIB
C4OKSWAP  DS    0H                          .
          SYSEVENT OKSWAP                   MAKE STC SWAPPABLE
          WTO   'LASERWRT : OKSWAP OK'      ISSUE MESSAGE
          B     C4FRECIB                    FREE CIB
C4NEWTAB  DS    0H                          .
          BAL   R14,LOADTABL                RE-LOAD OF PARM TABLE
          WTO   'LASERWRT : NEW TABLE REQUESTED' ISSUE MESSAGE
          B     C4FRECIB                    FREE CIB
C4FRECIB  DS    0H                          .
          L     R2,COMMLPTR                 LOAD ADDRESS OF COMM AREA
          L     R9,COMCIBPT                 GET CIB ADDRESS
          QEDIT ORIGIN=COMCIBPT,BLOCK=(R9)  FREE START CIB
          LTR   R15,R15                     FREE OK ?
          BNZ   ABENDSSR                    NO -> ABEND
          DROP  R9                          .
          DROP  R2                          .
          B     CHAPTER4                    GO AND WAIT AGAIN
*** CHAPTER5 : TERMINATION PHASE **************************************
CHAPTER5  DS    0H                          .
          WTO   'LASERWRT : SHUTTING DOWN'  ISSUE MESSAGE
          LA    R4,SSOBSO                   POINT TO SSOB
          OI    SSSOFLG2,SSSOCTRL           SET 'TERMINATE PROCESS'
          MODESET MODE=SUP                  SUPERVISOR MODE
          LA    R1,SSRPRMSO                 POINT TO PARM LIST
          IEFSSREQ                          CALL SUBSYSTEM INTERFACE
          MODESET MODE=PROB                 PROBLEM MODE
          LTR   R15,R15                     CALL OK ?
          BNZ   ABENDSSR                    NO -> ABEND AND DUMP
          MVC   WHERE,=CL8'IEFSSSO2'        PREPARE MESSAGE
          L     R15,SSOBRETN                GET RETURN CODE
          CLC   SSOBRETN,=A(SSSOEODS)       NO MORE DATASET ?
          BE    CLOSPRNT                    OK -> TERMINATE
          CLC   SSOBRETN,=A(SSSORTOK)       SUCCESS COMPLETION
          BE    CLOSPRNT                    OK -> TERMINATE
          B     ERROR                       ELSE ERROR
* *  M I S C   T E R M I N A T I O N                                * *
ABENDSSR  DS    0H                          .
          DC    H'0'                        ABEND 'S0C1' TO OBTAIN DUMP
ERROR     DS    0H                          .
          LR    R4,R15                      SAVE RETURN CODE
          PUT   SYSPRINT,MSGERROR           PRINT MESSAGE
          SNAP  DCB=SYSSNAP,PDATA=(PSW,REGS),STORAGE=(SNAPSTAR,SNAPEND)
          LR    R15,R4                      RESTORE RETURN CODE
*         B     CLOSPRNT                    AND TERMINATE
CLOSPRNT  DS    0H                          .
          LR    R4,R15                      SAVE RETURN CODE
          CLOSE SYSSNAP                     CLOSE SYSSNAP
          CLOSE SYSPRINT                    CLOSE SYSPRINT
          LR    R15,R4                      RESTORE RETURN CODE
          B     EPILOG                      AND BACK TO OS
* *  L O A D   P A R A M E T E R S   T A B L E                      * *
LOADTABL  DS    0H                          .
          ST    R14,R14SAVE                 SAVE RETURN ADDRESS
          CLC   TABLADDR,=F'0'              TABLE ALREADY LOADED
          BE    LOADCONT                    YES ->
          DELETE EP=LASERTAB                . FIRST DELETE IT
LOADCONT  DS    0H                          .
          MVC   WHERE,=CL8'LOADTABL'        PREPARE MESSAGE
          LOAD  EP=LASERTAB                 LOAD TABLE
          LTR   R15,R15                     LOAD OK ?
          BNZ   ERROR                       .
          ST    R0,TABLADDR                 SAVE TABLE ADDRESS
          L     R14,R14SAVE                 RESTORE RETURN ADDRESS
          BR    R14                         AND BACK TO CALLER
* *  T I M E R   E X P I R A T I O N   E X I T                      * *
TIMREXIT  DS    0H                          .
          USING TIMREXIT,R15                TEMPORARY ADDRESSABILITY
          L     R12,=A(LASERWRT)            GET BASE ADDRESS
          USING LASERWRT,R12                ADDRESSABILITY
          DROP  R15                         .
          POST  ECBTIMR                     POST ECB
          BR    R14                         BACK TO CALLER
* *  D A T A   A R E A                                              * *
SNAPSTAR  EQU   *                            .
BUFADDR   DS    F                           ADDRESS OF GETMAINED AREA
COMMLPTR  DS    F                           ADDRESS OF COMMUNICAT. AREA
ECBLIST   DS    0F                          WAIT ECBLIST
ECBCOMND  DS    F                           COMMUNICATION ECB ADDRESS
ECBJES2   DS    F                           SUBSYSTEM ECB ADDRESS
ECBTIMER  DC    AL1(128),AL3(ECBTIMR)       TIMER ECB ADDRESS
ECBTIMR   DS    F                           TIMER ECB
KEY       DS    CL13                        KEY FOR TABLE SEARCH
R14SAVE   DS    F                           SAVED RETURN ADDRESS
SAVEAREA  DS    18F                         OS SAVE AREA
TABLADDR  DC    F'0'                        ADDRESS OF PARM TABLE
TIMINTVL  DC    C'00150000'                 TIMER INTERVAL (HHMMSSTT)
WRITER    DS    CL8                         WRITER TO PROCESS
MSGERROR  DS    0CL133                      ERROR MESSAGE
          DC    C' ERROR CODE FROM '        .
WHERE     DS    CL8                         .
          DC    C' : TERMINATING.'          .
          ORG   MSGERROR+L'MSGERROR         .
*                     0....+....1....+....2....+....3....+....4....+...
MESSAGE   DC    CL133'PROCESSING 12345678901234567890123456789012345678X
               901234,CLASS=1,DEST=12345678,FORM=1234'
*              .5....+....6....+....7....+....8....+.
MSGDSN    EQU   MESSAGE+11                  .
MSGCLAS   EQU   MESSAGE+62                  .
MSGDEST   EQU   MESSAGE+69                  .
MSGFORM   EQU   MESSAGE+83                  .
SSRPRMSO  DC    AL1(X'80'),AL3(SSOBSO)      .
          DC    CL8'**SSOB**'               .
SSOBSO    DS    CL(SSOBHSIZ+SSSOSIZE)       .
          DC    CL8'**SSIB**'               .
MYSSIB    DS    CL(SSIBSIZE)                .
          DS    0F                          ALLOCATE INPUT
          DC    CL8'DYNALOCI'               .
S9ARBPTR  DC    AL1(128),AL3(S9ARB)         .
S9ARB     DC    AL1(S99RBEND-S99RB)         .
          DC    AL1(S99VRBAL)               .
          DC    XL2'0000',XL2'0000',XL2'0000'
          DC    A(S9ATUPL)                  .
          DC    F'0',F'0'                   .
S9ATUPL   DC    A(S9ADDN)                   .
          DC    A(S9ADSN)                   .
          DC    AL1(128),AL3(S9ASSA)        .
S9ADDN    DC    AL2(DALDDNAM),XL2'0001',AL2(L'ALDDNAM)
ALDDNAM   DC    CL8'INPUT'                  .
S9ADSN    DC    AL2(DALDSNAM),XL2'0001',AL2(L'ALDSNAME)
ALDSNAME  DS    CL44                        .
S9ASSA    DC    AL2(DALSSREQ),XL2'0001',AL2(L'ALSSNAME)
ALSSNAME  DC    CL4'JES2'                   .
          DS    0F                          ALLOCATE OUTPUT
          DC    CL8'DYNALOCO'               .
S9BRBPTR  DC    AL1(128),AL3(S9BRB)         .
S9BRB     DC    AL1(S99RBEND-S99RB)         .
          DC    AL1(S99VRBAL)               .
          DC    XL2'0000',XL2'0000',XL2'0000'
          DC    A(S9BTUPL)                  .
          DC    F'0',F'0'                   .
S9BTUPL   DC    A(S9BDDN)                   .
          DC    A(S9BCLAS)                  .
ALFCBOF   DS    0XL1                        .
          DC    A(S9BDEST)                  .
          DC    AL1(128),AL3(S9BFCB)        .
S9BDDN    DC    AL2(DALDDNAM),XL2'0001',AL2(L'ALDDNAME)
ALDDNAME  DC    CL8'OUTPUT'                 .
S9BCLAS   DC    AL2(DALSYSOU),XL2'0001',AL2(L'ALCLAS)
ALCLAS    DS    CL1                         .
S9BDEST   DC    AL2(DALSUSER),XL2'0001',AL2(L'ALDEST)
ALDEST    DS    CL8                         .
S9BFCB    DC    AL2(DALFCBIM),XL2'0001',AL2(L'ALFCB)
ALFCB     DS    CL4                         .
          DS    0F                          FREE INPUT
          DC    CL8'DYNFREEI'               .
S9FRBPTR  DC    AL1(128),AL3(S9FRB)         .
S9FRB     DC    AL1(S99RBEND-S99RB)         .
          DC    AL1(S99VRBUN)               .
          DC    XL2'0000',XL2'0000',XL2'0000'
          DC    A(S9FTUPL)                  .
          DC    F'0',F'0'                   .
S9FTUPL   DC    A(S9FRDD)                   .
          DC    AL1(128),AL3(S9FRDISP)      .
S9FRDD    DC    AL2(DUNDDNAM),XL2'0001',AL2(L'FRDDNAMI)
FRDDNAMI  DC    CL8'INPUT'                  .
S9FRDISP  DC    AL2(DUNOVDSP),XL2'0001',AL2(L'FROVDISP)
FROVDISP  DC    XL1'04'                     .
          DS    0F                          FREE OUTPUT
          DC    CL8'DYNFREEO'               .
S9GRBPTR  DC    AL1(128),AL3(S9GRB)         .
S9GRB     DC    AL1(S99RBEND-S99RB)         .
          DC    AL1(S99VRBUN)               .
          DC    XL2'0000',XL2'0000',XL2'0000'
          DC    A(S9GTUPL)                  .
          DC    F'0',F'0'                   .
S9GTUPL   DC    AL1(128),AL3(S9GRDD)        .
S9GRDD    DC    AL2(DUNDDNAM),XL2'0001',AL2(L'FRDDNAMO)
FRDDNAMO  DC    CL8'OUTPUT'                 .
          DC    CL8'DCB*INP*'               .
INPUT     DCB  DDNAME=INPUT,MACRF=GL,DSORG=PS,EODAD=C3DEOF,DEVD=DA
          DC    CL8'DCB*OUT*'               .
OUTPUT    DCB  DDNAME=OUTPUT,MACRF=PM,DSORG=PS,DEVD=DA
          DC    CL8'DCB*PRNT'               .
SYSPRINT  DCB  DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,DEVD=DA,              X
               RECFM=FB,LRECL=133,BLKSIZE=133
          DC    CL8'DCB*SNAP'               .
SYSSNAP   DCB  DDNAME=SYSSNAP,MACRF=(W),DSORG=PS,DEVD=DA,              X
               RECFM=VBA,LRECL=125,BLKSIZE=882
SNAPEND   EQU  *                            .
          LTORG                             .
* *  P R I N T E R   C O N T R O L   T A B L E                  * *
PRINTER   DSECT                             .
PRNTBEG   EQU   *                           BEGINNING OF DESCRIPTION
PRNTCLAS  DS    CL1                         CLASS
PRNTDEST  DS    CL8                         DESTINATION
PRNTFORM  DS    CL4                         FORM
PRNTFCB   DS    CL4                         FCB
PRNTADDR  DS    A                           ADDRESS OF STRING
PRNTLEN   EQU  *-PRNTBEG                    LENGTH OF ONE ENTRY
* *  S Y S T E M   D S E C T S                                      * *
          DSECT                             .
          IEZCOM                            COMMUNICATION AREA
          DSECT                             .
          IEZCIB                            COMMUNICATION INTERFACE BLO
          CVT DSECT=YES                     COMMUNICATION VECTOR TABLE
          IEFJESCT                          JES COMMUNICATION TABLE
*                                           SUBSYSTEM OPTION BLOCK
          IEFJSSOB
SSOBGN    EQU   *                           .
          IEFSSSO  SOEXT=YES                PROCESS OUTPUT OPTION
          IEFJSSIB                          SUBSYSTEM IDENTIFICATION BL
          IEFZB4D0                          DYNALLOC PARM LIST
          IEFZB4D2                          DYNALLOC KEY TABLE
          DCBD DSORG=PS,DEVD=DA             DCB MAPPING
          YREGS                             REGISTER EQUATES
          END

PRINTER TABLE DEFINITION

The table is composed of two parts:

1      Every combination of CLASS, DEST, and FORM the
      program has to interpret, with the output FCB, and the address
      of the set-up string,

2      The set-up strings, preceded by their lengths and a filler.

The name of the different form codes is built as:

o      Orientation (L for landscape, P for portrait)

o      Line pitch (1 character)

o      Character pitch (2 characters).

For example, L612 would print in landscape at 6 lines per inch
and 12 characters per inch.

SAMPLE CONFIGURATION TABLE
//STEP01   EXEC ASMHCL
//ASM.SYSIN DD *
PRINTER   DSECT                             .
PRNTBEG   EQU   *                           BEGINNING OF DESCRIPTION
PRNTCLAS  DS    CL1                         CLASS
PRNTDEST  DS    CL8                         DESTINATION
PRNTFORM  DS    CL4                         FORM
PRNTFCB   DS    CL4                         FCB
PRNTADDR  DS    A                           ADDRESS OF STRING
PRNTLEN   EQU  *-PRNTBEG                    LENGTH OF ONE ENTRY
PRINTERS  CSECT                             .
*** COMPUTE NUMBER OF ENTRIES **************************************
PRCOUNT   DC   A((PRDEFEN-PRDEFST)/PRNTLEN) NUMBER OF ENTRIES
*** DEFINITION OF PRINTERS *****************************************
PRDEFST   EQU  *                            START OF TABLE
          DC   CL1'8',CL8'R1',CL4'STD ',CL4'6   ',A(MRXPSTD0)
          DC   CL1'8',CL8'R1',CL4'L610',CL4'L045',A(MRXPL610)
          DC   CL1'8',CL8'R1',CL4'L612',CL4'L045',A(MRXPL612)
          DC   CL1'8',CL8'R1',CL4'L616',CL4'L045',A(MRXPL616)
          DC   CL1'8',CL8'R1',CL4'L810',CL4'L061',A(MRXPL810)
          DC   CL1'8',CL8'R1',CL4'L812',CL4'L061',A(MRXPL812)
          DC   CL1'8',CL8'R1',CL4'L816',CL4'L061',A(MRXPL816)
          DC   CL1'8',CL8'R1',CL4'P610',CL4'L066',A(MRXPP610)
          DC   CL1'8',CL8'R1',CL4'P612',CL4'L066',A(MRXPP612)
          DC   CL1'8',CL8'R1',CL4'P616',CL4'L066',A(MRXPP616)
          DC   CL1'8',CL8'R1',CL4'P810',CL4'L088',A(MRXPP810)
          DC   CL1'8',CL8'R1',CL4'P812',CL4'L088',A(MRXPP812)
          DC   CL1'8',CL8'R1',CL4'P816',CL4'L088',A(MRXPP816)
          DC   CL1'8',CL8'R2',CL4'STD ',CL4'6   ',A(HPLPSTD0)
          DC   CL1'8',CL8'R2',CL4'L610',CL4'L045',A(HPLPL610)
          DC   CL1'8',CL8'R2',CL4'L612',CL4'L045',A(HPLPL612)
          DC   CL1'8',CL8'R2',CL4'L616',CL4'L045',A(HPLPL616)
          DC   CL1'8',CL8'R2',CL4'P610',CL4'L066',A(HPLPP610)
          DC   CL1'8',CL8'R2',CL4'P612',CL4'L066',A(HPLPP612)
          DC   CL1'8',CL8'R2',CL4'P616',CL4'L066',A(HPLPP616)
PRDEFEN   EQU  *                            END OF TABLE
*** CONFIGURATION FOR MEMOREX PRINTERS *****************************
MRXPSTD0  DC   AL2(L'MRXDSTD0),AL2(00)      .
MRXDSTD0  DC   C' %Y2,8% %Y3,12% %Y5,60% %Y6,132% %Y10,1  '
MRXPL610  DC   AL2(L'MRXDL610),AL2(00)      .
MRXDL610  DC   C' %Y2,6% %Y3,10% %Y5,45% %Y6,112% %Y10,1% '
MRXPL612  DC   AL2(L'MRXDL612),AL2(00)      .
MRXDL612  DC   C' %Y2,6% %Y3,12% %Y5,45% %Y6,134% %Y10,1% '
MRXPL616  DC   AL2(L'MRXDL616),AL2(00)      .
MRXDL616  DC   C' %Y2,6% %Y3,16% %Y5,45% %Y6,186% %Y10,1% '
MRXPL810  DC   AL2(L'MRXDL810),AL2(00)      .
MRXDL810  DC   C' %Y2,8% %Y3,10% %Y5,61% %Y6,112% %Y10,1% '
MRXPL812  DC   AL2(L'MRXDL812),AL2(00)      .
MRXDL812  DC   C' %Y2,8% %Y3,12% %Y5,61% %Y6,134% %Y10,1% '
MRXPL816  DC   AL2(L'MRXDL816),AL2(00)      .
MRXDL816  DC   C' %Y2,8% %Y3,16% %Y5,61% %Y6,186% %Y10,1% '
MRXPP610  DC   AL2(L'MRXDP610),AL2(00)      .
MRXDP610  DC   C' %Y2,6% %Y3,10% %Y5,66% %Y6,77 % %Y10,0  '
MRXPP612  DC   AL2(L'MRXDP612),AL2(00)      .
MRXDP612  DC   C' %Y2,6% %Y3,12% %Y5,66% %Y6,92 % %Y10,0% '
MRXPP616  DC   AL2(L'MRXDP616),AL2(00)      .
MRXDP616  DC   C' %Y2,6% %Y3,16% %Y5,66% %Y6,128% %Y10,0% '
MRXPP810  DC   AL2(L'MRXDP810),AL2(00)      .
MRXDP810  DC   C' %Y2,8% %Y3,10% %Y5,88% %Y6,77 % %Y10,0% '
MRXPP812  DC   AL2(L'MRXDP812),AL2(00)      .
MRXDP812  DC   C' %Y2,8% %Y3,12% %Y5,88% %Y6,92 % %Y10,0% '
MRXPP816  DC   AL2(L'MRXDP816),AL2(00)      .
MRXDP816  DC   C' %Y2,8% %Y3,16% %Y5,88% %Y6,128% %Y10,0% '
*** CONFIGURATION FOR HEWLETT PACKARD LASERJET PRINTERS ************
HPLPSTD0  DC   AL2(L'HPLDSTD0),AL2(00)      .
HPLDSTD0  DC   C' DATA FOR HP LJ FORM = STD '
HPLPL610  DC   AL2(L'HPLDL610),AL2(00)      .
HPLDL610  DC   C' DATA FOR HP LJ FORM = L610 '
HPLPL612  DC   AL2(L'HPLDL612),AL2(00)      .
HPLDL612  DC   C' DATA FOR HP LJ FORM = L612 '
HPLPL616  DC   AL2(L'HPLDL616),AL2(00)      .
HPLDL616  DC   C' DATA FOR HP LJ FORM = L616 '
HPLPP610  DC   AL2(L'HPLDP610),AL2(00)      .
HPLDP610  DC   C' DATA FOR HP LJ FORM = P610 '
HPLPP612  DC   AL2(L'HPLDP612),AL2(00)      .
HPLDP612  DC   C' DATA FOR HP LJ FORM = P612 '
HPLPP616  DC   AL2(L'HPLDP616),AL2(00)      .
HPLDP616  DC   C' DATA FOR HP LJ FORM = P616 '
          END
/*
//LKED.SYSLMOD DD DISP=SHR,DSN=your.authorized.loadlib(LASERTAB)
//

FCB DEFINITIONS

I created simple FCBs with only 'skip to channel 1' (top of page),
'skip to channel 10' (bottom of the page), and the required page
length.

SAMPLE FCB GENERATION

//L045       EXEC  ASMHCL,PARM.C='NODECK,LOAD',
//             PARM.L='LIST,OL,REFR,RENT,XREF'
//C.SYSIN DD *
FCB2L045 CSECT
          DC    X'80'
          DC    AL1(45)
          DC    X'11'
          DC    43X'00'
          DC    X'10'
          END
/*
//L.SYSLMOD DD DISP=SHR,DSN=SYS1.IMAGELIB(FCB2L045)
//*
//L061       EXEC  ASMHCL,PARM.C='NODECK,LOAD',
//             PARM.L='LIST,OL,REFR,RENT,XREF'
//C.SYSIN DD *
FCB2L061 CSECT
          DC    X'80'
          DC    AL1(61)
          DC    X'11'
          DC    59X'00'
          DC    X'10'
          END
/*
//L.SYSLMOD DD DISP=SHR,DSN=SYS1.IMAGELIB(FCB2L061)
//*
//L066       EXEC  ASMHCL,PARM.C='NODECK,LOAD',
//             PARM.L='LIST,OL,REFR,RENT,XREF'
//C.SYSIN DD *
FCB2L066 CSECT
          DC    X'80'
          DC    AL1(66)
          DC    X'11'
          DC    64X'00'
          DC    X'10'
          END
/*
//L.SYSLMOD DD DISP=SHR,DSN=SYS1.IMAGELIB(FCB2L066)
//*
//L088       EXEC  ASMHCL,PARM.C='NODECK,LOAD',
//             PARM.L='LIST,OL,REFR,RENT,XREF'
//C.SYSIN DD *
FCB2L088 CSECT
          DC    X'80'
          DC    AL1(88)
          DC    X'11'
          DC    86X'00'
          DC    X'10'
          END
/*
//L.SYSLMOD DD DISP=SHR,DSN=SYS1.IMAGELIB(FCB2L088)
//

THE STARTED TASK

Because you can specify the name of the JES writer you want to
intercept, you can run more than one started task, with different
writer names. This can be useful if one printer has a lot of work: it
can print in parallel with other printers.

SAMPLE JCL FOR THE STARTED TASK

//LASERWRT PROC WRITER=LASERWRT
//*
//          EXEC PGM=LASERWRT,PARM='&WRITER.'
//STEPLIB    DD  DISP=SHR,DSN=USYS04.MVS.LOADLIB
//SYSPRINT   DD  SYSOUT=*
//SYSSNAP    DD  SYSOUT=*

HOW TO USE THIS EXTERNAL WRITER

Finally, here is some sample JCL to print all or part of a job using
the specified formats.

Sample JCL to print JES2 and all user SYSOUT

//jobname   JOB  your.jobcard
//*
//OUTPUT   OUTPUT  DEFAULT=YES,JESDS=ALL,WRITER=LASERWRT
//*
//stepname EXEC ...
//...
//........  DD  SYSOUT=sysout.class
//...

Sample JCL to print all user SYSOUT

//jobname   JOB  your.jobcard
//*
//OUTPUT   OUTPUT  DEFAULT=YES,WRITER=LASERWRT
//*
//stepname EXEC ...
//...
//........  DD  SYSOUT=sysout.class
//...

Sample JCL to print only JES2 SYSOUT

//jobname   JOB  your.jobcard
//*
//OUTPUT   OUTPUT  JESDS=ALL,WRITER=LASERWRT
//*
//stepname EXEC ...
//...
//........  DD  SYSOUT=sysout.class
//...

Sample JCL to print selected user SYSOUT

//jobname   JOB  your.jobcard
//*
//OUTPUT   OUTPUT  WRITER=LASERWRT
//*
//stepname EXEC ...
//...
//........  DD  SYSOUT=sysout.class,OUTPUT=*.OUTPUT
//...


HervÄ Paris
Systems Engineer
Group Trigone Informatique (France)                                     c Xephon

