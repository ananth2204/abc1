Purging jobs with invalid JES2 destinations

INTRODUCTION

In our JES2 environment, we make no attempt to ensure the
validity of destinations specified on the DEST parameter of the
JCL DD statement, the DEST parameter of the /*OUTPUT JES2
control card, or the destination name on the /*ROUTE PRINT
JES2 control card. Our nightly clean-up cycle deletes anything on
the JES2 output queue that is older than a set number of days and
this causes the invalid destination jobs to be purged regularly.

On occasion we find it necessary to attack these jobs on a specific
basis. When that need arises, we run a program, DESTPRG, that
purges all output jobs queued to invalid destinations that are older
than the number of days specified by the parameter passed to the
program. For example:

      //        EXEC PGM=DESTPRG,PARM='5'

would purge jobs queued to invalid destinations that are greater
than five days old.

DESTPRG should be link-edited into an authorized library with
AC(1). This program has been tested in a JES2 4.2.0 production
environment.

DESTPRG Program SOURCE CODE

         MACRO
&LBL     @AMODE &MODE
.*   THE CONTENTS OF REG R14 ARE NOT PRESERVED BY THIS MACRO
.*   MODE:  IS THE ADDRESSING MODE YOU WANT TO SET
         AIF   ('&MODE' EQ '24').AMODE24
         AIF   ('&MODE' EQ '31').AMODE31
         MNOTE 5,'INVALID MODE SPECIFIED'
         AGO   .DONE                   ALL DONE
.AMODE24 LA    14,*+6                  SET ADDRESS VALUE
         BSM   0,14                    SET ADDRESS MODE
         AGO   .DONE                   ALL DONE
.AMODE31 CNOP  0,4                     ALIGN TO FULL WORD
         L     14,*+8                  SET ADDRESS VALUE
         B     *+8                     BRANCH AROUND CONSTANT
         DC    A(X'80000000'+*+6)      BRANCH ADDRESS AND ADDRESS MODE
         BSM   0,14                    SET ADDRESS MODE
.DONE    ANOP
         MEND
DESTPRG  CSECT
         STM   R14,R12,12(R13)         SAVE ENVIRONMENT
         LR    R10,R15                 SET MODULE ...
         USING DESTPRG,R10                ADDRESSABILITY
         ST    R13,SAVEAREA+4          SAVE CURRENT SAVE AREA ADDRESS
         LA    R13,SAVEAREA            LOAD NEW SAVE AREA ADDRESS
         L     R2,0(,R1)               GET PARM ADDRESS
         XR    R3,R3                   CLEAR R3
         LH    R3,0(,R2)               GET LENGTH
         LTR   R3,R3                   ZERO?
         BZ    RET12                   YES - END
         CH    R3,=H'1'                GREATER THAN 1?
         BH    RET12                   YES - END
         LA    R2,2(,R2)               POINT PAST LENGTH
         PACK  PACKAREA(8),0(1,R2)     PACK NUMBER OF DAYS
         CVB   R15,PACKAREA            CONVERT TO BINARY
         XR    R14,R14                 CLEAR R14 FOR MULTIPLY
         M     R14,ONEDAY              CALCULATE TIME LIMIT
         ST    R15,TIMELIM             SAVE IT
         L     R3,16                   LOAD ADDRESS OF CVT
         L     R4,CVTJESCT-CVTMAP(,R3) LOAD ADDRESS OF JESCT
         LTR   R4,R4                   A VALID JESCT ADDRESS?
         BZ    RET04                   NO - THEN FINISH UP
         CLC   0(4,R4),=CL4'JEST'      IT'S THE JESCT?
         BNE   RET08                   NO - WE HAVE AN ERROR
         L     R3,CVTASVT-CVTMAP(,R3)  POINT TO ASVT
         CLC   ASVTASVT-ASVT(4,R3),=CL4'ASVT' ASVT?
         BNE   RET08                   NO - WE HAVE AN ERROR
         LA    R5,ASVTENTY-ASVT(,R3)   POINT TO ENTRY MAP
         L     R6,ASVTMAXU-ASVT(,R3)   LOAD MAXIMUM ADDRESS SPACES
DEST010  TM    0(R5),X'80'             ASID USED?
         BO    DEST020                 NO - CHECK NEXT ONE
         L     R7,0(R5)                LOAD ADDRESS OF ASCB
         L     R8,ASCBJBNS-ASCB(,R7)   LOAD ADDRESS OF JOBNAME
         CLC   0(8,R8),=C'JES2    '    PRIMARY JES2?
         BE    DEST030                 YES - WE'RE ON OUR WAY
DEST020  LA    R5,4(,R5)               POINT TO NEXT ASID ENTRY
         BCT   R6,DEST010              CHECK OUT IF LOOP COUNT PERMITS
         B     RET04                   IF NOT - THEN FINISH UP
DEST030  LH    R5,ASCBASID-ASCB(,R7)   LOAD ASID OF JES2
         L     R3,JESSSCT-JESCT(,R4)   POINT TO SSCT
DEST040  CLC   SSCTID-SSCT(4,R3),=CL4'SSCT'  SSCT?
         BNE   RET08                   NO - THEN WE HAVE AN ERROR
         CLC   SSCTSNAM-SSCT(4,R3),=C'JES2    ' JES2 SSCVT?
         BE    DEST050                 YES - WE CAN GO ON
         L     R3,SSCTSCTA-SSCT(,R3)   LOAD POINTER TO NEXT
         LTR   R3,R3                   END OF CHAIN?
         BZ    RET08                   YES - SOME KIND OF ERROR EXISTS
         B     DEST040                 NO  - CHECK OUT THE NEXT ONE
DEST050  L     R3,SSCTSUS2-SSCT(,R3)   POINT TO USER2 FIELD
         USING HCCT,R3
         ST    R5,JESASID              SAVE JES ASID
         L     R7,CCTHCT               LOAD POINTER TO HCT
         ST    R7,HCTADDR              SAVE HCT ADDRESS
         MODESET MODE=SUP,KEY=ZERO
         EPAR  R1                      EXTRACT PRIMARY ASID
         ST    R1,PRIMASID             SAVE IT
         L     R1,=F'1'                LOAD AUTHORIZATION INDEX
         AXSET AX=(R1)                 AUTHORIZATION INDEX FOR ASIDS
         L     R1,JESASID              GET ASID OF JES2 ADDRESS SPACE
         SSAR  R1                      SET SECONDARY ASID TO JES2
         L     R4,=F'4'                SET LENGTH OF $JOTABLE FIELD
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         LA    R6,JOTBASE              GET TARGET ADDRESS
         MVCP  0(R4,R6),$JOTABLE-HCT(R7),R5  MOVE IN JOT BASE ADDRESS
         L     R4,=F'4'                SET LENGTH OF $JOBQPTR FIELD
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         LA    R6,JQEBASE              GET TARGET ADDRESS
         L     R7,HCTADDR              GET HCT ADDRESS
         MVCP  0(R4,R6),$JOBQPTR-HCT(R7),R5  MOVE IN JQE BASE ADDRESS
         L     R4,=F'2'                SET LENGTH OF $JQELEN FIELD
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         LA    R6,JQELEN               GET TARGET ADDRESS
         L     R7,HCTADDR              GET HCT ADDRESS
         MVCP  0(R4,R6),$JQELEN-HCT(R7),R5  MOVE IN LENGTH OF A JQE
         @AMODE 31                     31-BIT ADDRESSING
         L     R4,=F'4'                SET LENGTH OF JOTCHRQ FIELD
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         LA    R6,JOEBASE              GET TARGET ADDRESS
         L     R7,JOTBASE              GET JOT ADDRESS
         MVCP  0(R4,R6),JOTCHRQ-JOTID(R7),R5  MOVE IN JOE ADDRESS
         @AMODE 24                     24-BIT ADDRESSING
         L     R1,PRIMASID             ASID OF US
         SSAR  R1                      SET SECONDARY ASID TO US
         MODESET MODE=PROB,KEY=NZERO
         XR    R2,R2                   CLEAR R2
         LH    R2,JQELEN               GET THE JQE LENGTH
         GETMAIN RU,LV=(R2)            GET STORAGE FOR JQE
         ST    R1,JQEADDR              SAVE THE ADDRESS
         USING JOE,R6                  SET JOE ADDRESSABILITY
         LA    R6,JOEAREAC             GET TARGET ADDRESS
         L     R7,JOEBASE              GET CHARACTERISTIC JOE OFFSET
GETCJOE  N     R7,ZEROFFF              CLEAR HIGH-ORDER BYTE
         BZ    ALLDONE                 IF NOTHING - WE'RE DONE
         A     R7,JOTBASE              SET JOE ADDRESS
         BAL   R14,GETJOE              MOVE IN JOE
         CLC   JOEAREAC+36(8),=8C' '   IS IT A VALID DEST ID?
         BE    NEXTCJOE                YES - GO READ NEXT CHAR. JOE
         LA    R6,JOEAREAC             GET CHARACTERISTIC JOE ADDRESS
         L     R7,JOEWKPTR             GET OFFSET TO WORK JOE
GETWJOE  N     R7,ZEROFFF              CLEAR HIGH ORDER BYTE
         BZ    NEXTCJOE                IF NOTHING - GET NEXT CHAR. JOE
         LA    R6,JOEAREAW             GET WORK JOE ADDRESS
         A     R7,JOTBASE              SET JOE ADDRESS
         BAL   R14,GETJOE              MOVE IN JOE
         LA    R6,JOEAREAW             SET ADDRESS TO ACTIVE JOE
         STCK  TIMEAREA                GET CURRENT TIME
         L     R15,TIMEAREA            SAVE SIGNIFICANT PART OF TIME
         S     R15,JOEAREAW+80         SUBTRACT JOE CREATION TIME
         C     R15,TIMELIM             OVER THE TIME LIMIT?
         BL    NEXTWJOE                NO - GET NEXT WORK JOE
         STM   R4,R7,R4R7SAVE          SAVE R4-R7
         L     R7,JOEJQE               GET JQE OFFSET
         N     R7,ZEROFFF              CLEAR HIGH-ORDER BYTE
         BZ    DONEJQE                 IF NOTHING - WE'RE DONE
         L     R6,JQEADDR              GET TARGET ADDRESS
         A     R7,JQEBASE              SET JQE ADDRESS
         BAL   R14,GETJQE              GO READ THE JQE
         L     R8,JQEADDR              GET JQE ADDRESS
         USING JQE,R8                  SET ADDRESSABLILITY
         XR    R15,R15                 CLEAR A REGISTER
         LH    R15,JQEJOBNO            GET THE JOBNUMBER
         CVD   R15,DBL2                CONVERT TO DECIMAL
         UNPK  DBL1(8),DBL2+5(3)       UNPACK THE JOB NUMBER
         OI    DBL1+7,X'F0'            MAKE PRINTABLE
         MVC   CMDDATA+3(5),DBL1+3     MOVE INTO PURGE COMMAND
         TM    JQEFLAG3,JQE3JOB        A BATCH JOB?
         BZ    SENDCMD                 YES - GO ISSUE COMMAND
         MVI   CMDDATA+2,C'S'          SET STC DEFAULT
         TM    JQEFLAG3,JQE3STC        A STARTED TASK?
         BO    SENDCMD                 YES - GO ISSUE COMMAND
         MVI   CMDDATA+2,C'T'          MUST BE A TSO SESSION
SENDCMD  EQU   *
         MODESET MODE=SUP,KEY=ZERO
         XR    R0,R0                   CLEAR R0
         LA    R1,CMD                  GET COMMAND AREA ADDRESS
         SVC   34                      ISSUE COMMAND
         MODESET MODE=PROB,KEY=NZERO
*        TPUT  CMDDATA,8               IF YOU WANT TO SEE WHAT HAPPENED
DONEJQE  LM    R4,R7,R4R7SAVE          LOAD R4-R7
         B     NEXTWJOE
NEXTWJOE EQU   *
         L     R7,JOECHNXT             GET OFFSET TO NEXT WORK JOE
         B     GETWJOE                 GO GET NEXT WORK JOE
NEXTCJOE EQU   *
         LA    R6,JOEAREAC             GET CHARACTERISTIC JOE ADDRESS
         L     R7,JOENEXT              GET OFFSET TO CHAR. JOE
         B     GETCJOE                 GO GET NEXT CHARACTERISTIC JOE
ALLDONE  EQU   *
         L     R1,JQEADDR              GET STORAGE ADDRESS
         XR    R2,R2                   CLEAR R2
         LH    R2,JQELEN               GET STORAGE LENGTH
         FREEMAIN RU,LV=(R2),A=(R1)    FREE THE STORAGE
         XR    R15,R15                 SET RETURN CODE
         B     END                     RETURN
RET16    L     R15,=F'16'              SET RETURN CODE
         B     END                     RETURN
RET12    L     R15,=F'12'              SET RETURN CODE
         B     END                     RETURN
RET08    L     R15,=F'8'               SET RETURN CODE
         B     END                     RETURN
RET04    L     R15,=F'4'               SET RETURN CODE
END      L     R13,SAVEAREA+4          RELOAD SAVE AREA ADDRESS
         L     R14,12(,R13)            RELOAD RETURN ADDRESS
         LM    R0,R12,20(R13)          RESTORE ENVIRONMENT
         BR    R14                     GO HOME
GETJOE   EQU   *
*   ON ENTRY:
*     R6 - CONTAINS TARGET ADDRESS IN PRIMARY ASID
*     R7 - CONTAINS SOURCE ADDRESS IN SECONDARY ASID
         ST    R14,R14SAVE             SAVE RETURN ADDRESS
         MODESET MODE=SUP,KEY=ZERO
         L     R1,JESASID              GET ASID OF JES2 ADDRESS SPACE
         SSAR  R1                      SET SECONDARY ASID TO JES2
         @AMODE 31
         LA    R4,JOESIZE              SET LENGTH OF JOE
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         MVCP  0(R4,R6),0(R7),R5       MOVE IN JOE
         @AMODE 24
         L     R1,PRIMASID             ASID OF US
         SSAR  R1                      SET SECONDARY ASID TO US
         MODESET MODE=PROB,KEY=NZERO
         L     R14,R14SAVE             LOAD RETURN ADDRESS
         BR    R14                     RETURN
GETJQE   EQU   *
*   ON ENTRY:
*     R6 - CONTAINS TARGET ADDRESS IN PRIMARY ASID
*     R7 - CONTAINS SOURCE ADDRESS IN SECONDARY ASID
         ST    R14,R14SAVE             SAVE RETURN ADDRESS
         MODESET MODE=SUP,KEY=ZERO
         L     R1,JESASID              GET ASID OF JES2 ADDRESS SPACE
         SSAR  R1                      SET SECONDARY ASID TO JES2
         @AMODE 31
         XR    R4,R4                   CLEAR R4
         LH    R4,JQELEN               SET LENGTH OF JQE
         XR    R5,R5                   ZERO STORAGE ACCESS KEY
         MVCP  0(R4,R6),0(R7),R5       MOVE IN JOE
         @AMODE 24
         L     R1,PRIMASID             ASID OF US
         SSAR  R1                      SET SECONDARY ASID TO US
         MODESET MODE=PROB,KEY=NZERO
         L     R14,R14SAVE             LOAD RETURN ADDRESS
         BR    R14                     RETURN
ZEROFFF  DC    X'00FFFFFF'
ONEDAY   DC    X'000141DD'
TIMEAREA DS    D
TIMELIM  DS    F
R14SAVE  DS    F
R4R7SAVE DS    4F
JOEAREAC DS    0F,CL(JOESIZE)
JOEAREAW DS    0F,CL(JOESIZE)
JQEADDR  DS    F
CMD      DS    0F
         DC    X'000C0000'
CMDDATA  DC    C'$PJ     '
PARMLEN  DS    F
HCTADDR  DS    F
JOTBASE  DS    F
JOEBASE  DS    F
JQELEN   DS    H
DBL1     DS    D
DBL2     DS    D
PACKAREA DS    D
SAVEAREA DS    18F
JESASID  DS    F
PRIMASID DS    F
JQEBASE  DS    F
         COPY $HASPGBL
         $HASPEQU
         $XECB
         $MIT
         $SCAT
         $HFAME
         $PCE
         $JQE
         $JOT
         $JOE
&MACSPLV SETC  '4'
         $HCT
PDS2BLEN EQU   X'3A'
*   NEW MACROS FOR JES2 4.2.0
         $HCCT
         $LMT
*   END OF NEW MACROS FOR JES2 4.2.0
         CVT   DSECT=YES
         IHAASVT
         IHAASCB
         IEFJSCVT
         IEFJESCT
         END




