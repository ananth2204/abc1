Natural words in REXX


PROBLEM ADDRESSED

REXX, the procedure language offered with MVS TSO/E 2,
includes many powerful string handling functions.  However,
the REXX concept of a word does not correspond to the natural
usage of words in normal text - a REXX word is a string of
characters delimited by one or more blanks; a natural word is,
usually, a string of alphanumeric characters delimited by a non-
alphanumeric character.


THE SOLUTION

The FINDWORD function searches for the specified phrase
(natural word) in a string (a string of characters).  The
FINDWORD function has two optional parameters:

o      The starting position (startpos) in the string (defaults to 1,
      ie the first position).

o      The string of characters (delimiterstring) which constitute
      the delimiters (defaults to all non-alphanumeric
      characters).

To optimize performance, a static string work area is defined.
A dynamically allocated work area (using GETMAIN) is used
only when the specified string is longer than the static string
work area (program variable STRBUF, 1024 bytes in the
program code example).

Only those characters which are specified in delimiterstring can
be used as delimiters.

The function does not set the REXX return code variable 'rc'.
Any error code is returned as a negative function value - a non-
negative function value indicates correct processing.

The following error values can be returned:
o      1 - startpos outside string
o      2 - phrase missing or length error (ie more than 254 bytes)
o      4 - delimiterstring length error (ie more than 256 bytes)
o      5 - string missing.

One of the following function values is returned for successful
processing:

o      Zero - phrase not found.

o      Greater than zero - phrase found (the position is returned
      as function value).


EXAMPLES

      alpha = "beta,gamma,delta";
      x = FINDWORD("gamma",alpha);

sets x to 6.

      alpha = "beta,gamma,delta";
      x = FINDWORD("gamma",alpha,1," .")

sets x to 0: the only valid delimiters are blank and period (.).


PROGRAM CODE

         TITLE 'REXX FINDWORD Function'
**
* Calling sequence:
* >>--FINDWORD(phrase,string-+---------------------------------+)--<<
*                            +-,startpos-+-+------------------+
*                            +-,1--------+ +-,delimiterstring-+
*                              --
* The default "delimiterstring" is the set of all non-alphanumeric
* characters, ie all characters except a-z A-Z 0-9
**
* Function value
*  normal return:
*    0 - "phrase" not found
*   >0 - "phrase" found (the position is returned)
*  error return:
*   -1 - "startpos" outside "string"
*   -2 - "phrase" missing or length error (>254)
*   -4 - "delimiterstring" length error (>256)
*   -5 - "string" missing
**
FINDWORD CSECT
* initialize addressing
         STM   R14,R12,12(R13)    save registers
         BALR  R12,0              base register
         USING *,R12
         LA    R15,SA             A(save-area)
         ST    R13,4(R15)         backward ptr
         ST    R15,8(R13)         forward ptr
         LR    R13,R15            A(new save-area)
         B     SA_END             jump over save-area
SA       DS    18A                save-area
SA_END   DS    0H
         USING EFPL,R1
         L     R2,EFPLEVAL        PTR(Evaluation Block)
         L     R11,0(R2)          A(Evaluation Block)
         USING EVALBLOCK,R11
         L     R10,EFPLARG        A(parsed argument list)
         USING ARGTABLE_ENTRY,R10
         MVC   ERRCODE,=CL2'-2'   preset return code (=error)
         LA    R10,ARGTABLE_ARGSTRING_PTR
* get "phrase"
         LM    R3,R4,0(R10)
* R3: A(argument), R4: L(argument)
         LTR   R4,R4
         BM    ERROR              "phrase" missing
         BZ    ERROR              null "phrase"
         CH    R4,=H'254'
         BH    ERROR              "phrase" too long
* R3: A(phrase), R4: L(phrase)
         MVC   PHRASE+1(0),0(R3)
         EX    R4,*-6
         LA    R4,1(R4)           LC(phrase) - incl. prefix, suffix
* get "string"
         MVC   ERRCODE,=CL2'-5'   preset return code (=error)
         LM    R5,R6,8(R10)
         LTR   R6,R6
         BM    ERROR              "string" missing
         BZ    ERROR              null "string"
* allocate work-area (allowing space for prefix and suffix)
         L     R1,=A(STRBUF)
         LA    R0,2(R6)
         C     R0,=A(L'STRBUF)
         BNH   SMALLSTR           small string, use static buffer
         ST    R0,LBUF            save allocated length
         GETMAIN R,LV=(R0)
         ST    R1,ABUF            save allocated address
SMALLSTR LR    R7,R1              A(allocated work-area)
         LR    R8,R6              length
* move to work-area
         LA    R14,1(R7)          A(target)
         LR    R15,R8             L(string)
         LR    R0,R5              A(source)
         LR    R1,R15             L(string)
         MVCL  R14,R0             move "string"
         MVC   ERRCODE,=CL2'-1'   "startpos" error
         LA    R15,1              default starting position
         LM    R1,R2,16(R10)
         LTR   R2,R2
         BM    NOPPARM
         LA    R10,8(R10)         update optional parm ptr
         BCTR  R2,0               LC(parameter)
         EX    R2,EXPACK
         CVB   R15,D
NOPPARM  SH    R15,=H'1'          relative starting position
         ST    R15,STARTPOS
         MVC   ERRCODE,=CL2'-4'   "delimiterstring" too long
         LM    R1,R2,16(R10)
         LTR   R2,R2
         BM    NODPARM
         BZ    NODPARM
         CH    R2,=H'256'
         BH    ERROR              :string too long
         ST    R2,DELIMITL        set L(DELIMITC)
         BCTR  R2,0               LC(parameter)
         EX    R2,EXDCMOVE
NODPARM  DS    0H
* initialize TRTAB
         L     R0,DELIMITL        no. of entries
         LA    R1,DELIMITC
         SR    R15,R15            work register
         IC    R14,DELIMITC       load default delimiter character
INITLOOP IC    R15,0(R1)          load next DELIMITC entry
* use DELIMITC entry as index to TRTAB
         STC   R14,TRTAB(R15)     set default delimiter character
         LA    R1,1(R1)           address of next DELIMITC entry
         BCT   R0,INITLOOP
* set DELIMITC(1) as prefix and suffix in "phrase" and "string"
         STC   R14,PHRASE
         STC   R14,PHRASE(R4)
* R7: A(target); R8: L(target)
         STC   R14,1(R7,R8)       set delimiter at end of target
         L     R15,STARTPOS
         LA    R9,0(R15,R7)       actual string address
         STC   R14,0(R9)          set delimiter at start of target
         MVC   ERRCODE,=CL2'-1'   "startpos" error
         SR    R8,R15             residual length
         BNP   ERROR
* translate non-alphameric characters
         LR    R1,R9              A(target, start address)
         LR    R0,R8              L(target)
NEXTBLK  LA    R15,256            set default length
         CR    R15,R0             compare with residual length
         BL    *+6
         LR    R15,R0
         SR    R0,R15             reset residual length
         BCTR  R15,0              length
         EX    R15,EXTRANS
         LA    R1,256(R1)         update address ptr
         LTR   R0,R0              test residual length
         BNZ   NEXTBLK
         MVC   ERRCODE,=CL2' 0'
         LA    R8,2(R8)           bump length to include pre-, suffix
CLCLOOP  CR    R4,R8              test residual length
         BH    ERROR              :end, not found
         EX    R4,EXCLC
         BE    STRFOUND
         LA    R9,1(R9)
         BCT   R8,CLCLOOP
         B     ERROR              :not found
STRFOUND SR    R9,R7              displacement of found phrase
         LA    R9,1(R9)           position of found string
         CVD   R9,D
         MVC   EDWK,=X'4020202020202120'
         LA    R1,EDWK+7
         EDMK  EDWK,D+4
         LA    R15,EDWK+8         end address
         SR    R15,R1             length
         ST    R15,EVALBLOCK_EVLEN   entry size
         BCTR  R15,0
         MVC   EVALBLOCK_EVDATA(0),0(R1)
         EX    R15,*-6
EOJ      LM    R1,R2,ABUF         address, length of (allocated) buffer
         LTR   R1,R1
         BZ    NODYNBUF
         FREEMAIN R,LV=(R2),A=(R1)
NODYNBUF DS    0H                 job end
         L     R13,4(R13)         restore A(old save-area)
         SR    R15,R15            set return code
         RETURN (14,12),RC=(15)
ERROR    LA    R15,2              length
         ST    R15,EVALBLOCK_EVLEN   entry size
         MVC   EVALBLOCK_EVDATA(2),ERRCODE
         B     EOJ
ERRCODE  DS    H
ABUF     DC    2A(0)
LBUF     EQU   ABUF+4
STARTPOS DS    F                  start position in "string"
EXTRANS  TR    0(0,R1),TRTAB
EXPACK   PACK  D,0(0,R1)
EXCLC    CLC   0(0,R9),PHRASE
EXDCMOVE MVC   DELIMITC(0),0(R1)
EDWK     DS    CL8
D        DS    0D,PL8
TRTAB    DC    256AL1(*-TRTAB)    characters X'00'-X'FF'
PHRASE   DS    CL256              "phrase"
* default delimiters
DELIMITL DC    F'256'             L(DELIMITC)
DELIMITC DC    256AL1(*-DELIMITC) characters X'00'-X'FF'
         ORG   DELIMITC+C'a'
         DC    9C' '
         ORG   DELIMITC+C'j'
         DC    9C' '
         ORG   DELIMITC+C's'
         DC    8C' '
         ORG   DELIMITC+C'A'
         DC    9C' '
         ORG   DELIMITC+C'J'
         DC    9C' '
         ORG   DELIMITC+C'S'
         DC    8C' '
         ORG   DELIMITC+C'0'
         DC    10C' '
         ORG
         LTORG
STRBUF   DS    CL1024
         TITLE 'DSECTS'
         IRXEFPL
         IRXEVALB
         IRXARGTB
         END


Anthony Rudd
Technical Consultant (Germany)                              c Anthony Rudd 1991

