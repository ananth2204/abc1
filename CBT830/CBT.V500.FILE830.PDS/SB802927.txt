ISPF edit macro for hexadecimal display


INTRODUCTION

The following ISPF edit macro runs under ISPF 2.2 and ISPF 2.3.
The ISPF editor is a powerful and flexible tool.  The edit macro
facility provides the means to create custom edit commands to
combine many standard commands or to process an edited dataset
in a manner not supported by the standard edit commands.  The
following macro is of the latter type.  The editor can display a
dataset in hexadecimal, but it displays the entire dataset in
hexadecimal - there is no facility to selectively display lines in
hexadecimal.  This macro provides such a facility.


MACRO USAGE

Use of this macro is very easy.  Select a line to display with an 'S'
line command, or range of lines with either 'SS' line commands or
an 'Snn' line command (where 'nn' is the number of lines in the
range), type '!HX' on the command line, and press ENTER.  The
line(s) selected will have hexadecimal translations displayed
directly below them (see example).

One note of caution: the hexadecimal lines are added to the dataset
as data lines.  This is so that lines up to 255 bytes may be
displayed (MSG and NOTE lines can have a maximum of 72
characters).  If these lines are not deleted and the dataset is
saved, the hexadecimal lines will be saved also.

Example

EDIT ---- XSMH.DATA(EXAMPLE) ------------------------------- COLUMNS 001 080
COMMAND ===>                                               SCROLL ===> CSR
000015 THIS IS AN EXAMPLE OF USING THE HX EDIT MACRO
000016 TO DISPLAY SELECTED LINES IN HEX
000017 RATHER THAN HAVING TO DISPLAY THE ENTIRE
000018 DATASET.


EDIT ---- XSMH.DATA(EXAMPLE) ------------------------------- COLUMNS 001 080
COMMAND ===> !HX                                           SCROLL ===> CSR
000015 THIS IS AN EXAMPLE OF USING THE HX EDIT MACRO
S 0016 TO DISPLAY SELECTED LINES IN HEX
000017 RATHER THAN HAVING TO DISPLAY THE ENTIRE
000018 DATASET.


EDIT ---- XSMH.DATA(EXAMPLE) ------------------------------- COLUMNS 001 080
COMMAND ===>                                               SCROLL ===> CSR
000015 THIS IS AN EXAMPLE OF USING THE HX EDIT MACRO
000016 TO DISPLAY SELECTED LINES IN HEX
000017 ED4CCEDDCE4ECDCCECC4DCDCE4CD4CCE444444444444444444444444444444444444
000018 36049273180253533540395520950857000000000000000000000000000000000000
==MSG> ***** HEX LINES WILL BE SAVED IF NOT DELETED FROM DATASET *****
000019 RATHER THAN HAVING TO DISPLAY THE ENTIRE
000020 DATASET.


INSTALLATION

Installation is also quite simple.  Assemble the macro source and
link it into a dataset allocated to the DDNAME ISPLLIB in your
ISPF logon procedure with member name 'HX'.  Then place the
macro error messages in a dataset allocated to the DDNAME
ISPMLIB in your ISPF log-on procedure with the member name
'HX00'.  The macro is now ready to use.


EDIT MACRO SOURCE CODE

* THIS PROGRAM IS AN ISPF EDIT MACRO TO DISPLAY A SINGLE LINE OR A
* RANGE OF LINES IN HEX.  THE LINE TO BE DISPLAYED IN HEX IS SELECTED
* WITH A 'S' LINE COMMAND, A RANGE OF LINES IS SELECTED WITH 'SS'
* LINE COMMANDS OR A 'SNN' LINE COMMAND, WHERE 'NN' IS THE NUMBER
* OF LINES TO DISPLAY.  THE HEX TRANSLATION IS DISPLAYED BELOW THE
* SELECTED LINE.  THE HEX TRANSLATION LINES ARE DISPLAYED AS DATA
* LINES SO THAT UP TO 255 BYTES MAY BE DISPLAYED (MSG AND NOTE LINES
* HAVE A MAXIMUM LENGTH OF 72 BYTES) AND WILL BE SAVED IF THEY ARE
* NOT DELETED FROM THE DATASET OR IF THE CANCEL COMMAND IS NOT USED
* TO TERMINATE THE EDIT SESSION.
HX       CSECT                         START THE CSECT
         USING *,R15                   USE AS BASE REGISTER
         STM   R14,R12,12(R13)         SAVE REGISTERS
         BAL   R14,*+76                BRANCH AROUND SAVE AREA
HXSAVE   DC    18F'0'                  PROGRAM REGISTER SAVE AREA
         ST    R14,8(R13)              STORE OUR SAVE AREA ADDRESS
         ST    R13,4(R14)              SAVE CALLER'S SAVE AREA ADDRESS
         LR    R13,R14                 LOAD OUR SAVE AREA ADDRESS
         DROP  R15                     DROP AS BASE REGISTER
         USING HXSAVE,R13              USE AS OUR BASE REGISTER
*        MACRO INITIALIZATION                                        *
         LA    R10,1                   LOAD DEFAULT RETURN CODE
         LOAD  EP=ISPLINK              LOAD ISPLINK MODULE
         ST    R0,ISPLINK@             SAVE ADDRESS
         LA    R9,HX000                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,MACRO),VL    'ISREDIT MACRO NOPROCESS'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         LA    R9,HX001                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE: VDEFINE    X
               (VDEFINE,MG,MESSAGE,CHAR,SEVENTY),VL
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE: VDEFINE    X
               (VDEFINE,WI,LWIDTH,CHAR,THREE),VL
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         LA    R9,HX002                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,WIDTH),VL    'ISREDIT (WI) = DATA_WIDTH'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         PACK  PKWRK2(8),LWIDTH(3)     PACK LINE WIDTH
         CVB   R2,PKWRK2               CONVERT TO BINARY
         ST    R2,LRECL                STORE IT FOR VDEFINE'S
         LA    R9,HX000                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE: VDEFINE    X
               (VDEFINE,IN,INLINE,CHAR,LRECL),VL
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE: VDEFINE    X
               (VDEFINE,O1,OUTLINE1,CHAR,LRECL),VL
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE: VDEFINE    X
               (VDEFINE,O2,OUTLINE2,CHAR,LRECL),VL
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE: VDEFINE    X
               (VDEFINE,CL,CURRLINE,CHAR,SIX),VL
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
*        LOCATE SELECTED LINE OR LINE RANGE                          *
         LA    R9,HX003                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,PROCESS),VL  'ISREDIT PROCESS RANGE S'
         LTR   R15,R15                 SUCCESSFUL?
         BZ    GETRANGE                YES, CONTINUE
         C     R15,=F'16'              RC >= 16?
         BNL   ERROR                   YES, GO TO ERROR ROUTINE
         LA    R9,HX008                NO, 'S' LINE CMD MISSING
         B     ERROR                   GO TO ERROR ROUTINE
GETRANGE LA    R9,HX009                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD IPSLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,LINENUM1),VL  'ISREDIT (CL) = LINENUM'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         LA    R9,HX009A               ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,LINENUM2),VL  'ISREDIT (LL) = LINENUM'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         PACK  PKWRK1(8),CURRLINE(6)   PACK FIRST LINE NBR
         UNPK  LINE+14(6),PKWRK1+4(4)  CONVERT TO CHAR
         OI    LINE+19,X'F0'           FIX SIGN
         PACK  PKWRK2(8),LASTLINE(6)   PACK LAST LINE NBR
         SP    PKWRK2(8),PKWRK1(8)     NUMBER OF LINES TO PROCESS -1
         AP    PKWRK2(8),=PL1'1'       NUMBER OF LINES TO PROCESS
         CVB   R8,PKWRK2               LOAD LINE COUNTER
*        PROCESS A SELECTED LINE                                     *
GETLINE  LA    R9,HX004                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,LINK),VL   'ISREDIT (IN) = LINE .ZFRANGE'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
*        TRANSLATE THE LINE TO 2 HEX LINES (HEX VERT)                 *
         LA    R2,INLINE               LOAD INPUT LINE ADDR
         LA    R3,OUTLINE1             LOAD OUTPUT LINE 1 ADDR
         LA    R4,OUTLINE2             LOAD OUTPUT LINE 2 ADDR
         L     R12,LRECL               LOAD LINE LENGTH
LOOP1    XR    R6,R6                   CLEAR REGISTER
         IC    R6,0(R2)                INSERT CHARACTER
         SRDL  R6,4                    SHIFT LOWER 4 BITS TO R7
         SRL   R7,28                   SHIFT TO LOW END OF REGISTER
         STC   R6,0(R3)                STORE HIGH BITS IN OUTLINE1
         STC   R7,0(R4)                STORE LOW BITS IN OUTLINE2
         LA    R2,1(R2)                BUMP INLINE POINTER
         LA    R3,1(R3)                BUMP OUTLINE1 POINTER
         LA    R4,1(R4)                BUMP OUTLINE2 POINTER
         BCT   R12,LOOP1               LOOP THROUGH ALL OF INLINE
         L     R12,LRECL               LOAD LINE LENGTH
         BCTR  R12,0                   SUBTRACT 1 FOR MACHINE
         LA    R11,OUTLINE1            LOAD OUTLINE1 ADDR
         EX    R12,HEXTRAN             TRANSLATE OUTLINE1
         LA    R11,OUTLINE2            LOAD OUTLINE2 ADDR
         EX    R12,HEXTRAN             TRANSLATE OUTLINE2
*        ADD HEX LINES TO DATASET                                    *
         MVC   AFTER2+13(6),LINE+14    MOVE CHAR LINE NBR
         LA    R9,HX006                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,AFTER2),VL 'ISREDIT LINE_AFTER'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         MVC   AFTER1+13(6),LINE+14    MOVE CHAR LINE NBR
         LA    R9,HX007                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,AFTER1),VL 'ISREDIT LINE_AFTER'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
         AP    PKWRK1(8),=PL1'3'       BUMP LINE POINTER
         UNPK  LINE+14(6),PKWRK1+4(4)  CONVERT TO CHAR
         OI    LINE+19,X'F0'           FIX SIGN
         BCT   R8,GETLINE              DO NEXT LINE
*        EXIT THE MACRO                                              *
         SP    PKWRK1(8),=PL1'1'       BUMP LINE POINTER
         UNPK  MSG+13(6),PKWRK1+4(4)   CONVERT TO CHAR
         OI    MSG+18,X'F0'            FIX SIGN
         LA    R9,HX005                ERROR MSG ADDR IF RC ¬= 0
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         CALL  (15),                   INVOKE ISPF SERVICE:            X
               (ISREDIT,ZERO,MSG),VL   'ISREDIT LINE_AFTER'
         LTR   R15,R15                 SUCCESSFUL?
         BNZ   ERROR                   NO, GO TO ERROR ROUTINE
GOODBYE  L     R13,HXSAVE+4            LOAD CALLER'S SAVE AREA ADDR
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS
         LR    R15,R10                 LOAD RETURN CODE
         BR    R14                     RETURN
*        ISPF SERVICE ERROR ROUTINE                                  *
ERROR    CVD   R15,PKWRK2              PACK SERVICE RC
         UNPK  RETCODE(3),PKWRK2+6(2)  CONVERT TO ZONED DECIMAL
         OI    RETCODE+2,X'F0'         FIX SIGN
         ST    R9,MSG@                 STORE MSG ADDR IN PARM LIST
         OI    MSG@,X'80'              SET VL BIT
         LA    R1,MSGPARM              LOAD PARM LIST ADDR
         L     R15,ISPLINK@            LOAD ISPLINK ADDRESS
         BALR  R14,R15                 INVOKE SETMSG SERVICE
         LA    R10,12                  LOAD MACRO RETURN CODE
         B     GOODBYE                 EXIT
*        DATA DEFINITIONS                                            *
HEXTRAN  TR    0(0,R11),HEXTBL         *********  EXECUTED  *********
HEXTBL   DC    XL256'00'               TRANSLATE TABLE
         ORG   HEXTBL                  X'00' - X'0F' ---> C'0' - C'F'
         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
         ORG   ,
PKWRK1   DC    D'0'                    WORK AREA
PKWRK2   DC    D'0'                    WORK AREA
ZERO     DC    F'0'                    CONSTANTS
THREE    DC    F'3'                        "
SIX      DC    F'6'                        "
SEVENTY  DC    F'70'                       "
LRECL    DC    F'0'                    EDITED DATASET LINE LENGTH
ISPLINK@ DC    A(0)                    ISPLINK MODULE ADDRESS
MSGPARM  DS    0F                      SET MSG PARM LIST
SERVICE@ DC    A(SETMSG)                  SERVICE NAME
MSG@     DC    A(0)                       MSG ADDRESS
*        ISPF SERVICE NAMES / ISREDIT SERVICE PARMS
VDEFINE  DC    C'VDEFINE '
ISREDIT  DC    C'ISREDIT '
SETMSG   DC    C'SETMSG '
CHAR     DC    C'CHAR '
MACRO    DC    C'$ MACRO NOPROCESS $'
WIDTH    DC    C'$ (WI) = DATA_WIDTH $'
PROCESS  DC    C'$ PROCESS RANGE S $'
LINENUM1 DC    C'$ (CL) = LINENUM .ZFRANGE $'
LINENUM2 DC    C'$ (LL) = LINENUM .ZLRANGE $'
LINE     DC    C'$ (IN) = LINE ###### $'
AFTER2   DC    C'$ LINE_AFTER ###### = (O2) $'
AFTER1   DC    C'$ LINE_AFTER ###### = (O1) $'
MSG      DC    C'$ LINE_AFTER ###### = MSGLINE (MG) $'
*        ISPF DIALOG VARIABLE NAMES
WI       DC    C'(WI '                 EDIT DATA LINE WIDTH
RC       DC    C'RC)'                  SERVICE RETURN CODE
CL       DC    C'(CL '                 CURRENT LINE
LL       DC    C'LL)'                  LAST LINE
MG       DC    C'MG '                  MESSAGE LINE TEXT
IN       DC    C'IN '                  TEXT TO BE DISPLAYED IN HEX
O1       DC    C'O1 '                  HEX DISPLAY LINE 1
O2       DC    C'O2 '                  HEX DISPLAY LINE 2
*        ISPF DIALOG ERROR MESSAGE ID'S
HX000    DC    C'HX000 '               VDEFINE ERROR MSG
HX001    DC    C'HX001 '               ISREDIT MACRO ERROR MSG
HX002    DC    C'HX002 '               ISREDIT DATA_WIDTH ERROR MSG
HX003    DC    C'HX003 '               ISREDIT PROCESS RANGE ERROR MSG
HX004    DC    C'HX004 '               ISREDIT LINE ERROR MSG
HX005    DC    C'HX005 '               1ST ISREDIT LINE_AFTER ERROR MSG
HX006    DC    C'HX006 '               2ND ISREDIT LINE_AFTER ERROR MSG
HX007    DC    C'HX007 '               3RD ISREDIT LINE_AFTER ERROR MSG
HX008    DC    C'HX008 '               NO 'S' LINE COMMAND ERROR MSG
HX009    DC    C'HX009 '               ISREDIT LINENUM .ZFRANGE FAILED
HX009A   DC    C'HX009A '              ISREDIT LINENUM .ZLRANGE FAILED
*        ISPF DIALOG VARIABLES
LWIDTH   DC    CL3' '
RETCODE  DC    CL3' '
CURRLINE DC    CL6'000000'
LASTLINE DC    CL6'000000'
INLINE   DC    CL255' '
OUTLINE1 DC    CL255' '
OUTLINE2 DC    CL255' '
MESSAGE  DC    CL70'***** HEX LINES WILL BE SAVED IF NOT DELETED FROM DX
               ATASET *****'
         END


EDIT MACRO ERROR MESSAGES.

HX000    'VDEFINE ERROR'
'VDEFINE FAILED - RC=&RC'
HX001    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT MACRO NOPROCESS'' - RC=&RC'
HX002    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT (WI) = DATA_WIDTH'' - RC=&RC'
HX003    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT PROCESS RANGE S'' - RC=&RC'
HX004    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT (IN) = LINE .ZFRANGE'' - RC=&RC'
HX005    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT LINE_AFTER .ZFRANGE = MSGLINE (MG)'' - RC=&RC'
HX006    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT LINE_AFTER .ZFRANGE = (O2)'' - RC=&RC'
HX007    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT LINE_AFTER .ZFRANGE = (O1)'' - RC=&RC'
HX008    'HX PENDING'
'INDICATE LINE(S) TO BE DISPLAYED IN HEX WITH ''S'' LINE COMMAND'
HX009    'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT (CL) = LINENUM .ZFRANGE'' - RC=&RC'
HX009A   'ISREDIT ERROR'
'FAILING STMT: ''ISREDIT (LL) = LINENUM .ZLRANGE'' - RC=&RC'


Steve Huitt
Systems Programmer
Nordstrom Inc (USA) € Xephon 1989
