Who has created this dataset?

It can sometimes be very helpful to know who has allocated a
dataset. This applies to operators, system programmers, and, in
particular, storage administrators during 'clean-up' exercises
where it is sometimes hard to find the owner of datasets. Some
tape management systems have such a function included - CA-
1 for instance can tell which user-id created a particular
dataset. This, however is not very common for disk datasets.
Despite the fact that there are, for instance, bytes in the VTOC
that could have been used for this purpose, no DASD
management product has implemented such a field. At the very
least it should have been implemented by IBM for SMS-
managed datasets where the information could have been
placed in the NVR/VVR in the VVDS.

I have made a small system to keep track of who allocates
datasets using the SMS DATACLAS exit IGDACSDC. The
exit is used to write SMF records which are later collected and
used to update a VSAM dataset. There are three SMS exits
available, one for each ACS routine except for the STORGRP
routine. They are called IGDACSDC (DATACLAS),
IGDACSMC (MGMTCLAS), and IGDACSSC (STORCLAS).
These exits are invoked after their respective ACS routines.

I have chosen to use the DATACLAS exit because all dataset
allocations (even tape and other non-SMS datasets) will cause
this exit to be invoked. This may also be true for the
STORCLAS exit, but I suspect there is more chance of an
installation needing to code the STORCLAS exit for some
other purpose. The same applies to other exits like
IGGPRE00/POST0. The fact that the IGDACSDC exit is fairly
easy to code can also be regarded as an advantage.


THE EXIT

The SMS exits get control in AMODE=RMODE=31,
supervisor state, and key=0. They reside in SYS1.LPALIB or
the LPALIB concatenation and have to be coded as re-entrant.
On entry, register 1 points to a parameter list, which points to a
4K work area that can be used by the exit (maintaining the re-
entrancy requirement), a list of read-only variables, a list of
read/write variables, and the address for the re-invocation of
the ACS routine. The read/write variables and the re-invocation
address are of no use in this application. The exits are
described in Chapter 10 of DFP 3.2 Customization SC26-4560-1.


GENERAL

The exit gets the user-id, environment, and DSTYPE values
from the list of read-only variables. I have chosen not to report
temporary datasets. Furthermore, I only want to report on 'real'
dataset allocations, that is the SMF record is not written if the
environment value is not 'ALLOC'. By doing this I can avoid
the situation where DFHSM is the creator of lots of datasets
because DFHSM sets the environment value to 'RECALL'. In
addition, if you are running ImagePlus among your
applications, you don't fill up your SMF dataset and eventually
your dataset owner VSAM file with lots and lots of cryptic
object names as ImagePlus sets the environment value to
'STORE'. All datasets that are created by DFHSM during
migration and back-up should also be removed. This can be
done in the exit although I have chosen to do this in the VSAM
maintenance program.


EXPERIENCE

After some time with the system, a lot of datasets had 'OPC/A'
as their owner. They were allocated in jobs submitted by our
production scheduler. As this seemed a bit unsatisfactory I
decided to get the job name for the allocating task/job from
SMS as well. This will give  additional information for all
datasets. For datasets that belong to a GDG you will only get
the GDG name reported. This may be unsatisfactory, but will
reduce the number of records in the VSAM file considerably.
In our installation the exit produces from 10,000 to 15,000
SMF records a day.


THE PROGRAMS

The system consists of two Assembler programs to handle the
SMF writing and collection, two programs written in
FORTRAN to manage the VSAM file, and a CLIST and
related panel to interface with ISPF. Other languages could of
course be used instead of FORTRAN and a REXX EXEC
could certainly be used to take the place of the CLIST.
Remember to concatenate your ISPF load libraries to the
SYSLIB DDNAME in the link process and to remove all the
comments from the FORTRAN programs before compilation as
the compiler doesn't seem to like them.


HOW TO CALL THE FUNCTION

The CLIST can be called as a line command in ISPF 3.4, the
dataset list. The creator and creating job of the dataset will
appear in the MESSAGE field on the same panel.

The Assembler code for the exit

IGDACSDC CSECT
*  WRITES SMF REC = 207
         USING IGDACSDC,R15     ADDRESSABILITY
         STM   14,12,12(13)     SAVE CALLER'S REGS
         L     R6,0(R1)         ADDRESS TO PARAMETER LIST
         L     R7,20(R6)        ESTABLISH
         USING WORKAR1,R7       ADDRESSABILITY IN WORKAREA
         LA    R14,SAVE         POINT TO SAVEAREA
         ST    R14,8(R13)       SET FWD CHAIN
         ST    R13,4(R14)       SET BACK CHAIN
         LR    R13,R14          PERM POINTER TO SAVE AREA
         LR    R12,R15          USE R12 FOR
         DROP  R15              ADDRESSABILITY
         USING IGDACSDC,R12
         L     R2,28(R6)        GET ADDRESS TO READ ONLY VARS
         MVC   USER,52(R2)      GET USER NAME
         MVC   DSN,524(R2)      GET DSN
         MVC   JOB,84(R2)       GET JOBNAME
         MVC   DSTYPE,76(R2)    GET DSTYPE
         MVC   ENVIR,244(R2)    GET ENVIRONMENT
         CLC   ENVIR,ALLOCENV   ALLOCATION PERFORMED ???
         BNE   FINITOS          IF NOT "ALLOC" ENVIR
         CLC   DSTYPE,TEMPDS    TEMPORARY DATASET ???
         BE    FINITOS          IF TEMP DATASET
         STORAGE OBTAIN,LENGTH=78,ADDR=(R9),LOC=BELOW  GET STORAGE
         USING SMF,R9           MAP DSECT SMF TO OBTAINED STORAGE
         MVC   SMFREC,SMFREC1   MOVE PREDEFINED DATA TO OBTAINED STOR
         TIME  BIN              GET TIMESTAMP
         STCM  R0,15,SMFTIME    FOR SMFREC
         STCM  R1,15,SMFDATE
         MVC   SMFUSER,USER     MOVE VARIABLES FROM
         MVC   SMFDSN,DSN       INPUT PARAMETERS
         MVC   SMFJOB,JOB       TO OBTAINED STORAGE
         SMFWTM SMFREC          WRITE SMF RECORD
         STORAGE RELEASE,LENGTH=78,ADDR=(R9)   RELEASE STORAGE
FINITOS  DS    0H
         L     R13,4(R13)       PICK UP BACK CHAIN PTR
         LM    14,12,12(13)     RELOAD CALLER'S REGISTERS
         SR    R0,R0            CLEAR REASON CODE REG
         SR    R15,15           CLEAR RETURN CODE
         BR    R14              RETURN TO CALLER
*        DATA AREAS AND CONTROL BLOCKS
         DS    0F
SMFREC1  DS    0CL78            DEFINES PREDEFINED VALUES
SMFRDW1  DC    XL4'004E0000'    RECORD DESCRIPTOR  LENGTH X'4E'
SMFSID1  DC    BL1'00000110'    SYSTEM INDICATOR   XA AND VS2
SMFRTYP1 DC    XL1'CF'          RECORD TYPE 207
SMFTIME1 DS    XL4              TIME
SMFDATE1 DS    PL4              DATE
SMFSYSI1 DC    CL4'SYSA'        SYSTEM ID, HARD-CODED, OR OBTAINED
SMFUSER1 DS    CL8              USERID FIELD
SMFDSN1  DS    CL44             DSN FIELD
SMFJOB1  DS    CL8              JOBNAME FIELD
TEMPDS   DC    XL4'00000003'    CODE FOR TEMP DS ALLOCATION
ALLOCENV DC    CL8'ALLOC   '    CODE FOR ALLOC ENVIRONMENT
         DS    0F
WORKAR1  DSECT                  DEFINES WORKAREA
SAVE     DS    XL72             SAVEAREA
DSTYPE   DS    CL4              DSTYPE FIELD
ENVIR    DS    CL8              ENVIRONMENT FIELD
USER     DS    CL8              USER FIELD
DSN      DS    CL44             DSN FIELD
JOB      DS    CL8              JOB FIELD
         DS    0F
SMF      DSECT
SMFREC   DS    0CL78            DEFINES SMF RECORD
SMFRDW   DS    XL4              RECORD DESCRIPTOR  LENGTH X'45'
SMFSID   DS    BL1              SYSTEM INDICATOR   XA AND VS2
SMFRTYPE DS    XL1                RECORD TYPE
SMFTIME  DS    XL4                TIME
SMFDATE  DS    PL4                DATE
SMFSYSID DS    CL4                SYSTEM ID
SMFUSER  DS    CL8                USERID FORM ALLOC
SMFDSN   DS    CL44               DATASETNAME
SMFJOB   DS    CL8                JOBNAME
         END

The Assembler code for the SMF record collect

SMFSEL   CSECT
         STM   14,12,12(13)       SAVE CALLER'S REGS
         LR    12,15              ESTABLISH -
         USING SMFSEL,12          ADDRESSABILITY
         LA    14,SAVE            POINT TO MY SAVE AREA
         ST    14,8(13)           SET FWD CHAIN FROM CALLER
         ST    13,SAVE+4          SET BACK CHAIN TO CALLER
         LA    13,SAVE            PERMANENT PTR TO SAVE AREA
         OPEN  (SMFLOG,(INPUT),OUTFILE,(OUTPUT))
READ     GET   SMFLOG             GET LOCATE MODE
         LR    4,1                INPUT RECORD ADDRESS IN REG 4
         CLC   5(1,4),RECTY207    COMPARE REC TYPE
         BNE   READ               WRONG RECORD TYPE
         LH    5,0(,4)            RECORD LENGTH IN REG 5
         PUT   OUTFILE            PUT, LOCATE MODE
         LR    10,1      ADDR     ADDRESS IN REG1 FROM PUT MACRO
         LR    11,5      LEN      LENGTH FROM REG5 (FROM INPUT)
         LR    8,4       ADDR     ADDRESS TO DATA RECORD
         LR    9,5       LEN      LENGTH FROM REG5
         MVCL  10,8               MOVE LONG
         BH    FINITOS
         B     READ               GET NEW RECORD
FINITOS  CLOSE (SMFLOG,,OUTFILE)
         L     13,SAVE+4          PICK UP BACK CHAIN PTR
         LM    14,12,12(13)       RELOAD CALLER'S REGISTERS
         SR    15,15              CLEAR RETURN CODE
         BR    14                 RETURN TO CALLER
         LTORG
SAVE     DS    18F
SMFLOG   DCB   DSORG=PS,MACRF=(GL),EODAD=FINITOS,DDNAME=SMFLOG
OUTFILE  DCB   DSORG=PS,MACRF=(PL),DDNAME=OUTFILE
RECTY207 DC    X'CF'              SELECT YOUR RECTYPE (207 SHOWN)
         END

The FORTRAN code for VSAM file maintenance

      PROGRAM VSAMUP                               program name.
      CHARACTER*8 JOB,JOBIN                        declare
      CHARACTER*7 USER,USERIN                      variables
      CHARACTER*4 SID                              used in
      CHARACTER*44 DSN,DSIN                        program.
      INTEGER CNTR1,CNTR2,CNTR3,CNTR4,CNTR5,CNTR6  init
      CNTR1 = 0                                    counter
      CNTR2 = 0                                    variables.
      CNTR3 = 0
      CNTR4 = 0
      CNTR5 = 0
      CNTR6 = 0
      OPEN(UNIT=10,FILE='SMFIN')                   open smf input.
      OPEN(UNIT=20,FILE='OWNDB',KEYS=(1:44),ACCESS='KEYED',
     CACTION='READWRITE')                          open vsam file.
100   FORMAT(14X,A4,A7,1X,A44,A8)                  def input format.
200   FORMAT(A44,A7,A8)                            def vsam format.
1     READ(UNIT=10,FMT=100,END=900) SID,USERIN,DSIN,JOBIN  read smfin.
      CNTR1 = CNTR1 + 1                            incr counter.
      IF (SID .NE. 'SYSA') then                    test for right
         CNTR5 = CNTR5 + 1                         system id.
         GOTO 1
         ENDIF
      IF (DSiN(1:8) .EQ. 'HSM.HMIG') THEN          exclude dfhsm
         CNTR6 = CNTR6 + 1                         migration
         GOTO 1                                    allocation.
         ENDIF
      IF (DSIN(1:8) .EQ. 'HSMBACK.') THEN          exclude dfhsm
         CNTR6 = CNTR6 + 1                         back-up
         GOTO 1                                    allocation.
         ENDIF                                                  read
      READ(UNIT=20,FMT=200,KEY=DSIN,NOTFOUND=500) DSN,USER,JOB  vsam.
      IF ((USER .EQ. USERIN) .AND. (JOB .EQ. JOBIN)) THEN       equal
         CNTR2 = CNTR2 + 1                                rec exists
         GOTO 1                                           in vsam
         ENDIF                                            file.
      REWRITE(UNIT=20,FMT=200) DSN,USERIN,JOBIN           equal rec
      CNTR3 = CNTR3 + 1                                   does not
      GOTO 1                                              exist in vsam
500   WRITE(UNIT=20,FMT=200) DSIN,USERIN,JOBIN            dsn key is
      CNTR4 = CNTR4 + 1                                   not found in
      GOTO 1                                              vsam.
900   CLOSE(UNIT=10)                                      close
      CLOSE(UNIT=20)                                      files.
      PRINT*,'VSAMUP - SUCCESSFUL RUN'
      PRINT*,'VSAMUP - # SMF RECS READ           : ',CNTR1
      PRINT*,'VSAMUP - # SMF RECS REJECTED       : ',CNTR5
      PRINT*,'VSAMUP - # HSM.HMIG RECS           : ',CNTR6
      PRINT*,'VSAMUP - # RECORDS WITH SAME OWNER : ',CNTR2
      PRINT*,'VSAMUP - # RECORDS WITH NEW OWNER  : ',CNTR3
      PRINT*,'VSAMUP - # NEW RECORDS             : ',CNTR4
      CALL EXIT
      END

The FORTRAN codes for use with ISPF

      PROGRAM ISPF01                           program name.
      INTEGER*4 LASTRC                         declare
      CHARACTER*16 ZDLMSG                      variables.
      CHARACTER*15 ZDLMS2
      CHARACTER*44 DSN,ZDSINN
      OPEN(UNIT=20,FILE='OWNDB',KEYS=(1:44),ACCESS='KEYED',     open
     CACTION='READWRITE')                                       vsam.
      LASTRC = ISPLNK ('VDEFINE','(ZDSINN )',ZDSINN  ,'CHAR',44)  def ispf
      LASTRC = ISPLNK ('VDEFINE','(ZDLMSG )',ZDLMSG  ,'CHAR',16)  vars.
200   FORMAT(A44,A15)                                   def format input.
      LASTRC = ISPLNK ('VGET','ZDSINN ','PROFILE')      get var from prof.
      READ(UNIT=20,FMT=200,KEY=ZDSINN,NOTFOUND=500) DSN,ZDLMS2  read with key.
      ZDLMSG = ZDLMS2(1:7)//' '//ZDLMS2(8:15)          construct reply.
      LASTRC = ISPLNK ('VPUT','ZDLMSG ','SHARED')      store reply in prof.
      GOTO 900
500   ZDLMSG = 'NOTFOUND'                              if dsn not found.
      LASTRC = ISPLNK ('VPUT','ZDLMSG ','SHARED')      store in prof.
900   CLOSE(UNIT=20)                                   close vsam file.
      CALL EXIT
      END

The CLIST for ISPF interface

PROC 1 &INPUT
CONTROL NOMSG NOLIST NOCONLIST NOFLUSH
SET &ZDSINN = &STR(&INPUT)
SET &LEN = &LENGTH(&ZDSINN)
SET &ZDSINN = &SUBSTR(2:&LEN-1,&ZDSINN)
IF &SUBSTR(&LEN-4:&LEN-2,&ZDSINN) = &STR(V00) THEN DO
   SET &ZDSINN = &SUBSTR(1:&LEN-11,&ZDSINN)
   END
ISPEXEC VPUT ZDSINN PROFILE
FREE F(FT06F001)
ALLOC F(FT06F001) DA(*)
ALLOC F(FT06F001) DA(NULLFILE)
ALLOC F(OWNDB) DA(your.vsamfile) SHR
CALL 'your.loadlib(ISPF01)'
FREE F(OWNDB)
FINITOS:-
END

The panel used in the CLIST

+
+
+
+
+
+
+       DELETE DATASET &SYSUID..WHO.LIST
+       ===========================================================
+
+          %===>_DEL     +(NO - TO SAVE DATASET, YES TO DELETE)
+
+
+
)INIT
.CURSOR = DEL
&DEL = 'YES'
)PROC
)END

The FORTRAN code for removal of non-existent datasets

This program requires that you have a catalog listing of your
appropriate catalogs with the dataset name in columns 1 to 44.
This file should be loaded into a VSAM file with a record
length of 44 and key length of 44. This file is referred to as
your.catalog.list in the JCL below.

The result of not running this program (or another similar
function) is that there will be some more records in the VSAM
file. Under normal circumstances this will not be a problem
unless you create a lot of datasets with different names that do
not belong to a GDG.

      PROGRAM CLEAN                                   program name.
      CHARACTER*44 DSN1,DSN2                          declare
      INTEGER CNTR1,CNTR2,CNTR3                       variables.
      CNTR1 = 0 set counters
      CNTR2 = 0
      CNTR3 = 0
      OPEN(UNIT=10,FILE='OWNDB',KEYS=(1:44),ACCESS='KEYED',   open
     CACTION='READWRITE')                                     files
      OPEN(UNIT=20,FILE='CATIN',KEYS=(1:44),ACCESS='KEYED',
     CACTION='READWRITE')
100   FORMAT(A44)                                         i/o formats
200   FORMAT(A44)
1     READ(UNIT=10,FMT=100,END=900) DSN1                  read vsam db
      CNTR1 = CNTR1 + 1
      READ(UNIT=20,FMT=200,KEY=DSN1,NOTFOUND=500) DSN2    read cat list
      CNTR2 = CNTR2 + 1
      GOTO 1
500   DELETE(UNIT=10)                                     dsn not ctlgd
      CNTR3 = CNTR3 + 1
      GOTO 1
900   CLOSE(UNIT=10)
      CLOSE(UNIT=20)
      PRINT*,'CLEAN - SUCCESSFUL RUN'
      PRINT*,'CLEAN - # RECS READ FOR VSAM FILE     : ',CNTR1
      PRINT*,'CLEAN - # RECS FOUND IN CATALOG       : ',CNTR2
      PRINT*,'CLEAN - # RECS DELETED FROM VSAM FILE : ',CNTR3
      CALL EXIT
      END

JCL for VSAM file update

//jobname  JOB your jobname specs.
//*
//READSMF  EXEC  PGM=SMFSEL
//STEPLIB  DD  DISP=SHR,DSN=your.loadlib
//SMFLOG   DD  DSN=your.smf.data,DISP=OLD
//OUTFILE  DD  DSN=your.smf.rec207,DISP=(,CATLG,DELETE),
//         UNIT=3380,LRECL=78,BLKSIZE=0,RECFM=FB,
//         SPACE=(TRK,(15,15),RLSE)
//*
//SMF      EXEC  PGM=VSAMUP
//STEPLIB  DD DSN=your.loadlib,DISP=SHR
//SMFIN    DD DSN=your.smf.rec207,DISP=OLD
//OWNDB    DD DSN=your.vsamfile,DISP=OLD,AMP='BUFND=10,BUFNI=20'
//FT06F001 DD SYSOUT=*
//*

JCL for removal of old entries in VSAM file

//jobname  JOB your job specs
//*
//CLEAN    EXEC PGM=CLEAN
//STEPLIB  DD DSN=your.loadlib,DISP=SHR
//OWNDB    DD DSN=your.vsamfile,DISP=OLD,AMP='BUFND=10,BUFNI=10'
//CATIN    DD DSN=your.catalog.list,DISP=OLD,AMP='BUFND=10,BUFNI=10'
//FT06F001 DD SYSOUT=*
//*
//REPRO1   EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//IN       DD DSN=your.vsamfile,DISP=OLD,AMP='BUFND=20'
//OUT      DD DSN=your.unloaded.file,DISP=(,CATLG,DELETE),
//         LRECL=59,BLKSIZE=0,RECFM=FB,SPACE=(CYL,(1,2),RLSE)
//SYSIN    DD *
 REPRO IFILE(IN) OFILE(OUT)
 DEL your.vsamfile
 DEF CLUSTER(NAME(your.vsamfile) KEYS(44 0) CYLINDERS(5 5) -
     RECORDSIZE(59 59))
/*
//REPRO2   EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//IN       DD DSN=your.unloaded.file,DISP=OLD
//OUT      DD DSN=your.vsamfile,DISP=OLD,AMP='BUFND=20'
//SYSIN    DD *
 REPRO IFILE(IN) OFILE(OUT)
/*


Geir Davidsen
Systems Programmer (Norway)                        c Xephon 1993

