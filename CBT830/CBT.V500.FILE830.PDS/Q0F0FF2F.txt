An ISPF edit macro to expand IEASYS

I have always found it difficult to check IEASYS PARMLIB
members, especially when there are a lot of MVS partitions, so I
wrote the following macro called IEASYS. It uses MSGLINEs
and NOTELINEs to produce an expanded display of the IEASYS
member being edited. Each parameter can be specified as
PRM=xx, PRM=(xx), or PRM=(xx,L), except for COMMNDxx,
where I have changed the logic to handle cases where several
members are specified.

the IEASYS rexx procedure

/*This REXX procedure is used to produce an expanded list of */
/*member IEASYS from parmlib in a more comprehensive form.   */
/*This proc is used as an edit macro and could easily be     */
/*changed to produce a list instead of notelines and msglines*/
/*in the IEASYS member edited.                               */
/*-----------------------------------------------------------*/
'ISREDIT MACRO (PRINT)'
'isredit (lig) = line .zcsr'
'isredit (mem) = member'
parse upper var print print
Linelen = 80
if print = "PRINT"
then do
    star = '*----------------------------------------------------*'
    det  = '* this 'mem' had been expanded via IEASYS macro *'
    blnk = '*                                                    *'
    address ispexec
    "LIST BUFNAME(star)   LINELEN("linelen") PAGE,
     SINGLE "
     /*  */
    "LIST BUFNAME(blnk)   LINELEN("linelen") ,
     SINGLE "
    "LIST BUFNAME(blnk)   LINELEN("linelen") ,
     SINGLE "
    "LIST BUFNAME(blnk)   LINELEN("linelen") ,
     SINGLE "
     /*  */
    "LIST BUFNAME(det)   LINELEN("linelen") ,
     SINGLE OVERSTRK"
     /*  */
    "LIST BUFNAME(blnk)   LINELEN("linelen") ,
     SINGLE "
    "LIST BUFNAME(blnk)   LINELEN("linelen") ,
     SINGLE "
    "LIST BUFNAME(blnk)   LINELEN("linelen") ,
     SINGLE "
    "LIST BUFNAME(star)   LINELEN("linelen") ,
     SINGLE "
end
S1= "="
S2= "("
S3= ","
S4= ")"
if substr(mem,1,6) ¬= "IEASYS" then do
   say "This MACRO can be used only for "
   say "IEASYS.....                     "
   exit
end
/*--------------------*/
/*get last line number*/
/*--------------------*/
'ISREDIT (last) = linenum .ZL'
 ADDRESS ISREDIT
"ISREDIT CURSOR = 1  1 "
/*-----------------------*/
/*Main loop for IEASYSxy */
/*-----------------------*/
do i = 1 to last
   ADDRESS ISREDIT
   "ISREDIT CURSOR = "i" 1 "
    address isredit
   'isredit (lig) = line .ZCSR'
   parse value lig with stmt comment
   /* all spaces are suppressed to check last character "," */
   stmt = space(stmt,0)
   if right(stmt,1) ¬= ","
   then do
      last_statement = 'YES'
   end
   sep = "="
   parse var stmt mem (sep) suffix
   parse var stmt stmt  (s4)
   select
      /*-----------------------*/
      /* LPA processing        */
      /* specified like this   */
      /* LPA=xx                */
      /* LPA=(xx)              */
      /* LPA=(xx,L) (v2='l')   */
      /*-----------------------*/
      when mem = "LPA"
      then do
         if length(suffix) > 3
         then do
            parse var stmt mem (s1) vx (s2) v1 (s3) v2
            member = "LPALST"v1
         end
         else do
            parse var stmt mem (s1) vx (s3)
            member = "LPALST"vx
         end
         say member
         call read_proc
      end
      /*-----------------------*/
      /* PAK processing        */
      /* specified like this   */
      /* PAK=xx                */
      /* PAK=(xx)              */
      /* PAK=(xx,L) (v2='l')   */
      /*-----------------------*/
      when mem = "PAK"
      then do
         if length(suffix) > 3
         then do
            parse var stmt mem (s1) vx (s2) v1 (s3) v2
            member = "IEAPAK"v1
         end
         else do
            parse var stmt mem (s1) vx (s3)
            member = "IEAPAK"vx
         end
         say member
         call read_proc
      end
       /*-----------------------*/
       /* CONSOLE processing    */
       /* specified like this   */
       /* CON=xx                */
       /* CON=(xx)              */
       /* CON=(xx,L) (v2='l')   */
       /*-----------------------*/
       when mem = "CON"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "CONSOL"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "CONSOL"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* CloCK   processing    */
       /* specified like this   */
       /* CLOCK=XX              */
       /* CLOCK=(XX)            */
       /* CLOCK=(XX,l)          */
       /*-----------------------*/
       when mem = "CLOCK"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "CLOCK"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "CLOCK"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* ALLOC00 processing    */
       /* specified like this   */
       /* ALLOC=XX              */
       /* ALLOC=(XX)            */
       /* ALLOC=(XX,l)          */
       /*-----------------------*/
       when mem = "ALLOC"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "ALLOC"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "ALLOC"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* MLPA    processing    */
       /* specified like this   */
       /* MLPA=XX               */
       /* MLPA=(XX)             */
       /* MLPA=(XX,l)           */
       /*-----------------------*/
       when mem = "MLPA"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "IEALPA"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "IEALPA"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* OPT     processing    */
       /* specified like this   */
       /* OPT=XX                */
       /* OPT=(XX)              */
       /* OPT=(XX,l)            */
       /*-----------------------*/
       when mem = "OPT"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "IEAOPT"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "IEAOPT"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* SSN     processing    */
       /* specified like this   */
       /* SSN=XX                */
       /* SSN=(XX)              */
       /* SSN=(XX,l)            */
       /*-----------------------*/
       when mem = "SSN"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "IEFSSN"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "IEFSSN"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* SVC     processing    */
       /* specified like this   */
       /* SVC=XX                */
       /* SVC=(XX)              */
       /* SVC=(XX,l)            */
       /*-----------------------*/
       when mem = "SVC"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "IEASVC"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "IEASVC"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* SCH     processing    */
       /* specified like this   */
       /* SCH=XX                */
       /* SCH=(XX)              */
       /* SCH=(XX,l)            */
       /*-----------------------*/
       when mem = "SCH"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "SCHED"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "SCHED"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* SMF     processing    */
       /* specified like this   */
       /* SMF=XX                */
       /* SMF=(XX)              */
       /* SMF=(XX,l)            */
       /*-----------------------*/
       when mem = "SMF"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "SMFPRM"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "SMFPRM"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* VATLST  processing    */
       /* specified like this   */
       /* VAL=XX                */
       /* VAL=(XX)              */
       /* VAL=(XX,l)            */
       /*-----------------------*/
       when mem = "VAL"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "VATLST"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "VATLST"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* FIX processing        */
       /* specified like this   */
       /* FIX=xx                */
       /* FIX=(xx)              */
       /* FIX=(xx,L) (v2='l')   */
       /*-----------------------*/
       when mem = "FIX"
         then do
            if length(suffix) > 3
            then do
              parse var stmt mem (s1) vx (s2) v1 (s3) v2
              member = "IEAFIX"v1
            end
            else do
              parse var stmt mem (s1) vx (s3)
              member = "IEAFIX"vx
            end
            say member
            call read_proc
       end
       /*-----------------------*/
       /* CMD processing        */
       /* specified like this   */
       /* CMD=xx                */
       /* CMD=(xx,yy...)        */
       /* CMD=(xx,yy,...,L)     */
       /*-----------------------*/
       when mem = "CMD"
         then do
            if length(suffix) > 3
            then do
              parse var stmt mem (s1) vx (s2) v1 (s3) v2 (s3) v3 (s3) v4
              if datatype("v1",A) = 1 & v1 ¬= ""
              then do
                 member = "COMMND"V1
                 call read_proc
              end
              if datatype("v2",A) = 1 & v2 ¬= ""
              then do
                 member = "COMMND"V2
                 call read_proc
              end
              if datatype("v3",A) = 1 & v3 ¬= ""
              then do
                 member = "COMMND"V3
                 call read_proc
              end
            end
            else do
              parse var stmt mem (s1) vx (s3)
              member = "COMMND"vx
              say member
              call read_proc
            end
       end
       /*-----------------------*/
       /* APF processing        */
       /* specified like this   */
       /* APF=xx                */
       /* APF=(xx)              */
       /* APF=(xx,L)            */
       /*-----------------------*/
       when mem = "APF"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "IEAAPF"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "IEAAPF"vx
          end
          call read_proc
          say member
       end
       /*-----------------------*/
       /* LNK processing        */
       /* specified like this   */
       /* LNK=xx                */
       /* LNK=(xx)              */
       /* LNK=(xx,L)            */
       /*-----------------------*/
       when mem = "LNK"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "LNKLST"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "LNKLST"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* IPS processing        */
       /* specified like this   */
       /* IPS=xx                */
       /* IPS=(xx)              */
       /* IPS=(xx,L)            */
       /*-----------------------*/
       when mem = "IPS"
       then do
          if length(suffix) > 3
          then do
             parse var stmt mem (s1) vx (s2) v1 (s3) v2
             member = "IEAIPS"v1
          end
          else do
             parse var stmt mem (s1) vx (s3)
             member = "IEAIPS"vx
          end
          say member
          call read_proc
       end
       /*-----------------------*/
       /* ICS processing        */
       /* specified like this   */
       /* ICS=xx                */
       /* ICS=(xx)              */
       /* ICS=(xx,L)            */
       /*-----------------------*/
       when mem = "ICS"
       then do
            if length(suffix) > 3
            then do
              parse var stmt mem (s1) vx (s2) v1 (s3) v2
              member = "IEAICS"v1
            end
            else do
              parse var stmt mem (s1) vx (s3)
              member = "IEAICS"vx
            end
            say member
            call read_proc
       end
       otherwise
       do
          line = "*   parameter "mem" not processed *"
          address isredit
          "isredit line_before .zcsr = MSGLINE '"line"' "
          if print = "PRINT"
             then do
                address ispexec
                "LIST BUFNAME(stmt)   LINELEN("linelen") ,
                 SINGLE  "
               end
       end
   end
   if last_statement = 'YES' then EXIT
end
exit
/*------------------------------------------*/
/*Reading loop to process each member of    */
/*parmlib                                   */
/*  This subroutine could be modified       */
/*  to add lmprint statement.               */
/*------------------------------------------*/
READ_PROC :
eof = 'no'
ADDRESS TSO
dsn = "'sys1.parmlib("member")'"
if sysdsn(dsn) = 'MEMBER NOT FOUND'
then do
     line = "*   member specified=>  "member"   *"
     address isredit
     "isredit line_before .zcsr = MSGLINE '"line"' "
     line = "*   could not be found             *"
     address isredit
     "isredit line_before .zcsr = MSGLINE '"line"' "
     return
     if print = "PRINT"
     then do
        line = "*   member specified=>  "member"   *"
        address ispexec
        "LIST BUFNAME(line)   LINELEN("linelen") ,
                  SINGLE  OVERSTRK  "
         line = "*   could not be found             *"
         address ispexec
         "LIST BUFNAME(line)   LINELEN("linelen") ,
                    SINGLE  OVERSTRK  "
     end
END
"alloc fi(ddin) da('sys1.parmlib("member")') shr reuse"
eof = 'no'
/* reading loop of member */
line = "*          insertion of member "member"              *"
address isredit
if print = "PRINT"
then do
   address ispexec
   "LIST BUFNAME(star)   LINELEN("linelen") ,
   SINGLE OVERSTRK  PAGE"
   "LIST BUFNAME(blnk)   LINELEN("linelen") ,
   SINGLE  "
   "LIST BUFNAME(line)   LINELEN("linelen") ,
   SINGLE OVERSTRK  "
   "LIST BUFNAME(blnk)   LINELEN("linelen") ,
   SINGLE  "
   "LIST BUFNAME(star)   LINELEN("linelen") ,
   SINGLE OVERSTRK  "
end
"isredit line_before .zcsr = MSGLINE '"line"' "
do while eof = 'no'
    address tso
    "execio 1 diskr ddin  "
     if rc ¬= 0
     then do
         address tso
        "execio * diskr ddin (finis"
         eof = 'yes'
         return
     end
     pull lig
     lig = substr(lig,1,72)
     address isredit
     "isredit line_before .zcsr = noteline """lig""""
     if print = "PRINT"
     then do
         address ispexec
         "LIST BUFNAME(lig)   LINELEN("linelen") ,
                    SINGLE   "
     end
end
address tso
"free fi(ddin)"
return


Franìois-Xavier Bessuges
Systems Programmer (France)                                              c Xepho

