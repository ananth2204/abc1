Utilizing GRS resources in TSO REXX



      SYSGRS(func,qname,rname,opt)



      OWNERS=nnnn,WAIT EXCLUSIVE=nnnn,WAIT SHARED=nnnn,SCOPE=scope



      user     own disp



Usage examples



ENQ a resource SHARED



   Qname = 'TSOAPPL'

   Rname = 'USER APPLICATION #1'

   If SYSGRS('ENQ',Qname,Rname) ¬= 0 then do

      if rc = 4 then say 'Resource is in use'

      else say 'SYSGRS error, rc = 'rc

      exit

  end

  else say 'Resource ENQueued OK'



ENQ a resource EXCLUSIVE



   Qname = 'TSOAPPL'

   Rname = 'USER APPLICATION #1'

   If SYSGRS('ENQ',Qname,Rname,E) ¬= 0 then do

      if rc = 4 then say 'Resource is in use'

      else say 'SYSGRS error, rc = 'rc

      exit

  end

  else say 'Resource ENQueued OK'



Display all users of a dataset



   Qname = 'SYSDSN'

   Rname = 'MY.PDS'

   If SYSGRS('WHO',Qname,Rname) ¬= 0 then do

      if rc = 4 then say Rname 'is not use'

      else say 'SYSGRS error, rc = 'rc

      exit

  end

  do queued()

   pull line

   say line

  end



Display all users editing a dataset



   Qname = 'SPFEDIT'

   Rname = 'USER' /* data set high-level qualifier */

   /* use generic scan form of WHO to find all datasets that

     begin with 'Rname' */

   If SYSGRS('WHO',Qname,Rname,G) ¬= 0 then do

      if rc = 4 then say 'No 'rname'/* datasets in use */

      else say 'SYSGRS error, rc = 'rc

      exit

  end

  do queued()

   pull line

   say line

  end



  QSPFEDIT

  RUSER.PRIVATE.PDS                            SYSGRS

  IOWNERS=0001,WAIT EXCLUSIVE=0001,WAIT SHARED=0002,SCOPE=SYSTEMS

  UUSER     OWNS EXCLUSIVE

  UUSER1    WAIT SHARED

  UUSER2    WAIT SHARED

  UUSER3    WAIT EXCLUSIVE

  QSPFEDIT

  RUSER.ISPF.ISPPROF                           ISPSPROF

  IOWNERS=0001,WAIT EXCLUSIVE=0000,WAIT SHARED=0000,SCOPE=SYSTEMS

  UUSER     OWNS EXCLUSIVE

  QSPFEDIT

  RUSER.ISPF.ISPPROF                           ISPPROF

  IOWNERS=0001,WAIT EXCLUSIVE=0000,WAIT SHARED=0000,SCOPE=SYSTEMS

  UUSER     OWNS EXCLUSIVE

  QSPFEDIT

  RUSER.ISPF.ISPPROF                           ISRPROF

  IOWNERS=0001,WAIT EXCLUSIVE=0000,WAIT SHARED=0000,SCOPE=SYSTEMS

  UUSER     OWNS EXCLUSIVE

  QSPFEDIT

  RUSER.ISPF.ISPPROF                           ISREDRT

  IOWNERS=0001,WAIT EXCLUSIVE=0000,WAIT SHARED=0000,SCOPE=SYSTEMS

  UUSER     OWNS EXCLUSIVE



SYSGRS source code



//jobname  JOB   your.jobcard.here

//**** 'NOALIGN' PARAMETER REQUIRED TO PREVENT ASSEMBLER RC 4

//STEPA EXEC ASMFCL,PARM.ASM='RENT,NOALIGN',PARM.LKED='RENT,REUS'

//ASM.SYSIN DD *

SYSGRS TITLE 'REXX FUNCTION TO ENQEUE/DEQEUE GRS RESOURCES'

***********************************************************************

***      This is a program that will execute as a REXX              ***

***      function under TSO/E REXX and will Enqueue/Dequeue GRS     ***

***      resources.                                                 ***

***      The function accepts 4 arguments:-                         ***

***       1. Function indicator:-                                   ***

***          'ENQ' - Enqueue a resource                             ***

***          'DEQ' - Dequeue a resource                             ***

***          'TST' - Test Enqueue request.                          ***

***          'WHO' - Fin who owns a resource                        ***

***       2. The GRS Major name (Qname) to use                      ***

***       3. The GRS Minor name (Rname) to use                      ***

***       4. For 'ENQ' or 'TST' only:-                              ***

***            'E' - request exclusive control of the resource      ***

***            'S' - request shared control of the resource         ***

***            (default is 'S')                                     ***

***          For 'WHO' only :-                                      ***

***            'G' - Resource name specified is generic             ***

***          blank - Resource name specified is specific            ***

***            (Default is blank)                                   ***

***   eg                                                            ***

***       call 'SYSGRS' 'ENQ','TSOAPPL','APPLICATION 1'             ***

***   OR                                                            ***

***     qnam = 'TSOAPPL'                                            ***

***     rnam = 'APPLICATION 1'                                      ***

***       chk = sysgrs('ENQ',qnam,rnam,'E')                         ***

***   The parameters can be literal strings, or valid REXX symbols  ***

***   that have been previousley set.                               ***

***   The 'TST' parameter functions as the 'ENQ' parameter, but     ***

***   control of the resource is not given to the user, instead     ***

***   the results of an ENQ are tested, and the return code set     ***

***   accordingly.                                                  ***

***   The return code from the ENQ/DEQ macro or the GQSCAN macro if ***

***   'WHO' is specified will be returned as the                    ***

***   function result (or as the RESULT special variable if         ***

***   CALLed as a subroutine) and also set as the RC special        ***

***   variable.                                                     ***

***   If on eor more parameters are omitted or are in error,        ***

***   an informational message will be issued and the function will ***

***   return REXX error 40 - invalid call to routine.               ***

***   if an explicit dequeue is not performed the enqueue will be   ***

***   implicitly dropped when the task (ie rexx exec) that          ***

***   invoked enqueue ends.                                         ***

***    For a 'WHO' request, the results are returned in the rexx    ***

***    data stack as lines with the format:-                        ***

***    cc1      - record identifier                                 ***

***    cc2-ccn  - record data (depends on identifier)               ***

***    ID          DATA                                             ***

***    __          ____                                             ***

***    Q           qname (enq major name)                           ***

***    R           rname (enq minor name)                           ***

***    I           resource infomation, in format                   ***

***  'OWNERS=nnnn,WAIT EXCLUSIVE=nnnn,WAIT SHARED=nnnn,SCOPE=scope  ***

***   ('scope' can be STEP, SYSTEM, SYSTEMS, or GLOBAL)             ***

***    U           resource user, in format:-                       ***

***  'user     own disp'                                            ***

***    where:                                                       ***

***   'user'   ..... the resource user                              ***

***   'own'    ..... 'WAIT' or 'OWNS'                               ***

***   'disp'   ..... 'SHARED' or 'EXCLUSIVE'                        ***

***   Possible Return Codes:-                                       ***

***   For 'ENQ' or 'TST'                                            ***

***        00  .................. OK, ENQ successful                ***

***        04  .................. Resource in use by another task   ***

***                               (can occur under TSO/ISPF if you  ***

***                                use SYSGRS across split screen)  ***

***        08  .................. RESOURCE ALREADY ASSIGNED TO THIS ***

***                               task.                             ***

***   For 'DEQ'                                                     ***

***        00  .................. OK, DEQ successful                ***

***        08  .................. Resource not in use by this task  ***

***   For 'WHO'                                                     ***

***        00  .................. Scan OK, Informational messages   ***

***                                will have been issued.           ***

***        04  .................. resource not in use, no messages  ***

***                                will have been issued.           ***

***      >=12  .................. Possible system error whilst      ***

***                                performing scan - retry request. ***

***********************************************************************

SYSGRS CSECT

SYSGRS AMODE 31

SYSGRS RMODE ANY

         STM   R14,R12,12(R13)         *SAVE REGS

         LR    R12,R15                 *R12 --> BASE REGISTER

         USING SYSGRS,R12              *ESTABLISH ADDRESSABILITY

         LR    R10,R0                  *R10 --> A(ENVIRONMENT BLOCK)

         USING ENVBLOCK,R10            *MAP ENVIRONMENT BLOCK

         LR    R11,R1                  *R11 --> A(PARAM LIST (EFPL))

         USING EFPL,R11                *MAP EFPL

         GETMAIN RU,LV=DYNLEN,LOC=ANY  *OBTAIN DYNAMIC STORAGE

         LR    R2,R1                   *POINT AT WORKAREA

         L     R3,=A(DYNLEN)           *SET ITS LENGTH

         LA    R4,0                    *SET DUMMY FROM ADDRESS

         LA    R5,0                    *SET DUMMY LENGTH

         MVCL  R2,R4                   *BLANK OUT THE AREA

         ST    R13,4(R1)               *SAVE R13

         ST    R1,8(R13)               *BACK-CHAIN SAVE AREAS

         LR    R13,R1                  *R13 -->A(REG SAVE/DYNAMIC AREA)

         USING DYNAM,R13               *ESTABLISH ADDRESSABILITY

         L     R9,ENVBLOCK_IRXEXTE     *R9 --> A(EXTERNAL EP TABLE)

         USING IRXEXTE,R9              *MAP IT

*        CHECK THE PARAMETER LIST FOR VALID ARGUMENTS               ***

*        AND STORE VALUES IN WORKING STORAGE                        ***

***    FIRST CHECK FOR FUNCTION CODE                                ***

         L     R8,EFPLARG              *R8 --> A(ARGUMENT TABLE)

         USING ARGTABLE_ENTRY,R8       *MAP ENTRY

         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OF ARGS?

         BE    NOARG1                  *--> YES - ERROR

         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)

         CLC   0(3,R2),=CL3'ENQ'            *ENQ?

         BE    GOODARG1                     *YES - CARRY ON

         CLC   0(3,R2),=CL3'TST'            *TST?

         BE    GOODARG1                     *YES - CARRY ON

         CLC   0(3,R2),=CL3'DEQ'            *DEQ?

         BE    GOODARG1                     *YES - CARRY ON

         CLC   0(3,R2),=CL3'WHO'            *WHO?

         BNE   ARG1ERR                      *INVALID FUNCTION

GOODARG1 L     R1,ARGTABLE_ARGSTRING_LENGTH *R1 --> L(ARGUMENT)

         LTR   R1,R1                   *TEST LENGTH

         BZ    NOARG1                  *ZERO? - ERROR

         LA    R4,FCODE                *R4 --> A(ARGUMENT)

         BCTR  R1,0                    *DECREASE FOR MOVE

         EX    R1,MOVEARG              *SAVE ARGUMENT

***      NOW CHECK FOR QNAME, ENSURE NOT > 8 CHARS AND STORE        ***

         LA    R8,ARGTABLE_NEXT        *R8 --> A(NEXT ARGUMENT)

         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OF ARGS?

         BE    NOARG2                  *--> YES - EXIT RC 40

*                                      (INVALID CALL TO ROUTINE)

         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)

         L     R1,ARGTABLE_ARGSTRING_LENGTH *R1 --> L(ARGUMENT)

         LTR   R1,R1                   *TEST LENGTH

         BZ    NOARG2                  *ZERO? - ERROR

         CH    R1,=H'8'                *LENGTH <= 8?

         BH    ARG2ERR                 *--> NO - EXIT

         OI    QNAME,C' '              *INITIALIZE

         OC    QNAME+1(L'QNAME-1),QNAME * QNAME FIELD

         LA    R4,QNAME                *R4 --> A(ARGUMENT)

         BCTR  R1,0                    *DECREASE LENGTH FOR MOVE

         EX    R1,MOVEARG              *--> SAVE ARGUMENT

***      NOW CHECK FOR RNAME, ENSURE NOT > 255 CHARS AND STORE      ***

         LA    R8,ARGTABLE_NEXT        *R8 --> A(NEXT ARGUMENT)

         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OF ARGS?

         BE    NOARG3                  *--> YES - EXIT RC 40

*                                      (INVALID CALL TO ROUTINE)

         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)

         L     R1,ARGTABLE_ARGSTRING_LENGTH *R1 --> L(ARGUMENT)

         LTR   R1,R1                   *TEST LENGTH

         BZ    NOARG3                  *ZERO? - ERROR

         CH    R1,=H'255'              *LENGTH <= 255'

         BH    ARG3ERR                 *--> NO - EXIT

         STH   R1,RNAMEL               * AVE LENGTH

         LA    R4,RNAME                *R4 --> A(ARGUMENT)

         BCTR  R1,0                    *DECREASE LENGTH FOR MOVE

         EX    R1,MOVEARG              *--> SAVE ARGUMENT

***      IF 'WHO' OR 'DEQ' SPECIFIED, CALL ROUTINE                  ***

         CLC   FCODE,=CL3'WHO'         * SCAN REQUESTED?

         BE    DOSCAN                  * GO DO IT

         CLC   FCODE,=CL3'DEQ'         * DEQ REQUESTED?

         BE    DODEQ                   * GO DO IT

***  ...ELSE CHECK FOR 'E' or 'S' OPTION AND STORE ('ENQ'/'TST' ONLY)**

         LA    R8,ARGTABLE_NEXT        *R8 --> A(NEXT ARGUMENT)

         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OF ARGS?

         BE    NOSYS                   *YES-SET DEFAULT VALUE

         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)

CHKE     CLI   0(R2),C'E'                   *EXCLUSIVE?

         BNE   CHKS                         *NO - TRY NEXT

         MVI   SYSOPT,C'E'                  *STORE

         B     DOENQ                        *CARRY ON

CHKS     CLI   0(R2),C'S'                   *SHARED?

         BNE   ARG4ERR1                     *NO - ERROR

         MVI   SYSOPT,C'S'                  *STORE

         B     DOENQ                        *CARRY ON

NOSYS    DS    0H                           *DEFAULT IF BLANK

         MVI   SYSOPT,C'S'                  * --> SET AS SHARED

         B     DOENQ                        *CARRY ON

MOVEARG  MVC   0(0,R4),0(R2)           *EXECUTABLE MOVE

***      ENQUEUE ROUTINE                                            ***

DOENQ    DS    0H

         CLC   FCODE,=CL3'TST'         *TEST VERSION?

         BE    DOTST                   *YES - GO DO IT

         CLI   SYSOPT,C'E'             *EXCLUSIVE SPECIFIED?

         BE    ENQ2                    *YES - DO IT

ENQ1     DS    0H                      *SHARED

         MVC   ENQPARM(ENQPL),ENQPLST  *MOVE IN PARAMETER LIST

         LA    R3,QNAME                *R3-->A(QNAME)

         LA    R4,RNAME                *R4-->A(RNAME)

         LH    R5,RNAMEL               *R5-->A(RNAMEL)

* DO ENQUEUE

         ENQ   ((3),(4),S,(5),SYSTEMS),RET=USE,MF=(E,ENQPARM)

         ST    R15,ENQRC               *SAVE RETURN CODE

         B     ENQOK                   *GO TO EXIT ROUTINE

ENQ2     DS    0H                      *EXCLUSIVE

         MVC   ENQPARM(ENQPL),ENQPLST  *MOVE IN PARAMETER LIST

         LA    R3,QNAME                *R3-->A(QNAME)

         LA    R4,RNAME                *R4-->A(RNAME)

         LH    R5,RNAMEL               *R5-->A(RNAMEL)

* DO ENQUEUE

         ENQ   ((3),(4),E,(5),SYSTEMS),RET=USE,MF=(E,ENQPARM)

         ST    R15,ENQRC               *SAVE RETURN CODE

         B     ENQOK                   *GO TO EXIT ROUTINE

***      ENQUEUE TEST ROUTINE                                       ***

DOTST    DS    0H

         CLI   SYSOPT,C'E'             *EXCLUSIVE SPECIFIED?

         BE    TST2                    *YES - DO IT

TST1     DS    0H                      *SHARED

         MVC   TSTPARM(TSTPL),TSTPLST  *MOVE IN PARAMETER LIST

         LA    R3,QNAME                *R3-->A(QNAME)

         LA    R4,RNAME                *R4-->A(RNAME)

         LH    R5,RNAMEL               *R5-->A(RNAMEL)

* DO ENQUEUE

         ENQ   ((3),(4),S,(5),SYSTEMS),RET=TEST,MF=(E,TSTPARM)

         ST    R15,ENQRC               *SAVE RETURN CODE

         B     ENQOK                   *GO TO EXIT ROUTINE

TST2     DS    0H                      *EXCLUSIVE

         MVC   TSTPARM(TSTPL),TSTPLST  *MOVE IN PARAMETER LIST

         LA    R3,QNAME                *R3-->A(QNAME)

         LA    R4,RNAME                *R4-->A(RNAME)

         LH    R5,RNAMEL               *R5-->A(RNAMEL)

* DO ENQUEUE

         ENQ   ((3),(4),E,(5),SYSTEMS),RET=TEST,MF=(E,TSTPARM)

         ST    R15,ENQRC               *SAVE RETURN CODE

         B     ENQOK                   *GO TO EXIT ROUTINE

***      DEQUEUE ROUTINE                                            ***

DODEQ    DS    0H

         MVC   DEQPARM(DEQPL),DEQPLST  *MOVE IN PARAMETER LIST

         LA    R3,QNAME                *R3-->A(QNAME)

         LA    R4,RNAME                *R4-->A(RNAME)

         LH    R5,RNAMEL               *R5-->A(RNAMEL)

* DO DEQUEUE

         DEQ   ((3),(4),(5),SYSTEMS),RET=HAVE,MF=(E,DEQPARM)

         ST    R15,ENQRC               *SAVE RETURN CODE

         B     ENQOK                   *GO TO EXIT ROUTINE

***      SCAN ROUTINE                                               ***

DOSCAN   DS    0H

***  ...FIRST CHECK IF 4TH ARGUMENT OF 'G' (GENERIC)

         LA    R8,ARGTABLE_NEXT        *R8 --> A(NEXT ARGUMENT)

         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' *END OF ARGS?

         BE    NOGEN                   *YES-NOT GENERIC

         L     R2,ARGTABLE_ARGSTRING_PTR    *R2 --> A(ARGUMENT)

         CLI   0(R2),C'G'                   *GENERIC

         BNE   ARG4ERR2                     *NO - ISSUE ERROR

         MVI   GENOPT,C'Y'                  *STORE

         B     SCANL

NOGEN    MVI   GENOPT,C'N'                  *NOT GENERIC

SCANL    DS    0H

         MVC   SCANPARM(SCANPL),SCANPLST    *MOVE IN PARAMETER LIST

         XC    TOKEN,TOKEN

CONT     LA    R3,QNAME                *R3-->A(QNAME)

         LA    R4,RNAME                *R4-->A(RNAME)

         LH    R5,RNAMEL               *R5-->A(RNAMEL)

         LA    R2,AREA

         CLI   GENOPT,C'Y'

         BE    SCAN2

* EXPLICIT RESOURCE SCAN

SCAN1    GQSCAN AREA=(AREA,9000),SCOPE=ALL,TOKEN=TOKEN,                X

               RESNAME=((3),(4),(5)),MF=(E,SCANPARM)

         ST    R15,ENQRC               *SAVE RETURN CODE

         LTR   R15,R15                 *RC=0 AREA IS BIG ENOUGH

         BZ    SCANL1

         CH    R15,=H'8'               *RC=8 AREA WAS TOO SMALL

         BE    SCANL1

         B     SCANOK                  *RC>8 ERROR

* GENERIC RESOURCE SCAN

SCAN2    GQSCAN AREA=(AREA,9000),SCOPE=ALL,TOKEN=TOKEN,                X

               RESNAME=((3),(4),(5),GENERIC),MF=(E,SCANPARM)

         ST    R15,ENQRC               *SAVE RETURN CODE

         LTR   R15,R15                 *RC=0 AREA IS BIG ENOUGH

         BZ    SCANL1                  *

         CH    R15,=H'8'               *RC=8 AREA WAS TOO SMALL

         BE    SCANL1                  *

         B     SCANOK                  *RC>8 ERROR

SCANL1   STCM  R0,12,TEMP1             *TEMP1 = 1ST HWRD OF R0

*                                      *= LENGTH OF RIB FIXED

         STCM  R0,3,TEMP2              *TEMP2 = 2ND HWRD OF R0

*                                      *= LENGTH OF RIBE

         LR    R3,R1                   *R3 = NO. OF RIBS IN AREA

RIBLOOP  DS    0H

* INITIALIZE STACK RECORDS

         MVC   MSGI(MSGILEN),MESSAGEI  *INFO LINE

         MVC   MSGQ(MSGQLEN),MESSAGEQ  *QNAME LINE

         MVC   MSGR(MSGRLEN),MESSAGER  *RNAME LINE

         MVC   MSGU(MSGULEN),MESSAGEU  *USER LINE

         USING RIB,R2                  *MAP RIB

         LR    R4,R2                   *R4=A(RIB)

         AH    R4,TEMP1                *ADD L(RIB FIXED AREA)

         AH    R4,RIBVLEN              *ADD L(RIB VARIABLE AREA)

* R4 IS NOW THE START ADDRESS OF THE RIBE

* OUTPUT QNAME AS STACK RECORD

OUTMSGQ  MVC   MSGQ+1(8),RIBQNAME      *MOVE QNAME TO RECORD

         LA    R1,MSGQ                 *R1 -->A(QNAME RECORD)

         LA    R0,MSGQLEN              *R0 -->L(QNAME RECORD)

         BAS   R14,@STACK              *STACK IT

* OUTPUT RNAME AS STACK RECORD

         LA    R7,RIBEND               *R7 -->A(RIB VARIABLE DATA)

         USING RIBVAR,R7               *MAP IT

OUTMSGR  XR    R1,R1                   *CLEAR R1

         ICM   R5,B'0001',RIBRNMLN     *GET RNAME LENGTH

         EX    R5,MOVERES              *DO MOVE

         B     STACKRES                *SKIP ROUND EXECUTE

MOVERES  MVC   MSGR+1(0),RIBRNAME      *EXECUTABLE INSTRUCTION

STACKRES LA    R1,MSGR                 *R1 -->A(RNAME RECORD)

         LA    R0,1                    *R0 --L(RECORD IDENTIFIER)

         AR    R0,R5                   *ADD IN RNAME LENGTH

         BAS   R14,@STACK              *STACK IT

         L     R5,RIBNTO               *R5 = NO. OF OWNERS

         CVD   R5,PTEMP                *PACK

         MVC   EDWORK,EDMASK           *MOVE IN EDIT MASK

         ED    EDWORK,PTEMP+4          *CONVERT TO PRINTABLE

         MVC   MSGIOWN,EDWORK+4        *STORE IN MESSAGE

         L     R5,RIBNTWE              *R5 - WAIT (EXCLUSIVE)

         CVD   R5,PTEMP                *PACK

         MVC   EDWORK,EDMASK           *MOVE IN EDIT MASK

         ED    EDWORK,PTEMP+4          *CONVERT TO PRINTABLE

         MVC   MSGIEXC,EDWORK+4        *STORE IN MESSAGE

         L     R5,RIBNTWS              *R5 - WAIT (SHARED)

         CVD   R5,PTEMP                *PACK

         MVC   EDWORK,EDMASK           *MOVE IN EDIT MASK

         ED    EDWORK,PTEMP+4          *CONVERT TO PRINTABLE

         MVC   MSGISHR,EDWORK+4        *STORE IN MESSAGE

CHKSTM   TM    RIBSCOPE,RIBSYS         *1-SYSTEM 0-NONSYSTEM

         BNO   CHKSTMS                 *

         MVC   MSGISCOP,=CL7'SYSTEM '  *

         B     OUTMSGI                 *GO STACK RECORD

CHKSTMS  TM    RIBSCOPE,RIBSYSS        *1-SYSTEMS 0-NONSYSTEMS

         BNO   CHKSTEP                 *

         MVC   MSGISCOP,=CL7'SYSTEMS'  *

         B     OUTMSGI                 *GO STACK RECORD

CHKSTEP  TM    RIBSCOPE,RIBSTEP        *1-STEP 0-NONSTEP

         BNO   CHKGLBL                 *

         MVC   MSGISCOP,=CL7'STEP   '  *

         B     OUTMSGI                 *GO STACK RECORD

CHKGLBL  TM    RIBSCOPE,RIBGLBL        *1-GLOBAL 0-NONGLOBAL

         BNO   OUTMSGI                 *GO STACK RECORD

         MVC   MSGISCOP,=CL7'GLOBAL '  *

OUTMSGI  LA    R1,MSGI                 *R1 -->A(INFO MESSAGE)

         LA    R0,MSGILEN              *R0 -->L(INFO MESSAGE)

         BAS   R14,@STACK              *STACK IT

         L     R6,RIBNRIBE             *NO. OF RIBE FOR RIB IN AREA

RIBELOOP DS    0H                      *

         USING RIBE,R4                 *MAP RIBE

         MVC   MSGUNAM,RIBEJBNM        *STORE USER NAME IN RECORD

         TM    RIBESFLG,RIBESTAT       *0 - WAITING, 1 - OWNER

         BO    OWNER                   *

         MVC   MSGUOWN,=CL4'WAIT'      *

         B     CHKUSE                  *

OWNER    MVC   MSGUOWN,=CL4'OWNS'      *

CHKUSE   TM    RIBERFLG,RIBETYPE       *0 = EXLUSIVE, 1 = SHARED

         BO    SHARED                  *

         MVC   MSGUDISP,=CL9'EXCLUSIVE' *

         B     OUTMSGU                  *

SHARED   MVC   MSGUDISP,=CL9'SHARED   ' *

OUTMSGU  LA    R1,MSGU                 *R1 -->A(USER RECORD)

         LA    R0,MSGULEN              *R0 -->L(USER RECORD)

         BAS   R14,@STACK              *STACK IT

         AH    R4,TEMP2                *SKIP TO END OF RIBE

         BCT   R6,RIBELOOP             *LOOP IF MORE RIBE FOR THIS RIB

         LR    R2,R4                   *SET ADDRESS OF NEXT RIB

         BCT   R3,RIBLOOP              *LOOP IF MORE RIB IN AREA

         L     R15,ENQRC               *GET GQSCAN RC

         CH    R15,=H'8'               *MORE DATA TO PROCESS ?

         BE    CONT                    *YES - LOOP ROUND

         B     SCANOK                  *ELSE GO TO EXIT ROUTINE

*        SET ENQ/DEQ RETURN CODE AS 'RC' VARIABLE &

*        FUNCTION RESULT.

ENQOK    DS    0H

         L     R15,ENQRC               *RETRIEVE ENQ/DEQ RETURN CODE

         LTR   R15,R15                 *IS IT ZERO?

         BNZ   CONVERT                 *NO - GET RC FROM AREA

         MVC   RETCODE(2),=CL2'00'     *ELSE SET RC AS '00'

CONVERT  DS    0H                      *FORMAT RETURN CODE

         LA    R15,3(,R15)             *ADDRESS RC BYTE

         XR    R1,R1                   *BLANK WORK REG

         ICM   R1,1,0(R15)             *GET RC BYTE

         CVD   R1,PTEMP                *CONVERT TO PACKED

         MVC   EDWK,=X'40212020'       *SET EDIT MASK

         ED    EDWK,PTEMP+6            *CONVERT TO CHARACTER

         MVC   RETCODE(2),EDWK+2       *SAVE TO RETCODE AREA

         B     SETRC                   *AND GO TO IRXEXCOM

*        SET GQSCAN RETURN CODE AS 'RC' VARIABLE &

*        FUNCTION RESULT.

SCANOK   DS    0H

         L     R15,ENQRC               *RETRIEVE GQSCAN RETURN CODE

         CVD   R15,PTEMP               *CONVERT TO PACKED

         MVC   EDWK,=X'40212020'       *SET EDIT MASK

         ED    EDWK,PTEMP+6            *COVERT TO CHARACTER

         MVC   RETCODE(2),EDWK+2       *SAVE TO RETCODE AREA

*        INITIALIZE IRXEXCOM PARAMETER AREA

SETRC    DS    0H

         LA    R0,COMID                *R0 --> A(IRXEXCOM ID)

         ST    R0,COMAREA              *SAVE ADDRESS

         LA    R0,COMDUMMY             *R0 --> NOT USED PARM

         ST    R0,COMAREA+4            *SAVE ADDRESS

         ST    R0,COMAREA+8            *AND AGAIN (PARM2&3 MUST BE SAME)

         LA    R0,COMSHVB              *R0 --> A(SHVBLOCK AREA)

         ST    R0,COMAREA+12           *SAVE ADDRESS

         LA    R0,COMRET               *R0 --> A(RETURN CODE AREA)

         ST    R0,COMAREA+16           *SAVE ADDRESS

         OI    COMAREA+16,X'80'        *SET HIGH BIT ON FOR LIST END

         MVC   COMID,=CL8'IRXEXCOM'    *SET EYECATCHER

*        BUILD IRXEXCOM PARAMETERS

         ST    R10,COMRET              *STORE ENVBLOCK ADDRESS (R10)

         DROP  R8

         LA    R8,COMSHVB              *R8 --> A(SHVBLOCK AREA)

         USING SHVBLOCK,R8             *MAP

         XC    COMSHVB(SHVBLEN),COMSHVB *INITIALIZE SHVBLOCK

         XC    SHVNEXT,SHVNEXT          *RESET POINTER

         MVI   SHVCODE,C'S'            *SET FUNCTION CODE - 'SET'

         LA    R0,=C'RC'               *R0 --> A(VARIABLE NAME

         ST    R0,SHVNAMA              *STORE IN SHVBLOCK

         MVC   SHVNAML,=A(2)           *STORE NAME LENGTH

         LA    R0,RETCODE              *R0 --> A(VARIABLE VALUE)

         ST    R0,SHVVALA              *STORE IN SHVBLOCK

         MVC   SHVVALL,=A(L'RETCODE)   *STORE VALUE LENGTH

*        INVOKE IRXEXCOM TO SET VARIABLE

         LR    R0,R10                  *R0 --> A(ENVBLOCK)

         LA    R1,COMAREA              *R1 --> A(PARM ADDR LIST)

         L     R15,IRXEXCOM            *R15 --> AIRXEXCOM) FROM IRXEXTE

         BALR  R14,R15                 *CALL ROUTINE

         LTR   R15,R15                 *SET OK ?

         BZ    SETOK                   *--> YES? - SKIP ABEND

         LA    R1,=CL4'IRXC'           *SET ERROR INDICATOR

         SLR   R0,R0                   *CLEAR R0

         EX    R0,*                    *FORCE DIAGNOSTIC ABEND

*        SET RETURN CODE VALUE AS FUNCTION RESULT

SETOK    EQU   *

         DROP  R8                      *DROP ARGTABLE MAP

         L     R8,EFPLEVAL

         L     R8,0(R8)                *R8 --> A(EVALUATION BLOCK)

         USING EVALBLOCK,R8            *MAP IT

         MVC   EVALBLOCK_EVLEN,=A(L'RETCODE)       *SET LENGTH

         MVC   EVALBLOCK_EVDATA(L'RETCODE),RETCODE *SET VALUE

         XR    R15,R15                 *ZERO REXX RETURN CODE

         B     RETURN                  *AND RETURN TO CALLER

*        IF FUNCTION ERROR -

*        ISSUE ERROR MESSAGE WITH IRXSAY

*        AND SET RETURN CODE AS 40 TO FLAG INVALID FUNCTION CALL.

         TITLE  'ERROR MESSAGES'

NOARG1   DS    0H

         LA    R1,=C'IRX0000I Parameter 1 missing or blank'

         LA    R0,37

         B     ERROR

ARG1ERR  DS    0H

         LA    R1,=C'IRX0000I Parameter 1 not ENQ/DEQ/WHO'

         LA    R0,34

         B     ERROR

NOARG2   DS    0H

         LA    R1,=C'IRX0000I Parameter 2 missing or blank'

         LA    R0,37

         B     ERROR

ARG2ERR  DS    0H

         LA    R1,=C'IRX0000I Parameter 2 > 8 characters'

         LA    R0,35

         B     ERROR

NOARG3   DS    0H

         LA    R1,=C'IRX0000I Parameter 3 missing or blank'

         LA    R0,37

         B     ERROR

ARG3ERR  DS    0H

         LA    R1,=C'IRX0000I Parameter 3 > 255 characters'

         LA    R0,37

         B     ERROR

ARG4ERR1 DS    0H

         LA    R1,=C'IRX0000I Parameter 4 not E or S'

         LA    R0,31

         B     ERROR

ARG4ERR2 DS    0H

         LA    R1,=C'IRX0000I Parameter 4 not G or blank'

         LA    R0,35

         B     ERROR

***      SET FUNCTION RESULT                                        ***

ERROR    DS    0H

         BAS   R14,@SAY  *SAY Error message

         LA    R15,40    *SET RC=40 TO INDICATE INVALID FUNCTION CALL

         B     RETURN    *AND RETURN TO CALLER

***      RETURN TO CALLER                                           ***

RETURN   LR    R1,R13                  *R1 --> A(DYNAMIC AREA)

         L     R13,4(R13)              *RESTORED BACK POINTER

         LR    R2,R15                  *SAVE R15 AROUND FREEMAIN

         FREEMAIN RU,A=(R1),LV=DYNLEN  *RELEASE DYNAMIC STORAGE

         LR    R15,R2                  *RESTORE R15 FOR RETURN

         RETURN (14,12),RC=(15)        *RETURN TO CALLER

***      REXX ROUTINE INTERFACES                                    ***

         TITLE  'REXX STACK ROUTINE (IRXSTK)'

***      INTERFACE TO STACK ROUTINE.                                ***

***       ON ENTRY:                                                 ***

***         R0 - L(BUFFER)                                          ***

***         R1 - A(BUFFER)                                          ***

***         R14 - RETURN ADDRESS                                    ***

@STACK   DS    0H

         ST    R14,STKSAV              *SAVE RETURN ADDRESS

         ST    R1,STKP2                *PUT A(RECORD) IN FULLWORD

         ST    R0,STKP3                *PASS RECORD LENGTH

         LA    R0,STKP1                *INIT PLIST POINTERS

         ST    R0,STKPLIST

         LA    R0,STKP2

         ST    R0,STKPLIST+4

         LA    R0,STKP3

         ST    R0,STKPLIST+8

         LA    R0,STKP4

         ST    R0,STKPLIST+12

         LA    R0,STKP5

         ST    R0,STKPLIST+16

         OI    STKPLIST+16,X'80'       *FLAG END OF LIST

         MVC   STKP1,=CL8'QUEUE'       *SET FUNCTION

         LA    R0,FWD                  *R0 -->A(RETURN CODE AREA)

         ST    R0,STKP4                *PASS A(RETURN CODE)

         ST    R10,STKP5               *PASS A(ENVBLOCK)

         LR    R0,R10                  *R0-->A(ENV BLOCK)

         LA    R1,STKPLIST             *R1-->A(PARAMETER LIST)

         L     R15,IRXSTK              *R15-->A(IRXSAY ROUTINE)

         BALR  R14,R15                 *ISSUE STACK

         LTR   R15,R15                 *STACK OK?

         BZ    @STKOK                  *YES

         LA    R1,=C'IRXSTK'           *R1-->INDICATE STACK ROUTINE

         EX    R0,*                    *FORCE DIAGNOSTIC ABEND

@STKOK   EQU   *

         L     R14,STKSAV              *R14-->RESTORE RETURN ADDRESS

         BR    R14                     *RETURN TO CALLER

         TITLE  'REXX SAY ROUTINE (IRXSAY)'

***      INTERFACE TO SAY ROUTINE.                                  ***

***       ON ENTRY:                                                 ***

***         R0 - L(BUFFER)                                          ***

***         R1 - A(BUFFER)                                          ***

***         R14 - RETURN ADDRESS                                    ***

@SAY     DS    0H

         ST    R14,SAYSAV              *SAVE RETURN ADDRESS

         ST    R1,SAYP2                *PUT A(RECORD) IN FULLWORD

         ST    R0,SAYP3                *PASS RECORD LENGTH

         LA    R0,SAYP1                *INIT PLIST POINTERS

         ST    R0,SAYPLIST

         LA    R0,SAYP2

         ST    R0,SAYPLIST+4

         LA    R0,SAYP3

         ST    R0,SAYPLIST+8

         LA    R0,SAYP4

         ST    R0,SAYPLIST+12

         LA    R0,SAYP5

         ST    R0,SAYPLIST+16

         OI    SAYPLIST+16,X'80'       *FLAG END OF LIST

         MVC   SAYP1,=CL8'WRITE'       *SET FUNCTION

         ST    R10,SAYP4               *PASS A(ENV BLOCK)

         LA    R0,FWD                  *R0-->A(RETURN CODE AREA)

         ST    R0,SAYP5                *PASS A(RETURN CODE)

         LR    R0,R10                  *R0--> A(ENV BLOCK)

         LA    R1,SAYPLIST             *R1--> A(PARAMETER LIST)

         L     R15,IRXSAY              *R15--> A(USERID ROUTINE)

         BALR  R14,R15                 *ISSUE SAY

         LTR   R15,R15                 *SAY OK?

         BZ    @SAYOK                  *YES

         LA    R1,=C'IRXSAY'           *R1 INDICATE SAY ROUTINE

         EX    R0,*                    *FORCE DIAGNOSTIC ABEND

@SAYOK   EQU   * *

         L     R14,SAYSAV              *R14--> RETURN ADDRESS

         BR    R14                     *RETURN TO CALLER

***      WORKING STORAGE ETC.                                       ***

         TITLE  'ENQ/DEQ IN-LINE PARAMETER LISTS'

* ENQUEUE

ENQPLST  ENQ   (0,0,S,0,SYSTEMS),RET=USE,MF=L

ENQPL    EQU   *-ENQPLST

* ENQUEUE TEST

TSTPLST  ENQ   (0,0,S,0,SYSTEMS),RET=TEST,MF=L

TSTPL    EQU   *-TSTPLST

* DEQUEUE

DEQPLST  DEQ   (0,0,0,SYSTEMS),RET=HAVE,MF=L

DEQPL    EQU   *-DEQPLST

* SCAN

SCANPLST GQSCAN MF=L

SCANPL   EQU   *-SCANPLST

         TITLE  'CONSTANTS'

EDMASK    DC    XL9'F02120202020202020'

MESSAGEI  DS    0CL63

          DC    C'I'

          DC    C'OWNERS='

          DC    CL4' '

          DC    C',WAIT EXCLUSIVE='

          DC    CL4' '

          DC    C',WAIT SHARED='

          DC    CL4' '

          DC    C',SCOPE='

          DC    CL7' '

MESSAGEU  DS    0CL24

          DC    C'U'

          DC    CL23' '

MESSAGER  DS    0CL256

          DC    C'R'

          DC    CL255' '

MESSAGEQ  DS    0CL9

          DC    C'Q'

          DC    CL8' '

         TITLE  'WORKING STORAGE / DSECTS'

         LTORG

DYNAM    DSECT                         *DYNAMIC WORK AREA STORAGE

SAVEAREA DS    9D                      *REG SAVE AREA

FCODE    DS    CL3                     *FUNCTION CODE - 'ENQ'/'DEQ'

QNAME    DS    CL8                     *ENQ MAJOR NAME

RNAME    DS    CL255                   *ENQ MINOR NAME

RNAMEL   DS    H                       *ENQ MINOR NAME LENGTH

SYSOPT   DS    C                       *EXCLUSIVE/SHARED INDICATOR

GENOPT   DS    C                       *GENERIC SCAN INDICATOR

ENQRC    DS    F                       *ENQ/DEQ RETURN CODE

RETCODE  DS    CL2                     *OUTPUT RETURN CODE (CHARACTER)

EDWK     DS    CL8                     *EDIT WORK AREA

EDWORK   DS    XL9                     *EDIT WORK AREA FOR GQSCAN

PTEMP    DS    PL8                     *PACKED DECIMAL WORK AREA

* ENQUEUE/DEQUEUE REMOTE PARAMETER LISTS

ENQPARM  ENQ   (0,0,E,0,SYSTEM),RET=USE,MF=L

TSTPARM  ENQ   (0,0,E,0,SYSTEM),RET=TEST,MF=L

DEQPARM  DEQ   (0,0,0,SYSTEM),RET=HAVE,MF=L

SCANPARM GQSCAN MF=L

***      IRXSTK PARAMETER AREA                                      ***

FWD      DS    A                       *FULL WORD WORK AREA

STKSAV   DS    F                       *R14 SAVE AREA

STKPLIST DS    6A                      *PLIST FOR IRXSTK

STKP1    DS    CL8                     *IRXSTK - FUNCTION

STKP2    DS    A                       *IRXSTK - A(RECADDR)

STKP3    DS    A                       *IRXSTK - L(RECORD)

STKP4    DS    A                       *IRXSTK - A(4-BYTE AREA FOR RC)

STKP5    DS    A                       *IRXSTK - A(ENVBLOCK)

STKP6    DS    A                       *IRXSTK - A(4-BYTE AREA FOR RC)

***      IRXSAY PARAMETER AREA                                      ***

SAYSAV   DS    F                       *SAY ROUTINE RETURN ADDRESS

SAYPLIST DS    5A                      *PLIST FOR IRXSAY

SAYP1    DS    CL8                     *IRXSAY - FUNCTION

SAYP2    DS    A                       *IRXSAY - A(->BUFFER)

SAYP3    DS    A                       *IRXSAY - L(BUFFER)

SAYP4    DS    A                       *IRXSAY - A(ENVBLOCK)

SAYP5    DS    A                       *IRXSAY - A(4-BYTE AREA FOR RC)

***      IRXEXCOM PARAMETER AREA                                    ***

COMAREA  DS    5A                      *PARAMETER ADDRESS LIST

COMID    DS    CL8                     *IRXEXCOM ID - C'IRXEXCOM'

COMDUMMY DS    A                       *NOT USED

COMSHVB  DS    (SHVBLEN)X        *IRXEXCOM SHVBLOCK (LENGTH FROM DSECT)

COMRET   DS    A                       *IRXECOM RC

         DS    0D

***      GQSCAN RESULT MESSAGES                                     ***

MSGI      DS    0C

          DS    C

          DS    CL7

MSGIOWN   DS    CL4

          DS    CL16

MSGIEXC   DS    CL4

          DS    CL13

MSGISHR   DS    CL4

          DS    CL7

MSGISCOP  DS    CL7

MSGILEN   EQU   *-MSGI

MSGU      DS    0C

          DS    C

MSGUNAM   DS    CL8

          DS    C

MSGUOWN   DS    CL4

          DS    C

MSGUDISP  DS    CL9

MSGULEN   EQU   *-MSGU

MSGR      DS    CL256

MSGRLEN   EQU   *-MSGR

MSGQ      DS    CL9

MSGQLEN   EQU   *-MSGQ

***      GQSCAN PARAMETERS                                          ***

TOKEN    DS    F                       *RESTART TOKEN

TEMP1    DS    H                       *RIB FIXED LENGTH

TEMP2    DS    H                       *RIBE LENGTH

AREA     DS    CL9000                  *RIB AREA

DYNLEN   EQU   *-DYNAM

***      REQUIRED DSECTS FOR REXX FUNCTIONS                         ***

         IRXEFPL

         IRXARGTB

         IRXEVALB

         IRXENVB

         IRXEXTE

         IRXSHVB

         ISGRIB

         END

/*

//LKED.SYSLMOD DD DSN=your.load.library,DISP=SHR,UNIT=

//LKED.SYSIN DD *

 ENTRY SYSGRS

 NAME SYSGRS(R)

/*

//





Systems Programmer (UK)                                            c Xephon 1995



