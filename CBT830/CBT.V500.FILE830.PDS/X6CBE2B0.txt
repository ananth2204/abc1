Multiple assembly and link edit CLIST

The accompanying CLIST was used for the purpose of automating the
process of assembling and link editing over a hundred new FCBs that
were needed for a new COM unit.  The alternative was to edit and
submit individual jobs manually for each of the FCBs needed.  The
process could not be handled by simply creating a JCL procedure and
invoking it many times in the same job because for each assembly a
source change was also required.  Parameterising the required
source changes within the CLIST and assigning the values based on
the contents of an existing text file seemed the easiest approach.
While the reader may not encounter the same requirement, the
approach may be valuable in other situations where there is a need
to loop through many iterations of the execution of a utility or some
other program.  The following explanatory comments should clarify
the processing:

1   The END (ENDDO) keyword was needed on the CONTROL
statement to prevent the END command within the embedded edit
session from being interpreted as the end of the DO WHILE loop.

2   The SYSLIN intermediate file between the assembler and
linkage editor was a pre-allocated 80 by 3120 file, which was
reused during each assemble/link edit iteration.

3   The process was driven by a text file that had one record for
each FCB that needed to be generated.  As each record was read from
the INFILE file, one assembly and link edit was run.  Each record
contained the four-character name that would become the last four
characters of the FCB2 name in the output SYSLMOD load library.
Paired with the four-character name on each record was an eight-
character name that needed to be included in the source code input to
the assembly.

4   The &FCB variable gets the four-character name from the input
record and becomes part of the CSECT name in the source code as
well as the NAME record inserted at the end of the text deck output
of the assembler before going on to the link edit.


5   The &JOBSET variable receives the eight-character name that
is inserted as a constant in the source code.

6   The source file input to the assembler is pre-allocated and
reused for each cycle.

7   The process stops at the end of file on the INFILE file.  It took
about half an hour to generate 142 FCBs using this CLIST on a
3090-200 under MVS/XA with TSO/E.

/*--------------------------------------------------------------*/
/* This CLIST invokes the assembler and linkage editor for each */
/* fcb named in dataset TS21JJC.FCB.XREF                        */
/* format of each input record is: jjjjjjjj ffff                */
/* starting in column 1, jjjjjjjj is the Kodak jobset name      */
/* and ffff is the FCB name to become FCB2ffff in the output    */
/* data set: SYS1.KODAK.IMAGELIB.                               */
/*--------------------------------------------------------------*/
PROC 0
CONTROL NOMSG NOLIST CAPS NOSYMLIST NOCONLIST END(ENDO)
/*--------------------------------------------------------------*/
/* Allocate files for asm and lked                              */
/*--------------------------------------------------------------*/
FREE F(SYSLIB,SYSUT1,SYSPUNCH,SYSPRINT,SYSLIN,SYSIN,SYSLMOD,INFILE)
ALLOC F(SYSLIB) DSN('SYS1.MACLIB') SHR
ALLOC F(SYSUT1) UNIT(TEMPDA) SPACE(5,1) CYL NEW
ALLOC F(SYSPUNCH) DUMMY
ALLOC F(SYSPRINT) SYSOUT(X)
ALLOC F(SYSLIN) DSN(TEMP.SYSLIN) OLD
ALLOC F(SYSIN) DSN(FCB.SOURCE) SHR
ALLOC F(SYSLMOD) DSN('SYS1.KODAK.IMAGELIB') SHR
/*--------------------------------------------------------------*/
/* Allocate and open input file and prime with 1st record read  */
/*--------------------------------------------------------------*/
ALLOC F(INFILE) DSN(FCB.XREF) SHR
OPENFILE INFILE INPUT
GETFILE INFILE
DO WHILE &LASTCC = 0     /* DO WHILE NOT END OF FILE */
SET FCB = &SUBSTR(10:13,&INFILE)
SET JOBSET = &SUBSTR(1:8,&INFILE)
/*--------------------------------------------------------------*/
/* Edit fcb source code to plug in fcb and jobset names         */
/*--------------------------------------------------------------*/
EDIT 'TS21JJC.FCB.SOURCE' OLD ASM NONUM EMODE
TOP
DEL * 100
IN FCB2&FCB CSECT
IN          DC    X'00'         THIS IS NOT A DEFAULT IMAGE
IN          DC    AL1(87)       LENGTH OF FCB IMAGE
IN          DC    X'01'         CHANNEL 1 / LINE 1
IN          DC    XL63'00'      LINES 2-64 HAVE NO CHANNEL VALUES
IN          DC    X'FE'         LIBRARY ACTION INDICATOR
IN          DC    X'04'         ACTION CODE: RUN JOBSET
IN          DC    X'02'         01 = TESTLIB, 02 = PMELIB, 03 = IPELIB
IN          DC    CL8'&JOBSET'  JOBSET NAME
IN          DC    XL10'00'      RESERVED
IN          DC    X'10'         END OF FCB
IN          END
END SAVE
/*--------------------------------------------------------------*/
/* Execute the assembler
/*--------------------------------------------------------------*/
CALL 'SYS1.LINKLIB(IEV90)' 'OBJECT,NODECK,XREF(SHORT)'
/*--------------------------------------------------------------*/
/* Stick name card at end of text deck                          */
/*--------------------------------------------------------------*/
EDIT 'TS21JJC.TEMP.SYSLIN' OLD DATA EMODE NONUM
BOTTOM
IN  NAME  FCB2&FCB(R)
END SAVE
/*--------------------------------------------------------------*/
/* Execute the linkage editor
/*--------------------------------------------------------------*/
CALL 'SYS1.LINKLIB(HEWLH096)' 'NE,OL,LIST,NCAL'
GETFILE INFILE
ENDO /* END OF DOWHILE LOOP */
CLOSFILE INFILE
FREE F(SYSLIB,SYSUT1,SYSPUNCH,SYSPRINT,SYSLIN,SYSIN,SYSLMOD,INFILE)
EXIT


John Cornman
Senior Systems Programmer
Key Service Corporation (USA) â‚¬ Xephon 1990
