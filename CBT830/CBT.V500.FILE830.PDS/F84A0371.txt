SYSLOG utilities

Sample JCL

//jobname  JOB  insert your installation job card here ...
//*
//STEP0010 EXEC PGM=IRXJCL,PARM='LOGXTRAC',REGION=4M
//FILEIN   DD DSN=your.syslog.backup.dataset,DISP=SHR
//FILEOUT  DD DSN=&&SORTIN,DISP=(,PASS),
//         SPACE=(CYL,(60,15)),
//         UNIT=xxxx,
//         VOL=SER=xxxxxx,
//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSOUT   DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSEXEC  DD DSN=your.rexx.library,DISP=SHR
//*
//*** REPLACE THE EXEC PGM= with your sort program name
//*
//STEP0020 EXEC  PGM=ICEMAN
//SYSOUT   DD  SYSOUT=*
//SORTIN   DD  DSN=&&SORTIN,DISP=(OLD,PASS)
//SORTOUT  DD  DSN=&&SORTOUT,DISP=(,PASS),
//         SPACE=(CYL,(60,15)),
//         UNIT=xxxx,
//         VOL=SER=xxxxxx,
//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)
//SORTWK01 DD    UNIT=SYSDA,SPACE=(CYL,(10,5))
//SORTWK02 DD    UNIT=SYSDA,SPACE=(CYL,(10,5))
//SORTDIAG DD    SYSOUT=*
//SYSIN    DD    *
 SORT     FIELDS=(11,10,CH,A)
/*
//STEP0030 EXEC PGM=IRXJCL,PARM='LOGANAL',REGION=4M
//FILEIN   DD DSN=&&SORTOUT,DISP=OLD
//FILEOUT  DD SYSOUT=A
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSOUT   DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSEXEC  DD DSN=your.rexx.library,DISP=SHR
//

REXX EXEC LOGXTRAC (extract SYSLOG records)

/*Rexx*/
/* read FILEIN dd into stem variables LINE. - LINE.0 holds # lines   */
/* Note:- FILEIN is allocated in JCL                                 */
"EXECIO * DISKR FILEIN (STEM LINE. FINIS"
/* initialize output line counter                                    */
count = 0
/* now loop round processing each line                               */
do cnt1 = 1 to line.0
/* split out line type character and command indicator               */
  parse var line.cnt1 1 linetype 2 ind 3 .
/* filter out secondary lines/multiple message lines                 */
  if pos(linetype,'NWMOX') = 0 then iterate
/* filter out commands & command result lines                        */
  if ind ¬= ' ' then iterate
/* Check if message is WTO or WTOR & allow for reply id              */
/* then parse out the MPF/EXIT flag string & message id              */
  if linetype ¬= 'W' then
    parse var line.cnt1 . 46 mpfflags msg .
  else
    parse var line.cnt1 . 46 mpfflags . msg .
/* Ignore JES2 command entries - only allow the $HASP* messages      */
  if left(msg,1) = '$' & left(msg,5) ¬= '$HASP' then iterate
/* If here, it's a valid record, so set output line                  */
  count = count + 1
  outline.count = linetype||' 'mpfflags||' 'msg
end
/* All done, so output records held in outline. stem variables       */
"EXECIO "count" DISKW FILEOUT (STEM OUTLINE. FINIS"
/* That's all folks!                                                 */
exit

REXX EXEC LOGANAL (analyse output)

/*Rexx*/
/* Initialize counters                                               */
totsup = 0
totcnt = 0
count = 0
/* Queue header lines for output                                     */
queue 'MPF REPORT 'date(e) time()
sep = '+----------+-------------------+----------+--------'||,
'+--------+--------+--------+'
queue sep
queue '+MESSAGE   +TYPE               +HCPY  ONLY+SSYS    '||,
'+EXIT    +MPF     +COUNT   +'
queue sep
/* read FILEIN dd into stem variables LINE. - LINE.0 holds # lines   */
/* Note:- FILEIN is allocated in JCL                                 */
"EXECIO * DISKR FILEIN (STEM LINE. FINIS"
/* initialize line type variables                                    */
type.N = 'SINGLE-LINE MESSAGE'
type.W = 'WTOR MESSAGE       '
type.M = 'MULTI-LINE MESSAGE '
type.O = 'LOG COMMAND ENTRY  '
type.X = 'NON-HCPY/LOG ENTRY '
/* now loop round processing lines                                   */
do cnt1 = 1 to line.0
/* split out line type, MPF/EXIT flag string, and message id         */
  parse var line.cnt1 linetype mpfflags msg
/* Test if message already processed                                 */
  if symbol('count.msg') ¬= 'VAR' then do
/* No? .. initialize counters for this message                       */
    count = count + 1                 /* increment overall count     */
    msg.count = msg                   /* store message id           */
    count.msg = 1                     /* initialize message count    */
    ssup.msg = 0                      /* subsystem count             */
    xsup.msg = 0                      /* wtoexit count               */
    msup.msg = 0                      /* MPF count                   */
    hcpy.msg = 0                      /* hardcopy only count         */
    nosup.msg = 0                     /* not suppressed count        */
    type.msg = type.linetype          /* determine line type         */
  end
  else
/* Yes .. increment counters                                         */
    count.msg = count.msg + 1         /* increment message count     */
/* split MPF flag string into individual bytes                       */
  parse var mpfflags 1 flg1 3 flg2 5 flg3 7 flg4
/* Now test each bit of relevant flags & increment counters          */
  select
    when bitand(flg2,"08") = "08" | ,
         bitand(flg3,"02") = "02" then hcpy.msg = hcpy.msg + 1
    when bitand(flg4,"04") = "04" then ssup.msg = ssup.msg + 1
    when bitand(flg4,"02") = "02" then xsup.msg = xsup.msg + 1
    when bitand(flg4,"01") = "01" then msup.msg = msup.msg + 1
    otherwise nosup.msg = nosup.msg + 1
  end
end
/* All lines processed, now queue output lines with counts           */
do cnt2 = 1 to count
  msgid = msg.cnt2
  line = '|'||left(msgid,10) ||'|'||,
         left(type.msgid,19) ||'|'||,
         left(ssup.msgid,8) ||'|'||,
         left(xsup.msgid,8) ||'|'||,
         left(msup.msgid,8) ||'|'||,
         left(hcpy.msgid,10) ||'|'||,
         left(count.msgid,8) ||'|'
  queue line
/* Calculate totals                                                  */
  totsup = totsup+ssup.msgid+xsup.msgid+msup.msgid+hcpy.msgid
  totcnt = totcnt+count.msgid
end
/* Calculate percentage & queue totals line                          */
persup = (totsup/totcnt)*100
queue sep
queue '+Total supp='totsup', total messages ='totcnt',%Supp='persup
/* Now output the lot..                                              */
"EXECIO "queued()" DISKW FILEOUT (FINIS"
exit

      ;TSO HCLMAP

&HCLCSRN = .CURSOR
&HCLCSRP = .CSRPOS
&HCLBUF = &ZDATA
VPUT (HCLCSRN HCLCSRP HCLBUF) SHARED

REXX EXEC HCLMAP

/*REXX*/
/* call initialization routine                                       */
call init
/* retrieve panel variables                                          */
Address ISPEXEC
"VGET (HCLCSRP HCLCSRN HCLBUF ZSCREENW) ASIS"
/* now extract the data line from the screen buffer                  */
/* extract line that cursor is on                                    */
cursor_row = (hclcsrp-1) % zscreenw
line = substr(curarea,((cursor_row*zscreenw)+1),zscreenw)
/* now parse out all the details ...                                 */
parse var line rec 2 req 3 rtecd +7 11 sysid +8 20 jdat +5 26 ,
tim +11 38 cons +8 38 . +5 mmid +3 47 mpfflg1 +2 mpfflg2 ,
+2 mpfflg3 +2 mpfflg4 +2 data
/* now set up panel variables from line data ...                     */
hrcd = data                      /* message text                     */
htyp = type.rec                  /* line type                        */
if req ¬= ' ' then               /* is it a command/response?        */
  hreq = type.req                /* yes - set type                   */
if rec = 'S' then signal pandisp /* Continuation line - skip rest    */
if rtecd ¬= ' ' then             /* is there a route code?           */
  hrte = x2b(rtecd)              /* .. then translate to binary      */
hsys = sysid                     /* MVS system id                    */
hdat = jdat                      /* date (julian)                    */
htim = tim                       /* time                             */
select                           /* check for multi-line messages    */
  when rec = 'L' | rec = 'D' | rec = 'E' then /* multi-line?         */
    hmi = mmid                   /* .. then set identifier           */
  otherwise                      /* if not ...                       */
    hcons = cons                 /* .. then set job/stc/tsu/console  */
end
/* mpf flag bytes - translate to binary for display                  */
hflg1 = x2b(mpfflg1)
hflg2 = x2b(mpfflg2)
hflg3 = x2b(mpfflg3)
hflg4 = x2b(mpfflg4)
/* now display panel in pop-up window                                */
pandisp:
"ISPEXEC ADDPOP"
"ISPEXEC DISPLAY PANEL(HCLMAP)"
"ISPEXEC REMPOP"
/* and that's all folks!                                             */
exit
/* subroutine 'init' - initialize vars & message type descriptions   */
init:
type.N = 'SINGLE-LINE WTO'
type.W = 'SINGLE-LINE WTOR'
type.M = 'FIRST LINE OF MULTI-LINE MESSAGE'
type.O = 'LOG COMMAND ENTRY  '
type.X = 'NON HARDCOPY/LOG COMMAND ENTRY'
type.S = 'Continuation line'
type.L = 'Label line of multi-line message'
type.D = 'Data line of multi-line message'
type.E = 'End/data line of multi-line message'
type.C = 'Operator command'
type.R = 'Command response'
type.I = 'Internal/subsystem issued command'
hrcd = ''
htyp = ''
hreq = ''
hrte = ''
hsys = ''
hdat = ''
htim = ''
hcons = ''
hmi = ''
hflg1 = ''
hflg2 = ''
hflg3 = ''
hflg4 = ''
return

PANEL HCLMAP

)PANEL KEYLIST(ISPSNAB)
)ATTR DEFAULT(%+_)
       %   TYPE(TEXT) INTENS(HIGH)
       +   TYPE(TEXT) INTENS(LOW)
       _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
       @   AREA(SCRL)
)BODY WINDOW(65,20) EXPAND(##)
% Record ..........>+&hrcd
% Record Type .....>+&htyp
% Request Type ....>+&hreq
% Route code ......>+&hrte
+                   %0000000001111111|-RESERVED-|
+                   %1234567890123456|          |
% System id .>+&hsys    %Date ..>+&hdat % Time ..>+&htim       +
% Console/Job .....>+&hcons   %MLWTO id >+&hmi+
+-#-#-
% User exit/MPF request flags (Use UP/DOWN keys to see more):-+
@MPFAREA                                                    @
@                                                           @
@                                                           @
@                                                           @
@                                                           @
@                                                           @
@                                                           @
@                                                           @
@                                                           @
@                                                           @
)AREA MPFAREA
+&hflg1  % Flag byte 1+
%1.......+ "Message text was changed"
%.1......+ "Routing codes were changed"
%..1.....+ "Descriptor codes were changed"
%...1....+ "Message queued to an active console"
%....1...+ "Message queued to a console unconditionally"
%.....1..+ "Message queued by routing codes only"
%......1.+ "Console id changed"
%.......1+ "Minor lines processed"
+&hflg2  % Flag byte 2+
%1.......+ "Message deleted"
%.1......+ "MPF suppression overridden"
%..1.....+ "Message forced to hardcopy"
%...1....+ "Message bypassed hardcopy"
%....1...+ "Message forced to hardcopy only"
%.....1..+ "Message broadcast to active consoles"
%......1.+ "Broadcasting of message turned off"
%.......1+ "Message not retained due to user exit"
+&hflg3  % Flag byte 3+
%1.......+ "Message retained due to user exit"
%.1......+ "Change to retrieval key"
%..1.....+ "Change the 4-byte console id"
%...1....+ "Change the message type flags"
%....1...+ "Automation not required"
%.....1..+ "Automation required and/or automation token"
%......1.+ "Message issued as hardcopy only"
%.......1+ "Message was a UD message"
+&hflg4  % Flag byte 4+
%1.......+ "Message not serviced by a WTOEXIT"
%.1......+ "ESTAE error in IEAVX600"
%..1.....+ "Message not serviced due to incompatible request"
%...1....+ "Automation requested"
%....1...+ "Message not queued to any console"
%.....1..+ "Message suppressed by a subsystem"
%......1.+ "Message suppressed by a WTOEXIT"
%.......1+ "Message suppressed by MPF"
)INIT
&zwinttl = 'Hard-copy log record formatter'
)PROC
)END


Graham Taylor
Systems Programmer (UK)

