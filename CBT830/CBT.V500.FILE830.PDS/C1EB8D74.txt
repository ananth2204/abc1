REXX EXEC to convert Julian date

Introduction

While carrying out some development work using REXX at our
site, I needed to convert a Julian date from YYDDD into a
standard date format of DD/MM/YY. After some investigation, I
discovered that the REXX language does not provide a facility to
convert Julian dates into other date formats. Also, there has been a
lot of talk about how dates are going to perform in the year 2000,
especially Julian dates, and some IT professionals are predicting
the whole world of computers will come to a standstill just
because of incorrect dates.

With this in mind, I decided to write my own Julian date
conversion function in REXX, which would handle the move into
the 21st century, as well as fulfilling the development
requirements at our site.

The Function

The REXX program, called CONJDATE, can be invoked from
another REXX program as follows:

      dateout = CONJDATE(datein)

The variable datein is the input data and can be in the following
formats:

o      DDD - this will assume the current year

o      YYDDD - this will assume the current century

o      YYYYDDD - this will use YYYY as the year.

The variable dateout is the output data and will be in the format
DD/MM/YY, except in the case of datein being YYYYDDD, where
the output data will be in the format DD/MM/YYYY.

For example, if the current year is 1994, then:

      CONJDATE(060)     = 01/03/94
      CONJDATE(94060)   = 01/03/94
      CONJDATE(1994060) = 01/03/1994
      CONJDATE(92060)   = 29/02/92 (leap year)
      CONJDATE(96366)   = 31/12/96 (leap year)

Is it a Leap Year?

To determine whether or not a year is a leap year, the following
logic was used:

1      If the year ends in '00' (the turn of a century), then you must
divide the year by 400. If 400 divides into the year evenly, then it
is deemed a leap year.

2      If the year doesn't end in '00', then you must divide the year
by 4. If 4 divides into the year evenly, then it is deemed a leap
year.

CONJDATE SOURCE CODE

/*- REXX -----------------------------------------------------------*/
/*  Name      :  CONJDATE                                           */
/*  Function  :  Convert a Julian date to DD/MM/YY.                 */
/*               The following formats are accepted as input:       */
/*               DDD     - Assumes the current year.                */
/*               YYDDD   - Assumes the current century.             */
/*               YYYYDDD - Uses YYYY as the year. Note: The         */
/*                 output will be in the form DD/MM/YYYY            */
/*  To use    :  Call the function from another rexx program.       */
/*               Eg:  datein  = 94049                               */
/*                    dateout = CONJDATE(datein)                    */
/*------------------------------------------------------------------*/
trace
parse arg datein
MAINLINE:
   call VALIDATE
   call INIT
   call CHECK_LEAPYEAR
   if leapyear = 'yes' then           /*  Check for leap year    */
      call ASSIGN_LEAPYEAR_DAYS       /*  and assign appropriate */
   else                               /*  variables.             */
      do
         if days > 365 then
         do
            say 'ERROR: 'year' is not a leap year and cannot have'
            say '               days greater than 365.'
            EXIT
         end
         call ASSIGN_NORMAL_DAYS
      end
   do while found = 'no'              /*  Find out what month    */
      if days <= m.i then             /*  the 'days' field       */
         found = 'yes'                /*  falls within.          */
      else i = i + 1
   end
   if datein_len = 7 then             /*  Assign values to YY    */
      yy = year
   else yy = substr(year,3,2)
   mm = i                             /*  Assign values to MM    */
   if length(mm) = 1 then
      mm = 0||mm
   i  = i - 1                         /*  Assign values to DD    */
   dd = days - m.i
   if length(dd) = 1 then
      dd = 0||dd
   dateout = dd||'/'||mm||'/'||yy     /*  Concatenate values into */
                                      /*  dateout variable.       */
return dateout
EXIT
/*===================================================================*/
/*--- S U B R O U T I N E S ----- in alphabetical order -------------*/
/*===================================================================*/
/*-------------------------------------------------------------------*/
/*    ASSIGN LEAP YEAR VALUES.                                       */
/*    Load the month array with the number of days within the        */
/*    year that end each month.  Note m.i corresponds to the month.  */
/*    Eg  "m.3" = March                                              */
/*-------------------------------------------------------------------*/
ASSIGN_LEAPYEAR_DAYS:
   m.0  = 0                      /*   Start of Array       */
   m.1  = 31                     /*   End of January       */
   m.2  = 60                     /*   End of February      */
   m.3  = 91                     /*   End of March         */
   m.4  = 121                    /*   End of April         */
   m.5  = 152                    /*   End of May           */
   m.6  = 182                    /*   End of June          */
   m.7  = 213                    /*   End of July          */
   m.8  = 244                    /*   End of August        */
   m.9  = 274                    /*   End of September     */
   m.10 = 305                    /*   End of October       */
   m.11 = 335                    /*   End of November      */
   m.12 = 366                    /*   End of December      */
   m.13 = 999                    /*   End of Array         */
return
/*-------------------------------------------------------------------*/
/*    ASSIGN NORMAL YEAR VALUES.                                     */
/*    Load the month array with the number of days within the        */
/*    year that end each month.  Note m.i corresponds to the month.  */
/*    Eg  "m.3" = March                                              */
/*-------------------------------------------------------------------*/
ASSIGN_NORMAL_DAYS:
   m.0  = 0                      /*   Start of Array       */
   m.1  = 31                     /*   End of January       */
   m.2  = 59                     /*   End of February      */
   m.3  = 90                     /*   End of March         */
   m.4  = 120                    /*   End of April         */
   m.5  = 151                    /*   End of May           */
   m.6  = 181                    /*   End of June          */
   m.7  = 212                    /*   End of July          */
   m.8  = 243                    /*   End of August        */
   m.9  = 273                    /*   End of September     */
   m.10 = 304                    /*   End of October       */
   m.11 = 334                    /*   End of November      */
   m.12 = 365                    /*   End of December      */
   m.13 = 999                    /*   End of Array         */
return
/*-------------------------------------------------------------------*/
/*    Check if the year is a leap year.  If the year ends in 00 then */
/*    divide the year by 400. If not, then divide the year by 4.     */
/*    If the remainder in either case is zero(0) then it's a leap    */
/*    year.                                                          */
/*-------------------------------------------------------------------*/
CHECK_LEAPYEAR:
   if substr(year,3,2) = '00' then
      do
         if year // 400 = 0 then leapyear ='yes'
      end
   else
      do
         if year // 4 = 0 then leapyear ='yes'
      end
return
/*-------------------------------------------------------------------*/
/*    Initialize variables                                           */
/*-------------------------------------------------------------------*/
INIT:
   i          = 0
   found      = 'no'
   leapyear   = 'no'
   today      = DATE('S')
   curr_year  = substr(today,1,4)
   curr_cent  = substr(today,1,2)
   datein_len = length(datein)
   days       = substr(datein,(datein_len-2),3)  /*  Extracting the  */
   if days > 366 then                            /*  days (DDD).     */
      do
         say 'ERROR: Days (DDD) cannot be greater than 366.'
         EXIT
      end
   select                                        /*  Extracting the  */
      when(datein_len = 3) then                  /*  year.           */
         year = curr_year
      when(datein_len = 5) then
         year = curr_cent || substr(datein,1,2)
      when(datein_len = 7) then
         year = substr(datein,1,4)
   otherwise
      say 'ERROR: Invalid date length.'
      EXIT
   end
return
/*-------------------------------------------------------------------*/
/*    Validate the input date.                                       */
/*-------------------------------------------------------------------*/
VALIDATE:
   if datein = ' ' then
      do
         say 'ERROR: Enter a Date parameter.'
         EXIT
      end
   if datatype(datein) Â¬= 'NUM' then
      do
         say 'ERROR: Date must be numeric.'
         EXIT
      end
   if length(datein) < 3 then
      do
         say 'ERROR: Date must be 3 or more characters in length.'
         EXIT
      end
   if length(datein) > 7 then
      do
         say 'ERROR: Date must be 7 or fewer characters in length.'
         EXIT
      end
return


Robert R Mason
Assistant Systems Programmer
Sydney Electricity (Australia)                                               c X

