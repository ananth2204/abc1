System symbols in MVS/ESA 5.2


EXAMPLE OF IEASYMxx

SYMDEF(&CORPNM. = 'AML')              /* symbol set regardless of system  */
SYSDEF LPARNAME(LPA)                  /* production LPAR LPA              */
SYSNAME(PRDA)                         /* system name                      */
SYSCLONE(PE)                          /* SYSCLONE                         */
SYMDEF(&JESCKVOL. = 'VOLSER')         /* JES2 checkpoint volume           */
SYMDEF(&JESSPVOL. = 'SPOOL')          /* JES2 spool volume                */
SYMDEF(&RSU.='51')                    /* reconfigure storage              */
SYMDEF(&CON1. = '350')                /* Master Console address           */
SYMDEF(&CON2. = '355')                /* Alternate Console address        */
SYSDEF LPARNAME(LPB)                  /* TEST LPAR name                   */
SYSNAME(TSTA)                         /* TEST SYSTEM name                 */
SYSCLONE(TE)                          /* TEST SYSCLONE                    */
SYMDEF(&JESCKVOL. = 'TVOLSR')         /* JES2 checkpoint volume           */
SYMDEF(&JESSPVOL. = 'TSPOL')          /* JES2 spool volume                */
SYMDEF(&CORPNM. = 'TST')              /* override previous definition     */
SYMDEF(&RSU. = '0')                   /* don't reconfigure storage        */
SYMDEF(&CON1. = '750')                /* Master Console address           */
SYMDEF(&CON2. = '75F')                /* Alternate Console address        */


USING SYMBOLS
Example of IEASYSxx
LOGREC=SYS1.LOGREC.&SYSNAME.,
VIODSN=SYS1.STGINDEX.&SYSNAME.,
RSU=&RSU.,
.
.
Example of CONSOLxx
CONSOLE DEVNUM(&CON1.)
        ALTERNATE(&CON2.)
CONSOLE DEVNUM(&CON2.)
        ALTERNATE(&CON1.)
.
.
Example of JESPARMS
SPOOLDEF  VOLUME=&JESSPVOL.,
CKPTDEF    VOL=&JESCKVOL.,
.
.
Example of COMMNDxx
COM='S NET,,,(LIST=&SYSCLONE.)   '
.
.
SOURCE FOR SYMCK FUNCTION

***********************************************************************
*    DESCRIPTION:  REXX CALLABLE SUBROUTINE TO PERFORM SYSTEM         *
*                  SYMBOL  SUBSTITUTION.                              *
*    FUNCTION:                                                        *
*      THIS REXX EXTERNAL SUBROUTINE TAKES THE MVS SYMBOL PASSED BY   *
*      THE CALLER, AND IN TURN CALLS ASASYMBM SERVICE TO SUBSTITUTE   *
*      THE SYMBOLS ASSOCIATED WITH THE ACTIVE SYSTEM THE ROUTINE IS   *
*      CALLED ON.                                                     *
*    USAGE:                                                           *
*    IN A TSO/REXX EXEC,   "NEWVALUE = SYMCK(OLDVALUE)"               *
*    WHERE OLDVALUE CONTAINS THE NAME OF THE MVS SYMBOL TO BE         *
*    SUBSTITUTED.                                                     *
*    THE RESULT IS RETURNED IN THE FIELD RESULT.                      *
*     LINKAGE:                                                        *
*     R0 > ENVIRONMENT BLOCK                                          *
*     R1 > EFPL                                                       *
*    R13 > SAVE AREA                                                  *
*    R14 > RETURN ADDRESS                                             *
*    R15 > ENTRY POINT                                                *
***********************************************************************
SYMCK    CSECT ,
SYMCK    RMODE ANY
SYMCK    AMODE 31
* SETUP  LINKAGE AND DSECTS
         BAKR  R14,0              STACK REGS
         LR    BASEREG,R15        LOAD BASE REG
         USING SYMCK,BASEREG      TELL ASSEMBLER
         LA    R13,SAVEAREA       POINT R13 TO SAVE AREA
         LR    R4,R1              LOAD PARAMETER POINTER
         USING EFPL,R4            TELL ASSEMBLER
         L     R5,EFPLEVAL        LOAD POINTER TO ADDRESS OF EVALBLK
         L     R5,0(R5)           LOAD POINTER TO EVALBLK
         USING EVALBLOCK,R5       TELL ASSEMBLER
         L     R6,EFPLARG         POINT TO ARGUMENTS
         USING ARGTABLE_ENTRY,R6  TELL ASSEMBLER
         CLC   ARGTABLE_ARGSTRING_PTR,=X'FFFFFFFF'   AT LEAST 1 ARG?
         BE    EXIT                                  NO--> RETURN
* CALL ASASYMBM
         XC    SYMBP(SYMBP_LEN),SYMBP                CLEAR PARM LIST
         MVC   SYMBPPATTERN@,ARGTABLE_ARGSTRING_PTR  INPUT PTR
         MVC   SYMBPPATTERNLENGTH,ARGTABLE_ARGSTRING_LENGTH
         LA    R1,EVALBLOCK_EVDATA         GET ADDRESS OF OUTPUT AREA
         ST    R1,SYMBPTARGET@             STORE IT IN SMBP
         MVC   EVALBLOCK_EVLEN,=F'250'     SET MAX LENGTH
         LA    R1,EVALBLOCK_EVLEN          GET ADDRESS OF OUTPUT LENGTH
         ST    R1,SYMBPTARGETLENGTH@       STORE IT IN SMBP
         LA    R1,RC                       GET ADDRESS OF RC
         ST    R1,SYMBPRETURNCODE@         STORE IT IN SMBP
         LINK  EP=ASASYMBM,MF=(E,SYMBP)    CALL SYMBOL SERVICE
* RETURN
EXIT     DS    0H                          RETURN TO CALLING EXEC
         LA    R15,0                       LOAD RETURN CODE
         PR    ,                           EXIT PROGRAM
*
SAVEAREA DS    9D                          SAVE AREA
         LTORG ,
* SUBSTITUTION SERVICE BLOCK
SERVPARM ASASYMBP DSECT=NO         CREATE PARMLIST IN OWN STORAGE
RC       DS    0F
* REXX BLOCKS
         IRXEFPL                   EXTERNAL PARAMETER LIST
         IRXEVALB                  EVAL BLOCK
         IRXARGTB                  REXX ARGUMENT BLOCK
         END


EDIT MACRO SYMS

/* REXX - SYMS - CHECK FOR MVS SYMBOLS IN A MEMBER AND RESOLVE  */
/* ISPF EDIT MACRO                                              */
/* PROCESS EACH LINE OF THE CURRENTLY EDITED MEMBER.  IF A      */
/* SYSTEM STATIC SYMBOL IS FOUND, CALL SYMCK TO RESOLVE IT      */
/* AND DISPLAY THE OUTCOME VIA ISPF NOTE LINE.                  */
ADDRESS ISREDIT
"MACRO"
TOT = 0
CHG = 0
NCH = 0
FND = 0
"(FIRST) = LINENUM .ZFIRST"
"(LAST) = LINENUM .ZLAST"
/* PROCESS MEMBER FROM THE FIRST LINE TO THE LAST */
DO LINENO = FIRST TO LAST
  TOT = TOT + 1
  "(MEMLINE) = LINE" LINENO
  X = POS("&",MEMLINE)                 /* LOOK FOR SYMBOL IN LINE */
  IF X = 0 THEN ITERATE
  FND = FND + 1
  NEWLINE = SYMCK(MEMLINE)
  IF NEWLINE <> MEMLINE THEN DO
    /* IF THE NEW LINE IS DIFFERENT THAN BEFORE, SUBSTITUTION
       MUST HAVE TAKEN PLACE.  DISPLAY THE OUTCOME */
    CHG = CHG + 1
    /* TRANSLATE SINGLE QUOTES IN THE OUTPUT LINE TO AVOID CONFUSING
       ISPF LINE_AFTER FUNCTION   */
    NEWLINE = TRANSLATE(NEWLINE,"79"X,"7D"X)
    "LINE_AFTER" LINENO "= NOTELINE '"|| NEWLINE || "'"
    END
    ELSE DO
    /* IF THE NEW LINE IS SAME AS BEFORE, THE SYMBOL WAS NOT
       RESOLVED */
    NCH = NCH + 1
    "LINE_AFTER" LINENO "=  MSGLINE 'SYMBOL NOT CHANGED'"
    END
END
/* REPORT THE TOTALS AT THE TOP OF THE MEMBER */
"LINE_BEFORE .ZFIRST = NOTELINE 'TOTAL LINES:" TOT,
 "  LINES W/SYMBOLS:" FND,
 "  CHANGED:" CHG,
 "  NOT CHANGED:" NCH "'"
 RETURN


Dana Mitchell
Senior Systems Programmer (USA)                     c Xephon 1996

