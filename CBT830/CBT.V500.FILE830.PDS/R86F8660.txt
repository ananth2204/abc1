In-flight updating of the console configuration

INTRODUCTION

In MVS/370 and also in MVS/XA prior to Version 2 Release 2, a
maximum of 99 device numbers can be specified as consoles at
SYSGEN.  Other devices cannot be used as consoles until another
IOGEN is performed to change the table of devices eligible as
consoles.  In installations where a single IOGEN is required to
support multiple large configurations, the 99-device limit can
become a constraint.

This article presents a specification for a program which can
dynamically update the in-storage copy of the console table to
allow any supported device to be used as a console without
performing an IOGEN.

BACKGROUND INFORMATION

The list of eligible consoles is held in a table called the Unit
Control Module (UCM).  The UCM consists of a fixed portion
(the UCM base), followed by a number of 76-byte device entries
(UCMEs).  There is one UCME for each console defined at
SYSGEN.  Each console has a two-digit console-id between 01
and 99.  The UCME defines, among other things, the console-id,
device number, and device type for each console.

The UCM can be seen in any system dump in which the nucleus
storage has been dumped.  Location X'10' points to the CVT.  At
CVT plus X'64' (field name CVTCUCB) you will find the address
of the UCM base.  Print 12 000 bytes starting from that address,
then compare this storage with the layout of the UCM shown in
SPL: Data Areas.  At UCM plus X'48' you will find three fields:
UCMVEA, UCMVEZ, and UCMVEL, which tell you the
location of the first UCME, the length of each UCME, and the
address of the last one.  By looking at a UCME you can determine
which device it represents.  The fields we shall be interested in are
UCMID, which contains the console identifier 01-99 (appears as
01-63 in hexadecimal); UCMEDEVX, which contains the console
device type (for example, X'0B' is a 3278 model 2); and
UCMUCB, which is a pointer to the Unit Control Block (UCB)
representing the device assigned to this console.  Field
UCBNAME in the UCB (3 bytes starting at UCB plus X'D') will
contain the device number.

PROGRAM OVERVIEW

The purpose of this program is to alter the device type and UCB
pointer fields of a given UCME so as to point to a new device
specified by the operator.  The UCMID, device name, and device
type will be supplied in the PARM when the program is called.
An example of the PARM passed to the program would be:

    //IEFPROC EXEC PGM=UCMZAP,
    //   PARM='CN=23,U=5D1,T=3278-2'

The PARM field in this example instructs the program to find the
UCME for console number 23 (UCMID equals X'17'), to change
its UCMUCB to point to the UCB for device number 5D1, and to
change its UCMEDEVX field to the code for a 3278 model 2.

PROGRAMMING DETAILS

Checking the PARM

After saving registers and establishing save area linkage and
module addressability, as described in Supervisor Services, the
program should access the PARM field passed on the EXEC
statement.  When MVS gives control to the program, register 1
points to a fullword, which points to the PARM field.  The
PARM field consists of a halfword containing the number of
characters of PARM text - the text immediately follows the
halfword count field.  This is illustrated in Figure 1.

The program needs to make the following checks on the PARM:

*   It must contain between 15 and 21 bytes of text

*   Characters 1-3 must be 'CN='

*   Character 6 must be a comma

*   Characters 7-8 must be 'U='

*   Character 12 must be a comma

*   Characters 13-14 must be 'T='.

If any of these checks fails, issue message UCM001E and
terminate (see below for details of messages).

Characters 15 onwards must be one of the following device types
3277-2, 3278-2, 3278-3, 3278-4, 3278-2A, 3279-2A, 3279-2B,
3279-3A, 3279-3B, 3270-X, 3211, 3203, 3284, 3286, or 3289.
If any other value is found, issue message UCM002E and
terminate.

Finding the UCME

Check that characters 4-5 of the parameter are numeric.  If not,
issue message UCM003E and exit.  If characters 4-5 are numeric,
convert them from decimal to binary.  The result is the UCMID of
the UCME that we are going to modify.  Find the UCM base
using the pointer in the CVT, and using the UCMVEA/VEZ/VEL
fields, scan through each UCME looking for the one whose
UCMID matches the value we obtained from the parameter.  If we
reach the last UCME without finding the one required, issue
message UCM003E and exit.

Checking the status

Having found the correct UCME, we must first check that it isn't
in use.  Fields UCMSTS and UCMATR indicate the status of the
console.  If any bits of UCMSTS are on, or if the UCMUF or
UCMAT04 bits of UCMATR are on, the console is in use and its
UCME must therefore not be altered.  In this case, issue message
UCM004E and exit.

Finding the UCB

If characters 9-11 of the parameter are '***', the UCMUCB
pointer is to be left as it is, so bypass this section.  Otherwise,
characters 9-11 specify the device number of the device which is
to be assigned to this UCM.

First, we need to find the UCB for this device.  For MVS/370, the
UCB can be found via the UCB look-up table.  Field CVTILK2 in
the CVT points to a list of halfwords; each halfword is the address
of a UCB.  A halfword of X'FFFF' indicates the end of the list.
Embedded halfwords of X'0000' should be ignored.  The formats
of the CVT and UCB are in the SPL: Data Areas manuals.  For
MVS/XA, the UCB is found using the UCB Scan Service
(IOSVSUCB) described in SPL: System Macros and Facilities.
Scan each UCB in turn, looking for the one whose UCBNAME
field equals the device number in characters 9-11 of the
parameter.  If the UCB cannot be found, the device number must
be invalid, so issue message UCM005E and exit.

Having found the new UCB address, loop through all the UCMEs
checking their UCMUCB field.  If another UCME is found which
already contains the same UCB address, issue error message
UCM006E and exit.

Having found the new UCB address, loop through all the UCMEs
checking their UCMUCB field.  If another UCME is found which
already contains the same UCB address, issue error message
UCM006E and exit.

Checking the device type

We must now check that the device type specified in the
parameter is consistent with the device type indicated by the
UCB.  (The UCB to be checked is either the new UCB or, if
'U=***' has been specified in the parameter, it is the UCB whose
address is already in the UCMUCB field.)

Referring to SPL: Data Areas you will find that the two bytes
starting at UCB plus X'12' (label UCBTBYT3) contain the device
type.  Cross-check as shown in Figure 2.  If the UCB type does
not match the requested device type, issue message UCM007E
and exit.

Updating the UCME

Now that all checks have been made, we can at last fulfil the
object of the exercise and update the UCME.  This is
accomplished by:

1   Moving the new UCB address into the UCMUCB field
(unless 'U=***' is specified in the parameter).

2   Updating the UCMEDEVX field to contain the value
equivalent to the device type from the parameter (refer to
SPL: Data Areas for the codes).

Because the UCM is in protected storage, our program will have
to enter protect key zero before it can make the updates.  This is
done by using the SVC form of the MODESET macro instruction.
The MODESET macro is described in the SPL: Supervisor
manual for MVS/370, and in SPL: System Macros and Facilities
for MVS/XA.

Having updated the UCM, the program should again use the
MODESET macro to revert to its normal protect key.  It can then
issue message UCM000I and exit.

Serialisation

Although we check the status of the console to ensure that it isn't
in use, it is possible for its status to change to 'in-use' between the
time we check it and the time we update it.  We can avoid this
problem if we enqueue on a system resource before checking the
UCM status, and do not release the resource until after we have
completed our UCM update.  By holding the system resource we
ensure that any requests to change the console's status will be
deferred until our update is complete.

You can read about the ENQ and DEQ macros in Supervisor
Services and Macro Instructions, and include the necessary macro
instructions in the program.  You will need to know the name of
the system resource to be used; this can be found in the
Communications Task section of the System Logic manual, under
the description of VARY CONSOLE processing.

MESSAGES

This program will need to issue messages to the operator console.
This is done using the WTO macro described in Supervisor
Services and Macro Instructions.  The messages which the
program can issue are shown in Figure 3.

ASSEMBLING AND LINKING

All references to control blocks should be by use of the field
names defined by the mapping macros; explicit base and
displacements should not be used.  For example:

    TM    UCMATR,UCMUF

rather than:

    TM  25(R4),X'10'

The mapping macros required for this program will be:

    CVT DSECT=YES
    IEECUCM
    IEFUCBOB

To pick up these macros, dataset SYS1.AMODGEN must be
present in the SYSLIB concatenation when the program is
assembled.  Since the program uses the MODESET macro, it will
have to be link-edited with AC=1 and placed in an APF-
authorised library.  The following link-edit control cards should
be used to give the program the correct authorisation code:

    INCLUDE OBJMOD
    SETCODE AC(1)
    NAME UCMZAP(R)

JCL REQUIREMENT

To execute the program, the following JCL will need to be added
to SYS1.PROCLIB as member UCMZAP:

//UCMZAP  PROC CN='**',U='***',T='3270-X'
//IEFPROC EXEC PGM=UCMZAP,
//             PARM='CN=&CN,U=&U,T=&T'
//STEPLIB DD   DISP=SHR,DSN=name of authorised library

OPERATING INSTRUCTIONS

Assume that device 020 has been SYSGENed as a console, and
we wish to replace it by device 5D1, which is a 3278 model 2.

First issue the MVS command D C (Display Consoles) to find out
the two-digit UCMID of device 020, then issue the following
commands:

    V 020,ONLINE
    S UCMZAP,CN=nn,U=5D1,T='3278-2'    (wait for message UCM000I)
    V 5D1,CONSOLE

REFERENCES

The following is a list of the publications referenced in this article.

MVS/370 (MVS/SP Version 1)
*   GC28-1046 OS/VS2 SPL: Supervisor
*   GC28-0683 OS/VS2 Supervisor Services and Macro
Instructions
*   GC28-1048 OS/VS2 Debugging Handbook Vol 2
*   GC28-1049 OS/VS2 Debugging Handbook Vol 3.

For MVS/XA (MVS/SP Version 2)
*   GC28-1150 MVS/XA SPL: System Macros and Facilities Vol
1
*   GC28-1151 MVS/XA SPL: System Macros and Facilities Vol
2
*   GC28-1154 MVS/XA Supervisor Services and Macro
Instructions
*   LC28-1165 MVS/XA Debugging Handbook Vol 2
*   LC28-1168 MVS/XA Debugging Handbook Vol 5.

Roger Bowler (UK) € Xephon 1989

