Image to copy book conversion using REXX

    * ----------------------- MVS Update ------------------------ *
    *                    Userid   @@@@@@@@@@@@                    *
    *                    Password @@@@@@@@@@                      *
    *   Your subscription to @@@@@@@@@ expires on @|/@@|/@@@@     *
    *         Please remit @Z9.99 Dollars for renewal             *
    * ----------------------------------------------------------- *
! UPDATE-LINE-1
! UPDATE-LINE-2
$ UPDATE-LINE-2-USERID
! UPDATE-LINE-3
$ UPDATE-LINE-3-PASSWORD
! UPDATE-LINE-4
$ UPDATE-LINE-4-UPDATE UPDATE-LINE-4-DATE-DD UPDATE-LINE-4-DATE-MMM
$ UPDATE-LINE-4-DATE-YYYY
! UPDATE-LINE-5
$ UPDATE-LINE-5-AMOUNT
! UPDATE-LINE-6

      *
       01  UPDATE-LINE-1.
        05  FILLER                     PIC X(4)  VALUE SPACES.
        05  FILLER                     PIC X(63) VALUE
            '* ----------------------- MVS Update ----------------------
      -     '-- *'.
        05  FILLER                     PIC X(65) VALUE SPACES.
      *
       01  UPDATE-LINE-2.
        05  FILLER                     PIC X(4)  VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(20) VALUE SPACES.
        05  FILLER                     PIC X(6)  VALUE
            'Userid'.
        05  FILLER                     PIC X(3)  VALUE SPACES.
        05  UPDATE-LINE-2-USERID       PIC X(12).
        05  FILLER                     PIC X(20) VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(65) VALUE SPACES.
      *
       01  UPDATE-LINE-3.
        05  FILLER                     PIC X(4)  VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(20) VALUE SPACES.
        05  FILLER                     PIC X(8)  VALUE
            'Password'.
        05  FILLER                     PIC X(1)  VALUE SPACES.
        05  UPDATE-LINE-3-PASSWORD     PIC X(10).
        05  FILLER                     PIC X(22) VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(65) VALUE SPACES.
      *
       01  UPDATE-LINE-4.
        05  FILLER                     PIC X(4)  VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(3) VALUE SPACES.
        05  FILLER                     PIC X(20) VALUE
            'Your subscription to'.
        05  FILLER                     PIC X(1)  VALUE SPACES.
        05  UPDATE-LINE-4-UPDATE       PIC X(9).
        05  FILLER                     PIC X(1)  VALUE SPACES.
        05  FILLER                     PIC X(10) VALUE
            'expires on'.
        05  FILLER                     PIC X(1)  VALUE SPACES.
        05  UPDATE-LINE-4-DATE-DD      PIC X(2).
        05  FILLER                     PIC X(1)  VALUE
            '/'.
        05  UPDATE-LINE-4-DATE-MMM     PIC X(3).
        05  FILLER                     PIC X(1)  VALUE
            '/'.
        05  UPDATE-LINE-4-DATE-YYYY    PIC X(4).
        05  FILLER                     PIC X(5)  VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(65) VALUE SPACES.
      *
       01  UPDATE-LINE-5.
        05  FILLER                     PIC X(4)  VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(9) VALUE SPACES.
        05  FILLER                     PIC X(12) VALUE
            'Please remit'.
        05  FILLER                     PIC X(1)  VALUE SPACES.
        05  UPDATE-LINE-5-AMOUNT       PIC ZZ9.99.
        05  FILLER                     PIC X(1)  VALUE SPACES.
        05  FILLER                     PIC X(19) VALUE
            'Dollars for renewal'.
        05  FILLER                     PIC X(13) VALUE SPACES.
        05  FILLER                     PIC X(1)  VALUE
            '*'.
        05  FILLER                     PIC X(65) VALUE SPACES.
      *
       01  UPDATE-LINE-6.
        05  FILLER                     PIC X(4)  VALUE SPACES.
        05  FILLER                     PIC X(63) VALUE
            '* ---------------------------------------------------------
      -     '-- *'.
        05  FILLER                     PIC X(65) VALUE SPACES.

IMG2CPBK REXX EXEC

/* ---------- IMG2CPBK ------------- */
/* Rexx to convert image to copybook */
/* IMG2CPBK ? to display help        */
/* --------------------------------- */
Trace O
Arg disphelp .
                            /*--------- Defaults ---------- */
dIgnrBlnkLines='N'          /* Ignore Blank Lines ?         */
dImgNCpybk='N'              /* Place image in copybk ?      */
dLvl1Id='!'                 /* Ch to identify lvl1name line */
dLvl1Name='LINE-'           /* 01 Level Name                */
dPageWidth=132              /* Page Width                   */
dPicCh='@'                  /* Ch to identify start of var  */
dPicSplitCh='|'             /* Ch to split dPicCh           */
dVarId='$'                  /* Ch to identify varname line  */
dVarName='PR-**-**'         /* Variable Name                */
                            /*--------- Defaults ---------- */
If disphelp¬='' Then Do
   Call Welcome
   Exit
   End
ij=0
ik=0
k1=0
k2=0
k3=0
k4=0
lvl1name.=''
lvl2name.=''
msgst=Msg('OFF')
Say Center('Type Print Image File Name ',72)
Say Center("TSO rules apply - If filename doesn't start with a quote",72)
Say Center("your userid will be prefixed to the file name           ",72)
Pull imagename .
src=Askinout(imagename 'DSNIMAGE' 'I')
If src¬=0 Then Exit
Say Center('Type Ouput File Name',72)
Pull cpybkname .
src=Askinout(cpybkname 'DSNCPYBK' 'O')
If src¬=0 Then Exit
'EXECIO * DISKR DSNIMAGE (STEM DATA.'
If Rc¬=0 Then Do
   Say '*Error* Unable To Read ' imagename 'RC='rc
   Exit
   End
m.1='The Default Page Width is' dPageWidth
m.2='Type a New Page Width to override OR'
m.3='Enter Null/ENTER to accept Default'
m.4='----------------------------------'
Do i=1 By 1 Until i=4
   Say Center(m.i,78)
   End
Pull newwidth .
Select
 When newwidth='' Then Nop
 When Datatype(newwidth,'W') & newwidth>0 Then dPageWidth=newwidth
 Otherwise Do
      Say 'Invalid Page Width Entered-Prog Aborted'
      Exit
      End
 End
Do i=1 By 1 Until i=data.0
   Select
    When translate(dIgnrBlnkLines)='Y' & data.i='' Then Nop
    When Word(data.i,1)=dLvl1Id Then
         Do k2=2 by 1 until k2=words(data.i)
            k1=k1+1
            lvl1name.k1=word(data.i,k2)
            End
    When Word(data.i,1)=dVarId Then
         Do k2=2 by 1 until k2=words(data.i)
            k3=k3+1
            lvl2name.k3=word(data.i,k2)
            End
    Otherwise Do
         k4=k4+1
         image.k4=data.i
         End
    End
   End
If k1=0 Then Do
   m.11='The Default 01 level variable name is' dLvl1Name
   m.12='Line Number will be suffixed to this name'
   m.13='Type a New Name to override OR'
   m.14='Enter Null/ENTER to accept Default'
   m.15='----------------------------------'
   Do i=11 By 1 Until i=15
      Say Center(m.i,78)
      End
   Pull newlvl1   .
   If newlvl1='' Then Nop
     Else dLvl1Name=newlvl1
   End
If k3=0 Then Do
   m.21='The Default field name is' dVarName
   m.22='Type a New field Name to override OR'
   m.23='Enter Null/ENTER to accept Default'
   m.24='----------------------------------'
   Do i=21 By 1 Until i=24
      Say Center(m.i,78)
      End
   Pull newname   .
   If newname='' Then Nop
     Else dVarName=newname
   End
space6=Copies(' ',6)
If Translate(dImgNCpybk)='Y' Then Do
   outdata=space6||'****---------------  Your Report Image Starts Here  --------
   Call WriteCpybk
   Do row=1 By 1 Until row=image.0
      outdata=space6||'*'||image.row
      Call WriteCpybk
      End
   outdata=space6||'****---------------  Your Report Image Ends   Here  --------
   Call WriteCpybk
   End
Do row=1 By 1 Until row=k4
   data=Substr(image.row,1,dPageWidth)
   Call AnlyzeLine
   End
If k1>0 Then Do
   Select
    When k1=k4 Then Nop
    When k1<k4 Then Do
         Say '*------------------------- Note --------------------*'
         Say '    No of 01 Level Names are Less than No of lines   '
         Say '     Program Generated (' k4-k1 ') 01 Level Names    '
         Say '*------------------------- Note --------------------*'
         End
    Otherwise Do
         Say '*------------------------- Note --------------------*'
         Say '  No of 01 Level Names are Greater than No of lines  '
         Say '      Program Ignored (' k1-k4 ') 01 Level names     '
         Say '*------------------------- Note --------------------*'
         End
    End
   End
If k3>0 Then Do
   Select
    When ik=k3 Then Nop
    When ik>k3 Then Do
         Say '*------------------------- Note --------------------*'
         Say ' No of Variable Names  are Less than No of variables '
         Say '     Program Generated (' ik-k3 ') 01 Level Names    '
         Say '*------------------------- Note --------------------*'
         End
    Otherwise Do
         Say '*------------------------- Note --------------------*'
         Say ' No of Variable Names  are More than No of variables '
         Say '      Program Ignored (' k3-ik ') 01 Level names     '
         Say '*------------------------- Note --------------------*'
         End
    End
   End
'EXECIO 0 DISKR DSNIMAGE(FINIS'
'EXECIO 0 DISKW DSNCPYBK(FINIS'
'FREE DD(DSNIMAGE)'
'FREE DD(DSNCPYBK)'
Exit
AnlyzeLine:
i=0
outdata=space6||'*'
Call Writecpybk
i=i+1
If lvl1name.row¬='' Then savedat.i='01  'lvl1name.row'.'
 Else savedat.i='01  'dlvl1name||row'.'
Do Forever
   If data='' Then Do
      i=i+1
      savedat.i=' 05   FILLER  PIC X('dPageWidth') VALUE SPACES.'
      Leave
      End
   Parse Var data part1 (dPicCh)  part2
   If part2¬='' Then Do
      part2=dPicCh||part2
      pic=Subword(part2,1,1)
      endpos=Pos(dPicSplitCh,pic)
      If endpos>0 Then Do
         pic=Substr(pic,1,endpos-1)||Substr(pic,endpos-1,1)
         End
      End
     Else Do
      If Pos(dPicCh,data)>0 Then Do
         part2=dPicCh
         pic=dPicCh
         End
        Else Do
         part2=''
         pic=''
         End
      End
   If part1='' Then Call BuildBlank
     Else Call BuildConst
   If Length(pic)>0 Then Call BuildVariable
   If part2='' Then Leave
   data=Substr(part2,Length(pic)+1)
   If data='' Then Do
      If Length(data)>0 Then Do
         val=')  VALUE SPACES.'
         i=i+1
         savedat.i=' 05  FILLER   PIC X('length(data)||val
         End
      Leave
      End
   End
Do j=1 By 1 Until j=i
   Select
    When Left(Strip(savedat.j),1)="'"  Then Do
         spacev=copies(' ',12)
         If Length(savedat.j)>(72-13)  Then Do
            Do until length(savedat.j)<(72-13)
               Parse Var savedat.j partial 61 savedat.j
               outdata=spacev||partial
               Call WriteCpybk
               If savedat.j='.' then Do
                  spacev=copies(' ',12)
                  End
                 Else Do
                  savedat.j="'"savedat.j
                  spacev=copies(' ',6)||'-'||copies(' ',5)
                  End
               End
            End
         outdata=spacev||savedat.j
         End
    When Wordpos('PIC',savedat.j)=0    Then outdata=space6  savedat.j
    Otherwise Do
         Parse Var savedat.j part1 'PIC' part2
         outdata=Left(space6 part1,38) 'PIC' strip(part2)
         End
    End
    Call WriteCpybk
   End
Return
BuildBlank:
len1=Pos(dPicCh,data)
If len1>1 Then Do
   i=i+1
   savedat.i=' 05  FILLER   PIC X('len1-1') VALUE SPACES.'
   End
Return
BuildConst:
len1=Length(Strip(part1))
len2=Length(Strip(part1,'t',' '))
len3=Length(Strip(part1,'l',' '))
lspa=len2-len1
If lspa>0 Then Do
   If lspa>9 Then val=') VALUE SPACES.'
     Else val=')  VALUE SPACES.'
   i=i+1
   savedat.i=' 05  FILLER  PIC X('lspa||val
   End
part3=Strip(part1,'b',' ')
finish='n'
If Words(part3)>1 Then Call MultiWords
  Else Call SingleWord
nazbeg=len3-len1
If nazbeg>0 Then Do
   i=i+1
   If nazbeg>9 Then val=') VALUE SPACES.'
     Else val=')  VALUE SPACES.'
   savedat.i=' 05  FILLER  PIC X('nazbeg||val
   End
Return
SingleWord:
If Length(part3)>9 Then val=') VALUE'
  Else val=')  VALUE'
i=i+1
savedat.i=' 05  FILLER  PIC X('length(part3)||val
i=i+1
savedat.i="'"part3"'."
Return
MultiWords:
Do Until finish='y'
   If Pos('  ',part3)=0 Then finish='y'
     Else Parse Var part3 part3 '  ' part31
   If Length(part3)>9 Then val=') VALUE'
     Else val=')  VALUE'
   i=i+1
   savedat.i=' 05  FILLER  PIC X('length(part3)||val
   i=i+1
   savedat.i="'"part3"'."
   If finish='y' Then Leave
   po=Pos(Word(part31,1),part31)+2-1
   i=i+1
   savedat.i=' 05  FILLER  PIC X('po') VALUE SPACES.'
   part3=Strip(part31,'l',' ')
   End
Return
BuildVariable:
pic=Translate(Translate(pic),'X',dPicCh)
If Length(pic)>1 Then Do
   If Substr(pic,2,1)="," Then pic=Substr(pic,3,1)||Substr(pic,2)
     Else pic=Substr(Pic,2,1)||Substr(pic,2)
   diff='n'
   If Verify(Pic,substr(pic,1,1))=0 Then diff='n'
     Else diff='y'
   End
Select
 When Length(pic)=1 Then picdata='PIC X(1).'
 When diff='n'      Then picdata='PIC 'Substr(Pic,1,1)'('Length(pic)').'
 Otherwise               picdata='PIC 'pic'.'
End
i=i+1
ij=ij+1
If lvl2name.ij¬='' then Do
   savedat.i=' 05  'lvl2name.ij picdata
   ik=ik+1
   End
  Else savedat.i= ' 05  'dVarName picdata
Return
WriteCpybk:
Queue outdata
'EXECIO 1 DISKW DSNCPYBK'
Select
 When Rc=0 Then mess=''
 When Rc=1 Then mess='Output Should have a record length of atleast 'length(outd
 Otherwise      mess='Write Rec Failed on' Writedsn 'Rc=' rc
 End
If mess¬='' Then Do
   Say '*Error*' mess
   Exit 9999
   End
Return
AskInOut:
arg parameters
If Pos(',',parameters)>0 Then seprtr=','
  Else seprtr=' '
Parse Var parameters dsname (seprtr) ddname (seprtr) inpout (seprtr) dsnlike (se
If dsname='' then Do
   Say '*Error* You must key in a file name'
   mrc=16
   Return mrc
   End
mrc=0
name=''
status=''
type=''
validtypes='SEQ PDM GDG'
info=Filechek(dsname)
Parse Var info name '*' status '*' type '*' .
If Left(inpout,1)='O' Then Call ItisOutput
  Else Call ItIsInput
Return mrc
ItIsInput:
Select
 When status='N' & type='PNV' Then mess="PDS Doesn't exit-Prog aborted"
 When status='N' Then mess="Input file doesn't exists-Prog aborted"
 When Pos(type,validtypes)>0 Then mess=''
 Otherwise mess='File Organisation Not Supported By This Rexx Program'
 End
If mess ¬='' Then Do
   Say '*Error*' mess
   mrc=16
   Return mrc
   End
msgst=Msg('OFF')
'FREE DD('ddname')'
'ALLOCATE DD('ddname') DSN('name') SHR'
If rc¬=0 Then Do
   Say '*Error* Unable To alloc' name
   Say 'return Code is ' Rc
   mrc=16
   End
Naz=Msg(Msgst)
Return
ItIsOutput:
defaultdisp='NEW UNIT(SYSDA) LRECL(255) SPACE(12,4) TRACKS'
If status='Y' Then Do
   If Pos(type,validtypes)>0 Then Do
      Say 'Output file exists-Press Enter To ERASE'
      Say '                  -Type "Q" To quit'
      Pull answer .
      If Translate(answer)='Q' Then Do
         Say 'Program Aborted'
         mrc=16
         Return
         End
       Else Do
         msgst=Msg('OFF')
         "DELETE" name
         If rc¬=0 Then Do
            Say name 'Could Not be Deleted - Return Code = ' Rc
            Say 'Program Aborted'
            mrc=16
            Return
            End
         Naz=msg(msgst)
         End
      End
     Else Do
      Say 'Output File exists but the File Organization Not Supported'
      Say 'Program Aborted'
      mrc=16
      Return
      End
   End
Select
 When type='PDM' Then disp='SHR'
 When dsnlike¬='' Then disp="LIKE("dsnlike")"
 Otherwise disp=defaultdisp
End
Msgst=MSG('OFF')
'FREE DD('ddname')'
'ALLOCATE DD('ddname') DSN('name')' disp
If Rc¬=0 Then Do
   Say 'Unable To alloc' name
   Say 'return Code is ' Rc
   mrc=16
   End
Naz=MSG(Msgst)
Return
FileChek:
Arg dsname
gendet='G####V##'
msgst=MSG('OFF')
SYSDSORG=''
dsname=Strip(dsname)
Select
 When Left(dsname,1)="'" & Right(dsname,1)="'"  Then Nop
 When Left(dsname,1)='"' & Right(dsname,1)='"'  Then Nop
 When Left(dsname,1)="'" & Right(dsname,1)¬="'" Then dsname=dsname"'"
 When Left(dsname,1)='"' & Right(dsname,1)¬='"' Then dsname=dsname'"'
 Otherwise dsname="'"Userid()"."dsname"'"
End
avail=SYSDSN(dsname)
If avail='OK' Then status='Y'
  Else status='N'
ask=LISTDSI(dsname)
Select
  When SYSDSORG='PS' Then type='SEQ'
  When SYSDSORG='PO' Then Do
       If Pos('(',dsname)=0 Then type='PDS'
         Else type='PDM'
       End
  When SYSDSORG='VS' Then type='VSA'
  Otherwise Do
       If Pos('(',dsname)>0 & Pos(')',dsname)>0 Then Call PdsOrGdg
         Else Call GetGenVer dsname
       End
End
Naz=Msg(msgst)
retdat=dsname'*'status'*'type'*'gendet'*'
Return retdat
PdsOrGdg:
Parse Var dsname lib '(' mem ')' .
If Datatype(mem,'N') Then Call GetGenVer lib"',"mem
  Else Do
   y=LISTDSI(dsname)
   If SYSDSORG='PS' Then type='PDS'
     Else type='PNV'
   End
Return
GetGenVer:
Arg param
Parse Var param ddname ',' num
listh = OUTTRAP('data.')
'LISTCAT ENTRIES('ddname')'
If Rc¬=0 Then Do
   type='INV'
   Return
   End
genver.=''
j=0
Do i=1 By 1 Until i=data.0
   data.i=Strip(data.i,'b',' ')
   If i=1 Then Do
      If Left(data.i,8)¬='GDG BASE' Then type='INV'
      End
     Else type='GDG'
   If Left(data.i,7)¬='NONVSAM' Then Iterate
   newdat=Reverse(data.i)
   Parse Var newdat genver '.' junk
   genver=Reverse(genver)
   If Substr(genver,1,1)='G' & Substr(genver,6,1)='V' Then Do
      j=j+1
      Parse Var genver 'G' gen 'V' ver '.' .
      genver.j=gen ver
      End
End
lastj=j
Parse Var genver.lastj gen ver
If num ='' Then gendet='G'gen'V'ver
  Else Do
   status='Y'
   Select
     When num=0 Then gen=gen
