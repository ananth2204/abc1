JCL condition code utility
SETCC is a program that was written to control and test complex job streams.
When executed, SETCC can be told to give a fixed condition code, cause a fixed
user or system abend, or produce a condition code based on the day of the week.
The best way to illustrate the use of this utility is with examples.  Figure 1
shows the resulting condition code given the various PARM values shown.

     PARM on EXEC             Result

     PARM='200'     Return code = 200 decimal
     PARM='XYZ'     Return code = 999 decimal - syntax error in PARM
     PARM='S2560'   Abends with A00 (system)
     PARM='U999'    Abends with 3E7 (user)
     PARM='4096'    Return code = 0  (MVS only looks at low 12 bits)
     PARM='W1234500'     Condition code = 1 on Monday, 2 on Tuesday etc, 0 on
Saturday and Sunday.
     PARM='W01000002'    Condition code = 1 only on second Tuesday of the month.
     PARM='W00001000'    Condition code = 1 only on last Friday of the month.
     Figure 1: The results of different PARM values

***           THE UTILITY THAT IBM FORGOT...                        ***
*  CONTROL YOUR JCL WITH THIS PROGRAM.  IT SETS A CONDITION CODE      *
*  THAT CAN CONTROL SUBSEQUENT JOB STEPS THAT USE THE COND PARM.      *
*  CALL IT USING                                                      *
*  //STEP0  EXEC PGM=SETCC,PARM=.....                                 *
*  OR                                                                 *
*  //STEP0  EXEC PGM=SETCC                                            *
*  //SYSIN  DD DSN=......,DISP=SHR,.....                              *
*  THE SYSIN DATASET SHOULD CONSIST OF ONE 80-BYTE RECORD WITH        *
*  THE SAME DATA AS THE PARM FIELD MAY CONTAIN, DESCRIBED BELOW.      *
*  IF NEITHER A PARM NOR A SYSIN CARD IS PROVIDED, THE CC IS SET TO   *
*  ZERO.  THE SAME GOES IF THE SYSIN DATASET IS EMPTY.  SYNTAX ERRORS *
*  CAUSE A CC OF 999 DEC.                                             *
*  NOTE: ALL NUMBERS MUST BE SPECIFIED IN DECIMAL.                    *
*  THE PARM OR SYSIN IS SPECIFIED AS:                                 *
* 1.  A NUMBER (0 TO 9999).  THIS SETS THE COND CODE DIRECTLY TO THAT *
*     NUMBER (MOD 4096).                                              *
* 2.  W0100200 - 'W' FOLLOWED BY 7-DIG NUMBER, EACH DIGIT CORRESPON-  *
*     DING TO A DAY OF THE WEEK, STARTING MONDAY.  FOR THIS EXAMPLE,  *
*     THE CONDITION CODE IS SET TO 1 IF THE JOB IS EXECUTED ON TUES-  *
*     DAY, 2 IF ON FRIDAY, 0 OTHERWISE.  AN OPTIONAL EIGHTH DIGIT     *
*     CAN BE USED TO SPECIFY THE WEEK NUMBER IN THE MONTH; EG         *
*     W00040003  WOULD RETURN COND=4 ON THE THIRD THURSDAY OF THE     *
*     MONTH.  IF THE EIGHTH DIGIT IS ZERO, THIS MEANS THE LAST        *
*     WEEK OF THE MONTH EG W10000000 RETURNS COND=1 ON LAST MONDAY OF *
*     MONTH.                                                          *
* 3.  U9999 -'U' FOLLOWED BY 1- TO 4-DIGIT NUMBER INDICATING THE      *
*     USER ABEND NUMBER DESIRED - SETCC WILL BE FORCED TO ABEND       *
*     WITH THE NUMBER SPECIFIED (MOD 4096).                           *
* 4.  S9999 -'S' FOLLOWED BY 1- TO 4-DIGIT NUMBER.  THIS ACTS THE     *
***   SAME AS 3, EXCEPT THE ABEND IS A SYSTEM ABEND.                ***
DCBMASK  DCBD                 WANT TO ACCESS DATASET CONTROL BLOCK
SETCC    CSECT
         STM   R14,R12,12(R13)         SAVE HIS REGISTERS
         LR    R12,R15                 GET BASE ADDRESS
         USING SETCC,R12               WE'LL USE R12 FOR CODE PTR.
         LA    R2,SAVEAREA             MY SAVEAREA
         ST    R2,8(R13)               CHAIN SAVEAREAS
         ST    R13,4(R2)
         LR    R13,R2                  R13 NOW POINTS TO MY SAVEAREA
TRYPARM  L     R2,0(R1)            GET PTR TO PARM FIELD
         LH    R3,0(R2)            LOAD PARM FIELD LENGTH
         LA    R2,2(R2)
         LTR   R3,R3               IS IT THERE?
         BNE   GETPARM             IF YES, R2 POINTS TO IT
NOPARM   EQU   *                   GET HERE IF CC IN SYSIN
* NOTE: WE DON'T BOTHER OPENING SYSIN IF A PARM IS PROVIDED.
         OPEN  (SYSIN,(INPUT))
         LA    R10,SYSIN
         USING IHADCB,R10          ADDRESSABILITY TO DCB DSECT
         TM    DCBOFLGS,X'10'      WAS THERE AN ERROR?
         BZ    NOCC                YES, NO PARM OR SYSIN, SO SET CC=0
         GET   SYSIN,INBUF
         CLOSE SYSIN
         LA    R3,16               SET MAX LENGTH TO 16 CHARS
         LA    R2,INBUF            R2 POINTS TO PARM
* R2 POINTS TO PARM (OR SYSIN) TEXT.  R3 CONTAINS LENGTH OF PARM.
GETPARM  CH    R3,=H'16'           MAX # CHARACTERS TO MOVE
         BL    L1
         LA    R3,16               FORCE TO 16 IF MORE THAN 16 CHARS
L1       LA    R5,PARMCH           R5 -> NEW PARM AREA
         LR    R6,R5               R6 -> DITTO
         CLI   0(R2),C'W'          FIRST CHAR A 'W'?
         BE    WEEKDAY             JUMP IF 'WEEKDAY' SPEC
         CLI   0(R2),C'U'
         BE    L9                  JUMP IF USER ABEND REQUESTED
         CLI   0(R2),C'S'
         BNE   LOOP                DON'T JUMP IF SYS ABEND REQ.
L9       MVC   ABFLG,0(R2)         SET ABEND FLAG TO U OR S
         LA    R2,1(R2)            BUMP R2 READY FOR READ NUMBER PROC
         B     DECR3
LOOP     CLI   0(R2),C'0'          READ NUMBER PROC - COLLECTS DIGITS.
         BL    EXIT                EXIT LOOP IF NOT A DIGIT
         CLI   0(R2),C'9'
         BH    EXIT                DITTO
         MVC   0(1,R5),0(R2)       MOVE THE DIGIT TO PARMCH AREA.
         LA    R2,1(R2)            BUMP R2 TO NEXT CHARACTER
         LA    R5,1(R5)
DECR3    BCT   R3,LOOP             LOOP UNTIL ALL DIGITS READ
EXIT     CR    R5,R6               DID WE READ ANY DIGITS?
         BE    ST999               JUMP IF WE DIDN'T - RET CODE=999
         SR    R2,R2               R2 WILL ACCUMULATE BINARY VALUE.
         SR    R4,R4               R4 WILL CONTAIN EACH DIGIT.
LOOP2    MH    R2,=H'10'
         IC    R4,0(R6)
         S     R4,CHARZERO        CONVERT SINGLE DIGIT TO BINARY
         AR    R2,R4
         LA    R6,1(R6)           R6 -> NEXT DIGIT TO READ
         CR    R6,R5              HAVE WE READ LAST DIGIT?
         BNE   LOOP2              IF NOT, LOOP.
         ST    R2,RETCODE         STORE THE DESIRED RET OR ABND CODE
THATSIT  L     R15,RETCODE        EXIT - SETS CC TO VAL IN RETCODE
         CLI   ABFLG,C'U'         USER ABEND REQUESTED?
         BNE   T2                 JUMP IF NOT
         ABEND (R15),,STEP        COME CRASHING DOWN WITH USER ABEND
T2       CLI   ABFLG,C'S'         SYSTEM ABEND REQUESTED?
         BNE   T3                 JUMP IF NOT
         ABEND (R15),,STEP,SYSTEM FREAK OUT WITH SYSTEM ABEND
* THE EXIT POINT FOR NORMAL RETURN CODE PROCESSING...
* R15 ASSUMED TO CONTAIN DESIRED RETURN CODE.
T3       L     R13,4(R13)         GET THE HIGHER SAVEAREA
         L     R14,12(R13)        GET OUR RETURN ADDRESS
         LM    R0,R12,20(R13)     RESTORE OP SYS REGISTERS
         BR    R14                AND RETURN
NOCC     EQU   *
SYSINEOF SR    R15,R15            SET HERE IF NO PARM OR SYSIN
         B     T3                 RETCODE = 0
ST999    LA    R15,999            GET HERE IF PARM WAS NULL OR ERROR
         B     T3                 RETCODE = 999
* THIS SECTION INTERPRETS THE WEEKDAY SPECIFICATION WNNNNNNNX
WEEKDAY  TIME  DEC                 GET CURRENT DATE/TIME
         ST    R1,DATE             SAVE THE DATE PART (00YYDDDS)
         SRL   R1,12(R0)           SHIFT YEAR FIELD
         STH   R1,YEAR             STORE...
         NI    YEAR+1,X'F0'
         OI    YEAR+1,X'0C'        PUT SIGN IN
         CVB   R1,YEARFILL         AND CONVERT
         STCM  R1,1,YEAR2          SAVE BINARY
         SLL   R1,2(R0)            MULTIPLY BY FOUR TO INDEX TABLE
         STH   R1,YEAR             SAVE THE INDEX
         SR    R1,R1
         STCM  R1,1,DATE+1         ZERO OUT YEAR IN DAY FIELD
         CVB   R1,DATE8            R1=DAY NUMBER
         NI    YEAR2,X'03'         RESULT IS ZERO IF LEAP YEAR
         LA    R5,JDTABLE2-4       POINT TO LEAPYEAR TABLE...
         BE    LPYEAR
         LA    R5,JDTABLE1-4       UNLESS NOT LEAPYEAR
LPYEAR   EQU   *
LOOP3    LA    R5,4(R5)
         C     R1,4(R5)
         BH    LOOP3               SEARCH FOR MONTH NUMBER
         L     R6,0(R5)            GET JULDAY OF FIRST OF MONTH - 1
         L     R5,4(R5)            GET JULDAY OF END OF MONTH
         ST    R1,DATE             SAVE DAY NUMBER
         LA    R7,YEARTBL
         AH    R7,YEAR
         S     R7,YCONST           R7 INDEXES YEARTBL
         A     R1,0(R7)
         S     R1,=F'1'
         SR    R0,R0               SET UP FOR DIVIDE
         D     R0,DAYSINWK         FIND WEEKDAY, IN R0 (REMAINDER)
         STH   R0,DAYMOD           STORE. 0=MONDAY, 6=SUNDAY.
         L     R1,DATE             GET DAY OF YEAR
         SR    R7,R7               CLEAR WEEK COUNTER
         LA    R0,1(R0)            SET LAST-IN-MONTH FLAG
LOOP4    EQU   *                   LOOP TO DETERMINE WHICH 'X'DAY IN
*                                  MONTH IT IS.
         S     R1,DAYSINWK
         LA    R7,1(R7)
         CR    R1,R6               STILL IN SAME MONTH?..
         BH    LOOP4               IF YES, LOOP
         STH   R7,WKINMO           STORE WEEK IN MONTH
         L     R1,DATE             RESTORE DAY NUMBER AGAIN
         A     R1,DAYSINWK
         CR    R1,R5               IN NEXT MONTH?...
         BH    LASTWK              IF YES, BRANCH
         SR    R0,R0               CLEAR FLAG
LASTWK   STH   R0,LSTINMO          SAVE LAST-IN-MONTH FLAG
* NOW PROCESS   INPUT STRING...
         SR    R1,R1
         C     R3,=F'8'
         BL    ST999               ERROR IF FEWER THAN 8 CHARS
         BH    WEEKCHK             PROCESS FOR NTH 'X'DAY IN MONTH
EVERYWK  AH    R2,DAYMOD           INDEX TO RETURN CODE CHARACTER
         ICM   R1,1,1(R2)          GET THE CHARACTER
         S     R1,CHARZERO         CHANGE TO BINARY
RETR1    ST    R1,RETCODE
         B     THATSIT
WEEKCHK  CLI   8(R2),C'0'          IS IT A DIGIT > ZERO?
         BH    NTHINMO             JUMP IF NTH IN MONTH REQUIRED
         CLI   8(R2),C' '          IS IT A SPACE?
         BE    EVERYWK             JUMP IF EVERY WEEK REQUIRED
         LH    R1,LSTINMO          ELSE CHECK IF LAST WEEK IN MONTH
         LTR   R1,R1
         BZ    RETR1               IF NOT LAST WEEK, RETURN ZERO
         SR    R1,R1
         B     EVERYWK             OTHERWISE GO AND CHECK FOR DAY
NTHINMO  ICM   R1,1,8(R2)          CONVERT CHARACTER TO BINARY
         S     R1,CHARZERO
         CH    R1,WKINMO           TEST IF IT IS CORRECT WEEK
         LA    R1,0(R0)            ZERO R1 WITHOUT CHANGING SR
         BE    EVERYWK             IF CORRECT WEEK, FIND RET CODE
         B     RETR1               OTHERWISE RETURN ZERO RETCODE.
***        STORAGE AREA FOR PROGRAM                                 ***
RETCODE  DS    F
SAVEAREA DS    18F
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,RECFM=FB,LRECL=80,       X
               EODAD=SYSINEOF
PARMCH   DC    CL16' '             PARM WORK AREA
DAYSINWK DC    F'7'                DAYS IN WEEK
YCONST   DC    F'344'              86 * 4 (FIRST YEAR IN TBL * WORDSZ)
CHARZERO DC    XL4'000000F0'       HELPS CONVERT CHARACTER TO BINARY
ABFLG    DC    X'00'               ABEND FLAG - 00, 'U' OR 'S'
         DS    0F
DAYMOD   DS    H                   DAY NUMBER (0 TO 7)
WKINMO   DS    H                   WEEK IN MONTH (0 TO 4, 0 = LAST)
LSTINMO  DS    H                   FLAG FOR LAST WEEK IN MONTH
         DS    0D
DATE8    DC    XL4'00000000'
DATE     DS    F
YEARFILL DC    XL6'000000000000'
YEAR     DS    H
YEAR2    DS    C
INBUF    DS    CL80                SYSIN BUFFER
JDTABLE1 DC    F'0',F'31',F'59'    JULIAN DAY TBL FOR NORMAL YEARS
         DC    F'90',F'120',F'151'
         DC    F'181',F'212',F'243'
         DC    F'273',F'304',F'334',F'365'
JDTABLE2 DC    F'0',F'31',F'60'    JD TABLE FOR LEAP YEARS
         DC    F'91',F'121',F'152'
         DC    F'182',F'213',F'244'
         DC    F'274',F'305',F'335',F'366'
* YEARTBL GIVES DAY OF WEEK FOR FIRST DAY IN YEAR (0=MONDAY), THUS
* DAYMOD  = (  YEARTBL(YEAR) + DAY - 1 ) MOD 7.
* EG 1 JAN 1986 = 2 = WEDNESDAY
YEARTBL  DC    F'2'                1986   ADD 1 TO GET NEXT ELEMENT
         DC    F'3'                1987   IN TABLE (OR 2 FOR LEAP
         DC    F'4'                1988   YEARS) AND TAKE MOD 7.
         DC    F'6',F'0',F'1',F'2' 1989-1992
         DC    F'4',F'5',F'6',F'0' 1993-1996
         DC    F'2',F'3',F'4'      1997-1999
* OBVIOUSLY THIS PROGRAM ISN'T GOING TO WORK FROM 1 JAN 2000 ON.
         LTORG
         END


Stephen Hardy
Systems Programmer
DILGEA (Australia)  € DILGEA 1989















