Volume label recovery using ICKDSF

In the past when I have had trouble with DASD devices and
damaged volume labels, various problems have occurred.
Normally the data is inaccessible and the device cannot be
brought on-line. I have had to resort to re-initialization and
restoration, which has resulted in the loss of some data. Ideally
I would like to be able, at the very least, to obtain diagnostic
information detailing the reason for the damaged label, and at
most actually to recover the data.

The following is a theoretical process that will enable me to
achieve one, or both, of my objectives. The process presented
has not been tested but in theory should work. I believe it
would certainly be worth a try in the future when label
corruption occurs.

The volume label of a DASD device resides at cylinder zero,
track zero, and if the label is corrupted it is likely that one of
the following message identifiers would be issued to your
operator's console: IEA311I, IEF238D, IEF244I, IEF489I, and
IEF503I.

To obtain diagnostics for later review the Generalized Trace
Facility (GTF) and ICKDSF programs can be used. IBM
actually recommends that GTF is started with these parameters:

      IO=SIO=(cuu),CCW=(CCWN=100,DATA=32767)

Once GTF is started by executing the following ICKDSF
process, the output from ICKDSF and GTF can be used to try
to diagnose the cause of the problem.

//STS01A    JOB   CLASS=A,MSGCLASS=Q,MSGLEVEL=(1,1)
//STEP1     EXEC  PGM=ICKDSF,REGION=3M
//SYSPRINT  DD    SYSOUT=*
//SYSIN     DD    *
  INSPECT UNIT(cuu)     -
          NOVERIFY      -
          NOSKIP        -
          NOMAP         -
          PRESERVE      -
          CHECK(1)       -
          TRACKS(0,0)
/*

This output can vary, depending on the reason for the
corruption, but should help provide some ideas as to why the
corruption has occurred. By reviewing the output, or providing
IBM with the output, you may be able to come to some
satisfactory conclusions.

The actual recovery of the volume can take different forms,
depending on the DASD management package being utilized.
The process here briefly covers both the DFDSS and FDRABR
products.

First obtain a current VTOC listing of the corrupt volume and
identify one unallocated track. This may not be possible if you
do not take regular VTOCs of the volume or if the volume
changes on a regular basis. If this is not possible attempt to use
an index map of the VTOC. You will be able to obtain both of
these from the latest back-up of the volume, but, again, if the
volume changes regularly, this may not reflect the current state
of the volume in question. You may already have failed to get
past the first hurdle at this point.

If you do have the above information and have obtained an
unallocated track address, then run an ICKDSF minimal INIT
process as shown below. Obviously the unused track address
will need to be changed to reflect the unused track that you
have identified.

//STS01A    JOB    CLASS=A,MSGLEVEL=(1,1),MSGCLASS=Q
//STEP1     EXEC   PGM=ICKDSF,REGION=3M
//SYSPRINT  DD     SYSOUT=*
//SYSIN     DD     *
  INIT UNIT(cuu)     -
       NOVERIFY      -
       VOLID(vvvvvv) -
       VTOC(9,0,1)
/*

The above process initializes unit cuu with the volume serial
placed in the VOLID field (vvvvvv) and sets up a VTOC at
cylinder 9, track 0. These UNIT, VOLID, and VTOC operands
will depend entirely on your environment.

Once this job has completed successfully the device should be
varied on-line and mounted as private to the operating system.
You can then use DFDSS to print the tracks of the old VTOC.
If you have FDRABR, you can use FDRDSF with the PRINT
ABSTRK function to achieve this part of the process.

Finally, copy cylinder 0, track 0 from a non-corrupt volume
with the VTOC positioned in the same area as the original
VTOC on the corrupt volume. DFDSS copy or FDRCOPY can
be used to achieve this operation. At this point you should run
ICKDSF with the REFORMAT command to rebuild the
volume serial. Then, use IEHLIST to list the VTOC in dump
format to ensure that it is correct and take a full volume dump
of the volume. At this point you should restore the dumped
data to a more stable volume.

Theoretically the above process should work, and allows both
diagnostics about the corruption to be obtained and also all data
to be recovered. Either way it should certainly be worth trying
the next time a volume label is corrupted as it is better than
losing data or not knowing the reason for the corruption. I will
certainly be putting this process into practice the next time I
have a corrupt volume label on a DASD device.

John Bradley
Senior Technical Support Engineer (UK)                   c Xephon 1992

