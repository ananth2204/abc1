VTOC modification utility

The following TSO command comes in handy when someone
needs to amend the attributes of a dataset on disk without a lot of
hassle - usually when someone else has screwed them up by
accident. The program uses CVAF macros to read and update the
VTOC entry - called a Format 1 DSCB (DataSet Control Block)
- so is entirely safe, even with indexed VTOCs, and should be
operating system independent.

The program works by first extracting the command operands
using IKJPARS, reading the F1DSCB, amending it, then
updating it. An ENQ on 'SYSVTOC/volume' is wrapped around
the process. The unusual technique used here is to build two
masks: one to clear the values to be replaced and one with the
new values to set. These are then simply ANDed and ORed over
the F1DSCB. This means that processing between the read and
update is kept to a minimum, reducing the chance of anything
going wrong. This also means that most of the logic is performed
in the IKJPARS parameter checking exits, which set up the
masks. Obviously, playing with the VTOC needs this program to
be authorized, both by the linkage editor and in IEATSO00. The
command operands are:

VMOD dsname                   single or list of dataset names,
      {,VOL(vvvvvv)}           if specific VOLUME required,
      {,BLKSIZE(bbbbb)}        to set new block size,
      {,LRECL(lllll)}          to set new logical record length,
      {,RECFM(rrrr)}           to set new record format,
      {,KEYLEN(kkk)}           to set new key length,
      {,DSORG(ooo)}            to set new DSORG,
      {,CREDT(ccccc)}          to set new creation date,
      {,EXPDT(eeeee)}          to set new expiry date,
      {,PASSWORD(p)}           to set new password attribute,
      {,SEC(ss)}               to set new secondary allocation amount,
      {,ADDR}                  to display the CCHHR of format-1 DSCB

The operands are obvious except for PASSWORD. Consider the
PASSWORD flags as two bits, ie: B'0x' - not protected, B'10' -
protected against both read and write, and B'14' protected against
write but not read. Then:

o      U turns off bit B'1x' to unprotect (but leaves B'x4' alone)

o      P turns on B'1x' to protect (uses previously set read/write
bit)

o      R sets B'10' for read and write needing a password

o      W sets B'14' for only write needing a password.

CREDT and EXPDT are dates in Julian format (YYJJJ), or '0' for
none, or '*' for yesterday.

VTOCMOD SOURCE CODE

**LINK   SETCODE AC(1)
         PRINT OFF FOR MACRO DEFINITIONS
         MACRO ,
         $ASMDATE ,
         B     4+8+8+8(,R15)
         DC    CL8'&SYSECT'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         MEND  ,
VTOCMOD  CSECT ,
VTOCMOD  AMODE 24
VTOCMOD  RMODE 24
DSECTS   DSECT ,
UCB      DSECT ,
        IEFUCBOB ,
        IKJPPL ,
        IKJCPPL ,
        IKJPSCB ,
        CVT    DSECT=YES,LIST=YES
        IHAPSA ,
CVPL    ICVAFPL ,
VTOCMOD  CSECT ,
        DCBD   DSORG=DA,DEVD=DA
VTOCMOD  CSECT ,
       $ASMDATE ,
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING VTOCMOD,R12
         L     R5,=A(WORKLEN)
        GETMAIN R,LV=(R5)
         LA    R10,0(,R1)
         LR    R4,R10
         SLR   R7,R7
         MVCL  R4,R6
         ST    R10,8(,R13)
         ST    R13,4(,R10)
         LM    R14,R2,12(R13)
         LR    R13,R10
         USING WORKAREA,R10
         MVI   VTOCENQ,X'FF'       SET "MODESET"/"ENQ" NOT DONE
         LR    R11,R1
         USING CPPL,R11            ADDRESS "CPPL" IN "R11"
         L     R3,CPPLPSCB
         TM    PSCBATR1-PSCB(R3),PSCBCTRL "OPER" PRIV?
         BZ    NOTOPER               NO, THEN CAN'T DO IT
         MVI   ANDMASK,X'FF'       INITIALIZE "AND_MASK"
         MVC   ANDMASK+1(L'ANDMASK-1),ANDMASK
         MVC   (PPLUPT-PPL)+PARSPARM(4),CPPLUPT A(UPT)
         MVC   (PPLECT-PPL)+PARSPARM(4),CPPLECT A(ECT)
         XC    PARSECB(4),PARSECB  CLEAR "ECB"
         LA    R1,PARSECB          "ECB"
         ST    R1,(PPLECB-PPL)+PARSPARM A(ECB)
         ST    R10,(PPLUWA-PPL)+PARSPARM A(UWA=WORKAREA)
         L     R1,=A(PCL)          A(PCL)
         ST    R1,(PPLPCL-PPL)+PARSPARM A(PCL)
         LA    R1,PARSPPDL         WHERE TO PUT "PDL_ADDR"
         ST    R1,(PPLANS-PPL)+PARSPARM A(ANS)
         MVC   (PPLCBUF-PPL)+PARSPARM(4),CPPLCBUF A(CBUF)
         DROP  R11                 DISOWN "CPPL" IN "R11"
         LA    R1,PARSPARM         "IKJPARS" PARAMETER LIST
        CALLTSSR EP=IKJPARS
         CH    R15,=Y(4)           BRANCH ON "IKJPARS" RETURN
         BE    PARSER04            04: INCOMPLETE PARAMETERS
         BH    PARSEROR            >4.. "IKJPARS" ERROR
         L     R9,PARSPPDL         GET "PDL"
         USING IKJPARMD,R9           AND ADDRESS "PDL" IN "R9"
         LA    R5,@DSN             -> FIRST "DSNAME_PDE"
DSNLOOP  EQU   *
         MVI   WWVOLUME,C' '
         MVC   WWVOLUME+1(L'WWVOLUME+L'DS1DSNAM-1),WWVOLUME
         L     R1,0(,R5)           START OF "DSNAME"
         LH    R2,4(,R5)           LENGTH OF "DSNAME"
         BCTR  R2,0                  - 1 FOR "EX"
         EX    R2,MVCDSNAM         MVC   DS1DSNAM(*-*),0(R1)
         TM    @VOL+6,X'80'        IS "VOLUME" SPECIFIED?
         BZ    VOLMISS               NO, THEN ASK CATALOG
         LH    R1,@VOL+4             YES, LENGTH OF "VOLUME"
         L     R2,@VOL                    START OF "VOLUME"
         BCTR  R1,0                  - 1 FOR "EX"
         EX    R1,MVCVOLUM         MVC   WWVOLUME(*-*),0(R2)
         B     VOLCONT               NOW BRANCH TO READ "F1DSCB"
         DROP  R9                  DISOWN "PDL" IN "R9"
VOLMISS  EQU   *
         MVC   CAMLST(RCAMLSTL),RCAMLST MODEL "CAMLST"
         LA    R1,DS1DSNAM         POINT AT...
         ST    R1,CAMLST+4                  "DSNAME"
         LA    R1,LONGWORK         POINT AT...
         ST    R1,CAMLST+12                 WORKAREA
        LOCATE CAMLST
         STC   R15,RETCODE         SAVE "LOCATE" RETURN CODE
         LTR   R15,R15             WAS "DSNAME" FOUND IN CATALOG?
         BNZ   DSNNTCAT              NO, THEN ERROR
         MVC   WWVOLUME,LONGWORK+6 COPY RETURNED "VOLUME"
VOLCONT  EQU   *
         XC    LONGWORK(100),LONGWORK CLEAR WORK AREA
         LA    R2,UCBSCNTP         ->"UCBTYPE"
         ST    R2,UCBSCNPM+4       ->"UCBTYPE"
         MVI   UCBSCNTP,UCB3DACC   "UCBTYPE"=DASD
         LA    R2,LONGWORK         -> WORK AREA
         ST    R2,UCBSCNPM+0       -> WORK AREA
         LA    R2,WWPUCB           -> "UCB" RETURN ADDR
         ST    R2,UCBSCNPM+8       -> "UCB" RETURN ADDR
         OI    UCBSCNPM+8,X'80'    SET END_OF_LIST
SCNUCBLP EQU   *
         L     R2,CVTPTR           CVT
         L     R15,CVTUCBSC-CVT(,R2) CVTUCBSC
         LA    R1,UCBSCNPM         -> PARM LIST
         BALR  R14,R15             GOSUB "UCBSCAN" ROUTINE
         LTR   R15,R15             ANOTHER ONE FOUND?
         BNZ   VOLNTMNT              NO, THEN ALL LOOKED AT
         L     R15,WWPUCB          PICK UP "UCB" ADDRESS
         CLC   WWVOLUME,UCBVOLI-UCBOB(R15) THIS VOLUME?
         BNE   SCNUCBLP
         MVC   CVAFDIR(RCVAFDIRL),RCVAFDIR MODEL "CVAFDIR"
         XC    BUFLIST(BFLHLN+BFLELN),BUFLIST
         OI    BFLHFL,BFLHDSCB   "DSCB" TO BE READ WITH "BUFLIST"
         MVI   BFLHNOE,1           ONLY ONE ENTRY
         LA    R1,DS1FMTID         WHERE TO PUT "F1DSCB"
         ST    R1,BFLEBUF
         OI    BFLEFL,BFLECHR    "CCHHR" OF DSCB" TO BE RETURNED
         MVI   BFLELTH,DS1END-DS1FMTID  LENGTH TO BE RETURNED
         L     R2,WWPUCB           LOAD "UCB" ADDRESS
  NOP   TESTMODE
        MODESET MODE=SUP
         MVC   VTOCENQ(RVTOCENQL),RVTOCENQ MODEL "ENQ"
        ENQ    (=CL8'SYSVTOC',WWVOLUME,E,L'WWVOLUME,SYSTEMS),          *
               MF=(E,VTOCENQ)
TESTMODE EQU   *
        CVAFDIR ACCESS=READ,                                           *
               DSN=DS1DSNAM,                                           *
               BUFLIST=BUFLIST,                                        *
               VERIFY=NO,                                              *
               UCB=(R2),                                               *
               IOAREA=KEEP,                                            *
               MAPRCDS=NO,                                             *
               IXRCDS=NOKEEP,                                          *
               BRANCH=NO,                                              *
               MF=(E,CVAFDIR)
         LTR   R3,R15              CHECK "CVAFDIR" RETURN CODE
         BZ    VTREADOK            ALL WAS WELL
         BAL   R9,DEQVTOC          FREE OFF RESOURCES
         BAL   R9,CVAFEMSG         ISSUE ERROR MESSAGE
         CLI   (CVSTAT-CVPL)+CVAFDIR,1 DATASET NOT FOUND?
         BE    DSNNTFND            YES, THEN SAY SO
         B     DSNERSET            ELSE MOVE ONTO NEXT "DSNAME"
VTREADOK EQU   *
         MVC   CCHHR,BFLEARG       SAVE "CCHHR"
         CLI   ANDMASK,X'FF'       ANY NEW OPTIONS TO SET?
         BNE   ISNEWSET            YES, THEN WE NEED TO UPDATE
         CLC   ANDMASK+1(L'ANDMASK-1),ANDMASK
         BNE   ISNEWSET            YES, THEN WE NEED TO UPDATE
         CLI   SETMASK,X'00'       ANY NEW OPTIONS TO SET?
         BNE   ISNEWSET            YES, THEN WE NEED TO UPDATE
         CLC   SETMASK+1(L'SETMASK-1),SETMASK
         BNE   ISNEWSET            YES, THEN WE NEED TO UPDATE
         SLR   R1,R1
         ICM   R1,B'1111',WWSCALO  LOAD NEW SEC-ALLOC VALUE
         BNZ   ISSCASET            IS NEW SCA, GO SET IT
         BAL   R9,RLSECVAF         FREE OFF RESOURCES
         B     NONEWSET            AND AVOID RE-WRITE
ISNEWSET EQU   *
         NC    DS1FMTID(L'ANDMASK),ANDMASK REMOVE OLD BITS
         OC    DS1FMTID(L'SETMASK),SETMASK AND SET NEW BITS
         ICM   R1,B'1111',WWSCALO  LOAD NEW SEC-ALLOC VALUE
         BZ    NONEWSCA            NO, THEN UPDATE "VTOC" NOW
ISSCASET EQU   *
         TM    DS1SCALO,X'C0'      HAS SEC-ALLOC BEEN SET?
         BZ    SCANTALW            NO, THEN NOT ALLOWED
         TM    DS1SCALO,X'0F'      WERE THERE SPECIAL REQUESTS?
         BNZ   SCANTALW            YES, THEN NOT ALLOWED
         STCM  R1,B'0111',DS1SCALO+1   SAVE NEW SEC-ALLOC VALUE
         B     NONEWSCA                AND GO UPDATE "VTOC"
SCANTALW EQU   *
         BAL   R9,RLSECVAF         FREE OFF RESOURCES
         LA    R1,#SECNALD         SECONDARY ALLOCATION NOT ALLO
         LA    R0,L'#SECNALD       LENGTH OF MESSAGE
        TPUT   (1),(0),EDIT        ISSUE MESSAGE
         B     DSNERSET
NONEWSCA EQU   *
         L     R2,WWPUCB           LOAD "UCB" ADDRESS
        CVAFDIR ACCESS=WRITE,                                          *
               IOAREA=NOKEEP,                                          *
               MAPRCDS=NO,                                             *
               IXRCDS=NOKEEP,                                          *
               BRANCH=NO,                                              *
               MF=(E,CVAFDIR)
         LTR   R3,R15              CHECK "CVAFDIR" RETURN CODE
         BZ    VTWRITOK            ALL WAS WELL
         BAL   R9,RLSECVAF         FREE OFF RESOURCES
         BAL   R9,CVAFEMSG         ISSUE ERROR MESSAGE
         B     VTOCUPER            AND MOVE ONTO NEXT "DSNAME"
VTWRITOK EQU   *
         BAL   R9,DEQVTOC          FREE OFF RESOURCES
NONEWSET EQU   *
         L     R9,PARSPPDL         GET "PDL"
         TM    (@ADDR+1)-IKJPARMD(R9),X'01' "ADDR" REQUESTED?
         BZ    ADDRSKIP            NO, THEN BRANCH
         MVC   MSGAREA(L'#ADDRMSG),#ADDRMSG 'ADDR -   -  -'
         UNPK  MSGAREA+7(10+1),CCHHR(L'CCHHR+1) "CCHHR"
         TR    MSGAREA+7(10),HEXTAB-C'0'
         MVI   MSGAREA+7+10,C' '   CLEAR RUBBISH CHARACTER
         MVC   MSGAREA+20(L'WWVOLUME),WWVOLUME
         MVC   MSGAREA+29(L'DS1DSNAM),DS1DSNAM
         LA    R0,L'#ADDRMSG+L'DS1DSNAM LENGTH OF MESSAGE
         LA    R1,MSGAREA          START OF MESSAGE
        TPUT   (1),(0),EDIT        ISSUE MESSAGE
ADDRSKIP EQU   *
NXTDSNAM EQU   *
         CLI   24(R5),X'FF'        END OF "DSNAME_PDE" CHAIN?
         BE    ALLDONE             YES, THEN JOB DONE
         NI    WWFLAGS,255-(DSCBCHNG) RESET "DSCB_CHANGED" FLAG
         L     R5,24(R5)           LOAD NEXT "DSNAME_PDE"
         B     DSNLOOP             AND LOOP BACK FOR IT
RLSECVAF EQU   *                   R15=R/C, R9=RET
         OI    BFLEFL,BFLESKIP     DON'T RELEASE THIS ENTRY
        CVAFDIR ACCESS=RLSE,                                           *
               IOAREA=NOKEEP,                                          *
               BRANCH=NO,                                              *
               MF=(E,CVAFDIR)
DEQVTOC EQU    *                   R15=R/C, R9=RET
         CLI   VTOCENQ,X'FF'       HAS "MODESET"/"ENQ" BEEN DONE?
         BE    0(,R9)              NO, THEN GO STRAIGHT BACK
        DEQ    MF=(E,VTOCENQ)
        MODESET MODE=PROB
         B     0(,R9)              THEN ERROR RETURN
CVAFEMSG EQU   *
         MVC   MSGAREA(27),=C'CVAFDIR ERROR X"XX" VVVVVV/'
         UNPK  MSGAREA+16(2+1),(CVSTAT-CVPL)+CVAFDIR(1+1)
         TR    MSGAREA+16(2),HEXTAB-C'0'
         MVI   MSGAREA+16+2,C'"'   CLEAR RUBBISH CHARACTER
         MVC   MSGAREA+20(L'WWVOLUME),WWVOLUME
         MVC   MSGAREA+27(L'DS1DSNAM),DS1DSNAM
         LA    R0,27+L'DS1DSNAM LENGTH OF MESSAGE
         LA    R1,MSGAREA          START OF MESSAGE
        TPUT   (1),(0),EDIT        ISSUE MESSAGE
         BR    R9
PARSER04 EQU   *                   ' - INCOMPLETE PARM LIST - '
         MVC   MSGAREA(L'#PARSER4),#PARSER4 '-INCOMPLETE PARM LIST-'
         LA    R0,76               ' - INCOMPLETE PARM LIST - '
         B     DSNERMSG
VOLNTMNT EQU   *                   ' - NOT MOUNTED - '
         MVC   MSGAREA(6),WWVOLUME "VOLUME"
         MVC   MSGAREA+6(L'#VOLNMNT),#VOLNMNT '-NOT MOUNTED-'
         MVC   MSGAREA+23(44),DS1DSNAM "DSNAME"
         LA    R0,67               ' - NOT MOUNTED - '
         B     DSNERMSG
DSNNTFND EQU   *                   ' - DATASET NOT FOUND - '
         MVC   MSGAREA(6),WWVOLUME "VOLUME"
         MVC   MSGAREA+6(L'#DSNNFND),#DSNNFND '-DATASET NOT FOUND-'
         MVC   MSGAREA+30(44),DS1DSNAM "DSNAME"
         LA    R0,74               ' - DATASET NOT FOUND - '
         B     DSNERMSG
VTOCRDER EQU   *                   ' -        - VTOC READ ERROR'
         MVC   MSGAREA(6),WWVOLUME "VOLUME"
         MVC   MSGAREA+6(L'#VTOCRER),#VTOCRER '-  - VTOC READ ERROR'
         UNPK  MSGAREA+6+3(10+1),CCHHR(L'CCHHR+1) "CCHHR"
         TR    MSGAREA+6+3(10),HEXTAB-C'0'
         MVI   MSGAREA+6+3+10,C' ' CLEAR RUBBISH CHARACTER
         MVC   MSGAREA+6+L'#VTOCRER(L'DS1DSNAM),DS1DSNAM "DSNAME"
         LA    R0,6+L'#VTOCRER+L'DS1DSNAM
         B     DSNERMSG
VTOCUPER EQU   *                   ' - VTOC UPDATE ERROR - '
         MVC   MSGAREA(6),WWVOLUME "VOLUME"
         MVC   MSGAREA+6(L'#VTOCUER),#VTOCUER '-VTOC UPDATE ERROR-'
         MVC   MSGAREA+6+L'#VTOCUER(L'DS1DSNAM),DS1DSNAM "DSNAME"
         LA    R0,6+L'#VTOCUER+L'DS1DSNAM
         B     DSNERMSG
DSNNTCAT EQU   *                   'NOT CATALOGUED - '
         MVC   MSGAREA(L'#DSNNCAT),#DSNNCAT 'NOT CATALOGUED - '
         MVC   MSGAREA+L'#DSNNCAT(L'DS1DSNAM),DS1DSNAM "DSNAME"
         LA    R0,L'#DSNNCAT+L'DS1DSNAM      'NOT CATALOGUED - '
DSNERMSG EQU   *
         LA    R1,MSGAREA          START OF MESSAGE
        TPUT   (1),(0),EDIT        ISSUE MESSAGE
DSNERSET EQU   *
         MVI   RETCODE,8           SET RETURN CODE EIGHT
         B     NXTDSNAM            NOW SKIP TO NEXT "DSNAME"
PARSEROR EQU   *
         LA    R1,#PARSERR         ' - CRITICAL PARSE ERROR - '
         LA    R0,L'#PARSERR       LENGTH OF MESSAGE
        TPUT   (1),(0),EDIT        ISSUE MESSAGE
         MVI   RETCODE,12          SET RETURN CODE TWO
         B     ALLDONE
NOTOPER  EQU   *
         LA    R1,#NOTOPER         '"VTOCMOD" COMMAND NOT AUTHORIZED'
         LA    R0,L'#NOTOPER       LENGTH OF MESSAGE
        TPUT   (1),(0),EDIT        ISSUE MESSAGE
         MVI   RETCODE,12          SET RETURN CODE TWO
         B     RETNRLSA
ALLDONE  EQU   *
        IKJRLSA PARSPPDL           RELEASE "PDL"
RETNRLSA EQU   *
         SLR   R2,R2
         IC    R2,RETCODE          LOAD FINAL RETURN CODE
         L     R0,=A(WORKLEN)      A(WORKLEN)
         L     R3,4(,R13)
        FREEMAIN R,LV=(0),A=(R13)
         LR    R13,R3
         LR    R15,R2              RESTORE RETURN CODE
        RETURN (14,12),RC=(15)
VCKBLK   EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKBLK(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "BLKSIZE"
         L     R1,0(,R2)           VALUE OF "BLKSIZE"
         C     R1,=A(32760)        A(32760) VALUE TOO LARGE?
         BH    VCKERR04            YES, THEN ERROR
         STH   R1,(DS1BLKL-DS1FMTID)+SETMASK      NEW "BLKSIZE"
         MVC   (DS1BLKL-DS1FMTID)+ANDMASK,=FL8'0' NEW "BLKSIZE"
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
VCKLRL   EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKLRL(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "LRECL"
         L     R1,0(,R2)           VALUE OF "LRECL"
         C     R1,=A(32760)        A(32760) VALUE TOO LARGE?
         BH    VCKERR04            YES, THEN ERROR
         STH   R1,(DS1LRECL-DS1FMTID)+SETMASK      NEW "LRECL"
         MVC   (DS1LRECL-DS1FMTID)+ANDMASK,=FL8'0' NEW "LRECL"
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
VCKKYLN  EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKKYLN(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "KEYLN"
         L     R1,0(,R2)           VALUE OF "KEYLN"
         CH    R1,=Y(255)          A(32760) VALUE TOO LARGE?
         BH    VCKERR04            YES, THEN ERROR
         STC   R1,(DS1KEYL-DS1FMTID)+SETMASK      NEW "KEYLN"
         MVC   (DS1KEYL-DS1FMTID)+ANDMASK,=FL8'0' NEW "KEYLN"
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
VCKRFM   EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKRFM(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "RECFM"
         LH    R1,4(,R9)           LENGTH OF "RECFM"
         MVC   DOUBLE1(1),=FL8'0'  CLEAR TEMP "RECFM"
         CLI   0(R2),C'F'
         BE    VCKRFMF
         CLI   0(R2),C'V'
         BE    VCKRFMV
         CLI   0(R2),C'U'
         BE    VCKRFMU
         B     VCKERR04
VCKRFMF  EQU   *                   RECFM='F'
         OI    DOUBLE1,DCBRECF     SET RECFM='F'
         B     VCKRFMNX
VCKRFMV  EQU   *                   RECFM='V'
         OI    DOUBLE1,DCBRECV     SET RECFM='V'
         B     VCKRFMNX
VCKRFMU  EQU   *                   RECFM='U'
         OI    DOUBLE1,DCBRECU     SET RECFM='U'
         BCT   R1,VCKERR04         ERROR IF MORE AFTER "U"
         B     VCKRFMDN
VCKRFMLP EQU   *
         CLI   0(R2),C'B'
         BE    VCKRFMB
         CLI   0(R2),C'S'
         BE    VCKRFMS
         CLI   0(R2),C'A'
         BE    VCKRFMA
         CLI   0(R2),C'M'
         BE    VCKRFMM
VCKRFMB  EQU   *                   RECFM='B'
         TM    DOUBLE1,DCBRECBR
         BO    VCKERR04
         OI    DOUBLE1,DCBRECBR    SET RECFM='B'
         B     VCKRFMNX
VCKRFMS  EQU   *                   RECFM='S'
         TM    DOUBLE1,DCBRECSB
         BO    VCKERR04
         OI    DOUBLE1,DCBRECSB    SET RECFM='S'
         B     VCKRFMNX
VCKRFMA  EQU   *                   RECFM='A'
         TM    DOUBLE1,DCBRECCA+DCBRECCM
         BNZ   VCKERR04
         OI    DOUBLE1,DCBRECCA    SET RECFM='A'
         B     VCKRFMNX
VCKRFMM  EQU   *                   RECFM='M'
         TM    DOUBLE1,DCBRECCA+DCBRECCM
         BNZ   VCKERR04
         OI    DOUBLE1,DCBRECCM    SET RECFM='M'
VCKRFMNX EQU   *
         LA    R2,1(,R2)
         BCT   R1,VCKRFMLP
VCKRFMDN EQU   *
         MVC   (DS1RECFM-DS1FMTID)+SETMASK,DOUBLE1 SET "RECFM"
         MVC   (DS1RECFM-DS1FMTID)+ANDMASK,=FL8'0' NEW "RECFM"
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
VCKDSO   EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKDSO(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "DSORG"
         LH    R1,4(,R9)           LENGTH OF "DSORG"
         MVC   DOUBLE1(L'DS1DSORG),=FL8'0' CLEAR TEMP "DSORG"
         CH    R1,=H'2'            AT LEAST TWO CHARS?
         BE    VCKDSONU            YES, OKAY BUT NO "U"
         BL    VCKERR04            NO, THEN ERROR
         CH    R1,=H'3'            ENOUGH LENGTH FOR "U"?
         BH    VCKERR04            MORE, THEN ERROR
         CLI   2(R2),C'U'          CAN ONLY BE 'U'
         BNE   VCKERR04            NOT 'U', THEN ERROR
         OI    DOUBLE1+0,X'01'     SET 'XXU'
VCKDSONU EQU   *
         CLC   0(2,R2),=C'IS'      =C'IS'?
         BE    VCKDSOIS            YES, THEN SET "IS"
         CLC   0(2,R2),=C'PS'      =C'PS'?
         BE    VCKDSOPS            YES, THEN SET "PS"
         CLC   0(2,R2),=C'DA'      =C'DA'?
         BE    VCKDSODA            YES, THEN SET "DA"
         CLC   0(2,R2),=C'PO'      =C'PO'?
         BE    VCKDSOPO            YES, THEN SET "PO"
         B     VCKERR04
VCKDSOIS EQU   *                   "DSORG=IS"
         OI    DOUBLE1+0,X'80'     SET "DSORG=IS"
         B     VCKDSOXX
VCKDSOPS EQU   *                   "DSORG=PS"
         OI    DOUBLE1+0,X'40'     SET "DSORG=PS"
         B     VCKDSOXX
VCKDSODA EQU   *                   "DSORG=DA"
         OI    DOUBLE1+0,X'20'     SET "DSORG=DA"
         B     VCKDSOXX
VCKDSOPO EQU   *                   "DSORG=PO"
         OI    DOUBLE1+0,X'02'     SET "DSORG=PO"
VCKDSOXX EQU   *
         MVC   (DS1DSORG-DS1FMTID)+SETMASK,DOUBLE1 SET "DSORG"
         MVC   (DS1DSORG-DS1FMTID)+ANDMASK,=FL8'0' NEW "DSORG"
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
VCKPWD   EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKPWD(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "PASSWORD"
         LH    R1,4(,R9)           LENGTH OF "PASSWORD"
         BCT   R1,VCKERR04         ERROR IF MORE THAN ONE CHAR
         CLI   0(R2),C'P'          "PASSWORD" TO BE SET?
         BE    PWDSET              YES, THEN SET IT
         CLI   0(R2),C'U'          "PASSWORD" TO BE UN-SET?
         BE    PWDUNSET            YES, THEN UN-SET IT
         CLI   0(R2),C'R'          "PASSWORD_READ" TO BE SET?
         BE    PWDREAD             YES, THEN SET IT
         CLI   0(R2),C'W'          "PASSWORD_WRITE" TO BE SET?
         BE    PWDWRITE            YES, THEN SET IT
         B     VCKERR04
PWDSET   EQU   *                   "PASSWORD=P"
         OI    (DS1DSIND-DS1FMTID)+SETMASK,X'10'     NEW "PSWD"
         B     PWDDONE
PWDUNSET EQU   *                   "PASSWORD=U"
         NI    (DS1DSIND-DS1FMTID)+ANDMASK,255-X'10' NEW "PSWD"
         B     PWDDONE
PWDWRITE EQU   *                   "PASSWORD=W"
         OI    (DS1DSIND-DS1FMTID)+SETMASK,X'14'       NEW "PSWD"
         B     PWDDONE
PWDREAD  EQU   *                   "PASSWORD=R"
         OI    (DS1DSIND-DS1FMTID)+SETMASK,X'10'     NEW "PSWD"
         NI    (DS1DSIND-DS1FMTID)+ANDMASK,255-X'14' NEW "PSWD"
         B     PWDDONE
PWDDONE  EQU   *
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
   AGO   .NORACF1
VCKRACF  EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKRACF(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "RACF"
         LH    R1,4(,R9)           LENGTH OF "RACF"
         BCT   R1,VCKERR04         ERROR IF MORE THAN ONE CHAR
         CLI   0(R2),C'P'          "RACF" TO BE SET?
         BE    VCKRACST            YES, THEN SET IT
         CLI   0(R2),C'U'          "RACF" TO BE UN-SET?
         BE    VCKRACUS            YES, THEN UN-SET IT
         B     VCKERR04
VCKRACST EQU   *                   "RACF=P"
         OI    (DS1DSIND-DS1FMTID)+SETMASK,X'40'       NEW "RACF"
         B     VCKRACDN
VCKRACUS EQU   *                   "RACF=U"
         NI    (DS1DSIND-DS1FMTID)+ANDMASK,255-X'40'   NEW "RACF"
         B     VCKRACDN
VCKRACDN EQU   *
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
.NORACF1 ANOP  ,
VCKCRE   EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKCRE(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         BAL   R3,VCKDATCV         CONVERT TO BINARY DATE
           B     VCKERR04          ERROR IN DATE
         STCM  R1,B'1110',(DS1CREDT-DS1FMTID)+SETMASK NEW "CREDT"
         MVC   (DS1CREDT-DS1FMTID)+ANDMASK,=FL8'0'    NEW "CREDT"
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
VCKEXP   EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKEXP(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         BAL   R3,VCKDATCV         CONVERT TO BINARY DATE
           B     VCKERR04          ERROR IN DATE
         STCM  R1,B'1110',(DS1EXPDT-DS1FMTID)+SETMASK NEW "EXPDT"
         MVC   (DS1EXPDT-DS1FMTID)+ANDMASK,=FL8'0'    NEW "EXPDT"
         OI    WWFLAGS,DSCBCHNG    NOTE "DSCB" CHANGED
         B     VCKRET00            NOW RETURN TO "IKJPARS"
VCKDATCV EQU   *                   R9->"CREDT"/"EXPDT"_PDE
         L     R2,0(,R9)           START OF "CREDT"/"EXPDT"
         LH    R1,4(,R9)           LENGTH OF "CREDT"/"EXPDT"
         CH    R1,=H'5'            =Y(5) FULL "YYJJJ"?
         BE    VCKDATLO            YES, THEN PROCESS
         CH    R1,=H'1'            =Y(1) OR JUST '*'?
         BNE   0(,R3)              NO, THEN ERROR
         CLI   0(R2),C'*'          IS IT '*'=YESTERDAY?
         BE    VCKDATYD            NO, THEN ERROR
         CLI   0(R2),C'0'          IS IT '0'?
         BNE   0(,R3)              NO, THEN ERROR
         LA    R2,=C'00000'        YES, THEN POINT AT "00000"
         B     VCKDATLO            AND THEN PROCESS
VCKDATYD EQU   *
        TIME   TU
         ST    R1,DOUBLE1          SAVE X'00YYJJJS'
         SP    DOUBLE1+2(2),=P'1'  MINUS ONE FOR YESTERDAY
         BP    VCKDATSY            SAME YEAR, OKAY
         SP    DOUBLE1(4),=P'635'  -P'1000'+P'365'
         TM    DOUBLE1+1,X'01'     "LEAP_YEAR"?
         BNZ   VCKDATSY            NO WAY
         TM    DOUBLE1+1,X'12'     "LEAP_YEAR"?
         BM    VCKDATSY            NO WAY
         ZAP   DOUBLE1+2(2),=P'366' SET DAYS IN "LEAP_YEAR"
VCKDATSY EQU   *
         OI    DOUBLE1+3,X'0F'     SET VALID SIGN
         UNPK  DOUBLE2(5),DOUBLE1+1(3) CONVERT TO CHARACTER
         LA    R2,DOUBLE2          AND USE THAT NOW
VCKDATLO EQU   *
         PACK  DOUBLE1,0(2,R2)     "YY" INTO "R0"
         CVB   R0,DOUBLE1          "YY" INTO "R0"
         PACK  DOUBLE1,2(3,R2)     "JJJ" INTO "R1"
         CVB   R1,DOUBLE1          "JJJ" INTO "R1"
         CH    R1,=Y(366)          IS DATE VALID?
         BL    VCKDATJO            YES, THEN CARRY ON
         BH    0(,R3) VCKERR04     TOO HIGH, THEN ERROR
         LTR   R1,R1               IS "JJJ" POSITIVE?
         BP    VCKDATJP            YES, THEN CARRY ON
         LTR   R0,R0               IS "YY" POSITIVE?
         BP    0(,R3) VCKERR04     YES, THEN "JJJ"=0 IS ERROR
VCKDATJP EQU   *
         LTR   R0,R0               IS "YY" POSITIVE?
         BNP   0(,R3) VCKERR04     NO, THEN ERROR
         CH    R1,=Y(366)          IS DATE VALID?
         BL    VCKDATJO            YES, THEN CARRY ON
         BH    0(,R3) VCKERR04     TOO HIGH, THEN ERROR
         PACK  DOUBLE1(4),0(5,R2)  RE-PACK "YYJJJ" FOR A SEC
         TM    DOUBLE1+1,X'01'     "LEAP_YEAR"?
         BNZ   0(,R3) VCKERR04     NO WAY, THEN ERROR
         TM    DOUBLE1+1,X'12'     "LEAP_YEAR"?
         BM    0(,R3) VCKERR04     NO WAY, THEN ERROR
VCKDATJO EQU   *
         SLL   R1,16               MERGE
         SRDL  R0,8                MERGE
         B     4(,R3)              AND RETURN
VCKSECO  EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         L     R12,PROGBASE-VCKSECO(,R15)
         LR    R7,R1               COPY PARM
         LM    R9,R10,0(R7)        R9->"PDE", R10->"WORKAREA"
         L     R2,0(,R9)           START OF "SECONDARY ALLOCATION"
         L     R1,0(,R2)           VALUE OF "SECONDARY ALLOCATION"
         STCM  R1,B'0111',WWSCALO+1 SAVE NEW SEC-ALLOC VALUE
         MVI   WWSCALO,X'FF'       AND NOTE NEW VALUE PRESENT
VCKRET00 EQU   *
         LM    R14,R12,12(R13)
         SLR   R15,R15
         BR    R14
VCKERR04 EQU   *
         LM    R14,R12,12(R13)
         LA    R15,4
         BR    R14
MVCDSNAM MVC   DS1DSNAM(*-*),0(R1)
MVCVOLUM MVC   WWVOLUME(*-*),0(R2)
PROGBASE DC    A(VTOCMOD)
         LTORG ,
#PARSER4 DC    C' - Incomplete PARM list - '
#PARSERR DC    C' - Critical Parse error - '
#VOLNMNT DC    C' - not mounted - '
#DSNNFND DC    C' - Dataset not found - '
#VTOCRER DC    C' -            - VTOC read error - '
#VTOCUER DC    C' - VTOC update error - '
#DSNNCAT DC    C'not catalogued - '
#NOTOPER DC    C'"VTOCMOD" command not authorized'
#ADDRMSG DC    C'ADDR -            -        - '
#SECNALD DC    C'Secondary allocation not allowed'
HEXTAB   DC    C'0123456789ABCDEF'
RCAMLST CAMLST NAME,*-*,,*-*
RCAMLSTL EQU   *-RCAMLST
RVTOCENQ ENQ   (*-*,*-*,E,L'WWVOLUME,SYSTEMS),MF=L
RVTOCENQL EQU  *-RVTOCENQ
RCVAFDIR CVAFDIR ACCESS=READ,                                          *
               DSN=DS1DSNAM-WORKAREA,                                  *
               BUFLIST=BUFLIST-WORKAREA,                               *
               VERIFY=NO,                                              *
               UCB=(R2),                                               *
               IOAREA=NOKEEP,                                          *
               MAPRCDS=NO,                                             *
               IXRCDS=NOKEEP,                                          *
               MF=L
RCVAFDIRL EQU  *-RCVAFDIR
WORKAREA DSECT ,
         DC    18F'0'
PARSECB  DC    A(0)                "ECB" FOR "IKJPARS"
PARSPPDL DC    A(0)                ->RETURNED "PDL" FROM "IKJPARS"
WWPUCB   DC    A(0)                ->"UCB"
RETCODE  DC    X'0'                GENERAL RETURN CODE
WWFLAGS  DC    X'0'
DSCBCHNG EQU   X'80'               "DSCB_CHANGED" FLAG
MSGAREA  DC    CL130' '            MESSAGE AREA
WWVOLUME DC    CL6' '              VOLUME
DSCBXXXX EQU   *,140
        IECSDSL1 1                 "FORMAT_1 DSCB"
DS1@AUTH EQU   DSCBXXXX+X'51',1,C'C'
         DC    (140-(*-DSCBXXXX))X'00'
ANDMASK  DC    XL(DS1END-DS1FMTID)'00'
SETMASK  DC    XL(DS1END-DS1FMTID)'00'
BUFLIST ICVAFBFL DSECT=NO          "BUFLIST" FOR "CVAFDIR"
CCHHR    DC    XL5'00'             X'CCHHR'
WWSCALO  DC    F'0'                SECONDARY ALLOCATION
DOUBLE1  DC    D'0'
DOUBLE2  DC    D'0'
PARSPARM DC    7A(0)               "IKJPARS" PARM LIST
UCBSCNPM DC    3F'0'
UCBSCNTP DC    F'0'
CAMLST   DC    XL(RCAMLSTL)'00'
CVAFDIR  DC    XL(RCVAFDIRL)'00'
VTOCENQ  DC    XL(RVTOCENQL)'00'
LONGWORK DS    XL265
WORKLEN  EQU   *-WORKAREA
VTOCMOD  CSECT ,
PCL     IKJPARM DSECT=IKJPARMD
@DSN    IKJPOSIT DSNAME,LIST,USID,                                     *
               PROMPT='Dataset Name'
@BLK@   IKJKEYWD
        IKJNAME 'BLKSIZE',SUBFLD=@BLK#
@LRL@   IKJKEYWD
        IKJNAME 'LRECL',SUBFLD=@LRL#
@RFM@   IKJKEYWD
        IKJNAME 'RECFM',SUBFLD=@RFM#
@KYL@   IKJKEYWD
        IKJNAME 'KEYLEN',SUBFLD=@KYL#
@DSO@   IKJKEYWD
        IKJNAME 'DSORG',SUBFLD=@DSO#
@CRE@   IKJKEYWD
        IKJNAME 'CREDT',SUBFLD=@CRE#
@EXP@   IKJKEYWD
        IKJNAME 'EXPDT',SUBFLD=@EXP#
@PWD@   IKJKEYWD
        IKJNAME 'PASSWORD',SUBFLD=@PWD#
   AGO   .NORACF2
@RACF@  IKJKEYWD
        IKJNAME 'RACF',SUBFLD=@RACF#
.NORACF2 ANOP  ,
@VOL@   IKJKEYWD
        IKJNAME 'VOLUME',SUBFLD=@VOL#
@ADDR   IKJKEYWD
        IKJNAME 'ADDRESS'
@SEC@   IKJKEYWD
        IKJNAME 'SECONDARY',SUBFLD=@SEC#
@BLK#   IKJSUBF
@BLK    IKJIDENT 'Block Size',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,   *
               INTEG,VALIDCK=VCKBLK,PROMPT='Block size'
@LRL#   IKJSUBF
@LRL    IKJIDENT 'LRECL',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,        *
               INTEG,VALIDCK=VCKLRL,PROMPT='Logical record length'
@RFM#   IKJSUBF
@RFM    IKJIDENT 'RECFM',MAXLNTH=4,FIRST=ALPHA,OTHER=ALPHA,            *
               VALIDCK=VCKRFM,PROMPT='RECFM',                          *
               HELP='(F,V or U) (B) (S) (A or M) only'
@KYL#   IKJSUBF
@KYL    IKJIDENT 'Key length',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,   *
               INTEG,VALIDCK=VCKKYLN,PROMPT='Key length'
@DSO#   IKJSUBF
@DSO    IKJIDENT 'DSORG',MAXLNTH=3,FIRST=ALPHA,OTHER=ALPHA,            *
               VALIDCK=VCKDSO,PROMPT='DSORG',                          *
               HELP='IS,ISU,PO,POU,PS,PSU,DA or DAU only'
@CRE#   IKJSUBF
@CRE    IKJIDENT 'CREDT',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,        *
               ASTERISK,VALIDCK=VCKCRE,PROMPT='Creation date',         *
               HELP=('5 DIGIT JULIAN DATE OR *',                       *
               '* FOR YESTERDAY''S DATE')
@EXP#   IKJSUBF
@EXP    IKJIDENT 'EXPDT',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,        *
               ASTERISK,VALIDCK=VCKEXP,PROMPT='Expiration date',       *
               HELP=('5 DIGIT JULIAN DATE OR *',                       *
               '* FOR YESTERDAY''S DATE')
@PWD#   IKJSUBF
@PWD    IKJIDENT 'Password option',MAXLNTH=1,FIRST=ALPHA,              *
               VALIDCK=VCKPWD,PROMPT='Password option character',      *
               HELP='"P" to ENABLE password, "U" to DISABLE password, "*
               R" to ENABLE for READ access or "W" to ENABLE for WRITE *
               access only'
   AGO   .NORACF3
@RACF#  IKJSUBF
@RACF   IKJIDENT 'RACF option',MAXLNTH=1,FIRST=ALPHA,                  *
               VALIDCK=VCKRACF,PROMPT='RACF SET CHARACTER',            *
               HELP='''P'' to set RACF bit or ''U'' to remove RACF bit'
.NORACF3 ANOP  ,
@VOL#   IKJSUBF
@VOL    IKJIDENT 'Volume',MAXLNTH=6,FIRST=ALPHANUM,OTHER=ALPHANUM,     *
               PROMPT='Volume serial number'
@SEC#   IKJSUBF
@SEC    IKJIDENT 'Sec Alloc',MAXLNTH=4,FIRST=NUMERIC,OTHER=NUMERIC,    *
               INTEG,VALIDCK=VCKSECO,PROMPT='Secondary allocation'
        IKJENDP
         REGEQU ,
         END   ,



Martin Hamilton
Technical Consultant
Thomson Tour Operations Ltd (UK)                               c Xephon 1994

