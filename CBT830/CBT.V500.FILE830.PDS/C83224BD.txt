DASD stress testing - a STARTIO experiment

Requests for device I/O are usually initiated in a simple manner
- GET/PUT, READ/WRITE, GETLINE/PUTLINE. An access
method and its I/O driver become integral components of the
myriad events which chain from this humble request. The
purpose of the access method and its I/O driver is to provide a
link between the I/O requestor and Input Output Supervisor
(IOS). This link is provided by the STARTIO macro.

The information necessary to process the I/O request is
supplied to the STARTIO macro through an SRB/IOSB control
block pair. The STARTIO macro passes control to IOS and,
from the information contained in the SRB/IOSB control block
pair, IOS is able to determine for which device the SIO (pre-
370/XA) or SSCH (370/XA and more current) instruction is to
be issued (remember, the STARTIO macro is not the SIO or
SSCH instruction).

Restrictions of higher-level I/O techniques may lead someone
to consider implementing their own I/O driver. Some
advantages you can realize by using the STARTIO macro in
place of higher level I/O techniques include:

o      Channel program pre-fixing can be avoided

o      Channel programs can use format 1 CCWs

o      I/O can be issued to 'not ready' devices

o      Fewer control blocks are involved

o      Processing generally follows a shorter instruction path.

Conversely, some disadvantages of using the STARTIO macro include:

o      The code must run in supervisor state and key zero

o      Channel program and data addresses must be real

o      Error recovery is the responsibility of the I/O driver.

Requirements that must be adhered to when designing an I/O
driver are as follows:

1      The SRB/IOSB must reside in commonly addressable
      page-fixed storage.

2      The channel programs must be constructed using real
      addresses.

3      The channel programs and data areas must be page fixed.

4      The I/O driver exits (IOSABN, IOSNRM, IOSPGAD,
      and, if used, IOSPCI and IOSDIE) should be page fixed
      and the address space should be non-swappable (at least
      while waiting for the I/O to complete).

5      The SRB/IOSB must be initialized to the minimal level
      outlined below:

      o      SRBPARM contains the address of the IOSB.

      o      IOSSRB contains the address of the SRB.

      o      IOSASID contains the ASID of the I/O driver.

      o      IOSDVRID contains the I/O driver-id (usually the
            miscellaneous driver-id X'01').

      o      IOSUCB contains the address of the UCB for the
            device for which the I/O is being requested.

      o      IOSABN contains the address of the abnormal exit
            (invoked when a bad I/O status is detected).

      o      IOSNRM contains the address of the normal exit
            (invoked when no errors have been detected).

      o      IOSPGAD contains the address of the termination exit
            (invoked at I/O termination and generally used to
            notify the driver of I/O completion).

      o      IOSRST contains the real address of the channel
            program.

      o      IOSVST contains the virtual address of the channel
            program.

      o      IOSFLA, IOSFLB, IOSFLC, IOSFLD, IOSOPT1, and
            IOSOPT2 indicate to IOS the various options the I/O
            request requires (not all flag/option bytes will be used
            for every I/O since flags are set only as necessary to
            achieve desired results).

The discussion so far has been a superficial overview of the
requirements for using the STARTIO macro. The following
DASDKILL program uses the STARTIO macro to initiate the
I/O operations to stress-test a CKD DASD volume. All that is
required for this utility to run  under MVS is that the DASD
being stressed is channel attached. The device does not have to
be on-line to MVS, nor does it require a volume label or
VTOC (although it may have one). Parameters allow you
optionally to write over the entire volume, and, if the volume
has been pre-initialized, either to preserve or to  destroy the
existing volume label, VTOC, and indexed VTOC.

The program accepts the following parameters:

o      UNIT(xxx) - where xxx is the unit address of the DASD
      volume to be stressed. This parameter is required.

o      SEEKLIMIT(dddddddd) - where dddddddd is an eight-
      digit decimal number indicating the number of random
      seeks that are to take place. This is an optional parameter
      with the default being '00010000'. SEEKLIMIT when
      specified along with NOWRITE and NOERASE allows
      you to perform random seeks without destroying any
      existing volume data.

o      PRESERVE/NOPRESERVE - this parameter indicates
      whether the label and VTOC tracks are to be preserved if
      WRITE and/or ERASE are also specified. The parameter is
      optional with the default being PRESERVE.

o      WRITE/NOWRITE - this parameter indicates whether a
      full-track write is to be performed to each volume track.
      When WRITE is specified along with PRESERVE, the
      label, VTOC, and indexed VTOC tracks are bypassed by
      any write request. If the WRITE parameter is requested,
      the full-track write operation takes place prior to the
      random seeks. This parameter is optional with the default
      being NOWRITE.

o      ERASE/NOERASE - this parameter indicates whether a
      full-track erase is to be performed to each volume track.
      When ERASE is specified along with PRESERVE, the
      label, VTOC, and indexed VTOC tracks are bypassed by
      any erase request. If the ERASE parameter is requested,
      the full-track erase operation takes place following the
      random seeks. The parameter is optional with the default
      being NOERASE.

The utility can be invoked as follows:

//ERASE    EXEC PGM=DASDKILL,
//         PARM='UNIT(120),SEEKLIMIT(00050000),NOPRESERVE,WRITE,ERASE'
//STEPLIB  DD   DSN=a.apf.library,DISP=SHR
//SYSPRINT DD   SYSOUT=A

The parameters can be specified in random order with UNIT
being required. In the above example, all tracks will be issued
a full-track write (including the label and VTOC) followed by
50,000 random track seeks concluding with a track-by-track
full-volume erase.

If PRESERVE, NOWRITE, and NOERASE are requested (or
defaulted to), the volume data is preserved. If PRESERVE is
requested with WRITE and/or ERASE, the volume label and
VTOC are preserved; however, you may want to review the
use of this parameter combination for volumes containing valid
datasets since the VTOC, upon stress-test completion, would
not accurately reflect the volume status.

The requested DASD volume may be on-line or off-line when
the utility runs. Appropriate WTORs are issued prior to the
stress-test start to verify whether or not the operation should
continue. DASDKILL should be linked with AC(1) and reside
in an APF-authorized library.


DASDKILL PROGRAM

DASDKILL CSECT
         STM   R14,R12,12(R13)        SAVE INCOMING ENVIRONMENT
         LR    R10,R15                SET UP MODULE ...
         USING DASDKILL,R10,R12          ADDRESSABILITY
         LA    R12,4095(,R10)         ESTABLISH SECOND ...
         LA    R12,1(,R12)               BASE REGISTER
         ST    R13,SAVEAREA+4         SAVE OLD SAVEAREA
         LA    R13,SAVEAREA           LOAD NEW SAVEAREA
         L     R2,0(,R1)              GET PARAMETER INFORMATION
         OPEN  (SYSPRINT,OUTPUT)      OPEN THE MESSAGE FILE
         CLC   0(2,R2),=H'0'          ANY PARMS?
         BE    PARMERR                NO - ISSUE AN ERROR
         LA    R3,2(,R2)              GET PARM START ADDRESS
         LR    R4,R3                  GET PARM END ...
         AH    R4,0(,R2)                 ADDRESS
PARMLOOP CR    R3,R4                  END OF PARMS?
         BNL   PARMEND                YES - GO PROCESS
         BAL   R14,NEXTPARM           EXTRACT NEXT PARM
         LA    R3,1(,R3)              POINT TO NEXT BYTE
         CLC   PARMAREA(5),=C'UNIT('  A UNIT ADDRESS?
         BE    UNITPARM               YES - GET UNIT ADDRESS
         CLC   PARMAREA(10),=C'SEEKLIMIT(' RANDOM SEEK LIMIT SPECIFIED?
         BE    SEEKPARM               YES - GET SEEK LIMIT
         CLC   PARMAREA(6),=C'WRITE ' WRITE REQUESTED?
         BE    WRITPARM               YES - SET WRITE FLAG
         CLC   PARMAREA(8),=C'NOWRITE ' NOWRITE REQUESTED?
         BE    NOWRTPRM               YES - SET NOWRITE FLAG
         CLC   PARMAREA(6),=C'ERASE ' ERASE REQUESTED?
         BE    ERASPARM               YES - SET ERASE FLAG
         CLC   PARMAREA(8),=C'NOERASE ' NOERASE REQUESTED?
         BE    NOERSPRM               YES - SET NOERASE FLAG
         CLC   PARMAREA(9),=C'PRESERVE ' PRESERVE REQUESTED?
         BE    PRSRVPRM               YES - SET PRESERVE FLAG
         CLC   PARMAREA(11),=C'NOPRESERVE ' NOPRESERVE REQUESTED?
         BE    NOPRSPRM               YES - SET NOPRESERVE FLAG
         B     PARMERR                ISSUE AN ERROR
UNITPARM CLI   PARMAREA+8,C')'        UNIT DELIMITER?
         BNE   PARMERR                NO - ISSUE AN ERROR
         MVC   DBL1(3),PARMAREA+5     SAVE THE UNIT ADDRESS
         TR    DBL1(3),TRTABLE        TRANSLATE TO HEX
         LA    R15,DBL1               GET AREA ADDRESS
         L     R1,=F'3'               SET LOOP COUNT LIMIT
UNITLOOP CLI   0(R15),X'FF'           AN INVALID CHARACTER?
         BE    PARMERR                YES - ISSUE AN ERROR
         LA    R15,1(,R15)            POINT TO NEXT BYTE
         BCT   R1,UNITLOOP            CHECK IT OUT
         PACK  DBL2(8),DBL1(3)        PACK IT
         L     R15,DBL2+4             LOAD PACKED VALUE
         SRL   R15,4                  SHIFT OVER 4 BITS
         STH   R15,UNITADDR           SAVE THE UNIT ADDRESS
         B     PARMLOOP               GET NEXT PARM
SEEKPARM CLI   PARMAREA+18,C')'       SEEKLIMIT DELIMITER?
         BNE   PARMERR                NO - ISSUE AN ERROR
         LA    R14,PARMAREA+10        GET START OF SEEK LIMIT ADDRESS
         L     R15,=F'8'              SET LOOP COUNT
SEEKLOOP TM    0(R14),X'F0'           A DECIMAL DIGIT?
         BNO   PARMERR                NO - ISSUE AN ERROR
         LA    R14,1(,R14)            POINT TO NEXT PARM BYTE
         BCT   R15,SEEKLOOP           CHECK IT OUT
         PACK  DBL1(8),PARMAREA+10(8) PACK THE INPUT PARMS
         CVB   R15,DBL1               CONVERT TO BINARY
         ST    R15,SEEKLIM            SAVE IT
         B     PARMLOOP               GET NEXT PARM
WRITPARM TM    FLAG+1,NOWRITEF        NOWRITE ALREADY SET?
         BO    PARMERR                YES - ISSUE AN ERROR
         OI    FLAG+1,WRITEF          SET WRITE FLAG
         OI    FLAG,WRITEF            SET WRITE FLAG
         B     PARMLOOP               GET NEXT PARM
NOWRTPRM TM    FLAG+1,WRITEF          WRITE ALREADY SET?
         BO    PARMERR                YES - ISSUE AN ERROR
         OI    FLAG+1,NOWRITEF        SET NOWRITE FLAG
         B     PARMLOOP               GET NEXT PARM
ERASPARM TM    FLAG+1,NOERASEF        NOERASE ALREADY SET?
         BO    PARMERR                YES - ISSUE AN ERROR
         OI    FLAG+1,ERASEF          SET ERASE FLAG
         OI    FLAG,ERASEF            SET ERASE FLAG
         B     PARMLOOP               GET NEXT PARM
NOERSPRM TM    FLAG+1,ERASEF          ERASE ALREADY SET?
         BO    PARMERR                YES - ISSUE AN ERROR
         OI    FLAG+1,NOERASEF        SET NOWRITE FLAG
         B     PARMLOOP               GET NEXT PARM
PRSRVPRM TM    FLAG+2,NOPRSRVF        NOPRESERVE ALREADY SET?
         BO    PARMERR                YES - ISSUE AN ERROR
         OI    FLAG+2,PRESRVF         SET PRESERVE FLAG
         B     PARMLOOP               GET NEXT PARM
NOPRSPRM TM    FLAG+2,PRESRVF         PRESERVE ALREADY SET?
         BO    PARMERR                YES - ISSUE AN ERROR
         OI    FLAG+2,NOPRSRVF        SET NOPRESERVE FLAG
         B     PARMLOOP               GET NEXT PARM
PARMEND  CLC   UNITADDR(2),=2X'FF'    A UNIT ADDRESS?
         BE    PARMERR                NO - ISSUE AN ERROR
         L     R2,=F'65536'           GET LENGTH VALUE
         GETMAIN RU,LV=(R2),LOC=BELOW,BNDRY=PAGE GET SOME STORAGE
         ST    R1,DATAADDR            SAVE THE STORAGE ADDRESS
         MODESET KEY=ZERO,MODE=SUP
         L     R5,DATAADDR            GET THE STORAGE ADDRESS
         L     R2,=F'65536'           GET THE LENGTH
         LA    R6,0(R2,R5)            GET ENDING ADDRESS
         PGFIX R,A=(R5),EA=(R6),ECB=0 PAGE FIX GETMAINED STORAGE
         GETMAIN RU,LV=SRBSIZE+IOSEND-IOSB,LOC=BELOW,SP=227
         ST    R1,SRBADDR             SAVE SRB ADDRESS
         LA    R1,SRBSIZE(,R1)        GET IOSB ADDRESS
         ST    R1,IOSBADDR            SAVE IOSB ADDRESS
         SYSEVENT DONTSWAP            GO NONSWAPPABLE
         L     R6,=A(MODEND)          GET PROGRAM END ADDRESS
         PGFIX R,A=(R10),EA=(R6),ECB=0 PAGE FIX ENTIRE PROGRAM
         XR    R6,R6                  CLEAR THE REGISTER
         ICM   R6,B'0011',UNITADDR    GET UNIT ADDRESS
         LA    R13,EXITSAVE           LOAD SAVEAREA ADDRESS FOR IOSLOOK
         IOSLOOK DEV=(R6),UCB=(R7)    FIND THE UCB
         LA    R13,SAVEAREA           LOAD OLD SAVEARA
         LTR   R15,R15                FOUND THE UCB?
         BNZ   UCBERROR               NO - ISSUE AN ERROR
         TM    18(R7),X'20'           A DASD DEVICE?
         BZ    UCBERROR               NO - ISSUE AN ERROR
         ST    R7,UCBADDR             SAVE UCB ADDRESS
         MVC   CHARUNIT(3),13(R7)     SAVE THE CHARACTER UNIT ADDRESS
         DEVTYPE ,,UCBLIST=(UCBADDR,1),MF=(E,DEVTYPEL)
         LTR   R15,R15                INFORMATION FOUND OK?
         BNZ   UCBERROR               NO - ISSUE AN ERROR
         XR    R8,R8                  CLEAR R8
         LH    R8,DEVTYPEA+8          GET NUMBER OF CYLINDERS
         SH    R8,=H'2'               REDUCE BY TWO
         STH   R8,DATAAREA            SAVE
         LH    R8,DEVTYPEA+10         GET NUMBER OF TRACKS
         BCTR  R8,0                   REDUCE BY ONE
         STH   R8,DATAAREA+2          SAVE
         AH    R8,=H'1'               ADD ONE BACK
         MH    R8,DATAAREA            MULTIPLY BY END EXTENT CYLINDERS
         AH    R8,DATAAREA+2          ADD IN ONE ...
         AH    R8,=H'1'                  MORE CYLINDER
         STCM  R8,B'1111',FLOTTRK#+1  SAVE IN FLOATING ...
         MVI   FLOTTRK#,X'48'            POINT FORM
         TRKCALC FUNCTN=TRKBAL,UCB=(R7),R=1,K=0,DD=65535,MAXSIZE=YES,  X
               REGSAVE=YES
         ST    R0,MAXRLEN             SAVE MAX R1 RECORD LENGTH
         LR    R1,R7                  GET UCB ADDRESS
         S     R1,=F'36'              POINT TO SCHID AREA
         CLC   0(4,R1),=F'0'          ANYTHING?
         BE    UCBERROR               NO - ISSUE AN ERROR
         XC    DATAAREA(8),DATAAREA   CLEAR OUT THE AREA
         MVI   DATAAREA+4,X'03'       SET FOR RECORD 3
         MVC   IDAREA(8),DATAAREA     SET IDAREA VALUE
         BAL   R14,SRBINIT            INITIALIZE THE SRB/IOSB/CP
         MVC   WRITECCW+4(4),=F'80'   SET LENGTH
         MVI   WRITECCW,READ          SET READ
         MVI   WRITECCW+4,SLI         SET SLI FLAG
         L     R1,DATAADDR            GET ADDRESS OF DATA AREA
         LRA   R0,0(,R1)              GET REAL ADDRESS
         STCM  R0,B'0111',WRITECCW+1  SAVE IN THE CCW
         BAL   R14,STARTIO            GO ISSUE THE STARTIO
         NI    FLAG,255-WRITINIT      RESET THE FLAG
         CLI   ECB,X'7F'              WAS I/O OK?
         BE    LABELOK                YES - GO READ VTOC
         L     R14,IOSBADDR           GET IOSB ADDRESS
         CLC   IOSSNS-IOSB(2,R14),=X'0008'  RECORD NOT FOUND?
         BNE   UCBERROR               NO - IT'S SOME OTHER ERROR
GONOPRSV MVC   WTORTXT1+33(3),CHARUNIT MOVE THE UNIT # INTO THE MESSAGE
         LA    R1,WTORTXT1            GET WTOR TEXT ADDRESS
         BAL   R14,SENDWTOR           ISSUE THE WTOR
         LTR   R15,R15                POSITIVE REPLY?
         BNZ   FREEIT                 NO - END
         OI    FLAG+2,NOPRSRVF        SET NOPRESERVE FLAG
         B     KILLOK                 GO STRESS IT
LABELOK  XC    DATAAREA(8),DATAAREA   CLEAR OUT THE AREA
         L     R1,DATAADDR            GET DATA AREA ADDRESS
         MVC   DATAAREA(5),11(R1)     GET VTOC POINTER FROM VOL LBL REC
         MVC   VOLSER(6),4(R1)        GET VOLSER FROM VOLUME LABEL REC
         MVC   IDAREA(8),DATAAREA     SET IDAREA VALUE
         BAL   R14,SRBINIT            INITIALIZE THE SRB/IOSB/CP
         MVC   WRITECCW+4(4),=F'96'   SET LENGTH
         MVI   WRITECCW,READ          SET READ
         MVI   WRITECCW+4,SLI         SET SLI FLAG
         LRA   R0,DS4IDFMT            GET REAL DATA AREA ADDRESS
         STCM  R0,B'0111',WRITECCW+1  SAVE IN THE CCW
         BAL   R14,STARTIO            GO ISSUE THE STARTIO
         NI    FLAG,255-WRITINIT      RESET THE FLAG
         CLI   ECB,X'7F'              WAS I/O OK?
         BE    VTOCOK                 YES - GO READ INDEXED VTOC
         MVC   WTORTXT1+11(5),=C' VTOC' CHANGE MESSAGE APPROPRIATELY
         B     GONOPRSV               GO ISSUE WTOR
VTOCOK   TM    DS4VTOCI,DS4IVTOC      AN INDEXED VTOC?
         BZ    VTOCEND                NO - DON'T LOCATE ITS FORMAT 1
         XR    R2,R2                  GET NUMBER OF ...
         IC    R2,DS4DEVDT               DSCB'S/TRACK
         XR    R3,R3                  GET VTOC ...
         ICM   R3,B'0011',DS4VTOCE+2     START CYLINDER
         XR    R4,R4                  GET VTOC ...
         ICM   R4,B'0011',DS4VTOCE+4     START TRACK
         L     R5,=F'2'               GET STARTING RECORD NUMBER
VTOCLOOP STCM  R3,B'0011',DATAAREA    SAVE CYLINDER NUMBER
         STCM  R4,B'0011',DATAAREA+2  SAVE TRACK NUMBER
         STC   R5,DATAAREA+4          SAVE RECORD NUMBER
         CLC   DATAAREA(4),DS4VTOCE+6 END OF VTOC?
         BH    IVTOCERR               YES - MUST BE AN ERROR
         MVC   IDAREA(8),DATAAREA     SET IDAREA VALUE
         BAL   R14,SRBINIT            INITIALIZE THE SRB/IOSB/CP
         MVC   WRITECCW+4(4),=F'140'  SET LENGTH
         MVI   WRITECCW,READKD        SET READ KEY AND DATA
         LRA   R0,DS1DSNAM            GET REAL DATA AREA ADDRESS
         STCM  R0,B'0111',WRITECCW+1  SAVE IN THE CCW
         BAL   R14,STARTIO            GO ISSUE THE STARTIO
         NI    FLAG,255-WRITINIT      RESET THE FLAG
         CLI   ECB,X'7F'              WAS I/O OK?
         BNE   IVTOCERR               NO - ISSUE AN ERROR
         CLC   DS1DSNAM(12),=C'SYS1.VTOCIX.' IS IT THE INDEXED VTOC?
         BE    IXFLAG                 YES - WE'RE DONE
         AH    R5,=H'1'               ADD ONE TO RECORD COUNT
         CR    R5,R2                  PAST TRACK LIMIT?
         BNH   VTOCLOOP               NO - READ NEXT DSCB
         L     R5,=F'1'               SET TO RECORD ONE
         AH    R4,=H'1'               ADD ONE TO TRACK COUNT
         CH    R4,DS4DEVSZ+2          END OF CYLINDER?
         BL    VTOCLOOP               NO - READ NEXT DSCB
         XR    R4,R4                  SET TO TRACK ZERO
         AH    R3,=H'1'               ADD ONE TO CYLINDER COUNT
         B     VTOCLOOP               READ NEXT DSCB
IXFLAG   OI    FLAG,IXVTOC            SET INDEXED VTOC FLAG
VTOCEND  MODESET KEY=NZERO,MODE=PROB
         MVC   WTORTXT2+37(6),VOLSER  MOVE THE VOLSER INTO THE MESSAGE
         MVC   WTORTXT2+45(3),CHARUNIT MOVE THE UNIT # INTO THE MESSAGE
         LA    R1,WTORTXT2            GET WTOR TEXT ADDRESS
         BAL   R14,SENDWTOR           ISSUE THE WTOR
         LTR   R15,R15                POSITIVE REPLY?
         BNZ   FREEIT                 NO - END
         TM    FLAG+2,NOPRSRVF        NOPRESERVE SPECIFIED?
         BZ    CHKONLIN               NO - GO SEE IF IT'S ON-LINE
         TM    FLAG,WRITEF+ERASEF     EITHER WRITE OF ERASE SPECIFIED?
         BZ    CHKONLIN               NO - GO SEE IF IT'S ON-LINE
         MVC   WTORTXT3+50(6),VOLSER  MOVE THE VOLSER INTO THE MESSAGE
         MVC   WTORTXT3+58(3),CHARUNIT MOVE THE UNIT # INTO THE MESSAGE
         LA    R1,WTORTXT3            GET WTOR TEXT ADDRESS
         BAL   R14,SENDWTOR           ISSUE THE WTOR
         LTR   R15,R15                POSITIVE REPLY?
         BNZ   FREEIT                 NO - END
CHKONLIN TM    3(R7),X'80'            DEVICE IS ON-LINE?
         BZ    KILLOK                 NO - STRESS IT
         MVC   WTORTXT4+18(6),VOLSER  MOVE THE VOLSER INTO THE MESSAGE
         MVC   WTORTXT4+26(3),CHARUNIT MOVE THE UNIT # INTO THE MESSAGE
         LA    R1,WTORTXT4            GET WTOR TEXT ADDRESS
         BAL   R14,SENDWTOR           ISSUE THE WTOR
         LTR   R15,R15                POSITIVE REPLY?
         BNZ   FREEIT                 NO - END
KILLOK   XC    ECB(4),ECB             CLEAR THE ECB
         RESERVE (KILLMAJR,VOLSER,E,6,SYSTEMS),ECB=ECB,UCB=UCBADDR
         LTR   R15,R15                RESERVED THE VOLUME?
         BZ    RESERVOK               YES - GO AHEAD
         WAIT  ECB=ECB                WAIT FOR THE RESERVE
RESERVOK XC    IDAREA(8),IDAREA       CLEAR THE AREA
         L     R0,DATAADDR            GET THE STORAGE ADDRESS
         L     R1,=F'65536'           GET THE LENGTH
         LR    R14,R0                 SET SOURCE ADDRESS
         ICM   R15,B'1111',=X'FF000000' SET PAD VALUE
         MVCL  R0,R14                 INITIALIZE THE AREA
         TM    FLAG,WRITEF            WRITE FLAG SET?
         BNO   DOSEEKS                NO - GO DO RANDOM SEEKS
KILLIT   XR    R5,R5                  GET NUMBER ...
         LH    R5,DEVTYPEA+8             OF CYLINDERS
         BCTR  R5,0                   REDUCE BY ONE
         XR    R2,R2                  SET STARTING CYLINDER NUMBER
CYLLOOP  XR    R4,R4                  GET NUMBER ...
         LH    R4,DEVTYPEA+10            OF TRACKS
         XR    R3,R3                  SET STARTING TRACK NUMBER
TRKLOOP  XC    DATAAREA(8),DATAAREA   CLEAR THE COUNT AREA
         STCM  R2,B'0011',DATAAREA    SAVE CYLINDER NUMBER
         STCM  R3,B'0011',DATAAREA+2  SAVE TRACK NUMBER
         TM    FLAG,DOERASE           ARE WE ERASING?
         BZ    GOWRITE                NO - GO SET UP FOR WRITE
         MVI   WRITECCW,ERASE         MOVE IN ERASE COMMAND
         B     SETID                  GET SET THE SEARCH ID
GOWRITE  MVI   WRITECCW,WRITECKD      MOVE IN WRITECKD COMMAND
         L     R15,MAXRLEN            GET MAX RECORD LENGTH
         LTR   R15,R15                A KNOWN VALUE?
         BNZ   WRITEOK                YES - A WRITE CAN BE DONE
         MVI   WRITECCW,ERASE         DO AN ERASE INSTEAD
WRITEOK  MVI   DATAAREA+4,X'01'       SET RECORD NUMBER
         MVC   DATAAREA+6(2),MAXRLEN+2 SET THE DATA LENGTH
         AH    R15,=H'8'              ADD COUNT LENGTH
         STCM  R15,B'0011',WRITECCW+6 SAVE IN WRITECKD CCW
SETID    MVC   IDAREA(4),DATAAREA     SAVE SEEK INFORMATION
         L     R14,DATAADDR           GET STORAGE ADDRESS
         MVC   0(8,R14),DATAAREA      MOVE IN COUNT KEY DATA INFO
         STH   R2,SAVECCHH            SAVE CYLINDER
         STH   R3,SAVECCHH+2          SAVE TRACK
         TM    FLAG+2,NOPRSRVF        NOPRESERVE FLAG SET?
         BO    NOTVTOC                YES - DESTROY EVERYTHING
         CLC   SAVECCHH(4),=F'0'      CYLINDER ZERO TRACK ZERO?
         BE    CMDNOOP                YES - NO-OP THE COMMAND
CHKVTOC  CLC   SAVECCHH(4),DS4VTOCE+2 PRIOR TO REAL VTOC?
         BL    CHKIXV                 YES - CHECK IF INDEXED VTOC
         CLC   SAVECCHH(4),DS4VTOCE+6 AFTER REAL VTOC?
         BH    CHKIXV                 YES - CHECK IF INDEXED VTOC
         B     CMDNOOP                NO - NO-OP THE COMMAND
CHKIXV   TM    FLAG,IXVTOC            AN INDEXED VTOC?
         BZ    NOTVTOC                NO - PROCESS
         CLC   SAVECCHH(4),DS1EXT1+2  PRIOR TO INDEXED VTOC?
         BL    NOTVTOC                YES - PROCESS
         CLC   SAVECCHH(4),DS1EXT1+6  AFTER INDEXED VTOC?
         BH    NOTVTOC                YES - PROCESS
CMDNOOP  MVI   WRITECCW,X'03'         NO-OP THE COMMAND
NOTVTOC  MODESET MODE=SUP,KEY=ZERO
         BAL   R14,SRBINIT            INITIALIZE THE SRB/IOSB/CP
         BAL   R14,STARTIO            GO ISSUE THE STARTIO
         MODESET MODE=PROB,KEY=NZERO
         CLI   ECB,X'7F'              SUCCESSFUL WRITE OR ERASE?
         BE    CHKTRK                 YES - GO PROCESS NEXT TRACK
         STH   R2,DBL2                SAVE CURRENT CYLINDER
         STH   R3,DBL2+2              SAVE CURRENT TRACK
         BAL   R14,WRITEERR           GO ISSUE AN ERROR
         OC    RTNCODE(4),=F'4'       SET THE RETURN CODE
CHKTRK   AH    R3,=H'1'               ADD ONE TO TRACK COUNT
         BCT   R4,TRKLOOP             IF MORE TRACKS, GO PROCESS
         AH    R2,=H'1'               ADD ONE TO CYLINDER COUNT
         BCTR  R5,0                   REDUCE LOOP COUNTER
         LTR   R5,R5                  END OF LOOP?
         BNZ   CYLLOOP                NO - LOOP BACK
         TM    FLAG,DOERASE           ALREADY DONE THE ERASE?
         BO    ENDIT                  YES - ALL DONE
DOSEEKS  OI    FLAG,DOERASE           SET THE FLAG
         STCK  TIMEAREA               GET CURRENT CLOCK VALUE
         MVC   FIXSEED+2(2),TIMEAREA+5 GET A SEED VALUE
         LD    R0,ONE                 GET FLOATING POINT ONE
         DD    R0,FLOTTRK#            DIVIDE BY NUMBER OF TRACKS + 1
         STD   R0,SEGMENT             SAVE SEGMENT LIMIT
         MVI   WRITECCW,X'03'         NO-OP THE WRITE
         MVI   WRITECCW+4,SLI         TURN OFF IDA
         ICM   R8,B'1111',SEEKLIM     GET LOOP LIMIT
         BZ    SEEKDONE               IF ZERO, END
RANLOOP  L     R1,FIXSEED             GET SEED VALUE
         XR    R0,R0                  CLEAR RO
         M     R0,CON01               MULTIPLY BY 16807
         LTR   R1,R1                  POSITIVE?
         BNM   NOADD01                YES - NO NEED TO MAKE POSITIVE
         A     R1,CON02               ADD 2147483647
NOADD01  ST    R1,FIXSEED             SAVE NEW SEED
         XC    FLOTSEED(8),FLOTSEED   CLEAR THE AREA
         STCM  R1,B'1111',FLOTSEED+1  SAVE IN FLOATING ...
         MVI   FLOTSEED,X'48'            POINT FORM
         LD    R0,FLOTSEED            GET FLOATING POINT SEED VALUE
         MD    R0,CON03               MULTIPLY BY .0000000004656613
         DD    R0,SEGMENT             DIVIDE BY THE SEGMENT
         STD   R0,SAVEVAL             SAVE THE VALUE
         XR    R3,R3                  LOAD MAX ...
         ICM   R3,B'0011',SAVEVAL+1      SIGNIFICANT DIGITS
         XR    R1,R1                  CALCULATE ...
         IC    R1,SAVEVAL                NUMBER OF ...
         N     R1,=X'0000000F'              SIGNIFICANT DIGITS
         L     R2,=F'4'               SET MAXIMUM NUMBER
         SR    R2,R1                  CALCULATE DIFFERENCE
         SLL   R2,2                   MULTIPLY BY FOUR
         STC   R2,SHIFT+3             SAVE IN NEXT INSTRUCTION
SHIFT    SRL   R3,0                   SHIFT OVER
         XR    R2,R2                  CLEAR R2 FOR DIVIDE
         XR    R15,R15                GET NUMBER OF ...
         LH    R15,DEVTYPEA+10           TRACKS PER CYLINDER
         DR    R2,R15                 CALCULATE CYLINDER AND TRACK
         STCM  R3,B'0011',IDAREA      SAVE THE CYLINDER NUMBER
         STCM  R2,B'0011',IDAREA+2    SAVE THE TRACK NUMBER
         XC    DATAAREA(8),DATAAREA   CLEAR THE AREA
         MVC   DATAAREA(4),IDAREA     GET SEEK INFO
         MODESET MODE=SUP,KEY=ZERO
         BAL   R14,SRBINIT            INITIALIZE THE SRB/IOSB/CP
         BAL   R14,STARTIO            GO ISSUE THE STARTIO
         MODESET MODE=PROB,KEY=NZERO
         CLI   ECB,X'7F'              SEEK SUCCESSFUL?
         BE    NEXTRAN                YES - GO GENERATE NEXT TRACK
         STH   R3,DBL2                GET CURRENT CYLINDER
         STH   R2,DBL2+2              GET CURRENT TRACK
         MVC   ERROR02+26(4),=C'SEEK' CHANGE MESSAGE
         OC    RTNCODE(4),=F'8'       SET THE RETURN CODE
         BAL   R14,WRITEERR           GO ISSUE AN ERROR
NEXTRAN  BCT   R8,RANLOOP             GO GENERATE NEXT RANDOM TRACK
SEEKDONE MVC   WRITECCW+6(2),=X'0008' SET THE LENGTH
         MVC   ERROR02+26(4),=C'ERAS' CHANGE MESSAGE
         TM    FLAG,ERASEF            ERASE FLAG SET?
         BO    KILLIT                 YES - GO ERASE
ENDIT    PUT   SYSPRINT,MSG01         WRITE OUT FINAL MESSAGE
         DEQ   (KILLMAJR,VOLSER,6,SYSTEMS),RET=HAVE
FREEIT   MODESET KEY=ZERO,MODE=SUP
         L     R2,SRBADDR             GET STORAGE ADDRESS
         FREEMAIN RU,LV=SRBSIZE+IOSEND-IOSB,A=(R2),SP=227
         MODESET KEY=NZERO,MODE=PROB
CLOSEIT  CLOSE SYSPRINT               CLOSE MESSAGE FILE
RETURN   L     R15,RTNCODE            SET RETURN CODE
         L     R13,SAVEAREA+4         LOAD OLD SAVEAREA
         LM    R0,R12,20(R13)         RESTORE THE ENVIRONMENT
         L     R14,12(,R13)           GET RETURN ADDRESS
         BR    R14                    RETURN
WRITEERR ST    R14,EXITSAVE           SAVE THE RETURN ADDRESS
         UNPK  DBL1(9),DBL2(5)        UNPACK THE VALUE
         NC    DBL1(8),=8X'0F'        CLEAR HIGH ORDER NIBBLES
         TR    DBL1(8),=C'0123456789ABCDEF' MAKE THEM READABLE
         MVC   ERROR02+43(4),DBL1     PUT THE CYLINDER # IN THE MESSAGE
         MVC   ERROR02+55(4),DBL1+4   PUT THE TRACK NUMBER IN THE MSG
         MVC   ERROR02+105(6),VOLSER  PUT THE VOLSER IN THE MESSAGE
         MVC   ERROR02+113(3),CHARUNIT PUT THE DEVICE # IN THE MSG
         PUT   SYSPRINT,ERROR02       WRITE ERROR MESSAGE
         L     R14,EXITSAVE           LOAD THE RETURN ADDRESS
         BR    R14                    RETURN
PARMERR  PUT   SYSPRINT,ERROR01A      WRITE ERROR MESSAGE
         PUT   SYSPRINT,ERROR01B      WRITE ERROR MESSAGE
         PUT   SYSPRINT,ERROR01C      WRITE ERROR MESSAGE
         MVC   RTNCODE(4),=F'16'      SET RETURN CODE
         B     CLOSEIT                RETURN
UCBERROR PUT   SYSPRINT,ERROR03       WRITE ERROR MESSAGE
         MVC   RTNCODE(4),=F'20'      SET RETURN CODE
         B     FREEIT                 RETURN
IVTOCERR PUT   SYSPRINT,ERROR00       WRITE ERROR MESSAGE
         MVC   RTNCODE(4),=F'24'      SET RETURN CODE
         B     FREEIT                 RETURN
STARTIO  XC    ECB(4),ECB             CLEAR OUT ECB AREA
         L     R1,SRBADDR             GET SRB ADDRESS
         STM   R14,R12,12(R13)        SAVE CURRENT ENVIRONMENT
         STARTIO SRB=(1),TCB=SRB      START THE REQUESTED I/O
         LM    R14,R12,12(R13)        RESTORE THE ENVIRONMENT
         WAIT  ECB=ECB                WAIT FOR I/O
         BR    R14                    RETURN
SENDWTOR MVC   KILLWTOR+16(120),0(R1) COPY THE WTOR TEXT
WTORLOOP XC    ECB(4),ECB             CLEAR THE ECB
         MVI   REPLY,C' '             CLEAR THE REPLY AREA
KILLWTOR WTOR  '123456789+123456789+123456789+123456789+123456789+12345X
               6789+123456789+123456789+123456789+123456789+123456789+1X
               23456789+',REPLY,1,ECB,ROUTCDE=(1)
         WAIT  ECB=ECB                WAIT FOR A REPLY
         XR    R15,R15                SET DEFAULT RETURN CODE
         OI    REPLY,C' '             SET TO UPPER CASE
         CLI   REPLY,C'Y'             CONTINUE?
         BE    WTORRTRN               YES - RETURN
         CLI   REPLY,C'N'             CANCEL?
         BNE   WTORLOOP               NO - ISSUE MESSAGE AGAIN
         L     R15,=F'4'              SET RETURN CODE
WTORRTRN BR    R14                    RETURN
SRBINIT  EQU   *
*   THE FOLLOWING ROUTINE INITIALIZES THE SRB/IOSB
         STM   R2,R3,SAVELOC          SAVE CURRENT CCHH
         LM    R2,R3,SRBADDR          GET SRB/IOSB ADDRESS
         USING PSA,0                  SET PSA ADDRESSABILITY
         USING SRB,R2                 SET SRB ADDRESSABILITY
         USING IOSB,R3                SET IOSB ADDRESSABILITY
         XC    0(SRBSIZE+IOSEND-IOSB,R2),0(R2) CLEAR THE AREA
*   INITIALIZE THE SRB
         MVC   SRBID(4),=C'SRB '      MOVE IN SRB IDENTIFIER
         MVC   SRBPTCB(4),PSATOLD     POINT SRB'S PURGEDQ TCB TO US
         ST    R3,SRBPARM             SAVE IOSB ADDRESS IN SRB
*   INITIALIZE THE IOSB
         MVC   IOSUCB+1(3),UCBADDR+1  MOVE IN THE UCB ADDRESS
         ST    R2,IOSSRB              SAVE SRB ADDRESS IN IOSB
         L     R1,PSAAOLD             GET ASCB ADDRESS
         MVC   IOSASID(2),ASCBASID-ASCB(R1) SAVE THE ASID
         LA    R1,PREFIX              GET VIRTUAL CHANNEL PGM ADDRESS
         ST    R1,IOSVST              SAVE VIRTUAL ADDRESS OF CP
         LRA   R1,0(,R1)              GET REAL CHANNEL PGM ADDRESS
         ST    R1,IOSRST              SAVE REAL ADDRESS OF CP
         MVC   IOSPGAD(4),=A(TERMEXIT) GET TERMINATION EXIT ADDRESS
         MVC   IOSNRM(4),=A(NORMEXIT) GET NORMAL EXIT ADDRESS
         MVC   IOSABN(4),=A(NORMEXIT) GET ABNORMAL EXIT ADDRESS
         MVI   IOSDVRID,IOSMISID      SET MISCELLANEOUS DRIVER ID
         MVI   IOSFLA,IOSCCHN         ALLOW COMMAND CHAINING
         OI    IOSFLB,IOSIONRD        ALLOW I/O TO NOT READY DEVICE
         OI    IOSPKEY,IOSCHCMP       TELL IOS NOT TO BUILD CP PREFIX
         MVI   IOSOPT,IOSBYP          BYPASS CP PREFIXING
         MVC   IOSEEK+3(4),DATAAREA   MOVE IN SEEK INFORMATION
         MVC   IOSEEKA+3(4),DATAAREA  MOVE IN SEEK INFORMATION
*   INITIALIZE THE CHANNEL PROGRAM
         TM    FLAG,DOERASE           ARE WE ERASING?
         BNO   WRITING                NO - WE MUST BE WRITING
         TM    FLAG,ERASINIT          ERASE CP IS INITIALIZED?
         BO    INITEND                YES - GO HOME
         LRA   R0,DATAAREA            GET REAL ADDRESS
         STCM  R0,B'0111',WRITECCW+1  SAVE IN CCW
         MVI   WRITECCW+4,SLI         SET CCW FLAGS
         OI    FLAG,ERASINIT          SET ERASE INITIALIZED FLAG
         B     INITEND                GO HOME
WRITING  TM    FLAG,WRITINIT          WRITE CP IS INITIALIZED?
         BO    INITEND                YES - GO HOME
         LRA   R0,IOSEEK+1            GET SEEK DATA REAL ADDRESS
         STCM  R0,B'0111',SEEKCCW+1   SAVE IN SEEK CCW
         LRA   R0,SFMCCW+5            GET SET FILE MASK DATA REAL ADDR
         STCM  R0,B'0111',SFMCCW+1    SAVE IN SET FILE MASK CCW
         LRA   R0,IDAREA              GET SEARCH ID DATA REAL ADDRESS
         STCM  R0,B'0111',SIDCCW+1    SAVE IN SEARCH ID CCW
         LRA   R0,WRITEPGM            GET TIC REAL ADDRESS
         STCM  R0,B'0111',TICCCW+1    SAVE IN TIC CCW
         XR    R15,R15                CLEAR R15
         ICM   R15,B'0111',WRITECCW+5 GET LENGTH
         LA    R2,IDAWAREA            GET IDAW STORAGE AREA ADDRESS
         LRA   R0,0(,R2)              GET REAL ADDRESS
         STCM  R0,B'0111',WRITECCW+1  SAVE IN CCW
         MVI   WRITECCW+4,SLI+IDA     SET CCW FLAGS
         L     R3,DATAADDR            GET STORAGE ADDRESS
         OI    FLAG,WRITINIT          SET WRITE INIT FLAG
IDAWLOOP LRA   R0,0(,R3)              GET REAL STORAGE AREA ADDRESS
         ST    R0,0(,R2)              SAVE IN IDAW
         S     R15,=F'2048'           REDUCE BY 2048
         BM    INITEND                IF NEGATIVE GO HOME
         LA    R2,4(,R2)              POINT TO NEXT IDAW
         LA    R3,2048(,R3)           POINT TO NEXT DATA AREA
         B     IDAWLOOP               DO NEXT ONE
INITEND  LM    R2,R3,SAVELOC          RESTORE CURRENT CCHH
         BR    R14                    RETURN
NEXTPARM MVC   PARMAREA(20),=20C' '   CLEAR OUT THE AREA
         LA    R15,PARMAREA           GET AREA ADDRESS
         L     R1,=F'20'              SET MAX LOOP COUNT
NEXTBYTE CLI   0(R3),C','             END OF THIS PARM?
         BER   R14                    YES - RETURN
         CR    R3,R4                  END OF PARMS?
         BNLR  R14                    YES - RETURN
         MVC   0(1,R15),0(R3)         SAVE THIS CHARACTER
         LA    R3,1(,R3)              ADD ONE TO SOURCE
         LA    R15,1(,R15)            ADD ONE TO TARGET
         BCT   R1,NEXTBYTE            IF MORE ROOM, GET NEXT BYTE
         BR    R14                    RETURN
NORMEXIT XR    R15,R15                NORMAL RETURN
         BSM   0,R14                  RETURN
TERMEXIT LA    R13,EXITSAVE-TERMEXIT(,R15) GET SAVE AREA ADDRESS
         STM   R0,R15,0(R13)          SAVE THE ENVIRONMENT
         LR    R6,R15                 SAVE ROUTINE ADDRESS
         USING TERMEXIT,R6
         XR    R10,R10                GET I/O ...
         ICM   R10,B'1000',IOSCOD-IOSB(R1)   RETURN CODE
         LA    R11,ECB-TERMEXIT(,R6)  GET ECB ADDRESS
         LR    R9,R13                 R9 IS PRESERVED DURING B/E POST
         L     R15,16                 GET CVT ADDRESS
         L     R15,CVTOPT01-CVT(,R15) GET POST ROUTINE ADDRESS
         BALR  R14,R15                POST THE ECB
         L     R1,4(,R9)              GET IOSB ADDRESS
         L     R6,60(,R9)             GET EXIT ADDRESS
         ICM   R1,B'1111',IOSIPIB-IOSB(R1) GET THE IPIB ADDRESS
         BZ    RELLOCK-TERMEXIT(R6)   IF NONE GO FREE LOCAL LOCK
         XR    R0,R0                  INDICATE LOCAL LOCK HELD
         L     R15,16                 GET CVT ADDRESS
         L     R15,CVTIXAVL-CVT(,R15) GET IOCOM ADDRESS
         L     R15,IOCQCNT-IOCOM(,R15) GET PURGE IPIB IOS RTN ADDR
         BALR  R14,R15                UPDATE QUIESCE COUNT
RELLOCK  SETLOCK RELEASE,TYPE=LOCAL,RELATED=(POST)
         LM    R0,R15,0(R9)           RESTORE THE ENVIRONMENT
         XR    R15,R15                SET RETURN CODE
         BSM   0,R14                  RETURN
EXITSAVE DS    16F
SAVELOC  DS    2F
KILLMAJR DC    C'DASDKILL'
PARMAREA DS    20C
SYSPRINT DCB   MACRF=(PM),DDNAME=SYSPRINT,LRECL=132,DSORG=PS
MSG01    DC    CL132'DKILL00I - STRESS TEST COMPLETE.'
ERROR00  DC    CL132'DKILL11I - ERROR ATTEMPTING TO LOCATE FORMAT 1 DSCX
               B FOR INDEXED VTOC.  STRESS TEST IS TERMINATING.'
ERROR01A DC    CL132'DKILL12I - INVALID PARM ENTERED. VALID FORMAT: UNIX
               T(XXX),<SEEKLIMIT(DDDDDDDD)>,<WRITE/NOWRITE>,<ERASE/NOERX
               ASE>,<PRESERVE/NOPRESERVE>'
ERROR01B DC    CL132'DKILL12I - UNIT MUST BE SPECIFIED AS A PARM.  ALL X
               0THER PARMS ARE OPTIONAL.'
ERROR01C DC    CL132'DKILL12I - WRITE/NOWRITE ARE MUTUALLY EXCLUSIVE.  X
               ERASE/NOERASE ARE MUTUALLY EXCLUSIVE.  PRESERVE/NOPRESERX
               VE ARE MUTUALLY EXCLUSIVE.'
ERROR02  DC    CL132'DKILL13I - ERROR OCCURRED WRITING CYLINDER XXXX  TX
               RACK XXXX.  CHECK WITH DASD VENDOR TO VERIFY HEALTH OF XX
               XXXXX (XXX).'
ERROR03  DC    CL132'DKILL14I - DEVICE NOT AVAILABLE TO THIS SYSTEM OR X
               IS NON-DASD IN ORIGIN.  STRESS TEST IS TERMINATING.'
WTORTXT1 DC    CL120'DKILL01A - LABEL RECORD FOR UNIT XXX NOT FOUND, REX
               PLY ''Y'' TO CONTINUE STRESS TEST, ''N'' TO CANCEL.'
WTORTXT2 DC    CL120'DKILL02A - CONFIRM VOLUME STRESS FOR XXXXXX (XXX),X
                REPLY ''Y'' TO CONTINUE STRESS TEST, ''N'' TO CANCEL.'
WTORTXT3 DC    CL120'DKILL03A - CONFIRM LABEL AND VTOC DESTRUCTION FOR X
               XXXXXX (XXX), REPLY ''Y'' TO CONTINUE, ''N'' TO CANCEL.'
WTORTXT4 DC    CL120'DKILL04A - VOLUME XXXXXX (XXX) IS ONLINE, REPLY ''X
               Y'' TO CONTINUE STRESS TEST, ''N'' TO CANCEL.'
REPLY    DS    CL1
CHARUNIT DS    CL3
FLAG     DC    F'0'
IXVTOC   EQU   X'80'
DOERASE  EQU   X'40'
WRITINIT EQU   X'20'
ERASINIT EQU   X'10'
WRITEF   EQU   X'08'
NOWRITEF EQU   X'04'
ERASEF   EQU   X'02'
NOERASEF EQU   X'01'
PRESRVF  EQU   X'08'
NOPRSRVF EQU   X'04'
RTNCODE  DC    F'0'
UNITADDR DC    X'FFFF'
MAXRLEN  DS    F
SRBADDR  DS    F
IOSBADDR DS    F
VOLSER   DC    C'XXXXXX'
DBL1     DS    2D
DBL2     DS    2D
TIMEAREA DS    D
ONE      DC    D'1.0E0'
CON01    DC    F'16807'
CON02    DC    X'80000000'
CON03    DC    D'.4656613E-9'
FIXSEED  DC    F'0'
SEEKLIM  DC    F'10000'
FLOTTRK# DC    D'0'
FLOTSEED DS    D
SEGMENT  DS    D
SAVEVAL  DS    D
UCBADDR  DS    F
SAVECCHH DS    F
SAVEAREA DS    18F
ECB      DS    F
PREFIX   DS    0D
SEEKCCW  CCW   SEEK,0,CMDCD,6
SFMCCW   CCW   SFM,0,CMDCD,1
WRITEPGM DS    0D
SIDCCW   CCW   SID,IDAREA,CMDCD,5
TICCCW   CCW   TIC,WRITEPGM,0,0
WRITECCW CCW   WRITECKD,0,SLI+IDA,8+47476
CHPGMLEN EQU   *-WRITEPGM
READ     EQU   X'06'
SEEK     EQU   X'07'
TIC      EQU   X'08'
SEEKCYL  EQU   X'0B'
READKD   EQU   X'0E'
ERASE    EQU   X'11'
WRITECKD EQU   X'1D'
SFM      EQU   X'1F'
SID      EQU   X'31'
SLI      EQU   X'20'
CMDCD    EQU   X'40'
IDA      EQU   X'04'
IDAREA   DC    D'0'
DATAAREA DC    D'0'
DATAADDR DS    F
IDAWAREA DS    (65536/2048)F
FORMAT1  IECSDSL1 1
FORMAT4  DC    44X'04'
         IECSDSL1 4
TRTABLE  DC    256X'FF'
         ORG   TRTABLE
         DC    C'0123456789ABCDEF'
         ORG   TRTABLE+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   TRTABLE+C'0'
         DC    X'00010203040506070809'
         ORG   ,
DEVTYPEL DEVTYPE ,(DEVTYPEA,6*4),UCBLIST=YES,MF=L
DEVTYPEA DS    6F
         LTORG
MODEND   EQU   *
         IHAPSA
         IHAASCB
         IECDIOSB
         IECDIOCM
         IHASRB
         CVT   DSECT=YES
         $REQU
         END


                                                                        c Xephon

