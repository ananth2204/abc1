Displaying MVS subsystem information


SOURCE CODE FOR $LISTSSN

         TITLE '$LISTSSN - LIST MVS SUBSYSTEM INFORMATION'
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* CSECT   : $LISTSSN                                                  *
* MODULE  : $LISTSSN                                                  *
* DESC    : $LISTSSN IS A ROUTINE THAT RUNS THE SSCVT CHAIN TO OBTAIN *
*           AND DISPLAY INFORMATION ABOUT THE CURRENT MVS SUBSYSTEMS  *
*           THAT ARE DEFINED.  ROUTINE USES ISPF DIALOG SERVICES TO   *
*           FORMAT AND DISPLAY THE INFORMATION.                       *
* MACROS  : LOAD $CALL $PFEPI $PFPRO $PFSTG                           *
* DSECTS  : CVT IEFJESCT IEFJSCVT                                     *
* INPUT   : NONE                                                      *
* OUTPUT  : REQUIRES ISPF PANEL $LISTSSN                              *
* PLIST   : NONE                                                      *
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
$LISTSSN $PFPRO R12
*                                     DEFINE THE ISPF VARIABLES
         $CALL @ISPLINK,                                               +
               (VDEFINE,VAR_SPF,SSN,TYP_SPF,VARL_SPF,LIST),            +
               VL,MF=(E,@CALL)
*                                     DEFINE THE ISPF TABLE
         $CALL @ISPLINK,                                               +
               (TBCREATE,PAN_NAME,,NAM_SPF,NOWRITE,REPLACE),           +
               VL,MF=(E,@CALL)
*                                     PICK UP POINTERS
         L    R4,CVTPTR               GET THE CVT POINTER
         L    R5,CVTJESCT-CVT(R4)     POINT TO THE JESCT
         L    R4,JESSSCT-JESCT(R5)    GET @(FIRST SSCVT)
*                                     LOOP THROUGH SUBSYSTEMS
LOOP     DS   0H
*                                     GET SSN NAME AND INFO
         MVC  SSN,SSCTSNAM-SSCTBEGN(R4) GET THE SUBSYSTEM NAME
         LR   R5,R4                   GET @(CURRENT SSCVT)
         STC  R5,SSNADR+7             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,SSNADR+6             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,SSNADR+5             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,SSNADR+4             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,SSNADR+3             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,SSNADR+2             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,SSNADR+1             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,SSNADR               STORE CHARACTER
         NC   SSNADR,X0F0F            PREPARE FOR TRANSLATE
         TR   SSNADR,TRAN_TBL         TRANSLATE TO DISPLAY
*                                     GRAB USER AREA INFO IF PRESENT
         ICM  R5,15,SSCTSUSE-SSCTBEGN(R4) GET @(USER AREA)
         BZ   STAT_CHK                NO USER AREA, BRANCH AROUND
         STC  R5,USRADR+7             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,USRADR+6             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,USRADR+5             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,USRADR+4             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,USRADR+3             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,USRADR+2             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,USRADR+1             STORE CHARACTER
         SRL  R5,4                    SHIFT OUT 4 BITS
         STC  R5,USRADR               STORE CHARACTER
         NC   USRADR,X0F0F            PREPARE FOR TRANSLATE
         TR   USRADR,TRAN_TBL         TRANSLATE TO DISPLAY
STAT_CHK DS   0H
         MVC  STATS,INACTIVE          MARK IT AS INACTIVE
         CLC  NULL_VAL,SSCTSSVT-SSCTBEGN(R4) Q. SUBSYS ACTIVE?
         BE   ADDENTRY                A. NO, NOT ACTIVE
         MVC  STATS,ACTIVE            INDICATE THE SSN IS ACTIVE
ADDENTRY DS   0H
         $CALL @ISPLINK,                                               +
               (TBADD,PAN_NAME),                                       +
               VL,MF=(E,@CALL)
         ICM  R4,15,SSCTSCTA-SSCTBEGN(R4) GET @(SSCVT)
         BNZ  LOOP                    GO EXTRACT INFORMATION
*                                     POSITION TO TOP OF TABLE
         $CALL @ISPLINK,                                               +
               (TBTOP,PAN_NAME),                                       +
               VL,MF=(E,@CALL)
         $CALL @ISPLINK,              SORT THE TABLE                  +
               (TBSORT,PAN_NAME,SORTLIST),                             +
               VL,MF=(E,@CALL)
*                                     DISPLAY THE TABLE
         $CALL @ISPLINK,                                               +
               (TBDISPL,PAN_NAME,PAN_NAME),                            +
               VL,MF=(E,@CALL)
*                                     ALL DONE WITH TABLE SERVICES
         $CALL @ISPLINK,                                               +
               (TBEND,PAN_NAME),                                       +
               VL,MF=(E,@CALL)
EXIT     DS    0H                     RETURN TO THE CALLER
         $PFEPI
NULL_VAC DC    F'0'                   USED TO TEST FOR NULL POINTERS
ACTIVE   DC    CL8'ACTIVE'
INACTIVE DC    CL8'INACTIVE'
X0F0F    DC    XL8'0F0F0F0F0F0F0F0F'  USED FOR HEX TO DISPLAY
TRAN_TBL DC    CL16'0123456789ABCDEF' USED FOR HEX TO DISPLAY
PAN_NAME DC    CL8'$LISTSSN'          PANEL NAME
TYP_SPF  DC    4CL8'CHAR'             VARIABLE NAME
VAR_SPF  DC    C'(SSN,STATS,SSNADR,USRADR)' VARIABLE NAMES
VARL_SPF DC    F'4',F'8',F'8',F'8'    LENGTH OF VARIABLES
NAM_SPF  DC    C'(SSN,STATS,SSNADR,USRADR)'
SORTLIST DC    C'(SSN,C,A)'           SORT INFORMATION
         $PFSTG
SSN      DS    CL4                    SUBSYSTEM NAME
STATS    DS    CL8                    ACTIVE-INCATIVE INDICATOR
SSNADR   DS    CL8                    ADDRESS OF THE SSCVT
USRADR   DS    CL8                    ADDRESS OF USER AREA
         CVT   DSECT=YES,LIST=NO
         IEFJESCT
         IEFJSCVT
         END  $LISTSSN


SOURCE FOR THE $CALL MACRO

         MACRO
&NAME    $CALL &ENTRY,&OPRNDS,&VLPARA,&ID=,&MF=I
.**********************************************************************
.* MODIFIED VERSION OF THE IBM SUPPLIED CALL MACRO                    *
.**********************************************************************
         GBLB  &IHBSWA,&IHBSWB
         GBLC  &IHBNO
         LCLC  &GNAME
&IHBNO   SETC  '309'
&GNAME   SETC  'IHB'.'&SYSNDX'
&IHBSWA  SETB  ('&VLPARA' EQ 'VL')
&IHBSWB  SETB  ('&ENTRY' EQ '(15)')
         AIF   ('&VLPARA' NE '' AND '&VLPARA' NE 'VL').ERROR4
         AIF   ('&MF' EQ 'L' AND '&ENTRY' NE '').ERROR1
         AIF   ('&MF' EQ 'L' AND '&ID' NE '').ERROR2
         AIF   ('&MF' NE 'L' AND '&ENTRY' EQ '').ERROR3
&NAME    DS    0H                     ALIGNMENT
         AIF   ('&MF' EQ 'L' ).CONTC
         AIF   (&IHBSWB).CONTCC
.CONTC   AIF   ('&OPRNDS' EQ '' AND                                    X
               ('&MF' EQ 'I' OR '&MF' EQ 'L')).CONTB
.CONTA   IHBOPLTX &ENTRY,&OPRNDS,&NAME,MF=&MF
.CONTB   AIF   ('&MF' EQ 'L').EXIT
         AIF   (&IHBSWB).CONTD
         L     15,&ENTRY              LOAD 15 WITH ENTRY ADR
.CONTD   BALR  14,15                  BRANCH TO ENTRY POINT
         AIF   ('&ID' EQ '').EXIT
         DC    X'4700'                NOP INSTRUCTION WITH
         DC    AL2(&ID)               ID IN LAST TWO BYTES
.EXIT    MEXIT
.CONTCC  ANOP
&NAME    DS    0H
         AGO   .CONTC
.ERROR1  IHBERMAC 73,&IHBNO,&ENTRY    ENTRY  W/ MF=L
         MEXIT
.ERROR2  IHBERMAC 74,&IHBNO,&ID       ID W/ MF=L
         MEXIT
.ERROR3  IHBERMAC 26,&IHBNO           ENTRY SYMBOL MISSING
         MEXIT
.ERROR4  IHBERMAC 1014,THIRD          INVALID THIRD PARM
         MEND


SOURCE FOR THE $PFEPI MACRO

         MACRO
         $PFEPI
.**********************************************************************
.*       THIS MACRO WILL PROVIDE EXIT LINKAGE. IT WILL FREE THE       *
.*       STORAGE AREA THAT WAS ACQUIRED BY THE $PFPRO MACRO.  YOU     *
.*       CAN OPTIONALLY PASS IT A RETURN CODE VALUE.  THIS VALUE IS   *
.*       EITHER THE LABEL OF A FULL WORD IN STORAGE, OR IT IS A REG-  *
.*       ISTER. AS WITH THE $PFPRO MACRO, YOU NEED TO USE THE $PFSTG  *
.*       MACRO.  THE SYMBOL QLENGTH WHICH OCCURS IN THE CODE THAT IS  *
.*       GENERATED BY THIS MACRO IS DEFINED BY $PFSTG                 *
.*       EXAMPLES:                                                    *
.*              $PFEPI          = NO RETURN CODE SPECIFIED            *
.*              $PFEPI (R5)     = RETURN CODE IS IN REG 5             *
.*              $PFEPI RETCODE  = RETURN CODE IS IN THE FULLWORD AT   *
.*                                RETCODE                             *
.**********************************************************************
         $CALL @ISPLINK,                                               +
               (VDELETE,SPF_VAR),                                      +
               VL,MF=(E,@CALL)
         AIF   (N'&SYSLIST EQ 0).STGFRE
         AIF   ('&SYSLIST(1)'(1,1) EQ '(').REGRC
         L     R2,&SYSLIST(1)          GET RETURN CODE VALUE
         AGO   .STGFRE
.REGRC   ANOP
         LR    R2,&SYSLIST(1,1)        GET RETURN CODE VALUE
.STGFRE  ANOP
         L     R0,QLENGTH              GET THE DSECT LENGTH
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R13)
         AIF   (N'&SYSLIST NE 0).SETRC
         XR    R15,R15                 CLEAR THE RETURN CODE
         AGO   .MEND
.SETRC   ANOP
         LR    R15,R2                  SET THE RETURN CODE
.MEND    ANOP
         PR                            RETURN TO CALLER
         MEND


SOURCE FOR THE $PFPRO MACRO

         MACRO
&LABEL   $PFPRO &AM=31,&RM=ANY,&MODE=P
.**********************************************************************
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY         *
.*       MULTIPLE BASE REGISTERS.  TO USE THIS MACRO, YOU NEED TO     *
.*       ALSO USE THE $PFSTG MACRO.  THE $PFSTG DEFINES THE SYMBOL    *
.*       QLENGTH WHICH OCCURS IN THE CODE THAT &ESAPRO GENERATES.     *
.*       IF YOU DO NOT CODE ANY OPERANDS, THEN REGISTER 12 WILL BE    *
.*       USED AS THE BASE.  IF YOU CODE MULTIPLE SYMBOLS, THEN THEY   *
.*       WILL BE USED AS THE BASE REGISTERS.                          *
.*       EXAMPLES:                                                    *
.*              SECTNAME $SPFPRO          = REG 12 BASE               *
.*              SECTNAME $SPFPRO 5        = REG 5 BASE                *
.*              SECTNAME $SPFPRO R10,R11  = REGS 10 AND 11 ARE BASES  *
.**********************************************************************
         LCLA  &AA,&AB,&AC
R0       EQU   0
R1       EQU   1
     etc
R15      EQU   15
&LABEL   CSECT
&LABEL   AMODE &AM
&LABEL   RMODE &RM
         SYSSTATE ASCENV=&MODE         SET THE ENVIRONMENT
         B     $$$$EYEC-*(R15)         BRANCH AROUND EYECATCHER
         DC    AL1(($$$$EYEC-*)-1)     EYECATCHER LENGTH
         DC    CL8'&LABEL'             MODULE ID
         DC    CL3' - '
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL3' - '
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
         DC    CL3'   '                FILLER
$$$$F1SA DC    CL4'F1SA'               USED FOR STACK OPERATIONS
$$$$4096 DC    F'4096'                 USED TO ADJUST BASE REGS
$$$$EYEC DS    0H
         BAKR  R14,0                   SAVE GPRS AND ARS ON THE STACK
         AIF   (N'&SYSLIST EQ 0).USER12
         LAE   &SYSLIST(1),0(R15,0)    LOAD OUR BASE REG
         USING &LABEL,&SYSLIST(1)      LET THE ASSEMBLER KNOW
         AGO   .GNBASE
.USER12  ANOP
         MNOTE *,'NO BASE REG SPECIFIED, REGISTER 12 USED'
         LAE   R12,0(R15,0)            LOAD OUR BASE REG
         USING &LABEL,R12              LET THE ASSEMBLER KNOW
         AGO   .STGOB
.GNBASE  ANOP
         AIF   (N'&SYSLIST LE 1).STGOB
&AA      SETA  2
&AC      SETA  4096
.GNBASE1 ANOP
         AIF   (&AA GT N'&SYSLIST).STGOB
&AB      SETA  &AA-1
         LR    &SYSLIST(&AA),&SYSLIST(&AB) GET INITIAL BASE
         A     &SYSLIST(&AA),$$$$4096      ADJUST NEXT BASE
         USING &LABEL+&AC,&SYSLIST(&AA)    LET THE ASSEMBLER KNOW
&AA      SETA  &AA+1
&AC      SETA  &AC+4096
         AGO   .GNBASE1
.STGOB   ANOP
         L     R0,QLENGTH              GET THE DSECT LENGTH
         STORAGE OBTAIN,LENGTH=(R0),LOC=(RES,ANY)
         LR    R15,R1                  GET @(OBTAINED AREA)
         L     R13,QDSECT              GET DISPLACEMENT INTO AREA
         LA    R13,0(R13,R15)          GET @(OBTAINED AREA)
         LR    R0,R13                  SET REG 0 = REG 13
         L     R1,QLENGTH              GET THE LENGTH OF THE AREA
         XR    R15,R15                 CLEAR REG 5
         MVCL  R0,R14                  INITIALIZE THE AREA
         MVC   4(4,R13),$$$$F1SA       INDICATE STACK USAGE
         USING DSECT,R13               INFORM ASSEMBLER OF BASE
.MEND    ANOP
         LOAD EP=ISPLINK
         ST    R0,@ISPLINK             SAVE IT
*                                      DEFINE THE STANDARD SPF VARS.
         $CALL @ISPLINK,                                               +
               (VDEFINE,STD_VAR,SMSG,STD_TYPE,STD_LEN,LIST),           +
               VL,MF=(E,@CALL)
         EREG  R1,R1                   RESTORE REGISTER 1
         MEND


SOURCE FOR THE $PFSTG MACRO

         MACRO
         $PFSTG
.**********************************************************************
.*       THIS MACRO IS USED IN CONJUNCTION WITH THE $PFEPI AND $PFPRO *
.*       MACROS. IT PROVIDES THE DEFINITIONS FOR MANY OF THE VARIABLES*
.*       THAT ARE REQUIRED TO INVOKE VARIOUS ISPF DIALOG SERVICES.  A *
.*       DSECT IS ALSO DEFINED WHICH CONTAINS STORAGE FOR A REGISTER  *
.*       SAVE AREA, AS WELL AS ANY ADDITIONAL STORAGE THE USER MAY DE-*
.*       FINE.  A QCON IS UTILIZED TO ALLOW THE ASSEMBLER TO CALCULATE*
.*       THE LENGTH OF THE DUMMY SECTION AREA                         *
.*       EXAMPLES:                                                    *
.*              $PFSTG                                                *
.*      XXX     DC    F          = DEFINE ADDITIONAL STORAGE AREA     *
.*      YYY     DC    XL255                                           *
.*       .       .      .                                             *
.*       .       .      .                                             *
.**********************************************************************
* DEFINITIONS FOR ISPF DIALOG OPTIONS
*        VARIABLE SERVICES
VGET     DC    CL8'VGET'
VPUT     DC    CL8'VPUT'
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
VCOPY    DC    CL8'VCOPY'
VREPLACE DC    CL8'VREPLACE'
VRESET   DC    CL8'VRESET'
*        OTHER SERVICES
SELECT   DC    CL8'SELECT'
CONTROL  DC    CL8'CONTROL'
BROWSE   DC    CL8'BROWSE'
EDIT     DC    CL8'EDIT'
EDREC    DC    CL8'EDREC'
LOG      DC    CL8'LOG'
INIT     DC    CL8'INIT'
QUERY    DC    CL8'QUERY'
PROCESS  DC    CL8'PROCESS'
DEFER    DC    CL8'DEFER'
ORDER    DC    CL8'ORDER'
*        FUNCTIONS/MODES
ASIS     DC    CL8'ASIS'
CANCEL   DC    CL8'CANCEL'
DISABLE  DC    CL8'DISABLE'
ENABLE   DC    CL8'ENABLE'
END      DC    CL8'END'
ENTER    DC    CL8'ENTER'
ERRORS   DC    CL8'ERRORS'
LINE     DC    CL8'LINE'
LOCATE   DC    CL8'LOCATE'
LOCK     DC    CL8'LOCK'
MOVE     DC    CL8'MOVE'
NEWCOPY  DC    CL8'NEWCOPY'
NOFT     DC    CL8'NOFT'
NONDISPL DC    CL8'NONDISPL'
NOWRITE  DC    CL8'NOWRITE'
PROFILE  DC    CL8'PROFILE'
REFRESH  DC    CL8'REFRESH'
REPLACE  DC    CL8'REPLACE'
REPLCOPY DC    CL8'REPLCOPY'
RETURN   DC    CL8'RETURN'
RESTORE  DC    CL8'RESTORE'
SAVE     DC    CL8'SAVE'
SHARED   DC    CL8'SHARED'
SHARE    DC    CL8'SHARE'
SPLIT    DC    CL8'SPLIT'
SM       DC    CL8'SM'
TEMP     DC    CL8'TEMP'
WRITE    DC    CL8'WRITE'
* VARIABLE FORMAT TYPES
CHAR     DC    CL8'CHAR'
FIXED    DC    CL8'FIXED'
BIT      DC    CL8'BIT'
HEX      DC    CL8'HEX'
BINSTR   DC    CL8'BINSTR'
DBCS     DC    CL8'DBCS'
FLOAT    DC    CL8'FLOAT'
PACK     DC    CL8'PACK'
USER     DC    CL8'USER'
* OPTIONS FOR THE VDEFINE SERVICE
COPY     DC    CL8'COPY'
NOBSCAN  DC    CL8'NOBSCAN'
LIST     DC    CL8'LIST'
* OPTIONS FOR TABLE SERVICES
TBCREATE DC    CL8'TBCREATE'
TBADD    DC    CL8'TBADD'
TBTOP    DC    CL8'TBTOP'
TBSORT   DC    CL8'TBSORT'
TBDISPL  DC    CL8'TBDISPL'
TBEND    DC    CL8'TBEND'
* OPTIONS FOR MESSAGE SERVICES
SETMSG   DC    CL8'SETMSG'
* STANDARD VARIABLES USED IN ALL DIALOGS
SPF_VAR  DC    C'(*)'                  USED BY THE VDELETE SERVICE
STD_VAR  DC    C'(SMSG,LMSG,ALRM,HM,ZCMD,ZEDCMD)'
STD_TYPE DC    6CL8'CHAR'
STD_LEN  DC    F'24',F'72',F'3',F'8',F'60',F'1'
QDSECT   DC    Q(DSECT)                DEFINE A QCON
QLENGTH  CXD                           LET ASM CALCULATE THE LENGTH
DSECT    DSECT
         DS    18F                     SET ASIDE REGISTER SAVE AREA
@ISPLINK DS    A                       SET ASIDE SPACE FOR ADDRESS
@CALL    DS    20F                     SET ASIDE SPACE FOR ADDRESS
SMSG     DS    CL24                    SPACE FOR SHORT MESSAGE
LMSG     DS    CL72                    SPACE FOR LONG MESSAGE
ALRM     DS    CL3                     ALARM SETTING
HM       DS    CL8                     HELP MEMU ID
ZCMD     DS    CL60                    COMMAND
ZEDCMD   DS    CL1                     COMMAND
         MEND


SOURCE FOR PANEL $LISTSSN

)ATTR
 | TYPE(OUTPUT)   INTENS(LOW)     COLOR(BLUE)
 ? TYPE(OUTPUT)   INTENS(LOW)     COLOR(GREEN)
 * TYPE(INPUT)    INTENS(LOW)     COLOR(GREEN)
 $ TYPE(TEXT)     INTENS(HIGH)    COLOR(BLUE)
 @ TYPE(OUTPUT)   INTENS(HIGH)    COLOR(RED)
 } TYPE(OUTPUT)   INTENS(HIGH)    COLOR(WHITE)
 ! TYPE(TEXT)     INTENS(HIGH)    COLOR(WHITE) HILITE(REVERSE)
)BODY EXPAND(^^)
 %^!^<< MVS Subsystem Information >>^+^ +
%Command ===>_ZCMD                                            %Scroll ===>_AMT +
+
          Subsystem       Status       Addr. of SSCVT     Addr. of User Area
+
)MODEL
            }SSN         }STATS           }SSNADR              }USRADR
)INIT
)PROC
)END


Enterprise Data Technologies (USA)             c Xephon 1996

