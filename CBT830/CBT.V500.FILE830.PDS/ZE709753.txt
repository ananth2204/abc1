Calculating multiprogramming levels

One of the areas of performance tuning that is always of
concern is ensuring that the optimum number of address spaces
are executing in the system. This normally falls into two areas:

1      The IPS multiprogramming level constraints are correct.

2      The correct number of initiators have been specified and/or
      are active.

To help me with the second objective I wrote REMMON, a
program which, at a specified time of day, will construct and
write an SMF record (type 255). Included in this SMF record is
the current number of jobs in each job class. I use this
information, combined with the SMF type 30 records, to
construct a profile of our batch job flow (the code for this
process is not included in this article).

The type 255 record gives me a base, at a specified time of day
(normally 8.00 am), of how many jobs are currently in the
system and how many in each job class. I then use the type 30
records, which have been sorted in date and time order, to
adjust this number based on whether the SMF type 30 record is
a job start sub-type or a job termination sub-type. I can then
see the flow through the initiators and pinpoint the busiest time
of day for each initiator.

Using other information contained in the type 255 record I can
calculate the minimum, maximum, and average values for each
of the following:

o      Batch jobs
o      Batch jobs by job class
o      TSO users
o      Started tasks
o      Test CICS systems.

I then obtain the page fault rate and the system average UIC at
the times the maximum values occurred. This can give me an
indication as to whether the system was overloaded.

The default time for constructing the type 255 record is 07.59
am. This can be altered by issuing the following MODIFY
command:

      F REMMON,T=hhmmssth

REMMON consists of two Assembler programs with the
attributes as shown: REMMON01 (re-enterable, key 8,
enabled, RMODE=24, AMODE=24, LMOD=REMMON01,
AC=1) and REMMON02 (re-enterable, key 8, enabled,
RMODE=24, AMODE=24/31, LMOD=REMMON02, AC=1).

REMMON runs as a started task and therefore needs a
procedure in the STC procedure library. The following JCL is
required to execute REMMON:

//REMMON   PROC
//REMMON   EXEC PGM=REMMON01
//SYSPRINT DD   SYSOUT=X
//SYSUDUMP DD   SYSOUT=X

The SMF PARMLIB member SMFPRMxx must be updated to
include the record type constructed by REMMON.

REMMON has run successfully under MVS/XA 2.1.7, 2.2.0,
and 2.2.3 systems.


REMMON01 SOURCE CODE

REMMON01 TITLE 'MONITOR SYSTEM ADDRESS SPACES'
REMMON01 CSECT
POST     EQU   X'40'                   POST BIT
HIGHBIT  EQU   X'80'                   END OF PARAMETER LIST INDICATOR
         TITLE 'MAIN PROCESSING LOGIC'
         SAVE  (14,12),,REMMON01_&SYSDATE-&SYSTIME
         USING REMMON01,R12             SET UP BASE ADDRESSABILITY
         LR    R12,R15                  ENTRY POINT ADDRESS
GETSTOR  EQU   *
         LA    R0,WORKLEN               LENGTH OF WORKAREA
         GETMAIN R,LV=(0),RELATED=(FREE,'GET STORAGE')
         ST    R13,4(,R1)               ADDRESS OF PREVIOUS SA
         ST    R1,8(,R13)               ADDRESS OF NEXT SA
         LR    R13,R1                   OUR SAVEAREA ADDRESS
         USING WORKAREA,R13             ADDRESSABILITY
         MVC   ATTMON02,ATTPLIST        MOVE ATTACH PARAMETER LIST
         MVC   EXTRACT1,EXTPLIST        MOVE EXTRACT PARAMETER LIST
         MVC   TRIGTIME,=CL8'07595955'  TIMER POP JUST BEFORE 8
EXT      EQU    *
         LA    R1,EXTRACT1              EXTRACT PARAMETER LIST
         EXTRACT ANSRAREA,MF=(E,(R1))   EXTRACT COMM AREA ADDRESS
         L     R4,ANSRAREA              @ OF COMMS AREA
         USING COMDSECT,R4              ADDRESSABILITY TO IEZCOM
         L     R5,COMCIBPT              OBTAIN ADDRESS OF CIB
         USING CIBDSECT,R5              ADDRESSABILITY TO IEZCIB
         CLI   CIBVERB,CIBSTART         FIRST CIB FOR START COMMAND?
         BNE   ATTACH                   NO-
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R5) YES- FREE IT
         LTR    R15,R15                 OKAY?
         BZ     ATTACH                  YES-
         ABEND  001,DUMP                ABEND WITH A DUMP
ATTACH   EQU   *
         LA    R10,ATTMON02             ATTACH PARAMETER LIST
         LA    R1,TRIGTIME              PARM ADDRESS
         ATTACH EP=REMMON02,ECB=ATTCHECB,SF=(E,(R10))
         LTR   R15,R15                  ATTACH OKAY?
         BZ    SETCOUNT                 YES-
         ABEND 002,DUMP                 ABEND WITH A DUMP
SETCOUNT EQU    *
         ST    R1,TCBADDR               STORE SUBTASK TCB ADDRESS
         QEDIT ORIGIN=COMCIBPT,CIBCTR=2 SET LIMIT TO 2
         LTR   R15,R15                  OKAY?
         BZ    WAIT                     YES-
         ABEND 003,DUMP                 ABEND WITH A DUMP
WAIT     EQU   *
         L     R5,COMECBPT              COMMS ECB PTR
         STCM  R5,B'1111',COMMECB       COMMS ECB PTR INTO ECBLIST
INITECB  EQU   *
         SR    R5,R5                    ZEROIZE
         STCM  R5,B'1111',ATTCHECB      ZEROIZE ECB
         LA    R5,ATTCHECB              ATTACH ECB PTR
         STCM  R5,B'1111',ATTECB        ATTACH ECB PTR INTO ECBLIST
         OI    LASTENT,HIGHBIT          LAST ECB ADDRESS
WAITABIT EQU    *
         WAIT  1,ECBLIST=ECBLIST        WAIT FOR STOP OR MODIFY COMMND?
*                                       NOTE: QEDIT CLEARS THE POSTED
*                                       ECB WHEN THE LAST CIB IS FREED
*                                       WAIT FOR SUBTASK TERMINATION
         TM    ATTCHECB,POST            SUBTASK TERMINATION OCCURRED?
         BO    DETACH                   YES-
         L     R5,COMCIBPT              @ OF CIB
MODIFY   EQU   *
         CLI   CIBVERB,CIBMODFY         MODIFY COMMAND?
         BNE   STOP                     NO-
         CLC   CIBDATLN,=X'0003'        LENGTH < 3?
         BL    INVINPUT                 YES- INVALID
         LA    R6,CIBDATA               ADDRESS OPERATOR INPUT
         USING CIBINPUT,R6              INFORM THE ASSEMBLER
         CLC   CIBITYP,=C'T='           TIMER POP OPTION?
         BNE   INVINPUT                 NO-
         B     TIMERPOP                 SET STIMER VALUE
STOP     EQU   *
         CLI   CIBVERB,CIBSTOP         STOP COMMAND?
         BNE   CIBERR                  NO-
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R5) FREE IT
DETACH   EQU   *
         DETACH TCBADDR,RELATED=(ATTACH,'ATTACH REMMON02')
         LTR   R15,R15                 DETACH OKAY?
         BZ    RETURN                  YES-
         ABEND 004,DUMP                ABEND WITH A DUMP
CIBERR   EQU    *
         ABEND 005,DUMP                ABEND WITH A DUMP
         TITLE 'TIMER POP ROUTINE'
TIMERPOP EQU   *
         CLC   CIBDATLN,=X'000A'       LENGTH = 10?
         BNE   INVINPUT                YES- INVALID
         MVC   NUMCHK,=CL8'00000000'   INIT NUMERIC CHECK
         MVZ   NUMCHK,CIBTIME          MOVE ZONES
         CLC   NUMCHK,=CL8'00000000'   VALID ZONES?
         BNE   INVINPUT                NO-
         CLC   CIBTIME,=C'23595999'    1/100 OF A SECOND TO MIDNIGHT?
         BH    INVRNG                  NO- GREATER
         DETACH TCBADDR,RELATED=(ATTACH,'ATTACH REMMON02')
         LTR   R15,R15                 DETACH OKAY?
         BZ    ATTAGAIN                YES-
         ABEND 004,DUMP                ABEND WITH A DUMP
ATTAGAIN EQU   *
         MVC   TRIGTIME,CIBTIME        NEW TRIGGER TIME
         LA    R10,ATTMON02             ATTACH PARAMETER LIST
         LA    R1,TRIGTIME              PARM ADDRESS
         ATTACH EP=REMMON02,ECB=ATTCHECB,SF=(E,(R10))
         ST    R1,TCBADDR               STORE SUBTASK TCB ADDRESS
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R5) FREE IT
         B     INITECB                 GO AND WAIT AGAIN
         TITLE 'WTO ROUTINES'
INVINPUT EQU   *
         MVC   WTOMESS,INVIMESS        NOTIFY OPER
         LA    R1,WTOMESS              @ WTO AREA
         WTO   MF=(E,(R1))             WTO
         B     FREECIB                 FREE THE CURRENT CIB
INVRNG   EQU   *
         MVC   WTOMESS,INVRMESS        NOTIFY OPER
         LA    R1,WTOMESS              @ WTO AREA
         WTO   MF=(E,(R1))             WTO
FREECIB  EQU   *
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R5) FREE IT
         B     INITECB                 GO AND WAIT AGAIN
         TITLE 'RETURN TO INITIATOR'
RETURN   EQU   *
         LR    R1,R13                  SAVE NEW SAVEAREA ADDRESS
         L     R13,PREVSA              INIT SAVEAREA ADDRESS
         LA    R0,WORKLEN              LENGTH OF WORKAREA
         FREEMAIN R,LV=(0),A=(1),RELATED=(GET,'FREE STORAGE')
         RETURN (14,12),,,RC=0          RESTORE REGS
*************************STORAGE ITEMS*********************************
ATTPLIST ATTACH EP=REMMON02,ECB=0,                                     X
               RELATED=(DETACH,'DETACH REMMON02'),SF=L
ATTCHLEN EQU   *-ATTPLIST              ATTACH PARAMETER LENGTH
EXTPLIST EXTRACT 0,FIELDS=(COMM),MF=L
EXTLEN   EQU   *-EXTPLIST              EXTRACT PARAMETER LENGTH
INVIMESS WTO   'INVALID INPUT - PLEASE TRY AGAIN',ROUTCDE=(2,2),       X
               DESC=(6),MF=L
INVILEN  EQU   *-INVIMESS              WTO PARAMETER LENGTH
INVRMESS WTO   'INVALID TIME RANGE - PLEASE TRY AGAIN',ROUTCDE=(2),    X
               DESC=(6),MF=L
INVRLEN  EQU   *-INVRMESS              WTO PARAMETER LENGTH
         LTORG
COMDSECT DSECT
         IEZCOM
CIBDSECT DSECT
         IEZCIB
CIBINPUT DSECT
CIBINP   DS    CL3                     BASIC AREA
CIBITYP  EQU   CIBINP,2                OPTION
CIBTIME  EQU   CIBINP+2,8              TIMER POP VALUE
CIBTHH   EQU   CIBINP+2,2              TIMER POP VALUE HH
CIBTMM   EQU   CIBINP+4,2              TIMER POP VALUE MM
CIBTSS   EQU   CIBINP+5,2              TIMER POP VALUE SS
CIBTTH   EQU   CIBINP+8,2              TIMER POP VALUE TH
WORKAREA DSECT
SAVEAREA DS    CL72                    SAVEAREA
PREVSA   EQU   SAVEAREA+4,4            ADDRESS OF PREVIOUS SAVEAREA
TCBADDR  DS    F                       SUBTASK TCB ADDRESS
ANSRAREA DS    F                       COMM ADDRESS
ATTCHECB DS    F                       ATTACH ECB
TRIGTIME DS    CL8                     TIMER POP VALUE
NUMCHK   DS    CL8                     NUMERIC CHECK AREA
ATTMON02 DS    CL(ATTCHLEN)            ATTACH PARAMETER LIST
EXTRACT1 DS    CL(EXTLEN)              EXTRACT PARAMETER LIST
WTOMESS  DS    CL(INVRLEN)             WTO PARAMETER LIST
ECBLIST  DS    0F                      SUBTASK TCB ADDRESS
ATTECB   DS    F                       ATTACH ECB ADDRESS
COMMECB  DS    F                       COMMS ECB
LASTENT  EQU   COMMECB,1               INDICATE LST ENTRY
WORKLEN  EQU   *-SAVEAREA              LENGTH OF WORKAREA
         END  REMMON01


REMMON02 SOURCE CODE

REMMON02 TITLE 'MONITOR SYSTEM ADDRESS SPACES'
REMMON02 CSECT
ASSIGNED EQU   X'80'                   ASCB ASSIGNED
SPACE    EQU   C' '                     SPACE
         SAVE  (14,12),,REMMON02_&SYSDATE-&SYSTIME
         USING REMMON02,R12             SET UP BASE ADDRESSABILITY
         LR    R12,R15                  ENTRY POINT ADDRESS
         LR    R10,R1                   STORE PARM ADDRESS
GETSTOR  EQU   *
         LA    R0,WORKLEN               LENGTH OF WORKAREA
         GETMAIN R,LV=(0),RELATED=(FREE,'GET STORAGE')
         ST    R13,4(,R1)               ADDRESS OF PREVIOUS SA
         ST    R1,8(,R13)               ADDRESS OF NEXT SA
         LR    R13,R1                   OUR SAVEAREA ADDRESS
         USING WORKAREA,R13             ADDRESSABILITY
         LA    R11,SMFRC255             ADDRESS
         USING SMF255,R11               SMF RECORD
         MVC   TRIGTIME,0(R10)          STORE REQUIRED TIMER POP
SETTIMER EQU    *
         STIMER WAIT,TOD=TRIGTIME       WAIT ON INTERVAL TIMER
         LTR   R15,R15                  DAMAGED CLOCKS?
         BNZ   RETURN                   YES-
         L     R1,CVTPTR(0,0)           @ CVT
         USING CVT,R1                   INFORM THE ASSEMBLER
         L     R10,CVTSMCA              @ SMF CVT
         L     R1,CVTASVT               @ ASVT
         USING ASVT,R1                  INFORM THE ASSEMBLER
         L     R3,ASVTMAXU              MAX ADDRESS SPACES
         LA    R4,ASVTENTY              ADDRESS FIRST ASCB
         BAL   R2,INITSMF               INIT SMF RECORD
         L     R1,A31MODE               SET HIGH BIT TO 1
         BSM   R0,R1                    SET AMODE = 31 BIT
A31MODE  DC    A(ASCBSCAN+X'80000000')
ASCBSCAN EQU   *
         TM    0(R4),ASSIGNED           ASCB ASSIGNED
         BO    NEXTASCB                 NO-
         L     R5,0(R4)                 ASCB @
         USING ASCB,R5                  INFORM THE ASSEMBLER
         CLC   ASCBASCB,=C'ASCB'        ASCB?
         BNE   NEXTASCB                 NO- TRY AGAIN
         CLC   ASCBTSB,=F'0'            TSO USER?
         BE    BATCH                    NO- TRY BATCH
         AP    SMF255NT,=P'1'           INCREMENT COUNT
         B     NEXTASCB                 KEEP LOOKING
BATCH    EQU    *
         CLC   ASCBJBNI,=F'0'           STC?
         BE    STC                      YES-
         AP    SMF255NB,=P'1'           INCREMENT COUNT
         L     R5,ASCBOUCB              ADDRESS SRM'S OUCB
         USING OUCB,R5                  INFORM THE ASSEMBLER
         LA    R6,SMF255CL              @ JOB CLASS ENTRIES
         LA    R7,SMFCMXET              MAX NO OF JOB CLASSES
         USING SMFCLASS,R6              INFORM THE ASSEMBLER
         CLC   =C'CICS',OUCBTRXN        CICS SYSTEM?
         BNE   BATCHCLS                 NO-
         AP    SMF255NC,=P'1'           INCREMENT NO OF CICS SYSTEMS
BATCHCLS EQU    *
         CLI   JOBCLASS,SPACE           NEW ENTRY?
         BE    NEWCLASS                 YES-
         CLC   JOBCLASS,OUCBCLS         = CLASSES?
         BNE   NXTCLASS                 NO-
         AP    XEQNO,=P'1'              INCREMENT JOBS IN CLASS
         B     NEXTASCB                 KEEP LOOKING
NEWCLASS EQU   *
         MVC   JOBCLASS,OUCBCLS         MOVE IN JOB CLASS
         AP    XEQNO,=P'1'              INCREMENT JOBS IN CLASS
         SR    R7,R7                    ZEROIZE
         ICM   R7,B'0001',SMF255NI      NO OF CLASS ENTRIES
         LA    R7,1(,R7)                INCREMENT
         STCM  R7,B'0001',SMF255NI      STORE BACK
         B     NEXTASCB                 KEEP LOOKING
NXTCLASS EQU   *
         LA    R6,SMFCELEN(,R6)         NEXT ENTRY
         BCT   R7,BATCHCLS              DO WHILE R7 > 0?
         SR    R6,R6                    ZEROIZE
         ICM   R6,B'0001',SMF255CE      NO OF CLASS ERRORS
         LA    R6,1(,R6)                INCREMENT
         STCM  R6,B'0001',SMF255CE      STORE BACK
         B     NEXTASCB                 KEEP LOOKING
STC      EQU   *
         AP    SMF255NS,=P'1'           INCREMENT COUNT
NEXTASCB EQU   *
         LA    R4,4(,R4)                NEXT ASCB @
         BCT   R3,ASCBSCAN              DO WHILE R3 > 0?
         LA    R1,WRTESMF               SET ADDRESS FOR 24 BIT
         BSM   R0,R1                    SET AMODE = 24 BIT
WRTESMF  EQU    *
         TIME  BIN                      OBTAIN DATE + TIME
         STCM  R0,B'1111',SMF255TM      TIME
         STCM  R1,B'1111',SMF255DT      DATE
         SR    R9,R9                    ZEROIZE
         IC    R9,SMF255NI              NO OF INITIATOR CLASSES
         M     R8,=AL4(SMFCELEN)        * JOB CLASSES
         LA    R9,SMFFXDLN(,R9)         ADD IN FIXED AMOUNT
         STCM  R9,B'0011',SMF255LN      RDW
         SMFWTM SMFRC255                WRITE RECORD TO SMF
         B     SETTIMER                 SET TIMER AGAIN
RETURN   EQU   *
         LR    R1,R13                   SAVE NEW SAVEAREA ADDRESS
         L     R13,PREVSA               INIT SAVEAREA ADDRESS
         LA    R0,WORKLEN               LENGTH OF WORKAREA
         FREEMAIN R,LV=(0),A=(1),RELATED=(GET,'FREE STORAGE')
         RETURN (14,12),,,RC=0          RESTORE REGS
INITSMF  EQU   *
         MVC   SMF255SG,=XL2'0000'      RDW SEGMENT
         ZAP   SMF255NC,=PL4'0'         NO OF CICS SYSTEMS
         ZAP   SMF255NB,=PL4'0'         NO OF BATCH JOBS
         ZAP   SMF255NT,=PL4'0'         NO OF TSO JOBS
         ZAP   SMF255NS,=PL4'0'         NO OF TSO STARTED TASKS
         MVI   SMF255FL,X'86'           SYSTEM INDICATOR
         MVI   SMF255RT,X'FF'           RECORD TYPE
         MVI   SMF255AE,X'00'           ASCB ERRORS
         MVI   SMF255CE,X'00'           CLASS ERRORS
         MVI   SMF255NI,X'00'           NO OF INITIATOR CLASSES
         USING SMCABASE,R10             SMF CVT
         MVC   SMF255SI,SMCASID         SYSTEM ID
         LA    R6,SMF255CL              POINT TO FIRST CLASS ENTRY
         LA    R7,SMFCMXET              NO OF ENTRIES
SMFINIT  EQU   *
         MVC   0(L'SMF255CL+L'SMF255CN,R6),CLASINIT  INIT TABLE ENTRY
         LA    R6,L'SMF255CL+L'SMF255CN(,R6)  POSITION ONTO NEXT ENTRY
         BCT   R7,SMFINIT               DO WHILE R7 > 0?
         BR    R2                       RETURN TO CALLER
*************************STORAGE ITEMS*********************************
CLASINIT DC    C' ',PL2'0'              INIT CLASS TABLE ENTRY
         LTORG
         CVT   DSECT=YES
         IHAASVT DSECT=YES
         IHAASCB DSECT=YES
         IRAOUCB
         IEESMCA
SMF255   DSECT
SMF255LN DS    XL2                     RDW(LL)
SMF255SG DS    XL2                     SEGMENT(00)
SMF255FL DS    XL1                     SYSTEM INDICATOR
SMF255RT DS    XL1                     RECORD TYPE
SMF255TM DS    XL4                     TIME 1/100 SECS
SMF255DT DS    PL4                     DATE
SMF255SI DS    CL4                     SYSTEM ID
SMF255NS DS    PL3                     NO OF STARTED TASKS
SMF255NB DS    PL3                     NO OF BATCH JOBS
SMF255NT DS    PL3                     NO OF TSO USERS
SMF255NC DS    PL2                     NO OF CICS SYSTEMS
SMF255AE DS    XL1                     NO OF ASCB SCAN ERRORS
SMF255CE DS    XL1                     NO OF CLASS SCAN ERRORS
SMF255NI DS    XL1                     NO OF ENTRIES FOLLOWING
SMFFXDLN EQU   *-SMF255                FIXED SMF RECORD LENGTH
SMF255CL DS    CL1                     JOB CLASS
SMF255CN DS    PL2                     NO OF JOBS IN CLASS
SMFCMXLN EQU   (*-SMF255CL)*36         JOB CLASS MAX ENTRIES LENGTH
SMFCMXET EQU   SMFCMXLN/(L'SMF255CL+L'SMF255CN) MAX ENTRIES
SMFCLASS DSECT
JOBCLASS DS    CL1                     JOB CLASS
XEQNO    DS    PL2                     NO OF JOBS EXECUTING
*                                      IN THIS CLASS
SMFCELEN EQU   *-SMFCLASS              ENTRY LENGTH
WORKAREA DSECT
SAVEAREA DS    CL72                    SAVEAREA
PREVSA   EQU   SAVEAREA+4,4            PREVIOUS SAVEAREA
TRIGTIME DS    CL8                     TIMER INTERRUPT VALUE
SMFRC255 DS    CL140                   SMF RECORD LENGTH
WORKLEN  EQU   *-WORKAREA              WORKAREA LENGTH
         END  REMMON02


R F Perretta
Systems Consultant (UK)                              c Xephon 1993

