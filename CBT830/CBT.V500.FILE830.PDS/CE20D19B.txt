A JES2 input queue monitor

      CLASS=j,WARNING=nnnnn,CRITICAL=ccccc

SAMPLE PROCEDURE JCL

      //QWATCH   PROC
      //SCAN     EXEC PGM=QWATCH
      //STEPLIB  DD   DSN=apfauth.loadlib,DISP=SHR
      //SYSPRINT DD   SYSOUT=X
      //SYSIN    DD   DSN=OPS.CARDLIB(QWATCH),DISP=SHR

      S QWATCH

      F QWATCH,LIST

      F QWATCH,PAUSE

      F QWATCH,RESUME

      F QWATCH,CLASS=C,WARNING=nnnnn

      F QWATCH,CLASS=C,CRITICAL=nnnnn

      P QWATCH

MESSAGES

QWH100I JES2 QUEUE WATCH FACILITY IS INITIALIZED

QWH110I EXTENDED CONSOLE ESTABLISHED

QWH120I NOW ACCEPTING OPERATOR COMMANDS

QWH130I QUEUE THRESHOLDS CLASS= C WARNING=nl CRITICAL= n2

QWH140I INVALID STATEMENT SYNTAX - IGNORED

QWH150I JES2 QUEUE WATCH FACILITY IS NOW PAUSED

QWH160I JES2 QUEUE WATCH FACILITY IS NOW ACTIVE

QWH170I RELEASING CONSOLE AND TIMER

QWH180I JES2 QUEUE WATCH FACILITY IS TERMINATING

QWH190I INVALID COMMAND - PLEASE RE-ENTER

QWH195I NO ENTRY FOUND FOR JOB CLASS IN CURRENT SETTINGS

QWH220I WARNING JES2 JOB CLASS j QUEUE DEPTH = nnnnn

QWH240E CRITICAL JES2 JOB CLASS j QUEUE DEPTH = nnnnn

QWATCH SOURCE CODE

QWATCH   TITLE ' PROGRAM TO WATCH THE JES2 INPUT QUEUES '
*-------------------------------------------------------------------*
* THIS PROGRAM WATCHES THE JES2 JOB INPUT QUEUES AND WARNS THE      *
* OPERATOR WHEN THE NUMBER OF JOBS QUEUED TO A JOB CLASS EXCEEDS    *
* EITHER A WARNING OR CRITICAL THRESHOLD.                           *
* THE THRESHOLDS ARE SET AT START-UP TIME, (BUT CAN BE MODIFIED ON  *
* THE FLY).                                                         *
* THE PROGRAM (RUN AS A STARTED TASK) ESTABLISHES AN EXTENDED MCS   *
* CONSOLE AND ISSUES THE $DQ,Q=XEQ COMMAND. THE COMMAND RESPONSE    *
* MESSAGES ($HASP647) ARE PROCESSED AND ANY EXCEPTIONS ARE WTO'D TO *
* THE MASTER CONSOLE. THIS PROCESS IS REPEATED EVERY 30 SECONDS     *
* UNTIL THE STARTED TASK IS STOPPED.                                *
* THE PROGRAM ACCEPTS THE FOLLOWING MODIFY COMMANDS :               *
* 1. LIST                                                           *
*    CAUSES A LISTING OF THE CURRENT SETTINGS TO BE PRODUCED        *
* 2. CLASS=C,WARNING=NNNNN                                          *
*    CAUSES THE WARNING THRESHOLD FOR CLASS C TO BE SET TO NNNNN    *
* 3. CLASS=C,CRITICAL=NNNNN                                         *
*    CAUSES THE CRITICAL THRESHOLD FOR CLASS C TO BE SET TO NNNNN   *
* 4. PAUSE                                                          *
*    SUSPENDS THE OPERATION OF QWATCH                               *
* 5. RESUME                                                         *
*    RESUMES THE OPERATION OF QWATCH                                *
* NOTE:                                                             *
* 1. PROGRAM USES AR MODE TO PROCESS THE EXTENDED MCS CONSOLE       *
*    DATASPACE (IE INFO RETURNED BY MCSOPMSG).                      *
* 2. THE MDB DATA STRUCTURES ARE DOCUMENTED IN THE MAPPING MACROS   *
* 3. ROUTINE QWATCMSG CALLED TO WRITE THE PROGRAMS MESSAGES.        *
* 4. PROGRAM USES MACROS 'MODE24' AND 'MODE31' WRITTEN BY REM       *
*    PERRETTA - MVS UPDATE JUNE 1994.                               *
* ATTRIBUTES : RENT, REUS, REFR, AMODE(31), RMODE(24), AC(1)        *
* REGISTERS USED:                                                   *
* R1  -  PARMS PASSED TO PROGRAM AT ENTRY / PARMS BETWEEN ROUTINES  *
* R2  -  MESSAGE TABLE                                              *
* R3  -  CIB AND ECBS                                               *
* R4  -  COMMUNICATIONS AREA                                        *
* R5  -  MDB TOP                                                    *
* R6  -  POINTER TO NEXT MDB                                        *
* R7  -  WORK REG                                                   *
* R8  -  MDB HEADER                                                 *
* R9  -  MDB FLOATER (TO GET TO MDBTEXT)                            *
* R10 -  BRANCH AND LINK                                            *
* R11 -  WORKAREA                                                   *
* R12 -  BASE                                                       *
*-------------------------------------------------------------------*
QWATCH   CSECT
QWATCH   AMODE 31
QWATCH   RMODE 24
         BAKR    R14,0               * SAVE REGS
         LAE     R12,0(R15,0)        * BASE AND ADDRESS REGS
         USING   QWATCH,R12          * ADDRESSABILITY
         MODID   ,                   * EYE CATCHER AND DATE
         LR      R7,R1               * COPY ADDRESS OF PARMS PASSED
         STORAGE OBTAIN,LENGTH=WORKL * GET DYNAMIC STORAGE
         LAE     R11,0(0,R1)         * USE R11 AS WORKAREA BASE
         USING   WORKAREA,R11        * USE WORKAREA DSECT
         LAE     R13,SAVEAREA        * PUT SAVE AREA ADDR IN R13
         MVC     4(4,R13),=C'F1SA'   * SET ACRONYM IN SAVE AREA
         LOAD    EP=QWATCMSG         * LOAD MESSAGE PROGRAM
         ST      R0,MSGPGM           * STORE ENTRY POINT
         STORAGE OBTAIN,LENGTH=TABSIZE GET TABLE STORAGE
         LAE     R2,0(0,R1)          * USE R2 AS BASE
         USING   TABLE,R2            * USE WORKAREA DSECT
         ST      R2,TABLETOP         * COPY TOP OF TABLE
         STORAGE OBTAIN,LENGTH=LIMSIZE GET LIMIT TABLE STORAGE
         LAE     R3,0(0,R1)          * USE R3 AS TEMP BASE
         USING   LIMITS,R3           * ADDRESS IT
         ST      R3,LIMITTOP         * COPY TOP OF TABLE
INIT     EQU     *
* INITIALIZE WORKAREA VARIABLES AND SET UP MODEL MACROS             *
         MVC     MYCART,=C'QWATCHCT'       * MOVE IN CART TOKEN
         MVC     CNAME,=C'QWATCH  '        * MOVE IN CONSOLE NAME
         MVC     MODE0(MODESETL),MODEMOD0  * MOVE IN MODEL MODESET
         MVC     MODE8(MODESETL),MODEMOD8  * MOVE IN MODEL MODESET
         MVC     MGCRE1(MGCREL),MGCREMOD   * MOVE IN MODEL MGCRE
         MVC     EXTRACT1(EXTRACL),EXTRACM * MOVE IN MODEL EXTRACT
         MVC     STIMERM1(STIMEML),STIMEMM * MOVE IN MODEL STIMERM
         MVC     STIMERM2(STIMECL),STIMEMC * MOVE IN MODEL STIMERM
         MVC     OPEN1(OPENML),OPENM       * MOVE IN MODEL OPEN
         MVC     CLOSE1(CLOSEML),CLOSEM    * MOVE IN MODEL CLOSE
         MVC     SYSIN(SYSINML),SYSINM     * MOVE IN MODEL DCB
GETPARMS EQU     *
         OPEN    (SYSIN,(INPUT)),MODE=31,MF=(E,OPEN1)
READLP1  EQU     *
* READ THE INPUT STATEMENTS FROM THE SYSIN FILE                     *
         MODE24                      * GO INTO 24 BIT MODE FOR GET
         GET     SYSIN,INREC         * GET INPUT RECORD
         MODE31                      * FLIP BACK IN 31 BIT MODE
         LA      R1,INREC            * POINT TO INPUT RECORD
         LA      R7,LIMCLASS         * POINT TO CLASS
         BAL     R10,GETCLASS        * GET CLASS=
         C       R15,=F'4'           * WAS IT A COMMENT ?
         BE      READNXT             * YES - IGNORE
         C       R15,=F'99'          * ERROR ?
         BNE     READOK1             * NO - CARRY ON
         LA      R1,INREC            * POINT TO CARD
         BAL     R10,BADINPUT        * ISSUE MESSAGE
         B       READNXT             * READ NEXT RECORD
READOK1  EQU     *
         LA      R1,37(R1)           * POINT PAST TEXT
READLP2  EQU     *
         CLI     0(R1),C' '          * IS IT A BLANK ?
         BNE     EREADLP2            * NO PROCESS TEXT
         BCTR    R1,R0               * GO BACK ONE
         B       READLP2             * CHECK AGAIN
EREADLP2 EQU     *
         LA      R7,LIMCRIT          * POINT TO OUTPUT AREA
         BAL     R10,GETCRIT         * GET CRITICAL LIMIT
         C       R15,=F'99'          * RETURN CODE OK ?
         BNE     READOK2             * YES - CARRY ON
         LA      R1,INREC            * POINT TO CARD
         BAL     R10,BADINPUT        * ISSUE MESSAGE
         B       READNXT             * READ NEXT RECORD
READOK2  EQU     *
         S       R1,=F'10'           * MOVE 10 PLACES BACK
         LA      R7,LIMWARN          * POINT TO OUTPUT AREA
         BAL     R10,GETWARN         * GET WARNING THRESHOLD
         C       R15,=F'99'          * RETURN CODE OK ?
         BNE     READOK3             * YES - CARRY ON
         LA      R1,INREC            * POINT TO CARD
         BAL     R10,BADINPUT        * ISSUE MESSAGE
         B       READNXT             * READ NEXT RECORD
READOK3  EQU     *
         LA      R3,LIMITL(R3)       * SHUFFLE ALONG ONE
READNXT  EQU     *                   * GET NEXT RECORD
         B       READLP1             * LOOP BACK TO READ
ENDSYSIN EQU     *
         MVC     0(24,R3),ENDLIM     * MARK END OF TABLE
         CLOSE   (SYSIN),MODE=31,MF=(E,CLOSE1)
         DROP    R3                  * DROP ADDRESSABILITY
         B       INITOK              * ALL OK - CARRY ON
INITOK   EQU     *
* INITIALIZATION IS OK. LET THE OPERATORS KNOW AND LIST THE         *
* SETTINGS OF THE QUEUE LIMITS                                      *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH100I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         BAL     R10,LISTLIM         * LIST CURRENT SETTINGS
ACTCONS  EQU     *
* ACTIVATE THE EXTENDED MCS CONSOLE                                 *
         LA      R1,OPERPRM          * BUILD OPERPARM DEFAULTS
         USING   MCSOPPRM,R1         * ADDRESS IT
         XC      OPERPRM(MCSOPLEN),OPERPRM  * CLEAR PARMLIST
         MVI     MCSOAUTH,MCSOMSTR   * MASTER AUTHORITY
         MVI     MCSORCFL,MCSORCNO   * NO  ROUTE CODES
         MVI     MCSOMIG,MCSOMIGY    * GET MIGRATION ID
         MVI     MCSOLOGC,MCSOLOGN   * DO NOT LOG TO HARDCOPY
         MVC     MCSOKEY,=C'QWATCH  '  SET KEY
         MODESET MF=(E,MODE0)        * CHANGE TO SUPERVISOR
         MCSOPER REQUEST=ACTIVATE,   * ACTIVATE  CONSOLE               X
               NAME=CNAME,           * USING THIS NAME FOR CONSOLE     X
               TERMNAME=CNAME,       * ...AND THIS FOR TERMNAME        X
               OPERPARM=OPERPRM,     * USE THESE OPERPARMS             X
               MSGDLVRY=SEARCH,      * MSG SEARCH DELIVERY             X
               MSGECB=CONQECB,       * MSG QUEUE ECB                   X
               ALERTECB=CONALERT,    * ALERT ECB                       X
               MCSCSA=CSA,           * RETURNED STATUS AREA ADRESS     X
               MCSCSAA=CSAALET,      * RETURNED STATUS AREA ALET       X
               CONSID=CNID,          * RETURNED CONSOLE ID             X
               RTNCODE=RC,           * SAVE RETURN CODE                X
               RSNCODE=RSN,          * SAVE REASON CODE                X
               MF=(E,MCSOPPL)
         MODESET MF=(E,MODE8)        * CHANGE TO PROBLEM
         ICM     R15,15,RC           * LOAD RETURN CODE
         BNZ     ABEND111            * PROBLEMS ? ABEND
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH110I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
STARTOPS EQU   *
* NOW SET UP THE COMMUNICATION WITH THE OPERATOR CONSOLE TO         *
* ACCEPT OPERATOR COMMANDS                                          *
         LA      R4,COMM             * LOAD ADDR OF COMM...
         EXTRACT (R4),FIELDS=COMM,   * GET THE COMM AREA               X
               MF=(E,EXTRACT1)
         L       R4,COMM             * LOAD CONTENTS OF COMM
         USING   COMLIST,R4          * ..TO IEZCOM
         L       R3,COMCIBPT         * GET ADDR OF CIB
         USING   CIBNEXT,R3          * ESTAB ADDR TO IEZCIB
         LTR     R3,R3               * WAS CIB ADDR RETURNED
         BZ      SETCOUNT            * NO - INIT
CONT     CLI     CIBVERB,CIBSTART    * IS IT START?
         BNE     SETCOUNT            * NO - INIT
         QEDIT   ORIGIN=COMCIBPT,    * YES - FREE IT                   X
               BLOCK=(R3)            *
         LTR     R15,R15             * OK ?
         BZ      SETCOUNT            * YES - CONTINUE
SETCOUNT EQU     *
         QEDIT   ORIGIN=COMCIBPT,    * SET LIMIT ON MODIFY             X
               CIBCTR=1              * .. TO ONE
         MVI     FLAG,ACTIVE         * RESET FLAG
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH120I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
INTERVAL EQU   *
* NOW SET THE TIMER AND WAIT FOR SOMETHING TO HAPPEN:               *
* EITHER THE TIMER WILL POP IN WHICH CASE WE PROCESS THE MESSAGE    *
* TABLE, OR WE PROCESS AN OPERATOR COMMAND                          *
         XC      TIMERECB,TIMERECB   * CLEAR THE STIMER EXIT'S ECB
         LA      R15,TIMERECB        * LOAD ADDRESS OF TIMER ECB
         ST      R15,TIMEXPRM        * STORE IT FOR TIMER EXIT TO POST
         STIMERM SET,                * WAIT IN REAL TIME               X
               ID=TIMERID,           * SET THIS TIMER ID               X
               EXIT=TIMERXIT,        * NAME EXIT ROUTINE               X
               PARM=TIMEXPRM,        * PASS IT THIS PARM               X
               DINTVL=SECS30,        * WAIT FOR THIS LONG              X
               MF=(E,STIMERM1)
WAIT     EQU     *
         L       R4,COMM             * GET THE COMMTASK STUFF
         L       R4,COMECBPT-COMLIST(,R4)  * POINT TO COMMAND ECB
         ST      R4,ECBLIST          * POST IT TO OUR ECB LIST
         LA      R3,TIMERECB         * POINT TO THE STIMER ECB
         ST      R3,ECBLIST+4        * PUT THAT IN THE ECB LIST
         OI      ECBLIST+4,X'80'     * MARK THE END OF THE LIST
         WAIT    1,                  * WAIT FOR SOMETHING              X
               ECBLIST=ECBLIST       * TO HAPPEN IN THIS LIST
*                                    * FIGURE OUT WHAT IT WAS
         LA      R3,TIMERECB         * POINT TO TIMER ECB
         USING   ECB,R3              * COVER THE STIMER ECB
         TM      ECBCC,ECBPOST       * DID THE TIMER POP?
         BO      PERIOD              * YES, GO DO PERIODIC STUFF
         DROP    R3
         USING   ECB,R4              * COVER THE COMMAND ECB
         TM      ECBCC,ECBPOST       * DID WE GET A COMMAND?
         BNO     ABEND113            * NO - SHOULD NOT OCCUR
         BAL     R10,COMENTER        * PROCESS OP COMMAND
         TM      FLAG,STOPPING       * ARE WE STOPPING ?
         BO      RETURN              * YES - FREE EVERYTHING UP
         B       WAIT                * GO AND WAIT AGAIN
RETURN   EQU    *                    * RETURN TO CALLER
* CANCEL THE TIMER AND DE-ACTIVATE THE EXTENDED CONSOLE             *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH170I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         STIMERM CANCEL,             * CANCEL TIMER                    X
               ID=TIMERID,           * WITH THIS TIMER ID              X
               MF=(E,STIMERM2)       *
         MODESET MF=(E,MODE0)        * CHANGE TO SUPERVISOR
         MCSOPER REQUEST=DEACTIVATE, * DEACTIVATE CONSOLE              X
               CONSID=CNID,          * THIS CONSOLE ID                 X
               RTNCODE=RC,           * SAVE RETURN CODE                X
               RSNCODE=RSN,          * SAVE REASON CODE                X
               MF=(E,MCSOPPL)
         MODESET MF=(E,MODE8)        * CHANGE TO PROBLEM
RELMAIN  EQU     *
* FREE THE STORAGE AND EXIT                                         *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH180I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         L     R7,TABLETOP           * POINT TO TOP OF TABLE
         STORAGE RELEASE,            * FREE TABLE AREA                 X
               LENGTH=TABSIZE,       * THIS LENGTH                     X
               ADDR=(R7)             * POINTED TO BY R7
         L     R7,LIMITTOP           * POINT TO TOP OF LIMIT TABLE
         STORAGE RELEASE,            * FREE TABLE AREA                 X
               LENGTH=LIMSIZE,       * THIS LENGTH                     X
               ADDR=(R7)             * POINTED TO BY R7
         STORAGE RELEASE,            * FREE WORKAREA                   X
               LENGTH=WORKL,         * THIS LENGTH                     X
               ADDR=(R11)            * POINTED TO BY R11
         PR
PERIOD   EQU   *
* THIS ROUTINE IS BRANCHED TO WHEN THE TIMER POPS                   *
         TM      FLAG,ACTIVE         * ARE WE ACTIVE ?
         BNO     INTERVAL            * NO - GO BACK AND WAIT
         BAL     R10,ISSUECMD        * ISSUE THE COMMAND
         WAIT    ECB=CONQECB         * WAIT FOR CONSOLE TO GET RESPONSE
         STIMER  WAIT,DINTVL=SECS05  * WAIT ANOTHER FIVE SECONDS
         MODESET MF=(E,MODE0)        * CHANGE TO SUPERVISOR
         SAC     512                 * SET AR MODE
         SYSSTATE ASCENV=AR          * LET MACROS KNOW
GETMSG   EQU     *
* GET THE COMMAND RESPONSES TO THE $DQ,Q=XEQ COMMAND                *
         MCSOPMSG REQUEST=GETMSG,    * GET A MESSAGE                   X
               CONSID=CNID,          * MY CONSOLE ID                   X
               CMDRESP=YES,          * GET COMMAND RESPONSE            X
               CART=MYCART,          * GET COMMAND RESPONSE            X
               RTNCODE=RC,           * SAVE RETURN CODE                X
               RSNCODE=RSN,          * SAVE REASON CODE                X
               MF=(E,MCSOPMPL)
         LAE     R8,0(0,R1)          * PUT MDB ADDRESS IN R8
         USING   MDB,R8              * ADDRESSABILITY TO THE MDB
         ICM     R15,15,RC           * LOAD RETURN CODE
         C       R15,=F'8'           * COMPARE TO 8
         BNL     GOTALL              * RC >= 8 .. FINISHED
         BAL     R10,GETMDBT         * GO AND PROCESS THE MDB'S
         B       GETMSG              * GET NEXT MESSAGE
GOTALL   EQU     *
         SAC     0                   * SET PRIMARY MODE
         SYSSTATE ASCENV=P           * LET MACROS KNOW
         BAL     R10,TABLECHK        * GO AND CHECK THE TABLE
         L       R2,TABLETOP         * POINT TO TOP OF TABLE
         B       INTERVAL            * GO BACK AND WAIT
GETCRIT  EQU     *
* ROUTINE TO PARSE THE 'CRITICAL=' PARAMETER (BRANCH AND LINK)      *
* R1 ---> END OF TEXT                                               *
* R7 ---> POINTER TO OUTPUT AREA                                    *
* R15---> BCT REG AND RETURN CODE                                   *
         MVC     10(5,R7),0(R7)      * COPY OLD LEVEL AWAY
         MVC     0(5,R7),=CL5' '     * BLANK OUT AREA
         LA      R7,4(R7)            * POINT TO CRITICAL AREA
         LA      R15,6               * SET MAX LOOP COUNT
CRITLOOP EQU     *
         CLI     0(R1),C'='          * IS IT BEGINNING OF PARM ?
         BE      GOTCRIT             * YES
         MVC     0(1,R7),0(R1)       * MOVE IN PARM
         BCTR    R1,R0               * MINUS ONE
         BCTR    R7,R0               * MINUS ONE
         BCT     R15,CRITLOOP        * LOOP IT
         LA      R15,99              * INDICATE ERROR
GOTCRIT  EQU     *
         BR      R10                 * RETURN TO CALLER
GETWARN  EQU     *
* ROUTINE TO PARSE THE 'WARNING=' PARAMETER (BRANCH AND LINK)       *
* R1 ---> END OF TEXT                                               *
* R7 ---> POINTER TO OUTPUT AREA                                    *
* R15---> BCT REG AND RETURN CODE                                   *
         MVC     10(5,R7),0(R7)      * COPY OLD LEVEL AWAY
         MVC     0(5,R7),=CL5' '     * BLANK OUT AREA
         LA      R7,4(R7)            * POINT TO CRITICAL AREA
         LA      R15,6               * SET MAX LOOP COUNT
WARNLOOP EQU     *
         CLI     0(R1),C'='          * IS IT BEGINNING OF PARM ?
         BE      GOTWARN             * YES
         MVC     0(1,R7),0(R1)       * MOVE IN PARM
         BCTR    R1,R0               * MINUS ONE
         BCTR    R7,R0               * MINUS ONE
         BCT     R15,WARNLOOP        * LOOP IT
         LA      R15,99              * INDICATE ERROR
GOTWARN  EQU     *
         BR      R10                 * RETURN TO CALLER
GETCLASS EQU     *
* ROUTINE TO PARSE THE 'CLASS='   PARAMETER (BRANCH AND LINK)       *
* R1 ---> START OF TEXT                                             *
* R7 ---> POINTER TO OUTPUT AREA                                    *
* R15---> RETURN CODE                                               *
         LA      R15,0
         CLC     0(1,R1),=C'*'       * IS IT BEGINNING OF PARM ?
         BE      CLASSCOM            * YES
         CLC     0(6,R1),=C'CLASS='  * IS IT BEGINNING OF PARM ?
         BNE     CLASSERR            * YES
         MVC     0(1,R7),6(R1)       * MOVE IN PARM
         B       CLASSRET            * RETURN TO CALLER
CLASSCOM EQU     *
         LA      R15,4               * INDICATE COMMENT
         B       CLASSRET            * RETURN TO CALLER
CLASSERR EQU     *
         LA      R15,99              * INDICATE ERROR
CLASSRET EQU     *
         BR      R10                 * BRANCH BACK TO CALLER
LISTLIM  EQU     *
* ROUTINE TO LIST THE THRESHOLD SETTINGS (BRANCH AND LINK)          *
         L       R7,LIMITTOP         * POINT TO TOP OF TABLE
         USING   LIMITS,R7           * ADDRESS IT
LISTLOOP EQU     *
         CLC     0(24,R7),ENDLIM     * IS IT END YET ?
         BE      LISTEND             * YES - GET OUT
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH130I    * SET UP MSG
         MVC     WTOMSG+23(1),LIMCLASS MOVE IN THE JOB CLASS
         MVC     WTOMSG+34(5),LIMWARN  MOVE IN THE WARNING LIMIT
         MVC     WTOMSG+50(5),LIMCRIT  MOVE IN THE WARNING LIMIT
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         LA      R7,LIMITL(R7)       * NEXT ENTRY
         B       LISTLOOP            * LOOP BACK
LISTEND  EQU     *
         BR      R10                 * RETURN TO CALLER
         DROP    R7
BADINPUT EQU     *
* ROUTINE TO ISSUE THE MESSAGE ABOUT INVALID SYNTAX                 *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH140I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         BR      R10                 * RETURN
ISSUECMD EQU    *
* ROUTINE TO ISSUE THE OPERATOR COMMAND                             *
         MODESET MF=(E,MODE0)        * CHANGE TO SUPERVISOR
         LA      R7,COMMAND          * POINT TO COMMAND
         MGCRE   TEXT=(R7),          * ISSUE OP COMMAND                X
               CONSID=CNID,          * TO EXTENDED CONSOLE             X
               CMDFLAG=NOHCPY,       * DON'T PUT TO HARDCOPY           X
               CART=MYCART,          * USE THIS TOKEN                  X
               MF=(E,MGCRE1)         *
         LTR     R15,R15             * DID COMMAND GO OK ?
         BNZ     ABEND112            * NO - ABEND
         MODESET MF=(E,MODE8)        * CHANGE TO PROBLEM
         BR      R10
COMENTER EQU     *
* ROUTINE TO PROCESS AN OPERATOR COMMAND (BRANCH AND LINK)          *
* R4 ---> COMM AREA                                                 *
* R3 ---> CIB                                                       *
* * NOTE SAVE REG10 AS THIS ROUTINE CALLS OTHER ROUTINES            *
         L       R4,COMM             * GET BACK R4
         USING   COMLIST,R4          * ADDRESS IT
         L       R3,COMCIBPT         * GET ADDR OF CIB
         USING   CIBNEXT,R3          * ADDRESS IT
         ST      R10,SAVE10          * SAVE CONTENTS OF R10
STOP     EQU     *
* ROUTINE TO PROCESS A STOP COMMAND                                 *
         CLI     CIBVERB,CIBSTOP     * IS IT STOP?
         BNE     MODIFY              * NO - CHECK FOR MODIFY
         OI      FLAG,STOPPING       * INDICATE STOP
         B       OPCMDRET            * GO BACK
MODIFY   EQU     *
         CLI     CIBVERB,CIBMODFY    * IS IT MODIFY ?
         BNE     OPERROR             * NO - ERROR
PAUSEC   EQU     *
* ROUTINE TO PROCESS A PAUSE COMMAND                                *
         CLC     CIBDATA(6),PAUSE    * IS IT PAUSE ?
         BNE     RESUMEC             * NO - CARRY ON
         MVI     FLAG,PAUSED         * SET FLAG TO PAUSED
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH150I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         B       OPCMDRET            * GO BACK
RESUMEC  EQU     *
* ROUTINE TO PROCESS A RESUME COMMAND                               *
         CLC     CIBDATA(7),RESUME   * IS IT RESUME?
         BNE     LISTC               * NO - CARRY ON
         MVI     FLAG,ACTIVE         * SET FLAG TO ACTIVE
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH160I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         B       OPCMDRET            * GO BACK
LISTC    EQU     *
* ROUTINE TO PROCESS A LIST COMMAND                                 *
         CLC     CIBDATA(5),LIST     * IS IT LIST  ?
         BNE     WARNC               * NO - CARRY ON
         BAL     R10,LISTLIM         * LIST THE LIMITS
         B       OPCMDRET            * GO BACK
WARNC    EQU     *
* ROUTINE TO PROCESS A CLASS=C,WARNING=NNNNN COMMAND                *
         CLC     CIBDATA(6),CLASS    * IS IT CLASS= ?
         BNE     OPERROR             * NO - ERROR
         CLC     CIBDATA+8(8),WARNING  IS IT 'WARNING='
         BNE     CRITC               * NO - CARRY ON
         LA      R1,CIBDATA+16       * POINT TO CIBDATA
         L       R7,LIMITTOP         * POINT TO TOP OF LIMIT TABLE
         USING   LIMITS,R7           * ADDRESS IT
WARNCLP  EQU     *
         CLI     1(R1),X'00'         * END OF CIBDATA ?
         BE      WARNEND             * YES - GET OUT
         LA      R1,1(R1)            * MOVE ALONG PLEASE
         B       WARNCLP             * LOOP ALONG
WARNEND  EQU     *
         ST      R7,SAVE7            * SAVE REG 7
         CLC     0(24,R7),ENDLIM     * IS IT END ?
         BE      WARNXFND            * YES - CLASS NOT IN LIMIT TABLE
         CLC     LIMCLASS(1),CIBDATA+6 IS IT CORRECT CLASS ?
         BE      WARNUPD             * YES - UPDATE TABLE
         LA      R7,LIMITL(R7)       * NO - POINT TO NEXT ENTRY
         B       WARNEND             * GO AND PROCESS IT
WARNUPD  EQU     *
         LA      R7,LIMWARN          * POINT TO OUTPUT AREA
         BAL     R10,GETWARN         * PARSE THE COMMAND
         C       R15,=F'99'          * ALL OK ?
         BE      WARNERR             * RETURN
         BAL     R10,LISTLIM         * LIST SETTINGS
         B       OPCMDRET            * RETURN
WARNXFND EQU     *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH195I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         B       OPERROR             * GO TO ERROR ROUTINE
WARNERR  EQU     *
         L       R7,SAVE7            * RESTORE REG 7
         MVC     LIMWARN(5),LIMOWARN * RESET THE LIMIT
         B       OPERROR             * ERROR
CRITC    EQU     *
* ROUTINE TO PROCESS A CLASS=C,CRITICAL=NNNNN COMMAND               *
         CLC     CIBDATA+8(9),CRITICAL IS IT 'CRITICAL='
         BNE     OPERROR             * NO - CARRY ON
         LA      R1,CIBDATA+17       * POINT TO CIBDATA
         L       R7,LIMITTOP         * POINT TO TOP OF LIMIT TABLE
         USING   LIMITS,R7           * ADDRESS IT
CRITCLP  EQU     *
         CLI     1(R1),X'00'         * END OF CIBDATA ?
         BE      CRITEND             * YES - GET OUT
         LA      R1,1(R1)            * MOVE ALONG PLEASE
         B       CRITCLP             * LOOP ALONG
CRITEND  EQU     *
         ST      R7,SAVE7            * SAVE REG 7
         CLC     0(24,R7),ENDLIM     * IS IT END ?
         BE      CRITXFND            * YES - CLASS NOT IN LIMIT TABLE
         CLC     LIMCLASS(1),CIBDATA+6 IS IT RIGHT CLASS ?
         BE      CRITUPD             * YES - UPDATE TABLE
         LA      R7,LIMITL(R7)       * POINT TO NEXT ENTRY
         B       CRITEND             * GO AND CHECK IT
CRITUPD  EQU     *
         LA      R7,LIMCRIT          * POINT TO OUTPUT AREA
         BAL     R10,GETCRIT         * PARSE THE COMMAND
         C       R15,=F'99'          * ALL OK ?
         BE      CRITERR             * RETURN
         BAL     R10,LISTLIM         * LIST SETTINGS
         B       OPCMDRET            * RETURN
CRITXFND EQU     *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH195I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         B       OPERROR             * GO TO ERROR ROUTINE
CRITERR  EQU     *
         L       R7,SAVE7            * RESTORE REG 7
         MVC     LIMCRIT(5),LIMOCRIT * RESET THE LIMIT
         B       OPERROR             * ERROR
OPERROR  EQU     *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH190I    * SET UP MSG
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
OPCMDRET EQU     *
         QEDIT   ORIGIN=COMCIBPT,    * FREE IT                         X
               BLOCK=(R3)            *
         L       R10,SAVE10          * RESET R10
         BR      R10                 * GO BACK
         DROP    R7
GETMDBT  EQU     *
* ROUTINE TO PROCESS THE MDB'S  (BRANCH AND LINK)                   *
* R8 ---> MDB START                                                 *
* R9 ---> MDB FLOAT                                                 *
* R5 ---> MDB END                                                   *
* R6 ---> NEXT MDB                                                  *
         LAE     R6,0(0,R8)          * CALC PREFIX ADDRESS IN R6
         SH      R6,=AL2(MDBPLNNO)   * PREFIX=START-PREFIX LENGTH
         USING   MDBPRFX,R6          * GET ADDRESSABILITY
         L       R6,MDBPNEXT         * GET FORWARD POINTER IN R6
         DROP    R6                  * DROP DSECT
         CPYA    R9,R8               * COPY AR8 (MDB HEADER)
         LR      R9,R8               * COPY REG8 (MDB HEADER)
         CPYA    R5,R8               * COPY AR8 (MDB HEADER)
         LR      R5,R8               * COPY REG8 (MDB HEADER)
         AH      R5,MDBLEN           * POINT TO END OF MDB
         LA      R9,MDBHLEN(R9)      * ADD LENGTH OF HEADER
DOMDBT   EQU     *
         CR      R9,R5               * COMPARE AGAINST END
         BNL     CHECKNXT            * IF LAST CHECK NEXT
         USING   MDBT,R9             * R9 --> MDB TEXT OBJECT
         CLC     MDBTTYPE,=X'0004'   * IS IT A TEXT OBJECT
         BNE     NEXTOBJ             * NO - LOOK AT NEXT ONE
         LH      R7,MDBTLEN          * LOAD LENGTH OF TEXT
         S       R7,=A(MDBTMBOB)     * CALCUATE MESSAGE LENGTH
         STH     R7,MSGLEN           * STORE IN TABLE
         SH      R7,=H'1'            * MINUS ONE FOR MOVE
         EX      R7,MOVEMSG          * EXECUTE THE MOVE
         AH      R9,MDBTLEN          * GO TO NEXT TEXT OBJECT
         LA      R2,TABL(R2)         * POINT TO NEXT TABLE ENTRY
         B       DOMDBT              *
NEXTOBJ  EQU     *
         AH      R9,MDBTLEN          * ADD LENGTH OF MDB OBJECT
         B       DOMDBT              * LOOP BACK
CHECKNXT EQU     *
         LTR     R6,R6               * CHECK FOR MORE MDBS
         BZ      RETMDBT             * ALL DONE
         LR      R8,R6               * NEXT MDB
         B       GETMDBT             * PROCESS THE MDB
RETMDBT  EQU     *
         BR      R10                 * RETURN TO CALLER
TABLECHK EQU     *
* THIS IS THE ROUTINE TO PROCESS THE MESSAGE TABLE                  *
* R7 ---> END OF TABLE                                              *
* R2 ---> BEGINNING OF TABLE + FLOAT                                *
* R3 ---> LIMIT TABLE                                               *
         LR      R7,R2               * STORE ADDRESS OF END OF TABLE
         L       R2,TABLETOP         * POINT TO TOP OF TABLE
         L       R3,LIMITTOP         * POINT TO TOP OF LIMIT TABLE
         USING   LIMITS,R3           * ADDRESS IT
TABLOOP  EQU     *                   *
         CR      R2,R7               * IS IT END YET ?
         BNL     TABLERET            * YES - RETURN
TABCLASS EQU     *
         CLC     0(24,R3),ENDLIM     * END OF LIMIT TABLE ?
         BE      NEXTLINE            * YES - DO NEXT
         CLC     JCLASS,LIMCLASS     * IS IT RIGHT LIMIT ENTRY ?
         BE      TABCHECK            * YES CARRY ON
         LA      R3,LIMITL(R3)       * NO - SHUFFLE DOWN TABLE
         B       TABCLASS            * CHECK AGAIN
TABCHECK EQU     *
         CLC     MSGID,HASP647       * IS IT $HASP647 ?
         BNE     NEXTLINE            * NO - GO TO NEXT LINE
         CLC     JQNUM,LIMCRIT       * COMPARE TO CRITICAL LEVEL
         BNL     WTOCRIT             * ISSUE WTO (CRITICAL)
         CLC     JQNUM,LIMWARN       * COMPARE TO WARNING LEVEL
         BNL     WTOWARN             * ISSUE WTO (WARNING)
NEXTLINE EQU     *
         LA      R2,TABL(R2)         * POINT TO NEXT ENTRY
         L       R3,LIMITTOP         * POINT TO NEXT ENTRY
         B       TABLOOP             * LOOP IT
WTOCRIT  EQU     *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH240E    * SET UP MSG
         MVC     WTOMSG+24(1),JCLASS * MOVE IN JOBCLASS
         MVC     WTOMSG+40(5),JQNUM  * MOVE IN JOB QUEUE DEPTH
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         B       NEXTLINE            * DO NEXT LINE
WTOWARN  EQU     *
         L       R15,MSGPGM          * LOAD MESSAGE ROUTINE
         MVC     WTO1(72),QWH220I    * SET UP MSG
         MVC     WTOMSG+24(1),JCLASS * MOVE IN JOBCLASS
         MVC     WTOMSG+40(5),JQNUM  * MOVE IN JOB QUEUE DEPTH
         LA      R1,WTO1             * POINT TO MESSAGE
         BALR    R14,R15             * ISSUE MESSAGE
         B       NEXTLINE            * DO NEXT LINE
TABLERET EQU     *
         BR      R10
         DROP    R3
TIMERXIT EQU  *
* THIS IS THE EXIT ROUTINE TAKEN BY THE TIMER WHEN THE INTERVAL IS  *
* EXPIRED.                                                          *
* R2 ---> TIMER ECB                                                 *
         PUSH    USING               * SAVE USING STATUS
         DROP    ,                   * DROP ADDRESSABILITY
         BAKR    R14,R0              * LINKAGE STACK
         LR      R12,R15             * LOAD BASE
         USING   TIMERXIT,R12        * ADDRESS BASE
         L       R2,4(,R1)           * POINT TO PARM PASSED
         POST    (R2)                * POST THE TIMER ECB
         PR                          * RETURN
         POP     USING               * BRING BACK USING STATUS
ABEND111 ABEND   111,DUMP            * ACTIVATE CONSOLE FAILED
ABEND112 ABEND   112,DUMP            * OP COMMAND FAILED
ABEND113 ABEND   113,DUMP            * UNEXPECTED ECB POST
* CONSTANTS VARIABLES AND DSECTS                                    *
STOPPING EQU     X'04'               * STOP FLAG SETTING
PAUSED   EQU     X'02'               * PAUSE FLAG SETTING
ACTIVE   EQU     X'01'               * ACTIVE FLAG SETTING
COMMAND  DS      0F                  * OPERATOR COMMAND
         DC      H'9'                *
         DC      CL9'$DQ,Q=XEQ'      *
         DS      0F
SECS30   DC      CL8'00003000'       * THIRTY SECONDS
SECS05   DC      CL8'00000500'       * FIVE SECONDS
HASP647  DC      CL8'$HASP647'       * JES MESSAGE TO LOOK FOR
PAUSE    DC      CL5'PAUSE',X'00'    * PAUSE  COMMAND
RESUME   DC      CL6'RESUME',X'00'   * RESUME COMMAND
LIST     DC      CL4'LIST',X'00'     * LIST   COMMAND
WARNING  DC      CL8'WARNING='       * WARNING COMMAND
CRITICAL DC      CL9'CRITICAL='      * CRITICAL COMMAND
CLASS    DC      CL6'CLASS='         * CLASS COMMAND
ENDLIM   DC      24X'00'             * END MARKER
MODEMOD0 MODESET MODE=SUP,KEY=ZERO,MF=L
MODESETL EQU     *-MODEMOD0
MODEMOD8 MODESET MODE=PROB,KEY=NZERO,MF=L
MGCREMOD MGCRE   MF=L
MGCREL   EQU     *-MGCREMOD
EXTRACM  EXTRACT ,FIELDS=COMM,MF=L
EXTRACL  EQU     *-EXTRACM
STIMEMM  STIMERM SET,MF=L
STIMEML  EQU     *-STIMEMM
STIMEMC  STIMERM CANCEL,MF=L
STIMECL  EQU     *-STIMEMC
OPENM    OPEN    (,),MODE=31,MF=L
OPENML   EQU     *-OPENM
CLOSEM   CLOSE   (,),MODE=31,MF=L
CLOSEML  EQU     *-CLOSEM
SYSINM   DCB     DDNAME=SYSIN,DSORG=PS,MACRF=GM,LRECL=80,RECFM=FB,     X
               EODAD=ENDSYSIN
SYSINML  EQU     *-SYSINM
MOVEMSG  MVC     MSGTXT(0),MDBTMSGT
QWH100I  DC      H'70'
         DC      CL70'QWH100I JES2 QUEUE WATCH FACILITY IS INITIALIZED'
QWH110I  DC      H'70'
         DC      CL70'QWH110I EXTENDED CONSOLE ESTABLISHED            '
QWH120I  DC      H'70'
         DC      CL70'QWH120I NOW ACCEPTING OPERATOR COMMANDS         '
QWH130I  DC      H'70'
         DC      CL70'QWH130I QUEUE THRESHOLDS CLASS=   WARNING=       X
               CRITICAL=     '
QWH140I  DC      H'70'
         DC      CL70'QWH140I INVALID STATEMENT SYNTAX - IGNORED      '
QWH150I  DC      H'70'
         DC      CL70'QWH150I JES2 QUEUE WATCH FACILITY IS NOW PAUSED '
QWH160I  DC      H'70'
         DC      CL70'QWH160I JES2 QUEUE WATCH FACILITY IS NOW ACTIVE '
QWH170I  DC      H'70'
         DC      CL70'QWH170I RELEASING CONSOLE AND TIMER             '
QWH180I  DC      H'70'
         DC      CL70'QWH180I JES2 QUEUE WATCH FACILITY IS TERMINATING'
QWH190I  DC      H'70'
         DC      CL70'QWH190I INVALID COMMAND - PLEASE RE-ENTER       '
QWH195I  DC      H'70'
         DC      CL70'QWH195I NO ENTRY FOUND FOR JOB CLASS IN CURRENT SX
               ETTINGS'
QWH220I  DC      H'70'
         DC      CL8'QWH220I '
         DC      CL9'WARNING  '
         DC      CL15'JES2 JOB CLASS '
         DC      CL2'  '
         DC      CL14'QUEUE DEPTH = '
         DC      CL22' '
QWH240E  DC      H'70'
         DC      CL8'QWH240E '
         DC      CL9'CRITICAL '
         DC      CL15'JES2 JOB CLASS '
         DC      CL2'  '
         DC      CL14'QUEUE DEPTH = '
         DC      CL22' '
         DS      0D
WORKAREA DSECT
SAVEAREA DS      18F                 * SAVEAREA
CNAME    DS      CL8                 * CONSOLE NAME
CNID     DS      F                   * CONSOLE NAME
CSA      DS      F                   * REQUIRED BY MCSOPER
CSAALET  DS      F                   * REQUIRED BY MCSOPER
RC       DS      F                   * RETURN CODE
RSN      DS      F                   * REASON CODE
CONQECB  DS      F                   * MESSAGE IN QUEUE ECB
CONALERT DS      F                   * PROBLEM WITH CONSOLE ECB
MYCART   DS      D                   * TOKEN ASSOC WITH MY STUFF
TABLETOP DS      F                   * TOP OF MESSAGE TABLE
LIMITTOP DS      F                   * TOP OF LIMIT TABLE
COMM     DS      F                   * COMM AREA
TIMERECB DS      F                   * THE STIMER ECB
ECBLIST  DS      2F                  * ECB LIST FOR STIMER
TIMERID  DS      F                   * TIMER ID
TIMEXPRM DS      F                   * PARM PASSED TO STIMER
MSGPGM   DS      F                   * ADDRESS OF QWATCMSG PGM
OPERPRM  DS      CL(MCSOPLEN)
EXTRACT1 EXTRACT ,FIELDS=COMM,MF=L
MGCRE1   MGCRE   MF=L
MODE0    MODESET MODE=SUP,KEY=ZERO,MF=L
MODE8    MODESET MODE=PROB,KEY=NZERO,MF=L
         MCSOPER MF=(L,MCSOPPL)
         MCSOPMSG MF=(L,MCSOPMPL)
STIMERM1 STIMERM SET,MF=L
STIMERM2 STIMERM CANCEL,MF=L
OPEN1    OPEN    (,),MODE=31,MF=L
CLOSE1   CLOSE   (,),MODE=31,MF=L
SYSIN    DS      CL(SYSINML)
INREC    DS      CL80
         DS      0F
SAVE10   DS      F                   * REG10 SAVEAREA
SAVE7    DS      F                   * REG7  SAVEAREA
WTO1     DS      0CL62               * WTO AREA
WTOLEN   DS      H                   * WTO LENGTH
WTOTEXT  DS      0CL60               * WTO TEXT
WTOID    DS      CL8                 * MESSAGE ID
WTOMSG   DS      CL62                * MESSAGE TEXT
FLAG     DS      X                   * QWATCH FLAG
WORKL    EQU     *-WORKAREA          * LENGTH OF WORKAREA
TABLE    DSECT
TABSTRT  DS      0F                  * START OF TABLE
MSGLEN   DS      H                   * LENGTH OF MESSAGE
MSGTXT   DS      0CL126              * TEXT OF MESSAGE
         DS      CL1                 * SPACE
MSGID    DS      CL8                 * MESSAGE ID
         DS      CL1                 *
JQNUM    DS      CL5                 * NUMBER OF JOBS
         DS      CL1                 *
LABXEQ   DS      CL3                 * LABEL 'XEQ'
         DS      CL1                 *
JCLASS   DS      CL1                 * JOBCLASS
         DS      CL1                 *
SYSID    DS      CL4                 * SYSTEM ID
         DS      CL100               *
TABL     EQU     *-TABSTRT           * LENGTH OF TABLE ENTRY
TABSIZE  EQU     1000*TABL           * AMOUNT TO GRAB
LIMITS   DSECT
LIMCLASS DS      CL1                 * JOB CLASS
         DS      CL3                 * FILLER
LIMWARN  DS      CL5                 * WARNING LIMIT
LIMCRIT  DS      CL5                 * CRITICAL LIMIT
LIMOWARN DS      CL5                 * OLD WARNING LIMIT
LIMOCRIT DS      CL5                 * OLD CRITICAL LIMIT
LIMITL   EQU     *-LIMITS            * SIZE OF ENTRY
LIMSIZE  EQU     50*LIMITL           * SIZE OF TABLE
         IEZCOM                      * COMM AREA
         IHAECB                      * ECB
         IEZCIB                      * CIB
         IEZVG111                    * OPERPARM
         IEAVG131                    * CONSOLE STATUS
         IEAVG132                    * MDB PREFIX
         IEAVM105                    * MDB
         END
QWATCMSG  TITLE 'QWATCH MESSAGE ROUTINE'
*-------------------------------------------------------------------*
* QWATCMSG IS THE GENERAL MESSAGE ROUTINE USED BY QWATCH            *
* THIS NEEDS TO BE AUTHORIZED IN ORDER TO PLACE A MESSAGE ON        *
* THE CONSOLE WITHOUT A PRECEEDING '+'                              *
* ON ENTRY R1 POINTS TO THE MESSAGE TEXT:                           *
* R1 ---->    LENGTH   DS  H                                        *
*             MSGID    DS  0CL8                                     *
*             MSGNUM   DS  CL6                                      *
*             MSGFLAG  DS  CL1 (I=INFO,E=ERROR)                     *
*                      DS  CL1                                      *
*             WTO TEXT DS  CL62                                     *
*-------------------------------------------------------------------*
QWATCMSG  CSECT
QWATCMSG  AMODE 31
QWATCMSG  RMODE 24
          BAKR  R14,0                     * LINKAGE STACK
          LR    R12,R15                   * SET BASE REG
          USING QWATCMSG,R12              * AND ADDRESSABILITY
          LR    R10,R1                    * COPY PARMS
          CLI   8(R10),C'I'               * IS IT INFORMATIONAL ?
          BE    WTOINFO                   * YES - ISSUE NORMAL MSG
          CLI   8(R10),C'E'               * IS IT ERROR ?
          BE    WTOERROR                  * YES - ISSUE ERROR MSG
          B     RETURN00                  * FINISH
WTOINFO   EQU   *
          WTO   TEXT=((R10))              * ISSUE WTO
          B     RETURN00                  * GET OUT
WTOERROR  EQU   *
          WTO   TEXT=((R10)),             * ISSUE WTO                  X
               ROUTCDE=(1),                                            X
               DESC=(11)
          B     RETURN00                  * GET OUT
RETURN00  EQU   *
          LA    R15,0
RETURN    EQU   *
          PR
          END QWATCMSG


Rob Scott
MVS Consultant (UK)                                                   c Xephon 1

