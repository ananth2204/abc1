Dangers of user-written security mechanisms

I'd like to try to put an end to the on-going quest for a 'fully
secure' improvement to the authorization mechanisms provided
by IBM.  I believe these exercises to be futile because the
restrictions that make the existing mechanisms difficult to use
are, for the most part, necessary.

What is at issue is whether an authorized routine must take
precautions to protect itself and its work areas against
modification by asynchronous routines such as other tasks and
exits dispatched under IRBs.  Privileged code that must share
an address space with unprivileged code (eg an SVC routine)
needs not only to itself reside in store-protected storage, but to
use only store-protected work areas, call only store-protected
subroutines, and follow a number of other precautions detailed
under the heading System Integrity in the System Macros and
Facilities manual.  MVS helps enforce this standard by making
GETMAIN default to store-protected subpool 252 when the
requester is in supervisor state.

On the other hand, the idea behind APF authorization is that
such precautions are unnecessary if code from untrustworthy
sources is excluded from the address space.  An APF
authorization code in the directory entry of a module in an
authorized library conveys not only the privilege of
authorization, but the responsibility of excluding untrustworthy
routines.  MVS helps enforce this standard by requiring
authorization to begin with the job step program and by
reacting to subsequent violations with abend S306 unless the
program takes very deliberate steps to avoid it.

The unattributed article An alternative to APF authorization
(Issue 54, 1991 March) exemplifies the dangers of granting
authorization when untrustworthy code may be present in the
address space.  The suggested SVC takes no steps to determine
whether the authorized  caller has agreed to accept either of the
above sets of responsibilities; much less, steps to help enforce
that set.  Most modules live on LINKLIST or authorized
libraries for reasons that have nothing to do with authorization.
For example, IEBGENER, a carefree program that never asked
for authorization and doesn't want it, will obligingly call a
user-label exit from anybody's library, whence the exit could
issue your SVC.  Many other programs on the LINKLIST do
GETs or READs with unprotected save areas that could be
modified by an asynchronous routine to gain control.
This loophole can, of course, be patched.  Few installations
would want to monkey with the format of a load module's
directory entry but a 'badge of responsibility' similar to the
APF code could be required in the module itself.  The SVC
might check, say, for the word AUTHSVC at the end of the
identifier in the SAVE macro at the entry point.  This
incantation is not a 'secret word' but an arbitrary marking
which, like the APF code, can be safely declassified because it
is effective only for modules on authorized libraries.

Thus improved, the SVC is completely secure provided that the
coders of the authorized routines carry out their responsibilities
to enforce storage-protection and parameter-checking
requirements throughout the program's entire duration.  But if
they're going to do that, they'll probably find it easier to write
a type-4 SVC routine.  The functionality provided by the
authorization SVC therefore turns out to be more or less that of
an extended SVC router for user-written routines, one that uses
SVC 6 (LINK) instead of SVC 109 as its entry.

One advantage of the SVC approach is that MVS provides a
secure means of returning control by saving registers and status
in the Request Block.  This is less valuable in ESA, where a
user-authorized program can save its caller's status on the
linkage stack.

In summary, IBM seems to have got this one right for a
change.  Authorized routines must secure themselves either by
storage protection and parameter checking, or by exclusion of
untrustworthy code.  The user-written SVC interface provides
for the former, APF for the latter.  There's little that can be
done to improve on this without creating security exposures.

Harvey Wachtel
Director of Data Processing
University Application Processing Center of CUNY (USA)     c Xephon 1991

