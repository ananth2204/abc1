Using MODIFY/STOP in a user program

If you ever need to communicate with your program via the
console without using the WTO or WTOR macros, then the
following utility should meet your requirements. The routine
uses the MVS MODIFY command. In your program, you call
the utility every time you want to verify whether a MODIFY
command for the address space in which your program is
running has been entered from the console. The parameter
associated with the MODIFY command is accessible from your
program.

You can put the program into a wait state until a MODIFY
command is entered for the address space in which your
program is running: in this case your program continues
execution until a MODIFY or STOP command is issued.

The utility is called via a CALL service with two optional
parameters. If you call the utility without any parameters, the
utility does not return the parameter of the MODIFY
command. You can call the utility in two ways: the first,
without a parameter, informs the system that the program can
obtain communication with the MODIFY command; the
second, with two parameters, returns the MODIFY command's
parameters. In both cases the utility returns a return code of 8
in Register 15 if a STOP command has been entered and 4 if a
MODIFY command has been entered.

Here is an example of how to use the program:

 IDENTIFICATION DIVISION.
 PROGRAM-ID. COMMAND.
 ENVIRONMENT DIVISION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
01  PSCMDI-PARM.
      05  LLCMD                     PIC  S9(4)  COMP VALUE +4.
      05  COMMAND                   PIC  X(4)    VALUE SPACE.
 PROCEDURE DIVISION.
*                       START PROGRAM
      CALL 'PSCMDI' .
      PERFORM EXEC-COMMAND THRU EXEC-COMMAND-END
      UNTIL COMMAND = 'STOP'.
      STOP RUN.
*                       ROUTINE COMMAND
EXEC-COMMAND.
      CALL 'PSCMDI' USING LLCMD COMMAND.
       IF COMMAND = 'DOIT' THEN PERFORM .....
       IF COMMAND = 'DONT' THEN PERFORM ....
EXEC-COMMAND-END.

In this example, the program loops until the STOP command is
entered. When the operator enters the command 'F
jobname,DOIT', where jobname is the name of the address
space in which the program is running (started task or job), the
program intercepts the command and PERFORMs the
appropriate routine.

If you move 'WAIT' into the field COMMAND, the program
will wait for a MODIFY or STOP command.

When you link edit your program, don't user the NCAL option
for the PSCMDI utility, because it saves the addresses of the
two parameters in our fields.

***********************************************************************
*                OPERATION = CALLED BY USER PROGRAM WITH TWO          *
*                            PARAMETERS:                              *
*                                  2 BYTE - LENGTH AREA RETURN CMD    *
*                                  N BYTE - AREA FOR CMD              *
*             NOTES =  IF THE SECOND PARM HAS THE VALUE  "WAIT"       *
*                      THE UTILITY REMAINS IN WAIT FOR A MODIFY OR    *
*                      STOP COMMAND                                   *
*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *
*                   REGISTERS 0 &  2  = UNUSED                        *
*                   REGISTER  1       = PARAMETER                     *
*                   REGISTERS 3 TO 11 = WORK REGISTER                 *
*                                  3  = ADDRESS   CIB                 *
*                                  4  = LENGTH FOR MOVE DATA          *
*                                  5  = ADDRESS   ANSWER COMM         *
*                                  10 = LENGTH RETURN DATA            *
*                                  11 = ADDRESS  OF RETURN DATA       *
*                   REGISTER  12      = ADDRESSABILITY TO PSCMDI      *
*                                       CSECT                         *
*                   REGISTER  13      = SAVE AREA REGISTER            *
*                   REGISTER  14      = RETURN ADDRESS                *
*                   REGISTER  15      = RETURN CODE                   *
*             OUTPUT = REGISTER 15 - RETURN CODE                      *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                OUTPUT = NONE                                        *
*                RETURN CODE = 0 - ALL OK                             *
*                              4 - INTERCEPTED  MODIFY COMMAND        *
*                              8 - INTERCEPTED  STOP COMMAND          *
***********************************************************************
PSCMDI   CSECT
         SAVE  (14,12),,PSCMDI.&SYSTIME._&SYSDATE SAVE REGS
         LR    R12,R15              LOAD REGISTER 12 FROM 15
         USING PSCMDI,R12           ESTABLISH ADDRESSABILITY
         LA    R10,WORKAREA         SAVE POINTER TO WORKAREA
         ST    R13,4(R10)           STORE ADDR SAVEAREA OLD
         ST    R10,8(,R13)          STORE ADDR SAVEAREA NEW
         LR    R13,R10              LOAD ADDR SAVEAREA NEW
         LTR   R9,R1                PARAMETER PRESENT?
         BZ    INITCIB              NO INITCIB
         L     R10,0(R9)            SAVE  ADDRESS FIRST PARM
         L     R11,4(R9)            SAVE  ADDRESS SECOND  PARM
         LA    R10,0(R10)           SAVE  ADDRESS AREA LL DATA
         LA    R11,0(R11)           SAVE  ADDRESS AREA RETURN  DATA
         ST    R10,REG10            STORE     PARMLL
         ST    R11,REG11            STORE     PARM
         CLC   0(4,R11),=C'WAIT'    WAIT FOR COMMAND?
         BNE   INITCIB              NO INITCIB
         MVC   WAIT,=C'WAIT'        ELSE SET REQUEST OF WAIT
***********************************************************************
*        INITIALIZATION     : CLEAR    CIB FROM START COMMAND         *
***********************************************************************
INITCIB  EQU   *
         LA    R5,ANSRAREA          ADDRESS OF RESPONSE AREA FOR QEDIT
         EXTRACT (R5),FIELDS=COMM   OBTAIN ADDRESS OF THE              X
                                    COMMUNICATIONS AREA FOR THE        X
                                    CURRENT TASK
         L     R5,ANSRAREA          LOAD ADDRESS OF COMMUNICATIONS AREA
         USING COMLIST,R5           ESTABLISH ADDRESSABILITY TO IEZCOM
         L     R3,COMCIBPT          OBTAIN ADDRESS OF CIB
         LTR   R3,R3                WAS A CIB ADDRESS RETURNED?
         BZ    CHECK                NO, CONTINUE INITIALIZATION
         USING CIBNEXT,R3           ESTABLISH ADDRESSABILITY TO IEZCIB
         CLC   FIRST,NO
         BE    CHECK
* FREE THE START CIB, IF PRESENT STORAGE
         CLI   CIBVERB,CIBSTART     FIRST CIB FOR START COMMAND?
         BNE   SETCOUNT             NO, CONTINUE INITIALIZATION
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) YES, FREE IT
         LTR   R15,R15
         BZ    SETCOUNT
         WTO   'PSCMDI00 ERROR TO FREE THE START CIB '
         ABEND 999
* SET THE LIMIT ON MODIFY COMMANDS
SETCOUNT EQU   *
         QEDIT ORIGIN=COMCIBPT,CIBCTR=1   SET LIMIT TO 1
         MVC   FIRST,NO
* COMMAND PROCESSING LOOP
CHECK    EQU   *
         CLC   FIRST,NO
         BNE   SETCOUNT
         L     R4,COMECBPT          LOAD   ADDRESS COMMUNICATION ECB
         CLI   0(R4),X'00'          VERIFY WHETHER A COMMAND EXISTS
         BE    TSTWAIT              IF NO, RETURN TO CALLER
* CHECK THE COMMUNICATIONS
CHECKCIB EQU   *
         L     R3,COMCIBPT          OBTAIN ADDRESS OF CIB
         L     R10,REG10            LOAD ADDRESS DATA COMMAND
         L     R11,REG11
* TEST FOR MODIFY COMMAND CIB
         CLI   CIBVERB,CIBMODFY     IS IT FOR A MODIFY COMMAND?
         BNE   TSTSTOP              NO, GO TEST FOR STOP
*  PROCESS THE MODIFY COMMAND
* MOVE DATA FROM CIB TO WORKING STORAGE
         LTR   R11,R11              AREA FOR DATA COMMAND?
         BZ FREECIB                 NO, FREE   CIB
         LH    R4,CIBDATLN          OBTAIN LENGTH OF DATA FIELD
         BCTR  R4,0                 DECREASE LENGTH BY ONE
         XR    R6,R6                CLEAR  REG.5
         ICM   R6,B'0011',0(R10)    LOAD LENGTH FOR RETURN DATA
         BCTR  R6,0                 DECREASE OF ONE
         EX    R6,DATABLK           CLEAR  WORKING STORAGE
         CR    R4,R6
         BNH   MUOVI
         LR    R4,R6
MUOVI    EX    R4,DATAMOVE          MOVE DATA TO WORKING STORAGE
         LA    R15,4                RC FOR MODIFY
         B     FREECIB              FREE CIB AND RETURN
* TEST FOR STOP   COMMAND CIB
TSTSTOP  EQU   *
         CLI   CIBVERB,CIBSTOP      IS IT FOR A STOP COMMAND?
         BNE   FREECIB              NO, FREE CIB AND RETURN
*  PROCESS THE STOP   COMMAND
* MOVE DATA FROM CIB TO WORKING STORAGE
         LTR   R11,R11              VERIFY WHETHER DATA AREA EXISTS
         BZ FREECIB                 NO, FREE   CIB
         MVC   0(4,R11),STOP        MOVE  "STOP" TO AREA DATA
         LA    R15,8                RC FOR STOP
FREECIB  DS    0H
*  FREE  THE        CIB
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R3) FREE IT
         CLC   0(4,R11),STOP        IF REQUEST IS STOP?
         BNE   SETCOUNT             NO SET CIB FOR MODIFY/STOP
RETURN   DS    0H
         LR    R1,R13               SAVE REG13
         L     R13,4(,R13)          LOAD REG13 POINTER BACK
         RETURN (14,12),RC=(15)
TSTWAIT  EQU   *
         CLC   WAIT,=C'WAIT'
         BNE   RETURN
         WAIT  ECB=(R4)
         MVC   WAIT,=C'    '
         B     CHECKCIB
         DS    0F
WORKAREA DS    18F                     WORK AREA FOR CIB DATA
ANSRAREA DS    F                       ANSWER AREA FOR EXTRACT MACRO
REG10    DC    F'0'                    PTR TO LL PARM
REG11    DC    F'0'                    PRT TO PARM
FIRST    DC    C'  '
DATAMOVE MVC   0(0,R11),CIBDATA        MOVE DATA FROM CIB TO DATAAREA
DATABLK  XC    0(0,R11),0(R11)         CLEAR  WORK
WAIT     DS    CL4
STOP     DC    C'STOP'
NO       DC    C'NO'
         LTORG
         DSECT
         IEZCOM             MAPPING MACRO FOR COMMUNICATION AREA
         DSECT
         IEZCIB             MAPPING MACRO FOR CIB
         END




