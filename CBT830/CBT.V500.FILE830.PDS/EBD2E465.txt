TSO TRANSMIT with automatic RECEIVE

The Interactive Data Transmission Facility (IDTF) consisting
of the TSO commands TRANSMIT and RECEIVE has been
recognized as one of the most useful facilities that IBM has
ever provided for MVS.  Only one feature has really been a
limitation, and that is the need to issue the RECEIVE
command manually each time a dataset or member is
transferred.

One solution to this is to use an interesting technique whereby
the output from the TRANSMIT command, instead of being
sent to JES2, is captured into a dataset.  A batch job is then
constructed to send this data to the remote MVS system,
together with a step to issue the RECEIVE command to act
upon this in-stream data automatically.

This relies on the ability of TRANSMIT to direct its output to a
file and of RECEIVE to accept its input from a file.  The result
is that automatic receive processing takes place, eliminating the
need for the issuer to even access the remote system at all.

Verification of transfer can be provided by checking the batch
job's SYSOUT on SDSF or by the IDTF acknowledgement
itself.  The REXX, XFER, prompts for the destination node
name, the origin dataset, and the target dataset.  After checking
that the dataset exists, the TRANSMIT command is issued to
write out a temporary MVS dataset.

A batch job is then built up for submission to JES2.  It consists
of one step, IKJEFT01, the TSO batch TMP.  This invokes the
second REXX, XFER2, with a parameter of the target dataset
name.  This REXX stacks the RECEIVE parameters and issues
that command requesting that the input IDTF dataset is
obtained from the DDNAME RECIN and not JES2.

The DDNAME, RECIN, precedes the in-stream data generated
by the previous TRANSMIT command.  This data is
terminated by a delimiter: the actual data is checked to ensure
that it does not contain that delimiter before the job is
submitted.  The RECEIVE processing will then proceed as
usual resulting in creation or update of a dataset.

One point to consider is that, when RECEIVE allocates the
target dataset, it defaults to using a disposition of OLD for
existing datasets and NEW for new ones.  It would be possible
to override the OLD disposition to SHR if this would be more
convenient.  This can be done by specifying the parameter
'SHR' on the stacked RECEIVE options for existing files.

However, before using a SHR disposition, some method of
serializing access to the dataset should be sought, such as
invoking a program via ADDRESS LINK which would issue a
SPFEDIT enqueue for the dataset before the RECEIVE and
release it with a dequeue again afterwards.  This will prevent
any simultaneous attempts to update the dataset.

Sites without RACF 1.9 (or equivalent) will need to specify a
password for the remote job, but this can be eliminated when
NJE inheritance is available.  The XFER EXEC stores the
password in the ISPF shared pool (in a masked form) so that it
needs to be entered less frequently.

Many enhancements could be made to this interface to meet
various installation requirements.  For example transmission
from a batch job would be quite simple providing the password
issue is resolved.  I have kept the code to the minimum so that
the basic technique of imbedded TRANSMIT/RECEIVE
processing can be appreciated.


ISPF Panel XFERP

)ATTR
   # TYPE(INPUT) INTENS(NON) CAPS(ON) JUST(LEFT)
)BODY
%----------------------------%AUTO TSO FILE TRANSFER%-------------------------+
%COMMAND ===>_ZCMD
+
+TSO AUTOMATIC RECEIVE FILE TRANSFER+
+
%To+  node    %===>_NODE    +  (MVSA, MVSB)
+
+Specify%DATASET(MEMBER)+fully qualified, omit member for entire or sequential
+
%From+dataset %===>_FDSN                                        +
+
%To+  dataset %===>_TDSN                                        +
+
+(To dataset name defaults to the from dataset name, if omitted)
+
+Enter your current RACF password and account code below for job (&ZUSER.XTF)
+
%RACF+password%===>#PASS    +  &PMSG
+
+Account code %===>_ACCT    +  (enter valid job account code)
+
+Enter details and press%ENTER+to transfer or press%END+to exit
)INIT
  .CURSOR = FDSN
  IF (&PASS Â¬= &Z)
     &PMSG = '(Password already entered)'
  ELSE
     &PMSG = '(Password will not be displayed)'
)PROC
  VER (&NODE,NB,LIST,MVSA,MVSB)
  VER (&FDSN,NB,DSNAME)
  VER (&TDSN,DSNAME)
  VER (&PASS,NB)
  VER (&ACCT,NB)
)END


REXX XFER

/* REXX - XFER AUTOMATIC TSO FILE TRANSFER PROCESS    */
/* THIS EXEC WILL GENERATE A BATCH JOB TO TRANSFER    */
/* THE PROMPTED DATASET TO ANOTHER NODE USING A       */
/* TSO XMIT/RECEIVE SEQUENCE WITH INSTREAM DATA.      */
/******************************************************/
ADDRESS TSO
MSGC = 'T'       /* MSGCLASS  */
JOBC = 'A'       /* JOB CLASS */
USER = USERID()
ADDRESS ISPEXEC "VGET (NODE FDSN TDSN ACCT PASS) ASIS"
IF PASS \= '' THEN
   PASS = BITXOR(PASS,'12345678')    /* RESTORE CLEAR TEXT AGAIN */
/* PROMPT FOR USERS DATASET AND OTHER INFO */
ADDRESS ISPEXEC "DISPLAY PANEL(XFERP)"
DO WHILE (RC = 0)
   CALL PROCESS
   ADDRESS ISPEXEC "DISPLAY PANEL(XFERP)"
END
IF PASS \= '' THEN
   PASS = BITXOR(PASS,'12345678')    /* MASK CLEAR TEXT PASSWORD */
ADDRESS ISPEXEC "VPUT (NODE FDSN TDSN) PROFILE"
ADDRESS ISPEXEC "VPUT (PASS ACCT) SHARED"
EXIT 0
/* PROCESS REQUEST BY PREPARING THE DATASET FOR TRANMISSION */
PROCESS:
IF TDSN = ' ' THEN       /* DEFAULT TO DSN AS FROM DSN IF OMITTED */
   TDSN = FDSN
FDSN = STRIP(FDSN,'B',"'")                /* REMOVE ANY QUOTES */
TDSN = STRIP(TDSN,'B',"'")
IF FDSN \= ' ' THEN
   DO
      STATUS = SYSDSN("'"FDSN"'")         /* CHECK PDS AND MEMBER */
      IF STATUS \= 'OK' THEN
         DO
            ADDRESS ISPEXEC "SETMSG MSG(XFERM001)"
            RETURN 4
         END
   END
CALL XMIT_DATASET                       /* BUILD UP XMIT DATA FILE */
PARSE VAR TDSN XDSN '(' XMEM ')'
/* START BUILDING THE JCL FOR THIS REMOTE PROCESSING JOB EXECUTION */
CUR  = 0
CALL OUT "//"USER"XTF JOB ("ACCT"),'"USER"',CLASS="JOBC","
CALL OUT "//      MSGLEVEL=(0,0),MSGCLASS="MSGC",NOTIFY="USER","
CALL OUT "//      USER="USER",PASSWORD="PASS
CALL OUT "/*XEQ "NODE
CALL OUT "//**"
CALL XMIT_JCL
/* END OF BUILD OF JCL, THIS JCL IS NOW SUBMITTED FOR EXECUTION */
CALL OUT "//"
JES.0 = CUR
"ALLOC F(JES2) SYSO(B) WRIT(INTRDR) LR(80) BLK(3120) RECFM(F B) REUSE"
IF RC \= 0 THEN
   DO
      SAY 'ALLOC JES2 PUNCH DATA FILE FAILED' RC
      EXIT 4
   END
"EXECIO * DISKW JES2 (STEM JES. FINIS"  /*  WRITE JCL TO INTRDR */
IF RC \= 0 THEN
   DO
      SAY 'EXECIO WRITE TO INTRDR FAILED' RC
      EXIT 4
   END
"FREE F(JES2)"
ADDRESS ISPEXEC "SETMSG MSG(XFERM002)"
RETURN 0
/* SUBROUTINE : ADD A LINE TO OUTPUT ARRAY */
OUT:
ARG LINE
CUR = CUR + 1
JES.CUR = LINE
RETURN 0
/* SUBROUTINE : GENERATE XMIT DATASET */
XMIT_DATASET:
"ALLOC F(TEMP) SP(1 5) CYL NEW LR(80) BLK(9040) RECFM(F B) REUSE"
IF RC \= 0 THEN
   DO
      SAY 'ALLOC OF TEMP DATA FILE FAILED' RC
      EXIT 4
   END
X = OUTTRAP('XMS.')
"XMIT "NODE"."USER" DA('"FDSN"') OUTDD(TEMP) NOLOG NONOTIFY"
IF RC \= 0 THEN
   DO
      SAY 'XMIT TO CREATE DATA FILE FAILED' RC
      DO I = 1 TO XMS.0
         SAY XMS.I
      END
      EXIT 4
   END
X = OUTTRAP('OFF')
"EXECIO * DISKR TEMP (STEM DAT. FINIS"
IF RC \= 0 THEN
   DO
      SAY 'EXECIO READ XMIT DATA FAILED' RC
      EXIT 4
   END
"FREE F(TEMP)"
/* CHECK THAT THE DELIMITER DOES NOT OCCUR IN THE XMIT DATA        */
DLA.0 = 4
DLA.1 = '$#'
DLA.2 = '$@'
DLA.3 = '@$'
DLA.4 = '@#'
DOK = 0
DO I = 1 TO DLA.0 WHILE (DOK = 0)
   DLM = DLA.I
   DOK = 1
   DO J = 1 TO DAT.0 WHILE (DOK = 1)
      IF SUBSTR(DAT.J,1,2) = DLM THEN
         DOK = 0
   END
END
IF DOK = 0 THEN
   DO
      SAY 'XMIT DATA CONTAINED ALL THE DELIMITERS, JOB NOT SENT'
      EXIT 4
   END
RETURN 0
/* SUBROUTINE : GENERATE XMIT JCL */
XMIT_JCL:
CALL OUT "//** AUTO RECEIVE" XDSN XMEM
CALL OUT "//**"
CALL OUT "//RECEIVE  EXEC PGM=IKJEFT01,DYNAMNBR=30"
CALL OUT "//SYSPROC  DD DSN=SYS1.CMDPROC,DISP=SHR"
CALL OUT "//SYSTSPRT DD SYSOUT=*"
CALL OUT "//SYSTSIN  DD *"
CALL OUT "%XFER2" XDSN XMEM
CALL OUT "//RECIN    DD DATA,DLM="DLM
DO I = 1 TO DAT.0                       /* IMBED THE XMIT DATA */
   CUR = CUR + 1
   JES.CUR = DAT.I
END
CALL OUT DLM                            /* TERMINATE THE DATA  */
RETURN 0
REXX XFER2
/* REXX - XFER2 TSO AUTO FILE TRANSFER RECEIVE        */
/* INVOKED BY JOB SUBMITTED BY REXX XFER              */
/******************************************************/
ARG DSN MEM
DSN = STRIP(DSN)
MEM = STRIP(MEM)
/* COULD TEST DSN VIA SYSDSN AND SUPPLY SHR PARAMETER HERE */
"DELSTACK"
X = PROMPT('ON')
IF MEM = '' THEN
   QUEUE "DA('"DSN"')"
ELSE
   QUEUE "DA('"DSN"("MEM")')"
QUEUE "END"
QUEUE ""
ADDRESS TSO "RECEIVE INDDNAME(RECIN) LOGDS('NULLFILE') NONAMES"
XRC = RC
IF RC > 4 THEN
   DO
      SAY 'RECEIVE FAILED' RC
   END
"DELSTACK"
EXIT XRC


ISPF Message member XFERM00

XFERM001 '&STATUS'              .ALARM=YES
'DATASET &FDSN INVALID DUE TO &STATUS'
XFERM002 'TRANSFER JOB SENT'    .ALARM=YES
'DATASET &FDSN TRANSFER IN PROGRESS'


                                                                  c Xephon 1991

