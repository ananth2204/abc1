Dynamically altering started task message class

I have always found it a problem that the default message class
for started tasks could never be overridden. I have encountered
many occasions where it would have been desirable to have
certain started tasks run in other than the default message class.
In particular, I have found this necessary when dealing with
SYSOUT archival systems which were designed to process
output by SYSOUT class.

It has always been easy to direct batch job output to a
SYSOUT class which would get archived, using the
MSGCLASS keyword. It has, however, always been unwieldly
to have started task job log, JCL, and system messages listings
(JESMSGLG, JESJCL, and JESYSMSG, respectively) handled
on an exception basis. It is not desirable to specify a message
class for started tasks which would be handled by a SYSOUT
archiver since all started task system outputs would then be
archived. I wanted to have a way to direct specific started task
system output to be archived on a dynamic basis, but found no
facility to do so.

I had tried to use the JES2 converter/interpreter text scan exit
(exit 6), but found that the fields which I needed to modify
would not be propagated to subsequent control blocks by the
time exit 6 was invoked. I then settled on using the JCL and
JES2 control statement scan exit (exit 4). This exit is given
control whenever JES2 encounters a JCL or JES2 control
statement. I used the idea of adding a special format step name
to the MVS START command to indicate that special
MSGCLASS processing is required. The method I came up
with reduces the usable step name length to 6 or 7 characters
depending on the options used.

The premise of the exit is to use a special character in the step
name field of the MVS START command that initiates the
started task. If one of the national characters '$', '#', or '@' is
found in the step name, it is used as an indicator that exit 4
should modify the message class field in the JES2 JCT to an
exit-supplied default. Further, if any other alphanumeric
character follows the special character, it is taken to be the new
message class value to be used for this started task output
rather than the message class default override provided by exit 4.

It is a restriction of the start command that the step name field
begins with an alphabetic character; therefore it may not start
with one of the national characters which exit 4 scans for. The
national character can occur anywhere after position 1. The
character after the national character is assumed to be the new
message class and any other characters following are not
treated as anything special by the exit. Assuming the JES2
STCCLASS initialization statement specifies a default message
class of Y for started task, then the following table shows what
message class will be set by the exit:

START Command      Resulting MSGCLASS
S STCTEST       Y (use JES2 default).
S STCTEST.TEST#      K (use ARCCLASS in exit 4).
S STCTEST.TEST$A      A (overridden to A by start command).
S STCTEST.TEST##      Y (invalid combination - use JES2 default).
S DEALLOC      Z (overridden to Z by exit suppression table).
S DEALLOC.P@YTEST       Y (overridden to Y by start command).

The exit works by checking to see if a JCL statement rather
than a JES2 control statement is being processed by examining
the value in register 0, which will be 0 for a control statement
and 4 for a JCL statement. It then checks if a JCT for the job is
available since the message class to be changed is stored in the JCT.

This is done by checking the third word in the parameter list
pointed to by register 1 for a non-zero value. It then checks two
different areas to ensure that the JCL currently being scanned is
for a started task. It should be noted that exit 4 does not get
invoked for JOB statements, so no checking of that type is
necessary. It does check that the statement begins with a '//'
and contains the EXEC keyword.

IBM's START command processor IEEVSTAR builds the
EXEC statement with the step name in positions 3 to 10 and
the EXEC keyword starting in position 12. If the JCL statement
is valid, the step name field is checked for the special
characters. If no special characters are found, a suppression
table is checked against the started task job name and, if a
match is found, the message class is changed to one that will
suppress output. Output may be suppressed by using an output
class which is defined in the JES2 initialization deck as a
dummy output class as follows:

      OUTCLASS(Z) OUTPUT=DUMMY

The started tasks whose output we chose to suppress are INIT,
MOUNT, DEALLOC, and an alias we use for DEALLOC
called X. If the started task name is not in the suppression
table, we further check a standard override table and
automatically override the message class for jobs LOGREC1
and LOGREC2. The exit is coded as follows: if either of the
LOGREC started tasks are started with the step name override
(eg S LOGREC1.ZZZ@Q), then the message class value
specified on the start command step name will take precedence
over any table values in the exit. The same is true for started
tasks whose names appear in the suppression table: the start
command step name value will override output suppression.

This JES2 exit requires changes in the JES2 intialization deck
to be enabled. The following lines should be added to the deck:

      LOADMOD(HASX04) STORAGE=PVT
      EXIT(4) ROUTINE=EXIT04,STATUS=ENABLED

The status field may be given a value of DISABLED to have
JES2 set up the exit but not invoke it. The exit may then later
be enabled or disabled at will by issuing the JES commands:

      $TEXIT(4),ENABLE
      $TEXIT(4),DISABLE

The fact that JES2 provides this ability also makes it extremely
easy to disable the exit temporarily if you should need to look
at started task output for INIT or MOUNT jobs. The start
commands for these types of work are internally generated by
the system and thus you are unable to issue start commands
with step name message class overrides. I have found it very
rare to ever need this type of output for problem determination.

         COPY  $HASPGBL
HASX04  $MODULE NOTICE=NONE,ENVIRON=JES2,                              C
               TITLE='JES2 EXIT 4',                                    C
               WPL,                MVS WPL DSECT BB                    C
               RPL,                MVS RPL DSECT                       C
               $BUFFER,            JES2 BUFFER DSECT                   C
               $CADDR,             JES2 CADDR DSECT                    C
               $DTE,               JES2 DTE DSECT                      C
               $ERA,               JES2 ERA DSECT                      C
               $HASPEQU,           JES2 HASPEQU DSECT                  C
               $HCT,               JES2 HCT DSECT                      C
               $JCT,               JES2 JCT DSECT                      C
               $MIT,               JES2 MIT DSECT                      C
               $PADDR,             JES2 PADDR DSECT                    C
               $PARMLST,           JES2 PARMLST DSECT                  C
               $PCE,               JES2 PCE DSECT                      C
               $PSV,               JES2 PSV DSECT                      C
               $RDRWORK,           JES2 RDRWORK DSECT                  C
               $TQE,               JES2 TQE DSECT                      C
               $USERCBS,           JES2 USERCBS DSECT                  C
               $XECB,              JES2 XECB DSECT                     C
               $XIT                JES2 XIT DSECT
         USING JCT,R10             A(JCT) UPON ENTRY
EXIT04   $ENTRY BASE=R12
         $SAVE NAME=EXIT04         SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         LR    R9,R1               SAVE A(PARMLIST)
         ICM   R15,15,8(R9)        LOAD A(JCTWORKX), IF ANY
         BZ    RETURN              NO, THEN GO RETURN TO CALLER
         LTR   R0,R0               ARE WE PROCESSING A JCL STMT
         BZ    RETURN              NO, THEN GO RETURN TO CALLER
         CLI   JCTJOBID,C'S'       IS THIS A STARTED TASK
         BNE   RETURN              NO, THEN GO RETURN TO CALLER
         TM    JCTJOBFL,JCTSTCJB   IS THIS A STARTED TASK
         BZ    RETURN              NO, THEN GO RETURN TO CALLER
         L     R11,0(,R9)          LOAD A(JCL CONTROL STMT BUFFER)
         CLC   SLASHES,0(R11)      DOES IT START WITH '//'
         BNE   RETURN              NO, THEN GO RETURN TO CALLER
         CLC   EXECKEY,10(R11)     DOES IT HAVE ' EXEC ' IN COL 11
         BNE   RETURN              NO, THEN GO RETURN TO CALLER
         TRT   2(8,R11),TRTAB      FIND ANY SPECIAL CHARS IN STEP NAME
         BZ    CHKSUPP             NO, GO CHECK JOB SUPPRESSION
         LA    R7,2(R11)           LOAD A(STEP NAME)
         SR    R1,R7               GET OFFSET TO SPECIAL CHARACTER
         LA    R1,1(,R1)           ADD 1 FOR ZERO BASE
         LA    R6,8                LOAD MAX LENGTH(STEPNAME)
         SR    R6,R1               SUB OFFSET FROM LENGTH(STEP NAME)
         BZ    DFLTHELD            ZERO, GO SET DEFAULT MESSAGE CLASS
         AR    R1,R7               ELSE, POINT BACK TO SPECIAL CHAR
         CLI   0(R1),C'A'          CHECK FOR VALID MESSAGE CLASS CHAR
         BL    RETURN              INVALID, DON'T CHANGE ANYTHING
         MVC   JCTMCLAS,0(R1)      MOVE BYTE AS MESSAGE CLASS
         B     RETURN              GO RETURN TO CALLER
CHKSUPP  LA    R8,SUPPTABL         LOAD A(JOBNAME SUPPRESSION TABLE)
SUPLOOP  CLC   SUPPLAST,0(R8)      ARE WE AT END OF TABLE
         BE    CHKCHNG             YES, THEN GO CHECK FOR STCS TO CHG
         CLC   JCTJNAME,0(R8)      IS THERE A MATCH
         BE    SETDUMMY            YES, GO SET DUMMY SYSOUT CLASS
         LA    R8,8(,R8)           ELSE BUMP TO NEXT ENTRY
         B     SUPLOOP             GO BACK TO CHECK IT
SETDUMMY MVC   JCTMCLAS,DUMYCLAS   SET TYPE=DUMMY SYSOUT CLASS
         B     CHKCHNG             GO CHECK FOR COMMAND OVERRIDE
DFLTHELD MVC   JCTMCLAS,ARCCLASS   SET NEW DEFAULT MESSAGE CLASS
         B     RETURN              GO RETURN TO CALLER
CHKCHNG  LA    R8,CHNGTABL         LOAD A(TABLE)
CHNGLOOP CLC   CHNGLAST,0(R8)      ARE WE AT END OF TABLE
         BE    RETURN              YES, RETURN
         CLC   JCTJNAME,0(R8)      ELSE, DO WE HAVE A MATCH
         BE    STCMATCH            YES, GO CHANGE MESSAGE CLASS
         LA    R8,9(,R8)           ELSE, POINT TO NEXT ENTRY
         B     CHNGLOOP            LOOP BACK
STCMATCH MVC   JCTMCLAS,8(R8)      MOVE MESSAGE CLASS TO JCT
RETURN   $RETURN RC=0              RETURN TO CALLER
ARCCLASS DC    C'K'                DEFAULT MESSAGE CLASS TO ARCHIVE
DUMYCLAS DC    C'Z'                OUTPUT=DUMMY SYSOUT CLASS
EXECKEY  DC    C' EXEC '           EXEC EBCDIC KEYWORD
SLASHES  DC    C'//'               SLASHES
TRTAB    DC    256X'00'            TRANSLATE TAB ----------------|
         ORG   TRTAB+C'$'                                        |
         DC    C'$'                                              |
         ORG   TRTAB+C'#'                                        |
         DC    C'#'                                              |
         ORG   TRTAB+C'@'                                        |
         DC    C'@'                                              |
         ORG   ,                   ------------------------------|
*        JOBNAME SUPPRESSION TABLE-CHANGE OUTPUT CLASS TO Z(TYPE=DUMMY)
SUPPTABL DS    0H                      JOBNAME EXCLUSION TABLE---|
         DC    CL8'INIT'               INITIATOR STC             |
         DC    CL8'MOUNT'              MOUNT STC                 |
         DC    CL8'DEALLOC'            DEALLOC STC               |
         DC    CL8'X'                  ALIAS FOR DEALLOC         |
         DC    8X'FF'                  EMPTY ENTRY               |
SUPPLAST DC    8X'FF'                  END OF TABLE INDICATOR----|
*        JOBNAME CHANGE TABLE-CHANGE OUTPUT CLASS TO VALUE SHOWN
CHNGTABL DS    0H
         DC    CL8'LOGREC1 ',C'V'
         DC    CL8'LOGREC2 ',C'V'
         DC    9X'FF'                  EMPTY ENTRY
CHNGLAST DC    9X'FF'                  END OF TABLE
         LTORG
         $MODEND
         END


                                                                  c Xephon 1993

