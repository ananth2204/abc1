Fun with stacks

One of the facilities which came along with MVS/ESA was the
register stack. This is an area of storage which can be used to save
a program's state, registers, PSW, and other information. It
operates on a last-in first-out basis. It is used by two main
instructions: BAKR and PR.

BAKR is used like BASR or BALR to branch. It also adds an
entry to the register stack. The PR instruction retrieves the last
stack entry, removing it from the stack. Since this includes a PSW
it causes a branch back to the next instruction after the BAKR.

Nothing remarkable there, although it is marginally simpler than
saving a register for return purposes. The fun comes when you
start exploiting the stack a bit more.

One suggestion offered in the application development guides is
the use of the stack at program entry in place of the normal
register save area. For example:

      BAKR 14,0

adds a stack entry but does not branch. Register 14 is saved as the
return address rather than the next instruction.

      PR

restores registers and the PSW from the 'top' stack entry.

This is simpler to code than the usual STM and other odds and
ends. It is also especially convenient for reentrant programs as no
GETMAIN or STORAGE macros need to be executed to get
storage for the register save area. This is fully documented in the
manuals and is well worth checking out. Use of the stack rather
than a save area does prevent you updating the saved state of
registers, but you shouldn't be doing that anyway.

It should be noted that it may still be necessary to provide a
register save area if you are calling other programs which do not
make use of the stack.

Using the BAKR/PR combination for subroutines can also be
very useful. The simplicity has already been mentioned. Another
advantage is that the PR instruction restores the registers to their
original state (apart from register 0 and register 1). This means that
you can use all of the registers freely, which is especially useful if
you are using double-register instructions such as MVCL: it's all
too easy to run out of registers and end up having to keep
swapping them around, leading to wasted processing and
confusion. Any parameters or changes can be passed back to the
main routine via register 0 and register 1 or in storage.

I have found the stack particularly useful for recursive subroutines:
it is possible to go down through many layers to do complex
processing. The program stack is finite, being a dedicated area of
storage, but it is large enough for most purposes. If by some
chance you need more entries then it is possible to increase its
size quite simply.

Another area in which I have found stacks useful on a number of
occasions is debugging. The stack entries appear, formatted, in
normal SYSUDUMP output. This can be very useful to get an
idea of what was happening before an abend, especially PSW
information such as storage key and addressing mode. This
information may be available in the trace table but all too often it
doesn't go back far enough.

Other instructions are available for processing the stack. The only
one I have made any use of is EREG (Extract Stacked Registers),
which selectively restores registers. For example:

      EREG 4,8

restores registers 4 through 8.

This can be useful in error processing routines. You might issue
some diagnostic messages and then restore all of the registers
before abending, for example.

I haven't gone into any great detail as it's all in the manuals. I
suggest you check it out if you have any interest in Assembler
programming. Assembler is fast disappearing as an application
language but still has a place in exits and utilities. The stack
increases its flexibility and is a valuable tool for the aficionado.

Reference

o      ESA/370 Principles of Operation.

o      MVS/ESA Application Development Guide - Assembler
Language Programs.

o      MVS/ESA Application Development Guide - Extended
Addressability.

Simon Green
Systems Programmer (UK)                                                  c Xepho

