Unlimited user data in RACF profiles

RACF provides an easy-to-use field called 'installation data' on
all profiles.  This is up to 255 bytes long and typically is used
as a place to document what the profile is used for.  However,
if this has already been used, where can you store more data?
The answer is in the 'user data' field, also provided on all
profiles, but this has no RACF command support so it cannot
be entered or retrieved except by the use of the ICHEINTY
macro in a program.  It is not brought into storage by RACF
unless ICHEINTY is used.  (Refer to
SYS1.MACLIB(ICHTEMP0) for layouts of the RACF
profiles.)

So far so good, but this field is what is known as a 'repeat
group'.  This has two implications: first, it provides almost
unlimited storage and second, it makes it more difficult to code
the macros.  Also it is not practical to use the RACXTRT
macro to process these.

This article will outline how to retrieve, update, or delete a
member of a repeat group using ICHEINTY macros.  This
particular repeat group is called USERDATA: each occurrence
is called a member and consists of USRNM, USRDATA, and
USRFLAG.

USRNM is intended as the member name field and is a fixed
length 8-byte field, USRDATA is the data for this member and
is up to 255 bytes, and USRFLAG is a one-byte flag field.
Multiple occurrences of this group can exist with different
member names for each one.

Collectively, this user data can be accessed as field
USERDATA and the number of repeat group members is in the
field USRCNT.  However, it is more useful to access the
members separately and this requires more involved code.
Members cannot be updated directly in place.  ICHEINTY
macros can be combined with one or more ICHEACTN and
ICHETEST macros to allow the selection of fields matching
certain criteria.  This is necessary to select the required
member to retrieve, add, or delete.  Updating is achieved by
performing a delete then an add.  The ICHEINTY and related
macros are well documented except that no examples are given
concerning repeat groups and the technique necessary is not at
all obvious since nowhere does IBM state that you cannot
directly update a member but must delete then add it.

retrievING a group member

To retrieve a group member, use the following macros:

         ICHEINTY LOCATE,TYPE='USR',ENTRY=ENAME,WKAREA=WST,            X
               ACTIONS=(ACTN1)
*
ACTN1    ICHEACTN FIELD=USERDATA,TESTS=TEST1
TEST1    ICHETEST FIELD=USRNM,FLDATA=(8,MEM),COND=EQ

where MEM contains the name of the member to locate, in this
case within a user profile for the user-id in the ENAME field.
This scans through USERDATA until a match is found on the
USRNM field for MEM.  The format of the returned data at
offset +30 in WST is:

      USRNM (8),
      USRDATA LENGTH (1), USRDATA (1-255), USRFLAG (1).

deletING a group member

To delete a group member, use the following macros:

         ICHEINTY ALTER,TYPE='USR',ENTRY=ENAME,                        X
               ACTIONS=(ACTN2)
*
ACTN2    ICHEACTN FIELD=USRNM,FLDATA='DEL',TESTS=TEST2
TEST2    ICHETEST FIELD=USRNM,FLDATA=(8,MEM),COND=EQ

updatING a group member

To update a group member, use the following macros:

         ICHEINTY ALTER,TYPE='USR',ENTRY=ENAME,                        X
               ACTIONS=(ACTN2,ACTN3)
*
ACTN2    ICHEACTN FIELD=USRNM,FLDATA='DEL',TESTS=TEST2
TEST2    ICHETEST FIELD=USRNM,FLDATA=(8,MEM),COND=EQ
ACTN3    ICHEACTN FIELD=USERDATA,FLDATA=(40,MEM),TESTS=TEST3
TEST3    ICHETEST FIELD=USRNM,FLDATA=(8,KEY),COND=NE

* USER DATA REPEAT GROUP MEMBER LENGTH 40, DATA HERE IS 30 BYTES
MEM      DC    CL8'ABCDEFGH'    KEY NAME OF THIS REPEAT GROUP MEMBER
DATAL    DC    AL1(30)          LENGTH OF VARIABLE DATA
DATA     DC    CL30'xyz'        VARIABLE LENGTH DATA (LEN 30)
FLAG     DC    X'00'            FLAG

It does not matter if the delete before the add fails because
there was not a previous member of this name present.  The
entire USERDATA can be deleted by deleting a member with
GROUP=YES specified.  A useful manual to read if you can
get it is GG22-9293-00 RACF Internal Macros.

IN CONCLUSION

What are the uses for extra RACF information?  This is limited
only by your imagination but RACF is the best place to store
user-related data as it centralizes it.  IBM provides some useful
fields such as name but not others such as telephone number or
address.  Note that any profile type such as dataset profiles can
have user data in them.

Probably more useful would be information required to be
accessed by other programs (for example in a printer separator
exit) since it would not require the exit to open datasets to
retrieve the data.  However, any program using ICHEINTY
macros must run APF-authorized.

Finally, consider who should be able to access or update this
data.  ICHEINTY, if running authorized, can do anything, but
it is possible to code FIELD options to implement field-level
control.  Alternatively, it is simple to code a RACHECK on
class FACILITY with the resource name of the USRNM field,
then define READ/UPDATE access rules for it.

                                                                 â‚¬ Xephon 1990

