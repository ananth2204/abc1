Pop-up MVS system information


INTRODUCTION

Sometimes, for example during problem investigation, you
need to know specific information about the current MVS
system. Relatively simple details are not readily available. To
identify the IPL volume used would require you to enter
several MVS system commands. Other information such as the
nucleus identifier or I/O configuration requires searching
through the SYSLOG for the time of the IPL. The current SMF
or GRS identifiers or the master catalog in use cannot be found
from SYSLOG and again require commands to be entered.

The following REXX EXEC gets all that information for you -
and more. In a pop-up window under ISPF or line display from
TSO it provides the following information:

o      SMF identifier
o      GRS name
o      MVS version and FMid
o      CPU model and serial numbers of all processors
o      IPL date and time
o      IPL VOLSER and address
o      Nucleus identifier
o      I/O configuration
o      Master catalog name and VOLSER
o      Current Julian date and time.

The information, except the master catalog name, is located in
storage from the Communications Vector Table (CVT), CVT
extension and prefix, SMF Control Area (SMCA), and
Physical Configuration Communication Area (PCCA). The
master catalog data is located from IDCAMS. Figure 1 shows
an example of the pop-up window.


EXECUTION

The EXEC can be run from ISPF or TSO. If ISPF is active
then the information is displayed in a pop-up window otherwise
the data is displayed using a series of SAY commands to write
to the screen. There is one optional parameter on the EXEC.
This is to indicate if a long display is required. The long
display will retrieve the name and volume serial number of the
master catalog. Under ISPF this slows execution of the
command noticeably and is therefore an option. The default
display omits the catalog details. The command syntax is:

      IPLINFO LONG

for a full display as shown in Figure 1 and

      IPLINFO

which omits the master catalog information.

The REXX EXEC should be in SYSPROC (or SYSEXEC) and
the window should be added to the ISPPLIB concatenation. A
LIBDEF statement could be used instead - see below.


ABOUT THE CODE

The information is retrieved using the REXX STORAGE
function. This is a useful, though understated, command and
the description in the REXX Reference manual belies its
usefulness. The syntax of the STORAGE function is:

      STORAGE(address,length)

where address is the hexadecimal representation of the storage
address from which data is retrieved and length is the decimal
number of bytes to be retrieved. A third argument can be
specified which is used to replace the data beginning at
address, but this feature is not used in the following EXEC.

The main problem with the STORAGE function is that the
value returned is treated as a character variable. This, of
course, is quite wrong when you have an address and want to
chain though control blocks. It also causes two other problems:
the result cannot be used in arithmetic, eg to add to an offset,
and it cannot be used as the address in a subsequent STORAGE
function. These two problems are overcome by using the C2D
character-to-decimal function, and the D2X decimal-to-
hexadecimal function. Consider the following:

x = storage(10,4) x contains the address of the CVT in character
x = C2D(x)        x contains the CVT address in decimal
x = x + 340       add offset 340 (decimal)
x = D2X(x)        convert back to character (hexadecimal representation)
y = storage(x,4)  then use the new address in the next storage function

The first four lines above can be compressed into the single
statement:

x = D2X(C2D(storage(10,4))+340)

This is useful as the value x is in the correct format to be used
in a subsequent execution of the storage function, making it
easy to chain through control blocks. This is the technique used
throughout the EXEC. Note that the offset (+340) is a decimal
value.

The code caters for up to 16 CPU serial numbers taken from
the PCCA. This is more than MVS can handle at present but
the control blocks are there in preparation. The window is
designed only to show a maximum of eight, although the TSO
display will show up to sixteen.

The catalog information, if requested, is located using the TSO
LISTCAT command and trapped using the REXX TSO/E
external function, OUTTRAP. The OUTTRAP function can be
used only in REXX EXECs that execute in a TSO/E address
space. STORAGE is also a TSO/E external function, but it can
be used in any MVS address space.
Each item is stored in a unique variable that can be used by
subsequent EXECs, CLISTs, or panels if they are written to the
shared pool. Use the command 'ISPEXEC VPUT (variable-
names) SHARED' for the variables you want to save.

To make the TSO line display more readable you can add a
'clear screen' command, if you have one, as the first line in the
DISPLAY section. Include a LIBDEF command as the first
line in the POPUP section if the window is not in the default
ISPPLIB concatenation.

Other information can easily be added - it's just a case of
locating the information in storage, using the technique
described above, and then adding it to the displays.

Full documentation about REXX commands and functions can
be found in TSO/E Version 2 REXX Reference SC28-1883.


REXX CODE FOR IPLINFO

/* +---------------------------- REXX -----------------------------+ */
/* + REXX exec to locate and display MVS and related IPL details.  + */
/* +---------------------------------------------------------------+ */
parse upper arg parm1
TODAY:
  jdate = date('J')
  jdate = insert('.',jdate,2)
  now = time()
  today = jdate '' now
SMFID:
  smca = d2x(c2d(storage(10,4))+197)         /* get SMCA from CVT    */
  smfid = d2x(c2d(storage(smca,3))+16)
  smfid = storage(smfid,4)
GRSNAME:
  grs = D2X(C2D(storage(10,4))+340)          /* GRS name             */
  grs = storage(grs,8)
MVSVER:
  mvs = D2X(C2D(storage(10,4))-40)           /* CVT prefix           */
  mvs = storage(mvs,16)                      /* MVS version / FMID   */
  ver = substr(mvs,1,7)
  fmid= substr(mvs,9,7)
CPUINFO:
  i = 0                                      /* initialize counter   */
  o = 4                                      /* initialize offset    */
  pntr = d2x(c2d(storage(10,4))+764)         /* get PCCAVT from CVT  */
  pavt = d2x(c2d(storage(pntr,4)))           /* find first PCCA      */
  pcca = d2x(c2d(storage(pavt,4)))
  call serial
  model = substr(cpuid.i,9,4)                /* get CPU model number */
  do i=1 to 15
    ser.i = ' '                              /* initialize variable  */
    pavt = d2x(c2d(storage(pntr,4))+o)       /* get next PCCA        */
    pcca = d2x(c2d(storage(pavt,4)))
    if pcca Â¬= 0 then call serial            /* if not equal to ...  */
    o = o + 4
    end
IPLDATE:
  iplyear = d2x(c2d(storage(smca,3))+341)    /* use SMCA addr again  */
  year = d2x(c2d(storage(iplyear,1)))
  iplday = d2x(c2d(storage(smca,3))+342)
  day = d2x(c2d(storage(iplday,2)))
  day = strip(day,t,F)                       /* remove sign          */
  date = year'.'day                          /* DATE variable        */
IPLTIME:
  ipltime = d2x(c2d(storage(smca,3))+336)
  dec = c2d(storage(ipltime,4))              /* stored in binary     */
  ss = dec//6000
  ss = ss%100
  if ss < 10 then ss = insert('0',ss)        /* leading zero needed? */
  mins = dec%6000
  mm = mins//60
  if mm < 10 then mm = insert('0',mm)
  hh = mins%60
  if hh < 10 then hh = insert('0',hh)
  time = hh':'mm':'ss                        /* TIME variable        */
IPLVOL:
  ucb = D2X(C2D(storage(10,4))+48)           /* UCB of sysres        */
  a = D2X(C2D(storage(ucb,4))+13)            /* IPL address          */
  a = storage(a,3)
  IPLADDR = a
  v = D2X(C2D(storage(ucb,4))+28)            /* IPL volser           */
  v = storage(v,6)
  IPLVOL  = v
LOADPARM:
  ext2 = D2X(C2D(storage(10,4))+328)         /* CVTEXT2 from CVT     */
  nuc = D2X(C2D(storage(ext2,4))+4)          /* cvtnucls             */
  nuc = x2d(storage(nuc,1))
  io = D2X(C2D(storage(ext2,4))+6)           /* cvtiocid             */
  io = storage(io,2)
  loadparm = nuc io
  loadparm = space(loadparm,0)
MCAT:
if parm1 = 'LONG' then do                   /* only if requested     */
  x = outtrap("mcat.",10)
  "LISTC ENT('SYS1.LINKLIB')"               /* find MCAT name        */
  x = outtrap("OFF")
  mcat = word(mcat.2,3)
  x = outtrap("mvol.",20)
  "LISTC ENT('"mcat"') VOL"                 /* find MCAT volume      */
  x = outtrap("OFF")
  i = mvol.0
  word = word(mvol.i,1)
  if substr(word,1,6) = 'VOLSER' then
     mvol = substr(word,length(word)-5)     /* volser variable       */
  mcath = 'Master Catalog'                  /* header - word         */
  mvolh = 'Volser'
  end
REPORT:
/* +---------------------------------------------------------------+ */
/* + All information collected - format report                     + */
/* +---------------------------------------------------------------+ */
if sysvar(sysispf) = 'ACTIVE' then
  call POPUP
else call DISPLAY
exit
/* +---------------------------------------------------------------+ */
/* + Subroutines                                                   + */
/* +   SERIAL:  loop round PCCAs for CPU serial numbers            + */
/* +   POPUP:   ISPF commands to display pop-up window             + */
/* +   DISPLAY: report used in TSO line mode                       + */
/* +   BOX:     add box characters to TSO line mode display        + */
/* +---------------------------------------------------------------+ */
SERIAL:                                      /* scan for next serial */
  pcpu = d2x(x2d(pcca)+ 4)                   /* jump over eyecatcher */
  cpuid.i = storage(pcpu,12)                 /* get cpuid            */
  ser.i = substr(cpuid.i,3,6)                /* get serial number    */
return
POPUP:                                       /* use POPUP window     */
/*  "ISPEXEC LIBDEF ISPPLIB DATASET ID('panel-library')"   if needed */
  "ISPEXEC ADDPOP"
  "ISPEXEC DISPLAY PANEL(IPLWIN)"
  "ISPEXEC REMPOP"
  return
DISPLAY:                                     /* TSO line mode display*/
/*  "CLEARSCR"                                  if available         */
  line1 = right('+',70,'+')                  /* opening line of box  */
  say line1
  card = ''
  card = insert('MVS and IPL information',card,3)
  card = insert(today,card,50)
    call box                                 /* write it out         */
  blank = ''
  blank = overlay('+',blank,1)               /* put in box character */
  blank = overlay('+',blank,70)              /* put in box character */
  say  blank
    /* */
  card = insert('SMFid',card,3)
  card = insert('GRSname',card,18)
  card = insert('MVS version',card,38)
  card = insert('FMid',card,53)
    call box                                 /* write it out         */
  card = insert(SMFid,card,3)
  card = insert(GRS,card,18)
  card = insert(VER,card,38)
  card = insert(FMid,card,53)
    call box                                 /* write it out         */
  say  blank
    /* */
  card = ''
  card = insert('CPU information:',card,3)
    call box                                 /* write it out         */
  card = insert('Model',card,3)
  card = insert('CPU serial numbers',card,13)
    call box                                 /* write it out         */
  card = insert(Model,card,3)
  cpu = ser.0 '' ser.1 '' ser.2 '' ser.3
  card = insert(cpu,card,13)
    call box                                 /* write it out         */
  cpu = ser.4 '' ser.5 '' ser.6 '' ser.7
  card = insert(cpu,card,13)
    call box                                 /* write it out         */
  cpu = ser.8 '' ser.9 '' ser.10 '' ser.11   /* for future expansion */
  card = insert(cpu,card,13)
    call box                                 /* write it out         */
  cpu = ser.12 '' ser.13 '' ser.14 '' ser.15 /* for future expansion */
  card = insert(cpu,card,13)
    call box                                 /* write it out         */
  say  blank
    /* */
  card = ''
  card = insert('IPL information:',card,3)
    call box                                 /* write it out         */
  card = insert('Date',card,3)
  card = insert('Time',card,13)
  card = insert('Volser',card,23)
  card = insert('Address',card,35)
  card = insert('Nucleus',card,48)
  card = insert('IO Config',card,57)
    call box                                 /* write it out         */
  card = insert(Date,card,3)
  card = insert(Time,card,13)
  card = insert(IPLvol,card,23)
  card = insert(IPLaddr,card,35)
  card = insert(Nuc,card,48)
  card = insert(IO,card,57)
    call box                                 /* write it out         */
  say  blank
    /* */
  if parm1 = 'LONG' then do                  /* only if requested    */
    card = insert('Master Catalog',card,3)
    card = insert('Volser',card,43)
      call box
    card = insert(mcat,card,3)
    card = insert(mvol,card,43)
      call box
    say  blank
    end
  say line1                                  /* closing box          */
return
BOX:                                         /* write out data line  */
  if card = '' then return                   /* don't print blanks   */
  card = overlay('+',card,1)                 /* put in box character */
  card = overlay('+',card,70)                /* put in box character */
  say card                                   /* write it out         */
  card = ''                                  /* start again          */
return


POP-UP WINDOW (Member name IPLWIN)

)ATTR
@ TYPE(TEXT) COLOR(TURQ)
# TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE)
$ TYPE(OUTPUT) COLOR(TURQ) CAPS(OFF)
)BODY WINDOW(60,15)
@  MVS and IPL information            $today
@
@  SMFid        GRSname        MVS version     FMid
+ #SMFid       #GRS           #ver            #fmid
@
@  CPU information:
@  Model        CPU serial numbers
+ #Model       #ser.0    #ser.1    #ser.2    #ser.3
+              #ser.4    #ser.5    #ser.6    #ser.7
@  IPL information:
@  Date       Time        Volser     Addr    Nucleus  IO config
+ #Date      #Time       #IPLvol    #IPLaddr  #Nuc      #IO
@
+ $mcath                   $mvolh
+ #mcat                    #mvol
)INIT
 &ZWINTTL = 'IPLINFO'
)PROC
)END


Moira Hunter
Freelance Systems Programmer (UK)                        c Xephon 1993

