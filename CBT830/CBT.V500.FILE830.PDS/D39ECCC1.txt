Housekeeping for IMS index databases

IMSSTAT REXX EXEC

/* REXX */
/* -------------------------------------------------------- */
/* BUILD STATISTIC FOR IMS-VSAM-DATABASES FROM  LISTCAT     */
/* -------------------------------------------------------- */
trace o
arg env
/* growthsfactor for calculation of the cluster space       */
/* allocation in %                                          */
zuwachs = 10
/*----------------------------------------------------------*/
if env = 'T' then do
                  imsid = 'TST1'
                  fpre  = 'TBASLB'
                  end
             else do
                  env   = 'P'
                  imsid = 'PRD1'
                  fpre  = 'PBASLB'
                  end
/* To include each index database we made a LISTDS MEMBERS from    */
/* our skeleton library where the VSAM IDCAMS parameter are stored */
x = outtrap(mem.)
"LISTDS ('"env"BASLI.IMS"imsid".SKELETON.JCLLIB') MEMBERS"
x = outtrap(off)
statname =  "'"env"BASLI.IMS"imsid".STATS.BESTV'"
x = outtrap(alc.)
'FREE FILE(OUTFILE'env')'
'FREE DS('statname')'
'ALLOCATE FILE(OUTFILE'env') DSN('statname') SHR'
ret = rc
if ret ¬= 0 then do
   say 'Fehler bei Allocate 'statname' Returncode: 'ret
   x = outtrap(off)
   do i = 1 to alc.0
      say alc.i
      end
   signal ende
   end
x = outtrap(alc.)
tempname =  "'"fpre"."userid()".LISTCAT.LIST'"
'FREE DS('tempname')'
'ALLOCATE FILE(IDCSOUT'env') DSN('tempname') OLD'
if rc ¬= 0
 then do
      'ALLOCATE FILE(IDCSOUT'env') DSN('tempname') NEW'
      ret = rc
      if ret ¬= 0 then do
         say 'Fehler bei Allocate 'tempname' Returncode: 'ret
         x = outtrap(off)
         do i = 1 to alc.0
            say alc.i
            end
         signal ende
         end
      end
aus.1 = ' * * CURRENT - VALUE          (IMS'imsid'  'date() time()') ',
        '* * * * * * * * SUGGESTED - VALUE   * *'
aus.2 = ' DBD-     --CISIZE-- Trk  Record  --SPLITS--  number',
        ' ---ALLOCATION--- * --CISIZE--  ---ALLOCATION---'
aus.3 = ' Name     Data  Indx /CA  length    CI    CA  Extent',
        ' Unit  Pri.  Sec. * Data  Indx  Unit  Pri.  Sec.'
aus.4 = ' ===================================================',
        '================================================'
'EXECIO 4 DISKW OUTFILE'env' (STEM AUS.'
x = outtrap(off)
members = 0
do j = 1 to mem.0
   mem.j = strip(mem.j,'B')
   if mem.j = '--MEMBERS--' & members = 0
      then do
           members = 1
           iterate
           end
   if members = 0 then iterate
   if left(mem.j,2) ¬= 'DB' then iterate
   if substr(mem.j,6,1) = 'I'  | ,
      substr(mem.j,5,2) = 'VS' | ,
      datatype(substr(mem.j,6,1)) = 'NUM'
      then do
           call analyze_i env'BASLI.'left(mem.j,7)'.PERM.KSDS.INDEX'
           call analyze   env'BASLI.'left(mem.j,7)'.PERM.KSDS.DATA'
           aus.1 = ' 'left(mem.j,7)' ',
                   right(cisize,4)' ',
                   right(cisize_idx,4)'',
                   right(trkproca,3)'  ',
                   right(avglrecl,3)'  ',
                   right(split_ci,5)'',
                   right(split_ca,5)'  ',
                   right(extents,3)'   ',
                   left(space_type,3)' ',
                   right(space_pri,5)'',
                   right(space_sec,5)' *',
                   right(ncisz,4)' ',
                   right(ncisz_idx,4)' ',
                   left(nspace_type,3)' ',
                   right(alloc1,5)'',
                   right(alloc2,5)
           'EXECIO 1 DISKW OUTFILE'env' (STEM AUS.'
           end
   end
'EXECIO 0 DISKW OUTFILE'env' ( FINIS'
say "Statistic file '"statname"' has been created"
ENDE:
x = outtrap(xx)
'FREE DS('tempname')'
'DEL 'tempname
x = outtrap(off)
exit
ANALYZE:
   arg dsn .
   "LISTCAT ENT('"dsn"') OFILE(IDCSOUT"env") ALL"
   'EXECIO * DISKR IDCSOUT'env' 1 (STEM EIN. FINIS'
   x = outtrap(off)
   do i = 1 to ein.0
      select
        when pos('AVGLRECL-',ein.i) > 0
          then do
            parse var ein.i . 'AVGLRECL' avglrecl,
            . 'CISIZE' cisize .
            avglrecl = strip(avglrecl,'L','-')
            cisize   = strip(cisize,'L','-')
            end
        when pos('CI/CA-',ein.i) > 0
          then do
            parse var ein.i . 'CI/CA' ciproca .
            ciproca  = strip(ciproca,'L','-')
            end
        when pos('IMBED',ein.i) > 0
          then do
            if pos('NOIMBED',ein.i) > 0
               then imbed = 'N'
               else imbed = 'J'
            end
        when pos('SPLITS-CI-',ein.i) > 0
          then do
            parse var ein.i . 'REC-TOTAL' rec_total,
            . 'SPLITS-CI' split_ci .
            rec_total = strip(rec_total,'L','-')
            split_ci  = strip(split_ci,'L','-')
            end
        when pos('SPLITS-CA-',ein.i) > 0
          then do
            parse var ein.i . 'SPLITS-CA' split_ca,
            . 'EXTENTS-' extents .
            split_ca  = strip(split_ca,'L','-')
            extents   = strip(extents,'L','-')
            end
        when pos('FREESPACE-%CI-',ein.i) > 0
          then do
            parse var ein.i . 'FREESPACE-%CI' freesp_ci .
            freesp_ci  = strip(freesp_ci,'L','-')
            end
        when pos('FREESPACE-%CA-',ein.i) > 0
          then do
            parse var ein.i . 'FREESPACE-%CA' freesp_ca .
            freesp_ca  = strip(freesp_ca,'L','-')
            end
        when pos('SPACE-TYPE-',ein.i) > 0
          then do
            parse var ein.i . 'SPACE-TYPE' space_type .
            space_type = strip(space_type,'L','-')
            select
              when space_type = 'CYLINDER' then space_type = 'CYL'
              when space_type = 'TRACK'    then space_type = 'TRK'
              otherwise space_type = left(space_type,3)
              end
            end
        when pos('SPACE-PRI-',ein.i) > 0
          then do
            parse var ein.i . 'SPACE-PRI' space_pri .
            space_pri  = strip(space_pri,'L','-')
            end
        when pos('SPACE-SEC-',ein.i) > 0
          then do
            parse var ein.i . 'SPACE-SEC' space_sec .
            space_sec = strip(space_sec,'L','-')
            end
        when pos('TRACKS/CA-',ein.i) > 0
          then do
            parse var ein.i . 'TRACKS/CA' trkproca .
            trkproca  = strip(trkproca,'L','-')
            end
        when pos('PHYRECS/TRK-',ein.i) > 0
          then do
            parse var ein.i . 'PHYRECS/TRK' ciptrk .
            ciptrk  = strip(ciptrk,'L','-')
            end
        otherwise iterate
        end
   end
   /*------------------------------------------------------------*/
   /* calculate records / CI                                     */
   /*------------------------------------------------------------*/
   recproci = trunc((cisize * ((100-freesp_ci)/100) - 10) / avglrecl)
   /*------------------------------------------------------------*/
   /* calculate needed CIs for number of records                 */
   /*------------------------------------------------------------*/
   anzci   = trunc(rec_total / recproci + 0.999)
   /*------------------------------------------------------------*/
   /* multiply needed CIs by growthsfactor  for ex. 10 %         */
   /*------------------------------------------------------------*/
   anzci = anzci + trunc(anzci * zuwachs / 100)
   /*------------------------------------------------------------*/
   /* calculate CI/CA by CA-size of 1 cylinder                   */
   /*------------------------------------------------------------*/
   if imbed = 'J' then cipca = ciptrk * 14
                  else cipca = ciptrk * 15
   /*------------------------------------------------------------*/
   /* Estimate number of needed CAs                              */
   /* If the number of needed CAs < 1, you didn't need a whole   */
   /* Cylinder for the CA.                                       */
   /* Calculation of the allocations is made in Tracks           */
   /*------------------------------------------------------------*/
   anzca   = anzci / trunc((cipca * ((100-freesp_ca)/100)))
   if anzca >= 1
      then do
           nspace_type = 'CYL'
           alloc1      = trunc(anzca + 0.999)
           alloc2      = trunc(alloc1 * 0.1 + 0.999)
           end
      else do
           anztrk  = trunc(anzci / ciptrk + 0.999)
           if freesp_ca > 0
              then anztrk = trunc(anztrk / (1 - freesp_ca/100) + 0.999)
           cipca = anztrk * anztrk
           nspace_type = 'TRK'
           alloc1 = anztrk
           alloc2 = anztrk
           end
   if nspace_type = 'CYL'
      then do
           select
            when avglrecl < 20 then do
                                    ncisz     = cisize
                                    ncisz_idx = cisize
                                    end
            when avglrecl < 30 then do
                                    ncisz     = cisize
                                    ncisz_idx = 4096
                                    end
            otherwise do
                      ncisz     = 4096
                      ncisz_idx = 4096
                      end
            end
           end
      else do
           select
            when cisize = cisize_idx then do
                                          ncisz     = cisize
                                          ncisz_idx = cisize
                                          end
            when space_type = nspace_type &,
                 cisize < cisize_idx then do
                                          ncisz     = cisize
                                          ncisz_idx = 4096
                                          end
            when space_type ¬= nspace_type &,
                 cisize < cisize_idx then do
                                          ncisz     = cisize
                                          ncisz_idx = cisize
                                          end
            otherwise do
                      ncisz     = cisize
                      ncisz_idx = cisize_idx
                      end
            end
           end
   return
ANALYZE_I:
   arg dsn .
   "LISTCAT ENT('"dsn"') OFILE(IDCSOUT"env") ALL"
   'EXECIO * DISKR IDCSOUT'env' 1 (STEM EIN. FINIS'
   x = outtrap(off)
   do i = 1 to ein.0
      select
        when pos('AVGLRECL-',ein.i) > 0
          then do
            parse var ein.i . 'CISIZE' cisize_idx .
            cisize_idx   = strip(cisize_idx,'L','-')
            end
        otherwise iterate
        end
   end
   return

IMSSTATA REXX EXEC

/* REXX */
/* ---------------------------------------------------------- */
/* Generate reorganization or dummy jobs dependent of the     */
/* given trigger values. Initiate update of the VSAM parameter*/
/* files                                                      */
/* ---------------------------------------------------------- */
/* trigger-values:                                            */
/* ----------------                                           */
max_cispl = 500
max_caspl = 0
max_ext   = 0   /*trigger set to 0 to force job generation    */
/*                for all index dbs. should set to a value    */
/*                >= 1 after the first run                    */
/* ---------------------------------------------------------- */
trace o
arg env
if env = 'T' then do
                  imsid  = 'TST1'
                  jobpre = 'A031'
                  jcllib = 'PBASLB.TSTXPRD.JCLLIB'
                  end
             else do
                  env   = 'P'
                  imsid = 'PRD1'
                  jobpre= 'A030'
                  jcllib = 'PBASLB.SYST.JCLLIB'
                  end
dbd_alt = ''
call init_lfdnr
statname =  "'"env"BASLI.IMS"imsid".STATS.BESTV'"
x = outtrap(alc.)
'FREE FILE(INPFILE'env')'
'FREE DS('statname')'
'ALLOCATE FILE(INPFILE'env') DSN('statname') SHR'
ret = rc
if ret /= 0 then do
   say 'Fehler bei Allocate 'statname' Returncode: 'ret
   x = outtrap(off)
   do i = 1 to alc.0
      say alc.i
      end
   exit
   end
'EXECIO * DISKR INPFILE'env' ( STEM EIN. FINIS'
'FREE FILE(INPFILE'env')'
do j = 5 to ein.0
   parse var ein.j,
     dbd . . . . cispl caspl ext . . . . dcisz icisz unit npri nsec .
   call pruefen_trigger
   end
exit
PRUEFEN_TRIGGER:
   select
     when caspl > max_caspl then call datenbank_reorg
     when ext   > max_ext   then call datenbank_reorg
     when cispl > max_cispl then call datenbank_reorg
     otherwise call dummy_reorg
   end
return
DATENBANK_REORG:
call update_skeleton
dbd_prf = left(dbd,4)
if dbd_prf /= dbd_alt
   then do
        lfdnr = 0
        dbd_alt = dbd_prf
        end
jobname = jobpre||substr(dbd,3,2)||nr.lfdnr'0'
queue "//"jobname" JOB ,'"jobname"',"
queue "//            MSGLEVEL=(1,1),"
queue "//            MSGCLASS=X,"
if env = 'T' then queue "//            USER=TSTXPRD,"
queue "//            CLASS=G"
queue "//* ***************************************"
queue "//* FAVER SICHERUNG "dbd"               *"
queue "//* ***************************************"
queue "//         SET ENV="env",DSVERS=PERM"
queue "//         JCLLIB ORDER=&ENV.BASLB.USER.DDLIB"
queue "//JOBLIB   DD  DSN=&ENV.BASLB.FREMD.LOADPDS,DISP=SHR"
queue "//"dbd"B EXEC PGM=GVEXPORT"
queue "//SYSPRINT DD  SYSOUT=* "
queue "//SYSUDUMP DD  SYSOUT=* "
queue "//SYSOUT   DD  SYSOUT=* "
queue "//FVROUT0  DD  DSN=&ENV.BASLB."dbd"R.DATAVL, "
queue "//             DISP=(NEW,CATLG) "
queue "//SYSIN    DD  * "
queue "EXPORT ESTOP "
queue "CLUSTER "
queue "CL="env"BASLI."dbd".PERM.KSDS "
queue "/* "
aus.0 = queued()
do i = 1 to aus.0
   pull aus.i
   end
x = outtrap(alc.)
'FREE FILE(OUTFILE)'
jclname = "'"jcllib"("jobname")'"
'ALLOCATE FILE(OUTFILE) DSN('jclname') SHR'
ret = rc
if ret /= 0 then do
   say 'Fehler bei Allocate 'jclname' Returncode: 'ret
   x = outtrap(off)
   do i = 1 to alc.0
      say alc.i
      end
   exit
   end
'EXECIO' aus.0 'DISKW OUTFILE ( STEM AUS. FINIS'
'FREE FILE(OUTFILE)'
jobname = jobpre||substr(dbd,3,2)||nr.lfdnr'5'
queue "//"jobname" JOB ,'"jobname"',"
queue "//            MSGLEVEL=(1,1),"
queue "//            MSGCLASS=X,"
if env = 'T' then queue "//            USER=TSTXPRD,"
queue "//            CLASS=G"
queue "//* ***************************************         "
queue "//* FAVER RESTORE   "dbd"               * "
queue "//* *************************************** "
queue "//         SET ENV="env",DSVERS=PERM,IMSID="imsid
queue "//         JCLLIB ORDER=&ENV.BASLB.USER.DDLIB "
queue "//JOBLIB   DD  DSN=&ENV.BASLB.FREMD.LOADPDS,DISP=SHR "
queue "//DELDEF   EXEC DBDELDEF,ENV=&ENV,DB="dbd",IMSID=&IMSID "
queue "//"dbd"R EXEC PGM=GVRESTOR "
queue "//SYSPRINT DD  SYSOUT=* "
queue "//SYSOUT   DD  SYSOUT=* "
queue "//TAPE0    DD  DSN=&ENV.BASLB."dbd"R.DATAVL,DISP=OLD "
queue "//OUTPUT   DD  DSN=&ENV.BASLI."dbd".&DSVERS..KSDS, "
queue "//             DISP=SHR "
queue "//SYSIN    DD  * "
queue "RESTORE "
queue "CLUSTER "
queue "CL=PBASLI."dbd".PERM.KSDS    - "
queue "DEFINED DDNAME=OUTPUT "
queue "/* "
aus.0 = queued()
do i = 1 to aus.0
   pull aus.i
   end
x = outtrap(alc.)
jclname = "'"jcllib"("jobname")'"
'ALLOCATE FILE(OUTFILE'env') DSN('jclname') SHR'
ret = rc
if ret ¬= 0 then do
   say 'Fehler bei Allocate 'jclname' Returncode: 'ret
   x = outtrap(off)
   do i = 1 to alc.0
      say alc.i
      end
   exit
   end
'EXECIO' aus.0 'DISKW OUTFILE'env' ( STEM AUS. FINIS'
'FREE FILE(OUTFILE'env')'
lfdnr = lfdnr + 1
say 'Reorg f}r 'dbd' vorbereitet (Jobs: ',
    left(jobname,7)'0/'left(jobname,7)'5)'
return
DUMMY_REORG:
dbd_prf = left(dbd,4)
if dbd_prf /= dbd_alt
   then do
        lfdnr = 0
        dbd_alt = dbd_prf
        end
jobname = jobpre||substr(dbd,3,2)||nr.lfdnr'0'
queue "//"jobname" JOB ,'"jobname"',"
queue "//            MSGLEVEL=(1,1),"
queue "//            MSGCLASS=X,"
if env = 'T' then queue "//            USER=TSTXPRD,"
queue "//            CLASS=G"
queue "//* ***************************************"
queue "//* DUMMY-JOB REORG "dbd"               *"
queue "//* ***************************************"
queue "//"dbd"B EXEC PGM=IEFBR14"
aus.0 = queued()
do i = 1 to aus.0
   pull aus.i
   end
x = outtrap(alc.)
'FREE FILE(OUTFILE'env')'
jclname = "'"jcllib"("jobname")'"
'ALLOCATE FILE(OUTFILE'env') DSN('jclname') SHR'
ret = rc
if ret ¬= 0 then do
   say 'Fehler bei Allocate 'jclname' Returncode: 'ret
   x = outtrap(off)
   do i = 1 to alc.0
      say alc.i
      end
   exit
   end
'EXECIO' aus.0 'DISKW OUTFILE'env' ( STEM AUS. FINIS'
'FREE FILE(OUTFILE'env')'
jobname = jobpre||substr(dbd,3,2)||nr.lfdnr'5'
queue "//"jobname" JOB ,'"jobname"',"
queue "//            MSGLEVEL=(1,1),"
queue "//            MSGCLASS=X,"
if env = 'T' then queue "//            USER=TSTXPRD,"
queue "//            CLASS=G"
queue "//* ***************************************"
queue "//* DUMMY-JOB REORG "dbd"               *"
queue "//* ***************************************"
queue "//"DBD"R EXEC PGM=IEFBR14 "
aus.0 = queued()
do i = 1 to aus.0
   pull aus.i
   end
x = outtrap(alc.)
jclname = "'"jcllib"("jobname")'"
'ALLOCATE FILE(OUTFILE'env') DSN('jclname') SHR'
ret = rc
if ret ¬= 0 then do
   say 'Fehler bei Allocate 'jclname' Returncode: 'ret
   x = outtrap(off)
   do i = 1 to alc.0
      say alc.i
      end
   exit
   end
'EXECIO' aus.0 'DISKW OUTFILE'env' ( STEM AUS. FINIS'
'FREE FILE(OUTFILE'env')'
lfdnr = lfdnr + 1
return
UPDATE_SKELETON:
   fileid = "'"env"BASLI.IMS"imsid".SKELETON.JCLLIB("dbd"D)'"
   push unit npri nsec dcisz icisz
   mac = 'MACRO (IMSSTATB)'
   address ispexec "EDIT DATASET ("fileid")" mac
return
INIT_LFDNR:
nr.0  = '0'
nr.1  = '1'
nr.2  = '2'
nr.3  = '3'
nr.4  = '4'
nr.5  = '5'
nr.6  = '6'
nr.7  = '7'
nr.8  = '8'
nr.9  = '9'
nr.10 = 'A'
nr.11 = 'B'
nr.12 = 'C'
nr.13 = 'D'
nr.14 = 'E'
nr.15 = 'F'
nr.16 = 'G'
nr.17 = 'H'
nr.18 = 'I'
nr.19 = 'J'
nr.20 = 'K'
nr.21 = 'L'
nr.22 = 'M'
nr.23 = 'N'
nr.24 = 'O'
nr.25 = 'P'
nr.26 = 'Q'
nr.27 = 'R'
nr.28 = 'S'
nr.29 = 'T'
nr.30 = 'U'
nr.31 = 'V'
nr.32 = 'W'
nr.33 = 'X'
nr.34 = 'Y'
nr.35 = 'Z'
return

IMSSTATB REXX EXEC

/* REXX */
/* MACRO TO UPDATE THE SKELETON-LIBRARIES FOR DEL/DEF CLUSTER */
trace o
'ISREDIT MACRO'
pull dunit dpri dsec dcisz icisz
call ermitteln_index_allocation
address isredit
a = extract('%ZSPACE=')
parse var a arg1 'PRIMARY' .
arg1 = strip(arg1,'T')
alt = '"'arg1'"'
neu = '"%ZSPACE='"''"'"'
'C' alt neu
a = extract('%ZCISZ=')
parse var a arg1 .
alt = '"'arg1'"'
neu = '"%ZCISZ='"''"'"'
'C' alt neu
a = extract('%ZDSPACE=')
parse var a arg1 'DATA' .
arg1 = strip(arg1,'T')
if dunit = 'CYL' | dunit = 'cyl'
   then alu = 'CYLINDERS'
   else alu = 'TRK'
alt = '"'arg1'"'
neu = '"%ZDSPACE='"'"alu" ("dpri" "dsec")'"'"'
'C' alt neu
a = extract('%ZDCISZ=')
parse var a arg1 .
alt = '"'arg1'"'
neu = '"%ZDCISZ='"'CISZ("dcisz")'"'"'
'C' alt neu
a = extract('%ZISPACE=')
parse var a arg1 'INDEX' .
arg1 = strip(arg1,'T')
if iunit = 'CYL' | iunit = 'cyl'
   then alu = 'CYLINDERS'
   else alu = 'TRK'
alt = '"'arg1'"'
neu = '"%ZISPACE='"'"alu" ("ipri" "isec")'"'"'
'C' alt neu
a = extract('%ZICISZ=')
parse var a arg1 .
alt = '"'arg1'"'
neu = '"%ZICISZ='"'CISZ("icisz")'"'"'
'C' alt neu
'END'
exit
ERMITTELN_INDEX_ALLOCATION:
/* Bei CI-Gr|~e 2048 ---> 21 CI/Track */
/* Bei CI-Gr|~e 4096 ---> 12 CI/Track */
iunit = 'TRK'
if icisz = 2048 then faktor = 21
                else faktor = 12
if dunit = 'CYL'
   then ipri = trunc(dpri / faktor + 0.999)
   else ipri = 1
isec = ipri
return


Roman Hawlitschek
Systems Programmer (Germany)                                       c Xephon 1995

