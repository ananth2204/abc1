TOD clock converter for REXX

Some time ago I was working on a REXX EXEC to deal with
SMF type 110 records and I came across an eight-byte field
whose description was 'CICS start time STCK' with a type of
'bitstring'. For those not familiar with it, STCK is the Assembler
mnemonic for the Store Clock instruction, so the contents of this
field are the CICS start time in the Time of Day (TOD) format as
described in the Principles of Operation.

I found no way to deal with this field with the available REXX
functions so I developed a small Assembler program which,
assembled and linked with the proper TSO/REXX interfaces,
came to be the REXX function that I needed. I called it
MRXSTCK.

This program uses the Assembler macro STCKCONV to
translate the TOD value to a format more intelligible for human
eyes, and accepts the input field in character format (eight bytes)
or in hexadecimal format (sixteen bytes). You should not code
X'...' if you decide to use the hexadecimal format: the program
decides which format to use based on the length of the field you
pass it.

The function result depends on the option you code at invocation
time like the REXX function DATE(). You have five different use
options: E, O, S, U, or none - the first four standing for European,
Ordered, Sorted, and USA date formats. Unlike the REXX
DATE() function, however, you can't code the full word - only
the first character will be accepted. The function will return one
field with the resulting time and day, for example:

     MRXSTCK(a899308efbc2d101,E) ==> 20:52:50.233389 27/04/93
     MRXSTCK(a899308efbc2d101,O) ==> 20:52:50.233389 93/04/27
     MRXSTCK(a899308efbc2d101,S) ==> 20:52:50.233389 19930427
     MRXSTCK(a899308efbc2d101,U) ==> 20:52:50.233389 04/27/93
     MRXSTCK(a899308efbc2d101)   ==> 20:52:50.233389 27/Apr 1993
     MRXSTCK(XXXXXXXX,e)         ==> 02:43:47.147390 13/04/29
     MRXSTCK(XXXXXXXX,o)         ==> 02:43:47.147390 29/04/13
     MRXSTCK(XXXXXXXX,s)         ==> 02:43:47.147390 20290413
     MRXSTCK(XXXXXXXX,u)         ==> 02:43:47.147390 04/13/29
     MRXSTCK(XXXXXXXX)           ==> 02:43:47.147390 13 Apr 2029

As the date value may have one or three words, depending on the
call option, I chose to return the time first as it seemed to provide
the easiest way to handle the result; this way it is possible to parse
the returned values on only two variables, no matter which option
you used.

In the above examples, if you coded 'E7E7E7E7E7E7E7E7'
instead of 'XXXXXXXX', the results would have been exactly
the same.

When I was developing this function I decided to provide for
limited error detection so, if you pass the function a first parameter
with a length other than 8 or 16, if the first parameter length
equals 16 but contains invalid hexadecimal characters, or if the
second parameter (if any) isn't one of those previously mentioned,
the function will return only one byte: '0' (zero). Any other error
will abend the EXEC just as it would do with other REXX
functions.

If you browse the source code, you will find that the function also
accepts 'N' as a valid second parameter, but that is because of the
way I chose to code the options treatment, and stands for no
option. It makes no sense to pass an 'N' to get a result that you
can obtain without passing it (as in the fifth and tenth examples
shown above).

MRXSTCK SOURCE CODE

MRXSTCK        CSECT
               EQUR                   general register equates
               B     40(R15)
               DC    CL36'Module MRXSTCK  on &SYSDATE at &SYSTIME'
               STM   R14,R12,12(R13)
               USING MRXSTCK,R12
               LR    R12,R15          base register
               ST    R13,SAVEAREA+4
               LR    R2,R13
               LA    R13,SAVEAREA
               ST    R13,8(R2)
               SR    R15,R15
               USING EFPL,R1
               L     R4,EFPLEVAL      Ptr(evaluation block)
               L     R2,0(R4)         A(evaluation block)
               USING EVALBLOCK,R2
               L     R3,EFPLARG       A(parsed argument list)
               USING ARGTABLE_ENTRY,R3
               LA    R3,ARGTABLE_ARGSTRING_PTR
FRST_PARM_A    EQU   *
               LM    R4,R5,0(R3)
               C     R5,=F'8'
               BNE   FRST_PARM_B
               MVC   TODVALUE,0(R4)
               B     SCND_PARM
FRST_PARM_B    EQU   *
               C     R5,=F'16'
               BNE   CONV_ERROR
               LR    R7,R4
TRANS_UPP      EQU   *                translate parameter to upp case
               OI    0(R7),X'40'
               LA    R7,1(R7)
               BCT   R5,TRANS_UPP
               LA    R15,2
BIG_LOOP       EQU   *
               LA    R11,2
               L     R6,4(R4)
MID_LOOP1      EQU   *
               LA    R10,4
MID_LOOP2      EQU   *
               SR    R7,R7
               SRDL  R6,8
               SR    R8,R8
               ST    R3,FWORD
               LA    R3,16
SMALLOOP       EQU   *
               C     R7,TAB_CHARS(R8)
               BE    FOUND
               LA    R8,4(R8)
               BCT   R3,SMALLOOP
               B     CONV_ERROR
FOUND          EQU   *
               L     R3,FWORD
               SRA   R8,2
               SRDL  R8,4
               BCT   R10,MID_LOOP2
               L     R6,0(R4)
               BCT   R11,MID_LOOP1
               C     R15,=F'2'
               BNE   ANOTHER
               ST    R9,TODVALUE
               LA    R4,8(R4)
               BCT   R15,BIG_LOOP
ANOTHER        EQU   *
               ST    R9,TODVALUE+4
SCND_PARM      EQU   *
               LA    R3,ARGTABLE_NEXT
               LM    R4,R5,ARGTABLE_ENTRY
               LTR   R5,R5
               BM    NO_OPER
               C     R5,=F'1'
               BNE   CONV_ERROR
               OI    0(R4),X'40'      translate parameter to upp case
               LA    R6,TAB_OPER
               LA    R7,5
LOOP_OPER      EQU   *
               CLC   0(1,R4),0(R6)
               BE    OPER_OK
               LA    R6,4(R6)
               BCT   R7,LOOP_OPER
               B     CONV_ERROR
NO_OPER        EQU   *
               MVC   BRANCH_TO+2(2),WHEN_NO_OPER
               B     DO_IT
OPER_OK        EQU   *
               MVC   BRANCH_TO+2(2),2(R6)
DO_IT          EQU   *
               STCKCONV                                                X
               STCKVAL=TODVALUE,                                       X
               CONVVAL=OUTVALUE,                                       X
               TIMETYPE=DEC,                                           X
               DATETYPE=YYYYMMDD
               LTR   R15,R15
               BNZ   CONV_ERROR
EDIT_RESULT    EQU   *
               MVC   EVALBLOCK_EVDATA(L'TIME_MASK),TIME_MASK
               ED    EVALBLOCK_EVDATA(L'TIME_MASK),OUTVALUE
               MVC   EVALBLOCK_EVDATA(15),EVALBLOCK_EVDATA+1
BRANCH_TO      B     BRANCH_TO
TO_YYYYMMDD    EQU   *
               LA    R7,24
               ST    R7,EVALBLOCK_EVLEN
               MVC   EVALBLOCK_EVDATA+15(L'M_YYYYMMDD),M_YYYYMMDD
               ED    EVALBLOCK_EVDATA+15(L'M_YYYYMMDD),OUTVALUE+8
               MVI   EVALBLOCK_EVDATA+15,C' '
               B     EOJ
TO_YYMMDD      EQU   *
               LA    R7,24
               ST    R7,EVALBLOCK_EVLEN
               MVC   EVALBLOCK_EVDATA+15(L'M_XXXXXX),M_XXXXXX
               ED    EVALBLOCK_EVDATA+15(L'M_XXXXXX),OUTVALUE+9
               MVI   EVALBLOCK_EVDATA+15,C' '
               B     EOJ
TO_DDMMYY      EQU   *
               LA    R7,24
               ST    R7,EVALBLOCK_EVLEN
               MVC   WORK3,T_DDMMYY
               TR    WORK3,OUTVALUE+9
               MVC   EVALBLOCK_EVDATA+15(L'M_XXXXXX),M_XXXXXX
               ED    EVALBLOCK_EVDATA+15(L'M_XXXXXX),WORK3
               MVI   EVALBLOCK_EVDATA+15,C' '
               B     EOJ
TO_MMDDYY      EQU   *
               LA    R7,24
               ST    R7,EVALBLOCK_EVLEN
               MVC   WORK3,T_MMDDYY
               TR    WORK3,OUTVALUE+9
               MVC   EVALBLOCK_EVDATA+15(L'M_XXXXXX),M_XXXXXX
               ED    EVALBLOCK_EVDATA+15(L'M_XXXXXX),WORK3
               MVI   EVALBLOCK_EVDATA+15,C' '
               B     EOJ
TO_LITERAL     EQU   *
               LA    R7,27
               ST    R7,EVALBLOCK_EVLEN
               MVC   EVALBLOCK_EVDATA+15(L'NN_MASK),NN_MASK
               ED    EVALBLOCK_EVDATA+15(L'NN_MASK),OUTVALUE+11
               MVI   EVALBLOCK_EVDATA+15,C' '
               XC    WORK8,WORK8
               OI    WORK8+7,X'0F'
               MVO   WORK8,OUTVALUE+10(1)
               CVB   R6,WORK8
               SH    R6,=H'1'
               MH    R6,=H'3'
               LA    R6,TAB_MONTH(R6)
               MVC   EVALBLOCK_EVDATA+19(3),0(R6)
               MVC   EVALBLOCK_EVDATA+22(L'NNNN_MASK),NNNN_MASK
               ED    EVALBLOCK_EVDATA+22(L'NNNN_MASK),OUTVALUE+8
               MVI   EVALBLOCK_EVDATA+22,C' '
               B     EOJ
CONV_ERROR     EQU   *
               LA    R7,1
               ST    R7,EVALBLOCK_EVLEN
               MVI   EVALBLOCK_EVDATA,C'0'
EOJ            EQU   *
               L     R13,4(R13)
               SR    R15,R15
               RETURN (14,12),RC=(15)
*---------------------------------------------------------------------*
SAVEAREA       DS    18F
*---------------------------------------------------------------------*
TAB_OPER       EQU   *                auxiliary "to branch to"
               DC    C'E'
               DS    0H               slack byte for type S constant
               DC    S(TO_DDMMYY)
               DC    C'N'
               DS    0H               slack byte for type S constant
WHEN_NO_OPER   DC    S(TO_LITERAL)
               DC    C'O'
               DS    0H               slack byte for type S constant
               DC    S(TO_YYMMDD)
               DC    C'S'
               DS    0H               slack byte for type S constant
               DC    S(TO_YYYYMMDD)
               DC    C'U'
               DS    0H               slack byte for type S constant
               DC    S(TO_MMDDYY)
*---------------------------------------------------------------------*
               DS    0F
TAB_CHARS      EQU   *
               DC    XL4'F0000000'
               DC    XL4'F1000000'
               DC    XL4'F2000000'
               DC    XL4'F3000000'
               DC    XL4'F4000000'
               DC    XL4'F5000000'
               DC    XL4'F6000000'
               DC    XL4'F7000000'
               DC    XL4'F8000000'
               DC    XL4'F9000000'
               DC    XL4'C1000000'
               DC    XL4'C2000000'
               DC    XL4'C3000000'
               DC    XL4'C4000000'
               DC    XL4'C5000000'
               DC    XL4'C6000000'
*---------------------------------------------------------------------*
TAB_MONTH      EQU   *
               DC    CL3'Jan'
               DC    CL3'Feb'
               DC    CL3'Mar'
               DC    CL3'Apr'
               DC    CL3'May'
               DC    CL3'Jun'
               DC    CL3'Jul'
               DC    CL3'Aug'
               DC    CL3'Sep'
               DC    CL3'Oct'
               DC    CL3'Nov'
               DC    CL3'Dec'
*---------------------------------------------------------------------*
TODVALUE       DS    D
OUTVALUE       DS    2D
*---------------------------------------------------------------------*
WORK8          DS    0D
WORK3          DS    CL3
               DS    CL5
FWORD          DS    F
TIME_MASK      DC    X'F021207A20207A20204B202020202020'
NN_MASK        DC    X'F02120'
NNNN_MASK      DC    X'F021202020'
M_YYYYMMDD     DC    X'F02120202020202020'
M_XXXXXX       DC    X'F02120612020612020'
T_DDMMYY       DC    X'020100'
T_MMDDYY       DC    X'010200'
*---------------------------------------------------------------------*
               LTORG
               IRXEFPL
               IRXEVALB
               IRXARGTB
               END MRXSTCK


Altino M C Gromicho
Systems Programmer
Mundial Confianìa SA (Portugal)                                      c Xephon 19

