The MVS command you always wanted

      DCPU
      DCPU snapshot saved, re-issue command for results

      DCPU
      DCPU - largest two increases are
      XSSTHYJ      22.3 %
      VLF           0.3 %

      .CMD USEREXIT(exit_name)

PROGRAM SOURCE CODE

CMDEXIT  CSECT
CMDEXIT  AMODE 31
CMDEXIT  RMODE ANY
         BAKR  R14,0
         LR    R12,R15
         USING CMDEXIT,R12
         L     R5,0(,R1)                      r5 --> cmdx
         USING CMDX,R5
         L     R6,CMDXCLIP                    r6 --> command buffer
         USING CMDXCLIB,R6
         CLC   CMDXCMDI(4),=C'DCPU'           our 'command' ?
         BNE   A_RC0                          no - not interested
         STORAGE OBTAIN,LENGTH=WORKL          get some storage
         LR    R13,R1
         USING WORK,R13
         LR    R0,R1                          r0 --> storage
         LA    R1,WORKL                       length
         XR    R14,R14                        pad byte
         MVCL  R0,R14                         initialize storage
         MVI   W_TABLE+16*20,X'FF'            mark end of table
         LA    R1,W_TABLE
         ST    R1,W_FREE                      --> first free slot
         L     R2,CMDXIWKP                    --> exit work area
         ST    R2,W_WORKP
         DROP  R5
         ICM   R9,15,4(R2)                    been here before ?
         BNZ   A_STORAGE_ALREADY_GOT
         STORAGE OBTAIN,LENGTH=244,           get some csa storage     X
               SP=245
         ST    R1,4(,R2)                      anchor it
         LR    R9,R1
         MVI   W_FLAG,C'Y'                    indicate first call
A_STORAGE_ALREADY_GOT EQU *
         L     R2,CVTPTR                      r2 --> cvt
         L     R2,CVTASVT-CVT(,R2)            r2 --> asvt
         L     R4,ASVTMAXU-ASVT(,R2)          r4 no of asvt slots
         LA    R3,ASVTENTY-ASVT(,R2)          r3 --> first asvt slot
A_ASVT_LOOP EQU *
         ICM   R6,15,0(R3)                    asvt entry
         BM    A_ASVT_NEXT                    skip if not assigned ?
         ICM   R5,15,ASCBJBNI-ASCB(R6)        r5 --> jobname (batch)
         BNZ   A_CPU_TIME
         ICM   R5,15,ASCBTSB-ASCB(R6)         r5 --> tsb
         BNZ   A_ASVT_NEXT                    skip if TSO
         L     R5,ASCBJBNS-ASCB(R6)           r5 --> jobname (stc)
A_CPU_TIME     EQU *
         CLC   0(8,R5),=CL8'INIT'             initiator ?
         BE    A_ASVT_NEXT
         LM    R14,R15,ASCBEJST-ASCB(R6)      cpu time
         SRDL  R14,12
         D     R14,=F'10000'
         LR    R10,R15
         LM    R14,R15,ASCBSRBT-ASCB(R6)      srb time
         SRDL  R14,12
         D     R14,=F'10000'
         AR    R10,R15                        cpu + srb
         BZ    A_ASVT_NEXT                    zero ? not interested
         CLI   W_FLAG,C'Y'                    first time ?
         BE    A_PLACE_IN_TABLE               go build table
         LR    R7,R9                          r7 --> saved table
A_SEARCH_TABLE_LOOP EQU *
         CLC   0(8,R5),0(R7)                  task in saved table ?
         BE    A_CALC_INCREASE
         LA    R7,12(,R7)                     r7 --> next one
         CLI   0(R7),X'FF'                    end of table ?
         BE    A_ASVT_NEXT
         B     A_SEARCH_TABLE_LOOP
A_CALC_INCREASE EQU *
         XR    R14,R14
         LR    R15,R10                        cpu now
         S     R15,8(,R7)                     minus cpu last time
         M     R14,=F'1000'
         D     R14,8(,R7)                     increase
         C     R15,W_TASK1+8                  new > current biggest ?
         BNL   A_NEW_BIGGEST
         C     R15,W_TASK2+8                  new > second biggest ?
         BL    A_ASVT_NEXT
         MVC   W_TASK2(8),0(R7)
         ST    R15,W_TASK2+8
         B     A_ASVT_NEXT
A_NEW_BIGGEST  EQU *
         MVC   W_TASK2,W_TASK1
         MVC   W_TASK1(8),0(R7)
         ST    R15,W_TASK1+8
         B     A_ASVT_NEXT
A_PLACE_IN_TABLE EQU *
         ICM   R8,15,W_FREE                   next free slot
         BZ    A_TABLE_FILLED
         MVC   0(8,R8),0(R5)                  insert task name and
         ST    R10,8(,R8)                     .. cpu time
         LR    R1,R8                          r1 --> our new row
         LA    R8,16(,R8)                     next free slot
         ST    R8,W_FREE
         CLI   0(R8),X'FF'                    bottom of table ?
         BNE   A_PLACE_IN_SEQUENCE
         XC    W_FREE,W_FREE                  yes - table full
A_PLACE_IN_SEQUENCE EQU *
         ICM   R7,15,W_FIRST
         BNZ   A_NOT_FIRST                    first record ?
         ST    R1,W_FIRST                     yes - set pointer
         B     A_ASVT_NEXT
A_NOT_FIRST    EQU *
         C     R10,8(,R7)                     new one < smallest ?
         BNH   A_NEW_SMALLEST
A_CHECK_NEXT   EQU *
         ICM   R8,15,12(R7)                   r8 --> next record
         BZ    A_NEW_HIGHEST                  end of list ?
         C     R10,8(,R8)
         BNH   A_ADJUST_LINKS
         LR    R7,R8
         B     A_CHECK_NEXT
A_NEW_SMALLEST EQU *
         ST    R7,12(,R1)                     link pointer to next
         ST    R1,W_FIRST                     new record is now first
         B     A_ASVT_NEXT
A_NEW_HIGHEST  EQU *
         ST    R1,12(,R7)                     point to new record
         MVC   12(4,R1),=XL4'00'              null pointer
         B     A_ASVT_NEXT
A_ADJUST_LINKS EQU *
         ST    R1,12(,R7)                     previous -> new
         ST    R8,12(,R1)                     new -> next
         B     A_ASVT_NEXT
A_TABLE_FILLED EQU *
         L     R7,W_FIRST                     r7 --> smallest so far
         C     R10,8(,R7)                     new one smaller ?
         BNH   A_ASVT_NEXT                    yes - not interested
         LR    R1,R7                          r1 --> new row
         MVC   0(8,R7),0(R5)                  task name
         ST    R10,8(,R7)                     cpu time
         MVC   W_FIRST,12(R7)                 previous next now first
         B     A_PLACE_IN_SEQUENCE            find right place for it
A_ASVT_NEXT    EQU *
         LA    R3,4(,R3)                      r3 --> next asvt slot
         BCT   R4,A_ASVT_LOOP
         CLI   W_FLAG,C'Y'                    this the first call ?
         BNE   A_WTO_RESULTS
         L     R7,W_FIRST                     r7  --> first one
         LR    R10,R9                         r10 --> table in csa
A_COPY_TABLE_LOOP EQU *
         MVC   0(12,R10),0(R7)                copy table row
         LA    R10,12(,R10)                   r10 --> next slot
         ICM   R7,15,12(R7)                   r7  --> next one
         BNZ   A_COPY_TABLE_LOOP
         MVI   0(R10),X'FF'                   end of table
         WTO   'DCPU snapshot saved, re-issue command for results'
         B     A_RETURN
A_WTO_RESULTS  EQU *
         WTO   'DCPU - largest two increases are'
         MVC   W_WTO(WTOL),WTO
         MVC   W_WTO+4(8),W_TASK1
         MVC   W_WTO+14(9),=X'40202021204B20406C'
         L     R10,W_TASK1+8
         CVD   R10,W_PACKED
         ED    W_WTO+14(7),W_PACKED+5
         WTO   MF=(E,W_WTO)
         MVC   W_WTO+4(8),W_TASK2
         MVC   W_WTO+14(9),=X'40202021204B20406C'
         L     R10,W_TASK2+8
         CVD   R10,W_PACKED
         ED    W_WTO+14(7),W_PACKED+5
         WTO   MF=(E,W_WTO)
         L     R2,W_WORKP                     --> exit work area
         STORAGE RELEASE,ADDR=(9),            release csa storage      X
               LENGTH=244,SP=245
         MVC   4(4,R2),=XL4'00'               remove our anchor
A_RETURN EQU   *
         LR    R1,R13
         STORAGE RELEASE,ADDR=(1),            free temporary storage   X
               LENGTH=WORKL
A_RC4    LA    R15,4                          rc4 => we have processed
         B     A_EXIT
A_RC0    XR    R15,R15                        rc0 => not interested
A_EXIT   PR                                   return to mvs
WTO         WTO   '                         ',MF=L
WTOL        EQU  *-WTO
WORK     DSECT
W_SAVE      DS    18F
W_PACKED    DS    D
W_FREE      DS    F
W_FIRST     DS    F
W_WORKP     DS    F
W_TASK1     DS    CL12
W_TASK2     DS    CL12
W_TABLE     DS    20CL16
            DS    CL1
W_WTO       WTO   '                         ',MF=L
W_FLAG      DS    CL1
WORKL       EQU   *-WORK
         IEZVX101
         CVT   DSECT=YES
         IHAASVT
         IHAASCB
         @REGS
         END


David Welch (New Zealand)                                               c Xephon

