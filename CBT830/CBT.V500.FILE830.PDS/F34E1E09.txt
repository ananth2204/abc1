Foreground assembly of an ISPF EDIT window

During the general course of program development, especially
in the early stages, the major battle is one of syntax and
typographical error elimination.  In addition, batch turnaround
time is not conducive to that creative spark that is required
during any new program development.

What is needed is a quick, simple way of checking a program
without having to submit it for batch assembly.  It is also
cumbersome to have to save the file and exit the editor to go to
the foreground assemble option of ISPF.  Furthermore, many
times the source is imbedded in-line with the JCL and it is
annoying to have to remove the JCL for foreground and put it
back for batch.

The solution to all of the above mentioned dilemmas is the
REXX EXEC below.  This EXEC will locate the source
portion of a program imbedded in JCL and will assemble it.  It
will then put the caller into 'browse' on the Assembler listing.
Exiting browse will put the caller back in edit at the place
where he or she left off.

Though the example here is with Assembler, the same
problems occur for any compiled language.  Regardless of the
language the logic of the EXEC is the same.  Only the file and
compiler names need to be changed.

/*                          REXX                                     */
/*-------------------------------------------------------------------*/
/* Name   : ASMHC                                                    */
/* Env    : ISPF/EDIT 3.1.0, TSO 2.1.0, MVS/ESA 3.1.0e, DFP 3.1.1    */
/* Purpose: This ISPF EDIT macro will assemble the contents of the   */
/*          current EDIT window and present the output to be browsed.*/
/*          It can be used during development or to generate a symbol*/
/*          map of a program already in production. JCL does not have*/
/*          to be removed prior to execution.                        */
/*-------------------------------------------------------------------*/
 Address "ISREDIT"       /*  Set the default command mode as ISREDIT */
 Macro                   /*  This is an edit macro                   */
/*-------------------------------------------------------------------*/
/*   allocate the required datasets                                  */
/*-------------------------------------------------------------------*/
 address TSO             /*  Set the default command mode as TSO     */
 ddname          = 'C'time('S')                 /* Generate some temp*/
 sysprint_dsname = userid()'.'ddname'.ASMPRINT' /* file names to be  */
 sysin_dsname    = userid()'.'ddname'.ASMSYSIN' /* used later.       */
 Say 'Allocating Datasets'
 alloc f'(SYSIN)'  da'('sysin_dsname')' new reuse,
       unit'(SYSDA)' space'(5,1)' tracks,
       lrecl'(80)' recfm'(F,B)' dsorg'(PS)' blksize'(23440)'
 if (RC ¬= 0) then do
    Say 'Allocation of SYSIN dataset failed'
    Exit(RC)
 end;
 alloc f'(SYSPRINT)'  da'('sysprint_dsname')' new,
       unit'(SYSDA)' space'(5,10)' tracks,
       lrecl'(121)' blksize'(23474)' recfm'(F,B,M)' dsorg'(PS)' reuse
 if (RC ¬= 0) then do
    Say 'Allocation of SYSPRINT dataset failed'
    call cleanup
    Exit(RC)
 end;
 alloc f'(SYSTERM)'  da'(*)'
 if (RC ¬= 0) then do
    Say 'Allocation of SYSTERM dataset failed'
    call cleanup
    Exit(RC)
 end;
 alloc "F(SYSLIB) SHR KEEP REUSE",      /* Allocate the local SYSLIB */
       "DA(TSPDLP.PROBLEM.MACLIB,",     /* concatenation.            */
          "TMC.PROD.SYSLIB,",
          "SYS1.MACLIB,",
          "SYS1.MODGEN)"
 if (RC ¬= 0) then do
    Say 'Allocation of SYSLIB dataset failed'
    call cleanup
    Exit(RC)
 end;
 alloc f'(SYSUT1)' new,
       unit'(VIO)' space'(2,2)' cylinders reuse
 if (RC ¬= 0) then do
    Say 'Allocation of SYSUT1 dataset failed'
    call cleanup
    Exit(RC)
 end;
/*-------------------------------------------------------------------*/
/*   Determine the lines containing the ASM source code.             */
/*-------------------------------------------------------------------*/
 address isredit                       /* Set default command mode   */
 '(CURR) = LINENUM .ZCSR'              /* save current cursor Pos.   */
 locate  1                             /* go to the top of the file  */
 exclude "ALL '/' 1"                   /* exclude all JCL            */
 SEEK "FIRST P'=' NX"                  /* find first non blank line. */
 if (RC = 0) then do                   /* Is there one ??            */
    "(FIRST) = LINENUM .ZCSR"          /* yep .. take note of it     */
 end
 else do                               /* nope .. empty file         */
    say 'No lines found to assemble'   /*      give message to effect*/
    call cleanup                       /*      delete files          */
    exit(12)                           /*      set return code       */
 end;
 SEEK    "'/' 1 .zcsr .zlast"          /* find first JCL line at end */
 if (RC = 0) then do                   /* is there any JCL at bottom?*/
    "(LAST) = LINENUM .ZCSR"           /* yep .. take note of it     */
    LAST    = LAST - 1                 /* point last line in source  */
 end
 else do                               /* nope ..                    */
    "(LAST) = LINENUM .ZL"             /* last line of source at end */
 end;
 find    "'/' 1 ALL"                   /* un-exclude all JCL         */
 locate  CURR                          /* Restore cursor to user pos */
/*-------------------------------------------------------------------*/
/*   Copy the lines from the EDIT buffer to an external file.        */
/*-------------------------------------------------------------------*/
 Say 'Copying from line 'strip(first,l,0)' to 'strip(last,l,0),
     ' to the SYSIN dataset.'
 do i = first to last                  /* first copy all of the lines*/
    "(LINEVAL) = LINE "i               /* into an array              */
    indx = i - first + 1
    Line_Val.indx = LINEVAL
 end
 address tso                           /* set default command mode   */
 execio "*" diskw SYSIN '(STEM Line_Val. FINIS)' /*write ext src file*/
/*-------------------------------------------------------------------*/
/*   All things are ready. begin assembling the source.              */
/*-------------------------------------------------------------------*/
 Say 'Assembling dataset'
 say ' '
 say copies('-',79)
 say ' '
 'CALL ''SYS1.LINKLIB(IEV90)'' ''NODECK,TERM'''
 say ' '
 say copies('-',79)
/*-------------------------------------------------------------------*/
/*   Assembly has completed. Display assembler listing.              */
/*-------------------------------------------------------------------*/
 Ispexec Browse DataSet"("sysprint_dsname")"
 call cleanup
 exit(0)
/*-------------------------------------------------------------------*/
/*   Close and deallocate and delete all files used.                 */
/*-------------------------------------------------------------------*/
Cleanup: Procedure EXPOSE sysprint_dsname sysin_dsname
 call quiet ('FREE F(SYSIN,SYSPRINT,SYSUT1,SYSLIB')
 delete sysprint_dsname
 delete sysin_dsname
return
/*-------------------------------------------------------------------*/
/*   Perform a command quietly (i.e. no messages)                    */
/*-------------------------------------------------------------------*/
Quiet: Procedure
ARG Command
   x = outtrap(trash.)
   command
   x = outtrap(x)
return
/*-------------------------------------------------------------------*/
/*                       End of Program                              */
/*-------------------------------------------------------------------*/


Paul Lemmons
Systems Programmer
Tucson Medical Center (USA)                              c Xephon 1990

