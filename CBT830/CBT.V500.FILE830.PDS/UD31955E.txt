Subsystems and the subsystem interface (cont)

In last month's issue of MVS Update we took a look at the mechanics of
MVS subsystems and the subsystem interface.  This month we look in
detail at an example of a subsystem.

AN EXAMPLE OF A SUBSYSTEM

Although this sample subsystem is functional it is not intended to be
more than a working example.  It is hoped that the ideas conveyed in the
example will be used to build more impressive and practical subsystems
in your own environment.  The subsystem used as an example will rely on
the subsystem interface request made by SVC 34 (ie the operator
command).  This request is passed to the subsystem interface as a
function code 10 request.  The subsystem will examine all operator
commands and determine if the subsystem should handle the command or
pass the command on to other subsystems.

For the purposes of this example, all commands prefixed by a '+' sign
(as determined by the SSVTCPRE field of the SSVT extension) are to be
handled by the subsystem.  After the initialisation task has built the
SSVT/SSVT extension and enabled the subsystem, it will sit waiting to be
posted by the function routine.  The function routine will examine each
function code 10 request, use the information in the SSVT extension to
determine the commands that meet its selection criteria, and increment
the accumulated command count when a command includes the command
prefix.  When a '+taskname END' command (where taskname is the started
task name or job name of the task used to execute the SSITEST program)
is encountered by the function routine, a post will be issued for the
waiting initialisation task.  The initialisation task will then output
the accumulated command count to the console, disable the subsystem, and
terminate.

The subsystem is defined by having an IEFSSNxx SYS1.PARMLIB member
containing the following record:

     SSIT

and by specifying SSN=xx as an IPL parameter (where xx is the valid two-
character suffix for the IEFSSN member).

The initialisation routine can be run as a started task to execute the
SSITEST routine (no other DD statements required).  Both the SSITEST and
SSITSSI1 routines should be linked into a system LINKLIST library with
attributes RENT,REUS,AC(1).

The SSITEST initialisation routine started task procedure in
SYS1.PROCLIB should be as follows:

//SSITEST  PROC
//SSITEST  EXEC PGM=SSITEST,TIME=1440

and an S SSITEST command should be issued to start the subsystem
initialisation routine.

The procedure name and start command can be changed to adhere to your
installation standards and the initialisation routine can even be run as
a batch job if this is more appropriate.

SSITEST SOURCE CODE

SSITEST  CSECT
*   DOCUMENTATION
*        DESCRIPTION:  INITIALIZATION PROGRAM FOR SSIT SUBSYSTEM
*           FUNCTION:  THIS PROGRAM IS USED AS THE INIT PROGRAM FOR
*                      AN EXAMPLE SUBSYSTEM ENVIRONMENT.  THE PROGRAM
*                      WILL ENSURE THAT THE SUBSYSTEM HAS BEEN DEFINED
*                      TO MVS (I.E. - 'SSIT' HAS BEEN INCLUDED AS A
*                      SUBSYSTEM NAME IN AN ACTIVE IEFSSN.. MEMBER IN
*                      SYS1.PARMLIB).  ONCE THE SUBSYSTEM ENVIRONMENT
*                      HAS BEEN CONFIRMED, THE INIT PROGRAM WILL LOAD
*                      THE SUBSYSTEM FUNCTION ROUTINE, INITIALIZE THE
*                      SSVT, AND ENABLE THE FUNCTION ROUTINE BY
*                      UPDATING THE SSVT POINTER FIELD IN THE SSCVT.
*                      THE PURPOSE OF THE SUBSYSTEM FUNCTION ROUTINE
*                      WILL BE TO EXAMINE SUBSYSTEM FUNCTION CODE 10
*                      REQUESTS (OPERATOR COMMANDS) AND REMOVE ALL
*                      COMMANDS THAT ARE PREFIXED BY THE PROGRAMS
*                      COMMAND IDENTIFIER (IN THE CASE OF THIS PROGRAM
*                      A '+' SIGN).
*   ADDRESSING MODES
*              AMODE:  24
*              RMODE:  24
*   ATTRIBUTES
*               LKED:  RENT,REUS,AC(1)
*   ENTRY POINT
*              LABEL:  SSITEST
*             OFFSET:  X'0000'
*   INPUT DATA
*                R13:  SAVE AREA
*                R14:  RETURN ADDRESS
*                R15:  ENTRY ADDRESS
*   REGISTER USAGE
*           R0 - R8 :  WORK REGISTERS
*                R10:  BASE REGISTER
*                R12:  WORK AREA BASE REGISTER
*                R13:  SAVE AREA
*   REQUIREMENTS
*     PARMLIB UPDATE:  IEFSSN
         STM   R14,R12,12(R13)         SAVE INCOMING ENVIRONMENT
         LR    R10,R15                 SET UP MODULE ...
         USING SSITEST,R10                ADDRESSABILITY
BEGIN    GETMAIN RU,LV=WORKLEN,SP=245  GET WORKAREA STORAGE
         LTR   R15,R15                 O.K.?
         BNZ   GETERR01                NO - ABEND
         LR    R12,R1                  SAVE STORAGE ADDRESS
         USING WORKAREA,R12            SET ADDRESSABILITY
         MODESET MODE=SUP,KEY=ZERO
         ST    R13,SAVEAREA+4          SAVE PREVIOUS SAVEAREA
         LA    R13,SAVEAREA            GET NEW SAVEAREA ADDRESS
*        CHECK IF SUBSYSTEM INTERFACE
*        IS INITIALIZED ALREADY
SSCTINIT L     R1,16                   GET CVT ADDRESS
         USING CVT,R1                  SET ADDRESSABILITY
         L     R1,CVTJESCT             GET JESCT ADDRESS
         USING JESCT,R1                SET ADDRESSABILITY
         L     R1,JESSSCT              GET SSCT CHAIN ADDRESS
         USING SSCT,R1                 SET ADDRESSABILITY
*        SCAN FOR SSIT SSCVT ENTRY
SSCTLOOP LTR   R1,R1                   END OF SSCVT CHAIN?
         BZ    SSCTERR                 YES - TERMINATE INITIALIZATION
         CLC   SSCTSNAM,=C'SSIT'       OUR SSCVT?
         BE    OURSSCT                 YES - EXIT LOOP
         L     R1,SSCTSCTA             GET NEXT SSCVT ADDRESS
         B     SSCTLOOP                TRY AGAIN
OURSSCT  ST    R1,ASSCVT               SAVE SSCVT ADDRESS
         L     R4,SSCTSSVT             GET SSVT ADDRESS
         LTR   R4,R4                   ALREADY INITIALIZED?
         BZ    SSVTINIT                NO - INITIALIZE SSVT
         WTO   'SSITEST5 - SSIT SUBSYSTEM ALREADY ACTIVE.  INITIALIZATIX
               ON ABORTED.',ROUTCDE=(1),DESC=(1)
         B     FREE01                  YES - TERMINATE SUBSYSTEM
*        BUILD SSVT AND SSVT EXTENSION
SSVTINIT GETMAIN RU,LV=SSVTLEN,SP=245  GET SSVT STORAGE
         LTR   R15,R15                 O.K.?
         BNZ   GETERR02                NO - ABEND
         LR    R4,R1                   SAVE STORAGE ADDRESS
         USING SSVT,R4                 SET SSVT ADDRESSABILITY
*        CLEAR GETMAINED AREA
         LR    R0,R1                   GET AREA ADDRESS
         LA    R1,SSVTLEN              GET AREA LENGTH
         LR    R6,R0                   GET AREA ADDRESS
         XR    R7,R7                   CLEAR R7
         MVCL  R0,R6                   CLEAR AREA
         MVI   SSVTFCOD+9,1            FUNCTION 10 (CONSOLE COMMANDS)
         LOAD  EP=SSITSSI1,GLOBAL=(YES,P) LOAD FUNCTION ROUTINE INTO   X
                                          COMMON PAGEABLE STORAGE
         ST    R0,SSVTFRTN             SAVE FUNCTION ROUTINE ADDRESS
         MVI   SSVTFNUM+1,1            ONE FUNCTION SUPPORTED
         L     R1,ASSCVT               GET SSCVT ADDRESS
         ST    R1,SSVTSCVT             SAVE IN SSVT
CONTINUE L     R5,16                   GET CVT ADDRESS
         L     R5,0(,R5)               ACTIVE AREA
         L     R6,12(,R5)              CURRENT ASCB ADDRESS
         ST    R6,SSVTASCB             SAVE ASCB ADDRESS IN SSVT
         L     R7,172(,R6)             GET JOBNAME AREA ADDRESS
         LTR   R7,R7                   VALID?
         BNZ   GETJOBN                 YES - EXTRACT JOBNAME
         L     R7,176(,R6)             GET STCNAME AREA ADDRESS
         LTR   R7,R7                   VALID?
         BZ    NONAME                  NO - DON'T FILL NAME AREA
GETJOBN  MVC   SSVTJOBN(8),0(R7)       MOVE IN JOBNAME
NONAME   MVI   SSVTCPRE,C'+'           SET COMMAND PREFIX TO '+' SIGN
*    ENABLE SUBSYSTEM
         ST    R4,SSCTSSVT             SAVE SSVT ADDRESS
         WTO   'SSITEST0 - SSIT SUBSYSTEM ENABLED',                    X
               ROUTCDE=(1),DESC=(6)
*    WAIT FOR RESPONSE BACK FROM FUNCTION ROUTINE
         XC    SSVTECB(4),SSVTECB      CLEAR ECB
         WAIT  1,ECB=SSVTECB           WAIT FOR END
         WTO   'SSITEST1 - END COMMAND ACKNOWLEDGED FOR SUBSYSTEM',    X
               ROUTCDE=(1),DESC=(6)
         MVC   DBL2(2),SSVTCCNT        MOVE IN COMMAND COUNT
         UNPK  DBL1(5),DBL2(3)         UNPACK THE RESULTS
         NC    DBL1(4),=4X'0F'         CLEAR HIGH NIBBLE
         TR    DBL1(4),=C'0123456789ABCDEF'
         MVC   WTOWORK(WTOLEN),WTOLIST MOVE IN WTO
         MVC   WTOWORK+15(4),DBL1      MOVE OUT COMMAND COUNT
         WTO   MF=(E,WTOWORK)          WRITE OUT MESSAGE
         B     CLEANUP
SSCTERR  WTO   'SSITEST2 - SSIT SUBSYSTEM ENVIRONMENT NOT INITIALIZED',X
               ROUTCDE=(1),DESC=(1)
         B     FREE01
*        GETMAIN FAILED
*        ISSUE ABEND
GETERR01 ABEND 999,DUMP
GETERR02 FREEMAIN RU,LV=WORKLEN,SP=245,A=(12) FREE WORKAREA STORAGE
         ABEND 998,DUMP
CLEANUP  L     R1,ASSCVT                      GET SS ADDRESS
         L     R4,SSCTSSVT                    GET SSVTAREA ADDRESS
*    DISABLE THE SUBSYSTEM
         XC    SSCTSSVT(4),SSCTSSVT           INDICATE NOT ACTIVE
         FREEMAIN RU,LV=SSVTLEN,SP=245,A=(4)  FREE SSVTAREA STORAGE
FREE01   L     R13,SAVEAREA+4          RESTORE SAVEAREA ADDRESS
         FREEMAIN RU,LV=WORKLEN,SP=245,A=(12) FREE WORKAREA STORAGE
RET00    LM    R14,R12,12(R13)         RESTORE ENVIRONMENT
         SR    R15,R15                 SET RETURN CODE
         BR    R14                     RETURN
WTOLIST  WTO   'SSITEST3 - XXXX SUBSYSTEM COMMANDS HAVE BEEN ENTERED', X
               ROUTCDE=(1),DESC=(6),MF=L
WTOLEN   EQU   *-WTOLIST
WORKAREA DSECT
ASSCVT   DS    F
SAVEAREA DS    18F
DBL1     DS    D
DBL2     DS    D
WTOWORK  DS    CL(WTOLEN)
WORKLEN  EQU   *-WORKAREA
SSVT     DSECT
SSVTRSV  DS    XL2                     RESERVED
SSVTFNUM DS    XL2                     NUMBER OF SUPPORTED FUNCTIONS
SSVTFCOD DS    CL256                   FUNCTION CODE MATRIX
SSVTFRTN DS    F                       FUNCTION ROUTINE ADDRESS
SSVTEXT  EQU   *                       SSVT EXTENSION
SSVTECB  DS    F                       POST ECB
SSVTASCB DS    F                       OUR ASCB
SSVTSCVT DS    F                       SSCT ADDRESS SSCVT
SSVTJOBN DS    CL8                     SSIT INIT ROUTINE JOBNAME
SSVTCPRE DS    CL1                     COMMAND PREFIX
SSVTFILL DS    CL1                     FILLER
SSVTCCNT DS    AL2                     COMMAND COUNT
SSVTLEN  EQU   *-SSVT
         CVT   DSECT=YES               CVT MAP
         IEFJSCVT                      SSCVT MAP
         IEFJESCT                      JESCT MAP
         END

SSITSSI1 SOURCE CODE

SSITSSI1 CSECT
*   DOCUMENTATION
*        DESCRIPTION:  SSIT SUBSYSTEM FUNCTION ROUTINE
*           FUNCTION:  THIS PROGRAM IS USED AS SSIT SUBSYSTEM FUNCTION
*                      CODE 10 ROUTINE.  THE PROGRAM WILL EXAMINE ALL
*                      CONSOLE COMMANDS TO DETERMINE IF THE ENTERED
*                      COMMAND BELONGS TO THE SSITEST SUBSYSTEM.  IF
*                      IT DOES (I.E. - PREFIXED BY A '+' SIGN), THE
*                      COMMAND IS PROCESSED BY THE FUNCTION ROUTINE AND
*                      IS NOT PASSED ON.
*                      A '+TASKNAME END' COMMAND WILL CAUSE
*                      CONTROL TO BE RETURNED TO THE INIT PROGRAM,
*                      SSITEST.
*   ADDRESSING MODES
*              AMODE:  24
*              RMODE:  24
*   ATTRIBUTES
*               LKED:  RENT,REUS,AC(1)
*   ENTRY POINT
*              LABEL:  SSITSSI1
*             OFFSET:  X'0000'
*   INPUT DATA
*                R0 :  SSCVT ADDRESS
*                R1 :  SSOB ADDRESS
*                R13:  SAVE AREA
*                R14:  RETURN ADDRESS
*                R15:  ENTRY ADDRESS
*   REGISTER USAGE
*           R0 - R3 :  WORK REGISTERS
*                R4 :  SSVT BASE REGISTER
*           R5 - R7 :  WORK REGISTERS
*                R8 :  SSOB BASE REGISTER
*                R9 :  BASE REGISTER
         STM   R14,R12,12(R13)         SAVE INCOMING ENVIRONMENT
         LR    R9,R15                  SET UP MODULE ...
         USING SSITSSI1,R9                ADDRESSABILITY
BEGIN    LR    R3,R0                   GET SSCVT ADDRESS
         L     R4,SSCTSSVT-SSCT(,R3)   R4 -> SSVT
         USING SSVT,R4                 SET UP ADDRESSABILITY
         LR    R8,R1                   R8 -> SSOB
         USING SSOB,R8                 SET UP ADDRESSABILITY
         MODESET MODE=SUP,KEY=ZERO
*        GET TO FUNCTION DEPENDENT
*        PORTION OF THE SSOB
         L     R3,SSOBINDV             SET UP ADDRESSABILITY ...
         USING SSCMBGN,R3                 TO FUNCTION DEPENDENT AREA
         L     R5,SSCMBUFF             POINT TO COMMAND BUFFER AREA
         LH    R6,0(,R5)               GET COMMAND LENGTH
         LA    R5,4(,R5)               POINT TO COMMAND AREA
CMDLOOK  CLI   0(R5),C' '              BLANK?
         BNE   CMDFOUND                NO - WE MUST BE AT COMMAND START
         LA    R5,1(,R5)               MOVE TO NEXT COMMAND BYTE
         BCT   R6,CMDLOOK              IF MORE GO CHECK
         B     NOTFOUND                IF NOT EXIT
CMDFOUND CLC   0(1,R5),SSVTCPRE        OUR COMMAND?
         BE    LENFIX                  YES - CHANGE LENGTH & BUFFER PTR
         B     NOTFOUND                NO - EXIT
LENFIX   LA    R5,1(,R5)               SET BUFFER LOCATION POINTER
         BCTR  R6,0                    REDUCE BUFFER LENGTH BY ONE
*        AT THIS POINT THE COMMAND COULD BE EXAMINED FOR
*        ANY SPECIFIC SYNTAX WANTED AND APPROPRIATE
*        PROCESSING COULD TAKE PLACE.  FOR EXAMPLE PURPOSES,
*        WE WILL SIMPLY KEEP COUNT OF THE NUMBER OF COMMANDS
*        RECOGNIZED AND POST THE INIT ROUTINE IF A
*        '+TASKNAME END' COMMAND IS ENCOUNTERED.
         LH    R7,SSVTCCNT             GET CURRENT COMMAND COUNT
         LA    R7,1(,R7)               INCREASE COUNT BY ONE
         STH   R7,SSVTCCNT             SAVE UPDATED COUNT
         LA    R7,0                    CLEAR COUNTER
         LA    R2,SSVTJOBN             GET JOBNAME ADDRESS
         LA    R1,8                    SET LIMIT COUNTER
JOBNLOOP CLI   0(R2),C' '              BLANK?
         BE    JOBNEND                 YES - END OF JOBNAME
         LA    R2,1(,R2)               POINT TO NEXT BYTE
         LA    R7,1(,R7)               INCREMENT COUNTER
         BCT   R1,JOBNLOOP             IF MORE DO AGAIN
JOBNEND  LTR   R7,R7                   JOBNAME OK?
         BZ   POSTBACK                 NO - POST INIT PROGRAM
         BCTR  R7,0                    REDUCE BY ONE FOR COMPARE
         EX    R7,JOBNCLC              EXECUTE COMPARE
         BNE   NOTEND                  NO MATCH - DON'T END
         AR    R5,R7                   ADD JOBNAME ...
         LA    R5,1(,R5)                  INCREMENT
         CLC   0(4,R5),=C' END'        END COMMAND?
         BNE   NOTEND                  NO - DON'T PROCESS AS END
POSTBACK LR    R1,R13                  SAVE R13
*        IF WE OBTAIN THE LOCAL LOCK WE CAN PRESERVE
*        THE CONTENTS OF ALL REGISTERS EXCEPT R10-R13 AND R15
*        WHEN WE ISSUE A BRANCH ENTRY CROSS MEMORY POST
*        TO THE INIT ROUTINE.
*        THE POST IS USED TO SIGNAL THE INIT ROUTINE TO
*        BEGIN SUBSYSTEM TERMINATION.
         L     R2,SSVTASCB             GET TARGET ASCB ADDRESS
         SETLOCK OBTAIN,TYPE=LOCAL,RELATED=X,MODE=UNCOND
         POST  SSVTECB,0,ASCB=(2),BRANCH=YES,ERRET=ERRRTN1
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=X
         LR    R13,R1                  RESTORE REGISTER
NOTEND   MVC   SSOBRETN(4),=X'00000004' RC(4) - COMMAND NOT PASSED ON
         B     RETURN
NOTFOUND MVC   SSOBRETN(4),=X'00000000' RC(0) - COMMAND PASSED ON
         B     RETURN
RETURN   LM    R14,R12,12(R13)         RESTORE ENVIRONMENT
         SR    R15,R15                 CLEAR R15
         BR    R14
ERRRTN1  LM    R14,R12,12(R13)         RESTORE ENVIRONMENT
         LA    R15,8                   SET ERROR RETURN CODE
         BR    R14
JOBNCLC  CLC   0(1,R5),SSVTJOBN        USED BY EXEC
SSVT     DSECT
SSVTRSV  DS    XL2                     RESERVED
SSVTFNUM DS    XL2                     NUMBER OF SUPPORTED FUNCTIONS
SSVTFCOD DS    CL256                   FUNCTION CODE MATRIX
SSVTFRTN DS    F                       FUNCTION ROUTINE ADDRESS
SSVTEXT  EQU   *                       SSVT EXTENSION
SSVTECB  DS    F                       SRB POST ECB
SSVTASCB DS    F                       OUR ASCB
SSVTSCVT DS    F                       SSCT ADDRESS
SSVTJOBN DS    CL8                     SSIT JOBNAME
SSVTCPRE DS    CL1                     COMMAND PREFIX
SSVTFILL DS    CL1                     FILLER
SSVTCCNT DS    AL2                     COMMAND COUNT
SSVTLEN  EQU   *-SSVT
         CVT   DSECT=YES               CVT MAP
PSA      DSECT
         IHAPSA                        PSA MAP
         IEFJSSOB (CM)                 FUNCTION 10 DEPENDENT AREA MAP
         IEFJSCVT                      SSCVT MAP
         END


Jim Lautner
MVS Software Analyst (Canada) € Xephon 1988


