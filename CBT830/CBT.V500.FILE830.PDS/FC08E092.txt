VM console under TSO

The following program uses the diagnose command to pass
commands to VM. It then displays the response on the user's
screen in full screen format just like a VM console (see Figure 1).

This program can be called under native TSO or ISPF. Use
PF3 to terminate it.


MAIN PROGRAM

VM       CSECT
START    STM   R14,R12,12(R13)         STANDARD
         BALR  R12,0                    LINKAGE
         USING *,R12                     CONVENTION
         B     *+20                        .
         DC    CL16'&SYSTIME &SYSDATE'     .
         LR    R2,R13                      .
         ST    13,SAVEAREA+4               .
         LA    13,SAVEAREA                 .
         ST    13,8(2)                     .
MAINLINE EQU   *
         BAL   R14,INIT                PERFORM INITIALIZATION
         BAL   R14,CLEARP              PERFORM CLEAR SCREEN
RESTART  BAL   R14,COMMANDP            PERFORM COMMAND PROCESS
         BAL   R14,DISPLAY             PERFORM RESPONSE DISPLAY
         B     RESTART                 GET NEXT COMMAND
*     INITIALIZATION
INIT     SECTION                       SETUP FOR INIT SECTION
         GETMAIN RU,LV=4000            GETMAIN STORAGE FOR BUFFER
         ST    R1,BUFFERA              SAVE ADDRESS OF STORAGE
INIT     EXITP                         RETURN FROM INIT SECTION
*     CLEAR SCREEN
CLEARP   SECTION                       SETUP FOR CLEARP SECTION
         TPUT  CLEAR,CLEARL,FULLSCR,WAIT
         LA    R3,ADDRLIST
CLEARP   EXITP                         RETURN FROM CLEARP SECTION
*     PUT COMMAND PROMPT ONTO SCREEN AND PROCESS INPUT
COMMANDP SECTION
         TPUT  CPROMPT,CPROMPTL,FULLSCR,WAIT   DISPLAY CP READ PROMPT
         BAL   R14,TIMESET             DISPLAY TIME
         TGET  COMMAND,256             GET CP COMMAND
         LR    R8,R1                   SAVE LENGTH OF COMMAND
         LTR   R1,R1                   IF NO COMMAND THEN
         BZ    RETURN                     BRANCH TO RETURN
         ST    R8,CMDLEN               SAVE CP COMMAND LENGTH
         LA    R6,RESPONSE             LOAD R6 WITH ADDR OF RESPONSE
         MVC   0(80,R6),COMMAND        MOVE COMMAND TO RESPONSE
         LA    R6,0(R8,R6)             POINT PAST CP COMMAND
         MVI   0(R6),X'15'             MOVE HEX 15 TO END OF CP COMMAND
         LA    R9,1(R8)                LOAD R9 WITH CP COMMAND LENGTH+1
         BAL   R14,DISPLAY             PERFORM DISPLAY OF CP COMMAND
         L     R8,CMDLEN               RELOAD CP COMMAND LENGTH
         TPUT  CMDCLR,CMDCLRL,FULLSCR,WAIT    CLEAR COMMAND PROMPT
         OC    COMMAND,MASK            CHANGE CP COMMAND TO UPPERCASE
         AUTHON                         REQUEST AUTH
         MODESET KEY=ZERO,MODE=SUP      GET KEY ZERO AND SUPV STATE
         ICM   R8,8,FLAGRESP            INDICATE RESPONSE
         LH    R9,=H'4096'              GET LENGTH OF RESP BUF
         LRA   R7,RESPONSE              GET REAL ADDR OF RESPONSE
         LRA   R6,COMMAND               GET REAL ADDR OF COMMAND
         DC    X'83680008'              DIAGNOSE HEX 08 USING R6,R8
         MODESET KEY=NZERO,MODE=PROB    RETURN TO USER KEY AND STATE
         AUTHOFF                        REQUEST NO AUTH
COMMANDP EXITP                          RETURN FROM THIS SECTION
*        SECTION TO DISPLAY RESPONSE OUTPUT
DISPLAY  SECTION
         L     R6,BUFFERA               LOAD ADDR OF GETMAINED STORAGE
         MVC   0(3,R6),=X'27F1C2'       MOVE 3270 SETUP STRING TO BUF
         LA    R5,3                     USE REG5 FOR BUFFER LENGTH
         LA    R6,3(R6)                 POINT PAST 3270 SETUP STRING
         LA    R8,RESPONSE              LOAD RESPONSE ADDR AS POINTER
         LA    R7,RESPONSE              LOAD RESPONSE ADDR AS POINTER
         XR    R10,R10                  CLEAR REG 10
CHKNEXT  CLI   0(R8),X'15'              CHECK FOR END OF LINE
         BE    PUTIT                    YES THEN SAVE LINE
         LA    R10,1(R10)               ADD 1 TO COUNTER
         LA    R8,1(R8)                 POINT TO NEXT CHARACTER
         BCTR  R9,0                     SUBTRACT 1 FROM CHAR COUNT
         LTR   R9,R9                    IS IT ZERO?
         BZ    DISPIT                     YES THEN END OF RESPONSE
         B     CHKNEXT                  CHECK NEXT CHARACTER
PUTIT    CLI   0(R3),X'00'              IS THIS END OF SCREEN
         BNE   PUTL1                     NO THEN CONTINUE
         BAL   R14,MOREDATA              YES THEN DISPLAY MORE...
PUTL1    EX    R10,PUTMOVE              MOVE RESPONSE LINE TO BUFFER
         MVC   0(3,R6),0(R3)            MOVE SBA TO BUFFER
         LA    R6,3(R10,R6)             POINT TO NEXT FREE BUFFER AREA
         LA    R5,3(R10,R5)             ADD TO BUFFER COUNTER
         LA    R3,3(R3)                 POINT TO NEXT SBA
         XR    R10,R10                  ZERO REG10
         LA    R8,1(R8)                 POINT TO NEXT CHAR
         LR    R7,R8                    POINT TO START OF NEXT LINE
         BCTR  R9,0                     SUBTRACT ONE FROM COUNT
         LTR   R9,R9                    IS IT ZERO?
         BZ    DISPIT                     YES THEN DISPLAY RESPONSE
         B     CHKNEXT                  GO CHECK NEXT CHARACTER
PUTMOVE  MVC   3(0,R6),0(R7)            MOVE RESPONSE LINE INTO BUFFER
*        DISPLAY THE RESPONSE BUFFER
DISPIT   L     R6,BUFFERA               LOAD REG6 WITH ADDR OF BUFFER
         TPUT  (R6),(R5),FULLSCR,WAIT   AND DISPLAY BUFFER USING REG5
*                                         FOR LENGTH OF BUFFER
DISPLAY  EXITP
*        MORE DATA IN RESPONSE BUFFER THAN DISPLAYABLE ON ONE SCREEN?
MOREDATA SECTION
         L     R6,BUFFERA                      LOAD ADDR OF BUFFER
         TPUT  (R6),(R5),FULLSCR,WAIT          PUT RESPONSE ON SCREEN
         TPUT  MORE,MOREL,FULLSCR,WAIT         SIGNAL MORE TO COME
         TGET  COMMAND,80,ASIS,WAIT            WAIT FOR ENTER/CLEAR
         LA    R3,ADDRLIST                     POINT TO FIRST SBA
         TPUT  CLEAR,CLEARL,FULLSCR,WAIT       CLEAR SCREEN
         TPUT  CPROMPT,CPROMPTL,FULLSCR,WAIT   PUT PROMPT ON SCREEN
         L     R6,BUFFERA                      LOAD TO START OF BUFFER
         MVC   0(3,R6),=X'27F1C2'              MOVE 3270 SETUP STRING
         LA    R5,3                            USE REG5 AS COUNTER
         LA    R6,3(R6)                        POINT PAST 3270 SETUP
MOREDATA EXITP
TIMESET  SECTION
         TIME  DEC                      GET DATE AND TIME
         ST    R0,ATIME                 CONVERT TIME
         MVC   TIME,TIMEMASK            MOVE MASK
         ED    TIME,ATIME               EDIT TIME
         MVC   TIME+9(3),=CL3' '        CLEAR TH
         CLI   TIME+1,X'40'             LESS THEN 10 HOURS ?
         BNE   *+8                      NO, CONTINUE
         MVI   TIME+1,X'F0'             ZERO FIRST DIGIT OF HOUR
         MVC   RESPONSE(TPROMPTL),TPROMPT
         LA    R9,TPROMPTL
         BAL   R14,DISPLAY
TIMESET  EXITP
RETURN   CNOP   0,4                    EXIT
         L      13,SAVEAREA+4            PROGRAM
         LM     14,12,12(13)               WITH
         SR     15,15                        RETURN
         BR     14                             CODE=0
CMDLEN   DC    F'0'                    FULLWORD FOR CP COMMAND LENGTH
BUFFERA  DC    F'0'                    ADDRESS OF GETMAINED SCREEN BUF
TIMEMASK DC    XL12'4021204B20204B20204B2020' TIME PATTERN
ATIME    DC    F'0'                     ACTUAL TIME
TPROMPT  DC    C'R; T=0.01/0.01'
TIME     DC    CL12' '                  ACTUAL TIME
         DC    X'15'
TPROMPTL EQU   *-TPROMPT
COMMAND  DC    CL256' '                CP COMMAND AREA
FLAGRESP DC    X'40'                   FLAG DIAGNOSE TO RETURN DATA
MASK     DC    CL50' '                 MASK FOR UPPERCASE TRANSLATE
ADDRLIST DC  X'114040'                 SBA FIRST LINE
         DC  X'114150'                 .
         DC  X'114260'                 .
         DC  X'114370'                 .
         DC  X'114540'                 .
         DC  X'114650'                 .
         DC  X'114760'                 .
         DC  X'114870'                 .
         DC  X'114A40'                 .
         DC  X'114B50'                 .
         DC  X'114C60'                 .
         DC  X'114D70'                 .
         DC  X'114F40'                 .
         DC  X'115050'                 .
         DC  X'115160'                 .
         DC  X'115270'                 .
         DC  X'115440'                 .
         DC  X'115550'                 .
         DC  X'115660'                 .
         DC  X'115770'                 .
         DC  X'115940'                 .
         DC  X'115A50'                 SBA LAST LINE
         DC  X'000000'                 SBA DELIMTER FLAG
CLEAR    DC    X'27F5C2114040'         3270 CLEAR SCREEN
CLEARL   EQU   *-CLEAR
MORE     DC    X'27F1C2'               3270 STRING FOR MORE...
         DC    X'115D6A1D60',C'MORE...'
MOREL    EQU   *-MORE
CPROMPT  DC    X'27F1C2115B5F1DC413',C'                   ',X'1D60'
         DC    X'115D6B',C'CP READ > VM/XA SF'     CP COMMAND PROMPT
CPROMPTL EQU   *-CPROMPT
CMDCLR   DC    X'27F1C2115B5F1DC413',C'                   ',X'1D60'
         DC    X'115D6B',C'RUNNING'          CP COMMAND PROMPT CLEAR
CMDCLRL  EQU   *-CMDCLR
         LTORG
SAVEAREA DC     18F'0'
         DS    0D
RESPONSE DC    16XL256'00' AREA FOR DIAGNOSE RESPONSE
         END   VM


GIO INTERNAL MACROS

These two macros are used at our installation to make the code
more readable.

SECTION

         MACRO
&NAME    SECTION
         DC     F'0'
&NAME    ST     R14,*-4
         MEND

EXITP

         MACRO
&NAME    EXITP
         L      R14,&NAME-4
         BR     R14
         MEND


Wayne MacDonald
Systems Programmer
GIO (Australia)                                          c Xephon 1992

