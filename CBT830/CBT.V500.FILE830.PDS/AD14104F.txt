3495 library management services REXX interface

      CALL LMSRGET(volser)

      SAY LMSRGET(volser)

      CALL LMSRGET('WHAT')

THE ASSEMBLER CODE FOR LMSRGET

**********************************************************************
* LMSRGET:      THIS MODULE IS A REXX FUNCTION WHICH PERMITS THE
*               RETRIEVAL OF INFORMATION FROM THE TCDB.
* ASSEMBLY:     THIS MODULE SHOULD BE LINKED RENT,REUS
* EXECUTION:    CALL LMSRGET(XXXXXX)
*               WHERE XXXXXX IS A VOLUME SERIAL NUMBER OR THE
*               CHARACTER LITERAL 'WHAT'. IF WHAT IS USED A REXX
*               VARIABLE CALLED WHAT IS CREATED/MODIFIED WHICH CONTAINS
*               A LIST OF ALL THE REXX VARIABLES THAT WOULD BE CREATED
*               IF A SIX-CHARACTER VOLUME SERIAL NUMBER WAS USED. THIS
*               LIST IS SEPARATED BY SPACES TO ALLOW THE CALLER TO
*               PARSE THE LIST FOR POSSIBLE SUBSEQUENT USE.
* ERRORS:       IF AN ERROR OCCURS ACCESSING THE TCDB, OR INVALID
*               INFORMATION IS SUPPLIED, THEN RC WILL BE SET TO 99.
*               IF AN UNUSUAL ERROR OCCURS OUTPUTTING INFORMATION TO
*               REXX ETC THEN A USER ABEND CODE WILL BE SET. IT WILL BE
*               A UNIQUE NUMBER THAT CORRESPONDS TO THE VARIABLE BEING
*               OUTPUT.
* MODIFICATION: IF THE SUPPLIED INFORMATION IS INSUFFICIENT OR TOO
*               MUCH, THIS CAN BE QUICKLY CHANGED USING THE NEXTVAR
*               MACRO. FORMAT NEXTVAR XXXXXX,UNIQUE=YES/NO
*               WHERE XXXXXX IS THE VALUE TO BE RETURNED FROM THE
*               TAPE VOLUME INFORMATION MAPPING (TVI) AND UNIQUE IS
*               A PARAMETER TO ALLOW FOR OTHER VARIABLES TO BE SUPPLIED
*               IN THAT SETTING IT TO NEW REGENERATES THE STARTER
*               CODE FOR THE REXX INFORMATION.
**********************************************************************
         MACRO
&LABEL   NEXTVAR &VAR,&UNIQUE=NO
         LCLC  LABCHECK
TEMPL    LOCTR
         AIF   (D'WHAT).NOWHAT
WHAT     DS    0H
WHATL    LOCTR
WHATLEN  EQU   *-WHAT
TEMPL    LOCTR
&LABCHECK SETC '@&VAR'
         AIF   (D'&LABCHECK).NOTAGAIN
@&VAR    DC    C'&VAR'
         DC    C' '
&INLEN   SETA  K'&VAR
@EQ&VAR  EQU   &INLEN
LMSRGET  LOCTR
         AIF   (T'&LABEL EQ 'O').NOTMORE
&LABEL   DS    0H
         AIF   ('&UNIQUE' EQ 'NO').BYST
         LA    R6,COMSHVB              * R6 --> A(SHVBLOCK AREA)
         USING SHVBLOCK,R6
         ST    R10,COMRET              * STORE ENVBLOCK ADDRESS (R10)
         XC    COMSHVB(SHVBLEN),COMSHVB * INITIALIZE SHVBLOCK
         MVI   SHVCODE,C'S'             * SET FUNCTION CODE - 'SET'
***********************************************************************
*        BUILD IRXEXCOM PARAMETERS
***********************************************************************
         XC    SHVNEXT,SHVNEXT          * RESET POINTER
         LA    R5,@&VAR
         ST    R5,SHVNAMA               * STORE ADDRESS OF NAME
         LA    R5,@EQ&VAR
         ST    R5,SHVNAML               * STORE NAME LENGTH
         LA    R5,&VAR
         ST    R5,SHVVALA               * STORE VARIABLE VALUE
         AIF   ('&VAR' EQ 'WHAT').DOWHAT
         LA    R5,L'&VAR                * STORE VARIABLE LENGTH
         AGO   .DONORM
         LA    R5,WHATLEN
         ST    R5,SHVVALL               * STORE VALUE LENGTH
***********************************************************************
*        INVOKE IRXEXCOM TO SET VARIABLE
***********************************************************************
         LR    R0,R10                   * R0 --> A(ENVBLOCK)
         LA    R1,COMS                  * R1 --> A(PARM ADDR LIST)
         L     R15,IRXEXCOM             * R15 --> A(IRXEXCOM)
         BALR  R14,R15                  * CALL ROUTINE
         LTR   R15,R15                  * SET OK ?
         BZ    EOF&SYSNDX               * --> YES? - END THIS VAR
         AGO   .ABEND
         LA    R1,@&VAR                 * SPECIAL ABEND ROUTINE
         ABEND &SYSNDX                  * ABEND EQUATES TO NUMBER OF MACRO
EOF&SYSNDX DS  0H
         MEND
LMSRGET  TITLE 'REXX FUNCTION TO RETRIEVE TCDB INFORMATION'
LMSRGET  AMODE 31
LMSRGET  RMODE ANY
LMSRGET  CSECT
         REGS
         BAKR  14,0
         LR    12,15
         USING LMSRGET,12
         LR    R10,R0                   * R10 --> A(ENVIRONMENT BLOCK)
         USING ENVBLOCK,R10
         LR    R11,R1                   * R11 --> A(PARAM LIST (EFPL))
         USING EFPL,R11
         L     R9,ENVBLOCK_IRXEXTE      * R9 --> A(EXTERNAL EP TABLE)
         USING IRXEXTE,R9
         L     R6,EFPLARG               * R6 --> A(ARGUMENT TABLE)
         USING ARGTABLE_ENTRY,R6
         L     R7,EFPLEVAL
         L     R7,0(R7)                 * R7 --> A(EVALUATION BLOCK
         USING EVALBLOCK,R7
* GET STORAGE FOR REXX DETAILS
         STORAGE OBTAIN,LENGTH=COMSLEN,ADDR=(8)
         USING COMSDS,R8
* PREPARE THE REXX AREA FOR USE
         XC    COMS(COMSLEN),COMS      * SET TO LOW VALUES
         LA    15,COMID
         ST    15,COMS
         LA    15,COMDUMMY
         ST    15,COMS+4
         ST    15,COMS+8
         LA    15,COMSHVB
         ST    15,COMS+12
         LA    15,COMRET
         ST    15,COMS+16
         OI    COMS+16,X'80'           * INDICATE END OF PARMS
         MVC   COMID,=C'IRXEXCOM'
         CLC   ARGTABLE_ARGSTRING_PTR(8),=2F'-1' * END OF ARGS?
         BE    RC99                    * YES SO 99 RCODE
         L     R2,ARGTABLE_ARGSTRING_PTR         * R2 --> A(ARGUMENT)
         L     R1,ARGTABLE_ARGSTRING_LENGTH      * R1 --> L(ARGUMENT)
* THE SUPPLIED VARIABLE CAN ONLY BE 4 OR 6 CHARACTERS LONG
* ANY OTHER VALUE IS AN ERROR.
         C     R1,=F'4'                * IS THE LENGTH EQ 4
         BE    WHATCHK                 * YES, CHECK FOR WHAT.
         C     R1,=F'6'                * IS THE LENGTH EQ 6
         BE    VOLCHK                  * YES, CHECK VOLSER
         B     RC99                    * RUBBISH PARMS, EXIT 99
WHATCHK  DS    0H
         CLC   =C'WHAT',0(2)           * WAS THE VOLSER WHAT
         BNE   RC99                    * NO SO ISSUE AN ERROR
         NEXTVAR WHAT,UNIQUE=YES
         MVC   RC,=C'00'               * SET RC TO ZERO
         MVC   RCREASON,REASONWH       * AND REASON INFO
         B     RETURN                  * RETURN TO CALLER
VOLCHK   DS    0H
         C     R1,=F'6'  * VALID VOLSER?
         BNE   RC99    * NO SO ERROR
         STORAGE OBTAIN,LENGTH=MYLEN,ADDR=(3)
         USING LCSPL,3
         MVI   LCSPLAREA,C'Y'          * KEEP TRACK OF GOTTEN AREAS
* INITIALIZE THE LCSPL FOR THE CBRXLCS CALL
         MVC   0(LCSPOLEN,3),MYSTAT
         LA    R4,LCSPOLEN(,3)
         MVC   0(LCSPILEN,4),MYSTAT+LCSPOLEN
         LA    R4,LCSPILEN(,4)
         MVC   0(LCSPDLEN,4),MYSTAT+LCSPOLEN+LCSPILEN
         LA    R4,LCSPDLEN(,4)
         MVC   0(LCSPELEN,4),MYSTAT+LCSPOLEN+LCSPILEN+LCSPDLEN
* NEED TO APF AUTHORIZED FOR THIS, SO USE IN-HOUSE SVC TO
* TEMPORARILY AUTHORIZE.
         SVC   235
         CBRXLCS TYPE=TAPE,FUNC=QVR,VOLUME=(2),VOLINFO=YES,MF=(E,LCSPL)
* NOW DE-AUTHORIZE USING COMPLEMENTARY IN-HOUSE SVC
         SVC   236
         CLC   LCSRCODE,=F'0'           * ALL DATA OK?
         BH    WASIT4                   * NO, BUT WAS SOME RETURNED
         MVC   RCREASON,REASON00        * ALL SYSTEMS AOK.
         MVC   RC,=C'00'                * SO SET ZERO RC
         B     ONTCDB                   * AND RETURN TCDB INFO.
WASIT4   DS    0H
         CLC   LCSRCODE,=F'4' * SOME DATA PROVIDED BUT ANOMALY DETECTED
         BH    RC98           * NO MORE SEVERE, SO OUT.
* RETURN CODE IS 4 THEREFORE CHECK LCSREAS FOR WHY.
* HAVING FIRST SET AN RC OF 4.
         MVC   RC,=C'04'
         CLC   LCSREAS,=F'52'
         BE    REAS52
         CLC   LCSREAS,=F'61'
         BE    REAS61
         CLC   LCSREAS,=F'63'
         BE    REAS63
         CLC   LCSREAS,=F'70'
         BE    REAS70
* IF PROGRAM REACHES HERE, THEN A REASON CODE WHICH IS NOT LISTED
* IN THE OAM PISA FOR TAPE MANUALS HAS BEEN DETECTED.
* THEREFORE SET A RC OF 8 WITH A SUITABLE REASON DESCRIPTION
         MVC   RCREASON,REASONUK        * SET INFORMATION
         B     RC12
REAS52   DS    0H
         MVC   RCREASON,REASON52
         B     ONTCDB
REAS61   DS    0H
         MVC   RCREASON,REASON61
* REASON 63 IS UNIQUE AS IT MEANS NO VOLUME INFORMATION AT ALL
* THEREFORE SET RC 8
REAS63   DS    0H
         MVC   RCREASON,REASON63
         B     RC8
REAS70   DS    0H
         MVC   RCREASON,REASON70
* EXTRACT INFORMATION FROM THE TVI AND RETURN IT TO THE CALLER
ONTCDB   DS    0H
         L     R4,LCSTVI@
         USING TVI,4
         NEXTVAR TVISTGRP,UNIQUE=YES
         NEXTVAR TVIUSEA
         NEXTVAR TVILOC
         NEXTVAR TVICREAT
         NEXTVAR TVIENTEJ
         NEXTVAR TVIMOUNT
         NEXTVAR TVIWRITE
         NEXTVAR TVILCAT
         NEXTVAR TVIMEDTY
         NEXTVAR TVISTAT
         B     RETURN
RC8      DS    0H
         MVC   RC,=C'08'
         B     RETURN
RC12     DS    0H
         MVC   RC,=C'12'
         B     RETURN
RC98     DS    0H
         MVC   RC,=C'98'
         MVC   RCREASON,REASON98
         B     RETURN
RC99     DS    0H
         MVC   RC,=C'99'
         MVC   RCREASON,REASON99
         B     RETURN
*      RETURN TO CALLER
*      RELEASING ALL GETMAIN STORAGE IN THE PROCESS.
RETURN   DS    0H
         NEXTVAR RCREASON,UNIQUE=YES
         NEXTVAR RC
* SET THE EVALUATION BLOCK TO RCREASON
         MVC   EVALBLOCK_EVLEN,=F'2'   * SET RC AS FUNCTION
         MVC   EVALBLOCK_EVDATA(2),RC  * RESULT
         CLI   LCSPLAREA,C'Y'          * DOES THE LCSPL NEED FREEING
         BNE   NONEED                  * NO, JUST RELEASE THE REXX BIT
         STORAGE RELEASE,LENGTH=MYLEN,ADDR=(3)
NONEED   DS    0H
         STORAGE RELEASE,LENGTH=COMSLEN,ADDR=(8)
         XR    15,15
         PR    * RETURN TO CALLER
***********************************************************************
***      WORKING STORAGE ETC.                                       ***
***********************************************************************
         LTORG
REASON00 DC    CL50'TAPE ON TCDB AND LIBRARY MANAGER'
REASON52 DC    CL50'TAPE IS SHELF RESIDENT. TCDB INFO SUPPLIED'
REASON61 DC    CL50'TCDB INFO ONLY. UNABLE TO ACCESS LIBRARY MANAGER'
REASON63 DC    CL50'TAPE NOT FOUND IN TCDB OR LIBRARY MANAGER'
REASON70 DC    CL50'TAPE NOT FOUND IN LIBRARY MANAGER. TCDB INFO ONLY'
REASON98 DC    CL50'ERROR IN LCS SERVICES. NO DATA RETURNED'
REASON99 DC    CL50'INCORRECT DATA SUPPLIED TO LMSRGET'
REASONUK DC    CL50'UNKNOWN REASON CODE. REFER TO MANUAL'
REASONWH DC    CL50'LIST OF VARIABLES SUPPLIED IN VARIABLE WHAT'
MYLEN    EQU   LCSPOLEN+LCSPILEN+LCSPDLEN+LCSPELEN
* CREATE MAPPING LIST FOR LCSPL CALL
         CBRXLCS MF=(L,MYSTAT)
***********************************************************************
***      IRXEXCOM PARAMETER AREA                                    ***
***********************************************************************
COMSDS   DSECT
COMS     DS    5AL4
COMID    DS    CL8              * IRXEXCOM ID - C'IRXEXCOM'
COMDUMMY DS    AL4              * NOT USED
COMSHVB  DS    (SHVBLEN)X       * IRXEXCOM SHVBLOCK (LENGTH FROM DSECT)
COMRET   DS    AL4              * IRXECOM RC
RC       DS    CL2              * NOT REALLY REXX, BUT NEEDS TO BE
*                               * IN A GOTTEN AREA.
RCREASON DS    CL50             * RC REASON DESCRIPTION
LCSPLAREA DS   C
COMSLEN  EQU   *-COMS
         DS    0D
         IRXEFPL
         IRXARGTB
         IRXEVALB
         IRXENVB
         IRXEXTE
         IRXSHVB
         CBRLCSPL
         CBRTVI
         END


Systems Programmer (UK)                                                        c

