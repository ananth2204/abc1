Obtaining and freeing main storage in REXX


Problem addressed

The REXX language provides a large library of functions.
This library includes a function to access main storage directly
(the STORAGE function).  However, there is no direct way of
allocating main storage from REXX - the following
GETMAIN function addresses this problem.


A DESCRIPTION OF THE GETMAIN FUNCTION

The GETMAIN function has two sub-functions:

o      OBTAIN, which allocates a block of main storage.

o      RELEASE, which releases (ie frees) a previously allocated
      main storage block.

The main storage blocks are allocated above the 16-megabyte
address line in subpool 1.  The MVS STORAGE service is
used both to allocate and deallocate main storage.


Calling sequence

To allocate a main storage block, code:

      addr = GETMAIN('OBTAIN',length);

where OBTAIN is the function to be performed (as usual for
REXX functions, only the first character is used, ie 'O' is also
valid), length is the number of bytes to be allocated, and addr
is returned with the decimal (start) address of the allocated
main storage block.

To free a previously allocated main storage block, code:

      frc = GETMAIN('RELEASE',addr,length);

where RELEASE is the function to be performed (only the first
character is used, ie 'R' is also valid), addr is the decimal
(start) address of the main-storage block to be released, length
is the number of bytes to be released, and frc is the function
return code.

Note that part of an allocated block can be released.

The standard REXX function value -3 indicates that REXX
detected an error condition while trying to perform the function
(eg the function could not be located).


Example

/* REXX - GETMAIN test  */
/* allocate 4000 bytes of storage */
addr = GETMAIN('OBTAIN',4000);
SAY addr /* display decimal address */
caddr = D2C(addr,4); /* binary address */
xaddr = C2X(caddr); /* hex address */
/* set data into allocated storage area */
x  = STORAGE(xaddr,5,"alpha");
fld = STORAGE(xaddr,5);
SAY fld /* display stored data */
/* release allocated storage */
frc = GETMAIN('RELEASE',4000,addr);
SAY frc /* display function return code */

GETMAIN program code

         TITLE 'REXX OBTAIN/RELEASE storage'
* Calling sequence:
* >>---STORAGE(-+-OBTAIN,length----------+-)---<<
*               +-RELEASE,length,address-+
* Function value:
*  normal return:
*   >0 - address of allocated area
*  error return:
*   -1 - operation error (not 'O' or 'R')
*   -2 - length error
*   -4 - address error
*   -5 - RELEASE error
*   -6 - OBTAIN error
GETMAIN  CSECT
* initialize addressing
         STM   R14,R12,12(R13)         save registers
         BALR  R12,0                   base register
         USING *,R12
         LA    R15,SA                  A(save-area)
         ST    R13,4(R15)              backward ptr
         ST    R15,8(R13)              forward ptr
         LR    R13,R15                 A(new save-area)
         B     SA_END                  jump over save-area
SA       DS    18A                     save-area
SA_END   DS    0H
         USING EFPL,R1
         L     R2,EFPLEVAL       PTR(Evaluation Block)
         L     R11,0(R2)         A(Evaluation Block)
         USING EVALBLOCK,R11
         L     R10,EFPLARG        A(parsed Argument List)
         USING ARGTABLE_ENTRY,R10
         LA    R10,ARGTABLE_ARGSTRING_PTR
* get "operation"
         LM    R3,R4,0(R10)
* R3: A(argument), R4: L(argument)
         MVC   ERRCODE,=CL2'-1'   preset ReturnCode (=error)
         LTR   R4,R4
         BM    ERROR              "operation" missing
         BZ    ERROR              null "string"
         MVI   FLAG,0
         CLI   0(R3),C'O'
         BNE   *+8
         OI    FLAG,@OBTAIN
         CLI   0(R3),C'R'
         BNE   *+8
         OI    FLAG,@RELEASE
         CLI   FLAG,0
         BE    ERROR              no valid operand
* get "length"
         MVC   ERRCODE,=CL2'-2'   preset ReturnCode (=error)
         LM    R5,R6,8(R10)
         LTR   R6,R6
         BM    ERROR              "parameter" missing
         BZ    ERROR              null "string"
         BCTR  R6,0               LengthCode
         EX    R6,EXPACK
         CVB   R7,D
         LTR   R7,R7
         BZ    ERROR              null "value"
         TM    FLAG,@OBTAIN
         BO    A100
* else RELEASE
* get  "address" (RELEASE)
         MVC   ERRCODE,=CL2'-4'   preset ReturnCode (=error)
         LA    R10,8(R10)
         LM    R5,R6,8(R10)
         LTR   R6,R6
         BM    ERROR              "parameter" missing
         BZ    ERROR              null "string"
         BCTR  R6,0               LengthCode
         EX    R6,EXPACK
         CVB   R5,D
         LTR   R5,R5
         BZ    ERROR              null "value"
         STORAGE RELEASE,LENGTH=(7),ADDR=(5),RTCD=RC,COND=YES,SP=1
         LA    R1,1
         MVI   EVALBLOCK_EVDATA,C'0'
         LTR   R15,R15
         BZ    A110
         MVC   ERRCODE,=CL2'-5'   RELEASE error
         B     ERROR
A100     MVC   ERRCODE,=CL2'-6'   preset ReturnCode (=error)
         STORAGE OBTAIN,LENGTH=(7),ADDR=(5),SP=1,LOC=ANY
         CVD   R5,D
         OI    D+7,X'0F'
         UNPK  EVALBLOCK_EVDATA(15),D
         LA    R1,15
A110     ST    R1,EVALBLOCK_EVLEN   entry size
         LTR   R15,R15
         BNZ   ERROR
EOJ      DS    0H                      job end
         L     R13,4(R13)              restore A(old save-area)
         RETURN (14,12),RC=0
ERROR    LA    R15,2              length
         ST    R15,EVALBLOCK_EVLEN   entry size
         MVC   EVALBLOCK_EVDATA(2),ERRCODE
         B     EOJ
RC       DS    F
ERRCODE  DS    H
FLAG     DS    X
@OBTAIN  EQU   X'01'
@RELEASE EQU   X'02'
EXPACK   PACK  D,0(0,R5)
D        DS    0D,PL8
         TITLE 'DSECTS'
         IRXEFPL
         IRXEVALB
         IRXARGTB
         END


A S Rudd
Technical Consultant (Germany)                        c A S Rudd 1991

