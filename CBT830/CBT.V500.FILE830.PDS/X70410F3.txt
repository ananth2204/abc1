A fully secure APF authorization SVC

In recent years there have been many examples given of how to
code an SVC to make a program authorized when running in an
unauthorized environment.  IBM started all this with an
example in the ISPF/PDF installation manual, but the caller
was required to be in the LPA.  This technique, although
secure, was quickly abused by many people who removed the
check on the calling module being LPA resident and instead
risked their entire installation's security in the hope that no-one
would discover and misuse the unprotected version of this
SVC.

The next development was to produce elaborate and often
imperfect methods of limiting the callers to certain module
names, or having special values in registers when issuing the
SVC and so forth.  This often meant updating the SVC to allow
additional programs to use it.

Fundamentally, the requirement for the following SVC is to
authorize a system program that would otherwise run
authorized but that finds itself invoked under an unauthorized
environment such as IMS, CICS, or ISPF.  All that is actually
necessary to ensure security is to check whether the program
came from an APF-authorized library and would therefore run
authorized if it were not for the current unauthorized
environment.  This can be done by examining the control
blocks relating to the issuer of the SVC.  By locating the
Contents Directory Entry (CDE), a flag is available to indicate
that the module was loaded from an APF-authorized library
(including the authorized LINKLIST).  LPA modules are
assumed (by MVS) to be from an authorized library.

IBM adopts a similar technique in the SDSF module ISFSVC
and hopefully this method will provide a lasting, secure, and
simple solution to this long-standing APF problem.  Issue the
SVC below after loading register one with the value 1 or 0.

If a program may sometimes run in an authorized environment
and sometimes in a unauthorized environment, use the
TESTAUTH macro to determine whether to acquire APF
dynamically or not.

The code below is all that is needed and takes advantage of the
register contents on SVC entry (the example uses the type 3/4
SVC 235).  Note that correct DSECT labels have been used
throughout which helps document the code and adapts to
control block changes.

Example of use in a program

*entry code here
         MVI    GOT,0          Default (GOT is single byte X)
         TESTAUTH FCTN=1       Is module APF anyway
         LTR    R15,R15        Test result
         BZ     SKIP1          Yes, already APF
         LA     R1,1           No, Request APF on
         SVC    235            Issue SVC
         LTR    R15,R15        Test result
         BNZ    FAIL           Cannot obtain APF
         MVI    GOT,1          Flag set
SKIP1    EQU    *
* main code here
         CLI    GOT,1          Flag set
         BNE    SKIP2          no
         LA     R1,0           Request APF off
         SVC    235            Issue SVC
SKIP2    EQU    *
*exit code here
FAIL     EQU    *
*failure of APF here

Source of SVC

IGC0023E CSECT
* SVC 235, APF ON IF ISSUED WITH R1=1, OR APF OFF IF R1=0
         USING  IGC0023E,R6    ADDRESS MODULE ENTRY POINT
         LA     R15,8          BAD RC 8 DEFAULT
         USING  RBBASIC,R5     ADDRESS THIS SVRB
         L      R5,RBLINK      ADDRESS PREVIOUS RB
         TM     RBSTAB,RBFTP   IS THIS A PRB?
         BNZ    EXIT           NO, NOT VALID USE OF SVC
         L      R9,RBCDE       CDE FOR CALLING MODULE
         USING  CDENTRY,R9     ADDRESS CDE
         TM     CDATTR2,CDSYSLIB  FROM AN APF AUTHORIZED LIBRARY?
         BNO    EXIT           NO, DO NOT PROCESS
* CALLER IS A MODULE FROM AN APF AUTHORIZED LIBRARY
         USING  TCB,R4         ADDRESS TCB
         L      R2,TCBJSCB     JSCB ADDRESS
         USING  IEZJSCB,R2     ADDRESS JSCB
         LTR    R1,R1          TEST OPTION REG 1
         BZ     APFOFF         0 IS APF OFF, 1 IS APF ON
* SET APF ON
         OI     JSCBOPTS,JSCBAUTH  SET APF BIT ON
         B      OUT
APFOFF   EQU    *
         NI     JSCBOPTS,X'FF'-JSCBAUTH  SET APF BIT OFF
OUT      EQU    *
         LA     R15,0          RETURN CODE 0
EXIT     EQU    *
         BR     R14            EXIT
         YREGS
         LTORG
         IKJRB
         IHACDE
         IKJTCB DSECT=YES
         IEZJSCB
         END


                              â‚¬ Xephon 1990

