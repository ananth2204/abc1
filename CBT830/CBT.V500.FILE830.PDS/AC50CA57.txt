Automating LLA refresh


INTRODUCTION

I read with interest the article in the April 1993 issue of MVS
Update entitled VLF/LLA performance and functionality. It
presented an interesting way to ensure LLA refreshes take
place by front-ending the STOW SVC to capture all PDS
update activity. Unfortunately, the front-end code is invoked
for any STOW activity whether the dataset is LLA-managed or
not and the LLACOPY is performed for every module sent
through the front-end. Both of these cause some unnecessary
overhead. The front-end also relies on the availability of a slot
in the SVRB register save area to save status, which may be
subject to change in future releases of MVS.


OUR SOLUTION

At my installation, we had the same concerns about catching
updates to LLA-managed libraries. We took the position that
for libraries in the LINKLIST, since the MVS systems
programmers maintained the LINKLIST libraries, they could
also issue MVS F LLA,REFRESH commands when necessary
to refresh the modules. Since the F LLA,REFRESH reloads the
directories of all libraries in LLA and, since we needed a way
to perform cross-system notification of a member update, we
undertook the task of writing code to handle these problems.
We also planned for this facility to handle user libraries under
LLA control, so that we could place our production load library
under LLA. We have a homegrown change management
system which we are in the process of moving under the
ENDEVOR product from Legent Corporation. Our solution
would have to handle both the old and new methods of load
module migration.

We wrote a small program called LLAR, standing for
LLARefresh, which would handle issuing the LLACOPY
macro for an individual module from the LINKLIST or an
LLA-managed user library. The only parameter passed to the
program is the member name to be refreshed. The program
works by checking for the presence of a SYSLIB DD statement
as an indicator of where the member is located. If the SYSLIB
DD points to a NULLFILE, the assumption is that the member
to be refreshed is in the LINKLIST; if it is not NULLFILE,
then it is assumed that a dataset name is coded which is the
name of an LLA-managed user library. The default dataset
name which we used in our catalogued procedure is
NULLFILE; the LLA-managed user dataset name would
become an override on the procedure execution or MVS
START command invocation. The LLAR procedure is:

      //LLAR     PROC MOD=,M=,D=NULLFILE
      //LLAR     EXEC PGM=LLAR,PARM='&MOD&M'
      //SYSLIB   DD DISP=SHR,DSN=&D

and would be invoked in a batch job like this:

      //REFRESH EXEC LLAR,M=IEFBR14

or

      //REFRESH EXEC LLAR,M=USERPGM,D='USER.LIBRARY'

Note that the member name can be specified by using either the
M or MOD keywords. This batch invocation is imbedded in
our homegrown change management system when a load
module turnover takes place, thus notifying LLA of the update
to the LLA-managed user library. We are also in the process of
coding a backin/backout exit for ENDEVOR, which will
invoke or issue an MVS START for LLAR to perform the LLA
update on the new load library managed by ENDEVOR. As a
started task, the procedure would be invoked by:

      S LLAR,M=IEFBR14

or

      S LLAR,M=USERPGM,D='USER.LIBRARY'

The program points to the LINKLIST DCB or issues an OPEN
macro for the LLA-managed user library and points to its
DCB. The LLACOPY macro is issued using the member
named passed and the appropriate open DCB. A WTO is issued
with the name of the module being refreshed and the return and
reason codes which are returned by the LLACOPY macro. The
various values are shown below.

Return code 0

Operation successful.

Return code 4

Some entries were not found (see LLACOPY macro reason
code documentation).

Return code 8

I/O error or storage problem (see LLACOPY macro reason
code documentation).

Return code 12

Missing or incorrect PARM field.

o      Reason code 4 - no PARM field was specified
o      Reason code 8 - insufficient PARM field length
o      Reason code 12 - excessive PARM field length.

Return code 16

RDJFCB error.

o      RDJFCB macro return code is used as reason code (see
      RDJFCB macro return code documentation).

Return code 20

SYSLIB open error.

Return code 24

SYSLIB attribute error.

o      Reason code 4 - invalid SYSLIB DSORG
o      Reason code 8 - invalid SYSLIB RECFM.


TRAPPING THE WTO

The WTO is trapped by our console automation software,
OPS/MVS from Legent Corporation, and used to propagate the
LLA update request to all systems in our JES2 Multi-Access
Spool (MAS) complex. This is done via a message rule in the
OPS/MVS main address space which invokes a REXX program
that runs in an OPS/MVS server address space - this is done so
the main address space is not tied up issuing JES2 commands
and waiting for their response. The message rule code is as
follows:

)MSG LLR001I
)PROC
RETCODE = RIGHT(WORD(MSG.TEXT,7),2) /*CHECK RETURN CODE FROM LLAR*/
IF RETCODE ¬= '00' THEN RETURN      /*IF NOT ZERO, NOTHING DOING */
DSNNAME = WORD(MSG.TEXT,10)         /*GET DATASET NAME FROM MSG  */
MODNAME = WORD(MSG.TEXT,6)          /*GET MODULE NAME FROM MSG   */
LEN = LENGTH(MODNAME)               /*GET MODULE NAME'S LENGTH   */
IF LEN > 8 THEN DO                  /*GOOD LENGTH IS < 9 CHARS   */
  ADDRESS 'TSO'                     /*IF NOT, ISSUE MESSAGE      */
  "OPSWTO MSGID(LLR998I) TEXT("MODNAME " LENGTH EXCEEDS 8 BYTES)"
  RETURN
  END
ELSE IF LEN < 1 THEN DO              /*GOOD LENGTH IS > 0 CHARS  */
  ADDRESS 'TSO'                      /*IF NOT, ISSUE MESSAGE     */
  "OPSWTO MSGID(LLR999I) TEXT(MODULE NAME NOT SPECIFIED)"
  RETURN
  END
ADDRESS 'TSO'
"OPSIMEX SENDLLAR" DSNNAME MODNAME
RETURN
)TERM

When the message rule runs, it first checks that the return code
from the LLACOPY was 0, indicating successful completion.
If not, it terminates further processing. If the LLACOPY
worked, the rule checks the length of the member name for
validity and issues appropriate error messages, if necessary;
otherwise it invokes the OPS/MVS OPSIMEX command to run
a REXX program, passing it the module name and dataset
name, if applicable.

The REXX program is as follows:

PARM = ARG(1)                       /*GET ARGUMENTS              */
DSN = WORD(PARM,1)                  /*GET ARGUMENTS (DSNAME)     */
MOD = WORD(PARM,2)                  /*GET ARGUMENTS (MODULE NAME)*/
COMM = ";S LLAR,M='"MOD"*'"         /*SET UP BASE COMMAND STRING */
IF DSN ¬= '-LNKLST-' THEN COMM = COMM",D='"DSN"'" /*DSN IF USED  */
ADDRESS 'TSO'
"OPSCMD COMMAND('$L SYS') WAIT(30)" /*ISSUE DISPLAY FOR JOB NAME */
DO WHILE QUEUED() > 0               /*LOOP THROUGH RETURNED LINES*/
   PULL DAT                         /*GET ANOTHER LINE           */
   IF WORD(DAT,1) = '$HASP661' THEN /*PROPER LINE TO PROCESS     */
     IF WORD(DAT,3) ¬= GLOBAL.SYSINFO.SYSID THEN /*SKIP CURRENT  */
       IF WORD(DAT,4) = 'ACTIVE' THEN DO         /*CHECK ACTIV   */
         NUM = SUBSTR(WORD(DAT,2),5,1)           /*GET MEMBER NUM*/
         ADDRESS 'OPER'                          /*ISSUE COMMAND */
         "$M" || NUM || COMM
         END
   END
RETURN 0

When the REXX program runs, it issues a JES2 $LSYS
command and waits for a response to determine all the active
systems in the MAS complex. It checks a previously set up
variable called GLOBAL.SYSINFO.SYSID, which contains
the MVS SMF system-id, against the JES2 system name so it
will only send JES2 $M commands to systems other than the
one on which the REXX is currently running. The $M
commands are used to issue MVS START commands for the
LLAR started task to each system in the complex to notify
them of the member update. The REXX appends an asterisk (*)
to the member name as an indicator to the LLAR program.
This indicator tells LLAR to alter the message-id of the
message it issues from LLR001I to LLR002I to avoid the
situation of causing a loop in OPS/MVS going back and forth
constantly between all systems continually trapping LLR001I
messages and notifying other systems in the complex. The final
command issued by the REXX will look like:

      $M1;S LLAR,M=membname*

or

      $M1;S LLAR,M=membname*,D='USER.LIBRARY'

The LLAR program strips off the asterisk at the end of the
member name and alters the message issued to have the id of
LLR002I, which is not handled by automation, thus stopping
any re-propagation of information. This mechanism works for
the systems programmers also since we can issue a S
LLAR,M=modname after updating a LINKLIST resident load
module and have the update propagated to all systems.

Since we are running on MVS/ESA 3.1.3 systems, the console
automation route was deemed best to notify multiple systems.
When we become an entirely MVS/ESA 4.3 complex, which
we are currently working on, we will look at possibly
reworking this scheme to use SYSPLEX services to perform
the notification processing to all systems in the SYSPLEX as
opposed to using JES2 and OPS/MVS to notify all members of
the MAS complex.


LLAR SOURCE CODE

LLAR     CSECT                         ESTABLISH CSECT
LLAR     AMODE 31                      ADDRESSING MODE
LLAR     RMODE 24                      RESIDENCY MODE
         SAVE  (14,12),,LLAR-&SYSDATE
*        REGS                          REGISTER EQUATES MACRO
         SPLEVEL SET=3                 ASSEMBLE FOR ESA
         LR    R12,R15                 LOAD R12 W/EPA ADDRESS
         USING LLAR,R12                ESTABLISH ADDRESSABLITY
         LA    R15,SAVEAREA            LOAD A(SAVEAREA)
         ST    R13,SAVEAREA+4          STORE CALLER'S S/A ADDR IN MINE
         ST    R15,8(,R13)             STORE MY S/A ADDR IN CALLERS S/A
         LR    R13,R15                 LOAD A(MY SAVEAREA)
         LA    R11,12                  LOAD PARM ERROR RETURN CODE REG
         LA    R10,4                   LOAD NO PARM GIVEN REASON CODE
         LTR   R1,R1                   WAS THERE ANY PARM
         BZ    RETURN                  NO, GO ISSUE MSG AND RETURN
         LA    R10,8                   LOAD NO PARM LENGTH REASON CODE
         L     R1,0(,R1)               LOAD A(PARM)
         LH    R2,0(,R1)               LOAD LENGTH(PARM)
         LTR   R2,R2                   IS PARM LENGTH > 0
         BNP   RETURN                  NO, GO ISSUE MSG AND RETURN
         LA    R15,1(R2,R1)            LOAD A(LAST BYTE OF PARM FIELD)
         CLI   0(R15),C'*'             IS IT AN ASTERISK
         BNE   SETRESN                 NO, SKIP SPECIAL PROCESSING
         BCTR  R2,0                    DECREMENT LENGTH
         MVI   MESSAGE+9,C'2'          CHANGE MSG NUMBER FOR AUTOMATION
SETRESN  LA    R10,12                  LOAD EXCESSIVE LNGTH REASON CODE
         CH    R2,=H'8'                IS PARM LENGTH > 8
         BH    RETURN                  YES, GO ISSUE MSG AND RETURN
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,MOVENAME             EXECUTE MVC OF NAME PARM
***    ( MVC   MODNAME(0),2(R1) )      EXECUTED MOVE OF NAME
         OC    MODNAME,=CL8' '         MAKE PARM UPPERCASE
         RDJFCB SYSLIB                 ISSUE RDJFCB FOR SYSLIB
         LTR   R15,R15                 WAS RDJFCB SUCCESSFUL
         BZ    CHECKDSN                YES, GO PROCESS DSN
         LA    R11,16                  LOAD RETURN CODE
         LR    R10,R15                 LOAD RDJFCB RETCODE AS REASON
         B     RETURN                  GO ISSUE MSG AND RETURN
CHECKDSN LA    R1,JFCBAREA             LOAD A(JFCB)
         USING JFCBMAP,R1
         CLC   =C'NULLFILE',JFCBDSNM   IS DSN=NULLFILE
         BE    LNKLSDCB                YES, GO USE LINKLIST DCB
         MVC   MSGDSN,JFCBDSNM         MOVE DSNAME TO MESSAGE
         OPEN  (SYSLIB,INPUT)          OPEN SYSLIB
         LA    R2,SYSLIB               LOAD A(SYSLIB DCB)
         USING IHADCB,R2
         TM    DCBOFLGS,DCBOFOPN       WAS SYSLIB OPEN SUCCESSFUL
         BO    OPENOK                  YES, GO CHECK ATTRIBUTES
         LA    R11,20                  LOAD RETURN CODE
         LA    R10,4                   LOAD REASON CODE
         B     RETURN                  GO ISSUE MSG AND RETURN
OPENOK   OI    FLAGS,OPENDONE          INDICATE OPEN DONE
         TM    DCBDSRG1,DCBDSGPO       IS DSORG=PO
         BO    CHKRECFM                YES, GO CHECK RECFM
         LA    R11,24                  LOAD RETURN CODE
         LA    R10,4                   LOAD REASON CODE
         B     RETURN                  GO ISSUE MSG AND RETURN
CHKRECFM TM    DCBRECFM,DCBRECU        IS RECFM=U
         BO    GOSUPVSR                YES, DCB LOADED-GO MODESET
         LA    R11,24                  LOAD RETURN CODE
         LA    R10,8                   LOAD REASON CODE
         B     RETURN                  GO ISSUE MSG AND RETURN
LNKLSDCB MVC   MSGDSN,LNKLSDSN         MOVE DSNAME TO MESSAGE
         L     R2,CVTPTR               LOAD A(CVT)
         USING CVT,R2
         L     R2,CVTLINK              LOAD A(LINKLIST DCB)
GOSUPVSR MODESET MODE=SUP              SWITCH TO SUPERVISOR STATE
         LLACOPY BLDLLIST=BLDLLIST,DCB=(R2) REFRESH LLA ENTRY
         LR    R10,R0                  SAVE THE LLACOPY REASON CODE
         LR    R11,R15                 SAVE THE LLACOPY RETURN CODE
         MODESET MODE=PROB             RETURN TO PROBLEM STATE
         TM    FLAGS,OPENDONE          WAS OPEN DONE
         BZ    RETURN                  NO, SKIP SYSLIB CLOSE
         CLOSE (SYSLIB)                CLOSE SYSLIB
RETURN   MVC   MSGNAME,MODNAME         MOVE THE INPUT NAME
         CVD   R10,DBLWORD             CONVERT RETURN CODE TO DECIMAL
         OI    DBLWORD+7,X'0F'         FIX THE SIGN
         UNPK  MSGREAS,DBLWORD         UNPACK TO THE MESSAGE
         CVD   R11,DBLWORD             CONVERT REASON CODE TO DECIMAL
         OI    DBLWORD+7,X'0F'         FIX THE SIGN
         UNPK  MSGRC,DBLWORD           UNPACK TO THE MESSAGE
         WTO   MF=(E,MESSAGE)          WRITE THE MESSAGE
         LR    R15,R11                 SET THE RETURN CODE
         L     R13,4(,R13)             UNCHAIN SAVEAREAS
         RETURN (14,12),RC=(15)        RETURN TO CALLER
MOVENAME MVC   MODNAME(0),2(R1)        EXECUTED MOVE OF NAME
SAVEAREA DC    18F'0'                  OS SAVEAREA
DBLWORD  DC    D'0'                    CVD WORK SPACE
BLDLLIST DS    0D                      BLDL PLIST------------------|
         DC    AL2(1,12)               NUM PARMS AND LENGTH        |
MODNAME  DC    CL8' '                  MODULE NAME                 |
         DC    XL4'0'                  TTR/K-----------------------|
SYSLIB   DCB   DDNAME=SYSLIB,MACRF=E,EXLST=JFCBPTR
JFCBPTR  DS    0F                      EXLST PLIST
         DC    X'87',AL3(JFCBAREA)     EXLST FOR JFCB RETURN
JFCBAREA DC    XL(JFCBLGTH)'00'        JFCB RETURN AREA FOR EXLST
LNKLSDSN DC    CL44'-LNKLST-'
MESSAGE  WTO   'LLR001I LLAR COMPLETE FOR MODULE ???????? RC=?? RSN=?? X
               IN ????????????????????????????????????????????',       X
               ROUTCDE=2,MF=L
MSGNAME  EQU   MESSAGE+4+33,8          MESSAGE NAME TEXT
MSGRC    EQU   MESSAGE+4+45,2          RETURN CODE TEXT
MSGREAS  EQU   MESSAGE+4+52,2          REASON CODE TEXT
MSGDSN   EQU   MESSAGE+4+58,44         DATASET NAME TEXT
FLAGS    DC    X'00'                   BIT FLAGS
OPENDONE EQU   X'80'                   SYSLIB OPEN WAS PERFORMED
         PRINT NOGEN                   SUPPRESS PRINTING
         CVT   DSECT=YES,LIST=NO
         DCBD  DSORG=PO,DEVD=DA
JFCBMAP  DSECT
         IEFJFCBN LIST=NO
         END


                                                            c Xephon 1993

