Table sort macro

In Assembler language programming it is often necessary to sort
an in-storage array or table of elements.  This usually means
writing new code or adapting existing code.  To avoid both these
approaches, the following SORT macro can be used.  It can be
used to sort a table of any length that resides in contiguous
storage.  As supplied, the macro supports table entries of fixed
length (1 to 256 bytes in length).  The table is sorted in-place.

The format of the macro is as follows:
    SORT FIELD=,LEN=,ORDER=,ENTLEN=,TABADDR=,TABEND=,LAST=
The FIELD keyword is used to provide the offset of the sort field
in the table entries.  The LEN keyword specifies the length of the
sort field.  ORDER specifies A for ascending order (the default)
or D for descending order.  The ENTLEN keyword specifies the
length of the table entries.  The starting address of the table is
specified using the TABADDR keyword.  The table address can
be supplied as an Assembler label or the number of the register (in
brackets) that will contain the starting address.  The address of the
end of the table is supplied using the TABEND keyword.  Like
the TABADDR keyword, it may be specified as either a label or a
register number.  The SORT macro supports two different ways of
addressing the end of the table.  If LAST=B is specified, the
ending address must be the address of the byte immediately
following the table (this is the default).  This address is calculated
by adding the table length (in bytes) to the starting address.  If
LAST=E is specified, the address must be that of the start of the
last table entry.  This option can be used when a label is defined
on the last table entry.

The SORT macro creates unique label names and may be used
several times in the same module.

EXAMPLE ONE

*  REG 3 CONTAINS TABLE ADDRESS
*  REG 4 CONTAINS TABLE LENGTH IN BYTES
         .
         LR  R5,R3           GET TABLE ADDRESS
         AR  R5,R4           ADDRESS BYTE PASS END OF TABLE
         SORT FIELD=20,LEN=16,ENTLEN=100,TABADDR=(R3),TABEND=(R5)
         .
         .
         B   CONTINUE
*
TABLE    DSECT
         DS  CL20
         DS  CL16            SORT FIELD
         DS  CL6

EXAMPLE TWO]

         .
         .
         SORT FIELD=4,LEN=4,ENTLEN=16,TABADDR=TABLE,TABEND=LAST,LAST=E
         .
         .
         B   CONTINUE
*
TABLE    DS  F,CL4,CL8       THIS TABLE WILL BE FILLED BY THE PROGRAM
         DS  F,CL4,CL8       AND THEN SORTED IN ASCENDING ORDER BASED
         DS  F,CL4,CL8       ON THE VALUE IN THE CL4 FIELD.
LAST     DS  F,CL4,CL8

THE SOURCE CODE FOR THE SORT MACRO

         MACRO
&LABEL SORT &TABADDR=,&TABEND=,&ENTLEN=,&FIELD=,&LEN=,&ORDER=A,&LAST=B
.*
.*       SORT IN-STORAGE TABLES.
.*
.* THIS MACRO ALTERS REGISTERS 0, 1, 14 AND 15
.*
.*    TABADDR - THE STARTING ADDRESS OF THE TABLE
.*    TABEND  - THE ADDRESS OF THE BYTE IMMEDIATELY FOLLOWING THE TABLE
.*              OR IF LAST=E, THE ADDRESS OF THE START OF THE LAST
.*              TABLE ENTRY
.*    ENTLEN  - THE LENGTH OF EACH TABLE ENTRY
.*    FIELD   - THE OFFSET INTO A TABLE ENTRY OF THE SORT FIELD
.*    LEN     - THE LENGTH OF THE SORT FIELD
.*    ORDER   - A FOR ASCENDING OR D FOR DESCENDING
.*
.* MACRO WILL HAVE TO BE CHANGED IF:
.*    - MULTIPLE SORT FIELDS ARE REQUIRED WITHIN A TABLE ENTRY
.*    - TABLE ENTRIES ARE GREATER THAN 256 BYTES IN LENGTH
.*
.*
         AIF   ('TABADDR' EQ '').ERR1
         AIF   ('TABEND' EQ '').ERR2
         AIF   (T'&ENTLEN NE 'N').ERR3
         AIF   (&ENTLEN GT 256).ERR3B
         AIF   (T'&FIELD NE 'N').ERR4
         AIF   (T'&LEN NE 'N').ERR5
         AIF   ('&ORDER' NE 'A' AND '&ORDER' NE 'D').ERR6
         AIF   ('&LAST' NE 'B' AND '&LAST' NE 'E').ERR7
         AIF   (&FIELD+&LEN GT &ENTLEN).ERR8
.*
         AIF   ('&TABADDR'(1,1) EQ '(').REG1 TABADDR IN REGISTER?
         LA    14,&TABADDR            LOAD TABLE ADDRESS
         AGO   .CON1
.REG1    ANOP
         LR    14,&TABADDR            LOAD TABLE ADDRESS
.CON1    ANOP
         LR    1,14                   COPY STARTING ADDRESS
         AIF   ('&TABEND'(1,1) EQ '(').REG2 ENDING ADDR IN REGISTER?
         LA    15,&TABEND             ADDRESS END OF TABLE
         AGO   .CON2
.REG2    ANOP
         LR    15,&TABEND             ADDRESS END OF TABLE
.CON2    ANOP
         AIF   ('&LAST' EQ 'E').LASTSET
         S     15,=A(&ENTLEN)         ADDRESS START OF LAST ENTRY
         SR    0,0
.LASTSET ANOP
A&SYSNDX CLC   &FIELD(1)(&LEN,14),&ENTLEN+&FIELD(1)(14)
         AIF   ('&ORDER' EQ 'D').DESCEND
         BNH   B&SYSNDX               IN ASCENDING...NO SWITCH
         AGO   .SWITCH
.DESCEND ANOP
         BNL   B&SYSNDX               IN DESCENDING...NO SWITCH
.SWITCH  ANOP
         XC    0(&ENTLEN,14),&ENTLEN(1)(14)
         XC    &ENTLEN(1)(&ENTLEN,14),0(14)
         XC    0(&ENTLEN,14),&ENTLEN(1)(14)
         L     0,=A(&ENTLEN)
B&SYSNDX A     14,=A(&ENTLEN)         ADDRESS NEXT SORT ENTRY
         CR    14,15                  AT END OF LIST?
         BL    A&SYSNDXQ              NO...CONTINUE
         C     0,=F'0'                ANY SWITCHES TAKE PLACE?
         BE    C&SYSNDX               NO...THE EARLY END
         S     15,=A(&ENTLEN)         LESS ONE ENTRY
         CR    15,1                   FINISHED?
         BNH   C&SYSNDX               YES...
         LR    14,1                   ADDRESS START OF LIST
         SR    0,0
         B     A&SYSNDX               AND DO SOME MORE
C&SYSNDX EQU   *
         MEXIT
.ERR1    MNOTE 8,'TABADDR MUST BE SPECIFIED, LITERAL OR (REG)'
         MEXIT
.ERR2    MNOTE 8,'TABEND MUST BE SPECIFIED, LITERAL OR (REG)'
         MEXIT
.ERR3    MNOTE 8,'ENTLEN MUST BE A NUMERIC LITERAL'
         MEXIT
.ERR3B   MNOTE 8,'ENTLEN MUST NOT BE GREATER THAN 256'
         MEXIT
.ERR4    MNOTE 8,'FIELD MUST BE A NUMERIC LITERAL'
         MEXIT
.ERR5    MNOTE 8,'LEN MUST BE A NUMERIC LITERAL'
         MEXIT
.ERR6    MNOTE 8,'ORDER MUST BE - A OR D'
         MEXIT
.ERR7    MNOTE 8,'LAST MUST BE - B OR E'
         MEXIT
.ERR8    MNOTE 8,'SORT FIELD IS OUTSIDE OF ENTRY, FIELD OR LEN INVALID'
         MEND


    â‚¬ Xephon 1989

