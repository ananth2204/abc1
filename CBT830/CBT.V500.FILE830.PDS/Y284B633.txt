Dynamic control information

The standard means of providing control information for most
jobs is to pre-stage the control statements as members in a
PDS.  For programs that will not accept input by means of the
PARM keyword, this method has to be adopted even when the
total control information is brief enough to be contained as an
operand of the PARM keyword.  To circumvent this restriction
and to provide dynamically controlled input to programs like
SORT, I wrote the following program to accept PARM-
supplied data and create a short sequential file of card image
records to be passed to the following job step.  The comments
preceding the code of the program explain the logic in more
detail.

One could use a combination of this program and CNSLCMDS
(see Delayed console commands in the January 1990 issue of
MVS Update) to key in console commands that need to be
executed after a wait of some time.  The PROC used to
accomplish this could look like the following:

//CNSLCMD  PROC    T1=10,T2=5    /* Default wait periods, 10 & 5 secs */
//STEP1    EXEC PGM=CNTLINFO,
// PARM='&CMD'  /*  This step builds a file of console commands */
//STEPLIB  DD   DSN=SYS2.LINKLIB,DISP=SHR
//CNTLDATA DD   DSN=&&CNTL1,DISP=(,PASS),SPACE=(400,(1,1)),
//         UNIT=VIO
//*    Next step issues console commands after specified pauses
//STEP2    EXEC PGM=CNSLCMDS,PARM=(&T1.,&T2.)
//STEPLIB  DD   DSN=SYS2.LINKLIB,DISP=SHR  /* User authorized library */
//CMDIN    DD   DSN=&&CNTL1,DISP=(OLD,DELETE)
//*

To terminate a CICS region called CICS01 after a wait of one
minute and halt VTAM after a wait of another 2 minutes, one
would invoke the above PROC from the console as follows:

      S CNSLCMD,T1=60,T2=120,CMD='F CICS01,CEMT PERFORM SHUTDOWN @Z NET'

CNTLINFO SOURCE CODE

CNTL     TITLE '           ****   CREATES A TEMP FILE OF CONTROL DATA SX
               UPPLIED TO IT IN THE PARM   ****'
CNTLINFO CSECT
*  This program may typically be used to pass sort control info to a
*  SORT step that follows the execution of this program.
*  The sort control statement(s) passed to this program in the PARM
*  get written out to a temporary disk file, DDNAME=CNTLDATA.
*  The SYSIN DD statement in the following SORT step will then point
*  to the temporary disk file created by CNTLINFO.
*  The PARM on the EXEC statement may contain data for more than one
*  80-byte control statement record, each delimited by an '@' except
*  the last one.  For example the following PARM will result in three
*  80-byte records being written to the output file, each record having
*  a space in column 1, and trailing spaces in columns 13 through 80.
*                     PARM=' CNTL-STMNT1 @ CNTL-STMNT2 @ CNTL-STMNT3'
*  This program is NOT REENTRANT.
         LCLC  &IDNAME                    For this CSECT's ID tag
         LCLC  &DATE6,&TIME4              For Date & Time of Assembly
&DATE6   SETC  '&SYSDATE'(1,2).'&SYSDATE'(4,2).'&SYSDATE'(7,2)
&TIME4   SETC  '&SYSTIME'(1,2).'&SYSTIME'(4,2)
&IDNAME  SETC  'CNTLINFO/&DATE6/&TIME4'   Put together std. ID
BEGIN    SAVE  (14,12),,&IDNAME
         LR    R12,R15                    Establish R12 as
         USING CNTLINFO,R12                 the Base Register
         LR    R11,R13                    Hold C(R13) in R11 for now
         LA    R13,SAVE18F
         ST    R13,8(R11)
         ST    R11,SAVE18F+4
         L     R2,0(R1)
         LH    R3,0(R2)                   Length of PARM input into R3
         LTR   R3,R3                      Did we get any PARM input?
         BNP   PARMERR1                   If not, exit with an error
         OPEN  (CNTLFLE,OUTPUT)
         XC    RTRNCDE,RTRNCDE
         MVI   SWBYTE,X'00'
         LR    R4,R3                    Length of PARM input
         BCTR  R4,0
         EX    R4,MVE1PARM            Move Parm input to field PARMDATA
         LA    R4,PARMDATA(R3)
         MVI   0(R4),C'@'               Add delimiter
         MVI   1(R4),X'FF'                and EOD indicator
         LA    R2,PARMDATA
PUTLOOP  EQU   *
         BAL   R15,@GETREC             Get text for one output record
         PUT   CNTLFLE,CNTLREC
         TM    SWBYTE,EODBIT           Did @GETREC signal EOD?
         BZ    PUTLOOP                 No, get text for next record
EOJPOINT EQU   *
         CLOSE CNTLFLE
GOBACK   EQU   *
         L     R13,SAVE18F+4           Restore entry time value in R13
         LH    R15,RTRNCDE
         RETURN (14,12),,RC=(15)       Pick up return code and exit
MVE1PARM MVC   PARMDATA(*-*),2(R2)
         TITLE '                *******    P E R F O R M E D     R O U X
               T I N E S    *******'
@GETREC  DS    0H              ----  Get data for 1 80-byte record
         ST    R15,SVDR15               Save return address
*  At input R2 points to the beginning of data delimited by
*  character '@'
         MVC  CNTLREC,CNTLREC-1         Spaces to 80-byte output record
         LR    R5,R2
         LA    R0,80
@GETREC1 EQU   *
         CLI   0(R5),C'@'               Is control statement at end?
         BNE   @GETREC2
         CLI   1(R5),X'FF'              Is it End-of-Data?
         BNE   @GETREC3
         OI    SWBYTE,EODBIT            This data for CNTLREC is
         B     @GETREC3                   the last control statement
@GETREC2 EQU   *
         LA    R5,1(R5)
         BCT   R0,@GETREC1
         B     PARMERR2                 Should NOT occur
@GETREC3 EQU   *
         LR    R6,R5                    R5 is pointing to "@"
         SR    R6,R2                    Get length of output text
         BCTR  R6,0
         EX    R6,MVE2REC               Move text to CNTLREC
         LA    R2,1(R5)                 Point R2 to byte after "@"
@GETREC9 EQU   *
         L     R15,SVDR15               Reload return address into R15
         BR    R15                        and Return
MVE2REC  MVC   CNTLREC(*-*),0(R2)
         TITLE '           ******   DCB''S && DATA FIELDS   *****'
CNTLFLE  DCB   DSORG=PS,MACRF=(PM),     /*  output file of     */      X
               DDNAME=CNTLDATA,         /*  control statements */      X
               RECFM=FB,LRECL=80,BLKSIZE=400
SAVE18F  DC    18F'0'        This module's 18-word Save Area
SVDR15   DS    F             Register-save-fld for 1st level subrtns
PARMDATA DS    0CL102              Staging area for PARM supplied data
         DC    CL100' '
PARMDLMT DS    C'@',X'FF'
         DC    C' '                <===  Required to precede CNTLREC
CNTLREC  DS    CL80                Assembly area for 80-byte output rec
SWBYTE   DC    X'00'               switch byte
EODBIT   EQU   X'80'                 -  End-of-data encountered
RTRNCDE  DC    H'0'                Halfword to hold return code value
PARMERR1 DS    0H
         MVC   SENDMSG+8(48),ERRMSG01
SENDMSG  WTO   '0123456789----------0123456789----------01234567',     X
               ROUTCDE=(2,11),     /* Put out a 48-byte   */           X
               DESC=7              /* error message       */
         MVI   RTRNCDE+1,X'0C'          set a return code of 12
         B     GOBACK                     and exit
PARMERR2 DS    0H
         MVC   SENDMSG+8(48),ERRMSG02
         B     SENDMSG
ERRMSG01 DS    0CL48
         DC    CL34'CNTL1:  NO PARM PASSED TO CNTLINFO',CL14' '
ERRMSG02 DS    0CL48
         DC    CL39'CNTL2:  PARM DATA INCORRECTLY DELIMITED',CL9' '
         END


B S Oberoi
Manager Technical Services
Allendale Insurance (USA)                  â‚¬ Xephon 1990

