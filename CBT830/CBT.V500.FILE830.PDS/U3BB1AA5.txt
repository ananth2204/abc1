PDS member restore

If you have ever wanted to recover a deleted member from a PDS
you will appreciate what a painful job it is, getting the dataset
restored with a different name, copying the member you want, etc.
If the dataset has not been compressed since the member was
deleted the data still exists in the dataset but you have no way to
access it. The following program will overcome this problem.

HOW THE PROGRAM WORKS

The program asks for the dataset name (via an ISPF panel). It then
scans the dataset locating all deleted members and displays a list
of the deleted members' TTR sizes and the first line of data in the
member. The deleted members can be viewed by selecting them
with an 'S' on the required line; the number of lines to be
displayed can be reduced by overtyping the SIZE on the line
selected. Once the member you want to restore is found, it can be
restored to the dataset by placing a K next to it and typing in the
member name you want it saved as.

This program can be changed to run on Fujitsu's MSP by
changing the following lines:

o      USING CVT should be changed to USING CVTSECT

o      DSECT CVT should be changed to KAACVT

o      In the CLIST, ISPEXEC should be changed to PFDEXEC.

MACROS USED BY PROGRAM

SECTION macro

           MACRO
  &NAME    SECTION
           DC     F'0'
  &NAME    ST     R14,*-4
           MEND

EXITS macro

           MACRO
  &NAME    EXITS
           L      R14,&NAME-4
           BR     R14
           MEND

VDEFINE macro

           MACRO
  &LABEL   VDEFINE &VARNAME,&LEN
  &LABEL   LA   R15,=CL8'&VARNAME'
           ST   R15,DEFVAR
           LA   R15,&VARNAME
           ST   R15,DEFSTOR
           LA   R15,=F'&LEN'
           ST   R15,DEFLEN
           OI   DEFLEN,X'80'
           LA   R1,DEFPARM
           L    R15,LINKADDR
           BALR R14,R15
           MEND

DISPLAY macro

           MACRO
  &LABEL   DISPLAY &PANEL
  &LABEL   LA   R15,=CL8'&PANEL'
           ST   R15,DISPANEL
           OI   DISPANEL,X'80'
           LA   R1,DISPARM
           L    R15,LINKADDR
           BALR R14,R15
           MEND

TBADD macro

           MACRO
  &LABEL   TBADD
           LA   R1,TBAPARM
           L    R15,LINKADDR
           BALR R14,R15
           MEND

UNDELETE PROGRAM

UNDEL00  CSECT
START    STM    14,12,12(13)
         USING  UNDEL00,R15
         LR     R2,R13
         ST     R13,SAVEAREA+4           SAVE BACK POINTER
         LA     R13,SAVEAREA             SET ADDRESS
         ST     R13,8(R2)                SAVE FORWARD POINTER
         B      SAVEAREA+72              JUMP PAST SAVEAREA
SAVEAREA DC     18F'0'
         USING  SAVEAREA,R13,R12,R11
         DROP   R15
         LA     R12,4095(R13)
         LA     R12,1(R12)
         LA     R11,4095(R12)
         LA     R11,1(R11)
         L     R1,0(R1)        LOAD PARM ADDRESS
         STCM   R1,B'0111',PARMSAVE+1    SAVE PARM ADDRESS
* MAINLINE SECTION     *
MAINLINE DS    0H
         BAL   R14,INIT0000    PERFORM INIT SECTION
         BAL   R14,DIRL0000    LOAD DIRECTORY TTRS AND SORT
         BAL   R14,FIND0000    FIND BLANK SPACES IN PDS
         BAL   R14,DISP0000    DISPLAY TTR NUMBERS
         B     EXIT0000        END OF PROGRAM
INIT0000 SECTION
         GETMAIN R,LV=32760    LOC=BELOW GET BUFFER STORAGE
         ST    R1,BUFFADDR     SAVE IN ADDRESS FIELD
         GETMAIN R,LV=3000     LOC=BELOW GET BUFFER STORAGE
         ST    R1,GASLISTA     SAVE IN ADDRESS FIELD
         GETMAIN R,LV=6000     LOC=BELOW GET BUFFER STORAGE
         ST    R1,TTRLISTA     SAVE IN ADDRESS FIELD
         LOAD  EP=ISPLINK      LOAD ISPF INTERFACE MODULE
         ST    R0,LINKADDR     SAVE ADDRESS
*    DEFINE ISPF VARIABLES
         LA    R15,HEX
         ST    R15,DEFTYPE
         VDEFINE TTR,3
         LTR   R15,R15         TEST RETURN CODE
         BNZ   EXIT0020        QUICK EXIT WITH ERROR MESSAGE
         LA    R15,FIXED
         ST    R15,DEFTYPE
         VDEFINE SIZE,4
         LA    R15,CHAR
         ST    R15,DEFTYPE
         VDEFINE ZSEL,1
         VDEFINE DATA,80
         VDEFINE MEMBNAME,8
         VDEFINE STOWNAME,8
         VDEFINE DYNDSN,44
         LA   R1,TBCPARM       TO STORE
         L    R15,LINKADDR     TTR LIST
         BALR R14,R15
*  LOAD PARM
         L     R2,PARMSAVE
         LTR   R2,R2           CHECK PARM
         BZ    INIT0010
         CLI   1(R2),0         IS PARM THERE ?
         BE    INIT0010        NO
         LH    R1,0(R2)        LOAD LENGTH OF PARM
         BCTR  R1,0            SUB 1 FOR EXECUTE
         EX    R1,PARMMOVE
         OC    DYNDSN,BLANKS   CONVERT TO UPPER CASE
         B     INIT0020
PARMMOVE MVC   DYNDSN(0),2(R2) MOVE DSNAME IN
INIT0010 DS    0H
         DISPLAY UNDEL01
         LTR   R15,R15         TEST RETURN CODE
         BNZ   EXIT0010        QUICK EXIT IF NON ZERO
* ALLOCATE THE DATASET SPECIFIED
INIT0020 L     R1,DYNPARM      ALLOCATE THE DATASET
         SVC   99              THEY HAVE REQUESTED
         LTR   R15,R15         TEST RETURN CODE
         BNZ   EXIT0030        NOT OK QUIT PROGRAM WITH MESSAGE
         RDJFCB (INDCB1)       READ JFCB
         LTR   R15,R15         TEST RETURN CODE
         BNZ   EXIT0050        NOT OK ? GO DISPLAY ERROR AND EXIT
         OBTAIN MYLABEL        GET FORMAT 1 DSCB INFO
         LTR   R15,R15         TEST RETURN CODE
         BNZ   EXIT0060        NOT OK ? GO DISPLAY ERROR AND EXIT
         OPEN  (INDCB,INPUT)   OPEN TO READ DIR
         OPEN  (INDCB1,UPDAT)  OPEN AS PDS
         CLI   DS1DSORG,X'02'  TEST DSORG
         BNE   EXIT0040        NOT PO THEN EXIT WITH MESSAGE
         LH    R2,DS1BLKL      LOAD BLOCK LENGTH
         STH   R2,BUFFSIZE
INIT9999 DS    0H
INIT0000 EXITS
* DIRECTORY READ SECTION   *
* READ DIRECTORY           *
* SAVE TTRS IN SORTED LIST *
DIRL0000 SECTION
         L     R7,TTRLISTA     LOAD START OF TTR SAVE AREA
DIRL0001 GET   INDCB,INAREA    READ A CARD INTO INAREA
         LH    R10,INAREA
         LA    R8,INAREA+2
DIRL0002 CH    R10,=H'12'      IS THIS DIRECTORY BLOCK EMPTY ?
         BNH   DIRL0001        YES THEN READ NEXT BLOCK
         CLC   0(4,R8),=X'FFFFFFFF'   END OF DIRECTORY ?
         BE    DIRL0100        YES THEN END OF DIRECTORY
         MVC   0(3,R7),8(R8)   MOVE TTR TO SAVE
         LA    R7,3(R7)        INCREMENT POINTER
         TM    11(R8),B'00011111'     TEST FOR USER DATA
         BZ    DIRL0003        NO THEN SKIP ADD
         XR    R2,R2           ZERO R2
         ICM   R2,B'1000',11(R8)      LOAD USER DATA LENGTH
         SLL   R2,3            SHIFT OUT ALIAS AND BLK DATA
         SRL   R2,27           SHIFT DOWN TO BOTTOM OF REG
         MH    R2,=H'2'        CONVERT FROM HALFWORDS TO BYTES
         AR    R8,R2           ADD USER DATA LENGTH
         SR    R10,R2          SUBTRACT FROM COUNT
DIRL0003 LA    R8,12(R8)       POINT TO NEXT MEMBER
         SH    R10,=H'12'      SUBTRACT LENGTH FROM BLOCK COUNT
         B     DIRL0002        GO PROCESS NEXT MEMBER
DIRL0100 DS    0H
         LR    R6,R7
         S     R6,=F'3'        POINT TO LAST TTR
DIRL0105 L     R2,TTRLISTA     LOAD LIST ADDRESS
         XR    R3,R3           ZERO FOR CHANGE FLAG
DIRL0110 CLC   3(3,R2),0(R2)   NEED SWAP ?
         BL    DIRL0120        YES THEN GO SWAP
DIRL0115 LA    R2,3(R2)        POINT TO NEXT PAIR
         CLR   R2,R6           POINTING AT LAST ?
         BL    DIRL0110        NO THEN CHECK NEXT
         LTR   R3,R3           CHECK SWAP FLAG REG
         BNZ   DIRL0105        NEXT PASS
         B     DIRL9999
DIRL0120 DS    0H
         XC    0(3,R2),3(R2)   SWAP
         XC    3(3,R2),0(R2)   VALUES
         XC    0(3,R2),3(R2)   AROUND
         IC    R3,=X'FF'       FLAG SWAP HAS OCCURRED
         B     DIRL0115        GO CHECK NEXT
DIRL9999 DS    0H
DIRL0000 EXITS
* SEARCH PDS AND FIND ALL  *
* SPACES IN PDS THAT DONT  *
* HAVE TTRS IN DIRECTORY   *
FIND0000 SECTION
         L     R9,GASLISTA     LOAD ADDRESS TO SAVE TTRS
         L     R8,TTRLISTA     LOAD ADDRESS OF DIR TTRS
*     INITIALIZE CHANNEL PROGRAM TO READ SET TTR
*     CCW CHAIN USED IS -  SEARCH ID, TIC, READ COUNT, READ DATA
FIND0005 XC    CCWS(LCCWS),CCWS         CLEAR CCW AREA
         LA    R0,IOBSEEK      ADDRESS OF IOB SEEK
         LA    R1,CCWS         FIRST CCW - SEARCH CCW
         L     R2,BUFFADDR     ADDRESS OF BUFFER
         ST    R0,CCWS         SEEK ADDRESS IN CCW1
         ST    R1,CCWS+8       TIC ADDRESS IN CCW2
         ST    R0,CCWS+16      READ COUNT ADDR IN CCW3
         ST    R2,CCWS+24      BUFFER ADDR IN CCW4
         LH    R3,BUFFSIZE     LENGTH OF BUFFER
         STH   R3,CCWS+30      SET IN CCW4
         OC    CCWS(LLISTCCW),LISTCCWS  COPY PATTERN CCW CHAIN
*        CONVERT TTR OF START OF MEMBER TO CCHHR FORMAT
FIND0010 EQU   *
         STM   14,12,12(13)    SAVE REGISTERS FOR RETURN
         LA    R2,IOBSEEK-3    RETURN CCHHR IN IOBSEEK
         L     R1,INDCB+(DCBDEBAD-IHADCB) DEB ADDRESS
         MVI   DIRTTR+3,0      CLEAR TTR CONCATENTION FIELD
         L     R0,DIRTTR       GET TTR0 OF MEMBER
         LA    R15,X'100'      GET TTR0 OF PREVIOUS RECORD
         SLR   R0,R15
         L     R15,CVTPTR      CVT
         USING CVT,R15         ADDRESS CVT
         L     R15,CVTPCNVT    ADDRESS OF TTR-CCHHR CONVERT
         LR    R3,R13          SAVE ADDRESS OF SAVE AREA
         BALR  R14,R15
         LR    R13,R3          RESTORE SAVE AREA ADDRESS
         LM    14,12,12(13)    RESTORE REGISTERS
* ISSUE EXCP TO READ DATASET *
FIND0020 DS    0H
         MVI   IOECB,0         CLEAR ECB
         EXCP  IOB             READ NEXT RECORD
         WAIT  ECB=IOECB       WAIT FOR ECB TO BE POSTED
         MVI   DCBIFLGS-IHADCB+INDCB,0  CLEAR I/O STATUS FLAGS
         TM    IOBCSW+3,X'01'     END OF FILE?
         BO    FIND0500           YES
         CLI   IOECB,X'42'        OUT OF EXTENT?
         BNE   FIND0030           NO, CHECK STATUS
         BAL   R14,FIND0600       YES, ADJUST FOR NEW EXTENT
         MVI   IOBSEEK+4,0        CORRECT TO RECORD 0
         B     FIND0020           THEN RE-READ RECORD
FIND0030 DS    0H
         CLI   IOECB,X'7F'        SUCCESSFUL?
         BE    FIND0040           YES THEN GO ON
*                                 NO, I/O ERROR
         XR    R2,R2              ZERO R2
         ICM   R2,B'0011',DIRTTR  LOAD TT
         LA    R2,1(R2)           INCREMENT
         STCM  R2,B'0011',DIRTTR  STORE TT
         MVI   DIRTTR+2,X'01'     SET RECORD BYTE
         CLC   DIRTTR,DS1LSTAR    IS THIS LAST TTR IN FILE ?
         BNL   FIND9999           YES THEN END
         MVI   FLAG1,X'00'        RESET FLAG TO SAVE CURTTR
         B     FIND0005           GO READ NEXT TTR
FIND0040 CLI   FASTTRK,X'FF'      DIRECTORY PASSED ?
         BE    FIND0041           YES THEN SKIP
         XR    R2,R2              ZERO R2
         ICM   R2,B'0111',DIRTTR  LOAD TTR
         LA    R2,1(R2)           INCREMENT
         STCM  R2,B'0111',DIRTTR  STORE TTR
         B     FIND0010           GO READ NEXT TTR
FIND0041 DS    0H                 READ WAS OK
         CLI   FLAG1,X'FF'        FIRST PASS ?
         BE    FIND0045           NO THEN SKIP
FIND0042 DS   0H
         CLC  DIRTTR,0(R8)        CHECK AGAINST KNOWN TTRS
         BL   FIND0044            LOW THEN MUST BE DELETED
         BE   FIND0043            MATCH SO PROCESS
         CLC  0(3,R8),=X'000000'  NOT IN LIST MUST BE
         BE   FIND0044            DELETED MEMBER
         LA   R8,3(R8)            POINT TO NEXT TTR
         B    FIND0042            LOOP AND CHECK AGAIN
FIND0043 DS   0H
         MVI   FASTTRK,X'00'      SET FASTTRACK FLAG
         B     FIND0040           GO DO NEXT TTR
FIND0044 DS   0H
         MVC  TTR,DIRTTR          MOVE TTR TO VARIABLE TTR
         MVC  SIZE,=F'0'          ZERO SIZE
         MVI  FLAG,X'FF'          SET FLAG FOR TBADD AT NEXT EOF
         MVI   FLAG1,X'FF'        FLAG NOT FIRST PASS
         MVC   CURTTR,MBBCCHHR    SAVE CURRENT TTR
FIND0045 DS   0H
         CLC   CURTTR,MBBCCHHR    SAME ADDRESS ?
         BE    FIND0051           YES THEN SKIP INCREMENT
         CLC   CURTTR(7),MBBCCHHR SAME TRACK ?
         BNE   FIND0047           NO THEN INCREMENT TRACK
         XR    R2,R2              ZERO R2
         ICM   R2,B'0111',DIRTTR  LOAD TTR
         LA    R2,1(R2)           INCREMENT
         STCM  R2,B'0111',DIRTTR  STORE TTR
         MVC   CURTTR,MBBCCHHR    SAVE CURRENT TTR
         B     FIND0051
FIND0047 DS    0H
         XR    R2,R2              ZERO R2
         ICM   R2,B'0011',DIRTTR  LOAD TTR
         LA    R2,1(R2)           INCREMENT
         STCM  R2,B'0011',DIRTTR  STORE TTR
         MVI   DIRTTR+2,X'01'     SET RECORD 1
         MVC   CURTTR,MBBCCHHR    SAVE CURRENT TTR
FIND0051 DS    0H
         LH    R3,BUFFSIZE        LOAD BUFFER SIZE
         SH    R3,IOBCSW+5        SUBTRACT RESIDUAL
         L     R4,BUFFADDR        ADDRESS OF START OF BUFFER
         AR    R3,R4              ADDRESS OF END OF BUFFER
         TM    DCBRECFM-IHADCB+INDCB1,X'40' IS FILE VARIABLE FORMAT?
         LH    R2,DS1LRECL        GET RECORD LENGTH IF NOT
         LA    R5,FIND0200        FIXED LENGTH RECORD PROCESSOR
         BZ    FIND0100           NO, FIXED FORMAT
         MVC   0(2,R13),0(R4)     GET BLOCK LENGTH
         LH    R3,0(,R13)
         AR    R3,R4              END OF VARIABLE-LENGTH BLOCK
         LA    R4,4(,R4)          START OF RECORD ENTRIES
         LA    R5,FIND0150        VARIABLE LEN RECORD PROCESSOR
FIND0100 DS    0H
         BCTR  R3,0               SET END OF BUFFER ADDRESS
         BR    R5                 PROCESS FIRST RECORD
FIND0150 DS    0H
         MVC   0(2,R13),0(R4)     GET LENGTH OF VARIABLE RECORD
         LA    R4,4(,R4)          SKIP OVER HEADER
         LH    R2,0(,R13)         GET LOGICAL RECORD LENGTH
         LA    R0,4
         SR    R2,R0              SUBTRACT HEADER LENGTH
         BP    FIND0200           CONTINUE IF RECORD EXISTS
         SR    R2,R2
         B     FIND0300
FIND0200 DS    0H
         TM    DCBRECFM-IHADCB+INDCB1,X'06' SPECIAL CONTROL CHARS?
         BZ    FIND0310           NO
         LA    R4,1(,R4)          YES, SKIP CARRIAGE CONTROL
         BCT   R2,FIND0310
FIND0300 DS    0H
         BXLE  R4,R2,0(R5)        SKIP TO NEXT RECORD
         B     FIND0020           IF END OF BLOCK
FIND0310 DS    0H
         LR    R1,R2              LENGTH OF DATA AREA
         BCTR  R1,0               DECREMENT RECORD LEN FOR MOVE
         LA    R1,5(,R1)          LINE LENGTH PLUS HEADER FIELD
         SLL   R1,16
FIND0320 DS    0H
         CLC   SIZE,=F'0'         CHECK SIZE
         BNZ   FIND0330           NOT ZERO SO SKIP DATA MOVE
         MVI   DATA,C' '          BLANK FIRST CHAR
         MVC   DATA+1(L'DATA-1),DATA   BLANK REST OF VARIABLE
         BCTR  R2,0
         EX    R2,FINDMOVE
         LA    R2,1(R2)
FIND0330 L     R0,SIZE            LOAD COUNT OF SIZE
         AH    R0,=H'1'           ADD TO RECORD COUNT
         ST    R0,SIZE            SAVE COUNT
         B     FIND0300           GET NEXT RECORD
FINDMOVE MVC   DATA(0),0(R4)      MOVE DATA TO VARIABLE DATA
* SOFT END OF FILE ENCOUNTERED *
FIND0500 MVI   FASTTRK,X'FF'      FLAG DIRECTORY HAS PASSED
         CLI   FLAG,X'00'         SHOULD TBADD BE ISSUED ?
         BE    FIND0505           NO
         CLC   SIZE,=F'0'         SHOULD TBADD BE ISSUED ?
         BE    FIND0505           NO
         TBADD                    ADD A ROW TO THE TABLE
FIND0505 MVI   FLAG,X'00'         CLEAR TBADD FLAG
         XR    R2,R2              ZERO R2
         ICM   R2,B'0111',DIRTTR  LOAD TTR
         LA    R2,1(R2)           INCREMENT
         STCM  R2,B'0111',DIRTTR  STORE TTR
FIND0509 DS   0H
         CLC  DIRTTR,DS1LSTAR     IS THIS LAST TTR IN FILE ?
         BNL  FIND9999            YES THEN END
         MVI  FLAG1,X'00'         SET FLAG FOR FIRST PASS
         B    FIND0005
FASTTRK DC   X'00'
FLAG    DC   X'00'
FLAG1   DC   X'00'
FIND0600 DS    0H
         SR    R0,R0
         SR    R15,R15
         L     R1,DCBDEBAD-IHADCB+INDCB
         IC    R15,MBBCCHHR       CURRENT EXTENT #
         IC    R0,DEBXTNT#(R1)    # EXTENTS IN DATASET
         LA    R15,1(,R15)        ONE MORE DONE
         CR    R15,R0             CHECK FOR END OF DATASET
         BCR   2,R14              YES, EXIT
         STC   R15,MBBCCHHR       NO, SAVE NEW EXTENT COUNT
         MVI   IOBSEEK+4,X'01'
         SLL   R15,4              COMPUTE EXTENT OFFSET
         AR    R1,R15             IN DEB
         MVC   IOBSEEK(4),DEBEXTNT+6(R1)
         MVI   IOECB,X'7F'
         BR    R14
FIND9999 DS    0H
FIND0000 EXITS
* READ MEMBER AT TTR SELECTED *
* ADD ROW TO TABLE FOR EACH   *
* LINE OF MEMBER UP TO COUNT  *
VIEW0000 SECTION
*     INITIALIZE CHANNEL PROGRAM TO READ SELECTED MEMBER
*     CCW CHAIN USED IS -  SEARCH ID, TIC, READ COUNT, READ DATA
VIEW0005 XC    CCWS(LCCWS),CCWS   CLEAR CCW AREA
         LA    R0,IOBSEEK         ADDRESS OF IOB SEEK
         LA    R1,CCWS            FIRST CCW - SEARCH CCW
         L     R2,BUFFADDR        ADDRESS OF BUFFER
         ST    R0,CCWS            SEEK ADDRESS IN CCW1
         ST    R1,CCWS+8          TIC ADDRESS IN CCW2
         ST    R0,CCWS+16         READ COUNT ADDR IN CCW3
         ST    R2,CCWS+24         BUFFER ADDR IN CCW4
         LH    R3,BUFFSIZE        LENGTH OF BUFFER
         STH   R3,CCWS+30         SET IN CCW4
         OC    CCWS(LLISTCCW),LISTCCWS  COPY PATTERN CCW CHAIN
*        CONVERT TTR OF START OF MEMBER TO CCHHR FORMAT
VIEW0010 EQU   *
         STM   14,12,12(13)       SAVE REGISTERS FOR RETURN
         LA    R2,IOBSEEK-3       RETURN CCHHR IN IOBSEEK
         L     R1,INDCB+(DCBDEBAD-IHADCB) DEB ADDRESS
         MVI   DIRTTR+3,0         CLEAR TTR CONCATENTION FIELD
         L     R0,DIRTTR          GET TTR0 OF MEMBER
         LA    R15,X'100'         GET TTR0 OF PREVIOUS RECORD
         SLR   R0,R15
         L     R15,CVTPTR         CVT
         USING CVT,R15            ADDRESS CVT
         L     R15,CVTPCNVT       ADDRESS OF TTR-CCHHR CONVERT
         LR    R3,R13             SAVE ADDRESS OF SAVE AREA
         BALR  R14,R15
         LR    R13,R3             RESTORE SAVE AREA ADDRESS
         LM    14,12,12(13)       RESTORE REGISTERS
VIEW0020 DS    0H
* ISSUE EXCP TO READ DATASET *
         MVI   IOECB,0            CLEAR ECB
         EXCP  IOB                READ NEXT RECORD
         WAIT  ECB=IOECB          WAIT FOR ECB TO BE POSTED
         MVI   DCBIFLGS-IHADCB+INDCB,0  CLEAR I/O STATUS FLAGS
         TM    IOBCSW+3,X'01'     END OF FILE?
         BO    VIEW9999           YES THEN RETURN
         CLI   IOECB,X'42'        OUT OF EXTENT?
         BNE   VIEW0030           NO, CHECK STATUS
         BAL   R14,VIEW0600       YES, ADJUST FOR NEW EXTENT
         MVI   IOBSEEK+4,0        CORRECT TO RECORD 0
         B     VIEW0020           THEN RE-READ RECORD
VIEW0030 DS    0H
         CLI   IOECB,X'7F'        SUCCESSFUL?
         BE    VIEW0040           YES THEN GO ON
*                                 NO, I/O ERROR
         TPUT  MSG0001,MSG0001L
         B     VIEW9999           VIEW FAILED
VIEW0040 CLI   FASTTRK,X'FF'      DIRECTORY PASSED ?
         BE    VIEW0041           YES THEN SKIP
         XR    R2,R2              ZERO R2
         ICM   R2,B'0111',DIRTTR  LOAD TTR
         LA    R2,1(R2)           INCREMENT
         STCM  R2,B'0111',DIRTTR  STORE TTR
         B     VIEW0010           GO READ NEXT TTR
VIEW0041 DS    0H
         LH    R3,BUFFSIZE        LOAD BUFFER SIZE
         SH    R3,IOBCSW+5        SUBTRACT RESIDUAL
         L     R4,BUFFADDR        ADDRESS OF START OF BUFFER
         AR    R3,R4              ADDRESS OF END OF BUFFER
         TM    DCBRECFM-IHADCB+INDCB1,X'40' IS FILE VARIABLE FORMAT?
         LH    R2,DS1LRECL        GET RECORD LENGTH IF NOT
         LA    R5,VIEW0200        FIXED LENGTH RECORD PROCESSOR
         BZ    VIEW0100           NO, FIXED FORMAT
         MVC   0(2,R13),0(R4)     GET BLOCK LENGTH
         LH    R3,0(,R13)
         AR    R3,R4              END OF VARIABLE-LENGTH BLOCK
         LA    R4,4(,R4)          START OF RECORD ENTRIES
         LA    R5,VIEW0300        VARIABLE LEN RECORD PROCESSOR
         B     VIEW0100           GO TO FIXED FORMAT
VIEW0100 DS    0H
         BCTR  R3,0               SET END OF BUFFER ADDRESS
         BR    R5                 PROCESS FIRST RECORD
VIEW0300 DS    0H
         MVC   0(2,R13),0(R4)     GET LENGTH OF VARIABLE RECORD
         LA    R4,4(,R4)          SKIP OVER HEADER
         LH    R2,0(,R13)         GET LOGICAL RECORD LENGTH
         LA    R0,4
         SR    R2,R0              SUBTRACT HEADER LENGTH
         BP    VIEW0200           CONTINUE IF RECORD EXISTS
         SR    R2,R2
         B     VIEW0400
VIEW0200 DS    0H
         TM    DCBRECFM-IHADCB+INDCB1,X'06' SPECIAL CONTROL CHARS?
         BZ    VIEW0410           NO
         LA    R4,1(,R4)          YES, SKIP CARRIAGE CONTROL
         BCT   R2,VIEW0410
VIEW0400 DS    0H
         BXLE  R4,R2,0(R5)        SKIP TO NEXT RECORD
         B     VIEW0020           IF END OF BLOCK
VIEW0410 DS    0H
         LR    R1,R2              LENGTH OF DATA AREA
         BCTR  R1,0               DECREMENT RECORD LEN FOR MOVE
         LA    R1,5(,R1)          LINE LENGTH PLUS HEADER FIELD
         SLL   R1,16
VIEW0420 DS    0H
         MVI   DATA,C' '          BLANK FIRST CHAR
         MVC   DATA+1(L'DATA-1),DATA   BLANK REST OF VARIABLE
         BCTR  R2,0
         EX    R2,VIEWMOVE
         LA    R2,1(R2)
         TBADD                    ADD A ROW TO THE TABLE
         LA    R9,1(R9)           INCREMENT COUNT
         CLR   R8,R9              CHECK COUNT
         BNH   VIEW9999           TIME TO EXIT
         B     VIEW0400           GET NEXT RECORD
VIEWMOVE MVC   DATA(0),0(R4)      MOVE DATA TO VAR
* SOFT END OF FILE ENCOUNTERED *
VIEW0500 MVI   FASTTRK,X'FF'      FLAG DIRECTORY HAS PASSED
         CLI   FLAG,X'00'         SHOULD TBADD BE ISSUED ?
         BE    VIEW0505           NO
         TBADD                    ADD A ROW TO THE TABLE
VIEW0505 MVI   FLAG,X'00'         CLEAR TBADD FLAG
         XR    R2,R2              ZERO R2
         ICM   R2,B'0111',DIRTTR  LOAD TTR
         LA    R2,1(R2)           INCREMENT
         STCM  R2,B'0111',DIRTTR  STORE TTR
         CLC  DIRTTR,DS1LSTAR     IS THIS LAST TTR IN FILE ?
         BNL  VIEW9999            YES THEN END
VIEW0510 CLC  DIRTTR,0(R8)        CHECK AGAINST KNOWN TTRS
         BL   VIEW0530            LOW THEN MUST BE DELETED
         BE   VIEW0520            MATCH SO PROCESS
         CLC  0(3,R8),=X'000000'  NOT IN LIST MUST BE
         BE   VIEW0530            DELETED MEMBER
         LA   R8,3(R8)            POINT TO NEXT TTR
         B    VIEW0510            LOOP AND CHECK AGAIN
VIEW0520 MVI  FLAG1,X'00'
         B   VIEW0005
VIEW0530 MVC  TTR,DIRTTR          MOVE TTR TO VARIABLE TTR
         MVC  SIZE,=F'0'          ZERO SIZE
         MVI  FLAG,X'FF'          SET FLAG FOR TBADD AT NEXT EOF
         B    VIEW0520            CONTINUE PROG
VIEW0600 DS    0H
         SR    R0,R0
         SR    R15,R15
         L     R1,DCBDEBAD-IHADCB+INDCB
         IC    R15,MBBCCHHR       CURRENT EXTENT #
         IC    R0,DEBXTNT#(R1)    # EXTENTS IN DATASET
         LA    R15,1(,R15)        ONE MORE DONE
         CR    R15,R0             CHECK FOR END OF DATASET
         BCR   2,R14              YES, EXIT
         STC   R15,MBBCCHHR       NO, SAVE NEW EXTENT COUNT
         MVI   IOBSEEK+4,X'01'
         SLL   R15,4              COMPUTE EXTENT OFFSET
         AR    R1,R15             IN DEB
         MVC   IOBSEEK(4),DEBEXTNT+6(R1)
         MVI   IOECB,X'7F'
         BR    R14
VIEW9999 DS    0H
VIEW0000 EXITS
DISP0000 SECTION
         LA   R1,TBTPARM          ADDRESS OF TBTOP PARM
         L    R15,LINKADDR        LOAD INTERFACE ADDRESS
         BALR R14,R15             CALL ISPF INTERFACE MODULE
         MVC  MSSG,BLANKS         BLANK OUT MESSAGE
DISP0001 MVI  ZSEL,C' '           BLANK ZSEL COL
         MVC  MEMBNAME,=CL8' '    BLANK MEMBER NAME
         LA   R1,TBDPARM          TO STORE
         L    R15,LINKADDR        TTR LIST
         BALR R14,R15
         LTR  R15,R15
         BNZ  DISP0900            PF3 HIT EXIT
         MVC  MSSG,BLANKS         BLANK OUT MESSAGE
         CLI  ZSEL,C'S'           WAS IT SELECT ?
         BE   DISP0100            YES GO VIEW FILE
         CLI  ZSEL,C'K'           WAS KEEP SELECTED ?
         BE   DISP0200            YES GO STOW TTR
         B    DISP0001            DISPLAY TABLE AGAIN
DISP0100 DS   0H
         MVC  TBNAME,=C'DELTAB02' SET NEW TABLE NAME
         LA   R1,TBCPARM1         TO STORE
         L    R15,LINKADDR        TTR LIST
         BALR R14,R15             CREATE NEW TABLE
         MVC  DIRTTR,TTR          MOVE TTR OF START OF MEMBER
         L    R8,SIZE             LOAD SIZE TO BE VIEWED
         XR   R9,R9               ZERO R9 AS COUNT
         BAL  R14,VIEW0000        GO BUILD TABLE TO DISPLAY
         LA   R1,TBTPARM          ADDRESS OF TBTOP PARM
         L    R15,LINKADDR        LOAD INTERFACE ADDRESS
         BALR R14,R15             CALL ISPF INTERFACE MODULE
         LA   R1,TBDPARM1         DISPLAY
         L    R15,LINKADDR        TABLE CONTAINING
         BALR R14,R15             SELECTED MEMBER
         LA   R1,TBCLPARM         CLOSE
         L    R15,LINKADDR        TABLE
         BALR R14,R15             AND DELETE
         MVC  TBNAME,=C'DELTAB01' RESET TABLE NAME
         B    DISP0001            DISPLAY TABLE AGAIN
DISP0200 DS   0H
         OC   MEMBNAME,=C'        MAKE UPPER CASE AND BLANKS
         CLC  MEMBNAME,BLANKS     IS MEMBER NAME BLANK ?
         BE   DISP0240            YES THEN DISPLAY ERROR
         MVC  STOWTTR,TTR         MOVE TTR INTO STOW DATA
         MVC  STOWNAME,MEMBNAME   MOVE NAME INTO STOW DATA
         OC   STOWNAME,=C'        MAKE UPPER CASE AND BLANKS
         STOW  INDCB1,STOWNAME,A
         LTR  R15,R15
         BZ   DISP0230            OK THEN DISPLAY MESSAGE
         CH   R15,=H'4'           MEMBER ALREADY EXISTS ?
         BE   DISP0220
         MVC  MSSG,=C'UNDEL003'   MESSAGE INVALID MEMBER
         B    DISP0001            DISPLAY TABLE AGAIN
DISP0220 DS   0H
         MVC  MSSG,=C'UNDEL002'   MESSAGE MEMBER ALREADY EXISTS
         B    DISP0001            DISPLAY TABLE AGAIN
DISP0230 DS   0H
         LA   R1,TBDLPARM         ISSUE
         L    R15,LINKADDR        TBDELETE
         BALR R14,R15
         MVC  MSSG,=C'UNDEL001'   SET SAVE MESSAGE
         B    DISP0001            DISPLAY TABLE AGAIN
DISP0240 DS   0H
         MVC  MSSG,=C'UNDEL003'   SET SAVE MESSAGE
         B    DISP0001            DISPLAY TABLE AGAIN
DISP0900 DS   0H
DISP0000 EXITS
EXIT0000 SECTION
         LA   R1,TBCLPARM         ADDRESS TBCLOSE PARM
         L    R15,LINKADDR        LOAD ADDRESS OF INTERFACE
         BALR R14,R15             CALL INTERFACE ROUTINE
         CLOSE (INDCB)
         CLOSE (INDCB1)
EXIT0010 L      13,SAVEAREA+4
         LM     14,12,12(13)
         SR     15,15
         BR     14
EXIT0020 TPUT  MSG0004,MSG0004L
         B     EXIT0010
EXIT0030 MVC   MSG0005D,DYNDSN    MOVE DATASET NAME TO MSG
         TPUT  MSG0005,MSG0005L   DISPLAY ERROR MESSAGE
         B     EXIT0010
EXIT0040 TPUT  MSG0003,MSG0003L
         B     EXIT0000
EXIT0050 TPUT  MSG0006,MSG0006L
         B     EXIT0000
EXIT0060 TPUT  MSG0007,MSG0007L
         B     EXIT0000
* ERROR MESSAGES *
MSG0001  DC C'UNDEL001 .... ERROR READING FILE IN VIEW PROCEDURE'
MSG0001L EQU *-MSG0001
MSG0002  DC C'UNDEL002 .... ERROR DURING STOW MEMBER ALREADY EXISTS'
MSG0002L EQU *-MSG0002
MSG0003  DC C'UNDEL003 DSORG OF DATASET MUST BE PARTITIONED'
MSG0003L EQU *-MSG0003
MSG0004  DC C'UNDEL004 NO VALID ISPF ENV USE ISPEXEC SELECT PGM(XXXX)'
MSG0004L EQU *-MSG0004
MSG0005  DC C'UNDEL005 DATASET ALLOCATION FAILED FOR DATASET '
MSG0005D DC CL44' '
MSG0005L EQU *-MSG0005
MSG0006  DC C'UNDEL006 ERROR OCCURRED DURING READ JFCB FOR DATASET'
MSG0006L EQU *-MSG0006
MSG0007  DC C'UNDEL007 ERROR OCCURRED DURING OBTAIN OF FORMAT 1 DSCB'
MSG0007L EQU *-MSG0007
* DATA AREAS *
TRTAB   DC   C'0123456789ABCDEF'
MEMBNAME DC    CL8' '
STOWNAME DC    CL8' '
STOWTTR  DC    XL3'00',X'80'      TTR, ALIAS FLAG
DEFPARM  DC A(VDEF)
DEFVAR   DS A
DEFSTOR  DS A
DEFTYPE  DS A
DEFLEN   DS A
TBAPARM  DC A(TBADD)
         DC X'80'
         DC AL3(TBNAME)
TBTPARM  DC A(TBTOP)
         DC X'80'
         DC AL3(TBNAME)
TBCLPARM DC A(TBCLOSE)
         DC X'80'
         DC AL3(TBNAME)
TBDPARM  DC A(TBDISPL)
         DC A(TBNAME)
         DC A(UNDEL02)
         DC X'80'
         DC AL3(MSSG)
TBDLPARM DC A(TBDELETE)
         DC X'80'
         DC AL3(TBNAME)
TBDPARM1 DC A(TBDISPL)
         DC A(TBNAME)
         DC X'80'
         DC AL3(UNDEL03)
TBCPARM  DC A(TBCREATE)
         DC A(TBNAME)
         DC A(TABKEYS)
         DC A(TABVARS)
         DC X'80'
         DC AL3(NOWRITE)
TBCPARM1 DC A(TBCREATE)
         DC A(TBNAME)
         DC A(TABKEYS1)
         DC A(TABVARS1)
         DC X'80'
         DC AL3(NOWRITE)
DISPARM  DC A(DISPLAY)
DISPANEL DS A
LINKADDR DS  F
BLANKS   DC CL80' '
MSSG     DC C'        '
TBNAME   DC C'DELTAB01'
TBADD    DC C'TBADD   '
TBTOP    DC C'TBTOP   '
TBCLOSE  DC C'TBCLOSE '
TBDISPL  DC C'TBDISPL '
TBDELETE DC C'TBDELETE'
TBCREATE DC C'TBCREATE'
TABKEYS  DC C'(TTR)'
TABVARS  DC C'(SIZE,DATA)'
TABKEYS1 DC C' '
TABVARS1 DC C'(DATA)'
VDEF     DC C'VDEFINE '
DISPLAY  DC C'DISPLAY '
CHAR     DC C'CHAR    '
HEX      DC C'HEX     '
FIXED    DC C'FIXED   '
NOWRITE  DC C'NOWRITE '
UNDEL02  DC C'UNDEL02 '
UNDEL03  DC C'UNDEL03 '
ZSEL     DC C' '
DATA     DC CL256' '
TTR      DC XL3'0'
SIZE     DC F'0'
ZONED    DS    ZL5
         DS    0D
PACKED   DS    PL8'0'
INDCB    DCB   BLKSIZE=256,                                            C
               DDNAME=PDSIN,                                           C
               DSORG=PS,                                               C
               EODAD=DIRL0100,                                         C
               LRECL=256,                                              C
               MACRF=GM,                                               C
               RECFM=F
INDCB1   DCB   DDNAME=PDSIN,                                           C
               DSORG=PO,                                               C
               MACRF=(R),                                              C
               EXLST=JFCBXIT
JFCBXIT  DC    X'87',AL3(JFCB)    JFCB BLOCK
JFCB     DS    0D
JFCBDSNM DS    CL44,CL8
JFCBTSDM DS    B,CL65
JFCBVOLS DS    CL30,CL28          TOTAL LENGTH 176
MYLABEL  CAMLST SEARCH,JFCBDSNM,JFCBVOLS,WORKAREA
WORKAREA DS    0D,148C
DS1NOBDB EQU   WORKAREA+16        BYTES USED IN LAST DIRECTORY BLOCK
DS1DSORG EQU   WORKAREA+38        DSORG
DS1RECFM EQU   WORKAREA+40        RECFM
DS1BLKL  EQU   WORKAREA+42        BLKSIZE
DS1LRECL EQU   WORKAREA+44        LRECL
DS1KEYL  EQU   WORKAREA+46        KEYLEN
DS1RKP   EQU   WORKAREA+47        RELATIVE KEY POSITION
DS1SCALO EQU   WORKAREA+50        ALLOCATION TYPE
DS1SAQU  EQU   WORKAREA+51        SECONDARY ALLOCATION QUANTITY
DS1LSTAR EQU   WORKAREA+54        LAST USED TTR
DS1TRBAL EQU   WORKAREA+57        BYTES REMAINING IN LAST USED TRACK
DS1PTRDS EQU   WORKAREA+91       CCHHR POINTER TO FORMAT 2 DSCB IF ISAM
         DS    0F
INAREA   DS    0CL256             INPUT AREA DEFINITION
         DS    CL2
MEMBER   DS    CL8
REST     DS    CL248
MESSAGE  DC CL256' '
CCWS     DC    6D'0'
LCCWS    EQU   *-CCWS
IOECB    DC    F'0'
IOB      DS    0F
IOBFLAG  DC    X'42000000'
IOBECB   DC    A(IOECB)
         DC    X'0'
IOBCSW   DC    XL7'0'
IOBCCW   DC    A(CCWS)
IOBDCB   DC    A(INDCB)
         DC    2F'0'
MBBCCHHR DC    XL3'0'
IOBSEEK  DC    XL5'0'
         DC    4F'0'
LIOB     EQU   *-IOB
LISTCCWS DS    0D
         CCW   X'31',0,X'60',5
         CCW   X'08',0,X'60',1
         CCW   X'92',0,X'60',5
         CCW   X'86',0,X'20',0
LLISTCCW EQU   *-LISTCCWS
CURTTR   DC    XL8'0'
         DS    0F
DIRTTR   DC    XL3'000001'        TTR FOR START OF FILE
         DC    F'0'
GASLISTA DC    F'0'
TTRLISTA DC    F'0'
PARMSAVE DC    F'0'
BUFFADDR DC    F'0'
BUFFSIZE DC    H'3120'
LRECL    DC    H'80'
*   DATA FOR DYNAMIC ALLOCATION
DYNPARM  DC    A(DYNRBP)
DYNRBP   DS    0F                 REQUEST BLOCK POINTER
         DC    X'80'
         DC    AL3(DYNRB)
DYNRB    DS    0F                 REQUEST BLOCK
LENGTH   DC    AL1(20)            1 BYTE LENGTH MUST BE 20
VERBCOD  DC    X'01'              1 BYTE VERB CODE
FLAGS1   DC    XL2'00'            2 BYTES FLAGS1
ERRORCOD DC    XL2'0'             2 BYTES ERROR CODE
INFOCODE DC    XL2'0'             2 BYTES INFO CODE
         DC    A(DYNTXT1)         POINTER
         DC    F'0'               RESERVED
         DC    F'0'               FLAGS2
DYNTXT1  DS    0F                 TEXT UNIT POINTERS
         DC    X'00'
         DC    AL3(DYNTU1)
         DC    X'00'
         DC    AL3(DYNTU2)
         DC    X'00'
         DC    AL3(DYNTU4)
         DC    X'80'
         DC    AL3(DYNTU1C)
DYNTU1   DS    0F                 DDNAME TEXT UNIT
         DC    X'0001'            KEY
         DC    X'0001'            NUMBER
         DC    X'0008'            LENGTH OF PARM.
DYNDDN   DC    C'PDSIN   '
DYNTU2   DS    0F
         DC    X'0002'            DSNAME
         DC    X'0001'
DYNDSNL  DC    X'002C'
DYNDSN   DC    CL44' '
DYNTU4   DS    0F
         DC    X'0004'            DISP = SHR
         DC    X'0001'
         DC    X'0001'
         DC    X'08'
DYNTU1C  DS    0F
         DC    X'001C'            FREE = CLOSE
         DC    X'0000'
         LTORG
         DCBD DSORG=PO
         CVT LIST=YES
DEBXTNT# EQU   16                 OFFSET IN DEB FOR # OF EXTENTS
DEBEXTNT EQU   32                 OFFSET IN DEB FOR DA EXTENT ENTRY
         END

PANELS USED BY PROGRAM

UNDEL01 panel

)BODY
+-------------------------%MEMBER undelete utility+---------------------
%OPTION%===>_ZCMD
+
+
+  Enter dataset name to be scanned for deleted members
+
+  DSNAME%===>_DYNDSN                                      +
+
+
+  valid line commands are:
+
+  %S+ browse deleted member
+
+  %K+ save member with name in MEMBNAME field
+
+
)END

UNDEL02 panel

)ATTR
~ TYPE(OUTPUT) INTENS(LOW)
$ TYPE(OUTPUT) INTENS(HIGH)
# TYPE(OUTPUT) INTENS(LOW)
@ TYPE(INPUT)  INTENS(LOW)
)BODY
+DELETED MEMBER LIST FOR #DYNDSN
%COMMAND ===>_ZCMD                                            %SCROLL%==
%
+C MEMBNAME TTR    SIZE   FIRST LINE OF MEMBER
+-----------------------------------------------------------------------
)MODEL
@Z@Z       $Z     @Z     ~Z
)INIT
 .HELP   = UNDEL04
 &VARS   = '(ZSEL,MEMBNAME,TTR,SIZE,DATA)'
 &AMT    = CURS
)END

UNDEL03 panel

)ATTR
~ TYPE(OUTPUT) INTENS(HIGH)
# TYPE(OUTPUT) INTENS(LOW)
@ TYPE(INPUT)  INTENS(LOW)
)BODY
+DELETED MEMBER AT TTR #TTR   +FROM #DYNDSN
%COMMAND ===>_ZCMD                                            %SCROLL%==
%
)MODEL
#Z
)INIT
 &VARS   = '(DATA)'
 &AMT    = CURS
)END

UNDEL04 panel

)BODY
+-----------------------%MEMBER undelete utility help +-----------------
%OPTION%===>_ZCMD
+
+
+  The following options are available from this screen.
+
+  %S+ select  - This line command will display the contents of the
+                deleted member to allow you to decide if this is the
+                member required. When this option is entered the%SIZE+
+                field can also be overtyped with the number of lines
+                to be displayed, this will speed up the time required
+                to retrieve the data.
+
+  %K+ keep    - This option requires the%MEMBNAME+field to be filled
+                in with a unique member name. This option then creates
+                an entry in the directory with the name specified and
+                thus restores the deleted member.
+
+
+
+
+
+
+
+                          Hit%PF3/PF15+to exit help
)END

UNDEL00 MESSAGE MEMBER

UNDEL001 'MEMBER SAVED' .ALARM=YES
'DELETED MEMBER SAVED WITH MEMBER NAME &STOWNAME'
UNDEL002 'ALREADY EXISTS' .ALARM=YES
'MEMBER &STOWNAME ALREADY EXISTS IN DATASET'
UNDEL003 'INVALID NAME' .ALARM=YES
'MEMBER NAME MUST BE ENTERED'

CLIST to invoke PROGRAM

PROC 0 DSN()
IF &DSN.. = . THEN ISPEXEC SELECT PGM(UNDEL00)
IF &DSN.. ¬= . THEN ISPEXEC SELECT PGM(UNDEL00) PARM(&DSN)
END


Wayne MacDonald
Systems Programmer
GIO (Australia)

