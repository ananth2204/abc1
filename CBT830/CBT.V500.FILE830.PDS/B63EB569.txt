Extended copy edit macro for ISPF/PDF

Have you ever wished you could copy data across a split screen or repeat
the copying of data without having to re-specify the source each time?
The following edit macro was developed out of frustration due to
ISPF/PDF's limitations in these two areas.

To invoke the edit macro, type CX on the command line, and use the
standard line command C to specify the source.  You may use C# or the
block command CC, as in a normal copy.  Use the standard line commands
A or B to specify the destination.

Once source lines have been processed with the CX command, repeated CX
commands with an A or B can be used to insert those copied lines.  If
the CX command is given without a line command, the last source
specified will be placed at the end of the member, and most importantly,
all this works across a split screen.

Just perform a CX command with source specified on one screen, and a CX
command on the other screen with a destination specified.

EDIT MACRO CX

Place this edit macro as member CX in a PDS in the SYSPROC
concatenation.  The numbers on the right-hand side refer to the
line-by-line comments that accompany the following edit macro.

CONTROL NOFLUSH NOMSG END(ENDO) NOCONLIST NOSYMLIST                /*
STEP000: -                                                         /*
    ISREDIT MACRO NO PROCESS                                       /*0A
    ISPEXEC CONTROL ERRORS RETURN                                  /*0B
                                                                   /*
    ISREDIT (CXNULL1,CXNULL2) = NULLS                              /*0C
    ISREDIT NULLS OFF                                              /*0D
    ISREDIT (CXTOP,CXBOT) = DISPLAY LINES                          /*0E
    IF &CXTOP > &STR(000000) THEN DO                               /*0F
       ISREDIT PROCESS DEST RANGE C                                /*0G
       SET &CC = &LASTCC                                           /*0H
       IF (&CC = 0) OR (&CC = 8) THEN GOTO STEP010                 /*0I
       ELSE IF (&CC = 4) OR (&CC = 12) THEN GOTO STEP020           /*0J
          ELSE DO                                                  /*0K
             ISPEXEC SETMSG MSG(CX001A)                            /*0L
             GOTO STEP990                                          /*0M
          ENDO                                                     /*
    ENDO                                                           /*
    ELSE DO                                                        /*0N
       ISREDIT PROCESS DEST                                        /*0O
       SET &CC = &LASTCC                                           /*0P
       IF &CC < 13 THEN GOTO STEP020                               /*0Q
       ELSE DO                                                     /*0R
          ISPEXEC SETMSG MSG(CX001B)                               /*0S
          GOTO STEP990                                             /*0T
       ENDO                                                        /*
    ENDO                                                           /*
                                                                   /*
STEP010: -                                                         /*1A
    SET &CXNUM = &STR(000000)                                      /*1B
    SET &CXINC = 1000000                                           /*1C
    ISREDIT (CXFIRST) = LINENUM .ZFRANGE                           /*1D
    ISREDIT (CXLAST) = LINENUM .ZLRANGE                            /*1E
    SET &CXTOTAL = &CXLAST - &CXFIRST + 1                          /*1F
    IF &CXTOTAL > 1000 THEN DO                                     /*1G
       ISPEXEC SETMSG MSG(CX001C)                                  /*1H
       GOTO STEP990                                                /*1I
    ENDO                                                           /*
    DO WHILE &CXFIRST ¬> &CXLAST                                   /*1J
       ISREDIT (CX&CXNUM) = LINE &CXFIRST                          /*1K
       ISPEXEC VPUT (CXNUM CX&CXNUM) PROFILE                       /*1L
       SET &CXFIRST = &CXFIRST + 1                                 /*1M
       SET &CXINC = &CXINC + 1                                     /*1N
       SET &CXNUM = &SUBSTR(2:7,&CXINC)                            /*1O
    ENDO                                                           /*
                                                                   /*
    ISREDIT RESET COMMAND .ZFRANGE .ZLRANGE                        /*1P
                                                                   /*
    IF &CC = 0 THEN GOTO STEP020                                   /*1Q
    ELSE DO                                                        /*1R
       ISPEXEC SETMSG MSG(CX000A)                                  /*1S
       GOTO STEP990                                                /*1T
    ENDO                                                           /*
                                                                   /*
STEP020: -                                                         /*2A
    SET &CXNUMA = &STR(000000)                                     /*2B
    SET &CXINCA = 1000000                                          /*2C
    ISPEXEC VGET (CXNUM) PROFILE                                   /*2D
    ISREDIT (CXAFTER) = LINENUM .ZDEST                             /*2E
                                                                   /*
    DO WHILE &CXNUMA ¬> &CXNUM                                     /*2F
       ISPEXEC VGET (CX&CXNUMA) PROFILE                            /*2G
       SET &CXA = &&CX&CXNUMA                                      /*2H
       SET &CXLINE = &NRSTR(&CXA)                                  /*2I
       ISREDIT LINE_AFTER &CXAFTER = DATALINE "&NRSTR(&CXLINE)"    /*2J
       SET &CXAFTER = &CXAFTER + 1                                 /*2K
       SET &CXINCA = &CXINCA + 1                                   /*2L
       SET &CXNUMA = &SUBSTR(2:7,&CXINCA)                          /*2M
       IF &CXNUMA = &STR(000000) THEN SET &CXNUMA = &STR(9999999)  /*2N
    ENDO                                                           /*
                                                                   /*
    ISREDIT RESET COMMAND                                          /*2O
    SET &CXTOTAL = &CXNUM + 1                                      /*2P
    ISPEXEC SETMSG MSG(CX000A)                                     /*2Q
                                                                   /*
STEP990: -                                                         /*9A
    ISREDIT NULLS &CXNULL1 &CXNULL2                                /*9B
    ISREDIT MEND                                                   /*9C
    IF &MAXCC > 12 THEN SET &CC = &MAXCC                           /*9D
    ELSE SET &CC = &STR(0)                                         /*9E
    EXIT                                                           /*9F
Comments
0A   Identify CLIST as an edit macro, do not process line commands.
0B   Return to edit macro on all errors.
0C   Get current nulls profile setting and save in variables CXNULL1 and
CXNULL2.
0D   Set profile to nulls off.  Nulls off prevents removal of leading blanks
from the copied lines.
0E   Get top and bottom line numbers and save in variables CXTOP and CXBOT.
0F   If top line number is greater than zero, the dataset has existing data
lines, which means the range line command can be processed.  If a range command
is processed on a dataset that has only insert lines, a severe error occurs.
This check prevents that from happening.
0G   Process destination and range line commands.  Use the character C for
specifying the range.
0H   Save condition code of process command in variable CC.
0I   If CC = 0 or 8, go to STEP010 to process the range.
0J   Else if CC = 4 or 12, go to STEP020 to process the destination.
0K   Else a severe error has occurred in the process command.
0L   Set message to 'CX MACRO ERROR, CODE &CC'.
0M   Go to END routine.
0N   Dataset has no existing data lines, so do not process range commands;
otherwise, a severe error will occur.
0O   Process destination line command.
0P   Save condition code of process command in variable CC.
0Q   If CC is less than 13 go to STEP020 to process the destination.
0R   Else a severe error has occurred in the process command.
0S   Set message to 'CX MACRO ERROR, CODE &CC'.
0T   Go to END routine.
1A   Start of range routine ('COPY FROM' routine).
1B   Set variable CXNUM to 000000.  The CXNUM variable will be appended to a
constant to create a unique variable, CX&CXNUM, where each line being copied

will be placed.  Refer to TSO/E manual CLISTS: Implementations and Reference for
information regarding the usage of double ampersands and symbolic variables.
1C   Set variable CXINC to 1 000 000.  The CXINC variable will be used to derive
the CXNUM variable in order to retain leading zeros in the CXNUM variable.
1D   Get first line number of range being processed and save in variable
CXFIRST.
1E   Get last line number of range being processed and save in variable CXLAST.
1F   Calculate total number of lines to be processed and save in variable
CXTOTAL.
1G   If total is greater than 1000 (this value can be changed).
1H   Set message to 'TOO MANY LINES FOR COPY'.
1I   Go to END routine.
1J   Perform for all lines of the range specified.
1K   Save line pointed to by CXFIRST into variable CX&CXNUM.
1L   Put variables CXNUM and CX&CXNUM into the profile pool.
1M   Increment CXFIRST by 1 to get next line in range.
1N   Increment CXINC by 1.
1O   Create CXNUM from CXINC by truncating leading digit.
1P   Clear all line messages in the range being processed.
1Q   If CC is 0 then destination was also entered, go to STEP020 to process
destination.
1R   Else only range was entered.
1S   Set message to 'CX MACRO COPY SUCCESSFUL'.
1T   Go to END routine.
2A   Start of destination routine ('COPY TO' routine).
2B   Set variable CXNUMA TO 000000.  The CXNUMA variable will be appended to a
constant to create a unique variable, CX&CXNUMA, which will be retrieved from
the profile pool.
2C   Set variable CXINCA to 1 000 000.  The CXINCA variable will be used to
derive the CXNUMA variable in order to retain leading zeros in the CXNUMA
variable.
2D   Get the CXNUM variable from the profile pool.
2E   Get line number of destination being processed and save in variable
CXAFTER.  ISPF/PDF returns 'before' destinations as 'after' destinations, so no
special code is needed to handle 'before' destinations.
2F   Perform for all copied lines in the profile pool.
2G   Get the CX&CXNUMA variable from profile pool.
2H   Set variable CXA = &&CX&CXNUMA.  First step of getting actual copied line.
Refer to TSO/E manual CLISTS: Implementations and Reference for information
regarding the usage of double ampersands and symbolic variables.
2I   Set variable CXLINE = CXA.  Last step of getting actual copied line.
2J   Put copied line after destination line.
2K   Increment CXAFTER by 1 to get next destination line.
2L   Increment CXINCA by 1.
2M   Create CXNUMA from CXINCA by truncating leading digit.
2N   Check to make sure CXNUMA has not wrapped around 1000, if it has end the
perform.
2O   Clear all line messages.
2P   Set CXTOTAL variable to total number of lines copied.
2Q   Set message to 'CX MACRO COPY SUCCESSFUL'.
9A   Start of END routine.
9B   Reset nulls setting to original values.
9C   End edit macro.
9D   If MAXCC greater than 12, set CC = MAXCC.
9E   Else set CC= 0.
9F   Exit the CLIST.
MESSAGES FOR EDIT MACRO CX
Place these messages as a member CX00 in a PDS in the ISPMLIB concatenation.
CX000A   'CX MACRO COPY SUCCESSFUL'    .ALARM=NO
'CX MACRO COPY SUCCESSFUL, &CXTOTAL LINES COPIED.'
CX001A   'CX MACRO ERROR, CODE &CC'    .ALARM=NO
'INVALID CONDITION CODE OF &CC, IN CX MACRO AT PROCESS DEST RANGE C.'
CX001B   'CX MACRO ERROR, CODE &CC'    .ALARM=NO
'INVALID CONDITION CODE OF &CC, IN CX MACRO AT PROCESS DEST.'
CX001C   'TOO MANY LINES FOR COPY '    .ALARM=NO
'TRIED TO COPY &CXTOTAL LINES.  CX MACRO SUPPORTS A MAX OF 1000 LINES.'


Sheldon Lee Lasky
Systems Programmer
City of Mesa (USA)  € Xephon 1988





























































