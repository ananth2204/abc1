Allocating GDGs from EXECs and CLISTs

There is a limitation in TSO/E Versions 2.1.1 and below which
precludes using the ALLOCATE command for GDGs specified
with relative generation numbers.  For example:

      ALLOCATE FI(TEST) DA('MY.GDG(-1)') SHR

will not work, while

      ALLOCATE FI(TEST) DA('MY.GDG.G0034V00') SHR

will succeed.

To overcome this limitation and make it possible to work with
relative GDG generation numbers in EXECs and CLISTs, I
developed the accompanying GOOVOO EXEC.  GOOVOO
may be called upon to translate a GDG DSN written in relative
notation into a fully-qualified DSN including the absolute
generation and version suffix.  GOOVOO is designed to be
invoked as a function or subroutine from another REXX
EXEC, or alternatively, executed from within a CLIST.  To
simplify coding the invocations of GOOVOO, it should reside
in the SYSPROC concatenation of the user's LOGON
procedure.

The REXX function call would look like this:

      absoluteGDGname = GOOVOO(relativeGDGname)

where relativeGDGname is of the form MY.GDG(-1) and
absoluteGDGname is returned in the form
MY.GDG.GnnnnV00.

Called as a REXX subroutine, where the returned value comes
back in the REXX variable 'result', the invocation would be:

      Call GOOVOO relativeGDGname
      absoluteGDGname = result

Invocation from a CLIST would take the form:

      %GOOVOO relativeGDGname

SYSOUTTRAP must be used in the CLIST to retrieve the
absolute GDG name which is returned with the 'say'
instruction from GOOVOO whenever GOOVOO is invoked as
a command (rather than as a function or subroutine).

If the base GDG name is passed to GOOVOO without any
parenthetical suffix, the current generation (ie +0) is assumed.

GOOVOO returns the character string 'ERROR' rather than an
absolute GDG name in the following cases:

1      No input argument DSN is provided

2      Input has a one-character relative generation other than 0

3      Plus sign (+) with a generation number other than 0

4      Non-numeric value to right of minus sign in generation number

5      Syntactically valid GDG name, but not in catalog

6      Requested relative number is beyond the number in the catalog.

GOOVOO does the translation by issuing a LISTCAT
command against the base GDG name and trapping the output
which contains a listing of all generations known to the
catalog.  It appends its own relative index number to the stem
variable 'gdg' for each absolute generation starting with 0 for
the current generation, 1 for the next oldest, and so on.  On
leaving the loop, gdg.0 contains the absolute name of the
current generation, gdg.1 will contain the name of the -1
generation, etc.  The absolute value of the input relative
generation number is then used to index to the desired entry in
the 'gdg.' stem variable array.

To test GOOVOO, after installing it in your SYSPROC
concatenation, run it as a command by entering:

      %GOOVOO relativeGDGname

GOOVOO determines how it was invoked and passes its return
value back via the 'say' instruction if invoked as a command,
or via the 'return' instruction if invoked as a function or
subroutine.  If the input is valid, the expected response should
be of the form:

      MY.GDG.GnnnnV00

otherwise the response should be:

      ERROR


GOOVOO REXX

/* REXX -------------------------------------------------------------*/
/* This exec returns the fully qualified DSN of a generation data    */
/* set from the input dsn with relative generation number.           */
/* If the DSN cannot be successfully resolved, the character string  */
/* ERROR is returned instead of the DSN.                             */
/*-------------------------------------------------------------------*/
/* get input relative gdg dsn into indsn variable */
Arg indsn .
/* initialize return value to ERROR */
answer = "ERROR"
/* if no input argument, go output ERROR value */
If indsn = "" Then Signal goback
/* strip off tickies, if present */
indsn = Strip(indsn,B,"'")
/* separate base and generation number portions of dsn */
Parse Var indsn basedsn "(" gen ")" .
/* base dsn without () defaults to generation 0 */
If gen = "" Then gen = "0"
/* one character generation number can only be zero */
If Length(gen) = 1 & gen <> "0" Then Signal goback
/* if generation number starts with a +, it can only be +0 */
If Left(gen,1) = "+" Then Do
   If (Length(gen) <> 2) | (Right(gen,1) <> "0") Then Signal goback
   gen = "0"  /* strip the + and leave just the 0 */
End
/* if gen number is negative, strip off the minus sign */
If Left(gen,1) = "-" Then gen = Right(gen,Length(gen)-1)
/* what's left has to be numeric, or it's an ERROR */
If Datatype(gen) <> "NUM" Then Signal goback
/* set to trap output of listcat command in stem variable o. */
Call OUTTRAP O.
/* list all the generations in the catalog */
"LISTCAT ENTRY('"basedsn"') GDG ALL"
/* non-zero from listcat means gdg name not in catalog */
If RC <> 0 Then Signal goback
/* prepare goovoo to get absolute value of relative generation number */
goovoo = -1
/* look backwards through listcat output, line by line */
Do l = o.0 To 1 By -1
   /* reaching the associations line, we've seen all the generations */
   If Word(o.l,1) = "ASSOCIATIONS" Then Leave
   /* bump goovoo to have relative number of this dsn */
   goovoo = goovoo + 1
   /* extract & save name in gdg. indexed by its relative number */
   gdg.goovoo = word(translate(o.l," ","-"),2)
End
/* if requested generation number is beyond what's cataloged, ERROR */
If gen > goovoo Then Signal goback
/* change value of answer from ERROR to the full dsn requested */
answer = gdg.gen
/* fall through to goback: */

/* routine to pass result back differently based on invocation method */
goback:
/* set invocation to COMMAND, FUNCTION, or SUBROUTINE */
Parse source . invocation .
If invocation = "COMMAND" Then Do
   /* COMMAND must pass back answer via Say instruction */
   Say answer
   Exit
End
Else Do
   /* FUNCTIONs and SUBROUTINEs have answer returned directly */
   Return answer
End


GOOVREXX REXX

The following REXX EXEC may be used to test the two
REXX interfaces to GOOVOO.  It assumes that GOOVOO is
in the SYSPROC concatenation.

/* rexx */
gdg = "your.relative.gdg(0)"
fqdsn = goovoo(gdg)
Say "Result of function:" fqdsn
Call goovoo gdg
fqdsn = result
Say "Result of call:" fqdsn


GOOVCLIS CLIST

The following code can be used to test the execution of
GOOVOO from the CLIST environment.

PROC 0
SET &SYSOUTTRAP = 1
EXEC 'your.rexx.exec.lib(GOOVOO)' 'your.relative.gdg(0)' EXEC
SET &ABSGDGDSN = &SYSOUTLINE1
WRITE RESULT OF EXEC IN ABSGDGDSN VARIABLE: &ABSGDGDSN


John Cornman
Senior Systems Programmer
Key Services Corporation (USA)                  c Xephon 1991

