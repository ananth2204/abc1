Displaying CA-1 configuration information


ASSEMBLER SOURCE FOR CA1VAR

CA1VAR  TITLE 'PROGRAM TO PLACE CA1 INFORMATION INTO REXX VARIABLES'
*-------------------------------------------------------------------*
* THIS PROGRAM GATHERS INFORMATION FROM CA-1 CONTROL BLOCKS AND     *
* CREATES REXX VARIABLES USING THE TSO VARIABLE ACCESS ROUTINE,     *
* IKJCT441.                                                         *
* EXAMPLE OF USE:                                                   *
* X= CA1VAR()                                                       *
* SAY CA1_TMC                                                       *
* REXX VARIABLES CREATED                                            *
* ----------------------                                            *
* CA1_VERSION            CA-1 VERSION                               *
* CA1_TVT_ADDR           CA-1 TVT ADDRESS                           *
* CA1_XSVC               CA-1 X-SVC NUMBER                          *
* CA1_YSVC               CA-1 Y-SVC NUMBER                          *
* CA1_TMC                CA-1 TMC DATASET                           *
* CA1_TMC_UNIT           CA-1 TMC UNIT ADDRESS                      *
* CA1_TMC_VOLSER         CA-1 TMC VOLSER                            *
* CA1_AUDIT              CA-1 AUDIT DATASET                         *
* CA1_AUDIT_UNIT         CA-1 AUDIT UNIT ADDRESS                    *
* CA1_AUDIT_VOLSER       CA-1 AUDIT VOLSER                          *
* CA1_PASSWORD           CA-1 PASSWORD                              *
* CA1_EXIT.I             CA-1 EXIT NAME                             *
* CA1_EXIT.ADDR.I        CA-1 EXIT ADDRESS                          *
* CA1_ACTIVE             CA-1 ACTIVE STATUS (Y/N)                   *
* CA1_INIT               CA-1 HAS BEEN INITIALIZED (Y/N)            *
* CA1_PASSWORD_REPLY     CA-1 PASSWORD REPLIED (Y/N)                *
* CA1_BATCH_ACTIVE       CA-1 IS BATCH ACTIVE (Y/N)                 *
* CA1_MVS_HOOKS          CA-1 MVS HOOK STATUS (OK/IN ERROR)         *
* CA1_WTO_HOOKS          CA-1 WTO INTERCEPT ACTIVE (Y/N)            *
* ATTRIBUTES: AMODE (31) RMODE (ANY) RENT REUS REFR                 *
* REGS USED                                                         *
* R1  - PARAMETER PASSED :                                          *
* R2  - COPY OF PARMS PASSED / WORK REGS                            *
* R3  - REXX EVALUATION BLOCK                                       *
* R4  - WORK REG                                                    *
* R5  - REXX PARAMETER TABLE                                        *
* R6  - CVT                                                         *
* R7  - TEMP ADDRESSABILITY TO DSECTS SUCH AS UCB                   *
* R8  - JESCT / TMS OPTIONS TABLE                                   *
* R9  - TVT (CA-1)                                                  *
* R10 - BRANCH AND LINK                                             *
* R11 - WORK AREA                                                   *
* R12 - BASE                                                        *
*-------------------------------------------------------------------*
CA1VAR   CSECT                      *
CA1VAR   AMODE 31                   *
CA1VAR   RMODE ANY                  *
         BAKR  R14,R0               * LINKAGE STACK
         LR    R12,R15              * COPY ENTRY ADDRESS TO BASE
         USING CA1VAR,R12           * ADDRESS IT
         MODID ,                    * EYECATCHER
         LR    R2,R1                * COPY PARMS PASSED
GETSTOR  EQU   *
         STORAGE OBTAIN,            * GET THE WORKAREA STORAGE         X
               LENGTH=WORKLEN,      * THIS MUCH                        X
               ADDR=(R11),          * PUT ADDRESS IN R11               X
               SP=0,KEY=8,          * SUBPOOL 0 STORAGE KEY 8          X
               LOC=ANY,             * ANYWHERE                         X
               COND=NO              * UNCONDITIONAL
         USING WORKAREA,R11         * ADDRESS WORKAREA
         LOAD  EP=IKJCT441          * GET HOLD OF IKJCT411
         ST    R0,@IKJT441          * STORE ENTRY ADDRESS
GETPARMS EQU   *
         USING EFPL,R2              * ADDR REXX FUNC PARMS
         L     R3,EFPLEVAL          * ADDR OF ADDR
         L     R3,0(R3)             * REXX EVAL BLOCK ADDR
         USING EVALBLOCK,R3         * ADDRESS IT
         L     R5,EFPLARG           * REXX ARG LIST
         USING ARGTABLE_ENTRY,R5    * ADDRESS ARG TABLE
GETSUBS  EQU   *
*--- LOOP THROUGH THE SSVT TO FIND THE CA-1 SUBSYSTEM 'TMS'        ---*
         L     R6,CVTPTR            * GET HOLD OF CVT ADDRESS
         USING CVTMAP,R6            * ADDRESS IT
         L     R8,CVTJESCT          * GET ADDRESS OF JESCT
         USING JESCT,R8             * USE THE DSECT
         L     R8,JESSSCT           * POINT TO FIRST SSCVT
READSSCT EQU   *
         USING SSCT,R8              * ADDRESS IT
         LTR   R8,R8                * IS THERE ONE ?
         BZ    NOTINST              * NO - CA-1 NOT INSTALLED
         CLC   SSCTSNAM(3),=C'TMS'  * IS IT CA-1 ?
         BE    GOTTMS               * YES - GET INFO
NEXTSSCT EQU   *
         L     R8,SSCTSCTA          * POINT TO NEXT SSCT
         B     READSSCT             * DO NEXT ONE
GOTTMS   EQU   *
* OKAY, FOUND THE TMS SUBSYSTEM. CA-1 INFO IS STORED IN THE TVT     *
* WHICH IS POINTED TO FROM THE SSCTSUSE (SUBSYSTEM USER FIELD).     *
         L     R9,SSCTSUSE          * GET CA-1 TVT ADDRESS
         USING TVT,R9               * ADDRESS USING CA-SUPPLIED MACRO
*--- GET CA-1 VERSION INFO                                       ---*
         CLC   TVID,=C'TVT'         * CHECK PROPER TVT
         BNE   NOTINST              * NOT CA-1
         MVC   NAME(12),=C'CA1_TVT_ADDR'
         MVC   NAMELEN,=F'12'       * SET LENGTH OF NAME
         LR    R15,R9               * COPY TVT ADDRESS
         CVH   R9,VALUE             * MAKE PRINTABLE
         MVC   VALUELEN,=F'8'       * SET LENGTH OF VALUE
         BAL   R10,LINK441          * CREATE VARIBALE
         MVC   NAME(11),=C'CA1_VERSION'
         MVC   NAMELEN,=F'11'       * SET LENGTH OF NAME
         XR    R15,R15              * CLEAR OUT REG
         ICM   R15,B'0001',TVLEVEL  * GET VERSION INFO
         CVH   R15,CWORK            * MAKE PRINTABLE
         MVC   VALUE(1),CWORK+6     * GET VERSION NUMBER
         MVI   VALUE+1,C'.'         * ADD A DOT
         MVC   VALUE+2(1),CWORK+7   * GET RELEASE NUMBER
         MVC   VALUELEN,=F'3'       * SET LENGTH OF VALUE
         BAL   R10,LINK441          * CREATE VARIABLE
*--- GET CA-1 X-SVC NUMBER                                       ---*
         MVC   NAME(8),=C'CA1_XSVC'
         MVC   NAMELEN,=F'8'        * SET LENGTH OF NAME
         XR    R15,R15              * CLEAR OUT REG
         ICM   R15,B'0001',TVXSVC+1 * GET X-SVC NUMBER (HEX)
         CVD   R15,PWORK            * CONVERT TO DEC
         MVC   CWORK(8),MASK1       * MOVE IN MASK
         ED    CWORK(8),PWORK+4     * MAKE PRINTABLE
         MVC   VALUE(3),CWORK+5     * MOVE IN VALUE
         MVC   VALUELEN,=F'3'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
*--- GET CA-1 Y-SVC NUMBER                                       ---*
         MVC   NAME(8),=C'CA1_YSVC'
         MVC   NAMELEN,=F'8'        * SET LENGTH OF NAME
         XR    R15,R15              * CLEAR OUT REG
         ICM   R15,B'0001',TVYSVC+1 * GET Y-SVC NUMBER (HEX)
         CVD   R15,PWORK            * CONVERT TO DEC
         MVC   CWORK(8),MASK1       * MOVE IN MASK
         ED    CWORK(8),PWORK+4     * MAKE PRINTABLE
         MVC   VALUE(3),CWORK+5     * MOVE IN VALUE
         MVC   VALUELEN,=F'3'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
*--- GET TMC UNIT INFO                                           ---*
         L     R7,TVTUCBAD          * GET ADDRESS OF TMC UCB ADDRESS
         L     R7,0(R7)             * GET TMC UCB
         USING UCBCMSEG,R7          * ADDRESS IT
         MVC   NAME(12),=C'CA1_TMC_UNIT'
         MVC   NAMELEN,=F'12'       * SET LENGTH OF NAME
         MVC   VALUE(3),UCBNAME     * GET CUA
         MVC   VALUELEN,=F'3'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(14),=C'CA1_TMC_VOLSER'
         MVC   NAMELEN,=F'14'       * SET LENGTH OF NAME
         MVC   VALUE(6),UCBVOLI     * GET VOLSER
         MVC   VALUELEN,=F'6'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
*--- GET AUDIT UCB INFO                                          ---*
         L     R7,TVAUCBAD          * GET ADDRESS OF AUDIT UCB ADDRESS
         L     R7,0(R7)             * GET AUDIT UCB
         USING UCBCMSEG,R7          * ADDRESS IT
         MVC   NAME(14),=C'CA1_AUDIT_UNIT'
         MVC   NAMELEN,=F'14'       * SET LENGTH OF NAME
         MVC   VALUE(3),UCBNAME     * GET CUA
         MVC   VALUELEN,=F'3'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(16),=C'CA1_AUDIT_VOLSER'
         MVC   NAMELEN,=F'16'       * SET LENGTH OF NAME
         MVC   VALUE(6),UCBVOLI     * GET VOLSER
         MVC   VALUELEN,=F'6'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
*--- GET VARIOUS CA-1 STATUS FLAGS                               ---*
         MVC   NAME(10),=C'CA1_ACTIVE'
         MVC   NAMELEN,=F'10'       * SET LENGTH OF NAME
         MVC   VALUE(3),=C'YES'     * ASSUME ACTIVE
         MVC   VALUELEN,=F'3'       * SET LENGTH OF VALUE
         TM    TVFLAG0,TV0ACTIV     * TEST ACTIVE STATUS
         BO    CA1ACTIV             * YES IT IS ACTIVE
         MVC   VALUE(3),=C'NO '     * SET INACTIVE
CA1ACTIV EQU   *
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(8),=C'CA1_INIT'
         MVC   NAMELEN,=F'8'        * SET LENGTH OF NAME
         MVC   VALUE(3),=C'YES'     * ASSUME INIT
         MVC   VALUELEN,=F'3'       * SET LENGTH OF VALUE
         TM    TVFLAG0,TV0INITC     * TEST FLAG
         BO    CA1INITC             * YES
         MVC   VALUE(3),=C'NO '     * SET TO NO
CA1INITC EQU   *
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(18),=C'CA1_PASSWORD_REPLY'
         MVC   NAMELEN,=F'18'       * SET LENGTH OF NAME
         MVC   VALUE(3),=C'YES'     * ASSUME REPLIED
         MVC   VALUELEN,=F'3'       * SET LENGTH OF VALUE
         TM    TVFLAG0,TV0PSWRD     * TEST FLAG
         BO    CA1PSWRD             * YES
         MVC   VALUE(3),=C'NO '     * SET TO NO
CA1PSWRD EQU   *
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(16),=C'CA1_BATCH_ACTIVE'
         MVC   NAMELEN,=F'16'       * SET LENGTH OF NAME
         MVC   VALUE(3),=C'YES'     * ASSUME BATCH ACTIVE
         MVC   VALUELEN,=F'3'       * SET LENGTH OF VALUE
         TM    TVFLAG0,TV0BATCH     * TEST FLAG
         BO    CA1BATCH             * YES
         MVC   VALUE(3),=C'NO '     * SET TO NO
CA1BATCH EQU   *
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(13),=C'CA1_MVS_HOOKS'
         MVC   NAMELEN,=F'13'       * SET LENGTH OF NAME
         MVC   VALUE(8),=C'IN ERROR'  ASSUME IN ERROR
         MVC   VALUELEN,=F'8'       * SET LENGTH OF VALUE
         TM    TVFLAG0,TV0HKERR     * TEST FLAG
         BO    CA1HKERR             * YES
         MVC   VALUE(2),=C'OK'      * SET TO OK
         MVC   VALUELEN,=F'2'       * SET LENGTH OF VALUE
CA1HKERR EQU   *
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(13),=C'CA1_WTO_HOOKS'
         MVC   NAMELEN,=F'13'       * SET LENGTH OF NAME
         MVC   VALUE(3),=C'YES'     * ASSUME WTO INTERCEPT ACTIVE
         MVC   VALUELEN,=F'3'       * SET LENGTH OF VALUE
         TM    TVFLAG2,TVTOSACT     * TEST FLAG
         BO    CA1WTO               * YES
         MVC   VALUE(3),=C'NO '     * SET TO NO
CA1WTO   EQU   *
         BAL   R10,LINK441          * CREATE VARIABLE
*--- GET CA-1 MASTER PASSWORD                                    ---*
         MVC   NAME(12),=C'CA1_PASSWORD'
         MVC   NAMELEN,=F'12'       * SET LENGTH OF NAME
         MVC   VALUE(8),TVMPW       * MOVE IN VALUE
         MVC   VALUELEN,=F'8'       * SET LENGTH OF VALUE
         BAL   R10,LINK441          * CREATE VARIABLE
CA1EXITS EQU   *
* GET CA-1 USER EXIT INFO                                           *
* THE USER EXIT INFORMATION IS HELD WITHIN A TABLE IN THE TVT       *
* EACH ENTRY IS :                                                   *
*    EXITNAME   DS  CL8    -  NAME OF EXIT                          *
*    EXITADDR   DS  F      -  ADDRESS OF EXIT                       *
         MVC   PCNT,=PL3'0'         * INIT COUNT
         LA    R7,TVEXITS           * POINT TO EXIT TABLE
EXITLOOP EQU   *
         CLC   0(8,R7),HEXFF        * END OF EXIT TABLE ?
         BE    ENDEXITS             * YES - GET OUT OF LOOP
         AP    PCNT,=PL3'1'         * UPDATE COUNT
         MVC   NAME(9),=C'CA1_EXIT.'
         MVC   NAMELEN,=F'9'        * SET LENGTH
         BAL   R10,STEMNAME         * CONSTRUCT STEM
         MVC   VALUE(8),0(R7)       * MOVE IN EXIT NAME
         MVC   VALUELEN,=F'8'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(14),=C'CA1_EXIT_ADDR.'
         MVC   NAMELEN,=F'14'       * SET LENGTH
         BAL   R10,STEMNAME         * CONSTRUCT STEM
         L     R15,8(R7)            * GET EXIT ADDRESS
         CVH   R15,VALUE            * MAKE PRINTABLE
         MVC   VALUELEN,=F'8'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
EXITNEXT EQU   *
         LA    R7,12(R7)            * GET NEXT EXIT ENTRY
         B     EXITLOOP             * LOOP BACK
ENDEXITS EQU   *
         MVC   NAME(10),=C'CA1_EXIT.0'
         MVC   NAMELEN,=F'10'       * SET LENGTH
         UNPK  UCNT,PCNT            * UNPACK NUMBER OF EXITS
         OI    UCNT+3,X'F0'         * REMOVE SIGN
         MVC   VALUE(4),UCNT        * SET VALUE
         MVC   VALUELEN,=F'4'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(15),=C'CA1_EXIT_ADDR.0'
         MVC   NAMELEN,=F'15'       * SET LENGTH
         MVC   VALUE(4),UCNT        * SET VALUE
         MVC   VALUELEN,=F'4'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
GETDSNS  EQU   *
* THE TMC AND AUDIT DATASET NAMES CAN BE RETRIEVED FROM THE CA-1    *
* OPTIONS TABLE.                                                    *
         L     R8,TVOPTSAD          * POINT TO OPTIONS TABLE
         USING TMSOPTS,R8           * ADDRESS IT
         MVC   NAME(7),=C'CA1_TMC'
         MVC   NAMELEN,=F'7'        * SET LENGTH OF NAME
         MVC   VALUE(44),U1TMCDSN   * MOVE IN TMC DATASET NAME
         MVC   VALUELEN,=F'44'      * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
         MVC   NAME(9),=C'CA1_AUDIT'
         MVC   NAMELEN,=F'9'        * SET LENGTH OF NAME
         MVC   VALUE(44),U1AUDDSN   * MOVE IN AUDIT DATASET NAME
         MVC   VALUELEN,=F'44'      * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
         B     RETURN00             * ALL DONE
NOTINST  EQU   *
* IF CA-1 IS NOT - INSTALLED WE PASS BACK A VALUE OF 'N/A' TO THE   *
* CALLER IN VARIABLE CA1_VERSION                                    *
         MVC   NAME(11),=C'CA1_VERSION'
         MVC   NAMELEN,=F'11'       * SET LENGTH OF NAME
         MVC   VALUE(3),=C'N/A'     * INDICATE NOT INSTALLED
         MVC   VALUELEN,=F'3'       * SET LENGTH
         BAL   R10,LINK441          * CREATE VARIABLE
RETURN00 EQU   *
         BAL   R10,FREESTOR         * FREE THE WORKAREA
         MVC   EVALBLOCK_EVLEN(4),=F'1'   SET LENGTH OF RESULT
         MVC   EVALBLOCK_EVDATA(1),=C'0'  MOVE IN RESULT DATA
         LA    R15,0                * SET RC TO ZERO
         PR                         * RETURN
ERROR    EQU   *
         ABEND 111,DUMP
*--- GENERAL PURPOSE ROUTINES                                    ---*
LINK441  EQU   *
* ROUTINE TO LINK TO IKJCT441 AND UPDATE THE TSO/REXX VARIABLE      *
* THIS ROUTINE SETS UP THE PARAMETER LIST FOR IKJCT441 AND LINKS    *
* TO ITS STORED ADDRESS TO CREATE THE REXX VARIABLE                 *
INITPARM EQU   *
         LA    R1,NAME              * POINT TO NAME
         ST    R1,@NAME             * STORE IT IN PARM VARIABLE
         LA    R1,VALUE             * POINT TO VALUE
         ST    R1,@VALUE            * STORE IT IN PARM VARIABLE
         LA    R1,@NAME             * POINT TO NAME POINTER
         ST    R1,@@NAME            * STORE IT IN PARM LIST
         LA    R1,ECODE             * POINT TO ENTRY CODE
         ST    R1,@ECODE            * STORE IT IN PARM LIST
         LA    R1,NAMELEN           * POINT TO NAME LENGTH
         ST    R1,@NAMELEN          * STORE IT IN PARM LIST
         LA    R1,@VALUE            * POINT TO VALUE POINTER
         ST    R1,@@VALUE           * STORE IT IN PARM LIST
         LA    R1,VALUELEN          * POINT TO VALUE LENGTH
         ST    R1,@VALUELN          * STORE IT IN PARM LIST
         LA    R1,TOKEN             * POINT TO TOKEN
         ST    R1,@TOKEN            * STORE IT IN PARM LIST
         OI    @TOKEN,X'80'         * INDICATE LAST PARM
CALL441  EQU   *
         LA    R1,JCTPARML          * POINT TO PARM LIST
         L     R15,@IKJT441         * LOAD UP ADDRESS OF IKJCT441
         BALR  R14,R15              * LINK TO ROUTINE
         LTR   R15,R15              * TEST RC
         BNZ   ERROR                * ABEND IF ERROR
         BR    R10                  * RETURN TO CALLER
FREESTOR EQU   *
*--- ROUTINE TO FREE THE WORK AREA STORAGE                       ---*
         STORAGE RELEASE,           * RELEASE WORKAREA STORAGE         X
               LENGTH=WORKLEN,      * THIS MUCH                        X
               ADDR=(R11),          * ADDRESS IN R11                   X
               SP=0,KEY=8,          * SUBPOOL 0 STORAGE KEY 8          X
               COND=NO              * UNCONDITIONAL
         BR    R10                  * RETURN
STEMNAME EQU   *
* ROUTINE TO CONSTRUCT A REXX STEM NAME FROM THE CORE VARIABLE      *
* NAME PLUS A PACKED INDEX COUNT.                                   *
         LA    R15,NAME             * POINT TO THE NAME
         A     R15,NAMELEN          * ADD ON LENGTH OF NAME
         UNPK  UCNT,PCNT            * UNPACK THE COUNT
         OI    UCNT+3,X'F0'         * GET RID OF SIGN
THOUSAND EQU   *
         CLI   UCNT,C'0'            * IS THERE A ZERO ?
         BE    HUNDRED              * YES - UCNT < 1000
         MVC   0(4,R15),UCNT        * ADD ON TO NAME
         L     R15,NAMELEN          * LOAD UP CURRENT LENGTH
         A     R15,=F'4'            * ADD ON FOUR
         ST    R15,NAMELEN          * STORE AS NEW LENGTH
         B     STEMDONE
HUNDRED  EQU   *
         CLI   UCNT+1,C'0'          * IS THERE A ZERO ?
         BE    TENS                 * YES - UCNT < 100
         MVC   0(3,R15),UCNT+1      * ADD ON TO NAME
         L     R15,NAMELEN          * LOAD UP CURRENT LENGTH
         A     R15,=F'3'            * ADD ON THREE
         ST    R15,NAMELEN          * STORE AS NEW LENGTH
         B     STEMDONE
TENS     EQU   *
         CLI   UCNT+2,C'0'          * IS THERE A ZERO ?
         BE    UNITS                * YES - UCNT < 10
         MVC   0(2,R15),UCNT+2      * ADD ON TO NAME
         L     R15,NAMELEN          * LOAD UP CURRENT LENGTH
         A     R15,=F'2'            * ADD ON TWO
         ST    R15,NAMELEN          * STORE AS NEW LENGTH
         B     STEMDONE
UNITS    EQU   *
         MVC   0(1,R15),UCNT+3      * ADD ON TO NAME
         L     R15,NAMELEN          * LOAD UP CURRENT LENGTH
         LA    R15,1(R15)           * ADD ON ONE
         ST    R15,NAMELEN          * STORE AS NEW LENGTH
STEMDONE EQU   *
         BR    R10
*--- CONSTANTS VARIABLES AND DSECTS                              ---*
HEXFF    DC    X'FFFFFFFFFFFFFFFF'
HEXZERO  DC    X'0000000000000000'
MASK1    DC    X'F020202020212020'
ECODE    DC    A(TSVEUPDT)          * UPDATE ENTRY CODE
WORKAREA DSECT                      * WORKAREA
NAME     DS    CL32                 * REXX VARIABLE NAME
NAMELEN  DS    F                    * REXX VARIABLE NAME LENGTH
VALUE    DS    CL64                 * REXX VARIABLE VALUE
VALUELEN DS    F                    * REXX VARIABLE VALUE LENGTH
         DS    0F                   *
UCNT     DS    F                    * UNPACK FIELD
PCNT     DS    PL3                  * PACKED COUNT
         DS    0F                   *
UWORK    DS    CL4                  * UNPACK WORK
PWORK    DS    D                    * PACKED WORK
CWORK    DS    CL16                 * CHARACTER WORK AREA
@IKJT441 DS    F                    * ADDRESS OF IKJCT441
@NAME    DS    A                    * ADDRESS OF VARIABLE NAME
@VALUE   DS    A                    * ADDRESS OF VARIABLE VALUE
TOKEN    DS    F                    * TOKEN
JCTPARML DS    0F                   * PARMLIST FOR IKJCT441
@ECODE   DS    F                    * ADDRESS OF ENTRY CODE
@@NAME   DS    F                    * ADDRESS OF @NAME
@NAMELEN DS    F                    * ADDRESS OF NAME LEN
@@VALUE  DS    F                    * ADDRESS OF @VALUE
@VALUELN DS    F                    * ADDRESS OF VALUE LENGTH
@TOKEN   DS    F                    * ADDRESS OF TOKEN
WORKLEN  EQU   *-WORKAREA
         IRXEFPL                    * REXX MAPPING MACROS
         IRXEVALB                   *
         IRXARGTB DECLARE=YES       *
         CVT DSECT=YES,LIST=NO      * MVS MAPPING MACROS
         IKJTSVT                    *
         IEFJESCT                   *
         IEFJSCVT                   *
         IEFUCBOB                   *
*                                   * CA-1 MAPPING MACROS
TVT      DSECT                      *
TVID     DS    CL3'TVT'             * IDENTIFIER
TVLEVEL  DS    XL1'51',X'00'        * RELEASE, NEWSLETTER
         DS    XL3'00' -            * RESERVED
TVHASHAD DS    A                    * PTR TO TMSHASH ROUTINE
TVSDATE  DS    PL4                  * CURRENT DATE
         DS    0F
TVXSVC   DS    H                    * DEFAULT X SVC
TVYSVC   DS    H                    * DEFAULT Y SVC
TVFLAG0  DS    X                    * FLAG BYTE 0
TV0ACTIV EQU   X'80'                * TMS IS ACTIVE
TV0INITC EQU   X'40'                * INITIALIZATION HAS JUST COMPLETD
TV0PSWRD EQU   X'20'                * PASSWORD HAS BEEN REPLIED
TV0DCBOP EQU   X'10'                * DCBS HAVE BEEN OPENED
TV0REIPL EQU   X'08'                * IPL MUST TAKE PLACE
TV0BATCH EQU   X'04'                * TMS IS BATCH ACTIVE
TV0RELOC EQU   X'02'                * RELOCATION INDICATOR
TV0HKERR EQU   X'01'                * HOOK IN ERROR INDICATOR
TVFLAG1  DS    X                    * RESERVED
TVFLAG2  DS    X                    * USED FOR WTO INTERCEPT FLAGS
TVTOSACT EQU   X'40'                * WTO INTERCEPT ACTIVE
TVFLAG3  DS    X                    * RESERVED
TVMPW    DS    CL8                  * CA1 PASSWORD
         DS    5F
         DS    0D                   * ALIGN
TVEXITS  DS    31CL12               * BEGINNING OF EXIT TABLE
         DS    10F
TVOPTSAD DS    A                    * PTR TO TMS OPTIONS TABLE
         DS    6F
TVTUCBAD DS    A                    * PTR TO TMC UCB ADDR
TVTDCBAD DS    A                    * PTR TO TMC DCB
TVTDCTAD DS    A                    * PTR TO TMC DEV CHAR TABLE
TVTRESAD DS    A                    * PTR TO TMC RESERVE LIST
TVTQNMAD DS    A                    * PTR TO TMS QNAME
TVTTMC   DS    A                    * PTR TO TMC RNAME
TVAUCBAD DS    A                    * PTR TO AUD UCB ADDR
TVADCBAD DS    A                    * PTR TO AUD DCB
TVADCTAD DS    A                    * PTR TO AUD DEV CHAR TABLE
TVARESAD DS    A                    * PTR TO AUD RESERVE LIST
TVAQNMAD DS    A                    * PTR TO TMS QNAME
TVAAUD   DS    A                    * PTR TO AUD RNAME
TMSOPTS  DSECT
U1OPTSID DS    CL8                  * TABLE ID
U1TMCDSN DS    CL44                 * TMS DATASET NAME
U1AUDDSN DS    CL44                 * AUDIT DATASET NAME
         END


REXX SOURCE FOR CA1INFO

/* REXX -        CA-1 Information Display Facility                   */
/* This REXX exec provides the ISPF interface to the ca1var pgm.     */
/* It moves the rexx variables created by ca1var() and presents      */
/* a panel containing useful CA-1 information.                       */
address ISPEXEC "ADDPOP"                         /* Init pop-ups     */
DISPLAY_CA1_INFO:                                /*                  */
  x = ca1var()                                   /* call routine     */
  if CA1_VERSION = 'N/A' then do                 /* if not installed */
    say 'CA-1 not installed on this system'      /* say so..         */
    address ISPEXEC "REMPOP"                     /* remove pop-ups.. */
    exit                                         /* ..and exit       */
    end                                          /*                  */
  CA1REL = CA1_VERSION                           /* get version      */
  CA1TVT = CA1_TVT_ADDR                          /* get TVT address  */
  CA1XVC = CA1_XSVC                              /* get x-svc        */
  CA1YVC = CA1_YSVC                              /* get y-svc        */
  CA1PWD = CA1_PASSWORD                          /* get password     */
  CA1ACT = CA1_ACTIVE                            /* active ?         */
  CA1INI = CA1_INIT                              /* initialized ?    */
  CA1BCH = CA1_BATCH_ACTIVE                      /* batch active ?   */
  CA1REP = CA1_PASSWORD_REPLY                    /* pwd replied to ? */
  CA1WTO = CA1_WTO_HOOKS                         /* wto intercept ?  */
  CA1HOK = CA1_MVS_HOOKS                         /* mvs hooks ok ?   */
  CA1TMC = CA1_TMC                               /* get tmc name     */
  CA1TMV = CA1_TMC_VOLSER                        /* get tmc volser   */
  CA1TMU = CA1_TMC_UNIT                          /* get tmc unit     */
  CA1AUD = CA1_AUDIT                             /* get audit name   */
  CA1AUV = CA1_AUDIT_VOLSER                      /* get audit volser */
  CA1AUU = CA1_AUDIT_UNIT                        /* get audit unit   */
  tabname = 'CA1INFO'                            /* name ISPF table  */
  varlist = 'names(CA1EXN CA1EXA)'               /* specify vars     */
  call TABLE_CREATE tabname varlist              /* create it        */
  i = 1                                          /* set loop count   */
  do while i <= CA1_EXIT.0                       /* set limit        */
    CA1EXN = CA1_EXIT.i                          /* get exit name    */
    CA1EXA = CA1_EXIT_ADDR.i                     /* get exit address */
    if CA1EXA = '0' then CA1EXA = 'n/a'          /* flag inactive    */
    address ISPEXEC "TBADD CA1INFO"              /* add to table     */
    i = i + 1                                    /* incr count       */
    end                                          /*                  */
  address ISPEXEC "TBTOP CA1INFO"                /* go to table top  */
DISPLAY_CA1_PANEL:                               /* show panel...    */
  ztdmark = ' '                                  /* blank eod mark   */
  address ISPEXEC "TBDISPL CA1INFO PANEL(CA1INFO)"
  if rc >= 8 then do                             /* PF3 ?            */
    call TABLE_ERASE tabname                     /* erase table      */
    address ISPEXEC "REMPOP"                     /* remove pop-ups   */
    exit                                         /* and exit         */
    end                                          /*                  */
  call TABLE_ERASE tabname                       /* erase table      */
  call DISPLAY_CA1_INFO                          /* get info again   */
exit                                             /*                  */
/*-------------------------------------------------------------------*/
/* General routines                                                  */
/*-------------------------------------------------------------------*/
TABLE_CREATE:                                    /* create ISPF tab  */
  arg table VARLIST                              /* accept args      */
  address ISPEXEC "CONTROL ERRORS RETURN"        /* return on error  */
  address ISPEXEC "TBOPEN "table                 /* try to open tab  */
  if rc = 8 then                                 /* if not found..   */
    do                                           /*                  */
    address ISPEXEC "TBCREATE "table varlist     /* create it..      */
    address ISPEXEC "TBCLOSE "table              /* and then close   */
    end                                          /*                  */
    else address ISPEXEC "TBCLOSE "table         /* force close      */
  address ISPEXEC "TBOPEN "table                 /* open table       */
  address ISPEXEC "CONTROL ERRORS CANCEL"        /* accept errors    */
  return                                         /*                  */
TABLE_ERASE:                                     /*                  */
  arg table                                      /* accepts arg      */
  address ISPEXEC "CONTROL ERRORS RETURN"        /* return on error  */
  address ISPEXEC "TBCLOSE "table                /* close table      */
  address ISPEXEC "TBERASE "table                /* erase table      */
  address ISPEXEC "CONTROL ERRORS CANCEL"        /* accept errors    */
  return                                         /*                  */


ISPF PANEL SOURCE FOR CA1INFO

)ATTR
  $ TYPE(OUTPUT) INTENS(LOW) COLOR(GREEN)
  # TYPE(OUTPUT) INTENS(LOW) COLOR(RED)
  @ TYPE(OUTPUT) INTENS(LOW) COLOR(YELLOW)
  ! TYPE(TEXT) INTENS(LOW) COLOR(TURQ)
)BODY WINDOW(64,20)
%COMMAND ===>_ZCMD                                    +
%
%CA-1 Release   :$CA1REL+
%!X-SVC         :$CA1XVC+         !Y-SVC       :$CA1YVC+
%!Password      :$CA1PWD  +       !TVT Address :$CA1TVT  +
%Status
%!Active        :$CA1ACT+         !Initialized :$CA1INI+
%!Batch Active  :$CA1BCH+         !Pwd Replied :$CA1REP+
%!WTO Intercept :$CA1WTO+         !MVS Hooks   :$CA1HOK  +
%TMC
%!Dataset Name  :$CA1TMC                                      +
%!Volser        :$CA1TMV+         !Unit        :$CA1TMU+
%Audit
%!Dataset Name  :$CA1AUD                                      +
%!Volser        :$CA1AUV+         !Unit        :$CA1AUU+
%User Exits
%!Exit Name       Exit Address
)MODEL
 @CA1EXN    +    $CA1EXA  +
)INIT
 &ZWINTTL = 'CA-1 Configuration'
)REINIT
)PROC
)END


Rob Scott
MVS Consultant (UK)                     c Xephon 1996

