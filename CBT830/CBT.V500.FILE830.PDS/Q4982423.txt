Displaying TSO command output

With TSO Version 2 our shop got REXX, and with ISPF
Version 3 we got ISPF windows. I wanted to write something
that would demonstrate some of the features of REXX and the
Dialogue Tag Language (DTL).

Initially I wrote an EXEC that reformatted the output from the
LISTA ST command, put it into an ISPF table, and then
displayed the table in a window. This allowed people to scroll
through the output to find what they wanted. To demonstrate a
few other options I had an action bar to have the data sorted
into either DDNAME or dataset name order and another for the
EXEC to put itself into a table so that people could browse the
REXX code.

Not having access to a session manager I decided to create a
more general function that I've called '$'. '$' takes the output
from a TSO command, puts it into an ISPF table, and then
displays the table in an ISPF window. The data can then be
browsed using PF7 and PF8. Lines longer than 72 characters
are folded into multiple table lines.

An obvious extension is a FIND command but as I've enjoyed
adding my own little bits to things I've obtained from MVS
Update I'll leave that as an exercise for the user.

The parameters passed to SPDTCL when processing the DTL
are:

      (NOKANA KEYLAPPL=ISP

The EXEC can be executed from the command line like this:
      COMMAND ===> TSO $ any tso command


THE REXX SOURCE

/* REXX */
 * This exec puts output from TSO commands into a table so that it
 * can be scrolled up and down and browsed at one's leisure.
ADDRESS ISPEXEC
/*
 * Conditionally LIBDEF the panel and message libraries.  This may mean
 * that the EXEC doesn't work but it also means we won't muck up
 * other peoples environments.  We could exit if we got an error but
 * from what library would the error message come?
 */
"LIBDEF ISPPLIB DATASET ID('panel.library') COND"
LLIBRC = RC
"LIBDEF ISPMLIB DATASET ID('message.library') COND"
MLIBRC = RC
/*
 * Get the command and make sure there is one.
 */
arg COMMAND
If COMMAND = '' Then Do
   'SETMSG MSG(DOLA001)'
   Signal Exit
End
/*
 * Execute the command trapping the output.
 */
Dummy = Outtrap('OUTPUT.','*','noconcat')
ADDRESS TSO "TSOEXEC " Command
/*
 * Create a table to put the results in.  If we get an error presume
 * that we have been called recursively and put out a message.
 */
'TBCREATE text NAMES(line) NOWRITE'
If RC ¬= 0 Then Do
   'SETMSG MSG(DOLA002)'
   Signal Exit
End
/*
 * Put the results in the table.  Put a X'00' at the beginning of the
 * first line otherwise leading blanks are removed and the output is
 * not formatted as expected. Naturally we fold the output to fit on the
 * screen.
 */
Do I = 1 to OUTPUT.0
   line = Strip('00'x||output.I,'T')
   Do While Length(line) > 72
      Blank = Lastpos(' ',Substr(line,1,72))
      If Blank = 0 then
         Blank = 72
      Saveline = Substr(line,Blank+1)
      Line = Substr(line,1,Blank)
      'TBADD text MULT('output.0')'
      Line = Saveline
   End
   If Length(line) > 0 then
      'TBADD text MULT('output.0')'
End
/*
 * Go to the top of the table then display it.  Put the top LH corner
 * of the window as close to the top LH corner of the screen as
 * possible.
 * If you would rather END from the window qualify the TBDISPL statement
 * with a "Do Until RC ¬= 0 ... End" or "Do While RC = 0 ... End".
 */
'TBTOP text'
'ADDPOP COLUMN(-5) ROW(-5)'
ZWINTTL = 'Output from' COMMAND
'TBDISPL text PANEL(DOLA001)'
'TBEND text'
'REMPOP'
Exit:
/*
 * If our LIBDEFs worked then undo them.  If we didn't do it this
 * way we could cause others problems.
 */
If LLIBRC = 0 Then
   ISPEXEC LIBDEF ISPPLIB
If MLIBRC = 0 Then
   ISPEXEC LIBDEF ISPMLIB
Exit


THE DTL TO CREATE THE PANELS AND WINDOWS

<!DOCTYPE DM SYSTEM()>
<!-- GML TO CREATE PANELS FOR THE EXEC $ --!>
<MSGMBR NAME=DOLA00>
 <MSG suffix=1>$ expects a TSO command to execute
 <MSG suffix=2>$ cannot be called from within itself
</MSGMBR>
<!-- HELP PANEL DEFINITION --!>
<HELP NAME=DOLAH01 WIDTH=50 DEPTH=10>TSO command output
 <AREA>
  <INFO>
   <P>This is the output from a TSO command placed in an ISPF table
   so that it can be browsed.  Scrolling through the output is done
   with PF7 and PF8.  To leave this window press END.  To leave the
   scrolling window press Enter.
  </INFO>
 </AREA>
</HELP>
<!-- PANEL DEFINITION --!>
<!--                                                              --!>
<!--  The keylist ISPHELP is used because it was available and it --!>
<!-- has PF7 & PF8 defined as UP & DOWN.                          --!>
<!--                                                              --!>
<!--  The depth of 21 fits the window nicely on the screen if you --!>
<!-- SPLIT with the cursor on the top line of the screen.  If you --!>
<!-- SPLIT with the cursor on the command line (line 2) then to   --!>
<!-- have the bottom line of the window drawn on the screen       --!>
<!-- reduce the depth to 20.                                      --!>
<!--                                                              --!>
<PANEL NAME = DOLA001
       HELP = DOLAH01
       KEYLIST = ISPHELP
       DEPTH = 21
       WIDTH = 76  >
<!-- LIST FOR ACCESSING VARIABLES --!>
<VARLIST>
<VARDCL NAME = line >
</VARDCL>
</VARLIST>
<!-- ACTION BAR DEFINITION --!>
<AB>
<!-- ACTION BAR --!>
<ABC>Help
<PDC>Extended help
<ACTION RUN=EXHELP>
</AB>
<!-- AREA : THE SCROLLABLE PORTION OF THE PANEL --!>
<AREA>
<!-- SCROLLABLE LIST DISPLAY AREA CONSISTING OF DATA COLUMNS --!>
<LSTFLD>
<LSTCOL DATAVAR = line
        USAGE = OUT
        ENTWIDTH = 72 >
        TSO command output
</LSTFLD>
</AREA>
<!-- COMMAND ENTRY AREA --!>
<CMDAREA PMTLOC = BEFORE  >
         Command
</PANEL>


Adrian Gallagher
BHP IT (Australia)            c BHP IT 1992

