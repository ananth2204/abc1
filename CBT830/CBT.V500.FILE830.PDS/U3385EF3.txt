Timestamp conversion utility

I have been frustrated for a long time about being unable to
find a facility to convert timestamps (as found in dumps, in
VSAM statistics data, and in other software such as CA-ACF2
etc) into a form that can be easily understood. In desperation, I
decided to write a TSO command that would accept a
timestamp (STCK format up to 16 bytes) and convert it into
both Gregorian and Julian format with an accuracy up to the
microsecond level: this means only the last 3 bytes are dropped
off the result.

STCK, as I have called it, will accept less than 16 bytes and
will zero fill to the left in this event. I doubt if this facility will
be used much as any timestamp with a zero in the top byte
represents a date in the early 1900s. I considered zero filling to
the right, but decided against this as it is usually the final 5 or 6
bytes that will make all the difference when comparing
timestamps from a dump. I am also still considering adding
code to convert all 16 bytes and would not like to make the last
3 bytes redundant at this time.

I have checked the accuracy of the program against the
timestamp examples shown in the Principles of Operations
manual. I would suggest that this is a good technique for
ensuring that the program has been coded correctly if the
program is implemented.

STCK will reject any timestamps longer than 16 bytes or
containing non-hexadecimal characters.

         TITLE 'TSO COMMAND TO CONVERT STCK TIMESTAMP TO READABLE'
*      THIS TSO COMMAND WILL CONVERT A STCK TIMESTAMP AND PROVIDE    *
*      A READABLE DATE IN BOTH GREGORIAN AND JULIAN FORMAT.          *
*      MACROS USED - $REGS                                           *
STCK     AMODE 31
STCK     RMODE 24
STCK     CSECT
         $REGS
         STM   R14,R12,12(R13)              SAVE REGS
         LR    R12,R15                      SET UP ADDRESSABILITY
         USING STCK,R12                     ADDRESSABILITY TO BASE R12
         LR    R10,R1                       SAVE PARAMETER ADDRESS
         USING CPPL,R10                     ADDRESSABILITY TO CPPL
         B     A010                         BRANCH AROUND EYE-CATCHER
         DC    C'STCK - CONVERT TIMESTAMP TO READABLE FORMAT'
         DC    C' ASSEMBLE DATE= '
         DC    CL8'&SYSDATE'
         DC    C' ASSEMBLE TIME= '
         DC    CL8'&SYSTIME'
*        SET UP SAVE AREA
         DS    0H
A010     LA    R1,MAINWORK                  LOAD ADDRESS OF SAVEAREA
         ST    R13,4(R1)                    STORE OLD SAVEAREA ADDR
         ST    R1,8(R13)                    CHAIN SAVEAREAS
         LR    R15,R13                      SAVE OLD SAVAREA ADDR
         LR    R13,R1                       SET NEW SAVEAREA ADDR
         B     B010                         END OF LINKAGE - START PROG
*        RESTORE ENVIRONMENT AND EXIT
R010     DS    0H
         SR    R15,R15                      CLEAR R15
         L     R13,4(R13)                   RELOAD OLD SAVE AREA ADDR
         L     R14,X'10'                    LOAD CVT ADDRESS
         TM    X'74'(R14),X'80'             XA ?
         BZ    R020                         NO
         LM    R1,R12,24(R13)               RELOAD REGS
         L     R14,12(,R13)                 RELOAD R14
         BSM   0,R14                        RETURN
R020     LM    R1,R12,24(R13)               RELOAD REGS
         L     R14,12(,R13)                 RELOAD R14
         BR    R14                          RETURN
*        START THE PROGRAM
B010     DS    0H
         LA    R11,4095(R12)                SET UP BASE REGS
         LA    R11,1(R11)                   SET UP BASE REGS
         USING STCK+4096,R11
         LA    R2,IOPLADS                   GET THE ADDR OF THE IOPL
         USING IOPL,R2                      ADDRESS IT
         MVC   IOPLUPT(4),CPPLUPT           MOVE IN THE UPT
         MVC   IOPLECT(4),CPPLECT           MOVE IN THE ECT
         LA    R4,ECBADS                    LOAD THE ECB ADDR
         ST    R4,IOPLECB                   STORE IN THE ECB
*        CLEAR THE SCREEN
         DS    0H
         LA    0,3                          GET TPUT OPTION BYTE
         SLL   0,24                         SHIFT TO HIGH ORDER
         LA    1,=X'F1115D7E114040133C404000'
         OR    1,0                          COPY TPUT OPTION
         LA    0,12                         SET SIZE FOR TPUT
         SVC   93                           ISSUE TPUT SVC
         TPUT  HDR1,78                      WRITE HEADER LINE
         TPUT  BLANX,78                     WRITE BLANK LINE
*        PARSE THE COMMAND
         DS    0H
         MVC   PPLUPT,CPPLUPT               MOVE CPPL VALUES TO PPL
         MVC   PPLECT,CPPLECT
         MVC   PPLCBUF,CPPLCBUF
         CALLTSSR EP=IKJPARS,MF=(E,STCKPPL) LINK TO PARSE ROUTINE
         B     B020(R15)                    BRANCH ON RETURNED CODE
B020     B     B100                         PARSE OKAY
         B     B904                         PARSE UNABLE TO PROMPT
         B     B908                         USER ATTENTION'ED OUT
         B     B912                         INVALID PARSE DATA
         B     B916                         SPACE NOT AVAILABLE IN RGN
         B     B920                         VALIDITY CHECKING ERROR
         B     B924                         CONFLICTING PARSE PARMS
         B     B928                         TERMINAL DISCONNECTED
*        COMMAND OKAY SO PROCESS THE TIMESTAMP
         DS    0H
B100     CLC   PPLANS,=X'FF000000'          CHECK ANSWER ADDRESS
         BE    B990                         PARSE FAILED
         L     R3,PPLANS                    LOAD THE ANSWER ADDRESS
         USING IKJPARMD,R3                  ADDRESS THE PDL
         LTR   R3,R3                        TEST THE ADDRESS
         BZ    B990                         ANSWER ADDRESS IS ZERO
*        SETUP TO CONVERT INPUT TO USABLE FORM
         DS    0H
B105     L     R6,TIMESTMP                  LOAD ADDRESS OF TIMESTAMP
         LH    R7,TIMESTMP+4                LOAD LENGTH OF TIMESTAMP
         LA    R4,TMSTMP                    LOAD R4 WITH O/P AREA ADDR
         LA    R5,16                        LOAD MAXIMUM LENGTH
         SR    R5,R7                        SUBTRACT INPUT LENGTH
         AR    R4,R5                        GET OFFSET INTO O/P AREA
         LR    R5,R7                        SAVE THE CORRECT LENGTH
         BCTR  R5,0                         DECREMENT FOR EX AND ADD
         EX    R5,MVTMSTMP                  MOVE IN THE TIMESTAMP
         AR    R6,R5                        ADD LENGTH TO INPUT ADDR
         LA    R4,0                         CLEAR R4 READY FOR INPUT
         LA    R8,0                         CLEAR R8 READY FOR RESULT
         LA    R9,0                         CLEAR R9 AS WELL
*        ITERATION OF CHANGE INPUT FROM EBCDIC TO BINARY
         DS    0H
B110     ICM   R4,1,0(R6)                   GET LAST CHAR
         CL    R4,=F'193'                   IS IT HEX ?
         BL    B900                         NO, SO SAY ERROR
         CL    R4,=F'249'                   IS IT HEX ?
         BH    B900                         NO, SO SAY ERROR
         CL    R4,=F'198'                   IS IT HEX ?
         BNH   B115                         YES, SO OKAY
         CL    R4,=F'240'                   IS IT HEX ?
         BL    B900                         NO, SO SAY ERROR
         B     B120                         NUMERIC CHAR, SO CALCULATE
*        DO THE CONVERSION FOR HEX CHARACTERS
         DS    0H
B115     S     R4,=F'183'                   NO, SO CHANGE FROM EBCDIC
         B     B130                         SAVE IT
*        DO THE CONVERSION FOR HEX NUMBERS
         DS    0H
B120     S     R4,=F'240'                   CHANGE HEX TO NUMBER
*        SET THE RESULT INTO R8 & R9 IN BINARY
         DS    0H
B130     SLL   R4,28(0)                     SHIFT RESULT TO TOP OF R4
         OR    R8,R4                        OR WITH R8
         BCT   R7,B135                      TEST COUNT
         B     B140                         ZERO, SO FINISHED
*        CONTINUE PROCESSING CHARACTERS
         DS    0H
B135     SRDL  R8,4(0)                      MOVE TOWARD THE END OF R9
         BCTR  R6,0                         POINT TO PREVIOUS CHAR
         LA    R4,0                         CLEAR R4
         B     B110                         REPEAT PROCESS
*        RESULT NOW IN R8 & R9
         DS    0H
B140     LA    R4,16                        LOAD MAX NO. OF CLOCK CHARS
         LH    R7,TIMESTMP+4                GET LENGTH OF INPUT
         SR    R4,R7                        GET DIFFERENCE
         MH    R4,=H'4'                     CALCULATE SHIFT VALUE
         SRDL  R8,0(R4)                     SHIFT TO PROPER PLACE
*        NOW CONVERT TIMESTAMP TO READABLE DATE
         DS    0H
B150     SRDL  R8,12(0)                SHIFT OUT < MICROSECONDS
         D     R8,MICS                 DIVIDE TO GIVE MINUTES (IN R9)
         ST    R8,RMICS                STORE REMAINDER MICS FOR LATER
         LA    R8,0                    CLEAR R8
         D     R8,MINS                 DIVIDE TO GIVE HRS (IN R9)
         ST    R8,RMINS                STORE REMAINDER OF MINUTES
         LA    R8,0                    CLEAR R8
         D     R8,HRS                  DIVIDE TO GIVE DAYS (IN R9)
         ST    R8,RHRS                 STORE REMAINDER OF HOURS
         ST    R9,RDAYS                STORE NUMBER OF DAYS
         LA    R8,0                    CLEAR R8
         L     R9,RMICS                RELOAD MICROSECONDS
         D     R8,MICSS                DIVIDE TO GIVE SECONDS
         ST    R8,RMICS                STORE REMAINDER OF MICROSECONDS
         ST    R9,RSECS                STORE REMAINDER OF SECONDS
         LA    R8,0                    CLEAR R8
         L     R9,RDAYS                RELOAD NUMBER OF DAYS
         LA    R9,1(R9)                ADD 1 TO SHOW THE PROPER DAY
         LR    R5,R9                   LOAD DAY NUMBER INTO R5
         LA    R4,0                    CLEAR R4
         D     R4,=F'7'                DIVIDE BY 7 TO GIVE DAY VALUE
         MH    R4,=H'3'                MULTIPLY TO GIVE TABLE POINTER
         LA    R5,DAYTABLE             GET ADDRESS OF DAY TABLE
         AR    R5,R4                   GET TABLE + OFFSET
         MVC   DAY(3),0(R5)            MOVE IN THE DAY
         D     R8,YRSX4                DIVIDE DAYS BY DAYS IN 4 YEARS
         LTR   R9,R9                   IS YEAR BETWEEN 1900 AND 1904 ?
         BZ    B180                    YES, SO SPECIAL TREATMENT
         LA    R8,1(R8)                ADD 1 TO ALLOW FOR 1900
         MH    R9,=H'4'                MULTIPLY YEAR BY 4 = 4 YR START
         CL    R8,=F'366'              DAY IS IN THE LEAP YEAR ?
         BH    B160                    NO, SO CONTINUE
         LA    R7,LTABLE               YES, SO LOAD ADDR OF LEAP YR TAB
         B     B205                    AND PASS TO JULIAN CALC RTN
B160     CL    R8,=F'731'              DAY IS IN THE 2ND YEAR ?
         BH    B165                    NO, SO CONTINUE
         LA    R9,1(R9)                YES, SO ADD A YEAR
         S     R8,=F'366'              SUBTRACT THAT YEAR IN DAYS
         B     B200                    AND PASS TO JULIAN CALC RTN
B165     CL    R8,=F'1096'             DAY IS IN THE 3RD YEAR ?
         BH    B170                    NO, SO CONTINUE
         LA    R9,2(R9)                YES, SO ADD TWO YEARS
         S     R8,=F'731'              SUBTRACT THOSE YEARS IN DAYS
         B     B200                    AND PASS TO JULIAN CALC RTN
B170     CL    R8,=F'1461'             DAY IS IN THE 4TH YEAR ?
         BH    B995                    NO, SO ERROR ?
         LA    R9,3(R9)                YES, SO ADD THREE YEARS
         S     R8,=F'1096'             SUBTRACT THOSE YEARS IN DAYS
         B     B200                    PASS TO JULIAN CALC RTN
*        CALCULATE FOR YEAR 1900 - 1903
         DS    0H
B180     CL    R8,=F'365'              DAY IS IN 1900 ?
         BNH   B200                    YES, SO PASS TO JULIAN CALC RTN
         CL    R8,=F'730'              DAY IS IN 1901 ?
         BH    B190                    NO, SO CONTINUE
         LA    R9,1(R9)                YES, SO ADD A YEAR
         S     R8,=F'365'              SUBTRACT THAT YEAR IN DAYS
         B     B200                    AND PASS TO JULIAN CALC RTN
B190     CL    R8,=F'1095'             DAY IS IN 1902 ?
         BH    B195                    NO, SO CONTINUE
         LA    R9,2(R9)                YES, SO ADD TWO YEARS
         S     R8,=F'730'              SUBTRACT THOSE YEARS IN DAYS
         B     B200                    AND PASS TO JULIAN CALC RTN
B195     CL    R8,=F'1460'             DAY IS IN 1903 ?
         BH    B205                    NO, SO ERROR ?
         LA    R9,3(R9)                YES, SO ADD THREE YEARS
         S     R8,=F'1095'             SUBTRACT THOSE YEARS IN DAYS
*        CALCULATE MONTH
         DS    0H
B200     LA    R7,YRTABLE              LOAD ADDRESS OF MNTH/YEAR TABLE
B205     CVD   R8,JULDAY               SAVE DAY IN JULIAN FORMAT
         A     R9,=F'1900'             ADD 1900 TO GIVE FULL YEARS
         LA    R6,13                   LOAD LOOP COUNTER
B210     CH    R8,0(,R7)               COMPARE DAY TO TABLE ENTRY
         BNH   B215                    MONTH FOUND
         LA    R7,2(R7)                INCREMENT TABLE POINTER
         BCT   R6,B210                 NOT FOUND, SO TRY NEXT ENTRY
         B     B995                    OOPS, DAY > 365 (366)
B215     MH    R6,=H'4'                MULTIPLY TO GET MONTH ENTRY
         LA    R5,MONTABLE             LOAD ADDRESS OF MONTH TABLE
         AR    R5,R6                   GET MONTH VALUE
         MVC   MNTH(4),0(R5)           MOVE IN MONTH
         SH    R7,=H'2'                GET PREVIOUS DAYS UP TO MONTH
         LH    R5,0(,R7)               LOAD INTO R5
         SR    R8,R5                   GET DAYS INTO THE MONTH
         CVD   R8,MNTHDAY              CONVERT TO PACKED DECIMAL
         MVC   MSG1(5),=X'4020212040'  LOAD EDIT MASK
         ED    MSG1(5),MNTHDAY+6       EDIT TO PRINT
         CVD   R9,PYEAR                CONVERT TO PACKED DECIMAL
         MVC   MSG2(7),=X'40202120202040' LOAD EDIT MASK
         ED    MSG2(7),PYEAR+5         EDIT TO PRINT
         MVC   MSG3(5),=X'4020212040'  LOAD EDIT MASK
         ED    MSG3(5),JULDAY+6
*        MAKE THE TIME READABLE
         DS    0H
         L     R4,RHRS                 LOAD HOURS
         MH    R4,=H'100'              MULTIPLY
         A     R4,RMINS                ADD MINUTES
         MH    R4,=H'100'              MULTIPLY AGAIN
         A     R4,RSECS                ADD SECONDS
         CVD   R4,DECTIME              CONVERT TO PACKED DECIMAL
         MVC   OUTTIME(10),=X'402021207A20207A2020' LOAD EDIT MASK
         ED    OUTTIME(10),DECTIME+4   EDIT TO PRINT
         L     R4,RMICS                LOAD MICROSECONDS
         CVD   R4,DECTIME1             CONVERT TO PACKED DECIMAL
         MVC   OUTTIME1(7),=X'21202020202020' LOAD EDIT MASK
         ED    OUTTIME1(7),DECTIME1+4  EDIT TO PRINT
         MVI   OUTTIME1,C'.'           PUT IN DECIMAL POINT
         PUTLINE PARM=PUTBLOK,OUTPUT=(PTLINE,,,DATA),MF=(E,IOPLADS)
         TPUT  BLANX,78
         B     R010
*        ERROR ROUTINES
         DS    0H
B900     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG1,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B904     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG2,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B908     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG3,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B912     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG4,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B916     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG5,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B920     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG6,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B924     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG7,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B928     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG8,,,DATA),MF=(E,IOPLADS)
         B     R010
         DS    0H
B990     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSG9,,,DATA),MF=(E,IOPLADS)
         ABEND 990,DUMP
         DS    0H
B995     PUTLINE PARM=PUTBLOK,OUTPUT=(ERRMSGA,,,DATA),MF=(E,IOPLADS)
         ABEND 995,DUMP
*        CONSTANTS AND DATA
         DS    0F
MAINWORK DS    18D
*    PARSE PARAMETER LIST
STCK     CSECT                              RESUME USERS CSECT
STCKPPL  DS    0F
PPLUPT   DC    A(0)
PPLECT   DC    A(0)
PPLECB   DC    A(PPLECBS)
PPLPCL   DC    A(STCKPCL)
         DC    A(PPLANS)
PPLCBUF  DC    A(0)
PPLUWA   DC    A(0)
PPLECBS  DC    A(0)
PPLANS   DC    A(0)                         ANSWER PLACE
HDR1     DS    0CL078
         DC    C'STCK TIMESTAMP CONVERSION PROGRAM'
BLANX    DS    0CL078
         DC    CL078' '
         DS    0F
YRSX4    DC    F'1461'                      4 NORMAL YEARS IN DAYS
RDAYS    DC    F'0'                         DAYS REMAINDER
HRS      DC    F'24'                        HOURS IN A DAY
RHRS     DC    F'0'                         HOURS REMAINDER
MINS     DC    F'60'                        MINUTES IN AN HOUR
RMINS    DC    F'0'                         MINUTES REMAINDER
SECS     DC    F'60'                        SECONDS IN A MINUTE
RSECS    DC    F'0'                         SECONDS REMAINDER
MICS     DC    F'60000000'                  MICROSECS IN A MINUTE
MICSS    DC    F'1000000'                   MICROSECS IN A SECOND
RMICS    DC    F'0'                         MICROSECS REMAINDER
DECTIME  DC    D'0'                         SAVED TIME VALUES
DECTIME1 DC    D'0'
PYEAR    DC    D'0'
JULDAY   DC    D'0'
MNTHDAY  DC    D'0'
WORKAREA DC    32D'0'
YRTABLE  DC    H'0',H'31',H'59',H'90',H'120',H'151',H'181'
         DC    H'212',H'243',H'273',H'304',H'334',H'365'
LTABLE   DC    H'0',H'31',H'60',H'91',H'121',H'152',H'182'
         DC    H'213',H'244',H'274',H'305',H'335',H'366'
MONTABLE DC    C'    ',C'DEC ',C'NOV ',C'OCT ',C'SEP ',C'AUG ',C'JUL '
         DC    C'JUN ',C'MAY ',C'APR ',C'MAR ',C'FEB ',C'JAN '
DAYTABLE DC    C'SUNMONTUEWEDTHUFRISAT'
MVTMSTMP MVC   0(0,R4),0(R6)                MOVE THE INPUT TIMESTMP
PTLINE   DS    0F
LNLNGTH  DC    AL2(MSGEND-PTLINE)
RESERV   DC    H'0'
         DC    C'X'''
TMSTMP   DC    16C'0'
         DC    C''' = '
DAY      DC    CL3' '
MSG1     DC    CL5' '
MNTH     DC    CL3' '
MSG2     DC    CL7' '
         DC    C'JULIAN DAY'
MSG3     DC    CL5' '
         DC    C'AT'
OUTTIME  DC    CL10' '
OUTTIME1 DC    CL8' '
MSGEND   EQU   *
ERRMSG1  DS    0F
         DC    AL2(ERRMSG1E-ERRMSG1)
         DC    H'0'
         DC    C'THIS TIMESTAMP CONTAINS NON-HEX CHARACTERS'
ERRMSG1E EQU   *
ERRMSG2  DS    0F
         DC    AL2(ERRMSG2E-ERRMSG2)
         DC    H'0'
         DC    C'TIMESTAMP FAILED PARSE AND UNABLE TO PROMPT'
ERRMSG2E EQU   *
ERRMSG3  DS    0F
         DC    AL2(ERRMSG3E-ERRMSG3)
         DC    H'0'
         DC    C'USER ATTENTIONED OUT DURING PARSE ROUTINE'
ERRMSG3E EQU   *
ERRMSG4  DS    0F
         DC    AL2(ERRMSG4E-ERRMSG4)
         DC    H'0'
         DC    C'PARSE PARAMETER BLOCK INVALID - PROGRAM IN ERROR'
ERRMSG4E EQU   *
ERRMSG5  DS    0F
         DC    AL2(ERRMSG5E-ERRMSG5)
         DC    H'0'
         DC    C'INSUFFICIENT REGION SIZE FOR PARSE ROUTINE'
ERRMSG5E EQU   *
ERRMSG6  DS    0F
         DC    AL2(ERRMSG6E-ERRMSG6)
         DC    H'0'
         DC    C'VALIDITY CHECKING ROUTINE TERMINATED PARSE'
ERRMSG6E EQU   *
ERRMSG7  DS    0F
         DC    AL2(ERRMSG7E-ERRMSG7)
         DC    H'0'
         DC    C'CONFLICTING PARSE PARAMETERS - PROGRAM IN ERROR'
ERRMSG7E EQU   *
ERRMSG8  DS    0F
         DC    AL2(ERRMSG8E-ERRMSG8)
         DC    H'0'
         DC    C'TERMINAL HAS BEEN DISCONNECTED - PROGRAM ENDING'
ERRMSG8E EQU   *
ERRMSG9  DS    0F
         DC    AL2(ERRMSG9E-ERRMSG9)
         DC    H'0'
         DC    C'ANSWER ADDRESS FROM PARSE IS ZERO - PROGRAM ENDING'
ERRMSG9E EQU   *
ERRMSGA  DS    0F
         DC    AL2(ERRMSGAE-ERRMSGA)
         DC    H'0'
         DC    C'ERROR CALCULATING JULIAN DAY - PROGRAM ABENDING'
ERRMSGAE EQU   *
ECBADS   DC    F'0'
IOPLADS  DC    4F'0'
PUTBLOK  PUTLINE MF=L
STCKPCL  IKJPARM
TIMESTMP IKJIDENT 'TIMESTAMP',MAXLNTH=16,FIRST=NONATNUM,               *
               OTHER=NONATNUM,PROMPT='TIMESTAMP TO BE CONVERTED',CHAR
         IKJENDP
         CVT   DSECT=YES
         IKJCPPL
         IKJIOPL
         END


David McGeorge
Consultant Systems Programmer (Australia)                  c David McGeorge 1992

