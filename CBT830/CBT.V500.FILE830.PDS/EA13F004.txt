Random number generator


SOURCE CODE FOR RANDOM##

*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
* CSECT   : RANDOM##                                                  *
* MODULE  : RANDOM##                                                  *
* AUTHOR  : ENTERPRISE DATA TECHNOLOGIES                              *
* DESC    : RANDOM## IS A SUBROUTINE THAT CAN BE CALLED FROM ANOTHER  *
*           ASSEMBLER PROGRAM OR FROM A HIGH LEVEL LANGUAGE.  IT WILL *
*           RETURN AN AREA OF STORAGE CONTAINING THE REQUESTED NUMBER *
*           OF RANDOM NUMBERS.                                        *
* MACROS  : $ESAPRO, $ESAEPI, $ESASTG, STORAGE                        *
* INPUT   : POINTER TO THE REQUEST BLOCK                              *
* OUTPUT  : POINTER TO THE BLOCK CONTAINING THE RANDOM NUMBERS        *
* NOTE    : THE ALGORITHM FOR THE RANDOM NUMBER GENERATION WAS OB-    *
*           TAINED FROM "SIMULATION USING GPSS", BY THOMAS J SCHRIBNER*
*----+----+----+----+----+----+----+----+----+----+----+----+----+----*
RANDOM## $ESAPRO AM=ANY,RM=ANY
         L     R6,0(R1)                POINT AT PARMS
         USING RANDNUM,R6              SET ADDRESSABILITY
         L     R2,SEED_#               GET THE SEED NUMBER
         LR    R5,R2                   COPY IT INTO REG 5
         XR    R4,R4                   CLEAR REG 4 FOR DIVIDE
         D     R4,INHALF               DIVIDE IT BY TWO
         LTR   R4,R4                   Q. WAS IT ODD?
         BNZ   SEED_ODD                A. YES, USE IT AS IS
         LA    R2,1(,R2)               IT WAS EVEN, MAKE IT ODD
SEED_ODD DS    0H
         CVD   R2,SEED_P               CONVERT IT TO DECIMAL
         L     R2,MULT_#               GET THE SEED NUMBER
         LR    R5,R2                   COPY IT INTO REG 5
         XR    R4,R4                   CLEAR REG 4 FOR DIVIDE
         D     R4,INHALF               DIVIDE IT BY TWO
         LTR   R4,R4                   Q. WAS IT ODD?
         BNZ   MULT_ODD                A. YES, USE IT AS IS
         LA    R2,1(,R2)               IT WAS EVEN, MAKE IT ODD
MULT_ODD DS    0H
         CVD   R2,MULT_P               CONVERT IT TO DECIMAL
         LM    R7,R8,A_VAL             PICK UP THE A AND B VALUES
         SR    R7,R8                   CALCULATE A-B
         CVD   R7,A_VAL_P              CONVERT IT TO DECIMAL
         MH    R8,INHALF+2             DOUBLE THE B VALUE
         LA    R8,1(,R8)               COMPUTE B+1
         CVD   R8,B_VAL_P              CONVERT IT TO DECIMAL
         L     R2,RAND_#               GET SAMPLE SIZE
         SLA   R2,2                    MULTIPLY IT BY 4
*                                      REQUEST A BLOCK OF STORAGE
         STORAGE OBTAIN,
               LENGTH=(R2),
               LOC=(RES,ANY)
         ST    R1,RAND_@               SAVE THE ADDRESS
         LR    R4,R1                   POINT TO TABLE BEGINNING
         LA    R3,0(R2,R1)             COMPUTE TABLE END
         SH    R3,HALF4                ADJUST END VALUE
         LA    R2,4                    GET THE INCREMENT
LOOP     DS    0H
         MP    MULT_P,SEED_P+4(4)      MULTIPLY THE SEED AND MULTPLIER
         XR    R9,R9                   MAKE SURE REG 9 IS CLEAR
         ICM   R9,B'0111',MULT_P+4     PICK UP BYTES 4, 5, AND 6 WHICH
*                                      CONTAIN THE RANDOM NUMBER
         N     R9,ANDF                 ISOLATE OFF THE RANDOM NUMBER
         O     R9,ORF                  GUARANTEE SIGN WILL BE POSITIVE
         ST    R9,RAND_P+4             SAVE THE RANDOM NUMBER
         L     R9,MULT_P+4             ISOLATE THE NEW MULTIPLIER
         N     R9,ANDF1                CLEAR HIGH ORDER 12 BITS
         ST    R9,MULT_P+4             SAVE IT FOR NEXT PASS
         XC    MULT_P(4),MULT_P        CLEAR HIGH ORDER 4 BYTES
         MP    RAND_P,B_VAL_P+4(4)     MULTIPLY OUR RANDOM NUMBER BY
*                                      2B+1
         SRP   RAND_P,(64-4),0         SHIFT OUT RIGHT FOUR DIGITS
         AP    RAND_P,A_VAL_P          ADD THE (A-B) DIFFERENCE
         CVB   R9,RAND_P               CONVERT THE NUMBER TO BINARY
         ST    R9,0(R4)                SAVE THE NUMBER IN STORAGE AREA
         BXLE  R4,R2,LOOP              LOOP UNTIL ALL NUMBERS PRODUCED
EXIT_RTN DS    0H
         $ESAEPI
INHALF   DC    F'2'                    USED FOR NUMBER MANIPULATION
ANDF     DC    X'000FFFF0'             THESE THREE MASKS ARE USED TO
ANDF1    DC    X'000FFFFF'             MANIPULATE THE PACKED VALUES
ORF      DC    X'0000000C'             AND ISOLATE DIGITS
HALF4    DC    H'4'                    USED FOR NUMBER MANIPULATION
         $ESASTG
*                                      WORK AREAS USED BY THE ROUTINE
SEED_P   DS    D                       SEED # IN PACKED FORMAT
MULT_P   DS    D                       MULTIPLIER IN PACKED FORMAT
A_VAL_P  DS    D                       MIDPOINT OF POPULATION
B_VAL_P  DS    D                       RANGE AROUND MIDPOINT
RAND_P   DS    D                       RANDOM NUMBER IN PACKED FORMAT
RANDNUM  DSECT                         LAYOUT FOR AREA PASSED BACK
SEED_#   DS    F                       SEED NUMBER
MULT_#   DS    F                       MULTIPLIER
A_VAL    DS    F                       MIDPOINT VALUE
B_VAL    DS    F                       RANGE AROUND MIDPOINT
RAND_#   DS    F                       NUMBER OF RANDOM VALUES REQUIRED
RAND_@   DS    F                       ADDRESS OF RANDOM #S
         END   RANDOM##


SOURCE FOR THE $ESAPRO MACRO

$ESAPRO  MACRO
         MACRO
&LABEL   $ESAPRO &AM=31,&RM=ANY,&MODE=P
.**********************************************************************
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  TO USE THIS MACRO, YOU NEED TO
.*       ALSO USE THE $ESASTG MACRO.  THE $ESASTG DEFINES THE SYMBOL
.*       QLENGTH WHICH OCCURS IN THE CODE THAT &ESAPRO GENERATES.
.*       IF YOU DO NOT CODE ANY OPERANDS, THEN REGISTER 12 WILL BE
.*       USED AS THE BASE.  IF YOU CODE MULTIPLE SYMBOLS, THEN THEY
.*       WILL BE USED AS THE BASE REGISTERS.
.*       EXAMPLES:
.*              SECTNAME $ESAPRO          = REG 12 BASE
.*              SECTNAME $ESAPRO 5        = REG 5 BASE
.*              SECTNAME $ESAPRO R10,R11  = REGS 10 AND 11 ARE BASES
.**********************************************************************
         LCLA  &AA,&AB,&AC
R0       EQU   0
R1       EQU   1
         etc
R15      EQU   15
&LABEL   CSECT                         IDENTIFY THE CSECT
&LABEL   AMODE &AM                     SET THE ADDRESSING MODE
&LABEL   RMODE &RM                     SET THE RESIDENCY MODE
         SYSSTATE ASCENV=&MODE         SET THE ENVIRONMENT
         B     $$$$EYEC-*(R15)         BRANCH AROUND EYECATCHER
         DC    AL1(($$$$EYEC-*)-1)     EYECATCHER LENGTH
         DC    CL8'&LABEL'             MODULE ID
         DC    CL3' - '
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL3' - '
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
         DC    CL3'   '                FILLER
$$$$F1SA DC    CL4'F1SA'               USED FOR STACK OPERATIONS
$$$$4096 DC    F'4096'                 USED TO ADJUST BASE REGS
$$$$EYEC DS    0H
         BAKR  R14,0                   SAVE GPRS AND ARS ON THE STACK
         AIF   (N'&SYSLIST EQ 0).USER12
         LAE   &SYSLIST(1),0(R15,0)    LOAD OUR BASE REG
         USING &LABEL,&SYSLIST(1)      LET THE ASSEMBLER KNOW
         AGO   .GNBASE
.USER12  ANOP
         MNOTE *,'NO BASE REG SPECIFIED, REGISTER 12 USED'
         LAE   R12,0(R15,0)            LOAD OUR BASE REG
         USING &LABEL,R12              LET THE ASSEMBLER KNOW
         AGO   .STGOB
.GNBASE  ANOP
         AIF   (N'&SYSLIST LE 1).STGOB
&AA      SETA  2
&AC      SETA  4096
.GNBASE1 ANOP
         AIF   (&AA GT N'&SYSLIST).STGOB
&AB      SETA  &AA-1
         LR    &SYSLIST(&AA),&SYSLIST(&AB) GET INITIAL BASE
         A     &SYSLIST(&AA),$$$$4096      ADJUST NEXT BASE
         USING &LABEL+&AC,&SYSLIST(&AA)    LET THE ASSEMBLER KNOW
&AA      SETA  &AA+1
&AC      SETA  &AC+4096
         AGO   .GNBASE1
.STGOB   ANOP
         L     R0,QLENGTH              GET THE DSECT LENGTH
         STORAGE OBTAIN,LENGTH=(R0),LOC=(RES,ANY)
         LR    R15,R1                  GET @(OBTAINED AREA)
         L     R13,QDSECT              GET DISPLACEMENT INTO AREA
         LA    R13,0(R13,R15)          GET @(OBTAINED AREA)
         LR    R0,R13                  SET REG 0 = REG 13
         L     R1,QLENGTH              GET THE LENGTH OF THE AREA
         XR    R15,R15                 CLEAR REG 5
         MVCL  R0,R14                  INITIALIZE THE AREA
         MVC   4(4,R13),$$$$F1SA       INDICATE STACK USAGE
         USING DSECT,R13               INFORM ASSEMBLER OF BASE
.MEND    ANOP
         EREG  R1,R1                   RESTORE REGISTER 1
         MEND


SOURCE FOR THE $ESAEPI MACRO

$ESAEPI  MACRO
         MACRO
         $ESAEPI
.**********************************************************************
.*       THIS MACRO WILL PROVIDE EXIT LINKAGE. IT WILL FREE THE
.*       STORAGE AREA THAT WAS ACQUIRED BY THE $ESAPRO MACRO.  YOU
.*       CAN OPTIONALLY PASS IT A RETURN CODE VALUE.  THIS VALUE IS
.*       EITHER THE LABEL OF A FULL WORD IN STORAGE, OR IT IS A REG-
.*       ISTER. AS WITH THE $ESAPRO MACRO, YOU NEED TO USE THE $ESASTG
.*       MACRO.  THE SYMBOL QLENGTH WHICH OCCURS IN THE CODE THAT IS
.*       GENERATED BY THIS MACRO IS DEFINED BY $ESASTG
.*       EXAMPLES:
.*              $ESAEPI          = NO RETURN CODE SPECIFIED
.*              $ESAEPI (R5)     = RETURN CODE IS IN REG 5
.*              $ESAEPI RETCODE  = RETURN CODE IS IN THE FULLWORD AT
.*                                 RETCODE
.**********************************************************************
         AIF   (N'&SYSLIST EQ 0).STGFRE
         AIF   ('&SYSLIST(1)'(1,1) EQ '(').REGRC
         L     R2,&SYSLIST(1)          GET RETURN CODE VALUE
         AGO   .STGFRE
.REGRC   ANOP
         LR    R2,&SYSLIST(1,1)        GET RETURN CODE VALUE
.STGFRE  ANOP
         L     R0,QLENGTH              GET THE DSECT LENGTH
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R13)
         AIF   (N'&SYSLIST NE 0).SETRC
         XR    R15,R15                 CLEAR THE RETURN CODE
         AGO   .MEND
.SETRC   ANOP
         LR    R15,R2                  SET THE RETURN CODE
.MEND    ANOP
         PR                            RETURN TO CALLER
         MEND


SOURCE FOR THE $ESASTG MACRO

$ESASTG  MACRO
         MACRO
         $ESASTG
.**********************************************************************
.*       THIS MACRO IS USED IN CONJUNCTION WITH THE $ESAEPI AND $ESAPRO
.*       MACROS.  IT PROVIDES A Q TYPE ADDRESS CONSTANT WHICH WILL CON-
.*       THE LENGTH OF THE DSECT.  A REGISTER SAVE AREA ID PROVIDED AS
.*       WELL.
.*       EXAMPLES:
.*              $ESASTG
.*      XXX     DC    F          = DEFINE ADDITIONAL STORAGE AREA
.*      YYY     DC    XL255
.*       .       .      .
.*       .       .      .
.*       .       .      .
.**********************************************************************
QDSECT   DC    Q(DSECT)                DEFINE A QCON
QLENGTH  CXD                           LET ASM CALCULATE THE LENGTH
DSECT    DSECT
         DS    18F                     SET ASIDE REGISTER SAVE AREA
         MEND


SOURCE CODE FOR THE FLOATING ROUTINE

FLOATING $ESAPRO AM=24,RM=24
         CALL RANDOM##,(PARM_VAL),VL
         OPEN  (RAND_DS,(OUTPUT))
         L     R10,RAND_#
         L     R9,RAND_@
LOOP     DS    0H
         MVC   R_NUMM,0(R9)
         PUT   RAND_DS,R_BUFF
         LA    R9,4(,R9)
         BCT   R10,LOOP
         CLOSE (RAND_DS)
EXIT_RTN DS    0H
         $ESAEPI
PARM_VAL DS    0F
SEED_#   DC    F'5167'                 SEED NUMBER
MULT_#   DC    F'3728'                 MULTIPLIER
A_VAL    DC    F'100'                  MIDPOINT VALUE
B_VAL    DC    F'25'                   RANGE AROUND MIDPOINT
RAND_#   DC    F'20000'                NUMBER OF RANDOM VALUES REQUIRED
RAND_@   DC    F'0'                    ADDRESS OF RANDOM #S
R_BUFF   DC    CL13'RANDOM NUMBER'
R_NUMM   DS    F
RAND_DS  DCB   DDNAME=RANDOM,DSORG=PS,MACRF=(PM)
         $ESASTG
         END   FLOATING


Enterprise Data Technologies (USA)                       c Xephon 1996

