Full screen LISTCAT display

I have always found the IDCAMS LISTCAT display extremely
unreadable, particularly on a TSO screen; the output wraps around
and it is easy to miss the piece of information that you require.
ROSCOE's DSN command provides a well formatted display of
dataset attributes, but VSAM support is not available, except to
show that the DSORG is VS, which is not terribly helpful.

I therefore wrote the following program to perform the LISTCAT
function internally and, depending on the type of catalog entry,
format the information into a more readable display.  Although
the program was written for ROSCOE/ETSO, and attempts to
emulate the DSN command, it works equally well under native
TSO and, in fact, probably has most benefit there.  An example of
the display of a data component is shown in Figure 1.

The program is executed with the following command:

    CALL 'library(VSAMINFO)' 'entry name '

The first screen shows the entry type, the name of the user
catalog, volume, attributes, and associations.  If the entry name is
a user catalog, all associated aliases are displayed.  If the entry is
a cluster, an alternate index, or a page space, the second and
subsequent screens show details of the associated data, index, and
path components.  Use the ENTER key to page through the
available screens; to terminate the display either press the ATTN
key or PA2.

VSAMINFO CSECT
         STM   R14,R12,12(R13)         | Save registers
         USING VSAMINFO,R12,R11        | Addressability
         LR    R12,R15                 | First base
         LA    R11,4095(R12)           | Second base
         LA    R11,1(R11)
         LA    R15,SAVEAREA            | Chain save areas
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         L     R1,0(R1)                | Load parm pointer
         LH    R3,0(R1)                | R3 = Parm length
         LTR   R3,R3                   | If zero then
         BZ    NOPARM                  | parm error
         CH    R3,=H'44'               | If more than 44
         BH    NOPARM                  | then parm error
         BCTR  R3,0
         EX    R3,MOVEDSN              | Move parm to dsn
         OC    VSAMDSN(44),@SPACES     | Translate to upper case
         LA    R1,VSAMDSN
         LA    R2,45
SCAN     CLI   0(R1),C' '
         BE    ENDNAME
         LA    R1,1(R1)
         BCT   R2,SCAN
ENDNAME  MVI   0(R1),C')'              | Insert closing bracket
*-----   Dynamically allocate AMSPRINT and AMSIN                       *
         LA    R1,$$SPRINT
         DYNALLOC ,
         LTR   R15,R15
         L     R3,$$SPRINT
         BNZ   DYNERROR
         LA    R1,$$SYSIN
         DYNALLOC ,
         LTR   R15,R15
         L     R3,$$SYSIN
         BNZ   DYNERROR
*-----   Write command to AMSIN and link to IDCAMS                     *
         OPEN  (AMSIN,OUTPUT)
         PUT   AMSIN,COMMAND
         CLOSE AMSIN
         LINK  EP=IDCAMS,PARAM=(OPTIONS,DDNAMES),VL
         LTR   R15,R15
         BZ    PROCESS
*-----   If nonzero return from IDCAMS, display error messages         *
         OPEN  AWS
         MVI   ERROR,X'FF'
ERRDISP  BAL   R10,GETAWS
         CLC   0(3,R2),=C'IDC'
         BNE   ERRDISP
         TPUT  RECORD,78
         B     ERRDISP
*-----   Open input file - Build Initial screen                        *
PROCESS  OPEN AWS
SCR0     BAL   R10,GETAWS
         CLC   0(8,R2),=C' LISTCAT'    | Search for "LISTCAT"
         BNE   SCR0
         BAL   R10,GETAWS
         MVC   #TYPE(3),0(R2)          | Next line is entry type
         MVC   $STYPE+5(11),0(R2)
         CLC   0(4,R2),=C'DATA'
         BE    SKIPSCR1
         CLC   0(5,R2),=C'INDEX'
         BE    SKIPSCR1
         MVC   $NAME(44),16(R2)        | Extract entry name
         BAL   R10,GETAWS
         MVC   $CATNAME(44),16(R2)     | Extract catalog name
LOOP0    BAL   R10,GETAWS              |
         CLC   7(6,R2),=CL6'VOLSER'    | Extract Volume
         BNE   NOTVOL0
         MVC   $VOL0(6),25(R2)
         B     LOOP0
NOTVOL0  CLC   5(5,R2),=C'ASSOC'       | Search for ASSOCIATIONS or
         BE    ASSOCS
         CLC   5(5,R2),=C'ATTRI'       | ATTRIBUTE line
         BNE   LOOP0
         BAL   R10,GETAWS
         CLC   7(5,R2),=C'LIMIT'       | Check for GDG entry
         BNE   NOTLIMIT
         MVC   $ATTRIB0(5),7(R2)       | Move GDG attributes
         MVC   $ATTRIB0+6(44),27(R2)
         B     LOOP1
NOTLIMIT MVC   $ATTRIB0(50),7(R2)      | Extract attributes
LOOP1    BAL   R10,GETAWS
         CLC   5(5,R2),=C'ASSOC'       | Search for Associations
         BNE   LOOP1
ASSOCS   CLC   #TYPE(3),=C'USE'        | If not usercatalog
         BNE   ASSOC2                  | then skip this part
ALIASES  MVI   #MORE,X'00'             | Display aliases
         LA    R1,$ASSOC1+10
         LA    R2,13
CLEARLIN MVI   0(R1),C' '              | Clear display line
         MVC   1(55,R1),0(R1)
         LA    R1,73(R1)
         BCT   R2,CLEARLIN
         MVC   RESPONS1(31),$ASSOC1
         MVC   $COMPS(5),5X'FF'
         LA    R8,$ASSOC1+10           | R8 -> First associations entry
         LA    R4,13                   | Maximum lines
ASSOC01  LA    R5,6                    | Max entries per line
         LR    R9,R8
ASSOC02  BAL   R10,GETAWS
         CLI   5(R2),C' '              | If null, end of associations
         BNE   ENDASSOC
         CLI   7(R2),C' '              | If null, end of associations
         BE    ENDASSOC
         MVC   0(8,R9),16(R2)          | Move alias to line
         LA    R9,9(R9)                | Next position in line
         BCT   R5,ASSOC02
         LA    R8,73(R8)               | Next line
         BCT   R4,ASSOC01
         MVI   #MORE,X'FF'             | Set flag for possibly-more
         B     ENDASSOC
ASSOC2   LA    R8,$ASSOC1              | R8 -> First associations entry
         LA    R9,13                   | 13 attribute lines
         MVC   $ASSOC1+10(10),=C'** NONE **'
         LA    R7,$COMPS               | R7 --> component list
LOOP2    BAL   R10,GETAWS
         CLI   5(R2),C' '              | If null, end of associations
         BNE   ENDASSOC
         CLI   7(R2),C' '              | If null, end of associations
         BE    ENDASSOC
         CLC   #TYPE(3),=C'PAT'        | If a PATH,
         BE    SKIPSAVE                | don't save component types
         CLC   7(3,R2),=C'DAT'         | Only save component types
         BE    SAVECOMP                | If they are data or index
         CLC   7(3,R2),=C'PAT'         | or path of alternate index
         BE    SAVECOMP                |
         CLC   7(3,R2),=C'IND'
         BNE   SKIPSAVE
SAVECOMP MVC   0(5,R7),7(R2)           | Save type in table
         LA    R7,5(R7)
SKIPSAVE MVC   10(60,R8),7(R2)         | Move association to screen
         LA    R8,73(R8)               | Next screen entry
         BCT   R9,LOOP2
ENDASSOC MVC   0(5,R7),=5X'FF'         | Set end of list
         CLC   5(5,R2),=C'ATTRI'       | Check for further attributes
         BNE   END0
         BAL   R10,GETAWS
         MVC   $ATTRIB0(50),7(R2)
END0     CLI   $COMPS,X'FF'            | If no components found
         BE    NORESP0                 | then no message
         MVC   RESPONS1(31),=CL31'Press ENTER for XXXXX component'
         LA    R7,$COMPS
         MVC   RESPONS1+16(5),0(R7)
NORESP0  CLI   #MORE,X'FF'
         BNE   TPUTS1
         MVC   RESPONS1(31),=CL31'Press ENTER for more aliases'
         B     TPUTS1
SKIPSCR1 MVC   SEARCH(5),0(R2)         | No screen 1 required
         MVC   $COMTYPE+3(5),0(R2)
         MVC   $COMPS(5),=5X'FF'
         LA    R7,$COMPS
         B     COMPFND3
*-----   Display first screen - PA2 will terminate display           *
TPUTS1   TPUT  @CLEAR,L'@CLEAR,FULLSCR
         TPUT  SCREEN1,SLEN1,FULLSCR
         TGET  INPUT,80,ASIS
         CLI   INPUT,PA2
         BE    TERMIN
         CLI   INPUT,CLEAR
         BE    TERMIN
         CLI   #MORE,X'FF'
         BE    ALIASES
         MVC   SEARCH(5),=CL5'DATA'
         CLC   #TYPE(3),=C'PAG'        | Only pagespace or
         BE    NEXTSCRN
         CLC   #TYPE(3),=C'AIX'        |  alternate INDEX
         BE    NEXTSCRN
         CLC   #TYPE(3),=C'CLU'        | or cluster require further
         BNE   TERMIN                  | displays
NEXTSCRN MVI   DISPLAY,X'00'
         CLC   3(4,R2),SEARCH          | search for next component
         BE    COMPFND
         BAL   R10,GETAWS
         B     NEXTSCRN
COMPFND  CLC   SEARCH(4),=C'PATH'
         BNE   COMPFND2
*-----   Extract path information                                      *
         MVC   $TYPE+5(7),=CL7'PATH'
         MVC   $NAME(44),16(R2)
         BAL   R10,GETAWS
         MVC   $CATALOG(44),16(R2)
LOOP3A   BAL   R10,GETAWS
         CLC   5(5,R2),=C'ASSOC'
         BNE   LOOP3A
         LA    R8,$ASSOC1
         LA    R9,13
LOOP3B   BAL   R10,GETAWS
         CLI   7(R2),C' '
         BE    ENDLOOP3
         CLI   5(R2),C' '
         BNE   ENDLOOP3
         MVC   10(50,R8),7(R2)
         LA    R8,73(R8)
         BCT   R9,LOOP3B
ENDLOOP3 BAL   R10,GETAWS
         MVC   $ATTRIB0(50),7(R2)
         MVI   $VOL0,C' '
         MVC   $VOL0+1(5),$VOL0
         MVI   RESPONS1,C' '           | Clear message line
         MVC   RESPONS1+1(59),RESPONS1
         TPUT  @CLEAR,L'@CLEAR,FULLSCR
         TPUT  SCREEN1,SLEN1,FULLSCR
         B     TGET2

The remaining source code for this program will be published in
next month's issue.

Paul Beesley
Senior Systems Programmer
Revlon Group (UK) â‚¬ Xephon 1989

