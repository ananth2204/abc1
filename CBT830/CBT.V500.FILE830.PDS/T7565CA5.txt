An on-line MVS/XA CSA monitor (continued)

We conclude this article this month with the publication of the
remainder of the source code for this Assembler routine.

*        GETMAIN THE WORK-AREA FOR VSMLIST:                            *
MAIN0000 GETMAIN RU,LV=16384,LOC=ANY    GETMAIN WORK-AREA FOR VSMLIST
         LR    R5,R1                    COPY THE ADDRESS
         ST    R5,ADDR1                 AND SAVE IT
*        CALL VSMLIST TO GET THE ALLOCATED/FREE SPACE IN CSA/E-CSA:    *
MAIN0000 MVI   0(R5),X'00'              INIT THE FIRST 256 BYTES
         MVC   1(255,R5),0(R5)          OF THE WORK-AREA
         L     R6,LENGTH                GET LENGTH OF WORK-AREA
         VSMLIST SP=CSA,SPACE=FREE,LOC=ANY,WKAREA=((5),(6))
         L     R1,0(,R5)                GET RETURN-CODE
         LTR   R1,R1                    REQUEST OK ?
         BZ    MAIN0020                 BIY, CONTINUE
         BAL   R14,CONVHEX              GO CONVERT RETURN CODE
         MVC   WORKMSG2+15(2),HEXNUM+6  INSERT RETURN CODE
         LA    R1,WORKMSG1              POINT TO ERROR MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MESSAGE
         LA    R1,WORKMSG2              POINT TO SECOND ERROR MSG
         BAL   R14,MSG00001             GO ISSUE THE MESSAGE
         OI    WTDFLAG,VSMERROR         INDICATE VSMLIST ERROR
         B     MAIN0040                 GO CLEANUP AND TERMINATE
MAIN0020 L     R2,4(,R5)                PICK UP SUBPOOL-POINTER
         L     R3,0(,R2)                GET NUMBER OF SUBPOOLS
         LA    R6,4(,R2)                POINT TO FIRST SUBPOOL
         LA    R1,HDRMSG03              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MSG
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,HDRMSG04              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MSG
MAIN0030 BAL   R14,MAIN0050             GO LOOP THROUGH SUBPOOLS
         BCT   R3,MAIN0030              COUNT AND CONTINUE
*        FREEMAIN THE VSMLIST WORK-AREA AND CALCULATE THE TOTALS:      *
MAIN0040 FREEMAIN RU,LV=16384,A=(R5)
         TM    WTDFLAG,VSMERROR         DID WE HAVE A VSMLIST ERROR ?
         BO    TERM0000                 BIY, GO TERMINATE
         L     R2,CVTPTR                POINT TO CVT
         L     R2,CVTGDA-CVT(,R2)       POINT TO GDA
         L     R1,GDACSA-GDA(,R2)       GET START OF CSA
         BAL   R14,CONVHEX              GO CONVERT TO EBCDIC
         MVC   CSAADDR,HEXNUM           INSERT INTO MESSAGE
         L     R1,GDAECSA-GDA(,R2)      GET START OF EXTENDED CSA
         BAL   R14,CONVHEX              GO CONVERT TO EBCDIC
         MVC   ECSAADDR,HEXNUM          INSERT INTO MESSAGE
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,HDRMSG06              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MSG
         L     R1,GDACSASZ-GDA(,R2)     GET SIZE OF CSA
         SRL   R1,10                    DIVIDE BY 1024
         CVD   R1,DWORK                 CONVERT IT
         MVC   CSASIZE,EDMASK           MOVE PATTERN
         ED    CSASIZE+1(6),DWORK+5     EDIT IT INTO MSG
         L     R1,GDAECSAS-GDA(,R2)     GET SIZE OF EXTENDED CSA
         SRL   R1,10                    DIVIDE BY 1024
         CVD   R1,DWORK                 CONVERT IT
         MVC   ECSASIZE,EDMASK          MOVE PATTERN
         ED    ECSASIZE+1(6),DWORK+5    EDIT IT INTO MESSAGE
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,HDRMSG07              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MESSAGE
         L     R2,TOTABELO              GET TOTAL ALLOCATED BELOW
         BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   CSAABELO(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    CSAABEL0(8),DWORK+4      INSERT SIZE
         L     R2,TOTAABOV              GET TOTAL ALLOCATED ABOVE
         BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   CSAAABOV(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    CSAAABOV(8),DWORK+4      INSERT SIZE
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,HDRMSG08              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MESSAGE
         XR    R2,R2                    ZERO R2 FOR DIVISION
         L     R3,CVTPTR                GET CVT-ADDRESS
         L     R3,CVTGDA-CVT(,R3)       GE GDA-ADDRESS
         L     R3,GDACSASZ-GDA(,R3)     GET SIZE OF CSA (DIVIDEND)
         L     R4,=F'100'               LOAD DIVISOR
         DR    R2,R4                    CALCULATE 1% OF TOTAL CSA
         LR    R4,R3                    LOAD QUOTIENT INTO R4
         XR    R2,R2                    ZERO R2 FOR DIVISION
         L     R3,TOTABELO              GET TOTAL ALLOCATED BELOW
         DR    R2,R4                    CALCULATE % ALLOCATED BELOW
         CVD   R3,DWORK                 CONVERT TO DECIMAL
         MVC   ALLOCBP(L'EDMASK2),EDMASK2 INSERT PATTERN FOR EDIT
         ED    ALLOCBP(L'EDMASK2),DWORK+6 INSERT % ALLOCATED BELOW
         XR    R2,R2                    ZERO R2 FOR DIVISION
         L     R3,CVTPTR                POINT TO CVT
         L     R3,CVTGDA-CVT(,R3)       POINT TO GDA
         L     R3,GDAECSAS-GDA(,R3)     GET SIZE OF E-CSA (DIVIDEND)
         L     R4,=F'100'               LOAD DIVISOR
         DR    R2,R4                    CALCULATE 1% OF TOTAL E-CSA
         LR    R4,R3                    LOAD QUOTIENT INTO R4
         XR    R2,R2                    ZERO R2 FOR DIVISION
         L     R3,TOTAABOV              GET TOTAL ALLOCATED ABOVE
         DR    R2,R4                    CALCULATE % ALLOCATED ABOVE
         CVD   R3,DWORK                 CONVERT TO DECIMAL
         MVC   ALLOCAP(L'EDMASK2),EDMASK2 INSERT PATTERN FOR EDIT
         ED    ALLOCAP(L'EDMASK2),DWORK+6 INSERT % ALLOCATED BELOW
         LA    R1,HDRMSG8A              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MESSAGE
         L     R2,TOTFBELO              GET TOTAL FREE SPACE BELOW
         BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   CSAFBELO(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    CSAFBELO(8),DWORK+4      INSERT SIZE
         L     R2,TOTFABOV              GET TOTAL FREE SPACE ABOVE
         BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   CSAFABOV(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    CSAFABOV(8),DWORK+4      INSERT SIZE
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
         LA    R1,HDRMSG09              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MSG
         B     TERM0000
*        PROCESS THE SUBPOOLS AND CALCULATE THE SIZE OF THE ALLOCATED  *
*        BLOCKS AND THE SIZE OF THE FREE SPACE WITHIN THE ALLOCATED    *
*        BLOCKS OF CSA AND E-CSA:                                      *
MAIN0050 ST    R14,RETLOOP1             SAVE RETURN-ADDRESS
         XR    R4,R4                    CLEAR SUBPOOL REGISTER
         IC    R4,2(,R6)                GET SUBPOOL NUMBER
         CVD   R4,DWORK                 AND CONVERT IT TO DECIMAL
         MVC   SPIDA(L'EDMASK2),EDMASK2 MOVE SUBPOOL PATTERN
         ED    SPIDA,DWORK+6            INSERT SUBPOOL
         MVC   SPIDB(L'EDMASK2),EDMASK2 MOVE SUBPOOL PATTERN
         ED    SPIDB,DWORK+6            INSERT SUBPOOL
         CLM   R4,1,SAVESP              SAME SUBPOOL ?
         BE    MAIN0060                 BIY, BYPASS SUBPOOL-INSERT
         LA    R1,MSGBLANK              POINT TO MESSAGE
         BAL   R14,MSG00001             GO WRITE THE MESSAGE
MAIN0060 STCM  R4,1,SAVESP              SAVE SUBPOOL-NUMBER
         IC    R4,3(,R6)                GET STORAGE KEY
         SRL   R4,4                     BUMP RIGHT HALF-BYTE
         CVD   R4,DWORK                 AND CONVERT IT TO DECIMAL
         MVC   KEYA(L'EDMASK4),EDMASK4  MOVE SUBPOOL PATTERN
         ED    KEYA,DWORK+6             INSERT SUBPOOL
         MVC   KEYB(L'EDMASK4),EDMASK4  MOVE SUBPOOL PATTERN
         ED    KEYB,DWORK+6             INSERT SUBPOOL
         L     R4,8(,R6)                GET NUMBER OF BLOCKS IN SUBPOOL
         LA    R6,12(,R6)               POINT TO FIRST BLOCK IN SUBPOOL
MAIN0070 TM    0(R6),X'F7'              ADDRESS ABOVE ?
         BZ    MAIN0090                 BIN, ITS BELOW
         L     R7,ALLABOVE              GET TOTAL ALLOCATED ABOVE
         A     R7,4(R6)                 ADD SIZE OF THIS BLOCK
         ST    R7,ALLABOVE              AND SAVE THE TOTAL
         L     R2,8(,R6)                GET NUMBER OF FREE BLOCKS
         LTR   R2,R2                    ANY FREE BLOCKS ?
         BZ    MAIN0110                 BIN, GET NEXT BLOCK IN SUBPOOL
         LA    R6,12(,R6)               POINT TO THE FIRST FREE BLOCK
MAIN0080 L     R7,FREABOVE              GET CUMULATED FREE SPACE
         A     R7,4(R6)                 ADD SIZE OF THIS BLOCK
         ST    R7,FREABOVE              THEN SAVE IT
         LA    R6,8(,R6)                POINT NEXT BLOCK
         BCT   R2,MAIN0080              CONTINUE IF ANY MORE FREE BLOCK
         B     MAIN0120                 GO POINT TO NEXT BLOCK
MAIN0090 L     R7,ALLBELOW              GET TOTAL ALLOCATED BELOW
         A     R7,4(R6)                 ADD SIZE OF THIS BLOCK
         ST    R7,ALLBELOW              AND SAVE THE TOTAL
         L     R2,8(,R6)                GET NUMBER OF FREE BLOCKS
         LTR   R2,R2                    ANY FREE BLOCKS ?
         BZ    MAIN0110                 BIN, GET NEXT BLOCK IN SUBPOOL
         LA    R6,12(,R6)               POINT TO THE FIRST FREE BLOCK
MAIN0100 L     R7,FREBELOW              GET CUMLATED FREE SPACE
         A     R7,4(R6)                 ADD SIZE OF THIS BLOCK
         ST    R7,FREBELOW              THEN SAVE IT
         LA    R6,8(,R6)                POINT TO NEXT BLOCK
         BCT   R2,MAIN0100              CONTINUE IF ANY MORE FREE BLOCK
         B     MAIN0120                 GO POINT TO NEXT BLOCK
MAIN0110 LA    R6,12(,R6)               POINT TO NEXT BLOCK
MAIN0120 BCT   R4,MAIN0070              COUNT AND CONTINUE
         L     R2,ALLBELOW              GET TOTAL ALLOCATED BELOW
         LTR   R2,R2                    SOME STORAGE ALLOCATED ?
         BNZ   MAIN0130                 BIY, GO EDIT TOTALS
         MVI   SPIDA,X'40'              CLEAR SUBPOOL-ID
         MVC   SPIDA+1(L'SPIDA-1),SPIDA
         MVI   KEYA,X'40'               CLEAR KEY-ID
         MVC   KEYA+1(L'KEYA-1),KEYA
         B     MAIN0140                 GO CONTINUE WITH ABOVE TOTALS
MAIN0130 BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   ALLOCA(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    ALLOCA(8),DWORK+4        INSERT SIZE
         L     R2,FREBELOW              GET TOTAL FREE SPACE BELOW
         BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   FREEA(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    FREEA(8),DWORK+4         INSERT SIZE
MAIN0140 L     R2,ALLABOVE              GET TOTAL ALLOCATED ABOVE
         LTR   R2,R2                    SOME STORAGE ALLOCATED ?
         BNZ   MAIN0150                 BIY, GO EDIT TOTALS
         MVI   SPIDB,X'40'              CLEAR SUBPOOL-ID
         MVC   SPIDB+1(L'SPIDB-1),SPIDB
         MVI   KEYB,X'40'               CLEAR SUBPOOL-ID
         MVC   KEYB+1(L'KEYB-1),KEYB
         B     MAIN0160                 GO CONTINUE WITH ABOVE TOTALS
MAIN0150 BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   ALLOCB(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    ALLOCB(8),DWORK+4        INSERT SIZE
         L     R2,FREABOVE              GET TOTAL FREE SPACE ABOVE
         BAL   R14,CALC0002             GO CALCULATE SIZE IN K-BYTES
         MVC   FREEB(L'EDMASK1),EDMASK1 MOVE PATTERN
         ED    FREEB(8),DWORK+4         INSERT SIZE
MAIN0160 LA    R1,HDRMSG05              POINT TO MESSAGE
         BAL   R14,MSG00001             GO ISSUE THE MESSAGE
         MVI   HDRMSG05,X'40'           RE-INIT MSG
         MVC   HDRMSG05+1(L'HDRMSG05-1),HDRMSG05
         L     R1,TOTABELO              LOAD TOT. ALLOC. BELOW COUNTER
         A     R1,ALLBELOW              ADD CUMULATED TOTAL
         ST    R1,TOTABELO              AND SAVE IT
         L     R1,TOTFBELO              LOAD TOT. FREE BELOW COUNTER
         A     R1,FREBELOW              ADD CUMULATED TOTAL
         ST    R1,TOTFBELO              AND SAVE IT
         L     R1,TOTAABOV              LOAD TOT. ALLOC. ABOVE COUNTER
         A     R1,ALLABOVE              ADD CUMULATED TOTAL
         ST    R1,TOTAABOV              AND SAVE IT
         L     R1,TOTFABOV              LAOD TOT. FREE ABOVE COUNTER
         A     R1,FREABOVE              ADD CUMULATED TOTAL
         ST    R1,TOTFABOV              AND SAVE IT
         XC    ALLBELOW,ALLBELOW        RE-INIT ALLOCATED BELOW COUNTER
         XC    FREBELOW,FREBELOW        RE-INIT FREE BELOW COUNTER
         XC    ALLABOVE,ALLABOVE        RE-INIT ALLOCATED ABOVE COUNTER
         XC    FREABOVE,FREABOVE        RE-INIT FREE ABOVE COUNTER
MAON0999 L     R14,RETLOOP1             LOAD RETURN-ADDRESS
         BR    R14                      RETURN TO CALLER
*        CLEANUP AND RETURN TO CALLER                                  *
TERM0000 TM    FLGCALL,BTCHCALL         ARE WE IN BATCH ?
         BZ    TERM0010                 BIN, GO RETURN TO CALLER
         CLOSE (REPORT)                 CLOSE SYSOUT FILE
TERM0010 L     R13,SA+4                 LOAD ADDR. OF HSA
         RETURN (14,12),T,RC=0          ISSUE RETURN
*        SUBROUTINE TO CONVERT CONTENTS OF R1 TO HEX                   *
*        ON EXIT R1 POINTS TO THE CONVERTED DATA STRING                *
CONVHEX  ST    R1,HEXVAL                STORE THE VALUE TO CONVERT
         UNPK  HEXNUM(9),HEXVAL(5)      UNPACK THE DATA
         TR    HEXNUM(8),HEXTBL-240     TRANSLATE FOR PRINTING
         LA    R1,HEXNUM                POINT TO THE CONVERTED DATA
         BR    R14                      RETURN TO CALLER
HEXNUM   DC    XL9'00'                  CONVERSION-AREA 1
HEXVAL   DC    F'0'                     CONVERSION-AREA 2
         DC    X'00'
HEXSTART DC    XL240'00'
HEXTBL   DC    C'0123456789ABCDEF'      CONVERSION-TABLE
         CNOP  0,4
*        MESSAGE ROUTINE:                                              *
MSG00001 STM   R14,R2,RETMSG            SAVE RETURN-ADDRESS
         LR    R2,R1                    SAVE MESSAGE ADDRESS
         TM    FLGCALL,BTCHCALL         BATCH ?
         BO    MSG00003                 YES, GO ISSUE WTO
MSG00002 TM    FLGCALL,STCCALL          ARE WE IN STC-MODE ?
         BZ    MSG00005                 BIN, WE ARE TSO, USE TPUT
         L     R0,CONSID                GET CONSOLE-ID (NOT FOR JES3)
         MVC   WTO2+8(MSGLNGTH),(R1)    MOVE MSG INTO WTO-STRING
WTO2     WTO   '                                                        +
                                'ROUTCDE=2,MCSFLAG=(REG0)
         B     MSG0007                  GO TERMINATE
MSG00003 LA    R14,MSG00004             GET EP OF 24 BIT MODE PART
         BSM   R0,R14                   SWITCH INTO 24 BIT MODE
MSG00004 PUT   REPORT,(R2)              WRITE RECORD TO SYSOUT
         B     MSG00006                 GO CONTINUE
MSG00005 CLC   SCRSIZE,SCRSIZE1         MAX LINES WRITTEN TO SCREEN ?
         BH    MSG0005A                 BIN, CONTINUE
         XC    SCRSIZE1,SCRSIZE1        INIT LINE COUNTER
         TPUT  TERMMSG1,L'TERMMSG1      WRITE THE MESSAGE TO TERMINAL
         TGET  TERMINP,L'TERMINP,NOWAIT GET RESPONSE FROM TERMINAL
         TPUT  HDRMSG04,L'HDRMSG04      WRITE TITLE LINE ON NEXT SCREEN
         TPUT  MSGBLANK,L'MSGBLANK      WRITE A BLANK LINE
         L     R1,SCRSIZE1              GET NUMBER OF LINES WRITTEN
         LA    R1,2(,R1)                COUNT TITLE AND BLANK LINE
         ST    R1,SCRSIZE1              AND SAVE IT
MSG0005A LA    R0,MSGLNGTH              GET MESSAGE-LENGTH
         LA    R2,0(,R2)                CLEAR HIGH ORDER BYTE
         TPUT  (2),(0)                  ISSUE TPUT TO TSO-TERMINAL
         L     R1,SCRSIZE1              GET NUMBER OF LINES WRITTEN
         LA    R1,1(,R1)                COUNT THIS SCREEN LINE
         ST    R1,SCRSIZE1              AND SAVE THE COUNTER
         B     MSG00007                 GO RETURN TO CALLER
MSG00006 L     R14,MODE31EP             GET LINKAGE POINTER AND
         BSM   R0,R14                   SWITCH BACK INTO 31 BIT MODE
MSG00007 LM    R14,R2,RETMSG            PICK UP RETURN-ADDRESS
         BR    R14                      RETURN TO CALLER
MODE31EP DC    A(MSG00007+X'80000000')  POINTER DEFINED LINKAGE
*        CALCULATE THE SIZE OF A GIVEN STORAGE AREA:                   *
CALC0001 SR    R2,R7                    CALCULATE SIZE
CALC0002 STM   R5,R7,CALCSAVE           SAVE THE WORK REGISTERS
         LR    R6,R2                    COPY R2
         SRDA  R6,32                    CLEAR R2 FOR DIVISION
         LA    R5,1024                  LOAD DIVISOR WITH 1K
         DR    R6,R5                    CLCULATE NUMBER OF K'S
         CVD   R7,DWORK                 CONVERT TO DECIMAL
         LM    R5,R7,CALCSAVE           RESTORE PREVIOUS REGISTERS
         BR    R14                      RETURN TO CALLER
CALCSAVE DC    3F'0'                    SAVE AREA
*        DEFINITIONS:                                                  *
SA       DC    18F'0'                   REGISTER-SAVE-AREA
ANS      DS    2F                       EXTRACT ANSWER-AREA
CONSID   DC    F'0'                     MCS-CONSOLE-ID IF STC
DATEMASK DC    XL6'21204B202020'        DATE-PATTERN
TIMEMASK DC    XL12'4021204B20204B20204B2020' TIME PATTERN
EDMASK   DC    XL8'40402020202120D2'
EDMASK1  DC    XL9'4020202020202120D2'
EDMASK2  DC    XL4'40212020'
EDMASK3  DC    XL7'402020202120D2'
EDMASK4  DC    XL4'40202120'
SUBPOOLK DC    CL2' '                   SUBPOOL AND KEY SAVE AREA
DWORK    DC    D'0'
LENGTH   DC    X'00004000'              LENGTH OF VSMLIST WORK-AREA
RETLOOP  DC    F'0'                     R14 SAVE AREA (VSMLIST)
RETLOOP1 DC    F'0'                     R14 SAVE AREA (VSMLIST)
ADDR1    DC    F'0'                     ADDRESS OF VSMLIST WORK AREA
ALLBELOW DC    F'0'                     TOTAL ALLOCATED BELOW
ALLABOVE DC    F'0'                     TOTAL ALLOCATED ABOVE
FREBELOW DC    F'0'                     TOTAL FREE SPACE BELOW
FREABOVE DC    F'0'                     TOTAL FREE SPACE ABOVE
TOTABELO DC    F'0'                     FINAL TOTAL ALLOCATED BELOW
TOTFBELO DC    F'0'                     FINAL TOTAL FREE BELOW
TOTAABOV DC    F'0'                     FINAL TOTAL ALLOCATED ABOVE
TOTFABOV DC    F'0'                     FINAL TOTAL FREE ABOVE
RETMSG   DS    5F
ADATE    DC    F'0'                     ACTUAL DATE
ATIME    DC    F'0'                     ACTUAL TIME
SAVESP   DC    X'00'                    LAST SUBPOOL NUMBER
SCRSIZE  DS    F                        TERMINAL SCREEN SIZE IF TSO
SCRSIZE1 DC    F'0'                     TERMINAL LINE COUNTER
FLGCALL  DC    X'00'                    CALLER-FLAG
STCCALL  EQU   X'80'                    CALLER IS STC
BTCHCALL EQU   X'40'                    CALLER IS BATCH
TSOCALL  EQU   X'20'                    CALLER IS TSO
WTDFLAG  DC    X'00'                    WORK-TO-DO-FLAG
VSMERROR EQU   X'80'                    VSMLIST ERROR
*        DYNAMIC ALLOCATION TEXT UNITS (DDNAME ALLOCATION):            *
RBLEN    EQU   (S99RBEND-S99RB)         LENGTH OF REQUEST BLOCK
DDNAMET1 DC    AL2(DALDDNAM)            DDNAME ALLOCATION
         DC    X'0001'                  # OF PARMS
         DC    X'0006'                  LENGTH OF DDNAME
         DC    CL6'REPORT'              DDNAME
SYSOUTTU DC    AL2(DALSYSOU)            SYSOUT ALLOCATION
         DC    X'0000'                  # OF PARMS, DEFAULT MSGCALSS
*        CLEAR 3270 SCREEN COMMAND:                                    *
CLRCMDS  DS    0F                       CLEAR 3270 SCREEN COMMAND
         DC    XL1'C5'                  WRITE CONTROL CHARACTERS
         DC    XL3'114040'              SET BUFFER-ADDR (ROW 0, COL 0)
         DC    XL1'13'                  INSERT CURSOR
         DC    XL4'3C404000'            REPEAT TO ADDRESS (0,0), X'00'
CLRCMDE  EQU   *
*        MESSAGES:                                                     *
MSGNONXA DC    CL72' SORRY, CANNOT RUN ON A NON-XA SYSTEM             '
MSGBLANK DC    CL72' '
HDRMSG01 DS    0CL72
         DC    CL21' '                  BLANK SPACES
         DC    CL30'XAMON CSA FRAGMENTATION REPORT'
         DC    CL21' '                  BLANK SPACES
MSGLNGTH EQU   *-HDRMSG01               MESSAGE LENGTH
HDRMSG02 DS    0CL72
         DC    CL14' '                  BLANK SPACES
         DC    CL8'SYSTEM: '
SYSTEMID DC    CL4' '                   SMF SYSTEM IDENTIFIER
         DC    CL9'   DATE:  '
DATE     DC    CL6' '                   ACTUAL DATE
         DC    CL8'   TIME:'
TIME     DC    CL12' '                  ACTUAL TIME
         DC    CL11' '
HDRMSG03 DS    0CL72
         DC    CL8' '                   BLANK SPACES
         DC    CL18'CSA FRAGMENTATION:'
         DC    CL18' '
         DC    CL20'E-CSA FRAGMENTATION:'
         DC    CL8' '                   BLANK SPACES
HDRMSG04 DS    0CL72
         DC    CL1' '                   BLANK SPACES
         DC    CL8'SUBPOOL:'
         DC    CL2' '
         DC    CL4'KEY:'
         DC    CL2' '                   E-SQA SIZE
         DC    CL10'ALLOCATED:'
         DC    CL2' '
         DC    CL5'FREE:'
         DC    CL4' '
         DC    CL8'SUBPOOL:'
         DC    CL2' '
         DC    CL4'KEY:'
         DC    CL2' '                   E-SQA SIZE
         DC    CL10'ALLOCATED:'
         DC    CL2' '
         DC    CL5'FREE:'
         DC    CL1' '
HDRMSG05 DS    0CL72
         DC    CL3' '
SPIDA    DC    CL4' '                   SUBPOOL
         DC    CL3' '
KEYA     DC    CL4' '                   STORAGE KEY
         DC    CL2' '
ALLOCA   DC    CL9' '                   ALLOCATED SIZE
FREEA    DC    CL9' '                   FREE SIZE
         DC    CL5' '
SPIDB    DC    CL4' '                   SUBPOOL
         DC    CL4' '
KEYB     DC    CL4' '                   STORAGE KEY
         DC    CL1' '
ALLOCB   DC    CL9' '                   ALLOCATED SIZE
FREEB    DC    CL9' '                   FREE SIZE
         DC    CL2' '
HDRMSG06 DC    0CL72
         DC    CL1' '
         DC    CL18'CSA START ADDRESS:'
         DC    CL7' '
CSAADDR  DC    CL8' '
         DC    CL4' '
         DC    CL20'E-CSA START ADDRESS:'
         DC    CL4' '
ECSAADDR DC    CL8' '
         DC    CL2' '
HDRMSG07 DS    0CL72
         DC    CL1' '
         DC    CL9'CSA SIZE:'
         DC    CL16' '
CSASIZE  DC    CL9' '
         DC    CL3' '
         DC    CL11'E-CSA SIZE:'
         DC    CL13' '
ECSASIZE DC    CL9' '
         DC    CL3' '
HDRMSG08 DS    0CL72
         DC    CL1' '
         DC    CL22'TOTAL ALLOCATED BELOW:'
         DC    CL2' '
CSAABELO DC    CL9' '
         DC    CL4' '
         DC    CL22'TOTAL ALLOCATED ABOVE:'
         DC    CL1' '
CSAAABOV DC    CL11' '
HDRMSG8A DS    0CL72
         DC    CL29' '
ALLOCBP  DC    CL4' '
         DC    CL1'%'
         DC    CL31' '
ALLOCAP  DC    CL4' '
         DC    CL1'%'
         DC    CL2' '
HDRMSG09 DS    0CL72
         DC    CL1' '
         DC    CL23'TOTAL FREE SPACE BELOW:'
         DC    CL1' '
CSAFBELO DC    CL9' '
         DC    CL4' '
         DC    CL23'TOTAL FREE SPACE ABOVE:'
CSAFABOV DC    CL9' '
         DC    CL2' '
WORKMSG1 DC    CL72' VSMLIST WORK-AREA IS TOO SMALL FOR ALL INFO      '
WORKMSG2 DC    CL72' RETURN CODE =                                    '
TERMMSG  DC    CL72' INPUTTING TERMINAL IS NOT A DISPLAY TERMINAL     '
TERMMSG1 DC    CL72'===> PRESS ENTER TO DISPLAY REMAINING INFORMATION '
TERMINP  DC    CL72'                                                  '
DYNMSG1  DC    CL72'DYNALLOC ERROR, ERROR = XXXX, INFO = XXXX         '
DYNMSG2  DC    CL72'SYSPRINT FILE FOR IEHLIST COULD NOT BE ALLOCATED  '
OPENMSG  DC    CL72'OPEN OF REPORT SYSOUT-FILE WAS NOT SUCCESSFUL     '
         LTORG
*        DATA CONTROL BLOCK:                                           *
REPORT   DCB   DDNAME=REPORT,DSORG=PS,MACRF=PM,LRECL=72,BLKSIZE=7200,   +
               RECFM=FB
*        COMMUNICATION AREA MAPPING:                                   *
COMSECT  DSECT
ECBADDR  DS    A                        ADDR OF MODIFY/STOP-ECB
CIBADDR  DS    A                        ADDR OF FIRST CIB
         DS    CL8                      NOT USED
OPECB    DC    F'0'                     OPERATOR REPLY-ECB
CIB      DSECT
CIBNEXT  DS    A                        ADDR OF NEXT CIB
CIBVERB  DS    X                        VERB CODE
STOP     DC    X'40'                    STOP COMMAND
MODIFY   DC    X'44'                    MODIFY COMMAND
CIBLNGH  DS    X                        CIB-LENGTH IN DOUBLE-WORDS
         DS    3X                       RESERVED
CIBTSOID DS    H                        TSO-TERMINAL-ID
CIBCONID DS    X                        MCS-CONSOLE-ID
         DS    X                        RESERVED
CIBCOMLN DS    H                        COMMAND-DATA-LENGTH
CIBDATA  DS    C                        COMMAND DATA
         IHAGDA
         CVT   DSECT=YES,LIST=NO
         IHAPSA
         IHAASCB
         IRAOUCB
         IEESMCA
         IEFZB4D0
         IEFZB4D2
         DCBD  DSORG=PS
         END   XAMONCSF


Silvio Sasso
Systems Engineer
Winterthur Insurances (Switzerland)     € Winterthur Insurances 1987



