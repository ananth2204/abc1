Analysing page dataset slot usage

INTRODUCTION

I recently experienced problems with the paging subsystem
running short on storage slots. The problem showed itself during
prime time hours via an 'IRA200E Auxiliary Storage Shortage'
message on the console. This immediately causes a situation
where LOGON, MOUNT, and START commands are rejected
until the shortage is relieved. This obviously has a significant
impact on throughput until it is resolved. The problem typically
can be resolved by adding an additional page dataset to the
subsystem. In my case, I was surprised to discover an inability to
do this because a value in the PAGTOTL parameter of the
IEASYS00 member of SYS1.PARMLIB did not allow additional
page datasets to be added to the system.

The immediate thought was to systematically remove low priority
processing from the system to regain storage slots. I soon found
tasks being removed from the system had minimal effect on the
percentage of page dataset slots in use, which can be monitored
via the command D ASM. The IRA200E message is issued when
70% of all available local paging slots are in use. The goal was to
get this usage below 70% as soon as possible.

After working through this scenario, I was interested in having a
TSO command available which would identify auxiliary slot
usage on the system for each address space and give overall totals.
By having this command available, I would have a much better
understanding of my system when faced with situations where it
was valuable to know the nature of page dataset usage. A
command was written to examine address space vector table
control blocks to retrieve and list the slots in use. The Assembler
program, called SLOTS, lists both VIO and non-VIO slots for
each address space along with a total for each. At the end of the
detail list, three informational lines are displayed. These lines
contain total number of address spaces, total number of slots used,
total number of slots available, current percentage of slots used,
and slots unavailable due to errors. Current percentage used is
rounded up to the nearest whole number. The program
accumulates information in storage before printing. In turn, detail
data can be printed in descending total order by address space.
This permits determining the most appropriate candidates to select
by the amount of slots they would free up when removed from the
system. Address spaces with high slot usage but minimal overall
system impact are sought out, to achieve little if any impact on
stability of the production workload. I found the Virtual
Lookaside Facility (VLF) address space consistently shows up
with the most usage in my environment. This turns out to be a
good candidate for removal on a temporary basis to relieve an
immediate problem.

The program is coded to analyse an upper limit of 500 address
spaces. If there are more in your system, a couple of variables will
need to be modified slightly. Change the FIVE100 and
DISPMAX variables to match the number you'd like to analyse,
add a value of 20 times this increase over 500 to the size of the
TABLESZ variable, and add the increase to the ASTABLE
multiplier. Also, make an appropriate change to the text of the
MSGWARN message. If the upper limit condition is reached, a
message will be issued as a reminder. The total slot usage will still
reflect all address spaces.

One PARM value is available for use as input to the process, if
you wish to cut down on the number of address spaces displayed.
The PARM must be a 2-digit numeric value from 00 to 99,
indicating how many address spaces to display. This is different
from the upper limit value, as all address spaces are still analysed
but only thoses with the highest usage are displayed. I have found
this command useful for routine examination of slot usage and
any potential abuse. Some users accumulate significant amounts
which can be analysed and changed where appropriate.

There are no specific authorization requirements, so the command
can be issued from any available logged-on TSO session, even if
there is a shortage condition. As an added feature, the program
can be run as a started task from the console to retrieve the
information via WTOs back to the console. However, in a
shortage situation, a started task cannot initiate until the shortage
is relieved. The started task can also make use of PARM value
input to cut down on console traffic. I've found the started task to
be of value as an automatic command issued during off-peak
hours for routine monitoring when I'd otherwise be uninformed.
The started task can be set up as:

//SLOTS  PROC  NUM=50
//STEP1  EXEC  PGM=SLOTS,PARM=&NUM

This same process could be executed as a TSO command by
simply issuing SLOTS 50. Sample output from a SLOTS 10
command issued on my system is illustrated in Figure 1.

PROGRAM SOURCE CODE

SLOTS    CSECT
SLOTS    AMODE 31
R0       EQU   0                   GETMAIN LENGTH
R1       EQU   1                   CPPL BASE, GETMAIN LOCATION
R2       EQU   2                   GETMAIN LOCATION BASE
R3       EQU   3                   WORK, ASVT BASE
R4       EQU   4                   WORK, ASCB BASE
R5       EQU   5                   CVT BASE, WORK
R6       EQU   6                   WORK, ASVT MAX USED
R7       EQU   7                   WORK
R8       EQU   8                   WORK, UPT BASE
R9       EQU   9                   WORK, ASSB BASE
R10      EQU   10                  ASMVT ADDRESS, WORK
R11      EQU   11                  ECT BASE
R12      EQU   12                  PROGRAM BASE
R13      EQU   13                  SAVE AREA
R14      EQU   14                  RETURN ADDRESS
R15      EQU   15                  WORK, RETURN CODE
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             LOAD BASE REG
         USING SLOTS,R12           BASE PROGRAM ADDRESSABILITY
         LA    R15,SAVEA           SET UP
         ST    R13,4(R15)           SAVE
         ST    R15,8(R13)            AREA
         LA    R13,SAVEA              LINKAGE
         L     R8,16               CVT ADDRESS
         L     R8,0(,R8)           TCB ADDRESS
         L     R4,12(,R8)          ASCB ADDRESS
         USING ASCBEGIN,R4         ESTABLISH ASCB ADDRESSABILITY
         L     R3,0(,R1)           SAVE ADDRESS OF PARM
         LH    R5,0(,R3)           SAVE LENGTH OF PARM FIELD
         L     R8,ASCBTSB          LOAD TERMINAL STATUS BLOCK ADDRESS
         LTR   R8,R8               IS THIS A TSO SESSION?
         BNZ   NOTSTC              YES, DON'T SET STC FLAG
         MVI   STCFLAG,X'FF'       TURN STC FLAG ON
         B     CHKPARM             DON'T PROCESS CPPL
         USING CPPL,R1             CPPL ADDRESSABILITY
NOTSTC   L     R8,CPPLUPT          SAVE UPT ADDRESS
         L     R11,CPPLECT         SAVE ECT ADDRESS
         DROP  R1                  DON'T NEED ANYMORE
CHKPARM  CLI   STCFLAG,X'FF'       IS THIS A STARTED TASK
         BE    STCPARM             IF YES, PROCESS PARM AS STC
         LH    R6,2(,R3)           DISPLACEMENT LENGTH
         LA    R6,4(R6)            ADD LEADER LENGTH
         SR    R5,R6               ADJUST PARM LENGTH
         LTR   R5,R5               IS THERE A PARM FIELD?
         BZ    PARMDONE            IF NO, DON'T PROCESS ONE
         CH    R5,=H'2'            IS PARM LENGTH 2?
         BNE   TSOBAD              IF NO, IT'S BAD
         LA    R3,0(R6,R3)         POINT TO ACTUAL PARM
         B     PARMTEST            GO CHECK FOR NUMERIC
STCPARM  LH    R5,0(,R3)           LENGTH OF PARM DATA
         LTR   R5,R5               IS THERE A PARM FIELD?
         BZ    PARMDONE            IF NO, DON'T PROCESS ONE
         CH    R5,=H'2'            IS PARM LENGTH 2?
         BNE   STCBAD              IF NO, IT'S BAD
         LA    R3,2(,R3)           POINT TO ACTUAL PARM
PARMTEST TRT   0(2,R3),TRTNUM      IS IT NUMERIC?
         BC    7,BADPARM           IF NO, BAD PARM
         PACK  WORK3,0(2,R3)       PACK THE NUMBER
         ZAP   DISPMAX,WORK3       SAVE IT FOR LATER USE
         B     PARMDONE            FINISHED PROCESSING PARM
BADPARM  CLI   STCFLAG,X'FF'       IS THIS A STARTED TASK
         BE    STCBAD              IF YES, PROCESS STC MESSAGE
TSOBAD   MVC   PUTLMSG,MSGPARM     LOAD BAD PARM MESSAGE
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         B     GETOUT
STCBAD   MVC   WTOMSG+4(35),MSGPARM LOAD BAD PARM MESSAGE
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         B     GETOUT
PARMDONE SR    R0,R0               ZERO REG 0
         LH    R0,TABLESZ          SIZE TO GETMAIN
         GETMAIN RU,LV=(R0)        GET SOME WORK STORAGE
         ST    R1,TABLADDR         STORE GETMAINED LOCATION
         L     R2,TABLADDR         GETMAIN LOCATION FOR DSECT
         USING GETAREA,R2          DSECT ADDRESSABILITY
         CLI   STCFLAG,X'FF'       IS THIS A STARTED TASK
         BNE   TSOHEADS            IF NO, PROCESS AS TSO
         MVC   WTOMSG+4(35),HEADING1 LOAD HEADING 1
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         MVC   WTOMSG+4(35),HEADING2 LOAD HEADING 2
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         MVC   WTOMSG+4(35),HEADING3 LOAD HEADING 3
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         MVC   WTOMSG+4(35),HEADING4 LOAD HEADING 4
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         B     GETCVT              CONTINUE PROCESSING
TSOHEADS MVC   PUTLMSG,HEADING1    LOAD HEADING 1
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
                OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         MVC   PUTLMSG,HEADING2    LOAD HEADING 2
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         MVC   PUTLMSG,HEADING3    LOAD HEADING 3
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         MVC   PUTLMSG,HEADING4    LOAD HEADING 4
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
GETCVT   L     R5,CVTPTR           POINT TO CVT
         USING CVTMAP,R5           CVT ADDRESSABILITY
         L     R3,CVTASVT          POINT TO AS VECTOR TABLE
         L     R10,CVTASMVT        POINT TO ASM VECTOR TABLE
         DROP  R5                  DON'T NEED ANYMORE
         MVC   ASMSLOTS,112(R10)   GET TOTAL SLOTS AVAILABLE
         MVC   ASMERRS,124(R10)    GET # OF BAD SLOTS
         USING ASVT,R3             ASVT ADDRESSABILITY
         LA    R5,ASVTFRST         ADDRESS OF 1ST ENTRY IS ASVT
         L     R6,ASVTMAXU         MAX ADDRESS SPACES
         LA    R7,ASTABLE          POINT TO A/S TABLE SAVE AREA
ASVTLOOP TM    0(R5),ASVTAVAI      IS ADDRESS SPACE UNUSED?
         BNO   CHKASCB             IF IN USE, CHECK IT OUT
         C     R5,=A(X'80000000')  IS THIS LAST ASCB IN CHAIN?
         BE    UNLOAD              IF YES, UNLOAD THE TABLE
NEXTASVT LA    R5,L'ASVTENTY(R5)   SKIP TO NEXT ASVT ENTRY
         BCT   R6,ASVTLOOP         KEEP LOOKING
         B     UNLOAD              GO UNLOAD TABLE
CHKASCB  L     R4,0(R5)            ADDRESS OF ASCB FROM ASVT
         USING ASCB,R4             ADDRESS ASCB
         CLC   ASCBJBNI,=F'0'      IS THIS AN EXECUTED PROGRAM A/S
         BE    CHKSML              IF NO, IT'S A START/MOUNT/LOGON
         L     R9,ASCBJBNI         A/S NAME ADDRESS
         MVC   0(8,R7),0(R9)       SAVE ADDRESS SPACE NAME IN TABLE
         B     SKIPSML             SKIP START/MOUNT/LOGON PROCESSING
CHKSML   L     R9,ASCBJBNS         GET ADDRESS OF NAME
         MVC   0(8,R7),0(R9)       SAVE START/MOUNT/LOGON IN TABLE
SKIPSML  AP    ASCOUNT,=P'1'       ADD 1 TO COUNT
         L     R9,ASCBASSB         ADDRESS SPACE SECONDARY BLOCK
         USING ASSB,R9             ASSB ADDRESSABILITY
         CP    FIVE100(4),ASCOUNT  ARE WE PAST TABLE MAX?
         BL    ADDONLY             IF YES, ONLY ADD TO TOTAL
         ZAP   WORK1,=P'0'         ZERO WORK FIELD
         L     R15,ASSBVSC         LOAD VIO SLOT COUNT
         ST    R15,8(,R7)          STORE VIO COUNT IN TABLE
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         AP    WORK1,CVDWORK       ADD TO TOTAL FOR THIS A/S
         L     R15,ASSBNVSC        LOAD NON-VIO SLOT COUNT
         ST    R15,12(,R7)         STORE NON-VIO COUNT IN TABLE
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         AP    WORK1,CVDWORK       ADD TO TOTAL FOR THIS A/S
         MVC   16(4,R7),WORK1      SAVE TOTAL IN TABLE
         AP    WORK2,WORK1         ADD THIS A/S TOTAL TO OVERALL TOTAL
         CP    ASCOUNT(4),FIVE100  HAVE WE REACHED TABLE MAX?
         BE    TABLMAX             IF YES, CAN'T PROCESS ANYMORE
         LA    R7,20(R7)           POSITION TO NEXT TABLE ENTRY
         B     NEXTASVT            GO PROCESS NEXT ADDRESS SPACE
ADDONLY  L     R15,ASSBVSC         LOAD VIO SLOT COUNT
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         AP    WORK1,CVDWORK       ADD TO OVERALL TOTAL
         L     R15,ASSBNVSC        LOAD NON-VIO SLOT COUNT
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         AP    WORK2,CVDWORK       ADD TO OVERALL TOTAL
         B     NEXTASVT            GO PROCESS NEXT ADDRESS SPACE
TABLMAX  CLI   STCFLAG,X'FF'       IS THIS A STARTED TASK
         BNE   TSOWARN             IF NO, PROCESS AS TSO
         MVC   WTOMSG+4(35),MSGWARN LOAD WARNING MESSAGE
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         LA    R7,20(R7)           POSITION FOR X'FF' MOVE
         B     NEXTASVT            GO PROCESS NEXT ADDRESS SPACE
TSOWARN  MVC   PUTLMSG,MSGWARN     INDICATE TABLE MAX WAS REACHED
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         LA    R7,20(R7)           POSITION FOR X'FF' MOVE
         B     NEXTASVT            GO PROCESS NEXT ADDRESS SPACE
UNLOAD   LA    R10,ASTABLE         POINT TO A.S. TABLE SAVE AREA
         MVI   0(R7),X'FF'         MARK POSITION OF LAST ENTRY
LOOP1    MVC   COMPAREA(20),0(R10) MOVE TABLE ENTRY TO COMPARE AREA
         LA    R7,20(R10)          POSITION TO NEXT ENTRY
         CLI   0(R7),X'FF'         WAS THAT THE LAST ENTRY?
         BE    PRINTIT             IF YES, GO PRINT IT
LOOP2    CP    16(4,R7),TOTLSCNT(4) IS THIS ENTRY USING MORE SLOTS?
         BL    NXTENTRY            IF NO, GO GET THE NEXT ONE
         MVC   WORKHOLD,COMPAREA   SAVE THE COMPARE AREA FIELDS
         MVC   COMPAREA(20),0(R7)  MOVE CURRENT TO COMPARE AREA
         MVC   0(20,R7),WORKHOLD   MOVE OLD COMPARE AREA BACK TO TABLE
NXTENTRY LA    R7,20(R7)           POSITION TO NEXT TABLE ENTRY
         CLI   0(R7),X'FF'         ARE WE AT END OF TABLE?
         BE    PRINTIT             IF YES, GO PRINT
         B     LOOP2               CONTINUE COMPARE PROCESS
PRINTIT  CP    DISPMAX(4),DISPCNT  HAVE WE PRINTED ALL WE WANT?
         BE    RETURN0             IF YES, QUIT
         MVC   MSGNAME,ASNAME      MOVE A/S NAME TO MESSAGE
         L     R15,VSCNT           LOAD VIO COUNT
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         MVC   MSGVSC,EDITPTRN     LOAD EDIT PATTERN
         ED    MSGVSC,CVDWORK+4    EDIT VALUE INTO MESSAGE
         L     R15,NVSCNT          LOAD NON-VIO COUNT
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         MVC   MSGNVSC,EDITPTRN    LOAD EDIT PATTERN
         ED    MSGNVSC,CVDWORK+4   EDIT VALUE INTO MESSAGE
         MVC   MSGTOT,EDITPTRN     LOAD EDIT PATTERN
         ED    MSGTOT,TOTLSCNT     EDIT TOTAL INTO MESSAGE
         CLI   STCFLAG,X'FF'       IS THIS A STARTED TASK
         BNE   TSODETL             IF NO, PROCESS AS TSO
         MVC   WTOMSG+4(35),MSG    LOAD DETAIL MESSAGE
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         B     GETNEXT             GO GET NEXT ONE
TSODETL  MVC   PUTLMSG,MSG         LOAD INFO FOR PRINT
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
GETNEXT  AP    DISPCNT,=P'1'       ADD 1 TO LINES DISPLAYED
         LA    R10,20(R10)         POSITION TO NEXT TABLE ENTRY
         CLI   0(R10),X'FF'        ARE WE AT END OF TABLE?
         BNE   LOOP1               IF NO, RESTART COMPARE PROCESS
RETURN0  MVC   MSG#CNT,EDITPTRN    LOAD EDIT PATTERN
         ED    MSG#CNT,ASCOUNT     EDIT OVERALL TOTAL INTO MESSAGE
         MVC   MSGTUSE,EDITPTRN    LOAD EDIT PATTERN
         ED    MSGTUSE,WORK2       EDIT OVERALL TOTAL INTO MESSAGE
         L     R15,ASMSLOTS        LOAD AVAILABLE SLOTS
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         MVC   MSGAVAIL,EDITPTRN   LOAD EDIT PATTERN
         ED    MSGAVAIL,CVDWORK+4  EDIT VALUE INTO MESSAGE
         ZAP   WORK3,WORK2         MOVE WORK2 TO 8-BYTE FIELD
         CVB   R1,WORK3            GET HEX OVERALL TOTAL
         M     R0,=F'100'          MULTIPLY BY 100
         D     R0,ASMSLOTS         CALCULATE PERCENTAGE USED
         CVD   R1,CVDWORK          CONVERT TO DECIMAL
         AP    CVDWORK,=P'1'       TRUNCATION UNDERSTATES
         MVC   MSGPRCT,EDITPTRN    LOAD EDIT PATTERN
         ED    MSGPRCT,CVDWORK+4   EDIT VALUE INTO MESSAGE
         L     R15,ASMERRS         LOAD BAD SLOTS VALUE
         CVD   R15,CVDWORK         CONVERT TO DECIMAL
         MVC   MSGERRS,EDITPTRN    LOAD EDIT PATTERN
         ED    MSGERRS,CVDWORK+4   EDIT VALUE INTO MESSAGE
         CLI   STCFLAG,X'FF'       IS THIS A STARTED TASK
         BNE   TSOTOTAL            IF NO, PROCESS AS TSO
         MVC   WTOMSG+4(35),HEADING2 LOAD HEADING 2
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         MVC   WTOMSG+4(35),MSGEND1 LOAD ADDRESS SPACE TOTALS MESSAGE
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         MVC   WTOMSG+4(35),MSGEND2 LOAD SYSTEM TOTALS MESSAGE
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         MVC   WTOMSG+4(35),MSGEND3 LOAD BAD SLOTS MESSAGE
         WTO   MF=(E,WTOMSG)       WRITE TO CONSOLE
         B     ZEROR0              GO FINISH UP
TSOTOTAL MVC   PUTLMSG,HEADING2    LOAD HEADING 2
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         MVC   PUTLMSG,MSGEND1     LOAD ADDRESS SPACE TOTALS MESSAGE
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         MVC   PUTLMSG,MSGEND2     LOAD SYSTEM TOTALS MESSAGE
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         MVC   PUTLMSG,MSGEND3     LOAD BAD SLOTS MESSAGE
         PUTLINE PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=(R11),UPT=(R8),  X
               OUTPUT=(PUTLTEXT,TERM,SINGLE,DATA)
         LH    R0,TABLESZ          SIZE OF GETMAINED AREA
         L     R1,TABLADDR         LOCATION OF GETMAINED AREA
         FREEMAIN R,LV=(R0),A=(R1) FREE GETMAINED AREA
GETOUT   L     R13,4(R13)          GET OLD SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE REGS
         SR    R15,R15             SET RETURN CODE TO 0
         BR    R14                 RETURN
SAVEA    DC    18F'0'              SAVE AREA
WORK1    DS    PL4                 A/S SLOT COUNT TOTAL
WORK2    DC    PL4'0'              OVERALL SLOT COUNT TOTAL
DISPCNT  DC    PL4'0'              NUMBER OF A/S DISPLAYED
DISPMAX  DC    PL4'500'            MAX NUMBER OF A/S TO DISPLAY
ASMSLOTS DS    F                   TOTAL SYSTEM SLOTS AVAILABLE
ASMERRS  DS    F                   # OF BAD SLOTS
EDITPTRN DC    X'4020202020202020' EDIT PATTERN
HEADING1 DC    C' AUX STORAGE SLOTS IN USE BY TOTAL '
HEADING2 DC    C'                                   '
HEADING3 DC    C'A/S NAME  NON-VIO   VIO     TOTAL  '
HEADING4 DC    C'-------- -------- -------- --------'
MSGWARN  DC    C' ** FIRST 500 A/S ONLY ANALYSED  **'
MSGPARM  DC    C'SLOTS PARM VALUE MUST BE 00 THRU 99'
MSG      DS    0CL35               ADDRESS SPACE INFO LINE
MSGNAME  DS    CL8                 ADDRESS SPACE NAME
         DC    C' '
MSGNVSC  DS    CL8                 EDITED VIO SLOT COUNT
         DC    C' '
MSGVSC   DS    CL8                 EDITED NON-VIO SLOT COUNT
         DC    C' '
MSGTOT   DS    CL8                 ADDRESS SPACE TOTAL SLOT COUNT
MSGEND1  DS    0CL35               ADDRESS SPACE TOTALS LINE
         DC    C' # A/S ->'
MSG#CNT  DS    CL8                 EDITED A/S # COUNT
         DC    C'  TOTAL ->'
MSGTUSE  DS    CL8                 EDITED TOTAL USAGE
MSGEND2  DS    0CL35               SYSTEM TOTALS LINE
         DC    C' AVAIL ->'
MSGAVAIL DS    CL8                 EDITED AVAILABLE SLOTS
         DC    C' USED % ->'
MSGPRCT  DS    CL8                 EDITED % USED
MSGEND3  DS    0CL35               ADDRESS SPACE TOTAL LINE
         DC    CL14' '
         DC    C' BAD SLOTS ->'
MSGERRS  DS    CL8                 EDITED BAD SLOTS
WORKHOLD DS    CL20                INTERIM HOLD AREA
         DS    0D
WORK3    DC    PL8'0'              CVB WORK FIELD
COMPAREA DS    0CL20               COMPARE HOLD AREA
ASNAME   DS    CL8                 ADDRESS SPACE NAME
VSCNT    DS    PL4                 VIO SLOT COUNT
NVSCNT   DS    PL4                 NON-VIO SLOT COUNT
TOTLSCNT DS    PL4                 TOTAL SLOT COUNT
TABLADDR DS    F                   ADDRESS OF GETMAINED AREA
FIVE100  DC    PL4'500'            MAX TABLE NUMBER
ASCOUNT  DC    PL4'0'              COUNT OF ADDRESS SPACES PROCESSED
TABLESZ  DC    H'10008'            TABLE SIZE FOR STORED INFO
STCFLAG  DC    X'00'               FLAG TO INDICATE WHETHER AN STC
TRTNUM   DC    256XL1'FF'          TRT TABLE TO CHECK NUMERICS
         ORG   TRTNUM+C'0'
         DC    XL10'00'
         ORG
WTOMSG   WTO   '                                   ',MF=L
         DS    0D
CVDWORK  DS    CL8                 CONVERT TO DECIMAL WORK AREA
ECB      DS    F'0'                PUTLINE ECB
PUTLINE  PUTLINE MF=L
PUTLTEXT DC    H'39'               PUTLINE TEXT
         DC    H'0'
PUTLMSG  DS    CL35                ACTUAL PUTLINE MESSAGE
IOPL     DS    4F'0'               IOPL
         LTORG
GETAREA  DSECT
ASTABLE  DS    501CL20             ADDRESS SPACE INFO SAVE TABLE
         CVT DSECT=YES,LIST=NO     CVT
         IHAASVT DSECT=YES         ASVT
         IHAASCB DSECT=YES         ASCB
         IHAASSB                   ASSB
         IKJCPPL                   CPPL
         END    SLOTS


Ernie Ishman
Manager Systems Support
Geisinger System Services (USA)                                           c Xeph

