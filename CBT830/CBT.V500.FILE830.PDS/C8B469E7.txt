Some useful fields in MVS control blocks

It is sometimes useful for a program to be able to find out its own job
name and job number, the name of the system it is running on, and so on.
This sort of information might be required, for example, for inclusion
in console messages and reports, or by a suite of programs that keeps
its own log of jobs as they are run.

This article presents some techniques for locating such information,
together with some fragments of Assembler code that will show how to
find the relevant control blocks.

For the purposes of illustration, all the examples use absolute decimal
values for control block offsets.  Although the use of explicit base and
displacements is not usually considered good coding practice, it can
safely be used in most of the cases given here, since most the fields
quoted in this article are in very well established MVS control blocks,
and in most cases their offsets have not changed since the first release
of MVS over 12 years ago.  For those who prefer to use the appropriate
mapping macros, the field names have been included as comments against
the code.

The starting point for finding most of the control blocks associated
with a job is either the Address Space Control Block (ASCB) or the Task
Control Block (TCB).  These are the fundamental control blocks
associated with a running job.  There is one ASCB for each address space
(ie each job, started task, and TSO user) in the system.  ASCBs are in
common storage (SQA), therefore any job in the system can look at the
ASCBs for all the other jobs currently running.

There is one TCB for each task running in the address space.  TCBs are
held within the address space (in LSQA) and are therefore accessible
only to programs running within the same address space.  In common with
most of the useful control blocks, neither the ASCB nor the TCB is
fetch-protected.

In the PSA of each processor there is an area of storage called the
TCBWORDS.  This area is four words long and defines the currently
dispatched task: the second word contains the current TCB address and
the fourth word contains the ASCB address.  The first word of the CVT
points to the TCBWORDS.  Thus, a program can always find its own ASCB
and TCB address by this sequence of code:

         L     R2,16                POINT TO CVT (CVTPTR)
         L     R2,0(,R2)            POINT TO TCBWORDS (CVTTCBP)
         L     R3,4(,R2)            POINT TO CURRENT TCB
         L     R4,12(,R2)           POINT TO CURRENT ASCB

HOW TO FIND THE CURRENT JOB NAME OR TSO USER-ID

A program running as a batch job can find its job name from the TIOT.
The TIOT is pointed to by the TCB.  The first three double words of the
TIOT contain the job name, step name, and procedure step name.  A
program running under TSO will find the TSO user-id in the first double
word of the TIOT in place of the job name; the second double word
contains the name of the log-on procedure.

         L     R2,16                POINT TO CVT (CVTPTR)
         L     R2,0(,R2)            POINT TO TCBWORDS (CVTTCBP)
         L     R2,4(,R2)            POINT TO TCB
         L     R2,12(,R2)           POINT TO TIOT (TCBTIO)
         MVC   JOBNAME(8),0(R2)     COPY JOBNAME FROM TIOT
         MVC   STEPNAME(8),8(R2)    COPY STEPNAME FROM TIOT

HOW TO FIND THE CURRENT JOB NUMBER

It is sometimes useful for a program to know the identifier by which its
job is known to the job entry subsystem (in a JES2 system this is the
JOB number, STC number, or TSU number).  The job identifier is held in
the life-of-job SSIB, which is the control block that identifies the job
to JES when calls are made via the subsystem interface.  The life-of-job
SSIB is accessed from the JSCB, as in the following sample code:

         L     R2,16                POINT TO CVT
         L     R2,0(,R2)            TO TCBWORDS
         L     R2,4(,R2)            TO TCB
         L     R2,180(,R2)          TO JSCB (TCBJSCB)
         L     R2,348(,R2)          TO ACTIVE JSCB (JSCBACT)
         ICM   R2,15,316(R2)        TO LIFE-OF-JOB SSIB (JSCBSSIB)
         BZ    NOID                 (SKIP IF NO LOJ SSIB)
         MVC   JOBID(8),12(R2)      COPY JOB NUMBER (SSIBJBID)
NOID     EQU   *

HOW TO FIND A TSO USER'S TERMINAL-ID

The VTAM LU name of a TSO user's terminal is held in a control block
called the Terminal Status Block (TSB).  The TSB is pointed to by the
TSO user's ASCB.  The TSB is in fetch-protected CSA storage, therefore
it can be read only by an APF-authorised program, which has set itself
into the correct key using the MODESET macro instruction.  The following
code illustrates how a program running in a TSO user's address space can
find its own terminal name:

         L     R2,16                POINT TO CVT (CVTPTR)
         L     R2,0(,R2)            TO TCBWORDS (CVTTCBP)
         L     R2,12(,R2)           TO CURRENT ASCB
         ICM   R2,15,60(R2)         TO TSB (ASCBTSB)
         BZ    NOTTSO               (SKIP IF NOT TSO USER)
         MODESET KEY=ZERO           ENTER KEY ZERO
         MVC   TERMID(8),104(R2)    COPY TERMINAL NAME (TSBTRMID)
         MODESET KEY=NZERO          REVERT TO NORMAL KEY
NOTTSO   EQU    *

To find the terminal name of another TSO user, it is first necessary to
locate that user's ASCB.  This can be done by scanning the CSCB chain,
as shown later in this article.  From the ASCB, the user's TSB can be
found.

HOW TO FIND THE SYSTEM-ID

A four-character system identifier is assigned at IPL time by SMF
initialisation.  This system-id is specified in the SMFPRMxx member of
SYS1.PARMLIB.  The primary purpose of the SMF system-id is to identify
which system produced each SMF record.  More significantly, the SMF
system-id is used by JES2 to identify the individual systems in a
multi-access spool (MAS) complex.  The SMF system-id appears in certain
JES2 messages and commands, and in the lock record in the JES2
Checkpoint Dataset.  The SMF system-id can be found in the System
Management Control Area (SMCA), which is the primary control block for
SMF.  The SMCA can be found from the CVT as in the following code:

         L     R2,16                POINT TO CVT
         L     R2,196(,R2)          POINT TO SMCA (CVTSMCA)
         MVC   SYSID(4),16(R2)      COPY SMF-ID (SMCASID)

HOW TO FIND THE MVS RELEASE NUMBER

The CVT contains the FMID of the base control program (for example
JBB2217 for MVS/XA 2.1.7).  This identifier is held in the CVT prefix at
CVT-32.  The CVT also contains an indication of the operating system
type (ie VS1, MVS, MVS/XA, etc).  This is held in a one-byte field at
CVT+116.  This byte contains X'13' for MVS, and X'93' for MVS/XA.

The following code illustrates access to these fields:

         L     R2,16                POINT TO CVT (CVTPTR)
         TM    116(R2),X'80'        IS IT XA? (TM CVTDCB,CVTMVSE)
         BZ    NOTXA                NO - SKIP
         ...  (put XA specific code here)
NOTXA    SH   R2,=H'256             POINT TO CVT PREFIX (CVTFIX)
         MVC  FMID(8),224(R2)       COPY FMID (CVTPRODI)

HOW TO FIND THE SYSRES VOLUME SERIAL

The device address and volume serial number of the unit that the system
was IPLed from are contained in the Unit Control Block for the system
residence volume (the SYSRES UCB).  The CVT contains the address of the
SYSRES UCB.  The following example shows how to find the SYSRES unit and
volume serial number:

         L     R2,16                POINT TO CVT (CVTPTR)
         L     R2,48(,R2)           POINT TO SYSRES UCB (CVTSYSAD)
         MVC   UNIT(3),13(R2)       COPY UNIT ADDRESS (UCBNAME)
         MVC   VOL(6),28(R2)        COPY VOLUME SERIAL (UCBVOLI)

HOW TO FIND THE NAMES OF ALL EXECUTING JOBS

Each job, started task, and TSO user currently in the system has a
control block called a Command Scheduling Control Block (CSCB).  This is
the control block that the master scheduler uses to locate the job when
an operator CANCEL command is issued.  Each CSCB contains the job name,
started task-id, or TSO user-id.  It also contains the job's address
space-id (ASID), which can be used as an index into the address space
vector table to locate the job's ASCB.

The CSCBs are chained together in the SQA (common storage).  The head of
the chain is pointed to by a control block called the Master Scheduler
Resident Data Area (whose acronym, strangely, is BASEA).

The following code illustrates how to scan the CSCB chain to find the
ASCB for a job called FRED:

         L     R2,16                POINT TO CVT (CVTPTR)
         L     R3,148(,R2)          TO BASEA (CVTMSER)
         L     R3,0(,R3)            TO 1ST CSCB (BACHN)
NEXTCSCB EQU  *
         CLC   8(8,R3),=CL8'FRED'   IS THIS OUR CSCB (CHKEY)
         BE    GOTIT                YES - EXIT SCAN
         L     R3,0(R3)             TO NEXT CSCB (CHPTR)
         LTR   R3,R3                END OF CSCB CHAIN?
         BNZ   NEXTCSCB             NO - CONTINUE SCAN
         B     NOTFOUND             EXIT - JOB NOT FOUND
GOTIT    DS    0H
         LH    R5,30(,R3)           ASID FROM CSCB (CHASID)
         SLL   R5,2                 X 4
         L     R6,556(,R2)          POINT TO ASVT (CVTASVT)
         L     R6,524(R5,R6)        GET ASCB ADDR FROM ASVT
         ...
*       (R5 now contains the ASID and R6 points to the ASCB)

This example would be better coded with the use of mapping macros to
provide symbolic field names, as shown below:

         L     R2,CVTPTR            POINT TO CVT
         USING CVTMAP,R2            CVT ADDRESSABILITY
         L     R3,CVTMSER           POINT TO BASEA (MASTER SCHEDULER
         USING BASE,R3              RESIDENT DATA AREA)
         L     R3,BACHN             POINT TO 1ST CSCB
         USING CHAIN,R3             CSCB ADDRESSABILITY
NEXTCSCB EQU   *
         CLC   CHKEY,=CL8'FRED'     IS THIS OUR CSCB
         BE    GOTIT                YES - EXIT SCAN
         L     R3,CHPTR             TO NEXT CSCB
         LTR   R3,R3                END OF CSCB CHAIN?
         BNZ   NEXTCSCB             NO - CONTINUE SCAN
         B     NOTFOUND             EXIT - JOB NOT FOUND
GOTIT    DS    0H
         LH    R5,CHASID            ASID FROM CSCB
         SLL   R5,2                 X 4
         L     R6,CVTASVT           POINT TO ASVT
         USING ASVT,R6              ASVT ADDRESSABILITY
         L     R6,ASVTENTY-4(R5)    GET ASCB ADDR FROM ASVT
         USING ASCB,R6              ADDRESSABILITY TO ASCB
         ...
*        (R5 now contains the ASID and R6 points to the ASCB)

The following mapping macros will be needed if symbolic fields names are
used:

         CVT   DSECT=YES            CVT
         IEEBASEA ,                 MASTER SCHEDULER        *
                                       RESIDENT DATA AREA
         IEECHAIN ,                 CSCB
         IHAASVT ,                  ASVT
         IHAASCB ,                  ASCB

These macros are in SYS1.AMODGEN on the MVS distribution library
volumes.  It will be necessary therefore to ensure that SYS1.AMODGEN is
included in the SYSLIB concatenation in the JCL used to assemble the
program.

WHERE TO FIND MORE INFORMATION

Full details of all the control blocks mentioned in this article can be
found in the manuals listed below.

For MVS/SP Version 1 (MVS/370):
OS/VS2 SPL: Debugging Handbook, Vol 2-3, GC28-1048-9.
For MVS/SP Version 2 (MVS/XA):
MVS/XA Debugging Handbook, Vol 2-5, LC28-1165-8.

Roger Bowler (UK)   € Roger Bowler 1988







