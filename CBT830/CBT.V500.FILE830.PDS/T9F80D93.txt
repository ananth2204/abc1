Using CMS Pipelines under MVS


WHAT IS CMS PIPELINES?

CMS Pipelines is an extensive set of subcommands which can
be easily grouped together to perform data manipulations,
accomplish complex tasks, or form applications. REXX and
CMS Pipelines can be used  in  a  complementary fashion to
develop applications which meet user needs.


CMS PIPELINES AND MVS

CMS Pipelines is a product written for the VM/CMS operating
system by John Hartmann of IBM Denmark. CMS Pipelines
also works in part under the MVS operating system. This is a
strictly unsupported operating environment, and the processor
must be licensed for CMS Pipelines even if the environment is
not supported. However, CMS Pipelines has been greeted
enthusiastically by the VM community, with comments such as
"CMS Pipelines is the most significant enhancement to CMS
since REXX." MVS programmers who have been delighted by
REXX will find the pipeline concept an interesting and
powerful companion.


THE PIPELINE CONCEPT

CMS Pipelines implements the pipeline concept, similar to that
popularised by Unix. Programs running in a pipeline operate on
a sequential stream of records. These programs can be
combined, like pearls on a string, to form a pipeline: records
are passed from program to program automatically.


THE PIPE COMMAND

CMS Pipelines runs as an unauthorized command on MVS.
The PIPE command is available:

o      Under TSO (foreground and background)
o      From address LINK in REXX programs
o      As a batch job.

The PIPE command is issued as:

      pipe pipeline-specification

where pipeline-specification is a string listing the programs to
be run. These programs are known as 'stages'. The stages are
separated by the 'stage separator character', which is usually a
solid vertical bar (|). If you are unsure what the solid vertical
bar is on your terminal, it  may help to know that it has the
hexadecimal representation of X'4F'.

A sample pipe command issued from TSO might look like this:

       READY
      pipe literal Hello, MVS-World! | console
       Hello, MVS-World!
       READY

In this example the CMS Pipelines device driver injects a
record containing the phrase 'Hello, MVS-World!' into the
pipeline. The device driver console then receives that record
and displays it on the TSO screen.

In another example, the device driver named 'qsam' is used to
read data from a PDS:

       READY
      alloc fi(pipinput) shr da('ipo1.doclib')
       READY
      pipe qsam pipinput mvsinst | count words | console
       69297
       READY

Here, the pipeline qsam function reads from the DDNAME
PIPINPUT, member MVSINST. Then, all the words are
counted by the count function. Finally, the results are displayed
on the TSO screen by the console function.


CMS PIPELINES AND REXX

Many functions which are missing from or awkward in REXX
are available with CMS Pipelines. For example:

      PIPE stem unsorted. | sort | stem sorted.

This example takes the data in the REXX stemmed array
'unsorted.', sorts the data, and places it into the REXX
stemmed array 'sorted.'.

Below is a slightly more complex use of pipelines and REXX.

/* PIPDEMO REXX                                              */
/* This EXEC reads the MVSCP/IOCP input deck, selects all    */
/* the CNTLUNIT macro statements (even if they are coded     */
/* over multiple lines), and writes them out to another      */
/* PDS member.                                               */
trace off
"alloc fi(pipein) shr da('xlpx.genlib')"
r=rc
"alloc fi(pipeout) old da('yupx.yusvl01.cntl')"
retc=max(r,rc)
if retc>0
  then call err retc, "Error from TSO ALLOCATE commands"
"pipe query|hole"             /* is pipelines installed? */
if rc/=0
  then call err rc, "Sorry, the PIPE command is not available"
"pipe (name PIPDEMO)",
   "qsam pipein mvscp01",     /* read in MVSCP/IOCP deck */
   "|asmcont",                /* join multiline statements */
   "|locate 10.8 /CNTLUNIT/", /* find control unit statements */
   "|asmxpnd",                /* expand joined assembler statements */
   "|qsam pipeout tempasm"    /* write to PDS member TEMPASM */
if rc/=0
  then call err rc, "Erk!  Error from PIPE command"
"free fi(pipein,pipeout)"
exit rc
err: procedure
parse arg retc, msg
parse source . . name .
say name":" msg
exit retc

PIPDEMO EXEC reads the MVSCP/IOCP source deck into the
pipeline. The asmcont stage joins all multiline Assembler
statements - that is, Assembler statements which are marked
with a continuation character in card column 72 and continue
on the next line. The locate stage operates much like the
ISPF/PDF editor FIND command. It finds all strings with
'CNTLUNIT' between columns 10 and 17. Then, the asmxpnd
stage expands all joined Assembler statements (that is,
statements which are continued on the next line if they are
longer than 71 bytes). Finally, the qsam stage writes the data
out to the specified DDNAME and member.

As PIPDEMO EXEC shows, some device drivers can be used
for either reading or writing. If they are the first stage in the
pipeline, they read from the host interface. If they come later in
the pipeline, they write to the host interface. PIPDEMO EXEC
uses qsam to read and write data.


CMS PIPELINES AND DB2

The CMS Pipelines program directory contains instructions for
preparing CMS Pipelines for use with DB2 tables.


WRITING YOUR OWN FILTERS

Although CMS Pipelines comes with a rich supply of routines,
you may find that you wish to code your own pipeline filter
routines. This can be done in Assembler or, much more
commonly, in REXX.

A REXX filter is like a REXX EXEC, but it resides in a PDS
allocated to the DDNAME REXX. An example is shown
below:

      /* PCH REXX */
      parse arg ddin ddout .
      'callpipe *:| append qsam' ddin '| chop 80 | pad 80 | qsam' ddout
      exit rc

This can then be used as follows:

      'PIPE ... | pch sysut1 sysut2 | ...'


HOW TO GET CMS PIPELINES

CMS Pipelines is available to VM customers as a Program
Offering in Europe (5785-RAC), and as a Programming RPQ
in the United States (P81059, 5799-DKF). IBM has announced
that CMS Pipelines will be a supported, integral part of the
VM/ESA Release 1.1 CMS component effective May 1992.


INSTALLATION

The CMS Pipelines Program Offering or PRPQ must be
installed on VM/CMS before it can be moved to the MVS
environment. Instructions for installing CMS Pipelines under
MVS are given in the CMS Pipelines Program Directory.
Basically, the steps involved are:

1      Use a sample EXEC to generate the main pipeline module.

2      Discard the module but keep the object (text) deck
      produced.

3      Transfer the object deck to MVS.

4      Link-edit the object deck into a load library, using the
      sample JCL provided.


RECOMMENDED READING

CMS Pipelines Tutorial, GG66-3158

This is an IBM Washington Systems Center Bulletin. It is  an
excellent introduction to CMS Pipelines, with plenty of
examples and a number of exercises to work through.

CMS Pipelines User's Guide, SL26-0018

This is the CMS Pipelines reference manual, but it also
includes tutorial material and examples.

Plunging  Into  Pipes

Plunging Into Pipes is a paper written by Melinda Varian,
Office of Computing and Information Technology, Princeton
University, 87 Prospect Avenue, Princeton, NJ 08544 USA.
Melinda's paper is another great introduction to CMS
Pipelines, and was inspirational in the writing of this article.

Vince Levey
Systems Programming Consultant
COTEC Computing Services (UK)            c COTEC Computing Services 1992

