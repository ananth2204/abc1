Determining VSAM buffer allocations

Specifying the proper amount of VSAM buffer space has continued to
mystify most applications programmers and a significant number of
systems programmers as well.

Allocating space can be done by three parameters all of which may be
specified in the AMP parameter of the JCL:

*    BUFSP
*    BUFND
*    BUFNI.

Buffer space may be specified during file allocation and will be used if
no other values are specified during execution.  Unless it is specified
during cluster definition, this value will default to enough space for
one index buffer and two data buffers.  This is almost never enough!

The use of BUFND (data buffers) and BUFNI (index buffers) will always be
used to allocate buffers unless they are less than the BUFSP value
specified during file definition.  The primary drawback to using these
two parameters is the inability to account for changes in the file's
index structure should this occur (eg if the index goes to three
levels).  In addition, these values must be correct before the desired
objective can be accomplished.  The following guidelines should be used.


DATA COMPONENT

For direct processing two data buffers should be adequate.  For
sequential processing specify enough buffers to hold approximately two
tracks of data.


INDEX COMPONENT

For direct processing use a value equal to the number of index set
records plus 1, while for sequential processing, use a value of 1.

It is important to note that sequence set records are always brought
into storage one at a time and therefore cannot all be kept in storage.

Specifying BUFSP in the JCL is probably the best overall solution for
the problems most environments will encounter.  VSAM will use this value
even if it means reducing buffers to the minimum (if less than the
minimum is specified an error is generated).  The advantages of this
parameter require less detailed knowledge of the file to maintain good
performance.  Since many COBOL programs open VSAM files using DYNAMIC,
it is not always easy to determine the processing requirements without a
significant amount of research.  The rule of thumb should be:

     BUFSP = (# of Index set records) + 1 * (Index CISIZE) +
             (# of DATA CIs/TRK * (Data CISIZE)

This will allow an adequate number of index buffers for direct
processing and enough data buffers for sequential processing.  VSAM will
be able to adjust the buffer allocation within this specification if the
file is opened for direct or sequential processing.  Note, however, that
once the file is opened, VSAM will not re-adjust buffer usage.


ADDITIONAL HINTS AND WARNINGS

1    Remember SHROPTIONS can impact buffer usage and negate various
changes, even making things worse.  SHROPTIONS(4) causes buffers to be
re-read for each CI.

2    The RECOVERY option generates numerous I/Os due to pre-formatting
of control areas during LOAD operations.  SPEED should always be used.

3    Monitor file statistics and Control Interval/Area splits.  Each CA
split causes new index records to be created and can cause additional
index levels.  This will occur even if there is not a significant number
of new records, since each CA must have an index record.

4    Ensure that your index Control Interval size is large enough to
avoid multiple index levels from being created.

5    Use the IMBED option.  Searching for the data can be a significant
performance cost.  Additonally, if there are enough index buffers and
the sequence sets are imbedded there is no reason to separate data and
index components onto separate volumes.

6    Ensure that free space specifications can be used.  Calculate the
percentages to determine if they will actually hold a record.  In a very
dynamic file, specify more CA free space than CI free space.  For mass
sequential inserts, the free space values are not used.  In other words,
the percentage of free space will be maintained throughout the mass
insert and not used to contain the inserted records.  In this situation,
specify free space during file load and then use ALTER to change the
free space to (0 0), which will enable VSAM to use this area.


Gerhard Adam
Manager, Large Systems
NBD (USA) â‚¬ Gerhard Adam (1987)





































