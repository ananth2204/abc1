The VTOC environment and CVAF

With the introduction of Data Facility/Device Support (DF/DS) and its
successor Data Facility Product (DFP), the ability to process a DASD
VTOC was enhanced by a component known as the Common VTOC Access
Facility (CVAF).  CVAF provided an alternative method to VTOC access
beyond the old data management standards of OBTAIN, SCRATCH, and RENAME.
With CVAF, it became possible to perform VTOC processing that had been
difficult (if not nearly impossible) to accomplish.

The concept of the indexed VTOC was introduced to complement the basic
functionality of CVAF.  New macros were also included with CVAF to allow
for enhanced functions.

THE VTOC

The VTOC on any disk volume consists of 140-byte records known as Data
Set Control Blocks (DSCBs).  There are potentially up to six different
DSCB formats within any one VTOC, although the format 6 DSCB is almost
never used (in fact I have never seen one).  The format 4 DSCB anchors
the VTOC and is pointed to by the UCB for the volume.  It contains
information describing the volume itself, including the volume
characteristics such as the number of cylinders, tracks per cylinder,
and track size.  The VTOC size and the number of DSCBs that can fit onto
one track can also be found in the format 4 DSCB.

Three different DSCBs (formats 1, 2, and 3) are used to describe the
individual datasets on a volume.  The format 1 DSCB contains the dataset
name, the DCB characteristics, the number of extents allocated to the
dataset, information describing up to three dataset extents, as well as
other relevant dataset information.  A format 2 DSCB will exist if the
dataset is index sequential.  It is pointed to by the format 1 DSCB.  A
format 3 DSCB will exist if the dataset has more than three extents.  It
is pointed to by the format 1 DSCB unless the dataset also has a format
2 DSCB, in which case it is pointed to by the format 2 DSCB.  For VSAM
datasets that have more than 16 extents, a format 3 DSCB can also be
pointed to by another format 3 DSCB.

If a volume has a disabled indexed VTOC, the format 5 DSCB chain will
describe the freespace information for the volume.  If the indexed VTOC
is enabled, a single format 5 DSCB exists containing no freespace
information; however, it provides a base to build a format 5 DSCB chain
if the VTOC index should ever become disabled.

A pseudo-DSCB (the format 0 DSCB) exists for each VTOC DSCB that is
currently unused.  It consists of 140 bytes of binary zeros.

Prior to the existence of indexed VTOCs, access to a format 1 DSCB would
proceed as follows.  From the UCBVTOC pointer, access could be gained to
the format 4 DSCB, and once there the remaining DSCBs would be read
sequentially until the desired format 1 DSCB was located.  If the DSCB
you were looking for was located near the end of the VTOC, a long search
would be required.  This long sequential search gave seed to the idea of
the indexed VTOC.

THE INDEXED VTOC

The indexed VTOC is a sequential dataset (dataset name prefixed by
'SYS1.VTOCIX') that acts as an extension to the standard VTOC.  The
indexed VTOC dataset is composed of four types of 2048-byte VTOC Index
Records (VIRs).  Access to the indexed VTOC is gained through the VTOC
Initialisation Block (VIB), which contains a pointer to the indexed
VTOC.  Besides pointing to the format 4 DSCB, the UCB also contains a
pointer to the VIB (UCB offset X'2C').

Briefly, the four types of VTOC index record and their functions are:

1    The VTOC Index Map (VIXM): this record is used to describe which
VIRs are currently in use.  It also contains VTOC Recording Facility
(VRF) data that can be used to reconstruct portions of the indexed VTOC
if processing is interrupted during a VTOC update.

2    The VTOC Pack Space Map (VPSM): this record is used as a bit map to
indicate which tracks and cylinders are currently allocated.  It takes
the place of the format 5 DSCB chain.

3    The VTOC Map of DSCBs (VMDS): this record is used to indicate which
VTOC DSCBs are in use.

4    The VTOC Index Entry Record (VIER): these records are used to
provide access to format 1 and format 4 DSCBs.

The first three VTOC index records are commonly referred to as the map
records as they provide 'in use' information.  Typically, there is only
one of each of these records within an indexed VTOC, although very large
volumes such as double or triple capacity 3380s would have multiple VPSM
records and volumes with a very large VTOC could have multiple VMDS
records.

Generally, there is more than one VIER contained in an indexed VTOC and
quite often multiple levels of VIERs exist.  High-level VIERs point to
lower-level VIERs in a tree-like manner until a second-level VIER points
to a first-level VIER.  For example, third-level VIERs point
horizontally to other third-level VIERs and vertically to second level
VIERs - second-level VIERs point horizontally to other second-level
VIERs and vertically to first-level VIERs.  This does not imply that
there must be higher-level VIERs, only that there may be if VIER splits
have necessitated their introduction.  First-level VIERs consist of
ascending alphabetically sorted index entries that contain pointers to
the DSCBs for the dataset they represent.

The multi-level VIER structure with sorted first-level index entries
permits an almost binary search to locate a format 1 DSCB.  This can be
much more efficient than the sequential search required when using an
unindexed VTOC.  Although it is not necessary for an indexed VTOC to be
enabled for CVAF to be used, if it is active it is easy to see how the
information contained in the VIRs can be used by CVAF to provide
enhanced functions.

THE CVAF MACROS

Several CVAF macros exist to provide access and update capabilities to
the various components of the VTOC and indexed VTOC.  It is through the
following macros that the enhanced capabilities of VTOC processing are
realised:

*    CVAFDIR - this macro can be used with either an indexed VTOC or an
unindexed VTOC to read or write DSCBs, and with an indexed VTOC to read
or write VIRs.  DSCB access can be by dataset name or DSCB address
(either CCHHR or TTR).  VIR access is by the RBA of the record desired.

*    CVAFDSM - this macro can be used with an indexed VTOC to read VTOC
index map records (VIXM, VPSM, and VMDS).  It is also used to add or
delete index entries from the first-level VIERs.  Any requested updates
to records accessed by this macro can only take effect when the VIR is
rewritten to the indexed VTOC via CVAFDIR.

*    CVAFFILT - this macro can be used with an indexed VTOC or an
unindexed VTOC to read all DSCBs (format 1, 2, and 3) for one or more
fully qualified dataset names or a single set of partially qualified
dataset names.

*    CVAFSEQ - this macro can be used to read, in alphabetical order,
the format 1 DSCBs from an indexed VTOC or the dataset names from the
VTOC index entries.  It can also be used with an indexed VTOC or an
unindexed VTOC to read format 1 DSCBs in physical sequential order.

*    CVAFTST - this macro is used to determine whether a system is
eligible to use an indexed VTOC and whether the volume specified by a
UCB has an active indexed VTOC or not.

*    CVAFVOL - this macro is used to build the VIB for the volume
specified by the UCB.

For details on these macros and their parameters see the manuals System
Data Administration and CVAF Diagnosis Reference.

Except for the CVAFTST macro, which you never have to be authorised to
use, and the CVAFVOL macro, which you always have to be authorised to
use, the CVAF macros can be used in either an authorised or an
unauthorised environment.  When authorised, the VTOC can be accessed
directly without first being allocated or opened.  When unauthorised,
the VTOC must be allocated and opened before it can be accessed.  When
CVAFDIR is used to write a DSCB or VIR, it must be done in an authorised
environment.

HOW CVAF MAY BE USED

After reviewing this information it can be seen that one enhancement to
VTOC processing introduced by CVAF is the ability to update VTOC data.
Consider the following scenario.

Uncatalogued, outdated copies of ISPF datasets (panel, message, CLIST,
or skeleton) exist with identical dataset names as the current
catalogued production copies.  You would like to clean up these outdated
datasets, but because the current user log-on procedure contains
allocations to the production versions of these identically-named
datasets and users are logged on continuously, when you try to delete
the old datasets a 'DATASET IN USE' condition occurs (MVS enqueues on
the dataset name independent of the VOLSER).  Undaunted, you obtain a
dump of the VTOC and find the CCHHR of the DSCBs for the corresponding
old datasets.  You disable the indexed VTOC (if it is enabled), ZAP the
format 1 DSCBs with unique dataset names, delete these newly-named
datasets, and enable the indexed VTOC (if it has been disabled).

The above scenario poses a practical situation in which CVAF might be
used to simplify the solution.  In next month's issue an example of a
program will be published which uses CVAF macros to update a VTOC DSCB
and its corresponding indexed VTOC.  In this example, the dataset name
contained in a format 1 DSCB is changed using information provided via a
TSO command processor interface.  The VOLSER of the volume on which the
change is to take place is entered as well as the existing and new
dataset names.  Once the environment has been established the user is
prompted to confirm the update and the DSCB is altered if confirmed.  If
the source dataset is catalogued on the entered volume or if a dataset
with the new dataset name already exists on the volume, the update
fails.

Using CVAF has simplified this renaming operation and requires far less
technical expertise.  The only information required is the VOLSER, the
existing dataset name, and the new dataset name.  No SUPERZAP dumping,
calculation of ZAP offsets, or indexed VTOC manipulation is required.

As mentioned above, we shall be continuing this article next month when
we shall be looking in detail at a practical implementation of many of
the facilities described.

     € Xephon 1989


