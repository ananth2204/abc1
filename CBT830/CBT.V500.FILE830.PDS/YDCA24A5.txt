A simple MCS console

PROGRAM SOURCE CODE

* * * * * * * * *      C  O  N  S  O  L  E            * * * * * * * * *
* TSO COMMAND : E U L E R  ( $ )                                      *
* PURPOSE :                                                           *
*    FOR TSO OPER PRIVILEGE USERS, SIMULATE AN OS 3270-X CONSOLE      *
*              ANY COMMANDS ARE ISSUED VIA SVC34.                     *
*    THIS CODE IS BASED ON THE CONSOLE COMMAND FROM THE SHARE DCMS    *
*    SYSTEM.                                                          *
*   COMPATIBILITY : MVS/SP 2 , MVS/SP 3 AND MVS/SP 4                  *
*   TO INVOKE : COMMAND $ UNDER TSO                                   *
*   EXIT FROM CONSOLE IS VIA PFK-3 OR PFK-12.                         *
***********************************************************************
EULER    START 0
         USING EULER,R11,R12
         CNOP  0,8
         STM   R14,R12,12(R13)         SAVE REGISTERS.
         B     16(,R15)                BRANCH
         DC    CL8'EULER  '
         LR    R11,R15                 SET BASE REGISTER.
         CNOP  0,4
         BAL   1,*+8                   BRANCH AROUND SP+LV
         DC    AL1(1)                  SUBPOOL VALUE
         DC    AL3(WRKL)               LENGTH
         L     0,0(0,1)                LOAD SP AND LV
         SVC   10                      ISSUE GETMAIN SVC
         LR    R15,R13                 PREVIOUS SAVE AREA.
         LR    R13,R1                  CURRENT SAVE AREA.
         XC    0(18*4,R13),0(R13)      CLEAR SAVE AREA.
         ST    R13,8(R15)              LINK SAVE AREAS.
         ST    R15,4(R13)
         LM    R14,R1,12(R15)          RESTORE ENTRY REGISTERS.
         LA    R12,2048(0,R11)
         LA    R12,2048(0,R12)
         LA    R10,2048(,R13)          SET WORK AREAS ADDRESSABILITY.
         LA    R10,2048(,R10)
         USING WRKDSECT,R13,R10
*   DETERMINE ENVIRONMENT.
        GTSIZE ,                   GET ORIGINAL SCREEN SIZE.
         LTR   R0,R0               IS IT A SCREEN?
         BZ    NOTSCR              IF ZERO, NOT A SCREEN.
         CH    R0,=H'24'           STANDARD NUMBER OF LINES?
         BL    NOTSTD              BRANCH IF LESS.
         BE    TSTLNL              BRANCH IF YES.
         CH    R1,=H'80'           STANDARD LINE LENGTH?
         BL    NOTSTD              BRANCH IF LESS.
SETSSZ   ST    R0,SZSCRN           SAVE SCREEN SIZE.
         ST    R1,SZLINE           SAVE LINE SIZE.
         OI    SWITCH,SCRST        INDICATE SCREEN SIZE TO BE SET.
         B     SYSINIT
TSTLNL   CH    R1,=H'80'           STANDARD LINE LENGTH?
         BL    NOTSTD              BRANCH IF LESS.
         BH    SETSSZ              BRANCH IF MORE.
*   INITIALIZE WORK AREAS.
SYSINIT  L     R1,=A(DCMREND-DCMTSRT)
         ST    R1,RDCML
         LA    R1,7(R1)
         SRL   R1,3
         SLL   R1,3
         ST    R1,RDCMLG
      GETMAIN R,LV=(1),SP=1
         ST    R1,LOCRDCM
         XC    LOCTDCM,LOCTDCM
         XC    LOCBUF,LOCBUF
         MVC   UNITMSG(UNITLEN),UNITMSGP
         MVC   CMND(L'CMNDP),CMNDP
         MVC   CMNDBUF(L'CMNDBUF),LOTSBLNK
         MVC   PFREPLY(L'PFREPLY),LOTSBLNK
         MVC   SELSCRN(FULLSCRL),FULLSCRP
         MVC   SELT1A(SELT1L),SELT1
         MVC   SELT1B(SELT1L),SELT1
         MVC   SELT2A(SELT2L),SELT2
         MVC   SELT2B(SELT2L),SELT2
         MVC   SELSP(SELSPL),SELSPP
         L     R1,=A(FAKEWARN)
         MVC   INFLINE(FAKEWRNL),0(R1)
         MVC   INFLINE+FAKEWRNR(9),FKACT+1
         MVC   SETICT(SETICL),SETIC
         MVC   FULLSCRN(FULLSCRL),FULLSCRP
         LA    R2,SCREEN
         LA    R3,SCREENL
         LA    R4,*
         SR    R5,R5
         MVCL  R2,R4
         MVC   WSPT(WSPL),WSP
         MVC   MSGLINE(L'MSGLINE),LOTSBLNK
         MVC   WSFT(WSFL),WSF
         L     R1,=A(FKWARN)
         MVC   INFOLINE(FKWRNL),0(R1)
         MVC   INFOLINE+FKWRNR(10),FKACT
         MVC   SETCOT(SETCOL),SETCO
*   INITIALIZATE SYSTEM IDENTIFICATION  (FROM SMF)
         L     R2,CVTPTR           POINT TO CVT.
         USING CVT,R2
         L     R3,CVTSMCA          GET SMF CONTROL AREA ADDRESS.
         USING SMCABASE,R3
LSYSID   EQU   L'SMCASID           SYSTEM ID LENGTH.
         MVC   INFLINE+FAKEWRNL-L'LSF-LSYSID-1(LSYSID),SMCASID
         MVC   INFOLINE+FKWRNL-L'LSF-LSYSID-1(LSYSID),SMCASID
         DROP  R2,R3
*   INITIALIZATE SCREEN SIZE
        STFSMODE ON,INITIAL=YES    TURN ON VTAM FULL SCREEN MODE.
         TM    SWITCH,SCRST        SCREEN SIZE TO BE SET?
         BZ    NOSCRS              BRANCH IF NOT.
        STSIZE SIZE=80,LINE=24     SET STANDARD SCREEN SIZE.
         OI    SWITCH,SCRRS        INDICATE SCREEN SIZE TO BE RESET.
*   INITIALIZATE CROSS MEMORY SERVICE WITH CONSOLE A/S
NOSCRS  MODESET KEY=ZERO,MODE=SUP
         L     R1,CVTPTR                 CVT POINTER.
         L     R1,CVTCUCB-CVT(R1)        UCM BASE POINTER.
         USING UCM,R1
         XC    CONASID,CONASID
         MVC   CONASID+2(2),UCMCTID      GET COMMTASK ASID.
         DROP  R1
        ESAR   R5                        GET SECONDARY ASID.
         ST    R5,SASID                  KEEP IT.
         MVC   AXPL(4),=XL4'00010000'
        AXRES  AXLIST=AXPL               RESERVE AX.
         L     R5,CONASID                GET COMMTASK ASID.
        AXEXT  ASID=(5)                  EXTRACT AX OF CONSOLE IN R0.
        AXSET  AX=(0)                  SET AX TO ALLOW CONSOLE AS 2ND.
        MODESET KEY=NZERO,MODE=PROB
*   DISPLAY USEFUL CONSOLE INFORMATION.
RESTART  MVC   SELCUU,SELCUUP
         MVC   SELWHAT,SELWHATP
RESET    ICM   R1,B'1111',LOCTDCM      TDCM AREA TO FREED
         BZ    NOFREET                 BRANCH IF NOT.
         L     R14,TDCMLG              LENGTH OF AREA.
        FREEMAIN R,A=(1),LV=(R14),SP=1
         XC    LOCTDCM,LOCTDCM         TDCM AREA TO BE FREED?
NOFREET  ICM   R1,B'1111',LOCBUF       TDCM BUFFER AREA TO BE FREED?
         BZ    NOFREEB                 BRANCH IF NOT.
         L     R14,LOCBUFL             LENGTH OF AREA.
        FREEMAIN R,A=(1),LV=(R14),SP=1
         XC    LOCBUF,LOCBUF           NULLIFY.
NOFREEB  LA    R2,SELDT
         LR    R6,R2
         LA    R3,SELDTN
         LR    R7,R3
         MVC   0(SELDTL,R2),SELDTP
         LA    R2,SELDTL(,R2)
         BCT   R3,*-10
*   DETERMINATE THE CONSOLE ROUNDS AND THEIR CHARACTERISTICS
         L     R1,CVTPTR               BEGINNING...
         L     R1,CVTCUCB-CVT(R1)  ..R3 -> TO THE FIRST UCME,
         USING UCM,R1                R4 CONTAINS UCME LENGTH,
         LM    R3,R5,UCMVEA          R5 -> TO THE LAST UCME.
         DROP  R1
         USING UCMLIST,R3
NEXTUCM  TM    UCMATR,UCMUF        IS THIS CONSOLE ACTIVE?
         BZ    TESTUCM             NO... UNUSABLE.
         TM    UCMDISP1,UCMDISPC+UCMDISPE    GRAPHICS AND FULL I/O?
         BNO   TESTUCM             NO... UNACCEPTABLE.
         ICM   R1,B'1111',UCMXB    IS IT GRAPHICS?
         BZ    TESTUCM             NO... USELESS.
         L     R1,UCMUCB           GET THE UCB ADDRESS.
         USING UCBDSECT,R1
         MVC   6(L'UCBNAME,R6),UCBNAME
         DROP  R1
         SR    R15,R15             GET THE CONSOLE ID.
         IC    R15,UCMID
         CVD   R15,CVTA
         UNPK  12(2,R6),CVTA+6(2)
         OI    13(R6),C'0'
         LA    R15,16(R6)          GET AUTHORITY.
         TM    UCMAUTHA,UCMAUTH1
         BZ    TAIO
         MVC   0(4,R15),=CL4'SYS.'
         LA    R15,3(R15)
TAIO     TM    UCMAUTHA,UCMAUTH2
         BZ    TACONS
         CLI   0(R15),C' '
         BE    TAIOA
         MVC   0(5,R15),=CL5', IO.'
         LA    R15,4(R15)
         B     TACONS
TAIOA    MVC   0(3,R15),=CL3'IO.'
         LA    R15,2(R15)
TACONS   TM    UCMAUTHA,UCMAUTH3
         BZ    TAINFO
         CLI   0(R15),C' '
         BE    TACONSA
         MVC   0(7,R15),=CL7', CONS.'
         B     TAINFO
TACONSA  MVC   0(5,R15),=CL5'CONS.'
TAINFO   CLI   16(R6),C' '
         BNE   *+L'*+6
         MVC   16(5,R6),=CL5'INFO.'
         TM    UCMDISP1,UCMDISPA   MASTER CONSOLE?
         BZ    NOTMS               NO.
         MVC   34(2,R6),=CL2'MS'
         MVC   SELCUU(L'UCBNAME),6(R6)
NOTMS    LA    R6,SELDTL(R6)
         BCT   R7,TESTUCM
         B     GO
         DROP  R3
TESTUCM  BXLE  R3,R4,NEXTUCM       GET THE NEXT ENTRY.
         CLI   SELDT+6,C' '        ANYTHING RETAINED?
         BNE   GO                  YES.
         MVC   SCREEN(ERMSGL),ERMSG NO ACCEPTABLE CONSOLES ACTIVE.
         LA    R1,FULLSCRN
         LA    R0,FULLSCRL+ERMSGL
         MVC   RPLYNO(L'RPLYNO),LOTSBLNK
         OI    SWITCH,QUIT
         BAL   R9,STERM            SEND THE SCREEN.
         B     ENDIT               END.
GO       LA    R1,SELSCRN
         LA    R0,SELSCRNL
         NI    SWITCH,255-ADSDV
         BAL   R9,STERM
         OC    REPLY,LOTSBLNK      CONVERT TO UPPER CASE.
         LA    R1,L'REPLY-1
         LA    R15,REPLY
SCANREP  CLI   0(R15),C' '         NULL INPUT?
         BNE   GETCUU              NO.
         LA    R15,1(R15)
         BCT   R1,SCANREP
         CLC   SELCUU,SELCUUP
         BNE   GETMS
         MVC   PFREPLY(L'PFREPLY),LOTSBLNK
         MVC   SELCUU,SELCUUP
         MVC   SELWHAT,=CL10'? MISSING.'
         B     GO
*   SETUP TO COPY PAGEABLE DCM TO OUR ADDRESS SPACE.
GETCUU   MVC   SELCUU(L'SELCUU),0(R15)
GETMS    MVC   PFREPLY(L'PFREPLY),LOTSBLNK
         L     R1,CVTPTR             BEGINNING...
         L     R1,CVTCUCB-CVT(R1)  ..R3 -> TO THE FIRST UCME,
         USING UCM,R1                R4 CONTAINS UCME LENGTH,
         LM    R3,R5,UCMVEA          R5 -> TO THE LAST UCME.
         DROP  R1
         USING UCMLIST,R3
DIDL     L     R1,UCMUCB                    SEARCH FOR SOMETHING USEFUL
         USING UCBDSECT,R1
         CLC   SELCUU(L'UCBNAME),UCBNAME     IS CONSOLE THIS ONE?
         BNE   DIDT                          BRANCH IF NOT.
         MVC   UNITXXX(L'UCBNAME),UCBNAME    DEBUGGING ...
         DROP  R1
         TM    UCMATR,UCMUF                  IS IT ACTIVE?
         BZ    DIDT                          NO... UNUSABLE.
         ICM   R6,B'1111',UCMXB              IS IT GRAPHICS?
         BZ    DIDT                          NO... USELESS.
         STM   R3,R5,MOVEBSAV                SAVE SCAN REGISTERS.
        MODESET KEY=ZERO,MODE=SUP
         L     R7,CONASID                    GET COMMTASK ASID.
        SSAR   R7                            SET CONSOLE AS SECONDARY.
         L     R7,LOCRDCM                    THE 'TO' ADDRESS.
         L     R3,RDCML                      LENGTH OF THE 'TO'.
         XR    R15,R15                       ZERO R15 FOR 'FROM' KEY.
MOVERD  MVCP   0(R3,R7),0(R6),R15  MOVE IT.
         BZ    MOVEDRD
         AL    R6,=F'256'             BUMP 'FROM' ADDRESS BY 256.
         AL    R7,=F'256'             BUMP 'TO' ADDRESS BY 256.
         SL    R3,=F'256'             DECREMENT LENGTH OF MOVE LEFT.
         B     MOVERD                 GO BACK AGAIN.
MOVEDRD  L     R5,SASID               RESTORE PREVIOUS SECONDARY.
        SSAR   R5                     SHOULD BE AS PRIMARY.
        MODESET KEY=NZERO,MODE=PROB
         L     R9,LOCRDCM             ADDRESS OF COPY OF DCM.
         USING DCMTSRT,R9
         ICM   R6,B'1111',DCMADTRN    FIND THE PAGEABLE DCM (TDCM).
         BZ    DIDTRR                 DOES IT EXIST? NO...
         LH    R1,DCMLEN              LENGTH OF PAGEABLE DCM.
         ST    R1,TDCML
         LA    R1,7(R1)               ROUND UP TO 8 BYTE BOUNDARY.
         SRL   R1,3
         SLL   R1,3
         ST    R1,TDCMLG
GETTDCM  L     R3,MOVEBSAV            RESTORE UCM POINTER.
         MVC   XUCMID,UCMID           SAVE THIS CONSOLE ID.
         DROP  R3
         L     R1,TDCMLG              LENGTH OF PAGEABLE DCM.
        GETMAIN R,LV=(1),SP=1
         ST    R1,LOCTDCM             STORE AREA ADDRESS.
        MODESET KEY=ZERO,MODE=SUP
         L     R7,CONASID             GET COMMTASK ASID.
        SSAR   R7                     SET CONSOLE AS SECONDARY.
         L     R7,LOCTDCM             THE 'TO' ADDRESS.
         L     R3,TDCML               LENGTH OF THE 'TO'.
         XR    R15,R15                ZERO R15 FOR 'FROM' KEY.
MOVETD  MVCP   0(R3,R7),0(R6),R15     MOVE IT.
         BZ    MOVEDTD
         AL    R6,=F'256'             BUMP 'FROM' ADDRESS BY 256.
         AL    R7,=F'256'             BUMP 'TO' ADDRESS BY 256.
         SL    R3,=F'256'             DECREMENT LENGTH OF MOVE LEFT.
         B     MOVETD                 GO BACK AGAIN.
MOVEDTD  L     R5,SASID               RESTORE PREVIOUS SECONDARY.
        SSAR   R5                     SHOULD BE AS PRIMARY.
        MODESET KEY=NZERO,MODE=PROB
         L     R6,LOCTDCM             ADDRESS OF COPY OF TDCM.
         USING DCMSTRT,R6
NOTTDCM  CLI   DCMIONDX,X'10'         IS IT A 3277?
         BE    GETBUF                 YES.
DIDTRR   LM    R3,R5,MOVEBSAV         RESTORE SCAN REGISTERS.
DIDT     BXLE  R3,R4,DIDL             GET THE NEXT ENTRY.
         MVC   SELWHAT,=CL10'? INVALID.'
         B     RESET
GETBUF   L     R1,DCMLSCRN            POINT TO LAST BUFFER LINE.
         AH    R1,DCMCORLN            LENGTH OF DCM LINE IN CORE.
         L     R0,DCMASCRN            POINT TO FIRST INPUT LINE.
         SR    R1,R0                  COMPUTE AND
         ST    R1,BUFLGTH             STORE BUFFER LENGTH.
         LA    R1,7(R1)               ROUND UP TO 8-BYTE BOUNDARY.
         SRL   R1,3
         SLL   R1,3
         ST    R1,LOCBUFL             STORE LENGTH FOR FREE.
        GETMAIN R,LV=(1),SP=1
         ST    R1,LOCBUF              STORE BUFFER AREA ADDRESS.
*     A CONSOLE HAS BEEN FOUND COPY THE SCREEN AND DISPLAY IT
GETCOMTK MODESET KEY=ZERO,MODE=SUP
         L     R4,CONASID             GET COMMTASK ASID.
        SSAR   R4                     SET CONSOLE AS SECONDARY.
         L     R2,BUFLGTH             LENGTH OF STUFF TO MOVE.
         L     R7,DCMASCRN            POINT TO THE FIRST INPUT LINE.
         CLI   DCMIONDX,X'10'         IS IT A 3277?
         BNE   *+L'*+4                BRANCH IF NOT.
         SL    R7,=F'6'               ADJUST OFFSET.
         L     R8,LOCBUF              BUFFER ADDRESS.
         SR    R15,R15                'FROM' KEY.
MOVEBUF MVCP   0(R2,R8),0(R7),R15     MOVE IT.
         BZ    ENDMOVE
         AL    R7,=F'256'             BUMP 'FROM' ADDRESS.
         AL    R8,=F'256'             BUMP 'TO' ADDRESS.
         SL    R2,=F'256'             DECREMENT THE LENGTH FIELD.
         B     MOVEBUF                GO BACK AND GET MORE.
ENDMOVE  L     R4,SASID               RESTORE PREVIOUS SECONDARY.
        SSAR   R4                     SHOULD BE AS PRIMARY.
        MODESET KEY=NZERO,MODE=PROB
         L     R5,LOCBUF              GET BUFFER ADDRESS.
NOTTBUF  LH    R4,DCMCORLN            COMPUTE NO. OF LINES IN
         SR    R2,R2                  CONSOLE BUFFER.
         L     R3,BUFLGTH
         DR    R2,R4
         LA    R0,L'SCREEN-L'TABSET   DETERMINE MOVE LENGTH.
         CLR   R4,R0
         BNH   *+L'*+2
         LR    R4,R0
         BCTR  R4,0
NEXTPAGE NI    SWITCH,255-NXTPG
         LA    R8,SCREEN
         LA    R9,SCREENL
         LA    R14,*
         SR    R15,R15
         ICM   R15,B'1000',LOTSBLNK   SET UP A BLANK.
         MVCL  R8,R14                 PAD WITH SPACES.
         LA    R0,NDL                 COMPLETE SCREEN INITIALIZATION.
         L     R1,=A(TABSET)
         LA    R2,SCREEN
INITTB   MVC   0(L'TABSET,R2),0(R1)
         LA    R1,L'TABSET(R1)
         LA    R2,L'SCREEN(R2)
         BCT   R0,INITTB
         LA    R0,NDL                    SCREEN LINES NUMBER.
         LA    R2,SCREEN                 SCREEN BUFFER.
         CLI   DCMIONDX,X'10'            IS IT A 3277?
         BE    T3277                     BRANCH IF YES.
         MVC   SCREEN(WCOMSGL),WCOMSG    CANNOT OCCURS.
         LA    R1,FULLSCRN
         LA    R0,FULLSCRL+WCOMSGL
         MVC   RPLYNO(L'RPLYNO),LOTSBLNK
         OI    SWITCH,QUIT
         BAL   R9,STERM                  SEND THE SCREEN.
         B     ENDIT                     END.
T3277    BAL   R9,*+L'*+6
         MVC   L'TABSET(*-*,R2),5(R5)
         EX    R4,0(R9)                  MOVE A LINE.
         CLC   3(L'SFINT,R5),SFINT
         BNE   INCRSB
         MVC   4(1,R2),SFINT+1           ADJUST ATTRIBUTE BYTE.
         B     INCRSB
INCRSB   CLC   L'TABSET(L'SCREEN-L'TABSET,R2),LOTSBLNK
         BE    NOMORE              NOTHING MOVED, STOP HERE.
         LA    R2,L'SCREEN(R2)     BUMP SCREEN BUFFER POINTER.
         AH    R5,DCMCORLN         BUMP BUFFER POINTER.
         BCT   R3,TESTSB           LOOP TILL BUFFER FILLED OUT.
         B     NOMORE
TESTSB   BCT   R0,6(R9)            LOOP TILL SCREEN BUFFER FILLED IN.
         STM   R3,R5,MOVEBSAV      SAVE BUFFER POINTERS.
         LA    R2,SELDT            LOOK IF REALLY ANYTHING MORE.
         EX    R4,0(R9)
         EX    R4,CTRLSB
         BE    NOMORE
         OI    SWITCH,NXTPG        MORE DATA TO BE DISPLAYED.
         MVC   NXTPGI,NXPAGE
         B     SENDPG
CTRLSB   CLC   L'TABSET(*-*,R2),LOTSBLNK
NOMORE   MVC   NXTPGI,NOPAGE
SENDPG   MVC   MSGLINE(UNITLEN),UNITMSG MOVE IN TITLES.
         LA    R1,FULLSCRN
         LA    R0,SCRLEN
         OI    SWITCH,ADSDV
         BAL   R9,STERM            DO IT JACK.
         MVC   SVCRCM,LOTSBLNK
         MVC   NOTR15,LOTSBLNK
         MVC   RPLYNO(L'RPLYNO),LOTSBLNK
         OC    REPLY,LOTSBLNK      CONVERT TO UPPER CASE.
         LA    R1,L'REPLY-1
         LA    R15,REPLY
SCANIN   CLI   0(R15),C' '         NULL INPUT?
         BNE   GETIN               NO.
MOVEIN   MVC   CMNDBUF(*-*),0(R15)
GETIN    MVC   CMNDBUF,LOTSBLNK
         NI    SWITCH,255-NXTPG
         BCTR  R1,0
         EX    R1,MOVEIN
         MVC   REPLY,LOTSBLNK
         CLC   CMNDBUF(9),=C'K M,UEXIT'  IS IT  A CONTROL COMMAND
         BE    DOIT         FOR EXIT (IEAVMXIT) ?  YES, EXECUTE .
         CLI   CMNDBUF,C'K'        IS IT A CONTROL COMMAND?
         BE    NODOIT              YES, REJECT IT.
         CLI   CMNDBUF,C' '        IS IT A INVALID COMMAND?
         BE    NODOIT              YES REJECT
*    MOVE THE COMMAND INTO BUFFERS CONSOLE.
DOIT    MODESET KEY=ZERO,MODE=SUP
         XR    R0,R0
         IC    R0,XUCMID           OUR MAN IN THE COMM TASK.
         SR    R15,R15
        MGCR   CMND                FIRE HIM THRU.
         LR    R2,R15              SAVE RETURN CODE.
        MODESET KEY=NZERO,MODE=PROB
         B     PRCDNM
NODOIT   XR    R2,R2
         MVC   SVCRCM(L'SVCRCM+L'NOTR15),=CL17' COMMAND REJECTED'
PRCDNM   LTR   R15,R2
         BZ    GETCOMTK                 TEST  ???
SDERR    MVC   SVCRCM(L'SVCRCM),=CL9'CMD RC = '
TRDBG    BAL   R9,CONVERT          DO IT.
         MVC   NOTR15,CVTA         MOVE IN RC.
         MVC   SVCRCM(L'SVCRCM+L'NOTR15),=CL17' COMMAND ACCEPTED'
         MVC   MSGLINE(UNITLEN),UNITMSG MOVE IN ERROR LINE.
         LA    R1,FULLSCRN
         LA    R0,SCRLEN
         MVC   RPLYNO(L'RPLYNO),LOTSBLNK
         NI    SWITCH,255-ADSDV
         BAL   R9,STERM
         MVC   REPLY,LOTSBLNK
         MVC   SVCRCM,LOTSBLNK
         MVC   NOTR15,LOTSBLNK
         B     GETCOMTK
         DROP  R6
*   TERMINATE PROCESSING.
ENDIT    LR    R2,R15
NOSNCL   ICM   R1,B'1111',LOCRDCM        DCM AREA TO BE FREED?
         BZ    NOARR                     BRANCH IF NOT.
         L     R14,RDCMLG                LENGTH OF AREA.
        FREEMAIN R,A=(1),LV=(R14),SP=1
         XC    LOCRDCM,LOCRDCM           NULLIFY.
NOARR    ICM   R1,B'1111',LOCTDCM        TDCM AREA TO BE FREED?
         BZ    NOART                     BRANCH IF NOT.
         L     R14,TDCMLG                LENGTH OF AREA.
        FREEMAIN R,A=(1),LV=(R14),SP=1
         XC    LOCTDCM,LOCTDCM           NULLIFY.
NOART    ICM   R1,B'1111',LOCBUF         TDCM BUFFER AREA TO BE FREED?
         BZ    NOORE                     BRANCH IF NOT.
         L     R14,LOCBUFL               LENGTH OF AREA.
        FREEMAIN R,A=(1),LV=(R14),SP=1
         XC    LOCBUF,LOCBUF          NULLIFY.
*   RELEASE CROSS MEMORY SERVICE WITH CONSOLE A/S.
NOORE   MODESET KEY=ZERO,MODE=SUP
        AXFRE  AXLIST=AXPL            FREE AX.
        MODESET KEY=NZERO,MODE=PROB
         MVC   FULLSCRN(CLEARL),CLEAR   SET CLEAR SEQUENCE.
         TM    SWITCH,SCRRS             WAS SCREEN SIZE CHANGED?
         BZ    ENDCL                    BRANCH IF NOT.
        STSIZE SIZELOC=SZLINE,LINELOC=SZSCRN RESTORE ORIGINAL SIZE.
         MVC   FULLSCRN+0(2),=XL2'277E'
ENDCL    LA    R1,FULLSCRN
         LA    R0,CLEARL
         ICM   R1,B'1000',TPUTFLG  INDICATE FULL SCREEN.
        TPUT   (1),(0),R
        STFSMODE OFF               TURN OFF FULL SCREEN MODE.
         LR    R15,R2
         CH    R15,=H'16'          IS RETURN CODE HIGHER THAN 16?
         BNH   EXIT                NO, LET STAY R15.
RETURN   SR    R15,R15             ZERO OUT REGISTER 15.
EXIT     LR    R1,R13         MAIN STORAGE AREA TO BE RELEASED.
         L     R13,4(R13)     PREVIOUS SAVE AREA.
         ST    R15,16(R13)    SET RETURN CODE.
         CNOP  0,4
         B     *+8                               BRANCH AROUND LENGTH
         DC    AL1(1)                            SUBPOOL VALUE
         DC    AL3(WRKL)                         LENGTH
         L     0,*-4                             LOAD SP AND LV
         LA    R1,0(0,1)                         LOAD AREA ADDRESS
         SVC   10                                ISSUE FREEMAIN SVC
         LM    R14,R12,12(R13) RESTORE REGISTERS.
         MVI   12(R13),X'FF'   SET RETURN INDICATOR.
         BR    R14 RETURN TO TSO
*   LOCAL SUBROUTINE TO CONVERT R15 TO PRINTABLE HEX (EBCDIC).
CONVERT  ST    R15,CVTB
         UNPK  CVTA(9),CVTB(5)
         NC    CVTA(8),HEXMASK
         TR    CVTA(8),HEXTAB
         BR    R9
*   LOCAL SUBROUTINE TO WRITE SCREEN AND TO GET REPLY VIA TGET
STERM    TM    SWITCH,SCRST+SCRRS  FIRST TPUT DONE?
         BNO   SNDWR               BRANCH IF YES.
         ST    R1,ASCRN
         MVC   0(2,R1),=XL2'27F5'
SNDWR    ICM   R1,B'1000',TPUTFLG  INDICATE FULL SCREEN.
        TPUT   (1),(0),R
         TM    SWITCH,SCRST+SCRRS  FIRST TPUT DONE?
         BNO   SNDGT               BRANCH IF YES.
         L     R1,ASCRN
         MVC   0(2,R1),=XL2'27F1'
         NI    SWITCH,255-SCRST    SET FIRST TPUT DONE.
SNDGT   TGET   PFREPLY,L'PFREPLY-1,ASIS
         TM    SWITCH,QUIT         TERMINATING PROCESS?
         BOR   R9                  YES.
         CH    R15,=H'20'          TERMINAL DISCONNECTED?
         BE    ENDIT
         CH    R15,=H'8'           ATTENTION?
         BE    RESTART             YES,... START OVER.
         CH    R15,=H'12'          IS INPUT LONGER THAN BUFFER?
         BNE   SKIPCLRQ            NO.
        TCLEARQ INPUT              FLUSH THE TRASH.
SKIPCLRQ CLI   PFREPLY,X'F2'       PF 2 ENTERED?
         BE    RESTART             YES,... START OVER.
         CLI   PFREPLY,X'C2'       PF 14 ENTERED (ALT. PF 2)?
         BE    RESTART             YES,... START OVER.
         CLI   PFREPLY,X'F3'       PF 3 ENTERED?
         BE    ENDIT               YES,... SPLIT.
         CLI   PFREPLY,X'7C'       PF 12 ENTERED?
         BE    ENDIT               YES,... SPLIT.
         BR    R9
NOTSCR  TPUT   MSGER2,L'MSGER1
         B     RETURN
MSGER1  DC    C'CONSOLE RUN ONLY ON A SCREEN TERMINAL.'
NOTSTD  TPUT   MSGER2,L'MSGER2
         B     RETURN
MSGER2  DC    C'CONSOLE WANT TO BE SCREEN SIZED 24 * 80.'
         B     RETURN
*   MESSAGES.                                                    *
UNITMSGP DC  XL3'115A50',XL2'1D60',CL27'MVS/ESA SP4 *EULER* AUTHOR:'
         DC    XL2'1DC8',CL10'A.OSSICINI',XL2'1D60',CL10'  CONSOLE '
SFINT    DC    XL2'1DE8',CL21' '
ERMSG    DC    XL3'114040',XL2'1D60'
         DC    CL37'>>> NO ACCEPTABLE CONSOLES ACTIVE <<<'
         DC    XL3'114040',XL1'13'
ERMSGL   EQU   *-ERMSG
WCOMSG   DC    XL3'114040',XL2'1D60',CL24'*** UNEXPECTED ERROR ***'
         DC    XL3'114040',XL1'13'
WCOMSGL  EQU   *-WCOMSG
*   CONSTANTS.                                                   *
CMNDP    DC    0F'0',AL2(79,0)
FKACT    DC    CL10':   ACTIVE'
LOTSBLNK DC    CL90' '
HEXMASK  DC    XL8'0F0F0F0F0F0F0F0F'
HEXTAB   DC    C'0123456789ABCDEF'
BLANKTAB DC    CL256' '
         ORG   BLANKTAB+X'4A'
         DC    X'4A4B4C4D4E4F',X'50'
         ORG   BLANKTAB+X'5A'
         DC    X'5A5B5C5D5E5F6061'
         ORG   BLANKTAB+X'6B'
         DC    X'6B6C6D6E6F'
         ORG   BLANKTAB+X'7A'
         DC    X'7A7B7C7D7E7F'
         ORG   BLANKTAB+X'81'      TRANSLATE LOWER CASE TO UPPER.
         DC    C'ABCDEFGHI'
         ORG   BLANKTAB+X'91'      ...
         DC    C'JKLMNOPQR'
         ORG   BLANKTAB+X'A2'      ...
         DC    C'STUVWXYZ '
         ORG   BLANKTAB+C'A'
         DC    C'ABCDEFGHI'
         ORG   BLANKTAB+C'J'
         DC    C'JKLMNOPQR'
         ORG   BLANKTAB+C'S'
         DC    C'STUVWXYZ '
         ORG   BLANKTAB+C'0'
         DC    C'0123456789'
         ORG
* TURN OFF FULL SCREEN (SPF), CLEAR AND RESET CURSOR TO ROW1, COL1.
CLEAR    DC    XL2'27F5',XL1'C7',XL3'115D7E',XL3'114040'
         DC    XL4'3C404000',XL3'114040',XL1'13'
CLEARL   EQU   *-CLEAR
TPUTFLG  DC    X'03'               IT'S FULL SCREEN TIME.
NOPAGE   DC    XL9'6D6D6D6D6D6D6D6D6D'
NXPAGE   DC    CL9' * MORE *'
*   SCREEN FORMATS.                                              *
FULLSCRP DC   XL2'27F1',XL1'C1',XL3'115D7F',XL3'114040',XL4'3C404000'
FULLSCRL EQU   *-FULLSCRP
SELSPP   DC    XL2'1D60',CL16'FROM  LIST  ||, '
         DC    CL44'CHOOSE THE  CUU  OF THE CONSOLE YOU WISH   :'
         DC    XL2'1DC8'
SELCUUP  DC    CL3'CUU',XL2'1DE8'
SELWHATP DC    CL10' ',XL2'1D60',CL6' '
SELSPL   EQU   *-SELSPP
SELT1    DC  CL4' ',XL2'1DE8',CL3'CUU',XL2'1D60',CL31' ID  AUTHORITY'
SELT1L   EQU   *-SELT1
SELT2    DC    CL4' ',XL2'1DE8',CL3'---'
         DC    XL2'1D60',CL31' --  ---------------'
SELT2L   EQU   *-SELT2
SELDTP   DC    CL4' ',XL2'1DE8',CL3' ',XL2'1D60',CL21' '
         DC    XL2'1DE8',CL2' ',XL2'1D60',CL6' '
SELDTL   EQU   *-SELDTP
SETIC    DC    XL3'115B60',XL2'0513'
SETICL   EQU   *-SETIC
WSP      DC    XL3'11D940',XL2'1DE8',XL4'3C5AC66D',CL9' '
WSPL     EQU   *-WSP
WSF      DC    XL3'115B60',XL2'1D40',CL2' ',XL3'115CF0',XL2'1D60'
WSFL     EQU   *-WSF
SETCO    DC    XL3'115B60',XL2'0513'
SETCOL   EQU   *-SETCO
         LTORG
TABSET   DS    0XL5         ***  VARIABLES   ***
         DC    XL3'114040',XL2'1D60',XL3'11C150',XL2'1D60',XL3'11C260'
         DC    XL2'1D60',XL3'11C3F0',XL2'1D60',XL3'11C540',XL2'1D60'
         DC    XL3'11C650',XL2'1D60',XL3'11C760',XL2'1D60',XL3'11C8F0'
         DC    XL2'1D60',XL3'114A40',XL2'1D60',XL3'114B50',XL2'1D60'
         DC    XL3'114C60',XL2'1D60',XL3'114DF0',XL2'1D60',XL3'114F40'
         DC    XL2'1D60',XL3'115050',XL2'1D60',XL3'11D160',XL2'1D60'
         DC    XL3'11D2F0',XL2'1D60',XL3'11D440',XL2'1D60',XL3'11D550'
         DC    XL2'1D60',XL3'11D660',XL2'1D60',XL3'11D7F0',XL2'1D60'
FAKEWARN DC    CL5'PRESS',XL2'1DE8',CL4'PF-3',XL2'1D60',CL2'OR'
         DC    XL2'1DE8',CL5'PF-12',XL2'1D60'
         DC    CL22'TO EXIT FROM  CONSOLE,'
         DC    XL2'1DE8',CL4' CPU',XL2'1D60'
FAKEWRNR EQU   *-FAKEWARN
         DC    CL20'            SYSTEM :',XL2'1DE8'
         DC    CL(LSYSID)' ',C'.'
LSF      DC    XL2'1D60'
FAKEWRNL EQU   *-FAKEWARN
FKWARN   DC    CL4'KEYS',XL2'1DE8',CL4'PF-2',XL2'1D60'
         DC    CL14':CONSOLE ROUND',XL2'1DE8',CL4'    '
         DC    XL2'1D60',CL9'         '
         DC    XL2'1DE8',CL4' CPU',XL2'1D60'
FKWRNR   EQU   *-FKWARN
         DC    CL19':          SYSTEM :',XL2'1DE8'
         DC    CL(LSYSID)' ',C'.',XL2'1D60'
FKWRNL   EQU   *-FKWARN
*   DATA  AND  WORK AREAS DESCRIPTION.                            *
WRKDSECT DSECT                     DESCRIPTION OF WORK AREAS.
SVA      DS    18F                 SAVE AREA.
CVTA     DC    D'0',X'0'           PLUS A GARBAGE BYTE.
XUCMID   DC    X'0'
MOVEBSAV DS    3F                  REGISTER SAVE AREA.
CVTB     DC    F'0'
SVTDCM   DC    F'0'
SVOREPT  DC    F'0'
SZLINE   DC    F'0'                LINE SIZE (LINE LENGTH).
SZSCRN   DC    F'0'                SCREEN SIZE (NUMBER OF LINES).
ASCRN    DC    F'0'                SCREEN IMAGE ADDRESS.
SASID    DS    F                   PREVIOUS SECONDARY ASID.
CONASID  DS    F                   'CONSOLE' ASID (COMMTASK).
AXPL     DC    H'1',H'0'           AX PARM LIST.
LOCRDCM  DC    A(0)                ADDRESS OF PAGEABLE DCM AREA.
RDCML    DC    A(0)                LENGTH OF PAGEABLE DCM AREA.
RDCMLG   DC    A(0)                LENGTH OF PAGEABLE DCM AREA.
LOCTDCM  DC    A(0)                ADDRESS OF PAGEABLE DCM AREA.
TDCML    DC    A(0)                LENGTH OF PAGEABLE DCM AREA.
TDCMLG   DC    A(0)                LENGTH OF PAGEABLE DCM IN CORE.
LOCBUF   DC    A(0)                ADDRESS OF DCM BUFFER AREA.
LOCBUFL  DC    F'0'                LENGTH OF DCM BUFFER AREA.
BUFLGTH  DC    F'0'                LENGTH OF DCM BUFFER IN CORE.
UNITMSG  DC    XL3'115A50',XL2'1D60',CL27'MVS/ESA SP4 *EULER* AUTHOR:'
         DC    XL2'1DC8',CL10'A.OSSICINI'
         DC    XL2'1D60',CL10'  CONSOLE ',XL2'1DE8'
UNITXXX  DC    CL4' '
SVCRCM   DC    CL9' '
NOTR15   DC    CL8' '
UNITLEN  EQU   *-UNITMSG
CMND     DC    0F'0',AL2(79,0)     SEND COMMAND AREA.
CMNDBUF  DC    CL80' '
PFREPLY  DS    0CL86               AREA TO HOLD TGET REPLY.
         DC    CL6' '              AID + JUNK.
REPLY    DC    CL80' '
*   CONSOLES SELECTION PANEL.                                    *
SELSCRN  DC  XL2'27F1',XL1'C1',XL3'115D7F',XL3'114040',XL4'3C404000'
SELT1A   DC    CL(SELT1L)' '
SELT1B   DC    CL(SELT1L)' '
SELT2A   DC    CL(SELT2L)' '
SELT2B   DC    CL(SELT2L)' '
SELDT    DC    40CL(SELDTL)' '     DATA LINES.
SELDTN   EQU   ((*-SELDT)/SELDTL)
SELSP    DC    XL2'1D60',CL16'FROM  LIST  ||, '
         DC    CL44'CHOOSE THE  CUU  OF THE CONSOLE YOU WISH   :'
         DC    XL2'1DC8'
SELCUU   DC    CL3'CUU',XL2'1DE8'
SELWHAT  DC    CL10' ',XL2'1D60',CL6' '
INFLINE  DC    CL(FAKEWRNL)' '     INFORMATIONAL.
SETICT   DC    XL3'115B60',XL2'0513'
SELSCRNL EQU   *-SELSCRN
*   CONSOLE DISPLAY PANEL.                                       *
FULLSCRN DC  XL2'27F1',XL1'C1',XL3'115D7F',XL3'114040',XL4'3C404000'
SCREEN   DC    20CL84' '           DATA LINES.
SCREENL  EQU   *-SCREEN            DATA LINES TOTAL LENGTH.
NDL      EQU   (SCREENL)/L'SCREEN  NUMBER OF LINES.
WSPT     DC    XL3'11D940',XL2'1DE8',XL4'3C5AC66D'
NXTPGI   DC    CL9' '
MSGLINE  DC    CL80' '
WSFT     DC    XL3'115B60',XL2'1D40'
RPLYNO   DC    CL2' ',XL3'115CF0',XL2'1D60'
INFOLINE DC    CL(FKWRNL)' '       INFORMATIONAL.
SETCOT   DC    XL3'115B60',XL2'0513'
SCRLEN   EQU   *-FULLSCRN
*   PROCESSING SWITCHES.                                         *
SWITCH   DC    X'01'
NXTPG    EQU   X'01'               MORE DATA TO BE DISPLAYED
SCRST    EQU   X'02'               SCREEN SIZE TO BE SET.
SCRRS    EQU   X'04'               SCREEN SIZE TO BE RESET.
QUIT     EQU   X'08'               TERMINATING PROCESS.
ADSDV    EQU   X'10'               ACCEPT WTOR REQUEST.
WRKL     EQU   (((*-SVA)+7)/8)*8   WORK AREAS LENGTH.
      COPY  AOSRDCM               ***    DSECT DEFINITIONS    ***
        CVT    DSECT=YES,LIST=YES
        IEESMCA
        IEECUCM ,                  MVS UCM DEFINITION.
DCMTSRT  DSECT  DCMTSPTR                                           -AO-
        IEECRDCM DSECT=YES         MVS RESIDENT DCM DEFINITION (RDCM).
DCMREND  DS     0C                 END OF DCM                      -AO-
DCMSTRT  DSECT  DCMSTPTR                                           -AO-
        IEECDCM ,                  MVS TRANSIENT DCM DEFINITION (TDCM).
UCBDSECT DSECT
        IEFUCBOB LIST=NO,DEVCLAS=GR     VERSION   MVS/SP 3 AND 4
        END

THE A05RDCM MACRO

         MACRO
         IEECRDCM    &A=,&KEY=,&DSECT=
***********************************************************************
*          IEECRDCM - RESIDENT DISPLAY CONTROL MODULE                 *
* COPYRIGHT  -  NONE                                                  *
* STATUS     - OS/VS2 HBB4430  (VERSION OF  A. OSSICINI )  .          *
* FUNCTION   - THIS MACRO IS INVOKED AT SYSGEN TO BUILD AN            *
*              RDCM WITH SACBS IN THE NUCLEUS. (MVS/SP2.1.X)          *
* OPERATION  = THIS MACRO DEFINES THE RDCM FIELDS FOR A               *
*              CONSOLE.  IT ALSO BUILDS AN SACB FOR EACH              *
*              DISPLAY AREA DEFINED.                                  *
* CHANGE-ACTIVITY AND FUNCTION -  (MVS/SP 2.2,SP 3.X AND SP 4.X)      *
*              RDCM ARE NOW BUILT IN SP229 AND KEY 0 IN THE           *
*              COMMTASK PRIVATE AREA (UPDATED BY A.OSSICINI)          *
***********************************************************************
         LCLA  &N,&S,&E,&PFKLEN
         LCLC  &TABLE,&C,&D,&F
.**********************************************************************
.*       SET VARIABLES TO GENERATE ONE AREA IF THE RDCM IS            *
.*       BEING MAPPED                                                 *
.**********************************************************************
         AIF   ('&DSECT' EQ '').NODEC
&S       SETA   1
&E       SETA   1
&D       SETC   '1'
         AGO   .POS
.NODEC   ANOP
.**********************************************************************
.*       SET AREA PARAMETERS IF THE RDCM IS BEING CREATED             *
.*       AND AREAS ARE DEFINED                                        *
.**********************************************************************
         AIF   ('&A'  EQ  '').NEG
&S       SETA    N'&A
&E       SETA  1
&D       SETC  '&A(&E)'
         AGO   .POS
.NEG     ANOP
&S       SETA  0
.POS     ANOP
&N       SETA  1
&F       SETC  '0'
&TABLE   SETC  'ABCDEFGHIJK'
         AIF   (&S  EQ  0).NUN
&C       SETC  '&TABLE'(&N,1)           COMPUTE AREA ID
&F       SETC  '&TABLE'(&S,1)
.NUN     ANOP
.**********************************************************************
.*       DEFINE THE FIRST PORTION OF THE RDCM                         *
.**********************************************************************
DCMADTRN DC    F'0'                POINTER TO PAGEABLE DCM
DCMRSP21 EQU   1                   OS/VS2 HBB2102
DCMRSP22 EQU   2                   OS/VS2 JBB2220     MOD. A. OSSICINI-
DCMRSP31 EQU   3                   OS/VS2 HBB3310     MOD. A. OSSICINI-
DCMRSP41 EQU   3                   OS/VS2 HBB4410     MOD. A. OSSICINI-
DCMRSP43 EQU   4                   OS/VS2 HBB4430     MOD. A. OSSICINI-
DCMRSP51 EQU   5                   OS/VS2 HBB5510     MOD. A. OSSICINI-
DCMRVRID EQU   DCMRSP43            CURRENT VERSION    ''''''''''''''''-
DCMRVERN DC    AL1(DCMRVRID)       CONTROL BLOCK VERSION
         AIF   (T'&KEY EQ 'O').NOPFKS PFK'S SPECIFIED?
         AIF   (&KEY EQ 0).NOPFKS  SPECIFIED AS ZERO?
DCMRFLGS DC    X'80'               FLAGS - PFK'S PRESENT
         AGO   .SETFLGS            FLAGS ARE SET
.NOPFKS  ANOP
DCMRFLGS DC    X'00'               FLAGS
.SETFLGS ANOP
DCMPFKEY EQU   X'80'               CONSOLE HAS PFK'S
DCMPFKWK EQU   X'40'               PFK'S ARE OPERATIONAL
DCMPFKIN EQU   X'20'               PFK INIT. IN PROCESS
DCMDOM   EQU   X'10'               DOM MUST BE TRIED
DCMNIPP  EQU   X'08'               CONSOLE WAS USED BY NIP
DCMPFKBD EQU   X'04'               PFK DEFS ARE NOT FROM DCMLIB AND    *
                                   CAN'T BE SAVED WHEN CHANGED
DCMFAIL  EQU   X'02'               MODEL TDCM COULD NOT BE USED    @D1A
DCMLEN   DC    H'0'                LENGTH OF TRANS DCM
DCMADKP  DC    A(0)                ADDRESS OF ROUTED K COMMAND
*                                       PARAMETER LIST
         AIF   ('&F' EQ '0').NOTOPAR
DCMTOPAR DC    C'&F'               TOP DISPLAY AREA DEFINED
         AGO   .TOPDONE
.NOTOPAR ANOP  ,
DCMTOPAR DC    X'00'
.TOPDONE ANOP  ,
DCMTOPDS DC    X'00'               TOP DISPLAY ON SCREEN
DCMPREVM DC    X'00'               CONSOLE'S PREVIOUS OPER. MODE   -AO-
DCMPREFC EQU   X'08'               PREVIOUS MODE WAS FC            -AO-
DCMPREMS EQU   X'04'               PREVIOUS MODE WAS MS            -AO-
DCMPRESD EQU   X'02'               PREVIOUS MODE WAS SD            -AO-
DCMDEVTY DC    X'00'               DEVICE TYPE FLAGS
DCMTY60  EQU   X'80'               USABLE FOR SD
DCMTY50  EQU   X'40'               UNUSABLE FOR SD
DCMBCOLR EQU   X'20'               USABLE FOR BASE COLOR
DCMECOLR EQU   X'10'               USABLE FOR EXTENDED COLOR
DCMSPRPQ EQU   X'08'               DEVICE SUPPORTS READ PARTITION      X
                                   QUERY FUNCTION
DCMEXTDS EQU   X'04'               DEVICE SUPPORTS EXTENDED DATA       X
                                   STREAM I/O AND 14 BIT ADDRESSES ON  X
                                   OUTBOUND DATA
DCM14IAD EQU   X'02'               DEVICE SUPPORTS 14 BIT ADDRESSES ON X
                                   INBOUND DATA
DCMIMGLT EQU   X'01'               DEVICE HAS AN IMAGE LIMIT
         AIF   (&S EQ 0).NONE      IF NO SDS AREAS REQUESTED
DCMADSDS DC    A(DCMACB)           POINTER TO FIRST SDS SUPPORT AREA
         AGO   .MCH
.NONE    ANOP
DCMADSDS DC    F'0'                POINTER TO FIRST SDS SUPPORT AREA
.MCH     ANOP
DCMRCBID DC    C'RDCM'             CONTROL BLOCK ID
.YYY     ANOP
.**********************************************************************
.*       DEFINE THE REMAINDER OF THE RDCM                             *
.**********************************************************************
DCMWLAST DC    F'0'                PT CON Q ENTRY LAST OUT (O-O-L)
DCMRMSAL DC    H'0'                NUMBER LINES IN MSG AREA
DCMDOMKY DC    H'0'                CONSOLE DOM ELEMENT
DCMRSV04 DC    F'0'                RESERVED                        -AO-
DCMADPFK DC    F'0'                POINTER TO RESIDENT PFK AREA
DCMINTVL DC    H'0'                INTERVAL FOR THIS DCM
DCMTMCTR DC    H'0'                TIME COUNTER FOR THIS DCM
DCMR2FLG DC    X'00'               TIMER FLAGS
DCMRXSFL EQU   X'80'               FULL SCREEN FLAG
DCMRXUNV EQU   X'40'               UNVIEWABLE MESSAGE DISPLAYED
DCMRXTMR EQU   X'20'               TIMER FLAG
DCMRXRLL EQU   X'10'               READY TO ROLL
DCMRXDEL EQU   X'08'               PENDING DELETE REQUEST
DCMRXTIM EQU   X'02'               TIMER ELAPSED FOR THIS DISPLAY
DCMRXDCM EQU   X'01'               T DCM IS IN CORE
DCMR3FLG DC    X'00'               MISC FLAGS
DCMSTSWT EQU   X'80'               CHANGING STATUS OF OUTPUT ONLY CON
DCMKVIP  EQU   X'40'               ENTRY FOR K VARY COMMAND
DCMCLPR  EQU   X'20'               CLOSE IN PROCESS
DCMRXSCN EQU   X'10'               ASY ERROR MESSAGE ON SCREEN
DCMR3PKA EQU   X'08'               DA I/O COMPLETE FLAG
DCMRXHMT EQU   X'04'               FULL SCREEN SIMULATED?
DCMOPEN  EQU   X'02'                                               -AO-
DCMIFVLD EQU   X'01'                                               -AO-
         AIF   (T'&KEY EQ 'O').NOKEYS   PFK'S SPECIFIED?
         AIF   (&KEY EQ 0).NOKEYS SPECIFIED AS ZERO?
&PFKLEN  SETA  (&KEY*110)+19       LENGTH OF PFK AREA IS 110 BYTES     *
                                   PER KEY + 18-BYTE HEADER + ONE-BYTE *
                                   STOPPER
&PFKLEN  SETA  (&PFKLEN+7)/8*8     ROUND UP TO DOUBLEWORD
.NOKEYS  ANOP
DCMPFKSZ DC    H'&PFKLEN'          LENGTH OF PFK BUFFER
DCMRQDEL DC    XL8'40'             BUFFER FOR PENDING DELETE REQUESTS
DCMMSGSV DC    F'0'                LINE COUNT SAVE AREA FOR            *
                                   IEECVFTP                     ZMC0190
DCMPFKBF DC    F'0'                PFK BUFFER ADDRESS
DCMDTPTR DC    F'0'                POINTER TO THE D/T/S            -AO-
DCMRSV02 DC    F'0'                RESERVED
         AIF   (&S EQ 0).END       IF NO SDS AREAS, DEPART
***********************************************************************
* SCREEN AREA CONTROL BLOCK (SACB)
***********************************************************************
DCMACB   EQU   *                   SCREEN AREA CONTROL BLOCK
         AIF   (&N EQ &S).ZERO     BRANCH IF LAST AREA
DCMACBNX DC    A(*+DCMACBSZ+DCMPRSZ) POINTER TO NEXT SACB
         AGO   .AID
.ZERO    ANOP
DCMACBNX DC    A(0)                POINTER TO NEXT SACB
.AID     ANOP
DCMAID   DC    C'&C'               AREA ID
DCMASACB DC    X'80'               SACB FLAGS
DCMAUSE  EQU   X'80'               AREA PRESENTLY DEFINED
DCMAGM   EQU   X'40'               GETMAINED SACB
DCMALN   DC    FL2'&D'             LENGTH OF AREA
DCMATOP  DC    X'00'               TOP ROW OF AREA
DCMACLR  EQU   *                   REINITIALIZED PORTION
DCMAROW  DC    X'00'               ROW TO BE WRITTEN NEXT
DCMAFR   DC    H'00'               FRAME ON SCREEN
DCMAMJWQ DC    A(0)                POINTER TO CON Q ENTRY FOR MAJOR
DCMAMIN  DC    A(0)                POINTER TO MINOR WQE
DCMATIME DC    F'0'                TIME CONTROL LINE WAS WRITTEN
DCMANLAB DC    FL1'0'              NUMBER OF LABEL LINES FOUND
DCMARES1 DC    XL1'00'             RESERVED
DCMAFLG1 DC    X'00'               AREA FLAGS1
DCMADISP EQU   X'40'               DISPLAY IN AREA
DCMADEND EQU   X'20'               END OF DISPLAY ON SCREEN
DCMAFRPR EQU   X'10'               FRAMING IN PROGRESS
DCMAFULL EQU   X'08'               FRAME FULL
DCMABL   EQU   X'04'               BLANKING TO BE DONE
DCMAELLF EQU   X'02'               EMBEDDED LABEL LINE FOUND
DCMADLF  EQU   X'01'               DATA LINE FOUND WHILE WRITING       X
                                   DISPLAY
DCMAFLG2 DC    X'00'               AREA FLAGS 2
DCMALMIN EQU   X'80'               SAVED POINTER TO LAST MINOR OUTPUT
DCMAWCON EQU   X'40'               WRITE CONTROL LINE
DCMARCON EQU   X'20'               REWRITE CONTROL LINE
DCMAMJFR EQU   X'10'               MAJOR WQE HAS BEEN FOUND
DCMADFLG DC    X'00'               DYNAMIC DISPLAY FLAGS
DCMADD   EQU   X'80'               TRACK IN AREA
DCMAHOLD EQU   X'40'               TRACK IN HOLD MODE
DCMACSIB EQU   X'20'               TRACK WITH CONTINUATION LINE IN     X
                                   SCREEN IMAGE BUFFER
DCMATRCK DC    X'00'               TRACK REQUEST INDICATORS
DCMATJOB EQU   X'80'               TRACK JOBS
DCMATJBL EQU   X'40'               TRACK JOBS,LIST
DCMATTS  EQU   X'08'               TRACK TS
DCMATTSL EQU   X'04'               TRACK TS,LIST
DCMATA   EQU   X'88'               TRACK A
DCMATAL  EQU   X'44'               TRACK A,LIST
DCMRSV05 DC    H'0'                RESERVED                        -AO-
DCMATECB DC    F'0'                TRACK CANCEL ECB ADDRESS
DCMAASCB DC    F'0'                TRACK ASCB POINTER
DCMACBND EQU   *                   END OF SACB
DCMCLRLN EQU   *-DCMACLR           LENGTH FOR REINITIALIZING
DCMACBID DC    F'0'                ACRONYM = SACB                  -AO-
DCMRSV03 DC    F'0'                RESERVED                        -AO-
DCMACBSZ EQU   *-DCMACB            SIZE OF SACB IN BYTES
.**********************************************************************
.*       BUILD THE SCREEN AREA CONTROL BLOCKS (SACB'S) - ONE          *
.*       PER AREA DEFINED                                             *
.**********************************************************************
.NEXT    AIF   (&N EQ &S).END      BRANCH IF LAST AREA IS DONE
&N       SETA  &N+1
&E       SETA  &E+1
&C       SETC  '&TABLE'(&N,1)           COMPUTE AREA ID
&D       SETC  '&A(&E)'
***********************************************************************
* SCREEN AREA CONTROL BLOCK (SACB)
***********************************************************************
         AIF   (&N EQ &S).Z        BRANCH IF LAST AREA
         DC    A(*+DCMACBSZ+DCMPRSZ) POINTER TO NEXT SACB
         AGO   .ID
.Z       ANOP
         DC    A(0)                POINTER TO NEXT SACB
.ID      ANOP
         DC    C'&C'               AREA ID
         DC    X'80'               SACB FLAGS
         DC    FL2'&D'             LENGTH OF AREA
         DC    X'00'               TOP ROW OF AREA
         DC    X'00'               ROW TO BE WRITTEN NEXT
         DC    H'00'               FRAME ON SCREEN
         DC    A(0)                POINTER TO CON Q ENTRY FOR MAJOR
         DC    A(0)                POINTER TO MINOR WQE
         DC    F'0'                TIME CONTROL LINE WAS WRITTEN
         DC    FL1'0'              NUMBER OF LABEL LINES FOUND
         DC    XL1'00'             RESERVED
         DC    X'00'               AREA FLAGS1
         DC    X'00'               AREA FLAGS2
         DC    X'00'               DISPLAY FLAGS
         DC    X'00'               TRACK REQUEST INDICATORS
         DC    H'0'                RESERVED                        -AO-
         DC    F'0'                CANCEL TRACK ECB ADDRESS
         DC    F'0'                TRACK ASCB POINTER
         DC    F'0'                ACRONYM = SACB                  -AO-
         DC    F'0'                RESERVED                        -AO-
         AGO   .NEXT               RETURN TO GENERATE NEXT AREA
.END     MEND

Andrea Ossicini
Technical Services Manager (Italy)                                 c Xephon 1995

