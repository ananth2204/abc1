Avoiding JES328X console log dataset allocation

After monitoring DASD performance we noticed that the
console log datasets used by JES328X were causing a large
amount of I/O on certain volumes. These datasets are used to
allow on-line operators to browse the console log for specific
remote printers. The datasets are automatically allocated for
each remote printer regardless of whether they are used or not.
We do not use these datasets and decided it would be
advantageous to stop them being allocated.

After investigation we found that no parameters are provided to
stop dynamic allocation of these resources. To overcome this
problem I had to create two user modifications to stop the
datasets being allocated and to stop error messages being issued
to the console because the logging dataset is not allocated.

The first USERMOD is used to implement a new version of the
JSXDYNCK module. The code that has been removed is also
presented. All source code is provided as standard with
JES328X. The USERMOD coded allows the on-line source to
be assembled and then the object code generated by the
Assembler is stored as JSXDYNCK in SYS1.JSX.ALOAD.
This is then used by the linkage editor to create the new load
module. The source code should be placed immediately after
the ++SRC SMPE statement. The job when run will receive
and apply the modification.

The second USERMOD is used to relink JSXCONS. The
changes made to the source are shown. After the modification
was applied the overhead caused by the console log datasets
was no longer an issue and the messages that would have been
issued to the operator's console were completely removed.


SMPE USERMOD FOR JSXDYNCK

//STS01B      JOB   (SDTS),'JOHN BRADLEY',CLASS=A,MSGCLASS=Q,
//            MSGLEVEL=(1,1),NOTIFY=STS01
//*
//***************************************************************/
//*  PURPOSE:                                                   */
//*  THIS SYSMOD IS USED TO IMPLEMENT A NEW VERSION OF MODULE   */
//*  JSXDYNCK. THIS WAS REQUIRED WHEN WE REMOVED CONSOLE        */
//*  LOGGING FROM JES328X. THE NEW SOURCE CODE STOPS MESSAGE    */
//*  +JSX259 FROM BEING ISSUED TO THE OPS CONSOLE.              */
//*  THE ++SRC SMP CONTROL STATEMENT CAUSES THE FOLLOWING       */
//*  TO HAPPEN DURING SMP PROCESSING:                           */
//*  APPLY STEP:                                                */
//*        - THE ++SRC INPUT IS ASSEMBLED.                      */
//*        - THE OBJECT CODE GENERATED BY THE ASSEMBLER IS      */
//*          SAVED IN THE JSXDYNCK MEMBER OF SYS1.JSX.ALOAD.    */
//*        - THE OBJECT CODE IS ALSO USED AS INPUT TO THE       */
//*          LINKAGE EDITOR IN LINKING THE NEW MODULE INTO      */
//*          SYS1.JSX.LOAD.                                     */
//*  **** COMMENTS IN THE SOURCE INDICATE WHERE CODE HAS ****   */
//*       BEEN REMOVED.                                         */
//***************************************************************/
//*
//STEP1       EXEC  MVSSMPE
//SMPHOLD     DD    DUMMY
//AJSXLOAD    DD    DSN=SYS1.JSX.ALOAD,DISP=SHR
//AJSXASM     DD    DSN=SYS1.JSX.AJSXASM,DISP=SHR
//SMPCNTL     DD    *
  SET BDY(GLOBAL) .
  RECEIVE S(BD00069) .
  SET BDY(MVS89DT) .
  APPLY S(BD00069) CHECK.
  SET BDY(CAD89DT) .
  APPLY S(BD00069) CHECK.
/*
//SMPPTFIN    DD    *
++USERMOD (BD00069) .
++VER (Z038) FMID (HBY2202) PRE(UY13331) .
++SRC(JSXDYNCK) DISTLIB(AJSXASM) DISTMOD(AJSXLOAD) .


SOURCE CODE CHANGES TO JSXDYNCK MODULE

*                               *--------------------*
*                                  NORMAL PROGRAMS
*                               *--------------------*
*                  ****    MODIFICATION MADE HERE ****
*
* MODIFICATION HERE HAS COMMENTED OUT FOLLOWING 30 LINES.
*
* *********************************************************************
*
*IF (CLC,CXCMD,EQ,=C'1')
*    L     3,CXPLIST
*    L     3,8(3)
*    JSXWTO 0(3),CXCONPL,CXMSG  SEND THE COMPLETE MESSAGE
*ELSE
*                               *-----------------------*
*                                  GET THE PROC NAME
*                               *-----------------------*
*    LA    3,CXANSWER           R3 -> EXTRACT ANSWER FIELD
*    EXTRACT (3),'S',FIELDS=(TIOT),MF=(E,CXEXTRL) GET ADDRESS OF TIOT
*    L     3,CXANSWER           R3 -> TIOT
*                               *-----------------------*
*                                  JSXCONS SPECIAL CASE
*                               *-----------------------*
*    MVI   CXWTODAT,C' '        CLEAR MSG AREA
*    MVC   CXWTODAT+1(L'CXWTODAT-1),CXWTODAT
*    MVC   CXWTOMID(7),CXMSG+11
*    MVC   CXWTOPRC(8),0(3)     PLACE PROCNAME FROM TIOT
*                               *-----------------------*
*                                  INSERT SLU NAME
*                               *-----------------------*
*    IF    (CLC,CXSLU,EQ,=CL8' ')
*      MVC CXWTODAT(49),CXMSG+18
*    ELSE
*      MVC CXWTODAT(4),=C'SLU='
*      MVC CXWTODAT+4(8),CXSLU
*      MVC CXWTODAT+13(49),CXMSG+18
*    ENDIF
*    WTO   MF=(E,CXWTO)
*ENDIF


SMPE USERMOD FOR JSXCONS

//STS01B      JOB   (SDTS),'JOHN BRADLEY',CLASS=A,MSGCLASS=Q,
//            MSGLEVEL=(1,1),NOTIFY=STS01
//*
//***************************************************************/
//*  PURPOSE:                                                   */
//*  THIS SYSMOD IS USED TO IMPLEMENT A NEW VERSION OF MODULE   */
//*  JSXCONS.  THIS WAS REQUIRED WHEN WE REMOVED CONSOLE        */
//*  LOGGING FROM JES328X. THE NEW SOURCE CODE STOPS MESSAGE    */
//*  +JSX256 BEING ISSUED TO THE OPS CONSOLE.                   */
//*  THE ++SRC SMP CONTROL STATEMENT CAUSES THE FOLLOWING       */
//*  TO HAPPEN DURING SMP PROCESSING:                           */
//*  APPLY STEP:                                                */
//*        - THE ++SRC INPUT IS ASSEMBLED.                      */
//*        - THE OBJECT CODE GENERATED BY THE ASSEMBLER IS      */
//*          SAVED IN THE JSXCONS  MEMBER OF SYS1.JSX.ALOAD.    */
//*        - THE OBJECT CODE IS ALSO USED AS INPUT TO THE       */
//*          LINKAGE EDITOR IN LINKING THE NEW MODULE INTO      */
//*          SYS1.JSX.LOAD.                                     */
//*  **** COMMENTS IN THE SOURCE INDICATE WHERE CODE HAS ***    */
//*       BEEN REMOVED.                                         */
//***************************************************************/
//*
//STEP1       EXEC  MVSSMPE
//SMPHOLD     DD    DUMMY
//AJSXLOAD    DD    DSN=SYS1.JSX.ALOAD,DISP=SHR
//AJSXASM     DD    DSN=SYS1.JSX.AJSXASM,DISP=SHR
//SMPCNTL     DD    *
  SET BDY(GLOBAL) .
  RECEIVE S(BD00070) .
  SET BDY(MVS89DT) .
  APPLY S(BD00070) CHECK.
  SET BDY(CAD89DT) .
  APPLY S(BD00070) CHECK.
/*
//SMPPTFIN    DD    *
++USERMOD (BD00070) .
++VER (Z038) FMID (HBY2202)
      PRE(UY13331,UY23552,UY39793,UY41041,UY45168,UY45173) .
++SRC(JSXCONS) DISTLIB(AJSXASM) DISTMOD(AJSXLOAD) .


SOURCE CODE CHANGES TO JSXCONS MODULE

*        ************************************************************
*        * ****    MODIFICATION MADE HERE. 5 LINES COMMENTED OUT.****
*        ************************************************************
*
*        L     3,CXANSWER              R3 -> TIOT
*        MVC   CXWTOMID(7),=CL7'JSX256 '                          @209
*        MVC   CXWTOPRC(8),0(3)        CXWTOPRC = TIOCNJOB
*        MVC   CXWTODAT(99),CXWTOSLU                              @209
*        WTO   MF=(E,CXWTO)


John Bradley
Senior Technical Support Engineer (UK)             c Xephon 1993

