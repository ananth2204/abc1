Passing SYSIN data via the PARM field

SUYLINK is a program that will pass a small amount of SYSIN data to a
utility program by means of the PARM field of the EXEC statement.  It is
especially useful in catalogued procedures where unchanging SYSIN data,
for example SORT statements, are usually loaded into a separate PDS
member.

Since SUYLINK may be used to invoke APF-authorised programs, it must be
link- edited with an authorisation code of 1 into an APF-authorised
library.  It follows that any program invoked by SUYLINK must itself
reside in an authorised library.  (LNKLSTxx libraries are normally
considered authorised.)

The maximum amount of data that can be specified in the PARM field is
100 bytes.  Up to 9 bytes are required to specify the name of the
utility plus its delimiter, leaving a minimum total of 91 bytes for
sub-parameter information and SYSIN data.  As many SYSIN records as will
fit may be specified but each record, except the last, requires a
delimiter, each delimiter counting towards the total number of bytes
available.

JCL FOR SUYLINK

The EXEC statement for SUYLINK is:

//STEPn    EXEC PGM=SUYLINK,PARM='.....'

Coding the PARM value is discussed later.

The DD statements required are those that would be coded when invoking
the utility directly, except for the SYSIN DD statement, which must be
omitted.

Sample JCL to invoke SORT program:

//STEPA    EXEC PGM=SUYLINK,
//    PARM='SORT< SORT FIELDS=(1,4,CH,A),DYNALLOC=DISK'
//SYSOUT   DD SYSOUT=*
//SORTIN   DD DSN=.....
//SORTOUT  DD DSN=.....

Note the absence of a SYSIN DD statement.

CODING THE PARM FIELD FOR SUYLINK

The PARM value specifies the name of the utility to be invoked and,
optionally, a sub-parameter field and SYSIN data to be passed to the
utility.  A maximum of 100 characters may be input via the PARM field.

The utility name, sub-parameter field, and each SYSIN record are
delimited by either of the characters < or >.  There is no need to code
a delimiter in the right-hand byte of the PARM but if one is coded it
won't cause any problems.  To pass a sub-parameter value to the invoked
utility, specify 'PARM=....' immediately after the program name
delimiter.  There is no need to enclose the value itself in apostrophes
since it is already contained within the apostrophes of the main PARM.

Trailing blanks of a SYSIN record need not be coded in the PARM value
because SUYLINK will pad out each SYSIN record to 80 bytes.

RETURN CODES ISSUED BY SUYLINK

Normally the return code issued by SUYLINK is the same as that issued by the
invoked utility.  The two exceptions occur when SUYLINK is unable to function
correctly and one of the following two return codes are issued.

*    16 - SUYLINK has found a syntax error in the PARM value passed to
          it

*    99 - SUYLINK was unable to allocate a SYSOUT dataset for error
          messages and hence is unable to print an error message to this
          effect.  This should never happen but is catered for by the
          program.

EXAMPLES OF CODING JCL AND PARM VALUES

In each of the following examples, the required DD statements are also
included for clarity.

Example 1

This example invokes IEBPTPCH passing it two SYSIN records.

//STEPA    EXEC PGM=SUYLINK,
//  PARM='IEBPTPCH< PRINT MAXFLDS=1< RECORD FIELD=(80)'
//SYSPRINT DD ....
//SYSUT1   DD ....
//SYSUT2   DD ....

This is a straightforward example where one card image is sufficient to
contain the entire PARM value.  Note the blanks preceding each SYSIN
record as required by the IEBPTPCH program.

Example 2

This example invokes the SORT program with a continued SORT statement
where the continuation comma can be used as part of the PARM value.

//STEPA    EXEC PGM=SUYLINK,
//  PARM=('SORT< SORT FIELDS=(1,5,CH,1,15,4,CH,A',
//        '21,4,CH,A,43,6,CH,A)')
//SYSOUT   DD ....
//SORTIN   DD ....
//SORTOUT  DD ....

Because the PARM value is continued, the entire PARM value is enclosed
within parentheses and each portion of it is enclosed within quotation
marks.  Also note the way the continuation comma has been used.  Because
the continuation comma is passed as part of the PARM value, a comma has
not been coded immediately before the closing quote on the first line of
the PARM.

Example 3

This example invokes SORT with a continued PARM value where the
continuation comma is not to be used as part of the PARM value.

In this case where the continuation comma is not wanted, the SYSIN
record which precedes it must finish in the same card image as the
continuation comma.

//STEPA    EXEC PGM=SUYLINK,
//   PARM=('SORT< SORT FIELDS=(1,10,CH,A,20,2,CH,A)<',
//         '< RECORD TYPE=F,LENGTH=80')
//SYSOUT   DD ....
//SORTWK01 DD ....
//SORTWK02 DD ....
//SORTWK03 DD ....
//SORTWK04 DD ....
//SORTIN   DD ....
//SORTOUT  DD ....

Note the delimiter at the end of the first line of the PARM and again at
the beginning of the second line.  This will cause the continuation
comma to be passed to SUYLINK between two delimiters, effectively
specifying a SYSIN record consisting of a comma in the first byte and
blanks in the remainder.  SUYLINK recognises such a SYSIN record and
suppresses it.  An alternative way to code the PARM in this example
would be to make use of the continuation comma by splitting the PARM
value at one of the commas in the 'SORT FIELDS' values as in the
following example:

//   PARM=('SORT< SORT FIELDS=(1,10,CH,A,20,2,CH',
//         'A)< RECORD TYPE=F,LENGTH=80')

This method of coding eliminates the need for a comma between delimiters
and is functionally equivalent to the former example.  However, if your
PARM value does not contain a comma at which the value can be
conveniently split, you will have to use the first method.

Example 4

This example passes a PARM value to the invoked utility.

Because the PARM field on the EXEC card is reserved for SUYLINK, if you
want to pass a PARM value to the invoked utility, you must code a
sub-parameter field in the primary PARM.  To do this, code 'PARM=....'
immediately after the program name delimiter as in the following
example:

//STEPn    EXEC PGM=SUYLINK,
//  PARM=('SORT<PARM=MSG=AP< SORT FIELDS=(1,10,CH,A)',
//        'DYNALLOC=3380')
//SYSOUT   DD ....
//SORTIN   DD ....
//SORTOUT  DD ....

There is no need to enclose the sub-parameter in apostrophes even if it
contains special characters.  SUYLINK ignores apostrophes enclosing a
sub-parameter value but will cause an apostrophe in any other position
of the sub-parameter to be passed to the utility.  If you want to pass
such an apostrophe, you must code two consecutive apostrophes for each
one to be passed.

Example 5

This example uses a symbolic parameter as part of the PARM value.  In
this example a catalogued procedure contains a SUYLINK step to invoke
IEHPROGM to scratch and uncatalog a dataset.  Symbolic parameters are
used to define the volume serial number and unit type.  The SUYLINK step
in the procedure would look like the following:

//STEPn    EXEC PGM=SUYLINK,
//  PARM=('IEHPROGM< SCRATCH DSNAME=data.set.name',
//        'VOL=&UNIT=&VOL< UNCATLG DSNAME=data.set.name')
//SYSPRINT DD SYSOUT=*
//DD1      DD DISP=SHR,UNIT=&UNIT,VOL=SER=&VOL
The JCL invoking the procedure would look like:
//STEPA    EXEC PROC,UNIT=3380,VOL=DISKID

THE SOURCE CODE FOR SUYLINK

SUYLINK  CSECT
         B     28(R15)             BRANCH ROUND IDENTIFIER ETC.
         DC    AL1(7)              LENGTH OF IDENTIFIER.
         DC    CL8'SUYLINK'        IDENTIFIER.
         DC    CL8'&SYSDATE'       DATE AND
         DC    CL7'&SYSTIME'       TIME OF ASSEMBLY.
         STM   R14,R12,12(R13)     SAVE REGISTERS IN OLD SAVE AREA.
         LR    R12,R15             LOAD CSECT ORIGIN INTO BASE REG.
         USING SUYLINK,R12         CSECT ADDRESSABILITY.
         LR    R15,R13             TEMPORARILY RETAIN OLD SA ADDRESS.
         CNOP  0,4
         ST    R13,SAVE1+4         STOW OLD SA ADRESS IN NEW SA.
         BAL   R13,SAVE1+72        LOAD NEW SA ADDRESS INTO R13
SAVE1    DC    18F'0'              NEW SAVE AREA.
         ST    R13,8(R15)          STOW NEW SA ADDRESS IN OLD SA.
*  PICK UP PARM VALUE.
         L     R1,0(R1)
         LH    R3,0(R1)            GET PARM LENGTH
         LA    R4,2(R1)            ADDRESS OF PARM VALUE
*  DYNAMIC ALLOCATION OF MSGES OUTPUT DATA SET (FOR ERROR MESSAGES)
         LA    R1,RB2PTR           POINT TO REQUEST BLOCK POINTER
         DYNALLOC
         LTR   R15,R15             DYNALLOC SUCCESSFUL?
         BZ    OPENMSG             YES
         MVC   RETCODE,=F'99'      NO - SET RETURN CODE
         B     RETURN
* OPEN MSGES DATA SET FOR ANY ERROR MESSAGES
OPENMSG  OPEN  (MSGES,(OUTPUT))
         LTR   R3,R3               ANY PARM INPUT?
         BNZ   GETPGM              YES
         PUT   MSGES,MSG1          PRINT 'NO PARM INPUT'
CLOSEMSG CLOSE MSGES
         MVC   RETCODE,=F'16'
         B     RETURN
*  EXTRACT PROGRAM NAME FROM PARM
GETPGM   LR    R7,R3
         BCTR  R7,0                LENGTH OF PARM-1 FOR EXECUTE LENGTH
         EX    R7,EXTRT            SCAN FOR DELIMITER < OR >
         BC    8,PGMONLY1          PARM EXHAUSTED BEFORE DELIM FOUND
         BC    2,PGMONLY           DELIM FOUND IN LAST BYTE OF PARM
*  DELIMITER FOUND - MORE DATA FOLLOWS IT.
         LR    R5,R1               SAVE ADDRESS OF DELIMITER
         SR    R1,R4               GET LENGTH OF PGM NAME
         CH    R1,=H'8'            PGM NAME LONGER THAN 8 BYTES?
         BH    BADPGM              YES
         LR    R8,R1               SAVE LENGTH OF PGM NAME
         LTR   R1,R1               PGM NAME LONGER THAN 0
         BZ    BADPGM2             YES
         BCTR  R1,0             LENGTH OF PGM NAME-1 FOR EXECUTE LENGTH
         EX    R1,MOVEPGM          SAVE PGM NAME
         B     GETREST
*  PGM NAME DELIMITER FOUND AT LAST BYTE OF PARM.
PGMONLY  CR    R1,R4               ANY DATA BEFORE FIRST DELIM?
         BE    BADPGM2             NO
         BCTR  R3,0                YES - DISCOUNT DELIM FROM LENGTH
*  PARM EXHAUSTED BEFORE PGM NAME DELIMITER FOUND.
PGMONLY1 CH    R3,=H'8'            PGM NAME TOO LONG?
         BH    BADPGM              YES
         LR    R7,R3
         BCTR  R7,0
         EX    R7,MOVEPGM          SAVE PGM NAME
         B     DUMMYSYS
EXTRT    TRT   0(0,R4),TRTAB       ***EXECUTE ONLY***
MOVEPGM  MVC   PGMNAME(0),0(R4)    ***EXECUTE ONLY***
BADPGM   PUT   MSGES,MSG2          PRINT 'PROGRAM NAME > 8 BYTES'
         B     CLOSEMSG
BADPGM2  PUT   MSGES,MSG5          PRINT 'NO PGM NAME IN PARM'
         B     CLOSEMSG
*  SINCE PARM VALUE IS NOW EXHAUSTED AND NO SYSIN RECORDS ARE IN THE
*  PARM, DYNAMICALLY ALLOCATE AND OPEN SYSIN SO THAT A CORRECTLY
*  OPENED AND CLOSED EMPTY FILE IS PASSED TO THE INVOKED UTILITY.
DUMMYSYS BAL   R14,TESTPGM         GO TEST FOR EXCEPTIONAL PGM NAME.
         LA    R1,RB1PTR
         DYNALLOC
         LTR   R15,R15             DYNALLOC SUCCESFUL?
         BNZ   BADDYNAL            NO - GO PRINT ERROR MSG
         OPEN  (SYSIN,(OUTPUT))    YES - OPEN SYSIN
         B     LINK
*  EXAMINE REMAINDER OF PARM. IF NEXT PART BEGINS WITH 'PARM='
*  EXTRACT THE SUBPARM WHICH IS TO BE PASSED TO THE UTILITY.
GETREST  SR    R3,R8               LENGTH OF REMAINING PARM VALUE
         BCTR  R3,0                DISCOUNT PGM NAME DELIMITER
         LA    R4,1(R5)            POINT TO CHARACTER AFTER DELIMITER
         CH    R3,=H'5'            AT LEAST 5 CHARACTERS REMAINING?
         BL    DYNALLOC            NO - CANNOT BE 'PARM='
         CLC   0(5,R4),=C'PARM='
         BNE   DYNALLOC
         LA    R4,5(R4)            POINT PAST 'PARM='
         SH    R3,=H'5'            AND ADJUST REMAINING LENGTH
         LTR   R3,R3               ANY DATA FOLLOWING 'PARM=' ?
         BZ    DUMMYSYS            NO
         CLI   0(R4),C''''         YES - DOES IT BEGIN WITH QUOTE?
         BNE   SUBVALUE                  NO
         LA    R4,1(R4)                  YES - POINT PAST QUOTE
         BCTR  R3,0                           AND ADJUST LENGTH.
         LTR   R3,R3               ANY DATA FOLLOWING QUOTE?
         BZ    DUMMYSYS            NO
SUBVALUE LR    R7,R3
         BCTR  R7,0                SUBTRACT 1 FOR EXECUTE LENGTH
         EX    R7,EXTRT            SCAN FOR DELIMITER
         BC    8,SUBONLY1          PARM EXHAUSTED BEFORE DELIM FOUND
         BC    2,SUBONLY           DELIM FOUND IN LAST BYTE OF PARM
*  DELIMITER FOUND WITH MORE DATA FOLLOWING - EXTRACT SUBPARM VALUE.
         LR    R5,R1               SAVE ADDRESS OF DELIMITER
         SR    R1,R4               GET LENGTH OF SUBPARM VALUE
         LR    R8,R1               SAVE LENGTH OF SUBPARM
         LTR   R1,R1               SUBPARM LENGTH = 0?
         BZ    POINTON             YES
*  IF 1ST CHARACTER OF SUBPARM IS A QUOTE, IGNORE IT AND CLOSING
*  QUOTE (IF PRESENT).
         LR    R7,R4
         BCTR  R7,0                POINT TO CHAR BEFORE SUBPARM VALUE
         CLI   0(R7),C''''         IS IT A QUOTE
         BNE   SUBSAVE             NO
         LR    R7,R5               YES
         BCTR  R7,0                POINT TO LAST CHAR OF SUBPARM
         CLI   0(R7),C''''         IS THAT A QUOTE TOO?
         BNE   SUBSAVE             NO
         BCTR  R1,0                YES - ADJUST LENGTH TO IGNORE IT
         LTR   R1,R1               ANY DATA BETWEEN QUOTES?
         BZ    POINTON             NO
SUBSAVE  STH   R1,SUBLEN           STORE PARM LENGTH FOR UTILITY
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE LENGTH
         EX    R1,MOVESUB          STORE SUBPARM VALUE FOR UTILITY
POINTON  SR    R3,R8               GET LENGTH OF REMAINING PARM
         BCTR  R3,0                DISCOUNT SUBPARM DELIMITER
         LA    R4,1(R5)            POINT TO CHAR AFTER DELIMITER.
         B     DYNALLOC
*  SUBPARM DELIMITER FOUND AT LAST BYTE OF PARM
SUBONLY  CR    R1,R4               ANY DATA BETWEEN 'PARM=' AND DELIM?
         BE    DUMMYSYS            NO
         BCTR  R3,0                YES - DISCOUNT DELIMITER FROM LENGTH
*  PARM EXHAUSTED BEFORE SUBPARM DELIMITER FOUND.
SUBONLY1 LR    R7,R4
         BCTR  R7,0                POINT TO CHAR BEFORE SUBPARM VALUE
         CLI   0(R7),C''''         IS IT A QUOTE?
         BNE   SUBONSAV            NO
         LA    R7,0(R4,R3)         CALCULATE ADDRESS OF LAST
         BCTR  R7,0                BYTE OF SUBPARM VALUE.
         CLI   0(R7),C''''         IS THAT A QUOTE TOO?
         BNE   SUBONSAV            NO
         BCTR  R3,0                YES - DISCOUNT IT FROM LENGTH
         LTR   R3,R3               ANY DATA BETWEEN QUOTES?
         BZ    DUMMYSYS            NO
SUBONSAV STH   R3,SUBLEN           STORE SUBPARM LENGTH FOR UTILITY
         BCTR  R3,0                SUBTRACT 1 FOR EXECUTE LENGTH
         EX    R3,MOVESUB          STORE SUBPARM VALUE FOR UTILITY
         B     DUMMYSYS
MOVESUB  MVC   SUBLEN+2(0),0(R4)   ***EXECUTE ONLY***
*  DYNAMIC ALLOCATION OF SYSIN (USED AS OUTPUT DSET BY THIS PROGRAM)
DYNALLOC BAL   R14,TESTPGM         GO TEST FOR EXCEPTIONAL PGM NAME.
         LA    R1,RB1PTR           POINT TO REQUEST BLOCK.
         DYNALLOC
         LTR   R15,R15             DYNAMIC ALLOCATION SUCCESSFUL?
         BZ    GETSYSIN            YES - GO GET SYSIN RECORDS FROM PARM
BADDYNAL ST    R15,FWORD           NO - PRINT ERROR MESSAGE
         UNPK  BUFFER(9),FWORD(5)               CONVERT RETURN
         NC    BUFFER(8),=X'0F0F0F0F0F0F0F0F'   CODE TO
         TR    BUFFER(8),=C'0123456789ABCDEF'   PRINTABLE CHARS
         MVC   MSG4+50(2),BUFFER+6
         UNPK  BUFFER(5),RB1+4(3)               CONVERT ERROR
         NC    BUFFER(4),=X'0F0F0F0F'           REASON CODE TO
         TR    BUFFER(4),=C'0123456789ABCDEF'   PRINTABLE CHARS
         MVC   MSG4+72(4),BUFFER
         PUT   MSGES,MSG4
         B     CLOSEMSG
*  OPEN SYSIN AND EXTRACT SYSIN RECORDS FROM INPUT PARM AND WRITE THEM
*  TO SYSIN FOR PROCESSING BY UTILITY.
GETSYSIN OPEN  (SYSIN,(OUTPUT))
SYSLOOP  MVI   BUFFER,C' '              BLANK OUTPUT AREA
         MVC   BUFFER+1(79),BUFFER
         LR    R7,R3               PICK UP LENGTH OF REMAINING PARM
         BCTR  R7,0                SUBTRACT 1 FOR EXECUTE LENGTH
         EX    R7,EXTRT            SCAN FOR NEXT DELIMITER
         BC    8,SYSLAST1          PARM EXHAUSTED BEFORE DELIM FOUND
         BC    2,SYSLAST           DELIMITER FOUND IN LAST BYTE OF PARM
*  DELIMITER FOUND WITH MORE DATA FOLLOWING - EXTRACT A SYSIN RECORD
         LR    R5,R1               SAVE ADDRESS OF DELIMITER
         SR    R1,R4               LENGTH OF DATA BETWEEN DELIMS
         LR    R8,R1               SAVE LENGTH OF DATA
         LTR   R8,R8               ANY DATA BETWEEN DELIMS
         BZ    SYSNEXT             NO
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTE LENGTH
         LTR   R1,R1               ONLY SINGLE CHAR BETWEEN DELIMS?
         BNZ   SYSWRITE            NO
         CLI   0(R4),C','          YES - IS IT A COMMA?
         BE    SYSNEXT                   YES - IGNORE
SYSWRITE CH    R1,=H'79'           IS DATA > 80 BYTES LONG
         BNH   SYSMOVE             NO
         LA    R1,79               YES - ONLY USE 1ST 80 BYTES
SYSMOVE  EX    R1,MOVEDATA         MOVE DATA TO O/P RECORD
         PUT   SYSIN,BUFFER        WRITE SYSIN RECORD
SYSNEXT  SR    R3,R8               LENGTH OF REMAINING PARM
         BCTR  R3,0                DISCOUNT PREVIOUS DELIMITER
         LA    R4,1(R5)            POINT TO NEXT CHAR AFTER DELIM
         B     SYSLOOP
MOVEDATA MVC   BUFFER(0),0(R4)     ***EXECUTE ONLY***
*  DELIMITER FOUND IN LAST BYTE OF PARM
SYSLAST  LTR   R7,R7               ANY DATA BETWEEN DELIMS?
         BZ    LINK                NO
         BCTR  R7,0                YES - DISCOUNT DELIMITER
*  PARM EXHAUSTED BEFORE DELIMITER FOUND
SYSLAST1 LTR   R7,R7            IS FINAL SYSIN RECORD ONLY 1 BYTE LONG?
         BNZ   SYSLAWRI            NO
         CLI   0(R4),C','          YES - IS IT A COMMA?
         BE    LINK                YES - IGNORE
SYSLAWRI CH    R7,=H'79'           IS FINAL RECORD > 80 BYTES LONG?
         BNH   SYSLAMOV            NO
         LA    R7,79               YES - ONLY USE 1ST 80 BYTES
SYSLAMOV EX    R7,MOVEDATA         MOVE FINAL RECORD TO O/P AREA
         PUT   SYSIN,BUFFER        WRITE FINAL SYSIN RECORD
*  LINK TO UTILITY PROGRAM AFTER CLOSING MSGES AND SYSIN.
LINK     CLOSE SYSIN
         CLOSE MSGES
         LINK  EPLOC=PGMNAME,PARAM=(SUBLEN),VL=1
         ST    R15,RETCODE
*  DYNAMIC UNALLOCATION OF SYSIN
         LA    R1,RB3PTR           POINT TO REQUEST BLOCK
         DYNALLOC
RETURN   L     R13,4(R13)          LOAD HIGH SAVE AREA ADDRESS
         L     R14,12(R13)         LOAD RETURN ADDRESS.
         MVI   12(R13),X'FF'       LEAVE EXIT TRACE.
         L     R15,RETCODE         LOAD RETURN CODE.
         LM    R0,R12,20(R13)      RESTORE REGISTERS.
         BR    R14                 RETURN.
*  ROUTINE TO TEST INVOKED PGM NAME AND MODIFY DDNAME IN DYNALLOC TEXT
*  UNITS AND DCB TO WHATEVER IS WANTED INSTEAD OF SYSIN.
TESTPGM  ST    R14,TESTSAVE
         CLC   PGMNAME,=C'MARKIV  '    IS PGM NAME MARKIV?
         BNE   LETEST1                 NO
         MVC   TU1+4(2),=H'7'          MODIFY DYNALLOC TEXT UNIT
         MVC   TU1+6(7),=C'M4INPUT'
         MVC   UNTU1+4(2),=H'7'        MODIFY DYN UNALLOC TEXT UNIT
         MVC   UNTU1+6(7),=C'M4INPUT'
         MVC   SYSIN+40(7),=C'M4INPUT' MODIFY DDNAME IN DCB
         B     TESTRET
LETEST1  CLC   PGMNAME,=C'LINKEDIT'    IS PGMNAME LINKEDIT
         BE    LEMOD1                  OR ANY OF ITS ALIASES?
         CLC   PGMNAME,=C'IEWL    '
         BE    LEMOD1
         CLC   PGMNAME,=C'HEWL    '
         BNE   TESTRET
LEMOD1   MVC   TU1+4(2),=H'6'          MODIFY DYNALLOC TEXT UNIT
         MVC   TU1+6(6),=C'SYSLIN'
         MVC   UNTU1+4(2),=H'6'        MODIFY DYN UNALLOC TEXT UNIT
         MVC   UNTU1+6(6),=C'SYSLIN'
         MVC   SYSIN+40(6),=C'SYSLIN'  MODIFY DDNAME IN DCB
TESTRET  L     R14,TESTSAVE
         BR    R14
TESTSAVE DS    F
MSGES    DCB   DSORG=PS,MACRF=PM,DDNAME=MSGES,LRECL=133,               X
               BLKSIZE=133,RECFM=FM
SYSIN    DCB   DSORG=PS,MACRF=PM,DDNAME=SYSIN DCB SUPPLIED VIA DYNALLOC
         LTORG
RETCODE  DC    F'0'
FWORD    DS    F
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DS    0F    THESE 2 STATEMENTS PROVIDE ALIGNMENT FOR SUBLEN  *
         DS    H     WHICH MUST NOT START ON A FULLWORD BOUNDARY.     *
SUBLEN   DC    H'0'    LENGTH OF PARM FIELD TO BE PASSED TO UTILITY   *
         DS    CL100   PARM VALUE TO BE PASSED TO UTILITY             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
PGMNAME  DC    CL8' '
BUFFER   DC    CL80' '
*  TRANSLATE AND TEST TABLE TO FIND DELIMITER IN PARM FIELD
*                        <             >
TRTAB    DC    76X'00',X'01',33X'00',X'01',145X'00'
*  ERROR MESSAGES
MSG1     DS    0CL133
         DC    X'09'
         DC    CL132'SUYLINK - PARM FIELD MISSING FROM EXEC CARD'
MSG2     DS    0CL133
         DC    X'09'
         DC    CL132'SUYLINK - PROGRAM NAME IN PARM LONGER THAN 8 CHARAX
               CTERS OR DELIMITER MISSING'
MSG4     DS    0CL133
         DC    X'09'
         DC    CL132'SUYLINK - DYNAMIC ALLOCATION OF SYSIN FAILED, RC=XC
               X, ERROR REASON CODE=XXXX'
MSG5     DS    0CL133
         DC    X'09'
         DC    CL132'SUYLINK - NO PROGRAM NAME SPECIFIED IN PARM FIELD'
* SYSIN DYNAMIC ALLOCATION REQUEST BLOCK AND TEXT UNITS
         DS    0F
RB1PTR   DC    X'80',AL3(RB1)
         DS    0F
RB1      DC    X'1401',3H'0',A(TUPTR1),2F'0'
         DS    0F
TUPTR1   DC    A(TU1),A(TU4),A(TU5),A(TU6),A(TU7),A(TUA),A(TU15)
         DC    A(TU30),A(TU42),X'80',AL3(TU49)
         DS    0H
TU1      DC    X'0001',X'0001',H'5',CL8'SYSIN'  DDNAME ALLOCATION
         DS    0H
TU4      DC    X'0004',X'0001',H'1',X'04'       DISP=(NEW,
         DS    0H
TU5      DC    X'0005',X'0001',H'1',X'04'             DELETE,
         DS    0H
TU6      DC    X'0006',X'0001',H'1',X'04'             DELETE)
         DS    0H
TU7      DC    X'0007',X'0000'                  SPACE=(TRK,
         DS    0H
TUA      DC    X'000A',X'0001',H'3',X'000001'          1)
         DS    0H
TU15     DC    X'0015',X'0001',H'5',CL5'SYSDA'  UNIT=SYSDA
         DS    0H
TU30     DC    X'0030',X'0001',H'2',H'800'      DCB=(BLKSIZE=800,
         DS    0H
TU42     DC    X'0042',X'0001',H'2',H'80'            LRECL=80,
         DS    0H
TU49     DC    X'0049',X'0001',H'1',X'90'            RECFM=FB)
*  MSGES DYNAMIC ALLOCATION REQUEST BLOCK AND TEXT UNITS
         DS    0F
RB2PTR   DC    X'80',AL3(RB2)
         DS    0F
RB2      DC    X'1401',3H'0',A(TUPTR2),2F'0'
         DS    0F
TUPTR2   DC    A(TU1A),X'80',AL3(TU18)
         DS    0H
TU1A     DC    X'0001',X'0001',H'5',CL5'MSGES'   DDNAME ALLOCATION
         DS    0H
TU18     DC    X'0018',X'0000'                   SYSOUT=* (IE MSGCLASS)
* REQUEST BLOCK AND TEXT UNIT FOR SYSIN DYNAMIC UNALLOCATION
         DS    0F
RB3PTR   DC    X'80',AL3(RB3)
         DS    0F
RB3      DC    X'1402',3H'0',A(UNALLTU),2F'0'
         DS    0F
UNALLTU  DC    X'80',AL3(UNTU1)
         DS    0H
UNTU1    DC    X'0001',X'0001',H'5',CL8'SYSIN'
         END


John Gray
Systems Programmer
ICI PLC (UK)   € ICI PLC 1988



