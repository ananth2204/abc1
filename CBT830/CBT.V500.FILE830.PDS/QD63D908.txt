An easy way of copying datasets

Often there is a need to copy a dataset to a different location or
to simply create a new dataset with the same characteristics as
another. We use MVS/SP with ISPF as many sites do.
Normally, when you want to perform such a copy, you use
ISPF 3.4 to do an inquiry on the original dataset. Next, you use
ISPF 3.2 to allocate the new dataset like the old one and, after
allocating, you use 3.3 to copy the contents.

The following CLIST, PANEL, and HELP information does it
all. SVCOPY can be used from the Dataset List Utility panel
(ISPF 3.4) as a simple line command. It certainly makes our
job easier.


CLIST SVCOPY

PROC 1 &DIRT
CONTROL NOFLUSH NOMSG
ISPEXEC CONTROL DISPLAY REFRESH SPLIT ENABLE
SET &SVRC   = 0
SET &SVSM   =
SET &SVLM   =
SET &SVEMPT =
SET &SVMESS =
SET &SVNEWD =
SET &SVDELO = NO
ISPEXEC VGET (ZDLDSN) SHARED
IF &DIRT ¬= '&ZDLDSN' THEN +
   DO
    SET &ZDLMSG =
    SET &SVLM = Not correctly started, sorry ....
    SET &SVRC = 99
    GOTO OUT
   END
LISTDSI '&ZDLDSN' DIRECTORY
SET &SVRC = &LASTCC
IF &SVRC ¬= 0 THEN +
   DO
    SET &ZDLMSG = LISTDSI errors!
    SET &SVLM = LISTDSI error RC &SVRC, &SYSMSGLVL1
    GOTO OUT
   END
SET &SVOLDD = &SYSDSNAME
SET &SVVOLU = &SYSVOLUME
SET &SVSPAC = &SYSUNITS
SET &SVPRIM = &SYSPRIMARY
SET &SVSECO = &SYSSECONDS
SET &SVDIRB = &SYSADIRBLK
SET &SVRECF = &SYSRECFM
SET &SVLREC = &SYSLRECL
SET &SVBLKS = &SYSBLKSIZE
SET &SVRACF = &SYSRACFA
IF &SYSEXDATE = 0 THEN +
     SET &SVEXDA =
ELSE SET &SVEXDA = &SUBSTR(3:4,&SYSEXDATE)&SUBSTR(6:8,&SYSEXDATE)
IF &SYSUSED = 0 OR &SYSMEMBERS = 0 THEN +
   DO
     SET &SVEMPT = EMPTY
     SET &SVMESS = Dataset is EMPTY, only allocation is done!
   END
ISPEXEC DISPLAY PANEL(SVCOPY)
SET &SVRC = &LASTCC
IF &SVRC ¬= 0 THEN +
   DO
    SET &ZDLMSG =
    SET &SVRC = 0
    SET &SVLM = SVCOPY no action taken (PF3).
    GOTO OUT
   END
SET &FC = 0
DO WHILE &RFC < &LENGTH(&SVRECF)
   SET &RFC = &RFC + 1
   SET &RF  = &RF &SUBSTR(&RFC:&RFC,&SVRECF)
END
IF (&SVVOLU  ¬= ) THEN +
     SET &OVERR = &OVERR VOLUME(&SVVOLU)
IF (&SVPRIM  ¬= ) THEN +
     SET &OVERR = &OVERR SPACE(&SVPRIM,&SVSECO)
IF (&SVBLKS  ¬= ) THEN +
     SET &OVERR = &OVERR BLKSIZE(&SVBLKS)
ELSE SET &OVERR = &OVERR &SVSPAC
IF (&SVDIRB  ¬= ) THEN +
     SET &OVERR = &OVERR DIR(&SVDIRB)
IF (&SVUNIT  ¬= ) THEN +
     SET &OVERR = &OVERR UNIT(&SVUNIT)
ELSE SET &OVERR = &OVERR UNIT(3380)
IF (&SVLREC  ¬= ) THEN +
     SET &OVERR = &OVERR LRECL(&SVLREC)
IF (&RF      ¬= ) THEN +
     SET &OVERR = &OVERR RECFM(&RF)
IF (&SYSEXDATE > 0 AND &SVEXDA = 0) THEN +
     SET &SVEXDA = 80001
IF (&SVEXDA ¬= 0) THEN +
     SET &OVERR = &OVERR EXPDT(&SVEXDA)
ALLOC FI(DDOUT) DA('&SVNEWD') LIKE('&SVOLDD') &OVERR NEW REUSE CATALOG
SET &SVRC = &LASTCC
IF &SVRC ¬= 0 THEN +
   DO
    SET &ZDLMSG = Alloc errors!
    SET &SVLM = Allocation error for file &SVNEWD, RC is &SVRC.
    GOTO OUT
   END
IF &SVEMPT = EMPTY THEN +
   GOTO DELOPT
IF (&SYSUDIRBLK = ) THEN +
     SET &FROMMEM =
ELSE SET &FROMMEM = &STR(FROMMEM(*))
ISPEXEC LMINIT DATAID(IDI) DATASET('&SVOLDD') ENQ(SHR)
ISPEXEC LMINIT DATAID(IDO) DATASET('&SVNEWD') DDNAME(DDOUT) ENQ(EXCLU)
ISPEXEC LMCOPY FROMID(&IDI) TODATAID(&IDO) &FROMMEM TRUNC
SET &SVRC = &LASTCC
ISPEXEC LMFREE DATAID(&IDI)
ISPEXEC LMFREE DATAID(&IDO)
IF &SVRC ¬= 0 THEN +
   DO
    SET &ZDLMSG = Copy errors!
    SET &SVLM = LMCOPY error, RC is &SVRC
    GOTO OUT
   END
DELOPT: +
IF &SVDELO = NO THEN +
   GOTO COPYOK
DELETE '&SVOLDD'
SET &SVRC = &LASTCC
IF &SVRC ¬= 0 THEN +
   DO
    SET &ZDLMSG = Not deleted!
    SET &SVLM = DELETE &SVOLDD not possible, RC is &SVRC
    GOTO OUT
   END
SET &ZDLNDSN = !!! DELETED !!!
ISPEXEC VPUT (ZDLNDSN) SHARED
COPYOK: +
SET &ZDLMSG  = New DS created
SET &SVLM    = SVCOPY has created &SVNEWD
OUT: +
FREE FI(DDOUT)
SET &SVSM = SVCOPY ... RC &SVRC
ISPEXEC VPUT (ZDLMSG) SHARED
ISPEXEC SETMSG MSG(SVCOP003)
END


SVCOPY PANEL

)BODY
%----------------  ALLOCATE NEW DATA SET WITH SVCOPY  -----------------+
+
+Old dataset:+&SVOLDD                                     +
+RACF prot. :+&SVRACF
+New dataset:_SVNEWD                                      +
+
+   Volume serial     %===>_SVVOLU+     (Blank for default volume)
+   Generic unit      %===>_SVUNIT  +   (Generic group or unit address)
+   Space units       %===>_SVSPAC    + (BLKS, TRKS, or CYLS)
+   Primary quantity  %===>_SVPRIM+     (In above units)
+   Secondary quantity%===>_SVSECO+     (In above units)
+   Directory blocks  %===>_SVDIRB+     (Zero for sequential data set)
+   Record format     %===>_SVRECF+
+   Record length     %===>_SVLREC +
+   Block size        %===>_SVBLKS+
+   Expiration date   %===>_Z    +      (YYDDD)
+
+   Delete OLD Dataset%===>_Z  +        (YES or NO)
+
+
%   &SVMESS        +
)INIT
 .CURSOR = SVNEWD
 .ZVARS  = '(SVEXDA SVDELO)'
 &SVUNIT = ' '
)PROC
 &SVDIRB = TRANS (&SVDIRB ' ',0 *,*)
 &SVLREC = TRANS (&SVLREC ' ',0 *,*)
 &SVBLKS = TRANS (&SVBLKS ' ',0 *,*)
 &SVEXDA = TRANS (&SVEXDA ' ',0 *,*)
 VER (&SVNEWD,NB,DSNAME)
 IF  (&SVVOLU ¬= ' ')
   IF  (&SVUNIT ¬= ' ')
       .MSG = SVCOP001
 &SVSPAC = TRANS (&SVSPAC
        C,CYLINDER CYL,CYLINDER CYLS,CYLINDER
        CYLINDER,CYLINDER CYLINDERS,CYLINDER
        T,TRACK TRK,TRACK TRKS,TRACK TRACK,TRACK TRACKS,TRACK
        B,BLOCK BLK,BLOCK BLKS,BLOCK BLOCK,BLOCK BLOCKS,BLOCK
        MSG=SVCOP002)
 VER (&SVDIRB,NUM)
 VER (&SVPRIM,NUM)
 VER (&SVSECO,NUM)
 VER (&SVLREC,RANGE,0,32760)
 VER (&SVBLKS,RANGE,1,32760)
 VER (&SVEXDA,RANGE,0,99365)
)END


SVCOP00 MESSAGE MEMBER

SVCOP001 'CONFLICTING PARAMETERS' .ALARM=YES
'GENERIC UNIT MUST BE BLANK IF VOLUME SERIAL IS SPECIFIED.'

SVCOP002 'INVALID SPACE UNITS'    .ALARM=YES
'MUST BE TRKS, BLKS OR CYLS.'

SVCOP003 '&SVSM'                  .ALARM=YES
'&SVLM'


A A J Weesenaar
Systems Programmer (The Netherlands)                  c Xephon 1992

