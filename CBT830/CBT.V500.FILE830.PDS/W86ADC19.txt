Date and time of the last IPL

Often when looking into a problem a systems programmer needs
to know the time the last IPL was done.  The code of the
accompanying program lists this information.  The code is in the
form of a batch program, as first developed and tested, but it has
been adapted in our shop to be executable from a ROSCOE terminal
(by incorporating it into a ROSCOE monitor program), and we are
now looking to adapt the code for use from a TSO terminal.

The typical display that the batch version will generate on the
print file is shown in the comments at the beginning of the
program.  Besides the date and time of the last IPL, the release
number of the operating system, the model and serial numbers of
the processor, and the size of the region below the line are shown.
This last bit of information may be of some interest if there have
been any recent changes in the contents of the LPALIB or if the
size of the CSA has been increased.

The source code of the program has several useful subroutines of
general utility.  The subroutine SMF@DAY will return the day of
the week corresponding to any given 20th or 21st century Julian
date falling between 1926 and 2025.  Subroutine HEX@PRT may
be used to convert any 4-byte hexadecimal field to 8 bytes of
EBCDIC data suitable for display or printing.


IPLINFO    TITLE '**** PROGRAM DISPLAYS DATE && TIME OF LAST IPL ****'
IPLINFO    CSECT ,
* The following 15 lines typify the display generated by the code
* of this program:
* >
* >      Date & Time of last IPL:  MONDAY, 07-NOV-88, 06:50:15
* >
* >      MVS/XA Rel SP2.2.0  FMID JBB2220
* >      CPU 1, Serial# 123456, Model 3090
* >
* >      PRIVATE REGION INFORMATION:
* >
* >              Address below the Line:   00005000
* >              Address above the Line:   02100000
* >
* >              REGION size below the Line:   11,513,856
* >              REGION size above the Line: 2112,880,640
* >
* >               Total Private REGION Size: 2124,394,496
*
*  The use of 'VSMREGN' macro requires this program to be assembled
*  by ASSEMBLER H.
LETSGO   DS    0H
         LCLC  &IDNAME                 FOR THIS CSECT'S ID TAG
         LCLC  &DATE6,&TIME4           FOR DATE & TIME OF
ASSEMBLY
&DATE6   SETC  '&SYSDATE'(1,2).'&SYSDATE'(4,2).'&SYSDATE'(7,2)
&TIME4   SETC  '&SYSTIME'(1,2).'&SYSTIME'(4,2)
&IDNAME  SETC  'IPLINFO/&DATE6/&TIME4'          PUT TOGETHER STD. ID
         SAVE  (14,12),,&IDNAME
         LR    R12,R15                 ESTABLISH R12 AS THE BASE REG
         USING IPLINFO,R12
         LR    R11,R13                 HOLD C(R13) IN R11
         LA    R13,SAVE18F
         ST    R13,8(R11)              FORWARD CHAIN
         ST    R11,SAVE18F+4           BACKWARD CHAIN
         OPEN  (PRNTFLE,OUTPUT)        SET UP DISPLAY MEDIUM
BEGIN    L     R2,CVTPTR               GET A(CVT) FROM LOCATION 16
         USING CVTMAP,R2
         L     R9,CVTSMCA              POINT R9 TO
         USING SMCABASE,R9               SMF CONTROL AREA
         DROP  R2
         MVC   SM@DATE,SMCAIDTE        IPL DATE AS XL4'00YYDDDF'
         BAL   R2,SMF@DAY              GET CORRESPONDING DAY OF WEEK
         MVC   W#IPLDAY(9),SM@DAY
         LA    R3,W#IPLDAY+8           LOOK FOR END OF DAY NAME
IPL#INF2 CLI   0(R3),C' '
         BH    IPL#INF3
         BCT   R3,IPL#INF2
IPL#INF3 MVI   1(R3),C','              DELIMIT DAY OF WEEK FIELD
         MVC   SM@DATE,SMCAIDTE        IPL DATE AS XL4'00YYDDDF'
         BAL   R2,SMF@DTE              CONVERT TO GREGORIAN DATE
         MVC   3(2,R3),SM@DMY          SM@DMY HAS DDMMYY VALUE
         MVI   5(R3),C'-'
         PACK  W#DBLWRD,SM@DMY+2(2)    2 DIGIT MM VALUE OF DATE
         CVB   R1,W#DBLWRD
         BCTR  R1,0
         MH    R1,=H'03'               EACH TABLE ENTRY IS 3 BYTES
         LA    R2,MNTHTBL(R1)
         MVC   6(3,R3),0(R2)           3 LETTER MONTH NAME
         MVI   9(R3),C'-'
         MVC   10(2,R3),SM@DMY+4       YY VALUE OF DATE
         MVI   12(R3),C','
         MVC   SM@TIME,SMCAITME        IPL TIME IN CENTISECONDS
         BAL   R2,SMF@TME              GET TIME IN HHMMSS FORMAT
         MVC   14(2,R3),SM@HMS         2 DIGIT HH VALUE
         MVI   16(R3),C':'
         MVC   17(2,R3),SM@HMS+2
         MVI   19(R3),C':'
         MVC   20(2,R3),SM@HMS+4       COMPLETE IPL TIME INFO
         DROP  R9
         BAL   R2,PRT@LNE              WE'LL SKIP LINE-01
         MVC   MSG#TXT(L'C#IPLHDR),C#IPLHDR
         MVC   MSG#TXT+L'C#IPLHDR+2(L'W#IPLDAY),W#IPLDAY
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
* IPL TIME INFO SHOWN, NOW GET INFO ABOUT OS & PROCESSOR(S)
         BAL   R2,GET@CPU              MVS VERSION & CPU ID
         MVI   MSG#CTL,C'0'            SKIP 1 LINE
         MVC   MSG#TXT(L'WK@OSINF),WK@OSINF
         BAL   R2,PRT@LNE              OS REL# & FMID
         MVC   MSG#TXT(5),=CL5'CPU 1'
         MVC   MSG#TXT+5(10),=CL10', Serial#'
         MVC   MSG#TXT+15(6),WK@CPU$1+2   6-DIGIT SERIAL NO.
         MVC   MSG#TXT+21(8),=CL8', Model '
         MVC   MSG#TXT+29(4),WK@CPU$1+8   4-BYTE MODEL NO.
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
         CLI   WK@CPU$2+2,X'FF'        2ND ENTRY UNUSED?
         BE    IPL#INF5                IF YES, ONLY 1 CPU
         MVC   MSG#TXT(5),=CL5'CPU 2'
         MVC   MSG#TXT+5(10),=CL10', Serial# '
         MVC   MSG#TXT+15(6),WK@CPU$2+2   6-DIGIT SERIAL NO.
         MVC   MSG#TXT+21(8),=CL8', Model '
         MVC   MSG#TXT+29(4),WK@CPU$2+8    4-BYTE MODEL NO.
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
* IPL DATE & TIME, OS REL#, AND CPU SERIAL# PROCESSED.
* NOW LET'S GET PRIVATE REGION SIZE.
IPL#INF5 LA    R2,WK@WRDS4             GET ADDR & SIZE INFO
         VSMREGN WKAREA=(2)              ABOUT THE PRIVATE REGION
         MVI   MSG#CTL,C'0'            SKIP 1 LINE
         MVC   MSG#TXT(L'C#RGNHDR),C#RGNHDR
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
         MVI   MSG#CTL,C'0'            SKIP 1 LINE
         MVC   MSG#TXT+8(L'C#ADRBTL),C#ADRBTL
         MVC   WK@BIN4,WK@WRDS4        BELOW-LINE REGION ADDR
         BAL   R2,HEX@PRT              MAKE HEX DATA PRINTABLE
         MVC   MSG#TXT+10+L'C#ADRBTL(8),WK@CHR8
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
         MVC   MSG#TXT+8(L'C#ADRATL),C#ADRATL
         MVC   WK@BIN4,WK@WRDS4+8      ABOVE-LINE REGION ADDR
         BAL   R2,HEX@PRT              MAKE HEX DATA PRINTABLE
         MVC   MSG#TXT+10+L'C#ADRATL(8),WK@CHR8
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
         MVI   MSG#CTL,C'0'            SKIP 1 LINE
         MVC   MSG#TXT+8(L'C#RSZBTL),C#RSZBTL
         L     R2,WK@WRDS4+4           BELOW-LINE REGION SIZE
         CVD   R2,W#DBLWRD
         MVC   WK@CHR14,EDTPK6
         ED    WK@CHR14,W#DBLWRD+2
         MVC   MSG#TXT+8+L'C#RSZBTL(13),WK@CHR14+1
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
         MVC   MSG#TXT+8(L'C#RSZATL),C#RSZATL
         L     R2,WK@WRDS4+12          ABOVE-LINE REGION SIZE
         CVD   R2,W#DBLWRD
         MVC   WK@CHR14,EDTPK6
         ED    WK@CHR14,W#DBLWRD+2
         MVC   MSG#TXT+8+L'C#RSZATL(13),WK@CHR14+1
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
         MVI   MSG#CTL,C'0'            SKIP 1 LINE
         MVC   MSG#TXT+9(L'C#RSZTOT),C#RSZTOT
         L     R2,WK@WRDS4+4           BELOW-LINE REGION SIZE
         A     R2,WK@WRDS4+12          ABOVE-LINE REGION SIZE
         CVD   R2,W#DBLWRD
         MVC   WK@CHR14,EDTPK6
         ED    WK@CHR14,W#DBLWRD+2
         MVC   MSG#TXT+9+L'C#RSZTOT(13),WK@CHR14+1
         BAL   R2,PRT@LNE              DISPLAY TEXT LINE
EOJPOINT CLOSE PRNTFLE
         L     R13,SAVE18F+4           RESTORE ENTRY TIME VALU IN R13
         RETURN (14,12),,RC=0          EXIT WITH RETRN CODE OF 0
C#IPLHDR DC    C'Date && Time of last IPL:'
C#RGNHDR DC    C'PRIVATE REGION INFORMATION:'
C#ADRBTL DC    C'Address below the Line:'
C#ADRATL DC    C'Address above the Line:'
C#RSZBTL DC    C'REGION size below the Line:'
C#RSZATL DC    C'REGION size above the Line:'
C#RSZTOT DC    C'Total Private REGION Size:'
EDTPK6   DC    XL14'4020202020206B2120206B202020'
SAVE18F  DC    18F'0'                  THIS PROGRAM'S SAVE AREA
PRNTFLE  DCB   DSORG=PS,MACRF=(PM),                                    X
               RECFM=FBA,LRECL=80,BLKSIZE=800,                         X
               DDNAME=OUTPRNT
MSG#DATA DS    0CL80               <== OUR "DISPLAY" LINE
MSG#CTL  DC    C'1'
MSG#TXT  DS    CL79' '
         LTORG
         TITLE ' ******  P E R F O R M E D  R O U T I N E S *****'
SMF@TME  DS    0H                  --- REFORMAT SMF TIME TO HHMMSS
* THIS SUBROUTINE CAN BE USED TO CONVERT THE CONTENTS OF A FULLWORD
* SMF TIME FIELD TO HHMMSS FORMAT PLACED IN A 6-BYTE FIELD.
* SUBROUTINE EXPECTS THE SMF TIME TO BE IN A FIELD CALLED 'SM@TIME',
* AND PLACES THE COMPUTED HHMMSS VALUE AT 'SM@HMS'
* NOTE:  CONTENTS OF R0  & R1 NOT SAVED ACROSS THIS CODE
         STM   R2,R5,SM@SVD4R          SAVE R2 THRU R5
         ICM   R1,B'1111',SM@TIME      TOD IN CENTISECONDS
         XR    R0,R0
         LA    R3,100
         DR    R0,R3                   R1 NOW HAS TOD IN SECS
         XR    R0,R0                   CLEAR OUT REMAINDER
         LA    R3,60                   LOAD DIVISOR INTO R3
         DR    R0,R3
         CVD   R0,SM@DBLW              SS VALUE FOR HHMMSS
         UNPK  SM@DBLW(2),SM@DBLW+6(2)
         OI    SM@DBLW+1,X'F0'
         MVC   SM@HMS+4(2),SM@DBLW
         XR    R0,R0                   CLEAR OUT REMAINDER
         DR    R0,R3                   DIVIDE MINUTES IN R1 BY 60
         CVD   R0,SM@DBLW              MM VALUE FOR HHMMSS
         UNPK  SM@DBLW(2),SM@DBLW+6(2)
         OI    SM@DBLW+1,X'F0'
         MVC   SM@HMS+2(2),SM@DBLW
         CVD   R1,SM@DBLW              HH VALUE FOR HHMMSS
         UNPK  SM@DBLW(2),SM@DBLW+6(2)
         OI    SM@DBLW+1,X'F0'
         MVC   SM@HMS(2),SM@DBLW
SMF@TME9 LM    R2,R5,SM@SVD4R          RESTORE R2 THRU R5
         BR    R2
SMF@DTE  DS    0H                  --- REFORMAT SMF DATE TO
DDMMYY
* THIS SUBROUTINE CAN BE USED TO CONVERT THE CONTENTS OF A FULLWORD
* SMF DATE FIELD TO DDMMYY FORMAT PLACED IN A 6-BYTE FIELD.
* SUBROUTINE EXPECTS THE SMF DATE, EXPRESSED AS X'00YYDDDF', TO BE
* IN A FIELD CALLED 'SM@DATE', AND PLACES THE COMPUTED DDMMYY VALUE
* AT 'SM@DMY'
* NOTE: CONTENTS OF R0 & R1 ARE NOT SAVED ACROSS THIS CODE
         STM   R2,R5,SM@SVD4R          SAVE R2 THRU R5
         UNPK  SM@WRK5,SM@DATE         X'00YYDDDF' TO C'YYDDD'
         MVC   SM@DMY+4(2),SM@WRK5
         PACK  SM@DBLW,SM@DMY+4(2)     CHECK WHETHER IT'S
         CVB   R1,SM@DBLW                A LEAP YEAR
         N     R1,SM@LPMSK             CHECK BITS 0 AND 1 TO BE ON
         BNZ   SMF@DTE2                C(R1)=0 IF A LEAP YEAR
         OI    SM@SWBYT,SM@LEAP#       IT'S A LEAP YEAR
SMF@DTE2 ZAP   SM@DBLW,SM@DATE+2(2)    INPUT DATE: X'DDDF'
         CVB   R1,SM@DBLW              R1 HAS DD VALUE NOW
         TM    SM@SWBYT,SM@LEAP#       IS IT A LEAP YEAR?
         BO    SMF@DTE3                IF YES, TABLE IS OK
         CH    R1,SM@DAYTB+4           2ND OPERAND IS H'60'
*                                      60 CAN BE FEB29 OR MAR01
*                                      59 IS ALWAYS FEB28
         BL    *+8
         LA    R1,1(R1)                MAKE A NON-LEAPYR ADJUSTMENT
SMF@DTE3 LA    R2,SM@DAYTB
         LA    R3,1                    INITIALISE MM VALUE AS 01
         LA    R4,12                   MAXIMUM MM VALUE
SMF@DTE4 CH    R1,2(R2)                2ND OPERAND STARTS WITH H'31'
         BL    SMF@DTE5
         LA    R3,1(R3)                INCREMENT MM VALUE
         LA    R2,2(R2)                NEXT ENTRY IN SM@DAYTB
         CR    R3,R4
         BNH   SMF@DTE4
         BCTR  R3,0                    USE MAX OF 12 IN R3
SMF@DTE5 SH    R1,0(R2)                COMPUTE DD VALUE
         CVD   R1,SM@DBLW
         UNPK  SM@DMY(2),SM@DBLW+6(2)
         OI    SM@DMY+1,X'F0'
         CVD   R3,SM@DBLW
         UNPK  SM@DMY+2(2),SM@DBLW+6(2)
         OI    SM@DMY+3,X'F0'
SMF@DTE9 LM    R2,R5,SM@SVD4R          RESTORE R2 THRU R5
         BR    R2
SMF@DAY  DS    0H                  --- GET DAY OF WEEK FOR AN SMF DATE
* THIS SUBROUTINE CAN BE USED TO OBTAIN THE DAY OF THE WEEK FOR A
* GIVEN SMF DATE.
* SUBROUTINE EXPECTS THE SMF DATE, EXPRESSED AS X'00YYDDDF', TO BE
* IN A FIELD CALLED 'SM@DATE', AND PLACES THE COMPUTED DAY IN A
* 9-BYTE FIELD CALLED 'SM@DAY'.  (TYPICAL VALUE RETURNED WOULD BE
* 'SUNDAY', 'MONDAY', 'TUESDAY', ETC.).
* NOTE: CONTENTS OF R0 & R1 ARE NOT SAVED ACROSS THIS CODE
         STM   R2,R5,SM@SVD4R          SAVE R2 THRU R5
         UNPK  SM@WRK5,SM@DATE         X'00YYDDDF' TO C'YYDDD'
         PACK  SM@DBLW,SM@WRK5(2)
         CVB   R1,SM@DBLW              YY VALUE NOW IN R1
         BCTR  R1,0                    COMPUTE (YY-1)
         LR    R3,R1                   SAVE (YY-1) ALSO IN R3
         SR    R0,R0
         LA    R2,4
         DR    R0,R2                   COMPUTE (YY-1)/4
* C(R1) NOW EQUALS NUMBER OF LEAP YEARS SINCE 1901
         MH    R3,=H'365'              DAYS SINCE 01-01-1901
         AR    R3,R1                   ADJST FOR INTERVENING LEAP YRS
         PACK  SM@DBLW,SM@WRK5+2(3)    CURRENT JULIAN DATE (DDD)
         CVB   R1,SM@DBLW
         BCTR  R1,0                    ELAPSED DAYS SINCE 01-01
         AR    R3,R1
* R3 NOW HAS NUMBR OF DAYS SINCE 01-01-1901, WHICH WAS A 'TUESDAY'
         XR    R2,R2
         LA    R1,7
         DR    R2,R1                   NUMBR OF EVEN WEEKS IN R3
         MH    R2,=H'09'               MULTIPLY REMNDR BY L'SM@DWKTB
         LA    R3,SM@DWKTB(R2)           TO OBTAIN OFFSET INTO TABLE
         MVC   SM@DAY,0(R3)            NOW PICK UP DAY OF WEEK
SMF@DAY9 LM    R2,R5,SM@SVD4R          RESTORE R2 THRU R5
         BR    R2
SM@LPMSK DC    F'03'                   ONLY 2 LOW-ORDER BITS ARE ON
SM@DAYTB DC    H'0,31,60,91,121,152,182,213,244,274,305,335,366'
SM@DWKTB DC    CL9'TUESDAY',CL9'WEDNESDAY',CL9'THURSDAY'
         DC    CL9'FRIDAY',CL9'SATURDAY',CL9'SUNDAY',CL9'MONDAY'
MNTHTBL  DC    CL36'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
GET@CPU  DS    0H                  --- GET OS & CPU INFORMATION
* THIS SUBROUTINE IS USED TO OBTAIN INFO ABOUT THE OPERATING
* SYSTEM AND THE PROCESSOR(S).
         STM   R2,R5,SM@SVD4R          SAVE R2 THRU R5
         L     R2,CVTPTR               GET A(CVT) FROM LOCATION 16
         USING CVTMAP,R2
         LR    R3,R2
         LA    R4,CVTMAP-CVTFIX
         SR    R3,R4                   POINT R3 TO CVT PREFIX
         USING CVTFIX,R3
         MVC   WK@OSINF,=CL11'MVS/-- Rel '
         TM    CVTDCB,CVTMVSE          ARE WE RUNNING XA?
         BZ    *+10                    IF NOT, SKIP XA LABEL
         MVC   WK@OSINF+4(2),=C'XA'
         MVC   WK@REL#,CVTPRODN        'SP2.2.0 '
         MVI   WK@FMHDR-1,C' '
         MVC   WK@FMHDR,=CL5'FMID '
         MVC   WK@FMID,CVTPRODI        'JBB2220 '
         DROP  R3
         MVI   WK@CPU$2+2,X'FF'        FLAG AN EMPTY ENTRY
         L     R3,CVTPCCAT             ADDR OF PHYSICAL CCA VECTR TBL
         DROP  R2
         LA    R2,WK@CPUTB             POINT R2 TO TARGET FLDS
         SR    R1,R1                   COUNT OF PROCESSORS FOUND
         LA    R14,16                  MAXM IN PCCAVT IS 16
GET@CPU2 L     R4,0(R3)                GET PTR TO PCCA IN R4
         USING PCCA,R4
         LTR   R4,R4                   GOOD ADDRESS?
         BZ    GET@CPU5                IF NOT, CHECK THE NEXT ONE
         MVC   0(L'WK@CPU$1,R2)PCCACPID
         LA    R1,1(R1)                COUNT OF ENTRIES PROCESSED
         CH    R1,H02                  EXIT IF INFO ABOUT
         BNL   GET@CPU9                 2 PROCESSORS ALREADY IN
         LA    R2,L'WK@CPU$1(R2)
GET@CPU5 AH    R3,H04
         BCT   R14,GET@CPU2
         DROP  R4
GET@CPU9 LM    R2,R5,SM@SVD4R          RESTORE R2 THRU R5
         BR    R2
HEX@PRT  DS    0H          --- FORMAT HEX DATA FOR CHARACTER DISPLAY
* THIS SUBROUTINE CAN BE USED TO OBTAIN CHARACTER FORMAT TRANSALATION
* OF A 4-BYTE BINARY FIELD.
* SUBROUTINE EXPECTS THE BINARY FIELD (WITH TYPICAL CONTENTS, SAY,
* OF XL4'1234BCDE') AT A LOCATION TAGGED AS WK@BIN4. THE 8-BYTE
* TRANSLATION RESULT WILL BE PLACED (AS CL8'1234BCDE') IN A
* FIELD CALLED WK@CHR8.
         STM   R2,R5,HX@SVD4R          SAVE R2 THRU R5
         MVO   WK@CHR8(5),WK@BIN4(4)   TO HI-ORDER 5 BYTES OF
         OI    WK@CHR8+4,X'0F'           THE RESULT FIELD
* in the following UNPK instruction, the beginning address of both
* operands must be same.  A preferred alternative would be to place
* the result of MVO in a 5-byte field, and then UNPK this 5-byte field
* into WK@CHR8.
         UNPK  WK@CHR8(8),WK@CHR8(5)
         TR    WK@CHR8(8),HX@TRTBL
HEX@PRT9 LM    R2,R5,HX@SVD4R          RESTORE R2 THRU R5
         BR    R2
HX@TRTBA DS    0H                  A TRANSLATION TABLE DESIGNED TO
         ORG   *-240               TRANSLATE ANY HEX BYTE IN THE RANGE
HX@TRTBL EQU   *                   X'F0' THRU X'FF' (X'F0' TO C'0',
         DS    CL240               X'FA' TO C'A', ETC)
         DC    CL16'0123456789ABCDEF'
PRT@LNE  DS    0H           --- DISPLAY MSG#TXT
         STM   R2,R5,SM@SVD4R          SAVE R2 THRU R5
         PUT   PRNTFLE,MSG#DATA
         MVI   MSG#CTL,C' '            REINITIALISE CONTROL CHARACTER
         MVC   MSG#TXT,MSG#CTL         CLEAR OUT MSG#TXT AREA
PRT@LNE9 LM    R2,R5,SM@SVD4R          RESTORE R2 THRU R5
         BR    R2
         LTORG ,
W#DBLWRD DS    D
H02      DC    H'02'
H04      DC    H'04'
W#BYTS30 DC    CL30' '
         ORG   W#BYTS30
W#IPLDAY DS    CL30'WEDNESDAY, 11-NOV-87, 06:51:30'
SM@WRKA  DS    0D          *** WORK AREA FOR SMF DATE/TIME ROUTINES **
SM@DBLW  DS    D
SM@SVD4R DS    4F                 FOR SAVING WORK REGISTERS
SM@TIME  DS    XL4'00'            TOD IN 1/100 SECS
SM@DATE  DS    XL4'00'            4-BYTE PKD FLD WITH X'00YYDDDF'
SM@WRK5  DS    CL5
SM@HMS   DS    CL6'141037'
SM@DMY   DS    CL6'160588'
SM@DAY   DS    CL9
SM@SWBYT DC    X'00'
SM@LEAP# EQU   X'80'              LEAP-YEAR INDICATOR
         ORG   SM@WRKA            LET'S REFUSE THIS WORK AREA
HX@WRKA  DS    0D           ***   WORK AREA FOR HEX@PRT ROUTINE
HX@SVD4R DS    4F                 FOR SAVING WORK REGISTERS
WK@BIN4  DS    F
WK@WRDS4 DS    4F                 4-WORD WORK FLD FOR VSMREGN MACRO
WK@CHR14 DS    0CL14
         DS    CL6
WK@CHR8  DS    CL8
         ORG   ,
WK@CPUTB DS    2CL12              ID INFO ABOUT MAXM OF 2 CPU'S
         ORG   WK@CPUTB
WK@CPU$1 DS    0CL12         ***  12-BYTE PCCACPID FROM PCCA
         DS    CL2                PRESENTLY UNDOCUMENTED
         DS    CL6'112233'        6-DIGIT SERIAL NUMBER
         DS    CL4'3090'          4-BYTE CPU MODEL
WK@CPU$2 DS    CL12               SIMILAR 12-BYTE INFO ABOUT PROCESSOR 2
WK@OSINF DS    0CL33
         DS    CL11'MVS/XA Ver '
WK@REL#  DS    CL08'SP2.2.0 '
         DS    CL01' '
WK@FMHDR DS    CL05'FMID '
WK@FMID  DS    CL08'JBB2220 '
         CVT   PREFIX=YES,DSECT=YES,LIST=YES
         IEESMCA
         IHAPCCA ,
         END


B S Oberoi
Manager Technical Services
Allendale Insurance (USA) € Xephon 1989

