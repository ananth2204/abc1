Automatic re-bind for DB2 plans

When our shop decided to begin using IBM's DB2 product, we ran into some
problems concerning the application plans.  Plans are descriptions of
the DB2 calls (SQL) in a given application program or programs.  When a
batch DB2 job is run or an on-line DB2 transaction is processed, there
must be a plan associated with that job or transaction.  That plan must
include any programs that are 'linked to' or called by the main program,
or an abend will occur.  When a new program is defined to DB2, the
system administrator, or DBA, performs an operation called 'bind'.  This
function creates the application plan for the given DB2 program.  If
there are sub-routines or called programs involved that also use DB2,
they must be 'bound' into that plan at that time.  Thus, we can see
instances where a plan may contain many programs, especially in CICS
where there are common error routines or print routines that are called
by a large number of programs.  The problem is how do we keep this
organised?  If a program is changed, any plans that it is in must be
re-bound, and other programs that are in those plans must be re-bound
along with it.  This presents a full-time job cross-checking and
cross-referencing programs and plans before each program modification
can be put into production.  We simply could not justify that kind of
action, and decided to automate the cross-reference process.  Here is
what we did.

When a new program is added to the system (test mode), the DBA will
perform the initial bind for the plan.  This bind will include any
called programs or sub- routines that the main program will use.  This
bind process is done via the DB2I dialogues that are supplied by IBM
when DB2 is installed on the system.  We then modified the bind CLIST to
create an entry in a user table that records the plan name and any
program names to be associated with that plan.  This information is
similar to the DB2 catalog table 'SYSIBM.SYSDBRM'.  The following
example shows how this table looks when displayed by SPUFI:

---------+---------+---------+
  SELECT *
         FROM GSTSYS.DBRM;
---------+---------+---------+
DBRM_NAME  DBRM_PLAN
---------+---------+---------+
FAP011     LAWPAP01
FAP004     LAWPAP00 *
FAP003     LAWPAP00 *------> multiple programs per plan
FAP002     LAWPAP00 *
RW92       RW92
RW91       RW91
SYSG053B   SYSG053B *------> program in multiple plans
SYSG053B   PRT1157B *
PRT1157B   PRT1157B
---------+---------+---------+

The code for the CLIST and the required Assembler module follow this
article, as well as the SQL DDL for the table 'GSTSYS.DBRM'.  We tried
to use the DB2 catalog to access this information, but because of the
way it is organised, response times for the updates and enquiries were
excessive.  Creating a user table solved the problem and cut response to
seconds.

Now we had a machine-readable record for each plan and all of their
associated programs.  The next job was to write a program that would be
invoked at compile time and that would access this table and re-bind the
required plans and any other associated programs.  This was done with a
program that, when passed a program name, searched the table for the
plans that included that program.

Then, a second scan was done to get all the other programs that were
included in the list of plans found by the first search.  Lastly, the
required bind statements (in their correct syntax) were created and
passed to DB2 for execution.  By using this procedure, we eliminated
many of the headaches for our DBA, and streamlined the process for
compiling and re-binding programs.  This is the code that was inserted
into CLIST DSNEBC02:

                ENDDATA
                SET &DSNERVOX = &LASTCC  /* SAVE A COPY OF LASTCC   */
                CONTROL FLUSH         /* ALLOW STACK FLUSH ON ABEND */
              END
            SET &MSGID = DSNE294      /* WRITE MSG TELLING RETCODE  */
            %DSNECC01                 /* TRANSLATE MSG 294 TOKENS   */
          END                         /* END BIG IF                 */
IF &SAVECC GT 0 THEN GOTO ENDIT
IF &DSNEOV01 NE DSNT THEN GOTO ENDIT
WRITE NOW UPDATING GSTSYS.DBRM
WRITE     &PLAN   DBRM(S)- &DSNEYV15 &DMEM
CONTROL NOFLUSH NOMSG
FREE DSN('&SYSUID..DBRMS') DELETE
CONTROL NOFLUSH MSG
ATTRIB IOFILE RECFM(F B) LRECL(80) BLKSIZE(80)
ALLOC FILE(INFILE) DSNAME('&SYSUID..DBRMS') USING(IOFILE) +
  NEW CATALOG UNIT(DISK) VOLUME(WRKAKO) SPACE(1,1) TRACKS
FREE ATTRLIST(IOFILE)
OPENFILE INFILE OUTPUT
SET &INFILE = &DSNEYV94
PUTFILE INFILE
SET &INFILE = &DSNEYV15
PUTFILE INFILE
SET &I = 80
DO WHILE &I LT 90
   SET &DSNCRAP = &&DSNEYV&I
   IF &DSNCRAP NE &STR() THEN +
      DO
        SET &INFILE = &DSNCRAP
        PUTFILE INFILE
        END
   SET &I = &I + 1
   END
SET &I = 16
DO WHILE &I LT 30
   SET &DSNCRAP = &&DSNEYV&I
   IF &DSNCRAP NE &STR() THEN +
      DO
        SET &INFILE = &DSNCRAP
        PUTFILE INFILE
        END
   SET &I = &I + 1
   END
CLOSFILE INFILE
DSN SYSTEM(DSNT)
    DATA
    RUN PROGRAM(SYSG0512) PLAN(SYSG0512) LIBRARY('TEST.LOADLIB')
    END
    ENDDATA
FREE FILE(INFILE) DELETE
ENDIT: +
      END                             /* END DO WHILE               */
    END                               /* END DIRECT RUN             */
EXIT CODE(&SAVECC)
SQL DDL FOR THE USER TABLE GSTSYS.DBRM

--DROP TABLESPACE GSTSYSDB.DBRMTS;
--COMMIT;
  CREATE TABLESPACE DBRMTS IN GSTSYSDB
    BUFFERPOOL BPO
    CLOSE NO USING VCAT DSNT;
  CREATE TABLE GSTSYS.DBRM
    (DBRM_NAME   CHAR(8)          NOT NULL,
     DBRM_PLAN   CHAR(8)          NOT NULL)
    IN GSTSYSDB.DBRMTS;
  CREATE INDEX GSTSYS.DBRMX1 ON GSTSYS.DBRM
    (DBRM_NAME   ASC)
    BUFFERPOOL BPO
    CLUSTER
    CLOSE NO USING VCAT DSNT;
  GRANT ALL ON TABLE GSTSYS.DBRM TO PUBLIC;

This program adds entries to the program/plan table:

IDENTIFICATION DIVISION.
PROGRAM-ID. SYSG0512.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INFILE ASSIGN TO UT-S-INFILE.
DATA DIVISION.
FILE SECTION.
FD  INFILE
    LABEL RECORDS ARE OMITTED.
01  INREC.
    03 DATAIN       PIC X(8).
    03 FILLER       PIC X(72).
WORKING-STORAGE SECTION.
    EXEC SQL
       INCLUDE SQLCA
       END-EXEC.
    EXEC SQL
       INCLUDE DBRM
       END-EXEC.
01  DBRMID          PIC X(8).
01  PLANID          PIC X(8).
PROCEDURE DIVISION.
    OPEN INPUT INFILE.
    READ INFILE
       AT END GO TO END-JOB.
    MOVE DATAIN TO PLANID.
    EXEC SQL
       DELETE FROM GSTSYS.DBRM
              WHERE DBRM_PLAN = :PLANID
       END-EXEC.
READ-INFILE.
    READ INFILE
       AT END GO TO END-JOB.
    MOVE DATAIN TO DBRMID.
    EXEC SQL
       INSERT INTO GSTSYS.DBRM
              VALUES(:DBRMID,:PLANID)
       END-EXEC.
    GO TO READ-INFILE.
END-JOB.
    CLOSE INFILE.
    STOP RUN.

These are the two steps that were added to our compile procedure:

//*
//* BIND APPLICATION PLAN
//*
//DB2BIND1 EXEC PGM=IKJEFT01,COND=(5,LT)
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//INFILE   DD DSN=&SYSUID..T&TIME.,DBRM,DISP=OLD contains 1 record
                                                 with the program name
//OUTFILE  DD DSN=&&BINDCRDS,DISP=(,PASS),
              DCB=RECFM=FB,LRECL=80,BLKSIZE=80),
              UNIT=DISK,VOL=SER=WRKAKO,SPACE=(TRK,(1,1))
//SYSTSIN  DD  *
 DSN SYSTEM(DSNT)
 RUN PROGRAM(SYSGO510) LIBRARY('TEST.LOADLIB')
 END
/*
//DB2BIND2 EXEC PGM=IKJEFT01,COND=(5,LT)
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//DBRMLIB  DD DSN=GST.TESTSRCE.DBRMLIB,DISP=SHR
           DD DSN=GST.PRODSRCE.DBRMLIB,DISP=SHR
//SYSTSIN  DD DSN=&&BINDCRDS,DISP=(OLD,DELETE,DELETE)
//DELETE   EXEC PGM=IEFBR14
//INFILE   DD DSN=&SYSUID..T&TIME..DBRM,DISP=(OLD,DELETE,DELETE)

This program builds the bind statements:

IDENTIFICATION DIVISION.
PROGRAM-ID. SYSG0510.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INFILE ASSIGN TO UT-S-INFILE.
    SELECT OUTFILE ASSIGN TO UT-S-OUTFILE.
DATA DIVISION.
FILE SECTION.
FD  INFILE
    LABEL RECORDS ARE OMITTED.
01  INREC.
    03  PROGIN      PIC X(8).
    03  FILLER      PIC X(72).
FD  OUTFILE
    LABEL RECORDS ARE OMITTED.
01  OUTREC          PIC X(80).
WORKING-STORAGE SECTION.
    EXEC SQL
       INCLUDE SQLCA
       END-EXEC.
    EXEC SQL
       INCLUDE DBRM
       END-EXEC.
01  WORK-REC1.
    03  FILLER               PIC X(80)
        VALUE ' DSN SYSTEM(DSNT)'.
01  WORK-REC2.
    03  FILLER               PIC X(11) VALUE ' BIND PLAN('.
    03  PLAN                 PIC X(9).
    03  PLAN-BYTE REDEFINES PLAN OCCURS 9 TIMES
                             PIC X.
    03  FILLER               PIC X(60)
        VALUE '  ISO(CS) RETAIN VAL(BIND) +'.
01  WORK-REC3.
    03  FILLER               PIC X(80)
        VALUE '  ACQ(ALLOCATE) REL(DEALLOCATE) +'.
01  WORK-REC4.
    03  FILLER               PIC X(10) VALUE '   MEMBER('.
    03  DBRMS                PIC X(70).
    03  DBRM-BYTE REDEFINES DBRMS OCCURS 70 TIMES
                             PIC X.
01  WORK-AREA.
    03  WORK                 PIC X(8).
    03  COPY-BYTE REDEFINES WORK OCCURS 8 TIMES
                             PIC X.
01  SAVE-PLAN                PIC X(8).
01  X                        PIC 99.
01  Y                        PIC 99.
01  ERRORS.
    03  ERR-STMT             PIC X(10).
    03  ERR-CODE             PIC -999.
PROCEDURE DIVISION.
    OPEN INPUT INFILE.
    OPEN OUTPUT OUTFILE.
READ-INFILE.
    READ INFILE
       AT END GO TO END-JOB.
    MOVE SPACES TO PLAN.
    MOVE SPACES TO DBRMS.
    EXEC SQL
       DECLARE PLANCSR CURSOR FOR
       SELECT *
          FROM GSTSYS.DBRM
          WHERE DBRM_NAME =:PROGIN
       END-EXEC.
    EXEC SQL
       OPEN PLANCSR
       END-EXEC.
GET-PLAN.
    EXEC SQL
       FETCH PLANCSR
       INTO :DBRMTAB
       END-EXEC.
    IF SQLCODE = 100
       EXEC SQL
          CLOSE PLANCSR
          END-EXEC
       GO TO READ-INFILE.
    MOVE DBRM-PLAN TO WORK.
    MOVE DBRM-PLAN TO SAVE-PLAN.
    MOVE 1 TO X.
    MOVE 0 TO Y.
LOOP1.
    IF COPY-BYTE(X) NOT = SPACES
      ADD 1 TO Y
      MOVE COPY-BYTE(X) TO PLAN-BYTE(Y).
    ADD 1 TO X.
    IF X < 9 GO TO LOOP1.
    ADD 1 TO Y.
    MOVE ')' TO PLAN-BYTE(Y).
    EXEC SQL
       DECLARE DBRMCSR CURSOR FOR
       SELECT *
          FROM GSTSYS.DBRM
          WHERE DBRM_PLAN = :SAVE-PLAN
       END-EXEC.
    EXEC SQL
       OPEN DBRMCSR
       END-EXEC.
    MOVE 0 TO Y.
GET-DBRM.
    EXEC SQL
       FETCH DBRMCSR
       INTO :DBRMTAB
       END-EXEC.
    IF SQLCODE = 100
       GO TO NO-MORE.
    MOVE DBRM-NAME TO WORK.
    MOVE 1 TO X.
LOOP2.
    IF COPY-BYTE(X) NOT = SPACES
      ADD 1 TO Y
      MOVE COPY-BYTE(X) TO DBRM-BYTE(Y).
    ADD 1 TO X.
    IF X < 9 GO TO LOOP2.
    ADD 1 TO Y.
    MOVE ',' TO DBRM-BYTE(Y).
    GO TO GET-DBRM.
NO-MORE.
    EXEC SQL
       CLOSE DBRMCSR
       END-EXEC.
    MOVE ')' TO DBRM-BYTE(Y).
    WRITE OUTREC FROM WORK-REC1.
    WRITE OUTREC FROM WORK-REC2.
    WRITE OUTREC FROM WORK-REC3.
    WRITE OUTREC FROM WORK-REC4.
    GO TO GET-PLAN.
END-JOB.
    CLOSE INFILE.
    CLOSE OUTFILE.
    STOP RUN.


Paul Jespersen
Systems Programmer
Gulf States Toyota (USA) € Xephon 1988





















































