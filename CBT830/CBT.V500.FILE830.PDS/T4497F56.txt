Sorting and searching under REXX

The library of built-in functions provided with the SAA REXX
language is comprehensive but tends to concentrate on string
manipulation. When processing files with the EXECIO
command, it can be useful to deal with arrays of data (ie stem
variables).

Two frequently required functions are to sort an array into
sequence and to locate an element in that array efficiently.
Without careful programming, REXX will consume large
amounts of CPU time performing these functions on anything
other than small arrays.

The following examples are REXX versions of well-known
algorithms that can be used to provide sort and search functions
without experiencing performance degradation if the arrays are
large, namely a shell sort and a binary search.

In both examples, the REXX array (stem variable) is called
ARRAY and the number of elements is contained in
ARRAY.0. This code should work equally well under any
SAA REXX environment.


Shell Sort

/* SHELL SORT FOR REXX ARRAY, SORTS ON ENTIRE LINE, COULD USE   */

/* SUBSTR IF KEY FIELD IS ONLY PART OF THE ELEMENT RECORD.      */
/* THIS SORT METHOD WILL PERFORM WELL FOR MOST SIZES OF ARRAY.  */
SORT:
INCR = ARRAY.0                   /* SET INCREMENT TO ARRAY SIZE */
DO UNTIL (INCR = 1)              /* REPEAT UNTIL INCR DOWN TO 1 */
   INCR = (INCR % 3) + 1         /* REDUCE INCREMENT FOR INSERT */
   DO START = 1 TO INCR          /* SELECT THE SUBLIST TO SORT  */
      CALL INSERT                /* PERFORM INSERTION SORT NOW  */
   END
END
RETURN                           /* ARRAY IS NOW IN SORT ORDER  */
INSERT:
DO I = START+INCR TO ARRAY.0 BY INCR    /* ENTRIES TO COMPARE */
   X = I - INCR
   IF ARRAY.I < ARRAY.X THEN            /* IF OUT OF ORDER    */
      DO
         J = I
         TEMP = ARRAY.I
         DO UNTIL (FOUND = 1)           /* FIND CORRECT PLACE */
            J = J - INCR
            K = J + INCR
            ARRAY.K = ARRAY.J
            IF J = START THEN           /* TOP OF SUBLIST     */
               FOUND = 1
            ELSE
               DO
                  L = J - INCR
                  IF ARRAY.L <= TEMP THEN   /* IS IT HERE?    */
                     FOUND = 1
                  ELSE
                     FOUND = 0
               END
         END
         ARRAY.J = TEMP                 /* INSERT ENTRY HERE  */
      END
END
RETURN


Binary Search

/* SEARCH, PERFORM BINARY SEARCH IN REXX ARRAY FOR TARGET STRING  */
/* ASSUMES ARRAY IN SEQUENCE, CAN USE SUBSTR ON TARGET AND ARRAY  */
/* IF ONLY PART OF THE ARRAY IS IN SORT SEQUENCE.                 */
SEARCH:
TOP   = ARRAY.0        /* NUM OF ELEMENTS, UPPER LIMIT FOR ARRAY  */
BOT   = 1              /* LOWER LIMIT OF ARRAY FOR SEARCH         */
FOUND = 0              /* INITIALIZE FOUND TARGET FLAG            */
DO WHILE (FOUND = 0 & TOP >= BOT)        /* END OF SEARCH CHECKS  */
   MID = (TOP + BOT) % 2                 /* NOTE INTEGER DIVIDE   */
   IF TARGET = ARRAY.MID THEN            /* HAVE WE FOUND TARGET? */
      FOUND = 1                          /* YES                   */
   ELSE                                  /* NO                    */
      IF TARGET < ARRAY.MID THEN         /* COMPARE STRINGS       */
         TOP = MID - 1                   /* LOOK IN LOWER PART    */
      ELSE                               /* OR ELSE               */
         BOT = MID + 1                   /* LOOK IN HIGHER PART   */
END                                      /* AND TRY AGAIN         */
/* IF FOUND = 1 THEN MID IS THE INDEX OF TARGET ELEMENT IN ARRAY  */
RETURN FOUND


Peter A Toogood
Systems Programmer (UK)                        c Xephon 1992

