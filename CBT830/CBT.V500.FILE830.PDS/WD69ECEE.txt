Validating the TIME parameter

We have had problems in the past where we have customized
JES2PARM so that jobs submitted in various job classes are
assigned particular characteristics, one of them being the TIME
parameter. Unfortunately the end user can override the TIME
parameter thereby manipulating the input queue and ultimately
making a mockery of any SRM tuning that is in place.

The exit I have written is for an MVS/ESA 4.2.2 system
running JES2 4.2.2. The exit is based on the IBM-supplied exit
(HASX06A in SYS1.SAMPLIB).

The user may still supply the TIME parameter but it must have
the same value as coded in JES2PARM, otherwise the job fails
with a JCL error. My exit has been coded so that it scans the
JES2 internal text after it has gone through the
converter/interpreter. If anything other then a batch job is
encountered, control is passed back to the system immediately.
If it is a batch job then both the job card and the EXEC
statement are scanned for the TIME parameter. If a TIME
parameter has been coded then it will be checked against a
table of legitimate class values which compares the job class
with the associated time value.

If an illegal value is specified, the job will fail with a JCL error
and a message is written to the JES2 job log.

Whenever a job is submitted without a valid class, ie it is not
defined in JES2PARM, the job will fail with a JCL error.
Therefore if you modify JES2PARM you must make the
necessary modifications to the class/time table in the exit.

JES2PARM must be modified to pick up the exit, specifically
the EXIT and LOADMOD parameters - for more information
please refer to the JES2 Initialization and Tuning Reference
manual (for JES2 4.2.2 the reference number is SC23-0083).


JCL TO ASSEMBLE AND LINK EDIT EXIT

//xxxxxxxx JOB              <<==== supply job card
//**********************************************************************
//***      JES2 EXIT6 TO DENY TIME PARM ON JOB/EXEC STATEMENTS       ***
//**********************************************************************
//ASSEMBLY EXEC  PGM=IEV90,
//         PARM='NODECK,OBJ,LIST,RENT,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FBA,LRECL=121,BLKSIZE=3146)
//SYSUT1   DD  UNIT=VIO,SPACE=(1700,(400,400))
//SYSLIN   DD  DSN=&&OBJ,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,1))
//SYSLIB   DD  DISP=SHR,DSN=SYS1.HASPSRC
//         DD  DISP=SHR,DSN=SYS1.MODGEN
//         DD  DISP=SHR,DSN=SYS1.SMPMTS
//         DD  DISP=SHR,DSN=SYS1.AMODGEN
//         DD  DISP=SHR,DSN=SYS1.MACLIB
//SYSTERM  DD SYSOUT=*
//SYSPUNCH DD DSN=NULLFILE,DISP=SHR
//SYSIN    DD DISP=SHR,DSN=                 <<== where the source is
//**********************************************************************
//***      LINK EDIT                                                 ***
//**********************************************************************
//LINKEDIT EXEC PGM=IEWL,PARM=(XREF,LIST,RENT),REGION=128K,
//             COND=(7,LT,ASSEMBLY)
//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FBA,LRECL=121,BLKSIZE=3146)
//OBJIN    DD  DSN=&&OBJ,DISP=OLD
//SYSLMOD  DD  DISP=SHR,DSN=           <<=== please supply
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,
//             SPACE=(1024,(20,30)),DCB=BLKSIZE=1024
//SYSLIN   DD  *
    INCLUDE OBJIN
    MODE AMODE(31),RMODE(24)
    NAME HASX06A(R)


SOURCE CODE FOR THE EXIT

HASX06A 'TITLE 'EXIT6 - Time Parameter Validation'
***********************************************************************
*    Function :  To scan JCL after it has passed through the C/I      *
*                for the presence of a TIME= parameter on either      *
*                the JOB card or the EXEC statement.                  *
*                If a time parameter is found it will be validated    *
*                against a table of classes with their associated     *
*                time value. If the class doesn't match the assoc-    *
*                iated time value then the job will fail with a       *
*                JCL error and the appropriate message will be        *
*                written to the JES2 job log.                         *
*    DEPENDENCIES = 1) JES2 EXIT EFFECTOR                             *
*                   2) JES2 PROCESSOR AND SUBTASK DISPATCHING         *
*    RESTRICTIONS = THIS CODE IS PROVIDED AS AN EXAMPLE OF INSTALL-   *
*                   ATION EXTENSIONS TO JES2.  THIS CODE IS NOT TO BE *
*                   CONSIDERED TYPE 1 SUPPORTED CODE OF IBM.  ANY     *
*                   PROBLEMS ENCOUNTERED IN THE USE OF THIS SAMPLE    *
*                   CODE IS A USER RESPONSIBILITY.  THE IBM SUPPORT   *
*                   CENTRE DOES NOT SUPPORT USER EXTENSIONS OR SAMPLE *
*                   USER EXITS.                                       *
*    REGISTER CONVENTIONS = SEE ENTRY POINT DOCUMENTATION             *
*    PATCH LABEL = NONE                                               *
* MODULE TYPE = CSECT                                                 *
*    PROCESSOR = OS/VS ASSEMBLER H OR ASSEMBLER XF (370)              *
*    MODULE SIZE = SEE $MODEND MACRO EXPANSION AT END OF ASSEMBLY     *
*    ATTRIBUTES = REENTRANT, SUPERVISOR STATE, PROTECT KEY OF         *
*                 HASP'S (1) OR 0, RMODE 24, AMODE 24/31              *
* ENTRY POINT = EXIT06                                                *
*    LINKAGE = STANDARD MVS LINKAGE                                   *
* EXIT-NORMAL = RETURN TO CALLER (HASPCNVT)                           *
* EXIT-ERROR = RETURN TO CALLER (HASPCNVT) WITH NON-ZERO RETURN CODE  *
*    ROUTINES = MISCELLANEOUS JES2 SERVICE ROUTINES, AND              *
*               MISCELLANEOUS STANDARD SUPERVISOR SERVICE ROUTINES    *
*    DATA AREAS = SEE $MODULE MACRO EXPANSION                         *
*    CONTROL BLOCKS = SEE $MODULE MACRO EXPANSION                     *
* TABLES = SEE $MODULE MACRO DEFINITION (BELOW)                       *
* MACROS = JES2 - $$WTO, $ENTRY, $MID, $MODEND, $MODULE, $RETURN,     *
*                 $SAVE                                               *
* MACROS = MVS  - FREEMAIN, GETMAIN, WTO                              *
* A000000-999999    CREATED FOR JES2 3.1.1                         @311
***********************************************************************
         TITLE 'EXIT6 - Time Parameter Validation'
         COPY  $HASPGBL            COPY HASP GLOBALS
         TITLE 'EXIT6 - Time Parameter Validation'
HASX06A $MODULE ENVIRON=SUBTASK,                                       C
               CNMB,               IEFCNMB - Converter message buffer  C
               DEB,                Generate MVS IEZDEB                 C
               (KEYS,GEN),         Generate MVS IEFVKEYS and list them C
               RPL,                GENERATE MVS IFGRPL                 C
               SAFP,               ICHSAFP - SAF PARAMETER LIST        C
               (TEXT,GEN),         GENERATE MVS IEFTXTFT AND LIST THEM C
               TOKEN,              ICHRUTKN - SAF TOKEN MAPPING        C
               WPL,                GENERATE MVS IEXWPL                 C
               $BUFFER,            BUFFER DSECT                        C
               $CADDR,             COMMON STORAGE ADDRESS LIST         C
               $CMB,               CONSOLE MESSAGE BUFFER              C
               $DTE,               DAUGHTER TASK ELEMENT               C
               $DTECNV,            DTE EXTENSION FOR CONVERSION        C
               $ERA,               ERROR RECOVERY AREA                 C
               $HASPEQU,           GENERAL EQUATES                     C
               $HCCT,              COMMON STORAGE CONTROL TABLE        C
               $HCT,               PRIVATE STORAGE CONTROL TABLE       C
               $HFAME,             FILE ALLOCATION MAP ELEMENT         C
               $JCT,               JOB CONTROL TABLE                   C
               $JQE,               JOB QUEUE ELEMENT                   C
               $MIT,               MODULE INFORMATION TABLE            C
               $MITETBL,           $MIT TABLE ENTRY                    C
               $PADDR,             PRIVATE STORAGE ADDRESS LIST        C
               $PARMLST,           PARAMETER LIST MAPPING              C
               $PCE,               PROCESSOR CONTROL ELEMENT           C
               $PDDB,              DATA SET DEFINITION BLOCK           C
               $PSV,               PROCESSOR SAVE AREA                 C
               $SCAT,              SYSOUT CLASS ATTRIBUTE TABLE        C
               $TQE,               TIMER QUEUE ELEMENT                 C
               $USERCBS,           USER CONTROL BLOCKS                 C
               $XECB,              EXTENDED ECB                        C
               $XIT                EXIT INFORMATION TABLE        @420CG
         TITLE 'JEXIT06 - CONVERTER/INTERPRETER TEXT SCAN EXIT'
***********************************************************************
*        EXIT06 - INSTALLATION EXIT 6 ROUTINE                         *
* OVERVIEW:                                                           *
*        AT THIS POINT THE JCL RECORD HAS BEEN CONVERTED TO           *
*        C/I TEXT FORMAT BY THE OS/VS CONVERTER.                      *
*        ALSO, JES2 HAS COMPLETED THE GENERATION OF DATASET           *
*        NAMES FOR SYSIN AND SYSOUT DD STATEMENTS.  THE USER          *
*        IS NOW GIVEN THE OPPORTUNITY TO SCAN THE COMPLETED C/I       *
*        TEXT STATEMENT BEFORE IT IS WRITTEN TO SPOOL.                *
* FUNCTION:                                                           *
*        THIS EXIT WILL SCAN EACH C/I TEXT STATEMENT AND              *
*        ISSUE WTO MESSAGES INDICATING THAT A JOB OR EXEC CARD        *
*        HAS BEEN ENCOUNTERED.  WHEN A DD CARD HAS BEEN FOUND,        *
*        THE TEXT STRING IS SCANNED TO LOCATE THE DATASET NAME        *
*        KEY.  (JES2 ROUTINE XINTKEY IS $CALLED TO SCAN FOR THE       *
*        DSNAME.)  IF THE DATASET NAME KEY IS FOUND, A MESSAGE        *
*        WILL BE BUILT CONTAINING THE DATASET NAME AND THE            *
*        SECLABEL OF THE DATASET.  THIS MESSAGE WILL BE BUILT IN      *
*        A CNMB (CONVERTER MESSAGE BUFFER) AND SENT BACK TO C/I.      *
*        THE MESSAGE WILL THEN BE PLACED IN THE JOB'S JESYSMSG        *
*        DATASET BY C/I.                                              *
*        THE JES2 TRACE FACILITY CAN BE USED TO PRODUCE               *
*        SNAP TRACES OF JCL STATEMENTS AFTER THEY HAVE BEEN           *
*        CONVERTED INTO C/I TEXT FORMAT.  A TRACE IS TAKEN            *
*        AT ENTRY TO EXIT06 WITH THE C/I TEXT AS IT WAS GENERATED     *
*        BY THE MVS CONVERTER AND AGAIN AFTER THE RETURN FROM         *
*        EXIT06 TO SHOW ANY CHANGES MADE DURING EXIT06.               *
*        REFERENCE "JES2 COMMANDS" FOR DETAILS ON EVENT TRACING.      *
*        FOR A DETAILED DESCRIPTION OF THE C/I TEXT FORMATS           *
*        REFERENCE "MVS/XA USER EXITS" GC28-1147-3, APPENDIX A.       *
* LINKAGE:                                                            *
*        CALL BY MVS CONVERTER                                        *
* ENVIRONMENT:                                                        *
*        JES2 SUBTASK                                                 *
* RECOVERY:                                                           *
*        NONE                                                         *
* REGISTER USAGE:                                                     *
* INPUT   R0  = A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *
*               0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *
*                  TO AN C/I TEXT IMAGE                               *
*               4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *
*                  JOB HAS BEEN CONVERTED TO C/I TEXT.                *
*         R1  = ADDRESS OF A 4-WORD PARAMETER LIST WITH THE           *
*               FOLLOWING STRUCTURE:                                  *
*               WORD 1 (+0) = ADDR OF 16-BYTE WORK AREA               *
*               WORD 2 (+4) = IF THE CODE PASSED IN R0 IS 0, THIS     *
*                             POINTS TO THE ADDRESS OF THE LAST       *
*                             SINGLE INTERNAL TEXT IMAGE CONVERTED    *
*                             FROM A JCL STATEMENT.  IF THE CODE      *
*                             PASSED IN R0 IS 4, THIS WORD CONTAINS   *
*                             THE ADDRESS OF THE CONVERTER'S RETURN   *
*                             CODE.                                   *
*               WORD 3 (+8) = ADDRESS OF THE DTE                      *
*               WORD 4 (+12) = ADDRESS OF THE JCT                     *
*               WORD 4 (+16) = N/A on entry; used to store the        *
*                              IEFCNMB if obtained in exit            *
*         R2-R10 = N/A                                                *
*         R11 = ADDRESS OF HCT                                        *
*         R12 = N/A                                                   *
*         R13 = ADDRESS OF AN 18-WORD OS-STYLE SAVE AREA              *
*         R14 = RETURN ADDRESS                                        *
*         R15 = ADDRESS OF ENTRY POINT                                *
* OUTPUT  R15 = RETURN CODE                                           *
*         (ALL OTHERS UNCHANGED)                                      *
* REGISTER USAGE (INTERNAL): R0-R2   = WORK REGISTERS                 *
*                            R3      = ADDRESS OF TEXT IMAGE          *
*                            R4      = ADDRESS OF THE DTE             *
*                            R5-R7   = WORK REGISTERS                 *
*                            R8      = ADDRESS OF WORK AREA           *
*                            R9      = WORK REGISTERS                 *
*                            R10     = ADDRESS OF THE JCT             *
*                            R11     = ADDRESS OF THE HCT             *
*                            R12     = LOCAL ADDRESSABILITY           *
*                            R13     = ADDRESS OF SAVE AND WORK AREA  *
*                            R14-R15 = WORK AND LINKAGE REGISTER      *
* RETURN CODES (R15 ON EXIT):                                         *
*        0  -  PROCESSING SUCCESSFUL (NO ERRORS)                      *
***********************************************************************
EXIT06  $ENTRY BASE=R12
        $SAVE  NAME=EXIT06         SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         LR    R2,R0               SAVE CALL INDICATOR
         L     R3,4(,R1)           LOAD TEXT IMAGE ADDRESS
         L     R4,8(,R1)           LOAD ADDRESS OF DTE
         L     R10,12(,R1)         LOAD JCT ADDRESS
         LA    R6,16(,R1)          LOAD ADDRESS IN PARM LIST WHERE     C
                                   CNMB (if obtained) should be placed
         USING TEXT,R3             ESTABLISH TEXT ADDRESSABILITY
         USING DTE,R4              ESTABLISH DTE ADDRESSABILITY
         USING JCT,R10             ESTABLISH JCT ADDRESSABILITY
         USING X6WORK,R8           ESTABLISH WORK AREA ADDRESSABILITY
         SPACE 1
         GETMAIN RC,LV=X6LEN,SP=X6SP,LOC=ANY   For WTO buffer
         LTR   R15,R15             Did we get the storage?
         BNZ   RETURNA             No, just return
         LR    R8,R1               Save getmained storage address
*        Test if the input was 0 or 4                                 *
         LTR   R2,R2              IS INPUT R2 GT 0
         BNZ   RETURN             RC=4 SO EXIT
*        Test for batch job, otherwise leave it alone                 *
         TM    JCTJOBFL,JCTBATCH   Is it a batch job?
         BNO   RETURN              NO...LEAVE EXIT
*        Test for job class                                           *
         LA    R7,CLASSTAB         Point to start of class table
CLASLOOP EQU   *
         CLC   JCTCLASS,0(R7)      Have we got a valid job class?
         BE    CHECKJOB            Yep go and check for job or exec
         LA    R7,5(R7)            No... Get next class
         C     R7,=AL4(CLASSEND)   At the end of the class table??
         BE    NOTFOUND            Yep.. so class not found
         B     CLASLOOP            No.. go get the next class
*        Test for JOB or EXEC statement                               *
CHECKJOB TM    STRINDCS,EXECSTR    Is it an 'EXEC' statement?
         BO    XEXEC               Yes ... then goto XEXEC
         TM    STRINDCS,JOBSTR     IS THIS A 'JOB' STATEMENT?
         BNO   RETURN              NO THEN EXIT OTHERWISE CONTINUE
*       Test for TIME parameter on the JOB card                       *
XJCLJOB  LA    R0,TIMEJK               GET TIME= KEY VALUE
         LA    R1,STRJKEY              Start search here
         $CALL XINTKEY,ERRET=RETURN    CHECK FOR TIME= PARM
         MVC   X6MSG(MSG900L),MSG900   Found...Copy message to buffer
         $$WTO X6MSG                   Issue the message
         B     BOMBIT                  Abort the job
*       Test for TIME parameter value on the EXEC card                *
XEXEC    LA    R0,TIMEEEK              GET TIME= KEY VALUE
         LA    R1,STREKEY              Start search here
         $CALL XINTKEY,ERRET=RETURN    CHECK FOR TIME= PARM
         CLC   1(4,R7),3(R1)           Is it TIME parm correct?
         BE    RETURN                  Yep... so leave it
         MVC   X6MSG(MSG900L),MSG900   Found...Copy message to buffer
         $$WTO X6MSG                   Issue the message
         B     BOMBIT                  Abort the job
*        Illegal use of the TIME parameter so bomb the job            *
NOTFOUND MVC   X6MSG(MSG901L),MSG901   Class not found message
         $$WTO X6MSG                   Issue the message
*        Illegal use of the TIME parameter so bomb the job            *
BOMBIT   FREEMAIN RC,LV=X6LEN,A=(R8),SP=X6SP  FREEMAIN WORK AREA
GETLOST $RETURN RC=08              RETURN TO CALLER
*        NORMAL RETURN - RESTORE REGISTERS, FREE WORK AREA AND        *
*        RETURN TO MVS CONVERTER                                      *
RETURN   FREEMAIN RC,LV=X6LEN,A=(R8),SP=X6SP  FREEMAIN WORK AREA
RETURNA $RETURN                    RETURN TO CALLER
*        INTERNAL DSECTS AND DEFINED CONSTANTS                        *
X6WORK   DSECT                  Exit 6 work area for messages
X6MSG    WTO   '*** EXPANSION OF  WTO MACRO - EXPAND TO LEAVE ROOM  ***C
               *** FOR 120 CHARACTERS                               ***C
               ***      ',                                             C
               ROUTCDE=(2),DESC=4,MF=L
X6MSGLN  EQU   *-X6MSG          WTO PARAMETER LENGTH
X6LEN    EQU   *-X6WORK         END OF EXIT 6 WORK AREA
HASX06A  CSECT                     END OF DATA DSECT
*        Table of job classes                                         *
*            DC   C'x',C'nnnn'                                        *
*                   Where :  x = Class                                *
*                            nnnn = Time                              *
CLASSTAB DS   0H
         DC   C'A',C'0001'         These classes
         DC   C'C',C'1440'            and job times
         DC   C'D',C'1440'              must match those
         DC   C'H',C'1440'                in your JES2PARMs !!!!
         DC   C'N',C'1440'
         DC   C'O',C'1440'
         DC   C'P',C'1440'
         DC   C'T',C'1440'
         DC   C'U',C'1440'
         DC   C'V',C'1440'
         DC   C'1',C'0001'
         DC   C'2',C'0003'
         DC   C'3',C'0060'
         DC   C'4',C'1440'
         DC   C'5',C'0010'
CLASSEND EQU  *
         LTORG
X6SP     EQU   0                   USE SUBPOOL 0 FOR $GETMAIN
*        WTO Messages coded within the exit module                    *
         $MID  900
MSG900   WTO   '&MID.USE OF THE TIME PARAMETER NOT ALLOWED - JOB CANCELC
               LED',MF=L                                               C
               ROUTCDE=(2),DESC=(4)
MSG900L  EQU   *-MSG900
         $MID  901
MSG901   WTO   '&MID.INVALID JOBCLASS SPECIFIED - CORRECT AND RESUBMIT'C
               ,MF=L                                                   C
               ROUTCDE=(2),DESC=(4)
MSG901L  EQU   *-MSG901
        $MODEND
APARNUM  DC    CL5'00000'          APAR NUMBER
         END   ,                   END OF HASX06A


I Dadabhoy
Systems Engineer
Confederation Life Insurance Co (UK)            c Confederation Life 1993

