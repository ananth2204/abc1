Re-entrant working storage

When making use of system macros in a re-entrant program you
usually have code to copy the list form of the macro from within
your program's storage to an area that has been GETMAINed,
and then issue the execute form of the macro. For example:

WORK     DSECT
WSAVE    DS    18F
WRROUTE  RACROUTE .....,MF=L
WRC      DS    F
YOURPROG CSECT
         .
         .
         USING WORK,R13
         .
         .
         MVC   WRROUTE(RACROUTL),RACROUT$
         RACROUTE .....,MF=(E,WRROUTE)
         ST    R15,WRC
         .
         .
RACROUT$ RACROUTE .....,MF=L
RACROUTL EQU *-RACROUT$

A technique to simplify this process is to make use of a standard
macro that will perform the required initialization, termination, and
set-up of re-entrant working storage.

You define any working storage required in exactly the same way
as you would for a non re-entrant program with the addition of a
surrounding macro. The initialization section will obtain the
necessary storage and copy your defined working storage to it.
You can then refer to any item in your GETMAINed storage
using the same names you defined in your working storage. For
example, the above would become:

YOURPROG CSECT
         .
         .
         RACROUTE .....,MF=(E,RACROUT$)
         ST    R15,WRC
         .
         .
         MPROG WORK
RACROUT$ RACROUTE .....,MF=L
WRC      DC    F'0'
         MPROG WORKEND

The macro MPROG is as follows (note the position of LTORG
before the start of the working storage definition - this ensures
correct addressability via the base register).

          MACRO
&NAME     MPROG &TYPE
          GBLC &G$NM
          GBLC &G$WK
          GBLC &G$RG
          LCLC &DATE
&DATE     SETC '&SYSDATE'(4,3).'&SYSDATE'(1,3).'&SYSDATE'(7,2)
          AIF ('&TYPE' EQ 'ENTRY').ENTRY
          AIF ('&TYPE' EQ 'EXIT').EXIT
          AIF ('&TYPE' EQ 'WORK').WORK
          AIF ('&TYPE' EQ 'WORKEND').WORKEND
          AIF ('&TYPE' EQ 'REGS').REGS
          AIF ('&TYPE' EQ '').NULL
          MNOTE 4,'TYPE=&TYPE is invalid'
          MEXIT
.ENTRY    ANOP
          AIF ('&NAME' EQ '').ERR1
&G$NM     SETC '&NAME'
&G$NM     CSECT
          USING *,R15
          B     *+4+16               branch around eyecatcher
          DC    CL8'&G$NM'
          DC    CL8'&DATE'
          DROP  R15
          STM   R14,R12,12(R13)      save registers
          LR    R12,R15              load base register
          USING &G$NM,R12            addressability
          STORAGE OBTAIN,LENGTH=WORK$L  get some storage
          LR    R2,R1                save address
          LR    R0,R1                "to" address
          L     R1,=A(WORK$L)        to length
          LR    R15,R1               from length
          LA    R14,WORK$S           "from" address
          MVCL  R0,R14               copy working storage
          ST    R13,4(,R2)           standard savearea
          ST    R2,8(,R13)           .. linkage
          L     R1,24(,R13)          restore r1
          LR    R13,R2
          USING WORK$S,R13           addressability
          MEXIT
.EXIT     ANOP
&NAME     DS    0H
          LR    R2,R15               save return code
          LR    R1,R13               r1 --> our storage
          L     R13,4(,R13)
          STORAGE RELEASE,           free storage                      X
                ADDR=(1),LENGTH=WORK$L
          LR    R15,R2               return code
          L     R14,12(,R13)         load return address
          LM    R1,R12,24(R13)       restore registers
          BR    R14                  return to caller
          MEXIT
.WORK     ANOP
          AIF ('&G$NM' EQ '').ERR1
&G$WK     SETC 'OK'
          LTORG
WORK$S    DS    0D                   start of work area
          DC    18F'0'               register save area
          DC    CL8'&G$NM'           eyecatcher
          DC    CL8'STORAGE'
          MEXIT
.WORKEND  ANOP
          AIF ('&G$WK' NE 'OK').ERR2
          DS    0D
          DC    CL8'*****END'        end of work area
WORK$L    EQU *-WORK$S               length of work area
          DROP R13
          AIF ('&G$RG' EQ '').REGS1
          MEXIT
.REGS     ANOP
          AIF ('&G$RG' EQ 'Y').ERR3
.REGS1    ANOP
&G$RG     SETC 'Y'
*         register equates
R0        EQU   0
R1        EQU   1
        etc
R15       EQU   15
          MEXIT
.ERR1     ANOP
          MNOTE 4,'no name specified for CSECT'
          MEXIT
.ERR2     ANOP
          MNOTE 4,'unable to complete WORK definition'
.ERR3     ANOP
          MNOTE 'register equates done previously'
          MEXIT
.NULL     ANOP
          MEND


David Welch (New Zealand)                                              c Xephon

