Analysing devices and subchannels


INTRODUCTION

When analysing the status of devices and subchannels, it is
always very time consuming to keep having to refer to the
appropriate reference manuals. It would be much easier to have
a procedure to do all the necessary work. An example of such a
procedure is described below.

The analysis of a given status is divided into two parts: a
REXX procedure called DESU (DEvice and SUbchannel
analyser) and an Assembler-written TSO command processor
called SSW (Subchannel Status Word 2).

The reason for dividing the procedure into two parts (and not
using for example a single Assembler-written TSO command
processor) was that, in REXX, it is very easy to manipulate
text; for example padding data, testing whether certain
characters are contained or absent in a  given string, and so on.


Description of DESU

DESU can be regarded as a pre-processor or scanner, the only
purpose of which is to acquire the necessary data, check its
syntax, perform various set up functions, and pass the data to
SSW.

/* REXX */
/* REXX - PROCEDURE TO ANALYSE DEVICE AND SUBCHANNEL STATUS         */
/********************************************************************
**          BEGINNING OF PROCEDURE                                 **
*********************************************************************/
WIDTH = 4                      /* 2 DEVICE STATUS + 2 SUBCHAN STATUS*/
SAY '***************************************************'
SAY '* DEVICE AND SUBCHANNEL- ANALYZE PROCEDURE (DESU) *'
SAY '***************************************************'
SAY
SAY
SAY 'ENTER DEVICE STATUS AND SUBCHANNEL STATUS'
SAY
SAY
PULL DATA
DATA = STRIP(DATA)             /* DELETE LEADING + TRAILING BLANKS   */
HEX_OK = VERIFY(DATA,'0123456789ABCDEF')
DO WHILE HEX_OK <> 0
   SAY '**** ENTERED DATA CONTAINS INVALID HEX- CHARACTERS ****'
   SAY
   SAY
   SAY 'ENTER DEVICE STATUS AND SUBCHANNEL STATUS'
   SAY
   SAY
   PULL DATA
   HEX_OK = VERIFY(DATA,'0123456789ABCDEF')
END                            /* AT THIS POINT DATA CONTAINS ONLY  */
                               /* VALID CHARACTERS                  */
IF LENGTH(DATA) < WIDTH THEN   /* SET UP DATA TO BE PASSED TO SSW   */
   DO
      DATA = LEFT(DATA,4,0)    /* RIGHTPAD WITH 0                   */
   END
ADDRESS LINK "SSW" DATA        /* LINK TO SSW LOAD MODULE           */
EXIT


Description of SSW

According to the REXX manuals, Register 1 points to the
address of parm1, which itself points to the address of the
remaining text in the buffer when entering SSW. Initially,
Register 1 is saved into Register 3. Then two load operations
have to be carried out in order to let Register 4 point to the
passed data (and thus realize the above pointer chain).

Since data is entered in EBCDIC, it has to be translated and
then packed into a 2-byte field, PACK_DAT, which contains
'true' device and subchannel status data as originally presented
to the channel.

The rest of SSW simply tests whether certain bits are set or not
and generates appropriate messages.

PGM      START   0
PGM      AMODE   31
PGM      RMODE   24                         TPUT DATA resides BELOW
MAC      REG                                REGISTER EQUATES
BEGIN    BAKR    R14,R0
         LAE     R12,0(0,R15)
         USING   PGM,R12
         LR      R3,R1                      SAVE R1 -- PARMS
         STORAGE OBTAIN,LENGTH=72,LOC=ANY   SAVEAREA
         LAE     R13,0(R1,0)
         MVC     4(4,R13),=C'F1SA'          INDICATES BAKR- MNEMONICS
         B       MAINPGM
         DC      CL13'AUTHOR: DRUMM'
         DC      CL8'&SYSDATE'
         DC      CL8'&SYSTIME'
MAINPGM  DS      0D                         ALIGNING
*--------------- PREPARE DATA FOR ANALYSIS --------------------------*
         L       R4,0(R3)                   R4:= A(P1)
         L       R4,0(R4)                   R4:= A(REMAINING TXT)
         MVC     DATA(4),0(R4)              SAVE PASSED DATA
         TR      DATA(4),TAB-193            TRANSLATE DATA
         PACK    PACK_DAT(3),DATA(5)        AND PACK IT
NODEVSTA EQU     *
*--------------- CHECK TRIVIAL SITUATION-1 --------------------------*
         CLI     PACK_DAT,X'00'             NO DEVICE STATE AVAILABLE?
         BNE     NOSUBSTA
         TPUT    MSG01,L'MSG01
NOSUBSTA EQU     *
*--------------- CHECK TRIVIAL SITUATION-2 --------------------------*
         CLI     PACK_DAT+1,X'00'           NO SUBCHAN STATE AVAILABLE?
         BNE     ANALYSIS
         TPUT    MSG02,L'MSG02
ANALYSIS EQU     *
*--------------- ANALYSE ENTERED DATA --------------------------------*
ANALBY00 EQU     *
*--------------- ANALYSE BYTE 0 OF ENTERED DATA ----------------------*
TBIT00   EQU     *
         TM      PACK_DAT,BIT0              ATTENTION?
         BZ      TBIT01
         TPUT    MSG03,L'MSG03
TBIT01   EQU     *
         TM      PACK_DAT,BIT1              STATUS MODIFIER?
         BZ      TBIT02
         TPUT    MSG04,L'MSG04
TBIT02   EQU     *
         TM      PACK_DAT,BIT2              CU END?
         BZ      TBIT03
         TPUT    MSG05,L'MSG05
TBIT03   EQU     *
         TM      PACK_DAT,BIT3              BUSY?
         BZ      TBIT04
         TPUT    MSG06,L'MSG06
TBIT04   EQU     *
         TM      PACK_DAT,BIT4              CHANNEL END?
         BZ      TBIT05
         TPUT    MSG07,L'MSG07
TBIT05   EQU     *
         TM      PACK_DAT,BIT5              DEVICE END?
         BZ      TBIT06
         TPUT    MSG08,L'MSG08
TBIT06   EQU     *
         TM      PACK_DAT,BIT6              UNIT CHECK?
         BZ      TBIT07
         TPUT    MSG09,L'MSG09
TBIT07   EQU     *
         TM      PACK_DAT,BIT7              UNIT EXCEPTION?
         BZ      ANALBY01
         TPUT    MSG10,L'MSG10
ANALBY01 EQU     *
*--------------- ANALYSE BYTE 1 OF ENTERED DATA ----------------------*
TBIT08   EQU     *
         TM      PACK_DAT+1,BIT0            PCI?
         BZ      TBIT09
         TPUT    MSG11,L'MSG11
TBIT09   EQU     *
         TM      PACK_DAT+1,BIT1            INCORRECT LENGTH?
         BZ      TBIT10
         TPUT    MSG12,L'MSG12
TBIT10   EQU     *
         TM      PACK_DAT+1,BIT2            PROGRAM CHECK?
         BZ      TBIT11
         TPUT    MSG13,L'MSG13
TBIT11   EQU     *
         TM      PACK_DAT+1,BIT3            PROTECTION CHECK?
         BZ      TBIT12
         TPUT    MSG14,L'MSG14
TBIT12   EQU     *
         TM      PACK_DAT+1,BIT4            CHANNEL DATA CHECK?
         BZ      TBIT13
         TPUT    MSG15,L'MSG15
TBIT13   EQU     *
         TM      PACK_DAT+1,BIT5            CHANNEL CONTROL CHECK?
         BZ      TBIT14
         TPUT    MSG16,L'MSG16
TBIT14   EQU     *
         TM      PACK_DAT+1,BIT6            INTERFACE CONTROL CHECK?
         BZ      TBIT15
         TPUT    MSG17,L'MSG17
TBIT15   EQU     *
         TM      PACK_DAT+1,BIT7            CHAINING CHECK?
         BZ      ENDE
         TPUT    MSG18,L'MSG18
ENDE     LAE     R1,0(R13,0)
         STORAGE RELEASE,LENGTH=72,ADDR=(R1)
         SR      R15,R15
         PR
DATA     DC      X'40404040'                AREA FOR PASSED DATA
         DC      X'40'
PACK_DAT DC      X'4040'                    AREA FOR PACKED DATA
         DC      X'40'
         DS      0F                         ALIGNMENT
TAB      DC      X'FAFBFCFDFEFF'            DEFINE TABLE TO
         DC      41X'00'                    TRANSLATE
         DC      X'F0F1F2F3F4F5F6F7F8F9'
MSG01    DC      C'NO DEVICE STATUS AVAILABLE    '
MSG02    DC      C'NO SUBCHANNEL STATUS AVAILABLE'
MSG03    DC      C'ATTENTION                     '
MSG04    DC      C'STATUS MODIFIER               '
MSG05    DC      C'CONTROL UNIT END              '
MSG06    DC      C'BUSY                          '
MSG07    DC      C'CHANNEL END                   '
MSG08    DC      C'DEVICE END                    '
MSG09    DC      C'UNIT CHECK                    '
MSG10    DC      C'UNIT EXCEPTION                '
MSG11    DC      C'PCI                           '
MSG12    DC      C'INCORRECT LENGTH              '
MSG13    DC      C'PROGRAM CHECK                 '
MSG14    DC      C'PROTECTION CHECK              '
MSG15    DC      C'CHANNEL DATA CHECK            '
MSG16    DC      C'CHANNEL CONTROL CHECK         '
MSG17    DC      C'INTERFACE CONTROL CHECK       '
MSG18    DC      C'CHAINING CHECK                '
BIT0     EQU     B'10000000'
BIT1     EQU     B'01000000'
BIT2     EQU     B'00100000'
BIT3     EQU     B'00010000'
BIT4     EQU     B'00001000'
BIT5     EQU     B'00000100'
BIT6     EQU     B'00000010'
BIT7     EQU     B'00000001'
         END   BEGIN

SSW is assembled and link-edited with the standard procedure
ASMHCL found in SYS1. PROCLIB. A macro REG
containing the register equates has to be provided.

As SSW uses ESA mnemonics, there is the need to use other
statements/macros if it is to run in an XA environment. Those
statements to be changed can be found in the BEGIN and
ENDE sections. For example, use GETMAIN instead of
STORAGE_OBTAIN, traditional save area chaining, STM
instead of BAKR, RETURN instead of PR, and so on.

Since SSW uses only TSO services, it is not necessary to be in
an ISPF environment when executing DESU.

Hans-Paul Drumm
Systems Engineer
Comparex Informationssysteme GmbH (Germany)                  c Xephon 1992

