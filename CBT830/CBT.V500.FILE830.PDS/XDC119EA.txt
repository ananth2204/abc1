Viewing variable length datasets (continued)

This article is concluded this month with the publication of the
source code for  the module SPANREAD; the AMODE24,
AMODE31, and LABEL macros; the MSGTEXTS and
WORKFLDS copy members; the SPVM01 message member;
and the SPVP0001 panel member.

SPANREAD - SPANNED RECORD VIEWER READ SUBROUTINE

SPANREAD AMODE 31
SPANREAD RMODE 24
SPANREAD CSECT
         STM   R14,R12,12(R13)          SAVE REGISTERS
         LR    R3,R1                    SAVE R1
         LR    R12,R15                  LOAD BASE REGISTER
         USING SPANREAD,R12             SET USING
         L     R2,12(R3)                DIALOG DATA ADDRESS
         L     R2,0(R2)                 BRIFWORK ADDRESS
         ST    R13,4(R2)                CHAIN SAVE AREAS
         ST    R2,8(R13)
         LR    R13,R2                   WORK AREA ADDRESS
         USING BRIFWORK,R13             SET USING
         B     SPNR0030                 GO TO WORK
SPNR0020 DS    0H                    RETURN TO CALLER
         L     R13,4(R13)               RELOAD OLD SAVE AREA ADDRESS
         L     R14,12(R13)              RELOAD REGISTERS
         LM    R0,R12,20(R13)
         BR    R14                      RETURN
SPNR0030 DS    0H                    GET PARAMETERS
         L     R4,8(R3)                 REL. REC. NO. REQUESTED ADDRESS
         L     R4,0(R4)                 REL. REC. NO. REQUESTED
* RETRIEVE REQUESTED RECORD VIA BSAM DIRECT ACCESS *
         NI    FLAG1,255-HIGH           TURN OFF POSITION INDICATOR
         L     R6,RATCEPTR              RAT CURRENT ENTRY POINTER
         CL    R4,0(R6)                 CHECK REQUESTED VS. CURRENT
         BE    SPNR1320                 EQUAL
         BH    SPNR1130                 HIGH
         OI    FLAG1,HIGH               LOW, CURRENT IS HIGH, INDICATE
SPNR1130 DS    0H
         L     R10,RATADDR              RAT STARTING ADDRESS
         A     R10,RATLENM              RAT LAST POSSIBLE ENTRY ADDRESS
SPNR1200 DS    0H
         CLR   R6,R10                   END OF POSSIBLE ENTRIES?
         BH    SPNR1310                 YES
         CLC   =F'0',0(R6)              END OF ACTIVE ENTRIES?
         BE    SPNR1310                 YES
SPNR1250 DS    0H
         L     R5,0(R6)                 LOAD RECORD NO.
         CLR   R4,R5                    REQUESTED = CURRENT?
         BE    SPNR1320                 YES
         BL    SPNR1300                 REQUESTED IS LOW
         TM    FLAG1,HIGH               DID CURRENT ENTRY START HIGH?
         BO    SPNR1320                 YES, WE'RE AT THE PROPER ENTRY
         A     R6,RATELEN               NEXT TABLE ENTRY
         ST    R6,RATCEPTR              UPDATE CURRENT ENTRY POINTER
         B     SPNR1200                 RECYCLE
SPNR1300 DS    0H
         TM    FLAG1,HIGH               DID CURRENT ENTRY START HIGH?
         BZ    SPNR1310                 NO, WE OVERSHOT GOING UP
         S     R6,RATELEN               YES, KEEP BACKING DOWN
         ST    R6,RATCEPTR              UPDATE CURRENT ENTRY POINTER
         B     SPNR1250                 RECYCLE
SPNR1310 DS    0H
         S     R6,RATELEN               BACK UP TO LOWER RECORD ENTRY
         ST    R6,RATCEPTR              UPDATE CURRENT ENTRY POINTER
         L     R5,0(R6)                 LOAD RECORD NO.
SPNR1320 DS    0H
         XC    WORK1,WORK1              CLEAR WORK FIELD
         MVC   WORK1(1),4(R6)           MOVE 'M'
         MVC   WORK1+3(2),5(R6)         MOVE 'CC'
         MVC   WORK1+6(1),7(R6)         MOVE 'H'
         MVC   WORK1+7(1),8(R6)         MOVE 'R'
         LA    R1,0
         ICM   R1,B'0111',DCB1+DCBDEBA-IHADCB DEB ADDRESS
         LA    R2,WORK1                 MBBCCHHR ADDRESS
         STM   R9,R12,WORK2             PRESERVE REGISTERS
         LR    R8,R13                   PRESERVE WORK AREA ADDRESS
         L     R15,CVTPTR               CVT ADDRESS
         L     R15,CVTPRLTV-CVT(R15)    IECPRLTV ADDRESS
         BALR  R14,R15                  CONVERT TO TTR0
         LR    R13,R8                   RESTORE WORK AREA ADDRESS
         LM    R9,R12,WORK2             RESTORE REGISTERS
         ST    R0,WORK2                 STORE TTR0 OF BLOCK
         AMODE24
         POINT DCB1,WORK2               POINT TO IT
         READ  DECB1,SF,DCB1,SPNVREC,MF=E READ BLOCK
         CHECK DECB1                    WAIT FOR COMPLETION
         AMODE31
* POSITION TO THE FIRST COMPLETE LOGICAL RECORD OR SEGMENT *
         LA    R8,SPNVREC               ADDRESS OF BLOCK READ
         AH    R8,SPNVREC               POINT PAST END OF BLOCK READ
         LA    R9,SPNVREC+4             POINT TO SDW OF FIRST SEGMENT
SPNR1330 DS    0H
         CLI   2(R9),0                  COMPLETE LOGICAL RECORD?
         BE    SPNR2000                 YES
         CLI   2(R9),1                  FIRST SEGMENT
         BE    SPNR2100                 YES
         AH    R9,0(R9)                 ADVANCE TO NEXT SEGMENT
         B     SPNR1330                 RECYCLE
* READ SUBSEQUENT BLOCKS AND ASSEMBLE RECORDS AS REQUIRED *
SPNR1370 DS    0H
         AMODE24
         READ  DECB1,SF,DCB1,SPNVREC,MF=E READ BLOCK
         CHECK DECB1                    WAIT FOR COMPLETION
         AMODE31
         LA    R8,SPNVREC               ADDRESS OF BLOCK READ
         AH    R8,SPNVREC               POINT PAST END OF BLOCK READ
         LA    R9,SPNVREC+4             POINT TO SDW OF FIRST SEGMENT
         CLC   =F'0',0(R6)              CURRENT TABLE SLOT EMPTY?
         BE    SPNR1400                 YES, STAY THERE
         ST    R6,RATCEPTR              CAPTURE CURRENT STATUS
         A     R6,RATELEN               ADVANCE TO NEXT SLOT
SPNR1400 DS    0H
         CLI   2(R9),0                  COMPLETE LOGICAL RECORD?
         BE    SPNR2000                 YES
         CLI   2(R9),1                  FIRST SEGMENT?
         BE    SPNR2100                 YES
         CLI   2(R9),2                  LAST SEGMENT?
         BE    SPNR2200                 YES
         CLI   2(R9),3                  MIDDLE SEGMENT?
         BE    SPNR2300                 YES
SPNR2000 DS    0H                    COMPLETE LOGICAL RECORD PROCESSING
         CLR   R6,R10                   END OF THE TABLE?
         BH    SPNR2020                 YES, CAN'T RECORD ANY MORE
         CLC   =F'0',0(R6)              SOMETHING HERE ALREADY?
         BNE   SPNR2020                 YES, DON'T RECORD
         ST    R5,0(R6)                 STORE RECORD NO.
         MVC   4(1,R6),DCB1+DCBFDAD-IHADCB+0 MOVE 'M'
         MVC   5(2,R6),DCB1+DCBFDAD-IHADCB+3 MOVE 'CC'
         MVC   7(2,R6),DCB1+DCBFDAD-IHADCB+6 MOVE 'H' AND 'R'
SPNR2020 DS    0H
         CLR   R4,R5                    REQUESTED > CURRENT?
         BH    SPNR2050                 YES, RECORD NOT YET FOUND
         XC    2(2,R9),2(R9)            CLEAR 2 BYTES OF SDW MAKING RDW
         L     R2,0(R3)                 ADDRESS OF BRIF RECORD ADDRESS
         ST    R9,0(R2)                 STORE RETRIEVED RECORD ADDRESS
         LH    R1,0(R9)                 SEGMENT LENGTH
         C     R1,=F'32760'             > ALLOWABLE?
         BNH   SPNR2030                 NO
         L     R1,=F'32760'             YES, FORCE IT
SPNR2030 DS    0H
         L     R2,4(R3)                 GET ADDRESS OF RECORD LENGTH
         ST    R1,0(R2)                 STORE RECORD LENGTH
         B     SPNR4000                 GO TO FINAL PROCESSING
SPNR2050 DS    0H
         LA    R5,1(R5)                 INCREMENT CURRENT RECORD NO.
         AH    R9,0(R9)                 NEXT RECORD OR SEGMENT START
         CLR   R9,R8                    END OF THIS BLOCK?
         BL    SPNR1400                 NO, MORE RECORDS OR SEGMENTS
         B     SPNR1370                 NEXT BLOCK
SPNR2100 DS    0H                    FIRST SEGMENT PROCESSING
         CLR   R6,R10                   END OF THE TABLE?
         BH    SPNR2120                 YES, CAN'T RECORD ANY MORE
         CLC   =F'0',0(R6)              SOMETHING HERE ALREADY?
         BNE   SPNR2120                 YES, DON'T RECORD
         ST    R5,0(R6)                 STORE RECORD NO.
         MVC   4(1,R6),DCB1+DCBFDAD-IHADCB+0 MOVE 'M'
         MVC   5(2,R6),DCB1+DCBFDAD-IHADCB+3 MOVE 'CC'
         MVC   7(2,R6),DCB1+DCBFDAD-IHADCB+6 MOVE 'H' AND 'R'
SPNR2120 DS    0H
         LA    R7,SPNVREC
         A     R7,=F'33000'             POINT TO RECORD BUILD AREA
         LR    R0,R7                    LOAD TARGET ADDRESS
         LH    R1,0(R9)                 GET LENGTH
         LR    R14,R9                   LOAD SOURCE ADDRESS
         LR    R15,R1                   SAME LENGTH
         MVCL  R0,R14                   MOVE THE SEGMENT
         AH    R7,0(R9)                 ADVANCE RECORD BUILD POINTER
         AH    R9,0(R9)                 NEXT SEGMENT
         CLR   R9,R8                    END OF THIS BLOCK?
         BL    SPNR1400                 NO, MORE SEGMENTS
         B     SPNR1370                 YES, NEXT BLOCK
SPNR2200 DS    0H                    LAST SEGMENT PROCESSING
         LR    R0,R7                    LOAD TARGET ADDRESS
         LH    R1,0(R9)                 LOAD LENGTH
         SH    R1,=H'4'                 REDUCE BY SDW LENGTH
         LA    R14,4(R9)                LOAD SOURCE ADDRESS
         LR    R15,R1                   SAME LENGTH
         MVCL  R0,R14                   MOVE THE SEGMENT
         AH    R7,0(R9)                 ADVANCE RECORD BUILD POINTER
         SH    R7,=H'4'                 REDUCE BY SDW LENGTH
         CLR   R4,R5                    REQUESTED > CURRENT?
         BH    SPNR2250                 YES, RECORD NOT YET FOUND
         LA    R1,SPNVREC
         A     R1,=F'33000'             ADDRESS OF ASSEMBLED RECORD
         L     R2,0(R3)                 ADDRESS OF BRIF RECORD ADDRESS
         ST    R1,0(R2)                 STORE ASSEMBLED RECORD ADDRESS
         SR    R7,R1                    LENGTH OF ASSEMBLED RECORD
         C     R7,=F'32760'             > ALLOWABLE?
         BNH   SPNR2230                 NO
         L     R7,=F'32760'             YES, FORCE IT
SPNR2230 DS    0H
         L     R2,4(R3)                 ADDRESS OF BRIF RECORD LENGTH
         ST    R7,0(R2)                 STORE BRIF RECORD LENGTH
         STH   R7,0(R1)                 STORE LENGTH IN RDW AS WELL
         XC    2(2,R1),2(R1)            CLEAR LOWER TWO BYTES
         B     SPNR4000                 GO TO FINAL PROCESSING
SPNR2250 DS    0H
         LA    R5,1(R5)                 INCREMENT CURRENT RECORD NO.
         AH    R9,0(R9)                 NEXT RECORD OR SEGMENT START
         CLR   R9,R8                    END OF THIS BLOCK?
         BL    SPNR1400                 NO, MORE RECORDS
         B     SPNR1370                 YES, NEXT BLOCK
SPNR2300 DS    0H                    MIDDLE SEGMENT PROCESSING
         LR    R0,R7                    LOAD TARGET ADDRESS
         LH    R1,0(R9)                 LOAD LENGTH
         SH    R1,=H'4'                 REDUCE BY SDW LENGTH
         LA    R14,4(R9)                LOAD SOURCE ADDRESS
         LR    R15,R1                   SAME LENGTH
         MVCL  R0,R14                   MOVE THE SEGMENT
         AH    R7,0(R9)                 ADVANCE RECORD BUILD POINTER
         SH    R7,=H'4'                 REDUCE BY SDW LENGTH
         AH    R9,0(R9)                 NEXT RECORD OR SEGMENT START
         CLR   R9,R8                    END OF THIS BLOCK?
         BL    SPNR1400                 NO, MORE RECORDS
         B     SPNR1370                 YES, NEXT BLOCK
SPNR4000 DS    0H                    REQUESTED RECORD HAS BEEN FOUND
         LA    R15,0                    SET RETURN CODE
         B     SPNR0020                 GO TO RETURN
         ENTRY SPNR5000              EOD PROCESSING
SPNR5000 DS    0H
         AMODE31
         BCTR  R5,0                     LESS 1 IS NO. OF RECS. IN FILE
         L     R1,8(R3)                 OUTPUT REC. NO. POINTER
         ST    R5,0(R1)                 STORE REC. NO.
         LA    R15,8                    SET RETURN CODE
         B     SPNR0020                 GO TO RETURN
* ------ ERROR REPORTING ------ *
SPNR7000 DS    0H                    STORE ERROR INFORMATION
         MVC   MSGID,=CL8'SPVM010A'     MOVE MESSAGE ID
         MVC   READRET,=F'8'            SET SPANREAD RETURN CODE
         STM   R15,R0,REQCODES          SET RETURN/REASON/FDBK CODES
         LA    R15,20                   SET SEVERE ERROR CODE
         B     SPNR0020                 GO TO RETURN
         COPY  MSGTEXTS
BRIFWORK DSECT
         DS    18F                      SAVE AREA
         COPY  WORKFLDS                 COMMON FIELD DEFINITIONS
         DCBD  DEVD=DA,DSORG=PS
         CVT   DSECT=YES,LIST=NO
         END

AMODE24 MACRO

         MACRO
&NAME    AMODE24
         CNOP  2,4
&NAME    LA    R1,*+6                    CLEAR BIT 0, SET BRANCH ADDR
         BSM   0,R1                      SET AMODE BIT
         MEND

AMODE31 MACRO

         MACRO
&NAME    AMODE31
         CNOP  2,4
&NAME    LA    R1,*+14                   SET BRANCH ADDR
         O     R1,*+6                    TURN ON BIT 0 - AMODE = 31
         BSM   0,R1                      SET AMODE BIT
         DC    X'80000000'
         MEND

LABEL MACRO

         MACRO
&NAME    LABEL
&NAME    MVC   LABEL,=CL8'&NAME'
         MEND

MSGTEXTS COPY MEMBER

ERROR010 DC    CL24'Allocation error'
ERROR020 DC    CL24'OBTAIN error'

WORKFLDS COPY MEMBER

R1SAVE   DS    A                        R1 SAVE WORD
ISPLINK  DS    A                        ROUTINE ADDRESS
LENS40   DS    2F                       LENGTHS
PTRS40   DS    2A                       POINTERS
LENS50   DS    1F                       LENGTHS
PTRS50   DS    1A                       POINTERS
VARS10   EQU   *
MSG1     DS    CL26                     SHORT MESSAGE
VARS20   EQU   *
LABEL    DS    CL8                      LABEL WHERE ERROR OCCURS
VARS30   DS    0F
REQCODES DS    0F                       REQUEST RETURN/REASON CODES
RETCODE  DS    F                        R15 CONTENTS
RSNCODE  DS    F                        R0 CONTENTS
LRECL    DS    F                        DSNAME MAXIMUM LRECL
RECLEN   DS    F                        LENGTH OF RECORD READ
RATADDR  DS    A                        RAT ADDRESS
RATLENM  DS    F                        RAT LENGTH MINUS 8
BRIFREAD DS    A                        READ ROUTINE ADDRESS
READRET  DS    F                        READ ROUTINE RETURN CODE
DECB1    DS    0D,XL32                  DECB
RATCEPTR DS    A                        RAT CURRENT ENTRY POINTER
PATTERND DS    0D                       PATTERN IN DSECT
MSGID    DC    CL8' '                   MESSAGE ID
DSNAME   DC    X'000200010000',CL54' '  DSNAME TU
VOLSER1  DC    X'001000010006',CL06' '  VOLSER TU
DDNAME1  DC    X'005500010008',CL8' '   RETURN DDNAME TU
VOLSER2  DC    X'005D00010006',CL6' '   RETURN VOLSER TU
DDNAME2  DC    X'000100010008',CL8' '   UNALLOCATE DDNAME TU
OPENLIST OPEN  (,),MF=L                 OPEN LIST FORM
CLOSLIST CLOSE (,),MF=L                 CLOSE LIST FORM
DCB1     DCB   DSORG=PS,,MACRF=(RP),DDNAME=DUMMY
CAMLST   CAMLST SEARCH,0,0,0            TARGET OF OBTAIN
FLAG1    DC    X'00'                    FLAG BYTE
HIGH     EQU   X'80'                    RATCEPTR POSITIONING IS HIGH
RATELEN  DC    F'9'                     RAT ENTRY LENGTH
RATLEN   DC    F'0'                     RAT LENGTH
WORK1    DC    D'0'                     WORK DOUBLEWORD
WORK2    DC    4F'0'                    WORK FIELD
*                                       END OF PATTERN AREA
CALLLIST CALL  ,(,,,,,,,,,,),MF=L       CALL LIST FORM
DLGDATA  DS    A                        ADDRESS OF THIS WORK AREA
WORK3    EQU   *                        CAMLST WORK AREA
SPNVREC  EQU   *                        AND RECORD BUFFER AREA
         DC    66000X'0'

SPVM01 MESSAGE MEMBER

SPVM010A '&MSG1'
'Label &LABEL:  R15 = X''&RETCODE''  R0 or ERROR field = X''&RSNCODE'''
SPVM010G 'Data set not found'
'A data set matching the supplied criteria could not be found'
SPVM010M 'Unsupported data set'
'SPANVIEW supports only variable spanned sequential data sets'
SPVM010P 'Empty data set'
'There are no records in the data set'

SPVP0001 PANEL MEMBER

)ATTR
 ^ TYPE(INPUT) INTENS(HIGH) CAPS(ON)
)BODY
+--------------------------------------------------------------------------
+-----------------------------%  S P A N V I E W  +---------------------------
+--------------------------------------------------------------------------
+---------------------%  Variable Spanned Data Set Viewer  +------------------
+--------------------------------------------------------------------------
+
+Command%===>_ZCMD
+
+
+Data set name%===>^TNAME1                                      +
+
+Volume serial%===>^VOLSER+(if not cataloged)
)PROC
 VER (&TNAME1,DSNAME)
 &TEMP1 = TRUNC (&TNAME1,1)
 IF (&TEMP1 = '''') &TEMP2 = .TRAIL
                    &DSNAME = TRUNC (&TEMP2,'''')
 IF (&TEMP1 ¬= '''') &DSNAME = '&ZPREFIX..&TNAME1'
 IF (&TNAME1 = '') &DSNAME = &TNAME1
)END


                              € Xephon 1990

