Deleting an unrelated VVR (continued)

This month  we conclude our look at deleting unrelated VVRs
by publishing the remaining source code for SDELVVR.

*********    M A I N     P R O G R A M   *****************
MAIN     DS    0H
         XC    STATUS,STATUS    SET EVERY STATUS TO NO
         BAS   R14,PARHANDL
         IF (CLC,RBA,=F'0',NE)
           IF    (TM,STATUS,WRNGPARM,Z)
             BAS   R14,GETCI OPEN THE ESDS AND MOVE THE CI INTO GETM.S
             BAS   R14,INITCIP    INITIATE CI POINTERS (RECP,DP,CIDFP)
*                     TEST CISIZE-4 (R3) GT LENGTH OF FREESPACE.
*                     IF IT'S NOT, THIS CI IS EMPTY.
             L     R3,CISTART
             LA    R4,4095(R3)
             SNAP  DCB=SNAPP,PDATA=REGS,STORAGE=((R3),(R4))
             IF    (CLC,CIDFSF(2),=H'0',NE)
               BAS   R14,DELREC  TRY TO FIND THE RECORD AN DELETE IT
             ELSE
               BAS   R14,EMPTYCI JUST GIVE INFORMASJON ABOUT EMPTY CI
             ENDIF
             IF (TM,MODE,LIVE,O)
               INFORM 'THIS IS LIVE MODE'
               INFORM 'CI HAVE BEEN REALLY UPDATED.'
               PUT   RPL=VRPL
             ENDIF
             L     R3,CISTART
             LA    R4,4095(R3)
             SNAP  DCB=SNAPP,PDATA=REGS,STORAGE=((R3),(R4))
             CLOSE (VVDS)
           ELSE
            INFORM 'EXECUTION STOPPED. REASON IS ERROR IN PARMLIST.'
           ENDIF
         ELSE
           INFORM 'YOU HAV TO GIVE IN RBA, THE FIRST PARAMETER.'
         ENDIF
         B     SLUT
**********  PARHANDL       ********************************************
PARHANDL   ST    R14,BRREG1
         PARMCONV PARPOINT
         LR    R3,R1
         LR    R5,R1
         USING RDF,DP       MAP DEF. AREA WITH DP (ACTUALLY R5)
         USING CIDF,CIDFP   MAP CIDF AREA WITH CIDFP (ACT. R11)
         USING VVRHEAD,RECP MAP RECORD OR VVR-HEADER WITH RECP (R10)
         IF (LTR,R15,R15,Z)
           DO WHILE,(TM,0(R3),VLBIT,Z)
             L     R6,0(R3)     LET R6 POINT AT PARMLEN
             LH    R4,0(R6)     LOAD R4 WITH LENGTH
             BCTR  R4,0         HUMAN TO MACHINE LENGTH
             LA    R5,2(R6)     R5 POINT TO THE VALUE OF PARM
             BAS   R14,WHATPAR  CHOOSE WHAT PARM THIS IS AND ACT.
             LA    R3,4(R3)     INCREMENT ADDRESS BLOCK POINTER
           ENDDO
           L     R6,0(R3)     LET R6 POINT AT PARMLEN
           LH    R4,0(R6)     LOAD R4 WITH LENGTH
           BCTR  R4,0         HUMAN TO MACHINE LENGTH
           LA    R5,2(R6)     R5 POINT TO THE VALUE OF PARM
           BAS   R14,WHATPAR  CHOOSE WHAT PARM THIS IS AND ACT
         ELSE
           INFORM 'ERROR IN PARAMETER, LAST CHAR COMMA PROBABLY.'
           OI STATUS,WRNGPARM
         ENDIF
         L     R14,BRREG1
         BR    R14
**********  WHATPAR     *********************************************
WHATPAR    ST    R14,BRREG2
PRBA       NOP   PDELN        PERFORM PRBA THE FIRST TIME
           IF    (CH,R4,=H'0',GE)
             BAS   R14,RBAHAN   TAKE CARE OF PARM VALUE FOR RBA
           ENDIF
           MVI   PRBA+1,C'0'
           B     PARMDONE
PDELN      NOP   PDELREC      PERFORM PDELN THE SECOND TIME
           IF    (CH,R4,=H'0',GE)
             BAS   R14,DELNHAN   TAKE CARE OF PARM VALUE FOR DELNAME
           ENDIF
           MVI   PDELN+1,C'0'
           B     PARMDONE
PDELREC    NOP   PSIM         PERFORM PDELREC THE THIRD TIME
           IF    (CH,R4,=H'0',GE)
             BAS   R14,DELRHAN   TAKE CARE OF PARM VALUE FOR DELRECNR
           ENDIF
           MVI   PDELREC+1,C'0'
           B     PARMDONE
PSIM       NOP   PARMDONE     PERFORM PSIM THE FOURTH TIME
           IF    (CH,R4,=H'0',GE)
             BAS   R14,MODHAN   TAKE CARE OF PARM VALUE FOR SIMULATE
           ENDIF
           MVI   PSIM+1,C'0'
PARMDONE   DS    0H         PERFORM NOTHING THE FIFTH AN MORE TIMES
           L     R14,BRREG2
           BR    R14
**********  MODHAN      *********************************************
MODHAN     ST    R14,BRREG3
           IF (CH,R4,=H'10',LE)
             IF (EX,R4,COMPMODE,EQ)
               INFORM 'SET LIVE MODE'
               OI  MODE,LIVE     SET LIVE MODE
             ELSE
               INFORM 'SET SIMULATION MODE'
               NI  MODE,SIMU     SET SIMUALATION MODE
             ENDIF
           ELSE
             INFORM 'MODE PARM IS TO MANY CHARACTERS, 4 IS ENOUGH.'
             OI STATUS,WRNGPARM
           ENDIF
           L     R14,BRREG3
           BR    R14
COMPMODE   CLC   0(0,R5),=CL10'LIVE'
**********  DELRHAN      *********************************************
DELRHAN    ST    R14,BRREG3
           IF (EX,R4,CHECKNUM,8)
             IF (CH,R4,=H'3',LE)
               EX    R4,PACKRECNR
               MVN   DELRECNR+1(1),=X'0C'
             ELSE
               INFORM 'DELETE RECORD NUMBER IS TOO BIG.'
               INFORM '   CANNOT EXCEED 3 CHARACTERS.'
               OI STATUS,WRNGPARM
             ENDIF
           ELSE
             INFORM 'DELETE RECORD NUMBER IS NOT NUMERIC.'
             OI STATUS,WRNGPARM
           ENDIF
           L     R14,BRREG3
           BR    R14
PACKRECNR  PACK  DELRECNR,0(0,R5)
CHECKNUM   TRT   0(0,R5),NUMTAB
**********  DELNHAN      *********************************************
DELNHAN    ST    R14,BRREG3
           EX    R4,MOVEDELNAME
           L     R14,BRREG3
           BR    R14
MOVEDELNAME MVC  DELNAME(0),0(R5)
**********  RBAHAN       *********************************************
RBAHAN     ST    R14,BRREG3
           IF (EX,R4,CHECKNUM,8)
             IF (CH,R4,=H'14',LE)
               EX    R4,PACKRBA
               MVN   PCKRBA+7(1),=X'0C'
               CVB R6,PCKRBA        CONVERT FROM PACKED TO BINARY
               ST  R6,RBA
             ELSE
               INFORM 'RBA IS A TOO BIG NUMBER.'
               INFORM '  RBA NUMBER MUST NOT EXCEED 15 CHARACTERS.'
               OI STATUS,WRNGPARM
             ENDIF
           ELSE
             INFORM 'PARM RBA IS NOT NUMERIC.'
             OI STATUS,WRNGPARM
           ENDIF
           L     R14,BRREG3
           BR    R14
           DS    0D
PCKRBA     DC    PL8'0'
PACKRBA    PACK  PCKRBA,0(0,R5)
**********                *********************************************
           ST    R14,BRREG1
*          INFORM 'IN        '
           L     R14,BRREG1
           BR    R14
**********  DELREC    *************************************************
DELREC     ST    R14,BRREG1
           XR    DP,DP            SET DEFINITION-POINTER TO 0
           ZAP   RECNR,=P'0'      SET RECORD NUMBER TO 0
           BAS   R14,NEXTREC      FIND FIRST RECORD
           DO WHILE,(TM,STATUS,FOUND,Z),AND,(TM,STATUS,EOCI,Z)
*            DO WHILE RECORD NOT FOUND AND END OF CI NOT REACHED
             BAS   R14,PRETRECF    PREPARE FOR TESTING IF RECORD FOUND
             IF (CLC,=X'99',DELNAME,EQ),AND,(CP,DELRECNR,RECNR,EQ),OR, X
               (EX,R3,COMPREC,EQ)
*              REC. IS DEFINED AS FOUND IF 1 OF 2 CRITERIA IS TRUE :
*               1. DELNAME = VVRCMPNM
*               2. DELNAME IS NOT GIVEN (=X'99') AND DELRECNR = RECNR
               INFORM 'RECORD FOUND'
*              SNAP DCB=SNAPP,PDATA=REGS
               OI  STATUS,FOUND      SET STATUS = FOUND
               BAS R14,REMOVREC      REMOVE RECORD
               BAS R14,REMOVRDF      REMOVE RDF INFO FOR THIS RECORD
               BAS R14,UPDCIDF       UPDATE CIDF INFORMASJON
             ELSE
               INFORM 'RECORD NOT FOUND'
               BAS R14,NEXTREC       MOVE RECP TO NEXT RECORD
             ENDIF
*********    B SLUTDEL TEST
           ENDDO
SLUTDEL    L     R14,BRREG1
           BR    R14
COMPREC    CLC  VVRCMPNM(0),DELNAME
**********  PRETRECF    *********************************************
PRETRECF   ST    R14,BRREG2
           ICM   R3,1,VVRCMPNL   LOAD LENGTH OF COMPONENT NAME
           BCTR  R3,0            AND SUBTRACT 1 FOR VVRCMPNL FIELD
           BCTR  R3,0            AND ONE FOR HUMAN TO MACHINE LENGTH
           L     R14,BRREG2
           BR    R14
**********  REMOVREC    *********************************************
REMOVREC   ST    R14,BRREG2
           LR    R6,RECP      TO   := RECP
           LR    R8,RECP      FROM := RECP
           AH    R8,CURRECL                + CURRECL
           L     R7,CISTART  TO-LENGTH := CISTART
           AH    R7,CIDFSF               + CIDFSF
           SR    R7,RECP                 -   RECP
           SH    R7,CURRECL              -CURRECL
           LR    R9,R7 FROM-LENGTH := TO-LENGTH
           MVCL  R6,R8 MOVE EVERY RECORD TO THE RIGTH OF THE
*                       ONE WE WANT TO DELETE TO THE START OF
*                       THE ONE WE WANT TO DELETE.
           L     R7,CISTART  TO-LENGTH := CISTART
           AH    R7,CIDFSF               + CIDFSF
           SH    R7,CURRECL              -CURRECL
           LH    R7,CURRECL    TO-LENGTH := CURRECL
           SR    R9,R9         SET PAD BYTE AND FROM LENGTH TO ZERO'S
           MVCL  R6,R8         SET THE NEW FREE SPACE IN CI TO ZERO'S
           L     R14,BRREG2
           BR    R14
**********  REMOVRDF    *********************************************
REMOVRDF   ST    R14,BRREG2
           IF (CLI,RDFCODE,LEFTRDF,EQ)
             ICM R3,3,RDFNUM   DECREMENT RECORD COUNTER IN LEFTRDF
             SH  R3,=H'1'
             STCM R3,3,RDFNUM
             IF (CLC,RDFNUM,=H'2',LT)
               BAS R14,MOVERDFS
               LA  DP,3(DP)      INCR. DP TO POINT AT RIGHT RDF
               MVI 0(DP),X'00'   SET RIGHT-RDF TO SINGLE-RDF
             ENDIF
           ELSE
             BAS R14,MOVERDFS
           ENDIF
           L     R14,BRREG2
           BR    R14
**********  MOVERDFS    *********************************************
MOVERDFS   ST    R14,BRREG3
           LR  R6,DP       LENGTH :=      DP
           S   R6,CISTART          - CISTART
           SH  R6,CIDFSF           -  CIDFSF
           SH  R6,CIDFLF           -  CIDFLF
           L   R3,CISTART  FROM AREA :=CISTART
           AH  R3,CIDFSF            + CIDFSF
           AH  R3,CIDFLF            + CIDFLF
*      IF REG 6 IS ZERO HERE, THIS IS THE LAST RDF, AND
*               THERE IS NO RDF'S TO MOVE TO THE RIGHT.
           IF (CH,R6,=H'0',GT)
             LA  R4,3(R3)    TO AREA := FROM AREA + 3
             GETMAIN R,LV=(R6)   STORAGE FOR WORKAREA TO PUT RDF'S
             LR  R7,R1
             USING RDFWORK,R7
             BCTR R6,0           HUMAN TO MACHINE LENGTH
             EX  R6,MVETOWK      MOVE RDF'S TO WORKAREA
             EX  R6,MVEFRWK      MOVE RDF'S BACK TO CI ONE RDF RIGHT
*                                OF WHERE THEY CAME FROM.
           ENDIF
           MVC   0(3,R3),=X'000000' MOVE ZERO'S TO WHERE THERE WAS AN
*                                   RDF.
           OI  STATUS,MOVERDF  SET MOVERDF EQUAL TRUE
           L     R14,BRREG3
           BR    R14
MVETOWK    MVC RDFWORK(0),0(R3)
MVEFRWK    MVC 0(0,R4),RDFWORK
           DROP  R7
RDFWORK    DSECT
SDELVVR    CSECT
**********  UPDCIDF     *********************************************
UPDCIDF    ST    R14,BRREG2
           LH    R3,CIDFSF    CIDFSF :=
           SH    R3,CURRECL              CIDFSF -
           STH   R3,CIDFSF                         CURRECL
           LH    R3,CIDFLF    CIDFLF :=
           AH    R3,CURRECL              CIDFLF +  CURRECL
           IF (TM,STATUS,MOVERDF,O)
             LA  R3,3(R3)         ADD 3 MORE TO FREESPACE FOR RDF.
             NI  STATUS,NMOVERDF  MOVERDF := FALSE
           ENDIF
           STH   R3,CIDFLF    STORE SUM IN CIDFLF.  (LENGTH OF FREES.)
           L     R14,BRREG2
           BR    R14
**********  NEXTREC     *********************************************
NEXTREC    ST    R14,BRREG2
           BAS   R14,PRETEOCI      R3 = CURRECL + RECP - CISTART
           IF    (CH,R3,CIDFSF,LT),OR,(CH,DP,=H'0',EQ)
*            IF NOT END OF CI
             BAS  R14,POSRECP POSITION RECP AND DP TO NEW RDF
             BAS  R14,NEWRDF  TREAT THE NEW RDF AND EVENTUALLY
*                                   REPOSITION THE DP.
           ELSE
             INFORM 'END OF CI REACHED.'
             OI  STATUS,EOCI    SET END OF CI
           ENDIF
           L     R14,BRREG2
           BR    R14
**********  PRETEOCI    *********************************************
PRETEOCI   ST    R14,BRREG3
*          THIS CALCULATION WILL GIVE UNPREDICTABLE RESULT WHEN DP=0
           LH    R3,CURRECL   R3 = CURRECL + RECP - CISTART
           AR    R3,RECP
           S     R3,CISTART
           L     R14,BRREG3
           BR    R14
         B     SLUT
**********  POSRECP     *********************************************
POSRECP    ST    R14,BRREG3
           IF    (CH,DP,=H'0',NE)
*            IS THIS OTHER THAN THE FIRST RECORD
             AH  RECP,CURRECL     MOVE RECORD POINTER TO NEXT RECORD
             IF  (CLI,RDFCODE,SINGLRDF,EQ)
               SH  DP,=H'3'        MOVE DEF POINTER TO NEXT RDF
             ELSE
               IF (CLC,RECCOUNT,=H'1',GT)
                 LH  R3,RECCOUNT  DECREMENT
                 SH  R3,=H'1'       RECORD
                 STH R3,RECCOUNT       COUNTER
               ELSE
                 SH  DP,=H'3'        MOVE DEF POINTER TO NEXT RDF
               ENDIF
             ENDIF
           ELSE
*            THIS IS THE FIRST RECORD
             L   RECP,CISTART     SET RECP EQUAL TO CISTART
             L   DP,CISTART     SET
             AH  DP,CISIZE        DP = CISTART +
             SH  DP,=H'7'                         CISIZE - 7
           ENDIF
           AP    RECNR,=P'1' INCREMENT RECORD NUMBER
           L     R14,BRREG3
           BR    R14
         B     SLUT
**********  NEWRDF      *********************************************
NEWRDF     ST    R14,BRREG3
           IF    (CLI,RDFCODE,LEFTRDF,EQ)
*            IF IT IS A LEFTRDF DO NOTHING
           ELSE
             MVC CURRECL,RDFNUM   CURRECL = THE NUMERIC PART OF RDF
*            THE NUMERIC PART OF A SINGLE OR RIGHT RDF IS RECORD LEN
             IF    (CLI,RDFCODE,RIGHTRDF,EQ)
               SH  DP,=H'3'        MOVE DP TO NEXT RDF. (TO LEFTRDF)
               MVC RECCOUNT,RDFNUM  RECCOUNT = THE NUMERIC PART OF RDF
*              THE NUM PART OF A LEFT RDF IS NUMBER OF RECORDS WITH
*              THE SAME LENGTH. THEIR LENGTH WAS IN RIGHTRDF.
             ENDIF
           ENDIF
           L     R14,BRREG3
           BR    R14
         B     SLUT
**********  EMPTYCI        ********************************************
EMPTYCI    ST    R14,BRREG1
*          LA    R3,L'EMPTYMSG(0)
*          BAS   R14,PRINTMSG
           INFORM 'THIS CI IS EMPTY AND NO FURTHER CHECKING IS DONE.'
           L     R14,BRREG1
           BR    R14
**********  PRINTMSG      *********************************************
*       THIS PROCEDURE          THAT R3 CONTENTS THE LENGTH OF THE
*          MESSAGE AND THE MSG. IS POINTED TO BY R14.LENGTH OF THE
*RINTMSG   ST    R14,BRREGX
*          PUT   SYSPRINT       QSAM FIND BUFFER AND LET R1 POINT ON IT
*          BCTR  R3,0           HUMAN TO MACHINE-LENGTH
*          L     R14,BRREGX    RETURN ADDRESS TO R14
*                     "NO FURTHER LEVELS AFTER THIS INSTR."
*           EX    R3,MOVEMSG     MOVE MSG TO BUFFER. LENGTH IN R3.
*           O     R3,=F'1'       TO ENSURE HALFWORD ALIGNMENT
*           LA    R14,1(R3,R14)  BRANCH BEYOND THE MSG
*          BR    R14
*OVEMSG    MVC   0(0,R1),0(R14)
OPENFSNAP  DS    0H     SNAPP OPEN FAILED
           INFORM 'DDNAME=SNAP OPEN FAILED.'
           B     SLUT
OPENFSYSP  DS    0H     SNAPP OPEN FAILED
           WTO 'SYSPRINT OPEN FAILED.'
           B     SLUT
OPNVVDSF   INFORM 'VVDS IS NOT OPEN.'
           B     SLUT
SLUT       DS    0H
           CLOSE (SNAPP)
           CLOSE (SYSPRINT)
           L     R13,4(R13)
           L     R14,12(R13)
           LM    R0,R12,20(R13)
           BR    R14
           LTORG
SNAPP       DCB DSORG=PS,RECFM=VBA,MACRF=(W),LRECL=125,DDNAME=SNAP,    X
               BLKSIZE=882
SYSPRINT    DCB DSORG=PS,DDNAME=SYSPRINT,RECFM=FB,LRECL=133,MACRF=PL
PARPOINT   DS  F
CISIZE     DC  H'4096'
RECCOUNT   DC  H'0'
CURRECL    DS  H
RECNR      DS  PL2
RBA        DC  F'0000'
DELNAME    DC  44X'99'       CL44'CAT.TEST'
DELRECNR   DC  PL2'0'    THE RECORDNMBR THAT IS GOING TO BE DELETED
MODE       DC  X'0'      FIRST BIT=0 IS SIMULATION MODE ON (DEFAULT)
STATUS     DC  X'0'
CISTART    DS  A      FOR AREA=(*,CISTART) BRUK
NUMTAB     DC 240X'01'
           DC 10X'00'
           DC 6X'01'
VRPL        RPL ACB=VVDS,AM=VSAM,                                      X
               AREALEN=4096,ARG=RBA,                                   X
               OPTCD=(CNV,DIR,UPD)
VVDS       ACB AM=VSAM,MACRF=(CNV,DIR,IN,OUT)
BRREG1     DS    F   SAVE FOR BRANCH REGISTER ON LEVEL 1
BRREG2     DS    F   SAVE FOR BRANCH REGISTER ON LEVEL 2
BRREG3     DS    F   SAVE FOR BRANCH REGISTER ON LEVEL 3
BRREGX     DS    F   THIS IS FOR GLOBAL PROCEDURES
*                       THAT MAY BE CALLED FROM ANY LEVEL
******            DSECT AREA              *************
           DCBD  DSORG=PS
RDF        DSECT
RDFCODE    DS  X
RDFNUM     DS  XL2
CIDF       DSECT
CIDFSF     DS  XL2
CIDFLF     DS  XL2
VVRHEAD    DSECT    VVR HEADER CELL. MAY BE EITHER PRIMARY OR SEC.
VVRLEN     DS  XL2
VVRHDR     DS  0X
           DS  XL8
VVRCMPNL   DS  X
VVRCMPNM   DS  CL44
**************             EQU'S          *******************
LEFTRDF    EQU  X'08'
RIGHTRDF   EQU  X'40'
SINGLRDF   EQU  X'00'
FOUND      EQU  B'10000000'
NFOUND     EQU  B'01111111'
MOVERDF    EQU  B'01000000'
NMOVERDF   EQU  B'10111111'
EOCI       EQU  B'00100000'
WRNGPARM   EQU  B'00010000'
LIVE       EQU  B'10000000'
SIMU       EQU  B'01111111'
VLBIT      EQU  B'10000000'
DP         EQU  5
RECP       EQU  10
CIDFP      EQU  11
           END


Knut Oyvind Mikelsen
Systems Programmer (Norway)                     c Reserved 1990

