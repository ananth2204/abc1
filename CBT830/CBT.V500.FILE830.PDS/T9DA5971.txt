Wait function for REXX

The following code could be used to create an external REXX
function that performs wait processing.

The code is assembled and link-edited as NORENT, NOREUSE,
and AC(0). The module can be put into a LINKLIST-defined
PDS, STEPLIBed PDS, PDS defined to ISPLLIB, etc.

The rules of the function are:

o      The first parameter must either be 'MIN' (minutes), 'SEC'
      (seconds), or 'TEN' (tenths of seconds).

o      The second parameter cannot be more than 4 characters in
      length and must be numeric.

o      Only two parameters are accepted.

o      The wait cannot exceed 5 minutes.

If the parameters passed to the function are not acceptable, a
return code of 4 is loaded which causes an IRX0040I error
message to be issued to the user.

This function will return a result of 'Y' upon successful
completion of the wait. This is done because, unlike a routine, a
function must return a result.

RTIME     CSECT
** LINKAGE
HOUS_KEEP EQU     *                              LABEL HOUS_KEEP
          STM     R14,R12,12(R13)                SAVE CALLER'S REGS
          LR      R12,R15                        ESTABLISH BASE
          USING   RTIME,R12                      ESTABLISH ADDRESSBLTY
          LA      R11,SAVEAREA                   SAVE ADDRESS
          ST      R13,4(R11)                     BACKWARD POINTER
          ST      R11,8(R13)                     FORWARD POINTER
          LR      R13,R11                        CURRENT
**        PROCESS PARMLIST                                           **
PARMLST   EQU     *                              LABEL PARMLST
          USING   EFPL,R1                        MAP EVAL PARM LIST
          L       R2,EFPLEVAL                    LOAD EVAL POINTER
          L       R11,0(R2)                      ADRESS OF EVAL BLOCK
          USING   EVALBLOCK,R11                  MAP EVAL BLOCK
          L       R5,EFPLARG                     LOAD ARG LST PNTR
          USING   ARGTABLE_ENTRY,R5              MAP THE ENTRY
*-        GET/PROCESS 1ST PARM                                       -*
          LM      R2,R3,ARGTABLE_ARGSTRING_PTR   LOAD ARG ADDR/LNGTH
          C       R3,=F'3'                       > 3?
          BNE     INV_CALL                       YES, GOTO INV_CALL
CK_1      CLC     0(3,R2),=C'MIN'                MINUTES?
          BNE     CK_2                           NO, GOTO CK_2
          MVC     MULT(4),=F'00006000'           SET MULT FOR MIN REQ
          B       SECND                          GOTO SECND
CK_2      CLC     0(3,R2),=C'SEC'                SECONDS?
          BNE     CK_3                           NO, GOTO CK_3
          MVC     MULT(4),=F'00000100'           SET MULT FOR SECONDS
          B       SECND                          GOTO SECND
CK_3      CLC     0(3,R2),=C'TEN'                TENTHS?
          BNE     INV_CALL                       NO, GOTO INV_CALL
          MVC     MULT(4),=F'00000010'           SET MULT FOR 10THS
*-        GET     2ND  PARM                                          -*
SECND     EQU     *                              LABEL SECND
          LA      R5,ARGTABLE_NEXT-ARGTABLE_ENTRY(R5) GET NEXT PARM
*                                                ADDR/LENGTH
          CLC     ARGTABLE_ARGSTRING_PTR,=8X'FF' IS THERE ON PRESENT?
          BE      INV_CALL                       NO, GOTO INV_CALL
          LM      R3,R4,ARGTABLE_ARGSTRING_PTR   LOAD PARM ADDR/LENGTH
          CH      R4,=H'4'                       > 4
          BH      INV_CALL                       YES, GOTO INV_CALL
Q_4       CH      R4,=H'4'                       LNGTH = 4?
          BNE     Q_3                            NO, GOTO Q_3
          MVC     ZONED(4),0(R3)                 MOVE INTO ZONED FIELD
          B       CK_PARM                        GOTO PROCESS
Q_3       CH      R4,=H'3'                       LENGTH 3?
          BNE     Q_2                            NO, GOTO Q_2
          MVC     ZONED+1(3),0(R3)               MOVE INTO ZONED FIELD
*                                                RIGHT JUSTIFIED FOR
*                                                PACK INSTR
          B       CK_PARM                        GOTO PROCESS
Q_2       CH      R4,=H'2'                       .
          BNE     Q_1                            .
          MVC     ZONED+2(2),0(R3)               .
          B       CK_PARM                        GOTO PROCESS
Q_1       MVC     ZONED+3(1),0(R3)               .
*-        ENSURE  ONLY 2 PARMS                                       -*
CK_PARM   LA      R5,ARGTABLE_NEXT-ARGTABLE_ENTRY(R5) GET NEXT PARM
          CLC     ARGTABLE_ARGSTRING_LENGTH,=8X'FF'   MORE PARMS?
          BNE     INV_CALL                         YES, GOTO INV_CALL
**        CONVERT ZONED TO BINARY FOR MULITPLICATION                 **
**        MULTIPLY BY MULT VALUE                                     **
**        ISSUE WAIT                                                 **
PROCESS   EQU     *                              LABEL PROCESS
          TRT     ZONED,NUMTAB                   VALID ZONE CHAR?
          BNZ     INV_CALL                       NO, GOTO INV_CALL
          PACK    PACK3(3),ZONED(4)              ZONED TO PACKED
          ZAP     DOUBLE(8),PACK3                SET UP FOR BIN CNV
          CVB     R5,DOUBLE                      CONVERT TO BIN
*                                                LOAD ODD FOR MULT
          M       R4,MULT                        MULT CONTENT OF R5
*                                                WITH MULT VALUE
          C       R5,=F'00030000'                > 5 MINUTES?
          BH      INV_CALL                       YES, GOTO INV_CALL
          ST      R5,TIME                        STORE WAIT INTERVAL
          STIMER  WAIT,BINTVL=TIME               AND BEGIN WAIT
**        LOAD A  RESULT                                             **
RESULT    EQU     *                              LABEL RESULT
          MVC     EVALBLOCK_EVLEN,=F'1'          RETURN VAL LNGTH
          MVI     EVALBLOCK_EVDATA,C'Y'          RETURN 'Y'
**        RETURN                                                     **
RETURN    EQU     *                              LABEL RETURN
          L       R13,4(R13)                     LOAD BACKWARD POINTER
          LA      R15,0                          RC=0
          RETURN  (14,12),RC=(15)                RETURN TO CALLER
**        INVALID CALL TO ROUTINE                                    **
INV_CALL  EQU     *                              LABEL INV_CALL
          MVC     EVALBLOCK_EVLEN,=F'1'          RETURN VAL LNGTH
          MVI     EVALBLOCK_EVDATA,C'N'          RETURN 'N'
          L       R13,4(R13)                     LOAD BACKWARD POINTER
          LA      R15,4                          RC=4
          RETURN  (14,12),RC=(15)                RETURN TO CALLER
**        WORKING STORAGE                                            **
NUMTAB    DC      256X'FF'                       TABLE FOR TRANSLATION
          ORG     NUMTAB+C'0'                    OFFSET F0 INTO TABLE
          DC      10X'00'                        SET TO BIN ZEROS
          ORG     NUMTAB+256                     RESET COUNTER
SAVEAREA  DS      18A                            SAVE AREA
TIME      DS      F                              WAIT TIME
ZONED     DC      X'F0F0F0F0'                    ZONED FIELD
PACK3     DS      PL3                            PACK FIELD
DOUBLE    DS      D                              DOUBLE FOR ZAP
MULT      DS      F                              BIN FIELD FOR SCND PRM
**        MAPS                                                       **
          IRXEFPL
          IRXEVALB
          IRXARGTB
          END     ,

An application of this function may look like this:

/* Rexx - example exec to invoke RTIME wait function                  */
BEGIN :
cnt = '0'   /* init cntr */
LOOP :
/* If dataset is in use then wait for a total of 9 seconds for it     */
/* to free up (in 4.5 second intervals). If after 9 seconds the       */
/* dataset is still in use then terminate the EXEC.                   */
"WHOGOT" 'MY.DATASET'
IF rc Â¬= '0' THEN
DO
  x = RTIME(TEN,45)
  cnt = cnt + '1'
  IF cnt > = '2' THEN SIGNAL CONTENTION
  ELSE CALL LOOP
END
ELSE NOP
EXIT 0000
CONTENTION :
SAY "'MY.DATASET' in use for more than 9 seconds, exec terminated"
EXIT 0004

On average, this wait routine is accurate to within a tenth of a
second depending on the system workload, where you have the
module placed, etc. One can benchmark it by placing a 'SAY
TIME(R)' both before and after the 'X = TIME'.

Scott Gaw
System Support Analyst
Alberta Treasury Branches (Canada)                                c Scott Gaw 19

