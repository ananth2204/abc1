Displaying ESR SVC table entries

ESVCSCAN REXX EXEC

/**rexx**/
/*  Program-id           ESVCSCAN                                  */
/*  Remarks              Expand the ESR SVC entries                */
/*trace i*/
modaddr=  '00000000'x                    /* initialize variables   */
modinfo=  '               '
modrc=    '00000000'x
address "ISPEXEC" "LIBDEF ISPPLIB DATASET ID('USERID.PANELS')"
svctable:
cvt=      c2x(storage(10,4))            /* cvt address             */
cvtabend= d2x((x2d(cvt))+200)           /* cvt + 200 = cvtabend    */
scvt=     c2x(storage(cvtabend,4))      /* scvt @                  */
scvtscvt= d2x(x2d(scvt)+132)            /* scvt + 132 = scvtscvt   */
svctable= c2x(storage(scvtscvt,4))      /* svctable @              */
svctabad= svctable                      /* store for panel output  */
svctable_addr_store= svctable           /* store svc table @       */
esr_svcs.0= 0                           /* set to 0                */
x= 0                                    /* set to 0                */
do i = 0 to 255                         /* process all svc entries */
   svc_table_addr= d2x(x2d(svctable)+4) /* move onto svcattr1      */
   svcattr1= storage(svc_table_addr,1)  /* pick up svcattr1        */
   svcattr=  bitand(svcattr1,'04'x)     /* test for esr svc bit    */
   if (svcattr = '04'x) then do         /* test for esr svc        */
      esr_svcs.0= esr_svcs.0 + 1        /* incr no of esrs found   */
      x= esr_svcs.0                     /* next esr variable       */
      esr_svcs.x= i                     /* svc no                  */
      esr_svc_table_addr.x= svctable    /* esr svc table address   */
   end
   svctable= d2x(x2d(svctable)+8)       /* next svctable entry     */
end
call esrsvc_menu                        /* display esr svcs found  */
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(6)"  /* pop up position    */
do forever                              /* loop forever            */
   ADDRESS "ISPEXEC" "TBDISPL ESVCTAB PANEL(ESVCPAN1)"
   if (rc > 8) then do                  /* error?                  */
      say 'tbdispl error    rc = 'rc''  /* yes- output message     */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(rc)                          /* and quit                */
   end
   if (rc = 8) then do                  /* end?                    */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(rc)                          /* yes- let's quit         */
   end
   do while (ztdsels > 0)               /* user selected a esr svc?*/
      if (csel = '/') then do           /* user selected an esrsvc?*/
         call display_esrsvc            /* yes- let's display it   */
         ztdmark= ' '                   /* no end of table message */
         leave                          /* back to main menu       */
      end
      else
         leave                          /* back to main menu       */
   end
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove menu popup      */
ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"       /* remove allocation      */
exit(0)                                  /* quit                   */
esrsvc_menu:
ADDRESS "ISPEXEC" "TBCREATE ESVCTAB NOWRITE REPLACE"
if (rc >  4) then do                     /* call OK?               */
   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(rc)                              /* let's quit             */
end
csel=       '_'                          /* init                   */
ctype=      ''                           /* init                   */
esrsvc=     ''                           /* init                   */
svcaddr=    ''                           /* init                   */
ztdmark=    ' '                          /* no end of table message*/
ADDRESS "ISPEXEC" "VPUT    (CSEL,ESRSVC,ESRADDR,ZTDMARK) SHARED"
tabrows=  100                            /* max table rows         */
do i= 1 to esr_svcs.0                    /* add the esr svcs to an */
   esrsvc= esr_svcs.i                    /* ispf table             */
   esraddr= esr_svc_table_addr.i         /* addr in svc table      */
   ADDRESS "ISPEXEC" "TBADD ESVCTAB      /* add the entries        */
            SAVE(ESRSVC,ESRADDR)
            MULT("TABROWS")"
   if (rc ¬= 0) then do                  /* call OK?               */
      say 'tbadd error    rc = 'rc''     /* no- inform the user    */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(rc)                           /* let's quit             */
   end
end
ADDRESS "ISPEXEC" "TBTOP ESVCTAB"        /* position to top of tab */
if (rc ¬= 0) then do                     /* call OK?               */
   say 'tbtop error    rc = 'rc''        /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(rc)                              /* let's quit             */
end
return
display_esrsvc:
svctable=  svctable_addr_store          /* store svc table @       */
svctable=  x2d(svctable)                /* convert to decimal      */
esr_svcno= esrsvc                       /* selected esr svc        */
if (esr_svcno > 0) then                 /* calculate the esr svc   */
   esr_svcno= (esr_svcno * 8)           /* table entry position    */
svctable=  svctable + esr_svcno         /* position onto it        */
svctable=  d2x(svctable)                /* back to hex             */
esr_table_addr= storage(svctable,4)     /* the real esr svc table  */
esrraddr= c2x(esr_table_addr)           /* convert to hex for dsply*/
esr_attr_addr=  c2d(esr_table_addr)     /* convert to decimal      */
esr_cnt_addr=   c2d(esr_table_addr)     /* convert to decimal      */
esr_cnt_addr=   esr_cnt_addr + 4        /* no of esr slots         */
esr_cnt_addr=   d2x(esr_cnt_addr)       /* back to hex             */
esrcnt=  storage(esr_cnt_addr,4)        /* move esr cnt            */
esrcnt=  c2d(esrcnt)                    /* convert to decimal      */
esrcnt=  esrcnt + 1                     /* get true value          */
esr_attr_addr=  esr_attr_addr + 12      /* @ svcattr1              */
esr_attr_addr=  d2x(esr_attr_addr)      /* back to hex             */
svcattr=  storage(esr_attr_addr,4)      /* move esr svcattr        */
call calc_svc_type                      /* calculate svc type      */
esr_svcs_addr=  c2d(esr_table_addr)     /* position onto the       */
esr_svcs_addr=  esr_svcs_addr + 8       /* first esr svc           */
esr_svcs_addr=  d2x(esr_svcs_addr)      /* back to hex             */
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(1)"  /* pop up position    */
ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK" /* lock the terminal      */
if (rc > 8) then do                      /* error?                 */
   say 'Lock error    rc = 'rc''         /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(rc)                              /* and quit               */
end
ADDRESS "ISPEXEC" "DISPLAY PANEL(ESVCPAN3)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(rc)                              /* and quit               */
end
call create_esr_svc_entries              /* create table of esrs   */
return
calc_svc_type:                           /* calculate the svc type */
do forever                               /* do forever             */
   svcattr1= substr(svcattr,1,1)         /* svctp                  */
   svcattr1= bitand(svcattr1,'F0'x)      /* test for type 1        */
   if (svcattr1 = '00'x) then do         /* type 1 svc?            */
      svctype= 'Type 1  '                /* yes                    */
      leave                              /* all done               */
   end
   svcattr1= substr(svcattr,1,1)         /* svctp                  */
   svcattr1= bitand(svcattr1,'C0'x)      /* test for type 3/4      */
   if (svcattr1 = 'C0'x) then do         /* type 3/4 svc?          */
      svctype= 'Type 3/4'                /* yes                    */
      leave                              /* all done               */
   end
   svcattr1= substr(svcattr,1,1)         /* svctp                  */
   svcattr1= bitand(svcattr1,'80'x)      /* test for type 2        */
   if (svcattr1 = '80'x) then do         /* type 2 svc?            */
      svctype= 'Type 2  '                /* yes                    */
      leave                              /* all done               */
   end
   svcattr1= substr(svcattr,1,1)         /* svctp                  */
   svcattr1= bitand(svcattr1,'20'x)      /* test for type 6        */
   if (svcattr1 = '20'x) then do         /* type 6 svc?            */
      svctype= 'Type 6  '                /* yes                    */
      leave                              /* all done               */
   end
leave                                    /* all done               */
end
return                                   /* return to caller       */
create_esr_svc_entries:                  /* create table of esrs   */
ADDRESS "ISPEXEC" "TBCREATE ESVCESRS NOWRITE REPLACE"
if (rc >  4) then do                     /* call OK?               */
   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(rc)                              /* let's quit             */
end
ztdmark= '*******      End OF ESR SVC Table Entries       *******'
ADDRESS "ISPEXEC" "VPUT    (ESVCENTS,ZTDMARK) SHARED"
tabrows=  100                            /* max table rows         */
do i = 1 to esrcnt                       /* process all esr entries*/
   esvcents= ' '                         /* init table variable    */
   modaddr=  storage(esr_svcs_addr,4)    /* esr svc @              */
   ADDRESS "LINKPGM" "NUCLOOK MODADDR MODINFO MODRC"
   mrc= c2d(modrc)                       /* convert rc to decimal  */
   if (mrc /= 0) then do                 /* call OK?               */
      say 'NUCLOOK Error  rc = 'mrc' --- Module Info= 'modinfo''
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(mrc)                          /* return to caller       */
   end
   esvcents= c2x(modaddr)                /* module address         */
   esvcents= esvcents||' '               /* space                  */
   esvcents= esvcents||substr(modinfo,1,8)  /* module name         */
   esvcents= esvcents||'  '              /* spaces                 */
   esvcents= esvcents||substr(modinfo,9,7)  /* module location     */
   if substr(modinfo,1,8) = 'IEAVESVC' then do /* spare entry?     */
                                         /* yes-                   */
      esvcents= esvcents||'   *** Entry is available ***'
   end
   else do
      esr_svcs_addr2=  x2d(esr_svcs_addr) /* position onto the     */
      esr_svcs_addr2=  esr_svcs_addr2 + 4 /* svcattr1 field        */
      esr_svcs_addr2=  d2x(esr_svcs_addr2) /* back to hex          */
      svcattr1= storage(esr_svcs_addr2,4) /* svcattr1 word         */
      call examine_svcattr1               /* examine svc attributes*/
      esvcents= esvcents||'    '||svcassit /* svc assist            */
      esvcents= esvcents||'   '||nonpremp /* non-premptive svc   */
      esvcents= esvcents||'    '||arasc   /* ar asc svc            */
      esvcents= esvcents||'  '||apfmode   /* apf mode              */
      esvcents= esvcents||'  '||locks     /* locks                 */
   end
   esr_svcs_addr=  x2d(esr_svcs_addr)     /* position onto the     */
   esr_svcs_addr=  esr_svcs_addr + 8      /* next esr svc          */
   esr_svcs_addr=  d2x(esr_svcs_addr)     /* entry                 */
   ADDRESS "ISPEXEC" "TBADD ESVCESRS      /* add the entries       */
            SAVE(ESVCENTS)
            MULT("TABROWS")"
   if (rc ¬= 0) then do                 /* call OK?                */
      say 'tbadd error    rc = 'rc''    /* no- inform the user     */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(rc)                          /* let's quit              */
   end
end
ADDRESS "ISPEXEC" "TBTOP ESVCESRS"      /* position to top of tab  */
if (rc ¬= 0) then do                    /* call OK?                */
   say 'tbtop error    rc = 'rc''       /* no- inform the user     */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"   /* remove allocation       */
   exit(rc)                             /* let's quit              */
end
ADDRESS "ISPEXEC" "REMPOP"              /* remove lock popup       */
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(1)"  /* pop up position    */
ADDRESS "ISPEXEC" "TBDISPL ESVCESRS PANEL(ESVCPAN2)"
if (rc > 8) then do                     /* error?                  */
   say 'tbdispl error    rc = 'rc''     /* yes- output message     */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"   /* remove allocation       */
   exit(rc)                             /* and quit                */
end
ADDRESS "ISPEXEC" "REMPOP"              /* remove popup            */
return
examine_svcattr1:                       /* examine svc attributes  */
nonpremp= 'No '                         /* default for non-prempt  */
svcattr= substr(svcattr1,1,1)           /* svcattr1                */
svcattr= bitand(svcattr,'02'x)          /* test for non-prempt     */
if (svcattr = '02'x) then do            /* non-prempt svc?         */
   nonpremp= 'Yes'                      /* yes                     */
end
svcassit= 'No '                         /* default for svc assist  */
svcattr= substr(svcattr1,1,1)           /* svcattr1                */
svcattr= bitand(svcattr,'01'x)          /* test for svc assist     */
if (svcattr = '01'x) then do            /* svc assist svc?         */
   svcassit= 'Yes'                      /* yes                     */
end
arasc= 'No '                            /* default for ar asc mode */
svcattr= substr(svcattr1,2,1)           /* svcattr3                */
svcattr= bitand(svcattr,'80'x)          /* test for asc mode?      */
if (svcattr = '80'x) then do            /* svc ar asc?             */
   arasc= 'Yes'                         /* yes                     */
end
apfmode= 'No '                          /* default for ar apfmode  */
svcattr= substr(svcattr1,1,1)           /* svcattr3                */
svcattr= bitand(svcattr,'08'x)          /* test for apf?           */
if (svcattr = '08'x) then do            /* apf?                    */
   apfmode= 'Yes'                       /* yes                     */
end
locks= ''                               /* default for locks       */
svcattr= substr(svcattr1,3,1)           /* svclocks                */
svcattr= bitand(svcattr,'80'x)          /* test for local lock     */
if (svcattr = '80'x) then do            /* local lock?             */
   locks= 'LL,'                         /* yes                     */
end
svcattr= substr(svcattr1,3,1)           /* svclocks                */
svcattr= bitand(svcattr,'40'x)          /* test for cms lock       */
if (svcattr = '40'x) then do            /* cms lock?               */
   locks= locks||'CMS,'                 /* yes                     */
end
svcattr= substr(svcattr1,3,1)           /* svclocks                */
svcattr= bitand(svcattr,'20'x)          /* test for SRM lock       */
if (svcattr = '20'x) then do            /* srm lock?               */
   locks= locks||'OPT,'                 /* yes                     */
end
svcattr= substr(svcattr1,3,1)           /* svclocks                */
svcattr= bitand(svcattr,'10'x)          /* test for salloc lock?   */
if (svcattr = '10'x) then do            /* salloc lock?            */
   locks= locks||'SALLOC,'              /* yes                     */
end
svcattr= substr(svcattr1,3,1)           /* svclocks                */
svcattr= bitand(svcattr,'08'x)          /* test for disp lock,     */
if (svcattr = '08'x) then do            /* disp lock?              */
   locks= locks||'DISP'                 /* yes                     */
end
len= length(locks)                      /* obtain length of locks  */
if (len > 0) then do                    /* length > 0?             */
   comma= substr(locks,len,1)           /* obtain last character   */
   if (comma = ',') then do             /* is it a comma?          */
      locks= overlay(' ',locks,len,1)   /* remove the last comma   */
   end
end
return

PANELS

ESVCPAN1 panel

)ATTR
* TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(52,12)
%
%COMMAND ===>_ZCMD      %      SCROLL ===>_AMT   +
%
%
% SVC Table Address =#z        %
%
%                          Address In SVC Table
)MODEL
  *Z%   ESR= #ESRSVC%          #Z        %
)INIT
.ZVARS= '(SVCTABAD,CSEL,ESRADDR)'
&ZCMD= ' '
&CSEL= '_'
.CURSOR= CSEL
&ZWINTTL=  'Currently Installed ESR SVC''s'
)REINIT
&CSEL= '_'
&ZCMD= ' '
)PROC
&CURPOS= .CURSOR
)END

ESVCPAN2 panel

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(YELLOW)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(77,18)
%
%COMMAND ===>_ZCMD      %                           SCROLL ===>_AMT   +
%
% ESR=#z       %   No of ESR slots=#z   %   ESR Table Address=#z        %
%
* SVC      Module    Module   SVC    NON    AR   APF  Locks
* ADDR      Name      Loc    Assist Preempt ASC
%
)MODEL
#Z                                                                          %
)INIT
.ZVARS= '(SVCTYPE,ESRCNT,ESRRADDR,ESVCENTS)'
&ZCMD= ' '
&ZWINTTL=  'ESR SVC Table List'
)REINIT
&ZCMD= ' '
)PROC
)END

ESVCPAN3 panel

)ATTR
_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)
% TYPE(TEXT)    COLOR(RED)
* TYPE(TEXT)    COLOR(YELLOW)
+ TYPE(TEXT)    COLOR(WHITE)
# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)
? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)
@ TYPE(OUTPUT)  COLOR(RED)
)BODY WINDOW(58,7)
%
%COMMAND ===>_ZCMD      %         SCROLL ===>_AMT   +
%
%    -------------------------------------------------
%    |  ESR SVC Table Search In process. Please Wait |
%    -------------------------------------------------
%
)INIT
&ZCMD= ' '
&ZWINTTL=  'ESR SVC Table Search'
)REINIT
&ZCMD= ' '
)PROC
)END

ASSEMBLER ROUTINE NUCLOOK

         TITLE 'RETRIEVE EP NAME IN NUCLEUS, FLPA MLPA OR PLPA'
ZERO     EQU   X'00'                   ZERO
SPACE    EQU   C' '                    SPACE
SIGNF    EQU   X'F0'                   POSITIVE SIGN
NUCLOOK  CSECT
NUCLOOK  AMODE 31
NUCLOOK  RMODE 24
         BAKR  R14,0                   SAVE CALLER'S ARS + GPRS
*                                      IN THE LINKAGE STACK
         USING NUCLOOK,R12             SET UP PROGRAM BASE REGISTER
         LAE   R12,0(R15,0)             SET UP PROGRAM BASE REGISTER
         LM    R3,R5,0(R1)              PARAMETERS
         USING MODADDR,R3               MODULE ADDRESS
         USING MODINFO,R4               MODULE INFORMATION
         USING RETURNCD,R5              RETURN CODE
GETWORK  EQU   *
         L     R9,=AL4(WORKALEN)        WORK AREA LENGTH
         STORAGE OBTAIN,LENGTH=(R9),ADDR=(R10),SP=0,KEY=8,             X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         LR    R13,R1                   @ THE WORKAREA
         USING SAVEAREA,R13             INFORM THE ASSEMBLER
         LA    R0,SAVEAREA              @ THE WORKAREA
         LA    R1,WORKALEN(0,0)         LENGTH
         LA    R14,=X'00'               ZERO FILL
         SR    R15,R15                  PROPAGATE
         MVCL  R0,R14                   CLEAR THE AREA
         MVC   PREVSA,=C'F1SA'          PUT ACRONYM INTO SAVEAREA
*                                       TO INDICATE STATUS SAVED ON
*                                       THE LINKAGE STACK.
         TITLE 'MAIN PROGRAM CONTROL'
CONTROL  EQU   *
         XC    RC,RC                    CLEAR THE RETURN CODE
         MVC   MODNAME,=8C' '           CLEAR THE RETURN NAME
         MVC   MODLOC,=7C' '            CLEAR THE RETURN LOCATION
         BAS   R2,PARMCHK               CHECK THE MODULE ADDRESS
         LTR   R15,R15                  GOOD RETURN CODE?
         BNZ   RETURN                   NO- LET'S RETURN TO CALLER
         BAS   R2,NUCMOD                CHECK FOR NUCLEUS MODULE
         CH    R15,=H'4'                GOOD RETURN CODE?
         BH    RETURN                   NO- LET'S RETURN TO CALLER
         BL    RETURN                   MODULE FOUND IN THE NUC
         BAS   R2,CMNMOD                CHECK FOR COMMON MODULE
RETURN   EQU   *
         LAE   R1,0(R13,0)              ADDRESS TO FREE
         L     R9,=AL4(WORKALEN)        WORK AREA LENGTH
         STORAGE RELEASE,ADDR=(R1),LENGTH=(R9),SP=0,KEY=8,             X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
         SLR   R15,R15                  SET RC TO ZERO
         PR                             RESTORE CALLER'S ARS
*                                       GPRS 2-14 AND RETURN
*                                       TO CALLER
PARMCHK  EQU   *                        CHECK MODULE ADDRESS
         LA    R15,0(0,0)               GOOD ADDRESS
         ICM   R6,B'1111',MADDR         MODULE ADDRESS
         N     R6,=X'7FFFFFFF'          TURN OFF 31-BIT MODE
         LTR   R6,R6                    NON-ZERO @?
         BNZR  R2                       YES-
         LA    R15,40(0,0)              BAD ADDRESS
         STCM  R15,B'1111',RC           INFORM THE USER
         BR    R2                       RETURN TO CALLER
NUCMOD   EQU   *                        SEE IF MODULE IS IN THE NUCLEUS
         L     R6,MADDR                 MODULE ADDRESS
         LA    R7,CSECTNAM              NAME OF CSECT RETURNED
         NUCLKUP BYADDR,NAME=(R7),ADDR=(R6)
         LTR   R15,R15                  NAME RETURNED?
         BNZ   NSETRC                   NO-
         MVC   MODNAME,CSECTNAM         RETURN MODULE NAME TO CALLER
         MVC   MODLOC,=CL7'NUCLEUS'     MODULE FOUND IN NUCLEUS
         STCM  R15,B'1111',RC           INFORM THE USER
         BR    R2                       RETURN TO CALLER
NSETRC   EQU   *
         CH    R15,=H'8'                CALL ERROR?
         BLR   R2                       NO-
         STCM  R15,B'1111',RC           INFORM THE USER
         MVC   MODNAME,=CL8'NUCLKUP '   MACRO WITH ERROR
         BR    R2                       RETURN TO CALLER
CMNMOD   EQU   *                    SEE IF MODULE IS IN THE COMMON AREA
         MVC   CSVQRY,CSVQARA           MOVE CSVQUERY LIST
         LA    R6,MADDR                 MODULE ADDRESS
         LA    R7,CSVQRY                MACRO AREA
         CSVQUERY INADDR=(R6),SEARCH=LPA,OUTEPNM=CSECTNAM,             X
               OUTATTR3=ATTR3,OUTVALID=PARMOK,MF=(E,(R7),COMPLETE)
         LTR   R15,R15                  NAME RETURNED?
         BNZ   CSETRC                   NO-
         STCM  R15,B'1111',RC           INFORM THE USER
TESTATTR EQU   *
         MVC   MODNAME,CSECTNAM         RETURN MODULE NAME TO CALLER
         MVC   MODLOC,=CL7'PLPA   '     PLPA RESIDENT
         TM    ATTR3,ATTR3B2            PLPA?
         BOR   R2                       YES
         MVC   MODLOC,=CL7'MLPA   '     MLPA RESIDENT
         TM    ATTR3,ATTR3B3            MLPA?
         BOR   R2                       YES
         MVC   MODLOC,=CL7'FLPA   '     FLPA RESIDENT
         TM    ATTR3,ATTR3B4            MLPA?
         BOR   R2                       YES
         MVC   MODLOC,=CL7'CSA    '     CSA  RESIDENT
         TM    ATTR3,ATTR3B5            CSA?
         BOR   R2                       YES
         BR    R2                       RETURN TO CALLER
CSETRC   EQU   *
         CH    R15,=H'4'                MODULE FOUND INFO MISSING?
         BNE   TSTR8                    YES-
         MVC   MODNAME,CSECTNAM         RETURN MODULE NAME TO CALLER
         MVC   RC,=F'44'                INFORM THE USER
         B     TESTATTR                 RETURN MODULE NAME TO CALLER
TSTR8    EQU   *
         STCM  R15,B'1111',RC           INFORM THE USER
         CH    R15,=H'8'                MODULE NOT FOUND?
         BNE   CSVERR                   YES-
         MVC   RC,=F'48'                INFORM THE USER
         BR    R2                       RETURN TO CALLER
CSVERR   EQU   *
         MVC   MODNAME,=CL8'CSVQUERY'   MACRO WITH ERROR
         BR    R2                       RETURN TO CALLER
         LTORG
         CSVQUERY MF=(L,CSVQARA)        CSVQUERY LIST AREA
WORKAREA DSECT
SAVEAREA DS    CL72                     SAVEAREA
PREVSA   EQU   SAVEAREA+4,4             @ OF PREVIOUS SAVEAREA
CSVQRY   DS    CL(CSVQARAL)             CSVQUERY AREA
CSECTNAM DS    CL8                      RETURNED CSECT NAME
ATTR3    DS    X                        ATTRIBUTE 3
ATTR3B0  EQU   X'80'                    RESIDENT ABOVE 16 MEG LINE
ATTR3B1  EQU   X'40'                    JOB PACK AREA RESIDENT
ATTR3B2  EQU   X'20'                    PLPA RESIDENT
ATTR3B3  EQU   X'10'                    MLPA RESIDENT
ATTR3B4  EQU   X'08'                    FLPA RESIDENT
ATTR3B5  EQU   X'04'                    CSA  RESIDENT
ATTR3B6  EQU   X'02'                    NOT PART OF INTERFACE
ATTR3B7  EQU   X'01'                    NOT PART OF INTERFACE
PARMOK   DS    F                        VALID DATA FIELD
WORKALEN EQU   *-WORKAREA               WORK AREA LENGTH
MODADDR  DSECT
MADDR    DS    XL4                      MODULE ADDRESS
MODINFO  DSECT
MODNAME  DS    CL8                      MODULE NAME
MODLOC   DS    CL7                      MODULE LOCATION
RETURNCD DSECT
RC       DS    XL4                      RETURN CODE
         CVT   DSECT=YES,LIST=NO
         END   NUCLOOK


R F Perretta
Systems Programmer (UK)                                                 c Xephon

