Listing dataset definitions

LISTDD is a TSO command processor which shows information
about the datasets allocated to a TSO session, in an easy to read
format. By default, the program will start by showing information
regarding job name, procedure name, and step name. Next, the
allocated files will be shown, showing, for each file name, the
DDNAME, the dataset name, the disposition, and the dataset
organisation. Optionally, the output of the program can be
restricted to a single file name.  In addition the volume serial
number(s) on which the dataset is allocated and DCB information
can be shown.

During assembly, the SYS1.MACLIB, SYS1.AMODGEN, and
SYS1.ASTSOMAC  macro libraries should be used.  The program
should be link-edited into a LINKLIST library. It can also be link-
edited into an ISPF ISPLLIB load library. When link-edited into an
ISPLLIB load library, the command is only available when
executing TSO commands within ISPF.

* LIST DATASETS ALLOCATED TO A TSO SESSION
* SYNTAX:LISTDD ÝFI(FILENAME)¨ DCB VOL
* FI(FILENAME) ÝOPTIONAL¨ IF FILENAME IS SPECIFIED, THEN ONLY
*   DATASET(S) ALLOCATED TO THIS FILENAME WILL BE SHOWN.
* VOL ÝOPTIONAL¨ IF SPECIFIED THE VOLUME ON WHICH THE
*   DATASET IS ALLOCATED WILL BE SHOWN.
* DCB   ÝOPTIONAL¨ IF SPECIFIED THE DCB INFORMATION OF
* THE DATASET WILL BE SHOWN.
LISTDD   CSECT
         STM   R14,R12,12(R13)
         BALR  R12,0
         USING START,R12
START    ST    R13,SAVEAREA+4
         L     R0,=A(SAVEAREA)
         ST    R0,8(R13)
         LR    R13,R0
         B     BEGIN             JUMP OVER PROGRAM IDENTIFICATION
         DC    CL8'LISTDD '
         DC    CL10'&SYSDATE'
         DC    CL10'&SYSTIME'
         DS    0F
SAVEAREA DC    18F'0'
RETCODE  DC    H'0'             RETURN CODE
ON       EQU   X'01'            ON INDICATOR
OFF      EQU   X'00'            OFF INDICATOR
PRESENT  EQU   X'80'            PARAMETER IS PRESENT
BEGIN    DS    0H
*  COPY PARAMETRS FROM COMMAND PROCESSOR
         USING CPPL,R1           COMMAND PROCESSOR PARM LIST
         LA    R5,UPPL           USER UPPL
         USING PPL,R5
*  BUILD SEVEN WORD PARSE PARAMETER LIST
         L     R0,CPPLUPT         USER PROFILE TABLE
         ST    R0,PPLUPT
         ST    R0,IOPLADS
         L     R0,CPPLECT         ENVIRONMENT CONTROL TABLE
         ST    R0,PPLECT
         ST    R0,IOPLADS+4
         L     R0,UECB            USER EVENT CONTROL BLOCK
         ST    R0,PPLECB
         ST    R0,IOPLADS+8
         L     R0,=A(UPCL)        USER PARAMETER CONTROL LIST
         ST    R0,PPLPCL
         L     R0,=A(ANSWER)      ANSWER AREA
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF COMMAND AREA
         SR    R0,R0
         ST    R0,PPLUWA
         CALLTSSR EP=IKJPARS,MF=(E,(R5))
         LTR   R15,R15           CHECK RETURN CODE
         BZ    GETPRM            ZERO, SO IT'S OKAY
*  NON-ZERO RETURN CODE FROM IKJPARS
         STH   R15,RETCODE       SAVE IKJPARS'S RETURN CODE
         PUTLINE PARM=PUTMODEL,                                        X
               OUTPUT=(MSG3,TERM,SINGLE,DATA),                         X
               MF=(E,IOPLADS)    ISSUE ERROR MESSAGE
         B     LEAVE             GO EXIT THE PROGRAM
*  INITIALIZE PROGRAM AND GET PARMS ENTERED BY THE USER
GETPRM   DS    0H
         L     R11,ANSWER        ANSWER AREA'S ADDRESS
         USING IKJPARMD,R11      ESTABLISH ADDRESSABILITY
         TM    FILEPOS+6,PRESENT Q.FILENAME SPECIFIED?
         BNO   GETPR10           A.NO
*  GET FILENAME ENTERED BY USER
         MVI   DDNAME,C' '       A.YES - CLEAR...
         MVC   DDNAME+1(L'DDNAME-1),DDNAME   ...DDNAME
         LH    R0,FILEPOS+4      GET LENGTH OF DDNAME
         L     R1,FILEPOS        GET ADDR OF DDNAME
         BCTR  R0,0              DECREMENT LENGTH
         STC   R0,*+5            SET INSTRUCTION LENGTH
         MVC   DDNAME(0),0(R1)   COPY DDNAME TO MAKE IT EASIER
*  DETERMINE IF VOLUMES WAS SPECIFIED
GETPR10  DS    0H
         LH    R3,VOLUMES
         CH    R3,=H'2'          Q.VOLUMES SPECIFIED?
         BNE   GETPR20           A.NO
         MVI   RQVOLS,ON        A.YES - INDICATE VOLUMES WAS REQUESTED
         B     GETPR30
GETPR20  DS    0H
         MVI   RQVOLS,OFF        NO VOLUME LIST REQUESTED
GETPR30  DS    0H
*  DETERMINE IF DCB INFORMATION WAS REQUESTED
         MVI   RQDCB,OFF         TURN OFF DCB INDICATOR
         LH    R3,DCBINFO
         CH    R3,=H'2'          Q.DCB SPECIFIED?
         BNE   GETPR51           A.NO
         MVI   RQDCB,ON
GETPR51  DS    0H
         USING PSA,R0
         L     R5,PSAAOLD        GET ASCB POINTER
         USING ASCB,R5
         CLC   =C'ASCB',ASCBASCB Q.MVS STILL THE SAME?
         BE    GETPR60           A.YES - OK
         ABEND 3001,DUMP         A,NO - LET'S ABEND
*  DETERMINE JOBNAME, PROCNAME, STEPNAME
GETPR60  DS    0H
         L     R3,ASCBJBNS       GET JOBNAME POINTER
         MVC   MSG1S(8),0(R3)    COPY JOBNAME TO MESSAGE AREA
         DROP  R5
         L     R5,PSATOLD        GET TCB ADDRESS...
         USING TCB,R5            ...TO LOCATE TIOT
         L     R3,TCBTIO         GET TIOT ADDRESS
         USING TIOT1,R3
         MVC   MSG1S+9(8),TIOCSTEP+8    PROCNAME
         MVC   MSG1S+18(8),TIOCSTEP     STEPNAME
         STLINENO LINE=1         CLEAR SCREEN
         BAL   R14,PUTLMSG1      GO DISPLAY JOBNAME/PROCNAME/STEPNAME
         MVI   MSG1S,C'-'        CREATE A SEPARATOR LINE
         MVC   MSG1S+1(L'MSG1S-1),MSG1S
         MVC   MSG1DDN(7),=C'DDNAME '   INSERT TEXT CONSTANTS
         MVC   MSG1DSN(8),=C' DSNAME '
         MVC   MSG1DSP(6),=C' DISP '
         MVC   MSG1ORG(7),=C' DSORG '
         BAL   R14,PUTLMSG1      GO DISPLAY SEPARATOR LINE
*  LET'S DO THE REAL WORK NOW
         L     R5,TCBJSCB        GET JSCB ADDRESS
         USING IEZJSCB,R5
         L     R5,JSCDSABQ       GET QDB ADDRESS
         CLC   =C'DSAB',0(R5)    Q.MVS STILL OK?
         BE    GETPR50           A.YES - OK
         ABEND 3002,DUMP         A.NO - TELL USER SOMETHING WRONG
GETPR50  DS    0H
         L     R5,12(R5)         POINT TO FIRST DSAB
         USING DSAB,R5
*  FOLLOW DSAB CHAIN AND DISPLAY INFORMATION FOUND
FDSAB    DS    0H
         C     (R5),=F'0'        Q.AT END OF CHAIN?
         BE    LEAVE             A.YES - GO LEAVE PROGRAM
         CLC   =C'DSAB',0(R5)    A.CORRECT CONTROL BLOCK?
         BE    FDSAB05
         ABEND 3003,DUMP         INVALID CONTROL BLOCK
FDSAB05  DS    0H
         L     R3,DSABTIOT       GET TIOT POINTER
         USING TIOENTRY,R3
         MVC   MSG2DDN(8),TIOEDDNM COPY DDNAME TO MESSAGE AREA
         SR    R4,R4
         ICM   R4,7,TIOEJFCB     EXPECT BELOW 16M
*  CHECK IF VALID DDNAME
         CLI   TIOEDDNM,C'A'
         BNL   FDSAB10
         CLC   =CL8' ',TIOEDDNM
         BE    FDSAB10
         MVC   MSG2DDN(8),=C'*UNALLC*'
FDSAB10  DS    0H
         CLC   =C'JFCB',12(R4)   Q.CORRECT CONTROL BLOCK?
         BE    FDSAB15
         ABEND 3004,DUMP
FDSAB15  DS    0H
         LA    R4,16(R4)
         USING INFMJFCB,R4
         MVC   MSG2DSN(44),JFCBDSNM DATASET NAME TO MESSAGE AREA
         CLC   =CL8' ',JFCBELNM  Q.MEMBERNAME?
         BE    FDSAB20           A.NO
         BAL   R14,MEMBERN       A.YES - GO GET MEMBERNAME
FDSAB20  DS    0H
         BAL   R14,DISP          GO DETERMINE DISPOSITION
         BAL   R14,DSORG         GO DETERMINE DATASET ORG
         CLC   =CL8' ',DDNAME    CHECK FOR SPECIFIC DDNAME
         BNE   FDSAB30
         BAL   R14,PUTLMSG2
         CLI   RQVOLS,ON         Q.VOLUME LIST REQUESTED?
         BNE   FDSAB2A           A.NO
         BAL   R14,DPVOLS        A.YES - GO DISPLAY VOLUME LIST
FDSAB2A  CLI   RQDCB,ON          Q.DCB INFORMATION REQUESTED?
         BNE   FDSAB99           A.NO
         BAL   R14,DPDCB         A.YES - GO DISPLAY DCB INFO
         B     FDSAB99
*  PROCESS SPECIFIC DDNAME WHEN FOUND
FDSAB30  DS    0H
         CLI   FOUND,OFF
         BNE   FDSAB40
         CLC   DDNAME(8),MSG2DDN Q.IS IT OURS?
         BNE   FDSAB99           A.NO NOT YET
         MVI   FOUND,ON          INDICATE DDNAME FOUND
         BAL   R14,PUTLMSG2
         CLI   RQVOLS,ON
         BNE   FDSAB4A
         BAL   R14,DPVOLS
FDSAB4A  DS    0H
         CLI   RQDCB,ON
         BNE   FDSAB99
         BAL   R14,DPDCB
         B     FDSAB99
FDSAB40  DS    0H
         CLC   =CL8' ',MSG2DDN
         BE    FDSAB45
         MVI   FOUND,OFF
         B     FDSAB99
FDSAB45  DS    0H
         BAL   R14,PUTLMSG2
         CLI   RQVOLS,ON
         BNE   FDSAB50
         BAL   R14,DPVOLS
FDSAB50  DS    0H
         CLI   RQDCB,ON
         BNE   FDSAB99
         BAL   R14,DPDCB
FDSAB99  DS    0H
         L     R5,DSABFCHN
         B     FDSAB
LEAVE    DS    0H
         LH    R15,RETCODE       SET RETURN CODE
         L     R13,SAVEAREA+4    REGISTER CONVENTIONS
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14               THAT'S ALL FOLKS
*  PUTLMSG1: ISSUE MESSAGE 1
         DS    0F
         DC    F'0'              SAVE AREA REGISTER 14
PUTLMSG1 ST    R14,PUTLMSG1-4    SAVE RETURN ADDRESS
         PUTLINE PARM=PUTMODEL,                                        X
               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         X
               MF=(E,IOPLADS)
         MVI   MSG1S,C' '        CLEAR MESSAGE AREA
         MVC   MSG1S+1(L'MSG1S-1),MSG1S
         L     R14,PUTLMSG1-4    GET RETURN ADDRESS
         BR    R14               RETURN TO CALLER
*  PUTLMSG2: ISSUE MESSAGE 2
         DS    0F
         DC    F'0'              SAVE AREA REGISTER 14
PUTLMSG2 ST    R14,PUTLMSG2-4    SAVE RETURN ADDRESS
         PUTLINE PARM=PUTMODEL,                                        X
               OUTPUT=(MSG2,TERM,SINGLE,DATA),                         X
               MF=(E,IOPLADS)
         MVI   MSG2S,C' '        CLEAR MESSAGE AREA
         MVC   MSG2S+1(L'MSG2S-1),MSG1S
         L     R14,PUTLMSG2-4    GET RETURN ADDRESS
         BR    R14               RETURN TO CALLER
         DS    0F          DISP: DETERMINE DATASETS DISPOSITION
         DC    F'0'              SAVE AREA REGISTER 14
DISP     ST    R14,DISP-4
         MVI   MSG2DSP,C' '      CLEAR DISPLAY FIELD
         MVC   MSG2DSP+1(15),MSG2DSP
         TM    JFCBIND2,JFCNEW
         BNO   DISP05
         MVC   MSG2DSP(3),=C'NEW'
         B     DISP90
DISP05   TM    JFCBIND2,JFCMOD
         BNO   DISP10
         MVC   MSG2DSP(3),=C'MOD'
         B     DISP90
DISP10   TM    JFCBIND2,JFCSHARE
         BNO   DISP15
         MVC   MSG2DSP(3),=C'SHR'
         B     DISP90
DISP15   TM    JFCBIND2,JFCOLD
         BNO   DISP90
         MVC   MSG2DSP(3),=C'OLD'
DISP90   DS    0H
         TM    JFCBIND2,JFCTEMP
         BNO   DISP95
         MVC   MSG2TMP(5),=C'TEMP'
DISP95   DS    0H
         CLC   =C'NULLFILE',JFCBDSNM
         BNE   DISP96
         MVC   MSG2DSP(8),=C'PASS,DEL'
DISP96   DS    0H
         L     R14,DISP-4        GET RETURN ADDRESS
         BR    R14               RETURN TO CALLER
*  DSORG: DETERMINE DATASET ORGANIZATION (NOT ALWAYS AVAILABLE)
         DS    0F
         DC    F'0'              SAVE AREA REGISTER 14
DSORG    ST    R14,DSORG-4
         TM    JFCDSRG1,JFCORGPO
         BNO   DSORG05
         MVC   MSG2ORG(2),=C'PO'
         B     DSORG90
DSORG05  TM    JFCDSRG1,JFCORGIS
         BNO   DSORG10
         MVC   MSG2ORG(2),=C'IS'
         B     DSORG90
DSORG10  TM    JFCDSRG1,JFCORGDA
         BNO   DSORG15
         MVC   MSG2ORG(2),C='DA'
         B     DSORG90
DSORG15  TM    JFCDSRG1,JFCORGPS
         BNO   DSORG20
         MVC   MSG2ORG(2),C='PS'
         B     DSORG90
DSORG20  MVC   MSG2ORG(2),=C'**' DSORG UNKNOWN
DSORG90  DS    0H
         L     R14,DSORG-4
         BR    R14
         DS    0F        DPVOLS: DISPLAY VOLUME LIST
         DC    F'0'              SAVE AREA REGISTER 14
DPVOLS   ST    R14,DPVOLS-4
         SR    R7,R7             CLEAR VOLUME COUNT
         IC    R7,JFCBNVOL       GET VOLUME COUNT
         LA    R6,MSG4VOLS       DISPLAY AREA
         MVI   MSG4VOLS,C' '
         MVC   MSG4VOLS+1(L'MSG4VOLS-1),MSG4VOLS
         LA    R8,JFCBVOLS       POINT TO VOLSERS
*  DISPLAY ONLY FIRST SIX VOLUMES (PDS'S ARE SINGLE VOLUME ANYWAY)
DPVOLS10 DS    0H
         CH    R7,=H'0'
         BE    DPVOLS20
         MVC   0(6,R6),0(R8)     COPY VOLSER TO MESSAGE AREA
         LA    R6,6+1(R6)        POINT NEXT VOLSER IN MSG AREA
         LA    R8,6(R8)          NEXT VOLSER IN JFCB
         BCTR  R7,0              DECREMENT VOLUME COUNT
         B     DPVOLS10
DPVOLS20 DS    0H
         PUTLINE PARM=PUTMODEL,                                        X
               OUTPUT=(MSG4,TERM,SINGLE,DATA),                         X
               MF=(E,IOPLADS)
         MVI   MSG4S,C' '
         MVC   MSG4S+1(L'MSG4S-1),MSG4S
         L     R14,DPVOLS-4
         BR    R14
         DS    0F         DPDCB: DISPLAY DCB INFORMATION
         DC    F'0'
DPDCB    ST    R14,DPDCB-4
         MVC   DSCBDSN(DSCBLTH),DSCBDSN-1 CLEAR CAMLST PARMS
         MVI   MSG5RFM,C' '
         MVC   MSG5RFM+1(2),MSG5RFM
         MVI   MSG5LRL,C' '
         MVC   MSG5LRL+1(4),MSG5LRL
         MVI   MSG5BLK,C' '
         MVC   MSG5BLK+1(4),MSG5BLK
         MVC   DSCBDSN(44),JFCBDSNM COPY DATASET NAME
         MVC   DSCBVOL(06),JFCBVOLS COPY FIRST VOLSER ONLY
         OBTAIN DSCBCAM          SEARCHING...
         LTR   R15,R15           Q.OBTAIN OK?
         BNZ   DPDCBEND          A.NO IT FAILED
         LA    R11,DSCBWORK
         USING DS1FMTID,R11
         CLI   DS1FMTID,C'1'     Q.IS IT FORMAT-1 DSCB?
         BNE   DSCBEND           A.NO
*  DETERMINE RECORDING FORMAT
         LA    R1,MSG5RFM
         TM    DS1RECFM,X'C0'
         BZ    CHBIT8            NOTHING AT ALL
         BM    CHBIT5
         MVI   0(R1),C'U'        UNDEFINED
CHBIT6   LA    R1,1(R1)
         B     CHBIT8
CHBIT5   TM    DS1RECFM,X'80'    FIXED?
         BZ    CHBIT7
         MVI   0(R1),C'F'
         B     CHBIT6
CHBIT7   MVI   0(R1),C'V'        VARIABLE
         B     CHBIT6
CHBIT8   TM    DS1RECFM,X'20'    TRACK OVERFLOW?
         BZ    CHBIT9
         MVI   0(R1),C'T'
         LA    R1,1(R1)
CHBIT9   TM    DS1RECFM,X'10'    BLOCKED?
         BZ    CHBIT10
         MVI   0(R1),C'B'
         LA    R1,1(R1)
CHBIT10  TM    DS1RECFM,X'08'    SPANNED?
         BZ    CHBIT11
         MVI   0(R1),C'S'
         LA    R1,1(R1)
CHBIT11  TM    DS1RECFM,X'04'
         BZ    CHBIT12
         MVI   0(R1),C'A'        ASA?
         B     PRTBLK
CHBIT12  TM    DS1RECFM,X'02'
         BZ    PRTBLK
         MVI   0(R1),C'M'        MACHINE?
PRTBLK   DS    0H
         LH    R3,DS1BLKL
         LA    R2,MSG5BLK
         BAL   R14,LFTJXT
         LH    R3,DS1LRECL
         LA    R2,MSG5LRL
         BAL   R14,LFTJXT
         PUTLINE PARM=PUTMODEL,                                        X
               OUTPUT=(MSG5,TERM,SINGLE,DATA),                         X
               MF=(E,IOPLADS)
DPDCBEND DS    0H
         L     R14,DPDCB-4
         BR    R14
LFTJXT   DS    0H
         ST    R14,HOLD
         LA    R1,CALCU+2
         BAL   R14,EDIT
LOOPBIT  CLI   0(R1),C' '
         BNE   FOUNDX
         LA    R1,1(R1)
         B     LOOPBIT
FOUNDX   MVC   0(5,R2),0(R1)
         L     R14,HOLD
         BR    R14
EDIT     CVD   R3,WORK
         S     R1,=F'2'
         MVC   0(L'PAT,R1),PAT
         ED    0(L'PAT,R1),WORK+5
         BR    R14
         DS    0F       MEMBERN: PUT MEMBERNAME IN DATASET NAME
         DC    F'0'
MEMBERN  ST    R14,MEMBERN-4
         TRT   MSG2DSN,BLANKTAB  FIND END OF DATASET NAME
         MVI   0(R1),C'('
         MVC   1(8,R1),JFCBELNM  COPY MEMBERNAME
         TRT   MSG2DSN,BLANKTAB  FIND END OF DSN(MEMBERN
         MVI   0(R1),C')'
         L     R14,MEMBERN-4
         BR    R14
         LTORG
READY    DC    X'00'
FOUND    DC    X'00'
RQVOLS   DC    X'00'
RQDCB    DC    X'00'
DSCBCAM  CAMLST SEARCH,DSCBDSN,DSCBVOL,DSCBWORK
DSCBBL   DC    CL1' '
DSCBDSN  DC    CL44' '
DSCBVOL  DC    CL6''
         DS    0D
DSCBWORK DC    CL140' '
DSCBLTH  EQU   *-DSCBDSN
         DS    0D
WORK     DC    XL15'00'
CALCU    DC    CL10' '
PAT      DC    X'402020202120'
HOLD     DC    F'0'
MSG1     DC    AL2(MSG1E-MSG1)
         DC    AL2(0)
MSG1S    DC    CL79' '
MSG1DDN  EQU   MSG1S+0
MSG1DSN  EQU   MSG1S+8
MSG1DSP  EQU   MSG1S+55
MSG1ORG  EQU   MSG1S+71
MSG1E    EQU   *
MSG2     DC    AL2(MSG2E-MSG2)
         DC    AL2(0)
MSG2S    DC    CL79' '
MSG2DDN  EQU   MSG2S+0
MSG2DSN  EQU   MSG2S+9
MSG2DSP  EQU   MSG2S+56
MSG2TMP  EQU   MSG2S+65
MSG2ORG  EQU   MSG2S+72
MSG2E    EQU   *
DDNAME   DC    CL8' '
MSG3     DC    AL2(MSG3E-MSG3)
         DC    AL2(0)
         DC    C'CALL TO IKJPARS FAILED, CONTACT YOUR SYSTEMS PROGRAMMEX
               R.'
MSG3E    EQU   *
MSG4     DC    AL2(MSG4E-MSG4)
         DC    AL2(0)
MSG4S    DC    CL9' '
MSG4VOLS DC    5CL8' '
MSG4E    EQU   *
*  DCB INFO MESSAGE
MSG5     DC    AL2(MSG5E-MSG5)
         DC    AL2(0)
MSG5S    DC    CL70'         RECFM=    LRECL=      BLKSIZE=     '
MSG5RFM  EQU   MSG5S+6+9   3
MSG5LRL  EQU   MSG5S+16+9  5
MSG5BLK  EQU   MSG5S+30+9  5
MSG5E    EQU   *
         DS    0F
UPPL     DC    7F'0'             USER CONSTRUCTED PPL
UECB     DC    F'0'
ANSWER   DC    F'0'
IOPLADS  DC    4F'0'
PUTMODEL PUTLINE MF=L
BLANKTAB DC    XL256'00'
         ORG   BLANKTAB+C' '
         DC    C' '
         ORG   BLANKTAB+256
UCPL     IKJPARM
DDNPOINT IKJKEYWD
         IKJNAME 'FILE',ALIAS=('F','FI'),SUBFLD=FILESUBF
         IKJNAME 'DDNAME',ALIAS=('DD'),SUBFLD=FILESUBF
VOLUMES  IKJKEYWD DEFAULT='NOVOLUME'
         IKJNAME 'NOVOLUME',ALIAS=('N','NOV','NOVOL','NOVOLS')
         IKJNAME 'VOLUME',ALIAS=('V','VOL','VOLS','VOLUMES')
DCBINFO  IKJKEYWD DEFAULT='NODCB'
         IKJNAME 'NODCB',ALIAS=('NOD','NODC')
         IKJNAME 'DCB',ALIAS=('D','DC')
FILESUBF IKJSUBF
FILEPOS  IKJPOSIT DSNAME,DDNAME,HELP='FILENAME TO BE USED'
         IKJENDP
         IHAPSA
         IHAASCB
         IHADSAB
         IHAASXB
         IKJTCB LIST=YES
         IEZJSCB
         IEFTIOT1
JFCB     IEFJFCBN
         IKJCPPL
         IKJPPL
         CVT   DSECT=YES
DSCB     EQU   *
         IECSDSL1 (1)
DSCBEND  EQU   *-DSCB
         END


Jim Geuther
MVS Systems Programmer
Geuther Software BV (Netherlands) € Jim Geuther 1989

