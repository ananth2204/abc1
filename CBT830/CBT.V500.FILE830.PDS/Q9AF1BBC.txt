SVC calls from PL/I

The following program allows SVCs to be executed from PL/I
programs.  Its main use to date has been for executing installation
SVCs but it could be used for some standard SVCs if the
parameter list is constructed appropriately.

The SVC number and register 0 and register 1 input and output are
passed as parameters on the CALL, while the SVC return code is
placed in register 15 at termination, thus making it available via
the standard built-in function, PLIRETV.

It should be noted that the program must be called as a subroutine
and not as a function.

         TITLE 'SVC execution routine for PL/I'
*  The function of this subroutine is to provide an SVC execution    *
*  facility for PL/I programs.  The routine works by building an SVC
*
*  call in GETMAINed storage then using the EXECUTE instruction to
*
*  invoke it.                                                        *
*  Sample invocation:                                                *
*    DCL PLIRETV BUILTIN;                                            *
*    DCL PLISVC EXT ENTRY OPTIONS(ASM,INTER,RETCODE);                *
*    DCL SVCNUM FIXED BIN (15) INIT(255);                            *
*    DCL (SVCR0,SVCR1) PTR;                                          *
*    DCL RETURN_AREA BASED(SVCR1) UNAL;                              *
*    CALL PLISVC(SVCNUM,SVCR0,SVCR1);                                *
*    IF PLIRETV NE 0 THEN RETURN;                                    *
*    where SVCNUM is the address of a 2 byte integer field
containing*
*                 the SVC number.                                    *
*          SVCR0  is the address of a pointer to the register 0 i/o  *
*                 field.                                             *
*          SVCR1  is the address of a pointer to the register 1 i/o  *
*                 field.                                             *
*    In the example, SVC 255 is invoked with no input required and   *
*    RETURN_AREA maps an area of storage the address of which is
*
*    passed back by the SVC in register 1.                           *
*  Note: PLISVC  should be called as a subroutine NOT as a function. *
* Attributes: re-entrant, reusable, unauthorized, amode=31,
rmode=any*
PLISVC   CSECT
PLISVC   AMODE 31
PLISVC   RMODE ANY
*  Initialization
         SAVE  (14,12),,'PLISVC  &SYSDATE &SYSTIME'
         LR    R12,R15                 .Get entry point
         USING PLISVC,R12              .Use as base addr
         LR    R11,R1                  .Save parm list pointer
         USING PARMLIST,R11            .Address parm list
         GETMAIN RU,LV=LWORK           .Get the workspace
         ST    R13,4(R1)               .Save osa address
         ST    R1,8(R13)               .Save nsa address
         LR    R13,R1                  .Set base reg for workspace
         USING WORK,R13                .Address workspace
*  Set up the SVC call and execute it
         MVC   SVC(2),CSVC             .Initialize reentrant SVC
         L     R2,PRMSVCNO             .Get addr of SVC number
         MVC   SVC+1(1),1(R2)          .Move in SVC number
         L     R2,PRMR0                .Get addr of R0 parm ptr
         L     R0,0(R2)                .Get addr of R0 parm
         L     R2,PRMR1                .Get addr of R1 parm ptr
         L     R1,0(R2)                .Get addr of R1 parm
         SLR   R2,R2                   .Zero R2 (no ORing on EXECUTE)
         EX    R2,SVC                  .EXECUTE the SVC
         LR    R4,R15                  .Save the return code
         L     R2,PRMR0                .Get addr of R0 parm ptr
         ST    R0,0(R2)                .Save R0 for caller
         L     R2,PRMR1                .Get addr of R1 parm ptr
         ST    R1,0(R2)                .Save R1 for caller
*  Termination
         LA    R0,LWORK                .Get GETMAINed area length
         LR    R1,R13                  .Save work area addr
         L     R13,4(R13)              .Get previous save area addr
         FREEMAIN RU,LV=(0),A=(1)      .Free workspace
         LR    R15,R4                  .Load return code into reg 15
         RETURN (14,12),RC=(15)        .Return to caller
*  Constants
CSVC     DC    X'0A',X'00'             .Skeleton SVC instruction
         LTORG
*  Work area
WORK     DSECT
SAVEAREA DS    18F                     .Register save area
SVC      DS    X,X                     .Build and execute SVC here
LWORK    EQU   *-WORK
*  DSECT to map parameter list
PARMLST  DSECT
PRMSVCNO DS    F                       .Addr of halfword SVC no
PRMR0    DS    F                       .Addr of ptr to R0 parameter
PRMR1    DS    F                       .Addr of ptr to R1 parameter
         END


Dr Andrew Carrie
Analyst
Tessella (Abingdon) Ltd (UK) â‚¬ Xephon 1989

