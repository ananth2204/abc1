Automation using MPF


BACKGROUND

MVS's Message Processing Facility (MPF) is an easy to use,
yet flexible, mechanism for performing simple automation
routines. Its most commonly used function is to suppress
unwanted messages from the MVS master console. It is also
frequently used to highlight and retain important messages that,
by default, are rolled and deleted from the screen. These
functions are achieved by a one-line entry in SYS1.PARMLIB
member MPFLSTxx for each message to be processed.


MPF EXITS

For more sophisticated message processing, MPF can make use
of exits to enable decision making and conditional processing.
A frequent use of MPF exits is to issue start commands for
TSO, CICS, and other VTAM applications when the 'IST020I
VTAM INITIALIZATION COMPLETE' message is issued.
The main disadvantage to this is that the commands to be
executed are hard-coded in the exit. A change to a procedure
name, or the addition of a new task, requires the exit to be
modified, assembled, and re-linked, and an LLA refresh or IPL
performed.

In order to remove the hard-coded commands, the exit could be
modified to issue one start command only. The procedure
started by this command would contain further start commands
using the JCL option to issue MVS commands, as shown
below:

      //  START TSO
      //  START CICS
      //  START OMIICOL
      //  EXEC PGM=IEFBR14

The above commands would be all that would be required to
start TSO, CICS, and OMEGAMON when VTAM has
initialized. In this way the hard-coding is removed and the
addition of new tasks or changes to current ones only requires
the procedure member to be updated.


MPF TOKENS

To enhance the flexibility of this technique further the
following exit makes use of a feature of MPF called the
automation token. Although documented, this function is not
widely known and is little used outside automation software.
The automation token is an 8-byte field that is specified in the
MPFLSTxx entry and passed to the MPF routines. In this case,
the token is the name of the task to be started when a particular
message is issued, and the exit issues the required start
command. An entry is placed in MPFLSTxx for the appropriate
message number using two additional parameters: USEREXIT
and AUTO. For example:

      IST020I,RETAIN(NO),SUP(NO),USEREXIT(MPFXIT1),AUTO(TSO)

Using the exit shown below, the above MPFLSTxx entry
would cause the command 'START TSO' to be issued when
'IST020I VTAM INITIALIZATION COMPLETE' was
displayed.

MPFXIT1 is very simple in that the only function it performs is
to issue an MVS START command using the name of the task
in the token. The example given above (VTAM initialization)
is an obvious use and other tasks also display messages on
successful initialization at which point further tasks can be
started (eg CA-ACF2). Software products which utilize log
datasets usually issue a message when a switch has occurred
(eg SMF, DFHSM), whilst others issue a warning message
when a certain threshold has been reached. These message
numbers can be entered into the MPFLSTxx member and
MPFXIT1 used to start a job to archive the collected data.

This aspect of MPF has proved extremely useful and its
flexibility is one of the exit's most valuable features. It can be
used to start any task, following any message. To add, delete,
or update the list is a matter of editing the MPFLSTxx member
in SYS1.PARMLIB and performing the MVS SET command
for the changed MPF list, eg SET MPF=01. Back-out is just as
straightforward (SET MPF=99, for example).

TITLE 'MPFXIT1 - WTO EXIT TO ISSUE COMMAND USING TOKEN'
**********************************************************************
* MPFXIT1     - WTO/WTOR USER EXIT                                   *
*               THIS EXIT ISSUES A 'START' COMMAND USING THE MPF     *
*               AUTOMATION TOKEN PARAMETER AS THE TASK TO BE STARTED.*
*               TO ACTIVATE THIS EXIT THE FOLLOWING CODE SHOULD BE   *
*               INCLUDED IN THE MPFLSTXX MEMBER IN SYS1.PARMLIB:     *
*         "MSGID,SUP(NO),RETAIN(NO),USEREXIT(MPFXIT1),AUTO(STCID)"   *
*               WHERE - STCID IS THE NAME OF PROCEDURE FOR WHICH THE *
*                       START COMMAND SHOULD BE ISSUED.              *
* FUNCTION    - THE EXIT USES THE MGCR MACRO TO ISSUE VARIOUS        *
*               START COMMANDS.                                      *
* ENTRY POINT - MPFXIT1                                              *
* LINKAGE     - VIA BALR. MODULES GETS CONTROL IN 31-BIT MODE.       *
*               ATTRIBUTES : AMODE-31,RMODE-ANY,RENT,AC=1            *
* INPUT       - R1 POINTS TO ADDRESS OF THE CTXT.                    *
*               R13 ADDRESS OF STANDARD SAVEAREA                     *
*               R14 RETURN ADDRESS                                   *
*               R15 ENTRY ADDRESS                                    *
* REG USAGE  -  R5  -  POINTS TO ADDRESS OF CTXT                     *
*               R11 -  MODULE DATA REGISTER                          *
*               R12 -  MODULE BASE REGISTER                          *
*               R13 -  POINTER TO SAVEAREA                           *
*               R14 -  RETURN ADDRESS                                *
* CONTROL BLOCKS -                                                   *
*       NAME      MAPPING MACRO      REASON USED                     *
*       CTXT      IEZVX100          WTO USER EXIT PARM LIST          *
*       MGCR      IEZMGCR           SVC 34 PARAMETER LIST            *
**********************************************************************
MPFXIT1  CSECT
MPFXIT1  AMODE 31                              31-BIT ADDRESSING MODE
MPFXIT1  RMODE ANY                             31-BIT RESIDENCE
         STM   R14,R12,12(R13)                 SAVE CALLER'S REGS
         BALR  R12,0                           ESTABLISH...
         USING *,R12                           ...ADDRESSABILITY
         L     CTXTPTR,0(R1)                   GET ADDRESSABILITY..
         USING CTXT,CTXTPTR                    ...TO CTXT
**********************************************************************
* DYNAMIC STORAGE FOR THIS MODULE OBTAINED BELOW 16-MEG LINE BECAUSE *
* SVC 34 REQUIRES MGCR PARM LIST TO BE IN 24-BIT ADDRESSABLE STORAGE *
**********************************************************************
         GETMAIN RU,LV=DATAEND,SP=229,LOC=BELOW
         LR    R11,R1                          ADDR OF GETMAINED AREA
         USING DATAAREA,R11                    ADDRESS DYNAMIC STORAGE
         ST    R13,SAVEAREA+4                  STORE BACKWARD PTR
         LA    R15,SAVEAREA                    GET ADDR OF SAVEAREA
         ST    R15,8(R13)                      STORE FORWARD PTR
         LR    R13,R15                         R13 => SAVEAREA
         XC    MGCRPL(MGCRLTH),MGCRPL          CLEAR PARM LIST
         MVC   MGCRTEXT(2),START               MOVE IN START COMMAND
         MVC   MGCRTEXT+2(8),CTXTAUTT          MOVE IN AUTOMATION TOKEN
         LA    R1,(MGCRTEXT-MGCRPL)+10         GET MGCRPL LENGTH
         STC   R1,MGCRLGTH                     PUT LGTH IN THE MGCRPL
         SR    R0,R0                           CLEAR R0
         MGCR  MGCRPL                          ISSUE COMMAND
         L     R13,4(R13)                      RESTORE R13
         FREEMAIN RU,LV=DATAEND,A=(R11),SP=229
         LM    R14,R12,12(R13)                 RESTORE CALLER'S REGS
         BR    R14                             RETURN TO CALLER
START    DC    C'S '
DATAAREA DSECT
         DS    0F
SAVEAREA DS    18F'0'                          SAVEAREA
         DS    0F
MGCR     IEZMGCR DSECT=NO
         ORG   MGCRTEXT
         ORG
DATAEND  EQU   *-DATAAREA
CTXTPTR  EQU   5
         IEZVX100
MPFXIT1  END

The exit routine executes as part of the control program and
should not GETMAIN storage for subpools that represent space
within a region. The exit is re-entrant and APF-authorized and
must be linked into a LINKLIST library with AMODE 31,
RMODE ANY. MPFXIT1 has been tested on MVS/XA 2.2.3
and MVS/ESA 3.1.3. Although later levels of MVS permit the
MGCR parameter list to be above the line, the example places
it in 24-bit addressable storage. An LLA refresh and SET
MPF=xx (or IPL) are required to activate the exit initially.


THE FUTURE

As stated earlier, this is a basic implementation of a powerful
feature, which could be expanded in a number of ways.

o      A corresponding exit issuing the MVS STOP command
      could be written.

o      By limiting the started task name to seven characters or
      less, the first character of the token could be reserved for
      the MVS command to be executed, therefore
      AUTO(STSO) would issue 'S TSO' while AUTO(PTSO)
      would issue 'P TSO'.

o      A more sophisticated implementation could use the token
      as a key into a loaded table. The table, constructed from
      another PARMLIB entry, would contain the entire text of
      the command, allowing longer and more complex
      commands to be executed, eg F CICS,CEMT PERF SHUT.

o      In conjunction with another program which issues MVS
      commands, MPFXIT1 could be changed to pass the token
      as a parameter for a specific task, eg 'S CMD,M=token'.
      Task CMD would run the command-issuing program and
      token would represent a PDS member containing the actual
      command(s) to be executed. In this case, the member
      could contain, not only a longer command, but a stream of
      commands. The program to issue these commands would
      use similar logic to that demonstrated above in MPFXIT1,
      ie SVC 34 using the MGCR macro.

Using the above MPF exit, a PARMLIB member, a few started
tasks, and a little lateral thinking, you have the beginnings of a
worthwhile automation suite.

Moira Hunter
Freelance Systems Programmer (UK)                              c Xephon 1993

