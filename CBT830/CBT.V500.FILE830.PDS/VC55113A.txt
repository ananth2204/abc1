IPL code: exploring the Principles of Operation

How many times have you IPLed MVS or some other stand-
alone utility - hundreds, maybe thousands of times? Have you
ever considered what takes place when this request is made?
Have you ever tried to figure out what is happening, but have
been buried by the Principles of Operation? Let's discuss the
procedure while exploring some of the aspects of the Principles
of Operation and how this information might be used to create
your own operating system.

To describe the IPL process would be an article in itself, but a
brief outline of this process should be done to further our
understanding of writing IPLable code. IPL data can reside on
either DASD or tape. In the case of DASD, the READ IPL
channel command is executed when a system load request is
made. IPL records can reside only on the first track (cylinder 0,
track 0) of a DASD volume and include records one and two
(the bootstrap records) and all records (the IPL program
records) following the volume label records. When an IPL is
requested, 24 bytes of record one are loaded into CPU real
storage location 0 and machine execution begins at location 8.
The function of these 24 bytes is to read IPL record two into
storage and transfer control to this data. IPL record two is
larger than record one (up to 144 bytes) and contains enough
information to read the first IPL program record (the first
record following the volume label records, usually record four)
into low storage. When this record has been read in, CPU
execution is transferred to location 0 to begin IPL program
execution. You now have control of the machine!

It is important to note that the only services you have available
to you in your IPL program are those described in the
Principles of Operation. You must load control registers with
values necessary to perform the functions you are trying to
accomplish, you must establish interrupt Program Status Words
(PSWs) for interrupts you want to handle, and you must decide
when your operating system will accept interruptions by setting
and maintaining the various interrupt flags within the active
PSW.

System/370 and System/390 are interrupt-driven architectures.
The fixed-storage locations assigned by the architecture are key
for interrupt-driven requests. Instruction execution proceeds in
a sequential fashion unless a branch is requested or the
hardware experiences an interrupt which the operating system
is currently geared to accept. Mask bits in the PSW in most
cases dictate whether or not the operating system is accepting a
particular interrupt or not, although certain interruptions, such
as those generated by the SVC instruction, cannot be masked
off (ie you are always enabled for an SVC interrupt). Bit 6
(I/O), bit 7 (external), and bit 13 (machine check) are
important PSW interrupt masks.

As an example, when bit 6 in the PSW is set on, operating
system execution is enabled for I/O interrupts. When the
processor receives an I/O interrupt from a peripheral device,
the hardware stores the current PSW at location X'38' and
loads the PSW with the value at location X'78' to continue
execution. When the operating system is finished with the I/O
request, it can return control to the event that was interrupted
by simply reloading the PSW from location X'38'.

Since the possibility exists for multiple simultaneous interrupts
the architecture assigns a hierarchy for the order in which they
will be serviced. The interrupt types and their order of priority
is:

o      Exigent machine check
o      SVC
o      Program
o      Repressible machine check
o      External
o      I/O
      Restart.

I/O is an important component for all operating systems. When
writing native operating system code you do not have the
luxury of using any of the better known MVS access methods
nor do you have an I/O manager such as IOS to initiate and
interpret the results of I/O operations. All operating systems
must contain a component that handles I/O requests. This
component must process incoming requests (both solicited and
unsolicited) as well as drive outgoing requests. The I/O handler
examines the status conditions set as a result of the I/O request
to determine success or failure and to decide whether or not a
failed I/O request should be retried. This information can be
determined from the status of the I/O instructions themselves
and from the control blocks associated with the channel
subsystem.

It is impossible to explain the Principles of Operation
adequately in a few short pages and the brief discussions on the
IPL process, handling interrupts, and managing I/O only
scratch the surface. By examining some functional code it may
be possible to gain a greater understanding of the entire
process. The example application provided, Stand Alone Clip,
does not provide any unique capability - Stand Alone Restore
(from Innovation) and Stand Alone Edit (from New Era) are
just two commercially available products that provide a similar
function as a subset of much more robust applications. What
this application is intended to do is show readers an example of
stand-alone code and provide them with the opportunity to
expand on this code as their time permits. The Stand Alone
Clip (SACLIP) application allows readers to create an IPLable
operating system that is capable of renaming most CKD DASD
volumes that are currently labelled and attached to the IPLed
system.

SACLIP requires a channel-attached 3270 type terminal,
preferably 24 rows by 80 columns (because that's what the
code has been tested with), although the code should also
function on terminals with a greater number of rows (the
display will be limited to 24 rows). The console is selected by
hitting ENTER on a channel-attached terminal when the system
enters a X'1111' wait state.

After the console has been selected, you should receive a
display similar to that in Figure 1. A volume can be renamed
by keying 'R' or 'r' in the command field next to the volume
you want to rename and by keying the new volume serial
number in the blank field following the volume serial number
you want to change and hitting ENTER (see Figure 2). One of
three messages will appear in the upper right-hand corner of
your console subsequent to this action (see Figure 3):

1      VOLUME LABEL xxxxxx CHANGED TO yyyyyy
2      INVALID VOLSER. RENAME REJECTED
3      DEVICE BUSY. RETRY LATER.

Message 1 will be issued if the volume was re-labelled
successfully. Message 2 will be issued if the data in the new
volume serial number field was inconsistent with that of a valid
volume serial number. Message 3 will be issued if the device is
found to be busy (most likely in use or reserved by a second
system in a shared DASD environment).

Scrolling through the volume list is accomplished via PF keys.
PF8/PF20 can be used to scroll down and PF7/PF19 can be
used to scroll up. An output line containing '****** END OF
VOLUME LIST ******' will be shown after the end of the
volume serial number list on the console screen displaying the
final volume serial number.

Any problems detected during program execution will cause a
system wait state. An explanation of the wait codes is provided
in the program comments.

The code has been tested with 3380 and 3390 DASD through
parallel channels only. Results are not available for other
DASD types or for DASD connected to ESCON channels. This
testing is left to those who have access to these configurations.

To place SACLIP on an IPL volume, assemble the code and
save the resulting object code in member SACOBJ of an object
code library. Use the following JCL to create IPL text:

//         EXEC PGM=ICKDSF
//DISK     DD    UNIT=uuuu,VOL=SER=volser,DISP=OLD
//IEAIPL00 DD    DSN=your.object.library(SACOBJ),DISP=SHR
//SYSPRINT DD    SYSOUT=*
//SYSIN    DD    *
  REFORMAT DDNAME(DISK) IPLDD(IEAIPL00) NOVERIFY

The SACLIP program can now be invoked by performing
normal IPL procedures for the unit on which the IPL text was
placed.


SACLIP Program

LOWSTORE START
*   THE FOLLOWING WAIT STATES CAN BE GENERATED FROM THIS PROGRAM:
*      X'BAD0' - A PROGRAM CHECK OCCURRED
*      X'BAD1' - AN ERROR OCCURRED WITH A CRITICAL SENSE OPERATION
*      X'BAD2' - AN ERROR OCCURRED WRITING TO THE SELECTED CONSOLE
*      X'BAD3' - AN ERROR OCCURRED READING FROM THE CONSOLE
*      X'BAD4' - AN ERROR OCCURRED READING THE LABEL RECORD OF THE
*                SELECTED RENAME VOLUME
*      X'BAD5' - AN ERROR OCCURRED WRITING THE LABEL RECORD OF THE
*                SELECTED RENAME VOLUME
*      X'BADC' - THE SELECTED CONSOLE COULD NOT BE LOCATED
*   THIS CODE WILL NOT FUNCTION ON MACHINES RUNNING PRE-XA MICROCODE
         DC    X'0008000000001000'      START EXECUTING AT X'1000'
         DC    4080X'00',F'8192',F'4096' LOW STORAGE AND BASE REGS
SACLIP   CSECT
         LM    R11,R12,4088             ESTABLISH MODULE ...
         USING SACLIP,R12,R11              ADDRESSABILITY
         CLC   CONSCHID(4),=F'0'        A VALID CONSOLE SUBCHANNEL?
         BNE   TOPSTART                 YES - MUST BE A RESTART
         L     R5,VSERTAB               GET ADDRESS OF TABLES
         LR    R0,R5                    GET START ADDRESS
         L     R1,VSERTAB               GET TABLE LENGTH
         A     R1,DEVTAB                ADD DEVICE TABLE LENGTH
         LR    R14,R5                   GET START ADDRESS
         XR    R15,R15                  SET PAD CHARACTER
         MVCL  R0,R14                   INITIALIZE
         L     R5,DEVTAB                GET DEVICE TABLE ADDRESS
         MVC   IPLSCHID(4),X'B8'        SAVE IPL UNIT SUBCHANNEL #
         LCTL  R0,R0,=X'00000040'       SET INTERRUPT KEY
         LCTL  R6,R6,=X'08000000'       ENABLE INTERRUPT SUBCLASS
         MVC   104(8,0),BADWAIT0        SET D/W PSW FOR PGM INTERRUPT
SIDLOOP  L     R1,SID                   GET SUBCHANNEL ID
         STSCH SCHIB                    GET SUBCHANNEL INFO BLOCK
         BC    1,READLBLS               IF NOT FOUND, WE'RE ALL DONE
         OI    SCHFLG2,SCHE             SET ENABLE FLAG
         OI    SCHFLG1,X'20'            ENABLE INTERRUPT SUBCLASS 4
         MSCH  SCHIB                    MODIFY THE SUBCHANNEL
         TSCH  IRB                      IS THERE ANYTHING?
         BC    12,SCHOK                 YES - SUBCHANNEL IS THERE
         NI    SCHFLG2,X'FF'-SCHE       SET DISABLE FLAG
         MSCH  SCHIB                    MODIFY THE SUBCHANNEL
         B     NEXTSCH                  SET NEXT SUBCHANNEL
SCHOK    L     R15,=A(SENSEID)          LOAD CHANNEL PROGRAM ADDRESS
         XC    SNIDAREA(24),SNIDAREA    CLEAR THE DATA AREA
         BAL   R14,IORTN                GO ISSUE THE I/O REQUEST
         C     R15,=F'4'                DCC = 1?
         BNE   CHKZERO                  NO - WON'T NEED SENSE
         L     R15,=A(SENSE)            LOAD CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                ISSUE SENSE TO FREE CONTROLLER
CHKZERO  LTR   R15,R15                  I/O OK?
         BNZ   NEXTSCH                  NO - GO GET NEXT SUBCHANNEL
         MVC   2(2,R5),SCHDEVNO         SAVE DEVICE NUMBER
         STCM  R1,B'0011',0(R5)         SAVE SUBCHANNEL ID
         MVC   16(14,R5),SNIDAREA       SAVE SENSE ID DATA
         MVC   4(12,R5),IRB             SAVE IRB INFORMATION
         LA    R5,DTENTLEN(,R5)         POINT TO NEXT AREA
NEXTSCH  L     R2,SID                   GET SUBCHANNEL ID
         AH    R2,=H'1'                 ADD ONE
         ST    R2,SID                   SAVE NEW SUBCHANNEL ID
         CLC   SID,=X'00010FFF'         THE END?
         BH    READLBLS                 YES - GO READ DASD LABELS
         B     SIDLOOP                  CHECK AGAIN
READLBLS MVC   0(4,R5),XFF              SET END OF TABLE INDICATOR
         L     R5,DEVTAB                GET DEVICE TABLE START ADDRESS
         L     R6,VSERTAB               GET VOLSER TABLE ADDRESS
STRTLOOP CLC   0(4,R5),XFF              END OF TABLE?
         BE    SCRNBLD                  YES - BUILD INITIAL CON OUTPUT
*        CLC   20(2,R5),=X'2305'        A CKD DASD?
*        BE    LBLREAD                  YES - GO READ THE LABEL
         CLC   20(2,R5),=X'3330'        A CKD DASD?
         BE    LBLREAD                  YES - GO READ THE LABEL
         CLC   20(2,R5),=X'3340'        A CKD DASD?
         BE    LBLREAD                  YES - GO READ THE LABEL
         CLC   20(2,R5),=X'3350'        A CKD DASD?
         BE    LBLREAD                  YES - GO READ THE LABEL
         CLC   20(2,R5),=X'3375'        A CKD DASD?
         BE    LBLREAD                  YES - GO READ THE LABEL
         CLC   20(2,R5),=X'3380'        A CKD DASD?
         BE    LBLREAD                  YES - GO READ THE LABEL
         CLC   20(2,R5),=X'3390'        A CKD DASD?
         BE    LBLREAD                  YES - GO READ THE LABEL
         CLC   20(2,R5),=X'9345'        A CKD DASD?
         BE    LBLREAD                  YES - GO READ THE LABEL
NEXTUNIT LA    R5,DTENTLEN(,R5)         POINT TO NEXT TABLE ENTRY
         B     STRTLOOP                 GO - CHECK IT OUT
LBLREAD  MVC   SID+2(2),0(R5)           SET SUBCHANNEL ID
         L     R1,SID                   GET INTERRUPT SUBCHANNEL ID
         L     R15,=A(DASDREAD)         GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                GO DO I/O
         LTR   R15,R15                  I/O WAS OK?
         BNZ   DOSENSE                  NO - GET SENSE INFORMATION
         MVC   8(6,R5),READAREA+4       SAVE VOLSER
         B     NOSENSE                  DON'T DO SENSE
DOSENSE  L     R15,=A(SENSE)            GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                ISSUE I/O
         LTR   R15,R15                  I/O OK?
         BZ    NEXTUNIT                 YES - JUST KEEP GOING
         LPSW  BADWAIT1                 ISSUE BAD I/O WAIT
NOSENSE  STSCH SCHIB                    GET SUBCHANNEL INFORMATION
         NI    SCHFLG1,X'C7'            CLEAR INTERRUPT SUBCLASS
         OI    SCHFLG1,X'10'            ENABLE INTERRUPT SUBCLASS 2
         MSCH  SCHIB                    UPDATE SUBCHANNEL INFORMATION
         UNPK  DEVNO(5),SCHDEVNO(3)     UNPACK IPL DEVICE NUMBER
         NC    DEVNO(4),=4X'0F'         CLEAR HIGH-ORDER NIBBLE
         TR    DEVNO(4),TRTABLE1        TRANSLATE HEX TO CHARACTER
         MVC   0(6,R6),READAREA+4       SAVE VOLSER
         MVC   6(4,R6),DEVNO            SAVE UNIT ADDRESS
         MVC   10(2,R6),0(R5)           SAVE SUBCHANNEL ID
         C     R1,IPLSCHID              THE IPL DEVICE?
         BNE   BYPASS                   NO - DON'T PLUG THAT INFO
         MVC   IPLDEV+13(4),DEVNO       PLUG DEVICE NUMBER
         MVC   IPLVOL+13(6),READAREA+4  PLUG VOLSER
BYPASS   LA    R5,DTENTLEN(,R5)         POINT TO NEXT TABLE ENTRY
         LA    R6,VTENTLEN(,R6)         POINT TO NEXT AREA
         B     STRTLOOP                 CHECK OUT NEXT ENTRY
SCRNBLD  MVC   0(16,R6),XFF             SET END OF TABLE INDICATOR
TOPSTART L     R6,VSERTAB               GET ADDRESS OF VOLSER TABLE
         L     R2,=F'3'                 SET ROW NUMBER
         LR    R1,R2                    SAVE ROW NUMBER
         L     R15,=F'24'               SET COL NUMBER
         BAL   R14,CALCBUFA             GO CALCULATE BUFFER ADDRESS
         LA    R4,CONDATA+HDRLEN        GET AREA ADDRESS
         MVC   0(L'PROT,R4),PROT        MOVE IN INSTRUCTIONS
         MVC   1(2,R4),BUFFADDR         MOVE IN BUFFER ADDRESS
         MVC   5(L'TOPLIST,R4),TOPLIST  MOVE IN HEADER LINE
         LA    R4,L'PROT+L'TOPLIST(,R4) POINT TO NEXT AREA
NEWLINE  CLC   0(16,R6),XFF             END OF TABLE?
         BE    ENDLINE                  YES - PUT IN END LINE
         C     R2,=F'24'                LINE LIMIT?
         BNL   WRITEOUT                 YES - GO WRITE OUT TO CONSOLE
         A     R2,=F'1'                 SET TO NEXT ROW
         LR    R1,R2                    SAVE ROW NUMBER
         L     R15,=F'1'                SET COL NUMBER
         BAL   R14,CALCBUFA             GO CALCULATE BUFFER ADDRESS
         MVC   0(LINELEN,R4),LINEMDL    MOVE IN THE MODEL LINE
         MVC   1(2,R4),BUFFADDR         MOVE IN BUFFER ADDRESS
         LR    R1,R2                    SAVE ROW NUMBER
         L     R15,=F'3'                SET COL NUMBER
         BAL   R14,CALCBUFA             GO CALCULATE BUFFER ADDRESS
         MVC   7(2,R4),BUFFADDR         MOVE IN BUFFER ADDRESS
         MVC   11(6,R4),0(R6)           MOVE IN VOLSER
         MVC   19(4,R4),6(R6)           MOVE IN UNIT ADDRESS
         LR    R1,R2                    SAVE ROW NUMBER
         L     R15,=F'17'               SET COL NUMBER
         BAL   R14,CALCBUFA             GO CALCULATE BUFFER ADDRESS
         MVC   25(2,R4),BUFFADDR        MOVE IN BUFFER ADDRESS
         LA    R4,LINELEN(,R4)          POINT TO NEXT AREA
         LA    R6,VTENTLEN(,R6)         POINT TO NEXT VOLSER
         B     NEWLINE                  PROCESS NEXT LINE
ENDLINE  C     R2,=F'24'                LINE LIMIT?
         BNL   WRITEOUT                 YES - GO WRITE OUT TO CONSOLE
         A     R2,=F'1'                 SET ROW NUMBER
         LR    R1,R2                    SAVE ROW NUMBER
         L     R15,=F'24'               SET COL NUMBER
         BAL   R14,CALCBUFA             GO CALCULATE BUFFER ADDRESS
         MVC   0(L'PROT,R4),PROT        MOVE IN INSTRUCTIONS
         MVC   1(2,R4),BUFFADDR         MOVE IN BUFFER ADDRESS
         MVC   5(L'ENDLIST,R4),ENDLIST  MOVE IN HEADER LINE
         LA    R4,L'PROT+L'ENDLIST(,R4) POINT TO NEXT AREA
WRITEOUT MVC   0(4,R4),CURSOR           MOVE IN THE CURSOR DATA
         LA    R4,4(,R4)                POINT TO END OF DATA
         LA    R3,CONDATA               POINT TO START OF DATA
         SR    R4,R3                    CALCULATE LENGTH
         STCM  R4,B'0111',CONWRITE+5    SAVE LENGTH IN CCW
         TM    FLAG,FIRST               HAVE WE ACCEPTED PREV INT'RPT?
         BZ    WRITESCR                 YES - GO WRITE NEW SCREEN
WTINTRPT MVC   120(8,0),CONOUT          SET CONSOLE INTERRUPT ADDR
         LPSW  WAIT000                  WAIT FOR AN INTERRUPT
WAITIOI  L     R1,X'B8'                 GET INTERRUPT SUBCHANNEL ID
         TSCH  IRB                      GET IRB INFO FOR INT'RPT SCHAN
         TM    IRBDSTAT,IRBDSATN        AN ATTENTION INTERRUPT?
         BZ    WTINTRPT                 NO - GO BACK AND WAIT
         TM    IRBDSTAT,IRBDSUC+IRBDSUEX UNIT CHECK OR UNIT EXCEPTION?
         BNZ   WTINTRPT                 YES - GO BACK AND WAIT
         XC    INPUT(256),INPUT         CLEAR THE INPUT AREA
         L     R15,=A(CONREAD)          GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                GO READ CONSOLE ATTN INDICATOR
         LTR   R15,R15                  GOT IT OK?
         BNZ   WTINTRPT                 NO - GO BACK AND WAIT
         CLI   INPUT,X'7D'              ENTER?
         BNE   WTINTRPT                 NO - GO BACK AND WAIT
         STSCH SCHIB                    GET SUBCHANNEL INFORMATION
         NI    SCHFLG1,X'C7'            CLEAR INTERRUPT SUBCLASS
         OI    SCHFLG1,X'08'            ENABLE INTERRUPT SUBCLASS 1
         MSCH  SCHIB                    UPDATE SUBCHANNEL INFORMATION
         LCTL  R6,R6,=X'60000000'       ACCEPT INTERRUPTS FROM ONLY ...
*                                          CONSOLE & AVAILABLE DASD
NOCONSID ST    R1,CONSCHID              SAVE CONSOLE SUBCHANNEL ID
         L     R15,DEVTAB               GET DEVICE TABLE ADDRESS
CHKCONID CLC   0(4,R15),XFF             END OF TABLE?
         BNE   CHKSCHID                 NO - CHECK FOR CONSOLE MATCH
         LPSW  BADCON                   LOAD DISABLED WAIT PSW
CHKSCHID CLC   CONSCHID+2(2),0(R15)     A MATCH?
         BE    CONFOUND                 YES - USE IT
NEXTDEV  LA    R15,DTENTLEN(,R15)       GET NEXT TABLE ADDRESS
         B     CHKCONID                 CHECK IT OUT
CONFOUND UNPK  CHARCON(5),2(3,R15)      UNPACK CONSOLE ID
         NC    CHARCON(4),=4X'0F'       CLEAR HIGH ORDER NIBBLE
         TR    CHARCON(4),TRTABLE1      TRANSLATE HEX TO CHARACTER
         MVC   IPLDEV+33(4),CHARCON     SAVE IN OUTPUT FIELD
WRITESCR L     R1,CONSCHID              GET CONSOLE SUBCHANNEL ID
         L     R15,=A(CONWRITE)         GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                GO DO I/O
         LTR   R15,R15                  I/O OK?
         BZ    CONWAIT                  YES - GO WAIT FOR CONSOLE INPUT
         LPSW  BADWAIT2                 ISSUE BAD I/O WAIT
CONWAIT  MVC   120(8,0),CONIN           SET CONSOLE INTERRUPT ADDR
         MVC   MSGAREA(L'MSGAREA),CLEARMSG CLEAR THE MESSAGE AREA
         LPSW  WAIT001                  WAIT FOR CONSOLE INPUT
CONINPUT CLC   CONSCHID(4),X'B8'        INTERRUPT FROM OUR CONSOLE?
         BNE   CONWAIT                  NO - GO BACK AND WAIT
         XC    INPUT(256),INPUT         CLEAR THE AREA
         L     R1,X'B8'                 GET INTERRUPT SUBCHANNEL ID
         L     R15,=A(CONREAD)          MOVE IN CHANNEL PROGRAM ADDR
         BAL   R14,IORTN                GO READ INPUT
         LTR   R15,R15                  I/O OK?
         BZ    DOINPUT                  YES - PROCESS THE INPUT
         LPSW  BADWAIT3                 ISSUE BAD I/O WAIT
DOINPUT  CLI   INPUT,X'7D'              ENTER?
         BE    ENTER                    YES - PROCESS ENTERED INFO
         CLI   INPUT,X'F7'              SCROLL UP?
         BE    SCROLLUP                 YES - PERFORM SCROLL UP
         CLI   INPUT,X'C7'              SCROLL UP?
         BE    SCROLLUP                 YES - PERFORM SCROLL UP
         CLI   INPUT,X'F8'              SCROLL DOWN?
         BE    SCROLLDN                 YES - PERFORM SCROLL DOWN
         CLI   INPUT,X'C8'              SCROLL DOWN?
         BE    SCROLLDN                 YES - PERFORM SCROLL DOWN
         B     WRITESCR                 JUST DISPLAY CURRENT SCREEN
ENTER    NI    FLAG,X'FF'-FIRST         RESET FLAG
         CLI   INPUT+3,X'11'            BUFFER ADDRESS INDICATOR?
         BNE   WRITESCR                 NO - JUST REWRITE THE SCREEN
         CLI   INPUT+7,X'11'            BUFFER ADDRESS INDICATOR?
         BNE   WRITESCR                 NO - JUST REWRITE THE SCREEN
         CLI   INPUT+6,X'99'            A RENAME REQUEST?
         BE    CLIP                     YES - GO DO CLIP
         CLI   INPUT+6,X'D9'            A RENAME REQUEST?
         BNE   WRITESCR                 NO - JUST REWRITE THE SCREEN
CLIP     MVC   BUFFADDR(2),INPUT+4      SAVE THE BUFFER ADDRESS
         TR    BUFFADDR(2),TRTABLE2     TRANSLATE BUFFER ADDRESS
         XR    R15,R15                  CLEAR R15
         XR    R14,R14                  CLEAR R14
         IC    R15,BUFFADDR             GET FIRST BYTE OF BUFFER ADDR
         SLDL  R14,6                    SHIFT LEFT 6 BITS
         XR    R14,R14                  CLEAR R14
         IC    R14,BUFFADDR+1           GET LAST BYTE OF BUFFER ADDR
         OR    R15,R14                  CALCULATE BYTE POSITION
         XR    R14,R14                  CLEAR R14
         D     R14,=F'80'               DIVIDE BY LINE LIMIT
         LA    R15,1(,R15)              ADD ONE TO ROW NUMBER
         LR    R1,R2                    GET CURRENT LINE COUNT
         CLC   0(16,R6),XFF             ARE WE AT THE END?
         BNE   NOTEND01                 NO - DON'T REDUCE BY ONE
         BCTR  R1,0                     REDUCE BY ONE
NOTEND01 SR    R1,R15                   SUBTRACT RENAME ROW NUMBER
         A     R1,=F'1'                 ADD ONE
         XR    R0,R0                    CLEAR R0 FOR MULTIPLY
         LA    R13,VTENTLEN             GET LENGTH OF TABLE ENTRY
         MR    R0,R13                   CALCULATE BACKTRACK DISTANCE
         LR    R0,R6                    GET CURRENT TABLE POINTER
         SR    R0,R1                    POINT BACK TO WHERE WE WANT
         LR    R1,R0                    SAVE THE VALUE
         LR    R7,R1                    SAVE THE VALUE
         MVC   SID+2(2),10(R1)          SET SUBCHANNEL ID
         NI    FLAG,255-BLANKFLG        RESET THE FLAG
         LA    R15,INPUT+10             GET START OF VOLSER ADDRESS
         LA    R14,6(,R15)              POINT PAST END OF VOLSER
         OC    0(6,R15),=6C' '          CONVERT TO UPPER CASE
CHARCHK  CLI   0(R15),C' '              A BLANK?
         BE    CHKREST                  YES - THE REST MUST BE BLANKS
         CLI   0(R15),C'A'              TOO LOW?
         BL    VSERERR                  YES - SET UP MESSAGE
         CLI   0(R15),C'Z'              TOO HIGH?
         BNH   FLAGTEST                 NO - THIS CHARACTER IS OK
         CLI   0(R15),C'0'              TOO LOW?
         BL    VSERERR                  YES - SET UP MESSAGE
         CLI   0(R15),C'9'              TOO HIGH?
         BNH   FLAGTEST                 NO - THIS CHARACTER IS OK
VSERERR  MVC   MSGAREA(L'MSGAREA),VSERMSG MOVE IN THE MESSAGE
         B     WRITESCR                 GO WRITE THE SCREEN
CHKREST  OI    FLAG,BLANKFLG            SET THE FLAG
         B     NEXTCHAR                 GO CHECK REST OF FIELD
FLAGTEST TM    FLAG,BLANKFLG            BLANK FLAG SET?
         BO    VSERERR                  YES - THIS IS AN ERROR
NEXTCHAR LA    R15,1(,R15)              POINT TO NEXT BYTE
         CR    R15,R14                  END OF FIELD?
         BL    CHARCHK                  CHECK OUT THE NEXT CHARACTER
         L     R1,SID                   GET INTERRUPT SUBCHANNEL ID
         L     R15,=A(DASDREAD)         GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                GO DO I/O
         LTR   R15,R15                  I/O WAS OK?
         BZ    PLUGVSER                 YES - GO PLUG NEW VOLSER
         C     R15,=F'12'               DEVICE BUSY?
         BE    SETPEND                  YES - SET PENDING MESSAGE
         L     R15,=A(SENSE)            GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                ISSUE I/O
         LPSW  BADWAIT4                 ISSUE BAD I/O WAIT
PLUGVSER MVC   READAREA+4(6),INPUT+10   MOVE IN NEW VOLSER
         L     R15,=A(DASDWRIT)         GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                GO DO I/O
         LTR   R15,R15                  I/O WAS OK?
         BZ    UPDINFO                  YES - WE HAVE SOME UPDATES
         C     R15,=F'12'               DEVICE BUSY?
         BE    SETPEND                  YES - SET PENDING MESSAGE
         L     R15,=A(SENSE)            GET CHANNEL PROGRAM ADDRESS
         BAL   R14,IORTN                ISSUE I/O
         LPSW  BADWAIT5                 ISSUE BAD I/O WAIT
SETPEND  MVC   MSGAREA(L'MSGAREA),PENDMSG MOVE IN THE PENDING MESSAGE
         B     WRITESCR                 GO REWRITE THE SCREEN
UPDINFO  LA    R15,CONDATA+HDRLEN+L'PROT+L'TOPLIST GET VSER AREA ADDR
         LA    R14,CONDATA              GET END OF SCREEN ...
         LA    R14,0(R4,R14)               DATA ADDRESS
VSMTCHLP CLC   DEVHDRLN(6,R15),0(R7)    A MATCH?
         BNE   NXTSCRDV                 NO - POINT TO NEXT SCREEN AREA
         MVC   MSGAREA(L'MSGAREA),CHNGMSG MOVE IN THE CHANGE MESSAGE
         MVC   MSGAREA+13(6),0(R7)      MOVE IN OLD VOLSER
         MVC   MSGAREA+31(6),INPUT+10   MOVE IN NEW VOLSER
         MVC   DEVHDRLN(6,R15),INPUT+10 UPDATE SCREEN AREA
         MVC   0(6,R7),INPUT+10         UPDATE TABLE AREA
         B     WRITESCR                 GO REWRITE THE SCREEN
NXTSCRDV LA    R15,LINELEN(,R15)        POINT TO NEXT AREA
         CR    R15,R14                  AT THE END?
         BNL   WRITESCR                 YES - SOMETHING'S FUNNY
         B     VSMTCHLP                 CHECK THE NEXT ENTRY
SCROLLUP NI    FLAG,X'FF'-FIRST         RESET FLAG
         LR    R1,R2                    SAVE CURRENT SCREEN # OF LINES
         CLC   0(16,R6),XFF             ARE WE AT THE END?
         BNE   NOTEND02                 NO - DON'T REDUCE BY ONE
         BCTR  R1,0                     REDUCE BY ONE
NOTEND02 S     R1,=F'3'                 REDUCE BY HEADER AMOUNT
         A     R1,=F'21'                ADD IN ANOTHER SCREEN
         XR    R14,R14                  CLEAR R14 FOR MULTIPLY
         LA    R15,VTENTLEN             GET LENGTH OF VSER TAB ENTRY
         MR    R14,R1                   MULTIPLY BY # OF LINES
         SR    R6,R15                   BACK UP THAT AMOUNT
         C     R6,VSERTAB               BEFORE THE BEGINNING?
         BH    SCROLLDN                 NO - GO BUILD NEW SCREEN
         B     TOPSTART                 GO START FROM THE TOP
SCROLLDN NI    FLAG,X'FF'-FIRST         RESET FLAG
         L     R2,=F'3'                 SET ROW NUMBER
         LR    R1,R2                    SAVE ROW NUMBER
         L     R15,=F'24'               SET COL NUMBER
         BAL   R14,CALCBUFA             GO CALCULATE BUFFER ADDRESS
         LA    R4,CONDATA+HDRLEN        GET AREA ADDRESS
         MVC   0(L'PROT,R4),PROT        MOVE IN INSTRUCTIONS
         MVC   1(2,R4),BUFFADDR         MOVE IN BUFFER ADDRESS
         MVC   5(L'BLANKLN,R4),BLANKLN  MOVE IN A BLANK LINE
         LA    R4,L'PROT+L'BLANKLN(,R4) POINT TO NEXT AREA
         B     NEWLINE                  GO BUILD A NEW SCREEN
IORTN    EQU   *
*   THIS ROUTINE PERFORMS I/O OPERATIONS.  ON ENTRY TO THIS ROUTINE
*   THE FOLLOWING INFORMATION IS REQUIRED:
*     R1 :  CONTAINS THE SUBCHANNEL ID FOR I/O DEVICE
*     R14:  CONTAINS THE RETURN ADDRESS FROM THIS ROUTINE
*     R15:  CONTAINS THE ADDRESS OF THE CHANNEL PROGRAM
*   ON EXIT, THE FOLLOWING INFORMATION IS RETURNED:
*     R15=00 IF THE I/O COMPLETED SUCCESSFULLY
*     R15=04 IF THE I/O FAILED WITH DCC=1 (PROBABLY NEED A SENSE CMD)
*     R15=08 IF THE I/O FAILED FOR A DIFFERENT REASON
*     R15=12 IF THE DEVICE IS IN A BUSY STATE
         ST    R14,IORTNR14             SAVE RETURN ADDRESS
         NI    FLAG,255-RETRY           RESET THE FLAG
         XC    ORB(8),ORB               CLEAR THE ORB
         MVI   ORBLPM,X'FF'             ENABLE ALL PATHS
         CLI   0(R15),X'04'             A SENSE COMMAND?
         BNE   ALLPATHS                 NO - LEAVE ALL PATHS ENABLED
         STSCH SCHIB                    GET SUBCHANNEL INFORMATION
         NC    ORBLPM(1),SCHLPUM        SET LAST PATH USED MASK
         CLI   ORBLPM,X'00'             ANYTHING SET?
         BE    IOEND                    NO - JUST RETURN
ALLPATHS ST    R15,ORBCPA               SAVE THE CHANNEL PROGRAM ADDR
         MVC   120(8,0),IONEWPSW        LOAD I/O INTERRUPT PSW
STARTIO  SSCH  ORB                      START THE I/O
         BC    8,IORTNLP                IF THIS WAS GOOD, GO LOOP
         BC    4,STATPEND               STATUS IS PENDING
         BC    2,DEVBUSY                DEVICE IS BUSY
IORET08  L     R15,=F'8'                SET RETURN CODE
         B     IORTNEND                 RETURN
IORET04  L     R15,=F'4'                SET RETURN CODE
         B     IORTNEND                 RETURN
STATPEND EQU   *
*   CLEAR THE STATUS AND REISSUE THE I/O
         XC    IRB(16),IRB              CLEAR THE IRB
         TSCH  IRB                      CLEAR ANY OUTSTANDING CONDITION
         B     STARTIO                  GO TRY I/O AGAIN
DEVBUSY  EQU   *
*   IF THE DEVICE IS BUSY IT MUST BE BECAUSE OF ANOTHER SYSTEM.
*   SET A BUSY RETURN CODE AND GO HOME.
         L     R15,=F'12'               SET RETURN CODE
         B     IORTNEND                 RETURN
*   LOOP FOR 2 SECONDS WAITING FOR I/O TO COMPLETE
IORTNLP  STCK  STARTIME                 SAVE STARTING TIME
         SSM   IOWTPSW                  ENABLE FOR I/O
TIMELOOP STCK  CURRTIME                 GET CURRENT TIME
         LM    R14,R15,CURRTIME         GET CURRENT TIME
         SL    R14,STARTIME             SUBTRACT FIRST 4 BYTES
         SL    R15,STARTIME+4           SUBTRACT LAST 4 BYTES
         BC    4,BORROW                 IF BORROW - REDUCE 1ST VALUE
         B     CHKTIME                  GO CHECK TIME
BORROW   SL    R14,=F'1'                REDUCE HIGH ORDER WORD BY ONE
CHKTIME  STM   R14,R15,TIMEDIFF         SAVE TIME DIFFERENCE
         CLC   TIMEDIFF(8),=X'00000001E8480000' MORE THAN TWO SECONDS?
         BL    TIMELOOP                 NO - GET NEXT TIME VALUE
         B     DEVBUSY                  SET DEVICE BUSY RETURN CODE
IORTNWT  LPSW  IOWTPSW                  WAIT FOR I/O TO COMPLETE
IOEND    C     R1,X'B8'                 OUR INTERRUPT?
         BNE   IORTNWT                  NO - GO BACK AND WAIT
         XC    IRB(16),IRB              CLEAR THE IRB AREA
         TSCH  IRB                      TEST RESULT OF I/O
         BC    8,STTSPEND               IF PENDING - CHECK FOR D/E
         BC    4,IORET00                IF NOT - GO HOME
         B     IORET08                  RETURN NON-ZERO
STTSPEND TM    IRBSCHC0,IRBFSSCH        START SUBCHANNEL?
         BNO   NODCC                    NO - CAN'T BE DCC
         TM    IRBSCHC1,IRBSPNDG        STATUS PENDING?
         BNO   NODCC                    NO - CAN'T BE DCC
         TM    IRBSCHC1,IRBSALRT+IRBSPRIM+IRBSSEC ALERT,PRIME,SEC STAT?
         BZ    NODCC                    NO - CAN'T BE DCC
         TM    IRBFLG0,IRBCC3           DEFERRED CONDITION CODE 3?
         BO    IORET08                  YES - RETURN AN ERROR
         TM    IRBFLG0,IRBCC1           DEFERRED CONDITION CODE 1?
         BZ    NODCC                    NO - NOT A DEFERRED COND CODE
         TM    IRBDSTAT,IRBDSUC         UNIT CHECK?
         BZ    IORET04                  NO - INDICATE SENSE NEEDED
         TM    FLAG,RETRY               ALREADY A RETRY?
         BO    IORET04                  YES - INDICATE SENSE NEEDED
         OI    FLAG,RETRY               SET A "WE'VE BEEN HERE" FLAG
         STSCH SCHIB                    GET SUBCHANNEL INFORMATION
         MVC   ORBLPM(1),SCHLPUM        SET TO LAST PATH USED
         B     STARTIO                  GO RETRY THE I/O
NODCC    TM    IRBSCHC1,IRBSPRIM+IRBSSEC PRIMARY OR SECONDARY STATUS?
         BZ    IORET08                  NO - RETURN AN ERROR
         TM    IRBDSTAT,IRBDSUC+IRBDSUEX UNIT CHECK OR UNIT EXCEPTION?
         BNZ   IORET08                  YES - RETURN AN ERROR
         TM    IRBDSTAT,IRBDSDE+IRBDSCE DEVICE END & CHANNEL END?
         BZ    IORET08                  NO - RETURN AN ERROR
         BO    IORET00                  YES - I/O IS DONE
         TM    IRBDSTAT,IRBDSDE         DEVICE END?
         BNO   IORTNWT                  NO - GO WAIT
IORET00  XR    R15,R15                  SET RETURN CODE
IORTNEND L     R14,IORTNR14             GET RETURN ADDRESS
         BR    R14                      RETURN
CALCBUFA BCTR  R1,0                     REDUCE ROW BY ONE
         BCTR  R15,0                    REDUCE COL BY ONE
         MH    R1,=H'80'                MULTIPLY ROW BY 80
         AR    R1,R15                   ADD IN COL
         STC   R1,BUFFADDR+1            SAVE LOW ORDER PART OF BUFADDR
         SRL   R1,6                     SHIFT RIGHT SIX BITS
         STC   R1,BUFFADDR              SAVE HIGH-ORDER PART OF BUFADDR
         NI    BUFFADDR+1,X'3F'         CLEAR BITS 8 & 9
         TR    BUFFADDR(2),TRTABLE2     FIND BUFFER ADDRESS
         BR    R14                      RETURN
BUFFADDR DS    D
STARTIME DS    D
CURRTIME DS    D
TIMEDIFF DS    D
IONEWPSW DC    X'00080000',A(IOEND)
IOWTPSW  DC    X'020A0000',X'00000000'
WAIT000  DC    X'020A0000',X'00001111'
WAIT001  DC    X'020A0000',X'00008888'
BADWAIT0 DC    X'000A0000',X'0000BAD0'
BADWAIT1 DC    X'000A0000',X'0000BAD1'
BADWAIT2 DC    X'000A0000',X'0000BAD2'
BADWAIT3 DC    X'000A0000',X'0000BAD3'
BADWAIT4 DC    X'000A0000',X'0000BAD4'
BADWAIT5 DC    X'000A0000',X'0000BAD5'
BADCON   DC    X'000A0000',X'0000BADC'
CONOUT   DC    X'00080000',A(WAITIOI)
CONIN    DC    X'00080000',A(CONINPUT)
CHARCON  DS    D
IORTNR14 DS    F
IPLSCHID DC    F'0'
CONSCHID DC    F'0'
DEVTAB   DC    F'131072'
VSERTAB  DC    F'65536'
DTENTLEN EQU   32
VTENTLEN EQU   16
SID      DC    F'65536'                 SET TO X'00010000'
         LTORG
FLAG     DC    X'80'
FIRST    EQU   X'80'
RETRY    EQU   X'08'
BLANKFLG EQU   X'01'
TOPLIST  DC    C'****** TOP OF VOLUME LIST ******'
ENDLIST  DC    C'****** END OF VOLUME LIST ******'
BLANKLN  DC    C'                                '
LINEMDL  EQU   *
NOPROT   DC    X'1100001D40'
         DC    C'_'
PROT     DC    X'1100001D60'
DEVHDRLN EQU   *-NOPROT
DEVINFO  DC    C'XXXXXX (XXXX)'
         DC    X'1100001D40'
NEWVSER  DC    C'      '
LINELEN  EQU   *-LINEMDL
CURSOR   DC    X'11C3F113'
CONWRITE CCW   X'05',CONDATA,X'20',DATALEN1
CONDATA  DC    X'F71140401D60'
IPLDEV   DC    C'IPL DEVICE:  XXXX   CONSOLE ID:  XXXX'
         DC    X'11C1501D60'
IPLVOL   DC    C'IPL VOLSER:  XXXXXX                  '
MSGAREA  DC    C'                                     '
HDRLEN   EQU   *-CONDATA
LINESTRT DS    CL(1024)
DATALEN1 EQU   *-CONDATA
CHNGMSG  DC    C'VOLUME LABEL XXXXXX CHANGED TO XXXXXX'
VSERMSG  DC    C'INVALID VOLSER.  RENAME REJECTED.    '
PENDMSG  DC    C'DEVICE IS BUSY.  RETRY LATER.        '
CLEARMSG DC    C'                                     '
TRTABLE1 DC    32D'0'                   256 BYTES ON DBL WORD BOUNDARY
         ORG   TRTABLE1
         DC    C'0123456789ABCDEF'
         ORG   TRTABLE1+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   TRTABLE1+C'0'
         DC    X'00010203040506070809000000000000'
TRTABLE2 DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'  +00
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'  +10
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'  +20
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'  +30
         DC    X'00FFFFFFFFFFFFFFFFFF0A0B0C0D0E0F'  +40
         DC    X'10FFFFFFFFFFFFFFFFFF1A1B1C1D1E1F'  +50
         DC    X'2120FFFFFFFFFFFFFFFF2A2B2C2D2E2F'  +60
         DC    X'FFFFFFFFFFFFFFFFFFFF3A3B3C3D3E3F'  +70
XFF      DC    64X'FF'                              +80
         DC    X'FF010203040506070809FFFFFFFFFFFF'  +C0
         DC    X'FF111213141516171819FFFFFFFFFFFF'  +D0
         DC    X'FFFF2223242526272829FFFFFFFFFFFF'  +E0
         DC    X'30313233343536373839FFFFFFFFFFFF'  +F0
CONREAD  CCW   X'06',INPUT,X'20',1920
DASDREAD CCW   X'07',SEEKDATA,X'40',6
SEARCH   CCW   X'31',SEEKDATA+2,X'40',5
         CCW   X'08',SEARCH,X'40',0
READCCW  CCW   X'06',READAREA,X'20',80
DASDWRIT CCW   X'07',SEEKDATA,X'40',6
WRITSRCH CCW   X'31',SEEKDATA+2,X'40',5
         CCW   X'08',WRITSRCH,X'40',0
         CCW   X'05',READAREA,X'20',80
SENSEID  CCW   X'E4',SNIDAREA,X'20',24
SENSE    CCW   X'04',SENSAREA,X'20',32
SEEKDATA DC    X'00000000000003'
READAREA DS    CL80
SENSAREA DS    XL32
SNIDAREA DS    XL24
INPUT    DS    CL1920
DEVNO    DS    2F
         IHASCHIB DSECT=NO
         IHAIRB DSECT=NO
         IHAORB DSECT=NO
         $REQU
         END




