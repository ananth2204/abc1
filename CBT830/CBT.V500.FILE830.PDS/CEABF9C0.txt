File encryption/decryption under MVS

There are many reasons why a user might need to protect his or
her data. An MVS user can encrypt/decrypt files (eg EXECs,
source files, data files, personal data, etc) using the SPF edit macro
listed below.

An equivalent PL/I version written using dialog management
services is also listed. You can use the PL/I macro to decrypt a file
that has been encrypted using the REXX macro or vice versa.

This macro should be invoked under the SPF editor. The syntax is
as follows:

      EC password              REXX macro
     !EC password              PL/I macro

Passwords can be of any chosen length. When first invoked, the
password encrypts the file. When re-invoked using the same
password (do not forget the password, otherwise you may not be
able to get back to the original file), the file is decrypted.

The hexadecimal strings in line 'A' of the PL/I macro are
X'1234567890ABCDEF' and X'11'.

REXX MACRO

/* REXX  */
/*trace i*/
address ISPEXEC
"ISREDIT MACRO (pswd)";upper pswd
if pswd='' then exit 255
else pswd=bitxor(pswd,'1234567890ABCDEF'x,'11'x)
pswdlen=length(pswd)
"ISREDIT (lrecl) = LRECL"
"ISREDIT AUTOSAVE OFF"
"ISREDIT CAPS OFF"
pswd=copies(pswd,lrecl % pswdlen +1)
"ISREDIT (n) = LINENUM .ZLAST"
do i=1 to n
   "ISREDIT (x) = LINE "i;x=strip(x,'t')
   if x='' then iterate
   curlen=length(x);x=left(bitxor(x,pswd),curlen)
   "ISREDIT LINE "i" = (x)"
end i
"ISREDIT AUTOSAVE ON"
"ISREDIT CAPS ON"
exit 0

PL/I MACRO

EC: PROC OPTIONS(MAIN);
DCL
   ISPLINK ENTRY OPTIONS(ASM,INTER,RETCODE),
   UPPER ENTRY(CHAR(*) VAR) RETURNS(CHAR(255) VAR),
   STRIPT ENTRY(CHAR(*) VAR) RETURNS(CHAR(255) VAR),
   BIXTOR ENTRY(CHAR(*) VAR,CHAR(*) VAR,CHAR(*) VAR)
   RETURNS(CHAR(255) VAR),
   COPIES ENTRY(CHAR(*) VAR,FIXED BIN(15)) RETURNS(CHAR(255) VAR),
   LEFT ENTRY(CHAR(*) VAR,FIXED BIN(15)) RETURNS(CHAR(255) VAR),
   (LENGTH,PLIRETC) BUILTIN,
   1 WS,
     2 I       FIXED BIN(31),
     2 CURLEN  FIXED BIN(15),
     2 LEN0    FIXED BIN(31,0) INIT(0),
     2 LEN4    FIXED BIN(31,0) INIT(4),
     2 LEN70   FIXED BIN(31,0) INIT(70),
     2 LEN255  FIXED BIN(31,0) INIT(255),
     2 LENX    FIXED BIN(31,0),
     2 PARM    CHAR(70),
     2 STR     CHAR(255) VAR,
     2 PSWD    CHAR(255) VAR,
     2 PSWDLEN FIXED BIN(15),
     2 LRECL   FIXED BIN(31),
     2 N       FIXED BIN(31),
   X CHAR(LRECL) CTL;
DO;
   CALL ISPLINK('VDEFINE','(PARM)',PARM,'CHAR',LEN70);
   CALL ISPLINK('VDEFINE','(LRECL)',LRECL,'FIXED',LEN4);
   CALL ISPLINK('VDEFINE','(N)',N,'FIXED',LEN4);
   CALL ISPLINK('VDEFINE','(I)',I,'FIXED',LEN4);
   CALL ISPLINK('ISREDIT',LENO,'ó MACRO (PARM) ó');
   STR=PARM;PSWD=UPPER(STRIPT(STR));
   IF PSWD='' THEN DO;CALL PLIRETC(255);RETURN;END;
   PSWD=BITXOR(PSWD,'see note',' ');                /* <--- line 'A' */
   PSWDLEN=LENGTH(PSWD);
   CALL ISPLINK('ISREDIT',LENO,'ó (LRECL) = LRECL ó');
   CALL ISPLINK('ISREDIT',LENO,'ó AUTOSAVE OFF ó');
   CALL ISPLINK('ISREDIT',LENO,'ó CAPS OFF ó');
   ALLOCATE X;LENX=LRECL;
   CALL ISPLINK('VDEFINE','(X)',X,'CHAR',LENX);
   PSWD=COPIES(PSWD,LRECL / PSWDLEN +1);
   CALL ISPLINK('ISREDIT',LENO,'ó (N) = LINENUM .ZLAST ó');
   DO I=1 TO N;
      CALL ISPLINK('ISREDIT',LENO,'ó (X) = LINE &I ó');
      STR=X;STR=STRIPT(STR);IF STR='' THEN GOTO L;
      CURLEN=LENGTH(STR);X=LEFT(BITXOR(STR,PSWD,''),CURLEN);
      CALL ISPLINK('ISREDIT',LENO,'ó LINE &I = (X) ó');
 L:END;
END;
END EC;
BITXOR: PROC(STR1,STR2,PAD) RETURNS(CHAR(255) VAR);
DCL
   (STR1,STR2,PAD) CHAR(*) VAR,
   COPIES ENTRY(CHAR(*) VAR,FIXED BIN(15)) RETURNS(CHAR(255) VAR),
   (bool,length,substr,addr) builtin,
   (WSTR1,WSTR2) CHAR(N) CTL,
   STR3 CHAR(255) VAR,
   (C1,C2,C3) CHAR(1),
   C1B BIT(8) BASED(ADDR(C1)),
   C2B BIT(8) BASED(ADDR(C2)),
   C3B BIT(8) BASED(ADDR(C3)),
   1 WS,
     2 nopad bit(1),
     2 (I,N,N1,N2) FIXED BIN(15);
DO;
   nopad='0'b;
   N1=LENGTH(STR1);
   N2=LENGTH(STR2);
   IF (N1=N2) THEN DO;
      N=N1;
      ALLOC WSTR1;ALLOC WSTR2;
      WSTR1=STR1;WSTR2=STR2;
   END;
   ELSE IF (PAD='') THEN DO;
      nopad='1'b;
      n=n1;
      IF N1>N2 THEN n=n2;
      ALLOC WSTR1;ALLOC WSTR2;
      WSTR1=STR1;WSTR2=STR2;
   END;
   ELSE DO;
      n=n1;
      IF N1<N2 THEN n=n2;
      ALLOC WSTR1;ALLOC WSTR2;
      IF N1<N2 THEN DO;
         I=N2-N1+1;WSTR1=STR1||COPIES(PAD,I);WSTR2=STR2;
      END;
      ELSE DO;
         I=N1-N2+1;WSTR1=STR1;WSTR2=STR2||COPIES(PAD,I);
      END;
   END;
   STR3='';
   DO I=1 TO N;
      C1=SUBSTR(WSTR1,I,1);
      C2=SUBSTR(WSTR2,I,1);
      C3B=BOOL(C1B,C2B,'1001'B);
      STR3=STR3||C3;
   END;
   FREE WSTR1,WSTR2;
      if nopad then do;
         IF N1<N2 THEN
            STR3=STR3||substr(str2,n1+1);
         else
            STR3=STR3||substr(str1,n2+1);
      end;
      RETURN(STR3);
   END;
   END;
   UPPER: PROC(STR) RETURNS(CHAR(80) VARYING);
      DCL STR CHAR(*) VARYING, TRANSLATE BUILTIN,
      sl char(26) init('abcdefghijklmnopqrstuvwxyz'),
      CL ChaR(26) INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
      return(translate(str,cl,sl));
   END;
   STRIPT: PROC(STR) RETURNS(CHAR(255) VAR);
   DCL STR CHAR(*) VAR,(I,L) FIXED BIN(15);
      L=LENGTH(STR);
      IF L=0 THEN RETURN('');
      DO I=L TO 0 BY -1 WHILE (SUBSTR(STR,I,1)=' ');END;
      IF I=0 THEN RETURN('');
      RETURN(SUBSTR(STR,1,I));
   END STRIPT;
   COPIES: PROC(STR,N) RETURNS(CHAR(255) VAR);
   DCL
      STR CHAR(*) VAR,
      N FIXED BIN(15),
      WSTR CHAR(255) VAR;
   DO;
      WSTR='';
      DO I=1 TO N;
         WSTR=WSTR||STR;
      END;
      RETURN(WSTR);
   END;
   END;
   LEFT: PROC(STR,N) RETURNS(CHAR(255) VAR);
   DCL
      STR CHAR(*) VAR,
      N FIXED BIN(15),
      WSTR CHAR(N) CTL,
      WSTR2 CHAR(255) VAR;
   DO;
      ALLOCATE WSTR;WSTR=STR;WSTR2=WSTR;FREE WSTR;RETURN(WSTR2);
   END;
   END;


Ilyas M Shaikh
Systems Programmer
King Fahd University of Petroleum and Minerals (Saudi Arabia)

