The direct use of REXX services


INTRODUCTION

One useful, but little used, feature of REXX is the ease with
which REXX EXECs can be invoked by programs written in
conventional programming languages.  For example, the
powerful parsing facilities could be used to extract operands
from a data string with the stack being used to pass data
between the REXX EXEC and the program.  The REXX
EXEC can be either an integral part of the program or it can be
loaded externally.

The following sample program uses REXX to:

o      Display the message 'enter input:'.

o      Display the number of elements currently in the queue.

o      Accept input from either the stack (queue) or terminal, as
appropriate.

o      Parse this input into two variables, P1 and P2, using a
      comma as delimiter.

o      Set these two variables into the stack.

The program uses the REXX IRXSTK service to retrieve the
stack variables - each variable is retrieved individually and
displayed with the TSO TPUT service.  Please note that the
stack variable must be moved to an intermediate work area in
order for it to be displayed with TPUT as TPUT only allows
24-bit addressing.


SAMPLE PROGRAM

REXX0    CSECT
* initialize addressing
         STM   14,12,12(13)       save registers
         BALR  12,0               base register
         USING *,12
         LA    15,SA              A(save-area)
         ST    13,4(15)           backward ptr
         ST    15,8(13)           forward ptr
         LR    13,15              A(new save-area)
         B     SA_END             jump over save-area
SA       DS    18A                save-area
SA_END   DS    0H
         LOAD  EP=IRXEXEC
         LR    15,0
         CALL  (15),                                                   X
               (ZERO,AARGLIST,FLAGS,AINSTBLK,ZERO,ZERO,ZERO,ZERO),VL
* get stack entries
         LOAD  EP=IRXSTK
         LR    2,0                save entry-point address
READLOOP LR    15,2
         CALL  (15),                                                   X
               (PULL,DATAPTR,DATALEN,FRC),VL
         LTR   15,15              test Return Code
         BNZ   EOJ
* display
         LM    0,1,DATALEN
         MVC   BUFF,0(1)          move to internal buffer
         TPUT  BUFF,(0)
         B     READLOOP
EOJ      L     13,4(13)           restore A(old save-area)
         RETURN (14,12)
PULL     DC    CL8'PULL'
DATALEN  DS    F
DATAPTR  DS    A
FRC      DS    F                  function return code
BUFF     DS    CL256
ZERO     DC    A(0)               zero constant
AARGLIST DC    A(ARGLIST)
ARGLIST  DC    2F'-1'             null ARGLIST
FLAGS    DC    X'80000000'        exec being invoked as command
         DS    0F    align
AINSTBLK DC    A(INSTBLK)         pointer to INSTBLK
INSTBLK  DC    CL8'IRXINSTB'      block identifier
         DC    F'128'             L(INSTBLK header)
         DS    F                  reserved
         DC    A($INSTBLK)        address of first INSTBLK entry
         DC    A($INSTBLK_L)      total length of INSTBLK entries
         DC    CL8' '             member name (unused)
         DC    CL8' '             DD name (unused)
         DC    CL8'MVS'           subcom
         DS    F                  reserved
         DC    F'0'               L(DSN), unused
         DC    CL54' '            DSN, unused
         ORG   INSTBLK+128
* INSTBLK entry
$INSTBLK DC    A(STMT1,L'STMT1)
         DC    A(STMT2,L'STMT2)
         DC    A(STMT3,L'STMT3)
         DC    A(STMT4,L'STMT4)
         DC    A(STMT5,L'STMT5)
         DC    A(STMT6,L'STMT6)
$INSTBLK_L EQU (*-$INSTBLK)       total length
* INSTBLK in-r
STMT1    DC    C'SAY "enter input:"'
STMT2    DC    C' SAY QUEUED()'
STMT3    DC    C' PARSE PULL P1 "," P2'
STMT4    DC    C' SAY QUEUED() P1'
STMT5    DC    C' PUSH P1'
STMT6    DC    C' PUSH P2'
         END


A S Rudd (Germany)                              c A S Rudd 1991

