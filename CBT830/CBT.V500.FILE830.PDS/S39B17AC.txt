Assembler programming standards

XXXXXXXX CSECT
XXXXXXXX AMODE 24
XXXXXXXX RMODE 24
         COPY  C#REGS                  REGISTER EQUATES
         PRINT NOGEN                   NO MACRO EXPANSION PRINTING
         STM   RE,RC,12(RD)            STORE REGS IN SAVEA CALLER
         LR    RB,RF                   LOAD
         LA    RC,4095(RB)                  BASE
         LA    RC,1(RC)                          REGISTERS
         USING XXXXXXXX,RB,RC          RB, RC ARE BASE REGISTERS
         EYECATCH                      BRANCH AROUND MODULE DATA
         ST    RD,SAVEAREA+4           KEEP A(SAVEA CALLER)
         LR    R9,RD                   COPY A(SAVE CALLER) TO R9
         LA    RD,SAVEAREA             RD POINTS TO OWN SAVEAREA
         ST    RD,8(R9)                STORE A(OWN SAVEAREA) IN CALLERS
*
         STAM  R0,RF,SAVE_AR           KEEP ALL ACCESS REGISTERS
         LAM   R0,RF,PRIMARY           SET ALL ACCESS REGISTERS TO ZERO
*
         XR    R2,R2                   R2 = 0
         IAC   R2                      R2 = ADDRESS SPACE CONTROL
         ST    R2,AS_MODE              KEEP ADDRESS SPACE CONTROL
*
         PR#MODE                       SET PRIMARY MODE
*
         LR    R2,R1                   KEEP R1
         AMODE24
         EJECT
*
* START OF PROCESSING:
*
         ...
         EJECT
*
* END OF PROCESSING
*
THE_END  DS    0H                      MY ONLY FRIEND, THE END
         MVC   THE_ENDX+2(1),AS_MODE+2 RESET ADDRESS MODE CALLER
THE_ENDX DS    0H
         SAC   0    ||||||||| INSTRUCTION MODIFIED ABOVE |||||||||
*
         LAM   R0,RF,SAVE_AR           RESET ALL ACCESS REGISTERS
         LA    RD,SAVEAREA             RD -> SAVEAREA
         L     RD,4(RD)                RD -> SAVEAREA CALLER
         LM    RE,RC,12(RD)            RESTORE REGISTERS
         XR    RF,RF                   RETURN CODE 0
         BSM   R0,RE                   RETURN TO CALLER
         EJECT
*
* SECTION: VARIABLES AND CONSTANTS
*
SAVEAREA DS    18F
SAVE_AR  DS    16F                     SAVEAREA ACCESS REGISTERS
PRIMARY  DC    16F'0'                  INITIALIZE ACCESS REGISTERS
AS_MODE  DS    F                       KEEP AS_MODE CALLER
         EJECT
*
* SECTION: LITERALS
*
         LTORG
         END

         MACRO
*
* THIS MACRO SETS THE AMODE OF YOUR PROGRAM TO 31
*
* THE CONTENT OF REGISTER 1 IS DESTROYED
*
&LABEL   AMODE31
         LA    R1,M&SYSNDX            R1 -> M_SYSNDX
         O     R1,L&SYSNDX            SET FIRST BIT ON
         BSM   R0,R1                  BRANCH AND SET MODE
L&SYSNDX DS    0F                     KEEP TOGETHER WITH NEXT DC
         DC    X'80000000'            SET FIRST BIT ON
M&SYSNDX DS    0H
*
         MEND

         MACRO
*
* THIS MACRO SETS THE AMODE OF YOUR PROGRAM TO 24
*
* THE CONTENT OF REGISTER 1 IS DESTROYED
*
&LABEL   AMODE24
         LA    R1,M&SYSNDX            R1 -> M_SYSNDX
         N     R1,L&SYSNDX            SET FIRST BIT OFF
         BSM   R0,R1                  BRANCH AND SET MODE
L&SYSNDX DS    0F                     KEEP TOGETHER WITH NEXT DC
         DC    X'7FFFFFFF'            SET FIRST BIT OFF
M&SYSNDX DS    0H
*
         MEND

         MACRO
&LABEL   EYECATCH
         B     M&SYSNDX                SKIP BRANCH AROUND DCS
         DC    C'JAN DE DECKER --- JED:SP N.V.'
         DC    C' MODULE: '
         DC    CL8'&SYSECT'            MODULE NAME
         DC    C' ASM DATE: '
         DC    CL8'&SYSDATE'           DATE
         DC    C' ASM TIME: '
         DC    CL8'&SYSTIME'           TIME
*
M&SYSNDX DS    0H
         MEND

         MACRO
*
* THIS MACRO SWITCHES TO PRIMARY REGISTER MODE
*
&LABEL   PR#MODE
         SAC   0                       SWITCH TO PRIMARY MODE
         SYSSTATE ASCENV=P             SET GLOBAL BIT FOR PRIMARY MODE
*
         MEND

         MACRO
*
* THIS MACRO SWITCHES TO ACCESS REGISTER MODE
*
&LABEL   AR#MODE
         SAC   512                     SWITCH TO ACCESS REGISTER MODE
         SYSSTATE ASCENV=AR            SET GLOBAL BIT FOR AR MODE
*
         MEND

     MVC 0(3,R2),=C'JAN'

SAVEAREA DS    18F
*
* BAD WAY: AS LONG AS SAVEAREA STAYS AHEAD, A_PARM IS ON A FULLWORD
*          BOUNDARY
*
A_PARM   DS    X
         DS    AL3

SAVEAREA DS    18F
*
* GOOD WAY
*
A_PARM   DS    0F               THIS MUST BE ON A FULLWORD BOUNDARY
         DS    X                THIS CODE NEEDS TO KEPT TOGETHER
         DS    AL3              THIS IS THE 3 BYTE PARAMETER.

         GETMAIN RC,                   REQUEST STORAGE UNCONDITIONAL   X
               LV=ONE_KILO             FOR THIS AMOUNT
               .
               .
               .
         FREEMAIN R,                   RELEASE STORAGE                 X
               LV=ONE_KILO             FOR THE OBTAINED AMOUNT
               .
               .
               .
*
* CONSTANTS
*
ONE_KILO EQU   1024

Jan de Decker
Senior Systems Programmer
JED:SP NV (Belgium)                                                           c

