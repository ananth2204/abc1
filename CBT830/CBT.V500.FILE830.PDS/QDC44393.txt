PDS change analysis

THE PROBLEM

As an MVS systems programmer working in a multiple MVS
environment under VM, dual CPUs, VTAM multi-domains,
and multi-session manager environment, I have found it
increasingly easy to make changes on systems for which the
change was not intended.  VTAM and the multi-session
manager allow me to be extremely productive by working at a
single terminal and logging on to any number of MVS
production/test systems.  Since I can toggle back and forth
among them using a PF key and they basically look the same
from the operating systems perspective, it is easy to make a
change on one that was intended for another.  Moreover,
considering that there are numerous systems programmers
working in this environment, the chance of something going
wrong unnoticed is great enough to cause some degree of
concern among those responsible.  Of course, if the worst
should happen and a system is rendered non-IPLable, recovery
plans are in place to get out of the situation.  In an effort to
head off the possibility of an inadvertent change finding its way
into a system, one additional automated step can be taken.

THE SOLUTION

I have written a program that gets to the heart of change control
management, ie knowing what has changed, when it was
changed, and who changed it.  The program can be
implemented in a variety of situations.  One way happens to be
in the area of ISPF-maintained, operating system-related,
partitioned datasets.  The basic concept of the program is to list
out members of a partitioned dataset that have changed since a
given point in time.  In this case, the point in time by default is
the last successful IPL date and time.  This sync point is used
because it is assumed that everything would have been in a
workable or IPLable state.  Any changes made since then could
potentially affect the success of the next IPL.  Datasets which
become candidates for this kind of analysis are
SYS1.PARMLIB, SYS1.PROCLIB, SYS1.VTAMLST, and
other libraries that are integral to the operating system.  In
addition to printing out a summary of all members that have
changed, the program by default prints a dump of each member
that has changed.  On the 'members changed' summary, which
goes to output DD SHRTPRNT, the member name, date and
time of change, and the person who made the change are listed.
In addition, at the beginning of the listing, a summary of what
dataset was analysed along with the date and time used is
available for quick reference.  The longer, more
comprehensive, full member dump goes to output DD
LONGPRNT.  This can be turned off using PARM='NOPRT'
if the longer listing is not desired.  To make the program more
flexible, it is also possible to override the date and time used as
a sync point for analysing changes.  This is accomplished using
a PARM='DATE=yyddd,TIME=hhmm', where yyddd is the
Julian date and hhmm is the 24-hour clock time.  Any
combination of the NOPRT, DATE=, and TIME= parameters
can be coded.  Typically, I run this program against a number
of PDSs a couple of times a week.  The output can quickly be
checked to determine whether everything is legitimate.  This is
also a good way to stay abreast of changes other systems
programmers are making but forgetting to convey to the rest of
us.  Figure 1 shows a typical SHRTPRNT summary report.
Note that each PDS being analysed would be contained in its
own unique step.

PDSANLYZ SOURCE CODE

PDSANLYZ  CSECT
          STM     R14,R12,12(R13)    SAVE
          LA      R14,0(R13)              CALLERS
          BAL     R13,84(R15)                     REGISTERS
          USING   *,R13
          DS      18F
          ST      R14,4(R13)         SAVE ADDRESS OF CALLERS SAVE AREA
          ST      R13,8(R14)         SAVE ADDRESS OF OUR SAVE AREA
          L       R4,0(R1)           GET PARM LENGTH ADDRESS
          LH      R5,0(R4)           LENGTH OF PARM DATA
          LTR     R5,R5              IS IT ZERO?
          BZ      PDS0060            YES, NO PARM
          LA      R5,2(R5,R4)        END OF PARM DATA
          LA      R4,2(,R4)          PARM ADDRESS
PDS0010   CLC     0(5,R4),=C'NOPRT'  NOPRT PARM?
          BE      PDS0020            YES, GO SET FLAG
          CLC     0(5,R4),=C'DATE='  DATE PARM?
          BE      PDS0040            YES, GO SET FLAG
          CLC     0(5,R4),=C'TIME='  TIME PARM?
          BE      PDS0030            YES, GO SET FLAG
          B       PDS0240            BAD PARM
PDS0020   MVI     PRTFLAG,C'1'       SET NOPRINT FLAG
          B       PDS0050
PDS0030   MVC     PARMTME,5(R4)      SAVE THE PARM TIME
          MVI     TIMEFLAG,C'1'      SET THE TIME FLAG
          LA      R4,4(,R4)          JUMP OVER TIME=
          B       PDS0050
PDS0040   MVC     PARMDTZN,5(R4)     SAVE THE PARM DATE
          PACK    PARMDTPK,PARMDTZN  PACK PARM DATE
          MVI     DATEFLAG,C'1'      SET THE DATE FLAG
          LA      R4,5(,R4)          JUMP OVER DATE=
PDS0050   LA      R4,5(,R4)          POSITION TO NEXT PARM, IF ANY
          CR      R4,R5              AT END?
          BE      PDS0060            GET OUT IF NO MORE PARMS
          CLI     0(R4),C','         SHOULD BE A COMMA HERE
          BNE     PDS0240            IF NOT, NO GOOD
          LA      R4,1(,R4)          POSITION TO ACTUAL PARM
          B       PDS0010            GO SEE WHO IT IS
PDS0060   MVI     JFCB,C' '          BLANK OUT
          MVC     JFCB+1(175),JFCB             JFCB
          MVI     LINE-1,C' '        BLANK OUT
          MVC     LINE,LINE-1                  PRINT LINE
          MVC     LINE(47),HEADLNE1  GET HEADER1 READY
          CLI     PRTFLAG,C'1'       IS THERE ANY LONG PRINT?
          BE      PDS0070            IF NOT, DON'T OPEN IT
          OPEN    (LONGPRNT,(OUTPUT)) OPEN LONG PRINT
PDS0070   OPEN    (SHRTPRNT,(OUTPUT)) OPEN SHORT PRINT
          PUT     SHRTPRNT,LINE       PUT OUT THE HEADER LINE
          MVI     LINE-1,C' '         BLANK OUT
          MVC     LINE,LINE-1                   PRINT LINE
          MVC     LINE(14),=C'DATASET USED: ' GET READY MESSAGE
          RDJFCB  MF=(E,EXRDJFCB)     READ THE JFCB
          LTR     R15,R15             WAS IT A GOOD READ?
          BZ      PDS0080             YES
          B       PDS0250             NO, GET OUT
PDS0080   LA      R15,LINE+14         POSITION INTO LINE FOR DATASET
          MVC     0(44,R15),JFCB      MOVE IN THE DATASET
          LA      R15,44(,R15)        SKIP OVER THE DATASET
PDS0090   CLI     0(R15),C' '         FIND OUT
          BNE     *+8                          WHERE DATASET
          BCT     R15,PDS0090                                ENDS
          MVC     2(2,R15),=C'ON'    CONTINUE BUILDING MESSAGE
          MVC     5(6,R15),JFCB+118  MOVE IN THE VOLUME
          PUT     SHRTPRNT,LINE      PRINT THE DATASET/VOLUME MESSAGE
          OPEN    (DIRBLK,,SYSLIB)   OPEN THE PDS
          LA      R14,SYSLIB         KEEP DCB ADDRESS
          USING   IHADCB,R14
          SLR     R1,R1              CLEAR REG 1
          ICM     R1,3,DCBBLKSI      GET BLOCK SIZE FOR GETMAIN
          MVC     BLKSIZE,DCBBLKSI   SAVE BLOCK SIZE FOR FREEMAIN
          DROP    R14
          GETMAIN RU,LV=(1)          GET AREA THE SIZE OF BLKSIZE
          STCM    R1,15,PDSBFR       SAVE GETMAINED ADDRESS
          L       R1,16              CVT ADDRESS
          L       R2,196(,R1)        SMF CONTROL BLOCK ADDRESS
          LA      R6,340(,R2)        IPL DATE
          LA      R7,336(,R2)        IPL TIME
          LA      R8,IPLTIME         WILL BE UNPACKING TO HERE
          L       R1,0(,R7)          LOAD THE IPL TIME (BINARY FORMAT)
          SLR     R0,R0              ZERO REG 0
          D       R0,=F'360000'      GET NUMBER
          CVD     R1,DOUBLE                     OF MINUTES
          OI      DOUBLE+7,X'0F'                           IN IPL TIME
          UNPK    0(2,R8),DOUBLE+6(2) UNPACK MINUTES INTO IPLTIME
          LR      R1,R0               REG 0 HAS # OF HOURS (BINARY)
          SLR     R0,R0               ZERO REG 0
          D       R0,=F'6000'         GET NUMBER
          CVD     R1,DOUBLE                      OF HOURS
          OI      DOUBLE+7,X'0F'                          IN IPL TIME
          UNPK    2(2,R8),DOUBLE+6(2) UNPACK HOURS INTO IPLTIME
          MVI     LINE-1,C' '         BLANK OUT
          MVC     LINE,LINE-1                   PRINT LINE
          MVC     LINE(11),=C'DATE USED: '  PREPARE FOR NEXT MESSAGE
          LA      R15,LINE+11         POSITION FOR DATE MOVE
          CLI     DATEFLAG,C'1'       WAS THERE A PARM DATE SUPPLIED?
          BE      PDS0100             IF YES, GO PRINT IT
          UNPK    PARMDTZN(5),1(3,R6) UNPACK THE IPL DATE
          MVC     5(19,R15),=C' (DEFAULT FROM IPL)' INDICATE DEFAULT
PDS0100   MVC     0(5,R15),PARMDTZN   MOVE PROPER DATE TO PRINT LINE
          PUT     SHRTPRNT,LINE       PRINT THE DATE USED
          MVI     LINE-1,C' '         BLANK OUT
          MVC     LINE,LINE-1                   PRINT LINE
          MVC     LINE(11),=C'TIME USED: ' GET READY FOR NEXT MESSAGE
          LA      R15,LINE+11         POSITION FOR TIME MOVE
          CLI     TIMEFLAG,C'1'       WAS THERE A PARM TIME SUPPLIED?
          BE      PDS0110             IF YES, GET IT
          MVC     0(4,R15),IPLTIME    USE THE IPL TIME
          MVC     4(19,R15),=C' (DEFAULT FROM IPL)' INDICATE DEFAULT
          B       PDS0120             GO PRINT TIME
PDS0110   MVC     0(4,R15),PARMTME    MOVE IN PARM TIME
PDS0120   PUT     SHRTPRNT,LINE       PRINT TIME MESSAGE
          MVI     LINE-1,C' '         BLANK OUT
          MVC     LINE,LINE-1                   PRINT LINE
          PUT     SHRTPRNT,LINE       PRINT BLANK LINE
          MVC     LINE(37),HEADLNE2   PRINT
          PUT     SHRTPRNT,LINE             HEADER 2
          MVC     LINE(37),HEADLNE3   PRINT
          PUT     SHRTPRNT,LINE             HEADER 3
          MVI     LINE-1,C' '         BLANK OUT
          MVC     LINE,LINE-1                   PRINT LINE
PDS0130   GET     DIRBLK              READ A DIRECTORY RECORD
          LR      R3,R1               SAVE ADDRESS OF RECORD
          USING   PDS2,R3
          SLR     R1,R1               ZERO REG 1
          ICM     R1,3,0(R3)          GET LENGTH OF DATA
          LA      R5,0(R1,R3)         ADDRESS END OF RECORD
          LA      R3,2(R3)            ADDRESS OF FIRST MEMBER
PDS0140   CLC     PDS2NAME,=8X'FF'    AT END?
          BE      PDS0260             IF YES, GET OUT
          NI      PDS2INDC,X'1F'      TURN OFF UNNEEDED BITS
          SLR     R11,R11             ZERO REG 11
          ICM     R11,1,PDS2INDC      GET LENGTH OF USER DATA
          SLL     R11,1               MULTIPLY BY 2
          LA      R2,30               30 MUST BE LENGTH FOR SPF STATS
          CR      R11,R2              DOES THIS HAVE SPF STATS?
          BNE     PDS0190             IF NOT, SKIT IT
          MVC     PDSSPFST(30),PDS2USRD SAVE SPF STATS
          L       R9,PDSUTIME         LOAD UPDATE TIME
          SRL     R9,12               SHIFT RIGHT PREPARING FOR UNPACK
          LA      R12,15              GET AN F FOR OR
          OR      R9,R12              OR RIGHT BYTE TO F
          ST      R9,DOUBLE+4         STORE THE PACKED TIME
          UNPK    SPFTIME(4),DOUBLE+5(3) UNPACK THE TIME
          L       R8,PDSUDATE         GET THE PDS UPDATE DATE
          CLI     DATEFLAG,C'1'       IS THERE A PARM DATE?
          BNE     PDS0150             IF NOT, CHECK IPL DATE
          C       R8,PARMDTPK         COMPARE SPF AND PARM DATE
          BL      PDS0190             IF LESS THAN, DON'T WANT
          BNE     PDS0180             IF GREATER THAN, PRINT IT
          B       PDS0160             EQUAL, MUST CHECK TIME ALSO
PDS0150   C       R8,0(,R6)           COMPARE SPF AND IPL DATE
          BL      PDS0190             IF LESS THAN, DON'T WANT
          BNE     PDS0180             IF GREATER THAN, PRINT IT
PDS0160   CLI     TIMEFLAG,C'1'       IS THERE A PARM TIME
          BNE     PDS0170             IF NOT, CHECK IPL TIME
          CLC     SPFTIME,PARMTME     COMPARE SPF AND PARM TIME
          BL      PDS0190             IF LESS THAN, DON'T WANT
          B       PDS0180             MUST BE EQUAL TO OR GREATER
PDS0170   CLC     SPFTIME,IPLTIME     COMPARE SPF AND IPL TIME
          BL      PDS0190             IF LESS THAN, DON'T WANT
PDS0180   MVC     PRNTMBR,PDS2NAME    MOVE NAME
          UNPK    PRNTDTE,PDSUDATE    UNPACK THE UPDATE DATE
          MVC     PRNTTME,SPFTIME     MOVE UPDATE TIME
          MVC     PRNTWHO,PDSWHO      MOVE WHO DID IT
          MVC     LINE(37),PRNTLNE    SET UP THE PRINT LINE
          PUT     SHRTPRNT,LINE       PRINT THE MEMBER WITH STATS
          CLI     PRTFLAG,C'1'        COMPLETE MEMBER PRINT REQUESTED?
          BE      PDS0190             NO, GO ON
          BAL     R14,PDS0200         GO PRINT ENTIRE MEMBER
PDS0190   LA      R3,12(R11,R3)       POSITION TO NEXT DIRECTORY MEMBER
          CR      R3,R5               IS THIS THE END?
          BL      PDS0140             NOT THE END, GO ON
          B       PDS0130             AT END, GO GET ANOTHER RECORD
PDS0200   STCM    R14,15,SAVE14       SAVE REG 14
          FIND    SYSLIB,PRNTMBR,D    LOCATE THE MEMBER
          LTR     R15,R15             SUCCESSFUL?
          BNZ     PDS0260             IF NOT, GET OUT
          MVI     LINE-1,C'-'         SET UP
          MVC     LINE,LINE-1                A DASHED LINE
          LA      R15,LINE            GET LINE ADDRESS
          MVC     5(10,R15),=C' DATASET: ' SET UP MESSAGE
          MVC     15(44,R15),JFCB     MOVE IN DATASET NAME
          PUT     LONGPRNT,LINE       PRINT DATASET LINE
          MVI     LINE-1,C'-'         SET UP
          MVC     LINE,LINE-1                A DASHED LINE
          LA      R15,LINE            GET LINE ADDRESS
          MVC     5(10,R15),=C'  MEMBER: ' SET UP MESSAGE
          MVC     15(37,R15),PRNTLNE  MOVE IN MEMBER STATS
          PUT     LONGPRNT,LINE       PRINT MEMBER STATS LINE
PDS0210   ICM     R7,15,PDSBFR        GET BUFFER ADDRESS
          READ    DECB,SF,SYSLIB,(R7),'S' READ THE MEMBER INTO BUFFER
          CHECK   DECB                WAIT FOR THE I/O TO COMPLETE
          LA      R14,SYSLIB          GET SYSLIB DCB ADDRESS
          USING   IHADCB,R14
          LH      R8,DCBLRECL         SAVE THE LRECL
          LH      R9,DCBBLKSI         SAVE THE BLOCK SIZE
          DROP    R14
          LA      R9,0(R7,R9)         WHERE SHOULD END OF BLOCK BE?
          L       R1,DECB+16          ADDRESS OF IOB
          LH      R1,14(R1)           GET RESIDUAL IN BLOCK
          SR      R9,R1               ADJUST END OF BLOCK
          SR      R9,R8               BEGINNING OF LAST RECORD
PDS0220   PUT     LONGPRNT,0(R7)      WRITE OUT THE RECORD
          BXLE    R7,R8,PDS0220       PRINT TO END OF BLOCK
          B       PDS0210             GO GET ANOTHER BLOCK
PDS0230   MVI     LINE-1,C' '         BLANK OUT
          MVC     LINE,LINE-1                   PRINT LINE
          ICM     R14,15,SAVE14       RESTORE REG 14
          BR      R14                 GO BACK
PDS0240   WTO     '*** PDSANLYZ - BAD PARM DATA ***',ROUTCDE=(11)
          ABEND   999
PDS0250   WTO     '*** PDSANLYZ - BAD JFCB READ ***',ROUTCDE=(11)
          ABEND   999
PDS0260   CLOSE   (DIRBLK,,SYSLIB,,SHRTPRNT)
          CLI     PRTFLAG,C'1'        WAS LONGPRNT OPENED?
          BE      PDS0270             IF NOT DON'T NEED
          CLOSE   (LONGPRNT)                   TO CLOSE IT
PDS0270   XR      R0,R0
          ICM     R0,3,BLKSIZE        GET SIZE OF GETMAINED AREA
          ICM     R1,15,PDSBFR          AND WHERE IT'S LOCATED
          FREEMAIN RU,LV=(0),A=(1)    FREE IT
          L       R13,4(R13)          RELOAD CALLERS SAVE AREA
          LM      R14,R12,12(R13)     RELOAD CALLERS REGISTERS
          LA      R15,0               ZERO RETURN CODE
          BR      R14                 GO BACK TO CALLER
DOUBLE    DS      D
PRNTLNE   DS      0CL37
PRNTMBR   DC      CL8' '
          DC      CL4' '
PRNTDTE   DC      CL5' '
          DC      CL4' '
PRNTTME   DC      CL4' '
          DC      CL4' '
PRNTWHO   DC      CL8' '
HEADLNE1  DC      CL47'** PDSANLYZ - PDS MEMBER CHANGE LIST UTILITY **'
HEADLNE2  DC      CL37' MEMBER      DATE    TIME     USERID '
HEADLNE3  DC      CL37'--------    -----    ----    ------- '
PDSSPFST  DS      0F
          DS      2F
PDSUDATE  DS      F
PDSUTIME  DS      CL2
          DS      CL6
PDSWHO    DS      CL8
          DS      CL2
SAVE14    DC      F'0'
LRECL     DC      H'0'
BLKSIZE   DC      H'0'
PDSBFR    DC      F'0'
DATEFLAG  DC      CL1'0'
TIMEFLAG  DC      CL1'0'
PRTFLAG   DC      CL1'0'
IPLTIME   DS      CL4
PARMTME   DS      CL4
PARMDTZN  DS      CL5
PARMDTPK  DS      F
SPFTIME   DS      CL4
EXJFCB    DS      0F
          DC      X'07'
          DC      AL3(JFCB)
JFCB      DS      0D,CL176
LINE      DS      CL80
EXRDJFCB  RDJFCB  (DIRBLK),MF=L
          LTORG
DIRBLK    DCB     DDNAME=SYSLIB,DSORG=PS,MACRF=GL,EODAD=PDS0260,       X
               RECFM=FB,BLKSIZE=256,LRECL=256,EXLST=EXJFCB
SYSLIB    DCB     DDNAME=SYSLIB,DSORG=PO,MACRF=R,EODAD=PDS0230
SHRTPRNT  DCB     DDNAME=SHRTPRNT,DSORG=PS,MACRF=PM,RECFM=FB,          X
               BLKSIZE=6160,LRECL=80
LONGPRNT  DCB     DDNAME=LONGPRNT,DSORG=PS,MACRF=PM,RECFM=FB,          X
               BLKSIZE=6160,LRECL=80
          DCBD   DSORG=PS
          IHAPDS PDSBLDL=NO
          END

SAMPLE JCL

//STEP1    EXEC PGM=PDSANLYZ
//*STEP1    EXEC PGM=PDSANLYZ,PARM='DATE=90135,TIME=0930,NOPRT'
//*
//* PDSANLYZ LISTS MEMBERS OF A PDS WHICH HAVE CHANGED SINCE A GIVEN
//* DATE/TIME COMBINATION.  THE DEFAULT DATE/TIME IS TAKEN FROM LAST IPL
//* VALID PARMS ARE:  DATE=YYDDD - JULIAN DATE TO USE IN PLACE OF IPL.
//*                   TIME=HHMM  - 24 HOUR CLOCK TIME TO USE IN PLACE
//*                                OF IPL.
//*                   NOPRT      - TURNS OFF THE PRINTING OF ALL RECORDS
//*                                IN THE CHANGED MEMBERS.
//* DD NAMES USED ARE:  SHRTPRNT - DATE/TIME USED SUMMARY
//*                                 SUMMARY OF ALL CHANGED MEMBERS
//*                     LONGPRNT - FULL LENGTH PRINT OF CHANGED MEMBERS
//*
//SYSLIB   DD  DSN=SYS1.PARMLIB,DISP=SHR
//SHRTPRNT DD  SYSOUT=*
//LONGPRNT DD  SYSOUT=*


Ernie Ishman
Senior Systems Programmer
Geisinger System Services (USA)                  € Xephon 1990

