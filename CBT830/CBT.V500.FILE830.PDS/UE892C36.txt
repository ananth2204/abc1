Cross memory communication

The following article describes three sets of programs written
to demonstrate the different cross memory communication
facilities available from basic MVS/370 to MVS/XA and
MVS/ESA. The programs all perform the same functions, ie
finding out the permanent DASD datasets that are currently
allocated by a specified job, started task, or TSO user.


PWLFDDNS and PWLSRB

PWLFDDNS and PWLSRB are two programs written for a
basic MVS system to use the asynchronous cross
communication facility. PWLFDDNS is the driving program.
Its main function is to analyse input parameters, construct an
SRB, and schedule the SRB to run in the specified target
address space.

Once PWLSRB gets invoked, it will search the target address
space to find the required information and store it in a
communication area (obtained by PWLFDDNS). This
technique works very well and has been around for years but
there are some inherent disadvantages:

1      It is not a trivial task to construct and schedule an SRB in a
      target address space.

2      Both the SRB and/or a communication area have to be
      allocated in CSA, which could be very costly in a busy system.

3      The SRB is scheduled and executed asynchronously in the
      target address space. The driving (main) program has to
      find ways to determine if the SRB has been executed
      successfully or not. (With facilities such as cross memory
      post, it is possible to 'synchronize' this process somewhat,
      but the scheduling of an SRB is still basically
      asynchronous.)

Source code for PWLFDDNS

         TITLE ' FIND DDNS FOR SPECIFIED JOB'
PWLFDDNS PWLINIT
         LTR   R1,R1
         BZ    DDNS0000
         MVC   JOBNAME,=C'        '
         L     R2,0(R1)
         TM    0(R1),X'80'
         BNO   DDNS0000
         LA    R4,JOBNAME
         LH    R5,0(R2)
         LR    R3,R5
         LA    R2,2(R2)
         MVCL  R4,R2
DDNS0000 DS    0H
         MODESET MODE=SUP
         MODESET KEYADDR=ZERO,SAVEKEY=OLDKEY,WORKREG=2
         GETMAIN RC,LV=SCANSIZE,SP=241     GET SCAN AREA
         ST    R1,SCANADDR           AREA TO RECEIVE DATA FROM SRB
         L     R2,16                     CVT
         L     R2,X'22C'(R2)             ASVT
         LA    R2,X'210'(R2)             PT TO 1ST ASID SLOT
LOOP     DS    0H
         L     R3,0(R2)
         N     R3,=X'00FFFFFF'
         LTR   R3,R3
         BZ    EXIT                      END OF ASVT
         L     R3,0(R2)
         LTR   R3,R3
         BM    SKIP                      SLOT NOT ASSIGNED
         L     R3,0(R2)
         L     R3,X'AC'(R3)              ASCBJBNI
         LTR   R3,R3
         BZ    LOOP1
         CLC   JOBNAME,0(R3)
         BE    FOUND
LOOP1    DS    0H
         L     R3,0(R2)
         L     R3,X'B0'(R3)              ASCBJBNS
         LTR   R3,R3
         BZ    SKIP
         CLC   JOBNAME,0(R3)
         BE    FOUND
SKIP     DS    0H
         LA    R2,4(R2)
         B     LOOP
FOUND    DS    0H
         L     R1,SCANADDR
         L     R3,0(R2)                   R3=ASCB ADDR
         LH    R4,X'24'(R3)               LOAD ASID
         ST    R4,0(R1)                   R4=ASID
         ST    R2,4(R1)                   R2=ASVT SLOT ADDR
* BUILD AND SCHEDULE AN SRB IN TARGET ADDR SPACE
         LOAD  EP=PWLSRB,GLOBAL=(YES,F),EOM=YES,LOADPT=XSRB
* PWLSRB MUST BE RENT TO BE LOADED INTO GLOBAL
         GETMAIN RC,LV=SRBWASZ,SP=241 GET AREA TO BUILD SRB
         LR    R7,R1               POINT TO SRB WORK AREA
         ST    R1,WORK1
         USING SRBSECT,R7          SRB ADDRESSABILITY
         LA    R10,SRB
         LA    R11,SRBWASZ
         LA    R8,SRB
         SLR   R9,R9
         MVCL  R10,R8             CLEAR SRB
         ST    R3,SRBASCB         STORE TARGET ASCB ADDR IN SRB
         MVC   SRBID,=C'SRB '      SET SRB ID
         L     R0,XSRB             POINT TO SRB ENTRY POINT
         ST    R0,SRBEP            STORE IN SRB
         LA    R0,SRBWAREA         POINT TO SRB WORK AREA
         ST    R0,SRBPARM          STORE IN SRB
         L     R0,SCANADDR         AREA TO RECEIVE SCAN DATA
         ST    R0,XSRBSCAN
         STH   R4,SRBPASID         SET SCHEDULING ASID IN SRB
         MVC   XSRBID,=C'XSRB'
         SCHEDULE SRB=(R7)         SCHEDULE SRB
WAIT     DS    0H
         STIMER WAIT,BINTVL=T2SEC
         CLC   XSRBWORK,=C'ZZZZ'
         BNE   WAIT
OPEN     DS    0H
         L     R3,SCANADDR
         LA    R3,24(R3)          SKIP 24 BYTES PREFIX
         LA    R4,OUTWORK
         LA    R5,SCANSIZE
         LA    R1,XSRBDDSZ
         ST    R1,SCANREC
*FORMAT AND PRINT SCAN AREA
* OR ALTERNATIVELY DISPLAY TO ISPF PANEL
         OPEN  (SYSPRINT,OUTPUT)
         MVC   OUTAREA(L'HDR1),HDR1
         MVC   OUTAREA+9(L'HDR2),HDR2
         MVC   OUTAREA+53(L'HDR3),HDR3
         MVC   OUTAREA+57(L'HDR4),HDR4
         BAL   R7,PUT
         BAL   R7,PUT
F1       DS    0H
         CLI   0(R3),X'FF'
         BE    F3
         L     R6,SCANREC
         BCTR  R6,0
         EX    R6,MOVE
         MVC   OUTAREA(8),OUTWORK
         MVC   OUTAREA+9(44),OUTWORK+8
         MVC   OUTAREA+53(3),OUTWORK+52
         MVC   OUTAREA+57(6),OUTWORK+55
         BAL   R7,PUT
         A     R3,SCANREC
         S     R5,SCANREC
         C     R5,SCANREC
         BL    F3
         B     F1
MOVE     MVC   0(0,R4),0(R3)
F3       DS    0H
         CLOSE (SYSPRINT)
         L     R7,WORK1
         FREEMAIN RC,LV=SRBWASZ,A=(R7),SP=241 FREE SRB WORK AREA
         L     R7,SCANADDR
         FREEMAIN RC,LV=SCANSIZE,A=(R7),SP=241 FREE SCAN AREA
         MODESET KEYADDR=OLDKEY,WORKREG=2
         B     EXIT
PUT      DS    0H
         PUT   SYSPRINT,OUTAREA
         MVI   OUTAREA,C' '
         MVC   OUTAREA+1(L'OUTAREA-1),OUTAREA
         BR    R7
ERROR    DS    0H
         WTO   'ERROR 1'
         B     EXIT
HDR1     DC    C'DDNAME'
HDR2     DC    C'DATA SET NAME'
HDR3     DC    C'DEV'
HDR4     DC    C'VOLSER'
XSRB     DS    F
SCANADDR DS    F                   ADDR OF SCAN AREA
SCANSIZE EQU   2048                TOTAL SIZE OF SCANAREA
SCANREC  DS    F                   LOGICAL SIZE OF SCAN RECS
WORK1    DS    F
OUTAREA  DC    CL80' '
OUTWORK  DC    CL80' '
ZERO     DC    F'0'
OLDKEY   DC    F'0'
JOBNAME  DC    C'TSS06   '
AX1      DC    H'01'
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS
T2SEC    DC    F'200'         2 SEC
*XSRB IS BASED ON MACRO IHASRB
         XSRB
         CVT   DSECT=YES
         END   PWLFDDNS

Source code for PWLSRB

PWLSRB   CSECT                     SRB EXECUTION ROUTINE
         LR    R8,R15              LOAD BASE REGISTER
         USING PWLSRB,R8           ROUTINE ADDRESSABILITY
         LR    R9,R0               LOAD SRB ADDRESS
         USING SRBSECT,R9          SET SRB ADDRESSABILITY
         STM   R2,R15,XSAVE
         L     R2,SRBASCB          PTR TO ASCB
         L     R3,X'AC'(R2)
         LTR   R3,R3
         BZ    XSRB0010
         MVC   XSRBJBNI,0(R3)      BATCH JOBNAME
         B     XSRB0020
XSRB0010 DS    0H
         L     R3,X'B0'(R2)
         LTR   R3,R3
         BZ    XSRB0020
         MVC   XSRBJBNS,0(R3)      STC/LOGON/MOUNT JOBNAME
XSRB0020 DS    0H
         L     R3,X'6C'(R2)        ASCBASXB
         ST    R3,XSRBASXB
         MVC   XSRBFTCB(8),4(R3)   MOVE IN FIRST AND LAST TCB
         L     R3,4(R3)            R3=FIRST TCB
         L     R6,XSRBSCAN         R6=SCAN ADDR
XSRB0022 DS    0H
         LTR   R3,R3
         BZ    XSRB0900
         L     R4,X'B4'(R3)        JSCB
         L     R4,X'D0'(R4)        INIT TCB
         LTR   R4,R4
         BZ    XSRB0030            NO INIT (REGION CONTROL OR DUMP)
         CR    R3,R4
         BE    XSRB0030            INIT
         L     R4,X'C'(R3)         TIOT ADDR
         C     R4,XSRBPTIO         SAME TIOT TABLE
         BE    XSRB0030
         ST    R4,XSRBPTIO
         MVC   0(24,R6),0(R4)      MOVE IN HEADER
         LA    R6,24(R6)
         LA    R4,24(R4)
         USING XSRBDDNS,R6
XSRB0024 DS    0H
         CLC   0(4,R4),=X'00000000'  END OF TIOT?
         BE    XSRB0030
         CLC   4(4,R4),=X'00000000'  INVALID DDNAME?
         BE    XSRB0026              BYPASS.
         CLI   0(R4),X'14'         END OF ALL REGULAR DDENTRY
         BNE   XSRB0900
         MVC   XSRBDDN,4(R4)
         ICM   R5,7,X'C'(R4)       JFCB ADDR
         MVC   XSRBDSN,X'10'(R5)   MOVE IN DSN
         TM    X'72'(R5),X'A0'     JFCDSRG1 - ISAM OR DA?
         BM    XSRB0026            YES. SKIP.
         TM    X'73'(R5),X'08'     JFCDSRG2 - VSAM?
         BO    XSRB0026            YES. SKIP.
         TM    X'67'(R5),X'01'     JFCBIND2 - TEMPORARY DS?
         BO    XSRB0026            YES. SKIP.
         ICM   R5,7,X'11'(R4)      UCB ADDR
         LTR   R5,R5
         BZ    XSRB0026
         TM    X'12'(R5),X'20'     DIRECT ACCESS?
         BNO   XSRB0026            NO. SKIP.
         MVC   XSRBVOL,X'1C'(R5)   VOLSER
         MVC   XSRBDEV,X'D'(R5)    DEV ADDR  X'4' IS DEV ADDR IN HEX
         LA    R6,XSRBDDSZ(R6)
         LA    R4,20(R4)
         B     XSRB0024
XSRB0026 DS    0H
         XC    XSRBDDN(52),XSRBDDN
         LA    R4,20(R4)
         B     XSRB0024
XSRB0030 DS    0H
         L     R3,X'74'(R3)        NEXT TCB
         B     XSRB0022
XSRB0900 DS    0H
         MVC   XSRBWORK,=C'ZZZZ'   SIGNAL COMPLETION
         MVI   XSRBDDN,X'FF'
         LM    R2,R15,XSAVE
         BR    R14
         REGS
         XSRB
         END   PWLSRB

PWLFDDN1 and PWLFDDN2

With the introduction of MVS/XA, the data in another address
space (secondary address space) can be accessed directly and
synchronously by the primary address space using a number of
new instructions. PWLFDDN1 and PWLFDDN2 are written to
demonstrate one of the available methods. The driving program
(PWLFDDN1) obtains a work area (in CSA), loads a
subroutine (PWLFDDN2) in common storage area, and then
passes control to it.

The main functions performed by PWLFDDN2 are:

1      Save the current secondary address space number.

2      Switch the current secondary address space number to the
      specified address space.

3      Use an SAC instruction to switch to secondary
      addressability mode. All access for data is now from the
      secondary address space (and CSA).

4      Search the secondary address space and store all required
      information in the work area (obtained by PWLFDDN1).

5      Restore addressing mode and return to PWLFDDN1.

The major advantage of this method is that communication
between the primary and secondary address spaces is
synchronous. The difficult task of constructing and scheduling
a SRB has been totally eliminated. The subroutine program,
PWLFDDN2, is called by a regular BALR instruction. The
operating system overhead for scheduling SRBs is also
reduced.

However, this method still has some problems:

1      Since the subroutine function, PWLFDDN2, can only
      address either the primary (calling) or the secondary
      (target) address space at any time, any required input
      parameters or obtained data must still be stored in the CSA.

2      The subroutine program, PWLFDDN2, must also be
      loaded into CSA. It should be noted that, with instructions
      like MVCP and MVCS, it is possible to retrieve data
      (control blocks) directly from another address space and
      eliminate the need to pass data back through the CSA. But
      when large amounts of data (long chains of control blocks)
      are to be searched, it could become very cumbersome and
      costly to use MVCP or MVCS to retrieve and examine
      every single piece of data from another address space.

Source code for PWLFDDN1

         TITLE ' FIND DDNS FOR SPECIFIED JOB OR USER'
PWLFDDN1 PWLINIT
         LTR   R1,R1
         BZ    EXIT                      EXIT IF NO INPUT PARM
         L     R2,0(R1)
         TM    0(R1),X'80'
         BNO   DDNS0000
         LA    R4,JOBNAME
         LH    R5,0(R2)
         LR    R3,R5
         LA    R2,2(R2)
         MVCL  R4,R2                     GET INPUT JOBNAME
DDNS0000 DS    0H
         MODESET MODE=SUP
         MODESET KEYADDR=ZERO,SAVEKEY=OLDKEY,WORKREG=2
         L     R2,16                     CVT
         L     R2,X'22C'(R2)             ASVT
         LA    R2,X'210'(R2)             PT TO 1ST ASID SLOT
LOOP     DS    0H
         L     R3,0(R2)
         N     R3,=X'00FFFFFF'
         LTR   R3,R3
         BZ    EXIT                      END OF ASVT. CAN'T FIND ASID
         L     R3,0(R2)
         LTR   R3,R3
         BM    SKIP                      SLOT NOT ASSIGNED
         L     R3,0(R2)
         L     R3,X'AC'(R3)              ASCBJBNI
         LTR   R3,R3
         BZ    LOOP1
         CLC   JOBNAME,0(R3)
         BE    FOUND
LOOP1    DS    0H
         L     R3,0(R2)
         L     R3,X'B0'(R3)              ASCBJBNS
         LTR   R3,R3
         BZ    SKIP
         CLC   JOBNAME,0(R3)
         BE    FOUND
SKIP     DS    0H
         LA    R2,4(R2)
         B     LOOP
FOUND    DS    0H
         L     R8,0(R2)                   GET ASCB ADDR
         LH    R9,X'24'(R8)               GET ASID
* LOAD PWLFDDN1 INTO COMMON AREA
* PWLFDDN2 MUST BE RENT TO BE LOADED INTO GLOBAL
         LOAD  EP=PWLFDDN2,GLOBAL=(YES,F),EOM=YES,LOADPT=PWLFDDN2
         LA    R2,DDNWASZ          WORK AREA PREFIX
         LA    R3,DDN2DDSZ         SIZE OF EACH DDNAME ENTRY
         LA    R1,DDN#EQU
         STH   R1,ENT#
         MH    R3,ENT#             SIZE OF ALL DDNAME ENTRIES
         AR    R2,R3
         ST    R2,DDNWKSZ
         GETMAIN RC,LV=(R2),SP=241 GET DDN WORK AREA
         LTR   R15,R15
         BZ    DDN10100
         WTO   'ERROR1',ROUTCDE=11
         B     EXIT
DDN10100 DS    0H
         LR    R7,R1               POINT TO DDN WORK AREA
         ST    R1,DDNWORK
         USING DDNSECT,R7          DDN ADDRESSABILITY
         LR    R10,R7
         LA    R11,DDNWASZ
         LR    R4,R7
         SLR   R5,R5
         MVCL  R10,R4             CLEAR WORKAREA
         ST    R8,DDNASCB         STORE TARGET ASCB ADDR IN DDN
         MVC   DDNID,=C'DDNS'      SET DDN ID
         STH   R9,DDNPASID        STORE TARGET ASID IN DDN
         LH    R1,ENT#
         STH   R1,DDN#ENT
         LR    R1,R7               POINT TO DDN WORKAREA
         L     R15,PWLFDDN2
         BALR  R14,R15             CALL PWLFDDN2
         B     OPEN
OPEN     DS    0H
         L     R7,DDNWORK         POINT TO WORK AREA
         LA    R3,DDN2ENT         SKIP PREFIX TO FIRST ENTRY
         LA    R4,OUTAREA
         LH    R5,DDN#ENT
         LA    R6,DDN2DDSZ        SIZE OF EACH ENTRY
         BCTR  R6,0
*PRINT DDN ENTRIES
         OPEN  (SYSPRINT,OUTPUT)
PRINT1   DS    0H
         CLI   0(R3),X'FF'        END OF ALL FOUND ENTRIES?
         BE    PRINT9
         MVI   OUTAREA,C' '
         MVC   OUTAREA+1(79),OUTAREA
         EX    R6,MOVE
         PUT   SYSPRINT,(R4)
         LA    R3,DDN2DDSZ(,R3)   NEXT ENTRY
         BCT   R5,PRINT1
PRINT9   DS    0H
         CLOSE (SYSPRINT)
         L     R2,DDNWKSZ
         FREEMAIN RC,LV=(R2),A=(R7),SP=241 FREE WORK AREA
         LTR   R15,R15
         BZ    DSN10900
         WTO   'ERROR 9',ROUTCDE=11
DSN10900 DS    0H
         MODESET KEYADDR=OLDKEY,WORKREG=2
         B     EXIT
MOVE     MVC   0(0,R4),0(R3)
PWLFDDN2 DS    F                   ENTRY POINT ADDR OF PWLFDDN2
DDNWORK  DS    F                   WORKAREA ADDR
DDNWKSZ  DS    F                   WORKAREA SIZE
ENT#     DS    F
OUTAREA  DS    CL80
ZERO     DC    F'0'
OLDKEY   DC    F'0'
JOBNAME  DC    CL8' '
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS
         $#DDN
         END   PWLFDDN1

Source code for PWLFDDN2

PWLFDDN2 CSECT
* THIS ROUTINE LOADED INTO COMMON AREA AND CALLED BY PWLFDDN1
* SWITCH ADDRESSING MODE TO SEARCH THE SPECIFIED ADDRESS SPACE
         LR    R8,R15              LOAD BASE REGISTER
         USING PWLFDDN2,R8         ROUTINE ADDRESSABILITY
         LR    R9,R1               LOAD WORKAREA ADDR
         USING DDNSECT,R9          SET ADDRESSABILITY
         STM   R2,R15,DDNSAVE      OR USE BAKR
         AXSET AX=AXAUTH           SET AUTH INDEX
         ESAR  R14                 GET CURRENT 2NDRY ASN
         ST    R14,DDNCSASN        SAVE CURRENT 2NDRY ASN
         LH    R4,DDNPASID         GET TARGET ASID
         SSAR  R4                  SET 2NDRY TO TARGET
         SAC   256                 SET 2NDRY ADDRESSABILITY MODE
         L     R2,DDNASCB          PTR TO ASCB
         L     R3,X'AC'(R2)
         LTR   R3,R3
         BZ    DDN20010
         MVC   DDN2JBNI,0(R3)      BATCH JOBNAME
         B     DDN20020
DDN20010 DS    0H
         L     R3,X'B0'(R2)
         LTR   R3,R3
         BZ    DDN20020
         MVC   DDN2JBNS,0(R3)      STC/LOGON/MOUNT JOBNAME
DDN20020 DS    0H
         L     R3,X'6C'(R2)        ASCBASXB
         ST    R3,DDN2ASXB
         MVC   DDN2FTCB(8),4(R3)   MOVE IN FIRST AND LAST TCB
         L     R3,4(R3)            R3=FIRST TCB
         LA    R6,DDN2ENT          R6=FIRST DDN ENTRY
DDN20022 DS    0H
         LTR   R3,R3
         BZ    DDN20900
         L     R4,X'B4'(R3)        JSCB
         L     R4,X'D0'(R4)        INIT TCB
         LTR   R4,R4
         BZ    DDN20030            NO INIT (REGION CONTROL OR DUMP)
         CR    R3,R4
         BE    DDN20030            INIT
         L     R4,X'C'(R3)         TIOT ADDR
         C     R4,DDN2PTIO         SAME TIOT TABLE
         BE    DDN20030
         ST    R4,DDN2PTIO
         LA    R4,24(R4)           SKIP HEADER
         USING DDN2DDNS,R6
DDN20024 DS    0H
         CLC   0(4,R4),=X'00000000'  END OF TIOT?
         BE    DDN20030
         CLC   4(4,R4),=X'00000000'  INVALID DDNAME?
         BE    DDN20026              BYPASS.
         CLI   0(R4),X'14'         END OF ALL REGULAR DDENTRY
         BNE   DDN20900
         MVC   DDN2DDN,4(R4)
         ICM   R5,7,X'C'(R4)       JFCB ADDR
         MVC   DDN2DSN,X'10'(R5)   MOVE IN DSN
         TM    X'72'(R5),X'A0'     JFCDSRG1 - ISAM OR DA?
         BM    DDN20026            YES. SKIP.
         TM    X'73'(R5),X'08'     JFCDSRG2 - VSAM?
         BO    DDN20026            YES. SKIP.
         TM    X'67'(R5),X'01'     JFCBIND2 - TEMPORARY DS?
         BO    DDN20026            YES. SKIP.
         ICM   R5,7,X'11'(R4)      UCB ADDR
         LTR   R5,R5
         BZ    DDN20026
         TM    X'12'(R5),X'20'     DIRECT ACCESS?
         BNO   DDN20026            NO. SKIP.
         MVC   DDN2VOL,X'1C'(R5)   VOLSER
         MVC   DDN2DEV,X'D'(R5)    DEV ADDR  X'4' IS DEV ADDR IN HEX
         LA    R6,DDN2DDSZ(R6)
         LA    R4,20(R4)
         B     DDN20024
DDN20026 DS    0H
         XC    DDN2DDN(52),DDN2DDN
         LA    R4,20(R4)
         B     DDN20024
DDN20030 DS    0H
         L     R3,X'74'(R3)        NEXT TCB
         B     DDN20022
DDN20900 DS    0H
         MVI   DDN2DDN,X'FF'       INDICATE END OF ALL ENTRIES
         OI    DDNFLG1,X'80'       SIGNAL COMPLETION
         L     R14,DDNCSASN        GET SAVED 2NDRY ASN
         SSAR  R14                 RESTORE ORIGINAL 2NDRY ASN
         SAC   00                  RESTORE ADDRESSING MODE
         LM    R2,R15,DDNSAVE
         BR    R14
AXAUTH   DC    H'1'
         REGS
         $#DDN
         END   PWLFDDN2

This article will be concluded next month with the publication
of the final pair of programs (PWLFDDN3 and PWLFDDN4);
the PWLINIT, XSRB, and $#DDN macros; sample JCL; and
an example of SYSPRINT output.


Peter W K Lee
Software Analyst (Canada)                                    c Xephon 1992

