A batch MVS/370 virtual storage monitor

Our installation has been running MVS/370 for the past five years.
Recently, we began experiencing problems with the CSA running out of
space.  Fortunately, our PLPA has enough removable modules to allow us
to keep MVS/370 around a while longer.  However, we had no means of
monitoring the common virtual storage areas and did not want to be
caught unprepared again, so I developed this started task to monitor the
fixed and changeable areas continuously in the 370 virtual storage
memory map to allow us to do trend analysis.

   Offset Length    Data
     0    8    The EBCDIC letters 'IPLDATA'
     8    2    Size of the nucleus (in pages)
     10   2    Size of the private area (in pages)
     12   2    Size of the CSA (in pages)
     14   2    Size of the SYSGEN PSA (in pages)
     16   2    Size of the pageable BLDL (in pages)
     18   2    Size of the MLPA (in pages)
     20   2    Size of the PLPA (in pages)
     22   2    IPL size of the SQA (in pages)
     24   4    Time in HHMMSSth format
     28   4    Date in 00YYDDDF format

Several points need to be made about the header record.  Firstly, if you
are using a fixed BLDL then the value for the pageable BLDL will be
zero.  Secondly, if you are on a different release and maintenance level
than MVS 1.3.3 8607, it is possible that the offset into SVC18 to a
pointer to the BLDL may be different to the value I use in the program.
(See the code for a way that you can determine the correct value if this
is the case.)  Finally, the value for the SYSGEN PSA field will always
be 0 or 1.  I have not had the opportunity to run this program on a UP
machine (on which it should be 0), so watch this field if this is the
case for your shop.

All of the hexadecimal values in the header record should add up to 1000
hexadecimal or 4096 decimal (16 megabytes).

Note also that all of these values should correspond to the parameters
in the IEASYSnn you are currently IPLed under.  In particular, an
expansion of the SQA is not noted in the header record (but is noted in
the data record).  The data record has the following format:

   Offset      Length    Data
     0    2    The largest single free extent in the CSA
     2    2    The total free space in the CSA
     4    2    The total size of the SQA (including expansion)
     6    2    The total free space in the SQA
     8    4    The time in HHMMSSth format
     12   4    The date in 00YYDDDF format

The program operates in the following way.  After standard entry
linkage, a subtask (VS370WTO) is attached and runs concurrently with
VS370MON.  This subtask generates a WTOR message 'VS370MON is Active',
which the operator can scroll off his screen.  When it is desirable to
stop VS370MON, the operator can determine the outstanding reply number
and give any reply.  This will end the subtask and cause an exit located
in VS380MON (WTODONE) to be executed outside, and asynchronously with,
the normal execution of VS380MON.  This exit will set a flag and return
to the operating system.

Meanwhile, VS370MON will determine the virtual storage environment the
system is IPLed under and generate a header record.  The program will
then STIMER for 10 seconds.  At the end of the interval, VS370MON will
check a flag to determine if the subtask is concluded.  If it is, the
subtask is detached, the output file is closed and the program returns
to the operating system.  If the subtask has not concluded, the CSA and
SQA are examined, the time is determined, and a data record is written.
The program loops to wait another 10 seconds and the process continues
indefinitely.

This program runs without authorisation and needs only to be assembled
and linked.  VS370WTO (the subtask program) should be assembled and
linked into the same step library.

During the development of this application, several other useful
programs were created, to provide snapshots of various things in the
system.  They run as batch jobs and provide the desired information via
an ABEND 4,DUMP into the SYSUDUMP file.  Perhaps there is someone out
there who would be interested in modifying these programs for a TSO or
ROSCOE environment, and publishing their code in this journal.

The batch snapshot programs are:

*    CLPASCAN - This program can be tailored to produce the names,
lengths, and starting locations for modules in the FLPA, MLPA, or CSA.
You will need to set the boundaries appropriately before execution (see
the code).

*    CSABMAP - This program produces a byte map for pages in the CSA.
Allocated pages are denoted as allocated by using their subpool number;
free pages will be hexadecimal '00'.

*    PLPAMODS - This program scans the PLPA and determines the sum of
all modules whose first three characters begin with 'XXX', which you
provide before execution.

The code for these programs follows that for VS370MON and VS370WTO.
Finally, the SAS program VS370ANL is presented for analysis and
graphical presentation of the data.

BIBLIOGRAPHY

OS/VS2 SPL: Debugging Handbooks, Vols 1-3, GC28-0708, GC28-0709,
GC28-0710.  (Note CVT, GDA, PQE, SPQE, DQE, FBQE, CDE, LPDE, in Vols 2
and 3.  Also note pages 5-69 and 5-72, 73 in Vol 1.)  OS/VS2 SPL: MVS
Diagnostic Techniques, GC28-0725 (Note page 5.4.7, remarks for SQASPLFT
field-compare to Debugging Handbook, Vol 2, page 421 (incorrect).  Also
note page 4.4.5 (SQA DQEs).)

OS/VS2 MVS SPL: Initialization and Tuning Guide, GC28-1029 (See Part 2
for a virtual storage overview.)

OS/VS2 MVS: System Initialization Logic, LY28-1050 (Note page 2-151,
description for field IEARESBL, in SVC18 in nucleus.)

VS370MON

*  THIS IS A BATCH PROGRAM DESIGNED TO MONITOR VIRTUAL STORAGE AREAS
*  OF MVS/370.  IT HAS BEEN TESTED UNDER MVS/SP 1.3.3 ONLY.  OTHER
*  RELEASES OF MVS MAY REQUIRE MODIFICATIONS TO THE CODE.
*  >>> THIS CODE DOES NOT REQUIRE ANY SPECIAL AUTHORIZATION. <<<
VS370MON CSECT
         USING VS370MON,R2
         LR    R2,R15             ADDRESSABILITY
         STM   R14,R12,12(R13)    ENTRY LINKAGE
         LA    R11,SAVE
         ST    R13,4(R11)
         ST    R11,8(R13)
         LR    R13,R11
*  ATTACH WTOR SUBTASK (ANY REPLY WILL END THE SUBTASK AND THE PARENT)
         ATTACH EP=VS370WTO,ETXR=WTODONE
         ST    R1,TCBADDR
*  OPEN THE DATABASE FILE
         OPEN  (DATABASE,(OUTPUT))
*  GET NUCLEUS SIZE IN PAGES
         L     R3,16              GET CVT ADDRESS
NUCLEUS  L     R4,128(R3)         GET LOWEST PRIVATE ADDR
         LR    R5,R4              SAVE LENGTH OF NUC
         SRL   R4,12              R4 NOW HAS NUMBER OF NUC PAGES
         STH   R4,HEADER+8        SAVE
*  GET PRIVATE AREA SIZE IN PAGES
PRIVATE  L     R4,416(R3)         GET LOWEST COMMON ADDR
         LR    R12,R4             SAVE COPY IN R12
         SR    R4,R5              R4 NOW HAS LENGTH OF PRIVATE
         SRL   R4,12              R4 NOW HAS # OF PRIVATE PAGES
         STH   R4,HEADER+10       SAVE
*  GET CSA AREA SIZE IN PAGES
CSA      L     R4,560(R3)         GET GDA ADDRESS
         L     R4,8(R4)           GET CSA PQE ADDRESS
         L     R5,20(R4)          GET SIZE OF CSA
         AR    R12,R5             R12 HAS CSA END ADDR
         SRL   R5,12              R5 NOW HAS NUMBER OF CSA PAGES
         STH   R5,HEADER+12       SAVE
*  DETERMINE IF SYSGEN PSA EXISTS (ONLY 1 PAGE)
SGENPSA  L     R4,764(R3)         GET ADDR OF PCCAVT
         LA    R5,16              SET LOOP COUNTER
         SR    R6,R6              SET CPU-ONLINE COUNTER
CPULOOP  L     R7,0(R4)           GET A PCCA ADDR
         LTR   R7,R7              IS IT VALID?
         BZ    CPUEND             NO---CONTINUE LOOPING
         LA    R6,1(R6)           YES--INCREMENT CPU COUNT
CPUEND   LA    R4,4(R4)           POINT AT NEXT PCCA ADDR
         BCT   R6,CPULOOP         CONTINUE CHECKING FOR ONLINE CPUS
         A     R6,=F'-1'          SUBTRACT 1 FROM CPU COUNT
         LTR   R6,R6              ONLY ONE CPU ONLINE? (UP SYSTEM?)
         BZ    UPSYSTEM           YES--BRANCH
         L     R6,=F'1'           NO---THERE IS ONE PAGE FOR DUMMY PSA
         STH   R6,HEADER+14       SAVE
         B     BLDL               GO GET NUMBER OF BLDL PAGES
UPSYSTEM STH   R6,HEADER+14       SAVE
*  DETERMINE IF BLDL IS PAGABLE--IF SO, DETERMINE NUMBER OF PAGES
*  THE IEARESBL OFFSET IN SVC18 IS DECIMAL 2824 FOR MVS 1.3.3.
*  YOU SHOULD CONFIRM THIS FOR YOUR RELEASE BY RUNNING HMBLIST
*  AGAINST IEANUC01.  LOOK FOR THE CSECT IGC018 (SVC18) AND FIND
*  THE CSECT LOCATION OF IEARESBL.  CONVERT TO DECIMAL AND REPLACE.
BLDL     L     R4,200(R3)         GET SVC TABLE ADDRESS
         L     R4,132(R4)         GET START OF SVC TABLE
         A     R4,=F'144'         ADD OFFSET INTO TABL FOR SVC18(18*8)
         L     R4,0(R4)           GET SVC18 START ADDR
         A     R4,=F'2824'        ADD OFFSET TO GET IEARESBL ADDR
         L     R4,0(R4)           GET STARTING ADDR OF BLDL
         L     R5,128(R3)         GET STARTING ADDR OF PRIVATE AREA
         SR    R5,R4              WHICH IS HIGHER?
         BNP   PGBLBLDL           IF PRIVATE>BLDL THEN BLDL IS FIXED
         SR    R5,R5              NO BLDL PAGES OUTSIDE OF NUC
         B     BLDLSTOR           SAVE VALUE
PGBLBLDL LH    R5,0(R4)           GET NUMBER OF BLDL ENTRIES
         MH    R5,2(R4)           MULTIPLY BY LENGTH TO GET STORAGE
         A     R5,=F'4'           ADD 4 FOR DESCRIPTOR WORD LENGTH
         LR    R6,R5              SAVE COPY OF BLDL STORAGE
         SRL   R5,12              R5 NOW HAS # OF WHOLE BLDL PAGES
         N     R6,=F'4095'        AND-OUT HIGH BITS
         LTR   R6,R6              NO PARTIALLY USED PAGE?
         BZ    BLDLSTOR           YES--SAVE VALUE
         LA    R5,1(R5)           NO---ADD 1 TO VALUE
BLDLSTOR STH   R5,HEADER+16       SAVE
*  DETERMINE SQA SIZE
SQA      L     R4,560(R3)         GET GDA ADDR
         L     R4,24(R4)          GET FIRST SQA SPQE ADDR
         L     R4,4(R4)           GET DQE ADDR
         L     R4,12(R4)          GET LENGTH OF DQE
         LR    R7,R4              SAVE SQA LENGTH IN R7
         SRL   R4,12              CONVERT LENGTH TO PAGE COUNT
         STH   R4,HEADER+22       SAVE SQA PAGE COUNT (AT IPL TIME)
*  DETERMINE PLPA SIZE
PLPA     L     R4,360(R3)         GET PLPA START ADDR
         SLL   R4,1
         SRL   R4,1               ZERO OUT HI BIT
         LR    R5,R4              SAVE A COPY IN R5
         L     R8,=F'16777216'    R8 = 16 MEG
         SR    R8,R7              SUBTRACT LENGTH OF SQA
         SR    R8,R4              SUBTRACT START ADDR OF PLPA
         SRL   R8,12              CONVERT TO PAGES
         STH   R8,HEADER+20       SAVE PLPA PAGE COUNT
*  DETERMINE MLPA SIZE
MLPA     L     R6,128(R3)         GET START OF PRIVATE AREA
         L     R4,188(R3)
         L     R4,0(R4)           GET START OF LPA CDE Q
         SR    R11,R11            ZERO MLPA LENGTH ACCUMULATOR
CDELOOP  TM    28(R4),X'04        IS THIS A MINOR CDE (ALIAS)?
         BO    NEXTCDE            IF YES--CHECK NEXT CDE
         TM    28(R4),X'80'       WAS THIS MODULE LOADED BY NIP?
         BZ    NEXTCDE            IF NO---CHECK NEXT CDE
         L     R7,20(R4)          GET EXTENT LIST ADDR
         LTR   R7,R7              EXTENT LIST ADDR = 0?
         BZ    NEXTCDE            IF YES--CHECK NEXT CDE
         L     R8,8(R7)           GET MODULE LENGTH
         SLL   R8,1
         SRL   R8,1               ZERO BIT # 0
         L     R9,12(R7)          GET MODULE START ADDR
         LR    R10,R12            COPY CSA END ADDR INTO R10
         SR    R10,R9             IS MOD IN FLPA?
         BP    NEXTCDE            YES--GO GET NEXT CDE
         LR    R10,R5             GET PLPA START ADDR
         SR    R9,R5              IS MOD IN PLPA?
         BP    NEXTCDE            YES--GO GET NEXT CDE
         AR    R11,R8             MODULE IS IN MLPA--ADD LEN
NEXTCDE  L     R4,0(R4)           GET NEXT CDE ADDR
         LTR   R4,R4              NO MORE CDE'S?
         BNZ   CDELOOP            CONTINUE IF VALID ADDR
         LR    R4,R11             COPY LENGTH OF MLPA MODULES
         SRL   R11,12             CONVERT LENGTH TO WHOLE PAGES
         N     R4,=F'4095'        AND-OUT ALL BUT 12 LOWER BITS
         LTR   R4,R4              ANYTHING LEFT?
         BZ    STORMLPA           IF NO--SAVE MLPA PAGE SIZE
         LA    R11,1(R11)         INCREMENT MLPA PAGE SIZE
STORMLPA STH   R11,HEADER+18      SAVE MLPA PAGE SIZE
*  DETERMINE DATE AND TIME
         TIME  DEC                GET DATE AND TIME
         LA    R11,HEADER+24      POINT AT DATE AND TIME SAVE AREA
         STM   R0,R1,0(R11)       SAVE DATE AND TIME IN DATA RECORD
*  WRITE HEADER RECORD
         LA    R11,HEADER         WRITE HEADER
         PUT   DATABASE,0(R11)
         PUT   DATABASE,16(R11)
*  MAIN PROGRAM LOOP.  CHECK FOR SUBTASK COMPLETION. WAIT 10 SECONDS.
*  PRODUCE DATA RECORD.
MAINLOOP L     R4,FLAG            GET SUBTASK COMPLETION FLAG
         LTR   R4,R4              TEST IT
         BNZ   FINISH                 IF NON-ZERO, CLOSE FILE AND END
         STIMER WAIT,BINTVL=WAITTIME  WAIT TEN SECONDS
         TIME  DEC                    GET DATE AND TIME
         LA    R4,DATA+8
         STM   R0,R1,0(R4)        SAVE DATE AND TIME IN DATA RECORD
*  GET CSA DATA: LARGEST FREE AREA AND TOTAL FREE AREA
*  (THIS DATA IS DERIVED FROM THE FBQE CHAIN ANCHORED OFF THE CSA
*  PQE.  THE CSA FQE CHAINS (ANCHORED OFF THE DQES IN EACH SUBPOOL)
*  ARE IGNORED--NEW REQUESTS FOR SPACE IN THE CSA WILL BE SATISFIED
*  FROM THE AREAS MAPPED IN THE FBQE CHAIN.  UNFORTUNATELY, READING
*  THE FQES DESCRIBING AREAS ALREADY ALLOCATED BUT UNUSED IN THE CSA
*  MAY OCCASIONALLY REQUIRE A PROGRAM TO BE RUNNING IN AN AUTHORIZED
*  STATE.)
CSASTATS SR    R10,R10            ZERO CSA TOTAL FREE ACCUMULATOR
         SR    R9,R9              ZERO CSA LARGEST FREE
         L     R4,560(R3)         GET GDA ADDRESS
         L     R4,8(R4)           GET CSA PQE ADDRESS
         L     R5,0(R4)           GET FBQE ADDR
FBQECHAN L     R6,8(R5)           GET SIZE OF THIS FREE BLOCK
         AR    R10,R6             ADD TO TOTAL FREE CSA
         CR    R9,R6              CHECK IF THIS IS LARGEST FREE AREA
         BH    NOTHIEST           BRANCH IF NOT THE LARGEST FREE AREA
         LR    R9,R6              UPDATE LARGEST FREE AREA SIZE
NOTHIEST L     R6,0(R5)           GET NEXT FBQE ADDR OR ORIG PQE ADDR
         LR    R7,R4              GET PQE ADDR
         SR    R7,R6              IS ADDR A POINTER TO ORIGINAL PQE?
         BZ    CSAFREE            YES--GO SAVE CSA VALUES
         L     R5,0(R5)           NO---GET NEXT FBQE ADDR
         B     FBQECHAN           CONTINUE CHECK OF FBQE CHAIN FOR PQE
CSAFREE  SRL   R9,12              CONVERT TO # OF PAGES
         SRL   R10,12             CONVERT TO # OF PAGES
         STH   R9,DATA            LARGEST SINGLE FREE EXTENT IN CSA
         STH   R10,DATA+2         TOTAL FREE CSA
*  GET SQA DATA: TOTAL SQA SIZE AND TOTAL SQA FREE
*  (THIS DATA IS DERIVED FROM THE DQE AND FQE CHAINS ANCHORED OFF
*  THE SQA SPQE.)
SQASTATS L     R4,560(R3)         GET GDA ADDR
         L     R4,24(R4)          GET SQA SPQE ADDR
         SR    R7,R7              ZERO SQA SIZE COUNT ACCUMULATOR
         SR    R8,R8              ZERO SQA FREE COUNT ACCUMULATOR
         L     R5,4(R4)           GET DQE ADDR
SQADQE   A     R7,12(R5)          ADD LENGTH TO SIZE ACCUMULATOR
         L     R6,0(R5)           GET FIRST FQE ADDRESS
SQAFQE   SLL   R6,1               GET RID OF FLAG BIT
         SRL   R6,1
         A     R8,4(R6)           ADD FREE LENGTH TO FREE ACCUMULATOR
         L     R6,0(R6)           GET NEXT FQE
         LTR   R6,R6              IS THERE ONE?
         BNZ   SQAFQE             IF YES--CHECK NEXT FQE
         L     R5,4(R5)           GET NEXT DQE ADDR
         LTR   R5,R5              IS THERE ONE?
         BNZ   SQADQE             IF YES--CHECK NEXT DQE
STORSQA  SRL   R7,12             IF NO---CONVRT SQA SIZE TO # OF PAGES
         SRL   R8,12              CONVRT SQA FREE TO # OF PAGES
         STH   R7,DATA+4          SAVE SQA SIZE
         STH   R8,DATA+6          SAVE SQA FREE
         PUT   DATABASE,DATA      WRITE DATA RECORD
         B     MAINLOOP           CONTINUE GATHERING DATA
*  DETACH SUBTASK, CLOSE FILE AND EXIT
FINISH   DETACH TCBADDR           DETACH VS370WTO SUBTASK
         CLOSE (DATABASE)         CLOSE DATA FILE
         L     R13,4(R13)         EXIT WITH RC = 0
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
*  END-OF SUBTASK EXIT ROUTINE--ENTERED FROM OPERATING SYSTEM
*  ASYNCHRONOUSLY UPON CONCLUSION OF WTO SUBTASK
WTODONE  B     14(R15)            BRANCH AROUND FLAGS
WTOOVER  DC    F'1'               CONSTANT
FLAG     DS    F'0'               FLAG FOR END OF SUBTASK
EXECUTE  MVC   10(4,R15),6(R15)   UPDATE FLAG WITH CONSTANT
         BR    R14                RETURN TO OPERATING SYSTEM
*  DATA AREAS
SAVE     DS    18F                VS370MON REGISTER SAVE AREA
TCBADDR  DS    F                  TCB ADDR OF VS370WTO SUBTASK
WAITTIME DC    F'1000'            CONSTANT--10 SECOND WAITTIME
ALIGNMNT DS    0F
HEADER   DC    CL8'IPLDATA '      HEADER RECORD FIELDS
         DS    CL24
DATA     DS    CL16               DATA RECORD FIELDS
*  DCB FOR SEQUENTIAL FILE
DATABASE DCB   MACRF=(PM),LRECL=16,BLKSIZE=22400,RECFM=FB,             X
               DSORG=PS,DDNAME=STATS
         LTORG
         END
VS370WTO
*  THIS IS THE WTOR SUBTASK USED BY VS370MON.  ITS ONLY FUNCTION IN
*  LIFE IS TO ISSUE A WTOR AND WAIT FOR A REPLY (ANY REPLY WILL DO).
*  WHEN A REPLY IS RECEIVED, VS370WTO RETURNS TO THE OPERATING SYSTEM.
*  >>> THIS CODE DOES NOT REQUIRE ANY SPECIAL AUTHORIZATION. <<<
VS370WTO CSECT
         STM   R14,R12,12(R13)    ENTRY LINKAGE AND ADDRESSABILITY
         LR    R2,R15
         USING VS370WTO,R2
         LA    R11,WTOSAVE
         ST    R13,4(R11)
         ST    R11,8(R13)
         LR    R13,R11
         WTOR  'VS370MON IS ACTIVE',REPLY,1,ECBREPLY,ROUTCDE=1
         WAIT  ECB=ECBREPLY
*  RETURN TO OPERATING SYSTEM
EXIT     L     R13,4(R13)         EXIT LINKAGE
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
WTOSAVE  DS    18F                VS370WTO SAVE AREA
ECBREPLY DC    F'0'               ECB FOR WTOR
REPLY    DS    CL1                REPLY AREA
FILLER   DS    CL200              ADDITIONAL SPACE--JUST IN CASE
         END
This article will be concluded next month with the publication of the
source code for CLPASCAN, CSABMAP, PLPAMODS, and the SAS job VS370ANL.

David Saunders
Senior Systems Engineer
University of Virginia (USA)  € University of Virginia 1988













































