Comparing load modules using IDR records

INTRODUCTION

Problems arise at computer installations running test and production systems in
ensuring that load libraries contain the correct modules.  It is not unheard of
for changes to be applied on a test system but, for one reason or another, never
to reach the production environment.  The ability to cross-check load libraries
and produce a summary report of the differences found would enable systems staff
to quickly determine, for example, whether PTF levels were correct or verify
that a problem module was not inadvertently an old copy.  This article describes
the principles of a program developed to fulfil this role.

IDR RECORDS

The approach used is to compare the IDR records of a load module residing in
both the test and production versions of a system library.  A brief summary of
the layout of load module records follows.

The first type, if present, are SYM (test symbol) records.  These only occur
where the TEST option has been specified at link-edit time.  The next type are
CESD (composite external symbol dictionary) records, which contain entries for
external symbols referenced by each module input to the link-edit step.  These
are followed by the IDR records (CSECT identification records), which are
covered below.  After the IDR records is a mix of control or control and RLD
(relocation dictionary) records, each of which precedes the control section
text.  When reading a load module record by record, each type is distinguished
by a hexadecimal identifier in the first byte of the record.

Four types of IDR record may be present in the load module.  All share a common
3-byte 'header' pre-fixing subtype-dependent fields:

Byte 0    X'80' a CSECT identification record.
Byte 1    Byte count for this IDR record range 6-255.
Byte 2    Subtype indicator (see below).
B' 0001'     Data supplied by HMASPZAP including date of processing and PTF
number or user data.
B' 0010'     Linkage editor data including program name and
version/modification level of the linkage editor.
B' 0100'     Translator data including translator program name,
version/modification level of the translator, and the date of the last
compilation or assembly.
B' 1000'     User data from the linkage editor IDENTIFY function including the
date the data was supplied, a byte count and up to 40 bytes of user data.
B'1 '  Last IDR record flag.
THE PROGRAM
The program is designed to run in batch and can reside in a private or linklist
library.  The load libraries to be compared are allocated to two input files,
while an output file is allocated to each of three summary reports.  The program
sets up two large internal arrays, each with the capacity for 10 000 entries.
It is envisaged that this will be sufficient for most system libraries.
The first phase builds a member table for each library being compared.  QSAM
routines are used to read the load library directories 256 bytes at a time.  The
member name is extracted from the directory entry and bit 0 of the C field is
examined to identify alias entries.  Each 8-byte name field in the member table
is followed by a flag byte, the low order bit of which is switched on to
indicate an alias.  The program is designed to terminate should the 10 000-
member maximum be reached, but could be altered to issue a warning and process
the member names retrieved.
The second phase scans the two member tables, checking whether each entry
appears in the other table.  A simple algorithm based on the EBCDIC collating
sequence ensures that cross-checking remains in step, necessitating only one
pass through the tables.  This makes the library comparison an efficient
process.  At this stage, members or alias entries appearing in only one library
are recorded in the member summary report.
Where a member occurs in both libraries, the FIND macro is used to obtain the
start address of each load module.  BSAM routines then read the first load
module record by record, checking each for the IDR record flag.  When the first
IDR record is located, the process is repeated for the second load module until
an IDR record is found.  If IDR records are found in both modules, the date
fields are cleared (since the same PTF for example may have been applied at
different times), then the records are compared.  The process is repeated until

all IDR records have been read and compared, then an entry is made in the member
report.
The obvious drawback of the approach described is that it assumes (wrongly in
some circumstances) that an IDR record will appear in the same position in both
load modules.  An improvement on this technique would be to read the IDR records
into a table similar to that used for the member names and sort them.  Only
genuine differences would cause mismatches and it would allow the listing of
only the differing IDR records, rather than all the IDR records, of the modules
concerned.
REPORT FILES
The IDR compare program produces three report files summarising the library
differences.  All the files must be statically allocated before the program
executes but may be omitted if not required.
*    The first report is a general summary that lists the number of members
processed in each library, the number of members in each library not found in
the other library, the number of alias entries found, and the number of members
with mismatched IDR records.  Members with no IDR records are also identified.
*    The second report consists of a member-by-member summary of the library
comparison.  The report lists the occurrences of matching and mismatching IDR
records, the absence of a member or alias entry from either library, and members
with no IDR records.  Should a member be installed as an alias in one library
but not in the other, this will be identified in the member report.
*    The final report lists the pairs of mismatched IDR records identified
during comparison.  This is limited in use to those cases where the differences
in IDR records are printable characters; however, a further enhancement might be
to generate a hexadecimal dump of the data concerned.
REFERENCES
MVS/XA Data Administration Guide - GC26-4013
MVS/XA Linkage Editor and Loader - GC26-4011
MVS/XA Linkage Editor Logic - LY26-3902.

Andrew Carrie
Consultant
Tessella (Abingdon) Ltd (UK)  € Xephon 1988
































