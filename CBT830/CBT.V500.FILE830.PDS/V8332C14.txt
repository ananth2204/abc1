Retentive TSO dynamic STEPLIB


ASMLKALL

//jobname  JOB
//ASMPROC  PROC TLBQUAL='tlib.high.level.qualifier',OUT='*'
//ASSEMBLE EXEC PGM=IEV90,PARM='OBJECT,NODECK,XREF(SHORT)'
//SYSLIB   DD DSN=&TLBQUAL..SOURCE,DISP=SHR,DCB=BLKSIZE=32720
//         DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(10,5))
//SYSPRINT DD SYSOUT=&OUT
//SYSLIN   DD DSN=&TLBQUAL..OBJECT(&MEMBER),DISP=OLD
//SYSIN    DD DSN=&TLBQUAL..SOURCE(&MEMBER),DISP=SHR
//         PEND
//LINKPROC PROC TLBQUAL='tlib.high.level.qualifier',PROG=IEWL
//LINKEDIT EXEC PGM=&PROG,PARM='MAP,LIST,XREF,NCAL,AMODE=31,RMODE=24'
//OBJECT   DD DSN=&TLBQUAL..OBJECT,DISP=SHR
//SYSLIN   DD DDNAME=SYSIN
//SYSLMOD  DD DSN=&TLBQUAL..LOAD,DISP=SHR
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(3,2))
//SYSPRINT DD SYSOUT=*
//         PEND
//CNVTHXEB EXEC ASMPROC,MEMBER=CNVTHXEB HEX-TO-EBCDIC CONVERSION
//TLIB     EXEC ASMPROC,MEMBER=TLIB     TSO COMMAND/DRIVER
//TLIBA    EXEC ASMPROC,MEMBER=TLIBA    AUTHORIZED FUNCTIONS
//TLIBX    EXEC ASMPROC,MEMBER=TLIBX    ASYNCHRONOUS EXIT
//TLIB     EXEC LINKPROC
//LINKEDIT.SYSLMOD DD DSN=linklist.library,DISP=SHR
//LINKEDIT.SYSIN  DD *
 INCLUDE OBJECT(TLIB)
 INCLUDE OBJECT(CNVTHXEB)
 ENTRY TLIB
 NAME TLIB(R)
//TLIBA    EXEC LINKPROC,PROG=IEWL,
// PARM.LINKEDIT='LIST,MAP,XREF,LET,AC=1'
//LINKEDIT.SYSLMOD DD DSN=linklist.library,DISP=SHR
//LINKEDIT.SYSIN  DD *
 INCLUDE OBJECT(TLIBA)
 INCLUDE OBJECT(CNVTHXEB)
 ENTRY TLIBA
 NAME TLIBA(R)
//TLIBX    EXEC LINKPROC,PROG=IEWL,
// PARM.LINKEDIT='MAP,LIST,XREF,NCAL,RENT,AMODE=31,RMODE=ANY'
//LINKEDIT.SYSLMOD DD DSN=linklist.library,DISP=SHR
//LINKEDIT.SYSIN  DD *
 INCLUDE OBJECT(TLIBX)
 INCLUDE OBJECT(CNVTHXEB)
 ENTRY TLIBX
 NAME TLIBX(R)


TLIB help member

)X SYNTAX  -

  TLIB <ADD/DELETE>
       DSNAME/DATASET('dsname'/'dsname list')
       <VOLSER(volser/volser list)>
       <STEPLIB>

  or

  TLIB INQUIRE

)O OPERANDS -

))ADD/DELETE - indicates whether datasets (PDS load libraries) are to
  be added to, or deleted from, the existing tasklib/steplib library
  set, if any.  If omitted, ADD is the default.

))DSNAME/DATASET('dsname'/'dsname list') - the names of the datasets
  to be added or deleted.  If ADD is specified or defaulted and there
  are existing tasklib/steplib datasets, the specified datasets
  are concatenated in front of them.
  If DELETE is specified, the first or only occurrence of the dataset
  in the tasklib/steplib set is deleted.  If DELETE is specified
  with a dataset name of 'ALL.TASKLIBS', all tasklib/steplib datasets
  are deleted.

))VOLSER(volser/volser list) - optional explicit volume serial number
  specifications.  These correspond one for one with the dataset
  names specified, as far as is required.  Specify '0' to indicate
  an omitted volume serial which precedes the last explicit
  specification.

  Example:  TLIB DSNAME(dsn1 dsn2 dsn3) VOLSER(0 volser2)

  In the above case, 'dsn1' is catalogued and the corresponding
  VOLSER parameter is '0' meaning no override is desired.
  The 'volser2' parameter is the desired explicit specification for
  'dsn2'.  The 'dsn3' dataset is catalogued and the corresponding
  VOLSER parameter may be omitted because it follows the last
  explicit specification.

))STEPLIB - the request is to be performed at the steplib ie native
  TSO job step TMP, level.  When this operand is specified for a TLIB
  request issued under ISPF, the result of the request is then
  effective for the TMP task and all subordinate tasks.

))INQUIRE - display existing unique tasklib/steplib environments.

)F FUNCTION -

   The TLIB command provides a dynamic tasklib/steplib capability to
   TSO sessions, allowing user-specified libraries to be concatenated
   with or deleted from any existing tasklib/steplib library set.
   The following additional considerations are associated with TLIB:

   1. When TLIB <ADD> is issued from native TSO the specified libraries
      are concatenated in front of any existing steplib libraries
      specified in the TSO log-on procedure.

   2. When TLIB <ADD> is issued under ISPF, the specified libraries
      are concatenated in front of any existing tasklib libraries
      for that screen only.  Existing libraries are one of the
      following: (1) Those associated with an ISPLLIB allocation, if
      one is created prior to invoking ISPF (2) Those associated with
      a TLIB environment, if one is created prior to invoking
      ISPF (3) Those associated with a STEPLIB DD, if one is present
      in the TSO log-on procedure.

      The fact that TLIB under ISPF is screen-specific allows
      for the creation of different tasklib environments under each
      screen when in split-screen mode.  These exist in addition to
      any created in native TSO prior to entering ISPF.

   3. TLIB INQUIRE displays all unique tasklib environments for
      all relevant tasks in the address space.  Since tasklib en-
      vironments are propagated to lower level tasks, this means in
      general that all tasks at a level below that of a displayed
      task possess the same environment.  For example, if the TMP
      program IKJEFT01 or equivalent is displayed by TLIB,
      then it can be assumed that lower level tasks such as IKJEFT02
      and IKJEFT09 have the same environment.  The same is true
      for ISPF unless ISPLLIB is allocated prior to invocation,
      in which case all screen subtasks have ISPLLIB as the initial
      tasklib.

      If one of the displayed environments is associated with the
      task under which the TLIB command is issued, a 'current task'
      indication is included in the display.

   4. It is generally advisable to issue TLIB INQUIRE after an
      ADD or DELETE to ensure that the requested action has been
      taken.  This is particularly true for DELETE, where all
      specifications must match in order for the delete to occur,
      and a specification error will typically not trigger an error
      message.  For example, if DELETE DSNAME is requested and the
      dataset name is misspelled, no action is taken and no error
      message is issued.  Similarly, if DELETE DSNAME VOLSER is
      requested and the dataset name does not exist on the specified
      volume, no action is taken and no error message is issued.

   5. TLIB can also be issued in background mode ie under the TMP
      running in batch.  Operation is identical to that of foreground
      mode.


ALLOC

         MACRO
&NAME    ALLOC &RENT=,                     'YES' IF REENTRANCY DESIRED *
               &VERB='AL',                 DEFAULT IS TO ALLOCATE      *
               &DDNAM=,                    DDNAME                      *
               &DSNAM=,                    DATASET NAME               *
               &VLSER=,                    VOLUME SERIAL NUMBER        *
               &STATS=,                    INITIAL STATUS              *
               &RTDDN=,                    'YES' TO RETURN THE DDNAME  *
               &RTORG=,                    'YES' TO RETURN THE DSORG   *
               &UNIT=,                     UNITNAME                    *
               &UNALC=                     'YES' TO FORCE UNALLOCATE
&NAME    DS    0H
         GBLA  &ALCMTUN,&ALCMTUL
         LCLA  &I1,&I2,&STRINGK
         LCLC  &CHARS
&I1      SETA  0                          NUMBER OF TEXT UNITS
&I2      SETA  0                          LENGTH OF TEXT UNITS
         AIF   ('&RENT' EQ '').RENTE      NON-REENTRANT VERSION
         AIF   ('&RENT' EQ '''YES''').RENTY REENTRANT VERSION
         MNOTE 8,'INVALID ''RENT'' SPECIFICATION'
         AGO   .RENTE
.RENTY   ANOP
         LA    R1,ALCRB                   PLUG VALUES
         ST    R1,ALCRBPTR
         OI    ALCRBPTR,X'80'
         MVC   ALCRB(8),=X'1400000000000000'
         LA    R1,ALCTUPL
         ST    R1,ALCTXTPP
         MVC   ALCFLAG2,=AL4(0)
.RENTE   ANOP
         AIF   ('&VERB'(1,1) EQ '(').VERBRG      REGISTER
         AIF   ('&VERB'(1,1) EQ '''').VERBST     STRING
         MVC   ALCVERB,&VERB                     ADDRESS
         AGO   .VERBE
.VERBRG  ANOP
&STRINGK SETA  K'&VERB-2                        NO OF CHARACTERS
&CHARS   SETC  '&VERB'(2,&STRINGK)
         MVC   ALCVERB,0(&CHARS)
         AGO   .VERBE
.VERBST  ANOP
         AIF   ('&VERB' EQ '''AL''').VERBSET
         AIF   ('&VERB' EQ '''UN''').VERBSET
         AIF   ('&VERB' EQ '''CC''').VERBSET
         MNOTE 8,'INVALID VERB SPECIFICATION'
         AGO   .VERBE
.VERBSET ANOP
&STRINGK SETA  K'&VERB-2                        NO OF CHARACTERS
&CHARS   SETC  '&VERB'(2,&STRINGK)
         MVI   ALCVERB,S99VRB&CHARS
.VERBE   ANOP
         LA    R1,ALCTUS                        POINT TO TU AREA
         AIF   ('&VERB' EQ '''AL''').DDNAM
         AIF   ('&VERB' EQ '''UN''').DDNAM
         AIF   ('&VERB' EQ '''CC''').CCDDN
         MNOTE 8,'INVALID VERB SPECIFICATION'
*
.DDNAM   AIF   ('&DDNAM' EQ '').DDNAME
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&DDNAM'(1,1) EQ '(').DDNAMRG   REGISTER
         AIF   ('&DDNAM'(1,1) EQ '''').DDNAMST  STRING
         LA    R0,&DDNAM                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .DDNAME
.DDNAMRG ANOP
&STRINGK SETA  K'&DDNAM-2
&CHARS   SETC  '&DDNAM'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .DDNAME
.DDNAMST ANOP
&STRINGK SETA  K'&DDNAM-2
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALDDNAM)           KEY
         MVC   2(2,R1),=AL2(1)                  NUMBER
         MVC   4(2,R1),=AL2(&STRINGK)           LENGTH
&CHARS   SETC  '&DDNAM'(2,&STRINGK)             GET THE ACTUAL STRING
         MVC   6(&STRINGK,R1),=C'&CHARS'        PARM
&I2      SETA  &I2+6+&STRINGK                   LENGTH OF THIS TU
         LA    R1,(6+&STRINGK)(R1)              UPDATE TU ADDRESS
.DDNAME  ANOP
.DSNAM   AIF   ('&DSNAM' EQ '').DSNAME
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&DSNAM'(1,1) EQ '(').DSNAMRG   REGISTER
         AIF   ('&DSNAM'(1,1) EQ '''').DSNAMST  STRING
         LA    R0,&DSNAM                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .DSNAME
.DSNAMRG ANOP
&STRINGK SETA  K'&DSNAM-2
&CHARS   SETC  '&DSNAM'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .DSNAME
.DSNAMST ANOP
&STRINGK SETA  K'&DSNAM-2
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALDSNAM)           KEY
         MVC   2(2,R1),=AL2(1)                  NUMBER
         MVC   4(2,R1),=AL2(&STRINGK)           LENGTH
&CHARS   SETC  '&DSNAM'(2,&STRINGK)             GET THE ACTUAL STRING
         MVC   6(&STRINGK,R1),=C'&CHARS'        PARM
&I2      SETA  &I2+6+&STRINGK                   LENGTH OF THIS TU
         LA    R1,(6+&STRINGK)(R1)              UPDATE TU ADDRESS
.DSNAME  ANOP
.VLSER   AIF   ('&VLSER' EQ '').VLSERE
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&VLSER'(1,1) EQ '(').VLSERRG   REGISTER
         AIF   ('&VLSER'(1,1) EQ '''').VLSERST  STRING
         LA    R0,&VLSER                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .VLSERE
.VLSERRG ANOP
&STRINGK SETA  K'&VLSER-2
&CHARS   SETC  '&VLSER'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .VLSERE
.VLSERST ANOP
&STRINGK SETA  K'&VLSER-2
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALVLSER)           KEY
         MVC   2(2,R1),=AL2(1)                  NUMBER
         MVC   4(2,R1),=AL2(&STRINGK)           LENGTH
&CHARS   SETC  '&VLSER'(2,&STRINGK)             GET THE ACTUAL STRING
         MVC   6(&STRINGK,R1),=C'&CHARS'        PARM
&I2      SETA  &I2+6+&STRINGK                   LENGTH OF THIS TU
         LA    R1,(6+&STRINGK)(R1)              UPDATE TU ADDRESS
.VLSERE  ANOP
.STATS   AIF   ('&STATS' EQ '').STATSE
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&STATS'(1,1) EQ '(').STATSRG   REGISTER
         AIF   ('&STATS'(1,1) EQ '''').STATSST  STRING
         LA    R0,&STATS                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .STATSE
.STATSRG ANOP
&STRINGK SETA  K'&STATS-2
&CHARS   SETC  '&STATS'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .STATSE
.STATSST ANOP
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALSTATS)           KEY
         MVC   2(2,R1),=AL2(1)                  NUMBER
         MVC   4(2,R1),=AL2(1)                  LENGTH
         AIF   ('&STATS' EQ '''OLD''').STATSO
         AIF   ('&STATS' EQ '''MOD''').STATSM
         AIF   ('&STATS' EQ '''NEW''').STATSN
         AIF   ('&STATS' EQ '''SHR''').STATSS
         MNOTE 8,'INVALID "STATS" SPECIFICATION'
         AGO   .STATSE
.STATSO  ANOP
         MVI   6(R1),X'01'
         AGO   .STATSU1
.STATSM  ANOP
         MVI   6(R1),X'02'
         AGO   .STATSU1
.STATSN  ANOP
         MVI   6(R1),X'04'
         AGO   .STATSU1
.STATSS  ANOP
         MVI   6(R1),X'08'
         AGO   .STATSU1
.STATSU1 ANOP
&I2      SETA  &I2+7                            LENGTH OF THIS TU
         LA    R1,7(R1)                         UPDATE TU ADDRESS
.STATSE  ANOP
.RTDDN   AIF   ('&RTDDN' EQ '').RTDDNE
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&RTDDN'(1,1) EQ '(').RTDDNRG   REGISTER
         AIF   ('&RTDDN'(1,1) EQ '''').RTDDNST  LITERAL
         LA    R0,&RTDDN                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .RTDDNE
.RTDDNRG ANOP
&STRINGK SETA  K'&RTDDN-2
&CHARS   SETC  '&RTDDN'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .RTDDNE
.RTDDNST ANOP
         AIF   ('&RTDDN' EQ '''YES''').RTDDNY
         MNOTE 8,'INVALID ''RTDDN'' SPECIFICATION'
         AGO   .RTDDNE
.RTDDNY  ANOP
&STRINGK SETA  0
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALRTDDN)           KEY
         MVC   2(2,R1),=AL2(1)                  NUMBER
         MVC   4(2,R1),=AL2(8)                  LENGTH
&I2      SETA  &I2+6+8                          LENGTH OF THIS TU
         LA    R1,(6+8)(R1)                     UPDATE TU ADDRESS
.RTDDNE  ANOP
.RTORG   AIF   ('&RTORG' EQ '').RTORGE
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&RTORG'(1,1) EQ '(').RTORGRG   REGISTER
         AIF   ('&RTORG'(1,1) EQ '''').RTORGST  LITERAL
         LA    R0,&RTORG                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .RTORGE
.RTORGRG ANOP
&STRINGK SETA  K'&RTORG-2
&CHARS   SETC  '&RTORG'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .RTORGE
.RTORGST ANOP
         AIF   ('&RTORG' EQ '''YES''').RTORGY
         MNOTE 8,'INVALID ''RTORG'' SPECIFICATION'
         AGO   .RTORGE
.RTORGY  ANOP
&STRINGK SETA  0
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALORGDN)           KEY
         MVC   2(2,R1),=AL2(1)                  NUMBER
         MVC   4(2,R1),=AL2(2)                  LENGTH
&I2      SETA  &I2+6+2                          LENGTH OF THIS TU
         LA    R1,(6+2)(R1)                     UPDATE TU ADDRESS
.RTORGE  ANOP
.UNIT    AIF   ('&UNIT' EQ '').UNITE
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&UNIT'(1,1) EQ '(').UNITRG     REGISTER
         AIF   ('&UNIT'(1,1) EQ '''').UNITST    STRING
         LA    R0,&UNIT                         ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .UNITE
.UNITRG ANOP
&STRINGK SETA  K'&UNIT-2
&CHARS   SETC  '&UNIT'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .UNITE
.UNITST ANOP
&STRINGK SETA  K'&UNIT-2
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DALUNIT)            KEY
         MVC   2(2,R1),=AL2(1)                  NUMBER
         MVC   4(2,R1),=AL2(&STRINGK)           LENGTH
&CHARS   SETC  '&UNIT'(2,&STRINGK)              GET THE ACTUAL STRING
         MVC   6(&STRINGK,R1),=C'&CHARS'        PARM
&I2      SETA  &I2+6+&STRINGK                   LENGTH OF THIS TU
         LA    R1,(6+&STRINGK)(R1)              UPDATE TU ADDRESS
.UNITE   ANOP
.UNALC   AIF   ('&UNALC' EQ '').UNALCE
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&UNALC'(1,1) EQ '(').UNALCRG   REGISTER
         AIF   ('&UNALC'(1,1) EQ '''').UNALCST  LITERAL
         LA    R0,&UNALC                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .UNALCE
.UNALCRG ANOP
&STRINGK SETA  K'&UNALC-2
&CHARS   SETC  '&UNALC'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .UNALCE
.UNALCST ANOP
         AIF   ('&UNALC' EQ '''YES''').UNALCY
         MNOTE 8,'INVALID ''UNALC'' SPECIFICATION'
         AGO   .UNALCE
.UNALCY  ANOP
&STRINGK SETA  0
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DUNUNALC)           KEY
         MVC   2(2,R1),=AL2(0)                  NUMBER
&I2      SETA  &I2+4                            LENGTH OF THIS TU
         LA    R1,(4)(R1)                       UPDATE TU ADDRESS
.UNALCE  ANOP
         AGO   .CHKSUMS
.CCDDN   AIF   ('&DDNAM' EQ '').CCDDNE
&I1      SETA  &I1+1                            INCREMENT TU NUMBER
         AIF   ('&DDNAM'(1,2) EQ '(''').CCDDNST STRING LIST
         AIF   ('&DDNAM'(1,1) EQ '(').CCDDNRG   REGISTER
         LA    R0,&DDNAM                        ADDRESS
         ST    R0,ALCTUA&I1
         AGO   .CCDDNE
.CCDDNRG ANOP
&STRINGK SETA  K'&DDNAM-2
&CHARS   SETC  '&DDNAM'(2,&STRINGK)
         ST    &CHARS,ALCTUA&I1
         AGO   .CCDDNE
.CCDDNST ANOP
&LI      SETA  1
&DDNAMLE SETC  '&DDNAM(&LI)'
&DDNAMLN SETA  N'&DDNAM
         ST    R1,ALCTUA&I1                     STORE TU ADDRESS
         MVC   0(2,R1),=AL2(DCCDDNAM)           KEY
         MVC   2(2,R1),=AL2(&DDNAMLN)           NUMBER
         LA    R1,4(R1)                         UPDATE TU ADDRESS
&I2      SETA  &I2+4                            LENGTH TO THIS POINT
.CCDDNLL ANOP
&STRINGK SETA  K'&DDNAMLE-2
         MVC   0(2,R1),=AL2(&STRINGK)           LENGTH
&CHARS   SETC  '&DDNAMLE'(2,&STRINGK)           GET THE ACTUAL STRING
         MVC   2(&STRINGK,R1),=C'&CHARS'        PARM
&I2      SETA  &I2+2+&STRINGK                   LENGTH OF THIS TU
         LA    R1,(2+&STRINGK)(R1)              UPDATE TU ADDRESS
&LI      SETA  &LI+1
         AIF   (&LI GT N'&DDNAM).CCDDNE
&DDNAMLE SETC  '&DDNAM(&LI)'
         AGO   .CCDDNLL
.CCDDNE  ANOP
.CHKSUMS ANOP
         AIF   (&I1 LE &ALCMTUN).CHKMTUL
&ALCMTUN SETA  &I1
.CHKMTUL ANOP
         AIF   (&I2 LE &ALCMTUL).SVC99
&ALCMTUL SETA  &I2
.SVC99   ANOP
         OI    ALCTUA&I1,X'80'            TURN ON HIGH BIT FOR LAST TUA
         LA    R1,ALCRBPTR                POINT TO RB POINTER
         SVC   99                         ALLOCATE
         MEND


ALLOCPL

         MACRO
&NAME    ALLOCPL
         LCLA  &I
         GBLA  &ALCMTUN,&ALCMTUL
***** DYNAMIC ALLOCATION REQUEST BLOCK POINTER *****
&NAME    DS     0F                     FULLWORD ALIGNMENT
ALCRBPTR DC     X'80',AL3(ALCRB)       REQUEST BLOCK POINTER
***** DYNAMIC ALLOCATION REQUEST BLOCK *****
ALCRB    DS     0F                     REQUEST BLOCK
ALCRBLN  DC     AL1(20)                LENGTH OF REQUEST BLOCK
ALCVERB  DC     AL1(00)                VERB CODE
ALCFLAG1 DS     0AL2                   FLAGS
ALCFLG11 DC     AL1(00)                FIRST FLAGS BYTE
ALCFLG12 DC     AL1(00)                SECOND BYTE OF FLAGS
ALCRSC   DS     0AL4                   REASON CODE FIELDS
ALCERROR DC     AL2(00)                ERROR REASON CODE
ALCINFO  DC     AL2(00)                INFORMATION REASON CODE
ALCTXTPP DC     A(ALCTUPL)             ADDR OF LIST OF TEXT UNIT PTRS
ALCRSV01 DC     F'0'                   RESERVED
ALCFLAG2 DS     0AL4                   FLAGS FOR AUTHORIZED FUNCTIONS
ALCFLG21 DC     AL1(00)                FIRST BYTE OF FLAGS
ALCFLG22 DC     AL1(00)                SECOND BYTE OF FLAGS
ALCFLG23 DC     AL1(00)                THIRD BYTE OF FLAGS
ALCFLG24 DC     AL1(00)                FOURTH BYTE OF FLAGS
***** DYNAMIC ALLOCATION TEXT UNIT POINTER LIST *****
ALCTUPL  DS     0F
&I       SETA   0
.LOOP1   ANOP
&I       SETA   &I+1
         AIF    (&I GT &ALCMTUN).ALCMTUE
ALCTUA&I DC     A(0)                   TEXT UNIT ADDRESS - PLUGGED BY
         AGO    .LOOP1                 ALLOC MACRO AT EXECUTION TIME
.ALCMTUE ANOP
***** DYNAMIC ALLOCATION TEXT UNITS *****
ALCTUS   DS     0F
         DS     &ALCMTUL.C
         MEND


CNVTHXEB

CNVTHXEB LINKAGE TYPE=NOAREA,AMODE=31,RMODE=ANY
         LR    R10,R1                   POINT TO PARM SET
CHE00001 DS    0H
         LM    R3,R6,0(R10)             LOAD PARM ADDRS
         CLC   0(4,R4),=AL4(0)          ZERO INPUT LENGTH?
         BE    CHE00004                 YES
         CLC   0(4,R6),=AL4(0)          ZERO OUTPUT LENGTH?
         BE    CHE00004                 YES
         TM    3(R6),X'01'              ODD OUTPUT STRING LENGTH?
         BZ    CHE00010                 NO
CHE00004 DS    0H
         LA    R15,4                    ERROR
         LA    R0,*-CNVTHXEB            DISPLACEMENT OF ERROR
         B     RETURN+2                 RETURN
CHE00010 DS    0H
         L     R4,0(R4)                 LOAD INPUT STRING LENGTH
         L     R6,0(R6)                 LOAD OUTPUT STRING LENGTH
         LR    R0,R5                    LOAD ADDR OF OUTPUT AREA
         LR    R1,R6                    LOAD LENGTH
         XR    R14,R14                  NO SOURCE ADDR
         XR    R15,R15                  ZERO PAD
         MVCL  R0,R14                   CLEAR OUTPUT AREA
         LA    R8,0(R3,R4)              POINT PAST INPUT STRING
         LR    R1,R8                    SAVE THAT ADDRESS
         LA    R9,0(R5,R6)              POINT PAST OUTPUT STRING
         LR    R2,R9                    SAVE THAT ADDRESS
         LR    R7,R6                    LOAD OUTPUT STRING LENGTH
         SRL   R7,1                     NO OF INPUT BYTES THIS TAKES
         CR    R4,R7                    WHICH IS LESS?
         BL    CHE00020                 INPUT LENGTH, USE IT
         SR    R8,R7                    BACK OFF ON INPUT
         SLL   R7,1                     NO OF BYTES ON OUTPUT
         SR    R9,R7                    BACK OFF ON OUTPUT
         B     CHE00040
CHE00020 DS    0H
         SR    R8,R4                    BACK OFF ON INPUT
         SLL   R4,1                     NO OF BYTES ON OUTPUT
         SR    R9,R4                    BACK OFF ON OUTPUT
CHE00040 DS    0H
         MVZ   0(1,R9),0(R8)            MOVE ZONES
         MVN   1(1,R9),0(R8)            MOVE NUMERICS
         LA    R8,1(R8)                 NEXT INPUT BYTE
         LA    R9,2(R9)                 NEXT OUTPUT BYTE SET
         CR    R8,R1                    AT THE END ON INPUT?
         BE    CHE00060                 YES
         CR    R9,R2                    AT THE END ON OUTPUT?
         BE    CHE00060                 YES
         B     CHE00040                 NO, CONTINUE
CHE00060 DS    0H
         LA    R2,TRTABLE1              POINT TO TRANSLATE TABLE
         TRL   R5,R6,R2                 TRANSLATE TO EBCDIC
         TM    12(R10),X'80'            LAST PARM SET?
         BO    RETURN                   YES
         LA    R10,16(R10)              NEXT PARM SET
         B     CHE00001                 CYCLE
***** DATA AREA *****
TRTABLE1 DC    256X'FF'
         ORG   TRTABLE1+X'00'
         DC    C'0'
         ORG   TRTABLE1+X'01'
         DC    C'1'
         ORG   TRTABLE1+X'10'
         DC    C'1'
         ORG   TRTABLE1+X'02'
         DC    C'2'
         ORG   TRTABLE1+X'20'
         DC    C'2'
         ORG   TRTABLE1+X'03'
         DC    C'3'
         ORG   TRTABLE1+X'30'
         DC    C'3'
         ORG   TRTABLE1+X'04'
         DC    C'4'
         ORG   TRTABLE1+X'40'
         DC    C'4'
         ORG   TRTABLE1+X'05'
         DC    C'5'
         ORG   TRTABLE1+X'50'
         DC    C'5'
         ORG   TRTABLE1+X'06'
         DC    C'6'
         ORG   TRTABLE1+X'60'
         DC    C'6'
         ORG   TRTABLE1+X'07'
         DC    C'7'
         ORG   TRTABLE1+X'70'
         DC    C'7'
         ORG   TRTABLE1+X'08'
         DC    C'8'
         ORG   TRTABLE1+X'80'
         DC    C'8'
         ORG   TRTABLE1+X'09'
         DC    C'9'
         ORG   TRTABLE1+X'90'
         DC    C'9'
         ORG   TRTABLE1+X'0A'
         DC    C'A'
         ORG   TRTABLE1+X'A0'
         DC    C'A'
         ORG   TRTABLE1+X'0B'
         DC    C'B'
         ORG   TRTABLE1+X'B0'
         DC    C'B'
         ORG   TRTABLE1+X'0C'
         DC    C'C'
         ORG   TRTABLE1+X'C0'
         DC    C'C'
         ORG   TRTABLE1+X'0D'
         DC    C'D'
         ORG   TRTABLE1+X'D0'
         DC    C'D'
         ORG   TRTABLE1+X'0E'
         DC    C'E'
         ORG   TRTABLE1+X'E0'
         DC    C'E'
         ORG   TRTABLE1+X'0F'
         DC    C'F'
         ORG   TRTABLE1+X'F0'
         DC    C'F'
         ORG
         END


LABEL

         MACRO
&NAME    LABEL
&NAME    MVC   LABEL,=CL8'&NAME'
         MEND


LINKAGE

         MACRO
&NAME    LINKAGE &BASEREG=R12,&TYPE=NORENT,&SUBPOOL=0,&LENGTH=72,      X
               &AMODE=24,&RMODE=24
         LCLA  &ROUNDLN
         GBLC  &CSECT
&CSECT   SETC  '&NAME'
&NAME    AMODE &AMODE
&NAME    RMODE &RMODE
&NAME    CSECT
R0       EQU   0
R1       EQU   1
         etc
R15      EQU   15
         B     24(R15)                  BRANCH AROUND PROLOG
         DC    CL8'&CSECT'              ID
         DC    CL8'@#PTRDEF'            POINTER-DEFINED VALUE ID
         AIF   (&AMODE EQ 24).AMODE24
         AIF   (&AMODE EQ 31).AMODE31
         MNOTE 8,'INVALID VALUE FOR ''AMODE'' PARAMETER'
         AGO   .MEND
.AMODE24 ANOP
         DC    A(&NAME)                 POINTER-DEFINED VALUE FOR AMODE
         AGO   .AMODEND
.AMODE31 ANOP
         DC    A(&NAME+X'80000000')     POINTER-DEFINED VALUE FOR AMODE
         AGO   .AMODEND
.AMODEND ANOP
         STM   R14,R12,12(R13)          SAVE REGISTERS
         LR    &BASEREG,R15             ESTABLISH BASE
         USING &CSECT,&BASEREG          DECLARE IT
         AIF   ('&TYPE' EQ 'RENT').RENT1 REENTRANT VERSION
         AIF   ('&TYPE' EQ 'NORENT').NORENT0 NONREENTRANT VERSION
         AIF   ('&TYPE' EQ 'WKAREA').WKAREA0 PASSED WORKAREA VERSION
         AIF   ('&TYPE' EQ 'NOAREA').NOAREA0 NO-WORKAREA VERSION
         MNOTE 8,'INVALID VALUE FOR ''TYPE'' PARAMETER'
         AGO   .MEND
.NORENT0 ANOP
&ROUNDLN SETA  (((&LENGTH+1)/2)*2)      ROUND UP TO EVEN VALUE TO
*                                       PREVENT ALIGNMENT ERRORS
         CNOP  0,4                      FULLWORD ALIGN
         LA    R1,*+8                   POINT TO STATIC SAVE AREA
         B     *+4+&ROUNDLN             BRANCH AROUND IT
         DC    &ROUNDLN.X'00'           STATIC SAVE AREA
         AGO   .NORENT1
.WKAREA0 ANOP
         ICM   R1,15,0(R1)              ANY WORKAREA?
         BZ    @LINK1                   NO
         CNOP  0,4                      FULLWORD ALIGN
         ICM   R3,15,*+8                LOAD LENGTH
         B     @LINK2
         DC    A(&LENGTH)
.RENT1   ANOP
@LINK1   DS    0H
         CNOP  0,4                      FULLWORD ALIGN
         ICM   R0,15,*+8                LOAD SUBPOOL & LENGTH
         B     *+8                      BRANCH AROUND IT
         DC    AL1(&SUBPOOL),AL3(&LENGTH) SUBPOOL & LENGTH
         LR    R3,R0                    LOAD LENGTH FOR FOLLOWING CLEAR
         LA    R3,0(R3)                 CLEAR HIGH ORDER BIT/BYTE
         GETMAIN R,LV=(0)               GET STORAGE FOR SAVE AREA
@LINK2   DS    0H
         LR    R2,R1                    TARGET ADDRESS
         SR    R4,R4                    NO SOURCE ADDRESS
         SR    R5,R5                    PAD CHARACTER = 0
         MVCL  R2,R4                    CLEAR GOTTEN STORAGE
.NORENT1 ANOP
         ST    R13,4(R1)                STORE OLD SAVEAREA ADDRESS
         ST    R1,8(R13)                CHAIN
         LR    R15,R13                  SAVE OLD SAVE AREA ADDRESS
         LR    R13,R1                   SET NEW SAVEAREA ADDRESS
         LM    R0,R4,20(R15)            RELOAD ORIGINAL CONTENTS
.NOAREA0 ANOP
         B     @LINKE                   END OF LINKAGE - START PROGRAM
RETURN   DS    0H
         SR    R15,R15                  CLEAR R15
         AIF   ('&TYPE' EQ 'NORENT').NORENT3
         AIF   ('&TYPE' EQ 'NOAREA').NORENT2
         LR    R2,R15                   SAVE R15 OVER THE FREEMAIN IF
*                                       THE USER BRANCHES TO 'RETURN+2'
         LR    R3,R0                    SAME FOR R0
         LR    R1,R13                   SAVE ADDRESS TO BE FREEMAINED
*                                       IE CURRENT SAVE AREA ADDRESS
.NORENT3 ANOP
         L     R13,4(R13)               RELOAD OLD SAVE AREA ADDRESS
         AIF   ('&TYPE' EQ 'NORENT').NORENT2
         AIF   ('&TYPE' EQ 'RENT').RENT2
         L     R4,24(R13)               LOAD R1 PARM POINTER
         ICM   R4,15,0(R4)              LOAD PASSED WORKAREA ADDRESS,
*                                       IF ANY
         BNZ   @LINK3                   THERE IS ONE, DON'T FREEMAIN
.RENT2   ANOP
         CNOP  0,4                      FULLWORD ALIGN
         ICM   R0,15,*+8                LOAD SUBPOOL & LENGTH
         B     *+8                      BRANCH AROUND IT
         DC    AL1(&SUBPOOL),AL3(&LENGTH) SUBPOOL & LENGTH
         FREEMAIN R,LV=(0),A=(1)        FREE SAVE AREA STORAGE
         LR    R15,R2                   RESTORE REGISTER 15
         LR    R0,R3                    AND R0
@LINK3   DS    0H
.NORENT2 ANOP
         L     R14,X'10'                CVT ADDR
         TM    X'74'(R14),X'80'         XA?
         BZ    *+14                     NO
         LM    R1,R12,24(R13)           RELOAD REGS
         L     R14,12(,R13)             RELOAD R14
         BSM   0,R14                    RETURN
         LM    R1,R12,24(R13)           RELOAD REGS
         L     R14,12(,R13)             RELOAD R14
         BR    R14                      RETURN
@LINKE   DS    0H
.MEND    MEND


MSGTXT1L

MSG001   DC    0F'0',AL2(MSG001L),AL2(0)
         DC   C'TLIB001  Invalid, missing, or inconsistent operands'
MSG001L  EQU   *-MSG001
MSG002   DC    0F'0',AL2(MSG002L),AL2(0)
         DC    C'TLIB002  No TASKLIB environment currently exists'
MSG002L  EQU   *-MSG002
MSG003   DC    0F'0',AL2(MSG003L),AL2(0)
         DC    C'TLIB003  Current TASKLIB environment:'
MSG003L  EQU   *-MSG003
MSG003A  DC    0F'0',AL2(MSG003AL),AL2(0)
 DC C' DDname                      DSname                     Volser'
MSG003AL EQU   *-MSG003A
MSG003B  DC    0F'0',AL2(MSG003BL),AL2(0)
 DC C'--------  --------------------------------------------  ------'
MSG003BL EQU   *-MSG003B
MSG003C  DC    0F'0',AL2(MSG003CL),AL2(0)
MSG003DD DC    CL8' '
         DC    CL2' '
MSG003DS DC    CL44' '
         DC    CL2' '
MSG003VS DC    CL6' '
MSG003CL EQU   *-MSG003C
MSG003D  DC    0F'0',AL2(MSG003DL),AL2(0)
         DC    C'Program='
MSG003PR DC    CL8' '
         DC    CL2' '
         DC    C'TCB address='
MSG003TC DC    CL8' '
         DC    CL2' '
MSG003CT DC    (CTMSGL)C' '
MSG003DL EQU   *-MSG003D
CTMSG    DC    C'(current task)'
CTMSGL   EQU   *-CTMSG
MSG004   DC    0F'0',AL2(MSG004L),AL2(0)
         DC    C'TLIB004  Error opening TASKLIB dataset'
MSG004L  EQU   *-MSG004
MSG005   DC    0F'0',AL2(MSG005L),AL2(0)
         DC    C'TLIB005  Error - '
MSG005DS DC    CL44' '
         DC    C' is not a PDS'
MSG005L  EQU   *-MSG005
MSG100   DC    0F'0',AL2(MSG100L),AL2(0)
         DC    C'TLIB100  Error occurred after label '
LABEL    DC    CL8' '
MSG100L  EQU   *-MSG100
MSG101A  DC    0F'0',AL2(MSG101AL),AL2(0)
 DC C'TLIB101  Selected registers in HEX at time of error (if applicabl*
               e):'
MSG101AL EQU   *-MSG101A
MSG101B  DC    0F'0',AL2(MSG101BL),AL2(0)
         DC    C'         R14='
MSG10114 DC    CL8' '
         DC    C'   R15='
MSG10115 DC    CL8' '
         DC    C'   R0='
MSG10100 DC    CL8' '
         DC    C'   R1='
MSG10101 DC    CL8' '
MSG101BL EQU   *-MSG101B
MSG102   DC    0F'0',AL2(MSG102L),AL2(0)
         DC    C'TLIB102  ABEND occurred after label '
LABEL1   DC    CL8' '
         DC    C' - ESTAE exit entered'
MSG102L  EQU   *-MSG102
MSG103   DC    0F'0',AL2(MSG103L),AL2(0)
 DC C'TLIB103  Attempting ESTAE retry - successful if no further messag*
               es issued'
MSG103L  EQU   *-MSG103
MSG110   DC    0F'0',AL2(MSG110L),AL2(0)
 DC C'TLIB110  ABEND recurrence limit exceeded - ABEND proceeding'
MSG110L  EQU   *-MSG110
MSG888   DC    0F'0'
 DC C'TLIB888  ESTAE exit entered without SDWA - ABEND proceeding'
MSG888L  EQU   *-MSG888
MSGTLEN  EQU   *-MSG001             TOTAL LENGTH OF MESSAGES


MSGTXT1U

         DC    0F'0',AL2(MSG001L),AL2(0)
         DC   C'TLIB001  Invalid, missing, or inconsistent operands'
         DC    0F'0',AL2(MSG002L),AL2(0)
         DC    C'TLIB002  No TASKLIB environment currently exists'
         DC    0F'0',AL2(MSG003L),AL2(0)
         DC    C'TLIB003  Current TASKLIB environment:'
         DC    0F'0',AL2(MSG003AL),AL2(0)
 DC C' DDname                      DSname                     Volser'
         DC    0F'0',AL2(MSG003BL),AL2(0)
 DC C'--------  --------------------------------------------  ------'
         DC    0F'0',AL2(MSG003CL),AL2(0)
         DC    CL8' '
         DC    CL2' '
         DC    CL44' '
         DC    CL2' '
         DC    CL6' '
         DC    0F'0',AL2(MSG003DL),AL2(0)
         DC    C'Program='
         DC    CL8' '
         DC    CL2' '
         DC    C'TCB address='
         DC    CL8' '
         DC    CL2' '
         DC    (CTMSGL)C' '
         DC    C'(current task)'
         DC    0F'0',AL2(MSG004L),AL2(0)
         DC    C'TLIB004  Error opening TASKLIB dataset'
         DC    0F'0',AL2(MSG005L),AL2(0)
         DC    C'TLIB005  Error - '
         DC    CL44' '
         DC    C' is not a PDS'
         DC    0F'0',AL2(MSG100L),AL2(0)
         DC    C'TLIB100  Error occurred after label '
         DC    CL8' '
         DC    0F'0',AL2(MSG101AL),AL2(0)
 DC C'TLIB101  Selected registers in HEX at time of error (if applicabl*
               e):'
         DC    0F'0',AL2(MSG101BL),AL2(0)
         DC    C'         R14='
         DC    CL8' '
         DC    C'   R15='
         DC    CL8' '
         DC    C'   R0='
         DC    CL8' '
         DC    C'   R1='
         DC    CL8' '
         DC    0F'0',AL2(MSG102L),AL2(0)
         DC    C'TLIB102  ABEND occurred after label '
         DC    CL8' '
         DC    C' - ESTAE exit entered'
         DC    0F'0',AL2(MSG103L),AL2(0)
 DC C'TLIB103  Attempting ESTAE retry - successful if no further messag*
               es issued'
         DC    0F'0',AL2(MSG110L),AL2(0)
 DC C'TLIB110  ABEND recurrence limit exceeded - ABEND proceeding'
         DC    0F'0'
 DC C'TLIB888  ESTAE exit entered without SDWA - ABEND proceeding'


NAMEST

NAMEST   DSECT                      NAMES TABLE (PLUS SOME OTHER INFO)
DDNAMEST DS    (120*10)X            DDNAMES TABLE
DDNTL    EQU   *-DDNAMEST
REQUEST  DS    X                    REQUEST TYPE:
*                                   1 = ADD LIBRARY OR LIBRARIES
*                                   2 = DELETE LIBRARY OR LIBRARIES
*                                   3 = INQUIRE
UPTADDR  DS    A                    UPT ADDRESS
ECTADDR  DS    A                    ECT ADDRESS
FILET    DS    (1*14)X              FILE (DDNAME) TEXT UNIT TABLE
VOLSERST DS    (120*12)X            VOLSERS TEXT UNITS TABLE
DSNAMEST DS    (120*50)X            DSNAMES TEXT UNITS TABLE
NAMESTL  EQU   *-NAMEST             LENGTH OF TABLE


TLIB

TLIB     LINKAGE AMODE=31
         USING CPPL,R1              DECLARE BASE
         LA    R10,PPLREAL          PPL STORAGE AREA
         USING PPL,R10              DECLARE BASE
         MVC   PPLUPT,CPPLUPT       PLUG UPT
         MVC   PPLECT,CPPLECT       PLUG ECT
         MVC   PPLECB,=A(ECB)       PLUG ECB
         MVC   PPLPCL,=A(PARSPRMS)  PLUG PCL
         MVC   PPLANS,=A(ANSWER)    PLUG ANS
         MVC   PPLCBUF,CPPLCBUF     PLUG CBUF
         XC    PPLUWA,PPLUWA        CLEAR UWA
         DROP  R1                   DROP CPPL BASE
         LA    R11,0                INITIALIZE NAMES TABLE BASE
         L     R15,CVTPTR
         L     R15,CVTTVT-CVT(R15)
         MVC   IKJEFTSR,TSVTASF-TSVT(R15) SAVE IKJEFTSR ADDRESS
TLB00005 LABEL
         CALLTSSR EP=IKJPARS,MF=(E,PPLREAL) CALL PARSE
         LTR   R15,R15              PARSE OK?
         BNZ   TLB09000             NO
         L     R3,ANSWER            GET PDL POINTER
         USING IKJPARMD,R3          DECLARE BASE
         CLC   =AL2(1),DSNAME       DSNAME SPECIFIED?
         BE    TLB00010             YES
         CLC   =AL2(1),INQUIRE      INQUIRE SPECIFIED?
         BNE   TLB09010             NO, ERROR
***** CALL TLIBA TO GET NAMES TABLE STORAGE *****
TLB00010 LABEL
         MVI   FUNCODE,1            MOVE FUNCTION CODE
         L     R15,IKJEFTSR         GET ROUTINE ADDRESS
         CALL  (15),(=X'00000102',=C'TLIBA',=F'5',RETCODE,RSNCODE,     *
               ABNDCODE,PAL),VL,MF=(E,CALLLIST)
         B     *+4(R15)             BRANCH ACCORDING TO TSR RET CODE
         B     TLB00015             RC=00 EVERYTHING OK
         B     TLB00011             RC=04 TLIBA HAD NONZERO RET CODE
         B     TLB09000             RC=08 ATTENTION INTERRUPTION
         B     TLB00012             RC=12 TLIBA ABENDED
         B     TLB09000             RC=16 INACCESSIBLE PARAMETERS
         B     TLB00013             RC=20 PARAMETER ERROR
         B     TLB09000             RC=24 UNEXPECTED FAILURE
         B     TLB09000             RC=28 INCOMPATIBLE AMODES
TLB00011 DS    0H
         L     R0,RETCODE           LOAD TLIBA RETURN CODE
         B     TLB09000             GO TO ERROR ROUTINE
TLB00012 DS    0H
         L     R0,ABNDCODE          LOAD TLIBA ABEND CODE
         L     R1,RSNCODE           LOAD TLIBA ABEND REASON CODE
         B     TLB09000             GO TO ERROR ROUTINE
TLB00013 DS    0H
         L     R0,RSNCODE           LOAD TLIBA ABEND CODE
         B     TLB09000             GO TO ERROR ROUTINE
TLB00015 LABEL
         ICM   R11,15,NMSTBAD       GET ADDRESS OF GETMAINED STORAGE
         USING NAMEST,R11           DECLARE BASE
         MVC   UPTADDR,PPLUPT       PLUG UPT ADDRESS
         MVC   ECTADDR,PPLECT       PLUG ECT ADDRESS
         CLC   =AL2(1),DSNAME       DSNAME SPECIFIED?
         BE    TLB00020             YES
         CLC   =AL2(1),INQUIRE      INQUIRE SPECIFIED?
         BNE   RETURN               NO
***** 'INQUIRE' SPECIFIED *****
         CLC   =AL2(1),DSNAME       ERROR IF ANY OTHER OPERANDS
         BE    TLB09010
         CLC   =AL2(1),ADD
         BE    TLB09010
         CLC   =AL2(1),DELETE
         BE    TLB09010
         CLC   =AL2(1),VOLSER
         BE    TLB09010
         CLC   =AL2(1),LIBENV
         BE    TLB09010
         MVI   REQUEST,3            SPECIFY INQUIRE REQUEST
         B     TLB00050
***** 'DSNAME' SPECIFIED *****
TLB00020 LABEL
         CLC   =A(0),DSNAMEV        ERROR IF NO DSNAME VALUE(S)
         BE    TLB09010
         CLC   =AL2(1),INQUIRE      ERROR IF OTHER UNRELATED OPERANDS
         BE    TLB09010
         LA    R1,0
         AH    R1,ADD
         AH    R1,DELETE
         CH    R1,=H'2'             BOTH DELETE AND ADD SPECIFIED?
         BNL   TLB09010             YES, ERROR
         CLC   =AL2(1),ADD          ADD DSNAMES SPECIFIED?
         BE    TLB00023             YES
         CLC   =AL2(1),DELETE       DELETE DSNAMES SPECIFIED?
         BE    TLB00026             YES, ELSE ASSUME ADD IF NEITHER
TLB00023 LABEL
         MVI   REQUEST,1            SPECIFY ADD REQUEST
         B     TLB00028
TLB00026 LABEL
         MVI   REQUEST,2            SPECIFY DELETE REQUEST
TLB00028 LABEL
         LA    R4,DSNAMEV           POINT TO PDE
         LA    R6,DSNAMEST          PRIME PLACEHOLDER IN DSNAMES TABLE
TLB00030 LABEL
         MVC   0(4,R6),=X'00020001' SPECIFY DSNAME KEY AND NO. OF 1
         MVC   4(2,R6),4(R4)        MOVE DSNAME LENGTH FROM PDE
         MVC   6(44,R6),BLANKS      BLANK DSNAME TARGET AREA
         LA    R14,6(R6)            TARGET ADDRESS FOR DSNAME
         L     R15,0(R4)            GET DSNAME POINTER FROM PDE
         LH    R1,4(R4)             GET DSNAME LENGTH FROM PDE
         BCTR  R1,0                 DECREMENT FOR EXECUTE
         EX    R1,EXMVC             MOVE DSNAME TO STORAGE
         CLC   =X'FF000000',24(R4)  LAST PDE?
         BE    TLB00035             YES
         L     R4,24(R4)            NO, GET NEXT PDE ADDRESS
         LA    R6,50(R6)            INCREMENT PLACEHOLDER
         B     TLB00030             RECYCLE
***** CHECK FOR AND PROCESS VOLSERS *****
TLB00035 LABEL
         CLC   =AL2(1),VOLSER       'VOLSER' SPECIFIED?
         BNE   TLB00050             NO, CARRY ON
         CLC   =A(0),VOLSERV        ERROR IF NO VOLSER VALUE(S)
         BE    TLB09010
         LA    R4,VOLSERV           POINT TO PDE
         LA    R6,VOLSERST          PRIME PLACEHOLDER
TLB00036 LABEL
         MVC   0(4,R6),=X'00100001' SPECIFY VOLSER KEY AND NO. OF 1
         MVC   4(2,R6),4(R4)        MOVE VOLSER LENGTH FROM PDE
         MVC   6(6,R6),BLANKS       BLANK VOLSER TARGET AREA
         LA    R14,6(R6)            TARGET ADDRESS FOR VOLSER
         L     R15,0(R4)            GET VOLSER POINTER FROM PDE
         LH    R1,4(R4)             GET VOLSER LENGTH FROM PDE
         BCTR  R1,0                 DECREMENT FOR EXECUTE
         EX    R1,EXMVC             MOVE VOLSER TO STORAGE
         CLC   =C'0 ',6(R6)         WAS VOLSER A '0' (MEANING NONE)?
         BNE   TLB00037             NO, CARRY ON
         MVI   1(R6),0              YES, NULLIFY THE TEXT UNIT
TLB00037 LABEL
         CLC   =X'FF000000',24(R4)  LAST PDE?
         BE    TLB00050             YES
         L     R4,24(R4)            NO, GET NEXT PDE ADDRESS
         LA    R6,12(R6)            INCREMENT PLACEHOLDER
         B     TLB00036             RECYCLE
***** IRB PREPARATION *****
***** CALL TLIBA TO CREATE AND SCHEDULE THE TLIBX IRB *****
TLB00050 LABEL
         MVI   FUNCODE,2            MOVE FUNCTION CODE
         L     R2,PSATOLD-PSA       OUR TCB ADDRESS
         L     R2,TCBOTC-TCB(R2)    ORIGINATING TCB ADDRESS
         LINK  EP=ISPQRY
         LTR   R15,R15              ARE WE UNDER ISPF?
         BNZ   TLB00055             NO
         CLC   =AL2(1),LIBENV       YES, STEPLIB ENVIRONMENT SPECIFIED?
         BNE   TLB00060             NO, USE ORIGINATING TCB
TLB00055 LABEL
         MVC   TGTCBAD+1(3),TCBJSTCA-TCB(R2) MOVE JSTCB (IKJEFT01) ADDR
         B     TLB00070
TLB00060 LABEL
         ST    R2,TGTCBAD           STORE ORIGINATING TCB ADDRESS
TLB00070 LABEL
         L     R15,IKJEFTSR         GET ROUTINE ADDRESS
TLB00100 LABEL
         CALL  (15),(=X'00000102',TLIBA,=F'8',RETCODE,RSNCODE,         *
               ABNDCODE,PAL),VL,MF=(E,CALLLIST)
         B     *+4(R15)             BRANCH ACCORDING TO TSR RET CODE
         B     TLB00200             RC=00 EVERYTHING OK
         B     TLB00142             RC=04 TLIBA HAD NONZERO RET CODE
         B     TLB09000             RC=08 ATTENTION INTERRUPTION
         B     TLB00143             RC=12 TLIBA ABENDED
         B     TLB09000             RC=16 INACCESSIBLE PARAMETERS
         B     TLB00144             RC=20 PARAMETER ERROR
         B     TLB09000             RC=24 UNEXPECTED FAILURE
         B     TLB09000             RC=28 INCOMPATIBLE AMODES
TLB00142 DS    0H
         L     R0,RETCODE           LOAD TLIBA RETURN CODE
         B     TLB09000             GO TO ERROR ROUTINE
TLB00143 DS    0H
         L     R0,ABNDCODE          LOAD TLIBA ABEND CODE
         L     R1,RSNCODE           LOAD TLIBA ABEND REASON CODE
         B     TLB09000             GO TO ERROR ROUTINE
TLB00144 DS    0H
         L     R0,RSNCODE           LOAD TLIBA ABEND CODE
         B     TLB09000             GO TO ERROR ROUTINE
TLB00200 DS    0H
         IKJRLSA ANSWER             RELEASE PARSE STORAGE
         B     RETURN               RETURN
         DROP  R3                   DROP PARSE-RELATED BASE REGISTER
***** ERROR ROUTINES *****
***** GENERALIZED ERROR REPORTING *****
TLB09000 DS    0H
         STM   R14,R1,ERRREGS       SAVE ERROR REGISTERS
         L     R2,PPLUPT
         L     R3,PPLECT
         PUTLINE PARM=PUTLINEL,UPT=(R2),ECT=(R3),ECB=ECB,              *
               OUTPUT=(MSG100,DATA),MF=(E,IOPL) DISPLAY ERROR LABEL
         CALL  CNVTHXEB,(ERRREGS,=F'4',MSG10114,=F'8',                 *
               ERRREGS+4,=F'4',MSG10115,=F'8',                         *
               ERRREGS+8,=F'4',MSG10100,=F'8',                         *
               ERRREGS+12,=F'4',MSG10101,=F'8'),                       *
               VL,MF=(E,CALLLIST)
         PUTLINE PARM=PUTLINEL,UPT=(R2),ECT=(R3),ECB=ECB,              *
               OUTPUT=(MSG101A,DATA),MF=(E,IOPL) DISPLAY ERROR REGS
         PUTLINE PARM=PUTLINEL,UPT=(R2),ECT=(R3),ECB=ECB,              *
               OUTPUT=(MSG101B,DATA),MF=(E,IOPL)
         B     TLB09050
***** INVALID, MISSING, OR INCONSISTENT OPERANDS *****
TLB09010 DS    0H
         L     R2,PPLUPT
         L     R3,PPLECT
         PUTLINE PARM=PUTLINEL,UPT=(R2),ECT=(R3),ECB=ECB,              *
               OUTPUT=(MSG001,DATA),MF=(E,IOPL) DISPLAY ERROR MESSAGE
         MVC   ERRREGS+4(4),=F'8'   SET RETURN CODE
***** CLEAN UP AND GET OUT *****
TLB09050 DS    0H
         IKJRLSA ANSWER             RELEASE PARSE STORAGE
         LTR   R11,R11              ANY WORKAREA TO FREE?
         BZ    TLB09100             NO, SKIP FREEMAIN
***** CALL TLIBA TO FREE NAMES TABLE STORAGE *****
         MVI   FUNCODE,3            MOVE FUNCTION CODE
         LA    R11,0                CLEAR R11 IN CASE OF ERROR BELOW
         L     R15,IKJEFTSR         GET ROUTINE ADDRESS
TLB09051 LABEL
         CALL  (15),(=X'00000102',TLIBA,=F'8',RETCODE,RSNCODE,         *
               ABNDCODE,PAL),VL,MF=(E,CALLLIST)
         B     *+4(R15)             BRANCH ACCORDING TO TSR RET CODE
         B     TLB09100             RC=00 EVERYTHING OK
         B     TLB09052             RC=04 TLIBA HAD NONZERO RET CODE
         B     TLB09000             RC=08 ATTENTION INTERRUPTION
         B     TLB09053             RC=12 TLIBA ABENDED
         B     TLB09000             RC=16 INACCESSIBLE PARAMETERS
         B     TLB09054             RC=20 PARAMETER ERROR
         B     TLB09000             RC=24 UNEXPECTED FAILURE
         B     TLB09000             RC=28 INCOMPATIBLE AMODES
TLB09052 DS    0H
         L     R0,RETCODE           LOAD TLIBA RETURN CODE
         B     TLB09000             REPORT ERROR
TLB09053 DS    0H
         L     R0,ABNDCODE          LOAD TLIBA ABEND CODE
         L     R1,RSNCODE           LOAD TLIBA ABEND REASON CODE
         B     TLB09000             REPORT ERROR
TLB09054 DS    0H
         L     R0,RSNCODE           LOAD TLIBA ABEND CODE
         B     TLB09000             REPORT ERROR
TLB09100 DS    0H
         L     R15,ERRREGS+4        LOAD RETURN CODE
         B     RETURN+2             RETURN
***** DATA AREA *****
         COPY  MSGTXT1L
BLANKS   DC    CL44' '              FOR BLANKING
IKJEFTSR DC    A(0)                 IKJEFTSR ADDRESS
TLIBA    DC    CL8'TLIBA'           TLIB AUTHORIZED FUNCTIONS ROUTINE
RETCODE  DC    F'0'                 RETURN CODE
RSNCODE  DC    F'0'                 REASON CODE
ABNDCODE DC    F'0'                 ABEND CODE
PAL      DC    0F'0',X'80',AL3(PARMS)
PARMS    DC    AL2(PARMSLEN)
PARMSBEG EQU   *
FUNCODE  DC    H'0'                 FUNCTION CODE (IN HIGH ORDER BYTE)
NMSTBAD  DC    A(0)                 NAMES TABLE ADDR PLUGGED BY TLIBA
TGTCBAD  DC    A(0)                 TARGET TCB ADDRESS FOR IRB
PPLAD    DC    A(PPLREAL)           PPL ADDRESS
PARMSLEN EQU   *-PARMSBEG
PUTLINEL PUTLINE MF=L
IOPL     DC    4A(0)
CALLLIST CALL  ,(,,,,,,,,,,,,,,,,,,,,,,),MF=L
ERRREGS  DC    4A(0)                ERROR REGISTERS
EXMVC    MVC   0(0,R14),0(R15)
PPLREAL  DC    (PPLLNGTH)X'00'      PPL STORAGE AREA
ECB      DC    F'0'                 COMMAND PROCESSOR ECB
ANSWER   DC    A(0)                 ANSWER WORD FOR PDL POINTER
PARSPRMS IKJPARM
DSNAME   IKJKEYWD
         IKJNAME 'DSNAME',SUBFLD=DSNFLDS,ALIAS=('DATASET')
ADD      IKJKEYWD
         IKJNAME 'ADD'
DELETE   IKJKEYWD
         IKJNAME 'DELETE'
INQUIRE  IKJKEYWD
         IKJNAME 'INQUIRE'
VOLSER   IKJKEYWD
         IKJNAME 'VOLSER',SUBFLD=VOLFLDS
LIBENV   IKJKEYWD
         IKJNAME 'STEPLIB'
DSNFLDS  IKJSUBF
DSNAMEV  IKJPOSIT DSNAME,LIST,USID
VOLFLDS  IKJSUBF
VOLSERV  IKJPOSIT DSNAME,VOLSER,LIST
         IKJENDP
         IKJPPL                     PPL DSECT
PPLLNGTH EQU   *-PPL                PPL LENGTH
***** DSECTS *****
         COPY  NAMEST               NAMES TABLE
         IKJCPPL
         IHAPSA
         IHARB
         IHACDE
         IKJTCB
         IKJTSVT
         CVT   DSECT=YES,LIST=NO
         END


TLIBA

TLIBA    LINKAGE AMODE=31
***** FUNCTION CODES: 1=GETMAIN, 2=IRB CREATION, 3=FREEMAIN *****
         L     R11,0(R1)            GET PARMS POINTER
         ICM   R10,15,12(R11)       GET PPL ADDRESS
         BNZ   TLBA0030             THERE IS ONE, OK
         LA    R15,4                THERE ISN'T ONE, ERROR
         B     RETURN+2
TLBA0030 LABEL
         USING PPL,R10
         CLI   2(R11),1             GETMAIN REQUEST?
         BE    TLBA0100             YES
         CLI   2(R11),2             IRB CREATION REQUEST?
         BE    TLBA0400             YES
         CLI   2(R11),3             FREEMAIN REQUEST?
         BE    TLBA1000             YES
TLBA0050 LABEL                      INVALID FUNCTION CODE
         LA    R15,8                SET RETURN CODE
         B     TLBA9450             GO TO ERROR ROUTINE
***** FUNCTION CODE 1 - GET NAMES TABLE STORAGE FROM SUBPOOL 251 *****
TLBA0100 LABEL
         MODESET MODE=SUP
         GETMAIN RU,LV=NAMESTL,SP=251 GET NAMES TABLE STORAGE
         LR    R2,R1                SAVE STORAGE ADDRESS
         MODESET MODE=PROB
         ST    R2,4(R11)            STORE STORAGE ADDRESS - RETURN PARM
         LR    R0,R2
         L     R1,=A(NAMESTL)
         LA    R14,0
         LA    R15,0
         MVCL  R0,R14               ZERO STORAGE
         B     RETURN               RETURN
***** FUNCTION CODE 2 - CREATE AND SCHEDULE AN IRB *****
* LOAD EXIT AND BUMP USE COUNT TO KEEP IN STORAGE FOR IRB DISPATCHING *
TLBA0400 LABEL
         LOAD  EP=TLIBX             LOAD EXIT ROUTINE
         LR    R3,R0                SAVE ITS ADDRESS
         L     R2,PSATOLD-PSA       OUR TCB ADDRESS
         ICM   R2,7,TCBJSTCA-TCB(R2) JOBSTEP TCB ADDRESS
         BZ    TLBA9450             NOTHING THERE, ERROR
         ICM   R2,7,TCBJPQB-TCB(R2) JOB PACK AREA QUEUE ADDRESS
         BZ    TLBA9450             NOTHING THERE, ERROR
TLBA0405 LABEL
         CLC   =CL8'TLIBX',CDNAME-CDENTRY(R2) CDE FOR TLIBX?
         BE    TLBA0410             YES
         ICM   R2,15,CDCHAIN-CDENTRY(R2) NEXT CDE
         BNZ   TLBA0405             RECYCLE
         B     TLBA9450             COULDN'T FIND ONE, ERROR
TLBA0410 LABEL
         CLC   =H'8',CDUSE-CDENTRY(R2) MODULE USE COUNT ALREADY UPPED?
         BNH   TLBA0510             YES, DON'T BOTHER FURTHER
         MODESET KEY=ZERO
         MVC   CDUSE-CDENTRY(2,R2),=H'10' ELSE UP TO KEEP IT IN STORAGE
***** PREPARE THE ASYNCHRONOUS EXIT ENVIRONMENT *****
TLBA0510 LABEL
         MODESET MODE=SUP,KEY=ZERO
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,RELATED=1
         LTR   R15,R15              LOCK OBTAINED?
         BNZ   TLBA9450             NO, ERROR
TLBA0511 LABEL
         ICM   R4,15,8(R11)         GET ORIGINATING TCB ADDRESS
         BZ    TLBA9450             ERROR IF NONE
TLBA0520 LABEL
         CLC   =CL4'TCB',TCBTCBID-TCB(R4) MAKE SURE IT IS A TCB
         BNE   TLBA9450             ERROR IF NOT
         CIRB  EP=(R3),MODE=SUPR,SVAREA=YES,WKAREA=255,BRANCH=YES,     *
               STAB=DYN
         LR    R2,R1                SAVE IRB ADDRESS
         L     R6,RBNEXAV-RBBASIC(R2) GET IQE ADDRESS
         USING IQE,R6
         MVC   IQEPARAM,4(R11)      MOVE NAMES TABLE ADDRESS AS PARM
         ST    R2,IQEIRB
         ST    R4,IQETCB            STORE TCB ADDRESS
         LCR   R1,R6                2'S-COMPLEMENT IQE ADDRESS
         L     R15,CVTPTR           CVT ADDRESS
         L     R15,CVT0EF00-CVT(R15) STAGE 2 EXIT EFFECTOR ADDRESS
         BALR  R14,R15              GO TO IT
TLBA0600 LABEL
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=1 RELEASE LOCK
         LTR   R15,R15              DID IT RELEASE?
         BNZ   TLBA9450             NO, ERROR
         MODESET MODE=PROB,KEY=NZERO
         B     RETURN
***** FUNCTION CODE 3 - FREE NAMES TABLE STORAGE *****
TLBA1000 LABEL
         L     R2,4(R11)            GET NAMES TABLE ADDRESS
         MODESET MODE=SUP
         FREEMAIN RU,LV=NAMESTL,SP=251,A=(R2) FREE THE AREA
         MODESET MODE=PROB
         B     RETURN
***** ERROR ROUTINES *****
***** GENERALIZED ERROR REPORTING *****
TLBA9450 DS    0H
         STM   R14,R1,ERRREGS       SAVE ERROR REGISTERS
         MODESET MODE=PROB,KEY=NZERO GET BACK TO EARTH IF NOT ALREADY
         L     R2,PPLUPT
         L     R3,PPLECT
         PUTLINE PARM=PUTLINEL,UPT=(R2),ECT=(R3),ECB=ECB,              *
               OUTPUT=(MSG100,DATA),MF=(E,IOPL) DISPLAY ERROR LABEL
         CALL  CNVTHXEB,(ERRREGS,=F'4',MSG10114,=F'8',                 *
               ERRREGS+4,=F'4',MSG10115,=F'8',                         *
               ERRREGS+8,=F'4',MSG10100,=F'8',                         *
               ERRREGS+12,=F'4',MSG10101,=F'8'),                       *
               VL,MF=(E,CALLLIST)
         PUTLINE PARM=PUTLINEL,UPT=(R2),ECT=(R3),ECB=ECB,              *
               OUTPUT=(MSG101A,DATA),MF=(E,IOPL) DISPLAY ERROR REGS
         PUTLINE PARM=PUTLINEL,UPT=(R2),ECT=(R3),ECB=ECB,              *
               OUTPUT=(MSG101B,DATA),MF=(E,IOPL)
***** CLEAN UP AND GET OUT *****
TLBA9500 DS    0H
         L     R15,ERRREGS+4        LOAD RETURN CODE
         B     RETURN+2             RETURN
***** DATA AREA *****
         COPY  MSGTXT1L
PUTLINEL PUTLINE MF=L
IOPL     DC    4A(0)
CALLLIST CALL  ,(,,,,,,,,,,,,),MF=L
ERRREGS  DC    4A(0)                ERROR REGISTERS
ECB      DC    F'0'
***** DSECTS *****
         COPY  NAMEST               NAMES TABLE
         IKJPPL
         IHAPSA
         IHAASCB
         IKJTCB
         IHARB
         IHACDE
         CVT   DSECT=YES,LIST=NO
IQE      DSECT
         ORG   IQE+4
IQEPARAM DS    A
IQEIRB   DS    A
IQETCB   DS    A
         END


TLIBX

TLIBX    LINKAGE AMODE=31,RMODE=ANY,TYPE=RENT,LENGTH=WORKLEN
         LA    R11,4095(R12)
         LA    R11,1(R11)
         USING TLIBX+4096,R11       DECLARE SECOND BASE
         USING TLBXWORK,R13         DECLARE WORKAREA BASE
         ST    R12,BASEREG1         STORE MAINLINE BASE REGISTERS
         ST    R11,BASEREG2
         LR    R3,R1                SAVE IQEPARAM - DSNAME TU'S PTR
         USING NAMEST,R3            DECLARE BASE
         ST    R3,NAMESTRG
         LA    R0,PATTERD1          TARGET ADDRESS
         LA    R1,PATTERL1          LENGTH
         LA    R14,PATTERC1         SOURCE ADDRESS
         LR    R15,R1               SAME LENGTH
         MVCL  R0,R14               PRIME THE WORKAREA
         LA    R1,EPA
         ST    R1,EPAADDR           PLUG THE EPA ADDRESS
***** INITIALIZE ESTAE ENVIRONMENT *****
TLBX0005 LABEL
         ESTAE TLBX9500,CT,PARAM=TLBXWORK,MF=(E,ESTAELST) SET UP ESTAE
         LTR   R15,R15              OK?
         BNZ   TLBX9250             NO
***** CHECK TYPE OF REQUEST COMING FROM TLIBA *****
TLBX0010 LABEL
         CLI   REQUEST,1            ADD SPECIFIED OR DEFAULTED?
         BE    TLBX0200             YES
         CLI   REQUEST,2            DELETE SPECIFIED?
         BE    TLBX0200             YES
         CLI   REQUEST,3            INQUIRE SPECIFIED?
         BE    TLBX2000             YES
         B     TLBX9250             NONE OF THE ABOVE, ERROR
***** PROCESS DSNAME SPECIFICATIONS *****
TLBX0200 LABEL
         LA    R4,DSNAMEST          POINT TO DSNAMES TU'S TABLE
         LA    R5,DDNAMEST          POINT TO DDNAMES TU'S TABLE
         MVC   0(4,R5),=X'00010000' PRIME  DYN. CONCAT. DDN. KEY/NO.
         LA    R6,4(R5)             ADVANCE TO TEXT UNITS AREA
         LA    R7,VOLSERST          POINT TO VOLSERS TU'S TABLE
         CLI   REQUEST,2            WAS THE REQUEST A DELETE?
         BE    TLBX0230             YES, SKIP THIS STUFF
TLBX0210 LABEL
         MVC   TLBXDDN+4(2),=XL2'8' SET/RESET RETURN DDNAME LENGTH
         MVC   TLBXDDN+6(8),BLANKS  BLANK/REBLANK THE VALUE
         ALLOC RENT='YES',DSNAM=(R4),VLSER=(R7),                       *
               STATS='SHR',RTDDN=TLBXDDN,RTORG=TLBXORG,UNIT='SYSALLDA'
         LTR   R15,R15              ALLOCATION OK?
         BZ    TLBX0220             YES
         STM   R14,R1,ERRREGS       STORE ERROR REGISTERS
         LA    R1,ALCRB             INITIALIZE DAIRFAIL PARAMETER LIST
         ST    R1,DFDAPLP
         ST    R15,WORK1
         LA    R1,WORK1
         ST    R1,DFRCP
         LA    R1,=A(0)
         ST    R1,DFJEFF02
         LA    R1,=X'4032'
         ST    R1,DFIDP
         LA    R1,DFBUFS
         ST    R1,DFBUFP
TLBX0215 DS    0H
         LOAD  EP=IKJEFF18          LOAD THE ROUTINE
         LR    R15,R0
         LA    R1,DFDAPLP
         BALR  R14,R15              GO TO IT
         LTR   R15,R15              OK?
         BNZ   TLBX9205             NO, FORGET IT, PROCESS ALLOC PROB
         L     R8,UPTADDR
         L     R9,ECTADDR
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(DFBUFL1,DATA),MF=(E,IOPL)
         CLC   =XL2'0',DFBUFL2      ANY SECOND LEVEL MESSAGE?
         BE    TLBX0217             NO
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(DFBUFL2,DATA),MF=(E,IOPL)
TLBX0217 DS    0H
         OI    FLAG1,SKIPGEN        SKIP GENERALIZED ERROR REPORTING
         B     TLBX9205             CARRY ON
TLBX0220 LABEL
         LH    R1,2(R5)             GET CONCAT NUMBER COUNTER
         LA    R1,1(R1)             INCREMENT
         STH   R1,2(R5)             STORE BACK
         MVC   0(2,R6),=AL2(8)      SET DDNAME TEXT UNIT LENGTH
         MVC   2(8,R6),TLBXDDN+6    MOVE DDNAME
         CLC   =X'0200',TLBXORG+6   DSORG=PO?
         BE    TLBX0225             YES, OK
         CLC   =X'0300',TLBXORG+6   DSORG=POU?
         BE    TLBX0225             YES, OK
         LH    R1,4(R4)             GET DSNAME LENGTH
         BCTR  R1,0                 DECREMENT FOR EXECUTE
         LA    R14,MSG005DS         TARGET FIELD - IN MESSAGE
         LA    R15,6(R4)            SOURCE FIELD - DSNAME IN ERROR
         EX    R1,EXMVC             MOVE DSNAME TO MESSAGE
         L     R8,UPTADDR
         L     R9,ECTADDR
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG005,DATA),MF=(E,IOPL)
         OI    FLAG1,SKIPGEN        SKIP GENERALIZED ERROR REPORTING
         B     TLBX9205             CARRY ON
TLBX0225 LABEL
         LA    R6,10(R6)            ADVANCE DDNAMES TABLE POINTER
         CLC   =X'0000',50(R4)      ANY MORE DSNAME TEXT UNITS?
         BE    TLBX0230             NO
         LA    R4,50(R4)            YES, NEXT DSNAME TEXT UNIT
         LA    R7,12(R7)            NEXT VOLSER TEXT UNIT
         B     TLBX0210             RECYCLE
***** PROCESS EXISTING TASKLIB DATASET ALLOCATIONS *****
TLBX0230 LABEL
         L     R7,PSATOLD-PSA       OUR TCB ADDRESS
         USING TCB,R7
         CLC   =CL4'TCB',TCBTCBID   MAKE SURE IT'S A TCB
         BNE   TLBX9250             IT'S NOT, ERROR
         ICM   R10,15,TCBJLB        ANY EXISTING TASKLIB?
         BZ    TLBX0300             NO
         ICM   R9,15,TCBTIO         GET TIOT POINTER
         AH    R9,DCBTIOT-IHADCB(R10) ADVANCE TO TIOT DD ENTRY
         USING TIOELNGH,R9
         LA    R2,EPA               POINT TO EPA
         USING ZB505,R2             DECLARE BASE
TLBX0250 LABEL
         MVC   SWVA,TIOEJFCB        MOVE SVA FOR JFCB
TLBX0252 LABEL
         SWAREQ FCODE=RL,EPA=EPAADDR,MF=(E,SWAREQL) GO FOR JFCB ADDRESS
         LTR   R15,R15              OK?
         BNZ   TLBX9200             NO, GO TO FURTHER ERROR HANDLING
TLBX0254 LABEL
         CLI   SWBLKID,X'1C'        IS IT REALLY A JFCB?
         BNE   TLBX9200             NO, GO TO FURTHER ERROR HANDLING
         L     R8,SWBLKPTR          GET JFCB POINTER
         USING INFMJFCB,R8          DECLARE BASE
         DROP  R2                   DROP EPA BASE
***** CHECK FOR DELETE REQUEST *****
         CLI   REQUEST,2            DELETE REQUEST?
         BNE   TLBX0275             NO, CARRY ON
         LA    R14,DSNAMEST         POINT TO DSNAMES TU'S TABLE
         LA    R15,VOLSERST         POINT TO VOLSERS TU'S TABLE
TLBX0260 LABEL
         CLC   =C'ALL.TASKLIBS ',6(R14) IS THIS A 'DELETE ALL' REQUEST?
         BE    TLBX0290             YES, TREAT AS MATCH, DON'T ALLOCATE
         CLC   =X'0000',0(R14)      END OF DSNAME TEXT UNITS?
         BE    TLBX0275             YES, NO MATCH, GO ALLOCATE
         CLC   =X'FFFF',0(R14)      TEXT UNIT ALREADY USED FOR DELETE?
         BE    TLBX0265             YES, NO MATCH, NEXT TEXT UNIT SET
         CLC   JFCBDSNM,6(R14)      MATCH WITH JFCB DSNAME VALUE?
         BNE   TLBX0265             NO, NEXT TEXT UNIT SET
         CLC   =X'0000',0(R15)      ANY VOLSER SPECIFIED?
         BE    TLBX0270             NO, TREAT AS MATCH, DON'T ALLOCATE
         CLC   JFCBVOLS(6),6(R15)   MATCH WITH JFCB VOLSER VALUE?
         BE    TLBX0270             YES, TREAT AS MATCH, DON'T ALLOCATE
TLBX0265 LABEL
         LA    R14,50(R14)          NEXT DSNAME TEXT UNIT
         LA    R15,12(R15)          NEXT VOLSER TEXT UNIT
         B     TLBX0260             RECYCLE
TLBX0270 LABEL
         MVC   0(2,R14),=X'FFFF'    SHOW TEXT UNIT USED FOR DELETE
         B     TLBX0290             SKIP ALLOCATION
TLBX0275 LABEL
         MVC   TLBXDSN+6(44),JFCBDSNM MOVE JFCB DSNAME
         MVC   TLBXVOL+6(06),JFCBVOLS MOVE JFCB VOLSER
         MVC   TLBXDDN+6(08),BLANKS  BLANK RETURN DDNAME
TLBX0280 LABEL
         MVC   TLBXDDN+4(2),=XL2'8' SET/RESET RETURN DDNAME LENGTH
         MVC   TLBXDDN+6(8),BLANKS  BLANK/REBLANK THE VALUE
         ALLOC RENT='YES',DSNAM=TLBXDSN,VLSER=TLBXVOL,STATS='SHR',     *
               RTDDN=TLBXDDN,UNIT='SYSALLDA'
         LTR   R15,R15              OK?
         BNZ   TLBX9200             NO, GO TO FURTHER ERROR HANDLING
         LH    R1,2(R5)             GET CONCAT NO COUNTER
         LA    R1,1(R1)             INCREMENT
         STH   R1,2(R5)             STORE BACK
         MVC   0(2,R6),=AL2(8)      SET DDNAME TEXT UNIT LENGTH
         MVC   2(8,R6),TLBXDDN+6    MOVE DDNAME
         LA    R6,10(R6)            ADVANCE CONCAT. TEXT UNITS POINTER
TLBX0290 LABEL
         LA    R1,0
         IC    R1,TIOELNGH          LENGTH OF THIS TIOT ENTRY
         ALR   R9,R1                ADVANCE TO NEXT TIOT ENTRY
         CLC   =F'0',0(R9)          END OF TIOT?
         BE    TLBX0300             YES
         CLC   TIOEDDNM,BLANKS      CONCATENATION ENTRY?
         BE    TLBX0250             YES, CONTINUE PROCESSING
         DROP  R8,R9                DROP JFCB AND TIOT BASES
TLBX0300 LABEL
         CLC   =H'2',2(R5)          AT LEAST TWO DDNAMES?
         BH    TLBX1000             NO, SKIP CONCATENATION REQUEST
TLBX0310 LABEL
         ALLOC RENT='YES',VERB='CC',DDNAM=(R5) REQUEST CONCATENATION
         LTR   R15,R15              OK?
         BNZ   TLBX9200             NO, GO TO FURTHER ERROR HANDLING
TLBX1000 LABEL
         GETMAIN RU,LV=TLIBLEN,LOC=BELOW,SP=230 GET TLIBAREA STORAGE
         LR    R10,R1               SAVE ADDRESS
         USING TLIBAREA,R10
         ST    R10,TLIBREG          STORE FOR ESTAE USE
         LR    R0,R10
         LA    R1,PATTERL2
         LA    R14,PATTERC2
         LR    R15,R1
         MVCL  R0,R14               MOVE PATTERC2 TO TLIBAREA
         LA    R0,TLIBDDNT
         LA    R1,DDNTL
         LA    R14,DDNAMEST
         LR    R15,R1
         MVCL  R0,R14               SAVE DDNAMES TABLE IN TLIBAREA
         MVC   TLIBTDA,TCBJLB       SAVE ANY PREVIOUS DCB ADDRESS
         LA    R9,0                 INIT ADDR FOR TMP SCENARIO
         CL    R7,TCBJSTCB          OUR TCB ADDR = JOBSTEP TCB ADDR?
         BE    TLBX1005             YES, PROCEED
         L     R9,TCBJSTCB          NO, GET JOBSTEP TCB ADDR
         L     R9,TCBJLB-TCB(R9)    AND INIT TO ITS TASKLIB ADDR
TLBX1005 LABEL
         CLC   =H'0',TLIBDDNT+2     ARE THERE ANY DDNAMES?
         BE    TLBX1011             NO, SKIP THE OPEN
         MVC   TLIBDCB+DCBDDNAM-IHADCB(8),TLIBDDNT+6 MOVE DDNAME
TLBX1010 LABEL
         OPEN  (TLIBDCB,(INPUT)),MF=(E,OPENLIST) OPEN THE DCB
         LA    R9,TLIBDCB           LOAD OPENED DCB ADDRESS
TLBX1011 LABEL
         LTR   R15,R15              OPEN OK?
         BNZ   TLBX9200             NO, GO TO FURTHER ERROR HANDLING
         CL    R7,TCBJSTCB          OUR TCB ADDR = JOBSTEP TCB ADDR?
*                                   IE ARE WE THE TMP?
         BE    TLBX1050             YES, HANDLE US + SUBORDINATE TCB'S
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         CLC   =CL4'TCB',TCBTCBID   DOUBLECHECK IF TCB
         BNE   TLBX9200             IT'S NOT, ERROR
         ST    R9,TCBJLB            STORE DCB ADDRESS OR 0
         MODESET KEYREG=(R2)
         B     TLBX1500             GO TO CLEANUP
TLBX1050 LABEL
         LR    R1,R7                OUR TCB ADDRESS
         L     R1,TCBOTC-TCB(R1)    BACK UP BY ONE
TLBX1160 LABEL
         BAL   R14,TLBX3000         GO FIND A TCB
         LTR   R15,R15              DID WE?
         BNZ   TLBX1500             NO, GO TO CLEANUP
         CLC   TLIBTDA,TCBJLB-TCB(R1) THIS TCB'S DCB PTR SAME AS SAVED?
         BNE   TLBX1160             NO, GO LOOK FOR NEXT TCB
         LR    R14,R1               SAVE RETURNED TCB ADDRESS
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         CLC   =CL4'TCB',TCBTCBID-TCB(R14) DOUBLECHECK IF TCB
         BNE   TLBX9200             IT'S NOT, ERROR
         ST    R9,TCBJLB-TCB(R14)   PLUG DCB ADDRESS OR 0
         MODESET KEYREG=(R2)
         LR    R1,R14               PREPARE TO FIND NEXT TCB
         B     TLBX1160             RECYCLE
***** CLEAN UP ALL POSSIBLE TLIB ENVIRONMENTS *****
TLBX1500 LABEL
         L     R7,PSATOLD-PSA       OUR TCB ADDRESS
         USING TCB,R7
         CLC   =CL4'TCB',TCBTCBID   MAKE SURE IT'S A TCB
         BNE   TLBX9250             IT'S NOT, ERROR
         LTR   R9,R9                OPEN DCB IN CURRENT TLIBAREA?
         BNZ   TLBX1530             YES, DON'T FREE THE AREA
         LR    R9,R10               LOAD CURRENT TLIBAREA ADDRESS
         L     R10,TLIBTDA          SAVE ANY FORMER TLIB/TASKLIB ADDR
         FREEMAIN RU,LV=TLIBLEN,A=(R9),SP=230 FREE CURRENT TLIBAREA
         LTR   R10,R10              ANY FORMER AREA?
         BNZ   TLBX1540             YES, GO CHECK IT
         B     TLBX9300             NO, WE'RE ALMOST DONE
TLBX1530 LABEL
         ICM   R10,15,TLIBTDA       FORMER TASKLIB DCB OR TLIB AREA ADR
         BZ    TLBX9300             WAS NONE, WE'RE ALMOST DONE
TLBX1540 LABEL
         CLC   ID,TLIBID            WAS IT OUR AREA?
TLBX1556 LABEL
         BNE   TLBX9300             NO, ORIGINAL TASKLIB ENVIRONMENT
         LA    R1,0
         ICM   R1,B'0111',DCBDEBA-IHADCB(R10) GET DEB ADDRESS
         CLC   PSATOLD-PSA+1(3),DEBTCBB-DEBBASIC(R1) WAS OUR AREA
*                                   CREATED UNDER THIS TCB?
         BNE   TLBX9300             NO, TREAT AS ORIGINAL IE DO NOT
*                                   ATTEMPT TO CLEAN UP
* THE FOREGOING WILL BE TRUE, FOR EXAMPLE, FOR AN ISPF TCB WHEN
* TLIB IS EXECUTED UNDER THE TMP BEFORE INVOKING ISPF.  THE TLIB
* AREA ADDRESS IS THEN PROPAGATED TO THE TCBJLB FIELD OF THAT
* TCB.  IF TLIB IS SUBSEQUENTLY EXECUTED IN THE ISPF
* ENVIRONMENT, AN ATTEMPT TO FREE THE AREA WHOSE ADDRESS IS
* IN TCBJLB WILL FAIL; HENCE THE ABOVE CHECK.
         CLOSE ((R10)),MF=(E,CLOSLIST) CLOSE THE TLIB DCB
         LTR   R15,R15              CLOSE OK?
         BNZ   TLBX9250             NO, ERROR
TLBX1575 LABEL
         MVC   TLBXDDN(2),=XL2'01'  SET TO UNALLOCATE
         LA    R2,TLIBDDNT+4        POINT TO DDNAMES TU'S IN TLIBAREA
         LH    R4,TLIBDDNT+2        LOAD NUMBER OF CONCAT DDNAMES
TLBX1590 LABEL
         MVC   TLBXDDN+6(8),2(R2)   MOVE DDNAME
         ALLOC RENT='YES',VERB='UN',DDNAM=TLBXDDN,UNALC='YES'
         LTR   R15,R15              UNALLOCATION OK?
         BNZ   TLBX9250             NO, GO TO ERROR ROUTINE
         LA    R2,10(R2)            NEXT TU SET
         BCT   R4,TLBX1590          RECYCLE UNTIL DONE
         FREEMAIN RU,LV=TLIBLEN,A=(R10),SP=230 FREE TLIBAREA
         B     TLBX9300
***** 'INQUIRE' PROCESSING *****
TLBX2000 LABEL
         NI    FLAG1,255-TLEFOUND   ZERO TASKLIB-ENVIRONMENT FOUND BIT
         L     R1,PSAAOLD-PSA       GET ASCB ADDRESS
         L     R1,ASCBRCTP-ASCB(R1) AND RCT TCB ADDRESS TO START
TLBX2010 LABEL
         BAL   R14,TLBX3000         GO FIND A TCB
         LTR   R15,R15              DID WE?
         BNZ   TLBX2900             NO, DONE
         LR    R7,R1                SAVE RETURNED TCB ADDRESS
         USING TCB,R7
         CLC   =CL4'TCB',TCBTCBID   MAKE SURE IT'S A TCB
         BNE   TLBX9250             IT'S NOT, ERROR
         L     R4,UPTADDR           PRIME REGISTER ADDRESSES
         L     R5,ECTADDR
         ICM   R10,15,TCBJLB        JOBLIB (TASKLIB) DCB ADDRESS
         BZ    TLBX2350             NOTHING THERE, NEXT TCB
         LA    R1,UNIQUEDA          POINT TO TABLE OF UNIQUE DCB ADDR'S
         LA    R2,UNIQUEET          POINT TO END OF TABLE
TLBX2020 LABEL
         CLC   =A(0),0(R1)          EMPTY ENTRY (END OF ACTIVE ONES)?
         BE    TLBX2030             YES, MATCHING ENTRY NOT FOUND
         CL    R10,0(R1)            MATCHING ENTRY?
         BE    TLBX2350             YES, PROCEED TO NEXT TCB
         LA    R1,4(R1)             NEXT TABLE ENTRY
         CLR   R1,R2                END OF TABLE? (SHOULDN'T HAPPEN)
         BL    TLBX2020             NOT YET, RECYCLE
         B     TLBX2040             YES, JUST REPORT ON IT
TLBX2030 LABEL
         ST    R10,0(R1)            STORE NEW UNIQUE ENTRY
TLBX2040 LABEL
         OI    FLAG1,TLEFOUND       INDICATE TASKLIB ENVIRONMENT FOUND
         TM    FLAG1,MSG003I        WAS PRIMARY HEADING MESSAGE ISSUED?
         BO    TLBX2050             YES, SKIP
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(MSG003,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(BLANKLNE,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(SEPLNE,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(BLANKLNE,DATA),MF=(E,IOPL)
         OI    FLAG1,MSG003I        SHOW PRIMARY HEADING MESSAGE ISSUED
TLBX2050 LABEL
         ST    R7,WORK1             STORE TCB ADDRESS
         CALL  CNVTHXEB,(WORK1,=F'4',MSG003TC,=F'8'),VL,MF=(E,CALLLIST)
         MVC   MSG003PR,PROGNAME    MOVE PROGRAM NAME
         MVC   MSG003CT(CTMSGL),BLANKS BLANK CURRENT TASK MESSAGE
         CL    R7,PSATOLD-PSA       IS THIS THE CURRENT TASK TCB?
         BNE   TLBX2060             NO, SKIP MOVING MESSAGE
         MVC   MSG003CT(CTMSGL),CTMSG YES, MOVE IT
TLBX2060 LABEL
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(MSG003D,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(BLANKLNE,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(MSG003A,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(MSG003B,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(BLANKLNE,DATA),MF=(E,IOPL)
         ICM   R9,15,TCBTIO         GET TIOT POINTER
         AH    R9,DCBTIOT-IHADCB(R10) ADVANCE TO TIOT DD ENTRY
         USING TIOELNGH,R9          DECLARE BASE
         LA    R2,EPA               POINT TO EPA
         USING ZB505,R2             DECLARE BASE
TLBX2250 LABEL
         MVC   MSG003DD,TIOEDDNM    MOVE TIOT DDNAME TO MESSAGE
         MVC   SWVA,TIOEJFCB        MOVE SVA FOR JFCB
TLBX2252 LABEL
         SWAREQ FCODE=RL,EPA=EPAADDR,MF=(E,SWAREQL) GO FOR JFCB ADDRESS
         LTR   R15,R15              OK?
         BNZ   TLBX9250             NO, GO TO ERROR ROUTINE
TLBX2254 LABEL
         CLI   SWBLKID,X'1C'        IS IT REALLY A JFCB?
         BNE   TLBX9250             NO, GO TO ERROR ROUTINE
         L     R8,SWBLKPTR          GET JFCB POINTER
         USING INFMJFCB,R8          DECLARE BASE
         DROP  R2                   DROP EPA BASE
         MVC   MSG003DS,JFCBDSNM    MOVE JFCB DSNAME
         MVC   MSG003VS,JFCBVOLS    MOVE JFCB VOLSER
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(MSG003C,DATA),MF=(E,IOPL)
         LA    R1,0
         IC    R1,TIOELNGH          LENGTH OF THIS TIOT ENTRY
         ALR   R9,R1                ADVANCE TO NEXT TIOT ENTRY
         CLC   =F'0',0(R9)          END OF TIOT?
         BE    TLBX2300             YES
         CLC   TIOEDDNM,BLANKS      CONCATENATION ENTRY?
         BE    TLBX2250             YES, CONTINUE PROCESSING
         DROP  R8,R9                DROP JFCB AND TIOT BASES
TLBX2300 LABEL
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(BLANKLNE,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(SEPLNE,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(BLANKLNE,DATA),MF=(E,IOPL)
TLBX2350 LABEL
         LR    R1,R7                LOAD TCB ADDRESS
         B     TLBX2010             PROCESS NEXT TCB
***** CHECK IF ANY TASKLIB ENVIRONMENT FOUND *****
TLBX2900 LABEL
         TM    FLAG1,TLEFOUND       WAS THERE?
         BO    TLBX9300             YES, SKIP 'NOT FOUND' MESSAGE
         PUTLINE PARM=PUTLINEL,UPT=(R4),ECT=(R5),ECB=ECB,              *
               OUTPUT=(MSG002,DATA),MF=(E,IOPL)
         B     TLBX9300             GO TO CLEANUP
***** TCB LOCATOR SUBROUTINE *****
TLBX3000 LABEL
         STM   R7,R14,REGSAVE       SAVE WORKING REGISTERS
         MVC   PROGNAME,BLANKS      BLANK PRB PROGRAM NAME AREA
TLBX3010 LABEL
         L     R8,PSAAOLD-PSA       OUR ASCB ADDRESS
         L     R8,ASCBRCTP-ASCB(R8) OUR RCT TCB ADDRESS
         LR    R10,R1               STARTING TCB ADDRESS
         LA    R11,TLBX3130         RETURN ADDRESS FOR NO MORE TCB'S
***** THE TCB TREE SCAN ROUTINE (CVTRSCN) USES REGISTERS 7-11 *****
TLBX3050 LABEL
         L     R15,CVTPTR
         L     R15,CVTRSCN-CVT(R15) TCB SCAN ADDRESS
         BALR  R14,R15              GO TO IT
         LR    R1,R10               SAVE RETURNED TCB ADDRESS
         LM    R7,R14,REGSAVE       RESTORE REGISTERS
         L     R15,PSAAOLD-PSA      ASCB ADDRESS
         CL    R1,ASCBRCTP-ASCB(R15) IS IT THE RCT TCB?
         BE    TLBX3010             YES, NEXT TCB
         CLC   TCBOTC-TCB(4,R1),ASCBRCTP-ASCB(R15) OR ATTACHED BY RCT?
         BE    TLBX3010             YES, NEXT TCB
         TM    TCBFLGS1-TCB(R1),TCBFA+TCBFE IS TASK TERMINATING?
         BNZ   TLBX3010             YES, NEXT TCB
         TM    TCBFLGS5-TCB(R1),TCBFC IS TASK TERMINATED?
         BNZ   TLBX3010             YES, NEXT TCB
         ICM   R15,15,TCBRBP-TCB(R1) GET RB ADDRESS
         BZ    TLBX3010             NEXT TCB IF ZERO
         B     TLBX3060
TLBX3060 LABEL
         CLI   RBSTAB1-RBBASIC(R15),0 PRB?
         BE    TLBX3100             YES
TLBX3070 LABEL
         N     R15,=A(X'00FFFFFF')  CLEAR RB ADDRESS HIGH BYTE
         ICM   R15,7,RBLINKB-RBBASIC(R15) GET PREVIOUS RB ADDRESS
         BZ    TLBX3010             NEXT TCB IF ZERO
         B     TLBX3060             CHECK RB TYPE
TLBX3100 LABEL
         LA    R14,0                CLEAR R14
         ICM   R14,7,RBCDE1-RBBASIC(R15) GET CDE ADDRESS
         BZ    TLBX3070             ZERO, GO TO NEXT RB
         MVC   PROGNAME,CDNAME-CDENTRY(R14) MOVE PROGRAM NAME OUT
TLBX3125 LABEL
         LA    R15,0                SET 'FOUND' RETURN CODE
         B     TLBX3150
TLBX3130 LABEL
         LA    R15,4                SET 'NOT FOUND' RETURN CODE
TLBX3150 LABEL
         LM    R7,R14,REGSAVE       RELOAD REGISTERS
         BR    R14                  RETURN
***** ERROR ROUTINES *****
***** ATTEMPT TO BACK OUT ANY ALLOCATIONS PERFORMED *****
TLBX9200 DS    0H
         STM   R14,R1,ERRREGS       SAVE REGISTERS FROM ORIGINAL ERROR
TLBX9205 DS    0H
         MVC   TLBXDDN(2),=XL2'01'  SET TO UNALLOC CONCAT DDNAMES
         LA    R2,DDNAMEST+4        POINT TO DDNAMES TU'S
         LH    R4,DDNAMEST+2        LOAD NUMBER OF CONCAT DDNAMES
         LTR   R4,R4                ANY THERE?
         BZ    TLBX9220             NO
TLBX9210 DS    0H
         MVC   TLBXDDN+6(8),2(R2)   MOVE DDNAME
         ALLOC RENT='YES',VERB='UN',DDNAM=TLBXDDN,UNALC='YES'
         LTR   R15,R15              UNALLOCATION OK?
         BNZ   TLBX9220             NO, JUST FORGET IT
         LA    R2,10(R2)            NEXT TU SET
         BCT   R4,TLBX9210          RECYCLE UNTIL DONE
TLBX9220 DS    0H
         TM    FLAG1,SKIPGEN        SKIP GENERALIZED ERROR REPORTING?
         BO    TLBX9300             YES
         B     TLBX9260
***** GENERALIZED ERROR REPORTING *****
TLBX9250 DS    0H
         STM   R14,R1,ERRREGS       SAVE ERROR REGISTERS
TLBX9260 DS    0H
         MODESET EXTKEY=TCB,WORKREG=15 BACK TO EARTH IF NOT ALREADY
         L     R8,UPTADDR
         L     R9,ECTADDR
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG100,DATA),MF=(E,IOPL)
         CALL  CNVTHXEB,(ERRREGS,=F'4',MSG10114,=F'8',                 *
               ERRREGS+4,=F'4',MSG10115,=F'8',                         *
               ERRREGS+8,=F'4',MSG10100,=F'8',                         *
               ERRREGS+12,=F'4',MSG10101,=F'8'),                       *
               VL,MF=(E,CALLLIST)
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG101A,DATA),MF=(E,IOPL)
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG101B,DATA),MF=(E,IOPL)
***** CLEANUP AND TERMINATION *****
TLBX9300 DS    0H
         FREEMAIN RU,LV=NAMESTL,SP=251,A=(R3) FREE NAMES TABLE AREA
         L     R15,ERRREGS+4        LOAD RETURN CODE
         B     RETURN+2             RETURN
         DROP  ,                    DROP ALL BASES
***** ESTAE EXIT *****
TLBX9500 DS    0H
         USING TLBX9500,R15         TEMPORARY ADDRESSABILITY
         CH    R0,=AL2(12)          SDWA PASSED?
         BE    TLBX9800             NO
***** ESTAE EXIT PROCESSING WHEN SDWA IS PASSED *****
         DROP  R15                  DROP TEMPORARY ADDRESSABILITY
         STM   R14,R12,12(R13)      SAVE REGISTERS
         LR    R7,R1                LOAD SDWA ADDRESS
         USING SDWA,R7              DECLARE BASE
         LR    R3,R13               SAVE R13 (PASSED SAVEAREA ADDRESS)
         L     R13,SDWAPARM         GET PARM (ADDRESS OF 'TLBXWORK')
         USING TLBXWORK,R13         DECLARE BASE
         L     R12,BASEREG1         LOAD MAINLINE BASE REGISTER
         USING TLIBX,R12            DECLARE BASE
         L     R11,BASEREG2         LOAD MAINLINE BASE REGISTER
         USING TLIBX+4096,R11       DECLARE BASE
         L     R10,NAMESTRG         LOAD NAMES TABLE BASE REGISTER
         USING NAMEST,R10           DECLARE BASE
         LH    R1,ABENDRCT          LOAD ABEND RECURRENCE COUNT
         LA    R1,1(R1)             INCREMENT
         STH   R1,ABENDRCT          STORE BACK
         CH    R1,ABENDLIM          ABEND RECURRENCE COUNT EXCEEDED?
         BNH   TLBX9510             NO
         L     R8,UPTADDR           YES, ISSUE MESSAGE
         L     R9,ECTADDR
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG110,DATA),MF=(E,IOPL)
         B     TLBX9560
TLBX9510 DS    0H
         LA    R2,TLBX9300          SET RETRY ADDRESS
         CLC   =C'TLBX1540',LABEL   ERROR AT TEST FOR OUR AREA?
         BE    TLBX9700             YES, JUST HANDLE WITHOUT MESSAGES
         MVC   LABEL1,LABEL         MOVE LABEL NAME
         L     R8,UPTADDR
         L     R9,ECTADDR
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG102,DATA),MF=(E,IOPL)
         LA    R2,TLBX1575          SET RETRY ADDRESS
         CLC   =C'TLBX1010',LABEL   ERROR AT DCB OPEN?
         BE    TLBX9580             YES
         LA    R2,TLBX0010          SET RETRY ADDRESS
         CLC   LABEL,=C'TLBX0010'   BELOW LABEL 'TLBX0010'?
         BL    TLBX9560             YES, CONTINUE TERMINATION
         CLC   LABEL,=C'TLBX4000'   ABOVE LABEL 'TLBX4000'?
         BH    TLBX9560             YES, CONTINUE TERMINATION
         B     TLBX9590             NO, ATTEMPT RETRY
***** PROCEED WITH ABEND *****
TLBX9560 DS    0H
         ESTAE 0,MF=(E,ESTAELST)    CANCEL ESTAE
         LR    R13,R3               RESTORE SAVED R13
         SETRP WKAREA=(R7),REGS=(14,12) CONTINUE TERMINATION
***** DCB OPEN ERROR *****
TLBX9580 DS    0H                   DCB OPEN ERROR
         L     R8,UPTADDR
         L     R9,ECTADDR
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG004,DATA),MF=(E,IOPL)
         MVC   ERRREGS+4(4),=F'8'   SET RETURN CODE
         B     TLBX9700             SKIP RETRY MESSAGE
***** ISSUE RETRY MESSAGE *****
TLBX9590 DS    0H
         L     R8,UPTADDR           ISSUE RETRY MESSAGE
         L     R9,ECTADDR
         PUTLINE PARM=PUTLINEL,UPT=(R8),ECT=(R9),ECB=ECB,              *
               OUTPUT=(MSG103,DATA),MF=(E,IOPL)
***** ATTEMPT RETRY *****
TLBX9700 DS    0H
         XC    INFLDS(INFLDSL),INFLDS ZERO FIELDS SENSITIVE TO RETRY
         LR    R13,R3               RESTORE SAVED R13
         SETRP WKAREA=(R7),REGS=(14,12),RC=4,RETADDR=(2),RETREGS=YES,  *
               DUMP=NO
***** ESTAE EXIT PROCESSING WHEN NO SDWA IS PASSED *****
TLBX9800 DS    0H
         LR    R12,R15
         USING TLBX9500,R12
         WTO   'TLIB888  ESTAE EXIT ENTERED BUT NO SDWA PASSED - ABEND *
               PROCEEDING'
         LA    R15,0                CONTINUE TERMINATION
         BR    R14                  RETURN
***** DATA AREA *****
BLANKLNE DC    0F'0',AL2(L'BLANKS+4),AL2(0)
BLANKS   DC    CL40' '
SEPLNE   DC    0F'0',AL2(SEPLNEL),AL2(0)
         DC    (MSG003BL-4)C'*'
SEPLNEL  EQU   *-SEPLNE
EXMVC    MVC   0(0,R14),0(R15)
ABENDLIM DC    H'5'                 ABEND RECURRENCE LIMIT
PATTERC1 DS    0D
         DC    XL2'02',AL2(1),AL2(44),CL44' '
         DC    XL2'55',AL2(1),AL2(08),CL08' '
         DC    XL2'57',AL2(1),AL2(02),XL02'0'
         DC    XL2'10',AL2(1),AL2(06),CL06' '
         COPY  MSGTXT1U             MESSAGE TEXTS
         OPEN  (,),MF=L
         CLOSE (,),MF=L
         ESTAE MF=L
PATTERC2 DS    0D
DCB      DCB   DEVD=DA,DSORG=PO,MACRF=R TLIBDCB
ID       DC    C'TLIB FACILITY STORAGE' TLIBID
IDA      DC    A(0)                 TLIBTDA
***** DSECTS *****
TLBXWORK DSECT
         DS    18F                  REGISTER SAVE AREA
INFLDS   EQU   *                    FIELDS TO REINIT ON ESTAE RETRY
FLAG1    DS    F                    FLAG BYTE
TLEFOUND EQU   X'80'                TASKLIB ENVIRONMENT FOUND
MSG003I  EQU   X'40'                MSG003 PRIMARY HEADING MSG ISSUED
SKIPGEN  EQU   X'20'                SKIP GENERALIZED ERROR REPORTING
TCBJLBP  DS    A                    PREVIOUS TCBJLB VALUE
WORK1    DS    D                    WORK DOUBLEWORD
INFLDSL  EQU   *-INFLDS
ABENDRCT DS    H                    ABEND RECURRENCE COUNT
BASEREG1 DS    A                    MAINLINE BASE REGISTERS FOR ESTAE
BASEREG2 DS    A
TLIBREG  DS    A                    TLIBAREA BASE REGISTER FOR ESTAE
NAMESTRG DS    A                    NAMES TABLE BASE REGISTER FOR ESTAE
ERRREGS  DS    4A                   R14, R15, R0, R1
IOPL     DS    4A
ECB      DS    F
PROGNAME DS    CL8                  PRB CDE PROGRAM NAME
CALLLIST CALL  ,(,,,,,,,,,,,,,,,,,,,,,,,,),MF=L
PUTLINEL PUTLINE MF=L
SWAREQL  SWAREQ MF=L
EPA      DS    0F,XL16
EPAADDR  DS    A                    EPA ADDRESS
PATTERD1 DS    0D
TLBXDSN  DC    XL2'02',AL2(1),AL2(44),CL44' '
TLBXDDN  DC    XL2'55',AL2(1),AL2(08),CL08' '
TLBXORG  DC    XL2'57',AL2(1),AL2(02),XL02'0'
TLBXVOL  DC    XL2'10',AL2(1),AL2(06),CL06' '
         COPY  MSGTXT1L             MESSAGE TEXTS
OPENLIST OPEN  (,),MF=L
CLOSLIST CLOSE (,),MF=L
ESTAELST ESTAE MF=L
PATTERL1 EQU   *-PATTERD1
REGSAVE  DS    16F                  INTERNAL REGISTER SAVE AREA
         IKJEFFDF
         ALLOCPL
UNIQUEDA DS    50A                  UP TO 50 UNIQUE TASKLIB DCB ADDRS
UNIQUEET EQU   *                    END OF TABLE
WORKLEN  EQU   *-TLBXWORK           LENGTH OF AREA
TLIBAREA DSECT
TLIBDCB  DCB   DEVD=DA,DSORG=PO,MACRF=R TASKLIB DCB
TLIBID   DC    C'TLIB FACILITY STORAGE' ID
TLIBTDA  DC    A(0)                 TASKLIB DCB ADDRESS
PATTERL2 EQU   *-TLIBAREA
TLIBDDNT DS    (DDNTL)X             DDNAMES TABLE SAVED IN TLIBAREA
TLIBLEN  EQU   *-TLIBAREA           LENGTH OF AREA
         COPY  NAMEST               COPY NAMES TABLE
         PRINT NOGEN
         DCBD  DEVD=DA,DSORG=PO
         IEZDEB
         IHAPSA
         IHAASCB
         IKJTCB
         DSECT
         IEFJFCBN
         DSECT
         IEFTIOT1
         IEFZB4D0
         IEFZB4D2
         IHASDWA
         CVT   DSECT=YES,LIST=NO
         IEFJESCT MNTBL=YES
         IEFZB505
         IHARB
         IHACDE
         END


TRL

         MACRO
&NAME    TRL   &ADDR,&LENGTH,&TRADDR
&NAME    LR    R14,&ADDR                 LOAD STARTING ADDRESS
         LH    R15,=H'256'               ASSUME MAXIMUM LENGTH
         BCTR  R15,0                     DECREMENT FOR EXECUTE
         LR    R0,&LENGTH                LOAD ACTUAL LENGTH
TR0&SYSNDX DS 0H
         CH    R0,=H'256'                > 256?
         BNH   TR1&SYSNDX                NO
         EX    R15,TR2&SYSNDX            TRANSLATE AND TEST
         LA    R14,256(R14)              INCREMENT STARTING ADDRESS
         SH    R0,=H'256'                DECREMENT REMAINING LENGTH
         B     TR0&SYSNDX                ITERATE
TR1&SYSNDX DS 0H
         LR    R15,R0                    LOAD REMAINING LENGTH
         BCTR  R15,0                     DECREMENT FOR EXECUTE
         EX    R15,TR2&SYSNDX            TRANSLATE
         B     TR3&SYSNDX                BRANCH AROUND EXECUTED TR
TR2&SYSNDX TR  0(0,R14),0(&TRADDR)       TRANSLATE
TR3&SYSNDX DS 0H
         MEND


                 c Xephon 1996

