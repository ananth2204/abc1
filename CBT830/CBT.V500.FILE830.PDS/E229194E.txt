VLF/LLA performance and functionality

I have been investigating the possibility of exploiting the
Virtual Lookaside Facility (VLF) and Library Lookaside (LLA)
components at our installation. The VLF/LLA function was
previously performed using the products PMO and QUICK-
FETCH from Legent. After running benchmarks I found that
the PMO/QUICK-FETCH combination had these advantages
over VLF/LLA:

1      LLA libraries had to be frozen to get acceptable
      performance out of them. This meant that any updates to
      the libraries had to be accompanied with an LLA update
      and the creation of a new member in SYS1.PARMLIB.

2      Even with frozen libraries, VLF/LLA performance still did
      not match PMO/QUICK-FETCH.

I found that the performance problem could be overcome by
coding the staging exit, CSVLLIX2, to force staging for every
reference to a VLF module. This created a new problem in that
the storage usage for VLF and LLA increased dramatically.
This can be controlled by the MAXVIRT parameter in the
CSVLLAxx member. By reducing the size of this parameter,
you can reduce the size of the VLF dataspace and consequently
control storage usage. Do not set this value too low - this will
cause thrashing in the dataspace, which affects performance.

Dealing with frozen libraries was a much more difficult
problem to solve. Updates to frozen libraries update the disk
version only, not the VLF dataspace. To update the dataspace,
a new CSVLLAxx member must be created (to explain to VLF
what your intentions are) and a modify command issued.
Consider the following: a module is linked to a frozen
library.The disk is now updated but the VLF dataspace still
reflects the old version. If a further link then included this
module, you would now be including the wrong version
as the copy in VLF would be used. To bypass this problem I
wrote code to intercept the STOW SVC - SVC 21 (X'15').
The intercept allows the STOW to process normally; however,
when STOW returns control, it returns to us, and I
synchronously issue an LLACOPY macro to update the VLF
dataspace dynamically. Installing and removing the intercept is
totally dynamic and is accomplished with a started task I call
VLF2.

I wrote this on MVS/ESA Version 4.2. I do not have any prior
releases of MVS/ESA to test this on; however, it should work
on all versions of MVS/ESA.

As a bonus, I create a user area (DSECT) pointed to by the
CVT. The DSECT is formed as part of VLF2 and is pointed to
by an entry in the subsystem name table. This creates a
convenient data area that can be easily referenced. CVTUSER
could have been used for this but I found it to be too
unreliable, as anyone could overwrite the pointer. It is resident
in CSA subpool 228.


CSVLLIX2 SOURCE CODE

         TITLE 'CSVLLIX2 - LLA MODULE STAGING INSTALLATION EXIT'
CSVLLIX2 CSECT
* STANDARD ENTRY LINKAGE TO LLA STAGING INSTALLATION EXIT.            *
CSVLLIX2 AMODE 31
CSVLLIX2 RMODE ANY
         USING *,R15
         MODID
         STM   R14,R12,12(R13)         SAVE ENTRY REGISTERS.
         LR    R8,R15                  INITIALIZE CODE REGISTER.
         DROP  R15                     DROP TEMPORARY ADDRESSABILITY.
         USING CSVLLIX2,R8             ESTABLISH R8 AS CODE REGISTER.
         USING LLP2,R1                 ADDRESSABILITY TO LLP2.
         LA    R15,#RCIX2_OVERRIDE     OVERRIDE LLA STAGING VALUE
         LA    R0,#RSIX2_MUSTSTAGE     AND FORCE STAGING.
* STANDARD EXIT LINKAGE.                                              *
EXIT     L     R14,12(,R13)            RESTORE THE RETURN ADDRESS.
         LM    R1,R12,24(R13)          RESTORE OTHERS EXCEPT R15 AND R0
         BR    R14                     RETURN TO THE CALLER.
         IHALLP2
         END


COFVLF EXAMPLE

CLASS NAME(VLFLIBS)
  EDSN(SYS1.LINKLIB)
  EDSN(LLA.USER.LINKLIB)
  MAXVIRT(001000)

MAXVIRT can be determined by calculating the amount of
bytes used in the libraries within a class. Divide this value by
4096 as the MAXVIRT parameter is the amount of 4K pages
that will be used in the VLF dataspace for this class. Reduce
this figure by 20% - I found this to be a good starting point to
work from. Monitor storage usage, especially expanded
storage, to see if you should increase or decrease this value.


CSVLLA EXAMPLE

LIBRARIES(SYS1.LINKLIB)
LIBRARIES(LLA.USER.LINKLIB)
FREEZE(SYS1.LINKLIB)
FREEZE(LLA.USER.LINKLIB)

Freeze all libraries for performance reasons.


IEFSSN EXAMPLE

JES2
USER
  etc

The 'USER' entry in the SSNT is the subsystem name that
VLF2 searches for to install the USERTAB address.


VLFSVC SOURCE CODE

VLFSVC   START
VLFSVC   CSECT
******************************************************************
*     LOAD MODULE NAME   : VLFSVC                                *
*     MODULE NAME        : VLFSVC                                *
*     CSECT NAME         : VLFSVC                                *
*     ENTRY POINT        : VLFSVC                                *
*     DESCRIPTIVE NAME   : VLF STOW SVC INTERCEPT                *
*     FUNCTION           : INTERCEPT THE STOW SVC ( 21 (X'15'))  *
*                          AND ON RETURN FROM THE SVC, ISSUE     *
*                          AN LLACOPY FOR THE MODULE.            *
*                          VLF/LLA MODULES ARE AUTOMATICALLY     *
*                          REFRESHED KEEPING THEM IN SYNC WITH   *
*                          THE VERSION ON DISK, WHILE NON-VLF    *
*                          MODULES ARE IGNORED.                  *
*     OPERATION          : THIS SVC INTERCEPT IS DYNAMICALLY     *
*                          INSTALLED, MODIFIED OR REMOVED USING  *
*                          STARTED TASK VLF2.                    *
*        DEPENDENCIES    : NONE                                  *
*        RESTRICTIONS    : MUST BE SAME AMODE AS IGC0002A (THIS  *
*                          IS CURRENTLY AMODE 24)                *
*                          MUST BE RE-ENTRANT AND REFRESHABLE    *
*                          MUST BE LPA RESIDENT                  *
*        REGISTER CONVENTIONS : NO CALLER REGISTERS ARE SAVED    *
*                          AND ONLY GPR15/0/1 ARE RESTORED ON    *
*                          RETURN FROM IGC0002A, THE REST ARE    *
*                          RESTORED FROM THE SVRB BY SUPERVISOR  *
*                          SERVICES.                             *
*          BASE REG      : 6                                     *
*          WORK AREA     : 9                                     *
*          PATCH LABEL   : NONE PROVIDED                         *
*        ATTRIBUTES      :                                       *
*          LOCATION      : LPA                                   *
*          KEY           : USER                                  *
*          STATE         : SUPERVISOR                            *
*          MODE          : TASK                                  *
*          AMODE         : 24                                    *
*          RMODE         : 24                                    *
*          TYPE          : REENTRANT                             *
*          SERIALIZATION : ENABLED/UNLOCKED                      *
*          ASC MODE      : PRIMARY                               *
*          X-MEMORY MODE : HASID=PASID=SASID                     *
*        CALLERS         : ANY                                   *
*        INPUT           : PDS MEMBER NAME AND DCB ADDRESS       *
******************************************************************
* DO NOT CHANGE ANY CODE FROM HERE .....
         BALR  R6,0                   LOAD LINK INFORMATION
         LA    R6,0(,R6)              LOAD ENTRY POINT
         USING VLFSVC+2,R6            ADDRESS MODULE ENTRY POINT
         B     RENTSAVE               B AROUND EYE CATCHER
         DC    C'VLFSVC'              LMOD NAME
         DC    C'VLFSVC'              CSECT NAME
         DC    C'       '             UMID
         DC    C'&SYSTIME'            ASSEMBLE TIME
         DC    C'&SYSDATE'            ASSEMBLE DATE
* ... TO HERE, AS THIS WILL AFFECT THE STATUS REQUEST FOR VLF2
* WHICH PERFORMS A VALIDITY CHECK ON THESE AREAS USING HARD-CODED
* OFFSETS !!
         DS    0H                     ALIGN ON HALFWORD
RENTSAVE EQU   *
******************************************************************
*   AT THIS STAGE, WE HAVE SUCCESSFULLY INTERCEPTED IGC0002A.    *
*   HOWEVER, WE NEED TO GET CONTROL AFTER THE STOW HAS           *
*   COMPLETED. WE ACCOMPLISH THIS BY BALR INTO SVC 21. THIS      *
*   WILL RETURN CONTROL TO OUR ROUTINE. UNFORTUNATELY, ALTHOUGH  *
*   WE HAVE CONTROL, WE WILL HAVE LOST ALL OUR REGISTER CONTENTS.*
*   TO RECTIFY THIS, WE ZAP THE ADDRESS OF OUR SAVE AREA INTO    *
*   AN UNUSED GPR IN THE SVRB FOR RESTORE LATER.                 *
******************************************************************
         LR    R8,R1                  GPR8 NOT NEEDED FOR SVC
         LR    R9,R0                  SAVE GPR0
         LR    R10,R14                SAVE RETURN ADDRESS
         LA    R0,WORKSIZE            LOAD WORK AREA SIZE
         STORAGE OBTAIN,LENGTH=(R0)   OBTAIN WORK STORAGE
         LR    R0,R9                  RELOAD PARM REG
         LR    R9,R1                  GPR9 NOT NEEDED BY SVC
         USING WORKRENT,R9            ESTABLISH WORK AREA @ABILITY
         LR    R1,R8                  RELOAD PARM REG
         LR    R14,R10                RELOAD RETURN ADDRESS
         STM   R14,R12,PROGSAVE       SAVE OUR REGS
         USING RBBASIC,R5             GET ADDRESSABILITY TO SVRB
         L     R8,RBGRS8              LOAD SVRB GPR8 VALUE
         ST    R8,SVRBRSV1            SAVE ADDRESS IN SAVE AREA
         ST    R9,RBGRS8              ZAP SAVE AREA ADDRESS INTO SVRB
         L     R8,RBGRS9              LOAD SVRB GPR9 VALUE
         ST    R8,SVRBRSV2            SAVE ADDRESS IN SAVE AREA
         L     R10,=X'E2E5D9C2'       LOAD EYECATCHER -> 'SVRB'
         ST    R10,RBGRS9             ZAP EYECATCHER INTO SVRB
         LA    R8,16                  LOAD CVT OFFSET
         L     R8,0(,R8)              LOAD CVT ADDRESS
         USING CVT,R8                 ADDRESS CVT
         L     R8,CVTJESCT            LOAD CVTJESCT @
         DROP  R8
         USING JESCT,R8               ADDRESS JESCT
         L     R8,JESSSCT             LOAD JESSSCT @
         DROP  R8
         USING SSCT,R8                ADDRESS SSCT
SCVTLOOP EQU   *
         CLC   SSCTSNAM,=CL4'USER'    IS THIS OUR SSCVT ENTRY ??
         BE    SCVTADDR               YES, PROCESS ENTRY
         L     R8,SSCTSCTA            POINT AT NEXT SSCVT
         B     SCVTLOOP               LOOP ROUND FOR NEXT
SCVTADDR EQU   *
         L     R8,SSCTSUS2            SSCTUS2 POINTS AT USERTAB
         DROP  R8                     DROP SSCTSUS2 AND ...
         USING USERTAB,R8             ADDRESS USERTAB
         L     R8,USVLFBR             LOAD ORIGINAL IGC0002A EP
         DROP  R5                     DROP SVRB DSECT
         DROP  R6                     DROP BASE GPR
         DROP  R8                     DROP DSECT GPR
* * WARNING * *    THERE IS NO ADDRESSABILITY FROM THIS POINT TO WHEN
* * WARNING * *    WE RETURN. BEWARE OF S0C4S IF ADDING CODE
         LR    R6,R8
*   STOW IS ABOUT TO TAKE OVER CONTROL. ANY LAST REQUESTS ??     *
         BALR  R14,R6                 BRANCH ENTER OLD SVC
******************************************************************
*   WELCOME BACK ....                                            *
*   NOW WE HAVE A COUPLE OF PROBLEMS. WE NEED OUR REGISTERS      *
*   BACK FOR THE MEMBER NAME AND THE DCB POINTER. OUR SAVE       *
*   AREA IS STORED IN THE SVRB. THE ADDRESS OF THE SVRB IS IN    *
*   EITHER R1 OR R13. IF R1 IS INVALID, WE COULD S0C4 ABEND.     *
*   BYPASS THIS BY ISSUING VSMLOC ON GPR1 CONTENTS. ONCE WE HAVE *
*   AN SVRB, CHECK OUR EYECATCHER TO VERIFY IT IS THE RIGHT ONE. *
*   NOW, LET'S GO STRUT OUR STUFF....                            *
******************************************************************
STOWRETN EQU   *
         BALR  R8,0                   WE NEED TEMP. ADDRESSABILITY
         USING *,R8                   USE R8 FOR THIS
         LR    R10,R15                SAVE R15/0/1 FOR BR 14
         LR    R11,R0                 SAVE R15/0/1 FOR BR 14
         LR    R12,R1                 SAVE R15/0/1 FOR BR 14
         LR    R2,R1                  SAVE R1 TO R2 JUST IN CASE
         LR    R4,R13                 BACK-UP R13
         STORAGE OBTAIN,LENGTH=72     OBTAIN WORK STORAGE FOR VSMLOC
         LR    R13,R1                 LOAD SAVE AREA ADDRESS TO R13
         VSMLOC LSQA,AREA=((R2),204)  DOES R1 CONTAIN SVRB POINTER ???
         LR    R9,R15                 SAVE RC TO 9
         STORAGE RELEASE,LENGTH=72,ADDR=(R13)   RELEASE WORK AREA
         LR    R13,R4                 RELOAD R13
         LTR   R9,R9                  IS R1 VALID -> RC=(00) ??
         BNZ   R13SVRB                NO, MUST BE R13
         LR    R1,R2                  RELOAD R1
         B     R1SVRB                 AND CARRY ON ...
R13SVRB  EQU   *
         LR    R1,R13                 LOAD R1 WITH SVRB ADDRESS
         B     R1SVRB
R1SVRB   EQU   *
         USING RBBASIC,R1             GET ADDRESSABILITY TO SVRB
         CLC   RBGRS9,=CL4'SVRB'      IS THIS OUR SVRB ??
         BE    OKSVRB                 YES CARRY ON
         ABEND 315                    IF WE HAVE THE WRONG SVRB, WE
*                                     HAVE A PROBLEM BECAUSE WE HAVE
*                                     NO WAY OF GETTING OUR RETURN
*                                     ADDRESS. ALL WE CAN DO IS ABEND.
OKSVRB   EQU   *
         L     R9,RBGRS8              LOAD BACK OUR SA ADDRESS
         DROP  R8                     DON'T NEED THIS BASE ANYMORE
         L     R8,SVRBRSV1            RELOAD OLD SVRB R8 VALUE
         ST    R8,RBGRS8              RESTORE SVRB TO ORIGINAL GLORY
         L     R8,SVRBRSV2            RELOAD OLD SVRB R9 VALUE
         ST    R8,RBGRS9              RESTORE SVRB TO ORIGINAL GLORY
         STM   R10,R12,IGCRSAVE       STORE R15/0/1 FOR RETURN
         DROP  R1
         LM    R14,R12,PROGSAVE       RESTORE OUR REGISTERS
         USING VLFSVC+2,R6            GAIN ADDRESSABILITY AGAIN
         USING RBBASIC,R5             GET ADDRESSABILITY TO SVRB AGAIN
         B     PROCESS
*   ALL BACK TO NORMAL AND NONE THE WORSE FOR WEAR. ALL GPRS     *
*   ARE RESTORED.                                                *
PROCESS  EQU   *
         L     R2,RBGRS1              LOAD DCB @ FROM SVRB
         CLI   RBGRS1,X'FF'           DELETE/RENAME ?
         BE    DELREN                 YES - LOAD COMPLEMENT
         B     DCBLDED                GET ADDRESSABILITY TO DCB
DELREN   EQU   *
         LCR   R2,R2                  LOAD COMPLEMENT OF DCB @
         B     DCBLDED                AND CARRY ON
DCBLDED  EQU   *
         USING IHADCB,R2
         TM    DCBDSRG1,DCBDSGPO      DSORG=PO ??
         BNO   EXIT                   NO - ??????? - JUST BYPASS
         L     R4,RBGRS0              RESTORE MEMBER POINTER FROM SVRB
         CLI   RBGRS0,X'FF'           DELETE/RENAME ?
         BE    RENCHECK               YES - CHECK IF RENAME ?
         B     RENOK
RENCHECK EQU   *
         LCR   R4,R4                  LOAD COMPLEMENT OF DCB @
         CLI   RBGRS1,X'FF'           RENAME ?
         BNE   RENOK                  BUILD NAME FOR DELETE
         MVC   MEMBER(8),8(R4)        BUILD P/L - MOVE IN RENAMED NAME
         B     RENOK8
RENOK    EQU   *
         MVC   MEMBER(8),0(R4)        BUILD P/L - MOVE IN MEM NAME
RENOK8   EQU   *
         MVC   BLDNUM(2),=H'1'        BUILD P/L - ONE MEMBER
         MVC   BLDLEN(2),=H'60'       BUILD P/L - P/L IS 60 BYTES LONG
         MVI   BLDLFIL,C' '           BUILD P/L - FILL P/L WITH BLANKS
         MVC   BLDLFIL+1(51),BLDLFIL  BUILD P/L - FILL P/L WITH BLANKS
         LA    R3,BLDLIST             LOAD R3 WITH BLDL PARM LIST
         MVC   LLAPL,LLACPL           LOAD LLACOPY P/L IN WA
         LLACOPY  DCB=(R2),BLDLLIST=(R3),MF=(E,LLAPL)   ISSUE MACRO
         B     EXIT
*   ALL DONE, LET'S CLEAN UP AND GET OUT OF HERE.                 *
EXIT     EQU   *
         LM    R2,R4,IGCRSAVE         PREPARE RETURN CODE
         LA    R8,WORKSIZE            LOAD WORK SIZE
         L     R10,PROGSAVE           RELOAD RETURN ADDRESS FROM SA
         STORAGE RELEASE,LENGTH=(R8),ADDR=(R9) RELEASE WORK AREA
         LR    R14,R10                RELOAD RETURN ADDRESS
         LR    R15,R2                 RELOAD RC
         LR    R0,R3                  RELOAD RC
         LR    R1,R4                  RELOAD RC
         BR    R14                    RETURN TO CALLER
         LTORG
LLACPL   LLACOPY MF=(L,LLACPE)           LIST FORM OF LLACOPY
LLACSIZE EQU   *-LLACPL
WORKRENT DSECT
PROGSAVE DS    15F
SVRBRSV1 DS    F
SVRBRSV2 DS    F
IGCRSAVE DS    3F
*              RE-ENTRANT USER STORAGE AREA                    *
LLAPL    DS    CL(LLACSIZE)            LLACOPY PARM LIST
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
BLDNUM   DS    H                       # ENTRIES
BLDLEN   DS    H                       LENGTH OF ENTRY
MEMBER   DS    CL8                     MEMBER NAME
BLDLFIL  DS    CL52
WORKSIZE EQU   *-WORKRENT
         IHARB
         CVT   DSECT=YES
         IEFJESCT
         IEFJSCVT
         DCBD  DSORG=PO
         USERTAB DSECT=YES
         END   VLFSVC

Note that VLFSVC works for all updates to a PDS that invoke
STOW - SVC X'15' - processing. If the directory of the PDS
is updated using a non-standard method, obviously LLA will
not be aware of the update and will still reference the version in
storage - IEBCOPY is guilty of this. We have made it a
standard at our site to copy frozen libraries using ISPF 3.3,
IEBGENER on individual members, or any other method that
uses standard PDS directory processing. If the processing is too
large to be accomplished using any of these methods (eg
compress), remove the library from LLA using the command:

      F LLA,UPDATE=xx

and add it afterwards.


VLF2 SOURCE CODE

VLF2     START
* HOUSE KEEPING
VLF2     CSECT
******************************************************************
*     LOAD MODULE NAME   : VLF2                                  *
*     MODULE NAME        : VLF2                                  *
*     CSECT NAME         : VLF2                                  *
*     ENTRY POINT        : VLF2                                  *
*     DESCRIPTIVE NAME   : VLF DYNAMIC STOW INTERCEPT FACILITY   *
*     FUNCTION           : CREATE A USER TABLE FOR GENERAL USE,  *
*                          INSTALL AN SVC INTERCEPT AND PROVIDE  *
*                          A METHOD OF MAINTAINING THE INTERCEPT.*
*     OPERATION          : VLF2 IS A STARTED TASK ACCEPTING PARMS*
*                          OF STARTUP-SHUTDOWN-RESTART-STATUS.   *
*                          THE FORMAT OF THE START COMMAND IS    *
*                          S VLF2,REQ=PARMS                      *
*        DEPENDENCIES    : NONE                                  *
*        RESTRICTIONS    : MUST BE RESIDENT IN AN APF LIBRARY    *
*                          AND MODULE LINKED AS AC=1.            *
*        REGISTER CONVENTIONS :                                  *
*          BASE REG      : 12                                    *
*          PATCH LABEL   : NONE PROVIDED                         *
*        ATTRIBUTES      :                                       *
*          LOCATION      : APF LIBRARY                           *
*          KEY           : 0                                     *
*          STATE         : SUPERVISOR                            *
*          MODE          : TASK                                  *
*          AMODE         : 31                                    *
*          RMODE         : ANY                                   *
*          TYPE          : RE-USABLE                             *
*          ASC MODE      : PRIMARY                               *
*          X-MEMORY MODE : HASID=PASID=SASID                     *
*        CALLERS         : ANY                                   *
*        INPUT           : PARMS SUPPLIED AT STARTUP             *
******************************************************************
         USING VLF2,R15               ADDRESS MODULE ENTRY POINT
         B     REGSAVE                B AROUND EYE CATCHER
         DC    C'VLF2'                LMOD NAME
         DC    C'VLF2'                CSECT NAME
         DC    C'       '             UMID
         DC    C'&SYSTIME'            ASSEMBLE TIME
         DC    C'&SYSDATE'            ASSEMBLE DATE
         DS    0H                     ALIGN ON HALFWORD
REGSAVE  EQU   *
         STM   R14,R12,12(R13)        SAVE CALLER'S REGS
         LR    R12,R15                LOAD BASE
         DROP  R15
         USING VLF2,R12               RE-ESTABLISH PROGRAM @ABILITY
         LA    R15,SAVEAREA           LOAD SAVE AREA ADDRESS
         ST    R13,4(,R15)            STORE LSA
         ST    R15,8(,R13)            STORE HSA
         LR    R13,R15                LOAD SA FOR NEXT CALLED
         B     START
START    EQU   *
         LR    R2,R1                  BACK-UP PARM REG
         MODESET KEY=ZERO,MODE=SUP    WATCH OUT SUPERMAN - HERE WE COME
         LR    R1,R2                  RESTORE PARM REG
         CLC   8(7,R1),=CL7'STARTUP'  FIRST TIME START UP ??
         BE    STARTUP                YES !
         CLC   8(8,R1),=CL8'SHUTDOWN' SHUT DOWN SVC INTERCEPT ??
         BE    SHUTDOWN               YES !
         CLC   8(7,R1),=CL7'RESTART'  RELOAD INTERCEPT WITH NEW @ ??
         BE    RESTART                YUP !
         CLC   8(6,R1),=CL6'STATUS'   STATUS REQUEST ?
         BE    STATUS                 YUP !
         WTO   'VLF2001E INVALID PARM - PARMS ARE : STARTUP*SHUTDOWN*REX
               START*STATUS'
         LA    R15,4                  INVALID PARM - SET RC AND EXIT
         B     EXIT
STARTUP  EQU   *
         MVI   FLSTART,C'1'           SET START FLAG
         B     LOCATE                 GO FIND SSCVT
RESTART  EQU   *
         WTO   'VLF2015I SVC INTERCEPT RESTART SPECIFIED'
         MVI   FLRSTART,C'1'          SET RESTART FLAG
         B     LOCATE                 GO FIND SSCVT
SHUTDOWN EQU   *
         MVI   FLSHUT,C'1'            SET SHUTDOWN FLAG
         B     LOCATE                 GO FIND SSCVT
STATUS   EQU   *
         MVI   FLSTAT,C'1'            SET STATUS FLAG
         B     LOCATE                 GO FIND SSCVT
LOCATE   EQU   *
         LA    R6,16                  LOAD CVT OFFSET
         L     R6,0(,R6)              LOAD CVT ADDRESS
         LR    R8,R6                  LOAD R8 FOR ADDRESSABILITY
         USING CVT,R8                 AND GET ADDRESSABILITY
         L     R6,CVTJESCT            LOAD CVTJESCT @
         USING JESCT,R6               AND ADDRESS IT
         L     R6,JESSSCT             LOAD JESSSCT @
         DROP  R6
         USING SSCT,R6                ADDRESS SCVT
SCVTLOOP EQU   *
         CLC   SSCTSNAM,=CL4'USER'    IS THIS OUR SSCVT ENTRY ??
         BE    SCVTADDR               YES, PROCESS ENTRY
         L     R6,SSCTSCTA            POINT AT NEXT SSCVT
         B     SCVTLOOP               LOOP ROUND FOR NEXT
SCVTADDR EQU   *
         CLI   FLRSTART,C'1'          TEST RESTART FLAG
         BE    RESCHECK               RE-INSTALL INTERCEPT
         CLI   FLSHUT,C'1'            TEST SHUTDOWN FLAG
         BE    STORRLSE               RELEASE STORAGE
         CLI   FLSTAT,C'1'            TEST STATUS FLAG
         BE    CHEKSTAT               GO CHECK STATUS
         B     NORMSTRT               NORMAL STARTUP
RESCHECK EQU   *
         L     R7,SSCTSUS2            LOAD R7 WITH SSCTSUS2 VALUE
         LTR   R7,R7                  IS IT ZERO ?
         BNZ   RESINIT                NO - START-UP COMPLETED
         WTO   'VLF2019I AUTOMATIC STARTUP IN PROGRESS'
         B     STARTRES               CARRY ON WITH START-UP
NORMSTRT EQU   *
         L     R7,SSCTSUS2            LOAD R7 WITH SSCTSUS2 VALUE
         LTR   R7,R7                  IS IT ZERO ?
         BNZ   VLF2ER01               NO - ISSUE ERROR MESSAGE AND GO
STARTRES EQU   *
         STORAGE OBTAIN,LENGTH=20,SP=228,LOC=BELOW
         LTR   R15,R15                CSA AVAILABLE  ??
         BNZ   VLF2ER02               NOPE
         ST    R1,SSCTSUS2            SAVE ADDRESS IN SSCVT
         LR    R3,R1                  LOAD TABLE ADDRESS
         USING USERTAB,R3             AND GET ADDRESSABILITY TO IT
         MVC   USERID,=CL4'UTAB'      MOVE EYECATCHER IN
         MVI   USVLFBR,X'00'          AND INITIALIZE THE REST OF ..
         MVC   USVLFBR+1(15),USVLFBR  .. THE DSECT
         L     R9,CVTABEND            LOAD ADDRESS OF SECONDARY CVT
         USING SCVTSECT,R9
         L     R9,SCVTSVCT            LOAD ADDRESS OF SVCTABLE
         DROP  R9
         L     R9,168(,R9)            LOAD EP OF SVC21
         ST    R9,USVLFBR             SAVE ADDRESS OF OLD SVC21
RESINIT  EQU   *
         ST    R13,RSAVE              SAVE GPR 13
         LA    R13,SVCSAVE            LOAD SAVE ADDR FOR SVCUPDTE
         SVCUPDTE 021,REPLACE,TYPE=3,EPNAME=VLFSVC
         L     R13,RSAVE              RESTORE GPR 13
         LTR   R15,R15                UPDATE OK ??
         BNZ   VLF2ER03               OOPS !
         WTO   'VLF2003I SVC INTERCEPT SUCCESSFULLY INSTALLED'
         B     EXIT00
STORRLSE EQU   *
         L     R7,SSCTSUS2            LOAD R7 WITH SSCTSUS2 VALUE
         LTR   R7,R7                  IS IT ZERO ?
         BZ    VLF2ER05               YES - HOOK ALREADY REMOVED
         ST    R13,RSAVE              SAVE GPR 13
         LA    R13,SVCSAVE            LOAD SAVE ADDR FOR SVCUPDTE
         SVCUPDTE 021,REPLACE,TYPE=3,EPNAME=IGC0002A
         L     R13,RSAVE              RESTORE GPR 13
         LTR   R15,R15                UPDATE OK ??
         BNZ   VLF2ER03               OOPS !
         L     R7,SSCTSUS2            LOAD SSCTSUS2 VALUE
         STORAGE RELEASE,LENGTH=20,SP=228,ADDR=(R7),COND=YES
         XC    SSCTSUS2,SSCTSUS2      ZERO OUT SSCTSUS2 FIELD
         WTO   'VLF2012I INTERCEPT AND USERTAB SUCCESSFULLY REMOVED'
         B     EXIT00                 RETURN
CHEKSTAT EQU   *
         L     R3,SSCTSUS2            LOAD R7 WITH SSCTSUS2 VALUE
         LTR   R3,R3                  IS IT ZERO ?
         BNZ   CHEK01                 NO - START-UP SUCCESSFUL
         WTO   'VLF2030I STATUS -> VLF2 IS DORMANT. * NB * USERTAB IS NX
               OT ALLOCATED'
         B     EXIT00
CHECK01  EQU   *
         WTO   'VLF2031I STATUS -> USERTAB IS ALLOCATED...'
         CLC   USERID,=CL4'UTAB'     IS USERTAB INITIALIZED ??
         BE    CHEK02                 YES ?
         WTO   'VLF2032E STATUS -> ..BUT NOT INITIALIZED'
         LA    R15,4                  SET RC=(04)
         B     EXIT
CHEK02   EQU   *
         WTO   'VLF2033I STATUS -> .. AND INITIALIZED...'
         L     R9,CVTABEND            LOAD ADDRESS OF SECONDARY CVT
         USING SCVTSECT,R9
         L     R9,SCVTSVCT            LOAD ADDRESS OF SVCTABLE
         DROP  R9
         L     R9,168(,R9)            LOAD EP OF SVC21
         CLC   10(6,R9),=CL6'VLFSVC'  IS THIS OUR BOY ??
         BE    CHEK03                 YUP
         WTO   'VLF2034E STATUS -> ..BUT VLF2 IS NOT ACTIVE !!!'
         LA    R15,4
         B     EXIT
CHEK03   EQU   *
         MVC   VLFWTO+58(8),34(R9)     MOVE DATE INTO WTO
         MVC   VLFWTO+70(5),29(R9)     MOVE TIME IN TOO
VLFWTO   WTO   'VLF2035I STATUS -> VLF2 IS ACTIVE. LAST LINKED ON ../..X
               /.. AT .....'
         B     EXIT00
VLF2ER01 EQU   *
         WTO   'VLF2002I INTERCEPT ALREADY INSTALLED - USE RESTART TO OX
               VERRIDE'
         LA    R15,4
         B     EXIT
VLF2ER02 EQU   *
         WTO   'VLF2004E STORAGE NOT OBTAINED FOR USER TABLE. NO CSA AVX
               AILABLE'
         LA    R15,8
         B     EXIT
VLF2ER03 EQU   *
         WTO   'VLF2005E SVC INTERCEPT ERROR. CHECK R15 AGAINST SVCUPDTX
               E RETURN CODES'
         LA    R15,12
         B     EXIT
VLF2ER04 EQU   *
         WTO   'VLF2006E STORAGE RELEASE ERROR. PROCESSING CONTINUES'
         LA    R15,4
         B     EXIT
VLF2ER05 EQU   *
         WTO   'VLF2016E INTERCEPT ALREADY DORMANT - SHUTDOWN INVALID'
         LA    R15,4
         B     EXIT
* EXIT ROUTINE
EXIT00   EQU   *
         XR    R15,R15                FORCE RC=(00)
         B     EXIT
EXIT     EQU   *
         MODESET KEY=NZERO
         L     R13,4(,R13)            RELOAD LSA ADDRESS
         L     R14,12(,R13)           RELOAD RETURN ADDRESS
         LM    R0,R12,20(R13)         RESTORE CALLER'S REGISTERS
         BR    R14                    RETURN TO CALLER
         LTORG
SAVEAREA DS    18F
SVCSAVE  DS    18F
RSAVE    DS    F
FLSTART  DC    C'0'
FLRSTART DC    C'0'
FLSHUT   DC    C'0'
FLSTAT   DC    C'0'
         USERTAB DSECT=YES
         CVT   DSECT=YES
         IEFJESCT
         IEFJSCVT
         IHASCVT
         END   VLF2


USERTAB SOURCE CODE

***********************************************************************
* MACRO NAME: USERTAB.                                                *
* PURPOSE: CREATE A TABLE FOR USER ACCESS. THIS TABLE IS FIXED,       *
*     GLOBAL (SP 228), PFK 0 , NOT FETCH PROTECTED AND RESIDES        *
*     IN CSA.                                                         *
* POINTED TO BE: SUBSYSTEM NAEM TABLE - ENTRY USER - SSCTSUS2 field   *
* CREATED BY: Started task VLF2 with parm of "STARTUP"                *
* INVOCATION:                                                         *
*     ASSEMBLER: USING USERTAB,XX                                     *
*                ...                                                  *
*                USERTAB DSECT=YES                                    *
***********************************************************************
         MACRO
         USERTAB &DSECT=YES
         LCLC  &SECT
&SECT    SETC  'DSECT'         ASSUME DSECT=YES
         AIF   ('&DSECT' EQ 'YES').START
         MNOTE 4,'DSECT PARAMETER MUST BE YES.''YES'' SUBSTITUTED.'
         AGO   .START
.START   ANOP
USERTAB  DSECT
USERID   DS    CL4            EYE CATCHER - UTAB
USVLFBR  DC    A(0)           ADDRESS OF INTERCEPTED SVC21 ROUTINE
USUSER1  DS    F              SPARE WORD FOR USER
USUSER2  DS    F              SPARE WORD FOR USER
USUSER3  DS    F              SPARE WORD FOR USER
USUSER4  DS    F              SPARE WORD FOR USER
         MEND


VLF2 JCL

//VLF2   PROC REQ=
//S1     EXEC PGM=VLF2,PARM=&REQ
//* VLF2 DYNAMICALLY STARTS, MODIFIES OR REMOVES THE SVC INTERCEPT
//* FOR VLF. THIS STARTED TASK WILL START, ISSUE INFORMATIVE
//* MESSAGES AND END. VALID PARMS FOR VLF2 ARE THE FOLLOWING :
//* S VLF2,REQ=STARTUP/RESTART/SHUTDOWN/STATUS or blank


INSTALLATION PROCEDURE

Once all the above code and JCL has been entered, copy the
modules into the following libraries:

o      SYS1.PARMLIB - CSVLLAxx/COFVLFxx/IEFSSNxx
o      PROCLIB (eg SYS1.PROCLIB) - VLF2 JCL
o      LINKLIST library (eg SYS1.LINKLIB) - VLF2 program
o      LPA library (eg SYS1.LPALIB) - VLFSVC.

It is now necessary to IPL with a CLPA. This loads the
VLFSVC and installs the user entry in the subsystem name
table. After the IPL, issue the command:

      S VLF2,REQ=STARTUP

To test if the start-up was successful, try the REQ parameter of
'STATUS'.

The 'RESTART' parameter is mainly for testing. If you make a
modification to VLFSVC by zapping it or loading a new
version with some LPA loading facility, the new module can
be invoked with this parameter. Shutting the intercept down is
accomplished with the command:

      S VLF2,REQ=SHUTDOWN

Notice that each reference to VLF2 is accomplished with a start
command and not a modify command.

                                                                  c Xephon 1993

