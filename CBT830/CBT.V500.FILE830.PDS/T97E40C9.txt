Exploiting the extended CSA (continued)

This article is concluded this month with a look at the program
LECTXTFA, and the two copy books, TXFSVCPA and LECCVT,

PROGRAM LECTXFTA

This is the module that performs all storage and table manipulations.
The link- edit PARM should show that the program is linked with AMODE
31, which is necessary for addressing extended storage; but this will
have no effect if the program is called from an AMODE 24 module.
Therefore, to be prepared for that eventuality, we add the following
four lines of code at the entry point:

         LA    15,MODE31             Force AMODE 31
         O     15,P31
         BSM   0,15
MODE31   DS    0H

The next few lines are added just before returning to the caller:

         LA    15,MODE24             Force AMODE24
         0     15,P24
         BSM   0,15
MODE24   DS    0H
P31      DC    XL4'80000000'
P24      DC    XL4'00000000'

In this way you can switch between AMODEs.  The proper way to handle
this would be to store the original AMODE before forcing AMODE 31, and
then decide whether AMODE  24 should be forced before returning to the
caller.

***      TXFTA - CICS TERMINAL EXTENSION FIELDS TABLE      ***
*        USED FOR MANIPULATING TABLE IN ECSA                 *
***      FOR PARAMETERS PLEASE REFER TO BOOK 'TXFSVCPA'    ***
TXFSBASE EQU   2                     ADDRESS OF PARMLIST
         DSECT
         USING TXFSVCPA,TXFSBASE
         COPY  TXFSVCPA              PARMLIST FOR THIS CALL
         DSECT
         USING TXFXFLD,R10
         COPY  B9954TCX               MAPS TABLE ENTRIES
         DSECT
         USING LECCVT,R9
         COPY LECCVT                 LECCVT
         USING WORKSTOR,R4
WORKSTOR DS    0D
GLOW     DS    F
GHIGH    DS    F
GCUR     DS    F
GCURP    DS    F
GELGD    DS    CL2
LECTXFTA CSECT                        TXF-TABLE SVC
         AMODE 31
         USING *,R11               BASEREG
         SAVE  (14,12),,LECTXFTA_&SYSDATE_&SYSTIME
         LR    R11,R15             LOAD BASEREG 11
         LR    R14,R13             SAVE ADDR PREVIOUS SAVEAREA
         LA    R13,SAVEAREA        CURRENT SAVEAREA
         ST    R13,8(R14)          LINK PREVIOUS TO CURRENT
         ST    R14,SAVEAREA+4      LINK CURRENT  TO PREVIOUS
         L     R4,CLRBYTE          CLR. 1. BYTE (AMODE 31)
         NR    R11,R4              --
         B     START               PAST SAVEAREA
SAVEAREA DS    9D
P31      DC    XL4'80000000'
P24      DC    XL4'00000000'
CLRBYTE  DC    XL4'00FFFFFF'
         DC    CL8'SAVEWORK'
SAVEWORK DS    16F
START    DS    0H
         LA    15,MODE31           FORCE AMODE 31
         O     15,P31              --
         BSM   0,15
*** LOCATE LECCVT I CSA ***
MODE31   LR    TXFSBASE,R0      ADDRESS OF PARMLIST
         L     R9,16               CVTADR
         L     R3,204(R9)       LOAD THE ADDRESS OF
         LR    R9,R3                  LECCVT
         L     R4,CLRBYTE          CLR. 1. BYTE (AMODE 31)
         NR    R11,R4              --
*** CHECK OUT THE FUNCTION CODE ***
         CLI   TXFSFUNC,X'01'      GETMAIN TABLE ?
         BE    GETSTOR
         CLI   TXFSFUNC,X'02'      STORE DATA IN TABLE ?
         BE    STORE
         CLI   TXFSFUNC,X'03'      UPDATE AN ENTRY ?
         BE    UPDATE
         CLI   TXFSFUNC,X'04'      SEARCH FOR AN ENTRY ?
         BE    SEARCH
         CLI   TXFSFUNC,X'05'      FREEMAIN TABLE ?
         BE    FREESTOR
         MVI   TXFSRC,X'FF'        INDICATE INVALID FUNCTION
         B     RETURN
*** GETMAIN STORAGE FOR TXFTABLE ***
GETSTOR  CLC   CICSTXF(4),=X'00000000'   ADR. INITIALISED ?
         BE    GS100                  NO - OK
         MVI   TXFSRC,X'01'           INDICATE STORAGE ALREADY GETMAIN.
         B     RETURN
GS100    L     R10,TXFSENTA           ADDRESS OF HEADER
         CLC   TXFTEXT(22),=C'*** TXFSFLD HEADER ***'
         BE    GS110
         MVI   TXFSRC,X'03'           INDICATE HEADER INVALID
         B     RETURN
GS110    L     R0,TXFDISP             DISPLACEMENT TO TRAILER
         AH    R0,TXFELGD              + THE LENGTH OF TRAILER
         LR    R6,R0
         GETMAIN RU,LV=(R0),SP=241,LOC=ANY
         LTR   15,15                  REQUEST SATISFIED ?
         BZ    GS200                   YES - OK
         MVI   TXFSRC,X'02'           INDICATE INSUFF. STORAGE
         B     RETURN
GS200    ST    R1,CICSTXF             STORE ADDR. IN LECCVT
         ST    R6,CICSTXF+4           STORE LGT. IN LECCVT
         MVC   0(40,R1),TXFXFLD       STORE THE HEADER RECORD
         B     RETURN
*** STORE ONE ENTRY IN TXFTABLE ***
STORE    L     R3,16(R9)                START OF TABLE
         L     R4,4(R3)                 DISPLACEMENT TO LAST ENTRY
         AR    R4,R3                    + START = END
         L     R5,TXFSENTA              ADDR. WHERE TO STORE DATA
         CR    R5,R3                    ADDR < BEGINNING OF TABLE ?
         BL    STORE20                  YES
         CR    R5,R4                    ADDR > END OF TABLE ?
         BH    STORE20                  YES
         L     R6,TXFSDATA              ADDR. OF DATA
         MVC   0(40,R5),0(R6)           STORE DATA IN TABLE
         B     RETURN
STORE20  MVI   TXFSRC,X'01'             ADDR. OUTSIDE GETM. AREA
         STM   0,15,SAVEWORK
         B     ABEND
         B     RETURN
*** UPDATE ONE ENTRY IN TXFTABLE ***
UPDATE   L     R3,16(R9)               START OF TABLE
         L     R4,4(R3)                DISPLACEMENT TO LAST ENTRY
         AR    R4,R3                   + START = END
         L     R5,TXFSENTA             ADDR. WHERE TO STORE DATA
         CR    R5,R3                   ADDR < BEGINNING OF TABLE ?
         BL    UPDATE01                YES => ERROR
         CR    R5,R4                   ADDR > END OF TABLE ?
         BH    UPDATE01                YES => ERROR
         CLC   TXFSTERM,0(R5)          HAVE WE FOUND THE TERMINAL ?
         BNE   UPDATE02                NO => ERROR
         L     R6,TXFSDATA             ADDR. OF DATA
         MVC   0(40,R5),0(R6)          STORE DATA IN TABLE
         B     RETURN
UPDATE01 MVI   TXFSRC,X'01'            ADDR. OUTSIDE GETM. AREA
         STM   0,15,SAVEWORK
         B     RETURN
UPDATE02 MVI   TXFSRC,X'02'            WRONG ADDRESS !
         STM   0,15,SAVEWORK
         B     RETURN
*** SEARCH THE TXF-TABLE ***
SEARCH   GETMAIN R,LV=256
         LTR   15,15                   REQUEST SATISFIED ?
         BZ    SEARCH10                 YES - OK
         MVI   TXFSRC,X'FF'            INDICATE INSUFF.STORAGE
         B     RETURN
SEARCH10 LR    R4,R1                      SAVE THE ADDR OF STORAGE
         L     R10,16(R9)                 START OF TABLE
         MVC   GLOW,=F'1'                 LOWEST ENTRY FOR SEARCH
         MVC   GELGD,TXFELGD              LENGTH OF 1 ENTRY
         MVC   GHIGH,TXFENUM              HIGHEST ENTRY FOR SEARCH
         L     R3,GHIGH                   CURRENT ENTRY FOR SEARCH
         SRL   R3,1(0)                       DIVIDE BY TWO
         ST    R3,GCUR                       SAVE IT AS CURR. ENTRY
COMPARE  L     R7,GCUR                    COMPUTE ADDRESS OF ENTRY
         S     R7,=F'1'
         LH    R3,GELGD                   -- ENTRYLENGTH
         MR    R6,R3                      -- ENTRYó * ENTRYLGTH
         LR    R3,R10                     -- START OF TABLE
         AR    R3,R7                      --    + DISPLACEMENT
         ST    R3,GCURP
         CLC   TXFSTERM,0(R3)             ENTRY FOUND ?
         BE    FOUND                      YES
         BH    HIGH                       NO - FURTHER DOWN TABLE
         B     LOW                        NO - BACK UP TABLE
HIGH     MVC   GLOW,GCUR                  LIMIT SEARCH
         L     R8,GHIGH                   FIND MIDDLE OF HIGH AND LOW
         L     R3,GLOW                    --
         SR    R8,R3                      --
         SRL   R8,1(0)                    --
         L     R3,GCUR                    --
         AR    R3,R8                      --
         ST    R3,GCUR                    --
         C     R8,=F'4'                   IF HIGH - LOW < 8
         BL    CLOSE                         WE ARE CLOSE NOW
         B     COMPARE
LOW      MVC   GHIGH,GCUR                 LIMIT SEARCH
         L     R8,GHIGH                   FIND MIDDLE OF HIGH AND LOW
         L     R3,GLOW                    --
         SR    R8,R3                      --
         SRL   R8,1(0)                    --
         AR    R3,R8                      --
         ST    R3,GCUR                    --
         C     R8,=F'4'                   IF HIGH - LOW < 8
         BL    CLOSE                         WE ARE CLOSE NOW
         B     COMPARE
CLOSE    MVC   GCUR,GLOW
         L     R7,GCUR
         LH    R3,GELGD                   --  ENTRYLENGTH
         MR    R6,R3                      --  ENTRYó * ENTRYLGTH
         LR    R3,R10                     --  START OF TABLE
         AR    R3,R7                      --    + DISPLACEMENT
         ST    R3,GCURP
         CLC   TXFSTERM,0(R3)             ENTRY FOUND ?
         BE    FOUND                      YES
         CLC   GLOW,GHIGH
         BE    NOTFND
         L     R7,GCUR
         A     R7,=F'1'
         ST    R7,GLOW
         B     CLOSE                      YES
NOTFND   MVI   TXFSRC,X'01'               RETURN CODE NOT FOUND.
         B     SRCFREE
FOUND    MVI   TXFSRC,X'00'               RETURN CODE FOR OK.
         MVC   TXFSENTA,GCURP             STORE ADDRESS OF ENTRY
SRCFREE  FREEMAIN R,LV=256,A=(R4)
         B     RETURN
*** FREEMAIN STORAGE FOR TXFTABLE ***
FREESTOR CLC   CICSTXF(4),=X'00000000'    ADDR.INITIALISED ?
         BNE   FS100                  YES - OK
         MVI   TXFSRC,X'01'           INDICATE STORAGE NOT GETMAINED.
         B     RETURN
FS100    L     R10,TXFSENTA           ADDRESS OF HEADER
         CLC   TXFTEXT(22),=C'*** TXFSFLD HEADER ***'
         BE    FS110
         MVI   TXFSRC,X'03'           INDICATE HEADER INVALID
         B     RETURN
FS110    L     R0,TXFDISP             DISPLACEMENT TO TRAILER
         AH    R0,TXFELGD              + THE LENGTH OF TRAILER
         FREEMAIN RU,LV=(R0),A=TXFSENTA,SP=241
         LTR   15,15                  REQUEST SATISFIED ?
         BZ    FS200                   YES - OK
         MVI   TXFSRC,X'02'           INDICATE ERROR
         B     RETURN
FS200    MVC   CICSTXF(4),=X'00000000'   NULL ADDR. IN LECCVT
         B     RETURN
ABEND    ABEND 237,DUMP
RETURN   LA    15,MODE24           FORCE AMODE 24
         O     15,P24              --
         BSM   0,15
MODE24   L     R13,SAVEAREA+4
         RETURN (14,12),RC=(15)
         LTORG
         END   LECTXFTA

BOOK TXFSVCPA

This member should be copied into any program that communicates with
LECTXFTA.  It outlines the rules of that communication.

*--------------------------------------------------------------------*
*         -- CICS TERMINAL EXTENSION FIELDS --                       *
*            -- PARAMETER LIST USED WHEN --                          *
*            --     CALLING LECTXFTA     --                          *
*            -- ADDRESS OF PARMLIST MUST --                          *
*            -- BE PLACED IN REGISTER 0  --                          *
*            -- BEFORE CALLING.          --                          *
*     FUNCTIONS:                                                     *
*     1)  GETMAIN STORAGE FOR TXF-TABLE IN ECSA                      *
*         PARAMETERS:  TXFSBASE = ADDRESS OF PARMLIST (R0)           *
*                           TXFSFUNC : X'01'                         *
*                           TXFSENTA : ADDR. OF TXFHEADER            *
*         OUTPUT:           RETURN CODE:                             *
*                             X'00' -  OK                            *
*                             X'01' -  STORAGE ALREADY GETM.         *
*                             X'02' - INSUFF. STORAGE                *
*     2) STORE DATA IN TXFTABLE                                      *
*        PARAMETERS:  TXFSBASE = ADDRESS OF PARMLIST (R0)            *
*                           TXFSFUNC : X'02'                         *
*                           TXFSENTA : ADDR IN TXF-TABLE             *
*                           TXFSDATA : ADDR OF DATA TO STORE         *
*         OUTPUT:           RETURN CODE:                             *
*                             X'00' -  OK                            *
*                             X'01' -  ADDRESS OUTSIDE TABLE         *
*                             X'02' -  ADDRESS NOT ON ENTRY BOUNDARY *
*     3)  UPDATE 1  ENTRY IN TXF TABLE -                             *
*         PARAMETERS:   TXFSBASE = ADDRESS OF PARMLIST (R0)          *
*                            FUNCTION : X'03'                        *
*                            TXFSTERM: TERMINAL ID.                  *
*                            TXFSENTA: ADDRESS OF TABLE ENTRY        *
*                            TXFSDATA: ADDRESS OF DATA TO REPL.      *
*         OUTPUT:            RETURN CODE:                            *
*                              X'0'  -  OK                           *
*                              X'1'  -  ADDR OUTSIDE TABLE           *
*                              X'2'  -  ADDR NOT START OF TABLE ENTRY*
*     4)  SEARCH FOR ENTRY IN TXF TABLE -                            *
*         PARAMETERS:  TXFSBASE = ADDRESS OF PARMLIST (R0)           *
*                           TXFSFUNC : X'04'                         *
*                           TXFSTERM : ARGUMENT FOR SEARCH           *
*         OUTPUT:           ENTADR ADDRESS OF TABLE ENTRY            *
*                           RETURN CODE:                             *
*                             X'0'  -  OK                            *
*                             X'1'  -  ENTRY NOT FOUND               *
*     5)  FREEMAIN STORAGE FOR TXF-TABLE IN ECSA                     *
*         PARAMETERS:  TXFSBASE = ADDRESS OF PARMLIST (R0)           *
*                           TXFSFUNC : X'05'                         *
*                           TXFSENTA : ADDR. OF TXFHEADER            *
*         OUTPUT:           RETURN CODE:                             *
*                             X'00' -  OK                            *
*                             X'01' -  STORAGE NOT GETMAINED         *
*                                   -  (NO ADDR. IN LECCVT)          *
*                             X'02' -  ERR. RETURN FROM FREE.        *
*                             X'03' -  WRONG ADDR. IN TXFSENTA       *
*--------------------------------------------------------------------*
TXFSVCPA DS    0D             ALIGN TO DOUBLE WORK BOUNDARY
TXFSTERM DS    CL4            TERMINAL ID FOR SEARCH ARGUMENT
TXFSENTA DS    CL4            ADDRESS OF TABLE ENTRY
TXFSDATA DS    CL4            ADDRESS OF DATA TO REPLACE AT ENTADR
TXFSFUNC DS    CL1            FUNCTION CODE
TXFSRC   DS    CL1            RETURN CODE

BOOK LECCVT

The current layout of our CVT expansion table is contained in LECCVT and
is as follows:

LECCVT   DS    0D
MVSID    DS    F              MVS-  (JES2 &SID)
CPUID    DS    F              30--  (3090 OR 3084)
S72MEDIO DS    0D             S72MEDIO
         DS    F              S72MEDIO ADDRESS
         DS    F              S72MEDIO LENGTH
CICSTXF  DS    0D             CICSTXF
         DS    F              CICSTXF ADDRESS
         DS    F              CICSTXF LENGTH
S72TEST  DS    0D             S72TEST
         DS    F              S72TEST ADDRESS
         DS    F              S72TEST LENGTH
S72PROD  DS    0D             S72PROD
         DS    F              S72PROD ADDRESS
         DS    F              S72PROD LENGTH
LECCVTX  EQU   *


Poul Erik Olesen
Systems Programmer
LEC (Denmark)  € Xephon 1988



