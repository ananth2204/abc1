C and PDSs


THE HEADER FILE

#pragma nomargins nosequence
#include <stdio.h>
#include <errno.h>
#ifndef c2pDs___
  #define c2pDs___ c2pDs___
  typedef void pds_handle;
  typedef void mbr_handle;
  typedef struct __fpos_t mbrpos_t;
  #define pDs__erl 501
  char * pDs__ert[]= {
        /*501*/        "Ddname not allocated"               ,
        /*502*/        "Allocated file is not partioned"    ,
        /*503*/        "File is PDS but member allocated"   ,
        /*504*/        "Open of PDS failed"                 ,
        /*505*/        "Invalid pdshandle given"            ,
        /*506*/        "PDS not closed: members open"       ,
        /*507*/        "Close PDS function failed"          ,
        /*508*/        "Invalid member handle given"        ,
        /*509*/        "Close of member/memory file failed" ,
        /*510*/        "Remove of member/memory file failed",
        /*511*/        "Member in use: enqueue failed"      ,
        /*512*/        "Unsupported recfm"                  ,
        /*513*/        "PDS directory not open"             ,
        /*514*/        "Create of member/memory file failed",
        /*515*/        "Open of member/memory file failed"  ,
        /*516*/        "Member not found"                   ,
        /*517*/        "Too many parameters for mbrscanf"   };
  #define pDs__erh 517
  /*dirclose closes directory*/
    #pragma linkage(pDs__cld,os)
    int pDs__cld(pds_handle * handle, int * eno);
    #define dirclose(han) pDs__cld(han, &errno)
  /*dirnextmbr retrieve the next sequential membername*/
    char * pDs__dnm(pds_handle * ph, char * nextmem);
    #define dirnextmbr(han,mem) pDs__dnm(han,mem)
  /*diropen opens a directory for sequential retrieve of member names*/
    #pragma linkage(pDs__rdd,os)
    int pDs__rdd(pds_handle * handle, int * eno);
    #define diropen(han) pDs__rdd(han, &errno)
  /*mbrcancel closes the member, updates are lost*/
    int pDs__mcl (mbr_handle * mh, int save);
    #define mbrcancel(mh) pDs__mcl(mh , 0)
  /*mbrclearerr resets the member error indicator*/
    void pDs__mce (mbr_handle * mh);
    #define mbrclearerr(mh) pDs__mce(mh)
  /*mbrclose saves and closes the member*/
    #define mbrclose(mh) pDs__mcl(mh , 1)
  /*mbrdelete deletes the given member from the pds*/
    #pragma linkage(pDs__mdl,os)
    char * pDs__mdl(pds_handle * handle, char * member, int * eno);
    #define mbrdelete(ph,mn) pDs__mdl(ph, mn, &errno)
  /*mbreof returns the eof flag for the member*/
    int pDs__meo (mbr_handle * mh);
    #define mbreof(mh) pDs__meo(mh)
  /*mbrerror returns the error flag for the member*/
    int pDs__mer (mbr_handle * mh);
    #define mbrerror(mh) pDs__mer(mh)
  /*mbrgetc returns one character of the member file*/
    int pDs__mgc (mbr_handle * mh);
    #define mbrgetc(mh) pDs__mgc(mh)
  /*mbrgetpos stores current position of the file*/
    int pDs__mgp (mbr_handle * mh, mbrpos_t *pos);
    #define mbrgetpos(mh,pos) pDs__mgp(mh,pos)
  /*mbrgets reads a string from the file*/
    char * pDs__mgs (char * string, int n, mbr_handle * mh);
    #define mbrgets(str,n,mh) pDs__mgs(str,n,mh)
  /*mbropen opens a member from the pds and returns a member handle*/
    mbr_handle * pDs__mop(pds_handle * ph, char * mbr, char * type);
    #define mbropen(ph,mbr,typ) pDs__mop(ph,mbr,typ)
  /*mbrprintf writes formatted to the member*/
    int pDs__mpf (mbr_handle * mhan, const char *format, ...);
    #define mbrprintf pDs__mpf
  /*mbrputc writes a character to the member*/
    int pDs__mpc (int c, mbr_handle * mhan);
    #define mbrputc(c,mh) pDs__mpc(c,mh)
  /*mbrputs writes a string to the member*/
    int pDs__mps (const char * s, mbr_handle * mhan);
    #define mbrputs(s,mh) pDs__mps(s,mh)
  /*mbrread reads from a member like fread*/
    size_t pDs__mrd( void *buffer, size_t size, size_t count,
                     mbr_handle * mh);
    #define mbrread(buf,sz,cnt,mh) pDs__mrd(buf,sz,cnt,mh)
  /*mbrreopen reopens a member like freopen*/
    mbr_handle * pDs__reo ( const char *type, mbr_handle * mh);
    #define mbrreopen(typ,mh) pDs__reo(typ,mh)
  /*mbrscanf reads from the member, formatted*/
    int pDs__msc (mbr_handle * mhan, const char *format, ...);
    #define mbrscanf pDs__msc
  /*mbrseek repositions the member position*/
    int pDs__mse (mbr_handle * mh, long int offset, int origin);
    #define mbrseek(mh,off,org) pDs__mse(mh,off,org)
  /*mbrsetpos sets file position to given value*/
    int pDs__msp (mbr_handle * mh, const mbrpos_t *pos);
    #define mbrsetpos(mh,pos) pDs__msp(mh,pos)
  /*mbrtell: gets current member position*/
    long int pDs__mte (mbr_handle * mh);
    #define mbrtell(mh) pDs__mse(mh)
  /*mbrwrite writes to a member like fwrite*/
    size_t pDs__mwr( void *buffer, size_t size, size_t count,
                     mbr_handle * mh);
    #define mbrwrite(buf,sz,cnt,mh) pDs__mwr(buf,sz,cnt,mh)
  /*pdsclose closes the PDS in the given handle */
    #pragma linkage(pDs__cls,os)
    int pDs__cls(pds_handle * handle, int * eno);
    #define pdsclose(han) pDs__cls(han, &errno)
  /*pdsddname returns the ddname associated with the handle */
    #pragma linkage(pDs__ddn,os)
    char * pDs__ddn(pds_handle * handle, int * eno);
    #define pdsddname(han) pDs__ddn(han, &errno)
  /*pdsdsname returns the dsname associated with the handle */
    #pragma linkage(pDs__dsn,os)
    char * pDs__dsn(pds_handle * handle, int * eno);
    #define pdsdsname(han) pDs__dsn(han, &errno)
  /*pdshandle returns the status of the given pds handle */
    #pragma linkage(pDs__phn,os)
    int pDs__phn(pds_handle * handle, int * eno);
    #define pdshandle(han) pDs__phn(han, &errno)
  /*pdslrecl returns the lrecl associated with the handle */
    #pragma linkage(pDs__lrl,os)
    int pDs__lrl(pds_handle * handle, int * eno);
    #define pdslrecl(han) pDs__lrl(han, &errno)
  /*pdsopen opens a PDS and returns a PDS handle */
    #pragma linkage(pDs__opn,os)
    pds_handle * pDs__opn(char * ddname, int * eno);
    #define pdsopen(dd) pDs__opn(dd, &errno)
  /*pdsperror prints an error msg to standard error device*/
    void pDs__per(char * string);
    #define pdsperror(str) pDs__per(str)
  /*pdsrecfm returns the recfm associated with the handle */
    #pragma linkage(pDs__rfm,os)
    char * pDs__rfm(pds_handle * handle, int * eno);
    #define pdsrecfm(han) pDs__rfm(han, &errno)
  /*pdsstrerror returns a pointer to error message string*/
    char * pDs__ser(int errnum);
    #define pdsstrerror(num) pDs__ser(num)
  #ifndef c2pDsc__
    /*dummy call to dummy function c2pdsc in c2pdsc source file*/
    /*to force the linker to include module c2pdsc (C-written  */
    /*functions for c2pds from source c2pdsc and assembler     */
    /*written functions from c2pdsa)                           */
      c2__pDsc() { c2pDsc(); }
  #endif
#endif


THE C SOURCE

#define forever while (1)
#define c2pDsc__ c2pDsc__
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <c2pDs.h>
/*dummy call to dummy function c2pdsa in c2pdsa source file*/
/*to force the linker to include module c2pdsa (assembler  */
/*functions for c2pds) and to make it possible to have     */
/*the linker include this module by calling c2pDsc         */
  c2pDsc() { c2pDsa(); }
typedef struct { char acro[9];
                 char filename[18];
                 char mbrname[9];
                 char type[9];
                 FILE * mf;
                 int  changes_made;
                 pds_handle * ph;
               } pDs__mh;
/*Conc. Function to concatenate strings*/
  #pragma linkage(sTr__cnc,os)
  char * sTr__cnc(char * buf, ...);
  #define conc sTr__cnc
/*pDs__buf function to retrieve pointer to pds io buffer*/
  #pragma linkage(pDs__buf,OS)
  char * pDs__buf(pds_handle * handle, int * eno);
/*pDs__bls function to retrieve pds blocksize*/
  #pragma linkage(pDs__bls,OS)
  int pDs__bls(pds_handle * handle, int * eno);
/*pDs__bus function to retrieve size of pds io buffer*/
  #pragma linkage(pDs__bus,OS)
  int pDs__bus(pds_handle * handle, int * eno);
/*pDs__dqd function to dequeue pds from update enqueue*/
  #pragma linkage(pDs__dqd,OS)
  char * pDs__dqd(pds_handle * handle);
/*pDs__dqm function to dequeue member from open member enqueue*/
  #pragma linkage(pDs__dqm,OS)
  char * pDs__dqm(pds_handle * handle, char * mbr);
/*pDs__eof function to test the eof status for the member*/
  #pragma linkage(pDs__eof,OS)
  int pDs__eof(pds_handle * handle, int * eno);
/*pDs__fnd function to find a member in the pds*/
  #pragma linkage(pDs__fnd,OS)
  int pDs__fnd(pds_handle * handle, char * mbr, int * eno);
/*pDs__nmd function to retrieve next member from open directory*/
  #pragma linkage(pDs__nmd,OS)
  char * pDs__nmd(pds_handle * handle, int * eno);
/*pDs__nqd function to reserve pds during update*/
  #pragma linkage(pDs__nqd,OS)
  char * pDs__nqd(pds_handle * handle);
/*pDs__nqm function to enqueue member while open*/
  #pragma linkage(pDs__nqm,OS)
  char * pDs__nqm(pds_handle * handle, char * mbr);
/*pDs__rdm function to fill the io buffer from pds*/
  #pragma linkage(pDs__rdm,OS)
  int pDs__rdm(pds_handle * handle);
/*pDs__stw function to stow a member in the pds*/
  #pragma linkage(pDs__stw,OS)
  int pDs__stw(pds_handle * handle, char * mem, int * eno);
/*pDs__wrm function to copy io buffer to pds*/
  #pragma linkage(pDs__wrm,OS)
  int pDs__wrm(pds_handle * handle,int blocksize);
/*dirnextmbr function to retrieve next sequential member name*/
  char * pDs__dnm ( pds_handle * ph, char * nextmem)
  {   char * retmem;
      int i;
    /*get address of next membername*/
      retmem = pDs__nmd(ph,&errno);
    /*check result*/
      if (retmem == NULL) return NULL;
    /*copy returned membername to user area*/
      strncpy(nextmem,retmem,8);
    /*strip blanks and null-terminate*/
      retmem=nextmem+8; *retmem='\0';
      for (retmem--; retmem >= nextmem && *retmem == ' ';retmem--)
        retmem = '\0';
    /*return the found member*/
      return nextmem;
  }
/*mbrclearerr: function to reset the member error indicators*/
  void pDs__mce (mbr_handle * mh)
  { /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        { errno = 508; return; }
    /*reset the error flags*/
      clearerr(((pDs__mh*)mh)->mf);
  }
/*mbrclose function to close a member/memory file*/
  int pDs__mcl (mbr_handle * mh, int save)
  {   pDs__mh * mmh;
    /*create local copy of member handle pointer*/
      mmh = (pDs__mh *) mh;
    /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(mmh->acro,"MBRHANDL")) { errno = 508; return EOF; }
    /*if changes_made rewrite to PDS*/
      if (mmh->changes_made && save) pDs__msv(mh);
    /*close the member/memory file*/
      if (fclose(mmh->mf)) { errno = 509; return EOF; }
    /*remove memory file*/
      if (remove(mmh->filename)) { errno = 510; return EOF; }
    /*release member enqueue*/
      pDs__dqm(mmh->ph,mmh->mbrname);
    /*remove handle*/
      strcpy(mmh->acro,"OLDHANDL");
      free(mh);
    /*back*/
      return 0;
  }
/*mbreof: function to return the eof status of member*/
  int pDs__meo (mbr_handle * mh)
  { /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        { errno = 508; return EOF; }
    /*return eof flag*/
      return feof(((pDs__mh*)mh)->mf);
  }
/*mbrerror: function to return the error status of member*/
  int pDs__mer (mbr_handle * mh)
  { /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        { errno = 508; return 508; }
    /*return error flag*/
      return ferror(((pDs__mh*)mh)->mf);
  }
/*mbrgetc:  function to read a single character from member*/
  int pDs__mgc (mbr_handle * mh)
  {   int c;
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        { errno = 508; return EOF; }
    /*return a character*/
      return fgetc(((pDs__mh*)mh)->mf);
  }
/*mbrgetpos:  function to get the current file posistion*/
  int pDs__mgp (mbr_handle * mh, mbrpos_t *pos)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL")) return 0;
      { errno = 508; return EOF; }
    /*get and return position*/
      return fgetpos(((pDs__mh*)mh)->mf, pos);
  }
/*mbrgets:  function to read a string of characters from member*/
  char * pDs__mgs (char * string, int n, mbr_handle * mh)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
    if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
      { errno = 508; return NULL; }
    /*return a string*/
      return fgets(string,n,((pDs__mh*)mh)->mf);
  }
/*mbropen: function to open a PDS member*/
  mbr_handle * pDs__mop ( pds_handle * ph,
                          char * mbr,
                          char * type)
  {   pDs__mh * mh;
      int must_exist;
      char * buffer;
      char concbuf[40];
      int notfound;
      char ddn[9]; int i;
    /*test the pdshandle*/
      if (!pdshandle(ph)) return NULL;
    /*reset error code*/
      errno = 0;
    /*determine must_exist switch*/
      must_exist = (strchr(type,'r')!=NULL);
    /*get the pds buffer address*/
      buffer = pDs__buf(ph, &errno);
    /*allocate member handle*/
      mh = malloc(sizeof(pDs__mh));
    /*initialize the handle*/
      strcpy(mh->acro,"MBRHANDL");  /*eyecatcher*/
      strncpy(mh->mbrname,mbr,8);   /*copy membername (max 8 chars)*/
      mh->mbrname[8] = '\0';        /*null-term it*/
      strncpy(mh->type,type,8);     /*copy type (max 8 chars)*/
      mh->type[8] = '\0';           /*null-term it*/
      mh->ph=ph;                    /*pds handle pointer*/
      mh->changes_made = 0;         /*no changes made yet*/
    /*enqueue the member*/
      if (pDs__nqm(mh->ph,mh->mbrname))
        { errno = 511;
          strcpy(mh->acro,"OLDHANDL");
          free(mh);
          return NULL;
        }
    /*open a memory file for the member*/
      strcpy(ddn,pdsddname(ph));
      for (i=7;ddn[i]==' '&&i>0;i--) ddn[i]='\0';
      if ( ( mh->mf = fopen( conc( mh->filename,
                                   ddn,".",mbr
                                 ) ,
                             "w,type=memory"
                           )
           ) == NULL
         ) { errno = 514;
             strcpy(mh->acro,"OLDHANDL");
             free(mh);
             return NULL;
           }
    /*open the pds member*/
      notfound = pDs__fnd(ph,mbr, &errno);
      if (notfound  && must_exist)
        { fclose(mh->mf);
          remove(mh->filename);
          strcpy(mh->acro,"OLDHANDL");
          free(mh);
          return NULL;
        }
      else errno = 0;
    /*copy all blocks of member to memory file*/
      if (!notfound)
      { if (*pdsrecfm(ph)=='F')
          while (!pDs__eof(ph, &errno))
            fwrite(buffer,1,pDs__rdm(ph),mh->mf);
        else
        { int bl,rl, bufpos,i, lrecl;
          lrecl = pdslrecl(ph);
          while (1)
          { pDs__rdm(ph);
            if (pDs__eof(ph, &errno)) break;
            bl = * (short int *) buffer;
            bufpos = 4;
            while (bl > 4)
            { rl = * (short int *) (buffer+bufpos);
              fwrite(buffer+bufpos+4,1,rl-4,mh->mf);
              for (i=rl-4;i<lrecl;i++) fputc(' ',mh->mf);
              bufpos += rl;
              bl -= rl;
      } } } }
    /*open the file the way the user wants it*/
      if ( ( mh->mf = freopen( mh->filename,
                               conc(concbuf,type,",type=memory"),
                               mh->mf)
           ) == NULL
         ) { errno = 515;
             strcpy(mh->acro,"OLDHANDL");
             free(mh);
             return NULL;
           }
    return mh;
  } /*end pds__mop*/
/*mbrprintf function to write formatted to the member*/
  int pDs__mpf (mbr_handle * mh, const char *format, ...)
  {   va_list varargs;
    /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return EOF;}
    /*indicate that he changed the member/memoryfile*/
      ((pDs__mh*)mh)->changes_made = 1;
    /*get variable part of arguments list*/
      va_start(varargs, format);
    /*fprintf and return number of fields assigned*/
      return vfprintf(((pDs__mh*)mh)->mf, format, varargs);
  }
/*mbrputc function to write a character to the member*/
  int pDs__mpc (int c, mbr_handle * mh)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return EOF;}
    /*indicate that he changed the member/memoryfile*/
      ((pDs__mh*)mh)->changes_made = 1;
    /*fputc the character*/
      return fputc(c,((pDs__mh*)mh)->mf);
  }
/*mbrputs function to write a string to the member*/
  int pDs__mps (const char * s, mbr_handle * mh)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return EOF;}
    /*indicate that he changed the member/memoryfile*/
      ((pDs__mh*)mh)->changes_made = 1;
    /*fputc the string*/
      return fputs(s,((pDs__mh*)mh)->mf);
  }
/*mbrread: function to read from a member/memory file*/
size_t pDs__mrd ( void *buffer, size_t size, size_t count,
                  mbr_handle * mh)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return 0;}
    /*read the data he asked for*/
      return  fread(buffer,size,count,((pDs__mh*)mh)->mf);
  }
/*mbrreopen: function to reopen a member/memory file*/
  mbr_handle * pDs__reo ( const char *type, mbr_handle * mh)
  {   char concbuf[40];
    /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return NULL;}
  /*reopen the memory file*/
    if ( ( ((pDs__mh*)mh)->mf = freopen( ((pDs__mh*)mh)->filename,
                                conc(concbuf,type,",type=memory"),
                                ((pDs__mh*)mh)->mf)
         ) == NULL
       ) { errno = 515;
           strcpy(((pDs__mh*)mh)->acro,"OLDHANDL");
           free(mh);
           return NULL;
         }
  /*return reopened memberhandle*/
    return mh;
  }
/*mbrsave function to copy a member/memory file to the pds*/
  int pDs__msv (mbr_handle * mh)
  {   pDs__mh * mmh;
      int blksz, lrecl;
      int bufsz, b;
      char * buffer;
      char concbuf[40];
      errno = 0;
      mmh = (pDs__mh*)mh;
      lrecl  = pdslrecl(mmh->ph);
      blksz  = pDs__bls(mmh->ph,&errno);
      bufsz  = pDs__bus(mmh->ph,&errno);
      buffer = pDs__buf(mmh->ph, &errno);
    /*check the handle*/
      if (strcmp(mmh->acro,"MBRHANDL"))
        { errno = 508; return EOF; }
    /*reopen member/memory file for input*/
      freopen(mmh->filename,
               "r,type=memory", mmh->mf);
    /*enqueue pds*/
      pDs__nqd(mmh->ph);
    /*save if fixed records*/
      if (*pdsrecfm(mmh->ph)=='F')
      { blksz = (bufsz/blksz)*blksz;
        while (b=((fread(buffer,1,blksz,mmh->mf)/lrecl)*lrecl))
          pDs__wrm(mmh->ph,b);
      }
    /*save if variable records*/
      else
      { struct dw_{short int l; short int i;} *bdw;
        int recl;
        bdw = (struct dw_ *)buffer;
        bdw->i = 0; bdw->l = 4;
        forever
        { for(recl=4+fread(buffer+bdw->l+4,1,lrecl,mmh->mf);
              *(buffer+bdw->l+recl-1)==' ' && recl>4;
              recl--);
          ((struct dw_ *)(buffer+bdw->l))->l=recl;
          ((struct dw_ *)(buffer+bdw->l))->i=0;
          if (feof(mmh->mf))
          { if (bdw->l>4)
                printf("wrm rc %i\n",pDs__wrm(mmh->ph,bdw->l));
            break;
          }
          if (bdw->l+recl>blksz)
          { pDs__wrm(mmh->ph,b);
            memmove(buffer+4,buffer+bdw->l,recl);
            bdw->i = 0; bdw->l = 4;
          }
          bdw->l+=recl;
        }
      }
      b=pDs__stw(mmh->ph,mmh->mbrname,&errno);
    /*dequeue dataset*/
      pDs__dqd(mmh->ph);
    /*reopen member/memory file for the way the use wants it*/
      freopen( mmh->filename,
               conc(concbuf,mmh->type,",type=memory"),
               mmh->mf);
    /*indicate no unsaved changes*/
      mmh->changes_made=0;
  }
/*mbrscanf function to read formatted from the open member*/
  int pDs__msc (mbr_handle * mh, const char *format, ...)
  {   va_list arg_ptr;
      void * a[24] ;
      int i; int perc=0;
    /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return EOF;}
    /*build arguments for fscanf*/
      for (i=0;i<strlen(format);i++)
        if (format[i]=='%')
          if (format[++i]!='%') perc++;
      if (perc > 24) {errno = 517; return EOF;}
      va_start(arg_ptr,format);
      for (i=0;i<perc;i++) a[i] = va_arg(arg_ptr, void *);
    /*scan and return number of fields assigned*/
      return fscanf(((pDs__mh*)mh)->mf, format,
          a[ 0], a[ 1], a[ 2], a[ 3], a[ 4], a[ 5], a[ 6], a[ 7],
          a[ 8], a[ 9], a[10], a[11], a[12], a[13], a[14], a[15],
          a[16], a[17], a[18], a[19], a[20], a[21], a[22], a[23]);
  }
/*mbrseek: function to reposition file position*/
  int pDs__mse (mbr_handle * mh, long int offset, int origin)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return EOF;}
    /*seek*/
      return fseek(((pDs__mh*)mh)->mf, offset, origin);
  }
/*mbrsetpos: function to set the current file posistion*/
 int pDs__msp (mbr_handle * mh, const mbrpos_t *pos)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return EOF;}
    /*setpos*/
      return fsetpos(((pDs__mh*)mh)->mf, pos);
  }
/*mbrtell: function to get the current position*/
  long int pDs__mte (mbr_handle * mh)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return -1;}
    /*return the position*/
      return ftell(((pDs__mh*)mh)->mf);
  }
/*mbrwrite function to write to a member/memory file*/
  size_t pDs__mwr ( void *buffer, size_t size, size_t count,
                    mbr_handle * mh)
  { /*reset error*/
      errno = 0;
    /*check the handle*/
      if (strcmp(((pDs__mh*)mh)->acro,"MBRHANDL"))
        {errno = 508; return 0;}
    /*indicate that he changed the member/memoryfile*/
      ((pDs__mh*)mh)->changes_made = 1;
    /*write the data he asked for*/
      return  fwrite(buffer,size,count,((pDs__mh*)mh)->mf);
  }
/*pdsperror prints an error message to standard error device*/
void pDs__per(char * string)
{ int e = errno;
  if (e >= pDs__erl && e <= pDs__erh)
    fprintf(stderr,"%s: %s\n",string,pDs__ert[e-pDs__erl]);
  else
    perror(string);
}
/*pdsstrerror returns a pointer to a error message string*/
char * pDs__ser(int errnum)
{ if (errnum >= pDs__erl && errnum <= pDs__erh)
    return pDs__ert[errnum-pDs__erl];
  else
    return strerror(errnum);
}

J van de Pieterman
Systems Programmer
Hoogovens (The Netherlands)          c Xephon 1996

