3990 cache performance monitor

DASD units attached to a 3990 controller can provide better
performance if the cache and Non-Volatile Storage (NVS) are
utilized effectively. DFP 3.2 provides the new commands
SETCACHE and LISTDATA for managing the cache.
SETCACHE is used for enabling and disabling the cache or
NVS and LISTDATA gives the cache utilization counters.
However, the counters provided by LISTDATA give the
cumulative count from the time the controller is IMLed.
Hence, it does not give a representation of cache utilization
over a specified period of time or the relative performance for
different DASD volumes on the controller. Since our
installation does not have the Cache RMF Reporter, which is a
separately priced product, the following two programs were
written.


CACHECOL

This program runs as a started task for the duration for which
data is to be collected. The interval of data collection can be
specified as a parameter. The subsystems on which data is to
be collected are specified in a PDS member, which is allocated
to a DD statement DEVIN. Each record of this member
contains a six-character volume-id and a four-character device
type on a subsystem. Only one volume-id of a specified device
type is to be specified for a subsystem. This program invokes
IDCAMS and passes a LISTDATA command to it. The output
generated is read and the interval counter records are written at
specified intervals. The data collection can be terminated by
the STOP command.

A sample procedure for starting the monitor would look like
this:

//CACHCOL PROC INT=60
//CACHINF  EXEC PGM=CACHECOL,PARM='&INT'
//DEVIN    DD   DSN=pds.name(member),DISP=SHR
//OUTFILE  DD   DSN=output.dataset,DISP=SHR


CACHEREP

This program reads the interval records generated by
CACHECOL and generates formatted reports for different
subsystems. This can be modified for generating reports for
devices too. Duration is specified by the control cards DATE
and TIME. A summary report for the whole duration (SUM) or
reports at intervals (INT) can also be generated.

A job stream for generating the reports would look like this:

//CACHREP JOB 0,'0',CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1)
//STEP1   EXEC PGM=CACHEREP
//INPFIL    DD DSN=output.dataset,DISP=SHR
//PRTFIL    DD SYSOUT=*
//SYSOUT    DD SYSOUT=*
//SYSIN     DD *
 REPORT(ssid1,ssid2,..)        ALL if all subsystems
 DATE(YYddd YYddd)             Starting and ending date
 TIME(HHmm HHmm)               Starting and ending time
 SUM                           SUM - summary / INT - Interval
/*


CACHECOL SOURCE CODE

CACHECOL CSECT
         STM   14,12,12(13)          SAVE REGS
         USING CACHECOL,12,11        SET BASE REGS
         LR    12,15                 FIRST BASE REG
         LA    11,4095(12)
         LA    11,1(11)              SECOND BASE REG
         ST    13,SAVEAREA+4         SAVE OLD SAVE AREA ADDRESS
         LA    13,SAVEAREA           ADDRESS OF REGISTER SAVE AREA
         L     1,0(1)                POINTER TO PARAMETER
         LH    3,0(1)                PARAMETER LENGTH
         LTR   3,3                   LENGTH = 0
         BZ    NOPARM                NO PARAMETER PASSED
         MVC   WTO1+8(50),MSG0       INVALID PARAMETER MESSAGE
         CH    3,=H'2'               MORE THAN 2 CHARS
         BNE   WTO1                  DISPLAY MESSAGE
         MVC   INTERVAL(2),2(1)      TIME INTERVAL BETWEEN STATISTICS
         B     PROCED
NOPARM   MVC   INTERVAL,=CL2'30'     DEFAULT INTERVAL
PROCED   PACK  INTPACK(8),INTERVAL(2)
         CVB   4,INTPACK             INTERVAL AS BINARY
         XR    2,2
         LA    3,60                  60 IN REG PAIR 2 & 3
         DR    2,4                   DIVIDE 60 BY INTERVAL
         MVC   WTO1+8(50),MSG1
         LTR   2,2                   REMAINDER ZERO?
         BNZ   WTO1                  IF NOT INVALID INTERVAL VALUE
         MH    4,=H'6000'            CONVERT INTERVAL TO 1/100 SECONDS
         ST    4,INTBIN              INTERVAL IN BINARY
         OPEN  (DEVIN,(INPUT),OUTFILE,(OUTPUT))  OPEN FILES
         LA    3,VOLTAB              TABLE TO STORE RECORDS
NEXTVOL  GET   DEVIN                 GET NEXT DEVICE
         MVC   0(10,3),0(1)          MOVE THE ENTRY
         LA    3,10(3)               POINT TO NEXT
         B     NEXTVOL               READ NEXT ENTRY
ENDEVIN  MVC   0(10,3),ENDVLIST      END OF VOLUME LIST
         LA    15,CMDINIT            OPERATOR COMMAND INITIALIZATION
         BALR  14,15
NXTCOUNT TIME  BIN                   GET SYSTEM TIME AND DATE
         ST    1,DECDATE               STORE PACKED TIME
         UNPK  $LSTDATE(5),DECDATE+1(3) UNPACK DATE
         OI    $LSTDATE+4,X'F0'      GOOD SIGN
         SLR   2,2
         LR    3,0
         D     2,=F'100'             GET SECONDS
         ST    3,BINTIME
         CVD   3,DWORD
         UNPK  $LSTTIME(5),DWORD+5(3)  TIME IN BINARY
         OI    $LSTTIME+4,X'F0'
*  DYNAMICALLY ALLOCATE SYSPRINT AND SYSIN
PROCED1  LA    1,IDCPRINT            ALLOCATE SYSPRINT FOR IDCAMS
         DYNALLOC ,
         LTR   15,15                 DYNALLOC SUCCESSFUL
         BZ    PROCED2
         MVC   WTO1+8(50),MSG2
         B     WTO1                  DISPLAY MESSAGE
PROCED2  LA    1,IDCIN               ALLOCATE SYSIN FOR IDCAMS
         DYNALLOC ,
         LTR   15,15                 SUCCESSFUL ALLOCATION
         BZ    PROCED3
         MVC   WTO1+8(50),MSG3
         B     WTO1                  DISPLAY MESSAGE
*  WRITE COMMAND TO SYSIN AND LINK TO IDCAMS
PROCED3  LA    3,VOLTAB              VOLUME TABLE
         OPEN (SYSIN,OUTPUT)         OPEN COMMAND FILE
NEXTCMD  CLC   0(10,3),ENDVLIST      ALL VOLUMES OVER
         BE    CLSCMD                THEN NO MORE COMMAND
         MVC   VOLID(6),0(3)         MOVE VOLUME ID TO COMMAND FIELD
         MVC   UTYPE(4),6(3)         MOVE UNIT INTO VOLUME FIELD
         PUT   SYSIN,COMMAND         WRITE AN IDCAMS COMMAND
         LA    3,10(3)               POINT TO NEXT
         B     NEXTCMD               PROCESS NEXT COMMAND
CLSCMD   CLOSE SYSIN                 CLOSE IDCAMS INPUT FILE
         LINK  EP=IDCAMS,PARAM=(OPTIONS,DDNAMES),VL
         LTR   15,15                 IS IDCAMS SUCCESSFUL
         BZ    PROCESS               THEN PROCESS THE OUTPUT
         MVC   WTO1+8(50),MSG4
         B     WTO1                  DISPLAY MESSAGE
PROCESS  OPEN  SYSPRINT                     OUTPUT FILE OF IDCAMS
NXTLIST  BAL   10,REAMSPRT                  READ ONE RECORD
         CLC   RECORD+1(8),=CL8'LISTDATA'   IS IT LISTDATA COMMAND
         BNE   NXTLIST                      GET NEXT RECORD
         GET   SYSPRINT                     SKIP NEXT LINE
         BAL   10,REAMSPRT                  READ THE NEXT RECORD
NXTENTRY CLC   RECORD+20(4),=CL4'3990'      CONTROLLER TYPE 3990
         BNE   INVCONT                      NOT 3990 .. DISPLAY MESSAGE
         MVC   $CUTYPE,RECORD+20            CONTROLLER TYPE
         MVC   $CUMODEL,RECORD+48           C U MODEL
         GET   SYSPRINT                     SKIP NEXT LINE
         BAL   10,REAMSPRT                  AND READ NEXT RECORD
         MVC   $VOLUME,RECORD+27            SAVE THE VOLUME ID
         MVC   $DEVNO,RECORD+47             SAVE DEVICE NUMBER
         BAL   10,REAMSPRT                  READ NEXT REC
         MVC   $SSID,RECORD+40              SAVE SUB SYSTEM ID
         GET   SYSPRINT                     SKIP 4 RECORDS
         GET   SYSPRINT
         GET   SYSPRINT
         GET   SYSPRINT
         BAL   10,REAMSPRT                  READ NEXT REC
         OC    RECORD,ZEROS                 MAKE SPACES AS ZEROS
         MVC   $COUNTER,RECORD+18           READ  NORMAL - TOTAL
         MVC   $COUNTER+11,RECORD+30        READ  NORMAL - CACHE
         MVC   $COUNTER+22,RECORD+42        WRITE NORMAL - TOTAL
         MVC   $COUNTER+33,RECORD+54        WRITE NORMAL - DFW
         MVC   $COUNTER+44,RECORD+66        WRITE NORMAL - CACHE
         BAL   10,REAMSPRT                  READ NEXT REC
         OC    RECORD,ZEROS                 MAKE SPACES AS ZEROS
         MVC   $COUNTER+55,RECORD+18        READ  SEQ - TOTAL
         MVC   $COUNTER+66,RECORD+30        READ  SEQ - CACHE
         MVC   $COUNTER+77,RECORD+42        WRITE SEQ - TOTAL
         MVC   $COUNTER+88,RECORD+54        WRITE SEQ - DFW
         MVC   $COUNTER+99,RECORD+66        WRITE SEQ - CACHE
         BAL   10,REAMSPRT                  READ NEXT REC
         OC    RECORD,ZEROS                 MAKE SPACES AS ZEROS
         MVC   $COUNTER+110,RECORD+18       READ  CFW - TOTAL
         MVC   $COUNTER+121,RECORD+30       READ  CFW - CACHE
         MVC   $COUNTER+132,RECORD+42       WRITE CFW - TOTAL
         MVC   $COUNTER+143,RECORD+66       WRITE CFW - DFW
         GET   SYSPRINT                     SKIP 2 RECS
         GET   SYSPRINT
         BAL   10,REAMSPRT                  READ NEXT
         OC    RECORD,ZEROS                 CONVERT SPACES TO ZEROS
         MVC   $COUNTER+154,RECORD+34       INHIBIT CACHE LOADING
         BAL   10,REAMSPRT                  READ NEXT
         OC    RECORD,ZEROS                 CONVERT SPACES TO ZEROS
         MVC   $COUNTER+165,RECORD+34       BYPASS CACHE COUNT
         GET   SYSPRINT                     SKIP 1
         BAL   10,REAMSPRT                  READ NEXT
         OC    RECORD,ZEROS                 CONVERT SPACE TO ZEROS
         MVC   $COUNTER+176,RECORD+34       TRANSFER DASD-CACHE NORMAL
         MVC   $COUNTER+187,RECORD+47       TRANSFER CACHE-DASD NORMAL
         BAL   10,REAMSPRT                  READ NEXT
         OC    RECORD,ZEROS                 SPACES TO ZEROS
         MVC   $COUNTER+198,RECORD+34       TRANSFER DASD-CACHE SEQ
         BAL   10,REAMSPRT                  READ NEXT
         OC    RECORD,ZEROS                 SPACES TO ZEROS
         MVC   $COUNTER+209,RECORD+34       DASD FW RETRIES
*  ONE DEVICE ENTRY IS OVER .. PROCESS IT
ENTRYOVR LA    1,$LISTREC
         LA    15,WRITREC                   WRITE THE CURRENT RECORD
         BALR  14,15
SKIPLINE BAL   10,REAMSPRT                  READ NEXT REC
         CLC   RECORD(6),=CL6'IDCAMS'       HEADER LINE
         BNE   SKIPLINE                     IF NOT SKIP IT
         BAL   10,REAMSPRT                  READ NEXT
         CLC   RECORD(8),=CL8'IDC0001I'     ENTRIES FOR ONE CMD OVER
         BE    NXTLIST                      PROCESS NEXT LISTDATA CMD
         B     NXTENTRY                     PROCESS NEXT DEVICE
INVCONT  MVC   WTO2+20(40),RECORD+10        CONTROLLER TYPE
WTO2     WTO   'CACHECOL: - NO CACHE FOR THIS CONTROLLER',             X
               ROUTCDE=(1,10),DESC=(6)
         B     NXTLIST                      PROCESS OUTPUT OF NEXT CMD
ENDINPUT CLOSE SYSPRINT                     CLOSE THE LISTDATA OUTPUT
         LA    1,IDPRNTU
         DYNALLOC                           DEALLOCATE SYSPRINT
         LA    1,IDINU
         DYNALLOC                           DEALLOCATE SYSIN
         MVC   WTO1+8(50),MSG5              ALL OVER MESSAGE
         CLI   FINFLAG,C'Y'                 ALL PROCESSING OVER?
         BE    WTO1                         DISPLAY MESSAGE AND EXIT
WAIT     TIME  BIN                          GET SYSTEM TIME AND DATE
         SLR   2,2
         LR    3,0
         D     2,=F'360000'                 FIND HR AND SECONDS LEFT
         L     4,INTBIN                     INTERVAL LEFT FOR NEXT
CHK1     CR    2,4
         BNH   MATCH1                       LESS THAN INTERVAL
         SR    2,4
         B     CHK1
MATCH1   SR    4,2                         DIFFERENCE TO NEXT INTERVAL
WAIT1    C     4,TENSEC                    LESS THAN 10 SEC
         BNH   SETINT                      SET THE INTERVAL
         MVC   WAITINT,TENSEC              SET WAIT INTERVAL 10 SEC
         S     4,TENSEC                    REMAINING
         B     WAIT2
SETINT   ST    4,WAITINT
         SLR   4,4
WAIT2    STIMER WAIT,BINTVL=WAITINT        WAIT
         LTR   4,4                         REMAINING TIME ZERO
         BZ    NXTCOUNT                    THEN TAKE NEXT COUNT
         B     CHKCMND                     ELSE CHECK FOR OPERATOR CMD
*  SUBROUTINE  ; READ ONE RECORD FROM SYSPRINT
REAMSPRT GET   SYSPRINT                    READ A REC
         LR    2,1                         ADDRESS OF REC
         MVI   RECORD,C' '
         MVC   RECORD+1(120),RECORD        INITIALIZE WITH SPACES
         LH    3,0(2)                      LENGTH OF RECORD READ
         SH    3,=H'6'                     REDUCE LENGTH PART
         LA    2,5(2)                      ADDRESS OF DATA
         EX    3,MOVEREC                   MOVE RECORD INTO 'RECORD'
         BR    10                          RETURN
*  SUBROUTINE TO WRITE ONE INTERVAL RECORD
WRITREC  SAVE  (14,12)                    SAVE REGISTERS
         ST    13,SAVE2+4                 OLD SAVE AREA POINTER
         LA    13,SAVE2                   NEW SAVE AREA ADDRESS
         LR    3,1                        ADDRESS OF RECORD
         LA    4,SAVEREC                  ADDRESS OF SAVED RECORDS
         USING PVREC,4
         USING CUREC,3
CHKNEXT  CLC   PVVOLID,CUVOLID            VOLIDS MATCH
         BE    WRITREC1                   THEN WRITE A RECORD
         CLC   PVVOLID,=CL6' '            VOLID IS SPACE
         BE    ADDREC                     THEN ADD THIS RECORD
         LA    4,$RECLEN(4)               POINT TO NEXT RECORD
         B     CHKNEXT
ADDREC   MVC   PVREC($RECLEN),CUREC
         B     RET1
WRITREC1 MVC   OUDATE,PVDATE               DATE ON OUTPUT RECORD
         PACK  DWORD1(8),PVTIME            TIME IN BINARY
         CVB   5,DWORD1
         BAL   10,CONVERT                  CONVERT TO HHMMSS FORMAT
         MVC   OUTIME,CNVTIME              TIME IN OUTPUT RECORD
         PACK  DWORD1,CUTIME
         PACK  DWORD2,PVTIME
         CP    DWORD1,DWORD2
         BH    NORMAL
         AP    DWORD1,=PL8'86400'         ONE DAY
NORMAL   SP    DWORD1,DWORD2              HERE GET THE INTERVAL
         UNPK  OUINTRVL(4),DWORD1+5(3)    CONVERT TO DISPLAY
         OI    OUINTRVL+3,X'F0'           MAKE DISPLAY FORMAT
         MVC   OUCUTYP,CUCUTYP
         MVC   OUCUMDL,CUCUMDL
         MVC   OUVOLID,CUVOLID
         MVC   OUDEVNO,CUDEVNO
         MVC   OUSSID,CUSSID
         LA    5,CUCOUNT
         LA    6,PVCOUNT                 COUNTERS IN PREV RECORD
         LA    7,OUCOUNT                 COUNTER IN OUTPUT REC
         LA    8,20                      NUMBER OF COUNTERS
NEXTCNT  PACK  DWORD1(8),0(11,5)
         PACK  DWORD2(8),0(11,6)
         SP    DWORD1,DWORD2             DIFFERENCE BETWEEN CURR & PREV
         UNPK  0(11,7),DWORD1(8)         PUT IN OUTPUT RECORD
         OI    10(7),X'F0'               GIVE A GOOD SIGN
         LA    5,11(5)                   POINT TO NEXT ENTRIES
         LA    6,11(6)                           "
         LA    7,11(7)                           "
         BCT   8,NEXTCNT                 REPEAT 20 TIMES
         PUT   OUTFILE,OUREC             WRITE OUTPUT RECORD
         MVC   PVREC($RECLEN),CUREC      PREVIOUS = CURRENT
RET1     L     13,4(13)                  OLD SAVE ADDRESS
         RETURN (14,12),RC=0             DELETE AND RETURN
*  SUBROUTINE TO CONVERT TIME TO HHMMSS FORMAT  ...
CONVERT  STM   14,12,12(13)
         SLR   4,4
         D     4,=F'60'                   CONVERT MINUTES AND SECONDS
         LR    6,4
         SLR   4,4
         D     4,=F'60'                   CONVERT TO HOURS AND MINUTES
         CVD   5,DWORD1
         UNPK  CNVTIME(2),DWORD1          HOURS
         OI    CNVTIME+1,X'F0'
         CVD   4,DWORD1
         UNPK  CNVTIME+2(2),DWORD1        HOURS
         OI    CNVTIME+3,X'F0'
         CVD   6,DWORD1
         UNPK  CNVTIME+4(2),DWORD1        HOURS
         OI    CNVTIME+5,X'F0'
         LM    14,12,12(13)
         BR    10
WTO1     WTO   '                                                  ',   X
               ROUTCDE=(1,10),DESC=(6)
         L     13,4(13)
         RETURN (14,12),RC=0              RETURN TO OS
*  THIS SUBROUTINE INITIALIZES OPERATOR COMMAND PROCESSING
CMDINIT  CNOP  2,4
         STM   14,12,12(13)                SAVE REGISTERS
         ST    13,SAVE1+4
         LA    13,SAVE1
         EXTRACT COMM,'S',FIELDS=(COMM)    GET COMMAREA ADDRESS
         L     7,COMM                      ADDRESS OF COMM FIELDS
         L     8,0(7)                      CECB ADDR
         ST    8,COMMECB
         LA    9,4(7)                      ORIGIN ADDR FOR QEDIT
         ST    9,SAVEQ                     SAVE QEDIT BASE
         ICM   7,15,0(9)                   START CMD WAITING?
         BZ    BATCH                       NO THEN BATCH
         QEDIT ORIGIN=(9),BLOCK=(7)        FREE START COMMAND
BATCH    EQU   *
         QEDIT ORIGIN=(9),CIBCTR=10        ALLOW 10 STACKED CMDS
         L     13,4(13)
         LM    14,12,12(13)
         BR    14
COMM     DC    F'0'
COMMECB  DC    F'0'
SAVEQ    DC    F'0'
SAVE1    DS    18F                         SAVE AREA FOR THIS ROUTINE
*  HERE TO CHECK FOR OPERATOR COMMAND
*  ALL COMMANDS EXCEPT STOP ( P ) ARE IGNORED
CHKCMND  L     7,COMMECB                    LOAD ECB ADDRESS
         CLI   0(7),X'00'                   CHECK REQUEST
         BE    CONT2                        TO REQUEST CONTINUE
         L     9,SAVEQ                      LOAD QEDIT BASE
         L     8,0(9)                       CIB ADDRESS
         CLI   4(8),X'40'                   STOP COMMAND
         BNE   CONT3                        NO THEN IGNORE IT
         MVI   FINFLAG,C'Y'                 FINISH FLAG
         B     NXTCOUNT                     PROCESS THE LAST COUNTERS
CONT3    QEDIT ORIGIN=(9),BLOCK=(8)         FREE CIB
CONT2    B     WAIT
*  RECORD GENERATED BY "LISTDATA" COMMAND .
$LISTREC DS    0CL248
$LSTDATE DS    CL5                  DATE
$LSTTIME DS    CL5                  TIME
$CUTYPE  DS    CL4                  CONTROL UNIT TYPE
$CUMODEL DS    CL2                  CONTROL UNIT MODEL
$VOLUME  DS    CL6                  DASD VOLUME ID
$DEVNO   DS    CL2                  DEVICE NUMBER
$SSID    DS    CL4                  SUB SYSTEM ID
$COUNTER DS    20CL11               CACHE UTILIZATION COUNTERS
$RECLEN  EQU   *-$LSTDATE           RECORD LENGTH
SAVEAREA DS    18F
MOVEREC  MVC   RECORD(0),0(2)
RECORD   DS    CL121
ZEROS    DC    121C'0'
VOLTAB   DS    100CL10              MAXIMUM 100 ENTRIES PERMITTED
ENDVLIST DC    10X'FF'              END OF VOLUME LIST INDICATOR
*** IDCAMS COMMAND
COMMAND  DS    0CL80
         DC    CL24' LISTDATA COUNTS VOLUME('
VOLID    DC    CL6' '
         DC    CL7') UNIT('
UTYPE    DC    CL4' '
         DC    CL39') SUBSYSTEM'
MSG0     DC    CL50' CACHECOL: - INVALID INTERVAL PARAMETER SPECIFIED '
MSG1     DC    CL50' CACHECOL: - INVALID INTERVAL .. NOT FACTOR OF 60 '
MSG2     DC    CL50' CACHECOL: - DYNAMIC ALLOCATION ERROR FOR SYSPRINT'
MSG3     DC    CL50' CACHECOL: - DYNAMIC ALLOCATION ERROR FOR SYSIN   '
MSG4     DC    CL50' CACHECOL: - ERROR IN PROCESSING IDCAMS PROGRAM'
MSG5     DC    CL50' CACHECOL: - STOPPED BY OPERATOR REQUEST'
DEVIN    DCB   DDNAME=DEVIN,DSORG=PS,MACRF=GL,EODAD=ENDEVIN
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=GL,EODAD=ENDINPUT,       X
               RECFM=VBA,LRECL=125,BLKSIZE=629
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80,       X
               BLKSIZE=80
OUTFILE  DCB   DDNAME=OUTFILE,DSORG=PS,MACRF=PM
DWORD    DS    D
INTERVAL DS    CL2                  LENGTH OF INTERVAL .. MINUTES
         DC    0D
INTPACK  DC    PL8'00'              PACKED DECIMAL INTERVAL VALUE
INTBIN   DC    F'0'                 INTERVAL VALUE - BINARY
DECDATE  DC    XL4'00'
BINTIME  DC    F'0'
WAITINT  DS    F'0'                 INTERVAL FOR WAITING
TENSEC   DC    F'1000'              10 SECONDS IN 1/100
FINFLAG  DC    C'N'                 FINISH FLAG
OPTIONS  DC   H'0,0'
DDNAMES  DC   H'48'
         DC   32X'00'
         DC   CL8'SYSIN',CL8'SYSPRINT'
*** DYNAMIC ALLOCATION PARAMETER FOR SYSPRINT
IDCPRINT DC    AL1(X'80'),AL3(IDCPRNTA)
IDCPRNTA DC    AL1(20),AL1(S99VRBAL),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDCPRNTX),AL4(0),AL4(0)
IDCPRNTX DC    AL4(DDNM1)                 DDNAME
         DC    AL4(STAT1)
         DC    AL4(DISP1)
         DC    AL4(DISP2)
         DC    AL4(UNIT)
         DC    AL4(TRAX)
         DC    AL1(X'80'),AL3(SPC1)
** DYNAMIC ALLOCATION PARAMETER FOR SYSIN
IDCIN    DC    AL1(X'80'),AL3(IDCINA)
IDCINA   DC    AL1(20),AL1(S99VRBAL),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDCINX),AL4(0),AL4(0)
IDCINX   DC    AL4(DDNM2)               DDNAME
         DC    AL4(STAT1)
         DC    AL4(DISP1)
         DC    AL4(DISP2)
         DC    AL4(UNIT)
         DC    AL4(TRAX)
         DC    AL1(X'80'),AL3(SPC2)
*** DYNAMIC ALLOCATION TEXT UNTIS
DDNM1    DC    AL2(DALDDNAM),AL2(1),AL2(8),CL8'SYSPRINT'
DDNM2    DC    AL2(DALDDNAM),AL2(1),AL2(5),CL8'SYSIN'
STAT1    DC    AL2(DALSTATS),AL2(1),AL2(1),X'04'
DISP1    DC    AL2(DALNDISP),AL2(1),AL2(1),X'04'
DISP2    DC    AL2(DALCDISP),AL2(1),AL2(1),X'04'
UNIT     DC    AL2(DALUNIT),AL2(1),AL2(8),C'SYSALLDA'
TRAX     DC    AL2(DALTRK),AL2(0)
SPC1     DC    AL2(DALPRIME),AL2(1),AL2(3),X'000001'
SPC2     DC    AL2(DALPRIME),AL2(1),AL2(3),X'000001'
*** DYNAMIC DEALLOCATION PARAMETER FOR SYSPRINT
IDPRNTU  DC    AL1(X'80'),AL3(IDPRNTUA)
IDPRNTUA DC    AL1(20),AL1(S99VRBUN),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDPRNTUX),AL4(0),AL4(0)
IDPRNTUX DC    AL4(DDNMU1)                 DDNAME
         DC    AL1(X'80'),AL3(DISPU1)
** DYNAMIC DEALLOCATION PARAMETER FOR SYSIN
IDINU    DC    AL1(X'80'),AL3(IDINUA)
IDINUA   DC    AL1(20),AL1(S99VRBUN),AL1(0),AL1(0)
         DC    AL2(0),AL2(0),AL4(IDINUX),AL4(0),AL4(0)
IDINUX   DC    AL4(DDNMU2)               DDNAME
         DC    AL1(X'80'),AL3(DISPU1)
** DYNAMIC DEALLOCATION TEXT UNITS
DDNMU1   DC    AL2(DUNDDNAM),AL2(1),AL2(8),CL8'SYSPRINT'
DDNMU2   DC    AL2(DUNDDNAM),AL2(1),AL2(5),CL5'SYSIN'
DISPU1   DC    AL2(DUNOVDSP),AL2(1),AL2(1),X'04'
SAVE2    DS   18F
DWORD1   DS    D
DWORD2   DS    D
CNVTIME  DS    CL6
HIGHVAL  DC    6X'FF'
         DS    0F
OUREC    DS    0CL253               OUTPUT RECORD
OUDATE   DS    CL5                  DATE IN YYDDD
OUTIME   DS    CL6                  TIME IN HHMMSS
OUINTRVL DS    CL4                  INTERVAL IN SECONDS
OUCUTYP  DS    CL4                  CONTROL UNIT TYPE
OUCUMDL  DS    CL2                  CONTROL UNIT MODEL
OUVOLID  DS    CL6                  DASD VOLUME ID
OUDEVNO  DS    CL2                  DEVICE NUMBER
OUSSID   DS    CL4                  SUB SYSTEM ID
OUCOUNT  DS    20CL11               COUNTERS
         LTORG
SAVEREC  DC    100CL248' '
CUREC    DSECT                      CURRENT RECORD
CUDATE   DS    CL5                  DATE
CUTIME   DS    CL5                  TIME
CUCUTYP  DS    CL4                  CONTROL UNIT TYPE
CUCUMDL  DS    CL2                  CONTROL UNIT MODEL
CUVOLID  DS    CL6                  DASD VOLUME ID
CUDEVNO  DS    CL2                  DEVICE NUMBER
CUSSID   DS    CL4                  SUB SYSTEM ID
CUCOUNT  DS    20CL11               COUNTERS
PVREC    DSECT                      PREVIOUS RECORD
PVDATE   DS    CL5                  DATE
PVTIME   DS    CL5                  TIME
PVCUTYP  DS    CL4                  CONTROL UNIT TYPE
PVCUMDL  DS    CL2                  CONTROL UNIT MODEL
PVVOLID  DS    CL6                  DASD VOLUME ID
PVDEVNO  DS    CL2                  DEVICE NUMBER
PVSSID   DS    CL4                  SUB SYSTEM ID
PVCOUNT  DS    20CL11               COUNTERS
         IEFZB4D0
         IEFZB4D2
         END

This article will be concluded next month with the publication
of the source code for CACHEREP.

M V George and S K Nambiar
Systems Programmers
Qatar Ministry of Interior (Qatar)                         c Xephon 1992

