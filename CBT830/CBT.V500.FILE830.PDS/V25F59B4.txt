ISPF ISPCMDS manipulation and usage

The ISPF STAK program (MVS Update, Issue 41, Page 11)
inspired me to set up the program for our installation.  While
doing this I ran into a couple of problems and discovered a few
helpful tips.

Firstly, I found that no matter what I did, I could not guarantee
the integrity of the STAKLVL1 and STAKLVL2 variables
owing to several ISPF applications (eg SMP/E, Info/Sys etc)
using the NEWAPPL parameter.  This meant that most users
did not use these variables and they became redundant.  I
would be interested to find out if any installation has been able
to overcome this problem.

If I did not have to support the STAKLVL1 and STAKLVL2
variables, it seemed to me that I did not really require the
STAK program to supply the stacking facility.  All that is
required is an entry in the ISPCMDS member specifying a
command name of STAK with a command of:

      SELECT PANEL(ISR@PRIM) OPT(&ZPARM) NEWAPPL(ISR)

This allows a user to enter a command such as 'STAK 4.9' or
'STAK 8;DA OTSU' in the command field of an ISPF
application and have the requested ISPF selection stacked on
top of the current selection.  If you specify 'STAK' without
any operands you will get the ISPF primary panel (in our case
ISR@PRIM), which was specified in the SELECT PANEL
command above.

To exit from a stacked selection, a user simply specifies
PF3/15 or the ISPF '=X' command.  This facility is now used
widely throughout the installation.  I believe that the
STAKLVL variables would be particularly helpful if I could
guarantee their integrity.

Secondly, many of our users set up their own copy of
ISPCMDS so that they can create tailor-made ISPF commands.
We allow users to allocate their own ISPTLIB dataset (ISPF
input table dataset) to hold private ISPF tables and provide an
installation-specified ISPTABL (ISPF output table dataset) so
that locally-written dialogues which create output tables can be
used throughout the installation.

Because the ISPUCM program (the IBM utility to update
ISPCMDS) uses the DDNAMEs ISPTLIB as input and
ISPTABL as output, users are given the ability to create a
personalized ISPCMDS member in ISPTABL which is then
renamed and moved to their own ISPTLIB dataset for later use.
This member can be updated and reloaded without getting out
of ISPF provided the user is not in split-screen mode.  The
installation must ensure that the user's ISPTLIB appears before
any other dataset containing an ISPCMDS member in the
user's ISPTLIB DD concatenation.

Two CLISTs are provided to perform the update and the
reload.  They are:

o      UPDTC - used to update the ISPCMDS member.

o      RELOAD - used to reload the new ISPCMDS member dynamically.


UPDTC

ISPEXEC  LMINIT    DATAID(ID1)  DATASET('Installation.ISPTABL')
ISPEXEC  LMINIT    DATAID(ID2)  DATASET('Users.ISPTLIB')
ISPEXEC  LMCOPY    FROMID(&ID2) FROMMEM(ISPCMDS) +
                   TODATAID(&ID1) TOMEM(&SYSUID.CMDS) +
                   REPLACE
ISPEXEC  SELECT    PGM(ISPUCM)  PARM(&SYSUID)
ISPEXEC  TBOPEN    &SYSUID.CMDS LIBRARY(ISPTABL) WRITE
ISPEXEC  TBSORT    &SYSUID.CMDS FIELDS(ZCTVERB C,A)
ISPEXEC  TBSAVE    &SYSUID.CMDS LIBRARY(ISPTABL)
ISPEXEC  TBEND     &SYSUID.CMDS
ISPEXEC  LMMOVE    FROMID(&ID1) FROMMEM(&SYSUID.CMDS) +
                   TODATAID(&ID2) TOMEM(ISPCMDS)  +
                   REPLACE
ISPEXEC  LMFREE    DATAID(&ID1)
ISPEXEC  LMFREE    DATAID(&ID2)


RELOAD

ISPEXEC VGET (ZSPLIT) ASIS
IF  &ZSPLIT = YES  THEN +
  DO
    ISPEXEC  SETMSG MSG(RLDM002) COND
    EXIT
  END
ISPEXEC TBEND  ISPCMDS
ISPEXEC TBOPEN ISPCMDS NOWRITE SHARE
ISPEXEC SETMSG MSG(RLDM003) COND

The messages specified are :

RLDM002 'SCREEN IS SPLIT MODE'
'RLDM002 ISPCMDS CANNOT BE RELOADED WHILE IN SPLIT SCREEN MODE.'

RLDM003 'ISPCMDS RELOADED'
'RLDM003 THE ISPCMDS MEMBER IN ISPTLIB HAS BEEN RELOADED.            '

I deliberately use two CLISTs to perform the update and the
reload rather than doing this as one activity in case the user
does not want to reload the ISPCMDS member immediately,
but I can't think of any reason why this could not be performed
in a single CLIST.

The UPDTC and RELOAD CLISTs can also be set up as ISPF commands by specifying tw
member of the form:

      UPDTC 0 SELECT CMD(%UPDTC)
      RELOAD 0 SELECT CMD(%RELOAD)

and placing the two CLISTs in a dataset in the SYSPROC
concatenation.  I am sure most sites could quickly think of
several applications that could be set up as ISPF commands.

David McGeorge
Consultant Systems Programmer (Australia)            c David McGeorge 1991

