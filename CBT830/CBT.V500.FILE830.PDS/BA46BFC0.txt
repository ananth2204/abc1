Centering or right-adjusting print lines

Few applications programmers write in Assembler these days, but there are still
plenty of reports printed by Assembler programs.  From the quick-and-dirty
utility to the complex DASD space manager - every program prints some kind of
report to tell you what it did.

Centered or right-adjusted headings can make these reports much more readable,
but they are seldom used, because system programmers don't like spending a lot
of time making their reports clear.

With the ADJUST macro, making centered or right-adjusted print lines is easy.

The macro is called like this:

label     ADJUST addr,len,TYPE=type

*    label is an optional label for the first generated instruction.

*    addr is the address of the print line.  It can be any label that would be
valid as the operand of an LA instruction, or it can be a register (0, or 2-15),
enclosed in parentheses.

*    len is the length of the print line.  It can be any value that would be
valid as the operand of an LA instruction, or it can be a register (1-15),
enclosed in parentheses.

*    type is the type of adjustment desired:  RIGHT for right adjustment, or
CENTER for centering.

The data to be adjusted is assumed to start at addr, with no leading blanks, and
to be padded with blanks to length  len.

The macro destroys registers 0, 1, 14, and 15.

Here is an example of using the ADJUST macro to centre a heading:

         MVI   PRTLINE,C' '              BLANK OUT THE LINE
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE   ...
         MVC   PRTLINE(11),=CL11'DASD REPORT'  MOVE HEADING
         ADJUST  PRTLINE,L'PRTLINE,TYPE=CENTER   CENTER IT
         .
PRTLINE  DS    CL80                       PRINT LINE


SOURCE CODE FOR THE ADJUST MACRO

         MACRO
&LABEL   ADJUST  &ADDR,&LEN,&TYPE=CENTER
         LCLC  &STR                WORK VARIABLE
         LCLC  &NDX                SHORT FORM OF &SYSNDX
&NDX     SETC  '&SYSNDX'           ...
         AIF   ('&TYPE' EQ 'CENTER' OR '&TYPE' EQ 'RIGHT').OKTYPE
         MNOTE 8,'ADJUST: TYPE MUST BE ''CENTER'' OR ''RIGHT'''
         MEXIT
.OKTYPE  ANOP
         AIF   ('&ADDR'(1,1) EQ '(').RADDR
&LABEL   LA    R0,&ADDR            GET STRING ADDRESS
         AGO   .OKADDR
.RADDR   ANOP
&STR     SETC  '&ADDR'(2,K'&ADDR-2)
&LABEL   LR    R0,&STR  GET STRING ADDRESS
.OKADDR  ANOP
         AIF   ('&LEN'(1,1) EQ '(').RLEN
         LA    R1,&LEN             GET STRING LENGTH
         AGO   .OKLEN
.RLEN    ANOP
&STR     SETC  '&LEN'(2,K'&LEN-2)
         LR    R1,&STR  GET STRING LENGTH
.OKLEN   ANOP
*   FIND THE REAL END OF THE STRING
         AR    R1,R0               POINT TO THE LAST CHAR OF STRING
         BCTR  R1,0                ...
         LR    R15,R1              GET WORKING COPY OF ADDR
LP1&NDX  CR    R15,R0              BACK AT THE BEGINNING?
         BL    DONE&NDX            YES...STRING IS ALL BLANK
         CLI   0(R15),C' '         IS THIS CHARACTER BLANK?
         BNE   LN1&NDX             NO...REAL END OF STRING
         BCTR  R15,0               YES...BACK UP ONE
         B     LP1&NDX             AND TRY AGAIN
LN1&NDX  CR    R15,R1              SAME AS END OF STRING?
         BNL   DONE&NDX            YES...NO TRAILING BLANKS
         AIF   ('&TYPE' NE 'CENTER').NOCENT
.*   ADJUST NEW END FOR CENTERING
         LA    R14,1(R1)           FIGURE LENGTH OF TRAILING BLANKS
         SR    R14,R15             ...
         SRL   R14,1               DIVIDE BY TWO
         SR    R1,R14              ADJUST NEW END
.NOCENT  ANOP
*   COPY THE STRING, RIGHT TO LEFT, TO ITS NEW POSITION
LP2&NDX  CR    R15,R0              BACK AT THE BEGINNING?
         BL    LN2&NDX             YES...STOP COPYING
         MVC   0(1,R1),0(R15)      MOVE ONE CHARACTER
         BCTR  R15,0               BACK UP ONE INPUT CHARACTER
         BCTR  R1,0                BACK UP ONE OUTPUT CHARACTER
         B     LP2&NDX             DO IT AGAIN
*   INSERT LEADING BLANKS IN STRING
LN2&NDX  SR    R1,R15              R1 = NUMBER OF LEADING BLANKS
         BNP   DONE&NDX            IF NONE, WE'RE ALL DONE
         LR    R15,R0              R15 = ADDR OF START OF STRING
         MVI   0(R15),C' '         INSERT FIRST BLANK
         BCTR  R1,0                DEDUCT FIRST BLANK FROM LENGTH
         BCTR  R1,0                DECREMENT LENGTH FOR EX
         LTR   R1,R1               ANY BLANKS LEFT?
         BM    DONE&NDX            NO MORE...WE'RE ALL DONE
MVC&NDX  MVC   1(*-*,R15),0(R15)   *** EXECUTED INSTRUCTION ***
         EX    R1,MVC&NDX          RIPPLE IN OTHER BLANKS
DONE&NDX DS    0H                  ALL DONE
         MEND


Lynn Grant
Technical Consultant (USA)    â‚¬ Xephon 1987



















