Getting the most from the JES2 offload facility

At some point in the life of an organization, there comes a time
when the processing of printed output comes under review.  In
our case, we have many remote destinations that receive output
directly while, in addition, a large amount of output is printed,
split, sorted, and dispatched from the mainframe.  Mostly,
output distribution packages deal with some or all of the three
following areas:

1      The bundling of output

2      The on-line viewing of output

3      Output archiving and retrieval.

This article deals with the third category, archiving and
retrieval.

IBM provides an offload facility in JES2.  This was
substantially enhanced at about level 1.3.6.  The current
problem with it is its inflexibility in that it does not allow you
to allocate a dataset as other than DISP=(OLD,CATLG) or
DISP=(NEW,CATLG) (it will attempt to allocate a new one if
there is not one catalogued).  This implies that every time you
start the offload transmitter, you need a new dataset for it to
use.  You may wish to stop and start the offload transmitter
several times in the day (to recover a piece of output you have
offloaded), or JES2 may fail, or you may IPL during the day.
With the proliferation of offload datasets created by such a
scheme, it becomes tiresome to track down which offload
dataset actually has the piece of output on it that you wish to
retrieve.

It would be nice to have the ability to open the offload dataset
with DISP=MOD so that, for example, you could have one big
offload dataset per day .  Then, on a daily basis, by automatic
command, you could at a nominated time stop the offloader,
back up the offload dataset for that day, delete and re-define
the offload dataset ready for the new day, and then start it up
again.

The two obstacles to this are:

1      JES2 does not support DISP=MOD allocation of an offload
      dataset.

2      JES2 insists on writing a timestamp to the offload dataset
      so that even if you attempt to append your offload datasets
      on to the end of a 'common' dataset, you are unable to
      retrieve output from beyond the point of the first offload
      transmission stop.  This is because the 'offload receiver'
      processing checks the timestamps.

If you do try to receive output from past the point where the
offload transmitter was first stopped, you will get the message
'$HASP590'.  I have been unable to discover a reasonable
purpose for these timestamps.

Research revealed that a fairly minor USERMOD to JES2
would make it behave in a more sensible way.  The lines
beginning with '>>>' are my comments to assist in locating the
lines in the source code.  They do not exist in my version of
the USERMOD.  You may need to change the sequence
numbers in columns 73-80 of the USERMOD so that when it is
applied it fits into the source code correctly.  The supplied
numbers are correct for my level.

//Jobname  JOB (Account),'T.S.G',MSGCLASS=X,
//   CLASS=D,MSGLEVEL=(1,1)
//SMPE    EXEC SMPE
//SMPPTFIN DD *
++USERMOD(OFFLOD1).   /*
       THIS USERMOD MAKES THE TIMESTAMP ZEROES AND ALTERS
       THE DISP STATUS OF THE OFFLOAD TRANSMITTER DATASET
       WHEN IT IS OPENED, FROM OLD TO MOD, TO ALLOW FOR THE
       OFFLOAD TRANSMITTER TO BE STOPPED AND RESTARTED.    */
++VER(Z038) FMID(HJE2215) PRE(UY01248,UY03923,UZ49900,UZ82298) .
++SRCUPD(HASPSTAM).
./ CHANGE NAME=HASPSTAM
>>>      Locate the SDSNCHK label and about 25 lines
>>>      down, there is the instruction TIME  BIN (line 21190000 in my case)
>>>      REPLACE the STM (line 21200000) with these 4 lines.
* SCS UMOD TO ALTER THE TIMESTAMP TO $ZEROES                   OFFLOD1 21200000
***      STM   R0,R1,XDCTTIME        DONT STORE IN OFFLOAD DCT OFFLOD1 21203000
         MVC   XDCTTIME(8),$ZEROES   ZERO OUT THE TIMESTAMP    OFFLOD1 21205000
* END UMOD TO ALTER THE TIMESTAMP TO $ZEROES                   OFFLOD1 21208000
>>>      Locate the SBTOPEN label and about 20 lines
>>>      down, (just above the DYNALLOC) there is the instruction
>>>      LA    R1,DOFDAST (line 27020000 in my case)
>>>      REPLACE the SPACE 1 (line 27030000) with these 10 lines.
* SCS UMOD TO ALTER THE DISP OF THE OFFLOAD TRANSMITTER TO MOD OFFLOD1 27021000
         SPACE 1                                               OFFLOD1 27030000
         TM    XDCTFLG1,XDCT1DMP     BRANCH IF THIS IS NOT     OFFLOD1 27031000
         BNO   UMODEXIT                A TRANSMITTER           OFFLOD1 27032000
         MVI   DOFDADSP,X'02'       CHANGE FROM OLD TO MOD     OFFLOD1 27033000
         MVI   DOFDATU5+6,X'08'     CHANGE FROM CATLG TO KEEP  OFFLOD1 27034000
         SPACE 1                                               OFFLOD1 27035000
UMODEXIT EQU   *                                               OFFLOD1 27036000
         SPACE 1                                               OFFLOD1 27037000
*** END OF SCS UMOD                                   ***      OFFLOD1 27038000
//SMPCNTL  DD  *
  SET      BDY(GLOBAL) .
  RECEIVE  S(OFFLOD1) SYSMODS.
  SET      BDY(MVSZONE) .
  APPLY    S(OFFLOD1).

We have had this running in our MVS/XA 2.1.7 JES2 2.1.5
environment for about a year.  We have one offload transmitter
set up to catch all non-held output.  It should be noted that the
offloader will not offload output that has been selected for
printing.  Therefore, if the offloader is busy with a large job
(like a dump) and a small job finishes and its output is selected
for printing before the large job has finished offloading, the
small job will not make it to the offloader.

Normally, the offloader would run all day, but the operator is
free to stop it at any time and retrieve output from it.  We have
a second offloader set up that is dedicated to receiving output
from any one of our seven offload back-up datasets (we keep
our output for a week).  Our first offloader need only be
stopped for recovery of output offloaded today.  At 7.30 am,
an automatic command goes off to stop the first offloader, back
up its contents to the corresponding day's offload back-up
dataset, delete and re-define the offload dataset, and start
offload transmission again.

There is a small exposure here too as it is possible for a job to
finish and be selected for printing within this timeframe.  We
have a double capacity 3380 dedicated to these offload
datasets.

Obviously it is up to the individual site to decide how best to
implement the offload back-up and retrieval functions.  This
USERMOD provided us with a viable alternative to spending
many thousands of dollars on a third-party package.


Ted Smith
Supervisor, Technical Support Group
Security Computer Services (Australia)                  c Xephon 1990

