Keeping PF key definitions after IOGEN

INTRODUCTION

A very inconvenient effect of an IOGEN is that PF keys, previously
defined on one of the MVS consoles, are lost.  Therefore, after the IPL
they have to be resupplied.

However, there are some easy ways to circumvent the problem.  It so
happens that, for every console defined in the IOGEN stage one input
deck, a module is created, containing the default PF key content as
defined by IBM.  These modules are read at IPL time, so that the values
are available.

But how are these values saved across IPLs?  Whenever a PF key is
changed, the module is changed in place (the length of the module is
fixed!).  These modules are located in a dedicated library called
SYS1.DCMLIB.  They are named IEEPKnnn, where nnn is the console device
number for MVS/XA users or the device address for MVS/370 users.  So
every IOGEN stage two replaces or adds the modules for the consoles that
were defined.  It does not however delete modules from earlier IOGENs
that are not applicable anymore.

Now let's look at the ways to put your own values in these modules.
There are three basic methods available.

METHOD ONE

Have the right values generated for stage two.  This solution requires a
modification to the macro that punches the stage two job stream.  This
macro is SGIEA2D2, which can be found in SYS1.AGENLIB.  The following
job changes the definitions in this macro.  It should be implemented as
a USERMOD.

//jobname  JOB(account),'name',CLASS=X,NOTIFY=your-userid
//STEP     EXEC PGM=IEBUPDTE
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD DISP=SHR,DSN=SYS1.AGENLIB
//SYSUT2   DD DISP=SHR,DSN=SYS1.AGENLIB
//SYSIN    DD DATA
./CHANGE NAME=SGIEA2D2
&PFKDEF(1) SETC  'your definition for key 1'                        14465500
&PFKDEF(2) SETC  'your definition for key 2'                        14468600
&PFKDEF(3) SETC  'your definition for key 3'                        14471700
&PFKDEF(4) SETC  'your definition for key 4'                        14474800
&PFKDEF(5) SETC  'your definition for key 5'                        14477900
&PFKDEF(6) SETC  'your definition for key 6'                        14481000
&PFKDEF(7) SETC  'your definition for key 7'                        14484100
&PFKDEF(8) SETC  'your definition for key 8'                        14487200
&PFKDEF(9) SETC  'your definition for key 9'                        14490300
&PFKDEF(10)SETC  'your definition for key 10'                       14490310
&PFKDEF(11)SETC  'your definition for key 11'                       14490320
           etc
&PFKDEF(24)SETC  'your definition for key 24'                       14490450
&PRKDEF#   SETA 24                                                  14493400
/*

METHOD TWO

Another way is to replace the modules by locally adapted modules.  This
can be accomplished by executing the following job stream for each
console that was defined (or only for the consoles actually used).
Remember to replace the module and CSECT name before executing.  This
method has the advantage of supplying different values for the various
consoles; the disadvantage is that the jobs need to be executed after
every IOGEN: the first method generated the desired values
automatically.

//jobname   JOB  (account),'name',CLASS=X,NOTIFY=your-userid
//ASM      EXEC ASMS,OBJ=OBJPDS03,MOD=IEEPKnnn
//SYSIN     DD   *
IEEPKnnn   CSECT
           DC  A(KEY)
           DC  XL10'0'
KEY        DC  AL2(ENDPFK-IEEPKnnn)
           DC  H'0'
           DC  FL1'1'
           DC  X'80'
           DC  CL108'your value for PFKey 1'
           DC  FL1'2'
           DC  X'80'
           DC  CL108'your value for PFKey 2
           DC  FL1'3'
           DC  X'80'
           DC  CL108'your value for PFKey 3'
        etc
           DC  FL1'24'
           DC  X'80'
           DC  CL108'your value for PFKey 24'
           DC  FL1'100'
           DC  0D
ENDPFK     EQU *
           END
/*

METHOD THREE

A third method guarantees an up-to-date PF key setting after the IOGENed
system is IPLed.  Just before the old system is stopped, the contents of
SYS1.DCMLIB are copied from the MVS resident to the MVS target value.
This method will require re-names to be executed if the console
configuration changes.

CONCLUSION

A general remark is that, before an IOGEN is executed, it is advisable
to delete all members in SYS1.DCMLIB and to compress the library.
Otherwise, obsolete modules, for consoles not generated again, will
occupy space in the library.

M Van den Wyngaert and R Sas
Systems Engineers
Janssen Pharmaceutica NV (Belgium) â‚¬ Xephon 1988








































