{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011557000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE248.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE248.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0c\\x0b'", "DS1TRBAL": "b'h '"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xb9\\x00\\t\\x01\\xba\\x00\\x06\\x00\\r'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x15o\\x00\\x95)\\x0f\\x12@\\x00\\x8b\\x00\\x87\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-10-17T12:40:00", "lines": 139, "newlines": 135, "modlines": 0, "user": "AMDAHL"}, "text": "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   DISCLAIMER   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nNONE OF THE PROGRAMS, ROUTINES, AND MACROS IN THIS DATASET ARE\nGUARANTEED TO WORK OR BE \"SAFE\". AS WITH ANY PUBLIC DOMAIN SOFTWARE IT\nIS THE RESPONSIBILITY OF THE RECEIVING INSTALLATION TO TEST THE\nSOFTWARE BEFORE RUNNING IT ON THEIR PRODUCTION SYSTEMS. IT MAY CRASH\nYOUR SYSTEM, AND IF IT DOES, AMDAHL FEDERAL SERVICE CORPORATION HAS NO\nRESPONSIBILITY.  INSTALL THIS SOFTWARE ON YOUR SYSTEM AT YOUR OWN\nRISK. ALSO, AMDAHL FEDERAL SERVICE CORPORATION DOES NOT GUARANTEE TO FIX ANY\nOF THESE PROGRAMS OR UPGRADE THEM WHEN THEY BECOME OBSOLETE.\n\nI WILL, HOWEVER, ACCEPT SUGGESTIONS FOR IMPROVEMENTS AND ANSWER\nQUESTIONS ABOUT THESE PROGRAMS. A PROMPT REPLY, THE CORRECT ANSWER, OR\nTIMELY IMPROVEMENTS ARE NOT GUARANTEED. IF THERE ARE MISSING PARTS TO\nTHESE PROGRAMS, I WILL TRY TO FORWARD THE MACROS OR ROUTINES TO THE CBT\nTAPE, HOWEVER I DO NOT GUARANTEE TO DO THIS IN A TIMELY MANNER.\nALSO, JUST BECAUSE THESE ROUTINES ARE ON THE CBT TAPE, I AM NOT\nAVAILABLE FOR \"DEMAND\" SUPPORT.  YOU MAY CONTACT ME, BUT I DO NOT\nGUARANTEE A CORRECT AND PROMPT ANSWER TO YOUR PROBLEM, AGAIN, YOU ARE\nON YOUR OWN!!!!!!!!!!!!!\n\nCONTACT:  JIM BOYSEN, SR. SYSTEMS ENGINEER\n          AMDAHL FEDERAL SERVICE CORPORATION\n          12020 SUNRISE VALLEY DRIVE\n          SUITE 380\n          RESTON VA 22091\n\n          (309) 793-1369 OR (309) 782-8334\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! NOTE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!  ALL COMMANDS AND PROGRAMS HAVE BEEN TESTED AT SP2.2.3 AS THOROUGH AS  !!!!\n!!!!  POSSIBLE, BUT NOTHING IS GUARANTEED, THEY WILL PROVIDED EXCELLENT     !!!!\n!!!!  EXAMPLES OF HOW TO DO SOME OF THIS STUFF, AND WILL (HOPEFULLY) WORK   !!!!\n!!!!  IN AN ESA ENVIRONMENT WITH LITTLE OR NO MODIFICATION .                !!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nCPUINFO       SOURCE CODE FOR DISPLAYING VARIOUS SYSTEM CONTROL BLOCK INFO AT\n              USERS TSO TERMINAL.  SEE CODE DOC FOR FURTHER DETAILS.\n\nCPUINFO$      JCL TO ASSEMBLE/LINK CPUINFO\n\nCPUINFO#      HELP FOR CPUINFO COMMAND\n\nGTEDAALC      DYNAMIC ALLOCATION MACRO FROM CHUCK HOFFMAN OF GTE LAB\n              FROM CBT TAPE USED BY VARIOUS PROGRAMS\n\nGTEDADAT      DYNAMIC ALLOCATION MACRO FROM CHUCK HOFFMAN OF GTE LAB\n              FROM CBT TAPE USED BY VARIOUS PROGRAMS\n\nGTEDADOC      DOCUMENTATION FOR THE GTE DYNAMIC ALLOCATION MACROS\n\nGTEDASET      DYNAMIC ALLOCATION MACRO FROM CHUCK HOFFMAN OF GTE LAB\n              FROM CBT TAPE USED BY VARIOUS PROGRAMS\n\nIEFUTL        ALLOW TSO SESSIONS TO BE DISCONNECTED AND THEN 622\n              CANCEL ONCE DISCONNECT LIMIT HAS BEEN EXCEEDED.\n              EXTEND JOB TIME FOR 20 MINUTE INCREMENTS AND ISSUE\n              MESSAGE TO NOTIFY USER/OPERATOR OF THIS EXTENSION.\n              THE TSO DISCONNECT WORKS WITH MULTIPLE SESSION MANAGERS\n              BECAUSE IT DISCONNECTS THE LU AND NOT THE TERMINAL ID WHICH\n              CAN BE A BAD THING UNDER A MULTIPLE SESSION MANAGER.\n\nIEFUTL$       JCL TO ASSEMBLE/LINK IEFUTL\n\nLCICS         LIST DATASETS ALLOCATED TO CICS DDNAME DFHRPL\n              OR IF LOAD MODULE SPECIFIED, SEARCH THROUGH THE\n              DATASETS FOR THE LOAD MODULE AND DISPLAY DATASET(S)\n              WHERE FOUND.  CALLS LCICSXM TO OBTAIN TIOT AND DSNS\n              FROM SECONDARY ADDRESS SPACE (CICS).  COMMAND NAME MUST\n              BE PUT IN IKJTSO00 AS AUTH CMD.\n\nLCICS$        JCL TO ASSEMBLE/LINK LCICS\n\nLCICS#        HELP FOR LCICS\n\nLCICSXM       SUB PROGRAM TO HANDLE CROSS MEMORY ACCESS TO CICS ADDRESS\n              SPACE.\n\nLCICSXM$      JCL TO ASSEMBLE/LINK LCICSXM\n\nLISTV         LIST VOLUME INFORMATION.  ORIGINAL CODE FROM EARLIER CBT\n              TAPE ? WITH MODIFICATIONS TO SHOW DEVICE STATUS ( STORAGE,\n              PRIVATE, PUBLIC) AND DEVICE TYPE (3380,3390-2,3390-3).\n\nLISTV$        JCL TO ASSEMBLE/LINK LISTV\n\nLISTV#        HELP MEMBER FOR LISTV\n\nLLIST         DISPLAY LINKLIST AND LPA DATASETS OF THE ACTIVE SYSTEM, AND\n              IF LOAD MODULE IS SPECIFIED, SEARCH STEPLIB, LINKLIST AND LPA\n              FOR MODULE AND REPORT IF FOUND AND WHERE FOUND.  LISTS ALL\n              LIBRARIES WHERE MODULE IS FOUND.\n\nLLIST$        JCL TO ASSEMBLE/LINK LLIST\n\nLLIST#        HELP FOR LLIST\n\nLOOKDD        SEACH THROUGH SPECIFIED DDNAME FOR SPECIFIED MEMBER AND REPORT\n              IF FOUND WHAT DSNS IN CONCATENATION CONTAIN MEMBER.  VERU USEFUL\n              IN ISPF DEBUGGING AND DEVELOPMENT AS WELL AS SEARCHING FOR\n              CLISTS/REXX IN DEVELOPEMTN AND DEBUGGING.\n\nLOOKDD$       JCL TO ASSEMBLE/LINK LOOKDD\n\nLOOKDD#       HELP FOR LOOKDD\n\nLPROC         LIST DATASETS ALLOCATED TO JES2 PROCLIB CONCATENATIONS, OR IF\n              SPECIFIED, SEARCH THROUGH CONCATENATION FOR SPECIFIED MEMBER\n              AND REPORT DATASET(S) WHERE PROC IS FOUND.  COMMAND NAME MUST\n              BE PUT IN IKJTSO00 AS AUTH CMD\n\nLPROC$        JCL TO ASSEMBLE/LINK LPROC\n\nLPROC#        HELP FOR LPROC\n\nLPROCXM       SUB PROGRAM TO HANDLE CROSS MEMORY ACCESS TO JES2 ADDRESS\n              SPACE.\n\nLPROCXM$      JCL TO ASSEMBLE/LINK LPROCXM\n\nMCSCMD        THIS PROGRAM WILL RUN AS A STARTED TASK AND USES THE MVS\n              MODIFY COMMAND TO COMMUNICATE WITH THE TASK.  IT ENABLES\n              OPERATORS TO ENTER A SYSTEM COMMAND AS IF IT CAME FROM THE\n              MASTER CONSOLE, I.E.   CF COMMANDS FROM A MCS CONSOLE\n              ENTER   F MCSCMD,END  TO TERMINATE THE TASK\n\nMCSCMD$       JCL TO ASSEMBLE/LINK MCSCMD\n\nMCSCMD#       PROC TO RUN MCSCMD\n\nMCSESA        DISPLAY OPERATOR CONSOLE ON TSO TERMINAL, EXTENDED\n              ATTRIBUTES WILL BE DISPLAYED, IF USER IS AUTHORIZED,\n              THEY CAN ENTER MVS AND JES COMMANDS.\n\nSMFCPUID      SET TSO CLIST/REXX VARIABLE (&SMFCPUID) TO VALUE OF SMF\n              SYSTEM ID\n\nSMFCPU$       JCL TO ASSEMBLE/LINK SMFCPUID\n\nSMFCPU#       HELP FOR SMFCPUID\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$MOD": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x95)\\x0f\\x00\\x95)\\x1f\\x16\\x08\\x00\\x18\\x00\\x16\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-10-17T00:00:00", "modifydate": "1995-10-18T16:08:00", "lines": 24, "newlines": 22, "modlines": 0, "user": "AMDAHL"}, "text": "MODS AND ADDITIONS ADDED TO ORIGINAL FILE  10/95\n\n\n!!!!!!!   ALL PROGRAMS HAVE BEEN TESTED UP THRU ESA 5.2, THE\n          ONLY PROBLEM WHICH WILL BE ENCOUNTERED IS WITH LISTV\n          IF YOU ARE USING DYNAMIC UCB'S, IF NOT, YOU SHOULD HAVE\n          NO PROBLEMS WITH LISTV.  LATER RELEASE WILL UTILIZE THE\n          UCB SEARCH MACROS WITHIN ESA.\n\nCLEARBC - ADDED TSO COMMAND PROCESSOR WHICH WILL CLEAR OFF BACKED-UP\n          MESSAGES IN SYS1.BRODCAST FOR THE SPECIFIED USER.\n\nLPROCXMC- MODIFICATION TO ORIGINAL PROGRAM TO LOOK FOR THE TRUE JES2\n          TCB IN CASE SOMEONE IS RUNNING A PRODUCT WHICH ADDS A TCB TO\n          JES'S ADDRESS SPACE LIKE CA-ENF ( EVENT NOTIFICATION ) PRODUCT\n          DOES.  IF YOU DO NOT RUN THIS TYPE OF PRODUCT, THE ORIGINAL\n          LPROCXM IS JUST FINE.\n\nMCSESA  - ADDED TSO COMMAND TO DISPLAY CONSOLE AT TSO TERMINAL\n          MANY OF THESE AROUND, YOU CHOOSE THE ONE YOU LIKE BEST.\n          THIS ONE HAS NO TRICKS OR GIMMICKS, JUST LETS YOU SEE THE\n          SIB AND ENTER COMMANDS IF AUTHORIZED.  DOES SUPPORT\n          EXTENDED ATTRIBUTES CONSOLE BUT DOES NOT HAVE SYSPLEX\n          CODE FOR MASTER CONSOLE YET.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLEARBC": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95)\\x0f\\x00\\x96\\x02_!\\x12\\x00\\xc9\\x00\\xc5\\x00\\x05\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-10-17T00:00:00", "modifydate": "1996-01-25T21:12:00", "lines": 201, "newlines": 197, "modlines": 5, "user": "SBGCSC"}, "text": "//COM     EXEC PGM=ASMA90,REGION=512K,\n//    PARM='XREF(SHORT),NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSLIN   DD  UNIT=SYSDA,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  *\n*********************************************************************\n*                                                                   *\n*  THIS PROGRAM CHANGES THE USERID IN THE PSCB TO THE SPECIFIED     *\n*  USERID FOR THE PURPOSE OF CLEARING UP BUILT-UP MESSAGES IN THE   *\n*  SYS1.BRODCAST DATA SET BY ISSUING THE TSO  \"LISTBC\" COMMAND      *\n*  UNDER THE OTHER USER'S USERID.  CLEARBC MUST BE IN IKJTSOXX AS   *\n*  AN AUTHORIZED COMMAND                                            *\n*                                                                   *\n*  BOYSEN/AMDAHL   JULY 1995                                        *\n*                                                                   *\n*********************************************************************\n*                                                                   *\n*  FIXED SMALL INTEGRITY PROBLEM WITH PLACEMENT OF MODESET. S-GOLOB *\n*                                                                   *\n*********************************************************************\nCLEARBC  CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13                       SAVEAREA\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7                        CPPL ADDRESS\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nCLEARBC  CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         LR    R7,R1                    SAVE CPPL ADDRESS\n         ST    R7,CPPLADDR              SAVE CPPL ADDRESS FOR SVC99\n         LA    R1,ERASE                 POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE               GET THE LENGTH\n         TPUT  (1),(0),FULLSCR          ERASE THE 3270 SCREEN\n*\n         USING CPPL,R7\n         GETMAIN R,LV=WORKLEN           GET WORK AREA\n         LR    R10,R1                   SAVE AREA ADDR IN R10\n         USING WORK,R10\n         LA    R5,PARSPARM\n         USING PPL,R5\n         XC    PARSE(PARSELEN),PARSE    INITIALIZE PPL\n         MVC   PPLUPT,CPPLUPT           UPT\n         MVC   PPLECT,CPPLECT           ECT\n         MVC   PPLCBUF,CPPLCBUF         CIB\n         LA    R1,PARSECB               ECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)               PCL\n         ST    R1,PPLPCL\n         LA    R1,PARSANS               PDL\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R5))    CALL PARSE\n         DROP  R5\n         L     R10,PARSANS              OK ?\n         USING PDL,R10\n         LTR   R10,R10\n         BP    MOVEUSER                 YES, CONTINUE\n         TPUT  BADPARSE,17              PUT OUT BAD PARSE MSG\n         B     GOBACK\n*\nMOVEUSER DS    0H\n         L     R3,USERPTR               LOAD PTR TO PASSED USERER NAME\n         LA    R2,USERID\n         LH    R1,USERLEN               LOAD LENGTH OF PARM\n         BCTR  R1,0\n         EX    R1,MVCPARM               MOVE THE PARM\nCHG_USER DS    0H                       CHANGE USERID IN PSCB\n         L     R4,PSATOLD-PSA           CURRENT TCB ADDR\n         USING TCB,R4                   MAP CALLER'S TCB\n         L     R2,TCBJSCB               LOAD JSCB ADDRESS\n         USING IEZJSCB,R2               JSCB ADDRESSABILITY\n         L     R3,JSCBPSCB              LOAD PSCB ADDRESS\n         USING PSCB,R3                  PSCB ADDRESSABILITY\n         TM    PSCBATR1,PSCBCTRL        ARE THEY OPER ?\n         BZ    GOBACK                   NO THEY AREN'T\n         MODESET KEY=ZERO,MODE=SUP      SUPERVISOR STATE/KEY ZERO\n         MVC   OUSERID,PSCBUSER         SAVE OLD USER ID\n         MVC   PSCBUSER,USERID          MOVE NEW USER ID\nCALL_LISTBC    DS  0H\n         L     R15,CVTPTR               ESTABLIST\n         L     R15,CVTTVT-CVTMAP(,R15)  ADDRESSABILITY TO\n         L     R15,TSVTASF-TSVT(,R15)   TSO SERVICE FACILITY\n         CALL  (15),(FLAGS,CMDBUF,BUFLEN,RETCODE,RSNCODE,ABNDCODE),VL\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   BCERROR                  ERROR, GET OUT\n         B     RESTORE                  RESTORE ORIGINAL ENVIRONMENT\n*\nBCERROR  DS    0H\n         TPUT  ERRORMSG,L'ERRORMSG\nRESTORE  DS    0H\n         MVC   PSCBUSER,OUSERID         RESTORE OLD USED ID\n         MODESET KEY=NZERO,MODE=PROB    SET PROTECT KEY TO NONZERO\nGOBACK   DS    0H                       RETURN TO CALLER\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*\n*        STORAGE AREA\n*\nSAVEAREA DS    18F\nERRORMSG DC    CL29'COMMAND TERMINATED ABNORMALLY'\nEYE      DC    AL1(L'CATCHER)\nCATCHER  DC    C'CLEARBC_V1.0_&SYSDATE._&SYSTIME.'\n         DC    C'JIM.BOYSEN.AMDAHL'\nPARMLIST IKJIFRIF MF=L\nMVCPARM  MVC   0(*-*,R2),0(R3)          MOVE USERER NAME\nCPPLADDR DS    F\nBADPARSE DC    CL17'BAD PARSE OF PARM'\nERASE    DC    X'27F5401D40'            USED TO CLEAR 3270 TERMINAL\n*\nPARMADDR DS    0CL12\nUSERID   DC    CL7' '                   NEW USER ID\nOUSERID  DC    CL7' '                   OLD USER ID\n*\n*        DATA AREAS FOR LISTBC COMMAND\nZERO     DC    F'0'                     ZERO CONSTANT\nFLAGS    DS    0F                       MAPS FIRST PARM TO IKJEFTSR\nRESFLAGS DC    H'0'                     FLAG WORD\nABFLAGS  DC    X'01'                    DUMP IF ABEND OCCURS\nFNCFLAGS DC    X'01'                    TELL TSR TO EXECUTE THE COMMAND\nCMDBUF   DC    C'LISTBC'                NAME OF COMMAND TO EXECUTE\nBUFLEN   DC    F'6'                     LENGTH OF COMMAND\nRETCODE  DS    F                        RETURN CODE FROM COMMAND\nRSNCODE  DS    F                        REASON CODE\nABNDCODE DS    F                        ABEND CODE\n*\nPCL      IKJPARM DSECT=PDL\nUSER     IKJIDENT 'VALID USERID',UPPERCASE,FIRST=ALPHA,                X\n               PROMPT='VALID USERID',                                  X\n               MAXLNTH=7,OTHER=ALPHANUM,HELP='VALID USERID'\n         IKJENDP\n         TITLE 'COMMAND PROCESSOR PARAMETER LIST'\n         IKJCPPL\n         TITLE 'GETMAIN WORK AREA'\nWORK     DSECT\nPARSE    EQU   *\nPARSPARM DS    7A                       PPL\nPARSECB  DS    F                        ECB\nPARSANS  DS    A                        PDL\nPARSELEN EQU   *-PARSE\nWORKLEN  EQU   *-WORK\n         TITLE 'PARSE PARAMETER LIST'\n         IKJPPL\nPDL      DSECT\n         ORG   USER\nUSERPTR  DS    A                       ADDRESS OF USERID\nUSERLEN  DS    H                       LENGTH OF USERID\nUSERFLAG DS    X                       FLAGS\nUSERFND  EQU   X'80'                   USERID PRESENT\n*\n         PRINT OFF\n         TITLE '*** CVT ***'\n         CVT  DSECT=YES\n         TITLE '*** TSVT ***'\n         IKJTSVT\n         TITLE '*** PSA ***'\n         IHAPSA\n         TITLE '*** PSCB ***'\n         IKJPSCB\n         TITLE '*** JSCB ***'\n         IEZJSCB\n         TITLE '*** TCB ***'\n         IKJTCB\n         END\n/*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM='XREF,LET,LIST'\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME CLEARBC(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPUINFO": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x01\\xc0\\x01\\xc0\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 448, "newlines": 448, "modlines": 0, "user": "AMDAHL"}, "text": "NUMBCHAN CSECT\nNUMBCHAN AMODE 31\nNUMBCHAN RMODE 24\n***********************************************************************\n*   !!! NOTE !!! USE BATCH PARM FOR ASSEMBLY OF THESE PROGRAMS        *\n*   GET NUMBER OF CHANNELS FOR SYSTEM FROM ICHPT CONTROL BLOCK.       *\n*   SUBROUTINE CALLED BY CPUINFO.                                     *\n*   BOYSEN/AMDAHL FEDERAL SERVICE CORPORATION                         *\n***********************************************************************\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nCVTPRE   EQU   256                      CVT PREFIX START\nNUMBCHAN CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BALR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n*\n         L     R2,CVTPTR                GET ADDRESS OF CVT (YES,AGAIN)\n         L     R3,CVTICHPT-CVTMAP(,R2)  GET ADDRESS OF CHP TABLE\n         LA    R4,256                   MAXIUM NUMBER OF CHANNELS (XA)\n         BAS   8,A31                    SET ADDRESSING MODE 31\nCHPLOOP  DS    0H                       31-BIT ADDRESSING\n         CLI   0(R3),X'80'              IS IT ONE WE DON'T WANT ?\n         BE    NEXTCHP                  GET NEXT CHPID\n         CLI   0(R3),X'00'              ANOTHER TYPE WE DON'T WANT ?\n         BE    NEXTCHP                  GET NEXT CHPID\n         CLI   0(R3),X'C0'              ANOTHER TYPE WE DON'T WANT ?\n         BE    NEXTCHP                  GET NEXT CHPID\n         AP    NOCHANS,=P'1'            ADD 1 TO NUMBER OF CHPIDS\nNEXTCHP  LA    R3,1(,R3)                NEXT CHANNEL\n         BCT   R4,CHPLOOP               CHECK NEXT CHPID\n         UNPK  WRKPACK,NOCHANS          ... UNPACK IT ...\n         MVC   NO_CHPID,WRKPACK+4\n         OI    NO_CHPID+3,X'F0'         ... SET THE SIGN.\n         BAS   8,A24                    SET AMODE 24\n         L     R15,NO_CHPID             PUT NUMBER OF CHANNELS IN R15\n*\nGOHOME   DS    0H\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*\n*        STORAGE AREA\n*\nSAVEAREA DS    18F\nWRKPACK  DS    D\nNOCHANS  DC    PL4'0'\nNO_CHPID DC    CL4' '\nA24      LA    8,0(8)                   CLEAR HIGH ORDER BIT\n         BSM   0,8\n*\nA31      O     8,=X'80000000'           SET HIGH ORDER BIT\n         BSM   0,8\n         PRINT NOGEN\n         TITLE 'CVT MAPPING MACRO WITH PREFIX'\n         CVT   DSECT=YES,PREFIX=YES\n         END\nCPUINFO  CSECT\n***********************************************************************\n*   !!! NOTE !!! USE BATCH PARM FOR ASSEMBLY OF THESE PROGRAMS        *\n*                                                                     *\n*   AUTHOR:                                                           *\n*   BOYSEN/AMDAHL FEDERAL SERVICE CORPORATION                         *\n*                                                                     *\n*   FUNCTION:                                                         *\n*   DISPLAY VARIOUS INFORMATION FROM SYSTEM CONTROL BLOCKS, ETC.      *\n*                                                                     *\n*   ENVIRONMENT:                                                      *\n*   TSO COMMAND                                                       *\n*                                                                     *\n*   COMMAND SYNTAX:                                                   *\n*   CPUINFO                                                           *\n*                                                                     *\n*   OUTPUT:                                                           *\n*   OUTPUT TO TSO TERMINAL                                            *\n*                                                                     *\n*   OUTPUT DISPLAYED:                                                 *\n*   SMF CPUID, SYSNAME, CPU MODEL, MVS RELEASE, FMID, DFP LEVEL,      *\n*   CPU(S) ID(S), LAST IPL DATE AND TIME, CLPA OR NOT,                *\n*   SYSRES, IPL ADDRESS, NUCLEUS, I/O GEN, TSO VERSION, VTAM LEVEL,   *\n*   NUMBER OF SYSTEM CHANNELS, MASTER CATALOG NAME                    *\n*                                                                     *\n*   SPECIAL ASM OR LINK PARMS:                                        *\n*   BATCH PARM FOR ASSEMBLE                                           *\n*                                                                     *\n***********************************************************************\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nCVTPRE   EQU   256                      CVT PREFIX START\nCPUINFO  CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BALR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n*\n         LA    R1,ERASE                 POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE               GET THE LENGTH\n         TPUT  (1),(0),FULLSCR          ERASE THE 3270 SCREEN\n         L     R4,CVTPTR                GET ADDRESS OF CVT\n         L     R5,CVTSMCA-CVTMAP(,R4)   LOAD THE SMCA ADDRESS\n         MVC   SMFCPUID,SMCASID-SMCABASE(R5)    MOVE THE SMF ID\n         MVC   SYSNAME,CVTSNAME-CVTMAP(R4)      SYSNAME IN IEASYSXX\n         L     R3,CVTPTR                ADDRESS OF CVT\n         LA    R2,CVTPRE                LOAD ADDRESS OF CVT PREFIX\n         SR    R3,R2                    GET ADDRESS TO CVT PREFIX\n         USING CVTFIX,R3                ADDRESSABILITY\n         MVC   HOLDCPU,CVTMDL           ALIGN IT\n         L     R1,HOLDCPU               GET CVTMDL TO DISPLAY\n         LA    R2,CPUMOD                LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              MAKE IT PRINTABLE\n         MVC   CPUMOD+4(4),BLANKS       MOVE SPACES TO GARBAGE\n         TPUT  MESG01,L'MESG01          TPUT THE CPU INFO LINE 1\n         MVC   MVSID,CVTPRODN           MOVE THE MVS PRODUCT NAME\n         MVC   MVSNAME,CVTPRODI         MOVE THE FMID\n         L     R2,CVTPTR                GET ADDRESS OF CVT\n         L     R3,CVTCKRAS-CVTMAP(,R2)  GET ADDR OF DFA\n         USING DFA,R3                   ADDESSABILITY\n         MVC   HOLDCPU,DFAREL           ALIGN IT\n         L     R1,HOLDCPU               GET CVTMDL TO DISPLAY\n         LA    R2,HOLDDFP               LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              MAKE IT PRINTABLE\n         MVC   DFPVER(1),HOLDDFP        MOVE VERSION\n         MVC   DFPREL(1),HOLDDFP+1      MOVE RELEASE\n         MVC   DFPMOD(1),HOLDDFP+2      MOVE MOD\n         TPUT  MESG02,L'MESG02          PRINT IT OUT\n         L     R2,CVTPTR                GET ADDRESS OF CVT\n         L     R3,CVTPCCAT-CVTMAP(,R2)  ADDR OF PCCA FOR SERIAL #'S\n         LA    R9,15                    NUMBER OF POSSIBLE CPU'S - 1\n         LA    R8,CPUNUMS               LOAD ADDRESS OF CPU #'S\nCPUCHECK CLC   0(4,R3),ZEROES           IS THERE AN ADDRESS\n         BE    NEXTCPU                  MUST NOT BE THERE\n         L     R2,0(,R3)                LOAD ADDRESS OF CPU'S PCCA\n         USING PCCA,R2                  ADDRESSABILITY\n         MVC   SERIAL#,PCCACPID+2       MOVE SERIAL# FOR DISPLAY\n         MVC   CPUNUM(1),0(R8)          MOVE CPU NUMBER FOR DISPLAY\n         TPUT  MESG03,L'MESG03          PRINT IT OUT\nNEXTCPU  LA    R3,4(,R3)                LOAD NEXT CPU PCCA\n         LA    R8,1(,R8)                MOVE NEXT CPU NUM\n         BCT   R9,CPUCHECK              LOOP THRU CPU'S\n*\n         L     R2,CVTPTR                GET ADDRESS OF CVT\n         L     R5,CVTSYSAD-CVTMAP(,R2)  GET UCB OF SYSRES\n         USING UCBOB,R5                 ADDRESSABILITY\n         MVC   SYSRES(6),UCBVOLI        GET VOL NAME FOR DISPLAY\n         MVC   UNITADDR(3),UCBNAME      GET UNIT ADDR FOR DISPLAY\n         DROP  R5                       NO LONGER NEEDED\n         L     R2,CVTPTR                GET ADDRESS OF CVT  ( AGAIN )\n         L     R5,CVTEXT2-CVTMAP(,R2)   GET ADDRESS OF CVT EXT 2\n         USING CVTXTNT2,R5              ADDRESS IT\n         MVC   NUCNUM,CVTNUCLS          NUCLEUS MEMBER NAME\n         MVC   IOGEN,CVTIOCID           MOVE I/O GEN NUMBER\n         L     R3,CVTSMCA-CVTMAP(,R2)   LOAD THE SMCA ADDRESS\n         USING SMCABASE,R3              ADDRESSABILITY\n         MVC   IPLDATE,SMCAIDTE         MOVE IPL DATE\n         MVC   IPLTIME,SMCAITME         MOVE IPL TIME\n         BAL   R10,DATETIME             BRANCH TO DATE/TIME CONVERT\n         MVC   DISPM(2),SYSMM           MOVE THE MONTH\n         MVC   DISPD(2),SYSDD           MOVE THE DAY\n         MVC   DISPY(2),SYSYY           MOVE THE YEAR\n         L     R3,CVTASMVT-CVTMAP(,R2)  MOVE ASMVT ADDRESS\n         TM    1(R3),X'08'              CLPA ?\n         BNZ   NOCLPA                   NO CLPA\n         MVC   CLPA,=C'(CLPA)'          MOVE CLPA INDICATOR\nNOCLPA   DS    0H\n         TPUT  MESG04,L'MESG04          PRINT IT OUT\n         TPUT  MESG05,L'MESG05          PRINT IT OUT\n*\n         L     R2,CVTPTR                GET ADDRESS OF CVT  (AGAIN)\n         L     R3,CVTTVT-CVTMAP(,R2)    ADDR OF TSVT-TSO VECTOR TABLE\n         L     R4,CVTPCCAT-CVTMAP(,R2)  ADDR OF PCCA\n         USING TSVT,R3                  ADDRESSABILITY\n         USING PCCA,R4                  ADDRESSABILITY\n         MVC   TSOVER,TSVTLVER          MOVE TSO VERSION\n         MVC   TSOREL,TSVTLREL          MOVE TSO RELEASE\n         MVC   TSOMOD,TSVTLMOD          MOVE TSO MOD LEVEL\n         L     R5,PCCAPSAR-PCCA(,R4)    GET PSA ADDRESS\n         USING PSA,R5                   ADDRESSABILITY\n         L     R4,PSAATCVT              LOAD VTAM ATCVT\n         MVC   VTAMLEVL(4),0(R4)        MOVE VTAM LEVEL\n         MVC   VTAMVER(1),VTAMLEVL+2    MOVE THE VERSION\n         MVC   VTAMREL(1),VTAMLEVL+3    MOVE THE RELEASE\n         TPUT  MESG06,L'MESG06          PRINT IT OUT\n*\n         L     R15,NUMBCHAN             LOAD ADDRESS OF ROUTINE\n         BAS   3,A31                    SET ADDRESSING MODE 31\n         BASR  R14,R15                  CALL ROUTINE\n         LR    R7,R15                   SAVE RETURN CODE\n         BAS   3,A24                    SET AMODE 24\n         ST    R7,NO_CHPID              MOVE NUMBER OF CHANNELS\n         TPUT  MESG07,L'MESG07          TPUT NUMBER OF CHPIDS\n*\nMCAT     DS    0H\n         L     R2,CVTPTR                GET ADDRESS OF CVT\n         L     R3,CVTCBSP-CVTMAP(,R2)   ADDR OF AMCBS\n         L     R2,CBSCAXCN-CBS(,R3)     FIRST CAXWA IN CHAIN\n         USING CAXWA,R2                 ADDRESSABILITY\nGETCAT   TM    CAXFLGS,CAXMCT           MASTER CATALOG ?\n         BZ    GETCAT2                  PICK UP NEXT CAT\n         MVC   MCATDSN,CAXCNAM          GET THE CAT DSN\nGETCAT2  ICM   R2,B'1111',CAXCHN        GET NEXT CAXWA\n         BNZ   GETCAT                   GO UNTIL END OF CHAIN\n         TPUT  MESG08,L'MESG08          TPUT MASTER CATALOG\n*\nGOHOME   DS    0H\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*\n*        CHANGE ADDRESSING MODES\n*\nA24      LA    3,0(3)                   CLEAR HIGH ORDER BIT\n         BSM   0,3\n*\nA31      O     3,=X'80000000'           SET HIGH ORDER BIT\n         BSM   0,3\n*\nHEXDUMP  ST    R1,FWORD                 STORE INPUT REG INTO FWORD\n         UNPK  DUMMY(9),FWORD(5)        UNPACK TO ADD F ZONE DIGITS\n         TR    DUMMY(8),TRANTAB         TRANSLATE TO CORRECT CHARACTERS\n         MVC   0(8,R2),DUMMY            MOVE TO CALLER'S AREA\n         BR    R10                      EXIT\nFWORD    DS    F,CL1                    1 WORD + 1 BYTE OF GARBAGE\nDUMMY    DS    CL9\nTRANTAB  DS    CL(X'F0')                NEVER USED\n         DC    C'0123456789ABCDEF'\n*\nDATETIME DS    0H                       ROUTINE FOR DATE/TIME\n         L     R7,IPLTIME               MOVE TO REG FOR CONVERT\n         SR    R6,R6                    CLEAR REG\n         D     R6,=F'360000'            DIVIDE\n         CVD   R7,DWORD                 CONVERT\n         OI    DWORD+7,X'0F'            OR FOR SIGN\n         UNPK  IPL_TIME(2),DWORD+6(2)   UNPACK\n         LR    R7,R6                    DO IT AGAIN  UH UH YOU SAID IT\n         SR    R6,R6                    CLEAR REG\n         D     R6,=F'6000'              DIVIDE\n         CVD   R7,DWORD                 CONVERT\n         OI    DWORD+7,X'0F'            OR FOR SIGN\n         UNPK  IPL_TIME+3(2),DWORD+6(2)   UNPACK\n         LR    R7,R6                    DO IT AGAIN  UH UH YOU SAID IT\n         SR    R6,R6                    CLEAR REG\n         D     R6,=F'100'               DIVIDE\n         CVD   R7,DWORD                 CONVERT\n         OI    DWORD+7,X'0F'            OR FOR SIGN\n         UNPK  IPL_TIME+6(2),DWORD+6(2)   UNPACK\n         L     R3,IPLDATE               LOAD SAVED SMF IPLDATE\n         ST    R3,WRKPACK+4             ST FOR UNPACKING\n         MVC   WRKYRTAB,YEARTAB         CREATE YEAR TABLE\n         TM    WRKPACK+5,X'01'          LEAP YEAR?\n         BO    DATE010                  NO ...\n         TM    WRKPACK+5,X'12'          REALLY A LEAP YEAR?\n         BM    DATE010                  NO ...\n         MVI   WRKFEB,29                ELSE FEBRUARY HAS 29 DAYS.\nDATE010  DS    0H\n         AP    WRKPACK+4(4),=PL4'1900000'  CONVERT 0CYY TO YYYY\n         MVC   SYSYEAR,=X'21202020'\n         ED    SYSYEAR,WRKPACK+4        MOVE IN THE YEAR\n         MVC   WRKPACK(6),=XL6'00'      BLANK OUT THE YEAR\n         ZAP   WRKDAYP,WRKPACK          SAVE PACKED DAY-OF-YEAR\n         SR    R0,R0\n         SR    R14,R14\n         CVB   R1,WRKPACK               CONVERT DAYS TO BINARY\n         LA    R15,WRKYRTAB-4           AND SCAN THE YEAR TABLE:\nDATE020  DS    0H\n         SLR   R1,R0                    DECREMENT \"DAYS REMAINING\"\n         LA    R15,4(,R15)              NEXT YEAR TABLE ENTRY (MONTH)\n         LA    R14,1(,R14)              KEEP A MONTH COUNTER\n         IC    R0,0(,R15)               DAYS IN CURRENT MONTH\n         CLR   R0,R1                    PAST END OF MONTH?\n         BL    DATE020                  NO - GO TRY NEXT ENTRY.\n         CVD   R1,WRKPACK               CONVERT DAYS LEFT\n         UNPK  SYSDD,WRKPACK+6(2)       ... UNPACK IT ...\n         OI    SYSDD+1,X'F0'            ... SET THE SIGN.\n         CVD   R14,WRKPACK              CONVERT MONTH NUMBER\n         UNPK  SYSMM,WRKPACK+6(2)       ... UNPACK IT ...\n         OI    SYSMM+1,X'F0'            ... SET THE SIGN.\n         BR    R10                      EXIT\nSYSYEAR  DS    0CL4                     YEAR (YYYY)\n         DS    CL2                      CENTURY\nSYSYY    DS    CL2                      YEAR\nSYSDD    DS    CL2                      DATE\nSYSMM    DS    CL2                      MONTH\nWRKDAYP  DS    PL2                      WORK DATA NAMES\nWRKYRTAB DS    XL(4*12)\nWRKFEB   EQU   WRKYRTAB+4\nWRKPACK  DS    D\nDWORD    DS     D\nYEARTAB  DC    AL1(31),C'JAN',AL1(28),C'FEB',AL1(31),C'MAR'\n         DC    AL1(30),C'APR',AL1(31),C'MAY',AL1(30),C'JUN'\n         DC    AL1(31),C'JUL',AL1(31),C'AUG',AL1(30),C'SEP'\n         DC    AL1(31),C'OCT',AL1(30),C'NOV',AL1(255),C'DEC'\n*\n*        STORAGE AREA\n*\nSAVEAREA DS    18F\nIPLDATE  DS    F\nIPLTIME DS     F\nBLANKS   DC    CL4' '\nZEROES   DC    F'0'\nHOLDCPU  DS    XL8\nHOLDDFP  DS    CL8\nVTAMLEVL DS    CL4\nNUMBCHAN DC    V(NUMBCHAN)\nCPUNUMS  DC    CL16'0123456789ABCDEF'   USED TO DISPLAY CPU NUMS\nERASE    DC    X'27F5401D40'            USED TO CLEAR 3270 TERMINAL\nMESG01   DS    0CL57\n         DC    CL11'SMF CPUID- '\nSMFCPUID DC    CL4' '\n         DC    CL13'    SYSNAME- '\nSYSNAME  DC    CL8' '\n         DC    CL2' '\n         DC    CL11'CPU MODEL- '\nCPUMOD   DC    CL8' '\n         DS    D\nMESG02   DS    0CL55\n         DC    CL13'MVS RELEASE- '\nMVSID    DC    CL8' '\n         DC    CL8'  FMID- '\nMVSNAME  DC    CL8' '\n         DC    CL13'  DFP LEVEL- '\nDFPVER   DC    CL1' '\n         DC    CL1'.'\nDFPREL   DC    CL1' '\n         DC    CL1'.'\nDFPMOD   DC    CL1' '\nMESG03   DS    0CL33\n         DC    CL4'CPU '\nCPUNUM   DC    CL2' '\n         DC    CL2' '\n         DC    CL15'SERIAL NUMBER- '\nSERIAL#  DC    CL10' '\nMESG04   DS    0CL47\n         DC    CL17'LAST IPL WAS ON  '\nIPL_DATE DS    0CL8\nDISPM    DC    CL2' '\n         DC    C'/'\nDISPD    DC    CL2' '\n         DC    C'/'\nDISPY    DC    CL2' '\n         DC    CL6'  AT  '\nIPL_TIME DC    CL8'  :  :  '\n         DC    CL2' '\nCLPA     DC    CL6' '\nMESG05   DS    0CL59\n         DC    CL8'SYSRES- '\nSYSRES   DC    CL6' '\n         DC    CL15'  IPL ADDRESS- '\nUNITADDR DC    CL3' '\n         DC    CL12'   NUCLEUS- '\nNUCNUM   DC    CL1' '\n         DC    CL12'   I/O GEN- '\nIOGEN    DC    CL2' '\nMESG06   DS    0CL48\n         DC    CL12'TSO VERSION '\nTSOVER   DC    C' '\n         DC    CL9' RELEASE '\nTSOREL   DC    CL2' '\n         DC    CL5' MOD '\nTSOMOD   DC    C' '\n         DC    CL15'   VTAM LEVEL- '\nVTAMVER  DC    CL1' '\n         DC    CL1'.'\nVTAMREL  DC    CL1' '\nMESG07   DS    0CL34\n         DC    CL28'NUMBER OF SYSTEM CHANNELS - '\nNO_CHPID DC    F'0'\n         DC    CL2' '\nMESG08   DS    0CL61\n         DC    CL17'MASTER CATALOG - '\nMCATDSN  DC    CL44' '\n         PRINT NOGEN\n         TITLE 'ACCESS METHOD CB STRUCTURE'\nCBS      DSECT\nCBSID    DS    C'AM'        AMCBS ID\nCBSSIZ   DS    H'144'       LENGTH OF AMCBS\nCBSMCSTA DS    C'CCHH'      CCHH OF MASTER CATALOG\nCBSACB   DS    V(ACB)       ACB FOR THE MASTER CATALOG\nCBSCBP   DS    V(IDC019C1)  CONTROL BLOCK MANIPULATION ROUTINE\nCBSCMP   DS    V(IGGOCLA1)  CATALOG MANAGEMENT ROUTINE\nCBSCAXCN DS    V(CAXWA)     ADDRESS OF THE CAXWA CHAIN\nCBSCRACA DS    V(CAXWA)     ADDRESS OF THE CRA CAXWA CHAIN\n         TITLE 'CATALOG WORK AREA'\nCAXWA    DSECT              CATALOG WORK AREA\nCAXID    DS    X'CA'        CAX ID\nCAXFLG4  DS    X,2X         FLAGS (4)\nCAXCHN   DS    A(CAXWA)     NEXT CAXWA IN CHAIN\nCAXFLGS  DS    X            FLAGS (1)\nCAXMCT   EQU   X'04'        MASTER CATALOG\nCAXFLG2  DS    X            FLAGS (2)\nCAXFLG3  DS    X            FLAGS (3)\nCAXFLG5  DS    X,3F         FLAGS (5)\nCAXACB   DS    V(IFGACB)    CATALOG'S ACB\nCAXUCB   DS    V(UCBOB)     CATALOG'S UCB\n         DS    FL3,FL3,FL3,FL3,H,H,A\nCAXCNAM  DS    CL44         CATALOG'S DSNAME\nCAXVOLID DS    CL6          CATALOG'S VOLUME (CRA ONLY)\n         TITLE 'CVT MAPPING MACRO WITH PREFIX'\n         CVT   DSECT=YES,PREFIX=YES\n         TITLE 'SMCA MAPPING MACRO'\n         IEESMCA\n         TITLE 'PCCA MAPPING MACRO'\n         IHAPCCA\n         TITLE 'TSO VECTOR TABLE MAPPING MACRO'\n         IKJTSVT\n         TITLE 'UCB MAPPING MACRO'\n         IEFUCBOB\n         TITLE 'DATA FACILITY AREA'\n         IHADFA\n         TITLE 'PSA MAPPING AREA'\n         IHAPSA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPUINFO$": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK,BATCH'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DSN=YOUR.SOURCE.LIB(CPUINFO),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM='XREF,LET,LIST'\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=VIO,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n ENTRY CPUINFO\n NAME CPUINFO(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPUINFO#": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x08\\x00\\x08\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "AMDAHL"}, "text": ")F FUNCTION -\n     DISPLAY SYSTEM INFORMATION AT A TSO TERMINAL\n)X SYNTAX -\n         CPUINFO\n  REQUIRED - NONE\n  DEFAULT  - NONE\n)O OPERANDS -\n))NONE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GTEDAALC": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00h\\x00h\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 104, "newlines": 104, "modlines": 0, "user": "AMDAHL"}, "text": "         MACRO\n&LABEL   GTEDAALC  &NM,&VERB=AL,&ERRMSG=YES\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   PERFORM DYNAMIC ALLOCATION USING A DATA AREA CREATED         ***\n***   BY MACRO GTEDADAT, AND POINTERS/DATA SET BY MACRO GTEDASET.  ***\n**********************************************************************\n*\n**********************************************************************\n***   SET VERB CODE INTO S99RB.                                    ***\n***   MAPPING MACRO IEFZB4D0 MUST APPEAR IN THE SOURCE.            ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB\n.*\n.VBAL    AIF   ('&VERB' NE 'AL').VBUN\n         MVI   (S99VERB-S99RB)(1),S99VRBAL   SET VERB, DSN ALLOC\n         AGO   .VBEND\n.VBUN    AIF   ('&VERB' NE 'UN').VBCC\n         MVI   (S99VERB-S99RB)(1),S99VRBUN   SET VERB, DSN UNALLOC\n         AGO   .VBEND\n.VBCC    AIF   ('&VERB' NE 'CC').VBDC\n         MVI   (S99VERB-S99RB)(1),S99VRBCC   SET VERB, CONCATENATE\n         AGO   .VBEND\n.VBDC    AIF   ('&VERB' NE 'DC').VBRI\n         MVI   (S99VERB-S99RB)(1),S99VRBDC   SET VERB, DECONCATENATE\n         AGO   .VBEND\n.VBRI    AIF   ('&VERB' NE 'RI').VBDN\n         MVI   (S99VERB-S99RB)(1),S99VRBRI   SET VERB, REMOVE IN-USE\n         AGO   .VBEND\n.VBDN    AIF   ('&VERB' NE 'DN').VBIN\n         MVI   (S99VERB-S99RB)(1),S99VRBDN   SET VERB, DDN ALLOC\n         AGO   .VBEND\n.VBIN    AIF   ('&VERB' NE 'IN').VBEND\n         MVI   (S99VERB-S99RB)(1),S99VRBIN   SET VERB, REQUEST INFO\n         AGO   .VBEND\n.VBEND   ANOP\n.*\n*\n**********************************************************************\n***    DO DYNAMIC ALLOCATION                                       ***\n**********************************************************************\n*\n         LA    1,&NM.RBP                ADDRESS OF PTR TO SVC-99 RB\n         SVC   99                       DYNALLOC\n         ST    15,&NM.S99RC             SAVE RETURN CODE FROM SVC-99\n         ST    0,&NM.RSC                SAVE ERROR AND REASON CODE\n.*\n.*********************************************************************\n.**                                                                ***\n.**   IF &ERRMSG=NO, DO NOT EVER GENERATE CODE FOR IKJEFF18        ***\n.**                                                                ***\n.*********************************************************************\n.*\n         AIF   ('&ERRMSG' EQ 'NO').NOPR\n.*\n*\n**********************************************************************\n***    IF R/C FROM DYNAMIC ALLOCATION NOT ZERO,                    ***\n***    EXECUTE THE IKJEFF18 (DAIRFAIL) PROGRAM TO PRODUCE          ***\n***    ERROR MESSAGES.                                             ***\n**********************************************************************\n*\n         CNOP  2,4                      ALIGN FOR BRANCH INSTRUCTION\n         LTR   15,15                    IF RETURN CODE IS GOOD\n         BZ    EXZ&SYSNDX                 BRANCH TO END OF ROUTINE\n         BAL   1,EXA&SYSNDX  BRANCH AROUND LIST\n*\n**********************************************************************\n***    EXCEPTIONS, DON'T USE IKJEFF18 FOR THESE VERB/ERROR COMBOS  ***\n***                                                                ***\n         DC    H'1'          NUMBER OF MEMBERS IN THIS LIST\n         DC    X'02,0438'    VERB 02 ERR 0438 DDNAME NOT FOUND\n***                                                                ***\n**********************************************************************\n*\nEXA&SYSNDX LA    2,2(0,1)                    R2 IS POINTER TO COMBOS\n           LH    1,0(0,1)                    R1 IS COUNT OF COMBOS\n           LA    15,&NM.RB                   R15 IS BASE OF RB\n*\n           CLC   (S99VERB-S99RB)(1,15),0(2)  IF NO MATCH ON VERB\n           BNE   *+14                          BRANCH TO END OF LOOP\n           CLC   (S99ERROR-S99RB)(2,15),1(2) ELSE IF ERRCDE MATCHES\n           BE    EXZ&SYSNDX                    BRANCH TO ENDING\n           LA    2,6(0,2)                    POINT TO NEXT ENTRY\n           BCT   1,*-24                      LOOP BACK UP TIL EOL\n*\n         LA    1,&NM.DFPRM              POINT TO IKJEFF18 PARM BLOCK\n         CNOP  0,4                      ALIGN FOR FOLLOWING BAL\n         BAL   15,*+20                  LOAD CONST ADDR AND BRANCH\n         DC    A(*+8)                   ADDR OF LINK PARM LIST\n         DC    A(0)                     ADDR OF DCB (NONE)\n         DC    CL8'IKJEFF18'            EP NAME\n         SVC   6                        LINK\n*\n.NOPR    ANOP\nEXZ&SYSNDX NOPR  0                        END POINT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDADAT": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x04\\xa9\\x04\\xa9\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 1193, "newlines": 1193, "modlines": 0, "user": "AMDAHL"}, "text": "         MACRO\n&NM      GTEDADAT  &MAP=,&DDNAM=,&DSNAM=,&MEMBR=,&STATS=,              X\n               &NDISP=,&CDISP=,                                        X\n               &TRK=,&CYL=,&BLKLN=,&PRIME=,&SECND=,&DIR=,&RLSE=,       X\n               &SPFRM=,&ROUND=,&VLSER=,&PRIVT=,&VLSEQ=,&VLCNT=,        X\n               &VLRDS=,&UNIT=,&UNCNT=,&PARAL=,&SYSOU=,&SPGNM=,&SFMNO=, X\n               &OUTLM=,&CLOSE=,&COPYS=,&LABEL=,&DSSEQ=,&PASPR=,        X\n               &INOUT=,&EXPDT=,&RETPD=,&DUMMY=,&FCBIM=,&FCBAV=,        X\n               &QNAME=,&TERM=,&UCS=,&UFOLD=,&UVRFY=,&DCBDS=,&DCBDD=,   X\n               &SUSER=,&SHOLD=,&MSVGP=,&SSNM=,&PROT=,&BFALN=,&BFTEK=,  X\n               &BLKSZ=,&BUFIN=,&BUFL=,&BUFMX=,&BUFNO=,&BUFOF=,&BUFOU=, X\n               &BUFRQ=,&BUFSZ=,&CODE=,&CPRI=,&DEN=,&DSORG=,&EROPT=,    X\n               &GNCP=,&INTVL=,&KYLEN=,&LIMCT=,&LRECL=,&MODE=,&NCP=,    X\n               &OPTCD=,&PCIR=,&PCIS=,&PRTSP=,&RECFM=,&RSRVF=,&RSRVS=,  X\n               &SOWA=,&STACK=,&THRSH=,&TRTCH=,&IPLTX=,&DIAGN=,&FUNC=,  X\n               &FRID=,&PASSW=,&PASSL=,&PERMA=,&CNVRT=,                 X\n               &RTDDN=,&RTDSN=,&RTORG=,       <== FOR DSN ALLOCATION   X\n               &INDDN=,&INDSN=,&INORG=,       <== FOR INFO RETRIEVAL   X\n               &RTMEM=,&RTSTA=,&RTNDP=,&RTCDP=,&RTLIM=,&RTATT=,        X\n               &RTLST=,&RTTYP=,&RELNO=,                                X\n               &RTVOL=,&SSPRM=,&TCBAD=,&REMOV=,&UNALC=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n           LCLA  &TUPLEN\n&TUPLEN    SETA  0\n*\n&NM        DS  0D                       ALIGN FOR GETMAIN\n*\n**********************************************************************\n***        TEXT UNITS FOR SVC99                                    ***\n**********************************************************************\n*\n&NM.TU     DS  0F   TEXT UNITS FOR SVC99\n.*\n.*********************************************************************\n.***       DSNAME ALLOCATION TEXT UNITS - VERB CODE 01             ***\n.*********************************************************************\n.*\n.TUDDNAM   AIF ('&DDNAM' EQ '').TUDSNAM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDDNA#\n           DS  XL6\n&NM.DDNAM  DS  CL8                      DDNAME\n           AGO .TUDSNAM\n.TUDDNA#   ANOP\n           DC  X'0001,0001,0008'\n&NM.DDNAM  DC  CL8'&DDNAM'              DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSNAM   AIF ('&DSNAM' EQ '').TUMEMBR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSNA#\n           DS  XL6\n&NM.DSNAM  DS  CL44                     DATASET NAME\n           AGO .TUMEMBR\n.TUDSNA#   ANOP\n           DC  X'0002,0001,002C'        DATASET NAME (NEXT LINE)\n&NM.DSNAM  DC  CL44'&DSNAM'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMEMBR   AIF ('&MEMBR' EQ '').TUSTATS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUMEMB#\n&NM.MEMKY  DS  XL6\n&NM.MEMBR  DS  CL8                      MEMBER NAME\n           AGO .TUSTATS\n.TUMEMB#   ANOP\n&NM.MEMKY  DC  X'0003,0001,0008'\n&NM.MEMBR  DC  CL8'&MEMBR'              MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSTATS   AIF ('&STATS' EQ '').TUNDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSTAT#\n&NM.STATS  DS  XL7                      STATUS\n           AGO .TUNDISP\n.TUSTAT#   AIF ('&STATS' NE 'OLD').TUSTAT2\n&NM.STATS  DC  X'0004,0001,0001,01'     STATUS=OLD\n           AGO .TUNDISP\n.TUSTAT2   AIF ('&STATS' NE 'MOD').TUSTAT4\n&NM.STATS  DC  X'0004,0001,0001,02'     STATUS=MOD\n           AGO .TUNDISP\n.TUSTAT4   AIF ('&STATS' NE 'NEW').TUSTAT8\n&NM.STATS  DC  X'0004,0001,0001,04'     STATUS=NEW\n           AGO .TUNDISP\n.TUSTAT8   AIF ('&STATS' NE 'SHR').TUNDISP\n&NM.STATS  DC  X'0004,0001,0001,08'     STATUS=SHR\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNDISP   AIF ('&NDISP' EQ '').TUCDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNDIS#\n&NM.NDISP  DS  XL7                      NORMAL DISP\n           AGO .TUCDISP\n.TUNDIS#   AIF ('&NDISP' NE 'UNCATLG').TUNDIS2\n&NM.NDISP  DC  X'0005,0001,0001,01'     NORMAL DISP=UNCATLG\n           AGO .TUCDISP\n.TUNDIS2   AIF ('&NDISP' NE 'CATLG').TUNDIS4\n&NM.NDISP  DC  X'0005,0001,0001,02'     NORMAL DISP=CATLG\n           AGO .TUCDISP\n.TUNDIS4   AIF ('&NDISP' NE 'DELETE').TUNDIS8\n&NM.NDISP  DC  X'0005,0001,0001,04'     NORMAL DISP=DELETE\n           AGO .TUCDISP\n.TUNDIS8   AIF ('&NDISP' NE 'KEEP').TUCDISP\n&NM.NDISP  DC  X'0005,0001,0001,08'     NORMAL DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCDISP   AIF ('&CDISP' EQ '').TUTRK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCDIS#\n&NM.CDISP  DS  XL7                      COND DISP\n           AGO .TUTRK\n.TUCDIS#   AIF ('&CDISP' NE 'UNCATLG').TUCDIS2\n&NM.CDISP  DC  X'0006,0001,0001,01'     COND DISP=UNCATLG\n           AGO .TUTRK\n.TUCDIS2   AIF ('&CDISP' NE 'CATLG').TUCDIS4\n&NM.CDISP  DC  X'0006,0001,0001,02'     COND DISP=CATLG\n           AGO .TUTRK\n.TUCDIS4   AIF ('&CDISP' NE 'DELETE').TUCDIS8\n&NM.CDISP  DC  X'0006,0001,0001,04'     COND DISP=DELETE\n           AGO .TUTRK\n.TUCDIS8   AIF ('&CDISP' NE 'KEEP').TUTRK\n&NM.CDISP  DC  X'0006,0001,0001,08'     COND DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTRK     AIF ('&TRK' EQ '').TUCYL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTRKA\n&NM.TRK    DS  XL4                      TRK\n           AGO .TUCYL\n.TUTRKA    ANOP\n&NM.TRK    DC  X'0007,0000'             TRK\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCYL     AIF ('&CYL' EQ '').TUBLKLN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCYLA\n&NM.CYL    DS  XL4                      CYL\n           AGO .TUBLKLN\n.TUCYLA    ANOP\n&NM.CYL    DC  X'0008,0000'             CYL\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKLN   AIF ('&BLKLN' EQ '').TUPRIME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKL#\n           DS  XL6\n&NM.BLKLN  DS  AL3                      AVERAGE BLOCK LENGTH\n           AGO .TUPRIME\n.TUBLKL#   ANOP\n           DC  X'0009,0001,0003'\n&NM.BLKLN  DC  AL3(&BLKLN)              AVERAGE BLOCK LENGTH\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIME   AIF ('&PRIME' EQ '').TUSECND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIM#\n           DS  XL6\n&NM.PRIME  DS  AL3                      PRIMARY SPACE QUANTITY\n           AGO .TUSECND\n.TUPRIM#   ANOP\n           DC  X'000A,0001,0003'\n&NM.PRIME  DC  AL3(&PRIME)              PRIMARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSECND   AIF ('&SECND' EQ '').TUDIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSECN#\n           DS  XL6\n&NM.SECND  DS  AL3                      SECONDARY SPACE QUANTITY\n           AGO .TUDIR\n.TUSECN#   ANOP\n           DC  X'000B,0001,0003'\n&NM.SECND  DC  AL3(&SECND)              SECONDARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDIR     AIF ('&DIR' EQ '').TURLSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDIRA\n           DS  XL6\n&NM.DIR    DS  AL3                      NUMBER OF DIRECTORY BLOCKS\n           AGO .TURLSE\n.TUDIRA    ANOP\n           DC  X'000C,0001,0003'\n&NM.DIR    DC  AL3(&DIR)                NUMBER OF DIRECTORY BLOCKS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURLSE    AIF ('&RLSE' EQ '').TUSPFRM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURLSEA\n&NM.RLSE   DS  XL4                      RLSE\n           AGO .TUSPFRM\n.TURLSEA   ANOP\n&NM.RLSE   DC  X'000D,0000'             RLSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPFRM   AIF ('&SPFRM' EQ '').TUROUND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPFR#\n&NM.SPFRM  DS  XL7                      SPACE FORMAT\n           AGO .TUROUND\n.TUSPFR#   AIF ('&SPFRM' NE 'ALX').TUSPFR4\n&NM.SPFRM  DC  X'000E,0001,0001,02'     ALX\n           AGO .TUROUND\n.TUSPFR4   AIF ('&SPFRM' NE 'MXIG').TUSPFR8\n&NM.SPFRM  DC  X'000E,0001,0001,04'     MXIG\n           AGO .TUROUND\n.TUSPFR8   AIF ('&SPFRM' NE 'CONTIG').TUROUND\n&NM.SPFRM  DC  X'000E,0001,0001,08'     CONTIG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUROUND   AIF ('&ROUND' EQ '').TUVLSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUROUN#\n&NM.ROUND  DS  XL4                      ROUND\n           AGO .TUVLSER\n.TUROUN#   ANOP\n&NM.ROUND  DC  X'000F,0000'             ROUND\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSER   AIF ('&VLSER' EQ '').TUPRIVT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSE#\n           DS  XL6\n&NM.VLSER  DS  CL6                      VOLUME SERIAL NUMBER\n           AGO .TUPRIVT\n.TUVLSE#   ANOP\n           DC  X'0010,0001,0006'\n&NM.VLSER  DC  CL6'&VLSER'              VOLUME SERIAL NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIVT   AIF ('&PRIVT' EQ '').TUVLSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIV#\n&NM.PRIVT  DS  XL4                      PVT\n           AGO .TUVLSEQ\n.TUPRIV#   ANOP\n&NM.PRIVT  DC  X'0011,0000'             PVT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSEQ   AIF ('&VLSEQ' EQ '').TUVLCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSQ#\n           DS  XL6\n&NM.VLSEQ  DS  AL2                      VOLUME SEQUENCE NUMBER\n           AGO .TUVLCNT\n.TUVLSQ#   ANOP\n           DC  X'0012,0001,0002'\n&NM.VLSEQ  DC  AL2(&VLSEQ)              VOLUME SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLCNT   AIF ('&VLCNT' EQ '').TUVLRDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLCN#\n           DS  XL6\n&NM.VLCNT  DC  AL1                      VOLUME COUNT\n           AGO .TUVLRDS\n.TUVLCN#   ANOP\n           DC  X'0013,0001,0001'\n&NM.VLCNT  DC  AL1(&VLCNT)              VOLUME COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLRDS   AIF ('&VLRDS' EQ '').TUUNIT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLRD#\n           DS  XL6\n&NM.VLRDS  DS  CL44                     VOLUME REF TO THIS DSN\n           AGO .TUUNIT\n.TUVLRD#   ANOP\n           DC  X'0014,0001,002C'        VOLUME REF TO DSN (BELOW)\n&NM.VLRDS  DC  CL44'&VLRDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNIT    AIF ('&UNIT' EQ '').TUUNCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNITA\n           DS  XL6\n&NM.UNIT   DS  CL6                      UNIT\n           AGO .TUUNCNT\n.TUUNITA   ANOP\n           DC  X'0015,0001,0006'\n&NM.UNIT   DC  CL6'&UNIT'               UNIT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNCNT   AIF ('&UNCNT' EQ '').TUPARAL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNCN#\n           DS  XL6\n&NM.UNCNT  DS  AL1                      UNIT COUNT\n           AGO .TUPARAL\n.TUUNCN#   ANOP\n           DC  X'0016,0001,0001'\n&NM.UNCNT  DC  AL1(&UNCNT)              UNIT COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPARAL   AIF ('&PARAL' EQ '').TUSYSOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPARA#\n&NM.PARAL  DS  XL4                      PARALLEL MOUNT\n           AGO .TUSYSOU\n.TUPARA#   ANOP\n&NM.PARAL  DC  X'0017,0000'             PARALLEL MOUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSYSOU   AIF ('&SYSOU' EQ '').TUSPGNM\n           AIF ('&SYSOU' NE '*').TUSYSO2\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYSO#\n&NM.SYSOU  DS  XL4                      SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO#   ANOP\n&NM.SYSOU  DC  X'0018,0000'             SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO2   ANOP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYS##\n           DS  XL6\n&NM.SYSOU  DS  CL1                      SYSOUT CLASS\n           AGO .TUSPGNM\n.TUSYS##   ANOP\n           DC  X'0018,0001,0001'\n&NM.SYSOU  DC  CL1'&SYSOU'              SYSOUT CLASS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPGNM   AIF ('&SPGNM' EQ '').TUSFMNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPGN#\n           DS  XL6\n&NM.SPGNM  DS  CL8                      SYSOUT PROGRAM NAME\n           AGO .TUSFMNO\n.TUSPGN#   ANOP\n           DC  X'0019,0001,0008'\n&NM.SPGNM  DC  CL8'&SPGNM'              SYSOUT PROGRAM NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSFMNO   AIF ('&SFMNO' EQ '').TUOUTLM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSFMN#\n           DS  XL6\n&NM.SFMNO  DS  CL4                      SYSOUT FORM NAME/NUMBER\n           AGO .TUOUTLM\n.TUSFMN#   ANOP\n           DC  X'001A,0001,0004'\n&NM.SFMNO  DC  CL4'&SFMNO'              SYSOUT FORM NAME/NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOUTLM   AIF ('&OUTLM' EQ '').TUCLOSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOUTL#\n           DS  XL6\n&NM.OUTLM  DS  AL3                      OUTLIM\n           AGO .TUCLOSE\n.TUOUTL#   ANOP\n           DC  X'001B,0001,0003'\n&NM.OUTLM  DC  AL3(&OUTLM)              OUTLIM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCLOSE   AIF ('&CLOSE' EQ '').TUCOPYS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCLOS#\n&NM.CLOSE  DS  XL4                      FREE=CLOSE\n           AGO .TUCOPYS\n.TUCLOS#   ANOP\n&NM.CLOSE  DC  X'001C,0000'             FREE=CLOSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCOPYS   AIF ('&COPYS' EQ '').TULABEL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCOPY#\n           DS  XL6\n&NM.COPYS  DS  AL1                      COPIES\n           AGO .TULABEL\n.TUCOPY#   ANOP\n           DC  X'001D,0001,0001'\n&NM.COPYS  DC  AL1(&COPYS)              COPIES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULABEL   AIF ('&LABEL' EQ '').TUDSSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULABE#\n&NM.LABEL  DS  XL7                      LABEL\n           AGO .TUDSSEQ\n.TULABE#   AIF ('&LABEL' NE 'NL').TULABE2\n&NM.LABEL  DC  X'001E,0001,0001,01'     LABEL=NL\n           AGO .TUDSSEQ\n.TULABE2   AIF ('&LABEL' NE 'SL').TULABE3\n&NM.LABEL  DC  X'001E,0001,0001,02'     LABEL=SL\n           AGO .TUDSSEQ\n.TULABE3   AIF ('&LABEL' NE 'NSL').TULABE4\n&NM.LABEL  DC  X'001E,0001,0001,04'     LABEL=NSL\n           AGO .TUDSSEQ\n.TULABE4   AIF ('&LABEL' NE 'SUL').TULABE5\n&NM.LABEL  DC  X'001E,0001,0001,0A'     LABEL=SUL\n           AGO .TUDSSEQ\n.TULABE5   AIF ('&LABEL' NE 'BLP').TULABE6\n&NM.LABEL  DC  X'001E,0001,0001,10'     LABEL=BLP\n           AGO .TUDSSEQ\n.TULABE6   AIF ('&LABEL' NE 'LTM').TULABE7\n&NM.LABEL  DC  X'001E,0001,0001,21'     LABEL=LTM\n           AGO .TUDSSEQ\n.TULABE7   AIF ('&LABEL' NE 'AL').TULABE8\n&NM.LABEL  DC  X'001E,0001,0001,40'     LABEL=AL\n           AGO .TUDSSEQ\n.TULABE8   AIF ('&LABEL' NE 'AUL').TUDSSEQ\n&NM.LABEL  DC  X'001E,0001,0001,48'     LABEL=AUL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSSEQ   AIF ('&DSSEQ' EQ '').TUPASPR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSSE#\n           DS  XL6\n&NM.DSSEQ  DS  AL2                      LABEL= DATASET SEQUENCE NUMBER\n           AGO .TUPASPR\n.TUDSSE#   ANOP\n           DC  X'001F,0001,0002'\n&NM.DSSEQ  DC  AL2(&DSSEQ)              LABEL= DATASET SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPASPR   AIF ('&PASPR' EQ '').TUINOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINOUT   AIF ('&INOUT' EQ '').TUEXPDT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOU#\n&NM.INOUT  DS  XL7                      LABEL=IN OR OUT\n           AGO .TUEXPDT\n.TUINOU#   AIF ('&INOUT' NE 'IN').TUINOU2\n&NM.INOUT  DC  X'0021,0001,0001,40'     LABEL=IN\n           AGO .TUEXPDT\n.TUINOU2   AIF ('&INOUT' NE 'OUT').TUEXPDT\n&NM.INOUT  DC  X'0021,0001,0001,80'     LABEL=OUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEXPDT   AIF ('&EXPDT' EQ '').TURETPD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEXPD#\n           DS  XL6\n&NM.EXPDT  DS  CL5                      EXPDT\n           AGO .TURETPD\n.TUEXPD#   ANOP\n           DC  X'0022,0001,0005'\n&NM.EXPDT  DC  CL5'&EXPDT'              EXPDT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURETPD   AIF ('&RETPD' EQ '').TUDUMMY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURETP#\n           DS  XL6\n&NM.RETPD  DS  AL2                      RETPD\n           AGO .TUDUMMY\n.TURETP#   ANOP\n           DC  X'0023,0001,0002'\n&NM.RETPD  DC  AL2(&RETPD)              RETPD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDUMMY   AIF ('&DUMMY' EQ '').TUFCBIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDUMM#\n&NM.DUMMY  DS  XL4                      DD DUMMY / DSN=NULLFILE\n           AGO .TUFCBIM\n.TUDUMM#   ANOP\n&NM.DUMMY  DC  X'0024,0000'             DD DUMMY / DSN=NULLFILE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBIM   AIF ('&FCBIM' EQ '').TUFCBAV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBI#\n           DS  XL6\n&NM.FCBIM  DS  CL4                      FCB\n           AGO .TUFCBAV\n.TUFCBI#   ANOP\n           DC  X'0025,0001,0004'\n&NM.FCBIM  DC  CL4'&FCBIM'              FCB\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBAV   AIF ('&FCBAV' EQ '').TUQNAME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBA#\n&NM.FCBAV  DS  XL7                      FCB VERIFY OR ALIGN\n           AGO .TUQNAME\n.TUFCBA#   AIF ('&FCBAV' NE 'VERIFY').TUFCBA2\n&NM.FCBAV  DC  X'0026,0001,0001,04'     FCB VERIFY\n           AGO .TUQNAME\n.TUFCBA2   AIF ('&FCBAV' NE 'ALIGN').TUQNAME\n&NM.FCBAV  DC  X'0026,0001,0001,08'     FCB ALIGN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUQNAME   AIF ('&QNAME' EQ '').TUTERM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTERM    AIF ('&TERM' EQ '').TUUCS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTERMA\n&NM.TERM   DS  XL4                      TERM=TS / DSN(*)\n           AGO .TUUCS\n.TUTERMA   ANOP\n&NM.TERM   DC  X'0028,0000'             TERM=TS / DSN(*)\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUCS     AIF ('&UCS' EQ '').TUUFOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUCSA\n           DS  XL6\n&NM.UCS    DS  CL4                      UCS CHARACTER SET\n           AGO .TUUFOLD\n.TUUCSA    ANOP\n           DC  X'0029,0001,0004'\n&NM.UCS    DC  CL4'&UCS'                UCS CHARACTER SET\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUFOLD   AIF ('&UFOLD' EQ '').TUUVRFY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUFOL#\n&NM.UFOLD  DS  XL4                      UCS FOLD\n           AGO .TUUVRFY\n.TUUFOL#   ANOP\n&NM.UFOLD  DC  X'002A,0000'             UCS FOLD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUVRFY   AIF ('&UVRFY' EQ '').TUDCBDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUVRF#\n&NM.UVRFY  DS  XL4                      UCS VERIFY\n           AGO .TUDCBDS\n.TUUVRF#   ANOP\n&NM.UVRFY  DC  X'002B,0000'             UCS VERIFY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDS   AIF ('&DCBDS' EQ '').TUDCBDD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBS#\n           DS  XL6\n&NM.DCBDS  DS  CL44                     DCB REFERENCE TO DSN\n           AGO .TUDCBDD\n.TUDCBS#   ANOP\n           DC  X'002C,0001,0003'        DCB REFERENCE TO DSN (BELOW)\n&NM.DCBDS  DC  CL44'&DCBDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDD   AIF ('&DCBDD' EQ '').TUSUSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBD#\n           DS  XL6\n&NM.DCBDD  DS  CL8                      DCB REFERENCE TO DDNAME\n           AGO .TUSUSER\n.TUDCBD#   ANOP\n           DC  X'002D,0001,0008'\n&NM.DCBDD  DC  CL8'&DCBDD'              DCB REFERENCE TO DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSUSER   AIF ('&SUSER' EQ '').TUSHOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSUSE#\n           DS  XL6\n&NM.SUSER  DS  CL8                      SYSOUT DESTINATION\n           AGO .TUSHOLD\n.TUSUSE#   ANOP\n           DC  X'0058,0001,0008'\n&NM.SUSER  DC  CL8'&SUSER'              SYSOUT DESTINATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSHOLD   AIF ('&SHOLD' EQ '').TUMSVGP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSHOL#\n&NM.SHOLD  DS  XL4                      SYSOUT HOLD=YES\n           AGO .TUMSVGP\n.TUSHOL#   ANOP\n&NM.SHOLD  DC  X'0059,0000'             SYSOUT HOLD=YES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMSVGP   AIF ('&MSVGP' EQ '').TUSSNM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSNM    AIF ('&SSNM' EQ '').TUSSPRM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSPRM   AIF ('&SSPRM' EQ '').TUPROT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPROT    AIF ('&PROT' EQ '').TUBFALN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.*\n.*********************************************************************\n.***          DCB ATTRIBUTE TEXT UNITS - VERB CODE 01              ***\n.*********************************************************************\n.*\n.TUBFALN   AIF ('&BFALN' EQ '').TUBFTEK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFAL#\n&NM.BFALN  DS  XL7                      BFALN\n           AGO .TUBFTEK\n.TUBFAL#   AIF ('&BFALN' NE 'F').TUBFAL2\n&NM.BFALN  DC  X'002E,0001,0001,01'     BFALN=F\n           AGO .TUBFTEK\n.TUBFAL2   AIF ('&BFALN' NE 'D').TUBFTEK                        MI04303\n&NM.BFALN  DC  X'002E,0001,0001,02'     BFALN=D\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBFTEK   AIF ('&BFTEK' EQ '').TUBLKSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFTE#\n&NM.BFTEK  DS  XL7                      BFTEK\n           AGO .TUBLKSZ\n.TUBFTE#   AIF ('&BFTEK' NE 'D').TUBFTE2\n&NM.BFTEK  DC  X'002F,0001,0001,08'     BFTEK=D\n           AGO .TUBLKSZ\n.TUBFTE2   AIF ('&BFTEK' NE 'E').TUBFTE3\n&NM.BFTEK  DC  X'002F,0001,0001,10'     BFTEK=E\n           AGO .TUBLKSZ\n.TUBFTE3   AIF ('&BFTEK' NE 'R').TUBFTE4\n&NM.BFTEK  DC  X'002F,0001,0001,20'     BFTEK=R\n           AGO .TUBLKSZ\n.TUBFTE4   AIF ('&BFTEK' NE 'S').TUBFTE5\n&NM.BFTEK  DC  X'002F,0001,0001,40'     BFTEK=S\n           AGO .TUBLKSZ\n.TUBFTE5   AIF ('&BFTEK' NE 'A').TUBLKSZ\n&NM.BFTEK  DC  X'002F,0001,0001,60'     BFTEK=A\n           AGO .TUBLKSZ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKSZ   AIF ('&BLKSZ' EQ '').TUBUFIN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKS#\n           DS  XL6\n&NM.BLKSZ  DS  AL2                      BLKSIZE\n           AGO .TUBUFIN\n.TUBLKS#   ANOP\n           DC  X'0030,0001,0002'\n&NM.BLKSZ  DC  AL2(&BLKSZ)              BLKSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFIN   AIF ('&BUFIN' EQ '').TUBUFL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFI#\n           DS  XL6\n&NM.BUFIN  DS  AL1                      BUFIN\n           AGO .TUBUFL\n.TUBUFI#   ANOP\n           DC  X'0031,0001,0001'\n&NM.BUFIN  DC  AL1(&BUFIN)              BUFIN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFL    AIF ('&BUFL' EQ '').TUBUFMX\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFLA\n           DS  XL6\n&NM.BUFL   DC  AL2                      BUFL\n           AGO .TUBUFMX\n.TUBUFLA   ANOP\n           DC  X'0032,0001,0002'\n&NM.BUFL   DC  AL2(&BUFL)               BUFL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFMX   AIF ('&BUFMX' EQ '').TUBUFNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFM#\n           DS  XL6\n&NM.BUFMX  DS  AL1                      BUFMAX\n           AGO .TUBUFNO\n.TUBUFM#   ANOP\n           DC  X'0033,0001,0001'\n&NM.BUFMX  DC  AL1(&BUFMX)              BUFMAX\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFNO   AIF ('&BUFNO' EQ '').TUBUFOF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFN#\n           DS  XL6\n&NM.BUFNO  DC  AL1                      BUFNO\n           AGO .TUBUFOF\n.TUBUFN#   ANOP\n           DC  X'0034,0001,0001'\n&NM.BUFNO  DC  AL1(&BUFNO)              BUFNO\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOF   AIF ('&BUFOF' EQ '').TUBUFOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&BUFOF' NE 'L').TUBUFO2\n           AIF ('&MAP' NE 'ONLY').TUBUFF#\n&NM.BUFOF  DS  XL7                      BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFF#   ANOP\n&NM.BUFOF  DC  X'0035,0001,0001,80'     BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFO2   ANOP\n           AIF ('&MAP' NE 'ONLY').TUBUF##\n           DS  XL6\n&NM.BUFOF  DS  AL1                      BUFOFF\n           AGO .TUBUFOU\n.TUBUF##   ANOP\n           DC  X'0035,0001,0001'\n&NM.BUFOF  DC  AL1(&BUFOF)              BUFOFF\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOU   AIF ('&BUFOU' EQ '').TUBUFRQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFO#\n           DS  XL6\n&NM.BUFOU  DS  AL1                      BUFOUT\n           AGO .TUBUFRQ\n.TUBUFO#   ANOP\n           DC  X'0036,0001,0001'\n&NM.BUFOU  DC  AL1(&BUFOU)              BUFOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFRQ   AIF ('&BUFRQ' EQ '').TUBUFSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFR#\n           DS  XL6\n&NM.BUFRQ  DS  AL1                      BUFRQ\n           AGO .TUBUFSZ\n.TUBUFR#   ANOP\n           DC  X'0037,0001,0001'\n&NM.BUFRQ  DC  AL1(&BUFRQ)              BUFRQ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFSZ   AIF ('&BUFSZ' EQ '').TUCODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFS#\n           DS  XL6\n&NM.BUFSZ  DS  AL2                      BUFSIZE\n           AGO .TUCODE\n.TUBUFS#   ANOP\n           DC  X'0038,0001,0002'\n&NM.BUFSZ  DC  AL2(&BUFSZ)              BUFSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCODE    AIF ('&CODE' EQ '').TUCPRI\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCPRI    AIF ('&CPRI' EQ '').TUDEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDEN     AIF ('&DEN' EQ '').TUDSORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDENA\n&NM.DEN    DS  XL7                      DEN\n           AGO .TUDSORG\n.TUDENA    AIF ('&DEN' NE '0').TUDE2\n&NM.DEN    DC  X'003B,0001,0001,03'     DEN=0  (200 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE2     AIF ('&DEN' NE '1').TUDE3\n&NM.DEN    DC  X'003B,0001,0001,43'     DEN=1  (556 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE3     AIF ('&DEN' NE '2').TUDE4\n&NM.DEN    DC  X'003B,0001,0001,83'     DEN=2  (800 BPI, 7/9-TRACK)\n           AGO .TUDSORG\n.TUDE4     AIF ('&DEN' NE '3').TUDE5\n&NM.DEN    DC  X'003B,0001,0001,C3'     DEN=3  (1600 BPI, 9-TRACK)\n           AGO .TUDSORG\n.TUDE5     AIF ('&DEN' NE '4').TUDSORG\n&NM.DEN    DC  X'003B,0001,0001,D3'     DEN=4  (6250 BPI, 9-TRACK)\n           AGO .TUDSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSORG   AIF ('&DSORG' EQ '').TUEROPT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSOR#\n&NM.DSORG  DS  XL8                      DSORG\n           AGO .TUEROPT\n.TUDSOR#   AIF ('&DSORG' NE 'VS').TUDSOR2\n&NM.DSORG  DC  X'003C,0001,0002,0008'   DSORG=VS\n           AGO .TUEROPT\n.TUDSOR2   AIF ('&DSORG' NE 'TQ').TUDSOR3\n&NM.DSORG  DC  X'003C,0001,0002,0020'   DSORG=TQ\n           AGO .TUEROPT\n.TUDSOR3   AIF ('&DSORG' NE 'TX').TUDSOR4\n&NM.DSORG  DC  X'003C,0001,0002,0040'   DSORG=TX\n           AGO .TUEROPT\n.TUDSOR4   AIF ('&DSORG' NE 'GS').TUDSOR5\n&NM.DSORG  DC  X'003C,0001,0002,0080'   DSORG=GS\n           AGO .TUEROPT\n.TUDSOR5   AIF ('&DSORG' NE 'PO').TUDSOR6\n&NM.DSORG  DC  X'003C,0001,0002,0200'   DSORG=PO\n           AGO .TUEROPT\n.TUDSOR6   AIF ('&DSORG' NE 'POU').TUDSOR7\n&NM.DSORG  DC  X'003C,0001,0002,0300'   DSORG=POU\n           AGO .TUEROPT\n.TUDSOR7   AIF ('&DSORG' NE 'MQ').TUDSOR8\n&NM.DSORG  DC  X'003C,0001,0002,0400'   DSORG=MQ\n           AGO .TUEROPT\n.TUDSOR8   AIF ('&DSORG' NE 'CQ').TUDSOR9\n&NM.DSORG  DC  X'003C,0001,0002,0800'   DSORG=CQ\n           AGO .TUEROPT\n.TUDSOR9   AIF ('&DSORG' NE 'CX').TUDSORA\n&NM.DSORG  DC  X'003C,0001,0002,1000'   DSORG=CX\n           AGO .TUEROPT\n.TUDSORA   AIF ('&DSORG' NE 'DA').TUDSORB\n&NM.DSORG  DC  X'003C,0001,0002,2000'   DSORG=DA\n           AGO .TUEROPT\n.TUDSORB   AIF ('&DSORG' NE 'DAU').TUDSORC\n&NM.DSORG  DC  X'003C,0001,0002,2100'   DSORG=DAU\n           AGO .TUEROPT\n.TUDSORC   AIF ('&DSORG' NE 'PS').TUDSORD\n&NM.DSORG  DC  X'003C,0001,0002,4000'   DSORG=PS\n           AGO .TUEROPT\n.TUDSORD   AIF ('&DSORG' NE 'PSU').TUEROPT\n&NM.DSORG  DC  X'003C,0001,0002,4100'   DSORG=PSU\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEROPT   AIF ('&EROPT' EQ '').TUGNCP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEROP#\n&NM.EROPT  DS  XL7                      EROPT\n           AGO .TUGNCP\n.TUEROP#   AIF ('&EROPT' NE 'T').TUEROP2\n&NM.EROPT  DC  X'003D,0001,0001,10'     EROPT=T\n           AGO .TUGNCP\n.TUEROP2   AIF ('&EROPT' NE 'ABE').TUEROP3\n&NM.EROPT  DC  X'003D,0001,0001,20'     EROPT=ABE\n           AGO .TUGNCP\n.TUEROP3   AIF ('&EROPT' NE 'SKP').TUEROP4\n&NM.EROPT  DC  X'003D,0001,0001,40'     EROPT=SKP\n           AGO .TUGNCP\n.TUEROP4   AIF ('&EROPT' NE 'ACC').TUGNCP\n&NM.EROPT  DC  X'003D,0001,0001,80'     EROPT=ACC\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUGNCP    AIF ('&GNCP' EQ '').TUINTVL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUGNCPA\n           DS  XL6\n&NM.GNCP   DC  AL1                      GNCP\n           AGO .TUINTVL\n.TUGNCPA   ANOP\n           DC  X'003E,0001,0001'                                MI04303\n&NM.GNCP   DC  AL1(&GNCP)               GNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINTVL   AIF ('&INTVL' EQ '').TUKYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUKYLEN   AIF ('&KYLEN' EQ '').TULIMCT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUKYLE#\n           DS  XL6\n&NM.KYLEN  DS  AL1                      KEYLEN\n           AGO .TULIMCT\n.TUKYLE#   ANOP\n           DC  X'0040,0001,0001'\n&NM.KYLEN  DC  AL1(&KYLEN)              KEYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULIMCT   AIF ('&LIMCT' EQ '').TULRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULRECL   AIF ('&LRECL' EQ '').TUMODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULREC#\n           DS  XL6\n&NM.LRECL  DS  AL2                      LRECL\n           AGO .TUMODE\n.TULREC#   ANOP\n           DC  X'0042,0001,0002'\n&NM.LRECL  DC  AL2(&LRECL)              LRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMODE    AIF ('&MODE' EQ '').TUNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNCP     AIF ('&NCP' EQ '').TUOPTCD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNCPA\n           DS  XL6\n&NM.NCP    DS  AL1                      NCP\n           AGO .TUOPTCD\n.TUNCPA    ANOP\n           DC  X'0044,0001,0001'\n&NM.NCP    DC  AL1(&NCP)                NCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOPTCD   AIF ('&OPTCD' EQ '').TUPCIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOPTC#\n&NM.OPTCD  DS  XL7                      OPTCD\n           AGO .TUPCIR\n.TUOPTC#   AIF ('&OPTCD' NE 'W').TUPCIR\n&NM.OPTCD  DC  X'0045,0001,0001,80'     OPTCD=W\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIR    AIF ('&PCIR' EQ '').TUPCIS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIS    AIF ('&PCIS' EQ '').TUPRTSP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRTSP   AIF ('&PRTSP' EQ '').TURECFM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRTS#\n&NM.PRTSP  DS  XL7                      PRTSP\n           AGO .TURECFM\n.TUPRTS#   AIF ('&PRTSP' NE '0').TUPRTS2\n&NM.PRTSP  DC  X'0048,0001,0001,01'     PRTSP=0\n           AGO .TURECFM\n.TUPRTS2   AIF ('&PRTSP' NE '1').TUPRTS3\n&NM.PRTSP  DC  X'0048,0001,0001,09'     PRTSP=1\n           AGO .TURECFM\n.TUPRTS3   AIF ('&PRTSP' NE '2').TUPRTS4\n&NM.PRTSP  DC  X'0048,0001,0001,11'     PRTSP=2\n           AGO .TURECFM\n.TUPRTS4   AIF ('&PRTSP' NE '3').TURECFM\n&NM.PRTSP  DC  X'0048,0001,0001,19'     PRTSP=3\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURECFM   AIF ('&RECFM' EQ '').TURSRVF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURECF#\n&NM.RECFM  DS  XL7                      RECFM=F\n           AGO .TURSRVF\n.TURECF#   AIF ('&RECFM' NE 'F').TURECF2\n&NM.RECFM  DC  X'0049,0001,0001,80'     RECFM=F\n           AGO .TURSRVF\n.TURECF2   AIF ('&RECFM' NE 'FA').TURECF3\n&NM.RECFM  DC  X'0049,0001,0001,84'     RECFM=FA\n           AGO .TURSRVF\n.TURECF3   AIF ('&RECFM' NE 'FB').TURECF4\n&NM.RECFM  DC  X'0049,0001,0001,90'     RECFM=FB\n           AGO .TURSRVF\n.TURECF4   AIF ('&RECFM' NE 'FBA').TURECF5\n&NM.RECFM  DC  X'0049,0001,0001,94'     RECFM=FBA\n           AGO .TURSRVF\n.TURECF5   AIF ('&RECFM' NE 'V').TURECF6\n&NM.RECFM  DC  X'0049,0001,0001,40'     RECFM=V\n           AGO .TURSRVF\n.TURECF6   AIF ('&RECFM' NE 'VB').TURECF7\n&NM.RECFM  DC  X'0049,0001,0001,50'     RECFM=VB\n           AGO .TURSRVF\n.TURECF7   AIF ('&RECFM' NE 'U').TURSRVF\n&NM.RECFM  DC  X'0049,0001,0001,C0'     RECFM=U\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURSRVF   AIF ('&RSRVF' EQ '').TURSRVS\n.TURSRVS   AIF ('&RSRVS' EQ '').TUSOWA\n.TUSOWA    AIF ('&SOWA' EQ '').TUSTACK\n.TUSTACK   AIF ('&STACK' EQ '').TUTHRSH\n.TUTHRSH   AIF ('&THRSH' EQ '').TUTRTCH\n.TUTRTCH   AIF ('&TRTCH' EQ '').TUIPLTX\n.TUIPLTX   AIF ('&IPLTX' EQ '').TUDIAGN\n.TUDIAGN   AIF ('&DIAGN' EQ '').TUFUNC\n.TUFUNC    AIF ('&FUNC' EQ '').TUFRID\n.TUFRID    AIF ('&FRID' EQ '').TUPASSW\n.*\n.*********************************************************************\n.***       NON-JCL DYNAMIC ALLOCATION FUNCTIONS - VERB CODE 01     ***\n.*********************************************************************\n.*\n.*                                      ADDED 11/22/91  MST00JB\n.TUPASSW   AIF ('&PASSW' EQ '').TUPERMA\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPASW#\n&NM.PASKY  DS  XL6\n&NM.PASSW  DS  CL8                      PASSWORD\n           AGO .TUPERMA\n.TUPASW#   ANOP\n           AIF (&PASSL EQ 1).PASS1\n           AIF (&PASSL EQ 2).PASS2\n           AIF (&PASSL EQ 3).PASS3\n           AIF (&PASSL EQ 4).PASS4\n           AIF (&PASSL EQ 5).PASS5\n           AIF (&PASSL EQ 6).PASS6\n           AIF (&PASSL EQ 7).PASS7\n           AIF (&PASSL EQ 8).PASS8\n           MNOTE 8,'PASSL MUST BE SPECIFIED WHEN USING PASSW PARM'\n           MNOTE 8,'VALID VALUES FOR PASSL ARE 1 - 8'\n           MEXIT\n.PASS1     ANOP\n&NM.PASKY  DC  X'0050,0001,0001'\n&NM.PASSW  DC  CL1'&PASSW'\n           AGO .TUPERMA\n.PASS2     ANOP\n&NM.PASKY  DC  X'0050,0001,0002'\n&NM.PASSW  DC  CL2'&PASSW'\n           AGO .TUPERMA\n.PASS3     ANOP\n&NM.PASKY  DC  X'0050,0001,0003'\n&NM.PASSW  DC  CL3'&PASSW'\n           AGO .TUPERMA\n.PASS4     ANOP\n&NM.PASKY  DC  X'0050,0001,0004'\n&NM.PASSW  DC  CL4'&PASSW'\n           AGO .TUPERMA\n.PASS5     ANOP\n&NM.PASKY  DC  X'0050,0001,0005'\n&NM.PASSW  DC  CL5'&PASSW'\n           AGO .TUPERMA\n.PASS6     ANOP\n&NM.PASKY  DC  X'0050,0001,0006'\n&NM.PASSW  DC  CL6'&PASSW'\n           AGO .TUPERMA\n.PASS7     ANOP\n&NM.PASKY  DC  X'0050,0001,0007'\n&NM.PASSW  DC  CL7'&PASSW'\n           AGO .TUPERMA\n.PASS8     ANOP\n&NM.PASKY  DC  X'0050,0001,0008'\n&NM.PASSW  DC  CL8'&PASSW'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPERMA   AIF ('&PERMA' EQ '').TUCNVRT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPERM#\n&NM.PERMA  DS  XL4                      PERMANENT ALLOCATION\n           AGO .TUCNVRT\n.TUPERM#   ANOP\n&NM.PERMA  DC  X'0052,0000'             PERMANENT ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCNVRT   AIF ('&CNVRT' EQ '').TURTDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCNVR#\n&NM.CNVRT  DS  XL4                      CONVERTABLE ALLOCATION\n           AGO .TURTDDN\n.TUCNVR#   ANOP\n&NM.CNVRT  DC  X'0053,0000'             CONVERTABLE ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDDN   AIF ('&RTDDN' EQ '').TURTDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.RTDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TURTDSN\n.TURTDD#   ANOP\n           DC  X'0055,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.RTDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDSN   AIF ('&RTDSN' EQ '').TURTORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.RTDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TURTORG\n.TURTDS#   ANOP\n           DC  X'0056,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.RTDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTORG   AIF ('&RTORG' EQ '').TURTVOL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTOR#\n           DS  XL6\n&NM.RTORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTVOL\n.TURTOR#   DC  X'0057,0001,0002'\n&NM.RTORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTVOL   AIF ('&RTVOL' EQ '').TUREMOV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTVO#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED VOLSER\n&NM.RTVOL  DS  CL6                      RETURNED VOLSER\n           AGO .TUREMOV\n.TURTVO#   ANOP\n           DC  X'005D,0001'\n           DC  XL2'0006'                LEN OF RETURNED VOLSER\n&NM.RTVOL  DC  CL6' '                   RETURNED VOLSER\n.*\n.*********************************************************************\n.***       UNALLOCATE - VERB CODE 02                               ***\n.*********************************************************************\n.*\n.TUREMOV   AIF ('&REMOV' EQ '').TUUNALC\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUREMO#\n&NM.REMOV  DS  XL4                      REMOVE INUSE EVEN IF PERMANENT\n           AGO .TUUNALC\n.TUREMO#   ANOP\n&NM.REMOV  DC  X'0008,0000'             REMOVE INUSE EVEN IF PERMANENT\n.*\n.TUUNALC   AIF ('&UNALC' EQ '').TUTCBAD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNAL#\n&NM.UNALC  DS  XL4                      UNALLOCATE EVEN IF PERMANENT\n           AGO .TUTCBAD\n.TUUNAL#   ANOP\n&NM.UNALC  DC  X'0007,0000'             UNALLOCATE EVEN IF PERMANENT\n.*\n.*********************************************************************\n.***       REMOVE IN-USE ATTRIBUTE - VERB CODE 05                  ***\n.*********************************************************************\n.*\n.TUTCBAD   AIF ('&TCBAD' EQ '').TUINDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTCBA#\n           DS  XL6\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n           AGO .TUINDDN\n.TUTCBA#   ANOP\n           DC  X'0001,0001,0004'\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n.*\n.*********************************************************************\n.***       RETURN INFORMATION - VERB CODE 07                       ***\n.*********************************************************************\n.*\n.TUINDDN   AIF ('&INDDN' EQ '').TUINDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.INDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TUINDSN\n.TUINDD#   ANOP\n           DC  X'0004,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.INDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINDSN   AIF ('&INDSN' EQ '').TUINORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.INDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TUINORG\n.TUINDS#   ANOP\n           DC  X'0005,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.INDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINORG   AIF ('&INORG' EQ '').TURTMEM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOR#\n           DS  XL6\n&NM.INORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTMEM\n.TUINOR#   DC  X'000A,0001,0002'\n&NM.INORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTMEM   AIF ('&RTMEM' EQ '').TURTSTA\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTME#\n           DS  XL6\n&NM.RTMEM  DS  CL8                      RETURNED MEMBER NAME\n           AGO .TURTSTA\n.TURTME#   ANOP\n           DC  X'0006,0001,0008'\n&NM.RTMEM  DC  CL8' '                   RETURNED MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTSTA   AIF ('&RTSTA' EQ '').TURTNDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTST#\n           DS  XL6\n&NM.RTSTA  DS  XL1                      RETURNED DATASET STATUS\n           AGO .TURTNDP\n.TURTST#   ANOP\n           DC  X'0007,0001,0001'\n&NM.RTSTA  DS  XL1'00'                  RETURNED DATASET STATUS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTNDP   AIF ('&RTNDP' EQ '').TURTCDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTND#\n           DS  XL6\n&NM.RTNDP  DS  XL1                      RETURNED NORMAL DISP\n           AGO .TURTCDP\n.TURTND#   ANOP\n           DC  X'0008,0001,0001'\n&NM.RTNDP  DS  XL1'00'                  RETURNED NORMAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTCDP   AIF ('&RTCDP' EQ '').TURTLIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTCD#\n           DS  XL6\n&NM.RTCDP  DS  XL1                      RETURNED CONDITIONAL DISP\n           AGO .TURTLIM\n.TURTCD#   ANOP\n           DC  X'0009,0001,0001'\n&NM.RTCDP  DS  XL1'00'                  RETURNED CONDITIONAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLIM   AIF ('&RTLIM' EQ '').TURTATT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLI#\n           DS  XL6\n&NM.RTLIM  DS  XL2                      RETURNED LIMIT SPECIFICATION\n           AGO .TURTATT\n.TURTLI#   ANOP\n           DC  X'000B,0001,0002'\n&NM.RTLIM  DS  XL2'0000'                RETURNED LIMIT SPECIFICATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTATT   AIF ('&RTATT' EQ '').TURTLST\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTAT#\n           DS  XL6\n&NM.RTATT  DS  XL1                      RETURNED D.A. ATTRIBUTE\n           AGO .TURTLST\n.TURTAT#   ANOP\n           DC  X'000C,0001,0001'\n&NM.RTATT  DS  XL1'00'                  RETURNED D.A. ATTRIBUTE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLST   AIF ('&RTLST' EQ '').TURTTYP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLS#\n           DS  XL6\n&NM.RTLST  DS  XL1                      RETURNED LAST ENTRY SPEC.\n           AGO .TURTTYP\n.TURTLS#   ANOP\n           DC  X'000D,0001,0001'\n&NM.RTLST  DS  XL1'00'                  RETURNED LAST ENTRY SPEC.\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTTYP   AIF ('&RTTYP' EQ '').TURELNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTTY#\n           DS  XL6\n&NM.RTTYP  DS  XL1                      RETURNED DATASET TYPE\n           AGO .TURELNO\n.TURTTY#   ANOP\n           DC  X'000E,0001,0001'\n&NM.RTTYP  DS  XL1'00'                  RETURNED DATASET TYPE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURELNO   AIF ('&RELNO' EQ '').TUENDM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURELN#\n           DS  XL6\n&NM.RELNO  DS  XL2                      RETURNED RELATIVE REQUEST NO.\n           AGO .TUENDM\n.TURELN#   ANOP\n           DC  X'000F,0001,0002'\n&NM.RELNO  DS  XL2'0000'                RETURNED RELATIVE REQUEST NO.\n.*\n.*********************************************************************\n.***       MARK END OF LIST OF TEXT UNITS                          ***\n.*********************************************************************\n.*\n.TUENDM    AIF ('&MAP' NE 'ONLY').TUENDU#\n           DS  XL1                      END OF LIST MARKER\n           AGO .TUEND\n.TUENDU#   ANOP\n           DC  X'FF'                    END OF LIST MARKER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEND     ANOP\n.*\n**********************************************************************\n***        REQUEST BLOCKS FOR SVC99                                ***\n**********************************************************************\n*\n&NM.RBP    DS  A                        POINTER TO REQUEST BLOCK\n&NM.RB     DS  5A                       REQUEST BLOCK\n&NM.TUPL   DS  &TUPLEN.A                TEXT UNIT POINTER LIST\n*\n**********************************************************************\n***        DAIRFAIL PARAMETER BLOCK & MISCELLANEOUS STORAGE        ***\n**********************************************************************\n*\n&NM.DFPRM  DS  6F                       PARM BLOCK FOR IKJEFF18\n*\n&NM.S99RC  DS  F                        STORAGE AREA FOR SVC 99 R/C\n&NM.RSC    DS  0F                       STORAGE AREA FOR SVC 99 REASON\n&NM.ERROR  DS  XL2                      ERROR CODE\n&NM.INFO   DS  XL2                      INFO CODE\n           AIF ('&MAP' NE 'ONLY').DF2\n&NM.F02EP  DS  F                        STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DS  XL2                      DAIRFAIL SWITCHES & CALLER ID\n           AGO .DF3\n.DF2       ANOP\n&NM.F02EP  DC  F'0'                     STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DC  X'0032'                  DAIRFAIL SWITCHES & CALLER ID\n.DF3       ANOP\n*\n**********************************************************************\n***        EQUATE FOR TOTAL LENGTH                                 ***\n**********************************************************************\n*\n           DS  0D                       ALIGN FOR GETMAIN\n&NM.LEN    EQU *-&NM                    TOTAL LENGTH\n           MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDADOC": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\xec\\x00\\xec\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 236, "newlines": 236, "modlines": 0, "user": "AMDAHL"}, "text": "         MACRO\n&LABEL   GTEDADOC\n*\n*  +----------------------------------------------------------------+\n*  |  This is an explanation of the GTE Dynamic Allocation macros.  |\n*  |                                                                |\n*  |         Chuck Hoffman                                          |\n*  |         Systems Programming                                    |\n*  |         GTE Laboratories - Technical Computation Center        |\n*  |         40 Sylvan Road                                         |\n*  |         Waltham, MA  02254                                     |\n*  |                               617/466-2131  v/n 679-2131       |\n*  +----------------------------------------------------------------+\n*\n* PURPOSE:\n*     DAIR/IKJDAIR is now being maintained only for compatability with\n* older programs.  IBM states that all new applications should be\n* written using SVC-99 rather than DAIR.  The purpose of these macros\n* is to make the use of SVC-99 and IKJEFF18 (DAIRFAIL messages) easy\n* from assembler programs.\n*\n* REFERENCE:\n*     The user of these routines should have available the IBM manual:\n* 'GC28-0627, OS/VS2 MVS Systems Programming Library:  Job Management'\n* which describes SVC-99.  A detailed knowledge of SVC-99 is not\n* necessary.\n*\n* FUNCTION:\n*     GTEDADAT - Allocates space at assembly time for control blocks.\n*                Generates literals and constants.\n*     GTEDASET - Initializes control blocks at exection time.\n*     GTEDAALC - Invokes SVC-99 and IKJEFF18.\n*\n*\n* GTEDADAT - creating control blocks.\n*\n* 1.  The name of the control blocks is limited to three characters,\n*     because it is used as a prefix for data items in the generated\n*     control blocks.\n*                okay:  ABC      GTEDADAT ...\n*                  no:  ABCD     GTEDADAT ...\n*\n* 2.  The use of MAP=ONLY will produce DS entries without initializing\n*     the contents of the blocks.\n*          DC entries:  ABC      GTEDADAT ...\n*          DS entries:  ABC      GTEDADAT MAP=ONLY,...\n*\n* 3.  The names of text unit operands are the same as those used in the\n*     'Job Management' manual.  For instance, DSNAM and DDNAM rather\n*     than DSNAME and DDNAME.  By limiting operands to five characters,\n*     labels can be created using the 3-character block name as a\n*     prefix, followed by the 5-character (max) operand name.  The\n*     dataset name in the example in 2, above, would be labeled\n*     ABCDSNAM.\n*           -------------------------------------------------\n*           ---  There is one exception because IBM uses  ---\n*           ---  the same last 5 characters for infor-    ---\n*           ---  mation retrieval with two different      ---\n*           ---  SVC-99 verb codes.  If using the DSN     ---\n*           ---  Allocation SVC-99 verb (X'01') use the   ---\n*           ---  IBM names on the left.  If using the     ---\n*           ---  Information Retrieval SVC-99 verb (X'07')---\n*           ---  use the GTE names on the right:          ---\n*           ---                                           ---\n*           ---     DSN Alloc.        Info. Retrieval     ---\n*           ---       RTDDN              INDDN            ---\n*           ---       RTDSN              INDSN            ---\n*           ---       RTORG              INORG            ---\n*           -------------------------------------------------\n*\n* 4.  Text unit operands come in three flavors (refer to 'Job\n*     Management')\n*\n*     A.  Those for which an explicit value is supplied, e.g. DDNAME.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*\n*     B.  Those which are either on or off:  e.g. Space type TRK\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*         ----------------------------------------------------------\n*         ---  Note.  Information retrieval is in this category. ---\n*         ----------------------------------------------------------\n*\n*     C.  Those for which there is a choice which can be coded,\n*         e.g. Dataset organization.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES,DSORG=PS\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*                    +ADCDSORG DC     X'003C,0001,0002,4000'\n*\n*   NOTE 1. -\n*     Each operand generates a text unit which begins with a two-byte\n*     key.  Each operand generates a label.  The label may be at the\n*     key, as in ADCTRK and ADCDSORG, above, or it may be at the\n*     literal, as in ADCDDNAM, above.  Location of the label is based\n*     on a best guess of anticipated use of that text unit.\n*\n*   NOTE 2. -\n*     Setting a key value to X'0000' will cause SVC-99 to ignore that\n*     text unit.  After executing GTEDASET which builds a list of\n*     pointers to the text units, values in the text units can be\n*     changed at will.\n*\n*   NOTE 3. -\n*     At this time, not all operands generate executable code, and\n*     those which do may be in error.  If you discover errors or need\n*     new functions, call Systems Programming.\n*\n*\n* GTEDASET - setting addresses in control blocks\n*\n* 1.  This macro needs to be executed once before the GTEDAALC macro\n*     executes.  It simply links together the control blocks generated\n*     by GTEDADAT.  After this macro has been executed, there is no\n*     problem changing values in the control blocks.\n*\n* 2.  The CPPLPTR operand is the name of a fullword.  If the program is\n*     a TSO Command Processor, the fullword must contain the address of\n*     the Command Processor Parameter List (CPPL).  If the program is\n*     not a Command Processor, the fullword should contain the address\n*     of a fake CPPL, or ERRMSG=NO should be coded in the GTEDAALC\n*     macro (below).\n*\n*\n* GTEDAALC - executing SVC-99 and IKJEFF18\n*\n* 1.  This macro is executed once each time you want SVC-99 to\n*     execute.\n*\n* 2.  The choice of VERB= are as follows.  Again, keywords correspond\n*     to names in the 'Job Management' manual.\n*       VERB=AL  dsn allocation        VERB=UN  dsn or ddn unallocation\n*       VERB=CC  concatenation         VERB=DC  deconcatenation\n*       VERB=RI  remove in-use         VERB=DN  ddn allocation\n*       VERB=IN  information retrieveal\n*\n*     Concatenation and deconcatenation aren't yet supported, but they\n*     will be.\n*\n* 3.  This macro has the ERRMSG=NO operand to suppress creating code to\n*     return the SVC-99 failure messages to the TSO terminal.  Use this\n*     operand when the CPPLPTR operand of the GTEDASET macro points to\n*     a fullword which does not contain the address of a CPPL.  When\n*     this operand is used, the SVC-99 return code and the error and\n*     info codes are still available to your program.  Only the writing\n*     of an error message to the terminal is suppressed.  E.g.:\n*\n*                         GTEDAALC  ADC,VERB=AL,ERRMSG=NO\n*\n*     Places the return and error/info codes in these areas:\n*\n*               +ADCS99RC DS     F        SVC-99 RETURN CODE\n*\n*               +ADCERROR DS     H        SVC-99 ERROR CODE\n*               +ADCINFO  DS     H        SVC-99 INFO CODE\n*\n*     The error and info codes are contiguous, and the error code is\n*     aligned on a fullword boundry.\n*\n*\n* MAPPING MACROS:\n*     The following mapping macros must appear in the source.  Base\n* registers do not need to be assigned.\n*\n*     IEFZB4D0                             Maps SVC-99 blocks\n*     IKJEFFDF DFDSECT=YES,DFDSEC2=YES     Maps IKJEFF18 control blocks\n* ---------------------------------------------------------------------\n         EJECT\n* ---------------------------------------------------------------------\n*                        *** EXAMPLE ***\n*\n* We want to allocate member CURVES of CAH0.PDS.DATA to file FT12F001,\n* and we want to allocate member SPLINE of the same dataset to file\n* FT14F001.  Dataset status should be SHR, and sequential organization\n* will be used.  Further, we want the program to be reenterable, so all\n* variable data will be located in storage obtained with GETMAIN.\n*\n* Choose operands for the GTEDADAT macro by reference to the 'Job\n* Management' manual.\n*\n*\n*\n*             PRINT NOGEN\n*    EXMPL1   LINKSAVE BASE=12,GETMAIN=YES           LINKAGE CNVNTNS\n*             LR    5,1                              HOLD CPPL ADDRESS\n*             GETMAIN R,LV=1024                      GET WORK STORAGE\n*             LR    11,1                             ADDRESSABILITY OF\n*             USING AREA1,11                           WORK STORAGE\n*              .       .\n*             ST    5,CPPLADDR                       SAVE CPPL ADDRESS\n*              .       .\n*              .       .\n*             MVC   XYZ(XYZLEN),ABC                  COPY TO WORK AREA\n*             GTEDASET XYZ,CPPLPTR=CPPLADDR          SET POINTERS\n*              .       .\n*              .       .\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT12F001\n*              .       .\n*              .       .\n*             MVC   XYZMEMBR,=C'SPLINE  '            CHANGE MEMBER NME\n*             MVC   XYZDDNAM,=C'FT14F001'            CHANGE FILE NAME\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT14F001\n*              .       .\n*              .       .\n*    ENDUP    FREEMAIN R,LV=1024,A=(11)              FREE STORAGE\n*             XR    15,15                            ZERO R/C\n*             LINKBACK                               LINKAGE CNVNTNS\n*              .       .\n*              .       .\n*              .       .\n*    ABC      GTEDADAT DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,              X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*    AREA1    DSECT\n*    CPPLADDR DS    F\n*    XYZ      GTEDADAT MAP=ONLY,DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,     X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*             IEFZB4D0\n*             IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n*             END\n* ---------------------------------------------------------------------\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GTEDASET": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00V\\x00V\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 86, "newlines": 86, "modlines": 0, "user": "AMDAHL"}, "text": "         MACRO\n&LABEL   GTEDASET &NM,&CPPLPTR=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   SET POINTERS AND DATA FOR DYNAMIC ALLOCATION IN DATA AREAS   ***\n***   CREATED BY MACRO GTEDADAT.                                   ***\n**********************************************************************\n*\n**********************************************************************\n***      PLACE ADDRESS OF S99RB INTO S99RBPTR.                     ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB                       ==> R1 POINTS TO S99RB\n         ST    1,&NM.RBP                          FILL IN S99RBPTR\n         OI    &NM.RBP,X'80'                      TURN ON HI BIT\n*\n**********************************************************************\n***      FILL IN S99RB REQUEST BLOCK.                              ***\n***      MAPPING MACRO IEFZB4D0 MUST APPEAR IN SOURCE.             ***\n**********************************************************************\n*\n         MVI   (S99RBLN-S99RB)(1),X'14'           FILL IN LENGTH\n         MVI   (S99VERB-S99RB)(1),X'00'           ZERO VERB CODE\n         XC    (S99FLAG1-S99RB)(4,1),(S99FLAG1-S99RB)(1)   ZERO FLAGS1\n         OI    (S99FLAG1-S99RB)(1),S99ONCNV       SET FLAGS1 OK CONVRT\n         OI    (S99FLAG1-S99RB)(1),S99NOMNT       SET FLAGS1 NO MOUNT\n         LA    2,&NM.TUPL                     ==> R2 POINTS TO TUPL\n         ST    2,(S99TXTPP-S99RB)(0,1)            TUPL ADDR INTO RB\n         XC    (S99FLAG2-S99RB)(4,1),(S99FLAG2-S99RB)(1)   ZERO FLAGS2\n*\n**********************************************************************\n***  BUILD TUPL.                                                   ***\n***  KEY OF LAST TEXT UNIT MUST BE X'FF..'                         ***\n**********************************************************************\n*\n         LA    1,&NM.TU                       ==> R1 POINTS TO TUNITS\n         XR    0,0                                CLEAR R0 FOR COUNTER\n         XR    15,15                              CLEAR R15 WORK REG\n*\nRBA&SYSNDX CLI (S99TUKEY-S99TUNIT)(1),X'FF'       IF KEY IS X'FF..'\n         BE    RBD&SYSNDX                           BRANCH OUT OF LOOP\n         ST    1,0(0,2)                           ADDR OF KEY TO TUPL\n         LA    2,4(0,2)                           INCR POINTER TO TUPL\n*\n         ICM   0,3,(S99TUNUM-S99TUNIT)(1)         TU NUM TO R0\n         LA    1,4(0,1)                           R1 POINTS BEYOND NUM\n         LTR   0,0                                IF TU NUM IS 0\n         BZ    RBA&SYSNDX                         PROCESS NEXT TU\n*\n         ICM   15,3,0(1)                          TU LEN TO R15\n         LA    1,2(15,1)                          PNT BEYND LEN & PARM\n         BCT   0,*-8                              DO FOR EACH LEN+PARM\n*\n         B     RBA&SYSNDX                         PROCESS NEXT TU\n*\nRBD&SYSNDX LA  15,4(0,0)                          POINT TO LAST\n         SR    2,15                                 TUPL ENTRY\n         OI    0(2),S99TUPLN                      MARK LAST TUPL ENTRY\n*\n**********************************************************************\n***  FILL IN THE DAIRFAIL PARAMETER BLOCK.                         ***\n***  IKJEFFDF DFDSECT=YES,DFDSEC2=YES MUST APPEAR IN SOURCE.       ***\n**********************************************************************\n*\n         MVC   &NM.DFPRM+(DFS99RBP-DFDSECTD)(4),&NM.RBP *PTR TO RB\n*\n         LA    1,&NM.S99RC\n         ST    1,&NM.DFPRM+(DFRCP-DFDSECTD)             *PTR TO S99RC\n*\n         LA    1,&NM.F02EP\n         ST    1,&NM.DFPRM+(DFJEFF02-DFDSECTD)          *PTR TO EP\n*\n         LA    1,&NM.ID\n         ST    1,&NM.DFPRM+(DFIDP-DFDSECTD)             *PTR TO SW+ID\n*\n         MVC   &NM.DFPRM+(DFCPPLP-DFDSECTD)(4),&CPPLPTR *PTR TO CPPL\n*\n         XC  &NM.DFPRM+(DFBUFP-DFDSECTD)(4),&NM.DFPRM+(DFBUFP-DFDSECTD)\n*                                                       *ZERO BUFF ADDR\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFUTL": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\xa2\\x00\\xa2\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 162, "newlines": 162, "modlines": 0, "user": "AMDAHL"}, "text": "IEFUTL   CSECT\n***********************************************************************\n*                                                                     *\n*        MODULE NAME =IEFUTL    PROGRAMMER - JIM BOYSEN/AMDAHL        *\n*                                                                     *\n*        FUNCTION:                                                    *\n*           ALLOW TSO SESSIONS TO BE DISCONNECTED AND THEN 622        *\n*           CANCEL ONCE DISCONNECT LIMIT HAS BEEN EXCEEDED.           *\n*           EXTEND JOB TIME FOR 20 MINUTE INCREMENTS AND ISSUE        *\n*           MESSAGE TO NOTIFY USER/OPERATOR OF THIS                   *\n*                                                                     *\n*        OPERATION: *                                                 *\n*                                                                     *\n*           ASSUME A 20 MINUTE DEFAULT WAIT TIME IN JWT PARMATER      *\n*               OF SMFPRM00.                                          *\n*                                                                     *\n*        ANALYZE SMF COMMON EXIT PARAMETER AREA.                      *\n*        DO A VTAM V NET COMMAND TO DISCONNECT THE TSO                *\n*        USER SO THEY CAN RECONNECT BASED ON THE VALUE IN             *\n*        TSOKEYXX IN SYS1.PARMLIB                                     *\n*                                                                     *\n*           ATTRIBUTES = SCHEDULER KEY 0, REENTRANT, SUPERVISOR       *\n*               STATE, ENABLED                                        *\n*                                                                     *\n*           LINKAGE = FROM INITIATOR VIA MODUL IEATLEXT               *\n*                                                                     *\n*           INPUT = REG 1 POINTS TO A LIST OF FULL WORDS THE FIRST    *\n*               OF WHICH POINTS TO THE SMF COMMON EXIT PARAMETER      *\n*               AREA DESCRIPPED IN SMF SPL                            *\n*                                                                     *\n*           OUTPUT = REG 15 - RETURN CODE                             *\n*                    REG 1 - TIME LIMIT EXTENSION                     *\n*                    USER COMMUNICATION FIELD - EXTENSION COUNT, AND  *\n*                    FIRST TIME X'FF' FLAG                            *\n*                                                                     *\n*                                                                     *\n*   MODIFICATIONS:                                                    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12)\n         BALR  R12,0\n         USING *,R12\n         LR    R11,R1              HOLD POINTER TO ADDRESS LIST FOR SMF\n         LR    R5,0                 SAVE REG 0\n         LA    R0,LENCON1           LENGTH OF GETMAIN REQUIRED FOR\n         GETMAIN  R,LV=(0)          WTOR AND WAIT ECB AND SAVE AREA.\n         LR    R7,R1                 USE 7 FOR DSECT BASE\n         USING WORK,R7              SET BASE FOR DSECT\n         LA    R8,SAVE\n         ST    R13,4(R8)\n         ST    R8,8(R13)\n         LR    R9,R13                HOLD OLD SAVE ADDRESS\n         LR    R13,R8\n         L     R3,0(R11)             ADDR OF JOBNAME\n         CH    R5,=H'8'             IS THIS WAIT TIME?\n         BNE   GOOD                NO - MUST BE CPU, LETS GET OUT\n         TM    29(R3),R3             IS IT FOREGROUND?\n         BZ    BATCH               MUST BE BACKGROUND, LET DO BATCH\nTSODISC  DS    0H\n         MVC   24(4,R9),TSOTIME      EXTEND FOR 20 MINUTES\n         MVC   16(4,R9),=XL4'8'      RESET FOR DISCONNECT\n         ST    R5,SAVER5\n         ST    R8,SAVER8\n         MVC   USERID(8),BLANKS      BLANK OUT USER ID\n         MVC   USERID(7),0(R3)       MOVE JOBNAME TO USER ID\n         LOCJOB JOBNAME=USERID,NOFIND=LOGOFF    GET ASCB OF USER\n         LR    R5,R1                 LOAD ADDRESS OF ASCB\n         USING ASCB,R5               ADDRESSABILITY\n         L     R8,ASCBTSB            GET ADDRESS OF TSB\n         DROP  R5\n         USING TSB,R8                ADDRESSABILITY\n         L     R5,TSBEXTNT           GET THE TSBX ADDRESS\n         DROP  R8\n         USING TSBX,R5               ADDRESSABILITY\n         L     R8,TSBXTVWA           GET TVWA ADDRESS\n         USING TVWA,R8               ADDRESSABILITY\n         MVC   CMDD,CMDC             MOVE TO DSECT AREA\n         MVC   LUNAME(7),TVWAPPL+1   MOVE LU NAME TO COMMAND\n         LA    R1,CMDD               LOAD PARM FOR SVC34\n         SR    R0,R0\n         SVC   34\n         L     R5,SAVER5\n         L     R8,SAVER8\n         DROP  R5,R8\n         B     GOOD\nLOGOFF   DS    0H\n         MVC   16(4,R9),=XL4'0'      LOG THEM OFF\n         B     GOOD\nBATCH    DS    0H                    BATCH PROCESSING\n         MVC   WTOWORK,MESSAGE       MOVE WTO MESSAGE\n         MVC   JOBN(8),0(R3)         MOVE THE JOB NAME\n         LA    R1,WTOWORK            MOVE WTO MESSAGE\n         SVC   35                    ISSUE WTO SVC\n         MVC   24(4,R9),BCHTIME      EXTEND FOR 20 MINUTES\n         MVC   16(4,R9),=XL4'8'      EXTEND IN SECONDS\nGOOD     LR    R1,R7\n         LA    R0,LENCON1\n         L     R13,SAVE+4\n         FREEMAIN R,LV=(0),A=(1)\n         RETURN (14,12)\n         TITLE 'CONSTANTS'\nBLANKS   DC    CL8'        '\nBCHTIME  DC    F'1200'               TIME IN SECONDS\nTSOTIME  DC    F'1200'               TIME IN SECONDS\n         DS    0F\nCMDC     DS    0CL64\n         DC    AL2(CMDENDC-*),H'0'\n         DC    C'V NET,TERM,NOTIFY=NO,TYPE='\n         DC    C'COND,LU1=        '\n         DC    CL17' '\nCMDENDC  EQU   *\nMESSAGE  DS    0F\nLENCON   DC    AL2(MESSLN-*)\n         DC    XL2'0'              FLAGS\n         DC    CL45'SMF0001 JOB XXXXXXXX  TIME EXPIRED - EXTENDED'\n         DC    CL15' FOR 20 MINUTES'\nMESSLN   EQU  *\nMESSLEN  EQU (*-MESSAGE)\nEYE      DC    AL1(L'CATCHER)\nCATCHER  DC    C'IEFUTL_V1.0_&SYSDATE._&SYSTIME.'\n         DC    C'JIM BOYSEN.AMDAHL'\n         LTORG\n         TITLE 'SAVE AREA AND DSECTS'\nWORK     DSECT\nSAVE     DS    18F\nUSERID   DS    CL8\nSAVER5   DS    F\nSAVER8   DS    F\nCMDD     DS    0CL64\n         DS    CL39\nLUNAME   DS    CL8\n         DS    CL17\nWTOWORK  DS    0CL64\n         DS    CL16\nJOBN     DS    CL8\n         DS    CL40\nWTOLEN   EQU   *-WTOWORK\n         DS    0D                  DOUBLE WORD ALINE FOR GETMAIN\nLENCON1  EQU   *-WORK         LENGTH OF GETMAIN\n         PRINT NOGEN\n         TITLE 'MAPPING MACROS FOR TSO/VTAM AREAS'\n         IHAASCB              ASCB MAPPING MACRO\n         IKJTSB EXT=YES       TSB AND EXTENSION MAPPING MACRO\n         IKTTVWA              TSO/VTAM WORK AREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL$": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x19\\x00\\x19\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK,RENT'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=YOUR.SOURCE(IEFUTL)\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//    PARM=(XREF,LET,LIST,RENT,REUS,'AC=1')\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LPALIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME IEFUTL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCICS": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x01C\\x01C\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 323, "newlines": 323, "modlines": 0, "user": "AMDAHL"}, "text": "*********************************************************************\n*  FUNCTION - LIST DATASETS ALLOCATED TO CICS DDNAME DFHRPL         *\n*             OR IF LOAD MODULE SPECIFIED, SEARCH THROUGH THE       *\n*             DATASETS FOR THE LOAD MODULE AND DISPLAY DATASET(S)   *\n*             WHERE FOUND.  CALLS LCICSXM TO OBTAIN TIOT AND DSNS   *\n*             FROM SECONDARY ADDRESS SPACE (CICS).                  *\n*             USES SVC 235 FOR AUTH, CHANGE FOR ENVIRONMENT         *\n*             BOYSEN/AMDAHL   02/94                                 *\n*             REMOVE SVC 235 AUTH CALL WHICH IS NO LONGER REQUIRED  *\n*             AS LONG AS CMD NAME IS IN IKJTSO00                    *\n*             BOYSEN/AMDAHL   10/94                                 *\n*                                                                   *\n*  SYNTAX   - LCICS CICSTEST PRINT      LIST DFHRPL ALLOCATIONS     *\n*             LCICS CICSTEST CICSPROG   SEARCH REGION CICSTEST FOR  *\n*                                       MODULE CICSPROG AND REPORT  *\n*                                       WHICH DSN(S) WHERE FOUND    *\n*                                                                   *\n*********************************************************************\nLCICS    CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLCICS    CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n*\n         LR    R3,R1                    SAVE CPPL ADDR\n         LA    R1,ERASE                 POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE               GET THE LENGTH\n         TPUT  (1),(0),FULLSCR          ERASE THE 3270 SCREEN\n         USING CPPL,R3                  MAP CPPL\n         GETMAIN R,LV=WORKLEN           GET WORK AREA\n         LR    R10,R1                   SAVE AREA ADDR IN R10\n         USING WORK,R10\n         LA    R5,PARSPARM\n         USING PPL,R5\n         XC    PARSE(PARSELEN),PARSE    INITIALIZE PPL\n         MVC   PPLUPT,CPPLUPT           UPT\n         MVC   PPLECT,CPPLECT           ECT\n         MVC   PPLCBUF,CPPLCBUF         CIB\n         DROP  R3\n         LA    R1,PARSECB               ECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)               PCL\n         ST    R1,PPLPCL\n         LA    R1,PARSANS               PDL\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R5))    CALL PARSE\n         DROP  R5\n         L     R10,PARSANS              OK ?\n         USING PDL,R10\n         LTR   R10,R10\n         BP    CHCKPARM                 YES, CONTINUE\n         TPUT  BADPARSE,17              PUT OUT BAD PARSE MSG\n         B     GOBACK\n*\nCHCKPARM DS    0H\n         GTEDASET ABC,CPPLPTR=CPPLADDR  SET POINTERS\n         L     R3,CICSPTR               LOAD PTR TO PASSED CICS NAME\n         LA    R2,CICSNAME\n         LH    R1,CICSLEN               LOAD LENGTH OF PARM\n         BCTR  R1,0\n         EX    R1,IKJMVC                MOVE THE PARM\n         L     R3,LOADPTR               LOAD PTR TO PASSED MOD NAME\n         LA    R2,CICSLOAD\n         LH    R1,LOADLEN               LOAD LENGTH OF PARM\n         BCTR  R1,0\n         EX    R1,IKJMVC                MOVE THE PARM\nSTARTIT  DS    0H\n         BAS   3,A31                    SET ADDRESSING MODE 31\n         LA    R5,PARMLIST              LOAD ADDRESS OF PARMLIST\n         USING XMPARMS,R5               ADDRESSABILITY\n         LOCJOB JOBNAME=CICSNAME,NOFIND=BADLOCAT\n         ST    R1,XMASCB                SAVE ADDRESS OF ASCB\n         MODESET MODE=SUP               SUP STATE PSW\n         LA    R0,1                     GET AX\n         AXSET AX=(R0)                  ... OF 1\n         ST    R0,HOLDAX                SAVE OLD AX FOR LATER\n         LOAD  EP=LCICSXM,              LOAD PRM LCICSXM               X\n               GLOBAL=(YES,P),          LOAD INTO PAGEABLE CSA         X\n               ERRET=GOBACK,            ERROR ROUTINE                  X\n               EOM=NO                   DELETE MODULE AT END-OF-TASK\n         ST    R0,XMEMADDR              SAVE ADDRESS OF ROUTINE\n         L     R6,XMASCB                ASCB OF TARGET ADDRESS SPACE\n         LH    R6,ASCBASID-ASCB(R6)     GET ASID OF JES FROM ASCB\n         ESAR  R2                       GET SECONDARY ADDR SPACE\n         ST    R2,HOLDSSAR              SAVE FOR LATER\n         SSAR  R6                       SET AS SECONDARY\n         L     R15,XMEMADDR             ENTRY POINT OF ROUTINE\n         LA    R1,DSNLIST               ADDRESS OF DSN LIST\n         ST    R1,XMDSNS                STORE IN PARM LIST\n         LA    R1,PARMLIST              LOAD ADDR OF PARMLIST\n         BASSM R14,R15                  INVOKE THE ROUTINE\n         LTR   R15,R15                  RC = 0 ?\n         BNZ   BADTIOT                  GET OUT\n         B     GOBACK                   RETURN TO CALLER\nBADLOCAT DS    0H                       TELL 'EM\n         B     BAD_LOC                  ... WE CANT FIND REGION\nBADTIOT  DS    0H                       COULD NOT GET TIOT\nGOBACK   DS    0H                       RETURN ROUTINE\n         L     R2,HOLDSSAR              RESTORE ORIGINAL\n         SSAR  R2                       ... ORIGINAL SSN\n         L     R0,HOLDAX                RESTORE\n         AXSET AX=(R0)                  ... OLD AX\n         MODESET MODE=PROB              RETURN TO PROB STATE\n         BAS   3,A24                    SET AMODE 24\n         DELETE EP=LCICSXM              DELETE FROM CSA\n         LA    R6,DSNLIST               LOAD ADDR OF DSN'S\n         LA    R5,35                    LOAD MAX INTO R5\n         CLC   CICSLOAD,=C'PRINT   '    PRINT DEFAULT ???\n         BNE   LOOKFOR                  NO\nTPUTLOOP DS    0H\n         TPUT  MSG3,L'MSG3              TPUT HEADER\n         TPUT  BLANK,L'BLANK            TPUT BLANK LINE\nTPUTIT   TPUT  0(R6),44                 TPUT THE DFHRPL NAMES\n         LA    R6,44(,R6)               NEXT ENTRY\n         CLI   0(R6),C' '               ANY MORE ENTRIES ?\n         BE    GETOUT                   NO\n         BCT   R5,TPUTIT                GO GET NEXT ENTRY\n         B     GETOUT                   LET'S GET OUT\nLOOKFOR  DS    0H                       LOOK FOR LOAD NAME IN DSN'S\n         MVC   ABCDSNAM(44),0(R6)       MOVE DSN NAME FOR SVC99\n         GTEDAALC ABC,VERB=AL           ALLOCATE INDIVIDUAL DD DSN(S)\n         CLC   ABCS99RC,=F'0'           DID WE ALLOCATE ?\n         BNE   ALLOC_ERROR              NO, PRINT ERROR\n         MVI   DBLWORD,X'80'            SET OPEN OPTION INPUT\n         OPEN  (LCICS001),MF=(E,DBLWORD)     OPEN PDS FOR BLDL\n         SR    R7,R7                    CLEAR R7\n         LA    R7,BLDLAREA              LOAD ADDR OF BLDL AREA\n         USING PDS2,R7                  ADDRESSABILITY TO DSECT\n         MVC   PDS2NAME,CICSLOAD        MOVE PASSED LOAD NAME\n         BLDL  LCICS001,BLDL_LIST       LOOK FOR LOAD MOD\n         B     *+4(R15)                 CHECK AND PROCESS RC'S\n         B     TPUT_DSN                 LOAD FOUND  RC=00\n         B     NEXTDSN                  LOAD NOT FOUND   RC=04\n         B     NEXTDSN                  RC=08\n         B     GOHOME                   SEVERE ERROR\nTPUT_DSN CLI   PRNTFLAG,PRINTED         HAVE WE PRINTED HEADER ?\n         BE    TPUT_DS2                 YES\n         MVC   MEMMSG2,CICSLOAD         MOVE LOAD NAME TO MSG\n         TPUT  MSG2,L'MSG2              TELL USER LOAD FOUND\n         TPUT  BLANK,L'BLANK            TPUT A BLANK LINE\n         MVI   PRNTFLAG,PRINTED         INDICATE HEADER PRINTED\n         MVI   FOUNDFLG,FOUNDIT         INDICATE LOAD FOUND\nTPUT_DS2 DS    0H\n         MVI   CICSDSN,C' '             BLANK OUT ...\n         MVC   CICSDSN+1(43),CICSDSN    LOAD LIB NAME\n         MVC   CICSDSN(44),0(R6)        MOVE THE LOAD LIB NAME\n         MVC   LENMOD+1,PDS2STOR        MOVE TO FULL WORD AREA\n         L     R1,LENMOD                LOAD ADDRESS OF MODULE LENGTH\n         LA    R2,HOLDSIZE              LOAD ADDRESS OF CHAR DISPLAY\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         MVC   MODSIZE,HOLDSIZE+2       MOVE DISPLAY TO PRINT LINE\n         TPUT  MSG4,L'MSG4              TPUT LOAD LIB INFO\n         B     NEXTDSN                  GET NEXT DSN\nALLOC_ERROR    DS  0H                   ALLOCATION ERROR MSG\n         MVI   ERRORDSN,C' '            MOVE BLANKS\n         MVC   ERRORDSN+1(43),ERRORDSN  DITTO\n         MVC   ERRORDSN(44),0(R6)       MOVE ERROR DSN\n         TPUT  MSG0,L'MSG0              TPUT ERROR MSG\nNEXTDSN  LA    R6,44(,R6)               NEXT ENTRY\n         CLI   0(R6),C' '               ANY MORE ENTRIES ?\n         BE    GOHOME                   NO\n         CLOSE (LCICS001)               CLOSE THE DSN\n         BCT   R5,LOOKFOR               GO GET NEXT ENTRY\nGOHOME   CLI   FOUNDFLG,FOUNDIT         WAS LOAD FOUND ?\n         BE    GETOUT                   YES\n         MVC   MEMMSG1,CICSLOAD         MOVE LOAD NAME TO MSG\n         TPUT  MSG1,L'MSG1              TELL USER LOAD FOUND\n         B     GETOUT                   JUMP OVER ERROR MSG\nBAD_LOC  TPUT  BADLOC,L'BADLOC          ... WE CAN'T FIND JES\nGETOUT   TPUT  BLANK,L'BLANK            TPUT BLANK LINE\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*\n*        HEX TRANSLATE ROUTINE\n*\nHEXDUMP  ST    R1,FWORD                 STORE INPUT REG INTO FWORD\n         UNPK  DUMMY(9),FWORD(5)        UNPACK TO ADD F ZONE DIGITS\n         TR    DUMMY(8),TRANTAB         TRANSLATE TO CORRECT CHARACTERS\n         MVC   0(8,R2),DUMMY            MOVE TO CALLER'S AREA\n         BR    R10                      EXIT\nFWORD    DS    F,CL1                    1 WORD + 1 BYTE OF GARBAGE\nDUMMY    DS    CL9\nHOLDSIZE DS    CL8' '                   HOLD MOD SIZE\nTRANTAB  DS    CL(X'F0')                NEVER USED\n         DC    C'0123456789ABCDEF'\nLENMOD   DS    F\n*\n*        CHANGE ADDRESSING MODES\n*\nA24      LA    3,0(3)                   CLEAR HIGH ORDER BIT\n         BSM   0,3\n*\nA31      O     3,=X'80000000'           SET HIGH ORDER BIT\n         BSM   0,3\n*\n*        STORAGE AREA\n*\nSAVEAREA DS    18F\nBADLOC   DC    CL25'BAD LOCATE OF CICS REGION'\nERASE    DC    X'27F5401D40'            USED TO CLEAR 3270 TERMINAL\nCICSNAME DC    CL8'        '            ADDRESS SPACE NAME\nCICSLOAD DC    CL8' '                   LOAD MOD NAME\nXMEMADDR DS    F                        HOLD AREA FOR PGM ADDR\nPARMLIST DS    0F,CL(XMPARMSL)          PARMLIST\nDSNLIST  DC    36CL44' '                LIST OF DSN'S 35 MAX + 1\nHOLDSSAR DS    F                        HOLD AREA FOR SASN\nHOLDAX   DS    F                        HOLD AREA FOR AX\nIKJMVC   MVC   0(*-*,R2),0(R3)          MOVE FOR EX\nMSG0     DS    0CL79\n         DC    CL21'*** ALLOCATE ERROR - '\nERRORDSN DC    CL44' '\n         DC    CL14' - NOT SEACHED'\nMSG1     DS    0CL54\n         DC    CL12'LOAD MODULE '\nMEMMSG1  DC    CL8' '\n         DC    CL14' NOT FOUND IN '\n         DC    CL7'DFHRPL '\n         DC    CL13'CONCATENATION'\nMSG2     DS    0CL61\n         DC    CL12'LOAD MODULE '\nMEMMSG2  DC    CL8' '\n         DC    CL10' FOUND IN '\n         DC    CL7'DFHRPL '\n         DC    CL13'CONCATENATION'\n         DC    CL11' DATASET(S)'\nMSG3     DC    CL17'DFHRPL DATASET(S)'\nBLANK    DC    CL2' '\nMSG4     DS    0CL62\nCICSDSN  DC    CL44' '\n         DC    CL5' '\n         DC    CL7'SIZE = '\nMODSIZE  DC    CL6' '\nCPPLADDR DS    F\nPRNTFLAG DC    X'00'\nPRINTED  EQU   X'80'\nFOUNDFLG DC    X'00'\nFOUNDIT  EQU   X'80'\nBADPARSE DC    CL17'BAD PARSE OF PARM'\nABC      GTEDADAT DSNAM=XX.YYY,DDNAM=LCICS001,                         X\n               CLOSE=YES,STATS=SHR,CNVRT=YES\nLCICS001 DCB   DDNAME=LCICS001,                                        X\n               DSORG=PO,                                               X\n               MACRF=R,                                                X\n               EODAD=GOBACK,                                           X\n               RECFM=FB,                                               X\n               LRECL=0,                                                X\n               BLKSIZE=0\nDBLWORD  DS    D\n                  DS  0H\nBLDL_LIST         DC  H'1'\nBLDL_LENGTH       DC  H'76'\nBLDLAREA          DC  CL76' '\nPCL      IKJPARM DSECT=PDL\nCICS     IKJIDENT 'CICS REGION NAME',UPPERCASE,FIRST=ALPHA,            X\n               MAXLNTH=8,OTHER=ALPHANUM,PROMPT='CICS REGION NAME',     X\n               HELP='VALID CICS REGION NAME'\nLOAD     IKJIDENT 'LOAD MODULE NAME',UPPERCASE,FIRST=ALPHA,            X\n               MAXLNTH=8,OTHER=ALPHANUM,DEFAULT='PRINT   ',            X\n               HELP='VALID LOAD MODULE NAME'\n         IKJENDP\n         TITLE 'COMMAND PROCESSOR PARAMETER LIST'\n         IKJCPPL\n         TITLE 'GETMAIN WORK AREA'\nWORK     DSECT\nPARSE    EQU   *\nPARSPARM DS    7A                       PPL\nPARSECB  DS    F                        ECB\nPARSANS  DS    A                        PDL\nPARSELEN EQU   *-PARSE\nWORKLEN  EQU   *-WORK\n         TITLE 'PARSE PARAMETER LIST'\n         IKJPPL\nPDL      DSECT\n         ORG   CICS\nCICSPTR  DS    A                       ADDRESS OF CICS REGION NAME\nCICSLEN  DS    H                       LENGTH OF NAME\nCICSFLAG DS    X                       FLAGS\nCICFOUND EQU   X'80'                   NAME PRESENT\n         ORG   LOAD\nLOADPTR  DS    A                       ADDRESS OF SEARCH LOAD MOD\nLOADLEN  DS    H                       LENGTH OF LOAD MOD NAME\nLOADFLAG DS    X                       FLAGS\nLOAFOUND EQU   X'80'                   LOAD MOD PRESENT\n*----------------------------------- PARM MAPPING FOR CROSS MEM\nXMPARMS  DSECT\nXMASCB   DS    F                     ASCB\nXMDSNS   DS    A                     ADDRESS OF DSNS\nXMPARMSL EQU   *-XMPARMS             LENGTH\n*----------------------------------- END OF PARM AREA\n         PRINT NOGEN\n         TITLE 'CVT MAPPING'\n         CVT   DSECT=YES\n         TITLE 'IKJEFF18 CONTROL BLOCKS'\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         TITLE 'ASCB MAPPING MACRO'\n         IHAASCB\n         TITLE 'PARTITIONED DATA SET ENTRY'\n         IHAPDS\n         TITLE 'SVC-99 CONTROL BLOCKS'\n         IEFZB4D0\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCICS$": {"ttr": 1794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x19\\x00\\x19\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=YOUR.SOURCE\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST,'AC=1')\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LCICS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCICS#": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "AMDAHL"}, "text": ")F FUNCTION -\n     DISPLAY DATASET(S) THAT ARE ALLOCATED TO DDNAME DFHRPL OR IF\n     SPECIFIED, SEARCH THROUGH DATASETS FOR THE SPECIFIED LOAD MODULE\n     AND DISPLAY WHAT DATASETS LOAD MODULE IS FOUND IN.\n)X SYNTAX -\n         LCICS REGION LOADNAME\n  REQUIRED - REGION\n  DEFAULT  - DISPLAY DATASETS ALLOCATED TO DFHRPL DDNAME.\n)O OPERAND -\n))REGION   - CICS REGION NAME OF WHICH DFHRPL WILL BE DISPLAY OR\n             SEARCHED.\n))LOADNAME - LOAD MODULE NAME TO SEARCH FOR.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCICSXM": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00g\\x00g\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 103, "newlines": 103, "modlines": 0, "user": "AMDAHL"}, "text": "*********************************************************************\n*  FINDS TIOT IN SECONDARY ADDRESS SPACE (CICS) AND RETURNS A       *\n*  TABLE OF DSN'S TO THE CALLING PROGRAM FOR THE DDNAME DFHRPL      *\n*  CALLED BY THE LCICS COMMAND                                      *\n*  BOYSEN/AMDAHL   03/94                                            *\n*********************************************************************\nLCICSXM  CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLCICSXM  CSECT\nLCICSXM  AMODE 31\nLCICSXM  RMODE ANY\n         SAVE  (14,12)                  SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         LR    R3,R1                    SAVE PARM ADDRESS\n         USING XMPARMS,R3               MAP PARMS\n*\nGETTIOT  DS    0H\n         L     R6,XMASCB                GET 2ND ASCB FROM PARM\n         L     R7,XMDSNS                ADDRESS OF TABLE OF DSNS\n         SAC   256                      GET INTO SECONDARY ADDR MODE\n         L     R6,ASCBASXB-ASCB(,R6)    ADDR OF ASXB IN SECONDARY ADDR\n         L     R6,ASXBFTCB-ASXB(,R6)    ADDR OF FIRST TCB\n         USING TCB,R6                   MAP TCB\nTCBLOOP  ICM   R8,15,TCBJPQ             ADDRESS OF JOB-PACK-AREA QUEUE\n         BZ    NEXTTCB                  =0, NO MODULES FOR THIS TCB\n         L     R10,TCBTIO-TCB(,R6)      SECONDARY TIOT ADDR\n         LA    R10,TIOENTRY-TIOT(,R10)  1ST DD SEGMENT IN TIOT\n         USING TIOENTRY,R10             ADDRESSABILTY TO TIOT\n         USING JFCB,R2                  ADDRESSABILTY TO JFCB\nLOOP1    CLC   LOADS(6),TIOEDDNM        IS IT THE DFHRPL DD ?\n         BNE   GETNEXT                  GET NEXT DD IN TIOT\nGETDSN   ICM   R2,7,TIOEJFCB            JFCB POINTER\n         LA    R2,16(R2)                FIX IT\n         LA    R5,L'JFCBDSNM            LOAD LENGTH OF MVCP\n         MVCP  0(R5,R7),JFCBDSNM,R4     MOVE DSNAME(S)\n         LA    R7,L'JFCBDSNM(,R7)       NEXT ENTRY IN DSN TABLE\nNEXTDSN  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    EXIT00                   NO->MORE DDNAMES IN TABLE\n         CLC   TIOEDDNM,=8C' '          PART OF OUR CONCAT ???\n*        BNE   LOOP1                    NO, GET OUT\n         BNE   EXIT00                   NO, GET OUT\n         B     GETDSN                   GET NEXT DSN IN CONCAT\nGETNEXT  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    EXIT00                   NO->MORE DDNAMES IN TABLE\n         B     LOOP1                    NO, KEEP ON GOING\n         B     EXIT00                   WE HAVE IT, LETS GO\nNEXTTCB  DS    0H\n         ICM   R6,15,TCBTCB             ADDR OF NEXT TCB ON TCB QUEUE\n         BNZ   TCBLOOP                  LET'S TRY THIS TCB\nEXIT00   DS    0H\n         SAC   0                        GET INTO PRIMARY ADDR MODE\n         LA    R15,X'00'                SET RETURN CODE 00\nGOBACK   DS    0H                       RETURN ROUTINE\n         RETURN (14,12)                 RESTORE REGS AND RETURN\n*\n*        SUBRTN TO MOVE R10 TO THE NEXT DD ENTRY IN THE TIOT\n*\nNEXTDD   SLR   R8,R8\n         IC    R8,0(,R10)            R8=LENGTH OF CURRENT DD ENTRY\n         LA    R10,0(R8,R10)         R10->NEXT DD ENTRY IN TIOT\n         BR    R14                   RETURN\n*\n*        STORAGE AREA\n*\nLOADS    DC    CL6'DFHRPL'\n*----------------------------------- PARM MAPPING FOR CROESS MEM\nXMPARMS  DSECT\nXMASCB   DS    F                     ASCB\nXMDSNS   DS    A                     ADDRESS OF DSN NAMES\nXMPARMSL EQU   *-XMPARMS             LENGTH\n*----------------------------------- END OF PARM AREA\n         PRINT NOGEN\n         TITLE 'TCB MAPPING'\n         IKJTCB\n         TITLE 'TIOT MAPPING'\nTIOT     DSECT\n         IEFTIOT1\n         TITLE 'JFCB MAPPING'\nJFCB     DSECT\n         IEFJFCBN\n         TITLE 'ASCB MAPPING'\n         IHAASCB\n         TITLE 'ASCB EXTENSION MAPPING'\n         IHAASXB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCICSXM$": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x19\\x00\\x19\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK,RENT'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=YOUR.SOURCE\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST,RENT,REUS)\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LCICSXM(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTV": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x01\\xf3\\x01\\xf3\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 499, "newlines": 499, "modlines": 0, "user": "AMDAHL"}, "text": "         TITLE 'LISTV COMMAND'\n**********************************************************************\n*  NAME        -   LISTV                                             *\n*                                                                    *\n*  FUNCTION    -   LIST VOLUME SPACE STATISTICS                      *\n*                                                                    *\n*  SYNTAX      -   LISTV 'SEARCH INDEX'  OR LISTV                    *\n*                                                                    *\n*  VERSION     -   1.0 FOR MVS 3.8 AND MVS/SE2                       *\n*                  VER XA.2 FOR MVS/SP 2.2                           *\n*                  VER XA.3 WITH OUTPUT MODS AND 3390 SUPPORT        *\n*                                                                    *\n*  DATE        -   6/1/80                                            *\n*                  2/21/90 VER XA.2                                  *\n*                  4/20/92 VER XA.3\n*                                                                    *\n*  INPUT       -   R1->CPPL                                          *\n*                                                                    *\n*  OUTPUT      -                                                     *\n*       VOLUME DEV USE <----- FREE ------> LARGEST    DEV            *\n*        NAME  ADR CNT CYL  TRK  NUM  DSCB CYL  TRK   TYPE  STATUS   *\n*       TONE01 14B 014 0040 0309 0149 0812 0007 0004 3380-K PRIVATE  *\n*                                                                    *\n*  REGS        -   R12 - BASE                                        *\n*                  R13 - SAVE AREA                                   *\n*                  R4  - WORK AREA                                   *\n*                  R10 - PDL                                         *\n*                                                                    *\n*  LOGIC       -                                                     *\n*                  1. ENTRANCE CONVENTIONS                           *\n*                  2. GETMAIN WORK AREA                              *\n*                  3. BUILD PARSE PARAMETER LIST                     *\n*                  4. INVOKE IKJPARS TO PARSE OPERAND                *\n*                  5. SCAN UCBS FOR SEARCH INDEX MATCH (DEFAULT=ALL) *\n*                  6. EXTRACT INFORMATION FROM UCB                   *\n*                  7. GET SPACE INFORMATION VIA LSPACE SVC           *\n*                  8. INVOKE RESIDENT CONVERT ROUTINE                *\n*                  9. PRINT DETAIL LINE TO TERMINAL                  *\n*                 10. IF MORE UCBS, GO TO 6                          *\n*                 11. EXIT CONVENTIONS                               *\n*                                                                    *\n*  MACROS      -   REGS      -   REGISTER EQUATES                    *\n*                  SAVE      -   ENTRANCE CONVENTIONS                *\n*                  GETMAIN   -   ACQUIRE VIRTUAL MEMORY              *\n*                  CALLTSSR  -   INVOKE TSO SERVICE ROUTINE          *\n*                  PUTLINE   -   TERMINAL OUTPUT                     *\n*                  IKJRLSA   -   RELEASE PARSE WORK AREA             *\n*                  FREEMAIN  -   FREE VIRTUAL MEMORY                 *\n*                  RETURN    -   EXIT CONVENTIONS                    *\n*                  IKJPARM   -   SETUP PARSE PCL                     *\n*                  IKJIDENT  -   SPECIFY POSITION PARAMETER          *\n*                  IKJENDP   -   END PARSE PCL                       *\n*                  LSPACE    -   GET SPACE INFO FROM UCB             *\n*                                                                    *\n*  DSECTS      -   CB OR AREA    DSECT NAME                          *\n*                  --            ----- ----                          *\n*                  CPPL          IKJCPPL                             *\n*                  CVT           CVT DSECT=YES,PREFIX=NO             *\n*                  UCB           IEFUCBOB                            *\n*                  PPL           IKJPPL                              *\n*                  PDL           PDL                                 *\n*                  WORK AREA     WORK                                *\n*                  MESSAGE AREA  LSPACE                              *\n*                  DCE           DCE                                 *\n*                                                                    *\n*  ERRORS      -   PARSE FAILURE                                     *\n*                  LSPACE FAILURE                                    *\n*                                                                    *\n*  PRIVILEGES  -   PROBLEM PROGRAM                                   *\n*                                                                    *\n*  DEPENDENCIES-   INTERFACE TO RESIDENT CONVERT ROUTINE             *\n*                  LSPACE PARAMETERS                                 *\n*                  VARIOUS MVS CONTROL BLOCKS                        *\n*                                                                    *\n*  INSTALL     -   ASSEMBLE LISTV                                    *\n*                  LINK LISTV                                        *\n*                  EXECUTE FORM LINKLST OR STEPLIB                   *\n*                                                                    *\n*  MODIFICATION -  ADDED DEVICE TYPE AND STATUS TO OUTPUT            *\n*                  REMOVE WAAMENTR MACRO CALL                        *\n*                  JIM BOYSEN/AMDAHL  JULY - 1992                    *\n*                                                                    *\n*                  ADDED 3390 DEVICE SUPPORT                         *\n*                  BOYSEN  OCTOBER - 1992                            *\n*                  ADDED 3390 MOD 2 AND 3 DISTINCTION                *\n*                  BOYSEN  AUGUST - 1993                             *\n*                  ADDED CLEAR 3270 SCREEN CODE BEFORE DISPLAY       *\n*                  BOYSEN FEB - 1994                                 *\n*                                                                    *\n**********************************************************************\n         TITLE 'LISTV - INITIALIZATION AND OPERAND PARSE'\nLISTV    CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLISTV    CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BALR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n*\n         LR    R3,R1                        SAVE CPPL ADDRESS\n         USING CPPL,R3\n         LA    R7,IOPLPARM                  ADDRESS IOPL FOR PUTLINE\n         USING IOPL,R7\n         L     R5,CPPLUPT                   LOAD AND\n         ST    R5,IOPLUPT                   SAVE UPT ADDR\n         L     R5,CPPLECT                   LOAD AND\n         ST    R5,IOPLECT                   SAVE ECT ADDR\n         LA    R5,ECB                       LOAD AND\n         ST    R5,IOPLECB                   SAVE ECB ADDRESS\n         DROP  R7\n*\n         GETMAIN R,LV=WORKLEN               GET WORK AREA\n         LR    R4,R1                        SAVE WORK AREA ADDRESS\n         USING WORK,R4\n         MVI   PRTFLAG,X'00'                CLEAR PRINT FLAG\n         LA    R5,PARSPARM                  GET PPL ADDRESS\n         USING PPL,R5\n         XC    PARSE(PARSELEN),PARSE        INITIALIZE PPL\n         MVC   PPLUPT,CPPLUPT               UPT\n         MVC   PPLECT,CPPLECT               ECT\n         MVC   PPLCBUF,CPPLCBUF             CIB\n         DROP  R3\n         LA    R1,PARSECB                   ECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)                   PCL\n         ST    R1,PPLPCL\n         LA    R1,PARSANS                   PDL\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R5))    CALL PARSE\n         DROP  R5\n         L     R10,PARSANS                  OK?\n         USING PDL,R10\n         LTR   R10,R10\n         BP    GOODPARS                     YES, CONTINUE\n         PUTLINE PARM=PUTLINE,                                         X\n               OUTPUT=(PARSERR,TERM,SINGLE,DATA),                      X\n               MF=(E,IOPLPARM)\n         B     RETURN\nGOODPARS EQU   *\n         GTSIZE\n         LTR   R0,R0               IS THIS A 3270 TYPE DEVICE\n         BZ    NOTTSO              NO - CANNOT BE MCS CONSOLE\n         LA    R1,ERASE            POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE          GET THE LENGTH\n         TPUT  (1),(0),FULLSCR     ERASE THE 3270 SCREEN\nNOTTSO   PUTLINE PARM=PUTLINE,                                         X\n               OUTPUT=(HEADER1,TERM,MULTLIN,DATA),                     X\n               MF=(E,IOPLPARM)\n         TITLE 'EXTRACT UCB INFORMATION'\nUCBPARM  DS    0H\n         GETMAIN R,LV=PARMLEN\n         LR    R3,R1                        SAVE WORKAREA ADDR\n         USING PARMWORK,R3\n         XC    WORKAREA,WORKAREA            CLEAR WORK AREA\n         LA    R5,WORKAREA                  LOAD AND\n         ST    R5,PARMWA                    STORE ADDR OF WORKAREA\n         LA    R5,DEVTYPE                   LOAD AND\n         ST    R5,PARMDEVT                  STORE ADDR OF DEV TYPE\n         MVI   DEVTYPE,UCB3DACC             SET DEV TYPE TO DASD\n         LA    R5,ADDRUCB                   LOAD AND\n         ST    R5,PARMUCB                   STORE ADDR OF UCB\n         OI    PARMUCB,X'80'                MARK END OF PARM\nSEARCH   DS    0H\n         L     R1,CVTPTR                    CVT ADDRESS\n         USING CVT,R1\n         L     R15,CVTUCBSC                 ENTRY TO IOSVSUCB\n         LA    R1,PARMLIST                  LOAD ADDR OF PARM\n         BALR  R14,R15                      LINK FOR UCB\n         LTR   R15,R15                      ANY UCB ?\n         BNZ   EXIT                         NO UCB OR DONE\n         L     R8,ADDRUCB                   GET RETURNED UCB ADDR\n         USING UCBOB,R8\nGOTUCB   DS    0H\n         TM    UCBTBYT3,UCB3DACC            DIRECT ACCESS?\n         BZ    SEARCH                       NO, OMIT\n         TM    UCBSTAT,UCBONLI              ONLINE?\n         BNO   SEARCH                       NO, IGNORE DEVICE\n         CLC   UCBTBYT3(2),=X'2005'         DATA CELL?\n         BE    SEARCH                       IF SO SKIP IT\n         TM    UCBVOLI,X'FF'                ANY VOLUME MOUNTED?\n         BZ    SEARCH                       NO, IGNORE IT\n         TM    VOLFLAG,VOLFOUND             SEARCH INDEX SPECIFIED?\n         BZ    USEUCB                       NO, USE UCB\n         L     R2,VOLPTR                    GET INDEX ADDRESS\n         LH    R1,VOLLEN                    GET INDEX LENGTH\n         BCTR  R1,0\n         EX    R1,COMPVOL                   INDEX SATISFIED?\n         BNE   SEARCH\n         BE    USEUCB                       YES, USE UCB\nCOMPVOL  CLC   0(*-*,R2),UCBVOLI\n*\nUSEUCB   MVC   VOLNAME,UCBVOLI              PRINT VOLUME NAME\n         MVC   UNITADDR,UCBNAME             GET UNIT ADDRESS\n         SR    R1,R1                        CLEAR A REG\n         LH    R1,UCBUSER                   GET USE COUNT\n         CVD   R1,DBLW                      CONVERT TO PRINT\n         UNPK  USECNT,DBLW+6(2)             PLACE IT ON THE LINE\n         OI    USECNT+2,X'F0'               FIX SIGN BITS\n         LA    R15,STCYLS                   GET DEVICE TABLE\nDEVLOC   DS    0H\n         CLC   UCBUNTYP,(STCYLS-STCYLS)(R15)\n         BE    DEVGOT\n         CLI   (STCYLS-STCYLS)(R15),X'FF'\n         BE    DEVGOT\n         LA    R15,(STCYLS1-STCYLS)(R15)  NEXT\n         B     DEVLOC                  LOOP\nDEVGOT   DS    0H\n         ST    R15,SAVE15\n         CLC   UCBUNTYP,=X'0E00'            IS IT A 3380 ?\n         BE    X3380                        YES\n         CLC   UCBUNTYP,=X'0F00'            IS IT A 3390 ?\n         BE    X3390                        YES\n         B     CHKSTAT                      CHECK DEVICE STATUS\nX3380    L     R6,UCBEXTPT                  LOAD UCB EXTENSION\n         USING UCBCMEXT,R6\n         L     R6,UCBCLEXT                  LOAD ADDRESS OF DCE\n         DROP  R6\n         USING DCE,R6\n         TM    DCEFLAG1,DCEVALFS            DEVICE FIELD VALID ?\n         BZ    MOVETYPE                     NO - MOVE 3380 TYPE\n         LH    R7,DCEUDCYL                  MAX NUMBER OF CYLINDERS\n         CH    R7,=H'1771'                  IS IT A 3380E ?\n         BNE   CHECKK\n         MVC   DEVKIND,=C'3380-E'\n         B     CHKSTAT\nCHECKK   CH    R7,=H'2656'                  IS IT A 3380K\n         BNE   MOVETYPE\n         MVC   DEVKIND,=C'3380-K'\n         B     CHKSTAT\nX3390    L     R6,UCBEXTPT                  LOAD UCB EXTENSION\n         USING UCBCMEXT,R6\n         L     R6,UCBCLEXT                  LOAD ADDRESS OF DCE\n         DROP  R6\n         USING DCE,R6\n         TM    DCEFLAG1,DCEVALFS            DEVICE FIELD VALID ?\n         BZ    MOVETYPE                     NO - MOVE 3390 TYPE\n         LH    R7,DCEUDCYL                  MAX NUMBER OF CYLINDERS\n         CH    R7,=H'2227'                  IS IT A 3390-2 ?\n         BNE   CHECK_M3\n         MVC   DEVKIND,=C'3390-2'\n         B     CHKSTAT\nCHECK_M3 CH    R7,=H'3340'                  IS IT A 3390-3 ?\n         BNE   MOVETYPE\n         MVC   DEVKIND,=C'3390-3'\n         B     CHKSTAT\nMOVETYPE L     R15,SAVE15\n         MVC   DEVKIND,(STCYLNAM-STCYLS)(R15)     DEV. NAME\nCHKSTAT  TM    UCBSTAB,UCBBPRV              PRIVATE ?\n         BO    MOVEPVT                      YES , MOVE OUTPUT\n         TM    UCBSTAB,UCBBPUB              PUBLIC  ?\n         BO    MOVEPUB                      YES,  MOVE PUBLIC\n         TM    UCBSTAB,UCBBSTR              STORAGE ?\n         BO    MOVESTR\n         B     SPACE_INFO\nMOVEPVT  MVC   DEVSTAT,=C'PRIVATE'          MOVE PRIVATE LITERAL\n         B     SPACE_INFO\nMOVEPUB  MVC   DEVSTAT,=C'PUBLIC '          MOVE PUBLIC LITERAL\n         B     SPACE_INFO\nMOVESTR  MVC   DEVSTAT,=C'STORAGE'          MOVE STORAGE LITERAL\n         TITLE 'EXTRACT SPACE INFORMATION USING LSPACE SVC'\n*\nSPACE_INFO    LA    R1,PARMFREE\n         LSPACE MF=(E,(1)),UCB=(R8),MSG=DBLW\n         LTR   R15,R15                      DID IT WORK?\n         BZ    SPCOK                        YES\n         PUTLINE PARM=PUTLINE,                                         X\n               OUTPUT=(VTOCERR,TERM,SINGLE,DATA),                      X\n               MF=(E,IOPLPARM)\n         B     RETURN\nPUTIT    PUTLINE PARM=PUTLINE,                                         X\n               OUTPUT=(DETAIL,TERM,SINGLE,DATA),                       X\n               MF=(E,IOPLPARM)\n         MVI   PRTFLAG,X'FF'                SAY WE HAVE DONE SOME\n         B     SEARCH                       NOW GO ON\n*\n*  LSPACE RETURNS ITS INFORMATION IN THE FORM:\n*        SPACE=CCCC,TTTT,AAAA/EEEE,KKKK\n*        1...5....1....5....2....5....3\n*  WHERE          0         0         0\n*        CCCC = TOTAL FREE CYLINDERS\n*        TTTT = TOTAL FREE TRACKS\n*        AAAA = TOTAL FREE AREAS\n*        EEEE = NUMBER OF CYLINDERS IN LARGEST FREE EXTENT\n*        KKKK = NUMBER OF TRACKS IN LARGEST FREE EXTENT\n*\nSPCOK    LA    R1,DBLW                      R1->MONITOR SPACE MSG AREA\n         USING LMSG,R1\n         MVC   TOTCYL,LSPMTEXT+6            CYL\n         MVI   TOTCYL+4,C'+'\n         MVC   TOTTRK,LSPMTEXT+11           TRK\n         MVC   TOTAREA,LSPMTEXT+16          EXTENTS\n         MVC   LARGECYL,LSPMTEXT+21         CYL (LARGEST)\n         MVI   LARGECYL+4,C'+'\n         MVC   LARGETRK,LSPMTEXT+26         TRK (LARGEST)\n         DROP  R1\n*\n         LA    R1,PARMF0S\n         LSPACE MF=(E,(1)),UCB=(R8),DATA=F0SCNT\n         LA    R2,F0SCNT\n         USING LDATA,R2\n         L     R1,LSPDF0S\n         CVD   R1,DBLW                      CONVERT IT\n         UNPK  FMT0S,DBLW+5(3)              AND MOVE TO THE LINE\n         MVI   FMT0S,C' '                   DON'T NEED HIGH BYTE\n         OI    FMT0S+4,X'F0'                FIX SIGN\n         MVI   DIRFFLG,C' '                 CLEAR DIRF FLAG INDICATOR\n         B     PUTIT                        NOW GO ON\n         TITLE 'EXIT CONVENTIONS'\nEXIT     TM    PRTFLAG,X'FF'                ANY VOLUMES SHOWN\n         BO    RETURN\n         PUTLINE PARM=PUTLINE,                                         X\n               OUTPUT=(NOINDEX,TERM,SINGLE,DATA),                      X\n               MF=(E,IOPLPARM)\nRETURN   IKJRLSA PARSANS                    FREE PDL\n         FREEMAIN R,LV=WORKLEN,A=(R4)       FREE PARSE WORK AREA\n         FREEMAIN R,LV=PARMLEN,A=(R3)       FREE UCB SCAN WORK AREA\n         DROP  R4,R10,R3\nENDIT    DS    0H\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*  SAVE AREA\nSAVEAREA DS    18F\nSAVE15   DS    F\nERASE    DC    X'27F5401D40'       USED TO CLEAR 3270 TERMINAL BUFFER\n*  DEVICE CHARACTERISTICS TABLE\nSTCYLS   DS    0H                  TABLE OF DEVICE TYPE TO MAX. CYLS\n         DC    X'0900'             DEVICE TYPE\nSTCYLMAX EQU   *\n         DC    H'404'              MAX CYLS\nSTCYLNAM EQU   *\n         DC    CL5'3330 '          EBCDIC NAME\nSTCYLTRK EQU   *\n         DC    H'19'               TRACKS PER CYLINDER\nSTCYLTTK EQU   *\n         DC    AL2(404*19)         TRACKS PER VOL\nSTCYLS1  DS    0H                  FOR SIZE OF ENTRY CALC\n         DC    X'0D00',H'0808',CL6' 3331 ',H'19',AL2(0808*19)\n         DC    X'0B00',H'0555',CL6' 3350 ',H'30',AL2(0555*30)\n         DC    X'0800',H'0200',CL6' 2314 ',H'20',AL2(0200*20)\n         DC    X'0A00',H'0696',CL6' 3340 ',H'12',AL2(0696*12)\n         DC    X'0C00',H'0959',CL6' 3375 ',H'12',AL2(0959*12)\n         DC    X'0E00',H'0885',CL6' 3380 ',H'15',AL2(0885*15)\n         DC    X'0F00',H'2226',CL6' 3390 ',H'15',AL2(2226*15)\n         DC    X'FFFF',H'9999',CL6' UNKN ',H'19',AL2(99*99)\nHEXTR    DC    C'0123456789ABCDEF'\n*  PRINT LINES\nHEADER1  DS    0F\n         DC    A(HEADER2)\n         DC    Y(4+58,0)\n         DC    CL45'VOLUME DEV USE <----- FREE ------> LARGEST  '\n         DC    CL13' DEV         '\nHEADER2  DS    0F\n         DC    A(0)\n         DC    Y(4+59,0)\n         DC    CL45' NAME  ADR CNT CYL  TRK  NUM  DSCB CYL  TRK '\n         DC    CL14' TYPE   STATUS'\nPARSERR  DS    0H\n         DC    Y(4+30,0)\n         DC    CL30'LISTV TERMINATED - PARSE ERROR'\nVTOCERR  DS    0H\n         DC    Y(4+25,0)\n         DC    CL25'ERROR IN VTOC'\nNOINDEX  DS    0H\n         DC    Y(4+40,0)\n         DC    CL40'NO VOLUMES FOUND FOR INDEX GIVEN'\nDETAIL   DS    0H\n         DC    Y(4+60,0)\nVOLNAME  DS    CL6                           VOLUME NAME\nDIRFFLG  DS    C                             DIRF FLAG\nUNITADDR DS    CL3                           UNIT ADDRESS\n         DS    C\nUSECNT   DS    CL3                           # OF CURRENT ALLOCATIONS\n         DS    C\nTOTCYL   DS    CL4                           TOTAL FREE CYLINDERS\n         DS    C\nTOTTRK   DS    CL4                           TOTAL FREE TRACKS\n         DS    C\nTOTAREA  DS    CL4                           TOTAL FREE AREAS\nFMT0S    DS    CL5                           # FREE DSCBS\n         DS    C\nLARGECYL DS    CL4                           # CYLS IN LARGEST FREE EXT\n         DS    C\nLARGETRK DS    CL4                           # TRKS IN LARGEST FREE EXT\n         DS    C\nDEVKIND  DS    CL6                           # DEVICE TYPE\n         DS    C\n         DS    C\nDEVSTAT  DS    CL7                           * DEVICE STATUS\n*\nPUTLINE  PUTLINE MF=L\n*\nF0SCNT   DS    XL36\n         EJECT\n* PARM LISTS\n         DS    0F\nPARMFREE DS    0CL24\n         DC    CL4'LSPA'\n         DC    AL2(PARMFREE-FREEEND)\n         DC    AL1(20)\n         DC    XL1'00'\n         DS    0F\n         DC    XL1'00'\n         DC    XL1'81'\n         DC    XL1'00'\n         DC    XL1'00'\n         DC    A(0)\nFREERTRN DS    F\n         DC    A(0)\nFREEEND  EQU   *\nPARMF0S  DS    0CL24\n         DC    CL4'LSPA'\n         DC    AL2(PARMF0S-F0SEND)\n         DC    AL1(00)\n         DC    XL1'00'\n         DS    0F\n         DC    XL1'00'\n         DC    XL1'82'\n         DC    XL1'00'\n         DC    XL1'00'\n         DC    A(0)\nF0SRTRN  DS    F\n         DC    A(0)\nF0SEND   EQU   *\n* PUTLINE WORKAREAS\nECB      DS    A\nIOPLPARM DC    4F'0'\n         TITLE 'LISTV - LITERALS'\n         LTORG\n         TITLE 'LISTV - PARSE PARAMETER CONTROL LIST'\nPCL      IKJPARM DSECT=PDL\nVOL      IKJIDENT 'VOLUME SEARCH INDEX',OTHER=ANY,MAXLNTH=6            $\n               FIRST=ANY\n         IKJENDP\n         TITLE 'I/O PARAMETER LIST'\n         IKJIOPL\n         TITLE 'COMMUNICATION VECTOR TABLE'\n         CVT   DSECT=YES,PREFIX=NO\n         TITLE 'UNIT CONTROL BLOCK'\n         PRINT NOGEN\n         IEFUCBOB\n         PRINT GEN\n         TITLE 'COMMAND PROCESSOR PARAMETER LIST'\n         IKJCPPL\n         TITLE 'GETMAIN WORKAREA DSECT'\nWORK     DSECT\nPARSE    EQU   *\nPARSPARM DS    7A                           PPL\nPARSECB  DS    F                            ECB\nPARSANS  DS    A                            PDL\nPARSELEN EQU   *-PARSE\nPRTFLAG  DS    X                            PRINTING FLAG\nDBLW     DS    4D                           LSPACE RETURN AREA\nWORKLEN  EQU   *-WORK                       LENGTH OF WORK AREA\n         TITLE 'PARSE PARAMETER LIST'\n         IKJPPL\n         TITLE 'IKJIDENT PDE'\nPDL      DSECT\n         ORG   VOL\nVOLPTR   DS    A                            ADDRESS OF SEARCH INDEX\nVOLLEN   DS    H                            LENGTH OF SEARCH INDEX\nVOLFLAG  DS    X                            FLAGS\nVOLFOUND EQU   X'80'                        INDEX PRESENT\n         TITLE 'MONITOR SPACE MESSAGE AREA'\nLMSG     LSPACE MF=(D,MSG)\nLDATA    LSPACE MF=(D,DATA)\nPARMWORK DSECT\nPARMLIST DS   0F\nPARMWA   DS   F\nPARMDEVT DS   F\nPARMUCB  DS   F\n*\nDEVTYPE  DS   XL1\nADDRUCB  DS   F\n         DS   0D\nWORKAREA DS   CL100\nPARMLEN  EQU  *-PARMLIST\n         TITLE 'UCB DASD EXTENSION MAPPING MACRO'\n         IECDDCE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTV$": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x19\\x00\\x19\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DSN=YOUR.SOURCE(LISTV),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//      PARM='XREF,LIST,LET'\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD  DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LISTV(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTV#": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x08\\x00\\x08\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "AMDAHL"}, "text": ")F FUNCTION -\n     THE LISTV COMMAND IS USED TO DISPLAY DASD VOLUME INFORMATION.\n)X SYNTAX -\n         LISTV VOLUME\n  REQUIRED - NONE\n  DEFAULT  - DISPLAY ALL ONLINE DASD\n)O OPERAND -\n))VOLUME   - VOLUME TO BE DISPLAYED OR VOLUME PATTERN TO BE DISPLAYED.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LLIST": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x02#\\x02#\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 547, "newlines": 547, "modlines": 0, "user": "AMDAHL"}, "text": "*********************************************************************\n*  THIS PROGRAM WILL LIST THE LINKLIB AND LPA DATASETS OR IF        *\n*  SPECIFIED , TELL IF THE MODULE IS IN THE LINKLIST OR LPA         *\n*  BOYSEN/AMDAHL   11/06/92                                         *\n*                                                                   *\n*  ENVIRONMENT:  TSO COMMAND                                        *\n*  COMMAND SYNTAX:  LLIST <LOAD MODULE NAME>                        *\n*  DEFAULT:  PRINT LINKLIST AND LPA DATASETS                        *\n*  SPECILAL ASM/LINK PARMS:  NONE                                   *\n*                                                                   *\n*********************************************************************\nLLIST    CSECT\n******************************    LINK LIST TABLE DSECT\nLLT      DSECT\nLLTHEAD  DS    0CL8                     TABLE HEADER\nLLTID    DS    CL4                      TABLE ID 'LLT '\nLLTCOUNT DS    F                        NUMBER OF ENTRIES IN TABLE\nLLTDSNS  DSECT\nLLTENTRY EQU   *                        ENTRIES IN TABLE\nLLTDSLTH DS    X                        LENGTH OF DATASET NAME\nLLTDSN   DS    CL44                     DATASET NAME\nLLTAPFTB DSECT                          LNKLST APF LIBRARIES TABLE\nLLTANTRY EQU   *                        LNKLST DATA SET ENTRIES\nLLTAFLGS DS    X                        FLAG BYTES\nLLTAPFIN EQU   X'80'                    LIBRARY IS IN APF TABLE\nLLTARSV1 EQU   X'7F'                    RESERVED\n*\n******************************    LPALST TABLE DSECT\nLPAT     DSECT\nLPATHDR  DS    0CL8                     HEADER SECTION\nLPATID   DS    CL4                      TABLE ID 'LPAT'\nLPATCNT  DS    F                        NUMBER OF ENTRIES IN TABLE\nLPATDSNS DSECT\nLPATNTRY EQU   *                        TABLE ENTRY\nLPATDSLN DS    X                        LENGTH OF DATA SET NAME\nLPATDSN  DS    CL44                     DATA SET NAME\n*\nLLIST    CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10                       APF LLT ADDRESS COMPUTATION\nR9       EQU   9                        APF LLT ADDRESS COMPUTATION\nR8       EQU   8                        COMPUTE LLT ENTRIES LENGTH\nR7       EQU   7\nR6       EQU   6                        BLDL PDS DIRECTORY ENTRY\nR5       EQU   5                        CDE ADDRESSABILITY\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLLIST    CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         LR    R3,R1                    SAVE CPPL ADDRESS\n         ST    R3,CPPLADDR              SAVE CPPL ADDRESS FOR SVC99\n         LA    R1,ERASE                 POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE               GET THE LENGTH\n         TPUT  (1),(0),FULLSCR          ERASE THE 3270 SCREEN\n*\n***************     SEE IF A PARM OF MEMBER NAME PASSSED\n*\n         USING CPPL,R3\n         GETMAIN R,LV=WORKLEN           GET WORK AREA\n         LR    R10,R1                   SAVE AREA ADDR IN R10\n         USING WORK,R10\n         LA    R5,PARSPARM\n         USING PPL,R5\n         XC    PARSE(PARSELEN),PARSE    INITIALIZE PPL\n         MVC   PPLUPT,CPPLUPT           UPT\n         MVC   PPLECT,CPPLECT           ECT\n         MVC   PPLCBUF,CPPLCBUF         CIB\n         DROP  R3\n         LA    R1,PARSECB               ECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)               PCL\n         ST    R1,PPLPCL\n         LA    R1,PARSANS               PDL\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R5))    CALL PARSE\n         DROP  R5\n         L     R10,PARSANS              OK ?\n         USING PDL,R10\n         LTR   R10,R10\n         BP    CHCKPARM                 YES, CONTINUE\n         TPUT  BADPARSE,17              PUT OUT BAD PARSE MSG\n         B     GOBACK\n*\nCHCKPARM DS    0H\n         MVC   HOLDFLAG,MEMBFLAG        HOLD ON TO THE FLAG\n         TM    MEMBFLAG,MEMFOUND        WAS A MEMEBER PASSED ?\n         BZ    NOMEMB                   NO\n         L     R3,MEMBPTR               LOAD PTR TO PASSED MEMBER NAME\n         LA    R2,MEMBNAME\n         LH    R1,MEMBLEN               LOAD LENGTH OF PARM\n         BCTR  R1,0\n         EX    R1,MVCPARM               MOVE THE PARM\n         MVC   STEPMOD(8),MEMBNAME      MOVE MOD NAME FOR STEPLIB\n         MVC   LINKMOD(8),MEMBNAME      \"               \" LINKLIST\n         MVC   LPAMOD(8),MEMBNAME       \"               \" LPALIB\n         MVC   NOTFMOD(8),MEMBNAME      \"               \" NOT FOUND\n         MVI   TPUTFLAG,LINKOFF         SET FLAG = X'00'\n         MVI   LNKFLAG,NOTINLNK         SET FLAG = X'00'\n         SR    R6,R6                    CLEAR R6\n         LA    R6,BLDLAREA              LOAD ADDR OF BLDL AREA\n         USING PDS2,R6                  ADDRESSABILITY TO DSECT\n         MVC   PDS2NAME,MEMBNAME        MOVE PASSED MEMBER NAME\n         BLDL  0,BLDL_LIST              LOOK FOR MEMBER\n         B     *+4(R15)                 CHECK AND PROCESS RC'S\n         B     IN_LINKLST               MODULE FOUND  RC=00\n         B     LPAMEM                   MODULE NOT FOUND   RC=04\n         B     LPAMEM                   RC=08\n         B     GOBACK                   SEVERE ERROR\nMVCPARM  MVC   0(*-*,R2),0(R3)          MOVE MEMBER NAME\nIN_LINKLST  DS   0H\n         MVI   LNKFLAG,INLNK            SAY WE FOUND IT IN LINK\n         TM    PDS2LIBF,PDS2LLNK        IS IT LINKLIB  ??\n         BO    NOTSTEP                  YES, ELSE IN STEPLIB\n         TPUT  STEPMSG,L'STEPMSG        PUT OUT JOB/STEP LIB MSG\nNOTSTEP  DS    0H\nGETLINK  L     R4,CVTPTR                GET ADDRESS OF CVT\n         L     R5,CVTLLTA-CVT(,R4)      LOAD THE LLT ADDRESS\n         USING LLT,R5                   ADDRESSABILITY\n         L     R7,LLTCOUNT              LOAD NUMBER OF ENTRIES\n         LR    R9,R7                    LOAD FOR MULTIPLY\n         LA    R10,45                   LOAD LENGTH OF ONE DSN ENTRY\n         MR    R8,R10                   NUMBER OF ENTRIES*LENGTH\n         LA    R5,8(,R5)                LOAD ADDRESS OF FIRST ENTRY\n         LR    R10,R5                   LOAD BEGINING OF DSN TABLE\n         AR    R9,R10                   COMPUTE BEGINING ADDR OF APF\n         USING LLTDSNS,R5               ADDRESSABILITY\n         USING LLTAPFTB,R9              ADDRESSABILITY TO APF AREA\n         GTEDASET ABC,CPPLPTR=CPPLADDR  SET POINTERS\nLNK_LIST DS    0H\n         MVC   ABCDSNAM(44),LLTDSN      MOVE DSN NAME FOR SVC99\n         GTEDAALC ABC,VERB=AL           ALLOCATE INDIVIDUAL LINK DSN\n         MVI   DBLWORD,X'80'            SET OPEN OPTION INPUT\n         OPEN  (LLIST001),MF=(E,DBLWORD)     OPEN PDS FOR BLDL\n         SR    R6,R6                    CLEAR R3\n         LA    R6,BLDLAREA              LOAD ADDR OF BLDL AREA\n         USING PDS2,R6                  ADDRESSABILITY TO DSECT\n         MVC   PDS2NAME,MEMBNAME        MOVE PASSED MEMBER NAME\n         BLDL  LLIST001,BLDL_LIST       LOOK FOR MEMBER\n         B     *+4(R15)                 CHECK AND PROCESS RC'S\n         B     LINK_DSNNAME             MODULE FOUND  RC=00\n         B     NEXTDSN                  MODULE NOT FOUND   RC=04\n         B     NEXTDSN                  RC=08\n         B     GOBACK                   SEVERE ERROR\nLINK_DSNNAME   DS  0H\n         TM    TPUTFLAG,LINKON          DID WE DO HEADER ??\n         BO    TPUT_DSN                 YES, PRINT DSN ONLY\n         TPUT  LINKMSG,L'LINKMSG        PUT OUT FOUND MSG\n         TPUT  APFMSG,L'APFMSG          TPUT APF MSG\n         TPUT  BLANKS,4                 TPUT BLANK LINE\n         MVI   TPUTFLAG,LINKON          SET FLAG = X'80'\nTPUT_DSN MVC   TPUTDSN(44),ABCDSNAM     MOVE LIB NAME FOR TPUT\n         TM    LLTAFLGS,LLTAPFIN        APF AUTH LIBRARY ?\n         BZ    NOTAPF                   NO\n         MVI   APFOUT,C'*'              MOVE APF INDICATOR\nNOTAPF   TPUT  TPUTOUT,L'TPUTOUT        DO THE TPUT\nNEXTDSN  LA    R5,45(,R5)               BUMP TO NEXT  DSN ENTRY\n         LA    R9,1(,R9)                BUMP TO NEXT APF ENTRY\n         MVI   APFOUT,C' '              MOVE SPACE TO APF INDICATOR\n         CLOSE (LLIST001)               CLOSE THE LINKLIST DSN\n         BCT   R7,LNK_LIST              NEXT ENTRY\n         TPUT  BLANKS,4                 TPUT BLANK LINE\n         B     CHKCDE                   NOW GO CHECK FOR MLPA IN CDE\n*\nNOMEMB   L     R4,CVTPTR                GET ADDRESS OF CVT\n         L     R5,CVTLLTA-CVT(,R4)      LOAD THE LLT ADDRESS\n         USING LLT,R5                   ADDRESSABILITY\n         L     R7,LLTCOUNT              LOAD NUMBER OF ENTRIES\n         LR    R9,R7                    LOAD FOR MULTIPLY\n         LA    R10,45                   LOAD LENGTH OF ONE DSN ENTRY\n         MR    R8,R10                   NUMBER OF ENTRIES*LENGTH\n         LA    R5,8(,R5)                LOAD ADDRESS OF FIRST ENTRY\n         LR    R10,R5                   LOAD BEGINING OF DSN TABLE\n         AR    R9,R10                   COMPUTE BEGINING ADDR OF APF\n         USING LLTDSNS,R5               ADDRESSABILITY\n         USING LLTAPFTB,R9              ADDRESSABILITY TO APF AREA\n         TPUT  LLISTMSG,L'LLISTMSG      TPUT LINKLIST MSG\n         TPUT  APFMSG,L'APFMSG          TPUT APF MSG\n         TPUT  BLANKS,4                 BLANK LINE\nLISTLINK DS    0H\n         TM    LLTAFLGS,LLTAPFIN        APF AUTH LIBRARY ?\n         BZ    NOTAPF2                  NO\n         MVI   APFOUT,C'*'              MOVE APF INDICATOR\nNOTAPF2  MVC   TPUTDSN(44),LLTDSN       MOVE THE DSN NAME TO PRINT\n         TPUT  TPUTOUT,L'TPUTOUT        PRINT THE DSN(S)\n         LA    R5,45(,R5)               BUMP TO NEXT ENTRY\n         LA    R9,1(,R9)                BUMP TO NEXT APF ENTRY\n         MVI   APFOUT,C' '              MOVE SPACE TO APF INDICATOR\n         BCT   R7,LISTLINK              NEXT ENTRY\n**********************************************************************\n*** LPDE AND CDE SEARCH/PRINT ROUTINES                             ***\n**********************************************************************\nLPAMEM   TM    MEMBFLAG,MEMFOUND        WAS A MEMEBER PASSED ?\n         BZ    IN31                     NO\nCHKCDE   L     R3,CVTPTR                GET THE CVT\n         USING CVT,R3                   ADDRESSABILITY\n         L     R5,CVTQLPAQ              GET CDE CHAIN POINTER FROM CVT\n         ST    R5,HOLDCDE               STORE FOR LATER\n         USING CDENTRY,R5               SET UP ADDRESSABILITY\nCDELOOP  EQU   *\n         CLC   CDNAME,MEMBNAME          IS IT THE ONE WE WANT ??\n         BNE   NEXTCDE                  NO\n         L     R4,CDXLMJP               GET EXTENT LIST ADDR\n         USING XTLST,R4                 ADDRESSABILITY\n         L     R1,CDENTPT               GET ADDRESS OF CDE ENTRY POINT\n         LA    R2,EPADDR                GET DISPLAY ADDRESS\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         L     R1,HOLDCDE               GET ADDRESS OF MAIN STORAGE\n         LA    R2,CDEADDR               GET DISPLAY ADDRESS\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         MVC   LENMOD+1,XTLMSBLN        MOVE TO FULL WORD AREA\n         L     R1,LENMOD                LOAD ADDRESS OF MODULE LENGTH\n         LA    R2,MODLEN                LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         L     R1,XTLMSBAA              LOAD ADDRESS OF MODULE LOAD ADR\n         LA    R2,LOADADDR              LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         TM    CDENTPT,CDEMODE          31 OR 24 BIT MODE\n         BO    A31BITA\n         MVC   ADDRMODE(2),=C'24'       MOVE 24 TO MODE\n         B     CDEMSGS\nA31BITA  MVC   ADDRMODE(2),=C'31'       MOVE 31 TO MODE\nCDEMSGS  DS    0H\n         MVC   HOLDADDR,XTLMSBAA        MOVE FOR ADDRESSABILTY\n         BAL   R14,LPA_AREA             SEE WHERE IT IS\n         TPUT  LPAMSG2,L'LPAMSG2        TPUT FOUND LPA(CDE) MSG\n         TPUT  LPAMSG3,L'LPAMSG3        PUT OUT EP,LA, AND LENGTH\n         TPUT  LPACDE,L'LPACDE          TPUT CDE ADDRESS\n         B     LOOK_LPA                 WE FOUND IT, NOW MOVE ON\nNEXTCDE  EQU   *\n         L     R5,CDCHAIN               GET NEXT LPA CDE ENTRY\n         ST    R5,HOLDCDE               STORE FOR CDE ADDR\n         LA    R5,0(R5)                 CLEAR BYTE JUST IN CASE\n         LTR   R5,R5                    END OF CHAIN  ??\n         BNZ   CDELOOP                  NO\nCHKLPDE  DS    0H                       CHECK FOR LPDE ENTRY\n         L     R4,CVTPTR                ACCESS THE CVT\n         L     R5,CVTLPDIA-CVT(,R4)     CVT LINK PACK DIRECTORY AREA\n         USING LPDE,R5                  ADDRESSABILITY TO LPDE\n         ST    R5,HOLDLPDE              STORE FOR LATER\nNEXTLPDE MVC   LPANAME(8),LPDENAME      MOVE NAME OF MOD TO SEARCH FOR\n         CLC   LPANAME,FFFFFFFF         ARE WE AT END OF LPDE ??\n         BE    ENDLPDE                  YES\n         CLC   LPANAME,MEMBNAME         SEE IF NAME IS WHAT WE WANT\n         BE    LPAFOUND                 FOUND IT\n         LA    R5,40(,R5)               NEXT LPDE\n         ST    R5,HOLDLPDE              HOLD FOR DISPLAY\n         BCT   R7,NEXTLPDE              LOOP UNTIL REACHED END OF LIST\n         B     GOBACK                   EXIT TO CALLER\nLPAFOUND DS    0H\n         TM    LPDENTP,LPDEMODE         31 OR 24 BIT MODE\n         BO    A31BIT\n         MVC   ADDRMODE(2),=C'24'       MOVE 24 TO MODE\n         B     LPDEINFO\nA31BIT   MVC   ADDRMODE(2),=C'31'       MOVE 31 TO MODE\nLPDEINFO DS    0H\n         L     R1,LPDEXTLN              LOAD ADDR OF MOD LENGTH\n         LA    R2,MODLEN                LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         L     R1,HOLDLPDE              LOAD ADDR OF LPDE\n         LA    R2,LPDEADDR              LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         L     R1,LPDENTP               LOAD ADDRESS OF MODULE EP\n         LA    R2,EPADDR                LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         L     R1,LPDEXTAD              LOAD ADDR OF MODULE LOAD ADDR\n         LA    R2,LOADADDR              LOAD ADDRESS OF DISPLAY AREA\n         BAL   R10,HEXDUMP              BRANCH TO HEXDUMP ROUTINE\n         MVC   HOLDADDR,LPDEXTAD        MOVE FOR ADDRESSABILTY\n         BAL   R14,LPA_AREA             SEE WHERE IT IS\n         TPUT  LPAMSG2,L'LPAMSG2        TPUT FOUND LPA(LPDE) MSG\n         TPUT  LPAMSG3,L'LPAMSG3        PUT OUT EP,LA, AND LENGTH\n         TPUT  LPALPDE,L'LPALPDE        TPUT CDE ADDRESS\nLOOK_LPA DS    0H                       WHERE WAS IT LOADED FROM ?\n         TPUT  BLANKS,4                 BLANK LINE\n         TPUT  LPALIB,L'LPALIB          TPUT LPA LIB MESSAGE\n         TPUT  BLANKS,4                 BLANK LINE\nIN31     DS    0H\n         BAS   3,A31                    SET ADDRESSING MODE 31\n         L     R4,CVTPTR                ACCESS THE CVT\n         L     R5,CVTSMEXT-CVT(,R4)     ACCESS THE CVT EXTENSION\n         L     R4,CVTEPLPS-CVTVSTGX(,R5)     ACCESS THE CVTEPLPS\n         USING LPAT,R4                  ADDRESSABILITY\n         L     R7,LPATCNT               LOAD NUMBER OF ENTRIES\n         LA    R4,8(,R4)                LOAD ADDRESS OF FIRST ENTRY\n         USING LPATDSNS,R4              ADDRESSABILITY\n         TM    HOLDFLAG,MEMFOUND        WAS A MEMBER PASSED ?\n         BZ    LISTONLY                 NO\nLPA_LIST MVC   DEFDSNAM(44),LPATDSN     MOVE DSN NAME FOR SVC99\n         GTEDASET DEF,CPPLPTR=CPPLADDR  SET POINTERS\n         GTEDAALC DEF,VERB=AL           ALLOCATE INDIVIDUAL LINK DSN\n         MVI   DBLWORD,X'80'            SET OPEN OPTION INPUT\n         OPEN  (LLIST002),MF=(E,DBLWORD)     OPEN PDS FOR BLDL\n         SR    R6,R6                    CLEAR R6\n         LA    R6,BLDLAREA              LOAD ADDR OF BLDL AREA\n         USING PDS2,R6                  ADDRESSABILITY TO DSECT\n         MVC   PDS2NAME,MEMBNAME        MOVE PASSED MEMBER NAME\n         BLDL  LLIST002,BLDL_LIST       LOOK FOR MEMBER\n         B     *+4(R15)                 CHECK AND PROCESS RC'S\n         B     LPA_DSNNAME              MODULE FOUND  RC=00\n         B     NEXTLPA                  MODULE NOT FOUND   RC=04\n         B     NEXTLPA                  RC=08\n         B     GOBACK                   SEVERE ERROR\nLPA_DSNNAME    DS  0H\n         MVC   TPUTOUT(44),DEFDSNAM     MOVE LIB NAME FOR TPUT\n         TPUT  TPUTOUT,L'TPUTOUT        DO THE TPUT\nNEXTLPA  LA    R4,45(,R4)               BUMP TO NEXT  DSN ENTRY\n         CLOSE (LLIST002)               CLOSE THE LPA DSN\n         BCT   R7,LPA_LIST              NEXT ENTRY\n         TPUT  BLANKS,4                 TPUT BLANK LINE\n         B     GOBACK                   BEAM ME UP SCOTTY\nLISTONLY TPUT  BLANKS,4\n         TPUT  BLANKS,4\n         TPUT  LPAMSG,L'LPAMSG\n         TPUT  BLANKS,4\nLISTLPA  DS    0H\n         MVC   TPUTDSN(44),LPATDSN\n         TPUT  TPUTOUT,L'TPUTOUT        PRINT THE DSN(S)\n         LA    R4,45(,R4)               BUMP TO NEXT ENTRY\n         BCT   R7,LISTLPA               NEXT ENTRY\n         B     GOBACK\n*\nENDLPDE  DS    0H\n         TM    LNKFLAG,INLNK            SEE IF IN LINK AND NOT LPA\n         BO    GOBACK\n         TPUT  NOTFOUND,L'NOTFOUND\nGOBACK   DS    0H\n         BAS   3,A24                    SET AMODE 24\n         DS    0H\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*                                       CONTAINS RETURN CODE\n*\n*        CHANGE ADDRESSING MODES\n*\nA24      LA    3,0(3)                   CLEAR HIGH ORDER BIT\n         BSM   0,3\n*\nA31      O     3,=X'80000000'           SET HIGH ORDER BIT\n         BSM   0,3\n*\n*        DUMP CONTENTS OF REG IN PRINTABLE FORMAT\n*\nHEXDUMP  ST    R1,FWORD                 STORE INPUT REG INTO FWORD\n         UNPK  DUMMY(9),FWORD(5)        UNPACK TO ADD F ZONE DIGITS\n         TR    DUMMY(8),TRANTAB         TRANSLATE TO CORRECT CHARACTERS\n         MVC   0(8,R2),DUMMY            MOVE TO CALLER'S AREA\n         BR    R10                      EXIT\nFWORD    DS    F,CL1                    1 WORD + 1 BYTE OF GARBAGE\nDUMMY    DS    CL9\nTRANTAB  DS    CL(X'F0')                NEVER USED\n         DC    C'0123456789ABCDEF'\n*\n*        SEARCH TO FIND LOCATION OF LPA MODULE ( I.E. IN FLPA ETC. )\n*\nLPA_AREA L     R8,CVTPTR                ACCESS THE CVT\n         L     R9,CVTSMEXT-CVT(,R8)     ACCESS THE CVT EXTENSION\n         USING CVTVSTGX,R9              ADDRESSABILITY TO CVT EXT\n         CLC   HOLDADDR,CVTMLPAS        COMPARE TO FLPA START\n         BL    NOTMLPA                  SEE IF ITS HIGHER\n         CLC   HOLDADDR,CVTMLPAE        COMPARE TO FLPA END\n         BH    NOTFLPA                  ITS HIGHER\n         MVC   WHATLPA,MLPA             MOVE LITERAL\n         B     RTLPA\nNOTMLPA  CLC   HOLDADDR,CVTFLPAS        COMPARE TO FLPA START\n         BL    NOTFLPA                  SEE IF ITS HIGHER\n         CLC   HOLDADDR,CVTFLPAE        COMPARE TO FLPA END\n         BH    NOTFLPA                  ITS HIGHER\n         MVC   WHATLPA,FLPA             MOVE LITERAL\n         B     RTLPA\nNOTFLPA  CLC   HOLDADDR,CVTPLPAS        COMPARE TO PLPA START\n         BL    NOTPLPA                  SEE IF ITS HIGHER\n         CLC   HOLDADDR,CVTPLPAE        COMPARE TO PLPA END\n         BH    NOTPLPA                  ITS HIGHER\n         MVC   WHATLPA,PLPA             MOVE LITERAL\n         B     RTLPA\nNOTPLPA  CLC   HOLDADDR,CVTEPLPS        COMPARE TO EPLPA START\n         BL    NOTEPLPA                 SEE IF ITS HIGHER\n         CLC   HOLDADDR,CVTEPLPE        COMPARE TO EPLPA END\n         BH    NOTEPLPA                 ITS HIGHER\n         MVC   WHATLPA,EPLPA            MOVE LITERAL\n         B     RTLPA\nNOTEPLPA CLC   HOLDADDR,CVTEFLPS        COMPARE TO EFLPA START\n         BL    NOTEFLPA                 SEE IF ITS HIGHER\n         CLC   HOLDADDR,CVTEFLPE        COMPARE TO EFLPA END\n         BH    NOTEFLPA                 ITS HIGHER\n         MVC   WHATLPA,EFLPA            MOVE LITERAL\n         B     RTLPA\nNOTEFLPA CLC   HOLDADDR,CVTEMLPS        COMPARE TO EMLPA START\n         BL    NOTEMLPA                 SEE IF ITS HIGHER\n         CLC   HOLDADDR,CVTEMLPE        COMPARE TO EMLPA END\n         BH    NOTEMLPA                 ITS HIGHER\n         MVC   WHATLPA,EPLPA            MOVE LITERAL\n         B     RTLPA\nNOTEMLPA DS    0H\n         MVC   WHATLPA,UN_KNOWN         NONE OF THE ABOVE\nRTLPA    BR    R14                      RETURN TO CALLER\n*\n*        STORAGE AREA\n*\nSAVEAREA DS    18F\nHOLDFLAG DC    X'00'\nTPUTOUT  DS    0CL46\nAPFOUT   DC    CL2' '                   ONLY USED FOR LINKLIST\nTPUTDSN  DC    CL44' '\nLPANAME  DC    CL8' '\nMEMBNAME DC    CL8' '\nBLANKS   DC    CL4' '\nBADPARSE DC    CL17'BAD PARSE OF PARM'\nAPFMSG   DC    CL26'* INDICATES APF AUTHORIZED'\nSTEPMSG  DS    0CL33\n         DC    CL7'MODULE '\nSTEPMOD  DC    CL8' '\n         DC    CL18' FOUND IN STEPLIB DATASET'\nLLISTMSG DC    CL22'     LINKLIST DATASETS'\nLINKMSG  DS    0CL33\n         DC    CL7'MODULE '\nLINKMOD  DC    CL8' '\n         DC    CL18' FOUND IN LINKLIST'\nLPAMSG   DC    CL17'     LPA DATASETS'\nLPAMSG2  DS    0CL26\n         DC    CL7'MODULE='\nLPAMOD   DC    CL8' '\n         DC    CL3'  ('\nWHATLPA  DC    CL7'       '\n         DC    C')'\nMLPA     DC    CL7'  MLPA '\nFLPA     DC    CL7'  FLPA '\nPLPA     DC    CL7'  PLPA '\nEMLPA    DC    CL7' EMLPA '\nEFLPA    DC    CL7' EFLPA '\nEPLPA    DC    CL7' EPLPA '\nUN_KNOWN DC    CL7'UNKNOWN'\nLPAMSG3  DS    0CL50\n         DC    CL3'LA='\nLOADADDR DC    CL8' '\n         DC    CL2' '\n         DC    CL3'EP='\nEPADDR   DC    CL8' '\n         DC    CL2' '\n         DC    CL7'(AMODE-'\nADDRMODE DC    CL3'XX)'\n         DC    CL6'  LEN='\nMODLEN   DC    CL8' '\nLPACDE   DS    0CL12\n         DC    CL4'CDE='\nCDEADDR  DC    CL8' '\nLPALPDE  DS    0CL13\n         DC    CL5'LPDE='\nLPDEADDR DC    CL8' '\nLPALIB   DC    CL30'FOUND IN ACTIVE LPA DATASET(S)'\nNOTFOUND DS    0CL44\n         DC    CL7'MODULE '\nNOTFMOD  DC    CL8' '\n         DC    CL29' NOT FOUND IN LINKLIST OR LPA'\nLENMOD   DC    F'0'\nHOLDLPDE DS    F\nHOLDCDE  DS    F\nHOLDADDR DS    F\nERASE    DC    X'27F5401D40'            USED TO CLEAR 3270 TERMINAL\nLNKFLAG  DS    X         SAY WE FOUND IT IN LINK\nNOTINLNK EQU   00\nINLNK    EQU   80\nTPUTFLAG DS    X\nLINKOFF  EQU   00\nLINKON   EQU   80\nLLTDSNL  DC    F'45'                    LENGTH OF LLT DSNS ENTRY\nPCL      IKJPARM DSECT=PDL\nMEMB     IKJIDENT 'MEMBER SEARCH NAME',UPPERCASE,FIRST=ALPHA,          X\n               MAXLNTH=8,OTHER=ALPHANUM,HELP='VALID MEMBER NAME'\n         IKJENDP\n         TITLE 'COMMAND PROCESSOR PARAMETER LIST'\n         IKJCPPL\n         TITLE 'GETMAIN WORK AREA'\nWORK     DSECT\nPARSE    EQU   *\nPARSPARM DS    7A                       PPL\nPARSECB  DS    F                        ECB\nPARSANS  DS    A                        PDL\nPARSELEN EQU   *-PARSE\nWORKLEN  EQU   *-WORK\n         TITLE 'PARSE PARAMETER LIST'\n         IKJPPL\nPDL      DSECT\n         ORG   MEMB\nMEMBPTR  DS    A                       ADDRESS OF SEARCH MEMBER\nMEMBLEN  DS    H                       LENGTH OF MEMBER\nMEMBFLAG DS    X                       FLAGS\nMEMFOUND EQU   X'80'                   MEMBER PRESENT\n*\n         TITLE 'BLDL DATA AREA'\nLLIST    CSECT\nFFFFFFFF DC    XL8'FFFFFFFFFFFFFFFF'   END OF LPDE INDICATOR\nCPPLADDR DS    F\nABC      GTEDADAT DSNAM=XX.YYY,DDNAM=LLIST001,                         X\n               CLOSE=YES,STATS=SHR,CNVRT=YES\nDEF      GTEDADAT DSNAM=XX.YYY,DDNAM=LLIST002,                         X\n               CLOSE=YES,STATS=SHR,CNVRT=YES\nLLIST001 DCB   DDNAME=LLIST001,                                        X\n               DSORG=PO,                                               X\n               MACRF=R,                                                X\n               EODAD=GOBACK,                                           X\n               RECFM=FB,                                               X\n               LRECL=0,                                                X\n               BLKSIZE=0\nLLIST002 DCB   DDNAME=LLIST002,                                        X\n               DSORG=PO,                                               X\n               MACRF=R,                                                X\n               EODAD=GOBACK,                                           X\n               RECFM=FB,                                               X\n               LRECL=0,                                                X\n               BLKSIZE=0\nDBLWORD  DS    D\n                  DS  0H\nBLDL_LIST         DC  H'1'\nBLDL_LENGTH       DC  H'76'\nBLDLAREA          DS  1CL76\n*\n         TITLE 'LINK PACK DIRECTORY ENTRY'\n         IHALPDE\n         TITLE 'LPA CONTENTS DIRECTOR ENTRY (CDE)'\n         IHACDE\n         TITLE 'CDE EXTENT LIST'\n         IHAXTLST\n         TITLE 'PARTITIONED DATA SET ENTRY'\n         IHAPDS\n         TITLE 'SVC-99 CONTROL BLOCKS'\n         IEFZB4D0\n         TITLE 'IKJEFF18 CONTROL BLOCKS'\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         TITLE 'CVT MAPPING'\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LLIST$": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE        <=== SVC 99 MACROS\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DSN=YOUR.SOURCE(LLIST),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST,'AC=1')\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LLIST(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LLIST#": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "AMDAHL"}, "text": ")F FUNCTION -\n     DISPLAY ACTIVE LINKLIST AND LPA LIBRARIES OR IF\n     SPECIFIED, SEARCH FOR MODULE NAME IN STEPLIB,\n     LINKLIST, AND LPA.\n)X SYNTAX -\n         LLIST MODNAME\n  REQUIRED - NONE\n  DEFAULT  - DISPLAY ACTIVE LINKLIST AND LPA DATASETS.\n)O OPERAND -\n))MODNAME - LOAD MODULE NAME FOR WHICH INFORMATION WILL BE DISPLAYED\n            IF LOCATED.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCJOB": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00[\\x00[\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 91, "newlines": 91, "modlines": 0, "user": "AMDAHL"}, "text": "         MACRO\n&NAME    LOCJOB &JOBNAME=,&ASID=,&ASCB=,&NOFIND=\n         LCLB  &SW1\n         LCLC  &A,&A1,&REG\n&A       SETC  'IHB0'.'&SYSNDX'\n&A1      SETC  'IHB1'.'&SYSNDX'\n         AIF   ('&NOFIND' EQ '').ERROR1\n         AIF   ('&NAME' EQ '').NON\n&NAME    DS    0H\n.NON     ANOP\n         AIF   ('&ASID' EQ '').TRYJN\n         AIF   ('&ASID'(1,1) EQ '(').REG1\n         LH    R1,&ASID      GET ASID FOR LOCATE\n         AGO   .CONT1\n.REG1    ANOP\n&REG     SETC  '&ASID'(2,K'&ASID-2)\n         LR    R1,&REG               GET ASID FOR LOCATE\n.CONT1   ANOP\n         LR    R0,R1         SAVE ASID FOR RETURN\n         SLL   R1,2          TIMES 4 FOR LOOKUP\n         L     R15,16        CVT ADDRESS (CVTPTR)\n         L     R15,556(,R15) ASVT POINTER (CVTASVT)\n         C     R0,516(,R15)  IS THIS ASID WITHIN MAXIMUM ??\n         BH    &NOFIND       NO, MUST BE BAD\n         LA    R1,528-4(R1,R15) GET ASCB SLOT ADDRESS (ASVTENTY-4)\n         TM    0(R1),X'80'   IS ASCB ASSIGNED ??\n         BO    &NOFIND       NO, THIS IS IN ERROR\n         L     R1,0(,R1)     LOAD ASCB ADDRESS FOR RETURN\n         AIF   (&SW1).END\n.XXNAM   ANOP\n         ICM   R2,B'1111',172(R1) JOBNAME FOR INITIATED TASKS\n         BNZ   *+4+4+4+4+4+8   GOT IT HERE\n         ICM   R2,B'1111',176(R1) JOBNAME FOR STRT/MNT/LOGON\n         BNZ   *+4+4+4+8       THIS IS IT\n         LA    R2,*+4+4        SET DEFAULT NAME\n         B     *+4+8           BRANCH AROUND CONSTANTS\n         DC    CL8'STARTING'\n.END     ANOP\n         MEXIT\n.TRYJN   ANOP\n         AIF   ('&JOBNAME' EQ '').TRYAS\n         AIF   ('&JOBNAME'(1,1) EQ '(').REG2\n         LA    R2,&JOBNAME   ADDRESS OF JOBNAME\n         AGO   .CONT2\n.REG2    ANOP\n&REG     SETC  '&JOBNAME'(2,K'&JOBNAME-2)\n         LR    R2,&REG         GET JOBNAME FOR LOCATE\n.CONT2   ANOP\n         L     R15,16          POINT TO CVT\n         L     R15,556(,R15)   ADDRESS OF ASVT\n         L     R0,516(,R15)    NUMBER OF ASCB'S\n         LA    R15,528(,R15)   FIRST ASCB SLOT ADDRESS\n&A       DS    0H\n         TM    0(R15),X'80'    IS ASCB ASSIGNED ??\n         BO    &A1             NO, GET NEXT SLOT\n         L     R1,0(,R15)      GET ASCB ADDRESS\n         ICM   R14,B'1111',172(R1) JOBNAME FOR INITIATED TASKS\n         BNZ   *+4+4+4+4+4+8   GOT IT HERE\n         ICM   R14,B'1111',176(R1) JOBNAME FOR STRT/MNT/LOGON\n         BNZ   *+4+4+4+8       THIS IS IT\n         LA    R14,*+4+4       SET DEFAULT NAME\n         B     *+4+8           BRANCH AROUND CONSTANTS\n         DC    CL8'STARTING'\n         CLC   0(8,R14),0(R2)  IS THIS OUR JOBNAME ??\n         BE    *+4+4+4+4       YES, GET ASID AND END....\n&A1      DS    0H\n         LA    R15,4(,R15)     NEXT ASCB SLOT\n         BCT   R0,&A           LOOP THROUGH ALL ASCB'S\n         B     &NOFIND         OUR NAME DOESN'T EXIST\n         LH    R0,36(,R1)      ASID OF OUR JOB\n         MEXIT\n.TRYAS   ANOP\n         AIF   ('&ASCB' EQ '').ERROR2\n         AIF   ('&ASCB'(1,1) EQ '(').REG3\n         L     R1,&ASCB      GET ASCB ADDRESS\n         AGO   .CONT3\n.REG3    ANOP\n&REG     SETC  '&ASCB'(2,K'&ASCB-2)\n         LR    R1,&REG         FET ASCB FOR LOCATE\n.CONT3   ANOP\n         CLC   0(4,R1),*+6+4+4 CHECK FOR ASCB ACRONYM\n         BE    *+4+4+4       OK, ASSUME VALID ASCB ADDRESS\n         B     &NOFIND       NO POSSIBILITY THIS IS AN ASCB\n         DC    C'ASCB'       FOR ASCB CHECK\n         LH    R0,36(,R1)    ASID FROM ASCB\n         AGO   .XXNAM\n         MEXIT\n.ERROR1  MNOTE 4,'*** ERROR, NOFIND MUST BE SPECIFIED'\n         MEXIT\n.ERROR2  MNOTE 4,'*** ERROR, NO VALID OPERANDS SPECIFIED'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOOKDD": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\xe9\\x00\\xe9\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 233, "newlines": 233, "modlines": 0, "user": "AMDAHL"}, "text": "********************************************************************\n*        SCAN TSO TIOT TABLE FOR MEMBER IN GIVEN DD CONCATENTATION *\n*        AND LIST DATASETS WHICH MEMBER WAS FOUND IN FOR THAT DD   *\n*        BOYSEN/AMDAHL   JAN 94                                    *\n*        SYNTAX:  LISTDD 'DDNAME' 'MEMBERNAME'                     *\n*        EX:      LISTDD SYSPROC AAABBB                            *\n*                 SEARCH DD SYSPROC FOR MEMBER AAABBB              *\n********************************************************************\nLOOKDD   CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLOOKDD   CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         LR    R3,R1                    SAVE CPPL ADDRESS\n         ST    R3,CPPLADDR              SAVE CPPL ADDRESS FOR SVC99\n         LA    R1,ERASE                 POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE               GET THE LENGTH\n         TPUT  (1),(0),FULLSCR          ERASE THE 3270 SCREEN\n         USING CPPL,R3\n         GETMAIN R,LV=WORKLEN           GET WORK AREA\n         LR    R10,R1                   SAVE AREA ADDR IN R10\n         USING WORK,R10\n         LA    R5,PARSPARM\n         USING PPL,R5\n         XC    PARSE(PARSELEN),PARSE    INITIALIZE PPL\n         MVC   PPLUPT,CPPLUPT           UPT\n         MVC   PPLECT,CPPLECT           ECT\n         MVC   PPLCBUF,CPPLCBUF         CIB\n         DROP  R3\n         LA    R1,PARSECB               ECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)               PCL\n         ST    R1,PPLPCL\n         LA    R1,PARSANS               PDL\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R5))    CALL PARSE\n         DROP  R5\n         L     R10,PARSANS              OK ?\n         USING PDL,R10\n         LTR   R10,R10\n         BP    CHCKPARM                 YES, CONTINUE\n         TPUT  BADPARSE,17              PUT OUT BAD PARSE MSG\n         B     GOBACK\n*\nCHCKPARM DS    0H\n         GTEDASET ABC,CPPLPTR=CPPLADDR  SET POINTERS\n         L     R3,MEMBPTR               LOAD PTR TO PASSED MEMBER NAME\n         LA    R2,MEMBNAME\n         LH    R1,MEMBLEN               LOAD LENGTH OF PARM\n         BCTR  R1,0\n         EX    R1,IKJMVC                MOVE THE PARM\n         L     R3,DDNPTR                LOAD PTR TO PASSED DDN\n         LA    R2,DDNAME\n         LH    R1,DDNLEN                LOAD LENGTH OF PARM\n         BCTR  R1,0\n         EX    R1,IKJMVC                MOVE THE PARM\n         USING TIOENTRY,R10\n         USING INFMJFCB,R5\n         L     R10,PSATOLD-PSA          CURRENT TCB ADDR\n         L     R10,TCBTIO-TCB(,R10)     OUR TIOT ADDR\n         LA    R10,TIOENTRY-TIOT(,R10)  1ST DD SEGMENT IN TIOT\nLOOP1    CLC   DDNAME,TIOEDDNM          IS IT THE ONE WE WANT\n         BNE   GETNEXT                  GET NEXT DD IN TIOT\nGETDSN   ICM   R5,7,TIOEJFCB            JFCB POINTER\n         LA    R5,16(R5)                FIX IT\n         MVC   ABCDSNAM(44),JFCBDSNM    MOVE DSN NAME FOR SVC99\n         GTEDAALC ABC,VERB=AL           ALLOCATE INDIVIDUAL DD DSN(S)\n         MVI   DBLWORD,X'80'            SET OPEN OPTION INPUT\n         OPEN  (LOOKDD01),MF=(E,DBLWORD)     OPEN PDS FOR BLDL\n         SR    R6,R6                    CLEAR R3\n         LA    R6,BLDLAREA              LOAD ADDR OF BLDL AREA\n         USING PDS2,R6                  ADDRESSABILITY TO DSECT\n         MVC   PDS2NAME,MEMBNAME        MOVE PASSED MEMBER NAME\n         BLDL  LOOKDD01,BLDL_LIST       LOOK FOR MEMBER\n         B     *+4(R15)                 CHECK AND PROCESS RC'S\n         B     TPUT_DSN                 MEMBER FOUND  RC=00\n         B     NEXTDSN                  MEMBER NOT FOUND   RC=04\n         B     NEXTDSN                  RC=08\n         B     GOBACK                   SEVERE ERROR\nNEXTDSN  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    NOTFOUND                 NO->MORE DDNAMES IN TABLE\n         CLC   TIOEDDNM,=8C' '          PART OF OUR CONCAT ???\n         BNE   NOTFOUND                 NO, GET OUT\n         CLOSE (LOOKDD01)               CLOSE THE DSN\n         B     GETDSN                   GET NEXT DSN IN CONCAT\nGETNEXT  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    NOTALLOC                 NO->MORE DDNAMES IN TABLE\n         B     LOOP1                    NO, KEEP ON GOING\nTPUT_DSN CLI   PRNTFLAG,PRINTED         HAVE WE PRINTED HEADER ?\n         BE    TPUT_DS2                 YES\n         MVC   DDMSG3,DDNAME            MOVE DDNAME TO MSG\n         MVC   MEMMSG3,MEMBNAME         MOVE MEMBER NAME TO MSG\n         TPUT  MSG3,L'MSG3              TELL USER MEMBER FOUND\n         TPUT  =C' ',1                  TPUT A BLANK LINE\n         MVI   PRNTFLAG,PRINTED         INDICATE HEADER PRINTED\nTPUT_DS2 TPUT  JFCBDSNM,L'JFCBDSNM      PRINT OUT DSN\n         B     NEXTDSN                  NEXT ENTRY\nNOTALLOC MVC   DDMSG1,DDNAME            MOVE DDNAME TO MSG\n         TPUT  MSG1,L'MSG1              TELL USER DDNAME NOT ALLOC\n         B     GOBACK                   GO HOME\nNOTFOUND CLI   PRNTFLAG,PRINTED         HAVE WE PRINTED HEADER ?\n         BE    GOBACK                   YES, MUST HAVE FOUND IT\n         MVC   DDMSG2,DDNAME            MOVE DDNAME TO MSG\n         MVC   MEMMSG2,MEMBNAME         MOVE MEMBER NAME TO MSG\n         TPUT  MSG2,L'MSG2              TELL USER MEMBER NOT FOUND\nGOBACK   DS    0H                       RETURN ROUTINE\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*\n*        SUBRTN TO MOVE R10 TO THE NEXT DD ENTRY IN THE TIOT\n*\nNEXTDD   SLR   R8,R8\n         IC    R8,0(,R10)            R8=LENGTH OF CURRENT DD ENTRY\n         LA    R10,0(R8,R10)         R10->NEXT DD ENTRY IN TIOT\n         BR    R14                   RETURN\n*\n*        STORAGE AREA\n*\nSAVEAREA DS    18F\nIKJMVC   MVC   0(*-*,R2),0(R3)          MOVE FOR EX\nMSG1     DS    0CL29\n         DC    CL7'DDNAME '\nDDMSG1   DC    CL8' '\n         DC    CL14' NOT ALLOCATED'\nMSG2     DS    0CL51\n         DC    CL7'MEMBER '\nMEMMSG2  DC    CL8' '\n         DC    CL14' NOT FOUND IN '\nDDMSG2   DC    CL8' '\n         DC    CL14' CONCATENATION'\nMSG3     DS    0CL58\n         DC    CL7'MEMBER '\nMEMMSG3  DC    CL8' '\n         DC    CL10' FOUND IN '\nDDMSG3   DC    CL8' '\n         DC    CL14' CONCATENATION'\n         DC    CL11' DATASET(S)'\nCPPLADDR DS    F\nMEMBNAME DC    CL8' '\nDDNAME   DC    CL8' '\nPRNTFLAG DC    X'00'\nPRINTED  EQU   X'80'\nBADPARSE DC    CL17'BAD PARSE OF PARM'\nERASE    DC    X'27F5401D40'            USED TO CLEAR 3270 TERMINAL\nABC      GTEDADAT DSNAM=XX.YYY,DDNAM=LOOKDD01,                         X\n               CLOSE=YES,STATS=SHR,CNVRT=YES\nLOOKDD01 DCB   DDNAME=LOOKDD01,                                        X\n               DSORG=PO,                                               X\n               MACRF=R,                                                X\n               EODAD=GOBACK,                                           X\n               RECFM=FB,                                               X\n               LRECL=0,                                                X\n               BLKSIZE=0\nDBLWORD  DS    D\n                  DS  0H\nBLDL_LIST         DC  H'1'\nBLDL_LENGTH       DC  H'76'\nBLDLAREA          DS  1CL76\nPCL      IKJPARM DSECT=PDL\nIKJDDN   IKJIDENT 'DDNAME SEARCH',UPPERCASE,FIRST=ALPHA,               X\n               MAXLNTH=8,OTHER=ALPHANUM,PROMPT='DD SEARCH NAME',       X\n               HELP='VALID DDNAME'\nMEMB     IKJIDENT 'MEMBER SEARCH NAME',UPPERCASE,FIRST=ALPHA,          X\n               MAXLNTH=8,OTHER=ALPHANUM,PROMPT='MEMBER SEARCH NAME',   X\n               HELP='VALID MEMBER NAME'\n         IKJENDP\n         TITLE 'COMMAND PROCESSOR PARAMETER LIST'\n         IKJCPPL\n         TITLE 'GETMAIN WORK AREA'\nWORK     DSECT\nPARSE    EQU   *\nPARSPARM DS    7A                       PPL\nPARSECB  DS    F                        ECB\nPARSANS  DS    A                        PDL\nPARSELEN EQU   *-PARSE\nWORKLEN  EQU   *-WORK\n         TITLE 'PARSE PARAMETER LIST'\n         IKJPPL\nPDL      DSECT\n         ORG   MEMB\nMEMBPTR  DS    A                       ADDRESS OF SEARCH MEMBER\nMEMBLEN  DS    H                       LENGTH OF MEMBER\nMEMBFLAG DS    X                       FLAGS\nMEMFOUND EQU   X'80'                   MEMBER PRESENT\n         ORG   IKJDDN\nDDNPTR   DS    A                       ADDRESS OF DDN\nDDNLEN   DS    H                       LENGTH OF DDN\nDDNFLAG  DS    X                       FLAGS\nDDNFOUND EQU   X'80'                   DDN PRESENT\n*\n         TITLE 'IKJEFF18 CONTROL BLOCKS'\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         TITLE 'CVT MAPPING'\n         CVT   DSECT=YES\n         TITLE 'PSA MAPPING'\n         IHAPSA\n         TITLE 'TCB MAPPING'\n         IKJTCB\n         TITLE 'TIOT MAPPING'\nTIOT     DSECT\n         IEFTIOT1\n         TITLE 'JFCB MAPPING'\nJFCB     DSECT\n         IEFJFCBN\n         TITLE 'PARTITIONED DATA SET ENTRY'\n         IHAPDS\n         TITLE 'SVC-99 CONTROL BLOCKS'\n         IEFZB4D0\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOOKDD$": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=YOUR.SOURCE(LOOKDD)\n/*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST)\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LOOKDD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOOKDD#": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\n\\x00\\n\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "AMDAHL"}, "text": ")F FUNCTION -\n     SEARCH DATASET(S) ALLOCATED TO SPECIFIED DDNAME FOR SPECIFIED\n     MEMBER NAME.\n)X SYNTAX -\n         LOOKDD DDNAME MEMBER\n  REQUIRED - DDNAME MEMBER\n  DEFAULT  - NONE\n)O OPERAND -\n))DDNAME   - DDNAME OF WHICH ALLOCATED DATASETS ARE TO BE SEARCHED.\n))MEMBER   - MEMBER NAME TO SEARCH FOR.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPROC": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x01'\\x01'\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 295, "newlines": 295, "modlines": 0, "user": "AMDAHL"}, "text": "*********************************************************************\n*  FUNCTION - LIST DATASETS ALLOCATED TO JES PROCXX DDNAMES         *\n*             AND IF PROC MEMBER SPECIFIED, SEARCH THROUGH THE      *\n*             DATASETS FOR THE PROC AND DISPLAY DATASETS WERE       *\n*             FOUND.  CALLS LPROCXM FOR OBTAINING TIOT AND DSNS     *\n*             FROM SECONDARY ADDRESS SPACE (JES2).                  *\n*             IF SITE HAS MORE THAN A TOTAL OF 35 DDNAMES AND       *\n*             DATASET NAMES, THEN INCREASE THE STORAGE AREA FOR     *\n*             DSNLIST                                               *\n*             BOYSEN/AMDAHL   02/94                                 *\n*                                                                   *\n*  MOD      - CHANGED TO DISPLAY //PROCXX WITH DSN'S  BOYSEN  8/94  *\n*           - REMOVED AUTH SVC CALL - NO LONGER REQUIRED AS LONG    *\n*             CMD NAME IS IN IKJTSO00 AS AUTH CMD    BOYSEN 10/94   *\n*                                                                   *\n*  SYNTAX   - LPROC            LIST PROCXX ALLOCATIONS              *\n*             LPROC AABBCC     SEARCH PROCXX ALLOCATION FOR MEMBER  *\n*                                                                   *\n*********************************************************************\nLPROC    CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLPROC    CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n*\n         LR    R3,R1                    SAVE CPPL ADDR\n         LA    R1,ERASE                 POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE               GET THE LENGTH\n         TPUT  (1),(0),FULLSCR          ERASE THE 3270 SCREEN\n         USING CPPL,R3                  MAP CPPL\n         GETMAIN R,LV=WORKLEN           GET WORK AREA\n         LR    R10,R1                   SAVE AREA ADDR IN R10\n         USING WORK,R10\n         LA    R5,PARSPARM\n         USING PPL,R5\n         XC    PARSE(PARSELEN),PARSE    INITIALIZE PPL\n         MVC   PPLUPT,CPPLUPT           UPT\n         MVC   PPLECT,CPPLECT           ECT\n         MVC   PPLCBUF,CPPLCBUF         CIB\n         DROP  R3\n         LA    R1,PARSECB               ECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)               PCL\n         ST    R1,PPLPCL\n         LA    R1,PARSANS               PDL\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R5))    CALL PARSE\n         DROP  R5\n         L     R10,PARSANS              OK ?\n         USING PDL,R10\n         LTR   R10,R10\n         BP    CHCKPARM                 YES, CONTINUE\n         TPUT  BADPARSE,17              PUT OUT BAD PARSE MSG\n         B     GOBACK\n*\nCHCKPARM DS    0H\n         GTEDASET ABC,CPPLPTR=CPPLADDR  SET POINTERS\n         L     R3,PROCPTR               LOAD PTR TO PASSED PROC NAME\n         LA    R2,PROCNAME\n         LH    R1,PROCLEN               LOAD LENGTH OF PARM\n         BCTR  R1,0\n         EX    R1,IKJMVC                MOVE THE PARM\nSTARTIT  DS    0H\n         BAS   3,A31                    SET ADDRESSING MODE 31\n         LA    R5,PARMLIST              LOAD ADDRESS OF PARMLIST\n         USING XMPARMS,R5               ADDRESSABILITY\n         LOCJOB JOBNAME=JES2,NOFIND=BADLOCAT\n         ST    R1,XMASCB                SAVE ADDRESS OF ASCB\n         MODESET MODE=SUP               SUP STATE PSW\n         LA    R0,1                     GET AX\n         AXSET AX=(R0)                  ... OF 1\n         ST    R0,HOLDAX                SAVE OLD AX FOR LATER\n         LOAD  EP=LPROCXM,              LOAD PRM LPROCXM               X\n               GLOBAL=(YES,P),          LOAD INTO PAGEABLE CSA         X\n               ERRET=GOBACK,            ERROR ROUTINE                  X\n               EOM=NO                   DELETE MODULE AT END-OF-TASK\n         ST    R0,XMEMADDR              SAVE ADDRESS OF ROUTINE\n         L     R6,XMASCB                ASCB OF TARGET ADDRESS SPACE\n         LH    R6,ASCBASID-ASCB(R6)     GET ASID OF JES FROM ASCB\n         ESAR  R2                       GET SECONDARY ADDR SPACE\n         ST    R2,HOLDSSAR              SAVE FOR LATER\n         SSAR  R6                       SET AS SECONDARY\n         L     R15,XMEMADDR             ENTRY POINT OF ROUTINE\n         LA    R1,DSNLIST               ADDRESS OF DSN LIST\n         ST    R1,XMDSNS                STORE IN PARM LIST\n         LA    R1,PARMLIST              LOAD ADDR OF PARMLIST\n         BASSM R14,R15                  INVOKE THE ROUTINE\n         LTR   R15,R15                  RC = 0 ?\n         BNZ   BADTIOT                  GET OUT\n         B     GOBACK                   RETURN TO CALLER\nBADLOCAT DS    0H                       TELL 'EM\n*        TPUT  BADLOC,L'BADLOC          ... WE CAN'T FIND JES\nBADTIOT  DS    0H                       COULD NOT GET TIOT\nGOBACK   DS    0H                       RETURN ROUTINE\n         L     R2,HOLDSSAR              RESTORE ORIGINAL\n         SSAR  R2                       ... ORIGINAL SSN\n         L     R0,HOLDAX                RESTORE\n         AXSET AX=(R0)                  ... OLD AX\n         MODESET MODE=PROB              RETURN TO PROB STATE\n         BAS   3,A24                    SET AMODE 24\n         DELETE EP=LPROCXM              DELETE FROM CSA\n         LA    R6,DSNLIST               LOAD ADDR OF DSN'S\n         LA    R5,35                    LOAD MAX INTO R5\n         CLC   PROCNAME,=C'$$$$$$$$'    PRINT DEFAULT ???\n         BNE   LOOKFOR                  NO\nTPUTLOOP DS    0H\n         TPUT  MSG3,L'MSG3              TPUT HEADER\nTPUTIT   CLC   0(6,R6),=C'//PROC'       SEE IF IT'S THE DDNAME  8/94\n         BNE   TPUTPROC                 TPUT IT   8/94\n         TPUT  BLANK,L'BLANK            PUT OUT BLANK LINE\nTPUTPROC TPUT  0(R6),44                 TPUT THE PROC LIB NAMES\n         LA    R6,44(,R6)               NEXT ENTRY\n         CLI   0(R6),C' '               ANY MORE ENTRIES ?\n         BE    GETOUT                   NO\n         BCT   R5,TPUTIT                GO GET NEXT ENTRY\n         B     GETOUT                   LET'S GET OUT\nLOOKFOR  DS    0H                       LOOK FOR PROC NAME IN DSN'S\n         CLC   0(6,R6),=C'//PROC'       SEE IF IT'S THE DDNAME  8/94\n         BNE   CON_TINU                 TPUT IT   8/94\n         MVC   HOLDDD(44),0(R6)         MOVE TO HOLD AREA\n         MVI   DDPRT,PRINTDD            TELL THEM IT PRINTED\n         B    NEXTDSN                   GO GET NEXT DSN\nCON_TINU MVC   ABCDSNAM(44),0(R6)       MOVE DSN NAME FOR SVC99\n         GTEDAALC ABC,VERB=AL           ALLOCATE INDIVIDUAL DD DSN(S)\n         CLC   ABCS99RC,=F'0'           DID WE ALLOCATE ?\n         BNE   ALLOC_ERROR              NO, PRINT ERROR\n         MVI   DBLWORD,X'80'            SET OPEN OPTION INPUT\n         OPEN  (LPROC001),MF=(E,DBLWORD)     OPEN PDS FOR BLDL\n         SR    R7,R7                    CLEAR R7\n         LA    R7,BLDLAREA              LOAD ADDR OF BLDL AREA\n         USING PDS2,R7                  ADDRESSABILITY TO DSECT\n         MVC   PDS2NAME,PROCNAME        MOVE PASSED PROC NAME\n         BLDL  LPROC001,BLDL_LIST       LOOK FOR PROC\n         B     *+4(R15)                 CHECK AND PROCESS RC'S\n         B     TPUT_DSN                 PROC FOUND  RC=00\n         B     NEXTDSN                  PROC NOT FOUND   RC=04\n         B     NEXTDSN                  RC=08\n         B     GOHOME                   SEVERE ERROR\nTPUT_DSN CLI   PRNTFLAG,PRINTED         HAVE WE PRINTED HEADER ?\n         BE    TPUT_DS2                 YES\n         MVC   MEMMSG2,PROCNAME         MOVE PROC NAME TO MSG\n         TPUT  MSG2,L'MSG2              TELL USER PROC FOUND\n         MVI   PRNTFLAG,PRINTED         INDICATE HEADER PRINTED\n         MVI   FOUNDFLG,FOUNDIT         INDICATE PROC FOUND\nTPUT_DS2 CLI   DDPRT,PRINTDD            SEE IF IT'S THE DDNAME PRINTED\n         BNE   TPUT_DS3                 TPUT IT   8/94\n         TPUT  BLANK,L'BLANK            PUT OUT BLANK LINE\n         TPUT  HOLDDD,L'HOLDDD          TPUT DDNAME\n         MVI   DDPRT,X'00'              RESET FLAG\nTPUT_DS3 TPUT  0(R6),44                 TPUT THE PROC LIB\n         B     NEXTDSN                  GET NEXT DSN\nALLOC_ERROR    DS  0H                   ALLOCATION ERROR MSG\n         MVI   ERRORDSN,C' '            MOVE BLANKS\n         MVC   ERRORDSN+1(43),ERRORDSN  DITTO\n         MVC   ERRORDSN(44),0(R6)       MOVE ERROR DSN\n         TPUT  MSG0,L'MSG0              TPUT ERROR MSG\nNEXTDSN  LA    R6,44(,R6)               NEXT ENTRY\n         CLI   0(R6),C' '               ANY MORE ENTRIES ?\n         BE    GOHOME                   NO\n         CLOSE (LPROC001)               CLOSE THE DSN\n         BCT   R5,LOOKFOR               GO GET NEXT ENTRY\nGOHOME   CLI   FOUNDFLG,FOUNDIT         WAS PROC FOUND ?\n         BE    GETOUT                   YES\n         MVC   MEMMSG1,PROCNAME         MOVE PROC NAME TO MSG\n         TPUT  MSG1,L'MSG1              TELL USER PROC FOUND\nGETOUT   TPUT  BLANK,L'BLANK            TPUT BLANK LINE\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*\n*        CHANGE ADDRESSING MODES\n*\nA24      LA    3,0(3)                   CLEAR HIGH ORDER BIT\n         BSM   0,3\n*\nA31      O     3,=X'80000000'           SET HIGH ORDER BIT\n         BSM   0,3\n*\n*        STORAGE AREA\n*\nSAVEAREA DS    18F\nBADLOC   DC    CL18'BAD LOCATE OF JES2'\nHOLDDD   DC    CL44' '                  USED TO HOLD DDNAME\nERASE    DC    X'27F5401D40'            USED TO CLEAR 3270 TERMINAL\nJES2     DC    CL8'JES2    '            ADDRESS SPACE NAME\nXMEMADDR DS    F                        HOLD AREA FOR PGM ADDR\nPARMLIST DS    0F,CL(XMPARMSL)          PARMLIST\nDSNLIST  DC    36CL44' '                LIST OF DSN'S 35 MAX + 1\nHOLDSSAR DS    F                        HOLD AREA FOR SASN\nHOLDAX   DS    F                        HOLD AREA FOR AX\nIKJMVC   MVC   0(*-*,R2),0(R3)          MOVE FOR EX\nMSG0     DS    0CL79\n         DC    CL21'*** ALLOCATE ERROR - '\nERRORDSN DC    CL44' '\n         DC    CL14' - NOT SEACHED'\nMSG1     DS    0CL50\n         DC    CL7'PROC '\nMEMMSG1  DC    CL8' '\n         DC    CL14' NOT FOUND IN '\n         DC    CL8'PROCLIB '\n         DC    CL13'CONCATENATION'\nMSG2     DS    0CL57\n         DC    CL7'PROC '\nMEMMSG2  DC    CL8' '\n         DC    CL10' FOUND IN '\n         DC    CL8'PROCLIB '\n         DC    CL13'CONCATENATION'\n         DC    CL11' DATASET(S)'\nMSG3     DC    CL23'JES2 PROCLIB DATASET(S)'\nBLANK    DC    CL2' '\nCPPLADDR DS    F\nPROCNAME DC    CL8' '\nDDPRT    DC    X'00'\nPRINTDD  EQU   X'80'\nPRNTFLAG DC    X'00'\nPRINTED  EQU   X'80'\nFOUNDFLG DC    X'00'\nFOUNDIT  EQU   X'80'\nBADPARSE DC    CL17'BAD PARSE OF PARM'\nABC      GTEDADAT DSNAM=XX.YYY,DDNAM=LPROC001,                         X\n               CLOSE=YES,STATS=SHR,CNVRT=YES\nLPROC001 DCB   DDNAME=LPROC001,                                        X\n               DSORG=PO,                                               X\n               MACRF=R,                                                X\n               EODAD=GOBACK,                                           X\n               RECFM=FB,                                               X\n               LRECL=0,                                                X\n               BLKSIZE=0\nDBLWORD  DS    D\n                  DS  0H\nBLDL_LIST         DC  H'1'\nBLDL_LENGTH       DC  H'76'\nBLDLAREA          DS  1CL76\nPCL      IKJPARM DSECT=PDL\nPROC     IKJIDENT 'PROC SEARCH NAME',UPPERCASE,FIRST=ALPHA,            X\n               MAXLNTH=8,OTHER=ALPHANUM,DEFAULT='$$$$$$$$',            X\n               HELP='VALID PROC NAME'\n         IKJENDP\n         TITLE 'COMMAND PROCESSOR PARAMETER LIST'\n         IKJCPPL\n         TITLE 'GETMAIN WORK AREA'\nWORK     DSECT\nPARSE    EQU   *\nPARSPARM DS    7A                       PPL\nPARSECB  DS    F                        ECB\nPARSANS  DS    A                        PDL\nPARSELEN EQU   *-PARSE\nWORKLEN  EQU   *-WORK\n         TITLE 'PARSE PARAMETER LIST'\n         IKJPPL\nPDL      DSECT\n         ORG   PROC\nPROCPTR  DS    A                       ADDRESS OF SEARCH PROC\nPROCLEN  DS    H                       LENGTH OF PROC\nPROCFLAG DS    X                       FLAGS\nPROFOUND EQU   X'80'                   PROC PRESENT\n*----------------------------------- PARM MAPPING FOR CROESS MEM\nXMPARMS  DSECT\nXMASCB   DS    F                     ASCB\nXMDSNS   DS    A                     ADDRESS OF DSNS\nXMPARMSL EQU   *-XMPARMS             LENGTH\n*----------------------------------- END OF PARM AREA\n         PRINT NOGEN\n         TITLE 'CVT MAPPING'\n         CVT   DSECT=YES\n         TITLE 'IKJEFF18 CONTROL BLOCKS'\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         TITLE 'ASCB MAPPING MACRO'\n         IHAASCB\n         TITLE 'PARTITIONED DATA SET ENTRY'\n         IHAPDS\n         TITLE 'SVC-99 CONTROL BLOCKS'\n         IEFZB4D0\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPROC$": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x19\\x00\\x19\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=YOUR.SOURCE(LPROC)\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST,'AC=1')\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LPROC(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPROC#": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\n\\x00\\n\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "AMDAHL"}, "text": ")F FUNCTION -\n     DISPLAY DATASET(S) THAT ARE ALLOCATED TO JES2 PROCLIB\n     DD NAMES OR IF A PROC NAME IS SPECIFIED, SEARCH THROUGH\n     DATASETS AND DISPLAY WHERE PROC IS FOUND.\n)X SYNTAX -\n         LPROC PROCNAME\n  REQUIRED - NONE\n  DEFAULT  - DISPLAY DATASETS ALLOCATED TO JES2 PROCLIB DD'S.\n)O OPERAND -\n))PROCNAME - PROC NAME TO SEARCH FOR IN JES2 PROCLIB ALLOCATION.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPROCXM": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00p\\x00p\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 112, "newlines": 112, "modlines": 0, "user": "AMDAHL"}, "text": "*********************************************************************\n*  FINDS TIOT IN SECONDARY ADDRESS SPACE (JES2) AND RETURNS A       *\n*  TABLE OF DSN'S TO THE CALLING PROGRAM FOR DDNAMES STARTING       *\n*  WITH \"PROC\".   CALLED BY LPROC COMMAND                           *\n*  BOYSEN/AMDAHL   02/94                                            *\n*                                                                   *\n*  MODIFIED TO RETURN THE DDNAME FOR DISPLAY  BOYSEN 08/94          *\n*                                                                   *\n*********************************************************************\nLPROCXM  CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLPROCXM  CSECT\nLPROCXM  AMODE 31\nLPROCXM  RMODE ANY\n         SAVE  (14,12)                  SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         LR    R3,R1                    SAVE PARM ADDRESS\n         USING XMPARMS,R3               MAP PARMS\n*\nGETTIOT  DS    0H\n         L     R6,XMASCB                GET 2ND ASCB FROM PARM\n         L     R7,XMDSNS                ADDRESS OF TABLE OF DSNS\n         SAC   256                      GET INTO SECONDARY ADDR MODE\n         L     R6,ASCBASXB-ASCB(,R6)    ADDR OF ASXB IN SECONDARY ADDR\n         L     R6,ASXBFTCB-ASXB(,R6)    ADDR OF FIRST TCB\n         USING TCB,R6                   MAP TCB\nTCBLOOP  ICM   R8,15,TCBJPQ             ADDRESS OF JOB-PACK-AREA QUEUE\n         BZ    NEXTTCB                  =0, NO MODULES FOR THIS TCB\n         L     R10,TCBTIO-TCB(,R6)      SECONDARY TIOT ADDR\n         LA    R10,TIOENTRY-TIOT(,R10)  1ST DD SEGMENT IN TIOT\n         USING TIOENTRY,R10             ADDRESSABILTY TO TIOT\n         USING JFCB,R2                  ADDRESSABILTY TO JFCB\nLOOP1    CLC   PROCS(4),TIOEDDNM        IS IT ONE OF THE PROCXX DD'S\n         BNE   GETNEXT                  GET NEXT DD IN TIOT\n         LA    R5,2                     MOVE LENGTH   8/94\n         MVCP  0(R5,R7),SLASHES,R4      MOVE DDNAME\n         LA    R7,2(,R7)                BUMP 1 FOR DDNAME\n         LA    R5,8                     MOVE LENGTH   8/94\n         MVCP  0(R5,R7),TIOEDDNM,R4     MOVE DDNAME\n         LA    R7,L'JFCBDSNM-2(,R7)     NEXT ENTRY IN DSN TABLE\nGETDSN   ICM   R2,7,TIOEJFCB            JFCB POINTER\n         LA    R2,16(R2)                FIX IT\n         LA    R5,L'JFCBDSNM            LOAD LENGTH OF MVCP\n         MVCP  0(R5,R7),JFCBDSNM,R4     MOVE DSNAME(S)\n         LA    R7,L'JFCBDSNM(,R7)       NEXT ENTRY IN DSN TABLE\nNEXTDSN  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    EXIT00                   NO->MORE DDNAMES IN TABLE\n         CLC   TIOEDDNM,=8C' '          PART OF OUR CONCAT ???\n         BNE   LOOP1                    NO, GET OUT\n         B     GETDSN                   GET NEXT DSN IN CONCAT\nGETNEXT  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    EXIT00                   NO->MORE DDNAMES IN TABLE\n         B     LOOP1                    NO, KEEP ON GOING\n         B     EXIT00                   WE HAVE IT, LETS GO\nNEXTTCB  DS    0H\n         ICM   R6,15,TCBTCB             ADDR OF NEXT TCB ON TCB QUEUE\n         BNZ   TCBLOOP                  LET'S TRY THIS TCB\nEXIT00   DS    0H\n         SAC   0                        GET INTO PRIMARY ADDR MODE\n         LA    R15,X'00'                SET RETURN CODE 00\nGOBACK   DS    0H                       RETURN ROUTINE\n         RETURN (14,12)                 RESTORE REGS AND RETURN\n*\n*        SUBRTN TO MOVE R10 TO THE NEXT DD ENTRY IN THE TIOT\n*\nNEXTDD   SLR   R8,R8\n         IC    R8,0(,R10)            R8=LENGTH OF CURRENT DD ENTRY\n         LA    R10,0(R8,R10)         R10->NEXT DD ENTRY IN TIOT\n         BR    R14                   RETURN\n*\n*        STORAGE AREA\n*\nPROCS    DC    CL4'PROC'\nSLASHES  DC    CL2'//'\n*----------------------------------- PARM MAPPING FOR CROESS MEM\nXMPARMS  DSECT\nXMASCB   DS    F                     ASCB\nXMDSNS   DS    A                     ADDRESS OF DSN NAMES\nXMPARMSL EQU   *-XMPARMS             LENGTH\n*----------------------------------- END OF PARM AREA\n         PRINT NOGEN\n         TITLE 'TCB MAPPING'\n         IKJTCB\n         TITLE 'TIOT MAPPING'\nTIOT     DSECT\n         IEFTIOT1\n         TITLE 'JFCB MAPPING'\nJFCB     DSECT\n         IEFJFCBN\n         TITLE 'ASCB MAPPING'\n         IHAASCB\n         TITLE 'ASCB EXTENSION MAPPING'\n         IHAASXB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LPROCXM$": {"ttr": 2578, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x18\\x00\\x18\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK,RENT'\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=YOUR.SOURCE\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST,RENT,REUS,'AC=1')\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LPROCXM(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPROCXMC": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95)\\x0f\\x00\\x95)\\x0f\\x14\\x17\\x00\\x92\\x00\\x92\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-10-17T00:00:00", "modifydate": "1995-10-17T14:17:00", "lines": 146, "newlines": 146, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=ASMA90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK,RENT'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.SOURCE\n//SYSLIN   DD  UNIT=SYSDA,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  *\n*********************************************************************\n*  FINDS TIOT IN SECONDARY ADDRESS SPACE (JES2) AND RETURNS A       *\n*  TABLE OF DSN'S TO THE CALLING PROGRAM FOR DDNAMES STARTING       *\n*  WITH \"PROC\".   CALLED BY LPROC COMMAND                           *\n*  BOYSEN/AMDAHL   02/94                                            *\n*                                                                   *\n*  MODIFIED TO RETURN THE DDNAME FOR DISPLAY  BOYSEN 08/94          *\n*                                                                   *\n*  MODIFIED TO CHECK FOR EXISTENCE OF CA-ENF PRODUCT  BOYSEN '95    *\n*********************************************************************\nLPROCXM  CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12                       BASE REGISTER\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\nLPROCXM  CSECT\nLPROCXM  AMODE 31\nLPROCXM  RMODE ANY\n         SAVE  (14,12)                  SAVE CALLERS REGS\n         BASR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         LR    R3,R1                    SAVE PARM ADDRESS\n         USING XMPARMS,R3               MAP PARMS\n*\nGETTIOT  DS    0H\n         L     R6,XMASCB                GET 2ND ASCB FROM PARM\n         L     R7,XMDSNS                ADDRESS OF TABLE OF DSNS\n         SAC   256                      GET INTO SECONDARY ADDR MODE\n         L     R6,ASCBASXB-ASCB(,R6)    ADDR OF ASXB IN SECONDARY ADDR\n         L     R6,ASXBFTCB-ASXB(,R6)    ADDR OF FIRST TCB\n         USING TCB,R6                   MAP TCB\nTCBLOOP  DS    0H\n         USING CDENTRY,R8               MAP CDE\n         ICM   R8,15,TCBJPQ             ADDRESS OF JOB-PACK-AREA QUEUE\n         BZ    NEXTTCB                  =0, NO MODULES FOR THIS TCB\n         CLC   CDNAME(4),CA_NAME        CHECK FOR CA PRODUCT NAME\n         BE    NEXTTCB                  GET NEXT TCB IF CA\n         L     R10,TCBTIO-TCB(,R6)      SECONDARY TIOT ADDR\n         LA    R10,TIOENTRY-TIOT(,R10)  1ST DD SEGMENT IN TIOT\n         USING TIOENTRY,R10             ADDRESSABILTY TO TIOT\n         USING JFCB,R2                  ADDRESSABILTY TO JFCB\nLOOP1    CLC   PROCS(4),TIOEDDNM        IS IT ONE OF THE PROCXX DD'S\n         BNE   GETNEXT                  GET NEXT DD IN TIOT\n         LA    R5,2                     MOVE LENGTH   8/94\n         MVCP  0(R5,R7),SLASHES,R4      MOVE DDNAME\n         LA    R7,2(,R7)                BUMP 1 FOR DDNAME\n         LA    R5,8                     MOVE LENGTH   8/94\n         MVCP  0(R5,R7),TIOEDDNM,R4     MOVE DDNAME\n         LA    R7,L'JFCBDSNM-2(,R7)     NEXT ENTRY IN DSN TABLE\nGETDSN   ICM   R2,7,TIOEJFCB            JFCB POINTER\n         LA    R2,16(R2)                FIX IT\n         LA    R5,L'JFCBDSNM            LOAD LENGTH OF MVCP\n         MVCP  0(R5,R7),JFCBDSNM,R4     MOVE DSNAME(S)\n         LA    R7,L'JFCBDSNM(,R7)       NEXT ENTRY IN DSN TABLE\nNEXTDSN  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    EXIT00                   NO->MORE DDNAMES IN TABLE\n         CLC   TIOEDDNM,=8C' '          PART OF OUR CONCAT ???\n         BNE   LOOP1                    NO, GET OUT\n         B     GETDSN                   GET NEXT DSN IN CONCAT\nGETNEXT  BAL   R14,NEXTDD               R10->NEXT DD ENTRY\n         CLI   0(R10),X'00'             END OF TIOT?\n         BE    EXIT00                   NO->MORE DDNAMES IN TABLE\n         B     LOOP1                    NO, KEEP ON GOING\n         B     EXIT00                   WE HAVE IT, LETS GO\nNEXTTCB  DS    0H\n         ICM   R6,15,TCBTCB             ADDR OF NEXT TCB ON TCB QUEUE\n         BNZ   TCBLOOP                  LET'S TRY THIS TCB\nEXIT00   DS    0H\n         SAC   0                        GET INTO PRIMARY ADDR MODE\n         LA    R15,X'00'                SET RETURN CODE 00\nGOBACK   DS    0H                       RETURN ROUTINE\n         RETURN (14,12)                 RESTORE REGS AND RETURN\n*\n*        SUBRTN TO MOVE R10 TO THE NEXT DD ENTRY IN THE TIOT\n*\nNEXTDD   SLR   R8,R8\n         IC    R8,0(,R10)            R8=LENGTH OF CURRENT DD ENTRY\n         LA    R10,0(R8,R10)         R10->NEXT DD ENTRY IN TIOT\n         BR    R14                   RETURN\n*\n*        STORAGE AREA\n*\nPROCS    DC    CL4'PROC'\nSLASHES  DC    CL2'//'\nCA_NAME  DC    CL4'#CA-'\n*----------------------------------- PARM MAPPING FOR CROESS MEM\nXMPARMS  DSECT\nXMASCB   DS    F                     ASCB\nXMDSNS   DS    A                     ADDRESS OF DSN NAMES\nXMPARMSL EQU   *-XMPARMS             LENGTH\n*----------------------------------- END OF PARM AREA\n         PRINT NOGEN\n         TITLE 'TCB MAPPING'\n         IKJTCB\n         TITLE 'TIOT MAPPING'\nTIOT     DSECT\n         IEFTIOT1\n         TITLE 'JFCB MAPPING'\nJFCB     DSECT\n         IEFJFCBN\n         TITLE 'ASCB MAPPING'\n         IHAASCB\n         TITLE 'ASCB EXTENSION MAPPING'\n         IHAASXB\n         TITLE 'CONTENTS DIRECTORY ENTRY'\n         IHACDE\n         END\n/*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM='XREF,LET,LIST,RENT,REUS'\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=SYS1.DMCR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME LPROCXM(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MCSCMD": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00r\\x00r\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 114, "newlines": 114, "modlines": 0, "user": "AMDAHL"}, "text": "MCSCMD   CSECT\n*****************************************************************\n*   THIS PROGRAM WILL RUN AS A STARTED TASK AND USES THE MVS    *\n*   MODIFY COMMAND TO COMMUNICATE WITH THE TASK.  IT ENABLES    *\n*   OPERATORS TO ENTER A SYSTEM COMMAND AS IF IT CAME FROM THE  *\n*   MASTER CONSOLE, I.E.   CF COMMANDS FROM A MCS CONSOLE       *\n*   ENTER   F MCSCMD,END  TO TERMINATE THE TASK                 *\n*   BOYSEN/AMDAHL    07/23/93                                   *\n*****************************************************************\n         PRINT NOGEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12)\n         BALR  R11,0\n         USING *,R11\n         ST    R13,SAVE+4\n         LA    R6,SAVE\n         ST    R6,8(R13)\n         LA    R13,SAVE\n******** INITIALIZE POINTERS *********\n         L     R5,CVTPTR               GET ADDR OF CVT\n         USING CVTMAP,R5\n         L     R5,CVTCUCB              GET CONSOLE UCM BASE ADDR\n         DROP  R5\n         LA    R5,0(,R5)               INSURANCE\n         S     R5,=F'4'                BACK UP FOUR BYTES\n         L     R5,0(,R5)               GET ADDR OF UCM PREFIX\n         USING UCMPRFX,R5\n         L     R5,UCMMCENT             GET ADDR OF MASTER CONSOLE UCM\n         DROP  R5\n         USING UCMLIST,R5\n         MVC   CONSOLE,UCMID           GET CONSOLE UCMID\nFINDCIB  DS    0H\n         EXTRACT COMMADDR,FIELDS=COMM\n         L     R1,COMMADDR             ANSWER AREA\n         L     R2,4(,R1)               ADDRESS OF CIB\n         LA    R3,4(,R1)               ADDRESS OF ADDRESS OF CIB\n         LTR   R2,R2                   IS THERE A CIB ?\n         BZ    NOSTART\n         USING CIB,R2\n         CLI   CIBVERB,CIBSTART        IS IT A START\n         BNE   NOSTART\n         DROP  R2\n         QEDIT ORIGIN=(3),BLOCK=(2)\nNOSTART  QEDIT ORIGIN=(3),CIBCTR=2\n         LA    R15,0\nCIBWAIT  MVC   REPLY(30),BLANKS        CLEAR OUT REPLY\n         L     R1,COMMADDR             POINT TO COMM AREA\n         L     R1,0(,R1)               POINT TO COMM ECB\n         WAIT  ECB=(1)                 WAIT FOR MODIFY\n         L     R1,COMMADDR             POINT TO COMMADDR\n         L     R2,4(,R1)               POINT TO CIB\n         USING CIB,R2\n         LA    R3,4(,R1)\n         CLI   CIBVERB,CIBSTOP         STOP ISSUED ????\n         BE    RETURN                  GET OUT, STOP ISSUED\n         LH    R1,CIBDATLN             GET LENGTH OF COMMAND\n         BCTR  R1,0                    LENGTH MINUS 1\n         EX    R1,MVCHAR               MOVE OPERAND TO REPLY\n         B     TESTCMD                 SEE WHAT WE HAVE\nMVCHAR   MVC   REPLY(0),CIBDATA        MOVE FOR EXECUTE\nTESTCMD  DS    0H\n         QEDIT ORIGIN=(3),BLOCK=(2)    FREE THE CIB\n         OC    REPLY,BLANKS            UPPERCASE THE ANSWER\n         CLC   REPLY(3),=C'END'        IS THE REPLY 'END'\n         BE    RETURN                  NOPE....YES, GET OUT\nISSUECMD DS    0H                      ISSUE OPERATOR COMMAND\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R1,SVC34CMD             PUT COMMAND ADDR IN R1\n         SR    R0,R0                   ZERO FOR INSERT\n         IC    R0,CONSOLE              INSERT MASTER CONSOLE ID\n         SVC   34                      SCHEDULE CSCB\n         XC    MCSFLAGS,MCSFLAGS       ZERO MCS FLAGS\n         MODESET KEY=NZERO,MODE=PROB\n         B     CIBWAIT                  GO WAIT FOR ANOTHER REPLY\n         SPACE\nRETURN   L     R13,SAVE+4               GET OLD SAVE AREA\n         RETURN (14,12),RC=4095         AND SPLIT......\n         EJECT\nSVC34CMD DS    0CL34\n         DC    AL2(SVC34LEN-*)\nMCSFLAGS DC    H'0'\nREPLY    DC    CL30' '                  OPERATOR COMMAND\nSVC34LEN EQU   *\nSAVE     DC    18F'0'\n         DC    H'0'\nBLANKS   DC    CL30' '\nCONSOLE  DC    XL1'00'                  CONSOLE ID FROM UCMID\nCOMMADDR DC    A(0)\nECBADDR  DC    A(0)\nCIBADDR  DC    A(0)\n         SPACE 2\n******** DSECTS ********\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES\n         SPACE 2\n         IEECUCM FORMAT=NEW\n         SPACE 2\nCIB      DSECT\n         IEZCIB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MCSCMD$": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x18\\x00\\x18\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=YOUR.SOURCE\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST,'AC=1')\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME MCSCMD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MCSCMD#": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "AMDAHL"}, "text": "//MCSCMD  PROC\n//*\n//* +-----------------------------------------------------------------+\n//* |                                                                 |\n//* |   THIS PROCEDURE IS USED TO ENTER A MASTER CONSOLE COMMAND      |\n//* |   FROM A NON-MASTER CONSOLE TERMINAL I.E CF COMMANDS FROM       |\n//* |   MCS CONSOLE  BOYSEN/AMDAHL                                    |\n//* +-----------------------------------------------------------------+\n//*\n//MCSCMD  EXEC PGM=MCSCMD\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MCSESA": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x95)\\x0f\\x00\\x95)\\x1f\\x16\\x08\\x01\\xd6\\x01\\xd5\\x00\\x04\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-10-17T00:00:00", "modifydate": "1995-10-18T16:08:00", "lines": 470, "newlines": 469, "modlines": 4, "user": "AMDAHL"}, "text": "//*\n//*       NOTE !  THIS IS THE ESA ASSEMBLER, CHANGE TO IEV90 FOR XA\n//*\n//COM     EXEC PGM=ASMA90,REGION=512K,\n//    PARM='XREF(SHORT),NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=YOUR.ESA.SOURCE\n//SYSLIN   DD  UNIT=SYSDA,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  *\nMCS      TITLE      'DISPLAY MASTER CONSOLE SIB ON TSO TERMINAL'\n***********************************************************************\n*                                                                     *\n* TO USE:                                                             *\n*                                                                     *\n*     1) ENTER MCS.                                                   *\n*                                                                     *\n*     2) THE MASTER CONSOLE SCREEN IMAGE BUFFER WILL BE DISPLAYED ON  *\n*        YOUR TSO TERMINAL. FOR USERS WITH OPER AUTHORITY, AN INPUT   *\n*        BUFFER WILL BE PROVIDED AT THE BOTTOM OF THE SCREEN WHICH    *\n*        CAN BE USED TO ENTER ANY MVS OR JES2 COMMAND. IF YOU HIT     *\n*        ENTER WITHOUT ANY COMMAND, THE SCREEN WILL BE UPDATED AND    *\n*        REDISPLAYED.  IF YOU DON'T WANT THE COMMAND ECHOED ON THE    *\n*        CONSOLE, PRECEED THE COMMAND WITH A NOT SIGN (\u00ac).            *\n*                                                                     *\n*     3) TO PLACE YOURSELF INTO AUTO-ROLL MODE, HIT THE PA2 KEY.      *\n*        THIS WILL REFRESH THE SCREEN EVERY SECOND. TO RETURN TO      *\n*        NORMAL MODE, HIT THE PA1 KEY.  ANY COMMAND PREVIOUSLY        *\n*        ENTERED WILL BE REDISPLAYED USING THE PA1 KEY.               *\n*                                                                     *\n*     4) TO TERMINATE MCS, HIT ANY PF KEY.                            *\n*                                                                     *\n*                                                                     *\n* CHANGE HISTORY:                                                     *\n*                                                                     *\n*     1) CODE CHANGED EXTENSIVELY TO WORK WITH XA 2.2 UP THRU ESA     *\n*        5.2 ( DOES NOT SUPPORT SYSPLEX YET ).  ORIGINAL CODE TAKEN   *\n*        FROM EARLIER CBT TAPE I BELIEVE.  THIS VERSION DOES SUPPORT  *\n*        EXTENDED ATTRIBUTE CONSOLE   BOYSEN/AFSC                     *\n*                                                                     *\n*     2) MCS COMMAND MUST BE ADDED TO SYS1.PARMLIB MEMBER IKJTSOXX    *\n*        AS AN AUTHORIZED COMMAND AND BE LINKED INTO AN AUTH LIB.     *\n*        USER MUST HAVE TSO OPER AUTHORITY TO ENTER COMMANDS          *\n*                                                                     *\n***********************************************************************\n         EJECT\nMCS      CSECT\n***********************************************************************\n*                                                                     *\n*        ENTRANCE JUNK                                                *\n*                                                                     *\n***********************************************************************\n         SAVE  (14,12),,CONSOLE_DISPLAY_ON_TSO_TERMINAL\n         LR    R12,R15             USE R12 AS PROG BASE\n         USING MCS,R12             TELL ASSEMBLER ABOUT BASE REG\n         LR    R9,R1               SAVE ADDR OF CPPL\n         USING CPPL,R9             TELL ASSEMBLER\n         ST    R13,SAVE+4          CHAIN\n         LA    R3,SAVE              SAVE\n         ST    R3,8(,R13)            AREAS\n         LR    R13,R3                 TOGETHER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ENVIRONMENT                                        *\n*                                                                     *\n***********************************************************************\n         GTSIZE\n         LTR   R0,R0               IS THIS A 3270 TYPE DEVICE\n         BZ    ERROR               NO - CANNOT BE MCS CONSOLE\n         STSIZE SIZE=80,LINE=24    SET SCREEN TO 24X80\n         L     R4,CPPLPSCB         GET ADDR OF PSCB\n         USING PSCB,R4\nCHKAUTH  DS    0H\n         TM    PSCBATR1,PSCBCTRL   DOES USER HAVE OPER AUTH\n         BZ    NOTAUTH             NO, SKIP SETTING AUTH BIT\n         OI    BITS,AUTHFLG        INDICATE COMMAND AUTHORITY\n         DROP  R4\nNOTAUTH  DS    0H\n         GETMAIN R,LV=WORKLEN      GETMAIN FOR WORKAREA\n         DROP  R9                  FORGET ABOUT REG9\n         LR    R9,R1               GET MEMORY ADDRESS\n         USING WORKAREA,R9         ADDRESS IT\n         STAX  STAXEXIT            ESTABLISH ATTENTION EXIT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   STAXERR             BRANCH ON ERROR\n         ESTAE ESTAEXIT            ESTABLISH ESTAE EXIT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ESTAERR             BRANCH ON ERROR\n         LA    R1,ERASE            POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE          GET THE LENGTH\n         TPUT  (1),(0),FULLSCR     ERASE THE 3270 SCREEN\n         MODESET KEY=ZERO,MODE=SUP GET INTO SUPERVISOR STATE/KEY ZERO\n         L     R1,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R1           SET ADDRESSABILITY\n         L     R14,CVTASCBH        HIGHEST ASCB ADDRESS\n         USING ASCB,R14            SET ADDRESSABILITY\nLOOPNM   ICM   R15,15,ASCBJBNI     IS IT A BATCH JOB ?\n         BZ    NOBATCH             IF NOT, CHECK IF STC\n         B     CHKJOBNM            CHECK JOBNAME\nNOBATCH  ICM   R15,15,ASCBJBNS     IS IS A STARTED TASK ?\n         BZ    NXTASCB             IF NOT, GET NEXT ASCB\nCHKJOBNM CLC   0(8,R15),CNSL       CONSOLE ADDRESS SPACE?\n         BE    PROCESS             IF SO, GET ASID\nNXTASCB  ICM   R14,15,ASCBFWDP     GET NEXT ASCB\n         BZ    EOJ                 IF NO MORE LEAVE NOW!\n         B     LOOPNM              CONTINUE THE SEARCH\nPROCESS  LH    R4,ASCBASID         LOAD CONSOLE ASID FOR SSAR\n         DROP  R1,R14              DONE WITH ADDRESSABILITY\nRESAX    AXRES AXLIST=AXLIST       RESERVE AN 'AX'\n         AXEXT ASID=(4)            EXTRACT 'AX' OF 'CONSOLE' INTO R0\n         AXSET AX=(0)              SET OUR 'AX' TO THAT OF 'CONSOLE'\n         SSAR  R4                  SET 'CONSOLE' AS SEC'NDY ADDR SPC\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE POINTERS                                          *\n*                                                                     *\n***********************************************************************\n         L     R5,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R5\n         L     R5,CVTCUCB          GET CONSOLE UCM BASE ADDR\n         DROP  R5\n         LA    R5,0(,R5)           INSURANCE\n         S     R5,=F'4'            BACK UP FOUR BYTES\n         L     R5,0(,R5)           GET ADDR OF UCM PREFIX\n         USING UCMPRFX,R5\n         L     R5,UCMMCENT         GET ADDR OF MASTER CONSOLE UCM\n         DROP  R5\n         USING UCMLIST,R5\n         MVC   CONSOLE,UCMID       GET CONSOLE UCMID\n         L     R6,UCMXB            GET ADDR OF RDCM\n         LA    R1,4                LENGTH FOR MVCP\n         SLR   R0,R0               ZERO R0 FOR MVCP\n         MVCP  TDCM(R1),0(R6),R0   MOVE ADDRESS FROM SEC TO PRIMARY\n         L     R7,TDCM             LOAD ADDR OF TDCM IN R7\n         USING STRTDCM,R7\n         LA    R1,4               SET TRUE LENGTH\n         SLR   R0,R0              SET STORAGE KEY\n         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO SCRN ADR\n         LA    R1,2               SET UP FOR HALF WORD MOVES\n         MVCP  OUTLEN(R1),DCMLGNTH-STRTDCM(R7),R0\n         MVCP  OUTCLEN(R1),DCMCORLN-STRTDCM(R7),R0\n         MVCP  OUTNUM(R1),DCMMSGAL-STRTDCM(R7),R0\n         LA    R1,4                SET UP FOR WORD MOVES\n         MVCP  MCSWARN(R1),DCMAWARN-STRTDCM(R7),R0  WARN LINE\n         L     R2,SIBPTR           PICK UP SIB POINTER\n         SH    R2,=H'2'            BACK UP 2 BYTES\n         LH    R3,OUTCLEN          R3 = INCORE LINE LENGTH MINUS\n         SH    R3,OUTLEN           DATA LENGTH = # OF CONTROL CHARS\n         SR    R2,R3               BACKUP POINTER TO BEGINNING OF DATA\n         SR    R3,R3               CLEAR R3\n         LH    R1,OUTNUM           LOAD # OF LINES INTO R1\n         AH    R1,=H'1'            ADD 1 TO NUMBER OF LINES SO...\n         STH   R1,OUTNUM           WE CAN GET INSTRUCTION MESSAGE\n         LH    R3,OUTCLEN          GET INCORE LINE LENGTH TIMES\n         MH    R3,OUTNUM           NUMBER OF LINES = BUFFER LENGTH\nSAVESIB  STM   R2,R3,SAVER23       SAVE SIB ADDRESS/LENGTH\n         B     DISPLAY             SKIP OVER TIMER ROUTINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TIMER ROUTINE                                                *\n*                                                                     *\n***********************************************************************\n         DS    0D                  ALIGNMENT\nTIMER    DS    0H\n         NI    BITS,255-ATTNFLG    RESET ATTN FLAG\n         OI    BITS,TIMEFLG        SET TIMER FLAG\n         STIMER WAIT,DINTVL=WAITTIME WAIT FOR 1 SEC\n***********************************************************************\n*                                                                     *\n*        DISPLAY CONSOLE SCREEN                                       *\n*                                                                     *\n***********************************************************************\nDISPLAY  DS    0H\n         LM    R2,R3,SAVER23       RESTORE SIB ADDRESS/LENGTH\n         LA    R10,SCREEN          POINT TO MY SCREEN AREA\n         SSAR  R4                  R4 CONTAINS ASID FOR 'CONSOLE'\n         SLR   R0,R0               ZERO R0 FOR MVCP\nMVCP     DS    0H\n         MVCP  0(R3,R10),0(R2),R0  MOVE SIB TO MY ADDRESS SPACE\n         BZ    GOTITALL            MAKE SURE WE GOT IT ALL\n         A     R2,=F'256'          ADJUST REGS FOR MVCP\n         A     R10,=F'256'               \"      \"\n         S     R3,=F'256'                \"      \"\n         B     MVCP                GO GET THE REST\nGOTITALL DS    0H\n         SR    R0,R0\n         L     R2,MCSWARN          LOAD ADDRESS OF WARN\n         LA    R10,WARNDATA        LOAD ADDRESS OF WARNING AREA\n         LA    R3,74               LENGTH\n         MVCP  0(R3,R10),0(R2),R0  MOVE THE DATA\n         LA    R10,SCREEN          LOAD ADDRESS OF SCREEN BUFFER\n         L     R11,SAVER23+4       GET LEN FOR TPUT\n         XC    CMDBUFF,CMDBUFF     BLANK CMDBUFF\n         TM    BITS,ATTNFLG+TIMEFLG CHECK FLAG BITS\n         BZ    CHEKAUTH            NEITHER ONE - GO CHECK AUTH\n         BO    RESET               BOTH - RESET BITS AND MSG AREA\n         TM    BITS,TIMEFLG        ARE WE IN AUTO-ROLL MODE?\n         BO    ROLLMODE            YES, GO DISPLAY AUTO-ROLL MSG\n*                                  NO, MUST BE A RESHOW REQUEST!\n         L     R1,SAVELEN          GET LENGTH TO MOVE COMMAND TEXT\n         EX    R1,MOVESAVE         MOVE SAVECMD TO CMDBUFF\n         NI    BITS,255-ATTNFLG    RESET ATTN FLAG\n         B     CHEKAUTH            GO TO CHECK AUTH ROUTINE\nROLLMODE DS    0H\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVC   0(AUTOL,R8),AUTO    DISPLAY AUTO-ROLL MESSAGE\n         LA    R11,AUTOL(,R11)     INCREMENT TPUT COUNT\n         B     TPUT                DISPLAY SIB WITH AUTO-ROLL MSG\nRESET    DS    0H\n         NI    BITS,255-ATTNFLG+TIMEFLG  ELSE RESET ATTN AND TIME FLAGS\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVI   0(R8),0             BLANK AUTO-ROLL MSG (ELSE, IT WILL\n         MVC   1(AUTOL-1,R8),0(R8) LEFT SHOWING FOR NON-AUTH USERS)\n         LA    R11,AUTOL(,R11)     INCREMENT TPUT COUNT\n         B     DISPLAY             GO PICK UP NEW SCREEN IMAGE\nCHEKAUTH DS    0H\n         TM    BITS,AUTHFLG        ALLOW COMMANDS?\n         BZ    TPUT                NO - BRANCH\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVC   0(READLEN,R8),READ  SETUP INPUT FIELD ON SCREEN\n         LA    R11,READLEN(,R11)   INCREMENT TPUT COUNT\n         LA    R8,0(R11,R10)       DO IT AGAIN\n         MVC   0(L'WARNDATA,R8),WARNDATA\n         LA    R11,L'WARNDATA(,R11)\nTPUT     DS    0H\n*    THE FOLLOWING TWO LINES ARE NECESSARY BECAUSE, IN ORDER TO ISSUE\n*    ANY SVC'S, PRIMARY AND SECONDARY ASN'S NEED TO BE THE SAME.\n         EPAR  R1                  EXTRACT PRIMARY ASN\n         SSAR  R1                  SET SECONDARY ASN TO CURRENT PRIMARY\n         TPUT  (10),(11),FULLSCR   WRITE THE SCREEN IMAGE BUFFER\n         TM    BITS,TIMEFLG        ARE WE IN AUTO-ROLL MODE?\n         BO    TIMER               GO WAIT SOME MORE\n         TGET  REPLY,160,ASIS      INPUT AND/OR CONTINUE\n         LTR   R15,R15             GOOD READ ?\n         BZ    ACTION              IF SO THEN BRANCH\n         TCLEARQ  INPUT            ELSE CLEAR BUFFERS\n         B     DISPLAY             AND REDISPLAY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE RESPONSE FROM TERMINAL                             *\n*                                                                     *\n***********************************************************************\nACTION   DS    0H\n         CLI   REPLY,X'6E'         PA2 KEY?\n         BE    TIMER               YES - ENTER AUTO-ROLL MODE\n         CLI   REPLY,X'60'         NO ACTION BY 3270 OPERATOR\n         BE    DISPLAY             YES - REDISPLAY\n         CLI   REPLY,X'7D'         ENTER KEY STRUCK ?\n         BNE   EOJ                 NO - END OF PROG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TEST FOR AUTHORITY TO ENTER COMMANDS                         *\n*                                                                     *\n***********************************************************************\n         TM    BITS,AUTHFLG        ALLOW COMMANDS?\n         BZ    DISPLAY             NO - REDISPLAY\n         SH    R1,=H'7'            LENGTH TO RECOVER INPUT COMMAND\n         BM    DISPLAY             NONE ENTERED - REDISPLAY\n         MVI   COMMAND+4,C' '      BLANK COMMAND BUFFER\n         MVC   COMMAND+5(159),COMMAND+4  FINISH BLANKING BUFFER\n         EX    R1,SPACES           ALL BLANKS ENTERED?\n         BE    DISPLAY             YES - REDISPLAY\n         EX    R1,INSERT           MVC   COMMAND+4(0),REPLY+6\n         ST    R1,SAVELEN\n         MVC   SAVECMD(160),COMMAND+4 SAVE COMMAND BUFFER TEXT\n         LA    R1,5(,R1)           GET COMMAND LEN+4\n         STH   R1,COMMAND          STORE INTO RDW\n         CLI   COMMAND+4,C'\u00ac'      TEST FOR NO-ECHO COMMAND (\u00ac)\n         BE    NOTSIGN             SKIP WTO IF PRESENT\n         LA    R1,COMMAND          PUT MSG ADDR INTO REG 1\n         OI    2(R1),X'41'         REG0 + QREG0\n         OI    3(R1),X'04'         NO HARD COPY\n         SR    R0,R0               ZERO R0 FOR INSERT\n         IC    R0,CONSOLE          INSERT MASTER CONSOLE ID\n         SVC   35                  ISSUE WTO - DISPLAY COMMAND\n         B     ISSUECMD            GO ISSUE THE COMMAND\nNOTSIGN  DS    0H\n         MVI   COMMAND+4,C' '      CLEAR THE NOT SIGN (\u00ac)\nISSUECMD DS    0H\n         LA    R1,COMMAND          PUT MSG ADDRESS INTO REG 1\n         SR    R0,R0               ZERO R0 FOR INSERT\n         IC    R0,CONSOLE          INSERT MASTER CONSOLE ID\n         SVC   34                  SCHEDULE CSCB\n         XC    COMMAND,COMMAND     ZERO MCS FLAGS IN CASE OF REPLY\n         B     DISPLAY             NOW REDISPLAY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF JOB ROUTINE                                           *\n*                                                                     *\n***********************************************************************\nEOJ      DS    0H\n         LA    R1,ERASE            POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE          GET THE LENGTH\n         TPUT  (1),(0),FULLSCR     ERASE THE 3270 SCREEN\n         AXFRE AXLIST=AXLIST       FREE THE AX\n         MODESET KEY=NZERO,MODE=PROB SET PROTECT KEY TO NONZERO\n         ESTAE 0                   DELETE ESTAE EXIT\nSTAXOFF  DS    0H\nRETURN   DS    0H\n         FREEMAIN R,LV=WORKLEN,A=(R9)\n         L     R13,SAVE+4          RESTORE SAVE AREA POINTER\n         RETURN (14,12),T,RC=0     RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n***********************************************************************\nERROR    DS    0H\n         LA    R1,ERRORMSG         LOAD ADDRESS OF MESSAGE\n         LA    R0,L'ERRORMSG       LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     RETURN\nSTAXERR  DS    0H\n         LA    R1,STAXMSG          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'STAXMSG        LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     RETURN\nESTAERR  DS    0H\n         LA    R1,ESTAEMSG         LOAD ADDRESS OF MESSAGE\n         LA    R0,L'ESTAEMSG       LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     STAXOFF\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE EXIT ROUTINE                                           *\n*                                                                     *\n***********************************************************************\nESTAEXIT DS    0H\n         USING ESTAEXIT,R15\n         STAX\n         XR    R15,R15             SET CODE FOR ABEND\n         BR    R14                 GO TO ABNORMAL TERMINATION\n         DROP  R15\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STAX EXIT ROUTINE                                            *\n*                                                                     *\n***********************************************************************\nSTAXEXIT DS    0H\n         USING STAXEXIT,R15\n         OI    BITS,ATTNFLG        SET ATTN FLAG\n         BR    R14                 RETURN\n         DROP  R15\n         EJECT\n*\n**       LITERALS\n*\n         LTORG\n         SPACE 2\n*\n**       EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n*\n**       EXECUTED INSTRUCTIONS\n*\nINSERT   MVC   COMMAND+4(0),REPLY+6\nSPACES   CLC   REPLY+6(0),COMMAND+4\nMOVESAVE MVC   CMDBUFF(0),SAVECMD\n         SPACE 2\n*\n**       MESSAGES\n*\nERRORMSG DC    C'MCS MUST BE INVOKED FROM A DISPLAY TERMINAL'\nSTAXMSG  DC    C'ERROR ESTABLISHING STAX EXIT'\nESTAEMSG DC    C'ERROR ESTABLISHING ESTAE EXIT'\n         SPACE 2\n*\n**       CONSTANTS AND WORK AREAS\n*\nSAVE     DC    18F'0'              SAVE AREA\nCNSL     DC    CL8'CONSOLE'\nAXLIST   DC    H'1',H'0'           AXRES PARM LIST\n*                HHMMSSHT\nWAITTIME DC    C'00000100'         1 SECOND WAIT TIME\nCONSOLE  DC    XL1'00'             CONSOLE ID FROM UCMID\n*\nBITS     DC    X'0'                PROGRAM SWITCHES\nAUTHFLG  EQU   X'80'\nATTNFLG  EQU   X'40'\nTIMEFLG  EQU   X'20'\n*\nAUTO     DC    X'115A501DE813',C' MCS AUTO-ROLL MODE / HIT < PA1 | ATTNX\n                > TO RETURN TO NORMAL MODE'\nAUTOL    EQU   *-AUTO\nERASE    DC    X'27F5401D40'       USED TO CLEAR 3270 TERMINAL BUFFER\nCOMMAND  DC    F'0'\n         DC    CL160' '            OPERATOR COMMAND\nSAVECMD  DC    CL160' '            OPERATOR COMMAND SAVE AREA\nSAVELEN  DC    F'0'                LENGTH FOR SAVECMD\nREPLY    DC    XL160'00'           OPERATOR COMMAND SAVE AREA\nREAD     DC    X'115A501DC913'     SET HIGHINTENS/UNPROT/MDT FIELD\nCMDBUFF  DC    XL160'00'           INPUT FROM TERMINAL\n         DC    X'1D60'             SET PROT FIELD\nREADLEN  EQU   *-READ              LENGTH OF READ AREA\nWORKAREA DSECT\nSAVER23  DS    2F                  SIB POINTER AND LENGTH SAVE AREA\nSIBPTR   DS    F                   POINTER TO SCREEN IMAGE BUFFER\nTDCM     DS    F                   POINTER TO TDCM\nMCSWARN  DS    F                   WARNING ADDRESS\nOUTLEN   DS    H                   CONSOLE LINE IMAGE LENGTH\nOUTCLEN  DS    H                   INCORE LINE LENGTH\nOUTNUM   DS    H                   NUMBER OF LINES FOR CONSOLE\nSCREEN   DS    CL1024              IMAGE OF\n         DS    CL1024              SCREEN\n         DS    CL80\nWARNDATA DS    CL74                WARNING MESSAGE\nWORKLEN  EQU   *-WORKAREA          LEN OF WORK AREA\n         EJECT\n*\n**       DSECTS\n*\n         PRINT ON,NOGEN\n         IKJCPPL\n         SPACE 2\n         IKJPSCB\n         SPACE 2\n         CVT   DSECT=YES\n         SPACE 2\n         IEECUCM FORMAT=NEW\n         SPACE 2\nIEETDCM  DSECT ,\n         IEECDCM\n         SPACE 2\n         IHAASCB\n         END\n/*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM=(XREF,LET,LIST,'AC=1')\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME MCS(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMFCPU$": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x19\\x00\\x19\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "AMDAHL"}, "text": "//COM     EXEC PGM=IEV90,REGION=512K,\n//    PARM='LOAD,XREF(SHORT),LINECNT=55,NODECK'\n//*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//SYSLIN   DD  UNIT=VIO,DSN=&LOADSET,DISP=(MOD,PASS),\n//             SPACE=(CYL,(2,2)),DCB=BLKSIZE=1680\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(12,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(20,2))\n//SYSPUNCH DD  DUMMY =*,DCB=FUNC=I\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  DSN=YOUR.SOURCE(SMFCPUID),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,COND=(4,LT),\n//        PARM='XREF,LET,LIST'\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DSN=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB\n//SYSLIN       DD   UNIT=SYSDA,DSN=&LOADSET,DISP=(OLD,DELETE)\n//  DD  DDNAME=SYSIN\n//SYSIN  DD *\n NAME SMFCPUID(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFCPU#": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00\\x08\\x00\\x08\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "AMDAHL"}, "text": ")F FUNCTION -\n     SET CLIST VARIABLE &SMFCPUID TO SMF CPUID\n)X SYNTAX -\n         SMFCPUID\n  REQUIRED - NONE\n  DEFAULT  - NONE\n)O OPERAND -\n))NONE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFCPUID": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15o\\x00\\x95\\x15o\\x11!\\x00N\\x00N\\x00\\x00\\xc1\\xd4\\xc4\\xc1\\xc8\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-06-05T00:00:00", "modifydate": "1995-06-05T11:21:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "AMDAHL"}, "text": "**********************************************************************\n*  THIS PROGRAM WILL GET THE SMF CPUID FROM THE SMCA AND SET A       *\n*  CLIST VARIABLE WITH THE SYSTEM ID    BOYSEN/AMDAHL   11/06/92     *\n**********************************************************************\nSMFCPUID CSECT\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEESMCA\n         PRINT ON\nSMFCPUID CSECT\nR15      EQU   15\nR14      EQU   14\nR13      EQU   13\nR12      EQU   12\nR11      EQU   11\nR10      EQU   10\nR9       EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\n         IKJTSVT\nSMFCPUID CSECT\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         BALR  R12,0                    ESTABLISH ADDRESSABILITY\n         USING *,12                     BASE OF EXECUTING PROGRAM\n         ST    R13,SAVEAREA+4           CALLERS SAVE AREA\n         LA    R15,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n         ST    R15,8(,R13)              EXECUTING PROGRAMS SAVEAREA\n         LA    R13,SAVEAREA             EXECUTING PROGRAMS SAVEAREA\n*\n         L     R4,CVTPTR                GET ADDRESS OF CVT\n         L     R5,CVTSMCA-CVT(,R4)      LOAD THE SMCA ADDRESS\n         MVC   VALUE,SMCASID-SMCABASE(R5)    MOVE THE SYSTEM ID\n*\n         L     R15,CVTPTR               ACCESS THE CVT\n         L     R15,CVTTVT-CVT(,R15)     ACCESS THE TSVT\n         L     R15,TSVTVACC-TSVT(,15)   ACCESS THE VARIABLE ACCESS RTN\n*\n*        INVOKE THE VARIABLE ACCESS SERVICE\n*\n         LTR   R15,R15                  VERIFY TSVT ADDRESS\n         BNZ   CALL441                  IF PRESENT, CALL IKJCT441\nLINK441  LINK  EP=IKJCT441,                                            X\n               PARAM=(ECODE,NAMEPTR,NAMELEN,VALUEPTR,VALUELEN,TOKEN),  X\n               VL=1\n         B     RET441\nCALL441  CALL  (15),(ECODE,NAMEPTR,NAMELEN,VALUEPTR,VALUELEN,TOKEN),VL\n*\nRET441   DS    0H\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   ERRORRTN\n*\n*\nERRORRTN DS    0H\n         L     R13,4(,R13)              CALLERS SAVE AREA\n         L     R14,12(,R13)             RESTORE R14\n         LM    R0,R12,20(R13)           RESTORE REMAINING REGS\n         BR    R14                      RETURN TO CALLER, REG 15\n*                                       CONTAINS RETURN FROM IKJCT441\n*\n*        STORAGE AREA\n*\nNAME     DC    CL8'SMFCPUID'            NAME OF THE VARIABLE\nNAMELEN  DC    F'8'                     LENGTH OF VARIABLE NAME\nVALUE    DC    CL4' '                   VALUE OF VARIABLE\nVALUELEN DC    F'4'                     LENGTH OF VALUE\nNAMEPTR  DC    A(NAME)                  POINTER TO VARIABLE NAME\nVALUEPTR DC    A(VALUE)                 POINTER TO VARIABLE VALUE\nTOKEN    DC    F'0'                     UNUSED, SET TO 0\nECODE    DC    A(TSVEUPDT)              ENTRY CODE FOR SETTING VALUES\nSAVEAREA DS    18F\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT248/FILE248.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT248", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}