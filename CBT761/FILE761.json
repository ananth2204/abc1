{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012737000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE761.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE761.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x0b'", "DS1TRBAL": "b'n\\xe6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05/\\x00\\x0b\\x05/\\x00\\x0e\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04J\\x00\\x00\\x01\\x07\\x16/\\x01\\x07\\x16/\\x10B\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf4@@@'", "ispf": {"version": "04.74", "flags": 0, "createdate": "2007-06-11T00:00:00", "modifydate": "2007-06-11T10:42:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-474"}, "text": "REGULAR CBT TAPE - VERSION 474    FILE:  761\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT474.FILE761\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 12 MEMBERS COUNTED; CUMULATIVE SIZE IS 743 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/11/07    10:42:55    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00R\\x00R\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 82, "newlines": 82, "modlines": 0, "user": "MBARON"}, "text": "Contents of this file:\n\n FINDALL  - REXX EXEC to scan the user's ISPLLIB, STEPLIB, the\n            LPALIST, the LINKLIST, the user's SYSPROC, and SYSEXEC\n            concatenations for the specified member.  Calling\n            sequence:\n                    FINDALL member {listtype}\n                            member is the program command CLIST or\n                                   REXX to be located\n                            listtype is either the word SHORT\n                                     (default) or LONG.  SHORT will\n                                     display only the library\n                                     containing an instance of\n                                     member.  LONG will display the\n                                     entire list with the the status\n                                     from SYSDSN.\n\n FINDPAN  - REXX EXEC to scan the user's ISPPLIB concatenation for\n            the specified ISPF panel.  The calling sequence is the\n            same as for FINDALL.\n\n FINDPARM - REXX EXEC to scan the system PARMLIB concatenation for\n            the specified parm member.  The parmlib concatenation is\n            built from the information stored in the IPA during IPL.\n            The calling sequence is the same as for FINDALL.\n\n FINDPROC - REXX EXEC to scan the JES2 PROCLIB concatenation(s) for\n            the specified PROC. The proclib concatenation must be\n            built manually from the JES2 JCL since I was too lazy to\n            write code to go cross memory to JES2 to get it from the\n            $HCT.  (If anyone has some code to do this, please feel\n            free to share it with me and I will incorporate it into\n            the EXEC.)The calling sequence is the same as for\n            FINDALL.\n\n #FINDLPA - REXX EXEC subroutine to extract the LPALST dataset names\n            from the LPAT.  The LPA libraries are not allocated\n            except as might occur for SYSDSN processing.  The EXEC\n            is written so as to function as either a subroutine or\n            as a main program.  If invoked as a main program, it\n            will stop at the first occurrence of the target member\n            and ask if the user wants to continue scanning the rest\n            of the LPALST libraries.  The calling sequence is the\n            same as for FINDALL.\n\n #FINDMOD - REXX EXEC subroutine to extract the LINKLIST dataset\n            names from the caller's Link List Set.  The Link List\n            libraries are not allocated except as might occur for\n            SYSDSN processing.  The EXEC is written so as to\n            function as either a subroutine or as a main program.\n            If invoked as a main program, it will stop at the first\n            occurrence of the target member and ask if the user\n            wants to continue scanning the rest of the LPALST\n            libraries.  The calling sequence is the same as for\n            FINDALL.\n\n #GENFIND - REXX EXEC subroutine to scan the output of LISTA STA to\n            find the target DDName concatenation and then to scan\n            for the target member.  Calling sequence:\n                   #GENFIND ddname member {listtype}\n                            ddname is the target concatenation\n                            member is the element to be located\n                            listtype is either the word SHORT\n                                     (default) or LONG.  SHORT will\n                                     display only the library\n                                     containing an instance of\n                                     member.  LONG will display the\n                                     entire list with the the status\n                                     from SYSDSN.\n\n #SYSID   - REXX EXEC subroutine extract the System name from\n            CVTSNAME.  If called as subroutine, it will simply\n            return the system name.  If called as a standalone\n            commands is will display it.  There are no parms in the\n            calling sequence\n\n $$README - A short note about compatibility.\n\n $INSTALL - A note on where to put these things in order to run them.\n\n Mark Baron - msb1230@optonline.net\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$README": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00\\x05\\x00\\x05\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 5, "newlines": 5, "modlines": 0, "user": "MBARON"}, "text": " I have been using these EXEC's since Wall Street had its wall.\n\n I have most recently used them in z/OS V1R7 but I expect that they\n will work as far back as MVS/ESA (if any one is still using that\n level).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$INSTALL": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00\\x02\\x00\\x02\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 2, "newlines": 2, "modlines": 0, "user": "MBARON"}, "text": " Install this suite into any accessible CLIST or EXEC library.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#FINDLPA": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00a\\x00a\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 97, "newlines": 97, "modlines": 0, "user": "MBARON"}, "text": "/* **************************** REXX ******************************* */\n/*                                                                   */\n/*  NAME: FINDLPA                                                    */\n/*  FUNC: Scan LPA table for datasets, then search in order for a    */\n/*        particular member name using SYSDSN function.              */\n/*  CALL: FINDLPA member listtype                                    */\n/*  SRCH: PSA+10 > CVT > CVT+4AC > SMEXT > SMEXT+38 > LPAT           */\n/*  OPSYS: OS/390                                                    */\n/*  Notes: listtype can be 'SHORT' or 'LONG'.  LONG lists all        */\n/*         datasets regardless of whether the member is found.       */\n/*         SHORT only lists the datasets the member is found in,     */\n/*         along with the number in the concatenation each dataset   */\n/*         is. SHORT is the default.                                 */\n/*                                                                   */\n/* ***************************************************************** */\n/*                                                                   */\n/*  FINDLPA:   EXEC to search LPA list for a specific member.        */\n/*                                                                   */\n/*  Syntax:    FINDLPA member {listtype}                             */\n/*                                                                   */\n/*  Where:     'member' is the member name to search for             */\n/*             'listtype' is SHORT(default) or LONG.  LONG lists all */\n/*               datasets searched, and SHORT only displays datasets */\n/*               the member was found in.                            */\n/*                                                                   */\n/*  Functions: TSO/E SYSDSN function                                 */\n/*                                                                   */\n/* ***************************************************************** */\nTrace O\nAddress TSO\n\nARG Member ListType\nIf Member = \"\" then\n  Do\n    Say \"You did NOT enter a member name.  Terminating...(FINDLPA)\"\n    Exit\n  End\nIf ListType = \"\" then ListType = \"SHORT\"\nSelect\n  When COMPARE(ListType,\"SHORT\") = 0 then NOP\n  When COMPARE(ListType,\"LONG\") = 0 then NOP\n  Otherwise\n    Do\n      Say \"Default listing of 'SHORT' assumed\"\n      ListType = \"SHORT\"\n    End\nEnd\nCvt = STORAGE(10,4)\nCVT = C2X(Cvt)\nCvtPtr = X2D(Cvt)+X2D('4AC')\nCvtPtr = D2X(CvtPtr)\nCvtSmext = STORAGE(CvtPtr,4)\nCvtSmext = C2X(CvtSmext)\nSmextPtr = X2D(CvtSmext)+X2D('38')\nSmextPtr = D2X(SmextPtr)\nLpatPtr = STORAGE(SmextPtr,4)\nLpatPtr = C2X(LpatPtr)\nLpatId = STORAGE(LpatPtr,4)\nIf LpatId \u00ac= \"LPAT\" then\n  Do\n    Say \"Bad LPAT Pointer\"\n    exit\n  End\nLpatPtr = X2D(LpatPtr) + 4\nLpatPtr = D2x(LpatPtr)\nLpaCount = STORAGE(LpatPtr,4)\nLpaCount = C2D(LpaCount)\nCALL #SYSID\nSay \"Searching LPA on\" result \"for\" Member\nLpatPtr = X2D(LpatPtr)+X2D(5)\nLpatPtr = D2X(LpatPtr);\nFound = \"NO\"\nDo I = 1 to LpaCount\n  LpaEntry = STORAGE(LpatPtr,44)\n  LpaEntry = STRIP(LpaEntry)\n  x = SYSDSN(\"'\"||LpaEntry||\"(\"||Member||\")'\");\n  LpaEntry = LEFT(LpaEntry,36)\n  Select\n    When ListType = \"SHORT\" & x = \"OK\" then\n      Do\n        Say \"  LPALST+\"I-1 \":\" LpaEntry X\n        Found = \"YES\"\n      End\n    When ListType = \"LONG\" then\n      Do\n        Say LpaEntry X\n        If x = 'OK' then Found = \"YES\"\n      End\n    otherwise\n      NOP\n  End\n  LpatPtr = X2D(LpatPtr)+45\n  LpatPtr = D2X(LpatPtr)\nEnd\nIf Found = \"NO\" then\n  Say \"No match for\" member \"in the LPALST concatenation\"\nExit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#FINDMOD": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00k\\x00k\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 107, "newlines": 107, "modlines": 0, "user": "MBARON"}, "text": "/* **************************** REXX ****************************** */\n/*                                                                  */\n/*  NAME: FINDMOD                                                   */\n/*  FUNC: Scan linklist table for datasets, then search in order    */\n/*        for a particular member name using SYSDSN function.       */\n/*  CALL: FINDMOD member listtype                                   */\n/*  SRCH: PSA+10 > CVT > CVT+4DC > LLT                              */\n/*  OPSYS: z/OS                                                     */\n/*  NOTES: listtype can be 'SHORT' or 'LONG'.  LONG lists all       */\n/*         datasets regardless of whether the member is found.      */\n/*         SHORT only lists the datasets the member is found in,    */\n/*         along with the number in the concatenation each dataset  */\n/*         is. SHORT is the default.                                */\n/*                                                                  */\n/* **************************************************************** */\nTrace O\nAddress TSO\nARG Member ListType .\nParse Source . Called_As .\nIf Called_As \u00ac= 'SUBROUTINE' then \"CLR3270\"\nIf Member = \"\" then\n  Do\n    Say \"You did NOT enter a member name.  Terminating...(FINDMOD)\"\n    exit\n  End\nIf LENGTH(Member) > 8 then\n  Do\n    Say \"Member name\" member \"too long.  Terminating...\"\n    Exit\n  End\nIf ListType = \"\" then ListType = \"SHORT\"\nLnkLstSetName = \"\"\nSelect\n  When COMPARE(ListType,\"SHORT\") = 0 then NOP\n  When COMPARE(ListType,\"LONG\") = 0 then NOP\n  Otherwise\n    Do\n      Say \"Default listing option of 'SHORT' assumed\"\n      ListType = \"SHORT\"\n   End\nEnd\nCvt = STORAGE(10,4)\nCvt = C2X(Cvt)\nCvtVerId = X2D(Cvt)-X2d('28')\nCvtVerId = D2X(CvtVerId)\nMvsVerId = STORAGE(CvtVerId,8)\nCvtECVT = X2D(Cvt)+X2D('8C')\nCvtECVT = D2X(CvtECVT)\nEcvtPtr = STORAGE(CvtECVT,4)\nEcvtPTR = C2X(EcvtPtr)\nEcvtDLCB = X2D(EcvtPtr)+X2D('88')\nEcvtDLCB = D2X(EcvtDLCB)\nDlcbPtr = STORAGE(EcvtDLCB,4)\nDlcbPtr = C2X(DlcbPtr)\nDlcbLnkLstSetName = X2D(DlcbPtr)+X2D('24')\nDlcbLnkLstSetName = D2X(DlcbLnkLstSetName)\nLnkLstSetName = STORAGE(DlcbLnkLstSetName,8)\nLnkLstSetName = \" Set\" LnkLstSetname\nDlcbLLT@ = X2D(DlcbPtr)+X2D('10')\nDlcbLLT@ = D2X(DlcbLLt@)\nLltPtr = STORAGE(DlcbLLT@,4)\nLltPtr = C2X(LltPtr)\nSetCvtLLTa:\nCvtLLTA = LltPtr\nLltId = STORAGE(CvtLLTA,4)\nCvtLLTA = X2D(CvtLLTA)+X2D(4)\nCvtLLTA = D2X(CvtLLTA)\nLltCount = STORAGE(CvtLLTA,4)\nLltCount = C2D(LltCount)\nCALL #SYSID\nSay \"Searching LINKLIST\"LnkLstSetName \"on\" result \"for\" Member\nCvtLLTA = X2D(CvtLLTA)+X2D(5);\nCvtLLTA = D2X(CvtLLTA);\nFound = \"NO\"\nDo I = 1 to LltCount\n  LltEntry = STORAGE(CvtLLTA,44)\n  LltEntry = STRIP(LltEntry)\n  x = SYSDSN(\"'\"||LltEntry||\"(\"||member||\")'\")\n  LltEntry = LEFT(LltEntry,36)\n Select\n    When listtype = 'SHORT' & x = 'OK' then\n      Do\n        Say \"LINKLIST+\"i-1 ':' LltEntry x\n        Found = 'YES'\n        If Called_As \u00ac= 'SUBROUTINE' then\n          Do\n            Say 'Do you want to continue the search?'\n            Pull Reply\n            If Reply \u00ac= 'Y' then LEAVE\n          End\n        Else\n          NOP\n      end;\n    When ListType = \"LONG\" then\n      Do\n        Say LltEntry x;\n        If x = \"OK\" then Found = \"YES\"\n      End;\n    Otherwise\n       NOP\n  End\n  CvtLLTA = X2D(CvtLLTA)+45;\n  CvtLLTA = D2X(CvtLLTA);\nEnd\nIf Found = \"NO\" then\n  Say \"No match for\" member \"in the LINKLIST concatenation\"\nExit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#GENFIND": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00Z\\x00Z\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 90, "newlines": 90, "modlines": 0, "user": "MBARON"}, "text": "/* **************************** REXX ****************************** */\n/*                                                                  */\n/*  NAME: GENFIND                                                   */\n/*  FUNC: Search DDName concatenation for specified Member          */\n/*  CALL: GENFIND ddname member listtype                            */\n/*  OPSYS: z/OS                                                     */\n/*                                                                  */\n/* **************************************************************** */\nTrace O\nAddress TSO\n\nARG DDName Member ListType\nIf DDName = \"\" then\n  Do\n    Say 'You did NOT enter a DDName name.  Terminating...(GENFIND)';\n    exit(12)\n  End\nIf Member = \"\" then\n  Do\n    Say 'You did NOT enter a member name.  Terminating...(GENFIND)';\n    exit(12)\n  End\nPARSE SOURCE . Called_As .\nIf ListType = \"\" then ListType = \"SHORT\"\nIf Called_As \u00ac= \"SUBROUTINE\" then \"CLR3270\"\n\nSelect\n  When COMPARE(ListType,'SHORT') = 0 then NOP\n  When COMPARE(ListType,'LONG') = 0 then NOP\n  Otherwise\n    Do\n      Say \"Default listing of 'SHORT' assumed\"\n      listtype = \"SHORT\"\n    End\nEnd\n\nTrace O\nFound = \"NO\"\nNull = OUTTRAP('DDlist.')\n\"LISTA STATUS\"\nDo I = 1 to DDlist.0 by 1\n   IF SUBSTR(DDlist.I,1,2) = ' ' & WORDS(DDlist.I) = 2 & ,\n      STRIP(WORD(DDlist.I,1)) = DDName then\n        LEAVE I\n   ELSE\n     NOP\nEnd\nTrace O\nIf I > DDlist.0 then\n  Do\n    Say ddname \"not found in your session...\"\n    Exit\n  End\nELSE\n  NOP\n\nDo J = I+1 TO DDlist.0 by 1\n   If SUBSTR(DDlist.J,1,2) = ' ' & WORDS(DDlist.J) = 2 then\n     LEAVE J\n   ELSE\n     NOP\nEnd\n\nIf J > DDlist.0 THEN J = J + 1\n\nCALL #SYSID\nSay \"Searching\" DDName \"for\" Member\nM = 0\n/* Do K = I-1 TO J-2 by 2 */\nDo K = I-1 TO J-3 by 2\n  x = SYSDSN(\"'\"||DDlist.K||\"(\"||Member||\")'\")\n  DDlist.K = LEFT(DDlist.K,36)\n  Select\n    When ListType = \"SHORT\" & x = 'OK' then\n      Do\n        Say \" \"DDName\"+\"M \":\" DDList.K X\n        Found = 'YES'\n      End\n    When ListType = \"LONG\" then\n      Do\n        Say DDlist.K X\n        If x = \"OK\" then Found = \"YES\"\n      End\n  Otherwise\n    NOP\n  End\nM = M + 1\nEnd\nIf Found = \"NO\" then\n  Say \"No match for\" Member \"in\" DDName \"Concatenation\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SYSID": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00\\n\\x00\\n\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 10, "newlines": 10, "modlines": 0, "user": "MBARON"}, "text": "/* * *************************** REXX ****************************** */\nParse Source . Called_As .\nCvt = Storage(10,4)\nCvt = C2D(Cvt)\nCvtSysid = Cvt + X2D('154')\nCvtSysId = D2X(CvtSysId)\nSysId = Storage(CvtSysId,8)\nSysId = STRIP(SysId)\nIf Called_As = 'SUBROUTINE' then RETURN SysId\nelse Say SysId\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE761": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04J\\x00\\x00\\x01\\x07\\x16/\\x01\\x07\\x16/\\x10B\\x00n\\x00n\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf4@@@'", "ispf": {"version": "04.74", "flags": 0, "createdate": "2007-06-11T00:00:00", "modifydate": "2007-06-11T10:42:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "CBT-474"}, "text": "//***FILE 761 is from Mark Baron and contains several REXX execs    *   FILE 761\n//*           which help you to find things on an MVS system.       *   FILE 761\n//*           The name of the principal REXX exec, and the name     *   FILE 761\n//*           of the package itself is FINDALL.                     *   FILE 761\n//*                                                                 *   FILE 761\n//*       email:  Mark Baron <msb1230@optonline.net>                *   FILE 761\n//*                                                                 *   FILE 761\n//*     Contents of this file:                                      *   FILE 761\n//*                                                                 *   FILE 761\n//*      FINDALL  - REXX EXEC to scan the user's ISPLLIB,           *   FILE 761\n//*                 STEPLIB, the LPALIST, the LINKLIST, the         *   FILE 761\n//*                 user's SYSPROC, and SYSEXEC concatenations      *   FILE 761\n//*                 for the specified member.  Calling              *   FILE 761\n//*                 sequence:                                       *   FILE 761\n//*                                                                 *   FILE 761\n//*                     FINDALL member {listtype}                   *   FILE 761\n//*                             member is the program command       *   FILE 761\n//*                                    CLIST or REXX to be          *   FILE 761\n//*                                    located                      *   FILE 761\n//*                             listtype is either the word         *   FILE 761\n//*                                      SHORT (default) or         *   FILE 761\n//*                                      LONG.  SHORT will          *   FILE 761\n//*                                      display only the           *   FILE 761\n//*                                      library containing an      *   FILE 761\n//*                                      instance of member.        *   FILE 761\n//*                                      LONG will display the      *   FILE 761\n//*                                      entire list with the       *   FILE 761\n//*                                      the status from SYSDSN.    *   FILE 761\n//*                                                                 *   FILE 761\n//*      FINDPAN  - REXX EXEC to scan the user's ISPPLIB            *   FILE 761\n//*                 concatenation for the specified ISPF panel.     *   FILE 761\n//*                 The calling sequence is the same as for         *   FILE 761\n//*                 FINDALL.                                        *   FILE 761\n//*                                                                 *   FILE 761\n//*      FINDPARM - REXX EXEC to scan the system PARMLIB            *   FILE 761\n//*                 concatenation for the specified parm member.    *   FILE 761\n//*                 The parmlib concatenation is built from the     *   FILE 761\n//*                 information stored in the IPA during IPL.       *   FILE 761\n//*                 The calling sequence is the same as for         *   FILE 761\n//*                 FINDALL.                                        *   FILE 761\n//*                                                                 *   FILE 761\n//*      FINDPROC - REXX EXEC to scan the JES2 PROCLIB              *   FILE 761\n//*                 concatenation(s) for the specified PROC. The    *   FILE 761\n//*                 proclib concatenation must be built manually    *   FILE 761\n//*                 from the JES2 JCL since I was too lazy to       *   FILE 761\n//*                 write code to go cross memory to JES2 to get    *   FILE 761\n//*                 it from the $HCT.  (If anyone has some code     *   FILE 761\n//*                 to do this, please feel free to share it        *   FILE 761\n//*                 with me and I will incorporate it into the      *   FILE 761\n//*                 EXEC.)The calling sequence is the same as       *   FILE 761\n//*                 for FINDALL.                                    *   FILE 761\n//*                                                                 *   FILE 761\n//*      #FINDLPA - REXX EXEC subroutine to extract the LPALST      *   FILE 761\n//*                 dataset names from the LPAT.  The LPA           *   FILE 761\n//*                 libraries are not allocated except as might     *   FILE 761\n//*                 occur for SYSDSN processing.  The EXEC is       *   FILE 761\n//*                 written so as to function as either a           *   FILE 761\n//*                 subroutine or as a main program.  If invoked    *   FILE 761\n//*                 as a main program, it will stop at the first    *   FILE 761\n//*                 occurrence of the target member and ask if      *   FILE 761\n//*                 the user wants to continue scanning the rest    *   FILE 761\n//*                 of the LPALST libraries.  The calling           *   FILE 761\n//*                 sequence is the same as for FINDALL.            *   FILE 761\n//*                                                                 *   FILE 761\n//*      #FINDMOD - REXX EXEC subroutine to extract the LINKLIST    *   FILE 761\n//*                 dataset names from the caller's Link List       *   FILE 761\n//*                 Set.  The Link List libraries are not           *   FILE 761\n//*                 allocated except as might occur for SYSDSN      *   FILE 761\n//*                 processing.  The EXEC is written so as to       *   FILE 761\n//*                 function as either a subroutine or as a main    *   FILE 761\n//*                 program.  If invoked as a main program, it      *   FILE 761\n//*                 will stop at the first occurrence of the        *   FILE 761\n//*                 target member and ask if the user wants to      *   FILE 761\n//*                 continue scanning the rest of the LPALST        *   FILE 761\n//*                 libraries.  The calling sequence is the same    *   FILE 761\n//*                 as for FINDALL.                                 *   FILE 761\n//*                                                                 *   FILE 761\n//*      #GENFIND - REXX EXEC subroutine to scan the output of      *   FILE 761\n//*                 LISTA STA to find the target DDName             *   FILE 761\n//*                 concatenation and then to scan for the          *   FILE 761\n//*                 target member.  Calling sequence:               *   FILE 761\n//*                    #GENFIND ddname member {listtype}            *   FILE 761\n//*                             ddname is the target                *   FILE 761\n//*                             concatenation                       *   FILE 761\n//*                             member is the element to be         *   FILE 761\n//*                             located                             *   FILE 761\n//*                             listtype is either the word         *   FILE 761\n//*                                      SHORT (default) or         *   FILE 761\n//*                                      LONG.  SHORT will          *   FILE 761\n//*                                      display only the           *   FILE 761\n//*                                      library containing an      *   FILE 761\n//*                                      instance of member.        *   FILE 761\n//*                                      LONG will display the      *   FILE 761\n//*                                      entire list with the       *   FILE 761\n//*                                      the status from SYSDSN.    *   FILE 761\n//*                                                                 *   FILE 761\n//*      #SYSID   - REXX EXEC subroutine extract the System name    *   FILE 761\n//*                 from CVTSNAME.  If called as subroutine, it     *   FILE 761\n//*                 will simply return the system name.  If         *   FILE 761\n//*                 called as a standalone commands is will         *   FILE 761\n//*                 display it.  There are no parms in the          *   FILE 761\n//*                 calling sequence                                *   FILE 761\n//*                                                                 *   FILE 761\n//*      $$README - A short note about compatibility.               *   FILE 761\n//*                                                                 *   FILE 761\n//*      $INSTALL - A note on where to put these things in order    *   FILE 761\n//*                 to run them.                                    *   FILE 761\n//*                                                                 *   FILE 761\n//*      Mark Baron - msb1230@optonline.net                         *   FILE 761\n//*                                                                 *   FILE 761\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FINDALL": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00$\\x00$\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 36, "newlines": 36, "modlines": 0, "user": "MBARON"}, "text": "/* **************************** REXX ****************************** */\n/*                                                                  */\n/*  NAME: FINDALL                                                   */\n/*  FUNC: Scan ISPLLIB, STEPLIB, LPALST, LINKLIST, SYSPROC          */\n/*        SYSEXEC for a particular member name using SYSDSN         */\n/*        function.                                                 */\n/*  CALL: FINDALL member listtype                                   */\n/*  SRCH: PSA+10 > CVT > CVT+4ac > SMEXT > SMEXT+38 > LPAT          */\n/*  OPSYS: z/OS                                                     */\n/*  NOTES: listtype can be 'SHORT' or 'LONG'.  LONG lists all       */\n/*         datasets regardless of whether the member is found.      */\n/*         SHORT only lists the datasets the member is found in,    */\n/*         along with the number in the concatenation each dataset  */\n/*         is. SHORT is the default.                                */\n/*  SUBR:  #GENFIND, #FINDLPA, #FINDMOD                             */\n/*                                                                  */\n/* **************************************************************** */\nTrace O\nAddress TSO\nPARSE ARG Member ListType .\n\"CLR3270\"\n\nCALL #GENFIND ISPLLIB Member ListType\nSAY \" \"\nCALL #GENFIND STEPLIB Member ListType\nSAY \" \"\nCALL #FINDLPA Member ListType\nSAY \" \"\nCALL #FINDMOD Member ListType\nSAY \" \"\nCALL #GENFIND SYSPROC Member ListType\nSAY \" \"\nCALL #GENFIND SYSEXEC Member ListType\nSAY \" \"\nDone:\nExit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINDPAN": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 26, "newlines": 26, "modlines": 0, "user": "MBARON"}, "text": "/* **************************** REXX ****************************** */\n/*                                                                  */\n/*  NAME: FINDPAN                                                   */\n/*  FUNC: Scan ISPPLIB for a particular panel name using            */\n/*        SYSDSN function.                                          */\n/*  CALL: FINDPAN  member listtype                                  */\n/*                                                                  */\n/*  OPSYS: z/OS                                                     */\n/*  NOTES: listtype can be 'SHORT' or 'LONG'.  LONG lists all       */\n/*         datasets regardless of whether the member is found.      */\n/*         SHORT only lists the datasets the member is found in,    */\n/*         along with the number in the concatenation each dataset  */\n/*         is. SHORT is the default.                                */\n/*  SUBR:  #GENFIND                                                 */\n/*                                                                  */\n/* **************************************************************** */\nTrace O\nAddress TSO\nPARSE ARG Member ListType .\nIf ListType = \"\" then ListType = \"SHORT\"\n\n\"CLR3270\"\nCALL #GENFIND ISPPLIB Member ListType\n\nSAY \" \"\nExit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINDPARM": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00R\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00.\\x00.\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:52", "lines": 46, "newlines": 46, "modlines": 0, "user": "MBARON"}, "text": "/* **************************** REXX ****************************** */\n/*                                                                  */\n/*  NAME: FINDPARM                                                  */\n/*  FUNC: Scan PARMLIB Concatenation for a given member             */\n/*  CALL: FINDPARM member listtype                                  */\n/*  OPSYS: z/OS                                                     */\n/*  NOTES: The system PARMLIB concatenation is extrated from the    */\n/*         IPA.  The datasets are then allocatoed to DDName         */\n/*         PARMLIB.                                                 */\n/*                                                                  */\n/*         listtype can be 'SHORT' or 'LONG'.  LONG lists all       */\n/*         datasets regardless of whether the member is found.      */\n/*         SHORT only lists the datasets the member is found in,    */\n/*         along with the number in the concatenation each dataset  */\n/*         is. SHORT is the default.                                */\n/*  SUBR:  #GENFIND                                                 */\n/*                                                                  */\n/* **************************************************************** */\nTrace O\nAddress TSO\nPARSE ARG Member ListType .\nIf ListType = \"\" then ListType = \"LONG\"\nCALL PARM\n\"CLR3270\"\nCALL #GENFIND PARMLIB Member ListType\n\"FREE FI(PARMLIB)\"\nSAY \" \"\nExit\n\nPARM:\nAddress TSO\nCvt      = C2D(STORAGE(10,4))\nEcvt     = C2D(STORAGE(D2X(Cvt + 140),4))\nEcvtIpa  = C2D(STORAGE(D2X(Ecvt + 392),4))\nIpalNum  = C2X(STORAGE(D2X(EcvtIpa + 2148),2))\nPoff     = 00\nParmLibs = \"\"\nDo P = 1 to IpalNum\n  IpaPlib.P = \"'\"Strip(STORAGE(D2X(EcvtIpa + 416 + Poff),44))\"'\"\n  ParmLibs= ParmLibs IpaPlib.P\n  Poff = Poff + 64\nEnd\n\n\"ALLOC FI(PARMLIB) SHR REU DA(\"ParmLibs\")\"\n\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINDPROC": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x11\\x00\\x00S\\x01\\x07\\x15\\x9f\\x01\\x07\\x15\\x9f\\x138\\x00\\x84\\x00\\x84\\x00\\x00\\xd4\\xc2\\xc1\\xd9\\xd6\\xd5@@@@'", "ispf": {"version": "17.00", "flags": 0, "createdate": "2007-06-08T00:00:00", "modifydate": "2007-06-08T13:38:53", "lines": 132, "newlines": 132, "modlines": 0, "user": "MBARON"}, "text": "/* **************************** REXX ****************************** */\n/*                                                                  */\n/*  NAME: FINDPROC                                                  */\n/*  FUNC: Scan the JES2 PROCLIB concatenations for a particular     */\n/*        PROC using SYSDSN function.                               */\n/*  CALL: FINDPROC member listtype                                  */\n/*                                                                  */\n/* OPSYS: OS/390                                                    */\n/* NOTES: listtype can be 'SHORT' or 'LONG'.  LONG lists all        */\n/*        datasets regardless of whether the member is found.       */\n/*        SHORT only lists the datasets the member is found in,     */\n/*        along with the number in the concatenation each dataset   */\n/*        is. SHORT is the default.                                 */\n/* SUBR:  #GENFIND                                                  */\n/*                                                                  */\n/* **************************************************************** */\nTrace O\nAddress TSO\nPARSE UPPER ARG Member ListType .\nIf ListType = \"\" then ListType = \"SHORT\"\nCALL PROC\n\"CLR3270\"\n\nDo I = 1 to NumProcCs\n  Say \"Searching for PROC\" Member \"in PROCLIB concatenation //\"ProcL.I\n  \"ALLOC FI(PROCLIB) SHR REU DA(\"ProcN.I\")\"\n  CALL #GENFIND PROCLIB Member ListType\n  Say \" \"\n  \"FREE FI(PROCLIB)\"\nEnd\n\nExit\n\nPROC:\nTrace O\n/* **************************************************************** */\n/*                                                                  */\n/*  Subroutine to build an allocations for the various PROCLIB      */\n/*  concatenations.  PROC00 will always be built.  Any others are   */\n/*  dependent upon what is in the JES2 proc.  These lists are       */\n/*  built from the actual JCL.  I didn't feel like poking around    */\n/*  inside JES2's private area to extract the data                  */\n/*                                                                  */\n/* **************************************************************** */\nAddress TSO\n\nNumProcCs = 11\n\nProcLib00 = \"'SYS3.LOGPROC'\"\nProcLib01 = \"'SYS1.PROCLIB'\"\nProcLib02 = \"'SYS1.PRINTER.PROCLIB'\"\nProcLib03 = \"'SYS2.LCPI.PROCLIB'\"\nProcLib04 = \"'COMLCPP.PROCLIB'\"\nProcLib05 = \"'PLCP.STAGING.PROCLIB'\"\nProcLib06 = \"'TECHLCPI.PROCLIB'\"\nProcLib07 = \"'LITSPRD.PROCLIB'\"\nProcLib08 = \"'LITSTST.GROUP.PROCLIB'\"\nProcLib09 = \"'MVSLCP.DATABASE.PROCLIB'\"\nProcLib10 = \"'PRODLCP.PROCLIB'\"\nProcLib11 = \"'PLCPTST.TEST.PROCLIB'\"\nProcLib12 = \"'PLCPTST.STAGE.PROCLIB'\"\nProcLib13 = \"'PLCPTST.GROUP.PROCLIB'\"\nProcLib14 = \"'PLCPTST.PARALLEL.PROCLIB'\"\nProcLib16 = \"'PRDEND.PROD.PROCLIB'\"\nProcLib15 = \"'MVSLCP.DATABASE.TEST.PROCLIB'\"\nProcLib17 = \"'TECHLCP.SYS.PROCLIB'\"\nProcLib21 = \"'PGMR.GROUP.PROCLIB'\"\nProcLib22 = \"'PRODLCP.ENDVLB.PROD.PROCLIB'\"\nProcLib23 = \"'PRDCDY.ENDVLB.PROD.PROCLIB'\"\nProcLib24 = \"'PRODLB.SOLO.PROCLIB'\"\nProcLib26 = \"'PROD1.LND.PROCLIB'\"\nProcLib27 = \"'MVSLCP.DEVL.PROCLIB'\"\nProcLib29 = \"'SYS2.PROCLIB'\"\nProcLib31 = \"'IDMS.GROUP.PROCLIB'\"\nProcLib32 = \"'SYS2.NEW.PROCLIB'\"\nProcLib33 = \"'SYS3.NEW.PROCLIB'\"\nProcLib34 = \"'CICSSYSP.PROCLIB'\"\n\nProc00 = Proclib00 Proclib01 Proclib32 Proclib33 Proclib02\nProc00 = Proc00 Proclib17 Proclib03 Proclib34 Proclib04\nProc00 = Proc00 Proclib07 Proclib16 proclib10 Proclib06\nProc00 = Proc00 Proclib09 Proclib22 proclib23 Proclib24\nProc00 = Proc00 Proclib29 Proclib31\n\nProc88 = \"'SYS2.DUMMY.PROCLIB'\"\n\nPLCP   = Proclib00 Proclib01 Proclib32 Proclib33 Proclib17\nPLCP   = PLCP Proclib03 Proclib21 Proclib05\n\nIDMS   = Proclib00 Proclib01 Proclib21 Proclib33 Proclib17\nIDMS   = IDMS Proclib03 Proclib15 Proclib22\n\nSYST   = Proclib00 Proclib01 Proclib32 Proclib33 Proclib17\nSYST   = SYST Proclib03\n\nSYS1   = Proclib00 Proclib01 Proclib32 Proclib03 Proclib04\n\nTEST   = Proclib15 Proclib11 Proclib08\n\nSTAGE  = Proclib12\n\nGROUP  = Proclib13\n\nPARA   = Proclib14\n\nLOND   = Proclib26 Proclib27 Proclib32\n\nProcL.1  = \"PROC00\"\nProcL.2  = \"PROC88\"\nProcL.3  = \"PLCP\"\nProcL.4  = \"IDMS\"\nProcL.5  = \"SYST\"\nProcL.6  = \"SYS1\"\nProcL.7  = \"TEST\"\nProcL.8  = \"STAGE\"\nProcL.9  = \"GROUP\"\nProcL.10 = \"PARA\"\nProcL.11 = \"LOND\"\n\nProcN.1  = PROC00\nProcN.2  = PROC88\nProcN.3  = PLCP\nProcN.4  = IDMS\nProcN.5  = SYST\nProcN.6  = SYS1\nProcN.7  = TEST\nProcN.8  = STAGE\nProcN.9  = GROUP\nProcN.10 = PARA\nProcN.11 = LOND\n\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT761/FILE761.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT761", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}