         TITLE 'WHOHAS - FIND WHO IS USING/WAITING FOR A DSNAME'
**********************************************************************
***                                                                ***
***                       WHOHAS COMMAND                           ***
***                                                                ***
***  GENERAL FUNCTION:                                             ***
***                                                                ***
***      THIS COMMAND CHECKS THE WHOHAS GENERALIZED RESOURCE       ***
***      QUEUE FOR QUEUING ON DATASET NAMES.  IT USES GQSCAN       ***
***      TO CREATE RESOURCE INFORMATION BLOCKS (RIB), THEN         ***
***      EXTRACTS INFORMATION FOR A REPORT TO THE TERMINAL.        ***
***                                                                ***
***  FORMAT:                                                       ***
***                                                                ***
***    WHOHAS  'DSNAME'                                            ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  RETURN CODES -                                                ***
***       00 - NORMAL COMPLETION                                   ***
***       04 - NORMAL, LIST TRUNCATED                              ***
***       12 - ERROR                                               ***
***                                                                ***
***  REGISTER USAGE                                                ***
***                                                                ***
***      R0-R1 - MACROS, LINKAGE CONVENTIONS                       ***
***      R2-R3 - MACROS, WORK                                      ***
***      R4-R6 - WORK                                              ***
***      R7-R8 - (NOT USED)                                        ***
***         R9 - BASE FOR PARM DESCRIPTOR LIST CREATED BY PARSE    ***
***        R10 - BAL REGISTER                                      ***
***        R11 - BASE FOR RIB WORK AREA                            ***
***        R12 - BASE FOR PROGRAM                                  ***
***        R13 - BASE OF WORK0 AREA, REG SAVE AREA AND CODES       ***
***        R14 - MACROS, LINKAGE CONVENTIONS                       ***
***        R15 - MACROS, WORK, LINKAGE CONVENTIONS                 ***
***          +---------------------------------------------+       ***
***          |  EXCEPT FOR BASE REGISTERS, DATA IS NEVER   |       ***
***          |  PASSED IN REGISTERS BETWEEN SUBSECTIONS OF |       ***
***          |  CODE.                                      |       ***
***          +---------------------------------------------+       ***
***                                                                ***
***  NON-IBM MACROS USED:  NONE                                    ***
***                                                                ***
***  ASSEMBLER OPTIONS:       RENT                                 ***
***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***
***                                                                ***
***  CULPRIT:                                                      ***
***     CHUCK HOFFMAN, CONSULTANT                                  ***
***     USER SERVICES CENTER                                       ***
***                                                                ***
***     BUREAU OF SYSTEMS OPERATIONS                               ***
***     OFFICE OF MANAGEMENT INFORMATION SYSTEMS                   ***
***     EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE            ***
***                                                                ***
***     COMMONWEALTH OF MASSACHUSETTS                              ***
***     ONE ASHBURTON PLACE, ROOM 1619                             ***
***     BOSTON, MA  02108                                          ***
***                           (617) 727-5725                       ***
***                                                                ***
**********************************************************************
         EJECT
**********************************************************************
***                                                                ***
***  PROGRAM LOGIC:                                                ***
***                                                                ***
***  1.  GET WORKSPACE AND ASSIGN BASE REGISTERS.  FOLLOW          ***
***      STANDARD LINKAGE CONVENTIONS.  GET INPUT STORAGE FOR      ***
***      RESOURCE INFORMATION BLOCK (RIB) AND EXTENSIONS (RIBE).   ***
***                                                                ***
***  2.  CREATE PARSE PARAMETER LIST (PPL), THEN PARSE THE PARM.   ***
***                                                                ***
***  3.  SCAN THE GENERALIZED RESOURCE QUEUES FOR MAJOR NAME       ***
***      'WHOHAS' AND MINOR NAME MATCHING THE PARM.  ASSIGN        ***
***      RETURN CODES.  IF MORE THAN ONE RIB IS RETURNED, OR IF    ***
***      RETURNED INFORMATION OVERFLOWS THE INPUT AREA, SET A      ***
***      SWITCH TO NOTE THAT THE LIST WILL BE TRUNCATED.           ***
***                                                                ***
***  4.  CREATE A LIST BY PROCESSING THE FIRST RETURNED RIB, AND   ***
***      ALL ITS RIBES WHICH FIT INTO THE RETURN AREA.             ***
***                                                                ***
***  5.  GENERATE A MESSAGE FOR ANY BUT 00 RETURN CODES.           ***
***                                                                ***
***  6.  FREE STORAGE AND TERMINATE USING STANDARD LINKAGE         ***
***      CONVENTIONS.                                              ***
***                                                                ***
**********************************************************************
         EJECT
         YREGS
**********************************************************************
***   PROLOGUE                                                     ***
**********************************************************************
WHOHAS   CSECT
         SAVE  (14,12),,WHOHAS-&SYSDATE
         LR    R12,R15                  LOAD BASE ADDRESS BASER
         USING WHOHAS,R12               ADDRESSABILTIY OF CSECT
         GETMAIN R,LV=WORK0LEN          GET STORAGE FOR S.A. + WORK
         ST    R13,4(0,R1)              ADDR OF PREV S.A. TO MY S.A.
         ST    R1,8(0,R13)              ADDR OF MY S.A. TO PREV S.A.
         LM    R0,R1,20(R13)            RESTORE R0-R1 TO PRE-GETMAIN
         L     R13,8(0,R13)             R13 POINTS TO MY S.A.
         USING WORK0,R13                ADDRESSABILITY OF WORK0
         ST    R1,R1SAVE                INITIAL VAL OF R1 TO MY STORAGE
         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE
         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE
*
         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST
         ST    R1,CPPLPTR               SAVE CPPL POINTER
         XC    COMPCODE,COMPCODE        CLEAR PROGRAM RETURN CODE
         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE
         B     MAINLINE
**********************************************************************
***   MAIN LINE ROUTINE                                            ***
**********************************************************************
MAINLINE BAL   R10,PPLSETUP             SET UP PARSE PARM LIST
         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS
         BAL   R10,GQPROC               SCAN THE Grs QUEUES
         CLC   RETCDE,F4                IF RETURN GT 4 (NO LISTING)
         BH    MAINEND                    GO TO END
         BAL   R10,REPORT               ELSE WRITE REPORT
MAINEND  B     ENDING                   BRANCH TO ENDING
**********************************************************************
***   EPILOGUE                                                     ***
**********************************************************************
ENDING   BAL   R10,KISSOFF              PRINT KISSOFF MESSAGE, IF ANY
         LA    R4,MYPPL+(PPLANS-PPL)    ADDRESS OF PTR TO PDL
         L     R4,0(0,R4)               R4 POINTS TO PDL
         IKJRLSA (R4)                   FREE STORAGE OF PDL
*
         LR    R1,R13                   LOAD MY S.A. ADDR FOR FREEMAIN
         L     R14,COMPCODE             SAVE PROGRAM COMPLETION CODE
         L     R13,4(0,R13)             RESTORE R13 FROM MY S.A.
         FREEMAIN R,LV=WORK0LEN,A=(R1)  FREE STORAGE FOR WORK0
         LR    R15,R14                  SET PROGRAM COMPLETION CODE
         LM    R0,R12,20(R13)           RESTORE R0-R12 FM CALLERS S.A.
         L     R14,12(0,R13)            RESTORE R14 FROM CALLERS S.A.
         MVI   12(R13),X'FF'            RETURN INDCATR TO CALLERS S.A.
         BR    R14                      RETURN TO CALLER
**********************************************************************
***        CREATE PARSE PARAMETER LIST                             ***
**********************************************************************
PPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST
         USING CPPL,R4                    ADDRESSABILITY
         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)
         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)
         LA    R5,MYECB
         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)
         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)
         LA    R5,MYANS
         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)
         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)
         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)
         DROP  R4
*
PPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS
         BR    R10                      RETURN
**********************************************************************
***    PARSE THE INPUT PARAMETER STRING                            ***
**********************************************************************
PARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE
PARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS
         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS
         L     R9,0(0,R9)               ADDRESSABILITY OF PDL
*
PAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS
         BR    R10                      RETURN
**********************************************************************
***    SCAN THE GENERALIZED RESOURCE QUEUES                        ***
**********************************************************************
GQPROC   ST    R10,GQR10SAV             SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         LA    R5,PDSN                  R2 POINTS TO DSN PDE
         LH    R6,4(0,R5)               R3 IS LENGTH OF DSN
         L     R5,0(0,R5)               R2 POINTS TO DSN
         XC    GQTOKEN,GQTOKEN          ZERO THE TOKEN
         LA    R4,GQTOKEN               R4 POINTS TO TOKEN (FOR CONT)
         MVC   GQSCANL(GQSLLEN),GQSCANP INITIALIZE PARM LIST
*
GQSCAN   GQSCAN AREA=(RETAREA,L'RETAREA),RESNAME=(,(R5),(R6)),         X
               TOKEN=(R4),MF=(E,GQSCANL),SCOPE=ALL
*
         STM   R0,R1,GQRETREG
         ST    R15,GQRETREG+8
         NI    SWITCH1,B'00001111'      INITIALIZE SW0-SW3 TO ZERO
*
         LTR   R15,R15                  IF RC NOT ZERO
         BNZ   GQCK4                      GO TO CHECKS
         C     R1,F1                    ELSE IF NUMBER OF RIBS NOT 1
         BNE   GQRIB                      GO TO ERROR ROUTINE
         B     GQEND                    ELSE GO TO END
*
GQCK4    C     R15,F4                   IF RC=04  (NONE FOUND)
         BNE   *+24                       NO: BRANCH AROUND
         OI    SWITCH1,X'80'             YES: SET SW0 ON
         MVC   RETCDE,F4                      SET PROC RETCDE=04
         MVC   COMPCODE,F4                    SET PGM RETCDE=04
         B     GQEND                          AND GO TO ENDING
*
         C     R15,F8                   IF RC=08  (OVERFLOW)
         BNE   *+24                       NO: BRANCH AROUND
         OI    SWITCH1,X'40'             YES: SET SW1 ON
         MVC   RETCDE,F4                      SET PROC RETCDE=04
         MVC   COMPCODE,F8                    SET PGM RETCDE=08
         B     GQEND                          AND GO TO ENDING
*
*                                       RC MUST BE GREATER THAN 08
         OI    SWITCH1,X'10'              SET SW3 ON
         MVC   RETCDE,F12                 SET PROC RETCDE=12
         MVC   COMPCODE,F12               SET PGM RETCDE=12
         B     GQEND                          AND GO TO ENDING
*
GQRIB    OI    SWITCH1,X'20'            SET SW2 ON
         MVC   RETCDE,F4                SET PROC RETCDE=04
         MVC   COMPCODE,F8              SET PGM RETCDE=08
         B     GQEND                    GO TO ENDING
*
GQEND    L     R10,GQR10SAV             RESTORE RETURN ADDRESS
         BR    R10                      RETURN
**********************************************************************
***    WRITE THE REPORT                                            ***
**********************************************************************
REPORT   ST    R10,RER10SAV             SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         TM    SWITCH1,X'80'            IF NO INFO WAS FOUND
         BO    REEND                      BRANCH TO ENDING
*
RERNAME  MVC   OUTLINE(80),BLANKS       INITIALIZE OUTPUT LINE
         LA    R4,RETAREA               R4 POINTS TO RETURNED DATA
         USING RIB,R4                   ADDRESSABILITY OF RIB
         LH    R5,RIBVLEN               R5 LENGTH OF VARIABLE SEG
         AH    R5,GQRETREG+00           R5 LEN OF BASE + VARIABLE SEG
         LA    R5,0(R5,R4)              R5 POINTS TO FIRST RIBE
         USING RIBE,R5                  ADDRESSABILITY OF RIBE
*
         XR    R1,R1                    CLEAR R1
         IC    R1,RIBRNMLN              LENGTH OF RNAME
         BCTR  R1,0                       MINUS 1 FOR EXEC
         LH    R2,GQRETREG+00           R2 IS LEN OF BASE
         LA    R2,0(R2,R4)              R2 POINTS TO RNAME
         B     *+10                     BRANCH AROUND EXEC
         MVC   OUTLINE(0),0(R2)           MOVE RNAME TO OUTPUT
         EX    R1,*-6                   EXECUTE MOVE
*
         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10
         L     R1,=AL2(PUTOUTL,0)
         ST    R1,PUTOUT
         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X
               OUTPUT=(PUTOUT,TERM,SINGLE,DATA),MF=(E,MYIOPL)
         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10
         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X
               OUTPUT=(PUTBLNKS,TERM,SINGLE,DATA),MF=(E,MYIOPL)
*
RETITLE  EQU   *
         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10
         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X
               OUTPUT=(PUTTTL1,TERM,SINGLE,DATA),MF=(E,MYIOPL)
         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10
         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X
               OUTPUT=(PUTTTL2,TERM,SINGLE,DATA),MF=(E,MYIOPL)
*
         MVC   OUTLINE(80),BLANKS       INITIALIZE OUTPUT LINE
RESCOPE  TM    RIBSCOPE,RIBSYS          IF SCOPE NE SYSTEM
         BNO   *+14                       BRANCH AROUND
         MVC   OF1SCPE(7),SYSTEM        ELSE MOVE 'SYSTEM' TO SCOPE
         B     RERIBENO                   AND BRANCH TO NEXT PIECE
         TM    RIBSCOPE,RIBSYSS         IF SCOPE NE SYSTEMS
         BNO   *+14                       BRANCH AROUND
         MVC   OF1SCPE(7),SYSTEMS       ELSE MOVE 'SYSTEMS' TO SCOPE
         B     RERIBENO                   AND BRANCH TO NEXT PIECE
         TM    RIBSCOPE,RIBSTEP         IF SCOPE NE STEP
         BNO   *+14                       BRANCH AROUND
         MVC   OF1SCPE(7),STEP          ELSE MOVE 'STEP' TO SCOPE
         B     RERIBENO                   AND BRANCH TO NEXT PIECE
         TM    RIBSCOPE,RIBGLBL         IF SCOPE NE GLOBAL
         BNO   *+10                       BRANCH AROUND
         MVC   OF1SCPE(7),GLOBAL        ELSE MOVE 'GLOBAL' TO SCOPE
         B     RERIBENO                   AND BRANCH TO NEXT PIECE
*
RERIBENO L     R3,RIBNRIBE              NUMBER OF RIBE IN USER AREA
*
REJOBID  MVC   OF1JNAM(8),RIBEJBNM      MOVE JOB NAME TO LINE
         MVC   OF1SYSN(8),RIBESYSN      MOVE SYS-NAME TO LINE
*
RETYPE   TM    RIBERFLG,RIBETYPE        IF TYPE IS SHR
         BNO   *+14                       THEN
         MVC   OF1TYPE(4),SHR               MOVE 'SHR' TO LINE
         B     *+10                     ELSE
         MVC   OF1TYPE(4),EXCL            MOVE 'EXCL' TO LINE
*
RESTAT   TM    RIBESFLG,RIBESTAT        IF STATUS IS OWNS
         BNO   *+14                       THEN
         MVC   OF1STAT(7),USING             MOVE 'USING' TO LINE
         B     *+10                     ELSE
         MVC   OF1STAT(7),WAITING         MOVE 'WAITING' TO LINE
*
*
REJOBTYP L     R14,CVTPTR               LOAD A(CVT)
         L     R14,CVTGVT-CVT(,R14)     LOAD A(GVT)
         CLC   OF1SYSN,GVTSYSNM-GVT(R14) IS ENQ ON THIS SYSTEM
         BNE   RETYPUNK                 NO, SHOW CANT DETERMINE JOBTYPE
         SR    R15,R15                  CLEAR REGISTER
         LH    R15,RIBEASID             LOAD ASID
         SLL   R15,2                    MULT. BY 4 FOR INDEXING
ASVTLKUP L     R14,CVTPTR               LOAD A(CVT)
         L     R14,CVTASVT-CVT(,R14)    LOAD A(ASVT)
         USING ASVT,R14                  ESTABLISH ADDRESSABILITY
         LA    R1,ASVTENTY-4            LOAD A(1ST ASVT ENTRY)
         LA    R1,0(R15,R1)             LOAD A(REQUESTED ASVT ENTRY)
         TM    0(R1),ASVTAVAL           IS ENTRY AVAILABLE
         BZ    GETASCB                  NO, GET ASCB
RETYPUNK MVC   OF1JTYP,QUESTION         ELSE SHOW UNABLE TO DETERMINE
         B     REASID
GETASCB  L     R1,0(,R1)                LOAD A(ASCB)
         USING ASCB,R1                  ESTABLISH ADDRESSABILITY
         ICM   R15,15,ASCBJBNI          CHECK FOR BATCH JOB
         BNZ   JTYPBAT                  IF YES, GO SHOW BATCH JOB
         L     R2,=A(GETOUCB+X'80000000') SET UP FOR 31 BIT
         BSM   0,R2                     BRANCH IN 31 BIT MODE
GETOUCB  L     R1,ASCBOUCB-ASCB(,R1)    LOAD A(OUCB)
         TM    OUCBYFL-OUCB(R1),OUCBSTT IS IT A STARTED TASK
         BO    JTYPSTC                 YES
         TM    OUCBYFL-OUCB(R1),OUCBLOG IS IT A TSO SESSION
         BO    JTYPTSO                  YES
JTYPBAT  MVC   OF1JTYP,BATCH            ELSE MUST BE BATCH
         B     REASID
JTYPSTC  MVC   OF1JTYP,STC              MUST BE STC
         B     REASID
JTYPTSO  MVC   OF1JTYP,TSO              MUST BE TSO
         B     REASID
REASID   LA    R2,REASID2               SET UP FOR 24 BIT MODE
         BSM   0,R2                     BRANCH IN 24 BIT MODE
REASID2  MVC   HEXIN(2),RIBEASID        MOVE ASID
         UNPK  HEXOUT(9),HEXIN(5)       UNPACK BYTES
         TR    HEXOUT(4),HEXTAB-240     TRANSLATE TO PRINTABLE HEX
         MVC   OF1JASID(4),HEXOUT       MOVE TRANSLATED BYTES
*
         AH    R5,GQRETREG+02           R5 POINTS TO NEXT RIBE
         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10
         L     R1,=AL2(PUTOUTL,0)
         ST    R1,PUTOUT
         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X
               OUTPUT=(PUTOUT,TERM,SINGLE,DATA),MF=(E,MYIOPL)
         BCT   R3,REJOBID               LOOP BACK UP FOR NEXT RIBE
*
         DROP  R4
         DROP  R5
*
REEND    L     R10,RER10SAV             RESTORE RETURN ADDRESS
         BR    R10                      RETURN
**********************************************************************
***    WRITE THE KISSOFF MESSAGE, IF ANY                           ***
**********************************************************************
KISSOFF  ST    R10,KIR10SAV             SAVE RETURN ADDRESS
         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO
*
         TM    SWITCH1,X'F0'            IF NO PROBLEMS
         BZ    KIEND                      GO TO ENDING (NO MESSAGE)
KINOMAT  TM    SWITCH1,X'80'            ELSE IF NO MATCH
         BZ    KITRUNC                    THEN
         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10
         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X
               OUTPUT=(NOTINUS,TERM,SINGLE,DATA),MF=(E,MYIOPL)
         B     KIEND                        AND GO TO END
KITRUNC  TM    SWITCH1,X'60'            ELSE IF TRUNCATED LIST
         BZ    KIBADRC                    THEN
         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10
         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X
               OUTPUT=(TRUNCAT,TERM,SINGLE,DATA),MF=(E,MYIOPL)
         B     KIEND                        AND GO TO END
KIBADRC  TM    SWITCH1,X'10'            ELSE IF GQSCAN R/C GT 8
         BZ    KIEND                      THEN
         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15
         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10
         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X
               OUTPUT=(BADSCAN,TERM,SINGLE,DATA),MF=(E,MYIOPL)
         B     KIEND                        AND GO TO END
*
KIEND    L     R10,KIR10SAV             RESTORE RETURN ADDRESS
         BR    R10                      RETURN
**********************************************************************
***   DATA CONSTANTS                                               ***
**********************************************************************
CONSTDTA DS    0D                       AREA FOR DATA CONSTANTS
VPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST
DZIPS    DS    0D                       DOUBLE WORD OF ZEROES
         DC    2F'0'
PUTBLNKS DC    AL2(PUTBLNKL,0)
BLANKS   DC    CL80' '                  10 DOUBLE WORDS OF BLANKS
PUTBLNKL EQU   *-PUTBLNKS
F1       DC    F'1'                     CONSTANT
F4       DC    F'4'                     CONSTANT
F8       DC    F'8'                     CONSTANT
F12      DC    F'12'                    CONSTANT
*
GQSCANP  GQSCAN SCOPE=ALL,RESNAME=(MAJNAME,,),MF=L
GQSPLEN  EQU   *-GQSCANP
MAJNAME  DC    CL8'SYSDSN'
*
PUTTTL1  DC    AL2(PUTTTL1L,0)
         DC    CL80'    JOB_NAME  SCOPE    SYS_NAME  TYPE  STATUS   JOBX
               TYPE  ASID'
PUTTTL1L EQU   *-PUTTTL1
*
PUTTTL2  DC    AL2(PUTTTL2L,0)
         DC    CL80'    --------  -------  --------  ----  -------  ---X
               ----  ----'
PUTTTL2L EQU   *-PUTTTL2
*
HEXTAB   DC    C'0123456789ABCDEF'     TRANSLATE TABLE
SYSTEM   DC    CL7'System'
SYSTEMS  DC    CL7'Systems'
STEP     DC    CL7'Step'
GLOBAL   DC    CL7'Global'
SHR      DC    CL4'SHR'
EXCL     DC    CL4'EXCL'
USING    DC    CL7'Using'
WAITING  DC    CL7'Waiting'
TSO      DC    CL5'TSO'
BATCH    DC    CL5'Batch'
STC      DC    CL5'STC'
QUESTION DC    CL5'?????'
*
NOTINUS  DC    AL2(NOTINUSL,0)
         DC    CL80'*** Not in use ***'
NOTINUSL EQU   *-NOTINUS
*
TRUNCAT  DC    AL2(TRUNCATL,0)
         DC    CL80'*** List truncated due to length ***'
TRUNCATL EQU   *-TRUNCAT
*
BADSCAN  DC    AL2(BADSCANL,0)
         DC    CL80'*** Bad GQSCAN, disregard all data ***'
BADSCANL EQU   *-BADSCAN
*
         LTORG
**********************************************************************
***    COMMAND OPERANDS                                            ***
**********************************************************************
PARMPCL  IKJPARM  DSECT=PARMPDL
*
PDSN     IKJPOSIT DSNAME,USID,PROMPT='Dataset name to be checked'
*
         IKJENDP
**********************************************************************
***   DATA AREA OBTAINED WITH LINKSAVE                             ***
**********************************************************************
WORK0    DSECT                          AREA-0 FOR VARIABLES
MYSAVE   DS    18F                      REGISTER SAVE AREA
R1SAVE   DS    F                        INITIAL VALUE OF R1 (CPPLADDR)
CPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)
RETCDE   DS    F                        INTERNAL RETURN CODE
COMPCODE DS    F                        PROGRAM COMPLETION CODE
PPR10SAV DS    F                        RETURN ADDRESS SAVE AREA
PAR10SAV DS    F                        RETURN ADDRESS SAVE AREA
MSR10SAV DS    F                        RETURN ADDRESS SAVE AREA
GQR10SAV DS    F                        RETURN ADDRESS SAVE AREA
RER10SAV DS    F                        RETURN ADDRESS SAVE AREA
KIR10SAV DS    F                        RETURN ADDRESS SAVE AREA
MYECB    DS    F                        ECB FOR PARSE
MYANS    DS    F                        POINTER TO THE PDL
MYPPL    DC    (PPLLEN)X'00'            PARSE PARAMETER LIST
MYIOPL   DC    (IOPLLEN)X'00'           I/O PARAMETER LIST
SWITCH1  DC    B'00000000'              SWITCHES AREA #1
*                1.......   X'80'         NO RESOURCES MATCHED
*                .1......   X'40'         RETURN AREA FULL
*                ..1.....   X'20'         MORE THAN ONE RIB
*                ...1....   X'10'         RC GT 08 FROM GQSCAN
*                ....1111                 (NOT USED)
         PRINT GEN
GQSCANL  GQSCAN SCOPE=ALL,RESNAME=(MAJNAME,,),MF=L
GQSLLEN  EQU   *-GQSCANL
PUTBLK   PUTLINE MF=L
         PRINT NOGEN
GQTOKEN  DS    F                        TOKEN FOR CONTINUING SCAN
GQRETREG DS    3F                       RETURN OF R0,R1,R15 FROM SCAN
*
PUTOUT   DS    AL2(PUTOUTL,0)           PUTLINE OUTPUT DESCRIPTOR
OUTLINE  DS    CL80                     OUTPUT LINE FOR TPUT
OF1      ORG   OUTLINE                  FORMAT 1 OUTPUT
         DS    CL4                        FILLER
OF1JNAM  DS    CL8                        JOBNAME
         DS    CL2                        FILLER
OF1SCPE  DS    CL7                        SCOPE
         DS    CL2                        FILLER
OF1SYSN  DS    CL8                        SYSNAME
         DS    CL2                        FILLER
OF1TYPE  DS    CL4                        TYPE
         DS    CL2                        FILLER
OF1STAT  DS    CL7                        STATUS
         DS    CL2                        FILLER
OF1JTYP  DS    CL5                        JOBTYPE
         DS    CL4                        FILLER
OF1JASID DS    CL4                        ASID
         DS    CL19                       FILLER
         ORG   ,
PUTOUTL  EQU   *-PUTOUT                 PUTLINE LENGTH
*
         DS    0D
HEXIN    DS    4X                      INPUT FIELD FOR CONVERSION
         DS    CL1                     REQUIRED AFTER HEXIN FOR BITFLIP
HEXOUT   DS    8X                      OUTPUT FIELD FOR CONVERSION
         DS    CL1                    REQUIRED AFTER HEXOUT FOR BITFLIP
RETAREA  DS    CL8182
WORK0LEN EQU   *-WORK0
**********************************************************************
***   MAPPING MACROS                                               ***
**********************************************************************
         CVT   DSECT=YES                CVTMAP FOR IKJPARS
         IHAASVT                        ASVT
         IHAASCB                        ASCB
         IRAOUCB                        OUCB
         ISGGVT                         GVT
         IKJCPPL                        COMMAND PROCESSOR PARM LIST
PPL      IKJPPL                         PARSE PARAMETER LIST
PPLLEN   EQU   *-PPL
IOPPL    IKJIOPL                        I/O PARAMETER LIST FOR PUTLINE
IOPLLEN  EQU   *-IOPL
         ISGRIB                         RESOURCE INFO BLOCK (3 DSECTS)
         END
