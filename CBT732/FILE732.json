{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012701000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE732.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE732.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x10'", "DS1TRBAL": "b'\\x02\\x86'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x02\\x00\\x02\\x05\\x02\\x00\\x04\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04F\\x00\\x00\\x01\\x055\\x7f\\x01\\x055\\x7f\\x087\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf0@@@'", "ispf": {"version": "04.70", "flags": 0, "createdate": "2005-12-23T00:00:00", "modifydate": "2005-12-23T08:37:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-470"}, "text": "REGULAR CBT TAPE - VERSION 470    FILE:  732\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT470.FILE732\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 3 MEMBERS COUNTED; CUMULATIVE SIZE IS 561 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/23/05    08:37:43    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE732": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04F\\x00\\x00\\x01\\x055\\x7f\\x01\\x055\\x7f\\x087\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf0@@@'", "ispf": {"version": "04.70", "flags": 0, "createdate": "2005-12-23T00:00:00", "modifydate": "2005-12-23T08:37:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT-470"}, "text": "//***FILE 732 is Chuck Hoffman's version of the TSO WHOHAS command  *   FILE 732\n//*           which is familiar to many of us.  It seems to have    *   FILE 732\n//*           disappeared from the regular CBT Tape, or at least    *   FILE 732\n//*           I have not been able to find it there, yet.  Anyway,  *   FILE 732\n//*           I'm making sure it is available again by putting it   *   FILE 732\n//*           here.                                                 *   FILE 732\n//*                                                                 *   FILE 732\n//*           I did find that this command might be similar to the  *   FILE 732\n//*           SYSDSN command on Chuck Hoffman's file, File 160.     *   FILE 732\n//*                                                                 *   FILE 732\n//*           email:  sbgolob@cbttape.org                           *   FILE 732\n//*                   sbgolob@attglobal.net                         *   FILE 732\n//*                                                                 *   FILE 732\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WHOHAS": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00V\\x00\\x96\\x19/\\x01\\x055\\x7f\\x08'\\x02\\x18\\x01\\xdd\\x00G\\xc8\\xd6\\xc6\\xc6\\xd4\\xc1\\xd5@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "1996-07-10T00:00:00", "modifydate": "2005-12-23T08:27:56", "lines": 536, "newlines": 477, "modlines": 71, "user": "HOFFMAN"}, "text": "         TITLE 'WHOHAS - FIND WHO IS USING/WAITING FOR A DSNAME'\n**********************************************************************\n***                                                                ***\n***                       WHOHAS COMMAND                           ***\n***                                                                ***\n***  GENERAL FUNCTION:                                             ***\n***                                                                ***\n***      THIS COMMAND CHECKS THE WHOHAS GENERALIZED RESOURCE       ***\n***      QUEUE FOR QUEUING ON DATASET NAMES.  IT USES GQSCAN       ***\n***      TO CREATE RESOURCE INFORMATION BLOCKS (RIB), THEN         ***\n***      EXTRACTS INFORMATION FOR A REPORT TO THE TERMINAL.        ***\n***                                                                ***\n***  FORMAT:                                                       ***\n***                                                                ***\n***    WHOHAS  'DSNAME'                                            ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  RETURN CODES -                                                ***\n***       00 - NORMAL COMPLETION                                   ***\n***       04 - NORMAL, LIST TRUNCATED                              ***\n***       12 - ERROR                                               ***\n***                                                                ***\n***  REGISTER USAGE                                                ***\n***                                                                ***\n***      R0-R1 - MACROS, LINKAGE CONVENTIONS                       ***\n***      R2-R3 - MACROS, WORK                                      ***\n***      R4-R6 - WORK                                              ***\n***      R7-R8 - (NOT USED)                                        ***\n***         R9 - BASE FOR PARM DESCRIPTOR LIST CREATED BY PARSE    ***\n***        R10 - BAL REGISTER                                      ***\n***        R11 - BASE FOR RIB WORK AREA                            ***\n***        R12 - BASE FOR PROGRAM                                  ***\n***        R13 - BASE OF WORK0 AREA, REG SAVE AREA AND CODES       ***\n***        R14 - MACROS, LINKAGE CONVENTIONS                       ***\n***        R15 - MACROS, WORK, LINKAGE CONVENTIONS                 ***\n***          +---------------------------------------------+       ***\n***          |  EXCEPT FOR BASE REGISTERS, DATA IS NEVER   |       ***\n***          |  PASSED IN REGISTERS BETWEEN SUBSECTIONS OF |       ***\n***          |  CODE.                                      |       ***\n***          +---------------------------------------------+       ***\n***                                                                ***\n***  NON-IBM MACROS USED:  NONE                                    ***\n***                                                                ***\n***  ASSEMBLER OPTIONS:       RENT                                 ***\n***  LINKAGE EDITOR OPTIONS:  RENT, REUS, REFR                     ***\n***                                                                ***\n***  CULPRIT:                                                      ***\n***     CHUCK HOFFMAN, CONSULTANT                                  ***\n***     USER SERVICES CENTER                                       ***\n***                                                                ***\n***     BUREAU OF SYSTEMS OPERATIONS                               ***\n***     OFFICE OF MANAGEMENT INFORMATION SYSTEMS                   ***\n***     EXECUTIVE OFFICE FOR ADMINISTRATION AND FINANCE            ***\n***                                                                ***\n***     COMMONWEALTH OF MASSACHUSETTS                              ***\n***     ONE ASHBURTON PLACE, ROOM 1619                             ***\n***     BOSTON, MA  02108                                          ***\n***                           (617) 727-5725                       ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***  PROGRAM LOGIC:                                                ***\n***                                                                ***\n***  1.  GET WORKSPACE AND ASSIGN BASE REGISTERS.  FOLLOW          ***\n***      STANDARD LINKAGE CONVENTIONS.  GET INPUT STORAGE FOR      ***\n***      RESOURCE INFORMATION BLOCK (RIB) AND EXTENSIONS (RIBE).   ***\n***                                                                ***\n***  2.  CREATE PARSE PARAMETER LIST (PPL), THEN PARSE THE PARM.   ***\n***                                                                ***\n***  3.  SCAN THE GENERALIZED RESOURCE QUEUES FOR MAJOR NAME       ***\n***      'WHOHAS' AND MINOR NAME MATCHING THE PARM.  ASSIGN        ***\n***      RETURN CODES.  IF MORE THAN ONE RIB IS RETURNED, OR IF    ***\n***      RETURNED INFORMATION OVERFLOWS THE INPUT AREA, SET A      ***\n***      SWITCH TO NOTE THAT THE LIST WILL BE TRUNCATED.           ***\n***                                                                ***\n***  4.  CREATE A LIST BY PROCESSING THE FIRST RETURNED RIB, AND   ***\n***      ALL ITS RIBES WHICH FIT INTO THE RETURN AREA.             ***\n***                                                                ***\n***  5.  GENERATE A MESSAGE FOR ANY BUT 00 RETURN CODES.           ***\n***                                                                ***\n***  6.  FREE STORAGE AND TERMINATE USING STANDARD LINKAGE         ***\n***      CONVENTIONS.                                              ***\n***                                                                ***\n**********************************************************************\n         EJECT\n         YREGS\n**********************************************************************\n***   PROLOGUE                                                     ***\n**********************************************************************\nWHOHAS   CSECT\n         SAVE  (14,12),,WHOHAS-&SYSDATE\n         LR    R12,R15                  LOAD BASE ADDRESS BASER\n         USING WHOHAS,R12               ADDRESSABILTIY OF CSECT\n         GETMAIN R,LV=WORK0LEN          GET STORAGE FOR S.A. + WORK\n         ST    R13,4(0,R1)              ADDR OF PREV S.A. TO MY S.A.\n         ST    R1,8(0,R13)              ADDR OF MY S.A. TO PREV S.A.\n         LM    R0,R1,20(R13)            RESTORE R0-R1 TO PRE-GETMAIN\n         L     R13,8(0,R13)             R13 POINTS TO MY S.A.\n         USING WORK0,R13                ADDRESSABILITY OF WORK0\n         ST    R1,R1SAVE                INITIAL VAL OF R1 TO MY STORAGE\n         XC    COMPCODE,COMPCODE        CLEAR COMPLETION CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n*\n         USING PARMPDL,R9               ADDRESSABILITY OF PRM DESC LST\n         ST    R1,CPPLPTR               SAVE CPPL POINTER\n         XC    COMPCODE,COMPCODE        CLEAR PROGRAM RETURN CODE\n         XC    RETCDE,RETCDE            CLEAR INTERNAL RETURN CODE\n         B     MAINLINE\n**********************************************************************\n***   MAIN LINE ROUTINE                                            ***\n**********************************************************************\nMAINLINE BAL   R10,PPLSETUP             SET UP PARSE PARM LIST\n         BAL   R10,PARSE                PARSE THE INPUT PARAMETERS\n         BAL   R10,GQPROC               SCAN THE Grs QUEUES\n         CLC   RETCDE,F4                IF RETURN GT 4 (NO LISTING)\n         BH    MAINEND                    GO TO END\n         BAL   R10,REPORT               ELSE WRITE REPORT\nMAINEND  B     ENDING                   BRANCH TO ENDING\n**********************************************************************\n***   EPILOGUE                                                     ***\n**********************************************************************\nENDING   BAL   R10,KISSOFF              PRINT KISSOFF MESSAGE, IF ANY\n         LA    R4,MYPPL+(PPLANS-PPL)    ADDRESS OF PTR TO PDL\n         L     R4,0(0,R4)               R4 POINTS TO PDL\n         IKJRLSA (R4)                   FREE STORAGE OF PDL\n*\n         LR    R1,R13                   LOAD MY S.A. ADDR FOR FREEMAIN\n         L     R14,COMPCODE             SAVE PROGRAM COMPLETION CODE\n         L     R13,4(0,R13)             RESTORE R13 FROM MY S.A.\n         FREEMAIN R,LV=WORK0LEN,A=(R1)  FREE STORAGE FOR WORK0\n         LR    R15,R14                  SET PROGRAM COMPLETION CODE\n         LM    R0,R12,20(R13)           RESTORE R0-R12 FM CALLERS S.A.\n         L     R14,12(0,R13)            RESTORE R14 FROM CALLERS S.A.\n         MVI   12(R13),X'FF'            RETURN INDCATR TO CALLERS S.A.\n         BR    R14                      RETURN TO CALLER\n**********************************************************************\n***        CREATE PARSE PARAMETER LIST                             ***\n**********************************************************************\nPPLSETUP ST    R10,PPR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLPTR               ADDRESS OF CMD PROC PARM LIST\n         USING CPPL,R4                    ADDRESSABILITY\n         MVC   MYPPL+(PPLUPT-PPL)(4),CPPLUPT              UPT  (CPPL)\n         MVC   MYPPL+(PPLECT-PPL)(4),CPPLECT              ECT  (CPPL)\n         LA    R5,MYECB\n         ST    R5,MYPPL+(PPLECB-PPL)                      ECB  (MINE)\n         MVC   MYPPL+(PPLPCL-PPL)(4),VPARMPCL             PCL  (CSECT)\n         LA    R5,MYANS\n         ST    R5,MYPPL+(PPLANS-PPL)                      ANS  (MINE)\n         MVC   MYPPL+(PPLCBUF-PPL)(4),CPPLCBUF            CBUF (CPPL)\n         XC    MYPPL+(PPLUWA-PPL)(4),MYPPL+(PPLUWA-PPL)   UWA  (MINE)\n         DROP  R4\n*\nPPEND    L     R10,PPR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n**********************************************************************\n***    PARSE THE INPUT PARAMETER STRING                            ***\n**********************************************************************\nPARSE    ST    R10,PAR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         XC    MYECB,MYECB              ZERO THE ECB FOR PARSE\nPARSEIT  CALLTSSR EP=IKJPARS,MF=(E,MYPPL)  PARSE THE PARMS\n         L     R9,MYPPL+(PPLANS-PPL)    POINTER TO PDL ADDRESS\n         L     R9,0(0,R9)               ADDRESSABILITY OF PDL\n*\nPAEND    L     R10,PAR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n**********************************************************************\n***    SCAN THE GENERALIZED RESOURCE QUEUES                        ***\n**********************************************************************\nGQPROC   ST    R10,GQR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         LA    R5,PDSN                  R2 POINTS TO DSN PDE\n         LH    R6,4(0,R5)               R3 IS LENGTH OF DSN\n         L     R5,0(0,R5)               R2 POINTS TO DSN\n         XC    GQTOKEN,GQTOKEN          ZERO THE TOKEN\n         LA    R4,GQTOKEN               R4 POINTS TO TOKEN (FOR CONT)\n         MVC   GQSCANL(GQSLLEN),GQSCANP INITIALIZE PARM LIST\n*\nGQSCAN   GQSCAN AREA=(RETAREA,L'RETAREA),RESNAME=(,(R5),(R6)),         X\n               TOKEN=(R4),MF=(E,GQSCANL),SCOPE=ALL\n*\n         STM   R0,R1,GQRETREG\n         ST    R15,GQRETREG+8\n         NI    SWITCH1,B'00001111'      INITIALIZE SW0-SW3 TO ZERO\n*\n         LTR   R15,R15                  IF RC NOT ZERO\n         BNZ   GQCK4                      GO TO CHECKS\n         C     R1,F1                    ELSE IF NUMBER OF RIBS NOT 1\n         BNE   GQRIB                      GO TO ERROR ROUTINE\n         B     GQEND                    ELSE GO TO END\n*\nGQCK4    C     R15,F4                   IF RC=04  (NONE FOUND)\n         BNE   *+24                       NO: BRANCH AROUND\n         OI    SWITCH1,X'80'             YES: SET SW0 ON\n         MVC   RETCDE,F4                      SET PROC RETCDE=04\n         MVC   COMPCODE,F4                    SET PGM RETCDE=04\n         B     GQEND                          AND GO TO ENDING\n*\n         C     R15,F8                   IF RC=08  (OVERFLOW)\n         BNE   *+24                       NO: BRANCH AROUND\n         OI    SWITCH1,X'40'             YES: SET SW1 ON\n         MVC   RETCDE,F4                      SET PROC RETCDE=04\n         MVC   COMPCODE,F8                    SET PGM RETCDE=08\n         B     GQEND                          AND GO TO ENDING\n*\n*                                       RC MUST BE GREATER THAN 08\n         OI    SWITCH1,X'10'              SET SW3 ON\n         MVC   RETCDE,F12                 SET PROC RETCDE=12\n         MVC   COMPCODE,F12               SET PGM RETCDE=12\n         B     GQEND                          AND GO TO ENDING\n*\nGQRIB    OI    SWITCH1,X'20'            SET SW2 ON\n         MVC   RETCDE,F4                SET PROC RETCDE=04\n         MVC   COMPCODE,F8              SET PGM RETCDE=08\n         B     GQEND                    GO TO ENDING\n*\nGQEND    L     R10,GQR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n**********************************************************************\n***    WRITE THE REPORT                                            ***\n**********************************************************************\nREPORT   ST    R10,RER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    SWITCH1,X'80'            IF NO INFO WAS FOUND\n         BO    REEND                      BRANCH TO ENDING\n*\nRERNAME  MVC   OUTLINE(80),BLANKS       INITIALIZE OUTPUT LINE\n         LA    R4,RETAREA               R4 POINTS TO RETURNED DATA\n         USING RIB,R4                   ADDRESSABILITY OF RIB\n         LH    R5,RIBVLEN               R5 LENGTH OF VARIABLE SEG\n         AH    R5,GQRETREG+00           R5 LEN OF BASE + VARIABLE SEG\n         LA    R5,0(R5,R4)              R5 POINTS TO FIRST RIBE\n         USING RIBE,R5                  ADDRESSABILITY OF RIBE\n*\n         XR    R1,R1                    CLEAR R1\n         IC    R1,RIBRNMLN              LENGTH OF RNAME\n         BCTR  R1,0                       MINUS 1 FOR EXEC\n         LH    R2,GQRETREG+00           R2 IS LEN OF BASE\n         LA    R2,0(R2,R4)              R2 POINTS TO RNAME\n         B     *+10                     BRANCH AROUND EXEC\n         MVC   OUTLINE(0),0(R2)           MOVE RNAME TO OUTPUT\n         EX    R1,*-6                   EXECUTE MOVE\n*\n         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10\n         L     R1,=AL2(PUTOUTL,0)\n         ST    R1,PUTOUT\n         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X\n               OUTPUT=(PUTOUT,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10\n         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X\n               OUTPUT=(PUTBLNKS,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n*\nRETITLE  EQU   *\n         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10\n         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X\n               OUTPUT=(PUTTTL1,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n         L     R3,MYPPL+(PPLUPT-PPL)    ADDRS OF UPT INTO REG 3\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG R10\n         PUTLINE PARM=PUTBLK,UPT=(3),ECT=(10),ECB=MYECB,               X\n               OUTPUT=(PUTTTL2,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n*\n         MVC   OUTLINE(80),BLANKS       INITIALIZE OUTPUT LINE\nRESCOPE  TM    RIBSCOPE,RIBSYS          IF SCOPE NE SYSTEM\n         BNO   *+14                       BRANCH AROUND\n         MVC   OF1SCPE(7),SYSTEM        ELSE MOVE 'SYSTEM' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n         TM    RIBSCOPE,RIBSYSS         IF SCOPE NE SYSTEMS\n         BNO   *+14                       BRANCH AROUND\n         MVC   OF1SCPE(7),SYSTEMS       ELSE MOVE 'SYSTEMS' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n         TM    RIBSCOPE,RIBSTEP         IF SCOPE NE STEP\n         BNO   *+14                       BRANCH AROUND\n         MVC   OF1SCPE(7),STEP          ELSE MOVE 'STEP' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n         TM    RIBSCOPE,RIBGLBL         IF SCOPE NE GLOBAL\n         BNO   *+10                       BRANCH AROUND\n         MVC   OF1SCPE(7),GLOBAL        ELSE MOVE 'GLOBAL' TO SCOPE\n         B     RERIBENO                   AND BRANCH TO NEXT PIECE\n*\nRERIBENO L     R3,RIBNRIBE              NUMBER OF RIBE IN USER AREA\n*\nREJOBID  MVC   OF1JNAM(8),RIBEJBNM      MOVE JOB NAME TO LINE\n         MVC   OF1SYSN(8),RIBESYSN      MOVE SYS-NAME TO LINE\n*\nRETYPE   TM    RIBERFLG,RIBETYPE        IF TYPE IS SHR\n         BNO   *+14                       THEN\n         MVC   OF1TYPE(4),SHR               MOVE 'SHR' TO LINE\n         B     *+10                     ELSE\n         MVC   OF1TYPE(4),EXCL            MOVE 'EXCL' TO LINE\n*\nRESTAT   TM    RIBESFLG,RIBESTAT        IF STATUS IS OWNS\n         BNO   *+14                       THEN\n         MVC   OF1STAT(7),USING             MOVE 'USING' TO LINE\n         B     *+10                     ELSE\n         MVC   OF1STAT(7),WAITING         MOVE 'WAITING' TO LINE\n*\n*\nREJOBTYP L     R14,CVTPTR               LOAD A(CVT)\n         L     R14,CVTGVT-CVT(,R14)     LOAD A(GVT)\n         CLC   OF1SYSN,GVTSYSNM-GVT(R14) IS ENQ ON THIS SYSTEM\n         BNE   RETYPUNK                 NO, SHOW CANT DETERMINE JOBTYPE\n         SR    R15,R15                  CLEAR REGISTER\n         LH    R15,RIBEASID             LOAD ASID\n         SLL   R15,2                    MULT. BY 4 FOR INDEXING\nASVTLKUP L     R14,CVTPTR               LOAD A(CVT)\n         L     R14,CVTASVT-CVT(,R14)    LOAD A(ASVT)\n         USING ASVT,R14                  ESTABLISH ADDRESSABILITY\n         LA    R1,ASVTENTY-4            LOAD A(1ST ASVT ENTRY)\n         LA    R1,0(R15,R1)             LOAD A(REQUESTED ASVT ENTRY)\n         TM    0(R1),ASVTAVAL           IS ENTRY AVAILABLE\n         BZ    GETASCB                  NO, GET ASCB\nRETYPUNK MVC   OF1JTYP,QUESTION         ELSE SHOW UNABLE TO DETERMINE\n         B     REASID\nGETASCB  L     R1,0(,R1)                LOAD A(ASCB)\n         USING ASCB,R1                  ESTABLISH ADDRESSABILITY\n         ICM   R15,15,ASCBJBNI          CHECK FOR BATCH JOB\n         BNZ   JTYPBAT                  IF YES, GO SHOW BATCH JOB\n         L     R2,=A(GETOUCB+X'80000000') SET UP FOR 31 BIT\n         BSM   0,R2                     BRANCH IN 31 BIT MODE\nGETOUCB  L     R1,ASCBOUCB-ASCB(,R1)    LOAD A(OUCB)\n         TM    OUCBYFL-OUCB(R1),OUCBSTT IS IT A STARTED TASK\n         BO    JTYPSTC                 YES\n         TM    OUCBYFL-OUCB(R1),OUCBLOG IS IT A TSO SESSION\n         BO    JTYPTSO                  YES\nJTYPBAT  MVC   OF1JTYP,BATCH            ELSE MUST BE BATCH\n         B     REASID\nJTYPSTC  MVC   OF1JTYP,STC              MUST BE STC\n         B     REASID\nJTYPTSO  MVC   OF1JTYP,TSO              MUST BE TSO\n         B     REASID\nREASID   LA    R2,REASID2               SET UP FOR 24 BIT MODE\n         BSM   0,R2                     BRANCH IN 24 BIT MODE\nREASID2  MVC   HEXIN(2),RIBEASID        MOVE ASID\n         UNPK  HEXOUT(9),HEXIN(5)       UNPACK BYTES\n         TR    HEXOUT(4),HEXTAB-240     TRANSLATE TO PRINTABLE HEX\n         MVC   OF1JASID(4),HEXOUT       MOVE TRANSLATED BYTES\n*\n         AH    R5,GQRETREG+02           R5 POINTS TO NEXT RIBE\n         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10\n         L     R1,=AL2(PUTOUTL,0)\n         ST    R1,PUTOUT\n         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X\n               OUTPUT=(PUTOUT,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n         BCT   R3,REJOBID               LOOP BACK UP FOR NEXT RIBE\n*\n         DROP  R4\n         DROP  R5\n*\nREEND    L     R10,RER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n**********************************************************************\n***    WRITE THE KISSOFF MESSAGE, IF ANY                           ***\n**********************************************************************\nKISSOFF  ST    R10,KIR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         TM    SWITCH1,X'F0'            IF NO PROBLEMS\n         BZ    KIEND                      GO TO ENDING (NO MESSAGE)\nKINOMAT  TM    SWITCH1,X'80'            ELSE IF NO MATCH\n         BZ    KITRUNC                    THEN\n         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10\n         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X\n               OUTPUT=(NOTINUS,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n         B     KIEND                        AND GO TO END\nKITRUNC  TM    SWITCH1,X'60'            ELSE IF TRUNCATED LIST\n         BZ    KIBADRC                    THEN\n         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10\n         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X\n               OUTPUT=(TRUNCAT,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n         B     KIEND                        AND GO TO END\nKIBADRC  TM    SWITCH1,X'10'            ELSE IF GQSCAN R/C GT 8\n         BZ    KIEND                      THEN\n         L     R15,MYPPL+(PPLUPT-PPL)   ADDRS OF UPT INTO REG 15\n         L     R10,MYPPL+(PPLECT-PPL)   ADDRS OF ECT INTO REG 10\n         PUTLINE PARM=PUTBLK,UPT=(15),ECT=(10),ECB=MYECB,              X\n               OUTPUT=(BADSCAN,TERM,SINGLE,DATA),MF=(E,MYIOPL)\n         B     KIEND                        AND GO TO END\n*\nKIEND    L     R10,KIR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n**********************************************************************\n***   DATA CONSTANTS                                               ***\n**********************************************************************\nCONSTDTA DS    0D                       AREA FOR DATA CONSTANTS\nVPARMPCL DC    V(PARMPCL)               ADDR OF PARM CONTROL LIST\nDZIPS    DS    0D                       DOUBLE WORD OF ZEROES\n         DC    2F'0'\nPUTBLNKS DC    AL2(PUTBLNKL,0)\nBLANKS   DC    CL80' '                  10 DOUBLE WORDS OF BLANKS\nPUTBLNKL EQU   *-PUTBLNKS\nF1       DC    F'1'                     CONSTANT\nF4       DC    F'4'                     CONSTANT\nF8       DC    F'8'                     CONSTANT\nF12      DC    F'12'                    CONSTANT\n*\nGQSCANP  GQSCAN SCOPE=ALL,RESNAME=(MAJNAME,,),MF=L\nGQSPLEN  EQU   *-GQSCANP\nMAJNAME  DC    CL8'SYSDSN'\n*\nPUTTTL1  DC    AL2(PUTTTL1L,0)\n         DC    CL80'    JOB_NAME  SCOPE    SYS_NAME  TYPE  STATUS   JOBX\n               TYPE  ASID'\nPUTTTL1L EQU   *-PUTTTL1\n*\nPUTTTL2  DC    AL2(PUTTTL2L,0)\n         DC    CL80'    --------  -------  --------  ----  -------  ---X\n               ----  ----'\nPUTTTL2L EQU   *-PUTTTL2\n*\nHEXTAB   DC    C'0123456789ABCDEF'     TRANSLATE TABLE\nSYSTEM   DC    CL7'System'\nSYSTEMS  DC    CL7'Systems'\nSTEP     DC    CL7'Step'\nGLOBAL   DC    CL7'Global'\nSHR      DC    CL4'SHR'\nEXCL     DC    CL4'EXCL'\nUSING    DC    CL7'Using'\nWAITING  DC    CL7'Waiting'\nTSO      DC    CL5'TSO'\nBATCH    DC    CL5'Batch'\nSTC      DC    CL5'STC'\nQUESTION DC    CL5'?????'\n*\nNOTINUS  DC    AL2(NOTINUSL,0)\n         DC    CL80'*** Not in use ***'\nNOTINUSL EQU   *-NOTINUS\n*\nTRUNCAT  DC    AL2(TRUNCATL,0)\n         DC    CL80'*** List truncated due to length ***'\nTRUNCATL EQU   *-TRUNCAT\n*\nBADSCAN  DC    AL2(BADSCANL,0)\n         DC    CL80'*** Bad GQSCAN, disregard all data ***'\nBADSCANL EQU   *-BADSCAN\n*\n         LTORG\n**********************************************************************\n***    COMMAND OPERANDS                                            ***\n**********************************************************************\nPARMPCL  IKJPARM  DSECT=PARMPDL\n*\nPDSN     IKJPOSIT DSNAME,USID,PROMPT='Dataset name to be checked'\n*\n         IKJENDP\n**********************************************************************\n***   DATA AREA OBTAINED WITH LINKSAVE                             ***\n**********************************************************************\nWORK0    DSECT                          AREA-0 FOR VARIABLES\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nR1SAVE   DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nCPPLPTR  DS    F                        INITIAL VALUE OF R1 (CPPLADDR)\nRETCDE   DS    F                        INTERNAL RETURN CODE\nCOMPCODE DS    F                        PROGRAM COMPLETION CODE\nPPR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPAR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMSR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nGQR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nRER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nKIR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nMYECB    DS    F                        ECB FOR PARSE\nMYANS    DS    F                        POINTER TO THE PDL\nMYPPL    DC    (PPLLEN)X'00'            PARSE PARAMETER LIST\nMYIOPL   DC    (IOPLLEN)X'00'           I/O PARAMETER LIST\nSWITCH1  DC    B'00000000'              SWITCHES AREA #1\n*                1.......   X'80'         NO RESOURCES MATCHED\n*                .1......   X'40'         RETURN AREA FULL\n*                ..1.....   X'20'         MORE THAN ONE RIB\n*                ...1....   X'10'         RC GT 08 FROM GQSCAN\n*                ....1111                 (NOT USED)\n         PRINT GEN\nGQSCANL  GQSCAN SCOPE=ALL,RESNAME=(MAJNAME,,),MF=L\nGQSLLEN  EQU   *-GQSCANL\nPUTBLK   PUTLINE MF=L\n         PRINT NOGEN\nGQTOKEN  DS    F                        TOKEN FOR CONTINUING SCAN\nGQRETREG DS    3F                       RETURN OF R0,R1,R15 FROM SCAN\n*\nPUTOUT   DS    AL2(PUTOUTL,0)           PUTLINE OUTPUT DESCRIPTOR\nOUTLINE  DS    CL80                     OUTPUT LINE FOR TPUT\nOF1      ORG   OUTLINE                  FORMAT 1 OUTPUT\n         DS    CL4                        FILLER\nOF1JNAM  DS    CL8                        JOBNAME\n         DS    CL2                        FILLER\nOF1SCPE  DS    CL7                        SCOPE\n         DS    CL2                        FILLER\nOF1SYSN  DS    CL8                        SYSNAME\n         DS    CL2                        FILLER\nOF1TYPE  DS    CL4                        TYPE\n         DS    CL2                        FILLER\nOF1STAT  DS    CL7                        STATUS\n         DS    CL2                        FILLER\nOF1JTYP  DS    CL5                        JOBTYPE\n         DS    CL4                        FILLER\nOF1JASID DS    CL4                        ASID\n         DS    CL19                       FILLER\n         ORG   ,\nPUTOUTL  EQU   *-PUTOUT                 PUTLINE LENGTH\n*\n         DS    0D\nHEXIN    DS    4X                      INPUT FIELD FOR CONVERSION\n         DS    CL1                     REQUIRED AFTER HEXIN FOR BITFLIP\nHEXOUT   DS    8X                      OUTPUT FIELD FOR CONVERSION\n         DS    CL1                    REQUIRED AFTER HEXOUT FOR BITFLIP\nRETAREA  DS    CL8182\nWORK0LEN EQU   *-WORK0\n**********************************************************************\n***   MAPPING MACROS                                               ***\n**********************************************************************\n         CVT   DSECT=YES                CVTMAP FOR IKJPARS\n         IHAASVT                        ASVT\n         IHAASCB                        ASCB\n         IRAOUCB                        OUCB\n         ISGGVT                         GVT\n         IKJCPPL                        COMMAND PROCESSOR PARM LIST\nPPL      IKJPPL                         PARSE PARAMETER LIST\nPPLLEN   EQU   *-PPL\nIOPPL    IKJIOPL                        I/O PARAMETER LIST FOR PUTLINE\nIOPLLEN  EQU   *-IOPL\n         ISGRIB                         RESOURCE INFO BLOCK (3 DSECTS)\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT732/FILE732.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT732", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}