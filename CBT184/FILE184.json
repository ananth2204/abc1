{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011441000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 587860, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE184.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE184.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\n\\x07'", "DS1TRBAL": "b']^'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01o\\x00\\x00\\x01o\\x00\\n\\x00\\x0b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$README": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x93\\x02/\\x00\\x94\\x01\\x9f\\x13\\t\\x00&\\x00!\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1993-01-22T00:00:00", "modifydate": "1994-01-19T13:09:00", "lines": 38, "newlines": 33, "modlines": 0, "user": "SBGCSC"}, "text": "\n\n     THIS MEMBER CONTAINS DOCUMENTATION ON ALL MEMBERS IN THIS\n     LIBRARY:\n\n\n     MEMBER           DESCRIPTION\n     _____________    _____________________________________________\n\n     $$README         THIS MEMBER\n     #EDIT            CLIST TO ENTER ISPF/PDF EDIT\n     #BROWSE          CLIST TO DO ISPF/PDF BROWSE FUNCTION\n     #DPRTMAJ         CLIST TO LIST DISPATCHING PRIORITIES\n     #DPRTMIN         CLIST TO LIST A DISPATCHING PRIORITY\n     #DUMPTYP         CLIST TO DISPLAY DUMP TYPE\n     #IPCSBGN         CLIST TO CREATE NEW DUMP DIRECTORY\n     #IPCSCUR         CLIST TO USE EXISTING DUMP DIRECTORY\n     #IPCSDDR         CLIST TO DEFINE ACTUAL DUMP DIRECTORY\n     #IPCSFUL         CLIST TO REESTABLISH FULLSCREEN IPCS\n     #IPCSSAD         CLIST TO USE EXISTING SADUMP DUMP DIRECTORY\n     #IPCSTRM         CLIST TO TERMINATE IPCS\n     #UTILITY         CLIST TO ENTER ISPF/PDF UTILITY.\n     @BROWSE          REXX EXEC TO DO ISPF/PDF BROWSE FUNCTION\n     @DPRTMAJ         REXX EXEC TO LIST DISPATCHING PRIORITIES\n     @DPRTMIN         REXX EXEC TO LIST A DISPATCHING PRIORITY\n     @DUMPTYP         REXX EXEC TO DISPLAY DUMP TYPE\n     @EDIT            REXX EXEC TO ENTER ISPF/PDF EDIT\n     @IPCSBGN         REXX EXEC TO CREATE NEW DUMP DIRECTORY\n     @IPCSCUR         REXX EXEC TO USE EXISTING DUMP DIRECTORY\n     @IPCSDDR         REXX EXEC TO DEFINE ACTUAL DUMP DIRECTORY\n     @IPCSFUL         REXX EXEC TO REESTABLISH FULLSCREEN IPCS\n     @IPCSSAD         REXX EXEC TO USE EXISTING SADUMP DUMP DIRECTORY\n     @IPCSTRM         REXX EXEC TO TERMINATE IPCS\n     @UTILITY         REXX EXEC TO ENTER ISPF/PDF UTILITY.\n     IPCS1ART         FIRST PART OF 3-PART IPCS ARTICLE FOR TECH SUPT\n     IPCS2ART         SECOND PART OF 3-PART IPCS ARTICLE FOR TECH SUPT\n     IPCS3ART         THIRD PART OF 3-PART IPCS ARTICLE FOR TECH SUPT\n     IPCS4ART         4TH ARTICLE - ADDENDA ON REXX SUPPORT OF IPCS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#BROWSE": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 1 DATASET DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\n/**************************************************************/\n/*                                                            */\n/*    CLIST TO PLACE US INTO ISPF BROWSE ON A DATASET.        */\n/*                                                            */\n/*                                                            */\n/*    YOU MUST BE WITHIN IPCS/ISPF TO RUN THIS CLIST !!!      */\n/*                                                            */\n/*                                                            */\n/*    DATASET => NAME OF THE DATASET TO BE BROWSED            */\n/*                                                            */\n/*                                                            */\n/*    DEBUG   => SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\nIF &DEBUG EQ &STR(DEBUG) THEN +\n   CONTROL CONLIST SYMLIST LIST MSG\nIF &STR(&SYSISPF) EQ &STR(NOT ACTIVE) THEN +\n   DO\n      WRITE #BROWSE CLIST MUST BE EXECUTED UNDER ISPF\n      EXIT\n   END\nISPEXEC BROWSE DATASET('&DATASET.')\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DPRTMAJ": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "       PROC 0 DEBUG\n       CONTROL NOFLUSH NOLIST NOMSG\n       IF &DEBUG = &STR(DEBUG) THEN CONTROL LIST MSG\n\n/*******************************************************************/\n/*                 I P C S     C L I S T                           */\n/*                                                                 */\n/*    LIST EACH ADDRESS SPACE JOBNAME/STCNAME/TSUNAME AND ITS      */\n/*    ADDRESS SPACE DISPATCHING PRIORITY FROM HIGHEST ASCB TO      */\n/*    LOWEST ASCB.                                                 */\n/*******************************************************************/\n\n       NOTE '***************************************************' PAGE\n       NOTE '*   #DPRTMAJ: LIST EACH ADDRESS SPACE DISPATCHING *'\n       NOTE '*             PRIORITY FROM HIGHEST ASCB TO       *'\n       NOTE '*             LOWEST ASCB.                        *'\n       NOTE '***************************************************'\n\n/*******************************************************************/\n/*    PERFORM IPCS EQUATES FOR OUR CVT AND THE HIGHEST ASCB        */\n/*    (LOWEST ASID) IN THE SYSTEM.                                 */\n/*******************************************************************/\n\n       EQUATE  PSA       0. STRUCTURE(PSA)\n       EQUATE  CVT       PSA+10?   REMARK('CVT ADDRESS')\n       EQUATE  CVTASCBH  CVT+234? REMARK('HIGHEST ASCB ADDRESS')\n\n/*******************************************************************/\n/*    ISSUE RUNCHAIN COMMAND TO GO FROM HIGHEST ASCB TO LOWEST     */\n/*    ASCB ON ASCB QUEUE AND EXECUTE ASCB JOBNAME/DISPATCHING      */\n/*    PRIORITY LISTING CLIST CALLED #DPRTMIN TO PERFORM THE        */\n/*    ACTUAL PROCESSING.                                           */\n/*******************************************************************/\n\n       RUNCHAIN ADDRESS(CVTASCBH) NAME(ASCB) LINK(4) +\n                CHAIN(999) LENGTH(416) EXEC((%#DPRTMIN))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DPRTMIN": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "       PROC 0 ASCB(DUMMY) DEBUG\n       CONTROL NOLIST MSG\n       IF &DEBUG = &STR(DEBUG) THEN CONTROL CONLIST SYMLIST MSG\n\n/*******************************************************************/\n/*                 I P C S     C L I S T                           */\n/*                                                                 */\n/*         PERFORM MVS/ESA ADDRESS SPACE CONTROL BLOCK             */\n/*         LISTING OF STCNAME/JOBNAME, ASID AND DISPATCHING        */\n/*         PRIORITY.                                               */\n/*******************************************************************/\n\n  IF &ASCB NE &STR(DUMMY) THEN +\n     DO\n      NOTE '***********************************************************' PAGE\n      NOTE '*   #DPRTMIN:  PERFORM ADDRESS SPACE CONTROL BLOCK        *'\n      NOTE '*              LIST OF STCNAME/JOBNAME, ASID AND          *'\n      NOTE '*              DISPATCHING PRIORITY.                      *'\n      NOTE '***********************************************************'\n     END\n\n       IF &ASCB EQ &STR(DUMMY) THEN +\n          DO\n               EVALSYM LE ASCB999 CLIST(ADDRESS(ASCB))\n          END\n\n/*******************************************************************/\n/*    DETERMINE IF SUPPLIED ASCB OR CURRENT ASCB ARE TO BE USED.   */\n/*                                                                 */\n/*    PERFORM IPCS EQUATE TO GET OUR CLIST VARIABLE BACK INTO      */\n/*    IPCS SYMBOL.                                                 */\n/*******************************************************************/\n\n       IF &ASCB NE &STR(0) THEN +\n       DO\n          EQUATE ASCB &ASCB\n       END\n\n/*******************************************************************/\n/*    SAVE THE CURRENT ASCB INFORMATION IN CLIST VARIABLES FOR     */\n/*    A LATER NOTE COMMAND.                                        */\n/*                                                                 */\n/*    FOR OUR ASID AND DISPATCHING PRIORITY VALUES, GET THE        */\n/*    DECIMAL AND HEXADECIMAL VALUES.                              */\n/*                                                                 */\n/*    GENERATE THE REPORT.                                         */\n/*******************************************************************/\n\n      EVALUATE ASCB+25 LENGTH(1) CLIST(STORAGE(ASIDX))\n      INTEGER X'&ASIDX' CLIST(STORAGE(ASID)) UNSIGNED(3)\n      SET ASID EQ &ASID\n      SET ASIDX EQ &STR((&ASIDX))\n\n      IF &LENGTH(&ASID) EQ 1 THEN +\n         DO\n            SET ASID EQ &STR(&ASID  )\n            GOTO CONTUE1\n         END\n\n      IF &LENGTH(&ASID) EQ 2 THEN +\n         DO\n            SET ASID EQ &STR(&ASID )\n            GOTO CONTUE1\n         END\n\n CONTUE1: +\n      EVALUATE ASCB+2B LENGTH(1) CLIST(STORAGE(DPRTYX))\n      INTEGER X'&DPRTYX' CLIST(STORAGE(DPRTY)) UNSIGNED(3)\n      SET DPRTY EQ &DPRTY\n      SET DPRTYX EQ &STR((&DPRTYX))\n\n      IF &LENGTH(&DPRTY) EQ 1 THEN +\n         DO\n            SET DPRTY EQ &STR(&DPRTY )\n            GOTO CONTUE2\n         END\n\n      IF &LENGTH(&DPRTY) EQ 2 THEN +\n         DO\n            SET DPRTY EQ &STR(&DPRTY )\n            GOTO CONTUE2\n         END\n\n CONTUE2: +\n      EVALUATE ASCB+AC? LENGTH(8) CHARACTER CLIST(STORAGE(JOBNAME))\n      COMPARE ADDRESS(ASCB+AC) LE(4) WITH(VALUE(X'00000000'))\n      IF &LASTCC EQ 0 THEN SET &JOBNAME EQ &STR(N/A)\n\n      EVALUATE ASCB+B0? LENGTH(8) CHARACTER CLIST(STORAGE(STCNAME))\n      COMPARE ADDRESS(ASCB+B0) LE(4) WITH(VALUE(X'00000000'))\n      IF &LASTCC EQ 0 THEN SET &STCNAME EQ &STR(N/A)\n\n   NOTE '                                                            '\n   NOTE '  STARTED TASK/TSO LOGON              ===> &STCNAME         '\n   NOTE '  BATCH INITIATED PROGRAM             ===> &JOBNAME         '\n   NOTE '  ASID VALUE (DEC/HEX)                ===> &ASID &ASIDX     '\n   NOTE '  DISPATCHING PRIORITY (DEC/HEX)      ===> &DPRTY &DPRTYX   '\n   NOTE '                                                            '\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DUMPTYP": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x00o\\x00\\x93\\x00o\\x12C\\x00R\\x00R\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-01-06T00:00:00", "modifydate": "1993-01-06T12:43:00", "lines": 82, "newlines": 82, "modlines": 0, "user": "SSSTJB0"}, "text": "      PROC 0 DEBUG\n      CONTROL NOLIST MSG\n      IF &DEBUG = &STR(DEBUG) THEN CONTROL CONLIST SYMLIST MSG\n\n/*******************************************************************/\n/*                                                                  */\n/*      THIS IPCS CLIST WILL DISPLAY CURRENT ACTIVE                 */\n/*      DUMP INFORMATION.                                           */\n/*                                                                  */\n/*                                                                  */\n/*      IN THE MVS/XA/ESA DUMP HEADER + X'40' THE FOLLOWING         */\n/*      NAMES WILL APPEAR:                                          */\n/*                                                                  */\n/*                                                                  */\n/*      DUMP HEADER NAME    DUMP TYPE                               */\n/*      ----------------    ----------------                        */\n/*                                                                  */\n/*      AMDSADMP            STAND-ALONE DUMP                        */\n/*                                                                  */\n/*      SVCDUMP             SYNCHRONOUS SVCDUMP                     */\n/*                                                                  */\n/*      IEAVTSDT            SCHEDULED SVCDUMP                       */\n/*                                                                  */\n/*      SYSMDUMP            UNFORMATTED APPLICATION DUMP            */\n/*                                                                  */\n/*      ACTIVE              ACTIVE MAIN STORAGE                     */\n/*      MAIN                                                        */\n/*      STORAGE                                                     */\n/*                                                                  */\n/********************************************************************/\n\n   NOTE '**************************************************' PAGE\n   NOTE '*    #DUMPTYP:  STATE MVS/ESA DUMP TYPE          *'\n   NOTE '**************************************************'\n\n\n   EQUATE HEADER 0. HEADER  REMARK('IPCS DUMP HEADER AREA')\n\n   EVALUATE HEADER+40 LE(8) CHARACTER CLIST(STORAGE(DUMPTYP))\n   IF &LASTCC = 0 THEN +\n      DO\n         WRITE IPCS EVALUATE HEADER RETURN CODE IS &LASTCC\n         EXIT\n      END\n\n   SELECT\n   WHEN (&DUMPTYP = AMDSADMP) +\n        DO\n          NOTE '                                       '\n          NOTE ' DUMP TYPE IS MVS/ESA STAND-ALONE DUMP '\n          NOTE '                                       '\n        END\n\n   WHEN (&DUMPTYP = SVCDUMP) +\n     DO\n       NOTE '                                  '\n       NOTE ' DUMP TYPE IS SYNCHRONOUS SVCDUMP '\n       NOTE '                                  '\n     END\n\n   WHEN (&DUMPTYP = IEAVTSDT) +\n     DO\n       NOTE '                                '\n       NOTE ' DUMP TYPE IS SCHEDULED SVCDUMP '\n       NOTE '                                '\n     END\n\n   WHEN (&DUMPTYP = SYSMDUMP) +\n     DO\n       NOTE '                                     '\n       NOTE ' DUMP TYPE IS UNFORMATTED ABEND DUMP '\n       NOTE '                                     '\n     END\n\n   WHEN (&DUMPTYP = ACTIVE MAIN STORAGE) +\n     DO\n       NOTE '                                             '\n       NOTE ' NO DUMP:  THIS IS ACTIVE MAIN STORAGE       '\n       NOTE '                                             '\n     END\n   END\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#IPCSBGN": {"ttr": 528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 BATCH VOLUME(HB8116) DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\n/**************************************************************/\n/*                                                            */\n/*    CLIST TO RUN IPCS IN EITHER INTERACTIVE OR BATCH MODE.  */\n/*                                                            */\n/*                                                            */\n/*    YOU MUST BE OUTSIDE OF ISPF TO RUN THIS CLIST !!!!      */\n/*                                                            */\n/*                                                            */\n/*    BATCH ==>  SPECIFY THIS OPERAND IF YOU WANT IPCS TO     */\n/*               BE RUN IN BATCH (ISPF IS DEFAULT OTHERWISE)  */\n/*                                                            */\n/*                                                            */\n/*   VOLUME ==>  SPECIFY VOLUME FOR %#IPCSDDR CLIST TO        */\n/*               ALLOCATE IPCS VSAM DUMP DIRECTORY            */\n/*                                                            */\n/*                                                            */\n/*    DEBUG ==>  SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\nIF &DEBUG EQ &STR(DEBUG) THEN +\n   CONTROL CONLIST SYMLIST LIST MSG\nIF &STR(&SYSISPF) EQ &STR(ACTIVE) THEN +\n   DO\n      WRITE #IPCSBGN CLIST CANNOT BE EXECUTED UNDER ISPF\n      EXIT\n   END\nDEL '&SYSUID..DDIR.SVCDUMP' CLUSTER\nDEL '&SYSUID..IPCSPRNT'\nALLOC F(IPCSPRNT) DA('&SYSUID..IPCSPRNT') +\n   NEW SPA(5 1) CYL REL REUSE\nIF &BATCH NE &STR(BATCH) THEN +\n   DO\n      WRITE #IPCSBGN CLIST ONLINE EXECUTION\n      WRITE &SYSUID..DDIR.SVCDUMP DUMP DIRECTORY WILL BE CREATED\n      WRITE DATASET &SYSUID..IPCSPRNT WILL BE CREATED\n      %#IPCSDDR VOLUME(&VOLUME)\n      IPCS NOPARM\n      SETDEF ACTIVE LENGTH(200) FLAG(ERROR) +\n             DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL) +\n             NOCONFIRM NOVERIFY\n      ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\n      EXIT\n    END\nIF &BATCH EQ &STR(BATCH) THEN +\n    DO\n      WRITE #IPCSBGN CLIST BATCH EXECUTION\n      WRITE &SYSUID..DDIR.SVCDUMP DUMP DIRECTORY WILL BE CREATED\n      WRITE DATASET &SYSUID..IPCSPRNT WILL BE CREATED\n      %#IPCSDDR VOLUME(&VOLUME)\n      IPCS NOPARM\n      SETDEF ACTIVE LENGTH(200) FLAG(ERROR) +\n             DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL) +\n             NOCONFIRM NOVERIFY\n      EXIT\n    END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#IPCSCUR": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 BATCH DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\n/**************************************************************/\n/*                                                            */\n/*    CLIST TO RUN IPCS IN EITHER INTERACTIVE OR BATCH        */\n/*    MODE USING CURRENT IPCS DUMP DIRECTORY PREVIOUSLY       */\n/*    CREATED.                                                */\n/*                                                            */\n/*                                                            */\n/*    YOU MUST BE OUTSIDE OF ISPF TO RUN THIS CLIST !!!!      */\n/*                                                            */\n/*                                                            */\n/*    BATCH ==>  SPECIFY THIS OPERAND IF YOU WANT IPCS TO     */\n/*               BE RUN IN BATCH (ISPF IS DEFAULT OTHERWISE)  */\n/*                                                            */\n/*                                                            */\n/*    DEBUG ==>  SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\nIF &DEBUG EQ &STR(DEBUG) THEN +\n   CONTROL CONLIST SYMLIST LIST MSG\nIF &STR(&SYSISPF) EQ &STR(ACTIVE) THEN +\n   DO\n      WRITE #IPCSCUR CLIST CANNOT BE EXECUTED UNDER ISPF\n      EXIT\n   END\nDEL '&SYSUID..IPCSPRNT'\nALLOC F(IPCSPRNT) DA('&SYSUID..IPCSPRNT') +\n   NEW SPA(5 1) CYL REL REUSE\nSET DDIR EQ &SYSDSN('&SYSUID..DDIR.SVCDUMP')\nIF &DDIR EQ &STR(DATASET NOT FOUND) THEN +\n   DO\n      WRITE &SYSUID..DDIR.SVCDUMP NOT FOUND\n      WRITE\n      WRITE USE #IPCSBGN CLIST FOR PROCESSING\n      %#IPCSTRM\n      EXIT\n   END\nALLOC F(IPCSDDIR) DA('&SYSUID..DDIR.SVCDUMP') SHR REUSE\nIF &BATCH NE &STR(BATCH) THEN +\n   DO\n      WRITE #IPCSCUR CLIST ONLINE EXECUTION\n      WRITE EXISTING &SYSUID..DDIR.SVCDUMP VSAM DUMP DIRECTORY ALLOCATED\n      WRITE DATASET &SYSUID..IPCSPRNT WILL BE CREATED\n      IPCS NOPARM\n      SETDEF LENGTH(200) FLAG(ERROR) LIST +\n             DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL) +\n             NOCONFIRM NOVERIFY TERMINAL NOPRINT\n      ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\n      EXIT\n    END\nIF &BATCH EQ &STR(BATCH) THEN +\n    DO\n      WRITE #IPCSCUR CLIST BATCH EXECUTION\n      WRITE EXISTING &SYSUID..DDIR.SVCDUMP VSAM DUMP DIRECTORY ALLOCATED\n      WRITE DATASET &SYSUID..IPCSPRNT WILL BE CREATED\n      IPCS NOPARM\n      SETDEF LENGTH(200) FLAG(ERROR) LIST +\n             DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL) +\n             NOCONFIRM NOVERIFY TERMINAL NOPRINT\n      EXIT\n    END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#IPCSDDR": {"ttr": 532, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 VOLUME(HB8006) DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\nIF &DEBUG EQ &STR(DEBUG) THEN CONTROL SYMLIST CONLIST MSG\n\n/**************************************************************/\n/*                                                            */\n/*    CLIST TO DEFINE VSAM DUMP DIRECTORY.                    */\n/*                                                            */\n/*    NOTE:  THIS IS AN INNER CLIST INVOKED BY THE            */\n/*           #IPCSBGN CLIST                                   */\n/*                                                            */\n/*    YOU MUST BE OUTSIDE OF ISPF TO RUN THIS CLIST !!!!      */\n/*                                                            */\n/*                                                            */\n/*    VOLUME =>  VOLUME TO CONTAIN VSAM DUMP DIRECTORY        */\n/*                                                            */\n/*    DEBUG ==>  SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\n\nDEFINE CLUSTER(NAME('&SYSUID..DDIR.SVCDUMP') +\n             VOLUME(&VOLUME) +\n             INDEXED +\n             FREESPACE(10,10) +\n             REUSE +\n             IMBED +\n             REPLICATE +\n             SHAREOPTIONS(1,3)) +\n       INDEX(NAME('&SYSUID..DDIR.SVCDUMP.INDEX') +\n             CYLINDERS(1,1) +\n             CISZ(2048)) +\n       DATA(NAME('&SYSUID..DDIR.SVCDUMP.DATA') +\n             CYLINDERS(70,30) +\n             CISZ(4096) +\n             KEYS(128,0) +\n             RECORDSIZE(384 3072))\n\nIPCSDDIR '&SYSUID..DDIR.SVCDUMP'\n\nALLOCATE FILE(IPCSDDIR) DSNAME('&SYSUID..DDIR.SVCDUMP') SHR REUSE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#IPCSFUL": {"ttr": 534, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\n/**************************************************************/\n/*                                                            */\n/*    THIS CLIST WILL TAKE YOU FROM IPCS NATIVE               */\n/*    TSO/E MODE AND PLACE YOU INTO IPCS ISPF FULLSCREEN      */\n/*    MODE.                                                   */\n/*                                                            */\n/*    YOU MUST BE OUTSIDE OF ISPF TO RUN THIS CLIST !!!!      */\n/*                                                            */\n/*                                                            */\n/*    DEBUG ==>  SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\nISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#IPCSSAD": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x01\\x1f\\x00\\x93\\x01\\x1f\\x15\\x10\\x00;\\x00;\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-01-11T00:00:00", "modifydate": "1993-01-11T15:10:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "SSSTJB0"}, "text": "PROC 1 SUFX BATCH DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\n/**************************************************************/\n/*                                                            */\n/*    CLIST TO RUN IPCS IN EITHER INTERACTIVE OR BATCH        */\n/*    MODE.                                                   */\n/*                                                            */\n/*                                                            */\n/*    YOU MUST BE OUTSIDE OF ISPF TO RUN THIS CLIST !!!!      */\n/*                                                            */\n/*                                                            */\n/*    SUFX  ==>  LAST INDEX NAME OF YOUR SEQUENTIAL DUMP      */\n/*               DATASET FOR THE STAND-ALONE DUMP             */\n/*                                                            */\n/*                                                            */\n/*    BATCH ==>  SPECIFY THIS OPERAND IF YOU WANT IPCS TO     */\n/*               BE RUN IN BATCH (ISPF IS DEFAULT OTHERWISE)  */\n/*                                                            */\n/*                                                            */\n/*    DEBUG ==>  SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\nIF &DEBUG EQ &STR(DEBUG) THEN +\n   CONTROL CONLIST SYMLIST LIST MSG\nIF &STR(&SYSISPF) EQ &STR(ACTIVE) THEN +\n   DO\n      WRITE #IPCSSAD CLIST CANNOT BE EXECUTED UNDER ISPF\n      EXIT\n   END\nDEL '&SYSUID..IPCSPRNT'\nALLOC F(IPCSPRNT) DA('&SYSUID..IPCSPRNT') +\n   NEW SPA(5 1) CYL REL REUSE\nALLOC F(IPCSDDIR) DA('&SYSUID..DDIR.SADUMP.&SUFX') SHR REUSE\nIF &BATCH NE &STR(BATCH) THEN +\n   DO\n      WRITE #IPCSSAD CLIST ONLINE EXECUTION\n      WRITE SEQUENTIAL DUMP DATASET IS &SYSUID..SADUMP.&SUFX\n      WRITE DATASET &SYSUID..IPCSPRNT WILL BE CREATED\n      IPCS NOPARM\n      SETDEF DSNAME('&SYSUID..SADUMP.&SUFX') +\n             LENGTH(200) FLAG(ERROR) LIST +\n             DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL) +\n             NOCONFIRM NOVERIFY TERMINAL NOPRINT\n      ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\n      EXIT\n    END\nIF &BATCH EQ &STR(BATCH) THEN +\n    DO\n      WRITE #IPCSSAD CLIST BATCH EXECUTION\n      WRITE SEQUENTIAL DUMP DATASET IS &SYSUID..SADUMP.&SUFX\n      WRITE DATASET &SYSUID..IPCSPRNT WILL BE CREATED\n      IPCS NOPARM\n      SETDEF DSNAME('&SYSUID..SADUMP.&SUFX') +\n             LENGTH(200) FLAG(ERROR) LIST +\n             DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL) +\n             NOCONFIRM NOVERIFY TERMINAL NOPRINT\n      EXIT\n    END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#IPCSTRM": {"ttr": 771, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\n/**************************************************************/\n/*                                                            */\n/*    THIS CLIST WILL PERFORM IPCS TERMINATION UNDER          */\n/*    NATIVE TSO/E MODE.                                      */\n/*                                                            */\n/*                                                            */\n/*    YOU MUST BE OUTSIDE OF ISPF TO RUN THIS CLIST !!!!      */\n/*                                                            */\n/*                                                            */\n/*    DEBUG ==>  SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\nIF &DEBUG EQ &STR(DEBUG) THEN +\n   CONTROL CONLIST SYMLIST LIST MSG\nIF &STR(&SYSISPF) EQ &STR(ACTIVE) THEN +\n   DO\n      WRITE #IPCSTRM CLIST CANNOT BE EXECUTED UNDER ISPF\n      EXIT\n   END\nEND\nWRITE IPCS TERMINATION AND CLEANUP COMPLETE\nFREE F(IPCSDDIR,IPCSPRNT,IPCSTOC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#UTILITY": {"ttr": 773, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 DEBUG\nCONTROL NOFLUSH NOLIST NOMSG\n/**************************************************************/\n/*                                                            */\n/*    CLIST TO PLACE US INTO ISPF UTILITY PANEL.              */\n/*                                                            */\n/*                                                            */\n/*    YOU MUST BE WITHIN IPCS/ISPF TO RUN THIS CLIST !!!      */\n/*                                                            */\n/*                                                            */\n/*    DEBUG   => SHOW DIAGNOSTICS OF CLIST IF PROBLEM         */\n/*               SHOOTING                                     */\n/*                                                            */\n/**************************************************************/\nIF &DEBUG EQ &STR(DEBUG) THEN +\n   CONTROL CONLIST SYMLIST LIST MSG\nIF &STR(&SYSISPF) EQ &STR(NOT ACTIVE) THEN +\n   DO\n      WRITE #BROWSE CLIST MUST BE EXECUTED UNDER ISPF\n      EXIT\n   END\nISPEXEC SELECT PANEL(ISRUTIL)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@BROWSE": {"ttr": 775, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will place the user into ISPF BROWSE.        */\n/*                                                                  */\n/*      NOTE: You must be under IPCS/ISPF to run this EXEC!         */\n/*                                                                  */\n/*      Keyword operands                                            */\n/*                                                                  */\n/*      DATASET  ==>  the fully-qualified name of the dataset       */\n/*                    you want to browse                            */\n/*                                                                  */\n/********************************************************************/\n\narg dataset\n\nstatus = MSG('OFF')\n\nsubcom ispexec\nif rc\u00ac=0 then\n   do\n     say '@BROWSE rexx exec must be executed under ISPF'\n     exit\n   end\nelse NOP\n\n\"ISPEXEC BROWSE DATASET('\"dataset\"')\"\nif rc\u00ac=0 then\n   do\n     say 'ISPF ISPEXEC BROWSE command failed - RC is' rc\n     exit\n   end\nelse NOP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@DPRTMAJ": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x922/\\x00\\x925/\\x14\\x16\\x00Z\\x007\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1992-11-17T00:00:00", "modifydate": "1992-12-17T14:16:00", "lines": 90, "newlines": 55, "modlines": 0, "user": "SSSTJB0"}, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will list each address space JOBNAME/STCNAME */\n/*      and its addess space dispatching priority from              */\n/*      highest ASCB to lowest ASCB.                                */\n/*                                                                  */\n/*      Keyword operands     none                                   */\n/*                                                                  */\n/********************************************************************/\n\n/*******************************************************************/\n/*    Check to see if we have a valid environment to run IPCS.     */\n/*    Use REXX ADDRESS keyword to set a valid IPCS environment.    */\n/*******************************************************************/\n\nsubcom ipcs\nif rc \\= 0 then\n   do\n     say '@DPRTMAJ does not have a valid IPCS environment'\n     exit\n   end\nelse NOP\n\n\nADDRESS IPCS\n\n\n\" NOTE '***************************************************' PAGE \"\n\" NOTE '*   @DPRTMAJ: LIST EACH ADDRESS SPACE DISPATCHING *'      \"\n\" NOTE '*             PRIORITY FROM HIGHEST ASCB TO       *'      \"\n\" NOTE '*             LOWEST ASCB.                        *'      \"\n\" NOTE '***************************************************'      \"\n\n\n/*******************************************************************/\n/*    Perform IPCS EQUATES for our CVT and the HIGHEST ASCB        */\n/*    (LOWEST ASID) in the system.                                 */\n/*******************************************************************/\n\n\" EQUATE  PSA  0.  STRUCTURE(PSA)  \"\n  if rc > 0 then\n     do\n       say 'EQUATE for PSA return code is' rc\n       exit\n     end\n  else NOP\n\n\" EQUATE  CVT  PSA+10?  REMARK('CVT ADDRESS')  \"\n  if rc > 0 then\n     do\n       say 'EQUATE for CVT return code is' rc\n       exit\n     end\n  else NOP\n\n\" EQUATE  CVTASCBH  CVT+234? REMARK('HIGHEST ASCB ADDRESS') \"\n  if rc > 0 then\n     do\n       say 'EQUATE for CVTASCBH return code is' rc\n       exit\n     end\n  else NOP\n\n\n/*******************************************************************/\n/*    Issue RUNCHAIN command to go from HIGHEST ASCB to LOWEST     */\n/*    ASCB on ASCB QUEUE and execute ASCB JOBNAME/DISPATCHING      */\n/*    PRIORITY LISTING called external subroutine rexx exec        */\n/*    (@DPRTMIN) to perform the actual processing.                 */\n/*                                                                 */\n/*    ATTENTION: I TURN OFF TRACE DUE TO THE FACT THAT IPCS        */\n/*               PERFORMS THE SCREEN DISPLAY BEFORE THE @DPRTMAJ   */\n/*               RUNCHAIN HAS COMPLETED.  THIS WILL AVOID          */\n/*               MANY NASTY REXX MESSAGES AND NEGATIVE RETURN      */\n/*               CODES.                                            */\n/*******************************************************************/\n\n\" DROPSYM ASCB:ASCC PURGE \"\n\ntrace off\n\n\"  RUNCHAIN ADDRESS(CVTASCBH) NAME(ASCB) LINK(4) \",\n\"           CHAIN(999) LENGTH(416) EXEC((@DPRTMIN)) \"\n   if rc > 0 then\n      do\n        say 'user entered END (PF3) before display complete'\n        say 'RUNCHAIN return code is' rc\n        exit\n      end\n   else NOP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@DPRTMIN": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00\\x922/\\x00\\x922_\\x11\\x04\\x00\\xc9\\x00\\x81\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1992-11-17T00:00:00", "modifydate": "1992-11-20T11:04:00", "lines": 201, "newlines": 129, "modlines": 0, "user": "SSSTJB0"}, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will retrieve address space JOBNAME/STCNAME  */\n/*      ASID and DISPATCHING PRIORITY by specifying an ASCB or      */\n/*      being invoked from @DPRTMAJ.                                */\n/*                                                                  */\n/*      Keyword operands     ASCB address                           */\n/*                                                                  */\n/********************************************************************/\n\narg oneascb\n\n/*******************************************************************/\n/*    Check to see if we have a valid environment to run IPCS.     */\n/*    Use REXX ADDRESS keyword to set a valid IPCS environment.    */\n/*******************************************************************/\n\nsubcom ipcs\nif rc \\= 0 then\n   do\n     say '@DPRTMIN does not have a valid IPCS environment'\n     exit\n   end\nelse NOP\n\n\nADDRESS IPCS\n\n\nif oneascb \\= '' then\n   do\n    if right(oneascb,1) /= '.' then\n             oneascb = oneascb||'.'\n/*  x = OUTTRAP(mysym,1) */\n    \" EQUATE X \" oneascb\n    if rc = 12 then\n       do\n           say  'you entered an invalid ascb address of' oneascb\n           exit\n       end\n/*  x = OUTTRAP(off) */\n   end\n\n\nif oneascb \\= '' then\n   do\n    \" NOTE '***************************************************' PAGE \"\n    \" NOTE '*   @DPRTMIN: PERFORM ADDRESS SPACE CONTROL BLOCK *'      \"\n    \" NOTE '*             LIST OF JOBNAME/STCNAME, ASID AND   *'      \"\n    \" NOTE '*             DISPATCHING PRIORITY FOR A GIVEN    *'      \"\n    \" NOTE '*             ASCB.                               *'      \"\n    \" NOTE '***************************************************'      \"\n   end\n\n/*******************************************************************/\n/*    The @DPRTMAJ RUNCHAIN command passes each ASCB address to    */\n/*    the @DPRTMIN rexx exec as IPCS symbols ASCB1, ASCB2, ASCB3,  */\n/*    etc.                                                         */\n/*                                                                 */\n/*    The EVALSYM command will check for the RUNCHAIN CHAIN(999)   */\n/*    default limit and place the passed IPCS address symbol       */\n/*    into a rexx symbol.                                          */\n/*                                                                 */\n/*    If @DPRTMIN was executed alone, then the rexx ascb value     */\n/*    is set via the oneascb rexx argument.                        */\n/*                                                                 */\n/*******************************************************************/\n\n\nif oneascb = '' then\n   do\n      \" EVALSYM LE ASCB999 REXX(ADDRESS(ASCB))\"\n   end\nelse ascb = oneascb\n\n\n/*******************************************************************/\n/*    Determine if supplied ASCB or current ASCB is to be used.    */\n/*                                                                 */\n/*    Perform IPCS EQUATE to get our rexx variable back into the   */\n/*    IPCS symbol.                                                 */\n/*                                                                 */\n/*    Make sure we properly equate the ascb value XXXXXX. and      */\n/*    allow the user to specify the ending period (or not).        */\n/*******************************************************************/\n\n\n\n    if right(ascb,1) /= '.' then\n             ascb = ascb||'.'\n    \" EQUATE ASCB \" ascb\n\n\n/*******************************************************************/\n/*    Save the current ASCB information in rexx variables for      */\n/*    a later note command.                                        */\n/*                                                                 */\n/*    For our asid and dispatching priority values, get the        */\n/*    decimal and hexadecimal values of each for display.          */\n/*                                                                 */\n/*    Generate the report.                                         */\n/*******************************************************************/\n\n\n \" EVALUATE ASCB+25 LENGTH(1) REXX(STORAGE(ASIDX)) \"\n   if rc > 0 then\n      do\n        say 'EVALUATE for ASID return code is' rc\n        exit\n      end\n   else NOP\n\n/*******************************************************************/\n/*    Right-align the decimal and hexadecimal asid value           */\n/*    for the report.                                              */\n/*******************************************************************/\n\n asid = x2d(asidx)\n do while length(asid) < 3\n    asid = ' '||asid\n    end\n do while length(asidx) < 2\n    asidx = ' '||asidx\n    end\n asidx = '('||asidx||')'\n\n\n \" EVALUATE ASCB+2B LENGTH(1) REXX(STORAGE(DPRTYX)) \"\n   if rc > 0 then\n      do\n        say 'EVALUATE for DPRTY return code is' rc\n        exit\n      end\n   else NOP\n\n/*******************************************************************/\n/*    Right-align the decimal and hexadecimal dprty value          */\n/*    for the report.                                              */\n/*******************************************************************/\n\n dprty = x2d(dprtyx)\n do while length(dprty) < 3\n    dprty = ' '||dprty\n    end\n do while length(dprtyx) < 2\n    dprtyx = ' '||dprtyx\n    end\n dprtyx = '('||dprtyx||')'\n\n/*******************************************************************/\n/*    Check each ASCB for a jobname field (if present) and         */\n/*    a started-task name field (if present).                      */\n/*******************************************************************/\n\n \" EVALUATE ASCB+AC? LENGTH(8) CHARACTER REXX(STORAGE(JOBNAME)) \"\n   if rc > 0 then\n      do\n        say 'EVALUATE for ASCB JOBNAME return code is' rc\n        exit\n      end\n   else NOP\n\n \" COMPARE ADDRESS(ASCB+AC) LE(4) WITH(VALUE(X'00000000')) \"\n   if rc = 0 then\n   do\n       jobname = 'N/A'\n   end\n\n\n \" EVALUATE ASCB+B0? LENGTH(8) CHARACTER REXX(STORAGE(STCNAME)) \"\n   if rc > 0 then\n      do\n        say 'EVALUATE for ASCB STCNAME return code is' rc\n        exit\n      end\n   else NOP\n\n \" COMPARE ADDRESS(ASCB+B0) LE(4) WITH(VALUE(X'00000000')) \"\n   if rc = 0 then\n   do\n       stcname = 'N/A'\n   end\n\n/*******************************************************************/\n/*    ATTENTION: I TURN OFF TRACE DUE TO THE FACT THAT IPCS        */\n/*               PERFORMS THE SCREEN DISPLAY BEFORE THE @DPRTMAJ   */\n/*               RUNCHAIN HAS COMPLETED.  THIS WILL AVOID          */\n/*               MANY NASTY REXX MESSAGES AND NEGATIVE RETURN      */\n/*               CODES.                                            */\n/*******************************************************************/\n\n trace off\n\n \" NOTE '                                                        ' \"\n \" NOTE '  STARTED TASK/TSO LOGON          ===> \"STCNAME\"        ' \"\n \" NOTE '  BATCH INITIATED PROGRAM         ===> \"JOBNAME\"        ' \"\n \" NOTE '  ASID VALUE (DEC/HEX)            ===> \"ASID\" \"ASIDX\"   ' \"\n \" NOTE '  DISPATCHING PRIORITY (DEC/HEX)  ===> \"DPRTY\" \"DPRTYX\" ' \"\n \" NOTE '                                                        ' \"\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@DUMPTYP": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x922?\\x00\\x93\\x00o\\x12C\\x00g\\x00n\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-11-18T00:00:00", "modifydate": "1993-01-06T12:43:00", "lines": 103, "newlines": 110, "modlines": 0, "user": "SSSTJB0"}, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*                                                                  */\n/*      This IPCS REXX exec will display current active             */\n/*      dump information.                                           */\n/*                                                                  */\n/*                                                                  */\n/*      In the MVS/XA/ESA dump header + X'40' the following         */\n/*      names will appear:                                          */\n/*                                                                  */\n/*                                                                  */\n/*      DUMP HEADER NAME    DUMP TYPE                               */\n/*      ----------------    ----------------                        */\n/*                                                                  */\n/*      AMDSADMP            STAND-ALONE DUMP                        */\n/*                                                                  */\n/*      SVCDUMP             SYNCHRONOUS SVCDUMP                     */\n/*                                                                  */\n/*      IEAVTSDT            SCHEDULED SVCDUMP                       */\n/*                                                                  */\n/*      SYSMDUMP            UNFORMATTED APPLICATION DUMP            */\n/*                                                                  */\n/*      ACTIVE              ACTIVE MAIN STORAGE                     */\n/*      MAIN                                                        */\n/*      STORAGE                                                     */\n/*                                                                  */\n/********************************************************************/\n\n\n/*******************************************************************/\n/*    Check to see if we have a valid IPCS environment.            */\n/*    Use REXX ADDRESS keyword to ensure setting of a valid        */\n/*    IPCS environment.                                            */\n/*******************************************************************/\n\nsubcom ipcs\nif rc \\= 0 then\n   do\n     say '@DUMPTYP does not have a valid IPCS environment'\n     exit\n   end\nelse NOP\n\naddress ipcs\n\n\n \" NOTE '**************************************************' PAGE \"\n \" NOTE '*    @DUMPTYP:  STATE MVS/ESA DUMP TYPE          *'      \"\n \" NOTE '**************************************************'      \"\n\n \" EQUATE HEADER 0. HEADER  REMARK('IPCS DUMP HEADER AREA') \"\n   if rc \\= 0 then\n      do\n        say '@DUMPTYP IPCS EQUATE return code is ' rc\n        exit\n      end\n   else NOP\n\n \" EVALUATE HEADER+40 LE(8) CHARACTER REXX(STORAGE(DUMPTYP)) \"\n   if rc \\= 0 then\n      do\n        say '@DUMPTYP IPCS EVALUATE return code is ' rc\n        exit\n      end\n   else NOP\n\n   select\n   when dumptyp = 'AMDSADMP' then\n        DO\n         \" NOTE '                                       ' \"\n         \" NOTE ' DUMP TYPE IS MVS/ESA STAND-ALONE DUMP ' \"\n         \" NOTE '                                       ' \"\n        END\n\n   when dumptyp = 'SVCDUMP' then\n     DO\n      \" NOTE '                                  ' \"\n      \" NOTE ' DUMP TYPE IS SYNCHRONOUS SVCDUMP ' \"\n      \" NOTE '                                  ' \"\n     END\n\n   when dumptyp = 'IEAVTSDT' then\n     DO\n      \" NOTE '                                ' \"\n      \" NOTE ' DUMP TYPE IS SCHEDULED SVCDUMP ' \"\n      \" NOTE '                                ' \"\n     END\n\n   when dumptyp = 'SYSMDUMP' then\n     DO\n      \" NOTE '                                     ' \"\n      \" NOTE ' DUMP TYPE IS UNFORMATTED ABEND DUMP ' \"\n      \" NOTE '                                     ' \"\n     END\n\n   when dumptyp = 'ACTIVE MAIN STORAGE' then\n     DO\n      \" NOTE '                                             ' \"\n      \" NOTE ' NO DUMP:  THIS IS ACTIVE MAIN STORAGE       ' \"\n      \" NOTE '                                             ' \"\n     END\n   END\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@EDIT": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will place the user into ISPF EDIT.          */\n/*                                                                  */\n/*      NOTE: You must be under IPCS/ISPF to run this EXEC!         */\n/*                                                                  */\n/*      Keyword operands                                            */\n/*                                                                  */\n/*      DATASET  ==>  the fully-qualified name of the dataset       */\n/*                    you want to edit                              */\n/*                                                                  */\n/********************************************************************/\n\narg dataset\n\nstatus = MSG('OFF')\n\nsubcom ispexec\nif rc\u00ac=0 then\n   do\n     say '@edit rexx exec must be executed under ISPF'\n     exit\n   end\nelse NOP\n\n\"ISPEXEC EDIT DATASET('\"dataset\"')\"\nif rc\u00ac=0 then\n   do\n     say 'ISPF ISPEXEC command failed - RC is' rc\n     exit\n   end\nelse NOP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@IPCSBGN": {"ttr": 1027, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will run IPCS in either INTERACTIVE          */\n/*      or BATCH mode and will allocate a new IPCS VSAM DUMP        */\n/*      DIRECTORY.                                                  */\n/*                                                                  */\n/*      NOTE: You must be outside of ISPF/PDF to run this EXEC!     */\n/*                                                                  */\n/*                                                                  */\n/*      Keyword operands                                            */\n/*                                                                  */\n/*      BATCH  ==>  specify this operand if you want IPCS to        */\n/*                  be run in batch (interactive is default)        */\n/*                                                                  */\n/*      VOLUME ==>  specify volume where IPCS VSAM DUMP DIRECTORY   */\n/*                  is to be allocated                              */\n/*                                                                  */\n/********************************************************************/\narg batch volume\n\nstatus = MSG('OFF')\n\nsubcom ispexec\nif rc=0 then\n   do\n     say '@IPCSBGN rexx exec cannot be executed under ISPF'\n     exit\n   end\nelse NOP\n\nIf volume = '' then volume = 'HB8116'\n\nUSERID = SYSVAR(syspref)\n\n\"DELETE '\"USERID\".DDIR.SVCDUMP' CLUSTER\"\nif rc\u00ac=0 then\n   do\n     say 'DELETE TSO command failed'\n     say 'for IPCS dump directory - RC is' rc\n   end\nelse NOP\n\n\"DELETE '\"USERID\".IPCSPRNT'\"\nif rc\u00ac=0 then\n   do\n     say 'DELETE TSO command failed'\n     say 'for IPCS print dataset - RC is' rc\n   end\nelse NOP\n\n\"ALLOCATE F(IPCSPRNT) DA('\"USERID\".IPCSPRNT')\",\n   \"NEW SPA(5 1) CYL REL REUSE\"\nif rc\u00ac=0 then\n   do\n     say 'ALLOCATE TSO command failed'\n     say 'for IPCS print dataset - RC is' rc\n     exit\n   end\nelse NOP\n\nif batch \u00ac= 'BATCH' then\n   do\n     say '@IPCSBGN rexx exec online execution'\n     say userid'.DDIR.SVCDUMP vsam dump directory will be created'\n     say 'dataset' userid'.IPCSPRNT will be created'\n     CALL IPCSDDR\n     if result > 0 then exit\n     queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                 \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                 \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n     queue \"ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM))\",\n                \"PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\"\n     \"IPCS NOPARM\"\n     exit\n    end\n\nif batch = 'BATCH' then\n   do\n     say '@IPCSBGN rexx exec batch execution'\n     say userid'.DDIR.SVCDUMP vsam dump directory will be created'\n     say 'dataset' userid'.IPCSPRNT will be created'\n     CALL IPCSDDR\n     if result > 0 then exit\n     queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                 \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                 \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n     \"IPCS NOPARM\"\n      exit\n   end\n\n\nIPCSDDR:\n\n\" DEFINE CLUSTER(NAME('\"USERID\".DDIR.SVCDUMP')        \",\n\" VOLUME(\"volume\") INDEXED FREESPACE(10,10) REUSE     \",\n\" IMBED REPLICATE SHAREOPTIONS(1,3))                  \",\n\" INDEX(NAME('\"USERID\".DDIR.SVCDUMP.INDEX')           \",\n\" CYLINDERS(1,1) CISZ(2048))                          \",\n\" DATA(NAME('\"USERID\".DDIR.SVCDUMP.DATA')             \",\n\" CYLINDERS(70,30) CISZ(4096) KEYS(128,0) RECORDSIZE(384 3072))\"\nif rc\u00ac=0 then\n   do\n     say 'DEFINE CLUSTER TSO command failed'\n     say 'for IPCS dump directory - RC is' rc\n     RETURN RC\n     exit\n   end\nelse NOP\n\n\" IPCSDDIR '\"USERID\".DDIR.SVCDUMP'                    \"\nif rc\u00ac=0 then\n   do\n     say 'IPCSDDIR TSO command failed'\n     say 'for IPCS dump directory - RC is' rc\n     RETURN RC\n     exit\n   end\nelse NOP\n\n\" ALLOCATE FILE(IPCSDDIR)                             \",\n\"          DSNAME('\"USERID\".DDIR.SVCDUMP')            \",\n\"          SHR REUSE                                  \"\nif rc\u00ac=0 then\n   do\n     say 'ALLOCATE TSO command failed'\n     say 'for IPCS dump directory - RC is' rc\n     RETURN RC\n     exit\n   end\nelse NOP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@IPCSCUR": {"ttr": 1030, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will run IPCS in either INTERACTIVE          */\n/*      or BATCH mode using the current IPCS VSAM DUMP DIRECTORY    */\n/*      previously allocated.                                       */\n/*                                                                  */\n/*      NOTE: You must be outside of ISPF/PDF to run this EXEC!     */\n/*                                                                  */\n/*                                                                  */\n/*      Keyword operands                                            */\n/*                                                                  */\n/*      BATCH  ==>  specify this operand if you want IPCS to        */\n/*                  be run in batch (interactive is default)        */\n/*                                                                  */\n/********************************************************************/\n\narg batch\n\nstatus = MSG('OFF')\n\nsubcom ispexec\nif rc=0 then\n   do\n     say '@IPCSCUR rexx exec cannot be executed under ISPF'\n     exit\n   end\nelse NOP\n\nUSERID = SYSVAR(syspref)\n\"DELETE '\"USERID\".IPCSPRNT'\"\nif rc\u00ac=0 then\n   do\n     say 'DELETE TSO command failed'\n     say 'for IPCS print dataset - RC is' rc\n   end\nelse NOP\n\n\"ALLOCATE F(IPCSPRNT) DA('\"USERID\".IPCSPRNT')\",\n   \"NEW SPA(5 1) CYL REL REUSE\"\nif rc\u00ac=0 then\n   do\n     say 'ALLOCATE TSO command failed'\n     say 'for IPCS print dataset - RC is' rc\n     exit\n   end\nelse NOP\n\nddir = sysdsn(\"'\"USERID\".DDIR.SVCDUMP'\")\nif ddir = 'DATASET NOT FOUND' then\n   do\n      SAY USERID'.DDIR.SVCDUMP' not found\n      SAY 'Use @IPCSBGN rexx exec for processing'\n      \"%@IPCSTRM\"\n      exit\n   end\n\n\"ALLOC F(IPCSDDIR) DA('\"USERID\".DDIR.SVCDUMP') SHR REUSE\"\nif rc\u00ac=0 then\n   do\n     say 'ALLOCATE TSO command failed'\n     say 'for IPCS dump directory - RC is' rc\n     exit\n   end\nelse NOP\n\nif batch \u00ac= 'BATCH' then\n   do\n     say '@IPCSCUR rexx exec online execution'\n     say 'existing' userid'.DDIR.SVCDUMP',\n         'vsam dump directory allocated'\n     say 'dataset' userid'.IPCSPRNT will be created'\n     queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                 \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                 \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n     queue \"ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM))\",\n                \"PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\"\n     \"IPCS NOPARM\"\n     exit\n    end\n\nif batch = 'BATCH' then\n   do\n     say '@IPCSCUR rexx exec batch execution'\n     say 'existing' userid'.DDIR.SVCDUMP',\n         'vsam dump directory allocated'\n     say 'dataset' userid'.IPCSPRNT will be created'\n     queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                 \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                 \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n     \"IPCS NOPARM\"\n      exit\n   end\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@IPCSDDR": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x02/\\x00\\x93\\x02/\\x13\\x15\\x00\\x06\\x00\\x06\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-01-22T00:00:00", "modifydate": "1993-01-22T13:15:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "SSSTJB0"}, "text": "\n\n  THIS CODE HAS BEEN MOVED TO @IPCSBGN AS AN INTERNALLY CALLED\n  SUBROUTINE.\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@IPCSFUL": {"ttr": 1035, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will take you from IPCS NATIVE TSO/E         */\n/*      LINE MODE and place you into IPCS ISPF FULLSCREEN MODE.     */\n/*                                                                  */\n/*      NOTE: You must be outside of ISPF/PDF to run this EXEC!     */\n/*                                                                  */\n/********************************************************************/\n\n\" ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB \"\nif rc\u00ac=0 then\n   do\n     say 'ISPF command failed'\n     say 'for IPCS fullscreen - RC is' rc\n     exit\n   end\nelse NOP\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@IPCSSAD": {"ttr": 1037, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will run IPCS in either INTERACTIVE          */\n/*      or BATCH mode using an IPCS VSAM DUMP DIRECTORY created     */\n/*      by the IPCSDDR batch job.                                   */\n/*                                                                  */\n/*      NOTE: You must be outside of ISPF/PDF to run this EXEC!     */\n/*                                                                  */\n/*                                                                  */\n/*      Keyword operands                                            */\n/*                                                                  */\n/*      SUFX  ==>  last index name of your sequential dump          */\n/*                 dataset for the stand-alone dump                 */\n/*                                                                  */\n/*      BATCH  ==>  specify this operand if you want IPCS to        */\n/*                  be run in batch (interactive is default)        */\n/*                                                                  */\n/********************************************************************/\n\narg sufx batch\n\nstatus = MSG('OFF')\n\nsubcom ispexec\nif rc=0 then\n   do\n     say '@IPCSSAD rexx exec cannot be executed under ISPF'\n     exit\n   end\nelse NOP\n\nUSERID = SYSVAR(syspref)\n\n\"DELETE '\"USERID\".IPCSPRNT'\"\nif rc\u00ac=0 then\n   do\n     say 'DELETE TSO command failed'\n     say 'for IPCS print dataset - RC is' rc\n   end\nelse NOP\n\n\"ALLOCATE F(IPCSPRNT) DA('\"USERID\".IPCSPRNT')\",\n   \"NEW SPA(5 1) CYL REL REUSE\"\nif rc\u00ac=0 then\n   do\n     say 'ALLOCATE TSO command failed'\n     say 'for IPCS print dataset - RC is' rc\n     exit\n   end\nelse NOP\n\nddir = sysdsn(\"'\"USERID\".DDIR.SADUMP.\"sufx\"'\")\nif ddir = 'DATASET NOT FOUND' then\n   do\n      SAY USERID'.DDIR.SADUMP.'sufx NOT FOUND\n      \"%@IPCSTRM\"\n      exit\n   end\n\n\"ALLOCATE F(IPCSDDIR) DA('\"USERID\".DDIR.SADUMP.\"sufx\"') SHR REUSE\"\nif rc\u00ac=0 then\n   do\n     say 'ALLOCATE TSO command failed'\n     say 'for IPCS dump directory - RC is' rc\n     exit\n   end\nelse NOP\n\n\nif batch \u00ac= 'BATCH' then\n do\n   say '@IPCSSAD rexx exec online execution'\n   say 'existing' userid'.DDIR.SADUMP.'sufx,\n       'vsam dump directory allocated'\n   say 'dataset' userid'.IPCSPRNT will be created'\n   queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n               \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n               \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n   queue \"ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM))\",\n              \"PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\"\n   \"IPCS NOPARM\"\n   exit\n  end\n\nif batch = 'BATCH' then\n do\n   say '@IPCSSAD rexx exec batch execution'\n   say 'existing' userid'.DDIR.SADUMP.'sufx,\n       'vsam dump directory allocated'\n   say 'dataset' userid'.IPCSPRNT will be created'\n   queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n               \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n               \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n   \"IPCS NOPARM\"\n    exit\n end\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@IPCSTRM": {"ttr": 1040, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will perform IPCS termination under          */\n/*      native TSO/E mode.                                          */\n/*                                                                  */\n/*                                                                  */\n/*      NOTE: You must be outside of ISPF/PDF to run this EXEC!     */\n/*                                                                  */\n/********************************************************************/\n\nstatus = MSG('OFF')\n\nsubcom ispexec\nif rc=0 then\n   do\n     say '@IPCSTRM rexx exec cannot be executed under ISPF'\n     exit\n   end\nelse NOP\n\nqueue \"END\"\nqueue \"FREE F(IPCSDDIR,IPCSPRNT)\"\n\nSAY 'IPCS termination and cleanup complete'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@UTILITY": {"ttr": 1042, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/**************************** REXX **********************************/\n/*                                                                  */\n/*      This REXX EXEC will place the user into ISPF utility.       */\n/*                                                                  */\n/*      NOTE: You must be under IPCS/ISPF to run this EXEC!         */\n/*                                                                  */\n/********************************************************************/\n\nstatus = MSG('OFF')\n\nsubcom ispexec\nif rc\u00ac=0 then\n   do\n     say '@UTILITY rexx exec must be executed under ISPF'\n     exit\n   end\nelse NOP\n\n\"ISPEXEC SELECT PANEL(ISRUTIL)\"\nif rc\u00ac=0 then\n   do\n     say 'ISPF ISPEXEC SELECT PANEL command failed - RC is' rc\n     exit\n   end\nelse NOP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IPCS1ART": {"ttr": 1044, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x01\\x9f\\x00\\x94\\x01\\x9f\\x12X\\x05h\\x05h\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-01-19T00:00:00", "modifydate": "1994-01-19T12:58:00", "lines": 1384, "newlines": 1384, "modlines": 0, "user": "SSSTJB0"}, "text": "1\n\n         Getting Started Using IPCS/ESA                      Page #1\n\n\n         Need to use IPCS under ESA to look at storage dumps?\n         Don't know where to start?  I know exactly how you feel.\n         I was once a novice IPCS user.  I would just try anything\n         and hope for the best.  Through the years, I have gathered\n         a great deal of information on IPCS initialization and\n         practical usage.  This article is the first of (I hope)\n         many articles on IPCS.\n\n\n         This article was based on a session entitled PRACTICAL\n         IPCS/ESA DUMP ANALYSIS I gave at Nastec 5.0. in\n         Orlando at the end of March 1993.\n\n\n         I will introduce you to IPCS under\n         MVS/ESA and the IPCS REXX EXECs I use to run IPCS\n         effortlessly in both batch and interactive modes.\n\n\n         The name IPCS stands for Interactive Problem Control\n         System.  This name is misleading since the main\n         purpose of IPCS is to allow the user to interactively\n         view and interrogate unformatted dumps.\n\n\n         IPCS can process:\n\n\n         1) SVCDUMP       This storage dump is taken by the operating\n                          system when it detects a condition which\n                          would degrade or destroy data.\n\n         2) STAND-ALONE   The operator will initiate this storage\n                          dump which contains as many swapped-in\n                          address spaces as possible.\n\n         3) SYSMDUMP      This is an unformatted application storage\n                          dump specified by the SYSMDUMP dd statement.\n\n         4) GTF TRACE     This is not storage dump information but\n                          rather the storage buffers holding current\n                          GTF TRACE data which IPCS will format\n                          with the GTFTRACE command.  This command\n                          will also format external GTF trace data\n                          (specification of MODE=EXTERNAL on the\n                          GTF trace).\n\n         5) LIVE STORAGE  You have the option to use IPCS to inspect\n                          your current address space (unfortunately\n                          not other address spaces) in a limited\n                          way.  One of these big limitations is\n                          the IPCS WHERE command not supported\n                          for live storage analysis.\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #2\n\n\n         The problem control portion of IPCS for the most part has\n         been superceded by products such as IBM's Information/Managemen\n         (INFO/MGMT) and other non-IBM problem management software.\n\n\n         IPCS originally started out as a Virtual Machine (VM) product\n         and came over to the MVS operating system in the middle 1970s.\n         I discovered IPCS sometime in 1983 from a very\n         enthusiastic IBM PSR (if you remember these people\n         you just may be considered an old-timer in this business).\n         After spending some time struggling with the product,\n         I found it very exciting that I could perform dump\n         analysis right after the SYS1.DUMP?? dataset was filled\n         and isolate the failing component while my associates\n         were waiting for their PRINT DUMP (AMDPRDMP) printouts.\n         Be aware that in the MVS/ESA world, IT IS MANDATORY\n+                                            ________________\n         TO USE IPCS TO PERFORM DUMP ANALYSIS.  Do not worry,\n+        _____________________________________\n         once you get used to IPCS you will wonder why you\n         did it any other way.\n\n\n         This article is not intended to be a diagnostic techniques\n         discussion but rather a fastpath method to get\n         IPCS up and working for you.\n\n\n         ATTENTION: ALL JCL STATEMENTS AND REXX EXAMPLES ARE PRESENTED\n                    WITH NO WARRANTY EXPRESSED OR IMPLIED.  I WILL DO\n                    MY BEST TO ANSWER INQUIRIES ON THESE PROCEDURES.\n\n         Author's note:  These are the first IPCS REXX EXEXs I have\n                         written.  It isn't that hard to convert\n                         CLISTS to REXX EXECs so lets do it!\n\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #3\n\n\n         I will begin by covering the most common storage dumps which\n         are SVCDUMPS.  Your first step is to get\n         SVCDUMP from tape to dasd.\n\n         Check to see if your installation uses the IPCS\n         COPYDUMP command to put SYS1.DUMP?? datasets to\n         tape.  The IPCS COPYDUMP will create and output tape\n         blocksize of 32760 (32K).\n\n         If the LRECL and BLKSIZE on your dump tape ARE NOT\n         4160, then YOU MUST USE THE IPCS COPYDUMP command to\n         load the SVCDUMP to DASD.\n         (see a sample job in FIGURE #1).\n\n\n         FIGURE #1\n+        _________\n\n         //****************************************************//\n         //*                                                  *//\n         //*  THE IPCS VSAM DUMP DIRECTORY IS ALLOCATED BY    *//\n         //*  THE IPCSDDIR DD STATEMENT                       *//\n         //*                                                  *//\n         //*  THIS PERMANENT IPCS VSAM DUMP DIRECTORY IS      *//\n         //*  NEVER OPENED BY THE COPYDUMP COMMAND BUT        *//\n         //*  IS STILL NEEDED BY IT (SO MAKE IT VERY SMALL).  *//\n         //*                                                  *//\n         //*  IPCSDDIR DD STATEMENT ===>  THIS IS YOUR        *//\n         //*                              PERMANENT IPCS VSAM *//\n         //*                              DUMP DIRECTORY      *//\n         //*                              FOR COPYDUMP USAGE  *//\n         //*                              ONLY.               *//\n         //*                                                  *//\n         //*                              NOTE: MAKE THIS     *//\n         //*                                    DATASET VERY  *//\n         //*                                    SMALL SINCE   *//\n         //*                                    IT IS NEVER   *//\n         //*                                    OPENED!       *//\n         //*                                                  *//\n         //*  IPCSPRNT DD STATEMENT ===>  YOUR OUTPUT FOR ANY *//\n         //*                              IPCS PRINT OPERATION*//\n         //*                              GOES HERE.          *//\n         //*                                                  *//\n         //*  SYSUT1 DD STATEMENT   ===>  THIS IS THE INPUT   *//\n         //*                              SEQUENTIAL DUMP ON  *//\n         //*                              TAPE.               *//\n         //*                                                  *//\n         //*  SYSUT2 DD STATEMENT   ===>  THIS WILL BE YOUR   *//\n         //*                              YOUR SEQUENTIAL DUMP*//\n         //*                              DATASET ON DASD.    *//\n         //****************************************************//\n1\n\n         Getting Started Using IPCS/ESA                      Page #4\n\n\n\n         FIGURE #1   (CONTINUED)\n+        _________\n\n         //CPYDUMP EXEC PGM=IKJEFT01,\n         // DYNAMNBR=75,REGION=5M,TIME=1439\n         //SYSTSPRT  DD SYSOUT=*\n         //SYSUDUMP  DD SYSOUT=*\n         //SYSOUT    DD SYSOUT=*\n         //SYSPRINT  DD SYSOUT=*\n         //IPCSDDIR  DD DSN=YOUR.PERM.IPCS.DUMP.DIR,\n         // DISP=SHR\n         //IPCSPRNT  DD SYSOUT=*\n         //SYSUT1    DD DSN=YOUR.ARCHIVE.DUMP.TAPE,\n         // DISP=SHR\n         //SYSUT2    DD DSN=YOUR.OUTPUT.DASD.DUMP,\n         // UNIT=SYSDA,\n         // SPACE=(CYL,(50,20),RLSE),\n         // DISP=(,CATLG,DELETE)\n         //SYSTSIN  DD  *\n         IPCS NOPARM\n         SETDEF FLAG(ERROR) NOCONFIRM NOVERIFY\n         COPYDUMP OFILE(SYSUT2) INFILE(SYSUT1)\n         /*\n\n\n         If the tape dataset DCB attributes are LRECL=4160,\n         BLKSIZE=4160,RECFM=F then all you have to do is\n         use IEBGENER to load the dump tape to DASD or\n         just copy it from the SYS1.DUMP?? dataset.\n\n\n         After this copy is complete we are ready to enter IPCS.\n         In the past, IPCS had to be initialized BEFORE\n         ISPF WHICH WAS A ROYAL PAIN.  GOOD NEWS! AS OF MVS/ESA\n         RELEASE 4.3.0. ISPF CAN BE INITIALIZED AHEAD OF IPCS.\n         When this time comes at our shop, all of these\n         procedures will be revisited and streamlined.\n         At our installation I have elected to enter\n         IPCS from the TSO READY state using the BLSGLIBD\n         IPCS program (that issues ISPF LIBDEFs) instead of\n         creating a user panel entry in the ISPF primary\n         option menu.  The advantage of this method is I do not\n         have to carry around the IPCS storage task overhead\n         for all of my NON-IPCS work.  In addition, I can\n         reorganize the IPCS VSAM DUMP directory any time I\n         want to without the extra allocation/deallocation overhead.\n\n         The disadvantage is\n         that I cannot split screen to a normal ISPF/PDF environment.\n         This problem can be corrected by the development\n         of a few very trivial IPCS REXX EXECs that will\n         place you into the commonly-used facilities of\n         ISPF BROWSE, EDIT or UTILITY (which\n         I will cover later in this article).\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #5\n\n\n\n         The files that are allocated by the\n         ISPF LIBDEF IPCS PROGRAM (BLSGLIBD)\n         via ISPF LIBDEF processing are:\n\n\n         DDNAME        DATASET NAME      DESCRIPTION\n         _______       _____________     ____________________\n\n         ISPSLIB       SYS1.SBLSKEL0     IPCS SKELETON LIBRARY\n         ISPMLIB       SYS1.SBLSMSG0     IPCS MESSAGE LIBRARY\n         ISPPLIB       SYS1.SBLSPNL0     IPCS PANEL LIBRARY\n         ISPTLIB       SYS1.SBLSTBL0     IPCS TABLE LIBRARY\n\n\n         I do not allocate SYS1.SLBSCLI0 in my SYSPROC\n         allocation since I only use IBM IPCS COMMANDS (OPTION 4)\n         dialog.\n\n         You will need this SYSPROC concatentation if you\n         wish to use the canned IPCS facilities in IPCS ISPF\n         OPTION 2 (ANALYSIS).\n\n\n         If you elect to invoke IPCS the way I do,  I would\n         recommend that you copy all the following members:\n\n\n         BLSGCMDS  -  USED IN IPCS LIST COMMAND\n\n         BLSLCMDS  -  USED IN IPCS BROWSE DIALOG\n\n\n         from the IPCS table library SYS1.SBLSTBL0 to your\n         IPCS input table library defined by the ISPTLIB\n         dd statement.  If you do not do this:\n\n\n         1) THE LIST COMMAND IN THE IPCS DIALOG WILL NOT WORK.\n\n            The LIST command will be passed to ISPF that will\n            invoke the LIST command for ISPF LOG/LIST dataset\n            manipulation and fail.\n\n            If you abbreviate the IPCS LIST command as \"L\" then\n            the IPCS LIST command will work due to the\n            shortened name being different from the name \"LIST\".\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #6\n\n\n\n         2) THE RFIND COMMAND IN THE IPCS DIALOG WILL NOT WORK.\n\n\n         3) You will only be able to use the IPCS xxxxxxxx COMMAND\n            in the dump reporter display panel of the Option 1 BROWSE\n            IPCS dialog.\n\n\n         The main point to using my installation-\n         developed REXX EXECS are that these rexx execs are straight-\n         forward.  I would encourage the reader to add (or remove)\n         code for his/her benefit and the benefit of learning\n         REXX.  These REXX EXECS have served me very well just as you\n         see them.\n\n\n         TODAY IS 01/22/93 AND I JUST BECAME AWARE OF AN IBM\n         REXX EXEC DESIGN RESTRICTION THAT WILL NOT ALLOW THE\n         REXX EXECS TO BE RUN IN BATCH TSO.  IBM LEVEL 2 STATED\n         THIS WAS A FUTURE SHARE REQUIREMENT.  IF YOU NEED TO\n         RUN IPCS IN BATCH PLESE USE THE CORRESPONDING IPCS\n         CLIST (THEY BEGIN WITH A #) ON THE NASPA VIP TAPE\n         OR THE CBT TAPE.          TOM BRYANT\n\n         I will introduce various rexx execs and batch jobs\n         to perform ipcs analysis.  the rexx execs are:\n\n\n         IPCS REXX\n         EXECS            DESCRIPTION\n         _____________    ___________________________________________\n\n         @IPCSBGN         REXX EXEC TO CREATE NEW DUMP DIRECTORY\n                          AND INVOKE IPCS.  THIS WOULD BE THE FIRST\n                          REXX EXEC YOU WOULD INVOKE.  IN THE FUTURE\n                          YOU WOULD USE THE @IPCSCUR REXX EXEC.\n\n         @IPCSCUR         REXX EXEC TO USE EXISTING DUMP DIRECTORY\n                          CREATED FROM THE @IPCSBGN REXX EXEC.\n\n         @BROWSE          REXX EXEC TO DO ISPF/PDF BROWSE FUNCTION\n\n         @EDIT            REXX EXEC TO ENTER ISPF/PDF EDIT\n\n         @IPCSSAD         REXX EXEC TO USE EXISTING SADUMP DUMP DIRECTOR\n                          THE IPCS VSAM DUMP DIRECTORY IS BUILT BY A\n                          SEPARATE BATCH JOB RUN FIRST.\n\n         @IPCSTRM         REXX EXEC TO TERMINATE IPCS\n\n\n         If we are a first time IPCS user or just need to allocate\n         a new IPCS VSAM DUMP directory, we should execute the\n         @IPCSBGN command in a TSO ready state or in batch TSO\n         (see Figure #2).\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #7\n\n\n\n         FIGURE #2         @IPCSBGN\n+        _________         ________\n\n\n         /**************************** REXX ****************************\n         /*\n         /*      This REXX EXEC will run IPCS in either INTERACTIVE\n         /*      or BATCH mode and will allocate a new IPCS VSAM DUMP\n         /*      DIRECTORY.\n         /*\n         /*      NOTE: You must be outside of ISPF/PDF to run this EXEC!\n         /*\n         /*\n         /*      Keyword operands\n         /*\n         /*      BATCH  ==>  specify this operand if you want IPCS to\n         /*                  be run in batch (interactive is default)\n         /*\n         /*      VOLUME ==>  specify volume where IPCS VSAM DUMP DIRECTO\n         /*                  is to be allocated\n         /*\n         /**************************************************************\n         arg batch volume\n\n         status = MSG('OFF')\n\n         subcom ispexec\n         if rc=0 then\n            do\n              say '@IPCSBGN rexx exec cannot be executed under ISPF'\n              exit\n            end\n         else NOP\n\n         If volume = '' then volume = '123456'\n\n         USERID = SYSVAR(syspref)\n\n         \"DELETE '\"USERID\".DDIR.SVCDUMP' CLUSTER\"\n         if rc\u00eb=0 then\n            do\n              say 'DELETE TSO command failed'\n              say 'for IPCS dump directory - RC is' rc\n            end\n         else NOP\n\n1\n\n\n         Getting Started Using IPCS/ESA                      Page #8\n\n\n\n         FIGURE #2         @IPCSBGN   (CONTINUED)\n+        _________         ________\n\n\n         \"DELETE '\"USERID\".IPCSPRNT'\"\n         if rc\u00eb=0 then\n            do\n              say 'DELETE TSO command failed'\n              say 'for IPCS print dataset - RC is' rc\n            end\n         else NOP\n\n         \"ALLOCATE F(IPCSPRNT) DA('\"USERID\".IPCSPRNT')\",\n            \"NEW SPA(5 1) CYL REL REUSE\"\n         if rc\u00eb=0 then\n            do\n              say 'ALLOCATE TSO command failed'\n              say 'for IPCS print dataset - RC is' rc\n              exit\n            end\n         else NOP\n\n         if batch \u00eb= 'BATCH' then\n            do\n              say '@IPCSBGN rexx exec online execution'\n              say userid'.DDIR.SVCDUMP vsam dump directory will be creat\n              say 'dataset' userid'.IPCSPRNT will be created'\n              CALL IPCSDDR\n              if result > 0 then exit\n              queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                          \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                          \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n              queue \"ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM))\",\n                         \"PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\"\n              \"IPCS NOPARM\"\n              exit\n             end\n\n1\n\n\n         Getting Started Using IPCS/ESA                      Page #9\n\n\n\n         FIGURE #2         @IPCSBGN   (CONTINUED)\n+        _________         ________\n\n\n         if batch = 'BATCH' then\n            do\n              say '@IPCSBGN rexx exec batch execution'\n              say userid'.DDIR.SVCDUMP vsam dump directory will be creat\n              say 'dataset' userid'.IPCSPRNT will be created'\n              CALL IPCSDDR\n              if result > 0 then exit\n              queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                          \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                          \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n              \"IPCS NOPARM\"\n               exit\n            end\n\n\n         IPCSDDR:\n\n         \" DEFINE CLUSTER(NAME('\"USERID\".DDIR.SVCDUMP')        \",\n         \" VOLUME(\"volume\") INDEXED FREESPACE(10,10) REUSE     \",\n         \" IMBED REPLICATE SHAREOPTIONS(1,3))                  \",\n         \" INDEX(NAME('\"USERID\".DDIR.SVCDUMP.INDEX')           \",\n         \" CYLINDERS(1,1) CISZ(4096))                          \",\n         \" DATA(NAME('\"USERID\".DDIR.SVCDUMP.DATA')             \",\n         \" CYLINDERS(70,30) CISZ(4096) KEYS(128,0) RECORDSIZE(384 3072))\n         if rc\u00eb=0 then\n            do\n              say 'DEFINE CLUSTER TSO command failed'\n              say 'for IPCS dump directory - RC is' rc\n              RETURN RC\n              exit\n            end\n         else NOP\n\n1\n\n\n         Getting Started Using IPCS/ESA                      Page #10\n\n\n\n         FIGURE #2         @IPCSBGN   (CONTINUED)\n+        _________         ________\n\n\n         \" IPCSDDIR '\"USERID\".DDIR.SVCDUMP'                    \"\n         if rc\u00eb=0 then\n            do\n              say 'IPCSDDIR TSO command failed'\n              say 'for IPCS dump directory - RC is' rc\n              RETURN RC\n              exit\n            end\n         else NOP\n\n         \" ALLOCATE FILE(IPCSDDIR)                             \",\n         \"          DSNAME('\"USERID\".DDIR.SVCDUMP')            \",\n         \"          SHR REUSE                                  \"\n         if rc\u00eb=0 then\n            do\n              say 'ALLOCATE TSO command failed'\n              say 'for IPCS dump directory - RC is' rc\n              RETURN RC\n              exit\n            end\n         else NOP\n\n\n         WHAT @IPCSBGN DOES\n+        __________________\n\n\n         1) I make sure we are not running under ISPF\n            when I invoke the @IPCSBGN rexx exec.  The previous\n            IPCS COPYDUMP procedure to load down dumps from\n            tape can be run AT THE SAME TIME as this rexx\n            exec since they use different IPCS VSAM dump\n            directories.  This will allow you to load a dump\n            to dasd while viewing another.\n\n\n         2) The @IPCSBGN rexx exec will delete any existing dump\n            dataset of the name 'userid.DDIR.SVCDUMP' and any\n            existing dataset of 'userid.IPCSPRNT' used for\n            IPCS output directed to PRINT.\n\n            The use of the REXX OUTTRAP will prevent the TSO\n            DELETE messages from going to your terminal screen!\n\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #11\n\n\n\n         3) If IPCS is to be run in BATCH via the batch rexx arg\n            statement, then I inform the user that a new IPCS VSAM\n            DUMP DIRECTORY and IPCS PRINT dataset will be allocated\n            and then invoke the REXX internal subroutine IPCSDDR\n            which performs my IPCS VSAM DUMP DIRECTORY allocations.\n            The rexx QUEUE command will pass this string to the\n            IPCS TSO command processor to issue these SETDEF\n            commands and issue IPCS with the NOPARM parameter\n            (which means for dump analysis only).\n\n\n         4) If IPCS is to be run in a foreground TSO environment\n            the only addition to the above item #3 is the final\n            rexx queue command that passes the ISPF command to IPCS.\n            This program name is BLSGLIBD (probably LIBD for LIBDEF)\n            and will display the IPCS primary option menu BLSPPRIM\n            at IPCS/ISPF initialization time.\n\n\n         5) I have selected my IPCS session defaults (IPCS SETDEF\n            command) as follows:\n\n\n            LENGTH(200)        - I want 200 bytes displayed for any\n                                 list-oriented command\n\n                                 I have found through experience\n                                 that 200 is a good number.\n                                 Remember that the IPCS default\n                                 is just 4 bytes displayed!\n\n            FLAG(ERROR)        - Give me all ERROR messages such as\n                                 invalid control blocks but not\n                                 informational and warning messages\n\n            DISPLAY(MACHINE,   - Display ASID, virtual address and stora\n                    REMARK,    - ** DEFAULT VALUE **\n                    REQUEST,   - ** DEFAULT VALUE **\n                    STORAGE,   - Make storage look like printed dump\n                    SYMBOL)    - ** DEFAULT VALUE **\n\n            NOVERIFY           - Always use the TERMINAL/NOTERMINAL\n                                 and PRINT/NOPRINT specified in the\n                                 previous SETDEF command (you can\n                                 override in most individual IPCS\n                                 commands).\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #12\n\n\n\n            NOCONFIRM          - Set IPCS default reply to \"Y\"\n\n                                 This will reply \"Y\" internally\n                                 to the following message using\n                                 the COPYDUMP command:\n\n                                 BLS18168D PROCEED WITH COPY\n                                           ENTER Y TO CONTINUE,\n                                           N TO TERMINATE\n\n\n                                 This will reply \"Y\" internally\n                                 to the following message seen at\n                                 dump initialization:\n\n                                 BLS18160D MAY SUMMARY DATA BE\n                                           USED BY DUMP ACCESS\n                                           ENTER Y TO USE,\n                                           N TO BYPASS\n\n                                 For the most situations, you ALWAYS\n                                 want the summary dump data\n                                 captured closest to the time\n                                 of the failure!\n1\n\n         Getting Started Using IPCS/ESA                      Page #13\n\n\n\n         The IBM-shipped BLSCDDIR clist in SYS1.SBLSCLI0 dataset\n         does not optimize IPCS VSAM DUMP directory processing\n         in any way.  I have added IMBED and REPLICATE to reduce\n         I/O operations.  The biggest performance improvement was\n         the addition of FREESPACE(10 10) to reserve freespace in\n         the control areas and control intervals. IPCS creates\n         many symbol equates (VSAM updates) in normal processing\n         which can cause control interval and control area splits.\n         I HAVE SINCE MADE ONE OTHER CHANGE RECOMMENDED BY GUY\n         BRUNI (NASTEC 5.0. VSAM SPEAKER) TO CHANGE THE INDEX\n         CISIZE FROM 2048 TO 4096.  THIS WORKS VERY WELL IF YOU\n         ARE HEAVILY=USING IPCS.\n\n\n         Since we cannot effectively split-screen to NON-IPCS ISPF\n         using this IPCS/ISPF LIBDEF methodology, I wrote a few\n         very simple rexx execs that will handle the common\n         functions of ISPF BROWSE, EDIT and UTILITY.  To execute\n         these REXX EXECS simply key in TSO %???????? (where ????????\n         is the rexx exec) at the IPCS command line. Remember that\n         the percent (%) sign will search only SYSPROC/SYSEXEC\n         which should improve performance.\n\n\n         ISPF for the particular function is simply invoked\n         via ISPEXEC interface (see Figures #4 through #6):\n\n\n         FIGURE #4         @BROWSE\n+        _________         _______\n\n\n         /**************************** REXX ****************************\n         /*\n         /*      This REXX EXEC will place the user into ISPF BROWSE.\n         /*\n         /*      NOTE: You must be under IPCS/ISPF to run this EXEC!\n         /*\n         /*      Keyword operands\n         /*\n         /*      DATASET  ==>  the fully-qualified name of the dataset\n         /*                    you want to browse\n         /*\n         /**************************************************************\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #14\n\n\n         FIGURE #4         @BROWSE    (CONTINUED)\n+        _________         _______\n\n\n         arg dataset\n\n         status = MSG('OFF')\n\n         subcom ispexec\n         if rc\u00eb=0 then\n            do\n              say '@BROWSE rexx exec must be executed under ISPF'\n              exit\n            end\n         else NOP\n\n         \"ISPEXEC BROWSE DATASET('\"dataset\"')\"\n         if rc\u00eb=0 then\n            do\n              say 'ISPF ISPEXEC BROWSE command failed - RC is' rc\n              exit\n            end\n         else NOP\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #15\n\n\n\n\n         FIGURE #5         @EDIT\n+        _________         _____\n\n\n         /**************************** REXX ****************************\n         /*\n         /*      This REXX EXEC will place the user into ISPF EDIT.\n         /*\n         /*      NOTE: You must be under IPCS/ISPF to run this EXEC!\n         /*\n         /*      Keyword operands\n         /*\n         /*      DATASET  ==>  the fully-qualified name of the dataset\n         /*                    you want to edit\n         /*\n         /**************************************************************\n\n         arg dataset\n\n         status = MSG('OFF')\n\n         subcom ispexec\n         if rc\u00eb=0 then\n            do\n              say '@edit rexx exec must be executed under ISPF'\n              exit\n            end\n         else NOP\n\n         \"ISPEXEC EDIT DATASET('\"dataset\"')\"\n         if rc\u00eb=0 then\n            do\n              say 'ISPF ISPEXEC command failed - RC is' rc\n              exit\n            end\n         else NOP\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #16\n\n\n\n\n         FIGURE #6         @UTILITY\n+        _________         ________\n\n\n         /**************************** REXX ****************************\n         /*\n         /*      This REXX EXEC will place the user into ISPF utility.\n         /*\n         /*      NOTE: You must be under IPCS/ISPF to run this EXEC!\n         /*\n         /**************************************************************\n\n         status = MSG('OFF')\n\n         subcom ispexec\n         if rc\u00eb=0 then\n            do\n              say '@UTILITY rexx exec must be executed under ISPF'\n              exit\n            end\n         else NOP\n\n         \"ISPEXEC SELECT PANEL(ISRUTIL)\"\n         if rc\u00eb=0 then\n            do\n              say 'ISPF ISPEXEC SELECT PANEL command failed - RC is' rc\n              exit\n            end\n         else NOP\n\n\n\n         If you use the IBM Syslog Display and Search Facility (SDSF)\n         (via TSO SDSF command at the IPCS command line)\n         be aware that you will have to reestablish your session\n         prefix (such as PREFIX userid) since your prefix is\n         defaulted to NONE while using SDSF under IPCS.  This\n         phenomenon happens because IPCS/ISPF was brought up\n         under a new ISPF application identifier (NEWAPPL)\n         of BLSG.\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #17\n\n\n\n         Our discussion of SVCDUMP would not be complete without\n         showing how we exit IPCS (see Figure #7):\n\n\n         FIGURE #7         @IPCSTRM\n+        _________         ________\n\n\n         /**************************** REXX ****************************\n         /*\n         /*      This REXX EXEC will perform IPCS termination under\n         /*      native TSO/E mode.\n         /*\n         /*\n         /*      NOTE: You must be outside of ISPF/PDF to run this EXEC!\n         /*\n         /**************************************************************\n\n         status = MSG('OFF')\n\n         subcom ispexec\n         if rc=0 then\n            do\n              say '@IPCSTRM rexx exec cannot be executed under ISPF'\n              exit\n            end\n         else NOP\n\n         queue \"END\"\n         queue \"FREE F(IPCSDDIR,IPCSPRNT)\"\n\n         SAY 'IPCS termination and cleanup complete'\n\n\n         SOME @IPCSTRM NOTES\n+        ___________________\n\n         You must use the REXX QUEUE command to pass this commands\n         to TSO to be executed after the REXX EXEC terminates.\n         To date, I have not found a way to suppress the FILE\n         IPCSDDIR NOT FREED, IS NOT ALLOCATED message!\n\n         I don't bother to check return codes for the END and\n         FREE commands since this action should be straightforward!\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #18\n\n\n         For the majority of IPCS usage, you will be working\n         with an existing IPCS VSAM DUMP directory.  For these\n         times you will use the @IPCSCUR rexx exec.  This\n         rexx exec is very similar to @IPCSBGN so I won't separately\n         explain it here (read the internal comments for\n         more information in Figure #8):\n\n\n         FIGURE #8         @IPCSCUR\n+        _________         ________\n\n\n         /**************************** REXX ****************************\n         /*\n         /*      This REXX EXEC will run IPCS in either INTERACTIVE\n         /*      or BATCH mode using the current IPCS VSAM DUMP DIRECTOR\n         /*      previously allocated.\n         /*\n         /*      NOTE: You must be outside of ISPF/PDF to run this EXEC!\n         /*\n         /*\n         /*      Keyword operands\n         /*\n         /*      BATCH  ==>  specify this operand if you want IPCS to\n         /*                  be run in batch (interactive is default)\n         /*\n         /**************************************************************\n\n         arg batch\n\n         status = MSG('OFF')\n\n         subcom ispexec\n         if rc=0 then\n            do\n              say '@IPCSCUR rexx exec cannot be executed under ISPF'\n              exit\n            end\n         else NOP\n\n         USERID = SYSVAR(syspref)\n         savelne = OUTTRAP(outlne,1)\n1\n\n         Getting Started Using IPCS/ESA                      Page #19\n\n\n         FIGURE #8         @IPCSCUR   (CONTINUED)\n+        _________         ________\n\n\n         \"DELETE '\"USERID\".IPCSPRNT'\"\n         if rc\u00eb=0 then\n            do\n              say 'DELETE TSO command failed'\n              say 'for IPCS print dataset - RC is' rc\n            end\n         else NOP\n\n         \"ALLOCATE F(IPCSPRNT) DA('\"USERID\".IPCSPRNT')\",\n            \"NEW SPA(5 1) CYL REL REUSE\"\n         if rc\u00eb=0 then\n            do\n              say 'ALLOCATE TSO command failed'\n              say 'for IPCS print dataset - RC is' rc\n              exit\n            end\n         else NOP\n\n         ddir = sysdsn(\"'\"USERID\".DDIR.SVCDUMP'\")\n         if ddir = 'DATASET NOT FOUND' then\n            do\n               SAY USERID'.DDIR.SVCDUMP' not found\n               SAY 'Use @IPCSBGN rexx exec for processing'\n               \"%@IPCSTRM\"\n               exit\n            end\n\n         \"ALLOC F(IPCSDDIR) DA('\"USERID\".DDIR.SVCDUMP') SHR REUSE\"\n         if rc\u00eb=0 then\n            do\n              say 'ALLOCATE TSO command failed'\n              say 'for IPCS dump directory - RC is' rc\n              exit\n            end\n         else NOP\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #20\n\n\n         FIGURE #8         @IPCSCUR   (CONTINUED)\n+        _________         ________\n\n\n         if batch \u00eb= 'BATCH' then\n            do\n              say '@IPCSCUR rexx exec online execution'\n              say 'existing' userid'.DDIR.SVCDUMP',\n                  'vsam dump directory allocated'\n              say 'dataset' userid'.IPCSPRNT will be created'\n              queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                          \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                          \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n              queue \"ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM))\",\n                         \"PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\"\n              \"IPCS NOPARM\"\n              exit\n             end\n\n         if batch = 'BATCH' then\n            do\n              say '@IPCSCUR rexx exec batch execution'\n              say 'existing' userid'.DDIR.SVCDUMP',\n                  'vsam dump directory allocated'\n              say 'dataset' userid'.IPCSPRNT will be created'\n              queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                          \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                          \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n              \"IPCS NOPARM\"\n               exit\n            end\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #21\n\n\n\n         I have included a sample job showing how to run IPCS\n         in batch tso to prime the IPCS VSAM DUMP directory\n         before you perform later IPCS interactive analysis\n         (see Figure #9).  This is done for performance reasons!\n\n         Note: You can only have one user of either @IPCSBGN\n               or @IPCSCUR at a time due to the same named\n               IPCS VSAM DUMP directory\n\n\n         FIGURE #9         PROCESS SVCDUMP USING IPCS IN BATCH\n+        _________         ___________________________________\n\n\n         //USERIDX JOB acct-info,'IPCSJOB',CLASS=A,\n         // MSGCLASS=X,NOTIFY=USERID,TYPRUN=HOLD\n         /*JOBPARM ROOM=3004\n         //IPCSJOB EXEC  PGM=IKJEFT01,\n         // DYNAMNBR=75,REGION=5M,TIME=1439\n         //SYSPROC   DD  DSN=USERID.CLIST,DISP=SHR\n         //SYSTSPRT  DD  SYSOUT=*\n         //SYSTSIN   DD  *\n         PROFILE PREFIX(USERID)\n         DELETE OUTDSN\n         %@IPCSCUR BATCH\n         SETDEF NOTERMINAL PRINT\n         SETDEF DSNAME('USERID.SVCDUMP.NO1')\n         STATUS FAILDATA REGISTERS\n         LISTDUMP\n         %@IPCSTRM\n         RENAME IPCSPRNT OUTDSN\n         /*\n\n\n         An additional IPCS SETDEF command is issued after the\n         %@IPCSCUR command to show that we are changing SETDEF\n         defaults to run in batch TSO.  You could also change\n         the IPCS SETDEF defaults in the @IPCSCUR (and/or %@IPCSBGN)\n         rexx execs for the BATCH option.  The choice is yours.\n\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #22\n\n\n\n        I want to introduce a few last procedures to be used for\n        looking at stand-alone dumps.  Due to the very large size of\n        stand-alone dumps on dasd (and many DB2 SVCDUMPs for\n        that matter), I run a special batch job to prime the\n        newly-allocated IPCS VSAM DUMP directory for performance\n        reasons (see comments in Figure #11).  Before you run this\n        this job, run the job in Figure #10 FIRST!\n\n\n\n         FIGURE #10        COPY STAND-ALONE DUMP\n+        __________        _____________________\n\n                           FROM TAPE TO DASD\n+                          _________________\n\n         //USERIDL JOB acct-info,'IPCSDMP',CLASS=A,\n         // MSGCLASS=X,NOTIFY=USERID\n         /*JOBPARM ROOM=3004\n         //*\n         //*************************************************************\n         //*                                                           *\n         //*     LOAD STAND-ALONE DUMP FROM TAPE TO DASD.              *\n         //*                                                           *\n         //*************************************************************\n         //*\n         //SADUMP EXEC PGM=IEBGENER,REGION=5M,TIME=1439\n         // REGION=5M,TIME=1439\n         //SYSPRINT DD SYSOUT=*\n         //SYSIN    DD DUMMY\n         //SYSUT1   DD   DSN=SADUMP,\n         // UNIT=(TAPE,,DEFER),\n         // LABEL=(1,NL,,EXPDT=98000),\n         // VOL=SER=123456,\n         // LRECL=4160,\n         // BLKSIZE=29120,\n         // RECFM=FBS,\n         // DISP=OLD\n         //SYSUT2 DD DSN=USERID.SADUMP.CATENQ,\n         // UNIT=(SYSDA,3),\n         // LRECL=4160,\n         // BLKSIZE=4160,\n         // RECFM=F,\n         // SPACE=(CYL,(90,20),RLSE),\n         // DISP=(,CATLG,DELETE)\n1\n\n         Getting Started Using IPCS/ESA                      Page #23\n\n\n\n         Note the DCB attributes of the STAND-ALONE DUMP tape!\n         I was not able to find this information in any IBM\n         manual!  I finally found the information in an old\n         INFO/MVS entry (E339958) that discussed this topic.\n         I would definitely recommend allowing your dasd\n         dataset to be multivolume due to the probability\n         this will be one very large dataset.\n\n\n         This next job will create your initialized and loaded\n         IPCS VSAM DUMP directory.  For stand-alone dumps, you\n         should do it via a batch job because of the amount of\n         data to process.\n\n\n         FIGURE #11        INITIALIZE STAND-ALONE\n+        __________        ______________________\n\n                           IPCS VSAM DUMP DIRECTORY\n+                          ________________________\n\n\n         //USERIDI JOB acct-info,'IPCSDDR',CLASS=J,\n         // MSGCLASS=X,NOTIFY=USERID,TYPRUN=HOLD\n         /*JOBPARM ROOM=3004\n         //*\n         //*************************************************************\n         //*                                                           *\n         //*   THIS JOB WILL DEFINE AND LOAD AN IPCS VSAM DUMP         *\n         //*   DIRECTORY WITH THE DUMP YOU SPECIFY.                    *\n         //*                                                           *\n         //*                                                           *\n         //*   WARNING:  THIS JOB CAN TAKE A LOT OF CPU TIME           *\n         //*             DEPENDING ON THE SIZE OF THE SEQUENTIAL       *\n         //*             DUMP DATASET!                                 *\n         //*                                                           *\n         //*                                                           *\n         //*   1ST STEP:    DEFINE IPCS VSAM DUMP DIRECTORY.           *\n         //*                                                           *\n         //*                                                           *\n         //*   2ND STEP:    INVOKE IPCS AND INITIALIZE YOUR            *\n         //*                IPCS VSAM DUMP DIRECTORY                   *\n         //*                                                           *\n         //*                YOU MUST SPECIFY YOUR IPCS VSAM            *\n         //*                DUMP DIRECTORY CREATED IN STEP #1          *\n         //*                IN THE IPCSDDIR DD STATEMENT.              *\n         //*                                                           *\n         //*                                                           *\n         //*   3RD STEP:    INVOKE IPCS AND LOAD IPCS DUMP             *\n         //*                DIRECTORY CREATED IN STEP #1.              *\n         //*                                                           *\n         //*************************************************************\n1\n\n         Getting Started Using IPCS/ESA                      Page #24\n\n\n\n         FIGURE #11        INITIALIZE STAND-ALONE\n+        __________        ______________________\n\n                           IPCS VSAM DUMP DIRECTORY  (CONTINUED)\n+                          ________________________\n\n\n         //*************************************************************\n         //*                                                           *\n         //*                YOU MUST SPECIFY YOUR IPCS VSAM            *\n         //*                DUMP DIRECTORY CREATED IN STEP #1          *\n         //*                IN THE IPCSDDIR DD STATEMENT.              *\n         //*                                                           *\n         //*                YOU MUST SPECIFY YOUR SEQUENTIAL           *\n         //*                DASD DUMP DATASET IN THE DSNAME            *\n         //*                KEYWORD PARAMETER OF THE SETDEF            *\n         //*                STATEMENT.                                 *\n         //*                                                           *\n         //*                                                           *\n         //*   ALL CONDITION CODES SHOULD BE 0                         *\n         //*                                                           *\n         //*************************************************************\n         //*\n         //DEFINE   EXEC  PGM=IDCAMS,\n         // REGION=1M\n         //SYSPRINT DD  SYSOUT=*\n         //SYSIN    DD  *\n            DEFINE CLUSTER(NAME('USERID.DDIR.SADUMP.IECVPST') +\n                VOLUME(999999) +\n                FREESPACE(10,10) +\n                INDEXED +\n                REUSE +\n                IMBED +\n                REPLICATE +\n                SHAREOPTIONS(1,3)) +\n                INDEX(NAME('USERID.DDIR.SADUMP.IECVPST.INDEX') +\n                  CYLINDERS(1,1) +\n                  CISZ(4096)) +\n                DATA(NAME('USERID.DDIR.SADUMP.IECVPST.DATA') +\n                  CYLINDERS(100,50) +\n                  CISZ(4096) +\n                  KEYS(128,0) +\n                  RECORDSIZE(384 3072))\n         /*\n1\n\n         Getting Started Using IPCS/ESA                      Page #25\n\n\n\n         FIGURE #11        INITIALIZE STAND-ALONE\n+        __________        ______________________\n\n                           IPCS VSAM DUMP DIRECTORY  (CONTINUED)\n+                          ________________________\n\n\n         //DDIRPREP EXEC PGM=IKJEFT01,\n         // DYNAMNBR=75,TIME=1439,REGION=5M,COND=(0,NE)\n         //IPCSDDIR  DD  DSN=USERID.DDIR.SADUMP.IECVPST,\n         //  DISP=OLD,\n         //  AMP=('BUFND=20,BUFNI=10')\n         //SYSTSPRT  DD  SYSOUT=*\n         //SYSTSIN   DD  *\n         IPCSDDIR 'USERID.DDIR.SADUMP.IECVPST'\n         /*\n         //IPCSLOAD EXEC PGM=IKJEFT01,\n         // DYNAMNBR=75,TIME=1439,REGION=5M,COND=(0,NE)\n         //IPCSDDIR  DD  DSN=USERID.DDIR.SADUMP.IECVPST,\n         //  DISP=OLD,\n         //  AMP=('BUFND=20,BUFNI=10')\n         //IPCSPRNT  DD  SYSOUT=*\n         //SYSTSPRT  DD  SYSOUT=*\n         //SYSTSIN   DD  *\n         IPCS NOPARM\n         SETDEF DSNAME('USERID.SADUMP.IECVPST')\n         SETDEF TERMINAL NOPRINT NOVERIFY NOCONFIRM\n         SELECT CURRENT ERROR\n         STATUS FAILDATA REGISTERS CPU\n         SUMMARY JOBSUMMARY\n         END\n         /*\n\n\n         I use the VSAM AMP parameter to allow us to add many more\n         than the default VSAM buffer allocations of 1 index\n         and 2 data buffers to maximize performance.  JUST BE\n         AWARE THAT THIS JOB RUNS AWHILE SO NOW IS A GOOD TIME FOR\n         A BIG CUP OF COFFEE!\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #26\n\n\n\n         Our final rexx exec is the %@IPCSSAD procedure which\n         uses our IPCS VSAM DUMP directory allocated in\n         Figure #11.  The %@IPCSSAD procedure uses the\n         same name in the stand-alone dump JCL from Figure #11.\n         You will notice many similarities to the %@IPCSCUR rexx\n         exec.  The batch JCL in Figure #9 can process a stand-alone\n         dump by just using the %@IPCSSAD rexx exec.\n         Likewise, the @BROWSE, @EDIT and @UTILITY\n         rexx execs work the same as for SVCDUMP processing\n         (see Figure #12):\n\n\n\n         FIGURE #12        %@IPCSSAD\n+        __________        _________\n\n\n         /**************************** REXX ****************************\n         /*\n         /*      This REXX EXEC will run IPCS in either INTERACTIVE\n         /*      or BATCH mode using an IPCS VSAM DUMP DIRECTORY created\n         /*      by the IPCSDDR batch job.\n         /*\n         /*      NOTE: You must be outside of ISPF/PDF to run this EXEC!\n         /*\n         /*\n         /*      Keyword operands\n         /*\n         /*      SUFX  ==>  last index name of your sequential dump\n         /*                 dataset for the stand-alone dump\n         /*\n         /*      BATCH  ==>  specify this operand if you want IPCS to\n         /*                  be run in batch (interactive is default)\n         /*\n         /**************************************************************\n\n         arg sufx batch\n\n         status = MSG('OFF')\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #27\n\n\n         FIGURE #12        %@IPCSSAD  (CONTINUED)\n+        __________        _________\n\n\n         subcom ispexec\n         if rc=0 then\n            do\n              say '@IPCSSAD rexx exec cannot be executed under ISPF'\n              exit\n            end\n         else NOP\n\n         USERID = SYSVAR(syspref)\n         savelne = OUTTRAP(outlne,1)\n\n         \"DELETE '\"USERID\".IPCSPRNT'\"\n         if rc\u00eb=0 then\n            do\n              say 'DELETE TSO command failed'\n              say 'for IPCS print dataset - RC is' rc\n            end\n         else NOP\n\n         \"ALLOCATE F(IPCSPRNT) DA('\"USERID\".IPCSPRNT')\",\n            \"NEW SPA(5 1) CYL REL REUSE\"\n         if rc\u00eb=0 then\n            do\n              say 'ALLOCATE TSO command failed'\n              say 'for IPCS print dataset - RC is' rc\n              exit\n            end\n         else NOP\n\n         ddir = sysdsn(\"'\"USERID\".DDIR.SADUMP.\"sufx\"'\")\n         if ddir = 'DATASET NOT FOUND' then\n            do\n               SAY USERID'.DDIR.SADUMP.'sufx NOT FOUND\n               \"%@IPCSTRM\"\n               exit\n            end\n\n         \"ALLOCATE F(IPCSDDIR) DA('\"USERID\".DDIR.SADUMP.\"sufx\"') SHR REU\n         if rc\u00eb=0 then\n            do\n              say 'ALLOCATE TSO command failed'\n              say 'for IPCS dump directory - RC is' rc\n              exit\n            end\n         else NOP\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #28\n\n\n         FIGURE #12        %@IPCSSAD  (CONTINUED)\n+        __________        _________\n\n\n         if batch \u00eb= 'BATCH' then\n          do\n            say '@IPCSSAD rexx exec online execution'\n            say 'existing' userid'.DDIR.SADUMP.'sufx,\n                'vsam dump directory allocated'\n            say 'dataset' userid'.IPCSPRNT will be created'\n            queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                        \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                        \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n            queue \"ISPF PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM))\",\n                       \"PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG) PASSLIB\"\n            \"IPCS NOPARM\"\n            exit\n           end\n\n         if batch = 'BATCH' then\n          do\n            say '@IPCSSAD rexx exec batch execution'\n            say 'existing' userid'.DDIR.SADUMP.'sufx,\n                'vsam dump directory allocated'\n            say 'dataset' userid'.IPCSPRNT will be created'\n            queue \"SETDEF LENGTH(200) FLAG(ERROR) LIST\",\n                        \"DISPLAY(MACHINE,REMARK,STORAGE,SYMBOL)\",\n                        \"NOCONFIRM NOVERIFY TERMINAL NOPRINT\"\n            \"IPCS NOPARM\"\n             exit\n          end\n\n1\n\n         Getting Started Using IPCS/ESA                      Page #29\n\n\n\n         I hope I have given you a brief but valuable introduction\n         to my JCL and REXX EXECS I use for IPCS/ESA that make\n         life a whole lot easier.  I have corresponding IPCS CLISTS\n         (beginning with the character # instead of @) that will\n         do the same thing as the REXX EXECS.\n\n\n         I have begun submission of all of these procedures to\n         the NaSPA VIP tape and/or CBT tape but if you can't\n         find them there by the time this article is out\n         please contact the editor and get in touch with me\n         so I can get you copies of these useful tools.\n\n\n         I want to give a special thanks to Ms. Ingrid Hines who is an\n         IBM Advisory Software Support Specialist and Mr. Jim Chabot\n         an IBM IPCS instructor for their careful review of this\n         article.\n\n\n         I hope to do future articles on IPCS/ISPF dialog usage\n         and IPCS command usage.  Save those dumps for next time!\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IPCS2ART": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x01\\x9f\\x00\\x94\\x01\\x9f\\x12X\\x01\\t\\x01\\t\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-01-19T00:00:00", "modifydate": "1994-01-19T12:58:00", "lines": 265, "newlines": 265, "modlines": 0, "user": "SSSTJB0"}, "text": "1\n\n         Using The IPCS/ESA ISPF Dialogs                     Page #1\n\n\n         You have IPCS up and a SVCDUMP loaded.  Now what?\n         How can I get going with IPCS in the quickest amount of time!\n         Don't worry, read this article and be happy.\n         I will cover IPCS/ISPF ISPF Dialogs and begin\n         discussion of some of my most-often used IPCS/ESA commands.\n\n\n         This article was based on a session entitled PRACTICAL\n         IPCS/ESA DUMP ANALYSIS I gave at Nastec 5.0. in\n         Orlando at the end of March 1993.\n\n\n         Once you have initialized IPCS, you will see the IPCS\n         primary option menu.\n\n\n         ----------- IPCS PRIMARY OPTION MENU  -----------------\n         OPTION  ===>\n\n            0  DEFAULTS    - Specify default dump and options\n            1  BROWSE      - Browse dump data set\n            2  ANALYSIS    - Analyze dump contents\n            3  SUBMIT      - Submit problem analysis job to batch\n            4  COMMAND     - Enter IPCS subcommand or CLIST\n            5  UTILITY     - Perform utility functions\n            6  DUMPS       - Manage dump inventory\n            T  TUTORIAL    - Learn how to use the IPCS dialog\n            X  EXIT        - Terminate using log and list defaults\n\n         Enter END command to terminate IPCS dialog\n\n\n         After selection option 1 for BROWSE we enter this option:\n\n\n         ------------------ IPCS - ENTRY PANEL  -----------------------\n         COMMAND ==>\n\n          CURRENT DEFAULTS:\n           Source ==> DSNAME('USERID.SVCDUMP.S0B0')\n           Address space ==>\n\n          OVERRIDE DEFAULTS:\n           Source ==> DSNAME('USERID.SVCDUMP.S0B0')\n           Address space ==>\n           Password      ==>\n\n          POINTER:\n           Address       ==>\n           Remark        ==>\n\n1\n\n         Using The IPCS/ESA ISPF Dialogs                     Page #2\n\n\n\n         Our SVCDUMP name has been filled in from the previous SETDEF\n         processing.  We can press enter which will allow us to\n         browse the area of the current location (variable X)\n         or we can place a value (such as 00000010.) in the\n         address pointer and press enter.  The remark field will\n         allow us to place our own meaningful comments on these\n         pointer stack entries.  After we press enter we will be\n         able to inspect that storage area.  Some of the commands\n         we can do are:\n\n\n         1) Place the '%' sign in front of an address to go to\n            that location using 24-BIT addressing mode\n            (such as the MVS system CVT):\n\n\n            ASID(X'0037') STORAGE  -----------------------------\n            COMMAND ===>\n\n\n            00000010 % 00FD5780   00000000   070C0000   811BBF26\n            00000020   070C1000   81DF2B14   070C0000   81DF0CE0\n\n\n            The IPCS reply shows us the storage at this\n            address:\n\n            ASID(X'0037') STORAGE  -----------------------------\n            COMMAND ===>\n\n            00FD5780   00000218   00FEEEC0   00FD8C44   00FD5D60\n            00FD5790   00000000   00FF6100   00FF347E   00FE7AEE\n\n\n            TO REFERENCE A 31-BIT ADDRESS ALL WE NEED TO DO IS\n            USE THE '?' SYMBOL.\n\n\n\n         After displaying location 00000010. and leaving the BROWSE\n         we can now display the symbols on our BROWSE stack (see\n         below):\n\n1\n\n         Using The IPCS/ESA ISPF Dialogs                     Page #3\n\n\n\n         DSNAME('USERID.SVCDUMP.S0B0') POINTERS ------------------------\n         COMMAND ===>\n\n         ASID(X'0037') IS THE DEFAULT ADDRESS SPACE\n         PTR   ADDRESS  ADDRESS SPACE                       DATA TYPE\n         00001 00000010 ASID(X'0037')                       AREA\n               REMARKS:\n         00002 00FD5780 ASID(X'0037')                       AREA\n               REMARKS:\n         ************************* END OF POINTER STACK ****************\n\n\n         Our previous two BROWSE dialog displays now have stack pointer\n         addresses again should we desire to look at them again (enter\n         the 'S' letter at the first position of the PTR value to do\n         this).  We can also repeat a value by typing the 'R' command\n         over the first 0 in the second PTR field. This will give us the\n         following result:\n\n\n         DSNAME('USERID.SVCDUMP.S0B0') POINTERS ------------------------\n         COMMAND ===>\n\n         ASID(X'0037') IS THE DEFAULT ADDRESS SPACE\n         PTR   ADDRESS  ADDRESS SPACE                            DATA TY\n         00001 00000010 ASID(X'0037')                            AREA\n               REMARKS:\n         00002 00FD5780 ASID(X'0037')                            AREA\n               REMARKS:\n         00002 00FD5780 ASID(X'0037')                            AREA\n               REMARKS:\n         ************************* END OF POINTER STACK ****************\n\n         Now you can update one or the other of these two duplicate\n         entries to your liking.\n\n\n         There is another BROWSE option called 'F' which will invoke a I\n         control block formatting service command (CBFORMAT) and provide\n         us a formatted CVT.  To do this we will edit our last entry\n         to change the AREA data type to STRUCTURE(CVT) to inform IPCS\n         that this address in the beginning of a MVS control block\n         called the Communications Vector Table (CVT) using the IPCS\n         formatting program.  This command is the letter \"E\" which\n         will give us the following IPCS screen\n\n1\n\n         Using The IPCS/ESA ISPF Dialogs                     Page #4\n\n\n\n          EDIT DSNAME('USERID.SVCDUMP.S0B0') POINTER 00003 ---------\n          COMMAND ==>\n\n           Enter/verify attributes of the pointer.\n\n           Use ENTER to view updated definition,\n               END to save pointer and return,\n               CANCEL to return without saving changes.\n\n           Address       ===> 00FD5780\n           Address space ===> ASID(X'0037')\n           Data type     ===> STRUCTURE(CVT)\n           Remarks       ===>\n\n\n         After we change the data type from AREA to STRUCTURE(CVT) and\n         press END we get our stack pointer panel:\n\n\n         DSNAME('USERID.SVCDUMP.S0B0') POINTERS ------------------------\n         COMMAND ===>\n\n         ASID(X'0037') IS THE DEFAULT ADDRESS SPACE\n         PTR   ADDRESS  ADDRESS SPACE                       DATA TYPE\n         00001 00000010 ASID(X'0037')                       AREA\n               REMARKS:\n         00002 00FD5780 ASID(X'0037')                       AREA\n               REMARKS:\n         00003 00FD5780 ASID(X'0037')                       STRUCTURE(CV\n               REMARKS:\n         ************************* END OF POINTER STACK ****************\n\n\n         When we enter the 'F' command to the last entry we will get\n         a formatted CVT.  How elegant!  Some other symbols you can use\n         to manipulate the stack pointers are:\n\n         1) D  -  Delete the stack pointer\n\n         2) I  -  Insert a stack pointer\n\n\n         The BROWSE dialog facility will almost obsolete the old IPCS\n         LIST command due to its flexibility.\n\n1\n\n         Using The IPCS/ESA ISPF Dialogs                     Page #5\n\n\n\n         Option 2 on the IPCS primary option menu is the ANALYSIS\n         dialog:\n\n\n         ----------- IPCS MVS ANALYSIS OF DUMP CONTENTS ------------\n         OPTION  ===>\n\n         To display information, specify the corresponding option number\n\n            1  SYMPTOMS    - Symptoms\n            2  STATUS      - System environment summary\n            3  WORKSHEET   - System environment worksheet\n            4  SUMMARY     - Address spaces and tasks\n            5  CONTENTION  - Resource contention\n            6  COMPONENT   - MVS component data\n            7  TRACES      - Trace formatting\n\n         Enter END command to terminate MVS dump analysis.\n\n\n         You can perform the following analyses without\n         knowing the details of many IPCS commands.  The\n         SYMPTOMS description may save you many hours\n         of debugging analysis due to the many diagnostic\n         functions it performs for you.\n\n\n         For MVS/ESA VERSION 4 the manuals are:  MVS/ESA\n         Diagnosis: System Reference (LY28-1820),\n         MVS/ESA Diagnosis: Using Dumps and Traces (LY28-1813)\n         and MVS/ESA Basics of Problem Determination (GC28-1839)\n         for more information on how to read SYMPTOM data.\n\n\n         BE AWARE THAT ALL OPTIONS EXCEPT SYMPTOMS WILL\n         TAKE A LONG TIME TO EXECUTE ON YOUR TSO TERMINAL!\n         IT MAY BE BETTER TO RUN THESE COMMANDS USING\n         IPCS IN BATCH TSO.\n\n\n         I want to give a special thanks to Ms. Ingrid Hines who is an\n         IBM Advisory Software Support Specialist and Mr. Jim Chabot\n         an IBM IPCS instructor for their careful review of this\n         article.\n\n\n         In a future article, I will go through some of my\n         favorite IPCS commands used in problem determination\n         and resolution.  See you then.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IPCS3ART": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x01\\x9f\\x00\\x94\\x01\\x9f\\x12X\\x03\\xb5\\x03\\xb5\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-01-19T00:00:00", "modifydate": "1994-01-19T12:58:00", "lines": 949, "newlines": 949, "modlines": 0, "user": "SSSTJB0"}, "text": "1\n\n         Practical IPCS/ESA Command Usage                    Page #1\n\n\n\n         Do you have the desire to solve problems quick!  Need to\n         use IPCS commands but don't know where to start.  This\n         article should definitely help you to be an IPCS\n         POWER USER.\n\n\n         This article was based on a session entitled PRACTICAL\n         IPCS/ESA DUMP ANALYSIS I gave at Nastec 5.0. in\n         Orlando at the end of March 1993.\n\n\n         IPCS OPTION 4 COMMANDS PRIMARY OPTION MENU:\n+        ___________________________________________\n\n\n  ------------------- IPCS SUBCOMMAND ENTRY --------------------\n  ENTER A FREE-FORM IPCS SUBCOMMAND OR A CLIST INVOCATION BELOW:\n\n  ===>\n\n  ---------------- IPCS SUBCOMMANDS AND ABBREVIATIONS ------------------\n  ADDDSN,   AD    \u00e2 DIVDATA           \u00e2 IOSCHECK, IOSK  \u00e2 RENUM,    REN\n  ADDPROB,  AP    \u00e2 DROPDUMP, DROPD   \u00e2 ISPEXEC         \u00e2 RSMDATA\n  ANALYZE         \u00e2 DROPMAP,  DROPM   \u00e2 LIST,     L     \u00e2 RUNCHAIN, RUNC\n  ARCHECK         \u00e2 DROPSYM,  DROPS   \u00e2 LISTDSN,  LD    \u00e2 SCAN\n  ASCBEXIT, ASCBX \u00e2 END               \u00e2 LISTDUMP, LDMP  \u00e2 SELECT\n  ASMCHECK, ASMK  \u00e2 EQUATE,   EQU, EQ \u00e2 LISTEDT         \u00e2 SETDEF,   SETD\n  CBFORMAT, CBF   \u00e2 EVALDEF           \u00e2 LISTMAP,  LMAP  \u00e2 STACK\n  CBSTAT          \u00e2 EVALDUMP          \u00e2 LISTPROB, LP    \u00e2 STATUS,   ST\n  CLOSE           \u00e2 EVALMAP           \u00e2 LISTSYM,  LSYM  \u00e2 SUMMARY,  SUMM\n  COMCHECK, COMK  \u00e2 EVALSYM           \u00e2 LISTUCB,  LISTU \u00e2 TCBEXIT   TCBX\n  COMPARE,  COMP  \u00e2 EVALUATE, EVAL    \u00e2 LPAMAP          \u00e2 TRAPLIST\n  COPYDDIR        \u00e2 FIND,     F       \u00e2 MODDSN,   MD    \u00e2 TRAPOFF\n  COPYDUMP        \u00e2 FINDMOD,  FMOD    \u00e2 MODPROB,  MP    \u00e2 TRAPON\n  CPUTRACE        \u00e2 FINDUCB,  FINDU   \u00e2 NAME            \u00e2 TSO\n  CTRACE          \u00e2 GTFTRACE, GTF     \u00e2 NOTE,     N     \u00e2 VERBEXIT, VERB\n  DELDSN,   DD    \u00e2 HELP,     H       \u00e2 OPEN            \u00e2 VLFDATA\n  DELPROB,  DP    \u00e2 INTEGER           \u00e2 PROFILE,  PROF  \u00e2 WHERE,    W\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #2\n\n\n\n         Some of my most-often used IPCS commands are:\n\n\n         STATUS   -   describe system status\n\n         LISTSYM  -   list IPCS symbols directory\n\n         DROPSYM  -   remove symbol(s) from IPCS symbols directory\n\n         WHERE    -   identify an area at a given address\n\n         SELECT   -   generate address space storage map entries\n\n         SUMMARY  -   summarize control block fields\n\n         LIST     -   list storage areas\n\n         ANALYZE  -   perform contention analysis\n\n         LPAMAP   -   list link pack area entry points\n\n         VERBEXIT -   execute a USER-WRITTEN or IBM-SUPPLIED\n                      VERB EXIT\n\n         SCAN     -   validate system data areas\n\n         CBFORMAT -   format a control block\n\n         CBSTAT   -   obtain control block status\n\n         FINDMOD  -   locate a module name\n\n         RUNCHAIN -   search a chain of control blocks\n\n\n         In the following IPCS command descriptions I will show\n         abbreviated output where possible to give you a better\n         idea of what happens when you issue an IPCS command.\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #3\n\n\n\n\n         IPCS OPTION 4 STATUS COMMAND:\n+        _____________________________\n\n\n         Some of the major functions of the IPCS STATUS command are:\n\n\n         1) PROVIDES SYSTEM STATUS.\n\n\n         2) FAILDATA   -   This will format the SYSTEM DIAGNOSTIC\n                           WORK AREA (SDWA) critical to DUMP ANALYSIS.\n\n\n         3) REGISTERS  -   This will format registers at the time of\n                           the dump which includes for MVS/ESA:\n\n                           - GENERAL PURPOSE REGISTERS\n                           - FLOATING POINT REGISTERS\n                           - CONTROL REGISTERS\n                           - ACCESS REGISTERS\n\n\n         4) WORKSHEET  -   For STAND-ALONE DUMP analysis, this option\n                           may save you a great deal of time.  A\n                           system diagnostic worksheet is created\n                           which include all that information IBM\n                           had you look up the diagnostic techniques\n                           IBM manuals of old.  Now with one command\n                           you can get it all!\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #4\n\n\n\n\n         IPCS OPTION 4 LISTSYM COMMAND:\n+        ______________________________\n\n\n         Most IPCS commands will create IPCS SYMBOL entries\n         to be used for other IPCS commands or that you can\n         use to list to your advantage.  The IPCS LISTSYM\n         command will display all the IPCS symbol table equates\n\n\n         EXAMPLE:  If you then issued this command:\n\n                   LISTSYM\n\n                   You would get the following output\n                   (note the additional symbols created):\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        SYMBOL     ADDRESS  ATTRIBUTES\n        COMMON      900000. ASID(X'0001') LENGTH(7340032)\n                            AREA(COMMON) NODROP\n        CVT         FD5780. ASID(X'0001') POSITION(X'-0028')\n                            LENGTH(1320) STRUCTURE(CVT) NODROP\n        GDA        1B0A150. ASID(X'0001') LENGTH(408)\n                            STRUCTURE(GDA) NODROP\n        PRIVATE       1000. ASID(X'0001') LENGTH(9433088)\n                            AREA(PRIVATE) NODROP\n        PRIVATEX   2900000. ASID(X'0001') LENGTH(2104492032)\n                            AREA(PRIVATEX) NODROP\n        TITLE           00. HEADER POSITION(X'+0058')\n                            LENGTH(69) CHARACTER NODROP\n        6 DEFINITIONS LISTED\n   ****************************** END OF DATA **************************\n\n\n         EXAMPLE:  After you issue the following command:\n\n                   STATUS WORKSHEET\n\n                   You would get the following additional symbols.\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #5\n\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        SYMBOL     ADDRESS  ATTRIBUTES\n        COMMON      900000. ASID(X'0001') LENGTH(7340032)\n                            AREA(COMMON) NODROP\n        CSD         F812D0. ASID(X'0001') LENGTH(312)\n                            STRUCTURE(CSD) NODROP\n        CVT         FD5780. ASID(X'0001') POSITION(X'-0028')\n                            LENGTH(1320) STRUCTURE(CVT) NODROP\n        GDA        1B0A150. ASID(X'0001') LENGTH(408)\n                            STRUCTURE(GDA) NODROP\n        LCCAVT      F81290. ASID(X'0001') LENGTH(64)\n                            STRUCTURE(LCCAVT) NODROP\n        LCCA1       FA0000. ASID(X'0001') LENGTH(2560)\n                            STRUCTURE(LCCA) NODROP\n        LCCA2       FA1600. ASID(X'0001') LENGTH(2560)\n                            STRUCTURE(LCCA) NODROP\n        PCCAVT      F81250. ASID(X'0001') LENGTH(64)\n                            STRUCTURE(PCCAVT) NODROP\n        PCCA1       F81008. ASID(X'0001') LENGTH(584)\n                            STRUCTURE(PCCA) NODROP\n        PRIVATE       1000. ASID(X'0001') LENGTH(9433088)\n                            AREA(PRIVATE) NODROP\n        PRIVATEX   2900000. ASID(X'0001') LENGTH(2104492032)\n                            AREA(PRIVATEX) NODROP\n        PSA1        F9F000. ASID(X'0001') LENGTH(4096)\n                            STRUCTURE(PSA) NODROP\n        PSA2            00. ASID(X'0001') LENGTH(4096)\n                            STRUCTURE(PSA) NODROP\n        TITLE           00. HEADER POSITION(X'+0058') LENGTH(69)\n                            CHARACTER NODROP\n        14 DEFINITIONS LISTED\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #6\n\n\n\n         IPCS OPTION 4 DROPSYM COMMAND:\n+        ______________________________\n\n\n         The IPCS DROPSYM will allow you to remove SELECTED symbols\n         from the IPCS symbol table.\n\n\n         EXAMPLE:  If I created my own symbols via the IPCS EQUATE\n                   command they would have the DROP attribute BY\n                   DEFAULT!  If I issue the following command:\n\n                   DROPSYM *\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        SYMBOL     ADDRESS  ATTRIBUTES\n        BRYANT1       F000. ASID(X'0037') LENGTH(200)\n                            AREA DROP\n        BRYANT2   7FFFFF00. ASID(X'0037') LENGTH(200)\n                            STRUCTURE DROP\n        COMMON      900000. ASID(X'0001') LENGTH(7340032)\n                            AREA(COMMON) NODROP\n        CVT         FD5780. ASID(X'0001') POSITION(X'-0028')\n                            LENGTH(1320) STRUCTURE(CVT) NODROP\n        GDA        1B0A150. ASID(X'0001') LENGTH(408)\n                            STRUCTURE(GDA) NODROP\n        PRIVATE       1000. ASID(X'0001') LENGTH(9433088)\n                            AREA(PRIVATE) NODROP\n        PRIVATEX   2900000. ASID(X'0001') LENGTH(2104492032)\n                            AREA(PRIVATEX) NODROP\n        TITLE           00. HEADER POSITION(X'+0058')\n                            LENGTH(69) CHARACTER NODROP\n        8 DEFINITIONS LISTED\n   ****************************** END OF DATA **************************\n\n\n                   Only the BRYANT1 and BRYANT2 symbols with the\n                   DROP attribute would be dropped!\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #7\n\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        2 SYMBOLS DROPPED\n   ****************************** END OF DATA **************************\n\n\n         Certain DROPSYM entries are marked as NODROP which means\n         you must get rid of them using the PURGE keyword operand\n         Lets get rid of ALL THE SYMBOLS IN THE IPCS SYMBOL TABLE\n         now with the command:\n\n         DROPSYM * PURGE\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        6 SYMBOLS DROPPED\n   ****************************** END OF DATA **************************\n\n\n         It looks as if we got rid of ALL THE SYMBOLS IN THE IPCS\n         SYMBOL table!  Let's be sure by issuing the IPCS LISTSYM\n         command to be certain (Technical types HAVE TO BE SURE).\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        SYMBOL     ADDRESS  ATTRIBUTES\n        CVT         FD5780. ASID(X'0001') POSITION(X'-0028')\n                            LENGTH(1320) STRUCTURE(CVT) NODROP\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #8\n\n\n\n         WAIT A MINUTE!  WE DROPPED THOSE REMAINING 6 SYMBOLS\n         WHICH MEANS NONE SHOULD BE LEFT OVER!\n\n         The CVT equate should really be called a NEVERDROP\n         entry because it WILL NEVER GO AWAY.  IPCS relies on\n         this control block for all other control block analysis!\n\n         If you have a dump with a BAD CVT pointer for most\n         situations you don't have a dump for problem analysis!\n\n         For a bad CVT pointer (or any other one for that matter)\n         issue the IPCS EQUATE of the control block WITHOUT using\n+                                                   _____________\n         the STRUCTURE(controlblock) keyword.  If you don't do\n+        ___________________________________\n         this, IPCS will perform validity checking on the control\n         block and fail your request (even if one bit is incorrectly\n         verified).  For the most part your newly-equated CVT without\n         the STRUCTURE(CVT) control block is probably bad.\n\n\n         THE BOTTOM LINE IS YOU CAN RUN IPCS FOR MOST OTHER ANALYSES\n         OF THIS DUMP (FOR EXAMPLE: THE TRACE TABLE).\n\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #9\n\n\n\n         IPCS OPTION 4 WHERE COMMAND:\n+        ____________________________\n\n         The IPCS WHERE command will take an address (or register\n         setting such as 1R%) and search through storage to tell\n         you where this area is:\n\n         EXAMPLE:  WHERE 10.%\n\n         This should show us our CVT as follows:\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n      ASID(X'0037') 00FD5780. STRUCTURE(CVT)+00 IN READ/WRITE NUCLEUS\n      ASID(X'0037') 00FD5780. IEANUC01.IEAVCVT+40 IN READ/WRITE NUCLEUS\n   ****************************** END OF DATA **************************\n\n\n         I have noticed that only CSECTS in the NUCLEUS are shown\n         with the IPCS WHERE command.  This is because the NUCLEUS\n         is scatter loaded (pieces loaded like a puzzle) at IPL time.\n         If you perform this command for any other load module you\n         will only get the displacement from the beginning of the\n         load module.  From here either walk backwards in storage\n         to look for an eyecatcher EBCDIC name or consult a\n         IBM HMBLIST map of the load module.  This can be a big\n         problem for those load modules with many CSECTS!\n         THIS WOULD BE A GOOD FUTURE MODIFICATION FOR IBM OR\n         THOSE OF US THAT WANT TO WRITE IPCS EXITS (OH YEAH)!\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #10\n\n\n\n         IPCS OPTION 4 SELECT COMMAND:\n+        _____________________________\n\n\n         The SELECT command will give you a list of all MVS/ESA\n         address spaces (ASCBs) or selected address spaces with\n         ASCBs or tasks (TCBs) error bit indicators on.  We can\n         also ask for current ascbs via CURRENT keyword or all\n         address spaces (ALL keyword):\n\n\n         EXAMPLE:  SELECT ERROR\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        ASID JOBNAME  ASCBADDR  SELECTION CRITERIA\n        ---- -------- --------  ------------------\n        0037 DEVLMSC8 00FA7780  ERROR\n   ****************************** END OF DATA **************************\n\n\n\n         IPCS OPTION 4 SUMMARY COMMAND:\n+        ______________________________\n\n         The IPCS SUMMARY command can give you just the right glance at\n         key diagnostic information in the address space control\n         blocks (ASCB), task control blocks (TCB), request blocks\n         (RB) and contents directory entries (CDE) system areas.\n\n\n         EXAMPLE:  SUMMARY JOBSUMMARY ERROR\n\n\n         The last few pages of output for the SUMMARY command will\n         show all TCB completion codes.  I can look for those that\n         are non-zero with one glance.\n\n         (I AM SHOWING PARTIAL OUTPUT FOR THE SAKE OF BREVITY):\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #11\n\n\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        SELECTED BY: ERROR\n    JOBNAME DEVLMSC8 ASCB 00FA7780 NEXT 00FB4800 PREV 00F83E00 ASID 0037\n    GLOBAL SERVICE PRIORITY LIST\n      QUEUE IS EMPTY\n    LOCAL SERVICE PRIORITY LIST\n      QUEUE IS EMPTY\n    TCB 008FE178  NEXT 008FFD18  PREV 00000000 COMP 00000000\n    TCB 008FFD18  NEXT 008FFA10  PREV 008FE178 COMP 00000000\n    TCB 008FFA10  NEXT 008E8E88  PREV 008FFD18 COMP 00000000\n    TCB 008E8E88  NEXT 00000000  PREV 008FFA10 COMP 040B0000\n   ****************************** END OF DATA **************************\n\n\n         IPCS OPTION 4 LIST COMMAND:\n+        ___________________________\n\n\n         The IPCS LIST command allows you to browse dump output\n         similar to Option 1 BROWSE IPCS dialog and this command\n         allows you to see your data in many ways throught IPCS\n         ATTRIBUTE KEYWORDS you can specify in the command.\n\n\n         EXAMPLE:  LIST 00000010. LENGTH(4)\n\n         (This will list 4 bytes in character and hexadecimal)\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n      LIST 00000010 ASID(X'0037') LENGTH(4) AREA\n      ASID(X'0037') ADDRESS(00000010) KEY(08) PREFIXED COMMON\n      00000010. 00FD5780   \u00e2....                            \u00e2\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #12\n\n\n\n         EXAMPLE:  LIST 00000010. PTR\n\n         (This will list 4 bytes as a pointer address using\n          hexadecimal only)\n\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n      LIST 00000010 ASID(X'0037') LENGTH(4) POINTER\n      ASID(X'0037') ADDRESS(00000010) KEY(08) PREFIXED COMMON\n      00000010. 00FD5780\n   ****************************** END OF DATA **************************\n\n\n\n         EXAMPLE:  LIST 00000010.? LENGTH(4)\n\n         (This will list 4 bytes pointed to by the 31 bit address\n          at location 10.  If this is not a 31 bit address it will\n          be listed as the 4 bytes pointed to by the 24 bit address)\n\n          NOTE: AS OF MVS/ESA RELEASE 4.2.0. OUR CVT ADDRESS WOULD\n                NEVER BE A 31-BIT ADDRESS!\n\n                THIS IS HERE FOR DEMONSTRATION PURPOSES ONLY!\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n      LIST 00000010 ASID(X'0037') LENGTH(4) AREA\n      ASID(X'0037') ADDRESS(00FD5780) KEY(00) COMMON\n      00FD5780. 00000218   \u00e2....                            \u00e2\n   ****************************** END OF DATA **************************\n\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #13\n\n\n\n         EXAMPLE:  LIST 00000010.? LENGTH(4) UNSIGNED\n\n         (This will list 4 bytes pointed to by the 31 bit address\n          as an unsigned number displaying a decimal result)\n\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n      LIST 00FD5780 ASID(X'0037') LENGTH(4) UNSIGNED\n      ASID(X'0037') ADDRESS(00FD5780) KEY(00) COMMON\n      00FD5780 \u00e2              536 \u00e2\n   ****************************** END OF DATA **************************\n\n\n\n         EXAMPLE:  LIST 00000010.? CHARACTER\n\n         (This will list 4 bytes pointed to by the 31 bit address\n          as character values only)\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n       LIST 00FD5780 ASID(X'0037') LENGTH(200) CHARACTER\n       ASID(X'0037') ADDRESS(00FD5780) KEY(00) COMMON\n       00FD5780 \u00e2 .......{......)-....../....=..:...:!...HA..H........20\n       00FD57C0 \u00e2 ......C...0U...........<..;-.............B...S.70...B.\n       00FD5800 \u00e2 ....A..\\...Q....AK....)H..F..I......\"...........-...T.\n       00FD5840 \u00e2 ..- .9.Q\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #14\n\n\n\n         EXAMPLE:  LIST 00000010.? STRUCTURE\n\n         (This will list 4 bytes pointed to by the 31 bit address\n          and provide you with offsets from location 0 as if this\n          area was a valid control block!  I find the STRUCTURE\n          operand most helpful in getting displacements to areas\n          I am listing especially when there is no IPCS formatting\n          support (such as STRUCTURE(controlblock) provided by\n          IBM!)\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n     LIST 00FD5780 ASID(X'0037') LENGTH(200) STRUCTURE\n     ASID(X'0037') ADDRESS(00FD5780) KEY(00) COMMON\n     +00000000 00FD5780. 00000218 00FEEEC0 00FD8C44 00FD5D60  00000000\n     +00000020 00FD57A0. 00FE7A5A 01221BC8 81104688 00FF0B70  00FC1EB8\n     +00000040 00FD57C0. 00FBFC18 00FF8300 00FEF0E4 00000000  0A0307FE\n     +00000060 00FD57E0. 00000000 00FD8F48 00FE3C82 00FE3CA2  00F7F000\n     +00000080 00FD5800. 00000000 810CCFE0 00FF1598 00000000  81D2B000\n     +000000A0 00FD5820. 00000000 7FFFFFFF 00000000 00000000  00FD6008\n     +000000C0 00FD5840. 00FD6040 80F9BAD8\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #15\n\n\n\n         IPCS OPTION 4 ANALYZE COMMAND:\n+        ______________________________\n\n\n         The IPCS ANALYZE command performs contention analysis\n         based on IBM-supplied or installation developed IPCS\n         exits defined in members BLSCECT (for IBM) or\n         BLSCUSER (installation) defined in SYS1.PARMLIB or other\n         library concatenated to the IPCSPARM DD statement.\n\n\n         EXAMPLE:  ANALYZE EXCEPTION NOXREF\n\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n   RSM PROCESSING ON A NON-STAND-ALONE DUMP MAY GENERATE\n       INCONSISTENT DATA AND FALSE VALIDITY CHECK FAILURES.\n   DATA SPACE INFORMATION MAY BE INCOMPLETE FOR RSM.\n        STORAGE NOT IN DUMP.\n   UNABLE TO COMPLETE SUSPEND LOCK ANALYSIS\n   NO DEVICE GROUP CONTENTION IN THE SYSTEM\n   NO GLOBAL ENQ RESOURCES ALLOCATED.\n\n                    CONTENTION EXCEPTION REPORT\n   JOBNAME=IOS.      ASID=0001  UCBTAPE=00FC9618\n   JOBNAME=IOS.     HOLDS THE FOLLOWING RESOURCE(S):\n    RESOURCE #0001:  THERE ARE 0001 UNITS OF WORK WAITING FOR THIS RESOU\n       NAME=I/O DEVICE  3F0 (TAPE    ) VOLSER=......\n       DATA=(IOS) ACTIVE I/O WITH ASSIGN HELD.\n            (IOS) DEVICE NOT READY.\n            (IOS) INTERCEPT CONDITION.\n    STATUS FOR THIS UNIT OF WORK:\n      THIS ADDRESS SPACE IS ON THE SRM IN QUEUE.\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #16\n\n\n\n\n         IPCS OPTION 4 LPAMAP COMMAND:\n+        ____________________________\n\n\n         1) In an MVS/ESA environment you MUST USE the IPCS LPAMAP\n            command to get a link pack directory map of your\n            current system (LIVE STORAGE).\n\n            NOTE:  ON THE SUBJECT OF LIVE STORAGE THERE ARE A\n                   NUMBER OF IPCS OPERANDS SUCH AS THE WHERE\n                   COMMAND THAT WILL NOT WORK WITH LIVE STORAGE.\n\n                   THIS IS ANOTHER FACILITY THAT WE SHOULD\n                   DEFINITELY PUSH FOR A CHANGE TO ALLOW\n                   THE FULL IPCS COMMAND SET FOR LIVE\n                   STORAGE.\n\n\n         2) Valid operands for the LPAMAP are:\n\n\n                EPA     Display modules by entry point address\n\n            MODNAME     Display modules sorted in alphabetical order\n\n                ALL     Display both EPA and MODNAME\n\n\n         IPCS OPTION 4 VERBEXIT COMMAND:\n+        _______________________________\n\n\n         1) The VERBEXIT command will execute IBM supplied (or\n            INSTALLATION-DEVELOPED) exits defined in members\n            BLSCECT or BLSCUSER in SYS1.PARMLIB.\n            The verbexit keywords I use most often are:\n\n\n\n            LOGDATA   -  Display IN-STORAGE LOGREC RECORDS\n\n            MTRACE    -  Display MASTER TRACE TABLE (SYSLOG)\n\n            NUCMAP    -  Display MODULES IN THE NUCLEUS\n\n            SADMPMSG  -  Display STAND-ALONE DUMP MESSAGE LOG\n\n            TRACE     -  Display SYSTEM TRACE ENTRIES\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #17\n\n\n\n\n         IPCS OPTION 4 SCAN COMMAND:\n+        ___________________________\n\n\n         The IPCS SCAN command will validate system control\n         blocks beginning with low level ones like the\n         Prefixed Save Area (PSA) and the Communications\n         Vector Table (CVT) to name just a few.\n\n\n         Specifying a DEPTH of more than 1 will allow control\n         blocks found by CVT pointers (for example) to be further\n         processed by one or more SCAN PROBES.\n\n         The process of validating one control block and\n         following its pointers to other control blocks\n         is a SCAB PROBE.\n+             ___________\n\n         A depth of 2 would take the CVT-pointed control block\n         and find other control blocks pointed to it.  Adding\n         a large DEPTH value will add considerable processing\n         time to this command due to the large control block\n         searches found.\n\n\n         NOTE:  THIS COMMAND MUST HAVE BEEN DEVELOPED BY\n                A STAR TREK FAN.  THE SPEED OF THIS COMMAND IS NOT\n                WARP SPEED BUT RATHER 1/2 IMPULSE\n                IF YOU SPECIFY A LARGE DEPTH VALUE.\n                (AREN'T WE ALL STAR TREKKERS!)\n\n\n         You can determine the address range to be scanned;\n         the level of indirection and number of passes through\n         IPCS storage map entries\n\n\n         EXAMPLE:  SCAN RANGE(0.:7FFFFFFF.) DEPTH(2) PASSES(1)\n\n         (Sometimes this command will find problems you never\n          dreamed of like the invalid TCB found below:)\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n        ERRORS DETECTED IN STRUCTURE(TCB) AT ASID(X'0001') 008FF218:\n           TCBTCBID FIELD DOES NOT EQUAL C'TCB '\n        58 PROBES WERE EFFECTIVE\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #18\n\n\n\n\n         IPCS OPTION 4 CBFORMAT COMMAND:\n+        ______________________________\n\n\n         The IPCS CBFORMAT command will invoke an IBM-SUPPLIED\n         or INSTALLATION-DEVELOPED IPCS exit from the BLSCECT\n         and BLSCUSER PARMLIB members.  A good many IBM control\n         blocks have their own formatting routines.  You must\n         write an IPCS EXIT to create your own control block\n         formatting routines.\n\n\n         EXAMPLE:  CBFORMAT 00000010.% STRUCTURE(CVT)\n\n\n         (The above example will give you a formatted CVT\n          control block)\n\n\n         IPCS OPTION 4 CBSTAT COMMAND:\n+        ____________________________\n\n\n         This command will process formatted ASCBS and TCBS defined as\n         structures and inspect error indicators in both\n         control blocks.  I had a recent situation on a\n         problem with a swappability problem and the results\n         of the CBSTAT command against the address space\n         (CBSTAT 00F24500.) where 00F24500. was the ASCB\n         address showed me that I had a address space\n         in the process of swap out (what is more shocking\n         is that the jobstep program of this address space\n         was marked as NONSWAPPABLE in the SCHED?? SYS1.PARMLIB\n         member). NEVERTHELESS, HERE IT IS!\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n     STATUS FOR STRUCTURE(ASCB) AT 00F24500 ASID(X'004D')\n      Address space non-dispatchability flags from ASCBDSP1:\n       System set non-dispatchable and this ASCB is not exempt\n   Unable to determine the identity of the SRM queue for this address sp\n   It is moving to the SRM WAIT queue.\n   In the swap-out process, QUIESCE has started.\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #19\n\n\n\n\n         IPCS OPTION 4 FINDMOD COMMAND:\n+        _____________________________\n\n\n         The IPCS FINDMOD command will allow you to locate\n         a load module in the dump (or active storage).\n         This command will search the link pack area directories\n         (LPDE) and contents directory entries (CDE) to report\n         on where your module is located.\n\n         If your module cannot be found via a system search\n         the IPCS command will not be able to find it.\n         All vendors who just grab some CSA or ECSA and place\n         their code in it WILL NOT HAVE THEIR CODE FOUND BY\n         THE FINDMOD COMMAND!\n\n\n         EXAMPLE:  FINDMOD ISPMAIN\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n      AMODE(31) ENTRY POINT ISPMAIN IS AT DE9928, MODULE(ISPMAIN)+014928\n   ****************************** END OF DATA **************************\n\n\n         At this time you could issue a IPCS LISTSYM command and\n         see the load module found and the formatted link pack\n         directory entry (indicated by the STRUCTURE(LPDEMAJOR)\n         in the IPCS symbol).\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n   SYMBOL     ADDRESS  ATTRIBUTES\n   _________ ________  ________________\n   ISPMAIN     DD5000. ASID(X'0001') LENGTH(109400)\n                       MODULE(ISPMAIN) NODROP\n\n   LPDEISPMAIN CC75A0. ASID(X'0001') LENGTH(40)\n                       STRUCTURE(LPDEMAJOR) NODROP\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #20\n\n\n\n         IPCS OPTION 4 RUNCHAIN COMMAND:\n+        ______________________________\n\n\n         I have found the IPCS RUNCHAIN command invaluable for\n         running a control block chain to see:\n\n         1)  If the control block chain is broken the\n             command will use the IPCS EQUATE service\n             internally to give me a valid symbol for the\n             last symbol found before the broken control\n             block chain\n\n         2)  The IPCS RUNCHAIN command is most valuable in\n             IPCS CLISTS, REXX EXECS or assembled\n             INSTALLATION-DEVELOPED IPCS routines.\n\n\n         EXAMPLE:  RUNCHAIN ADDRESS(10.?+128?+18?) NAME(SSCVT) LINK(4) +\n                            LENGTH(32) EXEC((LIST X)) CHARACTER\n\n\n         (The above example will run the subsystem control block\n          definitions and print each 32 byte entry in both\n          hexadecimal and character)\n\n\n  IPCS OUTPUT STREAM --------------------------------- LINE 0 COLS 1 130\n  COMMAND ===>                                         SCROLL ===> CSR\n\n   ****************************** TOP OF DATA **************************\n   LIST 00C9A308 ASID(X'0037') LENGTH(32) CHARACTER\n   ASID(X'0037') ADDRESS(00C9A308) KEY(00) COMMON\n   00C9A308 \u00e2 SSCT.I.YJES2.....FY...}.........         \u00e2\n\n   LIST 00C98CE8 ASID(X'0037') LENGTH(32) CHARACTER\n   ASID(X'0037') ADDRESS(00C98CE8) KEY(00) COMMON\n   00C98CE8 \u00e2 SSCT.IS\\MSTR.....I.}............         \u00e2\n\n   LIST 00C9A2E0 ASID(X'0037') LENGTH(32) CHARACTER\n   ASID(X'0037') ADDRESS(00C9A2E0) KEY(00) COMMON\n   00C9A2E0 \u00e2 SSCT.IS.JESA.............IS.....         \u00e2\n\n   LIST 00C9A2B8 ASID(X'0037') LENGTH(32) CHARACTER\n   ASID(X'0037') ADDRESS(00C9A2B8) KEY(00) COMMON\n   00C9A2B8 \u00e2 SSCT.IS.UCC1..........B..I .....         \u00e2\n\n   LIST 00C9A290 ASID(X'0037') LENGTH(32) CHARACTER\n   ASID(X'0037') ADDRESS(00C9A290) KEY(00) COMMON\n   00C9A290 \u00e2 SSCT.IS.UCCM....................         \u00e2\n   ****************************** END OF DATA **************************\n\n1\n\n         Practical IPCS/ESA Command Usage                    Page #21\n\n\n\n         I want to give a special thanks to Ms. Ingrid Hines who is an\n         IBM Advisory Software Support Specialist and Mr. Jim Chabot\n         an IBM IPCS instructor for their careful review of this\n         article.\n\n\n         I am at work on a future article that will show you how\n         to create your own customized IPCS procedures to look\n         at what you want via usage of REXX execs.\n\n\n         So for now, keep around some of those SVCDUMPS for next time!\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IPCS4ART": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x01\\x9f\\x00\\x94\\x01\\x9f\\x12X\\x03\\x9f\\x03\\x9f\\x00\\x00\\xe2\\xe2\\xe2\\xe3\\xd1\\xc2\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-01-19T00:00:00", "modifydate": "1994-01-19T12:58:00", "lines": 927, "newlines": 927, "modlines": 0, "user": "SSSTJB0"}, "text": "1\n\n         IPCS/ESA Customization Using REXX                   Page #1\n\n\n    In a previous series of articles, I discussed general usage\n    of IPCS under MVS/ESA.  Once you have spent some time using\n    IPCS many people will want to develop their own specialized\n    procedures Using REXX execs under IPCS is the quickest way\n    to do exactly this.\n\n\n    This article will cover the basics of using REXX EXECS to\n    develop specialized IPCS tools for dump analysis.\n    Once you know how to develop these tools, you can save yourself\n    a great deal of time in problem determination and begin to\n    gather in-depth knowledge how MVS/ESA works.\n\n\n    The REXX execs I will present were written in less that one\n    week.  I ensure you these REXX execs are at the novice level.\n    I would bet there are many more efficient ways to do\n    some of the data manipulation I do.  I welcome the more\n    experienced REXX practicioners to streamline these procedures\n    and let NASPA readership know what they have done.\n\n\n    A picture is worth 1000 words (depending on your computer\n    architecture).  I will cover each fully-documented REXX\n    exec with comments on the joys (and pains) of its development.\n\n\n    IPCS/ESA has given us a number of commands specifically for\n    interactive procedure (CLIST and REXX exec) usage.  Please\n    refer to Figure #1 on IPCS COMMANDS FOR REXX EXECS.\n\n\n    We can eliminate the usage of the IPCS INTEGER command when\n    using REXX execs due to the superior data manipulation of REXX\n    over TSO CLIST.  REXX has the hex-to-decimal (X2D)\n    and decimal-to-hex (D2X) commands to do this type of data\n    manipulation.\n\n\n    Another reason for not using the IPCS INTEGER command in a REXX\n    exec is because you are running in a different REXX HOST COMMAND\n    ENVIRONMENT (HCE).  There is a certain amount of overhead going\n    from one HCE to another.  It would be best to do all the\n    character manipulation in REXX and then place it into IPCS\n    variables.\n\n1\n\n         IPCS/ESA Customization Using REXX                   Page #2\n\n\n    The EVALDEF, EVALDUMP and EVALMAP commands deal primarily with\n    the IPCS environment and not with dump data manipulation.\n    Our emphasis on using REXX execs in IPCS will be to create\n    customized reports and not deal with the IPCS environment.\n    We will not cover these IPCS commands in this article.\n    If you have need to manipulate the IPCS environment the I\n    would suggest you look at the IBM MVS/ESA clist library\n    SYS1.SBLSCLI0 which has many good working examples of these\n    commands.\n\n\n    We are left with only two IPCS commands: EVALUATE and EVALSYM.\n    I have found the IPCS EVALUATE and EVALSYM commands the most\n    helpful in creating customized IPCS REXX procedures.\n    The EVALUATE command will allow us to transfer dump data\n    to and from REXX variables and the EVALSYM command will\n    allow us to dynamically reference IPCS symbols in REXX\n    procedures.\n\n\n    To use the REXX keyword in the EVALUATE command you must have\n    the maintenance for APAR OY46507 applied to your system.\n\n\n    My first IPCS REXX exec was a small exec to display the dump\n    type.  You can get this same information from the IPCS\n    STATUS SYSTEM command.  This REXX exec is a simple,\n    straightforward example for a novice REXX exec writer\n    and shows you what you can immediately do using IPCS REXX\n    execs:\n\n\n    PLEASE REFER TO FIGURE #2 @DUMPTYP REXX EXEC.\n\n\n\n    In our shop, I run my REXX execs out of the CLIST library\n    SYSPROC concatenation, hence I use the specialized REXX\n    comment at the top of the IPCS REXX exec.\n\n1\n\n         IPCS/ESA Customization Using REXX                   Page #3\n\n\n    Here is an overview of what the @DUMPTYP IPCS REXX exec does:\n\n\n    1) The first thing I do in any REXX exec is to ensure that we\n       have an environment that could establish an ipcs session.\n+                               ________________________________\n       What this means is that the control block structure has\n       been created that would allow passage into the IPCS enviroment.\n\n       The REXX SUBCOM command will check to see if the IPCS task\n       structure is available.  If the return code (rc) is not equal\n       to 0 then I issue a message stating the @DUMPTYP REXX exec\n       does not have a valid IPCS environment and then exit the\n       exec.  In most cases (if not all), I would recommend you\n       inspect return codes issued by REXX and/or IPCS commands\n       to make sure you are executing in a clean error-free environment.\n\n\n    2) Now we must  set the IPCS host command environment to\n       send commands in double quotes (\") to IPCS with the ADDRESS\n       IPCS command.  This will direct all \"COMMANDS\" issued to the\n       IPCS environment for execution.  I prefer to use double quotes\n       (\") around the IPCS commands I issue although you could also\n       use single quotes (').\n\n\n    3) Our third step is to issue the IPCS NOTE command that the IPCS\n       REXX exec is called @DUMPTYP and that its function is to\n       display current active dump type information.  The first IPCS\n       NOTE command uses the PAGE keyword option that indicates this\n       IPCS output should start at the top of a page.  I could have\n       issued the REXX SAY command to display this information but\n       chose not to.  Why?  The REXX SAY command will issue line mode\n       messages while we are in fullscreen IPCS.  I would use REXX SAY\n       messages for error messages since I will see them between IPCS\n       fullscreen displays.  I use the IPCS NOTE commands for normal\n       output messages.\n\n\n    4) We use the IPCS EQUATE command with the HEADER\n       keyword option to get the dump header information into a\n       variable I also call HEADER.  If the dump header information\n       is damaged in any way,  the dump is no good.\n\n\n    5) The IPCS EVALUATE command will retrieve 8 bytes (or less if\n       trailing blanks are found) at the HEADER + 40 and place\n       this information in the REXX variable called DUMPTYP.\n\n1\n\n         IPCS/ESA Customization Using REXX                   Page #4\n\n\n    6) The last step of this IPCS REXX exec is using REXX select\n       command logic to issue the proper dump type message based\n       on the REXX DUMPTYP variable.\n\n\n    Now you are ready for a more powerful example of IPCS REXX\n    exec usage.  The @DPRTMAJ and @DPRTMIN IPCS REXX execs will\n    allow you to inspect ASID and DISPATCHING PRIORITY information\n    for one address space or all address spaces.  The @DPRTMAJ\n    IPCS REXX exec calls @DPRTMIN as an external subroutine although\n    @DPRTMIN can run by itself if it is passed a valid ASCB address.\n\n\n\n    PLEASE REFER TO FIGURE #3 @DPRTMAJ REXX EXEC.\n\n\n\n    Here is an overview of what the @DPRTMAJ IPCS REXX exec does:\n\n\n    1) I perform many of the same functions as discussed in the\n       @DUMPTYP IPCS REXX exec such as:\n\n       - check for a valid IPCS environment\n       - check for change of default REXX HCE\n       - issue note commands to allow easier IPCS output reading\n\n\n    2) I issue IPCS EQUATE commands for the MVS/ESA Prefixed Save\n       Area (PSA) in order to get to the Communications Vector\n       Table (CVT).  Since any valid dump must contain the CVT\n       pointer, these steps are to make this IPCS REXX exec\n       self-documenting as to what and how it is doing.\n       We equate the highest Address Space Control Block (ASCB)\n       address (CVTASCBH) to the IPCS variable name of CVTASCBH\n       for later use.\n\n\n    3) We issue the IPCS DROPSYM command to ensure that we have\n       no existing symbols beginning with the letters ASCB.\n       The often-used IPCS SELECT command will create equates\n       beginning with ASCB which may cause inconsistent\n       results if we do not drop them.  We specify a range for\n       the IPCS DROPSYM command to drop all symbols beginning\n       with the letters ASCB.\n\n1\n\n         IPCS/ESA Customization Using REXX                   Page #5\n\n\n    4) The IPCS RUNCHAIN command will allow us to run the entire\n       ASCB control block chain from highest ASCB to lowest ASCB\n       and create IPCS symbols for each (ASCB001,ASCB002, etc.)\n       which will be used by the @DPRTMIN IPCS REXX exec.\n       The IPCS RUNCHAIN command has a parameter to allow you\n       to execute a IPCS REXX exec at the time each ASCB symbol\n       has been created.  As we will see later, this facility\n       will allow the @DPRTMIN IPCS REXX exec to process the\n       correct information for each invocation of it.\n\n\n    6) IPCS has a nasty habit of returning the first output screen\n       to the user before the entire output has been written to\n       the output buffer.  Should a user decide to end the terminal\n       display via the END command (PF3), the IPCS REXX exec will\n       display many nasty return code -3 values indicating that\n       there was an invalid HCE for IPCS.\n\n       I have elected to turn REXX tracing off (trace off) so I\n       can detect the non-zero return code from a user pressing\n       END (PF3) and issue a REXX SAY message telling the user\n       the remaining output was cancelled.\n\n\n    Besides being a REXX exec invoked by @DPRTMAJ, the @DPRTMIN\n    REXX exec can also be invoked as a stand-alone REXX exec.\n\n\n\n    PLEASE REFER TO FIGURE #4 @DPRTMIN REXX EXEC.\n\n\n\n    Here is an overview of what the @DPRTMIN IPCS REXX exec does:\n\n\n    1) I perform many of the same functions as discussed in the\n       @DUMPTYP and @DPRTMAJ IPCS REXX execs such as:\n\n       - check for a valid IPCS environment\n       - check for change of default REXX HCE\n       - issue note commands to allow easier IPCS output reading\n\n\n    2) The @DPRTMIN REXX exec has a positional keyword called\n       ONEASCB which indicates this REXX exec was used by itself.\n\n1\n\n         IPCS/ESA Customization Using REXX                   Page #6\n\n\n       If @DPRTMIN is used by itself, I invoke a small loop that\n       checks to see if the user entered that address with or\n       without the ending period.  If the user did not enter the\n       ending period, I place it in the effective address variable\n       ONEASCB for them.\n\n\n       When @DPRTMIN is executed by itself (not called from @DPRTMAJ)\n       I will issue the IPCS NOTE messages for @DPRTMIN to indicate\n       it is being executed by itself.\n\n\n    3) The essence of the @DPRTMAJ/@DPRTMIN REXX execs relationship\n       is defined by the use of the IPCS EVALSYM command.  When\n       @DPRTMIN is executed from @DPRTMAJ (the REXX ONEASCB value\n       is null), the IPCS EVALSYM command will be executed for\n       each ASCB passed from the @DPRTMAJ REXX exec.  The ASCBS\n       will look like ASCB001, ASCB002, ... etc. to ASCB999.\n       We will never exceed 999 ASCBS since we take the RUNCHAIN\n       CHAIN(999) default in @DPRTMAJ.\n\n       We take this IPCS variable ASCB??? (where ??? is the equated\n       number) and place it in a REXX variable called ASCB.  This\n       transferring variables from IPCS to REXX can easily occur since\n       REXX is a typeless language where everything is defined as a\n       character string (character, hexadecimal and even binary).\n\n\n    4) The REXX ASCB variable has to have the ending period '.'\n       removed if it is there at the end of the REXX variable.\n       We strip it off using the REXX RIGHT built-in function.\n\n\n    5) The IPCS EVALUATE command is issued to get the hexadecimal\n       ASID and DPRTY values from the ASCB.  To make the report\n       neater, I have 2 loops (one for the ASID and another for\n       the DPRTY) to right-align the decimal and hexadecimal\n       variables for the report using the IPCS NOTE command.\n\n\n    6) Like @DPRTMAJ, I turn off REXX tracing for the @DPRTMIN\n       REXX exec so a user pressing END (PF3) will not get many\n       nasty error messages due to the way IPCS fills the\n       output buffer.\n\n1\n\n         IPCS/ESA Customization Using REXX                   Page #7\n\n\n    PLEASE REFER TO FIGURE 5 for the output of @DPRTMAJ and @DPRTMIN\n\n\n\n    These small working examples of using IPCS REXX execs may be\n    expanded to allow an installation to develop a customized set\n    of tools to isolate software failures and keep you system\n    running.\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #8\n\n\n\n    FIGURE #1   IPCS COMMANDS FOR REXX EXECS\n\n\n    IPCS\n    COMMAND      DESCRIPTION\n+   ________     ______________________________________________\n\n    EVALDEF      RETRIEVE SESSION ATTRIBUTES\n    EVALDUMP     FORMAT DUMP ATTRIBUTES\n    EVALMAP      FORMAT A STORAGE MAP ENTRY\n    EVALSYM      FORMAT THE DEFINITION OF A SYMBOL\n    EVALUATE     RETRIEVE DUMP DATA FOR REXX EXEC\n    INTEGER      CONVERT A NUMBER FROM HEX TO DEC (VICE-VERSA)\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #9\n\n\n\n    FIGURE #2   @DUMPTYP    IPCS/REXX EXEC\n\n    /**************************** REXX *********************************\n    /*\n    /*\n    /*      This IPCS REXX exec will display current active\n    /*      dump information.\n    /*\n    /*\n    /*      In the MVS/XA/ESA dump header + X'40' the following\n    /*      dump header names will appear:\n    /*\n    /*\n    /*      DUMP HEADER NAME    DUMP TYPE\n    /*      ----------------    ----------------\n    /*\n    /*      AMDSADMP            STAND-ALONE DUMP\n    /*\n    /*      SVCDUMP             SYNCHRONOUS SVCDUMP\n    /*\n    /*      IEAVTSDT            SCHEDULED SVCDUMP\n    /*\n    /*      SYSMDUMP            UNFORMATTED APPLICATION DUMP\n    /*\n    /*      ACTIVE              ACTIVE MAIN STORAGE\n    /*      MAIN\n    /*      STORAGE\n    /*\n    /*******************************************************************\n\n\n    /*******************************************************************\n    /*    Check to see if we have a valid IPCS environment.            *\n    /*    Use REXX ADDRESS keyword to ensure setting of a valid        *\n    /*    IPCS environment.                                            *\n    /*******************************************************************\n\n    subcom ipcs\n    if rc \\= 0 then\n       do\n         say '@DUMPTYP does not have a valid IPCS environment'\n         exit\n       end\n    else NOP\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #10\n\n\n\n    FIGURE #2   @DUMPTYP    IPCS/REXX EXEC       (CONTINUED)\n\n\n\n    /*******************************************************************\n    /*    Change our default REXX host command environment (HCE)       *\n    /*    from TSO to IPCS.                                            *\n    /*******************************************************************\n\n\n    address ipcs\n\n\n     \" NOTE '**************************************************' PAGE \"\n     \" NOTE '*    @DUMPTYP:  STATE MVS/ESA DUMP TYPE          *'      \"\n     \" NOTE '**************************************************'      \"\n\n\n    /*******************************************************************\n    /*    Retrieve the IPCS header information and place the 8         *\n    /*    bytes at HEADER + 40 into a REXX variable.                   *\n    /*******************************************************************\n\n\n     \" EQUATE HEADER 0. HEADER  REMARK('IPCS DUMP HEADER AREA') \"\n       if rc \\= 0 then\n          do\n            say '@DUMPTYP header invalid - dump is unusable'\n            say '@DUMPTYP IPCS EQUATE return code is ' rc\n            exit\n          end\n       else NOP\n\n     \" EVALUATE HEADER+40 LE(8) CHARACTER REXX(STORAGE(DUMPTYP)) \"\n       if rc \\= 0 then\n          do\n            say '@DUMPTYP could not retrieve header+40'\n            say '@DUMPTYP IPCS EVALUATE return code is ' rc\n            exit\n          end\n       else NOP\n\n\n    /*******************************************************************\n    /*    Use REXX select logic to issue the appropriate message       *\n    /*    based on the REXX dumptyp value.                             *\n    /*    bytes at HEADER + 40 into a REXX variable.                   *\n    /*******************************************************************\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #11\n\n\n\n    FIGURE #2   @DUMPTYP    IPCS/REXX EXEC       (CONTINUED)\n\n\n       select\n       when dumptyp = 'AMDSADMP' then\n            DO\n             \" NOTE '                                       ' \"\n             \" NOTE ' DUMP TYPE IS MVS/ESA STAND-ALONE DUMP ' \"\n             \" NOTE '                                       ' \"\n            END\n\n       when dumptyp = 'SVCDUMP' then\n         DO\n          \" NOTE '                                  ' \"\n          \" NOTE ' DUMP TYPE IS SYNCHRONOUS SVCDUMP ' \"\n          \" NOTE '                                  ' \"\n         END\n\n       when dumptyp = 'IEAVTSDT' then\n         DO\n          \" NOTE '                                ' \"\n          \" NOTE ' DUMP TYPE IS SCHEDULED SVCDUMP ' \"\n          \" NOTE '                                ' \"\n         END\n\n       when dumptyp = 'SYSMDUMP' then\n         DO\n          \" NOTE '                                     ' \"\n          \" NOTE ' DUMP TYPE IS UNFORMATTED ABEND DUMP ' \"\n          \" NOTE '                                     ' \"\n         END\n\n       when dumptyp = 'ACTIVE MAIN STORAGE' then\n         DO\n          \" NOTE '                                             ' \"\n          \" NOTE ' NO DUMP:  THIS IS ACTIVE MAIN STORAGE       ' \"\n          \" NOTE '                                             ' \"\n         END\n       END\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #12\n\n\n\n    FIGURE #3   @DPRTMAJ    IPCS/REXX EXEC\n\n    /**************************** REXX *********************************\n    /*\n    /*      This REXX EXEC will list each address space JOBNAME/STCNAME\n    /*      and its addess space dispatching priority from\n    /*      highest ASCB to lowest ASCB.\n    /*\n    /*      Keyword operands     none\n    /*\n    /*******************************************************************\n\n    /*******************************************************************\n    /*    Check to see if we have a valid environment to run IPCS.     *\n    /*    Use REXX ADDRESS keyword to set a valid IPCS environment.    *\n    /*******************************************************************\n\n    subcom ipcs\n    if rc \\= 0 then\n       do\n         say '@DPRTMAJ does not have a valid IPCS environment'\n         exit\n       end\n    else NOP\n\n\n    ADDRESS IPCS\n\n\n    \" NOTE '***************************************************' PAGE \"\n    \" NOTE '*   @DPRTMAJ: LIST EACH ADDRESS SPACE DISPATCHING *'      \"\n    \" NOTE '*             PRIORITY FROM HIGHEST ASCB TO       *'      \"\n    \" NOTE '*             LOWEST ASCB.                        *'      \"\n    \" NOTE '***************************************************'      \"\n\n\n    /*******************************************************************\n    /*    Perform IPCS EQUATES for our PSA, CVT and the HIGHEST ASCB   *\n    /*    (LOWEST ASID) in the system.                                 *\n    /*******************************************************************\n\n    \" EQUATE  PSA  0.  STRUCTURE(PSA)  REMARK('PSA ADDRESS')  \"\n      if rc \\= 0 then\n         do\n           say 'EQUATE for PSA return code is' rc\n           exit\n         end\n      else NOP\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #13\n\n\n\n    FIGURE #3   @DPRTMAJ    IPCS/REXX EXEC       (CONTINUED)\n\n\n    \" EQUATE  CVT  PSA+10?  REMARK('CVT ADDRESS')  \"\n      if rc \\= 0 then\n         do\n           say 'EQUATE for CVT return code is' rc\n           exit\n         end\n      else NOP\n\n    \" EQUATE  CVTASCBH  CVT+234? REMARK('HIGHEST ASCB ADDRESS') \"\n      if rc \\= 0 then\n         do\n           say 'EQUATE for CVTASCBH return code is' rc\n           exit\n         end\n      else NOP\n\n\n    /*******************************************************************\n    /*    Issue RUNCHAIN command to go from HIGHEST ASCB to LOWEST     *\n    /*    ASCB on ASCB QUEUE and execute ASCB JOBNAME/DISPATCHING      *\n    /*    PRIORITY LISTING called external subroutine rexx exec        *\n    /*    (@DPRTMIN) to perform the actual processing.                 *\n    /*                                                                 *\n    /*    ATTENTION: I TURN OFF TRACE DUE TO THE FACT THAT IPCS        *\n    /*               PERFORMS THE SCREEN DISPLAY BEFORE THE @DPRTMAJ   *\n    /*               RUNCHAIN HAS COMPLETED.  THIS WILL AVOID          *\n    /*               MANY NASTY REXX MESSAGES AND NEGATIVE RETURN      *\n    /*               CODES.                                            *\n    /*******************************************************************\n\n    \" DROPSYM ASCB:ASCC PURGE \"\n\n    trace off\n\n    \"  RUNCHAIN ADDRESS(CVTASCBH) NAME(ASCB) LINK(4) \",\n    \"           CHAIN(999) LENGTH(416) EXEC((@DPRTMIN)) \"\n       if rc \\= 0 then\n          do\n            say 'user entered END (PF3) before display complete'\n            say 'RUNCHAIN return code is' rc\n            exit\n          end\n       else NOP\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #14\n\n\n\n    FIGURE #4   @DPRTMIN    IPCS/REXX EXEC\n\n\n    /**************************** REXX *********************************\n    /*\n    /*      This REXX EXEC will retrieve address space JOBNAME/STCNAME\n    /*      ASID and DISPATCHING PRIORITY by specifying an ASCB or\n    /*      being invoked from @DPRTMAJ.\n    /*\n    /*      Keyword operands     ASCB address\n    /*\n    /*******************************************************************\n\n    arg oneascb\n\n    /*******************************************************************\n    /*    Check to see if we have a valid environment to run IPCS.     *\n    /*    Use REXX ADDRESS keyword to set a valid IPCS environment.    *\n    /*******************************************************************\n\n    subcom ipcs\n    if rc \\= 0 then\n       do\n         say '@DPRTMIN does not have a valid IPCS environment'\n         exit\n       end\n    else NOP\n\n\n    ADDRESS IPCS\n\n\n    /*******************************************************************\n    /*    When executing @DPRTMIN by itself using an ASCB address,     *\n    /*    this block of code will allow us to enter our ASCB address   *\n    /*    as ?????? or ??????. and allow it to work correctly.         *\n    /*******************************************************************\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #15\n\n\n\n    FIGURE #4   @DPRTMIN    IPCS/REXX EXEC       (CONTINUED)\n\n\n\n    if oneascb \\= '' then\n       do\n        if right(oneascb,1) /= '.' then\n                 oneascb = oneascb\u00e2\u00e2'.'\n        \" EQUATE X \" oneascb\n        if rc = 12 then\n           do\n               say  'you entered an invalid ascb address of' oneascb\n               exit\n           end\n       end\n\n\n    /*******************************************************************\n    /*    When executing @DPRTMIN by itself using an ASCB address,     *\n    /*    this block of code will issue the message that we are        *\n    /*    running the @DPRTMIN rexx exec by itself.                    *\n    /*******************************************************************\n\n\n    if oneascb \\= '' then\n       do\n        \" NOTE '***************************************************' PAG\n        \" NOTE '*   @DPRTMIN: PERFORM ADDRESS SPACE CONTROL BLOCK *'\n        \" NOTE '*             LIST OF JOBNAME/STCNAME, ASID AND   *'\n        \" NOTE '*             DISPATCHING PRIORITY FOR A GIVEN    *'\n        \" NOTE '*             ASCB.                               *'\n        \" NOTE '***************************************************'\n       end\n\n    /*******************************************************************\n    /*    The @DPRTMAJ RUNCHAIN command passes each ASCB address to    *\n    /*    the @DPRTMIN rexx exec as IPCS symbols ASCB1, ASCB2, ASCB3,  *\n    /*    etc.                                                         *\n    /*                                                                 *\n    /*    The EVALSYM command will check for the RUNCHAIN CHAIN(999)   *\n    /*    default limit and place the passed IPCS address symbol       *\n    /*    into a rexx symbol.                                          *\n    /*                                                                 *\n    /*    If @DPRTMIN was executed alone, then the rexx ascb value     *\n    /*    is set via the oneascb rexx argument.                        *\n    /*******************************************************************\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #16\n\n\n\n    FIGURE #4   @DPRTMIN    IPCS/REXX EXEC       (CONTINUED)\n\n\n\n    if oneascb = '' then\n       do\n          \" EVALSYM LE ASCB999 REXX(ADDRESS(ASCB))\"\n       end\n    else ascb = oneascb\n\n\n    /*******************************************************************\n    /*    Determine if supplied ASCB or current ASCB is to be used.    *\n    /*                                                                 *\n    /*    Perform IPCS EQUATE to get our rexx variable back into the   *\n    /*    IPCS symbol.                                                 *\n    /*                                                                 *\n    /*    Make sure we properly equate the ascb value XXXXXX. and      *\n    /*    allow the user to specify the ending period (or not).        *\n    /*******************************************************************\n\n\n\n        if right(ascb,1) /= '.' then\n                 ascb = ascb\u00e2\u00e2'.'\n        \" EQUATE ASCB \" ascb\n\n\n    /*******************************************************************\n    /*    Save the current ASCB information in rexx variables for      *\n    /*    a later note command.                                        *\n    /*                                                                 *\n    /*    For our asid and dispatching priority values, get the        *\n    /*    decimal and hexadecimal values of each for display.          *\n    /*                                                                 *\n    /*    Generate the report.                                         *\n    /*******************************************************************\n\n\n     \" EVALUATE ASCB+25 LENGTH(1) REXX(STORAGE(ASIDX)) \"\n       if rc \\= 0 then\n          do\n            say 'EVALUATE for ASID return code is' rc\n            exit\n          end\n       else NOP\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #17\n\n\n\n    FIGURE #4   @DPRTMIN    IPCS/REXX EXEC       (CONTINUED)\n\n\n    /*******************************************************************\n    /*    Right-align the decimal and hexadecimal asid value           *\n    /*    for the report.                                              *\n    /*******************************************************************\n\n     asid = x2d(asidx)\n     do while length(asid) < 3\n        asid = ' '\u00e2\u00e2asid\n        end\n     do while length(asidx) < 2\n        asidx = ' '\u00e2\u00e2asidx\n        end\n     asidx = '('\u00e2\u00e2asidx\u00e2\u00e2')'\n\n\n     \" EVALUATE ASCB+2B LENGTH(1) REXX(STORAGE(DPRTYX)) \"\n       if rc \\= 0 then\n          do\n            say 'EVALUATE for DPRTY return code is' rc\n            exit\n          end\n       else NOP\n\n    /*******************************************************************\n    /*    Right-align the decimal and hexadecimal dprty value          *\n    /*    for the report.                                              *\n    /*******************************************************************\n\n     dprty = x2d(dprtyx)\n     do while length(dprty) < 3\n        dprty = ' '\u00e2\u00e2dprty\n        end\n     do while length(dprtyx) < 2\n        dprtyx = ' '\u00e2\u00e2dprtyx\n        end\n     dprtyx = '('\u00e2\u00e2dprtyx\u00e2\u00e2')'\n\n    /*******************************************************************\n    /*    Check each ASCB for a jobname field (if present) and         *\n    /*    a started-task name field (if present).                      *\n    /*******************************************************************\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #18\n\n\n\n    FIGURE #4   @DPRTMIN    IPCS/REXX EXEC       (CONTINUED)\n\n\n     \" EVALUATE ASCB+AC? LENGTH(8) CHARACTER REXX(STORAGE(JOBNAME)) \"\n       if rc \\= 0 then\n          do\n            say 'EVALUATE for ASCB JOBNAME return code is' rc\n            exit\n          end\n       else NOP\n\n     \" COMPARE ADDRESS(ASCB+AC) LE(4) WITH(VALUE(X'00000000')) \"\n       if rc = 0 then\n       do\n           jobname = 'N/A'\n       end\n\n\n     \" EVALUATE ASCB+B0? LENGTH(8) CHARACTER REXX(STORAGE(STCNAME)) \"\n       if rc \\= 0 then\n          do\n            say 'EVALUATE for ASCB STCNAME return code is' rc\n            exit\n          end\n       else NOP\n\n     \" COMPARE ADDRESS(ASCB+B0) LE(4) WITH(VALUE(X'00000000')) \"\n       if rc = 0 then\n       do\n           stcname = 'N/A'\n       end\n\n    /*******************************************************************\n    /*    ATTENTION: I TURN OFF TRACE DUE TO THE FACT THAT IPCS        *\n    /*               PERFORMS THE SCREEN DISPLAY BEFORE THE @DPRTMAJ   *\n    /*               RUNCHAIN HAS COMPLETED.  THIS WILL AVOID          *\n    /*               MANY NASTY REXX MESSAGES AND NEGATIVE RETURN      *\n    /*               CODES.                                            *\n    /*******************************************************************\n\n     trace off\n\n     \" NOTE '                                                        ' \"\n     \" NOTE '  STARTED TASK/TSO LOGON          ===> \"STCNAME\"        ' \"\n     \" NOTE '  BATCH INITIATED PROGRAM         ===> \"JOBNAME\"        ' \"\n     \" NOTE '  ASID VALUE (DEC/HEX)            ===> \"ASID\" \"ASIDX\"   ' \"\n     \" NOTE '  DISPATCHING PRIORITY (DEC/HEX)  ===> \"DPRTY\" \"DPRTYX\" ' \"\n     \" NOTE '                                                        ' \"\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #19\n\n\n\n    FIGURE #5   OUTPUT FROM EXECUTION OF @DPRTMAJ\n\n\n    %@DPRTMAJ\n\n\n    ***************************************************\n    *   @DPRTMAJ: LIST EACH ADDRESS SPACE DISPATCHING *\n    *             PRIORITY FROM HIGHEST ASCB TO       *\n    *             LOWEST ASCB.                        *\n    ***************************************************\n    XXX SYMBOLS DROPPED\n\n     STARTED TASK/TSO LOGON          ===> *MASTER*\n     BATCH INITIATED PROGRAM         ===> N/A\n     ASID VALUE (DEC/HEX)            ===>   1 (01)\n     DISPATCHING PRIORITY (DEC/HEX)  ===> 255 (FF)\n\n     STARTED TASK/TSO LOGON          ===> PCAUTH\n     BATCH INITIATED PROGRAM         ===> N/A\n     ASID VALUE (DEC/HEX)            ===>   2 (02)\n     DISPATCHING PRIORITY (DEC/HEX)  ===> 119 (77)\n\n     STARTED TASK/TSO LOGON          ===> RASP\n     BATCH INITIATED PROGRAM         ===> N/A\n     ASID VALUE (DEC/HEX)            ===>   3 (03)\n     DISPATCHING PRIORITY (DEC/HEX)  ===> 255 (FF)\n\n     etc.\n     etc.\n     etc.\n\n    125 BLOCKS PROCESSED\n\n\n\n    FIGURE #6   OUTPUT FROM EXECUTION OF @DPRTMIN    (CONTINUED)\n\n\n\n    %@DPRTMIN ??????.\n\n    (where ??????. is the address of the RASP ASCB)\n\n1\n\n         IPCS/ESA Customization Using REXX  (DIAGRAMS)       Page #20\n\n\n\n    FIGURE #6   OUTPUT FROM EXECUTION OF @DPRTMIN    (CONTINUED)\n\n\n    ***************************************************\n    *   @DPRTMIN: PERFORM ADDRESS SPACE CONTROL BLOCK *\n    *             LIST OF JOBNAME/STCNAME, ASID AND   *\n    *             DISPATCHING PRIORITY FOR A GIVEN    *\n    *             ASCB.                               *\n    ***************************************************\n\n     STARTED TASK/TSO LOGON          ===> RASP\n     BATCH INITIATED PROGRAM         ===> N/A\n     ASID VALUE (DEC/HEX)            ===>   3 (03)\n     DISPATCHING PRIORITY (DEC/HEX)  ===> 255 (FF)\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT184/FILE184.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT184", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}