         TITLE 'IFMTMASK - EDIT INPUT FIELD BY USING FORMAT MASK'
* ******************************************************************* *
*                                                                     *
*    IIII   FFFFFFF M     M TTTTTTTT M     M    A     SSSSS  KK   KK  *
*     II    FF      MM   MM    TT    MM   MM   AAA   SS   SS KK  KK   *
*     II    FF      MMM MMM    TT    MMM MMM  AA AA  SS      KK KK    *
*     II    FFFFF   MMMMMMM    TT    MMMMMMM AA   AA  SSSSS  KKKK     *
*     II    FF      MM M MM    TT    MM M MM AA   AA      SS KKKK     *
*     II    FF      MM   MM    TT    MM   MM AAAAAAA SS   SS KK KK    *
*     II    FF      MM   MM    TT    MM   MM AA   AA SS   SS KK  KK   *
*    IIII   FF      MM   MM    TT    MM   MM AA   AA  SSSSS  KK   KK  *
*                                                                     *
* ******************************************************************* *
* THIS SUBROUTINE SCANS AN INPUT FIELD (DISPLAY FORMAT) AND MOVES THE *
* CHARACTERS TO AN OUTPUT FIELD BASED UPON THE CORRESPONDING BYTE IN  *
* A FORMAT MASK AS FOLLOWS:                                           *
*                                                                     *
*    1. IF A FORMAT BYTE IS '9' THEN THE CORRESPONDING INPUT BYTE     *
*       MUST BE NUMERIC (0 THROUGH 9). THE INPUT BYTE IS MOVED TO THE *
*       OUTPUT FIELD.                                                 *
*    2. IF A FORMAT BYTE IS 'X' THEN NO EDIT IS PERFORMED. THE INPUT  *
*       BYTE IS MOVED TO THE OUTPUT FIELD.                            *
*    3. IF A FORMAT BYTE IS ANYTHING OTHER THAN '9' OR 'X' THEN THE   *
*       CORRESPONDING INPUT BYTE MUST BE THE SAME CHARACTER. THE      *
*       INPUT BYTE IS NOT MOVED TO THE OUTPUT FIELD.                  *
*                                                                     *
* NONE OF THE INITIALIZED VARIABLES ARE CHANGED DURING THE ROUTINE'S  *
* EXECUTION AND THERE ARE NO INTERNAL DATA FIELDS. ALL MANIPULATION   *
* IS DONE THROUGH REGISTERS. THE ROUTINE IS COMPLETELY REENTRANT.     *
*                                                                     *
* FOUR FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:                *
*                                                                     *
*   1. A FIELD OF VARYING LENGTH CONTAINING THE INPUT CHARACTERS,     *
*   2. A 2 BYTE FIELD (IN BINARY FORMAT) CONTAINING THE LENGTH OF     *
*      THE FORMAT MASK FIELD (BY DEFINITION, THIS IS ALSO THE         *
*      LENGTH OF THE INPUT FIELD),                                    *
*   3. A FIELD CONTAINING THE FORMAT MASK, AND                        *
*   4. A FIELD TO CONTAIN THE CHARACTERS EXTRACTED FROM THE INPUT     *
*      FIELD.                                                         *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                           *
*                                                                     *
*              CALL IFMTMASK,(INFIELD,FMTLEN,FMTMASK,OUTFIELD)        *
*                 . . .                                               *
*     INFIELD  DS   CL14'(915) 695-7000'                              *
*     FMTLEN   DS   H'14'                                             *
*     FMTMASK  DS   CL14'(999) 999-9999'                              *
*     OUTFIELD DS   ZL10                                              *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                         *
*                                                                     *
*     01  INPUT-FIELD         PIC X(14) VALUE '(915) 695-7000'.       *
*     01  FORMAT-FIELD-LENGTH PIC S9(4) COMP VALUE 14.                *
*     01  FORMAT-MASK         PIC X(14) VALUE '(999) 999-9999'.       *
*     01  OUTPUT-FIELD        PIC 9(10).                              *
*                                                                     *
*     CALL 'IFMTMASK' USING INPUT-FIELD, INPUT-FIELD-LENGTH,          *
*                           FORMAT-MASK, OUTPUT-FIELD.                *
*                                                                     *
* NOTE: BY DEFINITION, THE INPUT FIELD AND THE FORMAT MASK FIELD WILL *
*       HAVE THE SAME LENGTH.                                         *
*                                                                     *
* POSSIBLE RETURN CODE VALUES:                                        *
*     0 - FIELD SUCCESSFULLY CONVERTED                                *
*     8 - INPUT FIELD DOES NOT CONFORM TO ACCEPTABLE FORMAT RULES     *
* ******************************************************************* *
* ******************************************************************* *
         EJECT
         PRINT NOGEN
IFMTMASK CSECT
         EYEC  'EDIT INPUT FIELD USING FORMAT MASK'
BEGIN    SAVE  (14,12)                 SAVE CALLER'S REGISTERS
*
         BALR  BASE,0                  ESTABLISH BASE REGISTER
         USING *,BASE                  ASSUME BASE REGISTER
*
         LM    INREG,OUTREG,0(R1)      LOAD ADDRESSES OF PARAMETERS
*
         SR    R15,R15                 ASSUME RETURN CODE OF ZERO
*
         LH    LGTHREG,0(,LGTHREG)     LOAD FIELD LENGTH
         LTR   LGTHREG,LGTHREG         IS INPUT FIELD LENGTH ZERO?
         BZ    RETURN                     YES, JUST RETURN TO CALLER
*
*    MAIN FIELD PROCESSING LOOP
*
LOOP     CLI   0(MASKREG),C'9'         IS NUMERIC BYTE EXPECTED?
         BE    NUMMOVE                    YES, GO PROCESS
         CLI   0(MASKREG),C'X'         IS ANY CHARACTER ACCEPTABLE?
         BE    ALPMOVE                    YES, GO PROCESS
*
*    INPUT BYTE MUST MATCH MASK BYTE
*
         CLC   0(1,MASKREG),0(INREG)   DO THEY MATCH?
         BNE   ERROR                      NO, RETURN ERROR
         B     ENDLOOP                 JUMP TO COMMON EXIT POINT
*
*    INPUT BYTE MUST BE NUMERIC DIGIT (X'F0' - X'F9')
*
NUMMOVE  CLI   0(INREG),C'0'           IS BYTE LESS THAN X'F0'
         BL    ERROR                      YES, RETURN ERROR
         CLI   0(INREG),C'9'           IS BYTE GREATER THAN X'F9'
         BH    ERROR                      YES, RETURN ERROR
*
*    ANY BYTE IS ACCEPTABLE, MOVE TO OUTPUT FIELD
*
ALPMOVE  MVC   0(1,OUTREG),0(INREG)    MOVE INPUT BYTE TO OUTPUT FIELD
         LA    OUTREG,1(OUTREG)        POINT TO NEXT OUTPUT CHARACTER
*
*    TERMINATION POINT FOR MAIN LOOP
*
ENDLOOP  LA    MASKREG,1(,MASKREG)     POINT TO NEXT FORMAT CHARACTER
         LA    INREG,1(,INREG)         POINT TO NEXT INPUT CHARACTER
         BCT   LGTHREG,LOOP            LOOP FOR EACH CHARACTER IN MASK
*
*    AT END OF LOOP, BRANCH AROUND ERROR TO COMMON RETURN POINT
*
         B     RETURN
*
*    AN ERROR WAS FOUND IN THE INPUT, RETURN CODE IS SET TO "8"
*
ERROR    LA    R15,8                   RETURN CODE OF 8
*
*    RETURN TO CALLER WITH RETURN CODE IN REGISTER 15
*
RETURN   RETURN (14,12),RC=(15)
*
* ******************************************************************* *
* *************************** CONSTANTS ***************************** *
* ******************************************************************* *
         LTORG
         EJECT
* ******************************************************************* *
* **************************** EQUATES ****************************** *
* ******************************************************************* *
R0       EQU   0                       REGISTER 0
R1       EQU   1                       REGISTER 1
R2       EQU   2                       REGISTER 2
R3       EQU   3                       REGISTER 3
R4       EQU   4                       REGISTER 4
INREG    EQU   5                       INPUT FIELD
LGTHREG  EQU   6                       INPUT LENGTH
MASKREG  EQU   7                       FORMAT MASK
OUTREG   EQU   8                       OUTPUT FIELD
R9       EQU   9                       REGISTER 9
R10      EQU   10                      REGISTER 10
R11      EQU   11                      REGISTER 11
BASE     EQU   12                      BASE REGISTER
R13      EQU   13                      REGISTER 13
R14      EQU   14                      REGISTER 14
R15      EQU   15                      REGISTER 15
* ******************************************************************* *
         END
