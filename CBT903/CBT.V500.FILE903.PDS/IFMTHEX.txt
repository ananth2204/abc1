         TITLE 'IFMTHEX - CONVERT INPUT HEX DATA FIELD TO HEX DIGITS'
* ******************************************************************* *
*                                                                     *
*    IIII   FFFFFFF M     M TTTTTTTT HH   HH EEEEEE  XX   XX          *
*     II    FF      MM   MM    TT    HH   HH EE      XX   XX          *
*     II    FF      MMM MMM    TT    HH   HH EE       XX XX           *
*     II    FFFFF   MMMMMMM    TT    HHHHHHH EEEE      XXX            *
*     II    FF      MM M MM    TT    HH   HH EE        XXX            *
*     II    FF      MM   MM    TT    HH   HH EE       XX XX           *
*     II    FF      MM   MM    TT    HH   HH EE      XX   XX          *
*    IIII   FF      MM   MM    TT    HH   HH EEEEEEE XX   XX          *
*                                                                     *
* ******************************************************************* *
* THIS SUBROUTINE READS AN INPUT FIELD (DISPLAY FORMAT) WHERE EACH    *
* 2 BYTES REPRESENT THE CHARACTER REPRESENTATION OF A PAIR OF HEX     *
* DIGITS AND CONVERTS THEM INTO THE CORRESPONDING OUTPUT CHARACTER.   *
*                                                                     *
* NONE OF THE INITIALIZED VARIABLES ARE CHANGED DURING THE ROUTINE'S  *
* EXECUTION AND THERE ARE NO INTERNAL DATA FIELDS. ALL MANIPULATION   *
* IS DONE THROUGH REGISTERS. THE ROUTINE IS COMPLETELY REENTRANT.     *
*                                                                     *
* THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:               *
*                                                                     *
*   1. A FIELD OF VARYING LENGTH CONTAINING THE INPUT CHARACTERS,     *
*   2. A 2 BYTE FIELD (IN BINARY FORMAT) CONTAINING THE LENGTH OF     *
*      THE INPUT FIELD (THIS NUMBER MUST BE EVENLY DIVISIBLE BY 2),   *
*   3. A FIELD TO CONTAIN THE GENERATED HEX CHARACTERS.               *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                           *
*                                                                     *
*             CALL IFMTHEX,(INFIELD,INLENGTH,OUTFIELD)                *
*                . . .                                                *
*    INFIELD  DS   CL12'F1F2F3C1C2C3'                                 *
*    INLENGTH DS   H'12'                                              *
*    OUTFIELD DS   CL6'123ABC'                                        *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                         *
*                                                                     *
*     01  INPUT-FIELD           PIC X(12) VALUE 'F1F2F3C1C2C3'.       *
*     01  INPUT-FIELD-LENGTH    PIC S9(4) COMP VALUE 12.              *
*     01  OUTPUT-FIELD          PIC X(6).                             *
*                                                                     *
*     CALL 'IFMTHEX' USING INPUT-FIELD, INPUT-FIELD-LENGTH,           *
*                          OUTPUT-FIELD.                              *
*                                                                     *
* NOTE: INPUT-FIELD-LENGTH MUST BE EVENLY DIVISIBLE BY 2. THE LENGTH  *
*       OF THE OUTPUT-FIELD SHOULD BE HALF THAT OF THE INPUT-FIELD.   *
*                                                                     *
* POSSIBLE RETURN CODE VALUES:                                        *
*     0 - FIELD SUCCESSFULLY CONVERTED                                *
*     8 - INPUT FIELD DOES NOT CONTAIN VALID "HEX" DIGITS             *
* ******************************************************************* *
* ******************************************************************* *
         EJECT
         PRINT NOGEN
IFMTHEX  CSECT
         EYEC  'CONVERT INPUT HEX FIELD INTO HEX DIGITS'
BEGIN    SAVE  (14,12)                 SAVE SALLER'S REGISTERS
*
         BALR  BASE,0                  ESTABLISH BASE REGISTER
         USING *,BASE                  ASSUME BASE REGISTER
*
         LM    INREG,OUTREG,0(R1)      LOAD ADDRESSES OF PARAMETERS
*
         SR    R15,R15                 ASSUME RETURN CODE OF ZERO
*
         LH    LGTHREG,0(,LGTHREG)     LOAD FIELD LENGTH
         LTR   LGTHREG,LGTHREG         IS OUTPUT FIELD LENGTH ZERO?
         BZ    RETURN                    YES, JUST RETURN TO CALLER
*
         LR    R2,LGTHREG              COPY LENGTH FOR TEST
         N     R2,=F'1'                IS LENGTH EVEN (1 BIT OFF)?
         BNZ   ERROR                      NO, RETURN ERROR
*
         SRA   LGTHREG,1                DIVIDE LENGTH BY 2
*
*    MAIN LOOP EXECUTED 1 PASS FOR EACH 2 BYTES INPUT
*
BYTELOOP SR    R2,R2                   CLEAR WORK REGISTER
         LA    R4,2                    DO NIBBLE LOOP TWICE
*
*    SUBORDINATE LOOP EXECUTED 2 PASSES FOR EACH INPUT BYTE
*
NIBLLOOP SR    R3,R3                   CLEAR WORK REGISTER
         IC    R3,0(,INREG)            GET CHARACTER FROM INPUT
         C     R3,=F'193'              COMPARE TO CHARACTER "A"
         BL    ERROR                      IF LESS, BAD CHARACTER
         C     R3,=F'198'              COMPARE TO CHARACTER "F"
         BH    DIGIT                      IF GREATER, CHECK FOR DIGIT
         SH    R3,=H'183'              CONVERT TO BINARY
         B     SAVENIBL                SAVE NIBBLE
DIGIT    C     R3,=F'240'              COMPARE TO DIGIT "0"
         BL    ERROR                      IF LESS, BAD CHARACTER
         C     R3,=F'249'              COMPARE TO DIGIT "9"
         BH    ERROR                      IF GREATER, BAD CHARACTER
         SH    R3,=F'240'              CONVERT TO BINARY
SAVENIBL SLL   R3,28                   SHIFT NIBBLE LEFT IN REGISTER
         SLDL  R2,4                    SHIFT NIBBLE INTO R2
         LA    INREG,1(,INREG)         BUMP INPUT ADDRESS
         BCT   R4,NIBLLOOP             CONVERT NEXT NIBBLE
*
         STC   R2,0(,OUTREG)           STORE CONVERTED BYTE
         LA    OUTREG,1(,OUTREG)       BUMP OUTPUT ADDRESS
         BCT   LGTHREG,BYTELOOP        CONVERT NEXT BYTE
*
*    AT COMPLETION OF OUTER LOOP, JUMP TO COMMON RETURN POINT
*
         B     RETURN                  RETURN TO CALLER
*
*    ERROR OCCURRED, SET RETURN CODE
*
ERROR    LA    R15,8                   RETURN CODE OF 8
*
*    RETURN TO CALLER WITH RETURN CODE IN REGISTER 15
*
RETURN   RETURN (14,12),RC=(15)
         SPACE
* ******************************************************************* *
* *************************** CONSTANTS ***************************** *
* ******************************************************************* *
         LTORG
         EJECT
* ******************************************************************* *
* ***************************** EQUATES ***************************** *
* ******************************************************************* *
R0       EQU   0                       REGISTER 0
R1       EQU   1                       REGISTER 1
R2       EQU   2                       REGISTER 2
R3       EQU   3                       REGISTER 3
R4       EQU   4                       REGISTER 4
INREG    EQU   5                       INPUT FIELD
LGTHREG  EQU   6                       INPUT FIELD LENGTH
OUTREG   EQU   7                       OUTPUT FIELD
R8       EQU   8                       REGISTER 8
R9       EQU   9                       REGISTER 9
R10      EQU   10                      REGISTER 10
R11      EQU   11                      REGISTER 11
BASE     EQU   12                      BASE REGISTER
R13      EQU   13                      REGISTER 13
R14      EQU   14                      REGISTER 14
R15      EQU   15                      REGISTER 15
         END
