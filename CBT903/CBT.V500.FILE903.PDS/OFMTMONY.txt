         TITLE 'OFMTMONY - FORMAT MONETARY AMOUNT IN WORDS'
* ******************************************************************* *
*                                                                     *
*    OOOOO  FFFFFFF M     M TTTTTTTT M     M  OOOOO  NN   NN YY   YY  *
*   OO   OO FF      MM   MM    TT    MM   MM OO   OO NNN  NN YY   YY  *
*   OO   OO FF      MMM MMM    TT    MMM MMM OO   OO NNN  NN YY   YY  *
*   OO   OO FFFFF   MMMMMMM    TT    MMMMMMM OO   OO NNNN NN  YY YY   *
*   OO   OO FF      MM M MM    TT    MM M MM OO   OO NN NNNN   YYY    *
*   OO   OO FF      MM   MM    TT    MM   MM OO   OO NN  NNN   YY     *
*   OO   OO FF      MM   MM    TT    MM   MM OO   OO NN  NNN   YY     *
*    OOOOO  FF      MM   MM    TT    MM   MM  OOOOO  NN   NN   YY     *
*                                                                     *
***********************************************************************
***********************************************************************
* THIS SUBROUTINE CONVERTS A NUMERIC INPUT FIELD INTO THE EQUIVALENT  *
* WRITTEN WORDS DESCRIBING THE VALUE (SUCH AS USED IN WRITING CHECKS) *
*                                                                     *
* NONE OF THE INITIALIZED VARIABLES ARE CHANGED DURING THE ROUTINE'S  *
* EXECUTION AND THERE ARE NO INTERNAL DATA FIELDS. ALL MANIPULATION   *
* IS DONE THROUGH REGISTERS. THE ROUTINE IS COMPLETELY REENTRANT.     *
*                                                                     *
* TWO FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:                 *
*                                                                     *
*   1) A 13 BYTE NUMERIC INPUT FIELD (IN ZONED-DECIMAL FORMAT), AND   *
*   2) A 160 BYTE BUFFER WHICH WILL CONTAIN THE FORMATTED OUTPUT      *
*      (OUTPUT WILL BE LEFT JUSTIFIED AND PADDED WITH ASTERISKS).     *
*                                                                     *
* THE UPPER LIMIT FOR THE INPUT VALUE IS 99,999,999,999.99 = NINETY-  *
* NINE BILLION, NINE HUNDRED AND NINETY-NINE MILLION, NINE HUNDRED    *
* AND NINETY-NINE THOUSAND, NINE HUNDRED AND NINETY-NINE DOLLARS AND  *
* 99 CENTS. THE LONGEST OUTPUT STRING POSSIBLE IS FOR THE AMOUNT OF   *
* 77,777,777,777.77 AND IS 158 CHARACTERS.                            *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                           *
*                                                                     *
*              CALL OFMTMONY,(VALUEIN,VALUEOUT)                       *
*                 . . .                                               *
*     VALUEIN  DS   ZL13'0000000152995'                               *
*     VALUEOUT DS   CL160' '                                          *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                         *
*                                                                     *
*     01  OFMTMONY-PARAMETERS.                                        *
*         02  VALUE-INPUT   PIC S9(11)V99 VALUE +1529.95.             *
*         02  VALUE-OUTPUT  PIC X(160).                               *
*                                                                     *
*         CALL 'OFMTMONY' USING VALUE-INPUT, VALUE-OUTPUT.            *
*                                                                     *
* THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:                  *
*                                                                     *
*     0 - FIELD SUCCESSFULLY CONVERTED                                *
*     4 - INPUT WAS NEGATIVE, VOID MESSAGE RETURNED                   *
*     8 - INPUT CONTAINED NON-NUMERIC CHARACTERS                      *
***********************************************************************
***********************************************************************
         EJECT
         PRINT NOGEN
OFMTMONY CSECT
         EYEC  'FORMAT MONEYTARY AMOUNT IN WORDS'
BEGIN    SAVE  (14,12)                 SAVE CALLER'S REGISTERS
*
         BALR  BASE,0                  ESTABLISH BASE REGISTER
         USING *,BASE                  ASSUME BASE REGISTER
*
         LM    INREG,OUTREG,0(R1)      LOAD ADDRESSES OF PARAMETERS
*
*    INITIALIZE RETURN CODE
*
         SR    R15,R15                 ASSUME GOOD RETURN
*
*    TEST FOR NON-NUMERIC CHARACTERS IN INPUT FIELD
*
         LR    R2,INREG                ADDRESS INPUT FIELD
         LA    R3,12                   FIELD LENGTH MINUS 1
P1NLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'
         BL    P1NERR                  IF YES, FIELD CONTAINS BAD DATA
         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'
         BH    P1NERR                  IF YES, FIELD CONTAINS BAD DATA
         LA    R2,1(0,R2)              ADDRESS NEXT BYTE
         BCT   R3,P1NLOOP              CONTINUE TESTING
         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER
         LR    R2,R3                   COPY INTO R2
         N     R3,=F'15'               ISOLATE DIGIT PORTION
         CH    R3,=H'9'                TEST GREATER THAN 9
         BH    P1NERR                  IF YES, FIELD CONTAINS BAD DATA
         SRL   R2,4                    ISOLATE ZONE PORTION
         CH    R2,=H'12'               TEST FOR 'C' ZONE
         BE    P1OK2                   IF YES, FIELD IS VALID NUMERIC
         CH    R2,=H'13'               TEST FOR 'D' ZONE
         BE    P1OK1                   IF YES, FIELD IS VALID NUMERIC
         CH    R2,=H'15'               TEST FOR 'F' ZONE
         BE    P1OK2                   IF YES, FIELD IS VALID NUMERIC
*
*    INPUT AMOUNT CONTAINED NON-NUMERIC CHARACTER
*
P1NERR   LA    R15,8                   INDICATE BAD DATA
         B     RETURN                  AND RETURN TO CALLER
*
*    SET RETURN CODE TO INDICATE NEGATIVE INPUT VALUE
*
P1OK1    LA    R15,4                   SET RETURN CODE TO '4'
*
*    SAVE LOW ORDER BYTE OF INPUT VALUE AND CLEAR ANY SIGN
*
P1OK2    IC    R11,12(,INREG)          SAVE LOW ORDER BYTE
         OI    12(INREG),X'F0'         CLEAR SIGN NIBBLE
*
*    INITIALIZE REGISTERS FOR CONVERSION
*
         SR    WLREG,WLREG             CLEAR WORD LENGTH REGISTER
         ICM   FLAGS,B'0100',=C' '     SET SEPARATOR TO SPACE
         ICM   FLAGS,B'0010',=C'S'     DEFAULT PLURAL DOLLARS
         CLC   0(11,INREG),ZEROS1+3    IS DOLLAR AMOUNT ONLY 1?
         BNE   INIT1                   NO, USE PLURAL "DOLLARS"
         ICM   FLAGS,B'0010',=C' '     INDICATE SINGULAR DOLLAR
INIT1    ICM   FLAGS,B'0001',=C'S'     DEFAULT PLURAL CENTS
         CLC   11(2,INREG),ZEROS1+12   IS CENTS AMOUNT ONLY 1?
         BNE   INIT2                   NO, USE PLURAL "CENTS"
         ICM   FLAGS,B'0001',=C' '     INDICATE SINGULAR CENT
*
*    FILL OUTPUT BUFFER WITH ASTERISKS
*
INIT2    MVI   0(OUTREG),C'*'          INITIALIZE OUTPUT
         MVC   1(159,OUTREG),0(OUTREG) AREA OF 160 BYTES
*
*    IF INPUT WAS NEGATIVE, RETURN "V O I D"
*
         LTR   R15,R15                 WAS INPUT NEGATIVE?
         BNZ   VOIDCK                  YES, RETURN "V O I D"
*
         CLC   0(13,INREG),ZEROS1      IS ENTIRE AMOUNT ZERO?
         BNE   $DOLLARS                NO, GO BEGIN CONVERSION
*
*    IF AMOUNT WAS NEGATIVE OR ZERO, RETURN "V O I D"
*
VOIDCK   LA    WORDREG,VOID            "V O I D"
         ICM   FLAGS,B'0100',=C'!'     INDICATE NO SEPARATOR FOLLOWS
         BAL   SECBAL,PUTWORD
         B     RESTORE                 RESTORE INPUT VALUE AND RETURN
*
*    IF THE ENTIRE DOLLAR PORTION OF THE FIELD IS ZEROS, OUTPUT THE
*    WORD "ONLY" AND JUMP TO PROCESS CENTS AREA
*
$DOLLARS CLC   0(11,INREG),ZEROS1      IS ENTIRE DOLLAR AMOUNT ZERO?
         BNE   $BILLCK                 NO, GO CHECK BILLIONS
*
         LA    WORDREG,ONLY            "ONLY"
         BAL   SECBAL,PUTWORD
         LA    INREG,11(,INREG)        ADDRESS CENTS
         B     $CENTS                  GO FORMAT CENTS
*
*    IF THE 2 PLACES THAT CONTAIN THE BILLIONS PORTION ARE ZERO,
*    JUMP TO PROCESS THE MILLIONS PORTION
*
$BILLCK  CLC   0(2,INREG),ZEROS1       IS BILLIONS AMOUNT ZERO?
         BNE   $BILLGO                 NO, CONTINUE
*
         LA    INREG,2(,INREG)         ADDRESS MILLIONS
         B     $MILLCK                 GO CHECK MILLIONS
*
$BILLGO  ICM   FLAGS,B'1000',=C'Y'     INDICATE BILLIONS GROUP
         BAL   PRIBAL,$GROUP           PROCESS GROUP
         ICM   FLAGS,B'1000',=C'N'     RESET BILLIONS GROUP INDICATOR
*
         CLC   0(9,INREG),ZEROS1       IS REMAINDER OF DOLLARS ZERO?
         BE    $BILL2                  YES, LEAVE SEPARATOR AS SPACE
*
         CLC   0(6,INREG),ZEROS1       ARE NEXT TWO GROUPS ZERO?
         BNE   $BILL1                  NO, INSERT COMMA
*
         ICM   FLAGS,B'1000',=C'A'     FLAG TO INSERT "AND"
         B     $BILL2                  CONTINUE
*
$BILL1   ICM   FLAGS,B'0100',=C','     CHANGE SEPARATOR TO COMMA
*
$BILL2   LA    WORDREG,BILLION         "BILLION"
         BAL   SECBAL,PUTWORD
*
         CLM   FLAGS,B'0100',=C','     IS SEPARATOR A COMMA?
         BNE   $BILL3                  NO, GO CHECK "AND" FLAG
*
         MVI   0(OUTREG),C' '          INSERT SPACE
         LA    OUTREG,1(,OUTREG)       BUMP OUTPUT ADDRESS
         ICM   FLAGS,B'0100',=C' '     CHANGE SEPARATOR TO SPACE
         B     $MILLCK                 GO CHECK MILLIONS
*
$BILL3   CLM   FLAGS,B'1000',=C'A'     IS "AND" FLAG SET?
         BNE   $MILLCK                 NO, GO CHECK MILLIONS
*
         LA    WORDREG,AND             "AND"
         BAL   SECBAL,PUTWORD
         ICM   FLAGS,B'1000',=C'N'     RESET "AND" FLAG
*
*    IF THE 3 PLACES THAT CONTAIN THE MILLIONS PORTION ARE ZERO,
*    JUMP TO PROCESS THE THOUSANDS PORTION
*
$MILLCK  CLC   0(3,INREG),ZEROS1       IS MILLIONS AMOUNT ZERO?
         BNE   $MILLGO                 NO, CONTINUE
*
         LA    INREG,3(,INREG)         ADDRESS THOUSANDS
         B     $THOUCK                 GO CHECK THOUSANDS
*
$MILLGO  BAL   PRIBAL,$GROUP           PROCESS GROUP
*
         CLC   0(6,INREG),ZEROS1       IS REMAINDER OF DOLLARS ZERO?
         BE    $MILL2                  YES, LEAVE SEPARATOR AS SPACE
*
         CLC   0(3,INREG),ZEROS1       IS NEXT GROUP ZERO?
         BNE   $MILL1                  NO, INSERT COMMA
*
         ICM   FLAGS,B'1000',=C'A'     FLAG TO INSERT "AND"
         B     $MILL2                  CONTINUE
*
$MILL1   ICM   FLAGS,B'0100',=C','     CHANGE SEPARATOR TO COMMA
*
$MILL2   LA    WORDREG,MILLION         "MILLION"
         BAL   SECBAL,PUTWORD
*
         CLM   FLAGS,B'0100',=C','     IS SEPARATOR A COMMA?
         BNE   $MILL3                  NO, GO CHECK "AND" FLAG
*
         MVI   0(OUTREG),C' '          INSERT SPACE
         LA    OUTREG,1(,OUTREG)       BUMP OUTPUT ADDRESS
         ICM   FLAGS,B'0100',=C' '     CHANGE SEPARATOR TO SPACE
         B     $THOUCK                 GO CHECK THOUSANDS
*
$MILL3   CLM   FLAGS,B'1000',=C'A'     IS "AND" FLAG SET?
         BNE   $THOUCK                 NO, GO CHECK THOUSANDS
*
         LA    WORDREG,AND             "AND"
         BAL   SECBAL,PUTWORD
         ICM   FLAGS,B'1000',=C'N'     RESET "AND" FLAG
*
*    IF THE 3 PLACES THAT CONTAIN THE THOUSANDS PORTION ARE ZERO,
*    JUMP TO PROCESS THE HUNDREDS PORTION
*
$THOUCK  CLC   0(3,INREG),ZEROS1       IS THOUSANDS AMOUNT ZERO?
         BNE   $THOUGO                 NO, CONTINUE
*
         LA    INREG,3(,INREG)         ADDRESS HUNDREDS
         B     $HUNDCK                 GO CHECK HUNDREDS
*
$THOUGO  BAL   PRIBAL,$GROUP           PROCESS GROUP
*
         CLC   0(3,INREG),ZEROS1       IS REMAINDER OF DOLLARS ZERO?
         BE    $THOU2                  YES, LEAVE SEPARATOR AS SPACE
*
         CLC   0(1,INREG),ZEROS1       IS HUNDREDS PLACE ZERO?
         BNE   $THOU1                  NO, CHANGE SEPARATOR TO COMMA
*
         ICM   FLAGS,B'1000',=C'A'     FLAG TO INSERT "AND"
         B     $THOU2                  CONTINUE
*
$THOU1   ICM   FLAGS,B'0100',=C','     CHANGE SEPARATOR TO COMMA
*
$THOU2   LA    WORDREG,THOUSAND        "THOUSAND"
         BAL   SECBAL,PUTWORD
*
         CLM   FLAGS,B'0100',=C','     IS SEPARATOR A COMMA?
         BNE   $THOU3                  NO, GO CHECK "AND" FLAG
*
         MVI   0(OUTREG),C' '          INSERT SPACE
         LA    OUTREG,1(,OUTREG)       BUMP OUTPUT ADDRESS
         ICM   FLAGS,B'0100',=C' '     CHANGE SEPARATOR TO SPACE
         B     $HUNDCK                 GO CHECK HUNDREDS
*
$THOU3   CLM   FLAGS,B'1000',=C'A'     IS "AND" FLAG SET?
         BNE   $HUNDCK                 NO, GO CHECK HUNDREDS
*
         LA    WORDREG,AND             "AND"
         BAL   SECBAL,PUTWORD
         ICM   FLAGS,B'1000',=C'N'     RESET "AND" FLAG
*
*    IF THE 3 PLACES THAT CONTAIN THE HUNDREDS PORTION ARE ZERO,
*    JUMP TO FINISH THE DOLLARS PORTION
*
$HUNDCK  CLC   0(3,INREG),ZEROS1       IS HUNDREDS AMOUNT ZERO?
         BNE   $HUNDGO                 NO, CONTINUE
*
         LA    INREG,3(,INREG)         ADDRESS CENTS GROUP
         B     $DFINI                  GO PUT "DOLLARS"
*
$HUNDGO  BAL   PRIBAL,$GROUP           PROCESS GROUP
*
*    FINISH THE DOLLARS PORTION BY DETERMINING IF THE WORD
*    "DOLLARS" SHOULD BE SINGULAR OR PLURAL
*
$DFINI   CLM   FLAGS,B'0010',=C'S'     IS DOLLARS AMOUNT PLURAL?
         BE    $DFINI0                 YES, USE PLURAL
         LA    WORDREG,DOLLAR          "DOLLAR"
         B     $DFINI1
$DFINI0  LA    WORDREG,DOLLARS         "DOLLARS"
$DFINI1  BAL   SECBAL,PUTWORD
*
*    CONNECT DOLLARS AND CENTS WITH "AND"
*
         LA    WORDREG,AND             "AND"
         BAL   SECBAL,PUTWORD
*
*    IF CENTS PORTION IS ZERO, OUTPUT "NO CENTS"
*
$CENTS   CLC   0(2,INREG),ZEROS1       IS CENTS ZERO?
         BNE   $CENTS1                 NO, FORMAT DIGITS
*
         LA    WORDREG,NO              "NO"
         BAL   SECBAL,PUTWORD
         B     $CFINI                  GO FINISH
*
*    CENTS PORTION WASN'T ZERO, SO OUTPUT DIGITS OF CENTS
*    ZERO SUPPRESSING THE FIRST DIGIT
*
$CENTS1  CLI   0(INREG),C'0'           IS FIRST DIGIT ZERO?
         BE    $CENTS2                 YES, OUTPUT SECOND DIGIT
*
         MVC   0(1,OUTREG),0(INREG)    OUTPUT FIRST DIGIT
         LA    OUTREG,1(,OUTREG)       BUMP OUTPUT ADDRESS
*
$CENTS2  MVC   0(1,OUTREG),1(INREG)    OUTPUT SECOND DIGIT
         LA    OUTREG,1(,OUTREG)       BUMP OUTPUT ADDRESS
*
         MVI   0(OUTREG),C' '          INSERT SPACE
         LA    OUTREG,1(,OUTREG)       BUMP OUTPUT ADDRESS
*
*    FINISH THE CENTS PORTION BY DETERMINING IF THE WORD
*    "CENTS" SHOULD BE SINGULAR OR PLURAL
*
$CFINI   CLM   FLAGS,B'0001',=C'S'     IS CENTS AMOUNT PLURAL?
         BE    $CFINI0                 YES, USE PLURAL
         LA    WORDREG,CENT            "CENT"
         B     $CFINI1
$CFINI0  LA    WORDREG,CENTS           "CENTS"
$CFINI1  ICM   FLAGS,B'0100',=C'!'     INDICATE NO SEPARATOR FOLLOWS
         BAL   SECBAL,PUTWORD
*
*    RESTORE LOW ORDER BYTE OF INPUT VALUE
*
RESTORE  L     R2,0(,R1)               ADDRESS INPUT FIELD
         STC   R11,12(,R2)             RESTORE SAVED BYTE
*
*    RETURN TO CALLER WITH RETURN CODE IN R15
*
RETURN   RETURN (14,12),RC=(15)
*
*     EACH GROUP OF 3 DIGITS TO THE LEFT OF THE DECIMAL POINT
*     ARE PROCESSED WITH THE CODE BELOW. ONLY THE BILLIONS GROUP
*     REQUIRES A UNIQUE TEST AS THERE IS NO HUNDRED BILLION BYTE
*
$GROUP   CLM   FLAGS,B'1000',=C'Y'     IS THIS BILLIONS GROUP
         BE    $GTENS                  YES, SKIP HUNDRED'S DIGIT
*
         CLI   0(INREG),C'0'           IS HUNDREDS DIGIT ZERO?
         BNE   $GHUND                  NO, CONTINUE
*
         LA    INREG,1(,INREG)         ADDRESS TEN'S DIGIT
         B     $GTENS                  GO TEST TEN'S DIGIT
*
*    OUTPUT THE EQUIVALENT WORD FOR THE HUNDREDS DIGIT
*
$GHUND   IC    DIGREG,0(,INREG)        GET DIGIT
         LA    TABREG,UNITS            UNITS TABLE
         LA    TELENREG,6              ENTRY IS 6 CHARACTERS LONG
         BAL   SECBAL,PUTDIGIT
*
         LA    WORDREG,HUNDRED         "HUNDRED"
         BAL   SECBAL,PUTWORD
*
         LA    INREG,1(,INREG)         ADDRESS TEN'S DIGIT
*
         CLC   0(2,INREG),ZEROS1       ARE TENS AND UNITS ZERO
         BNE   $GHUND0                 NO, MUST INSERT "AND"
*
         LA    INREG,2(,INREG)         ADDRESS NEXT GROUP
         B     $GROUPX                 JUMP TO COMMON SUBROUTINE EXIT
*
$GHUND0  LA    WORDREG,AND             "AND"
         BAL   SECBAL,PUTWORD
*
$GTENS   CLI   0(INREG),C'0'           IS TENS DIGIT ZERO?
         BNE   $GTENS0                 NO, CONTINUE
*
         LA    INREG,1(,INREG)         ADDRESS UNIT'S DIGIT
         B     $GUNITS                 GO TEST UNIT'S DIGIT
*
$GTENS0  CLI   0(INREG),C'1'           IS TEN'S DIGIT '1'?
         BNE   $GTENSR                 NO, NORMAL TEN'S PROCESS
*
         CLI   1(INREG),C'0'           IS UNIT'S DIGIT '0' (10 EVEN)?
         BE    $GTENSR                 YES, NORMAL TEN'S PROCESS
*
*    OUTPUT THE EQUIVALENT WORD FOR THE TEENS DIGIT
*
         IC    DIGREG,1(,INREG)        GET DIGIT (UNIT'S FOR TEEN'S)
         LA    TABREG,TEENS            TEENS TABLE
         LA    TELENREG,10             ENTRY IS 10 CHARACTERS LONG
         BAL   SECBAL,PUTDIGIT
*
         LA    INREG,2(,INREG)         ADDRESS NEXT GROUP
         B     $GROUPX                 JUMP TO COMMON SUBROUTINE EXIT
*
$GTENSR  CLI   1(INREG),C'0'           IS UNIT'S DIGIT '0' (10 EVEN)?
         BE    $GTENSRX                YES, NO HYPHEN SEPARATOR
*
         ICM   FLAGS,B'0100',=C'-'     CHANGE SEPARATOR TO HYPHEN
*
*    OUTPUT THE EQUIVALENT WORD FOR THE EVEN TENS DIGIT
*
$GTENSRX IC    DIGREG,0(,INREG)        GET DIGIT
         LA    TABREG,TENS             TENS TABLE
         LA    TELENREG,8              ENTRY IS 8 CHARACTERS LONG
         BAL   SECBAL,PUTDIGIT
*
         ICM   FLAGS,B'0100',=C' '     CHANGE SEPARATOR TO SPACE
*
         LA    INREG,1(,INREG)         ADDRESS UNIT'S DIGIT
*
$GUNITS  CLI   0(INREG),C'0'           IS UNIT'S DIGIT ZERO?
         BNE   $GUNITS0                NO, CONTINUE
*
         LA    INREG,1(,INREG)         ADDRESS NEXT GROUP
         B     $GROUPX                 JUMP TO COMMON SUBROUTINE EXIT
*
*    OUTPUT THE EQUIVALENT WORD FOR THE UNITS DIGIT
*
$GUNITS0 IC    DIGREG,0(,INREG)        GET DIGIT
         LA    TABREG,UNITS            UNITS TABLE
         LA    TELENREG,6              ENTRY IS 6 CHARACTERS LONG
         BAL   SECBAL,PUTDIGIT
*
         LA    INREG,1(,INREG)         ADDRESS NEXT GROUP
*
*     THIS IS THE END OF THE GROUP SUBROUTINE
*
$GROUPX  BR    PRIBAL                  RETURN TO CALLING POINT IN MAIN
*
*    THIS SECONDARY LEVEL SUBROUTINE USES THE VALUE OF THE DIGIT
*    LOADED INTO REGISTER 9 TO COMPUTE AN OFFSET INTO THE CONSTANT
*    TABLE AND COPIES THE CONSTANT WORD INTO THE OUTPUT BUFFER
*
PUTDIGIT N     DIGREG,=F'15'           REMOVE SIGN
         BCTR  DIGREG,0                DECREASE BY 1 (0 BASED OFFSET)
         MR    R8,TELENREG             MULTIPLY BY ENTRY LENGTH
         LA    WORDREG,0(DIGREG,TABREG) LOAD ADDRESS OF DIGIT WORD
*
*    PUTWORD IS NESTED WITHIN PUTDIGIT TO AVOID A THIRD LEVEL CALL
*    FROM PUTDIGIT, BUT PUTWORD IS CALLED FROM THE MAIN ROUTINE
*    TO COPY CONTANT WORDS INTO THE OUTPUT BUFFER
*
PUTWORD  IC    WLREG,0(,WORDREG)       GET LENGTH OF WORD
PUTLOOP  LA    WORDREG,1(,WORDREG)     BUMP ADDRESS PAST LENGTH
         LR    R8,WLREG                COPY WORD LENGTH
         BCTR  R8,0                    DECREASE BY 1 FOR EXECUTE
         EX    R8,VARMOVE              MOVE WORD TO OUTPUT
         LA    OUTREG,0(WLREG,OUTREG)  UPDATE OUTPUT ADDRESS
         CLM   FLAGS,B'0100',=C'!'     IS SEPARATOR TO BE INSERTED?
         BE    PUTX                    NO, JUMP TO EXIT
         STCM  FLAGS,B'0100',0(OUTREG) INSERT SEPARATOR CHARACTER
         LA    OUTREG,1(,OUTREG)       UPDATE OUTPUT ADDRESS
PUTX     BR    SECBAL                  RETURN TO CALLING POINT
*
*     THIS IS THE END OF THE PUTDIGIT / PUTWORD SUBROUTINE
*
VARMOVE  MVC   0(0,OUTREG),0(WORDREG)  MOVE DIGIT WORD
*
****************************** CONSTANTS ******************************
ZEROS1   DC    C'00000000000001'
*
*    THE FOLLOWING TABLE CONSISTS OF ENTRIES DESCRIBING WORDS THAT
*    ARE SELECTED FOR COPYING INTO THE OUTPUT STRING BASED ON THE
*    INPUT VALUE. EACH TABLE ENTRY IS A ONE BYTE FIELD CONTAINING
*    THE NUMBER OF BYTES IN THE WORD THAT IS THE REMAINDER OF THE
*    TABLE ENTRY. THE ORDER OF THE TABLE MUST NOT BE CHANGED.
*
VOID     DC    X'07',CL7'V O I D'
BILLION  DC    X'07',CL7'BILLION'
MILLION  DC    X'07',CL7'MILLION'
THOUSAND DC    X'08',CL8'THOUSAND'
HUNDRED  DC    X'07',CL7'HUNDRED'
DOLLAR   DC    X'06',CL6'DOLLAR'
DOLLARS  DC    X'07',CL7'DOLLARS'
ONLY     DC    X'04',CL4'ONLY'
AND      DC    X'03',CL3'AND'
NO       DC    X'02',CL2'NO'
CENT     DC    X'04',CL4'CENT'
CENTS    DC    X'05',CL5'CENTS'
UNITS    DC    X'03',CL5'ONE  '
         DC    X'03',CL5'TWO  '
         DC    X'05',CL5'THREE'
         DC    X'04',CL5'FOUR '
         DC    X'04',CL5'FIVE '
         DC    X'03',CL5'SIX  '
         DC    X'05',CL5'SEVEN'
         DC    X'05',CL5'EIGHT'
         DC    X'04',CL5'NINE '
TEENS    DC    X'06',CL9'ELEVEN   '
         DC    X'06',CL9'TWELVE   '
         DC    X'08',CL9'THIRTEEN '
         DC    X'08',CL9'FOURTEEN '
         DC    X'07',CL9'FIFTEEN  '
         DC    X'07',CL9'SIXTEEN  '
         DC    X'09',CL9'SEVENTEEN'
         DC    X'08',CL9'EIGHTEEN '
         DC    X'08',CL9'NINETEEN '
TENS     DC    X'03',CL7'TEN    '
         DC    X'06',CL7'TWENTY '
         DC    X'06',CL7'THIRTY '
         DC    X'05',CL7'FORTY  '
         DC    X'05',CL7'FIFTY  '
         DC    X'05',CL7'SIXTY  '
         DC    X'07',CL7'SEVENTY'
         DC    X'06',CL7'EIGHTY '
         DC    X'06',CL7'NINETY '
         LTORG
* ******************************************************************* *
* ***************************** EQUATES ***************************** *
* ******************************************************************* *
R0       EQU   0                       REGISTER 0
R1       EQU   1                       REGISTER 1
FLAGS    EQU   2                       TASK FLAGS DURING CONVERSION
*
*    REGISTER 2 IS USED TO CONTAIN INDICATORS WHICH CONTROL THE
*    PROCESSING. THE POSSIBLE VALUES ARE:
*
*      B'1000' = 'Y': BILLIONS GROUP IS BEING PROCESSED
*      B'1000' = 'A': INSERT "AND" AFTER WORD INSERTION
*      B'1000' = 'N': DO NOT INSERT "AND" AFTER WORD INSERTION
*      B'0100' = ' ': INSERT BLANK AFTER WORD INSERTION
*      B'0100' = ',': INSERT COMMA AFTER WORD INSERTION
*      B'0100' = '-': INSERT HYPHEN AFTER WORD INSERTION
*      B'0100' = '!': INSERT NOTHING AFTER WORD INSERTION
*      B'0010' = 'S': INSERT PLURAL "DOLLARS"
*      B'0010' = ' ': INSERT SINGULAR "DOLLAR"
*      B'0001' = 'S': INSERT PLURAL "CENTS"
*      B'0001' = ' ': INSERT SINGULAR "CENT"
*
R2       EQU   2                       REGISTER 2
SECBAL   EQU   3                       SECONDARY INTERNAL BAL REGISTER
R3       EQU   3                       REGISTER 3
PRIBAL   EQU   4                       PRIMARY INTERNAL BAL REGISTER
INREG    EQU   5                       INPUT FIELD POINTER
OUTREG   EQU   6                       OUTPUT FIELD POINTER
WORDREG  EQU   7                       LITERAL WORD POINTER
TABREG   EQU   7                       WORD LOOKUP TABLE BASE
R8       EQU   8                       REGISTER 8
DIGREG   EQU   9                       DIGIT
WLREG    EQU   9                       WORD LENGTH
TELENREG EQU   10                      ENTRY LENGTH
R11      EQU   11                      REGISTER 11
BASE     EQU   12                      BASE REGISTER
R14      EQU   14                      REGISTER 14
R15      EQU   15                      REGISTER 15
         END
