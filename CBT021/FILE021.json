{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011054000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE021.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE021.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x05'", "DS1TRBAL": "b'\\x8e`'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x006\\x00\\x04\\x006\\x00\\r\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "1\n0\n0\n\n  *\n  *-------------------------------------------------------------------*\n  *                                                                   *\n  *                      D I S C L A I M E R                          *\n  *                                                                   *\n  *  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *\n  *  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *\n  *  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *\n  *  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *\n  *                                                                   *\n  *           ROBERT M. SIRKIS                                        *\n  *           TECHNICAL SUPPORT SPECIALIST                            *\n  *           BELL AND HOWELL COMPANY                                 *\n  *           2231 WEST HOWARD STREET                                 *\n  *           EVANSTON, IL 60202                                      *\n  *           (312) 570-4687                                          *\n  *                                                                   *\n  *-------------------------------------------------------------------*\n  *\n     SOURCE        EXECUTABLE         FUNCTION\n+    ______        __________         ________\n\n     IBHDRPLY      IBHDRPLY           AUTOMATIC REPLY PROGRAM\n      IBHWTORG     IBHWTORG           GET REPLIES\n      ENTER                           IBHDRPLY MACRO\n      LEAVE                           IBHDRPLY MACRO\n     OCX           OCX                EXECUTE OPERATOR COMMANDS\n      $EPILOG                         OCX MACRO\n      $PROLOG                         OCX MACRO\n      $REG                            OCX MACRO\n      $STCK                           OCX MACRO\n     IBHLSPAC                         LIST DASD VOLUME SPACE INFORMATION\n     IBHJ2001      IBHJ2001           JES2 EXIT(1.3.4/1.3.6)\n                                      CONTROL XEROX 2700 PRINTER\n     IBHJ2005      IBHJ2005           $DP COMMAND TO LIST JOES,\n                                      AND ENHANCED $DA COMMAND.\n     IBHJ2015      IBHJ2005           JES2 EXIT(1.3.4/1.3.6)\n                                      INITIAL FONT CONTROL ON XEROR 9700\n                                      PRINTER SUBSYSTEM.\n     IBHJESPM                         SAMPLE JES2 PARMS FOR THE JES2 EXITS\n                                      SUPPLIED IN THIS PDS.(JES2 1.3.4/1.3.6)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$EPILOG": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PROLOG": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$REGS": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$STCK": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   $STCK  &NOGEN\n         LCLC   &L\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****\n.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****\n.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****\n.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****\n.****    CONSTANTS.                                               *****\n.****                                                             *****\n.****    DAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****\n.****                       THE DAY OF THE WEEK AS FOLLOWS        *****\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****\n.****                       3=THURSDAY, 4=FRIDAY,                 *****\n.****                       5=SATURDAY, 6=SUNDAY                  *****\n.****                                                             *****\n.****    DATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE DATE IN MM/DD/YY FORMAT           *****\n.****                                                             *****\n.****    TIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE TIME IN HH:MM:SS FORMAT           *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)\n         LR    14,15              COPY TO WORK REG\nS&L.B    SL    14,=F'60'          DECREMENT BY 60 SECONDS\n         BM    S&L.S              LESS THAN SIXTY, CONTINUE\n         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    1,=F'1'            BUMP MINUTES\n         B     S&L.B              CHECK AGAIN\nS&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+6(2),26(13)   MOVE THE SECONDS\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME(2),26(13)     MOVE THE HOURS\n         MVI   TIME+2,C':'        ADD COLIN\n         MVI   TIME+5,C':'        ADD COLIN\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,DAY              SET RELATIVE DAY OF WEEK\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         L     1,16               GET CVT ADDRESS\n         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA\n         ZAP   8(8,13),=P'0'      ZERO WORK AREA\n         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION\n         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LA    15,S&L.T           LOAD ADDR OF TABLE\n         CVB   1,8(13)            CONVERT TO BIN\n         SLL   1,30               SHIFT ALL BUT LAST TWO\n         LTR   1,1                TEST RESIDUAL\n         BNZ   *+8                NOT 0, BRANCH\n         LA    15,S&L.TL          LEAP YEAR\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    (T'&NOGEN NE 'O').NOGEN   NOGEN SPECIFIED, SKIP\nDAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK\nDATE     DC    C'  /  /  '        CURRENT DATE\nTIME     DC    C'  :  :  '        CURRENT TIME\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISCBOX": {"ttr": 528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "          SPACE 1\n*\n*-------------------------------------------------------------------*\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *\n*  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *\n*  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *\n*  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *\n*                                                                   *\n*           ROBERT M. SIRKIS                                        *\n*           TECHNICAL SUPPORT SPECIALIST                            *\n*           BELL AND HOWELL COMPANY                                 *\n*           2231 WEST HOWARD STREET                                 *\n*           EVANSTON, IL 60202                                      *\n*           (312) 570-4687                                          *\n*                                                                   *\n*-------------------------------------------------------------------*\n*\n          SPACE 1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   ENTER &SA=,        SAVEAREA ADDRESS                           X\n               &BASE=12,    BASE REGISTER                              X\n               &BASE2=,     SECOND BASE REGISTER                       X\n               &BASE3=,     THIRD BASE REGISTER                        X\n               &ID=,        MODULE IDENTIFIER                          X\n               &TITLE=,     ASSEMBLY LISTING TITLE                     X\n               &RENT=NO,    REENTERANT OR NONREENTERANT SAVEAREAS      X\n               &CSECT=YES,  CSECT OR NOT                    9/3/81     X\n               &WKBYTES=0,  BYTES TO BE GETMAIN'D BESIDES 72 FOR SA    X\n               &ID2=,       CONCATENATED TO MODULE ID         10/27/82 X\n               &GETFAIL=    BRANCH-TO ADDRESS IF GETMAIN FAILS\n.*                                                      RON MURA, TPD\n.*               NO PARAMETERS REQUIRED\n.*               SA IGNORED IF RENT=YES SPECIFIED\n.*               WKBYTES AND GETFAIL IGNORED UNLESS RENT=YES SPECIFIED\n         MNOTE *,'*** ENTER - STANDARD OS LINKAGE ***'\n         GBLB  &RENTSW1     1 = REENTERANT SAVEAREA\n         GBLC  &WKLNTH\n&RENTSW1 SETB  0            TURN OFF IN CASE MULT. MACROS PER ASSEMBLY\n&WKLNTH  SETC  '&WKBYTES'   KEEP FOR FREEMAIN IN LEAVE MACRO\n         LCLC  &CSECTNM,&WID,&NDX,&SAVE,&GETTYPE              10/27/82\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&TITLE' EQ '').NOTITLE\n         TITLE &TITLE\n.*                          TITLE MUST BE ENCLOSED BY QUOTATION MARKS\n.NOTITLE AIF   ('&LABEL' EQ '').NOLABEL\n&CSECTNM SETC  '&LABEL'\n         AGO   .CHKID\n.NOLABEL AIF   ('&CSECT' NE 'YES').CHKID                    9/3/81\n&CSECTNM SETC  '$PRIVATE'\n         MNOTE *,'*** NO LABEL ON ENTER MACRO, CSECT CALLED ''$PRIVATE'X\n               ' ***'\n.CHKID   AIF   (T'&ID EQ 'O').NOID\n&WID     SETC  '&ID'                                          10/27/82\n         AGO   .CHKID2                                        10/27/82\n.NOID    ANOP\n&WID     SETC  '&CSECTNM-&SYSDATE-&SYSTIME'                   10/27/82\n.CHKID2  AIF   (T'&ID2 EQ 'O').CHKSA                          10/27/82\n&WID     SETC  '&WID-&ID2'    CONCATENATE ID2 TO ID STRING    10/27/82\n.CHKSA   ANOP\n         AIF   ('&CSECT' EQ 'YES').CS                       9/3/81\n&LABEL   SAVE  (14,12),,&WID                           9/3/81 10/27/82\n         AGO   .LR\n.CS      ANOP                                               9/3/81\n&CSECTNM CSECT\n         SAVE  (14,12),,&WID                                  10/27/82\n.LR      ANOP                                               9/3/81\n         LR    &BASE,15               ESTABLISH BASE\n         USING &CSECTNM,&BASE         INFORM ASSEMBLER\n         AIF   (T'&BASE2 EQ 'O').CHKRENT\n         LA    &BASE2,2048(&BASE)\n         LA    &BASE2,2048(&BASE2)    ESTABLISH SECOND BASE REG\n         USING &CSECTNM+4096,&BASE2\n         AIF   (T'&BASE3 EQ 'O').CHKRENT\n         LA    &BASE3,2048(&BASE2)\n         LA    &BASE3,2048(&BASE3)    ESTABLISH THIRD BASE REG\n         USING &CSECTNM+8192,&BASE3\n.CHKRENT AIF   ('&RENT' EQ 'YES').REENT\n         AIF   (T'&SA EQ 'O').NOSA\n&SAVE    SETC  '&SA'\n         AGO   .SAOK\n.NOSA    ANOP\n&SAVE    SETC  'SAVE&NDX'\n.SAOK    ANOP\n         ST    13,&SAVE+4             CHAIN UP TO HSA\n         LA    15,&SAVE\n         ST    15,8(13)               CHAIN DOWN TO LSA\n         LR    13,15                  POINT TO SAVEAREA\n         AGO   .CHKB\n.REENT   ANOP\n&RENTSW1 SETB  1         INDICATE REENTERANT SAVEAREA FOR LEAVE MACRO\n         LR    14,1                   SAVE PTR TO PARAM LIST\n         LR    15,0                   SAVE REG 0\n         AIF   (T'&GETFAIL EQ 'O').UNCOND\n         MNOTE '         GETMAIN RC,LV=72+&WKBYTES  REENT. SA FMT USED'\n         GETMAIN RC,LV=72+&WKBYTES    GET 72 BYTES FOR SAVEAREA\n         LTR   15,15                  TEST FOR SUCCESS\n         BNZ   &GETFAIL\n         AGO   .CHAIN\n.UNCOND  MNOTE '         GETMAIN R,LV=72+&WKBYTES  REENTERANT SAVEAREA X\n               FORMAT USED'\n         GETMAIN R,LV=72+&WKBYTES     GET 72 BYTES FOR SAVEAREA\n.CHAIN   ANOP\n         ST    13,4(1)                CHAIN UP TO HSA\n         ST    1,8(13)                CHAIN DOWN TO LSA\n         LR    0,15                   RESTORE REG 0\n         LR    13,1                   POINT TO SAVEAREA\n         LR    1,14                   RESTORE REG 1\n.*    SEE IF WE NEED TO BRANCH AROUND CONSTANTS:\n.CHKB    AIF   (T'&SA NE 'O' OR '&RENT' EQ 'YES').MEND\n         B     SAVE&NDX.+72           BRANCH AROUND SAVEAREA\nSAVE&NDX DS    18F\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBHDRPLY": {"ttr": 533, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'IBHDRPLY --- AUTOMATIC REPLY ROUTINE'\n*\n*-------------------------------------------------------------------*\n*                                                                   *\n*     THE PURPOSE OF THIS PROGRAM IS TO AUTOMATICALLY REPLY TO      *\n*  WTORS THAT THE USER SECIFIES.  THIS PROGRAM MUST BE RUN AS A     *\n*  STARTED TASK, OR AT SUNGARD.                                     *\n*                                                                   *\n*     THE WTORS THAT YOU WANT TO HAVE AUTOMATIC REPLIES TO ARE      *\n*  SPECIFIED IN A DATASET THAT IS POINTED TO BE THE IBHDRIN DCB.    *\n*  THE RECORD FORMAT CAN BE FIXED OR FIXED-BLOCKED, AND THE RECORD  *\n*  SIZE MUST BE 80.                                                 *\n*                                                                   *\n*     RECORD LAYOUT:                                                *\n*                                                                   *\n*      1-8  ----> JOBNAME MASK                                      *\n*      9-16 ----> MSG ID MASK                                       *\n*      17-80 ---> REPLY                                             *\n*                                                                   *\n*                                                                   *\n*     IBHDRPLY CALCULATES THE LENGTH OF EACH ENTRY IN THE           *\n*  RECORD FOR A SPACE TO DETERMINE THE LENGTH OF THE JOBNAME,       *\n*  MESSAGE ID MASK, AND THE LENGTH OF THE REPLY.                    *\n*                                                                   *\n*     EVERY 4 SECONDS IBHDRPLY WAKES UP AND SEARCHES FOR THE        *\n*  JOBNAMES INDICATED, THEN HE CALLS IBHWTORG TO CHECK FOR          *\n*  OUTSTANDING REPLIES.  IF THE REPLY MATCHES THE MESSAGE ID        *\n*  AN INTERNAL REPLY IS GENERATED.                                  *\n*                                                                   *\n*     IBHDRPLY CAN HANDLE A MXIMUM OF 20 JOB/MSGID COMBINATIONS,    *\n*  THIS CAN EASILY BE CHANGED.                                      *\n*                                                                   *\n*                                                                   *\n*-------------------------------------------------------------------*\n*                                                                   *\n*    THIS MODULE MUST BE APF AUTHORIZED, AND RUNS IN KEY 0.         *\n*                                                                   *\n*-------------------------------------------------------------------*\n*\n          SPACE 1\n*\n*-------------------------------------------------------------------*\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *\n*  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *\n*  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *\n*  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *\n*                                                                   *\n*           ROBERT M. SIRKIS                                        *\n*           TECHNICAL SUPPORT SPECIALIST                            *\n*           BELL AND HOWELL COMPANY                                 *\n*           2231 WEST HOWARD STREET                                 *\n*           EVANSTON, IL 60202                                      *\n*           (312) 570-4687                                          *\n*                                                                   *\n*-------------------------------------------------------------------*\n*\n          SPACE 1\n         EJECT\n         PRINT GEN\n         @     IBHDRPLY\n         REGS\nTCBJSCB  EQU   X'B4'                     POINTER TO TCBS JSCB\nJSCBSSIB EQU   X'13C'                    POINTER TO JSCBS SSIB\nSSIBID   EQU   0                         OFFSET TO SSIBID\nSSIBJBID EQU   X'0C'                     OFFSET TO SSIB JOBID\nSMFPTR   EQU   196                       POINTER TO SMF  CTL BLOCKS\nSMFID    EQU   16                        OFFSET TO SMFID\nIBHDRPLY ENTER BASE=R12,ID=IBHDRPLY,RENT=YES,WKBYTES=8128\n         LA    R2,72(,R13)               GET ADDRESS OF WORK AREA\n         USING WORKAREA,R2               MAKE ADDRESSABLE\n         EJECT\n         PRINT NOGEN\n         ST    R2,@WORK                  SAVE ADDRESS OF WORK\n         ST    R1,@PARM                  SAVE PARM ADDRESS\n         MVC   WTOLNG,=AL2(72)           INIT WTO AREA\n         MVC   WTOFLG,=XL2'8400'                     X\n         MVC   WTOFLAG2,=XL4'40004000'               X\n         MVC   WTOMSG,$SPACES                        X\n         MVC   WTOMSG,MSG0                           X\n         LA    R1,WTOX                               X\n         WTO   MF=(E,(R1))               LET THEM KNOW WE STARTED\n*\n*        SEE IF THIS IS A STARTED TASK OR WE ARE AT SUNGARD\n*\n         L     R1,CVTPTR                 GET ADDR OF CVT\n         L     R1,SMFPTR(R1)             GET ADDR OF SMF CONTROL BLOCKS\n         LTR   R1,R1                     ARE THE THERE\n         BZ    NOTAUTH                   NO, CANT CONTINUE\n         CLC   =C'SRS',SMFID(R1)         SUNGARD ID ?\n         BE    IBHDR00C                  YUP\n         L     R1,CVTPTR                 GET ADDR OF CVT\n         L     R1,0(R1)                  GET ADDR OF TCB WORDS\n         L     R1,4(R1)                  GET OUR TCB\n         ICM   R1,15,TCBJSCB(R1)         GET JSCB\n         BZ    NOTAUTH                   ABEND\n         ICM   R1,15,JSCBSSIB(R1)        GET SSIB\n         BZ    NOTAUTH                   ABEND\n         CLC   =C'SSIB',SSIBID(R1)       SOMETHING WRONG\n         BNE   NOTAUTH                   ABEND\n         CLC   =C'STC',SSIBJBID(R1)      STC  ?\n         BNE   NOTAUTH                   ABEND\n         B     IBHDR00C                  CONTINUE\nNOTAUTH  MVC   WTOMSG,MSG1               BUILD MESSGAE INDICATING\n         LA    R1,WTOX                   USER IS NOT AUTHORIZED\n         WTO   MF=(E,(R1))               AND SEND TO MASTER CONSOLE\n         MVC   WTOMSG,MSG5               SEND ABEND MESSAGE\n         LA    R1,WTOX                   TO MASTER CONSOLE\n         WTO   MF=(E,(R1))               X\n         LA    R15,4                     SETUP ABEND CODE\n         B     KILL                      AND GO DIE\n         EJECT\nIBHDR00C DS    0H\n*\n* BUILD DCB INFORMATION\n*\n         MVC   IBHDRIN(DMYDCBL),DMYDCB   PRIME DCB\n         MVC   OPENX(DMYOPNL),DMYOPEN    PRIME OPEN\n         MVC   CLOSEX(DMYCLOSL),DMYCLOS  PRIME CLOSE\n         MVC   RJFCBX(DMYRDJFL),DMYRDJF  PRIME RDJFCB\n         LA    R1,IBHDRIN\n         USING IHADCB,R1\n         LA    R15,JFCBDATA              GET ADDRESS OF JFCB AREA\n         ST    R15,JFCBTYPE              STORE IN LIST\n         MVI   JFCBTYPE,X'87'            READ A JFCB\n         LA    R15,JFCBLIST              BUILD EXLST ADDR\n         ST    R15,DCBEXLST              PLACE IT IN DCB\n         ST    R1,RJFCBX                 REPLACE DCB ADDRS\n         MVI   RJFCBX,X'80'              X\n         ST    R1,OPENX                  REPLACE DCB ADDRS\n         MVI   OPENX,X'80'               X\n         ST    R1,CLOSEX                 REPLACE DCB ADDRS\n         MVI   CLOSEX,X'80'              X\n         LA    R15,RJFCBX                GET ADDRESS OF RDJFCB LIST\n         RDJFCB MF=(E,(15))              THE READ THE JFCB\n         LTR   R15,R15                   DCB PRESENT ?\n         BZ    IBHDR000                  YES\n         MVC   WTOMSG,MSG2               BUILD MESSAGE INDICATING\n         LA    R1,WTOX                   DCB IS NOT PRESENT\n         WTO   MF=(E,(R1))               AND SEND IT\n         MVC   WTOMSG,MSG5               BUILD ABEND MESSAGE\n         LA    R1,WTOX                   AND SEND IT\n         WTO   MF=(E,(R1))               X\n         LA    R15,4                     SET UP ABEND CODE\n         B     KILL                      AND DIE\n         EJECT\nIBHDR000 DS    0H\n         OPEN  MF=(E,OPENX)              OPEN INPUT DATA SET\n         MVC   WTOMSG,MSG6               BUILD MESSAGE WITH INPUT\n         MVC   WTOMSG+20(44),JFCBDSNM    DATASET NAME ON IT\n         LA    R1,WTOX                   AND DISPLY THE NAME\n         WTO   MF=(E,(R1))               OF IT\n         MVC   WTOMSG,MSG7               BUILD MESSAGE WITH INPUT\n         MVC   WTOMSG+20(8),JFCBELNM     DATASET NAME ON IT\n         LA    R1,WTOX                   AND DISPLY THE NAME\n         WTO   MF=(E,(R1))               OF IT\n         BAL   R10,INIT                  INITIALIZE THE JOB TABLE\n         MVI   SYSJOBE,X'FF'             END OF SYSJOBS TABLE\n*\n*        LOAD IBHWTORG\n*\n         MODESET KEY=ZERO                GO SUPER MODE\n         LOAD  EP=IBHWTORG,ERRET=IBHDRNOL,GLOBAL=(YES,P)\n         ST    R0,@WTORG                 SAVE ADDRESS OF MODULE\n         MODESET KEY=NZERO               GO PROB MODE\n         B     IBHDRLUP\n         SPACE 5\nIBHDRNOL DS    0H\n         LR    R5,R15                    SAVE RETUN CODE\n         WTO   'IBHDR001A --- IBHWTORG MODULE NOT FOUND',              X\n               ROUTCDE=(1,2,3),DESC=(2)\n         LR    R15,R5                    RESTORE RETURN CODE\n         B     KILLDUMP                  BURN BABY BURN\n         EJECT\nIBHDRLUP DS    0H\n*\n*        FIND THE JES2 POINTERS\n*\n         L     R1,CVTPTR                GET CVT PTR\n         USING CVT,R1                   ADDRESS CVT SYMBOLICALLY\n         L     R1,CVTJESCT              GET JESCT PTR\n         USING JESCT,R1                 ADDRESS JESCT SYMBOLICALLY\n         L     R1,JESSSCT               GET SSCT PTR\n         USING SSCT,R1                  ADDRESS SSCT SYMBOLICALLY\n         L     R1,SSCTSSVT              GET JES2 SVT\n         L     R6,X'2CC'(,R1)           GET SJB ADDRESS\n         USING SJBDSECT,R6              ADDRESS SJB ENTRY SYMBOLICALLY\n         SR    R3,R3                     CLEAR R3\n         DROP  R1\n         SPACE 2\n         LA    R7,SYSJOBS               GET SYSJOBS TABLE\n         USING JOBTAB,R7\nIBHDRLU1 DS    0H\n         LA    R4,20                    MAX JOB/MSG TABLE SIZE\n         LA    R5,JOBTABLE\n         USING JOBENT,R5\nIBHDRLU2 DS    0H\n         CLI   JOBNMLNG,X'FF'            END OF TABLE ?\n         BE    GETNXTP                   YES, SEE IF JOBS ACTIVE\n         IC    R3,JOBNMLNG               GET LENGTH OF JOBNAME\n         EX    R3,JOBSCLC                JOBNAME MATCH\n         BE    FLIPITF                   YES, PUT IN SYSJOB TABLE\n         LA    R3,83(,R3)                JOBENT TABLE POP\n         BCT   R4,IBHDRLU2               LOOP\nGETNXTP  DS    0H\n         ICM   R6,B'0111',SJBXQCHN+1     GET NEXT PIT\n         BNZ   IBHDRLU1                  LOOP IF THERE\n         B     IBHDRASC                  GO CHECK ASCBS\nJOBSCLC  CLC   JOBNAME(*-*),SJBJOBNM\nFLIPITF  DS    0H\n         MVC   JOBASID,SJBASID           GET ASID\n         MVC   JOBNME,SJBJOBNM           GET JOBNAME\n         MVC   JOBID,SJBJOBID            GET JOBID\n         LA    R7,18(,R7)                POP SYSJOBS TABLE\n         CLI   JOBNME,X'FF'              LAST ENTRY ?\n         BE    IBHDRASC                  CHECK ASCBS\n         MVC   JOBNME(18),$LOVALU CLEAR NEW ENTRY\n         B     IBHDRAS0 AND LOOP\n         EJECT\nIBHDRASC DS    0H\n         MVI   JOBNME,X'00'              SET LOGICAL END OF TABLE\n         LA    R7,SYSJOBS                GET ADDR OF SYSJOBS TABLE\n         USING JOBTAB,R7\nIBHDRAS0 DS    0H\n         CLI   JOBNME,X'FF'              END OF TABLE ?\n         BE    IBHDRWTG                  GO CHECK FOR REPLIES\n         CLI   JOBNME,X'00'              LOGICAL END\n         BE    IBHDRWTG                  GO CHECK FOR REPLIES\n         L     R1,CVTPTR                 GET CVT PTR\n         USING CVT,R1                    ADDRESS CVT SYMBOLICALLY\n         L     R1,CVTASVT                GET ASVT PTR\n         USING ASVT,R1                   ADDRESS ASVT SYMBOLICALLY\n         SPACE 1\nIXTASIDN DS    0H\n         SR    R6,R6\n         LH    R6,JOBASID                GET SAVED ASID\n         SLL   R6,2                      MULTIPLY BY 4\n         LA    R6,ASVTENTY-4(R6)         POINT AT ASID ENTRY\n         TM    0(R6),X'80'               IS THIS ASID AVAILABLE\n         BNO   IBHDRAS1                  NOPE, ITS GOOD\n         DROP  R1\nBADASID  DS    0H\n         XC    JOBASID,JOBASID           INDICATE ASID NOT VALID\n         LA    R7,18(,R7)                POP TABLE\n         B     IBHDRAS0                  GO DO NEXT\n         SPACE 1\nIBHDRAS1 DS    0H\n         L     R6,0(R6)                  GET ASCB PTR\n         USING ASCB,R6                   ADDRESS ASCB SYMBOLICALLY\n         ICM   R8,B'0111',ASCBJBNI+1     GET JOBNAME PTR\n         BZ    BADASID                   WE GOT TROUBLES\n         CLC   JOBNME,8(R8)              CORRECT JOB ?\n         BNE   BADASID                   NOPE\n         LA    R7,18(,R7)                POP TABLE\n         B     IBHDRAS0                  AND START AGAIN\n         SPACE 1\n         EJECT\nIBHDRWTG DS    0H\n         LA    R7,SYSJOBS                GET SYSJOBS TABLE\nIBHDRW00 DS    0H\n         CLI   JOBNME,X'FF'              END OF TABLE ?\n         BE    IBHDRWAT                  GO WAIT 4 SECONDS\n         CLI   JOBNAME,X'00'             END OF TABLE ?\n         BE    IBHDRWAT                  GO WAIT 4 SECONDS\n         MODESET KEY=ZERO                GO SUPER\n         L     R15,@WTORG                GET ADDRESS OF ROUTINE\n         LA    R8,JOBID                  GET PARMS\n         LA    R9,WTORTEXT                       X\n         CALL  (15),((R8),(R9))          AND CALL HIME\n         LR    R9,R15                    SAVE RETURN CODE\n         MODESET KEY=NZERO               GO PROBLEM\n         LTR   R9,R9                     NO WTOR ?\n         BNZ   IBHDRW10                  GO CHECK NEXT\n         EJECT\n*\n*        BUILD REPLY\n*\n         LA    R3,10\n         SR    R8,R8\n         LA    R6,JOBTABLE\n         USING JOBENTRY,R6\nIBHDRW02 DS    0H\n         IC    R8,JOBNMLNG\n         EX    R8,CJOBCLC\n         BNE   IBHDRW03\n         IC    R8,MSGIDLNG\n         EX    R8,CMSGCLC\n         BNE   IBHDRW03\n         SR    R3,R3\n         IC    R3,REPLYLNG\n         MVC   CIBBUF(L'$RPLMASK),$RPLMASK\n         EX    R3,MVCREPLY\n         AH    R3,=H'4'\n         STH   R3,CIBLNG\n         SR    R0,R0\n         MODESET KEY=ZERO,MODE=SUP\n         MVC   CIBUFRID(2),WTORTEXT\n         LA    R1,CIBCIB\n         SVC   34\n         MODESET KEY=NZERO,MODE=PROB\n         B     IBHDRW10\nMVCREPLY MVC   CIBUFRPL(*-*),REPLY\nCJOBCLC  CLC   JOBNAME(*-*),JOBNME\nCMSGCLC  CLC   MSGID(*-*),WTORMSGI\nIBHDRW03 DS    0H\n         LA    R6,83(,R6)\n         BCT   R3,IBHDRW02\nIBHDRW10 DS    0H\n         LA    R7,18(R7)        POP TABLE\n         B     IBHDRW00         AND DO NEXT\nIBHDRWAT DS    0H\n         STIMER WAIT,BINTVL=SEC4\n         LA    R5,@ANS\n         EXTRACT (R5),FIELDS=COMM\n         L     R5,@ANS\n         USING COMLIST,R5\n         L     R3,COMCIBPT\n         USING CIBNEXT,R3\n         CLI   CIBVERB,CIBSTART\n         BNE   SETCOUNT\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(R3)\nSETCOUNT QEDIT ORIGIN=COMCIBPT,CIBCTR=2\n         CLI   CIBVERB,CIBSTOP\n         BE    IBHDRPLX\n         AP    CNTR2,=P'1'\n         CP    CNTR2,=P'225'\n         BNH   IBHDRLUP\n         ZAP   CNTR2,=P'1'\n         WTO   'IBHDRPLY -- STILL ACTIVE',ROUTCDE=(1,2,3,4),           X\n               DESC=(2)\n         B     IBHDRLUP\nIBHDRPLX DS    0H                        EXIT PGM\n         MODESET KEY=ZERO\n         DELETE EP=IBHWTORG\n         MODESET KEY=NZERO\n         WTO   'IBHDRPLY -- TERMINATES NORMALLY',ROUTCDE=(1,2,3,4),    X\n               DESC=(2)\n         SR    R15,R15\n         LEAVE RC=(R15)\n         EJECT\nINIT     DS    0D\n         ZAP   CNTR1,=P'1'\n         ZAP   CNTR2,=P'0'\n         ZAP   CNTR3,=P'0'\n         ZAP   CNTR4,=P'0'\n         ZAP   CNTR5,=P'0'\n         LA    R11,JOBTABLE\n         LA    R15,20\nLOOP1    DS    0H\n         USING JOBENT,R11\n         MVI   JOBNMLNG,X'FF'\n         MVI   MSGIDLNG,X'FF'\n         MVI   REPLYLNG,X'FF'\n         MVC   JOBNAME,$SPACES\n         MVC   MSGID,$SPACES\n         MVC   REPLY,$SPACES\n         LA    R11,83(,R11)\n         BCT   R15,LOOP1\n         LA    R11,JOBTABLE\nGETCARD  GET   IBHDRIN\n         LR    R5,R1\n         CLI   0(R5),C'*'\n         BE    GETCARD\n         CLC   0(8,R5),$SPACES\n         BE    GETCARD\n         CLC   8(8,R5),$SPACES\n         BE    GETCARD\n         CLC   16(64,R5),$SPACES\n         BE    GETCARD\n         CP    CNTR1,=P'20'\n         BL    GETCARD1\nGETCARD1 LA    R3,8\n         BAL   R4,PARS\n         STC   R3,JOBNMLNG\n         EX    R3,JOBMVC\n         B     MSG\nJOBMVC   MVC   JOBNAME(*-*),0(R5)\nMSG      LA    R3,8\n         LA    R5,8(,R5)\n         BAL   R4,PARS\n         STC   R3,MSGIDLNG\n         EX    R3,MSGMVC\n         B     RPLY\nMSGMVC   MVC   MSGID(*-*),0(R5)\nRPLY     LA    R3,64\n         LA    R5,8(,R5)\n         BAL   R4,PARS\n         STC   R3,REPLYLNG  '\n         EX    R3,RPLYMVC\n         AP    CNTR1,=P'1'\n         LA    R11,83(,R11)\n         B     GETCARD\nRPLYMVC  MVC   REPLY(*-*),0(R5)\nPARS     LR    R6,R5                     SAVE ADDRESS OF DATA TO PARSE\n         LR    R7,R3                     SAVE LOOP COUNTER\nPARS1    CLI   0(R6),X'40'               SPACE ?\n         BE    PARS2                     YES COMPUTE LENGTH\n         LA    R6,1(,R6)                 POP DATA ADDRESS UP BY 1\n         BCT   R3,PARS1                  AND LOOP\nPARS2    DS    0H\n         SR    R7,R3                     COMPUTE LENGTH\n         BCTR  R7,0                      AND SUBTRACT 1 FOR MACHINE\n         LR    R3,R7                     PUT RESULTS IN R3\n         BR    R4                        AND RETURN\nINITXIT  DS    0H\n         CLOSE MF=(E,CLOSEX)\nWTOLUP   DS    0H\n         MVC   WTOMSG,MSG3\n         LA    R1,WTOX\n         WTO   MF=(E,(R1))\n         LA    R3,10\n         LA    R11,JOBTABLE\nWTOLUP1  DS    0H\n         MVC   WTOMSG+12(8),$SPACES\n         MVC   WTOMSG+28(8),$SPACES\n         MVC   WTOMSG+38(8),$SPACES\n         CLI   JOBNMLNG,X'FF'\n         BE    INITRET\n         IC    R7,JOBNMLNG\n         EX    R7,JOBMV1\n         IC    R7,MSGIDLNG\n         EX    R7,MSGIDMV1\n         MVC   WTOMSG+35(16),REPLY\n         LA    R1,WTOX\n         WTO   MF=(E,(R1))\n         LA    R11,83(,R11)\n         BCT   R3,WTOLUP1\nINITRET  BR    R10\nJOBMV1   MVC   WTOMSG+12(*-*),JOBNAME\nMSGIDMV1 MVC   WTOMSG+24(*-*),MSGID\n         PRINT GEN\n         DC    C'IBDRPLY_&SYSDATE_&SYSTIME'\n         PRINT NOGEN\nKILL     ABEND (R15)\nKILLDUMP ABEND (R15),DUMP\nSEC4     DC    A(60*4)\nDMYDCB   DCB   DSORG=PS,DDNAME=IBHDRIN,MACRF=(GL),EODAD=INITXIT\nDMYDCBL  EQU   *-DMYDCB\nDMYOPEN  OPEN  (DMYDCB,(INPUT)),TYPE=J,MF=L\nDMYOPNL  EQU   *-DMYOPEN\nDMYCLOS  CLOSE (DMYDCB),MF=L\nDMYCLOSL EQU   *-DMYCLOS\nDMYRDJF  RDJFCB DMYDCB,MF=L\nDMYRDJFL EQU   *-DMYRDJF\n$SPACES  DC    CL80' '\n$LOVALU  DC    20XL1'00'\n$RPLMASK DC    C'R XX,'\nMSG0     DC    CL70'IBHDRPLY -- STARTED'\nMSG1     DC    CL70'IBHDRPLY -- UNAUTHORIZED USE'\nMSG2     DC    CL70'IBHDRPLY -- IBHDRIN DD STATEMENT MISSING'\nMSG3     DC    CL70'IBHDRPLY -- JOBNAME       MSGID     REPLY'\nMSG4     DC    CL70'IBHDRPLY -- TERMINATES NORMALLY'\nMSG5     DC    CL70'IBHDRPLY -- ABENDED'\nMSG6     DC    CL70'IBHDRPLY -- PARMLIB='\nMSG7     DC    CL70'IBHDRPLY -- MEMBER='\n         LTORG ,\n*\n         TITLE 'IBHDRPLY ---- WORKAREA DSECT'\nWORKAREA DSECT\n         @     WORKAREA\n@WORK    DS    F                         ADDRESS OF WORK AREA\n@WTORG   DS    F\n@ANS     DS    F\n@DATAREA DS    4F\nCIBCIB   DS    0F\nCIBLNG   DS    H\nCIBLL    DS    H\nCIBBUF   DS    CL69\nCIBUFRID EQU   CIBBUF+2\nCIBUFRPL EQU   CIBBUF+6\nSAVE18F  DS    18F                       18 FULLWORD SAVE AREA\nCNTR1    DS    PL3\nCNTR2    DS    PL3\nCNTR3    DS    PL3\nCNTR4    DS    PL3\nCNTR5    DS    PL3\nWTORTEXT DS    CL130\nWTORMSGI EQU   WTORTEXT+6\nWTOX     DS    0F\nWTOLNG   DS    H\nWTOFLG   DS    H\nWTOMSG   DS    CL70\nWTOFLAG2 DS    XL4\n@PARM    DS    F                         ADDRESS OF PARM AREA\nOPENX    OPEN  (DMYDCB,(INPUT)),TYPE=J,MF=L\nCLOSEX   CLOSE (DMYDCB),MF=L\nRJFCBX   RDJFCB DMYDCB,MF=L\nIBHDRIN  DCB   DSORG=PS,DDNAME=IBHDRIN,MACRF=(GL),EODAD=INITXIT\nJFCBLIST DS    0F\nJFCBTYPE DS    X\n@JFCBDAT DS    AL3\nJFCBDATA DS    0F\n         IEFJFCBN LIST=YES\nJOBTABLE DS    20CL83\n         DS    0F\nSYSJOBS  DS    20CL18\nSYSJOBE  DS    X\n         EJECT\nJOBENT   DSECT\nJOBENTRY DS    0CL83\nJOBNMLNG DS    X                         LENGTH OF JOBNAME MASK\nJOBNAME  DS    CL8\nMSGIDLNG DS    X                         LENGTH OF MESSAGE ID\nMSGID    DS    CL8\nREPLYLNG DS    X                         LENGTH OF REPLY\nREPLY    DS    CL64\nJOBTAB   DSECT\nJOBNME   DS    CL8\nJOBID    DS    CL8\nJOBASID  DS    H\n         PRINT NOGEN\n         DCBD  DEVD=DA,DSORG=PS\n**       S Y S T E M   M A P P I N G   M A C R O S\n         SPACE 2\n         IHAASCB\n         SPACE 2\n         IHAASVT\nCVT      DSECT\n         CVT   DSECT=YES\n         SPACE 2\n         IEFJESCT TYPE=DSECT\n         SPACE 2\n         IEFJSCVT\n         SPACE 2\n         $SJB\n         SPACE\n         DSECT\n         IEZCOM\n         DSECT\n         IEZCIB\n         END   IBHDRPLY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBHJESPM": {"ttr": 777, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*** ----------------------- EXITS ---------------------------------- **\nLOAD     IBHJ2005                  (LINKLIB EXIT)\nEXIT5    ROUTINE=X05$$DP,ENABLE    ($DP COMMAND PROCESSOR)\nLOAD     IBHJ2X01                  (LINKLIB EXIT)\nEXIT1    ROUTINE=X01$XRX,ENABLE    (2700 FONT CONTROL)\nLOAD     IBHJ2X15                  (LINKLIB EXIT)\nEXIT15   ROUTINE=X15$XRX,ENABLE    (9700 DJDE CONTROL)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBHJ2001": {"ttr": 779, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "        TITLE 'JES2 EXIT 1 - SET OUTPUT FORMAT FOR XEROX 2700 PRINTER'\n*\n***  COPY HASP GLOBALS\n*\n         COPY  $HASPGBL            COPY HASP GLOBALS\n         EJECT\nIBHEXT01 $MODULE NOTICE=NONE,      CREATE MODULE INFO TABLE            X\n               $HASPEQU,           GENERATE JES2 EQUATES               X\n               RESPA,              NEEDED BY $COMWORK                  X\n               $BUFFER,            NEEDED FOR $JCT                     X\n               $JCT,               NEEDED BY ALL ROUTINES              X\n               $JQE,               NEEDED BY ALL ROUTINES              X\n               $DCT,                                                   X\n               $JOE,                                                   X\n               $JOT,                                                   X\n               $MIT,               NEEDED BY ALL ROUTINES              X\n               $PCE,               NEEDED BY ALL ROUTINES              X\n               $PDDB,                                                  X\n               $PPPWORK,           NEEDED TO FIND JOE                  X\n               $CAT,               NEEDED BY ALL ROUTINES              X\n               $HCT                NEEDED BY ALL ROUTINES\n         EJECT\n         USING JOEDSECT,R7\n         USING DCTDSECT,R4\n         USING BUFDSECT,R3\n         SPACE 1\nX01$XRX $ENTRY BASE=R12,CSECT=YES     DEFINE EXIT ENTRY POINT\n         SPACE 1\n        $SAVE\n         LR    R12,R15                 LOAD BASE REGISTER\n         SLR   R15,R15                 PRESET RETURN CODE\n         LR    R4,R1                   SAVE DCT ADDRESS\n         CLC   DCTDEVN,=CL8'R15.PR1'   IS THIS CORRECT ENTRY\n         BNE   RETURN                  NO, SKIP PROCESSING\n         C     R0,=F'8'                DO NOT DO TRAILERS\n         BE    RETURN\n         SPACE 1\n***************************************************************\n* GET WORK AREA\n***************************************************************\n        $GETBUF TYPE=HASP,WAIT=YES    GET WORK AREA\n         LR    R3,R1                  SAVE BUFFER ADDR\n         SPACE 1\nPDIR     $SEPPDIR (R3)                SEND A PDIR IN CASE SNA REMOTE\n         SPACE 1\n         MVC   0(30,R3),SET133        ASSUME WIDE MODE\n         L     R7,PWKJOE              SET WORK JOE BASE\n         CLI   JOECURCL,C'L'          IS IT NARROW?\n         BNE   DOPRNT                 NO, WIDE IS FINE\n         MVC   0(30,R3),SET80         SET TO NARROW MODE\n         SPACE 2\nDOPRNT   LR     R1,R3                 POINT TO BUFFER\n         LA     R0,30                 SET DATA LENGTH\n*        MVC    20(8,R3),DCTDEVN\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n         $FREEBUF (R3)\n         SLR   R15,R15\n         SPACE 1\nRETURN   $RETURN RC=(R15)\n         LTORG\n         DROP  R3,R4,R7\n*ET133   DC    CL30'  00000 ZEROS 00000'\n*ET80    DC    CL30'  11111 ONES  11111'\nSET133   DC    CL30'     ~0'\nSET80    DC    CL30'     ~1'\n         SPACE 1\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBHJ2005": {"ttr": 781, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "$DP      TITLE 'IBHJ2$DP - $ D P - JES2 COMMAND PROCESSOR - EXIT 5'\n***************************************************************\n*\n*  JES2 COMMAND PREPROCESSOR (EXIT05)\n*\n*  PURPOSE = SUPPORT IN-HOUSE $DP COMMAND. THE $DP COMMAND DISPLAYS\n*            JOBNAME, QUEUE, FORM, ROUTE AND NUMBER OF LINES. INPUT\n*            IS AS FOLLOWS:\n*\n*    $DP (,F=XXXXXXXX) (,R=RXXX (-RYYY)) (,Q=X) (,J=JXXX (-XXX))\n*                                                   SXXX   XXX\n*                                                   TXXX   XXX\n*\n*    REGISTER CONVENTIONS:\n*\n*       R0-R4   =  WORK\n*       R5      =  ADDRESS OF CURRENT OPERAND / LINK REGISTER\n*       R6      =  INCREMENT VALUE OF 4\n*       R7      =  ADDRESS OF LAST OPERAND\n*       R8      =  ADDRESSABILITY TO WORK AREA\n*       R9      =  ADDRESSABILITY TO QUEUE NAME TABLE (QTAB)\n*       R10     =  ADDRESSABILITY TO THE JOT\n*       R11     =  A(HCT)    USING FOR HCT SET UP IN HCTDSECT\n*       R12     =  BASE REGISTER\n*       R13     =  A(HASPCOMM PCE)\n*       R14     =  RETURN ADDRESS\n*       R15     =  ENTRY ADDRESS\n*\n*       LINKAGE = STANDARD JES2 EXIT LINKAGE\n*\n*       INPUT = SEE JES2 SPL FOR EXIT 05\n*\n*       OUTPUT = DETAIL LINES TO CONSOLE THRU $CWTO MACRO\n*\n*       RETURN CODE = SEE BELOW\n*\n*          0 - TELL JES2 TO CONTINUE PROCESSING.\n*          4 - NOT USED BY THIS EXIT\n*          8 - RETURN TO JES AND BYPASS COMMAND PROCESSING\n*         12 - NOT USED BY THIS EXIT\n*         16 - NOT USED BY THIS EXIT\n*\n***************************************************************\n*\n***  COPY HASP GLOBALS\n*\n         COPY  $HASPGBL            COPY HASP GLOBALS\n         EJECT\nBHEXITS  $MODULE NOTICE=NONE,      CREATE MODULE INFO TABLE            X\n               $HASPEQU,           GENERATE JES2 EQUATES               X\n               RESPA,              NEEDED BY $COMWORK                  X\n               $BUFFER,            NEEDED FOR $JCT                     X\n               $JCT,               NEEDED BY ALL ROUTINES              X\n               $JQE,               NEEDED BY ALL ROUTINES              X\n               $JOE,                                                   X\n               $JOT,                                                   X\n               $MIT,               NEEDED BY ALL ROUTINES              X\n               $PCE,               NEEDED BY ALL ROUTINES              X\n               $CAT,               NEEDED BY ALL ROUTINES              X\n               $CMB,                                                   X\n               $COMWORK,                                               X\n               $HCT,               NEEDED BY ALL ROUTINES              X\n               $RAT,$COM,SYSP=(GEN,GEN,DATA,GEN,GEN)\n         EJECT\nX05$$DP $ENTRY BASE=R12,CSECT=YES     DEFINE EXIT ENTRY POINT\n         SPACE 1\n        $SAVE\n         LR    R12,R15                 LOAD BASE REGISTER\n         SPACE 1\n         CLC   $USER4(4),=F'0'\n         BE    X05$$DP1\n         L     R1,$USER4\n         DOM   MSG=(R1)\n         XC    $USER4(4),$USER4\nX05$$DP1 CLC   COMVERB(2),=CL2'DA'\n         BE    X05$$DA\n         CLC   COMVERB(2),=CL2'DP'     SEE IF $DP COMMAND\n         BNE   X05$RC00                EXIT RC=00 IF NOT\n         EJECT\n***************************************************************\n* GET WORK AREA\n***************************************************************\n        $GETBUF TYPE=HASP,WAIT=YES    GET WORK AREA\n         LR    R8,R1                  LOAD R8 WITH A(WORK AREA)\n         USING X05$WORK,R8\n***************************************************************\n* INITIALIZE WORK AREA\n***************************************************************\n         MVC   $DPFORM,=CL4' '         CLEAR FORM NAME\n         MVI   $DPQUEUE,X'00'          CLEAR QUEUE NAME\n         XC    $DPJOBH,$DPJOBH         CLEAR JOB # HIGH LIMIT\n         XC    $DPJOBL,$DPJOBL         CLEAR JOB # LOW LIMIT\n         MVI   $DPSWTCH,X'00'          CLEAR SWITCH\n         ZAP   $WORKLCT,=P'0'          ZERO DISP COUNTER\n* INIT ROUTE CODES BASED ON COFRTD ROUTINE IN HASPCOMM\n         L     R1,COMJROUT             PICK UP DEFAULT ROUTE CODE\n         LR    R0,R1                   COPY TO R0\n         TM    COMFLAG,CMBFLAGW        THIS REMOTE WORKSTATION\n         BO    X05$001                 LOOK AT RMT WRKSTATION IF YES\n*        AL    R0,=A($MAXRJE)          LOCAL CONSOLES DEFAULT TO\n*                                      LOCAL JOBS.\n         B     X05$002                 STORE VALUES\nX05$001  CLM   R1,B'1100',$OWNNODE     THIS OUR NODE\n         BNE   X05$002                 STORE VALUES IF NOT\n         LH    R1,COMJRMT              LOAD REMOTE NUMBER\n         BCTR  R1,0                    REDUCE BY ONE\n         MH    R1,=Y(RATTLE)           GET OFFSET\n         AL    R1,$RATABLE             POINT TO RAT ELEMENT\n         L     R0,RATROUTE-RATDSECT(,R1) PICK UP RMT ROUTING\n         LR    R1,R0                   MAKE A COPY OF IT\nX05$002  ST    R0,$DPRNHI              STORE HIGH BOUND REMOTE\n         ST    R1,$DPRNLO              STORE LOW BOUND REMOTE\n         EJECT\n***************************************************************\n* LOOP TO PROCESS INPUT COMMAND\n*     R5 = A(A(FIRST OPERAND))         -----\n*     R6 = 4 (USED FOR BXH INCREMENT)       |>> ALL PASSED FROM JES\n*     R7 = A(A(LAST OPERAND))          -----\n*\n* EX:   $DP,J=J42,Q=A         | A(J=J42) | A(Q=A) | DUMMY |\n*                             2A0        2A4      2A8\n*\n*       R5=0002A0 R6=000004 R7=0002A4\n***************************************************************\nX05$I01  BXH   R5,R6,X05$O00           LOOP UNTIL R5 = R7\n         L     R1,0(,R5)               R1 = A(CURRENT OPERAND)\n         CLI   1(R1),C'='              SEE IF CORRECT FORMAT\n         BNE   X05$INVL                INVALID IF NOT\n***************************************************************\n* SEARCH FOR KEYWORD\n***************************************************************\n         LA    R15,KEYWTAB             GET ADDRESS OF KEYWORD TABLE\nX05$I02  CLC   0(1,R15),0(R1)          SEE IF KEYWORD MATCH\n         BNE   X05$I03                 BRANCH IF NO MATCH\n         L     R14,0(,R15)             R14 = A(RTN TO PROCESS KEYWORD)\n         BR    R14                     PROCESS KEYWORD\nX05$I03  LA    R15,4(,R15)             BUMP TO NEXT ENTRY\n         CLI   0(R15),X'FF'            AT END OF TABLE?\n         BNE   X05$I02                 LOOP IF NOT AT END\n         B     X05$INVL                KEYWORD NOT FOUND IF AT END\n*\nKEYWTAB  DS    0H\n         DC    CL1'F',AL3(X05$F00)\n         DC    CL1'Q',AL3(X05$Q00)\n         DC    CL1'R',AL3(X05$R00)\n         DC    CL1'J',AL3(X05$J00)\n         DC    2X'FF'\n         EJECT\n***************************************************************\n*** PROCESS F= KEYWORD\n***************************************************************\nX05$F00  DS    0H\n         OI    $DPSWTCH,$DPSWFRM       F= OPERAND FOUND\n         LA    R1,2(,R1)               BUMP PAST 'F='\n         LA    R2,$DPFORM              ADDRESS TO STORE FORM NAME\n         LA    R3,8                    LIMIT OF 8 CHARACTERS\n         L     R4,4(,R5)               ADDRESS OF NEXT OPERAND\n         BCTR  R4,0                    ADDRESS OF DELIMITER\nX05$F01  CLR   R1,R4                   SEE IF AT END OF OPERAND\n         BNL   X05$F00X                EXIT IF AT END\n         MVC   0(1,R2),0(R1)           MOVE INPUT TO FORM NAME AREA\n         LA    R1,1(,R1)               BUMP TO NEXT INPUT CHAR\n         LA    R2,1(,R2)               BUMP TO NEXT STORE ADDRESS\n         BCT   R3,X05$F01              BRANCH TO NEXT CHARACTER\nX05$F00X B     X05$I01                 BRANCH TO MAIN INPUT LOOP\n***************************************************************\n*** PROCESS Q= KEYWORD    (SIMPLE)\n***************************************************************\nX05$Q00  DS    0H\n         OI    $DPSWTCH,$DPSWQUE       Q= OPERAND FOUND\n         MVC   $DPQUEUE,2(R1)          MOVE INPUT TO STORE AREA\n         B     X05$I01                 RETURN TO MAIN INPUT LOOP\n***************************************************************\n*** PROCESS R= KEYWORD\n*\n*  (STOLEN FROM JES2 MODS TAPE -- $LF COMMAND -- NORTHWESTERN BANK)\n*\n*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED\n*    --------------\n*    NNNNNRNNNN (-RMMMM)\n*    NNNN.RNNNN (-RMMMM)\n*    NAME.RNNNN (-RMMMM)\n*                      -  RANGE OF REMOTES AT A GIVEN NODE\n*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD\n*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE\n*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY\n*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY\n*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS\n*    LOCAL             -  ALL SPECIAL LOCAL\n*\n***********************************************************************\nX05$R00  L     R3,0(,R5)           POINT TO OPERAND\n         LA    R3,2(,R3)           INCREMENT PAST 'R='\n         SLR   R1,R1               SET ZERO LENGTH\n         LR    R4,R3               SAVE START OF OPERAND\n         OI    $DPSWTCH,$DPSWRMT       R= OPERAND FOUND\n         MVC   $DPDST11,=CL10' '   BLANK DEST1 PART1\n         MVC   $DPDST12,=CL10' '   BLANK DEST1 PART2\n         MVC   $DPDST21,=CL10' '   BLANK DEST2 PART1\nX05$R01  CLI    0(R4),C'-'         END OF FIRST OPERAND\n         BE    X05$R03             YES, BRANCH\n         CLI   0(R4),C','          END OF LAST OPERAND\n         BE    X05$R03             YES, BRANCH\n         CLI   0(R4),C' '          END OF LAST OPERAND\n         BE    X05$R03             YES, BRANCH\n         CLI   0(R4),C'.'          TWO PART DESTINATION\n         BE    X05$R02             YES, BRANCH\n         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\n         B     X05$R01             LOOP UNTIL DONE\nX05$R02  OI    $DPSWTCH,TWOPART    SET TWO PART DEST INDICATION\n         CLI   $DPDST11,C' '       HAS FIRST ALREADY BEEN SPECIFIED\n         BNE   X05$INVL            YES, ERROR\nX05$R03  LTR   R1,R1               CHECK LENGTH OF DEST\n         BZ    X05$INVL            ZERO, ERROR\n         CH    R1,=H'10'           CHECK LENGTH OF DEST\n         BH    X05$INVL            GREATER THAN 10, ERROR\n         BCTR  R1,0                MAKE MACHINE LENGTH\n         CLI   $DPDST11,C' '       HAS PART1 ALREADY BEEN SPECIFIED\n         BNE   X05$R04             YES, BRANCH\n         EX    R1,MVC$D11          MOVE DEST1 PART1\n         B     X05$R06             GET OUT\nX05$R04  TM    $DPSWTCH,TWOPART    SEE IF TWO PART DEST INDICATION\n         BZ    X05$R05             NO, BRANCH\n         CLI   $DPDST12,C' '       SEE IF PART2 ALREADY BEEN SPECIFIED\n         BNE   X05$R05             YES, THIS IS THE SECOND DEST\n         EX    R1,MVC$D12          MOVE DEST1 PART2\n         B     X05$R06             GET OUT\nX05$R05  CLI   $DPDST21,C' '       SEE IF DEST2 ALREADY BEEN SPECIFIED\n         BNE   X05$INVL            YES, ERROR\n         EX    R1,MVC$D21          MOVE DEST2 PART1\n         B     X05$R06             GET OUT\nMVC$D11  MVC   $DPDST11(0),0(R3)   MOVE DEST1 PART1   *EXECUTE*\nMVC$D12  MVC   $DPDST12(0),0(R3)   MOVE DEST1 PART2   *EXECUTE*\nMVC$D21  MVC   $DPDST21(0),0(R3)   MOVE DEST2 PART1   *EXECUTE*\nX05$R06  CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED\n         BE    X05$R07             YES, BRANCH\n         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED\n         BE    X05$R07             YES, BRANCH\n         B     X05$R08             GO CONVERT DEST TO ROUTE CODES\nX05$R07  LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'\n         LR    R3,R4               SAVE START ADDRESS\n         SLR   R1,R1               RESET LENGTH TO ZERO\n         B     X05$R01             LOOP FOR NEXT DESTINATION\nX05$R08  MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE\n         $DEST $DPDST11,COMDWORK,LEN=10 CONVERT DEST1 PART1\n         BZ    X05$INVL            BAD DEST, ERROR\n         ST    R1,$DPRNLO          SAVE ROUTE CODE\n         CLI   $DPDST12,C' '       CHECK IF TWO PART DEST\n         BE    X05$R09             NO, BRANCH\n         CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY\n         BNE   X05$INVL            NO, ERROR\n         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET\n         BE    X05$INVL            NO, ERROR\n         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART\n         $DEST $DPDST12,COMDWORK,LEN=10 CONVERT DEST1 PART2\n         BZ    X05$INVL            BAD DEST, ERROR\n         ST    R1,$DPRNLO          SAVE ROUTE CODE\n         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED\n         BNE   X05$INVL            NO, ERROR\nX05$R09  MVC   $DPRNHI,$DPRNLO     SET DEST RANGE TO EQUAL VALUES\n         CLI   $DPDST21,C' '       WAS DEST RANGE SPECIFIED\n         BE    X05$R00X            NO, BRANCH\n         $DEST $DPDST21,COMDWORK,LEN=10 CONVERT DEST2 PART1\n         BZ    X05$INVL            BAD DEST, ERROR\n         ST    R1,$DPRNHI          SAVE ROUTE CODE\n         CLC   $DPRNHI,$DPRNLO     CHECK FOR ASCENDING RANGE\n         BL    X05$INVL            NO, ERROR\nX05$R00X B     X05$I01             LOOP TO NEXT SPECIFICATION\n***************************************************************\n*** PROCESS J= KEYWORD\n***************************************************************\nX05$J00  DS    0H\n         OI    $DPSWTCH,$DPSWJRG       J= OPERAND FOUND\n         CLI   3(R1),C'0'              SEE IF VALID JOB NUMBER\n         BL    X05$INVL                BRANCH IF INVALID\n         CLI   3(R1),C'9'              SEE IF VALID JOB NUMBER\n         BH    X05$INVL                BRANCH IF INVALID\n         SPACE 1\n         CLI   2(R1),C'J'              IF JOB (J=J123)\n         BE    X05$J01                  BRANCH TO CONVERT TO BINARY\n         CLI   2(R1),C'S'              IF STC (J=S123)\n         BE    X05$J01                  BRANCH\n         CLI   2(R1),C'T'              TSO USER (J=T123)?\n         BNE   X05$INVL                 BRANCH TO INVALID IF NOT TSO\n         SPACE 1\nX05$J01  LA    R1,3(,R1)               BUMP PAST J=J OF J=JXXX\n         L     R4,4(,R5)               R4 = A(NEXT OPERAND)\n         BCTR  R4,0                    R4 = A(DELIMITER)\n         SLR   R0,R0                   CLEAR R0\n         SLR   R15,R15                 CLEAR R15\n         ST    R0,COMFWORK             CLEAR FULL WORK AREA\n         SPACE 1\nX05$J02  MVN   COMFWORK+1(1),0(R1)     LOOP - MOVE NUMERIC PORTION\n         MH    R0,=H'10'               MULTIPLY FOR TENS\n         AH    R0,COMFWORK             ADD UNITS\n         CH    R0,=H'9999'             SEE IF JOB NUMBER TOO HIGH\n         BH    X05$INVL                BRANCH TO ERROR IF TOO HIGH\nX05$J03  LA    R1,1(,R1)               BUMP TO NEXT INPUT CHAR\n         CLR   R1,R4                   IF AT END OF OPERAND\n         BNL   X05$J05                  BRANCH OUT OF LOOP\n         CLI   0(R1),C'0'              SEE IF VALID NUMBER\n         BL    X05$J04                  BRANCH TO SEE IF CHAR IS '-'\n         CLI   0(R1),C'9'              SEE IF VALID NUMBER\n         BH    X05$INVL                 BRANCH IF INVALID NUMBER\n         B     X05$J02                 PROCESS THIS VALID NUMBER\nX05$J04  CLI   0(R1),C'-'              SEE IF LOW-HIGH RANGE SPECIFIED\n         BNE   X05$INVL                 BRANCH TO ERROR IF NOT\n         LTR   R15,R15                 SEE IF WE'VE BEEN HERE BEFORE\n         BNZ   X05$INVL                 BRANCH TO ERROR IF WE HAVE\n         LR    R15,R0                  PUT LOW RANGE IN R15\n         SLR   R0,R0                   CLEAR R0\n         B     X05$J03                 CHECK OUT NEXT CHARACTER\n         SPACE 1\nX05$J05  LTR   R15,R15                 SEE IF LOW-HIGH RANGE SPECIFIED\n         BNZ   X05$J06                 BRANCH IF BOTH MAY BE SPECIFIED\n         XR    R15,R0                  SWITCH R15 AND R0 CONTENTS\n         XR    R0,R15                       SO R15 HAS LOW\n         XR    R15,R0                            RANGE VALUE\nX05$J06  STH   R15,$DPJOBL             STORE LOW RANGE JOB NUMBER\n         STH   R0,$DPJOBH              STORE HIGH RANGE JOB NUMBER\n         SPACE 1\n         B     X05$I01                 BRANCH TO MAIN INPUT LOOP\n         EJECT\n***************************************************************\n*** OUTPUT ROUTINES\n***************************************************************\nQTAB     DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',2X'FF'\nX05$O00  DS    0H\n         TM    COMFLAG,CMBFLAGW        THIS REMOTE WORKSTATION\n         BO    X05$O00A                YES, THEN NO OPERANDS REQUIRED\n         TM    $DPSWTCH,$DPSWOPS       WERE ANY OPERANDS SPECIFIED?\n         BZ    X05$INVL                NO, TELL OPER SORRY\nX05$O00A L     R10,$JOTABLE            ADDRESSABILITY TO JOT\n         USING JOTDSECT,R10\n         LA    R9,QTAB-1               A(QUEUE NAMES - 1)\n***************************************************************\n*** FIND QUEUE HEADER FOR LOCAL AND REMOTE QUEUES\n***************************************************************\nX05$O01  LA    R9,1(,R9)               BUMP TO NEXT QUEUE NAME\n         CLI   0(R9),X'FF'             IF AT END,\n         BE    X05$DONE                   WE ARE DONE!!!\n        $#JOE  Q=(R9),R=2,DEST=LOC     GET ADDRESS OF LOCAL JOE HEADER\n         BAL   R5,X05$O02              GO PROCESS LOCAL QUEUE\n        $#JOE  Q=(R9),R=2,DEST=RMT     GET ADDRESS OF REMOTE JOE HEADER\n         BAL   R5,X05$O02              GO PROCESS REMOTE QUEUE\n         B     X05$O01                 LOOP TO GET NEXT QUEUE NAME\n         USING JOEDSECT,R2\n***************************************************************\n*** STUMBLE THRU ALL JOES OF THIS PARTICULAR QUEUE (R2)\n***************************************************************\nX05$O02  LA    R2,0(,R2)               CLEAR HIGH BYTE\n         ICM   R2,B'0111',JOENEXTB     GET OFFSET OF NEXT JOE\n         BZR   R5                      BR TO NEXT Q IF LAST JOE IN Q\n         ALR   R2,R10                  ADD OFFSET TO JOT\n         TM    JOEFLAG,$JOEBUSY        SEE IF JOE IS BUSY RIGHT NOW\n         BNZ   X05$O02                  BRANCH TO NEXT IF BEING PRINTED\n*\n*** CHECK TO SEE IF QUEUE WAS SPECIFIED\n*\n         CLI   $DPQUEUE,X'00'          SEE IF QUEUE SPECIFIED\n         BE    X05$O03                  BRANCH AROUND FOR ALL QUEUES\n         CLC   JOECURCL,$DPQUEUE       ARE WE IN THE QUEUE WE WANT\n         BNE   X05$O02                  BRANCH IF NOT\n*\n*** CHECK TO SEE IF REMOTE RANGE SPECIFIED\n*\nX05$O03  CLC   JOEROUT,$DPRNLO         SEE IF WITHIN ROUTE RANGE\n         BL    X05$O02                  BRANCH IF NOT\n         CLC   JOEROUT,$DPRNHI         SEE IF WITHIN ROUTE RANGE\n         BH    X05$O02                  BRANCH IF NOT\n***************************************************************\n*** GET CHARACTERISTIC JOE FOR FORM NAME (R3)\n***************************************************************\n         LA    R3,0(,R3)               CLEAR HIGH BYTE\n         ICM   R3,B'0111',JOECHARB     GET OFFSET OF CHARACTERISTIC JOE\n         BZ    X05$O02                 GET NEXT JOE IF NO CHAR JOE\n         ALR   R3,R10                  GET OFFSET INTO JOT\n         CLI   $DPFORM,C' '            SEE IF FORM SPECIFIED\n         BE    X05$O04                  BRANCH AROUND FOR ALL FORMS\n         CLC   $DPFORM,JOEFORM-JOEDSECT(R3)  SEE IF FORM MATCHES\n         BNE   X05$O02                 GET NEXT JOE IN QUEUE IF NOT\n***************************************************************\n*** GET JQE FOR JOB NUMBER AND NAME (R4)\n***************************************************************\n         USING JQEDSECT,R4\nX05$O04  LA    R4,0(,R4)               CLEAR HIGH BYTE\n         ICM   R4,B'0111',JOEJQEB      GET JQE OFFSET\n         BZ    X05$O02                 GET NEXT JOE IF NO JQE\n         AL    R4,$JOBQPTR             GET ADDRESS OF PROPER JQE\n         CLC   $DPJOBL,=H'0'           SEE IF NO JOB SPECIFIED\n         BE    X05$O06                  BRANCH FOR ALL JOBS\n         CLC   $DPJOBH,=H'0'           SEE IF HIGH RANGE SPECIFIED\n         BE    X05$O05                  BRANCH IF NOT RANGE REQUEST\n         CLC   $DPJOBH,JQEJOBNO        SEE IF > RANGE\n         BL    X05$O02                  GET NXT JOE IF TOO HIGH\n         CLC   $DPJOBL,JQEJOBNO        SEE IF < RANGE\n         BH    X05$O02                  GET NXT JOE IF TOO LOW\n         B     X05$O06                  CONTINUE IF PASSED TEST\nX05$O05  CLC   $DPJOBL,JQEJOBNO        SEE IF JOB # MATCH\n         BNE   X05$O02                  GET NEXT JOE IF NO MATCH\n         EJECT\n***************************************************************\n*** FORMAT MESSAGE FOR WRITE TO OPERATOR\n***************************************************************\nX05$O06  MVC   $DPOLINE(L'X05$MSG),X05$MSG    MOVE IN SKELETON MESSAGE\n*\n*** MOVE IN JOB NAME FROM JQE (R4)\n*\n         MVC   $DPOJN,JQEJNAME                MOVE IN JOB NAME\n*\n*** MOVE IN JOB NUMBER FORM JQE (R4)\n*\n         SLR   R1,R1                          CLEAR R1 FOR WORK\n         LH    R1,JQEJOBNO                    GET BINARY HASP JOB #\n         TM    JQEFLAG3,QUEJOB                SEE IF JOB\n         BZ    X05$O06A                       BRANCH IF JOB\n         MVC   $DPOJ#(3),=CL3'STC'            MOVE IN STC\n         TM    JQEFLAG3,QUESTC                SEE IF STC\n         BO    X05$O06A                       BRANCH IF STC\n         MVC   $DPOJ#(3),=CL3'TSU'            MUST BE TSO USER\nX05$O06A CVD   R1,COMDWORK                    PUT IN LOW END OF DWORK\n         MVC   COMDWORK-1(6),=X'402020202120' PUT EDIT MASK IN HIGH END\n         ED    COMDWORK-1(6),COMDWORK+5       EDIT FROM LOW TO HIGH\n         MVC   $DPOJ#+3(5),COMDWORK           MOVE IN JOB #\n         SPACE 1\n* SET JOB HELD (HJ) INDICATOR IF APPLICABLE\n         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1     JOB HELD?\n         BZ    *+10                           NO\n         MVC   $DPOHJ,=C'H'                   INDICATE JOB IS HELD\n         DROP  R4\n*\n*** MOVE IN FORM NAME FORM CHARACTERISTIC JOE (R3)\n*\n         MVC   $DPOF,JOEFORM-JOEDSECT(R3)  MOVE IN FORM NAME\n*\n*** MOVE IN QUEUE NAME FROM JOE (R2)\n*\n         MVC   $DPOQ,JOECURCL          MOVE IN QUEUE CLASS\n*\n*** MOVE IN PRIORITY FROM JOE (R2)\n*\n         LH    R1,JOEPRIO              GET JOE PRIORITY\n         SRA   R1,4                    BASE OFF 15 MAX\n         CVD   R1,COMDWORK             CONVERT TO DECIMAL\n         MVC   $DPOP,=X'40212020'\n         ED    $DPOP,COMDWORK+6   PUT PRIO INTO MSG\n         MVC   $DPOP(2),=C'P='\n         CLI   $DPOP+2,C'0'\n         BNE   *+8\n         MVI   $DPOP+2,C' '      MAKE PRIO MORE REDABLE\n*\n*** MOVE IN GROUP HELD INDICATOR FROM JOE (R2)\n*\n         TM    JOEFLAG2,$JOESLEC       IS THIS JOE (GROUP) SELECTABLE\n         BZ    *+10                    YES\n         MVC   $DPOHG,=C'NS'           INDICATE THIS GROUP IS HELD\n*\n*** MOVE IN REMOTE NAME FROM JOE (R2)\n*\n         LA    R1,$DPOR                R1 = A(REMOTE MESSAGE FIELD)\n         SLR   R0,R0                   R0 = ZERO\n         CLC   $OWNNODE,JOERNODE       IS THIS OUR NODE\n         BE    X05$O06C                YES, DO NOT SHOW NODE NUMBER\n         MVI   0(R1),C'N'              INDICATE NODE IN MESSAGE\n         ICM   R0,B'0011',JOERNODE     GET NODE NUMBER\n         BNZ   X05$O06D                SKIP IF NOT SPECIAL UNIT\n         MVI   0(R1),C'U'              REPLACE R=R WITH R=U\nX05$O06C ICM   R0,B'0011',JOEREMOT     GET REMOTE NUMBER\n         BNZ   X05$O06D                CONVERT IT IF REMOTE\n         MVC   0(5,R1),=CL5'LOCAL'     ELSE SAY IT IS LOCAL\n         B     X05$O07                 AND CONTINUE\nX05$O06D CVD   R0,COMDWORK             CONVERT TO DECIMAL\n         UNPK  1(5,R1),COMDWORK        AND CONVERT TO READABLE\n         OI    5(R1),C'0'              SET ZONE\nX05$O06E CLI   1(R1),C'0'              SEE IF LEADING ZEROS\n         BNE   X05$O06F                CONTINUE IF NOT\n         MVC   1(5,R1),2(R1)           MOVE NUMBER LEFT\n         B     X05$O06E                LOOP IT\nX05$O06F CLI   0(R1),C'N'              SEE IF NODE PUT OUT\n         BNE   X05$O07                 CONTINUE IF NOT\n         ICM   R0,B'0011',JOEREMOT     GET REMOTE NUMBER\n         BZ    X05$O07                 CONTINUE IF NO REMOTE\nX05$O06G LA    R1,1(,R1)               BUMP TO NEXT CHAR\n         CLI   R1,C' '                 IS IT BLANK\n         BNE   X05$O06G                NO, LOOK SOME MORE\n         MVI   0(R1),C'R'              MOVE IN REMOTE\n         B     X05$O06D                DO IT AGAIN\n*\n*** MOVE IN NUMBER OF LINES FROM JOE (R2)\n*\nX05$O07  DS    0H\n         L     R0,JOERECCT             GET RECORD COUNT\n         TM    JOEFLAG,$JOECKV         SEE IF SOME PRINTED ALREADY\n         BNO   X05$O06B                BRANCH IF NONE PRINTED\n         S     R0,JOEWRECN             SUBTRACT LINES PRINTED\n         BP    X05$O06B                BRANCH IF LINES LEFT > 0\n         SLR   R0,R0                   MAKE LINES LEFT = 0\nX05$O06B CVD   R0,COMDWORK             CONVERT TO DECIMAL (CVD)\n         MVC   $DPOL#,=X'40206B2020206B202120'  PUT IN EDIT MASK\n         ED    $DPOL#,COMDWORK+4                  PUT OUT LINES\n         SPACE 1\n***************************************************************\n*** DO THE WRITE TO OPERATOR FROM $COMWORK COMMAND AREA\n***************************************************************\n         BAL   R14,CHKAREA             GET AREA FOR MCS DISPLAY\n         LA    R0,X05$MSGL             GET X05$MSG LENGTH\n         LA    R1,$DPOLINE             R1 = A(THE MESSAGE)\n        $CWTO  MSG=(R1),L=(R0),MSGID=999,JOB=YES\n         SPACE 1\n         CP    $WORKLCT,=P'50'\n         BH    X05$XIT1\n         AP    $WORKLCT,=P'1'\n         B     X05$O02                 LOOP FOR NEXT JOE IN QUEUE\n         SPACE 1\n*********************************************************************\n****************IF YOU CHANGE THIS MESSAGE, CHANGE THE DSECT TOO!****\nX05$MSG DC  C'JOB##### JXXXXXXX Q=X F=XXXXXXX P=XX RXXXX   0,000,000   X\n                 '\nX05$MSGL EQU *-X05$MSG\n*********************************************************************\n         SPACE 1\n         DROP  R2\n         EJECT\n***************************************************************\n*** ALL DONE\n***************************************************************\nX05$DONE BAL   R14,CHKAREA             GET AREA FOR MCS DISPLAY\n         $CWTO MSG='$DP DISPLAY COMPLETED',MSGID=999\n         B     X05$RC8                 EXIT RC=8\n***************************************************************\n*** MAX LINE DISPLAY > 50\n***************************************************************\nX05$XIT1 BAL   R14,CHKAREA             GET AREA FOR MCS DISPLAY\n         $CWTO MSG='$DP DISPLAY COMPLETED - 50 JOBS LISTED',MSGID=999\n         B     X05$RC8                 EXIT RC=8\n***************************************************************\n*** ERROR ERROR\n***************************************************************\nX05$INVL L     R1,0(,R5)               GET ADDRESS OF CURRENT KEYWORD\n         MVC   COMMAND(2),0(R1)        PUT CURRENT KEYWORD IN MSG\n         MVC   COMMAND+2(L'X05$EMSG),X05$EMSG\n         LA    R0,X05$EMSL             SAVE LENGTH OF MSG\n        $CWTO  L=(R0),MSGID=999\n         B     X05$RC8                 EXIT RC=8\n         SPACE 1\nX05$EMSG DC  C' INVALID OR MISSING OPERAND(S)'\nX05$EMSL EQU *-X05$EMSG+2\n***************************************************************\n*** IF JES2 IS DRAINING, SAY SO THEN EXIT\n***************************************************************\nX05$$DA  DS    0H\n         BAL   R4,X05$$DAR\n         B     X05$RC00\nX05$$DAR DS    0H\n         CLC   $USER4(4),=F'0'\n         BNE   X05$$DAX\n         TM    $STATUS,$DRAINED        SYSTEM DRAINING ?\n         BNOR  R4                      NO, EXIT\n         WTO   'HASP999 **** JES2 IS DRAINING ****',DESC=(2),          X\n               ROUTCDE=(1,2,3,5,7,8)\n         ST    R1,$USER4\nX05$$DAX BR    R4\n***************************************************************\n*** EXIT ROUTINES\n***************************************************************\nX05$RC00 DS    0H\n         BAL   R4,X05$$DAR\n         SLR   R15,R15                 EXIT WITH ZERO RETURN CODE\n         B     X05$RTRN\n         SPACE 1\nX05$RC8  DS    0H\n        $FREEBUF (R8)                  FREE THE WORK AREA\n         BAL   R4,X05$$DAR\n         LA    R15,8\n         B     X05$RTRN\n         SPACE 1\nX05$RTRN DS    0H                       RETURN WITH RC IN R15\n         $RETURN RC=(R15)               RETURN WITH RC IN R15\n         SPACE 2\n         EJECT\nCHKAREA  DS    0H                     CHECK FOR MCS AREA\n*\n*  METHOD OF OPERATION:\n*  GET THE ADDRESS OF THE EXTENDED COM PCE FROM THE HCT.\n*  THIS AREA CONATAINS A TABLE THAT HAS DATA ABOUT MCS CONSOLES.\n*  THE TABLE CONATINS THE MCS CONSOLE ID, AND THE AREA OR AREAS\n*  THAT IT CONTAINS.  PARSE THE TABLE FOR THE CONSOLE ID, AND SEE\n*  IF IT HAS AN AREA, IF SO PLACE THE AREA IN THE COMWORK PCE FIELD\n*  'COMUCMA', THEN SET THE MLWTO DATA STREAM SWITH ON.\n*\n*\n         TM    COMFLAG,CMBFLAGU       MCS/UCM CONSOLE\n         BNOR  R14                    RETURN NOR MCS\n         STM   R14,R13,$WORKSAV       SAVE REGS\n         L     R15,$COMEXTN           GET ADDRESS OF WORK COM WORK\n         USING COMDSECT,R15           AND MAKE ADDRESSABLE\n         SR    R1,R1                  CLEAR WORK REG\n         SR    R2,R2                  CLEAR WORK REG\n         LH    R2,COMOCON             GET NUMBER OF CONSOLES\n         M     R2,=F'16'              COMPUTE TABLE LENGTH\n         LA    R3,COMRESP(R3)         GET END OF TABLE\n         LA    R2,COMRESP             GET BEGINING OF TABLE\nCHKAREA1 DS    0H\n         CLC   0(1,R2),COMUCM         CHECK FOR CONSOLE ID\n         BH    CHKAREAX               EXIT IF HIGH\n         BE    CHKAREA2               CHECK FOR CONSOLE AREA\n         LA    R2,16(,R2)             UP TABLE ADDRESS\n         CR    R2,R3                  END OF TABLE ?\n         BH    CHKAREAX               YES, EXIT\n         B     CHKAREA1               LOOP AGAIN\nCHKAREA2 DS    0H\n         CLC   COMVERB(2),=CL2'DA'\n         BNE   CHKAREA3\n         CLI   0(R2),0\n         BE    CHKAREAX\n         MVC   COMUCMA,0(R2)          PUT IN AREA\n         MVI   COMLINET,X'20'         SET DATA STREAM SWITH(MLWTO)\nCHKAREA3 DS    0H\n         CLI   3(R2),0                VALID AREA ?\n         BE    CHKAREAX               NO, EXIT\n         MVC   COMUCMA,3(R2)          PUT IN AREA\n         MVI   COMLINET,X'20'         SET DATA STREAM SWITH(MLWTO)\nCHKAREAX DS    0H\n         LM    R14,R13,$WORKSAV       RESTORE REGS\n         BR    R14                    RETURN TO CALLER\n         EJECT\n         LTORG\nX05$LEN  EQU   *-X05$$DP\n         DROP  R12,R8,R10\nX05$WORK DSECT\n$DPRNHI  DS    F                   HIGH REMOTE RANGE\n$DPRNLO  DS    F                   LOW REMOTE RANGE\n$DPJOBH  DS    H                   HIGH JOB NUMBER RANGE\n$DPJOBL  DS    H                   LOW JOB NUMBER RANGE\n$DPFORM  DS    CL4                 FORM NAME\n$DPQUEUE DS    CL1                 QUEUE NAME\n$DPDST11 DS    CL10                DEST 1 PART 1\n$DPDST12 DS    CL10                DEST 1 PART 2\n$DPDST21 DS    CL10                DEST 2 PART 1\n$DPSWTCH DS    XL1                 INDICATOR\n$DPSWOPS EQU   X'0F'               ALL OPERANDS\n$DPSWQUE EQU   X'01'               Q= OPERAND\n$DPSWFRM EQU   X'02'               F= OPERAND\n$DPSWJRG EQU   X'04'               J= OPERAND\n$DPSWRMT EQU   X'08'               R= OPERAND\nTWOPART  EQU   X'80'\n*X05$MSG DC  C'JOB##### JXXXXXXX Q=X F=XXXXXXX P=XX RXXXX   0,000,000\n*              H NS'\n$DPOLINE DS    0CL59\n$DPOJ#   DC    CL8'JOB#####',C' '\n$DPOJN   DC    CL8'JXXXXXXX',C' ',C'Q='\n$DPOQ    DC    CL1'X',C' ',C'F='\n$DPOF    DC    CL8'XXXXXXXX'\n$DPOP    DC    CL4'P=XX',C' '\n$DPOR    DC    CL5'RXXXX',C'  '\n$DPOL#   DC    CL10' 0,000,000',C' '\n$DPOHJ   DC    C' ',C' '\n$DPOHG   DC    C'  '\n$WORKSAV DS    18F\n$WORKLCT DS    PL3\n$OLDCMB  DS    CL256\nX05$$DP  CSECT\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBHJ2015": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "        TITLE 'JES2 EXIT 15 - SET OUTPUT DJDE FOR 9700 PRINTER'\n*\n***  COPY HASP GLOBALS\n*\n         COPY  $HASPGBL            COPY HASP GLOBALS\n         EJECT\nIBHEXT15 $MODULE NOTICE=NONE,      CREATE MODULE INFO TABLE            X\n               $HASPEQU,           GENERATE JES2 EQUATES               X\n               RESPA,              NEEDED BY $COMWORK                  X\n               $BUFFER,            NEEDED FOR $JCT                     X\n               $JCT,               NEEDED BY ALL ROUTINES              X\n               $JQE,               NEEDED BY ALL ROUTINES              X\n               $DCT,                                                   X\n               $JOE,                                                   X\n               $JOT,                                                   X\n               $MIT,               NEEDED BY ALL ROUTINES              X\n               $PCE,               NEEDED BY ALL ROUTINES              X\n               $PDDB,                                                  X\n               $PPPWORK,           NEEDED TO FIND JOE                  X\n               $CAT,               NEEDED BY ALL ROUTINES              X\n               $HCT                NEEDED BY ALL ROUTINES\n         EJECT\n         SPACE 1\nX15$XRX $ENTRY BASE=R12,CSECT=YES     DEFINE EXIT ENTRY POINT\n         SPACE 1\n        $SAVE\n         LR    R12,R15                 LOAD BASE REGISTER\n         SLR   R15,R15                 PRESET RETURN CODE\n         C     R0,=F'4'                IS THIS COPY OF A DATASET\n         BNE   RETURN                  NO, FORGET IT\n         L     R4,16(R1)               GET DCT ADDRESS\n         USING DCTDSECT,R4\n         L     R7,4(R1)                GET WORK JOE ADDRESS\n         USING JOEDSECT,R7\n         SPACE 1\n*        SEE IF PRINTER IS SELECTING FORMS AUTOMATICALLY\n*\n*        SEE IF PRINTER IS SET WITH FIRST CLASS OF \"Z\"\n         CLI   DCTCLASS,C'Z'       IS FIRST CLASS A Z?\n         BNE   RETURN              NO, SKIP PROCESSING\n         SPACE 1\n         CLC   =CL7'PRINTER',DCTDEVN   IS THIS CORRECT ENTRY\n         BNE   RETURN              NO\n         SPACE 1\n*        SEE IF WE ARE PROCESSING AN \"AUTOMATIC\" CLASS\n         TRT   JOECURCL,X97CTBL    IS THIS CLASS IN OUR TABLE?\n         BZ    RETURN              NO, SKIP FURTHER PROCESSING\n         SPACE 1\n***************************************************************\n* GET WORK AREA\n***************************************************************\nGETWORK $GETBUF TYPE=HASP,WAIT=YES    GET WORK AREA\n         LR    R3,R1                  SAVE BUFFER ADDR\n         USING BUFDSECT,R3\n         LA    R9,BUFSTART            BUMP PAST BUFFER PREFIX\n         SPACE 1\nX97INIT  DS     0H       XEROX 9700 PROCESSING\n         SPACE 1\n         SLR   R2,R2\n         TRT   JOECURCL,X97CTBL    GET CLASS OFFSET VALUE\n         SLL   R2,2                MUTIPLY BY 4 TO GET TABLE OFFSET\n         SPACE 1\n*        BUILD THE DJDE BY SEARCH THRU THE CLASS/FORM TABLE\n         L     R5,X97@TBL-4(R2)    POINT TO BEGINNING OF CLASS TABLE\n         B     FRMCHK\nFRMLOOP  CLI   X97XRTBL(R5),X'00'  AT END OF TABLE?\n         BE    PRPUT               GO PLANT THE DEFAULT DJDE\n         LA    R5,X97XRTBL(R5)     POINT TO NEXT TABLE ENTRY\nFRMCHK   CLC   DCTFORMS,1(R5)      IS THIS THE FORM ?\n         BE    PRPUT               YES, GO USE IT THEN\n         BNE   FRMLOOP             NO, GO CHECK SOME MORE\n         SPACE 1\nPRPUT    MVC   0(80,R9),10(R5)     COPY THIS DJDE INTO OUTPUT BUFFER\n         LR     R1,R9              POINT TO BUFFER\n         LA     R0,85         ***  SET DATA LENGTH\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n         SPACE 1\n*        FIND THE VFU ENTRY VIA THE VFU CONTROL BYTE IN THE FORM ENTRY\n         SLR   R2,R2\n         IC    R2,9(R5)            GET THE VFU ENTRY NUMBER\n         SLL   R2,2                MUTIPLY BY 4 TO GET TABLE OFFSET\n         L     R5,VFU@TBL-4(R2)    GET THE VFU TABLE ENTRY\nVFULOOP  CLI   0(R5),X'00'         IS THIS END OF VFU INFO?\n         BE    FREEBUF             YES\n         MVC   0(80,R9),0(R5)      COPY THIS VFU INTO OUTPUT BUFFER\n         LR    R1,R9               POINT TO BUFFER\n         LA    R0,85          ***  SET DATA LENGTH\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n         LA    R5,80(R5)           POINT TO NEXT VFU ENTRY LINE\n         B     VFULOOP\n         SPACE 1\nFREEBUF  DS     0H\n         $FREEBUF (R3)\n         SLR   R15,R15\n         SPACE 1\nRETURN   $RETURN RC=(R15)\n         LTORG\n         DROP  R3,R4,R7\n         SPACE 1\nVFU@TBL  DS    0F\nVFU@EN01 DC    A(VFU@VFU1)\nVFU@EN02 DC    A(VFU@VFU2)\n         SPACE 1\n*    VFU1  DEFAULT LANSCAPE (SIMPLEX OR DUPLEX)\nVFU@VFU1 DC    CL80'$$DJDE ASSIGN=(1,5),ASSIGN=(12,65),;'\n         DC    CL80'$$DJDE TOF=5,BOF=65,END;'\n         DC    X'00'  END OF ENTRY\n*    VFU2  DEFAULT 2-UP (SIMPLEX OR DUPLEX)\nVFU@VFU2 DC    CL80'$$DJDE ASSIGN=(1,(5,71),TOF=5,BOF=132,;'\n         DC    CL80'$$DJDE SIDE=NUFRONT,END;'\n         DC    X'00'  END OF ENTRY\n         SPACE 1\nX97CTBL  DC    256X'00'\n         ORG   X97CTBL+C'A'\n         DC    AL1(1)\n         ORG   X97CTBL+C'C'\n         DC    AL1(2)\n         ORG   X97CTBL+C'D'\n         DC    AL1(3)\n         ORG   X97CTBL+C'E'\n         DC    AL1(4)\n         ORG   X97CTBL+C'F'\n         DC    AL1(5)\n         ORG   X97CTBL+C'I'\n         DC    AL1(6)\n         ORG   X97CTBL+C'K'\n         DC    AL1(7)\n         ORG   X97CTBL+C'L'\n         DC    AL1(0)\n         ORG   X97CTBL+C'X'\n         DC    AL1(9)\n         ORG   X97CTBL+C'1'\n         DC    AL1(10,11,12,13,14)\n         ORG\nX97@TBL  DS    0F\nX97@EN01 DC    A(CLASS@A)\nX97@EN02 DC    A(CLASS@C)\nX97@EN03 DC    A(CLASS@D)\nX97@EN04 DC    A(CLASS@E)\nX97@EN05 DC    A(CLASS@F)\nX97@EN06 DC    A(CLASS@I)\nX97@EN07 DC    A(CLASS@K)\nX97@EN08 DC    A(CLASS@L)\nX97@EN09 DC    A(CLASS@X)\nX97@EN10 DC    A(CLASS@1)\nX97@EN11 DC    A(CLASS@2)\nX97@EN12 DC    A(CLASS@3)\nX97@EN13 DC    A(CLASS@4)\nX97@EN14 DC    A(CLASS@5)\n         SPACE 1\nCLASS@A  EQU   *     CLASS FORM/DJDE XREF TABLE\n* LAST ENTRY FOR A CLASS IS THE DEFAULT, SO ADD NEW ENTRIES\n* AT THE FRONT\n DC C'AD1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=1,;'\nX97XRTBL EQU   *-CLASS@A    LENGTH OF ONE ENTRY\n DC C'AD1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1RX,COPIES=1,;'\n DC C'AD2R3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=1,;'\n DC C'AD2RX    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2RX,COPIES=1,;'\n DC C'AD2W3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=NONE,COPIES=1,;'\n DC C'ASTD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=1,;'\n         DC    X'00'  END OF TABLE\nCLASS@C  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'CD1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=1,;'\n DC C'CSTD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=1,;'\n         DC    X'00'  END OF TABLE\nCLASS@D  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'DD1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=2,;'\n DC C'DSTD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=2,;'\n         DC    X'00'  END OF TABLE\nCLASS@E  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'ED1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=3,;'\n DC C'ESTD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=3,;'\n         DC    X'00'  END OF TABLE\nCLASS@F  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'FD1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=4,;'\n DC C'FSTD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=4,;'\n         DC    X'00'  END OF TABLE\nCLASS@I  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'ID1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=1,;'\n DC C'ID1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1WX,COPIES=1,;'\n DC C'IS1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=1,;'\n DC C'ISTD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=1,;'\n         DC    X'00'  END OF TABLE\nCLASS@K  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'KD1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=1,;'\n DC C'KD1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1RX,COPIES=1,;'\n DC C'KD2R3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=1,;'\n DC C'KD2RX    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2RX,COPIES=1,;'\n DC C'KD2W3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=NONE,COPIES=1,;'\n DC C'KSTD     ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=1,;'\n         DC    X'00'  END OF TABLE\nCLASS@L  EQU   *     CLASS FORM/DJDE XREF TABLE\n         DC    X'00'  END OF TABLE\nCLASS@X  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'XD1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=1,;'\n         DC    X'00'  END OF TABLE\nCLASS@1  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'1D1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=1,;'\n DC C'1D1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1RX,COPIES=1,;'\n DC C'1D1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1WX,COPIES=1,;'\n DC C'1D1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=1,;'\n DC C'1D2R3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=1,;'\n DC C'1D2RX    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2RX,COPIES=1,;'\n DC C'1D2W3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=NONE,COPIES=1,;'\n DC C'1S1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=1,;'\n DC C'1S1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1RX,COPIES=1,;'\n DC C'1S1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1WX,COPIES=1,;'\n DC C'1S1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=1,;'\n DC C'1STD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=1,;'\n         DC    X'00'  END OF TABLE\nCLASS@2  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'2D1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=2,;'\n DC C'2D1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1RX,COPIES=2,;'\n DC C'2D1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1WX,COPIES=2,;'\n DC C'2D1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=2,;'\n DC C'2D2R3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=2,;'\n DC C'2D2RX    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2RX,COPIES=2,;'\n DC C'2D2W3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=NONE,COPIES=2,;'\n DC C'2S1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=2,;'\n DC C'2S1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1RX,COPIES=2,;'\n DC C'2S1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1WX,COPIES=2,;'\n DC C'2S1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=2,;'\n DC C'2STD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=2,;'\n         DC    X'00'  END OF TABLE\nCLASS@3  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'3D1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=3,;'\n DC C'3D1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1RX,COPIES=3,;'\n DC C'3D1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=3,;'\n DC C'3D1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1WX,COPIES=3,;'\n DC C'3D2R3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=3,;'\n DC C'3D2RX    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2RX,COPIES=3,;'\n DC C'3D2W3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=NONE,COPIES=3,;'\n DC C'3S1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=3,;'\n DC C'3S1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1RX,COPIES=3,;'\n DC C'3S1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=3,;'\n DC C'3S1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1WX,COPIES=3,;'\n DC C'3STD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=3,;'\n         DC    X'00'  END OF TABLE\nCLASS@4  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'4D1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=4,;'\n DC C'4D1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1RX,COPIES=4,;'\n DC C'4D1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=4,;'\n DC C'4D1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1WX,COPIES=4,;'\n DC C'4D2R3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=4,;'\n DC C'4D2RX    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2RX,COPIES=4,;'\n DC C'4D2W3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=NONE,COPIES=4,;'\n DC C'4S1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=4,;'\n DC C'4S1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1RX,COPIES=4,;'\n DC C'4S1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=4,;'\n DC C'4S1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1WX,COPIES=4,;'\n DC C'4STD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=4,;'\n         DC    X'00'  END OF TABLE\nCLASS@5  EQU   *     CLASS FORM/DJDE XREF TABLE\n DC C'5D1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1R3,COPIES=5,;'\n DC C'5D1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1RX,COPIES=5,;'\n DC C'5D1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=5,;'\n DC C'5D1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=D1WX,COPIES=5,;'\n DC C'5D2R3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2R3,COPIES=5,;'\n DC C'5D2RX    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=D2RX,COPIES=5,;'\n DC C'5D2W3    ',AL1(2),CL80'$$DJDE FORMAT=FMT10,FORMS=NONE,COPIES=5,;'\n DC C'5S1R3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=5,;'\n DC C'5S1RX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1RX,COPIES=5,;'\n DC C'5S1W3    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=NONE,COPIES=5,;'\n DC C'5S1WX    ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1WX,COPIES=5,;'\n DC C'5STD     ',AL1(1),CL80'$$DJDE FORMAT=FMT1,FORMS=S1R3,COPIES=5,;'\n         DC    X'00'  END OF TABLE\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IBHLSPAC": {"ttr": 1286, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'I B H L S P A C    DIRECT ACCESS VOLUME SPACE INFORMATIX\n               ON'\nIBHLSPAC CSECT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE USES THE SMF LSPACE ROUTINE (SVC 78)            *\n*        TO COMPUTE VOLUME SPACE STATISTICS FOR ALL ONLINE            *\n*        DA DEVICES.                                                  *\n*                                                                     *\n*        DDNAMES:  SYSPRINT - TO SYSOUT                               *\n*                  VATLST - ALLOCATE TO SYS1.PARMLIB(VATLSTXX)        *\n*                YOUR VATLST SHOULD HAVE COMMENTS STARTING COL        *\n*                30 WHICH ARE THEN DISPLAYED IN THE REPORT.           *\n*                                                                     *\n*                           WRITTEN BY G M SCHLESAK / BELL & HOWELL   *\n***********************************************************************\n         SPACE 1\n*\n*-------------------------------------------------------------------*\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *\n*  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *\n*  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *\n*  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *\n*                                                                   *\n*           ROBERT M. SIRKIS                                        *\n*           TECHNICAL SUPPORT SPECIALIST                            *\n*           BELL AND HOWELL COMPANY                                 *\n*           2231 WEST HOWARD STREET                                 *\n*           EVANSTON, IL 60202                                      *\n*           (312) 570-4687                                          *\n*                                                                   *\n*-------------------------------------------------------------------*\n*\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***  P E R F O R M   L I N K A G E   A N D   O P E N   F I L E S\n         SAVE (14,12),,*\n         LR    R12,R15\n         USING IBHLSPAC,R12\n         ST    R13,SAVEAREA+4\n         LA    R11,SAVEAREA\n         ST    R11,8(R13)\n         LR    R13,R11\n         SPACE 1\n         OPEN  (SYSPRINT,(OUTPUT))\n         LTR   R15,R15             DID FILE OPEN?\n         BNZ   RETURN              NO\n         OPEN  (VATLST,(INPUT))\n         LTR   R15,R15             DID FILE OPEN?\n         BNZ   GETCVT              NO\n         SPACE 2\n***  FILL IN COMMENT TABLE FROM VATLST FILE\n         SLR   R4,R4               ZERO TABLE ENTRY COUNTER\n         LA    R5,CMNTABLE         POINT AT BEGINNING OF COMMENT TABLE\n         USING CMNTENTY,R5         ADDRESS TABLE ENTRY SYMBOLICALLY\nGETCMNTS GET   VATLST,VATRCRD\n         MVC   CMNTVOLS,VATRVOLS   PUT VOLSER INTO TABLE\n         MVC   CMNTCMNT,VATRCMNT   PUT COMMENT FILED INTO TABLE\n         LA    R4,1(R4)            BUMP TABLE ENTRY COUNTER\n         LA    R5,CMNTENTL(R5)     POINT TO NEXT TABLE ENTRY\n         B     GETCMNTS            GO GET NEXT RECORD\n         DROP  R5\n         SPACE 1\nEOFCMNTS CLOSE (VATLST)\n         S     R5,=A(CMNTENTL)     POINT BACK TO THE LAST ENTRY\n         ST    R5,TOTENTP          SAVE LAST ENTRY POINTER\n         ST    R4,TOTENTN          SAVE TOTAL NUMBER OF ENTRIES\n         SPACE 2\n***  F I L L   I N   &   P R I N T   P A G E   H E A D I N G\nGETCVT   L     R2,CVTPTR           GET ADDR OF CVT\n         L     R3,CVTSMCA(R2)      GET ADDR OF SMCA\n         LTR   R3,R3               IS SMF IN SYSTEM?\n         BZ    *+10                NO, DO NOT MOVE SYSID\n         MVC   HEADING1,SMCASID(R3) MOVE SYSID TO HEADING\n         ED    HEADING2,CVTDATE+1(R2) PUT DATE IN HEADING\n         TIME  DEC                 GET TIME OF DAY\n         ST    R0,DECTIME\n         ED    HEADING3,DECTIME    PUT TIME IN HEADING\n         SPACE 1\n* PRINT PAGE HEADINGS\n         PUT   SYSPRINT,HEADINGA\n         PUT   SYSPRINT,HEADINGB\n         PUT   SYSPRINT,HEADINGC\n         PUT   SYSPRINT,OUTLINE\n         SPACE 2\n***  S E A R C H   U C B S   F O R   D A   D E V I C E S\n         L     R2,CVTPTR           GET ADDR OF CVT\n         L     R2,CVTILK2(R2)      GET ADDR OF UCB ADDR LIST\nCHECKUCB SR    R3,R3\n         CH    R3,0(R2)            IS THIS A ZERO ENTRY\n         BE    NEXTUCB             YES, GOTO NEXT ENTRY\n         LH    R3,0(R2)            GET UCB ADDR\n         CH    R3,XFFFF            END OF LIST?\n         BE    SPACETOT            YES, GO PRINT TOTAL LINE\n         BAL   R11,VOLINFO         PROCESS THIS UCB\n         SPACE 1\nNEXTUCB  LA    R2,2(R2)            GET NEXT UCB ADDR\n         B     CHECKUCB\n         SPACE 2\n***  G E T   V O L U M E   I N F O R M A T I O N\nVOLINFO  EQU   *\n         USING UCBDSECT,R3\n         CLI   UCBTYP+2,TYPDA      IS IT DA?\n         BNER  R11                 NO, GOTO NEXT UCB\n         CLI   UCBTYP+3,TYP2321    IS IT 2321 DATA CELL?\n         BER   R11                 YES, GOTO NEXT UCB\n         TM    UCBSTAT,UCBONLI     IS DEVICE ONLINE\n         BNOR  R11                 NO, GOTO NEXT UCB\n         LR    R0,R3               SET R0 TO UCB IN QUESTION.\n         L     R15,=V(OPTCHK)      GET OPTCHK ADDRESS.\n         BALR  R14,R15             CALL OPTCHK ROUTINE.\n         LTR   R15,R15             HAS UCB BEEN PROCESSED VIA OPTCHAN?\n         BNER  R11                 YES-GOTO NEXT UCB.\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE  CLEAR PRINT LINE\n         MVC   OUTLINE1,UCBVOLI    MOVE VOLSER\n         MVC   OUTLINE4,UCBNAME    MOVE UNIT ADDRESS\n         SPACE 2\n***  PUT COMMENT FROM VATLST INTO PRINT LINE\n         ICM   R4,15,TOTENTN       GET TOTAL NUMBER OF ENTRIES\n         BZ    DOLSPACE            NO TABLE ENTRIES\n         L     R5,TOTENTP          POINT TO LAST TABLE ENTRY\n         USING CMNTENTY,R5         ADDRESS TABLE ENTRY SYMBOLICALLY\nFNDCLUP1 CLC   UCBVOLI,CMNTVOLS    IS THIS THE RIGHT VOLSER\n         BE    FNDCLUP2            YES, WE GOT IT\n         S     R5,=A(CMNTENTL)     BUMP DOWN TO NEXT ENTRY\n         BCT   R4,FNDCLUP1         GO CHECK IT\n         B     DOLSPACE            NO MATCHING ENTRY\nFNDCLUP2 MVC   OUTLINE8,CMNTCMNT   PUT COMMENT INTO OUTPUT\n         DROP  R5\n         SPACE 2\n***  G O   T O   L S P A C E   R O U T I N E\nDOLSPACE LR    R0,R3               SET UP UCB ADDRESS\n         LA    R1,PARMAREA         30 BYTE MESSAGE AREA\n         SVC   78                  ISSUE LSPACE SVC\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   SETERR\n         SPACE 1\n* PACK VALUES RETURNED BY LSPACE\n         PACK  PRMFSCTP,PRMFSCTC   PACK MAX CONTIG TRKS\n         PACK  PRMFSCCP,PRMFSCCC   PACK MAX CONTIG CYLS\n         PACK  PRMFSEXP,PRMFSEXC   PACK NUMBER OF EXTENTS\n         PACK  PRMFSTTP,PRMFSTTC   PACK TOTAL FREE TRKS\n         PACK  PRMFSTCP,PRMFSTCC   PACK TOTAL FREE CYLS\n         SPACE 1\n* PUT VALUES IN PRINT LINE\n         MVC   OUTLINE2,PATTERN1\n         ED    OUTLINE2,FREESPAC\n         CP    PRMFSEXP,=P'50'     MORE THAN 50 EXTENTS\n         BNH   *+8\n         MVI   OUTLINE2+20,C'*'    HI-LIGHT\n         CP    PRMFSTTP,=P'200'    MORE THAN 200 FREE TRACKS\n         BNH   *+8\n         MVI   OUTLINE2+13,C'*'    HI-LIGHT\n         B     COMPDEV             GO COMPUTE DEVICE TYPE\n         SPACE 1\n* MOVE ERROR MSG TO OUTPUT LINE\nSETERR   EQU   *\n         SLA   R15,2\n         AL    R15,=A(MSGTBL-16)   ADDRESS MSG TABLE\n         MVC   OUTLINE3,0(R15)     MOVE MSG INTO LINE\n         OI    ERRINDIC,LSPACERR   INDICATE ERROR RETURNED\n         SPACE 2\n***  C O M P U T E   D E V   T Y P E   A N D   U P D A T E\n***  D E V   T Y P E   S P A C E   T O T A L S\nCOMPDEV  LA    R4,DEVTBL           GET ADDR OF DEVICE TABLE\n         USING TBLDSECT,R4\nCHKDEV   CLI   TBLDEV,ENDTBL       IS THIS THE LAST ENTRY?\n         BE    MVDVTYP             YES, WE MUST USE THIS ENTRY\n         CLC   UCBTYP+3(1),TBLDEV  UCB MATCH TABLE ENTRY?\n         BNE   NXTNTRY             NO, GO TO NEXT DEVICE ENTRY\nMVDVTYP  MVC   OUTLINE5,TBLNAME    MOVE DEV NAME TO OUTPUT LINE\n         MVI   TBLUSE,TBLUSED      INDICATE DEVICE HAS BEEN FOUND\n         SPACE 1\n* CHECK FOR VOL CATAEGORY\nCHKVPVT  TM    ERRINDIC,LSPACERR   LSPACE ERROR?\n         BO    VOLCAT              YES\n         CLC   UCBVOLI(3),VOLVPVT  IS IT A PVT VOLUME?\n         BNE   CHKVSTG             NO\n         AP    TOTCVPVT,PRMFSTCP   ADD FREE CYLS TOTAL\n         AP    TOTTVPVT,PRMFSTTP   ADD FREE TRKS TOTAL\n         B     VOLCAT              GO GET VOLUME CATEGORY\n         SPACE 1\nCHKVSTG  CLC   UCBVOLI(3),VOLVSTG  IS IT A PVT VOLUME?\n         BNE   CHKVSCP             NO\n         AP    TOTCVSTG,PRMFSTCP   ADD FREE CYLS TOTAL\n         AP    TOTTVSTG,PRMFSTTP   ADD FREE TRKS TOTAL\n         B     VOLCAT              GO GET VOLUME CATEGORY\n         SPACE 1\nCHKVSCP  CLC   UCBVOLI(3),VOLVSCP  IS IT A SCP VOLUME?\n         BNE   CHKVTSO             NO\n         AP    TOTCVSCP,PRMFSTCP   ADD FREE CYLS TOTAL\n         AP    TOTTVSCP,PRMFSTTP   ADD FREE TRKS TOTAL\n         B     VOLCAT              GO GET VOLUME CATEGORY\n         SPACE 1\nCHKVTSO  CLC   UCBVOLI(3),VOLVTSO  IS IT A TSO VOLUME?\n         BNE   CHKVPUB             NO\n         AP    TOTCVTSO,PRMFSTCP   ADD FREE CYLS TOTAL\n         AP    TOTTVTSO,PRMFSTTP   ADD FREE TRKS TOTAL\n         B     VOLCAT              GO GET VOLUME CATEGORY\n         SPACE 1\nCHKVPUB  CLC   UCBVOLI(3),VOLVPUB  IS IT A PUB VOLUME?\n         BNE   CHKVOTH             NO\n         AP    TOTCVPUB,PRMFSTCP   ADD FREE CYLS TOTAL\n         AP    TOTTVPUB,PRMFSTTP   ADD FREE TRKS TOTAL\n         B     VOLCAT              GO GET VOLUME CATEGORY\n         SPACE 1\nCHKVOTH  AP    TOTCVOTH,PRMFSTCP   ADD FREE CYLS TOTAL\n         AP    TOTTVOTH,PRMFSTTP   ADD FREE TRKS TOTAL\n         B     VOLCAT              GO GET VOLUME CATEGORY\n         SPACE 1\n* CHECK FOR VOL TYPE\nVOLCAT   TM    UCBSTAB,UCBBPRV     IS IT A PRV VOLUME?\n         BNO   CHKPUB              NO\n         MVC   OUTLINE6,VOLTPRV    MOVE VOL TYPE TO OUTPUT LINE\n         TM    ERRINDIC,LSPACERR   DO WEE HAVE NUMBERS?\n         BO    VOLSTAT             NO\n         AP    TBLCPRV,PRMFSTCP    ADD FREE CYLS\n         AP    TBLTPRV,PRMFSTTP    ADD FREE TRKS\n         AP    TOTCPRV,PRMFSTCP    ADD FREE CYLS TOTAL\n         AP    TOTTPRV,PRMFSTTP    ADD FREE TRKS TOTAL\n         B     VOLSTAT             GO GET VOLUME STATUS\n         SPACE 1\nCHKPUB   TM    UCBSTAB,UCBBPUB     IS IT A PUB VOLUME?\n         BNO   CHKSTR              NO\n         TM    ERRINDIC,LSPACERR   DO WEE HAVE NUMBERS?\n         BO    VOLSTAT             NO\n         MVC   OUTLINE6,VOLTPUB    MOVE VOL TYPE TO OUTPUT LINE\n         AP    TBLCPUB,PRMFSTCP    ADD FREE CYLS\n         AP    TBLTPUB,PRMFSTTP    ADD FREE TRKS\n         AP    TOTCPUB,PRMFSTCP    ADD FREE CYLS TOTAL\n         AP    TOTTPUB,PRMFSTTP    ADD FREE TRKS TOTAL\n         B     VOLSTAT             GO GET VOLUME STATUS\n         SPACE 1\nCHKSTR   TM    UCBSTAB,UCBBSTR     IS IT A STR VOLUME?\n         BNO   VOLSTAT             GO GET VOLUME STATUS\n         TM    ERRINDIC,LSPACERR   DO WEE HAVE NUMBERS?\n         BO    VOLSTAT             NO\n         MVC   OUTLINE6,VOLTSTR    MOVE VOL TYPE TO OUTPUT LINE\n         AP    TBLCSTR,PRMFSTCP    ADD FREE CYLS\n         AP    TBLTSTR,PRMFSTTP    ADD FREE TRKS\n         AP    TOTCSTR,PRMFSTCP    ADD FREE CYLS TOTAL\n         AP    TOTTSTR,PRMFSTTP    ADD FREE TRKS TOTAL\n         B     VOLSTAT             GO GET VOLUME STATUS\n         SPACE 1\nNXTNTRY  CLI   TBLDEV,ENDTBL       IS THIS END OF TABLE\n         BE    VOLSTAT             YES, GO COMPUTE VOL STATUS\n         LA    R4,NXTDEV           POINT TO NEXT DEVICE ENTRY\n         B     CHKDEV              GO SEE IF MATCH\n         DROP  R4\n         SPACE 2\n***  C O M P U T E   V O L U M E   S T A T U S\nVOLSTAT  MVC   OUTLINE7,STATRMOV   DEFAULT STATUS IS REMOVABLE\n         TM    UCBSTAT,UCBRESV     IS IT RESERVED?\n         BNO   *+10\n         MVC   OUTLINE7,STATRESV   MOVE VOL STAT TO OUTPUT LINE\n         TM    UCBSTAT,UCBPRES     IS IT PERM RESIDENT?\n         BNO   *+10\n         MVC   OUTLINE7,STATPRES   MOVE VOL STAT TO OUTPUT LINE\n         DROP  R3\n         SPACE 2\n***  P R I N T   O U T P U T    L I N E\nPUTLINE  PUT   SYSPRINT,OUTLINE\n         NI    ERRINDIC,X'FF'-LSPACERR\n         BR    R11                 GO TO NEXT UCB\n         SPACE 2\n***  P R I N T   S P A C E   T O T A L S   B Y\n***  D E V   T Y P E   &   V O L   T Y P E\nSPACETOT EQU   *\n         SPACE 1\n* PRINT VOL TYPE HEADINGS\n         PUT   SYSPRINT,HEADINGH\n         PUT   SYSPRINT,HEADINGF\n         PUT   SYSPRINT,HEADINGG\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         PUT   SYSPRINT,OUTLINE\n         SPACE 1\n         MVC   OUTLINEA,VOLVPVT    MOVE VOL TYPE TO OUTPUT LINE\n         MVC   OUTLINEB,PATTERN3   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,TOTCVPVT   EDIT FREE SPACE VALUES\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         SPACE 1\n         MVC   OUTLINEA,VOLVSCP    MOVE VOL TYPE TO OUTPUT LINE\n         MVC   OUTLINEB,PATTERN3   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,TOTCVSCP   EDIT FREE SPACE VALUES\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         SPACE 1\n         MVC   OUTLINEA,VOLVTSO    MOVE VOL TYPE TO OUTPUT LINE\n         MVC   OUTLINEB,PATTERN3   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,TOTCVTSO   EDIT FREE SPACE VALUES\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         SPACE 1\n         MVC   OUTLINEA,VOLVSTG    MOVE VOL TYPE TO OUTPUT LINE\n         MVC   OUTLINEB,PATTERN3   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,TOTCVSTG   EDIT FREE SPACE VALUES\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         SPACE 1\n         MVC   OUTLINEA,VOLVPUB    MOVE VOL TYPE TO OUTPUT LINE\n         MVC   OUTLINEB,PATTERN3   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,TOTCVPUB   EDIT FREE SPACE VALUES\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         SPACE 1\n         MVC   OUTLINEA,VOLVOTH    MOVE VOL TYPE TO OUTPUT LINE\n         MVC   OUTLINEB,PATTERN3   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,TOTCVOTH   EDIT FREE SPACE VALUES\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         SPACE 1\n* PRINT DEV TYPE HEADINGS\n         PUT   SYSPRINT,HEADINGH\n         PUT   SYSPRINT,HEADINGD\n         PUT   SYSPRINT,HEADINGE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\n         PUT   SYSPRINT,OUTLINE\n         SPACE 1\n* PRINT THE TOTALS\n         LA    R4,DEVTBL\n         USING TBLDSECT,R4\nNEWNTRY  CLI   TBLUSE,TBLUSED      WAS THIS ENTRY USED?\n         BNE   UPDTPTR             NO, GO TO NEXT DEVICE ENTRY\n         MVC   OUTLINEA,TBLNAME    MOVE DEVICE NAME TO OUTPUT LINE\n         MVC   OUTLINEB,PATTERN2   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,DEVTOTS    EDIT FREE SPACE VALUES\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE CLEAR PRINT LINE\nUPDTPTR  CLI   TBLDEV,ENDTBL       IS THIS THE LAST ENTRY?\n         LA    R4,NXTDEV           POINT TO NEXT DEVICE ENTRY\n         BNE   NEWNTRY             THERE ARE MORE ENTRIES\n         MVC   OUTLINE(L'TOTAL),TOTAL\n         MVC   OUTLINEB,PATTERN2   MOVE EDIT PATTERN TO OUTPUT LINE\n         ED    OUTLINEB,FREETOTS   EDIT FREE SPACE TOTALS\n         PUT   SYSPRINT,OUTLINE\n         SPACE 2\n         CLOSE (SYSPRINT)\n         SPACE 2\n***  R E T U R N   T O    S Y S T E M\nRETURN   EQU   *\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         SPACE 2\n***  D A T A   A R E A S   A N D   C O N S T A N T S\nCVTPTR   EQU   16                  ADDR OF PTR TO CVT\nCVTSMCA  EQU   196                 ADDR OF SMCA\nCVTDATE  EQU   56                  DATE\nCVTILK2  EQU   40                  ADDR OF UCB ADDR LIST\nSMCASID  EQU   16                  SYSTEM ID\nENDTBL   EQU   X'FF'               END OF TABLE INDICATOR\nTBLUSED  EQU   X'FF'               ENTRY HAS BEEN USED INDICATOR\nERRINDIC DC    X'00'               ERROR INDICATOR BYTE\nLSPACERR EQU   X'80'               ERROR RETURNED FROM LSPACE FOR VOL\n         SPACE 1\nVOLTSTR  DC    CL4'STRG'\nVOLTPRV  DC    CL4'PRIV'\nVOLTPUB  DC    CL4'PUB '\nVOLVPVT  DC    CL7'PVT*** '\nVOLVTSO  DC    CL7'TSO*** '\nVOLVSCP  DC    CL7'SCP*** '\nVOLVSTG  DC    CL7'STG*** '\nVOLVPUB  DC    CL7'PUB*** '\nVOLVOTH  DC    CL7'OTHER  '\nSTATRMOV DC    CL5'REMOV'\nSTATRESV DC    CL5'RESRV'\nSTATPRES DC    CL5'RSDNT'\n         SPACE 1\nDECTIME  DC    F'0'\nTOTENTP  DC    A(0)               POINTER TO LAST COMMENT ENTRY\nTOTENTN  DC    F'0'               TOTAL NUMBER OF COMMENT ENTRIES\nXFFFF    DC    X'FFFF'\nTOTAL    DC    C'0TOTALS'\nSAVEAREA DS    18F\n         SPACE 1\nLSPACPRM EQU   *\n         DS    10F\n         ORG   LSPACPRM+8\nPARMAREA EQU   *                   LSPACE INFO RETURN FIELD\n         ORG   PARMAREA+6          BEGINNNING OF CHAR FILEDS\nPRMFSTCC DS    CL4,CL1             FREE TOTAL CYL (CHAR)\nPRMFSTTC DS    CL4,CL1             FREE TOTAL TRK (CHAR)\nPRMFSEXC DS    CL4,CL1             FREE EXTENTS   (CHAR)\nPRMFSCCC DS    CL4,CL1             LARGEST CONTIG CYL (CHAR)\nPRMFSCTC DS    CL4                 LARGEST CONTIG TRK (CHAR)\n         ORG   PARMAREA+15         BEGINNING OF PACKED FIELDS\nFREESPAC EQU   *\nPRMFSTCP DS    CL3                 FREE TOT CYL (PACKED)\nPRMFSTTP DS    CL3                 FREE TOT TRK (PACKED)\nPRMFSEXP DS    CL3                 FREE EXTENTS   (PACKED)\nPRMFSCCP DS    CL3                 LARGEST CONTIG CYL (PACKED)\nPRMFSCTP DS    CL3                 LARGEST CONTIG TRK (PACKED)\n         ORG\n         SPACE 1\nVATRCRD  DS    0CL80               VATLST RECORD LAYOUT\nVATRVOLS DS    CL6                 VOLSER\n         DS    CL23                FILLER\nVATRCMNT DS    CL30                COMMENT FIELD\n         DS    CL21                FILLER\n         SPACE 1\nMSGTBL   EQU   *\n         DC    CL16'PERM I/O ERROR' RC=4\n         DC    CL16'NON-STANDARD VOL' RC=8\n         DC    CL16'UCB NOT READY' RC=12\n         DC    CL16'LSPACE RC=16'  RC=16\n         SPACE 1\nDEVTBL   EQU   *\nDEV23051 DC    X'06',X'00',CL6'2305-1',6PL4'0'\nDEV23052 DC    X'07',X'00',CL6'2305-2',6PL4'0'\nDEV2314  DC    X'08',X'00',CL6' 2314 ',6PL4'0'\nDEV3330  DC    X'09',X'00',CL6' 3330 ',6PL4'0'\nDEV3340  DC    X'0A',X'00',CL6' 3340 ',6PL4'0'\nDEV3350  DC    X'0B',X'00',CL6' 3350 ',6PL4'0'\nDEV33301 DC    X'0D',X'00',CL6'3330-1',6PL4'0'\nDEV3380  DC    X'0E',X'00',CL6' 3380 ',6PL4'0'\nDEVUNKWN DC    X'FF',X'00',CL6'UNKNWN',6PL4'0'\n         SPACE 1\nFREETOTS EQU   *                   TOTAL FREE SPACE COUNTERS\nTOTCPRV  DC    PL4'0'              PRV CYL TOTAL\nTOTTPRV  DC    PL4'0'              PRV TRK TOTAL\nTOTCPUB  DC    PL4'0'              PUB CYL TOTAL\nTOTTPUB  DC    PL4'0'              PUB TRK TOTAL\nTOTCSTR  DC    PL4'0'              STR CYL TOTAL\nTOTTSTR  DC    PL4'0'              STR TRK TOTAL\nTOTCVPVT DC    PL4'0'              VOL=PVT CYL TOTAL\nTOTTVPVT DC    PL4'0'              VOL=PVT TRK TOTAL\nTOTCVSCP DC    PL4'0'              VOL=SCP CYL TOTAL\nTOTTVSCP DC    PL4'0'              VOL=SCP TRK TOTAL\nTOTCVTSO DC    PL4'0'              VOL=TSO CYL TOTAL\nTOTTVTSO DC    PL4'0'              VOL=TSO TRK TOTAL\nTOTCVSTG DC    PL4'0'              VOL=STG CYL TOTAL\nTOTTVSTG DC    PL4'0'              VOL=STG TRK TOTAL\nTOTCVPUB DC    PL4'0'              VOL=PUB CYL TOTAL\nTOTTVPUB DC    PL4'0'              VOL=PUB TRK TOTAL\nTOTCVOTH DC    PL4'0'              VOL=OTHER CYL TOTAL\nTOTTVOTH DC    PL4'0'              VOL=OTHER TRK TOTAL\n         SPACE 1\nPATTERN1 DC    X'402020202120222020202120224020202021202240404040404040X\n               202020212022404040402020202120'\nPATTERN2 DC    X'402020202020212022402020202020212022404040202020202021X\n               20222020202020212022404040202020202021202240202020202021X\n               20'\nPATTERN3 DC    X'4020202020202120224020202020202120'\n         SPACE 1\nHEADINGA DC    CL121' '\n         ORG   HEADINGA\n         DC    C'1IBHLSPAC  V2L4      D I R E C T    A C C E S S    S PX\n                A C E      '\nHEADING1 DC    CL4' ',CL3' '\nHEADING2 DC    X'4020204B202020',CL3' '\nHEADING3 DC    X'4021204B20204B2020'\n         ORG\nHEADINGB DC    CL121'-VOLSER  FREE  FREE   FREE    LARGEST CONTIG FREE X\n               AREA  UNIT    DEVICE    ---STATUS--    ----COMMENTS----'\nHEADINGC DC    CL121'         CYLS  TRKS  EXTENTS     CYLINDERS  TRACKSX\n                              TYPE'\nHEADINGD DC    CL121'-DEVICE     ---PRIVATE---       ---PUBLIC---      X\n                ---STORAGE---'\nHEADINGE DC    CL121'  TYPE      CYLS     TRKS       CYLS    TRKS      X\n                CYLS     TRKS'\nHEADINGF DC    CL121'-VOLUME     FREE     FREE '\nHEADINGG DC    CL121'  TYPE      CYLS     TRKS '\nHEADINGH DC    CL121'0'\n         ORG   HEADINGH+1\n         DC    91C'-'\n         ORG\nOUTLINE  DC    CL121' '\n         ORG   OUTLINE+1\nOUTLINE1 DS    CL6' '              VOL SER\nOUTLINE2 DS    CL(L'PATTERN1)' '   FREE SPACE VALUES\n         ORG   OUTLINE2+4\nOUTLINE3 DS    CL16' '             ERROR MSG\n         DS    CL29' '\nOUTLINE4 DS    CL3' '              UNIT ADDRESS\n         DS    CL5' '\nOUTLINE5 DS    CL6' '              DEVICE TYPE\n         DS    CL4' '\nOUTLINE6 DS    CL4' '              VOL TYPE\n         DS    CL2' '\nOUTLINE7 DS    CL5' '              VOL STATUS\n         DS    CL5' '\nOUTLINE8 DS    CL30' '             VOL COMMENTS\n         ORG   OUTLINE+1\nOUTLINEA DS    CL6' '              DEVICE TYPE\n         DS    CL1' '\nOUTLINEB DS    CL(L'PATTERN2)' '   FREE SPACE TOTALS\n         ORG\n         SPACE 2\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,LRECL=121,DSORG=PS,            X\n               BLKSIZE=4840,RECFM=FBA\nVATLST   DCB   DDNAME=VATLST,MACRF=GM,LRECL=80,DSORG=PS,               X\n               EODAD=EOFCMNTS\n         SPACE 2\n         LTORG\n         SPACE 2\nCMNTABLE DS    200XL36     VATLST VOLSER COMMENT TABLE\n         SPACE 2\n         PRINT GEN\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  OPTCHAN - OPTIONAL CHANNEL ROUTINE                                 *\n*                                                                     *\n*  THIS ROUTINE IS TO DETERMINE IF A UCB HAS ALREADY BEEN PROCESSED   *\n*  BY THE PROGRAM.  OPTCHAN WILL MAINTAIN A TABLE OF SERIAL NUMBERS   *\n*  AND BASED ON THIS INFORMATION DECIDE IF UCB HAS ALREADY BEEN       *\n*  PROCESSED.                                                         *\n*                                                                     *\n*  ENTRY - REGISTER 0 CONTAINS ADDRESS OF UCB UNDER CONSIDERATION.    *\n*                                                                     *\n*  EXIT  - REGISTER 15 IS RETURN CODE:                                *\n*          0 - UCB HAS NOT BEEN PROCESSED.                            *\n*          4 - UCB HAS BEEN PROCESSED.                                *\n*                                                                     *\n*  ABNORMAL CONDITIONS:                                               *\n*  U100 - NUMBER OF UNIQUE UCBS HAS EXCEEDED 100.                     *\n*  U200 - REGISTER 0 WAS INVALID.                                     *\n*                           ADDED R. PIEPENBRINK / WALGREENS 04/77    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nOPTCHK   CSECT\n         SAVE (14,12),,*\n         LR    R12,R15        BASE FOR ROUTINE\n         USING OPTCHK,R12\n         ST    R13,OPTSAVE+4\n         LA    R11,OPTSAVE\n         ST    R11,8(R13)\n         LR    R13,R11             LINKAGE COMPLETE\n         SPACE 2\n* IS VOLSER IN TABLE?\n         LR    R9,R0               R9 IS BASE FOR UCB\n         USING UCBDSECT,R9\n         CLI   UCBID,X'FF'         IS IT A UCB?\n         BNE   OPTU200             NO - ABEND U200.\n         LA    R4,OPTABLE          ADDRESS TABLE\n         USING OPDSECT,R4\n         LA    R6,OPEND-OPDSECT    SET INDEXING VALUE FOR BXH\n         LA    R7,OPTLAST          LAST ENTRY IN TABLE\n         SPACE\nOPLOOP1  EQU   *\n         CLI   OPDSECT,X'FF'       END OF ENTRIES USED?\n         BE    OPNOTIN             YES - VOLSER NOT USED.\n         CLC   OPVOLI,UCBVOLI      HAS IT BENN PROCESSED?\n         BE    OPVOLIN             YES - VOLER WAS PROCESSED.\n         BXLE  R4,R6,OPLOOP1       FINISH TABLE.\n         B     OPTU100\n         SPACE 2\n* VOLSER WAS PROCESSED.\nOPVOLIN  DS    0H\n         LA    R15,4               SET RETURN CODE. UCB PROCESSED\n         B     OPOUT               GO TO EXIT.\n         SPACE 2\n* VOLSER WAS NOT IN TABLE.\nOPNOTIN  DS    0H\n         CR    R4,R7               IS TABLE FULL?\n         BL    OPSKIP1             NO - BRANCH AROUND ABEND.\n         SPACE\n* THE TABLE IS FULL\nOPTU100  EQU   *\n         ABEND 100,DUMP            TABLE FULL. ABEND U100.\n         SPACE 1\n*  REGISTER 0 DOES NOT REFERENCE A VALID UCB.\nOPTU200  DS    0H\n         ABEND 200,DUMP\n         SPACE\nOPSKIP1  DS    0H\n         MVC   OPVOLI,UCBVOLI      MOVE IN VOLSER\n         MVI   OPEND,X'FF'         INDICATE LAST ENTRY USED\n         SPACE 2\n* VOLSER WAS NOT PROCESSED\n         SR    R15,R15             SET RETURN CODE. UCB NOT PROCESSED.\n         SPACE 2\n* EXIT FROM OPTCHK\nOPOUT    EQU   *\n         L R13,4(R13)              RESTORE R13\n         RETURN (14,12),RC=(15)\n         BR    R14                 EXIT.\n         SPACE 2\n         LTORG\n         SPACE 2\n* THIS IS THE TABLE OF VOLUME SERIAL NUMBERS. THE LAST ENTRY IS\n* INDICATED BY THE FIRST BYTE BEING X'FF'  EACH ENTRY IS 6 BYTES.\nOPTABLE  DC    X'FF',CL5' '        FIRST ENTRY INDICATED AS LAST.\n         DC    98CL6' '            OTHER ENTRIES.\nOPTLAST  DC    CL6' '              LAST ENTRY\nOPTSAVE  DS    18F                 REGISTER SAVEAREA\n         EJECT\nUCBDSECT DSECT\n         DS    2X\nUCBID    DS    X                   UCB ID. SHOULD BE X'FF'\nUCBSTAT  DS    XL1                 DEVICE STATUS\nUCBONLI  EQU   X'80'               DEVICE IS ONLINE\nUCBRESV  EQU   X'20'               VOL IS RESERVED\nUCBPRES  EQU   X'04'               VOL IS PERM RESIDENT\n         DS    9X\nUCBNAME  DS    CL3                 UNIT NAME\nUCBTYP   DS    XL4                 DEVICE TYPE\nTYPDA    EQU   X'20'               DIRECT ACCESS\nTYP2321  EQU   X'05'               2321 DATA CELL\n         DS    8X\nUCBVOLI  DS    CL6                 DEVICE VOLSER\nUCBSTAB  DS    XL1                 VOLUME STATUS\nUCBBPRV  EQU   X'10'               PRIVATE VOLUME\nUCBBPUB  EQU   X'08'               PUBLIC VOLUME\nUCBBSTR  EQU   X'04'               STORAGE VOLUME\n         SPACE 1\nCMNTENTY DSECT\nCMNTVOLS DS    CL6                 VOLSER\nCMNTCMNT DS    CL30                COMMENT FIELD\nCMNTENTL EQU   *-CMNTENTY\n         SPACE 1\nTBLDSECT DSECT\nTBLDEV   DS    XL1                 DEVICE TYPE ENTRY\nTBLUSE   DS    XL1                 USE INDICATOR\nTBLNAME  DS    CL6                 DEVICE NAME\nDEVTOTS  EQU   *\nTBLCPRV  DS    PL4                 PRV CYL COUNTER\nTBLTPRV  DS    PL4                 PRV TRK COUNTER\nTBLCPUB  DS    PL4                 PUB CYL COUNTER\nTBLTPUB  DS    PL4                 PUB TRK COUNTER\nTBLCSTR  DS    PL4                 STR CYL COUNTER\nTBLTSTR  DS    PL4                 STR TRK COUNTER\nNXTDEV   EQU   *\n         SPACE 1\nOPDSECT  DSECT\nOPVOLI   DS    CL6                 VOLUME SERIAL ENTRY\nOPEND    DS    0C\n         END   IBHLSPAC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBHWTORG": {"ttr": 1543, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         DEBUG\n         BALR  R8,R0\n         ST    R8,DEBUGG\n         MEND\nIBHWTORG CSECT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n***********************************************************************\n         SPACE 2\n** STANDARD OS LINKAGE CONVENTIONS\n         SAVE  (14,12),,*\n         LR    R12,R15\n         USING IBHWTORG,R12\n         ST    R13,SAVEAREA+4\n         LA    R11,SAVEAREA\n         ST    R11,8(R13)\n         LR    R13,R11\n*                                                                  *\n* METHOD OF OPERATION                                              *\n*                                                                  *\n* 1) OBTAIN PARAMETER LIST IN THE FORM:                            *\n*                                                                  *\n*                                                                  *\n* R1==> A(PARM1,PARM2)                                             *\n* PARM1 ==> JES JOBNNUMBER FOR 8 BYTES\n* PARM2 ==> REPLY NUMBER 2 BYTES + REPLY TEXT 128 BYTES\n*\n* 2) OBTAIN INFORMATION ABOUT THE CONSOLE ADDRESS SPACE, SUCH AS   *\n*    ASID, ASCB AND CONSOLE ID OF MASTER.\n*\n* 3) SSAR TO CONSOLE ASID\n*\n* 4) SAC TO CONSOLE ASID\n*\n* 5) SEARCH THE ORE AND  WQE CONTROL BLOCKS UNTIL EITHER THE IMS   *\n*    COPY, OR MESSAGE ID IS LOCATED...\n*\n* 6) FORMAT AND ISSUE THE REPLY COMMAND, OR SET RETURN CODE SAYING *\n*    THIS COULD NOT BE DONE.\n*\n*\n* 7) RETURN TO THE SAFETY OF THE REPLY MODULE, AFTER RETURNING TO  *\n*    KEY OF EIGHT.\n*\n********************************************************************\n          SPACE 1\n*\n*-------------------------------------------------------------------*\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *\n*  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *\n*  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *\n*  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *\n*                                                                   *\n*           ROBERT M. SIRKIS                                        *\n*           TECHNICAL SUPPORT SPECIALIST                            *\n*           BELL AND HOWELL COMPANY                                 *\n*           2231 WEST HOWARD STREET                                 *\n*           EVANSTON, IL 60202                                      *\n*           (312) 570-4687                                          *\n*                                                                   *\n*-------------------------------------------------------------------*\n*\n          SPACE 1\n         L     R2,0(R1)           GET JOBNAME PTR\n         MVC   REPJBNUM,0(R2)\n         L     R2,4(R1)           GET RETURN BUFFERR ADDR\n         ST    R2,PARMADDR        SAVE RETURN BUFFER ADDR\n********************************************************************\n*                                                                  *\n* THE PARAMETERS ARE NOW SAFELY STORED AWAY, THE REST OF THIS CODE *\n* MUST RUN IN THE CONSOLE ADDRESS SPACE. WE WILL SSAR AND SAC TO   *\n* ACHIEVE THIS.                                                    *\n* FIRST, WE MUST DETERMINE THE ASID OF THE COMMTASK ADDRESS SPACE. *\n********************************************************************\n         DEBUG\n         L     R2,16              CVT\n         USING CVT,R2\n         L     R3,CVTCUCB         UCMBASE\n         USING UCM,R3\n         LH    R4,UCMCTID         CONSOLE ADDRESS SPACE\n         STH   R4,CONSASID        PUT AWAY\n         LR    R4,R3\n         AH    R4,=H'-4'          GO BACK 4 SPACES\n         L     R4,0(R4)           UCM PREFIX\n         USING UCMPRFX,R4\n         L     R14,UCMMCENT       ADDRESS OF UCM FOR MASTER CONSOLE\n         USING UCMLIST,R14\n         XR    R15,R15\n         IC    R15,UCMID\n         STH   R15,MASTCONS\n         L     R15,UCMASCB        GET ASCB OF COMMTASK ADDRESS SPACE\n         ST    R15,COMMASCB       AND PUT IT AWAY\n         DEBUG\n         DROP  R2,R14\n         MODESET MF=(E,SUPRMOD)\n         ESAR  R2                 GET SECONDARY ADDRESS SPACE\n         DEBUG\n         ST    R2,SASID           STORE IT AWAY FOR LATER\n         AXSET AX=ONE             GET AUTHORIZATION ANYWHERE\n         LH    R2,CONSASID        LOAD UP ASID OF CONSOLE ADDRESS SPACE\n         SSAR  R2\n         DEBUG\n* GET CONSOLE ADDRESS SPACE LOCAL LOCK FOR REPLY FUNCTION.\n         L     R11,COMMASCB       GET ASCB OF COMMTASK\n         ST    R13,R13SAVE        SAVE REG 13\n         LA    R13,LOCKSAVE       PROVIDE SETLOCK WITH SAVEAREA\nGETLOCK  SETLOCK OBTAIN,TYPE=CML,ASCB=(11),REGS=USE,MODE=UNCOND,       X\n               RELATED=(CONASCB,RELLOCK)\n         DEBUG\n         SAC   X'100'             GO INTO SECONDARY ADDRESS SPACE\n         DEBUG\n*                                 MODE (CONSOLE ASID)\nREPLYIT  DS    0H\n* WE WILL SEARCH THE CHAIN OF ORE ELEMENTS, LOOKING FOR ONE WITH A\n* WQE TO MATCH WHAT WE WANT.\n         L     R4,UCMRPYQ         LOAD ADDRESS OF FIRST ORE ENTRY\n         LA    R4,0(R4)           ** CLEAR HIGH ORDER BYTE **\n         LTR   R4,R4              IF NO OUTSTANDING WTORS\n         BZ    ENDLOOP            THEN GET TO END OF LOOP\n         LA    R7,20              OTHERWISE, ASSUME AT MOST 20.\nORELOOP  DS    0H\n         DEBUG\n         USING OREF,R4\n         L     R5,ORERWQE         GET ASSOCIATED WQE\n         USING WQE,R5             ADDRESS IT\n********************************************************************\n********************************************************************\n* HERE WE KNOW WE ARE LOOKING FOR MESSAGE TEXT\n********************************************************************\nLOOKMSG  DS    0H\n*        MVC   REPLYNUM(2),OREID\n*        MVC   REPLYTXT(128),WQETXT       COPY REPLY TEXT\n         CLC   WQEJOBNM,REPJBNUM  IS THIS THE CORRECT JOBNUMBER\n         BE    GOTMSG             GOT THE MESSAGE\nTRYNEXT  DS    0H\n         DEBUG\n         L     R4,ORELKP          TRY NEXT ORE\n         LA    R4,0(R4)           ** CLEAR HIGH ORDER BYTE **\n         LTR   R4,R4\n         BZ    ENDLOOP\n         BCT   R7,ORELOOP\n         MVC   EXITRC(2),=H'8'    SET RETURN CODE FROM LOOP\n         B     XMEMOFF            AND GET OUT OF CROSS MEM LOOP\nENDLOOP  DS    0H\n         DEBUG\n         MVC   EXITRC(2),=H'8'\n         B     XMEMOFF\nGOTMSG   DS    0H\n         DEBUG\n         MVC   REPLYNUM(2),OREID\n         MVC   REPLYTXT(128),WQETXT       COPY REPLY TEXT\n         DEBUG\n         SAC   X'000'                    OUT OF XMEM MODE\n         L     R2,SASID                  GET BACK ID OF SAVED ASID\n         SSAR  R2\n         L     R11,COMMASCB              GET COMTASK ASCB\nRELLOCK  SETLOCK RELEASE,TYPE=CML,ASCB=(11),                           X\n               RELATED=(CONASCB,GETLOCK)\n         DEBUG\n         L     R13,R13SAVE\n         MVC   EXITRC(2),=H'0'\n         L     R2,PARMADDR\n         MVC   0(2,R2),REPLYNUM\n         MVC   2(128,R2),REPLYTXT\n         B     KEYEIGHT\n         DROP  R3,R4\nXMEMOFF  DS    0H\n         DEBUG\n         L     R11,COMMASCB              GET COMTASK ASCB\n         SETLOCK RELEASE,TYPE=CML,ASCB=(11),                           X\n               RELATED=(CONASCB,GETLOCK)\n* HERE, IF EXITRC=0 THEN WE HAVE REPLIED, OTHERWISE, THE MESSAGE\n* WAS NOT OUTSTANDING.\n         SAC   X'000'                   GO BACK TO HOME ADDRESS SPACE\n         L     R2,SASID                 GET ID OF SAVED ASID\n         SSAR  R2\n         L     R13,R13SAVE\nKEYEIGHT DS    0H\n         DEBUG\n         MODESET MF=(E,PROBMOD)\nENDPROG  DS    0H\nRETURN   EQU   *\n*        EX    0,*      FOR DEBUGGING\n         LH    R15,EXITRC\n         L     R13,4(R13)\n         RETURN (14,12),RC=(15)\nSUPRMOD  MODESET MODE=SUP,KEY=ZERO,MF=L\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L\nLOCKSAVE DS    6F            SAVE AREA FOR SETLOCK\nONE      DC    H'1'\nR13SAVE  DS    F             SAVE R13 FOR SETLOCK\nPARMADDR DS    F\nSAVEAREA DS    18F\nSASID    DS    F\nCONSASID DS    H\nEXITRC   DS    H\nCOMMASCB DS    F\nMASTCONS DS    H\n         DC    C'DEBUGG'\nDEBUGG   DC    F'0'\nREPJBNUM DC    CL8' '\nREPLYNUM DC    CL2' '\nREPLYTXT DC    CL128' '\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         CVT   DSECT=YES\n         IHAORE\nUCM      DSECT\n         IEECUCM\n         IHAWQE\n         IHAPSA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBHWTORM": {"ttr": 1548, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         DEBUG\n         BALR  R8,R0\n         ST    R8,DEBUGG\n         MEND\nIBHWTORM CSECT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n***********************************************************************\n         SPACE 2\n** STANDARD OS LINKAGE CONVENTIONS\n         SAVE  (14,12),,*\n         LR    R12,R15\n         USING IBHWTORM,R12\n         ST    R13,SAVEAREA+4\n         LA    R11,SAVEAREA\n         ST    R11,8(R13)\n         LR    R13,R11\n*                                                                  *\n* METHOD OF OPERATION                                              *\n*                                                                  *\n* 1) OBTAIN PARAMETER LIST IN THE FORM:                            *\n*                                                                  *\n*                                                                  *\n* R1==> A(PARM1,PARM2)                                             *\n* PARM1 ==> BEGINNING REPLY STRING FOR 8 BYTES\n* PARM2 ==> JESJOBID 8 BYTES +REPLY NUM 2 BYTES +REPLY TEXT 128 BYTES\n*\n* 2) OBTAIN INFORMATION ABOUT THE CONSOLE ADDRESS SPACE, SUCH AS   *\n*    ASID, ASCB AND CONSOLE ID OF MASTER.\n*\n* 3) SSAR TO CONSOLE ASID\n*\n* 4) SAC TO CONSOLE ASID\n*\n* 5) SEARCH THE ORE AND  WQE CONTROL BLOCKS UNTIL EITHER THE IMS   *\n*    COPY, OR MESSAGE ID IS LOCATED...\n*\n* 6) FORMAT AND ISSUE THE REPLY COMMAND, OR SET RETURN CODE SAYING *\n*    THIS COULD NOT BE DONE.\n*\n*\n* 7) RETURN TO THE SAFETY OF THE REPLY MODULE, AFTER RETURNING TO  *\n*    KEY OF EIGHT.\n*\n********************************************************************\n          SPACE 1\n*\n*-------------------------------------------------------------------*\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *\n*  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *\n*  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *\n*  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *\n*                                                                   *\n*           ROBERT M. SIRKIS                                        *\n*           TECHNICAL SUPPORT SPECIALIST                            *\n*           BELL AND HOWELL COMPANY                                 *\n*           2231 WEST HOWARD STREET                                 *\n*           EVANSTON, IL 60202                                      *\n*           (312) 570-4687                                          *\n*                                                                   *\n*-------------------------------------------------------------------*\n*\n          SPACE 1\n         L     R2,0(R1)           GET MSGID PTR\n         MVC   REPMSGID,0(R2)\n         L     R2,4(R1)           GET RETURN BUFFERR ADDR\n         ST    R2,PARMADDR        SAVE RETURN BUFFER ADDR\n********************************************************************\n*                                                                  *\n* THE PARAMETERS ARE NOW SAFELY STORED AWAY, THE REST OF THIS CODE *\n* MUST RUN IN THE CONSOLE ADDRESS SPACE. WE WILL SSAR AND SAC TO   *\n* ACHIEVE THIS.                                                    *\n* FIRST, WE MUST DETERMINE THE ASID OF THE COMMTASK ADDRESS SPACE. *\n********************************************************************\n         DEBUG\n         L     R2,16              CVT\n         USING CVT,R2\n         L     R3,CVTCUCB         UCMBASE\n         USING UCM,R3\n         LH    R4,UCMCTID         CONSOLE ADDRESS SPACE\n         STH   R4,CONSASID        PUT AWAY\n         LR    R4,R3\n         AH    R4,=H'-4'          GO BACK 4 SPACES\n         L     R4,0(R4)           UCM PREFIX\n         USING UCMPRFX,R4\n         L     R14,UCMMCENT       ADDRESS OF UCM FOR MASTER CONSOLE\n         USING UCMLIST,R14\n         XR    R15,R15\n         IC    R15,UCMID\n         STH   R15,MASTCONS\n         L     R15,UCMASCB        GET ASCB OF COMMTASK ADDRESS SPACE\n         ST    R15,COMMASCB       AND PUT IT AWAY\n         DEBUG\n         DROP  R2,R14\n         MODESET MF=(E,SUPRMOD)\n         ESAR  R2                 GET SECONDARY ADDRESS SPACE\n         DEBUG\n         ST    R2,SASID           STORE IT AWAY FOR LATER\n         AXSET AX=ONE             GET AUTHORIZATION ANYWHERE\n         LH    R2,CONSASID        LOAD UP ASID OF CONSOLE ADDRESS SPACE\n         SSAR  R2\n         DEBUG\n* GET CONSOLE ADDRESS SPACE LOCAL LOCK FOR REPLY FUNCTION.\n         L     R11,COMMASCB       GET ASCB OF COMMTASK\n         ST    R13,R13SAVE        SAVE REG 13\n         LA    R13,LOCKSAVE       PROVIDE SETLOCK WITH SAVEAREA\nGETLOCK  SETLOCK OBTAIN,TYPE=CML,ASCB=(11),REGS=USE,MODE=UNCOND,       X\n               RELATED=(CONASCB,RELLOCK)\n         DEBUG\n         SAC   X'100'             GO INTO SECONDARY ADDRESS SPACE\n         DEBUG\n*                                 MODE (CONSOLE ASID)\nREPLYIT  DS    0H\n* WE WILL SEARCH THE CHAIN OF ORE ELEMENTS, LOOKING FOR ONE WITH A\n* WQE TO MATCH WHAT WE WANT.\n         L     R4,UCMRPYQ         LOAD ADDRESS OF FIRST ORE ENTRY\n         LA    R4,0(R4)           ** CLEAR HIGH ORDER BYTE **\n         LTR   R4,R4              IF NO OUTSTANDING WTORS\n         BZ    ENDLOOP            THEN GET TO END OF LOOP\n         LA    R7,20              OTHERWISE, ASSUME AT MOST 20.\nORELOOP  DS    0H\n         DEBUG\n         USING OREF,R4\n         L     R5,ORERWQE         GET ASSOCIATED WQE\n         USING WQE,R5             ADDRESS IT\n********************************************************************\n********************************************************************\n* HERE WE KNOW WE ARE LOOKING FOR MESSAGE TEXT\n********************************************************************\nLOOKMSG  DS    0H\n         CLC   REPMSGID,WQETXT+4  IS THIS THE CORRECT MSGID\n         BE    GOTMSG             GOT THE MESSAGE\nTRYNEXT  DS    0H\n         DEBUG\n         L     R4,ORELKP          TRY NEXT ORE\n         LA    R4,0(R4)           ** CLEAR HIGH ORDER BYTE **\n         LTR   R4,R4\n         BZ    ENDLOOP\n         BCT   R7,ORELOOP\n         MVC   EXITRC(2),=H'8'    SET RETURN CODE FROM LOOP\n         B     XMEMOFF            AND GET OUT OF CROSS MEM LOOP\nENDLOOP  DS    0H\n         DEBUG\n         MVC   EXITRC(2),=H'8'\n         B     XMEMOFF\nGOTMSG   DS    0H\n         DEBUG\n         MVC   REPJOBID,WQEJOBNM\n         MVC   REPLYNUM,OREID\n         MVC   REPLYTXT,WQETXT       COPY REPLY TEXT\n         DEBUG\n         SAC   X'000'                    OUT OF XMEM MODE\n         L     R2,SASID                  GET BACK ID OF SAVED ASID\n         SSAR  R2\n         L     R11,COMMASCB              GET COMTASK ASCB\nRELLOCK  SETLOCK RELEASE,TYPE=CML,ASCB=(11),                           X\n               RELATED=(CONASCB,GETLOCK)\n         DEBUG\n         L     R13,R13SAVE\n         MVC   EXITRC(2),=H'0'\n         L     R2,PARMADDR\n         MVC   0(8,R2),REPJOBID\n         MVC   8(2,R2),REPLYNUM\n         MVC   10(128,R2),REPLYTXT\n         B     KEYEIGHT\n         DROP  R3,R4\nXMEMOFF  DS    0H\n         DEBUG\n         L     R11,COMMASCB              GET COMTASK ASCB\n         SETLOCK RELEASE,TYPE=CML,ASCB=(11),                           X\n               RELATED=(CONASCB,GETLOCK)\n* HERE, IF EXITRC=0 THEN WE HAVE REPLIED, OTHERWISE, THE MESSAGE\n* WAS NOT OUTSTANDING.\n         SAC   X'000'                   GO BACK TO HOME ADDRESS SPACE\n         L     R2,SASID                 GET ID OF SAVED ASID\n         SSAR  R2\n         L     R13,R13SAVE\nKEYEIGHT DS    0H\n         DEBUG\n         MODESET MF=(E,PROBMOD)\nENDPROG  DS    0H\nRETURN   EQU   *\n*        EX    0,*      FOR DEBUGGING\n         LH    R15,EXITRC\n         L     R13,4(R13)\n         RETURN (14,12),RC=(15)\nSUPRMOD  MODESET MODE=SUP,KEY=ZERO,MF=L\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L\nLOCKSAVE DS    6F            SAVE AREA FOR SETLOCK\nONE      DC    H'1'\nR13SAVE  DS    F             SAVE R13 FOR SETLOCK\nPARMADDR DS    F\nSAVEAREA DS    18F\nSASID    DS    F\nCONSASID DS    H\nEXITRC   DS    H\nCOMMASCB DS    F\nMASTCONS DS    H\nREPMSGID DC    CL8' '\n         DC    C'DEBUGG'\nDEBUGG   DC    F'0'\nREPJOBID DC    CL8' '\nREPLYNUM DC    CL2' '\nREPLYTXT DC    CL128' '\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         CVT   DSECT=YES\n         IHAORE\nUCM      DSECT\n         IEECUCM\n         IHAWQE\n         IHAPSA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LEAVE": {"ttr": 1797, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LEAVE &RC=0,       RETURN CODE (VALUE OR REGISTER)            X\n               &LABEL2=     LABEL FOR REGISTER RESTORES\n.*                                                      RON MURA, TPD\n.*                 NO PARAMETERS REQUIRED\n         MNOTE *,'*** LEAVE - STANDARD OS LINKAGE ***'\n         GBLB  &RENTSW1              1 = REENTERANT SAVEAREA IN ENTER\n         GBLC  &WKLNTH\n         LCLB  &RCSW                 1 = MUST RESTORE REG 15\n&RCSW    SETB  0                     INSURE OFF TO START\n&LABEL   CNOP  0,4\n         AIF   (&RENTSW1 EQ 1).REENT\n         L     13,4(13)              RESTORE REG 13 (POINT TO HSA)\n.*\n.COMMON  ANOP       COMMON CODE FOR RENT AND NORENT:\n&LABEL2  L     14,12(13)             RESTORE REGISTER\n         AIF   ('&RC'(1,1) EQ '(').REGRC    CHECK FOR REGISTER NOTATION\n         LA    15,&RC                LOAD RETURN CODE\n         AGO   .L14\n.REGRC   AIF   (&RCSW EQ 0).REGRC2\n         LR    15,5                  RESTORE RETURN CODE\n         AGO   .L14\n.REGRC2  AIF   ('&RC(1)' EQ '15' OR '&RC(1)' EQ 'R15').L14\n         LR    15,&RC(1)             LOAD RETURN CODE\n.L14     ANOP\n         LM    0,12,20(13)           RESTORE REGISTERS\n         MVI   12(13),X'FF'          SET RETURN INDICATION IN CALLER SA\n         BR    14\n.*       LTORG\n         MEXIT\n.REENT   ANOP\n         LR    1,13                  LOAD REG 1 FOR FREEMAIN\n         AIF   ('&RC'(1,1) NE '(').R2\n         AIF   ('&RC(1)' NE '15' AND '&RC(1)' NE 'R15').R2\n         LR    5,&RC(1)              SAVE RETURN CODE\n&RCSW    SETB  1\n.R2      ANOP\n         L     13,4(13)              RESTORE REG 13 (POINT TO HSA)\n         MNOTE '         FREEMAIN R,LV=72+&WKLNTH,A=(1) '\n         FREEMAIN R,LV=72+&WKLNTH,A=(1)\n         AGO  .COMMON\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OCX": {"ttr": 1799, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'O C X  -  OPERATOR COMMAND EXECUTOR'\n*----------------------------------------------------------------------\n*\n*        THIS ROUTINE PROVIDES FOR JOB SUBMISSION AND AUTOMATIC\n*        COMMANDS IN AN MVS/JES2 ENVIRONMENT.  IT'S FUNCTIONS\n*        ARE THREE-FOLD AND ARE EXPLAINED BELOW.\n*\n*\n*        1=RDR  ALLOW AN EASY WAY OF PRESENTING JOBS TO JES2 VIA AN\n*               OPERATOR MODIFY COMMAND.\n*\n*        2=CMD  ALLOW AN EASY WAY OF PRESENTING MULTIPLE COMMANDS TO\n*               MVS/JES2 VIA AN OPERATOR MODIFY COMMAND.\n*\n*        3=AUTO ALLOW FOR TIME-OF-DAY/DAY-OF-WEEK AUTOMATIC COMMANDS\n*\n*\n*        THE USER MUST PROVIDE A STARTED TASK PROCEDURE IN SYS1.PROCLIB\n*        WHICH IS STARTED AT IPL TIME.  ONCE ACTIVE, IT WILL PROCESS\n*        USER DEFINED COMMANDS BY DAY OF WEEK (USER DEFINED).\n*        ALSO, IT WILL SUPPORT OPERATOR MODIFY COMMANDS (DEMAND)\n*        EITHER SUBMIT JOBS (MEMBERS) TO THE INTERNAL READER OR\n*        EXECUTE COMMANDS (MEMBER LISTS).\n*\n*        FOR THE JOB SUBMISSION FEATURE, ONE OR MORE PARTITIONED\n*        DATASET(S) ARE USED.  FOR THE COMMAND/AUTO-COMMAND\n*        FUNCTIONS, ANOTHER PARTITIONED DATASET IS USED.  EACH\n*        ARE DESCRIBED BELOW (BY DDNAME).\n*\n***********************************************************************\n*        THIS CODE WAS ORIGINALLY ON THE SHARE MODS TAPE AS A\n*        PGM NAMED \"AUTO\".  SUPPORT FOR THE % CONTROL COMMANDS\n*        HAVE BEEN ADDED TO THAT VERSION.\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*\n*\n*        DDNAME     USE AND FUNCTION\n*        --------   -------------------------------------------------\n*\n*\n*        INTRDR     REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE JES2 INTERNAL\n*                   READER.\n*\n*        JOB00      REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE NAME OF A\n*                   PARTITIONED DATASET WHICH CONTAINS MEMBERS\n*                   TO BE SUBMITTED TO JES2.\n*\n*        JOB??      OPTIONAL WHEN THE JOB-SUBMISSION FUNCTION IS USED.\n*                   ANY NUMBER OF ADDITIONAL 'JOB??' DDCARDS MAY BE\n*                   USED TO ALLOW FOR SPECIALIZED FUNCTION (WITH\n*                   DUPLICATE MEMBER NAMES).  THIS OPTION IS SIMILAR\n*                   TO THE MULTIPLE 'PROC??' DDCARDS WITHIN THE JES2\n*                   STARTUP PROC.  USE OF THESE OPTIONAL LIBRARIES\n*                   IS CONTROLED BY THE OPERATOR (VIA THE 'D=??'\n*                   KEYWORD, AS DETAILED BELOW).\n*\n*        COMMANDS   THIS DD STATEMENT IS REQUIRED FOR EITHER THE\n*                   OPERATOR COMMAND-LIST OR THE AUTO-COMMAND\n*                   FUNCTION.  IT SHOULD CONTAIN MEMBERS (LISTS\n*                   OF COMMANDS) IN THE FORMAT DESCRIBED UNDER THE\n*                   HEADING 'COMMAND RECORD SYNTAX' BELOW.\n*\n*\n*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF PROC TO\n*        BE ADDED TO YOUR SYS1.PROCLIB.  NOTE THAT THE 'JOB00'\n*        DDNAME IS REQUIRED TO USE THE JOB SUBMISSION FUNCTION\n*        WHILE 'JOB01' AND 'JOB02' ARE OPTIONAL (USED IN THIS\n*        CASE AS REMOTE JOB CONTROL LIBRARIES).\n*\n*        //OCX      EXEC PGM=OCX,TIME=1440\n*        //STEPLIB  DD DISP=SHR,DSN=USER.LIBRARY    <---- AUTHORIZED\n*        //INTRDR   DD SYSOUT=(A,INTRDR)\n*        //COMMANDS DD DISP=SHR,DSN=SYS1.COMMANDS\n*        //JOB00    DD DISP=SHR,DSN=RMT0.JCL.LIB\n*        //JOB01    DD DISP=SHR,DSN=RMT1.JCL.LIB\n*        //JOB02    DD DISP=SHR,DSN=RMT2.JCL.LIB\n*\n*        USE OF THE OPTIONAL 'JOB??' DDNAMES IS SPECIFIED BY THE\n*        OPERATOR USING THE 'D=' OPERAND (DETAILED BELOW).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF NORMAL OPERATOR COMMANDS\n*        JOB SUBMISSION USE:\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        START     S OCX.OCX    NORMAL OPERATOR START-UP.  THE FIRST\n*                               AUTOMATIC COMMAND TO BE PROCESSED\n*                               WILL BE THE MEMBER WITH A NAME THAT\n*                               SPECIFIED A TIME GREATER THAN CURRENT.\n*                               HOWEVER, DEMAND COMMAND EXECUTION\n*                               AS WELL AS JOB SUBMISSION IS AVAILABLE\n*                               IMMEDIATELY.\n*\n*        IPL       S OCX.OCX,PARM=IPLMEM\n*                               SAME AS ABOVE, EXCEPT THAT THE COMMAND\n*                               MEMBER NAMED IN THE PARM FIELD WILL BE\n*                               EXECUTED BEFORE ANY OTHER REQUESTS\n*                               (AUTOMATIC OR OPERATOR REQUESTED\n*                               COMMAND).  THIS PROVIDES AN ALTERNATIVE\n*                               TO THE 'SYS1.PARMLIB(COMMND??)' OPTION\n*                               PROVIDED BY MVS.  IT ALSO PROVIDES FOR\n*                               ANY TYPE OF COMMAND (JES2 COMMANDS AS\n*                               WELL AS MVS COMMANDS).\n*\n*        SUBMIT  F OCX,-MEMBER1  SUBMIT 'MEMBER1' TO THE JES2 INTERNAL\n*                               READER.  SINCE THE 'D=??' OPTION WAS\n*                               NOT USED, THE MEMBER WILL BE READ FROM\n*                               THE 'JOB00' DD (WHICH WILL REMAIN OPEN\n*                               OPEN UNTIL SOMETHING OTHER UNTIL 'D=??'\n*                               IS SPECIFIED AND IS NOT THE SAME AS THE\n*                               ONE USED PREVIOUSLY).\n*\n*        SUBMIT  F OCX,-MEMBER1,MEMBER2,....,MEMBERN\n*                               SUBMIT MULTIPLE MEMBERS TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=??' WAS NOT\n*                               SPECIFIED, THE 'JOB00' IS AGAIN USED.\n*\n*        SUBMIT  F OCX,-MEMBER1,D=01\n*                               SUBMIT A MEMBER (JOB) TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=01' WAS\n*                               SPECIFIED, THE 'JOB00' FILE IS CLOSED\n*                               AND THE 'JOB01' FILE IS OPENED TO\n*                               READ THE MEMBER.  THIS FILE WILL\n*                               REMAIN OPEN UNTIL THE 'D=??' IS\n*                               CHANGED (FROM 'D=01') OR IS NOT\n*                               SPECIFIED ('D=00' IS THE DEFAULT).\n*\n*        SUBMIT  F OCX,-MEMBER1,MEMBER02,.....,MEMBERN,D=01\n*                               SAME AS THE ABOVE, HOWEVER, MULTIPLE\n*                               MEMBERS WILL BE READ FROM THE 'JOB01'\n*                               FILE AND SUBMITTED.  NOTE THAT THE\n*                               'D=??' KEYWORD MUST BE SPECIFIED AS\n*                               THE LAST OPTION.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF OPERATOR COMMANDS TO SCHEDULE\n*        COMMAND LISTS.\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        COMMAND F OCX,MEMBER1  CAUSE A LIST OF COMMANDS TO BE EXECUTED\n*                               BY MVS (OR JES2).  NOTE THAT THE DASH\n*                               (HYPHEN) AS A PREFIX TO THE MEMBER\n*                               NAME IDENTIFIES THE REQUEST AS A\n*                               COMMAND REQUEST (DEMAND).  THE NAMED\n*                               MEMBER WILL BE READ FROM THE FILE\n*                               IDENTIFIED BY THE DD 'COMMANDS'.  EACH\n*                               COMMAND READ WILL BE EXECUTED IF RE-\n*                               QUESTED FOR THE CURRENT DAY (THE SYNTAX\n*                               SYNTAX OF THE 'COMMANDS' RECORDS ARE\n*                               DEFINED BELOW UNDER 'COMMAND RECORD\n*                               SYNTAX').\n*\n*        COMMAND F OCX,MEMBER1,MEMBER2,.....,MEMBERN\n*                               CAUSE A LIST OF MEMBERS TO BE PROCESSED\n*                               BY MVS (OR JES2).  EACH MEMBER MAY\n*                               CONTAIN MULTIPLE COMMANDS. AGAIN NOTE\n*                               THAT THE DASH IDENTIFIES THE REQUEST\n*                               AS A DEMAND COMMAND REQUEST.\n*\n*        SHUTDOWN  P OCX        TO TERMINATE THIS ROUTINE, SIMPLY\n*                               ENTER AN OPERATOR STOP COMMAND.\n*\n*        SHUTDOWN  F OCX,SHUTDOWN\n*                               TO ALLOW A LIST OF 'SHUTDOWN' COMMANDS\n*                               TO BE EXECUTED PRIOR TO STOPPING THIS\n*                               ROUTINE (SUCH AS $PI, I SMF, P RMF ETC)\n*                               THE 'P A' COMMAND MAY BE ADDED TO THE\n*                               END OF THE SHUTDOWN MEMBER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE AUTOMATIC COMMAND FUNCTION IS NOT CONTROLLED BY THE\n*        OPERATOR.  INSTEAD, IT OPERATES ON A 1440 MINUTE CYCLE\n*        (60 MINUTES/HOUR AND 24 HOURS/DAY) WITHIN DAY-OF-WEEK\n*        AND MONTH-OF-YEAR CYCLES.  THIS MEANS THAT COMMANDS MAY\n*        BE SCHEDULED AT A SPECIFIED TIME OF DAY ON ANY (OR ALL)\n*        DAY(S) OF THE WEEK OR ANY DAY OF THE MONTH.\n*\n*        COMMANDS TO BE EXECUTED ARE CONATAINED IN MEMBERS THAT\n*        RESIDE IN THE 'COMMANDS' LIBRARY.  EACH MEMBER TO BE\n*        AUTOMATICALLY PROCESSED IS NAMED AS FOLLOWS.\n*\n*            @0100   THIS LIST OF COMMANDS IS TO BE PROCESSED AT\n*                    1:00 IN THE MORNING.\n*            @1423   THIS MEMBER WILL BE PROCESSED AT 2:23 PM.\n*\n*            @0000   THIS MEMBER WILL BE PROCESSED AT MIDNIGHT.\n*\n*        NOTE THAT THE MEMBER NAMES TO BE PROCESSED AUTOMATICALLY\n*        MUST BE PREFIXED WITH THE 'AT SIGN' (@), HOWEVER, THESE\n*        MEMBERS ARE NOT RESTRICTED FROM 'DEMAND' USE.\n*\n*\n*        COMMAND RECORD SYNTAX\n*\n*        EACH MEMBER CONTAINED IN THE 'COMMANDS' LIBRARY MUST FOLLOW\n*        THE SYNTAX DEFINED BELOW.  THIS IS TRUE FOR BOTH DEMAND\n*        COMMAND LISTS AS WELL AS AUTOMATIC COMMAND LISTS.\n*\n*        AN ASTERISK (*) IN COLUMN 1 DENOTES A COMMENT RECORD AND IS\n*        IGNORED BY THE PROCESSOR.  COMMANDS (RECORDS) ARE PROCESSED\n*\n*        A  PERCENT (%) IN COLUMN 16 DENOTES AN EXTENDED CONTROL COM-\n*        MAND.  THIS ALLOWS SOME MINIMAL LOGIC AND OPERATOR INTERAC-\n*        TION.\n*\n*        A NON-BLANK IN THE 'DAY-OF-THE-WEEK' FIELD REQUESTS PROCESSING\n*        ON THAT DAY.\n*\n*        FORMAT:\n*\n*        1    ===>BLANK            (AN ASTERISK SIGNIFIES A COMMENT)\n*        2-6  ===>MM/DD            (MONTH/DAY SPEC - SLASH REQ'D!)\n*        15   ===>(BLANK)\n*        8-14 ===>MTWTFSS          (DAY-OF-WEEK SPECIFICATION)\n*        15   ===>(BLANK)\n*        16   ===>COMMAND DATA     (THROUGH COLUMN 71)\n*        16   ===>%CONTROL CMD     (THROUGH COLUMN 71)\n*        72   ===>CONTINUATION     (ONLY ONE CONTINUATION ALLOWED)\n*\n*        AN ASTERISK IN EITHER THE MM FIELD OR THE DD FIELD ALLOWS\n*        EXECUTION FOR ALL MONTHS OR ALL DAYS.  ASTERISKS IN BOTH\n*        FIELDS EFFECTIVELY NULLIFIES DAY-WITHIN-MONTH CRITERIA\n*        (IF '**/**' IS SPECIFIED, THE COMMAND IS SUBJECT ONLY TO\n*        DAY OF WEEK CRITERIA WHICH IS THE SAME AS ALL BLANKS IN\n*        THE MM/DD FIELD).  IF THE MM/DD FIELD IS NON-BLANK,\n*        THE REQUEST WILL BE PROCESSED ON THE MONTH/DAY SPECIFIED\n*        BUT IS ALSO SUBJECT TO DAY OF WEEK SPECIFICATIONS.\n*        IF A REQUEST IS TO BE PROCESSED ON THE SAME DAY OF EVERY\n*        MONTH, SPECIFY THE MONTH AS ASTERISKS ('**/05').  IF A\n*        REQUEST IS TO BE PROCESSED EVERY DAY OF A GIVEN MONTH,\n*        SPECIFY THE DAY AS ASTERISKS ('09/**').\n*\n*        CONTINUATION IS SUPPORTED ONLY IF THE SUBSEQUENT RECORD\n*        HAS 'ALL' BLANKS IN COLUMNS 1 THROUGH 15 AND CONTINUED\n*        DATA BEGINS IN COLUMN 16.\n*\n*\n*   CONTROL COMMANDS:\n*\n*   COLUMNS:  1      8       16   21        31        41          71\n*   COL-1---->*MM/DD MTWTFSS %IF TIME HHMM-HHMM\n*        ALLOW A TIME RANGE EVALUATION.\n*        DETERMINE IF CURRENT TIME FALLS WITHIN SPECIFIED RANGE AND -\n*        DO THE FOLLOWING COMMANDS UNTIL %END IF IT DOES\n*   COL-1---->*MM/DD MTWTFSS %WTO MESSAGE------------------------>71\n*        ISSUE A HIGHLIGHTED WTO MESSAGE TO THE OPERATOR CONSOLE\n*   COL-1---->*MM/DD MTWTFSS %DOM\n*        DELETE THE LAST MESSAGE ISSUE VIA %WTO\n*        NOTE: %ASK WILL AUTOMATICALLY DELETE THE LAST %WTO MSG\n*   COL-1---->*MM/DD MTWTFSS %WAT NN\n*        WAIT \"NN\" SECONDS BEFORE CONTINUING\n*   COL-1---->*MM/DD MTWTFSS %ASK OPTION1   OPTION2   OPTION3\n*        ASK OPERATOR TO RESPOND WITH ONE OF THE SPECIFIED OPTIONS\n*        (UP TO 5 OPTIONS CAN BE SPECIFIED)\n*   COL-1---->*MM/DD MTWTFSS %RSP REPLY     DO\n*        COMPARE RESPONSE FROM LAST %ASK WITH \"REPLY\" .  EXECUTE ALL\n*        THE FOLLOWING LOWING COMMANDS UNTIL %END IF REPLY MATCHES.\n*   COL-1---->*MM/DD MTWTFSS %RSP REPLY     STOP\n*        COMPARE RESPONSE FROM LAST %ASK WITH \"REPLY\" .  STOP PROCESS-\n*        ING ALL REMAINING COMMANDS IN THIS MEMBER IF REPLY MATCHES.\n*   COL-1---->*MM/DD MTWTFSS %END\n*        INDICATE THE END OF A %RSP ... DO STRUCTURE\n*        INDICATE THE END OF A %IF TIME RANGE STRUCTURE\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF AUTOMATIC COMMANDS:\n*\n*   COLUMNS:  1      8       16   21        31        41          71\n*             ..     .       .    .         .         .           .\n*   COL-1---->*MM/DD MTWTFSS COMMAND-- --------------------------->72\n*   COL-1---->*MM/DD MTWTFSS %IF TIME HHMM-HHMM\n*   COL-1---->*MM/DD MTWTFSS %WTO MESSAGE------------------------>71\n*   COL-1---->*MM/DD MTWTFSS %DOM\n*   COL-1---->*MM/DD MTWTFSS %WAT NN\n*   COL-1---->*MM/DD MTWTFSS %ASK OPTION1   OPTION2   OPTION3---->71\n*   COL-1---->*MM/DD MTWTFSS %RSP REPLY     DO\n*   COL-1---->*MM/DD MTWTFSS %RSP REPLY     STOP\n*   COL-1---->*MM/DD MTWTFSS %END\n*\n* MEMBER=@0300\n*   COL-1---->       XXXXXX  F OCX,-BACKUP1,BACKUP2,BACKUP3\n*   COL-1---->             X F OCX,-BACKUPWK\n*   COL-1----> **/01 ******* F OCX,-MONTH01\n*   COL-1----> **/01      S  F OCX,-FIRSTSAT SCHEDULE JOB ONLY ON THE\n*   COL-1----> **/02      S  F OCX,-FIRSTSAT 1ST SATURDAY OF THE MONTH\n*   COL-1----> **/03      S  F OCX,-FIRSTSAT          \"\n*   COL-1----> **/04      S  F OCX,-FIRSTSAT          \"\n*   COL-1----> **/05      S  F OCX,-FIRSTSAT          \"\n*   COL-1----> **/06      S  F OCX,-FIRSTSAT          \"\n*   COL-1----> **/07      S  F OCX,-FIRSTSAT          \"\n* MEMBER=@0755\n*   COL-1---->       MTWTF   START VTAM\n* MEMBER=@0800\n*   COL-1---->       MTWTF   START TSO\n*   COL-1---->       MTWTF   $HQ,P\n*   COL-1---->       MTWTF   $AQ,T\n* MEMBER=@0900\n*   COL-1---->       -       SEND 'TODAY IS BLUE MONDAY...KEEP SMILING*\n*   COL-1---->               '\n*   COL-1---->        -      SEND 'TODAY IS TUESDAY...FOUR MORE TO GO'\n*   COL-1---->         -     SEND 'TODAY IS WEDNESDAY...YOUR HALF WAY'\n*   COL-1---->          -    SEND 'TODAY IS THURSDAY...HANG IN THERE'\n*   COL-1---->           -   SEND 'THANK GOD IT''S FRIDAY'\n*   COL-1---->            -  SEND 'IT''S SATURDAY... DIDN''T YOU FINIS*\n*   COL-1---->               H?'\n*   COL-1---->             - SEND 'WOW... EVEN SUNDAY YOU WORK!!!!!!'\n* MEMBER=@1645\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN AT FIVE SHARP'\n* MEMBER=@1655\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN IN FIVE MINUTE*\n*   COL-1---->               S'\n* MEMBER=@1659\n*   COL-1---->       MTWTF   SE '**** TSO IS GOING DOWN IN ONE MINUTE X\n*   COL-1---->               ****'\n*   COL-1---->       MTWTF   SE '****   YOU WILL RECEIVE NO WARNING   X\n*   COL-1---->               ****'\n* MEMBER=@1700\n*   COL-1---->       MTWTF   P TSO\n*   COL-1---->       MTWTF   $HQ,T\n*   COL-1---->       MTWTF   $AQ,P\n*   COL-1----> 05/17 ******* F OCX,TESTJOB SCHEDULE ONLY ON MAY 17\n*   COL-1----> 05/16 *****   F OCX,TESTWKDY SCHEDULE ONLY ON MAY 16 WD\n*   COL-1----> 05/16      ** F OCX,TESTWKND SCHEDULE ONLY ON MAY 16 WE\n* MEMBER=@1702\n*   COL-1---->       MTWTF   Z NET,QUICK\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF OPERATOR 'DEMAND' COMMANDS:\n*\n*   COL-1---->*      MTWTFSS COMMAND--------------------------->72\n*\n* MEMBER=IPL                            (  S OCX,PARM=IPL  )\n*   COL-1---->       XXXXXXX S RMF.RMF\n*   COL-1---->       XXXXXXX %WTO  ENTER TYPE OF NETWRK STARTUP DESIRED\n*   COL-1---->       XXXXXXX %ASK  FULL      TECH      NONE\n*   COL-1---->       XXXXXXX %DOM\n*   COL-1---->       XXXXXXX %RSP  FULL      DO\n*   COL-1---->       XXXXXXX F OCX,STVTAM\n*   COL-1---->       XXXXXXX %WAT  15\n*   COL-1---->       XXXXXXX F OCX,STCICS,STTSO\n*   COL-1---->       XXXXXXX %END\n*   COL-1---->       XXXXXXX %RSP  TECH      DO\n*   COL-1---->       XXXXXXX F OCX,STVTAM\n*   COL-1---->       XXXXXXX %WAT  15\n*   COL-1---->       XXXXXXX %WTO  NO APPLICATIONS STARTED... ONLY VTAM\n*   COL-1---->       XXXXXXX %END\n*   COL-1---->       XXXXXXX %RSP  NONE      DO\n*   COL-1---->       XXXXXXX %WTO  NETWORK NOT STARTED\n*   COL-1---->       XXXXXXX %END\n*   COL-1---->       XXXXXXX S OPSWTR.OPSWTR\n*   COL-1---->       XXXXXXX %IF TIME 0800-1859\n*   COL-1---->       XXXXXXX F OCX,DINITS    .... SET DAY TIME INITS\n*   COL-1---->       XXXXXXX %END\n*   COL-1---->       XXXXXXX %IF TIME 1900-0759\n*   COL-1---->       XXXXXXX F OCX,NINITS    .... SET NITE TIME INITS\n*   COL-1---->       XXXXXXX %END\n*   COL-1---->       XXXXXXX F OCX,VARYCONS,VARYALL,SETJES\n* MEMBER=SETJES                         (  F OCX,SETJES )\n*   COL-1---->       XXXXXXX $TPRT1,Q=A\n*   COL-1---->       XXXXXXX $TI9,Z\n*   COL-1---->       XXXXXXX $SI9\n*   COL-1---->       XXXXXXX $SPRT1\n* MEMBER=SHUTDOWN                       (  F OCX,SHUTDOWN )\n*   COL-1---->       XXXXXXX $P\n*   COL-1---->       XXXXXXX $IPRT1\n*   COL-1---->       XXXXXXX $PLNE1\n*   COL-1---->       XXXXXXX $ELNE1\n*   COL-1---->       XXXXXXX P OPSWTR\n*   COL-1---->       XXXXXXX P RMF\n*   COL-1---->       XXXXXXX P A\n* MEMBER=UNLOAD                         (  F OCX,UNLOAD )\n*   COL-1---->       XXXXXXX U 180\n*   COL-1---->       XXXXXXX U 181\n*   COL-1---->       XXXXXXX U 182\n* MEMBER=VARYALL                        (  F OCX,VARYALL )\n*   COL-1---->       XXXXXXX V 180-188,ONLINE\n*   COL-1---->       XXXXXXX V 150-158,OFFLINE\n*   COL-1---->       XXXXXXX V 160-16F,ONLINE\n* MEMBER=VARYCONS                       (  F OCX,VARYCONS )\n*   COL-1---->       XXXXXXX V 120,CONSOLE,ROUT=(1,2,8,9,10,12,13,14,1*\n*   COL-1---->               5)\n*   COL-1---->       XXXXXXX V 121,CONSOLE,ROUT=(3,4,5,6)\n*   COL-1---->       XXXXXXX V 122,CONSOLE,ROUT=(7)\n*   COL-1---->       XXXXXXX V O-123,CONSOLE,ROUT=ALL\n* MEMBER=VARYOFF                        (  F OCX,VARYOFF )\n*   COL-1----> 09/**      XX V 150-158,OFFLINE  ONLY FOR SEPT WKEND\n*   COL-1---->       XXXXXXX V 160-168,OFFLINE\n*   COL-1---->       XXXXXXX V 170-178,OFFLINE\n*\n*  NOTE THAT THE COMMAND-LIST MEMBER MAY INCLUDE COMMANDS FOR THIS\n*  ROUTINE AS WELL.  THIS MAY OR MAY NOT BE DESIRABLE SINCE IF NOT\n*  CAUTIOUS, A LOOP COULD RESULT.\n*\n***********************************************************************\n         EJECT\n          SPACE 1\n*\n*-------------------------------------------------------------------*\n*                                                                   *\n*                      D I S C L A I M E R                          *\n*                                                                   *\n*  BELL AND HOWELL COMPANY MAKES NO WARRANTY EXPRESSED OR IMPLIED   *\n*  AS TO THE FITNESS OF THIS CODE UNDER YOUR ENVIRONMENT.  THIS     *\n*  EXIT SHOULD BE COMPREHENSIVELY TESTED BEFORE IT IS PLACED INTO   *\n*  YOUR PRODUCTION ENVIRONMENT.  IF YOU HAVE ANY QUESTIONS CONTACT: *\n*                                                                   *\n*           ROBERT M. SIRKIS                                        *\n*           TECHNICAL SUPPORT SPECIALIST                            *\n*           BELL AND HOWELL COMPANY                                 *\n*           2231 WEST HOWARD STREET                                 *\n*           EVANSTON, IL 60202                                      *\n*           (312) 570-4687                                          *\n*                                                                   *\n*-------------------------------------------------------------------*\n*\n          SPACE 1\n***********************************************************************\n*\n*        THIS ROUTINE IS 'NOT' RE-ENTRANT AND MUST BE LINKED AS\n*        'AUTHORIZED'.\n*\n*\n*\n*        REGISTER USAGE\n*\n*        R0   - WORK\n*        R1   - WORK\n*        R2   - WORK\n*        R3   - WORK\n*        R4   - WORK\n*        R5   - WORK\n*        R6   - WORK\n*        R7   - WORK\n*        R8   - UNUSED\n*        R9   - QEDIT ORIGIN BASE\n*        R10  - DCBS\n*        R11  - BASE # 1\n*        R12  - BASE # 2\n*        R13  - SAVE AREA\n*        R14  - BAL\n*        R15  - WORK\n*\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZATION\n*\n*----------------------------------------------------------------------\nOCX      $PROLOG R11,R12          ENTRY LINKAGE\n         USING IHADCB,R10         DCB DSECT\n* VERIFY THAT PGM WAS STARTED FROM OS CONSOLE\n         L     R2,CVTPTR      GET ADDRESS OF CVT\n         L     R2,0(R2)       GET ADDR OF TCBWORDS\n         L     R2,4(R2)       GET ADDR OF OUR TCB\n         ICM   R2,15,TCBJSCB(R2) GET ADDR OF JSCB\n         BZ    NOTAUTH        NO JSCB!\n         ICM   R2,15,JSCBSSIB(R2) GET ADDR OF SSIB\n         BZ    NOTAUTH        NO SSIB!\n         CLC   =C'SSIB',SSIBID(R2) IS THIS THE SSIB?\n         BNE   NOTAUTH        NOPE!\n         CLC   =C'STC',SSIBJBID(R2)   STARTED TASK?\n         BNE   NOTAUTH        NOPE!\n         B     ENTRY010\nNOTAUTH  DS    0H\n         WTO   '** OCX ** - INVALID INITIALIZATION ENVIRONMENT'\n         ABEND 999\n         SPACE 2\nENTRY010 DS    0H\n         L     R9,0(R1)           PARM POINTER\n         XR    R2,R2              CLEAR R2\n         ICM   R2,3,0(R9)         ANY PARM ?\n         BZ    BBB010             NO - NOT STARTED AT IPL\n         CH    R2,=H'8'           MAX PARM LENGTH ?\n         BNH   AAA010             NO - OK\n         B     BBB010\nAAA010   EQU   *\n         BCTR  R2,R0              DECR FOR EXECUTE\n         EX    R2,MVC010          MOVE PARM TO MEMBER\nBBB010   EQU   *\n         OPEN  (COMMANDS,,DIR,,INTRDR,(OUTPUT))\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  IS IT OPEN ?\n         BZ    ERROR1             NO - ERROR\n         BAL   R14,ENTRY999       SET UP THE DATE/TIME/DAY FIELDS\n         L     R0,BUFSIZE         MAX BLKSIZE\n         GETMAIN R,LV=(0)\n         ST    R1,BUFFER          STORE FOR USE AS READ BUFFER\nEXIT010  EQU   *\n         B     ENTRY020\n         LTORG\nMVC010   MVC   MEMBER(0),2(R9)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZE CONSOLE COMMUNICATION INTERFACE\n*\n*----------------------------------------------------------------------\nENTRY020 DS    0H\n         EXTRACT TIOT,'S',FIELDS=(TIOT)\n         L     R1,TIOT            GET ADDRESS OF TIOT\n         MVC   WTORASK+13(3),0(R1) COPY JOBNAME TO MSG\n         MVC   WTOQSTN+5(3),0(R1) COPY JOBNAME TO MSG\n         MVC   WTOINVLD+5(3),0(R1) COPY JOBNAME TO MSG\n         MVC   WTO900+11(3),0(R1) COPY JOBNAME TO MSG\n         EXTRACT COMM,'S',FIELDS=(COMM)\n         L     R1,COMM            GET ADDRESS OF COMMUNICATIONS FIELDS\n         L     R0,0(R1)           GET COMMUNICATIONS ECB ADDRESS\n         ST    R0,COMMECB         SAVE ECB ADDRESS IN WAIT LIST\n         LA    R9,4(R1)           GET ORIGIN ADDRESS FOR QEDIT\n         ICM   R1,15,0(R9)        IS THERE A START COMMAND CIB WAITING\n         BZ    AAA020             NO, MUST BE BATCH EXECUTION\n         QEDIT ORIGIN=(R9),BLOCK=(R1)  YES, FREE START COMMAND CIB\nAAA020   EQU   *\n         QEDIT ORIGIN=(R9),CIBCTR=255  ALLOW STACKED COMMANDS (255)\nEXIT020  EQU   *\n         B     ENTRY030\nCOMM     DC    F'0'\nTIOT     DC    F'0'\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        IPL COMMAND EXECUTION\n*\n*----------------------------------------------------------------------\nENTRY030 DS    0H\n         CLC   MEMBER,BLANKS      ANY PARM ?\n         BE    EXIT030            NO - THIS IS NOT IPL START\n         BAL   R14,ENTRY900       PROCESS IPL MEMBER\nEXIT030  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SET UP TIMER\n*\n*----------------------------------------------------------------------\nENTRY040 DS    0H\n         POINT DIR,=X'00000100'   POINT TO FIRST RECORD IN DIRECTORY\n         USING DIRDSECT,R3\n         TIME  DEC\n         STCM  R0,12,HHMM         STORE TIME HHMM\n         UNPK  @TIME(5),HHMM      MOVE TO STIMER TIME FIELD\n         MVC   @TIME+4(2),=2C'0'\nAAA040   EQU   *\n         L     R3,BUFFER          ADDR OF BUFFER\n         READ  DIRDECB,SF,DIR,(R3),'S'  READ DIRECTORY\n         CHECK DIRDECB            AND OF COURSE WAIT\n         XR    R1,R1              CLEAR A WORK REG\n         ICM   R1,3,0(R3)         LNGTH OF DATA IN DIR BLK\n         LA    R5,0(R1,R3)        END OF DATA IN DIR BLK\n         LA    R3,2(R3)           INCR TO FIRST MEMBER NAME\nLOOP040A EQU   *\n         CLC   DIRNAME,=8X'FF'    END OF MEMBERS ?\n         BE    DDD040             YES - CHECK FOR LO MEMBER\n         CLI   DIRNAME,C'@'       TOD MEMBER ?\n         BNE   CCC040             NO -SKIP IT\n         LA    R1,DIRNAME+1       SECOND BYTE OF DIRNAME\n         LA    R15,4              LOOP CONTROL - HHMM\nLOOP040B EQU   *\n         TM    0(R1),X'F0'        NUMERIC ?\n         BNO   CCC040             NO - SKIP THIS MEMBER\n         LA    R1,1(R1)           BUMP TO NEXT BYTE\n         BCT   R15,LOOP040B\n         CLC   DIRNAME+6(2),BLANKS  MUST BE BLANKS\n         BE    BBB040             YES - OK\n         MVC   WTO040+28(8),DIRNAME  NO - INFORM OPER\nWTO040   WTO   '** OCX  ** - MEMBER //////// INVALID FOR TOD PROCESSINGX\n               , IGNORED'\n         B     CCC040\nBBB040   EQU   *\n         CLC   DIRNAME+1(4),@TIME  MUST BE HIGHER\n         BH    GGG040             PROCESS THIS MEMBER\nCCC040   EQU   *\n         NI    DIRC,X'1F'         TURN OFF UNNEEDED BITS\n         XR    R1,R1              CLEAR R1\n         IC    R1,DIRC            NUMBER OF USER HALFWORDS\n         SLL   R1,1               NUMBER OF USER BYTES\n         LA    R3,12(R1,R3)       INCR TO NEXT DIR ENTRY\n         CR    R3,R5              PAST END OF DIR BLOCK ?\n         BL    LOOP040A           NO - CHECK THIS DIR ENTRY\n         B     AAA040             YES - GET NEXT DIR BLOCK\nDDD040   EQU   *                  ALSO EODAD FOR DIR READS\n         AP    HHMM,=P'1000'      ADD 1 HOUR\n         MVI   HHMM+1,X'00'       CLEAR MM\n         CP    HHMM,=P'24000'     MIDNITE ?\n         BL    EEE040             NO - OK\n         MVC   @TIME,=C'23595999' SET MIDNIGHT AS TIMER VALUE\n         B     III040             GO TO IT\nEEE040   EQU   *\n         UNPK  @TIME(5),HHMM      SET DEFAULT TO CHECK AGAIN NEXT HOUR\n         B     HHH040\nGGG040   EQU   *\n         MVC   @TIME(4),DIRNAME+1  YES - NEW TIMER VALUE\nHHH040   EQU   *\n         MVC   @TIME+4(4),=4C'0'\nIII040   EQU   *\n         XC    TIMEECB,TIMEECB\n         STIMER  REAL,ENTRY950,TOD=@TIME\nEXIT040  EQU   *\n         B     ENTRY050\n         DROP  R3\n         LTORG\nHHMM     DC    PL3'0'\n@TIME    DC    D'0'\n         EJECT\n*----------------------------------------------------------------------\n*\n*        WAIT FOR MODIFY OR TIMER POP\n*\n*----------------------------------------------------------------------\nENTRY050 DS    0H\n         WAIT  1,ECBLIST=ECBLIST,LONG=YES  WAIT UNTIL AN ECB IS POSTED\n         L     R1,COMMECB         ADDR OF COMMUNICATIONS ECB\n         CLI   0(R1),X'00'        CHECK FOR OPERATOR REQUEST\n         BNE   ENTRY060           YES--GO TO PROCESS OPER REQ\n         CLI   TIMEECB,X'00'      DID THE TIMER POP ?\n         BNE   ENTRY300           YES--GO PROCESS TIME REQUEST\n         B     ENTRY050           HMMM.. DON'T KNOW, RETRY\n         LTORG\nECBLIST  DS    0F\nCOMMECB  DC    A(0)\n         DC    X'80',AL3(TIMEECB)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        CHECK FOR OPERATOR REQUEST\n*\n*----------------------------------------------------------------------\nENTRY060 DS    0H\n         L     R3,0(R9)           GET ADDRESS OF THE CIB\n         USING CIBSECT,R3         ALLOW ADDRESSABILITY\n         CLI   CIBVERB,X'40'      IS IT THE STOP COMMAND ?\n         BE    RETURN             YES - TO CLEAN UP ROUTINE\n         MVC   COMMDATA,BLANKS    CLEAR THE DATA BUFFER\n         IC    R15,CIBDSIZE+1     GET SIZE OF MODIFY DATA\n         BCTR  R15,R0             DECREMENT FOR EXECUTE\n         EX    R15,MOVE060        MOVE TO COMMDATA\n         QEDIT ORIGIN=(R9),BLOCK=(R3)  FREE THE CIB\n         OC    COMMDATA,BLANKS    UPPER CASE\n         CLI   COMMDATA,C'='      IS IT A COMMAND REQUEST ?\n         BE    ENTRY200           YES - PROCESS IT\n         CLI   COMMDATA,C'-'      IS IT A JOB REQUEST ?\n         BE    ENTRY100           YES - PROCESS IT\n         B     ENTRA200           ASSUME COMMAND REQUEST\n         LTORG\nMOVE060  MVC   COMMDATA(0),CIBDATA  MOVE DATA TO WORK AREA\n         DROP  R3                 FREE THE USING REGISTER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DETERMINE WHICH DDNAME TO USE FOR SUBMIT\n*\n*----------------------------------------------------------------------\nENTRY100 DS    0H\n         LA    R10,JOBDCB         ADDR OF JOB DCB\n         LA    R3,COMMDATA+1      ADDR OF INPUT DATA\nLOOP100A EQU   *\n         CLI   0(R3),C' '         END OF DATA ?\n         BE    AAA100             YES - DEFAULT DDNAME\n         CLC   0(3,R3),=C',D='    IS THIS DDNAME OVERRIDE?\n         BE    BBB100             NO, CONTINUE UNTIL ONE IS FOUND\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         B     LOOP100A           BRANCH BACK\nAAA100   EQU   *\n         MVC   0(5,R3),=C',D=00'  ASSUME DEFAULT\nBBB100   EQU   *\n         TM    DCBOFLGS,DCBOFOPN  JOB CNTL DCB OPEN ?\n         BZ    CCC100             NO - OPEN IT\n         CLC   OPENDCB,3(R3)      SAME AS LAST ONE ?\n         BE    EXIT100            YES - OK\n         CLOSE ((R10))            NO - CLOSE IT\n         XC    OPENDCB,OPENDCB    CLEAR LAST OPENED\nCCC100   EQU   *\n         MVC   DCBDDNAM+3(2),3(R3)  MODIFY DDNAME\n         OPEN  ((R10))\n         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN THIS TIME ?\n         BZ    ERROR2             NO - ERROR\n         MVC   OPENDCB,3(R3)      SAVE LAST OPENED\nEXIT100  EQU   *\n         MVC   0(5,R3),=CL5' '    CLEAR THE 'D=XX' PARM\n         B     ENTRY110\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SUBMIT EACH MEMBER SPECIFIED IN THE PARMLIST\n*\n*----------------------------------------------------------------------\nENTRY110 DS    0H\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  IS THE INTRDR OPEN ?\n         BZ    ENTRY050           NO, IGNORE REQUEST\n         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA110   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP110  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB110             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB110             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP110        BACK TO CHECK NEXT CHAR\n         B     ERROR3             MEMBER NAME LONGER THAN 8 CHARS\nBBB110   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE110        MOVE MEMBER NAME\n         FIND  ((R10)),MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    CCC110             YES - OK\n         MVC   WTO110+25(8),MEMBER\nWTO110   WTO   '** OCX  ** - JOB //////// NOT FOUND'\n         B     EEE110             GO TO EODAD ROUTINE\nCCC110   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  READDECB,SF,(R10),(R5),'S'\n         CHECK READDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,READDECB+16     ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nDDD110   EQU   *\n         PUT   INTRDR,(R5)        SUBMIT JCL\n         BXLE  R5,R6,DDD110       BUMP TO NEXT REC IN BLOCK AND PUT\n         B     CCC110             READ ANOTHER BLOCK\nEEE110   EQU   *\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   FFF110             NO, FLUSH THE INTERNAL READER\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA110             NO, PROCESS IT\nFFF110   EQU   *\n         PUT   INTRDR,EOF         /*EOF\nEXIT110  EQU   *                  END OF ALL SUBMITS\n         B     ENTRY050           CHECK FOR ANY MORE COMMANDS\nMOVE110  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMAND EXECUTION REQUEST BY OPERATOR\n*\n*----------------------------------------------------------------------\nENTRY200 DS    0H\n         LA    R3,COMMDATA+1      ADDRESS OF FIRST (OR ONLY) OPERAND\n         B     AAA200\nENTRA200 DS    0H\n         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA200   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP200  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB200             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB200             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP200        BACK TO CHECK NEXT CHAR\n         B     ERROR4             MEMBER NAME LONGER THAN 8 CHARS\nBBB200   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE200        MOVE MEMBER NAME\n         BAL   R14,ENTRY900       PROCESS COMMAND\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   EXIT200            NO, DONE\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA200             NO, PROCESS IT\nEXIT200  EQU   *\n         B     ENTRY050\n         LTORG\nMOVE200  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS TIME INTERVAL REQUESTS (THE TIMER HAS POPPED)\n*\n*----------------------------------------------------------------------\nENTRY300 DS    0H\n         MVC   MEMBER,BLANKS      CLEAR\n         MVI   MEMBER,C'@'        PREFIX\n         MVC   MEMBER+1(4),@TIME  BUILD NAME\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BNZ   EXIT300            NO, MUST BE NULL TIMER\n         BAL   R14,ENTRY900\nEXIT300  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMANDS\n*\n*----------------------------------------------------------------------\nENTRY900 DS    0H\n         STM   R0,R15,REGSAVE     SAVE ALL THE REGS\n         LA    R10,COMMANDS       DCB ADDR\n         TM    DCBOFLGS,DCBOFOPN  IS THE COMMANDS OPEN ?\n         BZ    EXIT900            NO, IGNORE REQUEST\n         BAL   R14,ENTRY999       RE-ESTABLISH DATE, TIME, AND DAY\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    AAA900             YES - PROCESS IT\n         MVC   WTO900+25(8),MEMBER\nWTO900   WTO   '** OCX  ** - CMD //////// NOT FOUND'\n         B     EXIT900            GO TO EODAD ROUTINE\nAAA900   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  CMDDECB,SF,(R10),(R5),'S'\n         CHECK CMDDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,CMDDECB+16      ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nBBB900   EQU   *\n         CLI   CONTFLAG,X'FF'     IS THE CONTINUATION FLAG ON ?\n         BNE   EEE900             NO, NORMAL PROCESSING\n         CLC   0(15,R5),BLANKS    IS IT A VALID CONT RECORD ?\n         BE    DDD900             YES, OK\nCCC900   EQU   *\n         MVC   WTO900A+25(8),MEMBER MOVE MEMBER NAME\nWTO900A  WTO   '** OCX  ** - CMD //////// INVALID CONTINUATION, SKIP'\n         MVI   CONTFLAG,X'00'     RESET CONT FLAG\n         B     JJJ900             SKIP THE RECORD\nDDD900   EQU   *\n         MVC   CMDBUF+56(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BNE   CCC900             YES - ERROR ONLY ONE CONT ALLOWED\n         MVI   CONTFLAG,X'00'     RESET THE CONTINUATION FLAG\n         B     III900             PROCESS COMPLETE COMMAND\nEEE900   EQU   *\n         CLI   0(R5),C'*'         COMMENT ?\n         BE    KKK900             YES - SKIP IT\n         CLC   =C'%END ',0(R5)    END OF IF CHECK\n         BNE   *+12               NO, SKIP AROUND RESET\n         MVI   IFFLAG,X'00'       RESET FLAG TO ALLOW ALL CMDS\n         B     KKK900             GO GET NEXT RECORD\n         CLC   =C'%IF TIME ',0(R5) IS THIS A TIME RANGE CHECK?\n         BNE   MMM900             NO\n         MVI   IFFLAG,X'00'       RESET FLAG TO ALLOW ALL CMDS\n         MVC   WKTIME,9(R5)       COPY START TIME\n         PACK  STIME,WKTIME(7)    PACK START TIME\n         MVC   WKTIME,14(R5)      COPY END TIME\n         PACK  ETIME,WKTIME(7)    PACK END TIME\n         TIME  DEC                GET THE NOW TIME\n         ST    R0,NOWTIME\n         CLC   STIME(2),ETIME     IS BEGINNING TIME LT END TIME\n         BH    STH900             YES, CHECK A DIFFERENT WAY\n         CLC   NOWTIME(2),ETIME   IS NOWTIME LT END TIME\n         BH    SKP900             NO, SET FLAG TO SKIP\n         CLC   NOWTIME(2),STIME   IS NOWTIME GT START TIME\n         BL    SKP900             NO, SET FLAG TO SKIP\n         CLC   =C'STOP',19(R5)    IS IT STOP PROCESSING MEMBER?\n         BE    EXIT900            YES\n         B     KKK900             NO, GO PROCESS THIS STUFF\nSTH900   CLC   NOWTIME(2),ETIME   IS NOWTIME LT END TIME\n         BL    STP900             YES, THEN PROCESS THIS GUY\n         CLC   NOWTIME(2),STIME   IS NOWTIME GT START TIME\n         BH    STP900             NO, SET FLAG TO SKIP\nSKP900   MVI   IFFLAG,X'FF'       TIME CHECK FAILED, SKIP PROCESSING\n         B     JJJ900             GO SKIP THIS RECORD\nSTP900   CLC   =C'STOP',19(R5)    IS IT STOP PROCESSING MEMBER?\n         BE    EXIT900            YES\n         B     JJJ900             NO, GO PROCESS THIS STUFF\nMMM900   CLI   IFFLAG,X'FF'       SKIPPING COMMANDS?\n         BE    JJJ900             YES - SKIP IT\n         CLC   1(5,R5),BLANKS     ANY MONTH/DAY PROCESSING?\n         BE    HHH900             NO, PROCESS DAY OF WEEK ONLY\n         CLI   3(R5),C'/'         VALID MONTH/DAY SPECIFICATION?\n         BE    FFF900             YES - OK\n         MVC   WTO900B+25(8),MEMBER MOVE MEMBER NAME\nWTO900B  WTO   '** OCX  ** - CMD //////// INVALID MONTH/DAY, SKIPPED'\n         B     KKK900             SKIP THE RECORD\nFFF900   EQU   *\n         CLC   1(5,R5),=C'**/**'  ANY MONTH/DAY PROCESSING?\n         BE    HHH900             YES, PROCESS DAY OF WEEK ONLY\n         CLC   1(5,R5),DATE       IS THIS A HIT?\n         BE    HHH900             YES, CHECK FOR CORRECT DAY OF WEEK\n         CLC   4(2,R5),=C'**'     WAS ANY DAY SPECIFIED ?\n         BNE   GGG900             NO, CHECK FOR ANY MONTH\n         CLC   1(2,R5),DATE       YES, IS THIS THE CORRECT MONTH\n         BE    HHH900             YES, PROCESS DAY OF WEEK NEXT\n         B     KKK900             NO - SKIP IT\nGGG900   EQU   *\n         CLC   1(2,R5),=C'**'     WAS ANY MONTH SPECIFIED ?\n         BNE   KKK900             NO - SKIP IT\n         CLC   4(2,R5),DATE+3     YES, IS THIS THE CORRECT DAY\n         BNE   KKK900             NO - SKIP IT\nHHH900   EQU   *\n         SR    R1,R1              CLEAR FOR DAY INDEX\n         IC    R1,DAY             GET DAY INDEX\n         LA    R1,7(R5,R1)        POINT TO TODAYS PROCESS FLAG\n         CLI   0(R1),C' '         PROCESS FLAG ON FOR TODAY ?\n         BE    KKK900             NO -SKIP IT\n         MVC   CMDBUF(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BE    III900             NO - PROCESS COMMAND\n         MVI   CONTFLAG,X'FF'     SET THE CONTINUATION FLAG\n         B     KKK900             GET NEXT RECORD\nIII900   EQU   *\n         CLC   =C'%END ',15(R5)    IS THIS A END REQUEST?\n         BE    END0000            YES, GO PROCESS\n         CLI   IFFLAG2,X'FF'      ARE WE SKIPPING COMMANDS?\n         BE    JJJ900             YES\n         CLI   15(R5),C'%'        IS THIS A CONTROL REQUEST?\n         BE    AAAA00             YES, GO DO SPECIAL PROCESSING\n         MODESET KEY=ZERO         GET KEY ZERO AND AUTH\n         LM    R0,R1,SVCREGS      GET SVC 34 REGS\n         SVC   34                 SCHEDULE COMMAND\n         MODESET KEY=NZERO        RELEASE AUTHORIZATION\nJJJ900   EQU   *\nKKK900   EQU   *\n         MVC   CMDBUF(115),BLANKS CLEAR THE COMMAND BUFFER\n         BXLE  R5,R6,BBB900       BUMP TO NEXT REC IN BLOCK\n         B     AAA900             READ ANOTHER BLOCK\nEXIT900  EQU   *                  EODAD\n         MVI   IFFLAG,X'00'       RESET FLAG TO ALLOW ALL CMDS\n         MVI   IFFLAG2,X'00'      RESET FLAG TO ALLOW ALL CMDS\n         LM    R0,R15,REGSAVE     RESTORE REGS\n         BR    R14\n         SPACE 1\nAAAA00   EQU   *                  PROCESS % CONTROL REQUESTS\n         CLC   =C'%WAT ',15(R5)   IS THIS A WAIT REQUEST?\n         BE    WAT0000            YES, GO PROCESS\n         CLC   =C'%END ',15(R5)    IS THIS A END REQUEST?\n         BE    END0000            YES, GO PROCESS\n         CLC   =C'%ASK ',15(R5)    IS THIS AN ASK REQUEST?\n         BE    ASK0000            YES, GO PROCESS\n         CLC   =C'%RSP ',15(R5)    IS THIS A RSP REQUEST?\n         BE    RSP0000            YES, GO PROCESS\n         CLC   =C'%WTO ',15(R5)    IS THIS A WTO REQUEST?\n         BE    WTO0000            YES, GO PROCESS\n         CLC   =C'%DOM ',15(R5)    IS THIS A DOM REQUEST?\n         BE    DOM0000            YES, GO PROCESS\n         BNE   WTOA00A            NO, ISSUE ERROR MSG\n*** PROCESS %RSP  CONTROL CARD\nRSP0000  CLC   =C'STOP ',30(R5)   WANT TO STOP ALL PROCESSING?\n         BNE   RSP0010            NO, CHECK RESPONSE\n         CLC   ASKRPLY,20(R5)     COMPARE RESPONSE\n         BE    EXIT900            STOP PROCESSING OF THIS MEMBER\n         B     JJJ900             GO READ NEXT RECORD\nRSP0010  CLC   ASKRPLY,20(R5)     COMPARE RESPONSE\n         BE    JJJ900             MATCH, PROCESS NEXT RECORD\n         MVI   IFFLAG2,X'FF'      SET TO SKIP THIS STUFF\n         B     JJJ900             GO PROCESS NEXT RECORD\n*** PROCESS %ASK CONTROL CARD\nASK0000  MVC   ASKOPTS,20(R5)     COPY ASK RESPONSES TO HOLD AREA\nASK0010  XC    ASKECB,ASKECB      ZERO THE ECB\n         MVC   ASKRPLY,=CL8' '    BLANK OUT REPLY AREA\n         WTOR  ,ASKRPLY,,ASKECB,MF=(E,WTORASK) ASK OPER\n         WAIT  1,ECB=ASKECB,LONG=YES   WAIT FOR RESPONSE\n         ICM   R1,15,WTOQMID      GET WTO MSG ID\n         BZ    ASK0012\n         DOM   MSG=(1)            DELETE IT\nASK0012  OC    ASKRPLY,BLANKS     UPCASE IT\n         CLC   =C'? ',ASKRPLY     OPER WANT IT REPEATED?\n         BNE   ASK0020            NO\nASK0015  WTO   MF=(E,WTOQSTN)     WTO THE QUESTION\n         ST    R1,WTOQMID         SAVE THE WTO ID\n         B     ASK0010            ASK AGAIN\nASK0020  LA    R8,5               SET MAX NUMBER OF OPTIONS\n         LA    R9,20(R5)          POINT TO FIRST OPTION\nASK0030  CLC   ASKRPLY,0(R9)      IS THIS THE REPLY?\n         BE    JJJ900             YES, WE GOT ONE\n         LA    R9,10(R9)          POINT TO NEXT OPTION\n         BCT   R8,ASK0030         GO CHECK IT\n         WTO   MF=(E,WTOINVLD)    GO ISSUE INVALID REPLY MSG\n         B     ASK0015            ASK AGAIN\n*** PROCESS %DOM CONTROL CARD\nDOM0000  L     R1,WTOQMID         GET WTO MSG ID\n         DOM   MSG=(1)            DELETE IT\n         B     JJJ900             GO GET NEXT RECORD\n*** PROCESS %WTO CONTROL CARD\nWTO0000  MVC   WTOQSTXT,20(R5)    COPY QUESTION TO WTOR\n         WTO   MF=(E,WTOQSTN)     WTO THE QUESTION\n         ST    R1,WTOQMID         SAVE THE WTO ID\n         B     JJJ900             GO GET NEXT RECORD\n*** PROCESS %END CONTROL CARD\nEND0000  MVI   IFFLAG2,X'00'      SET FLAG TO ALLOW COMMANDS\n         B     JJJ900             GO GET NEXT RECORD\n*** PROCESS %WAT CONTROL CARD\n*        VERIFY THAT PARM IS NUMERIC\nWAT0000  CLI   20(R5),F0    IS THIS CHAR NUMERIC?\n         BL    WTOA00B       NO\n         CLI   20(R5),F9\n         BH    WTOA00B       NO\n         CLI   21(R5),F0     IS THIS DIGIT MUNERIC?\n         BL    WTOA00B       NO\n         CLI   21(R5),F9\n         BH    WTOA00B       NO\n         SPACE 2\n**       CONVERT RESPONSE TO TIMER UNITS\n         PACK  WTDBLWRD,20(2,R5) PACK WAIT TIME\n         CVB   R3,WTDBLWRD      AND GET IN BINARY FORMAT\n         SLR   R2,R2\n         M     R2,SECONDS    MULTIPLY TO GET REAL TIME\n         ST    R3,WAITTIME   SAVE THE INTERVAL\n         SPACE 1\nSTIMER   STIMER WAIT,BINTVL=WAITTIME\n         SPACE 1\n         B     JJJ900\n         SPACE 1\nWTOA00B  WTO   '** OCX  ** - INVALID %WAIT TIME INTERVAL'\n         B     EXIT900            STOP MEMBER PROCESSING\n         SPACE 1\nWTOA00A  WTO   '** OCX  ** - INVALID % CONTROL COMMAND ENCOUNTERED'\n         B     EXIT900            STOP MEMBER PROCESSING\n         LTORG\n         SPACE 2\nREGSAVE  DC    18F'-1'\nCONTFLAG DC    X'00'\nIFFLAG   DC    X'00'\nIFFLAG2  DC    X'00'\nSVCREGS  DC    F'0'               REG 0 FOR SVC 34\n         DC    A(SVCCIB)          REG 1 FOR SVC 34\nSVCCIB   DC    AL2(118)           MAXIMUM LENGHT OF COMMAND\n         DC    H'0'               SVC 34 PADDING\nCMDBUF   DC    CL120' '           COMMAND BUFFER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        TIMER EXIT\n*\n*----------------------------------------------------------------------\nENTRY950 DS    0H\n         USING *,R15\n         STM   R14,R12,4(R13)     SAVE REGS\n         L     R12,=A(OCX)\n         DROP  R15\n         POST  TIMEECB\n         LM    R14,R12,4(R13)     RESTORE REGS\nEXIT950  EQU   *\n         BR    R14\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DAY/DATE ROUTINE (FROM THE MACHINE CLOCK)\n*\n*----------------------------------------------------------------------\nENTRY999 DS    0H\n         ST    R14,SAVE999        SAVE BAL REG\n         $STCK NOGEN              GENERATE THE DATE, TIME AND DAY\nEXIT999  EQU   *\n         L     R14,SAVE999        RELOAD BAL REG\n         BR    R14\n         LTORG\nSAVE999  DC    F'-1'\nDAY      DC    X'99'              RELATIVE DAY OF WEEK (0=MONDAY)\nDATE     DC    D'0'               DATE MM/DD/YY\nTIME     DC    D'0'               TIME HH:MM:SS\n         EJECT\n*----------------------------------------------------------------------\n*\n*        END OF JOB\n*\n*----------------------------------------------------------------------\nRETURN   DS    0H\n         TM    DCBOFLGS,DCBOFOPN  IS THE JCL DCB OPEN?\n         BZ    AAARET             NO, SKIP THE CLOSE\n         CLOSE ((10))             CLOSE THE DCB\nAAARET   EQU   *\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  COMMANDS OPEN ?\n         BZ    BBBRET             NO, SKIP THE CLOSE\n         CLOSE (COMMANDS,,DIR)    CLOSE BOTH DCBS\nBBBRET   EQU   *\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  HOW ABOUT THE INTRDR ?\n         BZ    CCCRET             NO, SKIP THAT CLOSE\n         CLOSE (INTRDR)           CLOSE THE INTERNAL READER\nCCCRET   EQU   *\n         L     R1,BUFFER\n         L     R0,BUFSIZE\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15            CLEAR RETCODE\n         $EPILOG\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ERROR ROUTINES\n*\n*----------------------------------------------------------------------\nERROR1   DS    0H\n         WTO   '** OCX  ** - COMMANDS DD CARD MISSING, TERMINATING'\n         B     RETURN\n*----------------------------------------------------------------------\nERROR2   DS    0H\n         MVC   WTO2+23(2),3(R3)\nWTO2     WTO   '** OCX  ** - D=// OPEN ERROR, JOB NOT SUBMITTED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR3   DS    0H\n         MVC   WTO3+25(8),0(R4)\nWTO3     WTO   '** OCX  ** - JOB //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR4   DS    0H\n         MVC   WTO4+25(8),0(R4)\nWTO4     WTO   '** OCX  ** - CMD //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n         EJECT\n*----------------------------------------------------------------------\n*\n*        STORAGE AREAS\n*\n*----------------------------------------------------------------------\nBUFSIZE  DC    F'32760'\nTIMEECB  DC    F'0'\nBUFFER   DC    F'0'\nMEMBER   DC    CL8' '\nOPENDCB  DC    CL2' '\nHOLDCIB  DC    CL256' '\nCOMMDATA DC    CL256' '\nBLANKS   DC    CL256' '\nEOF      DC    CL80'/*EOF'\nWKTIME   DC    CL4'0000',C'000'\n         DS    0F\nNOWTIME  DC    PL4'0'\nSTIME    DC    PL4'0'\nETIME    DC    PL4'0'\nWTDBLWRD  DS    D\nWAITTIME DC    A(0)\nSECONDS  DC    A(100)   FUDGE FACTOR FOR BINTVL\nASKECB   DC    A(0)\nWTOQMID  DC    A(0)\nASKRPLY  DC    CL8' '\n         SPACE 1\nWTORASK  WTOR  '*OCX : VALID RESPONSES ARE: 123456789012345678901234567X\n               8901234567890123456789',,8,ROUTCDE=2,DESC=3,MF=L\nASKOPTS  EQU   WTORASK+12+28,50,C'C'\n         SPACE 1\nWTOQSTN  WTO   '*OCX: 123456789012345678901234567890123456789012345 ', X\n               ROUTCDE=2,DESC=2,MF=L\nWTOQSTXT EQU   WTOQSTN+4+6,45,C'C'\nWTOINVLD WTO   '*OCX: INVALID RESPONSE ENTERED - PLEASE REENTER',      X\n               ROUTCDE=2,MF=L\n         SPACE 1\nF0       EQU   C'0'\nF9       EQU   C'9'\n         EJECT\n         PRINT NOGEN\nCOMMANDS DCB   DDNAME=COMMANDS,DSORG=PO,MACRF=R,EODAD=EXIT900\nDIR      DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=RP,EODAD=DDD040,         X\n               LRECL=256,BLKSIZE=256,RECFM=FB\nJOBDCB   DCB   DDNAME=JOB00,DSORG=PO,MACRF=R,EODAD=EEE110\nINTRDR   DCB   DDNAME=INTRDR,DSORG=PS,MACRF=PM,                        X\n               LRECL=80,BLKSIZE=80,RECFM=F\n         SPACE 2\nCVTPTR   EQU   16\nTCBJSCB  EQU   X'B4'\nJSCBSSIB EQU   X'13C'\nSSIBID   EQU   0\nSSIBJBID EQU   X'0C'\n         EJECT\nCIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING\nCIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN\nCIBVERB  DS    C                  CIB VERB CODE\nCIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER\nCIBRSVD1 DS    H                  RESERVED\nCIBRSVD2 DS    C                  RESERVED\nCIBTSOID DS    CL3                TSO TERMINAL ID\nCIBCONID DS    C                  CONSOLE ID OF STARTED TASK\nCIBRSVD3 DS    C                  RESERVED\nCIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB\nCIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    CL1\n         DCBD  DSORG=PO\n         END   OCX\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT021/FILE021.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT021", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}