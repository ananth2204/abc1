{"INMR01": {"INMLRECL": 80, "INMFNODE": "TESTMVS", "INMFUID": "STEPHEN", "INMTNODE": "TESTMVS", "INMTUID": "STEPHEN", "INMFTIME": "20070919062045000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "INMCOPY", "INMSIZE": 32760, "INMDSORG": "PS", "INMLRECL": 251, "INMBLKSZ": 32760, "INMRECFM": "VB", "INMDSNAM": "STEPHEN.RACFAUTH.RX", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 32760, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"STEPHEN.RACFAUTH.RX": {"text": "/* REXX **************************************************************//*\n                                                            *//*   RACFauthR.rx\n                                                   *//*   ----------------------\n---------------------------------------   *//*   GWAPI/REXX Pre-Exit\n                                 *//*\n                        *//*   This GWAPI exit routine is used to implement Form\n-based         *//*   Authentication on the IBM HTTP Server for z/OS.\n      *//*                                                                   *//\n*   We needed to customize the login process for our web-based      *//*   appli\ncations.  The built-in Basic Authentication function       *//*   lacks a couple\n of critical pieces:                              *//*\n                                         *//*   1) It is not encrypted.  Basic A\nuthentication Base64-encodes    *//*      the userid and password but sends that\n in the clear.         *//*   2) It does not allow for additional credentials.\n              *//*\n     *//*   We're an academic institution so our network tends to be open   *//*\n   to just about anybody and our customers need to access our      *//*   system\ns from all over the world.  It's kinda important that     *//*   our login infor\nmation is encrypted.  This exit forces SSL       *//*   encryption (i.e. all URL\ns are \"httpS://...\").                   *//*\n                               *//*   We also need to use two-factor authenticat\nion tokens such as    *//*   RSA's SecurID or PassGo's DigiPass.  With this exit\n we're able  *//*   to customize the content of our login information to support\n    *//*   our needs.                                                      *//*\n                                                                  *//*   Our sho\np has PassGo's NC-Pass product to support the            *//*   security tokens.\n                                                *//*\n                                       *//*   This program runs as a pre-exit be\ncause a pre-exit is called    *//*   all the time whereas an authentication or a\nuthorization exit    *//*   only gets called if you have the appropriate directi\nves         *//*   included in your web configuration.\n   *//*                                                                   *//*\n -------------------------------------------------------------   *//*\n                                                        *//*   Modification Hist\nory:                                           *//*   02Jul2006 SYO    Initial v\nersion                                *//*\n                             *//*   --------------------------------------------\n-----------------   *//*\n           *//*   Copyright (c) 2006 Stephen Y. Odo\n  *//*   University of Hawai'i Information Technology Services           *//*\n                                                                *//*   Many than\nks to my colleague Russ Tokuyama for having the        *//*   patience to answer\n my questions and explain how things work     *//*   on the web to me.\n                                     *//*\n                            *//*************************************************\n********************//*---------------------------------------------------------\n----------*//*   Initialization.\n *//*-------------------------------------------------------------------*/ debug\n = 1 NL = X2C('15') stemvar.0 = 0 stemval.0 = 0 inarea = LEFT(\" \", 4096) exposeP\narse = \"stemvar. \" || ,               \"stemval. \" || ,               \"inarea \" |\n| ,               \"tbc asc ebc \" || ,               \"debug \" exposeSendLogin = \"\norigURL \" || ,                   \"skel_A \" || ,                   \"skel_B \" || ,\n                   \"origURL \" || ,                   \"debug \"/*   Page skeleton\n--------------------------------------------------*/ skel_A =           '<html>'\n || NL skel_A = skel_A ||  '<head>' || NL skel_A = skel_A ||   '<title>UH/ITS RA\nCF Login</title>' || NL skel_A = skel_A ||   '<script type=\"text/javascript\">' |\n| NL skel_A = skel_A ||   '</script>' || NL skel_A = skel_A ||    '<link href=\"h\nttps://TestMVS.ITS.Hawaii.Edu/its/gwapi/stylesheets/FMIS.css\" ' || ,\n             'rel=\"stylesheet\" type=\"text/css\">' || NL skel_A = skel_A ||   '</l\nink>' || NL skel_A = skel_A ||  '</head>' || NL skel_A = skel_A ||  '<body>' ||\nNL skel_A = skel_A ||   '<div id=\"header-logo\">' || NL skel_A = skel_A ||    '<i\nmg src=\"https://TestMVS.ITS.Hawaii.Edu/its/gwapi/images/FMISlogo.png\"/>' || NL s\nkel_A = skel_A ||   '</div>' || NL skel_A = skel_A ||   '<div id=\"header-text\">'\n || NL skel_A = skel_A ||    '<font size=\"+3\">UH/ITS Financial Management Inform\nation System</font><br style=\"clear: none;\"/>' || NL skel_A = skel_A ||    '<fon\nt size=\"+1\">RACF Login</font><br/>' || NL skel_A = skel_A ||   '</div>' || NL sk\nel_B =            '</body>' || NL skel_B = skel_B || '</html>' || NL/*   Transla\nte tables -----------------------------------------------*//*      0 1 2 3 4 5 6\n 7 8 9 A B C D E F               */ tbc= \"000102030405060708090A0B0C0D0E0F\"X ||,\n  /* 00  */      \"101112131415161718191A1B1C1D1E1F\"X ||,  /* 10  */      \"202122\n232425262728292A2B2C2D2E2F\"X ||,  /* 20  */      \"303132333435363738393A3B3C3D3E\n3F\"X ||,  /* 30  */      \"404142434445464748494A4B4C4D4E4F\"X ||,  /* 40  */\n \"505152535455565758595A5B5C5D5E5F\"X ||,  /* 50  */      \"606162636465666768696A\n6B6C6D6E6F\"X ||,  /* 60  */      \"707172737475767778797A7B7C7D7E7F\"X ||,  /* 70\n */      \"808182838485868788898A8B8C8D8E8F\"X ||,  /* 80  */      \"909192\n9798999A9B9C9D9E9F\"X ||,  /* 90  */      \"A0A1A2A3A4A5A6A7A8A9AAABACADAEAF\"X ||,\n  /* A0  */      \"B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF\"X ||,  /* B0  */      \"C0C1C2\nC3C4C5C6C7C8C9CACBCCCDCECF\"X ||,  /* C0  */      \"D0D1D2D3D4D5D6D7D8D9DADBDCDDDE\nDF\"X ||,  /* D0  */      \"E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF\"X ||,  /* E0  */\n \"F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF\"X      /* F0  *//*      0 1 2 3 4 5 6 7 8 9 A\n B C D E F               */ asc= \"00010203DC09C37FCAB2D50B0C0D0E0F\"X ||,  /* 00\n */      \"10111213DBDA08C11819C8F21C1D1E1F\"X ||,  /* 10  */      \"C4B3C0D9BF0A17\n1BB4C2C5B0B1050607\"X ||,  /* 20  */      \"CDBA16BCBBC9CC04B9CBCEDF1415FE1A\"X ||,\n  /* 30  */      \"20FF838485A0C68687A4BD2E3C282B7C\"X ||,  /* 40  */      \"268288\n898AA18C8B8DE121242A293BAA\"X ||,  /* 50  */      \"2D2FB68EB7B5C78F80A5DD2C255F3E\n3F\"X ||,  /* 60  */      \"9B90D2D3D4D6D7D8DE603A2340273D22\"X ||,  /* 70  */\n \"9D616263646566676869AEAFD0ECE7F1\"X ||,  /* 80  */      \"F86A6B6C6D6E6F707172A6\nA791F792CF\"X ||,  /* 90  */      \"E67E737475767778797AADA8D1EDE8A9\"X ||,  /* A0\n */      \"5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E\"X ||,  /* B0  */      \"7B4142\n474849F0939495A2E4\"X ||,  /* C0  */      \"7D4A4B4C4D4E4F505152FB968197A398\"X ||,\n  /* D0  */      \"5CF6535455565758595AFDE299E3E0E5\"X ||,  /* E0  */      \"303132\n33343536373839FCEA9AEBE99F\"X      /* F0  *//*      0 1 2 3 4 5 6 7 8 9 A B C D E\n F               */ ebc= \"00010203372D2E2F1605250B0C0D0E0F\"X ||,  /* 00  */\n \"101112133C3D322618193F271C1D1E1F\"X ||,  /* 10  */      \"405A7F7B5B6C507D4D5D5C\n4E6B604B61\"X ||,  /* 20  */      \"F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F\"X ||,  /* 30\n */      \"7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6\"X ||,  /* 40  */      \"D7D8D9E2E3E4E5\nE6E7E8E9BAE0BBB06D\"X ||,  /* 50  */      \"79818283848586878889919293949596\"X ||,\n  /* 60  */      \"979899A2A3A4A5A6A7A8A9C04FD0A107\"X ||,  /* 70  */      \"68DC51\n42434447485253545756586367\"X ||,  /* 80  */      \"719C9ECBCCCDDBDDDFECFC70B180BF\nFF\"X ||,  /* 90  */      \"4555CEDE49699A9BABAF5FB8B7AA8A8B\"X ||,  /* A0  */\n \"2B2C092128656264B4383134334AB224\"X ||,  /* B0  */      \"22172906202A46661A3508\n3936303A9F\"X ||,  /* C0  */      \"8CAC7273740A757677231514046A783B\"X ||,  /* D0\n */      \"EE59EBEDCFEFA08EAEFEFBFD8DADBCBE\"X ||,  /* E0  */      \"CA8F1BB9B6B5E1\n9D90BDB3DAFAEA3E41\"X      /* F0  *//*-------------------------------------------\n------------------------*//*   Check the URL\n               *//*-------------------------------------------------------------\n------*/ varnam = \"DOCUMENT_URI\" varval = LEFT(\" \",1024,\" \") ADDRESS LINKMVS \"IM\nWXXTR varnam varval\" url = varval origURL = url IF debug > 0 THEN SAY \"*debug* R\nACFauthR: url='\" || url || \"'.\"/*   Exit if not one of my applications ---------\n--------------------*/ SELECT   WHEN SUBSTR(url,1,6)  = \"/AuthN\"     THEN DO\n   applid = \"\"     END /* of \"WHEN(/AuthN) THEN DO\" */   WHEN SUBSTR(url,1,10) =\n \"/its/docs/\" THEN DO       applid = \"/its/docs\"     END /* of \"WHEN(/its/docs)\nTHEN DO\" */   WHEN SUBSTR(url,1,6)  = \"/MVSDS\"     THEN DO       applid = \"/MVSD\nS\"     END /* of \"WHEN(/MVSDS) THEN DO\" */   WHEN SUBSTR(url,1,10) = \"/RACFmaint\n\" THEN DO       applid = \"/RACFmaint\"     END /* of \"WHEN(/RACFmaint) THEN DO\" *\n/   OTHERWISE                 EXIT 0  /* HTTP_NOACTION */ END  /*  of \"SELECT\"\n*/ IF debug > 0 THEN   SAY \"*debug* RACFauthR: entered with url ='\" || url || \"'\n\"/*-------------------------------------------------------------------*//*   Mak\ne sure connection is encrypted.                              *//*---------------\n----------------------------------------------------*/ varnam = \"HTTPS\" varval =\n LEFT(\" \",64,\" \") ADDRESS LINKMVS \"IMWXXTR varnam varval\" IF STRIP(varval,\"B\") \u00ac\n= \"ON\" THEN DO     varnam = \"CONTENT_TYPE\"     varval = \"text/html\"     ADDRESS\nLINKMVS \"IMWXSET varnam varval\"     varnam = \"CONTENT_ENCODING\"     varval = \"eb\ncdic\"     ADDRESS LINKMVS \"IMWXSET varnam varval\"     msg =        skel_A     ms\ng = msg || '<fieldset>' || NL     msg = msg || '<legend>Error</legend>' || NL\n  msg = msg || 'This application requires encryption. Please use the HTTPS proto\ncol.' || NL     msg = msg || '</fieldset>' || NL     msg = msg || '<form method=\n\"post\" action=\"https://TestMVS.ITS.Hawaii.Edu' || origURL || '\"><br/>' || NL\n msg = msg ||  '<input type=\"submit\" name=\"continue\" value=\"continue\"/>' || NL\n   msg = msg || '</form>' || NL     msg = msg || skel_B     ADDRESS LINKMVS \"IMW\nXWRT msg\"     IF debug > 0 THEN SAY \"*debug* RACFauthR: Exit HTTP_OK -- not encr\nypted\"     EXIT 200  /* HTTP_OK */   END  /*  of \"IF HTTPS\u00ac=ON THEN DO\"  *//*---\n----------------------------------------------------------------*//*   ApplID=Au\nthN?                                                   *//*---------------------\n----------------------------------------------*/ IF SUBSTR(url,1,6) = \"/AuthN\" T\nHEN DO/*   Extract original URL from URL. ---------------------------------*/\n  origURL = SUBSTR(url, 7)     origURL = STRIP(origURL, \"B\")/*   Get input infor\nmation. -----------------------------------------*/     varnam = \"CONTENT_LENGTH\n\"     varval = LEFT(\" \",1024,\" \")     ADDRESS LINKMVS \"IMWXXTR varnam varval\"\n  inarea = LEFT(\" \", varval)     varnam = \"CONVERT_REQUEST_BODY\"     varval = \"Y\nES\"     ADDRESS LINKMVS \"IMWXSET varnam varval\"     ADDRESS LINKMVS \"IMWXRD inar\nea\"     CALL ParseData     racfid = LEFT(\" \", 8)     racfpwd = LEFT(\" \", 8)\nracfnewpwd = LEFT(\" \", 8)     racfnewpwd1 = LEFT(\" \", 8)     racfnewpwd2 = LEFT(\n\" \", 8)     securid = LEFT(\" \", 8)     DO i = 1 TO stemvar.0       SELECT\n  WHEN TRANSLATE(stemvar.i) = \"RACFID\" THEN           racfid = stemval.i\n WHEN TRANSLATE(stemvar.i) = \"RACFPWD\" THEN           racfpwd = stemval.i\n  WHEN TRANSLATE(stemvar.i) = \"RACFNEWPWD1\" THEN           racfnewpwd1 = stemval\n.i         WHEN TRANSLATE(stemvar.i) = \"RACFNEWPWD2\" THEN           racfnewpwd2\n= stemval.i         WHEN TRANSLATE(stemvar.i) = \"SECURID\" THEN           securid\n = stemval.i         OTHERWISE DO           END       END  /*  of \"SELECT\"  */\n   END  /*  of \"DO i=1 TO stemvar.0\"  */     racfid = STRIP(racfid,\"B\")     racf\npwd = STRIP(racfpwd,\"B\")     racfnewpwd = STRIP(racfnewpwd,\"B\")     racfnewpwd1\n= STRIP(racfnewpwd1,\"B\")     racfnewpwd2 = STRIP(racfnewpwd2,\"B\")     securid =\nSTRIP(securid,\"B\")     racfid = TRANSLATE(racfid)     racfpwd = TRANSLATE(racfpw\nd) /* don't do this after z/OS 1.8 *//*   See if the user needs a security token\n. ------------------------*/     rc = NEEDTOK(racfid)     needAtoken = \"N\"     I\nF SUBSTR(rc, 1, 4) = \"OK Y\" THEN       needAtoken = \"Y\"/*   If new password spec\nified, make sure user confirmed new pwd. ---*/     IF racfnewpwd1 \u00ac= \"\" THEN DO\n        IF racfnewpwd1 \u00ac= racfnewpwd2 THEN DO             varnam = \"CONTENT_TYPE\n\"             varval = \"text/plain\"             ADDRESS LINKMVS \"IMWXSET varnam\nvarval\"             varnam = \"CONTENT_ENCODING\"             varval = \"ebcdic\"\n          ADDRESS LINKMVS \"IMWXSET varnam varval\"             msg = skel_A\n       msg = msg || '<form id=\"loginForm\" method=\"post\" action=\"https://TestMVS.\nITS.Hawaii.Edu/AuthN' || ,                           origURL || '\">' || NL\n       msg = msg || '<fieldset>' || NL             msg = msg ||  '<legend>RACF L\nogin Information</legend>' || NL             msg = msg ||  '<label for=\"RACFID\">\nRACF ID:</label>' || NL             IF racfid \u00ac= '' THEN               msg = msg\n ||  '<input id=\"RACFID\" name=\"RACFID\" value=\"' || racfid || ,\n           '\" type=\"text\" size=\"10\"/><br/>' || NL             ELSE\n msg = msg ||  '<input id=\"RACFID\" name=\"RACFID\" type=\"text\" size=\"10\"/><br/>' |\n| NL             msg = msg ||  '<label for=\"RACFpwd\">RACF Password:</label>' ||\nNL             IF racfpwd \u00ac= '' THEN               msg = msg ||  '<input id=\"RAC\nFpwd\" name=\"RACFpwd\" value=\"' || racfpwd || ,                             '\" typ\ne=\"password\" size=\"10\"/><br/>' || NL             ELSE               msg = msg ||\n  '<input id=\"RACFpwd\" name=\"RACFpwd\" type=\"password\" size=\"10\"/><br/>' || NL\n          msg = msg ||  '<label for=\"RACFnewPwd1\">new RACF Password:</label>' ||\n NL             msg = msg ||  '<input id=\"RACFnewPwd1\" name=\"RACFnewPwd1\" type=\"\npassword\" size=\"10\"/>' || NL             msg = msg ||  '<label for=\"RACFnewPwd2\"\n>Confirm new password:</label>' || NL             msg = msg ||  '<input id=\"RACF\nnewPwd2\" name=\"RACFnewPwd2\" type=\"password\" size=\"10\"/><br/>' || NL\nIF needAtoken = \"Y\" THEN DO                 msg = msg ||  '<label for=\"SecurID\">\nnumber displayed on your Security Token</label>' || NL                 msg = msg\n ||  '<input id=\"SecurID\" name=\"SecurID\" type=\"text\" size=\"10\"/>' || NL\n      END  /*  of \"IF needAtoken=Y THEN DO\"  */             msg = msg || '</fiel\ndset>' || NL             msg = msg || '<fieldset>' || NL             msg = msg |\n|  '<legend>Message(s)</legend>' || NL             msg = msg ||  'FAIL 0016 NewP\nassword-1 does not match NewPassword-2 <' || origURL || '><br/>' || NL\n   msg = msg ||  'Please make sure that what you entered for \"New Password\" ' ||\n                           'matches exactly with what you entered for \"Confirm N\new Password.\"' || NL             msg = msg || '</fieldset>' || NL             ms\ng = msg || '</form>' || NL             msg = msg || skel_B             ADDRESS L\nINKMVS \"IMWXWRT msg\"             IF debug > 0 THEN               SAY \"*debug* RA\nCFauthR: Exit HTTP_OK -- non-matching NewPasswords\"             EXIT 200  /* HTT\nP_OK */           END       END     racfnewpwd = TRANSLATE(racfnewpwd1) /* don't\n do this after z/OS 1.8 *//*   Reset applid ------------------------------------\n---------------*/     applid = origURL     IF debug > 0 THEN SAY \"*debug* RACFau\nthR: origURL is '\" || applid || \"'\"     i = POS(\"?\", applid)     IF i \u00ac= 0 THEN\napplid = SUBSTR(applid, 1, i-1)     IF debug > 0 THEN SAY \"*debug* RACFauthR: Qu\nery check (\" || i || \") applid is '\" || applid || \"'\"     i = POS(\":\", applid)\n   IF i \u00ac= 0 THEN applid = SUBSTR(applid, 1, i-1)     IF debug > 0 THEN SAY \"*de\nbug* RACFauthR: Function check (\" || i || \") applid is '\" || applid || \"'\"     i\n = POS(\"/\", SUBSTR(applid,2))     IF i \u00ac= 0 THEN applid = SUBSTR(applid, 1, i)\n   IF debug > 0 THEN SAY \"*debug* RACFauthR: Filename check (\" || i+1 || \") appl\nid is '\" || applid || \"'\"     IF debug > 0 THEN SAY \"*debug* RACFauthR: applid r\neset to '\" || applid || \"'\"/*   Authenticate against NC-PASS. ------------------\n----------------*/     IF debug > 0 THEN SAY \"*debug* RACFauthR: Authenticate ID\n(\" || racfid || ,         \") pwd(\" || LEFT(\"**********\",LENGTH(racfpwd)) || ,\n      \") newpwd(\" || LEFT(\"**********\",LENGTH(racfnewpwd)) || ,         \") token\n(\" || securid || ,         \") originalURL(\" || origURL || \")\"     rc = RACauth(r\nacfid, racfpwd, racfnewpwd, securid)     ncpassRC = rc     IF debug > 0 THEN\n   SAY \"*debug* RACFauthR: ncpassRC='\" || ncpassRC || \"'.\"     PARSE VAR ncpassR\nC ncpassStatus ncpassRet ncpassRsn .     IF ncpassStatus \u00ac= \"OK\" THEN DO\n varnam = \"CONTENT_TYPE\"         varval = \"text/html\"         ADDRESS LINKMVS \"I\nMWXSET varnam varval\"         varnam = \"CONTENT_ENCODING\"         varval = \"ebcd\nic\"         ADDRESS LINKMVS \"IMWXSET varnam varval\"         SELECT           WHE\nN ncpassRsn = \"0024\" THEN DO       /* Invalid Password */               err = \"0\n024 Invalid RACF ID/Password combination \"             END /* of \"When 0024\" */\n          WHEN ncpassRsn = \"0025\" THEN DO       /* Unacceptable Password */\n          err = \"0025 Unacceptable Password \"            END /* of \"When 0025\" *\n/           WHEN ncpassRsn = \"0029\" THEN DO       /* Invalid UserID */\n     err = \"0029 Invalid UserID \"             END /* of \"When 0029\" */\n WHEN ncpassRsn = \"0061\" THEN DO       /* Password Expired */               err\n= \"0061 Password Expired \"             END /* of \"When 0061\" */           WHEN n\ncpassRsn = \"0782\" THEN DO       /* Revoked */               err = \"0782 Access R\nEVOKEd \"             END /* of \"When 0782\" */           WHEN ncpassRsn = \"4108\"\nTHEN DO       /* not in book ??? */               err = \"4108 Attempted to re-us\ne DigiPass Key \"             END /* of \"When 4108\" */           WHEN ncpassRsn =\n \"4109\" THEN DO       /* Invalid DigiPass Key */               err = \"4109 Inval\nid DigiPass Key \"             END /* of \"When 4109\" */           OTHERWISE DO\n            err = RIGHT(ncpassRsn, 4, \"0\") || \" CKSE\" || ncpassRSN || ,\n            \"(\" || ncpassRet || \") \"             END         END  /*  of \"SELECT\n\" */         msg = skel_A         msg = msg || '<form id=\"loginForm\" method=\"pos\nt\" action=\"https://TestMVS.ITS.Hawaii.Edu/AuthN' || ,                       orig\nURL || '\">' || NL         msg = msg || '<fieldset>' || NL         msg = msg ||\n'<legend>RACF Login Information</legend>' || NL         msg = msg ||  '<label fo\nr=\"RACFID\">RACF ID:</label>' || NL         IF racfid \u00ac= '' THEN           msg =\nmsg ||  '<input id=\"RACFID\" name=\"RACFID\" value=\"' || racfid || ,\n          '\" type=\"text\" size=\"10\"/><br/>' || NL         ELSE           msg = ms\ng ||  '<input id=\"RACFID\" name=\"RACFID\" type=\"text\" size=\"10\"/><br/>' || NL\n    msg = msg ||  '<label for=\"RACFpwd\">RACF Password:</label>' || NL         IF\n racfpwd \u00ac= '' THEN           msg = msg ||  '<input id=\"RACFpwd\" name=\"RACFpwd\"\nvalue=\"' || racfpwd || ,                         '\" type=\"password\" size=\"10\"/><\nbr/>' || NL         ELSE           msg = msg ||  '<input id=\"RACFpwd\" name=\"RACF\npwd\" type=\"password\" size=\"10\"/><br/>' || NL         IF SUBSTR(err, 1, 4) = \"006\n1\" THEN DO             msg = msg ||  '<label for=\"RACFnewPwd1\">new RACF Password\n:</label>' || NL             msg = msg ||  '<input id=\"RACFnewPwd1\" name=\"RACFne\nwPwd1\" type=\"password\" size=\"10\"/>' || NL             msg = msg ||  '<label for=\n\"RACFnewPwd2\">Confirm new password:</label>' || NL             msg = msg ||  '<i\nnput id=\"RACFnewPwd2\" name=\"RACFnewPwd2\" type=\"password\" size=\"10\"/><br/>' || NL\n           END         IF needAtoken = \"Y\" THEN DO             msg = msg ||  '<l\nabel for=\"SecurID\">number displayed on your Security Token</label>' || NL\n      msg = msg ||  '<input id=\"SecurID\" name=\"SecurID\" type=\"text\" size=\"10\"/>'\n || NL           END  /*  of \"IF needAtoken=Y THEN DO\"  */         msg = msg ||\n'</fieldset>' || NL         msg = msg || '<fieldset>' || NL         msg = msg ||\n  '<legend>Message(s)</legend>' || NL         msg = msg || err || NL         msg\n = msg || '</fieldset><br/>' || NL         msg = msg || '<input id=\"login\" type=\n\"submit\" name=\"loginButton\" value=\"Login\"/>' || NL         msg = msg || '</form>\n' || NL         msg = msg || skel_B         varnam = \"HTTP_RESPONSE\"         var\nval = \"200\"         ADDRESS LINKMVS \"IMWXSET varnam varval\"         ADDRESS LINK\nMVS \"IMWXWRT msg\"         IF debug > 0 THEN DO             SAY \"*debug* RACFauth\nR: Exit HTTP_OK -- NC-PASS Authentication Failed.\"             SAY \"*debug* RACF\nauthR: msg='\" || err || \"'\"           END         EXIT 200  /* HTTP_OK */\nEND  /*  of \"IF retcode\u00ac=0 THEN DO\"  *//*   Create a session cookie. -----------\n----------------------------*/     IF racfnewpwd \u00ac= '' THEN racfpwd = racfnewpwd\n     b64RACF = B64enc(Translate(racfid || \":\" || racfpwd, asc, tbc))     cookieS\nessionID = NewCookie(b64RACF)     varnam = \"HTTP_SET-COOKIE\"     varval = \"sessi\nonID=\" || cookieSessionID || ,              \";path=\" || applid || ,\n \";version=0.1;\"     ADDRESS LINKMVS \"IMWXSET varnam varval\"     IF debug > 0 TH\nEN       SAY \"*debug* RACFauthR: Set-Cookie sessionID=\" || cookieSessionID || ,\n          \";path=\" || applid || \";version=0.1;\"/*   Set authentication parameter\ns ----------------------------------*/     varnam = \"AUTH_TYPE\"     varval = \"Ba\nsic\"     ADDRESS LINKMVS \"IMWXSET varnam varval\"     varnam = \"AUTH_STRING\"\nvarval = b64RACF     ADDRESS LINKMVS \"IMWXSET varnam varval\"     IF debug > 0 TH\nEN       SAY \"*debug* RACFauthR: set up for HTTPD_AUTHENTICATE\"/*   Display logi\nn status page --------------------------------------*/     varnam = \"CONTENT_TYP\nE\"     varval = \"text/html\"     ADDRESS LINKMVS \"IMWXSET varnam varval\"     varn\nam = \"CONTENT_ENCODING\"     varval = \"ebcdic\"     ADDRESS LINKMVS \"IMWXSET varna\nm varval\"     msg = skel_A     msg = msg || '<form id=\"loginForm\" method=\"post\"\naction=\"https://TestMVS.ITS.Hawaii.Edu' || ,                   origURL || '\">' |\n| NL     msg = msg || '<fieldset>' || NL     msg = msg || '<fieldset>' || NL\n msg = msg ||  '<legend>Message(s)</legend>' || NL     msg = msg ||  'Login succ\nessful.' || NL     msg = msg || '</fieldset><br/>' || NL     msg = msg || '<inpu\nt type=\"submit\" name=\"Continue\" value=\"Continue\"/>' || NL     msg = msg || '</fo\nrm>' || NL     msg = msg || skel_B     ADDRESS LINKMVS \"IMWXWRT msg\"     IF debu\ng > 0 THEN       SAY \"*debug* RACFauthR: Exit HTTP_OK -- NC-Pass Authentication\nSuccessful\"     EXIT 200 /* HTTP_OK */   END  /*  of \"IF '/AuthN' THEN DO\"  *//*\n-------------------------------------------------------------------*//*   If we\ngot here, then we are in one of my applications AND we    *//*   are in one of t\nhe following situations:                         *//*   1) we authenticated and\nhave a valid cookie                     *//*   2) we authenticated but our cooki\ne expired                      *//*   3) we haven't authenticated yet\n                      *//*\n             *//*   So, see if we have a valid Cookie.\n    *//*-------------------------------------------------------------------*//*\n  Retrieve the Cookie. -------------------------------------------*/ varnam = \"H\nTTP_COOKIE\" varval = LEFT(\" \",1024,\" \") ADDRESS LINKMVS \"IMWXXTR varnam varval\"\ncookie = STRIP(varval, \"B\") IF debug > 0 THEN   SAY \"*debug* RACFauthR: retrieve\nd cookie '\" || cookie || \"'\"/*   See if we have a matching cookie file. --------\n-----------------*/ IF cookie \u00ac= \"\" THEN DO     IF SUBSTR(cookie, 1, 10) = \"sess\nionID=\" THEN       cookie = SUBSTR(cookie, 11)     cookiefile = cookie || \"-cook\nie.txt\"     cookiepath = \"/u/websrv/cookies/\" || cookiefile     existsRC = \"\"\n  existsRC = exists(cookiepath)     IF debug > 0 THEN SAY \"*debug* RACFauthR: ex\nists(\" || cookiepath || \") = '\" || existsRC || \"'\"     IF existsRC \u00ac= \"\" THEN DO\n/*   Pull information from the Cookie file. -------------------------*/\nrec.0 = 0         ADDRESS SYSCALL \"readfile (cookiepath) rec.\"         IF rec.0\n= 0 THEN DO             ADDRESS SH \"rm\" cookiepath             Call SendLogin\n          IF debug > 0 THEN SAY \"*debug* RACFauthR: Exit HTTP_FORBIDDEN -- sendi\nng login\"             EXIT 403  /* HTTP_FORBIDDEN */           END/*   Is the co\nokie less than 30 minutes old? ------------------------*/         PARSE VAR rec.\n1 cookiedt cookietm b64RACF .         dtstring = DATE(\"B\") TIME(\"M\")         PAR\nSE VAR dtstring currdt currtm         cookieage = ((currdt - cookiedt) * (24 * 6\n0)) + (currtm - cookietm)         IF cookieage <= 30 THEN DO/*   Update the cook\nie. ---------------------------------------------*/             ADDRESS SH \"rm\"\ncookiepath             st.0 = 1             st.1 = DATE(\"B\") || \" \" || TIME(\"M\")\n || \" \" || b64RACF             ADDRESS SYSCALL \"writefile (cookiepath) 600 st.\"/\n*   Set up for HTTP_AUTHENTICATE. ----------------------------------*/\n   varnam = \"AUTH_TYPE\"             varval = \"Basic\"             ADDRESS LINKMVS\n \"IMWXSET varnam varval\"             varnam = \"AUTH_STRING\"             varval =\n b64RACF             ADDRESS LINKMVS \"IMWXSET varnam varval\"             IF debu\ng > 0 THEN SAY \"*debug* RACFauthR: Exit HTTP_NOACTION -- do HTTP_AUTHENTICATE\"\n           EXIT 0  /* HTTP_NOACTION */           END  /* of \"IF cookieage<=30 TH\nEN DO\" */         ELSE DO             IF debug > 0 THEN SAY \"*debug* RACFauthR:\nCookie too old. Driving Re-authentication.\"             ADDRESS SH \"rm\" cookiepa\nth             CALL SendLogin             IF debug > 0 THEN SAY \"*debug* RACFaut\nhR: Exit HTTP_FORBIDDEN -- send Login\"             EXIT 403  /* HTTP_FORBIDDEN *\n/           END  /* of \"IF cookieage<=30 THEN...ELSE DO\" */       END  /* of \"IF\n existsRC\u00ac='' THEN DO\" */     ELSE DO         IF debug > 0 THEN SAY \"*debug* RAC\nFauthR: Invalid cookie. Driving Re-Authentication.\"         CALL SendLogin\n   IF debug > 0 THEN SAY \"*debug* RACFauthR: Exit HTTP_FORBIDDEN -- send Login\"\n        EXIT 403  /* HTTP_FORBIDDEN */       END  /* of \"IF existsRC\u00ac='' THEN...\nELSE DO\" */   END  /* of \"IF cookie\u00ac='' THEN DO\" */ ELSE DO     IF debug > 0 THE\nN SAY \"*debug* RACFauthR: No cookie. Driving Re-Authentication.\"     CALL SendLo\ngin     IF debug > 0 THEN SAY \"*debug* RACFauthR: Exit HTTP_FORBIDDEN -- send Lo\ngin\"     EXIT 403  /* HTTP_FORBIDDEN */   END  /* of \"IF cookie\u00ac='' THEN...ELSE\nDO\" */ IF debug > 0 THEN SAY \"*debug* RACFauthR: Exit HTTP_NOACTION\" EXIT 0  /*\nHTTP_NOACTION  *//**************************************************************\n*******//*                                                                   *//\n*   ParseData                                                       *//*   -----\n--------------------------------------------------------   *//*   Parse the inpu\nt data.                                           *//*\n                                         *//************************************\n*********************************/ ParseData: PROCEDURE EXPOSE (exposeParse)/*--\n-----------------------------------------------------------------*//*   Scan the\n input string and extract variables/values.             *//*--------------------\n-----------------------------------------------*/   stemvar.0 = 0   stembal.0 =\n0   invar = 0   inval = 0   concatdat = 0   n = 0   i = 1   pau = 0   inarea = \"\n&\" || inarea   DO WHILE pau = 0     byte = SUBSTR(inarea, i, 1)     SELECT\n WHEN byte = \"+\" THEN DO           dat = \" \"           concatdat = 1         END\n  /*  of \"WHEN byte=+ THEN DO\"  */       WHEN byte = \"&\" THEN DO           invar\n = 1           inval = 0           n = n + 1           stemvar.n = \"\"         EN\nD  /*  of \"WHEN byte=& THEN DO\"  */       WHEN byte = \"%\" THEN DO           dat\n= X2C(SUBSTR(inarea,i+1,2))           dat = TRANSLATE(dat, ebc, tbc)           i\n = i + 2           concatdat = 1         END  /*  of \"WHEN byte=% THEN DO\"  */\n     WHEN byte = \"=\" THEN DO           invar = 0           inval = 1           s\ntemval.n = \"\"         END  /*  of \"WHEN byte== THEN DO\"  */       OTHERWISE DO\n         dat = byte           concatdat = 1         END  /*  of \"OTHERWISE DO\"\n*/     END  /*  of \"SELECT\"  */     IF concatdat = 1 THEN DO         IF invar =\n1 THEN           stemvar.n = stemvar.n || dat         ELSE           stemval.n =\n stemval.n || dat         concatdat = 0         dat = \"\"       END  /*  of \"IF c\noncatdat=1 THEN DO\"  */     i = i + 1     IF i > LENGTH(inarea) THEN pau = 1   E\nND  /*  of \"DO WHILE pau=0\"  */   stemvar.0 = n   stemval.0 = n RETURN/*********\n************************************************************//*\n                                                  *//*   NewCookie\n                                         *//*   --------------------------------\n-----------------------------   *//*   Create a new session cookie\n                       *//*\n              *//***************************************************************\n******/ NewCookie: PROCEDURE/*--------------------------------------------------\n-----------------*//*   Input should be Base64-encoded RACF ID and Password.\n        *//*-------------------------------------------------------------------*\n/   PARSE ARG b64RACF/*---------------------------------------------------------\n----------*//*   Generate a random number using ICSF and make sure it's new.\n *//*-------------------------------------------------------------------*/   loo\np = 0   GotOne = 0   DO WHILE GotOne = 0     loop = loop + 1     IF loop > 50 TH\nEN GotOne = 1     /* Generate a BIG random number ------------------------------\n--*/     p_ReturnC = D2C(0,4)     p_ReasonCd = D2C(0,4)     p_Exit_Data = \"\"\n p_Exit_Data_Len = D2C(LENGTH(p_Exit_Data),4)     p_Form = 'RANDOM  '       /**\nRANDOM, ODD, EVEN **/     p_Random_Nbr   = COPIES(' ',8)     ADDRESS LINKPGM 'CS\nFRNG p_ReturnC p_ReasonCd' ,                    'p_Exit_Data_Len p_Exit_Data' ,\n                   'p_Form' ,                    'p_Random_Nbr'     rc = C2D(p_R\neturnC,4)     reas = C2D(p_ReasonCd,4)     cookie = C2X(p_Random_Nbr)     p_Retu\nrnC = D2C(0,4)     p_ReasonCd = D2C(0,4)     p_Exit_Data = \"\"     p_Exit_Data_Le\nn = D2C(LENGTH(p_Exit_Data),4)     p_Form = 'RANDOM  '       /** RANDOM, ODD, EV\nEN **/     p_Random_Nbr   = COPIES(' ',8)     ADDRESS LINKPGM 'CSFRNG p_ReturnC\np_ReasonCd' ,                    'p_Exit_Data_Len p_Exit_Data' ,\n    'p_Form' ,                    'p_Random_Nbr'     rc = C2D(p_ReturnC,4)     r\neas = C2D(p_ReasonCd,4)     cookie = cookie || C2X(p_Random_Nbr)     cookiefile\n= cookie || \"-cookie.txt\"     /* See if it's in use ----------------------------\n--------------*/     cookiepath = \"/u/websrv/cookies/\"cookiefile     rc = \"\"\n rc = exists(cookiepath)     IF rc = \"\" THEN       GotOne = 1   END  /*  of \"DO\nWHILE GotOne=0\"  *//*-----------------------------------------------------------\n--------*//*   Create the cookie file.                                         *\n//*-------------------------------------------------------------------*/   st.0\n= 1   st.1 = DATE(\"B\") || \" \" || ,         TIME(\"M\") || \" \" || ,         b64RACF\n   ADDRESS SYSCALL \"writefile (cookiepath) 600 st.\"   RETURN cookie/************\n*********************************************************//*\n                                               *//*   SendLogin\n                                      *//*   -----------------------------------\n--------------------------   *//*   Send the initial login page\n                    *//*\n           *//******************************************************************\n***/ SendLogin:  PROCEDURE EXPOSE (exposeSendLogin)     NL = X2C('15')/*   If we\n have a cookie, purge it. ---------------------------------*/     varnam = \"HTTP\n_COOKIE\"     varval = LEFT(\" \",4096,\" \")     ADDRESS LINKMVS \"IMWXXTR varnam var\nval\"     cookie = STRIP(varval, \"B\")     IF cookie \u00ac= \"\" THEN DO         IF SUBS\nTR(cookie, 1, 10) = \"sessionID=\" THEN           cookie = SUBSTR(cookie, 11)\n    cookiefile = cookie || \"-cookie.txt\"         cookiepath = \"/u/websrv/cookies\n/\" || cookiefile         rc = \"\"         rc = exists(cookiepath)         IF rc \u00ac\n= \"\" THEN DO             ADDRESS SH \"rm\" cookiepath           END  /* of \"IF rc\u00ac\n='' THEN DO\" */       END  /* of \"IF cookie\u00ac='' THEN DO\" *//*   Send the initial\n login page. -----------------------------------*/     msg = skel_A     msg = ms\ng || '<form id=\"loginForm\" method=\"post\" action=\"https://TestMVS.ITS.Hawaii.Edu/\nAuthN' || ,                  origURL || '\">' || NL     msg = msg || '<fieldset>'\n || NL     msg = msg ||  '<legend>RACF Login Information</legend>' || NL     msg\n = msg ||  '<label for=\"RACFID\">RACF ID:</label>' || NL     msg = msg ||  '<inpu\nt id=\"RACFID\" name=\"RACFID\" type=\"text\" size=\"10\"/><br/>' || NL     msg = msg ||\n  '<label for=\"RACFpwd\">RACF Password:</label>' || NL     msg = msg ||  '<input\nid=\"RACFpwd\" name=\"RACFpwd\" type=\"password\" size=\"10\"/><br/>' || NL     msg = ms\ng || '</fieldset>' || NL     msg = msg || '<fieldset>' || NL     msg = msg ||  '\n<legend>Message(s)</legend>' || NL     msg = msg || '&nbsp;' || NL     msg = msg\n || '</fieldset><br/>' || NL     msg = msg || '<input id=\"login\" type=\"submit\" n\name=\"loginButton\" value=\"login\"/>'     msg = msg || '</form>' || NL     msg = ms\ng || skel_B     varnam = \"CONTENT_TYPE\"     varval = \"text/html\"     ADDRESS LIN\nKMVS \"IMWXSET varnam varval\"     varnam = \"CONTENT_ENCODING\"     varval = \"ebcdi\nc\"     ADDRESS LINKMVS \"IMWXSET varnam varval\"     ADDRESS LINKMVS \"IMWXWRT msg\"\n   RETURN\n"}}, "SCRIPTOPTIONS": {"filename": "./CBT765/CBT.V500.FILE765.PDS/RACFAUTH.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT765/CBT.V500.FILE765.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}