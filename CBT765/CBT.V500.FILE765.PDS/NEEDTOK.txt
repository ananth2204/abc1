*Process Margins(2,72,1),Nonumber,Optimize(TIME),A,X,Ag,System(MVS);
 /********************************************************************/
 /*                                                                  */
 /*   NeedTok                                                        */
 /*   ------------------------------------------------------------   */
 /*   Check a Security Token                                         */
 /*                                                                  */
 /*   ------------------------------------------------------------   */
 /*   Usage:                                                         */
 /*     rc = NeedTok(RACFid)                                         */
 /*                                                                  */
 /*     Where                                                        */
 /*       RACFid is a valid RACF ID.                                 */
 /*       If the RACF user is required to use a token to login       */
 /*       rc = "OK Y".  If the RACF user is not required to use      */
 /*       a token to login, rc = "OK N".  If an internal error       */
 /*       occured, rc will start with "FAIL".                        */
 /*                                                                  */
 /*   ------------------------------------------------------------   */
 /*                                                                  */
 /*   Modification History:                                          */
 /*     30Jul2007 SYO   Initial version                              */
 /*                                                                  */
 /********************************************************************/

1NeedTok: Procedure
          (Rsvd1, Rsvd2, Rsvd3, Rsvd4, Args, EvalBlk@)
          Options(Main,Reentrant,NoExecOps) Reorder;
   Declare
     Rsvd1                   Pointer,
     Rsvd2                   Pointer,
     Rsvd3                   Pointer,
     Rsvd4                   Pointer,
     Args                    Fixed Binary(31,0),
     EvalBlk@                Pointer,

     ArgUserID               Character(255) Varying Aligned Initial(''),

     Debug                   Bit(1) Aligned Initial(False),
     HiVal                   Pointer Aligned Initial(SysNull),
     I                       Fixed Binary(31,0) Initial(0),
     ParmOffset              Fixed Binary(31,0) Initial(0),
     ParmString              Character(1024) Aligned Initial(' '),
     Pau                     Bit(1) Aligned Initial(False),
     RC                      Fixed Binary(31,0) Initial(0),
     RClen                   Fixed Binary(31,0) Initial(0),
     RCodeData               Character(255) Aligned Initial(' '),
     RCodeLen                Fixed Binary(31,0) Initial(0),
     VarName                 Character(255) Aligned Initial(' '),
     VarValue                Character(255) Aligned Initial(' '),
     WorkArea                Character(4096) Aligned Initial(' '),
     WorkString              Character(255) Varying Aligned Initial(''),

     InitFunc                Character(8) Aligned Initial(' '),
     InitParmModName         Character(8) Aligned Initial(' '),
     InitParmListAddr        Pointer Aligned Initial(SysNull),
     InitUserFldAddr         Pointer Aligned Initial(SysNull),
     InitRsvdPtr             Pointer Aligned Initial(SysNull),
     InitEnvBlkAddr          Pointer Aligned Initial(SysNull),
     InitRsn                 Fixed Binary(31,0) Initial(0),
     InitStrgWkAddr          Pointer Aligned Initial(SysNull),
     InitRC                  Fixed Binary(31,0) Initial(0),
     InitECTaddr             Pointer Aligned Initial(SysNull),

     01 EvalBlk              Based(EvalBlk@),
       02 EvPad1             Fixed Binary(31,0) Unaligned,
       02 EvSize             Fixed Binary(31,0) Unaligned,
       02 EvLen              Fixed Binary(31,0) Unaligned,
       02 EvPad2             Fixed Binary(31,0) Unaligned,
       02 EvData             Character(255),

     01 ShVBlock             Unaligned,
       02 ShVNext            Fixed Binary(31,0) Initial(0),
       02 ShVUser            Fixed Binary(31,0) Initial(0),
       02 ShVCode            Character(1),
       02 ShVRet             Character(1),
       02 Filler             Character(2),
       02 ShVBufL            Fixed Binary(31,0),
       02 ShVNamA            Pointer,
       02 ShVNamL            Fixed Binary(31,0),
       02 ShVValA            Pointer,
       02 ShVValL            Fixed Binary(31,0),

     Addr                    Builtin,
     Length                  Builtin,
     Null                    Builtin,
     PLIRetC                 Builtin,
     PLIRetV                 Builtin,
     Repeat                  Builtin,
     Substr                  Builtin,
     SysNull                 Builtin,
     Translate               Builtin,
     Trim                    Builtin,
     Unspec                  Builtin,
     UpperCase               Builtin,
     Verify                  Builtin,

     IRXEXC                  Entry
                             External Options(Assembler,Inter,Retcode),

     IRXINIT                 Entry
                             External Options(Assembler,Inter,Retcode),

     SEXMITOS                Entry
                             External Options(Assembler,Inter,Retcode)
   ;

   Declare
     Sysprint                File Stream Print Output
   ;

   Declare
     Digits                  Character(10) Static Aligned
                             Initial('0123456789'),
     False                   Bit(1) Static Aligned Initial('0'B),
     True                    Bit(1) Static Aligned Initial('1'B)
   ;

 /*===================================================================*/
 /*   Initialization.                                                 */
 /*===================================================================*/
 Unspec(HiVal) = 'FFFFFFFF'BX;

 RC = 0;
 RClen = (EvalBlk.EvSize * 8) - 16;
 RCodeData = 'FAIL 9999';
 RCodeLen = 9;

 /* Process the arguments --------------------------------------------*/
 RC = ProcessArgs(Args);

 /* Load address of IRXxxxxx entry points ----------------------------*/
 If (RC = 0) Then
   Do;
     Fetch IRXINIT;
     Fetch IRXEXC;

     InitFunc = 'FINDENVB';
     InitParmModName = '        ';
     InitParmListAddr = SysNull;
     InitUserFldAddr = SysNull;
     InitRsvdPtr = SysNull;
     InitEnvBlkAddr = SysNull;
     InitRsn = 0;
     InitStrgWkAddr = SysNull;
     InitRC = 0;
     InitECTaddr = SysNull;
     Call IRXINIT(InitFunc, InitParmModName, InitParmListAddr,
          InitUserFldAddr, InitRsvdPtr, InitEnvBlkAddr, InitRsn,
          InitStrgWkAddr, InitRC, InitECTaddr);

     If (InitRsn Â¬= 0) Then Do;
         RCodeData = ' ';
         Put String(RCodeData) Edit
           ('FAIL IRXINIT RC=',InitRC,' RSN=',InitRsn)
           (A,P'99999',A,P'99999');
         RCodeLen = 32;
         RC = 16;
         GoTo Quit;
       End;
   End  /*  of "If(RC=0)Then Do"  */;

 /*===================================================================*/
 /*   Process the request.                                            */
 /*===================================================================*/
 /* Got an ID? -------------------------------------------------------*/
   If (ArgUserID = '') Then Do;
       /*---------- 1   5   10   15   20   25 ----------*/
       RCodeData = 'FAIL Null RACF ID is invalid';
       RCodeLen = 28;
       RC = 16;
       GoTo Quit;
     End /* of "If(token-null)Then Do"  */;

 /* See if the user is required to have a token ----------------------*/
   WorkString = 'FUNCTION=REQUEST' ||
                ',USERID=' || ArgUserID ||
                ',XMSID=XMS1,APPL=NEEDTOK,TERMID=' ||
                ArgUserID || ',RETAREA=';

   ParmOffset = Length(WorkString);

   ParmString = WorkString || Repeat(' ',63) || ';';

   Call SEXMITOS(ParmString, WorkArea);
   RC = PliRetV();

   Select (Substr(ParmString,ParmOffset+1,4));
     When ('3599') Do;   /* Token required ---------------------------*/
         /*---------- 1   5   10   15   20   25   30   35 ------------*/
         RCodeData = 'OK Y CKSE' || Substr(ParmString,ParmOffset+1,4);
         RCodeLen = 13;
         RC = 16;
         GoTo Quit;
       End;
     When ('3600') Do;   /* Token & Password required ----------------*/
         /*---------- 1   5   10   15   20   25   30   35 ------------*/
         RCodeData = 'OK Y CKSE' || Substr(ParmString,ParmOffset+1,4);
         RCodeLen = 13;
         RC = 16;
         GoTo Quit;
       End;
     Otherwise Do;
         /*---------- 1   5   10   15   20   25   30   35 ------------*/
         RCodeData = 'OK N CKSE' || Substr(ParmString,ParmOffset+1,4);
         RCodeLen = 13;
         RC = 16;
         GoTo Quit;
       End;
   End  /*  of "Select(rc)"  */;

 /*===================================================================*/
 /*   Clean up and quit.                                              */
 /*===================================================================*/
 /* Set return code in Evaluation Block ------------------------------*/
 Quit:
   If (RClen > RCodeLen) Then Do;
       EvalBlk.EvData = Substr(RCodeData, 1, RCodeLen);
       EvalBlk.EvLen = RCodeLen;
     End  /*  of "If(RClen>RCodeLen)Then Do"  */;
   Else Do;
       EvalBlk.EvData = '-1';
       EvalBlk.EvLen = 2;
     End;

   /* Set R15 --------------------------------------------------------*/
   Call PliRetC(0);

   /* Quit -----------------------------------------------------------*/
   Return;

1/*********************************************************************/
 /*                                                                   */
 /*   ProcessArgs                                                     */
 /*   -------------------------------------------------------------   */
 /*   Process the input arguments.                                    */
 /*                                                                   */
 /*********************************************************************/

   ProcessArgs:  Procedure(Args) Options(Reentrant) Reorder
                 Returns(Fixed Binary(31,0));
     Declare
       Args                  Fixed Binary(31,0),

       Arg#                  Fixed Binary(31,0) Initial(0),
       I                     Fixed Binary(31,0) Initial(0),
       Pau                   Bit(1) Aligned Initial(False),
       WorkStr               Character(255) Varying Aligned Initial(''),

       ArgStrPtr             Pointer Aligned Initial(Null),
       01 ArgStr(255)        Based(ArgStrPtr),
         02 Ptr              Pointer Unaligned,
         02 Len              Fixed Binary(31,0) Unaligned,
       ArgData               Character(255) Based,

       RC                    Fixed Binary(31,0) Initial(0)
     ;

     ArgStrPtr = Addr(Args);

     Pau = False;
     Arg# = 0;
     I = 0;
     Do While(Â¬ Pau);
       I = I + 1;

       If (ArgStr(I).Ptr = HiVal) Then
         Pau = True;
       Else Do;
           WorkStr = Substr(ArgStr(I).Ptr->ArgData,1,ArgStr(I).Len);

           Arg# = Arg# + 1;
           Select (Arg#);
             When (1)  Do;
                 If (Substr(WorkStr, 1, 1) = '*') Then Do;
                     Debug = True;
                     WorkStr = Substr(WorkStr, 2);
                   End;
                 ArgUserID = UpperCase(WorkStr);
               End  /*  of "When(1) Do"  */;
             Otherwise Do;
                 /*---------- 1   5   10   15   20   25 --------------*/
                 RCodeData = 'FAIL too many arguments';
                 RCodeLen = 23;
                 RC = 16;
                 Pau = True;
               End  /*  of "Otherwise Do"  */;
           End  /*  of "Select(Arg#)"  */;
         End  /*  of "If(not-end-of-args)Then...Else Do"  */;
     End  /*  of "Do While(Â¬Pau)"  */;

     Return(RC);
   End  /*  of procedure "ProcessArgs"  */;


 End  /*  of Procedure "NeedTok" */;
