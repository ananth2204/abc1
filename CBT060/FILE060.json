{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011143000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 764218, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE060.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE060.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\r\\x05'", "DS1TRBAL": "b'\\x93\\xd2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00i\\x00\\x05\\x00j\\x00\\x03\\x00\\x0e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06&_\\x01\\x06&_\\x12\\x16\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-09-22T00:00:00", "modifydate": "2006-09-22T12:16:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-472"}, "text": "REGULAR CBT TAPE - VERSION 472    FILE:  060\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT472.FILE060\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 39 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,583 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/22/06    12:16:15    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE060"}, "text": "   DATECONV - The parrameter mapping macro for date converion routine\n           DATEMVS.\n\n   DATEMVS - A date converion routine used by SSXTEND and SSR011PR.\n\n   KEYS/PARSE - Macros used in original version. When a problem developed\n           they were removed instead of being fixed. Not needed now.\n\n   REG/RETURN72 - Linkage convention macros used in DATEMVS.\n\n   SSR*  - Software Status Report members see member README for\n           instructions.\n\n   SSJES$05/SSJES$15 - A simple easy way to implement XEROX 8790/9790\n           printers using JCL FORMS to build DJDE statements. These\n           exits work under SP2.1.5 JSE2. No JSE2 or MVS mods are used,\n           only these 2 exits.\n\n   SSXTEND - A pds utility that permits the addition of up to three\n           card images. It was written to assist with the creation\n           of small RACF protected JCL libraries from an installation\n           wide NON-RACF job library.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE060": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06&_\\x01\\x06&_\\x12\\x16\\x00\\x15\\x00\\x15\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-09-22T00:00:00", "modifydate": "2006-09-22T12:16:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "CBT-472"}, "text": "//***FILE 060 is the Software Status Report ISPF application from   *   FILE 060\n//*           Mr. Charles Wells of the Georgia Department of Labor. *   FILE 060\n//*           Software Status Report is an ISPF application         *   FILE 060\n//*           consisting of 3 load modules, 2 CLISTs, 5 ISPF        *   FILE 060\n//*           panels, 5 ISPF tutorial panels, and 4 ISPF message    *   FILE 060\n//*           members.  It allows recording of software products    *   FILE 060\n//*           installed on your system and maintenance history for  *   FILE 060\n//*           each product.  Products can be displayed by product   *   FILE 060\n//*           name, acronym, vendor, category, FMID or PTF/MOD.  A  *   FILE 060\n//*           formatted hardcopy report can be produced, with       *   FILE 060\n//*           products organized on the report according to         *   FILE 060\n//*           customizable combinations of vendor and category.     *   FILE 060\n//*           This file is in IEBUPDTE SYSIN format and contains    *   FILE 060\n//*           all the source and ISPF panels                        *   FILE 060\n//*           This file goes with Files 061 062 063 064             *   FILE 060\n//*                                                                 *   FILE 060\n//*           Updated with a disassembly of the PRSTRNG module      *   FILE 060\n//*           that was linked with module SSR010PR, and a copy      *   FILE 060\n//*           of the REASMLNK proc needed to reassemble and         *   FILE 060\n//*           relinkedit.                                           *   FILE 060\n//*                                                                 *   FILE 060\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DATECONV": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00G\\x00G\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "FILE060"}, "text": "         MACRO\n         DATECONV &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NDSECT1\n         AIF   ('&DSECT' EQ 'YES').DSECT1\n         MNOTE 4,'INVALID OPERAND - DSECT=&DSECT ASSUMED YES'\n.DSECT1  ANOP\nDATECONV DSECT\n         DS    0F\n         AGO   .PL\n.NDSECT1 ANOP\nDATECONV DS    0F\n.PL      ANOP\n*************************************************************\nOPTION   DS    X         OPTION                             *\n*        0 - VALIDATE A DATE\n*        1 - CONVERT GREGORIAN DATE TO JULIAN DATE\n*        2 - CONVERT JULIAN DATE TO GREGORIAN DATE\n*        3 - PASSED A DATE AND A NUMBER FROM 0-365 RETURN THE\n*            CORRESPONDING DATE (PROCEEDING FOWARD).\n*        4 - PASSED A DATE AND A NUMBER FROM 0-365 RETURN THE\n*            CORRESPONDING DATE (PROCEEDING BACKWARD).\n*        5 - PASSED A DATE AND A DAY OF THE WEEK RETURN THE DATE\n*            OF SPECIFIED DAY (PROCEEDING FOWARD).\n*        6 - PASSED A DATE AND A DAY OF THE WEEK RETURN\n*            (YOU GUESSED IT!) THE DATE OF SPECIFIED DAY (BACKWARD)\n*        7 - PASSED TWO DATES RETURN THE NUMBER OF DAYS DIFFERENT.\n*         NOTE: ALL DATES MAY BE ENTERED IN EITHER FORMAT BUT THIS\n*               PROGRAM ASSUMES GREGORIAN UNLESS A SPACE (X'40') IS\n*               IN THE SIXTH POSITION OF THE DATE FIELD.\nMONTH1G  DS    CL2       *                                  *\nDAY1G    DS    CL2       * GREG DATE 1                      *\nYEAR1G   DS    CL2       *                                  *\n         ORG   MONTH1G                                 I    *\nYEAR1J   DS    CL2       *                             N    *\nDAY1J    DS    CL3       * JULIAN DATE 1               P    *\nJULF1    DS    X         *                             U    *\nMONTH2G  DS    CL2        *                            T    *\nDAY2G    DS    CL2        * GREG DATE 2                     *\nYEAR2G   DS    CL2        *                            D    *\n         ORG   MONTH2G                                 A    *\nYEAR2J   DS    CL2        *                            T    *\nDAY2J    DS    CL3        * JULIAN DATE 2              A    *\nJULF2    DS    X          *                                 *\nDAYSTOSK DS    CL3       NO. DAYS TO SKIP                   *\nDAYTO    DS    CL9       DAY TO SKIP TO                     *\n*************************************************************\nMNTHOUTG DS    CL2       GREG MONTH                    O    *\nDAYOUTG  DS    CL2       GREG DAY                      U    *\nYEAROUTG DS    CL2       GREG YEAR                     T    *\nYEAROUTJ DS    CL2       JULIAN YEAR                   P    *\nDAYOUTJ  DS    CL3       JULIAN DAY                    U    *\nQUARTER  DS    C         QUARTER (1,2,3 OR 4)          T    *\nMNTHNAME DS    CL9       MONTH (JANUARY ETC.)               *\nDAYNAME  DS    CL9       DAY (MONDAY ETC.)             D    *\nLEAPFLAG DS    C         \"Y\"=LEAP, \"N\"=NOT             A    *\nDAYDIFF  DS    CL3                                     T    *\nWEEKNOY  DS    CL2                                     A    *\nWEEKNOQ  DS    CL2                                          *\nERRCODE  DS    C                                            *\n*        0 - NO ERRORS\n*        1 - INVALID OPTION\n*        2 - BAD DAY NUMBER\n*        3 - BAD MONTH NUMBER\n*        4 - BAD YEAR NUMBER\n*        5 - IMPROPER DATE FORMAT\n*        6 - DAYS TO SKIP INVALID\n*        7 - INVALID DAY OF WEEK\n*        8 - DIFFERENCE GREATER THAN 365\n*        9 - INVALID DATE FORMAT\n*************************************************************\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DATEMVS": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x02X\\x02X\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 600, "newlines": 600, "modlines": 0, "user": "FILE060"}, "text": "         TITLE 'DATE CONVERSION ROUTINE'\n*        THIS PROGRAM IS A UTILITY DATE CONVERSION ROUTINE. IT CAN\n*        BE LINKED TO BY COBOL PROGRAMS. THE CALLING PROGRAM MUST\n*        DEFINE A 66 BYTE STORAGE AREA FOR PARAMETER PASSING. THE\n*        FUNCTION CODE (ZONED 0 (X'F0') THRU 7) IS PLACED IN THE FIRST\n*        BYTE OF STORAGE PASSED. THE FUNCTIONS ARE:\n*        0 - VALIDATE A DATE\n*        1 - CONVERT GREGORIAN DATE TO JULIAN DATE\n*        2 - CONVERT JULIAN DATE TO GREGORIAN DATE\n*        3 - PASSED A DATE AND A NUMBER FROM 0-999 RETURN THE\n*            CORRESPONDING DATE (PROCEEDING FOWARD).\n*        4 - PASSED A DATE AND A NUMBER FROM 0-999 RETURN THE\n*            CORRESPONDING DATE (PROCEEDING BACKWARD).\n*        5 - PASSED A DATE AND A DAY OF THE WEEK RETURN THE DATE\n*            OF SPECIFIED DAY (PROCEEDING FOWARD).\n*        6 - PASSED A DATE AND A DAY OF THE WEEK RETURN\n*            (YOU GUESSED IT!) THE DATE OF SPECIFIED DAY (BACKWARD)\n*        7 - PASSED TWO DATES RETURN THE NUMBER OF DAYS DIFFERENT.\n*            THE YEAR VALUES OF THE DATES MAY NOT DIFFER BY MORE\n*            THAN ONE.\n*         NOTE: ALL DATES MAY BE ENTERED IN EITHER FORMAT BUT THIS\n*               PROGRAM ASSUMES GREGORIAN UNLESS A SPACE (X'40') IS\n*               IN THE SIXTH POSITION OF THE DATE FIELD.\n*\n*        REVISED 9/14/89 TO ALLOW NUMBER OF DAYS ADDED OR SUBTRACTED\n*             TO BE 999 INSTEAD OF 365.         CDW\n*\n         EJECT\nIODATA   DSECT\n*************************************************************\nOPTION   DS    X         OPTION                             *\nMONTH1G  DS    CL2       *                                  *\nDAY1G    DS    CL2       * GREG DATE 1                      *\nYEAR1G   DS    CL2       *                                  *\n         ORG   MONTH1G                                 I    *\nYEAR1J   DS    CL2       *                             N    *\nDAY1J    DS    CL3       * JULIAN DATE 1               P    *\nJULF1    DS    X         *                             U    *\nMONTH2G  DS    CL2        *                            T    *\nDAY2G    DS    CL2        * GREG DATE 2                     *\nYEAR2G   DS    CL2        *                            D    *\n         ORG   MONTH2G                                 A    *\nYEAR2J   DS    CL2        *                            T    *\nDAY2J    DS    CL3        * JULIAN DATE 2              A    *\nJULF2    DS    X          *                                 *\nDAYSTOSK DS    CL3       NO. DAYS TO SKIP                   *\nDAYTO    DS    CL9       DAY TO SKIP TO                     *\n*************************************************************\nMNTHOUTG DS    CL2       GREG MONTH                    O    *\nDAYOUTG  DS    CL2       GREG DAY                      U    *\nYEAROUTG DS    CL2       GREG YEAR                     T    *\nYEAROUTJ DS    CL2       JULIAN YEAR                   P    *\nDAYOUTJ  DS    CL3       JULIAN DAY                    U    *\nQUARTER  DS    C         QUARTER (1,2,3 OR 4)          T    *\nMNTHNAME DS    CL9       MONTH (JANUARY ETC.)               *\nDAYNAME  DS    CL9       DAY (MONDAY ETC.)             D    *\nLEAPFLAG DS    C         \"Y\"=LEAP, \"N\"=NOT             A    *\nDAYDIFF  DS    CL3                                     T    *\nWEEKNOY  DS    CL2                                     A    *\nWEEKNOQ  DS    CL2                                          *\nERRCODE  DS    C                                            *\n*************************************************************\n         SPACE 3\nWORKSECT DSECT\n         DS    CL8\nGTOBRTN  DS    F\nXDAYRTN  DS    F\nDECIMAL  DS    0D\n         DS    XL6\nDECWORD  DS    PL2\nZONEAREA DS    0CL3\nZONEBYTE DS    C\nZONEHALF DS    CL2\nFLAG     DS    X\nBINWORD  DS    0F\n         DS    XL2\nLASTPRTB DS    XL2\nBINMNTH  DS    H                      BINARY MONTH\nBINYEAR  DS    H                      BINARY YEAR\nBINDAYG  DS    H                      BINARY DAYS THIS MONTH\nBINDAYJ  DS    H                      BINARY DAYS THIS YEAR\nBINMNTH1 DS    H\nBINYEAR1 DS    H\nBINDAYG1 DS    H\nBINDAYJ1 DS    H\nPACKIT   DS    0D\n         DS    XL6\nLAST2    DS    PL2\nNOYEARS  DS    H                      NO. OF ELAPSED YEARS\nHIGHJUL  DS    H                      NO. DAYS THIS YEAR\nHIGHJUL1 DS    H\nNODAYS   DS    H                      NO. DAYS TO SKIP (BINARY)\nMONTHS   DS    9X\nMONTHS2  DS    X\nFEB      DS    X\n         DS    10X\n         EJECT\nDATEMVS  REG   DATE-CONVERT-MVS\n         L     R8,0(R1)               SAVE ADDRESS OF PARAMETERS\n         USING IODATA,R8\n         GETMAIN R,LV=96              GET A WORK AREA\n         LR    R9,R1                  ADDRESS OF WORK AREA\n         USING WORKSECT,R9\n         XC    WORKSECT(96),WORKSECT  CLEAR WORK AREA\nSTARTIT  MVC   MONTHS(21),MNTHNOS     MOVE THE MONTH NO TABLE\n         MVC   HIGHJUL,=H'365'\n         LA    R4,MONTH1G             GET ADDR OF INPUT DATE\n         BAL   R1,VALNUMER            VALIDATE FIRST INPUT DATE\n         IC    R4,OPTION              GET THE OPTION\n         N     R4,LOW4                MAKE IT LOOK BINARY\n         CH    R4,=H'7'               OPTION TOO HIGH?\n         BH    BADOPTON               YES, BAD OPTION\n         MH    R4,=H'4'               CALCULATE BRANCH ADDR\n         A     R4,BRANCHES            *\n         BR    R4                     G0!\nBRANCHES DC    A(BRVAL)\nBRVAL    B     VALIDATE               OPTION=0,\n         B     GTOJ                   1, GREG TO JULIAN\n         B     JTOG                   2, JULIAN TO GREG\n         B     XDAYSFRM               3, X DAYS FROM\n         B     XDAYSAGO               4, X DAYS AGO\n         B     NEXTDAY                5, NEXT SPECIFIED DAY OF WEEK\n         B     LASTDAY                6, LAST SPECIFIED DAY OF WEEK\n         B     DIFFEREN               7, FIND THE DIFFERENCE\n*\n*                            PROCESS OPTION 0\nVALIDATE EQU   *\n         BAL   R1,GETBINS             THIS WILL VALIDATE\n         BAL   R3,JULBTOZ             FORMAT JULIAN DATE FOR OUTPUT\n         BAL   R3,GREGBTOZ              \"     GREG   \"    \"    \"\n         B     ENDINFO\n*\n*                            PROCESS OPTION 1\nGTOJ     EQU   *\n         TM    FLAG,X'02'             GOT JULIAN INPUT?\n         BO    WRNFRMAT               YES,ERROR\n         BAL   R10,GREGZTOB            ZONED GREG TO BIN GREG\n         BAL   R3,BINGTOJ             BIN GREG TO BIN JUL\n         BAL   R3,JULBTOZ             BIN JUL TO ZONED JUL\n         B     ENDINFO\n*\n*                            PROCESS OPTION 2\nJTOG     EQU   *\n         TM    FLAG,X'02'             GOT JULIAN INPUT?\n         BZ    WRNFRMAT               NO, ERRR\n         BAL   R10,JULZTOB            ZONED JUL TO BIN JUL\n         BAL   R3,BINJTOG             BIN JUL TO BIN GREG\n         BAL   R3,GREGBTOZ            BIN GREG TO ZONED GREG\n         B     ENDINFO\n*\n*                            PROCESS OPTION 3\nXDAYSFRM EQU   *\n         BAL   R10,XDAYBGN            CHANGE Z TO B + GET NO. DAYS\n         LH    R4,BINDAYJ             GET TODAYS DAY NO.\n         AH    R4,NODAYS              ADD DAYS TO SKIP\nFNDDAYF  EQU   *\n         CH    R4,HIGHJUL             ARE WE INTO NEXT YEAR?\n         BNH   NOTOVER                NO, WERE O.K.\n         SH    R4,HIGHJUL             YES, SUB OFF DAYS THIS YEAR\n         STH   R4,BINDAYJ             SAVE DAY NO. OF NEXT YEAR\n         LH    R4,BINYEAR             GET YEAR (BINARY)\n         LA    R4,1(,R4)              BUMP IT\n         STH   R4,BINYEAR             SAVE IT\n         BAL   R3,ELAPYEAR            SQUARE AWAY YEAR DATA\n         LH    R4,BINDAYJ             GET TODAYS DAY NO. BACK\n         B     FNDDAYF                SEE IF YEAR IS CORRECT YET\nNOTOVER  EQU   *\nNOTUNDER EQU   *\n         STH   R4,BINDAYJ             SAVE DAY NO.\n         BAL   R3,BINJTOG             BIN JUL TO BIN GREG\n         BAL   R3,GREGBTOZ            BIN GREG TO ZONED GREG\n         BAL   R3,JULBTOZ             BIN JUL TO ZONED JUL\n         B     ENDINFO\n*\n*                            PROCESS OPTION 4\nXDAYSAGO EQU   *\n         BAL   R10,XDAYBGN            CHANGE Z TO B + GET NO. DAYS\n         LH    R4,BINDAYJ             GET TODAYS DAY NO\n         SH    R4,NODAYS              SUB OFF DAYS TO SKIP\nFNDDAYB  EQU   *\n         BP    NOTUNDER               BRANCH IF STILL POSITIVE\n         LH    R5,BINYEAR             GET YEAR\n         SH    R5,=H'1'               SUB ONE\n         STH   R5,BINYEAR             SAVE NEW YEAR\n         BAL   R3,ELAPYEAR            GET SCOOP FOR LAST YEAR\n         AH    R4,HIGHJUL             ADD DAYS LAST YEAR\n*                                     IF R4 IS NEGATIVE YEAR STILL BAD\n         B     FNDDAYB                CHECK FOR CORRECT YEAR\nXDAYBGN  EQU   *\n         ST    R10,XDAYRTN            SAVE EXIT\n         BAL   R1,GETBINS             CHANGE THE DATE TO BINARY\n         LA    R4,DAYSTOSK            ADDR OF INPUT (NO DAYS TO SKIP)\n         TM    0(R4),X'F0'            V\n         BNO   NODAYINV                A\n         TM    1(R4),X'F0'              L\n         BNO   NODAYINV                  I\n         TM    2(R4),X'F0'                D\n         BNO   NODAYINV                    ATE\n         MVC   ZONEAREA,DAYSTOSK      MOVE NO DAYS TO SKIP\n         BAL   R3,ZONETOBN            CHANGE ZONED DAYSTOSK TO BIN\n         MVC   NODAYS,LASTPRTB        SAVE\n         L     R10,XDAYRTN\n         BR    R10\nGETBINS  EQU   *\n         TM    FLAG,X'02'             GOT A JULIAN DATE?\n         BO    CHNGJUL                YES, CHANGE JUL TO BIN\n         BAL   R10,GREGZTOB           ZONED GREG TO BIN GREG\n         BAL   R3,BINGTOJ             BIN GREG TO BIN JUL\n         BR     R1\nCHNGJUL  EQU   *\n         BAL   R10,JULZTOB            ZONED JUL TO BIN JUL\n         BAL   R3,BINJTOG             BIN JUL TO BIN GREG\n         BR    R1\n*\n*                            PROCESS OPTION 5\nNEXTDAY  EQU   *\n         BAL   R1,GETBINS             CHANGE DATE TO BINARY\n         BAL   R3,ELAPYEAR            FIND SCOOP FOR YEAR\n         BAL   R3,GETDAY              FIND TODAYS DATE\n         LR    R5,R4                  R5 NOW POINTS TO TODAY\n         LH    R4,BINDAYJ             GET BINARY DAY COUNT\n         LA    R5,9(,R5)              DONT WANT TODAY SO ....\n         LA    R4,1(,R4)                 BUMP PTR AND COUNTER\n         LA    R6,7                   LOOP CONTROL\nLOOKDAYF EQU   *\n         CLC   0(9,R5),DAYTO          GOT A MATCH?\n         BE    FNDDAYF                YES, GO TO END OF XDAY ROUTINE\n         LA    R5,9(,R5)              NO, BUMP DAY PTR\n         LA    R4,1(,R4)              BUMP DAY COUNTER\n         BCT   R6,LOOKDAYF            BRANCH IF STILL MORE TO CHECK\n         B     BADDAY                 BAD INPUT DAY\n*\n*                            PROCESS OPTION 6\nLASTDAY  EQU   *\n         BAL   R1,GETBINS             GET DATE IN BINARY FORM\n         BAL   R3,ELAPYEAR            FIND SCOOP FOR THIS YEAR\n         BAL   R3,GETDAY              FIND TODAYS DAY\n         LR    R5,R4                  R5 POINTS TO TODAY\n         LH    R4,BINDAYJ             GET BINARY DAYS\n         SH    R5,=H'9'               DONT WANT TODAY SO ...\n         SH    R4,=H'1'                  DEC PTR AND COUNTER\n         LA    R6,7\nLOOKDAYB EQU   *\n         CLC   0(9,R5),DAYTO          GOT A MATCH\n         BE    ENDCHK                 YES NEED TO SET COND CODE\n         SH    R5,=H'9'               DEC\n         SH    R4,=H'1'\n         BCT   R6,LOOKDAYB            BRANCH IF MORE\n         B     BADDAY                 ERRRRRRR\nENDCHK   EQU   *\n         LTR   R4,R4                  SET COND CODE\n         B     FNDDAYB                BORROW CODE FROM XDAY ROUTINE\n*\n*                            PROCESS OPTION 7\nDIFFEREN EQU   *\n         BAL   R1,GETBINS             CHANGE FIRST ONE TO BINARY\n         MVC   HIGHJUL1,HIGHJUL       SAVE MAX DAYS THIS YEAR\n         MVC   BINMNTH1(8),BINMNTH    SAVE BINARY INFO THIS MONTH\n         LA    R4,MONTH2G\n         BAL   R1,VALNUMER            VALIDATE SECOND INPUT DATE\n         MVC   MONTH1G(6),MONTH2G     MOVE TO FIRST LOCATION\n         BAL   R1,GETBINS             CHANGE IT TO BINARY\n         CLC   BINYEAR,BINYEAR1       SAME YEAR?\n         BE    FINALTST               YES, FINE\n         BL    ADDDAY                 FISRT LOW\n         LH    R4,HIGHJUL1            SECOND LOW, GET DAYS LOW YEAR\n         AH    R4,BINDAYJ             ADD DAYS HIGH YEAR\n         STH   R4,BINDAYJ             SAVE DAYS HIGH YEAR\n         LH    R4,BINYEAR             GET HIGH YEAR\n         SH    R4,=H'1'               DEC BY ONE\n         STH   R4,BINYEAR\n         B     FINALTST\nADDDAY   EQU   *\n         LH    R4,HIGHJUL             GET DAYS LOW YEAR\n         AH    R4,BINDAYJ1            ADD DAYS HIGH YEAR\n         STH   R4,BINDAYJ1\n         LH    R4,BINYEAR1\n         SH    R4,=H'1'\n         STH   R4,BINYEAR1\nFINALTST EQU   *\n         CLC   BINYEAR,BINYEAR1       ARE THEY THE SAME NOW?\n         BNE   DIFTOBIG               NO, CANT HANDLE IT\n         LH    R4,BINDAYJ             GET DAYS YEAR 1\n         SH    R4,BINDAYJ1            SUB YEAR 2\n         BP    *+6                    BRANCH ON POSITIVE\n         LCR   R4,R4                  COMPLIMENT IF NOT\n         CVD   R4,PACKIT              BINARY TO PACKED\n         UNPK  DAYDIFF,LAST2          PACKED TO ZONED\n         OI    DAYDIFF+2,X'F0'\n         B     THATSIT-4\nVALNUMER EQU   *\n         LA    R3,5                   LOOP CONTROL\nCHKNUMER EQU   *\n         TM    0(R4),X'F0'            NUMERIC FORMAT?\n         BNO   BADFRMAT               NO, SO ERROR\n         LA    R4,1(,R4)              BUMP PTR\n         BCT   R3,CHKNUMER            CHECKED FIRST 5 ALREADY?\n         TM    0(R4),X'F0'            YES, IS LAST ONE NUMERIC?\n         BO    DATEOK                 YES, SO MUST BE A GREG DATE\n         CLI   0(R4),C' '             FLAGED FOR JULIAN?\n         BNE   BADFRMAT               NO, MUST BE ERRRRRRRR\n         OI    FLAG,X'02'             SET JULIAN FLAG\n         BR    R1\nDATEOK   EQU   *\n         NI    FLAG,X'FD'             TURN OFF JUL FLAG\n         BR    R1\nGREGZTOB EQU   *\n         BAL   R3,GREGTOBN            GREG DATE TO BINARY\n         BAL   R3,ELAPYEAR            FIND ELAPSED YRS AND LEAP\n         CLC   BINMNTH,=H'12'         MONTH TOO HIGH?\n         BH    BADGMNTH               YEP\n         LH    R4,BINMNTH             GET BINARY MONTH\n         LH    R5,=H'12'              FIND ADDR OF\n         SR    R5,R4                   DAYS\n         LA    R4,MONTHS                THIS\n         AR    R5,R4                     MONTH\n         CLC   0(1,R5),BINDAYG+1       TO MANY DAYS THIS MONTH?\n         BL    BADGDAY                YES\n         BR    R10                    EXIT\nJULZTOB  EQU   *\n         MVC   ZONEAREA,DAY1J         MOVE DAYS THIS YEAR\n         BAL   R3,ZONETOBN            CONVERT TO BINARY\n         MVC   BINDAYJ,LASTPRTB       SAVE IT\n         CLC   BINDAYJ,=H'0'          IS DAY ZERO?\n         BNH   BADJDAY                YES, (OR NEG) SO ERROR\n         MVC   ZONEHALF,YEAR1J        MOVE THE YEAR\n         MVI   ZONEBYTE,C'0'\n         BAL   R3,ZONETOBN            CONVERT TO BINARY\n         MVC   BINYEAR,LASTPRTB       SAVE BINARY YEAR\n         BAL   R3,ELAPYEAR            FIND ELAPSED AND LEAP\n         CLC   BINDAYJ,HIGHJUL        TO MANY DAYS THIS YEAR?\n         BH    BADJDAY                YES\n         BR    R10                    EVERYTHING IS O.K.\nGREGTOBN EQU   *\n         ST    R3,GTOBRTN             SAVE EXIT\n         MVC   ZONEHALF,MONTH1G       MOVE THE MONTH\n         MVI   ZONEBYTE,X'F0'         MUST BE ZONED 0\n         BAL   R3,ZONETOBN            CONVERT TO  BINARY\n         MVC   BINMNTH,LASTPRTB       SAVE BINARY MONTH\n         CLC   BINMNTH,=H'0'          IS MONTH ZERO?\n         BNH   BADGMNTH               YES, (OR NEG) SO ERROR\n         MVC   ZONEHALF,DAY1G         MOVE DAY\n         BAL   R3,ZONETOBN\n         MVC   BINDAYG,LASTPRTB       SAVE BINARY DAYS\n         CLC   BINDAYG,=H'0'          IS DAY ZERO?\n         BNH   BADGDAY                YES, (OR NEG) SO ERROR\n         MVC   ZONEHALF,YEAR1G        MOVE THE YEAR\n         BAL   R3,ZONETOBN\n         MVC   BINYEAR,LASTPRTB       SAVE BINARY YEAR\n         L     R3,GTOBRTN             RESTORE EXIT\n         BR    R3                     BYE\nZONETOBN EQU   *\n         PACK  DECWORD,ZONEAREA       ZONED TO PACKED\n         CVB   R4,DECIMAL             PACKED TO BINARY\n         ST    R4,BINWORD             STORE\n         BR    R3\nELAPYEAR EQU   *\n         LH    R6,BINYEAR             GET BINARY YEAR\n         LR    R5,R6                  SAVE IN R5\n         SRDL  R6,32                  SHIFT RIGHT TO DIVIDE TO\n         D     R6,=F'4'               FIND NO. OF LEAPS\n         AR    R5,R7                  ADD LEAPS TO ELAPSED YEARS\n         CH    R6,=H'0'               GOT A LEAP YEAR?\n         BE    LEAPYEAR               YEP\n         LA    R5,1(,R5)              NO, SO ADD 1 TO ELAPSED\n         MVI   FEB,X'1C'              FEB HAS 28\n         MVC   HIGHJUL,=H'365'        YEAR HAS 365\n         NI    FLAG,X'FE'             TURN OFF LEAP FLAG\n         B     EPEXIT\nLEAPYEAR EQU   *\n         OI    FLAG,X'01'             SET FLAG\n         MVI   FEB,X'1D'              FEB HAS 29\n         MVC   HIGHJUL,=H'366'        YEAR HAS 365\nEPEXIT   EQU   *\n         STH   R5,NOYEARS             SAVE NO ELAPSED YEARS\n         BR    R3\nBINGTOJ  EQU   *\n         XR    R6,R6                  ZAP\n         XR    R5,R5                    REGS\n         LH    R4,BINMNTH             LOOP CONTROL AND INDEX\n         BCT   R4,*+8                 IF MONTH=1 WE FALL THROUGH\n         B     ADDDAYS                AND SKIP THE LOOP\nADDLOOP  EQU   *\n         IC    R6,MONTHS2-1(R4)       GET DAYS THIS MONTH\n         AR    R5,R6                  ADD TO TOTAL\n         BCT   R4,ADDLOOP             BRANCH IF MORE MONTHS TO ADD\nADDDAYS  EQU   *\n         LH    R6,BINDAYG             ADD DAYS OF CURRENT\n         AR    R5,R6                   MONTH TO TOTAL\n         STH   R5,BINDAYJ             SAVE IT\n         BR    R3\nBINJTOG  EQU   *\n         LH    R4,BINDAYJ             GET BINARY DAYS THIS YEAR\n         XR    R5,R5                  ZAP     -DAYS THIS MONTH\n         XR    R6,R6                    REGS  -DAYS SO FAR\n         LH    R7,=H'12'              LOPP CONTROL AND INDEX\nSUBLOOP  EQU   *\n         IC    R5,MONTHS-1(R7)        GET DAYS THIS MONTH\n         AR    R6,R5                  ADD TO TOTAL\n         CR    R6,R4                  ARE WE OVER?\n         BNL   GOTMONTH               YES WRAP IT UP\n         BCT   R7,SUBLOOP             DEC INDEX AND GO BACK\n         B     BADJDAY                SHOULD NOT GET HERE\nGOTMONTH EQU   *\n         SR    R6,R5                  WERE OVER SO SUB THIS MONTH\n         SR    R4,R6                  FIND DAYS THIS MONTH\n         STH   R4,BINDAYG             SAVE BINARY DAY OF MONTH\n         LH    R5,=H'13'              FIND WHICH MONTH\n         SR    R5,R7                  SUB OFF THE INDEX\n         STH   R5,BINMNTH             SAVE THE BINARY MONTH\n         BR    R3\nJULBTOZ  EQU   *\n         LH    R5,BINDAYJ             GET BINARY DAYS THIS YEAR\n         CVD   R5,PACKIT              CONVERT TO DECIMAL\n         UNPK  DAYOUTJ,LAST2          UNPACK IT TO OUTPUT\n         OI    DAYOUTJ+2,X'F0'\n         LH    R5,BINYEAR             GET BIN YEAR\n         CVD   R5,PACKIT              BINARY TO PACKED\n         UNPK  YEAROUTJ,LAST2         PACKED TO ZONED\n         OI    YEAROUTJ+1,X'F0'\n         BR    R3\nGREGBTOZ EQU   *\n         LH    R4,BINDAYG             GET BINARY DAYS THIS MONTH\n         CVD   R4,PACKIT              CONVERT TO DECIMAL\n         UNPK  DAYOUTG,LAST2          UNPACK TO OUTPUT\n         OI    DAYOUTG+1,X'F0'\n         LH    R5,BINMNTH             GET THE MONTH\n         CVD   R5,PACKIT              TO PACKED\n         UNPK  MNTHOUTG,LAST2         TO ZONED\n         OI    MNTHOUTG+1,X'F0'\n         LH    R5,BINYEAR             GET BINARY YEAR\n         CVD   R5,PACKIT              BINARY TO PACKED\n         UNPK  YEAROUTG,LAST2         PACKED TO ZONED\n         OI    YEAROUTG+1,X'F0'\n         BR    R3\nGETDAY   EQU   *\n         LA    R4,DAYTAB              ADDR OF DAY TABLE\n         LH    R7,BINYEAR             GET BINARY YEAR\n         CH    R7,=H'4'               IS IT GREATER THAN 4?\n         BH    NORMAL                 YES GO TO NORMAL RTN\n* SINCE 1900 IS NOT A LEAP YEAR 00-4 MUST GO THROUGH SPECIAL ROUTINE\n         LA    R7,1(,R7)              BUMP BY 1!!\n         MH    R7,=H'9'               9 CHAR PER DAY\n         AR    R4,R7                  ADD TO TAB BEGIN\n         B     FINDDAY\nNORMAL   EQU   *   NORMAL DAY CALCULATION\n         LH    R7,NOYEARS             GET NO OF ELAPSED YEARS\n         XR    R6,R6                  CLEAR 6 TO DIVIDE\n         D     R6,=F'7'               DIVIDE MOD 7\n         SRDL  R6,32                  NEED ONLY THE REMAINDER\n         M     R6,=F'9'               9 CHARS PER DAY\n         AR    R4,R7                  R4 NOW POINTS TO DAY 0\nFINDDAY  EQU   *\n         LH    R7,BINDAYJ             GET BINARY DAY COUNT\n         XR    R6,R6                  CLEAR TO DIVIDE\n         D     R6,=F'7'\n         SRDL  R6,32                  NEED ONLY THE REMAINDER\n         M     R6,=F'9'               9 CHARS PER DAY\n         AR    R4,R7                  R4 NOW POINTS TO TODAY\n         MVC   DAYNAME,0(R4)          MOVE DAY TO OUTPUT\n         BR    R3\nGETMONTH EQU   *\n         LH    R5,BINMNTH             GET BINARY MONTH\n         MH    R5,=H'9'               9 CHARS PER MONTH\n         SH    R5,=H'9'               STEP BACK 1\n         BM    BADGMNTH               MONTH IS 0, SO ERR\n         LA    R4,MONTHTAB            ADDR OF MONTH TABLE\n         AR    R4,R5                  R4 NOW POINTS TO THIS MONTH\n         MVC   MNTHNAME,0(R4)         MOVE MONTH TO OUTPUT\n         BR    R3\nENDINFO  EQU   *\n         BAL   R3,GETDAY\n         BAL   R3,GETMONTH\n         TM    FLAG,X'01'             LEAPYEAR?\n         BZ    NOLEAP                 NO\n         MVI   LEAPFLAG,C'Y'          MOVE A \"Y\"\n         B     YESLEAP\nNOLEAP   MVI   LEAPFLAG,C'N'          MOVE A \"N\"\nYESLEAP  XR    R6,R6\n         LH    R7,BINDAYJ\n         CLC   BINMNTH,=H'4'          MONTH > 4\n         BNL   NOT1QTR                YES; CONTINUE\n         MVI   QUARTER,C'1'           NO;  SET 1ST QTR\n         B     WEEKOFF\nNOT1QTR  CLC   BINMNTH,=H'7'          MONTH > 7\n         BNL   NOT2QTR                YES; CONTINUE\n         MVI   QUARTER,C'2'            SET 2ND QTR\n         SH    R7,=H'90'\n         B     WEEKOFF\nNOT2QTR  CLC   BINMNTH,=H'10'         MONTH > 10\n         BNL   NOT3QTR                YES; CONTINUE\n         MVI   QUARTER,C'3'           NO;  SET 3ED QTR\n         SH    R7,=H'181'\n         B     WEEKOFF\nNOT3QTR  MVI   QUARTER,C'4'           MUST BE 4TH QTR\n         SH    R7,=H'273'\nWEEKOFF  EQU   *\n         D     R6,=F'7'\n         LTR   R6,R6\n         BZ    WKZERO\n         LA    R7,1(,R7)\nWKZERO   CVD   R7,PACKIT\n         UNPK  WEEKNOQ,LAST2\n         OI    WEEKNOQ+1,X'F0'\n         LH    R7,BINDAYJ\n         XR    R6,R6\n         D     R6,=F'7'\n         LTR   R6,R6\n         BZ    WEEK0\n         LA    R7,1(,R7)\nWEEK0    CVD   R7,PACKIT\n         UNPK  WEEKNOY,LAST2\n         OI    WEEKNOY+1,X'F0'\n         MVI   ERRCODE,C'0'           NO ERRORS!\nTHATSIT  EQU   *\n         FREEMAIN R,LV=96,A=(R9)\n         LR    R5,R13                 SAVE ADDRESS OF SAVE AREA FOR\n*                                          FREEMAIN\n         L     R13,4(R13)             RESTORE R13\n         FREEMAIN R,LV=72,A=(R5)\n         RETURN (14,12),RC=0          GO BACK TO CALLER\nBADOPTON EQU   *                      OPTION NOT 0 - 7\n         MVI   ERRCODE,C'1'\n         B     THATSIT\nBADJDAY  EQU   *                      DAY < 0 OR > NO DAYS IN YEAR\nBADGDAY  EQU   *                      DAY > NO DAYS IN MONTH\n         MVI   ERRCODE,C'2'\n         B     THATSIT\nBADGMNTH EQU   *                      MONTH > 12\n         MVI   ERRCODE,C'3'\n         B     THATSIT\nBADGYEAR EQU   *                      NOT USED\nBADJYEAR EQU   *                      NOT USED\n         MVI   ERRCODE,C'4'\n         B     THATSIT\nBADFRMAT EQU   *                      DATE FIELD NON NUMERIC\n         MVI   ERRCODE,C'9'\n         B     THATSIT\nWRNFRMAT EQU   *           CANNOT CONVERT TO SAME FORMAT STARTED WITH\n         MVI   ERRCODE,C'5'\n         B     THATSIT\nNODAYINV EQU   *                      NUMBER DAYS TO SKIP NON NUMERIC\n         MVI   ERRCODE,C'6'\n         B     THATSIT\nBADDAY   EQU   *                      INVALID DAY OF WEEK SPECIFIED\n         MVI   ERRCODE,C'7'\n         B     THATSIT\nDIFTOBIG EQU   *                  YEAR FIELD DIFFERS BY MORE THAN ONE\n         MVI   ERRCODE,C'8'\n         B     THATSIT\n         LTORG\nLOW4     DC    F'15'\n         DC    CL9' SATURDAY'\n         DC    CL9'   SUNDAY'\n         DC    CL9'   MONDAY'\n         DC    CL9'  TUESDAY'\n         DC    CL9'WEDNESDAY'\n         DC    CL9' THURSDAY'\n         DC    CL9'   FRIDAY'\nDAYTAB   EQU   *\n         DC    CL9' SATURDAY'\n         DC    CL9'   SUNDAY'\n         DC    CL9'   MONDAY'\n         DC    CL9'  TUESDAY'\n         DC    CL9'WEDNESDAY'\n         DC    CL9' THURSDAY'\n         DC    CL9'   FRIDAY'\n         DC    CL9' SATURDAY'\n         DC    CL9'   SUNDAY'\n         DC    CL9'   MONDAY'\n         DC    CL9'  TUESDAY'\n         DC    CL9'WEDNESDAY'\n         DC    CL9' THURSDAY'\n         DC    CL9'   FRIDAY'\n         DC    CL9' SATURDAY'\n         DC    CL9'   SUNDAY'\n         DC    CL9'   MONDAY'\n         DC    CL9'  TUESDAY'\n         DC    CL9'WEDNESDAY'\n         DC    CL9' THURSDAY'\n         DC    CL9'   FRIDAY'\n         DC    CL9' SATURDAY'\nMNTHNOS  DC    AL1(31,30,31,30,31,31,30,31,30)\n         DC    AL1(31)\n         DC    AL1(28,31)\n         DC    AL1(30,31,30,31,31,30,31,30,31)\nMONTHTAB EQU   *\n         DC    CL9'  JANUARY'\n         DC    CL9' FEBRUARY'\n         DC    CL9'    MARCH'\n         DC    CL9'    APRIL'\n         DC    CL9'      MAY'\n         DC    CL9'     JUNE'\n         DC    CL9'     JULY'\n         DC    CL9'   AUGUST'\n         DC    CL9'SEPTEMBER'\n         DC    CL9'  OCTOBER'\n         DC    CL9' NOVEMBER'\n         DC    CL9' DECEMBER'\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INIT": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00P\\x00P\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "FILE060"}, "text": "//************************************************************\n//* THIS JOB DEFINES AND INITIALIZES THE SOFTWARE STATUS     *\n//*   REPORT VSAM DATASETS. STEP1 DEFINES CLUSTERS. STEP2    *\n//*   INITIALIZES THEM FROM DATASETS SUPPLIED ON THE TAPE.   *\n//*   STEP3 BUILDS THE ALTERNATE INDEXES.                    *\n//*                                                          *\n//* EDIT THIS MEMBER FIRST:                                  *\n//*    JOB CARD                                              *\n//*    FIND ALL \"?\" AND SUBSTITUTE APPROPRIATE VALUES        *\n//*    ALL VSAM DATASETS ARE PREFIXED BY \"SSRV.SOFTSTAT\"     *\n//*       ...USE \"CHANGE ALL\" IF DESIRED                     *\n//************************************************************\n//       JOB.....\n//STEP1    EXEC PGM=IDCAMS\n//SYSPRINT DD   SYSOUT=?\n//SYSIN    DD   *\n  DELETE (SSRV.SOFTSTAT.HISTORY) CLUSTER\n  DEFINE CLUSTER (NAME(SSRV.SOFTSTAT.HISTORY) -\n      KEYS(8 0) RECSZ(53 53) CISZ(4096) SHR(2,3) INDEXED -\n      CYL(1 1) VOL(??????)) -\n    DATA(NAME(SSRV.SOFTSTAT.HISTORY.DATA)) -\n    INDEX(NAME(SSRV.SOFTSTAT.HISTORY.INDEX))\n  DELETE (SSRV.SOFTSTAT.PRODTBL) CLUSTER\n  DEFINE CLUSTER (NAME(SSRV.SOFTSTAT.PRODTBL) -\n      RECSZ(8180 8180) CISZ(8192) SHR(2,3) NUMBERED -\n      REC(2 1) VOL(??????)) -\n    DATA(NAME(SSRV.SOFTSTAT.PRODTBL.DATA))\n  DELETE (SSRV.SOFTSTAT.INDXTBL) CLUSTER\n  DEFINE CLUSTER (NAME(SSRV.SOFTSTAT.INDXTBL) -\n      RECSZ(2040 2040) CISZ(4096) SHR(2,3) NUMBERED -\n      REC(2 1) VOL(??????)) -\n    DATA(NAME(SSRV.SOFTSTAT.INDXTBL.DATA))\n  DELETE (SSRV.SOFTSTAT.PTFAIX) ALTERNATEINDEX\n  DEFINE ALTERNATEINDEX (NAME(SSRV.SOFTSTAT.PTFAIX) -\n      RELATE(SSRV.SOFTSTAT.HISTORY) NONUNIQUEKEY  UPGRADE -\n      VOLUMES(??????) RECORDS(300 50) RECORDSIZE(25 97) CISZ(4096) -\n      FREESPACE(25 25) KEYS(12 8) SHR(2 3)) -\n    DATA(NAME(SSRV.SOFTSTAT.PTFAIX.DATA)) -\n    INDEX(NAME(SSRV.SOFTSTAT.PTFAIX.INDEX))\n  DELETE (SSRV.SOFTSTAT.FMIDAIX) ALTERNATEINDEX\n  DEFINE ALTERNATEINDEX (NAME(SSRV.SOFTSTAT.FMIDAIX) -\n      RELATE(SSRV.SOFTSTAT.HISTORY) NONUNIQUEKEY  UPGRADE -\n      VOLUMES(??????) RECORDS(300 50) RECORDSIZE(54 414) CISZ(4096) -\n      FREESPACE(25 25) KEYS(9 20) SHR(2 3)) -\n    DATA(NAME(SSRV.SOFTSTAT.FMIDAIX.DATA)) -\n    INDEX(NAME(SSRV.SOFTSTAT.FMIDAIX.INDEX))\n  DELETE (SSRV.SOFTSTAT.PTFPATH) PATH\n  DEFINE PATH (NAME(SSRV.SOFTSTAT.PTFPATH) -\n      PATHENTRY(SSRV.SOFTSTAT.PTFAIX) UPDATE)\n  DELETE (SSRV.SOFTSTAT.FMIDPATH) PATH\n  DEFINE PATH (NAME(SSRV.SOFTSTAT.FMIDPATH) -\n      PATHENTRY(SSRV.SOFTSTAT.FMIDAIX) UPDATE)\n/*\n//STEP2  EXEC  PGM=IDCAMS,COND=(8,LT)\n//SYSPRINT  DD  SYSOUT=?\n//DD1 DD DSN=SSR.SSRINTBL.INIT,DISP=(OLD,KEEP),UNIT=TAPE,\n//         LABEL=(2,SL),DCB=(LRECL=2040,RECFM=FB,BLKSIZE=2040),\n//         VOL=SER=SSRTAP\n//DD2 DD DSN=SSRV.SOFTSTAT.INDXTBL,DISP=SHR\n//DD3 DD DSN=SSR.SSRPRTBL.INIT,DISP=(OLD,KEEP),UNIT=TAPE,\n//         LABEL=(3,SL),DCB=(LRECL=8180,RECFM=FB,BLKSIZE=8180),\n//         VOL=REF=*.DD1\n//DD4 DD DSN=SSRV.SOFTSTAT.PRODTBL,DISP=SHR\n//DD5 DD DSN=SSR.SSRHSTRY.INIT,DISP=(OLD,KEEP),UNIT=TAPE,\n//         LABEL=(4,SL),DCB=(LRECL=53,RECFM=FB,BLKSIZE=5300),\n//         VOL=REF=*.DD1\n//DD6 DD DSN=SSRV.SOFTSTAT.HISTORY,DISP=SHR\n//SYSIN  DD *\n  REPRO INFILE(DD1) OUTFILE(DD2) COUNT(1)\n  REPRO INFILE(DD3) OUTFILE(DD4) COUNT(1)\n  REPRO INFILE(DD5) OUTFILE(DD6) COUNT(1)\n/*\n//STEP3  EXEC  PGM=IDCAMS,COND=(8,LT)\n//SYSPRINT  DD  SYSOUT=?\n//DD1 DD DSN=SSRV.SOFTSTAT.HISTORY,DISP=SHR\n//DD2 DD DSN=SSRV.SOFTSTAT.PTFAIX,DISP=SHR\n//DD3 DD DSN=SSRV.SOFTSTAT.FMIDAIX,DISP=SHR\n//SYSIN  DD *\n   BLDINDEX INFILE(DD1) OUTFILE(DD2)\n   BLDINDEX INFILE(DD1) OUTFILE(DD3)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KEYS": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\xa1\\x00\\xa1\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "FILE060"}, "text": "         MACRO\n&LABEL   KEYS  &KEYS\n         GBLA  &SUF,&KYNUM\n         GBLC  &STRADDR,&STRLEN,&DELIM,&ERR\n         LCLA  &SCAN,&KYLNG,&INX,&IX,&SXTNS,&DEC\n         LCLC  &RTFRM,&KYLEN,&KYWRD,&TGT,&VLLEN,&REIT,&NUMS,&HEX,&HEXR\n.**********************************************************************\n.*  1 OR MORE KEYS MACROS TO BE USED ONLY FOLLOWING PARSE MACRO. USED\n.*  TO SPECIFY KEYWORDS, TARGET FIELDS & RETURN FORMATS FOR VALUES TO\n.*  BE PARSED FROM A CHARACTER STRING. FORMAT IS:\n.*\n.*  LABEL  KEYS  (KYW(TGT,F,L,R),KYW(TGT,F,L,R),...KYW(TGT,F,L,R),*)\n.*\n.*  WHERE LABEL IS OPTIONAL LABEL FOR MACRO\n.*        KYW IS KEYWORD, MAX 12 CHARACTERS\n.*        TGT IS NAME OF TARGET FIELD IN USING PROGRAM WHERE VALUES\n.*           WILL BE RETURNED\n.*        F IS FORMAT IN WHICH VALUES WILL BE RETURNED:\n.*           A - CHARACTERS LEFT JUSTIFIED PADDED W/ SPACES\n.*           R - CHARACTERS RIGHT JUSTIFIED PADDED W/ SPACES\n.*           N - DISPLAY NUMERICS, RIGHT JUSTIFIED PADDED W/ ZEROS\n.*           Z - DISPLAY NUMERICS, RIGHT JUSTIFIED PADDED W/ SPACES\n.*           L - DISPLAY NUMERICS, LEFT JUSTIFIED PADDED W/ SPACES\n.*           P - NUMERICS CONVERTED TO 8 BYTE SIGNED PACKED DECIMAL\n.*           B - NUMERICS CONVERTED TO BINARY FULLWORD\n.*        L - OPTIONAL - LENGTH OF TARGET FIELD, ALSO MAX NUM\n.*           CHARACTERS ALLOWED FOR PARSED VALUE. DEFAULT=8, MAX=256\n.*           IGNORED WHEN FORMAT IS P OR B\n.*        R - OPTIONAL - NUMBER OF TIMES TARGET FIELD OCCURS, ALSO MAX\n.*           NUM REITERATIONS OF VALUES ALLOWED. DEFAULT=1, MAX=256\n.*        * - END OF KEYWORD LIST. MUST APPEAR ONLY AT END OF LAST\n.*           'KEYS' MACRO FOR THE PARSE MACRO.\n.*\n.*  EXAMPLE: IF THE USING PROGRAM SPECIFIES:\n.*      PARSE CARDIN(80,=)\n.*      KEYS  (NAME(INNAM,A,10,2),IQ(INIQ,N))\n.*      KEYS  (SCORE(INSCR,P,,3),HATSIZE(HATIN,Z),*)\n.*  AND THE PROGRAM'S 80 CHARACTER FIELD NAMED CARDIN CONTAINS:\n.*    NAME=REAGAN,RON        IQ=23 SCORE=83,42,1234567890\n.*  THEN THESE USING PROGRAM'S FIELDS ARE REPLACED AS FOLLOWS:\n.*    INNAM: C'REAGAN    RON       '\n.*     INIQ: C'00000023'\n.*    INSCR: X'000000000000083C000000000000042C000001234567890C'\n.*    HATIN:  (UNCHANGED)\n.*******************************************************************\n         AIF   (&KYNUM GT 0).NOT1ST\nPRS1&SUF DS    0F\n.NOT1ST  ANOP\n&NUMS    SETC  '0123456789ABCDEF'\n&KYNUM   SETA  &KYNUM+N'&KEYS\n&INX     SETA  0\n.NEXTKEY ANOP\n&INX     SETA  &INX+1\n         AIF   (&INX LT N'&KEYS).PROCKEY\n         AIF   ('&KEYS(&INX)'(1,K'&KEYS(&INX)) EQ '*').PRMLIST\n.PROCKEY ANOP\n&SCAN    SETA  0\n         AIF   ('&KEYS(&INX)'(K'&KEYS(&INX),1) EQ ')').KEYL\n         MNOTE '*** MISSING RIGHT PARENTHESIS ***'\n&ERR     SETC  'Y'\n         MEXIT\n.KEYL    ANOP\n&SCAN    SETA  &SCAN+1\n         AIF   ('&KEYS(&INX)'(&SCAN,1) EQ '(').GOTL\n         AIF   (&SCAN LT K'&KEYS(&INX)-4).KEYL\n         AGO   .INVAL1\n.GOTL    AIF   (&SCAN LT 14).KEYOK\n         MNOTE '*** KEYWORD LONGER THAN 12 CHARACTERS ***'\n&ERR     SETC  'Y'\n         MEXIT\n.KEYOK   ANOP\n&KYLNG   SETA  &SCAN-1\n&KYLEN   SETC  '0'.'&NUMS'(&KYLNG,1)\n&KYWRD   SETC  '&KEYS(&INX)'(1,&KYLNG)\n.TARL    ANOP\n&SCAN    SETA  &SCAN+1\n         AIF   ('&KEYS(&INX)'(&SCAN,1) EQ ',').TARR\n         AIF   (&SCAN LT K'&KEYS(&INX)-2).TARL\n.INVAL1  MNOTE '*** INVALID KEYWORD SUB-PARAMETERS ***'\n&ERR     SETC  'Y'\n         MEXIT\n.TARR    ANOP\n&TGT     SETC  '&KEYS(&INX)'(&KYLNG+2,&SCAN-&KYLNG-2)\n&VLLEN   SETC  '07'\n&REIT    SETC  'RR'\n&RTFRM   SETC  '00'\n         AIF   ('&KEYS(&INX)'(&SCAN+1,1) EQ 'A').GOTRET\n&RTFRM   SETC  '02'\n         AIF   ('&KEYS(&INX)'(&SCAN+1,1) EQ 'R').GOTRET\n&RTFRM   SETC  '04'\n         AIF   ('&KEYS(&INX)'(&SCAN+1,1) EQ 'L').GOTRET\n&RTFRM   SETC  '06'\n         AIF   ('&KEYS(&INX)'(&SCAN+1,1) EQ 'Z').GOTRET\n&RTFRM   SETC  '07'\n         AIF   ('&KEYS(&INX)'(&SCAN+1,1) EQ 'N').GOTRET\n&RTFRM   SETC  '0B'\n         AIF   ('&KEYS(&INX)'(&SCAN+1,1) EQ 'P').GOTRET\n&RTFRM   SETC  '0F'\n         AIF   ('&KEYS(&INX)'(&SCAN+1,1) EQ 'B').GOTRET\n.INVAL2  MNOTE '*** INVALID RETURN FORMAT SPECIFIED ***'\n&ERR     SETC  'Y'\n         MEXIT\n.GOTRET  ANOP\n&SCAN    SETA  &SCAN+3\n         AIF   (&SCAN GE K'&KEYS(&INX)).GOTLEN\n         AIF   ('&KEYS(&INX)'(&SCAN-1,1) NE ',').INVAL2\n         AIF   ('&KEYS(&INX)'(&SCAN,1) EQ ',').GOTLEN\n         AGO   .CNVRT\n.GOTLEN  ANOP\n&REIT    SETC  '00'\n         AIF   (&SCAN GE K'&KEYS(&INX)-1).GOTREIT\n&SCAN    SETA  &SCAN+1\n.CNVRT   ANOP\n&HEX     SETC  '00'\n&DEC     SETA  0\n.CNVRT1  ANOP\n&IX      SETA  0\n.CNVRT2  ANOP\n&IX      SETA  &IX+1\n         AIF   ('&KEYS(&INX)'(&SCAN,1) EQ '&NUMS'(&IX,1)).CNVRT3\n         AIF   (&IX LT 10).CNVRT2\n.INVAL3  MNOTE '** INVALID TARGET FIELD LENGTH OR OCCURS VALUE **'\n&ERR     SETC  'Y'\n         MEXIT\n.CNVRT3  ANOP\n&DEC     SETA  &DEC*10\n&DEC     SETA  &DEC+&IX-1\n&SCAN    SETA  &SCAN+1\n         AIF   (&DEC GT 256).INVAL3\n         AIF   (&SCAN EQ K'&KEYS(&INX)).CNVRT4\n         AIF   ('&KEYS(&INX)'(&SCAN,1) EQ ',').CNVRT4\n         AGO   .CNVRT1\n.CNVRT4  AIF   (&DEC EQ 0).CNVRT5\n&SXTNS   SETA  &DEC-1\n&SXTNS   SETA  &SXTNS/16\n&DEC     SETA  &DEC-(&SXTNS*16)\n&SXTNS   SETA  &SXTNS+1\n&HEX     SETC  '&NUMS'(&SXTNS,1).'&NUMS'(&DEC,1)\n.*&HEXR    SETC  '&NUMS'(&DEC,1)\n.*&HEX     SETC  '&NUMS'(&SXTNS,1)'&HEXR'\n.CNVRT5  AIF   ('&REIT'(1,2) EQ '00').CNVRT6\n&VLLEN   SETC  '&HEX'(1,2)\n         AGO   .GOTLEN\n.CNVRT6  ANOP\n&REIT    SETC  '&HEX'(1,2)\n.GOTREIT ANOP\n         DC    A(&TGT.),X'&RTFRM.&REIT.&VLLEN.&KYLEN.',CL12'&KYWRD.'\n         AIF   (&INX LT N'&KEYS).NEXTKEY\n         AGO   .END\n.PRMLIST AIF   ('&ERR'(1,1) EQ 'Y').END\n&KYNUM   SETA  &KYNUM-1\nPRS2&SUF DS    2F\n         DC    A(&STRADDR.),H'&STRLEN.',CL2'&DELIM.'\n         DC    A(PRS1&SUF.),H'&KYNUM.'\nPRXT&SUF DS    0H\n         STM   14,15,PRS2&SUF\n         L     15,=V(PRSTRNG)\n         LA    1,PRS2&SUF+8\n         BALR  14,15\n         LM    14,15,PRS2&SUF\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARSE": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00A\\x00A\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "FILE060"}, "text": "         MACRO\n&LABEL   PARSE &STRING\n         GBLA  &SUF,&KYNUM\n         GBLC  &STRADDR,&STRLEN,&DELIM,&ERR\n         LCLA  &SCAN,&SCAN2\n.**********************************************************************\n.*  PARSE MACRO, USED IN CONJUNCTION WITH KEYS MACRO, WILL PARSE A\n.*  CHARACTER STRING CONTAINING KEYWORDS FOLLOWED BY 1 OR MORE VALUES\n.*  PER KEYWORD. FORMAT REQUIRED IS:\n.*  (LABEL)  PARSE  SSSSS(LL,DD)\n.*     WHERE LABEL IS OPTIONAL LABEL FOR MACRO\n.*           SSSSS IS NAME OF STRING TO BE PARSED\n.*           LL IS LENGTH OF STRING IN BYTES, MAX 65535\n.*           DD IS OPTIONAL PAIR OF DELIMITING CHARACTERS:\n.*               THE FIRST IS THE CHARACTER THAT WILL DELIMIT KEYWORDS.\n.*               THE SECOND IS THE CHARACTER THAT WILL DELIMIT VALUES.\n.*               DEFAULT IS SPACES. IF ONLY ONE IS SPECIFIED IT BECOMES\n.*               THE FIRST AND THE SECOND IS SPACE. COMMAS NOT ALLOWED.\n.*     EXAMPLES:\n.*        PARSE  CARDIN(80,())\n.*           WILL PARSE THE 80 BYTE STRING 'CARDIN' FOR KEYWORD/VALUES\n.*           OF THE FORM:  KEYWORD1(VALUE)  KEYWORD2(VAL1,VAL2,...VALN)\n.*        PARSE  INREC(512,=)\n.*           WILL PARSE THE 512 BYTE STRING 'INREC' FOR KEYWORD/VALUES\n.*           OF THE FORM:  KEYWORD1=VALUE  KEYWORD2=VAL1,VAL2,...VALN\n.*        PARSE  BIGFINK(65535)\n.*           WILL PARSE THE 65535 BYTE STRING 'BIGFINK' FOR KEY/VALS\n.*           OF THE FORM:  KEYWORD1 VALUE  KEYWORD2 VAL1,VAL2,...VALN\n.*  KEYWORDS, TARGET FIELDS FOR VALUES AND RETURN FORMATS OF VALUES\n.*  ARE SPECIFIED USING 1 OR MORE 'KEYS' MACROS IMMEDIATELY FOLLOWING\n.*  PARSE MACRO. A CALL IS GENERATED TO MODULE PRSTRNG WHICH RETURNS\n.*  PARSED VALUES IN THE FORM REQUESTED TO THEIR RESPECTIVE FIELDS AND\n.*  A RETURN CODE IN REGISTER 1. ONLY REG1 IS CORRUPTED BY THE CALL.\n.**********************************************************************\n&SUF     SETA  &SYSNDX\n&ERR     SETC  'N'\n&KYNUM   SETA  0\n         AIF   ('&STRING'(K'&STRING,1) NE ')').INVAL\n&SCAN    SETA  1\n.TESTL   ANOP\n&SCAN    SETA  &SCAN+1\n         AIF   ('&STRING'(&SCAN,1) EQ '(').GOTL\n         AIF   (&SCAN LT K'&STRING-1).TESTL\n         AGO   .INVAL\n.GOTL    ANOP\n&STRADDR SETC  '&STRING'(1,&SCAN-1)\n&SCAN2   SETA  &SCAN+1\n.GETLEN  ANOP\n&SCAN2   SETA  &SCAN2+1\n         AIF   ('&STRING'(&SCAN2,1) EQ ',').GOTLEN\n         AIF   (&SCAN2 LT K'&STRING).GETLEN\n         AIF   ('&STRING'(&SCAN2,1) EQ ')').GOTLEN\n.INVAL   MNOTE '*** INVALID SUB-PARAMETERS ***'\n&ERR     SETC  'Y'\n         MEXIT\n.GOTLEN  ANOP\n&STRLEN  SETC  '&STRING'(&SCAN+1,&SCAN2-&SCAN-1)\n&DELIM   SETC  '  '\n         AIF   (&SCAN2 GE K'&STRING-1).END\n&DELIM   SETC  '&STRING'(&SCAN2+1,1)\n         AIF   (&SCAN2 EQ K'&STRING-2).END\n&DELIM   SETC  '&STRING'(&SCAN2+1,2)\n.END     ANOP\n&LABEL   B     PRXT&SUF\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRSTRNG": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06&_\\x01\\x06&_\\x12\\x02\\x01Y\\x01Y\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-09-22T00:00:00", "modifydate": "2006-09-22T12:02:00", "lines": 345, "newlines": 345, "modlines": 0, "user": "FILE061"}, "text": "//SSR010PR  EXEC REASMLNK,OUTPUT='??REASM.OUTPUT',          <=== CHANGE\n//  PARM.LKED='NCAL,MAP,LIST,LET'\n//ASM.SYSIN   DD *\nPRSTRNG  CSECT                                                     0000  000E18\n         STM   R14,R12,12(R13)         90EC D00C        *..}.*     0000  000E18\n         BALR  R12,R0                  05C0             *.{*       0004  000E1C\n         LR    R3,R1                   1831             *..*       0006  000E1E\n         L     R4,0(,R3)               5840 3000        *. ..*     0008  000E20\n         SR    R1,R1                   1B11             *..*       000C  000E24\n         SR    R2,R2                   1B22             *..*       000E  000E26\n         SR    R5,R5                   1B55             *..*       0010  000E28\n         LH    R5,4(,R3)               4850 3004        *.&..*     0012  000E2A\n         S     R5,1354(,R12)           5B50 C54A        *$&E\u00a2*     0016  000E2E\n         MVC   567(1,R12),6(R3)        D200 C237 3006   *K.B...*   001A  000E32\n         MVC   570(1,R12),7(R3)        D200 C23A 3007   *K.B...*   0020  000E38\n         MVC   564(3,R12),567(R12)     D202 C234 C237   *K.B.B.*   0026  000E3E\n         BAL   R11,436(,R12)           45B0 C1B4        *..A.*     002C  000E44\n         MVC   564(3,R12),570(R12)     D202 C234 C23A   *K.B.B.*   0030  000E48\n         BAL   R11,436(,R12)           45B0 C1B4        *..A.*     0036  000E4E\n         CLC   6(1,R3),7(R3)           D500 3006 3007   *N.....*   003A  000E52\n         BNE   66(,R12)                4770 C042        *..{.*     0040  000E58\n         MVI   568(R12),X'08'          9208 C238        *k.B.*     0044  000E5C\n         EX    R5,470(,R12)            4450 C1D6        *.&AO*     0048  000E60\n         BE    510(,R12)               4780 C1FE        *..A.*     004C  000E64\n         BAL   R11,424(,R12)           45B0 C1A8        *..Ay*     0050  000E68\n         LR    R4,R1                   1841             *..*       0054  000E6C\n         MVC   562(1,R12),568(R12)     D200 C232 C238   *K.B.B.*   0056  000E6E\n         LA    R8,842(,R12)            4180 C34A        *..C\u00a2*     005C  000E74\n         BAL   R11,378(,R12)           45B0 C17A        *..A:*     0060  000E78\n         L     R10,8(,R3)              58A0 3008        *....*     0064  000E7C\n         SR    R0,R0                   1B00             *..*       0068  000E80\n         SR    R7,R7                   1B77             *..*       006A  000E82\n         LH    R7,12(,R3)              4870 300C        *....*     006C  000E84\n         CLM   R6,B'0001',7(R10)       BD61 A007        *./..*     0070  000E88\n         BNE   122(,R12)               4770 C07A        *..{:*     0074  000E8C\n         EX    R6,482(,R12)            4460 C1E2        *.-AS*     0078  000E90\n         BE    134(,R12)               4780 C086        *..{f*     007C  000E94\n         LA    R10,20(,R10)            41A0 A014        *....*     0080  000E98\n         BCT   R7,106(,R12)            4670 C06A        *..{\u00a6*     0084  000E9C\n         B     500(,R12)               47F0 C1F4        *.0A4*     0088  000EA0\n         LA    R4,1(R1)                4141 0001        *....*     008C  000EA4\n         S     R5,1354(,R12)           5B50 C54A        *$&E\u00a2*     0090  000EA8\n         ICM   R0,B'0001',5(R10)       BF01 A005        *....*     0094  000EAC\n         L     R7,0(,R10)              5870 A000        *....*     0098  000EB0\n         ST    R7,522(,R12)            5070 C20A        *&.B.*     009C  000EB4\n         CLI   4(R10),X'04'            9504 A004        *n...*     00A0  000EB8\n         BL    166(,R12)               4740 C0A6        *. {w*     00A4  000EBC\n         LA    R8,1098(,R12)           4180 C44A        *..D\u00a2*     00A8  000EC0\n         MVC   564(3,R12),576(R12)     D202 C234 C240   *K.B.B *   00AC  000EC4\n         CLI   5(R10),X'00'            9500 A005        *n...*     00B2  000ECA\n         BE    186(,R12)               4780 C0BA        *..{.*     00B6  000ECE\n         MVC   564(3,R12),573(R12)     D202 C234 C23D   *K.B.B.*   00BA  000ED2\n         BAL   R11,436(,R12)           45B0 C1B4        *..A.*     00C0  000ED8\n         MVC   562(1,R12),571(R12)     D200 C232 C23B   *K.B.B.*   00C4  000EDC\n         BAL   R11,378(,R12)           45B0 C17A        *..A:*     00CA  000EE2\n         SR    R9,R9                   1B99             *.r*       00CE  000EE6\n         ICM   R9,B'0001',6(R10)       BF91 A006        *.j..*     00D0  000EE8\n         CLI   4(R10),X'08'            9508 A004        *n...*     00D4  000EEC\n         BL    222(,R12)               4740 C0DE        *. {.*     00D8  000EF0\n         LA    R7,538(,R12)            4170 C21A        *..B.*     00DC  000EF4\n         LA    R9,15                   4190 000F        *....*     00E0  000EF8\n         CR    R9,R6                   1996             *.o*       00E4  000EFC\n         BL    500(,R12)               4740 C1F4        *. A4*     00E6  000EFE\n         MVI   0(R7),C'0'              92F0 7000        *k0..*     00EA  000F02\n         MVI   563(R12),X'01'          9201 C233        *k.B.*     00EE  000F06\n         NC    563(1,R12),4(R10)       D400 C233 A004   *M.B...*   00F2  000F0A\n         CLI   563(R12),X'01'          9501 C233        *n.B.*     00F8  000F10\n         BE    254(,R12)               4780 C0FE        *..{.*     00FC  000F14\n         MVI   0(R7),C' '              9240 7000        *k ..*     0100  000F18\n         S     R9,1354(,R12)           5B90 C54A        *$.E\u00a2*     0104  000F1C\n         EX    R9,494(,R12)            4490 C1EE        *..A.*     0108  000F20\n         MVI   563(R12),X'02'          9202 C233        *k.B.*     010C  000F24\n         NC    563(1,R12),4(R10)       D400 C233 A004   *M.B...*   0110  000F28\n         CLI   563(R12),X'02'          9502 C233        *n.B.*     0116  000F2E\n         BNE   286(,R12)               4770 C11E        *..A.*     011A  000F32\n         LA    R7,1(R9,R7)             4179 7001        *.`..*     011E  000F36\n         SR    R7,R6                   1B76             *..*       0122  000F3A\n         EX    R6,488(,R12)            4460 C1E8        *.-AY*     0124  000F3C\n         CLI   4(R10),X'08'            9508 A004        *n...*     0128  000F40\n         BL    346(,R12)               4740 C15A        *. A!*     012C  000F44\n         PACK  554(8,R12),538(16,R12)  F27F C22A C21A   *2\"B.B.*   0130  000F48\n         NI    561(R12),X'FC'          94FC C231        *m.B.*     0136  000F4E\n         L     R7,522(,R12)            5870 C20A        *..B.*     013A  000F52\n         CLI   4(R10),X'0B'            950B A004        *n...*     013E  000F56\n         BE    336(,R12)               4780 C150        *..A&*     0142  000F5A\n         CVB   R9,554(,R12)            4F90 C22A        *|.B.*     0146  000F5E\n         STCM  R9,B'1111',0(R7)        BE9F 7000        *....*     014A  000F62\n         LA    R9,2                    4190 0002        *....*     014E  000F66\n         B     346(,R12)               47F0 C15A        *.0A!*     0152  000F6A\n         MVC   0(8,R7),554(R12)        D207 7000 C22A   *K...B.*   0156  000F6E\n         LA    R9,6                    4190 0006        *....*     015C  000F74\n         LA    R4,1(R1)                4141 0001        *....*     0160  000F78\n         S     R5,1354(,R12)           5B50 C54A        *$&E\u00a2*     0164  000F7C\n         CLI   562(R12),X'0C'          950C C232        *n.B.*     0168  000F80\n         BL    66(,R12)                4740 C042        *. {.*     016C  000F84\n         L     R7,522(,R12)            5870 C20A        *..B.*     0170  000F88\n         LA    R7,2(R9,R7)             4179 7002        *.`..*     0174  000F8C\n         ST    R7,522(,R12)            5070 C20A        *&.B.*     0178  000F90\n         B     190(,R12)               47F0 C0BE        *.0{.*     017C  000F94\n         EX    R5,476(,R12)            4450 C1DC        *.&A.*     0180  000F98\n         BE    500(,R12)               4780 C1F4        *..A4*     0184  000F9C\n         CR    R1,R4                   1914             *..*       0188  000FA0\n         BNH   500(,R12)               47D0 C1F4        *.}A4*     018A  000FA2\n         CLM   R2,B'0001',562(R12)     BD21 C232        *..B.*     018E  000FA6\n         BE    424(,R12)               4780 C1A8        *..Ay*     0192  000FAA\n         CLM   R2,B'0001',1370(R12)    BD21 C55A        *..E!*     0196  000FAE\n         BNE   500(,R12)               4770 C1F4        *..A4*     019A  000FB2\n         C     R0,1358(,R12)           5900 C54E        *..E+*     019E  000FB6\n         BE    500(,R12)               4780 C1F4        *..A4*     01A2  000FBA\n         S     R0,1354(,R12)           5B00 C54A        *$.E\u00a2*     01A6  000FBE\n         MVI   562(R12),X'0C'          920C C232        *k.B.*     01AA  000FC2\n         LR    R6,R1                   1861             *./*       01AE  000FC6\n         SR    R6,R4                   1B64             *..*       01B0  000FC8\n         SR    R5,R6                   1B56             *..*       01B2  000FCA\n         S     R6,1354(,R12)           5B60 C54A        *$-E\u00a2*     01B4  000FCC\n         BR    R11                     07FB             *..*       01B8  000FD0\n         STM   R5,R6,526(R12)          9056 C20E        *..B.*     01BA  000FD2\n         SR    R5,R5                   1B55             *..*       01BE  000FD6\n         ICM   R5,B'0001',564(R12)     BF51 C234        *..B.*     01C0  000FD8\n         LA    R6,842(,R12)            4160 C34A        *.-C\u00a2*     01C4  000FDC\n         AR    R6,R5                   1A65             *..*       01C8  000FE0\n         MVC   0(1,R6),565(R12)        D200 6000 C235   *K.-.B.*   01CA  000FE2\n         MVC   256(1,R6),566(R12)      D200 6100 C236   *K./.B.*   01D0  000FE8\n         LM    R5,R6,526(R12)          9856 C20E        *q.B.*     01D6  000FEE\n         BR    R11                     07FB             *..*       01DA  000FF2\n         TRT   0(1,R4),586(R12)        DD00 4000 C24A   *.. .B\u00a2*   01DC  000FF4\n         TRT   0(1,R4),0(R8)           DD00 4000 8000   *.. ...*   01E2  000FFA\n         CLC   0(1,R4),8(R10)          D500 4000 A008   *N. ...*   01E8  001000\n         MVC   0(1,R7),0(R4)           D200 7000 4000   *K... .*   01EE  001006\n         MVC   1(1,R7),0(R7)           D200 7001 7000   *K.....*   01F4  00100C\n         MVC   24(4,R13),1362(R12)     D203 D018 C552   *K.}.E.*   01FA  001012\n         B     516(,R12)               47F0 C204        *.0B.*     0200  001018\n         MVC   24(4,R13),1366(R12)     D203 D018 C556   *K.}.E.*   0204  00101C\n         LM    R14,R12,12(R13)         98EC D00C        *q.}.*     020A  001022\n         BR    R14                     07FE             *..*       020E  001026\n         DC    X'0000000000000000'     0000000000000000 *........* 0210  001028\n         DC    X'0000000000000000'     0000000000000000 *........* 0218  001030\n         DC    X'0000000000000000'     0000000000000000 *........* 0220  001038\n         DC    X'0000000000000000'     0000000000000000 *........* 0228  001040\n         DC    X'0000000000000000'     0000000000000000 *........* 0230  001048\n         DC    X'000000000000'         000000000000     *......*   0238  001050\n         DC    X'04100008086B'         04100008086B     *.....,*   023E  001056\n         DC    X'0C0C'                 0C0C             *..*       0244  00105C\n         DC    C',',X'00'              6B00             *,.*       0246  00105E\n         DC    X'1000000000000000'     1000000000000000 *........* 0248  001060\n         DC    X'0404040404040404'     0404040404040404 *........* 0250  001068\n         DC    X'0404040404040404'     0404040404040404 *........* 0258  001070\n         DC    X'0404040404040404'     0404040404040404 *........* 0260  001078\n         DC    X'0404040404040404'     0404040404040404 *........* 0268  001080\n         DC    X'0404040404040404'     0404040404040404 *........* 0270  001088\n         DC    X'0404040404040404'     0404040404040404 *........* 0278  001090\n         DC    X'0404040404040404'     0404040404040404 *........* 0280  001098\n         DC    X'0404040404040404'     0404040404040404 *........* 0288  0010A0\n         DC    X'0004040404040404'     0004040404040404 *........* 0290  0010A8\n         DC    X'0404040404040404'     0404040404040404 *........* 0298  0010B0\n         DC    X'0404040404040404'     0404040404040404 *........* 02A0  0010B8\n         DC    X'0404040404040404'     0404040404040404 *........* 02A8  0010C0\n         DC    X'0404040404040404'     0404040404040404 *........* 02B0  0010C8\n         DC    X'0404040404040404'     0404040404040404 *........* 02B8  0010D0\n         DC    X'0404040404040404'     0404040404040404 *........* 02C0  0010D8\n         DC    X'0404040404040404'     0404040404040404 *........* 02C8  0010E0\n         DC    X'0404040404040404'     0404040404040404 *........* 02D0  0010E8\n         DC    X'0404040404040404'     0404040404040404 *........* 02D8  0010F0\n         DC    X'0404040404040404'     0404040404040404 *........* 02E0  0010F8\n         DC    X'0404040404040404'     0404040404040404 *........* 02E8  001100\n         DC    X'0404040404040404'     0404040404040404 *........* 02F0  001108\n         DC    X'0404040404040404'     0404040404040404 *........* 02F8  001110\n         DC    X'0404040404040404'     0404040404040404 *........* 0300  001118\n         DC    X'0404040404040404'     0404040404040404 *........* 0308  001120\n         DC    X'0404040404040404'     0404040404040404 *........* 0310  001128\n         DC    X'0404040404040404'     0404040404040404 *........* 0318  001130\n         DC    X'0404040404040404'     0404040404040404 *........* 0320  001138\n         DC    X'0404040404040404'     0404040404040404 *........* 0328  001140\n         DC    X'0404040404040404'     0404040404040404 *........* 0330  001148\n         DC    X'0404040404040404'     0404040404040404 *........* 0338  001150\n         DC    X'0404040404040404'     0404040404040404 *........* 0340  001158\n         DC    X'0404040404040404'     0404040404040404 *........* 0348  001160\n         DC    X'0000000000000000'     0000000000000000 *........* 0350  001168\n         DC    X'0000000000000000'     0000000000000000 *........* 0358  001170\n         DC    X'0000000000000000'     0000000000000000 *........* 0360  001178\n         DC    X'0000000000000000'     0000000000000000 *........* 0368  001180\n         DC    X'0000000000000000'     0000000000000000 *........* 0370  001188\n         DC    X'0000000000000000'     0000000000000000 *........* 0378  001190\n         DC    X'0000000000000000'     0000000000000000 *........* 0380  001198\n         DC    X'0000000000000000'     0000000000000000 *........* 0388  0011A0\n         DC    X'0000000000000000'     0000000000000000 *........* 0390  0011A8\n         DC    X'0000000000000000'     0000000000000000 *........* 0398  0011B0\n         DC    X'0000000000000000'     0000000000000000 *........* 03A0  0011B8\n         DC    X'0000000000000000'     0000000000000000 *........* 03A8  0011C0\n         DC    X'0000000000000000'     0000000000000000 *........* 03B0  0011C8\n         DC    X'0000000000000000'     0000000000000000 *........* 03B8  0011D0\n         DC    X'0000000000000000'     0000000000000000 *........* 03C0  0011D8\n         DC    X'0000000000000000'     0000000000000000 *........* 03C8  0011E0\n         DC    X'0000000000000000'     0000000000000000 *........* 03D0  0011E8\n         DC    X'0000000000000000'     0000000000000000 *........* 03D8  0011F0\n         DC    X'0000000000000000'     0000000000000000 *........* 03E0  0011F8\n         DC    X'0000000000000000'     0000000000000000 *........* 03E8  001200\n         DC    X'0000000000000000'     0000000000000000 *........* 03F0  001208\n         DC    X'0000000000000000'     0000000000000000 *........* 03F8  001210\n         DC    X'0000000000000000'     0000000000000000 *........* 0400  001218\n         DC    X'0000000000000000'     0000000000000000 *........* 0408  001220\n         DC    X'0000000000000000'     0000000000000000 *........* 0410  001228\n         DC    X'0000000000000000'     0000000000000000 *........* 0418  001230\n         DC    X'0000000000000000'     0000000000000000 *........* 0420  001238\n         DC    X'0000000000000000'     0000000000000000 *........* 0428  001240\n         DC    X'0000000000000000'     0000000000000000 *........* 0430  001248\n         DC    X'0000000000000000'     0000000000000000 *........* 0438  001250\n         DC    X'0000000000000000'     0000000000000000 *........* 0440  001258\n         DC    X'0000000000000000'     0000000000000000 *........* 0448  001260\n         LPR   R1,R0                   1010             *..*       0450  001268\n         LPR   R1,R0                   1010             *..*       0452  00126A\n         LPR   R1,R0                   1010             *..*       0454  00126C\n         LPR   R1,R0                   1010             *..*       0456  00126E\n         LPR   R1,R0                   1010             *..*       0458  001270\n         LPR   R1,R0                   1010             *..*       045A  001272\n         LPR   R1,R0                   1010             *..*       045C  001274\n         LPR   R1,R0                   1010             *..*       045E  001276\n         LPR   R1,R0                   1010             *..*       0460  001278\n         LPR   R1,R0                   1010             *..*       0462  00127A\n         LPR   R1,R0                   1010             *..*       0464  00127C\n         LPR   R1,R0                   1010             *..*       0466  00127E\n         LPR   R1,R0                   1010             *..*       0468  001280\n         LPR   R1,R0                   1010             *..*       046A  001282\n         LPR   R1,R0                   1010             *..*       046C  001284\n         LPR   R1,R0                   1010             *..*       046E  001286\n         LPR   R1,R0                   1010             *..*       0470  001288\n         LPR   R1,R0                   1010             *..*       0472  00128A\n         LPR   R1,R0                   1010             *..*       0474  00128C\n         LPR   R1,R0                   1010             *..*       0476  00128E\n         LPR   R1,R0                   1010             *..*       0478  001290\n         LPR   R1,R0                   1010             *..*       047A  001292\n         LPR   R1,R0                   1010             *..*       047C  001294\n         LPR   R1,R0                   1010             *..*       047E  001296\n         LPR   R1,R0                   1010             *..*       0480  001298\n         LPR   R1,R0                   1010             *..*       0482  00129A\n         LPR   R1,R0                   1010             *..*       0484  00129C\n         LPR   R1,R0                   1010             *..*       0486  00129E\n         LPR   R1,R0                   1010             *..*       0488  0012A0\n         LPR   R1,R0                   1010             *..*       048A  0012A2\n         LPR   R1,R0                   1010             *..*       048C  0012A4\n         LPR   R1,R0                   1010             *..*       048E  0012A6\n         LPR   R1,R0                   1010             *..*       0490  0012A8\n         LPR   R1,R0                   1010             *..*       0492  0012AA\n         LPR   R1,R0                   1010             *..*       0494  0012AC\n         LPR   R1,R0                   1010             *..*       0496  0012AE\n         LPR   R1,R0                   1010             *..*       0498  0012B0\n         LPR   R1,R0                   1010             *..*       049A  0012B2\n         LPR   R1,R0                   1010             *..*       049C  0012B4\n         LPR   R1,R0                   1010             *..*       049E  0012B6\n         LPR   R1,R0                   1010             *..*       04A0  0012B8\n         LPR   R1,R0                   1010             *..*       04A2  0012BA\n         LPR   R1,R0                   1010             *..*       04A4  0012BC\n         LPR   R1,R0                   1010             *..*       04A6  0012BE\n         LPR   R1,R0                   1010             *..*       04A8  0012C0\n         LPR   R1,R0                   1010             *..*       04AA  0012C2\n         LPR   R1,R0                   1010             *..*       04AC  0012C4\n         LPR   R1,R0                   1010             *..*       04AE  0012C6\n         LPR   R1,R0                   1010             *..*       04B0  0012C8\n         LPR   R1,R0                   1010             *..*       04B2  0012CA\n         LPR   R1,R0                   1010             *..*       04B4  0012CC\n         LPR   R1,R0                   1010             *..*       04B6  0012CE\n         LPR   R1,R0                   1010             *..*       04B8  0012D0\n         LPR   R1,R0                   1010             *..*       04BA  0012D2\n         LPR   R1,R0                   1010             *..*       04BC  0012D4\n         LPR   R1,R0                   1010             *..*       04BE  0012D6\n         LPR   R1,R0                   1010             *..*       04C0  0012D8\n         LPR   R1,R0                   1010             *..*       04C2  0012DA\n         LPR   R1,R0                   1010             *..*       04C4  0012DC\n         LPR   R1,R0                   1010             *..*       04C6  0012DE\n         LPR   R1,R0                   1010             *..*       04C8  0012E0\n         LPR   R1,R0                   1010             *..*       04CA  0012E2\n         LPR   R1,R0                   1010             *..*       04CC  0012E4\n         LPR   R1,R0                   1010             *..*       04CE  0012E6\n         LPR   R1,R0                   1010             *..*       04D0  0012E8\n         LPR   R1,R0                   1010             *..*       04D2  0012EA\n         LPR   R1,R0                   1010             *..*       04D4  0012EC\n         LPR   R1,R0                   1010             *..*       04D6  0012EE\n         LPR   R1,R0                   1010             *..*       04D8  0012F0\n         LPR   R1,R0                   1010             *..*       04DA  0012F2\n         LPR   R1,R0                   1010             *..*       04DC  0012F4\n         LPR   R1,R0                   1010             *..*       04DE  0012F6\n         LPR   R1,R0                   1010             *..*       04E0  0012F8\n         LPR   R1,R0                   1010             *..*       04E2  0012FA\n         LPR   R1,R0                   1010             *..*       04E4  0012FC\n         LPR   R1,R0                   1010             *..*       04E6  0012FE\n         LPR   R1,R0                   1010             *..*       04E8  001300\n         LPR   R1,R0                   1010             *..*       04EA  001302\n         LPR   R1,R0                   1010             *..*       04EC  001304\n         LPR   R1,R0                   1010             *..*       04EE  001306\n         LPR   R1,R0                   1010             *..*       04F0  001308\n         LPR   R1,R0                   1010             *..*       04F2  00130A\n         LPR   R1,R0                   1010             *..*       04F4  00130C\n         LPR   R1,R0                   1010             *..*       04F6  00130E\n         LPR   R1,R0                   1010             *..*       04F8  001310\n         LPR   R1,R0                   1010             *..*       04FA  001312\n         LPR   R1,R0                   1010             *..*       04FC  001314\n         LPR   R1,R0                   1010             *..*       04FE  001316\n         LPR   R1,R0                   1010             *..*       0500  001318\n         LPR   R1,R0                   1010             *..*       0502  00131A\n         LPR   R1,R0                   1010             *..*       0504  00131C\n         LPR   R1,R0                   1010             *..*       0506  00131E\n         LPR   R1,R0                   1010             *..*       0508  001320\n         LPR   R1,R0                   1010             *..*       050A  001322\n         LPR   R1,R0                   1010             *..*       050C  001324\n         LPR   R1,R0                   1010             *..*       050E  001326\n         LPR   R1,R0                   1010             *..*       0510  001328\n         LPR   R1,R0                   1010             *..*       0512  00132A\n         LPR   R1,R0                   1010             *..*       0514  00132C\n         LPR   R1,R0                   1010             *..*       0516  00132E\n         LPR   R1,R0                   1010             *..*       0518  001330\n         LPR   R1,R0                   1010             *..*       051A  001332\n         LPR   R1,R0                   1010             *..*       051C  001334\n         LPR   R1,R0                   1010             *..*       051E  001336\n         LPR   R1,R0                   1010             *..*       0520  001338\n         LPR   R1,R0                   1010             *..*       0522  00133A\n         LPR   R1,R0                   1010             *..*       0524  00133C\n         LPR   R1,R0                   1010             *..*       0526  00133E\n         LPR   R1,R0                   1010             *..*       0528  001340\n         LPR   R1,R0                   1010             *..*       052A  001342\n         LPR   R1,R0                   1010             *..*       052C  001344\n         LPR   R1,R0                   1010             *..*       052E  001346\n         LPR   R1,R0                   1010             *..*       0530  001348\n         LPR   R1,R0                   1010             *..*       0532  00134A\n         LPR   R1,R0                   1010             *..*       0534  00134C\n         LPR   R1,R0                   1010             *..*       0536  00134E\n         LPR   R1,R0                   1010             *..*       0538  001350\n         LPR   R1,R0                   1010             *..*       053A  001352\n         LPR   R1,R0                   1010             *..*       053C  001354\n         LPR   R1,R0                   1010             *..*       053E  001356\n         DC    X'0000000000000000'     0000000000000000 *........* 0540  001358\n         DC    X'0000'                 0000             *..*       0548  001360\n         LPR   R1,R0                   1010             *..*       054A  001362\n         LPR   R1,R0                   1010             *..*       054C  001364\n         LPR   R1,R0                   1010             *..*       054E  001366\n         DC    X'0000000100000000'     0000000100000000 *........* 0550  001368\n         DC    X'0000000800000000'     0000000800000000 *........* 0558  001370\n         DC    X'0C'                   0C               *.*        0560  001378\n         YREGS\n         END\n//LKED.SYSLIN  DD *\n INCLUDE SYSLIBX\n ORDER   SSR010PR,PRSTRNG\n MODE    RMODE(24),AMODE(24)\n ENTRY   SSR010PR\n NAME    SSR010PR(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "README": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00l\\x00l\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 108, "newlines": 108, "modlines": 0, "user": "FILE060"}, "text": "                     SOFTWARE STATUS REPORT\n                     ----------------------\n     SOFTWARE STATUS REPORT is an ISPF application consisting of 3 load modules,\n2 CLISTs, 5 ISPF panels, 5 ISPF tutorial panels, and 4 ISPF message members.\nIt allows recording of software products installed on your system and\nmaintenance history for each product. Products can be displayed by PRODUCT NAME,\nACRONYM, VENDOR, CATEGORY, FMID OR PTF/MOD. A formatted hardcopy report can be\nproduced, with products organized on the report according to customizeable\ncombinations of VENDOR and CATEGORY.\n\n\n     Throughout this installation tape the following dataset naming conventions\nare used:\n          Hi-level qualifier SSR denotes PS and PO datasets\n          Hi-level qualifier SSRV denotes VSAM datasets\n\nChange these as needed throughout this PDS to meet your installation needs.\n\n\n     The SOFTWARE STATUS database consists of 5 VSAM datasets:\n\n        SSRV.SOFTSTAT.INDXTBL - RRDS - Rec Len 2040\n           - holds up to 58 VENDOR or CATEGORY names per record\n        SSRV.SOFTSTAT.PRODTBL - RRDS - Rec Len 8180\n           - holds up to 96 PRODUCT NAME/ACRONYMs per record\n        SSRV.SOFTSTAT.HISTORY - KSDS - Rec Len 53\n           - holds a single maintenance entry for a single product per record\n        SSRV.SOFTSTAT.PTFAIX  - ALT INDEX\n           - alt index to base cluster SSRV.SOFTSTAT.HISTORY\n        SSRV.SOFTSTAT.FMIDAIX - ALT INDEX\n           - alt index to base cluster SSRV.SOFTSTAT.HISTORY\n\n\n                         CONTENTS OF TAPE\n                         ----------------\n1. SSR.SOFTSTAT.LIB - This PDS\n2. SSR.SSRINTBL.INIT - 1 rec for initializing SSRV.SOFTSTAT.INDXTBL\n3. SSR.SSRPRTBL.INIT - 1 rec for initializing SSRV.SOFTSTAT.PRODTBL\n4. SSR.SSRHSTRY.INIT - 1 rec for initializing SSRV.SOFTSTAT.INDXTBL\n\n\n                     INSTALLATION INSTRUCTIONS\n                     -------------------------\n1. Copy the 2 macros to your mac library. They are REG, RETURN72.\n2. Assemble DATEMVS to a library where it can be included with SSR011PR.\n3. Compile COBOL program SSR01AR, then assemble SSR010PR and SSR011PR.\n4. (Optional) Copy source members for the above three modules from this PDS to\n   your source library. The names are the same.\n5. Copy the 2 procs on this PDS, SSRALLOC and SSRPRINT to your proc library.\n6. Copy ISPF panels and tutorial panels from this PDS to your ISPF panel\n   library. There are 10 in all: SSRPNL00, SSRPNL30, SSRPNL31, SSRPNL32,\n   SSRPNL33, SSRPNL34, SSRHLP00, SSRHLP30, SSRHLP31, SSRHLP32, SSRHLP33,\n   and SSRHLP34.\n7. Copy the ISPF message members from this PDS to your ISPF message library.\n   There are 4: SSRMS00, SSRMS01, SSRMS30, SSRMS90.\n8. Copy the control cards for the print job from this PDS to your parm library.\n   There are 2 members: SSRPRNTC and SSRPRNTS. SSRPRNTC will need to be\n   customized for your installation - see below.\n9. Member INIT on this PDS contains an IDCAMS job to define the VSAM clusters\n   Alt-indexes and paths required, to initialize them from files supplied on\n   the tape, and to build the alternate indexes. Edit member INIT first.\n10. Edit the ISPF Menu from which you intend to invoke SOFTWARE STATUS REPORT\n   to as follows:\n       under this:     &ZSEL = TRANS(TRUNC(&ZCMD,'.')\n                                .\n                                .\n                                .\n         add this:           x,'CMD(SSRALLOC) NEWAPPL(SSR) NOCHECK'\n\n11. In the APPLICATION COMMAND TABLE UTILITY (3.9), create an ISPF Command\n   Table with APPLICATION ID = SSR, which will allow the ISPF commands DOWN\n   and UP to be passed to the SSR application:\n               VERB    T    ACTION\n               ----    -    ------\n               DOWN    4    PASSTHRU\n               UP      2    PASSTHRU\n\n\n                     CONTROL CARDS FOR PRINTING THE REPORT\n                     -------------------------------------\n     The proc SSRPRINT, copied to your proclib, contains a DD card for ddname\nCNTLCARD, dsname YOUR.PARMLIB(SSRPRNTC). Member SSRPRNTC, copied to your parm\nlibrary, contains the control cards for formatting the report. These control\ncards will need to be customized for you installtion.\n     Products will be grouped in the report by VENDOR and CATEGORY within\nVENDOR, or by CATEGORY and VENDOR within CATEGORY. Both types of grouping can\noccur in the same report.\n     Control card format is:\n         1. Any number of spaces\n         2. Keyword 1 (VENDOR or VEND, CATEGORY or CAT)\n         3. Value for keyword 1, in parenthesis, no intervening spaces.\n         4. Any number of spaces\n         5. Keyword 2 (opposite of Keyword 1)\n         6. Value for keyword 2, in parenthesis, no intervening spaces.\n     If asterisk(*) is used for value, all values will be considered a match.\n\n     Examples:\n     ---------\n   VEND(IBM)   CAT(OS)   - will list products alphabetically for which Vendor =\n                          IBM and Category = OS\nVENDOR(IBM) CATEGORY(*)  - will list IBM products alphabetically within all\n                          categories (listed alphabetically)\n   CAT(*)  VENDOR(*)     - will list by vendor within category.\n\n     The first control card which a product matches will determine the\nplacement of the product in the report. Any given product will appear in the\nreport only once.\n     If no control cards are supplied, CAT(*) VEND(*) is the default.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REASMLNK": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00#\\x00\\x89\"_\\x01\\x022\\x8f\\x10(\\x00\\x12\\x00E\\x00\\x0c\\xd7\\xd9\\xd6\\xc3@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1989-08-13T00:00:00", "modifydate": "2002-11-24T10:28:23", "lines": 18, "newlines": 69, "modlines": 12, "user": "PROC"}, "text": "//REASMLNK PROC\n//ASM    EXEC  PGM=ASMA90,REGION=7000K,\n//             PARM=(DECK,NOOBJECT,NORLD,RENT,TERM,'XREF(SHORT)')\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSALLDA,SPACE=(TRK,(5,5)),DISP=(MOD,PASS),DSN=&&X,\n//             DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIB   DD  DSN=SBGOLOB.R11.MODGEN,DISP=SHR,DCB=BLKSIZE=23440\n//         DD  DSN=SBGOLOB.R11.MACLIB,DISP=SHR\n//LKED   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR,LET,NCAL',COND=(0,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIBX  DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=&OUTPUT\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(TRK,(5,5))\n//       PEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REG": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00K\\x00K\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "FILE060"}, "text": "         MACRO\n&NAME    REG   &ID,&ADDBASE,&ADDBAS2\n         SPACE\n***********************************************************************\n*                                                                     *\n*      REG MACRO VERSION 1.1 REVISED 12/23/80 BY CDW TO ADD COMMENTS  *\n*                        1.2 REVISED 05/07/82 BY CJM TO ADD THIRD     *\n*                                                       BASE REGISTER *\n*          FORMAT OF USE                                              *\n*                                                                     *\n*     NAME   REG  ID,BASE1,BASE2                                      *\n*                                                                     *\n*      NAME IS THE NAME OF THE FIRST CSECT IN PROGRAM.                *\n*      REG IS THE MACRO.                                              *\n*      ID IS A STRING PASSED TO THE SAVE MACRO FOR IDENTIFYING MODULE.*\n*      BASE1 IS THE REGISTER TO USE AS THE SECOND BASE REG.           *\n*      BASE2 IS THE REGISTER TO USE AS THE THIRD BASE REG.            *\n*      IF ONLY ID IS CODED THERE WILL BE ONE BASE REGISTER            *\n*      USE RETURN72 TO FREE SAVE AREA - DO NOT CODE 'L  R13,4(R13)'   *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n**                    ****   E Q U A T E S   ****                    **\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRETREG   EQU   14\nCOMBASE  EQU   12\nBASE1    EQU   11\nBASE2    EQU   10\n&NAME    CSECT\n         USING *,15\n         SAVE  (14,12),,&ID\n         BALR  COMBASE,0\n         AIF   (K'&ADDBASE EQ 0).ONEBAS\n         USING *,COMBASE,&ADDBASE\nPBASE    EQU   *\n         LA    &ADDBASE,4095(COMBASE)\n         LA    &ADDBASE,1(&ADDBASE)\n         AIF   (K'&ADDBAS2 EQ 0).SKIPUSE\n         USING PBASE+8192,&ADDBAS2\n         LA    &ADDBAS2,4095(&ADDBASE)\n         LA    &ADDBAS2,1(&ADDBAS2)\n         AGO   .SKIPUSE\n.ONEBAS  ANOP\n         USING *,COMBASE\nPBASE    EQU   *\n.SKIPUSE ANOP\n         DROP  R15\n         LA    R0,72                   GET A\n         BAL   R1,*+4                     SAVE\n         SVC   10                            AREA\n         ST    R13,4(,R1)              BACK CHAIN SAVE AREAS\n         ST    R1,8(,R13)              FORWARD CHAIN SAVE AREAS\n         LR    R13,R1                  SET R13 TO NEW SAVE AREA\n         L     R1,4(,R13)              SET R1 TO SAVE AREA AT ENTRY\n         L     R1,24(,R1)              RESTORE R1 FROM SAVE AREA\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RETURN72": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x002\\x002\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "FILE060"}, "text": "         MACRO\n&NAME    RETURN72 &REG,&PARA,&RC=O\n         LCLA  &A\n         LR    5,13                              ADDRESS OF GETMAIN\n         L     13,4(13)                          POINT TO CALLER\n         LA    0,72(0,0)                         LOAD LENGTH\n         LA    1,0(0,5)                          LOAD AREA ADDRESS\n         SVC   10                                FREEMAIN\n         AIF   ('&NAME' EQ '').GO\n&NAME    DS    0H\n.GO      AIF   ('&REG' EQ '').CONTA\n         AIF   ('&RC' EQ '(15)').SPECRT\n.COMBACK ANOP\n&A       SETA  &REG(1)*4+20\n         AIF   (&A LE 75).CONTB\n&A       SETA  &A-64\n.CONTB   AIF   (N'&REG NE 2).CONTC\n         LM    &REG(1),&REG(2),&A.(13)           RESTORE THE REGISTERS\n         AGO   .CONTA\n.SPECRT  AIF   ('&REG(1)' NE '14' AND '&REG(1)' NE '15').COMBACK\n         AIF   ('&REG(1)' EQ '14' AND N'&REG  EQ 1).COMBACK\n         AIF   ('&REG(1)' EQ '15' AND N'&REG EQ 1).CONTA\n         AIF   ('&REG(1)' EQ '14').SKIP\n         AIF   ('&REG(2)' EQ '0').ZTWO\n.LM      LM    0,&REG(2),20(13)                  RESTORE THE REGISTERS\n         AGO   .CONTA\n.ZTWO    L     0,20(13,0)                        RESTORE REGISTER ZERO\n         AGO   .CONTA\n.SKIP    L     14,12(13,0)                       RESTORE REGISTER 14\n         AIF   ('&REG(2)' EQ '15').CONTA\n         AIF   ('&REG(2)' EQ '0').ZTWO\n         AGO   .LM\n.CONTC   AIF   (N'&REG NE 1).ERROR1\n         L     &REG(1),&A.(13,0)                 RESTORE REGISTER\n.CONTA   AIF   ('&PARA' EQ '').CONTD\n         AIF   ('&PARA' NE 'T').ERROR2\n         MVI   12(13),X'FF'                      SET RETURN INDICATION\n.CONTD   AIF   ('&RC' EQ 'O').CONTE\n         AIF   ('&RC'(1,1) EQ '(').ISAREG\n         LA    15,&RC.(0,0)                      LOAD RETURN CODE\n         AGO   .CONTE\n.ISAREG  AIF   ('&RC(1)' EQ '15').CONTE\n         IHBERMAC 61,,&RC\n         MEXIT\n.CONTE   BR    14                                RETURN\n         AGO   .END\n.ERROR1  IHBERMAC 36,,&REG\n         MEXIT\n.ERROR2  IHBERMAC 37,,&PARA\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSJES$05": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x8f\\x00\\x8f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 143, "newlines": 143, "modlines": 0, "user": "FILE060"}, "text": "         TITLE 'EXIT5: JES2 EXIT 5 JES2 COMMAND PREPROCESSOR'\n***********************************************************************\n* +-----------------------------------------------------------------+ *\n* |                          E X I T 5                              | *\n* +-----------------------------------------------------------------+ *\n***********************************************************************\n*                                                                     *\n*        JES2 EXIT 5 JES2 COMMAND PREPROCESSOR                        *\n*                                                                     *\n*        ENVIRONMENT:  JES2/SP 1.3.4  LEVEL 8406                      *\n*                      MVS/SP 1.3.3                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED WORK IN CONJUCTION WITH   *\n*        OUR SPECIAL JES2 EXIT 15 FOR XEROX FORMS CONTROL.  WHENEVER  *\n*        THE OPERATOR ISSUES A STOP OR HALT COMMAND TO A XEROX        *\n*        8700/9700 PRINTER THIS EXIT RESETS THE DCTUSER0 FIELD TO     *\n*        INDICATE UNKNOWN FORMS SO THAT THE NEXT JOB PRINTED CAUSES   *\n*        AN OPERATOR SETUP MESSAGE TO APPEAR ON THE XEROX PRINTER     *\n*        CONSOLE (THUS FORCING THE OPERATOR TO VERIFY THE FORMS       *\n*        SETUP).                                                      *\n*                                                                     *\n*        THIS EXIT IS COPIED INTO EXIT1MIT AT ASSEMBLY TIME.          *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SYMBOLIC REGISTER DEFINITIONS                                *\n*                                                                     *\n***********************************************************************\n*\n**IC      EQU   R2                  INPUT CODE (FROM R0)\n**IP      EQU   R3                  INPUT PARAMETERS LIST ADDRESS\n**JOE     EQU   R4                  JOE ADDRESSABILITY REGISTER\n**PDDB    EQU   R5                  PDDB ADDRESSABILITY REGISTER\n**DCTREG  EQU   R6                  DCT ADDRESSABILITY REGISTER\n**BUFREG  EQU   R7                  BUFFER ADDRESSABILITY REGISTER\n*JCT      EQU   R10                 JCT ADDRESSABILITY REGISTER\n*BASE1    EQU   R11                 HCT ADDRESSABILITY REGISTER\n*BASE2    EQU   R12                 PROCESSOR ADDRESSABILITY REGISTER\n*SAVE     EQU   R13                 PCE ADDRESSABILITY REGISTER\n*LINK     EQU   R14                 LINK REGISTER\n         SPACE 2\n***********************************************************************\n         COPY   $HASPGBL          COPY HASPGBL PARAMETERS\n         PRINT  ON,GEN\nSSJES$05 $MODULE $BUFFER,                                              X\n               RPL,                     REQED BY $BUFFER               X\n               $JCT,                    REQED BY CAT                   X\n               $HASPEQU,                REQED TO DEFINE REGISTERS      X\n               $JQE,                    REQED BY HCT                   X\n               $PCE,                    REQED BY HCT                   X\n               $CAT,                    REQED BY HCT                   X\n               $HCT,                    REQED BY $SAVE, $RETURN, ETC.  X\n               $MIT,                    REQED BY $MODEND               X\n               $COMWORK,                REQED BY PROGRAM               X\n               $JOE,                    REQED BY $COMWORK              X\n               $TRP,                    REQED BY $TRACE                X\n               $DCT,                    REQED BY PROGRAM               X\n               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN)  DOCUMENTATION\n         PRINT ON,GEN,DATA\n***********************************************************************\n*                                                                     *\n*        EXIT 5 ENTRY POINT                                           *\n*                                                                     *\n***********************************************************************\n*\nEXIT5    $ENTRY BASE=R12,CSECT=YES\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n*\n***********************************************************************\n*                                                                     *\n*        TEST TO SEE IF OPERATOR ISSUED STOP OR HALT COMMAND          *\n*                                                                     *\n***********************************************************************\n*\n         CLI   COMVERB,C'P'        STOP COMMAND?\n         BE    EXT5OPRN            YES - GO CHECK OPERANDS\n         CLI   COMVERB,C'Z'        HALT COMMAND?\n         BE    EXT5OPRN            YES - GO CHECK OPERANDS\n         B     EXT5RET0            ELSE RETURN TO JES2\n*\n***********************************************************************\n*                                                                     *\n*        TEST OPERANDS TO SEE ANY APPLY TO A XEROX PRINTER            *\n*                                                                     *\n***********************************************************************\n*\nEXT5OPRN C     R5,=F'0'            VERIFY THERE IS AN OPERAND POINTER\n         BE    EXT5RET0            NO OPERAND POINTER - RETURN TO JES2\n         MVC   $USER1(8),=CL8'PRTX'\n         L     R8,0(R5)            LOAD OPERAND POINTER\n         C     R8,=F'0'            VERIFY THERE IS AN OPERAND\n         BE    EXT5RET0            NO OPERAND - RETURN TO JES2\n         CLC   0(3,R8),=CL3'PRT'   IF NOT PRT (SHORT FORM)\n         BNE   EXT5LONG            THEN TRY LONG FORM OF NAME\n         LA    R8,3(,R8)           ELSE MOVE R8 TO PRINTER NUMBER\n         B     EXT5CHKN              AND GO CHECK PRINTER NUMBER\nEXT5LONG CLC   0(7,R8),=CL7'PRINTER' IF NOT PRINTER (LONG FORM)\n         BNE   EXT5OPRC            THEN TRY NEXT OPERAND\n*\n         LA    R8,7(,R8)           ELSE MOVE R8 TO PRINTER NUMBER\nEXT5CHKN MVC   $USER1+3(1),0(R8)\n         USING DCT,R9\n         LA    R9,$PRTDCT-(DCTCHAIN-DCT)   ELSE GET START OF POOL2\n*\nDDYNLOOP ICM   R9,B'1111',DCTCHAIN         GET NEXT DCT\n         BZ    EXT5RET0\n         CLC   DCTDEVN,$USER1              IS THIS THE DCT...\n         BNE   DDYNLOOP\n*\n         TM    DCTPPSW2,DCTSDSSW           IF SEPDS=Y\n         BNO   EXT5OPRC                    NOT A XEROX PRINTER\n         MVI   DCTUSER0,X'00'\n*\nEXT5OPRC CR    R5,R7               WAS THAT THE LAST OPERAND?\n         BE    EXT5RET0            YES - RETURN TO JES2\n         AR    R5,R6               INCREMENT R5 BY R6 (VALUE OF 4)\n         B     EXT5OPRN               AND GO CHECK NEXT OPERAND\n*\n***********************************************************************\n*                                                                     *\n*        RETURN TO JES2                                               *\n*                                                                     *\n***********************************************************************\n*\nEXT5RET0 LA    R15,0              SET RETURN CODE TO 0 - NEXT EXIT 5\n         $RETURN RC=(R15)         RETURN TO JES2\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT 5 DATA AREAS                                            *\n*                                                                     *\n***********************************************************************\n*\n         LTORG\n         $MODEND\n         END\n*\n************************ END OF MODULE EXIT5 **************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSJES$15": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x01s\\x01s\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 371, "newlines": 371, "modlines": 0, "user": "FILE060"}, "text": "       TITLE 'JES2 USER EXIT 15 - OUTPUT DATA SET / COPY SELECT'\n*************************COMMENT BLOCK********************************\n*                                                                    *\n*              OUTPUT DATA SET / COPY SELECT   SP 2.1.5              *\n*                                                                    *\n*   PURPOSE:                                                         *\n*                                                                    *\n*      1. TO CHANGE TRANSLATE TABLE FOR REMOTE PRINTERS              *\n*                                                                    *\n*      2. TO SEND DJDE TO XEROX PRINTER                              *\n*                                                                    *\n*   ENTRY POINT = SSJES$15                                           *\n*                                                                    *\n*   (REGISTERS)  ENTRY AND RETURN:                                   *\n*                                                                    *\n*      R0    =0 DATA SET SELECT                                      *\n*            =4 COPY OF A DATA SET                                   *\n*      R1    ADDRESS OF PARAMETER LIST                               *\n*            WORD 1   (+0) NUMBER OF COPIES OF DATA SET TO PRINT     *\n*            WORD 2   (+4) ADDR OF THE WORK JOE                      *\n*            WORD 3   (+8) ADDR OF JCT                               *\n*            WORD 4   (+12) ADDR OF PDDB                             *\n*            WORD 5   (+16) ADDR OF DCT                              *\n*            WORD 6   (+20) NUMBER OF COPIES CURRENTLY PRINTED       *\n*            WORD 7   (+24) PRINT TRANSLATE TABLE ADDRESS            *\n*            WORD 8   (+28) CCW TRANSLATE TABLE ADDRESS              *\n*            WORD 9   (+32) COPY GROUP ADDRESS                       *\n*            WORD 10  (+36) CURRENT COPY GROUP COUNT                 *\n*      R2-R10 SET AFTER ENTRY AND SHOW PROGRAM USE OF REGISTERS      *\n*      R2    N/A                                 UNCHANGED           *\n*      R3    ADDRESS FROM $GETBUF                                    *\n*      R4    DCT ADDRESS                                             *\n*      R5    WORK REGISTER                                           *\n*      R6    WORK REGISTER                                           *\n*      R7    WORK REGISTER                                           *\n*      R8    N/A                                                     *\n*      R9    BUFSTART ADDRESS                                        *\n*      R10   N/A                                                     *\n*      R11   HCT ADDRESS                         UNCHANGED           *\n*      R12   BASE REGISTER FOR PROGRAM           UNCHANGED           *\n*      R13   PCE ADDRESS                         UNCHANGED           *\n*      R14   RETURN ADDRESS                      UNCHANGED           *\n*      R15   ENTRY ADDRESS                       RETURN CODE         *\n*                                                                    *\n*      VALID RETURN CODES:                                           *\n*                                                                    *\n*            0  CONTINUE NORMAL PROCESSING                           *\n*            4  SAME AS 0                                            *\n*            8  DO NOT SELECT THIS PDDB (R0 = 0 ONLY)                *\n*                                                                    *\n*   JES2 MACROS USED:                                                *\n*                                                                    *\n*      $HASPGBL, $MODULE, $BUFFER, $JCT, $JQE, $PCE, $DCT,           *\n*      $CAT, $HCT, $MIT, $ENTRY, $SAVE, $RETURN, $MODEND             *\n*      $TRP, $TRACE\n*                                                                    *\n**********************************************************************\n         COPY   $HASPGBL          COPY HASPGBL PARAMETERS\n         PRINT  ON,GEN\nSSJES$15 $MODULE $BUFFER,                                              X\n               RPL,                     REQED BY $BUFFER               X\n               $JCT,                    REQED BY CAT                   X\n               $HASPEQU,                REQED TO DEFINE REGISTERS      X\n               $JQE,                    REQED BY HCT                   X\n               $PCE,                    REQED BY HCT                   X\n               $CAT,                    REQED BY HCT                   X\n               $HCT,                    REQED BY $SAVE, $RETURN, ETC.  X\n               $MIT,                    REQED BY $MODEND               X\n               $TRP,                    REQED BY $TRACE                X\n               $DCT,                    REQED BY PROGRAM               X\n               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN)  DOCUMENTATION\n       TITLE 'JES2 USER EXIT 15 - OUTPUT DATA SET / COPY SELECT'\n         PRINT ON,GEN,DATA\nUSRXIT15 $ENTRY BASE=R12\n         $SAVE\n         LR    R12,R15            LOAD BASE REGISTER\n         SLR   R15,R15                 PRESET RETURN CODE\n         C     R0,=F'4'                IS THIS COPY OF A DATASET\n         BNE   TRANSET                 NO, FORGET IT\n         L     R4,16(R1)               GET DCT ADDRESS\n         USING DCT,R4\n         SPACE 1\n*        SEE IF PRINTER IS PRINTING DATA SET SEPERATORS\n*\n         TM    DCTPPSW2,DCTSDSSW        SEPDS SET TO\n         BNO   RETURN                   NO THEN EXIT\n         SPACE 1\n***************************************************************\n* GET WORK AREA\n***************************************************************\nGETWORK $GETBUF TYPE=HASP,WAIT=YES,FIX=YES    GET WORK AREA\n         LR    R3,R1                  SAVE BUFFER ADDR\n         USING IOBDSECT,R3\n         LA    R9,BUFSTART\n         $SEPPDIR (R3)                SEND A PDIR IN CASE SNA\n         SPACE 1\nX97INIT  DS     0H       XEROX 9700 PROCESSING\n         SPACE 1\n*        BUILD THE DJDE BY SEARCH THRU THE FORM TABLE\n         LA    R5,FORMS            POINT TO BEGINNING OF TABLE\n         B     FRMCHK\nFRMLOOP  CLI   X97XRTBL(R5),X'00'  AT END OF TABLE?\n         BE    PRPUT               GO PLANT THE DEFAULT DJDE\n         LA    R5,X97XRTBL(R5)     POINT TO NEXT TABLE ENTRY\nFRMCHK   CLC   DCTFORMS,0(R5)      IS THIS THE FORM ?\n         BE    PRPUT               YES, GO USE IT THEN\n         BNE   FRMLOOP             NO, GO CHECK SOME MORE\n         SPACE 1\n         L     R5,8(R5)            POINT TO THE DJDES\nPRPUT    SLR   R6,R6 CLEAR R6\n         IC    R6,12(R5)           PUT PAPER TYPE IN R6\n         CLC   DCTUSER0(1),12(R5)  PAPER SAME AS LAST TIME\n         BE    SAMEPAPR            YES -  SKIP PAPER CHANGE\n         MVC   DCTUSER0(1),12(R5)  SAVE CURRENT PAPER IN USER FIELD\n         MH    R6,=H'80'           MULTIPLY BY ENTRY LENGTH\n         LA    R7,PAPER            ADD BASE\n         AR    R7,R6                    ADDRESS\n         MVC   1(80,R9),0(R7)      MOVE PAPER CHANGE DJDE TO BUFFER\n         BAL   R10,PUTDJDE         OUTPUT IT\nSAMEPAPR L     R5,8(R5)            POINT TO THE DJDES\nDJDELOOP CLI   0(R5),X'00'         IS THIS END OF DJDE FOR ENTRY?\n         BE    FREEBUF             YES\n         MVC   1(80,R9),0(R5)      COPY THIS DJDE INTO OUTPUT BUFFER\n         BAL   R10,PUTDJDE\n         LA    R5,80(R5)           POINT TO NEXT DJDE ENTRY LINE\n         B     DJDELOOP\nPUTDJDE  MVI   0(R9),X'01'         WRITE SUPRESS SPACING\n         LR    R1,R9               POINT TO BUFFER\n         LA    R0,81          ***  SET DATA LENGTH\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         BR    R10\n         SPACE 1\nTRANSET  LA    R15,0              SET RETURN CODE IN REGISTER 15\n         L     R4,16(,R1)         LOAD ADDRESS OF DCT\n         USING DCT,R4\n         TM    DCTDEVTP,DCTRPR    IS IT A REMOTE\n         BNO   RETURN             NO GET OUT\n         LA    R5,TRANSTBL        PUT TABLE ADDRESS IN R5\n         ST    R5,24(,R1)         PUT NEW TRANSLATE TABLE\n*                                    ADDRESS INTO PARM LIST\n         B     RETURN\n         SPACE 1\nFREEBUF  DS     0H\n         $FREEBUF (R3)\n         SLR   R15,R15\n         SPACE 1\nRETURN   EQU   *\n         $RETURN RC=(R15)         TELL HASPRDR TO CONTINUE\n         LTORG\n         DROP  R4\n         EJECT\n         DC    0F'0'\n*\nTRANSTBL DC    256X'40'\n         PRINT DATA\n         ORG   TRANSTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   TRANSTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   TRANSTBL+C'\u00a6'\n         DC    C'\u00a6,%_>?'\n         ORG   TRANSTBL+C'`'\n         DC    C'`:#@''=\" '\n         DC    C'abcdefghi'\n         ORG   TRANSTBL+C'j'\n         DC    C'jklmnopqr'\n         ORG   TRANSTBL+C'~'\n         DC    C'~stuvwxyz'\n         ORG   TRANSTBL+C'{'\n         DC    C'{ABCDEFGHI'\n         ORG   TRANSTBL+C'}'\n         DC    C'}JKLMNOPQR'\n         ORG   TRANSTBL+C'\\'\n         DC    C'\\ STUVWXYZ'\n         ORG   TRANSTBL+C'0'\n         DC    C'0123456789'\n         ORG\n*\nPAPER    EQU   *\n  DC CL80'$$$$DJDE OTEXT=(''INVALID PAPER REQUESTED'',WAIT),; '\n  DC CL80'$$$$DJDE OTEXT=(''LOAD WHITE NOHOLE PAPER'',WAIT),; '\n  DC CL80'$$$$DJDE OTEXT=(''LOAD WHITE PAPER 3 HOLES OUT'',WAIT),; '\n  DC CL80'$$$$DJDE OTEXT=(''LOAD WHITE PAPER 3 HOLES IN'',WAIT),; '\n  DC CL80'$$$$DJDE OTEXT=(''LOAD PERF 358 WITH PERF TO LEFT'',WAIT),; '\n  DC CL80'$$$$DJDE OTEXT=(''LOAD BLS3023CA PAPER FACE DOWN'',WAIT),; '\n  DC CL80'$$$$DJDE OTEXT=(''LOAD BLS3023V PAPER FACE DOWN'',WAIT),; '\n         SPACE 3\n*                    CLASS FORM/DJDE XREF TABLE\n* LAST ENTRY IS THE DEFAULT, SO ADD NEW ENTRIES BEFORE THE LAST ONE\n*\n*              CL8'********' ----> FORM NAME FORM JCL\n*                            A(NNNNN) ----> ADDRESS OF DJDE IMAGES\n*                                     ,AL1(N) ----> PAPER OFFSET\n*                                          1  ---  NOHOLE\n*                                          2  ---  3 HOLE DUPLEX\n*                                          3  ---  3 HOLE SIMPLEX\n*                                          4  ---  PERF 358\n*                                          5  ---  BLS 3023CA\n*                                          6  ---  BLS 3023V\n*                                            ,CL3'   ' ----> FILLER\n*\n         DC    0F'0'              FORCE ALIGNMENT OF FORM NAMES\nFORMS    EQU   *\n         DC    CL8'PQGW    ',A(FRMPQG),AL1(1),CL3'   '\nX97XRTBL EQU   *-FORMS      LENGTH OF ONE ENTRY\n         DC    CL8'LSGW    ',A(FRMLSG),AL1(1),CL3'   '\n         DC    CL8'LDGW    ',A(FRMLDG),AL1(1),CL3'   '\n         DC    CL8'PSNW    ',A(FRMPSN),AL1(1),CL3'   '\n         DC    CL8'PDNW    ',A(FRMPDN),AL1(1),CL3'   '\n         DC    CL8'PQNW    ',A(FRMPQN),AL1(1),CL3'   '\n         DC    CL8'LSNW    ',A(FRMLSN),AL1(1),CL3'   '\n         DC    CL8'LDNW    ',A(FRMLDN),AL1(1),CL3'   '\n         DC    CL8'1061    ',A(FRMNDG),AL1(1),CL3'   '\n         DC    CL8'NDGW    ',A(FRMNDG),AL1(1),CL3'   '\n         DC    CL8'NSGW    ',A(FRMNSG),AL1(1),CL3'   '\n         DC    CL8'NONE    ',A(FRMNONE),AL1(1),CL3'   '\n         DC    CL8'NONES3  ',A(FRMNONE),AL1(3),CL3'   '\n         DC    CL8'NONED3  ',A(FRMNONE),AL1(2),CL3'   '\n         DC    CL8'S358    ',A(FRMNONE),AL1(4),CL3'   '\n         DC    CL8'SIRP    ',A(FRMSIRP),AL1(1),CL3'   '\n         DC    CL8'SIRT    ',A(FRMSIRT),AL1(1),CL3'   '\n         DC    CL8'SL10    ',A(FRMLET1),AL1(1),CL3'   '\n         DC    CL8'SLETTER1',A(FRMLET1),AL1(1),CL3'   '\n         DC    CL8'SLETTER2',A(FRMLET2),AL1(1),CL3'   '\n         DC    CL8'SLETTER3',A(FRMLET3),AL1(1),CL3'   '\n         DC    CL8'SLETTER4',A(FRMLET4),AL1(1),CL3'   '\n         DC    CL8'SLETTER5',A(FRMLET5),AL1(1),CL3'   '\n         DC    CL8'SLETTERA',A(FRMLETA),AL1(1),CL3'   '\n         DC    CL8'SD2W    ',A(FRMSD23),AL1(1),CL3'   '\n         DC    CL8'SS2W    ',A(FRMSS23),AL1(1),CL3'   '\n         DC    CL8'PQG3    ',A(FRMPQG3),AL1(2),CL3'   '\n         DC    CL8'LSG3    ',A(FRMLSG3),AL1(3),CL3'   '\n         DC    CL8'LDG3    ',A(FRMLDG3),AL1(2),CL3'   '\n         DC    CL8'SSN3    ',A(FRMPSN),AL1(3),CL3'   '\n         DC    CL8'PSN3    ',A(FRMPSN3),AL1(3),CL3'   '\n         DC    CL8'SDN3    ',A(FRMSDN3),AL1(2),CL3'   '\n         DC    CL8'SD23    ',A(FRMSD23),AL1(2),CL3'   '\n         DC    CL8'SS23    ',A(FRMSS23),AL1(3),CL3'   '\n         DC    CL8'PDN3    ',A(FRMPDN3),AL1(2),CL3'   '\n         DC    CL8'PQN3    ',A(FRMPQN3),AL1(2),CL3'   '\n         DC    CL8'LSN3    ',A(FRMLSN3),AL1(3),CL3'   '\n         DC    CL8'LDN3    ',A(FRMLDN3),AL1(2),CL3'   '\n         DC    CL8'NDG3    ',A(FRMNDG3),AL1(2),CL3'   '\n         DC    CL8'NSG3    ',A(FRMNSG3),AL1(3),CL3'   '\n         DC    CL8'BLS3023C',A(FRM3023),AL1(5),CL3'   '\n         DC    CL8'BLS3023V',A(FRM3023),AL1(6),CL3'   '\n         DC    CL8'BLS3023T',A(FRM3023),AL1(1),CL3'   '\n         DC    CL8'1461    ',A(FRMLDG3),AL1(2),CL3'   '  DEFAULT FORM\n         DC    X'00'  END OF TABLE\n*\nFRMNONE  EQU   *\n         DC    X'00'  END OF TABLE\nFRMPQG   EQU   *\n  DC CL80'$$$$DJDE FORMS=QD1461,FORMAT=PDEPQ,BOF=132,END; '\n         DC    X'00'  END OF TABLE\nFRMLSG   EQU   *\n  DC CL80'$$$$DJDE DUPLEX=NO,END; '\n         DC    X'00'  END OF TABLE\nFRMLDG   EQU   *\n  DC CL80'$$$$DJDE SIDE=NUFRONT,END; '\n         DC    X'00'  END OF TABLE\nFRMPSN   EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,DUPLEX=NO,END; '\n         DC    X'00'  END OF TABLE\nFRMPDN   EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,SIDE=NUFRONT,END; '\n         DC    X'00'  END OF TABLE\nFRMSD23  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,SIDE=NUFRONT, '\n  DC CL80'$$$$DJDE SHIFT=YES,FONTS=(P07TDC),BEGIN=(.5,.5),END; '\n         DC    X'00'  END OF TABLE\nFRMSS23  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,DUPLEX=NO, '\n  DC CL80'$$$$DJDE FONTS=(P07TDC),BEGIN=(.5,.5),END; '\n         DC    X'00'  END OF TABLE\nFRMPQN   EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPQ,BOF=132,END; '\n         DC    X'00'  END OF TABLE\nFRMLSN   EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,DUPLEX=NO,END; '\n         DC    X'00'  END OF TABLE\nFRMLDN   EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,SIDE=NUFRONT,END; '\n         DC    X'00'  END OF TABLE\nFRMNSG   EQU   *\n  DC CL80'$$$$DJDE FORMS=GB1061,FORMAT=PDENS,DUPLEX=NO,END; '\n         DC    X'00'  END OF TABLE\nFRMNDG   EQU   *\n  DC CL80'$$$$DJDE FORMS=GB1061,FORMAT=PDENS,SIDE=NUFRONT,END; '\n         DC    X'00'  END OF TABLE\nFRMLET1  EQU   *\n  DC CL80'$$$$DJDE FORMS=LETTER,FORMAT=PDEPS,BEGIN=(1.5,.3),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAC),END;  '\n         DC    X'00'  END OF TABLE\nFRMLET2  EQU   *\n  DC CL80'$$$$DJDE FORMS=LETTER,FORMAT=PDEPS,BEGIN=(1.5,.3),;  '\n  DC CL80'$$$$DJDE FONTINDEX=(0,ONE),DATA=(1,132),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAC,P08TBC),END;  '\n         DC    X'00'  END OF TABLE\nFRMLET3  EQU   *\n  DC CL80'$$$$DJDE FORMS=LETTES,FORMAT=PDEPS,BEGIN=(1.5,.3),;  '\n  DC CL80'$$$$DJDE FONTINDEX=(0,ONE),DATA=(1,132),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAC,P08TBC),END;  '\n         DC    X'00'  END OF TABLE\nFRMLET4  EQU   *\n  DC CL80'$$$$DJDE FORMS=LETTEN,FORMAT=PDEPS,BEGIN=(1.5,.3),;  '\n  DC CL80'$$$$DJDE FONTINDEX=(0,ONE),DATA=(1,132),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAC,P08TBC),END;  '\n         DC    X'00'  END OF TABLE\nFRMLET5  EQU   *\n  DC CL80'$$$$DJDE FORMS=LETTES,FORMAT=PDEPS,BEGIN=(1.5,.3),;  '\n  DC CL80'$$$$DJDE FONTINDEX=(0,ONE),DATA=(1,132),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P07TDC,P07ITA,P07TCC),END;  '\n         DC    X'00'  END OF TABLE\nFRMLETA  EQU   *\n  DC CL80'$$$$DJDE FORMS=LETTEA,FORMAT=PDEPS,BEGIN=(1.5,.3),;  '\n  DC CL80'$$$$DJDE FONTINDEX=(0,ONE),DATA=(1,132),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAC,P08TBC),END;  '\n         DC    X'00'  END OF TABLE\nFRMSIRP  EQU   *\n  DC CL80'$$$$DJDE FORMS=SIRP,FORMAT=PDEPS,BEGIN=(.4,.5),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAB),END;  '\n         DC    X'00'  END OF TABLE\nFRMSIRT  EQU   *\n  DC CL80'$$$$DJDE FORMS=SIRT,FORMAT=PDEPS,BEGIN=(.4,.5),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAB,P08TBB),MODIFY=CMCERT,END;'\n         DC    X'00'  END OF TABLE\nFRMPQG3  EQU   *\n  DC CL80'$$$$DJDE FORMS=QD1461,FORMAT=PDEPQ,BOF=132,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMLSG3  EQU   *\n  DC CL80'$$$$DJDE DUPLEX=NO,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMLDG3  EQU   *\n  DC CL80'$$$$DJDE SIDE=NUFRONT,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMPSN3  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,DUPLEX=NO,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMPDN3  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,SIDE=NUFRONT,SHIFT=YES,END;'\n         DC    X'00'  END OF TABLE\nFRMSDN3  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,SIDE=NUFRONT,SHIFT=YES,;'\n  DC CL80'$$$$DJDE BEGIN=(.5,.05),END;'\n         DC    X'00'  END OF TABLE\nFRMPQN3  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPQ,BOF=132,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMLSN3  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,DUPLEX=NO,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMLDN3  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,SIDE=NUFRONT,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMNSG3  EQU   *\n  DC CL80'$$$$DJDE FORMS=GB1061,FORMAT=PDENS,DUPLEX=NO,SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRMNDG3  EQU   *\n  DC CL80'$$$$DJDE FORMS=GB1061,FORMAT=PDENS,SIDE=NUFRONT,;'\n  DC CL80'$$$$DJDE SHIFT=YES,END; '\n         DC    X'00'  END OF TABLE\nFRM3023  EQU   *\n  DC CL80'$$$$DJDE FORMS=NONE,FORMAT=PDEPS,BEGIN=(0,.26),;  '\n  DC CL80'$$$$DJDE FONTINDEX=(0,ONE),DATA=(1,132),;  '\n  DC CL80'$$$$DJDE DUPLEX=NO,FONTS=(P08TAC,BCD40P),END;  '\n         DC    X'00'  END OF TABLE\n*\n         LTORG\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRALLOC": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FILE060"}, "text": "/* THIS CLIST ALLOCATES THE SOFTWARE STATUS DATASETS AND         */\n/* EXECUTES THE ISPF APPLICATION. CHANGE THE HLQ \"SSU1.SOFTSTAT\" */\n/* AS NEEDED. COPY THIS CLIST TO A CLIST LIBRARY ALLOCATED TO    */\n/* YOUR TSO/ISPF.                                                */\n/*                                                               */\n    ALLOC DA('SSU1.SOFTSTAT.INDXTBL') FILE(SSRINTBL) SHR REUSE\n    ALLOC DA('SSU1.SOFTSTAT.PRODTBL') FILE(SSRPRTBL) SHR REUSE\n    ALLOC DA('SSU1.SOFTSTAT.HISTORY') FILE(SSRHSTRY) SHR REUSE\n    ALLOC DA('SSU1.SOFTSTAT.PTFPATH') FILE(SSRHSTR1) SHR REUSE\n    ALLOC DA('SSU1.SOFTSTAT.FMIDPATH') FILE(SSRHSTR2) SHR REUSE\n    ISPEXEC SELECT PGM(SSR01AR)\n    FREE DA('SSU1.SOFTSTAT.INDXTBL')\n    FREE DA('SSU1.SOFTSTAT.PRODTBL')\n    FREE DA('SSU1.SOFTSTAT.HISTORY')\n    FREE DA('SSU1.SOFTSTAT.PTFPATH')\n    FREE DA('SSU1.SOFTSTAT.FMIDPATH')\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRHLP00": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE060"}, "text": "%TUTORIAL --------- SOFTWARE STATUS REPORT - MENU ---------------------TUTORIAL\n%OPTION ===>_ZCMD                                                             +\n+\n      This is the menu for the Software Status Report.\n\n Option 0: To add new products and new PTF/MODS to existing products.\n\n Option 1: To list or update product maintenance detail entries. This is the\n           lowest (most detailed) level of the software status database.\n\n Option 2: To list product names and acronyms only, with a select option to\n           view maintenance detail on a product. This is the middle level of\n           the software status database.\n\n Option 3 & 4: To list Vendors and Categories respectively, with a select\n           option to view products within vendor/category.\n\n Option P: To produce a formatted hardcopy of the Software Status Report.\n\n      A single search option may be entered for Options 1 through 4.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SSRHLP30": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE060"}, "text": "%TUTORIAL --- SOFTWARE STATUS REPORT - ADD PTF/MOD ENTRY --------------TUTORIAL\n%COMMAND ===>_ZCMD                                                            +\n+\n      This panel allows you to add new products and product maintenance entries\n onto the Software Status database. Up to 5 entries can be added at one time\n from this panel.\n      If you are adding a new product (PRODUCT NAME must be unique), enter \"Y\"\n under NEW PRODUCT, and enter (in order) ACRONYM (optional), RELEASE\n (optional), FMID (optional), ORDER number (optional), and PRODUCT NAME\n (required). PRODUCT NAME can be up to two lines of 32 characters each and is\n entered under ACRONYM.\n      If you are applying maintenance to an existing product, leave NEW PRODUCT\n column blank. Enter either the ACRONYM or the PRODUCT NAME. (NOTE: Since\n ACRONYMs need not be unique, you may not get the intended product when using\n ACRONYM). If you are not sure of the ACRONYM or PRODUCT NAME, enter an\n an asterisk (*) in the ACRONYM or PRODUCT NAME field; you will be shown a list\n of existing products from which you may select.\n      Upon pressing ENTER, you will see the most recent RELEASE, FMID, and\n ORDER for any previously existing products. You can change any field before\n pressing ENTER again.(NOTE: If you change PRODUCT NAME and the new NAME\n does not already exist, place a \"Y\" in the NEW PRODUCT column. This will add\n a new product to the database). Press ENTER again to to continue.\n      END will cancel the addition of new entries.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRHLP31": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE060"}, "text": "%TUTORIAL --------- SOFTWARE STATUS REPORT - ADD NEW PRODUCT ----------TUTORIAL\n%COMMAND ===>_ZCMD                                                            +\n+\n      This panel is displayed once for every new product you added under the\n previous ADD PTF/MOD ENTRY panel. This panel allows you to change the\n ACRONYM, PRODUCT NAME, RELEASE, FMID and ORDER NUMBER you entered in the\n previous panel, and requires you to enter a VENDOR and CATEGORY for the new\n product.\n      Enter the product's VENDOR. If the VENDOR does not already exist on the\n Software Status database, enter a \"Y\" after NEW VENDOR. If the VENDOR already\n exists, enter the name exactly as it appears on the database and leave NEW\n VENDOR blank. If you are not sure of the VENDOR, enter an asterisk (*) in the\n VENDOR field; you will be shown a list of existing VENDORs from which you may\n select.\n      Follow the same procedure for CATEGORY (CATEGORY is generally descriptive\n of the product's function; examples: OS, TSO, TELEPROCESSING, OPERATIONS\n MANAGEMENT etc. VENDOR and CATEGORY are used as indices both for on-line\n display of PRODUCTs and for organizing the hard copy Software Status Report).\n\n      Press ENTER to process the new product or END to return to the previous\n ADD PTF/MOD ENTRY panel without processing.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRHLP32": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE060"}, "text": "%TUTORIAL --------- SOFTWARE STATUS REPORT - LIST PRODUCT -------------TUTORIAL\n%COMMAND ===>_ZCMD                                                            +\n+\n      This panel displays existing products on the Software Status database.\n Products are displayed alphabetically by PRODUCT NAME.\n      If you arrived here from the Software Status MENU (Option 2), display\n is limited to products fitting any search argument you may have specified. If\n no search criteria was specified, all existing products are displayed.\n Selecting a product (S) will display detail maintenance history for that\n product.\n      If you arrived here from the LIST VENDOR or LIST CATEGORY panel, display\n is limited to products within the VENDOR or CATEGORY you selected. Selecting a\n product (S) will display detail maintenance history for the product.\n      When displaying products for a VENDOR or CATEGORY, you have the option of\n changing the VENDOR or CATEGORY field. When you do so, all products under the\n old VENDOR or CATEGORY will now fall under the new one. If the VENDOR or\n CATEGORY has no products, you are given the option to delete the VENDOR or\n CATEGORY. Type a \"D\" in the DELETE field & press ENTER.\n      If you arrived here from the ADD PTF/MOD ENTRY panel (by typing an\n asterisk in ACRONYM or PRODUCT NAME), all existing products are displayed.\n Selecting a product (S) will cause the PRODUCT and its most recent FMID, ORDER\n and RELEASE to be placed in the ADD PTF/MOD panel entry. (NOTE: You will be\n brought to this panel once for each entry you placed an asterisk in).\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRHLP33": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x07\\x00\\x07\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "FILE060"}, "text": "%TUTORIAL --------SOFTWARE STATUS REPORT - LIST VENDOR/CATEGORY--------TUTORIAL\n%COMMAND ===>_ZCMD                                                            +\n+\n      This panel displays existing VENDORs or CATEGORYs on the Status database.\n Selcting a VENDOR or CATEGORY (S) will display all products within that\n VENDOR or CATEGORY.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SSRHLP34": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FILE060"}, "text": "%TUTORIAL --------SOFTWARE STATUS REPORT - PRODUCT HISTORY ------------TUTORIAL\n%COMMAND ===>_ZCMD                                                            +\n+\n      This panel displays detailed maintenance history entries for one product.\n All fields are changeable by overtyping. Changing the VENDOR or CATEGORY name\n will change VENDOR or CATEGORY for this product only (unlike the LIST PRODUCT\n panel). Changing the DATE INSTALLED will cause the maintenance entries to be\n reordered on the screen, since they are listed in chronological order.\n Individual maintenance entries may be deleted, or the entire product and all\n its maintenance entries can be deleted (DELETE PRODUCT).\n      Eight maintenance entries are displayed on this panel. DOWN will either\n display the next eight maintenance entries for this same product, if there are\n any, or display the next product within the current search argument. UP always\n moves back to the first maintenance entry of the prior product within the\n current search argument.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SSRMS00": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE060"}, "text": "SSRMS000 'MULTIPLE ARGUMENTS'\n'ENTER ONLY ONE SEARCH ARGUMENT FOR LIST FUNCTIONS'\nSSRMS001 'INVALID ARGUMENT'\n'THIS SEARCH ARGUMENT DOES NOT APPLY TO THE OPTION SELECTED'\nSSRMS002 'NO MATCH FOUND'\n'NO ENTRIES MATCHING THIS SEARCH ARGUMENT WERE FOUND'\nSSRMS003 'ENTER REQUIRED FIELDS'\n'REQUIRED: DATE, PRODUCT NAME IF NEW PROD, PROD NAME OR ACRONYM IF NOT'\nSSRMS004 'INVALID DATE'\n'DATE MUST BE VALID NUMERIC MONTH, DAY & YEAR'\nSSRMS005 'ENTER PRODUCT NAME'\n'PRODUCT NAME REQUIRED WHEN ADDING NEW PRODUCT'\nSSRMS006 'CONFIRM OR CHANGE'\n'CONFIRM OR CORRECT ALL FIELDS & PRESS ENTER'\nSSRMS007 'PRODUCT NOT FOUND'\n'RETRY OR USE \"*\" TO LIST & SELECT; IF ADDING PRODUCT, SPECIFY NEW'\nSSRMS008 'DUPLICATE MOD DATE'\n'AN ENTRY ALREADY EXISTS FOR THIS PRODUCT & DATE - ADD REJECTED'\nSSRMS009 'ENTER VENDOR NAME'\n'PRODUCT NAME, VENDOR AND CATEGORY ARE REQUIRED FOR NEW PRODUCT'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRMS01": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE060"}, "text": "SSRMS010 'ENTER CATEGORY NAME'\n'PRODUCT NAME, VENDOR AND CATEGORY ARE REQUIRED FOR NEW PRODUCT'\nSSRMS011 'DUPLICATE PRODUCT'\n'PRODUCT BY THIS NAME ALREADY EXISTS - ADD REJECTED'\nSSRMS012 'VENDOR NOT FOUND'\n'RETRY, SPECIFY NEW, OR USE \"*\" OPTION TO LIST & SELECT VENDORS'\nSSRMS013 'CATEGORY NOT FOUND'\n'RETRY, SPECIFY NEW, OR USE \"*\" OPTION TO LIST & SELECT CATEGORIES'\nSSRMS014 'INVALID SELECT CODE'\n'USE \"S\" TO SELECT'\nSSRMS015 'MULTIPLE SELECTIONS'\n'SELECT ONLY ONE ENTRY'\nSSRMS016 'INVALID COMMAND'\n'USE F TO PAGE FORWARD, B TO PAGE BACKWARD'\nSSRMS017 'AT END OF RECORDS'\n'NO MORE RECORDS MATCHING THIS QUERRY ARE AVAILABLE'\nSSRMS018 'DUPLICATE &HD1'\n'&HD1 BY THIS NAME ALREADY EXISTS - CHANGE REJECTED'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRMS30": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "FILE060"}, "text": "SSRMS300 'ENTER REQUIRED FIELDS'\n'REQUIRED: DATE, PRODUCT NAME IF NEW PROD, PROD NAME OR ACRONYM IF NOT'\nSSRMS301 'INVALID DATE'\n'DATE MUST BE VALID NUMERIC MONTH, DAY & YEAR'\nSSRMS302 'ENTER PRODUCT NAME'\n'PRODUCT NAME REQUIRED WHEN ADDING NEW PRODUCT'\nSSRMS303 'CONFIRM OR CHANGE'\n'CONFIRM OR CORRECT ALL FIELDS & PRESS ENTER'\nSSRMS304 'INVALID COMMAND'\n'DO NOT USE \"LIST\" UNLESS YOU ARE PROMPTED TO'\nSSRMS305 'PRODUCT NOT FOUND'\n'RETRY OR USE LIST OPTION TO SELECT; IF ADDING PRODUCT, SPECIFY NEW'\nSSRMS306 'DUPLICATE MOD DATE'\n'AN ENTRY ALREADY EXISTS FOR THIS PRODUCT & DATE - ADD REJECTED'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRMS90": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "FILE060"}, "text": "SSRMS900 'FILE OPEN ERROR'\n'ERROR OPENING &ERRFILE STATUS &FILESTAT'\nSSRMS901 'FILE READ ERROR'\n'ERROR READING &ERRFILE STATUS &FILESTAT'\nSSRMS902 'FILE WRITE ERROR'\n'ERROR WRITING &ERRFILE STATUS &FILESTAT'\nSSRMS903 'FILE CLOSE ERROR'\n'ERROR CLOSING &ERRFILE STATUS &FILESTAT'\nSSRMS904 'FILE START ERROR'\n'ERROR STARTING &ERRFILE STATUS &FILESTAT'\nSSRMS905 'FILE DELETE ERROR'\n'ERROR DELETING &ERRFILE RECORD STATUS &FILESTAT'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSRPNL00": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x89\\x00\\x89\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 137, "newlines": 137, "modlines": 0, "user": "FILE060"}, "text": "%------------------ SOFTWARE STATUS REPORT - MENU ------------------------------\n%OPTION ===>_ZCMD                                                              +\n+                                                                              +\n+                                                                              +\n% OPTIONS:                                                                     +\n%         0  +ADD ENTRIES +\n%         1  +LIST/UPDATE PRODUCT MAINTENANCE HISTORY\n%         2  +LIST SOFTWARE PRODUCTS+\n%         3  +LIST VENDORS                                                     +\n%         4  +LIST CATEGORIES                                                  +\n%         P  +PRINT SOFTWARE STATUS REPORT                                     +\n+                                                                              +\n+                                                                              +\n%     SEARCH ARGUMENT FOR LIST OPTIONS: +(ENTER ONE OR LEAVE BLANK FOR \"ALL\")  +\n+                                                                              +\n%         ACRONYM ===>_ACRNM           +                 (OPTION 1,2)          +\n%    PRODUCT NAME ===>_PRDN1                           + (OPTION 1,2)          +\n%                 ===>_PRDN2                           +                       +\n%         PTF/MOD ===>_PTFMD     +                       (OPTION 1,2)          +\n%            FMID ===>_FMID   +                          (OPTION 1,2)          +\n%          VENDOR ===>_VENDR                           + (OPTION 1,2,3)        +\n%        CATEGORY ===>_CTGRY                           + (OPTION 1,2,4)        +\n)INIT\n  .HELP = SSRHLP00\n  &ZCMD = &ZTRAIL\n  &ACRNM = ' '\n  &PRDN1 = ' '\n  &PRDN2 = ' '\n  &PTFMD = ' '\n  &FMID = ' '\n  &VENDR = ' '\n  &CTGRY = ' '\n  &SLCT = ' '\n  &PARM = ' '\n  &SRCHARG1 = ' '\n  &SRCHARG2 = ' '\n  .CURSOR = ZCMD\n  IF (&ERRT = N)\n    .MSG = SSRMS002\n  &ERRT = ' '\n)PROC\n  VER (&ZCMD,LIST,0,1,2,3,4,P,MSG=SSRMS016)\n  VER (&ZCMD,NONBLANK,MSG=SSRMS016)\n  &ZSEL = TRUNC (&ZCMD,;)\n  &ZCMD = .TRAIL\n  VER (&ZSEL,LIST,0,1,2,3,4,P)\n  IF (&ZSEL = 0)\n    &PARM = 'A '\n  IF (&PRDN1 \u00ac= ' ')\n    &SRCHARG1 = &PRDN1\n    &SLCT = 'P'\n    IF (&ZSEL \u00ac= 1,2)\n      .MSG=SSRMS001\n    IF (&ZSEL = 1)\n      &PARM = 'HP'\n    IF (&ZSEL = 2)\n      &PARM = 'PP'\n  IF (&PRDN2 \u00ac= ' ')\n    &SRCHARG2 = &PRDN2\n    IF (&SLCT \u00ac= 'P')\n      .MSG=SSRMS001\n  IF (&ACRNM \u00ac= ' ')\n    &SRCHARG1 = &ACRNM\n    IF (&SLCT = 'P')\n      &SLCT = ' '\n      .MSG=SSRMS000\n    &SLCT = 'Y'\n    IF (&ZSEL \u00ac= 1,2)\n      .MSG=SSRMS001\n    IF (&ZSEL = 1)\n      &PARM = 'HA'\n    IF (&ZSEL = 2)\n      &PARM = 'PA'\n  IF (&PTFMD \u00ac= ' ')\n    &SRCHARG1 = &PTFMD\n    IF (&SLCT \u00ac= ' ')\n      &SLCT = ' '\n      .MSG=SSRMS000\n    &SLCT = 'Y'\n    IF (&ZSEL \u00ac= 1,2)\n      .MSG=SSRMS001\n    IF (&ZSEL = 1)\n      &PARM = 'HT'\n    IF (&ZSEL = 2)\n      &PARM = 'PT'\n  IF (&FMID \u00ac= ' ')\n    &SRCHARG1 = &FMID\n    IF (&SLCT \u00ac= ' ')\n      &SLCT = ' '\n      .MSG=SSRMS000\n    &SLCT = 'Y'\n    IF (&ZSEL \u00ac= 1,2)\n      .MSG=SSRMS001\n    IF (&ZSEL = 1)\n      &PARM = 'HF'\n    IF (&ZSEL = 2)\n      &PARM = 'PF'\n  IF (&VENDR \u00ac= ' ')\n    &SRCHARG1 = &VENDR\n    IF (&SLCT \u00ac= ' ')\n      &SLCT = ' '\n      .MSG=SSRMS000\n    &SLCT = 'Y'\n    IF (&ZSEL = 0,4,P)\n      .MSG=SSRMS001\n    IF (&ZSEL = 1)\n      &PARM = 'HV'\n    IF (&ZSEL = 2)\n      &PARM = 'PV'\n    IF (&ZSEL = 3)\n      &PARM = 'VV'\n  IF (&CTGRY \u00ac= ' ')\n    &SRCHARG1 = &CTGRY\n    IF (&SLCT \u00ac= ' ')\n      &SLCT = ' '\n      .MSG=SSRMS000\n    IF (&ZSEL = 0,3,P)\n      .MSG=SSRMS001\n    IF (&ZSEL = 1)\n      &PARM = 'HC'\n    IF (&ZSEL = 2)\n      &PARM = 'PC'\n    IF (&ZSEL = 4)\n      &PARM = 'CC'\n  IF (&PARM = '  ')\n    IF (&ZSEL = 1)\n      &PARM = 'HP'\n    IF (&ZSEL = 2)\n      &PARM = 'PP'\n    IF (&ZSEL = 3)\n      &PARM = 'VV'\n    IF (&ZSEL = 4)\n      &PARM = 'CC'\n    IF (&ZSEL = P)\n      &PARM = 'L '\n  &SLCT = ' '\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRPNL30": {"ttr": 1556, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00q\\x00q\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 113, "newlines": 113, "modlines": 0, "user": "FILE060"}, "text": ")ATTR\n  + TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  % TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  { TYPE(INPUT) INTENS(&INTND) JUST(RIGHT)\n  _ TYPE(INPUT) INTENS(LOW) JUST(LEFT)\n  | TYPE(INPUT) INTENS(&INTN1)\n  @ TYPE(INPUT) INTENS(&INTN2)\n  # TYPE(INPUT) INTENS(&INTN3)\n  $ TYPE(INPUT) INTENS(&INTN4)\n  \u00ac TYPE(INPUT) INTENS(&INTN5)\n)BODY\n%---------- SOFTWARE STATUS REPORT - ADD PTF/MOD ENTRY -------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n%       PTF/MOD ===>_PTFMD     % DATE INSTALLED ===>{MM{DD{YY+(MONTH,DAY,YEAR)\n+\n%  NEW                                                                         +\n%PRODUCT?   ACRONYM/PRODUCT NAME:             RELEASE:     FMID:   ORDER:      +\n+  |Z%===> |ACRNM1          +                _RELS1       _FMID1  _ORDR1       +\n+          |PRDN11                          +\n+          |PRDN21                          +\n+  @Z%===> @ACRNM2          +                _RELS2       _FMID2  _ORDR2       +\n+          @PRDN12                          +\n+          @PRDN22                          +\n+  #Z%===> #ACRNM3          +                _RELS3       _FMID3  _ORDR3       +\n+          #PRDN13                          +\n+          #PRDN23                          +\n+  $Z%===> $ACRNM4          +                _RELS4       _FMID4  _ORDR4       +\n+          $PRDN14                          +\n+          $PRDN24                          +\n+  \u00acZ%===> \u00acACRNM5          +                _RELS5       _FMID5  _ORDR5       +\n+          \u00acPRDN15                          +\n+          \u00acPRDN25                          +\n+                    PRESS ENTER TO PROCESS ADDS; \"END\" TO CANCEL              +\n)INIT\n  .HELP = SSRHLP30\n  .ZVARS = '(C1,C2,C3,C4,C5)'\n  &INTND = LOW\n  &INTN1 = LOW\n  &INTN2 = LOW\n  &INTN3 = LOW\n  &INTN4 = LOW\n  &INTN5 = LOW\n  &FORM = TRUNC (&STATE,1)\n  IF (&ERRT = 'PN')\n    .MSG = SSRMS007\n  IF (&ERRT = 'DT')\n    .MSG = SSRMS008\n  IF (&FORM = A)\n    .MSG = SSRMS003\n  IF (&FORM = C)\n    .MSG = SSRMS006\n  IF (&ERRL = 01)\n    &INTN1 = HIGH\n    .CURSOR = ACRNM1\n  IF (&ERRL = 02)\n    &INTN2 = HIGH\n    .CURSOR = ACRNM2\n  IF (&ERRL = 03)\n    &INTN3 = HIGH\n    .CURSOR = ACRNM3\n  IF (&ERRL = 04)\n    &INTN4 = HIGH\n    .CURSOR = ACRNM4\n  IF (&ERRL = 05)\n    &INTN5 = HIGH\n    .CURSOR = ACRNM5\n  &ERRT = ' '\n  &ERRL = 00\n)PROC\n  VER (&MM,NONBLANK,MSG=SSRMS004)\n  VER (&DD,NONBLANK,MSG=SSRMS004)\n  VER (&YY,NONBLANK,MSG=SSRMS004)\n  VER (&MM,RANGE,01,12,MSG=SSRMS004)\n  VER (&DD,RANGE,01,31,MSG=SSRMS004)\n  IF (&MM = 04,06,09,11)\n    VER (&DD,RANGE,01,30,MSG=SSRMS004)\n  IF (&MM = 02)\n    VER (&DD,RANGE,01,28,MSG=SSRMS004)\n  VER (&YY,NUM,MSG=SSRMS004)\n  IF (.MSG = SSRMS004)\n     &INTND = HIGH\n  VER (&C1,LIST,Y)\n  VER (&C2,LIST,Y)\n  VER (&C3,LIST,Y)\n  VER (&C4,LIST,Y)\n  VER (&C5,LIST,Y)\n  IF (&C1 = Y)\n    IF (&PRDN11 = ' ')\n      &INTN1 = HIGH\n      .MSG = SSRMS005\n      .CURSOR = PRDN11\n  IF (&C2 = Y)\n    IF (&PRDN12 = ' ')\n      &INTN2 = HIGH\n      .MSG = SSRMS005\n      .CURSOR = PRDN12\n  IF (&C3 = Y)\n    IF (&PRDN13 = ' ')\n      &INTN3 = HIGH\n      .MSG = SSRMS005\n      .CURSOR = PRDN13\n  IF (&C4 = Y)\n    IF (&PRDN14 = ' ')\n      &INTN4 = HIGH\n      .MSG = SSRMS005\n      .CURSOR = PRDN14\n  IF (&C5 = Y)\n    IF (&PRDN15 = ' ')\n      &INTN5 = HIGH\n      .MSG = SSRMS005\n      .CURSOR = PRDN15\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRPNL31": {"ttr": 1559, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x006\\x006\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "FILE060"}, "text": ")ATTR\n   % TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n   + TYPE(TEXT) INTENS(LOW) SKIP(ON)\n   _ TYPE(INPUT) INTENS(LOW)\n)BODY\n%------------------ SOFTWARE STATUS REPORT - ADD NEW PRODUCT -------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+          PTF/MOD ===>&PTFMD     + DATE INSTALLED ===>+&MM&DD&YY+\n+\n% ENTER NEW PRODUCT INFORMATION:+     (REQUIRED: PRODUCT NAME, VENDOR, CATEGORY)\n+\n%     ACRONYM ===>_ACRNM           +\n+\n%PRODUCT NAME ===>_PRDN1                           +\n%             ===>_PRDN2                           +\n%     RELEASE ===>_RELS6       +\n+\n%        FMID ===>_FMID6  +\n+\n%ORDER NUMBER ===>_ORDR6       +\n+\n%      VENDOR ===>_VENDR                           %  NEW VENDOR? ==>_Z+ (Y=YES)\n+\n%    CATEGORY ===>_CTGRY                           %NEW CATEGORY? ==>_Z+ (Y=YES)\n+\n+          PRESS ENTER TO PROCESS ADDS; \"END\" TO RETURN TO ENTRY PANEL\n)INIT\n  .HELP = SSRHLP31\n  .ZVARS = '(C6,C7)'\n  IF (&ERRT = DP)\n    .MSG = SSRMS011\n    .CURSOR = PRDN1\n  IF (&ERRT = VN)\n    .MSG = SSRMS012\n    .CURSOR = VENDR\n  IF (&ERRT = CN)\n    .MSG = SSRMS013\n    .CURSOR = CTGRY\n  IF (&RELS6 = ' ')\n    .CURSOR = RELS6\n  IF (&FMID6 = ' ')\n    .CURSOR = FMID6\n  IF (&ORDR6 = ' ')\n    .CURSOR = ORDR6\n  .CURSOR = VENDR\n  &ERRT = ' '\n)PROC\n  VER (&PRDN1,NONBLANK,MSG=SSRMS005)\n  VER (&VENDR,NONBLANK,MSG=SSRMS009)\n  VER (&CTGRY,NONBLANK,MSG=SSRMS010)\n  VER (&C6,LIST,Y)\n  VER (&C7,LIST,Y)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRPNL32": {"ttr": 1561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\xb3\\x00\\xb3\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 179, "newlines": 179, "modlines": 0, "user": "FILE060"}, "text": ")ATTR\n  | TYPE(&TYP1) INTENS(HIGH)\n  @ TYPE(&TYP2) INTENS(HIGH)\n  # TYPE(&TYP3) INTENS(HIGH)\n  $ TYPE(&TYP4) INTENS(HIGH)\n  \u00ac TYPE(&TYP5) INTENS(HIGH)\n  * TYPE(&TYP6) INTENS(HIGH)\n  \u00a6 TYPE(&TYP7) INTENS(HIGH)\n  ~ TYPE(&TYP8) INTENS(HIGH)\n  { TYPE(&ARGTYP) INTENS(LOW)\n  } TYPE(&DELTYP) INTENS(LOW)\n)BODY\n%------------------ SOFTWARE STATUS REPORT - LIST PRODUCT ----------------------\n%COMMAND ===>_ZCMD\n+\n%           &HD1    %:{SRCHARG1                        %&HD2                }Z+\n% SELECT\n%  (S)    ACRONYM:          PRODUCT NAME:\n   |Z+    &ACRNML1         +&PRDL11                           +                +\n                               +&PRDL21                           +            +\n   @Z+    &ACRNML2         +&PRDL12                           +                +\n                               +&PRDL22                           +            +\n   #Z+    &ACRNML3         +&PRDL13                           +                +\n                               +&PRDL23                           +            +\n   $Z+    &ACRNML4         +&PRDL14                           +                +\n                               +&PRDL24                           +            +\n   \u00acZ+    &ACRNML5         +&PRDL15                           +                +\n                               +&PRDL25                           +            +\n   *Z+    &ACRNML6         +&PRDL16                           +                +\n                               +&PRDL26                           +            +\n   \u00a6Z+    &ACRNML7         +&PRDL17                           +                +\n                               +&PRDL27                           +            +\n   ~Z+    &ACRNML8         +&PRDL18                           +                +\n                               +&PRDL28                           +            +\n+\n)INIT\n  .HELP = SSRHLP32\n  .CURSOR = ZCMD\n  &SLCT = ' '\n  &ZCMD = ' '\n  .ZVARS = '(DEL,SL1,SL2,SL3,SL4,SL5,SL6,SL7,SL8)'\n  &HD1 = ' '\n  &HD2 = ' '\n  &ARGTYP = OUTPUT\n  &DELTYP = OUTPUT\n  &DEL = ' '\n  &SRCHTYP = TRUNC (&PARM,1)\n  &SRCHTYP = .TRAIL\n  &SRCHTYP = TRUNC (&SRCHTYP,1)\n  IF (&SRCHTYP = P)\n    &HD1 = 'START AT'\n    &ARGTYP = INPUT\n  IF (&SRCHTYP = F)\n    &HD1 = '    FMID'\n  IF (&SRCHTYP = T)\n    &HD1 = ' PTF/MOD'\n  IF (&SRCHTYP = A)\n    &HD1 = ' ACRONYM'\n  IF (&SRCHTYP = C)\n    &HD1 = 'CATEGORY'\n    &ARGTYP = INPUT\n    &HD2 = '(OVERTYPE TO MODIFY)'\n    IF (&ENDL = 00)\n      &HD2 = '     DELETE (D) ===>'\n      &DELTYP = INPUT\n  IF (&SRCHTYP = V)\n    &HD1 = '  VENDOR'\n    &ARGTYP = INPUT\n    &HD2 = '(OVERTYPE TO MODIFY)'\n    IF (&ENDL = 00)\n      &HD2 = '     DELETE (D) ===>'\n      &DELTYP = INPUT\n  IF (&ERRT = DI)\n    .MSG = SSRMS018\n  IF (&ERRT = N)\n    .MSG = SSRMS007\n  IF (&ERRT = E)\n    .MSG = SSRMS017\n  &TYP1 = INPUT\n  IF (&ENDL = 00)\n    &TYP1 = OUTPUT\n  &TYP2 = INPUT\n  IF (&ENDL = 00,01)\n    &TYP2 = OUTPUT\n  &TYP3 = INPUT\n  IF (&ENDL = 00,01,02)\n    &TYP3 = OUTPUT\n  &TYP4 = INPUT\n  IF (&ENDL = 00,01,02,03)\n    &TYP4 = OUTPUT\n  &TYP5 = INPUT\n  IF (&ENDL = 00,01,02,03,04)\n    &TYP5 = OUTPUT\n  &TYP6 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05)\n    &TYP6 = OUTPUT\n  &TYP7 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06)\n    &TYP7 = OUTPUT\n  &TYP8 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07)\n    &TYP8 = OUTPUT\n)PROC\n  VER (&SL1,LIST,S,MSG=SSRMS014)\n  VER (&SL2,LIST,S,MSG=SSRMS014)\n  VER (&SL3,LIST,S,MSG=SSRMS014)\n  VER (&SL4,LIST,S,MSG=SSRMS014)\n  VER (&SL5,LIST,S,MSG=SSRMS014)\n  VER (&SL6,LIST,S,MSG=SSRMS014)\n  VER (&SL7,LIST,S,MSG=SSRMS014)\n  VER (&SL8,LIST,S,MSG=SSRMS014)\n  IF (&SL1 = S)\n    &SL1 = ' '\n    &ERRL = 01\n    &SLCT = Y\n  IF (&SL2 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &SL2 = ' '\n      &ERRL = 02\n      &SLCT = Y\n  IF (&SL3 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &SL3 = ' '\n      &ERRL = 03\n      &SLCT = Y\n  IF (&SL4 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &SL4 = ' '\n      &ERRL = 04\n      &SLCT = Y\n  IF (&SL5 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &SL5 = ' '\n      &ERRL = 05\n      &SLCT = Y\n  IF (&SL6 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &SL6 = ' '\n      &ERRL = 06\n      &SLCT = Y\n  IF (&SL7 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &SL7 = ' '\n      &ERRL = 07\n      &SLCT = Y\n  IF (&SL8 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &SL8 = ' '\n      &ERRL = 08\n      &SLCT = Y\n  VER (&ZCMD,LIST,B,DOWN,F,UP,MSG=SSRMS016)\n  IF (&ZCMD = DOWN)\n    &ERRT = 'F '\n  IF (&ZCMD = UP)\n    &ERRT = 'B '\n  IF (&ZCMD = F)\n    &ERRT = 'F '\n  IF (&ZCMD = B)\n    &ERRT = 'B '\n  IF (&SLCT = Y)\n    &ERRT = 'S '\n  IF (&DEL = D)\n    &ERRT = 'DD'\n  &SLCT = ' '\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSRPNL33": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\xef\\x00\\xef\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 239, "newlines": 239, "modlines": 0, "user": "FILE060"}, "text": ")ATTR\n  | TYPE(&TYP1) INTENS(HIGH)\n  @ TYPE(&TYP2) INTENS(HIGH)\n  # TYPE(&TYP3) INTENS(HIGH)\n  $ TYPE(&TYP4) INTENS(HIGH)\n  \u00ac TYPE(&TYP5) INTENS(HIGH)\n  * TYPE(&TYP6) INTENS(HIGH)\n  ? TYPE(&TYP7) INTENS(HIGH)\n  ~ TYPE(&TYP8) INTENS(HIGH)\n  \\ TYPE(&TYP9) INTENS(HIGH)\n  \u00a6 TYPE(&TYP10) INTENS(HIGH)\n  \u00a2 TYPE(&TYP11) INTENS(HIGH)\n  ! TYPE(&TYP12) INTENS(HIGH)\n  < TYPE(&TYP13) INTENS(HIGH)\n  / TYPE(&TYP14) INTENS(HIGH)\n  { TYPE(&TYP15) INTENS(HIGH)\n  } TYPE(&TYP16) INTENS(HIGH)\n)BODY\n%------------------ SOFTWARE STATUS REPORT - LIST &INDXITM%---------------------\n%COMMAND ===>_ZCMD\n+\n%SELECT\n% (S)      &INDXITM+\n   |Z+    &INXITM1                         +                                   +\n   @Z+    &INXITM2                         +                                   +\n   #Z+    &INXITM3                         +                                   +\n   $Z+    &INXITM4                         +                                   +\n   \u00acZ+    &INXITM5                         +                                   +\n   *Z+    &INXITM6                         +                                   +\n   ?Z+    &INXITM7                         +                                   +\n   ~Z+    &INXITM8                         +                                   +\n   \\Z+    &INXITM9                         +                                   +\n   \u00a6Z+    &INXITM10                        +                                   +\n   \u00a2Z+    &INXITM11                        +                                   +\n   !Z+    &INXITM12                        +                                   +\n   <Z+    &INXITM13                        +                                   +\n   /Z+    &INXITM14                        +                                   +\n   {Z+    &INXITM15                        +                                   +\n   }Z+    &INXITM16                        +                                   +\n+\n)INIT\n  .HELP = SSRHLP33\n  .CURSOR = ZCMD\n  &SLCT = ' '\n  &ZCMD = ' '\n  &FORM = TRUNC (&STATE,1)\n  &FORM = .TRAIL\n  &FORM = TRUNC (&FORM,1)\n  IF (&FORM = 'V')\n    &INDXITM = VENDOR\n  IF (&FORM = 'C')\n    &INDXITM = CATEGORY\n  IF (&ERRT = E)\n    .MSG = SSRMS017\n  &ERRT = ' '\n  .ZVARS = '(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16)'\n  &TYP1 = INPUT\n  IF (&ENDL = 00)\n    &TYP1 = OUTPUT\n  &TYP2 = INPUT\n  IF (&ENDL = 00,01)\n    &TYP2 = OUTPUT\n  &TYP3 = INPUT\n  IF (&ENDL = 00,01,02)\n    &TYP3 = OUTPUT\n  &TYP4 = INPUT\n  IF (&ENDL = 00,01,02,03)\n    &TYP4 = OUTPUT\n  &TYP5 = INPUT\n  IF (&ENDL = 00,01,02,03,04)\n    &TYP5 = OUTPUT\n  &TYP6 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05)\n    &TYP6 = OUTPUT\n  &TYP7 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06)\n    &TYP7 = OUTPUT\n  &TYP8 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07)\n    &TYP8 = OUTPUT\n  &TYP9 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08)\n    &TYP9 = OUTPUT\n  &TYP10 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08,09)\n    &TYP10 = OUTPUT\n  &TYP11 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08,09,10)\n    &TYP11 = OUTPUT\n  &TYP12 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08,09,10,11)\n    &TYP12 = OUTPUT\n  &TYP13 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08,09,10,11,12)\n    &TYP13 = OUTPUT\n  &TYP14 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08,09,10,11,12,13)\n    &TYP14 = OUTPUT\n  &TYP15 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08,09,10,11,12,13,14)\n    &TYP15 = OUTPUT\n  &TYP16 = INPUT\n  IF (&ENDL = 00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15)\n    &TYP16 = OUTPUT\n)PROC\n  VER (&S1,LIST,S,MSG=SSRMS014)\n  VER (&S2,LIST,S,MSG=SSRMS014)\n  VER (&S3,LIST,S,MSG=SSRMS014)\n  VER (&S4,LIST,S,MSG=SSRMS014)\n  VER (&S5,LIST,S,MSG=SSRMS014)\n  VER (&S6,LIST,S,MSG=SSRMS014)\n  VER (&S7,LIST,S,MSG=SSRMS014)\n  VER (&S8,LIST,S,MSG=SSRMS014)\n  VER (&S9,LIST,S,MSG=SSRMS014)\n  VER (&S10,LIST,S,MSG=SSRMS014)\n  VER (&S11,LIST,S,MSG=SSRMS014)\n  VER (&S12,LIST,S,MSG=SSRMS014)\n  VER (&S13,LIST,S,MSG=SSRMS014)\n  VER (&S14,LIST,S,MSG=SSRMS014)\n  VER (&S15,LIST,S,MSG=SSRMS014)\n  VER (&S16,LIST,S,MSG=SSRMS014)\n  IF (&S1 = S)\n    &S1 = ' '\n    &SLCT = Y\n    &ERRL = 01\n  IF (&S2 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S2 = ' '\n      &SLCT = Y\n      &ERRL = 02\n  IF (&S3 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S3 = ' '\n      &SLCT = Y\n      &ERRL = 03\n  IF (&S4 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S4 = ' '\n      &SLCT = Y\n      &ERRL = 04\n  IF (&S5 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S5 = ' '\n      &SLCT = Y\n      &ERRL = 05\n  IF (&S6 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S6 = ' '\n      &SLCT = Y\n      &ERRL = 06\n  IF (&S7 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S7 = ' '\n      &SLCT = Y\n      &ERRL = 07\n  IF (&S8 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S8 = ' '\n      &SLCT = Y\n      &ERRL = 08\n  IF (&S9 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S9 = ' '\n      &SLCT = Y\n      &ERRL = 09\n  IF (&S10 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S10 = ' '\n      &SLCT = Y\n      &ERRL = 10\n  IF (&S11 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S11 = ' '\n      &SLCT = Y\n      &ERRL = 11\n  IF (&S12 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S12 = ' '\n      &SLCT = Y\n      &ERRL = 12\n  IF (&S13 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S13 = ' '\n      &SLCT = Y\n      &ERRL = 13\n  IF (&S14 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S14 = ' '\n      &SLCT = Y\n      &ERRL = 14\n  IF (&S15 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S15 = ' '\n      &SLCT = Y\n      &ERRL = 15\n  IF (&S16 = S)\n    IF (&SLCT = Y)\n      .MSG = SSRMS015\n    IF (&SLCT \u00ac= Y)\n      &S16 = ' '\n      &SLCT = Y\n      &ERRL = 16\n  VER (&ZCMD,LIST,UP,DOWN,END,MSG=SSRMS016)\n  IF (&ZCMD = DOWN)\n    &ERRT = 'F '\n  IF (&ZCMD = UP)\n    &ERRT = 'B '\n  IF (&SLCT = Y)\n    &ERRT = 'S '\n  &SLCT = ' '\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSRPNL34": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00~\\x00~\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 126, "newlines": 126, "modlines": 0, "user": "FILE060"}, "text": ")ATTR\n  % TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  + TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  | TYPE(&TYP1) INTENS(&INTN1)\n  @ TYPE(&TYP2) INTENS(&INTN2)\n  # TYPE(&TYP3) INTENS(&INTN3)\n  $ TYPE(&TYP4) INTENS(&INTN4)\n  ~ TYPE(&TYP5) INTENS(&INTN5)\n  \u00a6 TYPE(&TYP6) INTENS(&INTN6)\n  { TYPE(&TYP7) INTENS(&INTN7)\n  } TYPE(&TYP8) INTENS(&INTN8)\n)BODY\n%-----------------SOFTWARE STATUS REPORT - PRODUCT HISTORY ---------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%                                                    DELETE PRODUCT (D) ===>_Z+\n%         ACRONYM ===>+_ACRNM           +\n%    PRODUCT NAME ===>+_PRDN1                           +\n%                 ===>+_PRDN2                           +\n%          VENDOR ===>+_VENDR                           +\n%        CATEGORY ===>+_CTGRY                           +\n+\n%DELETE:                                                                DATE\n%  (D)   ORDER:           RELEASE:         FMID:       PTF/MOD:      INSTALLED:\n+  |Z+  |ORDR1       +   |RELS1       +   |FMID1  +   |PTFMDU1   +   |M1|D1|Y1+\n+  @Z+  @ORDR2       +   @RELS2       +   @FMID2  +   @PTFMDU2   +   @M2@D2@Y2+\n+  #Z+  #ORDR3       +   #RELS3       +   #FMID3  +   #PTFMDU3   +   #M3#D3#Y3+\n+  $Z+  $ORDR4       +   $RELS4       +   $FMID4  +   $PTFMDU4   +   $M4$D4$Y4+\n+  ~Z+  ~ORDR5       +   ~RELS5       +   ~FMID5  +   ~PTFMDU5   +   ~M5~D5~Y5+\n+  \u00a6Z+  \u00a6ORDR6       +   \u00a6RELS6       +   \u00a6FMID6  +   \u00a6PTFMDU6   +   \u00a6M6\u00a6D6\u00a6Y6+\n+  {Z+  {ORDR7       +   {RELS7       +   {FMID7  +   {PTFMDU7   +   {M7{D7{Y7+\n+  }Z+  }ORDR8       +   }RELS8       +   }FMID8  +   }PTFMDU8   +   }M8}D8}Y8+\n+\n)INIT\n  .HELP = SSRHLP34\n  .ZVARS = '(C9,C1,C2,C3,C4,C5,C6,C7,C8)'\n  &ZCMD = ' '\n  IF (&ERRT = 'E ')\n    .MSG = SSRMS017\n  IF (&ERRT = 'DP')\n    .MSG = SSRMS011\n  IF (&ERRT = 'DT')\n    .MSG = SSRMS008\n  IF (&ERRT = 'DE')\n    .MSG = SSRMS004\n  &TYP1 = INPUT\n  &INTN1 = LOW\n  IF (&ENDL = 00)\n    &TYP1 = OUTPUT\n  IF (&C1 = 'D')\n    &TYP1 = OUTPUT\n  IF (&ERRL = 01)\n    &INTN1 = HIGH\n  &TYP2 = INPUT\n  &INTN2 = LOW\n  IF (&ENDL = 00,01)\n    &TYP2 = OUTPUT\n  IF (&C2 = 'D')\n    &TYP2 = OUTPUT\n  IF (&ERRL = 02)\n    &INTN2 = HIGH\n  &TYP3 = INPUT\n  &INTN3 = LOW\n  IF (&ENDL = 00,01,02)\n    &TYP3 = OUTPUT\n  IF (&C3 = 'D')\n    &TYP3 = OUTPUT\n  IF (&ERRL = 03)\n    &INTN3 = HIGH\n  &TYP4 = INPUT\n  &INTN4 = LOW\n  IF (&ENDL = 00,01,02,03)\n    &TYP4 = OUTPUT\n  IF (&C4 = 'D')\n    &TYP4 = OUTPUT\n  IF (&ERRL = 04)\n    &INTN4 = HIGH\n  &TYP5 = INPUT\n  &INTN5 = LOW\n  IF (&ENDL = 00,01,02,03,04)\n    &TYP5 = OUTPUT\n  IF (&ERRL = 05)\n    &INTN5 = HIGH\n  IF (&C5 = 'D')\n    &TYP5 = OUTPUT\n  &TYP6 = INPUT\n  &INTN6 = LOW\n  IF (&ENDL = 00,01,02,03,04,05)\n    &TYP6 = OUTPUT\n  IF (&C6 = 'D')\n    &TYP6 = OUTPUT\n  IF (&ERRL = 06)\n    &INTN6 = HIGH\n  &TYP7 = INPUT\n  &INTN7 = LOW\n  IF (&ENDL = 00,01,02,03,04,05,06)\n    &TYP7 = OUTPUT\n  IF (&C7 = 'D')\n    &TYP7 = OUTPUT\n  IF (&ERRL = 07)\n    &INTN7 = HIGH\n  &TYP8 = INPUT\n  &INTN8 = LOW\n  IF (&ENDL = 00,01,02,03,04,05,06,07)\n    &TYP8 = OUTPUT\n  IF (&C8 = 'D')\n    &TYP8 = OUTPUT\n  IF (&ERRL = 08)\n    &INTN8 = HIGH\n  .CURSOR = ZCMD\n)PROC\n  VER (&PRDN1,NONBLANK)\n  VER (&C9,LIST,D)\n  VER (&C1,LIST,D)\n  VER (&C2,LIST,D)\n  VER (&C3,LIST,D)\n  VER (&C4,LIST,D)\n  VER (&C5,LIST,D)\n  VER (&C6,LIST,D)\n  VER (&C7,LIST,D)\n  VER (&C8,LIST,D)\n  IF (&ZCMD = DOWN)\n    &ERRT = 'F '\n  IF (&ZCMD = UP)\n    &ERRT = 'B '\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSRPRINT": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x009\\x009\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "FILE060"}, "text": "/* THIS CLIST SUBMITS A BACKGOUND JOB TO PRINT THE SOFTWARE STATUS  */\n/* REPORT. IT IS EXECUTED FROM THE SOFTWARE STATUS MENU PANEL.      */\n/* BE SURE TO EDIT THE JOB CARD, JOBLIB CARD, AND ALL DD CARDS.     */\n/* (NOTE: THE &SYSUID PARAMETER ON THE JOB CARD GETS REPLACED BY    */\n/* THE TSO USERID.)                                                 */\n/*                                                                  */\n/* DD CARDS STEP1.PRTFILE AND STEP3.PRTFILE REFER TO THE RUNTIME    */\n/* MESSAGES FILE AND THE PRINTED REPORT ITSELF RESPECTIVELY.        */\n/*                                                                  */\n/* THE DD CARDS STEP1.CNTLCARD AND SORT.SYSIN REFER TO PDS          */\n/* MEMBERS CONTAINING CONTROL CARDS FOR PROGRAMS SSR010PR AND SORT. */\n/*                                                                  */\n/* THE FIRST OF THESE MEMBERS, SSRPRNTC, CONTAINS CARDS CONTROLLING */\n/* THE ORDER IN WHICH THE SOFTWARE STATUS ENTRIES ARE PRINTED. A    */\n/* SAMPLE SSRPRNTC MEMBER, INCLUDED IN THIS LIBRARY, CONTAINS       */\n/* INSTRUCTIONS ON FORMATTING THE CONTROL CARDS. YOU MUST CREATE AN */\n/* SSRPRNTC MEMBER ON YOUR PARMLIB.                                 */\n/*                                                                  */\n/* THE SECOND MEMBER, SSRPRNTS, CONTAINS SORT CONTROL CARDS. COPY   */\n/* THE SSRPRNTS MEMBER FROM THIS INSTALL LIBRARY ONTO YOUR PARMLIB  */\n/* AS IS.                                                           */\n/*                                                                  */\n/* COPY THIS CLIST ONTO A CLIST LIBRARY ALLOCATED TO YOUR TSO/ISPF  */\n/* SESSION.                                                         */\n/*                                                                  */\n PROC 0\n    SET SLSHASK=&STR(/*)\n    SUBMIT *   END($$)\n//&SYSUID.1 JOB (ACCT),'NAME',CLASS=P,NOTIFY=&SYSUID\n//*JOBLIB   DD  DSN=YOUR.LOADLIB,DISP=SHR\n//STEP1    EXEC PGM=SSR010PR\n//PRTFILE   DD  SYSOUT=A,DCB=BLKSIZE=133\n//SSRINTBL  DD  DSN=SSU1.SOFTSTAT.INDXTBL,DISP=SHR\n//SSRPRTBL  DD  DSN=SSU1.SOFTSTAT.PRODTBL,DISP=SHR\n//SSRHSTRY  DD  DSN=SSU1.SOFTSTAT.HISTORY,DISP=SHR\n//OUTFILE   DD  DSN=&&OUTFILE,UNIT=DISK,DISP=(NEW,PASS),\n//              DCB=(LRECL=94,BLKSIZE=9400,RECFM=FB),SPACE=(TRK,(1,1))\n//SYSOUT    DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n//CNTLCARD  DD  DSN=YOUR.PARMLIB(SSRPRNTC),DISP=SHR\n&SLSHASK\n//SORT     EXEC PGM=SORT,PARM='SIZE=MAX'\n//SYSOUT    DD  SYSOUT=*\n//SORTIN    DD  DSN=*.STEP1.OUTFILE,DISP=(OLD,DELETE)\n//SORTOUT   DD  DSN=&&SORTOUT,DISP=(NEW,PASS,DELETE),UNIT=DISK,\n//              DCB=(RECFM=FB,LRECL=94,BLKSIZE=9400),SPACE=(TRK,(1,1))\n//SORTWK01  DD  UNIT=DISK,SPACE=(CYL,(1,1))\n//SORTWK02  DD  UNIT=DISK,SPACE=(CYL,(1,1))\n//SYSIN     DD  DSN=YOUR.PARMLIB(SSRPRNTS),DISP=SHR\n&SLSHASK\n//STEP3    EXEC PGM=SSR011PR\n//PRTFILE   DD  SYSOUT=A,DCB=BLKSIZE=133\n//INFILE    DD  DSN=*.SORT.SORTOUT,DISP=(OLD,DELETE,DELETE)\n//SYSOUT    DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n&SLSHASK\n$$\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSRPRNTC": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00/\\x00/\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "FILE060"}, "text": "//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//* SAMPLE CONTROL CARDS FOR PROGRAM SSR010PR.                        *\n//* THESE CARDS CONTROL THE ORDER IN WHICH ITEMS ON THE SOFTWARE      *\n//* STATUS DATABASE ARE PRINTED.                                      *\n//*                                                                   *\n//* COLUMN  LENGTH  CONTAINS                                          *\n//* ------  ------  --------                                          *\n//*    1       5    \"VEND \" OR \"CAT  \"                                *\n//*    6      32    A VENDOR/CATEGORY NAME, OR \"*\"                    *\n//*   39       5    \"VEND \" OR \"CAT  \"                                *\n//*   44      32    A VENDOR/CATEGORY NAME, OR \"*\"                    *\n//*                                                                   *\n//* THE FIRST TWO ITEMS CONSTITUTE THE MAJOR SORT INDEX, THE SECOND   *\n//* TWO CONSTITUTE THE MINOR SORT INDEX. \"*\" IS A WILDCARD. EACH      *\n//* CARD MUST CONTAIN ONE VEND AND ONE CAT. EACH PRODUCT ON THE       *\n//* SOFTWARE STATUS DATABASE WILL BE COMPARED WITH EACH CONTROL CARD  *\n//* IN TURN UNTIL VENDOR AND CATEGORY MATCH (\"*\" MATCHES ANYTHING).   *\n//* THE PRODUCT WILL BE INCLUDED WITHIN THE FIRST VENDOR/CATEGORY     *\n//* COMBINATION IT MATCHES. EACH PRODUCT APPEARS ON THE REPORT ONLY   *\n//* ONCE. PRODUCTS AND UNSPECIFIED (\"*\") VENDOR/CATEGORIES WILL BE    *\n//* PRINTED IN ALPHEBETICAL ORDER WITHIN SPECIFIED VENDOR/CATEGORIES. *\n//* PRODUCTS FOR WHICH NO MATCHING CONTROL CARD IS FOUND WILL NOT BE  *\n//* PRINTED.                                                          *\n//*                                                                   *\n//* REFER TO THE SAMPLE CONTROL CARDS BELOW:                          *\n//*                                                                   *\n//* IN THE THIRD SAMPLE CONTROL CARD, PRODUCTS WITH VENDOR = 'IBM'    *\n//* AND NOT FALLING INTO ANY PREVIOUSLY SPECIFIED CATAGORY (I.E.      *\n//* VENDOR = IBM AND CATEGORY = OPERATING SYSTEM OR TELEPROCESSING)   *\n//* WILL BE LISTED ALPHABETICALLY BY CATEGORIES, WHICH ARE THEMSELVES *\n//* LISTED ALPHABETICALLY.                                            *\n//*                                                                   *\n//* IN THE FOURTH CARD, PRODUCTS WITH CATEGORY = 'DATA BASE' AND NOT  *\n//* FALLING INTO ANY PREVIOUS CATEGORY (I.E. VENDOR = IBM) WILL BE    *\n//* LISTED ALPHABETICALLY BY VENDORS, WHICH ARE THEMSELVES LISTED     *\n//* ALPHABETICALLY.                                                   *\n//*                                                                   *\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nVEND IBM                              CAT  OPERATING SYSTEM                *\nVEND IBM                              CAT  TELEPROCESSING                  *\nVEND IBM                              CAT  *                               *\nCAT  DATA BASE                        VEND *                               *\nCAT  TELEPROCESSING                   VEND *                               *\nCAT  OPERATIONS MANAGEMENT            VEND COMPUTER ASSOCIATES             *\nCAT  OPERATIONS MANAGEMENT            VEND *                               *\nCAT  MISC                             VEND *                               *\nCAT  *                                VEND *                               *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSRPRNTS": {"ttr": 1808, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x00\\x01\\x00\\x01\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "FILE060"}, "text": "   SORT  FIELDS=(1,14,CH,A),FILSZ=E500\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSR01AR": {"ttr": 2050, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x06v\\x06v\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 1654, "newlines": 1654, "modlines": 0, "user": "FILE060"}, "text": "000100 IDENTIFICATION DIVISION.\n000200\n000300 PROGRAM-ID.             SSR01AR.\n000400 AUTHOR.                 ROBB CHAPMAN.\n000500 INSTALLATION.           GEORGIA DEPARTMENT OF LABOR.\n000600 DATE-COMPILED.\n000700 ENVIRONMENT DIVISION.\n000800\n000900 CONFIGURATION SECTION.\n001000 SOURCE-COMPUTER.        IBM-370.\n001100 OBJECT-COMPUTER.        IBM-370.\n001200\n001300 INPUT-OUTPUT SECTION.\n001400\n001500 FILE-CONTROL.\n001600     SELECT SSRHSTRY ASSIGN TO SSRHSTRY\n001700       ORGANIZATION INDEXED\n001800       ACCESS DYNAMIC\n001900       RECORD KEY IS SSRHSTRY-KEY\n002000       ALTERNATE RECORD KEY IS SSRHSTRY-PTFKEY DUPLICATES\n002100       ALTERNATE RECORD KEY IS SSRHSTRY-FMIDKEY DUPLICATES\n002200       FILE STATUS IS SSRHSTRY-ST.\n002300     SELECT SSRPRTBL ASSIGN TO SSRPRTBL\n002400       ORGANIZATION RELATIVE\n002500       ACCESS RANDOM\n002600       RELATIVE KEY IS PRRNUM\n002700       FILE STATUS IS SSRPRTBL-ST.\n002800     SELECT SSRINTBL ASSIGN TO SSRINTBL\n002900       ORGANIZATION RELATIVE\n003000       ACCESS RANDOM\n003100       RELATIVE KEY IS IRRNUM\n003200       FILE STATUS IS SSRINTBL-ST.\n003300 DATA DIVISION.\n003400\n003500 FILE SECTION.\n003600 FD  SSRHSTRY\n003700     LABEL RECORDS ARE STANDARD\n003800     BLOCK CONTAINS 0 RECORDS.\n003900 01  SSRHSTRY-REC.\n004000     05  SSRHSTRY-KEY.\n004100         10  SSRHSTRY-PINX        PIC 9(4) COMP.\n004200         10  SSRHSTRY-DATE-INST   PIC X(6).\n004300     05  SSRHSTRY-PTFKEY.\n004400         10  SSRHSTRY-PTFMD       PIC X(10).\n004500         10  SSRHSTRY-PTFINX      PIC 9(4) COMP.\n004600     05  SSRHSTRY-FMIDKEY.\n004700         10  SSRHSTRY-FMID        PIC X(7).\n004800         10  SSRHSTRY-FMIDINX     PIC 9(4) COMP.\n004900     05  SSRHSTRY-ORDR            PIC X(12).\n005000     05  SSRHSTRY-RELS            PIC X(12).\n005100 01  FILLER REDEFINES SSRHSTRY-REC.\n005200     05  FILLER                   PIC X(44).\n005300     05  SSRHSTRY-TABLE-PARMS     PIC X(8).\n005400     05  FILLER                   PIC X(1).\n005500 FD  SSRPRTBL\n005600     LABEL RECORDS ARE STANDARD\n005700     BLOCK CONTAINS 0 RECORDS.\n005800 01  PRTBL-REC.\n005900     05  PRTBL-NEXT-REC           PIC 9(4) COMP.\n006000     05  PRTBL-PREV-REC           PIC 9(4) COMP.\n006100     05  PRTBL-HI-SLOT            PIC 9(4) COMP.\n006200     05  FILLER                   PIC X(4).\n006300     05  PRTBL-ENTRIES.\n006400         10 PRTBL-1-48            PIC X(4128).\n006500         10 PRTBL-49-95           PIC X(4042).\n006600     05  FILLER REDEFINES PRTBL-ENTRIES.\n006700         10 PRTBL-ENTRY OCCURS 95 TIMES\n006800                 INDEXED BY PRTBLINX.\n006900             15  PRTBL-PRD.\n007000                 20 PRTBL-ACRNM   PIC X(16).\n007100                 20 PRTBL-PRDNM   PIC X(64).\n007200             15  PRTBL-PINX       PIC 9(4) COMP.\n007300             15  PRTBL-VINX       PIC 9(4) COMP.\n007400             15  PRTBL-CINX       PIC 9(4) COMP.\n007500 FD  SSRINTBL\n007600     LABEL RECORDS ARE STANDARD\n007700     BLOCK CONTAINS 0 RECORDS.\n007800 01  INTBL-REC.\n007900     05  INTBL-NEXT-REC           PIC 9(4) COMP.\n008000     05  INTBL-PREV-REC           PIC 9(4) COMP.\n008100     05  INTBL-HI-SLOT            PIC 9(4) COMP.\n008200     05  FILLER                   PIC X(4).\n008300     05  INTBL-ENTRIES.\n008400         10  INTBL-1-29           PIC X(1015).\n008500         10  INTBL-30-58          PIC X(1015).\n008600     05  FILLER REDEFINES INTBL-ENTRIES.\n008700         10 INTBL-ENTRY OCCURS 58 TIMES\n008800                 INDEXED BY INTBLINX.\n008900             15  INTBL-INDXKEY.\n009000                 20  INTBL-TYPE   PIC X(1).\n009100                 20  INTBL-INXITM   PIC X(32).\n009200             15  INTBL-IINX       PIC 9(4) COMP.\n009300 WORKING-STORAGE SECTION.\n009305 77  PAN-VALET PICTURE X(24) VALUE '002CBT1765   12/06/89'.\n009400 01  ARRAY-2.\n009500     05 PARM                                 VALUE SPACES.\n009600         10 PARM-FUNCTION         PIC X.\n009700         10 PARM-SRCHTYPE         PIC X.\n009800     05 STATE                                VALUE SPACES.\n009900         10  STATE-1              PIC X.\n010000         10  STATE-2              PIC X.\n010100     05 ENDL                      PIC 9(2)   VALUE ZERO.\n010200     05 ERRL                      PIC 9(2)   VALUE ZERO.\n010300     05 ERRT                      PIC X(2)   VALUE SPACES.\n010400     05 FILESTAT                  PIC X(2)   VALUE SPACES.\n010500 01  PTFMD                        PIC X(10)  VALUE SPACES.\n010600 01  DATE-INST                               VALUE ZEROES.\n010700     05  YY                       PIC 9(2).\n010800     05  MM                       PIC 9(2).\n010900     05  DD                       PIC 9(2).\n011000 01  ARRAY-7                                 VALUE SPACES.\n011100     05  FMIDE OCCURS 8 TIMES INDEXED BY FMIDX\n011200                                  PIC X(7).\n011300 01  ARRAY-16                                VALUE SPACES.\n011400     05  ACRNM                    PIC X(16).\n011500     05  P30ACR-TBL.\n011600         10  ACRNME OCCURS 5 TIMES INDEXED BY P30ACRX\n011700                                  PIC X(16).\n011800     05  P32ACR-TBL.\n011900         10  ACRNML OCCURS 8 TIMES INDEXED BY P32ACRX\n012000                                  PIC X(16).\n012100     05  FILLER REDEFINES P32ACR-TBL.\n012200         10  P34PTF-TBL.\n012300             15 PTFMDU OCCURS 8 TIMES INDEXED BY P34PTFX\n012400                                  PIC X(10).\n012500         10  P34DTINST-TBL.\n012600             15 DTINSTU OCCURS 8 TIMES INDEXED BY P34DTX.\n012700                 20  YYU          PIC X(2).\n012800                 20  MMU          PIC X(2).\n012900                 20  DDU          PIC X(2).\n013000 01  ARRAY-32                                VALUE SPACES.\n013100     05  PRDNM.\n013200         10 PRDN1                 PIC X(32).\n013300         10 PRDN2                 PIC X(32).\n013400     05  VENDR                    PIC X(32).\n013500     05  CTGRY                    PIC X(32).\n013600     05  PRDNME OCCURS 5 TIMES INDEXED BY P30PRDX.\n013700         10  PRDN1E               PIC X(32).\n013800         10  PRDN2E               PIC X(32).\n013900     05  P32PRD-TBL.\n014000         10 PRDNML OCCURS 8 TIMES INDEXED BY P32PRDX.\n014100             15 PRDN1L            PIC X(32).\n014200             15 PRDN2L            PIC X(32).\n014300     05  P33INX-TBL REDEFINES P32PRD-TBL.\n014400         10 INXITML OCCURS 16 TIMES INDEXED BY P33IIX\n014500                                  PIC X(32).\n014600 01  ARRAY-12                                 VALUE SPACES.\n014700     05  FILLER OCCURS 8 TIMES INDEXED BY ORDRELX.\n014800         15  ORDRE                PIC X(12).\n014900         15  RELSE                PIC X(12).\n015000 01  ERRFILE                      PIC X(12)  VALUE SPACES.\n015100 01  ARRAY-1                                  VALUE SPACES.\n015200         05  KODE OCCURS 9 TIMES INDEXED BY CODX\n015300                                  PIC X(1).\n015400 01  DEFINE-VARIABLES.\n015500     05  PARMLST                  PIC X(36) VALUE\n015600     '(PARM STATE ENDL ERRL ERRT FILESTAT)'.\n015700     05  SRCHARGLST               PIC X(19) VALUE\n015800     '(SRCHARG1 SRCHARG2)'.\n015900     05  PTFLST                   PIC X(7)  VALUE '(PTFMD)'.\n016000     05  DATELST                  PIC X(10) VALUE '(YY MM DD)'.\n016100     05  ACRNMLST                 PIC X(42) VALUE\n016200     '(ACRNM ACRNM1 ACRNM2 ACRNM3 ACRNM4 ACRNM5)'.\n016300     05  P32ACRLST.\n016400         10  FILLER               PIC X(57) VALUE\n016500     '(ACRNML1 ACRNML2 ACRNML3 ACRNML4 ACRNML5 ACRNML6 ACRNML7 '.\n016600         10  FILLER               PIC X(8) VALUE\n016700     'ACRNML8)'.\n016800     05  PRDNMLST.\n016900         10  FILLER               PIC X(25) VALUE\n017000     '(PRDN1 PRDN2 VENDR CTGRY '.\n017100         10  FILLER               PIC X(42) VALUE\n017200     'PRDN11 PRDN21 PRDN12 PRDN22 PRDN13 PRDN23 '.\n017300         10  FILLER               PIC X(28) VALUE\n017400     'PRDN14 PRDN24 PRDN15 PRDN25)'.\n017500     05  P32PRDLST.\n017600         10  FILLER               PIC X(58) VALUE\n017700      '(PRDL11 PRDL21 PRDL12 PRDL22 PRDL13 PRDL23 PRDL14 PRDL24 '.\n017800         10  FILLER               PIC X(56) VALUE\n017900     'PRDL15 PRDL25 PRDL16 PRDL26 PRDL17 PRDL27 PRDL18 PRDL28)'.\n018000         10  FILLER               PIC X(28) VALUE\n018100     'PRDL17 PRDL27 PRDL18 PRDL28)'.\n018200     05  P33INXLST.\n018300         10  FILLER               PIC X(49) VALUE\n018400     '(INXITM1 INXITM2 INXITM3 INXITM4 INXITM5 INXITM6 '.\n018500         10  FILLER               PIC X(51) VALUE\n018600     'INXITM7 INXITM8 INXITM9 INXITM10 INXITM11 INXITM12 '.\n018700         10  FILLER               PIC X(36) VALUE\n018800     'INXITM13 INXITM14 INXITM15 INXITM16)'.\n018900     05  ORDRELLST.\n019000         10  FILLER               PIC X(49) VALUE\n019100     '(ORDR1 RELS1 ORDR2 RELS2 ORDR3 RELS3 ORDR4 RELS4 '.\n019200         10  FILLER               PIC X(57) VALUE\n019300     ' ORDR5 RELS5 ORDR6 RELS6 ORDR7 RELS7 ORDR8 RELS8 ERRFILE)'.\n019400     05  CODELST                  PIC X(28) VALUE\n019500         '(C1 C2 C3 C4 C5 C6 C7 C8 C9)'.\n019600     05  FMIDLST                  PIC X(49) VALUE\n019700     '(FMID1 FMID2 FMID3 FMID4 FMID5 FMID6 FMID7 FMID8)'.\n019800     05  P34DTLST.\n019900         10  FILLER               PIC X(49) VALUE\n020000     '(Y1 M1 D1 Y2 M2 D2 Y3 M3 D3 Y4 M4 D4 Y5 M5 D5 Y6 '.\n020100         10  FILLER               PIC X(24) VALUE\n020200     'M6 D6 Y7 M7 D7 Y8 M8 D8)'.\n020300     05  P34PTFLST.\n020400         10  FILLER               PIC X(57) VALUE\n020500     '(PTFMDU1 PTFMDU2 PTFMDU3 PTFMDU4 PTFMDU5 PTFMDU6 PTFMDU7 '.\n020600         10  FILLER               PIC X(8) VALUE\n020700     'PTFMDU8)'.\n020800     05  BUFLENGTH            PIC 9(8) COMP VALUE 13.\n020900     05  SSRPRINT             PIC X(13) VALUE\n021000         'CMD(SSRPRINT)'.\n021100 01  VARIABLE-LENGTHS.\n021200     05  L1                       PIC 9(6) COMP VALUE 1.\n021300     05  L2                       PIC 9(6) COMP VALUE 2.\n021400     05  L4                       PIC 9(6) COMP VALUE 4.\n021500     05  L6                       PIC 9(6) COMP VALUE 6.\n021600     05  L7                       PIC 9(6) COMP VALUE 7.\n021700     05  L10                      PIC 9(6) COMP VALUE 10.\n021800     05  L12                      PIC 9(6) COMP VALUE 12.\n021900     05  L16                      PIC 9(6) COMP VALUE 16.\n022000     05  L32                      PIC 9(6) COMP VALUE 32.\n022100     05  L64                      PIC 9(6) COMP VALUE 64.\n022200 01  SAVE-TBL.\n022300     05 P30SAVE.\n022400         10  FILLER OCCURS 5 TIMES INDEXED BY P30SINX.\n022500             15 ACRNMS            PIC X(16).\n022600             15 PRDNMS            PIC X(64).\n022700             15 PINXS             PIC 9(4) COMP.\n022800             15 VINXS             PIC 9(4) COMP.\n022900             15 CINXS             PIC 9(4) COMP.\n023000             15 NEWVS             PIC X.\n023100             15 NEWCS             PIC X.\n023200             15 VENDRS            PIC X(32).\n023300             15 CTGRYS            PIC X(32).\n023400     05  P34SAVE REDEFINES P30SAVE.\n023500         10  ACRNMUS              PIC X(16).\n023600         10  PRDNMUS              PIC X(64).\n023700         10  VENDRUS              PIC X(32).\n023800         10  CTGRYUS              PIC X(32).\n023900         10  PINXUS               PIC 9(4) COMP.\n024000         10  VINXUS               PIC 9(4) COMP.\n024100         10  CINXUS               PIC 9(4) COMP.\n024200         10  P34SAVE-LINES.\n024300             15 FILLER OCCURS 8 TIMES INDEXED BY P34SINX.\n024400                 20 ORDRUS        PIC X(12).\n024500                 20 RELSUS        PIC X(12).\n024600                 20 PTFMDUS       PIC X(10).\n024700                 20 DTINSTUS      PIC X(6).\n024800                 20 FMIDUS        PIC X(7).\n024900         10  FILLER               PIC X(218).\n025000 01  LISTX-TBL.\n025100     05  FILLER OCCURS 16 TIMES INDEXED BY SELX.\n025200         10  SELINX               PIC 9(4) COMP.\n025300         10  SELRRN               PIC 9(4) COMP.\n025400         10  SELSLOT              PIC 9(4) COMP.\n025500 01  MISC-VARIABLES.\n025600     05  SEQ                      PIC 9(3) COMP-3.\n025700     05  EDIT-STATUS              PIC 9.\n025800     05  PRRNUM                   PIC 9(4) COMP VALUE ZERO.\n025900     05  PRTBL-UPD                PIC X(1) VALUE SPACE.\n026000     05  REQ-PRRNUM               PIC 9(4) COMP.\n026100     05  REQ-PRTBLINX             PIC 9(4) COMP.\n026200     05  PRTBL-PARM-CHANGE        PIC X(1) VALUE SPACE.\n026300     05  IRRNUM                   PIC 9(4) COMP.\n026400     05  INTBL-UPD                PIC X(1) VALUE SPACE.\n026500     05  REQ-IRRNUM               PIC 9(4) COMP.\n026600     05  REQ-INTBLINX             PIC 9(4) COMP.\n026700     05  INTBL-PARM-CHANGE        PIC X(1) VALUE SPACE.\n026800     05  TABLE-PARMS.\n026900         10 PRTBL-HI-PINX         PIC 9(4) COMP.\n027000         10 PRTBL-HI-RRNUM        PIC 9(4) COMP.\n027100         10 INTBL-HI-IINX         PIC 9(4) COMP.\n027200         10 INTBL-HI-RRNUM        PIC 9(4) COMP.\n027300     05  INSRT-SLOT               PIC 9(4) COMP.\n027400     05  PTF-ADD-FLAG             PIC X.\n027500         88  NO-PTF-ADDS                  VALUE '0'.\n027600         88  PTF-ADDS                     VALUE '1'.\n027700     05  TBL-ADD-FLAG             PIC X.\n027800         88  NO-TBL-ADDS                  VALUE '0'.\n027900         88  TBL-ADDS                     VALUE '1'.\n028000     05  NO-RELEASE-FLAG          PIC X.\n028100         88  ALL-RELEASES-SPECIFIED       VALUE '0'.\n028200     05  LOCATE-FLAG              PIC 9.\n028300         88  ENTRY-NOT-FOUND              VALUE 0.\n028400         88  ENTRY-FOUND                  VALUE 1.\n028500         88  BEFORE-ENTRY                 VALUE 2.\n028600         88  AFTER-ENTRY                  VALUE 3.\n028700         88  EMPTY-SET                    VALUE 4.\n028800         88  END-OF-SET                   VALUE 4.\n028900     05  STATUS-FLAG              PIC X.\n029000     05  UPDATE-FLAG              PIC X.\n029100     05  HSTRY-MODE               PIC X(2).\n029200     05  CURR-DTINST              PIC X(6).\n029300     05  NEXT-DTINST              PIC X(6).\n029400 01  ISPF-PARMS.\n029500     05  SSRPNL00                 PIC X(9) VALUE 'SSRPNL00 '.\n029600     05  SSRPNL30                 PIC X(9) VALUE 'SSRPNL30 '.\n029700     05  SSRPNL31                 PIC X(9) VALUE 'SSRPNL31 '.\n029800     05  SSRPNL32                 PIC X(9) VALUE 'SSRPNL32 '.\n029900     05  SSRPNL33                 PIC X(9) VALUE 'SSRPNL33 '.\n030000     05  SSRPNL34                 PIC X(9) VALUE 'SSRPNL34 '.\n030100     05  SSRMSGNUM                PIC X(9) VALUE SPACES.\n030200     05  ISPDISPLAY               PIC X(8) VALUE 'DISPLAY '.\n030300     05  ISPSETMSG                PIC X(7) VALUE 'SETMSG '.\n030400     05  ISPSELECT                PIC X(7) VALUE 'SELECT '.\n030500     05  ISPVDEFINE               PIC X(8) VALUE 'VDEFINE '.\n030600     05  ISPVDELETE               PIC X(8) VALUE 'VDELETE '.\n030700     05  CHAR                     PIC X(5) VALUE 'CHAR '.\n030800 01  FILE-STATUS             VALUE ZERO.\n030900     05  SSRHSTRY-ST              PIC X(2).\n031000     05  SSRPRTBL-ST              PIC X(2).\n031100     05  SSRINTBL-ST              PIC X(2).\n031200 01  SAVE-SEARCH-ARGS.\n031300     05  SAVE-SRCHTYPE            PIC X      VALUE SPACES.\n031400     05  SAVE-SRCHARG1            PIC X(32)  VALUE SPACES.\n031500     05  SAVE-SRCHARG2            PIC X(32)  VALUE SPACES.\n031600     05  SAVE-SRCHINX             PIC 9(4) COMP.\n031700 01  SEARCH-ARGS.\n031800     05  SRCHTYPE                 PIC X.\n031900     05  SRCHARG.\n032000         10  SRCHARG1             PIC X(32).\n032100         10  SRCHARG2             PIC X(32).\n032200     05  SRCHACRNM                PIC X(16).\n032300     05  SRCHPRDNM.\n032400         10  SRCHPRDN1            PIC X(32).\n032500         10  SRCHPRDN2            PIC X(32).\n032600     05  SRCHPTFKEY.\n032700         10 SRCHPTFMD             PIC X(10).\n032800         10 SRCHPTFINX            PIC 9(4) COMP.\n032900     05  SRCHFMIDKEY.\n033000         10 SRCHFMID              PIC X(7).\n033100         10 SRCHFMIDINX           PIC 9(4) COMP.\n033200     05  SRCHINXKEY.\n033300         10  SRCHINXTYPE          PIC X.\n033400         10  SRCHINXITM           PIC X(32).\n033500     05  SRCHPINX                 PIC 9(4) COMP.\n033600     05  SRCHVINX                 PIC 9(4) COMP.\n033700     05  SRCHCINX                 PIC 9(4) COMP.\n033800 PROCEDURE DIVISION.\n033900 OPEN-FILES.\n034000     CALL 'ISPLINK' USING ISPVDEFINE SRCHARGLST SRCHARG CHAR L32.\n034100     CALL 'ISPLINK' USING ISPVDEFINE PARMLST ARRAY-2 CHAR L2.\n034200     CALL 'ISPLINK' USING ISPVDEFINE ORDRELLST ARRAY-12 CHAR\n034300             L12.\n034400     CALL 'ISPLINK' USING ISPVDEFINE CODELST ARRAY-1 CHAR L1.\n034500     CALL 'ISPLINK' USING ISPVDEFINE FMIDLST ARRAY-7 CHAR L7.\n034600     OPEN INPUT SSRHSTRY.\n034700     IF SSRHSTRY-ST NOT = ZEROS\n034800          MOVE 'SSRMS900' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n034900          GO TO FILE-ERROR.\n035000     MOVE 'IN' TO  HSTRY-MODE.\n035100 MENU-PANEL.\n035200     MOVE SPACES TO SRCHTYPE SRCHARG SRCHACRNM SRCHPRDNM\n035300                    SRCHPTFMD SRCHFMID SRCHINXKEY.\n035400     MOVE ZERO TO SRCHPINX SRCHVINX SRCHCINX.\n035500     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL00.\n035600     IF RETURN-CODE = 8 GO TO END-PROGRAM\n035700         ELSE GO TO CHECK-PARMS.\n035800 FILE-ERROR.\n035900     IF ERRFILE = 'SSRINTBL'\n036000         MOVE SSRINTBL-ST TO FILESTAT.\n036100     IF ERRFILE = 'SSRPRTBL'\n036200         MOVE SSRPRTBL-ST TO FILESTAT.\n036300     IF ERRFILE = 'SSRHSTRY'\n036400         MOVE SSRHSTRY-ST TO FILESTAT.\n036500     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL00 SSRMSGNUM.\n036600 END-PROGRAM.\n036700     MOVE 'SSRPRTBL' TO ERRFILE.\n036800     IF PRTBL-UPD = 'Y' AND PRRNUM > ZERO\n036900         REWRITE PRTBL-REC\n037000         IF SSRPRTBL-ST NOT = ZEROS\n037100             MOVE 'SSRMS902' TO SSRMSGNUM PERFORM FILE-ERROR.\n037200     IF PRRNUM > ZERO\n037300         CLOSE SSRPRTBL\n037400         IF SSRPRTBL-ST NOT = ZERO\n037500              MOVE 'SSRMS903' TO SSRMSGNUM GO TO FILE-ERROR.\n037600     MOVE 'SSRINTBL' TO ERRFILE.\n037700     IF INTBL-UPD = 'Y' AND IRRNUM > ZERO\n037800         REWRITE INTBL-REC\n037900         IF SSRINTBL-ST NOT = ZEROS\n038000             MOVE 'SSRMS902' TO SSRMSGNUM PERFORM FILE-ERROR.\n038100     IF IRRNUM > ZERO\n038200         CLOSE SSRINTBL\n038300         IF SSRINTBL-ST NOT = ZERO\n038400              MOVE 'SSRMS903' TO SSRMSGNUM GO TO FILE-ERROR.\n038500     CLOSE SSRHSTRY.\n038600     IF SSRHSTRY-ST NOT = ZEROS\n038700         MOVE 'SSRMS903' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n038800         PERFORM FILE-ERROR.\n038900     CALL 'ISPLINK' USING ISPVDELETE SRCHARGLST.\n039000     CALL 'ISPLINK' USING ISPVDELETE PARMLST.\n039100     CALL 'ISPLINK' USING ISPVDELETE PTFLST.\n039200     CALL 'ISPLINK' USING ISPVDELETE DATELST.\n039300     CALL 'ISPLINK' USING ISPVDELETE FMIDLST.\n039400     CALL 'ISPLINK' USING ISPVDELETE ACRNMLST.\n039500     CALL 'ISPLINK' USING ISPVDELETE PRDNMLST.\n039600     CALL 'ISPLINK' USING ISPVDELETE ORDRELLST.\n039700     CALL 'ISPLINK' USING ISPVDELETE CODELST.\n039800     GOBACK.\n039900 CHECK-PARMS.\n040000     IF PARM-SRCHTYPE = 'A'\n040100         MOVE SRCHARG1 TO SRCHACRNM.\n040200     IF PARM-SRCHTYPE = 'T'\n040300         MOVE SRCHARG1 TO SRCHPTFMD\n040400         MOVE ZERO TO SRCHPTFINX.\n040500     IF PARM-SRCHTYPE = 'F'\n040600         MOVE SRCHARG1 TO SRCHFMID\n040700         MOVE ZERO TO SRCHFMIDINX.\n040800     IF PARM-SRCHTYPE = 'V'\n040900         MOVE 'V' TO SRCHINXTYPE\n041000         MOVE SRCHARG1 TO SRCHINXITM.\n041100     IF PARM-SRCHTYPE = 'C'\n041200         MOVE 'C' TO SRCHINXTYPE\n041300         MOVE SRCHARG1 TO SRCHINXITM.\n041400     IF PARM-SRCHTYPE = 'P'\n041500         MOVE SRCHARG TO SRCHPRDNM.\n041600     MOVE PARM-SRCHTYPE TO SRCHTYPE.\n041700     IF PARM-FUNCTION = 'H'\n041800         GO TO PRODUCT-HISTORY-FUNCTION.\n041900     IF PARM-FUNCTION = 'P'\n042000         GO TO PRODUCT-LIST-FUNCTION.\n042100     IF PARM-FUNCTION = 'V' OR 'C'\n042200         GO TO INXITM-LIST-FUNCTION.\n042300     IF PARM-FUNCTION = 'L'\n042400         CALL 'ISPLINK' USING ISPSELECT BUFLENGTH SSRPRINT\n042500         GO TO MENU-PANEL.\n042600 ADD-FUNCTION.\n042700     MOVE 'A' TO STATE-1.\n042800     CALL 'ISPLINK' USING ISPVDEFINE PTFLST PTFMD CHAR L10.\n042900     CALL 'ISPLINK' USING ISPVDEFINE DATELST DATE-INST CHAR L2.\n043000     CALL 'ISPLINK' USING ISPVDEFINE ACRNMLST ARRAY-16 CHAR\n043100             L16.\n043200     CALL 'ISPLINK' USING ISPVDEFINE PRDNMLST ARRAY-32 CHAR\n043300             L32.\n043400     MOVE ZEROS TO DATE-INST.\n043500     MOVE SPACES TO ARRAY-16 ARRAY-32 ARRAY-12 ARRAY-7\n043600         ARRAY-1 PTFMD.\n043700 ENTRY-SCREEN.\n043800     MOVE SPACE TO STATE-2.\n043900     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL30\n044000         IF RETURN-CODE = 8 GO TO MENU-PANEL.\n044100     MOVE 1 TO REQ-PRRNUM REQ-IRRNUM.\n044200     PERFORM LOCATE-PRTBL.\n044300     PERFORM LOCATE-INTBL.\n044400 START-EDIT.\n044500     SET P30ACRX TO 1. SET P30PRDX TO 1. SET ORDRELX TO 1.\n044600     SET CODX TO 1. SET P30SINX TO 1. SET FMIDX TO 1.\n044700     MOVE 0 TO EDIT-STATUS.\n044800     MOVE '0' TO NO-RELEASE-FLAG.\n044900     MOVE '0' TO PTF-ADD-FLAG.\n045000 EDIT-SCREEN.\n045100     IF PRDNME(P30PRDX) = SPACES\n045200       AND ACRNME(P30ACRX) = SPACES\n045300         NEXT SENTENCE\n045400     ELSE\n045500         MOVE '1' TO PTF-ADD-FLAG\n045600         IF PRDNME(P30PRDX) = PRDNMS(P30SINX)\n045700           AND ACRNME(P30ACRX) = ACRNMS(P30SINX)\n045800             NEXT SENTENCE\n045900         ELSE\n046000             PERFORM EDIT-LINE THRU EDIT-EXIT\n046100                 IF EDIT-STATUS = 1 GO TO START-EDIT\n046200                 ELSE IF EDIT-STATUS = 2 GO TO ENTRY-SCREEN\n046300                 ELSE IF EDIT-STATUS = 9 GO TO MENU-PANEL.\n046400     MOVE PRDNME(P30PRDX) TO PRDNMS(P30SINX).\n046500     MOVE ACRNME(P30ACRX) TO ACRNMS(P30SINX).\n046600     IF P30PRDX < 5\n046700         SET P30PRDX UP BY 1\n046800         SET P30ACRX UP BY 1\n046900         SET ORDRELX UP BY 1\n047000         SET FMIDX UP BY 1\n047100         SET CODX UP BY 1\n047200         SET P30SINX UP BY 1\n047300         GO TO EDIT-SCREEN.\n047400     IF ALL-RELEASES-SPECIFIED\n047500         GO TO PROCESS-ADDS.\n047600     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n047700     PERFORM LOCATE-PRTBL.\n047800     PERFORM LOCATE-INTBL.\n047900     IF STATE-1 = 'A'\n048000         IF NO-PTF-ADDS\n048100             GO TO ENTRY-SCREEN.\n048200     MOVE 'C' TO STATE-1.\n048300     GO TO ENTRY-SCREEN.\n048400 SAVE-SEARCHARGS.\n048500     IF SRCHTYPE = 'A'\n048600         MOVE SRCHACRNM TO SAVE-SRCHARG1.\n048700     IF SRCHTYPE = 'P'\n048800         MOVE SRCHPRDN1 TO SAVE-SRCHARG1\n048900         MOVE SRCHPRDN2 TO SAVE-SRCHARG2.\n049000     IF SRCHTYPE = 'V'\n049100         MOVE SRCHVINX TO SAVE-SRCHINX.\n049200     IF SRCHTYPE = 'C'\n049300         MOVE SRCHCINX TO SAVE-SRCHINX.\n049400     IF SRCHTYPE = 'T'\n049500         MOVE SRCHPTFKEY TO SAVE-SRCHARG1.\n049600     IF SRCHTYPE = 'F'\n049700         MOVE SRCHFMIDKEY TO SAVE-SRCHARG1.\n049800     MOVE SRCHTYPE TO SAVE-SRCHTYPE.\n049900 RESTORE-SEARCHARGS.\n050000     MOVE SAVE-SRCHTYPE TO SRCHTYPE.\n050100     IF SRCHTYPE = 'A'\n050200         MOVE SAVE-SRCHARG1 TO SRCHACRNM.\n050300     IF SRCHTYPE = 'P'\n050400         MOVE SAVE-SRCHARG1 TO SRCHPRDN1\n050500         MOVE SAVE-SRCHARG2 TO SRCHPRDN2.\n050600     IF SRCHTYPE = 'V'\n050700         MOVE SAVE-SRCHINX TO SRCHVINX.\n050800     IF SRCHTYPE = 'C'\n050900         MOVE SAVE-SRCHINX TO SRCHCINX.\n051000     IF SRCHTYPE = 'T'\n051100         MOVE SAVE-SRCHARG1 TO SRCHPTFKEY.\n051200     IF SRCHTYPE = 'F'\n051300         MOVE SAVE-SRCHARG1 TO SRCHFMIDKEY.\n051400 PRODUCT-HISTORY-FUNCTION.\n051500     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n051600     IF NOT ENTRY-FOUND MOVE 'N ' TO ERRT GO TO MENU-PANEL.\n051700     PERFORM LIST-PROD-HISTORY THRU PROD-HIST-EXIT.\n051800     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n051900     PERFORM LOCATE-PRTBL.\n052000     PERFORM LOCATE-INTBL.\n052100     GO TO MENU-PANEL.\n052200 LIST-PROD-HISTORY.\n052300     MOVE SPACE TO STATUS-FLAG.\n052400     CALL 'ISPLINK' USING ISPVDEFINE ACRNMLST ARRAY-16 CHAR\n052500             L16.\n052600     CALL 'ISPLINK' USING ISPVDEFINE PRDNMLST ARRAY-32 CHAR\n052700             L32.\n052800     CALL 'ISPLINK' USING ISPVDEFINE P34PTFLST P34PTF-TBL CHAR\n052900             L10.\n053000     CALL 'ISPLINK' USING ISPVDEFINE P34DTLST P34DTINST-TBL CHAR\n053100             L2.\n053200     MOVE ZEROES TO SSRHSTRY-DATE-INST.\n053300 PROD-HISTORY.\n053400     PERFORM SAVE-SEARCHARGS.\n053500     MOVE PRTBL-PRDNM(PRTBLINX) TO PRDNM PRDNMUS.\n053600     MOVE PRTBL-ACRNM(PRTBLINX) TO ACRNM ACRNMUS.\n053700     MOVE PRTBL-PINX(PRTBLINX) TO PINXUS.\n053800     MOVE PRTBL-CINX(PRTBLINX) TO SRCHCINX CINXUS.\n053900     MOVE 'Z' TO SRCHTYPE.\n054000     PERFORM START-INTBL THRU SEARCH-INTBL-EXIT.\n054100     IF ENTRY-FOUND MOVE INTBL-INXITM(INTBLINX) TO CTGRY, CTGRYUS\n054200         ELSE MOVE SPACE TO CTGRY, CTGRYUS.\n054300     MOVE PRTBL-VINX(PRTBLINX) TO SRCHVINX VINXUS.\n054400     MOVE 'Y' TO SRCHTYPE.\n054500     PERFORM SEARCH-INTBL THRU SEARCH-INTBL-EXIT.\n054600     IF ENTRY-FOUND MOVE INTBL-INXITM(INTBLINX) TO VENDR, VENDRUS\n054700         ELSE MOVE SPACE TO VENDR, VENDRUS.\n054800     MOVE SPACE TO ERRT.\n054900 START-SSRHSTRY.\n055000     SET ORDRELX TO 1. SET FMIDX TO 1. SET P34PTFX TO 1.\n055100     SET P34DTX TO 1. SET P34SINX TO 1.\n055200     MOVE SPACES TO P34PTF-TBL P34DTINST-TBL ARRAY-12 ARRAY-7\n055300         ARRAY-1 P34SAVE-LINES.\n055400     MOVE ZERO TO ERRL ENDL.\n055500     MOVE PINXUS TO SSRHSTRY-PINX.\n055600     MOVE SSRHSTRY-DATE-INST TO CURR-DTINST.\n055700     START SSRHSTRY KEY > SSRHSTRY-KEY\n055800         INVALID KEY GO TO END-HIST-RECS.\n055900     IF SSRHSTRY-ST NOT = ZEROS\n056000         MOVE 'SSRMS904' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n056100         GO TO FILE-ERROR.\n056200 NEXT-SSRHSTRY.\n056300     READ SSRHSTRY NEXT AT END GO TO END-HIST-RECS.\n056400     IF SSRHSTRY-ST NOT = ZEROS\n056500         MOVE 'SSRMS901' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n056600         GO TO FILE-ERROR.\n056700     IF SSRHSTRY-PINX = PRTBL-PINX(PRTBLINX)\n056800         GO TO NEXT-HIST-LINE.\n056900 END-HIST-RECS.\n057000     IF ORDRELX = 1 AND ERRT = 'F '\n057100         GO TO NEXT-PRODUCT.\n057200     MOVE ZEROS TO NEXT-DTINST.\n057300     GO TO PROD-HIST-PANEL.\n057400 NEXT-HIST-LINE.\n057500     MOVE SSRHSTRY-ORDR TO ORDRE(ORDRELX) ORDRUS(P34SINX).\n057600     MOVE SSRHSTRY-RELS TO RELSE(ORDRELX) RELSUS(P34SINX).\n057700     MOVE SSRHSTRY-FMID TO FMIDE(FMIDX) FMIDUS(P34SINX).\n057800     MOVE SSRHSTRY-PTFMD TO PTFMDU(P34PTFX) PTFMDUS(P34SINX).\n057900     MOVE SSRHSTRY-DATE-INST TO DTINSTU(P34DTX) DTINSTUS(P34SINX).\n058000     ADD 1 TO ENDL.\n058100     IF ORDRELX < 8\n058200         SET ORDRELX UP BY 1  SET FMIDX UP BY 1\n058300         SET P34PTFX UP BY 1  SET P34DTX UP BY 1\n058400         SET P34SINX UP BY 1\n058500         GO TO NEXT-SSRHSTRY.\n058600     MOVE SSRHSTRY-DATE-INST TO NEXT-DTINST.\n058700 PROD-HIST-PANEL.\n058800     MOVE 0 TO REQ-PRRNUM REQ-IRRNUM.\n058900     PERFORM LOCATE-PRTBL.\n059000     PERFORM LOCATE-INTBL.\n059100     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL34.\n059200     IF RETURN-CODE = 8 MOVE 'E' TO STATUS-FLAG.\n059300     MOVE ' ' TO UPDATE-FLAG.\n059400     PERFORM LOCATE-PRTBL.\n059500     PERFORM LOCATE-INTBL.\n059600     PERFORM GET-TABLE-PARMS.\n059700     IF KODE(9) = 'D'\n059800         PERFORM DELETE-PROD THRU DELETE-PROD-EXIT\n059900         GO TO CLOSE-HISTORY-IO.\n060000     MOVE ZERO TO SRCHVINX.\n060100     IF CTGRY NOT = CTGRYUS\n060200         MOVE 'Y' TO UPDATE-FLAG\n060300         MOVE CTGRY TO SRCHINXITM\n060400         MOVE 'C' TO SRCHTYPE SRCHINXTYPE\n060500         PERFORM ADD-INXITM THRU ADD-INXITM-EXIT\n060600         MOVE CTGRY TO CTGRYUS\n060700         MOVE INTBL-IINX(INTBLINX) TO CINXUS.\n060800     IF VENDR NOT = VENDRUS\n060900         MOVE 'Y' TO UPDATE-FLAG\n061000         MOVE VENDR TO SRCHINXITM\n061100         MOVE 'V' TO SRCHTYPE SRCHINXTYPE\n061200         PERFORM ADD-INXITM THRU ADD-INXITM-EXIT\n061300         MOVE VENDR TO VENDRUS\n061400         MOVE INTBL-IINX(INTBLINX) TO VINXUS.\n061500     IF ACRNMUS NOT = ACRNM MOVE 'Y' TO UPDATE-FLAG.\n061600     IF PRDNM = PRDNMUS\n061700         GO TO UPDATE-PROD.\n061800     MOVE PRDNM TO SRCHPRDNM MOVE 'P' TO SRCHTYPE.\n061900     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n062000     IF ENTRY-FOUND MOVE 'DP' TO ERRT GO TO PROD-HIST-PANEL.\n062100     MOVE ACRNM TO SRCHACRNM.\n062200     MOVE PINXUS TO SRCHPINX.\n062300     MOVE VINXUS TO SRCHVINX.\n062400     MOVE CINXUS TO SRCHCINX.\n062500     PERFORM ADD-PRODUCT THRU ADD-PRODUCT-EXIT.\n062600     MOVE PRDNMUS TO SRCHPRDNM.\n062700     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n062800     PERFORM DELETE-PROD THRU DELETE-PROD-EXIT.\n062900     GO TO HIST-UPDATE.\n063000 UPDATE-PROD.\n063100     IF UPDATE-FLAG NOT = 'Y'\n063200         GO TO HIST-UPDATE.\n063300     MOVE ACRNM TO PRTBL-ACRNM(PRTBLINX).\n063400     MOVE CINXUS TO PRTBL-CINX(PRTBLINX).\n063500     MOVE VINXUS TO PRTBL-VINX(PRTBLINX).\n063600     MOVE 'Y' TO PRTBL-UPD.\n063700     GO TO HIST-UPDATE.\n063800 DELETE-PROD.\n063900     IF PRTBLINX < PRTBL-HI-SLOT\n064000         MOVE PRTBL-ENTRY(PRTBLINX + 1) TO PRTBL-ENTRY(PRTBLINX)\n064100         SET PRTBLINX UP BY 1\n064200         GO TO DELETE-PROD.\n064300     SUBTRACT 1 FROM PRTBL-HI-SLOT.\n064400     MOVE 'Y' TO PRTBL-UPD.\n064500     IF KODE(9) NOT = 'D'\n064600         GO TO DELETE-PROD-EXIT.\n064700     PERFORM OPEN-HISTORY-IO.\n064800     MOVE PINXUS TO SSRHSTRY-PINX.\n064900     MOVE ZEROES TO SSRHSTRY-DATE-INST.\n065000     START SSRHSTRY KEY NOT < SSRHSTRY-KEY\n065100         INVALID KEY GO TO DELETE-PROD-EXIT.\n065200     IF SSRHSTRY-ST NOT = ZEROS\n065300         MOVE 'SSRMS904' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n065400         PERFORM CLOSE-HISTORY-IO GO TO FILE-ERROR.\n065500 DELETE-SSRHSTRY-LOOP.\n065600     READ SSRHSTRY NEXT AT END GO TO DELETE-PROD-EXIT.\n065700     IF SSRHSTRY-ST NOT = ZEROS\n065800         MOVE 'SSRMS901' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n065900         PERFORM CLOSE-HISTORY-IO GO TO FILE-ERROR.\n066000     IF SSRHSTRY-PINX NOT = PINXUS\n066100         GO TO DELETE-PROD-EXIT.\n066200     DELETE SSRHSTRY RECORD.\n066300     IF SSRHSTRY-ST NOT = ZEROS\n066400         MOVE 'SSRMS905' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n066500         PERFORM CLOSE-HISTORY-IO GO TO FILE-ERROR.\n066600     GO TO DELETE-SSRHSTRY-LOOP.\n066700 DELETE-PROD-EXIT.\n066800     EXIT.\n066900 OPEN-HISTORY-IO.\n067000     IF HSTRY-MODE = 'IN'\n067100       MOVE 'SSRHSTRY' TO ERRFILE\n067200       CLOSE SSRHSTRY\n067300       IF SSRHSTRY-ST NOT = ZEROS\n067400         MOVE 'SSRMS903' TO SSRMSGNUM GO TO FILE-ERROR\n067500       ELSE\n067600         OPEN I-O SSRHSTRY\n067700           IF SSRHSTRY-ST NOT = ZEROS\n067800             MOVE 'SSRMS900' TO SSRMSGNUM GO TO FILE-ERROR.\n067900     MOVE 'IO' TO HSTRY-MODE.\n068000 HIST-UPDATE.\n068100     PERFORM UPDATE-TABLE-PARMS.\n068200     MOVE ACRNM TO ACRNMUS.\n068300     MOVE PRDNM TO PRDNMUS.\n068400     SET ORDRELX TO 1. SET P34PTFX TO 1. SET P34DTX TO 1.\n068500     SET FMIDX TO 1. SET P34SINX TO 1. SET CODX TO 1.\n068600 HIST-UPDATE-LOOP.\n068700     IF ORDRELX > ENDL GO TO CLOSE-HISTORY-IO.\n068800     IF DTINSTUS(P34SINX) = SPACES OR ZEROS\n068900         GO TO NEXT-HIST-UPDATE.\n069000     MOVE ' ' TO UPDATE-FLAG.\n069100     IF KODE(CODX) = 'D'\n069200         GO TO DELETE-SSRHSTRY.\n069300     IF ORDRE(ORDRELX) NOT = ORDRUS(P34SINX)\n069400         MOVE 'Y' TO UPDATE-FLAG.\n069500     IF RELSE(ORDRELX) NOT = RELSUS(P34SINX)\n069600         MOVE 'Y' TO UPDATE-FLAG.\n069700     IF FMIDE(FMIDX) NOT = FMIDUS(P34SINX)\n069800         MOVE 'Y' TO UPDATE-FLAG.\n069900     IF PTFMDU(P34PTFX) NOT = PTFMDUS(P34SINX)\n070000         MOVE 'Y' TO UPDATE-FLAG.\n070100     IF DTINSTU(P34DTX) = DTINSTUS(P34SINX)\n070200         IF UPDATE-FLAG = 'Y' GO TO UPDATE-SSRHSTRY\n070300         ELSE GO TO NEXT-HIST-UPDATE.\n070400     IF YYU(P34DTX) < '00' MOVE 'DE' TO ERRT.\n070500     IF MMU(P34DTX) < '00' OR > '12' MOVE 'DE' TO ERRT.\n070600     IF MMU(P34DTX) = '04' OR '06' OR '09' OR '11'\n070700         IF DDU(P34DTX) > '30' MOVE 'DE' TO ERRT.\n070800     IF MMU(P34DTX) = '02'\n070900         IF DDU(P34DTX) > '29' MOVE 'DE' TO ERRT.\n071000     IF DDU(P34DTX) < '00' OR > '31' MOVE 'DE' TO ERRT.\n071100     IF ERRT = 'DE' SET ERRL TO P34DTX GO TO PROD-HIST-PANEL.\n071200     PERFORM OPEN-HISTORY-IO.\n071300     MOVE PINXUS TO SSRHSTRY-PINX\n071400                    SSRHSTRY-PTFINX SSRHSTRY-FMIDINX.\n071500     MOVE DTINSTU(P34DTX) TO SSRHSTRY-DATE-INST.\n071600     MOVE ORDRE(ORDRELX) TO SSRHSTRY-ORDR.\n071700     MOVE RELSE(ORDRELX) TO SSRHSTRY-RELS.\n071800     MOVE FMIDE(FMIDX) TO SSRHSTRY-FMID.\n071900     MOVE PTFMDU(P34PTFX) TO SSRHSTRY-PTFMD.\n072000     WRITE SSRHSTRY-REC\n072100         INVALID KEY\n072200             SET ERRL TO ORDRELX   MOVE 'DT' TO ERRT\n072300             PERFORM CLOSE-HISTORY-IO GO TO PROD-HIST-PANEL.\n072400     IF SSRHSTRY-ST = '00' OR '02' NEXT SENTENCE ELSE\n072500         MOVE 'SSRMS902' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n072600         PERFORM CLOSE-HISTORY-IO GO TO FILE-ERROR.\n072700 DELETE-SSRHSTRY.\n072800     PERFORM OPEN-HISTORY-IO.\n072900     MOVE PINXUS TO SSRHSTRY-PINX.\n073000     MOVE DTINSTUS(P34SINX) TO SSRHSTRY-DATE-INST.\n073100     DELETE SSRHSTRY INVALID KEY GO TO NEXT-HIST-UPDATE.\n073200     IF SSRHSTRY-ST NOT = ZEROS\n073300         MOVE 'SSRMS905' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n073400         PERFORM CLOSE-HISTORY-IO GO TO FILE-ERROR.\n073500     GO TO NEXT-HIST-UPDATE.\n073600 UPDATE-SSRHSTRY.\n073700     IF UPDATE-FLAG NOT = 'Y' GO TO NEXT-HIST-UPDATE.\n073800     PERFORM OPEN-HISTORY-IO.\n073900     MOVE ORDRE(ORDRELX) TO SSRHSTRY-ORDR.\n074000     MOVE RELSE(ORDRELX) TO SSRHSTRY-RELS.\n074100     MOVE FMIDE(FMIDX) TO SSRHSTRY-FMID.\n074200     MOVE PTFMDU(P34PTFX) TO SSRHSTRY-PTFMD.\n074300     MOVE PINXUS TO SSRHSTRY-PINX\n074400                    SSRHSTRY-PTFINX SSRHSTRY-FMIDINX.\n074500     MOVE DTINSTUS(P34SINX) TO SSRHSTRY-DATE-INST.\n074600     REWRITE SSRHSTRY-REC INVALID KEY GO TO NEXT-HIST-UPDATE.\n074700     IF SSRHSTRY-ST = '00' OR '02' NEXT SENTENCE ELSE\n074800         MOVE 'SSRMS902' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n074900         PERFORM CLOSE-HISTORY-IO GO TO FILE-ERROR.\n075000 NEXT-HIST-UPDATE.\n075100     IF KODE(CODX) = 'D'\n075200         MOVE SPACES TO DTINSTU(P34DTX)\n075300                        ORDRE(ORDRELX)\n075400                        RELSE(ORDRELX)\n075500                        FMIDE(FMIDX)\n075600                        PTFMDU(P34PTFX).\n075700     MOVE DTINSTU(P34DTX) TO DTINSTUS(P34SINX).\n075800     MOVE ORDRE(ORDRELX) TO ORDRUS(P34SINX).\n075900     MOVE RELSE(ORDRELX) TO RELSUS(P34SINX).\n076000     MOVE FMIDE(FMIDX) TO FMIDUS(P34SINX).\n076100     MOVE PTFMDU(P34PTFX) TO PTFMDUS(P34SINX).\n076200     SET ORDRELX UP BY 1  SET FMIDX UP BY 1\n076300     SET P34DTX UP BY 1  SET P34PTFX UP BY 1\n076400     SET P34SINX UP BY 1  SET CODX UP BY 1\n076500     GO TO HIST-UPDATE-LOOP.\n076600 CLOSE-HISTORY-IO.\n076700     IF HSTRY-MODE = 'IO'\n076800         MOVE 'SSRHSTRY' TO ERRFILE\n076900         CLOSE SSRHSTRY\n077000         IF SSRHSTRY-ST NOT = ZEROS\n077100             MOVE 'SSRMS903' TO SSRMSGNUM GO TO FILE-ERROR\n077200         ELSE OPEN INPUT SSRHSTRY\n077300             IF SSRHSTRY-ST NOT = ZEROS\n077400                 MOVE 'SSRMS900' TO SSRMSGNUM GO TO FILE-ERROR.\n077500     MOVE 'IN' TO HSTRY-MODE.\n077600 NEXT-PROD-HIST.\n077700     MOVE PRDNM TO SRCHPRDNM MOVE 'P' TO SRCHTYPE.\n077800     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n077900     PERFORM RESTORE-SEARCHARGS.\n078000     IF STATUS-FLAG = 'E' GO TO PROD-HIST-EXIT.\n078100 PAGE-FORWARD-HIST.\n078200     IF ERRT NOT = 'F ' GO TO PAGE-BACK-HIST.\n078300     IF KODE(9) = 'D'\n078400         SET PRTBLINX DOWN BY 1\n078500         GO TO NEXT-PRODUCT.\n078600     IF NEXT-DTINST = ZEROES\n078700         GO TO NEXT-PRODUCT.\n078800     MOVE NEXT-DTINST TO SSRHSTRY-DATE-INST.\n078900     GO TO START-SSRHSTRY.\n079000 PAGE-BACK-HIST.\n079100     IF ERRT NOT = 'B ' GO TO NO-ACTION-HIST.\n079200     IF CURR-DTINST NOT = ZEROS\n079300         MOVE ZEROS TO SSRHSTRY-DATE-INST\n079400         GO TO START-SSRHSTRY.\n079500     IF SRCHTYPE = 'T' OR 'F'\n079600         MOVE ZERO TO SRCHPTFINX SRCHFMIDINX\n079700         GO TO NEXT-PRODUCT.\n079800     PERFORM BACK-PRTBL THRU SEARCH-PRTBL-EXIT.\n079900     IF NOT ENTRY-FOUND\n080000         IF KODE(9) = 'D' GO TO PROD-HIST-VDEL\n080100         ELSE MOVE 'E ' TO ERRT GO TO PROD-HIST-PANEL.\n080200     MOVE ZEROS TO SSRHSTRY-DATE-INST.\n080300     GO TO PROD-HISTORY.\n080400 NO-ACTION-HIST.\n080500     IF KODE(9) = 'D'\n080600         SET PRTBLINX DOWN BY 1\n080700         GO TO NEXT-PRODUCT.\n080800     MOVE CURR-DTINST TO SSRHSTRY-DATE-INST.\n080900     GO TO START-SSRHSTRY.\n081000 NEXT-PRODUCT.\n081100     PERFORM SEARCH-PRTBL THRU SEARCH-PRTBL-EXIT.\n081200     IF NOT ENTRY-FOUND\n081300         IF KODE(9) = 'D' GO TO PROD-HIST-VDEL\n081400         ELSE MOVE 'E ' TO ERRT GO TO PROD-HIST-PANEL.\n081500     MOVE ZEROS TO SSRHSTRY-DATE-INST.\n081600     GO TO PROD-HISTORY.\n081700 PROD-HIST-VDEL.\n081800     CALL 'ISPLINK' USING ISPVDELETE P34PTFLST.\n081900     CALL 'ISPLINK' USING ISPVDELETE P34DTLST.\n082000 PROD-HIST-EXIT.\n082100     EXIT.\n082200 GET-TABLE-PARMS.\n082300     MOVE LOW-VALUES TO SSRHSTRY-KEY.\n082400     READ SSRHSTRY.\n082500     IF SSRHSTRY-ST NOT = ZEROS\n082600         MOVE 'SSRMS901' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n082700         GO TO FILE-ERROR.\n082800     MOVE SSRHSTRY-TABLE-PARMS TO TABLE-PARMS.\n082900 UPDATE-TABLE-PARMS.\n083000     IF 'Y' = PRTBL-PARM-CHANGE OR INTBL-PARM-CHANGE\n083100         PERFORM OPEN-HISTORY-IO\n083200         MOVE LOW-VALUES TO SSRHSTRY-REC\n083300         MOVE TABLE-PARMS TO SSRHSTRY-TABLE-PARMS\n083400         REWRITE SSRHSTRY-REC\n083500         IF SSRHSTRY-ST NOT = ZERO\n083600              MOVE 'SSRHSTRY' TO ERRFILE\n083700              MOVE 'SSRMS902' TO SSRMSGNUM GO TO FILE-ERROR.\n083800 PRODUCT-LIST-FUNCTION.\n083900     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n084000     IF ENTRY-NOT-FOUND\n084100         MOVE 'N ' TO ERRT\n084200     ELSE\n084300         PERFORM CALL-LIST-PROD.\n084400     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n084500     PERFORM LOCATE-PRTBL.\n084600     PERFORM LOCATE-INTBL.\n084700     GO TO MENU-PANEL.\n084800 CALL-LIST-PROD.\n084900     MOVE SPACE TO STATUS-FLAG.\n085000     PERFORM LIST-PROD THRU LIST-PROD-EXIT.\n085100     IF STATUS-FLAG = 'S'\n085200         PERFORM LIST-PROD-HISTORY THRU PROD-HIST-EXIT\n085300         GO TO CALL-LIST-PROD.\n085400 INXITM-LIST-FUNCTION.\n085500     MOVE SRCHTYPE TO SRCHINXTYPE STATE-2.\n085600     PERFORM START-LIST-INXITM.\n085700     IF STATUS-FLAG = 'N'\n085800         MOVE 'N ' TO ERRT\n085900     ELSE\n086000         MOVE SPACE TO STATUS-FLAG\n086100         PERFORM LIST-INXITM THRU LIST-INXITM-EXIT\n086200         IF STATUS-FLAG = 'S'\n086300             MOVE INTBL-INDXKEY(INTBLINX) TO SRCHINXKEY\n086400             MOVE SRCHINXITM TO SRCHARG1\n086500             MOVE SRCHINXTYPE TO SRCHTYPE\n086600             PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT\n086700             IF ENTRY-NOT-FOUND\n086800                 GO TO INXITM-LIST-FUNCTION\n086900             ELSE\n087000                 PERFORM CALL-LIST-PROD\n087100                 MOVE SPACES TO SRCHINXITM\n087200                 GO TO INXITM-LIST-FUNCTION.\n087300     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n087400     PERFORM LOCATE-PRTBL.\n087500     PERFORM LOCATE-INTBL.\n087600     GO TO MENU-PANEL.\n087700 LOCATE-PRTBL.\n087800     MOVE 'SSRPRTBL' TO ERRFILE.\n087900     IF PRRNUM NOT = REQ-PRRNUM\n088000       IF PRRNUM = ZERO\n088100         OPEN I-O SSRPRTBL\n088200         IF SSRPRTBL-ST NOT = ZERO\n088300           MOVE 'SSRMS900' TO SSRMSGNUM GO TO FILE-ERROR\n088400         ELSE NEXT SENTENCE\n088500       ELSE\n088600         IF PRTBL-UPD = 'Y'\n088700           REWRITE PRTBL-REC\n088800           IF SSRPRTBL-ST NOT = ZEROS\n088900             MOVE 'SSRMS902' TO SSRMSGNUM GO TO FILE-ERROR.\n089000     IF PRRNUM NOT = REQ-PRRNUM\n089100       IF REQ-PRRNUM = ZERO\n089200         CLOSE SSRPRTBL\n089300         IF SSRPRTBL-ST NOT = ZERO\n089400           MOVE 'SSRMS903' TO SSRMSGNUM GO TO FILE-ERROR\n089500         ELSE\n089600           MOVE PRRNUM TO REQ-PRRNUM\n089700           MOVE ZERO TO PRRNUM\n089800           SET REQ-PRTBLINX TO PRTBLINX\n089900       ELSE\n090000         MOVE REQ-PRRNUM TO PRRNUM\n090100         MOVE SPACE TO PRTBL-UPD\n090200         READ SSRPRTBL\n090300         IF SSRPRTBL-ST NOT = ZERO\n090400           MOVE 'SSRMS901' TO SSRMSGNUM GO TO FILE-ERROR.\n090500     SET PRTBLINX TO REQ-PRTBLINX.\n090600 START-PRTBL.\n090700     IF SRCHTYPE = 'C' OR 'V'\n090800         PERFORM START-INTBL THRU SEARCH-INTBL-EXIT\n090900         IF NOT ENTRY-FOUND\n091000             MOVE 0 TO LOCATE-FLAG GO TO SEARCH-PRTBL-EXIT\n091100         ELSE IF SRCHTYPE = 'V'\n091200                 MOVE INTBL-IINX(INTBLINX) TO SRCHVINX\n091300             ELSE\n091400                 MOVE INTBL-IINX(INTBLINX) TO SRCHCINX.\n091500 FIRST-PRTBL-SLOT.\n091600     MOVE 0 TO REQ-PRTBLINX.\n091700     MOVE 1 TO REQ-PRRNUM.\n091800     PERFORM LOCATE-PRTBL.\n091900 SEARCH-PRTBL.\n092000     MOVE 0 TO LOCATE-FLAG.\n092100     IF SRCHTYPE = 'F' OR 'T' NEXT SENTENCE\n092200         ELSE GO TO NEXT-PRTBL-SLOT.\n092300     IF SRCHTYPE = 'T'\n092400         ADD 1 TO SRCHPTFINX\n092500         MOVE SRCHPTFKEY TO SSRHSTRY-PTFKEY\n092600         START SSRHSTRY KEY NOT < SSRHSTRY-PTFKEY\n092700             INVALID KEY GO TO SEARCH-PRTBL-EXIT.\n092800     IF SRCHTYPE = 'F'\n092900         ADD 1 TO SRCHFMIDINX\n093000         MOVE SRCHFMIDKEY TO SSRHSTRY-FMIDKEY\n093100         START SSRHSTRY KEY NOT < SSRHSTRY-FMIDKEY\n093200             INVALID KEY GO TO SEARCH-PRTBL-EXIT.\n093300     IF SSRHSTRY-ST NOT = ZEROS\n093400         MOVE 'SSRMS904' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n093500         GO TO FILE-ERROR.\n093600     READ SSRHSTRY NEXT AT END GO TO SEARCH-PRTBL-EXIT.\n093700     IF SSRHSTRY-ST = '00' OR '02' NEXT SENTENCE ELSE\n093800         MOVE 'SSRMS901' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n093900         GO TO FILE-ERROR.\n094000     IF SRCHTYPE = 'T'\n094100         IF SSRHSTRY-PTFMD = SRCHPTFMD\n094200             MOVE SSRHSTRY-PINX TO SRCHPINX SRCHPTFINX\n094300         ELSE GO TO SEARCH-PRTBL-EXIT.\n094400     IF SRCHTYPE = 'F'\n094500         IF SSRHSTRY-FMID = SRCHFMID\n094600             MOVE SSRHSTRY-PINX TO SRCHPINX SRCHFMIDINX\n094700         ELSE GO TO SEARCH-PRTBL-EXIT.\n094800     PERFORM FIRST-PRTBL-SLOT.\n094900 NEXT-PRTBL-SLOT.\n095000     SET PRTBLINX UP BY 1.\n095100     IF PRTBLINX NOT > PRTBL-HI-SLOT\n095200         GO TO TEST-FORWARD.\n095300     IF PRTBL-NEXT-REC = ZERO\n095400         IF SRCHTYPE = 'C' OR 'V'\n095500             MOVE 4 TO LOCATE-FLAG\n095600             GO TO SEARCH-PRTBL-EXIT\n095700         ELSE\n095800             MOVE 0 TO LOCATE-FLAG\n095900             GO TO SEARCH-PRTBL-EXIT.\n096000     MOVE PRTBL-NEXT-REC TO REQ-PRRNUM.\n096100     MOVE 1 TO REQ-PRTBLINX.\n096200     PERFORM LOCATE-PRTBL.\n096300 TEST-FORWARD.\n096400     PERFORM TEST-PRTBL-ENTRY.\n096500     IF ENTRY-FOUND OR AFTER-ENTRY GO TO SEARCH-PRTBL-EXIT.\n096600     GO TO NEXT-PRTBL-SLOT.\n096700 BACK-PRTBL.\n096800     MOVE 0 TO LOCATE-FLAG.\n096900     SET PRTBLINX DOWN BY 1.\n097000     IF PRTBLINX NOT < 1 GO TO TEST-BACKWARD.\n097100     IF PRRNUM = 1\n097200         GO TO SEARCH-PRTBL-EXIT.\n097300     MOVE PRTBL-PREV-REC TO REQ-PRRNUM.\n097400     PERFORM LOCATE-PRTBL.\n097500     SET PRTBLINX TO PRTBL-HI-SLOT.\n097600 TEST-BACKWARD.\n097700     PERFORM TEST-PRTBL-ENTRY.\n097800     IF ENTRY-FOUND OR BEFORE-ENTRY GO TO SEARCH-PRTBL-EXIT.\n097900     GO TO BACK-PRTBL.\n098000 TEST-PRTBL-ENTRY.\n098100     IF SRCHTYPE = 'P'\n098200         IF SRCHPRDNM = SPACES\n098300             MOVE 1 TO LOCATE-FLAG\n098400         ELSE\n098500             IF PRTBL-PRDNM(PRTBLINX) > SRCHPRDNM\n098600                 MOVE 3 TO LOCATE-FLAG\n098700             ELSE\n098800                 IF PRTBL-PRDNM(PRTBLINX) = SRCHPRDNM\n098900                     MOVE 1 TO LOCATE-FLAG\n099000                 ELSE\n099100                     MOVE 2 TO LOCATE-FLAG.\n099200     IF SRCHTYPE = 'A'\n099300         IF PRTBL-ACRNM(PRTBLINX) = SRCHACRNM\n099400              MOVE 1 TO LOCATE-FLAG.\n099500     IF SRCHTYPE = 'F' OR 'T'\n099600         IF PRTBL-PINX(PRTBLINX) = SRCHPINX\n099700             MOVE 1 TO LOCATE-FLAG.\n099800     IF SRCHTYPE = 'V'\n099900         IF PRTBL-VINX(PRTBLINX) = SRCHVINX\n100000              MOVE 1 TO LOCATE-FLAG.\n100100     IF SRCHTYPE = 'C'\n100200         IF PRTBL-CINX(PRTBLINX) = SRCHCINX\n100300             MOVE 1 TO LOCATE-FLAG.\n100400 SEARCH-PRTBL-EXIT.\n100500     EXIT.\n100600 LIST-PROD.\n100700     CALL 'ISPLINK' USING ISPVDEFINE P32PRDLST P32PRD-TBL CHAR\n100800             L32.\n100900     CALL 'ISPLINK' USING ISPVDEFINE P32ACRLST P32ACR-TBL CHAR\n101000             L16.\n101100     PERFORM GET-TABLE-PARMS.\n101200 LIST-PROD-INIT.\n101300     MOVE SRCHARG1 TO SAVE-SRCHARG1.\n101400     IF SRCHTYPE = 'P'\n101500         MOVE SPACES TO SRCHARG1 SRCHPRDNM.\n101600     SET P32PRDX TO 1. SET P32ACRX TO 1. SET SELX TO 1.\n101700     MOVE SPACES TO P32PRD-TBL P32ACR-TBL ERRT.\n101800     IF EMPTY-SET\n101900         MOVE 0 TO ENDL GO TO LIST-PROD-PANEL.\n102000 LIST-PROD-LINE.\n102100     MOVE PRTBL-ACRNM(PRTBLINX) TO ACRNML(P32ACRX).\n102200     MOVE PRTBL-PRDNM(PRTBLINX) TO PRDNML(P32PRDX).\n102300     MOVE PRTBL-PINX(PRTBLINX) TO SELINX(SELX).\n102400     MOVE PRRNUM TO SELRRN(SELX).\n102500     SET SELSLOT(SELX) TO PRTBLINX.\n102600     IF P32ACRX = 8\n102700         MOVE 8 TO ENDL GO TO LIST-PROD-PANEL.\n102800     PERFORM SEARCH-PRTBL THRU SEARCH-PRTBL-EXIT.\n102900     IF ENTRY-NOT-FOUND OR END-OF-SET\n103000         MOVE 'E ' TO ERRT\n103100         SET ENDL TO P32PRDX\n103200         GO TO LIST-PROD-PANEL.\n103300     SET SELX UP BY 1. SET P32ACRX UP BY 1. SET P32PRDX UP BY 1.\n103400     GO TO LIST-PROD-LINE.\n103500 LIST-PROD-PANEL.\n103600     MOVE 0 TO REQ-PRRNUM REQ-IRRNUM.\n103700     PERFORM LOCATE-PRTBL.\n103800     PERFORM LOCATE-INTBL.\n103900     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL32.\n104000     IF RETURN-CODE = 8\n104100         MOVE 'E' TO STATUS-FLAG GO TO LIST-PROD-VDEL.\n104200     PERFORM LOCATE-PRTBL.\n104300     PERFORM LOCATE-INTBL.\n104400     PERFORM GET-TABLE-PARMS.\n104500     IF ERRT = 'DD'\n104600         PERFORM DELETE-INXITM THRU DELETE-INXITM-EXIT\n104700         MOVE SPACE TO SRCHARG1 SAVE-SRCHARG1 SRCHINXITM\n104800         GO TO LIST-PROD-VDEL.\n104900     IF SRCHARG1 NOT = SAVE-SRCHARG1\n105000         IF SRCHTYPE = 'C' OR 'V'\n105100             MOVE SRCHARG1 TO SRCHINXITM\n105200             MOVE INTBL-IINX(INTBLINX) TO SRCHVINX\n105300             PERFORM ADD-INXITM THRU ADD-INXITM-EXIT\n105400             IF ENTRY-FOUND\n105500                 MOVE 'DI' TO ERRT\n105600                 GO TO LIST-PROD-PANEL\n105700             ELSE\n105800                 PERFORM DELETE-INXITM THRU DELETE-INXITM-EXIT\n105900                 MOVE SRCHARG1 TO SAVE-SRCHARG1 SRCHINXITM\n106000         ELSE\n106100             IF SRCHARG1 NOT = SPACES\n106200                 MOVE SRCHARG1 TO SRCHPRDNM\n106300                 PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT\n106400                 IF ENTRY-NOT-FOUND\n106500                     MOVE 'N ' TO ERRT\n106600                     GO TO LIST-PROD-PANEL\n106700                 ELSE\n106800                     GO TO LIST-PROD-INIT.\n106900     PERFORM UPDATE-TABLE-PARMS.\n107000     IF ERRT NOT = 'F ' GO TO LIST-PROD-BACKPAGE.\n107100 LIST-PROD-NEXTPAGE.\n107200     PERFORM SEARCH-PRTBL THRU SEARCH-PRTBL-EXIT.\n107300     IF ENTRY-NOT-FOUND\n107400         MOVE 'E ' TO ERRT\n107500         GO TO LIST-PROD-PANEL\n107600     ELSE\n107700         GO TO LIST-PROD-INIT.\n107800 LIST-PROD-BACKPAGE.\n107900     IF ERRT NOT = 'B '\n108000         GO TO PROD-SELECT.\n108100     IF SRCHTYPE = 'T' OR 'F'\n108200         MOVE ZERO TO SRCHPTFINX SRCHFMIDINX\n108300         GO TO LIST-PROD-NEXTPAGE.\n108400     MOVE SELRRN(1) TO REQ-PRRNUM.\n108500     MOVE SELSLOT(1) TO REQ-PRTBLINX.\n108600     PERFORM LOCATE-PRTBL.\n108700     MOVE 8 TO SEQ.\n108800 BACK-PROD-LOOP.\n108900     PERFORM BACK-PRTBL THRU SEARCH-PRTBL-EXIT.\n109000     IF SEQ = 0 OR ENTRY-NOT-FOUND\n109100         GO TO LIST-PROD-NEXTPAGE.\n109200     SUBTRACT 1 FROM SEQ GO TO BACK-PROD-LOOP.\n109300 PROD-SELECT.\n109400     IF ERRT NOT = 'S '\n109500         GO TO LIST-PROD-PANEL.\n109600     MOVE 'S' TO STATUS-FLAG.\n109700     SET SELX TO ERRL.\n109800     MOVE SELRRN(SELX) TO REQ-PRRNUM.\n109900     MOVE SELSLOT(SELX) TO REQ-PRTBLINX.\n110000     PERFORM LOCATE-PRTBL.\n110100     IF SRCHTYPE = 'T' OR 'F'\n110200         MOVE PRTBL-PINX(PRTBLINX) TO SRCHPTFINX SRCHFMIDINX.\n110300 LIST-PROD-VDEL.\n110400     CALL 'ISPLINK' USING ISPVDELETE P32ACRLST.\n110500     CALL 'ISPLINK' USING ISPVDELETE P32PRDLST.\n110600 LIST-PROD-EXIT.\n110700     EXIT.\n110800 DELETE-INXITM.\n110900     MOVE SAVE-SRCHARG1 TO SRCHINXITM.\n111000     PERFORM START-INTBL THRU SEARCH-INTBL-EXIT.\n111100     IF NOT ENTRY-FOUND\n111200         GO TO DELETE-INXITM-EXIT.\n111300 DELETE-INXITM-LOOP.\n111400     IF INTBLINX < INTBL-HI-SLOT\n111500         MOVE INTBL-ENTRY(INTBLINX + 1) TO INTBL-ENTRY(INTBLINX)\n111600         SET INTBLINX UP BY 1\n111700         GO TO DELETE-INXITM-LOOP.\n111800     SUBTRACT 1 FROM INTBL-HI-SLOT.\n111900     MOVE 'Y' TO INTBL-UPD.\n112000 DELETE-INXITM-EXIT.\n112100     EXIT.\n112200 START-LIST-INXITM.\n112300     MOVE ' ' TO STATUS-FLAG.\n112400     PERFORM START-INTBL THRU SEARCH-INTBL-EXIT.\n112500     IF NOT ENTRY-FOUND\n112600         MOVE 'N' TO STATUS-FLAG.\n112700 LIST-INXITM.\n112800     CALL 'ISPLINK' USING ISPVDEFINE P33INXLST P33INX-TBL CHAR\n112900             L32.\n113000     SET P33IIX TO 1. SET SELX TO 1.\n113100     MOVE SPACES TO P33INX-TBL.\n113200 LIST-INXITM-LINE.\n113300     MOVE INTBL-INXITM(INTBLINX) TO INXITML(P33IIX).\n113400     MOVE INTBL-IINX(INTBLINX) TO SELINX(SELX).\n113500     MOVE IRRNUM TO SELRRN(SELX).\n113600     SET SELSLOT(SELX) TO INTBLINX.\n113700     IF P33IIX = 16 GO TO LIST-INXITM-PANEL.\n113800     PERFORM SEARCH-INTBL THRU SEARCH-INTBL-EXIT.\n113900     IF NOT ENTRY-FOUND GO TO LIST-INXITM-PANEL.\n114000     SET SELX UP BY 1. SET P33IIX UP BY 1.\n114100     GO TO LIST-INXITM-LINE.\n114200 LIST-INXITM-PANEL.\n114300     SET ENDL TO P33IIX.\n114400     MOVE 0 TO REQ-PRRNUM REQ-IRRNUM.\n114500     PERFORM LOCATE-PRTBL.\n114600     PERFORM LOCATE-INTBL.\n114700     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL33.\n114800     IF RETURN-CODE = 8\n114900         MOVE 'E' TO STATUS-FLAG GO TO LIST-INXITM-VDEL.\n115000     PERFORM LOCATE-PRTBL.\n115100     PERFORM LOCATE-INTBL.\n115200     IF ERRT NOT = 'F ' GO TO LIST-INXITM-BACKPAGE.\n115300 LIST-INXITM-NEXTPAGE.\n115400     PERFORM SEARCH-INTBL THRU SEARCH-INTBL-EXIT\n115500     IF ENTRY-FOUND\n115600         SET P33IIX TO 1   SET SELX TO 1\n115700         MOVE SPACES TO P33INX-TBL\n115800         GO TO LIST-INXITM-LINE\n115900     ELSE\n116000         MOVE 'E ' TO ERRT\n116100         GO TO LIST-INXITM-PANEL.\n116200 LIST-INXITM-BACKPAGE.\n116300     IF ERRT NOT = 'B '\n116400         GO TO INXITM-SELECT.\n116500     MOVE SELRRN(1) TO REQ-IRRNUM.\n116600     MOVE SELSLOT(1) TO REQ-INTBLINX.\n116700     PERFORM LOCATE-INTBL.\n116800     MOVE 16 TO SEQ.\n116900 BACK-INXITM-LOOP.\n117000     PERFORM BACK-INTBL THRU SEARCH-INTBL-EXIT.\n117100     IF ENTRY-FOUND AND SEQ > 1\n117200         SUBTRACT 1 FROM SEQ GO TO BACK-INXITM-LOOP.\n117300     GO TO LIST-INXITM-NEXTPAGE.\n117400 INXITM-SELECT.\n117500     IF ERRT NOT = 'S '\n117600             GO TO LIST-INXITM-PANEL.\n117700     MOVE 'S' TO STATUS-FLAG.\n117800     SET SELX TO ERRL. SET P33IIX TO ERRL.\n117900     MOVE SELRRN(SELX) TO REQ-IRRNUM.\n118000     MOVE SELSLOT(SELX) TO REQ-INTBLINX.\n118100     PERFORM LOCATE-INTBL.\n118200 LIST-INXITM-VDEL.\n118300     CALL 'ISPLINK' USING ISPVDELETE P33INXLST.\n118400 LIST-INXITM-EXIT.\n118500     EXIT.\n118600 EDIT-LINE.\n118700     IF ACRNME(P30ACRX) = '*' OR PRDN1E(P30PRDX) = '*'\n118800          GO TO LOOK-UP-PROD.\n118900     IF KODE(CODX) = 'Y' GO TO NEW-PRODUCT.\n119000     IF PRDNME(P30PRDX) = SPACE\n119100         MOVE 'A' TO SRCHTYPE\n119200         MOVE ACRNME(P30ACRX) TO SRCHACRNM\n119300     ELSE\n119400         MOVE 'P' TO SRCHTYPE\n119500         MOVE PRDNME(P30PRDX) TO SRCHPRDNM.\n119600     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n119700     IF ENTRY-FOUND\n119800         MOVE PRTBL-PINX(PRTBLINX) TO PINXS(P30SINX)\n119900         MOVE PRTBL-ACRNM(PRTBLINX) TO ACRNME(P30ACRX)\n120000         MOVE PRTBL-PRDNM(PRTBLINX) TO PRDNME(P30PRDX)\n120100         GO TO CHECK-DATE.\n120200 PROD-NOT-FOUND.\n120300     MOVE 'PN' TO ERRT. SET ERRL TO P30ACRX.\n120400     MOVE 0 TO REQ-PRRNUM REQ-IRRNUM.\n120500     PERFORM LOCATE-PRTBL.\n120600     PERFORM LOCATE-INTBL.\n120700     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL30.\n120800     IF RETURN-CODE = 8 MOVE 9 TO EDIT-STATUS GO TO EDIT-EXIT.\n120900     MOVE 1 TO EDIT-STATUS.\n121000     PERFORM LOCATE-PRTBL.\n121100     PERFORM LOCATE-INTBL.\n121200     GO TO EDIT-EXIT.\n121300 LOOK-UP-PROD.\n121400     MOVE SPACES TO SRCHPRDNM SRCHARG1.\n121500     MOVE 'P' TO SRCHTYPE PARM-SRCHTYPE.\n121600     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n121700     IF ENTRY-NOT-FOUND\n121800         MOVE 2 TO EDIT-STATUS GO TO EDIT-EXIT.\n121900     PERFORM LIST-PROD THRU LIST-PROD-EXIT.\n122000     IF STATUS-FLAG = 'E' MOVE 2 TO EDIT-STATUS GO TO EDIT-EXIT.\n122100     MOVE PRTBL-ACRNM(PRTBLINX) TO ACRNME(P30ACRX).\n122200     MOVE PRTBL-PRDNM(PRTBLINX) TO PRDNME (P30PRDX).\n122300     MOVE PRTBL-PINX(PRTBLINX) TO PINXS(P30SINX).\n122400     MOVE ' ' TO KODE(CODX).\n122500 CHECK-DATE.\n122600     MOVE SPACE TO RELSE(7) ORDRE(7) FMIDE(7).\n122700     MOVE PINXS(P30SINX) TO SSRHSTRY-PINX.\n122800     MOVE ZEROS TO SSRHSTRY-DATE-INST  EDIT-STATUS.\n122900     START SSRHSTRY KEY NOT < SSRHSTRY-KEY.\n123000     IF SSRHSTRY-ST NOT = ZEROS\n123100         MOVE 'SSRMS904' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n123200         GO TO FILE-ERROR.\n123300 CHECK-DATE-LOOP.\n123400     READ SSRHSTRY NEXT AT END GO TO END-CHECK-DATE.\n123500     IF SSRHSTRY-ST NOT = ZEROS\n123600         MOVE 'SSRMS901' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n123700         GO TO FILE-ERROR.\n123800     IF SSRHSTRY-DATE-INST > DATE-INST\n123900       OR SSRHSTRY-PINX NOT = PINXS(P30SINX)\n124000         GO TO END-CHECK-DATE.\n124100     IF SSRHSTRY-DATE-INST = DATE-INST\n124200         MOVE 'DT' TO ERRT SET ERRL TO P30ACRX\n124300         MOVE 0 TO REQ-PRRNUM REQ-IRRNUM\n124400         PERFORM LOCATE-PRTBL\n124500         PERFORM LOCATE-INTBL\n124600         CALL 'ISPLINK' USING ISPDISPLAY SSRPNL30\n124700         IF RETURN-CODE = 8\n124800             MOVE 9 TO EDIT-STATUS GO TO EDIT-EXIT\n124900         ELSE\n125000             PERFORM LOCATE-PRTBL\n125100             PERFORM LOCATE-INTBL\n125200             MOVE 1 TO EDIT-STATUS GO TO EDIT-EXIT.\n125300     MOVE SSRHSTRY-ORDR TO ORDRE(7).\n125400     MOVE SSRHSTRY-RELS TO RELSE(7).\n125500     MOVE SSRHSTRY-FMID TO FMIDE(7).\n125600     GO TO CHECK-DATE-LOOP.\n125700 END-CHECK-DATE.\n125800     IF RELSE(ORDRELX) = SPACE\n125900         MOVE '1' TO NO-RELEASE-FLAG\n126000         MOVE RELSE(7) TO RELSE(ORDRELX).\n126100     IF ORDRE(ORDRELX) = SPACE\n126200         MOVE ORDRE(7) TO ORDRE(ORDRELX).\n126300     IF FMIDE(FMIDX) = SPACE\n126400         MOVE FMIDE(7) TO FMIDE(FMIDX).\n126500     GO TO EDIT-EXIT.\n126600 NEW-PRODUCT.\n126700     MOVE ACRNME(P30ACRX) TO ACRNM.\n126800     MOVE PRDN1E(P30PRDX) TO PRDN1.\n126900     MOVE PRDN2E(P30PRDX) TO PRDN2.\n127000     MOVE ORDRE(ORDRELX) TO ORDRE(6).\n127100     MOVE RELSE(ORDRELX) TO RELSE(6).\n127200     MOVE FMIDE(FMIDX) TO FMIDE(6).\n127300     MOVE SPACE TO VENDR KODE(6) CTGRY KODE(7).\n127400 NEW-PROD-PANEL.\n127500     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n127600     PERFORM LOCATE-PRTBL.\n127700     PERFORM LOCATE-INTBL.\n127800 NEW-PROD-PANEL-2.\n127900     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL31.\n128000     IF RETURN-CODE = 8 MOVE 2 TO EDIT-STATUS GO TO EDIT-EXIT.\n128100     PERFORM LOCATE-PRTBL.\n128200     PERFORM LOCATE-INTBL.\n128300 EDIT-NEW-PROD.\n128400     MOVE SPACES TO SEARCH-ARGS.\n128500     MOVE PRDNM TO PRDNME(P30PRDX) SRCHPRDNM.\n128600     MOVE 'P' TO SRCHTYPE.\n128700     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n128800     IF ENTRY-FOUND MOVE 'DP' TO ERRT GO TO NEW-PROD-PANEL.\n128900 CHECK-VENDR.\n129000     IF VENDR = '*' GO TO LOOK-UP-VENDR.\n129100     IF KODE(6) = 'Y'\n129200         MOVE VENDR TO VENDRS(P30SINX)\n129300         MOVE 'Y' TO NEWVS(P30SINX)\n129400         GO TO CHECK-CTGRY.\n129500     IF VENDR = VENDRS(P30SINX) GO TO CHECK-CTGRY.\n129600     MOVE VENDR TO SRCHINXITM.\n129700     MOVE 'V' TO SRCHINXTYPE, SRCHTYPE.\n129800     PERFORM START-INTBL THRU SEARCH-INTBL-EXIT.\n129900     IF ENTRY-FOUND\n130000         MOVE INTBL-IINX(INTBLINX) TO VINXS(P30SINX)\n130100         MOVE VENDR TO VENDRS(P30SINX)\n130200         MOVE ' ' TO NEWVS(P30SINX)\n130300         GO TO CHECK-CTGRY.\n130400 VENDR-NOT-FOUND.\n130500     MOVE 'VN' TO ERRT.\n130600     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n130700     PERFORM LOCATE-PRTBL.\n130800     PERFORM LOCATE-INTBL.\n130900     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL31.\n131000     IF RETURN-CODE = 8 MOVE 2 TO EDIT-STATUS GO TO EDIT-EXIT.\n131100     PERFORM LOCATE-PRTBL.\n131200     PERFORM LOCATE-INTBL.\n131300     GO TO EDIT-NEW-PROD.\n131400 LOOK-UP-VENDR.\n131500     MOVE SPACES TO SRCHINXITM.\n131600     MOVE 'V' TO SRCHINXTYPE, SRCHTYPE, STATE-2.\n131700     PERFORM START-LIST-INXITM.\n131800     IF STATUS-FLAG = 'N' GO TO NEW-PROD-PANEL.\n131900     PERFORM LIST-INXITM THRU LIST-INXITM-EXIT.\n132000     IF STATUS-FLAG = 'E' GO TO NEW-PROD-PANEL-2.\n132100     MOVE SELINX(SELX) TO VINXS(P30SINX).\n132200     MOVE INTBL-INXITM(INTBLINX) TO VENDRS(P30SINX) VENDR.\n132300     MOVE ' ' TO NEWVS(P30SINX).\n132400 CHECK-CTGRY.\n132500     IF CTGRY = '*' GO TO LOOK-UP-CTGRY.\n132600     IF KODE(7) = 'Y'\n132700         MOVE CTGRY TO CTGRYS(P30SINX)\n132800         MOVE 'Y' TO NEWCS(P30SINX)\n132900         GO TO GOT-NEW-PROD.\n133000     MOVE SPACES TO SEARCH-ARGS.\n133100     MOVE CTGRY TO SRCHINXITM.\n133200     MOVE 'C' TO SRCHINXTYPE, SRCHTYPE.\n133300     PERFORM START-INTBL THRU SEARCH-INTBL-EXIT.\n133400     IF ENTRY-FOUND\n133500         MOVE INTBL-IINX(INTBLINX) TO CINXS(P30SINX)\n133600         MOVE CTGRY TO CTGRYS(P30SINX)\n133700         MOVE ' ' TO NEWCS(P30SINX)\n133800         GO TO GOT-NEW-PROD.\n133900 CTGRY-NOT-FOUND.\n134000     MOVE 'CN' TO ERRT.\n134100     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n134200     PERFORM LOCATE-PRTBL.\n134300     PERFORM LOCATE-INTBL.\n134400     CALL 'ISPLINK' USING ISPDISPLAY SSRPNL31.\n134500     IF RETURN-CODE = 8 MOVE 2 TO EDIT-STATUS GO TO EDIT-EXIT.\n134600     PERFORM LOCATE-PRTBL.\n134700     PERFORM LOCATE-INTBL.\n134800     GO TO EDIT-NEW-PROD.\n134900 LOOK-UP-CTGRY.\n135000     MOVE SPACES TO SEARCH-ARGS.\n135100     MOVE 'C' TO SRCHINXTYPE, SRCHTYPE, STATE-2.\n135200     PERFORM START-LIST-INXITM.\n135300     IF STATUS-FLAG = 'N' GO TO NEW-PROD-PANEL.\n135400     PERFORM LIST-INXITM THRU LIST-INXITM-EXIT.\n135500     IF STATUS-FLAG = 'E' GO TO NEW-PROD-PANEL-2.\n135600     MOVE SELINX(SELX) TO CINXS(P30SINX).\n135700     MOVE INTBL-INXITM(INTBLINX) TO CTGRYS(P30SINX) CTGRY.\n135800     MOVE ' ' TO NEWCS(P30SINX).\n135900 GOT-NEW-PROD.\n136000     MOVE 0 TO EDIT-STATUS.\n136100     MOVE ACRNM TO ACRNME(P30ACRX).\n136200     MOVE PRDN1 TO PRDN1E(P30PRDX).\n136300     MOVE PRDN2 TO PRDN2E(P30PRDX).\n136400     MOVE ORDRE(6) TO ORDRE(ORDRELX).\n136500     MOVE RELSE(6) TO RELSE(ORDRELX).\n136600     MOVE FMIDE(6) TO FMIDE(FMIDX).\n136700     MOVE SPACE TO STATE-2.\n136800 EDIT-EXIT.\n136900     EXIT.\n137000 LOCATE-INTBL.\n137100     MOVE 'SSRINTBL' TO ERRFILE.\n137200     IF IRRNUM NOT = REQ-IRRNUM\n137300       IF IRRNUM = ZERO\n137400         OPEN I-O SSRINTBL\n137500         IF SSRINTBL-ST NOT = ZERO\n137600           MOVE 'SSRMS900' TO SSRMSGNUM GO TO FILE-ERROR\n137700         ELSE NEXT SENTENCE\n137800       ELSE\n137900         IF INTBL-UPD = 'Y'\n138000           REWRITE INTBL-REC\n138100           IF SSRINTBL-ST NOT = ZEROS\n138200             MOVE 'SSRMS902' TO SSRMSGNUM GO TO FILE-ERROR.\n138300     IF IRRNUM NOT = REQ-IRRNUM\n138400       IF REQ-IRRNUM = ZERO\n138500         CLOSE SSRINTBL\n138600         IF SSRINTBL-ST NOT = ZERO\n138700           MOVE 'SSRMS903' TO SSRMSGNUM GO TO FILE-ERROR\n138800         ELSE\n138900           MOVE IRRNUM TO REQ-IRRNUM\n139000           MOVE ZERO TO IRRNUM\n139100           SET REQ-INTBLINX TO INTBLINX\n139200       ELSE\n139300         MOVE REQ-IRRNUM TO IRRNUM\n139400         MOVE SPACE TO INTBL-UPD\n139500         READ SSRINTBL\n139600         IF SSRINTBL-ST NOT = ZERO\n139700           MOVE 'SSRMS901' TO SSRMSGNUM GO TO FILE-ERROR.\n139800     SET INTBLINX TO REQ-INTBLINX.\n139900 START-INTBL.\n140000     MOVE 1 TO REQ-IRRNUM.\n140100     MOVE 0 TO REQ-INTBLINX.\n140200     PERFORM LOCATE-INTBL.\n140300 SEARCH-INTBL.\n140400     MOVE 0 TO LOCATE-FLAG.\n140500     SET INTBLINX UP BY 1.\n140600     IF INTBLINX NOT > INTBL-HI-SLOT\n140700         GO TO TEST-INTBL-FORWARD.\n140800     IF INTBL-NEXT-REC = ZERO\n140900         GO TO SEARCH-INTBL-EXIT.\n141000     MOVE INTBL-NEXT-REC TO REQ-IRRNUM.\n141100     MOVE 1 TO REQ-INTBLINX.\n141200     PERFORM LOCATE-INTBL.\n141300 TEST-INTBL-FORWARD.\n141400     PERFORM TEST-INTBL-SLOT.\n141500     IF ENTRY-FOUND OR AFTER-ENTRY\n141600         GO TO SEARCH-INTBL-EXIT.\n141700     GO TO SEARCH-INTBL.\n141800 BACK-INTBL.\n141900     SET INTBLINX DOWN BY 1.\n142000     IF INTBLINX NOT < 1\n142100         GO TO TEST-INTBL-BACKWARD.\n142200     IF IRRNUM = 1\n142300         GO TO SEARCH-INTBL-EXIT.\n142400     MOVE INTBL-PREV-REC TO REQ-IRRNUM.\n142500     PERFORM LOCATE-INTBL.\n142600     SET INTBLINX TO INTBL-HI-SLOT.\n142700 TEST-INTBL-BACKWARD.\n142800     PERFORM TEST-INTBL-SLOT.\n142900     IF ENTRY-FOUND OR BEFORE-ENTRY\n143000         GO TO SEARCH-INTBL-EXIT.\n143100     GO TO BACK-INTBL.\n143200 TEST-INTBL-SLOT.\n143300     IF (SRCHTYPE = 'V' OR 'C') AND (SRCHINXITM = SPACES)\n143400         IF INTBL-TYPE (INTBLINX) < SRCHINXTYPE\n143500             MOVE 2 TO LOCATE-FLAG\n143600         ELSE IF INTBL-TYPE (INTBLINX) = SRCHINXTYPE\n143700             MOVE 1 TO LOCATE-FLAG\n143800         ELSE\n143900             MOVE 3 TO LOCATE-FLAG.\n144000     IF (SRCHTYPE = 'V' OR 'C') AND (SRCHINXITM > SPACES)\n144100         IF INTBL-INDXKEY(INTBLINX) < SRCHINXKEY\n144200             MOVE 2 TO LOCATE-FLAG\n144300         ELSE IF INTBL-INDXKEY(INTBLINX) = SRCHINXKEY\n144400             MOVE 1 TO LOCATE-FLAG\n144500         ELSE\n144600             MOVE 3 TO LOCATE-FLAG.\n144700     IF SRCHTYPE = 'Z' AND INTBL-IINX(INTBLINX) = SRCHCINX\n144800         MOVE 1 TO LOCATE-FLAG.\n144900     IF SRCHTYPE = 'Y' AND INTBL-IINX(INTBLINX) = SRCHVINX\n145000         MOVE 1 TO LOCATE-FLAG.\n145100 SEARCH-INTBL-EXIT.\n145200     EXIT.\n145300 PROCESS-ADDS.\n145400     PERFORM GET-TABLE-PARMS.\n145500     SET P30PRDX TO 1. SET P30ACRX TO 1. SET ORDRELX TO 1.\n145600     SET P30SINX TO 1. SET CODX TO 1. SET FMIDX TO 1.\n145700     MOVE ZERO TO SRCHVINX.\n145800 ADD-LINE.\n145900     IF PRDNME(P30PRDX) = SPACES\n146000         GO TO NEXT-ADD.\n146100     IF KODE(CODX) = SPACE\n146200         GO TO ADD-HISTORY.\n146300 ADD-VENDR.\n146400     IF NEWVS(P30SINX) = SPACE\n146500         GO TO ADD-CTGRY.\n146600     MOVE VENDRS(P30SINX) TO SRCHINXITM.\n146700     MOVE 'V' TO SRCHINXTYPE, SRCHTYPE.\n146800**%%    10/23/87 FIX PROD=>VEND/CAT POINTER PROBLEMS:\n146900     MOVE ZERO TO SRCHVINX.\n147000**%%    END FIX\n147100     PERFORM ADD-INXITM THRU ADD-INXITM-EXIT.\n147200     MOVE INTBL-IINX(INTBLINX) TO VINXS(P30SINX).\n147300 ADD-CTGRY.\n147400     IF NEWCS(P30SINX) = SPACE\n147500         GO TO ADD-PROD.\n147600     MOVE 'C' TO SRCHINXTYPE, SRCHTYPE.\n147700     MOVE CTGRYS(P30SINX) TO SRCHINXITM.\n147800**%%    10/23/87 FIX PROD=>VEND/CAT POINTER PROBLEMS:\n147900     MOVE ZERO TO SRCHVINX.\n148000**%%    END FIX\n148100     PERFORM ADD-INXITM THRU ADD-INXITM-EXIT.\n148200     MOVE INTBL-IINX(INTBLINX) TO CINXS(P30SINX).\n148300 ADD-PROD.\n148400     MOVE PRDNME(P30PRDX) TO SRCHPRDNM.\n148500     MOVE ACRNME(P30ACRX) TO SRCHACRNM.\n148600     MOVE VINXS(P30SINX) TO SRCHVINX.\n148700     MOVE CINXS(P30SINX) TO SRCHCINX.\n148800     MOVE 0 TO SRCHPINX.\n148900     MOVE 'P' TO SRCHTYPE.\n149000     PERFORM START-PRTBL THRU SEARCH-PRTBL-EXIT.\n149100     IF ENTRY-FOUND\n149200         MOVE PRTBL-PINX(PRTBLINX) TO PINXS(P30SINX)\n149300     ELSE PERFORM ADD-PRODUCT THRU ADD-PRODUCT-EXIT\n149400          MOVE SRCHPINX TO PINXS(P30SINX).\n149500 ADD-HISTORY.\n149600     PERFORM OPEN-HISTORY-IO.\n149700     MOVE PINXS(P30SINX) TO SSRHSTRY-PINX SSRHSTRY-PTFINX\n149800                            SSRHSTRY-FMIDINX.\n149900     MOVE DATE-INST TO SSRHSTRY-DATE-INST.\n150000     MOVE PTFMD TO SSRHSTRY-PTFMD.\n150100     MOVE ORDRE(ORDRELX) TO SSRHSTRY-ORDR.\n150200     MOVE RELSE(ORDRELX) TO SSRHSTRY-RELS.\n150300     MOVE FMIDE(FMIDX) TO SSRHSTRY-FMID.\n150400     WRITE SSRHSTRY-REC INVALID KEY GO TO NEXT-ADD.\n150500     IF SSRHSTRY-ST = '00' OR '02' NEXT SENTENCE ELSE\n150600         MOVE 'SSRMS902' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n150700         GO TO FILE-ERROR.\n150800 NEXT-ADD.\n150900     IF P30PRDX < 5\n151000         SET P30PRDX UP BY 1  SET P30ACRX UP BY 1\n151100         SET ORDRELX UP BY 1  SET CODX UP BY 1\n151200         SET P30SINX UP BY 1  SET FMIDX UP BY 1\n151300         GO TO ADD-LINE.\n151400     PERFORM UPDATE-TABLE-PARMS.\n151500     MOVE 'A ' TO STATE.\n151600     MOVE SPACES TO ARRAY-16 ARRAY-32 ARRAY-12 ARRAY-7 ARRAY-1.\n151700     MOVE ZERO TO REQ-PRRNUM REQ-IRRNUM.\n151800     PERFORM CLOSE-HISTORY-IO.\n151900     PERFORM LOCATE-PRTBL.\n152000     PERFORM LOCATE-INTBL.\n152100     GO TO ENTRY-SCREEN.\n152200 ADD-PRODUCT.\n152300     MOVE 'Y' TO PRTBL-PARM-CHANGE.\n152400     SET INSRT-SLOT TO PRTBLINX.\n152500     IF PRTBL-HI-SLOT = 95\n152600         GO TO PRTBL-SPLIT.\n152700     SET PRTBLINX TO PRTBL-HI-SLOT.\n152800     PERFORM SLIDE-PROD-ENTRY THRU SLIDE-PROD-EXIT.\n152900     MOVE 'Y' TO PRTBL-UPD.\n153000     ADD 1 TO PRTBL-HI-SLOT.\n153100     GO TO ADD-PRODUCT-EXIT.\n153200 SLIDE-PROD-ENTRY.\n153300     IF PRTBLINX NOT < INSRT-SLOT\n153400         MOVE PRTBL-ENTRY(PRTBLINX) TO PRTBL-ENTRY(PRTBLINX + 1)\n153500         SET PRTBLINX DOWN BY 1\n153600         GO TO SLIDE-PROD-ENTRY.\n153700     SET PRTBLINX TO INSRT-SLOT.\n153800     MOVE SRCHPRDNM TO PRTBL-PRDNM(PRTBLINX).\n153900     MOVE SRCHACRNM TO PRTBL-ACRNM(PRTBLINX).\n154000     MOVE SRCHVINX TO PRTBL-VINX(PRTBLINX).\n154100     MOVE SRCHCINX TO PRTBL-CINX(PRTBLINX).\n154200     IF SRCHPINX > 0\n154300         MOVE SRCHPINX TO PRTBL-PINX(PRTBLINX)\n154400     ELSE\n154500         ADD 1 TO PRTBL-HI-PINX\n154600         MOVE PRTBL-HI-PINX TO PRTBL-PINX(PRTBLINX) SRCHPINX.\n154700 SLIDE-PROD-EXIT.\n154800     EXIT.\n154900 PRTBL-SPLIT.\n155000     IF PRTBL-UPD = 'Y'\n155100         REWRITE PRTBL-REC\n155200         IF SSRPRTBL-ST NOT = ZEROS\n155300             MOVE 'SSRMS902' TO SSRMSGNUM\n155400             MOVE 'SSRPRTBL' TO ERRFILE GO TO FILE-ERROR.\n155500     MOVE PRTBL-49-95 TO PRTBL-1-48.\n155600     MOVE LOW-VALUES TO PRTBL-49-95  PRTBL-ENTRY(48).\n155700     IF INSRT-SLOT NOT > 48\n155800         MOVE 47 TO PRTBL-HI-SLOT\n155900         GO TO PRTBL-2ND-HALF.\n156000     SUBTRACT 48 FROM INSRT-SLOT.\n156100     SET PRTBLINX TO 47.\n156200     PERFORM SLIDE-PROD-ENTRY THRU SLIDE-PROD-EXIT.\n156300     MOVE 48 TO PRTBL-HI-SLOT.\n156400     ADD 48 TO INSRT-SLOT.\n156500 PRTBL-2ND-HALF.\n156600     MOVE ZERO TO PRTBL-NEXT-REC.\n156700     MOVE PRRNUM TO PRTBL-PREV-REC.\n156800     ADD 1 TO PRTBL-HI-RRNUM.\n156900     MOVE PRRNUM TO REQ-PRRNUM. MOVE 48 TO REQ-PRTBLINX.\n157000     MOVE PRTBL-HI-RRNUM TO PRRNUM.\n157100     WRITE PRTBL-REC.\n157200     IF SSRHSTRY-ST NOT = ZEROS\n157300         MOVE 'SSRMS903' TO SSRMSGNUM MOVE 'SSRHSTRY' TO ERRFILE\n157400         GO TO FILE-ERROR.\n157500     MOVE ' ' TO PRTBL-UPD.\n157600     PERFORM LOCATE-PRTBL.\n157700     MOVE LOW-VALUES TO PRTBL-49-95.\n157800     IF INSRT-SLOT > 48\n157900         MOVE 48 TO PRTBL-HI-SLOT\n158000         GO TO PRTBL-1ST-HALF.\n158100     PERFORM SLIDE-PROD-ENTRY THRU SLIDE-PROD-EXIT.\n158200     MOVE 49 TO PRTBL-HI-SLOT.\n158300 PRTBL-1ST-HALF.\n158400     MOVE PRTBL-HI-RRNUM TO PRTBL-NEXT-REC.\n158500     MOVE 'Y' TO PRTBL-UPD.\n158600 ADD-PRODUCT-EXIT.\n158700     EXIT.\n158800 ADD-INXITM.\n158900     PERFORM START-INTBL THRU SEARCH-INTBL-EXIT.\n159000     IF ENTRY-FOUND\n159100         GO TO ADD-INXITM-EXIT.\n159200     MOVE 'Y' TO INTBL-PARM-CHANGE.\n159300     SET INSRT-SLOT TO INTBLINX.\n159400     IF INTBL-HI-SLOT = 58\n159500         GO TO INTBL-SPLIT.\n159600     SET INTBLINX TO INTBL-HI-SLOT.\n159700     PERFORM SLIDE-INX-ENTRY THRU SLIDE-INX-EXIT.\n159800     MOVE 'Y' TO INTBL-UPD.\n159900     ADD 1 TO INTBL-HI-SLOT.\n160000     GO TO ADD-INXITM-EXIT.\n160100 SLIDE-INX-ENTRY.\n160200     IF INTBLINX NOT < INSRT-SLOT\n160300         MOVE INTBL-ENTRY(INTBLINX) TO INTBL-ENTRY(INTBLINX + 1)\n160400         SET INTBLINX DOWN BY 1\n160500         GO TO SLIDE-INX-ENTRY.\n160600     SET INTBLINX TO INSRT-SLOT.\n160700     MOVE SRCHINXKEY TO INTBL-INDXKEY(INTBLINX).\n160800     IF SRCHVINX = ZERO\n160900         ADD 1 TO INTBL-HI-IINX\n161000         MOVE INTBL-HI-IINX TO INTBL-IINX(INTBLINX)\n161100     ELSE MOVE SRCHVINX TO INTBL-IINX(INTBLINX).\n161600 SLIDE-INX-EXIT.\n161700     EXIT.\n161800 INTBL-SPLIT.\n161900     IF INTBL-UPD = 'Y'\n162000         REWRITE INTBL-REC\n162100         IF SSRINTBL-ST NOT = ZEROS\n162200             MOVE 'SSRMS902' TO SSRMSGNUM\n162300             MOVE 'SSRINTBL' TO ERRFILE\n162400             GO TO FILE-ERROR.\n162500     MOVE INTBL-30-58 TO INTBL-1-29.\n162600     MOVE LOW-VALUES TO INTBL-30-58.\n162700     IF INSRT-SLOT NOT > 29\n162800         MOVE 29 TO INTBL-HI-SLOT\n162900         GO TO INTBL-2ND-HALF.\n163000     SUBTRACT 29 FROM INSRT-SLOT.\n163100     SET INTBLINX TO 29.\n163200     PERFORM SLIDE-INX-ENTRY THRU SLIDE-INX-EXIT.\n163300     MOVE 30 TO INTBL-HI-SLOT.\n163400     ADD 29 TO INSRT-SLOT.\n163500 INTBL-2ND-HALF.\n163600     MOVE ZERO TO INTBL-NEXT-REC.\n163700     MOVE IRRNUM TO INTBL-PREV-REC.\n163800     ADD 1 TO INTBL-HI-RRNUM. MOVE IRRNUM TO REQ-IRRNUM.\n163900     MOVE IRRNUM TO REQ-IRRNUM. MOVE 29 TO REQ-INTBLINX.\n164000     MOVE INTBL-HI-RRNUM TO IRRNUM.\n164100     WRITE INTBL-REC.\n164200     IF SSRINTBL-ST NOT = ZEROS\n164300         MOVE 'SSRMS903' TO SSRMSGNUM MOVE 'SSRINTBL' TO ERRFILE\n164400         GO TO FILE-ERROR.\n164500     MOVE ' ' TO INTBL-UPD.\n164600     PERFORM LOCATE-INTBL.\n164700     MOVE LOW-VALUES TO INTBL-30-58.\n164800     IF INSRT-SLOT > 29\n164900         MOVE 29 TO INTBL-HI-SLOT\n165000         GO TO INTBL-1ST-HALF.\n165100     PERFORM SLIDE-INX-ENTRY THRU SLIDE-INX-EXIT.\n165200     MOVE 30 TO INTBL-HI-SLOT.\n165300 INTBL-1ST-HALF.\n165400     MOVE INTBL-HI-RRNUM TO INTBL-NEXT-REC.\n165500     MOVE 'Y' TO INTBL-UPD.\n165600 ADD-INXITM-EXIT.\n165700     EXIT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSR010PR": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x01\\xbe\\x01\\xbe\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 446, "newlines": 446, "modlines": 0, "user": "FILE060"}, "text": "//SS58C JOB (150),CHAPMAN,CLASS=P,NOTIFY=SS58,COND=(0,NE)\n//ASM       EXEC ASMHCL,MAC='SS.MACLIB',MAC1='SYS1.MACLIB',\n//          PARM.C='NODECK,OBJ,XREF(FULL)',\n//          PARM.L=(XREF,LET,LIST)\n//C.SYSLIB  DD\n//          DD\n//          DD\n//          DD  DSN=SYSDLB.AMODGEN,DISP=SHR\n//C.SYSPRINT DD SYSOUT=X\n//C.STEPLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR,VOL=SER=SYSTM1,UNIT=DISK\n//C.SYSIN    DD *\n         TITLE 'SSR010PR'\nSSR010PR REG SSR010PR-&SYSDATE.-&SYSTIME,BASE1,BASE2\n         OPEN  (INTBLACB,,PRTBLACB,,HSTRYACB,)\n         LTR   R15,R15\n         BNZ   OPENERR\n         OPEN  (CNTLFILE,,PRTFILE,OUTPUT,OUTFILE,OUTPUT)\n         GET   RPL=HSTRYRPL            GET TABLE PARM RECORD\n         LTR   R15,R15                 GET OK?\n         BNZ   GETHSERR                  NO...\n         L     R5,HSTRYADR             R5 ==> TABLE PARM RECORD\n         XR    R6,R6                   CLEAR REGS\n         XR    R7,R7                      6 & 7\n         LH    R7,48(R5)               R7 = NUM INDEX RECORDS\n         M     R6,=F'35'               MULTIPLY IT BY REC LENGTH\n         ST    R7,STGLEN               THATS HOW MUCH STORAGE TO GET\n         OI    STGLEN,X'80'            HI ORDER BIT ON\n         GETMAIN LU,LA=STGLEN,A=STGADDR GET STORAGE FOR TABLE\n         L     R6,STGADDR              R6 ==> TABLE ENTRY\nGETINTBL EQU   *\n         GET   RPL=INTBLRPL            GET INDEX TABLE RECORD\n         LTR   R15,R15                 GET OK?\n         BNZ   GETINERR                  NO\n         L     R2,INTBLADR             R2 ==> INDEX TABLE RECORD\n         XR    R8,R8\n         XR    R9,R9\n         LH    R9,4(R2)                R9 = NUM ENTRIES IN PHYS REC\n         M     R8,=F'35'               R9 = LENGTH OF ENTRIES IN REC\n         LR    R7,R9                   R7 = SAME LENGTH\n         LA    R8,10(R2)               R8 ==> 1ST ENTRY IN REC\n         MVCL  R6,R8                   MOVE ENTRIES TO TABLE IN STG\n         LA    R6,0(R7,R6)             R6 ==> END OF TABLE\n         CLC   0(2,R2),=H'00'          ARE THERE MORE INDEX TBL RECS?\n         BNE   GETINTBL                  YES\n         ST    R6,STGEND               STGEND = ADDR OF END OF TABLE\n         GETMAIN RU,LV=600             GET STG FOR CONTROL TABLE\n         ST    R1,CTBLADDR             CTBLADDR = ADDR OF CONTROL TBL\n         LR    R2,R1                   R2 ==> CONTROL TABLE ENTRY\n         MVC   SORTCCN,=X'0000'        INITIALIZE SORTREC CNTRL CARD #\nGETCNTL  EQU   *\n         MVC   0(6,R2),=X'000000000000' INITIALIZE CONTROL TABLE ENTRY\n         MVI   SORTINX1,X'00'           INITIALIZE SORT RECORD\n         MVC   SORTINX1+1(11),SORTINX1\n         MVI   SORTDATA,X'40'\n         MVC   SORTDATA+1(79),SORTDATA\n         GET   CNTLFILE,CNTLREC        READ CONTROL CARD\n         MVI   VARG,X'40'              BLANK OUT PARSE AREA\n         MVC   VARG+1(31),VARG\n         MVI   CARG,X'40'\n         MVC   CARG+1(31),CARG\n*****%%%%%%% MODIFY TO GET RID OF BROKEN PARSE MACRO\n**\n         CLC   CNTLREC(4),=CL4'VEND'\n         BE    VEND1ST\n         CLC   CNTLREC(4),=CL4'CAT '\n         BE    CAT1ST\n         B     BADCARD\nVEND1ST  MVC   VARG(32),CNTLREC+5\n         CLC   CNTLREC+38(4),=CL4'CAT '\n         BNE   CARDOK\n         MVC   CARG(32),CNTLREC+43\n         B     CARDOK\nCAT1ST   MVC   CARG(32),CNTLREC+5\n         CLC   CNTLREC+38(4),=CL4'VEND'\n         BNE   CARDOK\n         MVC   VARG(32),CNTLREC+43\n**\n*****%%%%%%% END OF MODIFY FOR BROKEN PARSE MACRO\n*        PARSE CNTLREC(80,())          PARSE CONTROL CARD\n*        KEYS  (VENDOR(VARG,A,32),CATEGORY(CARG,A,32))\n*        KEYS  (VEND(VARG,A,32),CAT(CARG,A,32),*)\n*        C     R1,=F'0'\n*        BE    CARDOK\n*        MVC   PRTLINE(133),=CL133' '\n*        MVC   PRTLINE+1(80),CNTLREC        PRINT CONTROL CARD\n*        MVC   PRTLINE+82(12),=CL12'INVALID CARD'   AND MESSAGE\n*        PUT   PRTFILE,PRTLINE                        AND QUIT\n*        B     CLOSEALL\nCARDOK   EQU   *\n         CLI   VARG,X'40'              IS THERE A VENDOR?\n         BE    NOVENDR                   NO...\n         CLI   VARG,C'*'               IS IT 'ANY VENDOR' (*)?\n         BE    ANYVENDR                  YES..\n         L     R3,STGADDR              SEARCH INDEX TABLE\nVENDSRCH CLC   VENDARG(33),0(R3)       VENDOR MATCH?\n         BE    GOTVEND                   YEAH\n         CLC   VENDARG(33),0(R3)       PAST ANY POSSIBLE MATCH?\n         BL    BADCARD                   YEAH\n         LA    R3,35(R3)               R3 ==> NEXT INDEX ENTRY\n         CL    R3,STGEND               END OF TABLE?\n         BE    BADCARD                   YEAH\n         B     VENDSRCH                  NAH\nCATSRCH  CLC   CATARG(33),0(R3)        VENDOR MATCH?\n         BE    0(R9)                     YEAH\n         CLC   CATARG(33),0(R3)        PAST ANY POSSIBLE MATCH?\n         BL    BADCARD                   YEAH\n         LA    R3,35(R3)               R3 ==> NEXT INDEX ENTRY\n         CL    R3,STGEND               END OF TABLE?\n         BE    BADCARD                   YEAH\n         B     CATSRCH                   NAH\nGOTVEND  MVC   2(2,R2),33(R3)          SET VINX IN CONTROL TABLE ENTRY\n         MVC   SORTVEND(32),1(R3)      PUT VENDOR IN SORT RECORD\n         CLI   CARG,X'40'              IS THERE A CATEGORY?\n         BE    FORMVB                    NO\n         CLI   CARG,C'*'               IS IT 'ANY CATEGORY' (*)?\n         BE    FORMVC                    YES\n         L     R3,STGADDR              R3 ==> 1ST INDEX TABLE ENTRY\n         BAL   R9,CATSRCH              GO LOOK UP CATEGORY\n         MVC   4(2,R2),33(R3)          SET CINX IN CONTROL TABLE ENTRY\n         MVC   SORTCAT(32),1(R3)       PUT CATEGORY IN SORT RECORD\nWHOS1ST  L     R4,=A(CNTLREC)          PARSE THAT SUCKER\nWHOSNEXT CLI   0(R4),C'V'              GOT A 'V'?\n         BE    FORMVC                    YUP\n         CLI   0(R4),C'C'              GOT A 'C'?\n         BE    FORMCV                    YEP\n         LA    R4,1(R4)                BUMP TO NEXT CHARACTER\n         B     WHOSNEXT\nANYVENDR EQU   *                       CNTL CARD VENDER = '*'\n         CLI   CARG,X'40'              IS THERE A CATEGORY?\n         BE    FORMVB                    NOPE\n         CLI   CARG,C'*'               IS CATEGORY = '*'\n         BE    WHOS1ST                   YEP\n         L     R3,STGADDR              R3 ==> 1ST INDEX TABLE ENTRY\n         BAL   R9,CATSRCH              GO LOOK UP CATEGORY\n         MVC   4(2,R2),33(R3)          SET CINX IN CONTROL TABLE ENTRY\n         MVC   SORTCAT(32),1(R3)       PUT CATEGORY IN SORT RECORD\nFORMCV   MVC   0(2,R2),=CL2'CV'        FORM = 'CV'\n         B     GOTCHA\nNOVENDR  EQU   *                       NO VENDER ON CONTROL CARD\n         CLI   CARG,X'40'              IS THERE A CATEGORY?\n         BE    BADCARD                   NOPE\n         CLI   CARG,C'*'               IS CATEGORY = '*'\n         BE    FORMCB                    YEP\n         L     R3,STGADDR              R3 ==> 1ST INDEX TABLE ENTRY\n         BAL   R9,CATSRCH              GO LOOK UP CATEGORY\n         MVC   4(2,R2),33(R3)          SET CINX IN CONTROL TABLE ENTRY\n         MVC   SORTCAT(32),1(R3)       PUT CATEGORY IN SORT RECORD\nFORMCB   MVC   0(2,R2),=CL2'C '        FORM = 'C '\n         B     GOTCHA\nFORMVB   MVC   0(2,R2),=CL2'V '        FORM = 'V '\n         B     GOTCHA\nFORMVC   MVC   0(2,R2),=CL2'VC'        FORM = 'VC'\nGOTCHA   CLI   SORTVEND,X'40'          SPECIFIED VENDOR?\n         BNE   PUTSORT1                   YES..\n         CLI   SORTCAT,X'40'           SPECIFIED CATEGORY?\n         BE    NEXTCNTL                   NO...\nPUTSORT1 MVC   SORTFORM(2),0(R2)       FORMAT TYPE 0 SORT RECORD\n         PUT   OUTFILE,SORTREC         WRITE IT\nNEXTCNTL LA    R2,6(R2)                NEXT CONTROL TABLE ENTRY\n         LH    R4,SORTCCN              INCREMENT CONTROL CARD NUMBER\n         AH    R4,=H'1'\n         STH   R4,SORTCCN\n         B     GETCNTL                 GET NEXT CONTROL CARD\nCNTLEOD  EQU   *                   END OF DATA FOR CONTROL CARDS\n         ST    R2,CTBLEND              CTBLEND ==> END OF CONTROL TBL\n         MVC   SORTPRDN(2),=X'0000'    INITIALIZE SORTREC PRODUCT SEQ#\n         MODCB RPL=HSTRYRPL,OPTCD=(KGE,GEN) MODIFY HISTORY FILE RPL\nGETPRTBL EQU   *\n         GET   RPL=PRTBLRPL            GET PRODUCT TABLE RECORD\n         LTR   R15,R15                 GET OK?\n         BNZ   GETPRERR                  NO...\n         L     R2,PRTBLADR             R2 ==> PROD TABLE REC\n         LA    R3,10(R2)               R3 ==> 1ST ENTRY IN PHYS REC\n         LH    R4,4(R2)                R4 = NUM ENTRIES IN PHYS REC\nNEWPROD  EQU   *\n         L     R5,CTBLADDR             R5 ==> 1ST CONTROL TABLE ENTRY\n         MVI   SORTREC,X'00'           CLEAR SORT CNTRL CARD NUM\n         MVC   SORTREC+1(5),SORTREC      & SORTINX1 & SORTINX2\n         LH    R6,SORTPRDN             INCREMENT SORTKEY PRODUCT #\n         LA    R6,1(R6)\n         STH   R6,SORTPRDN\n         MVI   SORTDATE,X'00'          CLEAR REMAINDER OF SORTREC\n         MVC   SORTDATE+1(8),SORTDATE\n         MVI   SORTDATA,X'40'\n         MVC   SORTDATA+1(79),SORTDATA\n         B     TESTCINX\nNEXTCTBL LA    R5,6(R5)                R5 ==> NEXT CTBL ENTRY\n         CL    R5,CTBLEND              END OF CTBL?\n         BE    NOCTBL                    YES\n         LH    R6,SORTCCN              INCREMENT SORTKEY CNTL CARD #\n         LA    R6,1(R6)\n         STH   R6,SORTCCN\nTESTCINX MVI   SRCHSTAT,X'00'          STATUS = 00\n         CLC   4(2,R5),=X'0000'        CNTRL TBL CINX = 00?\n         BE    NOCINX                    YES\n         CLC   4(2,R5),84(R3)          CINX MATCH?\n         BE    TESTVINX                  YES\n         B     NEXTCTBL                  NO - REJECT\nNOCINX   OI    SRCHSTAT,X'01'            YES\nTESTVINX CLC   2(2,R5),=X'0000'        CNTRL TBL VINX = 00?\n         BE    NOVINX                    YES\n         CLC   2(2,R5),82(R3)          VINX MATCH?\n         BE    CHKCSRCH                  YES\n         B     NEXTCTBL                  NO - REJECT\nNOVINX   OI    SRCHSTAT,X'02'            YES\nCHKCSRCH CLI   SRCHSTAT,X'00'          NEED TO SEARCH FOR CATEGORY?\n         BE    CHKVSRCH                  NO\n         CLI   SRCHSTAT,X'02'\n         BE    CHKVSRCH                  NO\n         L     R7,STGADDR\n         XR    R6,R6\nFINDCAT  CLC   84(2,R3),33(R7)         PRTBL CINX = IN STG INTBL IINX?\n         BE    GOTCAT                    YES\n         LA    R7,35(R7)               BUMP TO NEXT INTBL ENTRY\n         LA    R6,1(R6)                INTBL SEQ NUMBER UP 1\n         CL    R7,STGEND               END OF INTBL REACHED?\n         BL    FINDCAT                   NO\n         MVI   SORTCAT,X'40'             YES - SORT CATEGORY = SPACES\n         MVC   SORTCAT+1(31),SORTCAT\n         B     GOTCAT2\nGOTCAT   MVC   SORTCAT(32),1(R7)       PUT CATEGORY IN SORT RECORD\nGOTCAT2  CLC   0(2,R5),=CL2'V '        FORM = 'V '?\n         BE    CHKVSRCH                  YES - DONT STOW CTGRY SEQ#\n         STH   R6,SORTINX1             PUT CTGRY SEQ# IN SORTINX1\n         CLI   0(R5),C'C'              FORM = C OR CV?\n         BE    CHKVSRCH                  YES\n         CLC   2(2,R5),=X'0000'        CTBL VINX = 0?\n         BNE   CHKVSRCH                  NO\n         STH   R6,SORTINX2             PUT CTGRY SEQ# IN SORTINX2\nCHKVSRCH CLI   SRCHSTAT,X'00'          NEED TO SEARCH FOR VENDOR?\n         BE    CKPUTSRT                  NO\n         CLI   SRCHSTAT,X'01'\n         BE    CKPUTSRT                  NO\n         L     R7,STGADDR                YES - R7 ==> INTBL ENTRY\n         XR    R6,R6\nFINDVEND CLC   82(2,R3),33(R7)         PRTBL CINX = IN STG INTBL IINX?\n         BE    VENDFND                   YES\n         LA    R7,35(R7)               BUMP TO NEXT INTBL ENTRY\n         LA    R6,1(R6)                INTBL SEQ NUMBER UP 1\n         CL    R7,STGEND               END OF INTBL REACHED?\n         BL    FINDVEND                  NO\n         MVI   SORTVEND,X'40'            YES - SORT VEND = SPACES\n         MVC   SORTVEND+1(31),SORTVEND\n         B     VENDFND2\nVENDFND  MVC   SORTVEND(32),1(R7)      PUT VENDOR IN SORT RECORD\nVENDFND2 CLC   0(2,R5),=CL2'C '        FORM = 'C '?\n         BE    CKPUTSRT                  YES\n         CLI   0(R5),C'V'              FORM = V OR VC?\n         BE    VSRTINX1                  YES\n         CLC   4(2,R5),=X'0000'        CTBL CINX = 0?\n         BNE   VSRTINX1                  NO\n         STH   R6,SORTINX2             PUT VENDR SEQ# IN SORTINX2\n         B     CKPUTSRT\nVSRTINX1 STH   R6,SORTINX1             PUT VENDR SEQ# IN SORTINX1\nCKPUTSRT CLI   SRCHSTAT,X'00'          NEED TO WRITE TYPE 00 SORT REC?\n         BE    PUTSORT2                  NO\n         MVC   SORTFORM,0(R5)          PUT FORM IN SORT REC\n         PUT   OUTFILE,SORTREC         WRITE IT\nPUTSORT2 MVC   SORTDATA(80),0(R3)      MOVE PRODUCT NAME TO SORTREC\n         MVI   SORTDATE+5,X'01'        TYPE SORTREC = 01\n         PUT   OUTFILE,SORTREC         WRITE IT\n         XR    R8,R8\n         L     R8,PRDPUT               INCREMENT COUNTER OF\n         LA    R8,1(R8)                  PRODUCTS PUT TO SORT\n         ST    R8,PRDPUT\n         MVC   HSTRYKEY(2),80(R3)      USE PRODUCT KEY FROM PRDTBL\n         POINT RPL=HSTRYRPL              ENTRY TO POINT HISTORY FILE\n         LTR   R15,R15                 POINT OK?\n         BNZ   POINTERR                  NO...\nNXTHIST  GET   RPL=HSTRYRPL            GET NEXT HISTORY RECORD (SEQ)\n         LTR   R15,R15                 GET OK?\n         BNZ   GETHSERR                  NO...\n         L     R8,HSTRYADR             R8 ==> HISTORY REC\n         CLC   0(2,R8),80(R3)          IS THIS FOR THE CURRENT PRODUCT?\n         BNE   NEXTPROD                  NO...\nPUTSORT3 MVC   SORTDATE(51),2(R8)      MOVE HISTORY REC TO SORTREC\n         PUT   OUTFILE,SORTREC         WRITE IT\n         B     NXTHIST                 GO GET NEXT HISTORY REC\nNOCTBL   XR    R8,R8\n         L     R8,PRDNPUT              INCREMENT COUNTER OF\n         LA    R8,1(R8)                  PRODUCTS MATCHING NO CONTROL\n         ST    R8,PRDNPUT                  CARD CRITERIA\nNEXTPROD EQU   *\n         LA    R3,86(R3)               BUMP TO NEXT PRODUCT TABLE ENTRY\n         BCT   R4,NEWPROD\n         CLC   0(2,R2),=H'0'           END OF PRODUCT TABLE RECORDS?\n         BE    CLOSEALL                  YES...\n         MVC   PRTBLRRN+2(2),0(R2)       NO..LOAD RRN OF NEXT ONE\n         B     GETPRTBL                        AND GO GET NEXT ONE\nBADCARD  EQU   *                       BAD CONTROL CARD\n         MVC   PRTLINE(133),=CL133' '\n         MVC   PRTLINE+1(80),CNTLREC        PRINT CONTROL CARD\n         MVC   PRTLINE+1(33),VENDARG               AND MESSAGE\n         MVC   PRTLINE+35(33),CATARG               AND MESSAGE\n         MVC   PRTLINE+82(9),=CL9'NOT FOUND'       AND MESSAGE\n         PUT   PRTFILE,PRTLINE                        AND QUIT\nCLOSEALL EQU   *\n         XR    R6,R6\n         L     R6,PRDPUT               R6 = NUM PRODUCTS PUT TO SORT\n         CVD   R6,PACKWORK             CONVERT IT\n         UNPK  PRDPUTD(4),PACKWORK(8)    TO DISPLAY\n         OI    PRDPUTD+3,X'F0'\n         L     R6,PRDNPUT              R6 = NUM PRODUCTS NOT PUT\n         CVD   R6,PACKWORK             CONVERT RETURN CODE\n         UNPK  PRDNPUTD(4),PACKWORK(8)    TO DISPLAY\n         OI    PRDNPUTD+3,X'F0'\n         MVC   PRTLINE(133),=CL133' '\n         MVC   PRTLINE+1(79),EOJLINE   PRINT EOJ TOTALS LINE\n         PUT   PRTFILE,PRTLINE\n         CLOSE (INTBLACB,,PRTBLACB,,HSTRYACB,,PRTFILE,)\n         L     R13,4(R13)                    BRUSH YOUR TEETH\n         RETURN (14,12),RC=0                     AND GO TO BED\n         EJECT\nOPENERR  EQU   *\n         MVC   ERRFUNC,=CL5'OPEN '\n         LR    R9,R15                  R9 = RETURN CODE\n         SHOWCB ACB=PRTBLACB,AREA=VSAMERR,LENGTH=12,                   X\n               FIELDS=(DDNAME,ERROR)\n         CLC   VSAMERR2(4),=CL4'0000'  PRTBL ACB SHOWS ERROR?\n         BNE   PRINTERR                  YES\n         SHOWCB ACB=HSTRYACB,AREA=VSAMERR,LENGTH=12,                   X\n               FIELDS=(DDNAME,ERROR)\n         CLC   VSAMERR2(4),=CL4'0000'  HSTRY ACB SHOWS ERROR?\n         BNE   PRINTERR                  YES\n         MVC   VSAMERR(8),=CL8'PRTFILE '  BAD OPEN IN PRTFILE\n         B     PRINTERR\nGETINERR EQU   *\n         LR    R9,R15\n         MVC   ERRFUNC(5),=CL5'GET   '\n         MVC   VSAMERR(8),=CL8'SSRINTBL '\n         SHOWCB RPL=INTBLRPL,AREA=VSAMERR2,LENGTH=4,FIELDS=(FDBK)\n         B     PRINTERR\nGETPRERR EQU   *\n         LR    R9,R15\n         MVC   ERRFUNC(5),=CL5'GET   '\n         MVC   VSAMERR(8),=CL8'SSRPRTBL '\n         SHOWCB RPL=PRTBLRPL,AREA=VSAMERR2,LENGTH=4,FIELDS=(FDBK)\n         B     PRINTERR\nPOINTERR MVC   ERRFUNC(5),=CL5'POINT'\n         B     HSTRYERR\nGETHSERR MVC   ERRFUNC(5),=CL5'GET  '\nHSTRYERR MVC   VSAMERR(8),=CL8'SSRHSTRY '\n         LR    R9,R15                  R9 = RETURN CODE\n         SHOWCB RPL=PRTBLRPL,AREA=VSAMERR2,LENGTH=4,FIELDS=(FDBK)\nPRINTERR XR    R6,R6\n         L     R6,VSAMERR2             R6 = REASON CODE\n         CVD   R6,PACKWORK             CONVERT IT\n         UNPK  REASONCD(4),PACKWORK(8)   TO DISPLAY\n         OI    REASONCD+3,X'F0'\n         CVD   R9,PACKWORK             CONVERT RETURN CODE\n         UNPK  RETURNCD(4),PACKWORK(8)    TO DISPLAY\n         OI    RETURNCD+3,X'F0'\n         MVC   ERRDDNAM(8),VSAMERR     GET ERROR DDNAME\n         MVC   PRTLINE(133),=CL133' '\n         MVC   PRTLINE+1(63),FILEERR   PRINT ERROR MESSAGE\n         PUT   PRTFILE,PRTLINE\n         B     CLOSEALL                DIE YOUNG\nPACKWORK DS    D\nVSAMERR  DS    2F\nVSAMERR2 DS    F\nSAVE11   DS    F\nSAVER1   DS    F\nFILEERR  DC    CL11' FUNCTION: '\nERRFUNC  DC    CL5'     '\n         DC    CL11'  DD NAME: '\nERRDDNAM DC    CL8'        '\n         DC    CL10'  RETURN: '\nRETURNCD DC    CL4'0000'\n         DC    CL10'  REASON: '\nREASONCD DC    CL4'0000'\nEOJLINE  DS    0CL79\n         DC    CL29'PRODUCT RECORDS PUT TO SORT: '\nPRDPUTD  DC    CL4'0000'\n         DC    CL42'    PRODUCTS NOT MEETING SELECT CRITERIA: '\nPRDNPUTD DC    CL4'0000'\nINTBLACB ACB   DDNAME=SSRINTBL,AM=VSAM,                                X\n               MACRF=(KEY,DIR,IN)\nPRTBLACB ACB   DDNAME=SSRPRTBL,AM=VSAM,                                X\n               MACRF=(KEY,DIR,IN)\nHSTRYACB ACB   DDNAME=SSRHSTRY,AM=VSAM,                                X\n               MACRF=(KEY,DIR,SEQ,IN),EXLST=HSTRYEX\nINTBLRPL RPL   ACB=INTBLACB,AM=VSAM,AREA=INTBLADR,AREALEN=4,           X\n               ARG=INTBLRRN,OPTCD=(KEY,DIR,ARD,SYN,NUP,KEQ,LOC)\nPRTBLRPL RPL   ACB=PRTBLACB,AM=VSAM,AREA=PRTBLADR,AREALEN=4,           X\n               ARG=PRTBLRRN,OPTCD=(KEY,DIR,ARD,SYN,NUP,KEQ,LOC)\nHSTRYRPL RPL   ACB=HSTRYACB,AM=VSAM,AREA=HSTRYADR,AREALEN=4,           X\n               ARG=HSTRYKEY,KEYLEN=2,                                  X\n               OPTCD=(KEY,SEQ,ARD,FWD,SYN,NSP,KEQ,FKS,LOC)\nHSTRYEX  EXLST EODAD=NEXTPROD\nPRDPUT   DC    F'00'\nPRDNPUT  DC    F'00'\nSTGLEN   DS    F\nSTGADDR  DS    F\nSTGEND   DS    F\nCTBLADDR DS    F\nCTBLEND  DS    F\nINTBLADR DS    F\nINTBLRRN DC    F'1'\nPRTBLADR DS    F\nPRTBLRRN DC    F'1'\nHSTRYADR DS    F\nHSTRYKEY DS    2F'00'\nSRCHSTAT DS    XL1\nVENDARG  DC    CL1'V'\nVARG     DS    CL32\nCATARG   DC    CL1'C'\nCARG     DS    CL32\nCNTLFILE DCB   DDNAME=CNTLCARD,                                        X\n               DSORG=PS,                                               X\n               MACRF=GM,                                               X\n               EODAD=CNTLEOD\nOUTFILE  DCB   DDNAME=OUTFILE,                                         X\n               DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               LRECL=94,                                               X\n               RECFM=FB\nPRTFILE  DCB   DDNAME=PRTFILE,                                         X\n               DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               LRECL=133,                                              X\n               RECFM=FBM\nCNTLREC  DS    CL80\nSORTREC  DS    0CL94\nSORTCCN  DS    H\nSORTINX1 DS    H\nSORTINX2 DS    H\nSORTPRDN DS    H\nSORTDATE DS    CL6\nSORTDATA DS    CL80\n         ORG   SORTDATA\nSORTFORM DS    H\nSORTVEND DS    CL32\nSORTCAT  DS    CL32\n         ORG   SORTDATA\nSORTACRN DS    CL16\nSORTPROD DS    CL64\nPRTLINE  DS    CL133\n         LTORG\n*\n         END\n//L.SYSLMOD  DD DSN=SSU.LINKLIB,DISP=SHR\n//L.SYSPRINT DD SYSOUT=X\n//L.SYSLIB DD DSN=SSU.LINKLIB,DISP=SHR\n//L.SYSIN    DD *\n    NAME SSR010PR(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSR011PR": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x01^\\x01^\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 350, "newlines": 350, "modlines": 0, "user": "FILE060"}, "text": "//SS58A JOB (150),CHAPMAN,CLASS=P,NOTIFY=SS58,COND=(0,NE)\n//ASM       EXEC ASMFCL,MAC='SS.MACLIB',MAC1='SYS1.MACLIB',\n//          PARM.ASM='NODECK,OBJ,XREF(FULL)',\n//          PARM.LKED=(XREF,LET,LIST)\n//ASM.SYSPRINT DD SYSOUT=X\n//ASM.SYSIN    DD *\n         TITLE 'SSR011PR'\nSSR011PR REG SSR011PR-&SYSDATE-&SYSTIME,BASE1,BASE2\n         TIME  DEC\n         ST    R1,CURRDTE\n         UNPK  YEAR1J(5),CURRDTE(4)\n         MVI   JULF1,C' '\n         MVI   OPTION,C'2'\n         CALL  DATEMVS,(DATECONV)\n         MVC   RPTMONTH(9),MNTHNAME\n         MVC   RPTDAY(2),DAYOUTG\n         MVC   RPTYEAR(2),YEAROUTG\n         OPEN  (INPTFILE,,PRTFILE,OUTPUT)\n         LA    R4,PRODNAM2+32\nGETREC   GET   INPTFILE,SORTREC       READ INPUT RECORD\n         CLC   SORTDATE(6),=X'000000000000' TYPE ZERO RECORD?\n         BE    TYPEZERO                       YES\n         CLC   SORTDATE(6),=X'000000000001' TYPE ONE RECORD?\n         BE    TYPEONE                        YES\n         B     TYPDTAIL\nTYPEZERO EQU   *                GOT A TYPE ZERO RECORD\n         CLC   SORTCCN,HOLDCCN           IS IT A NEW CONTROL CARD?\n         BE    SAMECCN                     NO\n         MVC   HOLDCCN(2),SORTCCN        NEW MAJOR ARGUMENT - HOLD CCN\n         MVC   HOLDFORM(2),SORTFORM        AND FORM\nSAMECCN  CLI   HOLDFORM,C'V'             FORM = 'V...'?\n         BE    CKMJVEND                    YES\n         CLI   SORTCAT,X'40'             CATEGORY BLANK?\n         BE    SAMECAT1                    YES\n         CLC   HEADER1(32),SORTCAT       CATEGORY BREAK?\n         BE    SAMECAT1                    NO\n         MVC   DASHLINE+7(33),DASHLINE+40  YES..\n         BAL   R10,CLEANUP\n         MVC   HEADER1(32),SORTCAT           PRINT NEW CAT\n         BAL   R10,PUTMAJHD\n         MVI   HEADER2,X'40'                 CLEAR HEADER2\n         MVC   HEADER2+1(31),HEADER2\nSAMECAT1 CLC   HEADER2(32),SORTVEND      VENDER BREAK?\n         BE    SAMEVND2                    NO\n         MVC   HEADER2(32),SORTVEND        YES - HOLD NEW VENDOR\n         CLI   HOLDFORM+1,C' '           SECOND ARG = VENDOR?\n         BE    VEND3ARG                    NO\n         MVI   HED2FLAG,C'1'               YES - FLAG IT FOR PRINTLINE\n         MVC   DASHLINE+7(33),DASHLINE+40  YES..\n         B     GETREC\nSAMEVND2 EQU   *\n         CLI   HOLDFORM+1,C'V'           SECOND ARGUMENT = VENDOR?\n         BE    GETREC                      YES\nVEND3ARG MVI   HED2FLAG,C'2'               NO - FLAG IT FOR PRINTLINE\n         B     GETREC\nCKMJVEND EQU   *                         MAJOR ARGUMENT = VENDER\n         CLI   SORTVEND,X'40'            CATEGORY BLANK?\n         BE    SAMEVND1\n         CLC   HEADER1(32),SORTVEND      VENDER BREAK?\n         BE    SAMEVND1                    NO\n         MVC   DASHLINE+7(33),DASHLINE+40  YES..\n         BAL   R10,CLEANUP\n         MVC   HEADER1(32),SORTVEND        YES - PRINT NEW VEND\n         BAL   R10,PUTMAJHD\n         MVI   HEADER2,X'40'             CLEAR HEADER2\n         MVC   HEADER2+1(31),HEADER2\nSAMEVND1 CLC   HEADER2(32),SORTCAT       CATEGORY BREAK?\n         BE    SAMECAT2                    NO\n         MVC   HEADER2(32),SORTCAT         YES - HOLD NEW CATEGORY\n         CLI   HOLDFORM+1,C' '           MINOR ARG = CATEGORY?\n         BE    CAT3ARG\n         MVI   HED2FLAG,C'1'               YES - FLAG IT FOR PRINTLINE\n         MVC   DASHLINE+7(33),DASHLINE+40  YES..\n         B     GETREC\nSAMECAT2 EQU   *\n         CLI   HOLDFORM+1,C'C'           MINOR ARGUMENT = CATEGORY?\n         BE    GETREC                      YES\nCAT3ARG  MVI   HED2FLAG,C'2'               NO - FLAG IT FOR PRINTLINE\n         B     GETREC\nPUTMAJHD EQU   *\n         CLC   LINCOUNT(2),=H'46'        ENOUGH ROOM REMAINING?\n         BL    PUTMAJH2                    YES...\n         BAL   R9,TOPOFORM               DO TOP OF FORM\nPUTMAJH2 LA    R5,PRTLINE                R5 ==> PRTLINE\n         MVC   PRTLINE+1(7),VENDRL       MAJOR HEADING = 'VENDOR:'\n         LA    R8,THEDUMP                ROUTE VEND HEADING => NOWHERE\n         LA    R7,HEDLINE+7                \"   CTGRY HEADING => 2ND\n         LA    R6,HEDLINE+41               \"   PROD HEADING => 3RD\n         CLI   HOLDFORM,C'V'             IS MAJOR ARGUMENT = VENDOR?\n         BE    PRNTMJHD\n         MVC   PRTLINE+1(9),CTGRYL       NO-MAJOR HEADING = 'CATEGORY:'\n         LA    R8,HEDLINE+7              ROUTE VEND HEADING => 2ND\n         LA    R7,THEDUMP                  \"   CTGRY HEADING => NOWHERE\nPRNTMJHD MVC   PRTLINE+12(32),HEADER1    LOAD HEADER1 TO PRINTLINE\n         MVI   PRTLINE,C'0'              SKIP 2 LINES\n         BAL   R9,PUTLINE2               PRINT MAJOR HEADING LINE\n         MVI   PRTLINE,C' '              SKIP 1 LINE\n         MVC   PRTLINE+1(7),DASHLINE+40  DASHES FOR VENDOR HEADING\n         CLI   HOLDFORM,C'V'\n         BE    PRNTMJH2\n         MVC   PRTLINE+1(9),DASHLINE+40  DASHES FOR CATEGORY HEADING\nPRNTMJH2 BAL   R9,PUTLINE2               PRINT MAJ HEADING DASHES\n         CLI   HOLDFORM+1,C' '           IS 2ND ARGUMENT = PROD NAME?\n         BNE   PRNTMNHD\n         LA    R6,HEDLINE+7          YES: ROUTE PROD HEADING => 2ND\n         LA    R8,HEDLINE+41             ROUTE VENDOR HEADING => 3RD\n         CLI   HOLDFORM,C'C'             IS MAJOR ARGUMENT = VENDOR?\n         BE    PRNTMNHD\n         LA    R7,HEDLINE+41         YES: ROUTE CATEGORY HEADING => 3RD\n         LA    R8,THEDUMP               ROUTE VENDOR HEADING => NOWHERE\nPRNTMNHD MVI   HEDLINE,X'40'\n         MVC   HEDLINE+1(72),HEDLINE     BLANK OUT HEADING LINE 1-72\n         MVC   0(20,R6),PRDNAML          MOVE VENDOR, CATEGORY &\n         MVC   0(8,R7),CTGRYL              PROD NAME HEADINGS TO WHERE\n         MVC   0(6,R8),VENDRL                THEY'VE BEEN ROUTED\n         LA    R5,HEDLINE                PRINT HEADING LINE\n         BAL   R9,PUTLINE2\n         CLI   SORTDATE,X'00'\n         BE    0(R10)\n         LA    R5,DASHLINE               PRINT UNDERSCORES\n         BAL   R9,PUTLINE2\n         MVI   DASHLINE+7,C' '           KILL DASHES\n         MVC   DASHLINE+8(32),DASHLINE+7\n         BR    R10\nTOPOFORM MVC   LINCOUNT(2),=H'00'        ZERO OUT LINE COUNT\n         MVI   PRTLINE+1,X'40'           BLANK OUT PRINTLINE\n         MVC   PRTLINE+2(131),PRTLINE+1\n         PUT   PRTFILE,TITLINE\n         MVI   PAGEFLAG,C'0'             RESET PAGE FLAG\n         BR    R9\nPUTLINE  EQU   *\n         CLI   PAGEFLAG,C'1'             NEED NEW PAGE?\n         BNE   PUTLINE2                    NAH\n         PUT   PRTFILE,DASHLINE          PRINT DASHES\n         ST    R5,SAVER5                 STORE R5\n         STM   R9,R10,SAVER9               R9 AND R10\n         MVC   HOLDLINE(133),PRTLINE     STOW PRINTLINE\n         BAL   R9,TOPOFORM               DO TOP OF FORM\n         BAL   R10,PUTMAJHD              PRINT MAJ HEADINGS\n         L     R5,SAVER5                 RESTORE R5\n         LM    R9,R10,SAVER9               R9 AND R10\n         MVC   PRTLINE(133),HOLDLINE     RESTORE PRINTLINE\nPUTLINE2 PUT   PRTFILE,0(R5)             PRINT A LINE\n         MVI   PRTLINE,X'40'\n         MVC   PRTLINE+1(132),PRTLINE\n         LH    R3,LINCOUNT               INCREMENT LINE COUNT\n         AH    R3,=H'1'\n         STH   R3,LINCOUNT\n         BR    R9\nTYPEONE  EQU   *                             GOT A TYPE 1 RECORD\n         CLI   HOLDFORM+1,C' '\n         BNE   TYPEONE2\n         MVC   DASHLINE+7(33),DASHLINE+40    DASHES FOR END OF PRODUCT\nTYPEONE2 BAL   R10,CLEANUP\n         MVI   PRODACRN,X'40'\n         MVC   PRODACRN+1(96),PRODACRN\n         MVC   HOLDORDR(12),PRODACRN\n         MVC   HOLDFMID(7),PRODACRN\n         MVC   HOLDRELS(12),PRODACRN\n         MVC   PRODACRN(16),SORTDATA\n         MVC   PRODNAM1(64),SORTDATA+16\n         BAL   R9,ADDRNAME\n         B     GETREC\nADDRNAME LA    R4,PRODACRN\n         CLI   PRODACRN,X'40'\n         BE    ADDRPRD1\n         CLC   PRODACRN(16),PRODNAM1\n         BNE   0(R9)\nADDRPRD1 LA    R4,PRODNAM1\n         B     0(R9)\nTYPDTAIL EQU   *                             GOT A DETAIL TYPE RECORD\n         CLC   LINCOUNT(2),=H'52'        GOING TO OVERFLOW PAGE?\n         BL    FMTDTAIL                    NO...\n         CLI   0(R4),X'40'\n         BNE   FMTDTAIL                    NO...\n         MVI   PAGEFLAG,C'1'             FLAG FOR TOP OF FORM\n         MVC   DASHLINE+7(33),DASHLINE+40\n         OI    HED2FLAG,X'F0'            FLAG TO PRINT 2ND ARGUMENT\n         BAL   R9,ADDRNAME               SET R4 ==> FIRST NAME TO PRINT\n         MVI   HOLDORDR,X'40'            BLANK OUT HOLDORDR, HOLDFMID\n         MVC   HOLDORDR+1(30),HOLDORDR     AND HOLDRELS\nFMTDTAIL CLI   HED2FLAG,C'1'            CATEGORY/VENDOR NEEDS PRINTING?\n         BL    NEWORDR                        NO...\n         CLI   HED2FLAG,C'1'                GOES IN 1ST SLOT?\n         BNE   HED2FLG2\n         MVC   PRTLINE+7(32),HEADER2          YES\n         B     NEWORDR\nHED2FLG2 MVC   PRTLINE+41(32),HEADER2         NO\nNEWORDR  NI    HED2FLAG,X'0F'               RESET FLAG\n         CLC   HOLDORDR(12),SORTDATA+21     NEW ORDER#?\n         BE    NEWFMID                        NO...\n         MVC   HOLDORDR(12),SORTDATA+21     HOLD NEW ORDER#\n         MVC   PRTLINE+74(12),SORTDATA+21   LOAD ORDER# TO PRINTLINE\n         MVC   HOLDFMID(19),PRTLINE+86      BLANK OUT HOLDFMID HOLDRELS\nNEWFMID  CLC   HOLDFMID(7),SORTDATA+12      NEW FMID?\n         BE    NEWRELS                        NO...\n         MVC   HOLDFMID(7),SORTDATA+12      HOLD NEW FMID\n         MVC   PRTLINE+87(7),SORTDATA+12    LOAD FMID TO PRINTLINE\nNEWRELS  CLC   HOLDRELS(12),SORTDATA+33     NEW RELEASE?\n         BE    LOADREST                       NO...\n         MVC   HOLDRELS(12),SORTDATA+33     HOLD NEW RELEASE\n         MVC   PRTLINE+95(12),SORTDATA+33   LOAD RELEASE TO PRINTLINE\nLOADREST MVC   PRTLINE+108(10),SORTDATA     LOAD PTF/MOD TO PRINTLINE\n         MVC   PRTLINE+122(2),SORTDATE+2    LOAD DATE TO PRINTLINE\n         MVC   PRTLINE+125(2),SORTDATE+4\n         MVC   PRTLINE+128(2),SORTDATE\n         MVI   PRTLINE+124,C'/'\n         MVI   PRTLINE+127,C'/'\n         BAL   R11,PRTDTAIL\n         B     GETREC\nPRTDTAIL MVI   PRTLINE+6,C'|'\n         MVI   PRTLINE+40,C'|'\n         MVI   PRTLINE+73,C'|'\n         MVI   PRTLINE+86,C'|'\n         MVI   PRTLINE+94,C'|'\n         MVI   PRTLINE+107,C'|'\n         MVI   PRTLINE+121,C'|'\n         MVI   PRTLINE+131,C'|'\n         CLI   0(R4),X'40'                   PROD NAME LINES REMAINING?\n         BE    PRNTDTL                         NO\n         MVC   266(32,R6),0(R4)                YES - LOAD NEXT ONE\nPRNTDTL  LA    R5,PRTLINE                    PRINT THAT SUCKER\n         BAL   R9,PUTLINE\n         CLI   0(R4),X'40'                   PROD NAME LINES REMAINING?\n         BE    0(R11)                          NO\n         LA    R4,32(R4)                       YES- BUMP R4 TO NEXT ONE\n         BR    R11\nCLEANUP  EQU   *   THIS ROUTINE ENSURES ALL PROD NAME LINES GET PRINTED\n         CLI   0(R4),X'40'               PROD NAME LINES REMAINING?\n         BE    CLEANEND                    NO\n         BAL   R11,PRTDTAIL                YES - PRINT 'EM\n         B     CLEANUP\nCLEANEND CLC   LINCOUNT(2),=H'52'        GOING TO OVERFLOW PAGE?\n         BL    PUTDASH                     NO...\n         MVI   PAGEFLAG,C'1'               YES - SET PAGE FLAG\n         MVC   DASHLINE+7(33),DASHLINE+40      - FULL DASH LINE\n         OI    HED2FLAG,X'F0'              -FLAG TO PRINT 2ND ARGUMENT\n         BR    R10\nPUTDASH  CLI   FIRSTX,X'FF'             1ST PRINT?\n         BNE   PUTDASH2\n         MVI   FIRSTX,X'00'\n         BR    R10\nPUTDASH2 LA    R5,DASHLINE\n         BAL   R9,PUTLINE                PRINT DASHES AT END OF PRODUCT\n         MVI   DASHLINE+7,C' '           RESET DASHES\n         MVC   DASHLINE+8(32),DASHLINE+7\n         BR    R10\nCLOSEALL EQU   *\n         MVC   DASHLINE+7(33),DASHLINE+40\n         LA    R5,DASHLINE\n         BAL   R9,PUTLINE\n         CLOSE (INPTFILE,,PRTFILE,)\n         L     R13,4(R13)                    BRUSH YOUR TEETH\n         RETURN (14,12),RC=0                     AND GO TO BED\n         EJECT\nINPTFILE DCB   DDNAME=INFILE,                                          X\n               DSORG=PS,                                               X\n               MACRF=GM,                                               X\n               LRECL=94,                                               X\n               EODAD=CLOSEALL,                                         X\n               RECFM=FB\nPRTFILE  DCB   DDNAME=PRTFILE,                                         X\n               DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               LRECL=133,                                              X\n               RECFM=FBA\nCURRDTE  DS    F\nSAVER5   DS    F\nSAVER9   DS    2F\nLINCOUNT DC    H'50'    THIS INITIAL VALUE FORCES FIRST TOP OF FORM\nCTGRYL   DC    CL9'CATEGORY:'\nVENDRL   DC    CL7'VENDOR:'\nPRDNAML  DC    CL20'ACRONYM/PRODUCT NAME'\nHED2FLAG DC    CL1'0'\nPAGEFLAG DC    CL1'0'\nFIRSTX   DC    X'FF'     SUPPRESSES PRINT OF DASHLINE 1ST TIME\nHEADER1  DS    CL32\nHEADER2  DS    CL32\nHOLDFORM DS    CL2\nHOLDCCN  DC    H'32767'\nHOLDPROD DS    0CL97\nPRODACRN DS    CL32\nPRODNAM1 DS    CL32\nPRODNAM2 DS    CL32\n         DC    CL1' '\nHOLDORDR DS    CL12\nHOLDFMID DS    CL7\nHOLDRELS DS    CL12\nSORTREC  DS    0CL94\nSORTCCN  DS    H\nSORTINX1 DS    H\nSORTINX2 DS    H\nSORTPRDN DS    H\nSORTDATE DS    CL6\nSORTDATA DS    CL80\n         ORG   SORTDATA\nSORTFORM DS    H\nSORTVEND DS    CL32\nSORTCAT  DS    CL32\n         ORG   SORTDATA\nSORTACRN DS    CL16\nSORTPROD DS    CL64\n**********************************\n         ORG   SORTREC\nDATECONV EQU   *\nOPTION   DS    CL1\nYEAR1J   DS    CL5\nJULF1    DS    CL21\nDAYOUTG  DS    CL2\nYEAROUTG DS    CL8\nMNTHNAME DS    CL27\n         DS    CL30\n**********************************\nTITLINE  DS    0CL133\n         DC    CL1'1'                TOP OF FORM\n         DC    CL44'      ******* SOFTWARE STATUS REPORT *******'\n         DC    CL66' '\nRPTMONTH DC    CL10' '\nRPTDAY   DC    CL6'  , 19'\nRPTYEAR  DC    CL2'  '\n         DC    CL4' '\nHEDLINE  DS    0CL133\n         DC    CL74' '\n         DC    CL5'ORDER'\n         DC    CL8' '\n         DC    CL8'FMID    '\n         DC    CL7'RELEASE'\n         DC    CL6' '\n         DC    CL7'PTF/MOD'\n         DC    CL9' '\n         DC    CL9'DATE     '\nDASHLINE DS    0CL133\n         DC    CL6' '\n         DC    CL1'|'\n         DC    CL33' '\n         DC    CL31'-------------------------------'\n         DC    CL31'-------------------------------'\n         DC    CL31'-----------------------------| '\nPRTLINE  DS    CL133\nTHEDUMP  DS    CL20\nHOLDLINE DS    CL133\n         LTORG\n*\n         END\n//LKED.SYSLMOD  DD DSN=SSU.TESTLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=X\n//SYSLIB DD DSN=SSU.LINKLIB,DISP=SHR\n//LKED.SYSIN    DD *\n    NAME SSR011PR(R)\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSXTEND": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x04\\x03L\\x03L\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf6\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:04:00", "lines": 844, "newlines": 844, "modlines": 0, "user": "FILE060"}, "text": "//XXXXXX    JOB\n//ASM       EXEC ASMFCL,\n//          PARM.ASM='NODECK,OBJ,XREF(FULL)',\n//          PARM.LKED=(XREF,LET,LIST)\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=X\n//ASM.SYSPUNCH DD DUMMY\n//ASM.SYSIN    DD *\n         TITLE 'SSXTEND - INSERT STRING INTO JOB CARD'\n*\n*        SSXTEND WILL COPY SELECTED MEMBERS FROM ONE PDS TO ANOTHER.\n*    THE COPIED MEMBERS WILL HAVE THEIR JOB CARDS EXTENDED. OUR\n*    PURPOSE IN DOING THIS WAS TO ALLOW THE INSERTION OF THE 'USER'\n*    AND 'PASSWORD' PARAMETERS AS VARIOUS SYSTEMS CONVERTED TO RACF.\n*    MEMBERS TO BE COPIED ARE SELECTED ON THE BASIS OF THE FIRST TWO\n*    LETTERS OF THEIR MEMBER NAME. COLUMNS ONE AND TWO OF THE INPUT\n*    DATASET 'PREFIX' DETERMINE MEMBER SELECTION.  UP TO TWENTY FIVE\n*    TWO LETTER PREFIXES ARE ALLOWED. THE CARD IMAGES TO BE INSERTED\n*    ARE READ FROM THE DATASET 'INSERT'. UP TO THREE CARDS ARE\n*    ALLOWED.  A COMMA WILL BE ADDED TO THE LAST CARD IMAGE OF THE\n*    ORIGINAL JOB CARD AND ANY DATA FROM 'INSERT' WILL FOLLOW. COLUMNS\n*    73 - 80 ARE UPDATED TO REFLECT SEQUENCE CHANGES. ISPF/SPF USER\n*    DATA WILL UPDATED BY THE SUBROUTINE 'UPDATE'. THE SINGLE BRANCH\n*    TO THIS SUBROUTINE IS CLEARLY MARKED.  USER DATA IN ANY FORMAT\n*    SHOULD BE SUCCESSFULLY COPIED WITHOUT THIS ROUTINE.\n*\n*        THIS PROGRAM IS OFFERED 'AS IS' AND ALTHOUGH WE ARE UNAWARE\n*   OF ANY PROGRAM PROBLEMS WE SUGGEST THAT THIS PROGRAM BE RUN BY\n*   SYSTEMS PEOPLE AND THAT APPROPRIATE BACKUPS ARE TAKEN. THE 'BEFORE'\n*   AND 'AFTER' IMAGES ARE PRINTED AND SHOULD BE CHECKED FOR ERROR\n*   MESSAGES AS WELL AS FOR CORRECT PROGRAM OPERATION.\n*\n*        ANY COMMENTS, QUESTIONS OR SUGGESTED IMPROVEMENTS ARE WELCOME.\n*\n*                    GEORGIA DEPT. OF LABOR\n*                    SYSTEMS SUPPORT - ROOM 370\n*                    254 WASHINGTON ST.\n*                    ATLANTA, GA.\n*                    30334\n*                           ATTN.  CHRIS MCFADDEN\n         EJECT\nSSXTEND CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING *-6,R12\n         LA    R7,SAVEAREA\n         ST    R13,4(R7)\n         ST    R7,8(R13)\n         LR    R13,R7\n         USING SAVEAREA,R13\n*\n         OPEN  (INLIB,,PREFIX,,INSERT,,REPORT,OUTPUT,OUTLIB,OUTPUT)\n         LA    R3,OUTLIB                OUTPUT PDS DCB\n         LA    R3,62(R3)                ADDRESS OF BLKSIZE\n         ST    R3,BLKSZDCB              SAVE IT\n         MVC   BLKSIZE+2(2),0(R3)       ALSO SAVE THE ACTUAL BLKSIZE\n         LA    R3,20(R3)                ADDRESS OF LRECL\n         MVC   LRECL+2(2),0(R3)         SAVE THE LRECL\n         L     R3,LRECL\n         BCTR  R3,R0                    USED IN EXECUTE INSTRUCTION\n         ST    R3,EX$AMT\n         CLC   LRECL,=F'256'            MVCL NOT USED HERE\n         BL    LRECL$OK\n*\n         WTO   '===============================================',      X\n               ROUTCDE=11\n         WTO   'LRECLS IN EXCESS OF 255 BYTES ARE NOT SUPPORTED',      X\n               ROUTCDE=11\n         WTO   '    FOR OUTPUT LIBRARIES - JOB TERMINATING     ',      X\n               ROUTCDE=11\n         WTO   '===============================================',      X\n               ROUTCDE=11\n*\n         CLOSE (INLIB,,INLIB2,,OUTLIB,,PREFIX,,REPORT,,INSERT,)\n         L     R15,=F'12'\n         L     R13,4(R13)\n         RETURN (14,12),RC=(15) COMPLETION CODE 12\n*\nLRECL$OK EQU   *\n         LA    R10,INLIB2\n         USING IHADCB,R10\n         OPEN  ((R10),(INPUT))\n         GETBUF (R10),(R9)\n         ST    R9,BUFADDR                SAVE BUFFER ADDRESS\n         L     R3,BLKSIZE\n         GETMAIN R,LV=(3)                GET OUTPUT BUFFER\n         ST    R1,OUTBUFFR\n*\n         TIME  DEC\n         ST    R0,SPFTIME                SAVE FOR ISPF STATISTICS\n         ST    R1,SPFDATE                SAVE FOR ISPF STATISTICS\n         ST    R1,DWORK                  INITIALIZE\n         UNPK  YEAR1J(5),DWORK              HEADERS\n         MVI   JULF1,C' '                      AND\n         MVI   OPTION,C'2'                       PRINT\n         CALL  DATEMVS,(DATECONV)     *** CONVERT TO GREGORIAN ***\n         MVC   MM1,MNTHOUTG\n         MVC   DD1,DAYOUTG\n         MVC   YY1,YEAROUTG\n         MVC   RUNDATE,PRTDATE\n         BAL   R2,HEADRT\n*\n         LA    R5,PREFXTBL\n         XR    R6,R6\nBLDTABLE EQU   *\n         GET   PREFIX,PREFXIN\n         MVC   0(2,R5),PREFXIN    LOAD TABLE\n         LA    R5,2(R5)             OF SELECTED\n         LA    R6,1(R6)                  PREFIXES\n         C     R6,MAXTABLE    TABLE OVERFLOW ?\n         BNH   BLDTABLE\n*\n         PUT   REPORT,OVFLOMSG      INDICATE OVERFLOW\n         AP    LINECNT,=P'3'\n*\nTBLDONE  EQU   *\n         ST    R6,TABLEND\n*\n         LA    R5,CARDBUFR\n         XR    R6,R6\n*\nLDCARDS  EQU   *\n         GET   INSERT,CARDIN\n         MVC   0(80,R5),CARDIN     LOAD TABLE\n         LA    R5,80(R5)             OF CARD IMAGES\n         LA    R6,1(R6)                TO BE INSERTED\n         C     R6,MAXCARDS        TABLE OVERFLOW ?\n         BNH   LDCARDS\n*\n         PUT   REPORT,CARDSOV       INDICATE OVERFLOW\n         AP    LINECNT,=P'3'\n*\nLASTCARD EQU   *\n         ST    R6,NUMADDED\n         LA    R6,1(R6)               MODIFIED = INSERTED + COMMA\n         ST    R6,NUMODIFY            SAVE FOR STOW LIST\n*\nGETNR    EQU   *\n         GET   INLIB\n         LH    R7,0(R1)                GET LENGTH USED\n         LA    R7,0(R7,R1)             GET END OF USED BUFFER\n         LA    R4,2(R1)                LOAD INITIAL NAME IN BLK\n*\nGETNM    EQU   *\n         CLC   0(2,R4),=X'FFFF'        IS IT END OF DIR\n         BE    ENDJ                    YES WRAP UP\n*\n         L     R8,TABLEND\n         LA    R9,PREFXTBL\n*\nSCANTBL  EQU   *\n         CLC   0(2,R4),0(R9)           SELECTED PREFIX ?\n         BE    SELECTED\n         LA    R9,2(R9)\n         BCT   R8,SCANTBL\n*\n         B     NOTSEL\n*\nMVC$USER MVC   0(0,R11),12(R4)         MOVE USERDATA TO STOW LIST\n*\nSELECTED EQU   *\n         MVC   MEMNAME,0(R4)           MOVE NAME TO WORK AREA\n         MVC   LIST(12),0(R4)          LOAD STOW LIST\n         CLI   CBYTE,X'00'             NO USERDATA ?\n         BE    SKIPUPDT\n*\n         XR    R2,R2                   GET NUMBER OF\n         IC    R2,CBYTE                HALFWORDS OF\n         N     R2,DATALNGH                  USERDATA\n         AR    R2,R2                   CONVERT TO BYTES\n         BCTR  R2,R0                   REDUCE FOR EX INSTRUCTION\n         LA    R11,USERDATA            MOVE USERDATA\n         EX    R2,MVC$USER               TO STOW LIST\n*\n*********************************************************************\n*********************************************************************\n***  THIS ROUTINE SHOULD BE OMITTED FOR NON SPF/ISPF MEMBERS      ***\n***                                                               ***\n         BAL   R2,UPDATE               UPDATE ISPF STATISTICS     ***\n***                                                               ***\n*********************************************************************\n*********************************************************************\n*\nSKIPUPDT EQU   *\n         PUT   REPORT,MEMBERID\n         AP    LINECNT,=P'1'\n*\n         BAL   R2,PROCESS              MOVE MEMBER TO NEW PDS\n*\n         MVI   SPACECC,X'19'           SPACE 3\n         PUT   REPORT,SPACE\n         MVI   SPACECC,X'09'           SPACE 1\n         AP    LINECNT,=P'3'\n         CP    LINECNT,=P'45'\n         BL    NOTSEL\n         BAL   R2,HEADRT              NEXT PAGE\n*\nNOTSEL   EQU   *\n         NI    11(R4),X'1F'            MASK OFF NON LENGTH BITS\n         SR    R6,R6                   CLEAR REG 6\n         IC    R6,11(R4)               PUT NUM HALF WORDS IN REG\n         LA    R4,12(R4,R6)            ADD 12 BYTES AND NUM\n         LA    R4,0(R4,R6)                 HALF WORDS IN REG 6\n         CR    R4,R7                   END OF BUFFER\n         BL    GETNM                   NO, GET NEXT NAME\n         B     GETNR                   GET NEXT DIR RECORD\n*\nENDJ     EQU   *\n         CLOSE (INLIB,,INLIB2,,OUTLIB,,PREFIX,,REPORT,,INSERT,)\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         EJECT\n*\n*\n*\nPROCESS  EQU   *\n         ST    R2,SAVEREG2\n         MVC   JOBSLOT(5),=X'FFFFFFFFFF'  OVERLAYED IF JOBCARD FOUND\n         MVI   NOGO,C'N'           RESET INSERT FAILURE INDICATOR\n         MVC   B4AFTER,=C'BEFORE'  INITIALIZE DETAIL LINE\n         XR    R5,R5               TOTALS LRECL'S TO BUFFER\n         L     R11,OUTBUFFR        ADDRESS OF GETMAINED BUFFER\n         L     R9,BUFADDR          ADDRESS BUFFER\n         FIND  (R10),MEMNAME,D     FIND MEMBER DESIRED\n         LTR   R15,R15             MEMBER FOUND\n         BZ    RECGET\n*\n         ABEND 0100,DUMP\n*\nRECGET   EQU   *\n         READ  JOBDECB,SF,(R10),(R9),'S'   READ A BLOCK\n         CHECK JOBDECB\n         LH    R8,DCBBLKSI\n         LH    R3,DCBLRECL\n         L     R6,JOBDECB+16       DECIOBPT FIELD OF JOBDECB\n         SH    R8,14(R6)           SUBTRACT BYTE COUNT FROM IOBCSW\n*                                  R8 NOW CONTAINS TRUE BLOCK SIZE READ\n         LR    R6,R9               MOVE R9 TO WORK REG\nPUTLOOP  EQU   *\n         SR    R8,R3               SUBTRACT LRECL TO GET REMAIN BLKSIZE\n         BM    RECGET              GET NEXT BLOCK\n*\nPUTLREC  EQU   *\n         C     R5,BLKSIZE          FULL BLOCK READY ?\n         BNE   MOVE2BUF\n         LA    R2,NEXTINST         WRITEOUT IS ALSO A SUBROUTINE\n*\nWRITEOUT EQU   *\n         L     R11,OUTBUFFR        READDRESS OF GETMAINED BUFFER\n         WRITE DECB1,SF,OUTLIB,(11)      LOAD OUTPUT PDS\n         CHECK DECB1\n         BR    R2                   GO TO EITHER NEXTINST OR WRITEBLK\n*\nNEXTINST EQU   *\n         CLI   SHORTBLK,C'Y'       SHORT BLOCK WRITTEN - READY TO STOW\n         BE    FIXBLK\n         XR    R5,R5               GET READY FOR THE NEXT BLOCK\n*\nMOVE2BUF EQU   *\n         BAL   R2,INSERTIT         SEARCH FOR JOBCARD AND INSERT\n         L     R1,EX$AMT           ONE LESS THAN LRECL\n         EX    R1,EX$MVC           LOAD OUTPUT BUFFER\n         A     R5,LRECL            LRECL COUNTER\n         A     R11,LRECL           UPDATE BUFFER POINTER\n*\n         LA    R6,0(R6,R3)         ADD LRECL TO CURRENT BUFFER POINTER\n         B     PUTLOOP\n*\nEX$MVC   MVC   0(0,R11),0(R6)      LOAD OUTPUT BUFFER\n*\nTASKEND  EQU   *\n         CLC   JOBSLOT(5),=X'FFFFFFFFFF'   JOBCARD FOUND ?\n         BNE   FOUND\n         PUT   REPORT,NOJOBMSG     INDICATE JOBCARD NOT FOUND\n         AP    LINECNT,=P'1'\n*\nFOUND    EQU   *\n         LTR   R5,R5               IS THERE A SHORT BLOCK TO BE WRITTEN\n         BE    STOW                NO\n         ST    R5,WORK5            SAVE SHORT BLOCKSIZE\n         L     R5,BLKSZDCB         ADDRESS OUTPUT DCB BLKSIZE\n         MVC   0(2,R5),WORK5+2     INSERT NEW BLKSIZE\n         MVI   SHORTBLK,C'Y'       INFORM WRITE ROUTINE\n         LA    R2,NEXTINST         WRITEOUT IS ALSO A SUBROUTINE\n         B     WRITEOUT            WRITE SHORT BLOCK\n*\nFIXBLK   EQU   *\n         MVI   SHORTBLK,C'N'       RESET FLAG\n         MVC   0(2,R5),BLKSIZE+2   RESET OUTPUT BLOCKSIZE IN DCB\n*\nSTOW     EQU   *\n         L     R2,SAVEREG2          PREPARE FOR RETURN\n         STOW  OUTLIB,LIST\n*\n         A     R15,BRANCHPT\n         BR    R15                EVALUATE RETURN CODE\n*\nBRANCHPT DC    A(*+4)\n         BR    R2                 STOW OK - RETURN\n         DC    C'=>'              <= IS AN ARROW !\n         B     DUPENAME           DUPLICATE NAME IN DIRECTORY\n         B     NA                 RETURN CODE 8 IS NOT DOCUMENTED\n         PUT   REPORT,SPACEMSG    NO SPACE IN DIRECTORY\n         CLOSE (REPORT,,OUTLIB,,INLIB,,INLIB2,,PREFIX,,INSERT,)\n         L     R15,=F'12'\n         L     R13,4(R13)\n         RETURN (14,12),RC=(15) COMPLETION CODE 12\n*\nDUPENAME EQU   *\n         PUT   REPORT,DUPEMSG      INFORM USER OF DUPLICATE NAME\n         AP    LINECNT,=P'1'\n         STOW  OUTLIB,LIST,D       DELETE OLD ENTRY\n         LTR   R15,R15\n         BE    STOW                RE-ATTEMPT THE STOW\n*\n         ABEND 0200,DUMP\n*\nNA       EQU   *\n         PUT   REPORT,NAMSG         INVALID RETURN CODE\n         CLOSE (REPORT,,OUTLIB,,INLIB,,INLIB2,,PREFIX,,INSERT,)\n         ABEND 0300,DUMP\n*\n*\n*\nUPDATE   EQU   *\n         XR    R9,R9                 CLEAR R9\n         IC    R9,1(R11)             MODIFICATION #\n         LA    R9,1(R9)                IS UPDATED\n         CVD   R9,MODNO              SAVE FOR COLUMNS 73 - 80\n         MVC   COPY1,MASK1\n         ED    COPY1,MODNO+4\n         ICM   R9,B'0010',0(R11)     NOW GET VERSION\n         STH   R9,0(R11)             UPDATE STOW LIST\n*\n         MVC   8(4,R11),SPFDATE      MODIFICATION DATE\n         MVC   12(2,R11),SPFTIME     MODIFICATION TIME\n*\n         LH    R9,14(R11)            INITIAL SIZE\n         A     R9,NUMADDED           # LINES ADDED\n         STH   R9,14(R11)            UPDATE STOW LIST\n*\n         MVC   18(2,R11),NUMODIFY+2  # OF LINES MODIFIED\n         MVC   20(7,R11),=C'SSXTEND'    WHO MODIFIED MEMBER\n*\n         BR    R2\n*\n*\n*\nINSERTIT EQU   *\n         STM   R2,R4,HOLDREGS\n         CLI   COMMA$IN,C'Y'          IS COMMA INSERTED ?\n         BE    NEXTCARD                 YES, MOVE IN NEW CARDS\n         CLI   JOBFND,C'Y'            MULTI-CARD JOBCARD ?\n         BE    FNDEND                   YES, SEARCH FOR END\n*\n         CLC   0(3,R6),=C'// '        NO JOBNAME\n         BE    INSRTXIT               GET OUT\n         CLC   0(3,R6),=C'//*'        COMMENT\n         BE    INSRTXIT               GET OUT\n         CLC   0(2,R6),=C'//'         NOT JCL\n         BNE   INSRTXIT               GET OUT\n*\n         L     R3,=F'68'              NUMBER OF POSITIONS TO SCAN\n         LR    R2,R6                  ADDRESS CARD IMAGE\n         LA    R2,3(R2)               SKIP //X\n*\nCARDSCAN EQU   *\n         CLC   0(5,R2),=C' JOB '      JOBCARD ?\n         BE    JOBCARD\n*\n         LA    R2,1(R2)               CONTINUE SCAN\n         BCT   R3,CARDSCAN\n*\n         B     INSRTXIT               JOBCARD NOT YET FOUND\n*\nJOBCARD  EQU   *\n         MVC   JOBSLOT,0(R6)          PRINT 'BEFORE' IMAGE\n         PUT   REPORT,DETAIL\n         AP    LINECNT,=P'1'\n         MVC   B4AFTER,B4AFTER-1      CLEAR OUT 'BEFORE' PRINT AREA\n         MVC   PRTBUFFR,IMAGACON      ADDRESS 'AFTER' BUFFER AREA\n         LA    R2,5(R2)               SKIP ' JOB '\n         S     R3,=F'5'               ADJUST BCT REGISTER\n         MVI   QUOTES,C'N'            RESET FLAG\n         CLI   0(R2),X'7D'            BEGINNING QUOTE ?\n         BNE   CARDTEST               NO, ENTER PRIMARY SCAN OF JOBCARD\n         MVI   QUOTES,C'Y'            INDICATE YES\n         B     SCANEND                CHECK NEXT BYTE\n*\nCARDTEST EQU   *\n         CLI   0(R2),X'7D'             QUOTE FOUND ?\n         BNE   NOQUOTE                 NO\n         CLI   QUOTES,C'Y'             YES, BEGINNING OR ENDING ?\n         BE    ENDQUOTE\n         MVI   QUOTES,C'Y'             BEGINNING QUOTE\n         B     SCANEND                 CHECK NEXT BYTE\n*\nENDQUOTE EQU   *\n         MVI   QUOTES,C'N'             ENDING QUOTE\n         B     SCANEND                 CHECK NEXT BYTE\n*\nNOQUOTE  EQU   *\n         CLI   QUOTES,C'Y'             ARE WE WITHIN A QUOTE ?\n         BE    SCANEND                 YES, CHECK NEXT BYTE\n*\n         CLC   0(2,R2),=C', '          IS JOBCARD ALREADY CONTINUED ?\n         BE    CARDCONT                YES, FLAG JOBCARD FOUND\n*\n         CLC   0(2,R2),=C'  '          CAN WE INSERT COMMA ?\n         BE    SPACEFND                YES\n*\nSCANEND  EQU   *\n         LA    R2,1(R2)\n         BCT   R3,CARDTEST\n*\n         MVI   NOGO,C'Y'               CAN'T INSERT COMMA - NO SPACE\n         PUT   REPORT,NOGOMSG          INDICATE THIS\n         AP    LINECNT,=P'1'\n         B     INSRTXIT\n*\nCARDCONT EQU   *\n         L     R4,PRTBUFFR             NEXT AREA IN BUFFER\n         MVC   0(80,R4),0(R6)          LOAD IT\n         LA    R4,80(R4)               UPDATE\n         ST    R4,PRTBUFFR                 POINTER\n*\n         MVI   JOBFND,C'Y'             JOBCARD FOUND BUT CARD CONTINUED\n         BE    INSRTXIT                COMMA WILL HAVE TO WAIT\n*\nSPACEFND EQU   *\n         MVI   0(R2),C','              COMMA INSERTED\n         MVI   COMMA$IN,C'Y'\n*\n         LA    R2,JOBSLOT+72           SEQUENCE NUMBERS\n         L     R3,=F'8'\n*\nSCAN7380 EQU   *\n         CLI   0(R2),X'F0'\n         BL    EXIT7380\n         CLI   0(R2),X'F9'            VALID SEQUENCE NUMBERS ?\n         BH    EXIT7380\n         BCT   R3,SCAN7380\n*\n         MVC   78(2,R6),COPY1+6       UPDATE MODIFICATION NUMBER\n         MVI   NUMBERED,C'Y'          TESTED IN 'NEXTCARD'\n*\nEXIT7380 EQU   *\n         L     R4,PRTBUFFR             NEXT AREA IN BUFFER\n         MVC   0(80,R4),0(R6)          LOAD IT\n         LA    R4,80(R4)               UPDATE\n         ST    R4,PRTBUFFR                 POINTER\n*\n         B     INSRTXIT                WRITE THIS AND WAIT TO INSERT\n*\nFNDEND   EQU   *\n         L     R3,=F'69'               # OF BYTES TO SCAN\n         LR    R2,R6                   ADDRESS CARD IMAGE\n         LA    R2,2(R2)                SKIP //\n         MVC   JOBSLOT,0(R6)           PRINT 'BEFORE' IMAGE\n         PUT   REPORT,DETAIL\n         AP    LINECNT,=P'1'\n*\nFNDLOOP  EQU   *\n         CLI   0(R2),C' '              HAS DATA STARTED YET ?\n         BNE   CARDTEST                YES RETURN TO PRIMARY SCAN\n         LA    R2,1(R2)                TEST NEXT BYTE\n         BCT   R3,FNDLOOP\n*\n         B     INSRTXIT                BLANK CARD\n*\nINSRTMVC MVC   0(0,R11),0(R4)          MVC TO BUFFER VIA 'EX'\n*\nNEXTCARD EQU   *\n         CLI   NUMBERED,C'N'               SEQUENCE NUMBERS ?\n         BE    NONUM\n*\n         MVC   JOBNUM,JOBSLOT+72           LOAD\n         MVC   JOBNUM+6(2),COPY1+6            DUMMY\n         MVI   JOBNUM+5,C'1'                      SEQUENCE\n         MVC   CARDBUFR+72(8),JOBNUM                  NUMBERS\n         MVI   JOBNUM+5,C'2'\n         MVC   CARDBUFR+152(8),JOBNUM\n         MVI   JOBNUM+5,C'3'\n         MVC   CARDBUFR+232(8),JOBNUM\n*\nNONUM    EQU   *\n         LA    R4,CARDBUFR             FIRST CARD TO BE INSERTED\n         L     R3,NUMADDED             NUMBER OF CARDS\n*\nLOOPOINT EQU   *\n         L     R1,EX$AMT               LRECL -1\n         EX    R1,INSRTMVC             MOVE CARD TO BUFFER\n         A     R5,LRECL                UPDATE BUFFER SIZE POINTER\n         A     R11,LRECL               UPDATE BUFFER POINTER\n         A     R4,=F'80'               ADDRESS NEXT CARD\n         C     R5,BLKSIZE              BLOCK FULL\n         BE    WRITEBLK                YES\n*\nLOOPCONT EQU   *\n         BCT   R3,LOOPOINT\n*\n         PUT   REPORT,SPACE\n         AP    LINECNT,=P'1'\n         CLI   NOGO,C'Y'               CAN WE INSERT ?\n         BNE   SHOWCHNG\n         B     JOBDONE\n*\nSHOWCHNG EQU   *\n         MVC   B4AFTER,=C'AFTER '      PRINT\n         MVC   JOBSLOT,OUTIMAGE          'AFTER'\n         PUT   REPORT,DETAIL                 IMAGE\n         AP    LINECNT,=P'1'\n         MVC   B4AFTER,B4AFTER-1       CLEAR OUT 'AFTER'\n*\n         LA    R2,OUTIMAGE             ADDRESS 'AFTER' BUFFER\n*\nAFTRLOOP EQU   *\n         LA    R2,80(R2)\n         C     R2,PRTBUFFR\n         BE    JCLPRT\n         MVC   JOBSLOT,0(R2)          PRINT ORIGINAL\n         PUT   REPORT,DETAIL              AND MODIFIED JCL\n         AP    LINECNT,=P'1'\n         B     AFTRLOOP\n*\nJCLPRT   EQU   *\n         L     R3,NUMADDED\n         LA    R2,CARDBUFR\n*\nPRTADDED EQU   *\n         MVC   JOBSLOT,0(R2)           PRINT INSERTED CARD\n         PUT   REPORT,DETAIL\n         AP    LINECNT,=P'1'\n         LA    R2,80(R2)               ADDRESS NEXT CARD\n         BCT   R3,PRTADDED\n*\nJOBDONE  EQU   *\n         PUT   REPORT,SPACE\n         AP    LINECNT,=P'1'\n         CP    LINECNT,=P'45'\n         BL    MORESPC\n         BAL   R2,HEADRT\n*\nMORESPC  EQU   *\n         MVC   B4AFTER,=C'BEFORE'\n         MVI   COMMA$IN,C'N'           RESET FOR\n         MVI   JOBFND,C'N'                NEXT JOBCARD\n         MVI   NUMBERED,C'N'\n         MVC   CARDBUFR+72(8),=C'        '    CLEAR\n         MVC   CARDBUFR+152(8),=C'        '   SEQUENCE\n         MVC   CARDBUFR+232(8),=C'        '   NUMBERS\n         B     INSRTXIT\n*\nWRITEBLK EQU   *\n         BAL   R2,WRITEOUT             WRITE BUFFER\n         XR    R5,R5                   RESET BUFFER SIZE POINTER\n         B     LOOPCONT\n*\nINSRTXIT EQU   *\n         LM    R2,R4,HOLDREGS\n         BR    R2\n*\n*\n*\nHEADRT   EQU   *\n         PUT   REPORT,FORMTOP\n         AP    PAGECNT,=P'1'\n         MVC   COPY,MASK\n         ED    COPY,PAGECNT\n         MVC   PAGENO,COPY+5\n         PUT   REPORT,HEAD1\n         PUT   REPORT,HEAD2\n         ZAP   LINECNT,=P'5'\n         BR    R2\n*\n         EJECT\n*********************************************************************\n*********************************************************************\n*    THIS AREA IS ADDRESSED BY REGISTER 13\nSAVEAREA DS    18F\n*\nHEAD1    DS    0CL133                   TOP OF FORM IS OBTAINED\n         DC    X'09'                    BY USING AN '8B' CARRIAGE\n         DC    CL9'RUN DATE '           CONTROL WITH LINE OF SPACES\nRUNDATE  DC    CL8'XXXXXXXX'            PRIOR TO THE HEAD1 PUT.\n         DC    35C' '\n         DC    CL27'GEORGIA DEPARTMENT OF LABOR'\n         DC    45C' '\n         DC    CL5'PAGE '\nPAGENO   DC    CL3'NNN'\n*\nHEAD2    DS    0CL133\n         DC    X'19'\n         DC    CL9'PROGRAM: '\n         DC    CL8'SSXTEND'              PROGRAM ID\n         DC    31C' '\n         DC    CL35'    JOB CARD EXTENTION UTILITY     '\n         DC    49C' '\n*\nMEMBERID DS    0CL133\n         DC    X'09'\n         DC    CL8'MEMBER: '\nMEMNAME  DC    CL8'XXXXXXXX'\n         DC    116C' '\n*\nDETAIL   DS    0CL133\n         DC    X'09'\n         DC    18C' '\nB4AFTER  DC    CL6'XXXXXX'\n         DC    3C' '\nJOBSLOT  DC    CL80' '\n         DC    25C' '\n*\nNOGOMSG  DS    0CL133\n         DC    X'09'\n         DC    31C' '\n         DC    CL50'* * *  UNABLE TO INSERT COMMA - MEMBER COPIED BUT '\n         DC    CL18'NOT MODIFIED * * *'\n         DC    32C' '\n*\nOVFLOMSG DS    0CL133\n         DC    X'19'\n         DC    18C' '\n         DC    CL50'* * *  PREFIX TABLE OVERFLOW - AT LEAST ONE PREFIX'\n         DC    CL44' WAS NOT SEARCHED FOR - RERUN REQUIRED * * *'\n         DC    19C' '\n*\nCARDSOV  DS    0CL133\n         DC    X'19'\n         DC    22C' '\n         DC    CL50'* * *  MAXIMUM OF THREE CARD IMAGES EXCEEDED - AN '\n         DC    CL37'ADDITIONAL RUN WILL BE REQUIRED * * *'\n         DC    23C' '\n*\nDUPEMSG  DS    0CL133\n         DC    X'09'\n         DC    41C' '\n         DC    CL50'* * *  MEMBER EXISTED AND HAS BEEN UPDATED * * *  '\n         DC    41C' '\n*\nNAMSG    DS    0CL133\n         DC    X'09'\n         DC    36C' '\n         DC    CL50'* * *  STOW RETURN CODE OF 8 - CONTACT SYSTEM SUPP'\n         DC    CL9'ORT * * *'\n         DC    37C' '\n*\nSPACEMSG DS    0CL133\n         DC    X'09'\n         DC    37C' '\n         DC    CL50'* * *  NO SPACE IN DIRECTORY - PROCESSING TERMINAT'\n         DC    CL8'ED * * *'\n         DC    37C' '\n*\nNOJOBMSG DS    0CL133\n         DC    X'09'\n         DC    34C' '\n         DC    CL50'* * *  JOB CARD NOT IDENTIFIED - MEMBER COPIED UNM'\n         DC    CL13'ODIFIED * * *'\n         DC    35C' '\n*\nSPACE    DS    0CL133\nSPACECC  DC    X'09'\n         DC    132C' '\n*\nFORMTOP  DS    0CL133\n         DC    X'8B'\n         DC    132C' '\n*\nDATECONV EQU   *\n*************************************************************\nOPTION   DS    X         OPTION                             *\nMONTH1G  DS    CL2       *                                  *\nDAY1G    DS    CL2       * GREG DATE 1                      *\nYEAR1G   DS    CL2       *                                  *\n         ORG   MONTH1G                                 I    *\nYEAR1J   DS    CL2       *                             N    *\nDAY1J    DS    CL3       * JULIAN DATE 1               P    *\nJULF1    DS    X         *                             U    *\nMONTH2G  DS    CL2        *                            T    *\nDAY2G    DS    CL2        * GREG DATE 2                     *\nYEAR2G   DS    CL2        *                            D    *\n         ORG   MONTH2G                                 A    *\nYEAR2J   DS    CL2        *                            T    *\nDAY2J    DS    CL3        * JULIAN DATE 2              A    *\nJULF2    DS    X          *                                 *\nDAYSTOSK DS    CL3       NO. DAYS TO SKIP                   *\nDAYTO    DS    CL9       DAY TO SKIP TO                     *\n*************************************************************\nMNTHOUTG DS    CL2       GREG MONTH                    O    *\nDAYOUTG  DS    CL2       GREG DAY                      U    *\nYEAROUTG DS    CL2       GREG YEAR                     T    *\nYEAROUTJ DS    CL2       JULIAN YEAR                   P    *\nDAYOUTJ  DS    CL3       JULIAN DAY                    U    *\nQUARTER  DS    C         QUARTER (1,2,3 OR 4)          T    *\nMNTHNAME DS    CL9       MONTH (JANUARY ETC.)               *\nDAYNAME  DS    CL9       DAY (MONDAY ETC.)             D    *\nLEAPFLAG DS    C         \"Y\"=LEAP, \"N\"=NOT             A    *\nDAYDIFF  DS    CL3                                     T    *\nWEEKNOY  DS    CL2                                     A    *\nWEEKNOQ  DS    CL2                                          *\nERRCODE  DS    C                                            *\n*************************************************************\n*\nPRTDATE  DS    0CL8\nMM1      DC    CL2'MM'\n         DC    C'/'\nDD1      DC    CL2'DD'\n         DC    C'/'\nYY1      DC    CL2'YY'\n*\nMASK     DC    XL8'4020202020202021'\nCOPY     DC    XL8'4020202020202021'\n*\nMASK1    DC    XL8'4020202120202020'\nCOPY1    DC    XL8'4020202120202020'\n*\nCARDIN   DS    80C                INPUT AREA FOR INSERT READS\nPREFXIN  DS    80C                INPUT AREA FOR PREFIX READS\nCARDBUFR DS    240C' '            UP TO 3 CARD IMAGES\nSHORTBLK DC    C'N'               SHORT BLOCK TO BE WRITTEN\nQUOTES   DC    C'N'               DATA WITHIN QUOTES\nNUMBERED DC    C'N'               SEQUENCE NUMBERS\nCOMMA$IN DC    C'N'               COMMA ADDED TO END OF JOBCARD\nJOBFND   DC    C'N'               JOBCARD FOUND BUT COMMA NOT YET ADDED\nNOGO     DC    C'N'               INSERT FAILED\nIMAGACON DC    A(OUTIMAGE)        ADDRESS OF 'AFTER' BUFFER\nMODNO    DS    D                  MODIFICATION NUMBER\nPRTBUFFR DS    F\nHOLDREGS DS    3F\nSAVEREG2 DS    F\nWORK5    DS    F\nBLKSZDCB DS    F                  ADDRESS OF BLKSZ INDICATOR IN DCB\nBLKSIZE  DC    F'0'               ACTUAL OUTPUT BLKSZ\nLRECL    DC    F'0'               LRECL FOR OUTPUT PDS\nOUTBUFFR DS    F                  ADDRESS OF OUTPUT BUFFER\nDWORK    DS    F\nTABLEND  DS    F                  NUMBER OF PREFIXES SELECTED\nBUFADDR  DS    F                  ADDRESS INPUT BUFFER\nEX$AMT   DS    F                  ONE LESS THAN LRECL FOR EX OF MVC\nNUMODIFY DS    F                  NUMBER OF LINES MODIFIED\nNUMADDED DC    F'0'               NUMBER OF LINES INSERTED\nSPFTIME  DS    F                  TIME OF MODIFICATION\nSPFDATE  DS    F                  DATE OF MODIFICATION\nDATALNGH DC    XL4'0000000F'      MASK FOR 'AND' OF LISTTR/CBYTE\nMAXTABLE DC    F'25'              MAXIMUM PREFIX TABLE\nMAXCARDS DC    F'3'               MAXIMUM CARD TABLE\nPREFXTBL DS    50C' '\nPAGECNT  DC    PL4'0'\nLINECNT  DC    PL2'0'\nJOBNUM   DC    CL8'SSXTEND '\n*\nLIST     DS    0CL74\nLISTNAME DC    CL8'$$$$$$$$'\nLISTTR   DC    XL3'00000000'\nCBYTE    DC    X'00'\nUSERDATA DC    XL62'00'\n*\nINLIB    DCB   DDNAME=INLIB,            DCB FOR READING DIRECTORY      X\n               LRECL=256,                                              X\n               BLKSIZE=256,                                            X\n               RECFM=F,                                                X\n               BUFNO=2,                                                X\n               DSORG=PS,                                               X\n               MACRF=GL,                                               X\n               EODAD=ENDJ\n*\nINLIB2   DCB   DDNAME=INLIB,            DCB FOR READING MEMBERS        X\n               BUFNO=1,                                                X\n               DSORG=PO,                                               X\n               MACRF=R,                                                X\n               EODAD=TASKEND\n*\nOUTLIB   DCB   DDNAME=OUTLIB,           DCB FOR OUTPUT PDS             X\n               RECFM=FB,                                               X\n               DSORG=PO,                                               X\n               MACRF=W\n*\nREPORT   DCB   DDNAME=REPORT,           DCB FOR LISTING                X\n               LRECL=133,                                              X\n               BLKSIZE=6118,                                           X\n               RECFM=FBM,                                              X\n               DSORG=PS,                                               X\n               MACRF=PM\n*\nPREFIX   DCB   DDNAME=PREFIX,           DCB FOR SELECTING PREFIXES     X\n               LRECL=80,                                               X\n               BLKSIZE=800,                                            X\n               RECFM=FB,                                               X\n               DSORG=PS,                                               X\n               EODAD=TBLDONE,                                          X\n               MACRF=GM\n*\nINSERT   DCB   DDNAME=INSERT,           DCB FOR INCOMING CARDS         X\n               LRECL=80,                                               X\n               BLKSIZE=800,                                            X\n               RECFM=FB,                                               X\n               DSORG=PS,                                               X\n               EODAD=LASTCARD,                                         X\n               MACRF=GM\n*\n         LTORG\n*\nOUTIMAGE DS    4080C\n*\n         IHADCB DSORG=PO\n         END\n//LKED.SYSLMOD  DD DSN=XXX.LINKLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=X\n//LKED.SYSLIB   DD DSN=XXX.LINKLIB,DISP=SHR\n//LKED.SYSIN    DD *\n    NAME SSXTEND(R)\n//*\n//RUN   EXEC PGM=SSXTEND\n//INLIB  DD DSN=     *** INPUT PDS ***\n//OUTLIB DD DSN=     *** OUTPUT PDS ***\n//REPORT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//INSERT DD DATA,DLM=ZZ\n//     USER=$$$$$$$,PASSWORD=ZZZZZZZ\n//     USER=$$$$$$$,PASSWORD=XXXXXXX\nZZ\n//PREFIX DD *\nAP\nBC\nBH\nBP\nBR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT060/FILE060.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT060", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}