USYNC    TITLE 'SYNCH USER IN SYS1.BRODCAST COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
* TITLE - USYNC                                                       *
*                                                                     *
* AUTHOR      - LARRY ZUCKETT                                         *
*                                                                     *
* DATE        - MAY 2017                                              *
*                                                                     *
* DESCRIPTION - PROCESS SYNCH REQUESTS FOR SYS1.BRODCAST              *
*                                                                     *
* FUNCTION -  THIS COMMAND PROCESSOR WILL CALL THE PARSE SERVICE      *
*             ROUTINE TO SYNTAX CHECK THE USYNC COMMAND OPERANDS      *
*             AND IF VALID ADD OR DELETE USER IN SYS1.BRODCAST.       *
*                                                                     *
*             COMMAND SYNTAX:                                         *
*                                                                     *
*             USYNC   USERID  ADD  |  DEL                             *
*                                                                     *
* OPERATION - PROCESS IS A REENTRANT COMMAND PROCESSOR THAT PERFORMS  *
*             THE FOLLOWING PROCESSING:                               *
*                                                                     *
*    1 - ESTABLISHES ADDRESSABILITY AND SAVES THE CALLER'S REGISTERS  *
*    2 - ISSUES A GETMAIN FOR DYNAMIC STORAGE                         *
*    3 - USES THE PARSE SERVICE ROUTINE (IKJPARS) TO DETERMINE THE    *
*        VALIDITY OF THE COMMAND OPERANDS                             *
*    4 - PROVIDES A VALIDITY CHECKING ROUTINE TO PERFORM ADDITIONAL   *
*        CHECKING OF THE POSITIONAL OPERAND. THIS ROUTINE ONLY        *
*        CHECKS THAT THE LENGTH OF THE USERID IS "7" OR LESS.         *
*    5 - IF AND ADD REQUEST, CALL RACF ICHEINTY SERVICE TO            *
*        DETERMINE IF USERID EXISTS IN RACF                           *
*    6 - CALL THE IKJIFRIF SERVICE TO ADD OR DELETE A USER            *
*        TO SYS1.BRODCAST.                                            *
*    7 - ISSUES A FREEMAIN TO RELEASE THE DYNAMIC STORAGE             *
*    8 - RESTORES THE CALLER'S REGISTERS BEFORE RETURNING             *
*    9 - RETURNS TO THE TMP WITH A RETURN CODE IN REGISTER 15         *
*                                                                     *
***********************************************************************
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*         REGISTERS 0,1     = WORK REGISTERS                          *
*         REGISTERS 2       = ADDRESS OF PPL (PARSE PARAMETER LIST)   *
*         REGISTER  3       = ADDRESS OF CPPL                         *
*         REGISTER  4       = ADDRESS OF SYNTACT CORRECT PDE          *
*         REGISTER  5       = ADDRESS OF ACTION PCE (ADD,DEL)         *
*         REGISTER  6       = ADDRESS OF PPL ANSWER AREA              *
*         REGISTERS 7,8     = WORK REGISTERS                          *
*         REGISTER  9       = ADDRESS OF POSITCHK VALIDATION ROUTINE  *
*         REGISTER  10      = ADDRESS OF ROUTINE WORK AREA            *
*         REGISTER  11      = BASE REGISTER OF THIS ROUTINE           *
*         REGISTER  12      = NOT USED                                *
*         REGISTER  13      = SAVEAREA                                *
*         REGISTERS 14,15   = WORK REGISTERS                          *
*                                                                     *
*                                                                     *
*            MODULE TYPE = TSO COMMAND                                *
*                                                                     *
*                PROCESSOR = ASM                                      *
*                                                                     *
*            PARMLIB REQUIREMENTS: THIS PROGRAM RUNS AUTHORIZED AND   *
*                                  REQUIRES ENTRY IN IKJTSOxx         *
*            AUTHCMD NAMES(USYNC)                                     *
*                                                                     *
*                                                                     *
*                ATTRIBUTES = AC=1, REENTRANT, REUSABLE               *
*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *
*                                                                     *
*             ENTRY POINTS = USYNC    (ONLY ENTRY POINT)              *
*                                                                     *
*                LINKAGE =                                            *
*                                                                     *
*                                                                     *
*             INPUT = REG1 POINTS TO THE CPPL                         *
*                     SUPPLIED FROM THE TSO TERMINAL MONITOR PROGRAM  *
*                 1.  PTR TO COMMON PROCESSOR PARAMETER LIST (CPPL)   *
*                                                                     *
*             OUTPUT = NONE                                           *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*                OUTPUT = NONE                                        *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*                                                                     *
*             EXIT - ERROR = RETURN CODE FROM IKJIFRIF SERVICE        *
*                            PASSED TO THIS ROUTINE                   *
*                OUTPUT = NONE                                        *
*                                                                     *
*                RETURN CODE =                                        *
*                REFER TO z/OS TSO/E Customization SA32-0976-00       *
*                                                                     *
*                                                                     *
*             EXTERNAL REFERENCES =                                   *
*                                                                     *
*                ROUTINES = NONE                                      *
*                                                                     *
*                DATA AREAS = NONE                                    *
*                                                                     *
*                CONTROL BLOCKS = CPPL                                *
*                                 CVT                                 *
*                                 PPL  PARSE PARAMETER LIST           *
*                                 TSVT                                *
*                                 PCE  PARAMETER CONTROL ENTRY        *
*                                 PCL  PARAMETER CONTROL LIST         *
*                                 PDE  PARAMETER DESCRIPTOR ENTRY     *
*                                 PDL  PARAMETER DESCRIPTOR LIST      *
*                                                                     *
*             TABLES = NONE                                           *
*                                                                     *
*             MACROS = WTO, GETMAIN, FREEMAIN, CALLTSSR, PUTLINE      *
*                      IKJPARM, IKJPOSIT, IKJKEYWD, IKJNAME, IKJENDP  *
*                      IKJPPL, IKJCPPL, CVT, IKJTSVT                  *
*                                                                     *
*             CHANGE ACTIVITY =                                       *
*                20JUN18 - MOVE USERID PROPERLY                  .FIX.*
*                22JUN18 - REMOVED POSITCHK - REDUNDANT          .FIX.*
*                25JUN18 - REMOVE L BEFORE IKJRLSA               .FIX.*
*                16NOV18 - ADD MSG FOR ADD/DEL MISSING                *
*                                                                     *
*             MESSAGES =                                              *
*                USYNC COMMAND SUCCESSFUL OR UNSUCCESSFUL.            *
*                                                                     *
*             ABEND CODES = NONE                                      *
*                                                                     *
*
USYNC    CSECT ,
USYNC    AMODE 31                    COMMAND'S ADDRESSING MODE
USYNC    RMODE ANY                   COMMAND'S RESIDENCY  MODE
         USING *,R15  -----------TEMP ADDRESSABILITY-----------
         B     SAVEREGS
         DC    CL8'USYNC  '          PROG ID
         DC    CL8'&SYSDATE'         ASSEMBLY DATE.
         DC    CL8'&SYSTIME'         ASSEMBLY TIME.
         DC    CL8'USERMOD:'         USERMOD
         DC    CL8'SDTSO10 '         ID
         DC    CL8'LZUCKETT'         PROGRAMMER
*
SAVEREGS EQU   *
         STM   R14,R12,12(R13)       SAVE CALLER'S REGISTERS
         LR    R11,R15               ESTABLISH ADDRESSABILITY WITHIN
         DROP  R15
         USING USYNC,R11             THIS CSECT
         LR    R2,R1                 SAVE THE POINTER TO THE CPPL
*                                    AROUND THE GETMAIN
         GETMAIN RU,LV=L_SAVE_AREA   OBTAIN A DYNAMIC WORK AREA
         USING SAVE_AREA,R1          AND ESTABLISH ADDRESSABILITY
         ST    R1,8(,R13)            PUT THE ADDRESS OF PROCESS'S SAVE
*                                    AREA INTO THE CALLER'S SAVE AREA
         ST    R13,4(,R1)            PUT THE ADDRESS OF PROCESS'S SAVE
*                                    AREA INTO ITS OWN SAVE AREA
         LR    R13,R1                LOAD GETMAINED AREA ADDRESS
         DROP  R1                    DON'T USE R1 ANY MORE
         USING SAVE_AREA,R13         POINT TO THE DYNAMIC AREA
         GETMAIN RU,LV=L_WORK_AREA   OBTAIN A DYNAMIC WORK AREA
         USING WORKA,R1              AND ESTABLISH ADDRESSABILITY TO
*                                    THE DYNAMIC WORK AREA
         STM   R0,R1,WORK_AREA_GM_LENGTH  SAVE LENGTH AND ADDR OF
*                                    DYNAMIC AREA
         LR    R10,R1                GET READY TO USE R10 AS THE
         DROP  R1
         USING WORKA,R10             DATA AREA SEGMENT BASE REGISTER
         ST    R2,CPPL_PTR           SAVE THE POINTER TO THE CPPL
***********************************************************************
*                                                                     *
*    MAINLINE PROCESSING                                              *
*                                                                     *
***********************************************************************
*
         XC    RETCODE,RETCODE      INITIALIZE THE RETURN CODE
         GETMAIN RU,LV=L_PPL        OBTAIN A DYNAMIC PPL WORK AREA
         STM   R0,R1,PPL_LENGTH     SAVE LENGTH AND ADDR OF DYNAMIC PPL
         GETMAIN RU,LV=L_ANSWER     OBTAIN A DYNAMIC PPL ANSWER AREA
         STM   R0,R1,ANSWER_LENGTH  SAVE LENGTH AND ADDR OF DYNAMIC PPL
*                                   ANSWER AREA
         L    R2,PPL_PTR            GET THE ADDRESS OF THE PPL
         USING PPL,R2               AND ESTABLISH ADDRESSABILITY
         L    R1,CPPL_PTR           GET ADDRESS OF CPPL
         USING CPPL,R1              AND ESTABLISH ADDRESSABILITY
         MVC  PPLUPT,CPPLUPT        PUT IN THE UPT ADDRESS FROM CPPL
         MVC  PPLECT,CPPLECT        PUT IN THE ECT ADDRESS FROM CPPL
         MVC  PPLCBUF,CPPLCBUF      PUT IN THE COMMAND BUFFER ADDRESS
*                                   FROM THE CPPL
         L    R1,WORK_AREA_GM_PTR   GET THE ADDRESS OF THE COMMAND
*                                   PROCESSOR'S DYNAMIC WORK AREA TO
         ST   R1,PPLUWA             BE PASSED TO THE VALIDITY CHECK
*                                   ROUTINE
         DROP R1
         L    R1,ANSWER_PTR         GET THE ADDRESS OF THE PARSE
*                                   ANSWER AREA AND
         ST   R1,PPLANS             STORE IT IN THE PPL
         XC   ECB,ECB               CLEAR COMMAND PROCESSOR'S
*                                   EVENT CONTROL BLOCK (ECB)
         LA   R1,ECB                GET THE ADDRESS OF THE COMMAND
*                                   PROCESSOR'S ECB AND
         ST   R1,PPLECB             PUT IT IN THE PPL
         L    R1,PCLADCON           GET THE ADDRESS OF THE PCL AND
         ST   R1,PPLPCL             PUT IT IN THE PPL FOR PARSE
         CALLTSSR EP=IKJPARS,MF=(E,PPL)   INVOKE PARSE
         LTR  R15,R15               IF PARSE RETURN CODE IS ZERO
         BZ   PROCESS               PERFORM PROCESSING FOR THE COMMAND
         MVC  RETCODE(4),EIGHT      SET CP RETURN CODE TO 8
         B    CLEANUP               PREPARE TO RETURN TO THE TMP
*
PROCESS  DS 0H
*         .
*         .
*         .
*
*  CODE TO PERFORM THE FUNCTION OF THE COMMAND PROCESSOR GOES HERE.
*  AFTER CALLING THE PARSE SERVICE ROUTINE TO VALIDATE THE COMMAND
*  OPERANDS, USE THE PDL RETURNED BY PARSE TO DETERMINE WHICH
*  OPERANDS THE USER ENTERED.  THEN PERFORM THE FUNCTION REQUESTED
*  BY THE USER.
*
*        WTO 'PERFORMING CHECK'
         L    R6,PPLANS
         L    R6,0(,R6)
         USING PRDSECT,R6
         L    R3,CPPL_PTR           GET ADDRESS OF CPPL
         USING CPPL,R3              AND ESTABLISH ADDRESSABILITY
         LA    R4,USRPCE            POINT TO THE USERID PDE
         USING USERID_PDE,R4        AND ESTABLISH ADDRESSABILITY TO IT
         L     R7,USERID_PTR        LOAD ADDR OF USERID
         LA    R5,ACTPCE
         USING KEYWD_PDE,R5         ADDR KEYWORD 1 = ADD, 2 = DEL
         LH    R5,KEYWD_NUM         LOAD THE ACTION
         DROP  R5
*
*        MVC   WTOLR1(WTOLR1CL),WTOLR1C SEED WTO MESSAGE
*        MVC   WTOLR2(WTOLR2CL),WTOLR2C SEED WTO MESSAGE
*        XC    DOUBLE(L'DOUBLE),DOUBLE
*        CVD   R5,DOUBLE
*        UNPK  ACTIONCD(4),DOUBLE+6(2)
*        OI    ACTIONCD+3,X'F0'
*        MVC   WTOLR1+18(4),ACTIONCD
*        WTO   MF=(E,WTOLR1)
*        LH    R1,USERID_LENGTH_1
*        BCTR  R1,0
*        EX    R1,MOVEIT
*        B     WRITIT
*MOVEIT   MVC   WTOLR2+18(*-*),0(R7)
*WRITIT   WTO   MF=(E,WTOLR2)
*
         XC    NEXT(L'NEXT),NEXT    ONLY 1 ENTRY BEING REQUESTED
*                                   OUR MAPPING OF THE PDE
         MVC   USERID,=CL8' '       PAD USERID WITH BLANKS        .FIX.
         LH    R1,USERID_LENGTH_1                                 .FIX.
         BCTR  R1,0                                               .FIX.
         EX    R1,MOVEUS                                          .FIX.
*        MVC   USERID,0(R7)         MOVE IN USERID FOR ADD OR DEL .FIX.
         CH    R5,=H'1'             WAS "ADD" ENTERED ON COMMAND
         BE    ADDUSER              GO ADD USER TO SYS1.BRODCAST
         CH    R5,=H'2'             WAS "DEL" ENTERED ON COMMAND
         BE    DELUSER              GO DELETE USER FROM BRODCAST
*
* PUT OUT MESSAGE IF "ADD" OR "DEL" IS NOT SPECIFIED AND END COMMAND
*
         L     R7,CPPLUPT
         L     R8,CPPLECT
         MVC PUTBLOK(PUTLINEL),PUTLINE
         XC   ECB,ECB               CLEAR COMMAND PROCESSOR'S
         XC   IOPLADS,IOPLADS       CLEAR IOPL
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTL007,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTL008,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         B     CLEANUP              RETURN IF NOT ADD OR DEL
MOVEUS   MVC   USERID(*-*),0(R7)                                  .FIX.
*
*
*
ADDUSER  EQU *
*        WTO   'PERFORMING ADD'
         MVC   INTYWORK(INTYLSTL),INTYLST     SEED INTY
         LA    15,INTYWAL    LENGTH OF WORK AREA.
         ST    15,INTYWA     INITIALIZE WORK AREA.
         XC    WR,WR         CLEAR RESERVED AREA.
         MVC   INTY,USERID_LENGTH_1+1
         MVC   INTYUSER,0(R7)
*
*        MVC   WTOLR3(WTOLR3CL),WTOLR3C SEED WTO MESSAGE
*        XC    DOUBLE(L'DOUBLE),DOUBLE
*        LH    R1,USERID_LENGTH_1
*        CVD   R1,DOUBLE
*        UNPK  ACTIONCD(4),DOUBLE+6(2)
*        OI    ACTIONCD+3,X'F0'
*        MVC   WTOLR3+18(4),ACTIONCD
*        WTO   MF=(E,WTOLR3)
*
*  PERFORM RACF LOOKUP ON USER TO BE ADDED, IF NOT DEFINED, RETURN
*  AND WRITE OUT ERROR MESSAGE
*
         ICHEINTY LOCATE,TYPE='USR',ENTRY=INTY,WKAREA=INTYWA,          X
               MF=(E,INTYWORK)
         LTR   R15,R15            R15=0 IF USER DEFINED TO RACF
         BNZ   NOTDEFD
*
*  CALL SYS1.BRODCAST UPDATE INTERFACE
*
         IKJIFRIF ADD=USRADR,PSCB=CPPLPSCB,ECT=CPPLECT,                X
               UPT=CPPLUPT,MF=(E,RACFPARM)
         LTR   R15,R15            WAS ADD SUCCESSFUL?
         BZ    SUCCADD            YES, WRITE OUT SUCCESS MESSAGE
         ST    R15,RETCODE
         CVD   R15,DOUBLE
         UNPK  RETURNC(2),DOUBLE+6(2)
         OI    RETURNC+1,X'F0'
         L     R7,CPPLUPT
         L     R8,CPPLECT
         MVC   PUTBLOK(PUTLINEL),PUTLINE
         XC    ECB,ECB               CLEAR COMMAND PROCESSOR'S
         XC    IOPLADS,IOPLADS       CLEAR IOPL
         MVC   PUTE003(PUTL3L),PUTL003      SEED ERROR MESSAGE
         MVC   PUTE3+20(2),RETURNC            PUT IN RC
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTE003,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         MVC  RETCODE(4),EIGHT      SET CP RETURN CODE TO 8
         B   CLEANUP
*
*  PUT OUT SUCCESS ADD MESSAGE
*
SUCCADD  EQU *
         L     R7,CPPLUPT
         L     R8,CPPLECT
         MVC PUTBLOK(PUTLINEL),PUTLINE
         XC   ECB,ECB               CLEAR COMMAND PROCESSOR'S
         XC   IOPLADS,IOPLADS       CLEAR IOPL
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTL001,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         B   CLEANUP
*
*  PUT OUT USERID TOO LONG MESSAGE
*
TOOLONG  EQU *
         L     R7,CPPLUPT
         L     R8,CPPLECT
         MVC PUTBLOK(PUTLINEL),PUTLINE
         XC   ECB,ECB               CLEAR COMMAND PROCESSOR'S
         XC   IOPLADS,IOPLADS       CLEAR IOPL
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTL006,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         B   CLEANUP
*
*  PUT OUT USERID NOT DEFINED IN RACF. SHOULD NOT ADD INTO
*  SYS1.BRODCAST IF USER IS NOT DEFINED.
*
NOTDEFD  EQU *
         CVD   R15,DOUBLE
         UNPK  RETURNC(2),DOUBLE+6(2)
         OI    RETURNC+1,X'F0'
         L     R7,CPPLUPT
         L     R8,CPPLECT
         MVC PUTBLOK(PUTLINEL),PUTLINE
         XC   ECB,ECB               CLEAR COMMAND PROCESSOR'S
         XC   IOPLADS,IOPLADS       CLEAR IOPL
         MVC   PUTE005(PUTL5L),PUTL005      SEED ERROR MESSAGE
         MVC   PUTE5+48(2),RETURNC            PUT IN RC
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTE005,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         MVC  RETCODE(4),EIGHT      SET CP RETURN CODE TO 8
         B   CLEANUP
*
*  PUT OUT USERID DELETE SUCCESSFUL MESSAGE
*
DELUSER  EQU *
*        WTO 'PERFORMING DEL'
         IKJIFRIF DEL=USRADR,PSCB=CPPLPSCB,ECT=CPPLECT,                X
               UPT=CPPLUPT,MF=(E,RACFPARM)
         LTR   R15,R15
         BZ    SUCCDEL
         CVD   R15,DOUBLE
         UNPK  RETURNC(2),DOUBLE+6(2)
         OI    RETURNC+1,X'F0'
         L     R7,CPPLUPT
         L     R8,CPPLECT
         MVC   PUTBLOK(PUTLINEL),PUTLINE
         XC    ECB,ECB               CLEAR COMMAND PROCESSOR'S
         XC    IOPLADS,IOPLADS       CLEAR IOPL
         MVC   PUTE004(PUTL4L),PUTL004      SEED ERROR MESSAGE
         MVC   PUTE4+28(2),RETURNC            PUT IN RC
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTE004,TERM,SINGLE,DATA),MF=(E,IOPLADS)
         MVC  RETCODE(4),EIGHT      SET CP RETURN CODE TO 8
         B   CLEANUP
*
*  PUT OUT SUCCESS DELETE MESSAGE
*
SUCCDEL  EQU *
         L     R7,CPPLUPT
         L     R8,CPPLECT
         MVC   PUTBLOK(PUTLINEL),PUTLINE
         XC    ECB,ECB            CLEAR COMMAND PROCESSOR'S
         XC    IOPLADS,IOPLADS    CLEAR IOPL
         PUTLINE PARM=PUTBLOK,UPT=(R7),ECT=(R8),ECB=ECB,               X
               OUTPUT=(PUTL002,TERM,SINGLE,DATA),MF=(E,IOPLADS)
*
*
***********************************************************************
*                                                                     *
*  CLEANUP AND TERMINATION PROCESSING                                 *
*                                                                     *
***********************************************************************
*
CLEANUP  DS   0H
*        WTO 'PERFORMING CLEANUP'
         L    R1,PPL_PTR             POINT TO PPL IN DYNAMIC WORK AREA
         FREEMAIN RU,LV=L_PPL,A=(1)  FREE THE STORAGE FOR THE PPL
         L    R1,ANSWER_PTR          POINT TO THE ANSWER PLACE
*        L    R1,0(0,R1)             POINT TO THE PDL
         IKJRLSA (R1)                FREE STORAGE THAT PARSE ALLOCATED
*                                    FOR THE PDL
         L    R1,ANSWER_PTR          POINT TO THE ANSWER PLACE
         FREEMAIN RU,LV=L_ANSWER,A=(1) FREE THE STORAGE FOR THE
*                                    ANSWER WORD
         L     R5,RETCODE            SAVE RETURN CODE AROUND FREEMAIN
         L     R1,WORK_AREA_GM_PTR   POINT TO MODULE WORK AREA
         FREEMAIN RU,LV=L_WORK_AREA,A=(1)
*                                    FREE THE MODULE WORKAREA
         LR    R1,R13                LOAD PROCESS'S SAVE AREA ADDRESS
         L     R13,4(,R1)            CHAIN TO PREVIOUS SAVE AREA
         DROP  R13
  FREEMAIN RU,LV=L_SAVE_AREA,A=(1)   FREE THE MODULE SAVEAREA
         L     R14,12(,R13)          HERE'S OUR RETURN ADDRESS
         LR    R15,R5                HERE'S THE RETURN CODE
         LM    R0,R12,20(R13)        RESTORE REGS 0-12
         BSM   0,R14                 RETURN TO the TMP

***********************************************************************
* POSITCHK - IKJPOSIT VALIDITY CHECKING ROUTINE                       *
*                                                                     *
* CHECK THE USERID HAS A LENGTH OF 7 OR LESS. IF >7 THE VALIDITY      *
* CHECKING ROUTINE RETURNS A CODE OF 4 TO PARSE.  THIS RETURN         *
* CODE INDICATES TO PARSE THAT IT SHOULD ISSUE A MESSAGE TO THE       *
* TERMINAL AND PROMPT THE USER TO RE-ENTER THE USERID NAME.           *
*                                                                     *
***********************************************************************
         DROP  R10                  WE WILL REUSE REGISTER 10
POSITCHK DS    0D
         STM   R14,R12,12(R13)      SAVE PARSE'S REGISTERS
         LR    R9,R15
         USING POSITCHK,R9          ESTABLISH ADDRESSABILITY
         LR    R2,R1                SAVE THE VALIDITY CHECK PARAMETER
*                                   LIST PARSE PASSED TO US
*        WTO 'DOING POSITCHK'
         GETMAIN RU,LV=L_SAVE_AREA  OBTAIN A DYNAMIC SAVE AREA FOR
*                                   THE POSITCHK ROUTINE
         USING SAVEAREA,R1          AND ESTABLISH ADDRESSABILITY
         ST    R1,8(,R13)           PUT THE ADDRESS OF THIS ROUTINE'S
*                                   SAVE AREA INTO PARSE'S SAVE AREA
         ST    R13,4(,R1)           PUT THE ADDRESS OF THIS ROUTINE'S
*                                   SAVE AREA INTO ITS OWN SAVE AREA
*                                   FOR CALLING
         LR    R13,R1               LOAD ADDRESS OF GETMAINED AREA
         USING SAVEAREA,R13         AND ESTABLISH ADDRESSABILITY
         L     R10,4(,R2)           POINT TO THE COMMAND PROCESSOR'S
*                                   ORIGINAL DYNAMIC WORK AREA
         USING WORKA,R10            DATA AREA SEGMENT BASE REGISTER
*                                   SAVE THE ADDRESS OF THE VALIDITY
*                                   CHECK PARAMETER LIST
         LM    R1,R3,0(R2)          SAVE IT IN WORKAREA
         STM   R1,R3,VALIDITY_CHECK_PARAMETER_LIST
*                                   SAVE CONTENTS OF PARAMETER LIST
         XC    POSITCHK_RETCODE,POSITCHK_RETCODE
*                                   MAKE SURE WE START WITH A ZERO
*                                   RETURN CODE
         L     R4,PDEADR            PTR RELOAD ADDR OF PDE
         USING USERID_PDE,R4        AND ESTABLISH ADDRESSABILITY TO
         LH    R15,USERID_LENGTH_1  LOAD LENGTH OF USER1
*                                   OUR MAPPING OF THE PDE
         CH    R15,=H'8'            IS THE LENGTH 7 OR LESS ?
         BL    USERIDOK             NO - USERID LENGTH IS OK
*        WTO 'POSITCHK LENGTH BAS'
         L     R5,FOUR              USERID IS INVALID.  SET RC=4
         ST    R5,POSITCHK_RETCODE  SAVE THE RETURN CODE
USERIDOK LR    R1,R13               LOAD ROUTINE'S SAVE AREA ADDRESS
         L     R13,4(,R1)           CHAIN TO PREVIOUS SAVE AREA
         L     R5,POSITCHK_RETCODE  LOAD THE RETURN CODE
         FREEMAIN RU,LV=L_SAVE_AREA,A=(1)
*                                   FREE THE MODULE WORKAREA
         L     R14,12(,R13)         HERE'S OUR RETURN ADDRESS
         LR    R15,R5               HERE'S THE RETURN CODE
         LM    R0,R12,20(R13)       RESTORE REGS 0-12
         BSM   0,R14                RETURN TO PARSE
         DROP  R9
         DROP  R10
         DROP  R13
*
***********************************************************************
*                                                                     *
* DECLARES FOR CONSTANTS                                              *
*                                                                     *
***********************************************************************
*
PCLADCON      DC   A(PCLDEFS)        ADDRESS OF PCL
FOUR          DC   F'4'              USED TO SET/TEST RETURN CODE
EIGHT         DC   F'8'              USED TO SET/TEST RETURN CODE
TWELVE        DC   F'12'             USED TO SET/TEST RETURN CODE
ERROR         DC   F'12'             USED TO SET/TEST RETURN CODE
WTOLR1C  WTO 'ACTPCE   ===> XXXX',MF=L
WTOLR1CL EQU  *-WTOLR1C
WTOLR2C  WTO 'USERID   ===>         <',MF=L
WTOLR2CL EQU  *-WTOLR2C
WTOLR3C  WTO 'USERLEN  ===> XXXX',MF=L
WTOLR3CL EQU  *-WTOLR3C
         DS   0F
INTYLST  ICHEINTY LOCATE,MF=L
INTYLSTL EQU *-INTYLST
         DS   0F
PUTLINE PUTLINE    MF=L               LIST FORM OF THE PUTLINE MACRO
*                                     INSTRUCTION.
PUTLINEL EQU *-PUTLINE
         DS    0F
PUTL001  DC    AL2(PUTL1L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL1    DC    C'USYNC ADD USER SUCCESSFUL TO SYS1.BRODCAST'
PUTL1L   EQU   *-PUTL001
         DS    0F
PUTL002  DC    AL2(PUTL2L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL2    DC    C'USYNC DELETE USER SUCCESSFUL FROM SYS1.BRODCAST'
PUTL2L   EQU   *-PUTL002
         DS    0F
PUTL003  DC    AL2(PUTL3L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL3    DC    C'USYNC ADD FAILED RC=XX TO SYS1.BRODCAST'
PUTL3L   EQU   *-PUTL003
         DS    0F
PUTL004  DC    AL2(PUTL4L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL4    DC    C'USYNC DELETE USER FAILED RC=XX FROM SYS1.BRODCAST'
PUTL4L   EQU   *-PUTL004
         DS    0F
PUTL005  DC    AL2(PUTL5L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL5    DC    C'USYNC ADD FAILED, USERID NOT DEFINED TO RACF RC=XX'
PUTL5L   EQU   *-PUTL005
         DS    0F
PUTL006  DC    AL2(PUTL6L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL6    DC    C'USYNC USERID LENGTH > 7, REQUEST CANCELLED'
PUTL6L   EQU   *-PUTL006
PUTL007  DC    AL2(PUTL7L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL7    DC    C'MUST SPECIFY "ADD" OR "DEL" AFTER USERID'
PUTL7L   EQU   *-PUTL007
PUTL008  DC    AL2(PUTL8L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTL8    DC    C'COMMAND CANCELLED, NO ACTION WAS PERFORMED'
PUTL8L   EQU   *-PUTL008
***********************************************************************
*                                                                     *
* PARSE MACROS USED TO DESCRIBE THE COMMAND OPERANDS                  *
*                                                                     *
***********************************************************************
*
PCLSTART DS       0H
PCLDEFS  IKJPARM  DSECT=PRDSECT
USRPCE   IKJPOSIT USERID,                                              +
               PROMPT='ENTER VALID RACF USERID TO PROCESS.             +
               ENTER ''?'' FOR HELP',                                  +
               HELP=('THIS MUST BE A VALID RACF USERID TO ADD OR DELETE+
                IN SYS1.BRODCAST.')
*              VALIDCK=POSITCHK    REMOVED POSITCHK -REDUNDANT LMZ
ACTPCE   IKJKEYWD
         IKJNAME  'ADD'
         IKJNAME  'DEL'
         IKJENDP
LPCL     EQU   *-PCLSTART            LENGTH OF THE PCL
*
***********************************************************************
*                                                                     *
* DECLARES FOR DYNAMIC VARIABLES                                      *
*                                                                     *
***********************************************************************
*
SAVE_AREA                DSECT
SAVEAREA                 DS  18F
L_SAVE_AREA              EQU *-SAVEAREA
*
WORK_AREA                DSECT
WORKA                    DS  0F      START OF DYNAMIC WORK AREA
WORK_AREA_GM_LENGTH      DS  F       LENGTH OF WORKAREA
WORK_AREA_GM_PTR         DS  F       ADDRESS OF WORKAREA
PPL_LENGTH               DS  F       LENGTH OF PPL
PPL_PTR                  DS  F       ADDRESS OF PPL
ANSWER_LENGTH            DS  F       LENGTH OF PPL ANSWER AREA
ANSWER_PTR               DS  F       ADDRESS OF PPL ANSWER AREA
CPPL_PTR                 DS  F       ADDRESS OF THE CPPL FROM TMP
RETCODE                  DS  F       THE RETURN CODE
PARSE_RETCODE            DS  F       THE RETURN CODE FROM PARSE
POSITCHK_RETCODE         DS  F       THE RETURN CODE FROM THE POSITCHK
*                                    VALIDATION EXIT
ECB                      DS  F       CP'S EVENT CONTROL BLOCK
VALIDITY_CHECK_PARAMETER_LIST EQU *  POINTER TO EACH PARAMETER LIST
PDEADR                   DS  F       ADDRESS OF SYNTACT CORRECT PDE
USERWORD                 DS  F       ADDRESS OF USER WORKAREA
VALMSG                   DS  F       ADDRESS OF USER MSG WHEN FAILED
*                                    PARAMETER LIST
RACFPARM       IKJIFRIF MF=L    * define storage for the parameter list
DOUBLE     DS    D                   DOUBLE WORD WORK AREA
ACTIONCD   DS    CL4
RETURNC    DS    CL2
WTOLR1     WTO 'ACTPCE   ===> XXXX',MF=L
WTOLR2     WTO 'USERID   ===>         <',MF=L
WTOLR3     WTO 'USERLEN  ===> XXXX',MF=L
*                                    PARAMETER LIST
         DS    0F            ALIGNMENT TO WORD BOUNDARY
USRADR   DS    0CL12         NAME FIELD AS SPECIFIED BELOW
NEXT     DS    F             ZERO, IF ONLY ONE ENTRY TO BE ADDED
USERID   DS    CL8           NEW  USER BRODCAST ENTRY
*                            INTY PARAMETER LIST
INTY     DS    AL1           LENGTH OF USERID (1 TO 8)
INTYUSER DS    CL8           USERID
*                            INTY WORK AREA
INTYWA   DS    0F
         DS    F             LENGTH OF WORK AREA.
WR       DS    CL24          RESERVED.
         DS    F
INTYWAL  EQU   *-INTYWA      LENGTH OF ICHINTY WORK AREA
         DS    0F            ALIGNMENT TO WORD BOUNDARY
INTYWORK ICHEINTY LOCATE,TYPE='USR',ENTRY=INTY,WKAREA=INTYWA,          X
               MF=L
IOPLADS  DS    4F'0'
PUTBLOK  PUTLINE    MF=L              LIST FORM OF THE PUTLINE MACRO
*                                     INSTRUCTION.
         DS    0F
PUTE003  DC    AL2(PUTE3L)             LENGTH OF THE MSG + HEADER.
         DC    H'0'                    RESERVED.
PUTE3    DC    C'USYNC ADD FAILED RC=XX TO SYS1.BRODCAST'
PUTE3L   EQU   *-PUTE003
         DS    0F
PUTE004  DC    AL2(PUTE4L)            LENGTH OF THE LINE + HEADER.
         DC    H'0'                   RESERVED.
PUTE4    DC    C'USYNC DELETE USER FAILED RC=XX FROM SYS1.BRODCAST'
PUTE4L   EQU   *-PUTE004
         DS    0F
PUTE005  DC    AL2(PUTE5L)            LENGTH OF THE LINE + HEADER.
         DC    H'0'                   RESERVED.
PUTE5    DC    C'USYNC ADD FAILED, USERID NOT DEFINED TO RACF RC=XX'
PUTE5L   EQU   *-PUTE005
L_WORK_AREA              EQU *-WORKA
***********************************************************************
*                                                                     *
*  MAPPING OF THE PDE BUILT BY PARSE TO DESCRIBE A USERID             *
*  OPERAND.                                                           *
*                                                                     *
***********************************************************************
*
USERID_MAP DSECT                     PDE MAPPING FOR THE FOR USERID
*
USERID_PDE               EQU *
USERID_PTR               DS  F       POINTER TO THE USERID
USERID_LENGTH_1          DS  H       LENGTH OF THE USERID ENTERED
USERID_FLAGS1            DS  CL1     FLAGS BYTE
*
*           0... .... THE USERID IS NOT PRESENT
*           1... .... THE USERID IS PRESENT
*           .XXX XXXX RESERVED BITS.
*
                         DS  CL1     RESERVED
PASSWORD_PTR             DS  F       POINTER TO THE PASSWORD
PASSWORD_LENGTH          DS  H       LENGTH OF THE PASSWORD
USERID_FLAGS2            DS  CL1     FLAGS BYTE
*
*           0... .... THE PASSWORD IS NOT PRESENT
*           1... .... THE PASSWORD IS PRESENT
*
                         DS  CL1     RESERVED
L_USERID_PDE             EQU *-USERID_PTR
*
***********************************************************************
*                                                                     *
*  MAPPING OF THE PDE BUILT BY PARSE TO DESCRIBE THE KEYWORD OPERAND  *
*                                                                     *
***********************************************************************
*
KEYWD_PDE                DSECT
KEYWD_NUM                DS  H       CONTAINS THE NUMBER OF THE IKJNAME
*                                    MACRO INSTRUCTION THAT CORRESPONDS
*                                    TO THE OPERAND ENTERED/DEFAULTED
*
L_KEYWD_PDE              EQU *-KEYWD_PDE
*
         IKJPPL                 PARSE PARAMETER LIST
L_PPL    EQU   *-PPL
*
         IKJCPPL                COMMAND PROCESSOR PARAMETER LIST
L_CPPL   EQU  *-CPPL
*
ANSWER   DSECT
         DS    F                PARSE ANSWER PLACE.  PARSE PLACES A
*                               POINTER TO THE PDL HERE
L_ANSWER EQU *-ANSWER
*
         CVT   DSECT=YES        CVT MAPPING NEEDED FOR CALLTSSR MACRO
         IKJTSVT                TSVT MAPPING REQUIRED IKJIFRIF MACRO
*
***********************************************************************
*                                                                     *
*   EQUATES                                                           *
*                                                                     *
***********************************************************************
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11                      BASE REGISTER
R12      EQU   12
R13      EQU   13                      DATA REGISTER
R14      EQU   14                      RETURN ADDRESS
R15      EQU   15                      RETURN CODE
         END   USYNC
