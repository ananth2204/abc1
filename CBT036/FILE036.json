{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011115000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE036.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE036.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x02'", "DS1TRBAL": "b'\\xcaF'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00L\\x00\\x05\\x00L\\x00\\r\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$TITLE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x08?\\x01\\x00)\\x9f\\x111\\x00\"\\x00\"\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-03-24T00:00:00", "modifydate": "2000-10-25T11:31:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "WSBG"}, "text": "           BOB WEINSTEIN'S FIXPDS PROGRAM USING ISPF\n\n\n    THIS FIXPDS PROGRAM RESTORES DELETED MEMBERS OF A PDS WITH A\nBACKWARD SEARCH, STARTING FROM THE END OF THE DATASET AND BROWSING\nEACH MEMBER (DELETED OR NOT) WITH ISPF BROWSE.  AFTER ENDING EACH\nBROWSE, YOU HAVE AN OPPORTUNITY TO STOW A NAME IN THE DIRECTORY FOR\nTHAT MEMBER.  THE PROGRAM PROCEEDS BACKWARDS, MEMBER BY MEMBER, UNTIL\nYOU EXIT, OR UNTIL YOU REACH THE BEGINNING OF THE LIBRARY.\n\n    TWO FEATURES DISTINGUISH THIS PROGRAM FROM OTHERS OF THIS TYPE.\nONE, THE MEMBER SEARCH GOES BACKWARDS, STARTING FROM THE END OF THE\nDATASET AND GOING BACK, ONE MEMBER AT A TIME.  THIS ALLOWS YOU TO\nLOOK AT THE MOST RECENT ACTIVITY FIRST.  TWO, EACH MEMBER IS ISPF\nBROWSED.  IT CAN BE EXAMINED IN ITS ENTIRETY, AND IN DETAIL, BEFORE\nYOU DECIDE WHETHER TO STOW A DIRECTORY ENTRY FOR IT OR NOT.\n\n    IF YOU DO STOW A DIRECTORY ENTRY, IT DOESN'T MATTER IF ONE ALREADY\nEXISTS FOR THAT MEMBER.  THE NEW ONE IS CREATED ALSO.  IF AN OLD ENTRY\nWAS THERE TOO, UNDER A DIFFERENT NAME, AN \"APPARENT ALIAS\" IS CREATED.\nUSING THE \"PDS\" PROGRAM (IN CBT TAPE FILE 182), ALL THE APPARENT\nALIASES CREATED CAN BE FLAGGED IN A JIFFY, USING THE \"VERIFY\" SUBCOMMAND\nOF PDS.\n\n    THE PROGRAM WAS WRITTEN BY BOB WEINSTEIN, WHO IN MY BOOK IS A\nCERTIFIED GENIUS.  HE WORKS AT AN INSTALLATION IN NEW YORK WHOSE NAME\nHE DIDN'T WANT TO MENTION ON THIS FILE.  I'VE BEEN USING THIS PROGRAM\nFOR SEVERAL YEARS, AND I RECEIVED HIS PERMISSION TO SUBMIT IT FOR\nPUBLIC USE.  YOU CAN DIRECT QUESTIONS TO:\n\n      SAM GOLOB, P.O. BOX 906, TALLMAN, N.Y. 10982-0906\n                       SBGOLOB@ATTGLOBAL.NET OR SBGOLOB@AOL.COM\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x87\\x12_\\x01\\x00)\\x9f\\x113\\x005\\x005\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "2000-10-25T11:33:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "WSBG"}, "text": "            * * *     FIXPDS UTILITY FOR ISPF      * * *\n\n\n  THIS UTILITY BY BOB WEINSTEIN RESURRECTS DELETED MEMBERS OF A\nPDS, BUT IT DOES SO WITHOUT USING THE DIRECTORY (UNLIKE OTHER SUCH\nUTILITIES, FOR EXAMPLE PDSGAS FROM CBT TAPE FILE 316, OR THE\nRESTORE OPERAND OF THE PDS PROGRAM (FILE 182)).\n\n  I HAVE USED IT TO RESCUE DATASETS WHOSE DIRECTORY HAS BEEN CREAMED.\nINSTRUCTIONS FOR DOING THAT ARE IN MEMBER $CREAMED.\n\n  THIS PROGRAM STOWS NEW DIRECTORY ENTRIES FOR PHYSICAL FILES IN A\nDATASET WHICH WOULD LOOK LIKE A PDS MEMBER.  IT LOCATES THESE FILES\nWITHOUT BENEFIT OF A PREVIOUS GOOD DIRECTORY.  ALL IT NEEDS IS A\nBLANK DIRECTORY.  SEE MEMBER $CREAMED FOR INSTRUCTIONS TO OBTAIN\nA BLANK DIRECTORY.\n\n  THE PROGRAM RUNS UNDER AN ISPF MENU, AND WHEN IT IS INVOKED, IT\nFEELS THE EXTENTS OF THE PDS FOR THE LAST PHYSICAL EOF MARKER.  IT\nTHEN STEPS BACKWARD AND DOES AN ISPF BROWSE OF THE LAST PHYSICAL\nMEMBER.  IF YOU WANT TO STOW A DIRECTORY ENTRY POINTING TO THIS\nMEMBER, JUST EXIT FROM THE BROWSE AND A PANEL PROMPTS YOU TO ENTER\nTHE NAME YOU WANT TO STOW (ADVICE - DON'T ENTER MORE THAN 6\nCHARACTERS).  IF YOU ENTER A NAME, A DIRECTORY ENTRY IS CREATED WHICH\nPOINTS TO THE MEMBER LAST BROWSED.  IF YOU LEAVE THE FIELD BLANK, THE\nPROGRAM BACKS UP TO THE NEXT-TO-LAST MEMBER AND REPEATS THE PROCESS\nWITHOUT STOWING A NAME.  IN ANY CASE (EVEN AFTER STOWING A NEW NAME)\nTHE PROGRAM BACKS UP AND BROWSES THE NEXT-TO-LAST PHYSICAL MEMBER.\nTO EXIT THE PROGRAM, JUST \"END\" TWICE.\n\n  I USED THIS UTILITY WHEN A PDS DIRECTORY WAS CLOBBERED.  I HAD WORKED\nWITH THAT PDS FOR A WEEK, MAKING 150 UPDATES OR SO.  THE LATEST BACKUP\nWAS EIGHT DAYS OLD.  WE RESTORED THE OLD DIRECTORY ONTO THE EXTENTS OF\nTHE CLOBBERED DIRECTORY, AND I SAVED ALL THE PHYSICAL MEMBERS DOWN TO\nTHE LEVEL OF THE PREVIOUS BACKUP.  THEN I COPIED THE SAVED MEMBERS TO A\nDUPLICATE PDS, MADE FROM THE OLD BACKUP TAPE.  A FEW RENAMINGS LATER,\nAND I GOT WHAT I WANTED AND WAS READY TO GO.\n\n  ANOTHER TIME, I WAS DEBUGGING A PROGRAM (IT WAS A VERSION OF CVTCLIST\nFROM FILE 187 OF THE CBT TAPE) WHICH RAN OFF INTO AN ENDLESS LOOP WHILE\nIN PROCESS OF WRITING MEMBERS TO A PDS.  AFTER THE LOOP WAS ENTERED, NO\nNEW DIRECTORY ENTRIES WERE STOWED, SO YOU COULDN'T USE ISPF BROWSE TO\nSEE WHAT WAS BEING WRITTEN WHILE THE PROGRAM WAS RUNNING AWAY.  NO\nPROBLEM WITH BOB WEINSTEIN'S FIXPDS.  I JUST FIXPDS'ED THE LAST MEMBER\nAND BROWSED IT.  I COULD HAVE EVEN BROWSED IT WITHOUT RESTORING IT !!\n(OF COURSE I COULD HAVE USED FULL-SCREEN ZAP FROM FILE 300, BUT ISPF\nBROWSE GIVES A MUCH BETTER, AND FORMATTED, PICTURE.)\n\n  IF YOU HAVE QUESTIONS, PLEASE CALL SAM GOLOB, P.O. BOX 906,\nTALLMAN, NEW YORK, 10982-0906 -               SBGOLOB@ATTGLOBAL.NET\nIF I CAN'T ANSWER THEM, I'LL FORWARD THEM TO BOB, WHO IS AT AN\nINSTALLATION IN NEW YORK CITY.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CREAMED": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00I\\x00I\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "TST2SSG"}, "text": "        A BIT OF ADVICE FOR WHAT TO DO IF A PDS DIRECTORY IS\n                           WIPED OUT\n           (AND FOR RESTORING DELETED MEMBERS IN GENERAL)\n\nINTRODUCTION ---\n\n A PDS CONSISTS OF A DIRECTORY, FOLLOWED BY PHYSICAL MEMBERS.  THE\n   DIRECTORY HAS BLKSIZE(256) AND HAS ENTRY SLOTS WHICH POINT TO THE\n   TTR LOCATION OF THE MEMBERS.  EACH PHYSICAL MEMBER HAS AN EOF\n   MARKER AFTER IT.  THE LRECL AND BLOCKSIZE OF THE PHYSICAL MEMBERS\n   CORRESPOND TO THE STATED DCB ATTRIBUTES AS RECORDED IN THE VTOC\n   ENTRY FOR THE DATASET.  THE DIRECTORY IS AT THE BEGINNING OF THE\n   DATASET AND THE PHYSICAL MEMBERS START SEQUENTIALLY AFTER THE END\n   OF THE DIRECTORY BLOCKS, EVEN IN THE MIDDLE OF A TRACK.\n\n IF A PHYSICAL MEMBER HAS NO DIRECTORY ENTRY POINTING TO IT, IT IS\n   SAID TO BE DELETED.  SPACE OCCUPIED BY DELETED MEMBERS IS RECOVERED\n   DURING A DATASET COMPRESS OPERATION (USING FOR EXAMPLE THE IEBCOPY\n   PROGRAM).  A DELETED MEMBER CAN BE RESTORED IF A NEW DIRECTORY\n   ENTRY CAN BE CREATED WHICH POINTS TO IT.  THIS CAN BE DONE BY THE\n   FIXPDS PROGRAM, OR THE \"PDS\" TSO COMMAND (FILE 182 OF THE CBT TAPE),\n   OR THE \"PDSGAS\" PROGRAM (FILE 316 - JIM MARSHALL'S COLLECTION).\n\n SO MUCH FOR INTRODUCTION.\n\n\nHOW TO PROCEED ---\n\n IF YOU HAVE THE \"PDS\" COMMAND (CBT TAPE FILE 182), THE FIRST THING\n   TO DO IS TO EXAMINE THE HELP FOR THE \"RESTORE\" SUBCOMMAND OF PDS.\n   THIS FACILITY HAS THE CAPABILITY OF STOWING NEW DIRECTORY ENTRIES\n   REPEATEDLY FOR DELETED MEMBERS AND IT IS FAST.  THE \"PDSGAS\"\n   PROGRAM IS ALSO VERY FAST, AND IT IS A BATCH PROGRAM.  THESE\n   ALTERNATIVES ARE PREFERABLE TO OUR FIXPDS PROGRAM BECAUSE THEY\n   ARE FASTER.\n\n THE ADVANTAGE OF THE \"FIXPDS\" PROGRAM IS IN THE WAY IT WORKS.\n   THIS IS DIFFERENT FROM THE OTHER METHODS IN THAT IT GOES BACKWARDS,\n   WHEREAS THE OTHER RESTORE-TYPE PROGRAMS GO FORWARDS FROM THE END\n   OF THE DIRECTORY.\n\n ALSO, THIS \"FIXPDS\" PROGRAM LOOKS AT PHYSICAL MEMBERS FIRST USING\n   ISPF BROWSE, SO YOU CAN EXAMINE THE MEMBER THOROUGHLY BEFORE\n   DECIDING WHETHER TO RESTORE IT OR NOT.\n\n NOW FOR THE MAIN THING--IF THE DIRECTORY PART (BEGINNING TRACK(S)\n   OF THE DATASET) IS OVERLAID BY DATA, OR \"CREAMED\".  THERE IS NOW\n   NO DIRECTORY, ONLY PHYSICAL MEMBERS.  YOU MAY ALSO HAVE WIPED OUT\n   SOME OF THE PHYSICAL MEMBERS AT THE BEGINNING.  CAN YOU SAVE THE\n   REST OF THEM.  THE ANSWER IS YES.\n\n FIRST YOU MUST CREATE A DUMMY DIRECTORY.  YOU CAN USE THE \"FIXPDS\"\n   SUBCOMMAND OF THE \"PDS\" TSO SUBCOMMAND TO DO THIS.\n\n            FIXPDS EXPANDDIR(NN)\n                           (IF DSORG OF THE PDS IS STILL PO)\n                           FOLLOWED BY\n            FIXPDS MAXSPACE\n                           (MARKS ALL OF THE DATASET AS USED)\n\n   AN ALTERNATIVE IS TO RESTORE THE DIRECTORY TRACKS FROM AN OLD FDR\n   OR DF/DSS (OR IEHDASDR) BACKUP.  THE PROBLEM IN THAT CASE IS THAT\n   THE MEMBER POINTERS MAY BE OBSOLETE.  BUT AT LEAST YOU'LL HAVE A\n   DIRECTORY.  YOU CAN THEN DELETE THE MEMBERS TO GET A BLANK\n   DIRECTORY (IF YOU KNOW FOR SURE THAT THEY ARE WRONG.  OTHERWISE\n   YOU CAN KEEP THE DIRECTORY AS IS.)\n\n   ONCE THIS IS DONE, YOU CAN GET INTO OUR \"FIXPDS\" PROGRAM UNDER\n   ISPF AND STOW NEW ENTRIES FOR THE PHYSICAL MEMBERS AT THE END OF\n   THE DATASET.  THESE ARE THE ONES WHICH HAVE BEEN PUT THERE MOST\n   RECENTLY.  USE YOUR KNOWLEDGE AND PROCEED WITH CAUTION.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "TST2SSG"}, "text": "                  INSTALLATION DIRECTIONS FOR FIXPDS\n\n\n 1.  ALLOCATE AN OBJECT LIBRARY TO HOLD TEMPORARY OBJECT MODULES.\n\n 2.  RUN THE ASMLINK JCL AFTER MODIFYING IT FOR YOUR INSTALLATION'S\n       DATASETS.\n\n 3.  COPY PANELS FPDSP0, FPDSP1, AND FIXMENU INTO YOUR ISPF PANEL\n       LIBRARY.\n\n 4.  COPY MESSAGE MEMBER FPDS00 INTO YOUR ISPF MESSAGES LIBRARY.\n\n 5.  COPY THE CLIST CSPFPDS INTO YOUR CLIST LIBRARY.  TO CONVERT THE\n       CLIST TO VB-255 LRECL FORMAT YOU CAN USE THE CVTCLIST PROGRAM\n       INCLUDED (ALSO ON CBT TAPE FILE 187) OR ISPF COPY AND EDIT.\n\n 6.  USE THE SAMPLE ISPF PRIMARY MENU RRW@PRIM TO COPY THE &ZSEL ENTRY\n       FOR \"M\" IN THE )PROC SECTION INTO YOUR ISPF PRIMARY MENU.\n       YOU NOW SHOULD BE READY TO GO.\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMLINK": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00/\\x00/\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "TST2SSG"}, "text": "//TST2FIXP JOB ,'TECH.SUPPORT',CLASS=M,NOTIFY=TST2SSG,TIME=1440,\n//        MSGLEVEL=(1,1),MSGCLASS=T\n//***************************************************//\n//*       INSTALL SPFPDS LOAD MODULE FOR FIXPDS     *//\n//***************************************************//\n//FPDSASM PROC M=\n//ASM    EXEC  PGM=IEV90,REGION=3500K,          (IBM ASSEMBLER H)\n// PARM='DECK,RENT,NOLOAD'\n//SYSLIB   DD  DISP=SHR,DSN=TSY2.ATSOMAC\n//         DD  DSN=TSY2.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY\n//         DD  DSN=TSY2.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY\n//         DD  DSN=TST2SSG.FIXPDS.SHIP,DISP=SHR  <== THIS LIBRARY\n//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=TST2SSG.FIXPDS.SHIP(&M)\n//SYSPUNCH DD  DSN=TST2SSG.FIXPDS.OBJECT(&M),DISP=OLD\n//*\n//PEND   PEND\n//*\n//SPFCNTL  EXEC FPDSASM,M=SPFCNTL\n//SPFCORE  EXEC FPDSASM,M=SPFCORE\n//SPFFIX   EXEC FPDSASM,M=SPFFIX\n//SPFMAIN  EXEC FPDSASM,M=SPFMAIN\n//SPFSCAN  EXEC FPDSASM,M=SPFSCAN\n//SPFSRCH  EXEC FPDSASM,M=SPFSRCH\n//*\n//LKED   EXEC  PGM=IEWL,PARM='TERM,XREF,LIST,LET,TEST',\n//             COND=(7,LT)\n//SYSLMOD  DD  DSN=TST.TSO.CMDLIB,DISP=SHR\n//ISPLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=TST2SSG.FIXPDS.OBJECT\n//SYSLIN   DD  *\n INCLUDE SYSLIB(SPFCNTL)\n INCLUDE SYSLIB(SPFCORE)\n INCLUDE SYSLIB(SPFFIX)\n INCLUDE SYSLIB(SPFMAIN)\n INCLUDE SYSLIB(SPFSCAN)\n INCLUDE SYSLIB(SPFSRCH)\n INCLUDE ISPLIB(ISPLINK)\n SETCODE AC(0)\n NAME SPFPDS(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSPFPDS": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00(\\x00(\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "TST2SSG"}, "text": "PROC 0\nCONTROL NOFLUSH NOMSG\nSET &DATASET =\nDISPLAY: -\nISPEXEC DISPLAY PANEL(FPDSP1)\nSET &SAVECC = &LASTCC\nCHKPF3: -\nIF &SAVECC = 8 THEN DO\n     FREE FI(FPDS0000 FPDS0001)\n     EXIT\nEND\nALLOC: -\nFREE FI(FPDS0000 FPDS0001)\nDELETE FPDS0001.CNTL\nALLOC FI(FPDS0000) DA(&DATASET.) SHR\nSET &ALLOCCC = &LASTCC\nIF &ALLOCCC \u00ac= 0 THEN DO\n     ISPEXEC DISPLAY PANEL(FPDSP1) MSG(FPDS003I)\n     SET &SAVECC = &LASTCC\n     GOTO CHKPF3\nEND\nALLOC FI(FPDS0001) DA(FPDS0001.CNTL) SP(2 2) CYL\nSET &ALLOCCC = &LASTCC\nIF &ALLOCCC \u00ac= 0 THEN DO\n     ISPEXEC DISPLAY PANEL(FPDSP1) MSG(FPDS004I)\n     SET &SAVECC = &LASTCC\n     GOTO CHKPF3\nEND\nISPEXEC SELECT PGM(SPFPDS)\nSET &SAVECC = &LASTCC\nIF &SAVECC = 4 THEN GOTO DISPLAY\nIF &SAVECC = 8 THEN DO\n    ISPEXEC DISPLAY PANEL(FPDSP1) MSG(FPDS001I)\n    SET &SAVECC = &LASTCC\n    GOTO CHKPF3\nEND\nSET &DATASET =\nISPEXEC DISPLAY PANEL(FPDSP1) MSG(FPDS000I)\nSET &SAVECC = &LASTCC\nGOTO CHKPF3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVTCLIST": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x02\\x18\\x02\\x18\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 536, "newlines": 536, "modlines": 0, "user": "TST2SSG"}, "text": "*   FIXED TO PREVENT LOOP WITH LONG COMMENTS - S.GOLOB - NEWSWEEK\n*     THIS VERSION STILL INTRODUCES SPACES SOMETIMES WHEN GOING\n*     FROM VB-255 TO FB-80.  IT SEEMS OK THE OTHER WAY.\n********************************************************************\n*          DATA SET CBT1018    AT LEVEL 001 AS OF 11/19/79\n*FUNCTION      CONVERT  CLISTS FROM 255 LRECL VB TO 80 LRECL FB         00001\n*              OR VISE VERSA                                            00002\n*I/O           SYSUT1  INPUT CLIST                                      00003\n*              SYSUT2  OUTPUT CLIST                                     00004\n*              SYSPRINT LISTING                                         00005\n*NOTE          VB CLISTS HAVE SEQUENCE NUMBERS IN POS 1-8               00006\n*              FB IN 73-80                                              00007\n*              RETURN CODE                                              00008\n*              8 JOB TERMINATED BEFORE START OF COPY                    00009\n*              12 JOB TERMINATED AFTER START OF COPY                    00010\n*                                                                       00011\n         MACRO                                                          00012\n         SYMBR                                                          00013\n**                           EQUATES FOR SYMBOLIC REG USAGE             00014\nR0       EQU   0                                                        00015\nR1       EQU   1                                                        00016\nR2       EQU   2                                                        00017\nR3       EQU   3                                                        00018\nR4       EQU   4                                                        00019\nR5       EQU   5                                                        00020\nR6       EQU   6                                                        00021\nR7       EQU   7                                                        00022\nR8       EQU   8                                                        00023\nR9       EQU   9                                                        00024\nR10      EQU   10                                                       00025\nR11      EQU   11                                                       00026\nR12      EQU   12                                                       00027\nR13      EQU   13                                                       00028\nR14      EQU   14                                                       00029\nR15      EQU   15                                                       00030\nRA       EQU   10                                                       00031\nRB       EQU   11                                                       00032\nRD       EQU   13                                                       00033\nRE       EQU   14                                                       00034\nRF       EQU   15                                                       00035\n         MEND                                                           00036\n         MACRO                                                          00037\n&NAME    SAVEX &AREA,&BASE,&VERSION,&INIT,&TESTRAN                      00038\n.* DPHQ SYSTEM/360 - OPERATING SYSTEM SSS                               00039\n.* V4M0 DECEMBER 2, 1966 F. W. VOSS                                     00040\n         LCLA  &A1                                                      00041\n         LCLC  &TEST                                                    00042\n&TEST    SETC  '&AREA'(1,5)                                             00043\n         AIF   ('&AREA' NE '').GD1                                      00044\n         MNOTE 12,'SAVE AREA NAME MISSING - NO GEN'                     00045\n         MEXIT                                                          00046\n.GD1     ANOP                                                           00047\n&A1      SETA  &BASE                                                    00048\n         USING *,15                                                     00049\n&NAME    B     22(0,15)            BRANCH AROUND ID                     00050\n         DC    FL1'18'                                                  00051\n         AIF   ('&NAME' NE '').GD2                                      00052\n         DC    CL9'&SYSECT'        IDENTIFIER                           00053\n         AGO   .CT1                                                     00054\n.GD2     DC    CL9'&NAME'          IDENTIFIER                           00055\n.CT1     DC    CL8'&VERSION'       VERSION                              00056\n         STM   14,12,12(13)        SAVE REGISTERS                       00057\n         ST    13,&AREA+4               CHAIN FORWARD                   00058\n         CNOP  0,4                                                      00059\n         AIF   (&A1 GT 2).MV2                                           00060\n         AIF   (&A1 EQ 2).GD3                                           00061\n         AGO   .CT5                                                     00062\n.MV2     MNOTE 'INVALID BASE REQUEST - USING 2'                         00063\n         AGO   .GD3                                                     00064\n.CT5     ANOP                                                           00065\n         BAL   13,&AREA+72    SETUP SAVE AREA POINTER AND BASE          00066\n         DROP  15                                                       00067\n         USING *,13                     ESTABLISH ADDRESSABILITY        00068\n&AREA    DC    18F'0'              SAVE AREA                            00069\n         L     15,&AREA+4                                               00070\n         ST    13,8(0,15)               CHAIN BACK                      00071\n         AGO   .CT7                                                     00072\n.GD3     ANOP                                                           00073\n         BAL   13,&AREA+76    SETUP SAVE AREA POINTER AND BASE          00074\n         DROP  15                                                       00075\n         USING *,13,12                  ESTABLISH ADDRESSABILITY        00076\n&AREA    DC    18F'0'              SAVE AREA                            00077\n         DC    AL4(&AREA+4096)                                          00078\n         L     15,&AREA+4                                               00079\n         ST    13,8(0,15)               CHAIN BACK                      00080\n         L     12,&AREA+72              ESTABLISH 2ND BASE              00081\n.CT7     ANOP                                                           00082\n         AIF   ('&INIT' EQ '').CT9                                      00083\n.CT9     ANOP                                                           00084\n         AIF   ('&TESTRAN' EQ '').CT6                                   00085\n         AIF   ('&TESTRAN' EQ 'TEST').CT8                               00086\n         MNOTE 'INVALID TESTRAN EDIT REQUEST'                           00087\n         AGO   .CT6                                                     00088\n.CT8     ANOP                                                           00089\n*                            TESTRAN SPIE MACRO                         00090\n         SPIE  &TEST.EXT,((1,15))                                       00091\n         B     &TEST.ABE     BRANCH AROUND TESTRAN DUMP                 00092\n         SPACE 2                                                        00093\n&TEST.EXT BALR 15,0          ESTABLISH ADDRESSABILITY FOR TESTRAN ABEND 00094\n         DROP  13                                                       00095\n         USING *,15                                                     00096\n         MVC   &TEST.PSW,4(1) MOVE OLD PSW FROM PIE                     00097\n*                            TESTRAN ABEND MACRO                        00098\n&TEST.ERR ABEND 4444,DUMP                                               00099\n&TEST.PSW DC   XL8'0'        OLD PROGRAM PSW ON PROGRAM INTERRUPT       00100\n         DROP  15                                                       00101\n         USING &AREA,13      REESTABLISH CSECT ADDRESSABILITY           00102\n&TEST.ABE EQU  *                                                        00103\n.CT6     ANOP                                                           00104\n         SPACE 2                                                        00105\n         MEND                                                           00106\n*FUNCTION      CONVERT  CLISTS FROM 255 LRECL VB TO 80 LRECL FB         00107\n*              OR VISE VERSA                                            00108\n*I/O           SYSUT1  INPUT CLIST                                      00109\n*              SYSUT2  OUTPUT CLIST                                     00110\n*              SYSPRINT LISTING                                         00111\n*NOTE          VB CLISTS HAVE SEQUENCE NUMBERS IN POS 1-8               00112\n*              FB IN 73-80                                              00113\n*              RETURN CODE                                              00114\n*              8 JOB TERMINATED BEFORE START OF COPY                    00115\n*              12 JOB TERMINATED AFTER START OF COPY                    00116\n*                                                                       00117\n*        R11   RETURN                                                   00118\n*        R10   DCB TEMPLATE                                             00119\n*        R7    OUTPUT POINTER                                           00120\n*        R6    INPUT POINTER                                            00121\n*        R5    LENGTH CODE                                              00122\n*        R4    INPUT START OF BLOCK                                     00123\n*        R3    OUTPUT START OF BLOCK                                    00124\n         SYMBR                                                          00125\nTEST20   EQU   X'20'                                                    00126\n         EJECT                                                          00127\nCNVCLIST CSECT                                                          00128\n         SAVEX SAVEAREA,1,COPYCLST                                      00129\n         SPACE                                                          00130\n         OPEN  (CLISTIN,(INPUT))                                        00131\n         SPACE                                                          00132\n         OPEN  (CLISTOUT,(OUTPUT))                                      00133\n         SPACE                                                          00134\n         USING IHADCB,R10                                               00135\n         LA    R10,CLISTIN              USE DCB NAMES FOR INPUT DCB     00136\n         BAL   R11,TESTVORF                                             00137\n         BAL   R11,GETMAIN              GET CORE FOR INPUT BLOCK        00138\n         LR    R4,R1                    SAVE INPUT BLOCK ADDRESS        00139\n         LA    R10,CLISTOUT             USE DCB NAMESFOR  OUTPUT DCB    00140\n         BAL   R11,TESTVORF                                             00141\n         BAL   R11,GETMAIN              GETMAIN FOR OUTPUT BLOCK        00142\n         LR    R3,R1                    SAVE OUTPUT BLOCK ADDRESS       00143\n         TM    SWITCH,X'80'             IF 1 FILE IS F AND 1 V          00144\n         BO    SAVEOUT                    CONTINUE                      00145\n         MVC   ERRORMSG,MSG3                                            00146\n         MVC   RC,=H'8'                                                 00147\n         B     WRITERR                                                  00148\n         SPACE 2                                                        00149\nTESTVORF EQU   *                                                        00150\n         TM    DCBRECFM,X'C0'           CHECK FOR V OR F                00151\n         BM    CONTVF                   IF NOT V OR F ERROR             00152\n         MVC   ERRORMSG,MSG1                                            00153\n         MVC   RC,=H'08'                                                00154\n         B     WRITERR                                                  00155\nCONTVF   TM    DCBRECFM,X'80'           IF V                            00156\n         BZ    EXITVORF                   EXIT                          00157\n         XI    SWITCH,X'80'             FIRST F TURNS ON-SECOND OFF     00158\n         CLC   DCBLRECL,=H'80'          IF F AND LRECL NOT = 80         00159\n         BE    EXITVORF                   THEN ERROR                    00160\n         MVC   ERRORMSG,MSG2                                            00161\n         MVC   RC,=H'8'                                                 00162\n         B     WRITERR                                                  00163\nEXITVORF BR    R11                      RETURN                          00164\n         SPACE 2                                                        00165\nGETMAIN  EQU   *                                                        00166\n         LH    R0,DCBBLKSI              GET C0RE F0R PR0CESSING AN      00167\n         GETMAIN R,LV=(0)                 INPUT BL0CK                   00168\n         SPACE                                                          00169\n         BR    R11                                                      00170\n         SPACE 2                                                        00171\nSAVEOUT  EQU   *                       SAVE DATA FOR MAINLINE           00172\n         MVC   OUTBLKSI,DCBBLKSI                                        00173\n         LR    R7,R3                   INITIALIZE OUTPUT POINTER        00174\n         TM    DCBRECFM,X'80'          IF OUTPUT IS V                   00175\n         BZ    SAVEIN                    SAVE INPUT END OF BLOCK        00176\n         OI    SWITCH,TEST20           ELSE SET INPUT SWITCH TO V       00177\n         LH    R12,DCBBLKSI                                             00178\n         LA    R12,0(R12,R3)           SAVE OUTPUT END OF FIXED BLOCK   00179\n         ST    R12,ENDF                                                 00180\n         LA    R10,CLISTIN                                              00181\n         B     INITREAD                                                 00182\n         SPACE                                                          00183\nSAVEIN   LA    R10,CLISTIN                                              00184\n         LH    R12,DCBBLKSI            SAVE INPUT END OF FIXED BLOCK    00185\n         LA    R12,0(R12,R4)                                            00186\n         ST    R12,ENDF                                                 00187\n         LH    R12,OUTBLKSI            SAVE MAXIMUM END OF OUTPUT       00188\n         LA    R12,0(R12,R3)             VARIABLE BLOCK                 00189\n           ST  R12,ENDV                                                 00190\n         LA    R7,4(R7)                POINT PAST BLK COUNT FOR V       00191\n         SPACE 2                                                        00192\nINITREAD EQU   *                                                        00193\n         CLOSE (CLISTIN)                                                00194\n         MVI   DCBRECFM,X'C0'          SET INPUT RECFM TO U             00195\n         MVI   CLISTOUT+36,X'C0'       SET OUTPUT RECFM TO U            00196\n         OPEN  (CLISTIN,(INPUT))                                        00197\nREADDIR  EQU   *                                                        00198\n         OI    SWITCH,X'40'             SET DIRECTORY READ ON           00199\n         READ  DECB1,SF,CLISTIN,DIRIN,256                               00200\n         CHECK DECB1                                                    00201\n         NOTE CLISTIN                                                   00202\n         XI    DIRSW,X'FF'             SINCE SAVETTR POINTS TO          00203\n         CLI   DIRSW,X'00'             BEGINNING OF DIRECTORY, READ     00204\n         BE    READDIR                 TWICE AFTER FIRST READ.          00205\n         SPACE                                                          00206\n         ST    R1,SAVETTR              SAVE POINTER TO DIRECTORY        00207\n         LH    R9,DIRIN                                                 00208\n         STH   R9,DIRLEFT               SAVE DIRECTORY LENGTH           00209\n         LA    R9,DIRIN+2                                               00210\n         ST    R9,NEXTMEM                                               00211\n         SPACE 2                                                        00212\nGETMEM   EQU   *                        GET BLOCK OF DATA               00213\n         ZAP   SEQCOUNT,=P'0'           ZERO OUT SEQUENCE COUNT FOR MEM 00214\n         L     R8,NEXTMEM               LOAD ADDRESS OF MEMBER NAME     00215\n         CLC   HIVALUE,0(R8)            IF MEMBER NAM = HIVALUES        00216\n         BE    EOJ                        GO TO END OF JOB              00217\n         NI    11(R8),X'1F'                                             00218\n         MVC   DIRLIST+11(63),11(R8)    MOVE USER DATA TO DIRLIST       00219\n         MVC   NAME,0(R8)               PUT NAME IN OUTPUT DIRECT LIST  00220\n         SR    R12,R12                  CLEAR REGISTER                  00221\n         IC    R12,11(R8)               LOAD # OF HALFWORDS OF USERDATA 00222\n         LA    R12,12(R12,R12)          DOUBLE AND ADD 12               00223\n         LA    R9,0(R12,R8)             COMPUTENEXT MEMBER DIR ADDA     00224\n         ST    R9,NEXTMEM               SAVE ADDRESS OF NEXT MEMBER     00225\n         LH    R9,DIRLEFT               COMPUTE BYTES LEFT IN           00226\n         SR    R9,R12                     DIRECTORY                     00227\n         STH   R9,DIRLEFT                                               00228\n         NI    11(R8),X'00'             CLEAR C  OF TTRC                00229\n         LA    R8,8(R8)                 LOAD ADDRESS OF TTR             00230\n         NI    SWITCH,X'BF'             TURN DIRECTORY READ SW  OFF     00231\n         POINT CLISTIN,(8)                                              00232\n         SPACE                                                          00233\n       LH    R8,DCBBLKSI                LOAD INPUT BLKSIZE              00234\nREADBLK  READ  DECB2,SF,CLISTIN,(4),(8)                                 00235\n         SPACE                                                          00236\n         CHECK DECB2                                                    00237\n         SPACE                                                          00238\n         TM    SWITCH,TEST20           IF INPUT IS F                    00239\n         BZ    FTOV                      CONVERT FIXED TO VARIABLE      00240\n         SPACE 2                                                        00241\nVTOF     EQU   *                                                        00242\n         LH    R12,0(R4)               ADD BLKSIZE AND STARTING         00243\n         AR    R12,R4                    ADDRESS                        00244\n         ST    R12,ENDV                  GIVING  ENDING ADDRESS         00245\n         LR    R6,R4                   LOAD POINTER TO V INPUT          00246\n         LA    R6,4(R6)                POINT TO FIRST LRECL             00247\n         SPACE                                                          00248\nGETREC   MVC   HALFWORD,0(R6)                                           00249\n         LH    R5,HALFWORD                                              00250\n         CH    R5,=H'255'              IF LRECL IS GREATER THAN 256     00251\n         BL    *+20                      ERROR                          00252\n         MVC   ERRORMSG,MSG4             MESSAGE                        00253\n         MVC   RC,=H'12'                 RETURN CODE                    00254\n         B     WRITERR                                                  00255\n         SH    R5,=H'12'               POINT PAST 4 BYTE LRECL AND      00256\n         LA    R6,12(R6)                 8 BYTE LINE SEQUENCE FIELD     00257\n         SPACE                                                          00258\nLOOPREC  STH   R5,LRECL                SAVE LRECL                       00259\n         CH    R5,=H'71'                IF LRECL GREATER THAN 71        00260\n         BH    SPLITREC                  SPLIT RECORD                   00261\n         BCTR  R5,0                    MAKE LENGTH CODE                 00262\n         LA    R12,0(R5,R6)            POINT TO LAST BYTE OF REC        00263\n         MVC   REC80,REC80-1           CLEAR RECORD AREA                00264\n         CLI   0(R12),C'+'             IF LAST BYTE = '+'           SBG 00265\n         BNE   SKIPLOOP                  MOVE '+' TO COLUMN 72          00266\n         MVI   REC80+71,C'+'                                        SBG 00267\n         MVI   0(R12),C' '             BLANK OUT OLD '+'            SBG 00268\n         LA    R9,REC80+71             LOAD ADDRESS COLUMN 72           00269\nBACKLOOP BCTR  R9,0                                                     00270\n         BCTR  R12,0                                                    00271\n         CLI   0(R12),C' '             IF LAST BYTE IS SPACE            00272\n         BE    SKIPLOOP                  EXIT                           00273\n         CR    R6,R12                  IF AT START OF RECORD            00274\n         BH    SKIPLOOP                  DONT MOVE ANYMORE              00275\n         MVC   0(1,R9),0(R12)          MOVE CONT WORD TO END OF OUTREC  00276\n         MVI   0(12),C' '              BLANKOUT CONT INPUT WORD         00277\n         B     BACKLOOP                                                 00278\nSKIPLOOP EX    R5,MOVE80               MOVE RECORD                      00279\n         BAL   R11,WRITEF                                               00280\n         LA    R5,1(R5)                                                 00281\n         LA    R6,0(R5,R6)             INCREMENT CURRET POINTER BY LENG 00282\n         C     R6,ENDV                 IF ADDRESS POINTER IS LESS THAN  00283\n         BL    GETREC                    END ADDRESS GO TO GETREC       00284\n         B     READBLK                 ELSE READ A BLOCK                00285\n         SPACE 2                                                        00286\nSPLITREC EQU   *                                                        00287\n         LH    R5,=H'70'                                                00288\nSPLTLOOP LA    R12,0(R5,R6)            ADDRESS OF END OF REC TO BE MOVE 00289\n         CLI   0(R12),C' '             FIND A BLANK SO WORD IS NOT      00290\n         BE    CONTSPLT                  SPLIT                          00291\n         BCTR  R5,0                                                     00292\n*        B     SPLTLOOP              IF LONG COMMENTS WE GET LOOP   SBG 00293\nCONTSPLT EQU   *                                                        00294\n         MVC   REC80,REC80-1           CLEAR OUTPUT RECORD              00295\n         MVI   REC80+71,C'+'           MOVE IN CONTUATION CHARACTER SBG 00296\n         EX    R5,MOVE80               MOVE TO WRITE AREA               00297\n         BAL   R11,WRITEF                                               00298\n         LA    R12,1(R5)               ADD 1 REC LENGTH OF RECORD       00299\n         LH    R5,LRECL                  WRITEN                         00300\n         SR    R5,R12                  SUBTRACT FROM LRECL              00301\n         LA    R6,0(R12,R6)            INCREMENT IPOINTER BY LENGTH     00302\n         B     LOOPREC                 FINISH RECORD                    00303\n         SPACE                                                          00304\nWRITEF   EQU   *                                                        00305\n         AP    SEQCOUNT,=P'10'         PLACE SEQUENCE NUMBER IN         00306\n         UNPK  REC80+72(8),SEQCOUNT      POSITIONS 73-80                00307\n         MVI   REC80+79,C'0'           MAKE LAST POS CHAR ZERO          00308\n         MVC   0(80,R7),REC80          MOVE RECORD TO OUTPUT            00309\n         LA    R7,80(R7)               INCREMENT POINTER                00310\n         C     R7,ENDF                 IF POINTER IS LESS THAN ENDOFBLK 00311\n         BCR   4,R11                     RETURN                         00312\n         SR    R7,R3                   LOAD BLKSIZE                     00313\n         B     WRITEOUT                ELSE WRITEOUT BLOCK              00314\n         SPACE 2                                                        00315\nFTOV     EQU   *                                                        00316\n         LA    R12,0(R8,R4)            FIND END OF BLOCK ADRESS         00317\n         L     R9,DECB2+16             LOAD IOB ADDRESS                 00318\n         LH    R9,14(R9)               LOAD LENGTH BLOCK IS SHORT       00319\n         SR    R12,R9                  SUBTRACT FROM END OF FULL BLK    00320\n         ST    R12,ENDF                  GIVING REAL END OF BLOCK       00321\n         LR    R6,R4                   POINT TO START OF INPUT BLOCK    00322\nNEXTFREC EQU   *                                                        00323\n         LA    R5,70(R6)               POINT TO LAST CHAR BEFORE CONT   00324\nLOOPFV   EQU   *                                                        00325\n         CLI   0(R5),C' '              FIND LAST NON BLANK CHARACTER    00326\n         BNE   FOUNDATA                                                 00327\n         BCTR  R5,0                                                     00328\n         B     LOOPFV                                                   00329\n         SPACE                                                          00330\nFOUNDATA EQU   *                                                        00331\n         SR    R5,R6                   SUBTRACT START FROM END GIV LENG 00332\n         CH    R5,=H'10'                                                00333\n         BH    *+8                     IF LENGTH CODE IS LESS THAN 10   00334\n         LA    R5,10                     USE 10                         00335\n         CLI   71(R6),C'+'             IF THERE IS  NO CONTINUATION SBG 00336\n         BNE   WRITEV                    GO TO WRITEV                   00337\n         CLI   70(R6),C' '             IF POS 71 IS BLANK               00338\n         BNE   *+8                       PUT 1 BLANK BEFORE CONTINUATON 00339\n         LA    R5,1(R5)                ELSE NONE                        00340\n         LA    R5,1(R5)                                                 00341\n         LA    R12,0(R5,R6)            PUT + IN LAST BYTE OF        SBG 00342\n         MVI   0(R12),C'+'               INPUT RECORD TO BE MOVED   SBG 00343\n         SPACE                                                          00344\nWRITEV   EQU   *                                                        00345\n         LA    R12,13(R5,R7)           LOAD ADDRESS END OF OUTPUT REC   00346\n         C     R12,ENDV                IF ENDOFREC IS LESS THAN ENDOFBL 00347\n         BNH   EXMOVEV                   MOVE DATA                      00348\n         SR    R7,R3                   ELSE FIND BLK LENGTH             00349\n         STH   R7,0(R3)                  STORE IN OUTPUT BLOCK          00350\n         BAL   R11,WRITEOUT              WRITE BLOCK                    00351\n         LA    R7,4(R7)                  POINT PAST OUTPUT BLK COUNT    00352\n         SPACE                                                          00353\nEXMOVEV  EQU   *                                                        00354\n         EX    R5,MOVEV                MOVE DATA TO OUTPUT BLOCK        00355\n         AP    SEQCOUNT,=P'10'         PUT SEQUENCE NUMBER              00356\n         UNPK  4(8,R7),SEQCOUNT          IN OUTPUT DATA SET             00357\n         MVI   11(R7),C'0'             MAKE LAST DIGIT CHARACTER 0      00358\n         LA    R5,13(R5)               ADD 13 TO LEN CNT GIVING LRECL   00359\n         STH   R5,HALFWORD                                              00360\n         MVC   0(4,R7),HALFWORD        STORE LRECL IN OUTPUT BLOCK      00361\n         LA    R7,0(R5,R7)             INCREMENT OUTPUT POINTER         00362\n         LA    R6,80(R6)               INCREMENT  INPUT POINTER         00363\n         C     R6,ENDF                 IF LESS THAN END OF BLOCK        00364\n         BL    NEXTFREC                  GET NEXT RECORD                00365\n         B     READBLK                 ELSE GET NEXT BLOCK              00366\n         SPACE 2                                                        00367\nWRITEOUT EQU   *                                                        00368\n         WRITE DECBA,SF,CLISTOUT,(R3),(R7)    WRITE OUT BLOCK           00369\n         SPACE                                                          00370\n         CHECK DECBA                                                    00371\n         SPACE                                                          00372\n         LR    R7,R3                   SET POINTER TO START OF BLOCK    00373\n         BR    R11                                                      00374\nSTOWOUT  EQU   *                                                        00375\n         TM    SWITCH,TEST20           IF V TO F                        00376\n         BO    STOWVTOF                  CHECK FOR SHORT BLOCK          00377\n         SR    R7,R3                   FIND BLOCK LENGTH                00378\n         STH   R7,0(R3)                STORE IN BDW                     00379\n         MVC   2(2,R3),=H'0'           ZERO OUT REST OF BDW             00380\n         B     SHORTBLK                WRITE OUT BLOCK                  00381\nSTOWVTOF CR    R3,R7                   IF OUTPUT BLOCK IS EMPTY         00382\n         BE    *+10                      SKIP WRITING SHORT BLOCK       00383\n         SR    R7,R3                   LOAD BLOCK LENGTH                00384\nSHORTBLK BAL   R11,WRITEOUT            WRITE SHORT BLOCK                00385\n         TM    SWITCH,X'40'            IF DIRECTORY READ                00386\n         BO    EOJ                       GO TO  EOJ                     00387\n         STOW  CLISTOUT,DIRLIST,A                                       00388\n         SPACE                                                          00389\n         B     STOWEND(R15)                                             00390\nSTOWEND  B     CHECKEND                 GOOD STOW                       00391\n         B     ERRA                                                     00392\n         NOP   ERRA                                                     00393\n         B     ERRB                                                     00394\n         B     ERRC                                                     00395\n         NOP   ERRA                                                     00396\nERRD     MVC   ERRORMSG,MSGD                                            00397\n         B     ERR                                                      00398\nERRC     MVC   ERRORMSG,MSGC                                            00399\n         B     ERR                                                      00400\nERRB     MVC   ERRORMSG,MSGB                                            00401\n         B     ERR                                                      00402\nERRA     MVC   ERRORMSG,MSGA                                            00403\nERR      MVC   RC,=H'12'                                                00404\n         B     WRITERR                                                  00405\n         SPACE                                                          00406\nCHECKEND EQU   *                                                        00407\n         AP    OUTCOUNT,=P'1'          COUNT MEMBERS MOVED              00408\n         TM    SWITCH,TEST20           IF V TO F                        00409\n         BO    *+8                        CHECK DIRECTORY               00410\n         LA    R7,4(R7)                ELSE ADD 4 BYTES FOR OUTPUT BDW  00411\n         LA    R12,2                                                    00412\n         CH    R12,DIRLEFT             IF DIRECTORY BLOCK IS NOT EMPTY  00413\n         BL    GETMEM                     GET NEXT MEMBER               00414\n         POINT CLISTIN,SAVETTR          ELSE READ NEW DIRECTORY         00415\n         SPACE                                                          00416\n         B     READDIR                                                  00417\n         SPACE 2                                                        00418\nWRITERR  EQU   *                                                        00419\n         BAL   R11,WRITETIT                                             00420\n         MVC   PRTLINE,ERRLINE                                          00421\n         BAL   R11,PUTPRINT                                             00422\n         CLC   RC,=H'12'               IF COPY STARTED                  00423\n         BNE   EXIT                      PRINT TOTALS                   00424\n         BAL   R11,COUNTP                                               00425\n         B     EXIT                                                     00426\n         SPACE 2                                                        00427\nEOJ      BAL   R11,WRITETIT                                             00428\n         MVC   ERRORMSG(14),=C' COPY COMPLETE'                          00429\n         MVC   PRTLINE,ERRLINE                                          00430\n         BAL   R11,PUTPRINT                                             00431\n         BAL   R11,COUNTP                                               00432\n         SPACE 2                                                        00433\nEXIT     EQU   *                                                        00434\n         CLOSE (CLISTIN,,CLISTOUT,,PRINT)                               00435\n         LH    R15,RC                  LOAD RETURN CODE                 00436\n         L     R13,SAVEAREA+4                                           00437\n         LM    R0,R12,20(R13)          RESTORE REGS 0-12                00438\n         L     R14,12(R13)             RESTORE REG 14                   00439\n         BR    R14                                                      00440\n         SPACE 2                                                        00441\nWRITETIT EQU   *                                                        00442\n         OPEN  (PRINT,(OUTPUT))                                         00443\n         MVC   PRTLINE,TITLE                                            00444\n         LH    R12,RC                                                   00445\n         CVD   R12,WORK                                                 00446\n         UNPK  RCP,WORK                                                 00447\n         OI    RCP+1,X'F0'                                              00448\n         B     PUTPRINT                                                 00449\nCOUNTP   UNPK  OUTP,OUTCOUNT           MOVE NO OF MEMBERS MOVED         00450\n         OI    OUTP+4,X'F0'              TO PRINTLINE                   00451\n         MVC   PRTLINE,COUNTLN                                          00452\n         SPACE                                                          00453\nPUTPRINT PUT   PRINT,PRTLINE                                            00454\n         SPACE                                                          00455\n         BR    R11                                                      00456\n         SPACE 2                                                        00457\n*EXECUTED INSTRUCTIONS                                                  00458\nMOVEV    MVC   12(1,R7),0(R6)                                           00459\nMOVE80   MVC   REC80(1),0(R6)                                           00460\n         EJECT                                                          00461\nCLISTIN  DCB   DSORG=PO,MACRF=R,DDNAME=SYSUT1,EODAD=STOWOUT             00462\n         SPACE 2                                                        00463\nCLISTOUT DCB   DSORG=PO,MACRF=W,DDNAME=SYSUT2                           00464\n         SPACE 2                                                        00465\nPRINT    DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,            X00466\n               LRECL=121,BLKSIZE=605                                    00467\n         EJECT                                                          00468\n*WORK FIELDS                                                            00469\n         SPACE                                                          00470\nWORK     DC    D'0'                                                     00471\nFULLWORD DS    0F                                                       00472\nHALFWORD DC    H'0'                                                     00473\n         DC    H'0'                                                     00474\nSAVETTR  DC    F'0'                                                     00475\nREADADD  DC    F'0'                                                     00476\nENDV     DC    F'0'                                                     00477\nENDF     DC    F'0'                                                     00478\nSAVERTN  DC    F'0'                                                     00479\nNEXTMEM  DC    F'0'                                                     00480\nOUTBLKSI DC    H'0'                                                     00481\nDIRLEFT  DC    H'0'                                                     00482\nBLKIN    DC    H'0'                                                     00483\nRECIN    DC    H'0'                                                     00484\nRC       DC    H'0'                                                     00485\nLRECL    DC    H'0'                                                     00486\nOUTCOUNT DC    PL4'0'                                                   00487\nDIRSW    DC    X'00'                                                    00488\nSWITCH   DC    XL1'00'                                                  00489\nHIVALUE  DC    XL8'FFFFFFFFFFFFFFFF'                                    00490\nSEQCOUNT DC    PL4'0'                                                   00491\n         SPACE                                                          00492\n         DS    0F                                                       00493\nDIRIN    DS    CL256                   DIRECTORY BLOCK                  00494\n         SPACE                                                          00495\n         DS    0F                                                       00496\nDIRLIST  DS    0CL74                   DIRECTORY RECORD                 00497\nNAME     DC    CL8' '                                                   00498\nTTR      DS    CL3                                                      00499\nC        DS    CL1                                                      00500\nUSEADATA DS    CL62                                                     00501\n         DC    CL1' '                                                   00502\n         SPACE                                                          00503\nREC80    DS    CL80                                                     00504\n         SPACE 2                                                        00505\n*PRINT DATA                                                             00506\n         SPACE                                                          00507\nTITLE    DC    CL121'1        CLIST CONVERSION'                         00508\nERRLINE  DS    0CL121                                                   00509\n         DC    CL7'0   RC='                                             00510\nRCP      DC    CL2'  '                                                  00511\n         DC    CL5' '                                                   00512\nERRORMSG DC    CL37' '                                                  00513\n         DC    CL70' '                                                  00514\nCOUNTLN  DS    0CL121                                                   00515\n         DC    CL29'0'                                                  00516\nOUTP     DC    CL5'0'                                                   00517\n         DC    CL87' MEMBERS COPIED'                                    00518\nPRTLINE  DS    CL121                                                    00519\n         SPACE                                                          00520\nMSG1     DC    CL37'FILE NOT V OR F'                                    00521\nMSG2     DC    CL37'F FORMAT MUST BE LRECL 80'                          00522\nMSG3     DC    CL37'INPUT AND OUTPUT CANNOT BE SAME RECFM'              00523\nMSG4     DC    CL37'V RECORD WITH LRECL OVER 256'                       00524\nMSGA     DC    CL37'DUPLICATE NAME ON DIRECTORY-SYSUT2'                 00525\nMSGB     DC    CL37'DIRECTORY OUT OF SPACE'                             00526\nMSGC     DC    CL37'1/O ERROR ON SYSUT2 DIRECTORY'                      00527\nMSGD     DC    CL37'PROGRAM REGION TOO SMALL'                           00528\n         LTORG                                                          00529\nDCBDUM   DCBD  DSORG=PO,DEVD=DA                                         00530\n         END                                                            00531\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x01Q\\x01Q\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 337, "newlines": 337, "modlines": 0, "user": "TST2SSG"}, "text": "     MACRO\n&NAME    ENTER &BASE,&ID,&TRACEIT,                                     $\n               &CPU=,                                                  ,\n               &PL1=NO,&LV=,&SAVE=,&SP=,&DSECT=,&COMMENT=\n.*\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*\n.*                  ENTER MACRO                                      .*\n.* PURPOSE - THIS MACRO WILL ASSUME REGISTER 15 TO HAVE AN ENTRY     .*\n.* POINT ADDRESS  IT WILL SET UP OPERAND 1 AS A BASE REGISTER. IF NO .*\n.* OPERAND 1, 12 WILL BE USED. IT WILL SET UP OPERAND 2 AS AN ENTRY  .*\n.* POINT I.D. FIELD. IF OMITTED THEN THE INSTRUCTION NAME OR 'ENTRY  .*\n.* POINT' WILL BE USED. IF OPERAND 3 IS 'TRACE'  A GETMAIN WILL BE   .*\n.* ISSUED FOR A SAVE AREA EACH TIME THE ROUTINE IS ENTERED. IF THE   .*\n.* THIRD OPERAND IS 'NOTRACE' THE GOTTEN SAVE AREA WILL BE FLAGGED   .*\n.* SO THAT THE TERME MACRO WILL FREE IT. IF OPERAND 3 IS OMITTED,    .*\n.* A SAVE AREA WILL BE ASSEMBLED IN LINE.                            .*\n.* IF THE USER REQUESTS RENT CODING, A DSECT WILL BE OBTAINED, FOR THE\n.* SAVE AREA AND THE $$SCR16 AREA FOR OTHER CBS MACROS. THESE TWO\n.* FIELDS WILL BE ORGED BETWEEN THE USER DSECT IF ANY\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.\n         GBLA  &COUNTER\n         GBLA  &RENTSW\n         GBLA  &RENTSW2\n         GBLA  &PL1SW,&SPVAL\n         GBLB  &$$SCR16       DEFINES MACRO WORK AREA ONCE\n         GBLC  &CPUTYPE      USED TO PASS CPU SPECIFICATION TO CBS MACS\n         GBLC  &GPRG         REG. NOTATION SET BY REGISTER MACRO\n         GBLC  &RELATED      SET BY 'GENAME' MACRO TO ARTIFICIAL NAME\n         LCLA  &BASECTR,&USECTR,&USEDISP\n         LCLB  &R13DSCT\n         LCLA  &IDSIZE,&BSIZE\n         LCLA  &SUBPOOL\n         LCLC  &B\n         LCLC  &EAR(4),&FAR(4),&GAR(4)\n         LCLC  &SCRNM        NAME OF SCRATCH AREA IN DSECT\n.* IF NO DSECT NAME WAS SPECIFIED, OBTAIN ONE AND REINVOKE MACRO\n         AIF   ('&TRACEIT' NE 'RENT').OKGEN\n         AIF   ('&DSECT(1)' NE '').OKGEN\n         GENAME\n&B       SETC  '&RELATED'(1,7)\n         AIF   ('&DSECT(2)' EQ '').IG\n&NAME    ENTER &BASE,&ID,&TRACEIT,CPU=&CPU,                            ,\n               PL1=&PL1,LV=&LV,                                        ,\n               SAVE=&SAVE,SP=&SP,DSECT=(&B,&DSECT(2)),                 $\n               COMMENT=&COMMENT\n         MEXIT\n.IG      ANOP\n&NAME    ENTER &BASE,&ID,&TRACEIT,                                     $\n               DSECT=(&B,&GPRG.13),CPU=&CPU,PL1=&PL1,LV=&LV,SP=&SP,    $\n               SAVE=&SAVE,COMMENT=&COMMENT\n         MEXIT\n.*\n.OKGEN   ANOP\n&COUNTER SETA  &COUNTER+1\n         AIF   ('&CPU' EQ '').NULLCPU\n&CPUTYPE SETC  '&CPU'\n.NULLCPU ANOP\n.*                           NOW TO GENERATE COMMENTS                .*\n         AIF   ('&COMMENT' EQ 'NO').NOCOM\n         SPACE\n***********************************************************************\n*                                                                     *\n         AIF  (T'&BASE NE 'O').S1\n         AIF   ('&PL1' EQ 'YES').S1A\n*                  BASE REGISTER OMITTED, 12 ASSUMED                  *\n         AGO   .S1\n.S1A     ANOP\n*        BASE REGISTER OMITTED, 11 ASSUMED                            *\n.S1      AIF   (T'&ID NE 'O').S2\n*          I.D. FIELD OMITTED -                                       *\n         AIF   (T'&NAME NE 'O').S3\n*              THE I.D. FIELD WILL HAVE THE CSECT NAME                *\n*                         FOLLOWED BY A GENERATED NAME.               *\n         AGO   .S2\n.S3      ANOP\n* THE I.D. FIELD WILL HAVE THE CSECTNAME FOLLOWED BY THE NAMEFIELD    *\n*                                      OF THIS MACRO                  *\n.S2      ANOP\n         AIF   ('&PL1' NE 'YES').S2A\n*      PL/1 INTERFACE WILL BE ESTABLISHED                             *\n.S2A     ANOP\n         AIF   ('&LV' EQ '').S2B\n*      ADDITIONAL SAVE AREA WILL BE OBTAINED                          *\n.S2B     ANOP\n.S4      AIF   ('&TRACEIT' NE 'NOTRACE' AND '&TRACEIT' NE 'RENT').S5\n* THIS CODE WILL GET A NEW SAVE AREA EACH TIME IT IS USED             *\n         AGO   .S6\n.V1      ANOP\n&SUBPOOL SETA  1\n         AGO   .V3\n.V2      ANOP\n&SUBPOOL SETA  &SP\n         AGO   .V3\n.ERROR7  ANOP\n         MNOTE 4,'DSECT=&DSECT IS INVALID'\n         MNOTE *,'VALID FORMAT IS DSECT=(DSECTNAME,DSECTBASEREG)'\n         AGO   .S12B\n.S5      AIF   (T'&TRACEIT NE 'O').S6\n*  THIRD OPERAND OMITTED, THE SAVE AREA WILL BE GENERATED IN LINE.    *\n.S6      ANOP\n*                                                                     *\n***********************************************************************\n         SPACE\n.NOCOM   ANOP\n         AIF   ('&SP' NE '').V2\n         AIF   ('&PL1' EQ 'YES').V1\n&SUBPOOL SETA  2\n.V3      ANOP\n         AIF   ('&PL1' NE 'YES').V4\n&PL1SW   SETA  &SUBPOOL+1\n.V4      ANOP\n         AIF   ('&TRACEIT' EQ 'RENT').VAL1\n         AIF   ('&LV' EQ '' AND '&SP' EQ '' AND '&DSECT' EQ '').VALEXIT\n         AIF   ('&TRACEIT' EQ '').VAL2\n         ENTERROR ('THIRD OPERAND',&TRACEIT),                          $\n               (LV,&LV,SP,&SP,DSECT,&DSECT),                           $\n               (LV,&LV,SP,&SP,DSECT,&DSECT)\n         AGO   .VALEXIT\n.VAL2    ANOP\n         ENTERROR ('THIRD OPERAND',(OMITTED)),                         $\n               (LV,&LV,SP,&SP,DSECT,&DSECT),                           $\n               (LV,&LV,SP,&SP,DSECT,&DSECT)\n         AGO   .VALEXIT\n.VAL1    ANOP\n.VAL3    ANOP\n         AIF   ('&LV' NE '').VALEXIT\n         AIF   ('&DSECT' EQ '').VALEXIT\n&GAR(3)  SETC  'DSECT'\n&GAR(4)  SETC  '&DSECT'\n&EAR(3)  SETC  'LV'\n&EAR(4)  SETC  'OMITTED'\n&FAR(3)  SETC  'DSECT'\n&FAR(4)  SETC  '&DSECT'\n         AIF   (('&DSECT(2)' EQ '13' OR '&DSECT(2)' EQ '&GPRG.13')     $\n               AND '&TRACEIT' EQ 'RENT').VALEX2\n.VALEXIT ANOP\n         ENTERROR (&EAR(1),&EAR(2)),(&FAR(1),&FAR(2))\n         ENTERROR (&EAR(3),&EAR(4)),(&FAR(3),&FAR(4)),                 $\n               (&GAR(1),&GAR(2),&GAR(3),&GAR(4))\n.VALEX2  ANOP\n         AIF   (T'&BASE EQ 'O').S7\n         AIF   (N'&BASE NE 1).SETBASE\n         AIF   (T'&BASE NE 'N').ERROR2\n         AIF   (&BASE GT 15).ERROR4\n         AIF   (&BASE LT 1).ERROR4\n.ERR4    ANOP\n&B       SETC  '&BASE(1)'\n.USING   ANOP\n         USING  *,&B\n.SETCHAR ANOP\n         AIF   (T'&ID EQ 'O').SETO\n         AIF   ('&ID'(1,1) EQ '''').SETBL\n&IDSIZE  SETA  K'&ID/2*2+1\n.SETBSIZ ANOP\n&BSIZE   SETA  &IDSIZE+5\n         AIF   ('&BASE' EQ '*').FIXDISP\n&NAME    B     &BSIZE.(,15)       BRANCH AROUND ID\n.DFIXRET ANOP\n         DC    AL1(&IDSIZE)            CHARACTER COUNT OF I.D. FIELD\n         AIF   (T'&ID NE 'O').S9\n.*   S9 WILL USE THE GIVEN I.D. FIELD\n         AIF   (T'&NAME NE 'O').S10\n.* S10 WILL USE THE CSECT-MACRO NAME\n.* THE FOLLOWING CODE WILL USE CSECT-GENERATED NAME\n*    IDENTIFICATION FIELD FOLLOWS - -\n         DC          CL19'&SYSECT - ENTRY &COUNTER'\n*\n         AGO   .S11\n.FIXDISP ANOP\n&NAME    B     *+&BSIZE           BRANCH AROUND ID\n         AGO   .DFIXRET\n.SETBL   ANOP\n&IDSIZE  SETA  K'&ID/2*2-1\n         AGO   .SETBSIZ\n.SETO    ANOP\n&IDSIZE  SETA  19\n         AGO   .SETBSIZ\n.S9      ANOP\n         AIF   ('&ID'(1,1) NE '''').S9A\n         DC    CL&IDSIZE.&ID\n         AGO   .S11\n.S9A     ANOP\n         DC    CL&IDSIZE'&ID'\n         AGO   .S11\n.S10     ANOP\n*    IDENTIFICATION FIELD FOLLOWS - -\n         DC         CL19'&SYSECT - &NAME'\n*\n.S11     ANOP\n         STM   &GPRG.14,&GPRG.12,12(&GPRG.13)\n         AIF   ('&BASE' EQ '*').S8\n         LA    &B,0(,&GPRG.15)\n         AGO   .S8\n.S7      ANOP\n         AIF   ('&PL1' EQ 'YES').S7A\n&B       SETC  '12'\n         AGO   .USING\n.S7A     ANOP\n&B       SETC  '11'\n         AGO   .USING\n.S8      ANOP\n.S12     AIF   ('&TRACEIT' NE 'NOTRACE' AND '&TRACEIT' NE 'RENT').S13\n  AIF   ('&DSECT(2)' EQ '&GPRG.13' OR '&DSECT(2)' EQ '13').R13DSCT\n.R13RET  ANOP\n&RENTSW  SETA  &RENTSW+1\n         AIF   ('&LV' NE '' AND &SUBPOOL EQ 0).SPGET1\n         AIF   (&SUBPOOL EQ 0).SPGET2\n         AIF   ('&LV' NE '').GETMORE\n         LA    &GPRG.1,88          LENGTH OF SAVE AREA\n         AGO   .GETMOR\n.R13DSCT ANOP\n&R13DSCT SETB  1\n.* GENERATE THE SAVE AREA DSECT\n&DSECT(1) DSECT\n&SAVE    DS    18F                 REGISTER SAVE AREA\n         AIF   (&$$SCR16).NULSCR\n&$$SCR16 SETB   1            MARK FOR NO MORE WORK AREAS BY NAME\n         AIF   ('&LV' EQ '').NOLV1  IF NO LV, NO ORGS\n         ORG   *+&LV\n.NOLV1   ANOP\n$$SCR16  DS    2D\n         AIF   ('&LV' EQ '').NULSCR  IF NO LV, DON'T DROP ORGED CTR\n         ORG   *-(&LV+16)\n.NULSCR  ANOP\n&SYSECT  CSECT\n         AGO   .R13RET        RETURN FROM DSECT DEFINITION HEADING\n.EXTRA   ANOP\n         AIF   (&R13DSCT).EXTRA2\n         GENAME\n&B       SETC  '&RELATED'(1,7)\n         USING &B,&GPRG.13\n&B       DSECT\n&SAVE    DS    18F           WD1,BACKCHAIN,FWDCHAIN,REGS:14,15,0-12\n         AIF   (&$$SCR16).NOLV4    IF $$SCR16 DEFINED, DON'T NEED IT\n         AIF   ('&LV' EQ '').NOLV3\n         ORG   *+&LV               FALL BEHIND USER'S DSECT\n.NOLV3   ANOP\n$$SCR16  DS    2D\n&$$SCR16 SETB  1\n         AIF   ('&LV' EQ '').NOLV4\n         ORG   *-(&LV+16)\n.NOLV4   ANOP\n&SYSECT  CSECT\n&$$SCR16 SETB  1\n.EXTRA2  ANOP\n         BAL   &GPRG.1,*+4         SET PARAMETER LIST ADDRESS\n         SVC   10                      ISSUE GETMAIN (REGMAIN) SVC\n         LA    &GPRG.1,0(,&GPRG.1) CLEAR HI ORDER BYTE\n         XC    0(72,&GPRG.1),0(&GPRG.1)\n         ST    &GPRG.0,0(,&GPRG.1) SAVE FIELD LENGTH\n         AIF   (&SUBPOOL EQ 0).S12C\n         MVI   0(&GPRG.1),&SUBPOOL SAVE SUBPOOL NUMBER\n.S12C    ANOP\n         ST    &GPRG.1,8(,&GPRG.13)\n         ST    &GPRG.13,4(,&GPRG.1)\n         MULTBASE &BASE\n         LM    &GPRG.15,&GPRG.1,16(&GPRG.13)\n         L     &GPRG.13,8(,&GPRG.13)\n         AIF   ('&DSECT(1)' EQ '').S12A\n         AIF   ('&DSECT(2)' EQ '').ERROR7\n         USING &DSECT(1),&DSECT(2)\n.S12A    ANOP\n         AIF   ('&DSECT(2)' EQ '').S12B\n   AIF   ('&DSECT(2)' EQ '13').S12B\n         AIF   ('&DSECT(2)' EQ '&GPRG.13').S12B\n         LA    &DSECT(2),72(,&GPRG.13) ESTABLISH DSECT ADDRESSABILITY\n.S12B    ANOP\n         AIF   ('&PL1' EQ 'YES').SETPL1\n         MEXIT\n.SPGET1  ANOP\n         LA    &GPRG.0,88+&LV      SET LENGTH\n         AGO   .EXTRA\n.SPGET2  ANOP\n         LA    &GPRG.0,88          LENGTH, NO LV SPECIFIED\n         AGO   .EXTRA\n.S13     AIF   (T'&TRACEIT NE 'O').ERROR1\n.S13A    ANOP\n         CNOP  0,4\n         BAL   &GPRG.1,*+76        ADDRESS AND GO AROUND SAVE AREA\n&SAVE    DC    18F'0'  DEFINE SAVE AREA\n         ST    &GPRG.1,8(,&GPRG.13) SAVE FORWARD POINTER\n         ST    &GPRG.13,4(,&GPRG.1) SAVE BACKWORD POINTER\n         MULTBASE &BASE\n         LM    &GPRG.0,&GPRG.1,20(&GPRG.13)\n         L     &GPRG.13,8(,&GPRG.13)\n         AIF   ('&PL1' EQ 'YES').SETPL1\n         MEXIT\n.SETPL1  ANOP\n         MVI   0(&GPRG.13),X'80'   SET PL/1 FLAGS\n         MEXIT\n.SETBASE ANOP\n&BASECTR SETA  N'&BASE\n.SB2     ANOP\n&USECTR  SETA  &USECTR+1\n         USING *+&USEDISP,&BASE(&USECTR)\n&USEDISP SETA  &USEDISP+4096\n         AIF   (&USECTR NE &BASECTR).SB2\n&B       SETC  '&BASE(1)'\n         AGO   .SETCHAR\n.GETMORE ANOP\n         LA    &GPRG.1,88+&LV      LOAD FIELD SIZE\n.GETMOR  ANOP\n         LA    &GPRG.0,&SUBPOOL    INSERT SUBPOOL ID\n         SLL   &GPRG.0,24\n         OR    &GPRG.0,&GPRG.1\n&RENTSW2 SETA  &RENTSW2+1\n         AGO   .EXTRA\n.ERROR1  MNOTE 4,'ILLEGAL ENTRY IN THIRD OPERAND (&TRACEIT)'\n         SPACE 2\n***********************************************************************\n*              THE THIRD OPERAND MUST BE 'RENT' OR OMITTED            *\n*              IT WILL BE ASSUMED THAT IT WAS OMITTED                 *\n***********************************************************************\n         SPACE 2\n         AGO   .S13A\n.ERROR2  ANOP\n         AIF   ('&BASE' EQ '*').SETCHAR\n         AIF   (T'&BASE EQ 'U').ERR4\n.ERROR2B MNOTE 4,'FIRST OPERAND (&BASE) IS ILLEGAL'\n         SPACE 2\n***********************************************************************\n* THE FIRST OPERAND IS THE BASE REGISTER IT MUST BE A NUMBER BETWEEN  *\n*  ZERO AND FIFTEEN . IT WILL BE TREATED AS IF IT WAS OMITTED,        *\n.ERR2B   ANOP\n*      12 WILL BE ASSIGNED AS THE BASE.                               *\n***********************************************************************\n         SPACE 2\n         AGO   .S7\n.ERROR4  AIF   (&BASE NE 0).ERROR2\n         MNOTE *,'W-A-R-N-I-N-G 0  WILL BE ASSIGNED AS THE BASE'\n         SPACE 2\n***********************************************************************\n*   THIS CODE WILL HAVE NO BASE REGISTER                              *\n***********************************************************************\n         SPACE 2\n         AGO  .ERR4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTERROR": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x06\\x00\\x06\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO                                                              0000\n         ENTERROR &INCON,&INCOMP,&IGN                                       0010\n         ENTRRR 4,'INCONSISTENT OPERANDS',&INCON                            0020\n         ENTRRR *,'IS NOT COMPATIBLE WITH THE FOLLOWING -',&INCOMP          0030\n         ENTRRR 2,'FOLLOWING OPERANDS IGNORED',&IGN                         0040\n         MEND                                                               0050\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER1": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x01R\\x01R\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 338, "newlines": 338, "modlines": 0, "user": "TST2SSG"}, "text": "     MACRO\n&NAME    ENTER1  &BASE,&ID,&TRACEIT,                                   X\n               &CPU=,                                                  ,\n               &PL1=NO,&LV=,&SAVE=,&SP=,&DSECT=,&COMMENT=\n.*\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*\n.*                  ENTER MACRO                                      .*\n.* PURPOSE - THIS MACRO WILL ASSUME REGISTER 15 TO HAVE AN ENTRY     .*\n.* POINT ADDRESS  IT WILL SET UP OPERAND 1 AS A BASE REGISTER. IF NO .*\n.* OPERAND 1, 12 WILL BE USED. IT WILL SET UP OPERAND 2 AS AN ENTRY  .*\n.* POINT I.D. FIELD. IF OMITTED THEN THE INSTRUCTION NAME OR 'ENTRY  .*\n.* POINT' WILL BE USED. IF OPERAND 3 IS 'TRACE'  A GETMAIN WILL BE   .*\n.* ISSUED FOR A SAVE AREA EACH TIME THE ROUTINE IS ENTERED. IF THE   .*\n.* THIRD OPERAND IS 'NOTRACE' THE GOTTEN SAVE AREA WILL BE FLAGGED   .*\n.* SO THAT THE TERME MACRO WILL FREE IT. IF OPERAND 3 IS OMITTED,    .*\n.* A SAVE AREA WILL BE ASSEMBLED IN LINE.                            .*\n.* IF THE USER REQUESTS RENT CODING, A DSECT WILL BE OBTAINED, FOR THE\n.* SAVE AREA AND THE $$SCR16 AREA FOR OTHER CBS MACROS. THESE TWO\n.* FIELDS WILL BE ORGED BETWEEN THE USER DSECT IF ANY\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.\n         GBLA  &COUNTER\n         GBLA  &RENTSW\n         GBLA  &RENTSW2\n         GBLA  &PL1SW,&SPVAL\n         GBLB  &$$SCR16       DEFINES MACRO WORK AREA ONCE\n         GBLC  &CPUTYPE      USED TO PASS CPU SPECIFICATION TO CBS MACS\n         GBLC  &GPRG         REG. NOTATION SET BY REGISTER MACRO\n         GBLC  &RELATED      SET BY 'GENAME' MACRO TO ARTIFICIAL NAME\n         LCLA  &BASECTR,&USECTR,&USEDISP\n         LCLB  &R13DSCT\n         LCLA  &IDSIZE,&BSIZE\n         LCLA  &SUBPOOL\n         LCLC  &B\n         LCLC  &EAR(4),&FAR(4),&GAR(4)\n         LCLC  &SCRNM        NAME OF SCRATCH AREA IN DSECT\n.* IF NO DSECT NAME WAS SPECIFIED, OBTAIN ONE AND REINVOKE MACRO\n         AIF   ('&TRACEIT' NE 'RENT').OKGEN\n         AIF   ('&DSECT(1)' NE '').OKGEN\n         GENAME\n&B       SETC  '&RELATED'(1,7)\n         AIF   ('&DSECT(2)' EQ '').IG\n&NAME    ENTER1   &BASE,&ID,&TRACEIT,CPU=&CPU,                         X\n               PL1=&PL1,LV=&LV,                                        ,\n               SAVE=&SAVE,SP=&SP,DSECT=(&B,&DSECT(2)),                 $\n               COMMENT=&COMMENT\n         MEXIT\n.IG      ANOP\n&NAME    ENTER1  &BASE,&ID,&TRACEIT,                                   X\n               DSECT=(&B,&GPRG.13),CPU=&CPU,PL1=&PL1,LV=&LV,SP=&SP,    $\n               SAVE=&SAVE,COMMENT=&COMMENT\n         MEXIT\n.*\n.OKGEN   ANOP\n&COUNTER SETA  &COUNTER+1\n         AIF   ('&CPU' EQ '').NULLCPU\n&CPUTYPE SETC  '&CPU'\n.NULLCPU ANOP\n.*                           NOW TO GENERATE COMMENTS                .*\n         AIF   ('&COMMENT' EQ 'NO').NOCOM\n         SPACE\n***********************************************************************\n*                                                                     *\n         AIF ('&GPRG' NE '').S1AA\n* REGISTERS WILL BE DEFINED\n         REGISTER\n.S1AA    ANOP\n         AIF  (T'&BASE NE 'O').S1\n         AIF   ('&PL1' EQ 'YES').S1A\n*                  BASE REGISTER OMITTED, 12 ASSUMED                  *\n         AGO   .S1\n.S1A     ANOP\n*        BASE REGISTER OMITTED, 11 ASSUMED                            *\n.S1      AIF   (T'&ID NE 'O').S2\n*          I.D. FIELD OMITTED -                                       *\n         AIF   (T'&NAME NE 'O').S3\n*              THE I.D. FIELD WILL HAVE THE CSECT NAME                *\n*                         FOLLOWED BY A GENERATED NAME.               *\n         AGO   .S2\n.S3      ANOP\n* THE I.D. FIELD WILL HAVE THE CSECTNAME FOLLOWED BY THE NAMEFIELD    *\n*                                      OF THIS MACRO                  *\n.S2      ANOP\n         AIF   ('&PL1' NE 'YES').S2A\n*      PL/1 INTERFACE WILL BE ESTABLISHED                             *\n.S2A     ANOP\n         AIF   ('&LV' EQ '').S2B\n*      ADDITIONAL SAVE AREA WILL BE OBTAINED                          *\n.S2B     ANOP\n.S4      AIF   ('&TRACEIT' NE 'NOTRACE' AND '&TRACEIT' NE 'RENT').S5\n* THIS CODE WILL GET A NEW SAVE AREA EACH TIME IT IS USED             *\n         AGO   .S6\n.V1      ANOP\n&SUBPOOL SETA  1\n         AGO   .V3\n.V2      ANOP\n&SUBPOOL SETA  &SP\n         AGO   .V3\n.ERROR7  ANOP\n         MNOTE 4,'DSECT=&DSECT IS INVALID'\n         MNOTE *,'VALID FORMAT IS DSECT=(DSECTNAME,DSECTBASEREG)'\n         AGO   .S12B\n.S5      AIF   (T'&TRACEIT NE 'O').S6\n*  THIRD OPERAND OMITTED, THE SAVE AREA WILL BE GENERATED IN LINE.    *\n.S6      ANOP\n*                                                                     *\n***********************************************************************\n         SPACE\n.NOCOM   ANOP\n         AIF   ('&SP' NE '').V2\n         AIF   ('&PL1' EQ 'YES').V1\n&SUBPOOL SETA  2\n.V3      ANOP\n         AIF   ('&PL1' NE 'YES').V4\n&PL1SW   SETA  &SUBPOOL+1\n.V4      ANOP\n         AIF   ('&TRACEIT' EQ 'RENT').VAL1\n         AIF   ('&LV' EQ '' AND '&SP' EQ '' AND '&DSECT' EQ '').VALEXIT\n         AIF   ('&TRACEIT' EQ '').VAL2\n         ENTERROR ('THIRD OPERAND',&TRACEIT),                          $\n               (LV,&LV,SP,&SP,DSECT,&DSECT),                           $\n               (LV,&LV,SP,&SP,DSECT,&DSECT)\n         AGO   .VALEXIT\n.VAL2    ANOP\n         ENTERROR ('THIRD OPERAND',(OMITTED)),                         $\n               (LV,&LV,SP,&SP,DSECT,&DSECT),                           $\n               (LV,&LV,SP,&SP,DSECT,&DSECT)\n         AGO   .VALEXIT\n.VAL1    ANOP\n.VAL3    ANOP\n         AIF   ('&LV' NE '').VALEXIT\n         AIF   ('&DSECT' EQ '').VALEXIT\n&GAR(3)  SETC  'DSECT'\n&GAR(4)  SETC  '&DSECT'\n&EAR(3)  SETC  'LV'\n&EAR(4)  SETC  'OMITTED'\n&FAR(3)  SETC  'DSECT'\n&FAR(4)  SETC  '&DSECT'\n         AIF   (('&DSECT(2)' EQ '13' OR '&DSECT(2)' EQ '&GPRG.13')     $\n               AND '&TRACEIT' EQ 'RENT').VALEX2\n.VALEXIT ANOP\n         ENTERROR (&EAR(1),&EAR(2)),(&FAR(1),&FAR(2))\n         ENTERROR (&EAR(3),&EAR(4)),(&FAR(3),&FAR(4)),                 $\n               (&GAR(1),&GAR(2),&GAR(3),&GAR(4))\n.VALEX2  ANOP\n         AIF   (T'&BASE EQ 'O').S7\n         AIF   (N'&BASE NE 1).SETBASE\n         AIF   (T'&BASE NE 'N').ERROR2\n         AIF   (&BASE GT 15).ERROR4\n         AIF   (&BASE LT 1).ERROR4\n.ERR4    ANOP\n&B       SETC  '&BASE(1)'\n.USING   ANOP\n         USING  *,&B\n.SETCHAR ANOP\n         AIF   (T'&ID EQ 'O').SETO\n         AIF   ('&ID'(1,1) EQ '''').SETBL\n&IDSIZE  SETA  K'&ID/2*2+1\n.SETBSIZ ANOP\n&BSIZE   SETA  &IDSIZE+5\n         AIF   ('&BASE' EQ '*').FIXDISP\n&NAME    B     &BSIZE.(,15)       BRANCH AROUND ID\n.DFIXRET ANOP\n         DC    AL1(&IDSIZE)            CHARACTER COUNT OF I.D. FIELD\n         AIF   (T'&ID NE 'O').S9\n.*   S9 WILL USE THE GIVEN I.D. FIELD\n         AIF   (T'&NAME NE 'O').S10\n.* S10 WILL USE THE CSECT-MACRO NAME\n.* THE FOLLOWING CODE WILL USE CSECT-GENERATED NAME\n*    IDENTIFICATION FIELD FOLLOWS - -\n         DC    CL24'&SYSECT - ENTRY &COUNTER &SYSDATE'\n*\n         AGO   .S11\n.FIXDISP ANOP\n&NAME    B     *+&BSIZE           BRANCH AROUND ID\n         AGO   .DFIXRET\n.SETBL   ANOP\n&IDSIZE  SETA  K'&ID/2*2-1\n         AGO   .SETBSIZ\n.SETO    ANOP\n&IDSIZE  SETA  24\n         AGO   .SETBSIZ\n.S9      ANOP\n         AIF   ('&ID'(1,1) NE '''').S9A\n         DC    CL&IDSIZE.&ID\n         AGO   .S11\n.S9A     ANOP\n         DC    CL&IDSIZE'&ID'\n         AGO   .S11\n.S10     ANOP\n*    IDENTIFICATION FIELD FOLLOWS - -\n         DC    CL24'&SYSECT -&NAME &SYSDATE'\n*\n.S11     ANOP\n         STM   &GPRG.14,&GPRG.12,12(&GPRG.13)\n         AIF   ('&BASE' EQ '*').S8\n         LA    &B,0(,&GPRG.15)\n         AGO   .S8\n.S7      ANOP\n         AIF   ('&PL1' EQ 'YES').S7A\n&B       SETC  '12'\n         AGO   .USING\n.S7A     ANOP\n&B       SETC  '11'\n         AGO   .USING\n.S8      ANOP\n.S12     AIF   ('&TRACEIT' NE 'NOTRACE' AND '&TRACEIT' NE 'RENT').S13\n  AIF   ('&DSECT(2)' EQ '&GPRG.13' OR '&DSECT(2)' EQ '13').R13DSCT\n.R13RET  ANOP\n&RENTSW  SETA  &RENTSW+1\n         AIF   ('&LV' NE '' AND &SUBPOOL EQ 0).SPGET1\n         AIF   (&SUBPOOL EQ 0).SPGET2\n         AIF   ('&LV' NE '').GETMORE\n         LA    &GPRG.1,88          LENGTH OF SAVE AREA\n         AGO   .GETMOR\n.R13DSCT ANOP\n&R13DSCT SETB  1\n.* GENERATE THE SAVE AREA DSECT\n&DSECT(1) DSECT\n&SAVE    DS    18F \\               REGISTER SAVE AREA\n         AIF   (&$$SCR16).NULSCR\n&$$SCR16 SETB   1            MARK FOR NO MORE WORK AREAS BY NAME\n         AIF   ('&LV' EQ '').NOLV1  IF NO LV, NO ORGS\n         ORG   *+&LV\n.NOLV1   ANOP\n$$SCR16  DS    2D\n         AIF   ('&LV' EQ '').NULSCR  IF NO LV, DON'T DROP ORGED CTR\n         ORG   *-(&LV+16)\n.NULSCR  ANOP\n&SYSECT  CSECT\n         AGO   .R13RET        RETURN FROM DSECT DEFINITION HEADING\n.EXTRA   ANOP\n         AIF   (&R13DSCT).EXTRA2\n         GENAME\n&B       SETC  '&RELATED'(1,7)\n         USING &B,&GPRG.13\n&B       DSECT\n&SAVE    DS    18F \\         WD1,BACKCHAIN,FWDCHAIN,REGS:14,15,0-12\n         AIF   (&$$SCR16).NOLV4    IF $$SCR16 DEFINED, DON'T NEED IT\n         AIF   ('&LV' EQ '').NOLV3\n         ORG   *+&LV               FALL BEHIND USER'S DSECT\n.NOLV3   ANOP\n$$SCR16  DS    2D\n&$$SCR16 SETB  1\n         AIF   ('&LV' EQ '').NOLV4\n         ORG   *-(&LV+16)\n.NOLV4   ANOP\n&SYSECT  CSECT\n&$$SCR16 SETB  1\n.EXTRA2  ANOP\n         BAL   &GPRG.1,*+4         SET PARAMETER LIST ADDRESS\n         SVC   10                      ISSUE GETMAIN (REGMAIN) SVC\n         LA    &GPRG.1,0(,&GPRG.1) CLEAR HI ORDER BYTE\n         XC    0(72,&GPRG.1),0(&GPRG.1)\n         ST    &GPRG.0,0(,&GPRG.1) SAVE FIELD LENGTH\n         ST    &GPRG.1,8(,&GPRG.13)\n         ST    &GPRG.13,4(,&GPRG.1)\n         MULTBASE &BASE\n         LM    &GPRG.0,&GPRG.1,20(&GPRG.13)\n         L     &GPRG.13,8(,&GPRG.13)\n         AIF   ('&DSECT(1)' EQ '').S12A\n         AIF   ('&DSECT(2)' EQ '').ERROR7\n         USING &DSECT(1),&DSECT(2)\n.S12A    ANOP\n         AIF   ('&DSECT(2)' EQ '').S12B\n   AIF   ('&DSECT(2)' EQ '13').S12B\n         AIF   ('&DSECT(2)' EQ '&GPRG.13').S12B\n         LA    &DSECT(2),72(,&GPRG.13) ESTABLISH DSECT ADDRESSABILITY\n.S12B    ANOP\n         AIF   ('&PL1' EQ 'YES').SETPL1\n         MEXIT\n.SPGET1  ANOP\n         LA    &GPRG.0,88+&LV      SET LENGTH\n         AGO   .EXTRA\n.SPGET2  ANOP\n         LA    &GPRG.0,88          LENGTH, NO LV SPECIFIED\n         AGO   .EXTRA\n.S13     AIF   (T'&TRACEIT NE 'O').ERROR1\n.S13A    ANOP\n         CNOP  0,4\n         BAL   &GPRG.1,*+76        ADDRESS AND GO AROUND SAVE AREA\n&SAVE    DC    18F'0'  DEFINE SAVE AREA\n         ST    &GPRG.1,8(,&GPRG.13) SAVE FORWARD POINTER\n         ST    &GPRG.13,4(,&GPRG.1) SAVE BACKWORD POINTER\n         MULTBASE &BASE\n         LM    &GPRG.0,&GPRG.1,20(&GPRG.13)\n         L     &GPRG.13,8(,&GPRG.13)\n         AIF   ('&PL1' EQ 'YES').SETPL1\n         MEXIT\n.SETPL1  ANOP\n         MVI   0(&GPRG.13),X'80'   SET PL/1 FLAGS\n         MEXIT\n.SETBASE ANOP\n&BASECTR SETA  N'&BASE\n.SB2     ANOP\n&USECTR  SETA  &USECTR+1\n         USING *+&USEDISP,&BASE(&USECTR)\n&USEDISP SETA  &USEDISP+4096\n         AIF   (&USECTR NE &BASECTR).SB2\n&B       SETC  '&BASE(1)'\n         AGO   .SETCHAR\n.GETMORE ANOP\n         LA    &GPRG.1,88+&LV      LOAD FIELD SIZE\n.GETMOR  ANOP\n         LA    &GPRG.0,&SUBPOOL    INSERT SUBPOOL ID\n         SLL   &GPRG.0,24\n         OR    &GPRG.0,&GPRG.1\n&RENTSW2 SETA  &RENTSW2+1\n         AGO   .EXTRA\n.ERROR1  MNOTE 4,'ILLEGAL ENTRY IN THIRD OPERAND (&TRACEIT)'\n         SPACE 2\n***********************************************************************\n*              THE THIRD OPERAND MUST BE 'RENT' OR OMITTED            *\n*              IT WILL BE ASSUMED THAT IT WAS OMITTED                 *\n***********************************************************************\n         SPACE 2\n         AGO   .S13A\n.ERROR2  ANOP\n         AIF   ('&BASE' EQ '*').SETCHAR\n         AIF   (T'&BASE EQ 'U').ERR4\n.ERROR2B MNOTE 4,'FIRST OPERAND (&BASE) IS ILLEGAL'\n         SPACE 2\n***********************************************************************\n* THE FIRST OPERAND IS THE BASE REGISTER IT MUST BE A NUMBER BETWEEN  *\n*  ZERO AND FIFTEEN . IT WILL BE TREATED AS IF IT WAS OMITTED,        *\n.ERR2B   ANOP\n*      12 WILL BE ASSIGNED AS THE BASE.                               *\n***********************************************************************\n         SPACE 2\n         AGO   .S7\n.ERROR4  AIF   (&BASE NE 0).ERROR2\n         MNOTE *,'W-A-R-N-I-N-G 0  WILL BE ASSIGNED AS THE BASE'\n         SPACE 2\n***********************************************************************\n*   THIS CODE WILL HAVE NO BASE REGISTER                              *\n***********************************************************************\n         SPACE 2\n         AGO  .ERR4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTRRR": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x19\\x00\\x19\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO                                                              0000\n         ENTRRR &A,&B,&C                                                    0010\n         LCLA  &D,&E                                                        0020\n         LCLC  &QUOTE                                                       0030\n         AIF   ('&C' EQ '').EXIT                                            0040\n         AIF   ('&C(2)' EQ '' AND '&C(4)' EQ '' AND '&C(6)' EQ ''      $    0050\n               AND '&C(8)' EQ '' AND '&C(10)' EQ '').EXIT                   0060\n&D       SETA  1                                                            0070\n&E       SETA  N'&C                                                         0080\n         MNOTE &A,&B                                                        0090\n.S1      AIF   ('&C(&D+1)' EQ '').S2                                        0100\n         AIF   ('&C(&D)'(1,1) EQ '''').S3                                   0110\n         MNOTE *,'&C(&D)=&C(&D+1)'                                          0120\n.S2      ANOP                                                               0130\n         AIF   (&D GE &E).EXIT                                              0140\n&D       SETA  &D+2                                                         0150\n         AGO   .S1                                                          0160\n.S3      ANOP                                                               0170\n.* THE FOLLOWING 2 CARDS WERE MADE NECESSARY BY OS REL. 20                  0180\n.* IBM: PACK THIS IN YOUR POOP CHUTE   --------------------                 0190\n&QUOTE   SETC  ''''                                                         0200\n         MNOTE *,'&QUOTE&C(&D)&QUOTE=&C(&D+1)'                              0210\n         AGO   .S2                                                          0220\n.EXIT    ANOP                                                               0230\n         MEND                                                               0240\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EOFELEM": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "TST2SSG"}, "text": "         EJECT\n***********************************************************************\n*     THIS DSECT IS FOR AN ELEMENT ON THE CHAIN OF RELATIVE ADDRESSES *\n*     OF END OF FILE MARKS IN THE EXTENT.                             *\n***********************************************************************\n         SPACE 2\nEOFELEM$ DSECT\n         DS    0F\nEOFTTRN DS    0XL4                    RELATIVE DISK ADDRESS OF EOF\nEOFTTR  DS    0XL3\nEOFTT   DS    XL2\nEOFR    DS    X\nEOFN    DS    X\nEOFNEXT DS    A                       NEXT ITEM ON CHAIN\nEOFELEM EQU   EOFELEM$,*-EOFELEM$\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQREG": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO\n         EQREG\n         LCLA  &CT\n&CT      SETA  0\n.AGAIN   ANOP\nR&CT     EQU   &CT\n         AIF   (&CT GE 10).INCR\nR0&CT    EQU   &CT\n.INCR    ANOP\n&CT      SETA  &CT+1\n         AIF   (&CT LE 15).AGAIN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUATES": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00!\\x00!\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO\n         EQUATES\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n         SPACE  1\nEQ       EQU    8\nNE       EQU    7\nLT       EQU    4\nGT       EQU    2\nGE       EQU    10\nLE       EQU    12\nOV       EQU    1\nPLUS     EQU    2\nMINUS    EQU    4\nZERO     EQU    8\nALLON    EQU    1\nMIXED    EQU    4\nALLOFF   EQU    8\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUREG": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x04\\x00\\x04\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO\n         EQUREG\n         REGISTER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT": {"ttr": 1045, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x08\\x00\\x08\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO\n&LABEL   EXIT\n         GBLC  &IHBEXIT            *\n         AIF   ('&IHBEXIT' EQ '').ERR1\n&LABEL   B     &IHBEXIT            BRANCH TO EXIT ROUTINE\n         MEXIT                     *\n.ERR1    MNOTE 8,'*** MACRO USED IMPROPERLY'\n         MEND                      *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIXMENU": {"ttr": 1047, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "TST2SSG"}, "text": "+date:%&ZDATE    * * *    FIXPDS  ENTRY  MENU     * * *      +time:%&ZTIME\n%SELECT OPTION ===>_ZCMD     +\n%\n%   1 +FIXPDS      - Recover deleted PDS members\n+\n+\n+         The fixpds utility allows you to browse the physical\n+           members of a PDS from the last one and back,\n+           one at a time, regardless of whether a directory\n+           entry exists or not.  After exiting the browse,\n+           you have the option to enter a new name for the\n+           member, and a directory entry will be created for\n+           that name.  If you do not enter a name, you will\n+           then browse the next member backwards.  If you do\n+           enter a name, then after the new directory entry\n+           is created, the next member back will be browsed.\n+           You have the opportunity to repeat the process.\n+           Ending twice causes you to quit execution of the\n+           program. %PRESS ENTER TO START.\n)INIT\n   &ZCMD = '1'\n   .HELP = TP\n)PROC\n   &SEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'CMD(%CSPFPDS)'\n                *,'?'\n                )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FPDSP0": {"ttr": 1282, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x11\\x00\\x11\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "TST2SSG"}, "text": "%-------------------------  FIXPDS -- SELECT PANEL  ----------------------------\n%COMMAND ===>_ZCMD\n%\n%     ENTER MEMBER NAME DESIRED FOR THE MEMBER JUST BROWSED:\n%                       ===>_SPFMEMB +\n%\n%              BLANK  +WILL NOT PERFORM STOW AND WILL\n                            PROCEED TO PREVIOUS MEMBER\n%\n%              END KEY+WILL TERMINATE PROCESSING\n%\n%\n)INIT\n &SPFMEMB = ' '\n)PROC\n VER (&SPFMEMB,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FPDSP1": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x15\\x00\\x15\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "TST2SSG"}, "text": "%-------------------------  FIXPDS -- ENTRY PANEL  -----------------------------\n%COMMAND ===>_ZCMD\n%\n%\n%   ENTER DATASET NAME ===>_DATASET                                     +\n%\n%\n%\n+   PHYSICAL MEMBERS FROM SPECIFIED DATASET WILL BE BROWSED IN\n+   REVERSE ORDER (NEWEST MEMBER FIRST)\n+\n%\n%\n%\n%\n%\n)INIT\n)PROC\n  VER (&DATASET,NONBLANK)\n  VER (&DATASET,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FPDS00": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x08\\x00\\x08\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "TST2SSG"}, "text": "FPDS000I 'MEMBER &OLDMEM STOWED'\n'A DIRECTORY ENTRY HAS BEEN ADDED IDENTIFYING THIS MEMBER AS &OLDMEM'\nFPDS001I 'END OF LIBRARY'  .ALARM=YES\n'ALL PHYSICAL MEMBERS WERE BROWSED AND NONE WERE SELECTED'\nFPDS003I 'ALLOCATION FAILED' .ALARM=YES\n'SPECIFIED DATASET COULD NOT BE ALLOCATED - RETURN CODE &ALLOCCC'\nFPDS004I 'ALLOCATION FAILED' .ALARM=YES\n'CONTROL FILE COULD NOT BE ALLOCATED - RETURN CODE &ALLOCCC'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENAME": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO                                                          NAME0000\n         GENAME &NAME,&DIV=CBS                                          NAME0010\n         GBLC  &RELATED                                                 NAME0020\n         GBLB  &DUPNAME                                                 NAME0030\n         GBLA  &CBSCTR                                                  NAME0040\n         LCLC  &N                                                       NAME0050\n         AIF   ('&NAME' EQ '').S3                                       NAME0060\n         RELATE &NAME                                                   NAME0070\n         AIF   (&DUPNAME).S1                                            NAME0080\n.S3      ANOP                                                           NAME0090\n&N       SETC  '&CBSCTR   '                                             NAME0100\n.S4      ANOP                                                           NAME0110\n         AIF   ('&N'(4,1) NE ' ').S2                                    NAME0120\n&N       SETC  '0&N'                                                    NAME0130\n         AGO   .S4                                                      NAME0140\n.S2      ANOP                                                           NAME0150\n&N       SETC  '&DIV'.'&N'(1,4)                                         NAME0160\n&CBSCTR  SETA  &CBSCTR+1                                                NAME0170\n         AIF   ('&NAME' EQ '').S5                                       NAME0180\n         RELATE &NAME,&N                                                NAME0190\n.S1      ANOP                                                           NAME0200\n         MEXIT                                                          NAME0210\n.S5      ANOP                                                           NAME0220\n&RELATED SETC  '&N'                                                     NAME0230\n         MEXIT                                                          NAME0240\n         MEND                                                           NAME0250\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MULTBASE": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x10\\x00\\x10\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO                                                              0000\n&N       MULTBASE &B                                                        0010\n         LCLA  &CTR                                                         0020\n         AIF   ('&N' EQ '').S1                                              0030\n&N       DS    0H                                                           0040\n.S1      ANOP                                                               0050\n         AIF   (N'&B LT 2).EXIT                                             0060\n         LA    1,2048                                                       0070\n         SLL   1,1                                                          0080\n&CTR     SETA  2                                                            0090\n.LOOP    AIF   ('&B(&CTR)' EQ '').EXIT                                      0100\n         LA    &B(&CTR),0(&B(&CTR-1),1)                                     0110\n&CTR     SETA  &CTR+1                                                       0120\n         AGO   .LOOP                                                        0130\n.EXIT    ANOP                                                               0140\n         MEND                                                               0150\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RBWENTER": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x01L\\x01L\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 332, "newlines": 332, "modlines": 0, "user": "TST2SSG"}, "text": "     MACRO\n&NAME    RBWENTER &BASE,&ID,&TRACEIT,                                  $\n               &CPU=,                                                  ,\n               &PL1=NO,&LV=,&SAVE=,&SP=,&DSECT=,&COMMENT=\n.*\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*\n.*                  RBWENTER MACRO                                   .*\n.* PURPOSE - THIS MACRO WILL ASSUME REGISTER 15 TO HAVE AN ENTRY     .*\n.* POINT ADDRESS  IT WILL SET UP OPERAND 1 AS A BASE REGISTER. IF NO .*\n.* OPERAND 1, 12 WILL BE USED. IT WILL SET UP OPERAND 2 AS AN ENTRY  .*\n.* POINT I.D. FIELD. IF OMITTED THEN THE INSTRUCTION NAME OR 'ENTRY  .*\n.* POINT' WILL BE USED. IF OPERAND 3 IS 'TRACE'  A GETMAIN WILL BE   .*\n.* ISSUED FOR A SAVE AREA EACH TIME THE ROUTINE IS ENTERED. IF THE   .*\n.* THIRD OPERAND IS 'NOTRACE' THE GOTTEN SAVE AREA WILL BE FLAGGED   .*\n.* SO THAT THE TERME MACRO WILL FREE IT. IF OPERAND 3 IS OMITTED,    .*\n.* A SAVE AREA WILL BE ASSEMBLED IN LINE.                            .*\n.* IF THE USER REQUESTS RENT CODING, A DSECT WILL BE OBTAINED, FOR THE\n.* SAVE AREA AND THE $$SCR16 AREA FOR OTHER CBS MACROS. THESE TWO\n.* FIELDS WILL BE ORGED BETWEEN THE USER DSECT IF ANY\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.\n         GBLA  &COUNTER\n         GBLA  &RENTSW\n         GBLA  &RENTSW2\n         GBLA  &PL1SW,&SPVAL\n         GBLB  &$$SCR16       DEFINES MACRO WORK AREA ONCE\n         GBLC  &CPUTYPE      USED TO PASS CPU SPECIFICATION TO CBS MACS\n         GBLC  &GPRG         REG. NOTATION SET BY REGISTER MACRO\n         GBLC  &RELATED      SET BY 'GENAME' MACRO TO ARTIFICIAL NAME\n         LCLA  &BASECTR,&USECTR,&USEDISP\n         LCLB  &R13DSCT\n         LCLA  &IDSIZE,&BSIZE\n         LCLA  &SUBPOOL\n         LCLC  &B\n         LCLC  &EAR(4),&FAR(4),&GAR(4)\n         LCLC  &SCRNM        NAME OF SCRATCH AREA IN DSECT\n.* IF NO DSECT NAME WAS SPECIFIED, OBTAIN ONE AND REINVOKE MACRO\n         AIF   ('&TRACEIT' NE 'RENT').OKGEN\n         AIF   ('&DSECT(1)' NE '').OKGEN\n         GENAME\n&B       SETC  '&RELATED'(1,7)\n         AIF   ('&DSECT(2)' EQ '').IG\n&NAME    RBWENTER &BASE,&ID,&TRACEIT,CPU=&CPU,                         ,\n               PL1=&PL1,LV=&LV,                                        ,\n               SAVE=&SAVE,SP=&SP,DSECT=(&B,&DSECT(2)),                 $\n               COMMENT=&COMMENT\n         MEXIT\n.IG      ANOP\n&NAME    RBWENTER &BASE,&ID,&TRACEIT,                                  $\n               DSECT=(&B,&GPRG.13),CPU=&CPU,PL1=&PL1,LV=&LV,SP=&SP,    $\n               SAVE=&SAVE,COMMENT=&COMMENT\n         MEXIT\n.*\n.OKGEN   ANOP\n&COUNTER SETA  &COUNTER+1\n         AIF   ('&CPU' EQ '').NULLCPU\n&CPUTYPE SETC  '&CPU'\n.NULLCPU ANOP\n.*                           NOW TO GENERATE COMMENTS                .*\n         AIF   ('&COMMENT' EQ 'NO').NOCOM\n         SPACE\n***********************************************************************\n*                                                                     *\n         AIF  (T'&BASE NE 'O').S1\n         AIF   ('&PL1' EQ 'YES').S1A\n*                  BASE REGISTER OMITTED, 12 ASSUMED                  *\n         AGO   .S1\n.S1A     ANOP\n*        BASE REGISTER OMITTED, 11 ASSUMED                            *\n.S1      AIF   (T'&ID NE 'O').S2\n*          I.D. FIELD OMITTED -                                       *\n         AIF   (T'&NAME NE 'O').S3\n*              THE I.D. FIELD WILL HAVE THE CSECT NAME                *\n*                         FOLLOWED BY A GENERATED NAME.               *\n         AGO   .S2\n.S3      ANOP\n* THE I.D. FIELD WILL HAVE THE CSECTNAME FOLLOWED BY THE NAMEFIELD    *\n*                                      OF THIS MACRO                  *\n.S2      ANOP\n         AIF   ('&PL1' NE 'YES').S2A\n*      PL/1 INTERFACE WILL BE ESTABLISHED                             *\n.S2A     ANOP\n         AIF   ('&LV' EQ '').S2B\n*      ADDITIONAL SAVE AREA WILL BE OBTAINED                          *\n.S2B     ANOP\n.S4      AIF   ('&TRACEIT' NE 'NOTRACE' AND '&TRACEIT' NE 'RENT').S5\n* THIS CODE WILL GET A NEW SAVE AREA EACH TIME IT IS USED             *\n         AGO   .S6\n.V1      ANOP\n&SUBPOOL SETA  1\n         AGO   .V3\n.V2      ANOP\n&SUBPOOL SETA  &SP\n         AGO   .V3\n.ERROR7  ANOP\n         MNOTE 4,'DSECT=&DSECT IS INVALID'\n         MNOTE *,'VALID FORMAT IS DSECT=(DSECTNAME,DSECTBASEREG)'\n         AGO   .S12B\n.S5      AIF   (T'&TRACEIT NE 'O').S6\n*  THIRD OPERAND OMITTED, THE SAVE AREA WILL BE GENERATED IN LINE.    *\n.S6      ANOP\n*                                                                     *\n***********************************************************************\n         SPACE\n.NOCOM   ANOP\n         AIF   ('&SP' NE '').V2\n         AIF   ('&PL1' EQ 'YES').V1\n&SUBPOOL SETA  2\n.V3      ANOP\n         AIF   ('&PL1' NE 'YES').V4\n&PL1SW   SETA  &SUBPOOL+1\n.V4      ANOP\n         AIF   ('&TRACEIT' EQ 'RENT').VAL1\n         AIF   ('&LV' EQ '' AND '&SP' EQ '' AND '&DSECT' EQ '').VALEXIT\n         AIF   ('&TRACEIT' EQ '').VAL2\n         ENTERROR ('THIRD OPERAND',&TRACEIT),                          $\n               (LV,&LV,SP,&SP,DSECT,&DSECT),                           $\n               (LV,&LV,SP,&SP,DSECT,&DSECT)\n         AGO   .VALEXIT\n.VAL2    ANOP\n         ENTERROR ('THIRD OPERAND',(OMITTED)),                         $\n               (LV,&LV,SP,&SP,DSECT,&DSECT),                           $\n               (LV,&LV,SP,&SP,DSECT,&DSECT)\n         AGO   .VALEXIT\n.VAL1    ANOP\n.VAL3    ANOP\n         AIF   ('&LV' NE '').VALEXIT\n         AIF   ('&DSECT' EQ '').VALEXIT\n&GAR(3)  SETC  'DSECT'\n&GAR(4)  SETC  '&DSECT'\n&EAR(3)  SETC  'LV'\n&EAR(4)  SETC  'OMITTED'\n&FAR(3)  SETC  'DSECT'\n&FAR(4)  SETC  '&DSECT'\n         AIF   (('&DSECT(2)' EQ '13' OR '&DSECT(2)' EQ '&GPRG.13')     $\n               AND '&TRACEIT' EQ 'RENT').VALEX2\n.VALEXIT ANOP\n         ENTERROR (&EAR(1),&EAR(2)),(&FAR(1),&FAR(2))\n         ENTERROR (&EAR(3),&EAR(4)),(&FAR(3),&FAR(4)),                 $\n               (&GAR(1),&GAR(2),&GAR(3),&GAR(4))\n.VALEX2  ANOP\n         AIF   (T'&BASE EQ 'O').S7\n         AIF   (N'&BASE NE 1).SETBASE\n         AIF   (T'&BASE NE 'N').ERROR2\n         AIF   (&BASE GT 15).ERROR4\n         AIF   (&BASE LT 1).ERROR4\n.ERR4    ANOP\n&B       SETC  '&BASE(1)'\n.USING   ANOP\n         USING  *,&B\n.SETCHAR ANOP\n         AIF   (T'&ID EQ 'O').SETO\n         AIF   ('&ID'(1,1) EQ '''').SETBL\n&IDSIZE  SETA  K'&ID/2*2+1\n.SETBSIZ ANOP\n&BSIZE   SETA  &IDSIZE+5\n         AIF   ('&BASE' EQ '*').FIXDISP\n&NAME    B     &BSIZE.(,15)       BRANCH AROUND ID\n.DFIXRET ANOP\n         DC    AL1(&IDSIZE)            CHARACTER COUNT OF I.D. FIELD\n         AIF   (T'&ID NE 'O').S9\n.*   S9 WILL USE THE GIVEN I.D. FIELD\n         AIF   (T'&NAME NE 'O').S10\n.* S10 WILL USE THE CSECT-MACRO NAME\n.* THE FOLLOWING CODE WILL USE CSECT-GENERATED NAME\n*    IDENTIFICATION FIELD FOLLOWS - -\n         DC          CL19'&SYSECT - ENTRY &COUNTER'\n*\n         AGO   .S11\n.FIXDISP ANOP\n&NAME    B     *+&BSIZE           BRANCH AROUND ID\n         AGO   .DFIXRET\n.SETBL   ANOP\n&IDSIZE  SETA  K'&ID/2*2-1\n         AGO   .SETBSIZ\n.SETO    ANOP\n&IDSIZE  SETA  19\n         AGO   .SETBSIZ\n.S9      ANOP\n         AIF   ('&ID'(1,1) NE '''').S9A\n         DC    CL&IDSIZE.&ID\n         AGO   .S11\n.S9A     ANOP\n         DC    CL&IDSIZE'&ID'\n         AGO   .S11\n.S10     ANOP\n*    IDENTIFICATION FIELD FOLLOWS - -\n         DC         CL19'&SYSECT - &NAME'\n*\n.S11     ANOP\n         STM   &GPRG.14,&GPRG.12,12(&GPRG.13)\n         AIF   ('&BASE' EQ '*').S8\n         LA    &B,0(,&GPRG.15)\n         AGO   .S8\n.S7      ANOP\n         AIF   ('&PL1' EQ 'YES').S7A\n&B       SETC  '12'\n         AGO   .USING\n.S7A     ANOP\n&B       SETC  '11'\n         AGO   .USING\n.S8      ANOP\n.S12     AIF   ('&TRACEIT' NE 'NOTRACE' AND '&TRACEIT' NE 'RENT').S13\n  AIF   ('&DSECT(2)' EQ '&GPRG.13' OR '&DSECT(2)' EQ '13').R13DSCT\n.R13RET  ANOP\n&RENTSW  SETA  &RENTSW+1\n         AIF   ('&LV' NE '' AND &SUBPOOL EQ 0).SPGET1\n         AIF   (&SUBPOOL EQ 0).SPGET2\n         AIF   ('&LV' NE '').GETMORE\n         LA    &GPRG.1,88          LENGTH OF SAVE AREA\n         AGO   .GETMOR\n.R13DSCT ANOP\n&R13DSCT SETB  1\n.* GENERATE THE SAVE AREA DSECT\n&DSECT(1) DSECT\n&SAVE    DS    18F                 REGISTER SAVE AREA\n         AIF   (&$$SCR16).NULSCR\n&$$SCR16 SETB   1            MARK FOR NO MORE WORK AREAS BY NAME\n$$SCR16  DS    2D\n.NULSCR  ANOP\n&SYSECT  CSECT\n         AGO   .R13RET        RETURN FROM DSECT DEFINITION HEADING\n.EXTRA   ANOP\n         AIF   (&R13DSCT).EXTRA2\n         GENAME\n&B       SETC  '&RELATED'(1,7)\n         USING &B,&GPRG.13\n&B       DSECT\n&SAVE    DS    18F           WD1,BACKCHAIN,FWDCHAIN,REGS:14,15,0-12\n         AIF   (&$$SCR16).NOLV4    IF $$SCR16 DEFINED, DON'T NEED IT\n         AIF   ('&LV' EQ '').NOLV3\n         ORG   *+&LV               FALL BEHIND USER'S DSECT\n.NOLV3   ANOP\n$$SCR16  DS    2D\n&$$SCR16 SETB  1\n         AIF   ('&LV' EQ '').NOLV4\n         ORG   *-(&LV+16)\n.NOLV4   ANOP\n&SYSECT  CSECT\n&$$SCR16 SETB  1\n.EXTRA2  ANOP\n         BAL   &GPRG.1,*+4         SET PARAMETER LIST ADDRESS\n         SVC   10                      ISSUE GETMAIN (REGMAIN) SVC\n         LA    &GPRG.1,0(,&GPRG.1) CLEAR HI ORDER BYTE\n         XC    0(72,&GPRG.1),0(&GPRG.1)\n         ST    &GPRG.0,0(,&GPRG.1) SAVE FIELD LENGTH\n         AIF   (&SUBPOOL EQ 0).S12C\n         MVI   0(&GPRG.1),&SUBPOOL SAVE SUBPOOL NUMBER\n.S12C    ANOP\n         ST    &GPRG.1,8(,&GPRG.13)\n         ST    &GPRG.13,4(,&GPRG.1)\n         MULTBASE &BASE\n         LM    &GPRG.15,&GPRG.1,16(&GPRG.13)\n         L     &GPRG.13,8(,&GPRG.13)\n         AIF   ('&DSECT(1)' EQ '').S12A\n         AIF   ('&DSECT(2)' EQ '').ERROR7\n         USING &DSECT(1),&DSECT(2)\n.S12A    ANOP\n         AIF   ('&DSECT(2)' EQ '').S12B\n   AIF   ('&DSECT(2)' EQ '13').S12B\n         AIF   ('&DSECT(2)' EQ '&GPRG.13').S12B\n         LA    &DSECT(2),72(,&GPRG.13) ESTABLISH DSECT ADDRESSABILITY\n.S12B    ANOP\n         AIF   ('&PL1' EQ 'YES').SETPL1\n         MEXIT\n.SPGET1  ANOP\n         LA    &GPRG.0,88+&LV      SET LENGTH\n         AGO   .EXTRA\n.SPGET2  ANOP\n         LA    &GPRG.0,88          LENGTH, NO LV SPECIFIED\n         AGO   .EXTRA\n.S13     AIF   (T'&TRACEIT NE 'O').ERROR1\n.S13A    ANOP\n         CNOP  0,4\n         BAL   &GPRG.1,*+76        ADDRESS AND GO AROUND SAVE AREA\n&SAVE    DC    18F'0'  DEFINE SAVE AREA\n         ST    &GPRG.1,8(,&GPRG.13) SAVE FORWARD POINTER\n         ST    &GPRG.13,4(,&GPRG.1) SAVE BACKWORD POINTER\n         MULTBASE &BASE\n         LM    &GPRG.0,&GPRG.1,20(&GPRG.13)\n         L     &GPRG.13,8(,&GPRG.13)\n         AIF   ('&PL1' EQ 'YES').SETPL1\n         MEXIT\n.SETPL1  ANOP\n         MVI   0(&GPRG.13),X'80'   SET PL/1 FLAGS\n         MEXIT\n.SETBASE ANOP\n&BASECTR SETA  N'&BASE\n.SB2     ANOP\n&USECTR  SETA  &USECTR+1\n         USING *+&USEDISP,&BASE(&USECTR)\n&USEDISP SETA  &USEDISP+4096\n         AIF   (&USECTR NE &BASECTR).SB2\n&B       SETC  '&BASE(1)'\n         AGO   .SETCHAR\n.GETMORE ANOP\n         LA    &GPRG.1,88+&LV      LOAD FIELD SIZE\n.GETMOR  ANOP\n         LA    &GPRG.0,&SUBPOOL    INSERT SUBPOOL ID\n         SLL   &GPRG.0,24\n         OR    &GPRG.0,&GPRG.1\n&RENTSW2 SETA  &RENTSW2+1\n         AGO   .EXTRA\n.ERROR1  MNOTE 4,'ILLEGAL ENTRY IN THIRD OPERAND (&TRACEIT)'\n         SPACE 2\n***********************************************************************\n*              THE THIRD OPERAND MUST BE 'RENT' OR OMITTED            *\n*              IT WILL BE ASSUMED THAT IT WAS OMITTED                 *\n***********************************************************************\n         SPACE 2\n         AGO   .S13A\n.ERROR2  ANOP\n         AIF   ('&BASE' EQ '*').SETCHAR\n         AIF   (T'&BASE EQ 'U').ERR4\n.ERROR2B MNOTE 4,'FIRST OPERAND (&BASE) IS ILLEGAL'\n         SPACE 2\n***********************************************************************\n* THE FIRST OPERAND IS THE BASE REGISTER IT MUST BE A NUMBER BETWEEN  *\n*  ZERO AND FIFTEEN . IT WILL BE TREATED AS IF IT WAS OMITTED,        *\n.ERR2B   ANOP\n*      12 WILL BE ASSIGNED AS THE BASE.                               *\n***********************************************************************\n         SPACE 2\n         AGO   .S7\n.ERROR4  AIF   (&BASE NE 0).ERROR2\n         MNOTE *,'W-A-R-N-I-N-G 0  WILL BE ASSIGNED AS THE BASE'\n         SPACE 2\n***********************************************************************\n*   THIS CODE WILL HAVE NO BASE REGISTER                              *\n***********************************************************************\n         SPACE 2\n         AGO  .ERR4\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGISTER": {"ttr": 1298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x007\\x007\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO\n         REGISTER  &GPR=R,&FPR=\n         GBLB  &DUPNAME\n         GBLC  &GPRG,&FPRG\n         LCLA  &CTR,&I\n         LCLC  &R\n&CTR     SETA  N'&GPR+N'&FPR\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &CTR).EXIT\n         AIF   ('&GPR(&I)' EQ '').FPGEN\n&R       SETC  '&GPR(&I)'\n         SPACE 1\n         REMEMBER &R\n         AIF   (NOT &DUPNAME).GPGEN1\n         MNOTE *,'DUPLICATE LABEL REQUESTED -- ''&R'' -- IGNORED.'\n         AGO   .FPGEN\n.GPGEN1  AIF   ('&GPRG' NE '').GPGEN\n&GPRG    SETC  '&R'\n.GPGEN   ANOP\n&R.0     EQU   0\n&R.1     EQU   1\n&R.2     EQU   2\n&R.3     EQU   3\n&R.4     EQU   4\n&R.5     EQU   5\n&R.6     EQU   6\n&R.7     EQU   7\n&R.8     EQU   8\n&R.9     EQU   9\n&R.10    EQU   10\n&R.11    EQU   11\n&R.12    EQU   12\n&R.13    EQU   13\n&R.14    EQU   14\n&R.15    EQU   15\n         SPACE 2\n.FPGEN   AIF   ('&FPR(&I)' EQ '').LOOP\n&R       SETC  '&FPR(&I)'\n         SPACE 1\n         REMEMBER &R\n         AIF   (NOT &DUPNAME).FPGEN3\n         MNOTE *,'DUPLICATE LABEL REQUESTED -- ''&R'' -- IGNORED.'\n         AGO   .LOOP\n.FPGEN3  AIF   ('&FPRG' NE '').FPGEN2\n&FPRG    SETC  '&R'\n.FPGEN2  ANOP\n&R.0     EQU   0\n&R.2     EQU   2\n&R.4     EQU   4\n&R.6     EQU   6\n         SPACE 2\n         AGO   .LOOP\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REMEMBER": {"ttr": 1300, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x11\\x00\\x11\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO                                                          REM 0000\n         REMEMBER &NAME                                                 REM 0010\n         GBLC  &NAMES(256)                                              REM 0020\n         GBLB  &DUPNAME                                                 REM 0030\n         LCLA  &C                                                       REM 0040\n&DUPNAME SETB  0                                                        REM 0050\n&C       SETA  1                                                        REM 0060\n.LOOP    AIF   ('&NAMES(&C)' EQ '').ENTER                               REM 0070\n         AIF   ('&NAMES(&C)' EQ '&NAME').BAD                            REM 0080\n&C       SETA  &C+1                                                     REM 0090\n         AGO   .LOOP                                                    REM 0100\n.ENTER   ANOP                                                           REM 0110\n&NAMES(&C) SETC '&NAME'                                                 REM 0120\n         MEXIT                                                          REM 0130\n.BAD     ANOP                                                           REM 0140\n&DUPNAME SETB  1                                                        REM 0150\n         MEND                                                           REM 0160\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RRW@PRIM": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00T\\x00T\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "TST2SSG"}, "text": ")ATTR\n  # TYPE(INPUT) INTENS(LOW)  JUST(ASIS)\n  @ TYPE(INPUT) INTENS(HIGH) JUST(ASIS)\n)BODY\n+&ZDATE  %--------------  ISPF/PDF PRIMARY OPTION MENU  --- &ZJDATE --- &ZTIME -\n%OPTION  ===>_ZCMD                                                             +\n%                                                           @AA      +- &ZUSER\n%   0 #BA         +- Specify terminal and user parameters   @AB      +- &ZTIME\n%   1 #BB         +- Display source data or output listings @AC      +- &ZTERM\n%   2 #BC         +- Create or change source data           @AD      +- &ZKEYS\n%   3 #BD         +- Perform utility functions\n%   4 #BE         +- Invoke language processors in foreground\n%   5 #BF         +- Submit job for language processing\n%   6 #BG         +- Enter TSO command or CLIST\n%   7 #BH         +- Perform dialog testing\n%   I #BI         +- IBM Information Services\n%   P #BJ         +- XXX Telephone List\n%   M #BK         +- XXX-Developed Functions\n%   F #BL         +- XXX Old-Style Foreground Functions\n%   J #BM         +- CICS Assemble/Compile Batch Jobs\n%   S #BN         +- SMP/E Dialogs\n%   C #BO         +- Display summary of changes for this release\n%   T #BP         +- Display information about ISPF/PDF\n%   N #BQ         +- Most recent changes to the MVS/TSO environment\n%   U #BR         +- User information bulletins%<=== CHECK PERIODICALLY ===+\n%   X #BS         +- Terminate ISPF using log and list defaults\n+Enter%END+command to terminate ISPF.\n)INIT\n&BA='ISPF PARMS '\n&BB='BROWSE     '\n&BC='EDIT       '\n&BD='UTILITIES  '\n&BE='FOREGROUND '\n&BF='BATCH      '\n&BG='COMMAND    '\n&BH='DIALOG TEST'\n&BI='INFO       '\n&BJ='PHONE LIST '\n&BK='XXX        '\n&BL='XXXFOR     '\n&BM='XXXJOB     '\n&BN='SMP/E      '\n&BO='CHANGES    '\n&BP='TUTORIAL   '\n&BQ='NEWS       '\n&BR='USER INFO. '\n&BS='EXIT       '\n&AA='USERID  '\n&AB='TIME    '\n&AC='TERMINAL'\n&AD='PF KEYS '\n  .CURSOR = ZCMD\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                0,'PANEL(ISPOPTA)'\n                1,'PGM(ISRBRO)'\n                2,'PGM(ISREDIT)'\n                3,'PANEL(ISRUTIL)'\n                4,'PANEL(ISRFPA)'\n                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'\n                6,'PGM(ISRPTC)'\n                7,'PGM(ISRYXDR) NOCHECK'\n                I,'PANEL(XXXINFO)'\n                I2,'PGM(BLGINIT) PARM(SESS(XX))'\n                P,'PANEL(PHONEMEN)'\n                F,'PANEL(XXXFA)'\n                M,'PANEL(FIXMENU)'\n                J,'PANEL(XXXPJOB)'\n                S,'PGM(GIMISCV) PARM(&ZCMD) NEWAPPL(SMP2) NOCHECK'\n                C,'PGM(ISPTUTOR) PARM(ISR00005)'\n                T,'PGM(ISPTUTOR) PARM(ISR00000)'\n                V,'PANEL(SBGVAR)'\n                N,'CMD(%NEWS)'\n                NDATE,'CMD(%NEWSDATE)'\n                U,'PGM(ISPTUTOR) PARM(XXXUIND0)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SETPCB": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x000\\x000\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "TST2SSG"}, "text": "SETPCB   DSECT\n*        MAPPING OF SETPRT PARAMETER BLOCK\nSETPDCB  DS    AL4                DCB ADDRESS\nSETPUCS  DS    AL4                UCS ID\nSETPLOAD DS    X                  LOAD MODE\nSETPLFLD EQU   X'40'              FOLD\nSETPLNFL EQU   X'00'              NOFOLD\nSETPVER  DS    X                  VERIFY MODE\nSETPVVER EQU   X'10'              VERIFY\nSETPVNVR EQU   X'00'              NOVERIFY\nSETPOPTC DS    X                  OPTCD FLAGS\nSETPOBLK EQU   X'80'              BLOCK\nSETPOUBL EQU   X'40'              UNBLOCK\nSETPOSCH EQU   X'20'              SCHEDULE\nSETPONSC EQU   X'10'              NOSCHEDULE\nSETPOUFL EQU   X'08'              UNFOLD\nSETPOFLD EQU   X'04'              FOLD\nSETPOEXP EQU   X'01'              EXTENDED PARM LIST\nSETPFCB  DS    AL4                FCB ADDRESS OR ID\nSETPFCBO DS    X                  FCB OPTIONS\nSETPFCOA EQU   X'01'              ALIGN\nSETPFCOV EQU   X'80'              VERIFY\nSETPFLG1 DS    X                  FLAGS 1\nSETPF1BU EQU   X'80'              BURST\nSETPF1RX EQU   X'40'              REXMIT\nSETPF1IN EQU   X'20'              INIT\nSETPF1NP EQU   X'10'              NO PRTMSG\nSETPFLG2 DS    X                  FLAGS 2\nSETPF2MD EQU   X'80'              MODIFY IN STORAGE\nSETPF2C1 EQU   X'40'              CHARS1 IN STORAGE\nSETPF2C2 EQU   X'20'              CHARS2 IN STORAGE\nSETPF2C3 EQU   X'10'              CHARS3 IN STORAGE\nSETPF2C4 EQU   X'08'              CHARS4 IN STORAGE\nSETPF2FC EQU   X'04'              FCB IN STORAGE\nSETPCOPN DS    X                  # OF COPIES\nSETPCONR DS    X                  STARTING COPY NUMBER\nSETPPLEN DS    AL2                LENGTH OF PARMLIST\nSETPFCNT DS    X                  FLASH COUNT\nSETPMREF DS    X                  MODIFY TABLE REF CHAR\nSETPFLSH DS    CL4                FLASH FORM NAME\nSETPCOPY DS    AL4                COPY MODIFICATION MODULE\nSETPCHR1 DS    AL4                CHARS1 NAME OR ADDRESS\nSETPCHR2 DS    AL4                CHARS2 NAME OR ADDRESS\nSETPCHR3 DS    AL4                CHARS3 NAME OR ADDRESS\nSETPCHR4 DS    AL4                CHARS4 NAME OR ADDRESS\nSETPMSGA DS    AL4                MSGAREA ADDRESS\nSETPLDCB DS    AL4                LIBDCB ADDRESS\nSETPCBL  EQU   *-SETPCB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFCNTL": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00o\\x00o\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "TST2SSG"}, "text": "TSOC     TITLE 'PERFORM TSO PARSE AND DYNAMIC ALLOCATAION'\nTSOCNTL  CSECT\n         REGISTER\n         EJECT\n*     SYSTEM CONTROL BLOCKS\n         SPACE 2\n*        DATA SET CONTROL BLOCK\n         SPACE 1\nDS1LSTAR EQU   54,3                    ADDRESS OF LAST RECORD\n         SPACE 2\n*        FIXED LOW CORE\n         SPACE 1\nFLCCVT   EQU   16,4                    ADDRESS OF CVT\n         SPACE 2\n*        COMMUNICATIONS VECTOR TABLE\n         SPACE 1\nCVTPCNVT EQU   28,4                    ADDRESS OF TTR TO MBCCHHRR RTN\nCVTPRLTV EQU   32,4                    ADDRESS OF MBCCHHR TO TTR RTN\n         SPACE 2\n*        DATA CONTROL BLOCK\n         SPACE 1\nDCBEODAD EQU   33,3                    END OF DATA ADDRESS\nDCBRECFM EQU   36,2                    RECORD FORMAT\nDCBDDNAM EQU   40,8                    DDNAME\nDCBDEBAD EQU   44,4                    DATA EXTENT BLOCK ADDRESS\nDCBSYNAD EQU   57,3                    SYNCHRONUS ERROR ROUTINE ADDR\nDCBBLKSI EQU   62,2                    BLOCKSIZE\nDCBLRECL EQU   82,2                    LOGICAL RECORD LENGTH\n         SPACE 2\n*        JOB FILE CONTROL BLOCK\n         SPACE 1\nJFCBDSNM EQU   0,44                    DATASET NAME\nJFCBVOLS EQU   118,6                   VOLUME SERIAL NUMBER\n         EJECT\n***********************************************************************\n*  THIS ROUTINE PERFORMS INITIALIZATION AND LINKS TO TSO PARSE TO     *\n*  PROCESS TSO COMMAND.                                               *\n***********************************************************************\n         SPACE 2\n         RBWENTER ,,RENT,LV=L'TSOCCOR,DSECT=(TSOCDSCT,R13)\n         L     R10,0(,R1)              SAVE PARM ADDRESS\n*        LOAD  EP=RENTCORE             LOAD NON-REENTRANT CSECT\n*        LR    R11,R0                  ADDRESS IN R0\n         L     R11,=V(RENTCORE)        LOAD COMMON CSECT ADDRESS\n         USING RENTCORE,R11            ADDRESSABILITY\n***********************************************************************\n*   THIS ROUTINE OPENS THE EXCP AND BPAM DCB'S FOR THE REQUESTED      *\n*   DATASET, READS THE JFCB AND FORMAT 1 DSCB FOR THE DATASET,        *\n*   AND CALLS THE MAINLINE ROUTINE TO PROCESS THE DATASET.            *\n***********************************************************************\n         SPACE 2\n*        MVC   MEMBER,2(R10)           MOVE MEMBER NAME TO AREA\n         MVC   DCBDDNAM+EXCPDCB,FPDSDDN MOVE DDNAME TO EXCPDCB\n         MVC   DCBDDNAM+BPAMDCB,FPDSDDN MOVE DDNAME TO BPAMDCB\n         OPEN  MF=(E,OPENEXCP)         OPEN EXCP DCB\n         L     R15,=V(BPAMEOD)         GET EOD ROUTINE ADDRESS\n         STCM  R15,B'0111',DCBEODAD+BPAMDCB STORE IT IN BPAM DCB\n         L     R15,=V(BPAMSYN)         GET SYNAD ROUTINE ADDRESS\n         STCM  R15,B'0111',DCBSYNAD+BPAMDCB STORE IT IN BPAM DCB\n         OPEN  MF=(E,OPENBPAM)         OPEN BPAM DCB\n         LA    R1,BPAMDCB              ADDRESS OF BPAM DCB\n         MVC   DCBRECFM+BSAMDCB,DCBRECFM+BPAMDCB MOVE RECFM\n         MVC   DCBBLKSI+BSAMDCB,DCBBLKSI+BPAMDCB MOVE BLKSIZE\n         MVC   DCBLRECL+BSAMDCB,DCBLRECL+BPAMDCB MOVE LRECL\n         GETBUF (1),(2)                GET I/O BUFFER FOR BPAM\n         ST    R2,BUFRADDR             STORE BUFFER ADDRESS\n         RDJFCB MF=(E,OPENEXCP)        GET JFCB\n         MVC   CAMDSN,JFCBDSNM+JFCB    MOVE DSNAME TO CAMLIST\n         MVC   CAMVOL,JFCBVOLS+JFCB    MOVE VOLSER TO CAMLIST\n         OBTAIN DSCBCAM                GET FORMAT 1 DSCB\n         XR    R0,R0                   CLEAR REG 0\n         ICM   R0,B'1110',DS1LSTAR+DSCB PUT TTR IN R0\n         L     R1,EXCPDCB+DCBDEBAD     ADDRESS OF DEB\n         LA    R2,LSTARFDA             ADDRESS OF ANSWER AREA\n        STM   R8,R13,TSOCSVRG         SAVE REGS\n        L     R15,FLCCVT              CVT ADDRESS\n        L     R15,CVTPCNVT(R15)       PACK CONVERT RTN ADDRESS\n        LR   R8,R13                  PRESERVE R13\n        BALR  R14,R15                 LINK TO GET LSTAR MBBCCHHR\n        LR    R13,R8                  RESTORE R13\n        LM    R8,R13,TSOCSVRG       RESTORE OTHER REGS\n         CALL   MAINLINE,MF=(E,TSOCCALL) CALL MAINLINE ROUTINE\n        LR    R4,R15                SAVE RETURN CODE\n         EJECT\n***********************************************************************\n*   UPON RETURN FROM THE MAINLINE ROUTINE, THIS ROUTINE CLOSES AND    *\n*   FREES THE DATASET, FREES UP STORAGE, AND RETURNS.                 *\n***********************************************************************\n         SPACE 2\n         CLOSE MF=(E,CLOSEXCP)         CLOSE EXCP DCB\n*        DELETE  EP=RENTCORE          DELETE NON-REENTRANT CSECT\n         TERME NOZOREST,RC=(R4)   RETURN\n         EJECT\n*        CONSTANTS\nFPDSDDN  DC    CL8'FPDS0000'\n         SPACE 2\n         EJECT\n         LTORG\n         EJECT\n*        DSECT FOR PROGRAM DYNAMIC STORAGE\n         SPACE 2\nTSOCDSCT DSECT\nTSOCCOR$ DS    0X\nTSOCSVRG DS    6F\nTSOCCALL CALL  ,(*-*),MF=L\nTSOCDALR DS    A\nTSOCEF02 DS    A\nTSOCDID  DS    H\nTSOCCOR  EQU   TSOCCOR$,*-TSOCCOR$\n         COPY  SPFDSCT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFCODE": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x96\\x00\\x96\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 150, "newlines": 150, "modlines": 0, "user": "TST2SSG"}, "text": "         SPACE 2\n*        DATA CONTROL BLOCKS\n         SPACE 1\nEXCPDCB  DCB   MACRF=E,DDNAME=LIBRARY,DSORG=PS,EXLST=JFCBEXIT\n         EJECT\nBPAMDCB  DCB   MACRF=(R,W),DDNAME=LIBRARY,DSORG=PO,BUFNO=1\n         EJECT\nBSAMDCB  DCB   MACRF=W,DDNAME=FPDS0001,DSORG=PS\n         EJECT\n*        DATA EVENT CONTROL BLOCK FOR BPAM\n         SPACE 1\n         READ  DECB,SF,BPAMDCB,MF=L\n         SPACE 2\n*        DATA EVENT CONTROL BLOCK FOR BSAM\n         SPACE 1\n         WRITE DECBS,SF,BSAMDCB,,'S',MF=L\n         SPACE 2\n*        JOB FILE CONTROL BLOCK\n         SPACE 1\nJFCB     DS    CL176\n         SPACE 2\n*        EXIT LIST FOR RDJFCB\n         SPACE 1\nJFCBEXIT DS    0F\n         DC    X'87'\n         DC    AL3(JFCB)\n         SPACE 2\n*        CATALOG MANAGEMENT PARAMETER LIST\n         SPACE 1\nDSCBCAM  CAMLST SEARCH,CAMDSN,CAMVOL,DSCB\n         SPACE 2\n*        PARAMETER FIELDS FOR CATALOG MANAGEMENT\n      SPACE 1\nCAMDSN   DS    CL44                    DATASET NAME\nCAMVOL   DS    CL6                     VOLUME SERIAL\n         SPACE 2\n*        DATA SET CONTROL BLOCK\n         SPACE 1\n         DS    0D\nDSCB     DS    XL148\n         SPACE 2\n*        INPUT OUTPUT BLOCK\n         SPACE 1\nIOB      DS    0XL40\nIOBFLAG1 DC    B'01000010'\nIOBFLAG2 DC    X'00'\nIOBSENS0 DC    X'00'\nIOBSENS1 DC    X'00'\nIOBECBCC DC    X'00'\nIOBECBPT DC    AL3(ECB)\nIOBFLAG3 DC    X'00'\nIOBCSW   DC    XL7'00'\nIOBSIOCC DC    X'00'\nIOBSTART DC    AL3(0)\n         DS    X'00'\nIOBDCBPT DC    AL3(EXCPDCB)\n         DC    XL8'00'\nIOBSEEK  DS    0XL8\nIOBSM    DC    X'00'\nIOBSBB   DC    X'0000'\nIOBCCHHR DS    0XL5\nIOBSCCHH DS    0XL4\nIOBSCC   DC    X'0000'\nIOBSHH   DC    X'0000'\nIOBSR    DC    X'00'\n         SPACE 2\n*        EVENT CONTROL BLOCK\n         SPACE 1\nECB      DC    F'0'\n         SPACE 2\n*        COUNT AND DATA FIELD FOR I-O\n         SPACE 1\nCNTDATA  DS    0CL9\nCNT      DS    0XL8\nCNTCCHHR DS    0XL5\nCNTCCHH  DS    0XL4\nCNTCC    DS    XL2\nCNTHH    DS    XL2\nCNTR     DS    X\n         DS    XL3\nDATA     DS    CL1\n         SPACE 2\nDIRBUF   DS    CL256\n         EJECT\n*        CHANNEL COMMAND WORDS\n         SPACE 1\nCCWCSSEC EQU   X'23'                   SET SECTOR\nCCWCSHAE EQU   X'39'                   SEARCH HOME ADDRESS EQUAL\nCCWCSIDE EQU   X'31'                   SEARCH ID EQUAL\nCCWCSKHE EQU   X'69'                   SEARCH KEY HIGH OR EQUAL\nCCWCRCKD EQU   X'1E'                   READ COUNT, KEY, AND DATA\nCCWCRC   EQU   X'12'                   READ COUNT\nCCWCRD   EQU   X'06'                   READ DATA\nCCWCWD   EQU   X'05'                   WRITE DATA\nCCWCTIC  EQU   X'08'                   TRANSFER IN CHANNEL\nCCWCMT   EQU   X'80'                   MULTI-TRACK\nCCWFCC   EQU   X'40'                   CHAIN COMMANDS\nCCWFSLI  EQU   X'20'                   SUPRESS LENGTH INDICATION\n         SPACE 3\nCPSTRT   DS    0D                      START OF EXTENT CP\n         CCW   CCWCSSEC,ZERO,CCWFCC,1  SET SECTOR ZERO\n         CCW   CCWCSHAE,IOBCCHHR,CCWFCC,4\n         CCW   CCWCTIC,*-8,0,0\nCPRDLOP  DS    0D                      LOOP FOR FINDING EOF\n         CCW   CCWCRCKD+CCWCMT,CNTDATA,CCWFCC+CCWFSLI,L'CNTDATA\n         CCW   CCWCTIC,*-8,0,0\nCPLOOK   DS    0D                      PICK UP WHERE LEFT OFF\n         CCW   CCWCSIDE,IOBCCHHR,CCWFCC,5\n         CCW   CCWCTIC,*-8,0,0\n         CCW   CCWCTIC,CPRDLOP,0,0\n         SPACE 2\nCPGET    DS    0D                      FIND RECORD AFTER EOF\n         CCW   CCWCSIDE,IOBCCHHR,CCWFCC,5\n         CCW   CCWCTIC,*-8,0,0\n         CCW   CCWCRD,DATA,CCWFSLI,L'DATA\n         SPACE 2\nCPRDDIR  DS    0D                      FIND CORRECT DIR BLOCK AND RD\n         CCW   CCWCSSEC,ZERO,CCWFCC,1  SET SECTOR ZERO\n         CCW   CCWCSHAE,IOBSCCHH,CCWFCC,4 SEARCH HOME ADDRESS\n         CCW   CCWCTIC,*-8,0,0\nKEYLOOP  DS    0D\n         CCW   CCWCRC,CNT,CCWFCC,8     SAVE COUNT OF NEXT RECORD\n         CCW   CCWCSKHE+CCWCMT,MEMBER,CCWFCC,L'MEMBER FIND BLOCK\n         CCW   CCWCTIC,KEYLOOP,0,0     IF NOT RIGHT, LOOP\n         CCW   CCWCRD,DIRBUF,0,L'DIRBUF READ BLOCK\n         SPACE 2\nCPWTDIR  DS    0D\n         CCW   CCWCSIDE,IOBCCHHR,CCWFCC,5 FIND RIGHT RECORD\n         CCW   CCWCTIC,*-8,0,0\n         CCW   CCWCWD,DIRBUF,0,L'DIRBUF\n         EJECT\n*        LIST FORM OF OPEN AND CLOSE MACRO\n         SPACE 2\nOPENEXCP OPEN  (EXCPDCB,INPUT),MF=L\nOPENBPAM OPEN  (BPAMDCB,INPUT),MF=L\nOPENBSAM OPEN  (BSAMDCB,OUTPUT),MF=L\nCLOSEXCP CLOSE EXCPDCB,MF=L\nCLOSBPAM CLOSE BPAMDCB,MF=L\nCLOSBSAM CLOSE BSAMDCB,MF=L\n         SPACE 2\n*        WORKING STORAGE\n         SPACE 1\nPOINTER  DC    A(0)\nMEMBER   DS    CL8\nLSTARFDA DS    CL8                     MBBCCHHR OF END OF DATASET\nBUFRADDR DS    A                       ADDRESS OF BPAM IO BUFFER\n         SPACE 2\n*        CONSTANTS\n         SPACE 1\nZERO     DC    X'00'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFCORE": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x04\\x00\\x04\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "TST2SSG"}, "text": "RENT     TITLE 'NON-REENTRANT LOADED CSECT FOR FIXPDS'\nRENTCORE CSECT\n         COPY  SPFCODE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFDSCT": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\t\\x00\\t\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "TST2SSG"}, "text": "         EJECT\n***********************************************************************\n*       THIS DSECT DESCRIBES THE COMMON STATIC CORE LOAD MODULE       *\n*       WHICH IS USED BY ALL OTHER MODULES IN FIXPDS.                 *\n***********************************************************************\n         SPACE 2\nRENTCOR$ DSECT\n         COPY  SPFCODE\nRENTCORE EQU   RENTCOR$,*-RENTCOR$\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFFIX": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x9e\\x00\\x9e\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 158, "newlines": 158, "modlines": 0, "user": "TST2SSG"}, "text": "FIXD     TITLE 'FIXPDS - CORRECT PDS DIRECTORY TO POINT TO MEMBER'\nFIXDIR   CSECT\n         REGISTER\n         EJECT\n*     SYSTEM CONTROL BLOCKS\n         SPACE 2\n*        EVENT CONTROL BLOCK\n         SPACE 1\nECBNORM  EQU   X'7F'                   NORMAL COMPLETION\nECBPERR  EQU   X'41'                   PERMANENT ERROR\nECBDAEA  EQU   X'42'                   END OF EXTENT\n         SPACE 2\n*        CHANNEL STATUS WORD\n         SPACE 1\nCSWUSTAT EQU   3,7                     UNIT STATUS\nCSWUUEXC EQU   X'01'                   UNIT EXCEPTION\nCSWUUCHK EQU   X'02'                   UNIT CHECK\n         SPACE 2\n*        DATA CONTROL BLOCK\n         SPACE 1\nDCBDEBAD EQU   44,4                    DATA EXTENT BLOCK ADDRESS\n         SPACE 2\n*        DATA EXTENT BLOCK\n         SPACE 1\nDEBNMEXT EQU   16,1                    NUMBER OF EXTENTS\nDEBDASDS EQU   32,16                   DIR ACC DEVICE SECTION\n         SPACE 2\n*        DATA EXTENT BLOCK DIRECT ACCESS DEVICE SECTION\n         SPACE 1\nDEBBINUM EQU   4,2                     BIN NUMBER\nDEBSTRCH EQU   6,4                     START OF EXTENT CYL AND HEAD\nDEBSTRCC EQU   6,2                     START OF EXTENT CYLINDER\nDEBSTRHH EQU   8,2                     START OF EXTENT HEAD\nDEBENDCH EQU   10,4                    END OF EXTENT CYL AND HEAD\n         EJECT\n***********************************************************************\n* THIS ROUTINE STOWS THE APPROPRIATE MEMBER NAME IN THE DIRECTORY AS  *\n* AN ALIAS, SINCE THIS IS THE ONLY WAY BPAM ALLOWS YOU TO SUPPLY YOUR *\n* OWN TTR TO THE STOW.  IT STOWS WITH REPLACE, SO THAT IT DOESN'T CARE*\n* WHETHER THERE IS ALREADY A DIRECTORY ENTRY FOR THAT MEMBER.         *\n***********************************************************************\n         SPACE 2\n         RBWENTER ,,RENT,LV=L'FIXCORE,DSECT=(FIXDSCT,R13)\n         USING RENTCORE,R11\n         L     R10,0(,R1)              PICK UP ADDRESS OF TTRC\n         OPEN  (BPAMDCB,(OUTPUT)),MF=(E,OPENBPAM) OPEN BPAM FOR OUTPUT\n         MVC   FIXSMEMB,MEMBER         MOVE MEMBER NAME FOR STOW\n         MVC   FIXSTTRC,0(R10)         MOVE TTRC FOR STOW\n         OI    FIXSTTRC+3,X'80'        SET FLAG FOR ALIAS\n         STOW  BPAMDCB,FIXSTOW,R       STOW MEMBER NAME\n         CLOSE MF=(E,CLOSBPAM)         CLOSE DATASET AGAIN\n         EJECT\n***********************************************************************\n*  THIS ROUTINE READS THE DIRECTORY USING EXCP, FINDING THE CORRECT   *\n*  BLOCK, AND TURNS OFF THE ALIAS BIT IN THE DIRECTORY ENTRY.         *\n***********************************************************************\n         SPACE 2\n         L     R7,DCBDEBAD+EXCPDCB     GET ADDRESS OF DEB\n         XR    R3,R3                   CLEAR REGISTER\n         IC    R3,DEBNMEXT(,R7)        NUMBER OF EXTENTS\n         LA    R7,DEBDASDS(,R7)        POINT AT FIRST EXTENT ENTRY\n         XR    R4,R4\nDEBLOOP  DS    0Y\n         STC   R4,IOBSM                SET M = EXTENT NUMBER\n         MVC   IOBSBB,DEBBINUM(R7)     SET BB FROM DEB\n         MVC   IOBSCC,DEBSTRCC(R7)     SET CC FROM DEB\n         MVC   IOBSHH,DEBSTRHH(R7)     SET HH FROM DEB\n         MVI   IOBSR,X'01'             SET R = 1\n         XC    ECB,ECB                 CLEAR ECB\n         LA    R1,CPRDDIR              ADDRESS OF CHANNEL PROGRAM\n         STCM  R1,B'0111',IOBSTART     STORE IT IN IOB\n         EXCP  IOB                     READ APPROPRIATE DIRECTORY BLK\n         WAIT  ECB=ECB                 WAIT FOR COMPLETION\n         CLI   IOBECBCC,ECBNORM        NORMAL COMPLETION?\n         BE    FOUNDBLK                YES\n         CLI   IOBECBCC,ECBDAEA        END OF EXTENT ?\n         BE    ENDOFEXT                YES\n         CLI   IOBECBCC,ECBPERR        PERMANENT ERROR ?\n         BNE   IOERROR                 NO  - LET SYNADAF HANDLE IT\n         TM    CSWUSTAT+IOBCSW,CSWUUEXC END OF FILE?\n         BO    EOF                     YES - PROBLEM\n         B     IOERROR                 OTHERWISE, LET SYNADAF HANDLE IT\n         SPACE\nENDOFEXT DS    0Y\n*  AT END OF EXTENT, RESTART AT NEXT EXTENT IF IT EXISTS\n         LA    R4,1(,R1)               BUMP EXTENT NUMBER\n         CR    R4,R3                   COMPARE WITH # OF EXTENTS\n         BNL   EOF                     EQUAL OR HIGH - END OF FILE\n         LA    R7,L'DEBDASDS(,R7)      BUMP TO NEXT EXTENT IN DEB\n         B     DEBLOOP\n         EJECT\nIOERROR  DS    0Y\n*  I/O ERROR HANDLING ROUTINE\n         LA    R1,IOB                  POINT AT IOB\n         SYNADAF ACSMETH=EXCP          GET ERROR MESSAGE\n         LA    R1,50(,R1)              POINT PAST GARBAGE\n         LA    R0,78                   LENGTH\n         TPUT  (1),(0),R               PUT MESSAGE TO TERMINAL\n         SYNADRLS                      FREE BUFFER\n         ABEND X'001000',DUMP          SYSTEM 001 ABEND\n         SPACE 2\nEOF      DS    0Y\n*  ABEND IF DIRECTORY EXHAUSTED AND MEMBER NOT FOUND\n         ABEND 1980,DUMP\n         EJECT\nFOUNDBLK DS    0Y\n***********************************************************************\n*  HAVING FOUND THE RIGHT DIRECTORY BLOCK, WE NOW HAVE TO FIND THE    *\n*  ENTRY FOR THE MEMBER, AND THEN TURN OF THE ALIAS BIT.              *\n***********************************************************************\n         SPACE 2\n         XR    R5,R5\n         ICM   R5,B'0011',DIRBUF       PICK UP LENGTH FROM BLOCK\n         LA    R6,DIRBUF+2             POINT PAST LENGTH\n         SH    R5,=Y(2)                DECREMENT LENGTH\nMEMLOOP  DS    0Y\n         CLC   0(8,R6),MEMBER          IS THIS THE MEMBER\n         BE    FOUNDMEM                YES - FOUND IT\n         IC    R1,11(,R6)              PICK UP C BYTE\n         N     R1,=A(X'0000001F')      # OF HALFWORDS OF USER DATA\n         SLA   R1,1                    CONVERT TO # OF BYTES OF DATA\n         LA    R6,12(,R6)              BUMP POINTER PAST FIXED DATA\n         AR    R6,R1                   BUMP POINTER PAST USER DATA\n         SH    R5,=Y(12)               DECREMENT LENGTH BY FIXED DATA\n         SR    R5,R1                   DECREMENT LENGTH BY USER DATA\n         BNZ   MEMLOOP                 IF ANY MORE, LOOK AT NEXT\n         ABEND 1981,DUMP               MEMBER NOT FOUND - ERROR\n         SPACE\nFOUNDMEM DS    0Y\n         NI    11(R6),X'7F'            TURN OF ALIAS BIT\n         EJECT\n***********************************************************************\n*  THIS ROUTINE WRITES BACK THE CHANGED DIRECTORY BLOCK, AND RETURNS  *\n***********************************************************************\n         SPACE 2\n         CLOSE MF=(E,CLOSEXCP)         CLOSE EXCP DCB\n         OPEN  (EXCPDCB,(OUTPUT)),MF=(E,OPENEXCP) REOPEN DCB FOR OUTPUT\n         MVC   IOBCCHHR,CNTCCHHR       MOVE ADDRESS OF RECORD TO IOB\n         XC    ECB,ECB                 CLEAR ECB\n         LA    R1,CPWTDIR              ADDRESS OF CHANNEL PROGRAM\n         STCM  R1,B'0111',IOBSTART     STORE IT IN IOB\n         EXCP  IOB                     WRITE BACK DIRECTORY BLOCK\n         WAIT  ECB=ECB                 WAIT FOR COMPLETION\n         CLI   IOBECBCC,ECBNORM        NORMAL COMPLETION\n         BNE   IOERROR                 NO - GO TO SYNAD\n         TERME NOZOREST,RC=0           RETURN\n         EJECT\n         LTORG                         EJECT\n*        DSECT FOR PROGRAM DYNAMIC STORAGE\n         SPACE 2\nFIXDSCT  DSECT\nFIXCOR$  DS    0X\nFIXSTOW  DS    0XL12\nFIXSMEMB DS    CL8\nFIXSTTRC DS    XL4\nFIXCORE  EQU   FIXCOR$,*-FIXCOR$\n         COPY  SPFDSCT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFMAIN": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\xb4\\x00\\xb4\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 180, "newlines": 180, "modlines": 0, "user": "TST2SSG"}, "text": "MAIN     TITLE 'PDS FIX - MAIN LINE CALLING PROGRAM'\nMAINLINE CSECT\n         REGISTER\n         EJECT\n*     SYSTEM CONTROL BLOCKS\n         SPACE 2\n*        DATA CONTROL BLOCK\n         SPACE 1\nDCBDEBAD EQU    44,4                    DATA EXTENT BLOCK ADDRESS\n         SPACE 2\n*        DATA EXTENT BLOCK\n         SPACE 1\nDEBNMEXT EQU   16,1                     NUMBER OF EXTENTS\nDEBDASDS EQU   32,16                    DIR ACC DEVICE SECTION\n         SPACE 2\n*        DATA EXTENT BLOCK DIRECT ACCESS DEVICE SECTION\n         SPACE 1\nDEBBINUM EQU   4,2                     BIN NUMBER\nDEBSTRCH EQU   6,4                      START OF EXT CYL AND HEAD\nDEBSTRCC EQU   6,2                     START OF EXTENT CYLINDER\nDEBSTRHH EQU   8,2                     START OF EXTENT HEAD\nDEBENDCH EQU   10,4                     END OF EXT CYL AND HEAD\n         SPACE 2\n*        FULL DISK ADDRESS\n         SPACE 1\nFDAM     EQU   0,1                      EXTENT NUMBER\nFDABB    EQU   1,2                      BIN NUMBER\nFDACCHH  EQU   3,4                      CYLINDER AND HEAD\nFDACC    EQU   3,2                      CYLINDER NUMBER\nFDAHH    EQU   5,2                      HEAD NUMBER\nFDAR     EQU   7,1                      RECORD NUMBER\n         EJECT\n***********************************************************************\n*     THIS ROUTINE PERFORMS INITIALIZATION, OBTAINS THE ADDRESS OF    *\n*     THE DEB FROM THE DCB, AND SETS UP VALUES IN REGISTERS FOR A     *\n*     BXH LOOP THROUGH THE DEB CHAIN FROM THE LAST EXTENT TO THE FIRST*\n***********************************************************************\n         SPACE 2\n         RBWENTER ,,RENT,LV=L'MAINCOR,DSECT=(MAINDSCT,R13)\n         USING RENTCORE,R11            ADDRESSABILITY TO COMMON AREA\n         XC    MAINSWIT,MAINSWIT       CLEAR SWITCH BYTE\n         L     R7,DCBDEBAD+EXCPDCB     DEB ADDRESS IN R7\n         XR    R3,R3\n         IC    R3,DEBNMEXT(R7)         NUMBER OF EXTENTS IN R3\n         BCTR  R3,0                    SUBTRACT 1 FROM # OF EXTENTS\n         LA    R7,DEBDASDS(R7)         A(FIRST EXTENT ENTRY) IN R7\n         LR    R9,R7                   A(FIRST EXTENT ENTRY) IN R9\n         LR    R8,R3                   # OF EXTENTS (- 1) IN R8\n         MH    R8,=Y(L'DEBDASDS)       PUT A(LAST EXTENT ENTRY) ....\n         AR    R7,R8                   .... IN R7\n         LH    R8,=Y(0-L'DEBDASDS)     -(LENGTH OF DASD ENTRY) IN R8\n         AR    R9,R8                   R9 < START OF DASD SECTION\n         OI    MAINSWIT,MAINSWLS       SET FLAG FOR LAST EXTENT\n         EJECT\n***********************************************************************\n*       THIS LOOP WILL CHAIN THROUGH ALL EXTENTS OF THE DATASET       *\n*       CALLING SEARCH ROUTINE FOR EACH ONE. SEARCH WILL RETURN       *\n*       THE ADDRESS OF A CHAIN OF TTR'S OF THE BEGINNING OF MEMBERS   *\n*       AT POINTER.  THE ROUTINE THEN CALLS SCAN FOR EACH MEMBER      *\n*       AND DEPENDING ON THE RETURN CODE, EITHER PROCESSES THE NEXT   *\n*       MEMBER, OR DECIDES THAT THIS IS THE ONE TO RESTORE.           *\n*                                                                     *\n*                 RETURN CODES FROM SCAN:                             *\n*           0   -     PROCESS NEXT MEMBER                             *\n*           4   -     THIS IS DESIRED MEMBER                          *\n***********************************************************************\n         SPACE 2\nDEBLOOP  DS    0Y\n         TM    MAINSWIT,MAINSWLS       IS IT LAST EXTENT\n         BNO   MOVEFDA                 NO - PROCESS NORMALLY\n         CLC   DEBSTRCH(,R7),FDACCHH+LSTARFDA IS LSTAR IN THIS EXTENT?\n         BH    ENDCHAIN                NO - THIS EXTENT IS UNUSED\n         CLC   DEBENDCH(,R7),FDACCHH+LSTARFDA\n         BL    ENDCHAIN\nMOVEFDA  DS    0Y\n         MVC   FDABB+MAINEXAD,DEBBINUM(R7) GET BB FROM DEB\n         MVC   FDACC+MAINEXAD,DEBSTRCC(R7) GET CC FROM DEB\n         MVC   FDAHH+MAINEXAD,DEBSTRHH(R7) GET HH FROM DEB\n         MVC   FDAR+MAINEXAD,=X'01'    SET R TO 1\n         STC   R3,FDAM+MAINEXAD        SET M TO EXTENT NO\n         TM    MAINSWIT,MAINSWLS       IS IT LAST EXTENT?\n         BNO   CALLSRCH                NO\n         OI    FDAM+MAINEXAD,MAINSWLS  SET INDICATOR FOR SEARCH\n         NI    MAINSWIT,255-MAINSWLS   CLEAR SWITCH\nCALLSRCH DS    0Y\n         LA    R2,MAINEXAD              PARM ADDRESS IN R2\n         CALL  SEARCH,((R2)),MF=(E,MAINCALL)\n         USING EOFELEM,R6\nPOINLOOP DS    0Y\n         OC    POINTER,POINTER        CHECK FOR ZERO POINTER\n         BZ    ENDCHAIN               YES - END OF CHAIN\n         L     R6,POINTER             ADDRESS.TO NEXT ITEM ON CHAIN\n         LA    R2,EOFTTRN             ADDRESS OF TTRN IN R2\n         CALL  SCAN,((R2)),MF=(E,MAINCALL)  CALL SCAN\n         LTR   R15,R15                CHECK RETURN CODE\n         BNZ   CHECKRTN               IF NOT ZERO, FURTHER CHECK\nRESCAN   DS    0Y\n         L     R1,POINTER              POINTER ADDR IN R1 FOR FREE\n         MVC   POINTER,EOFNEXT         NEXT ELEM ADDRESS IN POINTER\n         FREEMAIN R,LV=L'EOFELEM,A=(1)\n         B     POINLOOP               ZERO RETURN, NEXT ITEM OF CHAIN\nENDCHAIN DS    0Y\n         BCTR  R3,0                    DECREASE EXTENT NUMBER\n         BXH   R7,R8,DEBLOOP           LOOP\n         LA    R4,8                    SET RETURN CODE\nABORT    DS    0Y\n         LA    R2,BPAMDCB              ADDRESS OF DCB\n         LA    R3,BUFRADDR             ADDRESS OF BUFFER\n         FREEBUF (2),(3)               FREE BUFFER\n         CLOSE MF=(E,CLOSBPAM)         CLOSE BPAM DCB\n         FREEPOOL (2)                  FREE BUFFER POOL\n         B     RETURN\nCHECKRTN DS    0Y\n         CH    R15,=H'4'              CHECK FOR VALID RETURN\n         BE    FIXDIR                 RC = 4 : STOW MEMBER\n         CH    R15,=H'8'\n         BNE   ABEND\n         LA    R4,4\n         B     ABORT\nFIXDIR   DS    0Y\n         LA    R2,BPAMDCB              ADDRESS OF DCB\n         LA    R3,BUFRADDR             ADDRESS OF BUFFER\n         FREEBUF (2),(3)               FREE BUFFER\n         CLOSE MF=(E,CLOSBPAM)         CLOSE BPAM DCB\n         FREEPOOL (2)                  FREE BUFFER POOL\n         LA    R2,EOFTTRN             ADDRESS OF TTRN IN R2\n         CALL  FIXDIR,((R2)),MF=(E,MAINCALL)  CODE 4 - THIS IS MEMBER\n         OPEN  (BPAMDCB,(INPUT)),MF=(E,OPENBPAM)  REOPEN BPAM DCB\n         LA    R1,BPAMDCB\n         GETBUF (1),(2)\n         ST    R2,BUFRADDR\n         B     RESCAN\n*        LA    R4,0\n*        B     RETURN                  RETURN TO TSO CONTROL CSECT\n         EJECT\n***********************************************************************\n*   THIS ROUTINE IS THE EXIT FROM THIS MODULE.  IT IS EXECUTED EITHER *\n*   WHEN A MEMBER HAS BEEN SELECTED AND FIXED, OR WHEN THE LIBRARY    *\n*   HAS BEEN EXHAUSTED WITH NO MEMBER SELECTED.  IT FREES UP ALL      *\n*   UNFREED STORAGE AND RETURNS TO THE TSO CONTROL MODULE.            *\n***********************************************************************\n         SPACE 2\nRETURN   DS    0Y\nRLSELOOP DS    0Y\n         L     R6,POINTER               ADDRESSABILITY TO EOFELEM\n         OC    POINTER,POINTER         IS POINTER ZERO?\n         BZ    TERME                   YES - ALL STORAGE FREED\n         L     R1,POINTER              ADDRESS IN R1 FOR FREEMAIN\n         MVC   POINTER,EOFNEXT         NEXT ELEMENT TO POINTER\n         FREEMAIN R,LV=L'EOFELEM,A=(1)\n         B     RLSELOOP\nTERME    DS    0Y\n         TERME NOZOREST,RC=(R4)\n         SPACE 3\n***********************************************************************\n*   IF SCAN RETURNS WITH A CODE THAT IS NOT 0 OR 4, THIS CODE CAUSES  *\n*   A U1975 ABEND.                                                    *\n***********************************************************************\n         SPACE 2\nABEND    DS    0Y\n         ABEND 1975,DUMP\n         EJECT\n*        CONSTANTS\n         SPACE 2\nSORRYMSG DC    C'END OF LIBRARY - NO MEMBER SELECTED FOR RECOVERY'\n         EJECT\n         LTORG\n         EJECT\n*        DSECT FOR PROGRAM DYNAMIC STORAGE\n         SPACE 1\nMAINDSCT DSECT\nMAINCOR$ DS    0X\nMAINEXAD DS    XL8                     ADDRESS OF EXTENT\nMAINSWIT DS    X                       PROGRAM SWITCHES\nMAINSWLS EQU   B'10000000'             LAST EXTENT\nMAINCALL CALL  ,(*-*),MF=L\nMAINCOR  EQU   MAINCOR$,*-MAINCOR$\n         COPY  SPFDSCT\n         COPY  EOFELEM\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFSCAN": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\x9c\\x00\\x9c\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 156, "newlines": 156, "modlines": 0, "user": "TST2SSG"}, "text": "SCAN     TITLE 'FIXPDS - SCAN MEMBER AND FIND OUT IF RIGHT ONE'\nSCAN     CSECT\n         ENTRY  BPAMEOD,BPAMSYN\n         REGISTER\n         EJECT\n*     SYSTEM CONTROL BLOCKS\n         SPACE 2\n*        DATA CONTROL BLOCK\n         SPACE 1\nDCBRECFM EQU   36,1                    RECORD FORMAT\nDCBRECF  EQU   B'10000000'             FIXED LENGTH\nDCBRECV  EQU   B'01000000'             VARIABLE LENGTH\nDCBRECU  EQU   B'11000000'             UNDEFINED LENGTH\nDCBRECBR EQU   B'00010000'             BLOCKED RECORDS\nDCBBLKSI EQU   62,2                    BLOCKSIZE\nDCBLRECL EQU   82,2                    LOGICAL RECORD LENGTH\n         SPACE 2\n*        DATA EVENT CONTROL BLOCK\n         SPACE 1\nDECIOBPT EQU   16,4                    IOB POINTER\n         SPACE 2\n*        INPUT-OUTPUT BLOCK\n         SPACE 1\nIOBCSLN  EQU   14,2                    RESIDUAL BYTE COUNT\n         EJECT\n***********************************************************************\n*  THIS ROUTINE ISSUES A POINT TO THE BEGINNING OF THE MEMBER,        *\n*  AND WRITES OUT THE INITIAL MESSAGE TO THE TERMINAL.                *\n***********************************************************************\n         SPACE\n         RBWENTER ,,RENT,LV=L'SCANCOR,DSECT=(SCANDSCT,R13)\n         USING RENTCORE,R11            ADDRESSABILITY TO COMMON\n         L     R10,0(,R1)              ADDRESS OF PARM = TTRN\n         LA    R1,BPAMDCB              ADDRESS OF DCB\n         POINT (1),(10)                POINT TO MEMBER\n         OPEN  MF=(E,OPENBSAM)         OPEN OUTPUT FILE\n         LA    R2,4\n         CALL  ISPLINK,(VDEFINE,NAMELIS1,SPFMEMB,CHAR,F8),VL,          X\n               MF=(E,ISPCALL)\n         LTR   R15,R15\n         BNZ   ERROR\n         EJECT\n***********************************************************************\n*  THIS ROUTINE COPIES THE MEMBER TO A TEMPORARY DATASET              *\n***********************************************************************\nREAD     DS    0Y\n         L     R3,BUFRADDR             ADDRESS OF BUFFER\n         READ  DECB,SF,BPAMDCB,(3),'S',MF=E READ BLOCK\n         CHECK DECB                    CHECK I/O\n         TM    DCBRECFM+BPAMDCB,DCBRECU IS IT RECFM U?\n         BO    RECFMU                  YES\n         TM    DCBRECFM+BPAMDCB,DCBRECV IS IT RECFM V?\n         BO    RECFMV                  YES\n         SPACE\n*  RECFM F PROCESSING\n         LH    R1,DCBBLKSI+BPAMDCB     LENGTH OF READ\n         L     R2,DECIOBPT+DECB        ADDRESS OF IOB\n         SH    R1,IOBCSLN(,R2)         SUBTRACT RESIDUAL COUNT FROM IOB\n         STH   R1,DCBBLKSI+BSAMDCB     STORE IN OTHER DCB\n         WRITE DECBS,SF,BSAMDCB,(3),MF=E WRITE BLOCK\n         CHECK DECBS\n         B     READ                    BRANCH TO RETURN RECORD\n         SPACE\n*  RECFM V PROCESSING\nRECFMV   DS    0Y\n         WRITE DECBS,SF,BSAMDCB,(3),MF=E WRITE BLOCK\n         CHECK DECBS\n         B     READ\n         SPACE\n*  RECFM U PROCESSING\nRECFMU   DS    0Y\n         LH    R1,DCBLRECL+BPAMDCB     GET BLOCK LENGTH FROM DCBLRECL\n         STH   R1,DCBBLKSI+BSAMDCB     STORE IN BSAM DCB\n         WRITE DECBS,SF,BSAMDCB,(3),'S',MF=E WRITE BLOCK\n         CHECK DECBS\n         B     READ\n         EJECT\n***********************************************************************\n*  THIS ROUTINE IS EXECUTED AFTER THE ENTIRE MEMBER HAS BEEN COPIED   *\n*  TO THE TEMPORARY FILE.  THE USER IS ALLOWED TO BROWSE THE MEMBER.  *\n*  WHEN HE FINISHES, HE IS ASKED WHETHER THIS WAS THE RIGHT MEMBER.   *\n***********************************************************************\nBPAMEOD  DS    0Y\n         MVC   DCBBLKSI+BSAMDCB,DCBBLKSI+BPAMDCB RESTORE BLKSIZE\n         CLOSE MF=(E,CLOSBSAM)\n         LA    R2,7\n         CALL  ISPLINK,(BROWSE,TEMPDSN),VL,MF=(E,ISPCALL)\n         LTR   R15,R15\n         BNZ   ERROR\n         LA    R2,8\n         CALL  ISPLINK,(DISPLAY,PANNAME),VL,MF=(E,ISPCALL)\n         CH    R15,=Y(8)     WAS PF3 HIT?\n         BE    RET8\n         LTR   R15,R15\n         BNZ   ERROR\n         CLC   SPFMEMB,=CL8' '\n         BE    RET0\n         B     RET4\nRET0     DS    0Y\n         XR    R2,R2\n         B     RETURN\nRET4     DS    0Y\n         MVC   MEMBER,SPFMEMB\n         LA    R2,4\n         B     RETURN\nRET8     DS    0Y\n         LA    R2,8\n         B     RETURN\nERROR    DS    0Y\n         CVD   R2,SAVE2\n         CVD   R15,SAVE15\n         ABEND 100,DUMP\nBPAMSYN  DS    0Y\n         SYNADAF ACSMETH=BPAM\n         LA    R1,50(,R1)              POINT PAST GARBAGE\n         LA    R0,78                   LENGTH\n         TPUT  (1),(0),R               PUT MESSAGE TO TERMINAL\n         SYNADRLS                      FREE BUFFER\n         CLOSE MF=(E,CLOSBSAM)\n         B     RET0                    RETURN TO CHECK NEXT MEMBER\n         SPACE 2\nRETURN   DS    0Y\n         TERME NOZOREST,RC=(R2)\n         EJECT\n*        CONSTANTS\nFTOPEN   DC    CL8'FTOPEN'\nVDEFINE  DC    CL8'VDEFINE'\nFTINCL   DC    CL8'FTINCL'\nFTCLOSE  DC    CL8'FTCLOSE'\nVCOPY    DC    CL8'VCOPY'\nBROWSE   DC    CL8'BROWSE'\nDISPLAY  DC    CL8'DISPLAY'\nTEMP     DC    CL8'TEMP'\nCHAR     DC    CL8'CHAR'\nMOVE     DC    CL8'MOVE'\nNAMELIS1 DC    A(1),A(8),CL8'SPFMEMB'\nSKELNAME DC    CL8'FPDSS0'\nPANNAME  DC    CL8'FPDSP0'\nF8       DC    F'8'\nF255     DC    F'255'\nTEMPDSN  DC    CL54'FPDS0001.CNTL '\n         SPACE 2\n         LTORG\n         EJECT\n*        DSECT FOR PROGRAM DYNAMIC STORAGE\n         SPACE 2\nSCANDSCT DSECT\nSCANCOR@ DS    0Y\nISPCALL  CALL  ,(,,,,,,,),MF=L\nDATALINE DS    CL259\nSPFMEMB  DS    CL8\nSAVE2    DS    D\nSAVE15   DS    D\nSCANCOR  EQU   SCANCOR@,*-SCANCOR@\n         COPY  SPFDSCT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFSRCH": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00\\xd8\\x00\\xd8\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "TST2SSG"}, "text": "SRCH     TITLE 'PDS FIX - SEARCH EXTENT FOR END-OF-FILE MARKS'\nSEARCH   CSECT\n         REGISTER\n         EJECT\n*     SYSTEM CONTROL BLOCKS\n         SPACE 2\n*        EVENT CONTROL BLOCK\n         SPACE 1\nECBNORM  EQU   X'7F'                   NORMAL COMPLETION\nECBPERR  EQU   X'41'                   PERMANENT ERROR\nECBDAEA  EQU    X'42'                  END OF EXTENT ERROR\n         SPACE  2\n*        CHANNEL STATUS WORD\n         SPACE  1\nCSWUSTAT EQU    3,7                    UNIT STATUS\nCSWUUEXC EQU    X'01'                  UNIT EXCEPTION\nCSWUUCHK EQU    X'02'                  UNIT CHECK\n         SPACE 2\n*        INPUT OUTPUT BLOCK\n         SPACE 1\nIOBS1RNF EQU   X'08'                   RECORD NOT FOUND\n         SPACE 2\n*        DATA CONTROL BLOCK\n         SPACE 1\nDCBDEBAD EQU   44,4                    DATA EXTENT BLOCK ADDRESS\n         SPACE 2\n*        DATA SET CONTROL BLOCK\n         SPACE 1\nDS1LSTAR EQU   54,3                    ADDRESS OF LAST RECORD\n         SPACE 2\n*        FIXED LOW CORE\n         SPACE 1\nFLCCVT   EQU   16,4                    ADDRESS OF CVT\n         SPACE 2\n*        COMMUNICATIONS VECTOR TABLE\n         SPACE 1\nCVTPCNVT EQU   28,4                    ADDRESS OF TTR TO MBCCHHRR RTN\nCVTPRLTV EQU   32,4                    ADDRESS OF MBCCHHR TO TTR RTN\n         EJECT\n***********************************************************************\n*  THIS ROUTINE PERFORMS INITIALIZATION, SETS UP THE INITIAL CHANNEL  *\n*  PROGRAM START ADDRESS FROM THE PARAMETER THAT IT IS PASSED, AND    *\n*  IF IT IS THE LAST EXTENT IN THE DATA SET, FINDS AND STORES THE     *\n*  ADDRESS OF THE END OF THE DATA SET FOR FUTURE CHECKING.            *\n***********************************************************************\n         SPACE 2\n         RBWENTER ,,RENT,LV=L'SRCHCOR,DSECT=(SRCHDSCT,R13)\n         USING RENTCORE,R11            ADDRESSABILITY TO COMMON AREA\n         XC    SRCHSWIT,SRCHSWIT       CLEAR SWITCH BYTE\n         L     R1,0(,R1)               PICK UP PARM ADDRESS\n         MVC   IOBSEEK,0(R1)           PICK UP PARM\n         TM    IOBSEEK,SRCHSWLS        IS IT THE LAST EXTENT?\n         BNO   MOVEID                  NO--IGNORE CHECK FOR LSTAR\n         OI    SRCHSWIT,SRCHSWLS       TURN ON LAST EXTENT SWITCH\n         NI    IOBSEEK,255-SRCHSWLS    TURN OFF HI-ORDER BIT OF SEEK\nMOVEID   DS    0Y\n         LA    R1,CPSTRT               LOAD ADDR OF START CHANNEL PGM\n         STCM  R1,B'0111',IOBSTART     STORE IT IN IOB\n         EJECT\n***********************************************************************\n*    THIS ROUTINE EXECUTES A CHANNEL PROGRAM WHICH WILL               *\n*    TERMINATE AT EITHER AN END-OF-FILE MARK OR THE END               *\n*    OF THE EXTENT.                                                   *\n***********************************************************************\n         SPACE 2\nCPLOOP   DS    0Y\n         EXCP  IOB                     EXECUTE CHANNEL PROGRAM\n         WAIT  ECB=ECB                 WAIT FOR COMPLETION\n         CLI   IOBECBCC,ECBNORM        CHECK FOR NORMAL TERMINATION\n         BE    NORMALAB                SHOULD NOT HAPPEN - ABEND\n         CLI   IOBECBCC,ECBDAEA        CHECK FOR END OF EXTENT\n         BE    ENDOFEXT                BRANCH TO RETURN\n         CLI   IOBECBCC,ECBPERR        CHECK FOR PERMANENT ERROR\n         BNE   IOERROR                 NO - PERFORM SYNADAF\n         TM    CSWUSTAT+IOBCSW,CSWUUEXC CHECK FOR UNIT EXCEPTION\n         BO    FOUNDEOF                YES-WE'VE FOUND AN EOF\n         B     IOERROR                 NO - PERFORM SYNADAF\n         EJECT\n***********************************************************************\n*     WHEN END OF EXTENT IS REACHED, THIS ROUTINE RETURNS TO          *\n*     THE MAINLINE CALLING ROUTINE.                                   *\n***********************************************************************\n         SPACE 2\nENDOFEXT DS    0Y\n         TERME NOZOREST,RC=0\n         EJECT\n***********************************************************************\n*    WHEN AN END OF FILE MARK IS FOUND, THIS ROUTINE ATTEMPTS TO      *\n*    READ THE NEXT RECORD ON THE TRACK, AND IF THAT IS NOT FOUND,     *\n*    THE FIRST RECORD ON THE NEXT TRACK OF THE DATA SET.              *\n***********************************************************************\n         SPACE 2\nFOUNDEOF DS    0Y\n         TM    SRCHSWIT,SRCHSWLS       IS IT THE LAST EXTENT?\n         BNO   BUMP                    NO - THEN IGNORE TEST FOR LSTAR\n         CLC   CNTCCHHR,LSTARFDA+3     IS THIS EOF AT LSTAR?\n         BE    ENDOFEXT                YES - END OF EXTENT, RETURN\nBUMP     DS    0Y\n         XR    R1,R1\n         IC    R1,CNTR                 GET RECORD # OF EOF\n         LA    R1,1(,R1)               ADD 1\n         STC   R1,IOBSR                 STORE IT BACK IN ID FIELD\n         MVC   IOBSCCHH,CNTCCHH      PICK UP CCHH OF EOF MARK\n         MVC   SRCHOLDM,IOBSM        SAVE EXTENT NUMBER\nGETREC   DS    0Y\n         LA    R1,CPGET                LOAD ADDR OF CHANNEL PROGRAM\n         STCM  R1,B'0111',IOBSTART     STORE IN IOB\n         EXCP  IOB                     EXECUTE CHANNEL PROGRAM\n         WAIT  ECB=ECB                 WAIT FOR COMPLETION\n         CLI   IOBECBCC,ECBNORM        NORMAL COMPLETION?\n         BE    CHAIN                   YES - SAVE TTR\n         CLI   IOBECBCC,ECBPERR        PERMANENT ERROR?\n         BNE   IOERROR                 NO - PERFORM SYNADAF\n         TM    CSWUSTAT+IOBCSW,CSWUUEXC UNIT EXCEPTION (EOF)?\n         BO    NEXTEOF                 YES - NULL MEMBER, IGNORE\n         TM    CSWUSTAT+IOBCSW,CSWUUCHK UNIT CHECK?\n         BNO   IOERROR                 NO - PERFORM SYNADAF\n         TM    IOBSENS1,IOBS1RNF       RECORD NOT FOUND?\n         BNO   IOERROR                 NO - PERFORM SYNADAF\n         L     R1,DCBDEBAD+EXCPDCB     ADDRESS OF DEB IN R1\n         LA    R2,IOBSEEK              ADDRESS OF MBBCCHHR IN R2\n         STM   R8,R13,SRCHSVRG         SAVE REGISTERS\n         L     R15,FLCCVT              ADDRESS OF CVT\n         L     R15,CVTPRLTV(,R15)      ADDRESS OF MBBCCHHR TO TTR RTN\n         LR    R8,R13                  PRESERVE BASE REG\n         BALR  R14,R15                 BRANCH AND LINK\n         LR    R13,R8                  RESTORE BASE REG\n         LM    R8,R13,SRCHSVRG         RESTORE OTHER REGS\n         SRL   R0,16                   GET TT IN LOW ORDER BYTE\n         AH    R0,=H'1'                ADD 1 TO TRACK\n         SLL   R0,8\n         AH    R0,=H'1'                SET RECORD TO 1\n         SLL   R0,8                    SHIFT IT BACK WHERE IT BELONGS\n         L     R1,DCBDEBAD+EXCPDCB     DEB ADDRESS IN R1\n         LA    R2,IOBSEEK              PLACE TO STORE MBBCCHHR\n         STM   R8,R13,SRCHSVRG         SAVE REGISTERS\n         L     R15,FLCCVT              ADDRESS OF CVT\n         L     R15,CVTPCNVT(,R15)      ADDRESS OF TTR TO MBBCCHHR RTN\n         LR    R8,R13                  PRESERVE BASE REG\n         BALR  R14,R15                 LINK TO ROUTINE\n         LR    R13,R8                  RESTORE BASE REG\n         LM    R8,R13,SRCHSVRG         RESTORE OTHER REGS\n         B     GETREC\n         EJECT\n***********************************************************************\n*  THIS ROUTINE STORES THE TTR OF THE FIRST RECORD OF A MEMBER        *\n*  ON A FIFO CHAIN, THE POINTER TO WHICH IS STORED AT POINTER.        *\n***********************************************************************\n         SPACE 2\nCHAIN    DS    0Y\n         GETMAIN R,LV=L'EOFELEM  GET A NEW CHAIN ELEMENT\n         LR    R10,R1                   SAVE ADDRESS OF ELEMENT\n         USING EOFELEM,R10              ADDRESSABILITY TO ELEMENT\n         MVC   EOFNEXT,POINTER          STORE PREV TOP OF CHAIN IN ELEM\n         ST    R1,POINTER               STORE NEW TOP OF CHAIN IN PTR\n         L     R1,DCBDEBAD+EXCPDCB      DEB ADDR IN R1\n         LA    R2,IOBSEEK               MBBCCHHR ADDR IN R2\n         STM   R8,R13,SRCHSVRG\n         L     R15,FLCCVT               ADDRESS OF CVT\n         L     R15,CVTPRLTV(,R15)       ADDR OF MBCCHHR TO TTR RTN\n         LR    R8,R13                   PRESERVE BASE REG\n         BALR  R14,R15                  LINK TO ROUTINE\n         LR    R13,R8                   RESTORE BASE REG\n         LM    R8,R13,SRCHSVRG          RESTORE OTHER REGISTERS\n         ST    R0,EOFTTRN               STORE TTRN IN CHAIN ELEMENT\n         EJECT\n***********************************************************************\n*    THIS ROUTINE SETS UP THE SEEK AND SEARCH ADDRESSES TO CONTINUE   *\n*    SCANNING THE EXTENT FOR THE NEXT END OF FILE MARK.               *\n***********************************************************************\n         SPACE 2\nNEXTEOF  DS    0Y\n         CLC   SRCHOLDM,IOBSM        AM I STILL IN THE SAME EXTENT?\n         BNE   ENDOFEXT                NO - RETURN\n         LA    R1,CPLOOK               CP ADDRESS IN R1\n         STCM  R1,B'0111',IOBSTART     STORE IN IOB\n         B     CPLOOP                  BRANCH TO EXCP\n         EJECT\n***********************************************************************\n*              ERROR  ROUTINES                                        *\n*                                                                     *\n*  IOERROR WILL PERFORM SYNADAF ANALYSIS, WRITE THE DIAGNOSTIC        *\n*  TO THE TERMINAL, AND ABEND WITH A SYSTEM 001.                      *\n*                                                                     *\n*  NORMALAB SHOULD NEVER BE EXECUTED.  IT IS BRANCHED TO WHEN THE     *\n*  CHANNEL PROGRAM WHICH IS SUPPOSED TO TERMINATE ON FINDING EITHER   *\n*  AN END OF FILE MARK, OR THE END OF THE EXTENT TERMINATES NORMALLY, *\n*  WITHOUT HAVING FOUND EITHER.  IT ABENDS WITH A USER 1976.          *\n***********************************************************************\n         SPACE 2\nIOERROR  DS    0Y\n         LA    R1,IOB                  IOB ADDR IN R1\n         SYNADAF ACSMETH=EXCP          PERFORM ANALYSIS\n         LA    R1,50(,R1)              BUMP PAST BLANKS IN MESSAGE\n         LA    R0,78                   LOAD MESSAGE LENGTH\n         TPUT  (1),(0),R               PUT MESSAGE TO TERMINAL\n         SYNADRLS\n         ABEND X'001000',DUMP\n         SPACE 3\nNORMALAB DS    0Y\n         ABEND 1976,DUMP\n         EJECT\n         LTORG\n         EJECT\n*     DSECT FOR PROGRAM DYNAMIC STORAGE\n         SPACE 1\nSRCHDSCT DSECT\nSRCHCOR$ DS    0X\nSRCHSVRG DS    6F                      REGISTER SAVE AREA\nSRCHSWIT DS    X                       PROGRAM SWITCHES\nSRCHSWLS EQU   B'10000000'             LAST EXTENT\nSRCHOLDM DS    X                 SAVE AREA FOR EXTENT #\nSRCHCOR  EQU   SRCHCOR$,*-SRCHCOR$\n         COPY  SPFDSCT\n         COPY  EOFELEM\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TERME": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x12_\\x00\\x87\\x12_\\x187\\x00E\\x00E\\x00\\x00\\xe3\\xe2\\xe3\\xf2\\xe2\\xe2\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-05-05T00:00:00", "modifydate": "1987-05-05T18:37:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "TST2SSG"}, "text": "         MACRO\n&NAME    TERME &OP,&RC=\n         GBLA  &RENTSW\n         GBLA  &RENTSW2\n         GBLA  &PL1SW\n         GBLC  &GPRG\n.*  THIS MACRO WILL RESTORE REGISTERS, FREE SAVE AREAS, AND EXECUTE\n.*  THE NECESSARY EXIT LINKAGE.\n.*  IF XCTL IS SPECIFIED THE MACRO WILL NOT RELINQUISH CONTROL, INSTEAD\n.*  INSTRUCTIONS WILL BE GENERATED WHICH WILL ALLOW THE XCTL MACRO TO\n.*  BE GIVEN IMMEDIATLY FOLLOWING THE TERM MACRO.\n.*  REGISTERS 0 AND 1      WILL NOT BE RESTORED BY THIS MACRO.\n         AIF   (&RENTSW EQ 0).NORENT1\n&NAME    LR    &GPRG.1,&GPRG.13       GET ADDRESS OF AREA TO BE FREED\n         L     &GPRG.13,4(,&GPRG.13)  GET HIGHER SAVE POINTER\n         AGO   .NORENT2\n.NORENT1 ANOP\n&NAME    L     &GPRG.13,4(,&GPRG.13)    GET HIGHER SAVE POINTER\n.NORENT2 ANOP\n         AIF   ('&OP' EQ 'NOZOREST').NOZRST\n         STM   &GPRG.0,&GPRG.1,20(&GPRG.13)    TEMP. SAVE OF 0 AND 1\n.NOZRST  ANOP\n         AIF   (&RENTSW EQ 0).NORENT3\n*  THIS EXIT LINKAGE IS REENTRANT.\n&RENTSW  SETA  &RENTSW-1\n         AIF   (&PL1SW NE 0).SUBPOOL\n         AIF   (&RENTSW2 EQ 0).SUBSET\n&RENTSW2 SETA  &RENTSW2-1\n.SUBSET  ANOP\n         L     &GPRG.0,0(,&GPRG.1)  GET SUBPOOL AND LENGTH FOR FREEMAIN\n         AIF   ('&RC' EQ '').FMAIN\n         AIF   ('&RC'(1,1) NE '(').FMAIN\n         AIF   ('&RC(1)' NE '15' AND '&RC(1)' NE '&GPRG.15').FMAIN\n         LR    &GPRG.12,&GPRG.15        SAVE RETURN CODE\n.FMAIN   ANOP\n         SVC   10    ISSUE  FREEMAIN  (REGMAIN)  SVC\n         AIF   ('&RC' EQ '').NORENT4\n         AIF   ('&RC'(1,1) NE '(').NORENT4\n         AIF   ('&RC(1)' NE '15' AND '&RC(1)' NE '&GPRG.15').NORENT4\n         LR    &GPRG.15,&GPRG.12        RESTORE RETURN CODE\n         AGO   .NORENT4\n.SUBPOOL ANOP\n&PL1SW   SETA  &PL1SW-1\n         LA    &GPRG.0,&PL1SW        SET SUBPOOL NUMBER\n         STC   &GPRG.0,0(,&GPRG.1)   PLACE SUBPOOL # IN HI ORDER BYTE\n         AGO   .SUBSET\n.NORENT3 ANOP\n*  THIS EXIT LINKAGE IS SERIALLY REUSABLE.\n.NORENT4 ANOP\n         AIF   ('&OP' EQ 'XCTL').OUT\n         AIF   ('&RC' EQ '').OUT\n         AIF   ('&RC'(1,1) EQ '(').RCREG\n         LA    &GPRG.15,&RC          SET RETURN CODE\n         AGO   .OUT\n.RCREG   ANOP\n         AIF   ('&RC(1)' EQ '15' OR '&RC(1)' EQ '&GPRG.15').OUT\n         LR    &GPRG.15,&RC(1)       SET RETURN CODE\n.OUT     ANOP\n         L     &GPRG.14,12(,&GPRG.13)             RESTORE REG 14\n         LM    &GPRG.0,&GPRG.12,20(&GPRG.13)      RESTORE 0 THRU 12\n         XC    8(4,&GPRG.13),8(&GPRG.13)\n         AIF   ('&OP' EQ 'XCTL').C\n&PL1SW   SETA  0\n         BR    &GPRG.14              RETURN TO NEXT HIGHER LEVEL.\n         MEXIT\n.C       ANOP\n         BALR  &GPRG.15,&GPRG.0      SET UP NEW BASE REGISTER\n         USING *,&GPRG.15            GIVE IT ADDRESSABILITY\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT036/FILE036.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT036", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}