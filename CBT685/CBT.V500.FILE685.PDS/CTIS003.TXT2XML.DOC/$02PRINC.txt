 Chapter : $02Princ

 As said early, conversion occurs only if a valid COBOL
 copybook is present. The first step in the conversion
 process is the ...

 2.1 <sec:COBOL-copybook-analysis>COBOL copybook analysis

 The analysis take place in 3 phases :

 2.1.1 <sub:Cleaning-the-copybook>"Cleaning" the copybook

 In this phase, the copybook is read and :

 * comments are skipped,

 * Multi-line COBOL declaration are concatenated in one line.

 * PICTURE clauses are replaced by PIC,

 * SIGN clauses are ignored,

 * IS clauses are ignored,

 * NATIVE clauses are skipped,

 * X(4) and 9(6) symbols are replaced respectively by
   XXXX and 999999,

 * Final dot of COBOL declarations is suppressed,

 * COBOL declarations are capitalized.According to IBM's COBOL Language Reference (IGYLR204),
 paragraph 1.1.1.1 COBOL Words with Single-Byte
 Characters : "Each lowercase letter is considered to be
 equivalent to its corresponding uppercase letter,
 except in non numeric literals"

 2.1.2 <sub:Extracting-the-meta-data>Extracting the meta-data

 In this phase, the following meta-data are extracted :

 +--------------------+--------------------------------------------------------------+
 ] Meta-data          ] Usage                                                        ]
 +--------------------+--------------------------------------------------------------+
 +--------------------+--------------------------------------------------------------+
 ] COBOL level        ] To indent XML element                                        ]
 +--------------------+--------------------------------------------------------------+
 ] Name               ] To create or check XML element tags                          ]
 +--------------------+--------------------------------------------------------------+
 ] Type of data       ] To check XML data during text to XML conversion              ]
 +--------------------+--------------------------------------------------------------+
 ] Sign               ] When converting signed and/or binary data                    ]
 +--------------------+--------------------------------------------------------------+
 ] Sign position      ] When converting numeric data                                 ]
 +--------------------+--------------------------------------------------------------+
 ] Starting position  ] To create the XML content or a text record                   ]
 +--------------------+--------------------------------------------------------------+
 ] Length             ] To create the XML content or a text record                   ]
 +--------------------+--------------------------------------------------------------+
 ] Default value      ] To initialize a text record when converting from XML to text ]
 +--------------------+--------------------------------------------------------------+


 FILLER clauses are not skipped. They are used to
 compute the starting positions of all COBOL items. They
 never appears in the XML file when the text to XML
 conversion process ends. The copybook is also checked
 for unsupported COBOL clauses :

 * REDEFINES

 * DEPENDING ON

 * COMPUTATIONAL-1, COMPUTATIONAL-2, COMPUTATIONAL-5,
   COMP-1, COMP-2, and COMP-5.

 * POINTER, PROCEDURE-POINTER and FUNCTION-POINTER

 * OBJECT REFERENCE

 * NATIONAL

 * DISPLAY-1DBCS items are not supported

 * P symbol (decimal scaling position)

 * INDEX

 * level 66, 77, 88,Those levels generate only a warning message and
 conversion continues.

 * Non-numeric COBOL levels or COBOL levels greater than 49,

 * DBCS picture symbols.

 and for partially supported COBOL clauses :

 * OCCURS for elementary and group item with only one dimension,

 * VALUES except for QUOTES and NULL clauses.

 2.1.3 <sub:Renumbering-the-COBOL>Renumbering the COBOL item levels

 As COBOL item levels are used to indent tags during
 text to XML conversion, they are internally renumbered
 to have a smoother indentation. For example, the
 following COBOL copybooks :

 A sample COBOL copybook

 01 COBOL-ITEM-01.

   05 FILLER PIC IS X.

   05 COBOL-ITEM-02 PIC IS X(5).



 and

 Same sample COBOL copybook with different levels

 10 COBOL-ITEM-01.

   20 FILLER PIC IS X.

   20 COBOL-ITEM-02 PIC IS X(5).



 will always give the same indentation, like in the
 following XML file :

 Resulting XML file after conversion

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <DATA>

   <COBOL_ITEM_01>

     <COBOL_ITEM_02>12345</COBOL_ITEM_02>

   </COBOL_ITEM_01>

 </DATA>

 The original COBOL copybook is never modified by
 TXT2XML and if the conversion ends without errors, a
 report of this analysis is printed.

 2.2 <sec:Text-to-XML>Text to XML conversion

 This is the easiest conversion. An XML header (<?xml
 .... ?>) is first created. Then, one text record is
 read, item data is extracted from the current text
 record and the XML elements and their content are
 written one by one. The conversion process continues
 until the end of the text file. The XML elements can be
 classified in 3 categories :

 * Root : this element must be unique in the whole XML
   file. That's why, DATA, a COBOL reserved word, was
   chosen as root element name. It has no equivalent in
   the COBOL copybook.

 * First child : it appears each time a text record is
   read. It corresponds to the level of the first COBOL
   item in the copybook. As this first child element
   will include all the other XML elements, this COBOL
   item needs to be a grouping item,with the lowest
   level and ideally with a unique occurrence.

 * Other child elements: The other XML elements.

 All of them are built using the following rules :

 * The name of the XML element is the capitalized COBOL
   item name with dashes ("-") translated to underscore ("_"
   ). For example : COBOL-ITEM-01 will become <cobol_item_01>,

 * Content of the XML element is extracted from the
   current text record (using the starting position and
   the length computed in section ¢sec:COBOL-copybook-analysis!). Characters are
   escaped if necessary& < > " and ' need to be converted to &amp; &lt; &gt;
 &quot; &apos; respectively.
   ,

 * FILLER clauses are skipped.

 * Opened XML tags are closed :

   * immediately after the content of an XML element,

   * at the end of each COBOL grouping item,

   * at then end of the text record,

   * at the end of the text file.

 If requested, TXT2XML can create a DTD (Document Type
 Definition), based on the COBOL copybook, which
 describes the XML structure. This DTD can be internal :

 Internal DTD

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <|DOCTYPE DATA ¢

   <|ELEMENT NUMERIC-TYPES (EXTERNAL-DECIMAL, BINARIES,

     INTERNAL_DECIMAL)>

   <|ELEMENT EXTERNAL-DECIMAL (EXT-DEC-UNSIGNED,

     EXT-DEC-SIGNED-NEGATIVE, EXT-DEC-SIGNED-POSITIVE,

     EXT-DEC-SIGN-LEADING-NEG, EXT-DEC-SIGN-LEADING-POS,

     EXT-DEC-SIGN-TRAILING-NEG,
     EXT-DEC-SIGN-TRAILING-POS,

     EXT-DEC-SIGN-SEP-LEAD-NEG,
     EXT-DEC-SIGN-SEP-LEAD-POS,

     EXT_DEC_SIGN_SEP_TRAIL_NEG, EXT_DEC_SIGN_SEP_TRAIL_POS)>

   <|ELEMENT EXT_DEC_UNSIGNED (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGNED_NEGATIVE (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGNED_POSITIVE (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_LEADING_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_LEADING_POS (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_TRAILING_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_TRAILING_POS (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_POS (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_POS (#PCDATA)>

   <|ELEMENT BINARIES (BINARY-UNSIGNED,
   BINARY-SIGNED-POSITIVE,

     BINARY_SIGNED_NEGATIVE)>

   <|ELEMENT BINARY_UNSIGNED (#PCDATA)>

   <|ELEMENT BINARY_SIGNED_POSITIVE (#PCDATA)>

   <|ELEMENT BINARY_SIGNED_NEGATIVE (#PCDATA)>

   <|ELEMENT INTERNAL-DECIMAL (INT-DEC-UNSIGNED,
   INT-DEC-SIGNED-POS,

     INT_DEC_SIGNED_NEG)>

   <|ELEMENT INT_DEC_UNSIGNED (#PCDATA)>

   <|ELEMENT INT_DEC_SIGNED_POS (#PCDATA)>

   <|ELEMENT INT_DEC_SIGNED_NEG (#PCDATA)>

 !>

 <DATA>

   <NUMERIC_TYPES>

 ...

 or external :

 XML file with an external DTD reference

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="no" ?>

 <|DOCTYPE DATA SYSTEM "./sample/dtd/binary">

 <DATA>

   <NUMERIC_TYPES>

   ...

 2.3 <sec:XML-to-text>XML to text conversion

 This conversion is a little bit more difficult and even
 in some cases impossible. Remember, TXT2XML implements
 only a subset of XML and COBOL. For example, this XML
 file : Nonconvertible XML file

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <weather>

   <city name="Los Angeles">

     <sky>Blue</sky>

     Hot and sunny

   </city>

 </weather>

 In this file, the XML element city is a complex one. It
 includes the simple element sky but also a content (Hot
 and sunny). The corresponding COBOL copybook would be
 something like :

 Corresponding COBOL copybook

 01 city pic x(20).

   03 name pic x(20).

   03 sky pic x(8).

 This is impossible in COBOL : a grouping item can't
 have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)
 paragraph 5.3.11 PICTURE Clause : "The PICTURE clause
 can be specified only at the elementary level."

 So, not all the XML files can be converted. But, with a
 valid COBOL copybook, the XML file is read one line at
 the time and data is extracted using the following
 rules :

 * Mixed XML content is not supported,

 * All the XML tags and contents may expand on more than
   one line,

 * XML headers starting with <?xml and ending with ?>
   are skipped,

 * XML entities starting with <|ENTITY and ending with >
   are not supported. If such a declaration is found,
   the conversion process is aborted,

 * XML internal and external document type declaration
   starting with <|DOCTYPE and ending with either > or
   !> are skipped,

 * XML comments starting with <|-- and ending with -->
   are skipped,

 * The first child element is then searched. Each time
   an XML first child closing tag is found, a text
   record is written and a new text record is
   initialized with default values from the COBOL copybook,

 * Attributes of the first child element are supported.
   But, attributes of the root element are ignored.

 * Each XML element, even without a content, must have
   an equivalent in the COBOL copybook. To find it, the
   XML element name is capitalized and underscores are
   translated to dashes. For example : <cobol_item_01>
   will become COBOL-ITEM-01 and is searched in the
   COBOL copybook,

 * Each XML attribute may have an equivalent in the
   COBOL copybook,

 * XML attributes like xml:space are ignored,

 * Each time a content is found, it's length and data
   type are checked against the characteristics of the
   corresponding COBOL item. Numeric items are right
   justified and left zero filled. If necessary
   characters are escaped.&amp; &lt; &gt; &quot; &apos; are converted to & < > "
 and ' respectively or content is extracted from CDATA
 section starting with <|¢CDATA¢ and ending with !!>

 * If some XML elements or attributes are missing,
   conversion continues with the new element found.
   Missing COBOL items are left to their default value
   (see section ¢sec:COBOL-copybook-analysis!).

 * Empty XML elements, even with attributes, are supported.

