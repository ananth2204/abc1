 Chapter : $03Signe

 3.1 Warning

 Signed an binary data are hardly bound with the
 operating system and the hardware running TXT2XML. On a
 PC, binary (and not numeric and packed-decimal) data is
 stored in little endian mode. It means that the
 low-order byte of the number is stored in memory at the
 lowest address, and the high-order byte at the highest
 address. On a IBM MVS mainframe, binary data are stored
 in the opposite mode : big endian. For example :

 +-------------------+---------------------+------------------+
 ] Hexadecimal data  ] Little endian (PC)  ] Big endian (MVS) ]
 +-------------------+---------------------+------------------+
 ]  x'01 02 03 "04   ]    04 03 02 01      ]   01 02 03 04    ]
 +-------------------+---------------------+------------------+


   Conclusion : although TXT2XML runs on multiple
   platforms, you should always run TXT2XML on the
   platform where you will use the binary and/or signed
   converted data.

 So, forget the idea to run TXT2XML on one platform (i.e
 a PC running Windows) and to transfer the converted
 file on another platform (i.e. an IBM mainframe). File
 transfer means code page (character set) translation
 which binary, packed-decimal and even numeric data
 don't support. Don't try also to convert a pure EBCDIC
 file on a non-mainframe platform : TXT2XML will never
 find the XML element delimiters '<', '/' and '>' or the
 COBOL equivalent of an XML element. In all cases,
 conversion will stop with an error message.

 3.2 COBOL compilers

 Even if COBOL is standardized, internal representation
 of signed and binary data may differ from a compiler to
 another, from a platform to another one, etc. That's
 why, a small COBOL program was written to create
 binary, packed-decimal and numeric reference data. On
 IBM mainframe running MVS, compiling it is easy, using
 a one of the "Enterprise COBOL for Z/OS' product family.
 But on Windows and Linux/Unix, there are few compilers,
 with a active project status, available. On of them is
 : Tiny-Cobol that you can download from :

 http://tiny-cobol.sourceforge.net/

 Tiny-Cobol runs on :

 * BeOS,

 * FreeBSD,

 * Linux,

 * Windows (with MinGW or Cygwin).

 3.3 Internal representation

 The results of execution of this program on the 3
 platforms is showed below :

 Binary, packed-decimal and numeric internal representation

                                                                          +----------------------------------------------------+
                                                                          ]              Internal representation               ]
 -------------------------------------------------------------------------+----------------------------------------------------+
 ] Numeric type      ] COBOL clauses                             ] Value  ]            MVS  ]     Linux/Unix  ]        Windows ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 +-------------------+---------------------------------------------------------------------------------------------------------+
 ] External decimal  ]                                                                                                         ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC 9999 DISPLAY                          ]  1234  ]    F1 F2 F3 F4  ]    31 32 33 34  ]    31 32 33 34 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY                         ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN LEADING            ] +1234  ]    C1 F2 F3 F4  ]   41 32 33 34   ]   41 32 33 34  ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]    D1 F2 F3 F4  ]    D1 32 33 34  ]   D1 32 33 34  ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN TRAILING           ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN LEADING SEPARATE   ] +1234  ] 4E F1 F2 F3 F4  ] 4E 31 32 33 34  ] 4E 31 32 33 34 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ] 60 F1 F2 F3 F4  ] 60 31 32 33 34  ] 60 31 32 33 34 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN TRAILING SEPARATE  ] +1234  ] F1 F2 F3 F4 4E  ] 31 32 33 34 4E  ] 31 32 33 34 4E ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ] F1 F2 F3 F4 60  ] 31 32 33 34 60  ] 31 32 33 34 60 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 +-------------------+---------------------------------------------------------------------------------------------------------+
 ] Binary            ]                                                                                                         ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC 9999 COMP-4                           ]  1234  ]          04 D2  ]          D2 04  ]          D2 04 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 COMP-4                          ] +1234  ]          04 D2  ]          D2 04  ]          D2 04 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]          FB 2E  ]          2E FB  ]          2E FB ]
 +-------------------+---------------------------------------------------------------------------------------------------------+
 ] Packed-decimal    ]                                                                                                         ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC 9999 COMP-3                           ]  1234  ]       01 23 4F  ]       01 23 4F  ]       01 23 4F ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 COMP-3                          ] +1234  ]       01 23 4C  ]       01 23 4C  ]       01 23 4C ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]       01 23 4D  ]       01 23 4C  ]       01 23 4C ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+


 3.4 Low-values, high-values and spaces

 By default, space-only contents are ignored in XML. To
 preserve them, they are included in a CDATA tag.
 High-values (x'FF') and low-values (x'00') are escaped
 : i.e. converted in a tag like &#0; or &#255; respectively.

 3.5 Functions

 To convert text data to and from binary, packed-decimal
 and numeric data, six functions have been written :

  txt2bin

 It converts text data to binary. The parameters of the
 function are

 * text is the text to convert.

 * length is the length in bytes of binary data. May
   only be 2, 4 or 8.

 * signed is a flag to tell that the binary item is
   signed. May only be "Y" or "N".

 If text data is signed and negative, then text data is
 converted to binary and two's complement is performed.
 Returned data is justified to the right and padded with
 x'00' or x'FF' according to the sign. Finally, binary
 data is reversed for little endian systems.

  txt2pack

 It converts text data to packed-decimal. The parameters
 of the function are :

 * text is the text to convert.

 * length is the length in bytes of packed-decimal data.

 * signed is a flag to tell that the packed-decimal item
   is signed. May only be "Y" or "N".

 If necessary, a leading zero is added to the
 packed-decimal data so that the number of half-bytes is
 always odd. Returned data is justified to the right and
 padded with x'00'.

  txt2num

 It converts text data to numeric. The parameters of the
 function are :

 * text is the text to convert.

 * length is the length in bytes of numeric data.

 * signed is a flag to tell that the numeric item is
   signed. May only be "Y" or "N".

 * sign position is a flag to tell where the sign is
   located. Allowed values are : "" (empty quotes - for
   unsigned data), "L" (for LEADING sign), "T" (for
   TRAILING sign), "LS" (for LEADING SEPARATE sign) and
   "TS" (for TRAILING SEPARATE sign).

 Non-numeric data, like $ or '.', is converted in
 hexadecimal. Returned data is justified to the right
 and padded with zeroes.

  bin2txt

 It converts binary data to text. The parameters of the
 function are

 * bin is the binary to convert.

 * length is the length in bytes of binary data. May
   only be 2, 4 or 8.

 * signed is a flag to tell that the binary item is
   signed. May only be "Y" or "N".

 Firstly, binary data is reversed for little endian
 systems. If it is signed and negative, then two's
 complement is performed before converting it to text.
 Leading zeroes are removed and eventually the sign is
 added before returning the text data.

  pack2txt

 It converts packed-decimal data to text. The parameter
 of the function is :

 * pack is the packed-decimal data to convert.

 Sign is extracted from the last half-byte of the
 packed-decimal. Leading zeroes are removed and
 eventually the sign is added before returning the text data.

  num2txt

 It converts numeric data to text. The parameters of the
 function are :

 * num is the numeric data to convert.

 * signed is a flag to tell that the binary item is
   signed. May only be "Y" or "N".

 * sign position is a flag to tell where the sign is
   located. Allowed values are : "" (empty quotes - for
   unsigned data), "L" (for LEADING sign), "T" (for
   TRAILING sign), "LS" (for LEADING SEPARATE sign) and
   "TS" (for TRAILING SEPARATE sign).

 Non-numeric data, like $ or '.', is converted from
 hexadecimal to characters. Leading zeroes are removed
 and eventually the sign is added before returning the
 text data.

