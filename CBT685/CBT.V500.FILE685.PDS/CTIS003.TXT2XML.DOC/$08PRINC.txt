 Chapter : $08Princ

 Except for some constraints (see section ¢sec:Constraints!), there is no
 special requirements about the XML file used for the
 generation. However, there is a gold rule : the bigger
 the XML file is, more accurate will be the generated
 COBOL copybook. The reason is very simple : a bigger
 file means more tags, more contents analyzed, and more
 accuracy in ...

 8.1 <sec:The-meta-data>The meta-data

 The following meta-data are extracted from the XML
 elements, attributes and content :

 +------------------+--------------------------------+
 ] Meta-data        ] Usage                          ]
 +------------------+--------------------------------+
 +------------------+--------------------------------+
 ] Element name     ] To create the COBOL item names ]
 +------------------+--------------------------------+
 ] Type of content  ] To create the PICTURE clause   ]
 +------------------+--------------------------------+
 ] Sign position    ] To create SIGN clause          ]
 +------------------+--------------------------------+
 ] Length           ] To create the PICTURE clause   ]
 +------------------+--------------------------------+
 ] Occurrence       ] To create the OCCURS clause    ]
 +------------------+--------------------------------+


 8.2 <sec:The-COBOL-copybook-generation>The COBOL copybook generation

 In an XML file, the elements can be classified in 3
 categories :

 * Root : the first XML element. It's ignored in the
   generation process and is not part of the generated
   COBOL copybook.

 * First child : the second XML element. Each time it
   appears, the meta-data analysis of the XML elements
   is (re-)started. It corresponds to the first COBOL
   item in the copybook. As this first child element
   includes all the other XML elements, its
   corresponding COBOL item is a grouping item, with the
   lowest level and a unique occurrence.

 * Other child elements: the other XML elements. They
   are analyzed to extract the meta-data needed to build
   the rest of the COBOL copybook.

 The COBOL copybook generation process take place in the
 following steps :

 * The XML file is read record per record until the end
   of the file.

 * The first child is then searched.

 * Each XML element or attributes generates a COBOL item
   applying the following rules :

   * The name of the XML element or attribute is
     capitalized and dashes ("-") are translated to
     underscore ("_"). For example : <cobol_item_01>
     becomes COBOL-ITEM-01. COBOL item names are checked
     against a COBOL reserved word listaccording to IBM's "Enterprise COBOL for z/OS V3R3
 Language Reference "(IGY3LR20)
     . A warning message is issued if the generated item
     name appears in this list,

   * Meta-data of the contentContent is escaped if necessary. Characters like & < > "
 and ' are converted to &amp; &lt; &gt; &quot; &apos;
 respectively.
      of the XML element and attributes is extracted :
     length, type and sign.

   * Length of item is rounded if requested (see
     sub-section ¢sub:round!). A COBOL item is then created.

 * Each time the XML first child is found, the analysis
   is restarted and the meta-data is updated if
   necessary. For example, if the content length of an
   XML element is greater than the current length of its
   corresponding COBOL item, the length is updated. The
   contrary is, of course, not true.

 * When the end of the XML file is reached :

   * The item list is then checked against elementary or
     grouping items occurring more than one time. If
     this is the case, only the first occurrence of the
     item is kept, the others are deleted and an
     occurrence counter is created

   * The starting position of each COBOL item is
     computed. Although, it's not necessary for the
     COBOL copybook, it is used for final reporting.

   * The COBOL copybook is written, indenting the items
     according to their COBOL level.

 8.3 <sec:COBOL-level>COBOL level

 COBOL levels are not part of the XML file. They are
 computed using the following rules :

 * At each XML first child, level starts at 01 or 02
   according to the level01 parameter (see sub-section ¢sub:level01!)

 * The level of COBOL item increases :

   * at each XML element

   * at each XML content

   * at each XML attribute

 * The level of COBOL item decreases :

   * at each XML empty element

   * after each XML content

   * after each XML closing tag,

   * after each XML attribute.

 For example, with the following XML file,

 an XML file with attributes and content

 <?xml version="1.0"?>

 <DatabaseInventory>

     <DatabaseName>

       <DatabaseDomain>iDevelopment.info</DatabaseDomain>

       <Administrator EmailAlias="jhunter"
       Extension="6007">Jeffrey Hunter

       </Administrator>

     </DatabaseName>

 <DatabaseInventory>

 XML2COB will generate the following COBOL copybook :

 Generated COBOL copybook

 02 DATABASENAME.

   04 DATABASEDOMAIN PICTURE X(17).

   04 ADMINISTRATOR.

     06 EMAILALIAS PICTURE X(7).

     06 EXTENSION PICTURE 9(4).

     06 ADMINISTRATOR PICTURE X(14).

 As you can see, the COBOL item ADMINISTRATOR appears 2
 times :

 1. The first time as a grouping item, because the XML
   element Administrator has attributes

 2. The second time as an elementary item at a lower
   level than the grouping item, because the XML element
   Administrator also has a content.

 8.4 <sec:Constraints>Constraints

 In some cases, generating a COBOL copybook from an XML
 file is impossible. For example, this XML file : Nonconvertible XML file

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <weather>

   <city name="Los Angeles">

     <sky>Blue</sky>

     Hot and sunny

   </city>

 </weather>

 In this file, the XML element city is a complex one. It
 includes the simple element sky but also a content (Hot
 and sunny). The corresponding COBOL copybook would be
 something like :

 Corresponding COBOL copybook

 01 city pic x(20).

   03 name pic x(20).

   03 sky pic x(8).

 This is impossible in COBOL : a grouping item can't
 have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)
 paragraph 5.3.11 PICTURE Clause : "The PICTURE clause
 can be specified only at the elementary level."

 So, not all the XML files can be used and some
 constraints apply when generating a COBOL copybook :

 * Mixed XML content is not supported,

 * XML entities starting with <|ENTITY and ending with >
   are not supported. If such a declaration is found,
   the generation process is aborted,

 * Attributes of XML element are supported. But,
   attributes of the root element are ignored.

 * XML attributes like xml:space are ignored,

 * All the XML tags and contents may expand on more than
   one line,

 * XML headers starting with <?xml and ending with ?>
   are skipped,

 * XML internal and external document type declaration
   starting with <|DOCTYPE and ending with either > or
   !> are skipped,

 * XML comments starting with <|-- and ending with -->
   are skipped,

 * Empty XML elements, even with attributes, are supported.

