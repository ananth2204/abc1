 Chapter : $04Insta

 4.1 <sec:Downloading-TXT2XML>Downloading TXT2XML

 Download the latest TXT2XML version from :

 http://sourceforge.net/projects/txt2xml-rexx/

 and corresponding to your platform :

 +---------------------------+------------+
 ] File                      ] Platform   ]
 +---------------------------+------------+
 +---------------------------+------------+
 ] txt2xml.v*r*.mvs.zip      ] MVS        ]
 +---------------------------+------------+
 ] txt2xml.v*r*.win.zip      ] Windows    ]
 +---------------------------+------------+
 ] txt2xml.v*r*.unix.tar.gz  ] Linux/Unix ]
 +---------------------------+------------+


 where * are the version and release numbers. Create a
 new directory and decompress the archive file using
 your favorite decompression tool. For Unix environment,
 type in a console :

 tar xvzf txt2xml.v*r*.unix.tar.gz

 For MVS platform, the zip archive contains 2 files : a
 'readme.txt' and an XMIT file that you will upload to
 the mainframe (see below).

 4.2 <sec:Under-MVS>Under MVS

 4.2.1 <sub:Installation>Installation

 The installation is straight forward :

 1. Before uploading TXT2XML on the mainframe, you need
   to allocate a new dataset with the following
   characteristics : recfm=fb and lrecl=80,

 2. Unzip the TXT2XML archive and upload in binary mode
   the TXT2XML.XMIT file to this dataset on your MVS,

 3. In TSO, issue the following command :

   RECEIVE INDATASET(your.TXT2XML.XMIT.dataset)

 4. Hit enter when it prompts you for restoring
   parameters. This will create a new dataset,

 5. Follow the instructions in the README member of this
   new dataset. Typically, you will have to exec a Rexx
   called "receive" that will create the TXT2XML EXEC,
   CNTL and PANEL datasets.

 4.2.2 <sub:Tests>Tests

 To run the IVP job, edit the TXT2XML member in the
 TXT2XML.CNTL dataset and change in the entire member :

 * USERID to your TSO userid,

 * HLQ to the high level qualifier of TXT2XML.

 and submit the job. The JCL step names ending with KO
 should end with a RC = 12 and the JCL step names ending
 with OK should end with a RC = 0 or 4.

 4.2.3 <sub:Post-installation>Post-installation

 If you want, you can copy :

 * the TXT2XML.PANEL(TXT2XML) to your ISPF panel
   dataset.

 * the TXT2XML.EXEC(TXT2XML) to your ISPF EXEC or REXX
   dataset.

 4.3 <sec:Under-Windows>Under Windows

 4.3.1 <sub:Regina-or-Reginald>Regina or Reginald Rexx

 This step is mandatory. You must first download and
 install the latest Windows version of Regina Rexx from
 :

 http://sourceforge.net/projects/regina-rexx/

 You can alternatively download and install Reginald
 Rexx from :

 http://www.borg.com/~jglatt/rexx/reginald/reginald.htm

 Don't forget to add Rexx directory to the PATH
 environment variable (to access it : Start =>
 Parameters => Configuration Panel => System => Advanced
 => Environment Variables).

 4.3.2 Java

 This step is optional. Starting with version 1.25, a
 JAVA GUI front-end for non-mainframe platforms has been
 written. If you want to use it, you must install Java.
 See section ¢sec:Installation3! for more details.

 4.3.3 <sub:Tests-windows>Tests

 In the TXT2XML directory, execute in a DOS command
 interface window the TXT2XML.BAT file. The first five
 tests should end with an error, the others not.

 4.4 <sec:Under-Unix/linux-and>Under Unix/Linux and other platforms

 4.4.1 <sub:Regina-or-Reginald>Regina

 You must first download and install the latest version
 of Regina Rexx corresponding to your OS from :

 http://sourceforge.net/projects/regina-rexx/

 The Regina binary should be installed in /usr/bin/ . If
 it is not the case, modify in the rexx scripts
 (txt2xml.rexx & xml2cob.rexx), the magic number
 #|/usr/bin/rexx according to your needs.

 4.4.2 Java

 This step is optional. Starting with version 1.25, a
 JAVA GUI front-end for non-mainframe platforms has been
 written. If you want to use it, you must install Java.
 See section ¢sec:Installation3! for more details.

 4.4.3 <sub:Tests-unix>Tests

 In the TXT2XML directory, execute in a shell the
 ./txt2xml.sh script. The first five tests should end
 with an error, the others not.

