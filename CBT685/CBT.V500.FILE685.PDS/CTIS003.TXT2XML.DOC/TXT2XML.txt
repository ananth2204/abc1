 <Fichier graphique : image/txt2xml_107_A4.jpg>


 TXT2XML : Conversion from text to XML and vice-versa
 using a COBOL  copybook as reference.

 XML2COB : Generation of a COBOL copybook using an XML
 file as reference

 Version 1.25copyright - see appendix A

 Table des Matières

 Chapter 1 Introduction
 Chapter 2 Principles of conversion
     2.1 COBOL copybook analysis
         2.1.1 Cleaning the copybook
         2.1.2 Extracting the meta-data
         2.1.3 Renumbering the COBOL item levels
     2.2 Text to XML conversion
     2.3 XML to text conversion
 Chapter 3 Signed and binary data
     3.1 Warning
     3.2 COBOL compilers
     3.3 Internal representation
     3.4 Low-values, high-values and spaces
     3.5 Functions
 Chapter 4 Installation
     4.1 Downloading TXT2XML
     4.2 Under MVS
         4.2.1 Installation
         4.2.2 Tests
         4.2.3 Post-installation
     4.3 Under Windows
         4.3.1 Regina or Reginald Rexx
         4.3.2 Java
         4.3.3 Tests
     4.4 Under Unix/Linux and other platforms
         4.4.1 Regina
         4.4.2 Java
         4.4.3 Tests
 Chapter 5 Syntax
     5.1 Mandatory parameters
         5.1.1 TXT txt-file
         5.1.2 COB cob-file
         5.1.3 XML xml-file
         5.1.4 FORMAT format
     5.2 Optional parameters
         5.2.1 BROWSE
         5.2.2 VERBOSE
         5.2.3 DTD dtd-file
         5.2.4 PREFIX prefix
 Chapter 6 Examples
     6.1 MVS
         6.1.1 ISPF
         6.1.2 Batch
     6.2 Windows
     6.3 Unix/Linux
 Chapter 7 Introduction
 Chapter 8 Principles of generation
     8.1 The meta-data
     8.2 The COBOL copybook generation
     8.3 COBOL level
     8.4 Constraints
 Chapter 9 Installation
 Chapter 10 Syntax
     10.1 Mandatory parameters
         10.1.1 COB cob-file
         10.1.2 XML xml-file
     10.2 Optional parameters
         10.2.1 PREFIX prefix
         10.2.2 LEVEL01
         10.2.3 ROUND
         10.2.4 BROWSE
         10.2.5 VERBOSE
 Chapter 11 Examples
     11.1 MVS
         11.1.1 ISPF
         11.1.2 Batch
     11.2 Windows
     11.3 Unix/Linux
 Chapter 12 The Graphical User Interface
     12.1 Introduction
     12.2 Installation
     12.3 Syntax
     12.4 Example
 Appendix A License
     A.1 Preamble
     A.2 GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
     A.3 NO WARRANTY
     A.4 How to Apply These Terms to Your New Programs
 Appendix B History & Road map
     B.1 30/09/02 - Version 0.1
     B.2 04/10/02 - Version 0.2
     B.3 06/11/02 - Version 0.3
     B.4 21/11/02 - Version 1.0
     B.5 28/07/04 - Version 1.1 RC1
     B.6 28/08/04 - Version 1.1
     B.7 20/09/04 - Version 1.15
     B.8 05/11/04 - Version 1.20
     B.9 05/03/05 - Version 1.25
     B.10 Road map
 Appendix C Internet resources
 Appendix D Glossary



 <par:TXT2XML>T X T 2 X M L

 <cha:Introduction>Introduction

 COBOL, a forty years old computer language, and XML a
 new revolutionary format, seems to as near as the earth
 and the moon. However, if you look any further, you
 will notice some common concepts :

 +-----------------------------------------+------------------------------+--------------------------------+
 ]                                         ]             XML              ]             COBOL              ]
 +-----------------------------------------+------------------------------+--------------------------------+
 +-----------------------------------------+------------------------------+--------------------------------+
 ] Hierarchy of data                       ]   Root and child elements    ] level 01 and other level items ]
 +-----------------------------------------+------------------------------+--------------------------------+
 ] Indentation for a better visualization  ]            \surd             ]             \surd              ]
 +-----------------------------------------+------------------------------+--------------------------------+
 ] Structured data                         ] Simple and complex elements  ]    Items and grouping items    ]
 +-----------------------------------------+------------------------------+--------------------------------+
 ] Occurrence of data                      ]     Unique and multiple      ]         OCCURS clause          ]
 +-----------------------------------------+------------------------------+--------------------------------+


 The need to exchange data in XML between servers is
 continuously increasing and, in each mainframe around
 the world, there are plenty of COBOL copybooks and text
 files. So, was born the idea of TXT2XML : a bridge
 between the common concepts of COBOL and XML. It's not
 a GUIHowever, starting with version 1.25, a GUI front-end
 has been developed. See chapter ¢cha:The-Graphical-User! for more details.
  tool, it's a Rexx script (for more info on Rexx see
 appendix ¢cha:Internet-resources!) running in a DOS command interface for the
 Windows users, a shell for the Unix users, ISPF or JCL
 for the mainframe users.

 TXT2XML is not an XML parser written in Rexx, nor will
 support the entire XML specification. Some COBOL
 clauses are also not supported (like REDEFINES,
 DEPENDING, ... ). TXT2XML works in both directions,
 i.e. it can convert XML files to text files and
 vice-versa. The COBOL copybook is always mandatory to
 perform the conversion, because :

 * During XML to text conversion, XML element names are
   checked against the COBOL item names. For example, if
   there is an XML element like <cobol_item_01>, there
   must be an item like COBOL-ITEM-01 in the COBOL copybook.

 * During text to XML conversion, the COBOL copybook
   item names are used to build the XML elements.

 * During XML to text conversion, if a COBOL item is
   numeric, the XML content is checked to see if it's
   also numeric. Otherwise conversion will fail.

 * ...

 TXT2XML was therefore developed primarily to convert
 data files typically used on a mainframe. TXT2XML works
 only with well-formed XML documents and valid COBOL
 copybooks. TXT2XML will never check for COBOL syntax
 errors or missing XML closing tags. TXT2XML generates
 100 % compatible and well-formed XML files, but it's
 still your responsibility to validate them against a
 DTD with an XML parser.

 TXT2XML was originally written on an IBM mainframe
 running OS/390 V2R10. But, starting with version 1.15,
 TXT2XML should also run on the following platforms :

 * Linux,

 * FreeBSD,

 * Solaris,

 * AIX,

 * HP-UX,

 * OS/2,

 * eCS,

 * DOS,

 * Win9x/Me/NT/2k/XP,

 * Amiga,

 * AROS,

 * QNX4.x,

 * QNX6.x,

 * BeOS,

 * MacOS X,

 * EPOC32,

 * AtheOS,

 * OpenVMS,

 * SkyOS,

 * OpenEdition.

 As it's impossible to run all those OS, TXT2XML was
 tested successfully on :

 * Windows 2K,

 * Linux Mandrake 10.0,

 * MVS (OS/390 V2R10).

 It should work without problems on the other platformswith the exception of binary and packed data..
 To run TXT2XML on non-mainframe platforms, you must
 first install Regina Rexx or for windows only, Reginald
 (see chapter ¢cha:Installation!). Should you succeed or encounter
 problems in running TXT2XML on a non-tested platform,
 please send an e-mail to :

 sunuraxi@users.sourceforge.net

 TXT2XML is released under the GPL license (see appendix ¢cha:License!).

 <cha:Principles-of-conversion>Principles of conversion

 As said early, conversion occurs only if a valid COBOL
 copybook is present. The first step in the conversion
 process is the ...

 2.1 <sec:COBOL-copybook-analysis>COBOL copybook analysis

 The analysis take place in 3 phases :

 2.1.1 <sub:Cleaning-the-copybook>"Cleaning" the copybook

 In this phase, the copybook is read and :

 * comments are skipped,

 * Multi-line COBOL declaration are concatenated in one line.

 * PICTURE clauses are replaced by PIC,

 * SIGN clauses are ignored,

 * IS clauses are ignored,

 * NATIVE clauses are skipped,

 * X(4) and 9(6) symbols are replaced respectively by
   XXXX and 999999,

 * Final dot of COBOL declarations is suppressed,

 * COBOL declarations are capitalized.According to IBM's COBOL Language Reference (IGYLR204),
 paragraph 1.1.1.1 COBOL Words with Single-Byte
 Characters : "Each lowercase letter is considered to be
 equivalent to its corresponding uppercase letter,
 except in non numeric literals"

 2.1.2 <sub:Extracting-the-meta-data>Extracting the meta-data

 In this phase, the following meta-data are extracted :

 +--------------------+--------------------------------------------------------------+
 ] Meta-data          ] Usage                                                        ]
 +--------------------+--------------------------------------------------------------+
 +--------------------+--------------------------------------------------------------+
 ] COBOL level        ] To indent XML element                                        ]
 +--------------------+--------------------------------------------------------------+
 ] Name               ] To create or check XML element tags                          ]
 +--------------------+--------------------------------------------------------------+
 ] Type of data       ] To check XML data during text to XML conversion              ]
 +--------------------+--------------------------------------------------------------+
 ] Sign               ] When converting signed and/or binary data                    ]
 +--------------------+--------------------------------------------------------------+
 ] Sign position      ] When converting numeric data                                 ]
 +--------------------+--------------------------------------------------------------+
 ] Starting position  ] To create the XML content or a text record                   ]
 +--------------------+--------------------------------------------------------------+
 ] Length             ] To create the XML content or a text record                   ]
 +--------------------+--------------------------------------------------------------+
 ] Default value      ] To initialize a text record when converting from XML to text ]
 +--------------------+--------------------------------------------------------------+


 FILLER clauses are not skipped. They are used to
 compute the starting positions of all COBOL items. They
 never appears in the XML file when the text to XML
 conversion process ends. The copybook is also checked
 for unsupported COBOL clauses :

 * REDEFINES

 * DEPENDING ON

 * COMPUTATIONAL-1, COMPUTATIONAL-2, COMPUTATIONAL-5,
   COMP-1, COMP-2, and COMP-5.

 * POINTER, PROCEDURE-POINTER and FUNCTION-POINTER

 * OBJECT REFERENCE

 * NATIONAL

 * DISPLAY-1DBCS items are not supported

 * P symbol (decimal scaling position)

 * INDEX

 * level 66, 77, 88,Those levels generate only a warning message and
 conversion continues.

 * Non-numeric COBOL levels or COBOL levels greater than 49,

 * DBCS picture symbols.

 and for partially supported COBOL clauses :

 * OCCURS for elementary and group item with only one dimension,

 * VALUES except for QUOTES and NULL clauses.

 2.1.3 <sub:Renumbering-the-COBOL>Renumbering the COBOL item levels

 As COBOL item levels are used to indent tags during
 text to XML conversion, they are internally renumbered
 to have a smoother indentation. For example, the
 following COBOL copybooks :

 A sample COBOL copybook

 01 COBOL-ITEM-01.

   05 FILLER PIC IS X.

   05 COBOL-ITEM-02 PIC IS X(5).



 and

 Same sample COBOL copybook with different levels

 10 COBOL-ITEM-01.

   20 FILLER PIC IS X.

   20 COBOL-ITEM-02 PIC IS X(5).



 will always give the same indentation, like in the
 following XML file :

 Resulting XML file after conversion

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <DATA>

   <COBOL_ITEM_01>

     <COBOL_ITEM_02>12345</COBOL_ITEM_02>

   </COBOL_ITEM_01>

 </DATA>

 The original COBOL copybook is never modified by
 TXT2XML and if the conversion ends without errors, a
 report of this analysis is printed.

 2.2 <sec:Text-to-XML>Text to XML conversion

 This is the easiest conversion. An XML header (<?xml
 .... ?>) is first created. Then, one text record is
 read, item data is extracted from the current text
 record and the XML elements and their content are
 written one by one. The conversion process continues
 until the end of the text file. The XML elements can be
 classified in 3 categories :

 * Root : this element must be unique in the whole XML
   file. That's why, DATA, a COBOL reserved word, was
   chosen as root element name. It has no equivalent in
   the COBOL copybook.

 * First child : it appears each time a text record is
   read. It corresponds to the level of the first COBOL
   item in the copybook. As this first child element
   will include all the other XML elements, this COBOL
   item needs to be a grouping item,with the lowest
   level and ideally with a unique occurrence.

 * Other child elements: The other XML elements.

 All of them are built using the following rules :

 * The name of the XML element is the capitalized COBOL
   item name with dashes ("-") translated to underscore ("_"
   ). For example : COBOL-ITEM-01 will become <cobol_item_01>,

 * Content of the XML element is extracted from the
   current text record (using the starting position and
   the length computed in section ¢sec:COBOL-copybook-analysis!). Characters are
   escaped if necessary& < > " and ' need to be converted to &amp; &lt; &gt;
 &quot; &apos; respectively.
   ,

 * FILLER clauses are skipped.

 * Opened XML tags are closed :

   * immediately after the content of an XML element,

   * at the end of each COBOL grouping item,

   * at then end of the text record,

   * at the end of the text file.

 If requested, TXT2XML can create a DTD (Document Type
 Definition), based on the COBOL copybook, which
 describes the XML structure. This DTD can be internal :

 Internal DTD

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <|DOCTYPE DATA ¢

   <|ELEMENT NUMERIC-TYPES (EXTERNAL-DECIMAL, BINARIES,

     INTERNAL_DECIMAL)>

   <|ELEMENT EXTERNAL-DECIMAL (EXT-DEC-UNSIGNED,

     EXT-DEC-SIGNED-NEGATIVE, EXT-DEC-SIGNED-POSITIVE,

     EXT-DEC-SIGN-LEADING-NEG, EXT-DEC-SIGN-LEADING-POS,

     EXT-DEC-SIGN-TRAILING-NEG,
     EXT-DEC-SIGN-TRAILING-POS,

     EXT-DEC-SIGN-SEP-LEAD-NEG,
     EXT-DEC-SIGN-SEP-LEAD-POS,

     EXT_DEC_SIGN_SEP_TRAIL_NEG, EXT_DEC_SIGN_SEP_TRAIL_POS)>

   <|ELEMENT EXT_DEC_UNSIGNED (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGNED_NEGATIVE (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGNED_POSITIVE (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_LEADING_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_LEADING_POS (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_TRAILING_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_TRAILING_POS (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_POS (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_NEG (#PCDATA)>

   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_POS (#PCDATA)>

   <|ELEMENT BINARIES (BINARY-UNSIGNED,
   BINARY-SIGNED-POSITIVE,

     BINARY_SIGNED_NEGATIVE)>

   <|ELEMENT BINARY_UNSIGNED (#PCDATA)>

   <|ELEMENT BINARY_SIGNED_POSITIVE (#PCDATA)>

   <|ELEMENT BINARY_SIGNED_NEGATIVE (#PCDATA)>

   <|ELEMENT INTERNAL-DECIMAL (INT-DEC-UNSIGNED,
   INT-DEC-SIGNED-POS,

     INT_DEC_SIGNED_NEG)>

   <|ELEMENT INT_DEC_UNSIGNED (#PCDATA)>

   <|ELEMENT INT_DEC_SIGNED_POS (#PCDATA)>

   <|ELEMENT INT_DEC_SIGNED_NEG (#PCDATA)>

 !>

 <DATA>

   <NUMERIC_TYPES>

 ...

 or external :

 XML file with an external DTD reference

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="no" ?>

 <|DOCTYPE DATA SYSTEM "./sample/dtd/binary">

 <DATA>

   <NUMERIC_TYPES>

   ...

 2.3 <sec:XML-to-text>XML to text conversion

 This conversion is a little bit more difficult and even
 in some cases impossible. Remember, TXT2XML implements
 only a subset of XML and COBOL. For example, this XML
 file : Nonconvertible XML file

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <weather>

   <city name="Los Angeles">

     <sky>Blue</sky>

     Hot and sunny

   </city>

 </weather>

 In this file, the XML element city is a complex one. It
 includes the simple element sky but also a content (Hot
 and sunny). The corresponding COBOL copybook would be
 something like :

 Corresponding COBOL copybook

 01 city pic x(20).

   03 name pic x(20).

   03 sky pic x(8).

 This is impossible in COBOL : a grouping item can't
 have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)
 paragraph 5.3.11 PICTURE Clause : "The PICTURE clause
 can be specified only at the elementary level."

 So, not all the XML files can be converted. But, with a
 valid COBOL copybook, the XML file is read one line at
 the time and data is extracted using the following
 rules :

 * Mixed XML content is not supported,

 * All the XML tags and contents may expand on more than
   one line,

 * XML headers starting with <?xml and ending with ?>
   are skipped,

 * XML entities starting with <|ENTITY and ending with >
   are not supported. If such a declaration is found,
   the conversion process is aborted,

 * XML internal and external document type declaration
   starting with <|DOCTYPE and ending with either > or
   !> are skipped,

 * XML comments starting with <|-- and ending with -->
   are skipped,

 * The first child element is then searched. Each time
   an XML first child closing tag is found, a text
   record is written and a new text record is
   initialized with default values from the COBOL copybook,

 * Attributes of the first child element are supported.
   But, attributes of the root element are ignored.

 * Each XML element, even without a content, must have
   an equivalent in the COBOL copybook. To find it, the
   XML element name is capitalized and underscores are
   translated to dashes. For example : <cobol_item_01>
   will become COBOL-ITEM-01 and is searched in the
   COBOL copybook,

 * Each XML attribute may have an equivalent in the
   COBOL copybook,

 * XML attributes like xml:space are ignored,

 * Each time a content is found, it's length and data
   type are checked against the characteristics of the
   corresponding COBOL item. Numeric items are right
   justified and left zero filled. If necessary
   characters are escaped.&amp; &lt; &gt; &quot; &apos; are converted to & < > "
 and ' respectively or content is extracted from CDATA
 section starting with <|¢CDATA¢ and ending with !!>

 * If some XML elements or attributes are missing,
   conversion continues with the new element found.
   Missing COBOL items are left to their default value
   (see section ¢sec:COBOL-copybook-analysis!).

 * Empty XML elements, even with attributes, are supported.

 <cha:Signed-and-binary>Signed and binary data

 3.1 Warning

 Signed an binary data are hardly bound with the
 operating system and the hardware running TXT2XML. On a
 PC, binary (and not numeric and packed-decimal) data is
 stored in little endian mode. It means that the
 low-order byte of the number is stored in memory at the
 lowest address, and the high-order byte at the highest
 address. On a IBM MVS mainframe, binary data are stored
 in the opposite mode : big endian. For example :

 +-------------------+---------------------+------------------+
 ] Hexadecimal data  ] Little endian (PC)  ] Big endian (MVS) ]
 +-------------------+---------------------+------------------+
 ]  x'01 02 03 "04   ]    04 03 02 01      ]   01 02 03 04    ]
 +-------------------+---------------------+------------------+


   Conclusion : although TXT2XML runs on multiple
   platforms, you should always run TXT2XML on the
   platform where you will use the binary and/or signed
   converted data.

 So, forget the idea to run TXT2XML on one platform (i.e
 a PC running Windows) and to transfer the converted
 file on another platform (i.e. an IBM mainframe). File
 transfer means code page (character set) translation
 which binary, packed-decimal and even numeric data
 don't support. Don't try also to convert a pure EBCDIC
 file on a non-mainframe platform : TXT2XML will never
 find the XML element delimiters '<', '/' and '>' or the
 COBOL equivalent of an XML element. In all cases,
 conversion will stop with an error message.

 3.2 COBOL compilers

 Even if COBOL is standardized, internal representation
 of signed and binary data may differ from a compiler to
 another, from a platform to another one, etc. That's
 why, a small COBOL program was written to create
 binary, packed-decimal and numeric reference data. On
 IBM mainframe running MVS, compiling it is easy, using
 a one of the "Enterprise COBOL for Z/OS' product family.
 But on Windows and Linux/Unix, there are few compilers,
 with a active project status, available. On of them is
 : Tiny-Cobol that you can download from :

 http://tiny-cobol.sourceforge.net/

 Tiny-Cobol runs on :

 * BeOS,

 * FreeBSD,

 * Linux,

 * Windows (with MinGW or Cygwin).

 3.3 Internal representation

 The results of execution of this program on the 3
 platforms is showed below :

 Binary, packed-decimal and numeric internal representation

                                                                          +----------------------------------------------------+
                                                                          ]              Internal representation               ]
 -------------------------------------------------------------------------+----------------------------------------------------+
 ] Numeric type      ] COBOL clauses                             ] Value  ]            MVS  ]     Linux/Unix  ]        Windows ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 +-------------------+---------------------------------------------------------------------------------------------------------+
 ] External decimal  ]                                                                                                         ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC 9999 DISPLAY                          ]  1234  ]    F1 F2 F3 F4  ]    31 32 33 34  ]    31 32 33 34 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY                         ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN LEADING            ] +1234  ]    C1 F2 F3 F4  ]   41 32 33 34   ]   41 32 33 34  ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]    D1 F2 F3 F4  ]    D1 32 33 34  ]   D1 32 33 34  ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN TRAILING           ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN LEADING SEPARATE   ] +1234  ] 4E F1 F2 F3 F4  ] 4E 31 32 33 34  ] 4E 31 32 33 34 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ] 60 F1 F2 F3 F4  ] 60 31 32 33 34  ] 60 31 32 33 34 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 DISPLAY SIGN TRAILING SEPARATE  ] +1234  ] F1 F2 F3 F4 4E  ] 31 32 33 34 4E  ] 31 32 33 34 4E ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ] F1 F2 F3 F4 60  ] 31 32 33 34 60  ] 31 32 33 34 60 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 +-------------------+---------------------------------------------------------------------------------------------------------+
 ] Binary            ]                                                                                                         ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC 9999 COMP-4                           ]  1234  ]          04 D2  ]          D2 04  ]          D2 04 ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 COMP-4                          ] +1234  ]          04 D2  ]          D2 04  ]          D2 04 ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]          FB 2E  ]          2E FB  ]          2E FB ]
 +-------------------+---------------------------------------------------------------------------------------------------------+
 ] Packed-decimal    ]                                                                                                         ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC 9999 COMP-3                           ]  1234  ]       01 23 4F  ]       01 23 4F  ]       01 23 4F ]
 +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                   ] PIC S9999 COMP-3                          ] +1234  ]       01 23 4C  ]       01 23 4C  ]       01 23 4C ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+
 ]                                                               ] -1234  ]       01 23 4D  ]       01 23 4C  ]       01 23 4C ]
 +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+


 3.4 Low-values, high-values and spaces

 By default, space-only contents are ignored in XML. To
 preserve them, they are included in a CDATA tag.
 High-values (x'FF') and low-values (x'00') are escaped
 : i.e. converted in a tag like &#0; or &#255; respectively.

 3.5 Functions

 To convert text data to and from binary, packed-decimal
 and numeric data, six functions have been written :

  txt2bin

 It converts text data to binary. The parameters of the
 function are

 * text is the text to convert.

 * length is the length in bytes of binary data. May
   only be 2, 4 or 8.

 * signed is a flag to tell that the binary item is
   signed. May only be "Y" or "N".

 If text data is signed and negative, then text data is
 converted to binary and two's complement is performed.
 Returned data is justified to the right and padded with
 x'00' or x'FF' according to the sign. Finally, binary
 data is reversed for little endian systems.

  txt2pack

 It converts text data to packed-decimal. The parameters
 of the function are :

 * text is the text to convert.

 * length is the length in bytes of packed-decimal data.

 * signed is a flag to tell that the packed-decimal item
   is signed. May only be "Y" or "N".

 If necessary, a leading zero is added to the
 packed-decimal data so that the number of half-bytes is
 always odd. Returned data is justified to the right and
 padded with x'00'.

  txt2num

 It converts text data to numeric. The parameters of the
 function are :

 * text is the text to convert.

 * length is the length in bytes of numeric data.

 * signed is a flag to tell that the numeric item is
   signed. May only be "Y" or "N".

 * sign position is a flag to tell where the sign is
   located. Allowed values are : "" (empty quotes - for
   unsigned data), "L" (for LEADING sign), "T" (for
   TRAILING sign), "LS" (for LEADING SEPARATE sign) and
   "TS" (for TRAILING SEPARATE sign).

 Non-numeric data, like $ or '.', is converted in
 hexadecimal. Returned data is justified to the right
 and padded with zeroes.

  bin2txt

 It converts binary data to text. The parameters of the
 function are

 * bin is the binary to convert.

 * length is the length in bytes of binary data. May
   only be 2, 4 or 8.

 * signed is a flag to tell that the binary item is
   signed. May only be "Y" or "N".

 Firstly, binary data is reversed for little endian
 systems. If it is signed and negative, then two's
 complement is performed before converting it to text.
 Leading zeroes are removed and eventually the sign is
 added before returning the text data.

  pack2txt

 It converts packed-decimal data to text. The parameter
 of the function is :

 * pack is the packed-decimal data to convert.

 Sign is extracted from the last half-byte of the
 packed-decimal. Leading zeroes are removed and
 eventually the sign is added before returning the text data.

  num2txt

 It converts numeric data to text. The parameters of the
 function are :

 * num is the numeric data to convert.

 * signed is a flag to tell that the binary item is
   signed. May only be "Y" or "N".

 * sign position is a flag to tell where the sign is
   located. Allowed values are : "" (empty quotes - for
   unsigned data), "L" (for LEADING sign), "T" (for
   TRAILING sign), "LS" (for LEADING SEPARATE sign) and
   "TS" (for TRAILING SEPARATE sign).

 Non-numeric data, like $ or '.', is converted from
 hexadecimal to characters. Leading zeroes are removed
 and eventually the sign is added before returning the
 text data.

 <cha:Installation>Installation

 4.1 <sec:Downloading-TXT2XML>Downloading TXT2XML

 Download the latest TXT2XML version from :

 http://sourceforge.net/projects/txt2xml-rexx/

 and corresponding to your platform :

 +---------------------------+------------+
 ] File                      ] Platform   ]
 +---------------------------+------------+
 +---------------------------+------------+
 ] txt2xml.v*r*.mvs.zip      ] MVS        ]
 +---------------------------+------------+
 ] txt2xml.v*r*.win.zip      ] Windows    ]
 +---------------------------+------------+
 ] txt2xml.v*r*.unix.tar.gz  ] Linux/Unix ]
 +---------------------------+------------+


 where * are the version and release numbers. Create a
 new directory and decompress the archive file using
 your favorite decompression tool. For Unix environment,
 type in a console :

 tar xvzf txt2xml.v*r*.unix.tar.gz

 For MVS platform, the zip archive contains 2 files : a
 'readme.txt' and an XMIT file that you will upload to
 the mainframe (see below).

 4.2 <sec:Under-MVS>Under MVS

 4.2.1 <sub:Installation>Installation

 The installation is straight forward :

 1. Before uploading TXT2XML on the mainframe, you need
   to allocate a new dataset with the following
   characteristics : recfm=fb and lrecl=80,

 2. Unzip the TXT2XML archive and upload in binary mode
   the TXT2XML.XMIT file to this dataset on your MVS,

 3. In TSO, issue the following command :

   RECEIVE INDATASET(your.TXT2XML.XMIT.dataset)

 4. Hit enter when it prompts you for restoring
   parameters. This will create a new dataset,

 5. Follow the instructions in the README member of this
   new dataset. Typically, you will have to exec a Rexx
   called "receive" that will create the TXT2XML EXEC,
   CNTL and PANEL datasets.

 4.2.2 <sub:Tests>Tests

 To run the IVP job, edit the TXT2XML member in the
 TXT2XML.CNTL dataset and change in the entire member :

 * USERID to your TSO userid,

 * HLQ to the high level qualifier of TXT2XML.

 and submit the job. The JCL step names ending with KO
 should end with a RC = 12 and the JCL step names ending
 with OK should end with a RC = 0 or 4.

 4.2.3 <sub:Post-installation>Post-installation

 If you want, you can copy :

 * the TXT2XML.PANEL(TXT2XML) to your ISPF panel
   dataset.

 * the TXT2XML.EXEC(TXT2XML) to your ISPF EXEC or REXX
   dataset.

 4.3 <sec:Under-Windows>Under Windows

 4.3.1 <sub:Regina-or-Reginald>Regina or Reginald Rexx

 This step is mandatory. You must first download and
 install the latest Windows version of Regina Rexx from
 :

 http://sourceforge.net/projects/regina-rexx/

 You can alternatively download and install Reginald
 Rexx from :

 http://www.borg.com/~jglatt/rexx/reginald/reginald.htm

 Don't forget to add Rexx directory to the PATH
 environment variable (to access it : Start =>
 Parameters => Configuration Panel => System => Advanced
 => Environment Variables).

 4.3.2 Java

 This step is optional. Starting with version 1.25, a
 JAVA GUI front-end for non-mainframe platforms has been
 written. If you want to use it, you must install Java.
 See section ¢sec:Installation3! for more details.

 4.3.3 <sub:Tests-windows>Tests

 In the TXT2XML directory, execute in a DOS command
 interface window the TXT2XML.BAT file. The first five
 tests should end with an error, the others not.

 4.4 <sec:Under-Unix/linux-and>Under Unix/Linux and other platforms

 4.4.1 <sub:Regina-or-Reginald>Regina

 You must first download and install the latest version
 of Regina Rexx corresponding to your OS from :

 http://sourceforge.net/projects/regina-rexx/

 The Regina binary should be installed in /usr/bin/ . If
 it is not the case, modify in the rexx scripts
 (txt2xml.rexx & xml2cob.rexx), the magic number
 #|/usr/bin/rexx according to your needs.

 4.4.2 Java

 This step is optional. Starting with version 1.25, a
 JAVA GUI front-end for non-mainframe platforms has been
 written. If you want to use it, you must install Java.
 See section ¢sec:Installation3! for more details.

 4.4.3 <sub:Tests-unix>Tests

 In the TXT2XML directory, execute in a shell the
 ./txt2xml.sh script. The first five tests should end
 with an error, the others not.

 <cha:Syntax>Syntax

 The TXT2XML syntax is :

 TXT2XML syntax

 txt2xml

   TXT txt-file

   COB cob-file

   XML xml-file

   FORMAT format

   PREFIX prefix

   DTD dtd-file

   VERBOSE

   BROWSE

 All parameters can be typed in any case (upper, lower
 or mixed) and only in this order. But, on some case
 sensitive operating systems like Linux/Unix, file names
 must be typed with the correct case and the TXT2XML
 command must be typed in lower case. The file names may
 include space characters. TXT2XML parameters must be
 only one line, except if your operating systems allows
 continuation characters.

 5.1 <sec:Mandatory-parameters>Mandatory parameters

 5.1.1 <sub:TXT>TXT txt-file

 It's the name of the input or output (depending on the
 direction of conversion) text file. There is no default
 value for this parameter.

  Under MVS

 'txt-file' can be one of the following :

 * a sequential dataset,

 * a member of a partitioned dataset,

 * a DDname. In this case, the DDname must be preceded
   by 'DD:'.

 Before running TXT2XML, txt-file must exist, except
 when doing an XML to text conversion under ISPF.

  For all other platforms

 txt-file has to be a correct file name. The file must
 exist before running TXT2XML for a text to XML conversion.

 5.1.2 <sub:COB>COB cob-file

 It's the name of the COBOL copybook file. There is no
 default value for this parameter.

  Under MVS

 "cob-file" can be one of the following :

 * a sequential dataset,

 * a member of a partitioned dataset,

 * a DDname. In this case, the DDname must be preceded
   by 'DD:'.

 Before running TXT2XML, cob-file must always exist.

  For all other platforms

 cob-file has to be a correct file name. The file must
 always exist before running TXT2XML. Since TXT2XML does
 not handle some COBOL clauses such as REDEFINES, etc,
 it is best to "clean up" the copybook by removing all
 COBOL clauses not handled by the TXT2XML routines.

 5.1.3 <sub:XML>XML xml-file

 It's the name of the input or output (depending on the
 direction of conversion) XML file. There is no default
 value for this parameter.

  Under MVS

 "xml-file" can be one of the following :

 * a sequential dataset,

 * a member of a partitioned dataset,

 * a DDname. In this case, the DDname must be preceded
   by 'DD:'.

 Before running TXT2XML, xml-file must exist, except
 when doing a text to XML conversion under ISPF.

  For all other platforms

 xml-file has to be a correct file name. The file must
 exist before running TXT2XML for an XML to text conversion.

 5.1.4 <sub:FORMAT>FORMAT format

 The value for this parameter may only be (all
 platforms) :

 * X for text to XML conversion,

 * T to XML to text conversion.

 There is no default value for this parameter.

 5.2 <sec:Optional-parameters>Optional parameters

 5.2.1 <sub:Browse>BROWSE

 The default value for this parameter is no.

  Under MVS

 Only under ISPF and if present, will browse the
 conversion results report.

  For all other platforms

 On all other platforms, this parameter is ignored.

 5.2.2 <sub:verbose>VERBOSE

 If present, displays all the messages. The default
 value is no, all messages are not displayed.

 5.2.3 <sub:XML>DTD dtd-file

 This parameter is only valid during text to XML
 conversion. It's the name of an optional output DTD
 file or the value "INTERNAL' for a DTD included in the
 XML file. There is no default value for this parameter.
 if omitted, no DTD will be created.

  Under MVS

 "dtd-file" can be one of the following :

 * a sequential dataset,

 * a member of a partitioned dataset,

 * a DDname. In this case, the DDname must be preceded
   by 'DD:'.

 Before running TXT2XML under ISPF, dtd-file must not exist.

  For all other platforms

 dtd-file has to be a correct file name.

 5.2.4 <sub:prefix>PREFIX prefix

 If present :

 * During text to XML conversion, if prefix value is
   'COBOL-' then the COBOL item COBOL-ITEM-01 will be
   converted to <ITEM-01> .

 * During XML to text conversion, if prefix value is
   'COBOL-' then the XML element <ITEM_01> will be
   checked against the COBOL item COBOL-ITEM-01.

 There is no default value for this parameter.

  Under MVS batch (JCL)

 The dash ('-') used in COBOL item name, like
 COBOL-ITEM-01, is taken for a continuation character in
 JCL. If you use prefix within a batch job, replace all
 dashes ('-') in the COBOL item name by underscores ('_').

 <cha:Exemples>Examples

 You will find here some examples of TXT2XML. You will
 find more examples in the test script files (see
 section ¢sub:Tests!, section ¢sub:Tests-unix!, or section ¢sub:Tests-windows!) or in the IVP job.

 6.1 <sec:MVS>MVS

 6.1.1 <sub:ISPF>ISPF

 Just type "exec' in front of the TXT2XML member of the
 EXEC dataset and the ISPF panel will appear :

 ISPF panel

 <Fichier graphique : image/tn3270_01.jpg>


 Fill the required parameters, hit enter and you will
 see :

 Browsing result dataset

 <Fichier graphique : image/tn3270_02.jpg>


 6.1.2 <sub:Batch>Batch

 If you submit the following JCL : Job to be submitted

 <Fichier graphique : image/tn3270_03.jpg>


 You will get :

 Resulting job log

 <Fichier graphique : image/tn3270_04.jpg>


 6.2 <sec:Windows>Windows

 In a DOS command interface window and in the TXT2XML
 directory, just type :

 Windows example

 D:\REXX\txt2xml>txt2xml.rexx txt .\sample\txt\database
 cob .\sample\cob\database xml .\sample\xml\database
 format txt

 and you will get :

 Resulting message log

 TXT2XML: Text from & to XML Conversion Utility.
 Version: 1.2

 TXT2XML:

 TXT2XML: ==>Warning : in text record number 1 , COBOL
 item ADMINISTRATOR starting at 115

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 1 , COBOL
 item EMAILALIAS starting at 135

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 1 , COBOL
 item EXTENSION starting at 145

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 1 , COBOL
 item ADMINISTRATOR starting at 149

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 1 , COBOL
 item EMAILALIAS starting at 169

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 1 , COBOL
 item EXTENSION starting at 179

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 2 , COBOL
 item ADMINISTRATOR starting at 149

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 2 , COBOL
 item EMAILALIAS starting at 169

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 2 , COBOL
 item EXTENSION starting at 179

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML: ==>Warning : in text record number 3 , COBOL
 item EXTENSION starting at 179

 TXT2XML: is filled with default values because the
 corresponding XML equivalent was not found

 TXT2XML:

 TXT2XML: Txt File: .\sample\txt\database

 TXT2XML: Cobol File: .\sample\cob\database

 TXT2XML: XML File: .\sample\xml\database

 TXT2XML: Output data format: TXT

 TXT2XML: Text records: 3 processed in .29000 seconds

 ...

 6.3 <sec:Unix>Unix/Linux

 In a shell, just type in lowercase in the TXT2XML
 directory :

 Unix/Linux example.

 ./txt2xml.rexx txt ./sample/txt/text01 cob

 ./sample/cob/cobol01 xml ./sample/xml/xml01 format xml

 The XML file should look like :

 Resulting XML file

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <|--

 Created by TXT2XML on 12 Sep 2004 at 21:46:39

 More info on :
 http://sourceforge.net/projects/txt2xml-rexx/

 -->

 <DATA>

   <COBOL_ITEM_01>

     <COBOL_ITEM_02>12&lt;45</COBOL_ITEM_02>

     <COBOL_ITEM_02>67&gt;90</COBOL_ITEM_02>

     <COBOL_ITEM_03>

       <COBOL_ITEM_04>1&amp;3</COBOL_ITEM_04>

       <COBOL_ITEM_05>4</COBOL_ITEM_05>

       <COBOL_ITEM_06>5</COBOL_ITEM_06>

     </COBOL_ITEM_03>

     <COBOL_ITEM_03>

     <COBOL_ITEM_04>678</COBOL_ITEM_04>

       <COBOL_ITEM_05>9</COBOL_ITEM_05>

       <COBOL_ITEM_06>0</COBOL_ITEM_06>

     </COBOL_ITEM_03>

     <COBOL_ITEM_03>

       <COBOL_ITEM_04>123</COBOL_ITEM_04>

       <COBOL_ITEM_05>4</COBOL_ITEM_05>

       <COBOL_ITEM_06>5</COBOL_ITEM_06>

     </COBOL_ITEM_03>

     <COBOL_ITEM_03>

       <COBOL_ITEM_04>678</COBOL_ITEM_04>

       <COBOL_ITEM_05>9</COBOL_ITEM_05>

       <COBOL_ITEM_06>0</COBOL_ITEM_06>

     </COBOL_ITEM_03>

     <COBOL_ITEM_08>1234</COBOL_ITEM_08>

     <COBOL_ITEM_09>567890</COBOL_ITEM_09>

     <COBOL_ITEM_12>

       <COBOL_ITEM_13>12345</COBOL_ITEM_13>

       <COBOL_ITEM_13>67890</COBOL_ITEM_13>

       <COBOL_ITEM_13>12345</COBOL_ITEM_13>

       <COBOL_ITEM_13>67890</COBOL_ITEM_13>

       <COBOL_ITEM_14>123456789012345</COBOL_ITEM_14>

       <COBOL_ITEM_15>6789</COBOL_ITEM_15>

     </COBOL_ITEM_12>

   </COBOL_ITEM_01>

   ...

 </DATA>

 with this message log :

 Log of the conversion

 TXT2XML: Text from & to XML Conversion Utility.
 Version: 1.2

 TXT2XML:

 TXT2XML: ==>Warning : in the COBOL copybook, level 66,
 77, 88 items are ignored.

 TXT2XML: ==>Warning : in the COBOL copybook, level 66,
 77, 88 items are ignored.

 TXT2XML: ==>Warning : in the COBOL copybook, level 66,
 77, 88 items are ignored.

 TXT2XML:

 TXT2XML: Txt File:           ./sample/txt/text01

 TXT2XML: Cobol File:         ./sample/cob/cobol01

 TXT2XML: XML File:           ./sample/xml/xml01

 TXT2XML: Output data format: XML

 TXT2XML: Text records:       10 processed in .03286 seconds

 TXT2XML:

 TXT2XML:















 ================================================================================

 TXT2XML:

 TXT2XML:                             COBOL copybook analysis

 TXT2XML:

 TXT2XML:























 +-------+-------------------------------------+-------+-------+--------+---------------+

 TXT2XML: ] Level ] Name
 ] Type  ] Start ] Length ] Default value ]

 TXT2XML:























 +-------+-------------------------------------+-------+-------+--------+---------------+

 TXT2XML: ] 1     ] COBOL-ITEM-01
 ] GROUP ] 1     ] 0      ]               ]

 TXT2XML: ] 2     ]  FILLER
 ] CHAR  ] 1     ] 1      ]               ]

 TXT2XML: ] 2     ]  COBOL-ITEM-02
 ] CHAR  ] 2     ] 5      ] AB"CD         ]

 TXT2XML: ] 2     ]  COBOL-ITEM-02
 ] CHAR  ] 7     ] 5      ] AB"CD         ]

 TXT2XML: ] 2     ]  COBOL-ITEM-03
 ] GROUP ] 12    ] 0      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-04
 ] CHAR  ] 12    ] 3      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-05
 ] CHAR  ] 15    ] 1      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-06
 ] NUM   ] 16    ] 1      ]               ]

 TXT2XML: ] 2     ]  COBOL-ITEM-03
 ] GROUP ] 17    ] 0      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-04
 ] CHAR  ] 17    ] 3      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-05
 ] CHAR  ] 20    ] 1      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-06
 ] NUM   ] 21    ] 1      ]               ]

 TXT2XML: ] 2     ]  COBOL-ITEM-03
 ] GROUP ] 22    ] 0      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-04
 ] CHAR  ] 22    ] 3      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-05
 ] CHAR  ] 25    ] 1      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-06
 ] NUM   ] 26    ] 1      ]               ]

 TXT2XML: ] 2     ]  COBOL-ITEM-03
 ] GROUP ] 27    ] 0      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-04
 ] CHAR  ] 27    ] 3      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-05
 ] CHAR  ] 30    ] 1      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-06
 ] NUM   ] 31    ] 1      ]               ]

 TXT2XML: ] 2     ]  COBOL-ITEM-08
 ] NUM   ] 32    ] 4      ]               ]

 TXT2XML: ] 2     ]  COBOL-ITEM-09
 ] CHAR  ] 36    ] 6      ]               ]

 TXT2XML: ] 2     ]  COBOL-ITEM-12
 ] GROUP ] 42    ] 0      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-13
 ] NUM   ] 42    ] 5      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-13
 ] NUM   ] 47    ] 5      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-13
 ] NUM   ] 52    ] 5      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-13
 ] NUM   ] 57    ] 5      ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-14
 ] CHAR  ] 62    ] 15     ]               ]

 TXT2XML: ] 3     ]   COBOL-ITEM-15
 ] NUM   ] 77    ] 4      ] 0000          ]

 TXT2XML:























 +-------+-------------------------------------+-------+-------+--------+---------------+

 TXT2XML:

 TXT2XML: Total computed COBOL length : 80



 X M L 2 C O B

 <cha:Introduction2>Introduction

 XML2COB is a complementary tool of TXT2XML. It
 generates a COBOL copybook, using an XML file as
 template. Of course, you can use the generated COBOL
 copybook to convert, with TXT2XML, XML files to text
 files and vice-versa. However, like TXT2XML, it is not
 an XML parser written in Rexx, nor will support the
 entire XML specification.

 XML2COB works only with well-formed XML documents. For
 example, it will never check for missing XML closing
 tags. XML2COB generates valid COBOL copybooks, but it's
 still your responsibility to check COBOL clauses like :

 * OCCURS

 * PICTURE (symbol and length of the item).

 * SIGN

 As TXT2XML, XML2COB was tested successfully on :

 * Windows 2K,

 * Linux Mandrake 10.1,

 * MVS (OS/390 V2R10).

 It should work without problems on other platforms. To
 run XML2COB on non-mainframe platforms, you must first
 install Regina Rexx or for windows only, Reginald (see
 chapter ¢cha:Installation!). Optionally, for the GUI front-end, you may
 also install Java (see¢sec:Installation3! for more details). Should you
 succeed or encounter problems in running XML2COB on a
 non-tested platform, please send an e-mail to :

 sunuraxi@users.sourceforge.net

 XML2COB is released under the GPL license (see appendix ¢cha:License!).

 <cha:Principles-of-generation>Principles of generation

 Except for some constraints (see section ¢sec:Constraints!), there is no
 special requirements about the XML file used for the
 generation. However, there is a gold rule : the bigger
 the XML file is, more accurate will be the generated
 COBOL copybook. The reason is very simple : a bigger
 file means more tags, more contents analyzed, and more
 accuracy in ...

 8.1 <sec:The-meta-data>The meta-data

 The following meta-data are extracted from the XML
 elements, attributes and content :

 +------------------+--------------------------------+
 ] Meta-data        ] Usage                          ]
 +------------------+--------------------------------+
 +------------------+--------------------------------+
 ] Element name     ] To create the COBOL item names ]
 +------------------+--------------------------------+
 ] Type of content  ] To create the PICTURE clause   ]
 +------------------+--------------------------------+
 ] Sign position    ] To create SIGN clause          ]
 +------------------+--------------------------------+
 ] Length           ] To create the PICTURE clause   ]
 +------------------+--------------------------------+
 ] Occurrence       ] To create the OCCURS clause    ]
 +------------------+--------------------------------+


 8.2 <sec:The-COBOL-copybook-generation>The COBOL copybook generation

 In an XML file, the elements can be classified in 3
 categories :

 * Root : the first XML element. It's ignored in the
   generation process and is not part of the generated
   COBOL copybook.

 * First child : the second XML element. Each time it
   appears, the meta-data analysis of the XML elements
   is (re-)started. It corresponds to the first COBOL
   item in the copybook. As this first child element
   includes all the other XML elements, its
   corresponding COBOL item is a grouping item, with the
   lowest level and a unique occurrence.

 * Other child elements: the other XML elements. They
   are analyzed to extract the meta-data needed to build
   the rest of the COBOL copybook.

 The COBOL copybook generation process take place in the
 following steps :

 * The XML file is read record per record until the end
   of the file.

 * The first child is then searched.

 * Each XML element or attributes generates a COBOL item
   applying the following rules :

   * The name of the XML element or attribute is
     capitalized and dashes ("-") are translated to
     underscore ("_"). For example : <cobol_item_01>
     becomes COBOL-ITEM-01. COBOL item names are checked
     against a COBOL reserved word listaccording to IBM's "Enterprise COBOL for z/OS V3R3
 Language Reference "(IGY3LR20)
     . A warning message is issued if the generated item
     name appears in this list,

   * Meta-data of the contentContent is escaped if necessary. Characters like & < > "
 and ' are converted to &amp; &lt; &gt; &quot; &apos;
 respectively.
      of the XML element and attributes is extracted :
     length, type and sign.

   * Length of item is rounded if requested (see
     sub-section ¢sub:round!). A COBOL item is then created.

 * Each time the XML first child is found, the analysis
   is restarted and the meta-data is updated if
   necessary. For example, if the content length of an
   XML element is greater than the current length of its
   corresponding COBOL item, the length is updated. The
   contrary is, of course, not true.

 * When the end of the XML file is reached :

   * The item list is then checked against elementary or
     grouping items occurring more than one time. If
     this is the case, only the first occurrence of the
     item is kept, the others are deleted and an
     occurrence counter is created

   * The starting position of each COBOL item is
     computed. Although, it's not necessary for the
     COBOL copybook, it is used for final reporting.

   * The COBOL copybook is written, indenting the items
     according to their COBOL level.

 8.3 <sec:COBOL-level>COBOL level

 COBOL levels are not part of the XML file. They are
 computed using the following rules :

 * At each XML first child, level starts at 01 or 02
   according to the level01 parameter (see sub-section ¢sub:level01!)

 * The level of COBOL item increases :

   * at each XML element

   * at each XML content

   * at each XML attribute

 * The level of COBOL item decreases :

   * at each XML empty element

   * after each XML content

   * after each XML closing tag,

   * after each XML attribute.

 For example, with the following XML file,

 an XML file with attributes and content

 <?xml version="1.0"?>

 <DatabaseInventory>

     <DatabaseName>

       <DatabaseDomain>iDevelopment.info</DatabaseDomain>

       <Administrator EmailAlias="jhunter"
       Extension="6007">Jeffrey Hunter

       </Administrator>

     </DatabaseName>

 <DatabaseInventory>

 XML2COB will generate the following COBOL copybook :

 Generated COBOL copybook

 02 DATABASENAME.

   04 DATABASEDOMAIN PICTURE X(17).

   04 ADMINISTRATOR.

     06 EMAILALIAS PICTURE X(7).

     06 EXTENSION PICTURE 9(4).

     06 ADMINISTRATOR PICTURE X(14).

 As you can see, the COBOL item ADMINISTRATOR appears 2
 times :

 1. The first time as a grouping item, because the XML
   element Administrator has attributes

 2. The second time as an elementary item at a lower
   level than the grouping item, because the XML element
   Administrator also has a content.

 8.4 <sec:Constraints>Constraints

 In some cases, generating a COBOL copybook from an XML
 file is impossible. For example, this XML file : Nonconvertible XML file

 <?xml version="1.0" encoding="ISO-8859-1"
 standalone="yes" ?>

 <weather>

   <city name="Los Angeles">

     <sky>Blue</sky>

     Hot and sunny

   </city>

 </weather>

 In this file, the XML element city is a complex one. It
 includes the simple element sky but also a content (Hot
 and sunny). The corresponding COBOL copybook would be
 something like :

 Corresponding COBOL copybook

 01 city pic x(20).

   03 name pic x(20).

   03 sky pic x(8).

 This is impossible in COBOL : a grouping item can't
 have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)
 paragraph 5.3.11 PICTURE Clause : "The PICTURE clause
 can be specified only at the elementary level."

 So, not all the XML files can be used and some
 constraints apply when generating a COBOL copybook :

 * Mixed XML content is not supported,

 * XML entities starting with <|ENTITY and ending with >
   are not supported. If such a declaration is found,
   the generation process is aborted,

 * Attributes of XML element are supported. But,
   attributes of the root element are ignored.

 * XML attributes like xml:space are ignored,

 * All the XML tags and contents may expand on more than
   one line,

 * XML headers starting with <?xml and ending with ?>
   are skipped,

 * XML internal and external document type declaration
   starting with <|DOCTYPE and ending with either > or
   !> are skipped,

 * XML comments starting with <|-- and ending with -->
   are skipped,

 * Empty XML elements, even with attributes, are supported.

 <cha:Installation2>Installation

  See chapter ¢cha:Installation!

 <cha:Syntax2>Syntax

 The XML2COB syntax is :

 XML2C0B syntax

 xml2cob

   COB cob-file

   XML xml-file

   PREFIX prefix

   LEVEL01

   ROUND

   VERBOSE

   BROWSE

 All parameters can be typed in any case (upper, lower
 or mixed) and only in this order. But, on some case
 sensitive operating systems like Linux/Unix, file names
 must be typed with the correct case and the XML2C0B
 command must be typed in lower case. The file names may
 include space characters. XML2C0B parameters must be
 only one line, except if your operating systems allows
 continuation characters.

 10.1 <sec:Mandatory-parameters2>Mandatory parameters

 10.1.1 <sub:COB2>COB cob-file

 It's the name of the COBOL copybook file. There is no
 default value for this parameter.

  Under MVS

 "cob-file" can be one of the following :

 * a sequential dataset,

 * a member of a partitioned dataset,

 * a DDname. In this case, the DDname must be preceded
   by 'DD:'.

 Before running XML2C0B, 'cob-file' must not exist.

  For all other platforms

 'cob-file' has to be a correct file name.

 10.1.2 <sub:XML2>XML xml-file

 It's the name of the input XML file. There is no
 default value for this parameter.

  Under MVS

 "xml-file" can be one of the following :

 * a sequential dataset,

 * a member of a partitioned dataset,

 * a DDname. In this case, the DDname must be preceded
   by 'DD:'.

 Before running XML2C0B, 'xml-file' must exist.

  For all other platforms

 'xml-file' has to be a correct file name. The file must
 exist before running XML2C0B.

 10.2 <sec:Optional-parameters2>Optional parameters

 10.2.1 <sub:prefix2>PREFIX prefix

 If prefix value is set to 'COBOL-' then the XML element
 <cobol_item_01> will generate a COBOL item called
 ITEM-01. There is no default value for this parameter.

  Under MVS batch (JCL)

 The dash ('-') used in prefix, like COBOL-, is taken
 for a continuation character in JCL. If you use prefix
 within a batch job, replace all dashes ('-") by
 underscores ('_').

 10.2.2 <sub:level01>LEVEL01

 If present, the COBOL copybook will start at level 01.
 The default value is no level 01, it starts at level 02.

 10.2.3 <sub:round>ROUND

 If present, all COBOL item length will be rounded to
 the next 5 or 0. For example :

 +-----------------------------+
 ]     COBOL item length       ]
 +-----------------------------+
 +---------------+-------------+
 ] Before round  ] After round ]
 +---------------+-------------+
 ]      8        ]     10      ]
 +---------------+-------------+
 ]      48       ]     50      ]
 +---------------+-------------+
 ]     113       ]     125     ]
 +---------------+-------------+
 ]     205       ]     250     ]
 +---------------+-------------+
 ]     517       ]     600     ]
 +---------------+-------------+


 The default value is no round, item length is not rounded.

 10.2.4 <sub:Browse2>BROWSE

 The default value for this parameter is no.

  Under MVS

 Only under ISPF and if present, will browse the
 generation results report.

  For all other platforms

 On all other platforms, this parameter is ignored.

 10.2.5 <sub:verbose2>VERBOSE

 If present, displays all the messages. The default
 value is no, all messages are not displayed.

 <cha:Examples2>Examples

 You will find here some examples of XML2COB. You will
 find more examples in the test script files or in the
 IVP job (see section ¢sub:Tests!, see ¢sub:Tests-unix! or section ¢sub:Tests-windows!).

 11.1 <sec:MVS2>MVS

 11.1.1 <sub:ISPF2>ISPF

 Just type "exec' in front of the XML2COB member of the
 EXEC dataset and the ISPF panel will appear :

 ISPF panel

 <Fichier graphique : image/tn3270_05.jpg>


 Fill the required parameters, hit enter and you will
 see :

 Browsing result dataset

 <Fichier graphique : image/tn3270_06.jpg>


 11.1.2 <sub:Batch2>Batch

 If you submit the following JCL : Job to be submitted

 <Fichier graphique : image/tn3270_07.jpg>


 You will get :

 Resulting job log

 <Fichier graphique : image/tn3270_08.jpg>


 11.2 <sec:Windows2>Windows

 In a DOS command interface window and in the XML2COB
 directory, just type :

 Windows example

 D:\REXX\txt2xml>xml2cob.rexx cob
 .\sample\cob\xml2cob\database xml .\sample\xml\database
 level01 round verbose

 and you will get :

 Resulting message log

 XML2COB: XML to COBOL Copybook Conversion Utility.
 Version: 1.0

 XML2COB:

 XML2COB:

 XML2COB: XML File:           .\sample\xml\database

 XML2COB: Cobol File:         .\sample\cob\xml2cob\database

 XML2COB: Prefix:

 XML2COB: Round:              Y

 XML2COB: Level01:            Y

 XML2COB:

 XML2COB: XML first child:    4 processed in .26100 seconds

 XML2COB:

 XML2COB:















 ================================================================================

 XML2COB:

 XML2COB:                             COBOL copybook
 created :

 XML2COB:

 XML2COB:


















 +-------+--------------------------------+-------+--------+------+-------+--------+

 XML2COB: ] Level ] Name                           ]
 Type  ] Occurs ] Sign ] Start ] Length ]

 XML2COB:


















 +-------+--------------------------------+-------+--------+------+-------+--------+

 XML2COB: ] 01    ] DATABASENAME                   ]
   ] 1      ] N    ] 1     ] 0      ]

 XML2COB: ] 03    ]   GLOBALDATABASENAME           ]
 CHAR  ] 1      ] N    ] 1     ] 210    ]

 XML2COB: ] 03    ]   ORACLESID                    ]
 CHAR  ] 1      ] N    ] 211   ] 15     ]

 XML2COB: ] 03    ]   DATABASEDOMAIN               ]
 CHAR  ] 1      ] N    ] 226   ] 110    ]

 XML2COB: ] 03    ]   ADMINISTRATOR                ]
   ] 3      ] N    ] 336   ] 0      ]

 XML2COB: ] 05    ]     EMAILALIAS                 ]
 CHAR  ] 1      ] N    ] 336   ] 15     ]

 XML2COB: ] 05    ]     EXTENSION                  ] NUM
   ] 1      ] N    ] 351   ] 5      ]

 XML2COB: ] 05    ]     ADMINISTRATOR              ]
 CHAR  ] 1      ] N    ] 356   ] 15     ]

 XML2COB: ] 03    ]   DATABASEATTRIBUTES           ]
   ] 1      ] N    ] 441   ] 0      ]

 XML2COB: ] 05    ]     GENRE                      ]
   ] 1      ] N    ] 441   ] 10     ]

 XML2COB: ] 05    ]     VERSION                    ]
   ] 1      ] N    ] 451   ] 5      ]

 XML2COB: ] 03    ]   COMMENTS                     ]
   ] 1      ] N    ] 456   ] 185    ]

 XML2COB:


















 +-------+--------------------------------+-------+--------+------+-------+--------+

 XML2COB:

 XML2COB: Total COBOL record length : 640

 XML2COB:



 11.3 <sec:Unix2>Unix/Linux

 In a shell, just type in lower case in the XML2COB
 directory :

 Unix/Linux example.

 ./xml2cob.rexx cob ./sample/cob/xml2cob/book xml
 ./sample/xml/book verbose

 The XML file should look like :

 Resulting COBOL copybook


 *---------------------------------------------------------------

       *

       *  Created by XML2COB on 20 Feb 2005 at 21:17:12

       *

       *  More info on :
 http://sourceforge.net/projects/txt2xml-rexx/

       *

       *  Total COBOL record length : 255

       *


 *---------------------------------------------------------------



           02 BOOK.

              04 BOOK-ID
 PICTURE X(5).

              04 BOOK-AUTHOR
 PICTURE X(20).

              04 BOOK-TITLE
 PICTURE X(38).

              04 GENRE
 PICTURE X(15).

              04 PRICE
 PICTURE 9(5).

              04 PUBLISH-DATE
 PICTURE X(10).

              04 DESCRIPTION
 PICTURE X(162).



 with this message log :

 Log of the generation

 XML2COB: XML to COBOL Copybook Conversion Utility.
 Version: 1.0

 XML2COB:

 XML2COB:

 XML2COB: XML File:           ./sample/xml/book

 XML2COB: Cobol File:         ./sample/cob/xml2cob/book

 XML2COB: Prefix:

 XML2COB: Round:              N

 XML2COB: Level01:            N

 XML2COB:

 XML2COB: XML first child:    13 processed in .11121 seconds

 XML2COB:

 XML2COB:















 ================================================================================

 XML2COB:

 XML2COB:                             COBOL copybook
 created :

 XML2COB:

 XML2COB:


















 +-------+--------------------------------+-------+--------+------+-------+--------+

 XML2COB: ] Level ] Name                           ]
 Type  ] Occurs ] Sign ] Start ] Length ]

 XML2COB:


















 +-------+--------------------------------+-------+--------+------+-------+--------+

 XML2COB: ] 02    ]  BOOK                          ]
   ] 1      ] N    ] 1     ] 0      ]

 XML2COB: ] 04    ]    BOOK-ID                     ]
 CHAR  ] 1      ] N    ] 1     ] 5      ]

 XML2COB: ] 04    ]    BOOK-AUTHOR                 ]
 CHAR  ] 1      ] N    ] 6     ] 20     ]

 XML2COB: ] 04    ]    BOOK-TITLE                  ]
 CHAR  ] 1      ] N    ] 26    ] 38     ]

 XML2COB: ] 04    ]    GENRE                       ]
 CHAR  ] 1      ] N    ] 64    ] 15     ]

 XML2COB: ] 04    ]    PRICE                       ] NUM
   ] 1      ] N    ] 79    ] 5      ]

 XML2COB: ] 04    ]    PUBLISH-DATE                ]
 CHAR  ] 1      ] N    ] 84    ] 10     ]

 XML2COB: ] 04    ]    DESCRIPTION                 ]
 CHAR  ] 1      ] N    ] 94    ] 162    ]

 XML2COB:


















 +-------+--------------------------------+-------+--------+------+-------+--------+

 XML2COB:

 XML2COB: Total COBOL record length : 255

 XML2COB:



 <par:The-JAVA-GUI>The GUI front-end

 <cha:The-Graphical-User>The Graphical User Interface

 12.1 <sec:Introduction3>Introduction

 Although TXT2XML and XML2COB are not GUI tools (see
 chapter ¢cha:Introduction!), it's perfectly understandable that some
 people don't like the command line. That's why a GUI
 front-end was written for non-mainframe platforms.
 There is a lot of programming techniques for GUI
 applications available on the Internet and choosing one
 of them was not simple. Some requirements were
 established : the GUI front-end had to :

 * be portable,

 * be easy to write,

 * use known standards and software.

 ¢http://thinlet.sourceforge.net/]]Thinlet! was chosen. It's a GUI toolkit, a single Java class
 that parses the hierarchy and properties of the GUI,
 handles user interaction, and calls business logic. It
 separates the graphic presentation (described in an XML
 file) and the application methods (written as Java
 code). Thinlet usesXUL (XML User Interface Language)
 which is a markup language for describing user
 interfaces. With XUL you can create rich, sophisticated
 cross-platform applications easily. Here is an example
 of an XUL file :

 XUL sample file.

 <?xml version="1.0"?>

 <panel columns="1">

   <menubar>

   <menu text="File" mnemonic="0">

     <menuitem text="Exit" action="exit"/>

   </menu>

   </menubar>

   <panel columns="3" gap="10" top="10" left="10"

   bottom="10" right="10">

     <label text="Text file :" mnemonic="0"
     for="TextFile"/>

     <textfield name="TextFile" columns="50"

     tooltip="Enter here the text file name"/>

     <button text="Select..."

     action="openTextFileDialog(thinlet,TextFile)"

     tooltip="Click here to select the text file"/>

     <checkbox name="format" text="XML" group="format"

     tooltip="Click here to convert from text to XML"

     selected="true" colspan="2"

     action="SetFormat(this.text)"/>

     <label/>

     <checkbox text="text" group="format"

     tooltip="Click here to convert from XML to text"

     colspan="2" action="SetFormat(this.text)"/>

     <separator colspan="3" />

     <label text="Prefix :" mnemonic="0" for="Prefix"/>

     <textfield name="Prefix" columns="25"

     tooltip="Enter here the prefix"/>

     <label/>

     <button text="Convert"

     action="CallTXT2XML(TextFile.text,COBOLFile.text,

     XMLFile.text,DTDFile.text,Prefix.text)"

     tooltip="Click here to start the conversion"
     mnemonic="2"/>

   </panel>

 </panel>



 Of course, if you are a shell or a "DOS command prompt'
 fanatic, you can still continue to use TXT2XML and
 XML2COB Rexx scripts on a command line.

 12.2 <sec:Installation3>Installation

 To use the GUI front-end, you need to download and
 install the Java Software Developer Kit (Java SDK) :

 http://java.sun.com

 The GUI front-end was tested successfully on Windows
 and Linux Mandrake 10.1 with J2EE 1.4. Make sure that
 your path includes the directory where you have
 installed the Java SDK.

 12.3 Syntax<sec:Syntax3>

 To launch the GUI front-end, you can :

 * Type on a command line :

 java -jar txt2xml.jar

 or

 java -jar xml2cob.jar

 according to which Rexx script you want to execute.

 * or simply execute txt2xml.rexx or xml2cob.rexx
   without parameters.

 12.4 Example<sec:Example3>

 Here is an example when starting TXT2XML without
 parameters :

 The GUI front-end

 <Fichier graphique : image/gui_01.jpg>


 and the result of the conversion :

 Browsing the results with the GUI front-end

 <Fichier graphique : image/gui_02.jpg>


 <cha:License>License

 GNU GENERAL PUBLIC LICENSE Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 Everyone is permitted to copy and distribute verbatim
 copies of this license document, but changing it is not
 allowed.

 A.1 Preamble

 The licenses for most software are designed to take
 away your freedom to share and change it. By contrast,
 the GNU General Public License is intended to guarantee
 your freedom to share and change free software--to make
 sure the software is free for all its users. This
 General Public License applies to most of the Free
 Software Foundation's software and to any other program
 whose authors commit to using it. (Some other Free
 Software Foundation software is covered by the GNU
 Library General Public License instead.) You can apply
 it to your programs, too.

 When we speak of free software, we are referring to
 freedom, not price. Our General Public Licenses are
 designed to make sure that you have the freedom to
 distribute copies of free software (and charge for this
 service if you wish), that you receive source code or
 can get it if you want it, that you can change the
 software or use pieces of it in new free programs; and
 that you know you can do these things.

 To protect your rights, we need to make restrictions
 that forbid anyone to deny you these rights or to ask
 you to surrender the rights. These restrictions
 translate to certain responsibilities for you if you
 distribute copies of the software, or if you modify it.

 For example, if you distribute copies of such a
 program, whether gratis or for a fee, you must give the
 recipients all the rights that you have. You must make
 sure that they, too, receive or can get the source
 code. And you must show them these terms so they know
 their rights.

 We protect your rights with two steps: (1) copyright
 the software, and (2) offer you this license which
 gives you legal permission to copy, distribute and/or
 modify the software.

 Also, for each author's protection and ours, we want to
 make certain that everyone understands that there is no
 warranty for this free software. If the software is
 modified by someone else and passed on, we want its
 recipients to know that what they have is not the
 original, so that any problems introduced by others
 will not reflect on the original authors' reputations.

 Finally, any free program is threatened constantly by
 software patents. We wish to avoid the danger that
 redistributors of a free program will individually
 obtain patent licenses, in effect making the program
 proprietary. To prevent this, we have made it clear
 that any patent must be licensed for everyone's free
 use or not licensed at all.

 The precise terms and conditions for copying,
 distribution and modification follow.

 A.2 GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR
   COPYING, DISTRIBUTION AND MODIFICATION

 0. This License applies to any program or other work
 which contains a notice placed by the copyright holder
 saying it may be distributed under the terms of this
 General Public License. The "Program", below, refers to
 any such program or work, and a "work based on the
 Program" means either the Program or any derivative
 work under copyright law: that is to say, a work
 containing the Program or a portion of it, either
 verbatim or with modifications and/or translated into
 another language. (Hereinafter, translation is included
 without limitation in the term "modification".) Each
 licensee is addressed as "you".

 Activities other than copying, distribution and
 modification are not covered by this License; they are
 outside its scope. The act of running the Program is
 not restricted, and the output from the Program is
 covered only if its contents constitute a work based on
 the Program (independent of having been made by running
 the Program). Whether that is true depends on what the
 Program does.

 1. You may copy and distribute verbatim copies of the
 Program's source code as you receive it, in any medium,
 provided that you conspicuously and appropriately
 publish on each copy an appropriate copyright notice
 and disclaimer of warranty; keep intact all the notices
 that refer to this License and to the absence of any
 warranty; and give any other recipients of the Program
 a copy of this License along with the Program.

 You may charge a fee for the physical act of
 transferring a copy, and you may at your option offer
 warranty protection in exchange for a fee.

 2. You may modify your copy or copies of the Program or
 any portion of it, thus forming a work based on the
 Program, and copy and distribute such modifications or
 work under the terms of Section 1 above, provided that
 you also meet all of these conditions:

 a) You must cause the modified files to carry prominent
 notices stating that you changed the files and the date
 of any change.

 b) You must cause any work that you distribute or
 publish, that in whole or in part contains or is
 derived from the Program or any part thereof, to be
 licensed as a whole at no charge to all third parties
 under the terms of this License.

 c) If the modified program normally reads commands
 interactively when run, you must cause it, when started
 running for such interactive use in the most ordinary
 way, to print or display an announcement including an
 appropriate copyright notice and a notice that there is
 no warranty (or else, saying that you provide a
 warranty) and that users may redistribute the program
 under these conditions, and telling the user how to
 view a copy of this License. (Exception: if the Program
 itself is interactive but does not normally print such
 an announcement, your work based on the Program is not
 required to print an announcement.)

 These requirements apply to the modified work as a
 whole. If identifiable sections of that work are not
 derived from the Program, and can be reasonably
 considered independent and separate works in
 themselves, then this License, and its terms, do not
 apply to those sections when you distribute them as
 separate works. But when you distribute the same
 sections as part of a whole which is a work based on
 the Program, the distribution of the whole must be on
 the terms of this License, whose permissions for other
 licensees extend to the entire whole, and thus to each
 and every part regardless of who wrote it.

 Thus, it is not the intent of this section to claim
 rights or contest your rights to work written entirely
 by you; rather, the intent is to exercise the right to
 control the distribution of derivative or collective
 works based on the Program.

 In addition, mere aggregation of another work not based
 on the Program with the Program (or with a work based
 on the Program) on a volume of a storage or
 distribution medium does not bring the other work under
 the scope of this License.

 3. You may copy and distribute the Program (or a work
 based on it, under Section 2) in object code or
 executable form under the terms of Sections 1 and 2
 above provided that you also do one of the following:

 a) Accompany it with the complete corresponding
 machine-readable source code, which must be distributed
 under the terms of Sections 1 and 2 above on a medium
 customarily used for software interchange; or,

 b) Accompany it with a written offer, valid for at
 least three years, to give any third party, for a
 charge no more than your cost of physically performing
 source distribution, a complete machine-readable copy
 of the corresponding source code, to be distributed
 under the terms of Sections 1 and 2 above on a medium
 customarily used for software interchange; or,

 c) Accompany it with the information you received as to
 the offer to distribute corresponding source code.
 (This alternative is allowed only for noncommercial
 distribution and only if you received the program in
 object code or executable form with such an offer, in
 accord with Subsection b above.)

 The source code for a work means the preferred form of
 the work for making modifications to it. For an
 executable work, complete source code means all the
 source code for all modules it contains, plus any
 associated interface definition files, plus the scripts
 used to control compilation and installation of the
 executable. However, as a special exception, the source
 code distributed need not include anything that is
 normally distributed (in either source or binary form)
 with the major components (compiler, kernel, and so on)
 of the operating system on which the executable runs,
 unless that component itself accompanies the
 executable.

 If distribution of executable or object code is made by
 offering access to copy from a designated place, then
 offering equivalent access to copy the source code from
 the same place counts as distribution of the source
 code, even though third parties are not compelled to
 copy the source along with the object code.

 4. You may not copy, modify, sublicense, or distribute
 the Program except as expressly provided under this
 License. Any attempt otherwise to copy, modify,
 sublicense or distribute the Program is void, and will
 automatically terminate your rights under this License.
 However, parties who have received copies, or rights,
 from you under this License will not have their
 licenses terminated so long as such parties remain in
 full compliance.

 5. You are not required to accept this License, since
 you have not signed it. However, nothing else grants
 you permission to modify or distribute the Program or
 its derivative works. These actions are prohibited by
 law if you do not accept this License. Therefore, by
 modifying or distributing the Program (or any work
 based on the Program), you indicate your acceptance of
 this License to do so, and all its terms and conditions
 for copying, distributing or modifying the Program or
 works based on it.

 6. Each time you redistribute the Program (or any work
 based on the Program), the recipient automatically
 receives a license from the original licensor to copy,
 distribute or modify the Program subject to these terms
 and conditions. You may not impose any further
 restrictions on the recipients' exercise of the rights
 granted herein. You are not responsible for enforcing
 compliance by third parties to this License.

 7. If, as a consequence of a court judgment or
 allegation of patent infringement or for any other
 reason (not limited to patent issues), conditions are
 imposed on you (whether by court order, agreement or
 otherwise) that contradict the conditions of this
 License, they do not excuse you from the conditions of
 this License. If you cannot distribute so as to satisfy
 simultaneously your obligations under this License and
 any other pertinent obligations, then as a consequence
 you may not distribute the Program at all. For example,
 if a patent license would not permit royalty-free
 redistribution of the Program by all those who receive
 copies directly or indirectly through you, then the
 only way you could satisfy both it and this License
 would be to refrain entirely from distribution of the
 Program.

 If any portion of this section is held invalid or
 unenforceable under any particular circumstance, the
 balance of the section is intended to apply and the
 section as a whole is intended to apply in other
 circumstances.

 It is not the purpose of this section to induce you to
 infringe any patents or other property right claims or
 to contest validity of any such claims; this section
 has the sole purpose of protecting the integrity of the
 free software distribution system, which is implemented
 by public license practices. Many people have made
 generous contributions to the wide range of software
 distributed through that system in reliance on
 consistent application of that system; it is up to the
 author/donor to decide if he or she is willing to
 distribute software through any other system and a
 licensee cannot impose that choice.

 This section is intended to make thoroughly clear what
 is believed to be a consequence of the rest of this
 License.

 8. If the distribution and/or use of the Program is
 restricted in certain countries either by patents or by
 copyrighted interfaces, the original copyright holder
 who places the Program under this License may add an
 explicit geographical distribution limitation excluding
 those countries, so that distribution is permitted only
 in or among countries not thus excluded. In such case,
 this License incorporates the limitation as if written
 in the body of this License.

 9. The Free Software Foundation may publish revised
 and/or new versions of the General Public License from
 time to time. Such new versions will be similar in
 spirit to the present version, but may differ in detail
 to address new problems or concerns.

 Each version is given a distinguishing version number.
 If the Program specifies a version number of this
 License which applies to it and "any later version",
 you have the option of following the terms and
 conditions either of that version or of any later
 version published by the Free Software Foundation. If
 the Program does not specify a version number of this
 License, you may choose any version ever published by
 the Free Software Foundation.

 10. If you wish to incorporate parts of the Program
 into other free programs whose distribution conditions
 are different, write to the author to ask for
 permission. For software which is copyrighted by the
 Free Software Foundation, write to the Free Software
 Foundation; we sometimes make exceptions for this. Our
 decision will be guided by the two goals of preserving
 the free status of all derivatives of our free software
 and of promoting the sharing and reuse of software
 generally.

 A.3 NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE,
 THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT
 PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE
 STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF
 ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
 NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF
 THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
 DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR
 AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY
 OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE
 PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
 DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
 INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
 TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
 LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE
 OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
 THE POSSIBILITY OF SUCH DAMAGES.

 END OF TERMS AND CONDITIONS

 A.4 How to Apply These Terms to Your New Programs

 If you develop a new program, and you want it to be of
 the greatest possible use to the public, the best way
 to achieve this is to make it free software which
 everyone can redistribute and change under these terms.

 To do so, attach the following notices to the program.
 It is safest to attach them to the start of each source
 file to most effectively convey the exclusion of
 warranty; and each file should have at least the
 "copyright" line and a pointer to where the full notice
 is found.

 <one line to give the program's name and a brief idea
 of what it does.> Copyright (C) <year> <name of author>

 This program is free software; you can redistribute it
 and/or modify it under the terms of the GNU General
 Public License as published by the Free Software
 Foundation; either version 2 of the License, or (at
 your option) any later version.

 This program is distributed in the hope that it will be
 useful, but WITHOUT ANY WARRANTY; without even the
 implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License
 for more details.

 You should have received a copy of the GNU General
 Public License along with this program; if not, write
 to the Free Software Foundation, Inc., 59 Temple Place,
 Suite 330, Boston, MA 02111-1307 USA

 Also add information on how to contact you by
 electronic and paper mail.

 If the program is interactive, make it output a short
 notice like this when it starts in an interactive mode:

 Gnomovision version 69, Copyright (C) year name of
 author Gnomovision comes with ABSOLUTELY NO WARRANTY;
 for details type `show w'. This is free software, and
 you are welcome to redistribute it under certain
 conditions; type `show c' for details.

 The hypothetical commands `show w' and `show c' should
 show the appropriate parts of the General Public
 License. Of course, the commands you use may be called
 something other than `show w' and `show c'; they could
 even be mouse-clicks or menu items--whatever suits your
 program.

 You should also get your employer (if you work as a
 programmer) or your school, if any, to sign a
 "copyright disclaimer" for the program, if necessary.
 Here is a sample; alter the names:

 Yoyodyne, Inc., hereby disclaims all copyright interest
 in the program `Gnomovision' (which makes passes at
 compilers) written by James Hacker.

 <signature of Ty Coon>, 1 April 1989 Ty Coon, President
 of Vice

 This General Public License does not permit
 incorporating your program into proprietary programs.
 If your program is a subroutine library, you may
 consider it more useful to permit linking proprietary
 applications with the library. If this is what you want
 to do, use the GNU Library General Public License
 instead of this License.

 <cha:History-&-Roadmap>History & Road map

 B.1 30/09/02 - Version 0.1

 * start,

 * indent XML according to the item level.

 B.2 04/10/02 - Version 0.2

 * handle multi-line COBOL item declaration,

 * ignore line numbers in columns 1-6 & 73-80,

 * ignore level 66, 77, 88 items,

 * stop if level is greater than 50,

 * stop if level is not numeric,

 * stop if some COBOL reserved words are found,

 * replace 9(4) by 9999 and X(3) by XXX, etc.

 B.3 06/11/02 - Version 0.3

 * handle OCCURS clause for group and elementary items.

 B.4 21/11/02 - Version 1.0

 * read line by line instead of reading all lines,

 * write line by line instead of writing all lines,

 * COBOL item names are capitalized.

 B.5 28/07/04 - Version 1.1 RC1

 * bug corrected : VALUES COBOL clauses are ignored,

 * make conversion in both directions from XML to TXT
   and from TXT to XML,

 * COBOL levels are renumbered from 1 by 1 so that
   indentation of XML is independent of absolute COBOL levels,

 * change input file parameter name to txt and output
   file parameter name to XML,

 * added an ""x000 Records processed" message,

 * added an error message if the file transfer of
   TXT2XML has changed vertical bars (concatenation and
   OR operator) to | ,

 * added a report of COBOL items: level, name, type,
   start and length,

 * during conversion from XML to TXT, check that XML
   numeric values are really numeric,

 * error force termination of the program with return
   code set to 12.

 B.6 28/08/04 - Version 1.1

 * attributes of XML elements are now supported,

 * check that all COBOL items are filled during XML to
   TXT conversion. A warning is issued if it's not the case,

 * during XML to text conversion, initialize the output
   record with the default values specified in the
   VALUES clause of the COBOL copybook,

 * support of CDATA,

 * support of escaped chars like &lt; for "<",

 * support of element content on more than one line,

 * support of comments, declaration, ... on more than
   one line,

 * ignore XML attributes : xml:space, xml:language, ...

 B.7 20/09/04 - Version 1.15

 * TXT2XML runs on almost any platform with Regina Rexx

 * XML Entity declaration are not supported,

 * new parameter PREFIX that suppress constant part of
   an item name. I.e. if prefix is set to COBOL- then
   the COBOL item COBOL-ITEM-01 will be translated to
   <ITEM-01> during text to XML conversion.

 * bug corrected : during text to XML conversion,
   missing tags are now correctly handled.

 B.8 05/11/04 - Version 1.20

 * Support of COMP-3, COMP-4, BINARY and PACKED-DECIMAL clauses.

 * Support of SIGN clause even for group items.

 * bug corrected under MVS : allocation of a dataset
   with BLOCK as units works correctly now.

 * New parameter VERBOSE to replace NOCONFIRM parameter
   which is deprecated.

 * Generation of internal and external DTD based on the
   COBOL copybook during Text to XML conversion.

 B.9 05/03/05 - Version 1.25

 * New JAVA GUI front-end for non-mainframe platforms

 * Bug corrected : COBOL picture clauses like 'PIC
   99V999' are now correctly handled.

 * New web site : http://txt2xml-rexx.sourceforge.net/

 * New rexx script to generate a COBOL copybook from an
   XML file : XML2COB

 B.10 Road map

 * Generation of XSD files based on COBOL copybooks and
   vice-versa.

 * Integration of XML2COB into TXT2XML.

 <cha:Internet-resources>Internet resources


   XML
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] XML.org                                                                                   ] http://www.xml.org/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Extensible Markup Language (XML)                                                          ] http://www.w3.org/XML/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] The XML FAQ                                                                               ] http://www.ucc.ie/xml/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] XML.com: XML From the Inside Out -- XML development, XML resources, XML specifications    ] http://www.xml.com
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] ZVON.org                                                                                  ] http://www.zvon.org/
 +-------------------------------------------------------------------------------------------+---------------------------------------

   REXX
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] The Rexx Language Association                                                             ] http://www.rexxla.org/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] IBM Rexx home page                                                                        ] http://www-306.ibm.com/software/awdtoo
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Reginald REXX Developer's Page for Windows                                                ] http://www.borg.com/~jglatt/rexx/regin
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Regina - Cross-platform Rexx Interpreter                                                  ] http://regina-rexx.sourceforge.net/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Rexx Anywhere|                                                                            ] http://www.planetmvs.com/rexxanywhere/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Style Guide for Rexx                                                                      ] http://www.neilhancock.co.uk/Computers
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] FTE Text Editor                                                                           ] http://fte.sourceforge.net/
 +-------------------------------------------------------------------------------------------+---------------------------------------

   COBOL
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] IBM COBOL for OS/390 & VM V2R1 (IGYSH208)                                                 ] http://publibz.boulder.ibm.com/cgi-bin
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] IBM COBOL - Family Overview - IBM Software                                                ] http://www-306.ibm.com/software/awdtoo
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Kasten COBOL Page: Coding Style and Techniques                                            ] http://home.swbell.net/mck9/cobol/cobo
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] The TinyCOBOL project home page                                                           ] http://tiny-cobol.sourceforge.net/
 +-------------------------------------------------------------------------------------------+---------------------------------------

   Thinlet, Java & XUL
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Java home                                                                                 ] http://java.sun.com
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Thinlet home                                                                              ] http://thinlet.sourceforge.net/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Thing                                                                                     ] http://thing.sourceforge.net/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] XUL planet                                                                                ] http://www.xulplanet.com/
 +-------------------------------------------------------------------------------------------+---------------------------------------

   Other
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] TCP/IP and Mail Tools by Lionel B. Dyck                                                   ] http://www.lbdsoftware.com/tcpip.html
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] Typo The cover page was made with Typo generator.generator                                ] http://mtd.nussnet.at/typo/index2.php
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] LyX - The Document This document was written with Lyx.Processor                           ] http://www.lyx.org/
 +-------------------------------------------------------------------------------------------+---------------------------------------
 ] SDS - Dictionary of the Mainframe Most of glossary definitions come from this site.World  ] http://www.sdsusa.com/dictionary/
 +-------------------------------------------------------------------------------------------+---------------------------------------


 <cha:Glossary>Glossary

 Batch An accumulation of data brought together for
 processing or transmission, usually unattended. Less
 formally, the processing of such data, as opposed to
 on-line processing where an user is present to respond
 interactively, one record at a time.

 Dataset An unit of data storage and retrieval
 consisting of one or more data records. Outside of the
 IBM mainframe environment, people call them files.
 Dataset can be partioned (i.e. containing multiple
 files) or sequential (i.e. containing only data).

 DBCS stands for Double Byte Character Set. A mainframe
 way of coding non-latin character sets (i.e. chinese,
 japanese, etc).

 DTD Document Type Definition. This is a specific markup
 language, written using SGML.

 ISPF/PDF ISPF/Program Development Facility. ISPF
 facility providing access to application development
 services for end-users and programmers. Incorporates C
 and REXX programming support, and some support for
 programmable workstations.

 GUI stands for Graphical User Interface. A GUI
 application must be installed on each PC and makes
 extensive use of the mouse. By opposition, TUI is Text
 User Interface. A TUI application needs a connection
 program called an emulator and use only the keyboard to
 input data. BUI stands for Browser User Interface. A
 BUI program is an intranet or extranet application.

 HLQ High Level Qualifier. The left part of a dataset name.

 IVP Installation Verification Procedure. A set of tests
 to check if a product was correctly installed.

 JCL Job Control Language. The language used to describe
 the steps of a batch job (files to be used, programs to
 be run, etc). A generic term, hijacked by IBM to refer
 to the batch control languages for its System/360
 operating systems. Then, as now, z/OS and VSE/ESA JCL
 is a clumsy and cumbersome system that is hard to
 learn, full of inconsistencies, and avoided by anyone
 with an iota of common sense and access to an
 alternative. The only excuse for it comes from one of
 the original OS/360 developers: they ran out of time to
 build a JCL interpreter, so just used the Assembler
 macro processor, and built a language (JCL) around it.

 Mainframe Mainframes used to be defined by their size,
 and they can still fill a room, cost millions, and
 support thousands of users. But now a mainframe can
 also run on a laptop and support two users. So today's
 mainframes are best defined by their operating systems:
 Unix and Linux, and IBM's z/OS, OS/390, MVS, VM, and
 VSE. Mainframes combine four important features:

   * Reliable single-thread performance, which is
     essential for reasonable operations against a
     database.

   * Maximum I/O connectivity, which means mainframes
     excel at providing for huge disk farms.

   * Maximum I/O bandwidth, so connections between
     drives and processors have few choke-points.

   * Reliability--mainframes often allow for "graceful
     degradation" and service while the system is running.

 Member A file of a partitioned dataset.

 MVS Multiple Virtual Storage. In z/OSs long history,
 MVS has the honor of being its name for the longest
 period: about two decades. Admittedly, it had many
 suffixes during those years: MVS/SP, MVS/370, MVS/XA
 and MVS/ESA. Many users believed that MVS stood for Man
 Versus System.

 OS/390 The replacement for MVS/ESA announced at the end
 of 1995. It was an attempt to repackage MVS in a way
 that allowed IBM to offer attractive pricing at the
 lower levels, encourage developers to write
 applications in a shorter period of time, and generally
 improve the image of an operating system that is still
 largely identified with big iron and huge IT budgets.
 It also reduced IBMs testing costs dramatically because
 there was no longer a need to test every combination of
 supported releases of what were now components instead
 of separate system software products. This approach was
 first tested with DFSMS three and a half years earlier.
 In the longer term, OS/390 shielded MVS behind a layer
 of middleware that disguised many of the proprietary
 functions of MVS and provided users with common
 services across all the major IBM platforms. Replaced
 by z/OS on October 3, 2000, along with the introduction
 of eserver, including a complete line of mainframes
 called zSeries 900. Version 2 Release 10 was the last
 release of OS/390 and first became available September
 29, 2000.

 Panel IBM speak for screen layout.

 REXX Restructured EXtended eXecutor language. A command
 procedure programming language which was initially
 available on z/VM only, replacing EXEC and EXEC2, but
 later became an SAA standard. Although SAA is a distant
 memory, REXX availability in z/OS TSO has seen it
 replace CLIST as the tool of choice, especially given
 the fact that TSO, and therefore REXX, can be run in
 batch. REXX is an effective programming language in its
 own right with powerful string processing facilities
 and is used to drive certain program products, notably
 GDDM. REXX is also available in VSE/ESA, AIX1, OS/2,
 Linux and Windows. Although normally interpretive, a
 REXX compiler and library is available for z/OS and
 z/VM. REXX for CICS is available for z/OS and VSE/ESA;
 it consists of REXX Development System and REXX
 Development System. Object REXX is available for
 Windows, OS/2, AIX, and Linux for Intel and zSeries 900.

 Shell Generic term with a lot of different meanings.
 Early Internet service often involved an interface,
 called a Shell, on a host computer, rather than a
 direct connection to the Internet. And there was the
 IBM DOS Shell, a menu driven interface to basic PC-DOS
 functionality. Shell is also widely used in the expert
 systems and Unix communities, to mean software
 providing a skeleton which can be customized to produce
 a specific application.

 TSO Time Sharing Option. These days, everyone just says
 TSO when they mean TSO/E. Back in the 1980s, TSO was
 included with MVS/XA and you had to pay extra for
 TSO/E. Well worth the money given that TSO left you
 stranded below the 16MB line.

 TSO/E Time Sharing Option/Extensions. An element of
 z/OS that provides an on-line interactive environment
 for programmers and users. Best known for the ISPF/PDF
 environment that runs on TSO/E. Can also be used to
 test batch programs.

 Two's

 complement is a method of signifying negative numbers
 in binary. It is also an operation which may be applied
 to positive binary values in order to perform
 subtraction using the method of complements,
 effectively allowing subtraction of one binary number
 from another using only the addition operation.

 XUL The XML User Interface Language (XUL) is a markup
 language for describing user interfaces. With XUL you
 can create rich, sophisticated cross-platform web
 applications easily.


