{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "CTIS003", "INMTNODE": "LPPROD", "INMTUID": "SUNURAX", "INMFTIME": "20050228121910000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1175720, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 133, "INMBLKSZ": 27930, "INMRECFM": "FBA", "INMDIR": 6, "INMDSNAM": "CTIS003.TXT2XML.DOC", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CTIS003.TXT2XML.DOC": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27930, "DS1LRECL": 133, "DS1RECFM": "FBA", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 160, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "050059", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\xc0\\x00\\x00\\x01'", "DS1LSTAR": "b'\\x001\\x02'", "DS1TRBAL": "b'\\xac '"}, "COPYR2": {"deb": "b'\\x04\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03@\\x00\\x04\\xbb\\x1cH'", "extents": ["b'\\x04\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03@\\x00\\x04\\xbb\\x1cH'", "b'P\\xba\\x9ax\\x00\\x00\\x04\\x15\\x00\\x00\\x04\\x15\\x00\\x0e\\x00\\x0f'", "b'P\\xba\\x9ax\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x0b\\x00\\x0e\\x00\\x0f'", "b'P\\xba\\x9ax\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x0c\\x00\\x0e\\x00\\x0f'", "b'P\\xba\\x9ax\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x12\\x00\\x0e\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$01INTRO": {"ttr": 7939, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $01Intro\n\n COBOL, a forty years old computer language, and XML a\n new revolutionary format, seems to as near as the earth\n and the moon. However, if you look any further, you\n will notice some common concepts :\n\n +-----------------------------------------+------------------------------+--------------------------------+\n ]                                         ]             XML              ]             COBOL              ]\n +-----------------------------------------+------------------------------+--------------------------------+\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Hierarchy of data                       ]   Root and child elements    ] level 01 and other level items ]\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Indentation for a better visualization  ]            \\surd             ]             \\surd              ]\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Structured data                         ] Simple and complex elements  ]    Items and grouping items    ]\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Occurrence of data                      ]     Unique and multiple      ]         OCCURS clause          ]\n +-----------------------------------------+------------------------------+--------------------------------+\n\n\n The need to exchange data in XML between servers is\n continuously increasing and, in each mainframe around\n the world, there are plenty of COBOL copybooks and text\n files. So, was born the idea of TXT2XML : a bridge\n between the common concepts of COBOL and XML. It's not\n a GUIHowever, starting with version 1.25, a GUI front-end\n has been developed. See chapter \u00a2cha:The-Graphical-User! for more details.\n  tool, it's a Rexx script (for more info on Rexx see\n appendix \u00a2cha:Internet-resources!) running in a DOS command interface for the\n Windows users, a shell for the Unix users, ISPF or JCL\n for the mainframe users.\n\n TXT2XML is not an XML parser written in Rexx, nor will\n support the entire XML specification. Some COBOL\n clauses are also not supported (like REDEFINES,\n DEPENDING, ... ). TXT2XML works in both directions,\n i.e. it can convert XML files to text files and\n vice-versa. The COBOL copybook is always mandatory to\n perform the conversion, because :\n\n * During XML to text conversion, XML element names are\n   checked against the COBOL item names. For example, if\n   there is an XML element like <cobol_item_01>, there\n   must be an item like COBOL-ITEM-01 in the COBOL copybook.\n\n * During text to XML conversion, the COBOL copybook\n   item names are used to build the XML elements.\n\n * During XML to text conversion, if a COBOL item is\n   numeric, the XML content is checked to see if it's\n   also numeric. Otherwise conversion will fail.\n\n * ...\n\n TXT2XML was therefore developed primarily to convert\n data files typically used on a mainframe. TXT2XML works\n only with well-formed XML documents and valid COBOL\n copybooks. TXT2XML will never check for COBOL syntax\n errors or missing XML closing tags. TXT2XML generates\n 100 % compatible and well-formed XML files, but it's\n still your responsibility to validate them against a\n DTD with an XML parser.\n\n TXT2XML was originally written on an IBM mainframe\n running OS/390 V2R10. But, starting with version 1.15,\n TXT2XML should also run on the following platforms :\n\n * Linux,\n\n * FreeBSD,\n\n * Solaris,\n\n * AIX,\n\n * HP-UX,\n\n * OS/2,\n\n * eCS,\n\n * DOS,\n\n * Win9x/Me/NT/2k/XP,\n\n * Amiga,\n\n * AROS,\n\n * QNX4.x,\n\n * QNX6.x,\n\n * BeOS,\n\n * MacOS X,\n\n * EPOC32,\n\n * AtheOS,\n\n * OpenVMS,\n\n * SkyOS,\n\n * OpenEdition.\n\n As it's impossible to run all those OS, TXT2XML was\n tested successfully on :\n\n * Windows 2K,\n\n * Linux Mandrake 10.0,\n\n * MVS (OS/390 V2R10).\n\n It should work without problems on the other platformswith the exception of binary and packed data..\n To run TXT2XML on non-mainframe platforms, you must\n first install Regina Rexx or for windows only, Reginald\n (see chapter \u00a2cha:Installation!). Should you succeed or encounter\n problems in running TXT2XML on a non-tested platform,\n please send an e-mail to :\n\n sunuraxi@users.sourceforge.net\n\n TXT2XML is released under the GPL license (see appendix \u00a2cha:License!).\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$02PRINC": {"ttr": 8193, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $02Princ\n\n As said early, conversion occurs only if a valid COBOL\n copybook is present. The first step in the conversion\n process is the ...\n\n 2.1 <sec:COBOL-copybook-analysis>COBOL copybook analysis\n\n The analysis take place in 3 phases :\n\n 2.1.1 <sub:Cleaning-the-copybook>\"Cleaning\" the copybook\n\n In this phase, the copybook is read and :\n\n * comments are skipped,\n\n * Multi-line COBOL declaration are concatenated in one line.\n\n * PICTURE clauses are replaced by PIC,\n\n * SIGN clauses are ignored,\n\n * IS clauses are ignored,\n\n * NATIVE clauses are skipped,\n\n * X(4) and 9(6) symbols are replaced respectively by\n   XXXX and 999999,\n\n * Final dot of COBOL declarations is suppressed,\n\n * COBOL declarations are capitalized.According to IBM's COBOL Language Reference (IGYLR204),\n paragraph 1.1.1.1 COBOL Words with Single-Byte\n Characters : \"Each lowercase letter is considered to be\n equivalent to its corresponding uppercase letter,\n except in non numeric literals\"\n\n 2.1.2 <sub:Extracting-the-meta-data>Extracting the meta-data\n\n In this phase, the following meta-data are extracted :\n\n +--------------------+--------------------------------------------------------------+\n ] Meta-data          ] Usage                                                        ]\n +--------------------+--------------------------------------------------------------+\n +--------------------+--------------------------------------------------------------+\n ] COBOL level        ] To indent XML element                                        ]\n +--------------------+--------------------------------------------------------------+\n ] Name               ] To create or check XML element tags                          ]\n +--------------------+--------------------------------------------------------------+\n ] Type of data       ] To check XML data during text to XML conversion              ]\n +--------------------+--------------------------------------------------------------+\n ] Sign               ] When converting signed and/or binary data                    ]\n +--------------------+--------------------------------------------------------------+\n ] Sign position      ] When converting numeric data                                 ]\n +--------------------+--------------------------------------------------------------+\n ] Starting position  ] To create the XML content or a text record                   ]\n +--------------------+--------------------------------------------------------------+\n ] Length             ] To create the XML content or a text record                   ]\n +--------------------+--------------------------------------------------------------+\n ] Default value      ] To initialize a text record when converting from XML to text ]\n +--------------------+--------------------------------------------------------------+\n\n\n FILLER clauses are not skipped. They are used to\n compute the starting positions of all COBOL items. They\n never appears in the XML file when the text to XML\n conversion process ends. The copybook is also checked\n for unsupported COBOL clauses :\n\n * REDEFINES\n\n * DEPENDING ON\n\n * COMPUTATIONAL-1, COMPUTATIONAL-2, COMPUTATIONAL-5,\n   COMP-1, COMP-2, and COMP-5.\n\n * POINTER, PROCEDURE-POINTER and FUNCTION-POINTER\n\n * OBJECT REFERENCE\n\n * NATIONAL\n\n * DISPLAY-1DBCS items are not supported\n\n * P symbol (decimal scaling position)\n\n * INDEX\n\n * level 66, 77, 88,Those levels generate only a warning message and\n conversion continues.\n\n * Non-numeric COBOL levels or COBOL levels greater than 49,\n\n * DBCS picture symbols.\n\n and for partially supported COBOL clauses :\n\n * OCCURS for elementary and group item with only one dimension,\n\n * VALUES except for QUOTES and NULL clauses.\n\n 2.1.3 <sub:Renumbering-the-COBOL>Renumbering the COBOL item levels\n\n As COBOL item levels are used to indent tags during\n text to XML conversion, they are internally renumbered\n to have a smoother indentation. For example, the\n following COBOL copybooks :\n\n A sample COBOL copybook\n\n 01 COBOL-ITEM-01.\n\n   05 FILLER PIC IS X.\n\n   05 COBOL-ITEM-02 PIC IS X(5).\n\n\n\n and\n\n Same sample COBOL copybook with different levels\n\n 10 COBOL-ITEM-01.\n\n   20 FILLER PIC IS X.\n\n   20 COBOL-ITEM-02 PIC IS X(5).\n\n\n\n will always give the same indentation, like in the\n following XML file :\n\n Resulting XML file after conversion\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <DATA>\n\n   <COBOL_ITEM_01>\n\n     <COBOL_ITEM_02>12345</COBOL_ITEM_02>\n\n   </COBOL_ITEM_01>\n\n </DATA>\n\n The original COBOL copybook is never modified by\n TXT2XML and if the conversion ends without errors, a\n report of this analysis is printed.\n\n 2.2 <sec:Text-to-XML>Text to XML conversion\n\n This is the easiest conversion. An XML header (<?xml\n .... ?>) is first created. Then, one text record is\n read, item data is extracted from the current text\n record and the XML elements and their content are\n written one by one. The conversion process continues\n until the end of the text file. The XML elements can be\n classified in 3 categories :\n\n * Root : this element must be unique in the whole XML\n   file. That's why, DATA, a COBOL reserved word, was\n   chosen as root element name. It has no equivalent in\n   the COBOL copybook.\n\n * First child : it appears each time a text record is\n   read. It corresponds to the level of the first COBOL\n   item in the copybook. As this first child element\n   will include all the other XML elements, this COBOL\n   item needs to be a grouping item,with the lowest\n   level and ideally with a unique occurrence.\n\n * Other child elements: The other XML elements.\n\n All of them are built using the following rules :\n\n * The name of the XML element is the capitalized COBOL\n   item name with dashes (\"-\") translated to underscore (\"_\"\n   ). For example : COBOL-ITEM-01 will become <cobol_item_01>,\n\n * Content of the XML element is extracted from the\n   current text record (using the starting position and\n   the length computed in section \u00a2sec:COBOL-copybook-analysis!). Characters are\n   escaped if necessary& < > \" and ' need to be converted to &amp; &lt; &gt;\n &quot; &apos; respectively.\n   ,\n\n * FILLER clauses are skipped.\n\n * Opened XML tags are closed :\n\n   * immediately after the content of an XML element,\n\n   * at the end of each COBOL grouping item,\n\n   * at then end of the text record,\n\n   * at the end of the text file.\n\n If requested, TXT2XML can create a DTD (Document Type\n Definition), based on the COBOL copybook, which\n describes the XML structure. This DTD can be internal :\n\n Internal DTD\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <|DOCTYPE DATA \u00a2\n\n   <|ELEMENT NUMERIC-TYPES (EXTERNAL-DECIMAL, BINARIES,\n\n     INTERNAL_DECIMAL)>\n\n   <|ELEMENT EXTERNAL-DECIMAL (EXT-DEC-UNSIGNED,\n\n     EXT-DEC-SIGNED-NEGATIVE, EXT-DEC-SIGNED-POSITIVE,\n\n     EXT-DEC-SIGN-LEADING-NEG, EXT-DEC-SIGN-LEADING-POS,\n\n     EXT-DEC-SIGN-TRAILING-NEG,\n     EXT-DEC-SIGN-TRAILING-POS,\n\n     EXT-DEC-SIGN-SEP-LEAD-NEG,\n     EXT-DEC-SIGN-SEP-LEAD-POS,\n\n     EXT_DEC_SIGN_SEP_TRAIL_NEG, EXT_DEC_SIGN_SEP_TRAIL_POS)>\n\n   <|ELEMENT EXT_DEC_UNSIGNED (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGNED_NEGATIVE (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGNED_POSITIVE (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_LEADING_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_LEADING_POS (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_TRAILING_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_TRAILING_POS (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_POS (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_POS (#PCDATA)>\n\n   <|ELEMENT BINARIES (BINARY-UNSIGNED,\n   BINARY-SIGNED-POSITIVE,\n\n     BINARY_SIGNED_NEGATIVE)>\n\n   <|ELEMENT BINARY_UNSIGNED (#PCDATA)>\n\n   <|ELEMENT BINARY_SIGNED_POSITIVE (#PCDATA)>\n\n   <|ELEMENT BINARY_SIGNED_NEGATIVE (#PCDATA)>\n\n   <|ELEMENT INTERNAL-DECIMAL (INT-DEC-UNSIGNED,\n   INT-DEC-SIGNED-POS,\n\n     INT_DEC_SIGNED_NEG)>\n\n   <|ELEMENT INT_DEC_UNSIGNED (#PCDATA)>\n\n   <|ELEMENT INT_DEC_SIGNED_POS (#PCDATA)>\n\n   <|ELEMENT INT_DEC_SIGNED_NEG (#PCDATA)>\n\n !>\n\n <DATA>\n\n   <NUMERIC_TYPES>\n\n ...\n\n or external :\n\n XML file with an external DTD reference\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"no\" ?>\n\n <|DOCTYPE DATA SYSTEM \"./sample/dtd/binary\">\n\n <DATA>\n\n   <NUMERIC_TYPES>\n\n   ...\n\n 2.3 <sec:XML-to-text>XML to text conversion\n\n This conversion is a little bit more difficult and even\n in some cases impossible. Remember, TXT2XML implements\n only a subset of XML and COBOL. For example, this XML\n file : Nonconvertible XML file\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <weather>\n\n   <city name=\"Los Angeles\">\n\n     <sky>Blue</sky>\n\n     Hot and sunny\n\n   </city>\n\n </weather>\n\n In this file, the XML element city is a complex one. It\n includes the simple element sky but also a content (Hot\n and sunny). The corresponding COBOL copybook would be\n something like :\n\n Corresponding COBOL copybook\n\n 01 city pic x(20).\n\n   03 name pic x(20).\n\n   03 sky pic x(8).\n\n This is impossible in COBOL : a grouping item can't\n have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)\n paragraph 5.3.11 PICTURE Clause : \"The PICTURE clause\n can be specified only at the elementary level.\"\n\n So, not all the XML files can be converted. But, with a\n valid COBOL copybook, the XML file is read one line at\n the time and data is extracted using the following\n rules :\n\n * Mixed XML content is not supported,\n\n * All the XML tags and contents may expand on more than\n   one line,\n\n * XML headers starting with <?xml and ending with ?>\n   are skipped,\n\n * XML entities starting with <|ENTITY and ending with >\n   are not supported. If such a declaration is found,\n   the conversion process is aborted,\n\n * XML internal and external document type declaration\n   starting with <|DOCTYPE and ending with either > or\n   !> are skipped,\n\n * XML comments starting with <|-- and ending with -->\n   are skipped,\n\n * The first child element is then searched. Each time\n   an XML first child closing tag is found, a text\n   record is written and a new text record is\n   initialized with default values from the COBOL copybook,\n\n * Attributes of the first child element are supported.\n   But, attributes of the root element are ignored.\n\n * Each XML element, even without a content, must have\n   an equivalent in the COBOL copybook. To find it, the\n   XML element name is capitalized and underscores are\n   translated to dashes. For example : <cobol_item_01>\n   will become COBOL-ITEM-01 and is searched in the\n   COBOL copybook,\n\n * Each XML attribute may have an equivalent in the\n   COBOL copybook,\n\n * XML attributes like xml:space are ignored,\n\n * Each time a content is found, it's length and data\n   type are checked against the characteristics of the\n   corresponding COBOL item. Numeric items are right\n   justified and left zero filled. If necessary\n   characters are escaped.&amp; &lt; &gt; &quot; &apos; are converted to & < > \"\n and ' respectively or content is extracted from CDATA\n section starting with <|\u00a2CDATA\u00a2 and ending with !!>\n\n * If some XML elements or attributes are missing,\n   conversion continues with the new element found.\n   Missing COBOL items are left to their default value\n   (see section \u00a2sec:COBOL-copybook-analysis!).\n\n * Empty XML elements, even with attributes, are supported.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$03SIGNE": {"ttr": 8449, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $03Signe\n\n 3.1 Warning\n\n Signed an binary data are hardly bound with the\n operating system and the hardware running TXT2XML. On a\n PC, binary (and not numeric and packed-decimal) data is\n stored in little endian mode. It means that the\n low-order byte of the number is stored in memory at the\n lowest address, and the high-order byte at the highest\n address. On a IBM MVS mainframe, binary data are stored\n in the opposite mode : big endian. For example :\n\n +-------------------+---------------------+------------------+\n ] Hexadecimal data  ] Little endian (PC)  ] Big endian (MVS) ]\n +-------------------+---------------------+------------------+\n ]  x'01 02 03 \"04   ]    04 03 02 01      ]   01 02 03 04    ]\n +-------------------+---------------------+------------------+\n\n\n   Conclusion : although TXT2XML runs on multiple\n   platforms, you should always run TXT2XML on the\n   platform where you will use the binary and/or signed\n   converted data.\n\n So, forget the idea to run TXT2XML on one platform (i.e\n a PC running Windows) and to transfer the converted\n file on another platform (i.e. an IBM mainframe). File\n transfer means code page (character set) translation\n which binary, packed-decimal and even numeric data\n don't support. Don't try also to convert a pure EBCDIC\n file on a non-mainframe platform : TXT2XML will never\n find the XML element delimiters '<', '/' and '>' or the\n COBOL equivalent of an XML element. In all cases,\n conversion will stop with an error message.\n\n 3.2 COBOL compilers\n\n Even if COBOL is standardized, internal representation\n of signed and binary data may differ from a compiler to\n another, from a platform to another one, etc. That's\n why, a small COBOL program was written to create\n binary, packed-decimal and numeric reference data. On\n IBM mainframe running MVS, compiling it is easy, using\n a one of the \"Enterprise COBOL for Z/OS' product family.\n But on Windows and Linux/Unix, there are few compilers,\n with a active project status, available. On of them is\n : Tiny-Cobol that you can download from :\n\n http://tiny-cobol.sourceforge.net/\n\n Tiny-Cobol runs on :\n\n * BeOS,\n\n * FreeBSD,\n\n * Linux,\n\n * Windows (with MinGW or Cygwin).\n\n 3.3 Internal representation\n\n The results of execution of this program on the 3\n platforms is showed below :\n\n Binary, packed-decimal and numeric internal representation\n\n                                                                          +----------------------------------------------------+\n                                                                          ]              Internal representation               ]\n -------------------------------------------------------------------------+----------------------------------------------------+\n ] Numeric type      ] COBOL clauses                             ] Value  ]            MVS  ]     Linux/Unix  ]        Windows ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n +-------------------+---------------------------------------------------------------------------------------------------------+\n ] External decimal  ]                                                                                                         ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC 9999 DISPLAY                          ]  1234  ]    F1 F2 F3 F4  ]    31 32 33 34  ]    31 32 33 34 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY                         ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN LEADING            ] +1234  ]    C1 F2 F3 F4  ]   41 32 33 34   ]   41 32 33 34  ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]    D1 F2 F3 F4  ]    D1 32 33 34  ]   D1 32 33 34  ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN TRAILING           ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN LEADING SEPARATE   ] +1234  ] 4E F1 F2 F3 F4  ] 4E 31 32 33 34  ] 4E 31 32 33 34 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ] 60 F1 F2 F3 F4  ] 60 31 32 33 34  ] 60 31 32 33 34 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN TRAILING SEPARATE  ] +1234  ] F1 F2 F3 F4 4E  ] 31 32 33 34 4E  ] 31 32 33 34 4E ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ] F1 F2 F3 F4 60  ] 31 32 33 34 60  ] 31 32 33 34 60 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n +-------------------+---------------------------------------------------------------------------------------------------------+\n ] Binary            ]                                                                                                         ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC 9999 COMP-4                           ]  1234  ]          04 D2  ]          D2 04  ]          D2 04 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 COMP-4                          ] +1234  ]          04 D2  ]          D2 04  ]          D2 04 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]          FB 2E  ]          2E FB  ]          2E FB ]\n +-------------------+---------------------------------------------------------------------------------------------------------+\n ] Packed-decimal    ]                                                                                                         ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC 9999 COMP-3                           ]  1234  ]       01 23 4F  ]       01 23 4F  ]       01 23 4F ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 COMP-3                          ] +1234  ]       01 23 4C  ]       01 23 4C  ]       01 23 4C ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]       01 23 4D  ]       01 23 4C  ]       01 23 4C ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n\n\n 3.4 Low-values, high-values and spaces\n\n By default, space-only contents are ignored in XML. To\n preserve them, they are included in a CDATA tag.\n High-values (x'FF') and low-values (x'00') are escaped\n : i.e. converted in a tag like &#0; or &#255; respectively.\n\n 3.5 Functions\n\n To convert text data to and from binary, packed-decimal\n and numeric data, six functions have been written :\n\n  txt2bin\n\n It converts text data to binary. The parameters of the\n function are\n\n * text is the text to convert.\n\n * length is the length in bytes of binary data. May\n   only be 2, 4 or 8.\n\n * signed is a flag to tell that the binary item is\n   signed. May only be \"Y\" or \"N\".\n\n If text data is signed and negative, then text data is\n converted to binary and two's complement is performed.\n Returned data is justified to the right and padded with\n x'00' or x'FF' according to the sign. Finally, binary\n data is reversed for little endian systems.\n\n  txt2pack\n\n It converts text data to packed-decimal. The parameters\n of the function are :\n\n * text is the text to convert.\n\n * length is the length in bytes of packed-decimal data.\n\n * signed is a flag to tell that the packed-decimal item\n   is signed. May only be \"Y\" or \"N\".\n\n If necessary, a leading zero is added to the\n packed-decimal data so that the number of half-bytes is\n always odd. Returned data is justified to the right and\n padded with x'00'.\n\n  txt2num\n\n It converts text data to numeric. The parameters of the\n function are :\n\n * text is the text to convert.\n\n * length is the length in bytes of numeric data.\n\n * signed is a flag to tell that the numeric item is\n   signed. May only be \"Y\" or \"N\".\n\n * sign position is a flag to tell where the sign is\n   located. Allowed values are : \"\" (empty quotes - for\n   unsigned data), \"L\" (for LEADING sign), \"T\" (for\n   TRAILING sign), \"LS\" (for LEADING SEPARATE sign) and\n   \"TS\" (for TRAILING SEPARATE sign).\n\n Non-numeric data, like $ or '.', is converted in\n hexadecimal. Returned data is justified to the right\n and padded with zeroes.\n\n  bin2txt\n\n It converts binary data to text. The parameters of the\n function are\n\n * bin is the binary to convert.\n\n * length is the length in bytes of binary data. May\n   only be 2, 4 or 8.\n\n * signed is a flag to tell that the binary item is\n   signed. May only be \"Y\" or \"N\".\n\n Firstly, binary data is reversed for little endian\n systems. If it is signed and negative, then two's\n complement is performed before converting it to text.\n Leading zeroes are removed and eventually the sign is\n added before returning the text data.\n\n  pack2txt\n\n It converts packed-decimal data to text. The parameter\n of the function is :\n\n * pack is the packed-decimal data to convert.\n\n Sign is extracted from the last half-byte of the\n packed-decimal. Leading zeroes are removed and\n eventually the sign is added before returning the text data.\n\n  num2txt\n\n It converts numeric data to text. The parameters of the\n function are :\n\n * num is the numeric data to convert.\n\n * signed is a flag to tell that the binary item is\n   signed. May only be \"Y\" or \"N\".\n\n * sign position is a flag to tell where the sign is\n   located. Allowed values are : \"\" (empty quotes - for\n   unsigned data), \"L\" (for LEADING sign), \"T\" (for\n   TRAILING sign), \"LS\" (for LEADING SEPARATE sign) and\n   \"TS\" (for TRAILING SEPARATE sign).\n\n Non-numeric data, like $ or '.', is converted from\n hexadecimal to characters. Leading zeroes are removed\n and eventually the sign is added before returning the\n text data.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$04INSTA": {"ttr": 8452, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $04Insta\n\n 4.1 <sec:Downloading-TXT2XML>Downloading TXT2XML\n\n Download the latest TXT2XML version from :\n\n http://sourceforge.net/projects/txt2xml-rexx/\n\n and corresponding to your platform :\n\n +---------------------------+------------+\n ] File                      ] Platform   ]\n +---------------------------+------------+\n +---------------------------+------------+\n ] txt2xml.v*r*.mvs.zip      ] MVS        ]\n +---------------------------+------------+\n ] txt2xml.v*r*.win.zip      ] Windows    ]\n +---------------------------+------------+\n ] txt2xml.v*r*.unix.tar.gz  ] Linux/Unix ]\n +---------------------------+------------+\n\n\n where * are the version and release numbers. Create a\n new directory and decompress the archive file using\n your favorite decompression tool. For Unix environment,\n type in a console :\n\n tar xvzf txt2xml.v*r*.unix.tar.gz\n\n For MVS platform, the zip archive contains 2 files : a\n 'readme.txt' and an XMIT file that you will upload to\n the mainframe (see below).\n\n 4.2 <sec:Under-MVS>Under MVS\n\n 4.2.1 <sub:Installation>Installation\n\n The installation is straight forward :\n\n 1. Before uploading TXT2XML on the mainframe, you need\n   to allocate a new dataset with the following\n   characteristics : recfm=fb and lrecl=80,\n\n 2. Unzip the TXT2XML archive and upload in binary mode\n   the TXT2XML.XMIT file to this dataset on your MVS,\n\n 3. In TSO, issue the following command :\n\n   RECEIVE INDATASET(your.TXT2XML.XMIT.dataset)\n\n 4. Hit enter when it prompts you for restoring\n   parameters. This will create a new dataset,\n\n 5. Follow the instructions in the README member of this\n   new dataset. Typically, you will have to exec a Rexx\n   called \"receive\" that will create the TXT2XML EXEC,\n   CNTL and PANEL datasets.\n\n 4.2.2 <sub:Tests>Tests\n\n To run the IVP job, edit the TXT2XML member in the\n TXT2XML.CNTL dataset and change in the entire member :\n\n * USERID to your TSO userid,\n\n * HLQ to the high level qualifier of TXT2XML.\n\n and submit the job. The JCL step names ending with KO\n should end with a RC = 12 and the JCL step names ending\n with OK should end with a RC = 0 or 4.\n\n 4.2.3 <sub:Post-installation>Post-installation\n\n If you want, you can copy :\n\n * the TXT2XML.PANEL(TXT2XML) to your ISPF panel\n   dataset.\n\n * the TXT2XML.EXEC(TXT2XML) to your ISPF EXEC or REXX\n   dataset.\n\n 4.3 <sec:Under-Windows>Under Windows\n\n 4.3.1 <sub:Regina-or-Reginald>Regina or Reginald Rexx\n\n This step is mandatory. You must first download and\n install the latest Windows version of Regina Rexx from\n :\n\n http://sourceforge.net/projects/regina-rexx/\n\n You can alternatively download and install Reginald\n Rexx from :\n\n http://www.borg.com/~jglatt/rexx/reginald/reginald.htm\n\n Don't forget to add Rexx directory to the PATH\n environment variable (to access it : Start =>\n Parameters => Configuration Panel => System => Advanced\n => Environment Variables).\n\n 4.3.2 Java\n\n This step is optional. Starting with version 1.25, a\n JAVA GUI front-end for non-mainframe platforms has been\n written. If you want to use it, you must install Java.\n See section \u00a2sec:Installation3! for more details.\n\n 4.3.3 <sub:Tests-windows>Tests\n\n In the TXT2XML directory, execute in a DOS command\n interface window the TXT2XML.BAT file. The first five\n tests should end with an error, the others not.\n\n 4.4 <sec:Under-Unix/linux-and>Under Unix/Linux and other platforms\n\n 4.4.1 <sub:Regina-or-Reginald>Regina\n\n You must first download and install the latest version\n of Regina Rexx corresponding to your OS from :\n\n http://sourceforge.net/projects/regina-rexx/\n\n The Regina binary should be installed in /usr/bin/ . If\n it is not the case, modify in the rexx scripts\n (txt2xml.rexx & xml2cob.rexx), the magic number\n #|/usr/bin/rexx according to your needs.\n\n 4.4.2 Java\n\n This step is optional. Starting with version 1.25, a\n JAVA GUI front-end for non-mainframe platforms has been\n written. If you want to use it, you must install Java.\n See section \u00a2sec:Installation3! for more details.\n\n 4.4.3 <sub:Tests-unix>Tests\n\n In the TXT2XML directory, execute in a shell the\n ./txt2xml.sh script. The first five tests should end\n with an error, the others not.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$05SYNTA": {"ttr": 8705, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $05Synta\n\n The TXT2XML syntax is :\n\n TXT2XML syntax\n\n txt2xml\n\n   TXT txt-file\n\n   COB cob-file\n\n   XML xml-file\n\n   FORMAT format\n\n   PREFIX prefix\n\n   DTD dtd-file\n\n   VERBOSE\n\n   BROWSE\n\n All parameters can be typed in any case (upper, lower\n or mixed) and only in this order. But, on some case\n sensitive operating systems like Linux/Unix, file names\n must be typed with the correct case and the TXT2XML\n command must be typed in lower case. The file names may\n include space characters. TXT2XML parameters must be\n only one line, except if your operating systems allows\n continuation characters.\n\n 5.1 <sec:Mandatory-parameters>Mandatory parameters\n\n 5.1.1 <sub:TXT>TXT txt-file\n\n It's the name of the input or output (depending on the\n direction of conversion) text file. There is no default\n value for this parameter.\n\n  Under MVS\n\n 'txt-file' can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML, txt-file must exist, except\n when doing an XML to text conversion under ISPF.\n\n  For all other platforms\n\n txt-file has to be a correct file name. The file must\n exist before running TXT2XML for a text to XML conversion.\n\n 5.1.2 <sub:COB>COB cob-file\n\n It's the name of the COBOL copybook file. There is no\n default value for this parameter.\n\n  Under MVS\n\n \"cob-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML, cob-file must always exist.\n\n  For all other platforms\n\n cob-file has to be a correct file name. The file must\n always exist before running TXT2XML. Since TXT2XML does\n not handle some COBOL clauses such as REDEFINES, etc,\n it is best to \"clean up\" the copybook by removing all\n COBOL clauses not handled by the TXT2XML routines.\n\n 5.1.3 <sub:XML>XML xml-file\n\n It's the name of the input or output (depending on the\n direction of conversion) XML file. There is no default\n value for this parameter.\n\n  Under MVS\n\n \"xml-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML, xml-file must exist, except\n when doing a text to XML conversion under ISPF.\n\n  For all other platforms\n\n xml-file has to be a correct file name. The file must\n exist before running TXT2XML for an XML to text conversion.\n\n 5.1.4 <sub:FORMAT>FORMAT format\n\n The value for this parameter may only be (all\n platforms) :\n\n * X for text to XML conversion,\n\n * T to XML to text conversion.\n\n There is no default value for this parameter.\n\n 5.2 <sec:Optional-parameters>Optional parameters\n\n 5.2.1 <sub:Browse>BROWSE\n\n The default value for this parameter is no.\n\n  Under MVS\n\n Only under ISPF and if present, will browse the\n conversion results report.\n\n  For all other platforms\n\n On all other platforms, this parameter is ignored.\n\n 5.2.2 <sub:verbose>VERBOSE\n\n If present, displays all the messages. The default\n value is no, all messages are not displayed.\n\n 5.2.3 <sub:XML>DTD dtd-file\n\n This parameter is only valid during text to XML\n conversion. It's the name of an optional output DTD\n file or the value \"INTERNAL' for a DTD included in the\n XML file. There is no default value for this parameter.\n if omitted, no DTD will be created.\n\n  Under MVS\n\n \"dtd-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML under ISPF, dtd-file must not exist.\n\n  For all other platforms\n\n dtd-file has to be a correct file name.\n\n 5.2.4 <sub:prefix>PREFIX prefix\n\n If present :\n\n * During text to XML conversion, if prefix value is\n   'COBOL-' then the COBOL item COBOL-ITEM-01 will be\n   converted to <ITEM-01> .\n\n * During XML to text conversion, if prefix value is\n   'COBOL-' then the XML element <ITEM_01> will be\n   checked against the COBOL item COBOL-ITEM-01.\n\n There is no default value for this parameter.\n\n  Under MVS batch (JCL)\n\n The dash ('-') used in COBOL item name, like\n COBOL-ITEM-01, is taken for a continuation character in\n JCL. If you use prefix within a batch job, replace all\n dashes ('-') in the COBOL item name by underscores ('_').\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$06EXEMP": {"ttr": 8707, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $06Exemp\n\n You will find here some examples of TXT2XML. You will\n find more examples in the test script files (see\n section \u00a2sub:Tests!, section \u00a2sub:Tests-unix!, or section \u00a2sub:Tests-windows!) or in the IVP job.\n\n 6.1 <sec:MVS>MVS\n\n 6.1.1 <sub:ISPF>ISPF\n\n Just type \"exec' in front of the TXT2XML member of the\n EXEC dataset and the ISPF panel will appear :\n\n ISPF panel\n\n <Fichier graphique : image/tn3270_01.jpg>\n\n\n Fill the required parameters, hit enter and you will\n see :\n\n Browsing result dataset\n\n <Fichier graphique : image/tn3270_02.jpg>\n\n\n 6.1.2 <sub:Batch>Batch\n\n If you submit the following JCL : Job to be submitted\n\n <Fichier graphique : image/tn3270_03.jpg>\n\n\n You will get :\n\n Resulting job log\n\n <Fichier graphique : image/tn3270_04.jpg>\n\n\n 6.2 <sec:Windows>Windows\n\n In a DOS command interface window and in the TXT2XML\n directory, just type :\n\n Windows example\n\n D:\\REXX\\txt2xml>txt2xml.rexx txt .\\sample\\txt\\database\n cob .\\sample\\cob\\database xml .\\sample\\xml\\database\n format txt\n\n and you will get :\n\n Resulting message log\n\n TXT2XML: Text from & to XML Conversion Utility.\n Version: 1.2\n\n TXT2XML:\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item ADMINISTRATOR starting at 115\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EMAILALIAS starting at 135\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EXTENSION starting at 145\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item ADMINISTRATOR starting at 149\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EMAILALIAS starting at 169\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EXTENSION starting at 179\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 2 , COBOL\n item ADMINISTRATOR starting at 149\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 2 , COBOL\n item EMAILALIAS starting at 169\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 2 , COBOL\n item EXTENSION starting at 179\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 3 , COBOL\n item EXTENSION starting at 179\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML:\n\n TXT2XML: Txt File: .\\sample\\txt\\database\n\n TXT2XML: Cobol File: .\\sample\\cob\\database\n\n TXT2XML: XML File: .\\sample\\xml\\database\n\n TXT2XML: Output data format: TXT\n\n TXT2XML: Text records: 3 processed in .29000 seconds\n\n ...\n\n 6.3 <sec:Unix>Unix/Linux\n\n In a shell, just type in lowercase in the TXT2XML\n directory :\n\n Unix/Linux example.\n\n ./txt2xml.rexx txt ./sample/txt/text01 cob\n\n ./sample/cob/cobol01 xml ./sample/xml/xml01 format xml\n\n The XML file should look like :\n\n Resulting XML file\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <|--\n\n Created by TXT2XML on 12 Sep 2004 at 21:46:39\n\n More info on :\n http://sourceforge.net/projects/txt2xml-rexx/\n\n -->\n\n <DATA>\n\n   <COBOL_ITEM_01>\n\n     <COBOL_ITEM_02>12&lt;45</COBOL_ITEM_02>\n\n     <COBOL_ITEM_02>67&gt;90</COBOL_ITEM_02>\n\n     <COBOL_ITEM_03>\n\n       <COBOL_ITEM_04>1&amp;3</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>4</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>5</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_03>\n\n     <COBOL_ITEM_04>678</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>9</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>0</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_03>\n\n       <COBOL_ITEM_04>123</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>4</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>5</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_03>\n\n       <COBOL_ITEM_04>678</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>9</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>0</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_08>1234</COBOL_ITEM_08>\n\n     <COBOL_ITEM_09>567890</COBOL_ITEM_09>\n\n     <COBOL_ITEM_12>\n\n       <COBOL_ITEM_13>12345</COBOL_ITEM_13>\n\n       <COBOL_ITEM_13>67890</COBOL_ITEM_13>\n\n       <COBOL_ITEM_13>12345</COBOL_ITEM_13>\n\n       <COBOL_ITEM_13>67890</COBOL_ITEM_13>\n\n       <COBOL_ITEM_14>123456789012345</COBOL_ITEM_14>\n\n       <COBOL_ITEM_15>6789</COBOL_ITEM_15>\n\n     </COBOL_ITEM_12>\n\n   </COBOL_ITEM_01>\n\n   ...\n\n </DATA>\n\n with this message log :\n\n Log of the conversion\n\n TXT2XML: Text from & to XML Conversion Utility.\n Version: 1.2\n\n TXT2XML:\n\n TXT2XML: ==>Warning : in the COBOL copybook, level 66,\n 77, 88 items are ignored.\n\n TXT2XML: ==>Warning : in the COBOL copybook, level 66,\n 77, 88 items are ignored.\n\n TXT2XML: ==>Warning : in the COBOL copybook, level 66,\n 77, 88 items are ignored.\n\n TXT2XML:\n\n TXT2XML: Txt File:           ./sample/txt/text01\n\n TXT2XML: Cobol File:         ./sample/cob/cobol01\n\n TXT2XML: XML File:           ./sample/xml/xml01\n\n TXT2XML: Output data format: XML\n\n TXT2XML: Text records:       10 processed in .03286 seconds\n\n TXT2XML:\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ================================================================================\n\n TXT2XML:\n\n TXT2XML:                             COBOL copybook analysis\n\n TXT2XML:\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+-------------------------------------+-------+-------+--------+---------------+\n\n TXT2XML: ] Level ] Name\n ] Type  ] Start ] Length ] Default value ]\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+-------------------------------------+-------+-------+--------+---------------+\n\n TXT2XML: ] 1     ] COBOL-ITEM-01\n ] GROUP ] 1     ] 0      ]               ]\n\n TXT2XML: ] 2     ]  FILLER\n ] CHAR  ] 1     ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-02\n ] CHAR  ] 2     ] 5      ] AB\"CD         ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-02\n ] CHAR  ] 7     ] 5      ] AB\"CD         ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 12    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 12    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 15    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 16    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 17    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 17    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 20    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 21    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 22    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 22    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 25    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 26    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 27    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 27    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 30    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 31    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-08\n ] NUM   ] 32    ] 4      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-09\n ] CHAR  ] 36    ] 6      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-12\n ] GROUP ] 42    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 42    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 47    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 52    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 57    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-14\n ] CHAR  ] 62    ] 15     ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-15\n ] NUM   ] 77    ] 4      ] 0000          ]\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+-------------------------------------+-------+-------+--------+---------------+\n\n TXT2XML:\n\n TXT2XML: Total computed COBOL length : 80\n\n\n\n X M L 2 C O B\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$07INTRO": {"ttr": 8964, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $07Intro\n\n XML2COB is a complementary tool of TXT2XML. It\n generates a COBOL copybook, using an XML file as\n template. Of course, you can use the generated COBOL\n copybook to convert, with TXT2XML, XML files to text\n files and vice-versa. However, like TXT2XML, it is not\n an XML parser written in Rexx, nor will support the\n entire XML specification.\n\n XML2COB works only with well-formed XML documents. For\n example, it will never check for missing XML closing\n tags. XML2COB generates valid COBOL copybooks, but it's\n still your responsibility to check COBOL clauses like :\n\n * OCCURS\n\n * PICTURE (symbol and length of the item).\n\n * SIGN\n\n As TXT2XML, XML2COB was tested successfully on :\n\n * Windows 2K,\n\n * Linux Mandrake 10.1,\n\n * MVS (OS/390 V2R10).\n\n It should work without problems on other platforms. To\n run XML2COB on non-mainframe platforms, you must first\n install Regina Rexx or for windows only, Reginald (see\n chapter \u00a2cha:Installation!). Optionally, for the GUI front-end, you may\n also install Java (see\u00a2sec:Installation3! for more details). Should you\n succeed or encounter problems in running XML2COB on a\n non-tested platform, please send an e-mail to :\n\n sunuraxi@users.sourceforge.net\n\n XML2COB is released under the GPL license (see appendix \u00a2cha:License!).\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$08PRINC": {"ttr": 9217, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $08Princ\n\n Except for some constraints (see section \u00a2sec:Constraints!), there is no\n special requirements about the XML file used for the\n generation. However, there is a gold rule : the bigger\n the XML file is, more accurate will be the generated\n COBOL copybook. The reason is very simple : a bigger\n file means more tags, more contents analyzed, and more\n accuracy in ...\n\n 8.1 <sec:The-meta-data>The meta-data\n\n The following meta-data are extracted from the XML\n elements, attributes and content :\n\n +------------------+--------------------------------+\n ] Meta-data        ] Usage                          ]\n +------------------+--------------------------------+\n +------------------+--------------------------------+\n ] Element name     ] To create the COBOL item names ]\n +------------------+--------------------------------+\n ] Type of content  ] To create the PICTURE clause   ]\n +------------------+--------------------------------+\n ] Sign position    ] To create SIGN clause          ]\n +------------------+--------------------------------+\n ] Length           ] To create the PICTURE clause   ]\n +------------------+--------------------------------+\n ] Occurrence       ] To create the OCCURS clause    ]\n +------------------+--------------------------------+\n\n\n 8.2 <sec:The-COBOL-copybook-generation>The COBOL copybook generation\n\n In an XML file, the elements can be classified in 3\n categories :\n\n * Root : the first XML element. It's ignored in the\n   generation process and is not part of the generated\n   COBOL copybook.\n\n * First child : the second XML element. Each time it\n   appears, the meta-data analysis of the XML elements\n   is (re-)started. It corresponds to the first COBOL\n   item in the copybook. As this first child element\n   includes all the other XML elements, its\n   corresponding COBOL item is a grouping item, with the\n   lowest level and a unique occurrence.\n\n * Other child elements: the other XML elements. They\n   are analyzed to extract the meta-data needed to build\n   the rest of the COBOL copybook.\n\n The COBOL copybook generation process take place in the\n following steps :\n\n * The XML file is read record per record until the end\n   of the file.\n\n * The first child is then searched.\n\n * Each XML element or attributes generates a COBOL item\n   applying the following rules :\n\n   * The name of the XML element or attribute is\n     capitalized and dashes (\"-\") are translated to\n     underscore (\"_\"). For example : <cobol_item_01>\n     becomes COBOL-ITEM-01. COBOL item names are checked\n     against a COBOL reserved word listaccording to IBM's \"Enterprise COBOL for z/OS V3R3\n Language Reference \"(IGY3LR20)\n     . A warning message is issued if the generated item\n     name appears in this list,\n\n   * Meta-data of the contentContent is escaped if necessary. Characters like & < > \"\n and ' are converted to &amp; &lt; &gt; &quot; &apos;\n respectively.\n      of the XML element and attributes is extracted :\n     length, type and sign.\n\n   * Length of item is rounded if requested (see\n     sub-section \u00a2sub:round!). A COBOL item is then created.\n\n * Each time the XML first child is found, the analysis\n   is restarted and the meta-data is updated if\n   necessary. For example, if the content length of an\n   XML element is greater than the current length of its\n   corresponding COBOL item, the length is updated. The\n   contrary is, of course, not true.\n\n * When the end of the XML file is reached :\n\n   * The item list is then checked against elementary or\n     grouping items occurring more than one time. If\n     this is the case, only the first occurrence of the\n     item is kept, the others are deleted and an\n     occurrence counter is created\n\n   * The starting position of each COBOL item is\n     computed. Although, it's not necessary for the\n     COBOL copybook, it is used for final reporting.\n\n   * The COBOL copybook is written, indenting the items\n     according to their COBOL level.\n\n 8.3 <sec:COBOL-level>COBOL level\n\n COBOL levels are not part of the XML file. They are\n computed using the following rules :\n\n * At each XML first child, level starts at 01 or 02\n   according to the level01 parameter (see sub-section \u00a2sub:level01!)\n\n * The level of COBOL item increases :\n\n   * at each XML element\n\n   * at each XML content\n\n   * at each XML attribute\n\n * The level of COBOL item decreases :\n\n   * at each XML empty element\n\n   * after each XML content\n\n   * after each XML closing tag,\n\n   * after each XML attribute.\n\n For example, with the following XML file,\n\n an XML file with attributes and content\n\n <?xml version=\"1.0\"?>\n\n <DatabaseInventory>\n\n     <DatabaseName>\n\n       <DatabaseDomain>iDevelopment.info</DatabaseDomain>\n\n       <Administrator EmailAlias=\"jhunter\"\n       Extension=\"6007\">Jeffrey Hunter\n\n       </Administrator>\n\n     </DatabaseName>\n\n <DatabaseInventory>\n\n XML2COB will generate the following COBOL copybook :\n\n Generated COBOL copybook\n\n 02 DATABASENAME.\n\n   04 DATABASEDOMAIN PICTURE X(17).\n\n   04 ADMINISTRATOR.\n\n     06 EMAILALIAS PICTURE X(7).\n\n     06 EXTENSION PICTURE 9(4).\n\n     06 ADMINISTRATOR PICTURE X(14).\n\n As you can see, the COBOL item ADMINISTRATOR appears 2\n times :\n\n 1. The first time as a grouping item, because the XML\n   element Administrator has attributes\n\n 2. The second time as an elementary item at a lower\n   level than the grouping item, because the XML element\n   Administrator also has a content.\n\n 8.4 <sec:Constraints>Constraints\n\n In some cases, generating a COBOL copybook from an XML\n file is impossible. For example, this XML file : Nonconvertible XML file\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <weather>\n\n   <city name=\"Los Angeles\">\n\n     <sky>Blue</sky>\n\n     Hot and sunny\n\n   </city>\n\n </weather>\n\n In this file, the XML element city is a complex one. It\n includes the simple element sky but also a content (Hot\n and sunny). The corresponding COBOL copybook would be\n something like :\n\n Corresponding COBOL copybook\n\n 01 city pic x(20).\n\n   03 name pic x(20).\n\n   03 sky pic x(8).\n\n This is impossible in COBOL : a grouping item can't\n have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)\n paragraph 5.3.11 PICTURE Clause : \"The PICTURE clause\n can be specified only at the elementary level.\"\n\n So, not all the XML files can be used and some\n constraints apply when generating a COBOL copybook :\n\n * Mixed XML content is not supported,\n\n * XML entities starting with <|ENTITY and ending with >\n   are not supported. If such a declaration is found,\n   the generation process is aborted,\n\n * Attributes of XML element are supported. But,\n   attributes of the root element are ignored.\n\n * XML attributes like xml:space are ignored,\n\n * All the XML tags and contents may expand on more than\n   one line,\n\n * XML headers starting with <?xml and ending with ?>\n   are skipped,\n\n * XML internal and external document type declaration\n   starting with <|DOCTYPE and ending with either > or\n   !> are skipped,\n\n * XML comments starting with <|-- and ending with -->\n   are skipped,\n\n * Empty XML elements, even with attributes, are supported.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$09INSTA": {"ttr": 9220, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $09Insta\n\n  See chapter \u00a2cha:Installation!\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$10SYNTA": {"ttr": 9222, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $10Synta\n\n The XML2COB syntax is :\n\n XML2C0B syntax\n\n xml2cob\n\n   COB cob-file\n\n   XML xml-file\n\n   PREFIX prefix\n\n   LEVEL01\n\n   ROUND\n\n   VERBOSE\n\n   BROWSE\n\n All parameters can be typed in any case (upper, lower\n or mixed) and only in this order. But, on some case\n sensitive operating systems like Linux/Unix, file names\n must be typed with the correct case and the XML2C0B\n command must be typed in lower case. The file names may\n include space characters. XML2C0B parameters must be\n only one line, except if your operating systems allows\n continuation characters.\n\n 10.1 <sec:Mandatory-parameters2>Mandatory parameters\n\n 10.1.1 <sub:COB2>COB cob-file\n\n It's the name of the COBOL copybook file. There is no\n default value for this parameter.\n\n  Under MVS\n\n \"cob-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running XML2C0B, 'cob-file' must not exist.\n\n  For all other platforms\n\n 'cob-file' has to be a correct file name.\n\n 10.1.2 <sub:XML2>XML xml-file\n\n It's the name of the input XML file. There is no\n default value for this parameter.\n\n  Under MVS\n\n \"xml-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running XML2C0B, 'xml-file' must exist.\n\n  For all other platforms\n\n 'xml-file' has to be a correct file name. The file must\n exist before running XML2C0B.\n\n 10.2 <sec:Optional-parameters2>Optional parameters\n\n 10.2.1 <sub:prefix2>PREFIX prefix\n\n If prefix value is set to 'COBOL-' then the XML element\n <cobol_item_01> will generate a COBOL item called\n ITEM-01. There is no default value for this parameter.\n\n  Under MVS batch (JCL)\n\n The dash ('-') used in prefix, like COBOL-, is taken\n for a continuation character in JCL. If you use prefix\n within a batch job, replace all dashes ('-\") by\n underscores ('_').\n\n 10.2.2 <sub:level01>LEVEL01\n\n If present, the COBOL copybook will start at level 01.\n The default value is no level 01, it starts at level 02.\n\n 10.2.3 <sub:round>ROUND\n\n If present, all COBOL item length will be rounded to\n the next 5 or 0. For example :\n\n +-----------------------------+\n ]     COBOL item length       ]\n +-----------------------------+\n +---------------+-------------+\n ] Before round  ] After round ]\n +---------------+-------------+\n ]      8        ]     10      ]\n +---------------+-------------+\n ]      48       ]     50      ]\n +---------------+-------------+\n ]     113       ]     125     ]\n +---------------+-------------+\n ]     205       ]     250     ]\n +---------------+-------------+\n ]     517       ]     600     ]\n +---------------+-------------+\n\n\n The default value is no round, item length is not rounded.\n\n 10.2.4 <sub:Browse2>BROWSE\n\n The default value for this parameter is no.\n\n  Under MVS\n\n Only under ISPF and if present, will browse the\n generation results report.\n\n  For all other platforms\n\n On all other platforms, this parameter is ignored.\n\n 10.2.5 <sub:verbose2>VERBOSE\n\n If present, displays all the messages. The default\n value is no, all messages are not displayed.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$11EXAMP": {"ttr": 9473, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $11Examp\n\n You will find here some examples of XML2COB. You will\n find more examples in the test script files or in the\n IVP job (see section \u00a2sub:Tests!, see \u00a2sub:Tests-unix! or section \u00a2sub:Tests-windows!).\n\n 11.1 <sec:MVS2>MVS\n\n 11.1.1 <sub:ISPF2>ISPF\n\n Just type \"exec' in front of the XML2COB member of the\n EXEC dataset and the ISPF panel will appear :\n\n ISPF panel\n\n <Fichier graphique : image/tn3270_05.jpg>\n\n\n Fill the required parameters, hit enter and you will\n see :\n\n Browsing result dataset\n\n <Fichier graphique : image/tn3270_06.jpg>\n\n\n 11.1.2 <sub:Batch2>Batch\n\n If you submit the following JCL : Job to be submitted\n\n <Fichier graphique : image/tn3270_07.jpg>\n\n\n You will get :\n\n Resulting job log\n\n <Fichier graphique : image/tn3270_08.jpg>\n\n\n 11.2 <sec:Windows2>Windows\n\n In a DOS command interface window and in the XML2COB\n directory, just type :\n\n Windows example\n\n D:\\REXX\\txt2xml>xml2cob.rexx cob\n .\\sample\\cob\\xml2cob\\database xml .\\sample\\xml\\database\n level01 round verbose\n\n and you will get :\n\n Resulting message log\n\n XML2COB: XML to COBOL Copybook Conversion Utility.\n Version: 1.0\n\n XML2COB:\n\n XML2COB:\n\n XML2COB: XML File:           .\\sample\\xml\\database\n\n XML2COB: Cobol File:         .\\sample\\cob\\xml2cob\\database\n\n XML2COB: Prefix:\n\n XML2COB: Round:              Y\n\n XML2COB: Level01:            Y\n\n XML2COB:\n\n XML2COB: XML first child:    4 processed in .26100 seconds\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ================================================================================\n\n XML2COB:\n\n XML2COB:                             COBOL copybook\n created :\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] Level ] Name                           ]\n Type  ] Occurs ] Sign ] Start ] Length ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] 01    ] DATABASENAME                   ]\n   ] 1      ] N    ] 1     ] 0      ]\n\n XML2COB: ] 03    ]   GLOBALDATABASENAME           ]\n CHAR  ] 1      ] N    ] 1     ] 210    ]\n\n XML2COB: ] 03    ]   ORACLESID                    ]\n CHAR  ] 1      ] N    ] 211   ] 15     ]\n\n XML2COB: ] 03    ]   DATABASEDOMAIN               ]\n CHAR  ] 1      ] N    ] 226   ] 110    ]\n\n XML2COB: ] 03    ]   ADMINISTRATOR                ]\n   ] 3      ] N    ] 336   ] 0      ]\n\n XML2COB: ] 05    ]     EMAILALIAS                 ]\n CHAR  ] 1      ] N    ] 336   ] 15     ]\n\n XML2COB: ] 05    ]     EXTENSION                  ] NUM\n   ] 1      ] N    ] 351   ] 5      ]\n\n XML2COB: ] 05    ]     ADMINISTRATOR              ]\n CHAR  ] 1      ] N    ] 356   ] 15     ]\n\n XML2COB: ] 03    ]   DATABASEATTRIBUTES           ]\n   ] 1      ] N    ] 441   ] 0      ]\n\n XML2COB: ] 05    ]     GENRE                      ]\n   ] 1      ] N    ] 441   ] 10     ]\n\n XML2COB: ] 05    ]     VERSION                    ]\n   ] 1      ] N    ] 451   ] 5      ]\n\n XML2COB: ] 03    ]   COMMENTS                     ]\n   ] 1      ] N    ] 456   ] 185    ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB:\n\n XML2COB: Total COBOL record length : 640\n\n XML2COB:\n\n\n\n 11.3 <sec:Unix2>Unix/Linux\n\n In a shell, just type in lower case in the XML2COB\n directory :\n\n Unix/Linux example.\n\n ./xml2cob.rexx cob ./sample/cob/xml2cob/book xml\n ./sample/xml/book verbose\n\n The XML file should look like :\n\n Resulting COBOL copybook\n\n\n *---------------------------------------------------------------\n\n       *\n\n       *  Created by XML2COB on 20 Feb 2005 at 21:17:12\n\n       *\n\n       *  More info on :\n http://sourceforge.net/projects/txt2xml-rexx/\n\n       *\n\n       *  Total COBOL record length : 255\n\n       *\n\n\n *---------------------------------------------------------------\n\n\n\n           02 BOOK.\n\n              04 BOOK-ID\n PICTURE X(5).\n\n              04 BOOK-AUTHOR\n PICTURE X(20).\n\n              04 BOOK-TITLE\n PICTURE X(38).\n\n              04 GENRE\n PICTURE X(15).\n\n              04 PRICE\n PICTURE 9(5).\n\n              04 PUBLISH-DATE\n PICTURE X(10).\n\n              04 DESCRIPTION\n PICTURE X(162).\n\n\n\n with this message log :\n\n Log of the generation\n\n XML2COB: XML to COBOL Copybook Conversion Utility.\n Version: 1.0\n\n XML2COB:\n\n XML2COB:\n\n XML2COB: XML File:           ./sample/xml/book\n\n XML2COB: Cobol File:         ./sample/cob/xml2cob/book\n\n XML2COB: Prefix:\n\n XML2COB: Round:              N\n\n XML2COB: Level01:            N\n\n XML2COB:\n\n XML2COB: XML first child:    13 processed in .11121 seconds\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ================================================================================\n\n XML2COB:\n\n XML2COB:                             COBOL copybook\n created :\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] Level ] Name                           ]\n Type  ] Occurs ] Sign ] Start ] Length ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] 02    ]  BOOK                          ]\n   ] 1      ] N    ] 1     ] 0      ]\n\n XML2COB: ] 04    ]    BOOK-ID                     ]\n CHAR  ] 1      ] N    ] 1     ] 5      ]\n\n XML2COB: ] 04    ]    BOOK-AUTHOR                 ]\n CHAR  ] 1      ] N    ] 6     ] 20     ]\n\n XML2COB: ] 04    ]    BOOK-TITLE                  ]\n CHAR  ] 1      ] N    ] 26    ] 38     ]\n\n XML2COB: ] 04    ]    GENRE                       ]\n CHAR  ] 1      ] N    ] 64    ] 15     ]\n\n XML2COB: ] 04    ]    PRICE                       ] NUM\n   ] 1      ] N    ] 79    ] 5      ]\n\n XML2COB: ] 04    ]    PUBLISH-DATE                ]\n CHAR  ] 1      ] N    ] 84    ] 10     ]\n\n XML2COB: ] 04    ]    DESCRIPTION                 ]\n CHAR  ] 1      ] N    ] 94    ] 162    ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB:\n\n XML2COB: Total COBOL record length : 255\n\n XML2COB:\n\n\n\n <par:The-JAVA-GUI>The GUI front-end\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$12THE": {"ttr": 9731, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $12The\n\n 12.1 <sec:Introduction3>Introduction\n\n Although TXT2XML and XML2COB are not GUI tools (see\n chapter \u00a2cha:Introduction!), it's perfectly understandable that some\n people don't like the command line. That's why a GUI\n front-end was written for non-mainframe platforms.\n There is a lot of programming techniques for GUI\n applications available on the Internet and choosing one\n of them was not simple. Some requirements were\n established : the GUI front-end had to :\n\n * be portable,\n\n * be easy to write,\n\n * use known standards and software.\n\n \u00a2http://thinlet.sourceforge.net/]]Thinlet! was chosen. It's a GUI toolkit, a single Java class\n that parses the hierarchy and properties of the GUI,\n handles user interaction, and calls business logic. It\n separates the graphic presentation (described in an XML\n file) and the application methods (written as Java\n code). Thinlet usesXUL (XML User Interface Language)\n which is a markup language for describing user\n interfaces. With XUL you can create rich, sophisticated\n cross-platform applications easily. Here is an example\n of an XUL file :\n\n XUL sample file.\n\n <?xml version=\"1.0\"?>\n\n <panel columns=\"1\">\n\n   <menubar>\n\n   <menu text=\"File\" mnemonic=\"0\">\n\n     <menuitem text=\"Exit\" action=\"exit\"/>\n\n   </menu>\n\n   </menubar>\n\n   <panel columns=\"3\" gap=\"10\" top=\"10\" left=\"10\"\n\n   bottom=\"10\" right=\"10\">\n\n     <label text=\"Text file :\" mnemonic=\"0\"\n     for=\"TextFile\"/>\n\n     <textfield name=\"TextFile\" columns=\"50\"\n\n     tooltip=\"Enter here the text file name\"/>\n\n     <button text=\"Select...\"\n\n     action=\"openTextFileDialog(thinlet,TextFile)\"\n\n     tooltip=\"Click here to select the text file\"/>\n\n     <checkbox name=\"format\" text=\"XML\" group=\"format\"\n\n     tooltip=\"Click here to convert from text to XML\"\n\n     selected=\"true\" colspan=\"2\"\n\n     action=\"SetFormat(this.text)\"/>\n\n     <label/>\n\n     <checkbox text=\"text\" group=\"format\"\n\n     tooltip=\"Click here to convert from XML to text\"\n\n     colspan=\"2\" action=\"SetFormat(this.text)\"/>\n\n     <separator colspan=\"3\" />\n\n     <label text=\"Prefix :\" mnemonic=\"0\" for=\"Prefix\"/>\n\n     <textfield name=\"Prefix\" columns=\"25\"\n\n     tooltip=\"Enter here the prefix\"/>\n\n     <label/>\n\n     <button text=\"Convert\"\n\n     action=\"CallTXT2XML(TextFile.text,COBOLFile.text,\n\n     XMLFile.text,DTDFile.text,Prefix.text)\"\n\n     tooltip=\"Click here to start the conversion\"\n     mnemonic=\"2\"/>\n\n   </panel>\n\n </panel>\n\n\n\n Of course, if you are a shell or a \"DOS command prompt'\n fanatic, you can still continue to use TXT2XML and\n XML2COB Rexx scripts on a command line.\n\n 12.2 <sec:Installation3>Installation\n\n To use the GUI front-end, you need to download and\n install the Java Software Developer Kit (Java SDK) :\n\n http://java.sun.com\n\n The GUI front-end was tested successfully on Windows\n and Linux Mandrake 10.1 with J2EE 1.4. Make sure that\n your path includes the directory where you have\n installed the Java SDK.\n\n 12.3 Syntax<sec:Syntax3>\n\n To launch the GUI front-end, you can :\n\n * Type on a command line :\n\n java -jar txt2xml.jar\n\n or\n\n java -jar xml2cob.jar\n\n according to which Rexx script you want to execute.\n\n * or simply execute txt2xml.rexx or xml2cob.rexx\n   without parameters.\n\n 12.4 Example<sec:Example3>\n\n Here is an example when starting TXT2XML without\n parameters :\n\n The GUI front-end\n\n <Fichier graphique : image/gui_01.jpg>\n\n\n and the result of the conversion :\n\n Browsing the results with the GUI front-end\n\n <Fichier graphique : image/gui_02.jpg>\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$13LICEN": {"ttr": 9733, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $13Licen\n\n GNU GENERAL PUBLIC LICENSE Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n Everyone is permitted to copy and distribute verbatim\n copies of this license document, but changing it is not\n allowed.\n\n A.1 Preamble\n\n The licenses for most software are designed to take\n away your freedom to share and change it. By contrast,\n the GNU General Public License is intended to guarantee\n your freedom to share and change free software--to make\n sure the software is free for all its users. This\n General Public License applies to most of the Free\n Software Foundation's software and to any other program\n whose authors commit to using it. (Some other Free\n Software Foundation software is covered by the GNU\n Library General Public License instead.) You can apply\n it to your programs, too.\n\n When we speak of free software, we are referring to\n freedom, not price. Our General Public Licenses are\n designed to make sure that you have the freedom to\n distribute copies of free software (and charge for this\n service if you wish), that you receive source code or\n can get it if you want it, that you can change the\n software or use pieces of it in new free programs; and\n that you know you can do these things.\n\n To protect your rights, we need to make restrictions\n that forbid anyone to deny you these rights or to ask\n you to surrender the rights. These restrictions\n translate to certain responsibilities for you if you\n distribute copies of the software, or if you modify it.\n\n For example, if you distribute copies of such a\n program, whether gratis or for a fee, you must give the\n recipients all the rights that you have. You must make\n sure that they, too, receive or can get the source\n code. And you must show them these terms so they know\n their rights.\n\n We protect your rights with two steps: (1) copyright\n the software, and (2) offer you this license which\n gives you legal permission to copy, distribute and/or\n modify the software.\n\n Also, for each author's protection and ours, we want to\n make certain that everyone understands that there is no\n warranty for this free software. If the software is\n modified by someone else and passed on, we want its\n recipients to know that what they have is not the\n original, so that any problems introduced by others\n will not reflect on the original authors' reputations.\n\n Finally, any free program is threatened constantly by\n software patents. We wish to avoid the danger that\n redistributors of a free program will individually\n obtain patent licenses, in effect making the program\n proprietary. To prevent this, we have made it clear\n that any patent must be licensed for everyone's free\n use or not licensed at all.\n\n The precise terms and conditions for copying,\n distribution and modification follow.\n\n A.2 GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR\n   COPYING, DISTRIBUTION AND MODIFICATION\n\n 0. This License applies to any program or other work\n which contains a notice placed by the copyright holder\n saying it may be distributed under the terms of this\n General Public License. The \"Program\", below, refers to\n any such program or work, and a \"work based on the\n Program\" means either the Program or any derivative\n work under copyright law: that is to say, a work\n containing the Program or a portion of it, either\n verbatim or with modifications and/or translated into\n another language. (Hereinafter, translation is included\n without limitation in the term \"modification\".) Each\n licensee is addressed as \"you\".\n\n Activities other than copying, distribution and\n modification are not covered by this License; they are\n outside its scope. The act of running the Program is\n not restricted, and the output from the Program is\n covered only if its contents constitute a work based on\n the Program (independent of having been made by running\n the Program). Whether that is true depends on what the\n Program does.\n\n 1. You may copy and distribute verbatim copies of the\n Program's source code as you receive it, in any medium,\n provided that you conspicuously and appropriately\n publish on each copy an appropriate copyright notice\n and disclaimer of warranty; keep intact all the notices\n that refer to this License and to the absence of any\n warranty; and give any other recipients of the Program\n a copy of this License along with the Program.\n\n You may charge a fee for the physical act of\n transferring a copy, and you may at your option offer\n warranty protection in exchange for a fee.\n\n 2. You may modify your copy or copies of the Program or\n any portion of it, thus forming a work based on the\n Program, and copy and distribute such modifications or\n work under the terms of Section 1 above, provided that\n you also meet all of these conditions:\n\n a) You must cause the modified files to carry prominent\n notices stating that you changed the files and the date\n of any change.\n\n b) You must cause any work that you distribute or\n publish, that in whole or in part contains or is\n derived from the Program or any part thereof, to be\n licensed as a whole at no charge to all third parties\n under the terms of this License.\n\n c) If the modified program normally reads commands\n interactively when run, you must cause it, when started\n running for such interactive use in the most ordinary\n way, to print or display an announcement including an\n appropriate copyright notice and a notice that there is\n no warranty (or else, saying that you provide a\n warranty) and that users may redistribute the program\n under these conditions, and telling the user how to\n view a copy of this License. (Exception: if the Program\n itself is interactive but does not normally print such\n an announcement, your work based on the Program is not\n required to print an announcement.)\n\n These requirements apply to the modified work as a\n whole. If identifiable sections of that work are not\n derived from the Program, and can be reasonably\n considered independent and separate works in\n themselves, then this License, and its terms, do not\n apply to those sections when you distribute them as\n separate works. But when you distribute the same\n sections as part of a whole which is a work based on\n the Program, the distribution of the whole must be on\n the terms of this License, whose permissions for other\n licensees extend to the entire whole, and thus to each\n and every part regardless of who wrote it.\n\n Thus, it is not the intent of this section to claim\n rights or contest your rights to work written entirely\n by you; rather, the intent is to exercise the right to\n control the distribution of derivative or collective\n works based on the Program.\n\n In addition, mere aggregation of another work not based\n on the Program with the Program (or with a work based\n on the Program) on a volume of a storage or\n distribution medium does not bring the other work under\n the scope of this License.\n\n 3. You may copy and distribute the Program (or a work\n based on it, under Section 2) in object code or\n executable form under the terms of Sections 1 and 2\n above provided that you also do one of the following:\n\n a) Accompany it with the complete corresponding\n machine-readable source code, which must be distributed\n under the terms of Sections 1 and 2 above on a medium\n customarily used for software interchange; or,\n\n b) Accompany it with a written offer, valid for at\n least three years, to give any third party, for a\n charge no more than your cost of physically performing\n source distribution, a complete machine-readable copy\n of the corresponding source code, to be distributed\n under the terms of Sections 1 and 2 above on a medium\n customarily used for software interchange; or,\n\n c) Accompany it with the information you received as to\n the offer to distribute corresponding source code.\n (This alternative is allowed only for noncommercial\n distribution and only if you received the program in\n object code or executable form with such an offer, in\n accord with Subsection b above.)\n\n The source code for a work means the preferred form of\n the work for making modifications to it. For an\n executable work, complete source code means all the\n source code for all modules it contains, plus any\n associated interface definition files, plus the scripts\n used to control compilation and installation of the\n executable. However, as a special exception, the source\n code distributed need not include anything that is\n normally distributed (in either source or binary form)\n with the major components (compiler, kernel, and so on)\n of the operating system on which the executable runs,\n unless that component itself accompanies the\n executable.\n\n If distribution of executable or object code is made by\n offering access to copy from a designated place, then\n offering equivalent access to copy the source code from\n the same place counts as distribution of the source\n code, even though third parties are not compelled to\n copy the source along with the object code.\n\n 4. You may not copy, modify, sublicense, or distribute\n the Program except as expressly provided under this\n License. Any attempt otherwise to copy, modify,\n sublicense or distribute the Program is void, and will\n automatically terminate your rights under this License.\n However, parties who have received copies, or rights,\n from you under this License will not have their\n licenses terminated so long as such parties remain in\n full compliance.\n\n 5. You are not required to accept this License, since\n you have not signed it. However, nothing else grants\n you permission to modify or distribute the Program or\n its derivative works. These actions are prohibited by\n law if you do not accept this License. Therefore, by\n modifying or distributing the Program (or any work\n based on the Program), you indicate your acceptance of\n this License to do so, and all its terms and conditions\n for copying, distributing or modifying the Program or\n works based on it.\n\n 6. Each time you redistribute the Program (or any work\n based on the Program), the recipient automatically\n receives a license from the original licensor to copy,\n distribute or modify the Program subject to these terms\n and conditions. You may not impose any further\n restrictions on the recipients' exercise of the rights\n granted herein. You are not responsible for enforcing\n compliance by third parties to this License.\n\n 7. If, as a consequence of a court judgment or\n allegation of patent infringement or for any other\n reason (not limited to patent issues), conditions are\n imposed on you (whether by court order, agreement or\n otherwise) that contradict the conditions of this\n License, they do not excuse you from the conditions of\n this License. If you cannot distribute so as to satisfy\n simultaneously your obligations under this License and\n any other pertinent obligations, then as a consequence\n you may not distribute the Program at all. For example,\n if a patent license would not permit royalty-free\n redistribution of the Program by all those who receive\n copies directly or indirectly through you, then the\n only way you could satisfy both it and this License\n would be to refrain entirely from distribution of the\n Program.\n\n If any portion of this section is held invalid or\n unenforceable under any particular circumstance, the\n balance of the section is intended to apply and the\n section as a whole is intended to apply in other\n circumstances.\n\n It is not the purpose of this section to induce you to\n infringe any patents or other property right claims or\n to contest validity of any such claims; this section\n has the sole purpose of protecting the integrity of the\n free software distribution system, which is implemented\n by public license practices. Many people have made\n generous contributions to the wide range of software\n distributed through that system in reliance on\n consistent application of that system; it is up to the\n author/donor to decide if he or she is willing to\n distribute software through any other system and a\n licensee cannot impose that choice.\n\n This section is intended to make thoroughly clear what\n is believed to be a consequence of the rest of this\n License.\n\n 8. If the distribution and/or use of the Program is\n restricted in certain countries either by patents or by\n copyrighted interfaces, the original copyright holder\n who places the Program under this License may add an\n explicit geographical distribution limitation excluding\n those countries, so that distribution is permitted only\n in or among countries not thus excluded. In such case,\n this License incorporates the limitation as if written\n in the body of this License.\n\n 9. The Free Software Foundation may publish revised\n and/or new versions of the General Public License from\n time to time. Such new versions will be similar in\n spirit to the present version, but may differ in detail\n to address new problems or concerns.\n\n Each version is given a distinguishing version number.\n If the Program specifies a version number of this\n License which applies to it and \"any later version\",\n you have the option of following the terms and\n conditions either of that version or of any later\n version published by the Free Software Foundation. If\n the Program does not specify a version number of this\n License, you may choose any version ever published by\n the Free Software Foundation.\n\n 10. If you wish to incorporate parts of the Program\n into other free programs whose distribution conditions\n are different, write to the author to ask for\n permission. For software which is copyrighted by the\n Free Software Foundation, write to the Free Software\n Foundation; we sometimes make exceptions for this. Our\n decision will be guided by the two goals of preserving\n the free status of all derivatives of our free software\n and of promoting the sharing and reuse of software\n generally.\n\n A.3 NO WARRANTY\n\n 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE,\n THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT\n PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE\n STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER\n PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF\n ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT\n NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF\n THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE\n DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY\n SERVICING, REPAIR OR CORRECTION.\n\n 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR\n AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY\n OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE\n PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR\n DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR\n INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\n TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR\n LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE\n OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF\n THE POSSIBILITY OF SUCH DAMAGES.\n\n END OF TERMS AND CONDITIONS\n\n A.4 How to Apply These Terms to Your New Programs\n\n If you develop a new program, and you want it to be of\n the greatest possible use to the public, the best way\n to achieve this is to make it free software which\n everyone can redistribute and change under these terms.\n\n To do so, attach the following notices to the program.\n It is safest to attach them to the start of each source\n file to most effectively convey the exclusion of\n warranty; and each file should have at least the\n \"copyright\" line and a pointer to where the full notice\n is found.\n\n <one line to give the program's name and a brief idea\n of what it does.> Copyright (C) <year> <name of author>\n\n This program is free software; you can redistribute it\n and/or modify it under the terms of the GNU General\n Public License as published by the Free Software\n Foundation; either version 2 of the License, or (at\n your option) any later version.\n\n This program is distributed in the hope that it will be\n useful, but WITHOUT ANY WARRANTY; without even the\n implied warranty of MERCHANTABILITY or FITNESS FOR A\n PARTICULAR PURPOSE. See the GNU General Public License\n for more details.\n\n You should have received a copy of the GNU General\n Public License along with this program; if not, write\n to the Free Software Foundation, Inc., 59 Temple Place,\n Suite 330, Boston, MA 02111-1307 USA\n\n Also add information on how to contact you by\n electronic and paper mail.\n\n If the program is interactive, make it output a short\n notice like this when it starts in an interactive mode:\n\n Gnomovision version 69, Copyright (C) year name of\n author Gnomovision comes with ABSOLUTELY NO WARRANTY;\n for details type `show w'. This is free software, and\n you are welcome to redistribute it under certain\n conditions; type `show c' for details.\n\n The hypothetical commands `show w' and `show c' should\n show the appropriate parts of the General Public\n License. Of course, the commands you use may be called\n something other than `show w' and `show c'; they could\n even be mouse-clicks or menu items--whatever suits your\n program.\n\n You should also get your employer (if you work as a\n programmer) or your school, if any, to sign a\n \"copyright disclaimer\" for the program, if necessary.\n Here is a sample; alter the names:\n\n Yoyodyne, Inc., hereby disclaims all copyright interest\n in the program `Gnomovision' (which makes passes at\n compilers) written by James Hacker.\n\n <signature of Ty Coon>, 1 April 1989 Ty Coon, President\n of Vice\n\n This General Public License does not permit\n incorporating your program into proprietary programs.\n If your program is a subroutine library, you may\n consider it more useful to permit linking proprietary\n applications with the library. If this is what you want\n to do, use the GNU Library General Public License\n instead of this License.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$14HISTO": {"ttr": 9987, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $14Histo\n\n B.1 30/09/02 - Version 0.1\n\n * start,\n\n * indent XML according to the item level.\n\n B.2 04/10/02 - Version 0.2\n\n * handle multi-line COBOL item declaration,\n\n * ignore line numbers in columns 1-6 & 73-80,\n\n * ignore level 66, 77, 88 items,\n\n * stop if level is greater than 50,\n\n * stop if level is not numeric,\n\n * stop if some COBOL reserved words are found,\n\n * replace 9(4) by 9999 and X(3) by XXX, etc.\n\n B.3 06/11/02 - Version 0.3\n\n * handle OCCURS clause for group and elementary items.\n\n B.4 21/11/02 - Version 1.0\n\n * read line by line instead of reading all lines,\n\n * write line by line instead of writing all lines,\n\n * COBOL item names are capitalized.\n\n B.5 28/07/04 - Version 1.1 RC1\n\n * bug corrected : VALUES COBOL clauses are ignored,\n\n * make conversion in both directions from XML to TXT\n   and from TXT to XML,\n\n * COBOL levels are renumbered from 1 by 1 so that\n   indentation of XML is independent of absolute COBOL levels,\n\n * change input file parameter name to txt and output\n   file parameter name to XML,\n\n * added an \"\"x000 Records processed\" message,\n\n * added an error message if the file transfer of\n   TXT2XML has changed vertical bars (concatenation and\n   OR operator) to | ,\n\n * added a report of COBOL items: level, name, type,\n   start and length,\n\n * during conversion from XML to TXT, check that XML\n   numeric values are really numeric,\n\n * error force termination of the program with return\n   code set to 12.\n\n B.6 28/08/04 - Version 1.1\n\n * attributes of XML elements are now supported,\n\n * check that all COBOL items are filled during XML to\n   TXT conversion. A warning is issued if it's not the case,\n\n * during XML to text conversion, initialize the output\n   record with the default values specified in the\n   VALUES clause of the COBOL copybook,\n\n * support of CDATA,\n\n * support of escaped chars like &lt; for \"<\",\n\n * support of element content on more than one line,\n\n * support of comments, declaration, ... on more than\n   one line,\n\n * ignore XML attributes : xml:space, xml:language, ...\n\n B.7 20/09/04 - Version 1.15\n\n * TXT2XML runs on almost any platform with Regina Rexx\n\n * XML Entity declaration are not supported,\n\n * new parameter PREFIX that suppress constant part of\n   an item name. I.e. if prefix is set to COBOL- then\n   the COBOL item COBOL-ITEM-01 will be translated to\n   <ITEM-01> during text to XML conversion.\n\n * bug corrected : during text to XML conversion,\n   missing tags are now correctly handled.\n\n B.8 05/11/04 - Version 1.20\n\n * Support of COMP-3, COMP-4, BINARY and PACKED-DECIMAL clauses.\n\n * Support of SIGN clause even for group items.\n\n * bug corrected under MVS : allocation of a dataset\n   with BLOCK as units works correctly now.\n\n * New parameter VERBOSE to replace NOCONFIRM parameter\n   which is deprecated.\n\n * Generation of internal and external DTD based on the\n   COBOL copybook during Text to XML conversion.\n\n B.9 05/03/05 - Version 1.25\n\n * New JAVA GUI front-end for non-mainframe platforms\n\n * Bug corrected : COBOL picture clauses like 'PIC\n   99V999' are now correctly handled.\n\n * New web site : http://txt2xml-rexx.sourceforge.net/\n\n * New rexx script to generate a COBOL copybook from an\n   XML file : XML2COB\n\n B.10 Road map\n\n * Generation of XSD files based on COBOL copybooks and\n   vice-versa.\n\n * Integration of XML2COB into TXT2XML.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$15INTER": {"ttr": 10241, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $15Inter\n\n\n   XML\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] XML.org                                                                                   ] http://www.xml.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Extensible Markup Language (XML)                                                          ] http://www.w3.org/XML/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] The XML FAQ                                                                               ] http://www.ucc.ie/xml/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] XML.com: XML From the Inside Out -- XML development, XML resources, XML specifications    ] http://www.xml.com\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] ZVON.org                                                                                  ] http://www.zvon.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   REXX\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] The Rexx Language Association                                                             ] http://www.rexxla.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] IBM Rexx home page                                                                        ] http://www-306.ibm.com/software/awdtoo\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Reginald REXX Developer's Page for Windows                                                ] http://www.borg.com/~jglatt/rexx/regin\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Regina - Cross-platform Rexx Interpreter                                                  ] http://regina-rexx.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Rexx Anywhere|                                                                            ] http://www.planetmvs.com/rexxanywhere/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Style Guide for Rexx                                                                      ] http://www.neilhancock.co.uk/Computers\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] FTE Text Editor                                                                           ] http://fte.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   COBOL\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] IBM COBOL for OS/390 & VM V2R1 (IGYSH208)                                                 ] http://publibz.boulder.ibm.com/cgi-bin\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] IBM COBOL - Family Overview - IBM Software                                                ] http://www-306.ibm.com/software/awdtoo\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Kasten COBOL Page: Coding Style and Techniques                                            ] http://home.swbell.net/mck9/cobol/cobo\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] The TinyCOBOL project home page                                                           ] http://tiny-cobol.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   Thinlet, Java & XUL\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Java home                                                                                 ] http://java.sun.com\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Thinlet home                                                                              ] http://thinlet.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Thing                                                                                     ] http://thing.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] XUL planet                                                                                ] http://www.xulplanet.com/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   Other\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] TCP/IP and Mail Tools by Lionel B. Dyck                                                   ] http://www.lbdsoftware.com/tcpip.html\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Typo The cover page was made with Typo generator.generator                                ] http://mtd.nussnet.at/typo/index2.php\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] LyX - The Document This document was written with Lyx.Processor                           ] http://www.lyx.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] SDS - Dictionary of the Mainframe Most of glossary definitions come from this site.World  ] http://www.sdsusa.com/dictionary/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$16GLOSS": {"ttr": 10243, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " Chapter : $16Gloss\n\n Batch An accumulation of data brought together for\n processing or transmission, usually unattended. Less\n formally, the processing of such data, as opposed to\n on-line processing where an user is present to respond\n interactively, one record at a time.\n\n Dataset An unit of data storage and retrieval\n consisting of one or more data records. Outside of the\n IBM mainframe environment, people call them files.\n Dataset can be partioned (i.e. containing multiple\n files) or sequential (i.e. containing only data).\n\n DBCS stands for Double Byte Character Set. A mainframe\n way of coding non-latin character sets (i.e. chinese,\n japanese, etc).\n\n DTD Document Type Definition. This is a specific markup\n language, written using SGML.\n\n ISPF/PDF ISPF/Program Development Facility. ISPF\n facility providing access to application development\n services for end-users and programmers. Incorporates C\n and REXX programming support, and some support for\n programmable workstations.\n\n GUI stands for Graphical User Interface. A GUI\n application must be installed on each PC and makes\n extensive use of the mouse. By opposition, TUI is Text\n User Interface. A TUI application needs a connection\n program called an emulator and use only the keyboard to\n input data. BUI stands for Browser User Interface. A\n BUI program is an intranet or extranet application.\n\n HLQ High Level Qualifier. The left part of a dataset name.\n\n IVP Installation Verification Procedure. A set of tests\n to check if a product was correctly installed.\n\n JCL Job Control Language. The language used to describe\n the steps of a batch job (files to be used, programs to\n be run, etc). A generic term, hijacked by IBM to refer\n to the batch control languages for its System/360\n operating systems. Then, as now, z/OS and VSE/ESA JCL\n is a clumsy and cumbersome system that is hard to\n learn, full of inconsistencies, and avoided by anyone\n with an iota of common sense and access to an\n alternative. The only excuse for it comes from one of\n the original OS/360 developers: they ran out of time to\n build a JCL interpreter, so just used the Assembler\n macro processor, and built a language (JCL) around it.\n\n Mainframe Mainframes used to be defined by their size,\n and they can still fill a room, cost millions, and\n support thousands of users. But now a mainframe can\n also run on a laptop and support two users. So today's\n mainframes are best defined by their operating systems:\n Unix and Linux, and IBM's z/OS, OS/390, MVS, VM, and\n VSE. Mainframes combine four important features:\n\n   * Reliable single-thread performance, which is\n     essential for reasonable operations against a\n     database.\n\n   * Maximum I/O connectivity, which means mainframes\n     excel at providing for huge disk farms.\n\n   * Maximum I/O bandwidth, so connections between\n     drives and processors have few choke-points.\n\n   * Reliability--mainframes often allow for \"graceful\n     degradation\" and service while the system is running.\n\n Member A file of a partitioned dataset.\n\n MVS Multiple Virtual Storage. In z/OSs long history,\n MVS has the honor of being its name for the longest\n period: about two decades. Admittedly, it had many\n suffixes during those years: MVS/SP, MVS/370, MVS/XA\n and MVS/ESA. Many users believed that MVS stood for Man\n Versus System.\n\n OS/390 The replacement for MVS/ESA announced at the end\n of 1995. It was an attempt to repackage MVS in a way\n that allowed IBM to offer attractive pricing at the\n lower levels, encourage developers to write\n applications in a shorter period of time, and generally\n improve the image of an operating system that is still\n largely identified with big iron and huge IT budgets.\n It also reduced IBMs testing costs dramatically because\n there was no longer a need to test every combination of\n supported releases of what were now components instead\n of separate system software products. This approach was\n first tested with DFSMS three and a half years earlier.\n In the longer term, OS/390 shielded MVS behind a layer\n of middleware that disguised many of the proprietary\n functions of MVS and provided users with common\n services across all the major IBM platforms. Replaced\n by z/OS on October 3, 2000, along with the introduction\n of eserver, including a complete line of mainframes\n called zSeries 900. Version 2 Release 10 was the last\n release of OS/390 and first became available September\n 29, 2000.\n\n Panel IBM speak for screen layout.\n\n REXX Restructured EXtended eXecutor language. A command\n procedure programming language which was initially\n available on z/VM only, replacing EXEC and EXEC2, but\n later became an SAA standard. Although SAA is a distant\n memory, REXX availability in z/OS TSO has seen it\n replace CLIST as the tool of choice, especially given\n the fact that TSO, and therefore REXX, can be run in\n batch. REXX is an effective programming language in its\n own right with powerful string processing facilities\n and is used to drive certain program products, notably\n GDDM. REXX is also available in VSE/ESA, AIX1, OS/2,\n Linux and Windows. Although normally interpretive, a\n REXX compiler and library is available for z/OS and\n z/VM. REXX for CICS is available for z/OS and VSE/ESA;\n it consists of REXX Development System and REXX\n Development System. Object REXX is available for\n Windows, OS/2, AIX, and Linux for Intel and zSeries 900.\n\n Shell Generic term with a lot of different meanings.\n Early Internet service often involved an interface,\n called a Shell, on a host computer, rather than a\n direct connection to the Internet. And there was the\n IBM DOS Shell, a menu driven interface to basic PC-DOS\n functionality. Shell is also widely used in the expert\n systems and Unix communities, to mean software\n providing a skeleton which can be customized to produce\n a specific application.\n\n TSO Time Sharing Option. These days, everyone just says\n TSO when they mean TSO/E. Back in the 1980s, TSO was\n included with MVS/XA and you had to pay extra for\n TSO/E. Well worth the money given that TSO left you\n stranded below the 16MB line.\n\n TSO/E Time Sharing Option/Extensions. An element of\n z/OS that provides an on-line interactive environment\n for programmers and users. Best known for the ISPF/PDF\n environment that runs on TSO/E. Can also be used to\n test batch programs.\n\n Two's\n\n complement is a method of signifying negative numbers\n in binary. It is also an operation which may be applied\n to positive binary values in order to perform\n subtraction using the method of complements,\n effectively allowing subtraction of one binary number\n from another using only the addition operation.\n\n XUL The XML User Interface Language (XUL) is a markup\n language for describing user interfaces. With XUL you\n can create rich, sophisticated cross-platform web\n applications easily.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TXT2XML": {"ttr": 10497, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " <Fichier graphique : image/txt2xml_107_A4.jpg>\n\n\n TXT2XML : Conversion from text to XML and vice-versa\n using a COBOL  copybook as reference.\n\n XML2COB : Generation of a COBOL copybook using an XML\n file as reference\n\n Version 1.25copyright - see appendix A\n\n Table des Mati\u00e8res\n\n Chapter 1 Introduction\n Chapter 2 Principles of conversion\n     2.1 COBOL copybook analysis\n         2.1.1 Cleaning the copybook\n         2.1.2 Extracting the meta-data\n         2.1.3 Renumbering the COBOL item levels\n     2.2 Text to XML conversion\n     2.3 XML to text conversion\n Chapter 3 Signed and binary data\n     3.1 Warning\n     3.2 COBOL compilers\n     3.3 Internal representation\n     3.4 Low-values, high-values and spaces\n     3.5 Functions\n Chapter 4 Installation\n     4.1 Downloading TXT2XML\n     4.2 Under MVS\n         4.2.1 Installation\n         4.2.2 Tests\n         4.2.3 Post-installation\n     4.3 Under Windows\n         4.3.1 Regina or Reginald Rexx\n         4.3.2 Java\n         4.3.3 Tests\n     4.4 Under Unix/Linux and other platforms\n         4.4.1 Regina\n         4.4.2 Java\n         4.4.3 Tests\n Chapter 5 Syntax\n     5.1 Mandatory parameters\n         5.1.1 TXT txt-file\n         5.1.2 COB cob-file\n         5.1.3 XML xml-file\n         5.1.4 FORMAT format\n     5.2 Optional parameters\n         5.2.1 BROWSE\n         5.2.2 VERBOSE\n         5.2.3 DTD dtd-file\n         5.2.4 PREFIX prefix\n Chapter 6 Examples\n     6.1 MVS\n         6.1.1 ISPF\n         6.1.2 Batch\n     6.2 Windows\n     6.3 Unix/Linux\n Chapter 7 Introduction\n Chapter 8 Principles of generation\n     8.1 The meta-data\n     8.2 The COBOL copybook generation\n     8.3 COBOL level\n     8.4 Constraints\n Chapter 9 Installation\n Chapter 10 Syntax\n     10.1 Mandatory parameters\n         10.1.1 COB cob-file\n         10.1.2 XML xml-file\n     10.2 Optional parameters\n         10.2.1 PREFIX prefix\n         10.2.2 LEVEL01\n         10.2.3 ROUND\n         10.2.4 BROWSE\n         10.2.5 VERBOSE\n Chapter 11 Examples\n     11.1 MVS\n         11.1.1 ISPF\n         11.1.2 Batch\n     11.2 Windows\n     11.3 Unix/Linux\n Chapter 12 The Graphical User Interface\n     12.1 Introduction\n     12.2 Installation\n     12.3 Syntax\n     12.4 Example\n Appendix A License\n     A.1 Preamble\n     A.2 GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n     A.3 NO WARRANTY\n     A.4 How to Apply These Terms to Your New Programs\n Appendix B History & Road map\n     B.1 30/09/02 - Version 0.1\n     B.2 04/10/02 - Version 0.2\n     B.3 06/11/02 - Version 0.3\n     B.4 21/11/02 - Version 1.0\n     B.5 28/07/04 - Version 1.1 RC1\n     B.6 28/08/04 - Version 1.1\n     B.7 20/09/04 - Version 1.15\n     B.8 05/11/04 - Version 1.20\n     B.9 05/03/05 - Version 1.25\n     B.10 Road map\n Appendix C Internet resources\n Appendix D Glossary\n\n\n\n <par:TXT2XML>T X T 2 X M L\n\n <cha:Introduction>Introduction\n\n COBOL, a forty years old computer language, and XML a\n new revolutionary format, seems to as near as the earth\n and the moon. However, if you look any further, you\n will notice some common concepts :\n\n +-----------------------------------------+------------------------------+--------------------------------+\n ]                                         ]             XML              ]             COBOL              ]\n +-----------------------------------------+------------------------------+--------------------------------+\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Hierarchy of data                       ]   Root and child elements    ] level 01 and other level items ]\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Indentation for a better visualization  ]            \\surd             ]             \\surd              ]\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Structured data                         ] Simple and complex elements  ]    Items and grouping items    ]\n +-----------------------------------------+------------------------------+--------------------------------+\n ] Occurrence of data                      ]     Unique and multiple      ]         OCCURS clause          ]\n +-----------------------------------------+------------------------------+--------------------------------+\n\n\n The need to exchange data in XML between servers is\n continuously increasing and, in each mainframe around\n the world, there are plenty of COBOL copybooks and text\n files. So, was born the idea of TXT2XML : a bridge\n between the common concepts of COBOL and XML. It's not\n a GUIHowever, starting with version 1.25, a GUI front-end\n has been developed. See chapter \u00a2cha:The-Graphical-User! for more details.\n  tool, it's a Rexx script (for more info on Rexx see\n appendix \u00a2cha:Internet-resources!) running in a DOS command interface for the\n Windows users, a shell for the Unix users, ISPF or JCL\n for the mainframe users.\n\n TXT2XML is not an XML parser written in Rexx, nor will\n support the entire XML specification. Some COBOL\n clauses are also not supported (like REDEFINES,\n DEPENDING, ... ). TXT2XML works in both directions,\n i.e. it can convert XML files to text files and\n vice-versa. The COBOL copybook is always mandatory to\n perform the conversion, because :\n\n * During XML to text conversion, XML element names are\n   checked against the COBOL item names. For example, if\n   there is an XML element like <cobol_item_01>, there\n   must be an item like COBOL-ITEM-01 in the COBOL copybook.\n\n * During text to XML conversion, the COBOL copybook\n   item names are used to build the XML elements.\n\n * During XML to text conversion, if a COBOL item is\n   numeric, the XML content is checked to see if it's\n   also numeric. Otherwise conversion will fail.\n\n * ...\n\n TXT2XML was therefore developed primarily to convert\n data files typically used on a mainframe. TXT2XML works\n only with well-formed XML documents and valid COBOL\n copybooks. TXT2XML will never check for COBOL syntax\n errors or missing XML closing tags. TXT2XML generates\n 100 % compatible and well-formed XML files, but it's\n still your responsibility to validate them against a\n DTD with an XML parser.\n\n TXT2XML was originally written on an IBM mainframe\n running OS/390 V2R10. But, starting with version 1.15,\n TXT2XML should also run on the following platforms :\n\n * Linux,\n\n * FreeBSD,\n\n * Solaris,\n\n * AIX,\n\n * HP-UX,\n\n * OS/2,\n\n * eCS,\n\n * DOS,\n\n * Win9x/Me/NT/2k/XP,\n\n * Amiga,\n\n * AROS,\n\n * QNX4.x,\n\n * QNX6.x,\n\n * BeOS,\n\n * MacOS X,\n\n * EPOC32,\n\n * AtheOS,\n\n * OpenVMS,\n\n * SkyOS,\n\n * OpenEdition.\n\n As it's impossible to run all those OS, TXT2XML was\n tested successfully on :\n\n * Windows 2K,\n\n * Linux Mandrake 10.0,\n\n * MVS (OS/390 V2R10).\n\n It should work without problems on the other platformswith the exception of binary and packed data..\n To run TXT2XML on non-mainframe platforms, you must\n first install Regina Rexx or for windows only, Reginald\n (see chapter \u00a2cha:Installation!). Should you succeed or encounter\n problems in running TXT2XML on a non-tested platform,\n please send an e-mail to :\n\n sunuraxi@users.sourceforge.net\n\n TXT2XML is released under the GPL license (see appendix \u00a2cha:License!).\n\n <cha:Principles-of-conversion>Principles of conversion\n\n As said early, conversion occurs only if a valid COBOL\n copybook is present. The first step in the conversion\n process is the ...\n\n 2.1 <sec:COBOL-copybook-analysis>COBOL copybook analysis\n\n The analysis take place in 3 phases :\n\n 2.1.1 <sub:Cleaning-the-copybook>\"Cleaning\" the copybook\n\n In this phase, the copybook is read and :\n\n * comments are skipped,\n\n * Multi-line COBOL declaration are concatenated in one line.\n\n * PICTURE clauses are replaced by PIC,\n\n * SIGN clauses are ignored,\n\n * IS clauses are ignored,\n\n * NATIVE clauses are skipped,\n\n * X(4) and 9(6) symbols are replaced respectively by\n   XXXX and 999999,\n\n * Final dot of COBOL declarations is suppressed,\n\n * COBOL declarations are capitalized.According to IBM's COBOL Language Reference (IGYLR204),\n paragraph 1.1.1.1 COBOL Words with Single-Byte\n Characters : \"Each lowercase letter is considered to be\n equivalent to its corresponding uppercase letter,\n except in non numeric literals\"\n\n 2.1.2 <sub:Extracting-the-meta-data>Extracting the meta-data\n\n In this phase, the following meta-data are extracted :\n\n +--------------------+--------------------------------------------------------------+\n ] Meta-data          ] Usage                                                        ]\n +--------------------+--------------------------------------------------------------+\n +--------------------+--------------------------------------------------------------+\n ] COBOL level        ] To indent XML element                                        ]\n +--------------------+--------------------------------------------------------------+\n ] Name               ] To create or check XML element tags                          ]\n +--------------------+--------------------------------------------------------------+\n ] Type of data       ] To check XML data during text to XML conversion              ]\n +--------------------+--------------------------------------------------------------+\n ] Sign               ] When converting signed and/or binary data                    ]\n +--------------------+--------------------------------------------------------------+\n ] Sign position      ] When converting numeric data                                 ]\n +--------------------+--------------------------------------------------------------+\n ] Starting position  ] To create the XML content or a text record                   ]\n +--------------------+--------------------------------------------------------------+\n ] Length             ] To create the XML content or a text record                   ]\n +--------------------+--------------------------------------------------------------+\n ] Default value      ] To initialize a text record when converting from XML to text ]\n +--------------------+--------------------------------------------------------------+\n\n\n FILLER clauses are not skipped. They are used to\n compute the starting positions of all COBOL items. They\n never appears in the XML file when the text to XML\n conversion process ends. The copybook is also checked\n for unsupported COBOL clauses :\n\n * REDEFINES\n\n * DEPENDING ON\n\n * COMPUTATIONAL-1, COMPUTATIONAL-2, COMPUTATIONAL-5,\n   COMP-1, COMP-2, and COMP-5.\n\n * POINTER, PROCEDURE-POINTER and FUNCTION-POINTER\n\n * OBJECT REFERENCE\n\n * NATIONAL\n\n * DISPLAY-1DBCS items are not supported\n\n * P symbol (decimal scaling position)\n\n * INDEX\n\n * level 66, 77, 88,Those levels generate only a warning message and\n conversion continues.\n\n * Non-numeric COBOL levels or COBOL levels greater than 49,\n\n * DBCS picture symbols.\n\n and for partially supported COBOL clauses :\n\n * OCCURS for elementary and group item with only one dimension,\n\n * VALUES except for QUOTES and NULL clauses.\n\n 2.1.3 <sub:Renumbering-the-COBOL>Renumbering the COBOL item levels\n\n As COBOL item levels are used to indent tags during\n text to XML conversion, they are internally renumbered\n to have a smoother indentation. For example, the\n following COBOL copybooks :\n\n A sample COBOL copybook\n\n 01 COBOL-ITEM-01.\n\n   05 FILLER PIC IS X.\n\n   05 COBOL-ITEM-02 PIC IS X(5).\n\n\n\n and\n\n Same sample COBOL copybook with different levels\n\n 10 COBOL-ITEM-01.\n\n   20 FILLER PIC IS X.\n\n   20 COBOL-ITEM-02 PIC IS X(5).\n\n\n\n will always give the same indentation, like in the\n following XML file :\n\n Resulting XML file after conversion\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <DATA>\n\n   <COBOL_ITEM_01>\n\n     <COBOL_ITEM_02>12345</COBOL_ITEM_02>\n\n   </COBOL_ITEM_01>\n\n </DATA>\n\n The original COBOL copybook is never modified by\n TXT2XML and if the conversion ends without errors, a\n report of this analysis is printed.\n\n 2.2 <sec:Text-to-XML>Text to XML conversion\n\n This is the easiest conversion. An XML header (<?xml\n .... ?>) is first created. Then, one text record is\n read, item data is extracted from the current text\n record and the XML elements and their content are\n written one by one. The conversion process continues\n until the end of the text file. The XML elements can be\n classified in 3 categories :\n\n * Root : this element must be unique in the whole XML\n   file. That's why, DATA, a COBOL reserved word, was\n   chosen as root element name. It has no equivalent in\n   the COBOL copybook.\n\n * First child : it appears each time a text record is\n   read. It corresponds to the level of the first COBOL\n   item in the copybook. As this first child element\n   will include all the other XML elements, this COBOL\n   item needs to be a grouping item,with the lowest\n   level and ideally with a unique occurrence.\n\n * Other child elements: The other XML elements.\n\n All of them are built using the following rules :\n\n * The name of the XML element is the capitalized COBOL\n   item name with dashes (\"-\") translated to underscore (\"_\"\n   ). For example : COBOL-ITEM-01 will become <cobol_item_01>,\n\n * Content of the XML element is extracted from the\n   current text record (using the starting position and\n   the length computed in section \u00a2sec:COBOL-copybook-analysis!). Characters are\n   escaped if necessary& < > \" and ' need to be converted to &amp; &lt; &gt;\n &quot; &apos; respectively.\n   ,\n\n * FILLER clauses are skipped.\n\n * Opened XML tags are closed :\n\n   * immediately after the content of an XML element,\n\n   * at the end of each COBOL grouping item,\n\n   * at then end of the text record,\n\n   * at the end of the text file.\n\n If requested, TXT2XML can create a DTD (Document Type\n Definition), based on the COBOL copybook, which\n describes the XML structure. This DTD can be internal :\n\n Internal DTD\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <|DOCTYPE DATA \u00a2\n\n   <|ELEMENT NUMERIC-TYPES (EXTERNAL-DECIMAL, BINARIES,\n\n     INTERNAL_DECIMAL)>\n\n   <|ELEMENT EXTERNAL-DECIMAL (EXT-DEC-UNSIGNED,\n\n     EXT-DEC-SIGNED-NEGATIVE, EXT-DEC-SIGNED-POSITIVE,\n\n     EXT-DEC-SIGN-LEADING-NEG, EXT-DEC-SIGN-LEADING-POS,\n\n     EXT-DEC-SIGN-TRAILING-NEG,\n     EXT-DEC-SIGN-TRAILING-POS,\n\n     EXT-DEC-SIGN-SEP-LEAD-NEG,\n     EXT-DEC-SIGN-SEP-LEAD-POS,\n\n     EXT_DEC_SIGN_SEP_TRAIL_NEG, EXT_DEC_SIGN_SEP_TRAIL_POS)>\n\n   <|ELEMENT EXT_DEC_UNSIGNED (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGNED_NEGATIVE (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGNED_POSITIVE (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_LEADING_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_LEADING_POS (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_TRAILING_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_TRAILING_POS (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_LEAD_POS (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_NEG (#PCDATA)>\n\n   <|ELEMENT EXT_DEC_SIGN_SEP_TRAIL_POS (#PCDATA)>\n\n   <|ELEMENT BINARIES (BINARY-UNSIGNED,\n   BINARY-SIGNED-POSITIVE,\n\n     BINARY_SIGNED_NEGATIVE)>\n\n   <|ELEMENT BINARY_UNSIGNED (#PCDATA)>\n\n   <|ELEMENT BINARY_SIGNED_POSITIVE (#PCDATA)>\n\n   <|ELEMENT BINARY_SIGNED_NEGATIVE (#PCDATA)>\n\n   <|ELEMENT INTERNAL-DECIMAL (INT-DEC-UNSIGNED,\n   INT-DEC-SIGNED-POS,\n\n     INT_DEC_SIGNED_NEG)>\n\n   <|ELEMENT INT_DEC_UNSIGNED (#PCDATA)>\n\n   <|ELEMENT INT_DEC_SIGNED_POS (#PCDATA)>\n\n   <|ELEMENT INT_DEC_SIGNED_NEG (#PCDATA)>\n\n !>\n\n <DATA>\n\n   <NUMERIC_TYPES>\n\n ...\n\n or external :\n\n XML file with an external DTD reference\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"no\" ?>\n\n <|DOCTYPE DATA SYSTEM \"./sample/dtd/binary\">\n\n <DATA>\n\n   <NUMERIC_TYPES>\n\n   ...\n\n 2.3 <sec:XML-to-text>XML to text conversion\n\n This conversion is a little bit more difficult and even\n in some cases impossible. Remember, TXT2XML implements\n only a subset of XML and COBOL. For example, this XML\n file : Nonconvertible XML file\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <weather>\n\n   <city name=\"Los Angeles\">\n\n     <sky>Blue</sky>\n\n     Hot and sunny\n\n   </city>\n\n </weather>\n\n In this file, the XML element city is a complex one. It\n includes the simple element sky but also a content (Hot\n and sunny). The corresponding COBOL copybook would be\n something like :\n\n Corresponding COBOL copybook\n\n 01 city pic x(20).\n\n   03 name pic x(20).\n\n   03 sky pic x(8).\n\n This is impossible in COBOL : a grouping item can't\n have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)\n paragraph 5.3.11 PICTURE Clause : \"The PICTURE clause\n can be specified only at the elementary level.\"\n\n So, not all the XML files can be converted. But, with a\n valid COBOL copybook, the XML file is read one line at\n the time and data is extracted using the following\n rules :\n\n * Mixed XML content is not supported,\n\n * All the XML tags and contents may expand on more than\n   one line,\n\n * XML headers starting with <?xml and ending with ?>\n   are skipped,\n\n * XML entities starting with <|ENTITY and ending with >\n   are not supported. If such a declaration is found,\n   the conversion process is aborted,\n\n * XML internal and external document type declaration\n   starting with <|DOCTYPE and ending with either > or\n   !> are skipped,\n\n * XML comments starting with <|-- and ending with -->\n   are skipped,\n\n * The first child element is then searched. Each time\n   an XML first child closing tag is found, a text\n   record is written and a new text record is\n   initialized with default values from the COBOL copybook,\n\n * Attributes of the first child element are supported.\n   But, attributes of the root element are ignored.\n\n * Each XML element, even without a content, must have\n   an equivalent in the COBOL copybook. To find it, the\n   XML element name is capitalized and underscores are\n   translated to dashes. For example : <cobol_item_01>\n   will become COBOL-ITEM-01 and is searched in the\n   COBOL copybook,\n\n * Each XML attribute may have an equivalent in the\n   COBOL copybook,\n\n * XML attributes like xml:space are ignored,\n\n * Each time a content is found, it's length and data\n   type are checked against the characteristics of the\n   corresponding COBOL item. Numeric items are right\n   justified and left zero filled. If necessary\n   characters are escaped.&amp; &lt; &gt; &quot; &apos; are converted to & < > \"\n and ' respectively or content is extracted from CDATA\n section starting with <|\u00a2CDATA\u00a2 and ending with !!>\n\n * If some XML elements or attributes are missing,\n   conversion continues with the new element found.\n   Missing COBOL items are left to their default value\n   (see section \u00a2sec:COBOL-copybook-analysis!).\n\n * Empty XML elements, even with attributes, are supported.\n\n <cha:Signed-and-binary>Signed and binary data\n\n 3.1 Warning\n\n Signed an binary data are hardly bound with the\n operating system and the hardware running TXT2XML. On a\n PC, binary (and not numeric and packed-decimal) data is\n stored in little endian mode. It means that the\n low-order byte of the number is stored in memory at the\n lowest address, and the high-order byte at the highest\n address. On a IBM MVS mainframe, binary data are stored\n in the opposite mode : big endian. For example :\n\n +-------------------+---------------------+------------------+\n ] Hexadecimal data  ] Little endian (PC)  ] Big endian (MVS) ]\n +-------------------+---------------------+------------------+\n ]  x'01 02 03 \"04   ]    04 03 02 01      ]   01 02 03 04    ]\n +-------------------+---------------------+------------------+\n\n\n   Conclusion : although TXT2XML runs on multiple\n   platforms, you should always run TXT2XML on the\n   platform where you will use the binary and/or signed\n   converted data.\n\n So, forget the idea to run TXT2XML on one platform (i.e\n a PC running Windows) and to transfer the converted\n file on another platform (i.e. an IBM mainframe). File\n transfer means code page (character set) translation\n which binary, packed-decimal and even numeric data\n don't support. Don't try also to convert a pure EBCDIC\n file on a non-mainframe platform : TXT2XML will never\n find the XML element delimiters '<', '/' and '>' or the\n COBOL equivalent of an XML element. In all cases,\n conversion will stop with an error message.\n\n 3.2 COBOL compilers\n\n Even if COBOL is standardized, internal representation\n of signed and binary data may differ from a compiler to\n another, from a platform to another one, etc. That's\n why, a small COBOL program was written to create\n binary, packed-decimal and numeric reference data. On\n IBM mainframe running MVS, compiling it is easy, using\n a one of the \"Enterprise COBOL for Z/OS' product family.\n But on Windows and Linux/Unix, there are few compilers,\n with a active project status, available. On of them is\n : Tiny-Cobol that you can download from :\n\n http://tiny-cobol.sourceforge.net/\n\n Tiny-Cobol runs on :\n\n * BeOS,\n\n * FreeBSD,\n\n * Linux,\n\n * Windows (with MinGW or Cygwin).\n\n 3.3 Internal representation\n\n The results of execution of this program on the 3\n platforms is showed below :\n\n Binary, packed-decimal and numeric internal representation\n\n                                                                          +----------------------------------------------------+\n                                                                          ]              Internal representation               ]\n -------------------------------------------------------------------------+----------------------------------------------------+\n ] Numeric type      ] COBOL clauses                             ] Value  ]            MVS  ]     Linux/Unix  ]        Windows ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n +-------------------+---------------------------------------------------------------------------------------------------------+\n ] External decimal  ]                                                                                                         ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC 9999 DISPLAY                          ]  1234  ]    F1 F2 F3 F4  ]    31 32 33 34  ]    31 32 33 34 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY                         ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN LEADING            ] +1234  ]    C1 F2 F3 F4  ]   41 32 33 34   ]   41 32 33 34  ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]    D1 F2 F3 F4  ]    D1 32 33 34  ]   D1 32 33 34  ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN TRAILING           ] +1234  ]    F1 F2 F3 C4  ]    31 32 33 44  ]    31 32 33 44 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]    F1 F2 F3 D4  ]    31 32 33 D4  ]    31 32 33 D4 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN LEADING SEPARATE   ] +1234  ] 4E F1 F2 F3 F4  ] 4E 31 32 33 34  ] 4E 31 32 33 34 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ] 60 F1 F2 F3 F4  ] 60 31 32 33 34  ] 60 31 32 33 34 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 DISPLAY SIGN TRAILING SEPARATE  ] +1234  ] F1 F2 F3 F4 4E  ] 31 32 33 34 4E  ] 31 32 33 34 4E ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ] F1 F2 F3 F4 60  ] 31 32 33 34 60  ] 31 32 33 34 60 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n +-------------------+---------------------------------------------------------------------------------------------------------+\n ] Binary            ]                                                                                                         ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC 9999 COMP-4                           ]  1234  ]          04 D2  ]          D2 04  ]          D2 04 ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 COMP-4                          ] +1234  ]          04 D2  ]          D2 04  ]          D2 04 ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]          FB 2E  ]          2E FB  ]          2E FB ]\n +-------------------+---------------------------------------------------------------------------------------------------------+\n ] Packed-decimal    ]                                                                                                         ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC 9999 COMP-3                           ]  1234  ]       01 23 4F  ]       01 23 4F  ]       01 23 4F ]\n +-------------------+-------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                   ] PIC S9999 COMP-3                          ] +1234  ]       01 23 4C  ]       01 23 4C  ]       01 23 4C ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n ]                                                               ] -1234  ]       01 23 4D  ]       01 23 4C  ]       01 23 4C ]\n +---------------------------------------------------------------+--------+-----------------+-----------------+----------------+\n\n\n 3.4 Low-values, high-values and spaces\n\n By default, space-only contents are ignored in XML. To\n preserve them, they are included in a CDATA tag.\n High-values (x'FF') and low-values (x'00') are escaped\n : i.e. converted in a tag like &#0; or &#255; respectively.\n\n 3.5 Functions\n\n To convert text data to and from binary, packed-decimal\n and numeric data, six functions have been written :\n\n  txt2bin\n\n It converts text data to binary. The parameters of the\n function are\n\n * text is the text to convert.\n\n * length is the length in bytes of binary data. May\n   only be 2, 4 or 8.\n\n * signed is a flag to tell that the binary item is\n   signed. May only be \"Y\" or \"N\".\n\n If text data is signed and negative, then text data is\n converted to binary and two's complement is performed.\n Returned data is justified to the right and padded with\n x'00' or x'FF' according to the sign. Finally, binary\n data is reversed for little endian systems.\n\n  txt2pack\n\n It converts text data to packed-decimal. The parameters\n of the function are :\n\n * text is the text to convert.\n\n * length is the length in bytes of packed-decimal data.\n\n * signed is a flag to tell that the packed-decimal item\n   is signed. May only be \"Y\" or \"N\".\n\n If necessary, a leading zero is added to the\n packed-decimal data so that the number of half-bytes is\n always odd. Returned data is justified to the right and\n padded with x'00'.\n\n  txt2num\n\n It converts text data to numeric. The parameters of the\n function are :\n\n * text is the text to convert.\n\n * length is the length in bytes of numeric data.\n\n * signed is a flag to tell that the numeric item is\n   signed. May only be \"Y\" or \"N\".\n\n * sign position is a flag to tell where the sign is\n   located. Allowed values are : \"\" (empty quotes - for\n   unsigned data), \"L\" (for LEADING sign), \"T\" (for\n   TRAILING sign), \"LS\" (for LEADING SEPARATE sign) and\n   \"TS\" (for TRAILING SEPARATE sign).\n\n Non-numeric data, like $ or '.', is converted in\n hexadecimal. Returned data is justified to the right\n and padded with zeroes.\n\n  bin2txt\n\n It converts binary data to text. The parameters of the\n function are\n\n * bin is the binary to convert.\n\n * length is the length in bytes of binary data. May\n   only be 2, 4 or 8.\n\n * signed is a flag to tell that the binary item is\n   signed. May only be \"Y\" or \"N\".\n\n Firstly, binary data is reversed for little endian\n systems. If it is signed and negative, then two's\n complement is performed before converting it to text.\n Leading zeroes are removed and eventually the sign is\n added before returning the text data.\n\n  pack2txt\n\n It converts packed-decimal data to text. The parameter\n of the function is :\n\n * pack is the packed-decimal data to convert.\n\n Sign is extracted from the last half-byte of the\n packed-decimal. Leading zeroes are removed and\n eventually the sign is added before returning the text data.\n\n  num2txt\n\n It converts numeric data to text. The parameters of the\n function are :\n\n * num is the numeric data to convert.\n\n * signed is a flag to tell that the binary item is\n   signed. May only be \"Y\" or \"N\".\n\n * sign position is a flag to tell where the sign is\n   located. Allowed values are : \"\" (empty quotes - for\n   unsigned data), \"L\" (for LEADING sign), \"T\" (for\n   TRAILING sign), \"LS\" (for LEADING SEPARATE sign) and\n   \"TS\" (for TRAILING SEPARATE sign).\n\n Non-numeric data, like $ or '.', is converted from\n hexadecimal to characters. Leading zeroes are removed\n and eventually the sign is added before returning the\n text data.\n\n <cha:Installation>Installation\n\n 4.1 <sec:Downloading-TXT2XML>Downloading TXT2XML\n\n Download the latest TXT2XML version from :\n\n http://sourceforge.net/projects/txt2xml-rexx/\n\n and corresponding to your platform :\n\n +---------------------------+------------+\n ] File                      ] Platform   ]\n +---------------------------+------------+\n +---------------------------+------------+\n ] txt2xml.v*r*.mvs.zip      ] MVS        ]\n +---------------------------+------------+\n ] txt2xml.v*r*.win.zip      ] Windows    ]\n +---------------------------+------------+\n ] txt2xml.v*r*.unix.tar.gz  ] Linux/Unix ]\n +---------------------------+------------+\n\n\n where * are the version and release numbers. Create a\n new directory and decompress the archive file using\n your favorite decompression tool. For Unix environment,\n type in a console :\n\n tar xvzf txt2xml.v*r*.unix.tar.gz\n\n For MVS platform, the zip archive contains 2 files : a\n 'readme.txt' and an XMIT file that you will upload to\n the mainframe (see below).\n\n 4.2 <sec:Under-MVS>Under MVS\n\n 4.2.1 <sub:Installation>Installation\n\n The installation is straight forward :\n\n 1. Before uploading TXT2XML on the mainframe, you need\n   to allocate a new dataset with the following\n   characteristics : recfm=fb and lrecl=80,\n\n 2. Unzip the TXT2XML archive and upload in binary mode\n   the TXT2XML.XMIT file to this dataset on your MVS,\n\n 3. In TSO, issue the following command :\n\n   RECEIVE INDATASET(your.TXT2XML.XMIT.dataset)\n\n 4. Hit enter when it prompts you for restoring\n   parameters. This will create a new dataset,\n\n 5. Follow the instructions in the README member of this\n   new dataset. Typically, you will have to exec a Rexx\n   called \"receive\" that will create the TXT2XML EXEC,\n   CNTL and PANEL datasets.\n\n 4.2.2 <sub:Tests>Tests\n\n To run the IVP job, edit the TXT2XML member in the\n TXT2XML.CNTL dataset and change in the entire member :\n\n * USERID to your TSO userid,\n\n * HLQ to the high level qualifier of TXT2XML.\n\n and submit the job. The JCL step names ending with KO\n should end with a RC = 12 and the JCL step names ending\n with OK should end with a RC = 0 or 4.\n\n 4.2.3 <sub:Post-installation>Post-installation\n\n If you want, you can copy :\n\n * the TXT2XML.PANEL(TXT2XML) to your ISPF panel\n   dataset.\n\n * the TXT2XML.EXEC(TXT2XML) to your ISPF EXEC or REXX\n   dataset.\n\n 4.3 <sec:Under-Windows>Under Windows\n\n 4.3.1 <sub:Regina-or-Reginald>Regina or Reginald Rexx\n\n This step is mandatory. You must first download and\n install the latest Windows version of Regina Rexx from\n :\n\n http://sourceforge.net/projects/regina-rexx/\n\n You can alternatively download and install Reginald\n Rexx from :\n\n http://www.borg.com/~jglatt/rexx/reginald/reginald.htm\n\n Don't forget to add Rexx directory to the PATH\n environment variable (to access it : Start =>\n Parameters => Configuration Panel => System => Advanced\n => Environment Variables).\n\n 4.3.2 Java\n\n This step is optional. Starting with version 1.25, a\n JAVA GUI front-end for non-mainframe platforms has been\n written. If you want to use it, you must install Java.\n See section \u00a2sec:Installation3! for more details.\n\n 4.3.3 <sub:Tests-windows>Tests\n\n In the TXT2XML directory, execute in a DOS command\n interface window the TXT2XML.BAT file. The first five\n tests should end with an error, the others not.\n\n 4.4 <sec:Under-Unix/linux-and>Under Unix/Linux and other platforms\n\n 4.4.1 <sub:Regina-or-Reginald>Regina\n\n You must first download and install the latest version\n of Regina Rexx corresponding to your OS from :\n\n http://sourceforge.net/projects/regina-rexx/\n\n The Regina binary should be installed in /usr/bin/ . If\n it is not the case, modify in the rexx scripts\n (txt2xml.rexx & xml2cob.rexx), the magic number\n #|/usr/bin/rexx according to your needs.\n\n 4.4.2 Java\n\n This step is optional. Starting with version 1.25, a\n JAVA GUI front-end for non-mainframe platforms has been\n written. If you want to use it, you must install Java.\n See section \u00a2sec:Installation3! for more details.\n\n 4.4.3 <sub:Tests-unix>Tests\n\n In the TXT2XML directory, execute in a shell the\n ./txt2xml.sh script. The first five tests should end\n with an error, the others not.\n\n <cha:Syntax>Syntax\n\n The TXT2XML syntax is :\n\n TXT2XML syntax\n\n txt2xml\n\n   TXT txt-file\n\n   COB cob-file\n\n   XML xml-file\n\n   FORMAT format\n\n   PREFIX prefix\n\n   DTD dtd-file\n\n   VERBOSE\n\n   BROWSE\n\n All parameters can be typed in any case (upper, lower\n or mixed) and only in this order. But, on some case\n sensitive operating systems like Linux/Unix, file names\n must be typed with the correct case and the TXT2XML\n command must be typed in lower case. The file names may\n include space characters. TXT2XML parameters must be\n only one line, except if your operating systems allows\n continuation characters.\n\n 5.1 <sec:Mandatory-parameters>Mandatory parameters\n\n 5.1.1 <sub:TXT>TXT txt-file\n\n It's the name of the input or output (depending on the\n direction of conversion) text file. There is no default\n value for this parameter.\n\n  Under MVS\n\n 'txt-file' can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML, txt-file must exist, except\n when doing an XML to text conversion under ISPF.\n\n  For all other platforms\n\n txt-file has to be a correct file name. The file must\n exist before running TXT2XML for a text to XML conversion.\n\n 5.1.2 <sub:COB>COB cob-file\n\n It's the name of the COBOL copybook file. There is no\n default value for this parameter.\n\n  Under MVS\n\n \"cob-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML, cob-file must always exist.\n\n  For all other platforms\n\n cob-file has to be a correct file name. The file must\n always exist before running TXT2XML. Since TXT2XML does\n not handle some COBOL clauses such as REDEFINES, etc,\n it is best to \"clean up\" the copybook by removing all\n COBOL clauses not handled by the TXT2XML routines.\n\n 5.1.3 <sub:XML>XML xml-file\n\n It's the name of the input or output (depending on the\n direction of conversion) XML file. There is no default\n value for this parameter.\n\n  Under MVS\n\n \"xml-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML, xml-file must exist, except\n when doing a text to XML conversion under ISPF.\n\n  For all other platforms\n\n xml-file has to be a correct file name. The file must\n exist before running TXT2XML for an XML to text conversion.\n\n 5.1.4 <sub:FORMAT>FORMAT format\n\n The value for this parameter may only be (all\n platforms) :\n\n * X for text to XML conversion,\n\n * T to XML to text conversion.\n\n There is no default value for this parameter.\n\n 5.2 <sec:Optional-parameters>Optional parameters\n\n 5.2.1 <sub:Browse>BROWSE\n\n The default value for this parameter is no.\n\n  Under MVS\n\n Only under ISPF and if present, will browse the\n conversion results report.\n\n  For all other platforms\n\n On all other platforms, this parameter is ignored.\n\n 5.2.2 <sub:verbose>VERBOSE\n\n If present, displays all the messages. The default\n value is no, all messages are not displayed.\n\n 5.2.3 <sub:XML>DTD dtd-file\n\n This parameter is only valid during text to XML\n conversion. It's the name of an optional output DTD\n file or the value \"INTERNAL' for a DTD included in the\n XML file. There is no default value for this parameter.\n if omitted, no DTD will be created.\n\n  Under MVS\n\n \"dtd-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running TXT2XML under ISPF, dtd-file must not exist.\n\n  For all other platforms\n\n dtd-file has to be a correct file name.\n\n 5.2.4 <sub:prefix>PREFIX prefix\n\n If present :\n\n * During text to XML conversion, if prefix value is\n   'COBOL-' then the COBOL item COBOL-ITEM-01 will be\n   converted to <ITEM-01> .\n\n * During XML to text conversion, if prefix value is\n   'COBOL-' then the XML element <ITEM_01> will be\n   checked against the COBOL item COBOL-ITEM-01.\n\n There is no default value for this parameter.\n\n  Under MVS batch (JCL)\n\n The dash ('-') used in COBOL item name, like\n COBOL-ITEM-01, is taken for a continuation character in\n JCL. If you use prefix within a batch job, replace all\n dashes ('-') in the COBOL item name by underscores ('_').\n\n <cha:Exemples>Examples\n\n You will find here some examples of TXT2XML. You will\n find more examples in the test script files (see\n section \u00a2sub:Tests!, section \u00a2sub:Tests-unix!, or section \u00a2sub:Tests-windows!) or in the IVP job.\n\n 6.1 <sec:MVS>MVS\n\n 6.1.1 <sub:ISPF>ISPF\n\n Just type \"exec' in front of the TXT2XML member of the\n EXEC dataset and the ISPF panel will appear :\n\n ISPF panel\n\n <Fichier graphique : image/tn3270_01.jpg>\n\n\n Fill the required parameters, hit enter and you will\n see :\n\n Browsing result dataset\n\n <Fichier graphique : image/tn3270_02.jpg>\n\n\n 6.1.2 <sub:Batch>Batch\n\n If you submit the following JCL : Job to be submitted\n\n <Fichier graphique : image/tn3270_03.jpg>\n\n\n You will get :\n\n Resulting job log\n\n <Fichier graphique : image/tn3270_04.jpg>\n\n\n 6.2 <sec:Windows>Windows\n\n In a DOS command interface window and in the TXT2XML\n directory, just type :\n\n Windows example\n\n D:\\REXX\\txt2xml>txt2xml.rexx txt .\\sample\\txt\\database\n cob .\\sample\\cob\\database xml .\\sample\\xml\\database\n format txt\n\n and you will get :\n\n Resulting message log\n\n TXT2XML: Text from & to XML Conversion Utility.\n Version: 1.2\n\n TXT2XML:\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item ADMINISTRATOR starting at 115\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EMAILALIAS starting at 135\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EXTENSION starting at 145\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item ADMINISTRATOR starting at 149\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EMAILALIAS starting at 169\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 1 , COBOL\n item EXTENSION starting at 179\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 2 , COBOL\n item ADMINISTRATOR starting at 149\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 2 , COBOL\n item EMAILALIAS starting at 169\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 2 , COBOL\n item EXTENSION starting at 179\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML: ==>Warning : in text record number 3 , COBOL\n item EXTENSION starting at 179\n\n TXT2XML: is filled with default values because the\n corresponding XML equivalent was not found\n\n TXT2XML:\n\n TXT2XML: Txt File: .\\sample\\txt\\database\n\n TXT2XML: Cobol File: .\\sample\\cob\\database\n\n TXT2XML: XML File: .\\sample\\xml\\database\n\n TXT2XML: Output data format: TXT\n\n TXT2XML: Text records: 3 processed in .29000 seconds\n\n ...\n\n 6.3 <sec:Unix>Unix/Linux\n\n In a shell, just type in lowercase in the TXT2XML\n directory :\n\n Unix/Linux example.\n\n ./txt2xml.rexx txt ./sample/txt/text01 cob\n\n ./sample/cob/cobol01 xml ./sample/xml/xml01 format xml\n\n The XML file should look like :\n\n Resulting XML file\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <|--\n\n Created by TXT2XML on 12 Sep 2004 at 21:46:39\n\n More info on :\n http://sourceforge.net/projects/txt2xml-rexx/\n\n -->\n\n <DATA>\n\n   <COBOL_ITEM_01>\n\n     <COBOL_ITEM_02>12&lt;45</COBOL_ITEM_02>\n\n     <COBOL_ITEM_02>67&gt;90</COBOL_ITEM_02>\n\n     <COBOL_ITEM_03>\n\n       <COBOL_ITEM_04>1&amp;3</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>4</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>5</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_03>\n\n     <COBOL_ITEM_04>678</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>9</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>0</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_03>\n\n       <COBOL_ITEM_04>123</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>4</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>5</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_03>\n\n       <COBOL_ITEM_04>678</COBOL_ITEM_04>\n\n       <COBOL_ITEM_05>9</COBOL_ITEM_05>\n\n       <COBOL_ITEM_06>0</COBOL_ITEM_06>\n\n     </COBOL_ITEM_03>\n\n     <COBOL_ITEM_08>1234</COBOL_ITEM_08>\n\n     <COBOL_ITEM_09>567890</COBOL_ITEM_09>\n\n     <COBOL_ITEM_12>\n\n       <COBOL_ITEM_13>12345</COBOL_ITEM_13>\n\n       <COBOL_ITEM_13>67890</COBOL_ITEM_13>\n\n       <COBOL_ITEM_13>12345</COBOL_ITEM_13>\n\n       <COBOL_ITEM_13>67890</COBOL_ITEM_13>\n\n       <COBOL_ITEM_14>123456789012345</COBOL_ITEM_14>\n\n       <COBOL_ITEM_15>6789</COBOL_ITEM_15>\n\n     </COBOL_ITEM_12>\n\n   </COBOL_ITEM_01>\n\n   ...\n\n </DATA>\n\n with this message log :\n\n Log of the conversion\n\n TXT2XML: Text from & to XML Conversion Utility.\n Version: 1.2\n\n TXT2XML:\n\n TXT2XML: ==>Warning : in the COBOL copybook, level 66,\n 77, 88 items are ignored.\n\n TXT2XML: ==>Warning : in the COBOL copybook, level 66,\n 77, 88 items are ignored.\n\n TXT2XML: ==>Warning : in the COBOL copybook, level 66,\n 77, 88 items are ignored.\n\n TXT2XML:\n\n TXT2XML: Txt File:           ./sample/txt/text01\n\n TXT2XML: Cobol File:         ./sample/cob/cobol01\n\n TXT2XML: XML File:           ./sample/xml/xml01\n\n TXT2XML: Output data format: XML\n\n TXT2XML: Text records:       10 processed in .03286 seconds\n\n TXT2XML:\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ================================================================================\n\n TXT2XML:\n\n TXT2XML:                             COBOL copybook analysis\n\n TXT2XML:\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+-------------------------------------+-------+-------+--------+---------------+\n\n TXT2XML: ] Level ] Name\n ] Type  ] Start ] Length ] Default value ]\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+-------------------------------------+-------+-------+--------+---------------+\n\n TXT2XML: ] 1     ] COBOL-ITEM-01\n ] GROUP ] 1     ] 0      ]               ]\n\n TXT2XML: ] 2     ]  FILLER\n ] CHAR  ] 1     ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-02\n ] CHAR  ] 2     ] 5      ] AB\"CD         ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-02\n ] CHAR  ] 7     ] 5      ] AB\"CD         ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 12    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 12    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 15    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 16    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 17    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 17    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 20    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 21    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 22    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 22    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 25    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 26    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-03\n ] GROUP ] 27    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-04\n ] CHAR  ] 27    ] 3      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-05\n ] CHAR  ] 30    ] 1      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-06\n ] NUM   ] 31    ] 1      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-08\n ] NUM   ] 32    ] 4      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-09\n ] CHAR  ] 36    ] 6      ]               ]\n\n TXT2XML: ] 2     ]  COBOL-ITEM-12\n ] GROUP ] 42    ] 0      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 42    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 47    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 52    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-13\n ] NUM   ] 57    ] 5      ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-14\n ] CHAR  ] 62    ] 15     ]               ]\n\n TXT2XML: ] 3     ]   COBOL-ITEM-15\n ] NUM   ] 77    ] 4      ] 0000          ]\n\n TXT2XML:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+-------------------------------------+-------+-------+--------+---------------+\n\n TXT2XML:\n\n TXT2XML: Total computed COBOL length : 80\n\n\n\n X M L 2 C O B\n\n <cha:Introduction2>Introduction\n\n XML2COB is a complementary tool of TXT2XML. It\n generates a COBOL copybook, using an XML file as\n template. Of course, you can use the generated COBOL\n copybook to convert, with TXT2XML, XML files to text\n files and vice-versa. However, like TXT2XML, it is not\n an XML parser written in Rexx, nor will support the\n entire XML specification.\n\n XML2COB works only with well-formed XML documents. For\n example, it will never check for missing XML closing\n tags. XML2COB generates valid COBOL copybooks, but it's\n still your responsibility to check COBOL clauses like :\n\n * OCCURS\n\n * PICTURE (symbol and length of the item).\n\n * SIGN\n\n As TXT2XML, XML2COB was tested successfully on :\n\n * Windows 2K,\n\n * Linux Mandrake 10.1,\n\n * MVS (OS/390 V2R10).\n\n It should work without problems on other platforms. To\n run XML2COB on non-mainframe platforms, you must first\n install Regina Rexx or for windows only, Reginald (see\n chapter \u00a2cha:Installation!). Optionally, for the GUI front-end, you may\n also install Java (see\u00a2sec:Installation3! for more details). Should you\n succeed or encounter problems in running XML2COB on a\n non-tested platform, please send an e-mail to :\n\n sunuraxi@users.sourceforge.net\n\n XML2COB is released under the GPL license (see appendix \u00a2cha:License!).\n\n <cha:Principles-of-generation>Principles of generation\n\n Except for some constraints (see section \u00a2sec:Constraints!), there is no\n special requirements about the XML file used for the\n generation. However, there is a gold rule : the bigger\n the XML file is, more accurate will be the generated\n COBOL copybook. The reason is very simple : a bigger\n file means more tags, more contents analyzed, and more\n accuracy in ...\n\n 8.1 <sec:The-meta-data>The meta-data\n\n The following meta-data are extracted from the XML\n elements, attributes and content :\n\n +------------------+--------------------------------+\n ] Meta-data        ] Usage                          ]\n +------------------+--------------------------------+\n +------------------+--------------------------------+\n ] Element name     ] To create the COBOL item names ]\n +------------------+--------------------------------+\n ] Type of content  ] To create the PICTURE clause   ]\n +------------------+--------------------------------+\n ] Sign position    ] To create SIGN clause          ]\n +------------------+--------------------------------+\n ] Length           ] To create the PICTURE clause   ]\n +------------------+--------------------------------+\n ] Occurrence       ] To create the OCCURS clause    ]\n +------------------+--------------------------------+\n\n\n 8.2 <sec:The-COBOL-copybook-generation>The COBOL copybook generation\n\n In an XML file, the elements can be classified in 3\n categories :\n\n * Root : the first XML element. It's ignored in the\n   generation process and is not part of the generated\n   COBOL copybook.\n\n * First child : the second XML element. Each time it\n   appears, the meta-data analysis of the XML elements\n   is (re-)started. It corresponds to the first COBOL\n   item in the copybook. As this first child element\n   includes all the other XML elements, its\n   corresponding COBOL item is a grouping item, with the\n   lowest level and a unique occurrence.\n\n * Other child elements: the other XML elements. They\n   are analyzed to extract the meta-data needed to build\n   the rest of the COBOL copybook.\n\n The COBOL copybook generation process take place in the\n following steps :\n\n * The XML file is read record per record until the end\n   of the file.\n\n * The first child is then searched.\n\n * Each XML element or attributes generates a COBOL item\n   applying the following rules :\n\n   * The name of the XML element or attribute is\n     capitalized and dashes (\"-\") are translated to\n     underscore (\"_\"). For example : <cobol_item_01>\n     becomes COBOL-ITEM-01. COBOL item names are checked\n     against a COBOL reserved word listaccording to IBM's \"Enterprise COBOL for z/OS V3R3\n Language Reference \"(IGY3LR20)\n     . A warning message is issued if the generated item\n     name appears in this list,\n\n   * Meta-data of the contentContent is escaped if necessary. Characters like & < > \"\n and ' are converted to &amp; &lt; &gt; &quot; &apos;\n respectively.\n      of the XML element and attributes is extracted :\n     length, type and sign.\n\n   * Length of item is rounded if requested (see\n     sub-section \u00a2sub:round!). A COBOL item is then created.\n\n * Each time the XML first child is found, the analysis\n   is restarted and the meta-data is updated if\n   necessary. For example, if the content length of an\n   XML element is greater than the current length of its\n   corresponding COBOL item, the length is updated. The\n   contrary is, of course, not true.\n\n * When the end of the XML file is reached :\n\n   * The item list is then checked against elementary or\n     grouping items occurring more than one time. If\n     this is the case, only the first occurrence of the\n     item is kept, the others are deleted and an\n     occurrence counter is created\n\n   * The starting position of each COBOL item is\n     computed. Although, it's not necessary for the\n     COBOL copybook, it is used for final reporting.\n\n   * The COBOL copybook is written, indenting the items\n     according to their COBOL level.\n\n 8.3 <sec:COBOL-level>COBOL level\n\n COBOL levels are not part of the XML file. They are\n computed using the following rules :\n\n * At each XML first child, level starts at 01 or 02\n   according to the level01 parameter (see sub-section \u00a2sub:level01!)\n\n * The level of COBOL item increases :\n\n   * at each XML element\n\n   * at each XML content\n\n   * at each XML attribute\n\n * The level of COBOL item decreases :\n\n   * at each XML empty element\n\n   * after each XML content\n\n   * after each XML closing tag,\n\n   * after each XML attribute.\n\n For example, with the following XML file,\n\n an XML file with attributes and content\n\n <?xml version=\"1.0\"?>\n\n <DatabaseInventory>\n\n     <DatabaseName>\n\n       <DatabaseDomain>iDevelopment.info</DatabaseDomain>\n\n       <Administrator EmailAlias=\"jhunter\"\n       Extension=\"6007\">Jeffrey Hunter\n\n       </Administrator>\n\n     </DatabaseName>\n\n <DatabaseInventory>\n\n XML2COB will generate the following COBOL copybook :\n\n Generated COBOL copybook\n\n 02 DATABASENAME.\n\n   04 DATABASEDOMAIN PICTURE X(17).\n\n   04 ADMINISTRATOR.\n\n     06 EMAILALIAS PICTURE X(7).\n\n     06 EXTENSION PICTURE 9(4).\n\n     06 ADMINISTRATOR PICTURE X(14).\n\n As you can see, the COBOL item ADMINISTRATOR appears 2\n times :\n\n 1. The first time as a grouping item, because the XML\n   element Administrator has attributes\n\n 2. The second time as an elementary item at a lower\n   level than the grouping item, because the XML element\n   Administrator also has a content.\n\n 8.4 <sec:Constraints>Constraints\n\n In some cases, generating a COBOL copybook from an XML\n file is impossible. For example, this XML file : Nonconvertible XML file\n\n <?xml version=\"1.0\" encoding=\"ISO-8859-1\"\n standalone=\"yes\" ?>\n\n <weather>\n\n   <city name=\"Los Angeles\">\n\n     <sky>Blue</sky>\n\n     Hot and sunny\n\n   </city>\n\n </weather>\n\n In this file, the XML element city is a complex one. It\n includes the simple element sky but also a content (Hot\n and sunny). The corresponding COBOL copybook would be\n something like :\n\n Corresponding COBOL copybook\n\n 01 city pic x(20).\n\n   03 name pic x(20).\n\n   03 sky pic x(8).\n\n This is impossible in COBOL : a grouping item can't\n have a picture clause.COBOL for MVS & VM V1R2.2 Language Reference (IGYLR204)\n paragraph 5.3.11 PICTURE Clause : \"The PICTURE clause\n can be specified only at the elementary level.\"\n\n So, not all the XML files can be used and some\n constraints apply when generating a COBOL copybook :\n\n * Mixed XML content is not supported,\n\n * XML entities starting with <|ENTITY and ending with >\n   are not supported. If such a declaration is found,\n   the generation process is aborted,\n\n * Attributes of XML element are supported. But,\n   attributes of the root element are ignored.\n\n * XML attributes like xml:space are ignored,\n\n * All the XML tags and contents may expand on more than\n   one line,\n\n * XML headers starting with <?xml and ending with ?>\n   are skipped,\n\n * XML internal and external document type declaration\n   starting with <|DOCTYPE and ending with either > or\n   !> are skipped,\n\n * XML comments starting with <|-- and ending with -->\n   are skipped,\n\n * Empty XML elements, even with attributes, are supported.\n\n <cha:Installation2>Installation\n\n  See chapter \u00a2cha:Installation!\n\n <cha:Syntax2>Syntax\n\n The XML2COB syntax is :\n\n XML2C0B syntax\n\n xml2cob\n\n   COB cob-file\n\n   XML xml-file\n\n   PREFIX prefix\n\n   LEVEL01\n\n   ROUND\n\n   VERBOSE\n\n   BROWSE\n\n All parameters can be typed in any case (upper, lower\n or mixed) and only in this order. But, on some case\n sensitive operating systems like Linux/Unix, file names\n must be typed with the correct case and the XML2C0B\n command must be typed in lower case. The file names may\n include space characters. XML2C0B parameters must be\n only one line, except if your operating systems allows\n continuation characters.\n\n 10.1 <sec:Mandatory-parameters2>Mandatory parameters\n\n 10.1.1 <sub:COB2>COB cob-file\n\n It's the name of the COBOL copybook file. There is no\n default value for this parameter.\n\n  Under MVS\n\n \"cob-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running XML2C0B, 'cob-file' must not exist.\n\n  For all other platforms\n\n 'cob-file' has to be a correct file name.\n\n 10.1.2 <sub:XML2>XML xml-file\n\n It's the name of the input XML file. There is no\n default value for this parameter.\n\n  Under MVS\n\n \"xml-file\" can be one of the following :\n\n * a sequential dataset,\n\n * a member of a partitioned dataset,\n\n * a DDname. In this case, the DDname must be preceded\n   by 'DD:'.\n\n Before running XML2C0B, 'xml-file' must exist.\n\n  For all other platforms\n\n 'xml-file' has to be a correct file name. The file must\n exist before running XML2C0B.\n\n 10.2 <sec:Optional-parameters2>Optional parameters\n\n 10.2.1 <sub:prefix2>PREFIX prefix\n\n If prefix value is set to 'COBOL-' then the XML element\n <cobol_item_01> will generate a COBOL item called\n ITEM-01. There is no default value for this parameter.\n\n  Under MVS batch (JCL)\n\n The dash ('-') used in prefix, like COBOL-, is taken\n for a continuation character in JCL. If you use prefix\n within a batch job, replace all dashes ('-\") by\n underscores ('_').\n\n 10.2.2 <sub:level01>LEVEL01\n\n If present, the COBOL copybook will start at level 01.\n The default value is no level 01, it starts at level 02.\n\n 10.2.3 <sub:round>ROUND\n\n If present, all COBOL item length will be rounded to\n the next 5 or 0. For example :\n\n +-----------------------------+\n ]     COBOL item length       ]\n +-----------------------------+\n +---------------+-------------+\n ] Before round  ] After round ]\n +---------------+-------------+\n ]      8        ]     10      ]\n +---------------+-------------+\n ]      48       ]     50      ]\n +---------------+-------------+\n ]     113       ]     125     ]\n +---------------+-------------+\n ]     205       ]     250     ]\n +---------------+-------------+\n ]     517       ]     600     ]\n +---------------+-------------+\n\n\n The default value is no round, item length is not rounded.\n\n 10.2.4 <sub:Browse2>BROWSE\n\n The default value for this parameter is no.\n\n  Under MVS\n\n Only under ISPF and if present, will browse the\n generation results report.\n\n  For all other platforms\n\n On all other platforms, this parameter is ignored.\n\n 10.2.5 <sub:verbose2>VERBOSE\n\n If present, displays all the messages. The default\n value is no, all messages are not displayed.\n\n <cha:Examples2>Examples\n\n You will find here some examples of XML2COB. You will\n find more examples in the test script files or in the\n IVP job (see section \u00a2sub:Tests!, see \u00a2sub:Tests-unix! or section \u00a2sub:Tests-windows!).\n\n 11.1 <sec:MVS2>MVS\n\n 11.1.1 <sub:ISPF2>ISPF\n\n Just type \"exec' in front of the XML2COB member of the\n EXEC dataset and the ISPF panel will appear :\n\n ISPF panel\n\n <Fichier graphique : image/tn3270_05.jpg>\n\n\n Fill the required parameters, hit enter and you will\n see :\n\n Browsing result dataset\n\n <Fichier graphique : image/tn3270_06.jpg>\n\n\n 11.1.2 <sub:Batch2>Batch\n\n If you submit the following JCL : Job to be submitted\n\n <Fichier graphique : image/tn3270_07.jpg>\n\n\n You will get :\n\n Resulting job log\n\n <Fichier graphique : image/tn3270_08.jpg>\n\n\n 11.2 <sec:Windows2>Windows\n\n In a DOS command interface window and in the XML2COB\n directory, just type :\n\n Windows example\n\n D:\\REXX\\txt2xml>xml2cob.rexx cob\n .\\sample\\cob\\xml2cob\\database xml .\\sample\\xml\\database\n level01 round verbose\n\n and you will get :\n\n Resulting message log\n\n XML2COB: XML to COBOL Copybook Conversion Utility.\n Version: 1.0\n\n XML2COB:\n\n XML2COB:\n\n XML2COB: XML File:           .\\sample\\xml\\database\n\n XML2COB: Cobol File:         .\\sample\\cob\\xml2cob\\database\n\n XML2COB: Prefix:\n\n XML2COB: Round:              Y\n\n XML2COB: Level01:            Y\n\n XML2COB:\n\n XML2COB: XML first child:    4 processed in .26100 seconds\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ================================================================================\n\n XML2COB:\n\n XML2COB:                             COBOL copybook\n created :\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] Level ] Name                           ]\n Type  ] Occurs ] Sign ] Start ] Length ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] 01    ] DATABASENAME                   ]\n   ] 1      ] N    ] 1     ] 0      ]\n\n XML2COB: ] 03    ]   GLOBALDATABASENAME           ]\n CHAR  ] 1      ] N    ] 1     ] 210    ]\n\n XML2COB: ] 03    ]   ORACLESID                    ]\n CHAR  ] 1      ] N    ] 211   ] 15     ]\n\n XML2COB: ] 03    ]   DATABASEDOMAIN               ]\n CHAR  ] 1      ] N    ] 226   ] 110    ]\n\n XML2COB: ] 03    ]   ADMINISTRATOR                ]\n   ] 3      ] N    ] 336   ] 0      ]\n\n XML2COB: ] 05    ]     EMAILALIAS                 ]\n CHAR  ] 1      ] N    ] 336   ] 15     ]\n\n XML2COB: ] 05    ]     EXTENSION                  ] NUM\n   ] 1      ] N    ] 351   ] 5      ]\n\n XML2COB: ] 05    ]     ADMINISTRATOR              ]\n CHAR  ] 1      ] N    ] 356   ] 15     ]\n\n XML2COB: ] 03    ]   DATABASEATTRIBUTES           ]\n   ] 1      ] N    ] 441   ] 0      ]\n\n XML2COB: ] 05    ]     GENRE                      ]\n   ] 1      ] N    ] 441   ] 10     ]\n\n XML2COB: ] 05    ]     VERSION                    ]\n   ] 1      ] N    ] 451   ] 5      ]\n\n XML2COB: ] 03    ]   COMMENTS                     ]\n   ] 1      ] N    ] 456   ] 185    ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB:\n\n XML2COB: Total COBOL record length : 640\n\n XML2COB:\n\n\n\n 11.3 <sec:Unix2>Unix/Linux\n\n In a shell, just type in lower case in the XML2COB\n directory :\n\n Unix/Linux example.\n\n ./xml2cob.rexx cob ./sample/cob/xml2cob/book xml\n ./sample/xml/book verbose\n\n The XML file should look like :\n\n Resulting COBOL copybook\n\n\n *---------------------------------------------------------------\n\n       *\n\n       *  Created by XML2COB on 20 Feb 2005 at 21:17:12\n\n       *\n\n       *  More info on :\n http://sourceforge.net/projects/txt2xml-rexx/\n\n       *\n\n       *  Total COBOL record length : 255\n\n       *\n\n\n *---------------------------------------------------------------\n\n\n\n           02 BOOK.\n\n              04 BOOK-ID\n PICTURE X(5).\n\n              04 BOOK-AUTHOR\n PICTURE X(20).\n\n              04 BOOK-TITLE\n PICTURE X(38).\n\n              04 GENRE\n PICTURE X(15).\n\n              04 PRICE\n PICTURE 9(5).\n\n              04 PUBLISH-DATE\n PICTURE X(10).\n\n              04 DESCRIPTION\n PICTURE X(162).\n\n\n\n with this message log :\n\n Log of the generation\n\n XML2COB: XML to COBOL Copybook Conversion Utility.\n Version: 1.0\n\n XML2COB:\n\n XML2COB:\n\n XML2COB: XML File:           ./sample/xml/book\n\n XML2COB: Cobol File:         ./sample/cob/xml2cob/book\n\n XML2COB: Prefix:\n\n XML2COB: Round:              N\n\n XML2COB: Level01:            N\n\n XML2COB:\n\n XML2COB: XML first child:    13 processed in .11121 seconds\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ================================================================================\n\n XML2COB:\n\n XML2COB:                             COBOL copybook\n created :\n\n XML2COB:\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] Level ] Name                           ]\n Type  ] Occurs ] Sign ] Start ] Length ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB: ] 02    ]  BOOK                          ]\n   ] 1      ] N    ] 1     ] 0      ]\n\n XML2COB: ] 04    ]    BOOK-ID                     ]\n CHAR  ] 1      ] N    ] 1     ] 5      ]\n\n XML2COB: ] 04    ]    BOOK-AUTHOR                 ]\n CHAR  ] 1      ] N    ] 6     ] 20     ]\n\n XML2COB: ] 04    ]    BOOK-TITLE                  ]\n CHAR  ] 1      ] N    ] 26    ] 38     ]\n\n XML2COB: ] 04    ]    GENRE                       ]\n CHAR  ] 1      ] N    ] 64    ] 15     ]\n\n XML2COB: ] 04    ]    PRICE                       ] NUM\n   ] 1      ] N    ] 79    ] 5      ]\n\n XML2COB: ] 04    ]    PUBLISH-DATE                ]\n CHAR  ] 1      ] N    ] 84    ] 10     ]\n\n XML2COB: ] 04    ]    DESCRIPTION                 ]\n CHAR  ] 1      ] N    ] 94    ] 162    ]\n\n XML2COB:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +-------+--------------------------------+-------+--------+------+-------+--------+\n\n XML2COB:\n\n XML2COB: Total COBOL record length : 255\n\n XML2COB:\n\n\n\n <par:The-JAVA-GUI>The GUI front-end\n\n <cha:The-Graphical-User>The Graphical User Interface\n\n 12.1 <sec:Introduction3>Introduction\n\n Although TXT2XML and XML2COB are not GUI tools (see\n chapter \u00a2cha:Introduction!), it's perfectly understandable that some\n people don't like the command line. That's why a GUI\n front-end was written for non-mainframe platforms.\n There is a lot of programming techniques for GUI\n applications available on the Internet and choosing one\n of them was not simple. Some requirements were\n established : the GUI front-end had to :\n\n * be portable,\n\n * be easy to write,\n\n * use known standards and software.\n\n \u00a2http://thinlet.sourceforge.net/]]Thinlet! was chosen. It's a GUI toolkit, a single Java class\n that parses the hierarchy and properties of the GUI,\n handles user interaction, and calls business logic. It\n separates the graphic presentation (described in an XML\n file) and the application methods (written as Java\n code). Thinlet usesXUL (XML User Interface Language)\n which is a markup language for describing user\n interfaces. With XUL you can create rich, sophisticated\n cross-platform applications easily. Here is an example\n of an XUL file :\n\n XUL sample file.\n\n <?xml version=\"1.0\"?>\n\n <panel columns=\"1\">\n\n   <menubar>\n\n   <menu text=\"File\" mnemonic=\"0\">\n\n     <menuitem text=\"Exit\" action=\"exit\"/>\n\n   </menu>\n\n   </menubar>\n\n   <panel columns=\"3\" gap=\"10\" top=\"10\" left=\"10\"\n\n   bottom=\"10\" right=\"10\">\n\n     <label text=\"Text file :\" mnemonic=\"0\"\n     for=\"TextFile\"/>\n\n     <textfield name=\"TextFile\" columns=\"50\"\n\n     tooltip=\"Enter here the text file name\"/>\n\n     <button text=\"Select...\"\n\n     action=\"openTextFileDialog(thinlet,TextFile)\"\n\n     tooltip=\"Click here to select the text file\"/>\n\n     <checkbox name=\"format\" text=\"XML\" group=\"format\"\n\n     tooltip=\"Click here to convert from text to XML\"\n\n     selected=\"true\" colspan=\"2\"\n\n     action=\"SetFormat(this.text)\"/>\n\n     <label/>\n\n     <checkbox text=\"text\" group=\"format\"\n\n     tooltip=\"Click here to convert from XML to text\"\n\n     colspan=\"2\" action=\"SetFormat(this.text)\"/>\n\n     <separator colspan=\"3\" />\n\n     <label text=\"Prefix :\" mnemonic=\"0\" for=\"Prefix\"/>\n\n     <textfield name=\"Prefix\" columns=\"25\"\n\n     tooltip=\"Enter here the prefix\"/>\n\n     <label/>\n\n     <button text=\"Convert\"\n\n     action=\"CallTXT2XML(TextFile.text,COBOLFile.text,\n\n     XMLFile.text,DTDFile.text,Prefix.text)\"\n\n     tooltip=\"Click here to start the conversion\"\n     mnemonic=\"2\"/>\n\n   </panel>\n\n </panel>\n\n\n\n Of course, if you are a shell or a \"DOS command prompt'\n fanatic, you can still continue to use TXT2XML and\n XML2COB Rexx scripts on a command line.\n\n 12.2 <sec:Installation3>Installation\n\n To use the GUI front-end, you need to download and\n install the Java Software Developer Kit (Java SDK) :\n\n http://java.sun.com\n\n The GUI front-end was tested successfully on Windows\n and Linux Mandrake 10.1 with J2EE 1.4. Make sure that\n your path includes the directory where you have\n installed the Java SDK.\n\n 12.3 Syntax<sec:Syntax3>\n\n To launch the GUI front-end, you can :\n\n * Type on a command line :\n\n java -jar txt2xml.jar\n\n or\n\n java -jar xml2cob.jar\n\n according to which Rexx script you want to execute.\n\n * or simply execute txt2xml.rexx or xml2cob.rexx\n   without parameters.\n\n 12.4 Example<sec:Example3>\n\n Here is an example when starting TXT2XML without\n parameters :\n\n The GUI front-end\n\n <Fichier graphique : image/gui_01.jpg>\n\n\n and the result of the conversion :\n\n Browsing the results with the GUI front-end\n\n <Fichier graphique : image/gui_02.jpg>\n\n\n <cha:License>License\n\n GNU GENERAL PUBLIC LICENSE Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n Everyone is permitted to copy and distribute verbatim\n copies of this license document, but changing it is not\n allowed.\n\n A.1 Preamble\n\n The licenses for most software are designed to take\n away your freedom to share and change it. By contrast,\n the GNU General Public License is intended to guarantee\n your freedom to share and change free software--to make\n sure the software is free for all its users. This\n General Public License applies to most of the Free\n Software Foundation's software and to any other program\n whose authors commit to using it. (Some other Free\n Software Foundation software is covered by the GNU\n Library General Public License instead.) You can apply\n it to your programs, too.\n\n When we speak of free software, we are referring to\n freedom, not price. Our General Public Licenses are\n designed to make sure that you have the freedom to\n distribute copies of free software (and charge for this\n service if you wish), that you receive source code or\n can get it if you want it, that you can change the\n software or use pieces of it in new free programs; and\n that you know you can do these things.\n\n To protect your rights, we need to make restrictions\n that forbid anyone to deny you these rights or to ask\n you to surrender the rights. These restrictions\n translate to certain responsibilities for you if you\n distribute copies of the software, or if you modify it.\n\n For example, if you distribute copies of such a\n program, whether gratis or for a fee, you must give the\n recipients all the rights that you have. You must make\n sure that they, too, receive or can get the source\n code. And you must show them these terms so they know\n their rights.\n\n We protect your rights with two steps: (1) copyright\n the software, and (2) offer you this license which\n gives you legal permission to copy, distribute and/or\n modify the software.\n\n Also, for each author's protection and ours, we want to\n make certain that everyone understands that there is no\n warranty for this free software. If the software is\n modified by someone else and passed on, we want its\n recipients to know that what they have is not the\n original, so that any problems introduced by others\n will not reflect on the original authors' reputations.\n\n Finally, any free program is threatened constantly by\n software patents. We wish to avoid the danger that\n redistributors of a free program will individually\n obtain patent licenses, in effect making the program\n proprietary. To prevent this, we have made it clear\n that any patent must be licensed for everyone's free\n use or not licensed at all.\n\n The precise terms and conditions for copying,\n distribution and modification follow.\n\n A.2 GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR\n   COPYING, DISTRIBUTION AND MODIFICATION\n\n 0. This License applies to any program or other work\n which contains a notice placed by the copyright holder\n saying it may be distributed under the terms of this\n General Public License. The \"Program\", below, refers to\n any such program or work, and a \"work based on the\n Program\" means either the Program or any derivative\n work under copyright law: that is to say, a work\n containing the Program or a portion of it, either\n verbatim or with modifications and/or translated into\n another language. (Hereinafter, translation is included\n without limitation in the term \"modification\".) Each\n licensee is addressed as \"you\".\n\n Activities other than copying, distribution and\n modification are not covered by this License; they are\n outside its scope. The act of running the Program is\n not restricted, and the output from the Program is\n covered only if its contents constitute a work based on\n the Program (independent of having been made by running\n the Program). Whether that is true depends on what the\n Program does.\n\n 1. You may copy and distribute verbatim copies of the\n Program's source code as you receive it, in any medium,\n provided that you conspicuously and appropriately\n publish on each copy an appropriate copyright notice\n and disclaimer of warranty; keep intact all the notices\n that refer to this License and to the absence of any\n warranty; and give any other recipients of the Program\n a copy of this License along with the Program.\n\n You may charge a fee for the physical act of\n transferring a copy, and you may at your option offer\n warranty protection in exchange for a fee.\n\n 2. You may modify your copy or copies of the Program or\n any portion of it, thus forming a work based on the\n Program, and copy and distribute such modifications or\n work under the terms of Section 1 above, provided that\n you also meet all of these conditions:\n\n a) You must cause the modified files to carry prominent\n notices stating that you changed the files and the date\n of any change.\n\n b) You must cause any work that you distribute or\n publish, that in whole or in part contains or is\n derived from the Program or any part thereof, to be\n licensed as a whole at no charge to all third parties\n under the terms of this License.\n\n c) If the modified program normally reads commands\n interactively when run, you must cause it, when started\n running for such interactive use in the most ordinary\n way, to print or display an announcement including an\n appropriate copyright notice and a notice that there is\n no warranty (or else, saying that you provide a\n warranty) and that users may redistribute the program\n under these conditions, and telling the user how to\n view a copy of this License. (Exception: if the Program\n itself is interactive but does not normally print such\n an announcement, your work based on the Program is not\n required to print an announcement.)\n\n These requirements apply to the modified work as a\n whole. If identifiable sections of that work are not\n derived from the Program, and can be reasonably\n considered independent and separate works in\n themselves, then this License, and its terms, do not\n apply to those sections when you distribute them as\n separate works. But when you distribute the same\n sections as part of a whole which is a work based on\n the Program, the distribution of the whole must be on\n the terms of this License, whose permissions for other\n licensees extend to the entire whole, and thus to each\n and every part regardless of who wrote it.\n\n Thus, it is not the intent of this section to claim\n rights or contest your rights to work written entirely\n by you; rather, the intent is to exercise the right to\n control the distribution of derivative or collective\n works based on the Program.\n\n In addition, mere aggregation of another work not based\n on the Program with the Program (or with a work based\n on the Program) on a volume of a storage or\n distribution medium does not bring the other work under\n the scope of this License.\n\n 3. You may copy and distribute the Program (or a work\n based on it, under Section 2) in object code or\n executable form under the terms of Sections 1 and 2\n above provided that you also do one of the following:\n\n a) Accompany it with the complete corresponding\n machine-readable source code, which must be distributed\n under the terms of Sections 1 and 2 above on a medium\n customarily used for software interchange; or,\n\n b) Accompany it with a written offer, valid for at\n least three years, to give any third party, for a\n charge no more than your cost of physically performing\n source distribution, a complete machine-readable copy\n of the corresponding source code, to be distributed\n under the terms of Sections 1 and 2 above on a medium\n customarily used for software interchange; or,\n\n c) Accompany it with the information you received as to\n the offer to distribute corresponding source code.\n (This alternative is allowed only for noncommercial\n distribution and only if you received the program in\n object code or executable form with such an offer, in\n accord with Subsection b above.)\n\n The source code for a work means the preferred form of\n the work for making modifications to it. For an\n executable work, complete source code means all the\n source code for all modules it contains, plus any\n associated interface definition files, plus the scripts\n used to control compilation and installation of the\n executable. However, as a special exception, the source\n code distributed need not include anything that is\n normally distributed (in either source or binary form)\n with the major components (compiler, kernel, and so on)\n of the operating system on which the executable runs,\n unless that component itself accompanies the\n executable.\n\n If distribution of executable or object code is made by\n offering access to copy from a designated place, then\n offering equivalent access to copy the source code from\n the same place counts as distribution of the source\n code, even though third parties are not compelled to\n copy the source along with the object code.\n\n 4. You may not copy, modify, sublicense, or distribute\n the Program except as expressly provided under this\n License. Any attempt otherwise to copy, modify,\n sublicense or distribute the Program is void, and will\n automatically terminate your rights under this License.\n However, parties who have received copies, or rights,\n from you under this License will not have their\n licenses terminated so long as such parties remain in\n full compliance.\n\n 5. You are not required to accept this License, since\n you have not signed it. However, nothing else grants\n you permission to modify or distribute the Program or\n its derivative works. These actions are prohibited by\n law if you do not accept this License. Therefore, by\n modifying or distributing the Program (or any work\n based on the Program), you indicate your acceptance of\n this License to do so, and all its terms and conditions\n for copying, distributing or modifying the Program or\n works based on it.\n\n 6. Each time you redistribute the Program (or any work\n based on the Program), the recipient automatically\n receives a license from the original licensor to copy,\n distribute or modify the Program subject to these terms\n and conditions. You may not impose any further\n restrictions on the recipients' exercise of the rights\n granted herein. You are not responsible for enforcing\n compliance by third parties to this License.\n\n 7. If, as a consequence of a court judgment or\n allegation of patent infringement or for any other\n reason (not limited to patent issues), conditions are\n imposed on you (whether by court order, agreement or\n otherwise) that contradict the conditions of this\n License, they do not excuse you from the conditions of\n this License. If you cannot distribute so as to satisfy\n simultaneously your obligations under this License and\n any other pertinent obligations, then as a consequence\n you may not distribute the Program at all. For example,\n if a patent license would not permit royalty-free\n redistribution of the Program by all those who receive\n copies directly or indirectly through you, then the\n only way you could satisfy both it and this License\n would be to refrain entirely from distribution of the\n Program.\n\n If any portion of this section is held invalid or\n unenforceable under any particular circumstance, the\n balance of the section is intended to apply and the\n section as a whole is intended to apply in other\n circumstances.\n\n It is not the purpose of this section to induce you to\n infringe any patents or other property right claims or\n to contest validity of any such claims; this section\n has the sole purpose of protecting the integrity of the\n free software distribution system, which is implemented\n by public license practices. Many people have made\n generous contributions to the wide range of software\n distributed through that system in reliance on\n consistent application of that system; it is up to the\n author/donor to decide if he or she is willing to\n distribute software through any other system and a\n licensee cannot impose that choice.\n\n This section is intended to make thoroughly clear what\n is believed to be a consequence of the rest of this\n License.\n\n 8. If the distribution and/or use of the Program is\n restricted in certain countries either by patents or by\n copyrighted interfaces, the original copyright holder\n who places the Program under this License may add an\n explicit geographical distribution limitation excluding\n those countries, so that distribution is permitted only\n in or among countries not thus excluded. In such case,\n this License incorporates the limitation as if written\n in the body of this License.\n\n 9. The Free Software Foundation may publish revised\n and/or new versions of the General Public License from\n time to time. Such new versions will be similar in\n spirit to the present version, but may differ in detail\n to address new problems or concerns.\n\n Each version is given a distinguishing version number.\n If the Program specifies a version number of this\n License which applies to it and \"any later version\",\n you have the option of following the terms and\n conditions either of that version or of any later\n version published by the Free Software Foundation. If\n the Program does not specify a version number of this\n License, you may choose any version ever published by\n the Free Software Foundation.\n\n 10. If you wish to incorporate parts of the Program\n into other free programs whose distribution conditions\n are different, write to the author to ask for\n permission. For software which is copyrighted by the\n Free Software Foundation, write to the Free Software\n Foundation; we sometimes make exceptions for this. Our\n decision will be guided by the two goals of preserving\n the free status of all derivatives of our free software\n and of promoting the sharing and reuse of software\n generally.\n\n A.3 NO WARRANTY\n\n 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE,\n THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT\n PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE\n STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER\n PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF\n ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT\n NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF\n THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE\n DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY\n SERVICING, REPAIR OR CORRECTION.\n\n 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR\n AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY\n OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE\n PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR\n DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR\n INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\n TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR\n LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE\n OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF\n THE POSSIBILITY OF SUCH DAMAGES.\n\n END OF TERMS AND CONDITIONS\n\n A.4 How to Apply These Terms to Your New Programs\n\n If you develop a new program, and you want it to be of\n the greatest possible use to the public, the best way\n to achieve this is to make it free software which\n everyone can redistribute and change under these terms.\n\n To do so, attach the following notices to the program.\n It is safest to attach them to the start of each source\n file to most effectively convey the exclusion of\n warranty; and each file should have at least the\n \"copyright\" line and a pointer to where the full notice\n is found.\n\n <one line to give the program's name and a brief idea\n of what it does.> Copyright (C) <year> <name of author>\n\n This program is free software; you can redistribute it\n and/or modify it under the terms of the GNU General\n Public License as published by the Free Software\n Foundation; either version 2 of the License, or (at\n your option) any later version.\n\n This program is distributed in the hope that it will be\n useful, but WITHOUT ANY WARRANTY; without even the\n implied warranty of MERCHANTABILITY or FITNESS FOR A\n PARTICULAR PURPOSE. See the GNU General Public License\n for more details.\n\n You should have received a copy of the GNU General\n Public License along with this program; if not, write\n to the Free Software Foundation, Inc., 59 Temple Place,\n Suite 330, Boston, MA 02111-1307 USA\n\n Also add information on how to contact you by\n electronic and paper mail.\n\n If the program is interactive, make it output a short\n notice like this when it starts in an interactive mode:\n\n Gnomovision version 69, Copyright (C) year name of\n author Gnomovision comes with ABSOLUTELY NO WARRANTY;\n for details type `show w'. This is free software, and\n you are welcome to redistribute it under certain\n conditions; type `show c' for details.\n\n The hypothetical commands `show w' and `show c' should\n show the appropriate parts of the General Public\n License. Of course, the commands you use may be called\n something other than `show w' and `show c'; they could\n even be mouse-clicks or menu items--whatever suits your\n program.\n\n You should also get your employer (if you work as a\n programmer) or your school, if any, to sign a\n \"copyright disclaimer\" for the program, if necessary.\n Here is a sample; alter the names:\n\n Yoyodyne, Inc., hereby disclaims all copyright interest\n in the program `Gnomovision' (which makes passes at\n compilers) written by James Hacker.\n\n <signature of Ty Coon>, 1 April 1989 Ty Coon, President\n of Vice\n\n This General Public License does not permit\n incorporating your program into proprietary programs.\n If your program is a subroutine library, you may\n consider it more useful to permit linking proprietary\n applications with the library. If this is what you want\n to do, use the GNU Library General Public License\n instead of this License.\n\n <cha:History-&-Roadmap>History & Road map\n\n B.1 30/09/02 - Version 0.1\n\n * start,\n\n * indent XML according to the item level.\n\n B.2 04/10/02 - Version 0.2\n\n * handle multi-line COBOL item declaration,\n\n * ignore line numbers in columns 1-6 & 73-80,\n\n * ignore level 66, 77, 88 items,\n\n * stop if level is greater than 50,\n\n * stop if level is not numeric,\n\n * stop if some COBOL reserved words are found,\n\n * replace 9(4) by 9999 and X(3) by XXX, etc.\n\n B.3 06/11/02 - Version 0.3\n\n * handle OCCURS clause for group and elementary items.\n\n B.4 21/11/02 - Version 1.0\n\n * read line by line instead of reading all lines,\n\n * write line by line instead of writing all lines,\n\n * COBOL item names are capitalized.\n\n B.5 28/07/04 - Version 1.1 RC1\n\n * bug corrected : VALUES COBOL clauses are ignored,\n\n * make conversion in both directions from XML to TXT\n   and from TXT to XML,\n\n * COBOL levels are renumbered from 1 by 1 so that\n   indentation of XML is independent of absolute COBOL levels,\n\n * change input file parameter name to txt and output\n   file parameter name to XML,\n\n * added an \"\"x000 Records processed\" message,\n\n * added an error message if the file transfer of\n   TXT2XML has changed vertical bars (concatenation and\n   OR operator) to | ,\n\n * added a report of COBOL items: level, name, type,\n   start and length,\n\n * during conversion from XML to TXT, check that XML\n   numeric values are really numeric,\n\n * error force termination of the program with return\n   code set to 12.\n\n B.6 28/08/04 - Version 1.1\n\n * attributes of XML elements are now supported,\n\n * check that all COBOL items are filled during XML to\n   TXT conversion. A warning is issued if it's not the case,\n\n * during XML to text conversion, initialize the output\n   record with the default values specified in the\n   VALUES clause of the COBOL copybook,\n\n * support of CDATA,\n\n * support of escaped chars like &lt; for \"<\",\n\n * support of element content on more than one line,\n\n * support of comments, declaration, ... on more than\n   one line,\n\n * ignore XML attributes : xml:space, xml:language, ...\n\n B.7 20/09/04 - Version 1.15\n\n * TXT2XML runs on almost any platform with Regina Rexx\n\n * XML Entity declaration are not supported,\n\n * new parameter PREFIX that suppress constant part of\n   an item name. I.e. if prefix is set to COBOL- then\n   the COBOL item COBOL-ITEM-01 will be translated to\n   <ITEM-01> during text to XML conversion.\n\n * bug corrected : during text to XML conversion,\n   missing tags are now correctly handled.\n\n B.8 05/11/04 - Version 1.20\n\n * Support of COMP-3, COMP-4, BINARY and PACKED-DECIMAL clauses.\n\n * Support of SIGN clause even for group items.\n\n * bug corrected under MVS : allocation of a dataset\n   with BLOCK as units works correctly now.\n\n * New parameter VERBOSE to replace NOCONFIRM parameter\n   which is deprecated.\n\n * Generation of internal and external DTD based on the\n   COBOL copybook during Text to XML conversion.\n\n B.9 05/03/05 - Version 1.25\n\n * New JAVA GUI front-end for non-mainframe platforms\n\n * Bug corrected : COBOL picture clauses like 'PIC\n   99V999' are now correctly handled.\n\n * New web site : http://txt2xml-rexx.sourceforge.net/\n\n * New rexx script to generate a COBOL copybook from an\n   XML file : XML2COB\n\n B.10 Road map\n\n * Generation of XSD files based on COBOL copybooks and\n   vice-versa.\n\n * Integration of XML2COB into TXT2XML.\n\n <cha:Internet-resources>Internet resources\n\n\n   XML\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] XML.org                                                                                   ] http://www.xml.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Extensible Markup Language (XML)                                                          ] http://www.w3.org/XML/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] The XML FAQ                                                                               ] http://www.ucc.ie/xml/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] XML.com: XML From the Inside Out -- XML development, XML resources, XML specifications    ] http://www.xml.com\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] ZVON.org                                                                                  ] http://www.zvon.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   REXX\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] The Rexx Language Association                                                             ] http://www.rexxla.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] IBM Rexx home page                                                                        ] http://www-306.ibm.com/software/awdtoo\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Reginald REXX Developer's Page for Windows                                                ] http://www.borg.com/~jglatt/rexx/regin\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Regina - Cross-platform Rexx Interpreter                                                  ] http://regina-rexx.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Rexx Anywhere|                                                                            ] http://www.planetmvs.com/rexxanywhere/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Style Guide for Rexx                                                                      ] http://www.neilhancock.co.uk/Computers\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] FTE Text Editor                                                                           ] http://fte.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   COBOL\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] IBM COBOL for OS/390 & VM V2R1 (IGYSH208)                                                 ] http://publibz.boulder.ibm.com/cgi-bin\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] IBM COBOL - Family Overview - IBM Software                                                ] http://www-306.ibm.com/software/awdtoo\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Kasten COBOL Page: Coding Style and Techniques                                            ] http://home.swbell.net/mck9/cobol/cobo\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] The TinyCOBOL project home page                                                           ] http://tiny-cobol.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   Thinlet, Java & XUL\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Java home                                                                                 ] http://java.sun.com\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Thinlet home                                                                              ] http://thinlet.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Thing                                                                                     ] http://thing.sourceforge.net/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] XUL planet                                                                                ] http://www.xulplanet.com/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n   Other\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] TCP/IP and Mail Tools by Lionel B. Dyck                                                   ] http://www.lbdsoftware.com/tcpip.html\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] Typo The cover page was made with Typo generator.generator                                ] http://mtd.nussnet.at/typo/index2.php\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] LyX - The Document This document was written with Lyx.Processor                           ] http://www.lyx.org/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n ] SDS - Dictionary of the Mainframe Most of glossary definitions come from this site.World  ] http://www.sdsusa.com/dictionary/\n +-------------------------------------------------------------------------------------------+---------------------------------------\n\n\n <cha:Glossary>Glossary\n\n Batch An accumulation of data brought together for\n processing or transmission, usually unattended. Less\n formally, the processing of such data, as opposed to\n on-line processing where an user is present to respond\n interactively, one record at a time.\n\n Dataset An unit of data storage and retrieval\n consisting of one or more data records. Outside of the\n IBM mainframe environment, people call them files.\n Dataset can be partioned (i.e. containing multiple\n files) or sequential (i.e. containing only data).\n\n DBCS stands for Double Byte Character Set. A mainframe\n way of coding non-latin character sets (i.e. chinese,\n japanese, etc).\n\n DTD Document Type Definition. This is a specific markup\n language, written using SGML.\n\n ISPF/PDF ISPF/Program Development Facility. ISPF\n facility providing access to application development\n services for end-users and programmers. Incorporates C\n and REXX programming support, and some support for\n programmable workstations.\n\n GUI stands for Graphical User Interface. A GUI\n application must be installed on each PC and makes\n extensive use of the mouse. By opposition, TUI is Text\n User Interface. A TUI application needs a connection\n program called an emulator and use only the keyboard to\n input data. BUI stands for Browser User Interface. A\n BUI program is an intranet or extranet application.\n\n HLQ High Level Qualifier. The left part of a dataset name.\n\n IVP Installation Verification Procedure. A set of tests\n to check if a product was correctly installed.\n\n JCL Job Control Language. The language used to describe\n the steps of a batch job (files to be used, programs to\n be run, etc). A generic term, hijacked by IBM to refer\n to the batch control languages for its System/360\n operating systems. Then, as now, z/OS and VSE/ESA JCL\n is a clumsy and cumbersome system that is hard to\n learn, full of inconsistencies, and avoided by anyone\n with an iota of common sense and access to an\n alternative. The only excuse for it comes from one of\n the original OS/360 developers: they ran out of time to\n build a JCL interpreter, so just used the Assembler\n macro processor, and built a language (JCL) around it.\n\n Mainframe Mainframes used to be defined by their size,\n and they can still fill a room, cost millions, and\n support thousands of users. But now a mainframe can\n also run on a laptop and support two users. So today's\n mainframes are best defined by their operating systems:\n Unix and Linux, and IBM's z/OS, OS/390, MVS, VM, and\n VSE. Mainframes combine four important features:\n\n   * Reliable single-thread performance, which is\n     essential for reasonable operations against a\n     database.\n\n   * Maximum I/O connectivity, which means mainframes\n     excel at providing for huge disk farms.\n\n   * Maximum I/O bandwidth, so connections between\n     drives and processors have few choke-points.\n\n   * Reliability--mainframes often allow for \"graceful\n     degradation\" and service while the system is running.\n\n Member A file of a partitioned dataset.\n\n MVS Multiple Virtual Storage. In z/OSs long history,\n MVS has the honor of being its name for the longest\n period: about two decades. Admittedly, it had many\n suffixes during those years: MVS/SP, MVS/370, MVS/XA\n and MVS/ESA. Many users believed that MVS stood for Man\n Versus System.\n\n OS/390 The replacement for MVS/ESA announced at the end\n of 1995. It was an attempt to repackage MVS in a way\n that allowed IBM to offer attractive pricing at the\n lower levels, encourage developers to write\n applications in a shorter period of time, and generally\n improve the image of an operating system that is still\n largely identified with big iron and huge IT budgets.\n It also reduced IBMs testing costs dramatically because\n there was no longer a need to test every combination of\n supported releases of what were now components instead\n of separate system software products. This approach was\n first tested with DFSMS three and a half years earlier.\n In the longer term, OS/390 shielded MVS behind a layer\n of middleware that disguised many of the proprietary\n functions of MVS and provided users with common\n services across all the major IBM platforms. Replaced\n by z/OS on October 3, 2000, along with the introduction\n of eserver, including a complete line of mainframes\n called zSeries 900. Version 2 Release 10 was the last\n release of OS/390 and first became available September\n 29, 2000.\n\n Panel IBM speak for screen layout.\n\n REXX Restructured EXtended eXecutor language. A command\n procedure programming language which was initially\n available on z/VM only, replacing EXEC and EXEC2, but\n later became an SAA standard. Although SAA is a distant\n memory, REXX availability in z/OS TSO has seen it\n replace CLIST as the tool of choice, especially given\n the fact that TSO, and therefore REXX, can be run in\n batch. REXX is an effective programming language in its\n own right with powerful string processing facilities\n and is used to drive certain program products, notably\n GDDM. REXX is also available in VSE/ESA, AIX1, OS/2,\n Linux and Windows. Although normally interpretive, a\n REXX compiler and library is available for z/OS and\n z/VM. REXX for CICS is available for z/OS and VSE/ESA;\n it consists of REXX Development System and REXX\n Development System. Object REXX is available for\n Windows, OS/2, AIX, and Linux for Intel and zSeries 900.\n\n Shell Generic term with a lot of different meanings.\n Early Internet service often involved an interface,\n called a Shell, on a host computer, rather than a\n direct connection to the Internet. And there was the\n IBM DOS Shell, a menu driven interface to basic PC-DOS\n functionality. Shell is also widely used in the expert\n systems and Unix communities, to mean software\n providing a skeleton which can be customized to produce\n a specific application.\n\n TSO Time Sharing Option. These days, everyone just says\n TSO when they mean TSO/E. Back in the 1980s, TSO was\n included with MVS/XA and you had to pay extra for\n TSO/E. Well worth the money given that TSO left you\n stranded below the 16MB line.\n\n TSO/E Time Sharing Option/Extensions. An element of\n z/OS that provides an on-line interactive environment\n for programmers and users. Best known for the ISPF/PDF\n environment that runs on TSO/E. Can also be used to\n test batch programs.\n\n Two's\n\n complement is a method of signifying negative numbers\n in binary. It is also an operation which may be applied\n to positive binary values in order to perform\n subtraction using the method of complements,\n effectively allowing subtraction of one binary number\n from another using only the addition operation.\n\n XUL The XML User Interface Language (XUL) is a markup\n language for describing user interfaces. With XUL you\n can create rich, sophisticated cross-platform web\n applications easily.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT685/CBT.V500.FILE685.PDS/DOC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT685/CBT.V500.FILE685.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}