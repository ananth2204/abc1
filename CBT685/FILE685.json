{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012608000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 4291378, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE685.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 4291378, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 4291378, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE685.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00C\\x04'", "DS1TRBAL": "b'\\x98\\x9a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xc8\\x00\\x07\\x04\\xcc\\x00\\x0e\\x00D'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04E\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t&\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf9@@@'", "ispf": {"version": "04.69", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:26:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-469"}, "text": "REGULAR CBT TAPE - VERSION 469    FILE:  685\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT469.FILE685\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 15 MEMBERS COUNTED; CUMULATIVE SIZE IS 40,763 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/09/05    09:26:46    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x04 \\x1f\\x01\\x04 \\x1f\\t0\\x00{\\x00{\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2004-07-19T00:00:00", "modifydate": "2004-07-19T09:30:00", "lines": 123, "newlines": 123, "modlines": 0, "user": "SUNURAX"}, "text": "TXT2XML\n=======\n\n   From TXT (flat files) to XML and vice-versa.\n\n1) Introduction\n---------------\n\n   In 2002, after a XML internet course, I was thoughful. Strange, I\n   thought : XML and COBOL, there are concepts in common. Hierarchy of\n   data, identation for a better visualization, complex entities (in\n   COBOL : group items), ... Wouldn't it be interesting if it was\n   possible to convert data from a flat file to XML one using a COBOL\n   copybook ?\n\n   Nobody will stop XML (r)evolution and in my administration, there\n   are plenty of COBOL copybooks and ... flat files So why not ? And\n   in September 2002, the first release of TXT2XML was released.\n\n   \"Interesting\" say my collegues. But after the migration of all of\n   our programs to the EURO currency, nobody was ready to investigate\n   this technology. There were too much projects that have been\n   delayed ...\n\n   So, TXT2XML was frozen until 2004 when somebody asked me to make\n   conversion in both senses (to and from XML).\n\n2) Installation\n---------------\n\n   Very simple :\n\n   a) copy the TXT2XML.PANEL(TXT2XML) to your ISPF panel dataset.\n   b) copy the TXT2XML.EXEC(TXT2XML) to your ISPF EXEC or REXX\n      dataset.\n   c) copy the TXT2XML.CNTL(TXT2XML) to your JCL DATASET and submit\n      the job. The JCL step names ending with KO should end with a\n      RC = 12 and the JCL step names ending with OK should end\n      with a RC = 0 or 4.\n\n3) Function / History\n---------------------\n\n   Function:  Convert a text dataset to of from a XML one using a\n              COBOL copybook as reference.\n\n   Invoked from: The ISPF command line (TSO TXT2XML), an another REXX,\n                 a batch job.\n\n   30/09/02 - Version 0.1\n     + start\n     + indent XML according to the item level.\n   04/11/02 - Version 0.2\n     + handle multi-line cobol item declaration.\n     + ignore line numbers in columns 1-6 & 73-80\n     + ignore level 66, 77, 88 items.\n     + stop if level is greater than 50.\n     + stop if level is not numeric.\n     + stop if some COBOL reserved words are found.\n     + replace 9(4) by 9999 and X(3) by XXX.\n   06/11/02 - Version 0.3\n     + handle OCCURS clause for group\n       and elementary items.\n   21/11/02 - Version 1.0\n     + read line by line instead of reading all  lines.\n     + write line by line instead of writing all lines.\n     + accept any case for COBOL item names.\n   28/06/04 - Version 1.1 RC1\n     + Bug corrected : VALUES COBOL clauses are now ignored.\n     + Make conversion in both senses from XML to\n       TXT and from TXT to XML.\n     + Renumber cobol levels from 1 by 1 so that\n       identation of XML is independent of absolute COBOL levels.\n     + Change input file parameter name to txt and\n       output file parameter name to xml.\n     + Added a x000 \"Records processed\" message.\n     + Added a error message if the file transfer\n       of TXT2XML has changed verticals bars\n       (concatenation and OR operator) to |.\n     + Added a report of cobol items: level, name\n       type, start and length .\n     + During conversion from XML to TXT, check\n       that XML numeric values are really numeric.\n     + Error force termination of the program\n       with return code set to 12.\n\n4) Warnings\n-----------\n\n     - You have to parse the XML file with the corresponding\n       DTD, XML schemas. This REXX will not do any parsing.\n     - Attributes of XML elements are ignored.\n     - XML with mixed contents is not supported.\n     - Element content is supposed to be on only one line\n     - Before the conversion from XML to TXT,\n       THE XML INPUT FILE MUST BE \"XML WELL-FORMED\".\n     - Two ( or more ) dimmension arrays are not supported.\n     - level 66, 77, 88 are ignored.\n     - binary and packed-decimal data are not supported.\n     - Escaping of special characters (&lt; instead of <) is\n       not supported.\n     - CDATA is not supported.\n\n5) Todo\n-------\n\n     - Support of COBOL binary and packed data ?\n     - Support of attributes of XML elements ?\n     - Support of CDATA\n     - Support of escape chars like &lt; for \"<\"\n     - Support of element content on more than one line\n\n6) Bugs, comments and remarks ...\n---------------------------------\n\n     are expected with great impatience. Submit them to\n\n        sunuraxi@users.sourceforge.net\n\n     with as much info as possible :-))))\n\n     Web site : http://sourceforge.net/projects/txt2xml-rexx/\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE685": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04E\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t&\\x00\\x8c\\x00\\x8c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf9@@@'", "ispf": {"version": "04.69", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:26:00", "lines": 140, "newlines": 140, "modlines": 0, "user": "CBT-469"}, "text": "//***FILE 685 is from Pierre Delaunoy and contains a package        *   FILE 685\n//*           called TXT2XML, to go from plain text to XML, and     *   FILE 685\n//*           also from XML to plain text.                          *   FILE 685\n//*                                                                 *   FILE 685\n//*          Support email address:                                 *   FILE 685\n//*             sunuraxi@users.sourceforge.net                      *   FILE 685\n//*                                                                 *   FILE 685\n//*          Please submit fix requests                             *   FILE 685\n//*          with as much info as possible :-))))                   *   FILE 685\n//*                                                                 *   FILE 685\n//*          Web site:                                              *   FILE 685\n//*          http://sourceforge.net/projects/txt2xml-rexx/          *   FILE 685\n//*                                                                 *   FILE 685\n//*     Current version:  1.25                                      *   FILE 685\n//*                                                                 *   FILE 685\n//*     See the change log below:                                   *   FILE 685\n//*                                                                 *   FILE 685\n//*     TXT2XML                                                     *   FILE 685\n//*     =======                                                     *   FILE 685\n//*                                                                 *   FILE 685\n//*        From TXT (flat files) to XML and vice-versa.             *   FILE 685\n//*                                                                 *   FILE 685\n//*     1) Introduction                                             *   FILE 685\n//*     ---------------                                             *   FILE 685\n//*                                                                 *   FILE 685\n//*        In 2002, after a XML internet course, I was              *   FILE 685\n//*        thoughful. Strange, I thought : XML and COBOL, there     *   FILE 685\n//*        are concepts in common. Hierarchy of data, identation    *   FILE 685\n//*        for a better visualization, complex entities (in         *   FILE 685\n//*        COBOL : group items), ... Wouldn't it be interesting     *   FILE 685\n//*        if it was possible to convert data from a flat file      *   FILE 685\n//*        to XML one using a COBOL copybook ?                      *   FILE 685\n//*                                                                 *   FILE 685\n//*        Nobody will stop XML (r)evolution and in my              *   FILE 685\n//*        administration, there are plenty of COBOL copybooks      *   FILE 685\n//*        and ... flat files So why not ? And in September         *   FILE 685\n//*        2002, the first release of TXT2XML was released.         *   FILE 685\n//*                                                                 *   FILE 685\n//*        \"Interesting\" say my collegues. But after the            *   FILE 685\n//*        migration of all of our programs to the EURO             *   FILE 685\n//*        currency, nobody was ready to investigate this           *   FILE 685\n//*        technology. There were too much projects that have       *   FILE 685\n//*        been delayed ...                                         *   FILE 685\n//*                                                                 *   FILE 685\n//*        So, TXT2XML was frozen until 2004 when somebody          *   FILE 685\n//*        asked me to make conversion in both senses (to and       *   FILE 685\n//*        from XML).                                               *   FILE 685\n//*                                                                 *   FILE 685\n//*     2) Installation                                             *   FILE 685\n//*     ---------------                                             *   FILE 685\n//*                                                                 *   FILE 685\n//*        Very simple :                                            *   FILE 685\n//*                                                                 *   FILE 685\n//*        a) copy the TXT2XML.PANEL(TXT2XML) to your ISPF          *   FILE 685\n//*           panel dataset.                                        *   FILE 685\n//*        b) copy the TXT2XML.EXEC(TXT2XML) to your ISPF EXEC      *   FILE 685\n//*           or REXX dataset.                                      *   FILE 685\n//*        c) copy the TXT2XML.CNTL(TXT2XML) to your JCL            *   FILE 685\n//*           DATASET and submit the job. The JCL step names        *   FILE 685\n//*           ending with KO should end with a RC = 12 and the      *   FILE 685\n//*           JCL step names ending with OK should end with a       *   FILE 685\n//*           RC = 0 or 4.                                          *   FILE 685\n//*                                                                 *   FILE 685\n//*     3) Function / History                                       *   FILE 685\n//*     ---------------------                                       *   FILE 685\n//*                                                                 *   FILE 685\n//*        Function:  Convert a text dataset to of from a XML       *   FILE 685\n//*                   one using a COBOL copybook as reference.      *   FILE 685\n//*                                                                 *   FILE 685\n//*        Invoked from: The ISPF command line (TSO TXT2XML),       *   FILE 685\n//*                      another REXX, a batch job.                 *   FILE 685\n//*                                                                 *   FILE 685\n//*        30/09/02 - Version 0.1                                   *   FILE 685\n//*          + start                                                *   FILE 685\n//*          + indent XML according to the item level.              *   FILE 685\n//*        04/11/02 - Version 0.2                                   *   FILE 685\n//*          + handle multi-line cobol item declaration.            *   FILE 685\n//*          + ignore line numbers in columns 1-6 & 73-80           *   FILE 685\n//*          + ignore level 66, 77, 88 items.                       *   FILE 685\n//*          + stop if level is greater than 50.                    *   FILE 685\n//*          + stop if level is not numeric.                        *   FILE 685\n//*          + stop if some COBOL reserved words are found.         *   FILE 685\n//*          + replace 9(4) by 9999 and X(3) by XXX.                *   FILE 685\n//*        06/11/02 - Version 0.3                                   *   FILE 685\n//*          + handle OCCURS clause for group                       *   FILE 685\n//*            and elementary items.                                *   FILE 685\n//*        21/11/02 - Version 1.0                                   *   FILE 685\n//*          + read line by line instead of reading all  lines.     *   FILE 685\n//*          + write line by line instead of writing all lines.     *   FILE 685\n//*          + accept any case for COBOL item names.                *   FILE 685\n//*        28/06/04 - Version 1.1 RC1                               *   FILE 685\n//*          + Bug corrected : VALUES COBOL clauses are now         *   FILE 685\n//*            ignored.                                             *   FILE 685\n//*          + Make conversion in both senses from XML to           *   FILE 685\n//*            TXT and from TXT to XML.                             *   FILE 685\n//*          + Renumber cobol levels from 1 by 1 so that            *   FILE 685\n//*            identation of XML is independent of absolute         *   FILE 685\n//*            COBOL levels.                                        *   FILE 685\n//*          + Change input file parameter name to txt and          *   FILE 685\n//*            output file parameter name to xml.                   *   FILE 685\n//*          + Added a x000 \"Records processed\" message.            *   FILE 685\n//*          + Added a error message if the file transfer           *   FILE 685\n//*            of TXT2XML has changed verticals bars                *   FILE 685\n//*            (concatenation and OR operator) to |.                *   FILE 685\n//*          + Added a report of cobol items: level, name           *   FILE 685\n//*            type, start and length .                             *   FILE 685\n//*          + During conversion from XML to TXT, check             *   FILE 685\n//*            that XML numeric values are really numeric.          *   FILE 685\n//*          + Error force termination of the program               *   FILE 685\n//*            with return code set to 12.                          *   FILE 685\n//*                                                                 *   FILE 685\n//*     4) Warnings                                                 *   FILE 685\n//*     -----------                                                 *   FILE 685\n//*                                                                 *   FILE 685\n//*          - You have to parse the XML file with the              *   FILE 685\n//*            corresponding DTD, XML schemas.  This REXX will      *   FILE 685\n//*            not do any parsing.                                  *   FILE 685\n//*          - Attributes of XML elements are ignored.              *   FILE 685\n//*          - XML with mixed contents is not supported.            *   FILE 685\n//*          - Element content is supposed to be on only one        *   FILE 685\n//*            line                                                 *   FILE 685\n//*          - Before the conversion from XML to TXT,               *   FILE 685\n//*            THE XML INPUT FILE MUST BE \"XML WELL-FORMED\".        *   FILE 685\n//*          - Two ( or more ) dimmension arrays are not            *   FILE 685\n//*            supported.                                           *   FILE 685\n//*          - level 66, 77, 88 are ignored.                        *   FILE 685\n//*          - binary and packed-decimal data are not supported.    *   FILE 685\n//*          - Escaping of special characters (&lt; instead of      *   FILE 685\n//*            <) is not supported.                                 *   FILE 685\n//*          - CDATA is not supported.                              *   FILE 685\n//*                                                                 *   FILE 685\n//*     5) Todo                                                     *   FILE 685\n//*     -------                                                     *   FILE 685\n//*                                                                 *   FILE 685\n//*          - Support of COBOL binary and packed data ?            *   FILE 685\n//*          - Support of attributes of XML elements ?              *   FILE 685\n//*          - Support of CDATA                                     *   FILE 685\n//*          - Support of escape chars like &lt; for \"<\"            *   FILE 685\n//*          - Support of element content on more than one line     *   FILE 685\n//*                                                                 *   FILE 685\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CNTL": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x02\\r\\x02\\r\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 525, "newlines": 525, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "COB": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x01\\x88\\x01\\x88\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 392, "newlines": 392, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "COB2": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x00\\xa4\\x00\\xa4\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 164, "newlines": 164, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DOC": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12,\\xa9,\\xa9\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 11433, "newlines": 11433, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DOCPDF": {"ttr": 5640, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x18P>P>\\x00\\x00\\xd7\\xc4\\xc6@@@@@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:18:00", "lines": 20542, "newlines": 20542, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "DTD": {"ttr": 14085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x00U\\x00U\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "EXEC": {"ttr": 14088, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x16\\x11\\x16\\x11\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 5649, "newlines": 5649, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PANEL": {"ttr": 16390, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x00}\\x00}\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 125, "newlines": 125, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "README": {"ttr": 16393, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SUNURAX"}, "text": "\n       To install TXT2XML files just execute the member\n       RECEIVE in this dataset. Unless you have special\n       allocation needs, just hit RETURN when you are\n       prompted.\"\n\n       Comments, remarks and bugs are welcome at :\n\n             sunuraxi@users.sourceforge.net\n\n       Web : http://sourceforge.net/projects/txt2xml-rexx/\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RECEIVE": {"ttr": 16395, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x00S\\x00S\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "SUNURAX"}, "text": "        /* this rexx exec is expected to be invoked by the EXEC command\n           thus:\n\n           EXec 'dsname(RECEIVE)'\n\n           Prompting will occur for hlq and optional volser.\n\n           and it will then issue the TSO RECEIVE command for the\n           the following members to create these new data sets:\n\n           Member       Dataset\n           EXEC         hlq.exec\n           CNTL         hlq.cntl\n           DOC          hlq.doc\n           PANEL        hlq.panel\n           TXT          hlq.sample.txt\n           COB          hlq.sample.cob\n           DTD          hlq.sample.dtd\n           COB2         hlq.sample.cob.xml2cob\n           XML          hlq.sample.xml\n\n           You will then need to copy these datasets/members into\n           datasets for production use.\n\n           */\n\n        parse source x1 x2 x3 x4 dsn .\n         x = PROMPT(\"ON\") /* enable prompting */\n\n        say \"Enter desired hlq for target data sets\",\n            \"(default is\" sysvar(\"syspref\")\".TXT2XML.NEW):\"\n        pull hlq\n        hlq = strip(hlq)\n\n        if hlq = \"\" then hlq = sysvar(\"syspref\")\".TXT2XML.NEW\"\n\n        say \"Enter optional volser for target data sets\",\n            \"default is to allow standard allocation to\",\n            \"find a volume.\"\n        pull volser\n        volser = strip(volser)\n\n        if volser <> \"\" then vol = \"vol(\"volser\")\"\n                        else vol = \"\"\n\n        Say \"Using HLQ:\" hlq\n        if vol <> \"\" then\n           Say \"Using Volser:\" volser\n\n        queue \"dsn('\"hlq\".exec')\" vol\n        \"Receive inds('\"dsn\"(exec)')\"\n\n        queue \"dsn('\"hlq\".cntl')\" vol\n        \"Receive inds('\"dsn\"(cntl)')\"\n\n        queue \"dsn('\"hlq\".doc')\" vol\n        \"Receive inds('\"dsn\"(doc)')\"\n\n        queue \"dsn('\"hlq\".panel')\" vol\n        \"Receive inds('\"dsn\"(panel)')\"\n\n        queue \"dsn('\"hlq\".sample.txt')\" vol\n        \"Receive inds('\"dsn\"(txt)')\"\n\n        queue \"dsn('\"hlq\".sample.xml')\" vol\n        \"Receive inds('\"dsn\"(xml)')\"\n\n        queue \"dsn('\"hlq\".sample.cob')\" vol\n        \"Receive inds('\"dsn\"(cob)')\"\n\n        queue \"dsn('\"hlq\".sample.dtd')\" vol\n        \"Receive inds('\"dsn\"(dtd)')\"\n\n        queue \"dsn('\"hlq\".sample.cob.xml2cob')\" vol\n        \"Receive inds('\"dsn\"(cob2)')\"\n\n\n        if sysvar('sysispf') <> \"ACTIVE\" then exit\n        Address ISPEXEC\n           \"Browse dataset('\"hlq\".doc($14histo)')\"\n        Address ISPEXEC\n           \"Browse dataset('\"hlq\".doc($04insta)')\"\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TXT": {"ttr": 16398, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x02;\\x02;\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 571, "newlines": 571, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "XML": {"ttr": 16650, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x01\\x05\\x06\\x8f\\x01\\x05\\x06\\x8f\\t\\x12\\x03\\x8b\\x03\\x8b\\x00\\x00\\xe2\\xe4\\xd5\\xe4\\xd9\\xc1\\xe7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2005-03-09T00:00:00", "modifydate": "2005-03-09T09:12:00", "lines": 907, "newlines": 907, "modlines": 0, "user": "SUNURAX"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT685/FILE685.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT685", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}