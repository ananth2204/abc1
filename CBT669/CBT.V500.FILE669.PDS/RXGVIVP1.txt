/*                                                                rexx
 REXXGBLV test 0 - initial - basic functions
*/
 arg p
 parse var p . 'PGM('pgm')' . 0 . 'TRC('trc')' .
 pgm=word(pgm 'REXXGBLV',1)
 if p<>'' then do
   say 'Parameters:' p
   say 'Pgmname:' pgm
   say 'Trace:  ' trc
 end
 Interpret "say 'Returned version:'" pgm"('version')"
 say ''

 /* signal v050 */

 F='foxtrot'
 D='delta'
 Delta='d'
 X='xerox'
 K='kilo'
 E='echo'
 M='midway'

 Call RunPgm 'rlist','List all known variables...',0
 Call RunPgm 'save var(D*) ','Save D*',0
 Call RunPgm 'list','List pool, should only contain D*',0
 if rexxgblv_vlistn<>2 then,
   exit xmsg('Number of variables listed is' rexxgblv_vlistn+0', not 2',8)
 Call RunPgm 'save','Save all known variables...',0
 Call RunPgm 'list'

 say 'Variables before drop'
 Call DoListVar 'F D X K E M '

 drop  F D X K E M
 say 'Variables after drop'
 Call DoListVar 'F D X K E M '

 Call RunPgm 'load','Reload saved variables',0
 say 'Variables after load'
 Call DoListVar 'F D X K E M '

 /* compare contents after load */
 if  F<>'foxtrot' then exit xmsg('var F not loaded ok',8)
 if  D<>'delta'   then exit xmsg('var D not loaded ok',8)
 if  X<>'xerox'   then exit xmsg('var X not loaded ok',8)
 if  K<>'kilo'    then exit xmsg('var K not loaded ok',8)
 if  E<>'echo'    then exit xmsg('var E not loaded ok',8)
 if  M<>'midway'  then exit xmsg('var M not loaded ok',8)
 say 'Variables reloaded successfully'
 say ''

 /* now test subset of variables */
 Call RunPgm 'drop','Drop variable pool',0
 say 'Test subset of variables'
 va1='kilroy'
 va2=' was'
 va3='  here'
 vb1='    yesterday'
 qq1='q-var 1'
 qq2='q-var 2'
 Call RunPgm 'save var(v*)',,0
 Call RunPgm 'save var(q*)',,0
 Call RunPgm 'list','List store',0
 parse value 'winter is comming' with va1 va2 va3
 vb1='day before yesterday'
 say 'va1-3 and vb1 set to:' va1 ','va2','va3','vb1
 Call RunPgm 'rlist var(v*)','List actual',0

 Call RunPgm 'load  var(va*)','reload va*',0
 if REXXGBLV_VLOADN<>3 then exit xmsg('# of records loaded not 3',20)
 say ''

 say 'Call IVP2'
 if RxGvIvp2()<>0 then exit 8
 say 'Call IVP2 done'

 Call RunPgm 'rlist var(v*)','List actual after update of va*',0
 if va1<>'kilroy' then exit xmsg('var VA1 not loaded ok',8)
 if vb1<>'day before yesterday' then exit xmsg('var VB1 overwritten',8)
 say 'Variables successfully replaced'
 say ''

 say 'Test export / import'
 drop data.
 data='alpha beta foxtrot delta xerox kilo echo midway'
 datan=200
 data.0=datan
 save.0=datan
 expml=0
 do n=1 to datan
   data.n=time('l') copies(data' ',n)
   save.n=data.n
   expml=max(expml,length(data.n))
 end
 say datan 'test records generated for export, size of last:',
   length(data.datan) 'size of largest:' expml
 cc=RunPgm('rexport var(data.) ',,0)
 say 'data.0 after export:' data.0
 drop data.

 cc=RunPgm('rimport',,0)
 impml=0
 say 'data.0 after import:' data.0
 do n=0 to datan
   if data.n<>save.n then do
     say 'Data not matched at #' n
     say '  Old:   ' save.n
     say '  Reload:' data.n
     exit 20
   end
   impml=max(impml,length(data.n))
 end
 if impml<>expml then,
   exit xmsg('imported maxlength' impml 'does not match saved',20)
 say 'Imported data matches exported'
 drop data. save.
 say ''

 /* demo stem-index feature
    for each data.name a data.n is created, plus a data.0  */
 say 'Make index over stem. (INDEX)'
 data.f='foxtrot'
 data.d='delta'
 data.x='xerox'
 data.k='kilo'
 data.e='echo'
 data.m='midway'
 data.2='two'
 data.9='niner'
 Call RunPgm 'rlist var(data.)','data. before',0
 Call RunPgm 'rindex var(data.) stem(index.)','make index',0
 say ''
 Call RunPgm 'rlist var(index.)'
 say ''
 if index.0<>8 then exit xmsg('index.0 is' index.0', not 8')
 say 'data.0=6 as expected'
 say ''
 Call RunPgm 'rlist var(data.)','After'

 say 'Make index over stem. (STEMIX)'
 CAR.BMW     = 'german car make'
 CAR.FORD    = 'USA car make'
 CAR.MAZDA   = 'japanese car make'
 CAR.PEUGEOT = 'french car make'
 Call RunPgm 'stemix stem(car.) ',0
 Call RunPgm 'rlist var(car.)'
 if car.0<>4 then exit xmsg('Stemix not correct',8)

 /* test COPY (build 048) */
 say ''
 say 'Test COPY'
 Call RunPgm 'copy var(data.) prefix(z)'
 Call RunPgm 'rlist var(data.)'
 testcopyn=REXXGBLV_RLISTN
 say REXXGBLV_RLISTN+0 'data. entries found'
 Call RunPgm 'rlist var(zdata.)'
 say REXXGBLV_RLISTN+0 'zdata. entries found'
 if testcopyn<>REXXGBLV_RLISTN then exit xmsg('** missmatch',20)
 say 'counts match'

 /* demo var-index feature introduced in build 049
    for each data* name a stem.n is created, plus a stem.0  */
 say 'Make index over data. (VARIX)'
 drop data. a b c d e f g h i j k l m n o p q r s t u v w x y z
 data.f='foxtrot'
 dataf ='foxtrot'
 data.d='delta'
 data.x='xerox'
 data.k='kilo'
 data.kilo='1000g'
 datae ='echo'
 data.e='echo'
 data.m='midway'
 drop #data.
 Call RunPgm 'rindex var(data*) stem(#data.)','make var index',0
 say ''
 if #data.0<>11 then exit xmsg('#data.0 ne 11, it is' #data.0)
 say '#data.0=11 as expected'
 say ''
 do n=1 to #data.0
   say left('#data.'n,12) left(#data.n,20)
 end
 say ''

 /* test RETURN modification (build 049) */
 say ''
 say 'Test RETURN'
 cc=rexxgblv('return var(t1)')   /* non-existing variable */
 if cc<>'' then exit xmsg('return var(t1) returned' cc', not null')
 say 'return var(t1) returned null as expected'
 cc=rexxgblv('add var(t1) value(test) ')
 cc=rexxgblv('return var(t1)')
 if cc<>'test' then exit xmsg('return var(t1) returned' cc', not ''test''')
 say 'return var(t1) returned ''test'' as expected'
 cc=rexxgblv('return var(t1) pool(t1)')
 if cc<>'' then exit xmsg('return var(t1) pool(t1) returned' cc', not null')
 say 'return var(t1) pool(t1) returned null as expected'
 longvar=copies(xrange('a','z'),100)
 say 'length of longvar:' length(longvar)
 cc=rexxgblv('save var(longvar)')
 nv=rexxgblv('return var(longvar)')
 if nv<>longvar then exit xmsg('returned data not eq LONGVAR variable')
 say 'Test RETURN successful, length of returned value is' length(nv)
 drop nv longvar

 /* test LOADDROP (build 050) */
V050:
 say ''
 say 'Test LOAD&DROP (build 050)'
 v050.v1='Kilroy'
 v050.v2='was'
 v050.v3='here'
 Call RunPgm 'save var(v050.) pool(v050)'
 say REXXGBLV_VSAVEN+0 'entries saved'
 if REXXGBLV_VSAVEN<>3 then exit xmsg('Error, should have been 3')
 drop v050.
 call RunPgm 'rlist var(v050.)','After drop'
 say REXXGBLV_RLISTN+0 'entries listed'
 if REXXGBLV_RLISTN<>0 then exit xmsg('Error, should have been 0')
 Call RunPgm 'map'
 Call RunPgm 'map xtended'
 Call RunPgm 'loaddrop var(v050.) pool(v050)'
 say 'Entries loaded:' REXXGBLV_VLOADN +0
 if REXXGBLV_VLOADN<>3 then exit xmsg('Error, vloadn should have been 3')
 cc=RunPgm('list pool(v050)')
 if REXXGBLV_VLISTN<>3 then exit xmsg('Error, vlistn should have been 3')
trace off

 /* test V051 storage creep fixed */
V051:
 say ''
 say 'v051 test'
 rgn1=RgnInUse()
 cc=RexxGblv('version')
 rgn2=RgnInUse()
 if rgn2<>rgn1 then,
   exit xmsg('Storage creep detected, region increased by' rgn2-rgn1'K',8)
 say 'v051 passed test, region use stayed at' space(rgn1)'K'

 /* test V054 - INDEX fix, full tracing  */
V054:
 say ''
 say "v054 test '"index"'"
 v054d.0 ='zero'
 v054df  ='foxtrot'
 v054dd  ='delta'
 v054d.n ='Norway'
 v054d.6 ='six'
 Call RunPgm 'Save  var(v054d*)   pool(indextest)'
 Call RunPgm 'Index stem(v054x.)  pool(indextest)'
 if v054x.0<>5 then,
   exit xmsg('V054 - Index stem size is' v054x.0', 5 was expected')
 say 'v054 passed index test, index stem size is 5'
 Call RunPgm 'Drop pool(indextest)'
 drop v054d. v054x.
 Call V054TestTrace

 /* test V055 - PULL  */
V055:
 say ''
 say "v055 test '"PULL"'"
 v055d.0 ='zero'
 v055df ='foxtrot'
 v055dd ='delta'
 v055d.n ='Norway'
 v055d.6 ='six'
 parse value 'kilroy was here' with v055p.1 v055p.2 v055p.3
 Call RunPgm 'Save var(v055*) pool(i055)'
 Call RunPgm 'Pull var(v055d*) pool(i055)'
 say 'loadcnt:' rexxgblv_vloadn', delcnt:' rexxgblv_vdeln
 if rexxgblv_vloadn<>5 | rexxgblv_vdeln<>5 then ,
    exit xmsg('Unexpected values, both should have benn 5',8)
 Call RunPgm 'List  pool(i055)'
 if rexxgblv_vlistn<>3 then exit xmsg('List should have shown 3 records',8)
 Call RunPgm 'RList var(v055d*)'
 if rexxgblv_rlistn<>5 then exit xmsg('List should have shown 5 records',8)
 Call RunPgm 'Drop pool(i055)'
 drop v055d. v055p. v055dd v055df

 /* test V056 - ADD, old and new   */
V056:
 say ''
 say 'v056 test ADD'
 Call RunPgm 'drop pool(i056test)'
 testdata1=mvsvar('sysname') date() time('l')
 say 'testdata:' testdata1
 Call RunPgm 'add var(td1) value('testdata1') pool(i056test)'
 Call RunPgm 'List  pool(i056test)'

 testdatavar='i056_test_variable'
 zz=Value(testdatavar,mvsvar('sysname') date() time('l'))
 say 'testdatavar/testdata:' testdatavar'/'Value(testdatavar)
 Call RunPgm 'add var('testdatavar') valvar('testdatavar') pool(i056test)'
 Call RunPgm 'List  pool(i056test)'

 say 'test +1'
 Call RunPgm 'add var(i056var.+) valvar('testdatavar') pool(i056test)'
 Call RunPgm 'List  pool(i056test)'

 /* now verify contents */
 v = rexxgblv('return var(td1) pool(i056test)')
 if v<>testdata1 then exit xmsg("var td1 not '"testdata1"'",8)
 v = rexxgblv('return var('testdatavar') pool(i056test)')
 if v<>value(testdatavar) then,
   exit xmsg('var' testdatavar 'not' value(testdatavar),8)
 v = rexxgblv('return var(i056var.0) pool(i056test)')
 if v<>1 then exit xmsg("var i056var.0 not 1",8)
 v = rexxgblv('return var(i056var.1) pool(i056test)')
 if v<>value(testdatavar) then,
   exit xmsg('var i056var.1 not' value(testdatavar),8)
 say ''

 /* ADD ok  */
 Say 'ADD and V056 ok'

 /*---------------- list to stem - build 057 -------------*/
 drop ls.
 call drwhodata
 cc=RunPgm('save var(drwho*) pool(test057)',,0)
 cc=RunPgm('list pool(test057) liststem(ls.)',,0)
 do n=0 to ls.0
   say 'ls.'n '=' ls.n
 end
 if ls.0<>4+drwho.0 then,
   exit xmsg('ls.0 is' 0+ls.0', not' 4+drwho.0,8)
 drop drwho.
 say 'List DrWho stem... ('ls.0' entries)'
 do n=1 to ls.0
   say ls.n
 end
 cc=RunPgm('drop pool(test057)',,0)
 drop ls. drwho.

 /*---------------- long variable names ------------------*/
 testinganextremelylongstemnameaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz.1=,
 'testinganextremelylongstemdataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1'
 testinganextremelylongstemnameaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz.2=,
 'testinganextremelylongstemdataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa2'
 testinganextremelylongstemnameaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz.3=,
 'testinganextremelylongstemdataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3'
 cc=RunPgm('save var(testing*) pool(longvar)',,0)
 cc=RunPgm('list pool(longvar)',,0)
 drop ,
 testinganextremelylongstemnameaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz.
 cc=RunPgm('load  pool(longvar)',,0)
 say ''

 /*---------------- map PVT - build 057     -------------*/
 cc=RunPgm('map',,0)

 /*---------------- test invalid command handling -------*/
 kilroy='was here'
 cc=RunPgm('zave var(kilroy) trace',,8)
 cc=RunPgm('save vzr(kilroy)',,8)
 say ''

V060:
 /* V060 - test RSTAT              */
 Call DrWhoData
 say 'test V060 - RSTAT'
 Call RunPgm('rlist var(DrWho.)')
 xl=0
 do n=0 to drwho.0
   xl=xl+length(drwho.n)
 end
 say 'RSTAT expected length' xl
 say ''
 r = RunPgm('rstat var(drwho.)')
 say 'RSTAT returned:' r
 if word(r,4)+0 <> xl then exit xmsg('Length missmatch',8)

 /* v060 - test data pattern check */
 v060xn=2 /* expected # of records */
 Call RunPgm 'rindex var(drwho*) data(*program*) stem(#data.)',,
             'make var index',0
 say ''
 if #data.0<>v060xn then exit xmsg('#data.0 ne' v060xn ', it is' #data.0)
 say '#data.0='v060xn 'as expected'
 say ''
 do n=1 to #data.0
   say left('#data.'n,12) left(#data.n,20) value(#data.n)
 end
 say ''

 Call RunPgm 'dropsave var(drwho*) data(*program*) pool(drwho)',,
             'make pool from drwho',0
 Call RunPgm 'list pool(drwho)','list drwho pool',0
 if REXXGBLV_VLISTN<>v060xn,
 then exit xmsg('# records in pool is not' v060xn,20)

 /*- Import from null dataset - build 061                -*/
 zz=bpxwdyn('alloc new delete dd(b061dd)',
   'lrecl(80) recfm(f,b) tracks space(1,1) unit(sysda)')
 Call RunPgm 'import pool(b061) dd(b061dd)','import from null ds',8
 zz=bpxwdyn('free dd(b061dd)')
 say ''

 /*---- rc=4 when no records saved or loaded - build 063 -*/
 drop kilroy kilroy.
 say 'test rc=4 when no records returned - build 063'
 text='kilroy was here'
 zz=RexxGblv('save var(text) pool(p063)')
 cc=RunPgm('load var(test) pool(p063)',,4)
 if cc<>4 then exit xmsg('Null load should set rc 4',20)
 cc=RunPgm('load var(text) pool(z063)',,4)
 if cc<>4 then exit xmsg('Null load should set rc 4',20)
 say ''

 say 'Save non-existing descrete variable'
 cc=RexxGblv('save var(kilroy) pool(p063)')
 if cc<>4 then exit xmsg('Null save should set rc 4',20)
 say 'rc='cc 'text='rexxgblv_msg
 say ''

 say 'Save non-existing generic variable'
 cc=RexxGblv('save var(kilroy.) pool(p063)')
 if cc<>4 then exit xmsg('Null save should set rc 4',20)
 say 'rc='cc 'text='rexxgblv_msg
 say ''


 /*-------------------- all ok ---------------------------*/
 /* end */
 say ''
 exit xmsg('All ok',0)

XMsg: if arg(1)<>'' then say arg(1);return word(arg(2) 99,1)

DoListVar:
 trace off
 do $=1 to words(arg(1))
   say left(word(arg(1),$),12)':<'Value(word(arg(1),$))'>'
 end
 return 0

RunPgm:
 if arg(2)<>'' then say '->' arg(1) '-' arg(2)
 else say '->' arg(1)
 t=''
 if wordpos(translate(word(arg(1),1)),trc)>0 then t='TRACE'
 rexxgblv_msg=''
 Interpret "cc="pgm"(arg(1)" t")"
 say 'retval  "'cc'"'
 say 'message "'strip(REXXGBLV_msg,'t')'"'
 testvl='VSAVEN VLOADN VLISTN RLISTN RLOADN importn exportn vdeln',
        'MAXNL MAXDL MAXNDL'
 do n=1 to words(testvl)
   w =word(testvl,n)
   zz=Value(w,Value('REXXGBLV_'w)+0)
 end
 say 'vsaven='REXXGBLV_VSAVEN+0,
     'vloadn='REXXGBLV_VLOADN+0,
     'vlistn='REXXGBLV_VLISTN+0,
     'vdeln='REXXGBLV_VdelN+0,
     'rlistn='REXXGBLV_RLISTN+0,
     'rloadn='REXXGBLV_RLOADN+0,
     'importn='REXXGBLV_importn+0,
     'exportn='REXXGBLV_exportn+0,
     'maxnl='REXXGBLV_MAXNL+0,
     'maxdl='REXXGBLV_MAXDL+0,
     'maxndl='REXXGBLV_MAXNDL+0
 if cc=0 then return 0
 say '    Rc' cc rexxgblv_msg
 if arg(3)<>'' then if cc>arg(3) then exit 20
 return  cc

DataSort: procedure expose data.
 n=data.0
 h=n
 do while h>1
   h=h%2
   do i=1 to n-h
     j=i
     k=h+i
     do while data.k<data.j
       t=data.j
       data.j=data.k
       data.k=t
       if h>=j then leave
       j=j-h
       k=k-h
     end   /*while data.k<data.j*/
   end     /*i*/
 end       /*while h>1*/
 return

/* Return region in use.  Origin: Mark Zelden's REXXSTOR       */
RgnInUse: Procedure
Numeric digits 14                            /* dflt of 9 not enough!*/
ASCB     = C2d(Storage(224,4))               /* current ASCB         */
LDA      = C2d(Storage(D2x(ASCB + 48),4))    /* local data area      */
LDAEVVRG = C2d(storage(D2x(LDA + 220),4))    /* >16m reg size        */
LDAEVVRG = Right(LDAEVVRG/1024,9)            /* convert to kbytes    */
LDALOAL  = C2d(storage(D2x(LDA + 232),4))    /* <16m reg alloc       */
LDALOAL  = Right(LDALOAL/1024,9)             /* convert to kbytes    */
Return  LDALOAL

V054TestTrace: Procedure expose pgm
 say 'v054 passed trace test'
 v054.1='Kilroy'
 v054.2='was'
 v054.3='here'
 Call RunPgm 'Save  var(v054.)  pool(tracetest) trace(y)'
 Call RunPgm 'Drop pool(tracetest)'
 return 0

DrWhoData:
 drop drwho.
 drwho.1  =  'Doctor Who is a British science-fiction television'
 drwho.2  =  'Programme produced by the BBC from 1963 to the present'
 drwho.3  =  'Day. The programme depicts the adventures of The'
 drwho.4  =  'Doctor, a Time Lord a time-travelling humanoid alien.'
 drwho.5  =  'He explores the universe in his TARDIS, a sentient'
 drwho.6  =  'Time-travelling space ship. Its exterior appears as a'
 drwho.7  =  'Blue British police box, which was a common sight in'
 drwho.8  =  'Britain in 1963 when the series first aired. Along'
 drwho.9  =  'With a succession of companions, the Doctor combats a'
 drwho.10 =  'Variety of foes while working to save civilisations'
 drwho.11 =  'And help people in need.'
 drwho.0  =  11
 drwhowhat=  'Doctor Who is a British sci-fi tv programme from 1963'
 drwhobox =  'TARDIS looks like a blue British police box'
 drwhowho =  'a Time Lord working to save civilisations'
 return 0
