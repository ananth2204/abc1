REXXGBLV saamples


Pass data to a program not called directly from the current one, and
also want to get data back from that program. This is probably the
most common use, it is what REXXGBLV was originally written to do. It
address the lack of global variables in REXX.

Program TOP contains:

 Parm1 = 'Kilroy'
 Zz=RexxGblv('save var(parm1)')
 Call Middle
 Zz=RexxGblv('load var(resp1)')
 Say 'Response to Kilroy was' resp1

Program MIDDLE contains:
 Call Bottom
 Exit 0

Program BOTTOM contains:
 Zz=RexxGblv('load var(parm1)')
 If parm1 = 'Kilroy' then resp1 = 'was here'
 Zz=RexxGblv('save var(resp1)')
 Exit 0


Same sample really, but with a specific pool so not to conflict with
other programs. The pool is dropped when retrieved, so it doesn't
consume space.

Program TOP contains:

 Parm1 = 'Kilroy'
 Zz=RexxGblv('save var(parm1) pool(kilroy)')
 Call Middle
 Zz=RexxGblv('loaddrop var(resp1) pool(kilroy)')
 Say 'Response to Kilroy was' resp1

Program MIDDLE contains:
 Call Bottom
 Exit 0

Program BOTTOM contains:
 cc=RexxGblv('load var(parm1) pool(kilroy)')
 If parm1 = 'Kilroy' then resp1 = 'was here'
 cc=RexxGblv('save var(resp1) pool(kilroy)')
 Exit 0


List REXX variables. This is very usefull for debugging, when you
don't really know what variables might have been set by a program.

 cc=RexxGblv('rlist var(resp*)')   /* everything resp* */
 cc=RexxGblv('rlist')              /* everything       */


Make an index over a stem with non-numeric suffixes. If you don't
know in advance what will be generated, it is impossible for a program
to know the variable names. With the STEMINDEX function, you will.

 Car.mazda='japanese car make'
 Car.ford ='USA car make'
 Car.bmw ='german car make'
 cc=RexxGblv('StemIndex stem(car.)')
Will generate
 CAR.0 = 00000003
 CAR.1 = 'BMW'
 CAR.2 = 'FORD'
 CAR.3 = 'MAZDA'

