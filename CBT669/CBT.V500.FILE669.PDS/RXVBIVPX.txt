 /*                                                             REXX
  RXVSAMBA Installation Verification build 024
 */
 parse source sys type whoami ddn whereami .
 address tso
 maxrc=0
 totdel=0
 totins=0
 dbkeylen=25
 cols100= '----+----1----+----2----+----3----+----4',
       || '----+----5----+----6----+----7----+----8',
       || '----+----9----+----0'
 cols40=left(cols100,40)
 cols80=left(cols100,80)

 arg p
 if p<>'' then say 'Parameters:    ' p
 parse var p . 'PFX('dspfx')' . 0 . 'PGM('pgmname')' .,
       0 . 'DELA('dela')' . 0 . 'VOL('testvol')' .
 parse var whereami q1'.'
 if dspfx='' then dspfx=userid()
 if pos('.',dspfx)=0 then dspfx=dspfx'.RXVSAMBA'
 ksdsds ="'"dspfx".TEST.KSDS'"
 rrdsds ="'"dspfx".TEST.RRDS'"
 if testvol='' then do
   zz=listdsi('sysexec file')
   call silent "listc ent('"sysdsname"') vol"
   testvol= word(translate(value('$.'$.0),' ','-'),2)
 end
 pgmname=word(pgmname 'RXVSAMBA',1)
 dela   =word(dela    'N',1)
 call xmsg 'Program test specs'
 say 'Dataset prefix..' dspfx
 say 'Test KSDS name..' ksdsds
 say 'Test RRDS name..' rrdsds
 say 'Test volume.....' testvol
 say 'Program name....' pgmname
 say 'Delete-after....' dela
 say ''

 /*------------------ Version ----------------------------------------*/
 call xmsg 'Test version'
 cc=RunPgm('version')
 say 'version' RXVBVERS
 say ''

 /*------------------ Status -----------------------------------------*/
 call xmsg center('KSDS',70,'-')
 say ''
 Call MakeKSDS     /* setup test data */
 Call DBinfo 'KSDS'
 if RXVBrecl<>200 then Exit Xmsg('*error*, lrecl should be 200',20)
 say ''

 call xmsg 'Get all begin'
 cc=RxVsamBa('get dd(ksds) stem(lst.)')
 call xmsg 'Get all ended rc' cc 'returned' lst.0 'records'

 Call ListDB 'ListDB before'
 say ''


 /*------------------ Get with mask  ---------------------------------*/

 call xmsg '- Get sequential with mask -'
 cc=RunPgm('get dd(ksds) mask(*LIB*) pos(03) endpos(10) stem(lst.) trace')
 if lst.0<>11 then,
   exit Xmsg('*'lst.0 'records retrieved, not 11',20)+Listlst()
 Call ListLst 'Listed 11 records with mask *LIB* in pos 3-10'
 say ''

 /*------------------ Delete by mask ---------------------------------*/
 call xmsg '- Delete by mask -'
 cc=RunPgm('delete dd(ksds) mask(*PO-*) list(lst.)')
 if RXVBDELE<>3 then,
   exit Xmsg('*'rxvbdele+0 'records deleted, not 3',20)+Listlst()
 Call ListLst 'Deleted 3 records with mask *PO-*'
 say ''


 /*------------------ End ok         ---------------------------------*/
ok:
 Call Rtn 'All ok'

Rtn:
 if arg(1)<>'' then say arg(1)
 if arg(2)<>'' then maxrc=word(arg(2) maxrc,1)
 if dela='Y'   then do
   if Silent("Delete" ksdsds "cl")=0 then,
     say 'Testcl' ksdsds 'deleted'
   else  say 'Testcl' ksdsds 'delete failed'
 end
 exit xmsg('IVP ended rc' maxrc,maxrc)

RunPgm:
 say time() 'Runpgm' arg(1)
 /*
 parse upper value arg(1) with . ' STEM('s')' .
 if s<>'' then zz=Value(s'0',0)
 */
 parse upper value arg(1) with . ' LISTSTEM('s')' .
 if s<>'' then zz=Value(s'0',0)
 Interpret "cc="pgmname"('"arg(1)"')"
 call liststat
 if arg(2)='' then return cc
 if cc<>arg(2) then exit xmsg('rc' cc+0 'ne' arg(2),20)
 return cc

ListStat:
 say time() 'rc' cc 'reads' rxvbread+0,
     'writes' rxvbwrit+0 'inserts' rxvbinse+0 'updates' rxvbupdt+0,
     'deletes' rxvbdele+0 'errmsg "'space(rxvberrm)'"'
 return cc

Silent: zz=outtrap(word(arg(2) '$.',1))
        address tso arg(1);zz=outtrap('off');return rc

Xmsg: say time() arg(1);maxrc=word(arg(2) maxrc,1);return word(arg(2) 0,1)

SayError:
 say 'Error' arg(1)
 cc=RexxGblv('rlist var(rxvb*)')
 return 0

ListDb:
 if arg(1)<>'' then say arg(1)
 Interpret "cc="pgmname"('get dd(ksds) stem(lst.)')"
 if cc<>0 then exit xmsg('listdb rc' cc,99)
 say cols80
 listdbn=lst.0
 Call ListLst 'Database list.....'
 say cols80
 return 0

DBinfo:
 call xmsg 'DB info for DD' arg(1)
 cc=RxVsamBa('info dd('arg(1)')')
 say 'keylen ' RXVBkeyl
 say 'keypos ' RXVBkeyp
 say 'lrecl  ' RXVBrecl
 say 'dbtype ' RXVBdbty
 return 0

ListLst:
 if arg(1)<>'' then say arg(1)
 if datatype(lst.0)<>'NUM' then exit ('Bad list',20)
 say lst.0 'records in list'
 if datatype(lst.0)<>'NUM' | lst.0>200 then exit xmsg('*count error',20)
 say '        'cols100
 do n=1 to lst.0
   say right(n,3,0) right(length(lst.n),3,0) lst.n
 end
 return 0

ListStack:
 do queued()
   parse pull r
   say r
 end
 return 0

MakeKSDS:
 arg p
 cc=Silent("Free dd(ksds)")
 cc=Silent("DELETE" ksdsds "cl")
 "DEFINE CLUSTER(NAME("ksdsds") VOLUME("testvol")",
 "TRACKS(3 3) KEYS("dbkeylen "0) RECORDSIZE(60 200) )",
 "DATA(CISZ(4196))"
 if rc<>0 then do
   say 'Define failed rc' rc,20
   exit 20
 end
 "alloc dd(ksds) da("ksdsds") shr"
 if rc<>0 then exit xmsg('Alloc test db failed' rc)
 say  'Test cluster allocated to fileref KSDS'

 Call MakeTestData
 datan=data.0
 trace off
 /*
 data.0=2
 cc=RxVsamBA('put dd(ksds) stem(data.)')
 if cc<>0 then exit xmsg('Initial write failed rc' cc,20)
 call liststat
 data.0=datan
 */
 cc=RxVsamBA('put dd(ksds) stem(data.)')
 if cc<>0 then exit xmsg('2nd write failed rc' cc,20)
 trace off
 call liststat
 drop data.
 return 0
 if p<>'SILENT' then say qn 'records written to db'
 return 0

MakeTestData:
 queue cols40
 queue 'DOCLIB                            ZXSYS2 PO-E VB            200 32760'
 queue 'ISPF34.LIB                '
 queue 'ISPLLIB                           ZXSYS2 PO         U     27920 27920'
 queue 'ISPMLIB                   '
 data.0=queued()
 do n=1 to data.0
   parse pull r
   data.n=r
 end
 return 0
