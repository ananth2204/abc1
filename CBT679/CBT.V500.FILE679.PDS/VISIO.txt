/* visio rexx macro */
/*---------------------------------------------------------------*/
/* program: visio.spf                                       */
/* date:   2000/02/22                                            */
/* property of: Aguilera Enterprises, Inc.                       */
/* author:      Carlos Aguilera Sr.                              */
/*---------------------------------------------------------------*/
/* function:                                                     */
/*          generate visio flowcharts from                       */
/*       jcl job, exec, and dd statements                        */
/*---------------------------------------------------------------*/
/* Create a temporary member and copy you JCL into it            */
/* invoke this exec VISIO and save the result as a *.CSV file    */
/* Open this file using VISIO and it will flowchart it for you   */
/*---------------------------------------------------------------*/
/* Works in SPF/PC and TSO                                       */
/*---------------------------------------------------------------*/
/* (c) copyright 2004 aguilera enterprises, inc.                 */
/*  all rights reserved.                                         */
/*---------------------------------------------------------------*/
/* address isredit 'macro noprocess'   */
address isredit 'macro'
address isredit '(firstr)  = linenum .zfirst'
address isredit '(lastr)   = linenum .zlast'

last  = lastr
call prer
call readit
address isredit 'up max'
call deletit
tstr = 0
cnt = 0
exe = 0
i = 0
o = 0
x = 0
/*  */
shp = 0
hld = 0
lnk = 0
/*  */
do until (x = lastr)
  cnt = 0
  x = x + 1
  linea = array.x
 call clearit
 parse var linea test1 test2 test3 test4 test5 test6 test7 test8 test9
 cnt = pos('//*',linea)
 if cnt>0  then do
   cnt = 0
  end
  else do
   tstr = pos('//',linea)
   if tstr>0 then call elsejcl
  end
end
/*  */
    shp = shp + 1
    lnk = lnk + 1
    m = 'Shape,'||shp||',@Terminator@,@End of JOB@'
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||exe||','||shp
    o = o + 1
    address isredit "line_after "o" = '"m"'"
/* change the following line for MVS */
/* q = "x'7d'"   (MVS) */
q  = "x'22'"
/* change the following line for MVS */
/* q1 = "x'50'"  (MVS) */
q1 = "x'26'"
address isredit "change ',2,2 ' ',1,2 ' all"
address isredit "change @ "||q||" all"
address isredit "change } "||q1||" all"
address isredit 'reset'
address isredit 'up max'
address isredit 'unnum'
iadsfin = ' '
address ispexec;
"vput ('iadsfin') profile"
         zedsmsg = 'function completed succesfully'
         zedlmsg = 'exit to your member to view your code'
         address ispexec 'setmsg msg(isrz001)'
exit
/*  */
readit:
  i = 0
  do while (i < lastr)
    i = i + 1
   address isredit '(linex) = line 'i
    if rc <> 0 then return
    array.i = linex
  end
  return
/*  */
deletit:
    address isredit 'delete all nx'
      if rc <> 0 then return
ms = '; Flowchart generated by IADS\MVS(c) - Aguilera Enterprises Inc.'
      address isredit "line_after .zl = '"ms"'"
  address isredit 'CAPS = OFF'
  return
/*  */
/*  */
elsejcl:
   if test2 > ' ' then do
   select
     when test2 = 'JOB'    then call jcljob
     when test2 = 'PROC'   then call jclprc
     when test2 = 'PEND'   then call pendr
     when test2 = 'EXEC'   then call jclexe
     when test2 = 'DD'     then call jcldd
     when test2 = 'OUTPUT' then call jclout
     otherwise
     m = 'a'
    end
  end
  return
/*  */
jcljob:
   shp = shp + 1
    m = 'Template,@Flowchart - Advanced.vst@'
    o = o + 1
    parse var test1 v1 '//' v2 ',' v3 .
    address isredit "line_after "o" = '"m"'"
    m = 'Shape,'||shp||',@Tagged Process@,@Start JOB '||v2||'@'
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    if shp > 1 then do
      lnk = lnk + 1
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp-1||','||shp
      o = o + 1
      address isredit "line_after "o" = '"m"'"
    end
  return
/*  */
jclprc:
    shp = shp + 1
    parse var test1 v1 '//' v2 ',' v3 .
    m = 'Shape,'||shp||',@External Interactor@,@START PROC '||v2 v3||'@'
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    if shp > 1 then do
    lnk = lnk + 1
    m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp-1||','||shp
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    end
  return
/*  */
jclexe:
    shp = shp + 1
    lnk = lnk + 1
    exe = shp
    parse var test1 v1 '//' v2 ' ' v3 .
   cnt = wordpos('PGM=',test3)
   if cnt=1  then do
     cnt = 0
      parse var test3 'PGM=' v4 ',' v5
      m = 'Shape,'||shp||',@Create Request@,@Step '||v2||' Program '||v4||'@'
      if v4 = 'SORT' then do
        m = 'Shape,'||shp||',@Decision@,@'||v2||' SORT@'
      end
      if v4 = 'ICEMAN' then do
        m = 'Shape,'||shp||',@Decision@,@'||v2||' SORT@'
      end
    end
    else do
      parse var test3 v4 ',' v5
      m = 'Shape,'||shp||',@Create Request@,@EXEC PROC '||v2||' '||v4 V5||'@'
      if v4 = 'SORT90MB' then do
        m = 'Shape,'||shp||',@Decision@,@'||v2 v4||'@'
      end
      if v4 = 'SORT5MB' then do
        m = 'Shape,'||shp||',@Decision@,@'||v2 v4||'@'
      end
      if v4 = 'SORT25MB' then do
        m = 'Shape,'||shp||',@Decision@,@'||v2 v4||'@'
      end
      if v4 = 'SORT40MB' then do
        m = 'Shape,'||shp||',@Decision@,@'||v2 v4||'@'
      end
    end
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    if hld > 1 then do
        m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||hld||','||shp
    end
    else do
        m = 'Link,@L'||lnk||'@,@Dynamic connector@,,2,'||shp
    end
    o = o + 1
    address isredit "line_after "o" = '"m"'"
  return
/*  */
jclsrt:
    m = 'Shape,'||shp||',@Decision@,@'||v1||' sort@'
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    if exe > 0 then do
        m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||hld||','||shp
    end
    else do
        m = 'Link,@L'||lnk||'@,@Dynamic connector@,,1,'||shp
    end
    o = o + 1
    address isredit "line_after "o" = '"m"'"
  return
/*  */
/*  */
jclout:
    shp = shp + 1
    lnk = lnk + 1
    parse var test1 v1 '//' v2 ',' v3 .
    parse var test3 v4 ',' v5 .
    m = 'Shape,'||shp||',@Lined Document@,@'||v1||' '||v4||'@'
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||exe||','||shp
    o = o + 1
    address isredit "line_after "o" = '"m"'"
  return
/*  */
/*  */
jcldd:
   if exe > 0 then do
    shp = shp + 1
    lnk = lnk + 1
    hld = exe
    parse var test1 v1 '//' v2 ',' v3 ' ' v6
    parse var test3 'DSN=' v4 ',' v5 .
    m = 'Shape,'||shp||',@Disk Storage@,@'||v2||' '||v4||'@'
/*  IF v2 = 'SYSIN ' then do */
    IF test3 = '*' then do
    m = 'Shape,'||shp||',@Deck of cards@,@'||v2||' '||v4||'@'
    end
/*  IF v2 = 'SYSOUT ' then do
    m = 'Shape,'||shp||',@Tagged document@,@'||v2||' '||v4||'@'
    end
    IF v2 = 'SYSPRINT ' then do
    m = 'Shape,'||shp||',@Tagged document@,@'||v2||' '||v4||'@'
    end
    IF v2 = 'SYSUOUT ' then do
    m = 'Shape,'||shp||',@Tagged document@,@'||v2||' '||v4||'@'
    end */
/*    IF test3 = 'SYSOUT=' then do */
   cnt = wordpos('SYSOUT=',test3)
   if cnt=1  then do
     cnt = 0
      m = 'Shape,'||shp||',@Tagged document@,@'||v2||' '||v4||'@'
    end
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||exe||','||shp
      IF test3 = '*' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'DD1' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'DD3' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'SYSIN' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'SYSUT1' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'SYSLIN' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'SORTIN' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'SORTIN01' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
      IF v2 = 'SORTIN1' then do
      m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||shp||','||exe
      end
    o = o + 1
    address isredit "line_after "o" = '"m"'"
   end
  return
/*  */
/*  */
pendr:
    shp = shp + 1
    lnk = lnk + 1
    m = 'Shape,'||shp||',@Terminator@,@'||test1||' End of Proc@'
    o = o + 1
    address isredit "line_after "o" = '"m"'"
    m = 'Link,@L'||lnk||'@,@Dynamic connector@,,'||exe||','||shp
    o = o + 1
    address isredit "line_after "o" = '"m"'"
  return
/*  */
prer:

/* q = "x'7d'"   (mvs) */
q = "x'27'"
q1 = "x'26'"
address isredit "change "||q||" @ all"
address isredit "change "||q1||" } all"

address isredit 'reset'
address isredit 'up max'
  return
/*  */
clearit:
     test1 = ' '
     test2 = ' '
     test3 = ' '
     test4 = ' '
     test5 = ' '
     test6 = ' '
     test7 = ' '
     test8 = ' '
     test9 = ' '
  return
/*  */
