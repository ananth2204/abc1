{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011925000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE398.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE398.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\x06'", "DS1TRBAL": "b'\\x9c\\x0e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xd6\\x00\\x0e\\x02\\xd7\\x00\\x05\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC1": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99(O\\x00\\x99(O\\x18\\x15\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-11T00:00:00", "modifydate": "1999-10-11T18:15:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "Sam,\n\nWe used to have a macro for assisting us with coding CICS macro level\nprograms.  It seems to me that a similar type macro could be useful\nfor programs that use a lot of system data areas.  I usually remembered\nthe data area name, but could not remember the macro (or copy) name.\nThis is a fairly short example.  Maybe you or someone else could take\nthis as a start made make a good macro out of it.\n\nI called it IBM.  A better name may be DATAAREA.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE398": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x08?\\x01\\x00)\\x9f\\x114\\x006\\x00\\x02\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2000-10-25T11:34:00", "lines": 54, "newlines": 2, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 398 is from the contributor of File 171, which was        *   FILE 398\n//*           contributed semi-anonymously.  All correspondence     *   FILE 398\n//*           concerning this file should go through Sam Golob,     *   FILE 398\n//*           and the support questions will be facilitated that    *   FILE 398\n//*           way.                                                  *   FILE 398\n//*                                                                 *   FILE 398\n//*           This file contains a macro called IBMMAC.  This       *   FILE 398\n//*           macro calls other control block mapping macros,       *   FILE 398\n//*           but you don't have to remember their names.           *   FILE 398\n//*           That's the idea.                                      *   FILE 398\n//*                                                                 *   FILE 398\n//*           For example, if you want to map a VTOC DSCB, you      *   FILE 398\n//*           don't have to remember that IBM's mapping macro       *   FILE 398\n//*           name is IECSDSL1, and that you have to code a 1,      *   FILE 398\n//*           2, 3, 4, 5, or 6 afterward, depending on the format   *   FILE 398\n//*           type you want mapped.  With this macro, you only      *   FILE 398\n//*           have to code:    IBMMAC VTOC=4 , or something         *   FILE 398\n//*           similar, depending on the format type you want.       *   FILE 398\n//*                                                                 *   FILE 398\n//*           The original contributor's macro has been improved    *   FILE 398\n//*           by Robert Rosenberg.  Bob Rosenberg's macro is now    *   FILE 398\n//*           included here as member IBMMAC, and the original      *   FILE 398\n//*           contributor's macro is also included, as member       *   FILE 398\n//*           IBMMACO.                                              *   FILE 398\n//*                                                                 *   FILE 398\n//*           There are also two ISPF edit macros called IMAC       *   FILE 398\n//*           and IMACBLD from Dave Alcock included here, which     *   FILE 398\n//*           perform approximately the same function as the        *   FILE 398\n//*           assembler macro IBMMAC--that is, they allow you to    *   FILE 398\n//*           properly generate the coding of IBM macros,           *   FILE 398\n//*           without your having to know all the particulars.      *   FILE 398\n//*           IMACBLD uses the member HANDBOOK (from Gilbert        *   FILE 398\n//*           Saint-flour) to generate IMAC, which is the edit      *   FILE 398\n//*           macro that generates the IBM assembler macro coding.  *   FILE 398\n//*                                                                 *   FILE 398\n//*           Sam Golob                                             *   FILE 398\n//*           P.O. Box 906                                          *   FILE 398\n//*           Tallman, NY  10982-0906                               *   FILE 398\n//*                                                                 *   FILE 398\n//*                                                                 *   FILE 398\n//*           email:  sbgolob@attglobal.net and/or sbgolob@aol.com  *   FILE 398\n//*                                                                 *   FILE 398\n//*           \"Robert A. Rosenberg\" <bob.rosenberg@digitscorp.com>  *   FILE 398\n//*                                                                 *   FILE 398\n//*           Dave Alcock can be reached at his email               *   FILE 398\n//*           addresses:   David Alcock <davea@ticnet.com> (home)   *   FILE 398\n//*                        dalcock@csw.com   (work)                 *   FILE 398\n//*                                                                 *   FILE 398\n//*           The author and I both request that others make an     *   FILE 398\n//*           attempt to expand the IBMMAC macro to include a       *   FILE 398\n//*           larger number of control blocks, and then send the    *   FILE 398\n//*           result back to me, for inclusion in this file.        *   FILE 398\n//*           Thanks in advance, from everybody, for your help.     *   FILE 398\n//*                                                                 *   FILE 398\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HANDBOOK": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x00\\x00\\x00\\x884\\x7f\\x00\\x98\\x12_\\x16\\t\\x01\\x93\\x00,\\x01j\\xc3\\xc2\\xe3\\xf4\\xf2\\xf2@@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "1988-12-12T00:00:00", "modifydate": "1998-05-05T16:09:00", "lines": 403, "newlines": 44, "modlines": 362, "user": "CBT422"}, "text": "//IBMUSERH JOB (ACCT#),HANDBOOK,\n// NOTIFY=&SYSUID,REGION=5M,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//*\n//*    THIS JOB ASSEMBLES SOME MVS CONTROL BLOCKS AND STORES\n//*    THE OUTPUT INTO A PDS FOR ON-LINE VIEWING.\n//*\n//*    TO SAVE DASD SPACE, THE ISPF/PDF'S LMCOPY SERVICE IS INVOKED\n//*    TO PACK EACH MEMBER.\n//*\n//UPDTE   EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=*\n./  ADD NAME=SPFPACK      <=== MAIN MACRO\nPROC 1 MBR\nCONTROL LIST CONLIST NOFLUSH\nISPEXEC SELECT PGM(IEV90) -\n    PARM(NOESD,NORLD,NOOBJECT,NODECK,LINECOUNT(120),TERM)\nIF &LASTCC > 0 THEN GOTO ERROR\nISPEXEC LMINIT DATAID(ID1) DDNAME(SYSPRINT) ENQ(SHR)\nIF &LASTCC > 0 THEN GOTO ERROR\nISPEXEC LMINIT DATAID(ID2) DDNAME(PERM) ENQ(SHRW)\nIF &LASTCC > 0 THEN GOTO ERROR\nISPEXEC LMCOPY FROMID(&ID1) TODATAID(&ID2) TOMEM(&MBR) -\n               REPLACE PACK TRUNC\nIF &LASTCC > 0 THEN GOTO ERROR\nISPEXEC LMFREE DATAID(&ID1)\nIF &LASTCC > 0 THEN GOTO ERROR\nISPEXEC LMFREE DATAID(&ID2)\nIF &LASTCC > 0 THEN GOTO ERROR\nEXIT CODE(0)\nERROR: +\n  ISPEXEC GETMSG MSG(&ZERRMSG) LONGMSG(XX)\n  WRITE &XX\n  EXIT CODE(12)\n//SYSUT2   DD UNIT=VIO,SPACE=(80,(1,,1)),DISP=(,PASS),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)\n//TEMPF    DD UNIT=VIO,SPACE=(CYL,10),DCB=BLKSIZE=12947,DISP=(,PASS)\n//*\n//ASMMAC PROC MBR=\n//TMP     EXEC PGM=IKJEFT01,PARM='ISPSTART CMD(%SPFPACK &MBR)'\n//SYSPROC  DD DSN=*.UPDTE.SYSUT2,DISP=(OLD,PASS)\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//*\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,20)\n//SYSTERM  DD SYSOUT=*\n//SYSPRINT DD DSN=*.UPDTE.TEMPF,DISP=(OLD,PASS)\n//*\n//PERM     DD DSN=IBMUSER.HANDBOOK,\n// DISP=SHR,\n//*DISP=(,CATLG,DELETE),\n// UNIT=SYSALLDA,\n// SPACE=(TRK,(50,5,5)),\n// RECFM=FBM,LRECL=121,DSORG=PO            SDB\n//*\n//ISPPROF  DD UNIT=VIO,SPACE=(800,(1,,1)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)\n//ISPPLIB  DD UNIT=VIO,SPACE=(800,(1,,1)),DCB=*.ISPPROF\n//ISPMLIB  DD DISP=SHR,DSN=ISP.SISPMENU\n//ISPSLIB  DD UNIT=VIO,SPACE=(800,(1,,1)),DCB=*.ISPPROF\n//ISPTLIB  DD DISP=SHR,DSN=ISP.SISPTENU\n//        PEND\n//*\n//ACB    EXEC ASMMAC,MBR=ACB\n         IFGACB\n         END\n//ACEE   EXEC ASMMAC,MBR=ACEE\n         IHAACEE\n         END\n//ASCB   EXEC ASMMAC,MBR=ASCB\n         IHAASCB DSECT=YES,LIST=YES\n         END\n//ASVT   EXEC ASMMAC,MBR=ASVT\n         IHAASVT DSECT=YES,LIST=YES\n         END\n//ASSB   EXEC ASMMAC,MBR=ASSB\n         IHAASSB LIST=YES\n         END\n//ASXB   EXEC ASMMAC,MBR=ASXB\n         IHAASXB DSECT=YES,LIST=YES\n         END\n//ATTACH EXEC ASMMAC,MBR=ATTACH\n         IEZATTCH LIST=YES\n         END\n//BASEA  EXEC ASMMAC,MBR=BASEA\n         IEEBASEA\n         END\n//CDE    EXEC ASMMAC,MBR=CDE\n         IHACDE\n         END\n//CSCB   EXEC ASMMAC,MBR=CSCB\n         IEECHAIN\n         END\n//CSD    EXEC ASMMAC,MBR=CSD\n         IHACSD DSECT=YES\n         END\n//CTXT   EXEC ASMMAC,MBR=CTXT\n         IEZVX100 DSECT=YES\n         END\n//CVT    EXEC ASMMAC,MBR=CVT\n         CVT DSECT=YES,LIST=YES,PREFIX=YES\n         END\n//DCB    EXEC ASMMAC,MBR=DCB\n         DCBD  DSORG=PS\n         END\n//DCBDA  EXEC ASMMAC,MBR=DCBDA\n         DCBD  DSORG=DA\n         END\n//DCE    EXEC ASMMAC,MBR=DCE\n         IECDDCE\n         END\n//DECB   EXEC ASMMAC,MBR=DECB\n         IHADECB DSECT=YES\n         END\n//DFA    EXEC ASMMAC,MBR=DFA\n         IHADFA DSECT=YES\n         END\n//DSAB   EXEC ASMMAC,MBR=DSAB\n         IHADSAB\n         END\n//DSCB1  EXEC ASMMAC,MBR=DSCB1\n         IECSDSL1 1\n         END\n//DSCB4  EXEC ASMMAC,MBR=DSCB4\n         DS    44X'04'\n         IECSDSL1 4\n         END\n//DYNALL EXEC ASMMAC,MBR=DYNALLOC\n*STATUS      OLD=01   MOD=02    NEW=04    SHR=08\n*DISP    UNCATLG=01 CATLG=02 DELETE=04   KEEP=08\n*SPACE                ALX=02   MXIG=04 CONTIG=08\n*LABEL        NL=01    SL=02    NSL=04            SUL=0A\n*             BLP=10  LTM=21     AL=40    AUL=48\n         IEFZB4D0\n         IEFZB4D2\n         END\n//DEB    EXEC ASMMAC,MBR=DEB\n         IEZDEB LIST=YES\n         END\n//DVA    EXEC ASMMAC,MBR=DVA\n         IHADVA DSECT=YES\n         END\n//DVCT   EXEC ASMMAC,MBR=DVCT\n         IHADVCT DSECT=YES\n         END\n//ECT    EXEC ASMMAC,MBR=ECT\n         IKJECT\n         END\n//ECVT   EXEC ASMMAC,MBR=ECVT\n         IHAECVT LIST=YES\n         END\n//EPIE   EXEC ASMMAC,MBR=EPIE\n         IHAEPIE\n         END\n//GDA    EXEC ASMMAC,MBR=GDA\n         IHAGDA\n         END\n//IOB    EXEC ASMMAC,MBR=IOB\n         IEZIOB DSECT=YES\n         END\n//IOCOM  EXEC ASMMAC,MBR=IOCOM\n         IECDIOCM\n         END\n//IPA    EXEC ASMMAC,MBR=IPA\n         IHAIPA\n         END\n//JCT    EXEC ASMMAC,MBR=JCT\nJCT      DSECT\n         IEFAJCTB\n         END\n//JCTX   EXEC ASMMAC,MBR=JCTX\nJCTX     DSECT\n         IEFJCTX\n         END\n//JESCT  EXEC ASMMAC,MBR=JESCT\n         IEFJESCT\n         END\n//JFCB   EXEC ASMMAC,MBR=JFCB\nJFCB     DSECT\n         IEFJFCBN LIST=YES\n         END\n//JMR    EXEC ASMMAC,MBR=JMR\n         IEFJMR\n         END\n//JSAB   EXEC ASMMAC,MBR=JSAB\n         IAZJSAB\n         END\n//JSCB   EXEC ASMMAC,MBR=JSCB\n         IEZJSCB\n         END\n//JSCVT  EXEC ASMMAC,MBR=JSCVT\n         IEFJSCVT\n         END\n//LCCA   EXEC ASMMAC,MBR=LCCA\n         IHALCCA DSECT=YES\n         END\n//LCT    EXEC ASMMAC,MBR=LCT\n         IEFALLCT\n         END\n//LDA    EXEC ASMMAC,MBR=LDA\n         IHALDA\n         END\n//LLE    EXEC ASMMAC,MBR=LLE\n         IHALLE\n         END\n//LPDE   EXEC ASMMAC,MBR=LPDE\n         IHALPDE\n         END\n//LWA    EXEC ASMMAC,MBR=LWA\n         IKJEFLWA\n         END\n//OCE    EXEC ASMMAC,MBR=OCE\n         IECDSECS\n         IECDSECT\n         END\n//ORE    EXEC ASMMAC,MBR=ORE\n         IHAORE DSECT=YES\n         END\n//OUCB   EXEC ASMMAC,MBR=OUCB\n         IRAOUCB DSECT=YES\n         END\n//OUXB   EXEC ASMMAC,MBR=OUXB\n         IHAOUXB DSECT=YES\n         IEZBITS\n         END\n//PCCA   EXEC ASMMAC,MBR=PCCA\n         IHAPCCA DSECT=YES\n         END\n//PDS2   EXEC ASMMAC,MBR=PDS2\n         IHAPDS DSECT=YES,PDSBLDL=YES\n         END\n//PSA    EXEC ASMMAC,MBR=PSA\n         IHAPSA DSECT=YES,LIST=YES\n         END\n//PSCB   EXEC ASMMAC,MBR=PSCB\n         IKJPSCB\n         END\n//RAX    EXEC ASMMAC,MBR=RAX\n         IARRAX                 RSM ADDR SPC BLOCK EXTENSION\n         END\n//RCE    EXEC ASMMAC,MBR=RCE\n         IARRCE                 RSM CONTROL AND ENUMERATION AREA\n         END\n//RCVT   EXEC ASMMAC,MBR=RCVT\n         ICHPRCVT               RACF CVT\n         END\n//RD     EXEC ASMMAC,MBR=RD\n         IHARD                  REGION DESCRIPTOR\n         END\n//RMCT   EXEC ASMMAC,MBR=RMCT\n         IRARMCT DSECT=YES      RESOURCE MANAGET CONTROL TABLE\n         END\n*/SAMB   EXEC ASMMAC,MBR=SAMB\n*        IGGSAMB DSECT=YES\n*        END\n//RB     EXEC ASMMAC,MBR=RB\n         IKJRB DSECT=YES,LIST=YES\n         END\n//REXX   EXEC ASMMAC,MBR=REXX\n         IRXARGTB\n         IRXCMPTB ,            COMPILER TABLE TSO/E 2.3.1\n         IRXDSIB\n         IRXEFPL\n         IRXENVB               ENVIRONMENT BLOCK\n         IRXENVT               ENVIRONMENT TABLE (IRXANCHR)\n         IRXEVALB\n         IRXEXECB\n         IRXEXTE\n         IRXFPDIR\n         IRXINSTB\n         IRXMODNT\n         IRXPACKT\n         IRXPARMB\n         IRXSHVB\n         IRXSUBCT\n         IRXWORKB\n         END\n//RIB    EXEC ASMMAC,MBR=RIB\n         ISGRIB\n         END\n//RPL    EXEC ASMMAC,MBR=RPL\n         IFGRPL\n         IDARMRCD ,                RECORD MGMT ERROR CODES\n         END\n//SCA    EXEC ASMMAC,MBR=SCA\n         IHASCA\n         END\n//SCB    EXEC ASMMAC,MBR=SCB\n         IHASCB DSECT=YES\n         END\n//SCCB   EXEC ASMMAC,MBR=SCCB\n         IHASCCB\n         END\n//SCT    EXEC ASMMAC,MBR=SCT\nSCT      DSECT\n         IEFASCTB\n         END\n//SCTX   EXEC ASMMAC,MBR=SCTX\n         IEFSCTX DSECT=YES\n         END\n//SCVT   EXEC ASMMAC,MBR=SCVT\n         IHASCVT DSECT=YES,LIST=YES\n         END\n//SDWA   EXEC ASMMAC,MBR=SDWA\n         IHASDWA DSECT=YES,VRAMAP=YES\n         END\n//SIOT   EXEC ASMMAC,MBR=SIOT\nSIOT     DSECT\n         IEFASIOT\n         END\n//SMCA   EXEC ASMMAC,MBR=SMCA\n         IEESMCA\n         END\n//SNAP   EXEC ASMMAC,MBR=SNAP\n         IHASNAP DSECT=YES\n         END\n//SPIE   EXEC ASMMAC,MBR=SPIE\n         IHASCA                 SPIE/ESPIE CONTROL AREA\n         IHAEPIE                EXTENDED PROGRAM INTERRUPT ELEMENT\n         IHAPIE                 PROGRAM INTERRUPT ELEMENT\n         IHAPICA                PROGRAM INTERRUPTION CONTROL AREA\n         END\n//SPQE   EXEC ASMMAC,MBR=SPQE\n         IHASPQE                SP Q ELEMENT\n         IHAFBQE                FREE BLOCK\n         IHASPQA                SP Q DESCRIPTOR\n         IHADQE                 DESCRIPTOR Q ELEMENT\n         IHAFQE                 FREE Q ELEMENT\n         IHASPT                 CSA\n         END\n//SSOB   EXEC ASMMAC,MBR=SSOB\n         IEFJSSOB (AL,SO)\n         END\n//SSIB   EXEC ASMMAC,MBR=SSIB\n         IEFJSSIB\n         END\n//SSSA   EXEC ASMMAC,MBR=SSSA\n         IEFSSSA\n         END\n//SSVT   EXEC ASMMAC,MBR=SSVT\n         IEFJSSVT\n         END\n//STCB   EXEC ASMMAC,MBR=STCB\n         IHASTCB LIST=YES\n         END\n//SVT    EXEC ASMMAC,MBR=SVT\n         IHASVT LIST=YES\n         END\n//SWB    EXEC ASMMAC,MBR=SWB\n         IEFSWB\n         END\n//TAXE   EXEC ASMMAC,MBR=TAXE\n         IKJTAXE\n         END\n//TCAS   EXEC ASMMAC,MBR=TCAS\n         IKTTCAST DSECT=YES\n         END\n//TCB    EXEC ASMMAC,MBR=TCB\n         IKJTCB DSECT=YES,LIST=YES\n         END\n//TCT    EXEC ASMMAC,MBR=TCT\n         IEFTCT\n         END\n//TIOT   EXEC ASMMAC,MBR=TIOT\nTIOT     DSECT\n         IEFTIOT1\n         END\n//TMPWA  EXEC ASMMAC,MBR=TMPWA\n         IKJTMPWA\n         END\n//TPC    EXEC ASMMAC,MBR=TPC\n         IEAVVTPC\n         END\n//TQE    EXEC ASMMAC,MBR=TQE\n         IHATQE\n         END\n//TSB    EXEC ASMMAC,MBR=TSB\n         IKJTSB LIST=YES,EXT=YES\n         END\n//TSVT   EXEC ASMMAC,MBR=TSVT\n         IKJTSVT\n         END\n//UCB    EXEC ASMMAC,MBR=UCB\n**       IEFUCBOB LIST=YES,PREFIX=YES,SSMD=YES\n         IEFUCBOB LIST=YES,PREFIX=YES\n         END\n//UCM    EXEC ASMMAC,MBR=UCM\n         IEECUCM LIST=YES,DSECT=YES\n         END\n//UPT    EXEC ASMMAC,MBR=UPT\n         IKJUPT\n         END\n//VLD    EXEC ASMMAC,MBR=IGDVLD\n         IGDVLD\n         END\n//XCF    EXEC ASMMAC,MBR=XCF\n         IXCYQUAA DSECT=YES            XCF-ANSWER AREA\n         END\n//XL     EXEC ASMMAC,MBR=XL\n         IHAXTLST\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IBMMAC": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99(\\x7f\\x00\\x99(\\x7f\\x13\\x03\\x02\\xdd\\x02\\xdd\\x01\\x01\\xc2\\xd6\\xc2\\xd9@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-10-14T00:00:00", "modifydate": "1999-10-14T13:03:00", "lines": 733, "newlines": 733, "modlines": 257, "user": "BOBR"}, "text": ".* ------------------------------------------------------------------ *\n.*                                                                    *\n.*      Simplify including most system control block DSECTs           *\n.*                                                                    *\n.*         ASCB=       (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         ASXB=       (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         CVT=        (YES|NO|PREFIX, LIST|GEN|NOGEN)                *\n.*                                                                    *\n.*         DCB=        (YES|NO, dsorg, devd)                          *\n.*                                                                    *\n.*         DEB=        (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         IOB=        (YES|NO, GEN|NOGEN)                            *\n.*                                                                    *\n.*         JFCB=       (YES|NO, LIST|GEN|NOGEN, dsectname)            *\n.*                                                                    *\n.*         OUCB=       (YES|NO, GEN|NOGEN)                            *\n.*                                                                    *\n.*         PSA=        (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         TCB=        (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         TIOT=       (YES|NO, GEN|NOGEN, dsectname)                 *\n.*                                                                    *\n.*         UCB=        (YES|NO|PREFIX, LIST|GEN|NOGEN)                *\n.*                                                                    *\n.*         VTOC=       n or (n,n,...n)   where n is 1, 2, 3, 4, or 5  *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n         IBMMAC &ASCB=NO,         ASCB DSECT                           +\n               &ASXB=NO,          ASXB DSECT                           +\n               &CVT=NO,           CVT DSECT                            +\n               &DCB=NO,           DCB DSECT                            +\n               &DEB=NO,           DEB DSECT                            +\n               &GEN=YES,          MACRO GENERATED STATEMENTS           +\n               &IOB=NO,           IOB DSECT                            +\n               &JFCB=NO,          JFCB DSECT                           +\n               &OUCB=NO,          OUCB DSECT                           +\n               &PRINT=ON,         SOURCE STATEMENTS                    +\n               &PSA=NO,           PSA DSECT                            +\n               &TCB=NO,           TCB DSECT                            +\n               &TIOT=NO,          TIOT DSECT                           +\n               &UCB=NO,           UCB DSECT                            +\n               &VTOC=             VTOC RECORD DSECT\n         LCLA  &SUB1,&SUB2\n         LCLB  &BADPARM           fLAG FOR BAD PARM ENOUNTERED\n         LCLC  &DEVD,&DSORG,&MGEN\n         LCLC  &PREFIX,&PRT,&LIST,&GEN\n         AIF   (T'&PRINT EQ 'O').INIT020 ASSUME ON\n         AIF   ('&PRINT' EQ 'ON').INIT020\n         AIF   ('&PRINT' EQ 'OFF').INIT010\n         MNOTE 12,'INVALID PRINT OPTION'\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .INIT030\n.INIT010 ANOP\n&PRT     SETC  'OFF'\n         AGO   .INIT030\n.INIT020 ANOP\n&PRT     SETC  'ON'\n.INIT030 ANOP\n         AIF   (T'&GEN EQ 'O').INIT050 ASSUME GEN\n         AIF   ('&GEN' EQ 'YES').INIT050\n         AIF   ('&GEN' EQ 'NO').INIT040\n         MNOTE 12,'INVALID GEN OPTION'\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .INIT060\n.INIT040 ANOP\n&MGEN    SETC  'NOGEN'\n         AGO   .INIT060\n.INIT050 ANOP\n&MGEN    SETC  'GEN'\n.INIT060 ANOP\n         PUSH  PRINT\n         AIF   (NOT &BADPARM).PRINT\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.PRINT   PRINT  &PRT,&MGEN\n.* ------------------------------------------------------------------ *\n.*              ASCB                                                  *\n.* ------------------------------------------------------------------ *\n.ASCB    AIF    (T'&ASCB EQ 'O').ASCB070\n         AIF    ('&ASCB' EQ 'NO').ASCB070\n         AIF    ('&ASCB(1)' EQ 'YES').ASCB010\n         MNOTE  12,'INVALID ASCB OPTION'\n         AIF   (NOT &BADPARM).ASCB005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ASCB005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .ASCB070\n.ASCB010 ANOP\n         AIF    (N'&ASCB EQ 1).ASCB050\n         AIF    (N'&ASCB GT 2).ERR0010\n         AIF    ('&ASCB(2)' EQ 'LIST').ASCB020\n         AIF    ('&ASCB(2)' EQ 'GEN').ASCB030\n         AIF    ('&ASCB(2)' EQ 'NOGEN').ASCB040\n         MNOTE  12,'INVALID ASCB PRINT OPTION'\n         AIF   (NOT &BADPARM).ASCB015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ASCB015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .ASCB070\n.ASCB020 ANOP\n&LIST    SETC   'YES'\n         AGO    .ASCB060\n.ASCB030 ANOP\n&LIST    SETC   'YES'\n&GEN     SETC   'GEN'\n         AGO    .ASCB060\n.ASCB040 ANOP\n&GEN     SETC   'NOGEN'\n         AGO    .ASCB060\n.ASCB050 ANOP\n&LIST    SETC   'NO'\n.ASCB060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               ADDRESS SPACE CONTROL BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).ASCB070\n         PUSH  PRINT\n         PRINT &GEN\n         IHAASCB LIST=&LIST\n         POP   PRINT\n.ASCB070 ANOP\n.* ------------------------------------------------------------------ *\n.*              ASXB                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&ASXB EQ 'O').ASXB070\n         AIF    ('&ASXB' EQ 'NO').ASXB070\n         AIF    ('&ASXB(1)' EQ 'YES').ASXB010\n         MNOTE  12,'INVALID ASXB OPTION'\n         AIF   (NOT &BADPARM).ASXB005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ASXB005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .ASXB070\n.ASXB010 ANOP\n         AIF    (N'&ASXB EQ 1).ASXB050\n         AIF    (N'&ASXB GT 2).ERR0020\n         AIF    ('&ASXB(2)' EQ 'LIST').ASXB020\n         AIF    ('&ASXB(2)' EQ 'GEN').ASXB030\n         AIF    ('&ASXB(2)' EQ 'NOGEN').ASXB040\n         MNOTE  12,'INVALID ASXB PRINT OPTION'\n         AIF   (NOT &BADPARM).ASXB015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ASXB015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .ASXB070\n.ASXB020 ANOP\n&LIST    SETC   'YES'\n         AGO    .ASXB060\n.ASXB030 ANOP\n&LIST    SETC   'YES'\n&GEN     SETC   'GEN'\n         AGO    .ASXB060\n.ASXB040 ANOP\n&GEN     SETC   'NOGEN'\n         AGO    .ASXB060\n.ASXB050 ANOP\n&LIST    SETC   'NO'\n.ASXB060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               ADDRESS SPACE CONTROL BLOCK EXTENSION                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).ASXB070\n         PUSH  PRINT\n         PRINT &GEN\n         IHAASXB LIST=&LIST\n         POP    PRINT\n.ASXB070 ANOP\n.* ------------------------------------------------------------------ *\n.*              CVT                                                   *\n.* ------------------------------------------------------------------ *\n&PREFIX  SETC   'NO'\n         AIF    (T'&CVT EQ 'O').CVT0080\n         AIF    ('&CVT' EQ 'NO').CVT0080\n         AIF    ('&CVT(1)' EQ 'PREFIX').CVT0010\n         AIF    ('&CVT(1)' EQ 'YES').CVT0020\n         MNOTE  12,'INVALID CVT OPTION'\n         AIF   (NOT &BADPARM).CVT0005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.CVT0005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .CVT0080\n.CVT0010 ANOP\n&PREFIX  SETC   'YES'\n.CVT0020 ANOP\n         AIF    (N'&CVT EQ 1).CVT0060\n         AIF    (N'&CVT GT 2).ERR0060\n         AIF    ('&CVT(2)' EQ 'LIST').CVT0030\n         AIF    ('&CVT(2)' EQ 'GEN').CVT0040\n         AIF    ('&CVT(2)' EQ 'NOGEN').CVT0050\n         MNOTE  12,'INVALID CVT PRINT OPTION'\n         AIF   (NOT &BADPARM).CVT0025\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.CVT0025 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .CVT0080\n.CVT0030 ANOP\n&LIST    SETC   'YES'\n         AGO    .CVT0070\n.CVT0040 ANOP\n&LIST    SETC   'YES'\n&GEN     SETC   'GEN'\n         AGO    .CVT0070\n.CVT0050 ANOP\n&GEN     SETC   'NOGEN'\n         AGO    .CVT0070\n.CVT0060 ANOP\n&LIST    SETC   'NO'\n.CVT0070 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               COMMUNICATION VECTOR TABLE                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).CVT0080\n         PUSH  PRINT\n         PRINT &GEN\n         CVT    DSECT=YES,LIST=&LIST,PREFIX=&PREFIX\n         POP    PRINT\n.CVT0080 ANOP\n.* ------------------------------------------------------------------ *\n.*              DCB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&DCB EQ 'O').DCB0050\n         AIF    ('&DCB' EQ 'NO').DCB0050\n         AIF    ('&DCB(1)' EQ 'YES').DCB0010\n         MNOTE  12,'INVALID DCB OPTION'\n         AIF   (NOT &BADPARM).DCB0005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.DCB0005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .DCB0050\n.DCB0010 ANOP\n         AIF    (N'&DCB EQ 1).DCB0020\n         AIF    (N'&DCB GT 3).ERR0030\n&DSORG   SETC   '&DCB(2)'\n         AIF    (N'&DCB EQ 2).DCB0030\n&DEVD    SETC   '&DCB(3)'\n         AGO    .DCB0040\n.DCB0020 ANOP\n&DSORG   SETC   'PS'\n.DCB0030 ANOP\n&DEVD    SETC   ''\n.DCB0040 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               DATA CONTROL BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).DCB0050\n         DCBD DSORG=&DSORG,DEVD=&DEVD\n.DCB0050 ANOP\n.* ------------------------------------------------------------------ *\n.*              DEB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&DEB EQ 'O').DEB0070\n         AIF    ('&DEB' EQ 'NO').DEB0070\n         AIF    ('&DEB(1)' EQ 'YES').DEB0010\n         MNOTE  12,'INVALID DEB OPTION'\n         AIF   (NOT &BADPARM).DEB0005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.DEB0005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .DEB0070\n.DEB0010 ANOP\n         AIF    (N'&DEB EQ 1).DEB0050\n         AIF    (N'&DEB GT 2).ERR0110\n         AIF    ('&DEB(2)' EQ 'LIST').DEB0020\n         AIF    ('&DEB(2)' EQ 'GEN').DEB0030\n         AIF    ('&DEB(2)' EQ 'NOGEN').DEB0040\n         MNOTE  12,'INVALID DEB PRINT OPTION'\n         AIF   (NOT &BADPARM).DEB0015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.DEB0015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .DEB0070\n.DEB0020 ANOP\n&LIST    SETC   'YES'\n         AGO    .DEB0060\n.DEB0030 ANOP\n&LIST    SETC   'YES'\n&SETC    SETC   'GEN'\n         AGO    .DEB0060\n.DEB0040 ANOP\n&GEN     SETC   'NOGEN'\n         AGO    .DEB0060\n.DEB0050 ANOP\n&LIST    SETC   'NO'\n.DEB0060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               DATA EXTENT BLOCK                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).DEB0070\n         PUSH  PRINT\n         PRINT &GEN\n         IEZDEB  LIST=&LIST\n         POP    PRINT\n.DEB0070 ANOP\n.* ------------------------------------------------------------------ *\n.*              IOB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&IOB EQ 'O').IOB0050\n         AIF    ('&IOB' EQ 'NO').IOB0050\n         AIF    ('&IOB(1)' EQ 'YES').IOB0010\n         MNOTE  12,'INVALID IOB OPTION'\n         AIF   (NOT &BADPARM).IOB0005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.IOB0005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .IOB0050\n.IOB0010 ANOP\n         AIF    (N'&IOB EQ 1).IOB0040\n         AIF    (N'&IOB GT 2).ERR0120\n.*       AIF    (N'&IOB GT 2).ERR0030 <----- WAS IN ERROR\n         AIF    ('&IOB(2)' EQ 'GEN').IOB0020\n         AIF    ('&IOB(2)' EQ 'NOGEN').IOB0030\n         MNOTE  12,'INVALID IOB PRINT OPTION'\n         AIF   (NOT &BADPARM).IOB0015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.IOB0015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .IOB0050\n.IOB0020 ANOP\n&GEN     SETC   'GEN'\n         AGO    .IOB0040\n.IOB0030 ANOP\n&GEN     SETC   'NOGEN'\n.IOB0040 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               INPUT/OUTPUT BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).IOB0050\n         PUSH  PRINT\n         PRINT &GEN\n         IEZIOB\n         POP    PRINT\n.IOB0050 ANOP\n.* ------------------------------------------------------------------ *\n.*              JFCB                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&JFCB EQ 'O').JFCB090\n         AIF    ('&JFCB' EQ 'NO').JFCB090\n         AIF    ('&JFCB(1)' EQ 'YES').JFCB010\n         MNOTE  12,'INVALID JFCB OPTION'\n         AIF   (NOT &BADPARM).JFCB005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.JFCB005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .JFCB090\n.JFCB010 ANOP\n         AIF    (N'&JFCB EQ 1).JFCB060\n         AIF    (N'&JFCB GT 3).ERR0040\n         AIF    (T'&JFCB(2) EQ 'O').JFCB060\n         AIF    ('&JFCB(2)' EQ 'LIST').JFCB020\n         AIF    ('&JFCB(2)' EQ 'GEN').JFCB030\n         AIF    ('&JFCB(2)' EQ 'NOGEN').JFCB040\n         MNOTE  12,'INVALID JFCB PRINT OPTION'\n         AIF   (NOT &BADPARM).JFCB015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.JFCB015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .JFCB090\n.JFCB020 ANOP\n&LIST    SETC   'YES'\n         AGO    .JFCB060\n.JFCB030 ANOP\n&LIST    SETC   'YES'\n&GEN     SETC   'GEN'\n         AGO    .JFCB060\n.JFCB040 ANOP\n&GEN     SETC   'NOGEN'\n.JFCB060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               JOB FILE CONTROL BLOCK                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (N'&JFCB LT 3).JFCB070\n&JFCB(3) DSECT\n         AGO   .JFCB080\n.JFCB070 ANOP\nJFCB     DSECT\n.JFCB080 ANOP\n         AIF   (&BADPARM).JFCB090\n         PRINT &GEN\n         IEFJFCBN LIST=&LIST\n         POP    PRINT\n.JFCB090 ANOP\n.* ------------------------------------------------------------------ *\n.*              OUCB                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&OUCB EQ 'O').OUCB050\n         AIF    ('&OUCB' EQ 'NO').OUCB050\n         AIF    ('&OUCB(1)' EQ 'YES').OUCB010\n         MNOTE  12,'INVALID OUCB OPTION'\n         AIF   (NOT &BADPARM).OUCB005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.OUCB005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .OUCB050\n.OUCB010 ANOP\n         AIF    (N'&IOB EQ 1).OUCB040\n         AIF    (N'&IOB GT 2).ERR0100\n         AIF    ('&IOB(2)' EQ 'GEN').OUCB020\n         AIF    ('&IOB(2)' EQ 'NOGEN').OUCB030\n         MNOTE  12,'INVALID OUCB PRINT OPTION'\n         AIF   (NOT &BADPARM).OUCB015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.OUCB015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .OUCB050\n.OUCB020 ANOP\n&GEN     SETC   'GEN'\n         AGO    .OUCB040\n.OUCB030 ANOP\n&GEN     SETC   'NOGEN'\n.OUCB040 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               RESOURCE MANAGER (RSM) USER CONTROL BLOCK             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).OUCB050\n         PRINT &GEN\n         IRAOUCB\n         POP    PRINT\n.OUCB050 ANOP\n.* ------------------------------------------------------------------ *\n.*              PSA                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&PSA EQ 'O').PSA0070\n         AIF    ('&PSA' EQ 'NO').PSA0070\n         AIF    ('&PSA(1)' EQ 'YES').PSA0010\n         MNOTE  12,'INVALID PSA OPTION'\n         AIF   (NOT &BADPARM).PSA0005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.PSA0005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .PSA0070\n.PSA0010 ANOP\n         AIF    (N'&PSA EQ 1).PSA0050\n         AIF    (N'&PSA GT 2).ERR0050\n         AIF    ('&PSA(2)' EQ 'LIST').PSA0020\n         AIF    ('&PSA(2)' EQ 'GEN').PSA0030\n         AIF    ('&PSA(2)' EQ 'NOGEN').PSA0040\n         MNOTE  12,'INVALID PSA PRINT OPTION'\n         AIF   (NOT &BADPARM).PSA0015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.PSA0015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .PSA0070\n.PSA0020 ANOP\n&LIST    SETC   'YES'\n         AGO    .PSA0060\n.PSA0030 ANOP\n&LIST    SETC   'YES'\n&GEN     SETC   'GEN'\n         AGO    .PSA0060\n.PSA0040 ANOP\n&GEN     SETC   'NOGEN'\n         AGO    .PSA0060\n.PSA0050 ANOP\n&LIST    SETC   'NO'\n.PSA0060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               PREFIXED SAVE AREA                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).PSA0070\n         PRINT &GEN\n         IHAPSA  LIST=&LIST\n         POP    PRINT\n.PSA0070 ANOP\n.* ------------------------------------------------------------------ *\n.*              TCB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&TCB EQ 'O').TCB0070\n         AIF    ('&TCB' EQ 'NO').TCB0070\n         AIF    ('&TCB(1)' EQ 'YES').TCB0010\n         MNOTE  12,'INVALID TCB OPTION'\n         AIF   (NOT &BADPARM).TCB0005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.TCB0005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .TCB0070\n.TCB0010 ANOP\n         AIF    (N'&TCB EQ 1).TCB0050\n         AIF    (N'&TCB GT 2).ERR0070\n         AIF    ('&TCB(2)' EQ 'LIST').TCB0020\n         AIF    ('&TCB(2)' EQ 'GEN').TCB0030\n         AIF    ('&TCB(2)' EQ 'NOGEN').TCB0040\n         MNOTE  12,'INVALID TCB PRINT OPTION'\n         AIF   (NOT &BADPARM).TCB0015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.TCB0015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .TCB0070\n.TCB0020 ANOP\n&LIST    SETC   'YES'\n         AGO    .TCB0060\n.TCB0030 ANOP\n&LIST    SETC   'YES'\n&GEN     SETC   'GEN'\n         AGO    .TCB0060\n.TCB0040 ANOP\n&GEN     SETC   'NOGEN'\n         AGO    .TCB0060\n.TCB0050 ANOP\n&LIST    SETC   'NO'\n.TCB0060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               TASK CONTROL BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).TCB0070\n         PRINT &GEN\n         IKJTCB  LIST=&LIST\n         POP    PRINT\n.TCB0070 ANOP\n.* ------------------------------------------------------------------ *\n.*              TIOT                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&TIOT EQ 'O').TIOT060\n         AIF    ('&TIOT' EQ 'NO').TIOT060\n         AIF    ('&TIOT' EQ 'YES').TIOT010\n         MNOTE  12,'INVALID TIOT OPTION'\n         AIF   (NOT &BADPARM).TIOT005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.TIOT005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .TIOT060\n.TIOT010 ANOP\n         AIF    (N'&TIOT EQ 1).TIOT050\n         AIF    (N'&TIOT GT 3).ERR0080\n         AIF    (T'&TIOT(2) EQ 'O').TIOT040\n         AIF    ('&TIOT(2)' EQ 'GEN').TIOT020\n         AIF    ('&TIOT(2)' EQ 'NOGEN').TIOT030\n         MNOTE  12,'INVALID TIOT PRINT OPTION'\n         AIF   (NOT &BADPARM).TIOT015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.TIOT015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .TIOT060\n.TIOT020 ANOP\n&GEN     SETC   'GEN'\n         AGO    .TIOT040\n.TIOT030 ANOP\n&GEN     SETC   'NOGEN'\n.TIOT040 ANOP\n         AIF    (T'&TIOT(3) EQ 'O').TIOT050\n&TIOT(3) DSECT\n.TIOT050 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               TASK I/O TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).TIOT060\n         PRINT &GEN\n         IEFTIOT1\n         POP    PRINT\n.TIOT060 ANOP\n.* ------------------------------------------------------------------ *\n.*              UCB                                                   *\n.* ------------------------------------------------------------------ *\n&PREFIX  SETC   'NO'\n         AIF    (T'&UCB EQ 'O').UCB0080\n         AIF    ('&UCB' EQ 'NO').UCB0080\n         AIF    ('&UCB(1)' EQ 'PREFIX').UCB0010\n         AIF    ('&UCB(1)' EQ 'YES').UCB0020\n         MNOTE  12,'INVALID UCB OPTION'\n         AIF   (NOT &BADPARM).UCB0005\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.UCB0005 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .UCB0080\n.UCB0010 ANOP\n&PREFIX  SETC   'YES'\n.UCB0020 ANOP\n         AIF    (N'&UCB EQ 1).UCB0060\n         AIF    (N'&UCB GT 2).ERR0090\n         AIF    ('&UCB(2)' EQ 'LIST').UCB0030\n         AIF    ('&UCB(2)' EQ 'GEN').UCB0040\n         AIF    ('&UCB(2)' EQ 'NOGEN').UCB0050\n         MNOTE  12,'INVALID UCB PRINT OPTION'\n         AIF   (NOT &BADPARM).UCB0015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.UCB0015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .UCB0080\n.UCB0030 ANOP\n&LIST    SETC   'YES'\n         AGO    .UCB0070\n.UCB0040 ANOP\n&LIST    SETC   'YES'\n&GEN     SETC   'GEN'\n         AGO    .UCB0070\n.UCB0050 ANOP\n&GEN     SETC   'NOGEN'\n         AGO    .UCB0070\n.UCB0060 ANOP\n&LIST    SETC   'NO'\n.UCB0070 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               UNIT CONTROL BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (&BADPARM).UCB0080\n         PRINT &GEN\n         IEFUCBOB LIST=&LIST,PREFIX=&PREFIX\n         POP    PRINT\n.UCB0080 ANOP\n.* ------------------------------------------------------------------ *\n.*        VTOC records (format-1, -2, -3, -4, or -5)                  *\n.* ------------------------------------------------------------------ *\n         AIF  (N'&VTOC LT 1).VTOC020\n&SUB1    SETA 1\n         AIF   (&BADPARM).VTOC020\n.VTOC010 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               VTOC RECORD                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IECSDSL1 &VTOC(&SUB1)\n         AIF  (&SUB1 EQ N'&VTOC).VTOC020\n&SUB1    SETA &SUB1+1\n         AGO  .VTOC010\n.VTOC020 ANOP\n         POP   PRINT        RESTORE PRINT SETTINGS TO PRE MACRO STATUS\n         MEXIT\n.* ------------------------------------------------------------------ *\n.*        ERRORS                                                      *\n.* ------------------------------------------------------------------ *\n.ERR0010 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR ASCB'\n         AIF   (NOT &BADPARM).ERR0015\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0015 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .ASCB070\n.ERR0020 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR ASXB'\n         AIF   (NOT &BADPARM).ERR0025\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0025 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .ASXB070\n.ERR0030 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR DCB'\n         AIF   (NOT &BADPARM).ERR0035\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0035 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .DCB0050\n.ERR0040 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR JFCB'\n         AIF   (NOT &BADPARM).ERR0045\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0045 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .JFCB090\n.ERR0050 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR PSA'\n         AIF   (NOT &BADPARM).ERR0055\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0055 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .PSA0070\n.ERR0060 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR CVT'\n         AIF   (NOT &BADPARM).ERR0065\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0065 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .CVT0080\n.ERR0070 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR TCB'\n         AIF   (NOT &BADPARM).ERR0075\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0075 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .TCB0070\n.ERR0080 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR TIOT'\n         AIF   (NOT &BADPARM).ERR0085\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0085 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .TIOT060\n.ERR0090 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR UCB'\n         AIF   (NOT &BADPARM).ERR0095\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0095 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .UCB0080\n.ERR0100 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR OUCB'\n         AIF   (NOT &BADPARM).ERR0105\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0105 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .OUCB050\n.ERR0110 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR DEB'\n         AIF   (NOT &BADPARM).ERR0115\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0115 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .DEB0070\n.ERR0120 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR IOB'\n         AIF   (NOT &BADPARM).ERR0125\n         MNOTE *,'EXPANSION SUPPRESSED. MACRO WILL DO SYNTAX CHECK'\n.ERR0125 ANOP\n&BADPARM SETB  1                   FLAG AS A BAD PARM ENCOUNTERED\n         AGO   .IOB0050\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IBMMACO": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99(O\\x00\\x99(O\\x19\\x18\\x02)\\x02)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-10-11T00:00:00", "modifydate": "1999-10-11T19:18:00", "lines": 553, "newlines": 553, "modlines": 0, "user": "SBGOLOB"}, "text": ".* ------------------------------------------------------------------ *\n.*                                                                    *\n.*      Simplify including most system control block DSECTs           *\n.*                                                                    *\n.*         ASCB=       (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         ASXB=       (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         CVT=        (YES|NO|PREFIX, LIST|GEN|NOGEN)                *\n.*                                                                    *\n.*         DCB=        (YES|NO, dsorg, devd)                          *\n.*                                                                    *\n.*         DEB=        (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         IOB=        (YES|NO, GEN|NOGEN)                            *\n.*                                                                    *\n.*         JFCB=       (YES|NO, LIST|GEN|NOGEN, dsectname)            *\n.*                                                                    *\n.*         OUCB=       (YES|NO, GEN|NOGEN)                            *\n.*                                                                    *\n.*         PSA=        (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         TCB=        (YES|NO, LIST|GEN|NOGEN)                       *\n.*                                                                    *\n.*         TIOT=       (YES|NO, GEN|NOGEN, dsectname)                 *\n.*                                                                    *\n.*         UCB=        (YES|NO|PREFIX, LIST|GEN|NOGEN)                *\n.*                                                                    *\n.*         VTOC=       n or (n,n,...n)   where n is 1, 2, 3, 4, or 5  *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n         IBMMAC &ASCB=NO,         ASCB DSECT                           +\n               &ASXB=NO,          ASXB DSECT                           +\n               &CVT=NO,           CVT DSECT                            +\n               &DCB=NO,           DCB DSECT                            +\n               &DEB=NO,           DEB DSECT                            +\n               &GEN=YES,          MACRO GENERATED STATEMENTS           +\n               &IOB=NO,           IOB DSECT                            +\n               &JFCB=NO,          JFCB DSECT                           +\n               &OUCB=NO,          OUCB DSECT                           +\n               &PRINT=ON,         SOURCE STATEMENTS                    +\n               &PSA=NO,           PSA DSECT                            +\n               &TCB=NO,           TCB DSECT                            +\n               &TIOT=NO,          TIOT DSECT                           +\n               &UCB=NO,           UCB DSECT                            +\n               &VTOC=             VTOC RECORD DSECT\n         LCLA  &SUB1,&SUB2\n         LCLC  &DEVD,&DSORG,&MGEN\n         LCLC  &PREFIX,&PRT,&LIST\n         AIF   (T'&PRINT EQ 'O').INIT030\n         AIF   ('&PRINT' EQ 'ON').INIT020\n         AIF   ('&PRINT' EQ 'OFF').INIT020\n         MNOTE 12,'INVALID PRINT OPTION'\n         MEXIT\n.INIT010 ANOP\n&PRT     SETC  'OFF'\n         AGO   .INIT030\n.INIT020 ANOP\n&PRT     SETC  '&PRINT'\n.INIT030 ANOP\n         AIF   (T'&GEN EQ 'O').INIT060\n         AIF   ('&GEN' EQ 'YES').INIT050\n         AIF   ('&GEN' EQ 'NO').INIT040\n         MNOTE 12,'INVALID GEN OPTION'\n         MEXIT\n.INIT040 ANOP\n&MGEN    SETC  'NOGEN'\n         AGO   .INIT060\n.INIT050 ANOP\n&MGEN    SETC  'GEN'\n.INIT060 ANOP\n         PRINT  &PRT,&MGEN\n.* ------------------------------------------------------------------ *\n.*              ASCB                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&ASCB EQ 'O').ASCB070\n         AIF    ('&ASCB' EQ 'NO').ASCB070\n         AIF    ('&ASCB(1)' EQ 'YES').ASCB010\n         MNOTE  12,'INVALID ASCB OPTION'\n         MEXIT\n.ASCB010 ANOP\n         AIF    (N'&ASCB EQ 1).ASCB050\n         AIF    (N'&ASCB GT 2).ERR0010\n         AIF    ('&ASCB(2)' EQ 'LIST').ASCB020\n         AIF    ('&ASCB(2)' EQ 'GEN').ASCB030\n         AIF    ('&ASCB(2)' EQ 'NOGEN').ASCB040\n         MNOTE  12,'INVALID ASCB PRINT OPTION'\n         MEXIT\n.ASCB020 ANOP\n&LIST    SETC   'YES'\n         AGO    .ASCB060\n.ASCB030 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .ASCB060\n.ASCB040 ANOP\n         PRINT  NOGEN\n         AGO    .ASCB060\n.ASCB050 ANOP\n&LIST    SETC   'NO'\n.ASCB060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               ADDRESS SPACE CONTROL BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAASCB LIST=&LIST\n         PRINT  &PRT,&MGEN\n.ASCB070 ANOP\n.* ------------------------------------------------------------------ *\n.*              ASXB                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&ASXB EQ 'O').ASXB070\n         AIF    ('&ASXB' EQ 'NO').ASXB070\n         AIF    ('&ASXB(1)' EQ 'YES').ASXB010\n         MNOTE  12,'INVALID ASXB OPTION'\n         MEXIT\n.ASXB010 ANOP\n         AIF    (N'&ASXB EQ 1).ASXB050\n         AIF    (N'&ASXB GT 2).ERR0020\n         AIF    ('&ASXB(2)' EQ 'LIST').ASXB020\n         AIF    ('&ASXB(2)' EQ 'GEN').ASXB030\n         AIF    ('&ASXB(2)' EQ 'NOGEN').ASXB040\n         MNOTE  12,'INVALID ASXB PRINT OPTION'\n         MEXIT\n.ASXB020 ANOP\n&LIST    SETC   'YES'\n         AGO    .ASXB060\n.ASXB030 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .ASXB060\n.ASXB040 ANOP\n         PRINT  NOGEN\n         AGO    .ASXB060\n.ASXB050 ANOP\n&LIST    SETC   'NO'\n.ASXB060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               ADDRESS SPACE CONTROL BLOCK EXTENSION                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAASXB LIST=&LIST\n         PRINT  &PRT,&MGEN\n.ASXB070 ANOP\n.* ------------------------------------------------------------------ *\n.*              CVT                                                   *\n.* ------------------------------------------------------------------ *\n&PREFIX  SETC   'NO'\n         AIF    (T'&CVT EQ 'O').CVT0080\n         AIF    ('&CVT' EQ 'NO').CVT0080\n         AIF    ('&CVT(1)' EQ 'PREFIX').CVT0010\n         AIF    ('&CVT(1)' EQ 'YES').CVT0020\n         MNOTE  12,'INVALID CVT OPTION'\n         MEXIT\n.CVT0010 ANOP\n&PREFIX  SETC   'YES'\n.CVT0020 ANOP\n         AIF    (N'&CVT EQ 1).CVT0060\n         AIF    (N'&CVT GT 2).ERR0060\n         AIF    ('&CVT(2)' EQ 'LIST').CVT0030\n         AIF    ('&CVT(2)' EQ 'GEN').CVT0040\n         AIF    ('&CVT(2)' EQ 'NOGEN').CVT0050\n         MNOTE  12,'INVALID CVT PRINT OPTION'\n         MEXIT\n.CVT0030 ANOP\n&LIST    SETC   'YES'\n         AGO    .CVT0070\n.CVT0040 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .CVT0070\n.CVT0050 ANOP\n         PRINT  NOGEN\n         AGO    .CVT0070\n.CVT0060 ANOP\n&LIST    SETC   'NO'\n.CVT0070 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               COMMUNICATION VECTOR TABLE                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CVT    DSECT=YES,LIST=&LIST,PREFIX=&PREFIX\n         PRINT  &PRT,&MGEN\n.CVT0080 ANOP\n.* ------------------------------------------------------------------ *\n.*              DCB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&DCB EQ 'O').DCB0050\n         AIF    ('&DCB' EQ 'NO').DCB0050\n         AIF    ('&DCB(1)' EQ 'YES').DCB0010\n         MNOTE  12,'INVALID DCB OPTION'\n         MEXIT\n.DCB0010 ANOP\n         AIF    (N'&DCB EQ 1).DCB0020\n         AIF    (N'&DCB GT 3).ERR0030\n&DSORG   SETC   '&DCB(2)'\n         AIF    (N'&DCB EQ 2).DCB0030\n&DEVD    SETC   '&DCB(3)'\n         AGO    .DCB0040\n.DCB0020 ANOP\n&DSORG   SETC   'PS'\n.DCB0030 ANOP\n&DEVD    SETC   ''\n.DCB0040 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               DATA CONTROL BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=&DSORG,DEVD=&DEVD\n.DCB0050 ANOP\n.* ------------------------------------------------------------------ *\n.*              DEB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&DEB EQ 'O').DEB0070\n         AIF    ('&DEB' EQ 'NO').DEB0070\n         AIF    ('&DEB(1)' EQ 'YES').DEB0010\n         MNOTE  12,'INVALID DEB OPTION'\n         MEXIT\n.DEB0010 ANOP\n         AIF    (N'&DEB EQ 1).DEB0050\n         AIF    (N'&DEB GT 2).ERR0110\n         AIF    ('&DEB(2)' EQ 'LIST').DEB0020\n         AIF    ('&DEB(2)' EQ 'GEN').DEB0030\n         AIF    ('&DEB(2)' EQ 'NOGEN').DEB0040\n         MNOTE  12,'INVALID DEB PRINT OPTION'\n         MEXIT\n.DEB0020 ANOP\n&LIST    SETC   'YES'\n         AGO    .DEB0060\n.DEB0030 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .DEB0060\n.DEB0040 ANOP\n         PRINT  NOGEN\n         AGO    .DEB0060\n.DEB0050 ANOP\n&LIST    SETC   'NO'\n.DEB0060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               DATA EXTENT BLOCK                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZDEB  LIST=&LIST\n         PRINT  &PRT,&MGEN\n.DEB0070 ANOP\n.* ------------------------------------------------------------------ *\n.*              IOB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&IOB EQ 'O').IOB0050\n         AIF    ('&IOB' EQ 'NO').IOB0050\n         AIF    ('&IOB(1)' EQ 'YES').IOB0010\n         MNOTE  12,'INVALID IOB OPTION'\n         MEXIT\n.IOB0010 ANOP\n         AIF    (N'&IOB EQ 1).IOB0040\n         AIF    (N'&IOB GT 2).ERR0030\n         AIF    ('&IOB(2)' EQ 'GEN').IOB0020\n         AIF    ('&IOB(2)' EQ 'NOGEN').IOB0030\n         MNOTE  12,'INVALID IOB PRINT OPTION'\n         MEXIT\n.IOB0020 ANOP\n         PRINT  GEN\n         AGO    .IOB0040\n.IOB0030 ANOP\n         PRINT  NOGEN\n.IOB0040 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               INPUT/OUTPUT BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\n         PRINT  &PRT,&MGEN\n.IOB0050 ANOP\n.* ------------------------------------------------------------------ *\n.*              JFCB                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&JFCB EQ 'O').JFCB090\n         AIF    ('&JFCB' EQ 'NO').JFCB090\n         AIF    ('&JFCB(1)' EQ 'YES').JFCB010\n         MNOTE  12,'INVALID JFCB OPTION'\n         MEXIT\n.JFCB010 ANOP\n         AIF    (N'&JFCB EQ 1).JFCB060\n         AIF    (N'&JFCB GT 3).ERR0040\n         AIF    (T'&JFCB(2) EQ 'O').JFCB060\n         AIF    ('&JFCB(2)' EQ 'LIST').JFCB020\n         AIF    ('&JFCB(2)' EQ 'GEN').JFCB030\n         AIF    ('&JFCB(2)' EQ 'NOGEN').JFCB040\n         MNOTE  12,'INVALID JFCB PRINT OPTION'\n         MEXIT\n.JFCB020 ANOP\n&LIST    SETC   'YES'\n         AGO    .JFCB060\n.JFCB030 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .JFCB060\n.JFCB040 ANOP\n         PRINT  NOGEN\n.JFCB060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               JOB FILE CONTROL BLOCK                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         AIF   (N'&JFCB LT 3).JFCB070\n&JFCB(3) DSECT\n         AGO   .JFCB080\n.JFCB070 ANOP\nJFCB     DSECT\n.JFCB080 ANOP\n         IEFJFCBN LIST=&LIST\n         PRINT  &PRT,&MGEN\n.JFCB090 ANOP\n.* ------------------------------------------------------------------ *\n.*              OUCB                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&OUCB EQ 'O').OUCB050\n         AIF    ('&OUCB' EQ 'NO').OUCB050\n         AIF    ('&OUCB(1)' EQ 'YES').OUCB010\n         MNOTE  12,'INVALID OUCB OPTION'\n         MEXIT\n.OUCB010 ANOP\n         AIF    (N'&IOB EQ 1).OUCB040\n         AIF    (N'&IOB GT 2).ERR0100\n         AIF    ('&IOB(2)' EQ 'GEN').OUCB020\n         AIF    ('&IOB(2)' EQ 'NOGEN').OUCB030\n         MNOTE  12,'INVALID OUCB PRINT OPTION'\n         MEXIT\n.OUCB020 ANOP\n         PRINT  GEN\n         AGO    .OUCB040\n.OUCB030 ANOP\n         PRINT  NOGEN\n.OUCB040 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               RESOURCE MANAGER (RSM) USER CONTROL BLOCK             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IRAOUCB\n         PRINT  &PRT,&MGEN\n.OUCB050 ANOP\n.* ------------------------------------------------------------------ *\n.*              PSA                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&PSA EQ 'O').PSA0070\n         AIF    ('&PSA' EQ 'NO').PSA0070\n         AIF    ('&PSA(1)' EQ 'YES').PSA0010\n         MNOTE  12,'INVALID PSA OPTION'\n         MEXIT\n.PSA0010 ANOP\n         AIF    (N'&PSA EQ 1).PSA0050\n         AIF    (N'&PSA GT 2).ERR0050\n         AIF    ('&PSA(2)' EQ 'LIST').PSA0020\n         AIF    ('&PSA(2)' EQ 'GEN').PSA0030\n         AIF    ('&PSA(2)' EQ 'NOGEN').PSA0040\n         MNOTE  12,'INVALID PSA PRINT OPTION'\n         MEXIT\n.PSA0020 ANOP\n&LIST    SETC   'YES'\n         AGO    .PSA0060\n.PSA0030 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .PSA0060\n.PSA0040 ANOP\n         PRINT  NOGEN\n         AGO    .PSA0060\n.PSA0050 ANOP\n&LIST    SETC   'NO'\n.PSA0060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               PREFIXED SAVE AREA                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  LIST=&LIST\n         PRINT  &PRT,&MGEN\n.PSA0070 ANOP\n.* ------------------------------------------------------------------ *\n.*              TCB                                                   *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&TCB EQ 'O').TCB0070\n         AIF    ('&TCB' EQ 'NO').TCB0070\n         AIF    ('&TCB(1)' EQ 'YES').TCB0010\n         MNOTE  12,'INVALID TCB OPTION'\n         MEXIT\n.TCB0010 ANOP\n         AIF    (N'&TCB EQ 1).TCB0050\n         AIF    (N'&TCB GT 2).ERR0070\n         AIF    ('&TCB(2)' EQ 'LIST').TCB0020\n         AIF    ('&TCB(2)' EQ 'GEN').TCB0030\n         AIF    ('&TCB(2)' EQ 'NOGEN').TCB0040\n         MNOTE  12,'INVALID TCB PRINT OPTION'\n         MEXIT\n.TCB0020 ANOP\n&LIST    SETC   'YES'\n         AGO    .TCB0060\n.TCB0030 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .TCB0060\n.TCB0040 ANOP\n         PRINT  NOGEN\n         AGO    .TCB0060\n.TCB0050 ANOP\n&LIST    SETC   'NO'\n.TCB0060 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               TASK CONTROL BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IKJTCB  LIST=&LIST\n         PRINT  &PRT,&MGEN\n.TCB0070 ANOP\n.* ------------------------------------------------------------------ *\n.*              TIOT                                                  *\n.* ------------------------------------------------------------------ *\n         AIF    (T'&TIOT EQ 'O').TIOT060\n         AIF    ('&TIOT' EQ 'NO').TIOT060\n         AIF    ('&TIOT' EQ 'YES').TIOT010\n         MNOTE  12,'INVALID TIOT OPTION'\n         MEXIT\n.TIOT010 ANOP\n         AIF    (N'&TIOT EQ 1).TIOT050\n         AIF    (N'&TIOT GT 3).ERR0080\n         AIF    (T'&TIOT(2) EQ 'O').TIOT040\n         AIF    ('&TIOT(2)' EQ 'GEN').TIOT020\n         AIF    ('&TIOT(2)' EQ 'NOGEN').TIOT030\n         MNOTE  12,'INVALID TIOT PRINT OPTION'\n         MEXIT\n.TIOT020 ANOP\n         PRINT  GEN\n         AGO    .TIOT040\n.TIOT030 ANOP\n         PRINT  NOGEN\n.TIOT040 ANOP\n         AIF    (T'&TIOT(3) EQ 'O').TIOT050\n&TIOT(3) DSECT\n.TIOT050 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               TASK I/O TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEFTIOT1\n         PRINT  &PRT,&MGEN\n.TIOT060 ANOP\n.* ------------------------------------------------------------------ *\n.*              UCB                                                   *\n.* ------------------------------------------------------------------ *\n&PREFIX  SETC   'NO'\n         AIF    (T'&UCB EQ 'O').UCB0080\n         AIF    ('&UCB' EQ 'NO').UCB0080\n         AIF    ('&UCB(1)' EQ 'PREFIX').UCB0010\n         AIF    ('&UCB(1)' EQ 'YES').UCB0020\n         MNOTE  12,'INVALID UCB OPTION'\n         MEXIT\n.UCB0010 ANOP\n&PREFIX  SETC   'YES'\n.UCB0020 ANOP\n         AIF    (N'&UCB EQ 1).UCB0060\n         AIF    (N'&UCB GT 2).ERR0090\n         AIF    ('&UCB(2)' EQ 'LIST').UCB0030\n         AIF    ('&UCB(2)' EQ 'GEN').UCB0040\n         AIF    ('&UCB(2)' EQ 'NOGEN').UCB0050\n         MNOTE  12,'INVALID UCB PRINT OPTION'\n         MEXIT\n.UCB0030 ANOP\n&LIST    SETC   'YES'\n         AGO    .UCB0070\n.UCB0040 ANOP\n&LIST    SETC   'YES'\n         PRINT  GEN\n         AGO    .UCB0070\n.UCB0050 ANOP\n         PRINT  NOGEN\n         AGO    .UCB0070\n.UCB0060 ANOP\n&LIST    SETC   'NO'\n.UCB0070 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               UNIT CONTROL BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEFUCBOB LIST=&LIST,PREFIX=&PREFIX\n         PRINT  &PRT,&MGEN\n.UCB0080 ANOP\n.* ------------------------------------------------------------------ *\n.*        VTOC records (format-1, -2, -3, -4, or -5)                  *\n.* ------------------------------------------------------------------ *\n         AIF  (N'&VTOC LT 1).VTOC020\n&SUB1    SETA 1\n.VTOC010 ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               VTOC RECORD                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IECSDSL1 &VTOC(&SUB1)\n         AIF  (&SUB1 EQ N'&VTOC).VTOC020\n&SUB1    SETA &SUB1+1\n         AGO  .VTOC010\n.VTOC020 ANOP\n         MEXIT\n.* ------------------------------------------------------------------ *\n.*        ERRORS                                                      *\n.* ------------------------------------------------------------------ *\n.ERR0010 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR ASCB'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR ASXB'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR DCB'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR JFCB'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR PSA'\n         MEXIT\n.ERR0060 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR CVT'\n         MEXIT\n.ERR0070 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR TCB'\n         MEXIT\n.ERR0080 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR TIOT'\n         MEXIT\n.ERR0090 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR UCB'\n         MEXIT\n.ERR0100 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR OUCB'\n         MEXIT\n.ERR0110 ANOP\n         MNOTE  12,'TOO MANY PARAMETERS FOR DEB'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IMAC": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99(_\\x00\\x99(_\\x186\\x02\\x9d\\x02\\x9d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-12T00:00:00", "modifydate": "1999-10-12T18:36:00", "lines": 669, "newlines": 669, "modlines": 0, "user": "SBGOLOB"}, "text": "/* REXX\n |\n | Name: IMAC\n |\n | Author: David Alcock\n |         davea@ticnet.com\n |\n | Purpose: This is an ISPF edit macro that inserts IBM macro\n |          DSECT assembler statements into an assembler source file.\n |\n | Thanks: This edit macro was inspired by the CBT tape file 398\n |         which is an Assembler MACRO that invokes the IBM macros\n |         during assembly and not during edit.\n |\n | Syntax: IMAC ACB\n |         IMAC DSCB4\n |         IMAC DYNALLOC\n |\n | Note: The code that selects the Assembler DSECT statement\n |       was generated by the IMACBLD Rexx Exec.\n |\n | Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It\n |             is provided for your enjoyment and neither David\n |             Alcock or his employer provides any warranty for it's\n |             use.  I'd like to hear how it works on your system.\n */\n\naddress ISPEXEC\n\n'ISREDIT MACRO (RMAC) NOPROCESS'\nrmac = translate(rmac)\n\n/* Process line commands. Ensure that \"A\" or \"B\" was specified */\n'CONTROL ERRORS RETURN'\n'ISREDIT PROCESS DEST'\n\nselect\n  when rc = 0  then 'ISREDIT (ZDEST) = LINENUM .ZDEST'\n  when rc <= 8 then do /* No A or B entered */\n       zedsmsg = 'Enter \"A\" or \"B\" on an ISPF line'\n       zedlmsg = 'IMAC requires an \"A\" or \"B\" line command'\n       'SETMSG MSG(ISRZ001)'\n       exit 12\n       end\n  when rc < 20 then exit 12 /* Conflicting line commands */\n  when rc = 20 then zdest = 0\n  otherwise\n    exit 12\n    end\n\n'CONTROL ERRORS CANCEL'\n\n/* Start of IMACBLD generated code - - - - - - - - - - - - */\n\nselect\n  when rmac = 'ACB' then do\n       aline = '         IFGACB   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ACEE' then do\n       aline = '         IHAACEE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ASCB' then do\n       aline = '         IHAASCB DSECT=YES,LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ASVT' then do\n       aline = '         IHAASVT DSECT=YES,LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ASSB' then do\n       aline = '         IHAASSB LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ASXB' then do\n       aline = '         IHAASXB DSECT=YES,LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ATTACH' then do\n       aline = '         IEZATTCH LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'BASEA' then do\n       aline = '         IEEBASEA ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'CDE' then do\n       aline = '         IHACDE   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'CSCB' then do\n       aline = '         IEECHAIN ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'CSD' then do\n       aline = '         IHACSD DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'CTXT' then do\n       aline = '         IEZVX100 DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'CVT' then do\n       aline = '         CVT DSECT=YES,LIST=YES,PREFIX=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DCB' then do\n       aline = '         DCBD  DSORG=PS'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DCBDA' then do\n       aline = '         DCBD  DSORG=DA'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DCE' then do\n       aline = '         IECDDCE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DECB' then do\n       aline = '         IHADECB DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DFA' then do\n       aline = '         IHADFA DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DSAB' then do\n       aline = '         IHADSAB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DSCB1' then do\n       aline = '         IECSDSL1 1'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DSCB4' then do\n       aline = '         DS    44X'04''\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IECSDSL1 4'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DYNALL' then do\n       aline = '         IEFZB4D0 ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFZB4D2 ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DEB' then do\n       aline = '         IEZDEB LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DVA' then do\n       aline = '         IHADVA DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'DVCT' then do\n       aline = '         IHADVCT DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ECT' then do\n       aline = '         IKJECT   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ECVT' then do\n       aline = '         IHAECVT LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'EPIE' then do\n       aline = '         IHAEPIE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'GDA' then do\n       aline = '         IHAGDA   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'IOB' then do\n       aline = '         IEZIOB DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'IOCOM' then do\n       aline = '         IECDIOCM ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'IPA' then do\n       aline = '         IHAIPA   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JCT' then do\n       aline = '         JCT      DSECT'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFAJCTB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JCTX' then do\n       aline = '         JCTX     DSECT'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFJCTX  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JESCT' then do\n       aline = '         IEFJESCT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JFCB' then do\n       aline = '         JFCB     DSECT'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFJFCBN LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JMR' then do\n       aline = '         IEFJMR   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JSAB' then do\n       aline = '         IAZJSAB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JSCB' then do\n       aline = '         IEZJSCB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'JSCVT' then do\n       aline = '         IEFJSCVT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'LCCA' then do\n       aline = '         IHALCCA DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'LCT' then do\n       aline = '         IEFALLCT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'LDA' then do\n       aline = '         IHALDA   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'LLE' then do\n       aline = '         IHALLE   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'LPDE' then do\n       aline = '         IHALPDE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'LWA' then do\n       aline = '         IKJEFLWA ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'OCE' then do\n       aline = '         IECDSECS ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IECDSECT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'ORE' then do\n       aline = '         IHAORE DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'OUCB' then do\n       aline = '         IRAOUCB DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'OUXB' then do\n       aline = '         IHAOUXB DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEZBITS  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'PCCA' then do\n       aline = '         IHAPCCA DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'PDS2' then do\n       aline = '         IHAPDS DSECT=YES,PDSBLDL=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'PSA' then do\n       aline = '         IHAPSA DSECT=YES,LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'PSCB' then do\n       aline = '         IKJPSCB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RAX' then do\n       aline = '         IARRAX   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RCE' then do\n       aline = '         IARRCE   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RCVT' then do\n       aline = '         ICHPRCVT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RD' then do\n       aline = '         IHARD    ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RMCT' then do\n       aline = '         IRARMCT DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RB' then do\n       aline = '         IKJRB DSECT=YES,LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'REXX' then do\n       aline = '         IRXARGTB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXCMPTB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXDSIB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXEFPL  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXENVB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXENVT  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXEVALB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXEXECB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXEXTE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXFPDIR ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXINSTB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXMODNT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXPACKT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXPARMB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXSHVB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXSUBCT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IRXWORKB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RIB' then do\n       aline = '         ISGRIB   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'RPL' then do\n       aline = '         IFGRPL   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IDARMRCD ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SCA' then do\n       aline = '         IHASCA   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SCB' then do\n       aline = '         IHASCB DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SCCB' then do\n       aline = '         IHASCCB  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SCT' then do\n       aline = '         SCT      DSECT'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFASCTB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SCTX' then do\n       aline = '         IEFSCTX DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SCVT' then do\n       aline = '         IHASCVT DSECT=YES,LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SDWA' then do\n       aline = '         IHASDWA DSECT=YES,VRAMAP=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SIOT' then do\n       aline = '         SIOT     DSECT'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFASIOT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SMCA' then do\n       aline = '         IEESMCA  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SNAP' then do\n       aline = '         IHASNAP DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SPIE' then do\n       aline = '         IHASCA   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHAEPIE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHAPIE   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHAPICA  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SPQE' then do\n       aline = '         IHASPQE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHAFBQE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHASPQA  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHADQE   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHAFQE   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IHASPT   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SSOB' then do\n       aline = '         IEFJSSOB (AL,SO)'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SSIB' then do\n       aline = '         IEFJSSIB ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SSSA' then do\n       aline = '         IEFSSSA  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SSVT' then do\n       aline = '         IEFJSSVT ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'STCB' then do\n       aline = '         IHASTCB LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SVT' then do\n       aline = '         IHASVT LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'SWB' then do\n       aline = '         IEFSWB   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TAXE' then do\n       aline = '         IKJTAXE  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TCAS' then do\n       aline = '         IKTTCAST DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TCB' then do\n       aline = '         IKJTCB DSECT=YES,LIST=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TCT' then do\n       aline = '         IEFTCT   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TIOT' then do\n       aline = '         TIOT     DSECT'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFTIOT1 ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TMPWA' then do\n       aline = '         IKJTMPWA ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TPC' then do\n       aline = '         IEAVVTPC ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TQE' then do\n       aline = '         IHATQE   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TSB' then do\n       aline = '         IKJTSB LIST=YES,EXT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'TSVT' then do\n       aline = '         IKJTSVT  ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'UCB' then do\n       aline = '         **       IEFUCBOB LIST=YES,PREFIX=YES,SSMD=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       aline = '         IEFUCBOB LIST=YES,PREFIX=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'UCM' then do\n       aline = '         IEECUCM LIST=YES,DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'UPT' then do\n       aline = '         IKJUPT   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'VLD' then do\n       aline = '         IGDVLD   ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'XCF' then do\n       aline = '         IXCYQUAA DSECT=YES'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\n  when rmac = 'XL' then do\n       aline = '         IHAXTLST ,'\n       'VPUT (ALINE)'\n       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\n       end\notherwise\n  say 'Macro 'rmac' is not supported by IMAC.  We support:'\n  say ' '\n  say 'ACB    ACEE   ASCB   ASVT   ASSB   ASXB   ATTACH BASEA  CDE    '\n  say 'CSCB   CSD    CTXT   CVT    DCB    DCBDA  DCE    DECB   DFA    '\n  say 'DSAB   DSCB1  DSCB4  DYNALL DEB    DVA    DVCT   ECT    ECVT   '\n  say 'EPIE   GDA    IOB    IOCOM  IPA    JCT    JCTX   JESCT  JFCB   '\n  say 'JMR    JSAB   JSCB   JSCVT  LCCA   LCT    LDA    LLE    LPDE   '\n  say 'LWA    OCE    ORE    OUCB   OUXB   PCCA   PDS2   PSA    PSCB   '\n  say 'RAX    RCE    RCVT   RD     RMCT   RB     REXX   RIB    RPL    '\n  say 'SCA    SCB    SCCB   SCT    SCTX   SCVT   SDWA   SIOT   SMCA   '\n  say 'SNAP   SPIE   SPQE   SSOB   SSIB   SSSA   SSVT   STCB   SVT    '\n  say 'SWB    TAXE   TCAS   TCB    TCT    TIOT   TMPWA  TPC    TQE    '\n  say 'TSB    TSVT   UCB    UCM    UPT    VLD    XCF    XL     '\n  end\n/* End of IMACBLD generated code - - - - - - - - - - - - - */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IMACBLD": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99(_\\x00\\x99(_\\x187\\x00\\x8d\\x00\\x8d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-12T00:00:00", "modifydate": "1999-10-12T18:37:00", "lines": 141, "newlines": 141, "modlines": 0, "user": "SBGOLOB"}, "text": "/* REXX\n |\n | Name: IMACBLD\n |\n | Author: David Alcock\n |         davea@ticnet.com\n |\n | Purpose: This exec rebuilds the IMAC edit macro when Gilbert\n |          Saint-flour's FILE183(HANDBOOK) changes.\n |\n | Requirements: This program reads in an edited version of\n |               the CBT tape FILE183(HANDBOOK).  These are the\n |               statements that look like:\n |\n |               //ACB    EXEC ASMMAC,MBR=ACB\n |                        IFGACB\n |                        END\n |               //ACEE   EXEC ASMMAC,MBR=ACEE\n |                        IHAACEE\n |                        END\n |\n |               If you want the Rexx Exec to work in a 80 column\n |               Fixed Block dataset, you should edit out the\n |               comment lines.\n |\n | Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It\n |             is provided for your enjoyment and neither David\n |             Alcock or his employer provides any warranty for it's\n |             use.  I'd like to hear how it works on your system.\n */\n\naddress TSO\n\n/*---------------------------------------------------------------------\n | Read in the edited FILE183(HANDBOOK) statements\n ------------------------------------------------------------------- */\n\narg sysut1_dsn\nif sysut1_dsn == \"\" then ,\n   sysut1_dsn = 'dave.sdsf(@imac)'  /* Edited FILE183(HANDBOOK */\n\nx = LISTDSI(sysut1_dsn)\nif x <> 0 then do\n   say \"Error accessing DSN:\" sysut1_dsn\n   say \"> \"sysmsglvl1\n   say \"> \"sysmsglvl2\n   say \"> SYSREASON: \"sysreason\n   exit\n   end\n\nsysut1_pdsn = sysdsname\nparse value sysut1_dsn with . \"(\" member \")\" .\nif member <> \"\" then do\n   sysut1_pdsn = sysut1_pdsn\"(\"strip(member)\")\"\n   end\nsay \"Processing input file \"sysut1_pdsn\n\nsysut1_dd = \"SYU1\"random()\n\"ALLOCATE FILE(\"sysut1_dd\") DA('\"sysut1_pdsn\"') SHR REUSE\"\n\"EXECIO * DISKR \"sysut1_dd\" (FINIS STEM sysut1_file.\"\n\"FREE FILE(\"sysut1_dd\")\"\n\n/*---------------------------------------------------------------------\n | Create the output file\n ------------------------------------------------------------------- */\n\nsysut2_dsn = sysvar(sysuid)\".@SYSUT2\"\nsay \"Writing to DSN=\"sysut2_dsn\n\"DELETE '\"sysut2_dsn\"'\"\n\"ALLOCATE FILE(SYSUT2) DA('\"sysut2_dsn\"')\",\n         \"UNIT(SYSDA) NEW REUSE SPACE(5 5) TRACKS\",\n         \"LRECL(137) BLKSIZE(32760) RECFM(V B)\"\n\n\"NEWSTACK\"               /* Place to put SYSUT2 output */\n\n/*---------------------------------------------------------------------\n | Write out the select statements\n ------------------------------------------------------------------- */\n\nqueue \"/* Start of IMACBLD generated code - - - - - - - - - - - - */\"\nqueue \"    \"\nqueue \"select\"\ndo i = 1 to sysut1_file.0\n   if substr(sysut1_file.i,1,2) == \"//\" then do\n      mac = strip(substr(sysut1_file.i,3,7))\n      queue \"  when rmac = '\"mac\"' then do\"\n      iterate\n      end\n   if word(sysut1_file.i,1) = \"END\" then do\n      queue \"       end\"\n      iterate\n      end\n\n   aline = strip(sysut1_file.i)\n\n   /* if makes \"IFGACB\" into \"IFGACB  ,\" - fancy smancy */\n   if words(aline) == 1 then do\n      aline = left(aline,8)\" ,\"\n      end\n\n   aline = \"'         \"aline\"'\"\n   queue \"       aline = \"aline\n   queue \"       'VPUT (ALINE)'\"\n   queue \"       'ISREDIT LINE_AFTER 'zdest' = DATALINE (ALINE)'\"\n   end\n\n/*---------------------------------------------------------------------\n | Write out the otherwise statements\n ------------------------------------------------------------------- */\n\nqueue \"otherwise\"\nj = 0\nline = \"\"\nqueue \"  say 'Macro 'rmac' is not supported by IMAC.  We support:'\"\nqueue \"  say ' ' \"\n\ndo i = 1 to sysut1_file.0\n   if substr(sysut1_file.i,1,2) == \"//\" then do\n      line = line ||substr(sysut1_file.i,3,7)\n      j = j + 1\n      if j = 9 then do\n         queue \"  say '\"line\"'\"\n         j = 0\n         line = \"\"\n         end\n      iterate\n      end\n   end\nif line <> \"\" then queue \"  say '\"line\"'\"\nqueue \"  end\"\nqueue \"/* End of IMACBLD generated code - - - - - - - - - - - - - */\"\n\n/*---------------------------------------------------------------------\n | The fat lady starts singing now\n ------------------------------------------------------------------- */\n\nqueue ''      /* add null line to indicate End-Of-File */\n\"EXECIO * DISKW SYSUT2 (FINIS\"\n\"DELSTACK\"\n\"FREE FILE(SYSUT2)\"\nexit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT398/FILE398.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT398", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}