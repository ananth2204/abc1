{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011554000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3879876, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 25, "INMDSNAM": "CBT.V500.FILE247.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3879876, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3879876, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE247.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00?\\x07'", "DS1TRBAL": "b'\\x9bB'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xb5\\x00\\x05\\x01\\xb9\\x00\\x08\\x00@'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x004\\x01\\x19\\x05\\x7f\\x01\\x19\\x05\\x7f\"#\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-02-26T00:00:00", "modifydate": "2019-02-26T22:23:34", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  247\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE247\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 112 MEMBERS COUNTED; CUMULATIVE SIZE IS 33,844 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/26/19    22:23:34    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x13\\x00\\x95\\x18\\x0f\\x01\\x173\\x1f\\x18E\\x01\\x00\\x004\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1995-06-29T00:00:00", "modifydate": "2017-11-27T18:45:13", "lines": 256, "newlines": 52, "modlines": 0, "user": "SBGOLOB"}, "text": "               SYS1.BRODCAST NOTES - THE BRODCAST MANAGER\n\n\nNote:  Please see the new member $$EXPAND for instructions how to\n       expand your SYS1.BRODCAST dataset, without losing any messages.\n\n\n      The BRODCAST MANAGER is a set of programs designed to help the\nsystems programming staff in maintaining the SYS1.BRODCAST dataset, so\nit doesn't fill up, leaving the staff helpless.  In the past, when this\nhappened, we would be forced to run the SYNC command or the SYNC\nsubcommand of ACCOUNT.  This would completely initialize SYS1.BRODCAST\nand wipe out every userid's notification messages.  IBM in its wisdom,\nhas not even provided us with a means of determining which users had\nthe messages waiting for them.\n\n      Normal updating of SYS1.BRODCAST is done by the IBM programs,\nSEND and LISTBC.  SEND adds messages to a userid's message chain.\nLISTBC displays and clears all messages from the userid's message\nchain.  All NOTIFY messages from a job's JCL, are translated into\nSEND commands by the operating system.\n\n      Usually, the clogging of SYS1.BRODCAST happens when a TSO userid\naccumulates messages and is not logged onto.  At logon time, the normal\nprocessing invokes the LISTBC command, which (as we said) displays and\ndeletes all user messages in SYS1.BRODCAST that have accumulated for\nthat userid.  If the user does not ever logon, then LISTBC is not\ninvoked, and these messages pile up.  Sometimes, a user leaves the\ninstallation, and all NOTIFY messages for running production jobs which\ngo to that ID, will continually accumulate.  IBM's lack of a display\ncommand makes it impossible, using purely IBM means, to detect and\nremedy such a condition.  (IBM recommends to do a SYNC.  Ha!)\n\n      We have presented this package of programs to remedy the clogging\nof SYS1.BRODCAST.  There are programs to summarize the condition of\nSYS1.BRODCAST, to display any userid's messages, to display all userid\nmessages, to delete any userid's messages, and to diagnose corruption\nconditions in the SYS1.BRODCAST dataset.\n\n      To summarize the condition of SYS1.BRODCAST, there is the\nBCMSCAN batch program, which displays how full SYS1.BRODCAST is,\nwhich users have waiting messages, and how many messages there are.\nAs far as listing and deleting a userid's messages, there are several\nother programs which handle that situation.\n\n      We have written several programs which list outstanding messages\nfor a userid (or all userids having messages).  These programs do not\ndelete the messages which have been listed.  The difference between\nthese listing programs concerns how much diagnostic detail is displayed\nalong with the messages themselves.  BCMLIST is similar to the LISTBC\ndisplay that everyone is used to.  BCMLIST only displays user messages\nthemselves.  A second program called BCMLIS, in addition, displays the\nrelative record address of each message in the userid's chain.  A third\nprogram, BCMLISY, in addition to the above, displays the contents of\neach userid's message pointers--the relative record address of the\nfirst and last message chained to that userid.  These two addresses\nshould match the displayed relative addresses of the first message and\nthe last message, when they are written out by the BCMLISY program.\nIf you run any of these programs against the special \"userid\" ALL$#@,\nthen all user messages are displayed.  BCMLISX, in addition to what\nBCMLISY displays, will display the position of userid records in\nSYS1.BRODCAST, even if there are no outstanding messages for that id.\nYou can run BCMLISX against the special id ALL$#@, to find out all\nthe userids that are defined to that SYS1.BRODCAST dataset.  (The\ndisplay might be very long.)\n\n      There are three programs which will list and delete all messages\nin the chain for any given userid (usually not your own).  Each of\nthese programs works according to a different principle.  The three\nmessage delete programs are called BCMDEL, BCMDEL1, and BCMDEL2.\n\n      BCMDEL probably is the only one of these programs which will\ndelete any user's messages from TSO user logs, if they are present.\nBCMDEL works as follows:  BCMDEL temporarily changes the userid field\nin your PSCB control block.  Then, BCMDEL invokes LISTBC to display and\ndelete all messages for the other user.  Since LISTBC is an IBM\nprogram, it knows about TSO user logs (if they are there).  It follows\nthat BCMDEL, working on the other userid's name, will probably do\nwhatever IBM intended for LISTBC to do, regarding that userid.\n\n      BCMDEL1 does not invoke LISTBC against the other userid.\nBCMDEL1 invokes LISTBC against your own id, but it deletes the other\nid's messages.  BCMDEL1 works as follows:  BCMDEL1 saves your userid's\nmessage pointers, and then places the other userid's pointers in your\nuserid's slot.  Then BCMDEL1 invokes LISTBC against your own userid.\nTo clean up, BCMDEL1 goes and zeros the other userid's pointers and\nfinally replaces your own userid's saved pointers back.   BCMDEL1 uses\nLISTBC only against your own userid, not against the other one.\n\n      BCMDEL2 works directly with SYS1.BRODCAST internals, and does\nnot invoke LISTBC at all.  BCMDEL2 does the following processing:\nFirst, BCMDEL2 displays the userid's messages in its chain, and\ndeletes each message after the display.  Afterwards, BCMDEL2 zeroes\nout the userid's message pointers, and readjusts the Type X'05' free\nsearch record address pointer to point to the earliest deleted message\nrelative record address (if that address is earlier than the previous\nsetting of the X'05' pointer).\n\n      Since BCMDEL1 and BCMDEL2 work directly with SYS1.BRODCAST\ninternals, care is taken to try and ensure that normal broadcast\ndataset updates will not clash with our programs' operation.  Hopefully\nappropriate enqueues are invoked, to momentarily stop further updating\nof SYS1.BRODCAST by the SEND and LISTBC commands, while BCMDEL1 and\nBCMDEL2 are working.\n\n      We must emphasize that this package of programs was not written\nin a shop where TSO message USER LOGS have been set up.  If user logs\nhave been set up, BCMDEL will delete messages in them, because it\nchanges the userid and invokes IBM's LISTBC, which knows about the\nuser logs.  BCMDEL2 works directly on SYS1.BRODCAST internals, and\ndoes not affect the user logs at all.  If user logs have not been set\nup, all deferred TSO messages go to SYS1.BRODCAST.  If user logs have\nbeen set up in TSO, and there is an old userid which has not since then\nlogged on to TSO, its TSOULOG dataset will not have been created yet.\nIf you want to delete SYS1.BRODCAST messages for that id, you have\nto use BCMDEL2 or BCMDEL1.  BCMDEL will try to allocate the non-\nexistent user log dataset, and will not delete the messages from\nSYS1.BRODCAST.\n\n      The BCMDIAG program attempts to detect user message records\nwhich are not attached to any userid chain.  Such orphaned records can\nresult from corruption of SYS1.BRODCAST; they are not created by\nnormal processing.  The action that should be taken to clean up these\nrecords, at this time, is a matter of human judgment and knowledge.  I\nhave not yet perfected a program to handle and clean up all possible\nsituations.  However, I have developed some diagnostic techniques\nusing BCMDIAG, BCMLISY, the REVIEW TSO command, and the ZAP TSO\ncommand.  Using all these programs, I have personally been able to\nclean up a corrupted SYS1.BRODCAST dataset by fixing the chains and\ndeleting the orphaned records.\n\n     I would recommend that even if your SYS1.BRODCAST dataset is not\nfull, and even if you have TSO Userlogs, you should still look at this\npackage to see what it can do for you.  In addition to what I've\ndescribed above, the BCMUSADD and BCMUSDEL programs allow you to add or\ndelete an arbitrary userid name in the SYS1.BRODCAST dataset.  This has\nabsolutely nothing to do with RACF, or ACCOUNT or SYNC.  My two programs\nuse the official IBM interface to SYS1.BRODCAST, so they work cleanly.\n\n     One application:  You can monitor production jobs that belong to\nuserids which don't have TSO, by (temporarily) using BCMUSADD to put a\nuserid into SYS1.BRODCAST for that userid name.  In fact, the userid\ncan be completly arbitrary (and unique to that job).  You just insert\na NOTIFY= keyword into the job's JCL, for that userid name.\n\n      After you do this, the NOTIFY messages for the production job\nwill be written to SYS1.BRODCAST, but will never be deleted by IBM\nmeans.  Using my tools, you can display and/or delete these messages\nfor that userid, so you know if the job bombed, or completed\nsuccessfully, and when.  When you've finished testing, just use\nBCMUSDEL to delete that userid and all its messages, from the\nSYS1.BRODCAST dataset, to complete the cleanup.  (An ACCOUNT SYNC\nwill delete this userid (and everybody else's messages too), because\nthere's no such userid with a TSO extension, defined to RACF, UADS,\nor whatever security system you have.)\n\n      This is a very novel idea, and it can be very useful if you\nhave a troublesome production job and want to trace its recent\nhistory.\n\n\n      All of the message display programs use the TSO PUTLINE\ninterface for writing their messages.  Therefore, they may be run\nvia TSO-in-batch, and the messages will be displayed to SYSTSPRT.\n\n      If you have any questions or problems, please feel free\n      to contact me:\n\n           Sam Golob,  P.O. Box 906,  Tallman, NY 10982-0906\n\n           phone:\n           email:   sbgolob@att.net   or sbgolob@cbttape.org\n\n\n\n\n       BELOW IS A PICTORIAL VIEW OF SYS1.BRODCAST WHICH SHOULD\n       HELP ONE TO BE ABLE TO NAVIGATE IT SUCCESSFULLY.\n\n        This picture deals with user messages only, not global\n        notices.  User messages are chained off a userid directory\n        record.  There are nine userid directory records in a\n        SYS1.BRODCAST user record.  A pointer to the first user\n        record is in the broadcast header record, pictured below.\n\n        Global notices utilize a different system within\n        SYS1.BRODCAST.  For them, the header record points to the\n        first notices index record.  Those index records activate\n        and point to each notice line separately.  We are not\n        concerned with the notice message lines here, or with the\n        index pointers that activate them.  Our emphasis is on\n        user messages which are associated with each TSO userid.\n\n        Each userid record consists of 13 bytes:  7 bytes for the\n        userid name, 3 bytes for the Relative Record Pointer to the\n        first user message (which points to the next one, etc. until\n        the last one, which contains zeros as the next record\n        pointer).  The last 3 bytes are for the Relative Record\n        Pointer to the last user message in the chain.  LISTBC uses\n        the first pointer, to go through the entire message chain for\n        that userid.  SEND uses the last message pointer, to tack on\n        a new message after the previous last one.\n\n\n\n\n\n                     S Y S 1 . B R O D C A S T\n   ===============================================================\n   =                                                             =\n   =   *--*--------*---------*----------------------------*---*  =\n   =   *04*        * R1USPTR *  'SYS1.BRODCAST DATA SET'  *   *  =\n   =   *--*--------*-----+---*----------------------------*---*  =\n   =                     +                                       =\n   =    ++++++++++++++++++                                       =\n   =    +     1ST USER MAIL DIRECTORY RECORD  (EACH USERID       =\n   =    +       ENTRY CONSISTS OF A 13 BYTE AREA; THE USERID,    =\n   =    +       NEXT RBA POINTER AND ENDING RBA POINTER.         =\n   =    +                                                        =\n   =   *--*-------*---*----* /// *------*---*----*--*-----*      =\n   =   *01* USERID*RBA*ERBA* /// *USERID*RBA*ERBA*7F* RBA *      =\n   =   *--*-------*---*----* /// *------*---*----*--*--+--*      =\n   =                                                   +         =\n   =    +++++++++++++++++++++++++++++++ //// +++++++++++         =\n   =    +                                                        =\n   =    +    LAST USER MAIL DIRECTORY RECORD                     =\n   =    +                                                        =\n   =    +    NOTE: '000' ENDS THE CHAIN OF X'01' RECORDS.        =\n   =   *--*-------*---*----* /// *------*---*----*--*-----*      =\n   =   *01* USERID*RBA*ERBA* /// *USERID*RBA*ERBA*7F* 000 *      =\n   =   *--*-------*---*----* /// *------*-+-*-+--*--*--+--*      =\n   =                                      +   +                  =\n   =    +++++++++++++++++++++++++++++++++++   +++++++++++++++++  =\n   =    +                                                     +  =\n   =    +     1ST MESSAGE RECORD FOR USER                     +  =\n   =   *--*-----------------------------------------*-----*   +  =\n   =   *03*                                         * RBA *   +  =\n   =   *--*-----------------------------------------*--+--*   +  =\n   =                                                   +      +  =\n   =    ++++++++++++++++++++++++++ //// ++++++++++++++++      +  =\n   =    +                                                     +  =\n   =    +++++++++++++++++++++++++++++++++++++++++++++++++++++++  =\n   =    ++    LAST MESSAGE RECORD FOR USER                       =\n   =    ++   NOTE: '000' ENDS THE CHAIN OF X'03' RECORDS.        =\n   =   *--*-----------------------------------------*-----*      =\n   =   *03*                                         * 000 *      =\n   =   *--*-----------------------------------------*-----*      =\n   =                                                             =\n   =             FREE  SPACE  (deleted record)                   =\n   =   *--*-----------------------------------------------*      =\n   =   *FF*RR                                             *      =\n   =   *--*-----------------------------------------------*      =\n   =                                                             =\n   =     (RR is the record number of this record from CCHHR)     =\n   =                                                             =\n   ===============================================================\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$ISPF": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00!\\x01\\x00\\x16\\x8f\\x01\\x16&_\\x13&\\x005\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-06-16T00:00:00", "modifydate": "2016-09-21T13:26:21", "lines": 53, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "\n   We've made an attempt to ISPF-ize this package, so a system\n   administrator can control the display, reporting, and\n   deletion of messages in SYS1.BRODCAST, for any user.\n\n   Please see member BCMISPF, which is Vinh Vu's better attempt\n   to ISPF-ize this package.\n\n   This note assumes that you've assembled all the programs, and\n   placed the load modules in a load library that is accessible\n   to your TSO session.  The TSO commands BCMDEL and BCMDEL1 have\n   to be authorized, but BCMDEL2 does not have to be authorized.\n   This is because BCMDEL and BCMDEL1 call the authorized TSO\n   command LISTBC.  See member LOADMODS for recently assembled\n   load modules in TSO XMIT format.\n\n   To put the ISPF stuff into action, use the PANELS and CLISTS\n   members.  Run job $LOADSPF to create temporary panel and\n   clist libraries, to copy into your system ones.\n\n   Run the BCMUI CLIST to get started.\n\n   The BCMTRAP exec was supplied by John Kalinich, and it takes\n   a modified message member ISRZ00.  If you don't want to use\n   John's modification, just change name ISRZ000W in BCMTRAP to\n   ISRZ000.  The difference is in the message which reports the\n   program BCMTRAP is running.  Native ISPF will put the message\n   in the upper right corner.  John's version will make a\n   temporary window that's nicer to look at.\n\n   The panels and CLISTs in this collection are for the purpose\n   of ISPF'izing the SYS1.BRODCAST management package to make it\n   easier to use.  A sysprog, or other designated person, can now\n   easily manage the user messages in any system's SYS1.BRODCAST\n   dataset, and you won't have to worry so much, anymore, about\n   the broadcast dataset becoming full.  You can now administer\n   it on each system, easily.\n\n   Just copy the panels into your panel library, and CLISTs into\n   a library in the SYSPROC concatenation, execute the BCMUI\n   clist, and you're off to the races.\n\n   Do not put the PANELS member through ascii translation and back.\n   There are unprintable characters there.  Use TSO XMIT with the\n   OUTDSN keyword to create a transmittable file from a pds.\n\n Sam Golob\n P.O. Box 906\n Tallman, NY 10982-0906\n\n\n email:  sbgolob@att.net\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$BCEDIT": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00F\\x01\\x01\\x19/\\x01\\x05\\x10\\x9f\\x16V\\x007\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-07-11T00:00:00", "modifydate": "2005-04-19T16:56:46", "lines": 55, "newlines": 35, "modlines": 0, "user": "SBGOLOB"}, "text": "                         BCEDIT COMPONENT\n                         ------ ---------\n\nNote:  If you can't get the CONSOLE permissions to update SYS1.BRODCAST\n       using the BCEDIT exec, then you can change the $NOTICE clist and\n       run it instead.  You will need OPER privilege in TSO.\n\n       There is now more help for this situation.  Updated versions of\n       the CPSCB and LPSCB TSO commands are included here.  CPSCB is an\n       authorized TSO command, and if you authorize CPSCB and enter:\n\n          CPSCB CONS  and then CPSCB OPER\n\n       then your TSO session will get CONSOLE and then OPER authority.\n       Another way (which is more \"official\") is to create a profile\n       called CONSOLE in the TSOAUTH RACF class, and give yourself\n       READ access to it.  The next time you LOGON to TSO, LPSCB\n       should show that you have CONS authority in the PSCBATR1 field\n       at +10 in the PSCB.  Sample LPSCB output for this line:\n\n          +10  PSCBATR1 E500             OPER ACCT JCL CONS RECOVER\n\nThe BCEDIT* members of this pds were written by Paul W. Lemons,\nand they deal with the NOTICES part of SYS1.BRODCAST.\n\nThree members are necessary:\n\n    Either BCMEDIT or BCMEDITA,\n\n      and\n\n    BCEDITM1 and BCEDITM2.\n\n\nThese members should be put in the SYSPROC or SYSEXEC TSO\nconcatenation.\n\n\nBCEDIT reads the NOTICES section of SYS1.BRODCAST, and allows you\nto ISPF EDIT and change existing notices.  SEND commands are\nformatted by the execs, to replace the old Notices which what you\ncreated with the edit.\n\nQuestions:   email  Paul W Lemons <plemons2@txu.com>\n\n\n    I copied this part of Paul's stuff over from File 479, to\ncomplete this package, and put all the message and Notices handling\nstuff in one place.\n\nSam Golob  - 07/11/01 -  sbgolob@att.net       , sbgolob@cbttape.org\n\nPlease see the BCMN* members of this package, which now also deal\nwith the NOTICES section of SYS1.BRODCAST.   Sam Golob - 04/19/05\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$BCMASL": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x17\\x00H\\x00\\x99\\x15\\x8f\\x01\\x16'\\x1f\\x19P\\x00\\\\\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.23", "flags": 0, "createdate": "1999-06-07T00:00:00", "modifydate": "2016-09-27T19:50:48", "lines": 92, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------------------- *//\n//* --  ASSEMBLE AND LINKEDIT BROADCAST MANAGER LOAD MODULES     -- *//\n//* --     ALL PROGRAMS ARE ASSEMBLED WHOSE SOURCE IS HERE.      -- *//\n//* --------------------------------------------------------------- *//\n//*\n//* NOTE:   INCLUDE=INCLUDEA CREATES AN AC(1) MODULE\n//*\n//* --------------------------------------------------------------- *//\n//*\n//ASMLKBCM PROC MBR=,INCLUDE=INCLUDE\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247           << LIBRARY\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(&MBR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=SHR,DSN=SBGOLOB.BCM.OBJECT(&MBR)\n//*YSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//*           DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,NORENT,NOREUS'\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB(&MBR)\n//OBJECT   DD  DISP=SHR,DSN=SBGOLOB.BCM.OBJECT(&MBR)\n//SYSLIN   DD  DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(&INCLUDE)\n//*\n//   PEND\n//*\n//*   ALLOCATION OF LIBRARIES\n//*\n//DELETE    EXEC PGM=IEFBR14\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   DELETE 'SBGOLOB.BCM.OBJECT'\n   DELETE 'SBGOLOB.BCM.LOADLIB'\n/*\n//*\n//ALLOCATE  EXEC PGM=IEFBR14,COND=((8,EQ,DELETE),(0,NE,DELETE))\n//*\n//OBJECT    DD DSN=SBGOLOB.BCM.OBJECT,DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,\n//             VOL=SER=DATA02,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200),\n//             SPACE=(TRK,(15,15,44))\n//*\n//LOADLIB   DD DSN=SBGOLOB.BCM.LOADLIB,DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,\n//             VOL=SER=DATA02,\n//             DCB=(RECFM=U,LRECL=0,BLKSIZE=18432),\n//             SPACE=(TRK,(15,15,44))\n//*\n//BCMCLEAN EXEC ASMLKBCM,MBR=BCMCLEAN\n//BCMDEL   EXEC ASMLKBCM,MBR=BCMDEL,INCLUDE=INCLUDEA\n//BCMDEL1  EXEC ASMLKBCM,MBR=BCMDEL1,INCLUDE=INCLUDEA\n//BCMDEL2  EXEC ASMLKBCM,MBR=BCMDEL2\n//BCMDIAG  EXEC ASMLKBCM,MBR=BCMDIAG\n//BCMDUMP  EXEC ASMLKBCM,MBR=BCMDUMP\n//BCMEXPND EXEC ASMLKBCM,MBR=BCMEXPND\n//BCMLIS   EXEC ASMLKBCM,MBR=BCMLIS\n//BCMLIST  EXEC ASMLKBCM,MBR=BCMLIST\n//BCMLISX  EXEC ASMLKBCM,MBR=BCMLISX\n//BCMLISY  EXEC ASMLKBCM,MBR=BCMLISY\n//BCMNLIST EXEC ASMLKBCM,MBR=BCMNLIST\n//BCMNCLEN EXEC ASMLKBCM,MBR=BCMNCLEN\n//BCMNOTFY EXEC ASMLKBCM,MBR=BCMNOTFY\n//BCMNUPD  EXEC ASMLKBCM,MBR=BCMNUPD,INCLUDE=INCLUDEA\n//BCMREST  EXEC ASMLKBCM,MBR=BCMREST\n//BCMSCAN  EXEC ASMLKBCM,MBR=BCMSCAN\n//BCMSEND  EXEC ASMLKBCM,MBR=BCMSEND\n//BCMUSADD EXEC ASMLKBCM,MBR=BCMUSADD\n//BCMUSDEL EXEC ASMLKBCM,MBR=BCMUSDEL\n//BCMUSERS EXEC ASMLKBCM,MBR=BCMUSERS\n//BCMXPORT EXEC ASMLKBCM,MBR=BCMXPORT\n//BDMNNOTC EXEC ASMLKBCM,MBR=BDMNNOTC,INCLUDE=INCLUDEA\n//CPSCB    EXEC ASMLKBCM,MBR=CPSCB,INCLUDE=INCLUDEA\n//LPSCB    EXEC ASMLKBCM,MBR=LPSCB\n//MYID     EXEC ASMLKBCM,MBR=MYID\n//MYIDN    EXEC ASMLKBCM,MBR=MYIDN\n//MYIDP    EXEC ASMLKBCM,MBR=MYIDP\n//SYSTM    EXEC ASMLKBCM,MBR=SYSTM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$BCMASM": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x12\\x00\\x06\\x00\\x99\\x15\\x8f\\x01\\x16'\\x1f\\x19Q\\x00[\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.18", "flags": 0, "createdate": "1999-06-07T00:00:00", "modifydate": "2016-09-27T19:51:06", "lines": 91, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------------------- *//\n//* --  ASSEMBLE AND LINKEDIT BROADCAST MANAGER LOAD MODULES     -- *//\n//* --------------------------------------------------------------- *//\n//*\n//* NOTE:   INCLUDE=INCLUDEA CREATES AN AC(1) MODULE\n//*\n//* --------------------------------------------------------------- *//\n//*\n//ASMLKBCM PROC MBR=,INCLUDE=INCLUDE\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247           << LIBRARY\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(&MBR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=SHR,DSN=SBGOLOB.BCM.OBJECT(&MBR)\n//*YSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//*           DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,NORENT,NOREUS'\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB(&MBR)\n//OBJECT   DD  DISP=SHR,DSN=SBGOLOB.BCM.OBJECT(&MBR)\n//SYSLIN   DD  DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(&INCLUDE)\n//*\n//   PEND\n//*\n//*   ALLOCATION OF LIBRARIES\n//*\n//DELETE    EXEC PGM=IEFBR14\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   DELETE 'SBGOLOB.BCM.OBJECT'\n   DELETE 'SBGOLOB.BCM.LOADLIB'\n/*\n//*\n//ALLOCATE  EXEC PGM=IEFBR14,COND=((8,EQ,DELETE),(0,NE,DELETE))\n//*\n//OBJECT    DD DSN=SBGOLOB.BCM.OBJECT,DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,\n//             VOL=SER=DATA02,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200),\n//             SPACE=(TRK,(15,15,44))\n//*\n//LOADLIB   DD DSN=SBGOLOB.BCM.LOADLIB,DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,\n//             VOL=SER=DATA02,\n//             DCB=(RECFM=U,LRECL=0,BLKSIZE=18432),\n//             SPACE=(TRK,(15,15,44))\n//*\n//BCMCLEAN EXEC ASMLKBCM,MBR=BCMCLEAN\n//BCMDEL   EXEC ASMLKBCM,MBR=BCMDEL,INCLUDE=INCLUDEA\n//BCMDEL1  EXEC ASMLKBCM,MBR=BCMDEL1,INCLUDE=INCLUDEA\n//BCMDEL2  EXEC ASMLKBCM,MBR=BCMDEL2\n//BCMDIAG  EXEC ASMLKBCM,MBR=BCMDIAG\n//BCMDUMP  EXEC ASMLKBCM,MBR=BCMDUMP\n//BCMEXPND EXEC ASMLKBCM,MBR=BCMEXPND\n//BCMLIS   EXEC ASMLKBCM,MBR=BCMLIS\n//BCMLIST  EXEC ASMLKBCM,MBR=BCMLIST\n//BCMLISX  EXEC ASMLKBCM,MBR=BCMLISX\n//BCMLISY  EXEC ASMLKBCM,MBR=BCMLISY\n//BCMNLIST EXEC ASMLKBCM,MBR=BCMNLIST\n//BCMNCLEN EXEC ASMLKBCM,MBR=BCMNCLEN\n//BCMNOTFY EXEC ASMLKBCM,MBR=BCMNOTFY\n//BCMNUPD  EXEC ASMLKBCM,MBR=BCMNUPD,INCLUDE=INCLUDEA\n//BCMREST  EXEC ASMLKBCM,MBR=BCMREST\n//BCMSCAN  EXEC ASMLKBCM,MBR=BCMSCAN\n//BCMSEND  EXEC ASMLKBCM,MBR=BCMSEND\n//BCMUSADD EXEC ASMLKBCM,MBR=BCMUSADD\n//BCMUSDEL EXEC ASMLKBCM,MBR=BCMUSDEL\n//BCMUSERS EXEC ASMLKBCM,MBR=BCMUSERS\n//BCMXPORT EXEC ASMLKBCM,MBR=BCMXPORT\n//BDMNNOTC EXEC ASMLKBCM,MBR=BDMNNOTC,INCLUDE=INCLUDEA\n//*CPSCB    EXEC ASMLKBCM,MBR=CPSCB,INCLUDE=INCLUDEA\n//*LPSCB    EXEC ASMLKBCM,MBR=LPSCB\n//*MYID     EXEC ASMLKBCM,MBR=MYID\n//*MYIDN    EXEC ASMLKBCM,MBR=MYIDN\n//*MYIDP    EXEC ASMLKBCM,MBR=MYIDP\n//*SYSTM    EXEC ASMLKBCM,MBR=SYSTM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$BCMONE": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x008\\x00\\x99\\x15\\x8f\\x01\\x16)/ \\x15\\x00D\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1999-06-07T00:00:00", "modifydate": "2016-10-18T20:15:38", "lines": 68, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------------------- *//\n//* --  ASSEMBLE AND LINKEDIT BROADCAST MANAGER LOAD MODULES     -- *//\n//* --     ANY ONE OF THESE PROGRAMS CAN BE ASSEMBLED HERE.      -- *//\n//* --      (UNCOMMENT THE PROGRAM YOU WANT TO ASSEMBLE.)        -- *//\n//* --------------------------------------------------------------- *//\n//*\n//* NOTE:   INCLUDE=INCLUDEA CREATES AN AC(1) MODULE\n//*\n//* --------------------------------------------------------------- *//\n//*\n//ASMLKBCM PROC MBR=,INCLUDE=INCLUDE\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247           << LIBRARY\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(&MBR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DISP=SHR,DSN=SBGOLOB.BCM.OBJECT(&MBR)\n//*YSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//*           DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,NORENT,NOREUS'\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB(&MBR)\n//OBJECT   DD  DISP=SHR,DSN=SBGOLOB.BCM.OBJECT(&MBR)\n//SYSLIN   DD  DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(&INCLUDE)\n//*\n//   PEND\n//*\n//*CMCLEAN EXEC ASMLKBCM,MBR=BCMCLEAN\n//*CMDEL   EXEC ASMLKBCM,MBR=BCMDEL,INCLUDE=INCLUDEA\n//BCMDEL1  EXEC ASMLKBCM,MBR=BCMDEL1,INCLUDE=INCLUDEA\n//*CMDEL2  EXEC ASMLKBCM,MBR=BCMDEL2\n//*CMDIAG  EXEC ASMLKBCM,MBR=BCMDIAG\n//*CMDUMP  EXEC ASMLKBCM,MBR=BCMDUMP\n//*CMEXPND EXEC ASMLKBCM,MBR=BCMEXPND\n//*CMLIS   EXEC ASMLKBCM,MBR=BCMLIS\n//*CMLIST  EXEC ASMLKBCM,MBR=BCMLIST\n//*CMLISX  EXEC ASMLKBCM,MBR=BCMLISX\n//*CMLISY  EXEC ASMLKBCM,MBR=BCMLISY\n//*CMNLIST EXEC ASMLKBCM,MBR=BCMNLIST\n//*CMNCLEN EXEC ASMLKBCM,MBR=BCMNCLEN\n//*CMNOTFY EXEC ASMLKBCM,MBR=BCMNOTFY\n//*CMNUPD  EXEC ASMLKBCM,MBR=BCMNUPD,INCLUDE=INCLUDEA\n//*CMREST  EXEC ASMLKBCM,MBR=BCMREST\n//*CMSCAN  EXEC ASMLKBCM,MBR=BCMSCAN\n//*CMSEND  EXEC ASMLKBCM,MBR=BCMSEND\n//*CMUSADD EXEC ASMLKBCM,MBR=BCMUSADD\n//*CMUSDEL EXEC ASMLKBCM,MBR=BCMUSDEL\n//*CMUSERS EXEC ASMLKBCM,MBR=BCMUSERS\n//*CMXPORT EXEC ASMLKBCM,MBR=BCMXPORT\n//*DMNNOTC EXEC ASMLKBCM,MBR=BDMNNOTC,INCLUDE=INCLUDEA\n//*PSCB    EXEC ASMLKBCM,MBR=CPSCB,INCLUDE=INCLUDEA\n//*PSCB    EXEC ASMLKBCM,MBR=LPSCB\n//*YID     EXEC ASMLKBCM,MBR=MYID\n//*YIDN    EXEC ASMLKBCM,MBR=MYIDN\n//*YIDP    EXEC ASMLKBCM,MBR=MYIDP\n//*YSTM    EXEC ASMLKBCM,MBR=SYSTM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$EXPAND": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x13\\x7f\\x00\\x99\\x13\\x7f\\x080\\x00)\\x00 \\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-05-17T00:00:00", "modifydate": "1999-05-17T08:30:00", "lines": 41, "newlines": 32, "modlines": 0, "user": "SBGOLOB"}, "text": "                    EXPANDING SYS1.BRODCAST\n\n\nYou can now expand SYS1.BRODCAST, by dumping it to a flat file with\nthe BCMDUMP program from this package, and restoring it to a RECFM=DA\ncopy, with the BCMEXPND program.  User Message records are added to\nthe end of the copy, and the header record is adjusted to reflect the\nnew number of records in the file.\n\nYou can move SYS1.BRODCAST to a device of different geometry.  The\nBCMEXPND and BCMREST programs adjust for this.  For example, you can\nexpand or restore a BCMDUMP of SYS1.BRODCAST, which was previously\non a 3380 disk pack, to a 3390 disk pack, and so forth.\n\nNo messages are lost from the expanded copy.  It's not like an\nACCOUNT SYNC, where you lose all the user messages.\n\nSee the JCL members that come with BCMDUMP (BCMDUMP$) and BCMEXPND\n(BCMEXPN$) for examples of how to run these programs.\n\nIf you are actually expanding SYS1.BRODCAST, you should do it just\nbefore an IPL, because no enqueue protection is provided, or is\nnecessary.\n\nOf necessity, you have to expand SYS1.BRODCAST into a copy, because\nit has to go into one extent, and you're now putting it into a bigger\nextent.  The copy should be renamed and recataloged as SYS1.BRODCAST\njust before the IPL.\n\nTo just RESTORE a dump of SYS1.BRODCAST to one of the same size,\nperhaps across different device types, use program BCMREST instead\nof program BCMEXPND.\n\nNo official support is provided, but if you have questions, please\ncontact:\n\n    Sam Golob,  P.O. Box 906,  Tallman, NY 10982-0906\n\n    phone:  914-362-1992\n    email:  sbgolob@ibm.net   and/or   sbgolob@aol.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$TYPE": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x11\\x9f\\x00\\x99\\x11\\x9f\\x10\\x19\\x00$\\x00\\x19\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-04-29T00:00:00", "modifydate": "1999-04-29T10:19:00", "lines": 36, "newlines": 25, "modlines": 0, "user": "SBGOLOB"}, "text": "*        RECORD TYPE.  RECORD 1 AND THE 'NOTICES' DIRECTORY AND\n*        'NOTICES' MESSAGE RECORDS ARE LOCATED IN THE FIXED PART\n*        OF THE BRODCAST DATA SET AT THE BEGINNING. THE 'MAIL'\n*        DIRECTORY AND MESSAGE RECORDS WILL APPEAR RANDOMLY\n*        THROUGHOUT THE REMAINDER OF 'SYS1.BRODCAST'.  USER ID\n*        DIRECTORY RECORDS X'01' ARE CHAINED TO EACH OTHER, AS\n*        ARE USER MESSAGE RECORDS TYPE X'03'.  THE LAST 3 BYTES\n*        OF THESE RECORDS CONTAIN THE RELATIVE RECORD ADDRESS OF\n*        THE NEXT RECORD IN THE CHAIN.  ISPF BROWSE WILL NOT\n*        DISPLAY THE LAST BYTE OF A SYS1.BRODCAST RECORD BECAUSE\n*        OF THE ONE BYTE KEY AT THE BEGINNING.  YOU HAVE TO USE\n*        THE \"REVIEW\" TSO COMMAND TO LOOK AT THE SYS1.BRODCAST\n*        DATASET.  (CBT TAPE FILE 134 - LOAD MODULE ON FILE 135)\n*        \"REVIEW\" CAN PROPERLY DISPLAY KEYED RECORDS.\n*\n*\n*        THE 7 RECORD TYPES AND THEIR KEYS ARE:\n*\n*        X'00'     BRODCAST 'NOTICES' DIRECTORY RECORD.\n*\n*        X'01'     USER 'MAIL' DIRECTORY RECORD.\n*\n*        X'02'     BROADCAST 'NOTICES' MESSAGE RECORD.\n*\n*        X'03'     USER 'MAIL' MESSAGE RECORD.\n*\n*        X'04'     FIRST RECORD OF 'SYS1.BRODCAST' DATA SET.\n*\n*        X'05'     RBA ADDRESS OF FIRST DUMMY RECORD AVAILABLE.  JDM1\n*\n*        X'FF'     DUMMY INACTIVE 'MAIL' MESSAGE RECORD.\n*\n*        THE 'BDAM' ACCESS METHOD READS THESE RECORDS WITHOUT\n*        KEYS, SO THE KEY IDENTIFIER IS NOT READ IN WITH THE\n*        REMAINING 129 CHARACTERS OF EACH RECORD.\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$UPDATE": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x16\\x0f\\x00\\x99\\x16\\x0f\\x18\\x02\\x00 \\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-06-09T00:00:00", "modifydate": "1999-06-09T18:02:00", "lines": 32, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "June 9, 99  -  Corrected all relevant programs, so that if you\n               enter the command without any userid, you'll get a\n               useful message instead of a blank response.\n\n               Commented out code that requires that the TSO user\n               have OPER and ACCT authority.  You can put the code\n               back, if you need to.\n\n               Corrected an assembly error in all programs involving\n               execution of the IKJIFRIF macro.  These are BCMUSADD,\n               BCMUSDEL, BCMDEL1.  Problem was that the CVT macro\n               had to expressly say DSECT=YES, otherwise ENTRY state-\n               ments were generated for the CVT extensions, and they\n               are not allowed to occur within a DSECT.\n\n               Increased the capacity of BCMSCAN to count more than\n               999 outstanding messages.  Now can do 99999 for each\n               user.  Problem was that the counter was PL2'0'.  Made\n               it PL3'0'.\n\nJune 2, 99  -  Added program BCMSEND, and debugged it for \"BRODCAST\n               dataset full\" condition.\n\nMay 27, 99  -  BCMDUMP, BCMREST, BCMEXPND to create copies of the\n               SYS1.BRODCAST dataset, and be able to expand the\n               dataset (even across different device types) without\n               losing any messages.\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$LOADSPF": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x006\\x01\\x01\"o\\x01\\x16\\'\\x1f \\x15\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-08-14T00:00:00", "modifydate": "2016-09-27T20:15:36", "lines": 12, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//LOAD1 EXEC PGM=PDSLOAD                <== From FIle 093 or 035 (load)\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(BCMISPFI)\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DISP=(NEW,CATLG),DSN=SBGOLOB.FILE247.BCMISPF.PDS,\n//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),UNIT=SYSALLDA,\n//     SPACE=(TRK,(15,30,89),RLSE)\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$NEWPROG": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x08\\x00\\x99\\x13\\x0f\\x01\\x05\\x12\\x9f\\x08S\\x00\\x1b\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-05-10T00:00:00", "modifydate": "2005-05-09T08:53:08", "lines": 27, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "Some of the new programs for the BRODCAST MANAGER.\n\n    BCMDUMP - Takes an existing SYS1.BRODCAST dataset and dumps it\n              into a FB-130 fixed blocked file, for transport to\n              another system, or for backup purposes.\n\n    BCMREST - Restores a SYS1.BRODCAST format file (it could be a\n              copy), from the dump file created by BCMDUMP.  Many\n              of the programs in this package can be run against\n              this copy of SYS1.BRODCAST.  The listing programs all\n              work (BCMLIST, BCMLISY, BCMLISX, BCMLIS).  Also,\n              BCMDEL2 will work, because it operates against the\n              actual structure of the SYS1.BRODCAST dataset, which\n              is duplicated by BCMREST.  BCMREST will also allow\n              the restore of SYS1.BRODCAST on a different device\n              type, because the deleted message records (type X'FF')\n              have to have the next byte as the \"R\" in the record's\n              CCHHR, and this quantity is appropriately adjusted\n              upon restore of the rest of the record.\n\n    BCMEXPND- Restores a SYS1.BRODCAST format file (same as BCMREST)\n              except that it expands the file with extra unused user\n              message records, to fill the first allocated extent.\n\n    BCMSEND - Sends a user message to SYS1.BRODCAST or a copy of it.\n              SYNTAX is:   BCMSEND userid message-text\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$NOTICE": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x18\\x01\\x04#_\\x01\\x04#_\\x10#\\x00+\\x00+\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-08-22T00:00:00", "modifydate": "2004-08-22T10:23:18", "lines": 43, "newlines": 43, "modlines": 0, "user": "SBGOLOB"}, "text": "OPER\nSE 001,DELETE\nSE 002,DELETE\nSE 003,DELETE\nSE 004,DELETE\nSE 005,DELETE\nSE 006,DELETE\nSE 007,DELETE\nSE 008,DELETE\nSE 009,DELETE\nSE 010,DELETE\nSE 011,DELETE\nSE 012,DELETE\nSE 013,DELETE\nSE 014,DELETE\nSE 015,DELETE\nSE 016,DELETE\nSE 017,DELETE\nSE 018,DELETE\nSE 019,DELETE\nSE 020,DELETE\nSE 021,DELETE\nSE 022,DELETE\nSE 023,DELETE\nSE 024,DELETE\nSE 025,DELETE\nSE 026,DELETE\nSE 027,DELETE\nSE 028,DELETE\nSE 029,DELETE\nSE 030,DELETE\nSE 031,DELETE\nSE 032,DELETE\nSE '  * * * * * * * * * * * * * * * * * * * * * * * * * *         ',SAVE\nSE '  * * * * * * * * * * * * * * * * * * * * * * * * * *         ',SAVE\nSE '  * *                                             * *         ',SAVE\nSE '  * *      WELCOME TO THE Z-12 MVS SYSTEM...      * *         ',SAVE\nSE '  * *                                             * *         ',SAVE\nSE '  * * * * * * * * * * * * * * * * * * * * * * * * * *         ',SAVE\nSE '  * * * * * * * * * * * * * * * * * * * * * * * * * *         ',SAVE\nSE '                                                              ',SAVE\nEND\nLISTBC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$USRTIP1": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x18\\x0f\\x00\\x99\\x18\\x0f\\x13D\\x00b\\x00b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-06-29T00:00:00", "modifydate": "1999-06-29T13:44:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "SBGOLOB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "@FILE247": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00)\\x01\\x19\\x05\\x7f\\x01\\x19\\x05\\x7f\"#\\x01\\xcf\\x01\\xcf\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-02-26T00:00:00", "modifydate": "2019-02-26T22:23:29", "lines": 463, "newlines": 463, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 247 is from Jim Marshall and Sam Golob and contains       *   FILE 247\n//*           the \"BRODCAST MANAGER\" package of programs.  These    *   FILE 247\n//*           programs are designed to eliminate the need for       *   FILE 247\n//*           frequent SYNC's of the SYS1.BRODCAST dataset, and     *   FILE 247\n//*           to give you control in displaying and deleting all    *   FILE 247\n//*           user messages in the SYS1.BRODCAST dataset.           *   FILE 247\n//*                                                                 *   FILE 247\n//*           There are a great many utilities in this package.     *   FILE 247\n//*           Users have contributed two front-ends so far.         *   FILE 247\n//*                                                                 *   FILE 247\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 247\n//*                                                                 *   FILE 247\n//*     Important note:  A load module in TSO XMIT program for      *   FILE 247\n//*           the vastly improved BDMSCAN program, which is part    *   FILE 247\n//*           of the \"Broadcast Master\" commercial product from     *   FILE 247\n//*           Sam Golob Systems Programming LLC, has been included  *   FILE 247\n//*           as member BDMSCAN of this pds.  JCL to create a       *   FILE 247\n//*           load library and run this program, has been included  *   FILE 247\n//*           as member BDMSCAN$.  Try it.  You'll like it.         *   FILE 247\n//*                                                                 *   FILE 247\n//*           Full permission is granted from Sam Golob Systems     *   FILE 247\n//*           Programming LLC, for anyone to run this copy of       *   FILE 247\n//*           BDMSCAN anywhere.  No strings attached.               *   FILE 247\n//*                                                                 *   FILE 247\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 247\n//*                                                                 *   FILE 247\n//*     I have just added an APF-authorized TSO command called      *   FILE 247\n//*           BDMNNOTC which INSTANTLY changes the number of        *   FILE 247\n//*           Global Notices records that are produced by the       *   FILE 247\n//*           ACCOUNT/SYNC programs from IBM.  You just say         *   FILE 247\n//*                                                                 *   FILE 247\n//*                BDMNNOTC 200                                     *   FILE 247\n//*                                                                 *   FILE 247\n//*           and you can change the number of notices from 100     *   FILE 247\n//*           (IBM's default) to 200 instantly, with no fuss and    *   FILE 247\n//*           no IPL's and no zaps to IKJEFXSR/IKJEBLMT necessary.  *   FILE 247\n//*                                                                 *   FILE 247\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 247\n//*     Member $$BCMASM will assemble and link all BCM modules.     *   FILE 247\n//*     Member $ASMSING will assemble and link one BCM module.      *   FILE 247\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 247\n//*                                                                 *   FILE 247\n//*  Improvements:                                                  *   FILE 247\n//*                                                                 *   FILE 247\n//*     1.  The userid ADD and userid DELETE programs, BCMUSADD     *   FILE 247\n//*         and BCMUSDEL respectively, now use the TSO PUTLINE      *   FILE 247\n//*         interface instead of TPUT, so you can get meaningful    *   FILE 247\n//*         reports when you add or delete userids into the         *   FILE 247\n//*         BRODCAST dataset using TSO-in-batch.                    *   FILE 247\n//*                                                                 *   FILE 247\n//*     2.  Three programs have been added to do direct writes      *   FILE 247\n//*         to the NOTICES section of SYS1.BRODCAST or a copy       *   FILE 247\n//*         of it.  BCMNLIST will list all active Notices messages  *   FILE 247\n//*         in the allocated instance of SYS1.BRODCAST.  BCMNOTFY   *   FILE 247\n//*         will create messages, delete messages or create blank   *   FILE 247\n//*         messages in the NOTICES section of SYS1.BRODCAST or     *   FILE 247\n//*         a copy of it.  To make those changes readable by        *   FILE 247\n//*         LISTBC (which is the point), the BCMNUPD (authorized)   *   FILE 247\n//*         TSO command sets a bit in the TSO Vector Table on,      *   FILE 247\n//*         (this is the TSVTNCTU bit in TSVTFLG1) so anybody's     *   FILE 247\n//*         execution of LISTBC will force an update to the         *   FILE 247\n//*         incore Notices Table (only true for z/OS 1.3 MVS        *   FILE 247\n//*         systems and later).                                     *   FILE 247\n//*                                                                 *   FILE 247\n//*         If the TSVTNCTU bit is on in a z/OS 1.2 or earlier      *   FILE 247\n//*         MVS system, an OPER SEND ' ',SAVE command has to be     *   FILE 247\n//*         executed, in order for the BRODCAST dataset to be       *   FILE 247\n//*         re-read and the incore Notices table rewritten.         *   FILE 247\n//*                                                                 *   FILE 247\n//*         Members having names that begin with BCMN**** have      *   FILE 247\n//*         to do with sending Broadcast Notify messages.  A few    *   FILE 247\n//*         sample CLISTs are included to show how these programs   *   FILE 247\n//*         can be deployed.  Lowercase messages can be sent with   *   FILE 247\n//*         the BCMNOTFY program.  If you do this with a CLIST,     *   FILE 247\n//*         you should specify CONTROL ASIS.                        *   FILE 247\n//*                                                                 *   FILE 247\n//*     3.  A new program called BCMNCLEN will clean out all the    *   FILE 247\n//*         extra fluff from Notices records and replace it with    *   FILE 247\n//*         hexzeros.  Both Used Notice slots and Empty Notice      *   FILE 247\n//*         slots are cleaned by the TSO command BCMNCLEN, which    *   FILE 247\n//*         does not take parameters.                               *   FILE 247\n//*                                                                 *   FILE 247\n//*     4.  Full support for changing NOTICES records was added     *   FILE 247\n//*         with the BCMNOTFY and BCMNUPD programs.  BCMNOTFY will  *   FILE 247\n//*         add or delete messages, or replace a message line with  *   FILE 247\n//*         (30) blanks.  BCMNUPD is an APF authorized TSO command  *   FILE 247\n//*         which is necessary to flip a bit on, that tells LISTBC  *   FILE 247\n//*         or OPER SEND, etc. (depending on TSO/E release) to      *   FILE 247\n//*         update the incore Global Notices table that LISTBC      *   FILE 247\n//*         reports the Notices from.  Our BCMNLIST program will    *   FILE 247\n//*         read the Global Notices directly from SYS1.BRODCAST,    *   FILE 247\n//*         but not from the incore Notices table that LISTBC       *   FILE 247\n//*         reads.                                                  *   FILE 247\n//*                                                                 *   FILE 247\n//*     5.  Another way of handling NOTICES comes from Paul W.      *   FILE 247\n//*         Lemons' BCEDIT package, which has been copied to this   *   FILE 247\n//*         file from File 479.                                     *   FILE 247\n//*                                                                 *   FILE 247\n//*         BCEDIT** consists of 3 REXX execs that allow the        *   FILE 247\n//*         administrator to ISPF-edit the global Broadcast         *   FILE 247\n//*         Notices, and optionally, re-SEND them out               *   FILE 247\n//*         conveniently, without having to format any OPERATOR     *   FILE 247\n//*         SEND commands.  These execs do all the OPERATOR         *   FILE 247\n//*         SENDs for you.  (Changed not to strip leading blanks.   *   FILE 247\n//*         Old version is still available as BCEDIT@.  SG)         *   FILE 247\n//*                                                                 *   FILE 247\n//*         Important note:  In order for the BCEDIT package to     *   FILE 247\n//*         be able to issue the proper OPERATOR SEND commands on   *   FILE 247\n//*         behalf of the TSO user, TSO CONSOLE authority has to    *   FILE 247\n//*         have been turned on.  To make that job easier, an       *   FILE 247\n//*         updated version of the authorized TSO command CPSCB     *   FILE 247\n//*         has been included in this file.  Since CPSCB does not   *   FILE 247\n//*         produce any TSO output when it has executed success-    *   FILE 247\n//*         fully, its companion TSO command LPSCB (List the PSCB)  *   FILE 247\n//*         has also been included in this file.  These two TSO     *   FILE 247\n//*         commands are designed to be used together, with CPSCB   *   FILE 247\n//*         doing the changing, and LPSCB doing the reporting.      *   FILE 247\n//*                                                                 *   FILE 247\n//*     6.  A new member $NOTICE was added, to give an example      *   FILE 247\n//*         CLIST to update the BROADCAST Notices for all TSO       *   FILE 247\n//*         users, if you can't get the CONSOLE authority for       *   FILE 247\n//*         using the BCEDIT REXX.  Also see members BCMNCLxx       *   FILE 247\n//*         and BCMNRXxx.                                           *   FILE 247\n//*                                                                 *   FILE 247\n//*     7.  The BCMLIST and BCMDEL2 programs have been expanded     *   FILE 247\n//*         to display, or delete, only SOME of the broadcast       *   FILE 247\n//*         messages for a userid, not necessary ALL of them.       *   FILE 247\n//*                                                                 *   FILE 247\n//*         You have full control, which messages are kept, and     *   FILE 247\n//*         which are to be deleted, by using the two new optional  *   FILE 247\n//*         keywords:  SKIP(nn) and MSGS(mm).                       *   FILE 247\n//*                                                                 *   FILE 247\n//*         If SKIP(nn) is coded, the first nn records are ignored  *   FILE 247\n//*         in the list or delete operation for a userid's messages.*   FILE 247\n//*                                                                 *   FILE 247\n//*         If MSGS(mm) is coded, the next mm records are listed    *   FILE 247\n//*         (if BCMLIST is used) or deleted (if BCMDEL2 is used.)   *   FILE 247\n//*                                                                 *   FILE 247\n//*         This gives you full control about which messages to     *   FILE 247\n//*         list or delete -- which are kept, and which deleted.    *   FILE 247\n//*                                                                 *   FILE 247\n//*         Vinh Vu's BCMISPF ISPF interface has been modified      *   FILE 247\n//*         to deal with the new SKIP(nn) and MSGS(mm) keywords.    *   FILE 247\n//*                                                                 *   FILE 247\n//*     8.  A new program, BCMXPORT, has been created from the      *   FILE 247\n//*         BCMLIST program, with an additional output, designed    *   FILE 247\n//*         to format existing messages into SEND (or BCMSEND)      *   FILE 247\n//*         commands, so that they can be reloaded into a new       *   FILE 247\n//*         SYS1.BRODCAST dataset.  This program is best run,       *   FILE 247\n//*         with JCL, under TSO-in-batch.                           *   FILE 247\n//*                                                                 *   FILE 247\n//*         All the SEND (or BCMSEND) commands, can be executed     *   FILE 247\n//*         as a CLIST, to reload the new SYS1.BRODCAST dataset.    *   FILE 247\n//*                                                                 *   FILE 247\n//*         Output is in VB-255 format and the commands are         *   FILE 247\n//*         displaced 8 bytes to the right.                         *   FILE 247\n//*                                                                 *   FILE 247\n//*         BCMXPORT supports the new SKIP(nn) and MSGS(mm)         *   FILE 247\n//*         keywords.                                               *   FILE 247\n//*                                                                 *   FILE 247\n//*     9.  John Kalinich sent in a REXX exec and a panel from a    *   FILE 247\n//*         former colleague of his, Mark Reschke, which is a very  *   FILE 247\n//*         nice way of formatting various kinds of SEND commands   *   FILE 247\n//*         directly from a panel.  I have packaged this in a new   *   FILE 247\n//*         member called SENDX.  (I changed the name from SEND,    *   FILE 247\n//*         so as not to confuse with the TSO SEND command, if      *   FILE 247\n//*         this REXX is not the default \"SEND\" at your site.       *   FILE 247\n//*                                                                 *   FILE 247\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 247\n//*                                                                 *   FILE 247\n//*  FE 1 -   An ISPF interface for some of the utilities in        *   FILE 247\n//*           this package, was written by Vinh Vu, and is          *   FILE 247\n//*           included as member BCMISPF.  This member is in        *   FILE 247\n//*           PDSLOAD format (or IEBUPDTE SYSIN format), and        *   FILE 247\n//*           it expands to produce a separate pds.                 *   FILE 247\n//*                                                                 *   FILE 247\n//*           Installation of Vinh Vu's package on each of your     *   FILE 247\n//*           MVS LPARs, makes it very easy to do ongoing           *   FILE 247\n//*           maintenance to SYS1.BRODCAST, to make sure it         *   FILE 247\n//*           doesn't get full.  You need the BCMDEL2, BCMLIST,     *   FILE 247\n//*           and BCMUSERS load modules installed as well.          *   FILE 247\n//*                                                                 *   FILE 247\n//*  FE 2 -   Willy Jensen \"WJensen\" <mail@wjensen.com> also        *   FILE 247\n//*           added a package (member WJMAINT) which allows         *   FILE 247\n//*           deletion of all messages for an id that has           *   FILE 247\n//*           greater than a certain amount of messages (e.g.       *   FILE 247\n//*           if a user has more than 200 messages, then            *   FILE 247\n//*           delete all the messages for that user).  This         *   FILE 247\n//*           process works by \"brute force\".  A more delicate      *   FILE 247\n//*           method of controlling deletion of messages, is        *   FILE 247\n//*           made possible by the SKIP(nn) and MSGS(mm) operands   *   FILE 247\n//*           of the BCMDEL2 program, and the use of the BCMISPF    *   FILE 247\n//*           ISPF interface from Vinh Vu.                          *   FILE 247\n//*                                                                 *   FILE 247\n//*  FE 3 -   I wrote a crude ISPF interface (members CLISTS        *   FILE 247\n//*           and PANELS), but Vinh Vu's interface is MUCH NICER,   *   FILE 247\n//*           and I recommend using that interface only (member     *   FILE 247\n//*           BCMISPF or member BCMISPFI).                          *   FILE 247\n//*                                                                 *   FILE 247\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 247\n//*                                                                 *   FILE 247\n//*           This package is now a full function set of utilities  *   FILE 247\n//*           to manage, copy, export, or import SYS1.BRODCAST.     *   FILE 247\n//*           (Of course, I'm thinking about adding a bit more...)  *   FILE 247\n//*                                                                 *   FILE 247\n//*           Questions, please call or write to:                   *   FILE 247\n//*                                                                 *   FILE 247\n//*             Sam Golob,  P.O. Box 906,  Tallman, NY 10982-0906   *   FILE 247\n//*                                                                 *   FILE 247\n//*             email:  sbgolob@att.net                             *   FILE 247\n//*                                  and/or   sbgolob@cbttape.org   *   FILE 247\n//*                                                                 *   FILE 247\n//*   >>>>>   You can also move SYS1.BRODCAST to a different        *   FILE 247\n//*   >>>>>   device type (e.g. 3380 to 3390) and/or expand it,     *   FILE 247\n//*   >>>>>   without losing any notices or user messages.          *   FILE 247\n//*                                                                 *   FILE 247\n//*   >>>>>   And you can dump SYS1.BRODCAST into a transportable   *   FILE 247\n//*   >>>>>   format, then restore it from the dump file.           *   FILE 247\n//*                                                                 *   FILE 247\n//*           All TSO commands in this package use the TSO          *   FILE 247\n//*           PUTLINE interface, so their outputs can be written    *   FILE 247\n//*           to SYSOUT and printed.  Therefore, they can be run    *   FILE 247\n//*           using TSO-in-Batch.                                   *   FILE 247\n//*                                                                 *   FILE 247\n//*           There are programs in this package to display and     *   FILE 247\n//*           delete any TSO user's messages, and to display the    *   FILE 247\n//*           contents of the SYS1.BRODCAST dataset in general.     *   FILE 247\n//*           Now, there's also a program to dump the entire        *   FILE 247\n//*           contents of SYS1.BRODCAST into a flat file, for       *   FILE 247\n//*           moving or sending to anywhere, and there are two      *   FILE 247\n//*           programs for restoring this dumped file. Both pgms    *   FILE 247\n//*           will adjust for device type changes.  One will just   *   FILE 247\n//*           restore the dumped file back into a direct access     *   FILE 247\n//*           dataset, and the other will expand the SYS1.BRODCAST  *   FILE 247\n//*           copy, by adding more blank user message records.      *   FILE 247\n//*                                                                 *   FILE 247\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 247\n//*                                                                 *   FILE 247\n//*     See new member @ZAP#NOT for a quick way of changing the     *   FILE 247\n//*     default number of NOTICES records, which ACCOUNT SYNC       *   FILE 247\n//*     will format in SYS1.BRODCAST .  Usually it's done by        *   FILE 247\n//*     coding a usermod, using the IKJBCAST macro with the         *   FILE 247\n//*     BCLMT=nnn operand.  Sample for that is in SYS1.SAMPLIB,     *   FILE 247\n//*     member BCSTSMPE.  (That is the \"long and orderly\" way.)     *   FILE 247\n//*                                                                 *   FILE 247\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 247\n//*                                                                 *   FILE 247\n//*     Programs Included - by name:                                *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMCLEAN  -  When LISTBC deletes a user message, it only    *   FILE 247\n//*                  marks it as deleted, without clearing the      *   FILE 247\n//*                  message content from SYS1.BRODCAST.  This      *   FILE 247\n//*                  program zeros out all deleted records, so if   *   FILE 247\n//*                  you BROWSE or REVIEW (File 134) SYS1.BRODCAST, *   FILE 247\n//*                  you'll really see how empty it is.             *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMDEL    -  TSO command to display and delete any user's   *   FILE 247\n//*                  broadcast messages.  Works by changing the     *   FILE 247\n//*                  PSCBUSER field to the other user's name and    *   FILE 247\n//*                  invoking LISTBC.  Therefore it also works to   *   FILE 247\n//*                  delete another user's messages from a TSO      *   FILE 247\n//*                  Userlog.  Must be authorized.                  *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMDEL1   -  TSO command to display and delete any user's   *   FILE 247\n//*                  messages.  Works by plugging the other user's  *   FILE 247\n//*                  message pointers into your userid's slot, and  *   FILE 247\n//*                  invoking LISTBC for your id.  Obviously can't  *   FILE 247\n//*                  delete the other user's message from a Userlog *   FILE 247\n//*                  because LISTBC thinks he's running against     *   FILE 247\n//*                  your userid.  Must run authorized, to invoke   *   FILE 247\n//*                  LISTBC.                                        *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMDEL2   -  TSO Command to display and delete any user's   *   FILE 247\n//*                  messages, but it works directly on the         *   FILE 247\n//*                  SYS1.BRODCAST dataset itself (or a copy) and   *   FILE 247\n//*                  goes in, does the enqueues, and does all the   *   FILE 247\n//*                  work directly.  Since it doesn't need LISTBC,  *   FILE 247\n//*                  this command doesn't have to run authorized.   *   FILE 247\n//*                  Can't work on Userlogs.  Only SYS1.BRODCAST.   *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMDIAG   -  Attempts to find \"orphaned messages\" which     *   FILE 247\n//*                  are \"officially valid\" but which are not       *   FILE 247\n//*                  part of a userid message chain.  Once found,   *   FILE 247\n//*                  you have to fix 'em by hand.  (Null 'em out    *   FILE 247\n//*                  with Fullscreen ZAP (File 134)).  Sorry.       *   FILE 247\n//*                  Key byte of a null record is X'FF'.  First     *   FILE 247\n//*                  data byte is \"R\" from CCHHR or TTR.            *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMDUMP   -  Works with BCMREST and BCMEXPND.  Dumps the    *   FILE 247\n//*                  RECFM=DA SYS1.BRODCAST dataset into a RECFM=FB *   FILE 247\n//*                  LRECL=130 dataset that can be moved anywhere.  *   FILE 247\n//*                  BCMREST will reload this dump into a copy of   *   FILE 247\n//*                  SYS1.BRODCAST, even across different device    *   FILE 247\n//*                  types.  BCMEXPND will also do this, but it     *   FILE 247\n//*                  will add blank userid messages to fill all     *   FILE 247\n//*                  allocated primary extent space.  Therefore,    *   FILE 247\n//*                  with BCMEXPND, you can enlarge SYS1.BRODCAST   *   FILE 247\n//*                  without losing the messages.  Or you can move  *   FILE 247\n//*                  it, to a different pack or even a different    *   FILE 247\n//*                  system.                                        *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMEXPND  -  Works from a BCMDUMP RECFM=FB LRECL=130 dump   *   FILE 247\n//*                  of SYS1.BRODCAST dataset, and will restore it, *   FILE 247\n//*                  with all the messages and notices, to a copy   *   FILE 247\n//*                  of SYS1.BRODCAST, that has been enlarged with  *   FILE 247\n//*                  blank userid message records, to fit a bigger  *   FILE 247\n//*                  allocated space.  Therefore, you can make      *   FILE 247\n//*                  SYS1.BRODCAST bigger, without losing any       *   FILE 247\n//*                  messages, and without doing an ACCOUNT SYNC.   *   FILE 247\n//*                  Needs an IPL.  Compensates for different       *   FILE 247\n//*                  device types.  (This may be the first time     *   FILE 247\n//*                  in the history of OS and MVS that this could   *   FILE 247\n//*                  be done.  I've never heard of another such     *   FILE 247\n//*                  program.)                                      *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMREST   -  Does the same as BCMEXPND, but doesn't add     *   FILE 247\n//*                  any new records.  Just restores the records    *   FILE 247\n//*                  that were dumped.  Will compensate for         *   FILE 247\n//*                  different disk device types.  You can move     *   FILE 247\n//*                  SYS1.BRODCAST from a 3380 to a 3390, for       *   FILE 247\n//*                  example, without losing any messages.          *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMLIST   -  TSO command, not authorized or restricted,     *   FILE 247\n//*                  to list any user's (or all users') messages    *   FILE 247\n//*                  in SYS1.BRODCAST.  Doesn't do Userlogs.        *   FILE 247\n//*                  All the BCMLIS* programs can be invoked,       *   FILE 247\n//*                  using a special userid name ALL$#@, which      *   FILE 247\n//*                  will display information for all userids       *   FILE 247\n//*                  defined to SYS1.BRODCAST.  All these BCMLIS*   *   FILE 247\n//*                  commands can be run under TSO-in-Batch.        *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMLISY   -  Same as BCMLIST, but shows each message's      *   FILE 247\n//*                  Relative Record Address.  (For diagnostic      *   FILE 247\n//*                  purposes, to show the message chain.)          *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMLISX   -  Same as BCMLISY, but also shows entries for    *   FILE 247\n//*                  users with no outstanding messages.  Can be    *   FILE 247\n//*                  used (somewhat awkwardly) to display a list    *   FILE 247\n//*                  of all defined userids in SYS1.BRODCAST.       *   FILE 247\n//*                  For that purpose, use the BCMUSERS program.    *   FILE 247\n//*                  This program is best used in TSO-in-Batch.     *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMNLIST  -  List NOTICES messages on the SYS1.BRODCAST     *   FILE 247\n//*                  dataset, or a copy of it, in a format          *   FILE 247\n//*                  similar to that produced by the \"SEND LIST\"    *   FILE 247\n//*                  subcommand of the OPERATOR TSO command.        *   FILE 247\n//*                  This command does not have to be authorized.   *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMNCLEN  -  Cleans all NOTICES records in SYS1.BRODCAST    *   FILE 247\n//*                  so they don't have any unused bytes that       *   FILE 247\n//*                  mislead you when you REVIEW or BROWSE the      *   FILE 247\n//*                  SYS1.BRODCAST dataset.  Replaces all           *   FILE 247\n//*                  irrelevant or left over message bytes by       *   FILE 247\n//*                  hexzeros.  This is a non-authorized TSO        *   FILE 247\n//*                  command that is executed without parameters.   *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMNOTFY  -  Write NOTICES by message number to             *   FILE 247\n//*                  SYS1.BRODCAST or a copy of it.  You can        *   FILE 247\n//*                  write a new message to a given message number  *   FILE 247\n//*                  without deleting the old message that was      *   FILE 247\n//*                  there first.  You can delete a message from    *   FILE 247\n//*                  a given number, or you can write a message     *   FILE 247\n//*                  of blanks to a given number.  This command     *   FILE 247\n//*                  does not have to be authorized.                *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMNUPD   -  Authorized TSO command, executed without       *   FILE 247\n//*                  parameters, to update the bit in the TSO       *   FILE 247\n//*                  Vector Table that forces a new copy of the     *   FILE 247\n//*                  Incore Notices Table (that is read by LISTBC)  *   FILE 247\n//*                  to be rewritten at the next LISTBC execution.  *   FILE 247\n//*                  This makes all BCMNOTFY changes to the         *   FILE 247\n//*                  BRODCAST dataset immediately readable by       *   FILE 247\n//*                  LISTBC. (True for z/OS 1.3 and later.  See     *   FILE 247\n//*                  comments in the BCMNHELP member for info       *   FILE 247\n//*                  about setting this bit for z/OS 1.2 and        *   FILE 247\n//*                  before.)                                       *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMSEND   -  This TSO command is sort of similar to a       *   FILE 247\n//*                  TSO SEND command, except for some very         *   FILE 247\n//*                  significant differences.  First, BCMSEND       *   FILE 247\n//*                  only writes messsages to the BRODCAST dataset. *   FILE 247\n//*                  It doesn't matter if the user is logged on.    *   FILE 247\n//*                  Second, BCMSEND doesn't use the TSO parser.    *   FILE 247\n//*                  Therefore, it doesn't \"validity check\" the     *   FILE 247\n//*                  text of the message.  Everything that is in    *   FILE 247\n//*                  the command buffer after 7 characters of the   *   FILE 247\n//*                  userid, goes into the message--even hex data.  *   FILE 247\n//*                  This is until the last non-blank character.    *   FILE 247\n//*                  Third, you can use BCMSEND to write to a copy  *   FILE 247\n//*                  of the SYS1.BRODCAST dataset, as well as to    *   FILE 247\n//*                  the real one.  Just allocate the BRODCAST      *   FILE 247\n//*                  ddname to the other dataset, not to the        *   FILE 247\n//*                  cataloged SYS1.BRODCAST dataset.  You need     *   FILE 247\n//*                  UPDATE authority to the BRODCAST dataset, to   *   FILE 247\n//*                  use BCMSEND to write to it.                    *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMUSADD  -  Uses IBM's IKJIFRIF interface.  This is a      *   FILE 247\n//*                  TSO command to add an arbitrary user name      *   FILE 247\n//*                  as a userid in SYS1.BRODCAST.  This command    *   FILE 247\n//*                  can be used in conjunction with BCMUSDEL.      *   FILE 247\n//*                  Adding a userid with BCMUSADD has nothing      *   FILE 247\n//*                  to do with either UADS or RACF.  But it        *   FILE 247\n//*                  allows the system to SEND messages to this     *   FILE 247\n//*                  arbitrary (up to 7 characters) name.           *   FILE 247\n//*                  (Now uses the TSO PUTLINE interface and can    *   FILE 247\n//*                  be run under TSO-in-batch or TSSO.)            *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMUSDEL  -  TSO command to delete an arbitrary TSO         *   FILE 247\n//*                  userid record from SYS1.BRODCAST.  When the    *   FILE 247\n//*                  userid is deleted, so are all its messages.    *   FILE 247\n//*                  This command uses IBM's official IKJIFRIF      *   FILE 247\n//*                  SYS1.BRODCAST interface.  Can be used to       *   FILE 247\n//*                  clear all of a user's messages from SYS1.      *   FILE 247\n//*                  BRODCAST without displaying them, but if you   *   FILE 247\n//*                  want to keep the userid, you have to use       *   FILE 247\n//*                  BCMUSADD afterwards, to add the id back.       *   FILE 247\n//*                  (Now uses the TSO PUTLINE interface and can    *   FILE 247\n//*                  be run under TSO-in-batch or TSSO.)            *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMSCAN   -  A modernization of the old BRODSCAN program    *   FILE 247\n//*                  that is on this tape.  This is a batch program *   FILE 247\n//*                  that does a general statistical survey of the  *   FILE 247\n//*                  current state of the SYS1.BRODCAST dataset.    *   FILE 247\n//*                  It displays all users who have outstanding     *   FILE 247\n//*                  undelivered messages, and how many.  Therefore *   FILE 247\n//*                  if SYS1.BRODCAST is full, or nearly so, you    *   FILE 247\n//*                  run this program first, to determine which     *   FILE 247\n//*                  userids are the culprits.                      *   FILE 247\n//*                                                                 *   FILE 247\n//*     BCMUSERS  -  TSO command to display all userids defined     *   FILE 247\n//*                  to SYS1.BRODCAST.  This has nothing to do      *   FILE 247\n//*                  with UADS or RACF.  Default is now to display  *   FILE 247\n//*                  only users with outstanding messages.  If you  *   FILE 247\n//*                  want to display all userids, use a parm of A   *   FILE 247\n//*                  or ALL.                                        *   FILE 247\n//*                                                                 *   FILE 247\n//*                  If you use a parm of A, userids with           *   FILE 247\n//*                  outstanding messages will be displayed with    *   FILE 247\n//*                  2 extra lines.  One line shows the starting    *   FILE 247\n//*                  and ending message pointer address in the      *   FILE 247\n//*                  userid id record.  The other line shows the    *   FILE 247\n//*                  number of outstanding messages for this        *   FILE 247\n//*                  userid.                                        *   FILE 247\n//*                                                                 *   FILE 247\n//*     CPSCB and LPSCB  -  See note after BCEDIT comments above.   *   FILE 247\n//*                                                                 *   FILE 247\n//*     MYID      -  A TSO command to display your own userid.      *   FILE 247\n//*                  Uses the PSCBUSER field.  Written as a coding  *   FILE 247\n//*                  exercise, but it's handy to use.  Fixed for    *   FILE 247\n//*                  8-character userids, z/OS 2.3 and higher.      *   FILE 247\n//*                                                                 *   FILE 247\n//*     MYIDN     -  A PUTLINE'd version of MYID.  Not re-entrant.  *   FILE 247\n//*                                                                 *   FILE 247\n//*     MYIDP     -  A version of MYID which uses the TSO PUTLINE   *   FILE 247\n//*                  interface and which can show output when run   *   FILE 247\n//*                  under TSO-in-batch or TSSO.  Re-entrant.       *   FILE 247\n//*                  Also shows system name, and system FMID level. *   FILE 247\n//*                                                                 *   FILE 247\n//*     SYSTM     -  A TSO command to display what system you're    *   FILE 247\n//*                  running on.  Also written as an exercise.      *   FILE 247\n//*                  But also handy to have, so I'm making it       *   FILE 247\n//*                  available here.                                *   FILE 247\n//*                                                                 *   FILE 247\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@ZAP#NOT": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00T\\x00\\x856_\\x01\\x05\\x10\\x7f\\x00T\\x00\\x1d\\x00\\x0b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-12-31T00:00:00", "modifydate": "2005-04-17T00:54:54", "lines": 29, "newlines": 11, "modlines": 0, "user": "SBGOLOB"}, "text": "//WSBGBCM  JOB ,'SAM GOLOB',CLASS=S,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//***************************************************************//\n//*                                                             *//\n//*  QUICK ZAP JOB TO:                                          *//\n//*                                                             *//\n//*  CHANGE THE DEFAULT NUMBER OF NOTICES RECORDS THAT ARE      *//\n//*  TO BE FORMATTED BY THE TSO COMMAND:   ACCOUNT  SYNC        *//\n//*                                                             *//\n//*  TRY TO MAKE THE NEW NUMBER A MULTIPLE OF 25.               *//\n//*                                                             *//\n//*  INSTRUCTIONS ON HOW TO DO THIS IN SOURCE CODE, ARE FOUND   *//\n//*  IN SYS1.SAMPLIB AS MEMBER BCSTSMPE OR IKJBSMPE, DEPENDING  *//\n//*  ON WHICH RELEASE OF MVS YOU ARE RUNNING.                   *//\n//*                                                             *//\n//*  THIS INVOLVES CODING THE IKJBCAST MACRO AND CREATING A     *//\n//*  USERMOD.  OUR JOB GOES THE \"QUICK CHANGE\" ROUTE.           *//\n//*                                                             *//\n//***************************************************************//\n//*\n//ZAPNOTE EXEC PGM=AMASPZAP\n//SYSUDUMP DD  SYSOUT=*,HOLD=YES\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR <= LIBRARY CONTAINING IKJEFXSR\n//SYSIN    DD  *\n NAME  IKJEFXSR IKJEBLMT\n VER   0000   00000064         100 NOTICES RECORDS\n REP   0000   000000C8         200 NOTICES RECORDS\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BC": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x06\\x03\\x1f\\x01\\x06\\x03\\x1f\\x00E\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-31T00:00:00", "modifydate": "2006-01-31T00:45:54", "lines": 10, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "/* rexx - from Brian Westerman */\n/* trace i */\n/*********************************************************************/\n/*********************************************************************/\naddress tso \"ALTLIB ACT APPL(CLIST) DA('dsname.BRODCAST.ISPF')\"\naddress ispexec \"LIBDEF ISPPLIB DATASET ID('dsname.BRODCAST.ISPF')\",\n                                      \" STACK\"\naddress ispexec \"SELECT CMD(BCMUTIL)\"\naddress ispexec \"LIBDEF ISPPLIB\"\naddress tso \"ALTLIB DEACT APPL(CLIST)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BC#": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01\\x06\\x03\\x1f\\x01\\x06\\x03\\x1f\\x00S\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-31T00:00:00", "modifydate": "2006-01-31T00:53:10", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "From :  Brian_Westerman@SyzygyInc.com\nDate :  Jan 31, 2006, 12:18 AM\n\nOkay,\n\nI already use your brodcast stuff but I downloaded file 247 and\nrefreshed what I had.  There is a small change that I made that\nmight be useful for other people.\n\nI leave all of Vinh's stuff in a PDS called dsname.BROADCAST.ISPF\nand use this exec to use it:\n\n/* rexx */\n/* trace i */\n/*********************************************************************/\n/*********************************************************************/\naddress tso \"ALTLIB ACT APPL(CLIST) DA('dsname.BRODCAST.ISPF')\"\naddress ispexec \"LIBDEF ISPPLIB DATASET ID('dsname.BRODCAST.ISPF')\",\n                                      \" STACK\"\naddress ispexec \"SELECT CMD(BCMUTIL)\"\naddress ispexec \"LIBDEF ISPPLIB\"\naddress tso \"ALTLIB DEACT APPL(CLIST)\"\n\nThat way, I don't have to add any clists or panels to the logon\nprocs.  I have not tried to use ISPLLIB for your programs, but\nthey might work from there.\n\nBrian\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCEDIT": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01+\\x00$\\x00\\x993o\\x01\\x166/\\x022\\x00N\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.43", "flags": 0, "createdate": "1999-12-02T00:00:00", "modifydate": "2016-12-27T02:32:24", "lines": 78, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "/*********************************REXX**********************************\n* Display and edit the broadcast messages                              *\n* Paul Lemons, Texas Utilities (TXU) 12/5/99\n* the BCEDITM1/2 edit macros also required\n* If messages exist then an edit screen will display existing messages\n* If no messages exist then a default screen will be displayed\n* In either case whatever is saved can be used to update the broadcast\n*   dataset.  A prompt will verify whether or not to make changes.\n*  ------------------------------------------------------------------\n* This is a newer version that keeps leading blanks.  Much preferred\n*   by me. (SG - 05/16/05)  I like to center the messages in a pattern.\n***********************************************************************/\nTrace off\nmsg_status=msg('off')\nCall outtrap \"LINE.\"\nlistbc notices\nCall outtrap \"OFF\"\nIf line.0 \u00ac= 0 then do\n  rline = line.0\n  cnt = 0\n  do until cnt = rline\n    cnt = cnt + 1\n    if words(sysl.cnt) > 0 then do\n    end\n  end\nend\nexist = 'yes'\nIf line.0 = 0 then do\n  exist = 'no'\n  line.0 = 1\n  line.1 = '                                                           '\nend\neddsn = space(sysvar(sysuid) .bcedit.temp.file,0)\neddsn = \"'\"eddsn\"'\"\nsay eddsn\nx = sysdsn(eddsn)\nif x = ok then \"delete (\"eddsn\")\"\n\"free f(brddtmp)\"\n\"alloc f(brddtmp) da(\"eddsn\") new space(1,1) track lrecl(80) recfm(f)\"\naddress ispexec \"lminit dataid(dataid) ddname(brddtmp)\"\naddress ispexec \"lmfree dataid(\"dataid\")\"\n\"execio\" line.0 \"diskw brddtmp (stem line. finis)\"\naddress ispexec \"lminit dataid(dataid) ddname(brddtmp)\"\nif exist = 'no' then\n  address ispexec \"edit dataid(\"dataid\") macro(bceditm1)\"\nif exist = 'yes' then\n  address ispexec \"edit dataid(\"dataid\") macro(bceditm2)\"\naddress ispexec \"lmfree dataid(\"dataid\")\"\n\"execio * diskr brddtmp (stem sysl. finis\"\nsay 'BCEDIT001I - Update or Cancel? (U/C) CANCEL is the default'\nparse pull reply\nif substr(reply,1) = 'U' | substr(reply,1) = 'u' then do\n  \"CONSOLE ACTIVATE\"\n  if rc >= 4 then do\n    say 'BCEDIT003E - Unable to activate console'\n   msg_status=msg('on')\n    return 12\n  end\n  GETCODE = GETMSG('CONSMSG.','SOL','XXXS0001',,3)\n  \"CONSPROF SOLDISP(NO) SOLNUM(400)\"\n  IF rline > 0 THEN DO cnt = 1 to rline\n    \"CONSOLE SYSCMD(se \"cnt\",delete) CART('CONS0001')\"\n    msgrett = getmsg('dmsg','sol','CONS0001',,1)\n  END\n  IF sysl.0 > 0 THEN DO cnt = 1 to sysl.0\n    IF WORDS(sysl.cnt) > 0 THEN do\n      \"CONSOLE SYSCMD(se '\"sysl.cnt\"',save) CART('CONS0001')\"\n      msgrett = getmsg('dmsg','sol','CONS0001',,1)\n    END\n  END\n  \"CONSOLE DEACTIVATE\"\n  say 'BCEDIT004I - Broadcast Messages updated'\n  msg_status=msg('on')\n  return\nend\nmsg_status=msg('on')\nsay 'BCEDIT002I - update cancelled'\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCEDIT@": {"ttr": 1040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x00\\x01\\x00\\x993o\\x01\\x05\\x13o\\x08\\x13\\x00N\\x00\\x16\\x00\\x00\\xd3\\xc5\\xd4\\xd6\\xd5\\xe2@@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "1999-12-02T00:00:00", "modifydate": "2005-05-16T08:13:01", "lines": 78, "newlines": 22, "modlines": 0, "user": "LEMONS"}, "text": "/*********************************REXX**********************************\n* Display and edit the broadcast messages                              *\n* Paul Lemons, Texas Utilities (TXU) 12/5/99\n* the BCEDITM1/2 edit macros also required\n* If messages exist then an edit screen will display existing messages\n* If no messages exist then a default screen will be displayed\n* In either case whatever is saved can be used to update the broadcast\n*   dataset.  A prompt will verify whether or not to make changes.\n*  ------------------------------------------------------------------\n* This is an older version that strips leading blanks. Not desired\n*   by me. (SG - 05/16/05)  I like to center the messages in a pattern.\n***********************************************************************/\nTrace off\nmsg_status=msg('off')\nCall outtrap \"LINE.\"\nlistbc notices\nCall outtrap \"OFF\"\nIf line.0 \u00ac= 0 then do\n  rline = line.0\n  cnt = 0\n  do until cnt = rline\n    cnt = cnt + 1\n    if words(sysl.cnt) > 0 then do\n      line.cnt = strip(line.cnt,l,' ')\n    end\n  end\nend\nexist = 'yes'\nIf line.0 = 0 then do\n  exist = 'no'\n  line.0 = 1\n  line.1 = '                                                           '\nend\neddsn = space(mvsvar('sysname') .bcedit.temp.file,0)\neddsn = \"'\"eddsn\"'\"\nx = sysdsn(eddsn)\nif x = ok then \"delete (\"eddsn\")\"\n\"free f(brddtmp)\"\n\"alloc f(brddtmp) da(\"eddsn\") new space(1,1) track lrecl(80) recfm(f)\"\naddress ispexec \"lminit dataid(dataid) ddname(brddtmp)\"\naddress ispexec \"lmfree dataid(\"dataid\")\"\n\"execio\" line.0 \"diskw brddtmp (stem line. finis)\"\naddress ispexec \"lminit dataid(dataid) ddname(brddtmp)\"\nif exist = 'no' then\n  address ispexec \"edit dataid(\"dataid\") macro(bceditm1)\"\nif exist = 'yes' then\n  address ispexec \"edit dataid(\"dataid\") macro(bceditm2)\"\naddress ispexec \"lmfree dataid(\"dataid\")\"\n\"execio * diskr brddtmp (stem sysl. finis\"\nsay 'BCEDIT001I - Update or Cancel? (U/C) CANCEL is the default'\nparse pull reply\nif substr(reply,1) = 'U' | substr(reply,1) = 'u' then do\n  \"CONSOLE ACTIVATE\"\n  if rc >= 4 then do\n    say 'BCEDIT003E - Unable to activate console'\n   msg_status=msg('on')\n    return 12\n  end\n  GETCODE = GETMSG('CONSMSG.','SOL','XXXS0001',,3)\n  \"CONSPROF SOLDISP(NO) SOLNUM(400)\"\n  IF rline > 0 THEN DO cnt = 1 to rline\n    \"CONSOLE SYSCMD(se \"cnt\",delete) CART('CONS0001')\"\n    msgrett = getmsg('dmsg','sol','CONS0001',,1)\n  END\n  IF sysl.0 > 0 THEN DO cnt = 1 to sysl.0\n    IF WORDS(sysl.cnt) > 0 THEN do\n      \"CONSOLE SYSCMD(se '\"sysl.cnt\"',save) CART('CONS0001')\"\n      msgrett = getmsg('dmsg','sol','CONS0001',,1)\n    END\n  END\n  \"CONSOLE DEACTIVATE\"\n  say 'BCEDIT004I - Broadcast Messages updated'\n  msg_status=msg('on')\n  return\nend\nmsg_status=msg('on')\nsay 'BCEDIT002I - update cancelled'\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCEDITM1": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00H\\x00\\x994\\x0f\\x00\\x994\\x0f\\x108\\x00\\x07\\x00\\x05\\x00\\x00\\xd3\\xc5\\xd4\\xd6\\xd5\\xe2@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1999-12-06T00:00:00", "modifydate": "1999-12-06T10:38:48", "lines": 7, "newlines": 5, "modlines": 0, "user": "LEMONS"}, "text": "/* REXX */\n/* this is an edit macro for rexx exec BCEDIT */\naddress ispexec\n\"ISREDIT MACRO\"\nmsg1 = '**** NO existing broadcast messages were found ****'\n\"isredit line_before 1 =  noteline '\"msg1\"'\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCEDITM2": {"ttr": 1282, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00V\\x00\\x994\\x0f\\x00\\x994\\x0f\\x108\\x00\\x08\\x00\\x06\\x00\\x00\\xd3\\xc5\\xd4\\xd6\\xd5\\xe2@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-12-06T00:00:00", "modifydate": "1999-12-06T10:38:56", "lines": 8, "newlines": 6, "modlines": 0, "user": "LEMONS"}, "text": "/* REXX */\n/* this is an edit macro for rexx exec BCEDIT */\naddress ispexec\n\"ISREDIT MACRO\"\n\"isredit recovery on\"\nmsg1 = '**** Existing broadcast messages were found ****'\n\"isredit line_before 1 =  noteline '\"msg1\"'\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCEDITO": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01)\\x00\\x03\\x00\\x993o\\x01\\x00$?\\x13\\x18\\x00L\\x00\\x16\\x00\\x00\\xd3\\xc5\\xd4\\xd6\\xd5\\xe2@@@@'", "ispf": {"version": "01.41", "flags": 0, "createdate": "1999-12-02T00:00:00", "modifydate": "2000-08-30T13:18:03", "lines": 76, "newlines": 22, "modlines": 0, "user": "LEMONS"}, "text": "/*********************************REXX**********************************\n* Display and edit the broadcast messages                              *\n* Paul Lemons, Texas Utilities (TXU) 12/5/99\n* the BCEDITM1/2 edit macros also required\n* If messages exist then an edit screen will display existing messages\n* If no messages exist then a default screen will be displayed\n* In either case whatever is saved can be used to update the broadcast\n*   dataset.  A prompt will verify whether or not to make changes.\n***********************************************************************/\nTrace off\nmsg_status=msg('off')\nCall outtrap \"LINE.\"\nlistbc notices\nCall outtrap \"OFF\"\nIf line.0 \u00ac= 0 then do\n  rline = line.0\n  cnt = 0\n  do until cnt = rline\n    cnt = cnt + 1\n    if words(sysl.cnt) > 0 then do\n      line.cnt = strip(line.cnt,l,' ')\n    end\n  end\nend\nexist = 'yes'\nIf line.0 = 0 then do\n  exist = 'no'\n  line.0 = 1\n  line.1 = '                                                           '\nend\neddsn = space(sysvar(sysuid) .bcedit.temp.file,0)\neddsn = \"'\"eddsn\"'\"\nsay eddsn\nx = sysdsn(eddsn)\nif x = ok then \"delete (\"eddsn\")\"\n\"free f(brddtmp)\"\n\"alloc f(brddtmp) da(\"eddsn\") new space(1,1) track lrecl(80) recfm(f)\"\naddress ispexec \"lminit dataid(dataid) ddname(brddtmp)\"\naddress ispexec \"lmfree dataid(\"dataid\")\"\n\"execio\" line.0 \"diskw brddtmp (stem line. finis)\"\naddress ispexec \"lminit dataid(dataid) ddname(brddtmp)\"\nif exist = 'no' then\n  address ispexec \"edit dataid(\"dataid\") macro(bceditm1)\"\nif exist = 'yes' then\n  address ispexec \"edit dataid(\"dataid\") macro(bceditm2)\"\naddress ispexec \"lmfree dataid(\"dataid\")\"\n\"execio * diskr brddtmp (stem sysl. finis\"\nsay 'BCEDIT001I - Update or Cancel? (U/C) CANCEL is the default'\nparse pull reply\nif substr(reply,1) = 'U' | substr(reply,1) = 'u' then do\n  \"CONSOLE ACTIVATE\"\n  if rc >= 4 then do\n    say 'BCEDIT003E - Unable to activate console'\n   msg_status=msg('on')\n    return 12\n  end\n  GETCODE = GETMSG('CONSMSG.','SOL','XXXS0001',,3)\n  \"CONSPROF SOLDISP(NO) SOLNUM(400)\"\n  IF rline > 0 THEN DO cnt = 1 to rline\n    \"CONSOLE SYSCMD(se \"cnt\",delete) CART('CONS0001')\"\n    msgrett = getmsg('dmsg','sol','CONS0001',,1)\n  END\n  IF sysl.0 > 0 THEN DO cnt = 1 to sysl.0\n    IF WORDS(sysl.cnt) > 0 THEN do\n      \"CONSOLE SYSCMD(se '\"sysl.cnt\"',save) CART('CONS0001')\"\n      msgrett = getmsg('dmsg','sol','CONS0001',,1)\n    END\n  END\n  \"CONSOLE DEACTIVATE\"\n  say 'BCEDIT004I - Broadcast Messages updated'\n  msg_status=msg('on')\n  return\nend\nmsg_status=msg('on')\nsay 'BCEDIT002I - update cancelled'\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMCLEA$": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x11\\x8f\\x00\\x99\\x13\\x8f#\\x18\\x00\\x08\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-04-28T00:00:00", "modifydate": "1999-05-18T23:18:00", "lines": 8, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//BRODCAST EXEC PGM=BCMCLEAN,REGION=2M\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//BRODMAP  DD  SYSOUT=*,DCB=BLKSIZE=133\n//BRODSNAP DD  SYSOUT=*\n//BRODCAST DD  DSN=SBGOLOB.BRODCAST.COPY,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMCLEAN": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x13\\x00\\x95\\x14\\x8f\\x01\\x01\\x19?\\x12\\x17\\x03\\x8a\\x03\\x1e\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "1995-05-28T00:00:00", "modifydate": "2001-07-12T12:17:13", "lines": 906, "newlines": 798, "modlines": 0, "user": "WSBG"}, "text": "         TITLE 'CLEAN DELETED MESSAGES IN SYS1.BRODCAST'\n*------------------------------------------------------------------*\n*                                                                  *\n*          B C M C L E A N   (CLEAN BRODCAST DATASET)              *\n*                                                                  *\n*------------------------------------------------------------------*\n*                                                                  *\n*   DESCRIPTION:   WHEN LISTBC DELETES MESSAGES FROM THE           *\n*                  SYS1.BRODCAST DATASET, IT DOESN'T ZERO OUT      *\n*                  THE ENTIRE MESSAGE, BUT IT PLACES AN X'FF'      *\n*                  IN THE KEY BYTE, AND THE \"R\" FROM THE CCHHR     *\n*                  OR TTR OF THE RECORD, IN THE FIRST DATA BYTE.   *\n*                                                                  *\n*                  AT THIS POINT, THE RECORD IS CONSIDERED         *\n*                  DELETED, BUT IT IS FULL WITH THE MESSAGE        *\n*                  TEXT, AND WHEN YOU BROWSE OR \"REVIEW\" THE       *\n*                  SYS1.BRODCAST DATASET, IT LOOKS FULL WHEN       *\n*                  IT'S EMPTY.                                     *\n*                                                                  *\n*                  THIS PROGRAM REPLACES THE REST OF THE DATA      *\n*                  FROM ALL DELETED MESSAGE RECORDS, WITH 128      *\n*                  BYTE OF X'00'.  THAT'S WHAT OUGHT TO BE         *\n*                  THERE.                                          *\n*                                                                  *\n*  EXECUTION JCL:                                                  *\n*                                                                  *\n*    //BRODCAST EXEC PGM=BCMCLEAN,REGION=2M                        *\n*    //STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD                      *\n*    //BRODMAP  DD  SYSOUT=*,DCB=BLKSIZE=133                       *\n*    //BRODSNAP DD  SYSOUT=*                                       *\n*    //*RODCAST DD  DSN=SBGOLOB.BRODCAST.COPY,DISP=SHR             *\n*    //BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR                     *\n*                                                                  *\n*                                                                  *\n*                                                                  *\n*                                                                  *\n*------------------------------------------------------------------*\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL84 -         RESERVED\n         MEND\n         MACRO\n         IKJZT302  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT303   &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         SPACE\nR0       EQU   0                  USED BY O.S.\nR1       EQU   1                  ADDR OF PARM LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9                   PTR TO OUTPUT LINE FOR PUT\nR10      EQU   10                  BAL REGISTER\nR11      EQU   11\nR12      EQU   12                  BASE REGISTER\nR13      EQU   13                  SAVE-AREA ADDRESS\nR14      EQU   14                  ULTIMATE RETURN ADDRESS\nR15      EQU   15                  ENTRY-PT ADDR, WORK REG, RET CODE\n         SPACE\nBCMCLEAN AMODE 24\nBCMCLEAN RMODE 24\nBCMCLEAN CSECT\n         SAVE  (14,12),,BCMCLEAN_&SYSDATE._&SYSTIME\n         LR    R12,R15             LOAD ENTRY ADDRESS\n         LA    R8,4095(,R12)       SECOND BASE                 SG 05/99\n         LA    R8,1(,R8)                                       SG 05/99\n         USING BCMCLEAN,R12,R8     ESTABLISH ADDRESSABILITY\n         LR    R15,R13             SAVE HIS SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          SAVE OFF INTO LOW SAVE\n         ST    R13,8(,R15)         CHAIN MINE BACK\n         XR    R9,R9               FOR POSSIBLE DEBUG PURPOSES\n         XR    R10,R10             FOR POSSIBLE DEBUG PURPOSES\n         SPACE\n         OPEN  (BRODCAST,(INOUT),BRODMAP,(OUTPUT),SNAP,(OUTPUT))\n*--------------------------------------------------------------------*\n*        PRINT BRODMAP HEADERS                                       *\n*--------------------------------------------------------------------*\n         MVI   HDRCOUNT,C'1'                                   SG 05/99\n         MVC   HDRTYPE,HEADER1     MOVE IN DESCRIPTION\n         LA    R9,HDRCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         MVI   HDRCOUNT,C'-'                                   SG 05/99\n         MVC   HDRCNT(16),HDRCNT-1    BLANK FIELD              SG 05/99\n         MVC   HDRTYPE,HEADER0     MOVE IN DESCRIPTION\n         LA    R9,HDRCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         MVI   HDRCOUNT,C' '                                   SG 05/99\n         MVC   HDRTYPE,HEADER2     MOVE IN DESCRIPTION\n         LA    R9,HDRCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         MVC   HDRTYPE,HEADER3     MOVE IN DESCRIPTION\n         LA    R9,HDRCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         MVC   HDRTYPE,HEADER4     MOVE IN DESCRIPTION\n         LA    R9,HDRCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         MVC   HDRTYPE,HEADER5     MOVE IN DESCRIPTION\n         LA    R9,HDRCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         MVI   HDRCOUNT,C'-'                                   SG 05/99\n         MVC   HDRTYPE,HEADER0     MOVE IN DESCRIPTION\n         LA    R9,HDRCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n*--------------------------------------------------------------------*\n*        GET THE HEADER RECORD.  THIS IS A SPECIAL RECORD 1.\n*--------------------------------------------------------------------*\n         SPACE\n         READ  HDRECB,             ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK HDRECB\n         L     R3,HDRECB+12\n         USING R1BC,R3             ADDRESSABILITY TO RECORD 1 MAPPING\n         SPACE\n         AP    REC04,=P'1'         ADD 1 TO TOTAL                JDM0\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA 1ST USER'S MAIL DIR REC\n         MVC   HIGHVAL(4),R1RECNUM SAVE GET OUT VALUE\n         MVC   SAVHDADR(4),R1RECNUM SAVE GET OUT VALUE         SG MAY99\n         L     R5,HIGHVAL          GET NUMBER FOR PRINTOUT\n         CVD   R5,CVDAREA          CONVERT IT TO PRINTABLE\n         MVC   MAXCNT,MASK7        MOVE IN THE MASK\n         ED    MAXCNT,CVDAREA+5    MAKE IT PRETTY\n         LA    R9,MAXIMUM          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           TELL HOW MANY\n         SPACE\n         LH    R5,R1BCMAX          GET NUMBER OF NOTICES\n         XR    R4,R4               CLEAR R4\n         D     R4,=F'25'           NUMBER OF BLOCKS REQUIRED\n         AH    R5,R1BCMAX          PLUS TOTAL FOR MESSAGES\n         DROP  R3\n         LTR   R4,R4               REMAINDER?\n         BZ    CVDNOT\n         LA    R5,1(,R5)           ONE MORE REQUIRED\nCVDNOT   EQU   *\n         CVD   R5,CVDAREA          CONVERT IT TO PRINTABLE\n         MVC   NOTCNT,MASK4\n         ED    NOTCNT,CVDAREA+6    MAKE IT PRETTY\n         LA    R9,NOTICES          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           TELL HOW MANY\n         L     R9,HDRECB+20        POINT TO KEY\n         BAL   R10,SNAPUNK\n         L     R9,HDRECB+12        POINT TO AREA\n         BAL   R10,SNAPUNK\n         SPACE\n         FREEDBUF HDRECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         L     R0,SAVHDADR              GET MAXIMUM RECORDS    SG MAY99 005\n         A     R0,=F'3'                 3   FOR GOOD LUCK      SG MAY99 005\nTYPEGET  GETMAIN RU,LV=(0),LOC=BELOW    GET STORAGE FOR TABLE  HD DEC97 005\n         ST    R1,TYPETBLA              SAVE ADDRESS           HD DEC97 005\n         LR    R0,R1                    SAVE ADDRESS           HD DEC97 005\n         L     R1,SAVHDADR              GET LENGTH             SG MAY99 005\n         LM    R14,R15,=D'0'            CLEAR FOR ICM          HD DEC97 006\n         ICM   R15,B'1000',=X'99'       PAD WITH X'99'         HD DEC97 006\n         MVCL  R0,R14                   CLEAR AREA             HD DEC97 006\n         L     R7,TYPETBLA                                     HD DEC97 006\n         MVI   1(R7),X'04'                                     HD DEC97 006\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         SPACE\n*--------------------------------------------------------------------*\n*        THIS IS NOW OUR READ LOOP AS WE DO A SUCESSIVE READ\n*        INCREMENTING THE RBA NUMBER UNTIL WE REACH THE BCNUMREC\n*        VALUE SAVED IN 'HIGHVAL'.  ONCE WE HAVE READ ALL THE\n*        RECORDS WE WILL GO AND ANALYZE THEM.\n*--------------------------------------------------------------------*\n         SPACE\nREADLOOP DS    0H\n         ICM   R1,7,BLOCKNO        GET PROCESSED RBA\n         LA    R1,1(R1)            INCREMENT BY ONE\n         STCM  R1,7,BLOCKNO        STORE IT BACK FOR READ\n         CLC   BLOCKNO(3),HIGHVAL+1  DID WE REACH MAX?           JDM0\n         BE    ANALYZE             IF SO, GO ANALYZE THEM ALL\n         SPACE\n         READ  REPECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA TO HOLD THE KEY\n         SPACE\n         CHECK REPECB\n         SPACE\n         L     R2,REPECB+20        GET KEY ADDRESS\n         MVC   0(1,R7),0(R2)       STORE TYPE INTO TABLE\n         LA    R7,1(R7)            INCREMENT IN OUR TABLE.\n         CLI   0(R2),X'FF'         IS IT DELETED RECORD ?      SG 05/99\n         BNE   LOOPGO1             NO. DON'T DO WRITES.        SG 05/99\n         ST    R8,SAVER8                                       SG 05/99\n         L     R8,REPECB+12        GET RECORD ADDRESS TO ZERO. SG 05/99\n         MVC   1(128,R8),ZERMREC   AND ZERO IT OUT             SG 05/99\n         L     R8,SAVER8                                       SG 05/99\n         WRITE REPECB,             ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK REPECB\n         AP    CLRCNT,=P'1'        BUMP COUNTER - MSGS CLEANED SG 05/99\nLOOPGO1  DS    0H                                              SG 05/99\n         SPACE\n*--------------------------------------------------------------------*\n*        COUNT THE DIFFERENT RECORD TYPES FOR LATER REPORTING.\n*--------------------------------------------------------------------*\n         SPACE\n         CLI   0(R2),X'00'         IS THIS NOTICE DIRECTORY RECORD?\n         BNE   CHK1                NO.\n         AP    NOTDIR,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK1     EQU   *\n         CLI   0(R2),X'01'         IS THIS USERID DIRECTORY RECORD?\n         BNE   CHK2                NO.\n         AP    USRIND,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK2     EQU   *\n         CLI   0(R2),X'02'         IS THIS NOTICES MSG RECORD?\n         BNE   CHK3                NO.\n         AP    NOTMSG,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK3     EQU   *\n         CLI   0(R2),X'03'         IS THIS USER MSG RECORD?\n         BNE   CHK4                NO.\n         AP    USRMSG,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK4     EQU   *                                                 JDM1\n         CLI   0(R2),X'05'         IS THIS POINTER RECORD?       JDM1\n         BNE   CHKFF               NO.                           JDM1\n         AP    PTRMSG,=P'1'        ADD 1 TO TOTAL                JDM1\n         B     FREEB                                             JDM1\n         SPACE 1                                                 JDM1\nCHKFF    EQU   *\n         CLI   0(R2),X'FF'         DUMMY INACTIVE MAIL MSG RECORD?\n         BNE   UNKNOWN             NO.\n         AP    FREEREC,=P'1'       ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nUNKNOWN  EQU   *\n         UNPK  ODDKEY+36(3),0(2,R2)\n         TR    ODDKEY+36(2),HEXTAB-X'F0'\n         MVI   ODDKEY+38,C' '\n         LA    R9,ODDKEY           POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         L     R9,REPECB+20        GET KEY ADDRESS\n         BAL   R10,SNAPUNK         GO SNAP THIS UNKNOWN RECORD.\n         SPACE\nFREEB    DS    0H                                                       009\n         FREEDBUF REPECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         B     READLOOP\n         SPACE\n*--------------------------------------------------------------------*\n*        NOW, START TO ANALYZE ALL AND PRINT RESULTS TO THE REPORT.\n*--------------------------------------------------------------------*\n         SPACE\nANALYZE  DS    0H\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         LA    R9,BREAKOUT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT           PUT OUT THE SECTION HEADER\n         SPACE\n         MVC   KEYTYPE,TYPE04      MOVE IN DESCRIPTION           JDM0\n         MVC   KEYCNT,MASK7                                      JDM0\n         ED    KEYCNT,REC04                                      JDM0\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT        JDM0\n         BAL   R10,PRINT                                         JDM0\n         SPACE 1                                                 JDM0\n         MVC   KEYTYPE,TYPE00      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,NOTDIR\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE02      MOVE IN DESCRITPION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,NOTMSG\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE01      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,USRIND\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE03      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,USRMSG\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE05      MOVE IN DESCRIPTION           JDM1\n         MVC   KEYCNT,MASK7                                      JDM1\n         ED    KEYCNT,PTRMSG                                     JDM1\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT        JDM1\n         BAL   R10,PRINT                                         JDM1\n         SPACE 1                                                 JDM1\n         MVC   KEYTYPE,TYPEFF      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,FREEREC\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         LA    R9,USERSOUT         POINT TO LINE TO PRINT\n*        BAL   R10,PRINT\n         MVC   KEYTYPE,TYPCLR      MOVE IN DESCRIPTION         SG 05/99\n         MVC   KEYCNT,MASK7                                    SG 05/99\n         ED    KEYCNT,CLRCNT                                   SG 05/99\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT      SG 05/99\n         BAL   R10,PRINT                                       SG 05/99\n         SPACE 1                                               SG 05/99\n         B     CLOSE      END THE PROGRAM HERE.                SG 05/99\n         SPACE\n*--------------------------------------------------------------------*\n*        IN MVS, THERE IS A CHANGE FROM HAVING 12 USERID PER BLOCK\n*        TO 9 PER BLOCK.\n*--------------------------------------------------------------------*\n         SPACE\nINDEXLP  EQU   *\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA\n         SPACE\n         READ  SCNECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK SCNECB\n         SPACE\n         L     R3,SCNECB+12        ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   SAVERBA,USDNEXT     COPY NEXT INDEX RECORD NUMBER\n         SPACE\n*--------------------------------------------------------------------*\n*        YOU WILL GO THROUGH THIS LOOP 9 TIMES, BECAUSE 9 ENTRIES\n*        ARE HELD IN EVERY RECORD.\n*--------------------------------------------------------------------*\n         SPACE\nUSRLOOP  EQU   *\n         MVC   USERID(7),USDID     COPY WHO THIS IS\n         CLC   USERID(7),ZEROS     IS THIS A REAL USER?\n         BE    NOMSG               NOPE, MUST HAVE BEEN DELETED\n         AP    USERS,=P'1'\n         XR    R4,R4               CLEAR UPPER BYTE\n         ICM   R4,7,USDRBA         GET BLOCK POSITION\n         DROP  R3\n         BZ    NOMSG               NO.. JUST BUMP\nALTCODE  DS    0H                                              HD DEC97 013\n         SLR   R5,R5                    CLEAR FOR ADD          HD DEC97 013\n         L     R7,TYPETBLA              GET ADDRESS OF TYPETBL HD DEC97 013\n         LA    R5,0(R7,R4)              POINT TO TABLE ENTRY   HD DEC97 013\n         BCTR  R5,0                     ORIGIN ZERO            HD DEC97 013\n         CLI   0(R5),X'03'         JUST VERIFY WERE WE ARE\n         BE    TABLOK                   THIS IS A VALID ONE    HD DEC97 014\n         LA    R9,TABLERR          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           JUST LET THEM KNOW I'M CONFUSED\n         B     BUMPUSR\n         SPACE\nTABLOK   DS    0H\n         MVI   0(R5),X'88'         SET THAT IT WAS A VALID MESSAGE\nBUMPUSR  EQU   *\n         AP    MSGCOUNT,=P'1'      INCREMENT HOW MANY MESSAGES\n         STCM  R4,7,MSGNUM\n         SPACE\n         READ  MSGECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MSGNUM              RBA TO HOLD THE KEY\n         SPACE\n         CHECK MSGECB\n         SPACE\n         L     R4,MSGECB+12        ADDRESS OF RECORD\n         USING USMSG,R4\n         ICM   R4,7,USMNEXT        RRN OF NEXT MESSAGE\n         DROP  R4\n         SPACE\n         FREEDBUF MSGECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n*--------------------------------------------------------------------*\n*        TEST TO SEE IF THERE WILL BE ANOTHER RECORD AFTER THIS ONE\n*        IN THE CHAIN.  IF 'USMPTR' IS INDEED ZERO, THEN WE ARE\n*        FINISHED PROCESSING THIS CHAIN AND ARE READY TO DETERMINE\n*        IF WE SHOULD BUILD ENTRY 1, 2, OR 3 SHOWING HOW MANY MSGS\n*        A USER HAS OUTSTANDING.\n*--------------------------------------------------------------------*\n         SPACE\n         LTR   R4,R4\n         BNZ   ALTCODE\n         AP    RECCNT,=P'1'\n         CP    RECCNT,=P'2'        TEST MID RANGE\n         BL    LINE1               LOWER\n         BH    LINE3               HIGHER\n         BE    LINE2               .MIDRANGE\nLINE1    EQU   *\n         MVC   MSGCNT1,MASK4\n         MVC   USERID1,USERID\n         ED    MSGCNT1,MSGCOUNT\n         B     ZAPCNT\n         SPACE\nLINE2    EQU   *\n         MVC   MSGCNT2,MASK4\n         MVC   USERID2,USERID\n         ED    MSGCNT2,MSGCOUNT\n         B     ZAPCNT\n         SPACE\nLINE3    EQU   *\n         MVC   MSGCNT3,MASK4\n         MVC   USERID3,USERID\n         ED    MSGCNT3,MSGCOUNT\n         LA    R9,USERLINE\n         BAL   R10,PRINT\n         MVC   MSGCNT2,=CL4' '\n         MVC   MSGCNT3,=CL4' '\n         MVC   USERID2,=CL7' '\n         MVC   USERID3,=CL7' '\n         ZAP   RECCNT,=P'0'\nZAPCNT   EQU   *\n         ZAP   MSGCOUNT,=P'0'\nNOMSG    EQU   *\n         LA    R3,13(R3)           BUMP TO NEXT ENTRY\n         BCT   R6,USRLOOP          REPEAT FOR NINE TIMES\n         SPACE\n*--------------------------------------------------------------------*\n*        END OF INNER LOOP\n*--------------------------------------------------------------------*\n         SPACE\n         FREEDBUF SCNECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         CLC   SAVERBA,=3X'00'     IS THIS LAST\n         BNE   INDEXLP             GO DO NEXT ONE\n         CP    RECCNT,=P'0'\n         BE    PUTUCNT\n         LA    R9,USERLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\nPUTUCNT  EQU   *\n         MVC   USERCNT,MASK7\n         ED    USERCNT,USERS       HOW MANY USERS ARE THERE\n         LA    R9,UTOTLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         L     R7,TYPETBLA              ONCE MORE THRU TYPETAB HD DEC97 018\nVERFLOOP EQU   *\n         CLI   0(R7),X'99'         END YET?\n         BE    ENDVERF\n         CLI   0(R7),X'03'         IS THIS STILL AN 03\n         LA    R7,1(R7)            BUMP EITHER WAY\n         BNE   VERFLOOP\n         AP    UNUSABL,=P'1'\n         B     VERFLOOP\n         SPACE\n*--------------------------------------------------------------------*\n*        END OF OUTER LOOP\n*--------------------------------------------------------------------*\n         SPACE\nENDVERF  EQU   *\n         MVC   UNUSDCNT,MASK4\n         ED    UNUSDCNT,UNUSABL+1\n         LA    R9,JUNKLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n*--------------------------------------------------------------------*\n*        TIME TO CLOSE AND END THE PROGRAM, BYE.\n*--------------------------------------------------------------------*\n         SPACE\nCLOSE    EQU   *\n         CLOSE (BRODCAST,,BRODMAP,,SNAP)\nFREETYP  DS    0H                                              HD DEC97 020\n         L     R1,TYPETBLA              ADDRESS OF TABLE       HD DEC97 020\n         LH    R0,HIGHVAL               LENGTH OF TABLE        HD DEC97 020\n         AH    R0,=H'1'                 INCREMENT BY ONE       HD DEC97 020\n         FREEMAIN RU,LV=(0),A=(1)       FREE TYPE TABLE        HD DEC97 020\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         SPACE\n*--------------------------------------------------------------------*\n*        THIS SUBROUTINE WAS THE IDEA OF THE BELOW AND THE CODE WAS\n*        LIFTED AND SLIGHTLY ALTERED TO FIT IN HERE.\n*\n*        P. A. MOTINL\n*        COMPUTING CENTRE\n*        J.R.C. - ISPRA ESTABLISHMENT\n*        21020 ISPRA (VA), ITALY\n*\n*        SNAP OUT THE UNKNOWN RECORD TYPE BELOW FOR US TO SEE.\n*--------------------------------------------------------------------*\n         SPACE\nSNAPUNK  EQU   *\n         MVC   SNAPBLK(130),0(R9)  MOVE TO AN ALIGNED AREA\n         LA    R15,SNAPBLK         GET ADDRESS OF RECORD TO SNAP\n         ST    R15,SNAPLST         STORE THE BEGIN ADDRESS\n         AL    R15,=F'130'         ADD RECORD LENGTH\n         ST    R15,SNAPLST+4       STORE ENDING ADDRESS\n         OI    SNAPLST+4,X'80'     INDICATE END OF LIST\n         LA    R11,SNAP            GET DCB ADDRESS\n         SPACE\n         SNAP  DCB=(R11),          DCB ADDRESS TO USE                  X\n               ID=1,               ID NUMBER FOR SNAP                  X\n               LIST=SNAPLST,       LIST OF ADDRESS TO USE              X\n               STRHDR=SNAPHD       HEADER TO PRINT\n         SPACE\n         LTR   R15,R15             WAS SNAP SUCCESSFUL?\n         BZ    SNAPOK\n         CVD   R15,CVDAREA         CONVERT ERROR CODE\n         MVC   SNERR+17(3),MASK3   MOVE IN A MASK\n         ED    SNERR+16(4),CVDAREA+6\n         ST    R15,CVDAREA\n         UNPK  SNERR+26(9),CVDAREA(5)\n         NC    SNERR+26(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    SNERR+26(8),=CL16'0123456789ABCDEF'\n         MVI   SNERR+34,C')'\n         SPACE\nSNAPOK   EQU   *\n         BR    R10                 RETURN TO WHENCE WE CAME\n         SPACE\n*--------------------------------------------------------------------*\n*        PRINT OUTPUT SUBROUTINE.\n*--------------------------------------------------------------------*\n         SPACE\nPRINT    EQU   *\n         PUT   BRODMAP,(R9)        WRITE FROM AREA ADDRESS IN R9\n         BR    R10                 RETURN TO WHENCE WE CAME\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA CONTROL BLOCKS FOLLOW.\n*--------------------------------------------------------------------*\n         SPACE\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=RISC,         3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE\nBRODMAP  DCB   DDNAME=BRODMAP,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\n         SPACE\nSNAP     DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,              X\n               LRECL=125,DDNAME=BRODSNAP\n         LTORG\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA AREAS FOLLOW.\n*--------------------------------------------------------------------*\n         SPACE\nCVDAREA  DS    D\nSAVE     DC    18F'0'\nSNAPLST  DC    2F'0'               SNAP ADDRESS\nTYPETBLA DS    F       ADDRESS OF GETMAINED TYPE TABLE         HD DEC97\nHIGHVAL  DS    F\nSAVHDADR DS    F                   SAVE HEADER ADDRESS         SG MAY99\nZEROS    DC    XL7'00'             ZEROS\nHEXTAB   DC    CL16'0123456789ABCDEF'\nZERMREC  DC    XL128'00'                                       SG 05/99\n         DS    0F\nSNAPBLK  DS    0XL130\n         DC    130X'77'\n         DS    0F\nSNAPHD   DC    A(SNAPHDR)\nSNAPHDR  DC    AL1(L'SNAPHDT)\nSNAPHDT  DC    C'B R O A D C A S T -- DUMP OF A BLOCK READ.'\nSNERR    DC    CL79'  ---> SNAP RC =     (R15=        )'\nBLOCKNO  DC    X'000000'           BLOCK NUMBERS\nSAVERBA  DS    CL3                 SAVE LOCAL OF USER INDEX\nMSGNUM   DS    CL3                 SAVE LOCAL OF USER INDEX\nMASK3    DC    XL3'202120'\nMASK4    DC    XL4'40202120'\nMASK7    DC    XL7'4020206B202120'\nRECCNT   DC    PL1'0'\nMSGCOUNT DC    PL2'0'\nCLRCNT   DC    PL3'0'              CT FOR DELETED MESSAGES CLEANED\nNOTDIR   DC    PL3'0'              CT FOR NOTICE DIRECTORY RECS\nUSRIND   DC    PL3'0'              CT FOR USER MAIL DIRECTORY RECS\nNOTMSG   DC    PL3'0'              CT FOR NOTICE MSG RECS\nUSRMSG   DC    PL3'0'              CT FOR USER MAIL MSG RECS\nPTRMSG   DC    PL3'0'              CT FOR POINTER REC (ALWAYS 1) JDM1\nREC04    DC    PL3'0'              CT FOR MASTER REC (ALWAYS 1)  JDM0\nFREEREC  DC    PL3'0'              CT FOR INACTIVE MAIL MSG RECS\nUNUSABL  DC    PL3'0'\nUSERS    DC    PL3'0'\nTYPE00   DC    CL50'NUMBER OF BRODCAST \"NOTICES\" DIRECTORY RECORDS'\nTYPE01   DC    CL50'NUMBER OF USER \"MAIL\" DIRECTORY RECORDS'\nTYPE02   DC    CL50'NUMBER OF BRODCAST \"NOTICES\" MESSAGE RECORDS'\nTYPE03   DC    CL50'NUMBER OF USER \"MAIL\" MESSAGE RECORDS'\nTYPE04   DC    CL50'COUNT OF 1ST REC OF BRODCAST (SHOULD BE 1)'  JDM0\nTYPE05   DC    CL50'COUNT OF FREE SEARCH RECORD (SHOULD BE 1)'    JDM1\nTYPEFF   DC    CL50'NUMBER OF DUMMY INACTIVE \"MAIL\" MSG RECORDS'\nTYPCLR   DC    CL50'NUMBER OF INACTIVE MAIL RECORDS CLEANED:   '\nHEADER0  DC    CL51'                                            '\nHEADER1  DC    CL52'     B C M C L E A N    P R O G R A M        '\nHEADER2  DC    CL53'THIS PROGRAM ZEROS OUT DELETED USER MESSAGE '\nHEADER3  DC    CL54'RECORDS.  LISTBC LEAVES THE MESSAGE TEXT    '\nHEADER4  DC    CL55'INTACT.  THIS PROGRAM ZEROES OUT THE ENTIRE '\nHEADER5  DC    CL56'MESSAGE AREA.  YOU CAN SEE WHAT''S AVAILABLE.'\nODDKEY   DC    CL133'  ** UNKNOWN KEY TYPE ENCOUNTERED :    **'\nTABLERR  DC    CL133'  ** TABLE IS OUT OF SYNC WITH MY REALITY **'\nBREAKOUT DC    CL133'0< THE FOLLOWING KEY BREAKDOWN WAS FOUND >'\nUSERSOUT DC    CL133'0< THE FOLLOWING USERS HAVE MESSAGES WAITING >'\nQNAM     DC    CL8'SYSIKJBC'\nRNAM     DC    X'000000'\nENQUSER  ENQ   (QNAM,RNAM,E,,SYSTEM),MF=L\nUSERID   DS    CL7\n         DS    0D                                              SG 05/99\nRDWR     READ  REPECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSAVER8   DS    F                                               SG 05/99\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nHDRCOUNT DS    0CL133\n         DC    CL10' '\nHDRTYPE  DC    CL51'              '\n         DC    CL1' '                                          SG 05/99\nHDRCNT   DC    CL16'    VERSION 1.1  '\n         DC    CL55' '\n         SPACE\nKEYCOUNT DS    0CL133\n         DC    CL10' '\nKEYTYPE  DC    CL50'HEADER RECORDS'\nKEYCNT   DC    CL7'      1'\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nMAXIMUM  DS    0CL133\n         DC    CL60'1TOTAL AVAILABLE BLOCKS IN DATASET'\nMAXCNT   DS    CL7\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nNOTICES  DS    0CL133\n         DC    CL63' BLOCKS NECESSARY FOR BROADCST MSGS (DIRECTORY/MESSX\n               AGES)'\nNOTCNT   DS    CL4\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nUSERLINE DS    0CL133\n         DC    CL10' '\nUSERID1  DS    CL7\n         DC    CL5' '\nMSGCNT1  DS    CL4\n         DC    CL10' '\nUSERID2  DS    CL7\n         DC    CL5' '\nMSGCNT2  DS    CL4\n         DC    CL10' '\nUSERID3  DS    CL7\n         DC    CL5' '\nMSGCNT3  DS    CL4\n         DC    CL55' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nUTOTLINE DS    0CL133\n         DC    CL60' NUMBER OF TSO USERS DEFINED IN DATASET'\nUSERCNT  DS    CL7\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nJUNKLINE DS    0CL133\n         DC    CL63'0BLOCKS FOUND TO BE GARBAGED'\nUNUSDCNT DS    CL4\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n*\n*--------------------------------------------------------------------*\n         SPACE\n         EJECT\n*----------------------------------------------------------------*\n*        THE FOLLOWING IS TAKEN FROM AN OLD MVS MANUAL CALLED\n*        \"OS/VS2 MVS CONVERSION NOTEBOOK\" (GC28-0689-6) AND\n*        CONTAINS THE FOLLOWING REFERENCE TO HOW THE BROADCAST\n*        HAS CHANGED FROM OS/MVT AND SVS TO MVS:\n*\n*        'MODIFIED TO INCLUDE A CHANGE LEVEL INDICATOR IN THE\n*        HEADER RECORD AND A NEW FIELD FOR EACH USER ID IN THE\n*        MAIL DIRECTORY RECORDS. THIS FIELD CONTAINS THE\n*        ADDRESS OF THE LAST MESSAGE IN THE CHAIN OF MESSAGES\n*        ASSOCIATED WITH EACH NEW USER.'\n*\n*        NOTE: UNTIL I CAN DUMP RECORDS AND FIGURE OUT WHERE THE\n*              ABOVE STATEMENTS FIT INTO THE DSECTS BELOW, WILL\n*              LET IT TO THE READER TO HELP AND GET IT FIGURED\n*              OUT BEFORE I DO.\n*\n*----------------------------------------------------------------*\n         SPACE\n         IEZBITS\n         SPACE\n         IKJZT301\n         SPACE\n         IKJZT302\n         SPACE\n         IKJZT303\n         SPACE\n         IKJZT304\n         SPACE\n         IKJZT305\n         SPACE\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMDEL": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\"\\x00\\x00\\x00\\x95\\x11\\x7f\\x00\\x99\\x16\\x0f\\x19\"\\x00\\x9e\\x00\\xb1\\x00v\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.34", "flags": 0, "createdate": "1995-04-27T00:00:00", "modifydate": "1999-06-09T19:22:00", "lines": 158, "newlines": 177, "modlines": 118, "user": "SBGOLOB"}, "text": "BCMDEL   TITLE 'BCMDEL - DRAIN BROADCAST MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMDEL USERID                                     *\n*                                                                     *\n*       FUNCTION:   TO DISPLAY AND DELETE UN-SENT BROADCAST MESSAGES  *\n*                   FOR A TSO USERID.  USUALLY USED TO CLEAR MESSAGES *\n*                   FROM ID'S WHICH CAN'T BE LOGGED ON TO.            *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  MAY 19, 95                                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMDEL   CSECT\n         USING BCMDEL,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMDEL VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                                            PARS 06/99\n         B     CONT0          BYPASS AUTHORIZATION           PARS 06/99\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n*        ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n*        L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,NOUSERID          ZERO. MESSAGE\n         BC    5,EOJ8              LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n         LR    R1,R11              POINT R1 TO CPPL.\n         LINK  EP=LISTBC           DO LISTBC COMMAND.\n         MVC   PSCBUSER(7),OLDID   RESTORE OLD USERID TO PSCB\n         MVC   PSCBUSRL(1),OLDPSCBL  RESTORE SAVED USERID LENGTH\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nNOUSERID LA    R15,0                                         PARS 06/99\n         TPUT  MESSAGE1,L'MESSAGE1                           PARS 06/99\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\nMESSAGE1 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72                PADDING\nOLDID    DC    C'        '         STORE OLD USERID HERE\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\n         DS    0F                  ALIGN ON FULLWORD\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMDEL1": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01J\\x00\\x00\\x00\\x95\\x14_\\x00\\x99\\x16\\x0f\\x13!\\x02y\\x01\\xd4\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.74", "flags": 0, "createdate": "1995-05-25T00:00:00", "modifydate": "1999-06-09T13:21:00", "lines": 633, "newlines": 468, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMDEL   TITLE 'BCMDEL - DRAIN BROADCAST MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMDEL USERID                                     *\n*                                                                     *\n*       FUNCTION:   TO DISPLAY AND DELETE UN-SENT BROADCAST MESSAGES  *\n*                   FOR A TSO USERID.  USUALLY USED TO CLEAR MESSAGES *\n*                   FROM ID'S WHICH CAN'T BE LOGGED ON TO.  RUNS BY   *\n*                   MOVING THE OTHER USER'S MESSAGE POINTERS IN SYS1. *\n*                   BRODCAST TO YOUR USERID ENTRY IN SYS1.BRODCAST    *\n*                   AND INVOKING LISTBC AGAINST YOUR OWN USERID.      *\n*                   YOUR OWN MESSAGE POINTERS ARE SAVED AND REPLACED. *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   2.0            *\n*                                                                     *\n*            DATE:  MAY 26, 95           DEBUGGED, WITH TPUTS OUT.    *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                   ALLOC F(SYSLBC)   DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:                                                    *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL84 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMDEL   CSECT\n         USING BCMDEL,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMDEL VER 2.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         MVI   LINE-1,C' '\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING CPPL,R11\n         L     R6,CPPLUPT\n         ST    R6,SAVEUPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT\n         LA    R6,0\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nCHEKAUTH DS    0H            CHECK USER AUTHORIZATION        PARS 06/99\n         B     CONT0         ALWAYS ALLOW                    PARS 06/99\n         USING PSCB,R2\n*        TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n*        BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n*        ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n*        L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, ISSUE MESSAGE\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         MVC   TRYID(8),OLDID      RUN USERID SCAN AGAINST MY ID\n         MVI   SCANFLAG,0          SAY WE'RE SCANNING AND SAVING\n         B     DOBROD              GO DO SCAN AND SAVE POINTERS\n         DROP  R2\nSCANNEW  MVC   TRYID(8),NEWID      DO SCAN AND BLAST MESSAGES\n         MVI   SCANFLAG,255        SAY WE'RE MSG BLASTING\n         B     HEADRD\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         MVC   RNAM(3),ZEROS       RNAME TO ENQUEUE ON\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\nHEADRD   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R6,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R6             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R6\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  CLI   SCANFLAG,X'00'      WHAT ARE WE GOING TO DO?\n         BNE   GOBLAST             NOT ZERO, ASSUME WE'LL BLAST MSGS\n         MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SVMYPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     SCANNEW             GO LOOK FOR THE OTHER ID\nGOBLAST  DS    0H\n         MVC   NWUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH NEW USERID\n         STC   R8,NWUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO HIS MESSAGES\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   FNUSRBA(3),MYUSRBA  DUMP IN RBA FOR FIND ROUTINE\n         MVC   FNUSSLOT,MYUSSLOT   DUMP IN SLOT NUMBER\n         MVC   FINDPTRS,SAVEPTRS   POINTERS TO BE PUT IN\n         MVC   CMPRPTRS,SVMYPTRS   POINTERS TO CHECK IF CHANGED\n         MVC   FINDID(8),OLDID     DUMP IN ID NAME FOR CHECKING\n         NI    COMPFLAG,255-X'80'  DO THE COMPARING\n         BAL   R4,FINDUSR          NEWID PTRS INTO OLDID SLOT\n         MVC   SVMYPTRS,CMPRPTRS   POINTERS TO CHANGE IF CHANGED\n         BAL   R4,KZ               GO BLAST NEWID'S MESSAGES\n*\n         MVC   FNUSRBA(3),NWUSRBA  DUMP IN RBA FOR FIND ROUTINE\n         MVC   FNUSSLOT,NWUSSLOT   DUMP IN SLOT NUMBER\n         MVC   FINDPTRS,ZERENTRY   POINTERS TO BE PUT IN\n         MVC   CMPRPTRS,SAVEPTRS   POINTERS TO CHECK IF CHANGED\n         MVC   FINDID(8),NEWID     DUMP IN ID NAME FOR CHECKING\n         NI    COMPFLAG,255-X'80'  DO THE COMPARING\n         BAL   R4,FINDUSR          NEWID PTRS INTO OLDID SLOT\n         MVC   SAVEPTRS,CMPRPTRS   POINTERS TO CHANGE IF CHANGED\n*\n         MVC   FNUSRBA(3),MYUSRBA  DUMP IN RBA FOR FIND ROUTINE\n         MVC   FNUSSLOT,MYUSSLOT   DUMP IN SLOT NUMBER\n         MVC   FINDPTRS,SVMYPTRS   POINTERS TO BE PUT IN\n         MVC   CMPRPTRS,SVMYPTRS   POINTERS TO CHECK IF CHANGED\n         MVC   FINDID(8),OLDID     DUMP IN ID NAME FOR CHECKING\n         OI    COMPFLAG,X'80'      NO COMPARE BECAUSE RECD IS DIFFERENT\n         BAL   R4,FINDUSR          NEWID PTRS INTO OLDID SLOT\nENDUSER  DS    0H                  PROCESSING WHEN YOU'VE ENDED SCAN\n         CLI   SCANFLAG,X'00'      HAVE WE JUST SCANNED AND SAVED\n         BNE   ZEROUT\n         BAL   R4,ADDUSER          YES, BUT WE GOT TO THE END FIRST\n*                                  AND THERE'S NO USERID ENTRY SO WE\n*                                  HAVE TO ADD ONE.\n         L     R6,IKJIFRET         IKJIFRIF RETURN CODE\n         LTR   R6,R6               TEST IF ZERO\n         BNZ   ZEROUT              ADD NOT SUCCESSFUL, GET OUT\n         B     HEADRD              ADDED. GET THE FIRST ID SLOT AGAIN\nZEROUT   DS    0H\n         B     EOJ0                SECOND TIME AROUND.  WE'RE DONE.\n*                                  OR FIRST TIME AND IKJIFRIF NO GOOD.\nKZ       MODESET KEY=ZERO\n         MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n         LR    R1,R11              POINT R1 TO CPPL.\n         LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         BR    R4                  RETURN TO CALLER\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE2\n         LA    R0,L'MESSAGE2\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE1\n         LA    R0,L'MESSAGE1\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         MVC   RNAM(3),ZEROS       RNAME TO ENQUEUE ON\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\nFINDUSR  DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    BEFORE CALLING THIS ROUTINE, PLEASE MAKE SURE THAT FINDID,     *\n*    FINDPTRS, AND FNUSSLOT ARE ALL POINTING TO THE SAME ID.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   RNAM(3),FNUSRBA     RBA TO ENQUEUE ON\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               FNUSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         IS THIS A USERID RECORD\n         BNE   FINDEND             NO. WE HAVE NO BUSINESS BEING HERE\n         LA    R3,0                CLEAR REGISTER\n         LA    R2,0                CLEAR REGISTER\n         IC    R3,FNUSSLOT         DUMP IN SLOT NUMBER OF USERID\n         M     R2,=F'13'           SIZE OF ENTRY\n*                                  PRODUCT IS DBLWD SIZE R2 + R3\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2\n         USING USDIR,R3\n         CLC   FINDID(7),USDID     IS THIS OUR USERID ?\n         BNE   FINDEND             NOPE. WE HAVE AN ERROR IN OUR FIND\n         TM    COMPFLAG,X'80'      ARE WE COMPARING ?\n         BO    NOCOMPR             FLAG IS ON.  NO COMPARE\nLOOPBAK  CLC   USDRBA(6),CMPRPTRS  HAVE THE POINTERS BEEN UPDATED SINCE\n         BE    NOCOMPR             THEY ARE OK. DON'T UPDATE THEM\n         MVC   CMPRPTRS(6),USDRBA  DIFFERENT. USE THE ONES FROM THE RCD\nNOUPDTE  B     LOOPBAK             MAKE SURE THEY'RE EQUAL\nNOCOMPR  MVC   USDRBA(6),FINDPTRS  ALL IS OK. PLUG IN POINTERS WE WANT\n*                                  AND UPDATE THE RECORD.\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               FNUSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nFINDEND  DS    0H\n         MVC   RNAM(3),FNUSRBA     RBA TO ENQUEUE ON\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         DROP  R3                                            PARS 06/99\n         BR    R4\nADDUSER  DS    0H\n         STM   R14,R15,STOR1415\n         STM   R0,R1,STOR0001\n         MVC   NEXT(4),=F'0'       INITIALIZE\nDOADD    IKJIFRIF ECT=SAVEECT,PSCB=SAVEPSCB,UPT=SAVEUPT,ADD=ADDADR,    X\n               RETCODE=IKJIFRET,MF=(E,ADDIDL)\n         LM    R14,R15,STOR1415\n         LM    R0,R1,STOR0001\n         BR    R4\n         EJECT\nMSG      LA    R1,LINE\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE 1\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nRNAM     DC    X'000000'           RBA TO ENQUEUE ON...\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nADDIDL   IKJIFRIF MF=L\nADDIDEND DS    0F\nADDIDLEN EQU   *-ADDIDL\nIKJIFRET DS    F\nSTOR0001 DS    2F\nSTOR1415 DS    2F\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMDEL2": {"ttr": 2050, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x014\\x00!\\x01\\x01\\x05O\\x01\\x01\\x18\\x7f\\x12\\x00\\x05\\xc3\\x05\\x05\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.52", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-07-06T12:00:21", "lines": 1475, "newlines": 1285, "modlines": 0, "user": "WSBG"}, "text": "BCMDEL   TITLE 'BCMDEL - LIST AND DELETE MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMDEL USERID                                     *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID AND        *\n*                   DELETE THEM.  THIS PROGRAM WORKS ON SYS1.BRODCAST *\n*                   INTERNALLY, WITHOUT USING LISTBC.                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   4.0            *\n*                                                                     *\n*            DATE:  JULY 05, 01                                       *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  01/07/05  -  ADDED 2 KEYWORD PARAMETERS TO        *\n*                   (VER 4.0)    CONTROL WHICH MESSAGES ARE DELETED   *\n*                                                                     *\n*                                SKIP(NN) AND MSGS(MM)                *\n*                                                                     *\n*                                ALL OTHER MESSAGES ARE KEPT          *\n*                                AND RECHAINED IF NECESSARY.          *\n*                                                                     *\n*                                SKIP(NN) WILL SKIP NN RECORDS AT     *\n*                                THE BEGINNNG OF THE CHAIN, DELETING  *\n*                                ALL RECORDS FORWARD, UNLESS LIMITED  *\n*                                BY A MSGS(MM) PARAMETER.             *\n*                                                                     *\n*                                MESSAGES(MM) WILL DELETE ONLY MM     *\n*                                MESSAGES, AFTER THE SKIP, IF SKIP    *\n*                                WAS CODED, OR ELSE IT WILL DELETE    *\n*                                MM MESSAGES FROM THE BEGINNING OF    *\n*                                THE CHAIN.                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMDEL   CSECT\n         USING BCMDEL,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMDEL VER 4.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, MESSAGE TO ENTER USERID.\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'00'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         MVC   SMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n         MVC   ADJSPTRS(6),USDRBA  SAVE ORIGINAL POINTERS FOR ADJUST\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n* ----                   WRITLOOP NEEDS R5 AND R7 SAVED AND RESTORED\n         ST    R5,SAVERG5          SAVE WORK REGISTER\n         ST    R7,SAVERG7          SAVE WORK REGISTER\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         L     R5,SAVERG5          RESTORE REGISTER\n         L     R7,SAVERG7          RESTORE REGISTER\n* ----\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT TO ZERO HIM OUT\n         USING USDIR,R3\n*-- NEW CODE --*            <----\n         CLC   COUNTS,=F'0'        ARE WE SKIPPING RECORDS?\n         BNE   NOZERAJ1            YES. ADJUST USERID PTRS, DON'T ZERO\n         CLC   COUNTM,=F'0'        ARE WE LIMITING RECORDS DELETED?\n         BNE   NOZERAJ0            YES. DEPENDS IF ANY MESSAGES LEFT.\n         MVC   USDRBA(6),ZEROS     NO SPECIAL PROCESSING - ZERO OUT\n         B     NOZERAJ2            AND GO REWRITE THE USERID RECORD\nNOZERAJ0 DS    0H\n         TM    SKLSFLAG,X'04'      LIMITING, AND PASSED THE LIMIT?\n         BO    NOZERAJ1            YES. STILL HAVE POINTERS.\n         MVC   USDRBA(6),ZEROS     NO SPECIAL PROCESSING - ZERO OUT\n         B     NOZERAJ2            AND GO REWRITE THE USERID RECORD\nNOZERAJ1 DS    0H\n         MVC   USDRBA(6),ADJSPTRS  ADJUST POINTERS, DON'T ZERO THEM\nNOZERAJ2 DS    0H\n*-- NEW CODE --*            <----\n         DROP  R3\n         TM    MSG0FLAG,X'01'      MSGS(0) CODED?\n         BO    NOZERAJ             DON'T ADJUST USER RECORD\n         BAL   R9,REWRUSER         REWRITE THE RECORD\nNOZERAJ  DS    0H\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n* ----                   WRITLOOP NEEDS R5 AND R7 SAVED AND RESTORED\n         ST    R5,SAVERG5          SAVE WORK REGISTER\n         ST    R7,SAVERG7          SAVE WORK REGISTER\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         L     R5,SAVERG5          RESTORE REGISTER\n         L     R7,SAVERG7          RESTORE REGISTER\n* ----\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\n         USING USDIR,R3\n*-- NEW CODE --*            <----\n         CLC   COUNTS,=F'0'        ARE WE SKIPPING RECORDS?\n         BNE   NOZERAJ4            YES. ADJUST USERID PTRS, DON'T ZERO\n         CLC   COUNTM,=F'0'        ARE WE LIMITING RECORDS DELETED?\n         BNE   NOZERAJ3            YES. ADJUST USERID PTRS, DON'T ZERO\n         MVC   USDRBA(6),ZEROS     NO SPECIAL PROCESSING - ZERO OUT\n         B     NOZERAJ5            AND GO REWRITE THE USERID RECORD\nNOZERAJ3 DS    0H\n         TM    SKLSFLAG,X'04'      LIMITING, AND PASSED THE LIMIT?\n         BO    NOZERAJ4            YES. STILL HAVE POINTERS.\n         MVC   USDRBA(6),ZEROS     NO SPECIAL PROCESSING - ZERO OUT\n         B     NOZERAJ5            AND GO REWRITE THE USERID RECORD\nNOZERAJ4 DS    0H\n         MVC   USDRBA(6),ADJSPTRS  ADJUST POINTERS, DON'T ZERO THEM\nNOZERAJ5 DS    0H\n*-- NEW CODE --*            <----\n         DROP  R3\n         TM    MSG0FLAG,X'01'      MSGS(0) CODED?\n         BO    NOZERAK             DON'T ADJUST USER RECORD\n         BAL   R9,REWRUSER         REWRITE THE RECORD\nNOZERAK  DS    0H\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 YOU HAVE TO ENTER A\n         LA    R0,L'MESSAGE2+7                  USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\nLOOKKEYW DS    0H                  LOOK FOR KEYWORDS MSGS AND SKIP\n         LA    R7,1(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,1(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         MVC   MSGSWKL(5),BLANKS\n         MVC   MSGSWKL(5),0(R7)    MOVE 5 CHARS TO WKAREA\n         OC    MSGSWKL(4),BLANKS   UPPERCASE FIELD\n         CLC   =C'MSGS(',MSGSWKL   MSGS KEYWORD THERE?\n         BE    DOMSGS              YES. HANDLE IT.\n         MVC   SKIPWKL(5),BLANKS\n         MVC   SKIPWKL(5),0(R7)    MOVE 5 CHARS TO WKAREA\n         OC    SKIPWKL(5),BLANKS   UPPERCASE FIELD\n         CLC   =C'SKIP(',SKIPWKL   SKIP KEYWORD THERE?\n         BE    DOSKIP              YES. HANDLE IT.\n         B     LOOKKEYW            GO LOOP AND LOOK AT NEXT CHARACTER\nDOMSGS   DS    0H\n         LA    R7,5(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,5(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         LR    R6,R7               GET START OF NUMBER\nDOMSGSL  DS    0H\n         CLI   0(R6),C' '\n         BE    DOMSGSNO\n         CLI   0(R6),C')'\n         BE    DOMSGSNO\n         LA    R8,1(,R8)\n         LA    R6,1(,R6)\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   DOMSGSNO\n         B     DOMSGSL\nDOMSGSNO DS    0H\n         SR    R6,R7\n         BCTR  R6,0\n         EX    R6,PACKM\n* ---- TEST\n         STM   R0,R1,SAVER0R1\n         OI    WORKM+7,X'0F'     SIGN NIBBLE\n         MVC   DATAMSGS+24(10),EDPAT\n         ED    DATAMSGS+24,WORKM+3\n         MVC   LINE,LINE-1                 WRITE TEST MESSAGE\n         LA    R0,L'DATAMSGS\n         MVC   LINE(L'DATAMSGS),DATAMSGS\n         BAL   R4,MSG\n         LM    R0,R1,SAVER0R1\n* ---- TEST\n* ->\n         CP    WORKM,=P'0'\n         BNE   DOMSGNZ\n         OI    MSG0FLAG,X'01'\nDOMSGNZ  DS    0H\n* ->\n         CVB   R0,WORKM\n         ST    R0,COUNTM\n         LA    R6,1(,R6)           RESTORE R6\n         AR    R7,R6               GET READY TO GO ON LOOKING\n         B     LOOKKEYW\nDOSKIP   DS    0H\n         LA    R7,5(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,5(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         LR    R6,R7               GET START OF NUMBER\nDOSKIPL  DS    0H\n         CLI   0(R6),C' '\n         BE    DOSKIPNO\n         CLI   0(R6),C')'\n         BE    DOSKIPNO\n         LA    R8,1(,R8)\n         LA    R6,1(,R6)\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   DOSKIPNO\n         B     DOSKIPL\nDOSKIPNO DS    0H\n         SR    R6,R7\n         BCTR  R6,0\n         EX    R6,PACKS\n* ---- TEST\n         STM   R0,R1,SAVER0R1\n         OI    WORKS+7,X'0F'     SIGN NIBBLE\n         MVC   DATASKIP+24(10),EDPAT\n         ED    DATASKIP+24,WORKS+3\n         MVC   LINE,LINE-1\n         LA    R0,L'DATASKIP               WRITE TEST MESSAGE\n         MVC   LINE(L'DATASKIP),DATASKIP\n         BAL   R4,MSG\n         LM    R0,R1,SAVER0R1\n* ---- TEST\n         CVB   R0,WORKS\n         ST    R0,COUNTS\n         LA    R6,1(,R6)           RESTORE R6\n         AR    R7,R6               GET READY TO GO ON LOOKING\n         B     LOOKKEYW\nGETIDEND BR    R9\nPACKM    PACK  WORKM,0(0,7)\nPACKS    PACK  WORKS,0(0,7)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nRECHAIN  DS    0H                  REPOINT CHAIN ADDRESS IN LAST\n*                                  KEPT MESSAGE.\n         CLC   COUNTS,=F'0'        IF THERE WAS NO SKIPPING\n         BE    RECHAINE            THEN THERE IS NOTHING TO RECHAIN\n*  -----------------------------------------------------------------\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               LSKPRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         ST    R2,SAVERG2A\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         MVC   USMNEXT(3),FWRTRBA  RECHAIN TO NEXT MESSAGE RBA\n         DROP  R2\n         L     R2,SAVERG2A\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               LSKPRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nRECHAINE DS    0H                  REPOINT CHAIN ADDRESS IN LAST\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   SMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   MMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK2TOTAL,MESTLEFT\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS\n         MVC   FSRCRBA(3),ZEROS\n         MVC   NEXTRBA(3),ZEROS\n         MVC   MINRBA(3),=X'0FFFFF'    PUT A LARGE VALUE IN\n         MVI   ALLFLAG,X'00'\n         MVC   WORKM,DUBLZERO\n         MVC   WORKS,DUBLZERO\n         MVC   COUNTM,FULLZERO\n         MVC   COUNTS,FULLZERO\n         MVC   DATAMSGS,TESTMSGS\n         MVC   DATASKIP,TESTSKIP\n         MVC   WKLBLNK(2),BLANKS\n         MVC   MSGSWKL(5),BLANKS\n         MVC   SKIPWKL(5),BLANKS\n         MVI   SKLSFLAG,X'00'\n         MVC   TPUTMRBA-8(8),BLANKS\n         MVC   TPUTMRBA,TPUTMRBA-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDELREC   DS    0H             THIS ROUTINE ASSUMES A READ WAS\n*                             DONE FIRST, AND A CHECK. THE RECORD\n*                             THAT WAS READ, WILL BE DELETED.\n*                             IF LEVEL OF SYS1.BRODCAST IS 2 OR MORE,\n*                             THEN THE RBA OF THE FREE SEARCH RECORD\n*                             WILL ALSO BE UPDATED IF NECESSARY.\n*                             THIS WILL NOT BE DONE HERE.  RATHER,\n*                             THE RBA OF ALL DELETED RECORDS WILL BE\n*                             MINIMIZED, AND THE UPDATING, IF THE\n*                             MINIMUM RBA IS LESS THAN THE FREE SEARCH\n*                             RECORD RBA, WILL BE DONE AT THE VERY END\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         L     R2,MDLDECB+16           POINT TO IOB\n         USING IOBSTDRD,R2\n         MVC   SAVEINF1(8),IOBSEEK     SAVE CCHHR OF RECORD\n         DROP  R2\n         L     R2,MDLDECB+20           POINT TO THE KEY\n         MVI   0(R2),X'FF'             FIRST PART OF MARKING DELETED\n         L     R2,MDLDECB+12           POINT TO RECORD ITSELF\n         USING USMSG,R2\n         MVC   USMLNG(1),SAVEINF1+7    MOVE IN HEX RECORD NUMBER\n         MVC   USMTEXT(128),ZERREC     ZERO OUT THE MESSAGE AREA\n         CLC   MINRBA(3),MESSRBA       SEE IF CURRENT RBA IS LOWEST\n         BNH   CHGFRBA                 IT ISN'T, SO BRANCH AROUND.\n         MVC   MINRBA(3),MESSRBA       LOWER SAVED RBA IF NECESSARY\nCHGFRBA  DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         BR    R4\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\n         CLC   0(3,R5),MINRBA      SHOULD FREE SEARCH RECORD BE LOWERED\n         BNH   NOFRSR                NO. JUST GET OUT.\n         MVC   0(3,R5),MINRBA      YES. LOWER IT\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID               *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.             *\n*                                                                   *\n*        THIS ROUTINE IS NOW THE MAIN CODE FOR THE PARTIAL          *\n*        DISPLAY AND DELETION OF MESSAGES FOR A USERID,             *\n*        USING THE SKIP(NN) AND MSGS(MM) KEYWORDS.                  *\n*                                                                   *\n*        R5 AND R7 MUST BE SAVED BEFORE ENTERING THIS ROUTINE, AND  *\n*        THEY MUST BE RESTORED RIGHT AFTER LEAVING THIS ROUTINE.    *\n*        R5 IS THE LOOP REGISTER FOR THE SKIP(NN) PARAMETER.        *\n*        R7 IS THE LOOP REGISTER FOR THE MSGS(MM) PARAMETER.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITLOOP DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*               INITIALIZE SKIP(NN), MSGS(MM) FOR A USERID\n*\n         TM    MSG0FLAG,X'01'      WAS MSGS(0) CODED?\n         BO    WRITLEM0            YES.  NOP THIS WHOLE THING.\n         OI    SKLSFLAG,X'10'      PRE-LOAD ZERO RECHAIN AFTER SKIPS\n         MVC   LMSGRBA(3),MESSRBA     PRE-LOAD LAST MESSAGE RBA\n         NI    SKLSFLAG,X'FF'-X'07'   TURN OFF ALL FLAGS\n         XR    R5,R5               CLEAR R5 FOR REUSE IN THIS ROUTINE\n         XR    R7,R7               CLEAR R7 FOR REUSE IN THIS ROUTINE\n         CLC   COUNTS,=F'0'        HAVE WE CODED A SKIP COUNT?\n         BE    WRLOOPTM            NO. TRY LIMIT OF MSGS.\n         OI    SKLSFLAG,X'01'      SHOW WE'RE SKIPPING\n         L     R5,COUNTS           LOAD THE BCT REGISTER FOR SKIP\nWRLOOPTM DS    0H\n         CLC   COUNTM,=F'0'        HAVE WE CODED A MSGS LIMIT?\n         BE    WRLOOP              NO. JUST PROCESS ALL OF EM.\n         OI    SKLSFLAG,X'02'      SHOW WE'RE LIMITING MESSAGES\n         L     R7,COUNTM           LOAD BCT REGISTER FOR MSGS LIMIT\n*------------------------------>>\n         LA    R7,1(,R7)           BOOST R7 BY ONE.\n*\n*                                 THIS IS NECESSARY BECAUSE THE BCT\n*                                 INSTRUCTION R7,WRLOOP IS DIFFERENT\n*                                 IN LOGIC, THAN THE BCT FOR R5,WRLOOP.\n*                                 PLEASE SEE THE CODE JUST AFTER\n*                                 LABEL WRLSKIP2, WHICH COMPENSATES\n*                                 FOR THE EFFECT OF THIS INSTRUCTION.\n*------------------------------>>\n         B     WRLOOP              MAIN PROCESSING SKIPS THE RECHAIN\n* ----\n*               ENTRY, TO CONTROL THE USE OF THE RECHAIN ROUTINE.\n*\n*               THE RECHAIN OPERATION REQUIRES A READ AND A WRITE\n*               OF A (DIFFERENT) RECORD, AND CANNOT BE DONE WHILE\n*               THE CURRENTLY READ RECORD IS OPEN.  THEREFORE,\n*               THE RECHAIN OPERATION HAS TO OCCUR OUTSIDE OF\n*               THE WRLOOP ROUTINE.\n* ----\nRECHANIT DS    0H               RECHAIN HAS TO BE OUTSIDE A READ LOOP\n         TM    SKLSFLAG,X'08'         TEST IF ONLY ONCE\n         BZ    RECHANEN               FLAG NOT SET, BYPASS RECHAIN\n         BAL   R4,RECHAIN             RECHAIN LAST SKIPPED RECORD\n         NI    SKLSFLAG,X'FF'-X'08'   ONLY DO THIS ONCE\nRECHANEN DS    0H\n* ----\n*               THIS IS THE MAIN LOOP FOR ONE USERID'S MESSAGES.\n* ----\nWRLOOP   DS    0H\n         TM    SKLSFLAG,X'10'      ONLY DO THIS ONCE\n         BZ    WRLOOPS1\n         CLC   COUNTS,=F'0'        IS SKIPPING ON?\n         BE    WRLOOPS1            NO. THEN NO RECHAINING IS NECESSARY\n         C     R5,=F'0'            YES. THEN IS BCT REGISTER ZERO YET?\n         BNE   WRLOOPS1            NO. NO RECHAINING NECESSARY.\n*                    WE HAVE JUST READ THE LAST SKIPPED RECORD.\n         OI    SKLSFLAG,X'08'      TURN ON THE RECHAINING FLAG\n         MVC   FWRTRBA(3),ZEROS    RECHAIN LAST SKIPPED TO ZERO\n         NI    SKLSFLAG,X'FF'-X'10'   TURN OFF FLAG FOR THIS ROUTINE\n         B     RECHANIT            RECHAIN ZEROS TO LAST SKIPPED RECD\n* ----\n*          AFTER ALL THE FUDGING, WE FINALLY DO THE READ HERE.\n*\n*          ALL THE PREVIOUS STUFF IS TO SUPPORT THE SKIP(NN)\n*          AND MSGS(MM) KEYWORDS.\n* ----\nWRLOOPS1 DS    0H\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         MVC   STORKEY(1),0(R2)    SAVE KEY OF RECORD READ\n         MVC   CURMRBA(3),MESSRBA  SAVE RBA OF CURRENT MESSAGE\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0                ADJUST LENGTH FOR EXECUTE\n         EX    R6,MOVEMSG\nWRLSKIP1 DS    0H\n         TM    SKLSFLAG,X'01'      ARE WE SKIPPING MESSAGES?\n         BO    WRLSKIPA            YES. PASS THE PRINTDEL BUT SAVE ADDR\n         TM    SKLSFLAG,X'04'      LIMITING-AND HAVE PASSED THE LIMIT?\n         BO    WRLSKIPB            YES. PASS THE PRINTING STUFF,\n*                                  BUT ADJUST THE END POINTER TO\n*                                  CURRENT RBA.\nWRLLIMS1 DS    0H\n         TM    SKLSFLAG,X'02'      ARE WE LIMITING MESSAGES?\n         BZ    WRLLIMS2            NO. THEN PRINT THEM.\n         TM    SKLSFLAG,X'04'      LIMITING-AND PASSED THE LIMIT?\n         BO    WRLLIMS3            YES, DON'T PRINT THIS MESSAGE\nWRLLIMS2 DS    0H\n* --\n         CLC   COUNTM,=F'0'        IF WE ARE LIMITING MSGS\n         BE    WRLNODX0\n         C     R7,=F'1'            AND IF WE'RE ALMOST AT THE END\n         BNE   WRLNODX0\n         B     WRLNODS0            THEN DON'T DISPLAY THIS ONE.\nWRLNODX0 DS    0H\n* --\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R4,MSG              WRITE MESSAGE OUT\nWRLNODS0 DS    0H\n         B     WRLLIMS3\nWRLSKIPA DS    0H                  COME HERE WHILE SKIPPING\n         MVC   LSKPRBA,CURMRBA        IF SKIPPING SAVE CURR RBA AS LAST\n         MVC   ADJSPTRS+3(3),LSKPRBA  AND ADJUST LAST USERID POINTER\n         B     WRLSKIP2\nWRLLIMS3 DS    0H\nWRLSKIPB DS    0H                  COME HERE AFTER LIMITING\n         CLC   COUNTS,=F'0'        SKIPPING?\n         BNE   WRLSKIPC            YES, DON'T ADJUST STARTING POINTER\n*        MVC   ADJSPTRS(3),LSKPRBA NO, ADJUST STARTING POINTER\n         B     WRLSKIP2\nWRLSKIPC DS    0H\n         TM    SKLSFLAG,X'01'      SKIPPING ON, BUT NOW FINISHED?\n         BO    WRLSKIP2            STILL ON, DON'T ADJUST POINTER YET\n         CLC   COUNTS,=F'0'\n         BNE   WRLSKIP2\n         MVC   ADJSPTRS(3),FMSGRBA   HAVE TO ADJUST STARTING POINTER\n*                         ------>                              <------\nWRLSKIP2 DS    0H         ------>   EVERYTHING GOES THRU HERE  <------\n*                         ------>                              <------\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n*---->\n         ST    R7,STR7             CHECK R7 IF =1 EXACTLY\n         CLC   STR7,=F'1'\n         BNE   WRLSKP2X            NO. GO ON.\n         BCTR  R7,0                DON'T COME HERE AGAIN\n         MVC   NEXTRBA(3),USMNEXT  GET ADDRESS OF NEXT RECORD\n         CLC   NEXTRBA(3),ZEROS    IS THIS THE LAST MESSAGE ?\n         BNE   WRLSKP4A            NO. GO ON.\n*---->\nWRLSK2Q1 DS    0H\n         TM    SKLSFLAG,X'04'      IS X'04' FLAG ALREADY ON?\n         BO    WRITLENX            NOT SPECIAL CASE. GO FINISH UP.\n         OI    SKLSFLAG,X'04'      IS THIS CASE--DELS ARE FINISHED\n         OI    SKLSFLAG,X'40'      MARK THE SPECIAL CASE\n         B     WRITLENX            AND NOW FINISH UP\n*---->\nWRLSKP2X DS    0H\n         CLC   USMNEXT(3),ZEROS    IS THIS THE LAST MESSAGE ?\n         BE    WRITLENX            YES, GO NOW AND FINISH UP\n*---->\n         MVC   NEXTRBA(3),USMNEXT    NO. GET ADDRESS OF NEXT RECORD\n         DROP  R2\n         TM    SKLSFLAG,X'01'      ARE WE SKIPPING MESSAGES?\n         BO    WRLNODEL            DON'T DELETE CURRENT MESSAGE\n         TM    SKLSFLAG,X'04'      LIMITING-AND PASSED THE LIMIT?\n         BO    WRLNODEL            DON'T DELETE CURRENT MESSAGE\n* --\n         CLC   COUNTM,=F'0'        IF WE ARE LIMITING MSGS\n         BE    WRLNODX1\n         C     R7,=F'1'            AND IF WE'RE ALMOST AT THE END\n         BNE   WRLNODX1\n         B     WRLNODEL            THEN DON'T DELETE THIS ONE.\nWRLNODX1 DS    0H\n* --\n         ST    R2,SAVERG2\n         BAL   R4,DELREC           GO DELETE THE RECORD\n         L     R2,SAVERG2\nWRLNODEL DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nWRLSKIP3 DS    0H\n         TM    SKLSFLAG,X'01'      SKIPPING, AND NOT FINISHED?\n         BZ    WRLSKIP4            FINISHED SKIPPING. NO BCT.\n         MVC   MESSRBA(3),NEXTRBA    PREPARE TO READ NEXT MESSAGE\n         AP    SMSGCNT,=P'1'          MESSAGES BEING KEPT\n         BCT   R5,WRLOOP             SKIPPING LOOP\n         NI    SKLSFLAG,X'FF'-X'01'  FINISHED SKIPPING-TURN OFF FLAG\n         OI    SKLSFLAG,X'08'\n         MVC   FWRTRBA,CURMRBA      IF SKIPPING SAVE CURR RBA AS LAST\n*                                   FOR THE RECHAINING PROCESS\n         MVC   MESSRBA(3),NEXTRBA   PREPARE TO READ NEXT RECORD\n         B     RECHANIT\nWRLSKIP4 DS    0H\n         CLC   COUNTM,=F'0'        LIMITING, IN EITHER CASE?\n         BE    WRLLIMS4            NO-BYPASS ALL THIS JUNK\n         TM    SKLSFLAG,X'04'      LIMITING, AND FINISHED WRITING?\n         BO    WRLLIMSA            YEAH. BYPASS BCT.\n         MVC   MESSRBA(3),NEXTRBA    PREPARE TO READ NEXT MESSAGE\n         BCT   R7,WRLOOP\n*\n* -- FALL THRU IF RESUMING NO-DELETION FOR THE FIRST TIME\n*\nWRLSKP4A DS    0H\n         TM    SKLSFLAG,X'04'      HAVE WE BEEN HERE BEFORE?\n         BO    WRLLIMSA            YES. DON'T RECHAIN LAST SKIPPED.\n         OI    SKLSFLAG,X'04'      SHOW FINISHED WRITING & DELETING\n         AP    SMSGCNT,=P'1'       COUNT MESSAGES BEING KEPT\n         MVC   FMSGRBA(3),CURMRBA  SAVE FIRST MESSAGE RBA AFTER LIMIT\n         CLC   COUNTS,=F'0'        WAS THERE ANY SKIPPING AT ALL?\n         BNE   WRLLIM3A            YES-DO NOT ADJUST INITIAL POINTER\n         MVC   ADJSPTRS(3),CURMRBA NO- ADJUST INITIAL POINTER\n         B     WRLLIMS4             AND WE SKIP THE RECHAIN BRANCH\nWRLLIM3A DS    0H\n         OI    SKLSFLAG,X'08'      SHOW READY TO RECHAIN LAST SKIPPED\n*                                  THIS FLAG IS TURNED OFF BY RECHAIN\n         MVC   FWRTRBA,FMSGRBA      IF SKIPPING SAVE CURR RBA AS LAST\n*                                   FOR THE RECHAINING PROCESS\n         MVC   MESSRBA(3),NEXTRBA   PREPARE TO READ NEXT RECORD\n         B     RECHANIT\nWRLLIMSA DS    0H\n         AP    SMSGCNT,=P'1'          MESSAGES BEING KEPT\n         B     WRLLIM3A\nWRLLIMS4 DS    0H\n         MVC   MESSRBA(3),NEXTRBA   PREPARE TO READ NEXT RECORD\n         B     WRLOOP\n* ----\n*               AT THE END OF A CHAIN OF USERID MESSAGES,\n*               WHEN THE LAST MESSAGE IS INDICATED BY THE\n*               NEXTUSER FIELD BEING ZEROS, WE COME HERE.\n* ----\nWRITLENX DS    0H\n         ST    R5,STR5\n         ST    R7,STR7\n         TM    SKLSFLAG,X'04'      LIMITING, AND FINISHED DELETING?\n         BO    WRITLENY            THEN DON'T DELETE LAST RECORD\n         CLC   COUNTS,=F'0'        ARE WE SKIPPING MESSAGES?\n         BNE   WRITLENW            THEN DON'T DELETE LAST RECORD\n         B     WRITLEDE\nWRITLENW DS    0H\n         TM    SKLSFLAG,X'03'\n         BNO   WRITLENS\n         AP    SMSGCNT,=P'1'          COUNT MESSAGES BEING KEPT\nWRITLENS DS    0H\n         TM    SKLSFLAG,X'01'\n         BO    WRITLENY\n*----->\n         ST    R7,STR7             CHECK R7 IF =1\n         CLC   STR7,=F'1'\n         BE    WRITLENN\n*----->\nWRITLEDE DS    0H\n         ST    R2,SAVERG2\n         BAL   R4,DELREC           DELETE THE LAST RECORD\n         L     R2,SAVERG2\nWRITLENY DS    0H\n         TM    SKLSFLAG,X'04'      LIMITING, AND FINISHED DELETING?\n         BZ    WRITLENZ\nWRITLENN DS    0H\n         AP    SMSGCNT,=P'1'          COUNT MESSAGES BEING KEPT\n         MVC   ADJSPTRS+3(3),CURMRBA  READJUST FINAL POINTERS\n*----->\n         TM    SKLSFLAG,X'60'      SPECIAL CASES FROM LABEL WRLSKIP2 ?\n         BZ    WRITLENZ\n         TM    SKLSFLAG,X'40'\n         BZ    WRITLENO\n         MVC   FWRTRBA(3),CURMRBA     ADDRESS FOR RECHAIN\n         BAL   R4,RECHAIN\n*        B     WRITLENZ            END IT\nWRITLENO DS    0H\n         CLC   COUNTS,=F'0'           ANY SKIPPING?\n         BNE   WRITLENZ               YES. DON'T ADJUST INITIAL POINTER\n         MVC   ADJSPTRS(3),CURMRBA    ADJUST INITIAL POINTER\n*----->\nWRITLENZ DS    0H\n         CLC   COUNTM,=F'0'\n         BNE   WRITLEND\n         TM    SKLSFLAG,X'01'\n         BZ    WRITLEND\n         AP    SMSGCNT,=P'1'          COUNT MESSAGES BEING KEPT\n         B     WRITLEND               BRANCH AROUND MSGS(0) MESSAGE\nWRITLEM0 DS    0H\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MES0MSG             MESSAGE THAT MSGS(0) CODED\n         LA    R0,L'MES0MSG+7\n         BAL   R4,MSG\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* ----\n*               THIS IS THE END OF MAIN PROCESSING FOR ONE\n*               USERID'S MESSAGES.\n* ----\n         EJECT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITEND  DS    0H\n         TM    MSG0FLAG,X'01'\n         BO    WRITENX1\n         MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\nWRITENX1 DS    0H\n         CLC   COUNTS,=F'0'                  ANY SKIPPING?\n         BNE   WRITENDA                      YES-DO SECOND LINE\n         CLC   COUNTM,=F'0'                  ANY LIMITING?\n         BE    WRITENDB                      NO-NO SECOND LINE\n         TM    SKLSFLAG,X'04'                MSGS LEFT OVER?\n         BZ    WRITENDB                      NO-ONLY FIRST LINE\nWRITENDA DS    0H\n         TM    MSG0FLAG,X'01'\n         BO    WRITENDB\n         MVC   LINE,LINE-1\n         MVC   WK2TOTAL,MESTLEFT               WRITE\n         MVC   WK2TOTAL+5(7),TRYID               TOTALS\n         MVC   WK2TOTAL+18(6),MASK6                LINE\n         ED    WK2TOTAL+18(6),SMSGCNT\n         MVC   LINET(L'WK2TOTAL),WK2TOTAL\n         LA    R0,L'WK2TOTAL+7\n         BAL   R4,MSG\nWRITENDB DS    0H\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nDUBLZERO DC    D'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMES0MSG  DC    C'MSGS(0) WAS CODED. NO DELETION WAS DONE AT ALL. '\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESTLEFT DC    C'USER         HAS           DEFERRED TSO MESSAGES LEFT'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nTESTMSGS DC    C'LIMIT  OF MSGS TO DELETE              '\nTESTSKIP DC    C'NUMBER OF MSGS TO SKIP                '\nEDPAT    DC    X'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nWORKM    DS    D\nWORKS    DS    D\nSAVER0R1 DS    D\nSAVERG2  DS    F\nSAVERG2A DS    F\nSAVERG5  DS    F\nSAVERG7  DS    F\nCOUNTM   DS    F\nCOUNTS   DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\n         DS    CL80\nSKLSFLAG DC    X'00'\n*              X'01' MEANS WE ARE SKIPPING RECORDS\n*              X'02' MEANS WE ARE LIMITING RECORDS DISPLAYED\n*              X'04' MEANS WE HAVE PASSED THE DISPLAY LIMIT\n*              X'08' MEANS WE ARE READY TO RECHAIN\nMSG0FLAG DC    X'00'\n*              X'01' MEANS WE CODED MSGS(0) EXPLICITLY\n         DS    CL80\nWKLBLNK  DS    CL2\nMSGSWKL  DS    CL5                 THIS ONE FIRST FOR INIT TO BLANK\nSKIPWKL  DS    CL5\n         DC    CL8' '\nTPUTMRBA DC    CL80' '\nDATAMSGS DS    CL38                TEST MSGS AREA\n         DC    CL45' '     PADDING\nDATASKIP DS    CL38                TEST SKIP AREA\n         DC    CL50' '     PADDING\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nSMSGCNT  DC    PL3'0'              COUNT OF SKIPPED MESSAGES\nMMSGCNT  DC    PL5'0'              COUNT OF LISTED MESSAGES\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nADJSPTRS DC    X'000000000000'     ADJUSTMENT POINTERS FOR PART DELETE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nCURMRBA  DC    X'000000'           SAVED RBA OF CURRENT MESSAGE\nFMSGRBA  DC    X'000000'           SAVED RBA OF 1ST MSG AFTER LIMIT\nLMSGRBA  DC    X'000000'           SAVED RBA OF MESSAGE BEFORE\nLSKPRBA  DC    X'000000'           RBA OF LAST SKIPPED RECORD\nFWRTRBA  DC    X'000000'           RBA OF FIRST NON-DELETED RECORD\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMINRBA   DC    X'000000'\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER9   DS    F                   SAVE BAL REGISTER\nSAVER9A  DS    F                   SAVE BAL REGISTER\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTR5     DS    F\nSTR7     DS    F\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK2TOTAL DC    C'                                                     '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\nSTORKEY  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMDEL2A": {"ttr": 2566, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x016\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x96\\x01\\x7f\\x13\\x04\\x03\\x9d\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.54", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1996-01-17T13:04:00", "lines": 925, "newlines": 557, "modlines": 0, "user": "SBGCSC"}, "text": "BCMDEL   TITLE 'BCMDEL - LIST AND DELETE MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMDEL USERID                                     *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID AND        *\n*                   DELETE THEM.  THIS PROGRAM WORKS ON SYS1.BRODCAST *\n*                   INTERNALLY, WITHOUT USING LISTBC.                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   3.1            *\n*                                                                     *\n*            DATE:  JUNE 15, 95                                       *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:                                                    *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMDEL   CSECT\n         USING BCMDEL,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMDEL VER 3.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n         BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             ZERO, LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'FF'\n         B     DOBROD\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT TO ZERO HIM OUT\n         USING USDIR,R3\n         MVC   USDRBA(6),ZEROS     ZERO HIM OUT\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\n         USING USDIR,R3\n         MVC   USDRBA(6),ZEROS     ZERO HIM OUT\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS\n         MVC   FSRCRBA(3),ZEROS\n         MVC   NEXTRBA(3),ZEROS\n         MVC   MINRBA(3),=X'0FFFFF'    PUT A LARGE VALUE IN\n         MVI   ALLFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDELREC   DS    0H             THIS ROUTINE ASSUMES A READ WAS\n*                             DONE FIRST, AND A CHECK. THE RECORD\n*                             THAT WAS READ, WILL BE DELETED.\n*                             IF LEVEL OF SYS1.BRODCAST IS 2 OR MORE,\n*                             THEN THE RBA OF THE FREE SEARCH RECORD\n*                             WILL ALSO BE UPDATED IF NECESSARY.\n*                             THIS WILL NOT BE DONE HERE.  RATHER,\n*                             THE RBA OF ALL DELETED RECORDS WILL BE\n*                             MINIMIZED, AND THE UPDATING, IF THE\n*                             MINIMUM RBA IS LESS THAN THE FREE SEARCH\n*                             RECORD RBA, WILL BE DONE AT THE VERY END\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         L     R2,MDLDECB+16           POINT TO IOB\n         USING IOBSTDRD,R2\n         MVC   SAVEINF1(8),IOBSEEK     SAVE CCHHR OF RECORD\n         DROP  R2\n         L     R2,MDLDECB+20           POINT TO THE KEY\n         MVI   0(R2),X'FF'             FIRST PART OF MARKING DELETED\n         L     R2,MDLDECB+12           POINT TO RECORD ITSELF\n         USING USMSG,R2\n         MVC   USMLNG(1),SAVEINF1+7    MOVE IN HEX RECORD NUMBER\n         MVC   USMTEXT(128),ZERREC     ZERO OUT THE MESSAGE AREA\n         CLC   MINRBA(3),MESSRBA       SEE IF CURRENT RBA IS LOWEST\n         BNH   CHGFRBA                 IT ISN'T, SO BRANCH AROUND.\n         MVC   MINRBA(3),MESSRBA       LOWER SAVED RBA IF NECESSARY\nCHGFRBA  DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         BR    R4\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\n         CLC   0(3,R5),MINRBA      SHOULD FREE SEARCH RECORD BE LOWERED\n         BNH   NOFRSR                NO. JUST GET OUT.\n         MVC   0(3,R5),MINRBA      YES. LOWER IT\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS    IS THIS THE LAST MESSAGE ?\n         BE    WRITLENX            YES, GO FINISH UP.\n         MVC   NEXTRBA(3),USMNEXT    NO. GET ADDRESS OF NEXT RECORD\n         DROP  R2\n         BAL   R4,DELREC           GO DELETE THE RECORD\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   MESSRBA(3),NEXTRBA   PREPARE TO READ NEXT RECORD\n         B     WRLOOP\nWRITLENX BAL   R4,DELREC           DELETE THE LAST RECORD\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMINRBA   DC    X'000000'\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER9   DS    F                   SAVE BAL REGISTER\nSAVER9A  DS    F                   SAVE BAL REGISTER\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMDEL2O": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x01\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x99\\x15\\x8f\\x16W\\x03\\xa3\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "03.01", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1999-06-07T16:57:00", "lines": 931, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMDEL   TITLE 'BCMDEL - LIST AND DELETE MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMDEL USERID                                     *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID AND        *\n*                   DELETE THEM.  THIS PROGRAM WORKS ON SYS1.BRODCAST *\n*                   INTERNALLY, WITHOUT USING LISTBC.                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   3.1            *\n*                                                                     *\n*            DATE:  JUNE 15, 95                                       *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:                                                    *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMDEL   CSECT\n         USING BCMDEL,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMDEL VER 3.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, MESSAGE TO ENTER USERID.\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'00'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT TO ZERO HIM OUT\n         USING USDIR,R3\n         MVC   USDRBA(6),ZEROS     ZERO HIM OUT\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\n         USING USDIR,R3\n         MVC   USDRBA(6),ZEROS     ZERO HIM OUT\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 YOU HAVE TO ENTER A\n         LA    R0,L'MESSAGE2+7                  USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS\n         MVC   FSRCRBA(3),ZEROS\n         MVC   NEXTRBA(3),ZEROS\n         MVC   MINRBA(3),=X'0FFFFF'    PUT A LARGE VALUE IN\n         MVI   ALLFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDELREC   DS    0H             THIS ROUTINE ASSUMES A READ WAS\n*                             DONE FIRST, AND A CHECK. THE RECORD\n*                             THAT WAS READ, WILL BE DELETED.\n*                             IF LEVEL OF SYS1.BRODCAST IS 2 OR MORE,\n*                             THEN THE RBA OF THE FREE SEARCH RECORD\n*                             WILL ALSO BE UPDATED IF NECESSARY.\n*                             THIS WILL NOT BE DONE HERE.  RATHER,\n*                             THE RBA OF ALL DELETED RECORDS WILL BE\n*                             MINIMIZED, AND THE UPDATING, IF THE\n*                             MINIMUM RBA IS LESS THAN THE FREE SEARCH\n*                             RECORD RBA, WILL BE DONE AT THE VERY END\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         L     R2,MDLDECB+16           POINT TO IOB\n         USING IOBSTDRD,R2\n         MVC   SAVEINF1(8),IOBSEEK     SAVE CCHHR OF RECORD\n         DROP  R2\n         L     R2,MDLDECB+20           POINT TO THE KEY\n         MVI   0(R2),X'FF'             FIRST PART OF MARKING DELETED\n         L     R2,MDLDECB+12           POINT TO RECORD ITSELF\n         USING USMSG,R2\n         MVC   USMLNG(1),SAVEINF1+7    MOVE IN HEX RECORD NUMBER\n         MVC   USMTEXT(128),ZERREC     ZERO OUT THE MESSAGE AREA\n         CLC   MINRBA(3),MESSRBA       SEE IF CURRENT RBA IS LOWEST\n         BNH   CHGFRBA                 IT ISN'T, SO BRANCH AROUND.\n         MVC   MINRBA(3),MESSRBA       LOWER SAVED RBA IF NECESSARY\nCHGFRBA  DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         BR    R4\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\n         CLC   0(3,R5),MINRBA      SHOULD FREE SEARCH RECORD BE LOWERED\n         BNH   NOFRSR                NO. JUST GET OUT.\n         MVC   0(3,R5),MINRBA      YES. LOWER IT\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS    IS THIS THE LAST MESSAGE ?\n         BE    WRITLENX            YES, GO FINISH UP.\n         MVC   NEXTRBA(3),USMNEXT    NO. GET ADDRESS OF NEXT RECORD\n         DROP  R2\n         BAL   R4,DELREC           GO DELETE THE RECORD\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   MESSRBA(3),NEXTRBA   PREPARE TO READ NEXT RECORD\n         B     WRLOOP\nWRITLENX BAL   R4,DELREC           DELETE THE LAST RECORD\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMINRBA   DC    X'000000'\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER9   DS    F                   SAVE BAL REGISTER\nSAVER9A  DS    F                   SAVE BAL REGISTER\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMDEL2X": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x95\\x17?\\x17\\x02\\x03\\x93\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1995-06-22T17:02:00", "lines": 915, "newlines": 557, "modlines": 0, "user": "SBGCSC"}, "text": "BCMDEL   TITLE 'BCMDEL - LIST AND DELETE MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMDEL USERID                                     *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID AND        *\n*                   DELETE THEM.  THIS PROGRAM WORKS ON SYS1.BRODCAST *\n*                   INTERNALLY, WITHOUT USING LISTBC.                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   3.0            *\n*                                                                     *\n*            DATE:  JUNE 15, 95                                       *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:                                                    *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMDEL   CSECT\n         USING BCMDEL,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMDEL VER 3.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n         BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             ZERO, LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'00'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT TO ZERO HIM OUT\n         USING USDIR,R3\n         MVC   USDRBA(6),ZEROS     ZERO HIM OUT\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\n         USING USDIR,R3\n         MVC   USDRBA(6),ZEROS     ZERO HIM OUT\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   WK6ALL,MESSAGE6\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS\n         MVC   FSRCRBA(3),ZEROS\n         MVC   NEXTRBA(3),ZEROS\n         MVC   MINRBA(3),=X'0FFFFF'    PUT A LARGE VALUE IN\n         MVI   ALLFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDELREC   DS    0H             THIS ROUTINE ASSUMES A READ WAS\n*                             DONE FIRST, AND A CHECK. THE RECORD\n*                             THAT WAS READ, WILL BE DELETED.\n*                             IF LEVEL OF SYS1.BRODCAST IS 2 OR MORE,\n*                             THEN THE RBA OF THE FREE SEARCH RECORD\n*                             WILL ALSO BE UPDATED IF NECESSARY.\n*                             THIS WILL NOT BE DONE HERE.  RATHER,\n*                             THE RBA OF ALL DELETED RECORDS WILL BE\n*                             MINIMIZED, AND THE UPDATING, IF THE\n*                             MINIMUM RBA IS LESS THAN THE FREE SEARCH\n*                             RECORD RBA, WILL BE DONE AT THE VERY END\n         L     R2,MDLDECB+16           POINT TO IOB\n         USING IOBSTDRD,R2\n         MVC   SAVEINF1(8),IOBSEEK     SAVE CCHHR OF RECORD\n         DROP  R2\n         L     R2,MDLDECB+20           POINT TO THE KEY\n         MVI   0(R2),X'FF'             FIRST PART OF MARKING DELETED\n         L     R2,MDLDECB+12           POINT TO RECORD ITSELF\n         USING USMSG,R2\n         MVC   USMLNG(1),SAVEINF1+7    MOVE IN HEX RECORD NUMBER\n         MVC   USMTEXT(128),ZERREC     ZERO OUT THE MESSAGE AREA\n         CLC   MINRBA(3),MESSRBA       SEE IF CURRENT RBA IS LOWEST\n         BNH   CHGFRBA                 IT ISN'T, SO BRANCH AROUND.\n         MVC   MINRBA(3),MESSRBA       LOWER SAVED RBA IF NECESSARY\nCHGFRBA  DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R4\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\nMSGX6    LA    R0,L'MESSAGE6\n         MVC   LINE,LINE-1\n         MVC   FROM(7),0(R3)\n         HEX   WK6ALL+16,7,FROM\n         MVC   LINE(L'WK6ALL),WK6ALL\n         BAL   R4,MSG                 TAKE OUT\n         CLC   0(3,R5),MINRBA      SHOULD FREE SEARCH RECORD BE LOWERED\n         BNH   NOFRSR                NO. JUST GET OUT.\n         MVC   0(3,R5),MINRBA      YES. LOWER IT\nMSGX7    LA    R0,L'MESSAGE6\n         MVC   LINE,LINE-1\n         MVC   WK6ALL,MESSAGE6\n         MVC   FROM(7),0(R5)\n         HEX   WK6ALL+16,3,FROM\n         MVC   LINE(L'WK6ALL),WK6ALL\n         BAL   R4,MSG                 TAKE OUT\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS    IS THIS THE LAST MESSAGE ?\n         BE    WRITLENX            YES, GO FINISH UP.\n         MVC   NEXTRBA(3),USMNEXT    NO. GET ADDRESS OF NEXT RECORD\n         DROP  R2\n         BAL   R4,DELREC           GO DELETE THE RECORD\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   MESSRBA(3),NEXTRBA   PREPARE TO READ NEXT RECORD\n         B     WRLOOP\nWRITLENX BAL   R4,DELREC           DELETE THE LAST RECORD\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE6 DC    C'DUMP OF TYPE 5:                     '\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMINRBA   DC    X'000000'\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER9   DS    F                   SAVE BAL REGISTER\nSAVER9A  DS    F                   SAVE BAL REGISTER\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK6ALL   DC    C'                                    '\nWK1NOUSR DC    C'                                              '\nFROM     DC    C'       '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMDIAG": {"ttr": 3843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01H\\x00$\\x01\\x01\\x03O\\x01\\x01\\x19\\x0f\\x16F\\x05\\x0e\\x02-\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.72", "flags": 0, "createdate": "2001-02-03T00:00:00", "modifydate": "2001-07-09T16:46:24", "lines": 1294, "newlines": 557, "modlines": 0, "user": "WSBG"}, "text": "BCMDIAG TITLE 'BCMDIAG - DIAGNOSE PROBLEMS IN SYS1.BRODCAST'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMDIAG REPORT    (TO REPORT ALL ORPHANED MSGS)   *\n*                                                                     *\n*                   BCMDIAG DELBAD    (TO DELETE ALL ORPHANED MSGS)   *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   TO REPORT AND OPTIONALLY DELETE THOSE MESSAGE     *\n*                   RECORDS ON SYS1.BRODCAST WHICH ARE NO LONGER      *\n*                   CHAINED OFF USERID RECORDS.  CREATION OF THESE    *\n*                   RECORDS NORMALLY DOES NOT HAPPEN, BUT THEY ARE    *\n*                   THE RESULT OF SOME SORT OF DATASET CORRUPTION.    *\n*                   IF THEY DO OCCUR, ONLY SYNC CAN GET RID OF THEM,  *\n*                   TO MY KNOWLEDGE.  AND SINCE THE PURPOSE OF THIS   *\n*                   PACKAGE OF UTILITIES IS TO AVOID DOING A SYNC,    *\n*                   THAT'S WHY THIS PROGRAM WAS WRITTEN.              *\n*                                                                     *\n*                   THE REPORT OPTION WILL LIST THE ORPHANED          *\n*                   RECORDS ALONG WITH THEIR RELATIVE RECORD          *\n*                   ADDRESSES.  THE DELBAD OPTION WILL DELETE EACH    *\n*                   RECORD AFTER LISTING IT.                          *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  JULY 9, 01                                        *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*    CHANGES:                                                         *\n*     VERSION 1.2  - ACTUALLY IMPLEMENTED THE DELETION OF BAD         *\n*     (07/09/01)     RECORDS IF DELBAD WAS CODED.  (THIS CODE WAS     *\n*                    DUMMIED OUT IN VERSION 1.1.                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGISTER EQUATES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMDIAG  CSECT\n         USING BCMDIAG,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMDIAG VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             WHO'S ON FIRST BASE ?\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         WHAT'S ON SECOND ?\n         LR    R7,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         ST    R7,SAVECPPL         SAVE CPPL FOR RELOADING IF NEEDED\n         LTR   R7,R7               ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n         BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    L     R1,0(,R7)           PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             ZERO, LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\n         MVI   ALLFLAG,X'FF'       RUN CHAIN FOR ALL IDS W/MESSAGES\nMSGX0    LA    R0,85\n         MVC   LINE,LINE-1\n         MVC   LINE+31(21),=C'BCMDIAG REPORT       '\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE+31(21),=C'------- ------       '\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         BAL   R4,MSG\nFIXSET   CLC   NEWID(6),=C'DELBAD'      KEYWORD FOR FIXING\n         BNE   NOFIX\n         MVI   FIXFLAG,X'FF'            SET FIX FLAG\nNOFIX    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'        TEST FOR GOOD OPEN\n         BNO   WMESS1                   NO GOOD. DISPLAY MESSAGE.\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n*\nMSGX1    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         HEX   LINE,4,NUMRECS         TAKE OUT LATER\n         MVC   LINE+10(31),=C'HEX NUMBER OF RECORDS IN TABLE ' TAKE OUT\n         BAL   R4,MSG                 TAKE OUT\n*\n         BAL   R9,MAKETABL         GETMAIN THE KEY TABLE.\n*\n         BAL   R9,FILLTABL         FILL THE TABLE WITH ALL THE\n*                                     RECORD KEYS.\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n*   PLEASE MAKE SURE THAT THIS REGISTER R10 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    USERIDS AREN'T MISSED UPON RETRY.\n         LA    R10,9               COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\n         CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R10,USRLOOP         TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n         CLC   SAVEPTRS(6),ZEROS   DOES THIS ID HAVE ANY MESSAGES?\n         BE    SKIPSHOW            NO. DON'T DISPLAY THE ZEROS.\nMSGX1A   LA    R0,65                  DISPLAY USERID AND POINTERS\n         MVC   LINE,LINE-1            CLEAR PRINT AREA\n         MVC   LINE+1(7),TRYID        MOVE IN USERID\n         HEX   LINE+10,3,USDRBA       MOVE IN START RBA\n         HEX   LINE+18,3,USDEND       MOVE IN END RBA\n         MVC   LINE+26(21),=C'      USERID POINTERS'\n         BAL   R4,MSG                 WRITE THE MESSAGE\nSKIPSHOW DS    0H\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,TRUSLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVI   R4FLAG,X'00'        BR TO R9 AND NOT R4\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         DROP  R3\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                 >>>     GET HERE AT END OF USER RCDS\nENDUSER  DS    0H                 >>>     NO MORE USERIDS TO SEARCH\n         BAL   R9,GETFRESR         GET RBA POINTED TO BY FREE SRCH RCD\n         BAL   R9,FINDBAD          FIND AND DISPLAY UNCHAINED MESSAGES\n*\n* ---->\n         CLI   FIXFLAG,X'FF'\n         BNE   FINDNREW\n         ST    R9,SAVR9\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         L     R9,SAVR9\nFINDNREW DS    0H\n* ---->\n*\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         CLI   FIXFLAG,X'FF'\n         BNE   NOFIXMSG\n         MVC   WKAALL,FMSALL                      WITH THE TOTAL COUNT\n         MVC   WKAALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WKAALL+45(11),FMSGCNT           MOVE IN COUNT\n         MVC   LINET(L'WKAALL),WKAALL          MOVE TO PRINT LINE\n         LA    R0,L'WKAALL+7                   LENGTH OF OVERALL MESSG\n         BAL   R4,MSG                          WRITE IT\nNOFIXMSG DS    0H\n         MVC   WK2ALL,VALALL                      WITH THE TOTAL COUNT\n         MVC   WK2ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK2ALL+45(11),VMSGCNT           MOVE IN COUNT\n         MVC   LINET(L'WK2ALL),WK2ALL          MOVE TO PRINT LINE\n         LA    R0,L'WK2ALL+7                   LENGTH OF OVERALL MESSG\n         BAL   R4,MSG                          WRITE IT\n         MVC   WK1ALL,MESALL                      TOTAL COUNT MESSAGE\n         MVC   WK1ALL+46(10),MASK10               MOVE IN EDIT PATTERN\n         ED    WK1ALL+45(11),TMSGCNT              DISPLAY TOTAL COUNT\n         MVC   LINET(L'WK1ALL),WK1ALL             MOVE TO DISPLAY LINE\n         LA    R0,L'WK1ALL+7                      SET LENGTH AND\n         BAL   R4,MSG                             WRITE MESSAGE.\nZEROUT   B     EOJ0           THEN WE'RE DONE.\n         SPACE 3\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         B     EOJXXX\n         L     R6,TABLADDR                  SET UP TO\n         L     R5,TABLSIZE                  FREEMAIN THE KEY TABLE\n         FREEMAIN RU,LV=(R5),A=(R6),SP=SP000\nEOJXXX   LR    R1,R13              SET UP FOR SAVEAREA FREEMAIN\n         L     R13,4(,R13)         POINT R13 TO CALLER'S SAVEAREA\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)        LOAD THE SAVED REGISTERS BACK\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        MAKE TABLE FOR KEYS FOR ALL RECORDS IN SYS1.BRODCAST.    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMAKETABL DS    0H\n         L     R6,NUMRECS\n         LTR   R6,R6\n         BZ    ERROR2\n         LA    R6,10(,R6)\n         ST    R6,TABLSIZE\nMSGX2    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         HEX   LINE,4,TABLSIZE        TAKE OUT LATER\n         MVC   LINE+10(31),=C'HEX NUMBER OF TABLE SIZE       ' TAKE OUT\n         BAL   R4,MSG                 TAKE OUT\n         GETMAIN RU,LV=(R6),SP=SP000,LOC=BELOW\n         LTR   R1,R1\n         BZ    ERROR2\n         ST    R1,TABLADDR\nMSGX3    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         HEX   LINE,4,TABLADDR        TAKE OUT LATER\n         MVC   LINE+10(31),=C'TABLE ADDRESS IN HEX           ' TAKE OUT\n         BAL   R4,MSG                 TAKE OUT\n         B     MAKETEND\nERROR2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE3                 TABLE IS NOT GETMAINED\n         LA    R0,L'MESSAGE3+7                  PROPERLY.\n         BAL   R4,MSG\n         B     EOJ8                         AND SCRAMMEZ VOUS\nMAKETEND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FILL TABLE WITH KEYS FOR ALL RECORDS IN SYS1.BRODCAST.   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFILLTABL DS    0H\nSTARTRD  MVC   BLOCKNO(3),ZEROS\n         L     R7,TABLADDR\nREADLOOP CLC   BLOCKNO(3),NUMRECS+1  DID WE REACH MAX ?\n         BE    READEND\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       GET KEY\n         MVC   0(1,R7),0(R2)       DUMP INTO TABLE\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         LA    R7,1(,R7)           INCREMENT ADDRESS IN TABLE\n         ICM   R3,7,BLOCKNO        INCREMENT\n         LA    R3,1(,R3)             BLOCK NUMBER\n         STCM  R3,7,BLOCKNO            FOR NEXT READ\n         B     READLOOP\nREADEND  DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nMSGX4    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         HEX   LINE,3,BLOCKNO         TAKE OUT LATER\n         MVC   LINE+10(31),=C'LAST RELATIVE BLOCK NUMBER READ' TAKE OUT\n         BAL   R4,MSG                 TAKE OUT\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 THE TABLE HAS\n         LA    R0,L'MESSAGE2+7                  BEEN FILLED W/KEYS.\n         BAL   R4,MSG\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   NUMRECS(4),R1RECNUM  TOTAL NUM OF RECORDS IN DATASET.\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        SAVE FREE SEARCH RBA FROM FREE SEARCH RECORD             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETFRESR DS    0H                  GET RBA POINTED TO BY FREE SRCH RCD\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    GETFREND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS VALUE\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGETFREND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        WE HAVE TO LOWER THE FREE SEARCH RECORD'S RBA POINTER    *\n*        WHEN WE DELETE A RECORD WITH A LOWER RBA.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHNGFSRC DS    0H\n         ST    R4,SAVER4           SAVE RETURN ADDRESS\n         CLI   REWFLAG,X'FF'       ARE WE CHANGING ANYTHING ?\n         BNE   CHNGFEND            NO. SKIP THIS ENTIRE SECTION\n         CLC   TYP5RBA(3),ZEROS    IS THIS TSO VERSION 1 ?\n         BE    CHNGFEND            YES. SKIP THIS SECTION\n         CLC   NSRCRBA(3),ZEROS    NO PROBLEM RECORDS ?\n         BE    CHNGFEND            NONE. SKIP SECTION.\nFRSRCEAD DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nMSGX4A   LA    R0,L'MESSAGE4              LOAD LENGTH OF MESSAGE\n         MVC   LINE,LINE-1                CLEAR OUTPUT LINE\n         HEX   WK4ALL+24,3,FSRCRBA        DISPLAY FREE SEARCH RBA\n         MVC   LINE(L'WK4ALL),WK4ALL      MOVE IN FIXED PART OF MSG\n         BAL   R4,MSG                     WRITE OUT MESSAGE\nMSGX5    LA    R0,L'MESSAGE5            LOAD LENGTH OF MESSAGE\n         MVC   LINE,LINE-1              CLEAR OUTPUT LINE\n         HEX   WK5ALL+24,3,NSRCRBA      DISPLAY RBA TO UPDATE FRS RBA\n         MVC   LINE(L'WK5ALL),WK5ALL    MOVE IN FIXED PART OF MSG\n         BAL   R4,MSG                   WRITE OUT MESSAGE\n         L     R3,MDLDECB+12          POINT TO TYPE 5 RECORD\nMSGX6    LA    R0,L'MESSAGE6            LOAD LENGTH OF MESSAGE\n         MVC   LINE,LINE-1              CLEAR OUTPUT LINE\n         MVC   FROM(7),0(R3)            MOVE BEGINNING OF FS RECORD\n         HEX   WK6ALL+16,7,FROM         MAKE ENTIRE AREA DISPLAYABLE\n         MVC   LINE(L'WK6ALL),WK6ALL    MOVE IN FIXED PART OF MSG\n         BAL   R4,MSG                   WRITE OUT MESSAGE\n         LA    R3,1(,R3)              BUMP TO FS RECORD'S RBA\n         CLC   0(3,R3),NSRCRBA        IS NEW SRCH RBA SMALLER ?\n         BNH   NOCHNGF                NO. DON'T CHANGE IT.\n         MVC   0(3,R3),NSRCRBA        YES.  LOWER IT.\nNOCHNGF  DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nCHNGFEND L     R4,SAVER4           RESTORE RETURN ADDRESS\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        WE'RE IN THIS SECTION WHEN WE SEARCH THE KEY TABLE       *\n*        FOR MESSAGES TO DELETE (IN FIX MODE) OR FOR MESSAGES     *\n*        THAT ARE IN ERROR (IN DISPLAY MODE).                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFINDBAD  DS    0H\n         MVC   RNAM(3),ZEROS       STOP SEND AND LISTBC NOW\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   MESSRBA(3),ZEROS    START SEARCH WITH HEADER\nTABLECYC DS    0H                  ONLY WRITE OUT UNCHAINED MESSAGES\n         CLC   MESSRBA(3),NUMRECS+1     AT END OF TABLE?\n         BE    FINDBEND                 YEP. END THE ROUTINE\n         L     R5,TABLADDR              LOAD START OF TABLE\n         XR    R6,R6                    CLEAR HI BYTE\n         ICM   R6,7,MESSRBA             LOAD RECORD NUMBER\n         AR    R5,R6                    GET PLACE IN TABLE\n         MVC   WRONGKEY(1),0(R5)        SAVE THIS TABLE ENTRY\n         CLI   0(R5),X'03'              IS IT AN X'03' ?\n         BE    SHOWRCD                  YES. GO DUMP MESSAGE.\n         CLI   0(R5),X'DD'              IS IT AN X'DD' ?\n         BE    SHOWRCD                  YES. GO DUMP MESSAGE.\n         LA    R6,1(,R6)           BUMP PLACE IN TABLE\n         STCM  R6,7,MESSRBA        INCREMENT RECORD NUMBER\n         B     TABLECYC\nSHOWRCD  DS    0H\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       POINT TO KEY\n         CLI   0(R2),X'03'         IS THIS A MESSAGE RECORD\n         BNE   FINDBEND            NO, WE HAVE NO BUSINESS HERE\n         L     R2,MDLDECB+12       LOOK AT THE RECORD\n         USING USMSG,R2            AS A MESSAGE RECORD\n         MVI   LINE-1,X'40'        PUT IN BLANK TO CLEAR LINE\n         MVC   LINE,LINE-1         CLEAR OUTPUT AREA\n         XR    R0,R0               ZERO REGISTER\n         IC    R0,USMLNG           LOAD LENGTH OF USER MESSAGE\n         DROP  R2\n         LR    R3,R0               LOAD LENGTH FOR EXECUTE\n         BCTR  R3,0                ONE LESS FOR EXECUTE\n         EX    R3,MOVDMSG          MOVE MESSAGE TO OUTPUT LINE\n         A     R0,=F'11'           ADD 11 TO LENGTH BECAUSE OF INSERTS\n         HEX   LINE+7,1,WRONGKEY   INCLUDE TABLE VALUE FOR RECORD\n         HEX   LINE,3,MESSRBA      INCLUDE RBA NUMBER IN DISPLAY\n         BAL   R4,MSG              NOW WRITE THE MESSAGE OUT\n* ---->\n         CLI   FIXFLAG,X'FF'\n         BNE   FINDNFIX\n         ST    R2,SAVR2\n         ST    R4,SAVR4\n         BAL   R4,DELREC\n         L     R2,SAVR2\n         L     R4,SAVR4\nFINDNFIX DS    0H\n* ---->\n         AP    DMSGCNT,=P'1'       AND COUNT IT\nFINDNOFX DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BAL   R7,CHNGFSRC         GO CHANGE FREE SEARCH RECORD PTR\n*                                   IF THIS IS NEEDED.\n         XR    R6,R6                    CLEAR HI BYTE\n         ICM   R6,7,MESSRBA             LOAD RECORD NUMBER\n         LA    R6,1(,R6)           BUMP PLACE IN TABLE\n         STCM  R6,7,MESSRBA        INCREMENT RECORD NUMBER\n         B     TABLECYC\nFINDBEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   WK3ALL,INVALL                      WITH THE TOTAL COUNT\n         MVC   WK3ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK3ALL+45(11),DMSGCNT\n         MVC   LINET(L'WK3ALL),WK3ALL\n         LA    R0,L'WK3ALL+7\n         BAL   R4,MSG\n         MVC   RNAM(3),ZEROS       ALLOW SEND AND LISTBC NOW\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5REA  DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\n         CLC   0(3,R5),MINRBA      SHOULD FREE SEARCH RECORD BE LOWERED\n         BNH   NOFRSR                NO. JUST GET OUT.\n         MVC   0(3,R5),MINRBA      YES. LOWER IT\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        WRITE A MESSAGE LINE                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        MAKE A HEXADECIMAL NUMBER DISPLAYABLE                    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   VMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   DMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         ZAP   FMSGCNT,=P'0'\n         MVC   WK1TOTAL,MESTOTAL                      INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   WK2ALL,VALALL\n         MVC   WK3ALL,INVALL\n         MVC   WK4ALL,MESSAGE4\n         MVC   WK5ALL,MESSAGE5\n         MVC   WK6ALL,MESSAGE6\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS\n         MVC   LASMRBA(3),ZEROS\n         MVC   ENCHRBA(3),ZEROS\n         MVC   MINRBA(3),=X'0FFFFF'    PUT A LARGE VALUE IN\n         MVC   RNAM(3),ZEROS\n         MVC   NUMRECS(4),ZEROS\n         MVC   TABLSIZE(4),ZEROS\n         MVC   TABLADDR(4),ZEROS\n         MVI   ALLFLAG,X'FF'\n         MVI   FIXFLAG,X'00'\n         MVI   REWFLAG,X'00'\n         MVI   R4FLAG,X'00'\n         MVI   NOFREE,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        RUN A CONTROL BLOCK CHAIN TO GET ADDRESS OF THE PSCB     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        SAVE AS MUCH INFORMATION AS POSSIBLE FROM THE CPPL       *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCPPLPTRS L     R7,SAVECPPL         SAVE ADDRESS OF CPPL\n         USING CPPL,R7\n         ST    R6,SAVER6              SAVE R6\n         L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         L     R6,SAVER6              RESTORE R6\n         DROP  R7\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         CLI   NOFREE,X'FF'        DO WE SKIP THE FREEDBUF?\n         BE    SKPFREE\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nSKPFREE  CLI   R4FLAG,X'FF'\n         BE    BAKTO4\n         BR    R9\nBAKTO4   BR    R4\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND TRACK THEM IN THE GETMAINED TABLE.                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTRUSLOOP DS    0H                  TRACE USER CHAINS TO SEE WHICH\n*                                  ARE GOOD MESSAGES. MARK IN TABLE.\n*\n         MVC   LASMRBA(3),ZEROS    TELL US THERE WAS NO LAST MESSAGE\n*                                  TO BEGIN WITH\nTRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         XR    R6,R6               CLEAR WHOLE REGISTER\n         ICM   R6,7,MESSRBA        DUMP IN RELATIVE ADDRESS\n         LA    R5,0(,R6)           LOAD ADDRESS OF OFFSET\n         L     R3,TABLADDR         LOAD ADDRESS OF TABLE START\n         AR    R5,R3               INDEX INTO TABLE\n         CLI   0(R5),X'03'         MARKED AS VALID MESSAGE?\n         BE    TRCON1              YES. GO ON.\n         CLI   0(R5),X'CC'         IS THIS GUY ON SOMEONE ELSE'S CHAIN\n         BNE   TRGOON              NO.\n         MVI   0(R5),X'DD'         YES. MARK AS DOUBLE CHAINED\nTRGOON   XR    R0,R0               NO.  WRITE IT OUT AS A DISPLAY\n         MVC   WRONGKEY(1),0(R5)   SAVE TABLE'S \"KEY\" ENTRY\n         IC    R0,USMLNG           GET LENGTH OF MESSAGE\n         LR    R3,R0               DUMP IT INTO REG FOR EXECUTE\n         BCTR  R3,0                MINUS ONE FOR EXECUTE\n         EX    R3,MOVDMSG          MOVE MESSAGE INTO DISPLAY LINE\n         A     R0,=F'11'           MAKE ROOM IN DISPLAY LINE FOR EXTRAS\n         HEX   LINE+7,1,WRONGKEY   DISPLAY TABLED \"KEY\" VALUE\n         HEX   LINE,3,MESSRBA      DISPLAY RELATIVE RECORD ADDRESS\n         BAL   R4,MSG              WRITE THIS WHOLE LINE\n         B     WRITLEND\nTRCON1   AP    VMSGCNT,=P'1'       ADD TO VALID MESSAGE COUNT\n         MVI   0(R5),X'CC'         CHANGE ID OF CHAINED MESS IN TABLE\n         CLC   USMNEXT(3),ZEROS    IS THIS END OF MESSAGE CHAIN?\n         BE    WRITLEND            YEP. FINISH OFF THIS USERID.\n         MVC   MESSRBA(3),USMNEXT  NOPE. MOVE IN RBA OF NEXT MESSAGE\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   LASMRBA(3),MESSRBA  SAVE PREVIOUS MESSAGE RBA\n         B     TRLOOP\nWRITLEND DS    0H\n         CLC   MESSRBA(3),SAVEPTRS+3      END POINTER MATCH END RECD?\n         BE    WRITLND                    YES, NO DISPLAY\nMSGX7    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         HEX   LINE+7,3,MESSRBA\n         MVC   LINE+16(22),=C'LAST RECORD IN CHAIN  '\n         BAL   R4,MSG                 TAKE OUT\nWRITLND  DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        ALLFLAG IS ON, SO GO TO THE NEXT ID.                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'                    WRITE A BLANK LINE\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDELREC   DS    0H             THIS ROUTINE ASSUMES A READ WAS\n*                             DONE FIRST, AND A CHECK. THE RECORD\n*                             THAT WAS READ, WILL BE DELETED.\n*                             IF LEVEL OF SYS1.BRODCAST IS 2 OR MORE,\n*                             THEN THE RBA OF THE FREE SEARCH RECORD\n*                             WILL ALSO BE UPDATED IF NECESSARY.\n*                             THIS WILL NOT BE DONE HERE.  RATHER,\n*                             THE RBA OF ALL DELETED RECORDS WILL BE\n*                             MINIMIZED, AND THE UPDATING, IF THE\n*                             MINIMUM RBA IS LESS THAN THE FREE SEARCH\n*                             RECORD RBA, WILL BE DONE AT THE VERY END\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         L     R2,MDLDECB+16           POINT TO IOB\n         USING IOBSTDRD,R2\n         MVC   SAVEINF1(8),IOBSEEK     SAVE CCHHR OF RECORD\n         DROP  R2\n         L     R2,MDLDECB+20           POINT TO THE KEY\n         MVI   0(R2),X'FF'             FIRST PART OF MARKING DELETED\n         L     R2,MDLDECB+12           POINT TO RECORD ITSELF\n         USING USMSG,R2\n         MVC   USMLNG(1),SAVEINF1+7    MOVE IN HEX RECORD NUMBER\n         MVC   USMTEXT(128),ZERREC     ZERO OUT THE MESSAGE AREA\n         CLC   MINRBA(3),MESSRBA       SEE IF CURRENT RBA IS LOWEST\n         BNH   CHGFRBA                 IT ISN'T, SO BRANCH AROUND.\n         MVC   MINRBA(3),MESSRBA       LOWER SAVED RBA IF NECESSARY\nCHGFRBA  DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         AP    FMSGCNT,=P'1'       COUNT DELETED RECORD\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         BR    R4\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        SET UP IOPL FOR PUTLINE                                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nSETIOPL  L     R7,SAVECPPL         POINT TO CPPL\n         USING CPPL,R7\n         LA    R15,MYIOPL          GET IOPL ADDRESS\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT  MOVE IN UPT ADDR FROM CPPL\n         MVC   IOPLECT(4),CPPLECT  MOVE IN ECT ADDR FROM CPPL\n         DROP  R7\n         LA    R0,MYECB            GET OUR PROGRAM'S ECB ADDR\n         ST    R0,IOPLECB          AND PUT IT IN THE IOPL\n         XC    MYECB,MYECB         CLEAR THE ECB\n         LA    R0,MYPTPB           GET ADDR OF PTPB IN THIS PGM\n         ST    R0,IOPLIOPB         AND PUT IT IN THE IOPL\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        PUTMSG ROUTINE                                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        PUTLINE ROUTINE                                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE 3\n         SPACE 3\n*-----------------------------------------------------------------*\n*---*      E N D   O F   S U B R O U T I N E S                *---*\n*-----------------------------------------------------------------*\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\nMOVDMSG  MVC   LINED(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'THE GETMAINED TABLE HAS BEEN FILLED WITH KEY VALUES'\nMESSAGE3 DC    C'GETMAIN WAS BAD.  HAD TO LEAVE THIS PROJECT. '\nMESSAGE4 DC    C'OLD FREE SEARCH RECORD             '\nMESSAGE5 DC    C'NEW FREE SEARCH RECORD             '\nMESSAGE6 DC    C'DUMP OF TYPE 5:                     '\nMESSAGE7 DC    C'ORPHANED USER MESSAGES ARE BEING DELETED. '\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nFMSALL DC C'TOTAL ORPHANED MSGS DELETED IN SYS1.BRODCAST              '\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nVALALL DC C'TOTAL  VALID   TSO MESSAGES IN SYS1.BRODCAST              '\nINVALL DC C'TOTAL INVALID  TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         EJECT\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF DELETED ORPHANED RECORDS\nVMSGCNT  DC    PL5'0'              COUNT OF VALID MESSAGES CHAINED\nDMSGCNT  DC    PL5'0'              COUNT OF DELETED MESSAGES\nFMSGCNT  DC    PL5'0'              COUNT OF DELETED MESSAGES\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nTABLADDR DS    F                   ADDR OF GETMAINED TABLE\nTABLSIZE DS    F                   SIZE OF GETMAINED TABLE\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL '\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nTYP5RBA  DC    X'000000'           STORE RELATIVE ADDR OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nENCHRBA  DC    X'000000'           RBA OF END OF THIS USERID'S CHAIN\nLASMRBA  DC    X'000000'           RBA OF PREVIOUS MESSAGE\nRNAM     DC    X'000000'           RBA TO ENQUEUE ON\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nFSRCRBA  DC    X'000000'           RBA OF OLD FREE SEARCH RECORD\nNSRCRBA  DC    X'000000'           RBA OF FIRST DELETED FIXED RECORD\nMINRBA   DC    X'000000'\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nWRONGKEY DS    CL1\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nNUMRECS  DS    F                   NUMBER OF RECORDS IN SYS1.BRODCAST\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVR2    DS    F                   SAVE REG 2 DURING BAL\nSAVR4    DS    F                   SAVE REG 4 DURING BAL\nSAVR9    DS    F                   SAVE REG 9 DURING BAL\nSAVER4   DS    F                   SAVE REG 4 DURING BAL\nSAVER6   DS    F\nSAVER7   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 DUMP CCHHR HERE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\nLINED    EQU   LINE+11\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK2ALL DC C'                                                          '\nWK3ALL DC C'                                                          '\nWK4ALL   DC    C'                                   '\nWK5ALL   DC    C'                                   '\nWK6ALL   DC    C'                                    '\nWKAALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nFROM     DC    C'       '\nALLFLAG  DS    X\nFIXFLAG  DS    X\nREWFLAG  DS    X\nR4FLAG   DS    X\nNOFREE   DS    X\n         DS    0D                  ENSURE DOUBLEWORD BOUNDARY OF AREA\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n*\n         EJECT\n*-----------------------------------------------------*\n*        MAPPING MACROS                               *\n*-----------------------------------------------------*\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMDUMP": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00H\\x01\\x01\\x03O\\x01\\x01\\x19?\\x14\\x12\\x03l\\x03_\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2001-02-03T00:00:00", "modifydate": "2001-07-12T14:12:48", "lines": 876, "newlines": 863, "modlines": 0, "user": "WSBG"}, "text": "         TITLE 'ANALYZE SYS1.BRODCAST DATASET'\n*------------------------------------------------------------------*\n*\n*          B C D U M P   ( DUMP BROADCAST TO FB-130 FILE )\n*\n*\n*------------------------------------------------------------------*\n         EJECT\n*------------------------------------------------------------------*\n*        RECORD TYPE.  RECORD 1 AND THE 'NOTICES' DIRECTORY AND\n*        'NOTICES' MESSAGE RECORDS ARE LOCATED IN THE FIXED PART\n*        OF THE BRODCAST DATA SET AT THE BEGINNING. THE 'MAIL'\n*        DIRECTORY AND MESSAGE RECORDS WILL APPEAR RANDOMLY\n*        THROUGHOUT THE REMAINDER OF 'SYS1.BRODCAST'.\n*        THE SIX RECORD TYPES AND THEIR KEYS ARE:\n*\n*        X'00'     BRODCAST 'NOTICES' DIRECTORY RECORD.\n*\n*        X'01'     USER 'MAIL' DIRECTORY RECORD.\n*\n*        X'02'     BROADCAST 'NOTICES' MESSAGE RECORD.\n*\n*        X'03'     USER 'MAIL' MESSAGE RECORD.\n*\n*        X'04'     FIRST RECORD OF 'SYS1.BRODCAST' DATA SET.\n*\n*        X'05'     RBA ADDRESS OF FIRST DUMMY RECORD AVAILABLE.  JDM1\n*\n*        X'FF'     DUMMY INACTIVE 'MAIL' MESSAGE RECORD.\n*\n*        THE 'BDAM' ACCESS METHOD READS THESE RECORDS WITHOUT\n*        KEYS, SO THE KEY IDENTIFIER IS NOT READ IN WITH THE\n*        REMAINING 129 CHARACTERS OF EACH RECORD.\n*\n*\n*        JCL TO INVOKE:\n*\n*  //BCMDUMP  EXEC PGM=BCMDUMP,REGION=3M\n*  //STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n*  //BRODMAP  DD  SYSOUT=A,DCB=BLKSIZE=133\n*  //BRODSNAP DD  SYSOUT=A\n*  //BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR\n*  //BRODDUMP DD  DISP=(NEW,CATLG,DELETE),DSN=SBGOLOB.BRODCAST.DUMP,\n*  //         DCB=(RECFM=FB,LRECL=130,BLKSIZE=27950),\n*  //         SPACE=(TRK,(60,30),RLSE)\n*\n*\n*        NOTES:\n*\n*\n* INSTALLED:  09 MAY 99\n*\n* CHANGE LOG:\n*                                                                       002\n*         SG MAY99 -                                                    002\n*\n*------------------------------------------------------------------*\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL84 -         RESERVED\n         MEND\n         MACRO\n         IKJZT302  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT303   &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         SPACE\nR0       EQU   0                  USED BY O.S.\nR1       EQU   1                  ADDR OF PARM LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9                   PTR TO OUTPUT LINE FOR PUT\nR10      EQU   10                  BAL REGISTER\nR11      EQU   11\nR12      EQU   12                  BASE REGISTER\nR13      EQU   13                  SAVE-AREA ADDRESS\nR14      EQU   14                  ULTIMATE RETURN ADDRESS\nR15      EQU   15                  ENTRY-PT ADDR, WORK REG, RET CODE\n         SPACE\nBCMDUMP  AMODE 24\nBCMDUMP  RMODE 24\nBCMDUMP  CSECT\n         SAVE  (14,12),,BCMDUMP_&SYSDATE._&SYSTIME\n         LR    R12,R15             LOAD ENTRY ADDRESS\n         LA    R8,4095(,R12)       LOAD SECOND BASE            SG 05/99\n         LA    R8,1(,R8)             ADDRESS                   SG 05/99\n         USING BCMDUMP,R12,R8      ESTABLISH ADDRESSABILITY\n         LR    R15,R13             SAVE HIS SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          SAVE OFF INTO LOW SAVE\n         ST    R13,8(,R15)         CHAIN MINE BACK\n         XR    R9,R9               FOR POSSIBLE DEBUG PURPOSES\n         XR    R10,R10             FOR POSSIBLE DEBUG PURPOSES\n         MVC   OUTREC(130),OUTZERO  BLANK OUTPUT RECORD AREA   SG 05/99\n         SPACE\n         OPEN  (BRODCAST,(INPUT),BRODMAP,(OUTPUT),SNAP,(OUTPUT))\n         OPEN  (BRODDUMP,(OUTPUT))                             SG 05/99\n         SPACE\n*--------------------------------------------------------------------*\n*        GET THE HEADER RECORD.  THIS IS A SPECIAL RECORD 1.\n*--------------------------------------------------------------------*\n         SPACE\n         READ  HDRECB,             ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK HDRECB\n         L     R3,HDRECB+12\n         USING R1BC,R3             ADDRESSABILITY TO RECORD 1 MAPPING\n*------------------------------------------------------------- SG 05/99\n         ST    R2,SAVEREGA         SAVE REGISTER               SG 05/99\n         L     R2,HDRECB+20        GET KEY ADDRESS             SG 05/99\n         MVC   OUTKEY(1),0(R2)     STORE KEY IN DUMP RECORD    SG 05/99\n         L     R2,SAVEREGA         RESTORE REGISTER            SG 05/99\n         MVC   OUTDATA(129),0(R3)  STORE DATA IN DUMP RECORD   SG 05/99\n         PUT   BRODDUMP,OUTREC     WRITE DUMP RECORD           SG 05/99\n         MVC   OUTREC(130),OUTZERO  BLANK RECORD FOR NEXT TIME SG 05/99\n*------------------------------------------------------------- SG 05/99\n         SPACE\n         AP    REC04,=P'1'         ADD 1 TO TOTAL                JDM0\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA 1ST USER'S MAIL DIR REC\n         MVC   HIGHVAL(4),R1RECNUM SAVE GET OUT VALUE\n         MVC   SAVHDADR(4),R1RECNUM SAVE GET OUT VALUE         SG MAY99\n         L     R5,HIGHVAL          GET NUMBER FOR PRINTOUT\n         CVD   R5,CVDAREA          CONVERT IT TO PRINTABLE\n         MVC   MAXCNT,MASK7        MOVE IN THE MASK\n         ED    MAXCNT,CVDAREA+5    MAKE IT PRETTY\n         LA    R9,MAXIMUM          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           TELL HOW MANY\n         SPACE\n         LH    R5,R1BCMAX          GET NUMBER OF NOTICES\n         XR    R4,R4               CLEAR R4\n         D     R4,=F'25'           NUMBER OF BLOCKS REQUIRED\n         AH    R5,R1BCMAX          PLUS TOTAL FOR MESSAGES\n         DROP  R3\n         LTR   R4,R4               REMAINDER?\n         BZ    CVDNOT\n         LA    R5,1(,R5)           ONE MORE REQUIRED\nCVDNOT   EQU   *\n         CVD   R5,CVDAREA          CONVERT IT TO PRINTABLE\n         MVC   NOTCNT,MASK4\n         ED    NOTCNT,CVDAREA+6    MAKE IT PRETTY\n         LA    R9,NOTICES          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           TELL HOW MANY\n         L     R9,HDRECB+20        POINT TO KEY\n         BAL   R10,SNAPUNK\n         L     R9,HDRECB+12        POINT TO AREA\n         BAL   R10,SNAPUNK\n         SPACE\n         FREEDBUF HDRECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         L     R0,SAVHDADR              GET MAXIMUM RECORDS    SG MAY99 005\n         A     R0,=F'1'                 ONE FOR GOOD LUCK      HD DEC97 005\nTYPEGET  GETMAIN RU,LV=(0),LOC=BELOW    GET STORAGE FOR TABLE  HD DEC97 005\n         ST    R1,TYPETBLA              SAVE ADDRESS           HD DEC97 005\n         LR    R0,R1                    SAVE ADDRESS           HD DEC97 005\n         L     R1,SAVHDADR              GET LENGTH             SG MAY99 005\n         LM    R14,R15,=D'0'            CLEAR FOR ICM          HD DEC97 006\n         ICM   R15,B'1000',=X'99'       PAD WITH X'99'         HD DEC97 006\n         MVCL  R0,R14                   CLEAR AREA             HD DEC97 006\n         L     R7,TYPETBLA                                     HD DEC97 006\n         MVI   1(R7),X'04'                                     HD DEC97 006\n         SPACE\n*--------------------------------------------------------------------*\n*        THIS IS NOW OUR READ LOOP AS WE DO A SUCESSIVE READ\n*        INCREMENTING THE RBA NUMBER UNTIL WE REACH THE BCNUMREC\n*        VALUE SAVED IN 'HIGHVAL'.  ONCE WE HAVE READ ALL THE\n*        RECORDS WE WILL GO AND ANALYZE THEM.\n*--------------------------------------------------------------------*\n         SPACE\nREADLOOP EQU   *\n         ICM   R1,7,BLOCKNO        GET PROCESSED RBA\n         LA    R1,1(R1)            INCREMENT BY ONE\n         STCM  R1,7,BLOCKNO        STORE IT BACK FOR READ\n         CLC   BLOCKNO(3),HIGHVAL+1  DID WE REACH MAX?           JDM0\n         BE    ANALYZE             IF SO, GO ANALYZE THEM ALL\n         SPACE\n         READ  RECECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK RECECB\n         SPACE\n         L     R2,RECECB+20        GET KEY ADDRESS\n         MVC   0(1,R7),0(R2)       STORE TYPE INTO TABLE\n         MVC   OUTKEY(1),0(R2)     STORE KEY IN DUMP RECORD    SG 05/99\n         ST    R11,SAVEREGA        SAVE REGISTER               SG 05/99\n         L     R11,RECECB+12       GET DATA ADDRESS            SG 05/99\n         MVC   OUTDATA(129),0(R11) STORE DATA IN DUMP RECORD   SG 05/99\n         L     R11,SAVEREGA        RESTORE REGISTER            SG 05/99\n         PUT   BRODDUMP,OUTREC     WRITE DUMP RECORD           SG 05/99\n         MVC   OUTREC(130),OUTZERO  BLANK RECORD FOR NEXT TIME SG 05/99\n         LA    R7,1(R7)            INCREMENT IN OUR TABLE.\n         SPACE\n*--------------------------------------------------------------------*\n*        COUNT THE DIFFERENT RECORD TYPES FOR LATER REPORTING.\n*--------------------------------------------------------------------*\n         SPACE\n         CLI   0(R2),X'00'         IS THIS NOTICE DIRECTORY RECORD?\n         BNE   CHK1                NO.\n         AP    NOTDIR,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK1     EQU   *\n         CLI   0(R2),X'01'         IS THIS USERID DIRECTORY RECORD?\n         BNE   CHK2                NO.\n         AP    USRIND,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK2     EQU   *\n         CLI   0(R2),X'02'         IS THIS NOTICES MSG RECORD?\n         BNE   CHK3                NO.\n         AP    NOTMSG,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK3     EQU   *\n         CLI   0(R2),X'03'         IS THIS USER MSG RECORD?\n         BNE   CHK4                NO.\n         AP    USRMSG,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK4     EQU   *                                                 JDM1\n         CLI   0(R2),X'05'         IS THIS POINTER RECORD?       JDM1\n         BNE   CHKFF               NO.                           JDM1\n         AP    PTRMSG,=P'1'        ADD 1 TO TOTAL                JDM1\n         B     FREEB                                             JDM1\n         SPACE 1                                                 JDM1\nCHKFF    EQU   *\n         CLI   0(R2),X'FF'         DUMMY INACTIVE MAIL MSG RECORD?\n         BNE   UNKNOWN             NO.\n         AP    FREEREC,=P'1'       ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nUNKNOWN  EQU   *\n         UNPK  ODDKEY+36(3),0(2,R2)\n         TR    ODDKEY+36(2),HEXTAB-X'F0'\n         MVI   ODDKEY+38,C' '\n         LA    R9,ODDKEY           POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         L     R9,RECECB+20        GET KEY ADDRESS\n         BAL   R10,SNAPUNK         GO SNAP THIS UNKNOWN RECORD.\n         SPACE\nFREEB    DS    0H                                                       009\n         FREEDBUF RECECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         B     READLOOP\n         SPACE\n*--------------------------------------------------------------------*\n*        NOW, START TO ANALYZE ALL AND PRINT RESULTS TO THE REPORT.\n*--------------------------------------------------------------------*\n         SPACE\nANALYZE  DS    0H                                              SG 05/99\n*------------------------------------------------------------* SG 05/99\n         CLOSE BRODDUMP            CLOSE DUMP FILE AFTER       SG 05/99\n*                                  END OF SEQUENTIAL READ      SG 05/99\n*------------------------------------------------------------* SG 05/99\n         LA    R9,BREAKOUT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT           PUT OUT THE SECTION HEADER\n         SPACE\n         MVC   KEYTYPE,TYPE04      MOVE IN DESCRIPTION           JDM0\n         MVC   KEYCNT,MASK7                                      JDM0\n         ED    KEYCNT,REC04                                      JDM0\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT        JDM0\n         BAL   R10,PRINT                                         JDM0\n         SPACE 1                                                 JDM0\n         MVC   KEYTYPE,TYPE00      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,NOTDIR\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE02      MOVE IN DESCRITPION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,NOTMSG\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE01      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,USRIND\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE03      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,USRMSG\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE05      MOVE IN DESCRIPTION           JDM1\n         MVC   KEYCNT,MASK7                                      JDM1\n         ED    KEYCNT,PTRMSG                                     JDM1\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT        JDM1\n         BAL   R10,PRINT                                         JDM1\n         SPACE 1                                                 JDM1\n         MVC   KEYTYPE,TYPEFF      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,FREEREC\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         LA    R9,USERSOUT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n*--------------------------------------------------------------------*\n*        IN MVS, THERE IS A CHANGE FROM HAVING 12 USERID PER BLOCK\n*        TO 9 PER BLOCK.\n*--------------------------------------------------------------------*\n         SPACE\nINDEXLP  EQU   *\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA\n         SPACE\n         READ  SCNECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK SCNECB\n         SPACE\n         L     R3,SCNECB+12        ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   SAVERBA,USDNEXT     COPY NEXT INDEX RECORD NUMBER\n         SPACE\n*--------------------------------------------------------------------*\n*        YOU WILL GO THROUGH THIS LOOP 9 TIMES, BECAUSE 9 ENTRIES\n*        ARE HELD IN EVERY RECORD.\n*--------------------------------------------------------------------*\n         SPACE\nUSRLOOP  EQU   *\n         MVC   USERID(7),USDID     COPY WHO THIS IS\n         CLC   USERID(7),ZEROS     IS THIS A REAL USER?\n         BE    NOMSG               NOPE, MUST HAVE BEEN DELETED\n         AP    USERS,=P'1'\n         XR    R4,R4               CLEAR UPPER BYTE\n         ICM   R4,7,USDRBA         GET BLOCK POSITION\n         DROP  R3\n         BZ    NOMSG               NO.. JUST BUMP\nALTCODE  DS    0H                                              HD DEC97 013\n         SLR   R5,R5                    CLEAR FOR ADD          HD DEC97 013\n         L     R7,TYPETBLA              GET ADDRESS OF TYPETBL HD DEC97 013\n         LA    R5,0(R7,R4)              POINT TO TABLE ENTRY   HD DEC97 013\n         BCTR  R5,0                     ORIGIN ZERO            HD DEC97 013\n         CLI   0(R5),X'03'         JUST VERIFY WERE WE ARE\n         BE    TABLOK                   THIS IS A VALID ONE    HD DEC97 014\n         LA    R9,TABLERR          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           JUST LET THEM KNOW I'M CONFUSED\n         B     BUMPUSR\n         SPACE\nTABLOK   DS    0H\n         MVI   0(R5),X'88'         SET THAT IT WAS A VALID MESSAGE\nBUMPUSR  EQU   *\n         AP    MSGCOUNT,=P'1'      INCREMENT HOW MANY MESSAGES\n         STCM  R4,7,MSGNUM\n         SPACE\n         READ  MSGECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MSGNUM              RBA TO HOLD THE KEY\n         SPACE\n         CHECK MSGECB\n         SPACE\n         L     R4,MSGECB+12        ADDRESS OF RECORD\n         USING USMSG,R4\n         ICM   R4,7,USMNEXT        RRN OF NEXT MESSAGE\n         DROP  R4\n         SPACE\n         FREEDBUF MSGECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n*--------------------------------------------------------------------*\n*        TEST TO SEE IF THERE WILL BE ANOTHER RECORD AFTER THIS ONE\n*        IN THE CHAIN.  IF 'USMPTR' IS INDEED ZERO, THEN WE ARE\n*        FINISHED PROCESSING THIS CHAIN AND ARE READY TO DETERMINE\n*        IF WE SHOULD BUILD ENTRY 1, 2, OR 3 SHOWING HOW MANY MSGS\n*        A USER HAS OUTSTANDING.\n*--------------------------------------------------------------------*\n         SPACE\n         LTR   R4,R4\n         BNZ   ALTCODE\n         AP    RECCNT,=P'1'\n         CP    RECCNT,=P'2'        TEST MID RANGE\n         BL    LINE1               LOWER\n         BH    LINE3               HIGHER\n         BE    LINE2               .MIDRANGE\nLINE1    EQU   *\n         MVC   MSGCNT1,MASK4\n         MVC   USERID1,USERID\n         ED    MSGCNT1,MSGCOUNT\n         B     ZAPCNT\n         SPACE\nLINE2    EQU   *\n         MVC   MSGCNT2,MASK4\n         MVC   USERID2,USERID\n         ED    MSGCNT2,MSGCOUNT\n         B     ZAPCNT\n         SPACE\nLINE3    EQU   *\n         MVC   MSGCNT3,MASK4\n         MVC   USERID3,USERID\n         ED    MSGCNT3,MSGCOUNT\n         LA    R9,USERLINE\n         BAL   R10,PRINT\n         MVC   MSGCNT2,=CL4' '\n         MVC   MSGCNT3,=CL4' '\n         MVC   USERID2,=CL7' '\n         MVC   USERID3,=CL7' '\n         ZAP   RECCNT,=P'0'\nZAPCNT   EQU   *\n         ZAP   MSGCOUNT,=P'0'\nNOMSG    EQU   *\n         LA    R3,13(R3)           BUMP TO NEXT ENTRY\n         BCT   R6,USRLOOP          REPEAT FOR NINE TIMES\n         SPACE\n*--------------------------------------------------------------------*\n*        END OF INNER LOOP\n*--------------------------------------------------------------------*\n         SPACE\n         FREEDBUF SCNECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         CLC   SAVERBA,=3X'00'     IS THIS LAST\n         BNE   INDEXLP             GO DO NEXT ONE\n         CP    RECCNT,=P'0'\n         BE    PUTUCNT\n         LA    R9,USERLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\nPUTUCNT  EQU   *\n         MVC   USERCNT,MASK7\n         ED    USERCNT,USERS       HOW MANY USERS ARE THERE\n         LA    R9,UTOTLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         L     R7,TYPETBLA              ONCE MORE THRU TYPETAB HD DEC97 018\nVERFLOOP EQU   *\n         CLI   0(R7),X'99'         END YET?\n         BE    ENDVERF\n         CLI   0(R7),X'03'         IS THIS STILL AN 03\n         LA    R7,1(R7)            BUMP EITHER WAY\n         BNE   VERFLOOP\n         AP    UNUSABL,=P'1'\n         B     VERFLOOP\n         SPACE\n*--------------------------------------------------------------------*\n*        END OF OUTER LOOP\n*--------------------------------------------------------------------*\n         SPACE\nENDVERF  EQU   *\n         MVC   UNUSDCNT,MASK4\n         ED    UNUSDCNT,UNUSABL+1\n         LA    R9,JUNKLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n*--------------------------------------------------------------------*\n*        TIME TO CLOSE AND END THE PROGRAM, BYE.\n*--------------------------------------------------------------------*\n         SPACE\nCLOSE    EQU   *\n         CLOSE (BRODCAST,,BRODMAP,,SNAP)\nFREETYP  DS    0H                                              HD DEC97 020\n         L     R1,TYPETBLA              ADDRESS OF TABLE       HD DEC97 020\n         LH    R0,HIGHVAL               LENGTH OF TABLE        HD DEC97 020\n         AH    R0,=H'1'                 INCREMENT BY ONE       HD DEC97 020\n         FREEMAIN RU,LV=(0),A=(1)       FREE TYPE TABLE        HD DEC97 020\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         SPACE\n*--------------------------------------------------------------------*\n*        THIS SUBROUTINE WAS THE IDEA OF THE BELOW AND THE CODE WAS\n*        LIFTED AND SLIGHTLY ALTERED TO FIT IN HERE.\n*\n*        P. A. MOTINL\n*        COMPUTING CENTRE\n*        J.R.C. - ISPRA ESTABLISHMENT\n*        21020 ISPRA (VA), ITALY\n*\n*        SNAP OUT THE UNKNOWN RECORD TYPE BELOW FOR US TO SEE.\n*--------------------------------------------------------------------*\n         SPACE\nSNAPUNK  EQU   *\n         MVC   SNAPBLK(130),0(R9)  MOVE TO AN ALIGNED AREA\n         LA    R15,SNAPBLK         GET ADDRESS OF RECORD TO SNAP\n         ST    R15,SNAPLST         STORE THE BEGIN ADDRESS\n         AL    R15,=F'130'         ADD RECORD LENGTH\n         ST    R15,SNAPLST+4       STORE ENDING ADDRESS\n         OI    SNAPLST+4,X'80'     INDICATE END OF LIST\n         LA    R11,SNAP            GET DCB ADDRESS\n         SPACE\n         SNAP  DCB=(R11),          DCB ADDRESS TO USE                  X\n               ID=1,               ID NUMBER FOR SNAP                  X\n               LIST=SNAPLST,       LIST OF ADDRESS TO USE              X\n               STRHDR=SNAPHD       HEADER TO PRINT\n         SPACE\n         LTR   R15,R15             WAS SNAP SUCCESSFUL?\n         BZ    SNAPOK\n         CVD   R15,CVDAREA         CONVERT ERROR CODE\n         MVC   SNERR+17(3),MASK3   MOVE IN A MASK\n         ED    SNERR+16(4),CVDAREA+6\n         ST    R15,CVDAREA\n         UNPK  SNERR+26(9),CVDAREA(5)\n         NC    SNERR+26(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    SNERR+26(8),=CL16'0123456789ABCDEF'\n         MVI   SNERR+34,C')'\n         SPACE\nSNAPOK   EQU   *\n         BR    R10                 RETURN TO WHENCE WE CAME\n         SPACE\n*--------------------------------------------------------------------*\n*        PRINT OUTPUT SUBROUTINE.\n*--------------------------------------------------------------------*\n         SPACE\nPRINT    EQU   *\n         PUT   BRODMAP,(R9)        WRITE FROM AREA ADDRESS IN R9\n         BR    R10                 RETURN TO WHENCE WE CAME\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA CONTROL BLOCKS FOLLOW.\n*--------------------------------------------------------------------*\n         SPACE\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=RISC,         3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE\nBRODMAP  DCB   DDNAME=BRODMAP,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\n         SPACE\nSNAP     DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,              X\n               LRECL=125,DDNAME=BRODSNAP\nBRODDUMP DCB   DSORG=PS,DDNAME=BRODDUMP,MACRF=PM,                      X\n               LRECL=130,RECFM=FB\n         LTORG\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA AREAS FOLLOW.\n*--------------------------------------------------------------------*\n         SPACE\nCVDAREA  DS    D\nSAVE     DC    18F'0'\nSNAPLST  DC    2F'0'               SNAP ADDRESS\nTYPETBLA DS    F       ADDRESS OF GETMAINED TYPE TABLE         HD DEC97\nHIGHVAL  DS    F\nSAVHDADR DS    F                   SAVE HEADER ADDRESS         SG MAY99\nZEROS    DC    XL7'00'             ZEROS\nHEXTAB   DC    CL16'0123456789ABCDEF'\n         DS    0F\nSNAPBLK  DS    0XL130\n         DC    130X'77'\n         DS    0F\nSNAPHD   DC    A(SNAPHDR)\nSNAPHDR  DC    AL1(L'SNAPHDT)\nSNAPHDT  DC    C'B R O A D C A S T -- DUMP OF A BLOCK READ.'\nSNERR    DC    CL79'  ---> SNAP RC =     (R15=        )'\nBLOCKNO  DC    X'000000'           BLOCK NUMBERS\nSAVERBA  DS    CL3                 SAVE LOCAL OF USER INDEX\nMSGNUM   DS    CL3                 SAVE LOCAL OF USER INDEX\nMASK3    DC    XL3'202120'\nMASK4    DC    XL4'40202120'\nMASK7    DC    XL7'4020206B202120'\nRECCNT   DC    PL1'0'\nMSGCOUNT DC    PL2'0'\nNOTDIR   DC    PL3'0'              CT FOR NOTICE DIRECTORY RECS\nUSRIND   DC    PL3'0'              CT FOR USER MAIL DIRECTORY RECS\nNOTMSG   DC    PL3'0'              CT FOR NOTICE MSG RECS\nUSRMSG   DC    PL3'0'              CT FOR USER MAIL MSG RECS\nPTRMSG   DC    PL3'0'              CT FOR POINTER REC (ALWAYS 1) JDM1\nREC04    DC    PL3'0'              CT FOR MASTER REC (ALWAYS 1)  JDM0\nFREEREC  DC    PL3'0'              CT FOR INACTIVE MAIL MSG RECS\nUNUSABL  DC    PL3'0'\nUSERS    DC    PL3'0'\nTYPE00   DC    CL50'NUMBER OF BRODCAST \"NOTICES\" DIRECTORY RECORDS'\nTYPE01   DC    CL50'NUMBER OF USER \"MAIL\" DIRECTORY RECORDS'\nTYPE02   DC    CL50'NUMBER OF BRODCAST \"NOTICES\" MESSAGE RECORDS'\nTYPE03   DC    CL50'NUMBER OF USER \"MAIL\" MESSAGE RECORDS'\nTYPE04   DC    CL50'COUNT OF 1ST REC OF BRODCAST (SHOULD BE 1)'  JDM0\nTYPE05   DC    CL50'COUNT OF FREE SEARCH RECORD (SHOULD BE 1)'    JDM1\nTYPEFF   DC    CL50'NUMBER OF DUMMY INACTIVE \"MAIL\" MSG RECORDS'\nODDKEY   DC    CL133'  ** UNKNOWN KEY TYPE ENCOUNTERED :    **'\nTABLERR  DC    CL133'  ** TABLE IS OUT OF SYNC WITH MY REALITY **'\nBREAKOUT DC    CL133'0< THE FOLLOWING KEY BREAKDOWN WAS FOUND >'\nUSERSOUT DC    CL133'0< THE FOLLOWING USERS HAVE MESSAGES WAITING >'\nUSERID   DS    CL7\nSAVEREGA DS    F'0'                                            SG 05/99\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nKEYCOUNT DS    0CL133\n         DC    CL10' '\nKEYTYPE  DC    CL50'HEADER RECORDS'\nKEYCNT   DC    CL7'      1'\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nMAXIMUM  DS    0CL133\n         DC    CL60'1TOTAL AVAILABLE BLOCKS IN DATASET'\nMAXCNT   DS    CL7\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nNOTICES  DS    0CL133\n         DC    CL63' BLOCKS NECESSARY FOR BROADCST MSGS (DIRECTORY/MESSX\n               AGES)'\nNOTCNT   DS    CL4\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nUSERLINE DS    0CL133\n         DC    CL10' '\nUSERID1  DS    CL7\n         DC    CL5' '\nMSGCNT1  DS    CL4\n         DC    CL10' '\nUSERID2  DS    CL7\n         DC    CL5' '\nMSGCNT2  DS    CL4\n         DC    CL10' '\nUSERID3  DS    CL7\n         DC    CL5' '\nMSGCNT3  DS    CL4\n         DC    CL55' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nUTOTLINE DS    0CL133\n         DC    CL60' NUMBER OF TSO USERS DEFINED IN DATASET'\nUSERCNT  DS    CL7\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nJUNKLINE DS    0CL133\n         DC    CL63'0BLOCKS FOUND TO BE GARBAGED'\nUNUSDCNT DS    CL4\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nOUTZERO  DC    XL130'00'          ZERO RECORD\nOUTREC   DS    0CL130             DUMP RECORD\nOUTKEY   DC    XL1'00'            KEY SLOT\nOUTDATA  DC    XL129'00'          DATA SLOT\n         SPACE\n*\n*--------------------------------------------------------------------*\n         SPACE\n         EJECT\n*----------------------------------------------------------------*\n*        THE FOLLOWING IS TAKEN FROM AN OLD MVS MANUAL CALLED\n*        \"OS/VS2 MVS CONVERSION NOTEBOOK\" (GC28-0689-6) AND\n*        CONTAINS THE FOLLOWING REFERENCE TO HOW THE BROADCAST\n*        HAS CHANGED FROM OS/MVT AND SVS TO MVS:\n*\n*        'MODIFIED TO INCLUDE A CHANGE LEVEL INDICATOR IN THE\n*        HEADER RECORD AND A NEW FIELD FOR EACH USER ID IN THE\n*        MAIL DIRECTORY RECORDS. THIS FIELD CONTAINS THE\n*        ADDRESS OF THE LAST MESSAGE IN THE CHAIN OF MESSAGES\n*        ASSOCIATED WITH EACH NEW USER.'\n*\n*        NOTE: UNTIL I CAN DUMP RECORDS AND FIGURE OUT WHERE THE\n*              ABOVE STATEMENTS FIT INTO THE DSECTS BELOW, WILL\n*              LET IT TO THE READER TO HELP AND GET IT FIGURED\n*              OUT BEFORE I DO.\n*\n*----------------------------------------------------------------*\n         SPACE\n         IEZBITS\n         SPACE\n         IKJZT301\n         SPACE\n         IKJZT302\n         SPACE\n         IKJZT303\n         SPACE\n         IKJZT304\n         SPACE\n         IKJZT305\n         SPACE\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMDUMP$": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x12\\x9f\\x00\\x99\\x12\\x9f\\x15&\\x00\\x0b\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-05-09T00:00:00", "modifydate": "1999-05-09T15:26:00", "lines": 11, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//BCMDUMP  EXEC PGM=BCMDUMP,REGION=3M\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//BRODMAP  DD  SYSOUT=A,DCB=BLKSIZE=133\n//BRODSNAP DD  SYSOUT=A\n//BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR\n//BRODDUMP DD  DISP=(NEW,CATLG,DELETE),DSN=SBGOLOB.BRODCAST.DUMP,\n//         DCB=(RECFM=FB,LRECL=130,BLKSIZE=27950),\n//         SPACE=(TRK,(60,30),RLSE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMEXPN$": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x13o\\x00\\x99\\x13o\\x18V\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-05-16T00:00:00", "modifydate": "1999-05-16T18:56:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBR  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//BCMEXPND EXEC PGM=BCMEXPND,REGION=3M\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//BRODCAST DD  DSN=SBGOLOB.BRODCAST.COPY,DISP=(NEW,CATLG,DELETE),\n//         DCB=(DSORG=DA,RECFM=FB,BLKSIZE=129,KEYLEN=1,LRECL=129),\n//         SPACE=(TRK,(120,30),RLSE),UNIT=SYSDA   <== ONLY USES PRIMARY\n//BRODDUMP DD  DISP=SHR,DSN=SBGOLOB.BRODCAST.DUMP\n//SYSPRINT DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMEXPND": {"ttr": 4620, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00!\\x00\\x99\\x13o\\x01\\x06\\x01_\\x135\\x03\\x02\\x02\\x9a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1999-05-16T00:00:00", "modifydate": "2006-01-15T13:35:21", "lines": 770, "newlines": 666, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMEXPND TITLE 'BCMEXPND - RESTORE BRODCAST DATASET FROM A BCMDUMP'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS A BATCH PROGRAM TO RESTORE A      *\n*                   COPY OF SYS1.BRODCAST FROM A BCMDUMP BACKUP.      *\n*                   THE SPACE IN THE COPY CAN BE EXPANDED TO THE      *\n*                   PRIMARY SPACE ALLOCATION OF THE \"RESTORE\"         *\n*                   DATASET IN THE JCL.                               *\n*                                                                     *\n*          THIS PROGRAM TRIES TO RESTORE A COPY OF SYS1.BRODCAST      *\n*          IN SUCH A WAY, SO IT WILL BE USABLE, IF RENAMED TO         *\n*          SYS1.BRODCAST.  THEREFORE, THE PROGRAM ONLY ALLOWS ONE     *\n*          EXTENT.  IF YOU ALLOCATE SECONDARY EXTENTS IN YOUR         *\n*          CREATION JCL (AS ILLUSTRATED BELOW), THEY WILL BE          *\n*          IGNORED.  THIS PROGRAM WILL EXPAND YOUR SYS1.BRODCAST      *\n*          COPY TO THE END OF THE FIRST EXTENT THAT YOU HAVE          *\n*          ALLOCATED.  ANY SPACE THAT'S EXTRA, IS FILLED IN WITH      *\n*          BLANK USER MESSAGE RECORDS.  THIS WAY, YOU CAN EXPAND      *\n*          AN EXISTING SYS1.BRODCAST, WITH ALL THE DATA IN IT,        *\n*          BY RUNNING BCMDUMP TO GET THE DATA INTO A FLAT FILE,       *\n*          AND RUNNING BCMEXPND AGAINST THE FLAT FILE, TO RELOAD      *\n*          ALL THE DATA INTO A LARGER DATASET.  THEN IT CAN BE        *\n*          RENAMED TO SYS1.BRODCAST, AND YOU CAN IPL, POINTING        *\n*          TO IT.  THE \"TOTAL NUMBER OF RECORDS\" FIELD IN THE         *\n*          SYS1.BRODCAST HEADER, IS ADJUSTED TO REFLECT THE NEW       *\n*          NUMBER OF RECORDS IN THE DATASET.                          *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   TO RESTORE A SYS1.BRODCAST DATASET OR A COPY      *\n*                   IN THE SAME FORMAT, FROM A BCMDUMP FB-130 FILE,   *\n*                   AND EXPAND IT INTO A LARGER SPACE, INCREASING     *\n*                   THE NUMBER OF AVAILABLE MESSAGE RECORDS IT HAS.   *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.3            *\n*                                                                     *\n*            DATE:  MAY 16, 99                                        *\n*                                                                     *\n*                                                                     *\n*       JCL TO INVOKE:                                                *\n*                                                                     *\n* //BCMEXPND EXEC PGM=BCMEXPND,REGION=3M                              *\n* //STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD                            *\n* //BRODCAST DD  DSN=SBGOLOB.BRODCAST.COPY,DISP=(NEW,CATLG,DELETE),   *\n* //         DCB=(DSORG=DA,RECFM=FB,BLKSIZE=129,KEYLEN=1,LRECL=129),  *\n* //         SPACE=(TRK,(120,30),RLSE),UNIT=SYSDA                     *\n* //*                  ==== >  SECONDARY SPACE IS IGNORED.            *\n* //BRODDUMP DD  DISP=SHR,DSN=SBGOLOB.BRODCAST.DUMP                   *\n* //SYSPRINT DD  SYSOUT=*                                             *\n*                                                                     *\n*                                                                     *\n*         CHANGES:                                                    *\n*                                                                     *\n*    26 AUG 2005 - WHEN ALLOCATED SPACE IS EXACTLY RIGHT, MAKE SURE   *\n*                  THAT YOU COME TO A NORMAL END, AND REPORT IT       *\n*                  CORRECTLY.  ALSO, REPORT RETURN CODE OF 8 IF       *\n*                  THE ALLOCATED SPACE FOR THE RESTORED BRODCAST      *\n*                  DATASET IS TOO SMALL.                              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMEXPND CSECT\n         USING BCMEXPND,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMEXPND VER 1.3'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD FIRST BASE REG\n         LA    R10,4095(,R12)      INITIALIZE SECOND BASE      SG 05/99\n         LA    R10,1(,R10)         FINISH LOADING SECOND BASE  SG 05/99\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         SPACE 1\nDOBROD   OPEN  (BRODCAST,(OUTPUT))                             SG 05/99\n         OPEN  (BRODDUMP,(INPUT))                              SG 05/99\n         OPEN  (SYSPRINT,(OUTPUT))                             SG 05/99\n         BAL   R9,HEADREAD         READ HEADER RECORD OF BCMDUMP FILE\n*                                  AND EXTRACT ESSENTIAL DATASET INFO\n*                                  FOR THE RESTORE.................\n         L     R11,HIGHVAL         SAVE TOTAL RECORD COUNT     SG 05/99\n         CVD   R11,CVDWORK         CONVERT TO DECIMAL          SG 05/99\n         MVC   STORNUM1,CVDWORK    STORE AWAY FOR REPORTING    SG 05/99\n         BCTR  R11,0               LOWER BY HEADREAD WRITE     SG 05/99\n         BAL   R9,OUTHEADR         WRITE SYSPRINT HEADER       SG 05/99\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO LOAD ALL THE BRODCAST RECORDS.             --- *\n* ------------------------------------------------------------------ *\nLOADBRD  DS    0H                  READ THROUGH USERID RECORDS\n         GET   BRODDUMP,INREC      GET THE FIRST RECORD OF DUMP\nLOADBRDX L     R7,RECONTRK         INCREMENT                   SG 05/99\n         LA    R7,1(,R7)            THE                        SG 05/99\n         ST    R7,RECONTRK           COUNT                     SG 05/99\n         L     R7,NUMBREC          INCREMENT                   SG 05/99\n         LA    R7,1(,R7)            THE                        SG 05/99\n         ST    R7,NUMBREC            COUNT                     SG 05/99\n*  DELETED USER MESSHAGE RECORDS X'FF' IN THE KEY FIELD, HAVE  SG 05/99\n*  TO HAVE THE \"R\" PART OF THE RECORD'S TTR OR CCHHR INSERTED  SG 05/99\n*  INTO THE FIRST DATA BYTE OF THE RECORD.  IF THIS IS NOT     SG 05/99\n*  DONE, THE TSO SEND COMMAND GOES HAYWIRE.  FOR THIS REASON,  SG 05/99\n*  WHEN COPYING SYS1.BRODCAST BETWEEN TWO DIFFERENT DEVICE     SG 05/99\n*  TYPES, THIS VALUE HAS TO BE FILLED IN FOR THE CURRENT       SG 05/99\n*  DEVICE TYPE, OTHERWISE IT WILL GO OUT OF SYNCHRONIZATION.   SG 05/99\n         CLI   INREC,X'FF'         IS THIS A DELETED RECORD?   SG 05/99\n         BNE   GOWRITE             NO, DON'T HAVE TO PUT REC # SG 05/99\n         MVC   INREC+1(1),RECONTRK+3   MOVE IN RECORD NUMBER   SG 05/99\nGOWRITE  DS    0H                                              SG 05/99\n         WRITE MDLDECB,SF,BRODCAST,INREC,'S',MF=E              SG 05/99\n         C     R15,=F'8'           CHECK IF END OF EXTENT      SG 05/99\n         BNE   GOSKIP1             NO. TRY IF END OF TRACK     SG 05/99\n         CLI   EOJFLAG,X'F0'       ARE WE EXTENDING?           SG 05/99\n         BE    GOEOJ1              YES. INDICATE EXTENDING.    SG 05/99\n         MVI   EOJFLAG,X'FF'       OTHERWISE, PRELIMINARY END  SG 05/99\nGOEOJ1   B     ENDCHECK            FINISH PREMATURELY BUT CHECK WRITE\nGOSKIP1  C     R15,=F'4'           CHECK IF END OF TRACK       SG 05/99\n         BNE   GOCHECK             NO. STILL IN MID OF TRACK   SG 05/99\n         CVD   R7,CVDWORK          CONVERT LAST TRACK NUMBER   SG 05/99\n         CP    STORNUM2,=P'0'      NONZERO NUMBER?             SG 05/99\n         BNE   GOSKIP2             YES. ONLY DO IT ONCE        SG 05/99\n         MVC   STORNUM2,CVDWORK    STORE IT AWAY               SG 05/99\nGOSKIP2  XR    R7,R7               ZERO REGISTER               SG 05/99\n         ST    R7,RECONTRK         RE-INITIALIZE REC/TRK       SG 05/99\nGOCHECK  DS    0H                                              SG 05/99\n         CHECK MDLDECB                                         SG 05/99\n         CLI   EOJFLAG,X'F0'       ARE WE EXTENDING?           SG 05/99\n         BE    LOADEXT             YES, SKIP PREVIOUS COUNTING SG 05/99\n         BCT   R11,LOADBRD         CYCLE THROUGH ALL RECORDS   SG 05/99\n* ------------------------------------------------------------------ *\n*    AFTER OLD RECORDS ARE LOADED, FILL SPACE TO END OF EXTENT.      *\n* ------------------------------------------------------------------ *\nLOADEXT  MVC   INREC(130),ZERMSGR  INSTEAD OF GET, MOVE IN     SG 05/99\n*                               NULL MESSAGE RECORD AND GO ON  SG 05/99\n*                               WITH PROCESSING UNTIL RC=8.    SG 05/99\n         CLI   EOJFLAG,X'F0'       ARE WE EXTENDING?           SG 05/99\n         BE    LOADBRDX            YES, SKIP PREVIOUS COUNTING SG 05/99\n         MVI   EOJFLAG,X'F0'       SPECIAL FLAG, ON 1ST PASS   SG 05/99\n         B     LOADBRDX            GO ON WITH LOADING AS USUAL SG 05/99\n* ------------------------------------------------------------------ *\nENDCHECK DS    0H                  CHECK RECORD LAST WRITTEN.\n         CHECK MDLDECB\nEOJ      DS    0H                  BYE.\n         L     R7,NUMBREC          REPORT NUMBER OF RECORDS    SG 05/99\n         CVD   R7,CVDWORK            WHICH WERE ACTUALLY       SG 05/99\n         MVC   STORNUM3,CVDWORK        LOADED.                 SG 05/99\n* -- >\n         CLC   STORNUM3,STORNUM1   WAS IT EXACT?\n         BNE   PRELMEND            NO. REAL PRELIMINARY END\n         MVI   EOJFLAG,X'00'       ACTUALLY OK.  MARK NORMAL END.\nPRELMEND DS    0H\n* -- >\n         BAL   R9,FINALRPT         PRINT THE FINAL REPORT      SG 05/99\n         CLI   EOJFLAG,X'FF'       ABNORMAL END ?              SG 05/99\n         BNE   EOJGO0              NO. PRINT THAT IT'S NORMAL  SG 05/99\n         BAL   R9,EOJPREL          YES. PRINT DIAGNOSTICS,     SG 05/99\n         B     EOJGO2              AND SKIP NORMAL.            SG 05/99\nEOJGO0   DS    0H                  NORMAL END.                 SG 05/99\n         CLI   EOJFLAG,X'F0'       DID WE EXTEND THE DATASET?  SG 05/99\n         BNE   EOJGO1              NO. INDICATE NORMAL END.    SG 05/99\n         BAL   R9,EOJEXTND         YES. PUT OUT EXTEND MSGS.   SG 05/99\n         BAL   R9,HEADUPDT         UPDATE HEADER FOR RECD CNT  SG 05/99\n         B     EOJGO2              AND SKIP NORMAL.            SG 05/99\nEOJGO1   DS    0H\n         BAL   R9,EOJNORM          PUT OUT MESSAGE FOR NORMAL  SG 05/99\nEOJGO2   DS    0H\n         CLI   EOJFLAG,X'FF'       PRELIMINARY END OF LOAD ?\n         BNE   EOJGO2A             NO. SET RC = 0\n         LA    R5,8                YES. SET RC = 8 AND SAVE IN R5\n         B     EOJGO2B\nEOJGO2A  DS    0H\n         LA    R5,0                SAVE RC IN R5 PAST FREEMAIN\nEOJGO2B  DS    0H\n         CLOSE (BRODCAST)\n         CLOSE (BRODDUMP)\n         CLOSE (SYSPRINT)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\nEOJGO3   DS    0H\n         LR    R15,R5              LOAD RETURN CODE INTO R15\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         LM    R14,R12,12(R13)\nEOJN     BR    R14\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD GET   BRODDUMP,INREC      GET THE FIRST RECORD OF DUMP\n         L     R7,=F'1'            SHOW IT'S THE FIRST         SG 05/99\n         ST    R7,RECONTRK           RECORD IN THE TRACK       SG 05/99\n         SPACE\n         LA    R3,INREC+1          INFO THAT SHOULD BE ON HEADER\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   HIGHVAL(4),R1RECNUM  SAVE NUMBER OF RECDS IN BRODCAST\n         L     R7,NUMBREC          INCREMENT                   SG 05/99\n         LA    R7,1(,R7)            THE                        SG 05/99\n         ST    R7,NUMBREC            COUNT                     SG 05/99\n         WRITE MDLDECB,SF,BRODCAST,INREC,'S',MF=E              SG 05/99\n         CHECK MDLDECB                                         SG 05/99\n         DROP  R3\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   PRINT INSTRUCTIONS AND OTHER INFORMATION AT THE BEGINNING     *\n*   OF THE PROGRAM EXECUTION.                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nOUTHEADR DS    0H                                              SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),NEWPAGE         PAGE EJECT CHARACTER SG 05/99\n         MVC   OUTLINE+10(60),SYSMSG01     PRINT HEADER        SG 05/99\n         PUT   SYSPRINT,OUTLINE            DO PRINT            SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+10(49),SYSMSG02     PRINT UNDERLINES    SG 05/99\n         PUT   SYSPRINT,OUTLINE            DO PRINT            SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3              SG 05/99\n         PUT   SYSPRINT,OUTLINE            ACTUALLY SKIP 6     SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG03     PUT OUT DOC         SG 05/99\n         PUT   SYSPRINT,OUTLINE             INSTRUCTIONS.      SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG04     (A BUNCH OF LINES)  SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG05                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG06                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG07                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG08                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG09                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG10                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3 LINES,       SG 05/99\n         PUT   SYSPRINT,OUTLINE            PREPARING FOR       SG 05/99\n         BR    R9                          FINAL REPORT.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    NORMAL END OF JOB.  ALL RECORDS LOADED PROPERLY.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJNORM  DS    0H                                              SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG15      PUT OUT NORMAL EOJ  SG 05/99\n         PUT   SYSPRINT,OUTLINE            MESSAGE.            SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    ABNORMAL END.  PROBABLY NOT ENOUGH PRIMARY SPACE ALLOCATED   *\n*    TO FIT IN ALL THE RECORDS FROM THE COPIED SYS1.BRODCAST,     *\n*    INTO THE FIRST EXTENT.  THIS CODE REPORTS ON HOW MANY        *\n*    RECORDS WERE ACTUALLY LOADED, AND ON EXACTLY HOW MANY        *\n*    TRACKS HAVE TO BE ALLOCATED IN THE FIRST EXTENT, SO THE      *\n*    COPY WILL BE ABLE TO FUNCTION AS A NEW SYS1.BRODCAST         *\n*    DATASET.                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJPREL  DS    0H                     PUT OUT 'SPACE' MESSAGES SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG16    MOVE MESSAGE TEXT     SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG17    MOVE MESSAGE TEXT     SG 05/99\n         OI    STORNUM4+7,X'0F'          MOVE IN REQUIRED      SG 05/99\n         UNPK  OUTLINE+40(8),STORNUM4      NUMBER OF TRACKS    SG 05/99\n         BAL   R5,STRIPZ1                STRIP LEADING ZEROS   SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG18    MOVE MESSAGE TEXT     SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJEXTND DS    0H                     PUT OUT 'SPACE' MESSAGES SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG19    MOVE MESSAGE TEXT     SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG20    MOVE MESSAGE TEXT     SG 05/99\n         OI    STORNUM4+7,X'0F'          MOVE IN REQUIRED      SG 05/99\n         UNPK  OUTLINE+42(8),STORNUM4      NUMBER OF TRACKS    SG 05/99\n         BAL   R5,STRIPZ2                STRIP LEADING ZEROS   SG 05/99\n         OI    STORNUM3+7,X'0F'          MOVE IN REQUIRED      SG 05/99\n         UNPK  OUTLINE+19(8),STORNUM6      NUMBER OF RECORDS   SG 05/99\n         BAL   R5,STRIPZ3                STRIP LEADING ZEROS   SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG18    MOVE MESSAGE TEXT     SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    REPORT STATISTICS ON NUMBER OF RECORDS EXPECTED, NUMBER OF   *\n*    RECORDS ACTUALLY LOADED, NUMBER OF RECORDS PER TRACK, THAT   *\n*    WERE DETERMINED FOR THIS DEVICE TYPE, AND ACTUAL NUMBER OF   *\n*    TRACKS ON THIS DEVICE WHICH WERE NEEDED TO ACCOMMODATE ALL   *\n*    THE RECORDS FROM THE COPIED SYS1.BRODCAST DATASET.           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFINALRPT DS    0H                                              SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3              SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG11      NUMBER OF RECORDS   SG 05/99\n         OI    STORNUM1+7,X'0F'              EXPECTED          SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM1                          SG 05/99\n         BAL   R5,STRIPZ                   REMOVE LEADING ZROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG12      NUMBER OF RECORDS   SG 05/99\n         OI    STORNUM3+7,X'0F'              ACTUALLY LOADED   SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM3                          SG 05/99\n         BAL   R5,STRIPZ                   STRIP LEADING ZEROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG13      NUMBER OF RECORDS   SG 05/99\n         OI    STORNUM2+7,X'0F'              THAT FIT ONTO ONE SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM2          TRACK.          SG 05/99\n         BAL   R5,STRIPZ                   STRIP LEADING ZEROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG14      NUMBER OF TRACKS    SG 05/99\n         CLI   EOJFLAG,X'F0'                                   SG 05/99\n         BE    FINGO1                                          SG 05/99\n         MVC   STORNUM6(8),STORNUM1                            SG 05/99\n         MVC   STORWRK1(4),=X'00000000'    CLEAR UPPER ORDER OF BIG #\n         MVC   STORWRK1+4(8),STORNUM1      LOAD SMALL # INTO BIG #\n         DP    STORWRK1+3(9),STORNUM2+5(3)   TO BE ALLOCATED\n         MVC   STORNUM4+3(5),STORWRK1+4        SO THAT ALL\n         MVC   STORNUM5+5(3),STORWRK1+9          RECORDS FIT\n         B     FINGO2                                          SG 05/99\nFINGO1   MVC   STORNUM6(8),STORNUM3                            SG 05/99\n         MVC   STORWRK2(4),=X'00000000'    CLEAR UPPER ORDER OF BIG #\n         MVC   STORWRK2+4(8),STORNUM3      LOAD SMALL # INTO BIG #\n         DP    STORWRK2+3(9),STORNUM2+5(3)   TO BE ALLOCATED\n         MVC   STORNUM4+3(5),STORWRK2+4        SO THAT ALL\n         MVC   STORNUM5+5(3),STORWRK2+9          RECORDS FIT\nFINGO2   CP    STORNUM5,=P'0'                      EXACTLY.    SG 05/99\n         BE    FINOADD                     CALCULATE NUMBER.   SG 05/99\n         AP    STORNUM4,=P'1'                                  SG 05/99\nFINOADD  MVC   OUTLINE+9(49),SYSMSG14                          SG 05/99\n         OI    STORNUM4+7,X'0F'                                SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM4      REPORT THE NUMBER.  SG 05/99\n         BAL   R5,STRIPZ                   STRIP LEADING ZEROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT RECORD      SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   ROUTINE TO STRIP LEADING ZEROS.  I'M DOING THIS TO AVOID A    *\n*   POSSIBLE OCCASION FOR A S0C7, WHICH CAN HAPPEN WHEN YOU DO    *\n*   AN ED INSTRUCTION THAT FAILS. UNPK DOESN'T HAVE THIS PROBLEM. *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSTRIPZ2  DS    0H                                              SG 05/99\n         LA    R11,7                                           SG 05/99\n         LA    R4,OUTLINE+42                                   SG 05/99\n         B     STRIPZL                                         SG 05/99\nSTRIPZ3  DS    0H                                              SG 05/99\n         LA    R11,7                                           SG 05/99\n         LA    R4,OUTLINE+19                                   SG 05/99\n         B     STRIPZL                                         SG 05/99\nSTRIPZ1  DS    0H                                              SG 05/99\n         LA    R11,7                                           SG 05/99\n         LA    R4,OUTLINE+40                                   SG 05/99\n         B     STRIPZL                                         SG 05/99\nSTRIPZ   DS    0H                                              SG 05/99\n         LA    R11,7                                           SG 05/99\n         LA    R4,OUTLINE+62                                   SG 05/99\nSTRIPZL  CLC   0(1,R4),=C'0'                                   SG 05/99\n         BNE   STRIPZE                                         SG 05/99\n         MVI   0(R4),X'40'                                     SG 05/99\n         LA    R4,1(,R4)                                       SG 05/99\n         BCT   R11,STRIPZL                                     SG 05/99\nSTRIPZE  BR    R5                                              SG 05/99\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ AND UPDATE HEADER RECORD FOR NUMBER OF RECORDS      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADUPDT DS    0H                                              SG 05/99\n         OPEN  (BRODCASI,(UPDAT))\n         READ  MDIDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCASI,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDIDECB\n         L     R3,MDIDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         CVB   R7,STORNUM6         GET NUMBER OF RECORDS LOADED\n         ST    R7,R1RECNUM         MOVE NEW NUMBER INTO HEADER RECORD\n         DROP  R3\n         WRITE MDIDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCASI,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDIDECB\n         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCASI            DCB FOR PROCESS DATA SET\n         CLOSE (BRODCASI)                                      SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+10(60),SYSMSG21     PRINT MESSAGE       SG 05/99\n         PUT   SYSPRINT,OUTLINE            DO PRINT            SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   LEVEL(7),BLANKS\n         MVI   OUTLINE-1,C' '        INITIALIZE BLANK\n         MVC   OUTLINE(133),OUTLINE-1  BLANK SYSPRINT OUTPUT AREA\n         MVC   HIGHVAL(4),ZERRECX    ZERO OUT HIGHVAL COUNT    SG 05/99\n         MVC   NUMBREC(4),ZERRECX    ZERO OUT RECORD COUNTER   SG 05/99\n         MVC   INREC-2(2),ZERRECX    INITIALIZE INPUT AREA    SG 05/99\n         MVC   INREC(130),ZERRECX    INITIALIZE INPUT AREA    SG 05/99\n         MVC   INHDR(130),ZERRECX    INITIALIZE HEADER AREA   SG 05/99\n         MVI   RC15,X'00'            RETURN CODE AREA          SG 05/99\n         MVI   EOJFLAG,X'00'                                   SG 05/99\n         ZAP   STORNUM1,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM2,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM3,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM4,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM5,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM6,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM7,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM8,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         MVC   RECONTRK(4),ZERRECX   COUNTER FOR RECORD NUMBER SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nZERRECX  DS    0CL130                                          SG 05/99\n         DC    130X'00'                                        SG 05/99\nBLANKS   DC    C'        '         8 BLANKS\nZERMSGR  DS    0CL130                                          SG 05/99\nZERMKEY  DC    XL1'FF'                                         SG 05/99\nZERMREC  DC    XL129'00'                                       SG 05/99\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nNEWPAGE  DC    C'1'\nNEXTLIN  DC    C' '\nTWOLINE  DC    C'0'\nTHRLINE  DC    C'-'\nNOLINE   DC    C'+'\nSYSMSG01 DC    C'            SYS1.BRODCAST RESTORE PROGRAM  -  VERSION X\n               1.3   '\nSYSMSG02 DC    C'            ------------- ------- -------        '\nSYSMSG03 DC    C'THIS PROGRAM CREATES A COPY OF THE SYS1.BRODCAST '\nSYSMSG04 DC    C'DATASET, FROM A BCMDUMP FILE, WHICH WAS CREATED  '\nSYSMSG05 DC    C'FROM SYS1.BRODCAST, OR ANOTHER COPY OF IT.  THE  '\nSYSMSG06 DC    C'RESTORED DATASET SHOULD RESIDE IN ONE EXTENT.    '\nSYSMSG07 DC    C'THIS PROGRAM CAN COPY SYS1.BRODCAST ACROSS DEVICE'\nSYSMSG08 DC    C'TYPES OF DIFFERENT GEOMETRY, AND WILL REPORT ON  '\nSYSMSG09 DC    C'HOW MANY TRACKS, EXACTLY, SHOULD BE USED FOR THE '\nSYSMSG10 DC    C'ALLOCATION OF THE OUTPUT DATASET.                '\nSYSMSG11 DC    C'EXPECTED NUMBER OF RECORDS IN COPY-FROM HEADER  :'\nSYSMSG12 DC    C'NUMBER OF RECORDS ACTUALLY LOADED INTO THE COPY :'\nSYSMSG13 DC    C'NUMBER OF RECORDS PER TRACK FOR THIS DEVICE TYPE:'\nSYSMSG14 DC    C'EXPECTED NUMBER OF TRACKS TO BE ALLOCATED       :'\nSYSMSG15 DC    C'  LOADING ACTION COMPLETED SUCCESSFULLY .        '\nSYSMSG16 DC    C'LOADING INTERRUPTED UNEXPECTEDLY....             '\nSYSMSG17 DC    C'PLEASE RERUN, AND ALLOCATE                TRACKS '\nSYSMSG18 DC    C' IN A SINGLE EXTENT.                             '\nSYSMSG19 DC    C'BRODCAST COPY EXPANDED SUCCESSFULLY.  IT NOW     '\nSYSMSG20 DC    C'CONTAINS             RECORDS ON           TRACKS '\nSYSMSG21 DC    C'  HEADER RECORD UPDATED SUCCESSFULLY.            '\nMASK4    DC    XL4'40202120'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL10'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=PS,           SEQUENTIAL....                      X\n               MACRF=(WL),         LOAD OF BDAM FILE                   X\n               RECFM=F,            FIXED LENGTH                        X\n               KEYLEN=1            SIZE OF KEY\nBRODDUMP DCB   DSORG=PS,DDNAME=BRODDUMP,MACRF=GM,EODAD=EOJ,            X\n               RECFM=FB,LRECL=130\nBRODCASI DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\n         SPACE\n         SPACE 3\n         LTORG\n         SPACE\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nHIGHVAL  DS    F                   NUMBER OF RECORDS IN BRODCAST\nNUMBREC  DS    F                   COUNT OF RECORDS LOADED\nRECONTRK DS    F                   COUNT RECORDS ON THIS TRACK\nRC15     DS    C                   STORE RETURN CODE FROM WRITE\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\n         DS    0F                  ALIGN ON FULLWORD\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\nINHDR    DS    CL130                                           SG 05/99\n         DS    XL2                                             SG 05/99\nINREC    DS    CL130                                           SG 05/99\n         DS    0F\nWRTWR    WRITE MDLDECB,SF,MF=L\nWRTWREND DS    0F\nWRTWRLEN EQU   *-WRTWR\nRDWR     READ  MDIDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nEOJFLAG  DS    X\n         DS    CL1                                             SG 05/99\nOUTLINE  DS    CL133                                           SG 05/99\n         DS    CL9                 FILLER                      SG 05/99\n         DS    0D                                              SG 05/99\nCVDWORK  DS    D                   YOU NEED DBLWORD ALIGNMENT  SG 05/99\nSTORNUM1 DS    PL8                   HERE, BECAUSE OF THE      SG 05/99\nSTORNUM2 DS    PL8                     CVB INSTRUCTION NEAR    SG 05/99\nSTORNUM3 DS    PL8                       LABEL HEADUPDT.       SG 05/99\nSTORNUM4 DS    PL8                                             SG 05/99\nSTORNUM5 DS    PL8                                             SG 05/99\nSTORNUM6 DS    PL8                                             SG 05/99\nSTORNUM7 DS    PL8                                             SG 05/99\nSTORNUM8 DS    PL8                                             SG 05/99\nSTORWRK1 DS    PL12\nSTORWRK2 DS    PL12\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMISPF": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x18\\x7f\\x01\\x01\\x18\\x7f\\x10(\\x03\\x11\\x03\\x11\\x00\\x00\\xe5\\xc9\\xd5\\xc8\\xe5\\xe4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-07-06T00:00:00", "modifydate": "2001-07-06T10:28:00", "lines": 785, "newlines": 785, "modlines": 0, "user": "VINHVU"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "BCMISPFI": {"ttr": 5381, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x10\\x7f\\x01\\x04\\x10\\x7f\\x12I\\x02\\xfe\\x02\\xfe\\x00\\x00\\xe5\\xc9\\xd5\\xc8\\xe5\\xe4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-16T00:00:00", "modifydate": "2004-04-16T12:49:00", "lines": 766, "newlines": 766, "modlines": 0, "user": "VINHVU"}, "text": "./ ADD NAME=BCMPNL1  0199-83139-01187-0752-00065-00019-00000-NMVV1\n)ATTR\n % TYPE(TEXT)   CAPS(OFF)\n # TYPE(INPUT)  CAPS(ON)   COLOR(RED) HILITE(USCORE)\n | TYPE(INPUT)  CAPS(ON)   COLOR(RED)\n + TYPE(TEXT)   INTENS(LOW)   CAPS(OFF)  COLOR(WHITE) SKIP(ON)\n \u00a6 TYPE(OUTPUT) CAPS(OFF)  COLOR(WHITE)\n ! TYPE(TEXT)   CAPS(OFF)  COLOR(YELLOW)\n @ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF)  COLOR(TURQ) JUST(RIGHT)\n } TYPE(OUTPUT) JUST(LEFT)  CAPS(OFF)  COLOR(TURQ)\n \u00a2 TYPE(OUTPUT) JUST(LEFT)  CAPS(OFF)  COLOR(GREEN) JUST(RIGHT)\n \u00ac TYPE(TEXT)   JUST(RIGHT)                        COLOR(TURQ)\n \" TYPE(TEXT)   CAPS(OFF)  HILITE(REVERSE) COLOR(YELLOW)\n ~ TYPE(OUTPUT) CAPS(OFF)                  COLOR(GREEN) JUST(RIGHT)\n { TYPE(OUTPUT) CAPS(OFF) JUST(LEFT)       COLOR(YELLOW)\n \\ TYPE(AB)\n < TYPE(ABSL)\n)ABC Desc(Sort) MNEM(1)\n  PDC DESC('SORT By ID')             MNEM(9) ACTION RUN(SORTID)\n  PDC DESC('SORT By Total Messages') MNEM(9) ACTION RUN(SORTTOT)\n)ABCINIT\n  .ZVARS='SORTX'\n)ABC Desc(Exit) MNEM(2)\n  PDC DESC('Exit') ACTION RUN(END)\n)ABCINIT\n  .ZVARS='ENDX'\n  .RESP = ENTER\n)BODY EXPAND(``)\n!\\ Sort  \\ Exit +\n!`-`\n@ZDATESTD   %-`-` \"SYS1.BRODCAST Utility% `-`@ZTIMEL      +\n+Cmd input%===> _ZCMD                                         +Scroll%===>_AMT +\n\u00ac (SORTID, SORTTOT)\n+\n+   !CPU Type: @MACH! CPs:@CP! SU/Sec:@SUSEC ! Real:@RSTORE! Exp:@ESTORE+\n+    Active SMF id:~Z   +              Number of Active TSUs:~NUMTSU  +\n+    Broadcast DSN:{$DSNAME                                           +\n+    Volume:{Z     +    Unit: {Z   +    Creation Date:{$CRDATE +\n+    Dsorg:@Z  +   Recfm:@Z   +  Keyl:@Z   + Lrecl:@Z    +  Blksize:@Z    +\n+\n!Action    SKIP    MSGS   ID        Number Of  TSO ID\n!(S/D/P)   (nn)    (nn)             Messages   Status\n%-`-`\n)MODEL\n   |Z+   #SKAMT +#MSAMT +\u00a6UID     +\u00a2UTOTAL   +}USTAT                           +\n)INIT\n   .ZVARS = '(SMFID $VOLUME $UNIT $DSORG $RECFM $KEYL $LRECL $BLKSIZE $SEL)'\n   &$SEL = '_'\n   &SKAMT = ' '\n   &MSAMT = ' '\n   &AMT = PAGE\n   &ZCMD = ''\n)REINIT\n   .ZVARS = '(SMFID $VOLUME $UNIT $DSORG $RECFM $KEYL $LRECL $BLKSIZE $SEL)'\n   &$SEL = '_'\n   &SKAMT = ' '\n   &MSAMT = ' '\n   &AMT = PAGE\n   &ZCMD = ''\n)PROC\n   VER (&$SEL,LIST,S,D,P,'_',' ')\n   VER (&SKAMT,RANGE,0,999999)\n   VER (&MSAMT,RANGE,1,999999)\n   &MYCMD = &ZCMD\n   &MYSEL = &$SEL\n)END\n./ ADD NAME=BCMPNL2  0199-83139-01005-0950-00032-00019-00000-NMVV1\n)ATTR\n { TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(RED)\n ~ TYPE(OUTPUT) CAPS(OFF) HILITE(REVERSE) COLOR(YELLOW)\n # TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(GREEN)\n } TYPE(CHAR)  CAPS(OFF)                  COLOR(GREEN)\n % TYPE(TEXT)  CAPS(OFF)\n + TYPE(TEXT)  CAPS(OFF)                  COLOR(WHITE)\n \u00a6 TYPE(TEXT)  CAPS(OFF)                  COLOR(GREEN)\n ! TYPE(TEXT)   CAPS(OFF)                 COLOR(YELLOW)\n03 TYPE(TEXT)  CAPS(OFF)                  COLOR(BLUE)\n04 TYPE(TEXT)  CAPS(OFF)                  COLOR(GREEN)\n05 TYPE(TEXT)  CAPS(OFF)                  COLOR(YELLOW)\n06 TYPE(TEXT)  CAPS(OFF)                  COLOR(RED)\n @ TYPE(OUTPUT) JUST(ASIS)  INTENS(LOW) CAPS(OFF)  COLOR(TURQ)\n \u00ac TYPE(OUTPUT) JUST(ASIS)  INTENS(LOW) CAPS(OFF)  COLOR(GREEN)\n \" TYPE(OUTPUT) JUST(ASIS)                         COLOR(GREEN)\n01 TYPE(OUTPUT) JUST(RIGHT) HILITE(REVERSE)        COLOR(RED)\n02 TYPE(OUTPUT) JUST(RIGHT) HILITE(REVERSE)        COLOR(BLUE)\n11 TYPE(OUTPUT) JUST(RIGHT) INTENS(LOW) CAPS(OFF)  COLOR(WHITE)\n)BODY WINDOW(76,19) EXPAND(``)\n~UID     +`-`@ZTIMEL      +\n+Cmd input%===> _ZCMD                                     +Scr%===>_AMT    +\n@ACTCMD    +\n+   \u00acACTION                                                                +\n+\n)MODEL\n!>@UMSG1                                                                   +\n  @UMSG2                                                                   +\n)INIT\n)PROC\n   &MYCMD = &ZCMD\n)END\n./ ADD NAME=BCMPNL3  0199-83139-00364-1109-00023-00019-00000-NMVV1\n)ATTR\n { TYPE(TEXT)  CAPS(OFF)                  COLOR(TURQ)\n ~ TYPE(OUTPUT) CAPS(OFF) HILITE(REVERSE) COLOR(YELLOW)\n # TYPE(TEXT)  CAPS(OFF)  HILITE(REVERSE) COLOR(GREEN)\n } TYPE(CHAR)  CAPS(OFF)                  COLOR(GREEN)\n % TYPE(TEXT)  CAPS(OFF)\n + TYPE(TEXT)  CAPS(OFF)                  COLOR(WHITE)\n \u00a6 TYPE(TEXT)  CAPS(OFF)                  COLOR(GREEN)\n ! TYPE(TEXT)  CAPS(OFF)                  COLOR(YELLOW)\n03 TYPE(TEXT)  CAPS(OFF)                  COLOR(BLUE)\n04 TYPE(TEXT)  CAPS(OFF)                  COLOR(GREEN)\n05 TYPE(TEXT)  CAPS(OFF)                  COLOR(YELLOW)\n06 TYPE(TEXT)  CAPS(OFF)                  COLOR(RED)\n @ TYPE(OUTPUT) JUST(ASIS)  INTENS(LOW) CAPS(OFF)  COLOR(TURQ)\n \u00ac TYPE(OUTPUT) JUST(ASIS)  HILITE(REVERSE)        COLOR(RED)\n \" TYPE(OUTPUT) JUST(ASIS)                         COLOR(GREEN)\n01 TYPE(OUTPUT) JUST(RIGHT) HILITE(REVERSE)        COLOR(RED)\n02 TYPE(OUTPUT) JUST(RIGHT) HILITE(REVERSE)        COLOR(BLUE)\n11 TYPE(OUTPUT) JUST(RIGHT) INTENS(LOW) CAPS(OFF)  COLOR(WHITE)\n)BODY WINDOW(41,2) EXPAND(``)\n+     Deleting msgs for~UID     +?+\n!Press#Enter!To Proceed or#END!to Cancel+\n)END\n./ ADD NAME=BCMPNL4  0101-01093-01093-1518-00036-00036-00000-NMVV1\n)ATTR\n { TYPE(TEXT)  CAPS(OFF)                  COLOR(TURQ)\n ~ TYPE(OUTPUT) CAPS(OFF) HILITE(REVERSE) COLOR(YELLOW)\n | TYPE(INPUT)                            COLOR(TURQ)\n # TYPE(TEXT)  CAPS(OFF)  HILITE(REVERSE) COLOR(GREEN)\n } TYPE(CHAR)  CAPS(OFF)                  COLOR(GREEN)\n % TYPE(TEXT)  CAPS(OFF)\n + TYPE(TEXT)  CAPS(OFF)                  COLOR(WHITE)\n \u00a6 TYPE(TEXT)  CAPS(OFF)                  COLOR(GREEN)\n ! TYPE(TEXT)  CAPS(OFF)                  COLOR(YELLOW)\n03 TYPE(TEXT)  CAPS(OFF)                  COLOR(BLUE)\n04 TYPE(TEXT)  CAPS(OFF)                  COLOR(GREEN)\n05 TYPE(TEXT)  CAPS(OFF)                  COLOR(YELLOW)\n06 TYPE(TEXT)  CAPS(OFF)                  COLOR(RED)\n @ TYPE(OUTPUT) JUST(ASIS)  INTENS(LOW) CAPS(OFF)  COLOR(TURQ)\n \u00ac TYPE(OUTPUT) JUST(ASIS)  HILITE(REVERSE)        COLOR(RED)\n \" TYPE(OUTPUT) JUST(ASIS)                         COLOR(GREEN)\n01 TYPE(OUTPUT) JUST(RIGHT) HILITE(REVERSE)        COLOR(RED)\n02 TYPE(OUTPUT) JUST(RIGHT) HILITE(REVERSE)        COLOR(BLUE)\n11 TYPE(OUTPUT) JUST(RIGHT) INTENS(LOW) CAPS(OFF)  COLOR(WHITE)\n)BODY WINDOW(44,8) EXPAND(``)\n+       Print Messages for~UID     +\n+\n+ SYSOUT Allocation Attributes+\n!       Class ==> |Z+\n! Destination ==> |ODEST            +(opt)\n!      Writer ==> |OWRITER +         (opt)\n+\n+ Press#Enter+To Proceed or#END+to Cancel+\n)INIT\n   .ZVARS = '(OCLASS)'\n)PROC\n   VER (&OCLASS,NB,INCLUDE,ALPHAB,NUM)\n   VER (&ODEST,EBCDIC)\n   VER (&OWRITER,INCLUDE,ALPHAB,NUM)\n)END\n./ ADD NAME=BCMUTIL  0104-01180-01187-0802-00586-00563-00000-NMVV1\n/********************** BCMUTIL  REXX/CLIST      *********************/\n/*  BCMUTIL                                                          */\n/*                                                                   */\n/*     This exec provides an ISPF interface to the following pgms:   */\n/*     BCMUSERS, BCMLIST and BCMDEL2 from file 247 on the CBT tape.  */\n/*     The exec makes certain assumption about the output from these */\n/*     commands, therefore, may need to be revised when these cmds   */\n/*     change.                                                       */\n/*                                                                   */\n/*  SYNTAX: BCMUTIL DSN                                              */\n/*     DSN - Optional - used for testing against a copy of the       */\n/*         system BRODCAST data set.  Use the same syntax for any    */\n/*         TSO dataset, i.e. either use quotes or Data set will be   */\n/*         prefixed with your Userid Profile Prefix.  If not         */\n/*         provided, then use the default from BC_DSN variable.      */\n/*                                                                   */\n/*  Date-written:  12/28/2000 - Vinh Vu                              */\n/*                                                                   */\n/*  Customization:                                                   */\n/*     Change default setting in the \"CUSTOMIZATION BLOCK\" to        */\n/*     to reflect Panel names (if you decide to change them) and     */\n/*     BCMxx command names, BRODCAST data set name.                  */\n/*                                                                   */\n/*********************************************************************/\n/*                                                                   */\n/*  Change History:                                                  */\n/*                                                                   */\n/*     01/03/2001 - V_Vu - Change to move 'NUMERIC DIGITS 256' to    */\n/*         the body of main exec so that all 'C2D' calls will work   */\n/*         (thanks to Sam Golob and Bob Lamerand of StorageTek).     */\n/*                                                                   */\n/*     01/05/2001 - V_Vu - Change to add PRINT function.             */\n/*                                                                   */\n/*     01/08/2001 - V_Vu - Change to make PRINT function work better.*/\n/*         Also, add change to display the BRODCAST dsn plus data    */\n/*         set info...                                               */\n/*                                                                   */\n/*     01/09/2001 - V_Vu - Change to fix the row positioning after   */\n/*         a row is selected.                                        */\n/*                                                                   */\n/*     06/28/2001 - V_Vu - Change to allow for SKIP(nn) and MSGS(nn) */\n/*         in BCMLIST and BCMDEL2.  Also add CPU information display */\n/*         on the Primary Panel as well.                             */\n/*                                                                   */\n/*********************************************************************/\n\n/********************* CUSTOMIZATION BLOCK ***************************/\n\nTABLENM    = 'BCMTABL'         /* Main table name                    */\nTABLEMSG   = 'BCMMSGS'         /* Table used to display msgs         */\nTABPANEL   = 'BCMPNL1'         /* Panel name for main display        */\nMSGPANEL   = 'BCMPNL2'         /* Panel used to display msgs         */\nALERTPANEL = 'BCMPNL3'         /* Panel used to alert for DEL action */\nPRINTPANEL = 'BCMPNL4'         /* Panel used to print messages       */\nPROGRBAR   = 'PROGRBAR'        /* Progree Bar Panel                  */\n\nOCLASS     = 'A'               /* Default SYSOUT for printing        */\nODEST      = '  '              /* Default DEST for printing          */\nOWRITER    = ' '               /* Default WRITER for printing        */\nMAX_LINES  = 50                /* Line/Count per page for printing   */\nEXTRA_LINES_AT_THE_END = 2\nLAST_LINE              = 1\n\nLST_USER_CMD = 'BCMUSERS'      /* TSO cmd to list userid w/msgs      */\nLST_USER_MSG = 'BCMLIST'       /* TSO cmd to list a specicic id msgs */\nDEL_USER_MSG = 'BCMDEL2'       /* TSO cmd to delete msgs             */\n\nBC_DSN = \"'SYS1.BRODCAST'\"     /* Default DSN for the BROADCAST data */\n                               /* set. Overriden by PARM.            */\n\n/***************************** END ***********************************/\n\nIf Sysvar(SYSISPF) \u00ac='ACTIVE' Then Do\n   Parse Source . . EXEC_NAME .\n   Say '***' EXEC_NAME 'can only run under ISPF...'\n   Exit\n   End\n\nAddress ISPEXEC\n\nNUMERIC DIGITS 256\n\nMSG_X_AXIS  = 20                               /* 20 units on X-axis */\n                                               /* for the progr bar  */\n\nCOLOR.         = '\u00ac'           /* Default color = White              */\nCOLOR.RED      = '{'           /* These colors should match with     */\nCOLOR.BLUE     = '~'           /* what's being defined in the progr  */\nCOLOR.YELLOW   = '_'           /* bar panel.                         */\nCOLOR.TURQ     = '`'           /*                                    */\nCOLOR.WHITE    = '\u00ac'           /*                                    */\nCOLOR.PINK     = '!'           /*                                    */\nCOLOR.GREEN    = '#'           /*                                    */\n\nTEXT_COLOR     = '}'           /*                                    */\n\nZTDMARK = Center(' End Of List ',80,'-')\n\nCall DISPLAY_IN_PROGRESS_BAR 5 RED\n\nDELETED_TOTAL = 0\nDELETED_MSG   = 'Msgs have been deleted for id(s):'\n\nSORT_BY_ID    = 'TBSORT '||TABLENM||' FIELDS(UID,C,A)'\nSORT_BY_TOTAL = 'TBSORT '||TABLENM||' FIELDS(UTOTAL,N,A,UID,C,A)'\n\nSORT_STMT = SORT_BY_ID\nACTCMD = ''\n\nMSG_FOR_DELETE  = 'Following Broadcast Messages Have Been Deleted:'\nMSG_FOR_DISPLAY = 'Outstanding Broadcast Messages:'\n\nArg DSN .\nIf DSN = '' Then DSN = BC_DSN\n\nX = Listdsi(DSN 'DIRECTORY NORECALL')\nIf X=16 Then Do\n   If SYSREASON = 9 Then Do\n      Say '** Data set has been migrated .. Abort'\n      Exit\n      End\n   If SYSREASON = 5 Then Do\n      Say '** Data set not cataloged .. Abort'\n      Exit\n      End\n   Else Do\n      Say '** Servere error in LISTDSI...Rc=16 - SYSREASON=' SYSREASON\n      Exit\n      End\n   End\n\nAddress TSO 'ALLOC F(BRODCAST) DA('||DSN') SHR REU'\nIf RC > 0 Then Do\n   Say '** Error Allocating '||DSN||'. Abort...'\n   Exit\n   End\n\n$DSNAME  =  SYSDSNAME\n$VOLUME  =  SYSVOLUME\n$DSORG   =  SYSDSORG\n$RECFM   =  SYSRECFM\n$LRECL   =  SYSLRECL\n$KEYL    =  SYSKEYLEN\n$BLKSIZE =  SYSBLKSIZE\n$UNIT    =  SYSUNIT\n$CRDATE  =  SYSCREATE\n\nMYCRP = 0\n\nCVT     = Get_Stor('10'x)\nASVT    = Get_Stor(CVT,'22C'x)\nMAXUSER = C2D(Get_Stor(ASVT,'204'x))\n\nSMCA    = Get_Stor(CVT,'C4'x)\nSMFID   = Get_Stor(SMCA,'10'x)\n\nCSD     = Get_Stor(CVT,'294'x)\nRCE     = Get_Stor(CVT,'490'x)\nRMCT    = Get_Stor(CVT,'25C'x)\nMACH    = C2X(Get_Stor(CVT,-6,2))\nNUM_CPU = C2D(Get_Stor(CSD,'A'x,2))\nCP      = NUM_CPU\nSU      = C2D(Get_Stor(RMCT,64))\nSUSEC   = Strip(Format((16000000/SU),8,2))\nRSTORE  = (C2D(Get_Stor(CVT,'358'x))/1024)||'M'\nESTORE  = (C2D(Get_Stor(RCE,'A0'x))*4)/1024||'M'\n\nPROCESS_ALL_IDS:\n\nCall DISPLAY_IN_PROGRESS_BAR 10 YELLOW\n\n'TBCREATE' TABLENM 'NAMES(UID UTOTAL USTAT) REPLACE NOWRITE'\n\nAddress TSO\n'NEWSTACK'\nX = OUTTRAP('CMD.')\nLST_USER_CMD 'X'\nTEMPRC = RC\n'DELSTACK'\nAddress ISPEXEC\n\nIf TEMPRC \u00ac= 0 Then Do\n   Do I=1 To CMD.0\n      Say 'Err' I ':' CMD.I\n      End\n   'TBCLOSE' TABLENM\n   Exit\n   End\nElse Do\n   Call DISPLAY_IN_PROGRESS_BAR 80 TURQ\n   Call SCAN_ASVT\n   Call DISPLAY_IN_PROGRESS_BAR 90 GREEN\n   Do I=1 To CMD.0\n      Parse Var CMD.I FIELD_01 FIELD_02 . FIELD_04 .\n      If FIELD_01 = 'USER' Then Do\n         UID = FIELD_02\n         UTOTAL = FIELD_04\n         CKID = Strip(UID)\n         If JOBNAME.CKID Then Do\n            USTAT = Strip(CKID)||'('||,\n                    Strip(JOBID.CKID)||') A('||,\n                    Strip(JOBASID.CKID)||') Active'\n            End\n         Else USTAT = ''\n         'TBADD' TABLENM\n         End             /* If FIELD_01     */\n      End                /* Do I=1          */\n   End\n\n'TBTOP' TABLENM\n\nSORT_TABLE:\n\nSORT_STMT\n\nDISPL_TABLE_AFTER_SORT:\n\nMYCMD = ''\nMYSEL = ''\n'TBDISPL' TABLENM  'PANEL('TABPANEL') POSITION(MYCRP)'\nTEMPRC = RC\nIf TEMPRC = 8 Then Signal IAMDONE\nElse If Temprc = 0 | Temprc = 4 Then Nop\nElse Do\n   ZEDSMSG = 'Err TBDISPL Rc:' TEMPRC\n   ZEDLMSG = 'Error occurs during TBDISPL - Check ISPF environment'\n   'SETMSG MSG(ISRZ001)'\n   'TBCLOSE' TABLENM\n   Exit\n   End\n\nParse Var MYCMD CMD1 .\nLIMITED_STRING = ' '\nSelect\n   When CMD1  = '' Then Do\n      Select\n         When MYSEL = 'S' Then Do\n            LIMITED_STRING = CHECK_PARM()\n            Signal DISPLAY_A_SPECIFIC_ID\n            End\n         When MYSEL = 'P' Then Do\n            LIMITED_STRING = CHECK_PARM()\n            Signal PRINT_MESSAGES\n            End\n         When MYSEL = 'D' Then Do\n            LIMITED_STRING = CHECK_PARM()\n            Signal DELETE_MESSAGES\n            End\n         Otherwise Nop\n         End                /*  Select */\n      End\n   When CMD1  = 'SORTID' Then Do\n      SORT_STMT = SORT_BY_ID\n      Signal SORT_TABLE\n      End\n   When CMD1  = 'SORTTOT' Then Do\n      SORT_STMT = SORT_BY_TOTAL\n      Signal SORT_TABLE\n      End\n   Otherwise Nop\nEnd    /* Select  */\n\nSignal PROCESS_ALL_IDS\n\n\nCHECK_PARM:\nNUMBER_OF_EXTRA_LINES = 0\nSKIP_STRING    = ' '\nMSGS_STRING    = ' '\nIf SKAMT \u00ac= '' Then Do\n   NUMBER_OF_EXTRA_LINES = NUMBER_OF_EXTRA_LINES + 1\n   SKIP_STRING = ' SKIP('||Strip(SKAMT)||')'\n   End\nIf MSAMT \u00ac= '' Then Do\n   NUMBER_OF_EXTRA_LINES = NUMBER_OF_EXTRA_LINES + 1\n   MSGS_STRING = ' MSGS('||Strip(MSAMT)||')'\n   End\nReturn SKIP_STRING||MSGS_STRING\n\n\nDISPLAY_A_SPECIFIC_ID:\n'TBCREATE' TABLEMSG 'NAMES(UMSG1 UMSG2) REPLACE NOWRITE'\n\nAddress TSO\n'NEWSTACK'\nX = OUTTRAP('CMD.')\nLST_USER_MSG UID LIMITED_STRING\nTEMPRC = RC\n'DELSTACK'\nAddress ISPEXEC\n\nIf TEMPRC \u00ac= 0 Then Do\n   Do I=1 To CMD.0\n      Say 'Err' I ':' CMD.I\n      End\n   'TBCLOSE' TABLEMSG\n   Exit\n   End\nElse Do\n   Do I=1 To (CMD.0-EXTRA_LINES_AT_THE_END)\n      UMSG1 = Substr(CMD.I,1,72)\n      UMSG2 = Substr(CMD.I,73,72)\n      'TBADD' TABLEMSG\n      End              /* Do I=1   */\n   ACTION = MSG_FOR_DISPLAY\n   ACTCMD = '(DEL/PRT)'\n   MYCMD = ''\n   'ADDPOP COLUMN(13)'\n   'TBTOP'   TABLEMSG\n   'TBDISPL' TABLEMSG 'PANEL('MSGPANEL')'\n   TEMPRC = RC\n   'TBCLOSE' TABLEMSG\n   'REMPOP'\n   If TEMPRC = 0 Then Do\n      If Strip(MYCMD) = 'DEL' Then Signal DELETE_MESSAGES\n      If Strip(MYCMD) = 'PRT' Then Signal PRINT_MESSAGES\n      End\n   End\nSignal DISPL_TABLE_AFTER_SORT\n\n\n\nDELETE_MESSAGES:\n'ADDPOP COLUMN(14) ROW(5)'\n'DISPLAY PANEL('ALERTPANEL')'\nTEMPRC = RC\n'REMPOP'\nIf TEMPRC > 0 Then Signal DISPL_TABLE_AFTER_SORT\n\n'TBCREATE' TABLEMSG 'NAMES(UMSG1 UMSG2) REPLACE NOWRITE'\n\nAddress TSO\n'NEWSTACK'\nX = OUTTRAP('CMD.')\nDEL_USER_MSG UID LIMITED_STRING\nTEMPRC = RC\n'DELSTACK'\nAddress ISPEXEC\n\nIf TEMPRC \u00ac= 0 Then Do\n   Do I=1 To CMD.0\n      Say 'Err' I ':' CMD.I\n      End\n   'TBCLOSE' TABLEMSG\n   Exit\n   End\nElse Do\n   Do I=1 To (CMD.0-LAST_LINE)\n      UMSG1 = Substr(CMD.I,1,72)\n      UMSG2 = Substr(CMD.I,73,72)\n      'TBADD' TABLEMSG\n      End\n   ACTION = MSG_FOR_DELETE\n   ACTCMD = ''\n   TMP_UID = Strip(UID)\n   ZEDSMSG = 'Msgs sucessfully deleted'\n   ZEDLMSG = 'Outstanding Msgs for '||TMP_UID||' have been deleted...'\n   'SETMSG MSG(ISRZ001)'\n   'ADDPOP COLUMN(13)'\n   'TBTOP'   TABLEMSG\n   'TBDISPL' TABLEMSG 'PANEL('MSGPANEL')'\n   'REMPOP'\n   'TBCLOSE' TABLEMSG\n   If DELETED_TOTAL = 0 Then DELETED_MSG = DELETED_MSG||' '||TMP_UID\n   Else Do\n      If Index(DELETED_MSG,TMP_UID) = 0 Then Do\n         DELETED_MSG = DELETED_MSG||', '||TMP_UID\n         End                 /*  If Index   */\n      End\n   DELETED_TOTAL = DELETED_TOTAL +,\n      (CMD.0-EXTRA_LINES_AT_THE_END-NUMBER_OF_EXTRA_LINES)\n   End\nSignal PROCESS_ALL_IDS\n\n\nPRINT_MESSAGES:\n'ADDPOP COLUMN(14) ROW(5)'\n'DISPLAY PANEL('PRINTPANEL')'\nTEMPRC = RC\n'REMPOP'\nIf TEMPRC > 0 Then Signal DISPL_TABLE_AFTER_SORT\n\n'TBCREATE' TABLEMSG 'NAMES(UMSG1 UMSG2) REPLACE NOWRITE'\n\nAddress TSO\n'NEWSTACK'\nX = OUTTRAP('CMD.')\nLST_USER_MSG UID LIMITED_STRING\nTEMPRC = RC\n'DELSTACK'\nAddress ISPEXEC\n\nIf TEMPRC \u00ac= 0 Then Do\n   Do I=1 To CMD.0\n      Say 'Err' I ':' CMD.I\n      End\n   'TBCLOSE' TABLEMSG\n   Exit\n   End\nElse Call PRINT_ALL_LINES\n\nSignal DISPL_TABLE_AFTER_SORT\n\n\nPRINT_ALL_LINES:\n\nAddress TSO\nFILENAME = '$$'||Random(1000,9999)||'$$'\n'NEWSTACK'\nX = OUTTRAP('JUNK.')\n'FREE F('FILENAME')'\n'DELSTACK'\n\nIf ODEST   \u00ac= '' Then DEST_STRING    = 'DEST('||Strip(ODEST)||')'\nElse DEST_STRING = ''\nIf OWRITER \u00ac= '' Then WRITER_STRING  = 'WRITER('||Strip(OWRITER)||')'\nElse WRITER_STRING = ''\n'ALLOC FILE('||FILENAME||') '||,\n      'SYSOUT('OCLASS') LRECL(131) '||,\n      'RECFM(F B A) SPIN(UNALLOC) '||DEST_STRING||' '||WRITER_STRING\nTEMPRC = RC\nAddress ISPEXEC\nIf TEMPRC > 0 Then Do\n   ZEDSMSG = 'Error allocating SYSOUT'\n   ZEDLMSG = 'Cannot allocate SYSOUT data set for print. RC:' TEMPRC\n   'SETMSG MSG(ISRZ001)'\n   End\nElse Call PRINT_ROUTINE\n\nReturn\n\n\n\nPRINT_ROUTINE:\n\nPAGE_COUNT = 0\nCOUNTER = 0\nLINE_COUNT = 99\nHEAD1 =\nHEAD1 = '1'||'  SMF id: '||SMFID||,\n        Center('* Broadcast Msgs For '||Strip(UID)||' *',80)||,\n        'Page: '\nHEAD2 = '   Printed on '||Date(W)||', '||Date(U)||' - '||Time()\nHEAD3 = '   Broadcast Data Set Name: '||$DSNAME\nHEAD4 = '                 On Volume: '||$VOLUME\n\nAddress TSO\n'NEWSTACK'\nDo I=1 to CMD.0\n   If LINE_COUNT > MAX_LINES  Then Do\n      PAGE_COUNT = PAGE_COUNT + 1\n      Queue HEAD1||Format(PAGE_COUNT,2)\n      Queue\n      Queue HEAD2\n      Queue HEAD3\n      Queue HEAD4\n      Queue\n      COUNTER = COUNTER + 6\n      LINE_COUNT = 1\n      End                        /* If LINE_COUNT  */\n   Queue '   => ' CMD.I\n   COUNTER = COUNTER + 1\n   LINE_COUNT = LINE_COUNT + 1\n   End\n\n'EXECIO' COUNTER  'DISKW' FILENAME '(FINIS'\n'DELSTACK'\n'FREE F('FILENAME')'\nAddress ISPEXEC\nZEDSMSG = 'Msgs sucessfully printed'\nZEDLMSG = 'Outstanding msgs for '||Strip(UID)||' printed.'\n'SETMSG MSG(ISRZ000)'\nReturn\n\nIAMDONE:\n'TBCLOSE' TABLENM\nAddress TSO 'FREE F(BRODCAST)'\nIf DELETED_TOTAL > 0 Then Do\n   ZEDSMSG = ''\n   ZEDLMSG = Strip(Left(DELETED_MSG,500))\n   'SETMSG MSG(ISRZ000)'\n   End\n\nExit\n\n\nDISPLAY_IN_PROGRESS_BAR:\n\nArg P_PCT P_COLOR .\n\nTMP1     = (P_PCT*MSG_X_AXIS)%100\nTMP2     = MSG_X_AXIS-TMP1\nPGRBAR   = Copies(' ',TMP1)||Copies('.',TMP2)\nPGRMASK  = Copies(COLOR.P_COLOR,TMP1)||Copies(TEXT_COLOR,TMP2)\n'CONTROL DISPLAY LOCK'\n'ADDPOP COLUMN(62) ROW(-1)'\n'DISPLAY PANEL('PROGRBAR')'\n'REMPOP'\nReturn\n\n\n\nSCAN_ASVT:\n\nNUMTSU  = 0\nOFFSET  = 0+C2D('20C'x)\n\nJOBNAME.  = 0\nJOBID.    = ''\nJOBASID.  = ''\n\nDo MAXUSER\n   ASCB   = Get_Stor(ASVT,OFFSET)\n   OFFSET = OFFSET+4\n   If Bitand(Substr(ASCB,1,1),'80'X) = '80'X Then Iterate\n   If C2D(ASCB) = 0 Then Iterate\n   If Get_Stor(ASCB,0,4) \u00ac= 'ASCB' Then Iterate\n   If C2D(Get_Stor(ASCB,'3C'x)) = 0 Then Iterate      /* TSU only */\n\n   JOBNI = Get_Stor(ASCB,172)\n   JOBNS = Get_Stor(ASCB,176)\n\n   If C2D(JOBNS) = 0 and C2D(JOBNI) = 0 Then Do\n      JOBN = 'INIT'                     /* 'Starting' */\n      End\n\n   If C2D(JOBNI) = 0 Then Do\n      If C2D(JOBNS) \u00ac=0 Then JOBN  = Get_Stor(JOBNS,,8)\n         Else JOBN = 'INIT'             /* '**Init**' */\n      If C2D(Get_Stor(ASCB,'3C'x)) = 0 Then JTYPE = 'STC'\n         Else JTYPE = 'TSU'\n      End\n   Else Do\n      JOBN  = Get_Stor(JOBNI,,8)\n      JTYPE = 'BAT'\n      End\n   OUCB        = Get_Stor(ASCB,'90'x)\n   ASSB        = Get_Stor(ASCB,'150'x)\n   JSAB        = Get_Stor(ASSB,'A8'x)\n   JOBN        = Strip(JOBN)\n   JOBNAME.JOBN  = 1\n   JOBASID.JOBN  = C2X(Get_Stor(ASCB,'24'x,2))\n   If C2D(JSAB) \u00ac= 0 Then JOBID.JOBN = Get_Stor(JSAB,'14'x,8)\n   Else                   JOBID.JOBN = ''\n   NUMTSU = NUMTSU + 1\n   /* Say JOBN '-->' JOBNAME.JOBN JOBID.JOBN JOBASID.JOBN */\n   End   /* Do MAXUSER */\n\nReturn\n\nGet_Stor: PROCEDURE\n\n/*------------------------------------------------------------------*/\n/*                                                                  */\n/*      This procedure will extract data using the MVS Storage      */\n/*      function. Input arguments will be:                          */\n/*                                                                  */\n/*      1) Storage_Pointer or Literal, i.e. CVTPTR or '10'x, or     */\n/*         16 (like '10'x)                                          */\n/*      2) Offset in hex or dec (numnbe), i.e. 'FF'x or 256 or      */\n/*         D2C(256)                                                 */\n/*      3) Length of returned data in decimal, i.e. 256             */\n/*                                                                  */\n/*      NOTE - To make sure that this procedure will work all the   */\n/*      times, just include 'NUMERIC DIGITS 256' at the beginning   */\n/*      of the calling REXX exec.                                   */\n/*                                                                  */\n/*------------------------------------------------------------------*/\n\n\nParse Arg AREA,OFFSET,LENG\n\nIf Arg(2,'O') Then OFFSET=0\n\nIf Arg(3,'O') Then LENG=4\n\nIf DataType(AREA) = 'CHAR' Then Do\n   AREA =  C2D(AREA)\n   End\n\nIf DataType(OFFSET) = 'CHAR' Then Do\n   OFFSET =  C2D(OFFSET)\n   End\n\nReturn  Storage((D2X(AREA+OFFSET)),LENG)\n\n./ ADD NAME=PROGRBAR 0195-83139-01002-0812-00018-00019-00000-NMVV1\n)ATTR\n \\ AREA(DYNAMIC)\n { TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(RED)\n ~ TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(BLUE)\n # TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(GREEN)\n _ TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(YELLOW)\n ` TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(TURQ)\n \u00ac TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(WHITE)\n ! TYPE(CHAR)  CAPS(OFF)  HILITE(REVERSE) COLOR(PINK)\n } TYPE(CHAR)  CAPS(OFF)                  COLOR(YELLOW)\n % TYPE(TEXT)  CAPS(OFF)\n + TYPE(TEXT)  INTENS(LOW)   CAPS(OFF)  COLOR(WHITE)\n \u00a6 TYPE(TEXT)  CAPS(OFF)  COLOR(GREEN)\n @ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF)  COLOR(TURQ) JUST(RIGHT)\n \" TYPE(OUTPUT) JUST(ASIS) HILITE(REVERSE) COLOR(GREEN)\n)BODY WINDOW(21,1)\n\u00a6\\PGRBAR,PGRMASK    \\\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMLIS": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\"\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x99\\x15\\x8f\\x17\\x15\\x03\\x0f\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.34", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1999-06-07T17:15:00", "lines": 783, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMLIST  TITLE 'BCMLIST - LIST BROADCAST MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMLIST USERID                                    *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID WITHOUT    *\n*                   DELETING THEM.  IF YOU INVOKE FOR SPECIAL         *\n*                   \"USERID\" ALL$#@, THEN ALL USERIDS WHICH HAVE      *\n*                   MESSAGES ARE DISPLAYED.  THE SPECIAL ID FOR       *\n*                   DISPLAYING ALL USERIDS CAN BE CHANGED AT LABEL    *\n*                   ALLSET.  THIS VERSION OF THE PROGRAM ALSO         *\n*                   DISPLAYS THE RELATIVE RECORD ADDRESS OF EACH      *\n*                   MESSAGE IN SYS1.BRODCAST, SO THAT USERID CHAINS   *\n*                   CAN BE TRACED.                                    *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  APRIL 28, 99                                      *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  99/04/28  -  TOOK OFF RESTRICTIONS OF OPER, ACCT. *\n*                                OPEN SYS1.BRODCAST FOR INPUT INSTEAD *\n*                                OF UPDAT.  OK FOR GENERAL USERS.     *\n*                   95/05/31  -  HAS COUNT OF MSGS AND ID DISPLAY     *\n*                                USERID ALL$#@ WILL DISPLAY ALL MSGS  *\n*                   95/06/08  -  STRUCTURED SUBROUTINES AND COMMENTS  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMLIST  CSECT\n         USING BCMLIST,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMLIST VER 1.5'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, SEND MESSAGE TO PUT USERID\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'FF'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    USERIDS AREN'T MISSED UPON RETRY.\n         LA    R7,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R7,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 USERID NAME HAS TO BE\n         LA    R0,L'MESSAGE2+7                  ENTERED.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS\n         BE    WRITLEND\n         MVC   MESSRBA(3),USMNEXT\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     WRLOOP\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER7   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMLIST": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00%\\x00\\x95\\x15\\x0f\\x01\\x01\\x17\\x7f\\x12F\\x03\\xd4\\x02-\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "2001-06-26T12:46:25", "lines": 980, "newlines": 557, "modlines": 0, "user": "WSBG"}, "text": "BCMLIST  TITLE 'BCMLIST - LIST BROADCAST MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMLIST USERID  MSGS(MM) SKIP(NN)                 *\n*                           USERID IS MANDATORY, OTHERS ARE           *\n*                           OPTIONAL                                  *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID WITHOUT    *\n*                   DELETING THEM.  IF YOU INVOKE FOR SPECIAL         *\n*                   \"USERID\" ALL$#@, THEN ALL USERIDS WHICH HAVE      *\n*                   MESSAGES ARE DISPLAYED.  THE SPECIAL ID FOR       *\n*                   DISPLAYING ALL USERIDS CAN BE CHANGED AT LABEL    *\n*                   ALLSET.                                           *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   2.0            *\n*                                                                     *\n*            DATE:  APRIL 28, 99                                      *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  01/06/26  -  ADDED 2 KEYWORD PARAMETERS TO        *\n*                   (VER 2.0)    CONTROL WHICH MESSAGES ARE DISPLAYED *\n*                                                                     *\n*                                SKIP(NN) AND MSGS(MM)                *\n*                                                                     *\n*                                SKIP(NN) WILL SKIP NN RECORDS AT     *\n*                                THE BEGINNNG OF THE CHAIN.           *\n*                                                                     *\n*                                MESSAGES(MM) WILL DISPLAY MM         *\n*                                MESSAGES, AFTER THE SKIP, IF SKIP    *\n*                                WAS CODED, OR ELSE IT WILL DISPLAY   *\n*                                MM MESSAGES FROM THE BEGINNING OF    *\n*                                THE CHAIN.                           *\n*                                                                     *\n*                   99/04/28  -  TOOK OFF RESTRICTIONS OF OPER, ACCT. *\n*                   (VER 1.5)    OPEN SYS1.BRODCAST FOR INPUT INSTEAD *\n*                                OF UPDAT.  OK FOR GENERAL USERS.     *\n*                                                                     *\n*                   95/05/31  -  HAS COUNT OF MSGS AND ID DISPLAY     *\n*                                USERID ALL$#@ WILL DISPLAY ALL MSGS  *\n*                                                                     *\n*                   95/06/08  -  STRUCTURED SUBROUTINES AND COMMENTS  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMLIST  CSECT\n         USING BCMLIST,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMLIST VER 2.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, WRITE MESSAGE TO ENTER USERID\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'FF'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    USERIDS AREN'T MISSED UPON RETRY.\n         LA    R7,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R7,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n* ----                   WRITLOOP NEEDS R5 AND R7 SAVED AND RESTORED\n         ST    R5,SAVERG5          SAVE WORK REGISTER\n         ST    R7,SAVERG7          SAVE WORK REGISTER\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         L     R5,SAVERG5          RESTORE REGISTER\n         L     R7,SAVERG7          RESTORE REGISTER\n* ----\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n* ----                   WRITLOOP NEEDS R5 AND R7 SAVED AND RESTORED\n         ST    R5,SAVERG5          SAVE WORK REGISTER\n         ST    R7,SAVERG7          SAVE WORK REGISTER\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         L     R5,SAVERG5          RESTORE REGISTER\n         L     R7,SAVERG7          RESTORE REGISTER\n* ----\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND               WRITE MESSAGE THAT\n         MVC   LINE(L'MESPREND),MESPREND      THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINE(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINE(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR                        DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE2                  YOU HAVE TO ENTER THE\n         LA    R0,L'MESSAGE2                    USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE1                  SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1                    TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\nLOOKKEYW DS    0H                  LOOK FOR KEYWORDS MSGS AND SKIP\n         LA    R7,1(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,1(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         MVC   MSGSWKL(5),BLANKS\n         MVC   MSGSWKL(5),0(R7)    MOVE 5 CHARS TO WKAREA\n         OC    MSGSWKL(4),BLANKS   UPPERCASE FIELD\n         CLC   =C'MSGS(',MSGSWKL   MSGS KEYWORD THERE?\n         BE    DOMSGS              YES. HANDLE IT.\n         MVC   SKIPWKL(5),BLANKS\n         MVC   SKIPWKL(5),0(R7)    MOVE 5 CHARS TO WKAREA\n         OC    SKIPWKL(5),BLANKS   UPPERCASE FIELD\n         CLC   =C'SKIP(',SKIPWKL   SKIP KEYWORD THERE?\n         BE    DOSKIP              YES. HANDLE IT.\n         B     LOOKKEYW            GO LOOP AND LOOK AT NEXT CHARACTER\nDOMSGS   DS    0H\n         LA    R7,5(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,5(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         LR    R6,R7               GET START OF NUMBER\nDOMSGSL  DS    0H\n         CLI   0(R6),C' '\n         BE    DOMSGSNO\n         CLI   0(R6),C')'\n         BE    DOMSGSNO\n         LA    R8,1(,R8)\n         LA    R6,1(,R6)\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   DOMSGSNO\n         B     DOMSGSL\nDOMSGSNO DS    0H\n         SR    R6,R7\n         BCTR  R6,0\n         EX    R6,PACKM\n* ---- TEST\n         STM   R0,R1,SAVER0R1\n         OI    WORKM+7,X'0F'     SIGN NIBBLE\n         MVC   DATAMSGS+24(10),EDPAT\n         ED    DATAMSGS+24,WORKM+3\n         MVC   LINE,LINE-1                 WRITE TEST MESSAGE\n         LA    R0,L'DATAMSGS\n         MVC   LINE(L'DATAMSGS),DATAMSGS\n         BAL   R4,MSG\n         LM    R0,R1,SAVER0R1\n* ---- TEST\n         CVB   R0,WORKM\n         ST    R0,COUNTM\n         LA    R6,1(,R6)           RESTORE R6\n         AR    R7,R6               GET READY TO GO ON LOOKING\n         B     LOOKKEYW\nDOSKIP   DS    0H\n         LA    R7,5(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,5(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         LR    R6,R7               GET START OF NUMBER\nDOSKIPL  DS    0H\n         CLI   0(R6),C' '\n         BE    DOSKIPNO\n         CLI   0(R6),C')'\n         BE    DOSKIPNO\n         LA    R8,1(,R8)\n         LA    R6,1(,R6)\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   DOSKIPNO\n         B     DOSKIPL\nDOSKIPNO DS    0H\n         SR    R6,R7\n         BCTR  R6,0\n         EX    R6,PACKS\n* ---- TEST\n         STM   R0,R1,SAVER0R1\n         OI    WORKS+7,X'0F'     SIGN NIBBLE\n         MVC   DATASKIP+24(10),EDPAT\n         ED    DATASKIP+24,WORKS+3\n         MVC   LINE,LINE-1\n         LA    R0,L'DATASKIP               WRITE TEST MESSAGE\n         MVC   LINE(L'DATASKIP),DATASKIP\n         BAL   R4,MSG\n         LM    R0,R1,SAVER0R1\n* ---- TEST\n         CVB   R0,WORKS\n         ST    R0,COUNTS\n         LA    R6,1(,R6)           RESTORE R6\n         AR    R7,R6               GET READY TO GO ON LOOKING\n         B     LOOKKEYW\nGETIDEND BR    R9\nPACKM    PACK  WORKM,0(0,7)\nPACKS    PACK  WORKS,0(0,7)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   SMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   MMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         MVC   WORKM,DUBLZERO\n         MVC   WORKS,DUBLZERO\n         MVC   COUNTM,FULLZERO\n         MVC   COUNTS,FULLZERO\n         MVC   DATAMSGS,TESTMSGS\n         MVC   DATASKIP,TESTSKIP\n         MVC   WKLBLNK(2),BLANKS\n         MVC   MSGSWKL(5),BLANKS\n         MVC   SKIPWKL(5),BLANKS\n         MVI   SKLSFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\n*        R5 AND R7 MUST BE SAVED BEFORE ENTERING THIS ROUTINE\n*        AND THEY MUST BE RESTORED RIGHT AFTER LEAVING THIS ROUTINE.\n*\nWRITLOOP DS    0H\n         NI    SKLSFLAG,X'FF'-X'07'   TURN OFF ALL FLAGS\n         XR    R5,R5               CLEAR R5 FOR REUSE IN THIS ROUTINE\n         XR    R7,R7               CLEAR R7 FOR REUSE IN THIS ROUTINE\n         CLC   COUNTS,=F'0'        HAVE WE CODED A SKIP COUNT?\n         BE    WRLOOPTM\n         OI    SKLSFLAG,X'01'      SHOW WE'RE SKIPPING\n         L     R5,COUNTS\nWRLOOPTM DS    0H\n         CLC   COUNTM,=F'0'\n         BE    WRLOOP\n         OI    SKLSFLAG,X'02'      SHOW WE'RE LIMITING MESSAGES\n         L     R7,COUNTM\n         TM    SKLSFLAG,X'01'      ARE WE ALSO SKIPPING?\n         BZ    WRLOOP              NO. R7 IS FINE. OTHERWISE,\n         LA    R7,1(,R7)           THEN COMPENSATE BCT REGISTER\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\nWRLSKIP1 DS    0H\n         TM    SKLSFLAG,X'01'\n         BO    WRLSKIP2\n         TM    SKLSFLAG,X'04'\n         BO    WRLSKIP2\nWRLLIMS1 DS    0H\n         TM    SKLSFLAG,X'02'\n         BZ    WRLLIMS2\n         TM    SKLSFLAG,X'01'\n         BO    WRLLIMS2\n         TM    SKLSFLAG,X'04'\n         BO    WRLLIMS3\nWRLLIMS2 DS    0H\n         BAL   R4,MSG              WRITE MESSAGE OUT\nWRLLIMS3 DS    0H\nWRLSKIP2 DS    0H\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS\n         BE    WRITLEND\n         MVC   MESSRBA(3),USMNEXT\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nWRLSKIP3 DS    0H\n         TM    SKLSFLAG,X'01'\n         BZ    WRLSKIP4\n         BCT   R5,WRLOOP\n         NI    SKLSFLAG,X'FF'-X'01'\nWRLSKIP4 DS    0H\n         TM    SKLSFLAG,X'04'\n         BO    WRLLIMS4\n         BCT   R7,WRLOOP\n         OI    SKLSFLAG,X'04'\nWRLLIMS4 DS    0H\n         B     WRLOOP\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINE(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINE,MESSEND                      END OF USER LINE\n         LA    R0,L'MESSEND\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(55),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nDUBLZERO DC    D'0'\nFULLZERO DC    F'0'\nTESTMSGS DC    C'LIMIT  OF MSGS TO READ                '\nTESTSKIP DC    C'NUMBER OF MSGS TO SKIP                '\nEDPAT    DC    X'40202020202020202120'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINE(*-*),USMTEXT   EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nWORKM    DS    D\nWORKS    DS    D\nSAVER0R1 DS    D\nSAVERG5  DS    F\nSAVERG7  DS    F\nCOUNTM   DS    F\nCOUNTS   DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nSKLSFLAG DS    X\n*              X'01' MEANS WE ARE SKIPPING RECORDS\n*              X'02' MEANS WE ARE LIMITING RECORDS DISPLAYED\n*              X'04' MEANS WE HAVE PASSED THE DISPLAY LIMIT\nWKLBLNK  DS    CL2\nMSGSWKL  DS    CL5                 THIS ONE FIRST FOR INIT TO BLANKS\nSKIPWKL  DS    CL5\nDATAMSGS DS    CL38                TEST MSGS AREA\n         DC    CL45' '     PADDING\nDATASKIP DS    CL38                TEST SKIP AREA\n         DC    CL45' '     PADDING\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nSMSGCNT  DC    PL5'0'              COUNT OF SKIPPED MESSAGES\nMMSGCNT  DC    PL5'0'              COUNT OF LISTED MESSAGES\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER7   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMLISTO": {"ttr": 6406, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01$\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x99\\x15\\x8f\\x17 \\x03\\n\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.36", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1999-06-07T17:20:00", "lines": 778, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMLIST  TITLE 'BCMLIST - LIST BROADCAST MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMLIST USERID                                    *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID WITHOUT    *\n*                   DELETING THEM.  IF YOU INVOKE FOR SPECIAL         *\n*                   \"USERID\" ALL$#@, THEN ALL USERIDS WHICH HAVE      *\n*                   MESSAGES ARE DISPLAYED.  THE SPECIAL ID FOR       *\n*                   DISPLAYING ALL USERIDS CAN BE CHANGED AT LABEL    *\n*                   ALLSET.                                           *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  APRIL 28, 99                                      *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  99/04/28  -  TOOK OFF RESTRICTIONS OF OPER, ACCT. *\n*                                OPEN SYS1.BRODCAST FOR INPUT INSTEAD *\n*                                OF UPDAT.  OK FOR GENERAL USERS.     *\n*                   95/05/31  -  HAS COUNT OF MSGS AND ID DISPLAY     *\n*                                USERID ALL$#@ WILL DISPLAY ALL MSGS  *\n*                   95/06/08  -  STRUCTURED SUBROUTINES AND COMMENTS  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMLIST  CSECT\n         USING BCMLIST,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMLIST VER 1.5'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, WRITE MESSAGE TO ENTER USERID\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'FF'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    USERIDS AREN'T MISSED UPON RETRY.\n         LA    R7,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R7,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND               WRITE MESSAGE THAT\n         MVC   LINE(L'MESPREND),MESPREND      THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINE(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINE(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR                        DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE2                  YOU HAVE TO ENTER THE\n         LA    R0,L'MESSAGE2                    USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE1                  SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1                    TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS\n         BE    WRITLEND\n         MVC   MESSRBA(3),USMNEXT\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     WRLOOP\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINE(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINE,MESSEND                      END OF USER LINE\n         LA    R0,L'MESSEND\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(55),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINE(*-*),USMTEXT   EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER7   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMLISX": {"ttr": 6665, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\"\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x99\\x15\\x8f\\x183\\x03\\x1f\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.34", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1999-06-07T18:33:00", "lines": 799, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMLIST  TITLE 'BCMLIST - LIST BROADCAST MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMLIST USERID                                    *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID WITHOUT    *\n*                   DELETING THEM.  IF YOU INVOKE FOR SPECIAL         *\n*                   \"USERID\" ALL$#@, THEN ALL USERIDS WHICH HAVE      *\n*                   MESSAGES ARE DISPLAYED.  THE SPECIAL ID FOR       *\n*                   DISPLAYING ALL USERIDS CAN BE CHANGED AT LABEL    *\n*                   ALLSET.  THIS VERSION OF THE PROGRAM ALSO         *\n*                   DISPLAYS THE RELATIVE RECORD ADDRESS OF EACH      *\n*                   MESSAGE IN SYS1.BRODCAST, SO THAT USERID CHAINS   *\n*                   CAN BE TRACED.                                    *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  APRIL 28, 99                                      *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  99/04/28  -  TOOK OFF RESTRICTIONS OF OPER, ACCT. *\n*                                OPEN SYS1.BRODCAST FOR INPUT INSTEAD *\n*                                OF UPDAT.  OK FOR GENERAL USERS.     *\n*                   95/05/31  -  HAS COUNT OF MSGS AND ID DISPLAY     *\n*                                USERID ALL$#@ WILL DISPLAY ALL MSGS  *\n*                   95/06/08  -  STRUCTURED SUBROUTINES AND COMMENTS  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMLIST  CSECT\n         USING BCMLIST,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMLIST VER 1.5'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, WRITE MESSAGE ABOUT USERID.\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'FF'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R7,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R7,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n         CLC   SAVEPTRS(6),ZEROS\n         BE    SKIPSHOW\nMSGX1    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         MVC   LINE+1(7),TRYID\n         HEX   LINE+10,3,USDRBA\n         HEX   LINE+18,3,USDEND\n         MVC   LINE+26(21),=C'      USERID POINTERS'\n         BAL   R4,MSG                 TAKE OUT\nSKIPSHOW DS    0H\nMSGX2    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         HEX   LINE,3,MYUSRBA         TAKE OUT LATER\n         HEX   LINE+8,1,MYUSSLOT\n         MVC   LINE+13(7),TRYID\n         MVC   LINE+24(31),=C'      USERID POINTERS SAVED    ' TAKE OUT\n         BAL   R4,MSG                 TAKE OUT\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 YOU HAVE TO ENTER USERID\n         LA    R0,L'MESSAGE2+7                  NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS\n         BE    WRITLEND\n         MVC   MESSRBA(3),USMNEXT\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     WRLOOP\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMLISY": {"ttr": 7171, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x95\\x16\\x7f\\x00\\x99\\x15\\x8f\\x18F\\x03\\x18\\x03\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1995-06-16T00:00:00", "modifydate": "1999-06-07T18:46:00", "lines": 792, "newlines": 785, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMLIST  TITLE 'BCMLIST - LIST BROADCAST MESSAGES FOR A USERID.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMLIST USERID                                    *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID WITHOUT    *\n*                   DELETING THEM.  IF YOU INVOKE FOR SPECIAL         *\n*                   \"USERID\" ALL$#@, THEN ALL USERIDS WHICH HAVE      *\n*                   MESSAGES ARE DISPLAYED.  THE SPECIAL ID FOR       *\n*                   DISPLAYING ALL USERIDS CAN BE CHANGED AT LABEL    *\n*                   ALLSET.  THIS VERSION OF THE PROGRAM ALSO         *\n*                   DISPLAYS THE RELATIVE RECORD ADDRESS OF EACH      *\n*                   MESSAGE IN SYS1.BRODCAST, SO THAT USERID CHAINS   *\n*                   CAN BE TRACED.                                    *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  APRIL 28, 99                                      *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  99/04/28  -  TOOK OFF RESTRICTIONS OF OPER, ACCT. *\n*                                OPEN SYS1.BRODCAST FOR INPUT INSTEAD *\n*                                OF UPDAT.  OK FOR GENERAL USERS.     *\n*                   95/05/31  -  HAS COUNT OF MSGS AND ID DISPLAY     *\n*                                USERID ALL$#@ WILL DISPLAY ALL MSGS  *\n*                   95/06/08  -  STRUCTURED SUBROUTINES AND COMMENTS  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMLIST  CSECT\n         USING BCMLIST,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMLIST VER 1.5'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, WRITE USERID MESSAGE.\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'FF'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R7,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R7,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n         CLC   SAVEPTRS(6),ZEROS\n         BE    SKIPSHOW\nMSGX1    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         MVC   LINE+1(7),TRYID\n         HEX   LINE+10,3,USDRBA\n         HEX   LINE+18,3,USDEND\n         MVC   LINE+26(21),=C'      USERID POINTERS'\n         BAL   R4,MSG                 TAKE OUT\nSKIPSHOW DS    0H\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 YOU HAVE TO ENTER USERID\n         LA    R0,L'MESSAGE2+7                  AFTER THE COMMAND.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS\n         BE    WRITLEND\n         MVC   MESSRBA(3),USMNEXT\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     WRLOOP\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNCLE$": {"ttr": 7430, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x04\\x01\\x05\\x11\\x7f\\x01\\x05\\x12\\x8f\\x08W\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2005-04-27T00:00:00", "modifydate": "2005-05-08T08:57:04", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(BCMNCLEN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   BCMNCLEN\n SETSSI  CB469247\n SETCODE AC(0)\n NAME    BCMNCLEN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMNCLEN": {"ttr": 7432, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x019\\x00\\x08\\x01\\x01\\x05O\\x01\\x05\\x13\\x1f\\t0\\x02\\xcf\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.57", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2005-05-11T09:30:08", "lines": 719, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMNCLEN TITLE 'BCMNCLEN - CLEAN BROADCAST NOTICES.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM MAY BE RUN AS A TSO COMMAND          *\n*                   BUT IT IS INTENDED TO BE CALLED AS A SUBPROGRAM.  *\n*                                                                     *\n*         SYNTAX:   BCMNCLEN                                          *\n*                                                                     *\n*       FUNCTION:   TO CLEAN BRODCAST NOTICES AND RID THEM OF         *\n*                   GARBAGE LEFT BY PREVIOUS USE OF THE SLOT.         *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  MAY 11, 05                                        *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*       NOTE:       BCMNCLEN READS THE BRODCAST DATASET DIRECTLY,     *\n*                   AND CLEANS OUT ALL UNUSED NOTICES TO HEXZEROS,    *\n*                   WHILE ZEROING OUT ALL UNUSED BYTES FROM USED      *\n*                   NOTICES TOO.                                      *\n*                                                                     *\n*       CHANGES:  05/09/05  -  ADD ENQUEUE PROTECTION.  ENQ ON        *\n*                 (VER 1.5)    HEADER RECORD FOR THE DURATION,        *\n*                              AND ON THE RECORD BEING WRITTEN,       *\n*                              DURING THE WRITE OPERATION.            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT302  &DSECT=YES\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND  , */\n         MACRO\n         IKJZT303   &DSECT=YES\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND  , */\n         SPACE\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMNCLEN CSECT\n         USING BCMNCLEN,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMNCLEN VER 1.5'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         ZAP   BMSGCNT,=P'0'\n         ZAP   GMSGCNT,=P'0'\n         ZAP   EMSGCNT,=P'0'\n         SPACE 1\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\nDOBROD   OPEN  (BRODCAST,(INOUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST NOTICES RECORD, AND\n*                                  ALSO THE MAXIMUM NUMBER OF NOTICES\n*                                  IN THIS BROADCAST DATASET.\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH NOTICE RECORD.                   --- *\n* ---     FIRST, WE HAVE TO GO THRU THE INDEX RECORDS            --- *\n* ------------------------------------------------------------------ *\nINDEXBC  DS    0H                  READ THROUGH NOTICE INDEX RECORDS\n         MVC   SAVERBA(3),FSTNOTI    GET THE BALL ROLLING\nINDXLOOP DS    0H\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF NOTICE INDEXES\n         BE    ENDINDEX            END OF NOTICE INDEX RECORDS. FINISH.\n*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    NOTICES AREN'T MISSED.\n         LA    R7,25               COUNT OF INDEXES PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDIDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDIDECB\n         L     R3,MDIDECB+20       ADDRESS OF RECORD\n         CLI   0(R3),X'00'         NOTICE INDEX RECORD?\n         BNE   BADEND              NO. ERROR.\n         L     R3,MDIDECB+12       ADDRESS OF RECORD\n         USING BCDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),BCDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE INDEX SLOT COUNTER\n         DROP  R3\n*                       R3 IS STILL POINTING AT THE FIRST INDEX ENTRY\nBCILOOP  DS    0H\n         USING BCDENTRY,R3\n* --->\n*        MVC   LINE,LINE-1\n*        HEX   LINE,5,BCDENTRY\n*        LA    R0,20\n*        BAL   R4,MSG\n         MVC   LINE,LINE-1\n* --->\n         TM    0(R3),X'80'                   VALID NOTICE ?\n         BZ    YESNMSG                       YES. SKIP COMPLETE CLEAN.\n         OI    CLNALFLG,X'01'                NO. CLEAN ENTIRE RECORD.\nYESNMSG  DS    0H\n         CLC   BCDENTRY(5),=X'0000000000'    BLANK ENTRY?\n         BE    TRYNEXT                       IF SO, JUST BUMP.\n         MVC   CLENNUMB(2),BCDMSGNO          SAVE NOTICE NUMBER\n         MVC   CLENRBA(3),BCDMRBA            SAVE NOTICE RBA\n         ST    R9,SAVERG9\n         BAL   R9,CLENNOTE                   WRITE NOTICE OUT\n         AP    BMSGCNT,=P'1'\n         L     R9,SAVERG9\nTRYNEXT  LA    R3,5(,R3)           BUMP LOCATION TO NEXT INDEX SLOT\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R7,BCILOOP          TRY FOR ANOTHER NOTICE SLOT\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     INDXLOOP            END OF RECORD? GET ANOTHER.\n         SPACE 3\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR NOTICES                            --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'00'\n         LA    R0,L'MESPREND               WRITE MESSAGE THAT\n         MVC   LINE(L'MESPREND),MESPREND      THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDINDEX DS    0H                            ARE WE DOING ALL IDS ?\n         CP    GMSGCNT,=P'0'\n         BE    ENDNONE\n         B     WMESS2\nENDNONE  DS    0H\n         B     WMESS2                        SHOW MESSAGES CLEANED.\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE WITH\n         MVC   LINE(MSG2LEN),MESSAGE2         THE COUNTS OF RECORDS\n         LA    R0,MSG2LEN                       THAT WERE ZEROED.\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSDASH),MESSDASH\n         LA    R0,L'MESSDASH\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(MSG3LEN),MESSAGE3\n         MVC   LINE+34(6),MASK6\n         ED    LINE+34(6),GMSGCNT+1\n         LA    R0,MSG3LEN\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(MSG4LEN),MESSAGE4\n         MVC   LINE+34(6),MASK6\n         ED    LINE+34(6),EMSGCNT+1\n         LA    R0,MSG4LEN\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(MSG5LEN),MESSAGE5\n         MVC   LINE+34(6),MASK6\n         ED    LINE+34(6),BMSGCNT+1\n         LA    R0,MSG5LEN\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         LA    R0,L'MESSBLNK\n         BAL   R4,MSG\n         B     EOJ0\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE1                  SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1                    TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         MVC   RNAM(3),ZEROS       DEQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n*\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDIDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDIDECB\n         L     R3,MDIDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   FSTNOTI(3),R1BCPTR  SAVE RBA OF FIRST NOTICES INDEX\n         MVC   NUMNOTES(2),R1BCMAX  SAVE MAXIMUM NUMBER OF NOTES\n         DROP  R3\n         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCLENNOTE DS    0H\n         MVC   MESSRBA(3),CLENRBA\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'02'         IS THIS A GOOD NOTICE ?\n         BNE   CLENNOTN            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING BCMSG,R2\n         TM    CLNALFLG,X'01'\n         BO    CLEANALL\n         AP    GMSGCNT,=P'1'\n         XR    R0,R0\n         IC    R0,BCMLNG           LENGTH FOR MESSAGE MOVE\n         LR    R6,R0               LOAD IT INTO R6\n         BCTR  R6,0                SUBTRACT ONE FOR EXECUTE\n         B     CLENGOON\nCLEANMSG MVC   GOODOUT(*-*),BCMTEXT   EXECUTED\nCLENGOON DS    0H\n*>BELOW<-COVER CASE IN WHICH MSG LENGTH WAS INCORRECTLY MARKED AS ZERO.\n         C     R6,=X'FFFFFFFF'     IS R6 EQUAL TO MINUS ONE?\n         BNE   CLENNMIN            NO. THERE WON'T BE A PROBLEM.\n         LA    R6,0                YES. SET IT EQUAL TO ZERO.\n         B     CLENNOTN            SKIP MESSAGE MOVE AND GET OUT.\nCLENNMIN DS    0H\n*>ABOVE<-COVER CASE IN WHICH MSG LENGTH WAS INCORRECTLY MARKED AS ZERO.\n         MVI   GOODOUT,X'00'\n         MVC   GOODOUT+1(124),GOODOUT\n         EX    R6,CLEANMSG         MOVE MESSAGE TEXT TO WORK AREA\n         DROP  R2\n         ST    R8,SAVERG8\n         L     R8,MDLDECB+12\n         MVC   1(125,R8),GOODOUT\n         L     R8,SAVERG8\n         B     CLENNMWR\nCLEANALL DS    0H\n         AP    EMSGCNT,=P'1'\n         MVI   GOODOUT,X'00'\n         MVC   GOODOUT+1(127),GOODOUT\n         ST    R8,SAVERG8\n         L     R8,MDLDECB+12\n         MVC   0(128,R8),GOODOUT\n         NI    CLNALFLG,X'FF'-X'01'\n         L     R8,SAVERG8\nCLENNMWR DS    0H\n         MVC   RNAM(3),MESSRBA         USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n*\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         MVC   RNAM(3),MESSRBA         USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\nCLENNOTN DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   LINE,LINE-1         BLANK THE MESSAGE LINE\n         ZAP   BMSGCNT,=P'0'\n         MVC   WKLBLNK(2),BLANKS\n         MVI   ZERREC-1,X'00'\n         MVC   ZERREC(129),ZERREC-1\n         MVI   CLNALFLG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nQNAM     DS    CL8'SYSIKJBC'\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nRNAME    DC    X'000000'\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'BCMNCLEN - VER 1.5 - ',C'&SYSDATE',C' ',C'&SYSTIME'\nMSG2LEN  EQU   *-MESSAGE2\nMESSDASH DC    C'--------   -------   -------- -----'\nMESSAGE3 DC    C' COUNT OF USED  NOTICES CLEANED:             '\nMSG3LEN  EQU   *-MESSAGE3\nMESSAGE4 DC    C' COUNT OF EMPTY NOTICES CLEANED:             '\nMSG4LEN  EQU   *-MESSAGE4\nMESSAGE5 DC    C' TOTAL COUNT OF NOTICES CLEANED:             '\nMSG5LEN  EQU   *-MESSAGE5\nMESSBLNK DC    C'                                             '\nMESPREND DC    C'?????  PRELIMINARY END OF NOTICES  - - - - - *'\nMASK6    DC    XL6'402020202120'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nDWORD    DC    D'0'\n*\nSAVERG8  DS    F\nSAVERG9  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\n         DS    CL1\nZERREC   DS    0CL129\nWKLBLNK  DS    CL2\n         DS    CL72                PADDING\nBMSGCNT  DC    PL4'0'              COUNT OF MESSAGES FOR EACH NOTICE\nGMSGCNT  DC    PL4'0'              COUNT OF MESSAGES FOR EACH NOTICE\nEMSGCNT  DC    PL4'0'              COUNT OF MESSAGES FOR EACH NOTICE\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nNUMNOTES DC    X'0000'             MAX NUMBER OF NOTICE RECORDS\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nCLENRBA  DC    X'000000'           STORE RBA OF NOTICE\nCLENNUMB DC    X'0000'             STORE NUMBER OF NOTICE\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nFSTNOTI  DC    X'000000'           STORE RBA OF FIRST NOTICE INDEX\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nRNAM     DC    X'000000'           RBA FOR RNAME IN ENQ-DEQ\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER7   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L     NOTICE READ\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nRDWI     READ  MDIDECB,DI,MF=L     INDEX READ\nRDWIEND  DS    0F\nRDWILEN  EQU   *-RDWI\nCLNALFLG DS    X\nGOODOUT  DS    CL129\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IEZBITS\n         IKJZT302 DSECT=YES\n         IKJZT303 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMNCL01": {"ttr": 7688, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00Y\\x01\\x05\\x05_\\x01\\x05\\x13\\x1f!\\x14\\x000\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2005-02-24T00:00:00", "modifydate": "2005-05-11T21:14:59", "lines": 48, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "/*  ---------------------------------------------------------  */\n/*   SAMPLE NOTICES MESSAGES UPDATE CLIST - BCMNUPD HAS TO BE  */\n/*   AUTHORIZED AS A TSO COMMAND IN IKJTSOxx IN PARMLIB.       */\n/*   At OS/390 R1.1 you have to do an OPER SEND after you      */\n/*     execute BCMNUPD successfully, to make the changes       */\n/*     permanent.  This is true for all MVS levels through     */\n/*     z/OS 1.2.  At z/OS 1.3 and above, anyone execuing       */\n/*     LISTBC on the system, with the TSVTNCTU bit on, will    */\n/*     force an update of the incore Notices table, and        */\n/*     LISTBC will show the new messages.                      */\n/*  ---------------------------------------------------------  */\nPROC 0\nCONTROL ASIS\nALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\nBCMNOTFY 01 '---------------------------------------------------'\nBCMNOTFY 02  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 03  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 04  * *                                             * *\nBCMNOTFY 05  * *                                             * *\nBCMNOTFY 06  * *      WELCOME TO THE O-1  MVS SYSTEM...      * *\nBCMNOTFY 07  * *                                             * *\nBCMNOTFY 08  * *                                             * *\nBCMNOTFY 09  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 10  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 11 '---------------------------------------------------'\nBCMNOTFY 12 '      It is our great pleasure to serve your       '\nBCMNOTFY 13 '              computing needs!                     '\nBCMNOTFY 14 '                                                   '\nBCMNOTFY 15  -BLANKS\nBCMNOTFY 16  -DEL\nBCMNOTFY 17  -DEL\nBCMNOTFY 18  -DEL\nBCMNOTFY 19  -DEL\nBCMNOTFY 20  -DEL\nBCMNOTFY 21  -DEL\nBCMNOTFY 22  -DEL\nBCMNOTFY 23  -DEL\nBCMNOTFY 24  -DEL\nBCMNUPD\nBCMNLIST\nDO\n  OPER\n  SEND '   ',SAVE\n  SEND 16,DELETE\n  SEND 16,DELETE\n  END\nEND\nLISTBC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BCMNCL12": {"ttr": 7690, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x04\\x01\\x05\\x11\\x1f\\x01\\x05\\x12\\x9f\\tD\\x00+\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2005-04-21T00:00:00", "modifydate": "2005-05-09T09:44:04", "lines": 43, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "/*  - - - - - - - - - - - - - - - - - - - - - -  */\n/*   This is a sample execution of the BCMN****  */\n/*   programs in a CLIST, at the z/OS 1.2 level  */\n/*   where LISTBC did not yet look at the        */\n/*   TSVTNCTU bit to update the incore Notices   */\n/*   table.  Please note that the BCMNCLEN       */\n/*   program is also invoked here.               */\n/*  - - - - - - - - - - - - - - - - - - - - - -  */\nPROC 0\nCONTROL ASIS\nALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\nBCMNOTFY 01 '---------------------------------------------------'\nBCMNOTFY 02 * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 03 * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 04 * *                                             * *\nBCMNOTFY 05 * *                                             * *\nBCMNOTFY 06 * *      WELCOME TO THE Z-12 MVS SYSTEM...      * *\nBCMNOTFY 07 * *                                             * *\nBCMNOTFY 08 * *                                             * *\nBCMNOTFY 09 * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 10 * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 11 '---------------------------------------------------'\nBCMNOTFY 12 '      It is our great pleasure to serve your       '\nBCMNOTFY 13 '              computing needs!                     '\nBCMNOTFY 14 '                                                   '\nBCMNOTFY 15 '                                                   '\nBCMNOTFY 15 -DEL                                                '\nBCMNOTFY 16 -DEL                                                '\nBCMNUPD\nBCMNLIST\n/*  This DO-END group is an execution of IBM's OPER SEND command,  */\n/*   which is necessary at the TSO/E 2.x.x level, before the       */\n/*   LISTBC command was \"educated\" to look at the TSVTNCTU bit     */\n/*   that was set by the (APF-authorized) BCMNUPD TSO command.     */\nDO\n  OPER\n  SEND '   ',SAVE\n  SEND 15,DELETE\n  SEND 15,DELETE\n  END\nEND\nBCMNCLEN\nLISTBC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNCL16": {"ttr": 7692, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0f\\x00P\\x01\\x05\\x05_\\x01\\x05\\x11o\\x16!\\x00'\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.15", "flags": 0, "createdate": "2005-02-24T00:00:00", "modifydate": "2005-04-26T16:21:50", "lines": 39, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "/*  ---------------------------------------------------------  */\n/*   SAMPLE NOTICES MESSAGES UPDATE CLIST - BCMNUPD HAS TO BE  */\n/*   AUTHORIZED AS A TSO COMMAND IN IKJTSOxx IN PARMLIB.       */\n/*   At z/OS 1.6 after BCMNUPD it is enough to do a LISTBC     */\n/*     alone, to make the changes permanent.  Formerly, you    */\n/*     had to do an OPER SEND command to write a message.      */\n/*   The transition point was between z/OS 1.2 and z/OS 1.3,   */\n/*     which represents a jump from TSO/E 2.6.0 to 3.3.0.      */\n/*  ---------------------------------------------------------  */\nPROC 0\nCONTROL ASIS\nALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\nBCMNOTFY 01 '---------------------------------------------------'\nBCMNOTFY 02  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 03  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 04  * *                                             * *\nBCMNOTFY 05  * *                                             * *\nBCMNOTFY 06  * *      WELCOME TO THE Z-16 MVS SYSTEM...      * *\nBCMNOTFY 07  * *                                             * *\nBCMNOTFY 08  * *                                             * *\nBCMNOTFY 09  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 10  * * * * * * * * * * * * * * * * * * * * * * * * * *\nBCMNOTFY 11 '---------------------------------------------------'\nBCMNOTFY 12 '      It is our great pleasure to serve your       '\nBCMNOTFY 13 '              computing needs!                     '\nBCMNOTFY 14 '                                                   '\nBCMNOTFY 15  -BLANKS\nBCMNOTFY 16  -DEL\nBCMNOTFY 17  -DEL\nBCMNOTFY 18  -DEL\nBCMNOTFY 19  -DEL\nBCMNOTFY 20  -DEL\nBCMNOTFY 21  -DEL\nBCMNOTFY 22  -DEL\nBCMNOTFY 23  -DEL\nBCMNOTFY 24  -DEL\nBCMNUPD\nBCMNLIST\nLISTBC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BCMNHELP": {"ttr": 7694, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x10\\x01\\x05\\x10/\\x01\\x05\\x13\\x1f!\\x05\\x00\\xc2\\x00\\x81\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2005-04-12T00:00:00", "modifydate": "2005-05-11T21:05:10", "lines": 194, "newlines": 129, "modlines": 0, "user": "SBGOLOB"}, "text": " BRODCAST Notices Programs:  BCMNLIST, BCMNOTFY, BCMNUPD, BCMNCLEN\n -------------------------   --------  --------  -------  --------\n\nGeneral Functionality:  The program BCMNLIST will list the Notices\n                        messages, directly by reading SYS1.BRODCAST\n                        or a copy of it.\n\n                        The program BCMNOTFY will write messages,\n                        delete messages, or write blank messages,\n                        to the Notices section of SYS1.BRODCAST,\n                        or a copy of it.\n\n                        The BCMNCLEN program is a TSO command that\n                        takes no parameters, and goes through all\n                        BRODCAST Notices messages, replacing all\n                        unnecessary characters with X'00's, thereby\n                        cleaning up the appearance of the BRODCAST\n                        dataset.  Even active Notices messages are\n                        cleaned up, by replacing all characters in\n                        the Notices message record, that are beyond\n                        the limit of the message length, by X'00's.\n                        As with all these programs, before you\n                        execute BCMNCLEN, you have to allocate the\n                        BRODCAST ddname to whatever (copy of the)\n                        SYS1.BRODCAST dataset you want to deal with.\n\n                        The BCMNUPD program will turn on a bit in\n                        the TSO Vector Table that forces an update\n                        of the Incore Notices Table by the next\n                        LISTBC that executes in the system (e.g. if\n                        a user logs on).  An execution of BCMNUPD\n                        will force the SYS1.BRODCAST dataset to be\n                        re-read with the next LISTBC execution.  At\n                        that time, all Notices changes made by\n                        BCMNOTFY will be propagated to the Incore\n                        Notices Table.  This is only true for z/OS\n                        1.3 and afterward.  (TSO/E 3.3.0 and later.)\n\n                        At z/OS 1.2 and earlier levels, an execution\n                        of LISTBC alone, with the TSVTNCTU bit set,\n                        will not update the incore Notices table.\n                        At those TSO/E levels, you need to do an\n                        OPER command, followed by SEND '  ',SAVE to\n                        force a rewrite of the incore Notices table\n                        when TSVTNCTU is on.\n\nBCMNLIST  -\n\n  Function  :   To list all active NOTICES messages by reading\n                SYS1.BRODCAST or a copy of it.\n\n  Syntax    :   BCMNLIST\n                  with no additional parameters\n\n  Allocation:   ALLOC FI(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\n\n      Notes :   If you allocate the BRODCAST ddname to a copy\n                of SYS1.BRODCAST instead of to the \"official\"\n                SYS1.BRODCAST, then BCMNLIST will list the\n                Notices messages in the copy.\n\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nBCMNOTFY  -\n\n  Function  :   To write or delete NOTICES messages from the\n                SYS1.BRODCAST dataset or a copy of it.\n\n  Syntax    :   BCMNOTFY msgno message text\n             or BCMNOTFY msgno 'message text'\n             or BCMNOTFY msgno \"message text\"\n             or BCMNOTFY msgno -DELete\n             or BCMNOTFY msgno -BLAnks\n\n                This syntax is different from the syntax of\n                the SEND subcommand of the OPER TSO command.\n\n  Allocation:   ALLOC FI(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\n\n      Notes :   Starting from the first non-blank, at least one\n                space after the end of the message number,\n                everything that is non-blank, until the end of\n                the TSO command buffer, and up to 123 characters,\n                is considered as the text message, and it will be\n                written to the SYS1.BRODCAST notify message\n                record, for the given message number.\n\n                You don't have to delete the previous message\n                which had occupied that message number.  The\n                new message will overwrite the old message, and\n                the new message will be activated in the \"notices\n                index record\" of SYS1.BRODCAST for that message\n                number.\n\n                A single quote or a double quote will only be\n                effective to include everything in between, and\n                not itself, if there is a corresponding single or\n                double quote, as the last character in the\n                command buffer.  In other words, there cannot be\n                another non-blank character coming after the\n                last single or double quote.  Single or double\n                quotes in-between, don't count.  They are\n                included in the notification message as is.  Only\n                the first and last characters must be (single or\n                double) quotes, for this rule to be effective.\n\n                If you code the word -DEL in upper or lower or\n                mixed case, at least one space after the message\n                number, then that message will be deleted, and\n                its index record deactivated.\n\n                If you code the word -BLA in upper or lower or\n                mixed case, at least one space after the message\n                number, then that message number will be written\n                and activated, with 30 blank characters.  This is\n                an easy way to code a blank notice line, although\n                you can also enclose any number of blanks, up to\n                123, between a set of single or double quotes.\n\n                If you really want to put the characters -DEL or\n                -BLA into a message, enclose the ENTIRE message\n                between single or double quotes, according to the\n                rule stated above.\n\n                You can write notice messages to a copy of\n                SYS1.BRODCAST as well as to the original, by\n                pointing the BRODCAST ddname with an ALLOC\n                command, to the copy, instead of SYS1.BRODCAST\n                itself.  Do as follows, before you run the\n                BCMNOTFY command:\n\n                ALLOC FI(BRODCAST) DA(copy.of.sys1.brodcast) SH REUSE\n\n                or if you want to affect the real SYS1.BRODCAST:\n\n                ALLOC FI(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\n\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nBCMNUPD   -  Set the TSVTNCTU bit to an force update of the incore\n             Notices Table by LISTBC.  (This program must be APF\n             authorized.)\n\n   Note on currency of the LISTBC listing:\n   ---- -- -------- -- --- ------ -------\n\n      As of some time in the early or mid 1980s, IBM introduced\n      an incore copy of the NOTICES messages which LISTBC reports\n      from.  This was to allow quick LOGONs for new TSO sessions,\n      if SYS1.BRODCAST was tied up, and if it could not be read.\n      To stop possible LOGON delays, IBM placed an incore copy\n      of the current NOTICES messages into common storage, and\n      LISTBC reads from it, after IPL time.  This incore copy of\n      the NOTICES messages is updated when:\n\n      1-  An OPER SEND command is issued to write a new message.\n      2-  An OPER SEND command is issued to delete a message (maybe).\n      3-  An IPL is done.  I don't think that bringing the TSO\n            address space down will affect the incore NOTICES.\n            I ran an experiment, and it didn't do a thing.\n      4-  The TSVTNCTU bit in the TSO Vector Table was set, and:\n            For TSO/E 2.6.0 and below:  An OPER SEND ' ',SAVE was\n              done.  (This is needed for z/OS 1.2 and earlier.)\n            For TSO/E 3.3.0 and above:  A LISTBC was executed by\n              anybody in the system.  (For z/OS 1.3 and later.)\n          Our BCMNUPD command (APF authorized), will set the\n          TSVTNCTU bit on.\n\n      The current Incore Notices Table can be reached from the CVT.\n      CVTTVT which points to the TSO Vector Table, mapped by IKJTSVT.\n      TSVTNCT field in the TSO Vector Table points to the current\n        in-storage copy of the NOTICES table.\n      The TSVTNCTU bit in IKJTSVT being on, indicates that the\n        in-storage copy of the NOTICES table needs to be updated.\n\n      The sole function of the BCMNUPD program, which runs as an APF\n        authorized TSO command with no parameters, is to turn on the\n        TSVTNCTU bit in the TSVT, so the next invocation of LISTBC by\n        anyone in the system, will make all BCMNOTFY changes to\n        BRODCAST permanent.  (This is for z/OS 1.3 and higher.  See\n        the note 4- above for z/OS 1.2 and earlier MVS versions.)\n\n      If a copy of SYS1.BRODCAST is being updated by BCMNOTFY (meaning\n        a copy that we made, with BCMDUMP and BCMREST/BCMEXPND), then\n        there is no incore image of it to worry about.\n\n\n\n   Please direct questions or problems or enhancement requests to:\n\n      Sam Golob     email:  sbgolob@cbttape.org    or\n                            sbgolob@att.net\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNLIS$": {"ttr": 7940, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x16\\x01\\x05\\t\\x1f\\x01\\x05\\t\\x7f T\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-04-01T00:00:00", "modifydate": "2005-04-07T20:54:16", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(BCMNLIST)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   BCMNLIST\n SETSSI  CB469247\n SETCODE AC(0)\n NAME    BCMNLIST(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMNLIST": {"ttr": 7942, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00T\\x01\\x01\\x05O\\x01\\x05\\x11o\\x15X\\x02\\xa5\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2005-04-26T15:58:54", "lines": 677, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMNLIST TITLE 'BCMNLIST - LIST BROADCAST NOTICES TO ALL USERS.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM MAY BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMNLIST                                          *\n*                                                                     *\n*       FUNCTION:   TO LIST BROADCAST NOTICES FOR ALL USERS, ON       *\n*                   SYS1.BRODCAST, OR ON A COPY OF IT.                *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.4            *\n*                                                                     *\n*            DATE:  APRIL 26, 05                                      *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*       NOTE:       BCMNLIST READS THE BRODCAST DATASET DIRECTLY,     *\n*                   AND REPORTS THE NOTICES ONLY FROM IT.  AT         *\n*                   PRESENT, IT DOES NOT READ THE INCORE COPY         *\n*                   OF THE NOTICES POINTED TO BY CVTTVT (THE TSO      *\n*                   VECTOR TABLE) AND THE NCT WHICH IS DESCRIBED      *\n*                   IN MACRO IKJTSVT.  (THE INCORE NOTICES TABLE)     *\n*                                                                     *\n*       COMMENTS:   THIS PROGRAM PRODUCES A LISTING OF NOTICES THAT   *\n*                   IS VERY SIMILAR TO THE LISTING PRODUCED BY THE    *\n*                   \"SEND LIST\" SUBCOMMAND OF THE \"OPER\" TSO COMMAND, *\n*                   EXCEPT THAT IF THERE ARE NO NOTICES, THERE IS     *\n*                   A \"BCM576I\" MESSAGE ID, INSTEAD OF \"IKJ576I\".     *\n*                                                                     *\n*       CHANGES:    07/25/01  -  CLEANED OUT A LOT OF THE BCMLIST     *\n*                   (VER 1.1)    CODE, AND ISSUED A MESSAGE IF A      *\n*                                \"NOTICES INDEX RECORD\" IS CORRUPTED. *\n*                                                                     *\n*                   04/10/05  -  REPRESENT MESSAGE NUMBERS IN DECIMAL *\n*                                INSTEAD OF IN HEX - LIKE LISTBC.     *\n*                                                                     *\n*                   04/26/05  -  FIX SITUATION IN WHICH INDEX RECORD  *\n*                   (VER 1.4)    MARKS A MESSAGE AS USED, BUT THE     *\n*                                MESSAGE LENGTH IS ZERO.              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT302  &DSECT=YES\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND  , */\n         MACRO\n         IKJZT303   &DSECT=YES\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND  , */\n         SPACE\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMNLIST CSECT\n         USING BCMNLIST,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMNLIST VER 1.4'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         SPACE 1\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n*        CH    R3,=H'4'            ANYTHING?\n*        BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n*        BC    8,WMESS2            ZERO, THIS PROGRAM IS RUN W/O PARAMS\n*        BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST NOTICES RECORD, AND\n*                                  ALSO THE MAXIMUM NUMBER OF NOTICES\n*                                  IN THIS BROADCAST DATASET.\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH NOTICE RECORD.                   --- *\n* ---     FIRST, WE HAVE TO GO THRU THE INDEX RECORDS            --- *\n* ------------------------------------------------------------------ *\nINDEXBC  DS    0H                  READ THROUGH NOTICE INDEX RECORDS\n         MVC   SAVERBA(3),FSTNOTI    GET THE BALL ROLLING\nINDXLOOP DS    0H\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF NOTICE INDEXES\n         BE    ENDINDEX            END OF NOTICE INDEX RECORDS. FINISH.\n*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    NOTICES AREN'T MISSED.\n         LA    R7,25               COUNT OF INDEXES PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDIDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDIDECB\n         L     R3,MDIDECB+20       ADDRESS OF RECORD\n         CLI   0(R3),X'00'         NOTICE INDEX RECORD?\n         BNE   BADEND              NO. ERROR.\n         L     R3,MDIDECB+12       ADDRESS OF RECORD\n         USING BCDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),BCDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE INDEX SLOT COUNTER\n         DROP  R3\n*                       R3 IS STILL POINTING AT THE FIRST INDEX ENTRY\nBCILOOP  DS    0H\n         USING BCDENTRY,R3\n* --->\n*        MVC   LINE,LINE-1\n*        HEX   LINE,5,BCDENTRY\n*        LA    R0,20\n*        BAL   R4,MSG\n         MVC   LINE,LINE-1\n* --->\n         TM    0(R3),X'80'                   VALID NOTICE ?\n         BO    TRYNEXT                       NO. BUMP TO NEXT ONE.\n         CLC   BCDENTRY(5),=X'0000000000'    BLANK ENTRY?\n         BE    TRYNEXT                       IF SO, JUST BUMP.\n         MVC   SHOWNUMB(2),BCDMSGNO          SAVE NOTICE NUMBER\n         MVC   SHOWRBA(3),BCDMRBA            SAVE NOTICE RBA\n         ST    R9,SAVERG9\n         BAL   R9,SHOWNOTE                   WRITE NOTICE OUT\n         AP    BMSGCNT,=P'1'\n         L     R9,SAVERG9\nTRYNEXT  LA    R3,5(,R3)           BUMP LOCATION TO NEXT INDEX SLOT\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R7,BCILOOP          TRY FOR ANOTHER NOTICE SLOT\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     INDXLOOP            END OF RECORD? GET ANOTHER.\n         SPACE 3\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR NOTICES                            --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND               WRITE MESSAGE THAT\n         MVC   LINE(L'MESPREND),MESPREND      THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDINDEX DS    0H                            ARE WE DOING ALL IDS ?\n         CP    BMSGCNT,=P'0'\n         BE    ENDNONE\n         B     ZEROUT\nENDNONE  DS    0H                            ARE WE DOING ALL IDS ?\n         MVC   LINE,LINE-1\n         LA    R0,L'MESDONE\n         MVC   LINE(L'MESDONE),MESDONE\n         BAL   R4,MSG\n         B     EOJ0                           GET THE HECK OUT\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE2                  YOU HAVE TO ENTER THE\n         LA    R0,L'MESSAGE2                    USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE1                  SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1                    TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDIDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDIDECB\n         L     R3,MDIDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   FSTNOTI(3),R1BCPTR  SAVE RBA OF FIRST NOTICES INDEX\n         MVC   NUMNOTES(2),R1BCMAX  SAVE MAXIMUM NUMBER OF NOTES\n         DROP  R3\n         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSHOWNOTE DS    0H\n         MVC   MESSRBA(3),SHOWRBA\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'02'         IS THIS A GOOD NOTICE ?\n         BNE   SHOWNOTN            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING BCMSG,R2\n         XR    R0,R0\n         IC    R0,BCMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0               LOAD IT INTO R6\n         BCTR  R6,0                SUBTRACT ONE FOR EXECUTE\n*>BELOW<-COVER CASE IN WHICH MSG LENGTH WAS INCORRECTLY MARKED AS ZERO.\n         C     R6,=X'FFFFFFFF'     IS R6 EQUAL TO MINUS ONE?\n         BNE   SHOWNMIN            NO. THERE WON'T BE A PROBLEM.\n         LA    R6,0                YES. SET IT EQUAL TO ZERO.\n         MVC   LINE,LINE-1         DUPLICATE LINE BELOW.\n         B     SHOWNMWR            SKIP MESSAGE MOVE BUT REPORT NUMBER.\nSHOWNMIN DS    0H\n*>ABOVE<-COVER CASE IN WHICH MSG LENGTH WAS INCORRECTLY MARKED AS ZERO.\n         MVC   LINE,LINE-1         CLEAR MESSAGE LINE.\n         EX    R6,MOVEMSG          MOVE MESSAGE TEXT TO BRODCAST BUFFER\nSHOWNMWR DS    0H\n         A     R0,=F'10'           TSO MESSAGE LENGTH OF 10\n*        HEX   LINE+5,2,SHOWNUMB\n         LH    R1,SHOWNUMB         LOAD REGISTER WITH HEX NUMBER\n         CVD   R1,DWORD            CONVERT BLOCK COUNT TO DECIMAL\n         OI    DWORD+7,X'0F'       MAKE SIGN READABLE\n         MVC   LINE+5(4),BLANKS         INITIALIZE AREA TO BLANKS\n         UNPK  LINE+5(4),DWORD+6(2)     SAVE 4 DIGITS OF MESSAGE NUMBER\n         MVC   LINE(6),=C'MSGNO '       APPEND TITLE TO NUMBER\n         BAL   R4,MSG                   AND SHOW THE MESSAGE ON SCREEN\nSHOWNOTN DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\nMOVEMSG  MVC   LINE+10(*-*),BCMTEXT   EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   LINE,LINE-1         BLANK THE MESSAGE LINE\n         ZAP   BMSGCNT,=P'0'\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         MVC   WKLBLNK(2),BLANKS\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nDUBLZERO DC    D'0'\nFULLZERO DC    F'0'\nEDPAT    DC    X'40202020202020202120'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSEND  DC    C'* - - - - NO BRODCAST NOTICES - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF NOTICES  - - - - - *'\nMESDONE  DC    C'BCM576I   NO BROADCAST MESSAGE '\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nDWORD    DC    D'0'\nSAVER0R1 DS    D\nSAVE4    DS    F\nSAVERG4  DS    F\nSAVERG5  DS    F\nSAVERG7  DS    F\nSAVERG9  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nWKLBLNK  DS    CL2\n         DS    CL72                PADDING\nBMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH NOTICE\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nNUMNOTES DC    X'0000'             MAX NUMBER OF NOTICE RECORDS\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nSHOWRBA  DC    X'000000'           STORE RBA OF NOTICE\nSHOWNUMB DC    X'0000'             STORE NUMBER OF NOTICE\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nFSTNOTI  DC    X'000000'           STORE RBA OF FIRST NOTICE INDEX\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER7   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L     NOTICE READ\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nRDWI     READ  MDIDECB,DI,MF=L     INDEX READ\nRDWIEND  DS    0F\nRDWILEN  EQU   *-RDWI\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IEZBITS\n         IKJZT302 DSECT=YES\n         IKJZT303 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNOTF$": {"ttr": 8198, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x03\\x01\\x05\\t\\x1f\\x01\\x05\\x10O\\x08T\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-04-01T00:00:00", "modifydate": "2005-04-14T08:54:03", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(BCMNOTFY)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   BCMNOTFY\n SETSSI  CB469247\n SETCODE AC(0)\n NAME    BCMNOTFY(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMNOTFY": {"ttr": 8200, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x14\\x00\\x95\\x15\\x0f\\x01\\x07\\x12\\x8f\\x10P\\x04\\x16\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "2007-05-08T10:50:14", "lines": 1046, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMNOTFY TITLE 'BCMNOTFY - SEND OR DELETE A BRODCAST NOTIFICATION MSG'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMNOTFY nnn 'text of message    '                *\n*             OR:   BCMNOTFY nnn \"text of message    \"                *\n*             OR:   BCMNOTFY nnn text of message                      *\n*             OR:   BCMNOTFY nnn -DEL(ETE)                            *\n*             OR:   BCMNOTFY nnn -BLA(NKS)                            *\n*                                                                     *\n*       FUNCTION:   TO SEND A GLOBAL NOTIFICATION MESSAGE TO ALL      *\n*                   TSO USERS, THROUGH THE NOTIFICATION SECTION OF    *\n*                   SYS1.BRODCAST.  THIS REPLACES THE OPER SEND       *\n*                   SUBCOMMAND.                                       *\n*                                                                     *\n*       NOTE:       BCMNOTFY UPDATES THE BRODCAST DATASET DIRECTLY,   *\n*                   AND REPORTS THE NOTICES ONLY FROM IT.  AT         *\n*                   PRESENT, IT DOES NOT UPDATE THE INCORE COPY       *\n*                   OF THE NOTICES POINTED TO BY CVTTVT (THE TSO      *\n*                   VECTOR TABLE) AND THE NCT WHICH IS DESCRIBED      *\n*                   IN MACRO IKJTSVT.  (THE INCORE NOTICES TABLE)     *\n*                                                                     *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.6            *\n*                                                                     *\n*            DATE:  APR 26, 05                                        *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  04/26/05  -  ZERO THE BRODCAST TEXT RECORD        *\n*                   (VER 1.4)    BEFORE WRITING THE MESSAGE.          *\n*                                THIS HAS THE EFFECT OF CLEANING      *\n*                                OUT THE UNUSED PART OF THE           *\n*                                MESSAGE AND MAKING A BROWSE (OR      *\n*                                \"REVIEW\") OF THE SYS1.BRODCAST       *\n*                                DATASET EASIER TO READ.              *\n*                                                                     *\n*         CHANGES:  05/08/05  -  FIX A PROBLEM WHEN DELETING A        *\n*                   (VER 1.5)    NOTIFY MESSAGE WITH THE -DEL         *\n*                                KEYWORD.  FIX THE DISPLAY OF         *\n*                                CHANGED RECORDS TO MAKE IT MORE      *\n*                                READABLE.                            *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT302  &DSECT=YES\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT303   &DSECT=YES\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n***********************************************************************\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\n         GBLA  &BLNKDFL                                                  01485\n&BLNKDFL SETA  30                                                        01490\nBCMNOTFY CSECT\n         USING BCMNOTFY,R12,R10\n         B     BEGINN-*(,R15)\nDEFBLNK  DC    F'&BLNKDFL'\n         DC    AL1(16),CL16'BCMNOTFY VER 1.6'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         STH   R3,CMBLENG          SAVE COMMAND BUFFER LENGTH\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         STH   R3,OFFSETT          SAVE OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS3            ZERO, SEND MESSAGE.............\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\nDOBROD   DS    0H\n         STM   R15,R1,SAVE1501     Save OPEN work registers\n         OPEN  (BRODCAST,(UPDAT))\n         LM    R15,R1,SAVE1501     Restore OPEN work registers\n         TM    BRODCAST+48,X'10'   Is BRODCAST DD OPEN?\n         BNO   WMESS1              No. Send message to allocate it.\n         BAL   R9,GETNUMB          Get the number of the message which\n*                                   you want to modify.\n         BAL   R9,GETMSGT          Get the message from second param.\n         BAL   R9,HEADREAD         Read header record and extract\n*                                  RBA of first notice record, and also\n*                                  the maximum number of notes in this\n*                                  particular SYS1.BRODCAST.\n* --- Make maximum number of notices displayable. - below\n*\n         ST    R4,SAVER4           Save work register\n         LH    R4,NUMNOTES         Load maximum message number.\n         CVD   R4,DWORD            Convert message number to decimal.\n         L     R4,SAVER4           Restore work register\n         OI    DWORD+7,X'0F'       Make sign readable.\n         MVC   DISPMXNM,DISPMXNM-1      Initialize to blanks.\n         UNPK  DISPMXNM(4),DWORD+6(2)   Display 4 digit message number.\n         MVC   MESS5NUM(4),DISPMXNM\n*\n* --- Make maximum number of notices displayable. - above\n         CLC   NUMNOTES,MSGNHALF   Is requested number more than max?\n         BNL   MNUMBOK             No. Go on with processing.\n         B     WMESS5              Yes, put out message and end code 8.\nMNUMBOK  DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n* ------------------------------------------------------------------ *\n* ---    MAIN ROUTINE TO UPDATE THE DESIRED NOTICES RECORD.      --- *\n* ------------------------------------------------------------------ *\n         BAL   R9,FINDNOTE         SEE IF YOU CAN FIND THE\n*                          NOTICES RECORD THAT CORRESPONDS TO THE\n*                          MSGNHALF.  IF FOUND, GO TO IT AND EITHER\n*                          UPDATE IT OR DELETE IT.\n* ------------------------------------------------------------------ *\n         MVC   RNAM(3),ZEROS       DEQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         B     EOJ\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN ROUTINE TO SEND MESSAGE                     --- *\n* ------------------------------------------------------------------ *\nWMESS3   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE3                 MESSAGE NUMBER IS MISSING\n         LA    R0,L'MESSAGE3+7\n         BAL   R4,MSG\n         B     EOJ4\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 MESSAGE TEXT IS MISSING\n         LA    R0,L'MESSAGE2+7\n         BAL   R4,MSG\n         B     EOJ4\nWMESS4   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE4                 MESSAGE NUMB NOT NUMERIC\n         LA    R0,L'MESSAGE4+7\n         BAL   R4,MSG\n         B     EOJ8\nWMESS5   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE5                 MESSAGE NUMB TOO HIGH\n         MVC   MESS5NUM(4),DISPMXNM\n         LA    R0,MESS5LEN+7\n         BAL   R4,MSG\n         B     EOJ8\nWMESS6   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE6                 NOTICES INDEX RECORD\n         LA    R0,L'MESSAGE6+7                  HAS WRONG KIND OF KEY\n         BAL   R4,MSG\n         B     EOJ8\nWMESS7   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE7                 WE HAVE REACHED END OF\n         LA    R0,L'MESSAGE7+7                  NOTICES INDEXES W/O HIT\n         BAL   R4,MSG\n         B     EOJ8\nWMESS8   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE8                 NOTICES MESSAGE RECORD\n         LA    R0,L'MESSAGE8+7                  HAS WRONG KIND OF KEY\n         BAL   R4,MSG\n         B     EOJ8\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\n         B     EOJ\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n*-----------------------------------------------------------------*\n* ------------------------------------------------------------------ *\n* ---    FIND A PARTICULAR NOTICE RECORD AND SAVE ITS RBA.       --- *\n* ------------------------------------------------------------------ *\nFINDNOTE DS    0H                  READ THROUGH NOTICE INDEX RECORDS\n         MVC   SAVERBA(3),FSTNOTI  GET THE BALL ROLLING\nINDXLOOP DS    0H\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF NOTICE INDEXES\n         BE    WMESS7              END OF NOTICE INDEX RECORDS. FINISH.\n*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    NOTICES AREN'T MISSED.\n         LA    R7,25               COUNT OF INDEXES PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDIDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDIDECB\n         L     R3,MDIDECB+20           ADDRESS OF KEY\n         CLI   0(R3),X'00'             NOTICES INDEX RECORD?\n         BNE   WMESS6                  NO. ERROR.\n         L     R3,MDIDECB+12           ADDRESS OF RECORD\n         USING BCDIR,R3\n         MVC   LASTRBA(3),SAVERBA      SAVE CURRENT RBA\n         MVC   SAVERBA(3),BCDNEXT      GET NEXT RECORD'S RBA\n         LA    R8,0                    INITIALIZE INDEX SLOT COUNTER\n         DROP  R3\n*                       R3 IS STILL POINTING AT THE FIRST INDEX ENTRY\nBCILOOP  DS    0H\n         USING BCDENTRY,R3\n         MVC   MSGNCLR(2),BCDMSGNO     Save message number in index.\n         NC    MSGNCLR(2),=X'7FFF'     Clear leading X'80' for compare.\n         CLC   MSGNCLR,MSGNHALF        Correct message number?\n         BNE   TRYNEXT                 No. Bump to next one.\n         MVC   MSGNRBA(3),BCDMRBA      Save RBA of notice.\n         TM    DELFLAG,X'01'           Are we deleting this notice?\n         BO    YESDELN                 Yes.\n         NI    BCDMFLG,X'7F'           Mark MSGNO as used.\n         B     REWRINDX                Write the entire index record.\nYESDELN  DS    0H\n         OI    BCDMFLG,X'80'           Mark MSGNO as not being used.\n         B     REWRINDX                Write the entire index record.\nREWRINDX DS    0H\n         MVC   RNAM(3),BLOCKNO         USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         WRITE MDIDECB,                                                X\n               DI,                                                     X\n               BRODCAST,                                               X\n               'S',                                                    X\n               'S',                                                    X\n               'S',                                                    X\n               BLOCKNO,MF=E\n         CHECK MDIDECB\n         MVC   RNAM(3),BLOCKNO         USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         SPACE\n         ST    R9,SAVERG9              Save BAL register\n         BAL   R9,WRITNOTE             UPDATE NOTICE RECORD\n         L     R9,SAVERG9              Restore BAL register\n         B     FINDNTEN\nTRYNEXT  LA    R3,5(,R3)               Bump location to next index slot\n         LA    R8,1(,R8)               Bump counter within record\n         BCT   R7,BCILOOP              Try for another notice slot\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     INDXLOOP            END OF RECORD? GET ANOTHER.\nFINDNTEN DS    0H                  READ THROUGH NOTICE INDEX RECORDS\n         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR NOTICES                            --- *\n* ------------------------------------------------------------------ *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE MESSAGE NUMBER FROM THE PARM, CHECK IF NUMERIC.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNUMB  AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO EXPECTED NUMBER.\n         LA    R6,5                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF NUMBER\n         LA    R8,0                INITIALIZE CHARACTER COUNT\n         ST    R7,SAVEBEGN         SAVE BEGINNING OF SEARCH ADDRESS\nTESTNUMR DS    0H                  Test parameter if all numeric.\n         CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at end of the number.\n         CLI   0(R7),X'6B'         Is this character a comma?\n         BE    NOMORCUT            Yes, we are at end of the number.\n         CLI   0(R7),X'F0'         Less than \"display 0\"?\n         BL    NOTNUMER            Yes. Send error message.\n         CLI   0(R7),X'F9'         Greater than \"display 9\"?\n         BH    NOTNUMER            Yes. Send error message.\n         B     CUTNMLEN\nNOTNUMER DS    0H\n         B     WMESS4              Number parameter is not numeric.\nCUTNMLEN DS    0H\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,TESTNUMR         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         S     R7,SAVEBEGN         REG 7 = Length of number\n         STC   R7,MSGNLENG         Store this message length for later.\n         BCTR  R7,0                One less for EXECUTE.\n         EX    R7,PACK             Convert to packed\n         CVB   R0,WORK             Convert to binary\n         ST    R0,SAVEMSGN         And shove it into a fullword.\n         LH    R7,MSGNHALF\n         CVD   R7,DWORD            Convert message number to decimal.\n         OI    DWORD+7,X'0F'       Make sign readable.\n         MVC   DISPNNUM,DISPNNUM-1      Initialize to blanks.\n         UNPK  DISPNNUM(4),DWORD+6(2)   Display 4 digit message number.\n         B     DISPHEX             Get message written.\nGETNUMEN DS    0H                  End of GETNUMB routine.\n         BR    R9                  Return to caller.\nPACK     PACK  WORK,0(0,1)\nWORK     DC    D'0'                Doubleword work areas.\nDWORD    DC    D'0'\nDISPHEX  DS    0H\n*        MVC   LINE,LINE-1         Clear output line.\n*        MVC   LINET,DISPNNUM      Move number to correct place in msg.\n*        LA    R0,L'DISPNNUM+7     Load message length.\n*        BAL   R4,MSG              Write message out.\n         B     GETNUMEN            Go back to caller.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    WRITE OVER THE NOTICE MESSAGE IN SYS1.BRODCAST\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITNOTE DS    0H\n         MVC   MESSRBA(3),MSGNRBA\n         MVC   RNAM(3),MESSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'02'         IS THIS A GOOD NOTICE ?\n         BNE   SHOWNOTX            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING BCMSG,R2\n         XR    R0,R0\n         L     R0,LENTHMSG         LENGTH FOR PUTLINE\n         STC   R0,BCMLNG\n         LR    R6,R0\n         BCTR  R6,0                ADJUST LENGTH FOR EXECUTE\n         MVC   LINE,LINE-1\n         MVC   BCMTEXT(125),ZERREC   INITIALIZE MESSAGE TO HEXZEROS\n         TM    DELFLAG,X'01'\n         BO    SHOWNOTD\n         EX    R6,MOVEMSG\n         LR    R0,R6\n         A     R0,=F'11'\n*        HEX   LINE+5,2,MSGNCLR\n         LH    R7,MSGNCLR\n         CVD   R7,DWORD         CONVERT BLOCK COUNT TO DECIMAL\n         OI    DWORD+7,X'0F'    MAKE SIGN READABLE\n         MVC   LINE+5(4),BLANKS           INITIALIZE TO BLANKS\n         UNPK  LINE+5(4),DWORD+6(2)       SAVE 4 DIGITS MESSAGE NUMBER\n         MVC   LINE(6),=C'MSGNO '\n         EX    R6,MOVEMSGX\n         BAL   R4,MSG\n         B     SHOWNOTN\nSHOWNOTD DS    0H\n         MVC   LINE,LINE-1         Clear message line\n         LH    R7,MSGNHALF         Load message number as obtained.\n         CVD   R7,DWORD            Convert it to decimal.\n         OI    DWORD+7,X'0F'       Make sign readable.\n         MVC   LINE+5(4),BLANKS          Initialize to blanks.\n         UNPK  LINE+5(4),DWORD+6(2)      Save 4 digit message number.\n         MVC   LINE(6),=C'MSGNO '        Supply message number literal.\n         MVC   LINE+9(8),=C' DELETED'    Mark number as deleted in msg.\n         LA    R0,18               Hard-code length of message.\n         BAL   R4,MSG              Write DELETED message out.\n         MVC   MSGTEXT(125),ZERREC   Put hexzeros in message text.\n         MVC   BCMTEXT(125),MSGTEXT  And move to output area.\nSHOWNOTN DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         MVC   RNAM(3),MESSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\nMOVEMSG  MVC   BCMTEXT(*-*),MSGTEXT   EXECUTED\nMOVEMSGX MVC   LINE+10(*-*),BCMTEXT   EXECUTED\n         DROP  R2\nSHOWNOTX DS    0H\n         MVC   RNAM(3),MESSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     WMESS8\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE MESSAGE TEXT FOR THE MESSAGE TO BE SENT.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETMSGT  DS    0H                  Get message text to send to notice.\n         ST    R7,SAVEWRK7         SAVE REGISTER CONTENTS\n         ST    R8,SAVEWRK8         SAVE REGISTER CONTENTS\n         L     R3,0(,R11)          Load address of command buffer.\n         LH    R8,CMBLENG          Total length of command buffer.\n         LA    R3,4(,R3)           Compensate for header.\n         SH    R8,=H'4'            And minus header length.\n         LH    R7,OFFSETT          Load offset value.\n         LA    R3,0(R7,R3)         Point to beginning of command.\n         SR    R8,R7               Command buffer length minus offset.\n         XR    R7,R7               Zero register.\n         IC    R7,MSGNLENG         Load length of message number.\n         LA    R3,0(R7,R3)         Point past message number.\n         SR    R8,R7               Subtract message number length.\n         BC    8,WMESS2            If zero, issue message.\n         BC    5,EOJ8              If less or overflow, get out.\n         LR    R7,R8               Initialize message length.\nFRSTBLNK DS    0H                  If non-blank, assume that the\n*                                   message starts here.\n         CLI   0(R3),X'40'         Are we at a blank?\n         BE    LEADBLNK            Yes, look for more blanks.\n         B     BLANKEND            No, assume the message starts here.\nLEADBLNK DS    0H                  Bump past any leading blanks.\n         CLI   0(R3),X'40'         Is this character a blank?\n         BNE   BLANKEND            No. End the loop.\n         LA    R3,1(,R3)           Bump to next character.\n         BCTR  R7,0                Message is 1 character shorter.\n         BCT   R8,LEADBLNK         Loop until first non-blank.\nBLANKEND DS    0H                  Save message text now.\n* -- >  Test for leading quote(s) - below\n         MVC   QUOTSTRT(1),0(R3)   Test for leading and following quote\n         CLI   QUOTSTRT,X'7D'      Is leading char a single quote?\n         BE    MOVEQUOT            Yes, test.\n         CLI   QUOTSTRT,X'7F'      A double quote?\n         BE    MOVEQUOT            Yes, test.\n         B     NOQUOTE             No. Do regular processing on message\nMOVEQUOT DS    0H\n         LR    R0,R3               Address of start of message\n         AR    R0,R7               Add length of message\n         ST    R0,QUOTSTOR         Store address, one past the end\n         L     R1,QUOTSTOR         Get it back in a register\n         BCTR  R1,0                One less, to point to message end\n         CLC   QUOTSTRT,0(R1)      Is this the same as leading quote?\n         BNE   NOQUOTE             No. Go on to further tests.\n         LA    R3,1(,R3)           Yes. Bump start address past quote\n         BCTR  R7,0                Message is 2 chars shorter\n         BCTR  R7,0                Message is 2 chars shorter\n         B     NTDELETE            Don't test for blank or delete.\nNOQUOTE  DS    0H\n* -- >  Test for leading quote(s) - above\n         MVC   BLNKTST(4),0(R3)    Move first 4 chars to staging area\n         OC    BLNKTST(4),BLANKS   And uppercase them.\n         CLC   =C'-BLA',BLNKTST    Is it -BLA for blanks?\n         BE    BLNKWRT             Yes. Make a blank message.\n* -- >  Test for DEL(ETE)  below\n         CLC   =C'-DEL',BLNKTST    Is it -DEL to delete the message?\n         BE    YSDELETE            Yes. Delete this message number.\n         B     NTDELETE            No. Go on with regular processing.\n*                          >>>>>>  MESSAGE DELETION ROUTINE.\nYSDELETE DS    0H                  Delete the current message number.\n         OI    DELFLAG,X'01'       Turn on \"message deleted\" flag\n         MVC   MSGTEXT(125),ZERREC   Put hexzeros in message text.\n         B     GETMSGTE            Get out of this routine.\nNTDELETE DS    0H\n* -- >  Test for DEL(ETE)  above\n         BCTR  R7,0                ONE LESS FOR EXECUTE\n         B     WRMSGTXT\nBLNKWRT  DS    0H\n         L     R7,DEFBLNK          30 Chars in blank msg is default.\n         BCTR  R7,0                One less for EXECUTE\n         EX    R7,MOVBLNKS           MOVE THEM IN\n         B     BLNKWRTX              SKIP MESSAGE MOVE\nWRMSGTXT DS    0H\n         C     R7,=F'122'          One less than maximum.\n         BH    TRUNCMSG            Too big, send error message.\n         B     NOTRUNCM            Not too big. Write msg to BRODCAST.\nTRUNCMSG DS    0H\n         MVC   LINE+5(40),=C'Message must be 123 characters or less. '\n         LA    R0,46               Load length of message.\n         BAL   R4,MSG              Write it out.\n         B     EOJ8                Error, condition code 8, and out.\nNOTRUNCM DS    0H\n         MVC   MSGTEXT(125),BLANKMSG   Blank SEND message area.\n         EX    R7,MOVEMSGG         Move the notice text into it.\nBLNKWRTX DS    0H\n*        MVC   LINE,LINE-1         Clear message line.\n*        MVC   LINE,MSGTEXT        Move notice text into message line.\n*        LA    R0,1(,R7)           Load true message length.\n*        BAL   R4,MSG              Go write the message text out.\n         LA    R7,1(,R7)           Restore true message length.\n         ST    R7,LENTHMSG         And store it away for later.\n         B     GETMSGTE\nGETMSGTE DS    0H\n         L     R7,SAVEWRK7         RESTORE REGISTER CONTENTS\n         L     R8,SAVEWRK8         RESTORE REGISTER CONTENTS\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   FSTNOTI(3),R1BCPTR  SAVE RBA OF FIRST NOTICES INDEX\n         MVC   NUMNOTES(2),R1BCMAX SAVE MAXIMUM NUMBER OF NOTES\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   NUMRECS(4),R1RECNUM   SAVE TOTAL NUMBER OF RECORDS\n         ST    R7,SAVER7           SAVE REGISTER\n         L     R7,NUMRECS          PUT NUMBER OF RECORDS IN\n         BCTR  R7,0                MINUS ONE\n         ST    R7,HIWATER          HIGHEST RBA PERMITTED\n         L     R7,SAVER7           RESTORE REGISTER\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        ROUTINE TO DISPLAY HEX VALUES                            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS        ZERO OUT\n         MVC   FSRCRBA(3),ZEROS          ALL THE RBA\n         MVC   NEXTRBA(3),ZEROS            STORAGE AREAS\n         MVC   NFRERBA(3),ZEROS\n         MVC   MINRBA(3),=X'FFFFFF'    PUT A LARGE VALUE IN\n         MVI   ALLFLAG,X'00'\n         MVI   FULLFLAG,X'00'\n         MVC   MSGTEXT(125),BLANKMSG   MOVE BLANKS TO MSG AREA\n         MVC   OFFSETT(2),ZEROS\n         MVC   CMBLENG(2),ZEROS\n         MVC   NUMRECS(4),ZEROS\n         MVC   HIWATER(4),ZEROS        PREVENT S0CX\n         MVC   NFRERBA(3),ZEROS\n         BR    R9\n* ------------------------------------------------------------------ *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              SAVE CPPL POINTERS                                 *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\nMOVEMSGG MVC   MSGTEXT(*-*),0(R3)  EXECUTED\nMOVBLNKS MVC   MSGTEXT(0),BLANKMSG  << EXECUTED >>\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLANKMSG DC    CL125' '\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'Bad OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'You have to specify message text after the MSG Number,-\n                or -BLAnks or -DELete.'\nMESSAGE3 DC    C'You have to specify MSG Number after the command name.-\n               '\nMESSAGE4 DC    C'Message number parameter is not numeric.'\nMESSAGE5 DC    C'Message number greater than maximum of '\nMESS5NUM DC    C'    '\n         DC    C'. Request is not processed.'\nMESS5LEN EQU   *-MESSAGE5\nMESSAGE6 DC    C'Record pointed to, is not a NOTICES index record.'\nMESSAGE7 DC    C'End of NOTICES without finding the requested one.'\nMESSAGE8 DC    C'Record pointed to, is not a NOTICES message record.'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nSAVEBEGN DC    F'0'\nSAVEMSGN DS    0F\n         DC    H'0'\nMSGNHALF DC    H'0'\nMSGNCLR  DC    H'0'\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\n         DC    C' '\nDISPNNUM DC    CL4' '\n         DC    C' '\nDISPMXNM DC    CL4' '\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nDELFLAG  DC    X'00'\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nNUMNOTES DC    X'0000'             MAX NUMBER OF NOTICE RECORDS\nFSTNOTI  DC    X'000000'           STORE RBA OF FIRST NOTICE INDEX\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nMSGNLENG DC    X'00'               STORE MESSAGE NUMBER LENGTH HERE\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nPREVRBA  DC    X'000000'           RBA OF PREVIOUS MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMSGNRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nFREERBA  DC    X'000000'           RBA OF FREE MESSAGE SLOT FOUND\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMINRBA   DC    X'000000'\nNFRERBA  DC    X'000000'           NEW FREE SEARCH RBA FOR TYPE 5\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYNUMB  DS    0CL8                STORE TEST USERID HERE\nTRYNUMBI DS    CL7                 STORE TEST USERID HERE\nTRYNUMBF DS    CL1                 8TH CHARACTER\nSAVEID   DS    CL8                 STORE USERID HERE\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVE1501 DS    3F                  SAVE R15 THRU R1\nSAVER4   DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER7   DS    F                   SAVE REGISTER\nSAVER8   DS    F                   SAVE REGISTER\nSAVER9   DS    F                   SAVE BAL REGISTER\nSAVER9A  DS    F                   SAVE BAL REGISTER\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L     NOTICE READ\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nRDWI     READ  MDIDECB,DI,MF=L     INDEX READ\nRDWIEND  DS    0F\nRDWILEN  EQU   *-RDWI\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nALLFLAG  DS    X\nFULLFLAG DS    X\nOFFSETT  DS    H\nCMBLENG  DS    H\nMSGTEXT  DS    CL125\n         DS    CL130               Padding to 255 characters\nSAVEWRK7 DS    F\nSAVEWRK8 DS    F\nSAVERG9  DS    F\nLENTHMSG DS    F\nNUMRECS  DS    F\nHIWATER  DS    F\nQUOTSTRT DC    CL1' '\nQUOTEND  DC    CL1' '\nQUOTSTOR DC    F'0'\nBLNKTST  DC    CL4' '\n         DC    C' '\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IEZBITS\n         IKJZT301 DSECT=YES\n         IKJZT302 DSECT=YES\n         IKJZT303 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNRX01": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x02\\x01\\x05\\x11\\x1f\\x01\\x05\\x11/\\x11 \\x00\\x1a\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2005-04-21T00:00:00", "modifydate": "2005-04-22T11:20:02", "lines": 26, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "/*       REXX Sample for BCMNOTFY        */\n/*      Lowercase BRODCAST messages      */\n/*      ---------------------------      */\nADDRESS TSO\n\"ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\"\n\"BCMNOTFY 01 '---------------------------------------------------'\"\n\"BCMNOTFY 02 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 03 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 04 * *                                             * *\"\n\"BCMNOTFY 05 * *                                             * *\"\n\"BCMNOTFY 06 * *      WELCOME TO THE O-1  MVS SYSTEM...      * *\"\n\"BCMNOTFY 07 * *                                             * *\"\n\"BCMNOTFY 08 * *                                             * *\"\n\"BCMNOTFY 09 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 10 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 11 '---------------------------------------------------'\"\n\"BCMNOTFY 12 '      It is our great pleasure to serve your       '\"\n\"BCMNOTFY 13 '              computing needs!                     '\"\n\"BCMNOTFY 14 '                                                   '\"\n\"$$ BCMNUPD\"\n\"BCMNLIST\"\n\"OPER\" ,\n\"SE '  ',SAVE\" ,\n\"SE 15,DELETE\" ,\n\"END\"\n\"LISTBC\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNRX16": {"ttr": 8710, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x002\\x01\\x05\\x11\\x1f\\x01\\x05\\x11o\\x16#\\x00\\x16\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2005-04-21T00:00:00", "modifydate": "2005-04-26T16:23:32", "lines": 22, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "/*       REXX Sample for BCMNOTFY        */\n/*      Lowercase BRODCAST messages      */\n/*      ---------------------------      */\nADDRESS TSO\n\"ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\"\n\"BCMNOTFY 01 '---------------------------------------------------'\"\n\"BCMNOTFY 02 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 03 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 04 * *                                             * *\"\n\"BCMNOTFY 05 * *                                             * *\"\n\"BCMNOTFY 06 * *      WELCOME TO THE Z-16 MVS SYSTEM...      * *\"\n\"BCMNOTFY 07 * *                                             * *\"\n\"BCMNOTFY 08 * *                                             * *\"\n\"BCMNOTFY 09 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 10 * * * * * * * * * * * * * * * * * * * * * * * * * *\"\n\"BCMNOTFY 11 '---------------------------------------------------'\"\n\"BCMNOTFY 12 '      It is our great pleasure to serve your       '\"\n\"BCMNOTFY 13 '              computing needs!                     '\"\n\"BCMNOTFY 14 '                                                   '\"\n\"BCMNUPD\"      /* Must be Authorized TSO command */\n\"BCMNLIST\"\n\"LISTBC\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNUPD": {"ttr": 8712, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x03\\x01\\x05\\x10O\\x01\\x05\\x13\\x7f\\x10\\x17\\x01\\xe3\\x01\\xee\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2005-04-14T00:00:00", "modifydate": "2005-05-17T10:17:03", "lines": 483, "newlines": 494, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMNUPD TITLE 'BCMNUPD - AUTHORIZE UPDATE OF INCORE NOTICES TABLE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*           NAME:   BCMNUPD                                           *\n*                                                                     *\n*         SYNTAX:   BCMNUPD     (AS A TSO COMMAND)                    *\n*                                                                     *\n*       FUNCTION:   To set the TSVTNCTU bit in the TSVT (TSO Vector   *\n*                   Table) which, when on, forces a reading of        *\n*                   SYS1.BRODCAST to update the incore Notices        *\n*                   table.  LISTBC tests this bit and updates the     *\n*                   incore Notices, so any changes make by BCMNOTFY   *\n*                   are made readable by LISTBC, as soon as LISTBC    *\n*                   is executed once, by anybody on the system.       *\n*                                                                     *\n*                   This is correct for TSO/E 3.3.0 and later.        *\n*                   At TSO/E 2.6.0 and below, in order to             *\n*                   force a read of the BRODCAST dataset, you         *\n*                   have to issue an OPER command with a SEND         *\n*                   ' ',SAVE subcommand to actually update a          *\n*                   message, after the TSVTNCTU bit has been set.     *\n*                                                                     *\n*                                                                     *\n*      OPERATION:   APF AUTHORIZED  -  SETCODE AC(1)                  *\n*                                                                     *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  APR 26, 05                                        *\n*                                                                     *\n*         CHANGES:  04/26/05  -  Fix messages to correctly describe   *\n*          (Version 1.4)         the condition encountered.  If not   *\n*                                APF authorized, then say so.  If     *\n*                                there is no TSVT, and therefore no   *\n*                                need to do an update, then say so.   *\n*                                (This is for an old version of MVS.) *\n*                                Finally, if the bit has been updated *\n*                                successfully, then say accurately    *\n*                                under what conditions the incore     *\n*                                Notices table will be accurately     *\n*                                updated.                             *\n*                                                                     *\n*                                For z/OS 1.2 and below:  You need    *\n*                                an actual write request to BRODCAST  *\n*                                with an OPER SEND '  ',SAVE in order *\n*                                for the incore Notices to be rewrit- *\n*                                ten.  From z/OS 1.3 onward, a mere   *\n*                                execution of LISTBC by anyone, will  *\n*                                be enough, when the TSVTNCTU bit is  *\n*                                on.  This is for TSO/E 3.3.0.        *\n*                                                                     *\n*         CHANGES:  05/17/05  -  Include a message to indicate the    *\n*          (Version 1.5)         release of TSO/E that is currently   *\n*                                running.                             *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n***********************************************************************\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMNUPD  CSECT\n         USING BCMNUPD,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMNUPD VER 1.5'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         STH   R3,CMBLENG          SAVE COMMAND BUFFER LENGTH\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         STH   R3,OFFSETT          SAVE OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n* -----\n         ST    R4,SAVER4X          Save work register.\n         USING CVT,R4\n         L     R4,16               CVT\n         L     R4,CVTTVT           TSVT\n         DROP  R4\n         USING TSVT,R4             Use the IKJTSVT macro.\n         CLC   =C'TSVT'(4),0(R4)   Is the TSVT acronym there?\n         BNE   NOCORUPD            No. Report this must be an old MVS.\n*  ---  >                  Fill in current TSO/E release.   below\n         MVC   MSG7+27(1),TSVTLVER\n         MVC   MSG7+29(2),TSVTLREL\n         MVC   MSG7+32(1),TSVTLMOD\n*  ---  >                  Fill in current TSO/E release.   above\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\nKZ       MODESET KEY=ZERO\n         OI    TSVTFLG1,TSVTNCTU   Flag incore Notices need updating.\n         DROP  R4\n         L     R4,SAVER4X          Restore work register.\nNZ       MODESET KEY=NZERO\n*                          Write \"BIT SUCCESSFULLY UPDATED\" messages.\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGET\n         LA    R0,L'MESSAGET\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGEU\n         LA    R0,L'MESSAGEU\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE2\n         LA    R0,L'MESSAGE2\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE3\n         LA    R0,L'MESSAGE3\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE4\n         LA    R0,L'MESSAGE4\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE5\n         LA    R0,L'MESSAGE5\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE6\n         LA    R0,L'MESSAGE6\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MSG7\n         LA    R0,L'MSG7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGEU\n         LA    R0,L'MESSAGEU\n         BAL   R4,MSG\n         B     UPDTEND\nNOTAUTH  DS    0H          Write \"COMMAND NOT AUTHORIZED\" message.\n         L     R4,SAVER4X          Restore work register.\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGET\n         LA    R0,L'MESSAGET\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGEU\n         LA    R0,L'MESSAGEU\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE0\n         LA    R0,L'MESSAGE0\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGEU\n         LA    R0,L'MESSAGEU\n         BAL   R4,MSG\n         B     EOJ0\nNOCORUPD DS    0H          Write \"OLD MVS VERSION\" message.\n         L     R4,SAVER4X          Restore work register.\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGET\n         LA    R0,L'MESSAGET\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGEU\n         LA    R0,L'MESSAGEU\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGE1\n         LA    R0,L'MESSAGE1\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE,MESSAGEU\n         LA    R0,L'MESSAGEU\n         BAL   R4,MSG\nUPDTEND  DS    0H\n         B     EOJ0\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN ROUTINE TO SEND MESSAGE                     --- *\n* ------------------------------------------------------------------ *\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ4     LA    R15,4               SET CC = 4.\n         B     EOJ\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        ROUTINE TO DISPLAY HEX VALUES                            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   MSGTEXT(125),BLANKMSG   MOVE BLANKS TO MSG AREA\n         MVC   MSG7,MESSAGE7\n         BR    R9\n* ------------------------------------------------------------------ *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              SAVE CPPL POINTERS                                 *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLANKMSG DC    CL125' '\nMESSAGET DC    C'BCMNUPD VER 1.5 - &SYSDATE - &SYSTIME '\nMESSAGEU DC    C'---------------------------------- '\nMESSAGE0 DC    C'BCMNUPD VER 1.5 - TSVTNCTU bit has not been set becaus-\n               e APF authorization is needed.'\nMESSAGE1 DC    C'BCMNUPD VER 1.5 - TSVT is not present. This is an olde-\n               r MVS version.'\nMESSAGE2 DC    C'Set the TSVTNCTU bit which signals that the incore Not-\n               ices table has to be updated.'\nMESSAGE3 DC    C'The bit asking for an update to the incore Notices tab-\n               le, has been set.'\nMESSAGE4 DC    C'At TSO/E 3.3.0 and above, running LISTBC is enough to -\n               force an update the incore Notices table.'\nMESSAGE5 DC    C'At TSO/E 2.6.0 and below, it is necessary to do an OPE-\n               R SEND '' '',SAVE first.'\nMESSAGE6 DC    C'z/OS 1.2 comes bundled with TSO/E 2.6.0. z/OS 1.3 come-\n               s with TSO/E 3.3.0.'\nMESSAGE7 DC    C'This release of TSO/E is:  x.xx.x .'\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nSAVE1401 DS    4F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\n         DS    CL72                PADDING\n         DC    C' '\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER4X  DS    F                   SAVE WORK REGISTER VALUE\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\nOFFSETT  DS    H\nCMBLENG  DS    H\nMSGTEXT  DS    CL125\n         DS    CL130               Padding to 255 characters\nMSG7     DS    CL35\n         DS    0D                  Doubleword boundary\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJTSVT\n         IEZIOB   DSECT=YES\n         IEZBITS\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMNUPD$": {"ttr": 8963, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x000\\x01\\x05\\x10O\\x01\\x05\\x10O 7\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-04-14T00:00:00", "modifydate": "2005-04-14T20:37:30", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(BCMNUPD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   BCMNUPD\n SETSSI  CB469247\n SETCODE AC(1)\n NAME    BCMNUPD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMREST": {"ttr": 8965, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x002\\x00\\x99\\x12\\x9f\\x01\\x06\\x01_\\x12I\\x02\\x84\\x03c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "1999-05-09T00:00:00", "modifydate": "2006-01-15T12:49:32", "lines": 644, "newlines": 867, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMREST  TITLE 'BCMREST - RESTORE BRODCAST DATASET FROM A BCMDUMP'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS A BATCH PROGRAM TO RESTORE A      *\n*                   COPY OF SYS1.BRODCAST FROM A BCMDUMP BACKUP.      *\n*                                                                     *\n*          THIS PROGRAM TRIES TO RESTORE A COPY OF SYS1.BRODCAST      *\n*          IN SUCH A WAY, SO IT WILL BE USABLE, IF RENAMED TO         *\n*          SYS1.BRODCAST.  THEREFORE, THE PROGRAM ONLY ALLOWS ONE     *\n*          EXTENT.  IF YOU ALLOCATE SECONDARY EXTENTS IN YOUR         *\n*          CREATION JCL (AS ILLUSTRATED BELOW), THEY WILL BE          *\n*          IGNORED.  THE PROGRAM REPORTS EXACTLY HOW LARGE YOU        *\n*          SHOULD ALLOCATE YOUR NEW DATASET, AND YOU SHOULD MAKE      *\n*          IT EXACTLY THAT LARGE.  THIS IS BECAUSE THE DATASET IS     *\n*          A DIRECT ACCESS DATASET, AND IT HAS A FIXED NUMBER OF      *\n*          SLOTS.  AS COPIED, YOU CAN'T EXPAND IT.                    *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   TO RESTORE A SYS1.BRODCAST DATASET OR A COPY      *\n*                   IN THE SAME FORMAT, FROM A BCMDUMP FB-130 FILE.   *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  MAY 09, 99                                        *\n*                                                                     *\n*                                                                     *\n*       JCL TO INVOKE:                                                *\n*                                                                     *\n* //BCMREST  EXEC PGM=BCMREST,REGION=3M                               *\n* //STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD                            *\n* //BRODCAST DD  DSN=SBGOLOB.BRODCAST.COPY,DISP=(NEW,CATLG,DELETE),   *\n* //         DCB=(DSORG=DA,RECFM=FB,BLKSIZE=129,KEYLEN=1,LRECL=129),  *\n* //         SPACE=(TRK,(120,30),RLSE),UNIT=SYSDA                     *\n* //BRODDUMP DD  DISP=SHR,DSN=SBGOLOB.BRODCAST.DUMP                   *\n* //SYSPRINT DD  SYSOUT=*                                             *\n*                                                                     *\n*                                                                     *\n*         CHANGES:                                                    *\n*                                                                     *\n*    26 AUG 2005 - WHEN ALLOCATED SPACE IS EXACTLY RIGHT, MAKE SURE   *\n*                  THAT YOU COME TO A NORMAL END, AND REPORT IT       *\n*                  CORRECTLY.  ALSO, REPORT RETURN CODE OF 8 IF       *\n*                  THE ALLOCATED SPACE FOR THE RESTORED BRODCAST      *\n*                  DATASET IS TOO SMALL.                              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMREST  CSECT\n         USING BCMREST,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMREST VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD FIRST BASE REG\n         LA    R10,4095(,R12)      INITIALIZE SECOND BASE      SG 05/99\n         LA    R10,1(,R10)         FINISH LOADING SECOND BASE  SG 05/99\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         SPACE 1\nDOBROD   OPEN  (BRODCAST,(OUTPUT))                             SG 05/99\n         OPEN  (BRODDUMP,(INPUT))                              SG 05/99\n         OPEN  (SYSPRINT,(OUTPUT))                             SG 05/99\n         BAL   R9,HEADREAD         READ HEADER RECORD OF BCMDUMP FILE\n*                                  AND EXTRACT ESSENTIAL DATASET INFO\n*                                  FOR THE RESTORE.................\n         L     R11,HIGHVAL         SAVE TOTAL RECORD COUNT     SG 05/99\n         CVD   R11,CVDWORK         CONVERT TO DECIMAL          SG 05/99\n         MVC   STORNUM1,CVDWORK    STORE AWAY FOR REPORTING    SG 05/99\n         BCTR  R11,0               LOWER BY HEADREAD WRITE     SG 05/99\n         BAL   R9,OUTHEADR         WRITE SYSPRINT HEADER       SG 05/99\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO LOAD ALL THE BRODCAST RECORDS.             --- *\n* ------------------------------------------------------------------ *\nLOADBRD  DS    0H                  READ THROUGH USERID RECORDS\n         GET   BRODDUMP,INREC      GET THE FIRST RECORD OF DUMP\n         L     R7,RECONTRK         INCREMENT                   SG 05/99\n         LA    R7,1(,R7)            THE                        SG 05/99\n         ST    R7,RECONTRK           COUNT                     SG 05/99\n         L     R7,NUMBREC          INCREMENT                   SG 05/99\n         LA    R7,1(,R7)            THE                        SG 05/99\n         ST    R7,NUMBREC            COUNT                     SG 05/99\n*  DELETED USER MESSHAGE RECORDS X'FF' IN THE KEY FIELD, HAVE  SG 05/99\n*  TO HAVE THE \"R\" PART OF THE RECORD'S TTR OR CCHHR INSERTED  SG 05/99\n*  INTO THE FIRST DATA BYTE OF THE RECORD.  IF THIS IS NOT     SG 05/99\n*  DONE, THE TSO SEND COMMAND GOES HAYWIRE.  FOR THIS REASON,  SG 05/99\n*  WHEN COPYING SYS1.BRODCAST BETWEEN TWO DIFFERENT DEVICE     SG 05/99\n*  TYPES, THIS VALUE HAS TO BE FILLED IN FOR THE CURRENT       SG 05/99\n*  DEVICE TYPE, OTHERWISE IT WILL GO OUT OF SYNCHRONIZATION.   SG 05/99\n         CLI   INREC,X'FF'         IS THIS A DELETED RECORD?   SG 05/99\n         BNE   GOWRITE             NO, DON'T HAVE TO PUT REC # SG 05/99\n         MVC   INREC+1(1),RECONTRK+3   MOVE IN RECORD NUMBER   SG 05/99\nGOWRITE  DS    0H                                              SG 05/99\n         WRITE MDLDECB,SF,BRODCAST,INREC,'S',MF=E              SG 05/99\n         C     R15,=F'8'           CHECK IF END OF EXTENT      SG 05/99\n         BNE   GOSKIP1             NO. TRY IF END OF TRACK     SG 05/99\n         MVI   EOJFLAG,X'FF'       YES. INDICATE PRELIM END.   SG 05/99\n         B     ENDCHECK            FINISH PREMATURELY BUT CHECK WRITE\nGOSKIP1  C     R15,=F'4'           CHECK IF END OF TRACK       SG 05/99\n         BNE   GOCHECK             NO. STILL IN MID OF TRACK   SG 05/99\n         CVD   R7,CVDWORK          CONVERT LAST TRACK NUMBER   SG 05/99\n         CP    STORNUM2,=P'0'      NONZERO NUMBER?             SG 05/99\n         BNE   GOSKIP2             YES. ONLY DO IT ONCE        SG 05/99\n         MVC   STORNUM2,CVDWORK    STORE IT AWAY               SG 05/99\nGOSKIP2  XR    R7,R7               ZERO REGISTER               SG 05/99\n         ST    R7,RECONTRK         RE-INITIALIZE REC/TRK       SG 05/99\nGOCHECK  DS    0H                                              SG 05/99\n         CHECK MDLDECB                                         SG 05/99\n         BCT   R11,LOADBRD         CYCLE THROUGH ALL RECORDS   SG 05/99\n         B     EOJ\n* ------------------------------------------------------------------ *\nENDCHECK DS    0H                  CHECK RECORD LAST WRITTEN.\n         CHECK MDLDECB\nEOJ      DS    0H                  BYE.\n         L     R7,NUMBREC          REPORT NUMBER OF RECORDS    SG 05/99\n         CVD   R7,CVDWORK            WHICH WERE ACTUALLY       SG 05/99\n         MVC   STORNUM3,CVDWORK        LOADED.                 SG 05/99\n* -- >\n         CLC   STORNUM3,STORNUM1   WAS IT EXACT?\n         BNE   PRELMEND            NO. REAL PRELIMINARY END\n         MVI   EOJFLAG,X'00'       ACTUALLY OK.  MARK NORMAL END.\nPRELMEND DS    0H\n* -- >\n         BAL   R9,FINALRPT         PRINT THE FINAL REPORT      SG 05/99\n         CLI   EOJFLAG,X'FF'       ABNORMAL END ?              SG 05/99\n         BNE   EOJGO1              NO. PRINT THAT IT'S NORMAL  SG 05/99\n         BAL   R9,EOJPREL          YES. PRINT DIAGNOSTICS,     SG 05/99\n         B     EOJGO2              AND SKIP NORMAL.            SG 05/99\nEOJGO1   DS    0H                  NORMAL END.                 SG 05/99\n         BAL   R9,EOJNORM          PUT OUT MESSAGE FOR NORMAL  SG 05/99\nEOJGO2   DS    0H\n         CLI   EOJFLAG,X'FF'       PRELIMINARY END OF LOAD ?\n         BNE   EOJGO2A             NO. SET RC = 0\n         LA    R5,8                YES. SET RC = 8 AND SAVE IN R5\n         B     EOJGO2B\nEOJGO2A  DS    0H\n         LA    R5,0                SAVE RC IN R5 PAST FREEMAIN\nEOJGO2B  DS    0H\n         CLOSE (BRODCAST)\n         CLOSE (BRODDUMP)\n         CLOSE (SYSPRINT)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\nEOJGO3   DS    0H\n         LR    R15,R5              LOAD RETURN CODE INTO R15\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         LM    R14,R12,12(R13)\nEOJN     BR    R14\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD GET   BRODDUMP,INREC      GET THE FIRST RECORD OF DUMP\n         L     R7,=F'1'            SHOW IT'S THE FIRST         SG 05/99\n         ST    R7,RECONTRK           RECORD IN THE TRACK       SG 05/99\n         SPACE\n         LA    R3,INREC+1          INFO THAT SHOULD BE ON HEADER\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   HIGHVAL(4),R1RECNUM  SAVE NUMBER OF RECDS IN BRODCAST\n         L     R7,NUMBREC          INCREMENT                   SG 05/99\n         LA    R7,1(,R7)            THE                        SG 05/99\n         ST    R7,NUMBREC            COUNT                     SG 05/99\n         WRITE MDLDECB,SF,BRODCAST,INREC,'S',MF=E              SG 05/99\n         CHECK MDLDECB                                         SG 05/99\n         DROP  R3\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   PRINT INSTRUCTIONS AND OTHER INFORMATION AT THE BEGINNING     *\n*   OF THE PROGRAM EXECUTION.                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nOUTHEADR DS    0H                                              SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),NEWPAGE         PAGE EJECT CHARACTER SG 05/99\n         MVC   OUTLINE+10(60),SYSMSG01     PRINT HEADER        SG 05/99\n         PUT   SYSPRINT,OUTLINE            DO PRINT            SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+10(49),SYSMSG02     PRINT UNDERLINES    SG 05/99\n         PUT   SYSPRINT,OUTLINE            DO PRINT            SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3              SG 05/99\n         PUT   SYSPRINT,OUTLINE            ACTUALLY SKIP 6     SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG03     PUT OUT DOC         SG 05/99\n         PUT   SYSPRINT,OUTLINE             INSTRUCTIONS.      SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG04     (A BUNCH OF LINES)  SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG05                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG06                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG07                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG08                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG09                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE+19(49),SYSMSG10                         SG 05/99\n         PUT   SYSPRINT,OUTLINE                                SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3 LINES,       SG 05/99\n         PUT   SYSPRINT,OUTLINE            PREPARING FOR       SG 05/99\n         BR    R9                          FINAL REPORT.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    NORMAL END OF JOB.  ALL RECORDS LOADED PROPERLY.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJNORM  DS    0H                                              SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG15      PUT OUT NORMAL EOJ  SG 05/99\n         PUT   SYSPRINT,OUTLINE            MESSAGE.            SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    ABNORMAL END.  PROBABLY NOT ENOUGH PRIMARY SPACE ALLOCATED   *\n*    TO FIT IN ALL THE RECORDS FROM THE COPIED SYS1.BRODCAST,     *\n*    INTO THE FIRST EXTENT.  THIS CODE REPORTS ON HOW MANY        *\n*    RECORDS WERE ACTUALLY LOADED, AND ON EXACTLY HOW MANY        *\n*    TRACKS HAVE TO BE ALLOCATED IN THE FIRST EXTENT, SO THE      *\n*    COPY WILL BE ABLE TO FUNCTION AS A NEW SYS1.BRODCAST         *\n*    DATASET.                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJPREL  DS    0H                     PUT OUT 'SPACE' MESSAGES SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG16    MOVE MESSAGE TEXT     SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG17    MOVE MESSAGE TEXT     SG 05/99\n         OI    STORNUM4+7,X'0F'          MOVE IN REQUIRED      SG 05/99\n         UNPK  OUTLINE+40(8),STORNUM4      NUMBER OF TRACKS    SG 05/99\n         BAL   R5,STRIPZ1                STRIP LEADING ZEROS   SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG18    MOVE MESSAGE TEXT     SG 05/99\n         PUT   SYSPRINT,OUTLINE          PRINT OUT             SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    REPORT STATISTICS ON NUMBER OF RECORDS EXPECTED, NUMBER OF   *\n*    RECORDS ACTUALLY LOADED, NUMBER OF RECORDS PER TRACK, THAT   *\n*    WERE DETERMINED FOR THIS DEVICE TYPE, AND ACTUAL NUMBER OF   *\n*    TRACKS ON THIS DEVICE WHICH WERE NEEDED TO ACCOMMODATE ALL   *\n*    THE RECORDS FROM THE COPIED SYS1.BRODCAST DATASET.           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFINALRPT DS    0H                                              SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),THRLINE          SKIP 3              SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG11      NUMBER OF RECORDS   SG 05/99\n         OI    STORNUM1+7,X'0F'              EXPECTED          SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM1                          SG 05/99\n         BAL   R5,STRIPZ                   REMOVE LEADING ZROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG12      NUMBER OF RECORDS   SG 05/99\n         OI    STORNUM3+7,X'0F'              ACTUALLY LOADED   SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM3                          SG 05/99\n         BAL   R5,STRIPZ                   STRIP LEADING ZEROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG13      NUMBER OF RECORDS   SG 05/99\n         OI    STORNUM2+7,X'0F'              THAT FIT ONTO ONE SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM2          TRACK.          SG 05/99\n         BAL   R5,STRIPZ                   STRIP LEADING ZEROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT LINE        SG 05/99\n         MVC   OUTLINE(133),OUTLINE-1      BLANK OUTPUT LINE   SG 05/99\n         MVC   OUTLINE(1),TWOLINE          SKIP 2              SG 05/99\n         MVC   OUTLINE+9(49),SYSMSG14      NUMBER OF TRACKS    SG 05/99\n         MVC   STORWRK1(4),=X'00000000'    CLEAR UPPER ORDER OF BIG #\n         MVC   STORWRK1+4(8),STORNUM1      LOAD SMALL # INTO BIG #\n         DP    STORWRK1+3(9),STORNUM2+5(3)   TO BE ALLOCATED\n         MVC   STORNUM4+3(5),STORWRK1+4        SO THAT ALL\n         MVC   STORNUM5+5(3),STORWRK1+9          RECORDS FIT\n         CP    STORNUM5,=P'0'                      EXACTLY.    SG 05/99\n         BE    FINOADD                     CALCULATE NUMBER.   SG 05/99\n         AP    STORNUM4,=P'1'                                  SG 05/99\nFINOADD  MVC   OUTLINE+9(49),SYSMSG14                          SG 05/99\n         OI    STORNUM4+7,X'0F'                                SG 05/99\n         UNPK  OUTLINE+62(8),STORNUM4      REPORT THE NUMBER.  SG 05/99\n         BAL   R5,STRIPZ                   STRIP LEADING ZEROS SG 05/99\n         PUT   SYSPRINT,OUTLINE            PUT OUT RECORD      SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   ROUTINE TO STRIP LEADING ZEROS.  I'M DOING THIS TO AVOID A    *\n*   POSSIBLE OCCASION FOR A S0C7, WHICH CAN HAPPEN WHEN YOU DO    *\n*   AN ED INSTRUCTION THAT FAILS. UNPK DOESN'T HAVE THIS PROBLEM. *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSTRIPZ1  DS    0H                                              SG 05/99\n         LA    R11,7                                           SG 05/99\n         LA    R4,OUTLINE+40                                   SG 05/99\n         B     STRIPZL                                         SG 05/99\nSTRIPZ   DS    0H                                              SG 05/99\n         LA    R11,7                                           SG 05/99\n         LA    R4,OUTLINE+62                                   SG 05/99\nSTRIPZL  CLC   0(1,R4),=C'0'                                   SG 05/99\n         BNE   STRIPZE                                         SG 05/99\n         MVI   0(R4),X'40'                                     SG 05/99\n         LA    R4,1(,R4)                                       SG 05/99\n         BCT   R11,STRIPZL                                     SG 05/99\nSTRIPZE  BR    R5                                              SG 05/99\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   LEVEL(7),BLANKS\n         MVI   OUTLINE-1,C' '        INITIALIZE BLANK\n         MVC   OUTLINE(133),OUTLINE-1  BLANK SYSPRINT OUTPUT AREA\n         MVC   HIGHVAL(4),ZERRECX    ZERO OUT HIGHVAL COUNT    SG 05/99\n         MVC   NUMBREC(4),ZERRECX    ZERO OUT RECORD COUNTER   SG 05/99\n         MVC   INREC-2(2),ZERRECX    INITIALIZE INPUT AREA    SG 05/99\n         MVC   INREC(130),ZERRECX    INITIALIZE INPUT AREA    SG 05/99\n         MVC   INHDR(130),ZERRECX    INITIALIZE HEADER AREA   SG 05/99\n         MVI   RC15,X'00'            RETURN CODE AREA          SG 05/99\n         MVI   EOJFLAG,X'00'                                   SG 05/99\n         ZAP   STORNUM1,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM2,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM3,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM4,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM5,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM6,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM7,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         ZAP   STORNUM8,=P'0'        INITIALIZE PACKED FIELDS  SG 05/99\n         MVC   RECONTRK(4),ZERRECX   COUNTER FOR RECORD NUMBER SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nZERRECX  DS    0CL130                                          SG 05/99\n         DC    130X'00'                                        SG 05/99\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nNEWPAGE  DC    C'1'\nNEXTLIN  DC    C' '\nTWOLINE  DC    C'0'\nTHRLINE  DC    C'-'\nNOLINE   DC    C'+'\nSYSMSG01 DC    C'            SYS1.BRODCAST RESTORE PROGRAM  -  VERSION X\n               1.2   '\nSYSMSG02 DC    C'            ------------- ------- -------        '\nSYSMSG03 DC    C'THIS PROGRAM CREATES A COPY OF THE SYS1.BRODCAST '\nSYSMSG04 DC    C'DATASET, FROM A BCMDUMP FILE, WHICH WAS CREATED  '\nSYSMSG05 DC    C'FROM SYS1.BRODCAST, OR ANOTHER COPY OF IT.  THE  '\nSYSMSG06 DC    C'RESTORED DATASET SHOULD RESIDE IN ONE EXTENT.    '\nSYSMSG07 DC    C'THIS PROGRAM CAN COPY SYS1.BRODCAST ACROSS DEVICE'\nSYSMSG08 DC    C'TYPES OF DIFFERENT GEOMETRY, AND WILL REPORT ON  '\nSYSMSG09 DC    C'HOW MANY TRACKS, EXACTLY, SHOULD BE USED FOR THE '\nSYSMSG10 DC    C'ALLOCATION OF THE OUTPUT DATASET.                '\nSYSMSG11 DC    C'EXPECTED NUMBER OF RECORDS IN COPY-FROM HEADER  :'\nSYSMSG12 DC    C'NUMBER OF RECORDS ACTUALLY LOADED INTO THE COPY :'\nSYSMSG13 DC    C'NUMBER OF RECORDS PER TRACK FOR THIS DEVICE TYPE:'\nSYSMSG14 DC    C'EXPECTED NUMBER OF TRACKS TO BE ALLOCATED       :'\nSYSMSG15 DC    C'  LOADING ACTION COMPLETED SUCCESSFULLY .        '\nSYSMSG16 DC    C'LOADING INTERRUPTED UNEXPECTEDLY....             '\nSYSMSG17 DC    C'PLEASE RERUN, AND ALLOCATE                TRACKS '\nSYSMSG18 DC    C' IN A SINGLE EXTENT.                             '\nMASK4    DC    XL4'40202120'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL10'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=PS,           SEQUENTIAL....                      X\n               MACRF=(WL),         LOAD OF BDAM FILE                   X\n               RECFM=F,            FIXED LENGTH                        X\n               KEYLEN=1            SIZE OF KEY\nBRODDUMP DCB   DSORG=PS,DDNAME=BRODDUMP,MACRF=GM,EODAD=EOJ,            X\n               RECFM=FB,LRECL=130\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\n         SPACE\n         SPACE 3\n         LTORG\n         SPACE\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nHIGHVAL  DS    F                   NUMBER OF RECORDS IN BRODCAST\nNUMBREC  DS    F                   COUNT OF RECORDS LOADED\nRECONTRK DS    F                   COUNT RECORDS ON THIS TRACK\nRC15     DS    C                   STORE RETURN CODE FROM WRITE\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\n         DS    0F                  ALIGN ON FULLWORD\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\nINHDR    DS    CL130                                           SG 05/99\n         DS    XL2                                             SG 05/99\nINREC    DS    CL130                                           SG 05/99\n         DS    0F\nWRTWR    WRITE MDLDECB,SF,MF=L\nWRTWREND DS    0F\nWRTWRLEN EQU   *-WRTWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nEOJFLAG  DS    X\n         DS    CL1                                             SG 05/99\nOUTLINE  DS    CL133                                           SG 05/99\n         DS    CL9                 FILLER                      SG 05/99\n         DS    0D                                              SG 05/99\nCVDWORK  DS    D                                               SG 05/99\nSTORNUM1 DS    PL8                                             SG 05/99\nSTORNUM2 DS    PL8                                             SG 05/99\nSTORNUM3 DS    PL8                                             SG 05/99\nSTORNUM4 DS    PL8                                             SG 05/99\nSTORNUM5 DS    PL8                                             SG 05/99\nSTORNUM6 DS    PL8                                             SG 05/99\nSTORNUM7 DS    PL8                                             SG 05/99\nSTORNUM8 DS    PL8                                             SG 05/99\nSTORWRK1 DS    PL12\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMREST$": {"ttr": 9221, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x99\\x12\\x9f\\x00\\x99\\x13o\\x11@\\x00\\n\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1999-05-09T00:00:00", "modifydate": "1999-05-16T11:40:00", "lines": 10, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBR  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//BCMREST  EXEC PGM=BCMREST,REGION=3M\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//BRODCAST DD  DSN=SBGOLOB.BRODCAST.COPY,DISP=(NEW,CATLG,DELETE),\n//         DCB=(DSORG=DA,RECFM=FB,BLKSIZE=129,KEYLEN=1,LRECL=129),\n//         SPACE=(TRK,(31,30),RLSE),UNIT=SYSDA\n//BRODDUMP DD  DISP=SHR,DSN=SBGOLOB.BRODCAST.DUMP\n//SYSPRINT DD  SYSOUT=*                                        SG 05/99\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMSCAN": {"ttr": 9223, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x01\\x00\\x95\\x14\\x8f\\x01\\x06\\x01_\\x14\\x08\\x03\\xf5\\x03\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1995-05-28T00:00:00", "modifydate": "2006-01-15T14:08:01", "lines": 1013, "newlines": 798, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'ANALYZE SYS1.BRODCAST DATASET'\n*------------------------------------------------------------------*\n*\n*          B C M S C A N   ( SCAN BROADCAST )   VERSION  2.0\n*\n*\n*        COURTESY:  JIM MARSHALL, CAPT, USAF-RET\n*                   U. S. TREASURY / FINANCIAL MANAGEMENT SERVICE\n*                   3700 EAST-WEST HIGHWAY\n*                   HYATTSVILLE, MD  20782\n*                   202-874-8353      FAX: 202-874-8551\n*\n*        BASED ON THE \"BRODSCAN\" PROGRAM ORGINALLY WRITTEN BY\n*        RICHARD G. NIKULA, 7/83, WASHINGTON STATE DEPARTMENT OF\n*        TRANSPORTATION. THERE WERE MODIFICATIONS LATER ADDED TO\n*        ANOTHER VERSION OF THE PROGRAM BY P. A. MOINTEL, AMDAHL\n*        ITALY (WOW, SPEAK ABOUT \"SHARE'NG\").\n*\n*        THIS PROGRAM ANALYZES THE TSO BROADCAST DATASET.  IT\n*        DISPLAYS THE NUMBER OF AVAILABLE BLOCKS AND HOW THEY\n*        ARE USED.  IT ALSO DISPLAYS THE TSO USERS WHO HAVE\n*        MESSAGES WAITING.  IN ADDITION IT ALSO DOES A VALIDITY\n*        CHECK ON RECORDS WHICH ARE IN THE MESSAGE POOL TO ASSURE\n*        THEY ARE CHAINED OFF OF A USER RECORD.  ACCORDING TO\n*        DOCUMENTATION, INSTANCES OCCUR WHICH CAN RESULT IN THESE\n*        GARBAGE RECORDS EXISTING.\n*\n*        SO WHY HAVE I CHOSE TO DO ANOTHER VERSION. GOT INTERESTED\n*        IN THE BRODCAST BECAUSE OURS WAS ALWAYS FILLING UP AND WE\n*        DID NOT KNOW WHY. SO RATHER THAN REINVENT THE WHEEL, I\n*        WENT TO LATEST CBT TAPE AND HERE THESE WERE; AT THE SHOP\n*        I AM A HERO!!!\n*\n*        NOW TO UNDERSTAND THE WHOLE PROCESS, I LOOKED AT THE CODE\n*        AND THAT WAS A BIT TOUGH, NO DSECTS OR INSIGHTS INTO HOW\n*        THE BRODCAST DATA SET IS BUILT AND MAINTAINED.  UNLESS YOU\n*        HAVE A COMPLETE OS/MVT SYSTEM LIVING IN YOUR ATTIC, YOU\n*        PROBABLY WOULD NOT HAVE THE LAST OS/MVT PLM VOLUME 3 WHICH\n*        HAS THE FORMAT DEFINED.  SO AS A SUMMER PROJECT, I HAVE\n*        DECIDED TO TRY TO DECIPHER THE CODE BELOW, ADD DSECTS, AND\n*        DECIPHER THE CODE BELOW SO WE WILL ALL HAVE THE INSIGHTS\n*        THESE GUYS HAD WHEN THEY DID THE GREAT WORK. WITHOUT\n*        RICHARD'S WORK, I WOULD BE LOST. MOINTEL ADDED SOME NEAT\n*        THINGS WHICH I WILL TRY TO FOLD INTO THIS PROGRAM. IF\n*        ANYONE FINDS THINGS OUT, LET ME KNOW. THANKS.\n*\n*\n*        SOME INFORMATION COMPLIMENTS OF:\n*\n*        \"TSO COMMAND PROCESSOR PLM - VOL. 4 (RELEASE 20.1)\n*\n*        'SYS1.BRODCAST' CONTAINS 6 BASIC TYPES OF RECORDS, EACH\n*        OF WHICH IS 130 CHARACTERS IN LENGTH. EACH RECORD BEGINS\n*        WITH A UNIQUE ONE-BYTE KEY FIELD WHICH IDENTIFIES THE\n*        RECORD TYPE.  RECORD 1 AND THE 'NOTICES' DIRECTORY AND\n*------------------------------------------------------------------*\n         EJECT\n*------------------------------------------------------------------*\n*        RECORD TYPE.  RECORD 1 AND THE 'NOTICES' DIRECTORY AND\n*        'NOTICES' MESSAGE RECORDS ARE LOCATED IN THE FIXED PART\n*        OF THE BRODCAST DATA SET AT THE BEGINNING. THE 'MAIL'\n*        DIRECTORY AND MESSAGE RECORDS WILL APPEAR RANDOMLY\n*        THROUGHOUT THE REMAINDER OF 'SYS1.BRODCAST'.\n*        THE SIX RECORD TYPES AND THEIR KEYS ARE:\n*\n*        X'00'     BRODCAST 'NOTICES' DIRECTORY RECORD.\n*\n*        X'01'     USER 'MAIL' DIRECTORY RECORD.\n*\n*        X'02'     BROADCAST 'NOTICES' MESSAGE RECORD.\n*\n*        X'03'     USER 'MAIL' MESSAGE RECORD.\n*\n*        X'04'     FIRST RECORD OF 'SYS1.BRODCAST' DATA SET.\n*\n*        X'05'     RBA ADDRESS OF FIRST DUMMY RECORD AVAILABLE.  JDM1\n*\n*        X'FF'     DUMMY INACTIVE 'MAIL' MESSAGE RECORD.\n*\n*        THE 'BDAM' ACCESS METHOD READS THESE RECORDS WITHOUT\n*        KEYS, SO THE KEY IDENTIFIER IS NOT READ IN WITH THE\n*        REMAINING 129 CHARACTERS OF EACH RECORD.\n*\n*\n*        JCL TO INVOKE:\n*\n*            //BRODCAST EXEC PGM=BCMSCAN,REGION=2M\n*            //STEPLIB  DD  -- NONAUTHORIZED LIBRARY IF YOU CHOOSE --\n*            //BRODMAP  DD  SYSOUT=A,DCB=BLKSIZE=133\n*            //BRODSNAP DD  SYSOUT=A\n*            //BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR\n*\n*        NOTES:\n*\n*        1)  IF ANYONE KNOWS OF ANY CHANGES FROM OS/MVT TO MVS,\n*        LIKE ADDITIONAL RECORD TYPES, ETC, LET ME KNOW.  HAVE\n*        BEEN FINDING A LONE TYPE X'05' RECORD ON EVERY SYSTEM\n*        I HAVE TRIED THIS ON; MAY BE SOME VALID NEW TYPE?\n*\n*        2)  I HAVE INCLUDED ALL THE DSECT'S I CAN CODE EVEN IF\n*        THEY ARE NOT USED.  THE INTENT IS FOR SOME GENIUS TO GET\n*        THE IDEA TO CODE SOME UTILITIES BASED UPON THE FORMAT,\n*        TO SAY..... UNLOAD THE BROADCAST SO IT CAN BE MOVED AND\n*        RELOADED.  MAYBE YOU CAN THINK OF OTHER USES.\n*\n*        3)  I HAVE YET TO TRACK THE BROADCAST NOTICES PART OF\n*        THE FILE.  SOME TIME IN THE NEAR FUTURE WHEN I DO THAT\n*        I WILL DOCUMENT THE CHAINING IN A PICTORIAL.  UNTIL THEN,\n*        IF SOMEONE DOES IT, LET ME KNOW.\n*\n* INSTALLED:  30 MAR 95\n*\n* CHANGE LOG:\n*         HD DEC97 - 02 MAY 99,  FROM HOWARD DEAN, KAISER PERMANENTE.   002\n*         SG MAY99               UPDATES FITTED BY SAM GOLOB, TO        002\n*                                GETMAIN THE KEY STATISTICS TABLE       002\n*                                INSTEAD OF MAKING A FIXED LENGTH\n*                                SPACE, ASSEMBLED INTO THE PROGRAM.\n*                                THIS IS SO BCMSCAN CAN HANDLE\n*                                LARGE SYS1.BRODCAST DATASETS.\n*             SBG0 - 29 APR 99,  ENLARGED TABLE FOR BIG SYS1.BRODCAST\n*                                NOW 30000 BYTES.  SHOULD BE\n*                                DYNAMICALLY FIGURED OUT. NEEDS FIX.\n*                                (FIXED BY HD DEC97 CODE.)\n*             JDM0 - 10 MAY 95,  FIXED A COMPARE.\n*             JDM1 - 20 MAY 95,  SAM GOLOB DISCOVERED THE TYPE \"05\"\n*                    IS ACTUALLY A POINTER TO THE FIRST DUMMY\n*                    RECORD AVAILABLE FOR USE.\n*\n*------------------------------------------------------------------*\n         EJECT\n*------------------------------------------------------------------*\n*        BELOW IS A PICTORIAL VIEW OF THE BROADCAST WHICH SHOULD\n*        HELP ONE TO BE ABLE TO NAVIGATE IT SUCCESSFULLY.\n*\n*            S Y S 1 . B R O D C A S T\n*  ===============================================================\n*  =                                                             =\n*  =   *--*--------*---------*----------------------------*---*  =\n*  =   *04*        * R1USPTR *  'SYS1.BRODCAST DATA SET'  *   *  =\n*  =   *--*--------*-----+---*----------------------------*---*  =\n*  =                     +                                       =\n*  =    ++++++++++++++++++                                       =\n*  =    +     1ST USER MAIL DIRECTORY RECORD  (EACH USERID       =\n*  =    +       ENTRY CONSISTS OF A 13 BYTE AREA; THE USERID,    =\n*  =    +       NEXT RBA POINTER AND ENDING RBA POINTER.         =\n*  =    +                                                        =\n*  =   *--*-------*---*----* /// *------*---*----*--*-----*      =\n*  =   *01* USERID*RBA*ERBA* /// *USERID*RBA*ERBA*7F* RBA *      =\n*  =   *--*-------*---*----* /// *------*---*----*--*--+--*      =\n*  =                                                   +         =\n*  =    +++++++++++++++++++++++++++++++ //// +++++++++++         =\n*  =    +                                                        =\n*  =    +    LAST USER MAIL DIRECTORY RECORD                     =\n*  =    +                                                        =\n*  =    +    NOTE: '000' ENDS THE CHAIN OF X'01' RECORDS.        =\n*  =   *--*-------*---*----* /// *------*---*----*--*-----*      =\n*  =   *01* USERID*RBA*ERBA* /// *USERID*RBA*ERBA*7F* 000 *      =\n*  =   *--*-------*---*----* /// *------*-+-*-+--*--*--+--*      =\n*  =                                      +   +                  =\n*  =    +++++++++++++++++++++++++++++++++++   +++++++++++++++++  =\n*  =    +                                                     +  =\n*  =    +     1ST MESSAGE RECORD FOR USER                     +  =\n*  =   *--*-----------------------------------------*-----*   +  =\n*  =   *03*                                         * RBA *   +  =\n*  =   *--*-----------------------------------------*--+--*   +  =\n*  =                                                   +      +  =\n*  =    ++++++++++++++++++++++++++ //// ++++++++++++++++      +  =\n*  =    +                                                     +  =\n*  =    +++++++++++++++++++++++++++++++++++++++++++++++++++++++  =\n*  =    ++    LAST MESSAGE RECORD FOR USER                       =\n*  =    ++   NOTE: '000' ENDS THE CHAIN OF X'03' RECORDS.        =\n*  =   *--*-----------------------------------------*-----*      =\n*  =   *03*                                         * 000 *      =\n*  =   *--*-----------------------------------------*-----*      =\n*  =                                                             =\n*  =             FREE  SPACE                                     =\n*  =   *--*-----------------------------------------------*      =\n*  =   *FF*                                               *      =\n*  =   *--*-----------------------------------------------*      =\n*  =                                                             =\n*  ===============================================================\n*------------------------------------------------------------------*\n         EJECT\n*------------------------------------------------------------------*\n*\n*        JUST A FEW WORDS TO PONDER.\n*\n*        1.  WHEN A USER HAS MESSAGES AWAITING FOR THEM WHEN THEY\n*            LOGON ONTO THE SYSTEM, ALL THE X'01' RECORDS ARE\n*            CHAINED.  THE SYSTEM WILL READ EVERY RECORD IN ORDER\n*            LOOKING FOR THE PARTICULAR USERID.  WHEN A MATCH IS\n*            FOUND THE RBA IF FOUND NOT X'000' INDICATES A MESSAGE\n*            TO BE RECEIVED.  ONCE RECEIVED, THE RBA IS SET TO 000\n*            AND THE MESSAGE AREA IS GIVEN A X'FF'.\n*\n*        2.  WHEN A USERID IS DELETED, THE ENTRY IN THE TYPE X'01'\n*            IS TURNED TO ALL ZEROS AND ALL OF THE MESSAGES AWAITING\n*            ARE DELETED.\n*\n*        3.  THE USERID OF THE SENDER OF A MESSAGE TO ANOTHER USER\n*            IS OBTAINED FROM THE 'PCBUSER' IN THE 'PSCB'.  IF\n*            YOU THINK ABOUT IT, IF THERE WAS SOME WAY (MUST BE\n*            AUTHORIZED THOUGH) TO CHANGE YOUR PCBUSER FIELD\n*            PRIOR TO ISSUING THE 'SEND' COMMAND, IT WOULD REALLY\n*            CONFUSE PEOPLE;  VVVERRRRY  INTERESTING.\n*\n*        4.  THE COROLLARY TO THE ABOVE MIGHT SAY THAT IF YOU COULD\n*            TEMPORARILY CHANGE YOUR 'PCBUSER' FIELD TO SOME USERID\n*            WHICH HAS \"MANY MESSAGES AWAITING\", THEN ISSUE THE\n*            'LISTBC' TSO COMMAND THEN MAYBE YOU COULD CLEAN OUT\n*            ALL THE OLD MESSAGES.  INSTEAD OF DOING WHAT I HAVE TO\n*            TO PERIODICALLY IS TO \"RESYNC\" THE BROADCAST (BRUTAL\n*            BUT EFFECTIVE).\n*------------------------------------------------------------------*\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL84 -         RESERVED\n         MEND\n         MACRO\n         IKJZT302  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT303   &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         SPACE\nR0       EQU   0                  USED BY O.S.\nR1       EQU   1                  ADDR OF PARM LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9                   PTR TO OUTPUT LINE FOR PUT\nR10      EQU   10                  BAL REGISTER\nR11      EQU   11\nR12      EQU   12                  BASE REGISTER\nR13      EQU   13                  SAVE-AREA ADDRESS\nR14      EQU   14                  ULTIMATE RETURN ADDRESS\nR15      EQU   15                  ENTRY-PT ADDR, WORK REG, RET CODE\n         SPACE\nBCMSCAN  AMODE 24\nBCMSCAN  RMODE 24\nBCMSCAN  CSECT\n         SAVE  (14,12),,BCMSCAN_&SYSDATE._&SYSTIME\n         LR    R12,R15             LOAD ENTRY ADDRESS\n         USING BCMSCAN,R12         ESTABLISH ADDRESSABILITY\n         LR    R15,R13             SAVE HIS SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          SAVE OFF INTO LOW SAVE\n         ST    R13,8(,R15)         CHAIN MINE BACK\n         XR    R9,R9               FOR POSSIBLE DEBUG PURPOSES\n         XR    R10,R10             FOR POSSIBLE DEBUG PURPOSES\n         SPACE\n         OPEN  (BRODCAST,(INPUT),BRODMAP,(OUTPUT),SNAP,(OUTPUT))\n         SPACE\n*--------------------------------------------------------------------*\n*        GET THE HEADER RECORD.  THIS IS A SPECIAL RECORD 1.\n*--------------------------------------------------------------------*\n         SPACE\n         READ  HDRECB,             ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK HDRECB\n         L     R3,HDRECB+12\n         USING R1BC,R3             ADDRESSABILITY TO RECORD 1 MAPPING\n         SPACE\n         AP    REC04,=P'1'         ADD 1 TO TOTAL                JDM0\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA 1ST USER'S MAIL DIR REC\n         MVC   HIGHVAL(4),R1RECNUM SAVE GET OUT VALUE\n         MVC   SAVHDADR(4),R1RECNUM SAVE GET OUT VALUE         SG MAY99\n         L     R5,HIGHVAL          GET NUMBER FOR PRINTOUT\n         CVD   R5,CVDAREA          CONVERT IT TO PRINTABLE\n         MVC   MAXCNT,MASK7        MOVE IN THE MASK\n         ED    MAXCNT,CVDAREA+5    MAKE IT PRETTY\n         LA    R9,MAXIMUM          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           TELL HOW MANY\n         SPACE\n         LH    R5,R1BCMAX          GET NUMBER OF NOTICES\n         XR    R4,R4               CLEAR R4\n         D     R4,=F'25'           NUMBER OF BLOCKS REQUIRED\n         AH    R5,R1BCMAX          PLUS TOTAL FOR MESSAGES\n         DROP  R3\n         LTR   R4,R4               REMAINDER?\n         BZ    CVDNOT\n         LA    R5,1(,R5)           ONE MORE REQUIRED\nCVDNOT   EQU   *\n         CVD   R5,CVDAREA          CONVERT IT TO PRINTABLE\n         MVC   NOTCNT,MASK4\n         ED    NOTCNT,CVDAREA+6    MAKE IT PRETTY\n         LA    R9,NOTICES          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           TELL HOW MANY\n         L     R9,HDRECB+20        POINT TO KEY\n         BAL   R10,SNAPUNK\n         L     R9,HDRECB+12        POINT TO AREA\n         BAL   R10,SNAPUNK\n         SPACE\n         FREEDBUF HDRECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         L     R0,SAVHDADR              GET MAXIMUM RECORDS    SG MAY99 005\n         A     R0,=F'1'                 ONE FOR GOOD LUCK      HD DEC97 005\nTYPEGET  GETMAIN RU,LV=(0),LOC=BELOW    GET STORAGE FOR TABLE  HD DEC97 005\n         ST    R1,TYPETBLA              SAVE ADDRESS           HD DEC97 005\n         LR    R0,R1                    SAVE ADDRESS           HD DEC97 005\n         L     R1,SAVHDADR              GET LENGTH             SG MAY99 005\n         LM    R14,R15,=D'0'            CLEAR FOR ICM          HD DEC97 006\n         ICM   R15,B'1000',=X'99'       PAD WITH X'99'         HD DEC97 006\n         MVCL  R0,R14                   CLEAR AREA             HD DEC97 006\n         L     R7,TYPETBLA                                     HD DEC97 006\n         MVI   1(R7),X'04'                                     HD DEC97 006\n         SPACE\n*--------------------------------------------------------------------*\n*        THIS IS NOW OUR READ LOOP AS WE DO A SUCESSIVE READ\n*        INCREMENTING THE RBA NUMBER UNTIL WE REACH THE BCNUMREC\n*        VALUE SAVED IN 'HIGHVAL'.  ONCE WE HAVE READ ALL THE\n*        RECORDS WE WILL GO AND ANALYZE THEM.\n*--------------------------------------------------------------------*\n         SPACE\nREADLOOP EQU   *\n         ICM   R1,7,BLOCKNO        GET PROCESSED RBA\n         LA    R1,1(R1)            INCREMENT BY ONE\n         STCM  R1,7,BLOCKNO        STORE IT BACK FOR READ\n         CLC   BLOCKNO(3),HIGHVAL+1  DID WE REACH MAX?           JDM0\n         BE    ANALYZE             IF SO, GO ANALYZE THEM ALL\n         SPACE\n         READ  RECECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK RECECB\n         SPACE\n         L     R2,RECECB+20        GET KEY ADDRESS\n         MVC   0(1,R7),0(R2)       STORE TYPE INTO TABLE\n         LA    R7,1(R7)            INCREMENT IN OUR TABLE.\n         SPACE\n*--------------------------------------------------------------------*\n*        COUNT THE DIFFERENT RECORD TYPES FOR LATER REPORTING.\n*--------------------------------------------------------------------*\n         SPACE\n         CLI   0(R2),X'00'         IS THIS NOTICE DIRECTORY RECORD?\n         BNE   CHK1                NO.\n         AP    NOTDIR,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK1     EQU   *\n         CLI   0(R2),X'01'         IS THIS USERID DIRECTORY RECORD?\n         BNE   CHK2                NO.\n         AP    USRIND,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK2     EQU   *\n         CLI   0(R2),X'02'         IS THIS NOTICES MSG RECORD?\n         BNE   CHK3                NO.\n         AP    NOTMSG,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK3     EQU   *\n         CLI   0(R2),X'03'         IS THIS USER MSG RECORD?\n         BNE   CHK4                NO.\n         AP    USRMSG,=P'1'        ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nCHK4     EQU   *                                                 JDM1\n         CLI   0(R2),X'05'         IS THIS POINTER RECORD?       JDM1\n         BNE   CHKFF               NO.                           JDM1\n         AP    PTRMSG,=P'1'        ADD 1 TO TOTAL                JDM1\n         B     FREEB                                             JDM1\n         SPACE 1                                                 JDM1\nCHKFF    EQU   *\n         CLI   0(R2),X'FF'         DUMMY INACTIVE MAIL MSG RECORD?\n         BNE   UNKNOWN             NO.\n         AP    FREEREC,=P'1'       ADD 1 TO TOTAL\n         B     FREEB\n         SPACE\nUNKNOWN  EQU   *\n         UNPK  ODDKEY+36(3),0(2,R2)\n         TR    ODDKEY+36(2),HEXTAB-X'F0'\n         MVI   ODDKEY+38,C' '\n         LA    R9,ODDKEY           POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         L     R9,RECECB+20        GET KEY ADDRESS\n         BAL   R10,SNAPUNK         GO SNAP THIS UNKNOWN RECORD.\n         SPACE\nFREEB    DS    0H                                                       009\n         FREEDBUF RECECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         B     READLOOP\n         SPACE\n*--------------------------------------------------------------------*\n*        NOW, START TO ANALYZE ALL AND PRINT RESULTS TO THE REPORT.\n*--------------------------------------------------------------------*\n         SPACE\nANALYZE  EQU   *\n         LA    R9,BREAKOUT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT           PUT OUT THE SECTION HEADER\n         SPACE\n         MVC   KEYTYPE,TYPE04      MOVE IN DESCRIPTION           JDM0\n         MVC   KEYCNT,MASK7                                      JDM0\n         ED    KEYCNT,REC04                                      JDM0\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT        JDM0\n         BAL   R10,PRINT                                         JDM0\n         SPACE 1                                                 JDM0\n         MVC   KEYTYPE,TYPE00      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,NOTDIR\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE02      MOVE IN DESCRITPION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,NOTMSG\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE01      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,USRIND\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE03      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,USRMSG\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         MVC   KEYTYPE,TYPE05      MOVE IN DESCRIPTION           JDM1\n         MVC   KEYCNT,MASK7                                      JDM1\n         ED    KEYCNT,PTRMSG                                     JDM1\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT        JDM1\n         BAL   R10,PRINT                                         JDM1\n         SPACE 1                                                 JDM1\n         MVC   KEYTYPE,TYPEFF      MOVE IN DESCRIPTION\n         MVC   KEYCNT,MASK7\n         ED    KEYCNT,FREEREC\n         LA    R9,KEYCOUNT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n         LA    R9,USERSOUT         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n*--------------------------------------------------------------------*\n*        IN MVS, THERE IS A CHANGE FROM HAVING 12 USERID PER BLOCK\n*        TO 9 PER BLOCK.\n*--------------------------------------------------------------------*\n         SPACE\nINDEXLP  EQU   *\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA\n         SPACE\n         READ  SCNECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO             RBA TO HOLD THE KEY\n         SPACE\n         CHECK SCNECB\n         SPACE\n         L     R3,SCNECB+12        ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   SAVERBA,USDNEXT     COPY NEXT INDEX RECORD NUMBER\n         SPACE\n*--------------------------------------------------------------------*\n*        YOU WILL GO THROUGH THIS LOOP 9 TIMES, BECAUSE 9 ENTRIES\n*        ARE HELD IN EVERY RECORD.\n*--------------------------------------------------------------------*\n         SPACE\nUSRLOOP  EQU   *\n         MVC   USERID(7),USDID     COPY WHO THIS IS\n         CLC   USERID(7),ZEROS     IS THIS A REAL USER?\n         BE    NOMSG               NOPE, MUST HAVE BEEN DELETED\n         AP    USERS,=P'1'\n         XR    R4,R4               CLEAR UPPER BYTE\n         ICM   R4,7,USDRBA         GET BLOCK POSITION\n         DROP  R3\n         BZ    NOMSG               NO.. JUST BUMP\nALTCODE  DS    0H                                              HD DEC97 013\n         SLR   R5,R5                    CLEAR FOR ADD          HD DEC97 013\n         L     R7,TYPETBLA              GET ADDRESS OF TYPETBL HD DEC97 013\n         LA    R5,0(R7,R4)              POINT TO TABLE ENTRY   HD DEC97 013\n         BCTR  R5,0                     ORIGIN ZERO            HD DEC97 013\n         CLI   0(R5),X'03'         JUST VERIFY WERE WE ARE\n         BE    TABLOK                   THIS IS A VALID ONE    HD DEC97 014\n         LA    R9,TABLERR          POINT TO LINE TO PRINT\n         BAL   R10,PRINT           JUST LET THEM KNOW I'M CONFUSED\n         B     BUMPUSR\n         SPACE\nTABLOK   DS    0H\n         MVI   0(R5),X'88'         SET THAT IT WAS A VALID MESSAGE\nBUMPUSR  EQU   *\n         AP    MSGCOUNT,=P'1'      INCREMENT HOW MANY MESSAGES\n         STCM  R4,7,MSGNUM\n         SPACE\n         READ  MSGECB,             DECB TO USE IN MACRO EXPANSION      X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MSGNUM              RBA TO HOLD THE KEY\n         SPACE\n         CHECK MSGECB\n         SPACE\n         L     R4,MSGECB+12        ADDRESS OF RECORD\n         USING USMSG,R4\n         ICM   R4,7,USMNEXT        RRN OF NEXT MESSAGE\n         DROP  R4\n         SPACE\n         FREEDBUF MSGECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n*--------------------------------------------------------------------*\n*        TEST TO SEE IF THERE WILL BE ANOTHER RECORD AFTER THIS ONE\n*        IN THE CHAIN.  IF 'USMPTR' IS INDEED ZERO, THEN WE ARE\n*        FINISHED PROCESSING THIS CHAIN AND ARE READY TO DETERMINE\n*        IF WE SHOULD BUILD ENTRY 1, 2, OR 3 SHOWING HOW MANY MSGS\n*        A USER HAS OUTSTANDING.\n*--------------------------------------------------------------------*\n         SPACE\n         LTR   R4,R4\n         BNZ   ALTCODE\n         AP    RECCNT,=P'1'\n         CP    RECCNT,=P'2'        TEST MID RANGE\n         BL    LINE1               LOWER\n         BH    LINE3               HIGHER\n         BE    LINE2               .MIDRANGE\nLINE1    EQU   *\n         MVC   MSGCNT1,MASK46\n         MVC   USERID1,USERID\n         ED    MSGCNT1,MSGCOUNT+1\n         B     ZAPCNT\n         SPACE\nLINE2    EQU   *\n         MVC   MSGCNT2,MASK46\n         MVC   USERID2,USERID\n         ED    MSGCNT2,MSGCOUNT+1\n         B     ZAPCNT\n         SPACE\nLINE3    EQU   *\n         MVC   MSGCNT3,MASK46\n         MVC   USERID3,USERID\n         ED    MSGCNT3,MSGCOUNT+1\n         LA    R9,USERLINE\n         BAL   R10,PRINT\n         MVC   MSGCNT1,=CL6' '\n         MVC   MSGCNT2,=CL6' '\n         MVC   MSGCNT3,=CL6' '\n         MVC   USERID2,=CL7' '\n         MVC   USERID3,=CL7' '\n         ZAP   RECCNT,=P'0'\nZAPCNT   EQU   *\n         ZAP   MSGCOUNT,=P'0'\nNOMSG    EQU   *\n         LA    R3,13(R3)           BUMP TO NEXT ENTRY\n         BCT   R6,USRLOOP          REPEAT FOR NINE TIMES\n         SPACE\n*--------------------------------------------------------------------*\n*        END OF INNER LOOP\n*--------------------------------------------------------------------*\n         SPACE\n         FREEDBUF SCNECB,          DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         SPACE\n         CLC   SAVERBA,=3X'00'     IS THIS LAST\n         BNE   INDEXLP             GO DO NEXT ONE\n         CP    RECCNT,=P'0'\n         BE    PUTUCNT\n         LA    R9,USERLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\nPUTUCNT  EQU   *\n         MVC   USERCNT,MASK7\n         ED    USERCNT,USERS       HOW MANY USERS ARE THERE\n         LA    R9,UTOTLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         L     R7,TYPETBLA              ONCE MORE THRU TYPETAB HD DEC97 018\nVERFLOOP EQU   *\n         CLI   0(R7),X'99'         END YET?\n         BE    ENDVERF\n         CLI   0(R7),X'03'         IS THIS STILL AN 03\n         LA    R7,1(R7)            BUMP EITHER WAY\n         BNE   VERFLOOP\n         AP    UNUSABL,=P'1'\n         B     VERFLOOP\n         SPACE\n*--------------------------------------------------------------------*\n*        END OF OUTER LOOP\n*--------------------------------------------------------------------*\n         SPACE\nENDVERF  EQU   *\n         MVC   UNUSDCNT,MASK46\n         ED    UNUSDCNT+1(5),UNUSABL+2\n         LA    R9,JUNKLINE         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         LA    R9,JUNKLIN2         POINT TO LINE TO PRINT\n         BAL   R10,PRINT\n         SPACE\n*--------------------------------------------------------------------*\n*        TIME TO CLOSE AND END THE PROGRAM, BYE.\n*--------------------------------------------------------------------*\n         SPACE\nCLOSE    EQU   *\n         CLOSE (BRODCAST,,BRODMAP,,SNAP)\nFREETYP  DS    0H                                              HD DEC97 020\n         L     R1,TYPETBLA              ADDRESS OF TABLE       HD DEC97 020\n         LH    R0,HIGHVAL               LENGTH OF TABLE        HD DEC97 020\n         AH    R0,=H'1'                 INCREMENT BY ONE       HD DEC97 020\n         FREEMAIN RU,LV=(0),A=(1)       FREE TYPE TABLE        HD DEC97 020\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         SPACE\n*--------------------------------------------------------------------*\n*        THIS SUBROUTINE WAS THE IDEA OF THE BELOW AND THE CODE WAS\n*        LIFTED AND SLIGHTLY ALTERED TO FIT IN HERE.\n*\n*        P. A. MOTINL\n*        COMPUTING CENTRE\n*        J.R.C. - ISPRA ESTABLISHMENT\n*        21020 ISPRA (VA), ITALY\n*\n*        SNAP OUT THE UNKNOWN RECORD TYPE BELOW FOR US TO SEE.\n*--------------------------------------------------------------------*\n         SPACE\nSNAPUNK  EQU   *\n         MVC   SNAPBLK(130),0(R9)  MOVE TO AN ALIGNED AREA\n         LA    R15,SNAPBLK         GET ADDRESS OF RECORD TO SNAP\n         ST    R15,SNAPLST         STORE THE BEGIN ADDRESS\n         AL    R15,=F'130'         ADD RECORD LENGTH\n         ST    R15,SNAPLST+4       STORE ENDING ADDRESS\n         OI    SNAPLST+4,X'80'     INDICATE END OF LIST\n         LA    R11,SNAP            GET DCB ADDRESS\n         SPACE\n         SNAP  DCB=(R11),          DCB ADDRESS TO USE                  X\n               ID=1,               ID NUMBER FOR SNAP                  X\n               LIST=SNAPLST,       LIST OF ADDRESS TO USE              X\n               STRHDR=SNAPHD       HEADER TO PRINT\n         SPACE\n         LTR   R15,R15             WAS SNAP SUCCESSFUL?\n         BZ    SNAPOK\n         CVD   R15,CVDAREA         CONVERT ERROR CODE\n         MVC   SNERR+17(3),MASK3   MOVE IN A MASK\n         ED    SNERR+16(4),CVDAREA+6\n         ST    R15,CVDAREA\n         UNPK  SNERR+26(9),CVDAREA(5)\n         NC    SNERR+26(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    SNERR+26(8),=CL16'0123456789ABCDEF'\n         MVI   SNERR+34,C')'\n         SPACE\nSNAPOK   EQU   *\n         BR    R10                 RETURN TO WHENCE WE CAME\n         SPACE\n*--------------------------------------------------------------------*\n*        PRINT OUTPUT SUBROUTINE.\n*--------------------------------------------------------------------*\n         SPACE\nPRINT    EQU   *\n         PUT   BRODMAP,(R9)        WRITE FROM AREA ADDRESS IN R9\n         BR    R10                 RETURN TO WHENCE WE CAME\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA CONTROL BLOCKS FOLLOW.\n*--------------------------------------------------------------------*\n         SPACE\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=RISC,         3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE\nBRODMAP  DCB   DDNAME=BRODMAP,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\n         SPACE\nSNAP     DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,              X\n               LRECL=125,DDNAME=BRODSNAP\n         LTORG\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA AREAS FOLLOW.\n*--------------------------------------------------------------------*\n         SPACE\nCVDAREA  DS    D\nSAVE     DC    18F'0'\nSNAPLST  DC    2F'0'               SNAP ADDRESS\nTYPETBLA DS    F       ADDRESS OF GETMAINED TYPE TABLE         HD DEC97\nHIGHVAL  DS    F\nSAVHDADR DS    F                   SAVE HEADER ADDRESS         SG MAY99\nZEROS    DC    XL7'00'             ZEROS\nHEXTAB   DC    CL16'0123456789ABCDEF'\n         DS    0F\nSNAPBLK  DS    0XL130\n         DC    130X'77'\n         DS    0F\nSNAPHD   DC    A(SNAPHDR)\nSNAPHDR  DC    AL1(L'SNAPHDT)\nSNAPHDT  DC    C'B R O A D C A S T -- DUMP OF A BLOCK READ.'\nSNERR    DC    CL79'  ---> SNAP RC =     (R15=        )'\nBLOCKNO  DC    X'000000'           BLOCK NUMBERS\nSAVERBA  DS    CL3                 SAVE LOCAL OF USER INDEX\nMSGNUM   DS    CL3                 SAVE LOCAL OF USER INDEX\nMASK3    DC    XL3'202120'\nMASK4    DC    XL4'40202120'\nMASK46   DC    XL6'402020202120'\nMASK7    DC    XL7'4020206B202120'\nRECCNT   DC    PL1'0'\nMSGCOUNT DC    PL4'0'\nNOTDIR   DC    PL3'0'              CT FOR NOTICE DIRECTORY RECS\nUSRIND   DC    PL3'0'              CT FOR USER MAIL DIRECTORY RECS\nNOTMSG   DC    PL3'0'              CT FOR NOTICE MSG RECS\nUSRMSG   DC    PL3'0'              CT FOR USER MAIL MSG RECS\nPTRMSG   DC    PL3'0'              CT FOR POINTER REC (ALWAYS 1) JDM1\nREC04    DC    PL3'0'              CT FOR MASTER REC (ALWAYS 1)  JDM0\nFREEREC  DC    PL3'0'              CT FOR INACTIVE MAIL MSG RECS\nUNUSABL  DC    PL5'0'\nUSERS    DC    PL3'0'\nTYPE00   DC    CL50'NUMBER OF BRODCAST \"NOTICES\" DIRECTORY RECORDS'\nTYPE01   DC    CL50'NUMBER OF USER \"MAIL\" DIRECTORY RECORDS'\nTYPE02   DC    CL50'NUMBER OF BRODCAST \"NOTICES\" MESSAGE RECORDS'\nTYPE03   DC    CL50'NUMBER OF USER \"MAIL\" MESSAGE RECORDS'\nTYPE04   DC    CL50'COUNT OF 1ST REC OF BRODCAST (SHOULD BE 1)'  JDM0\nTYPE05   DC    CL50'COUNT OF FREE SEARCH RECORD (SHOULD BE 1)'    JDM1\nTYPEFF   DC    CL50'NUMBER OF DUMMY INACTIVE \"MAIL\" MSG RECORDS'\nODDKEY   DC    CL133'  ** UNKNOWN KEY TYPE ENCOUNTERED :    **'\nTABLERR  DC    CL133'  ** TABLE IS OUT OF SYNC WITH MY REALITY **'\nBREAKOUT DC    CL133'0< THE FOLLOWING KEY BREAKDOWN WAS FOUND >'\nUSERSOUT DC    CL133'0< THE FOLLOWING USERS HAVE MESSAGES WAITING >'\nUSERID   DS    CL7\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nKEYCOUNT DS    0CL133\n         DC    CL10' '\nKEYTYPE  DC    CL50'HEADER RECORDS'\nKEYCNT   DC    CL7'      1'\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nMAXIMUM  DS    0CL133\n         DC    CL60'1TOTAL AVAILABLE BLOCKS IN DATASET'\nMAXCNT   DS    CL7\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nNOTICES  DS    0CL133\n         DC    CL63' BLOCKS NECESSARY FOR BROADCST MSGS (DIRECTORY/MESSX\n               AGES)'\nNOTCNT   DS    CL4\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nUSERLINE DS    0CL133\n         DC    CL10' '\nUSERID1  DS    CL7\n         DC    CL3' '\nMSGCNT1  DS    CL6\n         DC    CL10' '\nUSERID2  DS    CL7\n         DC    CL3' '\nMSGCNT2  DS    CL6\n         DC    CL10' '\nUSERID3  DS    CL7\n         DC    CL3' '\nMSGCNT3  DS    CL6\n         DC    CL55' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nUTOTLINE DS    0CL133\n         DC    CL62' NUMBER OF TSO USERS DEFINED IN DATASET'\nUSERCNT  DS    CL7\n         DC    CL64' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nJUNKLINE DS    0CL133\n         DC    CL63'0MESSAGE RECORDS FOUND TO BE GARBAGED'\nUNUSDCNT DS    CL6\n         DC    CL64' '\n         SPACE\n*--------------------------------------------------------------------*\n         SPACE\nJUNKLIN2 DS    0CL133\n         DC    CL65' (USE BCMDIAG FROM CBT FILE 247 TO DISPLAY AND/OR D-\n               ELETE THESE)'\n         DS    CL2\n         DC    CL66' '\n         SPACE\n*--------------------------------------------------------------------*\n*\n*--------------------------------------------------------------------*\n         SPACE\n         EJECT\n*----------------------------------------------------------------*\n*        THE FOLLOWING IS TAKEN FROM AN OLD MVS MANUAL CALLED\n*        \"OS/VS2 MVS CONVERSION NOTEBOOK\" (GC28-0689-6) AND\n*        CONTAINS THE FOLLOWING REFERENCE TO HOW THE BROADCAST\n*        HAS CHANGED FROM OS/MVT AND SVS TO MVS:\n*\n*        'MODIFIED TO INCLUDE A CHANGE LEVEL INDICATOR IN THE\n*        HEADER RECORD AND A NEW FIELD FOR EACH USER ID IN THE\n*        MAIL DIRECTORY RECORDS. THIS FIELD CONTAINS THE\n*        ADDRESS OF THE LAST MESSAGE IN THE CHAIN OF MESSAGES\n*        ASSOCIATED WITH EACH NEW USER.'\n*\n*        NOTE: UNTIL I CAN DUMP RECORDS AND FIGURE OUT WHERE THE\n*              ABOVE STATEMENTS FIT INTO THE DSECTS BELOW, WILL\n*              LET IT TO THE READER TO HELP AND GET IT FIGURED\n*              OUT BEFORE I DO.\n*\n*----------------------------------------------------------------*\n         SPACE\n         IEZBITS\n         SPACE\n         IKJZT301\n         SPACE\n         IKJZT302\n         SPACE\n         IKJZT303\n         SPACE\n         IKJZT304\n         SPACE\n         IKJZT305\n         SPACE\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMSCAN$": {"ttr": 9483, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x95\\x14\\x8f\\x00\\x99\\x13\\x9f\\x02H\\x00\\x1c\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1995-05-28T00:00:00", "modifydate": "1999-05-19T02:48:00", "lines": 28, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//*        DD DISP=SHR,DSN=SBGOLOB.FILE300.MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(BCMSCAN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD *\n INCLUDE OBJECT\n ENTRY BCMSCAN\n NAME  BCMSCAN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMSCAN#": {"ttr": 9730, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00R\\x00\\x99\\x11\\x8f\\x01\\x05\\x10\\x7f\\x00\\x00\\x00\\t\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-04-28T00:00:00", "modifydate": "2005-04-17T00:00:52", "lines": 9, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//BRODCAST EXEC PGM=BCMSCAN,REGION=2M\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//BRODMAP  DD  SYSOUT=*,DCB=BLKSIZE=133\n//BRODSNAP DD  SYSOUT=*\n//*RODCAST DD  DSN=SBGOLOB.BRODCAST.COPY,DISP=SHR\n//BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMSEND": {"ttr": 9732, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01F\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x99\\x15\\x7f\\x13\\x14\\x04C\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.70", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1999-06-06T13:14:00", "lines": 1091, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMSEND  TITLE 'BCMSEND - SEND A MESSAGE TO A USERID IN SYS1.BRODCAST'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMSEND USERID MESSAGE TEXT                       *\n*                                                                     *\n*       FUNCTION:   TO SEND A USERID MESSAGE TO A TSO USERID WHO IS   *\n*                   DEFINED IN SYS1.BRODCAST.  WORKS ON SYS1.BRODCAST *\n*                   INTERNALLY, WITHOUT USING THE SEND COMMAND.       *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   4.0            *\n*                                                                     *\n*            DATE:  MAY 31, 99                                        *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:                                                    *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMSEND  CSECT\n         USING BCMSEND,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMSEND VER 4.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n         LA    R10,4095(,R12)      LOAD SECOND BASE            SG 05/99\n         LA    R10,1(,R10)                                     SG 05/99\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         STH   R3,CMBLENG          SAVE COMMAND BUFFER LENGTH  SG 05/99\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         STH   R3,OFFSETT          SAVE OFFSET.                SG 05/99\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS3            ZERO, SEND MESSAGE.............\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\n         BAL   R9,GETMSGT          OBTAIN AND SAVE MSG TEXT    SG 05/99\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n*   IF YOU WANT ALL$#@ TO WORK, THEN CHANGE X'00' TO X'FF'     SG 05/99\n         MVI   ALLFLAG,X'00'\n*        MVI   ALLFLAG,X'FF'       SEND MESSAGE TO ALL USERIDS.\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n* ------------------------------------------------------------------ *\n* ---    MAIN ROUTINE TO WRITE A MESSAGE TO THE USER.            --- *\n* ------------------------------------------------------------------ *\n         BAL   R9,FINDUSER         SEE IF YOU CAN FIND THE     SG 05/99\n*                          USERID SLOT THAT CORRESPONDS TO     SG 05/99\n*                          TRYID.  IF FOUND, THIS ROUTINE      SG 05/99\n*                          SAVES ITS RBA, SLOT, AND POINTERS.  SG 05/99\n         BAL   R9,REFINDUS     R3 HAS ADDRESS OF THE USER RECORD\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n* ------------------------------------------------------------------ *\nGOWRITE  DS    0H\n         BAL   R9,FINDFREE         FIND A FREE MESSAGE SLOT    SG 05/99\n         MVC   RNAM(3),FREERBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   BLOCKNO(3),FREERBA  PREPARE BLOCK NUMBER        SG 05/99\n         BAL   R9,WRITEMSG         WRITE THE MESSAGE THERE\n         MVC   RNAM(3),FREERBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   PREVRBA(3),SAVEPTRS+3   GET RBA OF PREV MESSAGE\n         CLC   PREVRBA(3),ZEROS    IS THERE ONE?               SG 05/99\n         BE    NOCHAIN             YES. NOTHING TO READ.       SG 05/99\n         MVC   BLOCKNO(3),PREVRBA    PREPARE BLOCKNO FOR READ  SG 05/99\n         MVC   RNAM(3),PREVRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,CHAINMSG         RECHAIN THE LAST MESSAGE    SG 05/99\n         MVC   RNAM(3),PREVRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\nNOCHAIN  BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,REFINDUS         FIND USER SLOT TO READJUST PTRS\n         USING USDIR,R3\n         MVC   USDEND(3),FREERBA                               SG 05/99\n         CLC   USDRBA(3),ZEROS     WAS IT ZERO BEFORE?\n         BNE   REWRITIT                                        SG 05/99\n         MVC   USDRBA(3),FREERBA   MAKE FIRST EQUAL LAST       SG 05/99\n         DROP  R3\nREWRITIT MVC   BLOCKNO(3),MYUSRBA  GET SET TO WRITE\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN ROUTINE TO SEND MESSAGE                     --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nFULLMESS MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSFULL                 SYS1.BRODCAST\n         LA    R0,L'MESSFULL+7                  IS\n         BAL   R4,MSG                             FULL\n         B     EOJ4                             AND GET OUT.   SG 05/99\nWMESS3   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE3                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE3+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\n         B     EOJ4                                            SG 05/99\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE2+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\n         B     EOJ4                                            SG 05/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n*-----------------------------------------------------------------*\n*-- FEED THIS ROUTINE A USERID, AND IT WILL FIND OUT IF IT      --*\n*-- EXISTS IN SYS1.BRODCAST.  IF IT DOES, THE RBA OF ITS RECORD --*\n*-- IS RETURNED INTO MYUSRBA, THE USER SLOT IS RETURNED INTO    --*\n*-- MYUSSLOT, AND THE MESSAGE POINTERS ARE RETURNED INTO THE    --*\n*-- FIELD, SAVEPTRS.                                            --*\n*-----------------------------------------------------------------*\nFINDUSER DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nFUSRLOOP DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    FTRYNEXT            NOPE. JUST GO TO NEXT ENTRY\n         CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    FSAVPTRS            YEP. GO DEAL WITH IT\nFTRYNEXT LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R6,FUSRLOOP         TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     FINDUSER            END OF RECORD? GET ANOTHER.\n         SPACE 3\nFSAVPTRS MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9                                              SG 05/99\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   SAVEID(8),NEWID                                 SG 05/99\n         MVC   MESSENTU(7),NEWID                               SG 05/99\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    FIND A FREE MESSAGE RECORD\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFINDFREE DS    0H\n         MVC   BLOCKNO(3),TYP5RBA                              SG 05/99\n         CLC   TYP5RBA,ZEROS                                   SG 05/99\n         BNE   SAVRGS01                                        SG 05/99\n         MVC   BLOCKNO(3),=X'000001'                           SG 05/99\n         MVI   FULLFLAG,X'FF'                                  SG 05/99\nSAVRGS01 ST    R8,SAVER8                                       SG 05/99\n         ST    R7,SAVER7                                       SG 05/99\n         ST    R6,SAVER6                                       SG 05/99\n         L     R8,HIWATER          USE HIWATER AS FINISH AMT   SG 05/99\n         L     R7,NUMRECS          LOAD TOTAL NUMBER OF RECS   SG 05/99\n         ICM   R6,7,BLOCKNO        LOAD STARTING POINT         SG 05/99\n         SR    R7,R6               SET UP BCT FOR LOOP         SG 05/99\nSTARTFSH DS    0H                                              SG 05/99\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'FF'         BLANK USER MESSAGE RECORD?\n         BE    FOUNDNEW            YES? FOUND ONE.             SG 05/99\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         ICM   R6,7,BLOCKNO        LOAD AMOUNT INTO REGISTER   SG 05/99\n         LA    R6,1(,R6)           ADD 1                       SG 05/99\n         CR    R6,R8               HIGHER THAN STOPPING POINT? SG 05/99\n         BH    FINDBEG             YES, START AT BEGINNING     SG 05/99\n         STCM  R6,7,BLOCKNO        POINT TO NEXT BLOCK NUMBER  SG 05/99\n         BCT   R7,STARTFSH         LOOP AND READ AGAIN         SG 05/99\nFOUNDNEW DS    0H                                              SG 05/99\n         MVC   FREERBA(3),BLOCKNO  SAVE RBA OF FREE RECORD     SG 05/99\n         ICM   R7,7,FREERBA        LOAD RBA VALUE              SG 05/99\n         LA    R7,1(,R7)           INCREASE BY 1               SG 05/99\n         STCM  R7,7,NFRERBA        PREPARE NEW FREE SEARCH RBA SG 05/99\n         C     R7,HIWATER          HIGHER THAN THE HIGHEST?    SG 05/99\n         BNH   FINDFOUT            NO. JUST GET OUT OK         SG 05/99\n         MVC   NFRERBA(3),FREERBA  WE CAN'T GO HIGHER, SO =    SG 05/99\nFINDFOUT DS    0H                                            DIAG 06/99\n         B     FINDFEND            GET OUT OF ROUTINE          SG 05/99\nFINDBEG  DS    0H                                              SG 05/99\n         CLI   FULLFLAG,X'FF'      CHECK IF WE WENT FROM BEGIN SG 05/99\n         BNE   FINDGOON            YES. WE KNOW BCAST IS FULL  SG 05/99\n         L     R6,SAVER6           RESTORE REGISTER            SG 05/99\n         L     R7,SAVER7           RESTORE REGISTER            SG 05/99\n         L     R8,SAVER8           RESTORE REGISTER            SG 05/99\n         B     FULLMESS            BROADCAST FULL, AND OUT     SG 05/99\nFINDGOON MVI   FULLFLAG,X'FF'      WE'RE NOW SEARCHING BEGINNG SG 05/99\n         ICM   R8,7,TYP5RBA        FINISH AT FREE SEARCH REC DIAG 06/99\n         LA    R7,1(,R8)           SET UP BCT REGISTER       DIAG 06/99\n         LA    R6,1                START SEARCH AT RECORD 2    SG 05/99\n         STCM  R6,7,BLOCKNO        LET READ KNOW ABOUT IT      SG 05/99\n         SR    R7,R6               SET UP BCT FOR LOOP         SG 05/99\n         B     STARTFSH            DO LOOP OVER AGAIN-1ST PART SG 05/99\nFINDFEND L     R6,SAVER6           RESTORE REGISTER            SG 05/99\n         L     R7,SAVER7           RESTORE REGISTER            SG 05/99\n         L     R8,SAVER8           RESTORE REGISTER            SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    WRITE A MESSAGE, GIVEN THE RBA\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITEMSG DS    0H\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'FF'         BLANK USER MESSAGE RECORD?\n         BE    WRITEGO1            YES. GO ON PROCESSING IT    SG 05/99\n* ---------------------------------------------------------  DIAG 06/99\n*  TRYING TO WRITE ON THE WRONG TYPE OF RECORD.  BRODCAST    DIAG 06/99\n*  PROBABLY IS FULL.  CHECK TO SEE IF WE LOOKED ENOUGH       DIAG 06/99\n*  FOR A FREE RECORD.  TWO PASSES THROUGH BRODCAST.          DIAG 06/99\n* ---------------------------------------------------------  DIAG 06/99\n         CLI   FULLFLAG,X'FF'      WE TRIED FINDFREE TWICE?  DIAG 06/99\n         BE    FULLMESS            YES. BRODCAST IS FULL-OUT DIAG 06/99\nWRITEGO1 MVI   0(R2),X'03'         SHOW IT'S A USED MESSAGE    SG 05/99\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R3                                        SG 05/99\n         ST    R7,SAVER7           SAVE WORK REGISTER          SG 05/99\n         MVC   USMLNG(1),LENTHMSG+3  PLUG IN LENGTH OF MESSAGE SG 05/99\n         MVC   USMTEXT(125),BLANKMSG   FILL TEXT WITH BLANKS   SG 05/99\n         MVC   USMNEXT(3),ZEROS    SHOW MSG IS LAST IN CHAIN   SG 05/99\n         IC    R7,LENTHMSG+3       SET UP EXECUTE              SG 05/99\n         BCTR  R7,0                LOWER FOR MOVE              SG 05/99\n         EX    R7,MOVEMESG         MOVE MESSAGE INTO RECORD    SG 05/99\n         DROP  R3                                              SG 05/99\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nWRITEMND FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nWRITENDX L     R7,SAVER7                                       SG 05/99\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    CHAIN THE LAST MESSAGE TO THE NEWLY WRITTEN MESSAGE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHAINMSG DS    0H\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         BLANK USER MESSAGE RECORD?\n         BNE   CHAINMND            DON'T WRITE IF IN DOUBT     SG 05/99\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R3                                        SG 05/99\n         MVC   USMNEXT(3),FREERBA  CHAIN TO MESSAGE JUST WRTTN SG 05/99\n         DROP  R3                                              SG 05/99\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nCHAINMND BR    R9                                              SG 05/99\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE MESSAGE TEXT FOR THE MESSAGE TO BE SENT.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETMSGT  DS    0H                  GET MESSAGE TEXT TO SEND    SG 05/99\n         ST    R7,SAVEWRK7         SAVE REGISTER CONTENTS      SG 05/99\n         ST    R8,SAVEWRK8         SAVE REGISTER CONTENTS      SG 05/99\n         L     R3,0(,R11)          LOAD ADDRESS OF CMD BUFFER  SG 05/99\n         LH    R8,CMBLENG          TOTAL LENGTH OF CMD BUFFER  SG 05/99\n         LA    R3,4(,R3)           COMPENSATE FOR HEADER       SG 05/99\n         SH    R8,=H'4'            AND MINUS HEADER LENGTH     SG 05/99\n         LH    R7,OFFSETT          LOAD OFFSET VALUE           SG 05/99\n         LA    R3,0(R7,R3)         POINT TO BEGINNING OF CMD   SG 05/99\n         SR    R8,R7               CMD BUFFER LNG MINUS OFFSET SG 05/99\n         XR    R7,R7               ZERO REGISTER               SG 05/99\n         IC    R7,NEWPSCBL         LOAD LENGTH OF USERID       SG 05/99\n         LA    R3,0(R7,R3)         POINT PAST USERID           SG 05/99\n         SR    R8,R7               SUBTRACT USERID LENGTH      SG 05/99\n         BC    8,WMESS2            ZERO, ISSUE MESSAGE.        SG 05/99\n         BC    5,EOJ8              LESS, OVERFLOW, GET OUT     SG 05/99\n         LR    R7,R8               INITIALIZE MESSAGE LENGTH   SG 05/99\nFRSTBLNK DS    0H                  IF NON-BLANK,ASSUME MESSAGE SG 05/99\n*                                  STARTS HERE.                SG 05/99\n         CLI   0(R3),X'40'         ARE WE AT A BLANK?          SG 05/99\n         BE    LEADBLNK            YES, LOOK FOR MORE BLANKS   SG 05/99\n         B     BLANKEND            NO, ASSUME MSG STARTS HERE  SG 05/99\nLEADBLNK DS    0H                  BUMP PAST LEADING BLANKS    SG 05/99\n         CLI   0(R3),X'40'         IS THIS CHAR A BLANK?       SG 05/99\n         BNE   BLANKEND            NO, END LOOP                SG 05/99\n         LA    R3,1(,R3)           BUMP TO NEXT CHARACTER      SG 05/99\n         BCTR  R7,0                MESSAGE IS 1 CHAR SHORTER   SG 05/99\n         BCT   R8,LEADBLNK         LOOP TILL 1ST NON-BLANK     SG 05/99\nBLANKEND DS    0H                  SAVE MESSAGE TEXT NOW.      SG 05/99\n         BCTR  R7,0                ONE LESS FOR EXECUTE        SG 05/99\n         MVC   MSGTEXT(125),BLANKMSG   BLANK SEND MSG AREA     SG 05/99\n         EX    R7,MOVEMSGG         MOVE THE MESSAGE INTO IT    SG 05/99\n         MVC   LINE,LINE-1         CLEAR MESSAGE LINE          SG 05/99\n         MVC   LINE,MSGTEXT        MOVE TEXT IN                SG 05/99\n         LA    R0,1(,R7)           LOAD TRUE MESSAGE LENGTH    SG 05/99\n         BAL   R4,MSG              GO WRITE MESSAGE TEXT       SG 05/99\n         LA    R7,1(,R7)           LOAD TRUE MESSAGE LENGTH    SG 05/99\n         ST    R7,LENTHMSG                                     SG 05/99\n         L     R7,SAVEWRK7         RESTORE REGISTER CONTENTS   SG 05/99\n         L     R8,SAVEWRK8         RESTORE REGISTER CONTENTS   SG 05/99\n         BR    R9                                              SG 05/99\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   NUMRECS(4),R1RECNUM   SAVE TOTAL NUMBER OF RECORDS\n         ST    R7,SAVER7           SAVE REGISTER             DIAG 06/99\n         L     R7,NUMRECS          PUT NUMBER OF RECORDS IN  DIAG 06/99\n         BCTR  R7,0                MINUS ONE                 DIAG 06/99\n         ST    R7,HIWATER          HIGHEST RBA PERMITTED     DIAG 06/99\n         L     R7,SAVER7           RESTORE REGISTER          DIAG 06/99\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        ROUTINE TO DISPLAY HEX VALUES                            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   MESSENTU(8),BLANKS\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS        ZERO OUT\n         MVC   FSRCRBA(3),ZEROS          ALL THE RBA\n         MVC   NEXTRBA(3),ZEROS            STORAGE AREAS\n         MVC   NFRERBA(3),ZEROS\n         MVC   MINRBA(3),=X'FFFFFF'    PUT A LARGE VALUE IN\n         MVI   ALLFLAG,X'00'\n         MVI   FULLFLAG,X'00'\n         MVC   MSGTEXT(125),BLANKMSG   MOVE BLANKS TO MSG AREA SG 05/99\n         MVC   OFFSETT(2),ZEROS                                SG 05/99\n         MVC   CMBLENG(2),ZEROS                                SG 05/99\n         MVC   NUMRECS(4),ZEROS                                SG 05/99\n         MVC   HIWATER(4),ZEROS        PREVENT S0CX          DIAG 06/99\n         MVC   NFRERBA(3),ZEROS                                SG 05/99\n         BR    R9\n* ------------------------------------------------------------------ *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              SAVE CPPL POINTERS                                 *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*        R3 POINTS TO THE SLOT, WHEN THIS ROUTINE IS DONE.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         MVC   BLOCKNO(3),MYUSRBA                              SG 05/99\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\n         CLI   FULLFLAG,X'FF'      DID WE FILL AND RECYCLE?    SG 05/99\n         BE    FULLUPD             YES, JUST LOWER FREE SR REC SG 05/99\n         CLC   0(3,R5),NFRERBA     SHOULD FREE SEARCH RECORD BE RAISED\n         BNL   NOFRSR                NO. JUST GET OUT.\nFULLUPD  MVC   0(3,R5),NFRERBA     YES. CHANGE ITS VALUE.\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITEND  DS    0H\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINE,MESSENT                     END OF USER LINE\n         MVC   MESSENT+25(7),SAVEID                            SG 05/99\n         LA    R0,L'MESSENT+8\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R3\nMOVEMESG MVC   USMTEXT(*-*),MSGTEXT  EXECUTED\n         DROP  R3\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\nMOVEMSGG MVC   MSGTEXT(*-*),0(R3)  EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLANKMSG DC    CL125' '                                        SG 05/99\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'YOU HAVE TO SPECIFY MESSAGE TEXT AFTER THE USERID'\nMESSAGE3 DC    C'YOU HAVE TO SPECIFY A USERID AFTER THE COMMAND NAME'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESSENT  DC    C'MESSAGE SENT TO USERID: '\nMESSENTU DC    CL8'        '                                   SG 05/99\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESSFULL DC    C'SYS1.BRODCAST IS FULL.  NO ROOM TO WRITE MESSAGES.'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nPREVRBA  DC    X'000000'           RBA OF PREVIOUS MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nFREERBA  DC    X'000000'           RBA OF FREE MESSAGE SLOT FOUND\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMINRBA   DC    X'000000'\nNFRERBA  DC    X'000000'           NEW FREE SEARCH RBA FOR TYPE 5\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSAVEID   DS    CL8                 STORE USERID HERE\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER7   DS    F                   SAVE REGISTER\nSAVER8   DS    F                   SAVE REGISTER\nSAVER9   DS    F                   SAVE BAL REGISTER\nSAVER9A  DS    F                   SAVE BAL REGISTER\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\nFULLFLAG DS    X\nOFFSETT  DS    H                                               SG 05/99\nCMBLENG  DS    H                                               SG 05/99\nMSGTEXT  DS    CL125                                           SG 05/99\nSAVEWRK7 DS    F                                               SG 05/99\nSAVEWRK8 DS    F                                               SG 05/99\nLENTHMSG DS    F                                               SG 05/99\nNUMRECS  DS    F                                               SG 05/99\nHIWATER  DS    F                                             DIAG 06/99\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMU": {"ttr": 9994, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00E\\x01\\x00\\x16o\\x01\\x00\\x16o\\x17\\x16\\x00\\x03\\x00\\x02\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-06-14T00:00:00", "modifydate": "2000-06-14T17:16:45", "lines": 3, "newlines": 2, "modlines": 0, "user": "WSBG"}, "text": "PROC 0 BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMUSERS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMUSAD$": {"ttr": 9996, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00!\\x01\\x05\\t\\x1f\\x01\\x05\\x13\\x1f\\t5\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2005-04-01T00:00:00", "modifydate": "2005-05-11T09:35:21", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(BCMUSADD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   BCMUSADD\n SETSSI  CB469247\n SETCODE AC(0)\n NAME    BCMUSADD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMUSADD": {"ttr": 10241, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00U\\x00\\x95\\x14_\\x01\\x05\\x13\\x1f \\x16\\x01\\xe8\\x01\\xd4\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1995-05-25T00:00:00", "modifydate": "2005-05-11T20:16:55", "lines": 488, "newlines": 468, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMUSADD TITLE 'BCMUSADD - ADD USERID ENTRY IN SYS1.BRODCAST.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   BCMUSADD USERID                                   *\n*                                                                     *\n*       FUNCTION:   TO ADD A USERID RECORD TO SYS1.BRODCAST           *\n*                   WITHOUT AFFECTING RACF OR UADS.  USES THE IBM     *\n*                   PUBLISHED INTERFACE MACRO IKJIFRIF FOR TSO/E      *\n*                   RELEASE 1.4 OR ABOVE.                             *\n*                                                                     *\n*         ASMLINK:  EXPECT RETURN CODE 8 FROM THE LINKAGE EDITOR.     *\n*                   ASSEMBLY RETURN CODE SHOULD BE 0.                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  MAY 11, 05                                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL84 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMUSADD CSECT\n         USING BCMUSADD,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(18),CL18'BCMUSADD VER 1.5'\n         DC    C' - ADD USERID ENTRY TO SYS1.BRODCAST '\n         DC    C'WITHOUT AFFECTING UADS OR RACF '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         USING CPPL,R11\n         L     R6,CPPLUPT\n         ST    R6,SAVEUPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT\n         LA    R6,0\n         DROP  R11\n         MVI   LINE-1,C' '         INITIALIZE BLANK\n         USING PSCB,R2\nCHEKAUTH DS    0H                                            PARS 06/99\n         B     CONT0          BYPASS AUTHORIZATION CHECK     PARS 06/99\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n*        ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n*        L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,NOUSERID          ZERO, MESSAGE\n         BC    5,EOJ4              LESS, OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         MVC   TRYID(8),OLDID      RUN USERID SCAN AGAINST MY ID\n         DROP  R2\n         BAL   R9,SETIOPL\nADDUSER  DS    0H\n         STM   R14,R15,STOR1415\n         STM   R0,R1,STOR0001\n         MVC   NEXT(4),=F'0'       INITIALIZE\nDOADD    IKJIFRIF ECT=SAVEECT,PSCB=SAVEPSCB,UPT=SAVEUPT,ADD=ADDADR,    X\n               RETCODE=IKJIFRET,MF=(E,ADDIDL)\n         LM    R14,R15,STOR1415\n         LM    R0,R1,STOR0001\n         EJECT\n         CLC   IKJIFRET,=F'0'\n         BE    EOJ0\n         B     EOJ8\nNOUSERID LA    R15,0                                         PARS 06/99\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAGEU\n         LA    R0,L'MESSAGEU+7\n         BAL   R4,MSG\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,PGMTITLE\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAG12\n         LA    R0,L'MESSAG12+7\n         BAL   R4,MSG\n         LA    R15,4\n         B     EOJ                 CONT.\nEOJ0     DS    0H                  SET CC = 0.\n         BAL   R9,PGMTITLE\n         MVC   MESSAG10+7(7),NEWID\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAG10\n         LA    R0,L'MESSAG10+7\n         BAL   R4,MSG\n         SR    R15,R15\n         B     EOJ                 CONT.\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,PGMTITLE\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAG11\n         LA    R0,L'MESSAG11+7\n         BAL   R4,MSG\n         LA    R15,8\n         B     EOJ                 CONT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\nPGMTITLE DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAGET\n         LA    R0,L'MESSAGET+7\n         BAL   R4,MSG\n         BR    R9\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGET DC    C'BCMUSADD - VER. 1.5 - &SYSDATE - &SYSTIME  '\nMESSAGEU DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSAGE1 DC    C'BAD OPEN'\nMESSAGE2 DC    C'GOT HEDR'\nMESSAGE3 DC    C'MOV 1RBA'\nMESSAGE4 DC    C'INDEXUS '\nMESSAGE5 DC    C'SAVPTRS '\nMESSAGE6 DC    C'GOBLASTA'\nMESSAGE7 DC    C'FINDUS 1'\nMESSAGE8 DC    C'FINDUS 2'\nMESSAGE9 DC    C'FINDUS 3'\nMESSAG10 DC    C'USERID         ADDED TO BRODCAST DATASET'\nMESSAG11 DC    C'NOT DONE'\nMESSAG12 DC    C'CONTROL BLOCK PROBLEMS'\nMESSAG13 DC    C'MESSAG13'\nMESSAG14 DC    C'MESSAG14'\nMESSAG15 DC    C'MESSAG15'\nMESSAG16 DC    C'MESSAG16'\nMESSAG17 DC    C'MESSAG17'\nMESSAG18 DC    C'MESSAG18'\nMESSAG19 DC    C'MESSAG19'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE 1\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nADDADR   DS    0CL12\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nADDIDL   IKJIFRIF MF=L\nADDIDEND DS    0F\nADDIDLEN EQU   *-ADDIDL\nIKJIFRET DS    F\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         SPACE\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJIOPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMUSDE$": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00G\\x01\\x05\\t\\x1f\\x01\\x05\\x13\\x1f\\t5\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2005-04-01T00:00:00", "modifydate": "2005-05-11T09:35:47", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(BCMUSDEL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   BCMUSDEL\n SETSSI  CB469247\n SETCODE AC(0)\n NAME    BCMUSDEL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMUSDEL": {"ttr": 10251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00U\\x00\\x95\\x14o\\x01\\x05\\x13\\x1f #\\x01\\xe9\\x01L\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1995-05-26T00:00:00", "modifydate": "2005-05-11T20:23:55", "lines": 489, "newlines": 332, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMUSDEL TITLE 'BCMUSDEL - DELETE USERID ENTRY IN SYS1.BRODCAST.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   BCMUSDEL USERID                                   *\n*                                                                     *\n*       FUNCTION:   TO DELETE A USERID RECORD FROM SYS1.BRODCAST      *\n*                   WITHOUT AFFECTING RACF OR UADS.  USES THE IBM     *\n*                   PUBLISHED INTERFACE MACRO IKJIFRIF FOR TSO/E      *\n*                   RELEASE 1.4 OR ABOVE.                             *\n*                                                                     *\n*         ASMLINK:  EXPECT RETURN CODE 8 FROM THE LINKAGE EDITOR.     *\n*                   ASSEMBLY RETURN CODE SHOULD BE 0.                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.5            *\n*                                                                     *\n*            DATE:  MAY 11, 05                                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL84 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMUSDEL CSECT\n         USING BCMUSDEL,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(18),CL18'BCMUSDEL VER 1.5'\n         DC    C' - DELETE USERID ENTRY FROM SYS1.BRODCAST '\n         DC    C'WITHOUT AFFECTING UADS OR RACF '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         USING CPPL,R11\n         L     R6,CPPLUPT\n         ST    R6,SAVEUPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT\n         LA    R6,0\n         DROP  R11\n         MVI   LINE-1,C' '         INITIALIZE BLANK\n         USING PSCB,R2\nCHEKAUTH DS    0H                                            PARS 06/99\n         B     CONT0          BYPASS AUTHORIZATION CHECK     PARS 06/99\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n*        ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n*        L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,NOUSERID          ZERO, MESSAGE\n         BC    5,EOJ4              LESS, OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         MVC   TRYID(8),OLDID      RUN USERID SCAN AGAINST MY ID\n         DROP  R2\n         BAL   R9,SETIOPL\nADDUSER  DS    0H\n         STM   R14,R15,STOR1415\n         STM   R0,R1,STOR0001\n         MVC   NEXT(4),=F'0'       INITIALIZE\nDOADD    IKJIFRIF ECT=SAVEECT,PSCB=SAVEPSCB,UPT=SAVEUPT,DEL=DELADR,    X\n               RETCODE=IKJIFRET,MF=(E,ADDIDL)\n         LM    R14,R15,STOR1415\n         LM    R0,R1,STOR0001\n         EJECT\n         CLC   IKJIFRET,=F'0'\n         BE    EOJ0\n         B     EOJ8\nNOUSERID LA    R15,0                                         PARS 06/99\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAGEU\n         LA    R0,L'MESSAGEU+7\n         BAL   R4,MSG\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,PGMTITLE\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAG12\n         LA    R0,L'MESSAG12+7\n         BAL   R4,MSG\n         LA    R15,4\n         B     EOJ                 CONT.\nEOJ0     DS    0H                  SET CC = 0.\n         BAL   R9,PGMTITLE\n         MVC   MESSAG10+7(7),NEWID\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAG10\n         LA    R0,L'MESSAG10+7\n         BAL   R4,MSG\n         SR    R15,R15\n         B     EOJ                 CONT.\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,PGMTITLE\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAG11\n         LA    R0,L'MESSAG11+7\n         BAL   R4,MSG\n         LA    R15,8\n         B     EOJ                 CONT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\nPGMTITLE DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINET,MESSAGET\n         LA    R0,L'MESSAGET+7\n         BAL   R4,MSG\n         BR    R9\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGET DC    C'BCMUSDEL - VER. 1.5 - &SYSDATE - &SYSTIME  '\nMESSAGEU DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSAGE1 DC    C'BAD OPEN'\nMESSAGE2 DC    C'GOT HEDR'\nMESSAGE3 DC    C'MOV 1RBA'\nMESSAGE4 DC    C'INDEXUS '\nMESSAGE5 DC    C'SAVPTRS '\nMESSAGE6 DC    C'GOBLASTA'\nMESSAGE7 DC    C'FINDUS 1'\nMESSAGE8 DC    C'FINDUS 2'\nMESSAGE9 DC    C'FINDUS 3'\nMESSAG10 DC    C'USERID         AND ITS MESSAGES DELETED FROM BRODCAST -\n               DATASET'\nMESSAG11 DC    C'NOT DONE'\nMESSAG12 DC    C'CONTROL BLOCK PROBLEMS'\nMESSAG13 DC    C'MESSAG13'\nMESSAG14 DC    C'MESSAG14'\nMESSAG15 DC    C'MESSAG15'\nMESSAG16 DC    C'MESSAG16'\nMESSAG17 DC    C'MESSAG17'\nMESSAG18 DC    C'MESSAG18'\nMESSAG19 DC    C'MESSAG19'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE 1\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nDELADR   DS    0CL12\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nADDIDL   IKJIFRIF MF=L\nADDIDEND DS    0F\nADDIDLEN EQU   *-ADDIDL\nIKJIFRET DS    F\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         SPACE\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJIOPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMUSERS": {"ttr": 10504, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01-\\x001\\x00\\x95\\x15\\x0f\\x01\\x00\\x16o\\x16\\x04\\x030\\x02-\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.45", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "2000-06-14T16:04:31", "lines": 816, "newlines": 557, "modlines": 0, "user": "WSBG"}, "text": "BCMUSERS TITLE 'BCMUSERS - DISPLAY USERIDS DEFINED TO SYS1.BRODCAST'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMUSERS A(LL)      TO LIST ALL USERID RECORDS    *\n*                                                                     *\n*                   BCMUSERS            TO LIST ONLY NUMBER OF MSGS   *\n*                                       FOR EACH USER THAT HAS THEM.  *\n*                                                                     *\n*       FUNCTION:   TO LIST USERID RECORDS OF ALL TSO USERS DEFINED   *\n*                   TO THE SYS1.BRODCAST DATASET.                     *\n*                                                                     *\n*                   USERS WITHOUT MESSAGES WILL BE LISTED IN 1 LINE.  *\n*                   USERS WITH MESSAGES WILL BE LISTED IN 3 LINES.    *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.6            *\n*                                                                     *\n*            DATE:  MAY 18, 99                                        *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*         CHANGES:  99/04/28  -  TOOK OFF RESTRICTIONS OF OPER, ACCT. *\n*                                OPEN SYS1.BRODCAST FOR INPUT INSTEAD *\n*                                OF UPDAT.  OK FOR GENERAL USERS.     *\n*                   95/05/31  -  HAS COUNT OF MSGS AND ID DISPLAY     *\n*                                USERID ALL$#@ WILL DISPLAY ALL MSGS  *\n*                   95/06/08  -  STRUCTURED SUBROUTINES AND COMMENTS  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMUSERS CSECT\n         USING BCMUSERS,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMUSERS VER 1.6'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    5,EOJ8            (ZERO) LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   DS    0H\n         MVI   ALLFLAG,X'FF'       DO YOUR STUFF FOR ALL USERIDS.\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R7,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\n         AP    USERCNT,=P'1'       INCREMENT USER COUNTER      SG 05/99\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE COUNT FOR RETRY (IF \"ALL\")\n         BCT   R7,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n         CLC   SAVEPTRS(6),ZEROS\n         BE    SKIPSHOW\nMSGX1    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         MVC   LINE+1(7),TRYID\n         HEX   LINE+10,3,USDRBA\n         HEX   LINE+18,3,USDEND\n         MVC   LINE+26(21),=C'      USERID POINTERS'\n         CLI   SUMFLAG,X'FF'        SUMMARY ONLY?              SG 05/99\n         BE    GOGO2                YES. DON'T WRITE MESSAGE   SG 05/99\n         BAL   R4,MSG                 TAKE OUT\nGOGO2    DS    0H                                              SG 05/99\nSKIPSHOW DS    0H\nMSGX2    LA    R0,65                  TAKE OUT LATER\n         MVC   LINE,LINE-1            TAKE OUT\n         HEX   LINE,3,MYUSRBA         TAKE OUT LATER\n         HEX   LINE+8,1,MYUSSLOT\n         MVC   LINE+13(7),TRYID\n         MVC   LINE+24(31),=C'    DEFINED USERID IN BRODCAST ' TAKE OUT\n         CLI   SUMFLAG,X'FF'      SUMMARY ONLY ?               SG 05/99\n         BE    GOGO1              YES. DON'T WRITE MESSAGE     SG 05/99\n         BAL   R4,MSG                 TAKE OUT\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\nGOGO1    DS    0H                                              SG 05/99\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         MVC   WK1ALL,USRALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),USERCNT\n         MVC   LINET(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL+7\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\n         OI    0(R7),X'40'         UPPERCASE PARM LETTER       SG 05/99\n         CLI   0(R7),X'C1'         IS FIRST LETTER AN A ?      SG 06/00\n         BE    GETGO1              NO. NOT A SPECIAL PARM      SG 05/99\n         MVI   SUMFLAG,X'FF'       RUN SUMMARY IF NOT \"A\"      SG 06/00\nGETGO1   MVI   0(R7),X'C1'         FORCE A LETTER IN           SG 05/99\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         MVI   NEWID,C'A'                                      SG 05/99\n         MVI   OLDID,C'A'                                      SG 05/99\n         MVI   OLDPSCBL,X'01'      STUFF FIELD                 SG 05/99\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   USERCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         MVI   SUMFLAG,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\nWRITLOOP DS    0H\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         BCTR  R6,0\n         EX    R6,MOVEMSG\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n*        BAL   R4,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS\n         BE    WRITLEND\n         MVC   MESSRBA(3),USMNEXT\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         B     WRLOOP\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n*        BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n*        BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(62),LINE-1                 OF ASTERISKS.\n*        BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nUSRALL DC C'TOTAL # OF USERIDS DEFINED  IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nUSERCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\nSUMFLAG  DS    X\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCMXPOR$": {"ttr": 11009, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\x01\\x18\\x7f\\x01\\x01\\x18\\x7f\\x15V\\x00\\x18\\x00\\x0c\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-07-06T00:00:00", "modifydate": "2001-07-06T15:56:42", "lines": 24, "newlines": 12, "modlines": 0, "user": "WSBG"}, "text": "//WSBGBCMX  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=S,MSGCLASS=X\n//*\n//*****************************************************************//\n//*                                                               *//\n//*  JCL TO RUN BCMXPORT, TO DUMP ALL SYS1.BRODCAST MESSAGES      *//\n//*  TO A CLIST THAT CAN BE EXECUTED.  THE CLIST CONTAINS         *//\n//*  BCMSEND COMMANDS (WHICH CAN BE EDITED INTO SEND COMMANDS)    *//\n//*  THAT WILL RE-CREATE ALL THE MESSAGES ON ANOTHER BRODCAST     *//\n//*  DATASET, OR ON THE SAME ONE, AFTER AN ACCOUNT SYNC OPERATION *//\n//*  HAS WIPED OFF ALL THE USER MESSAGES.                         *//\n//*                                                               *//\n//*****************************************************************//\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//STEPLIB  DD DISP=SHR,DSN=WSBG.LOAD\n//BRODCAST DD DISP=SHR,DSN=SYS1.BRODCAST,      <-- OR A COPY THEREOF\n//         UNIT=SYSDA,VOL=SER=SARES1\n//SYSTSPRT DD SYSOUT=*\n//EXPORT   DD DISP=SHR,DSN=WSBG.VB255.PDS(MSGCLIST)\n//SYSTSIN DD *\n BCMXPORT ALL$#@\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCMXPORT": {"ttr": 11011, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01I\\x00'\\x01\\x01\\x05O\\x01\\x07\\x14\\x1f\\x12T\\x04\\x01\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.73", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2007-05-21T12:54:27", "lines": 1025, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BCMXPORT TITLE 'BCMXPORT - EXPORT BRODCAST MESSAGES FOR RESENDING'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO-IN-BATCH *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   BCMXPORT USERID MSGS(MM) SKIP(NN)                 *\n*                           USERID IS MANDATORY, OTHERS ARE           *\n*                           OPTIONAL                                  *\n*                                                                     *\n*       FUNCTION:   TO LIST BRODCAST MESSAGES FOR A USERID WITHOUT    *\n*                   DELETING THEM.  IF YOU INVOKE FOR SPECIAL         *\n*                   \"USERID\" ALL$#@, THEN ALL USERIDS WHICH HAVE      *\n*                   MESSAGES ARE DISPLAYED.  THE SPECIAL ID FOR       *\n*                   DISPLAYING ALL USERIDS CAN BE CHANGED AT LABEL    *\n*                   ALLSET.                                           *\n*                                                                     *\n*                THE NEW \"EXPORT\" DD NAME:                            *\n*                                                                     *\n*                   YOU CAN \"EXPORT\" MESSAGES FROM SYS1.BRODCAST,     *\n*                   OR A COPY THEREOF, TO A VB-255 CLIST FILE,        *\n*                   USING THIS PROGRAM.                               *\n*                                                                     *\n*                   ALL THESE MESSAGES ARE FORMATTED AS BCMSEND (OR   *\n*                   SEND) COMMANDS, TO BE RE-SENT AS MESSAGES TO A    *\n*                   SYS1.BRODCAST DATASET.  THUS, IF YOU ARE FORCED   *\n*                   TO DO AN ACCOUNT SYNC FOR SOME REASON, TO CLEAR   *\n*                   OUT ALL THE USER MESSAGES, YOU CAN TAKE A BACKUP  *\n*                   OF THE MESSAGES, USING THIS PROGRAM, AND THEN     *\n*                   RE-SEND THEM TO THE EMPTY BRODCAST DATASET.       *\n*                                                                     *\n*                   THIS METHOD CAN ALSO BE USED IF YOU ARE CONVER-   *\n*                   TING TO TSO USERLOGS.  JUST BACK UP THE MESSAGES  *\n*                   WITH THIS PROGRAM, AND RE-SEND THEM LATER, TO     *\n*                   THE USERLOGS, AFTER THEY ARE CREATED.             *\n*                                                                     *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   2.1            *\n*                                                                     *\n*            DATE:  JULY 06, 01                                       *\n*                                                                     *\n*   TSO EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST')  SH REUSE   *\n*                   ALLOC F(EXPORT) DA('MY.VB255.DATASET') SH REUSE   *\n*                                                                     *\n*   JCL EXECUTION:                                                    *\n*                                                                     *\n*   //WSBGBCMX  JOB (ACCT#),S-GOLOB,                                  *\n*   // NOTIFY=&SYSUID,                                                *\n*   // CLASS=S,MSGCLASS=X                                             *\n*   //*                                                               *\n*   //TSOBATCH EXEC PGM=IKJEFT01                                      *\n*   //STEPLIB  DD DISP=SHR,DSN=WSBG.LOAD                              *\n*   //BRODCAST DD DISP=SHR,DSN=SYS1.BRODCAST     <-- OR A COPY        *\n*   //SYSTSPRT DD SYSOUT=*                                            *\n*   //EXPORT   DD DISP=SHR,DSN=WSBG.VB255.PDS(SECCOPY)                *\n*   //SYSTSIN DD *                                                    *\n*    BCMXPORT ALL$#@                                                  *\n*   /*                                                                *\n*                                                                     *\n*                                                                     *\n*   CHANGES:                                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBCMXPORT CSECT\n         USING BCMXPORT,R12,R10\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'BCMXPORT VER 2.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, WRITE MESSAGE TO ENTER USERID\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(6),=C'ALL$#@'\n         BNE   ONEID\n         MVI   ALLFLAG,X'FF'\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(INPUT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n         OPEN  (EXPORT,(OUTPUT))\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR\n*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND\n*    USERIDS AREN'T MISSED UPON RETRY.\n         LA    R7,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         BCT   R7,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         CLI   ALLFLAG,X'FF'       ARE WE PROCESSING ALL NONEMPTIES?\n         BE    TRYMORE             YES. KEEP TRYING MORE ID'S\n* ----                   WRITLOOP NEEDS R5 AND R7 SAVED AND RESTORED\n         ST    R5,SAVERG5          SAVE WORK REGISTER\n         ST    R7,SAVERG7          SAVE WORK REGISTER\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         L     R5,SAVERG5          RESTORE REGISTER\n         L     R7,SAVERG7          RESTORE REGISTER\n* ----\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         B     ZEROUT                  AND SCRAM\nTRYMORE  CLC   MESSRBA(3),ZEROS    DOES THIS ID HAVE ANY MESSAGES?\n         BE    TRYMOREN            NO. GO TO THE NEXT ID.\n* ----                   WRITLOOP NEEDS R5 AND R7 SAVED AND RESTORED\n         ST    R5,SAVERG5          SAVE WORK REGISTER\n         ST    R7,SAVERG7          SAVE WORK REGISTER\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         L     R5,SAVERG5          RESTORE REGISTER\n         L     R7,SAVERG7          RESTORE REGISTER\n* ----\n         BAL   R9,WRITEND          FINISH OFF USERID AND CHECK MORE\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         BAL   R9,REFINDUS         FIND USER SLOT AGAIN TO GO FURTHER\nTRYMOREN B     TRYNEXT             THEN GO FURTHER\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND               WRITE MESSAGE THAT\n         MVC   LINE(L'MESPREND),MESPREND      THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  CLI   ALLFLAG,X'FF'                 ARE WE DOING ALL IDS ?\n         BNE   NOTALL2                       NO. JUST FINISH THIS ONE.\n         MVC   LINE,LINE-1                   YES. WE TOTAL 'EM ALL.\n         LA    R0,60                           WRITE A BUNCH OF\n         BAL   R4,MSG                          LINES AT THE END\n         MVC   WK1ALL,MESALL                      WITH THE TOTAL COUNT\n         MVC   WK1ALL+46(10),MASK10               AND ENDING MESSAGE\n         ED    WK1ALL+45(11),TMSGCNT\n         MVC   LINE(L'WK1ALL),WK1ALL\n         LA    R0,L'WK1ALL\n         BAL   R4,MSG                       THEN\n         B     EOJ0                           GET THE HECK OUT\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINE(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR                        DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE2                  YOU HAVE TO ENTER THE\n         LA    R0,L'MESSAGE2                    USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINE,MESSAGE1                  SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1                    TO DDNAME BRODCAST.\n         BAL   R4,MSG\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         CLOSE (EXPORT)\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n*\n         USING PSCB,R2\nGETIDS   AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\nLOOKKEYW DS    0H                  LOOK FOR KEYWORDS MSGS AND SKIP\n         LA    R7,1(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,1(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         MVC   MSGSWKL(5),BLANKS\n         MVC   MSGSWKL(5),0(R7)    MOVE 5 CHARS TO WKAREA\n         OC    MSGSWKL(4),BLANKS   UPPERCASE FIELD\n         CLC   =C'MSGS(',MSGSWKL   MSGS KEYWORD THERE?\n         BE    DOMSGS              YES. HANDLE IT.\n         MVC   SKIPWKL(5),BLANKS\n         MVC   SKIPWKL(5),0(R7)    MOVE 5 CHARS TO WKAREA\n         OC    SKIPWKL(5),BLANKS   UPPERCASE FIELD\n         CLC   =C'SKIP(',SKIPWKL   SKIP KEYWORD THERE?\n         BE    DOSKIP              YES. HANDLE IT.\n         B     LOOKKEYW            GO LOOP AND LOOK AT NEXT CHARACTER\nDOMSGS   DS    0H\n         LA    R7,5(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,5(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         LR    R6,R7               GET START OF NUMBER\nDOMSGSL  DS    0H\n         CLI   0(R6),C' '\n         BE    DOMSGSNO\n         CLI   0(R6),C')'\n         BE    DOMSGSNO\n         LA    R8,1(,R8)\n         LA    R6,1(,R6)\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   DOMSGSNO\n         B     DOMSGSL\nDOMSGSNO DS    0H\n         SR    R6,R7\n         BCTR  R6,0\n         EX    R6,PACKM\n* ---- TEST\n         STM   R0,R1,SAVER0R1\n         OI    WORKM+7,X'0F'     SIGN NIBBLE\n         MVC   DATAMSGS+24(10),EDPAT\n         ED    DATAMSGS+24,WORKM+3\n         MVC   LINE,LINE-1                 WRITE TEST MESSAGE\n         LA    R0,L'DATAMSGS\n         MVC   LINE(L'DATAMSGS),DATAMSGS\n         BAL   R4,MSG\n         LM    R0,R1,SAVER0R1\n* ---- TEST\n         CVB   R0,WORKM\n         ST    R0,COUNTM\n         LA    R6,1(,R6)           RESTORE R6\n         AR    R7,R6               GET READY TO GO ON LOOKING\n         B     LOOKKEYW\nDOSKIP   DS    0H\n         LA    R7,5(,R7)           BUMP CMD BUFFER POINTER\n         LA    R8,5(,R8)           BUMP CHARACTER COUNTER\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   GETIDEND            YES. DON'T LOOK ANY MORE\n         LR    R6,R7               GET START OF NUMBER\nDOSKIPL  DS    0H\n         CLI   0(R6),C' '\n         BE    DOSKIPNO\n         CLI   0(R6),C')'\n         BE    DOSKIPNO\n         LA    R8,1(,R8)\n         LA    R6,1(,R6)\n         CR    R8,R5               END OF COMMAND BUFFER?\n         BNL   DOSKIPNO\n         B     DOSKIPL\nDOSKIPNO DS    0H\n         SR    R6,R7\n         BCTR  R6,0\n         EX    R6,PACKS\n* ---- TEST\n         STM   R0,R1,SAVER0R1\n         OI    WORKS+7,X'0F'     SIGN NIBBLE\n         MVC   DATASKIP+24(10),EDPAT\n         ED    DATASKIP+24,WORKS+3\n         MVC   LINE,LINE-1\n         LA    R0,L'DATASKIP               WRITE TEST MESSAGE\n         MVC   LINE(L'DATASKIP),DATASKIP\n         BAL   R4,MSG\n         LM    R0,R1,SAVER0R1\n* ---- TEST\n         CVB   R0,WORKS\n         ST    R0,COUNTS\n         LA    R6,1(,R6)           RESTORE R6\n         AR    R7,R6               GET READY TO GO ON LOOKING\n         B     LOOKKEYW\nGETIDEND BR    R9\nPACKM    PACK  WORKM,0(0,7)\nPACKS    PACK  WORKS,0(0,7)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n*\nHEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEXPROUT  DS    0H\n         MVC   OUTBLANK(8),=CL8' '\n         MVC   OUTLIT(8),=C'BCMSEND '\n         MVC   OUTUSER(8),TRYID\n         PUT   EXPORT,OUTLINE\n         BR    R4                  RETURN TO CALLER\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n*\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   SMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   MMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVI   ALLFLAG,X'00'\n         MVC   WORKM,DUBLZERO\n         MVC   WORKS,DUBLZERO\n         MVC   COUNTM,FULLZERO\n         MVC   COUNTS,FULLZERO\n         MVC   DATAMSGS,TESTMSGS\n         MVC   DATASKIP,TESTSKIP\n         MVC   WKLBLNK(2),BLANKS\n         MVC   MSGSWKL(5),BLANKS\n         MVC   SKIPWKL(5),BLANKS\n         MVI   SKLSFLAG,X'00'\n         MVI   OUTDATA,X'40'\n         MVC   OUTDATA+1(250),OUTDATA    CLEAR AREA\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n*\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n*\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n*\n*        R5 AND R7 MUST BE SAVED BEFORE ENTERING THIS ROUTINE\n*        AND THEY MUST BE RESTORED RIGHT AFTER LEAVING THIS ROUTINE.\n*\nWRITLOOP DS    0H\n         NI    SKLSFLAG,X'FF'-X'07'   TURN OFF ALL FLAGS\n         XR    R5,R5               CLEAR R5 FOR REUSE IN THIS ROUTINE\n         XR    R7,R7               CLEAR R7 FOR REUSE IN THIS ROUTINE\n         CLC   COUNTS,=F'0'        HAVE WE CODED A SKIP COUNT?\n         BE    WRLOOPTM\n         OI    SKLSFLAG,X'01'      SHOW WE'RE SKIPPING\n         L     R5,COUNTS\nWRLOOPTM DS    0H\n         CLC   COUNTM,=F'0'\n         BE    WRLOOP\n         OI    SKLSFLAG,X'02'      SHOW WE'RE LIMITING MESSAGES\n         L     R7,COUNTM\n         TM    SKLSFLAG,X'01'      ARE WE ALSO SKIPPING?\n         BZ    WRLOOP              NO. R7 IS FINE. OTHERWISE,\n         LA    R7,1(,R7)           THEN COMPENSATE BCT REGISTER\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         LR    R6,R0\n         A     R0,=F'28'\n         STH   R0,OUTLENG\n         BCTR  R6,0                ADJUST LENGTH FOR EXECUTE\n         EX    R6,MOVEMSG\n         EX    R6,EXPTMSG\nWRLSKIP1 DS    0H\n         TM    SKLSFLAG,X'01'      ARE WE SKIPPING MESSAGES?\n         BO    WRLSKIP2            YES. PASS THE PRINTING STUFF.\n         TM    SKLSFLAG,X'04'      LIMITING-AND HAVE PASSED THE LIMIT?\n         BO    WRLSKIP2            YES. PASS THE PRINTING STUFF.\nWRLLIMS1 DS    0H\n         TM    SKLSFLAG,X'02'      ARE WE LIMITING MESSAGES?\n         BZ    WRLLIMS2            NO. THEN PRINT THEM.\n         TM    SKLSFLAG,X'04'      LIMITING-AND PASSED THE LIMIT?\n         BO    WRLLIMS3            YES, DON'T PRINT THIS MESSAGE\nWRLLIMS2 DS    0H\n         BAL   R4,MSG              WRITE MESSAGE OUT\n         BAL   R4,EXPROUT          WRITE EXPORT RECORD TOO\nWRLLIMS3 DS    0H\nWRLSKIP2 DS    0H\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS\n         BE    WRITLEND\n         MVC   MESSRBA(3),USMNEXT\n         DROP  R2\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nWRLSKIP3 DS    0H\n         TM    SKLSFLAG,X'01'      SKIPPING, AND NOT FINISHED?\n         BZ    WRLSKIP4            FINISHED SKIPPING. NO BCT.\n         BCT   R5,WRLOOP\n         NI    SKLSFLAG,X'FF'-X'01'\nWRLSKIP4 DS    0H\n         TM    SKLSFLAG,X'04'      LIMITING, AND FINISHED WRITING?\n         BO    WRLLIMS4            YEAH. BYPASS BCT.\n         BCT   R7,WRLOOP\n         OI    SKLSFLAG,X'04'      SHOW THAT YOU'VE FINISHED WRITING\nWRLLIMS4 DS    0H\n         B     WRLOOP\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n*        IF ALLFLAG IS ON, GO TO THE NEXT ID, AND IF NOT,         *\n*        JUST GET OUT.                                            *\n*\nWRITEND  MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINE(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL\n         BAL   R4,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINE,MESSEND                      END OF USER LINE\n         LA    R0,L'MESSEND\n         BAL   R4,MSG\n         CLI   ALLFLAG,X'FF'                   IF NOT ALL USERS\n         BNE   NOTALL4                         JUST CLEAR LINE AND OUT\n         MVC   LINE,LINE-1\n         BAL   R4,MSG                          OTHERWISE SEPARATE\n         MVI   LINE-1,C'*'                     USERS WITH A LINE\n         MVC   LINE(55),LINE-1                 OF ASTERISKS.\n         BAL   R4,MSG\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nDUBLZERO DC    D'0'\nFULLZERO DC    F'0'\nTESTMSGS DC    C'LIMIT  OF MSGS TO READ                '\nTESTSKIP DC    C'NUMBER OF MSGS TO SKIP                '\nEDPAT    DC    X'40202020202020202120'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINE(*-*),USMTEXT         EXECUTED\nEXPTMSG  MVC   OUTMESSG(*-*),USMTEXT     EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAS           DEFERRED TSO MESSAGES'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL9'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\nEXPORT   DCB   DSORG=PS,MACRF=PM,DDNAME=EXPORT,RECFM=VB,LRECL=255       00400\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nWORKM    DS    D\nWORKS    DS    D\nSAVER0R1 DS    D\nSAVERG5  DS    F\nSAVERG7  DS    F\nCOUNTM   DS    F\nCOUNTS   DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nSKLSFLAG DS    X\n*              X'01' MEANS WE ARE SKIPPING RECORDS\n*              X'02' MEANS WE ARE LIMITING RECORDS DISPLAYED\n*              X'04' MEANS WE HAVE PASSED THE DISPLAY LIMIT\nWKLBLNK  DS    CL2\nMSGSWKL  DS    CL5                 THIS ONE FIRST FOR INIT TO BLANKS\nSKIPWKL  DS    CL5\nDATAMSGS DS    CL38                TEST MSGS AREA\n         DC    CL45' '     PADDING\nDATASKIP DS    CL38                TEST SKIP AREA\n         DC    CL45' '     PADDING\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nSMSGCNT  DC    PL5'0'              COUNT OF SKIPPED MESSAGES\nMMSGCNT  DC    PL5'0'              COUNT OF LISTED MESSAGES\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER7   DS    F                   SAVE COUNT FOR USERID SCAN\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL133\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nALLFLAG  DS    X\n         DC    C'   '\nOUTLINE  DS    0CL255\nOUTLENG  DC    H'0'\n         DC    H'0'\nOUTDATA  DS    0CL251\nOUTBLANK DC    CL8' '\nOUTLIT   DC    CL8' '\nOUTUSER  DC    CL8' '\nOUTMESSG DS    CL227\n         DC    C'   '\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BDMDSFI$": {"ttr": 11273, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1b\\x00U\\x00\\x99\\x11\\x8f\\x01\\x16'\\x1f\\x18F\\x00+\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.27", "flags": 0, "createdate": "1999-04-28T00:00:00", "modifydate": "2016-09-27T18:46:55", "lines": 43, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//*                                                               *//\n//*   THIS PROGRAM FIXES ERRORS IN THE BROADCAST DATASET.         *//\n//*                                                               *//\n//*   If you copy a Broadcast Dataset from a disk pack to a disk  *//\n//*   device of a different geometry, for example 3380 to 3390    *//\n//*   or vice-versa, the Broadcast Dataset gets ruined, because   *//\n//*   the actual record number (on the track), the \"R\" of CCHHR,  *//\n//*   appears as the first data byte of all type X'FF' records    *//\n//*   in the Broadcast Dataset.  (Use FDR to copy, not DFDSS.)    *//\n//*                                                               *//\n//*   This program looks at the first data byte of the X'FF'      *//\n//*   Broadcast Dataset records, and if it is wrong, it fixes     *//\n//*   the quantity that should be there, and sets it to the \"R\"   *//\n//*   of the CCHHR of the record.                                 *//\n//*                                                               *//\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//*   This is JCL to create a loadlib for my commercial BDMDSFIX  *//\n//*   program, and to run it against your SYS1.BRODCAST dataset.  *//\n//*   The author of the \"BRODCAST MASTER\" commercial product,     *//\n//*   Sam Golob Systems Programming LLC, gives permission to      *//\n//*   distribute this load module on the CBT Tape, and gives      *//\n//*   permission for anybody to run it, at any site.              *//\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//*   Run this program solely at your own risk.                   *//\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n  RECEIVE INDS('SBGOLOB.CBT493.FILE247(BDMDSFIX)')\n  DSN('SBGOLOB.BDMDSFIX.TESTLIB') VOLUME(WORK02) UNIT(SYSALLDA)\n//*\n//BRODCAST EXEC PGM=IKJEFT01,REGION=3M\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.BDMDSFIX.TESTLIB ==> Previous step\n//SYSTSPRT DD  SYSOUT=*\n//BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR\n//SYSTSIN  DD  *\n BDMDSFIX\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BDMDSFIX": {"ttr": 11275, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01*\\x00\\x07\\x01\\x16'\\x1f\\x01\\x16'\\x1f\\x162\\x00:\\x00:\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@\"", "ispf": {"version": "01.42", "flags": 0, "createdate": "2016-09-27T00:00:00", "modifydate": "2016-09-27T16:32:07", "lines": 58, "newlines": 58, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "BDMNNOT$": {"ttr": 11277, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\t\\x00\\x11\\x01\\x055O\\x01\\x16'\\x1f\\x19H\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.09", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2016-09-27T19:48:11", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE247(BDMNNOTC)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.BCM.LOADLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB493247\n SETCODE AC(1)\n ENTRY   BDMNNOTC\n NAME    BDMNNOTC(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BDMNNOTC": {"ttr": 11521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01U\\x00R\\x01\\x055O\\x01\\t4\\x8f#6\\x02\\xd3\\x01\\x87\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.85", "flags": 0, "createdate": "2005-12-20T00:00:00", "modifydate": "2009-12-14T23:36:52", "lines": 723, "newlines": 391, "modlines": 0, "user": "SBGOLOB"}, "text": "BDMNNOTC TITLE 'BDMNNOTC - SET NUMBER OF NOTICES MADE BY ACCOUNT/SYNC'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.  APF AUTHORIZED.  YOU NEED TO PUT        *\n*                   THIS COMMAND NAME IN THE ACTIVE IKJEFTE2 TABLE.   *\n*                                                                     *\n*         SYNTAX:   BDMNNOTC nnn  (nnn is required number of          *\n*                                  notices in decimal)                *\n*                                                                     *\n*         OUTPUT:   Via PUTLINE interface, using APUT and EPUTL.      *\n*                                                                     *\n*       FUNCTION:   TO CHANGE DEFAULT NUMBER OF SYS1.BRODCAST         *\n*                   NOTICES SLOTS WHICH \"ACCOUNT/SYNC\" WILL PRODUCE.  *\n*                   (THE SETTING LASTS UNTIL NEXT IPL).               *\n*                                                                     *\n*        PROBLEM:   IBM makes it very difficult to change the number  *\n*                   of Global Notices records produced in             *\n*                   SYS1.BRODCAST (or an equivalent active Broadcast  *\n*                   Dataset) when the dataset is initialized with     *\n*                   the ACCOUNT/SYNC IBM-supplied commands.  You      *\n*                   need a zap to module IKJEBLMT in load module      *\n*                   IKJEFXSR, followed by an IPL.  In today's world,  *\n*                   where IPL's are done as infrequently as           *\n*                   possible, this is an undesirable situation.       *\n*                                                                     *\n*                   The difficulty of the IBM change, is because the  *\n*                   actual value that the SYNC command uses, is a     *\n*                   fullword field in the CVT, which is initialized   *\n*                   at IPL time.  Address:  CVT+X'5A8'                *\n*                                                                     *\n*        SOLUTION:  But this difficulty makes it supremely easy to    *\n*                   change the value using an APF-authorized TSO      *\n*                   command, which just goes into the CVT and changes *\n*                   the value, plain and simple.  That is what our    *\n*                   program does, plain and simple.                   *\n*                                                                     *\n*     OBSERVATION:  IBM says that the limit to the number of Notices  *\n*                   records you can create in a Broadcast Dataset is  *\n*                   1000.  I have found that if you have a large      *\n*                   enough Broadcast Dataset, and you set the number  *\n*                   even to 4000, the ACCOUNT/SYNC programs will      *\n*                   create the larger number of notices.  And they    *\n*                   will function correctly, to my knowledge.         *\n*                                                                     *\n*         WARNING:  I have not artificially imposed a limit on the    *\n*                   size of the number in this command.  So use this  *\n*                   command carefully.                                *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.2            *\n*                                                                     *\n*            DATE:  DEC 11, 09                                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*         CHANGES:  1.1 - DEC 12, 09 -                                *\n*                     Fixed messages, better numeric verification.    *\n*                                                                     *\n*                   1.2 - DEC 14, 09 -                                *\n*                     Better comments, title subroutine, cut out      *\n*                     unnecessary code. Put non-numeric test in       *\n*                     the proper place, to not cause a S0C7 abend.    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                  M A I N L I N E   C O D E\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nBDMNNOTC CSECT\nBDMNNOTC AMODE 31\nBDMNNOTC RMODE 24\n         USING BDMNNOTC,R12,R11,R10\n         B     BEGINN-*(,R15)\n         DC    CL15'BDMNNOTC VER 1.2 -'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DS    0H\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15             Set up base\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)         Second base\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)         Third base\n         LR    R6,R1               PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                  Initialize constants.\n         MVC   NEWNMBIN,=F'0'\n         MVI   NUMFLAG,X'00'\n         MVI   LINEB,X'40'\n* ------------------------------------------------------------------- *\n* -- Get old default value for Notices. Do it early on in the program.\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT\n         USING CVT,R2\n         L     R3,CVTEXT2          Addressability to CVTBCLMT\n         USING CVTXTNT2,R3\n         L     R4,CVTBCLMT         Save old default number of Notices.\n         CVD   R4,CVDWORK          Convert to Decimal\n         MVC   DECOLDNM,CVDWORK    Store result to report.\n         MVC   RJUSTWRK(10),MASK10       Move in edit mask.\n         ED    RJUSTWRK(10),DECOLDNM+3   Create display format number.\n         BAL   R9,LJUST            Justify left instead of right.\n         DROP  R2,R3\n* ------------------------------------------------------------------- *\n* --  Is it TSO?  And run optional authorization check.            -- *\n* ------------------------------------------------------------------- *\n         L     R1,16               Point to CVT.\n         L     R1,0(,R1)           Point to TCB/ASCB words.\n         L     R9,4(,R1)           Point to TCB.\n         L     R1,X'B4'(,R9)       Point to JSCB.\n         L     R2,X'108'(,R1)      Point to PSCB.\n         LA    R2,0(,R2)           Clear high byte.\n         LTR   R2,R2               Any PSCB?\n         BZ    EOJ4                Get out. Not TSO.\n         USING PSCB,R2\nCHEKAUTH DS    0H                  TSO Authorization (Oper,Acct)\n         B     CONT0               Bypass authorization check.\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes. Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No. Get out.\n         DROP  R2\n* ------------------------------------------------------------------- *\n* --  Get Parameter - Make sure it is numeric.                     -- *\n* ------------------------------------------------------------------- *\nCONT0    DS    0H\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No. Not TSO.\n         L     R1,0(,R6)           Point to Command Buffer.\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out of none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of Command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,EOJ4              Zero. Message.\n         BC    5,EOJ4              Less, or overflow, out.\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,10               Load Reg for BCT loop.\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)                to first nonnull character\n         LA    R8,0                Initialize character count.\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the number\n*-\n         CLI   0(R7),C'0'          Numeric Test this character - below\n         BL    FLAGON\n         CLI   0(R7),C'9'\n         BH    FLAGON\n         B     FLAGGO\nFLAGON   OI    NUMFLAG,X'01'\nFLAGGO   DS    0H                  Numeric Test this character - above\n*-\n         LA    R7,1(,R7)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nNOMORCUT DS    0H\n         MVC   NEWNUMB(10),BLANKS  Clear field\n         BCTR  R8,0                Subtract 1 for Execute\n         EX    R8,MOVOUTL          Move number into display field\n         LA    R8,1(,R8)           Bump R8 back to where it was\n*\n         TM    NUMFLAG,X'01'       Did it fail the numeric test?\n         BO    NOTNUMER            It failed. No changes to be made.\n*\n         STC   R8,NUMCOUTL         Save PARM number's length (not used)\n         XR    R8,R8               Clear entire register\n         IC    R8,NUMCOUTL         Load full register with count\n         BCTR  R8,0                One less for Execute.\n         EX    R8,PACK             Convert to Packed.\n         CVB   R0,WORK             Convert to Binary.\n         ST    R0,NEWNMBIN         And store number in NEWNMBIN.\n         B     PASTCONV            Jump past constants.\n*\nMOVOUTL  MVC   NEWNUMB(*-*),0(R1)  Executed\nPACK     PACK  WORK,0(0,R1)        For conversion to binary.\nWORK     DC    D'0'                CVB work area.\nFULLZERO DC    F'0'                Fullword of zeros.\n*\nPASTCONV DS    0H                  Continue execution.\n* ------------------------------------------------------------------- *\n* -- > Test if this command is being run APF Authorized  < --\n* ------------------------------------------------------------------- *\nAUTHTEST DS    0H                  Don't let the system get a S047.\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* ------------------------------------------------------------------- *\n* Replace the CVT number here,     Get CVTBCLMT field again, this time\n*   in Key 0.                       to replace it with the new number.\n* ------------------------------------------------------------------- *\n         L     R2,16               CVT.\n         USING CVT,R2\n         L     R3,CVTEXT2          Addressability to CVTBCLMT\n         USING CVTXTNT2,R3\n* ------------------------------------------------------------------- *\nKZ       MODESET KEY=ZERO\n         MVC   CVTBCLMT,NEWNMBIN   Replace the CVTBDLMT in Key 0.\nNZ       MODESET KEY=NZERO\n* ------------------------------------------------------------------- *\n* --  Normal Completion  -                                         -- *\n* ------------------------------------------------------------------- *\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Previous default number of notices: '\n         MVC   LINE+36(10),LJUSTWRK  Left justified display number.\n         APUT  LINE,47\n         MVC   LINE(36),=C'Default number of Notices reset to: '\n         MVC   LINE+36(10),NEWNUMB\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         DROP  R3\n* ------------------------------------------------------------------- *\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\nEOJ4     DS    0H                  SET CC = 4.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG10),MESSAG10\n         APUT  LINE,L'MESSAG10\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,4\n         B     EOJ                 CONT.\n* ------------------------------------------------------------------- *\nEOJ8     DS    0H                  SET CC = 8.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK    Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAG11),MESSAG11\n         APUT  LINE,L'MESSAG11\n         MVC   LINE(L'MESSAG2D),MESSAG2D\n         APUT  LINE,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         LA    R15,8\n         B     EOJ                 CONT\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n** ---------------------------------------------------------------- **\nNOTNUMER DS    0H                     Parameter not numeric.\n         BAL   R9,TITLSTMT            Title Statements\n         MVC   LINE,LINE-1\n         MVC   LINE(36),=C'Current default number of notices:  '\n         MVC   LINE+36(10),LJUSTWRK   Left justified display number.\n         APUT  LINE,47\n         MVC   LINE,LINE-1\n         MVC   MESSPARM,NEWNUMB       Stuff entered parm into message.\n         APUT  MESSAG2B,MESSAG2L\n         APUT  MESSAG2D,L'MESSAG2D\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         B     EOJ\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      S U B R O U T I N E S                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTITLSTMT DS    0H\n         APUT  MESSAGET,L'MESSAGET    Full title and messages.\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSAGEV,L'MESSAGEV\n         APUT  MESSAGEW,L'MESSAGEW\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAGEX,L'MESSAGEX\n         APUT  MESSAGEY,L'MESSAGEY\n         APUT  MESSAGED,L'MESSAGED\n         APUT  MESSAG01,L'MESSAG01\n         APUT  MESSAG02,L'MESSAG02\n         APUT  MESSAG03,L'MESSAG03\n         APUT  MESSAG04,L'MESSAG04\n         APUT  MESSAGED,L'MESSAGED\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLJUST    DS    0H                    Left-justify the display number.\n         STM   R4,R6,SAVER4T6        Save work registers.\n         LA    R4,RJUSTWRK           Point to right-justified number.\n         LA    R5,LJUSTWRK           Point to left-justification area.\n         LA    R6,10                 10 characters only.\nLJUSTLUP DS    0H                    loop.....\n         CLI   0(R4),X'F0'           Is this character smaller than 0?\n         BL    LJUSTBMP              No good. Bump past it.\n         CLI   0(R4),X'F9'           Is this character larger than 9?\n         BH    LJUSTBMP              No good. Bump past it.\n         MVC   0(1,R5),0(R4)         Significant. Move it to left-just.\n         LA    R5,1(,R5)             Bump left-just character.\nLJUSTBMP DS    0H\n         LA    R4,1(,R4)             Bump right-just char in any case.\nLJUSTCYC BCT   R6,LJUSTLUP           Loop up to BCT times. (10).\nLJUSTEND DS    0H                    end of loop.....\n         LM    R4,R6,SAVER4T6        Restore work registers.\n         BR    R9                    Return to caller.\nRJUSTWRK DC    CL10' '               Right-justified display number.\nLJUSTWRK DC    CL10' '               Left-justified display number.\nSAVER4T6 DS    3F                    Save area for work registers.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                '   BLANKS\nMESSAGED DC    C'--------------------------------------'\nMESSAGET DC    C'BDMNNOTC - VER. 1.2 - &SYSDATE - &SYSTIME   '\nMESSAGEU DC    C' Change the Default Number of Notices in a  '\nMESSAGEV DC    C' SYS1.BRODCAST Dataset that is reformatted  '\nMESSAGEW DC    C' via IBM''s ACCOUNT/SYNC commands.          '\nMESSAGEX DC    C' This setting is a fullword at CVT+X''5A8''   '\nMESSAGEY DC    C' This setting lasts until the next IPL.     '\nMESSAG01 DC    C' IBM recommends that this number be less    '\nMESSAG02 DC    C' than 1000. We assume that you know what    '\nMESSAG03 DC    C' you are doing. Otherwise, keep it less     '\nMESSAG04 DC    C' than 1000 to be on the safe side.          '\nMESSAG10 DC    C'You need a numeric parameter after the command.'\nMESSAG11 DC    C'This program was not invoked as a TSO command.'\nMESSAG2B DC    C'Parameter '\nMESSPARM DC    C'          '\nMESSAG2E DC    C'had non-numeric characters.  '\nMESSAG2L EQU   *-MESSAG2B\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMASK10   DC    XL10'40202020202020202120'\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D                  Save Area\nCVDWORK  DS    D                   Work area for CVD instruction\nSAVE1401 DC    5F'0'               TESTAUTH save area for registers\nNEWNMBIN DS    F                   New number to put in CVTBCLMT\nDECOLDNM DS    PL8                 Packed version\nNUMFLAG  DC    X'00'               Flag, X'01' if not numeric\nNUMCOUTL DC    X'00'               Store Length of parameter here\nNEWNUMB  DC    C'          '       Store Parm number here\n         DS    0F                  Align on fullword\nLINEB    DS    C                   LINE-1 (primed with blank)\nLINE     DS    CL137               Print line for most purposes\n         SPACE\nDATALEN  EQU   *-DATAAREA          Length of Data Area\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BDMPUTL": {"ttr": 11780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x01\\x055\\x0f\\x01\\x055\\x0f\\x11\\x05\\x00\\xc8\\x00\\xc8\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-12-16T00:00:00", "modifydate": "2005-12-16T11:05:20", "lines": 200, "newlines": 200, "modlines": 0, "user": "SBGOLOB"}, "text": "BDMPUTL  TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nBDMPUTL  CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . BDMPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nBDMPUTL  CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nBDMPUTL  AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING BDMPUTL,R12        ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   BDMPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BDMSCAN": {"ttr": 11784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01)\\x00\\x00\\x01\\x086?\\x01\\x16'\\x1f\\x14@\\x01\\x07\\x01\\x07\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@\"", "ispf": {"version": "01.41", "flags": 0, "createdate": "2008-12-28T00:00:00", "modifydate": "2016-09-27T14:40:00", "lines": 263, "newlines": 263, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "BDMSCAN$": {"ttr": 11789, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1a\\x00Q\\x00\\x99\\x11\\x8f\\x01\\x16'\\x1f\\x16(\\x00!\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.26", "flags": 0, "createdate": "1999-04-28T00:00:00", "modifydate": "2016-09-27T16:28:51", "lines": 33, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//*                                                               *//\n//*   THIS PROGRAM DOES NOT WRITE TO THE BROADCAST DATASET.       *//\n//*   It analyzes the contents and usability of the Broadcast     *//\n//*     Dataset.                                                  *//\n//*                                                               *//\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//*   This is JCL to create a loadlib for the commercial BDMSCAN  *//\n//*   program, and to run it against your SYS1.BRODCAST dataset.  *//\n//*   The author of the \"BRODCAST MASTER\" commercial product,     *//\n//*   Sam Golob Systems Programming LLC, gives permission to      *//\n//*   distribute this load module on the CBT Tape, and gives      *//\n//*   permission for anybody to run it, at any site.              *//\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//*   Run this program solely at your own risk.                   *//\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n  RECEIVE INDS('SBGOLOB.CBT493.FILE247(BDMSCAN)')\n  DSN('SBGOLOB.BDMSCAN.TESTLIB') VOLUME(WORK02) UNIT(SYSALLDA)\n//*\n//BRODCAST EXEC PGM=BDMSCAN,REGION=3M,PARM='ALL'   Parm is optional\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.BDMSCAN.TESTLIB  ==> Previous step\n//BRODMAP  DD  SYSOUT=* DCB=BLKSIZE=133\n//BRODPRNT DD  SYSOUT=*                      ===>  Optional\n//BRODUSER DD  SYSOUT=*                      ===>  Optional\n//BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR\n//*RODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR,UNIT=SYSALLDA,\n//*        VOL=SER=Z6SYS1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BDMUSAD$": {"ttr": 12033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00A\\x01\\x18\\x17\\x1f\\x01 \\x06O\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-06-20T00:00:00", "modifydate": "2020-03-04T13:10:41", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT499.FILE247(BDMUSADD)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   BDMUSADD\n ENTRY   BDMUSADD\n NAME    BDMUSADD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BDMUSADD": {"ttr": 12035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x12\\x01\\x01\\x05O\\x01 \\x06O\\x13\\x07\\x04\\x9c\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2020-03-04T13:07:12", "lines": 1180, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BDMUSADD TITLE 'BDMUSADD - ADD A USERID AND ITS MESSAGES.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*                                                                     *\n*       Copyright (C) 1995-2009 Sam Golob Systems Programming LLC     *\n*                 All Rights Reserved                                 *\n*                 (USE BY CBT TAPE USERS IS ALLOWED.)                 *\n*                                                                     *\n*         SYNTAX:   BDMUSADD USERID                                   *\n*                                                                     *\n*       FUNCTION:   ADD A USERID TO THE BROADCAST DATASET.            *\n*                                                                     *\n*                   IF THE ID ALREADY EXISTS, THEN PUT OUT AN ERROR   *\n*                   MESSAGE ACCORDINGLY.  IF A NEW USERID RECORD      *\n*                   NEEDS TO BE CREATED TO MAKE ROOM FOR THE NEW      *\n*                   USERID, THEN CREATE IT.  ALSO, REUSE AN EMPTY     *\n*                   USERID SLOT, IF IT IS FOUND.                      *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.3.0          *\n*                                                                     *\n*            DATE:  NOV. 26, 2006                                     *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*       BATCH EXECUTION:                                              *\n*                                                                     *\n*       //XXXXXXXX JOB ,'BDMUSADD',CLASS=B,                           *\n*       //    MSGCLASS=X,NOTIFY=&SYSUID                               *\n*       //*                                                           *\n*       //*      INSTRUCTIONS FOR BDMUSADD TSO COMMAND                *\n*       //*      ------------ --- -------- --- -------                *\n*       //*   BDMUSADD USERID  -  ADDS THE USERID TO BRODCAST.        *\n*       //*                                                           *\n*       //TSOBATCH EXEC PGM=IKJEFT01                                  *\n*       //STEPLIB  DD DISP=SHR,DSN=yourid.BRODMSTR.LOADLIB            *\n*       //SYSTSPRT DD SYSOUT=*                                        *\n*       //BRODCAST DD DISP=SHR,DSN=name.of.brodcast.dataset           *\n*       //SYSTSIN DD *                                                *\n*       BDMUSADD USERID                                               *\n*       /*                                                            *\n*                                                                     *\n*       NOTE:       BDMUSADD READS THE BRODCAST DATASET DIRECTLY,     *\n*                   AND GOES THROUGH ALL THE USERID RECORDS TO SEE    *\n*                   IF IT FINDS A MATCH ON THE DESIRED USERID.        *\n*                   DURING THIS FIRST PASS, THE FIRST EMPTY USERID    *\n*                   SLOT IS ALSO NOTED, TO BE REUSED.  IF THE USERID  *\n*                   ALREADY EXISTS, THEN A NEW ONE IS NOT CREATED.    *\n*                   IF IT DOES NOT EXIST, THEN THE FIRST FREE SLOT    *\n*                   IS REUSED.  OTHERWISE, A NEW USERID RECORD IS     *\n*                   CREATED, AND THE NEW USERID IS PUT THERE, INTO    *\n*                   SLOT X'00'.                                       *\n*                                                                     *\n*       CHANGES:  06/11/27 - Converted BDMUSADD from BDMUSDEL.        *\n*                   No message deletes are required, because the new  *\n*                   userid added, does not have any messages attached *\n*                   to it yet.                                        *\n*                                                                     *\n*                   Correctly added a new Userid Record, Type X'01',  *\n*                   if all slots are full.  Put the new userid into   *\n*                   slot 0 of the new record.  Adjust Free Search     *\n*                   RBA accordingly.                                  *\n*                                                                     *\n*                 06/11/28 - Added ENQ and DEQ on all WRITEs.         *\n*                                                                     *\n*                 18/06/20 - SG18171 - ADDED BLANK FIELD THAT WAS     *\n*                   NOT GOING TO GET OVERLAID, AND ASSURE THAT ADDED  *\n*                   USERID NAME IS NOT CORRUPTED.                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGISTER EQUATES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\n         GBLC  &VERSNUM,&PKGNAME,&PKGTITL,&VERTITL,&COPYRGT,&COPYRSV\n         LCLC  &PGMNAME\n&VERSNUM SETC  ' 1.4.0A'\n&PKGNAME SETC  'BRODMSTR'\n&PKGTITL SETC  'Broadcast Master'\n&VERTITL SETC  ' Version '\n&COPYRGT SETC  'Copyright (c) 1995-2009 Sam Golob Systems Programming'\n&COPYRSV SETC  'LLC - All Rights Reserved  '\n&PGMNAME SETC  'BDMUSADD'\nBDMUSADD CSECT\n         USING BDMUSADD,R12,R10\n         B     BEGINN-*(,R15)\n         DC    CL8'&PGMNAME'\n         DC    C' '\n         DC    C'&PKGTITL'\n         DC    C'&VERTITL'\n         DC    C'&VERSNUM'\n         DC    C' '\n         DC    C'&COPYRGT'\n         DC    C' '\n         DC    C'&COPYRSV'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL6'HLASM '\n         DC    C'&SYSVER'\n         DC    C' '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R5,R1               PRESERVE CPPL POINTER OVER GETMAIN.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         ST    R5,CPPLPNTR         PUT CPPL POINTER INTO A SAFE PLACE\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         L     R2,PSCBPNTR         LOAD IT FROM ITS STORAGE LOCATION\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nTITLEOUT DS    0H\n         MVC   LINE,LINE-1                  WRITE TITLE MESSAGES.\n         MVC   LINE(MSGTLEN),MESSAGET\n         LA    R0,MSGTLEN\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(MSGCLEN),MESSAGEC\n         LA    R0,MSGCLEN\n         BAL   R4,MSG\n         MVC   LINE,LINE-1\n         LA    R0,20\n         BAL   R4,MSG\nCONT0    DS    0H\n         L     R5,CPPLPNTR         LOAD CPPL\n         LTR   R5,R5               ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R5)           PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         XR    R5,R5               CLEAR R5 AS WORK REGISTER NOW\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS3            ZERO, MESSAGE TO ENTER USERID.\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n* ------------------------------------------------------------------ *\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ THROUGH THE USERID RECORDS.           --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    GOADDIT             NO USERID LIKE THIS. CAN ADD IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    FRSTZERO            NOPE. SEE IF FIRST ZERO & SAVE IT.\nNOTALL1  CLC   USERID(7),TRYID     IS THIS USERID ALREADY THERE?\n         BE    FOUNDEQU            YES. PUT OUT MESSAGE ACCORDINGLY.\nTRYNEXT  LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n         ST    R6,SAVER6           SAVE BCT COUNT JUST IN CASE\n         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY\n         B     FREEDBA1\nFRSTZERO DS    0H\n         TM    FLAGFRST,X'01'      HAVE WE DONE THIS ALREADY?\n         BO    FRSPCEED            YES, SKIP SAVE OF RBA AND SLOT.\n         MVC   FZUSRBA(3),LASTRBA  SAVE RBA OF FIRST ZERO RECORD\n         STC   R8,FZUSSLOT         SAVE SLOT OF FIRST ZERO RECORD\n         OI    FLAGFRST,X'01'      SET FLAG TO DO ONLY ONCE\nFRSPCEED BCT   R6,TRYNEXT          GO FARTHER INTO USER RECORD\n         B     FREEDBA1            FREEDBUF ON THIS RECORD\nFOUNDEQU DS    0H                  USERID WAS ALREADY THERE?\n         MVC   FNUSRBA(3),LASTRBA  THEN STORE AWAY ITS LOCATION RBA\n         STC   R8,FNUSSLOT           AND ITS SLOT.\n         B     WMESS2              TELL THEM THAT WE CAN'T ADD IT.\nFREEDBA1 DS    0H\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         DROP  R3\n*\nGOADDIT  DS    0H                  REUSE SLOT IF AVAILABLE\n         CLC   FZUSRBA(3),ZEROS    NO EMPTY SLOT FOUND?\n         BE    GOADDUSR\n* below >  Enqueue and add the new userid into the found open slot.\n         MVC   BLOCKNO(3),FZUSRBA  GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),FZUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT TO ADD THE USERID\n         USING USDIR,R3\n         MVI   MOREBLNK,X'40'      BLANK FIELD FOR SURE         SG18171\n         MVC   MOREBLNK+1(L'MOREBLNK-1),MOREBLNK                SG18171\n         MVC   USDID(7),MOREBLNK   INITIALIZE ID SLOT FOR SURE  SG18171\n         MVC   USDID(7),TRYID      ADD THE ID\n         MVC   USDRBA(6),ZEROS     ZERO THE MESSAGE ENTRIES\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         MVC   RNAM(3),FZUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         B     GOADDMSG\n* above >  Enqueue and add the new userid into the found open slot.\nGOADDUSR DS    0H                  ADD THE NEW USERID RECORD FIRST\n         BAL   R9,ADNEWREC         THEN HAVE TO ADD A NEW USERID TO IT.\n         MVC   FZUSRBA(3),FREERBA\n         MVI   FZUSSLOT,X'00'\nGOADDMSG DS    0H                             TELL EM YOU ADDED THE ID\n         MVC   LINE,LINE-1                    CLEAR OUTPUT LINE\n         MVC   MESAGADX+7(7),TRYID            MOVE IN USERID\n         HEX   MESAGADX+35,3,FZUSRBA          SHOW THE RBA\n         HEX   MESAGADX+48,1,FZUSSLOT         SHOW THE SLOT NUMBER\n         MVC   LINET(L'MESAGADX),MESAGADX     MOVE MESSAGE TO LINE\n         LA    R0,L'MESAGADX+7                LOAD LENGTH\n         BAL   R4,MSG                         WRITE IT OUT\n         B     ZEROUT                  AND SCRAM\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R4,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  DS    0H\nNOTALL2  MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R4,MSG\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nFULLMESS MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSFULL                 SYS1.BRODCAST\n         LA    R0,L'MESSFULL+7                  IS\n         BAL   R4,MSG                             FULL\n         B     EOJ4                             AND GET OUT.   SG 05/99\nWMESS4   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE4                 YOU HAVE TO ENTER A\n         LA    R0,L'MESSAGE4+7                  USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS3   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE3                 YOU HAVE TO ENTER A\n         LA    R0,L'MESSAGE3+7                  USERID NAME.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS2   DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   MESSAGX2+12(7),NEWID\n         MVC   LINET,MESSAGX2                 THE USERID ALREADY\n         LA    R0,L'MESSAGE2+7                  EXISTS IN BROADCAST.\n         BAL   R4,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R4,MSG\n         B     EOJ4\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LR    R15,R5              REAL RETURN CODE\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     DS    0H\n         LA    R5,0                SET CC = 0.\n         B     EOJ                 CONT.\nEOJ4     DS    0H\n         LA    R5,4                SET CC = 4.\n         B     EOJ                 CONT.\nEOJ8     DS    0H\n         LA    R5,8                SET CC = 8.\n         B     EOJ                 CONT.\nEOJ12    DS    0H\n         LA    R5,12               SET CC = 12.\n         B     EOJ                 CONT.\nEOJ16    DS    0H\n         LA    R5,16               SET CC = 16.\n         B     EOJ                 CONT.\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nGETIDS   DS    0H\n         ST    R9,SAVER9A\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADREAD DS    0H\n         ST    R9,SAVER9B\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   NUMRECS(4),R1RECNUM   SAVE TOTAL NUMBER OF RECORDS\n         ST    R7,SAVER7           SAVE REGISTER\n         L     R7,NUMRECS          PUT NUMBER OF RECORDS IN\n         BCTR  R7,0                MINUS ONE\n         ST    R7,HIWATER          HIGHEST RBA PERMITTED\n         L     R7,SAVER7           RESTORE REGISTER\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nINITCON  MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS\n         MVC   FSRCRBA(3),ZEROS\n         MVC   NEXTRBA(3),ZEROS\n         MVC   NEWFRBA(3),ZEROS\n         MVC   MESDELUS(L'MESDELUS),MESUSRID\n         MVC   MESUSRDX(L'MESUSRDX),MESUSRDL\n         MVC   MESSAGX2(L'MESSAGX2),MESSAGE2\n         MVC   MESAGADX(L'MESAGADX),MESAGADS\n         MVI   FLAGFRST,X'00'\n         MVC   FZUSRBA(3),ZEROS\n         MVI   FZUSSLOT,X'00'\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  DS    0H\n         ST    R9,SAVER9C\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         ST    R2,PSCBPNTR         STORE PSCB ADDRESS IN SAFE LOCATION\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R5\nCPPLPTRS DS    0H\n         ST    R9,SAVER9D\n         L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R5,SAVECPPL            AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         L     R9,SAVER9D\n         BR    R9\n         DROP  R5\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         ST    R9,SAVER9E\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,FZUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n         L     R6,SAVER6           RESTORE R6 TO COUNT FOR BCT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nADNEWREC DS    0H                  ADD A NEW USERID RECORD IF POSSIBLE\n         ST    R9,SAVER9F\n         BAL   R9,FINDFREE    FIND FREE X'FF' RECORD IF IT EXISTS\n         BAL   R9,MAKNWUSR    CONVERT X'FF' RECORD TO X'01' & RECHAIN.\n         BAL   R9,REWRFRSR    REWRITE FREE SEARCH RECORD ACCORDINGLY.\n         L     R9,SAVER9F\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         ST    R9,SAVER9G\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         L     R9,SAVER9G\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.\n         ST    R9,SAVER9H\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\n         ST    R4,SAVER4           SAVE WORK REGISTER\n         ICM   R4,7,FREERBA        FREERBA IS THE ONE WE ARE CHANGING\n         LA    R4,1(,R4)           ADD ONE TO IT\n         STCM  R4,7,NEWFRBA        NEW VALUE OF FREE SEARCH RBA\n         C     R4,HIWATER          HIGHER THAN HIGHEST POSSIBLE?\n         BNH   NOADJFSR            NO. JUST USE THIS VALUE.\n         MVC   NEWFRBA,FREERBA     YES. USE FREERBA VALUE AS IS.\nNOADJFSR DS    0H\n         L     R4,SAVER4           RESTORE WORK REGISTER\n         MVC   0(3,R5),NEWFRBA     CHANGE FREE SEARCH RBA TO NEW VALUE\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND L     R9,SAVER9H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    FIND A FREE MESSAGE RECORD TO REPLACE WITH A USERID RECORD.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        Result of this code is to either tell the user that      *\n*        there is no free record to make into a USERID record,    *\n*        or that the free record RBA is stored in FREERBA.        *\n*                                                                 *\n*            NFRERBA is normally FREERBA+1, to insert into        *\n*            the free search record.                              *\n*                                                                 *\n*        Error condition:  FREERBA = NFRERBA = HIWATER.           *\n*            In this case, the FULLMESS message is issued.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFINDFREE DS    0H\n         ST    R9,SAVER9J          SAVE BAL REGISTER FOR RETURN\n         MVC   BLOCKNO(3),TYP5RBA\n         CLC   TYP5RBA,ZEROS\n         BNE   SAVRGS01\n         MVC   BLOCKNO(3),=X'000001'\n         MVI   FULLFLAG,X'FF'\nSAVRGS01 ST    R8,SAVER8\n         ST    R7,SAVER7\n         ST    R6,SAVER6\n         L     R8,HIWATER          USE HIWATER AS FINISH AMT\n         L     R7,NUMRECS          LOAD TOTAL NUMBER OF RECS\n         ICM   R6,7,BLOCKNO        LOAD STARTING POINT\n         SR    R7,R6               SET UP BCT FOR LOOP\nSTARTFSH DS    0H\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'FF'         BLANK USER MESSAGE RECORD?\n         BE    FOUNDNEW            YES? FOUND ONE.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         ICM   R6,7,BLOCKNO        LOAD AMOUNT INTO REGISTER\n         LA    R6,1(,R6)           ADD 1\n         CR    R6,R8               HIGHER THAN STOPPING POINT?\n         BH    FINDBEG             YES, START AT BEGINNING\n         STCM  R6,7,BLOCKNO        POINT TO NEXT BLOCK NUMBER\n         BCT   R7,STARTFSH         LOOP AND READ AGAIN\nFOUNDNEW DS    0H\n         MVC   FREERBA(3),BLOCKNO  SAVE RBA OF FREE RECORD\n         ICM   R7,7,FREERBA        LOAD RBA VALUE\n         LA    R7,1(,R7)           INCREASE BY 1\n         STCM  R7,7,NFRERBA        PREPARE NEW FREE SEARCH RBA\n         C     R7,HIWATER          HIGHER THAN THE HIGHEST?\n         BNH   FINDFOUT            NO. JUST GET OUT OK\n         MVC   NFRERBA(3),FREERBA  WE CAN'T GO HIGHER, SO =\nFINDFOUT DS    0H\n         B     FINDFEND            GET OUT OF ROUTINE\nFINDBEG  DS    0H\n         CLI   FULLFLAG,X'FF'      CHECK IF WE WENT FROM BEGIN\n         BNE   FINDGOON            YES. WE KNOW BCAST IS FULL\n         L     R6,SAVER6           RESTORE REGISTER\n         L     R7,SAVER7           RESTORE REGISTER\n         L     R8,SAVER8           RESTORE REGISTER\n         B     FULLMESS            BROADCAST FULL, AND OUT\nFINDGOON MVI   FULLFLAG,X'FF'      WE'RE NOW SEARCHING BEGINNING\n         ICM   R8,7,TYP5RBA        FINISH AT FREE SEARCH REC\n         LA    R7,1(,R8)           SET UP BCT REGISTER\n         LA    R6,1                START SEARCH AT RECORD 2\n         STCM  R6,7,BLOCKNO        LET READ KNOW ABOUT IT\n         SR    R7,R6               SET UP BCT FOR LOOP\n         B     STARTFSH            DO LOOP OVER AGAIN-1ST PART\nFINDFEND L     R6,SAVER6           RESTORE REGISTER\n         L     R7,SAVER7           RESTORE REGISTER\n         L     R8,SAVER8           RESTORE REGISTER\n         L     R9,SAVER9J          RESTORE BAL REGISTER FOR RETURN\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  MAKE A NEW USERID RECORD AND RECHAIN THE LAST ONE TO THIS ONE  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMAKNWUSR DS    0H\n         ST    R9,SAVER9K\n         MVC   RNAM(3),FREERBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   BLOCKNO(3),FREERBA  GO TO FOUND FREE RBA\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'FF'         BLANK USER MESSAGE RECORD?\n         BNE   MAKNWERR            NO. ERROR.\n         MVI   0(R2),X'01'         CONVERT IT TO A BLANK USERID RECORD\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   USDIR(129),ZERREC   CREATE THE NEW USERID RECORD\n         MVI   USDREND,X'7F'       STICK THE X'7F' IN\n         MVC   USDID(7),TRYID      ALREADY THERE, PUT USERID IN SLOT 0.\n         MVC   USDRBA(6),ZEROS     ZERO THE MESSAGE ENTRIES\n         DROP  R3\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   RNAM(3),FREERBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\nMAKRECHN DS    0H                  RECHAIN LAST UID RECORD TO THIS ONE\n         MVC   RNAM(3),LASTRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   BLOCKNO(3),LASTRBA  MOVE RRA OF LAST USERID RECORD\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   USDNEXT(3),FREERBA  RECHAIN LAST UID RECORD TO NEW ONE\n         DROP  R3\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   RNAM(3),LASTRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         B     MAKNWEND\nMAKNWERR DS    0H\n         B     WMESS4            FREERBA IS NOT POINTING TO FREE RECORD\nMAKNWEND DS    0H\n         L     R9,SAVER9K\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R5\nSETIOPL  DS    0H\n         ST    R9,SAVER9I\n         L     R5,CPPLPNTR\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R5\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         L     R9,SAVER9I\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\nMESARROW DC    C'-->'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLNKLINE DS    0CL133\nBLANKS   DC    C'        '         8 BLANKS\n         DC    CL125' '\nMOREBLNK DC    CL20' '                                          SG18171\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL129\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    122X'00'\nMESSAGET DC    C'&PGMNAME PROGRAM  -  &PKGTITL &VERTITL &VERSNUM '\nMSGTLEN  EQU   *-MESSAGET\nMESSAGEC DC    C'&COPYRGT &COPYRSV'\nMSGCLEN  EQU   *-MESSAGEC\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESUSRID DC    C'USERID         HAS BEEN DELETED FROM THE BROADCAST DAT-\n               ASET.'\nMESUSRDL DC    C'MESSAGES DELETED FOR THE FORMER USERID        .'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMESSAGE2 DC    C'THIS USERID         ALREADY EXISTS IN BROADCAST'\nMESSAGE3 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMESSAGE4 DC    C'FREE RECORD RBA IS NOT POINTING TO A FREE RECORD.'\nMESAGADS DC    C'USERID         WAS ADDED IN RECORD         SLOT      '\nMESSFULL DC    C'SYS1.BRODCAST is Full. No room to add a USERID Record.-\n               . Delete some user messages.'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL10'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nCPPLPNTR DS    F                   ADDRESS OF CPPL\nPSCBPNTR DS    F                   ADDRESS OF PSCB\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nFREERBA  DC    X'000000'           NEXT FREE RBA TO WRITE ONTO\nNFRERBA  DC    X'000000'           NEW FREE RBA FOR TYPE 5\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nNEWFRBA  DC    X'000000'           NEW FREE SEARCH RBA\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFZUSRBA  DC    X'000000'           STORE RBA OF FIRST ZERO USERID\nFZUSSLOT DC    X'00'               STORE SLOT OF FIRST ZERO USERID\nFNUSRBA  DC    X'000000'           RBA OF USERID THAT WAS FOUND\nFNUSSLOT DC    X'00'               SLOT OF USERID THAT WAS FOUND\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER4   DS    F                   SAVE WORK REGISTER\nSAVER5   DS    F                   SAVE WORK REGISTER\nSAVER6   DS    F                   SAVE WORK REGISTER\nSAVER7   DS    F                   SAVE WORK REGISTER\nSAVER8   DS    F                   SAVE WORK REGISTER\nSAVER9   DS    F                   SAVE BAL REGISTER\nSAVER9A  DS    F                   SAVE BAL REGISTER\nSAVER9B  DS    F                   SAVE BAL REGISTER\nSAVER9C  DS    F                   SAVE BAL REGISTER\nSAVER9D  DS    F                   SAVE BAL REGISTER\nSAVER9E  DS    F                   SAVE BAL REGISTER\nSAVER9F  DS    F                   SAVE BAL REGISTER\nSAVER9G  DS    F                   SAVE BAL REGISTER\nSAVER9H  DS    F                   SAVE BAL REGISTER\nSAVER9I  DS    F                   SAVE BAL REGISTER\nSAVER9J  DS    F                   SAVE BAL REGISTER\nSAVER9K  DS    F                   SAVE BAL REGISTER\nSAVER9L  DS    F                   SAVE BAL REGISTER\nSAVER9M  DS    F                   SAVE BAL REGISTER\nHIWATER  DS    F                   HIGH RBA OF RECORDS IN BRODCAST\nNUMRECS  DS    F                   NUMBER OF RECORDS IN BRODCAST\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\n         DS    CL8\nFLAGFRST DS    X\n*        EQU   X'01'               FIRST ZEROED SLOT HAS BEEN FOUND\nFULLFLAG DS    X\n         DS    CL8\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nMESDELUS DC    C'USERID         HAS BEEN DELETED FROM THE BROADCAST DAT-\n               ASET.'\nMESUSRDX DC    C'MESSAGES DELETED FOR THE FORMER USERID        .'\nMESSAGX2 DC    C'THIS USERID         ALREADY EXISTS IN BROADCAST'\nMESAGADX DC    C'USERID         WAS ADDED IN RECORD         SLOT      '\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BDMUSDE$": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x02\\x01\\x054\\x7f\\x01 \\x06O\\x13\\x14\\x003\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2005-12-13T00:00:00", "modifydate": "2020-03-04T13:14:02", "lines": 51, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.EESCB.MODGEN   (FILE 731)\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT499.FILE247(BDMPUTL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n ENTRY   BDMPUTL\n NAME    BDMPUTL(R)\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.EESCB.MODGEN   (FILE 731)\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT499.FILE247(BDMUSDEL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n INCLUDE SYSLIB(BDMPUTL)\n SETCODE AC(0)\n ENTRY   BDMUSDEL\n NAME    BDMUSDEL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BDMUSDEL": {"ttr": 12547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x000\\x01\\x01\\x05O\\x01 \\x06O\\x13\\x07\\x04m\\x02-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2020-03-04T13:07:30", "lines": 1133, "newlines": 557, "modlines": 0, "user": "SBGOLOB"}, "text": "BDMUSDEL TITLE 'BDMUSDEL - DELETE A USERID AND ITS MESSAGES.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *\n*                   COMMAND.   NEED NOT BE AUTHORIZED.                *\n*                                                                     *\n*                                                                     *\n*       Copyright (C) 1995-2009 Sam Golob Systems Programming LLC     *\n*                 All Rights Reserved                                 *\n*                 (USE BY CBT TAPE USERS IS ALLOWED.)                 *\n*                                                                     *\n*         SYNTAX:   BDMUSDEL USERID                                   *\n*                                                                     *\n*       FUNCTION:   DELETE A USERID FROM BRODCAST, AND DELETE ALL OF  *\n*                   ITS MESSAGES. THIS PROGRAM WORKS ON SYS1.BRODCAST *\n*                   INTERNALLY, WITHOUT USING LISTBC.                 *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB               VERSION:   1.3.0          *\n*                                                                     *\n*            DATE:  NOV. 26, 2006                                     *\n*                                                                     *\n*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *\n*                                                                     *\n*       BATCH EXECUTION:                                              *\n*                                                                     *\n*       //XXXXXXXX JOB ,'BDMUSDEL',CLASS=B,                           *\n*       //    MSGCLASS=X,NOTIFY=&SYSUID                               *\n*       //*                                                           *\n*       //*      INSTRUCTIONS FOR BDMUSDEL TSO COMMAND                *\n*       //*      ------------ --- -------- --- -------                *\n*       //*   BDMUSDEL USERID  -  DELETES THE USERID FROM BRODCAST.   *\n*       //*                                                           *\n*       //TSOBATCH EXEC PGM=IKJEFT01                                  *\n*       //STEPLIB  DD DISP=SHR,DSN=yourid.BRODMSTR.LOADLIB            *\n*       //SYSTSPRT DD SYSOUT=*                                        *\n*       //BRODCAST DD DISP=SHR,DSN=name.of.brodcast.dataset           *\n*       //SYSTSIN DD *                                                *\n*       BDMUSDEL USERID                                               *\n*       /*                                                            *\n*                                                                     *\n*       NOTE:       BDMUSDEL READS THE BRODCAST DATASET DIRECTLY,     *\n*                   AND GOES THROUGH ALL THE USERID RECORDS UNTIL     *\n*                   IT FINDS A MATCH ON THE DESIRED USERID.  THEN,    *\n*                   IF THAT USERID HAS MESSAGES ATTACHED TO IT,       *\n*                   ALL OF THE MESSAGES ARE DELETED, AND THEN THE     *\n*                   USERID RECORD IS DELETED TOO.                     *\n*                                                                     *\n*       CHANGES:  06/11/26 - Rewrote old version of BCMDEL2 before    *\n*                   SKIP and MSGS keywords were put into it.  That    *\n*                   version invariably deleted all messages for a     *\n*                   given userid correctly, and this is what we have  *\n*                   to do here.  Of course, ALLFLAG was eliminated.   *\n*                   Then, of course, we completely delete the USERID  *\n*                   as well as its message pointers.                  *\n*                                                                     *\n*                   Messages added to show what messages had been     *\n*                   there for the deleted USERID, if any.  And then   *\n*                   a message was written, showing the USERID which   *\n*                   was deleted from the BROADCAST DATASET.           *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\n         GBLC  &VERSNUM,&PKGNAME,&PKGTITL,&VERTITL,&COPYRGT,&COPYRSV\n         LCLC  &PGMNAME\n&VERSNUM SETC  ' 1.4.0A'\n&PKGNAME SETC  'BRODMSTR'\n&PKGTITL SETC  'Broadcast Master'\n&VERTITL SETC  ' Version '\n&COPYRGT SETC  'Copyright (c) 1995-2009 Sam Golob Systems Programming'\n&COPYRSV SETC  'LLC - All Rights Reserved  '\n&PGMNAME SETC  'BDMUSDEL'\nBDMUSDEL CSECT\n         USING BDMUSDEL,R12,R10\n         B     BEGINN-*(,R15)\nAFLG     DC    X'FF'\nALLCHAR  DC    C'ALL$#@'\n         DC    C'  '\n         DC    CL8'&PGMNAME'\n         DC    C' '\n         DC    C'&PKGTITL'\n         DC    C'&VERTITL'\n         DC    C'&VERSNUM'\n         DC    C' '\n         DC    C'&COPYRGT'\n         DC    C' '\n         DC    C'&COPYRSV'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL6'HLASM '\n         DC    C'&SYSVER'\n         DC    C' '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R10,4095(,R12)      LOAD SECOND BASE\n         LA    R10,1(,R10)\n         LR    R5,R1               PRESERVE CPPL POINTER OVER GETMAIN.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         ST    R5,CPPLPNTR         PUT CPPL POINTER INTO A SAFE PLACE\n         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA\n         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)\n         SPACE 1\n         L     R2,PSCBPNTR         LOAD IT FROM ITS STORAGE LOCATION\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL\n         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE\n*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?\nTITLEOUT DS    0H\n         MVC   LINE,LINE-1                  WRITE TITLE MESSAGES.\n         MVC   LINE(MSGTLEN),MESSAGET\n         LA    R0,MSGTLEN\n         BAL   R9,MSG\n         MVC   LINE,LINE-1\n         MVC   LINE(MSGCLEN),MESSAGEC\n         LA    R0,MSGCLEN\n         BAL   R9,MSG\n         MVC   LINE,LINE-1\n         LA    R0,20\n         BAL   R9,MSG\nCONT0    DS    0H\n         L     R5,CPPLPNTR         LOAD CPPL\n         LTR   R5,R5               ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R5)           PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         XR    R5,R5               CLEAR R5 AS WORK REGISTER NOW\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    8,WMESS2            ZERO, MESSAGE TO ENTER USERID.\n         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.\n         BAL   R9,GETIDS           MAKE SURE YOU PULL THE NEWID OUT\n*                                  OF THE KEYWORD (AND ITS LENGTH)\n*                                  AND ALSO SAVE THE CURRENT ID&LENGTH\nALLSET   CLC   NEWID(L'ALLCHAR),ALLCHAR    \"USERID\" FOR \"ALL USERIDS\"\n         BNE   ONEID                       NOT EQUAL, ONLY ONE USERID\n         MVC   ALLFLAG(1),AFLG     MOVE INITIAL FLAG SETTING\n         CLI   ALLFLAG,X'FF'       IS IT X'FF'?\n         BNE   ONEID               NO. NOT REAL \"ALL\" PROCESSING\n         MVC   TRYID(8),BLANKS     YES. INITIAL ID IS 7 BLANKS.\n         B     DOBROD\nONEID    MVC   TRYID(8),NEWID      RUN USERID SCAN AGAINST NEW ID\nDOBROD   OPEN  (BRODCAST,(UPDAT))\n         TM    BRODCAST+48,X'10'\n         BNO   WMESS1\n* ------------------------------------------------------------------ *\n         BAL   R9,HEADREAD         READ HEADER RECORD AND EXTRACT\n*                                  RBA OF FIRST USER RECORD TO SEARCH\n*                                  FOR THE USERID SLOT FOR OUR USERID.\n*                                  THIS VALUE IS STORED IN SAVERBA(3).\n* ------------------------------------------------------------------ *\n* ---    MAIN LOOP TO READ EACH USERID'S MESSAGES.               --- *\n* ------------------------------------------------------------------ *\nINDEXUS  DS    0H                  READ THROUGH USERID RECORDS\n         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF USERID RECORDS\n         BE    ENDUSER             NO USERID LIKE THIS. DEAL WITH IT.\n         LA    R6,9                COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING USDIR,R3\n         MVC   LASTRBA(3),SAVERBA  SAVE CURRENT RBA\n         MVC   SAVERBA(3),USDNEXT  GET NEXT RECORD'S RBA\n         LA    R8,0                INITIALIZE USERID SLOT COUNTER\nUSRLOOP  DS    0H\n         MVC   USERID(8),BLANKS    ENSURE BLANK IN 8TH PLACE\n         MVC   USERIDI(7),USDID    COPY WHO THIS IS\n         CLC   USERIDI(7),ZEROS    IS THIS A REAL USER?\n         BE    TRYNEXT             NOPE. JUST GO TO NEXT ENTRY\n         CLI   ALLFLAG,X'FF'       ARE WE DOING ALL NONEMPTIES?\n         BNE   NOTALL1             NO, JUST DO THIS ONE (EVEN IF EMPTY)\n         MVC   TRYID(7),USERIDI    COUNT THIS ID TO BE PROCESSED\nNOTALL1  CLC   USERID(7),TRYID     IS THIS THE USERID WE WANT?\n         BE    SAVPTRS             YEP. GO DEAL WITH IT\nTRYNEXT  DS    0H\n         LA    R3,13(,R3)          BUMP LOCATION TO NEXT USERID\n         LA    R8,1(,R8)           BUMP COUNTER WITHIN RECORD\n* -- >\n         XC    SAVER6B,SAVER6B\n         ST    R6,SAVER6B\n         CLC   SAVER6B,=F'1'\n         BE    TRYNEXTR\n* -- >\n         BCT   R6,USRLOOP          TRY FOR ANOTHER USER ENTRY\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\nTRYNEXTR DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   UMSGCNT(3),PACKZERO   ZERO THE USERID'S MESSAGE COUNTER\n         B     INDEXUS             END OF RECORD? GET ANOTHER.\n         SPACE 3\nSAVPTRS  DS    0H\n         MVC   MYUSRBA(3),LASTRBA  SAVE RBA OF RECORD WITH MY USERID\n         STC   R8,MYUSSLOT         SAVE SLOT IN RECORD\n         MVC   SAVEPTRS(6),USDRBA  SAVE POINTERS TO MY MESSAGES\n*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nGOWRITE  DS    0H\n         MVC   MESSRBA(3),SAVEPTRS   GET RBA OF FIRST MESSAGE\n         BAL   R9,WRITLOOP         LOOP THRU CHAIN FOR THIS USERID\n         BAL   R9,REWRFRSR         ADJUST FREE SEARCH RECORD\n         BAL   R9,WRITEND          FINISH OFF USERID,\n         MVC   BLOCKNO,MYUSRBA     GET RBA FOR READ TO CONTINUE\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         BAL   R9,REFINDUS         FIND USER SLOT TO ZERO HIM OUT\n         USING USDIR,R3\n         MVC   USDRBA(6),ZEROS     ZERO HIM OUT\n         MVC   USDID(7),ZEROS      ZERO OUT USERID ITSELF\n         DROP  R3\n         BAL   R9,REWRUSER         REWRITE THE RECORD\n         MVC   RNAM(3),MYUSRBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         CLI   ALLFLAG,X'FF'\n         BNE   ENDWRITE\n* -- >\n         XC    SAVER6A,SAVER6A     CLEAR WORK AREA\n         MVC   SAVER6A+3(1),MYUSSLOT   INSERT SLOT NUMBER\n         CLC   SAVER6A,=F'8'\n         BE    INDEXUS\n* -- >\n         B     TRYNEXT\nENDWRITE DS    0H\n         B     ZEROUT                  AND SCRAM\n* ------------------------------------------------------------------ *\n* ---    END OF MAIN LOOP FOR USERID'S.                          --- *\n* ------------------------------------------------------------------ *\nBADEND   MVC   LINE,LINE-1                COME HERE IF ID KEY NOT X'01'\n         LA    R0,L'MESPREND+7             WRITE MESSAGE THAT\n         MVC   LINET(L'MESPREND),MESPREND     THINGS ARE NOT\n         BAL   R9,MSG                            SO GOOD.\n*                                         GET HERE AT END OF USER RCDS\nENDUSER  DS    0H\nNOTALL2  DS    0H\n         CLI   ALLFLAG,X'FF'\n         BE    NOUSRMSG\n         MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   WK1NOUSR,MESNOUSR              AND JUST FINISH UP\n         MVC   WK1NOUSR+32(7),TRYID             FOR THIS ID THAT\n         MVC   LINET(L'WK1NOUSR),WK1NOUSR         YOU'VE BEEN\n         LA    R0,L'WK1NOUSR+7                      DEALING WITH\n         BAL   R9,MSG\n         B     ZEROUT\nNOUSRMSG DS    0H\n         MVC   LINE,LINE-1                  CLEAR LINE\n         MVC   LINET(L'MESALNOU),MESALNOU\n         LA    R0,L'MESALNOU+7                      DEALING WITH\n         BAL   R9,MSG\n         B     EOJ4\nZEROUT   B     EOJ0                WE'RE DONE.\n         SPACE 3\nWMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE2                 YOU HAVE TO ENTER A\n         LA    R0,L'MESSAGE2+7                  USERID NAME.\n         BAL   R9,MSG\n         B     EOJ4                                          PARS 06/99\nWMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT\n         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D\n         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.\n         BAL   R9,MSG\n         B     EOJ4\nEOJ      DS    0H                  BYE.\n         CLOSE (BRODCAST)\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LR    R15,R5              NON-CORRUPTED RETURN CODE\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     LA    R5,0                SET CC = 0.\n         B     EOJ                 CONT.\nEOJ4     LA    R5,4                SET CC = 4.\n         B     EOJ                 CONT.\nEOJ8     LA    R5,8                SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\n*-----------------------------------------------------------------*\n*---*                S U B R O U T I N E S                    *---*\n*-----------------------------------------------------------------*\n         SPACE 2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GET THE NEW USERID FROM THE PARM, AND SAVE THE OLD ONE.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nGETIDS   DS    0H\n         ST    R9,SAVER9A\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         ST    R6,SAVER6C          SAVE BCT REGISTER\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         L     R6,SAVER6C          RESTORE BCT REGISTER\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,NEWPSCBL         SAVE NEW USER'S LENGTH\n         OC    NEWID(8),BLANKS     UPPERCASE NEW USERID\n         MVC   OLDID(8),BLANKS     CLEAR FIELD\n         MVC   OLDID(7),PSCBUSER   SAVE ORIGINAL USERID\n         OC    OLDID(8),BLANKS     MAKE SURE ALL 8 CHARS ARE INITLIZED\n         MVI   OLDPSCBL,X'00'      INITIALIZE FIELD\n         MVC   OLDPSCBL(1),PSCBUSRL  SAVE ORIGINAL USERID LENGTH\n         DROP  R2\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADREAD DS    0H\n         ST    R9,SAVER9B\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOKZERO,MF=E       RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       ADDRESS OF RECORD\n         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP\n         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD\n         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO\n         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?\n         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS\n         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5\nSKIPFREE DS    0H\n         DROP  R3\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      DS    0H\n         ST    R9,SAVER9C\n         LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         L     R9,SAVER9C\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         ST    R9,SAVER9D\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         L     R9,SAVER9D\n         BR    R9                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nINITCON  DS    0H\n         ST    R9,SAVER9E\n         MVI   LINE-1,C' '         INITIALIZE BLANK\n         MVI   ALLFLAG,X'00'\n         MVC   NEWID,BLANKS\n         MVC   UMSGCNT(3),PACKZERO INITIALIZE COUNTER\n         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER\n         MVC   WK1TOTAL,MESTOTAL    INIT AREAS\n         MVC   WK1NOUSR,MESNOUSR\n         MVC   WK1ALL,MESALL\n         MVC   LEVEL(7),BLANKS\n         MVC   TYP5RBA(3),ZEROS\n         MVC   FSRCRBA(3),ZEROS\n         MVC   NEXTRBA(3),ZEROS\n         MVC   MINRBA(3),=X'0FFFFF'    PUT A LARGE VALUE IN\n         MVC   MESDELUS(L'MESDELUS),MESUSRID\n         MVC   MESUSRDX(L'MESUSRDX),MESUSRDL\n         XC    SAVER6A,SAVER6A\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETPSCB  DS    0H\n         ST    R9,SAVER9F\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R1,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R1)       POINT TO JSCB.\n         L     R1,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2\n         ST    R2,PSCBPNTR         STORE PSCB ADDRESS IN SAFE LOCATION\n         L     R9,SAVER9F\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDELREC   DS    0H      THIS ROUTINE ASSUMES A READ WAS            *\n*                      DONE FIRST, AND A CHECK. THE RECORD        *\n*                      THAT WAS READ, WILL BE DELETED.            *\n*                      IF LEVEL OF SYS1.BRODCAST IS 2 OR MORE,    *\n*                      THEN THE RBA OF THE FREE SEARCH RECORD     *\n*                      WILL ALSO BE UPDATED IF NECESSARY.         *\n*                      THIS WILL NOT BE DONE HERE.  RATHER,       *\n*                      THE RBA OF ALL DELETED RECORDS WILL BE     *\n*                      MINIMIZED, AND THE UPDATING, IF THE        *\n*                      MINIMUM RBA IS LESS THAN THE FREE SEARCH   *\n*                      RECORD RBA, WILL BE DONE AT THE VERY END.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         ST    R9,SAVER9G\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         L     R2,MDLDECB+16           POINT TO IOB\n         USING IOBSTDRD,R2\n         MVC   SAVEINF1(8),IOBSEEK     SAVE CCHHR OF RECORD\n         DROP  R2\n         L     R2,MDLDECB+20           POINT TO THE KEY\n         MVI   0(R2),X'FF'             FIRST PART OF MARKING DELETED\n         L     R2,MDLDECB+12           POINT TO RECORD ITSELF\n         USING USMSG,R2\n         MVC   USMLNG(1),SAVEINF1+7    MOVE IN HEX RECORD NUMBER\n         MVC   USMTEXT(128),ZERREC     ZERO OUT THE MESSAGE AREA\n         CLC   MINRBA(3),MESSRBA       SEE IF CURRENT RBA IS LOWEST\n         BNH   CHGFRBA                 IT ISN'T, SO BRANCH AROUND.\n         MVC   MINRBA(3),MESSRBA       LOWER SAVED RBA IF NECESSARY\nCHGFRBA  DS    0H\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         L     R9,SAVER9G\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING CPPL,R5\nCPPLPTRS DS    0H\n         ST    R9,SAVER9H\n         L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R5,SAVECPPL            AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         L     R9,SAVER9H\n         BR    R9\n         DROP  R5\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST IF USER HAS PSCB AUTHORIZATION.               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         USING PSCB,R2\nCHEKAUTH DS    0H\n         ST    R9,SAVER9I\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\n         DROP  R2\n         L     R9,SAVER9I\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        GIVEN THE RBA AND THE USERID SLOT NUMBER,                *\n*        GO FIND THE SYS1.BRODCAST USERID SLOT.                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREFINDUS DS    0H                  GET USER SLOT GIVEN RBA AND SLOT #\n         ST    R9,SAVER9J\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'01'         USERID RECORD?\n         BNE   BADEND\n         LA    R2,0\n         LA    R3,0\n         IC    R3,MYUSSLOT         RESET SLOT NUMBER\n         LR    R8,R3               LOAD SLOT NUMBER IN R8 FOR RETRY\n         M     R2,=F'13'\n         L     R5,MDLDECB+12       ADDRESS OF RECORD\n         LA    R2,0(R3,R5)         FIND OUR SLOT\n         LR    R3,R2               PUT IN R3 TO SET UP RETRY\n* -- >\n         LA    R6,9                RECONSTRUCT BCT REGISTER FOR RETRY\n         XC    SAVER6A,SAVER6A     CLEAR SAVE AREA\n         MVC   SAVER6A+3(1),MYUSSLOT   INSERT SLOT NUMBER\n         S     R6,SAVER6A              RECALCULATE BCT REGISTER\n* -- >\n         MVC   UMSGCNT(3),PACKZERO   ZERO USERID MESSAGE COUNT\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         L     R9,SAVER9J\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRUSER DS    0H            REWRITE RECORD WITH USER SLOT IN IT.\n         ST    R9,SAVER9K\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               BLOCKNO,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         L     R9,SAVER9K\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nREWRFRSR DS    0H            REWRITE FREE SEARCH RECORD.\n         ST    R9,SAVER9L\n         CLC   TYP5RBA(3),ZEROS    IS THERE A TYPE 5 RECORD IN BRODCAST\n         BE    REWRFEND            NO, PROBABLY NOT RUNNING VERS 2\nTYP5READ DS    0H\n         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)\n         READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY                    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R3,MDLDECB+12       POINT TO RECORD\n         LA    R5,1(,R3)           POINT TO FREE SEARCH RBA\n         MVC   FSRCRBA(3),0(R5)    SAVE ITS CURRENT VALUE\n         CLC   0(3,R5),MINRBA      SHOULD FREE SEARCH RECORD BE LOWERED\n         BNH   NOFRSR                NO. JUST GET OUT.\n         MVC   0(3,R5),MINRBA      YES. LOWER IT\n         WRITE MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               TYP5RBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\nNOFRSR   DS    0H\n         MVC   RNAM(3),TYP5RBA     USE RBA AS RNAME FOR ENQ/DEQ\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         MVC   RNAM(3),ZEROS       RELEASE ENQ ON HEADER RECORD\n         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\nREWRFEND DS    0H\n         L     R9,SAVER9L\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        BUMP THROUGH THE MESSAGES HOOKED TO A USERID             *\n*        AND WRITE THEM ALL OUT, USING PUTLINE SERVICE.           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITLOOP DS    0H\n         ST    R9,SAVER9M\n         MVC   LINE,LINE-1\n         LA    R0,20\n         BAL   R9,MSG                          BLANK OUTPUT LINE\n         MVC   LINE,LINE-1                     WRITE\n         MVC   MESUSRDX+39(7),TRYID    UPDATE USERID MESSAGES MESSAGE\n         MVC   LINET(L'MESUSRDX),MESUSRDX         END OF USER LINE\n         MVC   LINE+2(3),MESARROW\n         LA    R0,L'MESUSRDX+7\n         BAL   R9,MSG\n         MVC   LINE,LINE-1\n         LA    R0,20\n         BAL   R9,MSG                          BLANK OUTPUT LINE\nWRLOOP   READ  MDLDECB,            ECB ADDRESS TO POST                 X\n               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X\n               BRODCAST,           DCB TO USE FOR READ                 X\n               'S',                DO DYNAMIC BUFFERING                X\n               'S',                GET LENGTH FROM DCB                 X\n               'S',                KEY + DATA ARE READ SEQUENTIALLY    X\n               MESSRBA,MF=E        RBA OF THE RECORD\n         SPACE\n         CHECK MDLDECB\n         L     R2,MDLDECB+20       ADDRESS OF KEY\n         CLI   0(R2),X'03'         IS THIS A GOOD MESSAGE ?\n         BNE   WRITLEND            NO. WE HAVE NO BUSINESS BEING HERE\n         L     R2,MDLDECB+12       ADDRESS OF RECORD\n         USING USMSG,R2\n         XR    R0,R0\n         IC    R0,USMLNG           LENGTH FOR PUTLINE\n         ST    R6,SAVER6D          SAVE VALUE OF R6\n         LR    R6,R0               USE R6 TEMPORARILY FOR EX VALUE\n         BCTR  R6,0                ONE LESS FOR EXECUTE\n         EX    R6,MOVEMSG          EXECUTE\n         L     R6,SAVER6D          RESTORE VALUE OF R6\n         A     R0,=F'7'\n         HEX   LINE,3,MESSRBA\n         BAL   R9,MSG              WRITE MESSAGE OUT\n         AP    UMSGCNT,=P'1'       ADD TO USER MESSAGE COUNT\n         AP    TMSGCNT,=P'1'       ADD TO TOTAL MESSAGE COUNT\n         CLC   USMNEXT(3),ZEROS    IS THIS THE LAST MESSAGE ?\n         BE    WRITLENX            YES, GO FINISH UP.\n         MVC   NEXTRBA(3),USMNEXT    NO. GET ADDRESS OF NEXT RECORD\n         DROP  R2\n         BAL   R9,DELREC           GO DELETE THE RECORD\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         MVC   MESSRBA(3),NEXTRBA   PREPARE TO READ NEXT RECORD\n         B     WRLOOP\nWRITLENX BAL   R9,DELREC           DELETE THE LAST RECORD\nWRITLEND DS    0H\n         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X\n               D,                  USED BDAM READ                      X\n               BRODCAST            DCB FOR PROCESS DATA SET\n         L     R9,SAVER9M\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        FINISH WRITING END MESSAGES FOR USERID.                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWRITEND  DS    0H\n         ST    R9,SAVER9N\n         MVC   LINE,LINE-1\n         MVC   WK1TOTAL,MESTOTAL               WRITE\n         MVC   WK1TOTAL+5(7),TRYID               TOTALS\n         MVC   WK1TOTAL+18(6),MASK6                LINE\n         ED    WK1TOTAL+18(6),UMSGCNT\n         MVC   LINET(L'WK1TOTAL),WK1TOTAL\n         LA    R0,L'WK1TOTAL+7\n         BAL   R9,MSG\n         MVC   LINE,LINE-1                     WRITE\n         MVC   LINET,MESSEND                     END OF USER LINE\n         LA    R0,L'MESSEND+7\n         BAL   R9,MSG\n         MVC   LINE,LINE-1\n         LA    R0,20\n         BAL   R9,MSG                          BLANK OUTPUT LINE\n         MVC   LINE,LINE-1                     WRITE\n         MVC   MESDELUS+7(7),TRYID     UPDATE \"USERID DELETED\" MESSAGE\n         MVC   LINET(L'MESDELUS),MESDELUS         END OF USER LINE\n         MVC   LINE+2(3),MESARROW\n         LA    R0,L'MESDELUS+7\n         BAL   R9,MSG\n         MVC   LINE,LINE-1\n         LA    R0,20\n         BAL   R9,MSG                          BLANK OUTPUT LINE\nNOTALL4  MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         L     R9,SAVER9N\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R5\nSETIOPL  DS    0H\n         ST    R9,SAVER9O\n         L     R5,CPPLPNTR\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R5\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         L     R9,SAVER9O\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n*-----------------------------------------------------------------*\n*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*\n*-----------------------------------------------------------------*\nPACKZERO DC    PL3'0'\nPACKZER5 DC    PL5'0'\nFULLZERO DC    F'0'\nMESARROW DC    C'-->'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n         USING USMSG,R2\nMOVEMSG  MVC   LINET(*-*),USMTEXT  EXECUTED\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLNKLINE DS    0CL133\nBLANKS   DC    C'        '         8 BLANKS\n         DC    CL125' '\nBLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER\nZEROS    DS    0CL8\nZERREC   DS    0CL128\nZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING\n         DC    X'0000'\n         DC    121X'00'\nMESSAGET DC    C'&PGMNAME PROGRAM  -  &PKGTITL &VERTITL &VERSNUM '\nMSGTLEN  EQU   *-MESSAGET\nMESSAGEC DC    C'&COPYRGT &COPYRSV'\nMSGCLEN  EQU   *-MESSAGEC\nMESSAGE1 DC    C'BAD OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'\nMESSEND  DC    C'* - - - - END OF MESSAGES FOR THIS USER - - - - *'\nMESTOTAL DC    C'USER         HAD           DEFERRED TSO MESSAGES'\nMESUSRID DC    C'USERID         HAS BEEN DELETED FROM THE BROADCAST DAT-\n               ASET.'\nMESUSRDL DC    C'MESSAGES DELETED FOR THE FORMER USERID        .'\nMESALL DC C'TOTAL DEFERRED TSO MESSAGES IN SYS1.BRODCAST              '\nMESNOUSR DC    C'* - - NO USERID RECORD FOR USER          - - *'\nMESALNOU DC    C'* - NO USERIDS FOUND IN BROADCAST DATASET -  *'\nMESPREND DC    C'?????  PRELIMINARY END OF USERID RECORDS - - *'\nMESSAGE2 DC    C'PLEASE ENTER THE USERID NAME AFTER COMMAND NAME'\nMASK6    DC    XL6'402020202120'\nMASK10   DC    XL10'40202020202020202120'\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         DS    0F\nQNAM     DC    CL8'SYSIKJBC'\nRNAME    DC    X'000000'\n         SPACE 3\nBRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X\n               BLKSIZE=129,        LENGTH OF FILES BLOCK               X\n               DSORG=DA,           IS DIRECT ACCESS FILE               X\n               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X\n               OPTCD=R,            3 BYTE RBA WILL BE USED             X\n               RECFM=F,            FIXED LENGTH                        X\n               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X\n               KEYLEN=1,           SIZE OF KEY                         X\n               BUFL=130            KEYLEN + BLKSIZE\n         SPACE 3\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         DS    0F\nENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L\n         SPACE 3\n*-----------------------------------------------------------------*\n*----         GETMAINED DATA AREA FIELDS                      ----*\n*-----------------------------------------------------------------*\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nCPPLPNTR DS    F                   ADDRESS OF CPPL\nPSCBPNTR DS    F                   ADDRESS OF PSCB\nNEWID    DC    C'        '         STORE PARM USERID HERE\n         DS    CL72                PADDING\nADDADR   DS    0CL12\nUMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER\nTMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED\nNEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS\nOLDID    DC    C'        '         STORE OLD USERID HERE\nALLFLAG  DS    X\nLEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST\nLEVELLIT DS    CL6                    LITERAL 'LEVEL'\nLEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT\nSAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID\nSVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nFINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID\nWRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE\nCMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN\nOLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE\nNEWPSCBL DC    X'00'               STORE NEW PSCBUSRL HERE\nTYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'\nBLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ\nLASTRBA  DC    X'000000'           STORE CURRENT RBA\nSAVERBA  DC    X'000000'           STORE RBA FOR LATER READ\nMYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER\nNMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE\nNEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE\nMINRBA   DC    X'000000'\nFSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nRNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED\nMYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD\nNWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER\nNWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD\nFNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND\nFNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD\nUSERID   DS    0CL8                STORE FOUND USERID HERE\nUSERIDI  DS    CL7                 STORE FOUND USERID HERE\nUSERIDF  DS    CL1                 8TH CHARACTER\nFINDID   DS    0CL8                USERID NAME TO BE FOUND\nFINDIDI  DS    CL7                 FIRST 7 CHARACTERS\nFINDIDF  DS    CL1                 8TH CHARACTER\nTRYID    DS    0CL8                STORE TEST USERID HERE\nTRYIDI   DS    CL7                 STORE TEST USERID HERE\nTRYIDF   DS    CL1                 8TH CHARACTER\nSCANFLAG DC    X'00'               FLAG FOR USERID SCANS\nCOMPFLAG DC    X'00'               FLAG FOR USERID SCANS\n         DS    0F                  ALIGN ON FULLWORD\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nSAVER6A  DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER6B  DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER6C  DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER6D  DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER6E  DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER6F  DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER7A  DS    F                   SAVE COUNT FOR USERID SCAN\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nSAVER9F  DS    F                   BAL Register Save Area\nSAVER9G  DS    F                   BAL Register Save Area\nSAVER9H  DS    F                   BAL Register Save Area\nSAVER9I  DS    F                   BAL Register Save Area\nSAVER9J  DS    F                   BAL Register Save Area\nSAVER9K  DS    F                   BAL Register Save Area\nSAVER9L  DS    F                   BAL Register Save Area\nSAVER9M  DS    F                   BAL Register Save Area\nSAVER9N  DS    F                   BAL Register Save Area\nSAVER9O  DS    F                   BAL Register Save Area\nSAVER9P  DS    F                   BAL Register Save Area\nSAVER9Q  DS    F                   BAL Register Save Area\nSAVER9R  DS    F                   BAL Register Save Area\nSAVER9S  DS    F                   BAL Register Save Area\nSAVER9T  DS    F                   BAL Register Save Area\nSAVER9U  DS    F                   BAL Register Save Area\nSAVER9V  DS    F                   BAL Register Save Area\nSAVER9W  DS    F                   BAL Register Save Area\nSAVER9X  DS    F                   BAL Register Save Area\nSAVER9Y  DS    F                   BAL Register Save Area\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nSAVEINF1 DS    CL8                 PLACE TO STORE CCHHR\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0F\nRDWR     READ  MDLDECB,DI,MF=L\nRDWREND  DS    0F\nRDWRLEN  EQU   *-RDWR\nSTOR0001 DS    2F\nSTOR1415 DS    2F\nWK1TOTAL DC    C'                                                '\nWK1ALL DC C'                                                          '\nWK1NOUSR DC    C'                                              '\nMESDELUS DC    C'USERID         HAS BEEN DELETED FROM THE BROADCAST DAT-\n               ASET.'\nMESUSRDX DC    C'MESSAGES DELETED FOR THE FORMER USERID        .'\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJCPPL\n         IKJUPT\n         IKJPSCB\n         IKJECT\n         IKJIOPL\n         IEZIOB   DSECT=YES\n         IKJZT301 DSECT=YES\n         IKJZT304 DSECT=YES\n         IKJZT305 DSECT=YES\n         CVT  DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLISTS": {"ttr": 13057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00R\\x01\\x00\\x16\\x8f\\x01\\x00\\x16\\x8f\\x13\\x05\\x00\\x93\\x00\\x93\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-06-16T00:00:00", "modifydate": "2000-06-16T13:05:52", "lines": 147, "newlines": 147, "modlines": 0, "user": "WSBG"}, "text": "./ ADD NAME=$$NOTE   0100-00166-00166-1835-00012-00012-00000-WSBG\n    In the BCMTRAP exec, you should change the ISRZ000W message\n    to ISRZ000, if you don't want to make any ISPF modifications.\n    Otherwise, I've included a modified ISRZ00 member here, to\n    concatenate ahead of IBM's message member ISRZ00 (from John\n    Kalinich).\n\n    The effect of this change is to make a small window that shows\n    what program the BCMTRAP exec is running.  Without this change,\n    (changing ISRZ000W to ISRZ000 in the BCMTRAP exec), you get a\n    message at the top right corner, instead.\n\n./ ADD NAME=BCMDL    0100-00166-00166-1835-00007-00007-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMLIST &USR\nWRITE ARE YOU SURE YOU WANT TO DELETE THIS USER'S MESSAGES?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMDEL  &USR\n./ ADD NAME=BCMDLI   0100-00167-00167-2035-00007-00007-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMTRAP BCMLIST &USR\nWRITE ARE YOU SURE YOU WANT TO DELETE THIS USER'S MESSAGES?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMTRAP BCMDEL  &USR\n./ ADD NAME=BCMDL1   0100-00166-00166-1838-00007-00007-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMLIST &USR\nWRITE ARE YOU SURE YOU WANT TO DELETE THIS USER'S MESSAGES?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMDEL1 &USR\n./ ADD NAME=BCMDL1I  0100-00167-00167-2038-00007-00007-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMTRAP BCMLIST &USR\nWRITE ARE YOU SURE YOU WANT TO DELETE THIS USER'S MESSAGES?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMTRAP BCMDEL1 &USR\n./ ADD NAME=BCMDL2   0100-00166-00166-1833-00007-00007-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMLIST &USR\nWRITE ARE YOU SURE YOU WANT TO DELETE THIS USER'S MESSAGES?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMDEL2 &USR\n./ ADD NAME=BCMDL2I  0100-00167-00167-2036-00007-00007-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMTRAP BCMLIST &USR\nWRITE ARE YOU SURE YOU WANT TO DELETE THIS USER'S MESSAGES?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMTRAP BCMDEL2 &USR\n./ ADD NAME=BCMLST   0100-00166-00166-1805-00003-00003-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMLIST &USR\n./ ADD NAME=BCMLSTI  0100-00167-00167-2032-00003-00003-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMTRAP BCMLIST &USR\n./ ADD NAME=BCMTRAP  0101-00167-00168-1141-00042-00042-00000-WSBG\n/* Rexx */\nArg bcm_command parm\nTrace\n\nAddress TSO\n\"NEWSTACK\"\nx = outtrap(\"trap.\",\"*\")\nbcm_command parm\nx= outtrap(\"off\")\n\"DELSTACK\"\n\ndd = \"TP\"random()\nIf trap.0 = 0 Then\n  Exit\n\nAddress TSO\n\"ALLOC F(\"dd\") UNIT(VIO) NEW REUSE SPACE(1,1) TRACKS\",\n      \"LRECL(255) RECFM(F B) BLKSIZE(0)\"\n\"EXECIO * DISKW\" dd \"(FINIS STEM trap.\"\n\nAddress ISPEXEC\n\"ISPEXEC LMINIT DATAID(ID) DDNAME(\"dd\") ENQ(EXCLU)\"\nIf rc \u00ac= 0 Then\n  Say LMINIT failed\nzedsmsg = \"'\"bcm_command parm\"'\"\nzedlmsg = \"Output trapped to VIO file \"dd\n\"ISPEXEC SETMSG MSG(ISRZ000W)\"\n\n\"ISPEXEC VGET (ZVIEW) PROFILE\"\nIf zview = 'YES' Then\n  viewm = 'VIEW'\nElse\n  viewm = 'BROWSE'\n\"ISPEXEC \"viewm\" DATAID(\"id\")\"\n\"ISPEXEC LMFREE DATAID(\"id\")\"\n\nAddress TSO\n\"FREE F(\"dd\")\"\n\nExit\n/* J. Kalinich, x4521 */\n/* Exec to trap and display BCM command output in ISPF View/Browse   */\n./ ADD NAME=BCMU     0106-00166-00167-2028-00004-00002-00000-WSBG\nPROC 0 BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMUSERS\nISPEXEC SELECT PANEL(PTOOLS02)\n./ ADD NAME=BCMUA    0100-00166-00166-2015-00006-00006-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nWRITE ARE YOU SURE YOU WANT TO ADD THIS NEW USER TO BRODCAST?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMUSADD &USR\n./ ADD NAME=BCMUD    0100-00166-00166-2016-00007-00007-00000-WSBG\nPROC 1 USR BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMLIST &USR\nWRITE ARE YOU SURE YOU WANT TO DELETE THIS USER'S BRODCAST ID?\nREAD &ANSX\nIF &SUBSTR(1:1,&ANSX) \u00ac= Y  THEN EXIT\nBCMUSDEL &USR\n./ ADD NAME=BCMUI    0100-00167-00167-2028-00004-00004-00000-WSBG\nPROC 0 BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMTRAP BCMUSERS\nISPEXEC SELECT PANEL(PTOOLS02)\n./ ADD NAME=BCMUIA   0100-00168-00168-1033-00004-00004-00000-WSBG\nPROC 0 BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMTRAP BCMUSERS A\nISPEXEC SELECT PANEL(PTOOLS02)\n./ ADD NAME=BCMUT    0103-00166-00166-1730-00005-00002-00000-WSBG\nPROC 0 BCAST('SYS1.BRODCAST')\nALLOC F(BRODCAST) DA('&BCAST') SH REUSE\nBCMUSERS\nREAD\nISPEXEC SELECT PANEL(PTOOLS01)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPSCB": {"ttr": 13061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x13\\x00\\x91\\t?\\x01\\x05\\x10\\x9f\\x10\\x12\\x01x\\x01X\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1991-04-03T00:00:00", "modifydate": "2005-04-19T10:12:13", "lines": 376, "newlines": 344, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE '    C P S C B   '\n************************************************************\n*              'CPSCB'                                     *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA\n*        DATE WRITTEN. FEBRUARY 21 1975.\n*        DATE UPDATED. JULY 7 1981.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.'\n*         THIS TSO COMMAND ALLOWS SYSTEMS PROGRAMMERS TO\n*         MODIFY THEIR SESSION'S PSCB.\n*\n*         LOG OF CHANGES.\n*         22APR81 - USER SVC REMOVED. MODESETS ADDED.\n*                   COMMAND MUST NOW BE AUTHORIZED.\n*         07JUL81 - CK FOR ASMI.\n*         26NOV82 - CHANGE THE CHECK TO SS    JIM MARSHALL, SADSC\n*         02APR91 - CLEANED UP THE CODE  JIM MARSHALL            JDM1\n*         18APR05 - ADDED CONS AND NOCONS SUBCOMMANDS\n         SPACE\nCPSCB    AMODE 24                                                JDM1\nCPSCB    RMODE 24                                                JDM1\nCPSCB    CSECT                                                   JDM1\n         USING *,R12\n         B     @PROLOG-*(,R15)\n         DC    AL1(11),CL11'CPSCB'\n         DC    CL16' &SYSDATE &SYSTIME '\n@PROLOG  STM   14,12,12(13)\n         LR    R12,R15\n         LR    R2,R1\n         USING CPPL,R2\n         GETMAIN R,LV=@DATAL\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R9,R1\n         USING @DATA,R9\n         SPACE 1\n         SLR   15,15\n         ST    15,MYANS\n         SPACE\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCB WORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,180(,R1)         TCBJSCB\n         L     R1,264(,R1)         JSCBPSCB\n         LA    R1,0(,R1)           CLEAR HI ORDER BYTE\n         LTR   R1,R1               IS THERE A PSCB\n         BZ    IMPLEXEC            NO, ISSUE COMMAND-NOT-FOUND MSG\n         ST    R1,PSCBPTR          SAVE PSCB ADDRESS\n         SPACE\n         L     R1,548              PSAAOLD, CURRENT ASCB\n         L     R15,172(,R1)        ASCBJBNI\n         LTR   R15,R15             IS THIS A JOB\n         BNZ   IMPLEXEC            YES, ISSUE COMMAND-NOT-FOUND MSG\n         L     R0,60(,R1)          ASCBTSB\n         LTR   R0,R0               IS THIS TSO\n         BZ    PROCEED             NO, BRANCH IF STARTED TASK\n         B     PROCEED                                       DIAG 06/99\n         L     R1,PSCBPTR          POINT TO USERID IN PSCB\n         USING PSCB,R1\n*        TM    PSCBATR1,PSCBCTRL   OPER\n*        BO    PROCEED             YES, BRANCH\n*        CLC   PSCBUSER(4),ASFI\n*        BE    PROCEED\n         CLC   PSCBUSER(1),SS\n         BE    PROCEED\n         LA    R15,USERIDS         POINT TO LIST OF AUTHORIZED USERS\nUSERLOOP CLI   0(R15),0            END OF LIST\n         BE    IMPLEXEC            YES, BRANCH\n         CLC   PSCBUSER,0(R15)     IS USERID IN LIST\n         BE    PROCEED             YES, BRANCH\n         LA    R15,8(,R15)         POINT TO NEXT USERID IN LIST\n         B     USERLOOP\n         DROP  R1                  PSCB\nSS       DC    C'W'                SYSTEMS TYPE\nUSERIDS  DC    0D'0'               ALIGN FOR EASY ZAPS\n         DC    8D'0'               ROOM FOR 8 USERIDS\n         DC    H'0'                END OF LIST\n         SPACE\nIMPLEXEC L     R15,CPPLCBUF        CPPLCBUF\n         XC    2(2,R15),2(R15)     SET CBUF OFFSET TO IMPLICIT EXEC\n         L     R15,CPPLECT         CPPLECT\n         CLI   20(R15),X'40'       ECTSCMD BLANK?\n         BNE   *+10                YES - SUBCOMMAND NOT FOUND\n         MVC   12(8,R15),=CL8'EXEC' NO - COMMAND NOT FOUND\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=@DATAL\n         L     R1,24(,R13)         RESTORE CPPL POINTER\n         LA    R15,20(,R13)        POINT TO 8 BYTE WORKAREA\n         XC    0(8,R15),0(R15)     ZERO WORKAREA\n         XCTL  (2,12),EP=EXEC,SF=(E,(15))\n         SPACE 1\nPROCEED  EQU   *\n         TESTAUTH FCTN=1\n         LTR   R15,R15\n         BNZ   AUTHERR\n         SPACE\n************************************************************\n*        SET UP PPL FOR PARSE                              *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(CPSCBPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15\n         SPACE 1\n************************************************************\n*        CALL THE PARSE SERVICE ROUTINE                    *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    520(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,520(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\n         SPACE\nPARSELNK EQU   *\n         LINK  EP=IKJPARS\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   15,15               PARSE SUCCESSFUL?\n         BNZ   EXIT                NO - BRANCH\n         L     R7,MYANS\n         USING IKJPARMD,R7\n         L     R8,PSCBPTR          REG 8 --> PSCB\n         USING PSCB,R8\n         SPACE\n         MODESET KEY=ZERO\n         SPACE\n         CLI   OPER+1,1            OPER?\n         BNE   *+8                 NO\n         OI    PSCBATR1,PSCBCTRL   YES\n         CLI   OPER+1,2            NOOPER?\n         BNE   *+8                 NO\n         NI    PSCBATR1,255-PSCBCTRL\n         SPACE\n         CLI   ACCT+1,1            ACCT?\n         BNE   *+8                 NO\n         OI    PSCBATR1,PSCBACCT   YES\n         CLI   ACCT+1,2            NOACCT?\n         BNE   *+8                 NO\n         NI    PSCBATR1,255-PSCBACCT\n         SPACE\n         CLI   JCL+1,1             JCL?\n         BNE   *+8                 NO\n         OI    PSCBATR1,PSCBJCL    YES\n         CLI   JCL+1,2             NOJCL?\n         BNE   *+8                 NO\n         NI    PSCBATR1,255-PSCBJCL\n         SPACE\n         CLI   MOUNTKW+1,1         MOUNT\n         BNE   *+8                 NO\n         OI    PSCBATR1,PSCBVMNT   YES\n         CLI   MOUNTKW+1,2         NOMOUNT\n         BNE   *+8                 NO\n         NI    PSCBATR1,255-PSCBVMNT\n         SPACE\n         CLI   CONSKW+1,1          CONSOLE\n         BNE   *+8                 NO\n         OI    PSCBATR1,PSCBCNAU   YES\n         CLI   CONSKW+1,2          NOCONSOLE\n         BNE   *+8                 NO\n         NI    PSCBATR1,255-PSCBCNAU\n         SPACE\n         CLI   RECOVKW+1,1         NO EDIT RECOVERY\n         BNE   *+8                 NO\n         OI    PSCBATR1,PSCBRCVR   YES\n         CLI   RECOVKW+1,2         EDIT RECOVERY\n         BNE   *+8                 NO\n         NI    PSCBATR1,255-PSCBRCVR\n         SPACE\n         CLI   RRBAKW+1,1          RRBA\n         BNE   *+8                 NO\n         OI    PSCBATR1,PSCBRRBA   YES\n         CLI   RRBAKW+1,2          NORRBA\n         BNE   *+8                 NO\n         NI    PSCBATR1,255-PSCBRRBA\n         SPACE\n         TM    USERDATA+6,X'80'    USERDATA PRESENT?\n         BZ    USERDAX             NO - BRANCH\n         L     4,USERDATA          REG 4 --> VALUE ENTERED\n         LH    5,USERDATA+4        REG 5  =  LENGTH\n         BCTR  5,0\n         B     *+10\n         MVC   WORK4(0),0(4)\n         EX    5,*-6\n         LA    1,WORK4\n         LA    0,2\n         BAL   2,PACK              CONVERT TO HEX\n         MVC   PSCBATR2(2),WORK4\nUSERDAX  EQU   *\n         SPACE\n         TM    UNITNAME+6,X'80'    UNITNAME PRESENT?\n         BZ    UNITNAX             NO - BRANCH\n         L     4,UNITNAME          REG 4 --> VALUE ENTERED\n         LH    5,UNITNAME+4        REG 5  =  LENGTH\n         BCTR  5,0\n         MVC   WORK8(8),=CL8' '\n         B     *+10\n         MVC   WORK8(0),0(4)\n         EX    5,*-6\n         CLC   WORK8(5),=CL5'NONE ' UNIT(NONE) SPECIFIED?\n         BNE   *+10                NO - BRANCH AROUND MVC\n         MVC   WORK8,=CL8' '       YES - MOVE SPACES\n         MVC   PSCBGPNM,WORK8\nUNITNAX  EQU   *\n         MODESET KEY=NZERO\n         B     EXIT0\n         SPACE\nEXIT12   LA    15,12\n         B     EXIT\nEXIT0    SLR   15,15\nEXIT     EQU   *\n         STH   15,WORK4\n         IKJRLSA MYANS\n         LH    15,WORK4\n         SPACE\n         LR    1,13\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=@DATAL\n         LM    14,12,12(13)\n         BR    14\n         SPACE\nPACK     LR    15,1                REG 15 --> RECEIVING FLD\n         SR    14,14               CLEAR REG 14\n         IC    14,0(,1)            REG 14  =  1ST CHAR\n         CLI   0(1),C'0'           NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    14,57(,14)          LETTER - CONVERT TO FA-FF\n         SLL   14,4                SHIFT LEFT 4 BITS\n         STC   14,0(,15)           STORE LEFT HALF\n         IC    14,1(,1)            REG 14  =  2ND CHAR\n         CLI   1(1),C'0'           NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    14,57(,14)          LETTER - CONVERT\n         SLL   14,28               SHIFT LEFT HALF TO OBLIVION\n         SRL   14,28               SHIFT BACK AGAIN\n         STC   14,1(,15)           STORE RIGHT HALF\n         OC    0(1,15),1(15)       'OR' RIGHT HALF OVER LEFT HALF\n         LA    1,2(,1)             INCREMENT SENDING FLD\n         LA    15,1(,15)           INCREMENT RECEIVING FLD\n         BCT   0,PACK+2            LOOP USING LENGTH IN REG 0\n         BR    2                   EXIT\n         SPACE\nAUTHERR  LA    R1,AUTHMSG\n         LA    R0,L'AUTHMSG\n         TPUT  (1),(0),R\n         B     EXIT12\n         SPACE\n************************************************************\n*        CONSTANTS                                         *\n************************************************************\n         SPACE\n         LTORG\nAUTHMSG  DC    C'ENVIRONMENT IS NOT APF AUTHORIZED'\n         SPACE\n         PRINT NOGEN\n         SPACE\nCPSCBPCL IKJPARM\nOPER     IKJKEYWD\n         IKJNAME 'OPER'\n         IKJNAME 'NOOPER'\nACCT     IKJKEYWD\n         IKJNAME 'ACCT'\n         IKJNAME 'NOACCT'\nJCL      IKJKEYWD\n         IKJNAME 'JCL'\n         IKJNAME 'NOJCL'\nMOUNTKW  IKJKEYWD\n         IKJNAME 'MOUNT'\n         IKJNAME 'NOMOUNT'\nCONSKW   IKJKEYWD\n         IKJNAME 'CONS'\n         IKJNAME 'NOCONS'\nRECOVKW  IKJKEYWD\n         IKJNAME 'RECOV'\n         IKJNAME 'NORECOV'\nRRBAKW   IKJKEYWD\n         IKJNAME 'RRBA'\n         IKJNAME 'NORRBA'\nUSERKW   IKJKEYWD\n         IKJNAME 'USERDATA',SUBFLD=USERSF\nUNITKW   IKJKEYWD\n         IKJNAME 'UNITNAME',SUBFLD=UNITSF\nUSERSF   IKJSUBF\nUSERDATA IKJIDENT 'USERDATA',MAXLNTH=4,                                *\n               FIRST=NONATNUM,OTHER=NONATNUM,                          *\n               PROMPT='USERDATA',                                      *\n               VALIDCK=CPSCBVC\nUNITSF   IKJSUBF\nUNITNAME IKJIDENT 'UNITNAME',MAXLNTH=8,                                *\n               FIRST=NONATABC,OTHER=NONATNUM,                          *\n               PROMPT='UNITNAME'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*        DSECTS                                            *\n************************************************************\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJPSCB\n         SPACE 2\n@DATA    DSECT\n         DS    18F\nMYECB    DS    F\nMYPPL    DS    7F\nMYANS    DS    F                   WILL POINT TO PDL\nPSCBPTR  DS    F\nWORK4    DS    F\nWORK8    DS    CL8\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE 2\n*\n*              PARSE VALIDITY CHECKING ROUTINE FOR USERDATA\n*\nCPSCBVC  CSECT\n         USING *,10\n         STM   14,12,12(13)\n         LR    10,15\n         LM    8,9,0(1)            REG 8 --> PDE\n*        L     9,0(,9)             REG 9 --> MYDSECT\n         L     4,0(,8)             REG 4 --> CHARACTER STRING\n         LH    5,4(,8)             REG 5  =  LENGTH\n         LA    15,4                RETURN CODE IF CHECK FAILS\n         CLI   5(8),4              LENGTH = 4?\n         BNE   VALEXIT             NO - EXIT WITH RC=4\nVALLOOP  CLI   0(4),C'0'           NUMERIC?\n         BNL   VALINCR             YES - THIS CHAR OK\n         CLI   0(4),C'F'           IN RANGE A THRU F?\n         BH    VALEXIT             NO - EXIT WITH RC=4\nVALINCR  LA    4,1(,4)             POINT TO NEXT CHAR\n         BCT   5,VALLOOP           LOOP FOR LENGTH OF STRING\n         SR    15,15               SET RC=0\nVALEXIT  L     14,12(,13)\n         LM    0,12,20(13)\n         BR    14\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPSCB$": {"ttr": 13068, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00E\\x00\\x904_\\x01\\x05\\x10\\x8f\\x10G\\x00\\x1d\\x00\\x0b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1990-12-11T00:00:00", "modifydate": "2005-04-18T10:47:45", "lines": 29, "newlines": 11, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,BATCH,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R16.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R16.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(CPSCB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   CPSCB\n SETCODE AC(1)\n SETSSI  CB469300\n NAME    CPSCB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPSCB#": {"ttr": 13313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x003\\x00\\x811?\\x01\\x05\\x10\\x9f\\x10S\\x001\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1981-11-09T00:00:00", "modifydate": "2005-04-19T10:53:33", "lines": 49, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n  THE CPSCB (CHANGE THE PSCB) IS AN AUTHORIZED TSO COMMAND\n  TO CHANGE A TSO USER'S PSCB (PROTECTED STEP CONTROL BLOCK).\n\n  THIS HAS THE EFFECT OF CHANGING THE AUTHORITY WHICH THE\n  TSO USER HAS, AND THEREFORE THE USE OF THE COMMAND SHOULD BE\n  RESTRICTED TO AUTHORIZED SYSTEMS SUPPORT PERSONNEL ONLY.\n\n  THE CPSCB COMMAND DOES NOT PRODUCE ANY TSO OUTPUT MESSAGES\n  WHEN IT HAS BEEN PROPERLY EXECUTED.  TO SEE THE EFFECT\n  OF THE CPSCB COMMAND ON THE USER'S PSCB, YOU SHOULD ISSUE\n  THE COMPANION \"LPSCB\" (LIST THE PSCB) COMMAND, BEFORE AND\n  AFTER THE CPSCB COMMAND HAS BEEN EXECUTED.  LPSCB BY DEFAULT,\n  DOES NOT NEED ANY OPERANDS.\n\n)X SYNTAX  -\n         CPSCB  OPER    | NOOPER   (OPERATOR AUTHORITY)\n                ACCT    | NOACCT   (ACCOUNT AUTHORITY)\n                JCL     | NOJCL    (JCL SUBMIT AUTHORITY)\n                MOUNT   | NOMOUNT  (MOUNT AUTHORITY)\n                CONS    | NOCONS   (CONSOLE AUTHORITY)\n                RECOV   | NORECOV  (REVERSE LOGIC HERE -\n                                     RECOV MEANS EDIT RECOVERY\n                                     IS OFF)\n                RRBA    | NORRBA   (NOT NORMALLY USED)\n\n                USERDATA(  )       (UP TO 2 HEX BYTES)\n                UNITNAME(  )       (UP TO 8 CHARACTER BYTES)\n\n  REQUIRED - ANY ONE OF THE PERMITTED OPERANDS\n\n)O OPERANDS -\n))OPER      -  TURNS OPERATOR AUTHORITY ON.\n))NOOPER    -  TURNS OPERATOR AUTHORITY OFF.\n))ACCT      -  TURNS ACCOUNT AUTHORITY ON.\n))NOACCT    -  TURNS ACCOUNT AUTHORITY OFF.\n))JCL       -  TURNS JOB SUBMIT AUTHORITY ON.\n))NOJCL     -  TURNS JOB SUBMIT AUTHORITY OFF.\n))MOUNT     -  TURNS VOLUME MOUNT AUTHORITY ON.\n))NOMOUNT   -  TURNS VOLUME MOUNT AUTHORITY OFF.\n))CONS      -  TURNS TSO CONSOLE AUTHORITY ON.\n))NOCONS    -  TURNS TSO CONSOLE AUTHORITY OFF.\n))RECOV     -  TURNS EDIT RECOVERY OFF (REVERSE LOGIC).\n))NORECOV   -  TURNS EDIT RECOVERY ON  (REVERSE LOGIC).\n))RRBA      -  FORCES ADJUSTMENT OF BRODCAST RELATIVE\n               RECORD ADDRESS FOR THIS USER AT LOGOFF.\n               (NOT NORMALLY USED)\n))NORRBA    -  TURNS THE RRBA FLAG OFF.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DNOTICE": {"ttr": 13315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x15\\x01\\x07%\\x9f\\x01\\x165?\\x16)\\x00\\x06\\x00\\x03\\x00\\x00\\xc3\\xd3\\xc9\\xe2\\xe3@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-09-16T00:00:00", "modifydate": "2016-12-18T16:29:15", "lines": 6, "newlines": 3, "modlines": 0, "user": "CLIST"}, "text": "PROC 0\n/* -------------------------------------------------------------- */\n/*  DISPLAY YOUR CURRENT NOTICES DIRECTLY FROM BRODCAST DATASET   */\n/* -------------------------------------------------------------- */\nALLOC FI(BRODCAST) DA('SYS1.BRODCAST') SH REUSE\nTSOV BCMNLIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEESX9": {"ttr": 13317, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00?\\x01\\x01\\x00?\\x18\\x18\\x00d\\x00d\\x00\\x00\\xc4\\xe2\\xe4\\xd4\\xd5\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-03T00:00:00", "modifydate": "2001-01-03T18:18:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "DSUMNER"}, "text": "./ ADD NAME=$$NOTE   0101-01003-01003-1817-00030-00025-00000-WSBG\nGolob, Sam\nFrom:   dsumner@dehavilland.ca\nSent:   Wednesday, January 03, 2001 11:10 AM\nTo:     sbgolob@att.net\nSubject:        re: SYS1.BRODCAST\n\n\n     At this shop we have been using exit IKJEESX9 (included\nbelow) for years (MVS... through OS/390 1.2). What it does is\nallow individual users to have logs rather than using the\nSYS1.BRODCAST dataset. I have used this so that most users\ncontinue to use SYS1.BRODCAST while a few heavy users have private\nlogs. We have preferred this since it keep central control of the\nmessages and prevents proliferation of many small datasets (which\nalso tend to get migrated). I have used this in conjunction with\nother utilities to monitor SYS1.BRODCAST and keep the situation\nunder control.\n\n     For reference, we have about 2500 TSO ID's and only about 10\nprivate logs.  These are mostly associated with a few \"production\"\nTSO users who monitor system performance of production jobs.\n\n      It appears that this exit is simply linked into LINKLIB (or\nsome dataset concatenated to it).  The last time it was installed\nhere it was linked into our linklib extension.  (I don't know why\nit was not put in via SMP/E USERMOD).\n\n     You are welcome to add this exit to your collection of\nSYS1.BRODCAST tools if you see fit.\n\n./ ADD NAME=$$NOTE1  0100-01003-01003-1748-00019-00019-00000-WSBG\nGolob, Sam\nFrom:   dsumner@dehavilland.ca\nSent:   Wednesday, January 03, 2001 3:43 PM\nTo:     Golob, Sam\nSubject:        RE: SYS1.BRODCAST\n\n\n     The exit works by \"sensing\" when a user log is present. If\none is not present, it simply uses SYS1.BRODCAST. As you can see\nthe code to do this is amazingly trivial. I wrote this many years\nago and must have been inspired by some piece of IBM\ndocumentation. When I went back later (while installing a later\nrelease) to see if the exit was still valid, I could not find\njustification for the technique in the manuals. I tried it (on\nreleases up to OS/390 1.2) and it has continued to work.\n\nDavid Sumner\nemail:  dsumner@dehavilland.ca\n\n./ ADD NAME=@FILE494 0103-99083-01003-1756-00009-00002-00000-WSBG\n//***FILE 494 is from David Sumner and is a TSO Exit to the         *   FILE 494\n//*           LISTBC command, to prevent the creation of            *   FILE 494\n//*           an individual TSO userlog, if one hasn't been         *   FILE 494\n//*           created yet, and to use SYS1.BRODCAST instead.        *   FILE 494\n//*           The name of this exit is IKJEESX9.                    *   FILE 494\n//*                                                                 *   FILE 494\n//*           David Sumner                                          *   FILE 494\n//*           email:  dsumner@dehavilland.ca                        *   FILE 494\n//*                                                                 *   FILE 494\n./ ADD NAME=IKJEESX9 0100-01003-01003-1746-00038-00038-00000-WSBG\nIKJEESX9 CSECT\n*\n*     THIS EXIT PREVENTS LISTBC FROM CREATING A NEW PRIVATE\n*     BRODCAST DATASET. IT CHANGES THE TSO PARMS TEMPORARILY\n*     TO USE SYS1.BRODCAST AND TELL TSO TO RETRY THE ALLOCATION\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         IKJEESCB DSECT=YES\n         EJECT\nIKJEESX9 CSECT\nIKJEESX9 AMODE 31                  SET ADDRESSING MODE TO 31-BIT\nIKJEESX9 RMODE ANY                 SET RESIDENCY MODE TO ANY\n         SAVE  (14,12),,'IKJEESX9 &SYSDATE &SYSTIME'  SAVE REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         USING IKJEESX9,R12\n         LR    R11,R1              SAVE PARAMETER AREA ADDRESS\n         L     R1,36(,R11)\n         USING IKJEESCB,R1\n         MVC   EESCB_DATASET,=CL44'SYS1.BRODCAST'\nEXIT     LA    R15,4               INDICATE NO ALLOCATION REQ'D\n         RETURN (14,12),RC=(15)    EXIT\n         END   IKJEESX9\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IKJZT3$$": {"ttr": 13320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x06\\x01\\x01\\tO\\x01\\x06)_\\x10R\\x00Q\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2001-04-04T00:00:00", "modifydate": "2006-10-22T10:52:06", "lines": 81, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "Note about IKJZT301 thru IKJZT306 macros.\n\n   These macros have been moved from PVTMACS (i.e. Optional Materials)\nto SYS1.MACLIB in later releases of OS/390 and in z/OS.\n\n   The reason we have copies of them here, is because you need them to\ndescribe the various records in the SYS1.BRODCAST dataset, and you might\nnot have PVTMACS, if these macros are not in SYS1.MACLIB on your MVS\nversion.  We have old, public domain versions of them--however.....\n\n   Comparison of the old free versions we have here, and the z/OS\nRelease 1.7 versions on SYS1.MACLIB, shows that we have the same code,\nexcept for IKJZT301 (BROADCAST header record).  You can use our versions\nto assemble, or you can assemble using IBM's versions from SYS1.MACLIB,\nif your system has them on SYS1.MACLIB.  It's nice to know that the\nformat of SYS1.BRODCAST hasn't changed too much in a long while.  Very\nold TSO versions (I think you have to go back to OS/360) don't have the\ntype X'05' Free Search record.\n\n   One of the real changes that has occurred, affecting the BROADCAST\nDataset externally, comes because of the fact that you can switch\nBROADCAST Datasets now, when you do either a PARMLIB UPDATE(xx) TSO\ncommand, or a SET IKJTSO=xx console command, which will update the value\nused in the SEND BROADCAST (DATASET(new.dataset.name)) parameter, and so\nforth (also to make a volume change, etc.).  So now you can switch to a\ndifferent copy of the SYS1.BRODCAST dataset \"officially\".  But this\nhasn't affected the internal format of the BROADCAST header record\nitself, or any other BRODCAST dataset record formats.\n\n   What HAS changed significantly (for the BROADCAST header record) is\nthe fact that the Global Notices which are addressed by the LISTBC\ncommand are now incore.  This is so that many LOGONs which occur at the\nsame time, and which invoke LISTBC at the same time, won't all access\nthe SYS1.BRODCAST dataset directly, and cause an enqueue backup.  The\nR1GENNUM field is supposed to be updated every time the incore table has\nbeen updated with new Notices, and a new GETMAIN has to be done for that\ncopy.  This happens usually, when you do an OPER SEND,'  ',SAVE TSO\nsubcommand, and then you follow it with a LISTBC command (at the TSO/E\nversion 3.3.0 level or above).  R1GENNUM does not seem to get updated by\nmy BCMNOTFY command execution, followed by a BCMNUPD and a TSO LISTBC\nexecution.  The incore table IS updated by my programs, but not\nR1GENNUM, either in the incore table or in the BROADCAST dataset itself.\n\nSignificant Differences in IKJZT3xx macro versions:\n\nIKJZT301:\n--------\nInsert the following, immediately after:\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n\n* -------------------------------------------------------------------\n         DS    CL1            RESERVED\nR1FRESRH DS    CL3            RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F              GENERATION NUMBER FOR IN-STORAGE\n*                               NOTICE TABLE\n         DS    CL76 -         RESERVED\n* -------------------------------------------------------------------\n\nNote that CL76 is really the wrong value, because it doesn't take\nthe fullword alignment of the R1GENNUM field into account, and it\nshould have been CL73, to make a total record size of 129 instead\nof 132 (which overflows the data portion of the Broadcast LRECL.)\nBut IBM doesn't seem to care, because this overflow doesn't seem to\naffect anything operationally.\n\nIKJZT302:      (Only the PL/X section is extra.)\n--------\n\nIKJZT303:      (Only the PL/X section is extra.)\n--------\n\nIKJZT304:      (Only the PL/X section is extra.)\n--------\n\nIKJZT305:      (Only the PL/X section is extra.)\n--------\n\nIKJZT306:      (Only the PL/X section is extra.)\n--------\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IKJZT301": {"ttr": 13323, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x95\\x12/\\x00\\x95\\x15\\x1f\\x19I\\x00-\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1995-05-02T00:00:00", "modifydate": "1995-05-31T19:49:00", "lines": 45, "newlines": 40, "modlines": 0, "user": "SBGCSC"}, "text": "         MACRO\n         IKJZT301  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*        UPDATED                          31MAY95 SBG.\n*\n*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                                RECORD 1                             *\n*                                                                     *\n*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *\n*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *\n*        CONCERNING THE DATA SET.                                     *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nR1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET\n         AGO   .SKIP\n.NODSECT ANOP\nR1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET\n.SKIP    ANOP\nR1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW\nR1BCFLGS DS    B -            NOTICES FLAGS - NOT USED\nR1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               NOTICES DIRECTORY RECORD\nR1USPTRP DS    0A -           SAME AS R1USPTR BELOW\nR1USFLGS DS    B -            USER MAIL FLAGS - NOT USED\nR1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD\nR1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS\nR1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -\n*                               FROM MASTER SCHEDULER BASEA, BABCMAX\n*                                                                     *\nR1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =\n*                               ' SYS1.BRODCAST DATA SET '\nR1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS\n*                               A 1-DIGIT NUMBER\n         DS    CL1 -          RESERVED\nR1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD\nR1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE\n*                               TABLE\n         DS    CL76 -         RESERVED\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT302": {"ttr": 13325, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x12/\\x00\\x95\\x12/\\x13 \\x00+\\x00+\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-05-02T00:00:00", "modifydate": "1995-05-02T13:20:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "SBGCSC"}, "text": "         MACRO\n         IKJZT302  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        NOTICES DIRECTORY RECORD                     *\n*                                                                     *\n*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *\n*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *\n*        ASSOCIATED WITH EACH MSG. NUMBER.                            *\n*                                                                     *\n*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *\n*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *\n*              PREVIOUS TO CALLING THIS MACRO.                        *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCDIR    DSECT , -\n         AGO   .SKIP\n.NODSECT ANOP\nBCDIR    DS    0F\n.SKIP    ANOP\nBCDNENT  EQU   25             NUMBER OF ENTRIES\nBCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.\nBCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:\nBCDNOMSG EQU   BIT0\n*                               '1' = NO NOTICES MSG ASSIGNED\n*                                     TO THIS MSG NUMBER\n*                               '0' = NOTICES MSG FOR THIS NUMBER\n*                                     IS ASSIGNED\nBCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX\nBCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD\n         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES\n*                               IDENTICAL IN FORMAT TO 'BCDENTRY'\nBCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nBCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD\n*                               (ZERO IF LAST)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT303": {"ttr": 13327, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x12/\\x00\\x95\\x12/\\x13 \\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-05-02T00:00:00", "modifydate": "1995-05-02T13:20:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGCSC"}, "text": "         MACRO\n         IKJZT303   &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                         NOTICES MESSAGE RECORD                      *\n*                                                                     *\n*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *\n*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *\n*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *\n*                                           10/1/72     LEVEL=1       *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nBCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nBCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD\n.SKIP    ANOP\nBCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT\nBCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\n         DS    XL3 -          RESERVED\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT304": {"ttr": 13329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x12/\\x00\\x95\\x12/\\x13 \\x00&\\x00&\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-05-02T00:00:00", "modifydate": "1995-05-02T13:20:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "SBGCSC"}, "text": "         MACRO\n         IKJZT304  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT304       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                       USER MAIL DIRECTORY RECORD                    *\n*                                                                     *\n*        THE USER MAIL DIRECTORY RECORD (USDIR) IS A LOGICAL          *\n*        DIRECTORY RECORD IN THE SYS1.BRODCAST DATA SET.              *\n*        THE DIRECTORY CONTAINS USERIDS AND PTRS TO THE FIRST AND     *\n*        LAST MESSAGE FOR EACH USERID.                                *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSDIR    DSECT , -            USER MAIL DIRECTORY RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSDIR    DS    0F -           USER MAIL DIRECTORY RECORD\n.SKIP    ANOP\nUSDENTRY DS    0CL13 -        DIRECTORY ENTRY FOR 1 USERID\nUSDID    DS    CL7 -          USERID (LEFT JUSTIFIED, PADDED W/ BLANKS)\nUSDRBA   DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST\n*                               MESSAGE FOR THIS USERID (ZERO IF NONE)\nUSDEND   DS    AL3 -          RBA OF LAST MESSAGE FOR THIS USERID\n*                               (ZERO IF NONE)\n         DS    8CL13 -        RESERVE SPACE FOR 8 MORE DIRECTORY\n*                               ENTRIES IDENTICAL IN FORMAT TO THE\n*                               PRECEDING 'USDENTRY'\n         DS    XL8 -          RESERVED\nUSDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'\nUSDNEXT  DS    AL3 -          CHAIN PTR TO NEXT USER MAIL DIRECTORY\n*                               RECORD (ZERO IF LAST)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT305": {"ttr": 13331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x12/\\x00\\x95\\x12/\\x189\\x00\\x1c\\x00&\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-05-02T00:00:00", "modifydate": "1995-05-02T18:39:00", "lines": 28, "newlines": 38, "modlines": 0, "user": "SBGCSC"}, "text": "         MACRO\n         IKJZT305  &DSECT=YES\n* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.\n*\n*        IKJZT305       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                        USER MAIL MESSAGE RECORD                     *\n*                                                                     *\n*        THE USER MAIL MESSAGE RECORD (USMSG) IS A RECORD IN          *\n*        THE SYS1.BRODCAST DATA SET WHICH CONTAINS A MAIL MESSAGE     *\n*        INTENDED FOR A PARTICULAR USERID.                            *\n*                                           10/1/72    LEVEL=1        *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nUSMSG    DSECT , -            USER MAIL MESSAGE RECORD\n         AGO   .SKIP\n.NODSECT ANOP\nUSMSG    DS    0F -           USER MAIL MESSAGE RECORD\n.SKIP    ANOP\nUSMLNG   DS    FL1 -          LENGTH OF MAIL MSG TEXT\nUSMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)\nUSMNEXT  DS    AL3 -          CHAIN PTR TO NEXT MAIL MESSAGE RECORD\n*                               FOR THIS USERID (ZERO IF LAST)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJZT306": {"ttr": 13333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x11\\x00\\x95\\x12/\\x00\\x95\\x12/\\x083\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-05-02T00:00:00", "modifydate": "1995-05-02T08:33:11", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGCSC"}, "text": "         MACRO\n         IKJZT306  &DSECT=YES\n*        IKJZT306       RELEASE=OS/VS2.2  LEVEL=01\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                         SYS1.BRODCAST DATA SET                      *\n*                           FREE SEARCH RECORD                        *\n*                                                                     *\n*        THIS RECORD CONTAINS THE RBA FOR SEND TO USE AS A STARTING   *\n*        ADDRESS IN ITS SEARCH FOR A FREE RECORD                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         AIF   ('&DSECT' EQ 'NO').NODSECT\nFREESRCH DSECT , -            FREE SEARCH RECORD\n         AGO   .SKIP\n.NODSECT ANOP\n         DS    0F\nFREESRCH DS    0CL129         FREE SEARCH RECORD\n.SKIP    ANOP\n         DS    CL1            RESERVED\nFSEARCH  DS    CL3            RBA TO START FREE SEARCH AT\n         DS    CL125          RESERVED\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INCLUDE": {"ttr": 13335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01\\x04\\x18o\\x01\\x05\\x10\\x7f\\x00\\x11\\x00\\x02\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-07-04T00:00:00", "modifydate": "2005-04-17T00:11:34", "lines": 2, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "   INCLUDE OBJECT\n   SETSSI CB469247\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INCLUDEA": {"ttr": 13337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x04\\x18o\\x01\\x05\\x10\\x7f\\x00\\x11\\x00\\x03\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-07-04T00:00:00", "modifydate": "2005-04-17T00:11:47", "lines": 3, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "   INCLUDE OBJECT\n   SETCODE AC(1)\n   SETSSI CB469247\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISRZ00": {"ttr": 13339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00F\\x01\\x00\\x16\\x8f\\x01\\x00\\x16\\x8f\\x11B\\x00\\x10\\x00\\r\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-06-16T00:00:00", "modifydate": "2000-06-16T11:42:46", "lines": 16, "newlines": 13, "modlines": 0, "user": "WSBG"}, "text": "ISRZ000  '&ZEDSMSG                ' .ALARM = NO .HELP = ISR2MACR NOKANA\n'&ZEDLMSG'\nISRZ001  '&ZEDSMSG' .ALARM = YES .HELP = ISR2MACR NOKANA\n'&ZEDLMSG'\nISRZ002  '&ZERRSM' .ALARM = &ZERRALRM .HELP = &ZERRHM NOKANA\n'&ZERRLM'\nISRZ003  '&ZERRSM' .A=&ZERRALRM .H=&ZERRHM .T=&ZERRTP .W=&ZERRWN NOKANA\n'&ZERRLM'\nISRZ000W '&ZEDSMSG'  .ALARM = NO   .HELP = ISR2MACR  .WINDOW = NORESP\n'&ZEDLMSG'\nISRZ001W '&ZEDSMSG'  .ALARM = YES  .HELP = ISR2MACR  .WINDOW = NORESP\n'&ZEDLMSG'\n/* 5645-001, 5655-042 (C) COPYRIGHT IBM CORP 1980, 1996                       */\n/* MODIFIED BY SAM GOLOB 06/16/00 AS PER ADVICE OF JOHN KALINICH,             */\n/*  TO ADD ISRZ000W AND ISRZ001W MESSAGES TO THE IBM ONES.\n/*  THIS IS USED BY THE BCMTRAP REXX EXEC.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADLIB": {"ttr": 13569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x05\\x01\\x19\\x05\\x7f\\x01\\x19\\x05\\x7f\"#\\x04\\x9f\\x04\\x9f\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-02-26T00:00:00", "modifydate": "2019-02-26T22:23:05", "lines": 1183, "newlines": 1183, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LPSCB": {"ttr": 13834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x001\\x00\\x804_\\x01\\x17\\x07\\x8f\\x188\\x05)\\x01\\xcf\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1980-12-10T00:00:00", "modifydate": "2017-03-19T18:38:31", "lines": 1321, "newlines": 463, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE '   L P S C B     '\n************************************************************\n*        'LPSCB' OR 'LIST PROTECTED STEP CONTROL BLOCK'    *\n************************************************************\n         SPACE\n*\n*        THIS PROGRAM IS IN THE PUBLIC DOMAIN.\n*\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. OCTOBER 19 1979.\n*        DATE UPDATED. MAY 10, 1995   SAM GOLOB\n*                      NOV 28, 2016   SAM GOLOB\n*                      MAR 10, 2017   SAM GOLOB\n*        ATTRIBUTES. RE-ENTRANT.\n*        COMMENTS.\n*            THIS TSO COMMAND LISTS THE PSCB ON THE TERMINAL.\n*            THE COMMAND NEEDS UPDATING WHEN THE PSCB, ECT,\n*             AND UPT CHANGE.\n*        CHANGE LOG:\n*           JDM - JIM MARSHALL\n*           SBG - SAM GOLOB\n*\n*     JDM    02APR91 - ADDED DSECTS TO REPLACE HARDCODED OFFSETS JDM1\n*     SBG    09MAY95 - COMPLETED DISPLAY OF UPT, ADDED DISPLAY OF ECT.\n*                      ADDED KEYWORDS:  ECT, ALL.  FIXED ERROR\n*                      IN THE PROCESSING OF KEYWORD:  REAL.          .\n*     SBG    10MAY95 - LOOKED AT MVS/370 MACROS AND FOUND THAT THE\n*                      UPT IS SHORTER THERE.  CORRECTED CODING SO IT\n*                      CAN ASSEMBLE UNDER MVS/370 MACROS OR LATER.\n*                      ALSO PUT IN CONDITIONAL ASSEMBLY:  &SYSLVL.\n*                      IF YOU ARE NOT AT TSO/E VERSION 2, INVESTIGATE\n*                      THE UPT DISPLAY AT LABEL \"DOUPT\".\n*     SBG    23NOV16 - IKJECT MACRO ADDED A NEW FIELD UPTSWS2 IN\n*                      Z/OS 1.8.  IF ASSEMBLING ON A BACKLEVEL\n*                      SYSTEM (Z/OS 1.7 OR BELOW), UNCOMMENT THE\n*                      UPTSWS2 DEFINITION NEAR LABEL \"UNCOMENT\".\n*     SBG    23NOV16 - INTERPRET PSCBLTIM (LOGON DATE AND TIME)\n*                      USING THE TODCNVRT PROGRAM, WHICH NOW HAS\n*                      TO BE AVAILABLE TO THIS PROGRAM.  WE ASSEMBLE\n*                      AND LINKEDIT THEM TOGETHER.\n*     SBG    28NOV16 - LIST 8 HEX DIGIT ADDRESSES INSTEAD OF 6.\n*                      CHANGED AMODE TO 31. DIDN'T SEEM TO HURT.\n*     SBG    10MAR17 - FIXES FOR 8-CHARACTER USERIDS.\n*                      DEPENDS ON TSVT+6 BYTE. PROGRAM DEPENDS ON\n*                      TSVT NOW, WHICH IT DIDN'T DEPEND ON BEFORE.\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   14,HEX\n         MEND\n         SPACE\n         MACRO\n&NAME    MSGZ  &AREA,&LEN\n         LA    1,&AREA\n         LA    0,&LEN\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         GBLC  &SYSLVL\n&SYSLVL  SETC  'ESA'                 370 OR ESA ?\n*                                    SET ESA FOR TSO/E VERSION 2\n*                                    SET 370 FOR MVS/370.\n*   LOOK AT YOUR LEVEL OF IKJUPT TO SEE HOW MUCH CAN DISPLAY.\n*   SEE BELOW LABEL :    DOUPT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         PRINT ON,GEN                                            JDM1\nLPSCB    AMODE 31                                                JDM1\nLPSCB    RMODE 24                                                JDM1\nLPSCB    CSECT                                                   JDM1\n         USING *,R12,R10\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'LPSCB '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LA    R10,2048(,R12)\n         LA    R10,2048(,R10)\n         LR    R2,R1               PARM POINTER\n         USING CPPL,R2\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE\n         MVI   LINE-1,C' '\n         XC    LINKAREA(8),LINKAREA\n         L     R0,=V(TODCNVRT)     ENTRY PT OF TODCNVRT PROGRAM\n         ST    R0,ENTRY            SAVE ITS ENTRY POINT\n         SPACE\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n         SPACE 1\n************************************************************\n*        SET UP PPL FOR PARSE                              *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(MYPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R13,PPLUWA\n         DROP  R15\n         SPACE 1\n************************************************************\n*        CALL THE PARSE SERVICE ROUTINE                    *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPARS,X'80'       IF HI ORDER BIT NOT ON        JDM1\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,CVTPARS         CVTPARS                       JDM1\n         DROP  R15                                               JDM1\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK DS    0H\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT DS    0H\n         SPACE 1\n         LTR   R15,R15\n         BNZ   EXIT12\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         L     R4,CPPLPSCB\n         CLI   ALLKW+1,1           'ALL SPECIFIED'\n         BE    TESTTSVT\n         CLI   REALKW+1,2          'REAL' SPECIFIED\n         BNE   TESTTSVT            NO, BRANCH\n         L     R1,CVTPTR           YES, FIND PSCB VIA JSCB       JDM1\n         USING CVTMAP,R1           GET ADDRESSABILITY            JDM1\n         L     R1,CVTTCBP          POINT TO NEW TCB WORD         JDM1\n         L     R1,4(,R1)           POINT TO OLD TCB WORD         JDM1\n         DROP  R1                                                JDM1\n         USING TCB,R1              ADDRESSABILITY TO TCB         JDM1\n         L     R1,TCBJSCB          GET JSCB ADDRESS              JDM1\n         DROP  R1                                                JDM1\n         USING IEZJSCB,R1          GET ADDRESSABILITY            JDM1\n         L     R1,JSCBPSCB         GET JSCB ADDRESS              JDM1\n         DROP  R1                                                JDM1\n         LTR   R4,R1               IS THERE A PSCB\n         BZ    EXIT12              NO, BRANCH\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        TEST FOR PRESENCE OF 8-CHARACTER USERID SUPPORT            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTESTTSVT DS    0H                  TEACH PGM ABOUT 8-CHAR ID SUPPORT\n         ST    R6,SAVER6A          SAVE WORK REGISTER\n         XC    FLAG1,FLAG1         CLEAR FLAG\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n         L     R6,SAVER6A          RESTORE WORK REGISTER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   IF 8-CHARACTER USERID SUPPORT IS PRESENT, THEN SEND MESSAGE     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEIGHTCID DS    0H\n         CLI   FLAG1,X'00'         NO 8-CHARACTER SUPPORT\n         BE    EIGHTOUT            THEN GET OUT\n         TM    FLAG1,X'01'         SUPPORT IS PRESENT BUT NOT ON\n         BO    EIGHTOFF            THEN REPORT IT\n         TM    FLAG1,X'02'         SUPPORT IS PRESENT AND IS ON\n         BO    EIGHTON             THEN REPORT IT\n*                                  MSG IF 8-CHAR UID'S IN EFFECT\nEIGHTOFF DS    0H                       OFF\n         MVI   LINE-1,X'40'             BLANK MSG LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MSG04),MSG04      YES, BUT\n         BAL   R8,MSG                   SUPPORT IS TURNED OFF\n         B     EIGHTOUT\nEIGHTON  DS    0H                       ON\n         MVI   LINE-1,X'40'             BLANK MSG LINE\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MSG05),MSG05      YES, AND\n         BAL   R8,MSG                   SUPPORT IS TURNED ON\n         B     EIGHTOUT\nEIGHTOUT DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGOTPSCB  DS    0H                  FORMAT PSCB LAYOUT\n         USING PSCB,R4\n         MVC   LINE,LINE-1\n         ST    R4,ADDRESS\n         HEX   LINE,4,ADDRESS\n         MVC   LINE+9(L'MSG01),MSG01\n         MSGZ  LINE,L'MSG01+9\n         MVC   LINETXT,TEXTUSER\n         HEX   LINEX,7,PSCBUSER\n         MVC   LINEC(7),PSCBUSER\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTUSRL\n         HEX   LINEX,1,PSCBUSRL\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTGPNM\n         HEX   LINEX,8,PSCBGPNM\n         CLI   PSCBGPNM,0\n         BE    *+10\n         MVC   LINEC(8),PSCBGPNM\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTATR1\n         HEX   LINEX,2,PSCBATR1\n         LA    R15,LINEC\n         LA    R1,PSCBATR1\n         TM    0(R1),PSCBCTRL\n         BZ    *+14\n         MVC   0(4,R15),=C'OPER'\n         LA    R15,5(,R15)\n         TM    0(R1),PSCBACCT\n         BZ    *+14\n         MVC   0(4,R15),=C'ACCT'\n         LA    R15,5(,R15)\n         TM    0(R1),PSCBJCL\n         BZ    *+14\n         MVC   0(3,R15),=C'JCL'\n         LA    R15,4(,R15)\n         TM    0(R1),PSCBCNAU\n         BZ    *+14\n         MVC   0(4,R15),=C'CONS'\n         LA    R15,5(,R15)\n         TM    0(R1),PSCBVMNT                                    JDM1\n         BZ    *+14\n         MVC   0(5,R15),=C'MOUNT'\n         LA    R15,6(,R15)\n*        LA    R15,1(,R15)\n         TM    0(R1),PSCBATTN                                    JDM1\n         BZ    *+14\n         MVC   0(10,R15),=C'LINE(ATTN)'\n         LA    R15,11(,R15)\n         TM    0(R1),PSCBRCVR                                    JDM1\n         BZ    *+14\n         MVC   0(7,R15),=C'RECOVER'\n         LA    R15,8(,R15)\n         TM    0(R1),PSCBRRBA\n         BZ    *+14\n         MVC   0(4,R15),=C'RRBA'\n         LA    R15,5(,R15)\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTATR2\n         HEX   LINEX,2,PSCBATR2\n         BAL   R8,MSG\n         SPACE\n* ------------------------------------------------------------- *\n*     PSCBLTIM IS THE TIME OF LAST LOGON IN STCK FORMAT.        *\n*      (IMPOSSIBLE FOR NORMAL MORTALS TO FIGURE OUT.)           *\n* ------------------------------------------------------------- *\nTODFORMT DS    0H                      CONVERT 8-BYTE LOGON TIME\n*                                      TO SOMETHING READABLE.\n         MVI   TIMEFMT-1,X'40'         BLANK OUTPUT LINE\n         MVC   TIMEFMT,TIMEFMT-1\n         MVC   CLOCK(8),=XL8'00'\n         MVC   CLOCK(8),PSCBLTIM\n         L     R15,16                  CVT\n         L     R15,X'130'(,R15)        TIME ZONE OFFSET - CVTTZ\n         ST    R15,TIMEZONE            SAVE IT FOR TODCNVRT CALL\n         SPACE\n         MVI   ANSWER,C' '             CLEAR TODCNVRT ANSWER AREA\n         MVC   ANSWER+1(L'ANSWER-1),ANSWER\n*\n         MVI   OPTION,1\n*                  FIVE PARAMETERS  -  LOAD PARAM LIST FOR TODCNVRT\n         LA    R1,PARAM                POINT TO PARAM LIST AND LOAD IT\n         LA    R15,TIMEZONE\n         ST    R15,0(,R1)              TIME ZONE\n         LA    R15,CLOCK\n         ST    R15,4(,R1)              STCK VALUE\n         LA    R15,ANSWER\n         ST    R15,8(,R1)              ANSWER PLACE\n         LA    R15,=X'01'\n         ST    R15,12(,R1)             OPTION\n         LA    R15,WORKA\n         ST    R15,16(,R1)             ADDRESS OF WORK AREA\n*\n         L     R15,ENTRY               LOAD TODCNVRT ENTRY POINT\n         BALR  R14,R15                 CALL TODCNVRT AND THEN....\n*                                      FORMAT THE ANSWER FOR DISPLAY\n         MVC   TIMEFMT(4),ANSWER       FIX TIME SO IT IS READABLE\n         MVI   TIMEFMT+4,C'.'\n         MVC   TIMEFMT+5(3),ANSWER+4\n         MVC   TIMEFMT+10(15),ANSWER+7\n         MVI   TIMEFMT+12,C':'\n         MVC   LINETXT,TEXTLTIM        MOVE IN TEXT MESSAGE\n         HEX   LINEX,8,PSCBLTIM        PRINT TIME IS STCK FORMAT,\n         MVC   LINEX+17(25),TIMEFMT    THEN DISPLAY READABLE TIME.\n         BAL   R8,MSG\n* ---------------------------------------------------------------\n*                                      AND DISPLAY REST OF PSCB.\n         MVC   LINETXT,TEXTSUBH\n         HEX   LINEX,1,PSCBSUBH\n         MVC   LINEC(1),PSCBSUBH                                    #DD\n         OC    LINEC(1),BLANKS                                      #DD\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTSUBC\n         HEX   LINEX,1,PSCBSUBC\n         MVC   LINEC(1),PSCBSUBC                                    #DD\n         OC    LINEC(1),BLANKS                                      #DD\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTSUBM\n         HEX   LINEX,1,PSCBSUBM\n         MVC   LINEC(1),PSCBSUBM                                    #DD\n         OC    LINEC(1),BLANKS                                      #DD\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTSOUT\n         HEX   LINEX,1,PSCBSOUT\n         MVC   LINEC(1),PSCBSOUT                                    #DD\n         OC    LINEC(1),BLANKS                                      #DD\n         BAL   R8,MSG\n         SPACE\n         TM    FLAG1,X'03'\n         BZ    DONOT8D\n         MVC   LINETXT,TEXTU8L\n         HEX   LINEX,1,PSCB+X'20'\n         B     DOMSG8D\nDONOT8D  DS    0H\n         MVC   LINETXT,TEXTU8L\n         MVC   LINETXT+8,=C'RESERVED '\n         HEX   LINEX,1,PSCB+X'20'\n         MVC   LINEX+3(8),BLANKS\nDOMSG8D  DS    0H\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTDRBA\n         HEX   LINEX,3,PSCBDRBA\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRESR\n         HEX   LINEX,4,PSCBDRBA+3\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTDEST\n         HEX   LINEX,8,PSCBDEST\n         CLI   PSCBDEST,0\n         BE    *+10\n         MVC   LINEC(8),PSCBDEST\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRLGB\n         HEX   LINEX,4,PSCBRLGB\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTUPT\n         HEX   LINEX,4,PSCBUPT\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTUPTL\n         HEX   LINEX,2,PSCBUPTL\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTCHAR\n         HEX   LINEX,1,PSCBCHAR\n         MVC   LINEC(1),PSCBCHAR                                    #DD\n         OC    LINEC(1),BLANKS                                      #DD\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTLINE\n         HEX   LINEX,1,PSCBLINE\n         MVC   LINEC(1),PSCBLINE                                    #DD\n         OC    LINEC(1),BLANKS                                      #DD\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRSZ\n         HEX   LINEX,4,PSCBRSZ\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTU\n         HEX   LINEX,8,PSCBU\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTEXWD\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTEXK\n         HEX   LINEX,4,PSCBEXK\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTEXL\n         HEX   LINEX,4,PSCBEXL\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTEXD\n         HEX   LINEX,4,PSCBEXD\n         BAL   R8,MSG\n         SPACE\n         MVC   LINE,LINEB\n         TM    FLAG1,X'03'\n         BZ    DONOT8A\n         MVC   LINETXT,TEXTUIDN\n         HEX   LINEX,8,PSCB+X'54'\n         MVC   LINEC(8),PSCB+X'54'\n         OC    LINEC(8),BLANKS\n         B     DOMSG8A\nDONOT8A  DS    0H\n         MVC   LINETXT,TEXTUIDN\n         MVC   LINETXT+8,=C'RESERVED '\n         HEX   LINEX,8,PSCB+X'54'\nDOMSG8A  DS    0H\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTRSVD\n         HEX   LINEX,16,PSCB+X'5C'\n         BAL   R8,MSG\n         SPACE\n         CLI   UPTKW+1,1           'UPT' SPECIFIED\n         BNE   NOUPT               NO, BRANCH\nDOUPT    L     R5,CPPLUPT\n         ST    R5,UPTADDRC         UPT FROM CPPL\n         L     R5,PSCBUPT\n         ST    R5,UPTADDR          UPT FROM PSCB\n         HEX   LINE,4,UPTADDR\n         MVC   LINE+9(L'MSG02),MSG02\n         MSGZ  LINE,L'MSG02+9\n         HEX   LINE,4,UPTADDRC\n         MVC   LINE+9(L'MSG02A),MSG02A\n         MSGZ  LINE,L'MSG02A+9\n         USING UPT,R5\n         MVC   LINETXT,TEXTPUP1\n         HEX   LINEX,2,UPT\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTPUP2\n         HEX   LINEX,10,UPTUSER\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTPUP3\n         HEX   LINEX,1,UPTSWS\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTPUP4\n         HEX   LINEX,1,UPTCDEL\n         BAL   R8,MSG\n         SPACE\n         MVC   LINETXT,TEXTPUP5\n         HEX   LINEX,1,UPTLDEL\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTPUP6\n         HEX   LINEX,1,UPTLDEL+1    UPTVERS - CODED FOR MVS/370\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTPUP7\n         HEX   LINEX,7,UPTPREFX\n         MVC   LINEC(7),UPTPREFX\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTPUP8\n         HEX   LINEX,1,UPTPREFL\n         BAL   R8,MSG\n         AIF   ('&SYSLVL' EQ '370').UPT370\n*  NOTE - IMPORTANT - IF YOU ARE ASSEMBLING UNDER MVS/370 PLEASE\n*                     COMMENT OUT ALL 'UPT' STATEMENTS BELOW, TO\n*                     THE CORRESPONDING NOTE.  (ALL STATEMENTS BETWEEN)\n*    -  AT THAT LEVEL, THE UPT WAS SHORTER - - - - - - -    *\n*    OR SETC &SYSLVL TO '370' BEFORE ASSEMBLING. - - - -    *\n         MVC   LINETXT,TEXTPUP9\n         HEX   LINEX,3,UPTPLANG\n         MVC   LINEC(3),UPTPLANG\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTPU10\n         HEX   LINEX,3,UPTSLANG\n         MVC   LINEC(3),UPTSLANG\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTPU11\n         HEX   LINEX,2,UPTLNGFL\n         BAL   R8,MSG\nUNCOMENT DS    0H                  UNCOMMENT NEXT LINE ASSEMBLING\n*UPTSWS2  EQU   UPTLNGFL+2,1       ON Z/OS 1.7 AND BELOW.\n         MVC   LINETXT,TEXTPU12\n         HEX   LINEX,1,UPT+X'20'\n         BAL   R8,MSG\n* -------------------------------------- *\n*  UPTSWS2 DEFINED Z/OS 1.8 AND LATER    *\n*  BUT IF YOU ARE ASSEMBLING WITH        *\n*  AN EARLIER SYSTEM, YOU MAY GET        *\n*  AN ERROR, BECAUSE THE NAME UPTSWS2    *\n*  IS NOT DEFINED IN MACRO IKJUPT ON     *\n*  THOSE SYSTEMS. SO WE DEFINE IT HERE.  *\n* -------------------------------------- *\n         TM    FLAG1,X'03'\n         BZ    DONOT8B\n         MVC   LINETXT,TEXTPU13\n         HEX   LINEX,8,UPT+X'21'\n         MVC   LINEC(8),UPT+X'21'\n         OC    LINEC(8),BLANKS\n         B     DOMSG8B\nDONOT8B  DS    0H\n         MVC   LINETXT,TEXTPU13\n         MVC   LINETXT+8,=C'RESERVED '\n         HEX   LINEX,8,UPT+X'21'\nDOMSG8B  DS    0H\n         BAL   R8,MSG\n         TM    FLAG1,X'03'\n         BZ    DONOT8C\n         MVC   LINETXT,TEXTPU14\n         HEX   LINEX,1,UPT+X'29'\n         B     DOMSG8C\nDONOT8C  DS    0H\n         MVC   LINETXT,TEXTPU14\n         MVC   LINETXT+8,=C'RESERVED '\n         HEX   LINEX,1,UPT+X'29'\n         MVC   LINEX+3(8),BLANKS\nDOMSG8C  DS    0H\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTPU15\n         HEX   LINEX,14,UPT+X'2A'\n         BAL   R8,MSG\n*  NOTE - IMPORTANT - IF YOU ARE ASSEMBLING UNDER MVS/370 PLEASE\n*                     COMMENT OUT ALL UPT STATEMENTS ABOVE FROM\n*                     THE CORRESPONDING NOTE.  (ALL STATEMENTS BETWEEN)\n*    -  AT THAT LEVEL, THE UPT WAS SHORTER - - - - - - -    *\n.UPT370  ANOP\n         DROP  R5\n         CLI   ALLKW+1,1           'ALL SPECIFIED'\n         BE    DOECT               DON'T TEST FOR ECT PARAMETER\n         B     TRYECT\nNOUPT    CLI   ALLKW+1,1           'ALL SPECIFIED'\n         BE    DOUPT\nTRYECT   CLI   ECTKW+1,1           'ECT' SPECIFIED\n         BNE   NOECT               NO, BRANCH\nDOECT    L     R5,CPPLECT           GET ECT ADDRESS\n         ST    R5,ECTADDR           PUT IT AWAY FOR MSG\n         HEX   LINE,4,ECTADDR\n         MVC   LINE+9(L'MSG03),MSG03\n         MSGZ  LINE,L'MSG03+9\n         USING ECT,R5\n         MVC   LINETXT,TEXTECT1\n         HEX   LINEX,1,ECTRCDF\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT2\n         HEX   LINEX,3,ECTRTCD\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT3\n         HEX   LINEX,4,ECTIOWA\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT4\n         HEX   LINEX,1,ECTMSGF\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT5\n         HEX   LINEX,3,ECTSMSG\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT6\n         HEX   LINEX,8,ECTPCMD\n         MVC   LINEC(7),ECTPCMD\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT7\n         HEX   LINEX,8,ECTSCMD\n         MVC   LINEC(7),ECTSCMD\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT8\n         HEX   LINEX,1,ECTSWS\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTECT9\n         HEX   LINEX,3,ECTDDNUM\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC10\n         HEX   LINEX,4,ECTUSER\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC11\n         HEX   LINEX,4,ECTBKPB\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC12\n         HEX   LINEX,1,ECTSWS2\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC13\n         HEX   LINEX,1,ECTSWS22\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC14\n         HEX   LINEX,2,ECTSWS22+1\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC15\n         HEX   LINEX,4,ECTHELP\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC16\n         HEX   LINEX,4,ECTHELP+4      ECTENVBK - CODED HERE FOR MVS/370\n         BAL   R8,MSG\n         MVC   LINETXT,TEXTEC17\n         HEX   LINEX,4,ECTHELP+8      ECTEXTPR - CODED HERE FOR MVS/370\n         BAL   R8,MSG\nNOECT    B     EXIT0\n         SPACE\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\nMSG      LA    R1,LINE\n         LA    R0,72\n         BAL   R14,PUTLINE\n         MVC   LINE,LINE-1\n         BR    R8\n         SPACE\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n         SPACE 1\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\nEXITX    LR    R15,R2              RESTORE RETURN CODE\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         ST    R15,16(,R13)        STORE RETURN CODE FOR LM\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*        CONSTANTS                                         *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         DS    0F\nBLANKS   DC    C'                '\nMSG01    DC    C'PSCB ADDRESS'\nMSG02    DC    C'UPT FROM PSCB   '\nMSG02A   DC    C'UPT FROM CPPL   '\nMSG03    DC    C'ECT ADDRESS '\nMSG04    DC    C'8-CHARACTER USERID SUPPORT IS: OFF'\nMSG05    DC    C'8-CHARACTER USERID SUPPORT IS: ON '\nTEXTUSER DC    C'    +0  PSCBUSER'\nTEXTUSRL DC    C'    +7  PSCBUSRL'\nTEXTGPNM DC    C'    +8  PSCBGPNM'\nTEXTATR1 DC    C'   +10  PSCBATR1'\nTEXTATR2 DC    C'   +12  PSCBATR2'\nTEXTLTIM DC    C'   +14  PSCBLTIM'\nTEXTSUBH DC    C'   +1C  PSCBSUBH'\nTEXTSUBC DC    C'   +1D  PSCBSUBC'\nTEXTSUBM DC    C'   +1E  PSCBSUBM'\nTEXTSOUT DC    C'   +1F  PSCBSOUT'\nTEXTU8L  DC    C'   +20  PSCBU8L '\nTEXTDRBA DC    C'   +21  PSCBDRBA'\nTEXTRESR DC    C'   +24  RESERVED'\nTEXTDEST DC    C'   +28  PSCBDEST'\nTEXTRLGB DC    C'   +30  PSCBRLGB'\nTEXTUPT  DC    C'   +34  PSCBUPT '\nTEXTUPTL DC    C'   +38  PSCBUPTL'\nTEXTCHAR DC    C'   +3A  PSCBCHAR'\nTEXTLINE DC    C'   +3B  PSCBLINE'\nTEXTRSZ  DC    C'   +3C  PSCBRSZ '\nTEXTU    DC    C'   +40  PSCBU   '\nTEXTEXWD DC    C'   +48  PSCBEXWD'\nTEXTEXK  DC    C'   +48  PSCBEXK '\nTEXTEXL  DC    C'   +4C  PSCBEXL '\nTEXTEXD  DC    C'   +50  PSCBEXD '\nTEXTUIDN DC    C'   +54  PSCBUID8'\nTEXTRSVD DC    C'   +5C  RESERVED'\nTEXTPUP1 DC    C'    +0  UPTLEN  '\nTEXTPUP2 DC    C'    +2  UPTUSER '\nTEXTPUP3 DC    C'    +C  UPTSWS  '\nTEXTPUP4 DC    C'    +D  UPTCDEL '\nTEXTPUP5 DC    C'    +E  UPTLDEL '\nTEXTPUP6 DC    C'    +F  UPTVERS '\nTEXTPUP7 DC    C'   +10  UPTPREFX'\nTEXTPUP8 DC    C'   +17  UPTPREFL'\nTEXTPUP9 DC    C'   +18  UPTPLANG'\nTEXTPU10 DC    C'   +1B  UPTSLANG'\nTEXTPU11 DC    C'   +1E  UPTLNGFL'\nTEXTPU12 DC    C'   +20  UPTSWS2 '\nTEXTPU13 DC    C'   +21  UPTPREF8'\nTEXTPU14 DC    C'   +29  UPTPRF8L'\nTEXTPU15 DC    C'   +2A  RESERVED'\nTEXTECT1 DC    C'    +0  ECTRCDF '\nTEXTECT2 DC    C'    +1  ECTRTCD '\nTEXTECT3 DC    C'    +4  ECTIOWA '\nTEXTECT4 DC    C'    +8  ECTMSGF '\nTEXTECT5 DC    C'    +9  ECTSMSG '\nTEXTECT6 DC    C'    +C  ECTPCMD '\nTEXTECT7 DC    C'   +14  ECTSCMD '\nTEXTECT8 DC    C'   +1C  ECTSWS  '\nTEXTECT9 DC    C'   +1D  ECTDDNUM'\nTEXTEC10 DC    C'   +20  ECTUSER '\nTEXTEC11 DC    C'   +24  ECTBKPB '\nTEXTEC12 DC    C'   +28  ECTSWS2 '\nTEXTEC13 DC    C'   +29  ECTSWS22'\nTEXTEC14 DC    C'   +2A  RESERVED'\nTEXTEC15 DC    C'   +2C  ECTHELP '\nTEXTEC16 DC    C'   +30  ECTENVBK'\nTEXTEC17 DC    C'   +34  ECTEXTPR'\n         SPACE\n************************************************************\n*        PARSE PCL                                         *\n************************************************************\n         SPACE\n         PRINT GEN\nMYPCL    IKJPARM\nREALKW   IKJKEYWD\n         IKJNAME 'CPPL'\n         IKJNAME 'REAL'\nUPTKW    IKJKEYWD\n         IKJNAME 'UPT'\nECTKW    IKJKEYWD\n         IKJNAME 'ECT'\nALLKW    IKJKEYWD\n         IKJNAME 'ALL'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*        DSECTS                                            *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D                   DOUBLEWORD WORK AREA\nLINKAREA DS    2F\nADDRESS  DS    F\nUPTADDR  DS    F                   UPT FROM PSCB\nUPTADDRC DS    F                   UPT FROM CPPL\nECTADDR  DS    F\nSAVER6A  DS    F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nFLAG1    DS    X\n*                                  X'00' IF NO 8-CHAR UID SUPPORT\n*                                  X'01' IF 8-CHAR SUPPORT BUT NOT ON\n*                                  X'02' IF 8-CHAR SUPPORT IS ON\nLINEB    DS    C                   LINE-1\nLINE     DS    CL120\nLINETXT  EQU   LINE,16\nLINEX    EQU   LINE+17\nLINEC    EQU   LINE+34\nENTRY    DS    F                1  LOADED ENTRY POINT OF TODCNVRT\nPARAM    DS    5F               2  PARAMETER LIST FOR TODCNVRT PROGRAM\nCLOCK    DS    D                3  TARGET AREA OF STCK INSTRUCTION\nTIMEZONE DS    F                4  FILLED IN FROM CVTTZ\nANSWER   DS    CL64             5  ANSWER PLACE FOR TODCNVRT PROGRAM\n         DS    C\nTIMEFMT  DS    CL64                FORMAT FOR DATE AND TIME DISPLAY\nOPTION   DS    C\nWORKA    DS    10D\nPARMSAVE DS    F\n@DATAL   EQU   *-@DATA\n         SPACE 1                                                 JDM1\n         CVT   DSECT=YES,LIST=NO                                 JDM1\n         SPACE 1                                                 JDM1\n         PRINT ON,GEN\n         IKJTCB DSECT=YES,LIST=NO                                JDM1\n         SPACE 1                                                 JDM1\n         IKJPSCB\n         SPACE\n         IEZJSCB                                                 JDM1\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJUPT\n         SPACE\n         IKJECT\n         SPACE\n         PRINT OFF\n         YREGS\n         END\n         TITLE '   T O D C N V R T  '\n*---------------------------------------------------------------------*\n*                                                                     *\n*        'TODCNVRT'                                                   *\n*                                                                     *\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.    *\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.            *\n*        DATE WRITTEN. DECEMBER 7 1976.                               *\n*        DATE UPDATED. JANUARY 31 1977.                               *\n*        ATTRIBUTES. RE-ENTRANT.                                      *\n*                                                                     *\n*        DESCRIPTION.                                                 *\n*         THIS SUBPROGRAM CONVERTS THE RESULTS OF A                   *\n*         'STORE CLOCK' INSTRUCTION TO EBCDIC. THE LOGIC              *\n*         IS TAKEN STRAIGHT OUT OF MODULE 'AMDPRSEG' IN               *\n*         AMDPRDMP (5752-SC113), VS2 RELEASE 3.0                      *\n*         WITH A FEW MODIFICATIONS TO MAKE THE PASSING                *\n*         OF PARAMETERS MORE CONVENTIONAL.                            *\n*                                                                     *\n*            INPUT - LIST OF 5 ADDRESSES POINTED TO BY REG 1          *\n*                       1) PTR TO CVTTZ VALUE                         *\n*                       2) PTR TO 8-BYTE TOD CLOCK VALUE              *\n*                       3) PTR TO OUTPUT AREA                         *\n*                       4) PTR TO OPTION BYTE X'01' OR X'02'          *\n*                       5) PTR TO 80-BYTE WORKAREA                    *\n*                    REG 15 = ENTRY ADDRESS  REG 14 = RETURN ADDRES   *\n*                    REG 13 = 72 BYTE REGISTER SAVEAREA ADDRESS       *\n*                                                                     *\n*            OUTPUT - EBCDIC TIME IN OUTPUT AREA                      *\n*                     REG 15 = 4 IF INPUT CLOCK TIME ALL ZEROES       *\n*                     REG 15 = 0 ALL OTHER CASES.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nTODCNVRT CSECT\n         SAVE  (14,12),,&SYSDATE\n         LR    R12,15\n         USING TODCNVRT,R12\n         L     R1,16(,R1)              SAVEPTR\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R14,R13\n         LR    R13,R1\n         L     R1,24(,R14)             RESTORE R1\n         USING MYDSECT,R13\n         USING PARAMS,R1\n         SPACE 1\n         L     R7,TODPTR\n         MVC   CVRTAREA(8),0(R7)\n         SPACE\n*---------------------------------------------------------------------*\n*        CHANGE TOD TO LOCAL TIME\n*---------------------------------------------------------------------*\n         SPACE\n         L     R7,CVTTZPTR         GET ADDR OF TZ FIELD\n         L     R7,0(,R7)           R7 = TZ VALUE\n         L     R15,MINUS1\n         CLR   R7,R15              IS TZ = MINUS 1?\n         BNE   TZADD               NO - USE TZ FROM CALLER\n         L     R7,16               YES - USE TZ FROM CVT\n         L     R7,X'598'(,R7)      GET CVTTZ\nTZADD    DS    0H\n         AL    R7,CVRTAREA         ADD TZ TO FIRST WORD\n         ST    R7,CVRTAREA\n         SPACE\n         LM    R4,R5,CVRTAREA\n         SRDL  R4,12               REMOVE INSIGNIFICANT BITS\n         D     R4,SIXTYMIL         DIVIDE BY 60,000,000\n         SPACE\n         L     R7,OPTION\n         CLI   0(R7),2\n         BE    RELTVTME\n         B     FULLDATE\n         SPACE\n*---------------------------------------------------------------------*\n*        RELATIVE TIME CONVERSION -- THIS ROUTINE CONVERTS THE TOD\n*        VALUE TO RELATIVE SECONDS.MICROSECONDS FROM 0 A.M. OF THE\n*        CURRENT DAY REFLECTED BY THE TOD VALUE. THE CONVERTED TIME\n*        IS PLACED LEFT JUSTIFIED IN THE OUTPUT AREA IN THE FORM\n*        SSSSS.MMMMMM (EBCDIC).   UPON ENTRY TO THIS ROUTINE THE TOD\n*        VALUE HAS ALREADY BEEN CHANGED TO TOTAL MINUTES (IN R5) AND\n*        NUMBER OF MICROSECONDS INTO CURRENT MINUTE (IN R4).\n*---------------------------------------------------------------------*\n         SPACE\nRELTVTME DS    0H\n         L     R7,TODPTR\n         CLC   0(8,R7),=XL8'00'\n         BNE   RNOTZERO\n         L     R7,OUTAREA\n         MVI   12(R7),C' '\n         MVC   13(11,R7),12(R7)\n         MVC   0(12,R7),=C'00000.000000'\n         LA    R15,4\n         B     EXIT\n         SPACE\nRNOTZERO DS    0H\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NO. OF SECONDS INTO CURRENT MINUTE\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R15,R4\n         SLR   R14,R14\n         D     R14,MILLION\n         ST    R15,TIMELEFT\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NO. OF MICROSEC INTO CURRENT SECOND\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R4,R14              REMAINDER IN R4\n         SPACE\n         L     R2,OUTAREA\n         LA    R2,6(,R2)           OUT LOC FOR MICROSEC\n         SPACE\n*---------------------------------------------------------------------*\n*        CONVERT MICROSEC TO EBCDIC\n*---------------------------------------------------------------------*\n         SPACE\n         CVD   R4,CVRTAREA\n         UNPK  0(6,R2),CVRTAREA+4(4)\n         OI    5(R2),X'F0'\n         SPACE\n         L     R7,OUTAREA\n         MVI   5(R7),C'.'\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NO. OF SECONDS INTO CURRENT DAY\n*        AND CONVERT TO EBCDIC\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R14,R5              R4=((R5//1440)*60)+SECONDS\n         SRDA  R14,32\n         D     R14,=F'1440'\n         MH    R14,=H'60'\n         LA    R15,TIMELEFT\n         LA    R14,0(,R15)         ADD SECONDS\n         LR    R4,R14\n         SPACE\n         LR    R2,R7               POINT TO OUTPUT AREA\n         CVD   R4,CVRTAREA\n         UNPK  0(5,R2),CVRTAREA+5(3)  UNPACK SECONDS\n         OI    4(R2),X'F0'\n         SPACE\n         B     EXIT0\n         SPACE\n*---------------------------------------------------------------------*\n*        FULL DATE AND TIME CONVERSION -- THIS ROUTINE\n*        CONVERTS THE TOD VALUE TO YEAR, JULIAN DAY, HOURS\n*        MINUTES, SECONDS, AND MICROSECONDS. THE CONVERTED\n*        TIME IS PLACED LEFT-JUSTIFIED IN THE OUTPUT AREA\n*        IN THE FORM YYYYDDDHH.MM.SS.MMMMMM (EBCDIC). UPON\n*        ENTRY TO THIS ROUTINE, THE TOD VALUE HAS ALREADY\n*        BEEN CHANGED TO TOTAL MINUTES SINCE EPOCH (IN R5)\n*        AND NUMBER OF MICROSECS INTO CURRENT MINUTE (R4).\n*---------------------------------------------------------------------*\n         SPACE\nFULLDATE DS    0H\n         L     R7,TODPTR\n         CLC   0(8,R7),=XL8'00'\n         BNE   FNOTZERO\n         L     R7,OUTAREA\n         MVI   22(R7),C' '\n         MVI   23(R7),C' '\n         MVC   0(22,R7),=C'000000000.00.00.000000'\n         LA    R15,4\n         B     EXIT\n         SPACE\nFNOTZERO DS    0H\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NUMBER OF SECONDS (R4/1,000,000)\n*---------------------------------------------------------------------*\n         SPACE\n         LA    R7,TIMELEFT\n         LR    R15,R4\n         SLR   R14,R14\n         D     R14,MILLION\n         ST    R15,0(,R7)\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NO. OF MICROSECONDS (R4//1,000,000)\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R4,R14\n         SPACE\n*---------------------------------------------------------------------*\n*        CONVERT MICROSEC TO EBCDIC\n*---------------------------------------------------------------------*\n         SPACE\n         L     R7,OUTAREA\n         LA    R2,16(,R7)\n         SPACE\n         CVD   R4,CVRTAREA\n         UNPK  0(6,R2),CVRTAREA+4(4)\n         OI    5(R2),X'F0'\n         SPACE\n         MVI   15(R7),C'.'\n         SPACE\n*---------------------------------------------------------------------*\n*        CONVERT SECONDS TO EBCDIC\n*---------------------------------------------------------------------*\n         SPACE\n         L     R4,TIMELEFT\n         LA    R2,13(,R7)\n         SPACE\n         CVD   R4,CVRTAREA\n         UNPK  0(2,R2),CVRTAREA+6(2)\n         OI    1(R2),X'F0'\n         SPACE\n         MVI   12(R7),C'.'\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NO. OF MINUTES INTO CURRENT HOUR.\n*        R5 CONTAINS TOTAL NO. OF MINUTES FROM THE EPOCH.\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R15,R5\n         SLR   R14,R14\n         D     R14,=F'60'\n         ST    R15,TIMELEFT\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE MINUTES INTO CURRENT HOUR\n*        R4 = R5//60\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R4,R14\n         SPACE\n         LA    R2,10(,R7)\n         CVD   R4,CVRTAREA\n         UNPK  0(2,R2),CVRTAREA+6(2)\n         OI    1(R2),X'F0'\n         SPACE\n         MVI   9(R7),C'.'\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NO. OF HOURS INTO CURRENT DAY.\n*        TIMELEFT CONTAINS TOTAL NO. OF HOURS SINCE EPOCH.\n*---------------------------------------------------------------------*\n         SPACE\n         L     R5,TIMELEFT\n         LR    R15,R5\n         SLR   R14,R14\n         D     R14,=F'24'\n         ST    R15,TIMELEFT        TOTAL DAYS SINCE EPOCH\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE NO. OF HOURS INTO CURRENT DAY.\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R4,R14\n         SPACE\n         LA    R2,7(,R7)\n         CVD   R4,CVRTAREA\n         UNPK  0(2,R2),CVRTAREA+6(2)\n         OI    1(R2),X'F0'\n         SPACE\n*---------------------------------------------------------------------*\n*        CALCULATE THE CURRENT YEAR AND JULIAN DAY\n*        USING 'TIMELEFT' WHICH CONTAINS THE TOTAL NUMBER\n*        OF ELAPSED DAYS SINCE 1900. FIRST CHECK WHETHER\n*        THE TIME IS IN THE 1900 THRU 1903 ERA (I.E. LESS\n*        THAN 1460 ELAPSED DAYS). IF SO, THE TIME MUST BE\n*        HANDLED IN A SPECIAL WAY SINCE 1900 IS NOT A LEAP\n*        YEAR AND EACH YEAR IN THAT 4 YEAR SPAN THUS CON-\n*        TAINS 365 DAYS. IF THE ELAPSED TIME HOWEVER IS\n*        GREATER THAN 1459 DAYS, THEN EVERY 4 YEARS CON-\n*        TAIN 1461 DAYS RATHER THAN 1460 AND THE FIRST\n*        YEAR OF EACH GROUP IS A LEAP YEAR. THESE FOUR\n*        YEAR GROUPS ARE REFERRED TO AS LEAP YEAR GROUPS.\n*        THE YEAR AND THE DAY WHEN THE ELAPSED TIME FALLS\n*        INTO ONE OF THESE GROUPS MUST BE CALCULATED USING\n*        STANDARD FORMULAS DIFFERENT FROM THE FORMULAS\n*        USED WHEN THE TIME IS WITHIN 1900 TO 1903.\n*---------------------------------------------------------------------*\n         SPACE\n         L     R7,TIMELEFT\n         CH    R7,=H'1460'\n         BNL   POST1903\n         SPACE\nNOLEAPYR DS    0H\n         SPACE\n*---------------------------------------------------------------------*\n*        R3 = (TIMELEFT//365)+1   CURRENT DAY\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R14,R7\n         SRDA  R14,32\n         D     R14,=F'365'\n         AH    R14,=H'1'\n         LR    R3,R14\n         SPACE\n*---------------------------------------------------------------------*\n*        R6 = (TIMELEFT/365)     CURRENT YEAR\n*---------------------------------------------------------------------*\n         SPACE\n         AH    R15,=H'1900'\n         LR    R6,R15\n         B     DATECOM\n         SPACE\n*---------------------------------------------------------------------*\n*        THE TIME ELAPSED IS 1460 OR MORE DAYS.\n*        CALCULATE R5, THE RELATIVE LEAP YEAR GROUP SINCE\n*        1904, AND R4, THE NUMBER OF DAYS ELAPSED IN THE\n*        CURRENT LEAP YEAR GROUP. USE THESE VALUES IN THE\n*        FORMULAS.  IN THE FORMULA USED TO CALCULATE THE\n*        JULIAN DAY, THE EXPRESSION IN PARENTHESES IS THE\n*        NUMBER OF WHOLE DAYS THAT HAVE PAST IN THE\n*        CURRENT YEAR. BECAUSE THE CURRENT DAY HAS NOT YET\n*        ELAPSED, IT IS NOT INCLUDED IN THE RESULT PRO-\n*        DUCED BY THE EXPRESSION AND THEREFORE 1 MUST BE\n*        ADDED TO GET THE ACTUAL JULIAN DAY.\n*        WITHIN THE EXPRESSION THE FIRST TERM, R, MUST BE\n*        ADJUSTED BY 1 (I.E, L/731) IF THE TOTAL DAYS INTO\n*        THE LEAP YEAR GROUP IS GREATER THAN OR EQUAL TO\n*        2 YEARS, AND AGAIN BY 1 (I.E, L/1096) IF THE\n*        TOTAL DAYS IS EQUAL TO OR GREATER THAN 3 YEARS.\n*        THE AFFECT OF THIS IS THAT THE 2ND AND 3RD YEARS\n*        ARE FORCED TO 366 DAYS ONCE THE TOTAL DAYS INTO\n*        THE GROUP EXCEEDS EACH OF THESE YEARS. THIS IS\n*        NECESSARY BECAUSE A DIVISOR OF 366 IS USED.\n*        THE SECOND TERM (W * 4) YIELDS THE RELATIVE\n*        NUMBER OF YEARS SINCE 1904 UP TO AND INCLUDING\n*        THE LEAP YEAR IN THE CURRENT GROUP. THE THIRD\n*        TERM ( (L-1)/365 ) YIELDS THE RELATIVE YEAR\n*        WITHIN THE CURRENT LEAP YEAR GROUP. THUS IF THE\n*        CURRENT YEAR IS A LEAP YEAR THE RELATIVE YEAR IS\n*        ZERO AND THE THIRD TERM WILL RESULT IN ZERO.\n*---------------------------------------------------------------------*\n         SPACE\nPOST1903 DS    0H\nLEAPYR   DS    0H\n         SPACE\n*---------------------------------------------------------------------*\n*        TIMELEFT=TIMELEFT-1460  1904 BASE\n*---------------------------------------------------------------------*\n         SPACE\n         L     R7,TIMELEFT\n         SH    R7,=H'1460'\n         STH   R7,TIMELEFT\n         SPACE\n*---------------------------------------------------------------------*\n*        R5 = TIMELEFT/1461\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R14,R7\n         SRDA  R14,32\n         D     R14,=F'1461'\n         LR    R5,R15\n         SPACE\n*---------------------------------------------------------------------*\n*        R4 = TIMELEFT//1461\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R4,R14\n         SPACE\n*---------------------------------------------------------------------*\n*        R3 = ((L+L/731+L/1096)//336)+1  JULIAN DAY\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R15,R4\n         SLR   R14,R14\n         D     R14,=F'731'\n         LR    R14,R15\n         ALR   R14,R4\n         LR    R3,R14\n         LR    R15,R4\n         SLR   R14,R14\n         D     R14,=F'1096'\n         LR    R14,R15\n         ALR   R14,R3\n         SRDA  R14,32\n         D     R14,=F'366'\n         AH    R14,=H'1'\n         LR    R3,R14\n         SPACE\n*---------------------------------------------------------------------*\n*        R6 = 1904+(W*4)+(L-1)/365       YEAR\n*---------------------------------------------------------------------*\n         SPACE\n         LR    R6,R5\n         SLA   R6,2\n         AH    R6,=H'1904'\n         LR    R14,R4\n         BCTR  R14,0\n         SRDA  R14,32\n         D     R14,=F'365'\n         ALR   R6,R15\n         SPACE\nDATECOM  DS    0H\n         L     R7,OUTAREA\n         LA    R2,4(,R7)\n         CVD   R3,CVRTAREA\n         UNPK  0(3,R2),CVRTAREA+6(2)\n         OI    2(R2),X'F0'\n         SPACE\n         LA    R2,0(,R7)\n         CVD   R6,CVRTAREA\n         UNPK  0(4,R2),CVRTAREA+5(3)\n         OI    3(R2),X'F0'\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     13,4(,13)\n         ST    15,16(,13)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n*---------------------------------------------------------------------*\n*        CONSTANTS\n*---------------------------------------------------------------------*\n         SPACE\nMILLION  DC    F'1000000'\nSIXTYMIL DC    F'60000000'\nMINUS1   DC    F'-1'\n         LTORG\n         SPACE\n*---------------------------------------------------------------------*\n*        DSECTS\n*---------------------------------------------------------------------*\n         SPACE\nMYDSECT  DSECT\nTIMELEFT DS    0F                  1ST FULLWORD OF SAVEAREA\n         DS    18F                 REGISTER SAVEAREA\nCVRTAREA DS    D\nMYDSECTL EQU   *-MYDSECT\n         SPACE\nPARAMS   DSECT\nCVTTZPTR DS    A                   ADDR OF CVTTZ VALUE\nTODPTR   DS    A                   ADDR OF TOD CLOCK VALUE\nOUTAREA  DS    A                   ADDR OF OUTPUT AREA\nOPTION   DS    A                   ADDR OF OPTION BYTE\nSAVEPTR  DS    A                   ADDR OF SAVEAREA\n         SPACE\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LPSCB$": {"ttr": 14593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00W\\x00\\x91\\x12?\\x01\\x17\\x11_\\x12\\t\\x00\\x1d\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1991-05-03T00:00:00", "modifydate": "2017-04-25T12:09:57", "lines": 29, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,BATCH,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE247(LPSCB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   LPSCB\n SETCODE AC(0)\n SETSSI  CB495247\n NAME    LPSCB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPSCB#": {"ttr": 14595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x811?\\x01\\x05\\x10\\x9f\\x11\\x00\\x00\\x11\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1981-11-09T00:00:00", "modifydate": "2005-04-19T11:00:00", "lines": 17, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n  THE LPSCB (LIST PSCB) COMMAND LISTS THE PROTECTED STEP\n  CONTROL BLOCK (PSCB) IN A TSO USER'S REGION.\n  IT OPTIONALLY LISTS THE USER PROFILE TABLE (UPT),\n    AND ALSO THE ECT.\n\n)X SYNTAX  -\n         LPSCB  CPPL/REAL UPT  ALL\n  REQUIRED - NONE\n  DEFAULTS - CPPL\n  ALIAS    - NONE\n\n)O OPERANDS -\n))CPPL      -  THE PSCB ADDRESS IN THE CPPL WILL BE USED.\n))REAL      -  THE PSCB ADDRESS IN THE JSCB WILL BE USED.\n))UPT       -  LISTS THE USER PROFILE TABLE TOO.\n))ALL       -  LISTS THE PSCB, THE UPT, AND THE ECT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACROS": {"ttr": 14597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x87\\x00/\\x00\\x91\\x07\\x7f\\x08\\t\\n\\x14\\x05O\\x00\\x00\\xc1\\xe2\\xd7\\xc5\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1987-01-02T00:00:00", "modifydate": "1991-03-18T08:09:00", "lines": 2580, "newlines": 1359, "modlines": 0, "user": "ASPEJDM"}, "text": "./       ADD NAME=###DOC\n         MACRO\n         ###DOC\n.*------------------------------------------------------------------*\n.*       THIS MEMBER IS NOT REALLY A MACRO BUT A DOCUMENTATION      *\n.*       MEMBER FOR THE MACRO MEMBER. THE REASON WHY I HAVE         *\n.*       CHANGED THE './ ADD' CARDS TO '>< ADD' IS SO I CAN         *\n.*       GENERATE MICROFICHE.  YOU NEED TO DO A MASS CHANGE OF      *\n.*       '><' TO './'                                               *\n.*                                                                  *\n.*       JIM MARSHALL, CAPT, USAF (RET)                             *\n.*------------------------------------------------------------------*\n         MEND\n./ ADD NAME=$#SVCKP\n         MACRO\n&NAME    $#SVCKP\n         PRINT OFF\n.*------------------------------------------------------------------*\n.*                                                                  *\n.*       THIS MACRO REPRESENTS A SNEAKY WAY TO GET OUT OF           *\n.*       SUPERVISOR STATE AND KEY=0. YOU SOMETIMES NEED THIS        *\n.*       CAPABILITY IN SYSTEM PROGRAMMER TYPE FUNCTIONS. ONE        *\n.*       MUST BE VERY CAREFUL TO ENSURE A USER DOES NOT LEARN       *\n.*       OF THIS CAPABILITY (VIOLATES SECURITY). I CODED THIS       *\n.*       MACRO SO WHEN WE HAVE SOURCE CODE, WE CAN CODE THIS        *\n.*       MACRO AND NOT IMBED THE SENSITIVE CODE IN ALOT OF          *\n.*       DIFFERENT PLACES.                                          *\n.*                                                                  *\n.*                                                                  *\n.*------------------------------------------------------------------*\n&NAME    L     R0,=C'ZZLQ'         SETUP R0\n         L     R1,=F'0'            SETUP R1\n         SVC   255                 GO DO IT\n         PRINT ON\n         MEND\n./ ADD NAME=$#SVCKS\n         MACRO\n&NAME    $#SVCKS\n         PRINT OFF\n.*------------------------------------------------------------------*\n.*                                                                  *\n.*       THIS MACRO REPRESENTS A SNEAKY WAY TO GET YOURSELF INTO    *\n.*       SUPERVISOR STATE AND KEY=0. YOU SOMETIMES NEED THIS        *\n.*       CAPABILITY IN SYSTEM PROGRAMMER TYPE FUNCTIONS. ONE        *\n.*       MUST BE VERY CAREFUL TO ENSURE A USER DOES NOT LEARN       *\n.*       OF THIS CAPABILITY (VIOLATES SECURITY). I CODED THIS       *\n.*       MACRO SO WHEN WE HAVE SOURCE CODE, WE CAN CODE THIS        *\n.*       MACRO AND NOT IMBED THE SENSITIVE CODE IN ALOT OF          *\n.*       DIFFERENT PLACES.                                          *\n.*                                                                  *\n.*       JIM MARSHALL, CAPT, USAF                                   *\n.*                                                                  *\n.*------------------------------------------------------------------*\n&NAME    L     R0,=C'ZZLQ'         SETUP R0\n         L     R1,=F'1'            SETUP R1\n         SVC   255                 GO DO IT\n         PRINT ON\n         MEND\n./ ADD NAME=$EPILOG\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n./ ADD NAME=$PROLOG\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n./ ADD NAME=CONVERT\n         MACRO\n&NAME    CONVERT &EVENREG,&DIGITS,&DBLWD,&TYPE=DEC\n.*\n.*  THIS MACRO WILL PERFORM HEX TO HEX CHARACTER OR DECIMAL\n.*  CHARACTER CONVERSIONS.  IT USES AN EVEN-ODD PAIR OF REGS\n.*  AND A DOUBLE WORD OF STORAGE TO DO ITS CALCULATIONS.\n.*\n         GBLC  &CONV\n         GBLC  &P\n         LCLA  &N\n         LCLA  &ODDREG\n         LCLA  &LCLDIGS\n&N       SETA  0\n&ODDREG  SETA  &EVENREG+1\n&LCLDIGS SETA  &DIGITS\n         AIF   (T'&EVENREG NE 'N').ERR1\n         AIF   (T'&DIGITS NE 'N').ERR2\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    EQU   *\n.NONAME  ANOP\n         AIF   ('&TYPE' NE 'DEC').NODEC\n         AIF   (&DIGITS GT 5).ERR4\n         CVD   &EVENREG,&DBLWD\n         UNPK  &DBLWD.(&DIGITS.),&DBLWD+5(3)\n         OI    &DBLWD+&DIGITS-1,X'F0'\n         MEXIT\n.NODEC   ANOP\n         AIF   (&DIGITS GT 4).ERR3\n&CONV    SETC  'YES'   SO CPDATA KNOWS A HEX CONVERT WAS ISSUED\n         AIF   (&LCLDIGS EQ 0).DONE\n         SRDL  &EVENREG,4\n         SRL   &ODDREG,4\n&LCLDIGS SETA  &LCLDIGS-1\n         AGOB  .NODEC\n.DONE    ANOP\n         ST    &ODDREG,&DBLWD\n         TR    &DBLWD.(&DIGITS.),&P.CHARS\n         MEXIT\n.ERR1    ANOP\n         MNOTE 8,'FIRST OPERAND NOT NUMERIC'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 8,'SECOND OPERAND NOT NUMERIC'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 8,'SECOND OPERAND > 4 ON HEX CONVERT'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 8,'SECOND OPERAND > 5 ON DEC CONVERT'\n         MEND\n./ ADD NAME=CPDATA\n         MACRO\n         CPDATA &LIST=YES\n         GBLC  &GIOPL\n         GBLC  &DAIRFL\n         GBLC  &GPCL\n         GBLC  &GDYN\n         GBLC  &P\n         GBLC  &GNRLF\n         GBLC  &CONV\n         PUSH  PRINT\n         PRINT GEN\n         AIF   ('&CONV' EQ '').NOCONV\n&P.CHARS DC    C'0123456789ABCDEF'\n.NOCONV  ANOP\n         AIF   ('&GPCL' EQ 'NONE').NOPCLDC\n&P.PCLAD DC    A(&GPCL)\n.NOPCLDC ANOP\n&P.DATA  DSECT ,              DYNAMIC STORAGE AREA\n&P.SAVE  DS    18F            SAVE AREA\n&P.ECB   DS    F              COMMAND PROCESSOR ECB\n         AIF   ('&LIST' EQ 'YES').LST1\n         PRINT NOGEN\n.LST1    ANOP\n         IKJCPPL\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT\n         AIF   ('&GIOPL' EQ 'NO').NOIOPL\n         IKJIOPL\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT\n         PRINT GEN\n&P.IOPL  DS    4A             INPUT/OUTPUT PARAM LIST\n.NOIOPL  ANOP\n         AIF   ('&GPCL' EQ 'NONE').NOPCL\n         AIF   ('&LIST' EQ 'NO').NLST2\n         PRINT GEN\n         AGO   .LST2\n.NLST2  ANOP\n         PRINT NOGEN\n.LST2    ANOP\n         IKJPPL\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT\n         PRINT GEN\n&P.PPL   DS    7A             PARSE PARAM LIST\n&P.ANS   DS    F              POINTER TO PDL (ANSWER PLACE)\n.NOPCL   ANOP\n         AIF   ('&GDYN' EQ 'NO').NODYN\n         AIF   ('&LIST' EQ 'NO').NLST3\n         PRINT GEN\n         AGO   .LST3\n.NLST3  ANOP\n         PRINT NOGEN\n.LST3    ANOP\n         IEFZB4D0\n         IEFZB4D2\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT\n         PRINT GEN\n&P.RBPTR DS    F              DYN ALLOC RB POINTER\n&P.RB    DS    5F             DYN ALLOC REQUEST BLOCK\n.NODYN   ANOP\n         AIF   ('&GNRLF' EQ '').NOGNRLF\n         AIF   ('&LIST' EQ 'NO').NLST4\n         PRINT GEN\n         AGO   .LST4\n.NLST4   ANOP\n         PRINT NOGEN\n.LST4    ANOP\n         IKJEFFGF GFDSECT=YES\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT\n         PRINT GEN\n&P.GNRLF DS    F              PTR TO GNRLFAIL CONTROL BLOCK\n         DS    3F             GNRLFAIL CONTROL BLOCK\n         DS    H\n         DS    2X\n         DS    2F\n         DS    2H\n         DS    4F\n.NOGNRLF ANOP\n         AIF   ('&DAIRFL' EQ '').NODF\n         AIF   ('&LIST' EQ 'NO').NLST5\n         PRINT GEN\n         AGO   .LST5\n.NLST5   ANOP\n         PRINT NOGEN\n.LST5    ANOP\n         IKJEFFDF DFDSECT=YES\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT\n         PRINT GEN\n&P.DFPL  DS    5A             DAIRFAIL PARAMETER LIST\n&P.DFRC  DS    F              SERVICE ROUTINE RETURN CODE\n&P.DFID  DS    H              DAIRFAIL ID\n&P.FO2PT DS    F              DAIRFAIL IKJEFF02 POINTER\n.NODF    ANOP\n         MNOTE *,'       CVT    DSECT=YES,LIST=NO'\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         POP   PRINT\n&P.DATA  DSECT ,              RESUME ORIGINAL DSECT\n         MEND\n./ ADD NAME=CPEND\n         MACRO\n         CPEND\n         GBLC  &P\n&P.LEN   EQU   *-&P.DATA\n         MEND\n./ ADD NAME=CPENTER\n         MACRO\n&CPNAME  CPENTER &PARM=11,        PARAMETER REGISTER                   X\n               &BASE=12,          PROGRAM BASE REGISTER                X\n               &WORKID=CPWORK,    NAME OF COMMAND PROCESSOR WORKAREA   X\n               &SP=0,             SUBPOOL FOR WORKAREA                 X\n               &WRKLN=72+32,      LENGTH OF WORKAREA                   X\n               &EXIT=EXIT,        ADDR. OF EXIT                        X\n               &PCL=PCL           NAME OF PARSE CONTROL LIST\n&CPNAME  RENTER PARM=&PARM,BASE=&BASE,WORKID=&WORKID,SP=&SP,           X\n               WRKLN=&WRKLN,PRMSECT=PARMS\n         SPACE 5\n         MNOTE *,'**** R&PARM POINTS TO PARM LIST'\n         MNOTE *,'**** R&BASE IS THE PROGRAM BASE'\n         MNOTE *,'**** R13 POINTS TO THE WORKAREA'\n         EJECT\n*****\n*****    INITILIZE PPL\n*****\n         SPACE 5\n         LM    2,5,CPPLCBUF       GET PARMS\n         ST    2,PPLCBUF          STORE\n         ST    3,PPLUPT           STORE\n         LA    4,WORKECB          GET ECB ADDR.\n         ST    5,PPLECT           STORE ECT ADDR.\n         ST    4,PPLECB           STORE ECB ADDR\n         SR    5,5                GET A ZERO\n         ST    5,WORKECB          SET ZERO ECB\n         L     4,=V(&PCL)         ADDR. OF PARM\n         ST    4,PPLPCL           STORE IN PARM LIST\n         LA    4,PPLANS           GET ADDR. OF ANSWER PLACE\n         ST    4,PPLANSP          STORE IN PARM LIST\n         EJECT\n*****\n*****    NOW INVOKE PARSE FOR PARAMETERS\n*****\n         SPACE 5\n         LA    1,PPLUPT           GET ADDR. OF PARM LIST\n         LINK  EP=IKJPARS         LINK TO PARSE ROUTINE\n         LTR   15,15              BAD RETURN\n         BE    CONTINUE           NO ... CONTINUE PROCESSING\n&EXIT    REXIT RC=(15)            RETURN\n         EJECT\nPARMS    DSECT\nCPPLCBUF DS    A                  ADDR. OF COMMAND BUFFER\nCPPLUPT  DS    A                  ADDR. USER PROFILE TABLE\nCPPLPSCB DS    A                  ADDR. OF ECB\nCPPLECT  DS    A                  ADDR. OF ECT\n         SPACE 5\n&WORKID  DSECT\n         DS    18F                SAVEAREA\nPPLUPT   DS    A                  ADDR. OF UPT\nPPLECT   DS    A                  ADDR. OF ECT\nPPLECB   DS    A                  ADDR. OF ECB\nPPLPCL   DS    A                  ADDR. OF PCL\nPPLANSP  DC    A(PPLANS)\nPPLCBUF  DS    A                  ADDR. OF COMMAND BUFFER\nPPLUWA   DS    A                  ADDR. OF USER WORKAREA\nPPLANS   DS    A                  ADDR. OF ANSWER PLACE\nWORKECB  DS    A                  ECB\n&CPNAME  CSECT ,                  RENTER PROGRAM CSECT\nCONTINUE DS    0H                 CONTINUE WITH CP\n         MEND\n./ ADD NAME=CPENTRY\n         MACRO\n&L       CPENTRY   &ID=*,&STORAGE=@STORAGE,&SIZE=@SIZE,&SPN=,          +\n               &PLBASE=R9,&PL=CPPL\n.* GENE CZARCINSKI,  19MAY73\n&L       START     0\n         REGS\n         SAVE      (14,12),,&ID\n         LR        R12,R15             INIT PGM BASE REG\n         USING     &L,R12\n         LR        &PLBASE,R1          INIT PARM LIST BASE REG\n         USING     &PL,&PLBASE\n         GETMAIN   R,LV=72+&SIZE,SP=&SPN\n         ST        R13,4(R1)           INIT/LINK SAVE AREAS\n         ST        R1,8(R13)\n         LR        R13,R1\n         LA        R11,72(R1)          INIT STORAGE BASE REG\n         USING     &STORAGE,R11\n         MEND      CPENTRY\n./ ADD NAME=CPEXIT\n         MACRO\n&L       CPEXIT    &SIZE=@SIZE,&RC=0,&SPN=\n.* GENE CZARCINSKI,  19MAY73\n** EXIT FROM A COMMAND PROCESSOR MODULE\n&L       LR        R1,R13              A(GOTTEN CORE)\n         L         R13,4(R13)          RESTORE OLD SAVEAREA PNTR\n         FREEMAIN  R,LV=72+&SIZE,A=(1),SP=&SPN\n         LA        R15,&RC             LOAD RC INTO REG 15\n         RETURN    (14,12),T,RC=(15)\n         MEND      CPEXIT\n./ ADD NAME=CPINIT\n         MACRO\n&NAME    CPINIT &IOPL=NO,&PCL=NONE,&DYN=NO,&PREFIX=IPG\n         GBLC  &GIOPL\n         GBLC  &GPCL\n         GBLC  &GDYN\n         GBLC  &P\n         LCLA  &A\n.*   CHECK THE VALIDITY OF THE PREFIX (MUST BE <= 3 CHARS)\n         AIF   (K'&PREFIX LE 3).PFXOK\n         MNOTE 8,'PREFIX > 3 CHARS, SHORTENED'\n&P       SETC  '&PREFIX'(1,3)\n         AGO   .PFXEND\n.PFXOK   ANOP\n&P       SETC  '&PREFIX'\n.PFXEND  ANOP\n&GIOPL   SETC  '&IOPL'\n&GPCL    SETC  '&PCL'\n&GDYN    SETC  '&DYN'\n&NAME    CSECT\n.*   GENERATE REG EQUATES\n&A       SETA  0\n.LOOP    ANOP\nR&A      EQU   &A\n&A       SETA  &A+1\n         AIF   (&A LT 16).LOOP\n.*   GENERATE THE INITIALIZATION CODE\n         MNOTE *,'       SAVE  (14,12),,*'\n         SAVE  (14,12),,*\n         LR    R10,R15        INITIALIZE BASE REG\n         USING &NAME,R10      ESTABLISH ADDRESSIBILITY\n         MNOTE *,'       GETMAIN R,LV=&P.LEN,SP=0'\n         GETMAIN R,LV=&P.LEN,SP=0\n         ST    R13,4(R1)     SAVE THE BACK CHAIN\n         ST    R1,8(R13)\n         LR    R13,R1         R13 => DYNAMIC STORAGE\n         USING &P.DATA,R13\n******************************************\n*  INITIALIZE THE CONTROL BLOCKS         *\n******************************************\n         L     R1,4(R13)\n         L     R1,24(R1)      R1 => CPPL\n         USING CPPL,R1\n         AIF   ('&IOPL' EQ 'NO').NOIOPL\n*  FILL IN THE UPT, ECT, AND ECB FIELDS OF THE IOPL\n.*   AND LEAVE THE POINTER TO THE PARM BLOCK EMPTY\n         MVC   &P.IOPL+(IOPLUPT-IOPL)(4),CPPLUPT\n         MVC   &P.IOPL+(IOPLECT-IOPL)(4),CPPLECT\n         XC    &P.ECB(4),&P.ECB   ZERO THE ECB\n         LA    R2,&P.ECB\n         ST    R2,&P.IOPL+(IOPLECB-IOPL)\n.NOIOPL  ANOP\n         AIF   ('&PCL' EQ 'NONE').NOPCL\n*  FILL IN ALL THE FIELDS OF THE PARSE PARAMETER LIST (PPL)\n         MVC   &P.PPL+(PPLUPT-PPL)(4),CPPLUPT\n         MVC   &P.PPL+(PPLECT-PPL)(4),CPPLECT\n         LA    R2,&P.ECB\n         ST    R2,&P.PPL+(PPLECB-PPL)\n         L     R2,&P.PCLAD\n         ST    R2,&P.PPL+(PPLPCL-PPL)\n         LA    R2,&P.ANS\n         ST    R2,&P.PPL+(PPLANS-PPL)\n         MVC   &P.PPL+(PPLCBUF-PPL),CPPLCBUF\n         XC    &P.PPL+(PPLUWA-PPL),&P.PPL+(PPLUWA-PPL)\n.NOPCL   ANOP\n         AIF   ('&DYN' EQ 'NO').NODYN\n*  FILL IN THE DYNAMIC ALLOCATION REQUEST BLOCK POINTER\n         LA    R2,&P.RB\n         ST    R2,&P.RBPTR\n         OI    &P.RBPTR,S99RBPND\n.NODYN   ANOP\n         DROP  R1\n         EJECT\n         MEND\n./ ADD NAME=CVDT\n         MACRO\n&L       CVDT  &O\n.*\n&L       XR    R15,R15\n         IC    R15,DS1&O\n         CVD   R15,DWD\n         ICM   R14,B'0011',DWD+L'DWD-2\n         ICM   R15,B'0011',DS1&O+1\n         CVD   R15,DWD\n         SRL   R14,4\n         STC   R14,DWD+5\n         ED    FMT&O,DWD+5\n         SPACE\n.*\n         MEND\n./ ADD NAME=CVRT\n         MACRO\n&L       CVRT  &O,&ADD=0,&OFFSET=0\n.*\n&L       XR    R15,R15\n         LA    R1,1\n         SLA   R1,(L'DS1&O-&OFFSET)\n         BCTR  R1,0\n         EX    R1,*+L'*+4\n         B     *+L'*+4\n         ICM   R15,*-*,DS1&O+&OFFSET\n.*\n         AIF   (&ADD EQ 0).CVD\n.*\n         LA    R15,&ADD.(R15)\n.*\n.CVD     ANOP\n.*\n         CVD   R15,DWD\n         ED    FMT&O,DWD+8-((L'FMT&O+1)/2)\n         SPACE\n.*\n         MEND\n./ ADD NAME=DA08BLD\n         MACRO\n&L     DA08BLD &DSN,&VOLID,&DISP=(SHR,KEEP,KEEP)\n.*\n.*   DAO8BLD IS USED TO COMPLETE A CODE 08 DAPB FROM PDE'S\n.*   RETURNED FROM IKJPARS FOR DSNAME, VOLUME SERIAL, AND\n.*   ALLOCATION DATA (NOT YET SUPPORTED).\n.*   DA08BLD ASSUMES THE ADDRESSABILITY OF THE DAPB VIA THE\n.*   FIELD NAMES DEFINED BY THE IKJDAP08 MACRO.\n.*\n*\n&L       L     R1,&DSN+0\n         L     R15,DA08PDSN\n         LH    R14,&DSN+4\n         STH   R14,0(R15)\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   2(*-*,R15),0(R1)\n         NI    DA08CTL,X'FF'-DA08UID\n         TM    &DSN+6,B'01000000'\n         BNZ   *+L'*+4\n         OI    DA08CTL,DA08UID\n         SPACE\n         TM    &DSN+14,B'10000000'\n         BZ    *+L'*+4+4+2+4+4+6\n         LH    R14,&DSN+12\n         L     R1,&DSN+8\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   DA08MNM(*-*),0(R1)\n         SPACE\n         TM    &DSN+22,B'10000000'\n         BZ    *+L'*+4+4+2+4+4+6\n         LH    R14,&DSN+20\n         L     R1,&DSN+16\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   DA08PSWD(*-*),0(R1)\n         SPACE\n         MVI   DA08DSP1,DA08&DISP(1)\n         MVI   DA08DPS2,DA08&DISP(2)\n         MVI   DA08DPS3,DA08&DISP(3)\n         SPACE\n.VOLID   AIF   (T'&VOLID EQ 'O').NEW\n.*\n         TM    &VOLID+6,B'10000000'\n         BZ    *+L'*+4+4+4+4+2+4+4+6\n         L     R1,&VOLID+0\n         LH    R14,&VOLID+4\n         CLI   0(R1),C'*'\n         BE    *+L'*+2+4+4+6\n         BCTR  R14,0\n         EX    R14,*+L'*+4\n         B     *+L'*+6\n         MVC   DA08SER(*-*),0(R1)\n         SPACE\n.*\n.NEW     AIF   (('&DISP(1)' NE 'NEW') AND ('&DISP(1)' NE 'MOD')).END\n.*       MNOTE 4,'DA08BLD - DISP=NEW NOT YET SUPPORTED'\n.END     MEND\n./ ADD NAME=DCS\n         MACRO\n&NAME    DCS\n.**********************************************************************\n.*                                                                    *\n.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *\n.*                                                                    *\n.*        WRITTEN BY BILL GODFREY                                     *\n.*        PLANNING RESEARCH CORPORATION                               *\n.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *\n.*        DATE WRITTEN. JANUARY 8 1981.                               *\n.*        DATE UPDATED. MARCH 18 1982. (ROW AND COL IN PARENS)        *\n.*                                                                    *\n.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *\n.*                                                                    *\n.*        SAMPLE                                                      *\n.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *\n.*                                                                    *\n.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *\n.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *\n.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *\n.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *\n.*           SO YOU DONT HAVE TO KNOW THE HEX CODES FOR THEM,         *\n.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *\n.*           (A SET OF RESERVED NAMES) SO YOU DONT HAVE TO KNOW       *\n.*           THE HEX CODES FOR THEM.                                  *\n.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *\n.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *\n.*                                                                    *\n.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *\n.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *\n.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *\n.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *\n.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *\n.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *\n.*                                                                    *\n.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *\n.*        ANY COMBINATION OF THE FOLLOWING.                           *\n.*                                                                    *\n.*        .  AN ORDER.                                                *\n.*           VALID ORDERS ARE: SBA, SF, RTA, IC, PT, EUA.             *\n.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *\n.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *\n.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *\n.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *\n.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *\n.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *\n.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *\n.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *\n.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *\n.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *\n.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *\n.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *\n.*           THE ORIGINAL VERSION OF THIS MACRO.                      *\n.*        .  AN ATTRIBUTE BYTE.                                       *\n.*           VALID ATTRIBUTE BYTES ARE:                               *\n.*           UNPLO -  UNPROTECTED NORMAL INTENSITY                    *\n.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *\n.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *\n.*           PROLO  - PROTECTED NORMAL INTENSITY                      *\n.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *\n.*           PROHI  - PROTECTED HIGH INTENSITY                        *\n.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *\n.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *\n.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *\n.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *\n.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *\n.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *\n.*                                                                    *\n.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *\n.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *\n.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *\n.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *\n.*                                                                    *\n.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *\n.*        SCREEN SIZE OF 24 ROWS BY 80 COLUMNS. FOR SCREENS           *\n.*        OF OTHER DIMENSIONS (43 BY 80, 12 BY 40) THE MACRO          *\n.*        NEEDS ONLY A FEW CHANGES.                                   *\n.*                                                                    *\n.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *\n.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *\n.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *\n.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &R,&C,&P,&Q\n         LCLA  &AN,&AS,&AL\n         LCLB  &B,&NUMERIC,&INTEGER\n         LCLC  &T(64)\n         LCLC  &N,&ROW,&COL\n         LCLC  &CS,&STRING\n&T(1)    SETC  '40'\n&T(2)    SETC  'C1'\n&T(3)    SETC  'C2'\n&T(4)    SETC  'C3'\n&T(5)    SETC  'C4'\n&T(6)    SETC  'C5'\n&T(7)    SETC  'C6'\n&T(8)    SETC  'C7'\n&T(9)    SETC  'C8'\n&T(10)   SETC  'C9'\n&T(11)   SETC  '4A'\n&T(12)   SETC  '4B'\n&T(13)   SETC  '4C'\n&T(14)   SETC  '4D'\n&T(15)   SETC  '4E'\n&T(16)   SETC  '4F'\n.*\n&T(17)   SETC  '50'\n&T(18)   SETC  'D1'\n&T(19)   SETC  'D2'\n&T(20)   SETC  'D3'\n&T(21)   SETC  'D4'\n&T(22)   SETC  'D5'\n&T(23)   SETC  'D6'\n&T(24)   SETC  'D7'\n&T(25)   SETC  'D8'\n&T(26)   SETC  'D9'\n&T(27)   SETC  '5A'\n&T(28)   SETC  '5B'\n&T(29)   SETC  '5C'\n&T(30)   SETC  '5D'\n&T(31)   SETC  '5E'\n&T(32)   SETC  '5F'\n.*\n&T(33)   SETC  '60'\n&T(34)   SETC  '61'\n&T(35)   SETC  'E2'\n&T(36)   SETC  'E3'\n&T(37)   SETC  'E4'\n&T(38)   SETC  'E5'\n&T(39)   SETC  'E6'\n&T(40)   SETC  'E7'\n&T(41)   SETC  'E8'\n&T(42)   SETC  'E9'\n&T(43)   SETC  '6A'\n&T(44)   SETC  '6B'\n&T(45)   SETC  '6C'\n&T(46)   SETC  '6D'\n&T(47)   SETC  '6E'\n&T(48)   SETC  '6F'\n.*\n&T(49)   SETC  'F0'\n&T(50)   SETC  'F1'\n&T(51)   SETC  'F2'\n&T(52)   SETC  'F3'\n&T(53)   SETC  'F4'\n&T(54)   SETC  'F5'\n&T(55)   SETC  'F6'\n&T(56)   SETC  'F7'\n&T(57)   SETC  'F8'\n&T(58)   SETC  'F9'\n&T(59)   SETC  '7A'\n&T(60)   SETC  '7B'\n&T(61)   SETC  '7C'\n&T(62)   SETC  '7D'\n&T(63)   SETC  '7E'\n&T(64)   SETC  '7F'\n.*\n&N       SETC  '&NAME'\n&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS\n&AS      SETA  0\n&B       SETB  0 FALSE\n.EACH    AIF   (&AN EQ 0).EPILOG\n&AS      SETA  &AS+1\n&CS      SETC  '&AS'\n&AL      SETA  K'&SYSLIST(&AS)\n         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT\n         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR\n&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')\n         AIF   (&NUMERIC AND &INTEGER).ROWCOL\n         AIF   (NOT &B).ROWCOLX\n         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'\n&B       SETB  0 FALSE\n.ROWCOLX ANOP\n&STRING  SETC  '&SYSLIST(&AS)'\n.*             ORDERS\n         AIF   ('&STRING' EQ 'SBA').SBA\n         AIF   ('&STRING' EQ 'SF').SF\n         AIF   ('&STRING' EQ 'RTA').RTA\n         AIF   ('&STRING' EQ 'IC').IC\n         AIF   ('&STRING' EQ 'PT').PT\n         AIF   ('&STRING' EQ 'EUA').EUA\n.*             ATTRIBUTES\n         AIF   ('&STRING' EQ 'UNPLO').UNPLO\n         AIF   ('&STRING' EQ 'UNPHI').UNPHI\n         AIF   ('&STRING' EQ 'UNPNP').UNPNP\n         AIF   ('&STRING' EQ 'PROLO').PROLO\n         AIF   ('&STRING' EQ 'PROLOS').PROLOS\n         AIF   ('&STRING' EQ 'PROHI').PROHI\n         AIF   ('&STRING' EQ 'PROHIS').PROHIS\n.*             CONSTANTS\n.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS\n.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.\n.DC      ANOP\n&N       DC    &STRING\n         AGO   .NEXT\n.SBA     ANOP\n&N       DC    X'11'               SET BUFFER ADDRESS\n         AGO   .NEXT\n.SF      ANOP\n&N       DC    X'1D'               START FIELD\n         AGO   .NEXT\n.RTA     ANOP\n&N       DC    X'3C'               REPEAT TO ADDRESS\n         AGO   .NEXT\n.IC      ANOP\n&N       DC    X'13'               INSERT CURSOR\n         AGO   .NEXT\n.PT      ANOP\n&N       DC    X'05'               PROGRAM TAB\n         AGO   .NEXT\n.EUA     ANOP\n&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS\n         AGO   .NEXT\n.UNPLO   ANOP\n&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.UNPHI   ANOP\n&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.UNPNP   ANOP\n&N       DC    X'4C'               UNPROTECTED NO-DISPLAY\n         AGO   .NEXT\n.PROLO   ANOP\n&N       DC    X'60'               PROTECTED NORMAL INTENSITY\n         AGO   .NEXT\n.PROLOS  ANOP\n&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP\n         AGO   .NEXT\n.PROHI   ANOP\n&N       DC    X'E8'               PROTECTED HIGH INTENSITY\n         AGO   .NEXT\n.PROHIS  ANOP\n&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP\n         AGO   .NEXT\n.**********************************************************************\n.PAIR    ANOP\n         AIF   (N'&SYSLIST(&AS) NE 2).PERR1\n&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')\n         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2\n&R       SETA  &SYSLIST(&AS,1)\n&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')\n&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')\n         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2\n&C       SETA  &SYSLIST(&AS,2)\n         AIF   (&R LT 1 OR &R GT 24).ROWERR\n         AIF   (&C LT 1 OR &C GT 80).COLERR\n&P       SETA  (&R-1)*80+&C-1\n&Q       SETA  &P/64               QUOTIENT\n&R       SETA  &P-&Q*64+1          REMAINDER+1\n&Q       SETA  &Q+1                QUOTIENT+1\n&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN\n         AGO   .NEXT\n.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'\n         MEXIT\n.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'\n         MEXIT\n.**********************************************************************\n.ROWCOL  ANOP\n         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED\n&R       SETA  &SYSLIST(&AS)\n&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED\n         AGO   .NEXTR\n.COL     ANOP\n&C       SETA  &SYSLIST(&AS)\n&B       SETB  0 FALSE             RESET SWITCH\n         AIF   (&R LT 1 OR &R GT 24).ROWERR\n         AIF   (&C LT 1 OR &C GT 80).COLERR\n&P       SETA  (&R-1)*80+&C-1\n&Q       SETA  &P/64               QUOTIENT\n&R       SETA  &P-&Q*64+1          REMAINDER+1\n&Q       SETA  &Q+1                QUOTIENT+1\n&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN\n         AGO   .NEXT\n.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 24'\n         AGO   .NEXT\n.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'\n.NEXT    ANOP\n&N       SETC  ''                  TURN OFF NAME\n.NEXTR   ANOP\n&AN      SETA  &AN-1\n         AGO   .EACH\n.EPILOG  ANOP\n         MEND\n./ ADD NAME=DCSPARS\n         MACRO\n&NAME    DCSPARS &OPERAND\n.**********************************************************************\n.*                                                                    *\n.*        DCSPARS - INNER MACRO FOR THE 'DCS' MACRO                   *\n.*                                                                    *\n.*        WRITTEN BY BILL GODFREY                                     *\n.*        PLANNING RESEARCH CORPORATION                               *\n.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *\n.*        DATE WRITTEN. MARCH 17 1982.                                *\n.*        DATE UPDATED. MARCH 17 1982.                                *\n.*                                                                    *\n.*        THIS MACRO TAKES A OPERAND THAT IS 2 NUMBERS IN             *\n.*        PARENTHESES AND RETURNS THE TWO NUMBERS IN GLOBALS          *\n.*                                                                    *\n.*        THIS IS NECESSARY BECAUSE THE DCS MACRO IS                  *\n.*        REFERENCING ITS OPERANDS AS &SYSLIST(N), AND IF             *\n.*        ONE OF THE OPERANDS IS A LIST OF VALUES IN PARENTHESES      *\n.*        YOU WOULD THINK THAT YOU COULD REFERENCE THE FIRST VALUE    *\n.*        AS &SYSLIST(N)(1) AND THE SECOND AS &SYSLIST(N)(2).         *\n.*        BUT NOOOOOOOO, THE ASSEMBLER WONT ALLOW THAT.               *\n.*        SO THE DCS MACRO ISSUES THIS MACRO WITH &SYSLIST(N)         *\n.*        AS THE OPERAND, AND THIS MACRO CAN REFER TO THE             *\n.*        VALUES WITHIN THE PARENTHESES BECAUSE IT DOES NOT           *\n.*        USE &SYSLIST(N) BUT JUST &OPERAND.                          *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLC  &GDCSROW,&GDCSCOL\n&GDCSROW SETC  '&OPERAND(1)'\n&GDCSCOL SETC  '&OPERAND(2)'\n         MEND\n./ ADD NAME=EQUENT\n         MACRO\n&L      EQUENT &CSECT=,&ID=*,&BASEREG=12,&SA=*,                        +\n               &ENTRY=NO,&SP=0,                                        +\n               &XTRA=0,&XTRAREG=,&XTRAUSE=\n.*\n.* GENE CZARCINSKI,  05OCT73\n.*\n         AIF   ('&CSECT' EQ '').X0\n&CSECT   CSECT ,\n.X0      AIF   ('&L' NE '').X1\n$$$&SYSNDX DC  0H'0'\n.X1      AIF   ('&ENTRY' EQ 'NO').X1X\n         AIF   ('&ENTRY' EQ 'YES').X1A\n         MNOTE 8,'---ONLY ENTRY=YES/NO VALID'\n         MEXIT\n.X1A     AIF   ('&L' NE '').X1B\n         MNOTE 8,'---A LABEL MUST BE SPECIFIED WHEN ENTRY=YES'\n         MEXIT\n.X1B     ENTRY &L\n.X1X     ANOP\n&L       SAVE  (14,12),,&ID\n         LR    &BASEREG,15   ESTABLISH THE PGM BASE REGISTER\n         AIF   ('&L' NE '').X3\n         USING $$$&SYSNDX,&BASEREG     AND ADDRESSABILITY.\n         AGO   .X4\n.X3      USING &L,&BASEREG   AND ADDRESSABILITY.\n.*\n.X4      AIF   ('&SA' NE '').X5\n         MNOTE *,'---REENTRANT ENTRY CODE GENERATED.'\n         GETMAIN R,LV=72+&XTRA,SP=&SP\n         AIF   ('&XTRAREG' EQ '').X7\n         LA    &XTRAREG,72(0,1)        A(END OF SAVE AREA)\n         AIF   ('&XTRAUSE' EQ '').X7\n         USING &XTRAUSE,&XTRAREG\n         AGO   .X7\n.X5      MNOTE *,'---NON-REENTRANT ENTRY CODE BEING GENERATED.'\n         AIF   ('&SA' EQ '*').X6\n         LA    1,&SA         ADDR OF SAVE AREA\n         AGO   .X7\n.X6      CNOP  4,8\n         BAL   1,$$$&SYSNDX.A          BRANCH AROUND\n         DC    18F'0'        INLINE SAVE AREA\n.*\n$$$&SYSNDX.A DC 0H'0'\n.X7      ANOP\n         LR    15,13\n         ST    1,8(0,13)     LINK THE SAVE AREAS\n         ST    13,4(0,1)\n         LR    13,1          ADDR OF NEW SAVE AREA\n         LM    15,1,16(15)             RESTORE USED REGISTERS\n         MEND  ENTER\n./ ADD NAME=EQUEXT\n         MACRO\n&L      EQUEXT &RESTORE=(14,12),&RC=0,&FREE=NO,&XTRA=0,&SP=0\n.*\n.* GENE CZARCINSKI,  08OCT73\n.*\n&L       DC    0H'0'\n         AIF   ('&FREE' EQ 'NO').X5\n         AIF   ('&FREE' EQ 'YES').X3\n         MNOTE 8,'---ONLY FREE=YES/NO VALID'\n         MEXIT\n.*\n.X3      LR    1,13          POINTER TO GOTTEN CORE\n         L     13,4(0,13)    RESTORE POINTER TO OLD SAVE AREA\n         AIF   ('&RC' NE '(15)').X4\n         ST    15,16(0,13)             SAVE CONTENTS OVER FREEMAIN.\n.X4      FREEMAIN R,A=(1),LV=72+&XTRA,SP=&SP\n         AIF   ('&RC' NE '(15)').X6\n         L     15,16(0,13)             RESTORE\n         AGO   .X6\n.*\n.X5      L     13,4(0,13)    RESTORE POINTER TO OLD SAVE AREA\n.X6      AIF   ('&RC' EQ '(15)').X7\n         LA    15,&RC        LOAD RETURN CODE INTO REG 15\n.X7      RETURN &RESTORE,T,RC=(15)\n         MEND  EXIT\n./ ADD NAME=EQUREG\n         MACRO\n         EQUREG\nR0       EQU   0                   <>\nR1       EQU   1                 <<  >>\nR2       EQU   2               <<      >>\nR3       EQU   3             <<          >>\nR4       EQU   4           <<              >>\nR5       EQU   5         <<                  >>\nR6       EQU   6       <<                      >>\nR7       EQU   7     <<    SYMBOLIC REGISTERS    >>\nR8       EQU   8       <<                      >>\nR9       EQU   9         <<                  >>\nR10      EQU   10          <<              >>\nR11      EQU   11            <<          >>\nR12      EQU   12              <<      >>\nR13      EQU   13                <<  >>\nR14      EQU   14                  <>\nR15      EQU   15\n         MEND\n./ ADD NAME=EQUREGS\n         MACRO\n         EQUREGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n./ ADD NAME=GNRLFAIL\n         MACRO\n&NAME    GNRLFAIL &RET=,&TYPE=,&GFCB=,&CPPL=,&KEYN08=NO\n.*\n.*  THIS MACRO IS USED TO ISSUE ERROR MESSAGES FOR CERTAIN\n.*  FAILURES.  IT IS ASSUMED THAT ON ENTRY R15 CONTAINS\n.*  EITHER THE ERROR RETURN CODE OR ABEND CODE. THIS ROUTINE\n.*  WILL DESTROY R1.\n.*\n         GBLC  &P\n         GBLC  &GNRLF\n         LCLC  &CALLID\n         LCLC  &GNRLFCB\n         LCLC  &LCLLBL\n         LCLC  &GFBITS\n         AIF   ('&TYPE' EQ '').ERR1   MUST SUPPLY TYPE\n         AIF   ('&RET' EQ '').SYSLBL\n&LCLLBL  SETC  '&RET'\n         AGO   .CONT1\n.SYSLBL  ANOP\n&LCLLBL  SETC  '&P'.'&SYSNDX'\n.CONT1   ANOP\n         AIF   ('&GFCB' EQ '').NOGFCB\n&GNRLFCB SETC  '&GFCB'\n         AGO   .CONT2\n.NOGFCB  ANOP\n&GNRLFCB SETC  '&P'.'GNRLF'\n&GNRLF   SETC  'YES'  SO CPDATA ALLOCATES CONTROL BLOCKS\n.CONT2   ANOP\n.*  DETERMINE THE CORRECT GFBITS SETTING BASED UPON THE\n.*  GNRLFAIL TYPE REQUEST AND THE PROTECT KEY\n&GFBITS  SETC  '0'\n         AIF   ('&TYPE' NE 'SSREQ' OR '&KEYN08' NE 'YES').CONT4\n&GFBITS  SETC  'GFKEYN08+GFSUBSYS'\n         AGO   .CONT6\n.CONT4   ANOP\n         AIF   ('&TYPE' NE 'SSREQ').CONT5\n&GFBITS  SETC  'GFSUBSYS'\n         AGO   .CONT6\n.CONT5   ANOP\n         AIF   ('&KEYN08' NE 'YES').CONT6\n&GFBITS  SETC  'GFKEYN08'\n.CONT6   ANOP\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    EQU   *\n.NONAME  ANOP\n         AIF   ('&TYPE' NE 'PARSE').NOPARS\n         LA    R1,4           IF PARSE ERROR CODE IS 4 OR 20,\n         CR    R15,R1         ERROR MESSAGE HAS BEEN ISSUED\n         BE    &LCLLBL\n         LA    R1,20\n         CR    R15,R1\n         BE    &LCLLBL\n.NOPARS  ANOP\n         LA    R1,&GNRLFCB+4   R1 => GNRLFAIL CONTROL BLOCK\n         ST    R1,&GNRLFCB\n         USING GFCBPTR,R1\n         AIF   ('&TYPE' EQ 'SSREQ').SSREQT    DON'T ZERO PTR IF SSREQ\n         XC    GFCBPTR,GFCBPTR  ZERO THE OPTIONAL POINTERS\n         AGO   .CONT3\n.SSREQT  ANOP\n         ST    R0,GFCBPTR     R0 => SSOB\n.CONT3   ANOP\n         XC    GF02PTR,GF02PTR   ZERO PTR TO TSO MESSAGE ISSUER\n         ST    R15,GFRCODE   STORE THE RETURN OR ABEND CODE\n         AIF   ('&TYPE' NE 'PUTLINE').NOPUTL\n&CALLID  SETC  'GFPUTL'\n         AGO   .LINK\n.NOPUTL  ANOP\n         AIF   ('&TYPE' NE 'PARSE').NOPRS\n&CALLID  SETC  'GFPARSE'\n         AGO   .LINK\n.NOPRS   ANOP\n         AIF   ('&TYPE' NE 'ABEND').NOABND\n&CALLID  SETC  'GFABEND'\n         AGO   .LINK\n.NOABND  ANOP\n         AIF    ('&TYPE' NE 'SSREQ').ERR3\n&CALLID  SETC  'GFSSREQ'\n.LINK    ANOP\n         LA    R15,&CALLID   SET THE FALURE CODE INTO\n         STH   R15,GFCALLID   THE CONTROL BLOCK\n         MVI   GFBITS,&GFBITS\n         XC    GFRESV1,GFRESV1\n         AIF   ('&CPPL' NE '').CPPL\n         L     R15,4(R13)\n         L     R15,24(R15)    R15 => CPPL\n         AGO   .NOCPPL\n.CPPL    ANOP\n         L     R15,&CPPL      R15 => CPPL\n.NOCPPL  ANOP\n         ST    R15,GFCPPLP\n         XC    GFDSNLEN,GFDSNLEN\n         XC    GFPGMNL,GFPGMNL     ZERO THE PROGRAM NAME LENGTH\n         XC    GFDSNP,GFDSNP\n         XC    GFPGMNP,GFPGMNP\n         XC    GFRESV2,GFRESV2\n         XC    GFRESV3,GFRESV3\n         DROP  R1\n         LA    R1,&GNRLFCB\n         LINK  EP=IKJEFF19\n         AIF   ('&RET' EQ '').GENLBL\n         B     &LCLLBL           GO TO ERROR LABEL\n         AGO   .EXIT\n.GENLBL  ANOP\n         AIF   ('&TYPE' NE 'PARSE').EXIT\n&LCLLBL  DS    0H\n.EXIT    ANOP\n         MEXIT\n.ERR1    ANOP\n         MNOTE 8,'TYPE PARAMETER MISSING ON GNRLFAIL'\n         DC    F'0'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 8,'INVALID TYPE ON GNRLFAIL'\n         DC    F'0'\n         MEXIT\n         MEND\n./ ADD NAME=IKJEFUAD\n*          %GOTO  UADGO;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*                       I K J E F U A D\n*                UADS STRUCTURE MAPPING MACR0\n*\n*    USE OF THE COMPILE VARIABLES MAKES POSSIBLE THE SELECTIVE\n*    INCLUSION OF THE INDIVIDUAL AREAS OF MAPPING\n*\n* STATUS -- CHANGE LEVEL --   02-000               12-15-1972\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/\n*/*\n*    ERRORS IN THIS MACRO HAVE BEEN FIXED BY:\n*       BILL GODFREY, PLANNING RESEARCH CORPORATION\n*       PRC COMPUTER CENTER INC, MCLEAN VA.\n*       JANUARY 30 1976\n*    THE ERRORS FIXED:\n*       (1) THE 'AIF' STATEMENTS DID NOT HAVE THE\n*           FIRST VARIABLE NAME IN APOSTROPHES. (APAR # Z07502).\n*           EXAMPLE     AIF (&ALL EQ 'ALL').HDR1\n*       (2) IN THE HEADER BLOCK, THE FIELD 'UADSUSER'\n*           WAS DEFINED AS 0CL8, WHICH CAUSED THE SUBSEQUENT\n*           FIELDS TO BE DEFINED WITH IMPROPER OFFSETS.\n*           IT IS NOW CHANGED FROM 0CL8 TO CL8 TO AGREE\n*           WITH THE PLS CODE.\n*       (3) IN THE ACCOUNT NUMBER DATA BLOCK, THE TWO\n*           COMMENT CARDS FOLLOWING THE CARD DEFINING THE\n*           FIELD 'UADSANUM' DID NOT HAVE AN ASTERISK IN\n*           COLUMN 1, THUS CAUSING ASSEMBLY ERROR\n*           MSG IFO054 INVALID OPERATION CODE.\n*       (4) THE SETC STATEMENT - THERE IS ONLY ONE - WAS FLAGGED\n*           WITH ASSEMBLY MSG IFO031 NAME INCONSISTENT WITH TYPE.\n*           (OR ASSEMBLER H MSG IEV124 ILLEGAL USE OF PARAMETER).\n*           IT IS ONLY EXECUTED IF OPERANDS ARE NOT PROPERLY\n*           SPECIFIED ANYWAY. IT IS COMMENTED OUT.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/\n*%UADGO:     ;\n*        %GOTO ACTMC1;                                               /*\n         MACRO\n         IKJEFUAD  &DSPL,&ALL,&HDR,&POB,&AOB,&ROB,&PDB,&ADB,&RDB,      S\n               &FSQ,&GNL\n         SPACE 1\n         SPACE 1\n         SPACE 1\n         AIF   ('&ALL' EQ 'ALL').HDR1   CHK TO DO ALL\n         AIF   ('&HDR' EQ 'HDR').HDR1   CHK TO DO HEADER BLOCK\n         AIF   ('&GNL' EQ 'GNL').GOB1   CHK TO DO GENERAL OFFSET\n         AIF   ('&POB' EQ 'POB').POB1   CHK TO DO PASSWD OFFSET\n         AIF   ('&AOB' EQ 'AOB').AOB1   CHK TO DO ACCTNM OFFSET\n         AIF   ('&ROB' EQ 'ROB').ROB1   CHK TO DO PROCNAME OFFSET\n         AIF   ('&PDB' EQ 'PDB').PDB1   CHK TO DO PASSWD DATA\n         AIF   ('&ADB' EQ 'ADB').ADB1   CHK TO DO ACCTNM DATA\n         AIF   ('&RDB' EQ 'RDB').RDB1   CHK TO DO PROCNAME DATA\n         AIF   ('&FSQ' EQ 'FSQ').FSQ1   CHK TO DO FREE SPACE ELEMENT\n.*&ALL   SETC  'ALL'\n         SPACE 1\n.HDR1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').HDRA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                     H E A D E R   B L O C K                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I---------------------I---------------------I         *\n*          0    I UADSBLNG            I UADSFSQP            I         *\n*               I---------------------I---------------------I         *\n*          4    I UADSUSER                                  I         *\n*               I                                           I         *\n*               I---------------------I---------------------I         *\n*          12   I UADSBN01            I UADSMAXC            I         *\n*               I---------------------I---------------------I         *\n*          16   I UADSATTR            I UADSINST            I         *\n*               I---------------------I---------------------I         *\n*          20   I UADSUPTP                                  I         *\n*               I-------------------------------------------I         *\n*          24   I UADSPWD1                                  I         *\n*               I-------------------------------------------I         *\n*          28   I UADSPERP                                  I         *\n*               I-------------------------------------------I         *\n*          32   I UADSDEST                                  I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*          40   I RESERVED                                  I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.HDRA    ANOP\n         SPACE 1\nDHED     DSECT ,HEDBPTR\n         SPACE 1\n         DS    0F                      ALIGN TO WORD BOUNDARY\nUADSMHDR DS    0CL16                   COMMON HEADER AREA\nUADSBLNG DS    AL2                     BLOCK LENGTH\nUADSFSQP DS    AL2                     OFFSET TO INITIAL FSQE (FREE\n**                                     ..SPACE QUEUE ELEMENT)\nUADSUSER DS    CL8                     USERID\nUADSBN01 DS    0BL2                    FLAGS\n         DS    BL1                     FIRST BYTE OF FLAGS -- RESERVED\n         DS    BL1                     SECOND BYTE OF FLAGS\nUADSNUSP EQU   X'80'                   ..0 -- NO NON-USABLE SPACE\n**                                     ..1 -- ONLY NON-USABLE SPACE\n**                                     .......EXISTS IN THIS BLOCK\nUADSEXPF EQU   X'40'                   ..0 -- OLD FORMAT UADS\n**                                     ..1 -- NEW EXPANDED FORMAT UADS\n**                                     .......EXISTS IN THIS BLOCK\nUADSMAXC DS    AL2                     MAXIMUM CORE SIZE ALLOTTABLE\n**                                     ..TO THIS USER\nUADSATTR DS    0BL2                    SYSTEM ATTRIBUTES OF USERID\n         DS    BL1                     FIRST BYTE OF IBM FLAGS\nUSATR00  EQU   X'80'                   ..0 -- NO OPERATOR CAPABILITY\n**                                     ..1 -- OPERATOR CAPABILITY\nUSATR01  EQU   X'40'                   ..0 -- NO ACCOUNT CAPABILITY\n**                                     ..1 -- ACCOUNT CAPABILITY\nUSATR02  EQU   X'20'                   ..0 -- NO JCL CAPABILITY\n**                                     ..1 -- JCL CAPABILITY\nUSATR03  EQU   X'10'                   ..0 -- NO MOUNT CAPABILITY\n**                                     ..1 -- MOUNT CAPABILITY\n**                                     FLAGS 4 THROUGH 15 ARE\n**                                     ..RESERVED FOR IBM USE\n         DS    BL1                     SECOND BYTE OF FLAGS, 8 -- 15\n         SPACE 1\nUADSINST DS    BL2                     FOR INSTALLATION USE\nUADSUPTP DS    AL4                     OFFSET TO CURRENT UPT\nUADSPWD1 DS    AL4                     OFFSET TO FIRST PASSWORD OFFSET\nUADSPERP DS    AL4                     OFFSET TO PERFORMANCE GROUP\nUADSDEST DS    CL8                     DESTINATION\n         DS    CL24                    RESERVED\n         SPACE 1\n         SPACE 1\n         SPACE 1\n         AIF   ('&ALL' EQ 'ALL').GOB1   CHK TO DO ALL\n         AIF   ('&GNL' NE 'GNL').DOPOB  CHK TO DO GENERAL OFFSET\n.GOB1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').GOBA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*             G E N E R A L   O F F S E T   B L O C K                 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSNNFL I UADSNNEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSNSUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSNDAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.GOBA    ANOP\n         SPACE 1\nUADSNODE DSECT ,UADSNPTR\n         SPACE 1\nUADSNNFL DS    BL1                    GENERAL OFFSET BLOCK\n**                                     ..INDICATORS\nUADSNFLG EQU   X'80'                   ..0 -- CONTINUE CHAINING\n**                                     ..1 -- LAST OFFSET BLOCK FOR\n**                                     .......THIS OFFSET CHAIN\n**                                     .. FLAGS 1 THRU 7 ARE RESERVED\nUADSNNEX DS    AL3                    OFFSET TO NEXT OFFSET BLOCK\nUADSNSUB DS    AL4                    OFFSET TO ASSOCIATED OFFSET\nUADSNDAT DS    AL4                    OFFSET TO DATA BLOCK\n         SPACE 1\n.DOPOB   ANOP\n         AIF   ('&ALL' EQ 'ALL').POB1   CHK TO DO ALL\n         AIF   ('&POB' NE 'POB').DOAOB  CHK TO DO PASSWORD OFFSET\n.POB1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').POBA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*            P A S S W O R D   O F F S E T   B L O C K                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSPFLG I UADSPNEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSPSUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSPDAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.POBA    ANOP\n         SPACE 1\nDPOB     DSECT ,DPOBPTR\n         SPACE 1\nUADSPFLG DS    BL1                     PASSWORD BLOCK INDICATORS\nPFLG01   EQU   X'80'                   ..0 -- CONTINUE CHAINING\n**                                     ..1 -- LAST PASSWORD FOR THIS\n**                                     .......USERID\n**                                     ..FLAGS 1 THRU 7 ARE RESERVED\nUADSPNEX DS    AL3                     OFFSET TO NEXT PASSWD OFFSET\n**                                     ..BLOCK\nUADSPSUB DS    AL4                     OFFSET TO ASSOCIATED ACCOUNT\n**                                     ..NUMBER OFFSET BLOCK\nUADSPDAT DS    AL4                     OFFSET TO PASSWORD DATA BLOCK\n         SPACE 1\n.DOAOB   ANOP\n         AIF   ('&ALL' EQ 'ALL').AOB1   CHK TO DO ALL\n         AIF   ('&AOB' NE 'AOB').DOROB  CHK TO DO ACCT NO. OFFSET\n.AOB1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').AOBA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   A C C O U N T   N U M B E R                       *\n*                     O F F S E T   B L O C K                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSAFLG I UADSANEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSASUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSADAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.AOBA    ANOP\n         SPACE 1\nDNOB     DSECT ,DNOBPTR\n         SPACE 1\nUADSAFLG DS    BL1                    ACCOUNT NUMBER OFFSET BLOCK\n**                                     ..INDICATORS\nAFLG01   EQU   X'80'                   ..0 -- CONTINUE CHAINING\n**                                     ..1 -- LAST ACCOUNT NUMBER FOR\n**                                     .......THIS PASSWORD CHAIN\n**                                     .. FLAGS 1 THRU 7 ARE RESERVED\nUADSANEX DS    AL3                     OFFSET TO NEXT ACCOUNT NUMBER\n**                                     ..OFFSET BLOCK\nUADSASUB DS    AL4                     OFFSET TO ASSOCIATED PROCNAME\n**                                     ..OFFSET BLOCK\nUADSADAT DS    AL4                     OFFSET TO ACCOUNT NUMBER DATA\n**                                     ..BLOCK\n         SPACE 1\n.DOROB   ANOP\n         AIF   ('&ALL' EQ 'ALL').ROB1   CHK TO DO ALL\n         AIF   ('&ROB' NE 'ROB').DOPDB  CHK TO DO PROCNAME OFFSET\n.ROB1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').ROBA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   P R O C E D U R E   N A M E                       *\n*                     O F F S E T   B L O C K                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSRFLG I UADSRNEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSRSUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSRDAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.ROBA    ANOP\n         SPACE 1\nDROB     DSECT ,DROBPTR\n         SPACE 1\nUADSRFLG DS    BL1                     PROCNAME OFFSET BLOCK\n**                                     ..INDICATORS\nFLGR01   EQU   X'80'                   ..0 -- CONTINUE CHAINING\n**                                     ..1 -- LAST PROCNAME FOR THIS\n**                                     .......ACCOUNT NUMBER\n**                                     ..FLAGS 1 THRU 7 ARE RESERVED\nUADSRNEX DS    AL3                     OFFSET TO NEXT PROCNAME\n**                                     ..OFFSET BLOCK\nUADSRSUB DS    AL4                     RESERVED BY ACCOUNT\nUADSRDAT DS    AL4                     OFFSET TO PROCNAME DATA BLOCK\n         SPACE 1\n.DOPDB   ANOP\n         AIF   ('&ALL' EQ 'ALL').PDB1   CHK TO DO ALL\n         AIF   ('&PDB' NE 'PDB').DOADB  CHK TO DO PASSWORD DATA\n.PDB1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').PDBA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              P A S S W O R D   D A T A   B L O C K                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSPCTR I RESERVED                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSPPWD                                  I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.PDBA    ANOP\n         SPACE 1\nDPOBD    DSECT ,UADSPPTR\n         SPACE 1\nUADSPCTR DS    AL1                     COUNT OF REFERENCES TO THIS\n**                                     ..DATA BLOCK\n         DS    XL3                     RESERVED FOR ACCOUNT\nUADSPPWD DS    CL8                     PASSWORD\n         SPACE 1\n.DOADB   ANOP\n         AIF   ('&ALL' EQ 'ALL').ADB1   CHK TO DO ALL\n         AIF   ('&ADB' NE 'ADB').DORDB  CHK TO DO ACCT NO. DATA\n.ADB1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').ADBA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   A C C O U N T   N U M B E R                       *\n*                      D A T A     B L O C K                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSACTR I RESERVED                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSADRF (40 BYTES)                       I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I----------I--------------------------------I         *\n*          44   I UADSALEN I UADSANUM (MAX OF 40 BYTES)     I         *\n*               I----------I                                I         *\n*               =                                           =         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.ADBA    ANOP\n         SPACE 1\nDNOBD    DSECT ,UADSAPTR\n         SPACE 1\nUADSACTR DS    AL1                     COUNT OF REFERENCES TO THIS\n**                                     ..DATA BLOCK\n         DS    XL3                     RESERVED FOR ACCOUNT\nUADSADRF DS    CL40                    DRIVER DATA FIELD\nUADSALEN DS    AL1                     LENGTH OF FOLLOWING ACCOUNT\n**                                     ..NUMBER DATA FIELD\nUADSANUM DS    CL40                    ACCT NMBR DATA FIELD\n*                                      ..NOTE -- USE SPECIFIC\n*                                      .....LENGTH REFERENCES\n         SPACE 1\n.DORDB   ANOP\n         AIF   ('&ALL' EQ 'ALL').RDB1   CHK TO DO ALL\n         AIF   ('&RDB' NE 'RDB').DOFSQ  CHK TO DO PROCNAME DATA\n.RDB1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').RDBA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   P R O C E D U R E   N A M E                       *\n*                      D A T A     B L O C K                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSRCTR I RESERVED                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSRNAM                                  I         *\n*               I                                           I         *\n*               I----------I----------I---------------------I         *\n*          12   I RESERVED            I UADSRSIZ            I         *\n*               I----------I----------I---------------------I         *\n*          16   I UADSUNAM                                  I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*                                                                     *\n         SPACE 1\n.RDBA    ANOP\n         SPACE 1\nDROBD    DSECT ,UADSRPTR\n         SPACE 1\nUADSRCTR DS    AL1                     COUNT OF REFERENCES TO THIS\n**                                     DATA BLOCK\n         DS    XL3                     RESERVED FOR ACCOUNT\nUADSRNAM DS    CL8                     LOGON PROCEDURE NAME\n         DS    XL2                     RESERVED\nUADSRSIZ DS    AL2                     REGION SIZE SPECIFIED IN THE\n**                                     ..NAMED PROCEDURE\nUADSUNAM DS    CL8                     ESOTERIC GROUP UNIT NAME\n         SPACE 1\n.DOFSQ   ANOP\n         AIF   ('&ALL' EQ 'ALL').FSQ1   CHK TO DO ALL\n         AIF   ('&FSQ' NE 'FSQ').DONE   CHK TO DO FSQE DATA\n.FSQ1    ANOP\n         AIF   ('&DSPL' NE 'DSPL').FSQEA CHK TO DISPLAY FORMAT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                F R E E   S P A C E   Q U E U E                      *\n*                         E L E M E N T                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I---------------------I---------------------I         *\n*          0    I FSQELNTH            I FSQENEXT            I         *\n*               I---------------------I---------------------I         *\n*                                                                     *\n         SPACE 1\n.FSQEA   ANOP\n         SPACE 1\nUADSFSQE DSECT ,FSQEPTR\n         SPACE 1\nFSQELNTH DS    AL2                     LENGTH OF FREE SPACE AREA\nFSQENEXT DS    AL2                     OFFSET TO NEXT FSQE\n.DONE    ANOP\n         MEND  , */\n*%ACTMC1 :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO UADL0001;\n*%ELSE\n*   %GOTO HDR1    ;\n*%UADL0001:  ;\n*%IF HDR\u00ac='HDR'  %THEN               /* CHK TO DO HEADER BLOCK       */\n*   %GOTO UADL0002;\n*%ELSE\n*   %GOTO HDR1    ;\n*%UADL0002:  ;\n*%IF GNL\u00ac='GNL'  %THEN               /* CHK TO DO GENERAL OFFSET     */\n*   %GOTO UADL0003;\n*%ELSE\n*   %GOTO GOB1    ;\n*%UADL0003:  ;\n*%IF POB\u00ac='POB'  %THEN               /* CHK TO DO PASSWD OFFSET      */\n*   %GOTO UADL0004;\n*%ELSE\n*   %GOTO POB1    ;\n*%UADL0004:  ;\n*%IF AOB\u00ac='AOB'  %THEN               /* CHK TO DO ACCTNM OFFSET      */\n*   %GOTO UADL0005;\n*%ELSE\n*   %GOTO AOB1    ;\n*%UADL0005:  ;\n*%IF ROB\u00ac='ROB'  %THEN               /* CHK TO DO PROCNAME OFFSET    */\n*   %GOTO UADL0006;\n*%ELSE\n*   %GOTO ROB1    ;\n*%UADL0006:  ;\n*%IF PDB\u00ac='PDB'  %THEN               /* CHK TO DO PASSWD DATA        */\n*   %GOTO UADL0007;\n*%ELSE\n*   %GOTO PDB1    ;\n*%UADL0007:  ;\n*%IF ADB\u00ac='ADB'  %THEN               /* CHK TO DO ACCTNM DATA        */\n*   %GOTO UADL0008;\n*%ELSE\n*   %GOTO ADB1    ;\n*%UADL0008:  ;\n*%IF RDB\u00ac='RDB'  %THEN               /* CHK TO DO PROCNAME DATA      */\n*   %GOTO UADL0009;\n*%ELSE\n*   %GOTO RDB1    ;\n*%UADL0009:  ;\n*%IF FSQ\u00ac='FSQ'  %THEN               /* CHK TO DO FREE SPACE ELEMENT */\n*   %GOTO UADL0010;\n*%ELSE\n*   %GOTO FSQ1    ;\n*%UADL0010:  ;\n*%ALL='ALL';\n*%HDR1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO UADL0011;\n*%ELSE\n*   %GOTO HDRA    ;\n*%UADL0011:  ;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                     H E A D E R   B L O C K                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I---------------------I---------------------I         *\n*          0    I UADSBLNG            I UADSFSQP            I         *\n*               I---------------------I---------------------I         *\n*          4    I UADSUSER                                  I         *\n*               I                                           I         *\n*               I---------------------I---------------------I         *\n*          12   I UADSBN01            I UADSMAXC            I         *\n*               I---------------------I---------------------I         *\n*          16   I UADSATTR            I UADSINST            I         *\n*               I---------------------I---------------------I         *\n*          20   I UADSUPTP                                  I         *\n*               I-------------------------------------------I         *\n*          24   I UADSPWD1                                  I         *\n*               I-------------------------------------------I         *\n*          28   I UADSPERP                                  I         *\n*               I-------------------------------------------I         *\n*          32   I UADSDEST                                  I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*          40   I RESERVED                                  I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%HDRA   :  ;\n*\n*DECLARE\n*  1 DHED     BASED(HEDBPTR),\n*   2 UADSMHDR,                      /* COMMON HEADER AREA           */\n*    3 UADSBLNG PTR(15),             /* BLOCK LENGTH                 */\n*\n*    3 UADSFSQP PTR(15),             /* OFFSET TO INITIAL FSQE (FREE\n*                                      ..SPACE QUEUE ELEMENT)        */\n*    3 UADSUSER CHAR(8),             /* USERID                       */\n*    3 UADSBN01 FIXED(16),           /* FLAGS                        */\n*     4 *        BIT(8),             /* RESERVED                     */\n*     4 UADSNUSP BIT(1),             /*..0 -- USABLE SPACE EXISTS\n*                                      ..1 -- ONLY NON-USABLE SPACE\n*                                      .......EXISTS IN THIS BLOCK   */\n*     4 UADSEXPF BIT(1),             /*..0 -- OLD FORMAT\n*                                      ..1 -- EXPANDED FORMAT        */\n*     4 *        BIT(6),             /* RESERVED                     */\n*    3 UADSMAXC FIXED(16),           /* MAXIMUM CORE SIZE ALLOTTABLE\n*                                         TO THIS USER.              */\n*   2 UADSATTR BIT(16),              /* SYSTEM ATTRIBUTES OF USERID  */\n*     3 USATR00  BIT(1),             /* ..0 -- NO OPERATOR CAPABILITY\n*                                       ..1 -- OPERATOR CAPABILITY   */\n*     3 USATR01  BIT(1),             /* ..0 -- NO ACCOUNT CAPABILITY\n*                                       ..1 -- ACCOUNT CAPABILITY    */\n*     3 USATR02  BIT(1),             /* ..0 -- NO JCL CAPABILITY\n*                                       ..1 -- JCL CAPABILITY        */\n*     3 USATR03  BIT(1),             /* ..0 -- NO MOUNT CAPABILITY\n*                                       ..1 -- MOUNT CAPABILITY      */\n*     3 *        BIT(12),            /* RESERVED FOR IBM USE         */\n*\n*    2 UADSINST BIT(16),             /* FLAGS 16 THROUGH 31 ARE\n*                                       ..RESERVED FOR INSTALLATION\n*                                       ..USE                        */\n*   2 UADSUPTP PTR,                  /* PTR TO USER PROFILE TABLE    */\n*   2 UADSPWD1 PTR,                  /* OFFSET TO 1ST PASSWD OFFSET  */\n*   2 UADSPERP PTR,                  /* OFFSET TO PERFORMANCE GROUP  */\n*   2 UADSDEST CHAR(8),              /* DESTINATION                  */\n*   2 *        CHAR(24);             /* RESERVED                     */\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO DHEL0001;\n*%ELSE\n*   %GOTO GOB1    ;\n*%DHEL0001:  ;\n*%IF GNL='GNL'  %THEN                /* CHK TO DO GENERAL OFFSET     */\n*   %GOTO DHEL0002;\n*%ELSE\n*   %GOTO DOPOB   ;\n*%DHEL0002:  ;\n*%GOB1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO DHEL0003;\n*%ELSE\n*   %GOTO GOBA    ;\n*%DHEL0003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*             G E N E R A L   O F F S E T   B L O C K                 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSNNFL I UADSNNEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSNSUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSNDAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%GOBA   :  ;\n*\n*DECLARE\n*  1 UADSNODE BASED(UADSNPTR),\n*\n*   2 UADSNWD1 PTR,                  /* CHAIN POINTER                */\n*     3 UADSNFLG BIT(1),             /* ..0 -- CONTINUE CHAINING\n*                                       ..1 -- LAST OFFSET BLOCK FOR\n*                                       .......THIS OFFSET CHAIN     */\n*     3 *        BIT(7),             /* FLAGS 1 THRU 7 ARE RESERVED  */\n*     3 UADSNNEX PTR(24),            /* OFFSET TO NEXT OFFSET BLOCK  */\n*\n*   2 UADSNSUB PTR,                  /* OFFSET TO ASSOCIATED OFFSET  */\n*\n*   2 UADSNDAT PTR;                  /* OFFSET TO DATA BLOCK         */\n*%DOPOB  :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO UADLX001;\n*%ELSE\n*   %GOTO POB1    ;\n*%UADLX001:  ;\n*%IF POB='POB'  %THEN                /* CHK TO DO PASSWORD OFFSET    */\n*   %GOTO UADLX002;\n*%ELSE\n*   %GOTO DOAOB   ;\n*%UADLX002:  ;\n*%POB1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO UADLX003;\n*%ELSE\n*   %GOTO POBA    ;\n*%UADLX003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*            P A S S W O R D   O F F S E T   B L O C K                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSPFLG I UADSPNEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSPSUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSPDAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%POBA   :  ;\n*\n*DECLARE\n*  1 DPOB     BASED(DPOBPTR),\n*\n*   2 PFLG01   BIT(1),               /* ..0 -- CONTINUE CHAINING\n*                                       ..1 -- LAST PASSWORD FOR THIS\n*                                       .......USERID                */\n*   2 *        BIT(7),               /* FLAGS 1 THRU 7 ARE RESERVED  */\n*\n*   2 UADSPNEX PTR(24),              /* OFFSET TO NEXT PASSWD OFFSET\n*                                       ..BLOCK                      */\n*   2 UADSPSUB PTR,                  /* OFFSET TO ASSOCIATED ACCOUNT\n*                                       ..NUMBER OFFSET BLOCK        */\n*   2 UADSPDAT PTR;                  /* OFFSET TO PASSWORD DATA\n*                                       BLOCK                        */\n*%DOAOB  :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO DPOL0001;\n*%ELSE\n*   %GOTO AOB1    ;\n*%DPOL0001:  ;\n*%IF AOB='AOB'  %THEN                /* CHK TO DO ACCTNMBR OFFSET    */\n*   %GOTO DPOL0002;\n*%ELSE\n*   %GOTO DOROB   ;\n*%DPOL0002:  ;\n*%AOB1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO DPOL0003;\n*%ELSE\n*   %GOTO AOBA    ;\n*%DPOL0003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   A C C O U N T   N U M B E R                       *\n*                     O F F S E T   B L O C K                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSAFLG I UADSANEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSASUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSADAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%AOBA   :  ;\n*\n*DECLARE\n*  1 DNOB     BASED(DNOBPTR),\n*\n*   2 AFLG01   BIT(1),               /* ..0 -- CONTINUE CHAINING\n*                                       ..1 -- LAST ACCOUNT NUMBER FOR\n*                                       .......THIS PASSWORD CHAIN   */\n*   2 *        BIT(7),               /* FLAGS 1 THRU 7 ARE RESERVED  */\n*\n*   2 UADSANEX PTR(24),              /* OFFSET TO NEXT ACCOUNT\n*                                        NUMBER OFFSET BLOCK         */\n*\n*   2 UADSASUB PTR,                  /* OFFSET TO ASSOCIATED PROCNAME\n*                                       ..OFFSET BLOCK               */\n*   2 UADSADAT PTR;                  /* OFFSET TO ACCOUNT NUMBER DATA\n*                                       ..BLOCK                      */\n*%DOROB  :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO DNOL0001;\n*%ELSE\n*   %GOTO ROB1    ;\n*%DNOL0001:  ;\n*%IF ROB='ROB'  %THEN                /* CHK TO DO PROCNAME OFFSET    */\n*   %GOTO DNOL0002;\n*%ELSE\n*   %GOTO DOPDB   ;\n*%DNOL0002:  ;\n*%ROB1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO DNOL0003;\n*%ELSE\n*   %GOTO ROBA    ;\n*%DNOL0003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   P R O C E D U R E   N A M E                       *\n*                     O F F S E T   B L O C K                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSRFLG I UADSRNEX                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSRSUB                                  I         *\n*               I-------------------------------------------I         *\n*          8    I UADSRDAT                                  I         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%ROBA   :  ;\n*\n*DECLARE\n*  1 DROB     BASED(DROBPTR),\n*\n*   2 FLGR01   BIT(1),               /* ..0 -- CONTINUE CHAINING\n*                                       ..1 -- LAST PROCNAME FOR\n*                                       .......THIS ACCOUNT NUMBER   */\n*   2 *        BIT(7),               /* FLAGS 1 THRU 7 ARE RESERVED  */\n*\n*   2 UADSRNEX PTR(24),              /* OFFSET TO NEXT PROCNAME\n*                                       ..OFFSET BLOCK               */\n*   2 *        PTR,                  /* RESERVED BY ACCOUNT          */\n*   2 UADSRDAT PTR;                  /* OFFSET TO PROCNAME DATA\n*                                       BLOCK                        */\n*%DOPDB  :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO DROL0001;\n*%ELSE\n*   %GOTO PDB1    ;\n*%DROL0001:  ;\n*%IF PDB='PDB'  %THEN                /* CHK TO DO PASSWORD DATA      */\n*   %GOTO DROL0002;\n*%ELSE\n*   %GOTO DOADB   ;\n*%DROL0002:  ;\n*%PDB1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO DROL0003;\n*%ELSE\n*   %GOTO PDBA    ;\n*%DROL0003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              P A S S W O R D   D A T A   B L O C K                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSPCTR I RESERVED                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSPPWD                                  I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%PDBA   :  ;\n*\n*DECLARE\n*  1 DPOBD    BASED(UADSPPTR),\n*\n*   2 UADSPCTR PTR(8),               /* COUNT OF REFERENCES TO THIS\n*                                       ..DATA BLOCK                 */\n*   2 *        PTR(24),              /* RESERVED FOR ACCOUNT         */\n*   2 UADSPPWD CHAR(8);              /* PASSWORD                     */\n*%DOADB  :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO DPOLX001;\n*%ELSE\n*   %GOTO ADB1    ;\n*%DPOLX001:  ;\n*%IF ADB='ADB'  %THEN                /* CHK TO DO ACCT NO. DATA      */\n*   %GOTO DPOLX002;\n*%ELSE\n*   %GOTO DORDB   ;\n*%DPOLX002:  ;\n*%ADB1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO DPOLX003;\n*%ELSE\n*   %GOTO ADBA    ;\n*%DPOLX003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   A C C O U N T   N U M B E R                       *\n*                      D A T A     B L O C K                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSACTR I RESERVED                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSADRF (40 BYTES)                       I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I                                           I         *\n*               I----------I--------------------------------I         *\n*          44   I UADSALEN I UADSANUM (MAX OF 40 BYTES)     I         *\n*               I----------I                                I         *\n*               =                                           =         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%ADBA   :  ;\n*\n*DECLARE\n*  1 DNOBD    BASED(UADSAPTR),\n*\n*   2 UADSACTR PTR(8),               /* COUNT OF REFERENCES TO THIS\n*                                       ..DATA BLOCK                 */\n*   2 *        PTR(24),              /* RESERVED FOR ACCOUNT         */\n*   2 UADSADRF CHAR(40),             /* DRIVER DATA FIELD            */\n*   2 UADSALEN FIXED(8),             /* LENGTH OF FOLLOWING ACCOUNT\n*                                       ..NUMBER DATA FIELD          */\n*   2 UADSANUM CHAR(40);             /* ACCT NMBR DATA FIELD         */\n*%DORDB  :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO DNOLX001;\n*%ELSE\n*   %GOTO RDB1    ;\n*%DNOLX001:  ;\n*%IF RDB='RDB'  %THEN                /* CHK TO DO PROCNAME DATA      */\n*   %GOTO DNOLX002;\n*%ELSE\n*   %GOTO DOFSQ   ;\n*%DNOLX002:  ;\n*%RDB1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO DNOLX003;\n*%ELSE\n*   %GOTO RDBA    ;\n*%DNOLX003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   P R O C E D U R E   N A M E                       *\n*                      D A T A     B L O C K                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I----------I--------------------------------I         *\n*          0    I UADSRCTR I RESERVED                       I         *\n*               I----------I--------------------------------I         *\n*          4    I UADSRNAM                                  I         *\n*               I                                           I         *\n*               I----------I----------I---------------------I         *\n*          12   I RESERVED            I UADSRSIZ            I         *\n*               I----------I----------I---------------------I         *\n*          16   I UADSUNAM                                  I         *\n*               I                                           I         *\n*               I-------------------------------------------I         *\n*                                                                    */\n*%RDBA   :  ;\n*\n*DECLARE\n*  1 DROBD    BASED(UADSRPTR),\n*\n*   2 UADSRCTR PTR(8),               /* COUNT OF REFERENCES TO THIS\n*                                         DATA BLOCK                 */\n*   2 *        PTR(24),              /* RESERVED FOR ACCOUNT         */\n*   2 UADSRNAM CHAR(8),              /* LOGON PROCEDURE NAME         */\n*   2 *        CHAR(2),              /* RESERVED                     */\n*   2 UADSRSIZ FIXED(16),            /* REGION SIZE SPECIFIED IN THE\n*                                       ..NAMED PROCEDURE            */\n*   2 UADSUNAM CHAR(8);              /* ESOTERIC GROUP UNIT NAME     */\n*%DOFSQ  :  ;\n*%IF ALL\u00ac='ALL'  %THEN               /* CHK TO DO ALL                */\n*   %GOTO DUDL0001;\n*%ELSE\n*   %GOTO FSQ1    ;\n*%DUDL0001:  ;\n*%IF FSQ='FSQ'  %THEN                /* CHK TO DO FSQE DATA          */\n*   %GOTO DUDL0002;\n*%ELSE\n*   %GOTO DONE    ;\n*%DUDL0002:  ;\n*%FSQ1   :  ;\n*%IF DSPL='DSPL'  %THEN              /* CHK TO DISPLAY FORMAT        */\n*   %GOTO DUDL0003;\n*%ELSE\n*   %GOTO FSQEA   ;\n*%DUDL0003:  ;\n*@EJECT;\n*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                F R E E   S P A C E   Q U E U E                      *\n*                         E L E M E N T                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*               I---------------------I---------------------I         *\n*          0    I FSQELNTH            I FSQENEXT            I         *\n*               I---------------------I---------------------I         *\n*                                                                    */\n*%FSQEA  :  ;\n*\n*DECLARE\n*  1 UADSFSQE BASED(FSQEPTR),\n*   2 FSQELNTH PTR(15),              /* LENGTH OF FREE SPACE AREA    */\n*\n*   2 FSQENEXT PTR(15);              /* OFFSET TO NEXT FSQE          */\n*%DONE   :  ;\n./ ADD NAME=JVDENTER\n         MACRO , JVDENTER - V1M00 - 01/28/74\n&LABEL   JVDENTER                                                      +\n               &BASE=(11),                                             +\n               &REGS=(14,12),                                          +\n               &ID=,                                                   +\n               &VERSION=,                                              +\n               &DSA=72,                                                +\n               &ORIGIN=*,                                              +\n               &CFL=YES\n.*\n         LCLC  &EPID,&BASR,&START\n.*\n.BEGIN   AIF   ('&LABEL' EQ '').IDT\n.*\n         SPACE\n&LABEL   DS    0H\n         ENTRY &LABEL\n         SPACE\n.*\n.IDT     AIF   (T'&ID EQ 'O').IDD\n&EPID    SETC  '&ID'\n         AGO   .VER\n.IDD     AIF   ('&LABEL' EQ '').IDC\n&EPID    SETC  '&LABEL'\n         AGO   .VER\n.IDC     ANOP\n&EPID    SETC  '&SYSECT'\n.VER     AIF   (T'&VERSION EQ 'O').GEN\n&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'\n         MNOTE *,'       &EPID'\n.*\n.GEN     ANOP\n&BASR    SETC  '&BASE(1)'\n.*\n&START   SETC  '&ORIGIN'\n         AIF   ('&ORIGIN' NE '@').START\n&START   SETC  '&SYSECT'\n.START   AIF   ('&ORIGIN' EQ '*').HERE\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         BALR  &BASR,0\n         LA    14,*-&ORIGIN\n         SLR   &BASR,14\n         LR    2,13\n         SPACE\n.*\n         AGO   .GETDSA\n.HERE    ANOP\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         LR    &BASR,15\n         LR    2,13\n         SPACE\n.*\n.GETDSA  AIF   ('&DSA' EQ '0').NOCFL\n.*\n         LA    3,&DSA\n         GETMAIN R,LV=(3)\n         ST    3,0(1)\n         ST    13,4(1)\n         LR    13,1\n.*\n         AIF   ('&CFL' EQ 'NO').NOCFL\n.*\n         ST    1,8(2)\n.*\n.NOCFL   ANOP\n.*\n         LM    14,04,12(2)\n         SPACE\n.*\n         MEND\n./ ADD NAME=JVDEQU\n         MACRO\n&L       JVDEQU &O\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n.*\n         MEND\n./ ADD NAME=JVDLEAVE\n         MACRO , JVDLEAVE - V1M00 - 01/28/74\n&LABEL   JVDLEAVE                                                      +\n               &REGS=(14,12),                                          +\n               &RC=,                                                   +\n               &DSA=\n.*\n         LCLC  &L\n.*\n         AIF   ('&DSA' EQ '0').NODSA\n.*\n&LABEL   LH    0,2(13)\n         LR    1,13\n         L     13,4(13)\n.*\n         AIF   ('&RC' NE '(15)').FREE\n.*\n         LR    2,15\n.*\n.FREE    ANOP\n.*\n         FREEMAIN R,LV=(0),A=(1)\n.*\n.RCCHK   AIF   ('&RC' EQ '').NORC\n         AIF   ('&RC' NE '(15)').RTRN\n.*\n         LR    15,2\n.*\n         AGO   .RTRNN\n.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC\n.*\n         LR    15,&RC(1)\n.*\n.RTRNN   ANOP\n.*\n&L       RETURN &REGS,RC=(15)\n         SPACE\n.*\n         MEXIT\n.RTRNC   ANOP\n.*\n&L       RETURN &REGS,RC=&RC\n         SPACE\n.*\n         MEXIT\n.NORC    ANOP\n.*\n&L       RETURN &REGS\n         SPACE\n.*\n         MEXIT\n.NODSA   ANOP\n&L       SETC  '&LABEL'\n         AGO   .RCCHK\n.*\n         MEND\n./ ADD NAME=MSGLPA\n         MACRO\n&L       MSGLPA  &MSG,&O\n.*\n         LCLA  &N,&F\n.*\n&N       SETA  K'&MSG-2\n         AIF   (T'&O EQ 'O').GEN\n&F       SETA  &O\n.GEN     ANOP\n.*\n&L       DS    0A\n         DC    Y(&N+4,&F)\n         DC    C&MSG\n         SPACE\n.*\n         MEND\n./ ADD NAME=REGEQU\n         MACRO\n         REGEQU\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n./ ADD NAME=REGS\n         MACRO\n         REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n./ ADD NAME=TESTOPEN\n         MACRO\n&NAME    TESTOPEN &DCB,&EXIT\n&NAME    LOADIT 1,&DCB,A     REG 1 = DCB ADDRESS\n         TM 48(1),X'10'      TEST FOR SUCCESSFUL OPEN.\n         AIF ('&EXIT' EQ '').NOEXIT\n         LOADIT 15,&EXIT,A   REG 15 = EXIT ADDRESS\n         BCR 8,15            BRANCH IF NO OPEN.\n         MEXIT\n.NOEXIT  BO TEST&SYSNDX      BRANCH IF OPEN OK.\n         COMMENT 'OPEN TEST FAILED.'\n         SVC 3\nTEST&SYSNDX EQU *\n         MEND\n./ ADD NAME=TMPMAC\n         MACRO\n&LBL     TMPMAC &CMD=(0,0),&CBUF=,&PGM=,&PARM=,                        X\n               &DCB=0,&TASKLIB=0,&CMDLIB=YES,                          X\n               &EXEC=YES,&STACK=YES,&SCMD=NO,&STAX=YES,&CMDFAIL=MSG,   X\n               &MF=I\n         LCLA  &F,&F1,&A\n         LCLC  &C\n         LCLB  &CBF,&CBR,&CS,&CR1,&CR2,&PGF,&PGS,&PGR\n         LCLB  &PRF,&PRS,&PRR,&HF,&HS,&HR\n         LCLB  &DCBR,&DCB0,&TSKR\n         LCLB  &STRS\n         LCLB  &MFL,&MFI,&MFB,&MFE\n         AIF   (('&LBL' EQ '') OR ('&MF' EQ 'L') ).L\n&LBL     DS    0H\n.L       AIF   ('&CBUF' EQ '').L1\n&CBF     SETB  1\n&F       SETA  X'80'\n&C       SETC  '&CBUF'(1,1)\n         AIF   ('&C' NE '(').L8\n&CBR     SETB  1\n         AGO   .L8\n.L1      ANOP\n&C       SETC  '&CMD(1)'(1,1)\n         AIF   ('&C' NE '''').L2\n&CS      SETB  1\n&STRS    SETB  1\n         AGO   .L4\n.L2      AIF   ('&C' NE '(').L3\n&CR1     SETB  1\n.L3      ANOP\n&C       SETC  '&CMD(2)'(1,1)\n         AIF   ('&C' NE '(').L4\n&CR2     SETB  1\n.L4      AIF   ('&PGM' EQ '').L7A\n&PGF     SETB  1\n&F1      SETA  X'80'\n&C       SETC  '&PGM'(1,1)\n         AIF   ('&C' NE '''').L5\n&PGS     SETB  1\n&STRS    SETB  1\n         AGO   .L6\n.L5      AIF   ('&C' NE '(').L6\n&PGR     SETB  1\n.L6      AIF   ('&PARM' EQ '').L8\n&PRF     SETB  1\n&C       SETC  '&PARM'(1,1)\n         AIF   ('&C' NE '''').L7\n&PRS     SETB  1\n&STRS    SETB  1\n         AGO   .L8\n.L7      AIF   ('&C' NE '(').L8\n&PRR     SETB  1\n         AGO   .L8\n.L7A     AIF   ('&CMD(1)' NE '0').L8\n         AIF   ('&MF(1)' EQ 'L').L8\n         MNOTE 8,'CMD, CBUF, OR PGM MUST BE SPECIFIED'\n         MEXIT\n.L8      AIF   ('&DCB' NE 'ENV').L8A\n&F       SETA  &F+X'40'\n&DCB0    SETB  1\n         AGO   .L9\n.L8A     AIF   ('&DCB' NE '0').L8B\n&DCB0    SETB  1\n         AGO   .L9\n.L8B     ANOP\n&C       SETC  '&DCB'(1,1)\n         AIF   ('&C' NE '(').L9\n&DCBR    SETB  1\n.L9      ANOP\n&C       SETC  '&TASKLIB'(1,1)\n         AIF   ('&C' NE '(').L10\n&TSKR    SETB  1\n.L10     AIF   ('&CMDLIB' NE 'NO').L11\n&F       SETA  &F+X'20'\n.L11     AIF   ('&EXEC'  NE 'NO').L12\n&F       SETA  &F+X'10'\n.L12     AIF   ('&STACK' NE 'NO').L13\n&F       SETA  &F+X'02'\n.L13     AIF   ('&SCMD' NE 'NO').L14\n&F       SETA  &F+X'08'\n.L14     AIF   ('&STAX' NE 'NO').L15\n&F       SETA  &F+X'04'\n         AGO   .L17\n.L15     AIF   ('&STAX' EQ 'YES').L17\n&HF      SETB  1\n&C       SETC  '&STAX'(1,1)\n         AIF   ('&C' NE '''').L16\n&HS      SETB  1\n&STRS    SETB  1\n         AGO   .L17\n.L16     AIF   ('&C' NE '(').L17\n&HR      SETB  1\n.L17     AIF   ('&CMDFAIL' NE 'NOMSG').L18\n&F       SETA  &F+X'01'\n.L18     AIF   ('&MF' NE 'L').L19\n&MFL     SETB  1\n         AGO   .L23\n.L19     AIF   ('&MF' NE 'I').L20\n&MFI     SETB  1\n         AGO   .L23\n.L20     ANOP\n&C       SETC  '&MF(1)'\n         AIF   ('&C' NE 'B').L21\n&MFB     SETB  1\n         AGO   .L23\n.L21     AIF   ('&C' NE 'E').L22\n&MFE     SETB  1\n         AGO   .L23\n.L22     MNOTE 8,'UNRECOGNIZABE MF'\n         MEXIT\n.L23     AIF   (NOT &MFL).L37\n         AIF   (NOT (&CBR OR &CR1 OR &CR2 OR &PGR OR &PRR OR &DCBR OR  X\n               &TSKR)).L24\n         MNOTE 8,'R FORM NOT ALOWED WITH MF=L'\n         MEXIT\n.L24     ANOP\n&LBL     DS    0F                       FULLWORD ALIGNMENT\n         DC    AL1(&F)                  FLAGS\n         AIF   (NOT &DCB0).L25\n         DC    AL3(0)                   DCB ADDR\n         AGO   .L26\n.L25     DC    AL3(&DCB)                DCB ADDR\n.L26     AIF   (&PGF).L29\n         AIF   (&CBF).L28\n         AIF   (&CS).L27\n         DC    AL1(&CMD(2))             CMD LNTH\n         DC    AL3(&CMD(1))             CMD ADDR\n         AGO   .L31\n.L27     DC    AL1(L'TMPC&SYSNDX)       CMD LNTH\n         DC    AL3(TMPC&SYSNDX)         CMD ADDR\n         AGO   .L31\n.L28     DC    AL4(&CBUF)               PTR TO CBUF\n         AGO   .L31\n.L29     AIF   (&PGS).L30\n         DC    AL4(&PGM)                PGM NAME ADDR\n         AGO   .L31\n.L30     DC    AL4(TMPG&SYSNDX)         PGM NAME ADDR\n.L31     DC    AL1(&F1)                 FLAGS\n         DC    AL3(&TASKLIB)            TASKLIB\n         AIF   (&PRF).L32\n         DC    AL4(0)                   RETURN/COMPLETION CODE\n         AGO   .L34\n.L32     AIF   (&PRS).L33\n         DC    AL4(&PARM)               PARM PTR/RETURN-COMPLETION CODE\n         AGO   .L34\n.L33     DC    AL4(TMPR&SYSNDX)         PARM PTR/RETURN-COMPLETION CODE\n.L34     AIF   (&HF).L35\n         DC    AL4(0)                   UNUSED HERALD FIELD\n         AGO   .L38\n.L35     AIF   (&HS).L36\n         DC    AL4(&STAX)               HERALD/REPLY\n         AGO   .L38\n.L36     DC    AL4(TMPH&SYSNDX)         HERALD/REPLY\n.L37     AIF   (NOT (&STRS OR &MFI)).L38\n         B     TMPL&SYSNDX\n.L38     AIF   (NOT &CS).L39\nTMPC&SYSNDX DC C&CMD\n.L39     AIF   (NOT &PGS).L40\nTMPG&SYSNDX DC CL8&PGM                  PGM NAME\n.L40     AIF   (NOT &PRS).L41\n&A       SETA  K'&PARM\n&A       SETA  &A-2\nTMPR&SYSNDX DC 0F'0',XL1'80',AL3(TMPR&SYSNDX+6)\n         DC    F'&A'\n         DC    C&PARM\n.L41     AIF   (NOT &HS).L42\n&A       SETA  K'&STAX\n&A       SETA  &A-2\nTMPH&SYSNDX DC H'&A',C&STAX\n.L42     AIF   (NOT &MFL).L43\n         MEXIT\n.L43     AIF   (NOT &MFI).L44\nTMPT&SYSNDX DC 5F'0'                    CMD BLK FOR TMPSRV\nTMPL&SYSNDX LA 1,TMPT&SYSNDX GET TBL ADDR\n         AGO   .L45A\n.L44     AIF   (NOT &STRS).L45\nTMPL&SYSNDX DS 0H\n.L45     AIF   ('&MF(2)' EQ '(1)').L45A\n         LA    1,&MF(2)                 GET TBL ADDR\n.L45A    ANOP\n         XC    0(20,1),0(1)             CLEAR TBL\n.L46     AIF   (&DCBR).L47\n         AIF   (&DCB0).L48\n         LA    0,&DCB                   GET DCB ADDR\n         ST    0,0(1)                   STORE IN TBL\n         AGO   .L48\n.L47     ST    &DCB(1),0(1)             STORE DCB ADDR\n.L48     AIF   ('&F' EQ '0').L49\n         MVI   0(1),&F                  MOVE IN FLAGS\n.L49     AIF   (&PGF).L54\n         AIF   (&CBF).L53A\n         AIF   (&CS).L53\n         AIF   (&CR1).L50\n         LA    0,&CMD(1)                GET CMD ADDR\n         ST    0,4(1)                   STORE IN LST\n         AGO   .L51\n.L50     ST    &CMD(1),4(1)\n.L51     AIF   (&CR2).L52\n         MVI   4(1),&CMD(2)             MOVE IN LNTH\n         AGO   .L57\n.L52     STC   &CMD(2),4(1)             STORE CMD LNTH\n         AGO   .L57\n.L53     LA    0,TMPC&SYSNDX            GET CMD ADDR\n         ST    0,4(1)                   STORE IN TBL\n         MVI   4(1),L'TMPC&SYSNDX       MOVE IN LNTH\n         AGO   .L57\n.L53A    AIF   (&CBR).L53B\n         LA    0,&CBUF                  GET CBUF ADDR\n         ST    0,4(1)                   STORE IN TBL\n         AGO   .L57\n.L53B    ST    &CBUF(1),4(1)            STORE CBUF ADDR\n         AGO   .L57\n.L54     AIF   (&PGS).L56\n         AIF   (&PGR).L55\n         LA    0,&PGM                   GET PGM NAME ADDR\n         ST    0,4(1)                   STORE IN TABLE\n         AGO   .L57\n.L55     ST    &PGM(1),4(1)             STORE PGM NAME ADDR\n         AGO   .L57\n.L56     LA    0,TMPG&SYSNDX            GET PGM NAME ADDR\n         ST    0,4(1)                   STORE IN TABLE\n.L57     AIF   ('&TASKLIB' EQ '0').L59\n         AIF   (&TSKR).L58\n         LA    0,&TASKLIB               GET ADDR OF TSK DCB\n         ST    0,8(1)                   STORE IN TAB\n         AGO   .L59\n.L58     ST    &TASKLIB(1),8(1)         STORE TSK DCB ADDR\n.L59     AIF   ('&F1' EQ '0').L60\n         MVI   8(1),&F1                 MOVE IN FLGS\n.L60     AIF   (NOT &PRF).L63\n         AIF   (&PRS).L62\n         AIF   (&PRR).L61\n         L     0,&PARM                  GET PARM ADDR\n         ST    0,12(1)                  STORE IN TABLE\n         AGO   .L63\n.L61     ST    &PARM(1),12(1)           ST PRM ADDR IN TABLE\n         AGO   .L63\n.L62     LA    0,TMPR&SYSNDX            GET PARM ADDR\n         ST    0,12(1)                  STORE IN TABLE\n.L63     AIF   (NOT &HF).L67\n         AIF   (&HS).L65\n         AIF   (&HR).L64\n         LA    0,&STAX                  GET HERALD ADDR\n         ST    0,16(1)                  STORE IN TABLE\n         AGO   .L67\n.L64     ST    &STAX(1),16(1)           STORE HERALD ADDR\n         AGO   .L67\n.L65     LA    0,TMPH&SYSNDX            GET HERALD ADDR\n         ST    0,16(1)                  STORE IN TBL\n.L67     AIF   (&MFB).L68\n         LINK  EP=TMPSRV\n.L68     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MYID": {"ttr": 15620, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x008\\x00\\x95\\x17\\x0f\\x01\\x19\\x05\\x7f!'\\x00-\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "1995-06-19T00:00:00", "modifydate": "2019-02-26T21:27:38", "lines": 45, "newlines": 40, "modlines": 0, "user": "SBGOLOB"}, "text": "*      TSO COMMAND PROCESSOR TO DISPLAY THE USERID OF THE INVOKER.\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nMYID     CSECT\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING MYID,R12            TELL THE ASSEMBLER R12 IS BASE\n         LR    R15,R13             SAVE CALLER'S SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          STORE HIS SAVEAREA INTO MINE + 4\n         ST    R13,8(,R15)         STORE MINE INTO HIS SAVEAREA + 8\nRUNCHAIN L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R3,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R3)       POINT TO JSCB.\n         L     R3,X'108'(,R3)      POINT TO PSCB.\n         MVC   MSGLINE+13(7),0(R3)    MOVE USERID IN FROM PSCB\n         CLC   MSGLINE+13(7),=C'>7BYTES'\n         BNE   SEVENCHR\n         MVC   MSGLINE+13(8),X'54'(R3)\nSEVENCHR DS    0H\n         TPUT  MSGLINE,L'MSGLINE      DISPLAY THE MESSAGE ON THE TUBE\nRETURN   DS    0H\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)     RELOAD REGISTERS\n         BR    R14                 RETURN TO CALLER\nSAVE     DC    18F'0'              MY SAVE AREA\nMSGLINE  DC    C'MY USERID IS         '      LINE FOR MESSAGE\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MYID$": {"ttr": 15622, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00U\\x01\\x05\\x13_\\x01\\x19\\x05\\x7f!5\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2005-05-15T00:00:00", "modifydate": "2019-02-26T21:35:55", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(MYID)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   MYID\n SETSSI  CB497247\n SETCODE AC(0)\n NAME    MYID(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MYIDN": {"ttr": 15624, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x19\\x9f\\x00\\x95\\x19\\x9f\\x16I\\x005\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-07-18T00:00:00", "modifydate": "1995-07-18T16:49:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "SBGCSC"}, "text": "*      M Y I D   P R O G R A M    -    A   T S O   C O M M A N D\n*\n*      TSO COMMAND PROCESSOR TO DISPLAY THE USERID OF THE INVOKER.\n*\n*        REGISTER EQUATES\n         YREGS                ,    IBM'S REGISTER EQUATE MACRO\nSP000    EQU   0                   DEFINE SUBPOOL TO BE 0\n*\nMYID     CSECT\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS R14 THRU R12\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING MYID,R12            TELL THE ASSEMBLER, R12 IS THE BASE\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n*  The address of the obtained storage is placed into Register 1.\n         ST    R13,4(,R1)          SAVE CALLER'S SAVEAREA ADDRESS\n         ST    R1,8(,R13)          STORE OUR SAVEAREA ADDRESS IN HIS\n         LR    R13,R1              POINT REGISTER 13 TO OUR SAVE AREA\n         USING SAVEAREA,R13        TELL ASSEMBLER\nRUNCHAIN L     R3,16               POINT TO CVT. ADDR IS IN LOW STORAGE\n         USING CVT,R3\n         L     R3,CVTTCBP          POINT TO TCB/ASCB WORDS, \"0\" OFF CVT\n         L     R3,4(,R3)           POINT TO TCB, \"4\" OFF TCB/ASCB WORDS\n         DROP  R3\n         USING TCB,R3\n         L     R3,TCBJSCB          POINT TO JSCB. X'B4' OFF CURRENT TCB\n         DROP  R3\n         USING IEZJSCB,R3\n         L     R3,JSCBPSCB         POINT TO PSCB. X'108' OFF THE JSCB\n         DROP  R3\n         USING PSCB,R3\n         MVC   MESSAGE(20),MSGLINE        MOVE TEXT TO VARIABLE AREA\n         MVC   MESSAGE+13(7),PSCBUSER     MOVE MY USERID INTO MESSAGE\n         DROP  R3\n         TPUT  MESSAGE,L'MESSAGE  DISPLAY THE WHOLE MESSAGE ON THE TUBE\nRETURN   DS    0H\n         LR    R1,R13              SET UP FOR SAVEAREA FREEMAIN\n         L     R13,4(,R13)         POINT TO CALLER'S SAVEAREA\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R14,R12,12(R13)     RELOAD THE CALLER'S REGISTERS\n         BR    R14                 RETURN TO CALLER\nMSGLINE  DC    CL20'MY USERID IS        '      CONSTANT PART OF MESSAGE\n*\nSAVEAREA DSECT\n         DS    18F                 DEFINE MY SAVEAREA - 18 FULLWORDS\nMESSAGE  DS    CL20                VARIABLE MESSAGE AREA\n         DS    0D                  ALIGN ON DOUBLEWORD\nDATALEN  EQU   *-SAVEAREA          DEFINE LENGTH OF VARIABLE STORAGE\n*\n         CVT   DSECT=YES           CVT mapping macro\n         IKJTCB                    TCB mapping macro\n         IEZJSCB                   JSCB mapping macro\n         IKJPSCB                   PSCB mapping macro\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MYIDN$": {"ttr": 15626, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00Q\\x01\\x05\\x13_\\x01\\x19\\x05\\x7f!6\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2005-05-15T00:00:00", "modifydate": "2019-02-26T21:36:51", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(MYIDN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   MYID\n SETSSI  CB497247\n SETCODE AC(0)\n NAME    MYIDN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MYIDP": {"ttr": 15628, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00X\\x00\\x95\\x19\\x9f\\x01\\x19\\x05\\x7f!S\\x01\\x16\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1995-07-18T00:00:00", "modifydate": "2019-02-26T21:53:58", "lines": 278, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": "*      M Y I D   P R O G R A M    -    A   T S O   C O M M A N D\n*\n*      TSO COMMAND PROCESSOR TO DISPLAY THE USERID OF THE INVOKER.\n*\n*        This version uses the TSO PUTLINE interface and will\n*        show the userid when run under TSO-in-batch or TSSO.\n*\n*        REGISTER EQUATES\n         YREGS                ,    IBM'S REGISTER EQUATE MACRO\nSP000    EQU   0                   DEFINE SUBPOOL TO BE 0\n*\nMYID     CSECT\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS R14 THRU R12\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING MYID,R12            TELL THE ASSEMBLER, R12 IS THE BASE\n         LR    R5,R1               SAVE CPPL POINTER\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n*  The address of the obtained storage is placed into Register 1.\n         ST    R13,4(,R1)          SAVE CALLER'S SAVEAREA ADDRESS\n         ST    R1,8(,R13)          STORE OUR SAVEAREA ADDRESS IN HIS\n         LR    R13,R1              POINT REGISTER 13 TO OUR SAVE AREA\n         USING SAVEAREA,R13        TELL ASSEMBLER\n         LR    R1,R5               RESTORE CPPL POINTER\n         LR    R11,R5              POINT TO CPPL.\nRUNCHAIN L     R3,16               POINT TO CVT. ADDR IS IN LOW STORAGE\n         USING CVT,R3\n         L     R3,CVTTCBP          POINT TO TCB/ASCB WORDS, \"0\" OFF CVT\n         L     R3,4(,R3)           POINT TO TCB, \"4\" OFF TCB/ASCB WORDS\n         DROP  R3\n         USING TCB,R3\n         L     R3,TCBJSCB          POINT TO JSCB. X'B4' OFF CURRENT TCB\n         DROP  R3\n         USING IEZJSCB,R3\n         L     R3,JSCBPSCB         POINT TO PSCB. X'108' OFF THE JSCB\n         DROP  R3\n         USING PSCB,R3\n         MVC   MESSAGE(23),MSGLINE        MOVE TEXT TO VARIABLE AREA\n         CLI   PSCBUSER,C'>'\n         BE    BIGID\n         MVC   MESSAGE+15(7),PSCBUSER     MOVE MY USERID INTO MESSAGE\n         B     RUNCHANS\nBIGID    DS    0H\n         MVC   MESSAGE+15(8),PSCB+X'54'   MOVE MY USERID INTO MESSAGE\n         DROP  R3\n* ---- >\nRUNCHANS L     R5,X'10'             CVT\n         L     R5,X'C4'(,R5)        POINT TO SMCA\n         LA    R5,X'10'(,R5)        POINT TO SYSID\n         MVC   MESSAGS(23),MSGLINS        MOVE TEXT TO VARIABLE AREA\n         MVC   MESSAGS+15(4),0(R5)    MOVE SYSID INTO MESSAGE\n* ---- >\nRUNCHANL L     R5,X'10'             CVT\n         S     R5,=F'32'            POINT TO SYSTEM LEVEL\n         MVC   MESSAGL(23),MSGLINL        MOVE TEXT TO VARIABLE AREA\n         MVC   MESSAGL+15(7),0(R5)    MOVE SYSTEM LEVEL INTO MESSAGE\n* ---- >\n         BAL   R9,CPPLPTRS\n         BAL   R9,SETIOPL\n         MVI   LINEB,C' '          INITIALIZE BLANK\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BAL   R9,PGMTITLE\n*        TPUT  MESSAGE,L'MESSAGE  DISPLAY THE WHOLE MESSAGE ON THE TUBE\n         MVC   LINE(137),LINE-1\n         MVC   LINET(L'MESSAGE),MESSAGE\n         LA    R0,L'MESSAGE+7\n         BAL   R4,MSG\n         MVC   LINE(137),LINE-1\n         MVC   LINET(L'MESSAGS),MESSAGS\n         LA    R0,L'MESSAGS+7\n         BAL   R4,MSG\n         MVC   LINE(137),LINE-1\n         MVC   LINET(L'MESSAGL),MESSAGL\n         LA    R0,L'MESSAGL+7\n         BAL   R4,MSG\n         MVC   LINE(137),LINE-1\n         LA    R0,23\n         BAL   R4,MSG\n         B     EOJ0\nEOJ0     DS    0H\n         SR    R15,R15\n         B     RETURN\nEOJ4     DS    0H\n         LA    R15,4\n         B     RETURN\nEOJ8     DS    0H\n         LA    R15,8\n         B     RETURN\nRETURN   DS    0H\n         LR    R1,R13              SET UP FOR SAVEAREA FREEMAIN\n         L     R13,4(,R13)         POINT TO CALLER'S SAVEAREA\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         LM    R14,R12,12(R13)     RELOAD THE CALLER'S REGISTERS\n         BR    R14                 RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n         USING CPPL,R11\nCPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:\n         ST    R6,SAVEUPT             THE UPT\n         L     R6,CPPLPSCB\n         ST    R6,SAVEPSCB            THE PSCB\n         L     R6,CPPLECT\n         ST    R6,SAVEECT             THE ECT\n         L     R6,CPPLCBUF\n         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS\n         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF\n         LA    R6,0\n         BR    R9\n         DROP  R11\n************************************************************\nPGMTITLE DS    0H\n         MVC   LINE(137),LINE-1\n         MVC   LINET(L'MESSAGET),MESSAGET\n         LA    R0,L'MESSAGET+7\n         BAL   R4,MSG\n         MVC   LINE(137),LINE-1\n         MVC   LINET(L'MESSAGEU),MESSAGEU\n         LA    R0,L'MESSAGEU+7\n         BAL   R4,MSG\n         BR    R9\n************************************************************\n*        SET UP IOPL FOR PUTLINE                           *\n************************************************************\n         SPACE\n         USING CPPL,R11\nSETIOPL  LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         DROP  R11\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,CVTPTR          POINT TO CVT                  JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1\n         DROP  R15                                               JDM1\n         B     PUTLOADX            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         BR    R9\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTMSG ROUTINE                                    *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTSAVE\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n************************************************************\n*        PUTLINE ROUTINE                                   *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTSAVE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTSAVE\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY\n*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.\n         BAL   R14,PUTLINE\n         MVC   LINE(137),LINE-1\n         BR    R4\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFULLZERO DC    F'0'\nMSGLINE  DC    CL23'My Userid is:         '    CONSTANT PART OF MESSAGE\nMSGLINS  DC    CL23'System id is:         '    CONSTANT PART OF MESSAGE\nMSGLINL  DC    CL23'System level:         '    CONSTANT PART OF MESSAGE\nMESSAGET DC    C'MYID - Ver. 1.8 - &SYSDATE '\nMESSAGEU DC    C'---- - -------- - -------- '\n*\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n*\n         SPACE 1\nSAVEAREA DSECT\n         DS    18F                 DEFINE MY SAVEAREA - 18 FULLWORDS\nSAVECPPL DS    F                   SAVE THE CPPL\nSAVEUPT  DS    F                   SAVE FOR IKJIFRIF\nSAVEPSCB DS    F                   SAVE FOR IKJIFRIF\nSAVEECT  DS    F                   SAVE FOR IKJIFRIF\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nMESSAGE  DS    CL23                VARIABLE MESSAGE AREA\nMESSAGS  DS    CL23                VARIABLE MESSAGE AREA\nMESSAGL  DS    CL23                VARIABLE MESSAGE AREA\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                   USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                  USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                  USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                   USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                  USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE\nPUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137\nLINET    EQU   LINE+7\n         DS    0D                  ALIGN ON DOUBLEWORD\nDATALEN  EQU   *-SAVEAREA          DEFINE LENGTH OF VARIABLE STORAGE\n*\n         CVT   DSECT=YES           CVT mapping macro\n         IKJTCB                    TCB mapping macro\n         IKJCPPL                   CPPL\n         IKJIOPL                   IOPL\n         IKJUPT                    UPT\n         IKJECT                    ECT\n         IEZJSCB                   JSCB mapping macro\n         IKJPSCB                   PSCB mapping macro\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MYIDP$": {"ttr": 15873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\"\\x01\\x05\\x13_\\x01\\x19\\x05\\x7f!X\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2005-05-15T00:00:00", "modifydate": "2019-02-26T21:58:22", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(MYIDP)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   MYID\n SETSSI  CB497247\n SETCODE AC(0)\n NAME    MYIDP(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANELS": {"ttr": 15875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x00\\x16\\x8f\\x01\\x00\\x16\\x8f\\x13\\x13\\x01\\x00\\x01\\x00\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-06-16T00:00:00", "modifydate": "2000-06-16T13:13:55", "lines": 256, "newlines": 256, "modlines": 0, "user": "WSBG"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "SENDX": {"ttr": 15880, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x05\\x11/\\x01\\x05\\x11/\\x17\\x03\\x00\\xa8\\x00\\xa8\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-04-22T00:00:00", "modifydate": "2005-04-22T17:03:00", "lines": 168, "newlines": 168, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=$NOTE    0100-05112-05112-1702-00030-00030-00000-SBGOLOB\nInstallation instructions for SENDX.\n\n    (I renamed the original CLIST from SEND to SENDX so it\n    doesn't interfere with the TSO SEND command.  I didn't\n    want to bother with typing %SEND and I thought that SENDX\n    was easier.)\n\n1.  Copy SENDX to a library in your SYSPROC concatenation on TSO.\n\n2.  Copy SENDP to a panel library in your ISPPLIB concatenation.\n\nType SENDX and you're ready to go.\n\n  Sam Golob\n  sbgolob@att.net         or sbgolob@cbttape.org\n   ---------------------------------------------------------\nNote from John Kalinich, who sent this to me.\n\nSam,\n\nA former co-worker of mine wrote the SEND clist.  His name\nis Mark Reschke and he now lives in Caribou, Maine.\n\n  mark.reschke@noaa.gov.\n  jkalinic@csc.com\n\nRegards,\nJohn K\n\n\n./ ADD NAME=SENDP    0102-91191-92233-0645-00035-00033-00000-TRIDJK\n)ATTR DEFAULT(%+_)\n       %   TYPE(TEXT) INTENS(HIGH)\n       +   TYPE(TEXT) INTENS(LOW)\n       _   TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)\n       \u00ac   TYPE(INPUT) INTENS(HIGH) CAPS(ON)  JUST(LEFT)\n)BODY\n%-------------------------- SEND COMMAND ENTRY PANEL ---------------------------\n%ENTER PARAMETERS BELOW:_ZCMD                                                  +\n+\n+   MESSAGE TO BE SENT.  SPECIFY TWO SINGLE QUOTES ('')\n+   WHEN ONE (') IS TO BE SENT.\n%   ===>_MSG1                                                                 ++\n+       _MSG2                                                                 ++\n+       _MSG3                                                                 ++\n+\n+   ENTER A%LIST OF USERS+TO RECEIVE MESSAGE.  SEPARATE THEM BY COMMAS (,).\n+     OR\n+   ENTER%\"OPER\"+TO SEND TO THE OPERATOR.\n+     OR\n+   ENTER%\"BRDCST\"+TO SEND MESSAGE TO EVERYBODY AND PLACE IT IN THE BROADCAST\n          DATASET FOR LATER SENDING TO USERS WHO LOGON.\n+     OR\n+   ENTER%\"DELETE\"+WITH A MESSAGE NUMBER IN ONE OR MORE LINES ABOVE TO DELETE\n          A MESSAGE FROM THE BROADCAST DATASET.\n+     OR\n+   ENTER%\"LIST\"+TO LIST THE BROADCAST DATASET AND ASSOCIATED MESSAGE NUMBERS.\n%   ===>\u00acULIST                                                                 +\n)INIT\n  IF (&ULIST = BRDCST,DELETE)\n    &ULIST = &Z\n)PROC\n  IF (&ULIST \u00ac= LIST)\n    VER(&MSG1,NONBLANK)\n    VER(&ULIST,NONBLANK)\n)END\n./ ADD NAME=SENDX    0108-91191-05112-1121-00100-00100-00000-TRIDJK\nPROC 0 DEBUG\nIF &DEBUG = &STR(DEBUG) THEN -\n  CONTROL MSG NOFLUSH LIST CONLIST SYMLIST PROMPT ASIS\nELSE -\n  CONTROL NOMSG NOFLUSH NOLIST NOCONLIST NOSYMLIST ASIS\nDISP: +\nISPEXEC DISPLAY PANEL(SENDP)\nIF &LASTCC = 8 THEN EXIT\nSET BLANKS = &STR(                                        )\nSET BLANKS = &STR(&BLANKS)&STR(                                )\nSET MSG1 = &STR(&MSG1)&SUBSTR(1:&EVAL(70-&LENGTH(&STR(&MSG1))),&BLANKS)\nIF &STR(&ULIST) = OPER -\n  THEN -\n    DO\n      SEND '&STR(&MSG1)'\n      IF &LENGTH(&STR(&MSG2)) > 0 -\n        THEN -\n          DO\n            SET MSG2 = &STR(&MSG2)+\n              &SUBSTR(1:&EVAL(70-&LENGTH(&STR(&MSG2))),&BLANKS)\n            SEND '&STR(&MSG2)'\n          END\n      IF &LENGTH(&STR(&MSG3)) > 0 -\n        THEN -\n          DO\n            SET MSG3 = &STR(&MSG3)+\n              &SUBSTR(1:&EVAL(70-&LENGTH(&STR(&MSG3))),&BLANKS)\n            SEND '&STR(&MSG3)'\n          END\n    END\n  ELSE -\n    IF &STR(&ULIST) = BRDCST -\n      THEN -\n        DO\n          OPER\n          SEND '&STR(&MSG1)',ALL,LOGON\n          IF &LENGTH(&STR(&MSG2)) > 0 -\n            THEN -\n              SEND '&STR(&MSG2)',ALL,LOGON\n          IF &LENGTH(&STR(&MSG3)) > 0 -\n            THEN -\n              SEND '&STR(&MSG3)',ALL,LOGON\n          DATA\n          END\n          ENDDATA\n        END\n      ELSE -\n        IF &STR(&ULIST) = DELETE -\n          THEN -\n            DO\n              SET MSG1 = &MSG1\n              SET MSG2 = &MSG2\n              SET MSG3 = &MSG3\n              OPER\n              SEND &MSG1,DELETE\n              IF &LENGTH(&STR(&MSG2)) > 0 -\n                THEN -\n                    SEND &MSG2,DELETE\n              IF &LENGTH(&STR(&MSG3)) > 0 -\n                THEN -\n                    SEND &MSG3,DELETE\n              DATA\n              END\n              ENDDATA\n            END\n          ELSE -\n            IF &STR(&ULIST) = LIST -\n              THEN -\n                DO\n                  ISPEXEC CONTROL DISPLAY LINE START(1)\n                  OPER\n                  SEND LIST\n                  DATA\n                  END\n                  ENDDATA\n                END\n              ELSE -\n                DO\n                  SEND '&STR(&MSG1)' USER(&ULIST) LOGON\n                  IF &LENGTH(&STR(&MSG2)) > 0 -\n                    THEN -\n                      DO\n                        SET MSG2 = &STR(&MSG2)+\n                          &SUBSTR(1:&EVAL(70-&LENGTH(&STR(&MSG2))),+\n                          &BLANKS)\n                        SEND '&STR(&MSG2)' USER(&ULIST) LOGON\n                      END\n                  IF &LENGTH(&STR(&MSG3)) > 0 -\n                    THEN -\n                      DO\n                        SET MSG3 = &STR(&MSG3)+\n                          &SUBSTR(1:&EVAL(70-&LENGTH(&STR(&MSG3))),+\n                          &BLANKS)\n                        SEND '&STR(&MSG3)' USER(&ULIST) LOGON\n                      END\n                END\nGOTO DISP\nEND\n/* J. KALINICH, 314-552-3232 */\n/* SENDS MESSAGES TO OPERATOR OR TSO USERS */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSTM": {"ttr": 15884, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x95\\x17\\x0f\\x00\\x962o\\x12\\x16\\x00&\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1995-06-19T00:00:00", "modifydate": "1996-11-21T12:16:00", "lines": 38, "newlines": 40, "modlines": 0, "user": "SBGCSC"}, "text": "*      TSO COMMAND PROCESSOR TO DISPLAY THE SYSTEM ID OF THE INVOKER.\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nSYSTM    CSECT\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING SYSTM,R12           TELL THE ASSEMBLER R12 IS BASE\n         LR    R15,R13             SAVE CALLER'S SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          STORE HIS SAVEAREA INTO MINE + 4\n         ST    R13,8(,R15)         STORE MINE INTO HIS SAVEAREA + 8\nRUNCHAIN L     R5,X'10'             CVT\n         L     R5,X'C4'(,R5)        POINT TO SMCA\n         LA    R5,X'10'(,R5)        POINT TO SYSID\n         MVC   MSGLINE+13(4),0(R5)    MOVE USERID IN FROM PSCB\n         TPUT  MSGLINE,L'MSGLINE      DISPLAY THE MESSAGE ON THE TUBE\nRETURN   DS    0H\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)     RELOAD REGISTERS\n         BR    R14                 RETURN TO CALLER\nSAVE     DC    18F'0'              MY SAVE AREA\nMSGLINE  DC    C'SYSTEM ID IS        '      LINE FOR MESSAGE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOB": {"ttr": 15886, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"BROWSE DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOE": {"ttr": 15888, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"EDIT   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOR": {"ttr": 16129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/**************************************************/\n/* NOTE:  Use of this EXEC requires the REVIEW    */\n/*        command from CBT file 134 or 135.       */\n/**************************************************/\n/* REVIEW command output.  This has an advantage  */\n/* over TSOE/TSOB/TSOV in that it works under     */\n/* native TSO (TSO READY) without ISPF.           */\n/**************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(SYSALLDA) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress TSO     \"REVIEW       \"||ddnm||\"    FILE\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOV": {"ttr": 16131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/****************************************************/\n/* There is really no advantage to using TSOV over  */\n/* TSOE since a temporary data set is used, but     */\n/* to complete the TSO* set of EXECs - here it is.  */\n/****************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"VIEW   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WJMAINT": {"ttr": 16133, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x00/\\x01\\x01\\x00/\\x16\\x06\\x00p\\x00p\\x00\\x00\\xe6\\xd1\\xc5\\xd5\\xe2\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-02T00:00:00", "modifydate": "2001-01-02T16:06:00", "lines": 112, "newlines": 112, "modlines": 0, "user": "WJENSEN"}, "text": "./ ADD NAME=$NOTE    0103-01002-01002-1600-00032-00020-00000-WSBG\nSubject: A frontend to your BRODCAST maintenance programs\nDate: Tue, 2 Jan 2001 18:51:57 +0100\nFrom: \"WJensen\" <wjensen@image.dk>\nTo: \"Sam Golob\" <sbgolob@ibm.net>\n\nSam,\nSam Knutson thought that the following frontend perhaps should be added to\nyour CBT Brodcast uilities.\n\nrgds\n Willy Jensen\n\nThe maintenance programs are found as CBT file 247. What I have here is a\nsimple REXX program, which let you delete messages in the SYS1.BRODCAST\ndataset, based upon the number of entries for any user.\n\nNote:  This allows for deleting all messages for an id, based on a\n       threshold of how many outstanding messages the id has.  You\n       might want to do this more intelligently.  See BCMISPF from\n       Vinh Vu.  (SG)\n\nThis file contains\n1. JCL to run the Broadcast maint REXX\n2. The REXX itself - called BRODMN01\n\nNote:  I changed Willy's exec to use the BCMDEL2 program instead of\n       BCMDEL, and also to use BCMSCAN instead of the BCSCAN name.\n       BCMSCAN had to be fixed, to take the wrong fill character out\n       of the message count field.  It had been X'20' instead of X'40'.\n\n       (Sam Golob)\n\n./ ADD NAME=BRODMN01 0101-01002-01002-1509-00038-00038-00000-WSBG\n/* REXX\n\n   extract userinfo and message count from output from pgm\n   BCMLIST.\n   generate message delete commands for any user whose msgcount\n   exeeds the number specified as parm.\n*/\n\n arg prm\n Address tso\n \"Execio * diskr brodmap (finis\"\n\n do queued()\n   pull s\n   if pos('WAITING >',s)>0 then leave\n end\n i=0\n do queued()\n   pull s\n   if pos('NUMBER OF TSO',s)>0 then leave\n   parse var s u1 c1 u2 c2 u3 c3 .\n   i=i+1; l.i=left(u1,8) right(c1,4)\n   i=i+1; l.i=left(u2,8) right(c2,4)\n   i=i+1; l.i=left(u3,8) right(c3,4)\n end\n \"delstack\"\n \"dropbuf\"\n l.0=i\n if prm = \"\" then prm = 100\n say \"limit\" prm\n do i=1 to l.0\n   say l.i\n   parse var l.i u c\n   if c >= prm then do\n     say \"Cleaning\" u\n     \"TSOEXEC BCMDEL2\" u\n   end\n end\n./ ADD NAME=JCL      0104-01002-01002-1540-00039-00032-00000-WSBG\n//WSBGBCM  JOB ,'SAM GOLOB',CLASS=S,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//***    !!!!!!! JCL !!!!!!!!\n//*\n//* SYS1.BRODCAST DELETE MSGS BY MSGCOUNT\n//*\n//* list statistics before\n//* BCMSCAN ORG CBT FILE 247\n//BRODCAST EXEC PGM=BCMSCANA\n//STEPLIB  DD  DISP=SHR,DSN=WSBG.LOAD\n//BRODMAP  DD  SYSOUT=*\n//BRODSNAP DD  DSN=NULLFILE,DISP=OLD\n//BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR,UNIT=SYSALLDA,VOL=SER=\n//*\n//BRODCAST EXEC PGM=BCMSCANA\n//STEPLIB  DD  DISP=SHR,DSN=WSBG.LOAD\n//BRODMAP  DD  DSN=&&MAP,UNIT=VIO,SPACE=(TRK,(1,1)),\n//             RECFM=FB,LRECL=133,BLKSIZE=1330,DISP=(,PASS)\n//BRODSNAP DD  DSN=NULLFILE,DISP=OLD\n//BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR,UNIT=SYSALLDA,VOL=SER=\n//*\n//* this step does the deletion\n//* program BCMDEL2 (org CBT file 247) must be available for this step\n//LIST     EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSPROC  DD DSN=W$$.CLIST,DISP=SHR\n//BRODMAP  DD  DSN=&&MAP,DISP=OLD\n//BRODCAST DD  DISP=SHR,DSN=SYS1.BRODCAST\n//SYSTSIN  DD *\n /* PARM FOR BRODSC01 IS MSGCOUNT LIMIT */\n %BRODMN01 50\n//*\n//* list statistics after\n//BRODCAST EXEC PGM=BCMSCANA\n//STEPLIB  DD  DISP=SHR,DSN=WSBG.LOAD\n//BRODMAP  DD  SYSOUT=*\n//BRODSNAP DD  DSN=NULLFILE,DISP=OLD\n//BRODCAST DD  DSN=SYS1.BRODCAST,DISP=SHR,UNIT=SYSALLDA,VOL=SER=\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT247/FILE247.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT247", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}