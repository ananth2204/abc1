BCMNOTFY TITLE 'BCMNOTFY - SEND OR DELETE A BRODCAST NOTIFICATION MSG'
         SPACE 1
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  DOCUMENTATION:   THIS PROGRAM CAN BE RUN AS A TSO-IN-BATCH         *
*                   COMMAND.   NEED NOT BE AUTHORIZED.                *
*                                                                     *
*         SYNTAX:   BCMNOTFY nnn 'text of message    '                *
*             OR:   BCMNOTFY nnn "text of message    "                *
*             OR:   BCMNOTFY nnn text of message                      *
*             OR:   BCMNOTFY nnn -DEL(ETE)                            *
*             OR:   BCMNOTFY nnn -BLA(NKS)                            *
*                                                                     *
*       FUNCTION:   TO SEND A GLOBAL NOTIFICATION MESSAGE TO ALL      *
*                   TSO USERS, THROUGH THE NOTIFICATION SECTION OF    *
*                   SYS1.BRODCAST.  THIS REPLACES THE OPER SEND       *
*                   SUBCOMMAND.                                       *
*                                                                     *
*       NOTE:       BCMNOTFY UPDATES THE BRODCAST DATASET DIRECTLY,   *
*                   AND REPORTS THE NOTICES ONLY FROM IT.  AT         *
*                   PRESENT, IT DOES NOT UPDATE THE INCORE COPY       *
*                   OF THE NOTICES POINTED TO BY CVTTVT (THE TSO      *
*                   VECTOR TABLE) AND THE NCT WHICH IS DESCRIBED      *
*                   IN MACRO IKJTSVT.  (THE INCORE NOTICES TABLE)     *
*                                                                     *
*                                                                     *
*          AUTHOR:  SAM GOLOB               VERSION:   1.6            *
*                                                                     *
*            DATE:  APR 26, 05                                        *
*                                                                     *
*       EXECUTION:  ALLOC F(BRODCAST) DA('SYS1.BRODCAST') SH REUSE    *
*                                                                     *
*         CHANGES:  04/26/05  -  ZERO THE BRODCAST TEXT RECORD        *
*                   (VER 1.4)    BEFORE WRITING THE MESSAGE.          *
*                                THIS HAS THE EFFECT OF CLEANING      *
*                                OUT THE UNUSED PART OF THE           *
*                                MESSAGE AND MAKING A BROWSE (OR      *
*                                "REVIEW") OF THE SYS1.BRODCAST       *
*                                DATASET EASIER TO READ.              *
*                                                                     *
*         CHANGES:  05/08/05  -  FIX A PROBLEM WHEN DELETING A        *
*                   (VER 1.5)    NOTIFY MESSAGE WITH THE -DEL         *
*                                KEYWORD.  FIX THE DISPLAY OF         *
*                                CHANGED RECORDS TO MAKE IT MORE      *
*                                READABLE.                            *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*       I N S T R E A M    M A C R O S                                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
         IKJZT301  &DSECT=YES
* COPIED FROM OPTIONAL MATERIAL SYM1-1(1) 29MAY80 LDW.  PL/S DELETED.
*        UPDATED                          31MAY95 SBG.
*
*        IKJZT301       RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                                RECORD 1                             *
*                                                                     *
*        THE FIRST RECORD OF THE SYS1.BRODCAST DATA SET (R1BC) HAS    *
*        POINTERS TO THE NOTICES AND MAIL SECTIONS, AND OTHER INFO    *
*        CONCERNING THE DATA SET.                                     *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
R1BC     DSECT , -            RECORD 1 OF SYS1.BRODCAST DATA SET
         AGO   .SKIP
.NODSECT ANOP
R1BC     DS    0F -           RECORD 1 OF SYS1.BRODCAST DATA SET
.SKIP    ANOP
R1BCPTRP DS    0A -           SAME AS R1BCPTR BELOW
R1BCFLGS DS    B -            NOTICES FLAGS - NOT USED
R1BCPTR  DS    AL3 -          RELATIVE BLOCK ADDRESS (RBA) OF FIRST
*                               NOTICES DIRECTORY RECORD
R1USPTRP DS    0A -           SAME AS R1USPTR BELOW
R1USFLGS DS    B -            USER MAIL FLAGS - NOT USED
R1USPTR  DS    AL3 -          RBA OF FIRST USER MAIL DIRECTORY RECORD
R1RECNUM DS    F -            TOTAL NO. OF RECORDS IN SYS1.BRODCAST DS
R1BCMAX  DS    H -            MAXIMUM BRODCAST MSG NO. -
*                               FROM MASTER SCHEDULER BASEA, BABCMAX
*                                                                     *
R1DSN    DS    CL24 -         DATA SET NAME IN EBCDIC =
*                               ' SYS1.BRODCAST DATA SET '
R1LEVEL  DS    CL7 -          LEVEL NO. = 'LEVEL N', WHERE 'N' IS
*                               A 1-DIGIT NUMBER
         DS    CL1 -          RESERVED
R1FRESRH DS    CL3 -          RBA OF FREE SEARCH RECORD
R1GENNUM DS    F -            GENERATION NUMBER FOR IN-STORAGE NOTICE
*                               TABLE
         DS    CL76 -         RESERVED
         MEND
         MACRO
         IKJZT302  &DSECT=YES
*        IKJZT302      RELEASE=OS/VS2.2   LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                        NOTICES DIRECTORY RECORD                     *
*                                                                     *
*        THE BROADCAST NOTICES DIRECTORY RECORD (BCDIR) HAS BROADCAST *
*        MESSAGE NUMBERS AND A POINTER TO THE MESSAGE RECORD          *
*        ASSOCIATED WITH EACH MSG. NUMBER.                            *
*                                                                     *
*        NOTE: THIS MACRO USES EQUATES GENERATED BY 'IEZBITS' MACRO.  *
*              THEREFORE, THE IEZBITS MACRO MUST BE CODED             *
*              PREVIOUS TO CALLING THIS MACRO.                        *
*                                           10/1/72    LEVEL=1        *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
BCDIR    DSECT , -
         AGO   .SKIP
.NODSECT ANOP
BCDIR    DS    0F
.SKIP    ANOP
BCDNENT  EQU   25             NUMBER OF ENTRIES
BCDENTRY DS    0CL5 -         ENTRY FOR 1 BROADCAST MSG NO.
BCDMFLG  DS    0BL1 -         BROADCAST DIRECTORY MSG. FLAG:
BCDNOMSG EQU   BIT0
*                               '1' = NO NOTICES MSG ASSIGNED
*                                     TO THIS MSG NUMBER
*                               '0' = NOTICES MSG FOR THIS NUMBER
*                                     IS ASSIGNED
BCDMSGNO DS    FL2 -          BROADCAST NOTICES MSG NO. IN HEX
BCDMRBA  DS    AL3 -          RELATIVE BLOCK ADDR OF NOTICE MSG RCD
         DS    24CL5 -        RESERVE SPACE FOR 24 MORE ENTRIES
*                               IDENTICAL IN FORMAT TO 'BCDENTRY'
BCDREND  DS    CL1 -          END-OF-RECORD INDICATOR = X'7F'
BCDNEXT  DS    AL3 -          CHAIN PTR TO NEXT NOTICE DIRECTORY RCD
*                               (ZERO IF LAST)
         MEND
         MACRO
         IKJZT303   &DSECT=YES
*        IKJZT303      RELEASE=OS/VS2.2  LEVEL=01
***********************************************************************
***********************************************************************
*                                                                     *
*                         SYS1.BRODCAST DATA SET                      *
*                         NOTICES MESSAGE RECORD                      *
*                                                                     *
*          THE BRODCAST NOTICES MESSAGE RECORD (BCMSG) IS A           *
*          RECORD IN THE SYS1.BRODCAST DATA SET WHICH CONTAINS A      *
*          NOTICES MESSAGE INTENDED FOR ALL USERS.                    *
*                                           10/1/72     LEVEL=1       *
***********************************************************************
***********************************************************************
         AIF   ('&DSECT' EQ 'NO').NODSECT
BCMSG    DSECT , -            BRODCAST NOTICES MESSAGE RECORD
         AGO   .SKIP
.NODSECT ANOP
BCMSG    DS    0F -           BRODCAST NOTICES MESSAGE RECORD
.SKIP    ANOP
BCMLNG   DS    FL1 -          LENGTH OF BRODCAST NOTICES MSG TEXT
BCMTEXT  DS    CL125 -        MESSAGE TEXT (PADDED WITH BLANKS)
         DS    XL3 -          RESERVED
         MEND
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    STM   15,1,HEXSAVE
         LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   4,HEX
         LM    15,1,HEXSAVE
         MEND
***********************************************************************
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
*        REGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
SP000    EQU   0
         SPACE 1
         GBLA  &BLNKDFL                                                  01485
&BLNKDFL SETA  30                                                        01490
BCMNOTFY CSECT
         USING BCMNOTFY,R12,R10
         B     BEGINN-*(,R15)
DEFBLNK  DC    F'&BLNKDFL'
         DC    AL1(16),CL16'BCMNOTFY VER 1.6'
         DC    CL16' &SYSDATE &SYSTIME '
         DS    0H
BEGINN   STM   R14,R12,12(R13)
         LR    R12,R15             LOAD FIRST BASE REGISTER
         LA    R10,4095(,R12)      LOAD SECOND BASE
         LA    R10,1(,R10)
         LR    R11,R1              PRESERVE CPPL POINTER.
         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DATAAREA,R13
         BAL   R9,INITCON          INITIALIZE CONSTANTS IN DATA AREA
         BAL   R9,GETPSCB          GET PSCB IF ANY (IN R2)
         SPACE 1
         LTR   R2,R2               ANY PSCB?
         BZ    EOJ8                GET OUT.  NOT TSO.
         BAL   R9,CPPLPTRS         STORE STUFF OUT OF THE CPPL
         BAL   R9,SETIOPL          SET UP IOPL FOR PUTLINE
*        BAL   R9,CHEKAUTH         ARE WE OPER OR ACCT ?
CONT0    LTR   R11,R11             ANY CPPL?
         BZ    EOJ8                NO.  GET OUT
         L     R1,0(,R11)          PT TO CMD BUFFER.
         LTR   R1,R1               ANY CMD BUFFER?
         BZ    EOJ4                GET OUT IF NONE
         LH    R3,0(,R1)           LOAD LENGTH.
         STH   R3,CMBLENG          SAVE COMMAND BUFFER LENGTH
         CH    R3,=H'4'            ANYTHING?
         BNH   EOJ4                NO.  GET OUT.
         LR    R5,R3               LENGTH OF COMMAND + 4
         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES
         LH    R3,2(,R1)           LOAD OFFSET.
         STH   R3,OFFSETT          SAVE OFFSET.
         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4
         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER
         BC    8,WMESS3            ZERO, SEND MESSAGE.............
         BC    5,EOJ8              LESS, OR OVERFLOW, OUT.
DOBROD   DS    0H
         STM   R15,R1,SAVE1501     Save OPEN work registers
         OPEN  (BRODCAST,(UPDAT))
         LM    R15,R1,SAVE1501     Restore OPEN work registers
         TM    BRODCAST+48,X'10'   Is BRODCAST DD OPEN?
         BNO   WMESS1              No. Send message to allocate it.
         BAL   R9,GETNUMB          Get the number of the message which
*                                   you want to modify.
         BAL   R9,GETMSGT          Get the message from second param.
         BAL   R9,HEADREAD         Read header record and extract
*                                  RBA of first notice record, and also
*                                  the maximum number of notes in this
*                                  particular SYS1.BRODCAST.
* --- Make maximum number of notices displayable. - below
*
         ST    R4,SAVER4           Save work register
         LH    R4,NUMNOTES         Load maximum message number.
         CVD   R4,DWORD            Convert message number to decimal.
         L     R4,SAVER4           Restore work register
         OI    DWORD+7,X'0F'       Make sign readable.
         MVC   DISPMXNM,DISPMXNM-1      Initialize to blanks.
         UNPK  DISPMXNM(4),DWORD+6(2)   Display 4 digit message number.
         MVC   MESS5NUM(4),DISPMXNM
*
* --- Make maximum number of notices displayable. - above
         CLC   NUMNOTES,MSGNHALF   Is requested number more than max?
         BNL   MNUMBOK             No. Go on with processing.
         B     WMESS5              Yes, put out message and end code 8.
MNUMBOK  DS    0H
         MVC   RNAM(3),ZEROS       ENQUEUE ON HEADER RECORD
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
* ------------------------------------------------------------------ *
* ---    MAIN ROUTINE TO UPDATE THE DESIRED NOTICES RECORD.      --- *
* ------------------------------------------------------------------ *
         BAL   R9,FINDNOTE         SEE IF YOU CAN FIND THE
*                          NOTICES RECORD THAT CORRESPONDS TO THE
*                          MSGNHALF.  IF FOUND, GO TO IT AND EITHER
*                          UPDATE IT OR DELETE IT.
* ------------------------------------------------------------------ *
         MVC   RNAM(3),ZEROS       DEQ ON HEADER RECORD
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         B     EOJ
* ------------------------------------------------------------------ *
* ---    END OF MAIN ROUTINE TO SEND MESSAGE                     --- *
* ------------------------------------------------------------------ *
WMESS3   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE3                 MESSAGE NUMBER IS MISSING
         LA    R0,L'MESSAGE3+7
         BAL   R4,MSG
         B     EOJ4
WMESS2   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE2                 MESSAGE TEXT IS MISSING
         LA    R0,L'MESSAGE2+7
         BAL   R4,MSG
         B     EOJ4
WMESS4   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE4                 MESSAGE NUMB NOT NUMERIC
         LA    R0,L'MESSAGE4+7
         BAL   R4,MSG
         B     EOJ8
WMESS5   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE5                 MESSAGE NUMB TOO HIGH
         MVC   MESS5NUM(4),DISPMXNM
         LA    R0,MESS5LEN+7
         BAL   R4,MSG
         B     EOJ8
WMESS6   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE6                 NOTICES INDEX RECORD
         LA    R0,L'MESSAGE6+7                  HAS WRONG KIND OF KEY
         BAL   R4,MSG
         B     EOJ8
WMESS7   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE7                 WE HAVE REACHED END OF
         LA    R0,L'MESSAGE7+7                  NOTICES INDEXES W/O HIT
         BAL   R4,MSG
         B     EOJ8
WMESS8   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE8                 NOTICES MESSAGE RECORD
         LA    R0,L'MESSAGE8+7                  HAS WRONG KIND OF KEY
         BAL   R4,MSG
         B     EOJ8
WMESS1   MVC   LINE,LINE-1                  WRITE MESSAGE THAT
         MVC   LINET,MESSAGE1                 SYS1.BRODCAST NOT ALLOC'D
         LA    R0,L'MESSAGE1+7                  TO DDNAME BRODCAST.
         BAL   R4,MSG
EOJ4     LA    R15,4               SET CC = 4.
         B     EOJ
EOJ      DS    0H                  BYE.
         CLOSE (BRODCAST)
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000
         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
EOJ0     SR    R15,R15             SET CC = 0.
         B     EOJ                 CONT.
EOJ8     LA    R15,8               SET CC = 8.
         B     EOJ                 CONT
         EJECT
*-----------------------------------------------------------------*
*---*                S U B R O U T I N E S                    *---*
*-----------------------------------------------------------------*
         SPACE 2
*-----------------------------------------------------------------*
* ------------------------------------------------------------------ *
* ---    FIND A PARTICULAR NOTICE RECORD AND SAVE ITS RBA.       --- *
* ------------------------------------------------------------------ *
FINDNOTE DS    0H                  READ THROUGH NOTICE INDEX RECORDS
         MVC   SAVERBA(3),FSTNOTI  GET THE BALL ROLLING
INDXLOOP DS    0H
         CLC   SAVERBA(3),ZEROS    ARE WE AT THE END OF NOTICE INDEXES
         BE    WMESS7              END OF NOTICE INDEX RECORDS. FINISH.
*   PLEASE MAKE SURE THAT THIS REGISTER R7 ISN'T MESSED WITH, OR
*    IS PROPERLY SAVED, SO THE BCT INSTRUCTION IS PROPER, AND
*    NOTICES AREN'T MISSED.
         LA    R7,25               COUNT OF INDEXES PER RECORD
         MVC   BLOCKNO,SAVERBA     GET RBA FOR READ
         READ  MDIDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOCKNO,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDIDECB
         L     R3,MDIDECB+20           ADDRESS OF KEY
         CLI   0(R3),X'00'             NOTICES INDEX RECORD?
         BNE   WMESS6                  NO. ERROR.
         L     R3,MDIDECB+12           ADDRESS OF RECORD
         USING BCDIR,R3
         MVC   LASTRBA(3),SAVERBA      SAVE CURRENT RBA
         MVC   SAVERBA(3),BCDNEXT      GET NEXT RECORD'S RBA
         LA    R8,0                    INITIALIZE INDEX SLOT COUNTER
         DROP  R3
*                       R3 IS STILL POINTING AT THE FIRST INDEX ENTRY
BCILOOP  DS    0H
         USING BCDENTRY,R3
         MVC   MSGNCLR(2),BCDMSGNO     Save message number in index.
         NC    MSGNCLR(2),=X'7FFF'     Clear leading X'80' for compare.
         CLC   MSGNCLR,MSGNHALF        Correct message number?
         BNE   TRYNEXT                 No. Bump to next one.
         MVC   MSGNRBA(3),BCDMRBA      Save RBA of notice.
         TM    DELFLAG,X'01'           Are we deleting this notice?
         BO    YESDELN                 Yes.
         NI    BCDMFLG,X'7F'           Mark MSGNO as used.
         B     REWRINDX                Write the entire index record.
YESDELN  DS    0H
         OI    BCDMFLG,X'80'           Mark MSGNO as not being used.
         B     REWRINDX                Write the entire index record.
REWRINDX DS    0H
         MVC   RNAM(3),BLOCKNO         USE RBA AS RNAME FOR ENQ/DEQ
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
         WRITE MDIDECB,                                                X
               DI,                                                     X
               BRODCAST,                                               X
               'S',                                                    X
               'S',                                                    X
               'S',                                                    X
               BLOCKNO,MF=E
         CHECK MDIDECB
         MVC   RNAM(3),BLOCKNO         USE RBA AS RNAME FOR ENQ/DEQ
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         SPACE
         ST    R9,SAVERG9              Save BAL register
         BAL   R9,WRITNOTE             UPDATE NOTICE RECORD
         L     R9,SAVERG9              Restore BAL register
         B     FINDNTEN
TRYNEXT  LA    R3,5(,R3)               Bump location to next index slot
         LA    R8,1(,R8)               Bump counter within record
         BCT   R7,BCILOOP              Try for another notice slot
*                           FREE BUFFERS BEFORE GETTING ANOTHER RECORD.
         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         B     INDXLOOP            END OF RECORD? GET ANOTHER.
FINDNTEN DS    0H                  READ THROUGH NOTICE INDEX RECORDS
         FREEDBUF MDIDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         BR    R9
* ------------------------------------------------------------------ *
* ---    END OF MAIN LOOP FOR NOTICES                            --- *
* ------------------------------------------------------------------ *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        GET THE MESSAGE NUMBER FROM THE PARM, CHECK IF NUMERIC.  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETNUMB  AR    R1,R3               POINT ...
         LA    R1,4(,R1)           ... TO EXPECTED NUMBER.
         LA    R6,5                LOAD REG FOR BCT LOOP
         LR    R7,R1               INITIALIZE POINTER
         LA    R7,0(,R7)                TO FIRST CHARACTER OF NUMBER
         LA    R8,0                INITIALIZE CHARACTER COUNT
         ST    R7,SAVEBEGN         SAVE BEGINNING OF SEARCH ADDRESS
TESTNUMR DS    0H                  Test parameter if all numeric.
         CLI   0(R7),X'40'         Is this character a blank?
         BE    NOMORCUT            Yes, we are at end of the number.
         CLI   0(R7),X'6B'         Is this character a comma?
         BE    NOMORCUT            Yes, we are at end of the number.
         CLI   0(R7),X'F0'         Less than "display 0"?
         BL    NOTNUMER            Yes. Send error message.
         CLI   0(R7),X'F9'         Greater than "display 9"?
         BH    NOTNUMER            Yes. Send error message.
         B     CUTNMLEN
NOTNUMER DS    0H
         B     WMESS4              Number parameter is not numeric.
CUTNMLEN DS    0H
         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER
         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER
         CR    R8,R5               END OF COMMAND BUFFER ?
         BNL   NOMORCUT            YES. GET OUT NOW.
         BCT   R6,TESTNUMR         TRY FOR BLANK AGAIN
NOMORCUT DS    0H
         S     R7,SAVEBEGN         REG 7 = Length of number
         STC   R7,MSGNLENG         Store this message length for later.
         BCTR  R7,0                One less for EXECUTE.
         EX    R7,PACK             Convert to packed
         CVB   R0,WORK             Convert to binary
         ST    R0,SAVEMSGN         And shove it into a fullword.
         LH    R7,MSGNHALF
         CVD   R7,DWORD            Convert message number to decimal.
         OI    DWORD+7,X'0F'       Make sign readable.
         MVC   DISPNNUM,DISPNNUM-1      Initialize to blanks.
         UNPK  DISPNNUM(4),DWORD+6(2)   Display 4 digit message number.
         B     DISPHEX             Get message written.
GETNUMEN DS    0H                  End of GETNUMB routine.
         BR    R9                  Return to caller.
PACK     PACK  WORK,0(0,1)
WORK     DC    D'0'                Doubleword work areas.
DWORD    DC    D'0'
DISPHEX  DS    0H
*        MVC   LINE,LINE-1         Clear output line.
*        MVC   LINET,DISPNNUM      Move number to correct place in msg.
*        LA    R0,L'DISPNNUM+7     Load message length.
*        BAL   R4,MSG              Write message out.
         B     GETNUMEN            Go back to caller.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    WRITE OVER THE NOTICE MESSAGE IN SYS1.BRODCAST
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
WRITNOTE DS    0H
         MVC   MESSRBA(3),MSGNRBA
         MVC   RNAM(3),MESSRBA     USE RBA AS RNAME FOR ENQ/DEQ
         ENQ   (QNAM,RNAM,E,,SYSTEM),MF=(E,ENQUSER)
         READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               MESSRBA,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R2,MDLDECB+20       ADDRESS OF KEY
         CLI   0(R2),X'02'         IS THIS A GOOD NOTICE ?
         BNE   SHOWNOTX            NO. WE HAVE NO BUSINESS BEING HERE
         L     R2,MDLDECB+12       ADDRESS OF RECORD
         USING BCMSG,R2
         XR    R0,R0
         L     R0,LENTHMSG         LENGTH FOR PUTLINE
         STC   R0,BCMLNG
         LR    R6,R0
         BCTR  R6,0                ADJUST LENGTH FOR EXECUTE
         MVC   LINE,LINE-1
         MVC   BCMTEXT(125),ZERREC   INITIALIZE MESSAGE TO HEXZEROS
         TM    DELFLAG,X'01'
         BO    SHOWNOTD
         EX    R6,MOVEMSG
         LR    R0,R6
         A     R0,=F'11'
*        HEX   LINE+5,2,MSGNCLR
         LH    R7,MSGNCLR
         CVD   R7,DWORD         CONVERT BLOCK COUNT TO DECIMAL
         OI    DWORD+7,X'0F'    MAKE SIGN READABLE
         MVC   LINE+5(4),BLANKS           INITIALIZE TO BLANKS
         UNPK  LINE+5(4),DWORD+6(2)       SAVE 4 DIGITS MESSAGE NUMBER
         MVC   LINE(6),=C'MSGNO '
         EX    R6,MOVEMSGX
         BAL   R4,MSG
         B     SHOWNOTN
SHOWNOTD DS    0H
         MVC   LINE,LINE-1         Clear message line
         LH    R7,MSGNHALF         Load message number as obtained.
         CVD   R7,DWORD            Convert it to decimal.
         OI    DWORD+7,X'0F'       Make sign readable.
         MVC   LINE+5(4),BLANKS          Initialize to blanks.
         UNPK  LINE+5(4),DWORD+6(2)      Save 4 digit message number.
         MVC   LINE(6),=C'MSGNO '        Supply message number literal.
         MVC   LINE+9(8),=C' DELETED'    Mark number as deleted in msg.
         LA    R0,18               Hard-code length of message.
         BAL   R4,MSG              Write DELETED message out.
         MVC   MSGTEXT(125),ZERREC   Put hexzeros in message text.
         MVC   BCMTEXT(125),MSGTEXT  And move to output area.
SHOWNOTN DS    0H
         WRITE MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY, EXCLUSIVE CNTL    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               MESSRBA,MF=E        RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         MVC   RNAM(3),MESSRBA     USE RBA AS RNAME FOR ENQ/DEQ
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         BR    R9
MOVEMSG  MVC   BCMTEXT(*-*),MSGTEXT   EXECUTED
MOVEMSGX MVC   LINE+10(*-*),BCMTEXT   EXECUTED
         DROP  R2
SHOWNOTX DS    0H
         MVC   RNAM(3),MESSRBA     USE RBA AS RNAME FOR ENQ/DEQ
         DEQ   (QNAM,RNAM,,SYSTEM),RET=HAVE,MF=(E,ENQUSER)
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         B     WMESS8
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        GET THE MESSAGE TEXT FOR THE MESSAGE TO BE SENT.         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETMSGT  DS    0H                  Get message text to send to notice.
         ST    R7,SAVEWRK7         SAVE REGISTER CONTENTS
         ST    R8,SAVEWRK8         SAVE REGISTER CONTENTS
         L     R3,0(,R11)          Load address of command buffer.
         LH    R8,CMBLENG          Total length of command buffer.
         LA    R3,4(,R3)           Compensate for header.
         SH    R8,=H'4'            And minus header length.
         LH    R7,OFFSETT          Load offset value.
         LA    R3,0(R7,R3)         Point to beginning of command.
         SR    R8,R7               Command buffer length minus offset.
         XR    R7,R7               Zero register.
         IC    R7,MSGNLENG         Load length of message number.
         LA    R3,0(R7,R3)         Point past message number.
         SR    R8,R7               Subtract message number length.
         BC    8,WMESS2            If zero, issue message.
         BC    5,EOJ8              If less or overflow, get out.
         LR    R7,R8               Initialize message length.
FRSTBLNK DS    0H                  If non-blank, assume that the
*                                   message starts here.
         CLI   0(R3),X'40'         Are we at a blank?
         BE    LEADBLNK            Yes, look for more blanks.
         B     BLANKEND            No, assume the message starts here.
LEADBLNK DS    0H                  Bump past any leading blanks.
         CLI   0(R3),X'40'         Is this character a blank?
         BNE   BLANKEND            No. End the loop.
         LA    R3,1(,R3)           Bump to next character.
         BCTR  R7,0                Message is 1 character shorter.
         BCT   R8,LEADBLNK         Loop until first non-blank.
BLANKEND DS    0H                  Save message text now.
* -- >  Test for leading quote(s) - below
         MVC   QUOTSTRT(1),0(R3)   Test for leading and following quote
         CLI   QUOTSTRT,X'7D'      Is leading char a single quote?
         BE    MOVEQUOT            Yes, test.
         CLI   QUOTSTRT,X'7F'      A double quote?
         BE    MOVEQUOT            Yes, test.
         B     NOQUOTE             No. Do regular processing on message
MOVEQUOT DS    0H
         LR    R0,R3               Address of start of message
         AR    R0,R7               Add length of message
         ST    R0,QUOTSTOR         Store address, one past the end
         L     R1,QUOTSTOR         Get it back in a register
         BCTR  R1,0                One less, to point to message end
         CLC   QUOTSTRT,0(R1)      Is this the same as leading quote?
         BNE   NOQUOTE             No. Go on to further tests.
         LA    R3,1(,R3)           Yes. Bump start address past quote
         BCTR  R7,0                Message is 2 chars shorter
         BCTR  R7,0                Message is 2 chars shorter
         B     NTDELETE            Don't test for blank or delete.
NOQUOTE  DS    0H
* -- >  Test for leading quote(s) - above
         MVC   BLNKTST(4),0(R3)    Move first 4 chars to staging area
         OC    BLNKTST(4),BLANKS   And uppercase them.
         CLC   =C'-BLA',BLNKTST    Is it -BLA for blanks?
         BE    BLNKWRT             Yes. Make a blank message.
* -- >  Test for DEL(ETE)  below
         CLC   =C'-DEL',BLNKTST    Is it -DEL to delete the message?
         BE    YSDELETE            Yes. Delete this message number.
         B     NTDELETE            No. Go on with regular processing.
*                          >>>>>>  MESSAGE DELETION ROUTINE.
YSDELETE DS    0H                  Delete the current message number.
         OI    DELFLAG,X'01'       Turn on "message deleted" flag
         MVC   MSGTEXT(125),ZERREC   Put hexzeros in message text.
         B     GETMSGTE            Get out of this routine.
NTDELETE DS    0H
* -- >  Test for DEL(ETE)  above
         BCTR  R7,0                ONE LESS FOR EXECUTE
         B     WRMSGTXT
BLNKWRT  DS    0H
         L     R7,DEFBLNK          30 Chars in blank msg is default.
         BCTR  R7,0                One less for EXECUTE
         EX    R7,MOVBLNKS           MOVE THEM IN
         B     BLNKWRTX              SKIP MESSAGE MOVE
WRMSGTXT DS    0H
         C     R7,=F'122'          One less than maximum.
         BH    TRUNCMSG            Too big, send error message.
         B     NOTRUNCM            Not too big. Write msg to BRODCAST.
TRUNCMSG DS    0H
         MVC   LINE+5(40),=C'Message must be 123 characters or less. '
         LA    R0,46               Load length of message.
         BAL   R4,MSG              Write it out.
         B     EOJ8                Error, condition code 8, and out.
NOTRUNCM DS    0H
         MVC   MSGTEXT(125),BLANKMSG   Blank SEND message area.
         EX    R7,MOVEMSGG         Move the notice text into it.
BLNKWRTX DS    0H
*        MVC   LINE,LINE-1         Clear message line.
*        MVC   LINE,MSGTEXT        Move notice text into message line.
*        LA    R0,1(,R7)           Load true message length.
*        BAL   R4,MSG              Go write the message text out.
         LA    R7,1(,R7)           Restore true message length.
         ST    R7,LENTHMSG         And store it away for later.
         B     GETMSGTE
GETMSGTE DS    0H
         L     R7,SAVEWRK7         RESTORE REGISTER CONTENTS
         L     R8,SAVEWRK8         RESTORE REGISTER CONTENTS
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        READ THE SYS1.BRODCAST HEADER RECORD AND COPY FIELDS.    *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEADREAD READ  MDLDECB,            ECB ADDRESS TO POST                 X
               DI,                 USE DATA AND KEY                    X
               BRODCAST,           DCB TO USE FOR READ                 X
               'S',                DO DYNAMIC BUFFERING                X
               'S',                GET LENGTH FROM DCB                 X
               'S',                KEY + DATA ARE READ SEQUENTIALLY    X
               BLOKZERO,MF=E       RBA OF THE RECORD
         SPACE
         CHECK MDLDECB
         L     R3,MDLDECB+12       ADDRESS OF RECORD
         USING R1BC,R3             ADDRESSABILITY TO HEADER RECORD MAP
         MVC   FSTNOTI(3),R1BCPTR  SAVE RBA OF FIRST NOTICES INDEX
         MVC   NUMNOTES(2),R1BCMAX SAVE MAXIMUM NUMBER OF NOTES
         MVC   SAVERBA(3),R1USPTR  SAVE RBA OF FIRST USER DIR RECORD
         MVC   NUMRECS(4),R1RECNUM   SAVE TOTAL NUMBER OF RECORDS
         ST    R7,SAVER7           SAVE REGISTER
         L     R7,NUMRECS          PUT NUMBER OF RECORDS IN
         BCTR  R7,0                MINUS ONE
         ST    R7,HIWATER          HIGHEST RBA PERMITTED
         L     R7,SAVER7           RESTORE REGISTER
         MVC   LEVEL(7),R1LEVEL    LEVEL+6 IS VERSION OF TSO
         CLC   LEVEL+6(1),=C'2'    IS THIS TSO LEVEL 1?
         BL    SKIPFREE            YEP. NO TYPE 5 RECORD ADDRESS
         MVC   TYP5RBA(3),R1FRESRH    STORE RBA OF TYPE 5
SKIPFREE DS    0H
         DROP  R3
         FREEDBUF MDLDECB,         DECB ADDR USED TO READ              X
               D,                  USED BDAM READ                      X
               BRODCAST            DCB FOR PROCESS DATA SET
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MSG      LA    R1,LINE             WRITE A LINE USING PUTLINE FACILITY
*        LOAD LENGTH OF MESSAGE INTO R0 BEFORE CALLING THIS ROUTINE.
         BAL   R14,PUTLINE
         MVC   LINE,LINE-1
         BR    R4
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        ROUTINE TO DISPLAY HEX VALUES                            *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R4                  RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        DATA AREAS THAT NEED TO BE INITIALIZED AT THE BEGINNING  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
INITCON  MVI   LINE-1,C' '         INITIALIZE BLANK
         MVC   TMSGCNT(5),PACKZER5 INITIALIZE COUNTER
         MVC   LEVEL(7),BLANKS
         MVC   TYP5RBA(3),ZEROS        ZERO OUT
         MVC   FSRCRBA(3),ZEROS          ALL THE RBA
         MVC   NEXTRBA(3),ZEROS            STORAGE AREAS
         MVC   NFRERBA(3),ZEROS
         MVC   MINRBA(3),=X'FFFFFF'    PUT A LARGE VALUE IN
         MVI   ALLFLAG,X'00'
         MVI   FULLFLAG,X'00'
         MVC   MSGTEXT(125),BLANKMSG   MOVE BLANKS TO MSG AREA
         MVC   OFFSETT(2),ZEROS
         MVC   CMBLENG(2),ZEROS
         MVC   NUMRECS(4),ZEROS
         MVC   HIWATER(4),ZEROS        PREVENT S0CX
         MVC   NFRERBA(3),ZEROS
         BR    R9
* ------------------------------------------------------------------ *
GETPSCB  L     R1,16               POINT TO CVT.
         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS
         L     R1,4(,R1)           POINT TO TCB.
         L     R1,X'B4'(,R1)       POINT TO JSCB.
         L     R1,X'108'(,R1)      POINT TO PSCB.
         LA    R2,0(,R1)           CLEAR HIGH BYTE.  DUMP INTO R2
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*              SAVE CPPL POINTERS                                 *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         USING CPPL,R11
CPPLPTRS L     R6,CPPLUPT          SAVE CPPL POINTERS, SUCH AS:
         ST    R6,SAVEUPT             THE UPT
         L     R6,CPPLPSCB
         ST    R6,SAVEPSCB            THE PSCB
         L     R6,CPPLECT
         ST    R6,SAVEECT             THE ECT
         L     R6,CPPLCBUF
         ST    R6,CMBUFAD             THE COMMAND BUFFER ADDRESS
         ST    R11,SAVECPPL           AND THE CPPL ADDRESS ITSELF
         LA    R6,0
         BR    R9
         DROP  R11
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*              TEST IF USER HAS PSCB AUTHORIZATION.               *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         USING PSCB,R2
CHEKAUTH TM    PSCBATR1,PSCBACCT   ACCT USER?
         BO    CONT0               YES.  CONTINUE.
         TM    PSCBATR1,PSCBCTRL   OPER USER?
         BZ    EOJ4                NO.  GET OUT.
         DROP  R2
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
************************************************************
*        SET UP IOPL FOR PUTLINE                           *
************************************************************
         SPACE
         USING CPPL,R11
SETIOPL  LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         DROP  R11
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE
         L     R15,CVTPTR          POINT TO CVT                  JDM1
         USING CVTMAP,R15          GET ADDRESSABILITY            JDM1
         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM1
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,CVTPUTL         YES - USE CVTPUTL             JDM1
         DROP  R15                                               JDM1
         B     PUTLOADX            BRANCH AROUND LOAD
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         BR    R9
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
************************************************************
*        PUTMSG ROUTINE                                    *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTSAVE
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
************************************************************
*        PUTLINE ROUTINE                                   *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTSAVE
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTSAVE
         BR    R14
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
*-----------------------------------------------------------------*
*----         FIXED DATA AREAS THAT DON'T CHANGE.             ----*
*-----------------------------------------------------------------*
PACKZERO DC    PL3'0'
PACKZER5 DC    PL5'0'
FULLZERO DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - *
MOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED
MOVEMSGG MVC   MSGTEXT(*-*),0(R3)  EXECUTED
MOVBLNKS MVC   MSGTEXT(0),BLANKMSG  << EXECUTED >>
* - - - - - - - - - - - - - - - - - - - - - - - - *
BLANKS   DC    C'        '         8 BLANKS
BLANKMSG DC    CL125' '
BLOKZERO DC    X'000000'           BLOCK NUMBER OF BROADCAST HEADER
ZEROS    DS    0CL8
ZERREC   DS    0CL128
ZERENTRY DC    X'000000000000'     SHOW USERID HAS NO MESSAGES WAITING
         DC    X'0000'
         DC    121X'00'
MESSAGE1 DC    C'Bad OPEN - ALLOC F(BRODCAST) DA(SYS1.BRODCAST) SH REU'
MESSAGE2 DC    C'You have to specify message text after the MSG Number,-
                or -BLAnks or -DELete.'
MESSAGE3 DC    C'You have to specify MSG Number after the command name.-
               '
MESSAGE4 DC    C'Message number parameter is not numeric.'
MESSAGE5 DC    C'Message number greater than maximum of '
MESS5NUM DC    C'    '
         DC    C'. Request is not processed.'
MESS5LEN EQU   *-MESSAGE5
MESSAGE6 DC    C'Record pointed to, is not a NOTICES index record.'
MESSAGE7 DC    C'End of NOTICES without finding the requested one.'
MESSAGE8 DC    C'Record pointed to, is not a NOTICES message record.'
MASK6    DC    XL6'402020202120'
MASK10   DC    XL9'40202020202020202120'
BPARM    DC    AL2(BPARME-BPARM,0),C'NON'
BPARME   EQU   *
         DS    0F
QNAM     DC    CL8'SYSIKJBC'
RNAME    DC    X'000000'
         SPACE 3
BRODCAST DCB   DDNAME=BRODCAST,    JCL CONNECTION                      X
               BLKSIZE=129,        LENGTH OF FILES BLOCK               X
               DSORG=DA,           IS DIRECT ACCESS FILE               X
               MACRF=(RISXC,WIC),  3 BYTE RBA, DYNAMIC BUF, READ/CHECK X
               OPTCD=R,            3 BYTE RBA WILL BE USED             X
               RECFM=F,            FIXED LENGTH                        X
               BUFNO=2,            # OF BUFS TO GET DYNAMICALLY        X
               KEYLEN=1,           SIZE OF KEY                         X
               BUFL=130            KEYLEN + BLKSIZE
         SPACE 3
         LTORG
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         DS    0F
ENQUSER  ENQ   (QNAM,RNAME,E,,SYSTEM),MF=L
         SPACE 3
*-----------------------------------------------------------------*
*----         GETMAINED DATA AREA FIELDS                      ----*
*-----------------------------------------------------------------*
DATAAREA DSECT
SAVE     DS    9D
CMBUFAD  DS    F                   COMMAND BUFFER ADDRESS
NEWID    DC    C'        '         STORE PARM USERID HERE
         DS    CL72                PADDING
SAVEBEGN DC    F'0'
SAVEMSGN DS    0F
         DC    H'0'
MSGNHALF DC    H'0'
MSGNCLR  DC    H'0'
ADDADR   DS    0CL12
UMSGCNT  DC    PL3'0'              COUNT OF MESSAGES FOR EACH USER
TMSGCNT  DC    PL5'0'              COUNT OF ALL MESSAGES DISPLAYED
         DC    C' '
DISPNNUM DC    CL4' '
         DC    C' '
DISPMXNM DC    CL4' '
NEXT     DS    F                   FOR IKJIFRIF ADD ADDRESS
OLDID    DC    C'        '         STORE OLD USERID HERE
DELFLAG  DC    X'00'
LEVEL    DS    0CL7                LEVEL OF SYS1.BRODCAST
LEVELLIT DS    CL6                    LITERAL 'LEVEL'
LEVELLEV DS    CL1                       LEVEL NUMBER - CHAR FMT
NUMNOTES DC    X'0000'             MAX NUMBER OF NOTICE RECORDS
FSTNOTI  DC    X'000000'           STORE RBA OF FIRST NOTICE INDEX
SAVEPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR NEW USERID
SVMYPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID
FINDPTRS DC    X'000000000000'     SAVE MSG POINTERS FOR MY USERID
WRITPTRS DC    X'000000000000'     NEW MSG POINTER TO WRITE
CMPRPTRS DC    X'000000000000'     COMPARE POINTERS FOR FINDUSR RTN
OLDPSCBL DC    X'00'               STORE OLD PSCBUSRL HERE
MSGNLENG DC    X'00'               STORE MESSAGE NUMBER LENGTH HERE
TYP5RBA  DC    X'000000'           STORE ADDRESS OF TYPE X'05'
BLOCKNO  DC    X'000000'           STORE BLOCK NUMBER FOR READ
LASTRBA  DC    X'000000'           STORE CURRENT RBA
SAVERBA  DC    X'000000'           STORE RBA FOR LATER READ
MYUSRBA  DC    X'000000'           STORE RBA OF MY USERID FOR LATER
NMSGRBA  DC    X'000000'           RBA OF NEXT MESSAGE
PREVRBA  DC    X'000000'           RBA OF PREVIOUS MESSAGE
MESSRBA  DC    X'000000'           RBA OF CURRENT MESSAGE
MSGNRBA  DC    X'000000'           RBA OF CURRENT MESSAGE
FREERBA  DC    X'000000'           RBA OF FREE MESSAGE SLOT FOUND
NEXTRBA  DC    X'000000'           RBA OF NEXT MESSAGE
MINRBA   DC    X'000000'
NFRERBA  DC    X'000000'           NEW FREE SEARCH RBA FOR TYPE 5
FSRCRBA  DC    X'000000'           FREE SEARCH RECORD RBA - STORED
RNAM     DC    X'000000'           FREE SEARCH RECORD RBA - STORED
MYUSSLOT DC    X'00'               STORE SLOT OF MY USERID IN RECORD
NWUSRBA  DC    X'000000'           STORE RBA OF NEW USERID FOR LATER
NWUSSLOT DC    X'00'               STORE SLOT OF NEW USERID IN RECORD
FNUSRBA  DC    X'000000'           RBA OF USERID TO BE FOUND
FNUSSLOT DC    X'00'               SLOT OF THIS USERID IN RECORD
USERID   DS    0CL8                STORE FOUND USERID HERE
USERIDI  DS    CL7                 STORE FOUND USERID HERE
USERIDF  DS    CL1                 8TH CHARACTER
FINDID   DS    0CL8                USERID NAME TO BE FOUND
FINDIDI  DS    CL7                 FIRST 7 CHARACTERS
FINDIDF  DS    CL1                 8TH CHARACTER
TRYNUMB  DS    0CL8                STORE TEST USERID HERE
TRYNUMBI DS    CL7                 STORE TEST USERID HERE
TRYNUMBF DS    CL1                 8TH CHARACTER
SAVEID   DS    CL8                 STORE USERID HERE
SCANFLAG DC    X'00'               FLAG FOR USERID SCANS
COMPFLAG DC    X'00'               FLAG FOR USERID SCANS
         DS    0F                  ALIGN ON FULLWORD
SAVECPPL DS    F                   SAVE THE CPPL
SAVEUPT  DS    F                   SAVE FOR IKJIFRIF
SAVEPSCB DS    F                   SAVE FOR IKJIFRIF
SAVEECT  DS    F                   SAVE FOR IKJIFRIF
SAVE1501 DS    3F                  SAVE R15 THRU R1
SAVER4   DS    F                   SAVE COUNT FOR USERID SCAN
SAVER6   DS    F                   SAVE COUNT FOR USERID SCAN
SAVER7   DS    F                   SAVE REGISTER
SAVER8   DS    F                   SAVE REGISTER
SAVER9   DS    F                   SAVE BAL REGISTER
SAVER9A  DS    F                   SAVE BAL REGISTER
HEXSAVE  DS    3F                  SAVE FOR HEX MACRO
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL130            USED BY PUTLINE ROUTINE
PUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE
SAVEINF1 DS    CL8                 PLACE TO STORE CCHHR
LINEB    DS    C                   LINE-1
LINE     DS    CL137
LINET    EQU   LINE+7
         DS    0F
RDWR     READ  MDLDECB,DI,MF=L     NOTICE READ
RDWREND  DS    0F
RDWRLEN  EQU   *-RDWR
RDWI     READ  MDIDECB,DI,MF=L     INDEX READ
RDWIEND  DS    0F
RDWILEN  EQU   *-RDWI
STOR0001 DS    2F
STOR1415 DS    2F
ALLFLAG  DS    X
FULLFLAG DS    X
OFFSETT  DS    H
CMBLENG  DS    H
MSGTEXT  DS    CL125
         DS    CL130               Padding to 255 characters
SAVEWRK7 DS    F
SAVEWRK8 DS    F
SAVERG9  DS    F
LENTHMSG DS    F
NUMRECS  DS    F
HIWATER  DS    F
QUOTSTRT DC    CL1' '
QUOTEND  DC    CL1' '
QUOTSTOR DC    F'0'
BLNKTST  DC    CL4' '
         DC    C' '
         SPACE 1
DATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA
         IKJCPPL
         IKJUPT
         IKJPSCB
         IKJECT
         IKJIOPL
         IEZIOB   DSECT=YES
         IEZBITS
         IKJZT301 DSECT=YES
         IKJZT302 DSECT=YES
         IKJZT303 DSECT=YES
         CVT  DSECT=YES
         END
