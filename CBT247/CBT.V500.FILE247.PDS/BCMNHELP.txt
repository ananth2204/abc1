 BRODCAST Notices Programs:  BCMNLIST, BCMNOTFY, BCMNUPD, BCMNCLEN
 -------------------------   --------  --------  -------  --------

General Functionality:  The program BCMNLIST will list the Notices
                        messages, directly by reading SYS1.BRODCAST
                        or a copy of it.

                        The program BCMNOTFY will write messages,
                        delete messages, or write blank messages,
                        to the Notices section of SYS1.BRODCAST,
                        or a copy of it.

                        The BCMNCLEN program is a TSO command that
                        takes no parameters, and goes through all
                        BRODCAST Notices messages, replacing all
                        unnecessary characters with X'00's, thereby
                        cleaning up the appearance of the BRODCAST
                        dataset.  Even active Notices messages are
                        cleaned up, by replacing all characters in
                        the Notices message record, that are beyond
                        the limit of the message length, by X'00's.
                        As with all these programs, before you
                        execute BCMNCLEN, you have to allocate the
                        BRODCAST ddname to whatever (copy of the)
                        SYS1.BRODCAST dataset you want to deal with.

                        The BCMNUPD program will turn on a bit in
                        the TSO Vector Table that forces an update
                        of the Incore Notices Table by the next
                        LISTBC that executes in the system (e.g. if
                        a user logs on).  An execution of BCMNUPD
                        will force the SYS1.BRODCAST dataset to be
                        re-read with the next LISTBC execution.  At
                        that time, all Notices changes made by
                        BCMNOTFY will be propagated to the Incore
                        Notices Table.  This is only true for z/OS
                        1.3 and afterward.  (TSO/E 3.3.0 and later.)

                        At z/OS 1.2 and earlier levels, an execution
                        of LISTBC alone, with the TSVTNCTU bit set,
                        will not update the incore Notices table.
                        At those TSO/E levels, you need to do an
                        OPER command, followed by SEND '  ',SAVE to
                        force a rewrite of the incore Notices table
                        when TSVTNCTU is on.

BCMNLIST  -

  Function  :   To list all active NOTICES messages by reading
                SYS1.BRODCAST or a copy of it.

  Syntax    :   BCMNLIST
                  with no additional parameters

  Allocation:   ALLOC FI(BRODCAST) DA('SYS1.BRODCAST') SH REUSE

      Notes :   If you allocate the BRODCAST ddname to a copy
                of SYS1.BRODCAST instead of to the "official"
                SYS1.BRODCAST, then BCMNLIST will list the
                Notices messages in the copy.

   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

BCMNOTFY  -

  Function  :   To write or delete NOTICES messages from the
                SYS1.BRODCAST dataset or a copy of it.

  Syntax    :   BCMNOTFY msgno message text
             or BCMNOTFY msgno 'message text'
             or BCMNOTFY msgno "message text"
             or BCMNOTFY msgno -DELete
             or BCMNOTFY msgno -BLAnks

                This syntax is different from the syntax of
                the SEND subcommand of the OPER TSO command.

  Allocation:   ALLOC FI(BRODCAST) DA('SYS1.BRODCAST') SH REUSE

      Notes :   Starting from the first non-blank, at least one
                space after the end of the message number,
                everything that is non-blank, until the end of
                the TSO command buffer, and up to 123 characters,
                is considered as the text message, and it will be
                written to the SYS1.BRODCAST notify message
                record, for the given message number.

                You don't have to delete the previous message
                which had occupied that message number.  The
                new message will overwrite the old message, and
                the new message will be activated in the "notices
                index record" of SYS1.BRODCAST for that message
                number.

                A single quote or a double quote will only be
                effective to include everything in between, and
                not itself, if there is a corresponding single or
                double quote, as the last character in the
                command buffer.  In other words, there cannot be
                another non-blank character coming after the
                last single or double quote.  Single or double
                quotes in-between, don't count.  They are
                included in the notification message as is.  Only
                the first and last characters must be (single or
                double) quotes, for this rule to be effective.

                If you code the word -DEL in upper or lower or
                mixed case, at least one space after the message
                number, then that message will be deleted, and
                its index record deactivated.

                If you code the word -BLA in upper or lower or
                mixed case, at least one space after the message
                number, then that message number will be written
                and activated, with 30 blank characters.  This is
                an easy way to code a blank notice line, although
                you can also enclose any number of blanks, up to
                123, between a set of single or double quotes.

                If you really want to put the characters -DEL or
                -BLA into a message, enclose the ENTIRE message
                between single or double quotes, according to the
                rule stated above.

                You can write notice messages to a copy of
                SYS1.BRODCAST as well as to the original, by
                pointing the BRODCAST ddname with an ALLOC
                command, to the copy, instead of SYS1.BRODCAST
                itself.  Do as follows, before you run the
                BCMNOTFY command:

                ALLOC FI(BRODCAST) DA(copy.of.sys1.brodcast) SH REUSE

                or if you want to affect the real SYS1.BRODCAST:

                ALLOC FI(BRODCAST) DA('SYS1.BRODCAST') SH REUSE

   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

BCMNUPD   -  Set the TSVTNCTU bit to an force update of the incore
             Notices Table by LISTBC.  (This program must be APF
             authorized.)

   Note on currency of the LISTBC listing:
   ---- -- -------- -- --- ------ -------

      As of some time in the early or mid 1980s, IBM introduced
      an incore copy of the NOTICES messages which LISTBC reports
      from.  This was to allow quick LOGONs for new TSO sessions,
      if SYS1.BRODCAST was tied up, and if it could not be read.
      To stop possible LOGON delays, IBM placed an incore copy
      of the current NOTICES messages into common storage, and
      LISTBC reads from it, after IPL time.  This incore copy of
      the NOTICES messages is updated when:

      1-  An OPER SEND command is issued to write a new message.
      2-  An OPER SEND command is issued to delete a message (maybe).
      3-  An IPL is done.  I don't think that bringing the TSO
            address space down will affect the incore NOTICES.
            I ran an experiment, and it didn't do a thing.
      4-  The TSVTNCTU bit in the TSO Vector Table was set, and:
            For TSO/E 2.6.0 and below:  An OPER SEND ' ',SAVE was
              done.  (This is needed for z/OS 1.2 and earlier.)
            For TSO/E 3.3.0 and above:  A LISTBC was executed by
              anybody in the system.  (For z/OS 1.3 and later.)
          Our BCMNUPD command (APF authorized), will set the
          TSVTNCTU bit on.

      The current Incore Notices Table can be reached from the CVT.
      CVTTVT which points to the TSO Vector Table, mapped by IKJTSVT.
      TSVTNCT field in the TSO Vector Table points to the current
        in-storage copy of the NOTICES table.
      The TSVTNCTU bit in IKJTSVT being on, indicates that the
        in-storage copy of the NOTICES table needs to be updated.

      The sole function of the BCMNUPD program, which runs as an APF
        authorized TSO command with no parameters, is to turn on the
        TSVTNCTU bit in the TSVT, so the next invocation of LISTBC by
        anyone in the system, will make all BCMNOTFY changes to
        BRODCAST permanent.  (This is for z/OS 1.3 and higher.  See
        the note 4- above for z/OS 1.2 and earlier MVS versions.)

      If a copy of SYS1.BRODCAST is being updated by BCMNOTFY (meaning
        a copy that we made, with BCMDUMP and BCMREST/BCMEXPND), then
        there is no incore image of it to worry about.



   Please direct questions or problems or enhancement requests to:

      Sam Golob     email:  sbgolob@cbttape.org    or
                            sbgolob@att.net


