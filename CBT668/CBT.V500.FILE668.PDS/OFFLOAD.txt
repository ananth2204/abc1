*PROGRAM: OFFLOAD
*PURPOSE: OFFLOAD JES 2 SPOOL DATASETS INTO MVS DATASET.
*AUTHOR : Hunter Guanghui Zhou
*         Phone: 1-(416)-602-9567
*         E-mail: zhough2000@yahoo.com
*LAST UPDATE: FEBRUARY, 2004
*
* DESCRIPTION
* ===========
*   GET THE GIVEN DATASET, SELECTED BY CRITERIA SET BY OPTION,
*   SAVE SAVE EACH DATASET INTO A MVS DATASET WITH ONE RECORD
*   ADDED AT THE BEGINNING, WHICH IDENTIFY THE CHARACTERISTICS
*   OF THE DATASET.
*
* INSTALL THE PROGRAM
* ===================
*   THE LINK PARM MUST USE AC(1) TO USE AUTHORIZED FUNCTIONS.
*   THE LINKLIB (SYSLMOD DD) MUST BE IN APF AUTHORIZED LIST OF
*   SYS1.PARMLIB(PROGxx).
*
* //COMPILE EXEC ASMACL,PARM.L='AC(1)'
* //C.SYSIN   DD DISP=SHR,
* //     DSN=SP2487.ASM.SOURCE(OFFLOAD)         <== This Source Member
* //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB
* //          DD DISP=SHR,DSN=SYS1.MODGEN
* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.TEST.LINKLIB <== Must be APF LIBRARY
* //L.SYSIN   DD *
*  NAME OFFLOAD(R)
* /*
*
* PROGRAM LOGIC
* =============
*   1. Initialize the program
*      a. Initialize flags, open SYSPRINT DD
*      b. Initialize SSOB and SSS2
*      c. Read this task information
*      d. Show the welcome information
*
*   2. Parse the EXEC PARM
*      Read and parse all the parameters given in EXEC PARM.
*      If there is a error (syntax error), stop the program with RC=8
*      If there is no EXEC PARM or PARM=HELP, show the help message,
*         and stop the program.
*      If the parm is valid, continue the program.
*
*   4. Run the main program logic
*
*     a. reset the status
*     b. call ASKJES to get dataset from JES spool.
*     c. test the return codes
*        If there is no dataset, call WAITWORK to wait work.
*     d. If there is a dataset, process it.
*        The process of the job data as follows:
*       .The program will have scan all the datasets (DD) in
*        current JOB, get  the total records and maximum record
*        length, and calculate the track size to be allocated
*        for output dataset.
*
*       . The program will then allocate the output dataset.
*       . The program will read all the datasets in this JOB output.
*       . And put the JOF700I record at the beginning of each data
*         set.
*      e. When current JOB output is processed, jump to step b.
*      f. If the wait work returns,
*         If the returned event is SAPI, then jump to step b to
*         call ASKJES.
*         If the returned even is STOP command, then exit the main
*         program logic.
*   5. If the program is required to stop, show the end message,
*      and unallocate storage, close SYSPRINT, and stop the program.
***********************************************************************
*
*
*                    PROGRAM HELP MESSAGE
*                    ====================
*
* Program    : OFFLOAD
* Description: JES Spool Offload Program.
* Purpose    : Offload JES Spool Data to cataloged dataset.
* Design     : Hunter Guanghui Zhou
* Support    : Phone: 1-(416)-602-9567
*              E-mail: zhough2000@yahoo.com
* Last Update: February, 2004
*
* Introduction
* ============
*
* This program will offload the JES spool datasets into system
* datasets. The program is designed based on following rules:
*
* 1. Each spool entry will be saved into one cataloged system dataset.
*    Only spool data in OUTPUT queue will be processed.
* 2. The system cataloged dataset name convention are:
*    hlq.jobname.Ddate.jobid.TtimeIid
*
*   Here:
*   hlq      The high level qualifier of the offloaded spool dataset.
*            This hlq must given as 'H=hlq' in EXEC PARM.
*   jobname  The job name of the spool dataset.
*   date     The date when the spool dataset is created.
*   jobid    The job id of the spool dataset.
*   time     The time when the spool dataset is created.
*   id       The sequence number automatic generated by program.
*            When there are multiple spool datasets generated by
*            JES batches, the id will be added from 01 to 99.
*
* 3. All spool datasets in a single spool entry will be saved
*    into single dataset.
*    For example, JCL batch logs normally contain following 3 DDNAME
*        JESMSGLG, JESJCL, JESYSMSG
*    The program will merge these DDNAMEs in joblog into a cataloged
*    system dataset.
*
* 4. There will be a extra record at the beginning of each DDNAME.
*    To distinguish each DDNAMEs, the program add one record at
*    the beginning of the data. Here is the format of this record
*
* ****JOF700I JOBNAME(jobname ),JOBID(jobid   ),DDNAME(ddname  )****
*        RECORDS(#records)**
*
*    Here the jobname, jobid, ddname and number of records will be
*    updatedd according to related information of the spool dataset.
*
* 5. If there is any problem while processing one spool data,
*    the spool data will be in SYSTEM hold. You should refer
*    the program logs to get more information.
*
*
* Explanation of EXEC PARM
* ========================
*
*   The spool data can be selected by criteria given in EXEC PARM.
* All options in EXEC PARM can be in any order.
* The syntax of option are:
*      key1=value1,key2=value2
* Here key is single letter keyword, and value is the actual criteria
* for that key.
* If you specify multiple criteria, the selected spool data will meet
* all criteria.
*
*
* 1. H=higher level qualifier
*    This is mandatory option to specify the higher level qualifier
*    to be used to create cataloged system datasets, maximum in
*    13 characters.
*    Example:
*        H=LOGS                 Use LOGS as HLQ (LOGS.jobname.Ddat
*     Use LOGS as higher level qualifier, the datasets will be:
*        LOGS.jobname.Ddate.jobid.TtimeIid
*
* 2. C=classes
*    This specify the SYSOUT class selection criteria. You can
*    specify up to 36 classes in this option. The classes ranges
*    from 0-9, and A-Z.
*    Example:
*        C=A                    Just select SYSOUT class A
*        C=0123456789           Select SYSOUT class in numbers
*        C=ASHJ                 Select SYSOUT class A,S,H and J
*
* 3. D=dest
*    This specify the SYSOUT DEST selection criteria, maximum
*    8 characters.
*    If this is not specified, the DEST=LOCAL will be used.
*    This option support wildcards. use * for multiple characters
*    and ? for single character.
*    Example:
*        D=OFFLOAD              Just select SYSOUT DEST=OFFLOAD
*
* 4. F=form
*    This specify the SYSOUT FORM selection criteria, maximum
*    8 characters.
*    If this is not specified, any FORM will be selected.
*    This option support wildcards. use * for multiple characters
*    and ? for single character.
*    Example:
*        F=OFFLOAD              Just select SYSOUT FORM=OFFLOAD
*
* 5. J=jobname
*    This specify the jobname as selection criteria, maximum
*    8 characters.
*    If this is not specified, any jobname will be selected.
*    This option support wildcards. use * for multiple characters
*    and ? for single character.
*    Example:
*        J=EDI*                 Select jobname starts with EDI
*
* 6. HELP or no EXEC PARM at all.
*    When you specify HELP or do not specify EXEC PARM, this help
*    message will be shown.
*
*    Example:
*     1).//OFFLOAD EXEC PGM=OFFLOAD
*
*     2).//OFFLOAD EXEC PGM=OFFLOAD,PARM=HELP
*
*
* EXEC PARM Examples
* ------------------
*   1). Select spool data with SYSOUT class in numbers
*       and use 'LOGS' as higher level qualifier.
*
*        //OFFLOAD EXEC PGM=OFFLOAD,
*        //        PARM='H=LOGS,C=0123456789'
*        //SYSPRINT DD SYSOUT=*
*
*   2). Select spool data with USERID is SP2487, jobname starts
*       with SP2487, and use 'SP2487' as higher level qualifier.
*
*        //OFFLOAD EXEC PGM=OFFLOAD,
*        //        PARM='H=SP2487,U=SP2487,J=SP2487*'
*        //SYSPRINT DD SYSOUT=*
*
*   3). Select spool data with USERID is SP2487, jobname starts
*       with SP2487, and use 'SP2487' as higher level qualifier.
*
*        //OFFLOAD EXEC PGM=OFFLOAD,
*        //        PARM=('H=LOGS,U=OP9999*',
*        //        'C=159CX,D=OFFLOAD')
*        //SYSPRINT DD SYSOUT=*
*
*
* Program Logs in SYSPRINT
* ========================
*   The processing logs can be shown in SYSPRINT DD. If SYSPRINT DD
*   is not presented in JCL, there is no logs generated.
*
*   The requirements of SYSPRINT:
*      LRECL=133,RECFM=FBA
*
*   You may just specify following statement in JCL:
*        //SYSPRINT DD SYSOUT=*
*
*
* OPERATION
* =========
*   START
*   -----
*   You can start the program in JCL batch or started task.
*   Sample JCL to start:
*
*        //jobcard here
*        //OFFLOAD EXEC PGM=OFFLOAD,
*        //        PARM='your parms here'
*        //SYSPRINT DD SYSOUT=*
*
*   STOP
*   ----
*   The program support MVS system STOP command.
*   Example, if the jobname of this program is JOFLD00,
*   Use following MVS system command to stop it:
*      P JOFLD00
*
* Support
* =======
*
*  The program is written in assembler for high performance.
*  If there is a bug or problem, please contact:
*       Hunter Guanghui Zhou
*       Phone: 1-(416)-602-9567
*       E-mail: zhough2000@yahoo.com
*
* END OF HELP
* ===========
*
***********************************************************************
* MAIN PROGRAM LOGIC
***********************************************************************
OFFLOAD  TITLE 'OFFLOAD JES SPOOL LOG USING SAPI'
OFFLOAD  CSECT
OFFLOAD  AMODE 31
OFFLOAD  RMODE 24
         YREGS
         USING OFFLOAD,R15        Establish temporary base register
         B     OFLD0000           Branch to bypass data constants
         DC    CL23'PROGRAM NAME(OFFLOAD)'       Module identifier
         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'
         DC    CL48'SAPI EXTERNAL WRITER FOR JES2 SPOOL OUTPUT'
         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '
BASE2REG DC    A(OFFLOAD+4096)    Second base register
BASE3REG DC    A(OFFLOAD+8192)    Second base register
OFLD0000 DS    0H
         STM   R14,R12,12(R13)    Save caller's registers
         L     R11,BASE2REG       second base register
         L     R10,BASE3REG       third  base register
         LR    R12,R15            Change base registers
         DROP  R15                Tell assembler
         USING OFFLOAD,R12,R11,R10
* START THE PROGRAM LOGIC
         LR    R7,R1              ;COPY THE CURRENT PARM ADDRESS
         LR    R8,R13             ;COPY THE CALLER'S SAVE AREA ADDR
* DYNAMICALLY ALLOCATE STORAGE FOR DATA AREAS
         GETMAIN RU,LV=DSALEN,LOC=BELOW ;OBTAIN STORAGE FOR DATA AREAS
         LR    R13,R1             ;LOAD STORAGE ADDRESS INTO R13
         USING DSA,R13            ;USING R13 AS DSA ADDRESSING REGS.
         ST    R8,SAVEAREA+4      ;SET OUR BACKWARD LINKAGE
         ST    R13,8(,R8)         ;SET MY SAVE AREA AT CALLER'S AREA
         ST    R7,PARMADR         ;SAVE THE EXEC PARM ADDRESS
* INITIALIZE BUFFERS
         BAL   R2,INITIAL         ;INITIALIZE BUFFERS
         CLI   RETCODE,X'00'      ;TEST RETURN CODE
         BNE   RETURN
* READ PARAMETERS
         BAL   R2,READPARM
         CLI   RETCODE,X'00'      ;TEST RETURN CODE
         BNE   RETURN
         CLI   ISSTOP,YES         ;REQUESTED TO STOP?
         BE    RETURN
* MAIN FUNCTION
         BAL   R2,MAINPRG         ;
         CLI   RETCODE,X'00'      ;TEST RETURN CODE
         BNE   RETURN
* RETURN LINKAGE
RETURN   EQU   *
* CLEAN THE PROGRAM BEFORE TERMINATE
         BAL   R2,CLEANUP         ;
         XR    R9,R9              ;CLEAR R9
         IC    R9,RETCODE         ;LOAD RETURN CODE TO R9
         L     R8,SAVEAREA+4      ;LOAD THE CALLER'S SAVE AREA
         FREEMAIN RU,LV=DSALEN,A=(R13)  ; FREE ALLOCATED STOR
         LR    R13,R8             ;RESTORE CALL'S SAVE AREA
         LR    R15,R9             ;SET RETURN CODE TO R15
         RETURN (14,12),RC=(15)   ;RESTORE CALLER'S REGS AND RETURN
**********************************************************************

**********************************************************************
*---------------------------------------------------------------------*
* ROUTINE: INITIAL
* DESCRIPTION: INITIALIZE ALL BUFFERS
* INPUT:
*    R2  : RETURN CONTROL
* RETURN :
*---------------------------------------------------------------------*
INITIAL  DS    0H
* INITIAL VALUES OF FLAGS
         MVI   RETCODE,X'00'        RESET RETURN CODE
         MVI   ISSTOP,NO            SET NO STOP ON PROGRAM
*
         MVI   REQSTAT,RETNWK       THERE IS NO DATASET FROM JES
         MVI   PSPSTAGE,PSPSINIT    SET SCAN STAG FOR SPOOL DATA
         MVI   OJLMSG,C' '          CLEAR THE MESSAGE WITH SPACES
         MVC   OJLMSG+1(132),OJLMSG CLEAR THE MESSAGE WITH SPACES
         MVC   OJLMID(7),=CL7'JOF020I' SET THE MESSAGE ID
         MVC   OJLCMD(7),=CL7'RECEIVE' SET THE COMMAND
         XC    TIMEFM1,TIMEFM1      CLEAR TIME/DATE SOURCE
         XC    TOTLOGS,TOTLOGS      RESET TOTAL LOGS
         XC    OUTRECRS,OUTRECRS    CLEAR 2 BYTES OF VBA RDW
         MVI   SELSTART,C' '        CLEAR ALL SELECTION AREA
         MVC   SELSTART+1(SELSTLEN),SELSTART
* RESET SAPI SELECTION CRITERIA
         MVI   ISCLASS,NO         SET CRITERIAS DEFAULT TO NO
         MVI   ISDEST,NO
         MVI   ISFORM,NO
         MVI   ISHLQ,NO
         MVI   ISJOBNM,NO
         MVI   ISUSRID,NO
         MVI   ISSELGV,NO
* CLEAR LOG BUFFER
         ZAP   MSGCTR,P0            RESET THE MSG LINE COUNTER
         MVI   MSGBUFTX,C' '
         MVC   MSGBUFTX+1(131),MSGBUFTX
* INITIAL INDAB
         LA    R1,ODSNINFO
         ST    R1,INDAB+12
* OPEN SYSPRINT DCB
         MVI   SPROPNFL,NO          SET SYSPRINT OPEN FLAG TO NO
         OPEN  (SYSPRINT,(OUTPUT))
         LTR   R15,R15              OPEN SUCCESS?
         BNZ   INI1000              NO, SKIP THE SYSPRINT
         MVI   SPROPNFL,YES         SET OPEN FLAG TO YES
INI1000  EQU   *
         BAL   R1,GJOBINFO          GET THE CURRENT RUNNING JOBNAME
* INITIALIZE SSOB & SSS2
         BAL   R3,INISSOB
* INIT ECBS
         BAL   R3,INIECBS
* SHOW WELCOME MESSAGES
         MVC   MSGBUFTX(45),INIMSG01
         BAL   R1,LOG
         MVC   MSGBUFTX(50),INIMSG02
         BAL   R1,LOG
         MVC   MSGBUFTX(34),INIMSG03
         BAL   R1,LOG
         MVC   MSGBUFTX(45),INIMSG04
         BAL   R1,LOG
         MVC   MSGBUFTX(35),INIMSG05
         BAL   R1,LOG
         MVC   MSGBUFTX(36),=CL36'JOF007I Command to stop this task: P'
         MVC   MSGBUFTX+37(8),JOBNAME
         BAL   R1,LOG
         MVC   MSGBUFTX(86),INIMSG06
         BAL   R1,LOG
         BAL   R1,SJOBINFO          SHOW THE JOBNAME INFORMATION
         MVC   MSGBUFTX(86),INIMSG06
         BAL   R1,LOG
* RETURN CONTROL
         BR    R2
**********************************************************************

**********************************************************************
* CLEAN THE PROGRAM BEFORE TERMINATE THE PROGRAM.
**********************************************************************
CLEANUP  DS    0H
         MVC   MSGBUFTX(80),INIMSG06
         BAL   R1,LOG
         MVC   MSGBUFTX(29),=CL29'JOF902I Total processed logs:'
         L     R1,TOTLOGS          LOAD CURRENT LINE COUNT
         BAL   R15,CVTDEC
         MVC   MSGBUFTX+30(8),0(R1)
         MVI   MSGBUFTX+38,C'.'
         BAL   R1,LOG
         MVC   MSGBUFTX(27),=CL27'JOF903I The return code is'
         SR    R1,R1
         ICM   R1,B'0001',RETCODE  ;LOAD THE RETURN CODE TO R9
         BAL   R15,CVTDEC
         MVC   MSGBUFTX+27(2),6(R1)
         MVI   MSGBUFTX+29,C'.'
         BAL   R1,LOG
* SHOW JOB FINISHED MESSAGE
         CLI   RETCODE,X'00'
         BNE   CLN1000
         MVC   MSGBUFTX(36),=CL36'JOF900I The JES spool offload progra'
         MVC   MSGBUFTX+36(23),=CL23'm is finished normally.'
         B     CLN1500
CLN1000  EQU    *
         MVC   MSGBUFTX(36),=CL36'JOF900I The JES spool offload progra'
         MVC   MSGBUFTX+36(23),=CL23'm is finished abnormally.'
CLN1500  EQU    *
         BAL   R1,LOG
* CLOSE SYSPRINT DCB IF IT'S OPENED.
         CLI   SPROPNFL,YES
         BNE   CLN5000
         CLOSE (SYSPRINT)
         MVI   SPROPNFL,NO          SET SYSPRINT OPEN FLAG TO NO
CLN5000  EQU    *
         BR    R2
**********************************************************************
*-------------------------------------------------------------*
*        Initialize the SSOB AND SSS2                         *
*-------------------------------------------------------------*
**********************************************************************
INISSOB  DS     0H
* CLEAR THE SSOB AND SSS2 AREA WITH BINARY ZEROS.
         LA     R0,BUFSSOB     LOAD THE ADDRESS OF STORAGE
         LA     R1,BUFSSLEN    LOAD THE LENGTH OF THE STORAGE
         SR     R15,R15        CLEAR LENGTH AND PAD FIELD IN R15
         MVCL   R0,R14         CLEAR STORAGE OF SSOB AND SSS2
* PREPARE SSOB PTR FOR IEFSSREQ
         LA     R9,BUFSSOB     Point at actual SSOB
         USING  SSOB,R9
         ST     R9,BUFSSPTR    Save in ptr for IEFSSREQ
         OI     BUFSSPTR,X'80' Turn on high-order bit
         MVC    SSOBID,=CL4'SSOB'  INIT CONTROL BLK ID
         LA     R1,SSOBHSIZ    Get the length
         STH    R1,SSOBLEN         and set it.
         LA     R1,SSOBSOU2    Get the function code (SSI 79)
         STH    R1,SSOBFUNC        and set it.
         LA     R1,BUFSSS2     Get address of SSS2
         ST     R1,SSOBINDV        and set it.
         DROP   R9
*-------------------------------------------------------------*
*          Initial SSS2 setting:                              *
*            - SSS2 version number                            *
*            - SSS2 eyecatcher                                *
*            - GET/PUT                                        *
*-------------------------------------------------------------*
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
         LA     R1,SSS2SIZE        Get SYSOUT extension size
         STH    R1,SSS2LEN         Save in SAPI extension
         LA     R1,ECBSAPI         Get the SAPI ECB addr
         ST     R1,SSS2ECBP        Save in SAPI extension
*        MVI    SSS2VER,SSS2CVER   Set version, default has changed
*                                   in the IAZSSS2 macro - z/OS 2.1
         MVI    SSS2VER,SSS2VCTP   Set version, revert back to v2
*                                  *- now in effect to fix the bug.
         MVC    SSS2EYE,=C'SSS2'   Set eye-catcher
         MVI    SSS2TYPE,SSS2PUGE  Indicate PUT/GET request
         MVI    SSS2SEL1,SSS2SWTR  Select only ODISP=WRITE/KEEP
* DISPOSITION OF THE DATASET
         MVI    SSS2DSP1,(SSS2DKPE+SSS2RNPR) Keep dataset,no return
* SET ECBSAPI AS FIRST ECB FOR WAIT
         BR     R3
         DROP   R9

**********************************************************************
*-------------------------------------------------------------*
*        Initialize the COM ECBS                              *
*-------------------------------------------------------------*
**********************************************************************
INIECBS  DS    0H
         STM   R1,R3,SVL2
* INIT SAPI ECB
         LA    R1,ECBSAPI           Get addres of writer ECB
         ST    R1,@WTRECB           Save it away
* INIT COMM ECB
         EXTRACT MF=(E,XTPRML)   EXTRACT AREA
         L     R2,COMMADDR          LOAD THE ADDRESS OF COMMECB
         USING COM,R2
         L     R1,COMCIBPT          LOAD ADDR OF THE START CIB
         LTR   R1,R1                TEST IF START CIB PRESENT
         BZ    INIE1000
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R1)   FREE START CIB
INIE1000 EQU   *
         QEDIT ORIGIN=COMCIBPT,CIBCTR=1
         L     R1,COMECBPT
         ST    R1,@COMECB
         OI    @COMECB,X'80'        SET THIS IS THE LAST ECB ADDR
         DROP  R2
INIE8000 EQU   *
         LM    R1,R3,SVL2
         BR    R3

*---------------------------------------------------------------------*
**********************************************************************
*  MAIN PROGRAM LOGIC                                         *
*-------------------------------------------------------------*
MAINPRG  DS     0H
         ST     R2,SVL1
         BAL    R3,RESTSTAT           RESET THE STATUS
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
MAIN1000 EQU    *
         CLI    ISSTOP,YES            REQUIRE TO STOP?
         BE     MAIN7000              YES, STOP THE PROGRAM
         BAL    R3,ASKJES             CALL SSI CALL FOR JOB DATASETS
         CLI    REQSTAT,RETYES        TEST IF ANY JOB RETURN FROM JES
         BE     MAIN2000              YES, PROCESS THIS DATASET.
         CLI    REQSTAT,RETNWK        TEST IF NO MORE JOB FROM JES
         BE     MAIN6000              YES, JUST WAIT FOR NEXT JOB
         B      MAIN7000              NO, PROBLEM PROCESSING
* PROCESS DATASET
MAIN2000 EQU    *
         BAL    R3,GOTJOB             PROCESS THE DATASET
         CLI    PSPSTAGE,PSPSSCAN     IS THIS A SCAN STAGE?
         BNE    MAIN3000              NO, JUMP TO READ STAGE
* SCAN STAGE PROCESSING
         TM     SSS2RET1,SSS2DSF      Is it 1st dataset?
         BNO    MAIN2200              NO ,SKIP FIRST DATASET PROCESS
         BAL    R3,TSTODSN            SET THE OUTPUT DATASET NAME
MAIN2200 BAL    R3,SETJDISP           SET THE JOB DISPOSITION
         TM     SSS2RET1,SSS2DSL      Is it last dataset?
         BNO    MAIN2400              Yep,
         BAL    R3,RESTSTAT           RESET THE STATUS
MAIN2400 B      MAIN1000              GET NEXT DATASET
* READ STAGE PROCESSING
MAIN3000 BAL    R3,SAVEJOB            SAVE THE CURRENT DATA
         BAL    R3,SETJDISP           SET THE JOB DISPOSITION
         TM     SSS2RET1,SSS2DSL      Is it last dataset?
         BNO    MAIN3400              Yep,
         BAL    R3,RESTSTAT           RESET THE STATUS
MAIN3400 B      MAIN1000              GET NEXT DATASET
* FOR THERE IS NO DATASET AVAILABLE
MAIN6000 BAL    R3,WAITWORK           YES, THEN PROCESS IT
         B      MAIN1000              OTHERWISE CONTINUE TO WORK
* FOR THERE IS A PROBLEM
MAIN7000 EQU    *
*        CLI    RETCODE,X'00'
*        BE     MAIN8000
*        BAL    R3,LASTCALL
MAIN8000 EQU    *
         L      R2,SVL1
         BR     R2
         DROP   R9

***********************************************************************
* RESET THE DEFAULT VALUE AFTER THE LAST DATASET IS PROCESSED *
***********************************************************************
RESTSTAT DS    0H
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
         CLI   PSPSTAGE,PSPSSCAN    IS SCAN STAG FOR SPOOL DATA
         BNE   RSS1000              NO, PROCESS READ STAGE
* JCLLOG: END OF SCAN, END OF THE LAST SCAN DATASET.
* END OF SCAN STAGE:
         MVI   PSPSTAGE,PSPSREAD    SET READ STAG FOR SPOOL DATA
* CHANGE THE SELECTION CRITERIA BY LIMIT TO ONE JOBID.
         MVC   SSS2JBIL,SSS2JBIR
         MVC   SSS2JBIH,SSS2JBIR
         MVC   SSS2JBIL(3),=CL3'JOB'
         MVC   SSS2JBIH(3),=CL3'JOB'
         OI    SSS2SEL1,SSS2SJBI
         CLI   ISODSBAD,YES        TEST IF THE OUTPUT DSN IS BAD
         BNE   RSS0500             NO, CONTINUE
         MVC   MSGBUFTX(31),=CL31'JOF053W Put job on SYSTEM hold:'
         MVC   MSGBUFTX+32(31),=CL31'JOBNAME(       ),JOBID(       )'
         MVC   MSGBUFTX+40(8),SSS2JOBR
         MVC   MSGBUFTX+55(8),SSS2JBIR
         BAL   R1,LOG
         B     RSS4000
RSS0500  EQU   *
         BAL   R4,OPNODSN          ALLOCATE AND OPEN THE OUTPUT DATASET
         CLI   ISODSALC,YES
         BE    RSS4000
         MVC   MSGBUFTX(35),=CL35'JOF050E Cannot open output dataset:'
         MVC   MSGBUFTX+36(44),LDODSN
         BAL   R1,LOG
 MVC   MSGBUFTX(38),=CL38'JOF051W Please make sure HLQ is valid.'
         BAL   R1,LOG
 MVC   MSGBUFTX(44),=CL44'JOF052W Please make there is enough storage.'
         BAL   R1,LOG
         MVI   RETCODE,12          SET THE RETURN CODE
         MVI   ISSTOP,YES          SET THE STOP FLAG
         B     RSS4000
* RESET THE VALUE TO INITIAL STAGE, READY TO GET NEW ONE
* INITIAL STAGE
RSS1000  EQU   *
         BAL   R4,CLSODSN          CLOSE AND UNALLOCATED OUTPUT DATASET
         MVI   ISODSOPN,NO          SET OUTPUT DATASET IS NOT OPEN
         MVI   ISODSALC,NO          SET OUTPUT DATASET IS NOT ALLOCATED
         MVI   ISIDSOPN,NO          SET INPUT  DATASET IS NOT OPEN
         MVI   ISIDSALC,NO          SET INPUT  DATASET IS NOT ALLOCATED
         XC    TOTREC,TOTREC        CLEAR THE TOTAL RECORDS TO 0
         BAL   R4,SETDFALT         PREPARE SAPI SELECTION CRITERIA
         LA    R1,SEQID            SET OUTPUT SEQ ID AT THE START
         ST    R1,ODSNSEQ
         XC    OUTLRECL,OUTLRECL   RESET THE OUTPUT LRECL
         MVI   ISODSBAD,NO         OUPTUT DATASET IS GOOD
         MVI   ISIDSBAD,NO         OUPTUT DATASET IS GOOD
         CLI   PSPSTAGE,PSPSREAD    IS READ STAG FOR SPOOL DATA
         BNE   RSS2500              NO, SKIP COUNTER LOGS
         L     R1,TOTLOGS           LOAD THE LOG COUNTER
         LA    R1,1(0,R1)           ADD 1
         ST    R1,TOTLOGS           LOAD THE LOG COUNTER
RSS2500  EQU   *
         MVI   PSPSTAGE,PSPSSCAN    SET READ STAG FOR SPOOL DATA
* RETURN TO CALLER
RSS4000  EQU   *
         BR    R3
         DROP   R9

***********************************************************************
* SET DATASET DISPOSITION ACCORDING TO:                       *
*     PROCESSING STAGE                                        *
*     WHETHER THIS IS A JCLLOG                                *
***********************************************************************
SETJDISP DS    0H
         LA    R9,BUFSSS2          Point at actual SSS2
         USING SSS2,R9
         CLI   PSPSTAGE,PSPSSCAN   IS THIS A SCAN STAGE?
         BNE   SJD4000             NO, PROCESS READ STAGE
* PROCESS SCAN STAGE
         CLI   ISODSBAD,YES        IS OUTPUT DATASET FAILED?
         BE    SJD5000             YES, PROCESS THE JOBLOG AS HOLD
         MVI   SSS2DSP1,SSS2DKPE   Keep dataset, and return again
         B     SJD8000
* PROCESS READ STAGE
SJD4000  EQU   *
         CLI   ISODSBAD,YES        IS OUTPUT DATASET FAILED?
         BE    SJD5000
         CLI   ISIDSBAD,YES        IS OUTPUT DATASET FAILED?
         BE    SJD5000
         MVI   SSS2DSP1,X'00'      DELETE THE DATAET FOR PROCESSED ONE
         B     SJD8000
* PROCESS OUTPUT DATASET ALLOCATION FAILED.
SJD5000  EQU   *
         MVI   SSS2DSP1,(SSS2DKPE+SSS2RHLD) Keep dataset, SYSTEM HOLD
         B     SJD8000
SJD8000  EQU   *
         BR    R3
         DROP   R9

***********************************************************************
* SET THE OUTPUT DATASET NAME                                 *
***********************************************************************
SETODSN  DS    0H
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
         ST    R1,SVL4
* SETUP ADDRESSABILITY
* GET THE TIME AND DATE INFO
         MVC   TIMEFM1(4),SSS2TOD  COPY THE TOD TIME
         BAL   R15,CVTTIME
* GET THE DATASET INFO
         MVI   LDODSN,C' '         CLEAR THE OUTUT DATASET NAME
         MVC   LDODSN+1(43),LDODSN CLEAR THE OUTUT DATASET W/ SPACE
         LA    R1,LDODSN           LOAD THE ADDRESS OF DATASET BUFFER
* COPY HLQ
         MVC   0(14,R1),SELHLQ      COPY THE HLQ
         LA    R14,14              LOAD THE MAX LENGTH OF HLQ
         BAL   R15,FINDEOS         FIND THE LOCATION OF END OF STRING
* ADD DOT
         MVI   0(R1),C'.'
         LA    R1,1(0,R1)
* COPY THE JOB NAME
         MVC   0(8,R1),SSS2JOBR    COPY THE JOBNAME
         LA    R14,8               LOAD THE MAX LENGTH OF HLQ
         BAL   R15,FINDEOS
* ADD DOT
         MVI   0(R1),C'.'
         LA    R1,1(0,R1)
* ADD D
         MVI   0(R1),C'D'
         LA    R1,1(0,R1)
* COPY DATE
         MVC   0(6,R1),TIME3DT     COPY THE DATE INFO
         LA    R1,6(0,R1)
* ADD DOT
         MVI   0(R1),C'.'
         LA    R1,1(0,R1)
* COPY JOBID
         MVC   0(1,R1),SSS2JBIR      COPY THE JOBID
         MVC   1(5,R1),SSS2JBIR+3    COPY THE JOBID
         LA    R14,6                 LOAD THE MAX LENGTH OF HLQ
         BAL   R15,FINDEOS
* ADD DOT
         MVI   0(R1),C'.'
         LA    R1,1(0,R1)
* ADD T
         MVI   0(R1),C'T'
         LA    R1,1(0,R1)
* COPY TIME
         MVC   0(4,R1),TIME3TM     COPY THE TIME INFO
         LA    R1,4(0,R1)
* COPY DATASET ID
         ST    R1,ODSNILC          SAVE THE LOCATION OF ODSN ID
         BAL   R15,SETODSID        SET THE OUTPUT DATASET ID
         LA    R1,2(0,R1)
* COPY DATASET NAME
         L     R1,SVL4
         BR    R1
         DROP   R9

***********************************************************************
*SETODSID: RETURN THE END OF STRING LOCATION IN R1            *
*  INPUT : SOURCE ADDRESS: R1, LENGTH : R14                   *
***********************************************************************
SETODSID DS    0H
* ADD 1 TO ODSN ID
         L     R1,ODSNILC          LOAD THE LOCATION OF ODSN ID
         L     R14,ODSNSEQ         LOAD THE CURRENT SEQUENCE ID
         MVC   0(1,R1),0(R14)      COPY THE SEQUENCE ID
         LA    R14,1(0,R14)        ADD THE SEQUENCE ID
         ST    R14,ODSNSEQ
         BR    R15


***********************************************************************
* FINDEOS: RETURN THE END OF STRING LOCATION IN R1            *
*  INPUT : SOURCE ADDRESS: R1, LENGTH : R14                   *
***********************************************************************
FINDEOS  DS    0H
FDE1000  EQU   *
         CLI   0(R1),C' '       COMPARE THE BYTE FOR END OF STRING BYTE
         BE    FDE2000          IF FOUND, EXIT THE LOOP
         CLI   0(R1),X'00'      COMPARE THE BYTE FOR END OF STRING BYTE
         BE    FDE2000          IF FOUND, EXIT THE LOOP
         LA    R1,1(0,R1)       MOVE TO NEXT BYTE TO TEST
         BCT   R14,FDE1000      REDUCE THE COUNTER AND CONTINUE LOOP
FDE2000  EQU   *
         BR    R15

***********************************************************************
* CVTTIME: CONVERT DATE AND TIME FROM STCK TO DEC FORMAT      *
***********************************************************************
CVTTIME  DS    0H
         ST    R15,SVL3
         MVI   TIMEFM2,X'01'        SAVE X'01' for significant lead 0
         MVC   TIMEFM3(DATEPTNL),DATEPTN  COPY EDIT PATTERN
         STCKCONV STCKVAL=TIMEFM1,CONVVAL=TIMEFM2A,TIMETYPE=DEC,       X
               DATETYPE=YYYYMMDD
         LA    R6,TIMEFM3         LOAD THE TIME FIELD
         LA    R7,TIMEFM2         LOAD THE DATA AREA (16 BYTES)
         ED    0(8,R6),0(R7)      EDIT TIME
         ED    8(12,R6),9(R7)     EDIT DATE
         L     R15,SVL3
         BR    R15

***************************************************************
*              SELECTION UPDATE                               *
*-------------------------------------------------------------*
***********************************************************************
SETDFALT DS    0H
         LA    R9,BUFSSS2          Point at actual SSS2
         USING SSS2,R9
         XC    LDACLSR,LDACLSR     Clear returned class
         XC    LDADESTR,LDADESTR   Clear returned destination
         XC    LDAJOBIR,LDAJOBIR   Clear returned job number
         MVI   SSS2TYPE,SSS2PUGE   Indicate GET request
         MVI   SSS2UFLG,0          Clear disposition flag GET request
         MVI   SSS2SEL1,SSS2SWTR
* SET CLASS SELECTION CRITERIA
         CLI   ISCLASS,YES
         BNE   SDF1000
         OI    SSS2SEL1,SSS2SCLS
         MVC   SSS2CLSL,SELCLASS   Set the classes
SDF1000  EQU   *
* SET DEST  SELECTION CRITERIA
         CLI   ISDEST,YES
         BNE   SDF2000
         OI    SSS2SEL1,SSS2SDST
         MVC   SSS2DEST,SELDEST    Set the destination
SDF2000  EQU   *
* SET JOBNAME SELECTION CRITERIA
         CLI   ISJOBNM,YES
         BNE   SDF3000
         OI    SSS2SEL1,SSS2SJBN
         MVC   SSS2JOBN,SELJOBNM   Set the destination
SDF3000  EQU   *
         MVI   SSS2SEL2,X'00'      Clear selection flag two
* SET FORM SELECTION CRITERIA
         CLI   ISFORM,YES
         BNE   SDF4000
         OI    SSS2SEL2,SSS2SFRM
         MVC   SSS2FORM,SELFORM    Set the destination
SDF4000  EQU   *
* SET CREATER SELECTION CRITERIA
         CLI   ISUSRID,YES
         BNE   SDF5000
         OI    SSS2SEL2,SSS2SCRE
         MVC   SSS2CREA,SELUSRID   Set the destination
SDF5000  EQU   *
         MVI   SSS2SEL3,X'00'      and selection flag three
         MVI   SSS2SEL4,X'00'      and selection flag FOUR
         MVI   SSS2SEL5,X'00'      and selection flag FOUR
         BR    R4                  Return to caller
         DROP  R9
***********************************************************************
*-------------------------------------------------------------*
*        Subroutine to go ask JES for something to do.        *
*-------------------------------------------------------------*
ASKJES   DS     0H
         STM    R1,R3,SVL2
         MVI    REQSTAT,RETERR        SET THERE IS NO JES DATASET
         MODESET MODE=SUP,KEY=ZERO    Get supervisor state
         LA     R1,BUFSSPTR           Point at addr of addr of SSOB
         IEFSSREQ
         LR     R7,R15                SAVE THE RETURN CODE
         MODESET MODE=PROB,KEY=NZERO  GET BACK TO PROBLEM STATE
         LTR    R7,R7                 Good return code from SSI?
         BNZ    SSIFAIL               No, error
         LA     R2,BUFSSOB            Point at addr of addr of SSOB
         USING  SSOB,R2
         L      R3,SSOBRETN         Get the subsytem return code
         DROP   R2
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
*-------------------------------------------------------------*
*        Check SSOB return code for type of processing to     *
*        occur next....                                       *
*-------------------------------------------------------------*
         C      R3,=A(SSS2RTOK)     Anything to do?
         BC     EQ,ASKJOK           BIY, Just do it
         C      R3,=A(SSS2EODS)     End of datasets?
         BC     EQ,ASKNOJOB         Nothing to do, so wait
         C      R3,=A(SSS2LERR)     Was is a logical error?
         BC     EQ,LOGICERR         Nothing to do, so wait
         C      R3,=A(SSS2BDIS)     Was is a disposition error?
         BC     EQ,DISPERR          Nothing to do, so wait
* SAPI CALLING FAILED
         MVC    MSGBUFTX(31),=CL31'JOF080E SAPI RETURN FAILED, RC='
         LR     R1,R3
         BAL    R15,CVTHEX
         MVC    MSGBUFTX+31(8),0(R1)
         BAL    R1,LOG                        SHOW THE FINAL MESSAGE
         MVI    RETCODE,X'08'      ;SET RETURN CODE 8
         B      ERRCONT             Continue processing
SSIFAIL  EQU    *
         MVC    MSGBUFTX(32),=CL32'JOF081E SAPI CALLING FAILED, RC='
         LR     R1,R7
         BAL    R15,CVTHEX
         MVC    MSGBUFTX+32(8),0(R1)
         BAL    R1,LOG                        SHOW THE FINAL MESSAGE
         MVI    RETCODE,X'08'      ;SET RETURN CODE 8
         B      ERRCONT             Continue processing
*-------------------------------------------------------------*
*        Logical error processing                             *
*-------------------------------------------------------------*
LOGICERR DS     0H
   MVC    MSGBUFTX(41),=CL41'JOF082E SAPI logical Error, reason code:'
         SR     R1,R1               Clear to zeroes
         IC     R1,SSS2REAS         Get reason code
         BAL    R15,CVTHEX
         MVC    MSGBUFTX+41(8),0(R1)
         BAL    R1,LOG
         B      ERRCONT             Continue processing
*-------------------------------------------------------------*
*        Disposition error processing                         *
*-------------------------------------------------------------*
DISPERR  DS     0H
   MVC    MSGBUFTX(37),=CL37'JOF083E SAPI DISP Error, reason code:'
         SR     R1,R1               Clear to zeroes
         IC     R1,SSS2REAS         Get reason code
         BAL    R15,CVTHEX
         MVC    MSGBUFTX+37(8),0(R1)
         BAL    R1,LOG
*-------------------------------------------------------------*
*        If the error was due to a bad type, the type will    *
*        be 'reset' on the next IEFSSREQ request. So there    *
*        is nothing to do here.                               *
*        If the error was due to a bad length, the length     *
*        needs to be reset since it is set only once, during  *
*        initialization.                                      *
*-------------------------------------------------------------*
ERRCONT  DS     0H
         MVI    REQSTAT,RETERR     SET THE JES DATASET IS AVAILABLE
         B      ERRC100            No, SKIP
         SR     R1,R1
         IC     R1,SSS2REAS
         C      R1,=A(SSS2RLEN)     Was it bad SSS2 length?
         BC     NE,ERRC100          No, SKIP
         LA     R1,SSS2SIZE         Get SSS2 length
         STH    R1,SSS2LEN          Get SSS2 length
ERRC100  EQU    *
         MVI    RETCODE,X'08'      ;SET RETURN CODE 8
         B      ASKEND
ASKJOK   EQU    *
         MVI    REQSTAT,RETYES     SET THE JES DATASET IS AVAILABLE
         B      ASKEND
ASKNOJOB EQU    *
         MVI    REQSTAT,RETNWK     SET NO DATASET IS AVAILABLE
         B      ASKEND
ASKEND   EQU    *
         LM     R1,R3,SVL2
         BR     R3
         DROP   R9
***********************************************************************

***************************************************************
*              WAIT FOR JES POST/COMMAND                      *
*-------------------------------------------------------------*
*        Wait for post indicating newly created SYSOUT        *
*        exists to process.                                   *
*-------------------------------------------------------------*
WAITWORK DS    0H
         STM   R1,R3,SVL2
         BAL   R4,CLSODSN          CLOSE AND UNALLOCATED OUTPUT DATASET
WTWK1000 EQU    *
         MODESET KEY=ZERO,MODE=SUP
         WAIT  1,ECBLIST=LDAECBL   Wait for SYSOUT
         MODESET KEY=NZERO,MODE=PROB
* TEST IF THERE IS A CONSOLE COMMAND
         L     R2,COMMADDR          LOAD THE ADDRESS OF COMMECB
         USING COM,R2               DEFINE COM AREA ADDRESSABILITY
         L     R3,COMCIBPT          LOAD ADDR OF THE CIB
         LTR   R3,R3                TEST IF CIB PRESENT
         BZ    WTWK8000             NO, BYPASS MODIFY COMMAND CHECK
         BAL   R4,CMDPROC           PROCESS MODIFY COMMAND
         CLI   ISSTOP,YES           USER REQUESTED STOP?
         BNE   WTWK1000             NO, CONTINUE TO WAIT
         DROP  R2
WTWK8000 EQU   *
         MVI   ECBSAPI,0           Turn off POSTed bit  (C J Kinn)
         LM    R1,R3,SVL2
         BR    R3                  Go see if there is something to do
***********************************************************************

CMDPROC  DS    0H
         STM   R2,R4,SVL3
         L     R2,COMMADDR          LOAD THE ADDRESS OF COMMECB
         USING COM,R2               DEFINE COM AREA ADDRESSABILITY
         L     R3,COMCIBPT          LOAD ADDR OF THE CIB
         USING CIB,R3               DEFINE CIB AREA ADDRESSABILITY
         IC    R5,CIBVERB
         CLM   R5,B'0001',=AL1(CIBSTOP)  TEST IF STOP COMMAND
         BNE   CMDP2000            BR IF NOT
         MVI   ISSTOP,YES          SET STOP FLAG ON
         MVC   MSGBUFTX(30),=CL30'JOF904I RECEIVE STOP COMMAND.'
         BAL   R1,LOG                        SHOW THE FINAL MESSAGE
         B     CMDP8000            BR IF NOT
* NORMAL MODIFY COMMAND PROCESSING
CMDP2000 EQU   *
         MVC   MSGBUFTX(32),=CL32'JOF910I RECEIVE MODIFY COMMAND.'
         BAL   R1,LOG                        SHOW THE FINAL MESSAGE
CMDP8000 EQU   *
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R3)    FREE THIS CIB
         LM    R2,R4,SVL3
         BR    R4                  Go see if there is something to do
         DROP  R2,R3

***********************************************************************
*-------------------------------------------------------------*
*        Job returned from JES3......                         *
*                                                             *
*        Now remember the jobid for later, enter the          *
*        allocation/unallocation loop, when finished with     *
*        this job, dispose of it and get another.             *
*                                                             *
*-------------------------------------------------------------*
GOTJOB   DS    0H
         LA    R9,BUFSSS2          Point at actual SSS2
         USING SSS2,R9
         MVC   LDACLSR,SSS2CLAR    Save the ds class
         MVC   LDADESTR,SSS2DESR   Save the ds dest
         MVC   LDAJOBIR,SSS2JBIR   Save the jobid
         MVC   LDAJOBNR,SSS2JOBR   Save the jobname
         MVC   LDATXTA1,SSS2BTOK   Save DS token address
         MVC   LDADSN,SSS2DSN      Save the Data Set name for alloc
* COUNT THE NUMBER OF RECORDS FOR SCAN STAGE
         CLI   PSPSTAGE,PSPSSCAN     IS THIS A SCAN STAGE?
         BNE   GTJ3000
         BAL   R15,CNTLINE            COUNT THE LINES
GTJ3000  EQU   *
         BR    R3
*-------------------------------------------------------------*
         DROP  R9
*-------------------------------------------------------------*
SHOWLOG  EQU   *
         ST    R1,SVL4
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
         MVC   OJLJNM(8),SSS2JOBR
         MVC   OJLJID(8),SSS2JBIR
         L     R1,TOTREC           LOAD CURRENT LINE COUNT
         BAL   R15,CVTDEC
         MVC   OJLREC(8),0(R1)
         MVC   OJLDSN(44),LDODSN
         MVC   MSGBUFTX(132),OJLMSG
         BAL   R1,LOG
         L     R1,SVL4
         BR    R1
         DROP  R9

***********************************************************************
* SCAN JOB TO SEE IF THE JOB IS JOB LOG                       *
***********************************************************************
***********************************************************************
* COUNT THE LINE FOR EACH DATASET IN JOB LOG                  *
***********************************************************************
CNTLINE  DS    0H
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
         L     R1,SSS2LNCT         LOAD CURRENT LINE COUNT
         A     R1,TOTREC           ADD THE CURRENT LINE COUNT
         ST    R1,TOTREC           UPDATE THE LINE COUNT
         LH    R1,SSS2MLRL         LOAD CURRENT LINE COUNT
         CH    R1,OUTLRECL         COMPARE THE CURRENT MAX LRECL
         BNH   CTL1000             IF NOT BIGGER, SKIP TO UPDATE
         STH   R1,OUTLRECL         OTHERWISE UPDATE WITH CURRENT ONE
CTL1000  EQU   *
         BR    R15
         DROP  R9

***********************************************************************
* INSERT EXTRA RECORD AT START OF JOBLOG
***********************************************************************
INSREC   DS    0H
         LA    R9,BUFSSS2          Point at actual SSS2
         USING SSS2,R9
         MVC   INSRECTX,INSRECPT
         MVC   INSRECTX+19(8),SSS2JOBR
         MVC   INSRECTX+35(8),SSS2JBIR
         MVC   INSRECTX+52(8),SSS2DDND
         L     R1,SSS2LNCT         LOAD CURRENT LINE COUNT
         BAL   R15,CVTDEC
         MVC   INSRECTX+70(8),0(R1)
         LA    R1,INSRECLN+4       SET THE LENGTH OF THE RECORD
         STH   R1,OUTRECLN         SAVE RECORD LENGTH IN VB HEADER
         LA    R8,OUTREC
         MVC   OUTRECTX(INSRECLN),INSRECTX
         PUT   OUTDCB,(R8)         SAVE IT TO OUTPUT DATASET
         BR    R4
         DROP  R9

***********************************************************************
* SAVE THE CURRENT DATASET                                    *
***********************************************************************
SAVEJOB  DS    0H
         STM   R2,R4,SVL2
         CLI   ISODSBAD,YES        IF THE OUTPUT DATASET BAD?
         BE    SVJ8000             YES, SKIP TO SAVE
         BAL   R4,OPNIDSN          ALLOCATE AND OPEN INPUT DATASET
         CLI   ISIDSOPN,NO         IS  THE DATASET IS NOT OPENED
         BE    SVJ7000             YES, SKIP TO SAVE
         XC    OUTRECRS,OUTRECRS   CLEAR RESERVED 2 BYTES
         LA    R8,OUTREC           LOAD THE OUTPUT RECORD ADDRESS
         BAL   R4,INSREC           INSERT THE RECORD FOR SEPARATOR
         LA    R2,INDCB            Get the DCB
         USING IHADCB,R2           Tell the assembler
SVJ1000  EQU   *
         GET   INDCB               GET NEXT INPUT RECORD
         LR    R7,R1               SAVE THE RETURNED RECORD ADDRESS
         LH    R5,DCBLRECL         LOAD CURRENT RECORD LENGTH
* REMOVE TRAILING SPACES
         AR    R5,R7               MOVE TO THE END OF RECORD
         BCTR  R5,0
SVJ2000  EQU   *
         CLI   0(R5),C' '          IS THIS A SPACE?
         BNE   SVJ2200
         CR    R5,R7               REACH AT THE BEGINNING
         BE    SVJ2400             YES, PROCESS EMPTY RECORD
         BCTR  R5,0
         B     SVJ2000
SVJ2200  EQU   *
         SR    R5,R7               GET NEW LENGTH
         LA    R5,1(0,R5)          ADD 1 TO GET REAL LENGTH
         B     SVJ3000
SVJ2400  EQU   *
         LA    R5,2                ADD AT LEAST ONE SPACE
SVJ3000  EQU   *
         LA    R4,4(0,R5)          GET R4 = 4 + R5 (ADD RDW LENGTH)
         STH   R4,OUTRECLN         SAVE RECORD LENGTH IN VB HEADER
         BCTR  R5,0                SUBTRACT R5 BY ONE FOR MVC REC
         LA    R6,OUTRECTX
         EX    R5,MVCREC           COPY THE RECORD TO OUTREC
         PUT   OUTDCB,(R8)         SAVE IT TO OUTPUT DATASET
         B     SVJ1000
INDCBEOF EQU   *
         BAL   R4,CLSIDSN          CLOSE & UNALLOCATE INPUT DATASET
         B     SVJ8000
* INPUT DATASET IS NOT OPEN
SVJ7000  EQU   *
         MVI   ISIDSBAD,YES        SET THE INPUT DATASET BAD
SVJ8000  EQU   *
         LM    R2,R4,SVL2
         BR    R3
***********************************************************************
* DATASET OPEN/CLOSE FUNCTIONS
***********************************************************************
* TSTODSN: TEST IF OPEN OUTPUT DATASET EXISTS                         *
***********************************************************************
TSTODSN  DS    0H
         STM   R1,R3,SVL2
         BAL   R1,SETODSN          RESET THE OUTPUT DATASET NAME
         LA    R2,ODSTSMX
TSO1000  EQU   *
         LOCATE INDAB              CALL LOCATE THE DATASET
         LTR   R15,R15
         BNZ   TSO8000             DATASET NOT EXIST, JUST RETURN
         BAL   R15,SETODSID        SET NEXT OUTPUT DATASET ID
         BCT   R2,TSO1000          RETRY TO ALLCOATE THE DATASET.
         MVI   ISODSBAD,YES        SET TOO BAD FOR OUTPUT DATASET
   MVC MSGBUFTX(43),=CL43'JOF067E Too many duplicated output datasets.'
   MVC MSGBUFTX+46(44),LDODSN
         BAL   R1,LOG
TSO8000  EQU   *
         LM    R1,R3,SVL2
         BR    R3
***********************************************************************
* OPNODSN: OPEN OUTPUT DATASET                                *
***********************************************************************
OPNODSN  DS    0H
         STM   R1,R3,SVL3
         CLI   ISODSBAD,YES        IS THE OUTPUT DATASET BAD?
         BE    OPO8000             YES, SKIP TO OPEN IT
         MVI   ISODSALC,NO         SET THE DATASET IS NOT ALLOCATED
         MVI   ISODSOPN,NO         SET THE DATASET IS NOT OPENED
* UPDATE THE TRACKS ACCORDING TO RECORDS IN THE JOB LOG
         L     R6,TOTREC           LOAD THE TOTAL RECORDS
         MH    R6,OUTLRECL         MULTIPLY LRECL AND TOTREC
         SRDA  R6,32(0)            SHIFT ALL BITS IN R6 TO R7
         D     R6,TRKSIZE          DIVIDD TOTAL BYTES BY TRACK SIZE
         STCM  R7,B'0111',LDOSCND  SAVE THE TRACKS IN SECONDARY SPACE
         LA    R7,5(0,R7)          ADD 5 EXTRA TRACKS
         STCM  R7,B'0111',LDOPRIM  SAVE THE TRACKS IN PRIMARY SPACE
         MVC   LDORECL,OUTLRECL    SAVE OUTPUT LRECL
         LA    R1,LDOTXTAL         LOAD TEXT UNIT ADDRESS TABLE
         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE
         BAL   R1,DYNALC           CALL DYNAMIC ALLOCATION
         LH    R5,ALLCCDE          GET THE RETURN CODE
         LTR   R5,R5               TEST THE RETURN CODE
         BNZ   OPO4000             PROBLEM ANALYSIS
* ALLOCATE SUCCEEDED
         MVI   ISODSALC,YES
* OPEN THE DATASET
         LA    R2,OUTDCB           Get the DCB
         USING IHADCB,R2           Tell the assembler
         MVC   DCBDDNAM,LDODDNMA   Get address of DDNAME
         MVC   LDODDNMU,LDODDNMA   Get address of DDNAME
         LH    R1,OUTLRECL         LOAD THE MAXIMUM RECORD LENGTH
         LA    R1,8(0,R1)          ADD 8 (4 FOR RDW 4 FOR ROUND)
         SLL   R1,2                ROUND THE LRECL BY 4
         SRL   R1,2
         STH   R1,DCBLRECL
         STH   R1,OUTLRECL
         DROP  R2                  OUTDCB
         OPEN  ((R2),OUTPUT)       OPEN THE DATASET
         LTR   R15,R15              OPEN SUCCESS?
         BNZ   OPO8000              NO, SKIP THE SYSPRINT
         MVI   ISODSOPN,YES        SET THE DATASET IS OPENED
         BAL   R1,SHOWLOG
         B     OPO8000              NO, SKIP THE SYSPRINT
OPO4000  EQU   *
    MVC   MSGBUFTX(35),=CL35'JOF066E Output dataset open failed:'
    MVC   MSGBUFTX+36(44),LDODSN
         BAL   R1,LOG
         MVI   ISODSBAD,YES         SET THE ODSN IS BAD
OPO8000  EQU   *
         LM    R1,R3,SVL3
         BR    R4

***********************************************************************
* OPNIDSN: OPEN INPUT  DATASET                                *
***********************************************************************
OPNIDSN  DS    0H
         STM   R1,R3,SVL3
         MVI   ISIDSALC,NO         SET THE DATASET IS NOT ALLOCATED
         MVI   ISIDSOPN,NO         SET THE DATASET IS NOT OPENED
         LA    R1,LDATXTAL         LOAD TEXT UNIT ADDRESS TABLE
         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE
         BAL   R1,DYNALC           CALL DYNAMIC ALLOCATION
         L     R1,ALLCCODE         GET THE RETURN CODE
         LTR   R1,R1               TEST THE RETURN CODE
         BNZ   OPI1000
* ALLOCATE SUCCEEDED
         MVI   ISIDSALC,YES
* OPEN THE DATASET
         LA    R2,INDCB            Get the DCB
         USING IHADCB,R2           Tell the assembler
         MVC   DCBDDNAM,LDADDNMA   Get address of DDNAME
         MVC   LDADDNMU,LDADDNMA   Get address of DDNAME
         DROP  R2                  INDCB
         OPEN  ((R2),(INPUT))      Open the dataset
         LTR   R15,R15             OPEN SUCCESS?
         BNZ   OPI2000
         MVI   ISIDSOPN,YES        SET out DATASET IS OPENED
         B     OPI2000
OPI1000  EQU   *
    MVC   MSGBUFTX(32),=CL32'JOF065E Input dataset allocation failed.'
    MVC   MSGBUFTX+34(44),LDADSN
         BAL   R1,LOG
OPI2000  EQU   *
         LM    R1,R3,SVL3
         BR    R4

***********************************************************************
* CLSIDSN: CLOSE INPUT  DATASET                               *
***********************************************************************
CLSIDSN  DS    0H
         CLI   ISIDSOPN,YES        IS INPUT DATASET OPENED?
         BNE   CLI1000
         CLOSE (INDCB)             CLOSE THE DATASET
CLI1000  EQU   *
         CLI   ISIDSALC,YES        IS THE INPUT DATASET ALLOCATED?
         BNE   CLI2000
         LA    R1,LDATXTUN         LOAD TEXT UNIT ADDRESS TABLE
         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE
         BAL   R1,DYNUALC          UNALLOCATE THE DATASET
CLI2000  EQU   *
         BR    R4

***********************************************************************
* CLSODSN: CLOSE OUTPUT DATASET                               *
***********************************************************************
CLSODSN  DS    0H
         CLI   ISODSOPN,YES        IS INPUT DATASET OPENED?
         BNE   CLI1000
         CLOSE (OUTDCB)            CLOSE THE DATASET
CLO1000  EQU   *
         CLI   ISODSALC,YES        IS THE INPUT DATASET ALLOCATED?
         BNE   CLI2000
         LA    R1,LDOTXTUN         LOAD TEXT UNIT ADDRESS TABLE
         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE
         BAL   R1,DYNUALC          UNALLOCATE THE DATASET
CLO2000  EQU   *
         BR    R4

*********7*************************************************************
* DYNALCI: DYNAMIC ALLOCATION FOR INPUT DATASET               *
***********************************************************************
DYNALC   DS    0H
         STM   R1,R3,SVL4
         LA    R2,LDAS99RB         LOAD THE RB ADDRESS
         USING S99RB,R2            ADDRESSABILITY
         XC    S99RB(S99RBLEN),S99RB   ZERO OUT 'RB' ENTIRELY.
         OI    @LDAS99,S99RBPND    TURN ON THE HIGH-ORDER BIT IN RBPTR.
         MVI   S99RBLN,S99RBLEN    PUT THE LENGTH OF 'RB' IN ITS LENGTH
         MVI   S99VERB,S99VRBAL    SET VERB CODE FIELD TO ALLOCATE
         MVC   S99TXTPP,TUADDR     LOAD TEXT UNIT ADDRESS TABLE
         DROP  R2
         LA    R1,@LDAS99
         DYNALLOC ,                CALL DYNAMIC ALLOCATION
         STH   R15,ALLCCDE         SAVE THE ALLOCATION RETURN CODE
         LTR   R15,R15             Did it work?
         BZ    DAL2000            NO, PROBLEM PROCESS
* PROBLEM ANALYSIS
         LA    R2,LDAS99RB         LOAD THE RB ADDRESS
         USING S99RB,R2            ADDRESSABILITY
         LH    R1,S99ERROR
         STH   R1,ALLCRSN          SAVE THE RETURN ERROR CODE
         MVC   MSGBUFTX(35),=CL35'JOF060E Dynamic Allocation Failed: '
         LR    R1,R15              LOAD CURRENT RETURN CODE
         BAL   R15,CVTDEC
         MVC   MSGBUFTX+35(8),0(R1)
         MVC   MSGBUFTX+46(44),LDODSN
         BAL   R1,LOG
*
*-------------------------------------------------------------*
*        Set flags1, flags 2 error code and infocode.         *
*-------------------------------------------------------------*
  MVC   MSGBUFTX(30),=CL30'JOF061I SVC 99 returned flags:'
         MVC   MSGBUFTX+30(7),=CL7' flg1: '
         LH    R1,S99FLAG1
         BAL   R15,CVTHEX
         MVC   MSGBUFTX+37(4),4(R1)
         MVC   MSGBUFTX+41(7),=CL7' flg2: '
         LH    R1,S99FLAG2
         BAL   R15,CVTHEX
         MVC   MSGBUFTX+48(4),0(R1)
         MVC   MSGBUFTX+52(7),=CL7' ErCd: '
         LH    R1,S99ERROR
         BAL   R15,CVTHEX
         MVC   MSGBUFTX+59(4),4(R1)
         MVC   MSGBUFTX+63(7),=CL7' info: '
         LH    R1,S99INFO
         BAL   R15,CVTHEX
         MVC   MSGBUFTX+70(4),4(R1)
         BAL   R1,LOG
         DROP  R2
DAL2000  EQU   *
         LM    R1,R3,SVL4
         BR    R1

***********************************************************************
* DYNUALC: DYNAMIC UNALLOCATION                               *
***********************************************************************
DYNUALC  DS    0H
         STM   R1,R3,SVL4
         LA    R2,LDAS99RB         LOAD THE RB ADDRESS
         USING S99RB,R2            ADDRESSABILITY
         OI    @LDAS99,S99RBPND    TURN ON THE HIGH-ORDER BIT IN RBPTR.
         XC    S99RB(S99RBLEN),S99RB       ZERO OUT 'RB' ENTIRELY.
         MVI   S99RBLN,S99RBLEN    PUT THE LENGTH OF 'RB' IN ITS LENGTH
         MVI   S99VERB,S99VRBUN    SET VERB CODE FIELD TO UNALLOCATE
         L     R1,TUADDR           LOAD TEXT UNIT ADDRESS TABLE
         ST    R1,S99TXTPP         SAVE IT TO TEXTPP
         DROP  R2
* CALL SVC99
         LA    R1,@LDAS99
         DYNALLOC ,                Hit allocation
         ST    R15,UNALCODE        SAVE THE UNALLOCATION RETURN CODE
         LTR   R15,R15             Did it work?
         BNZ   DUA1000            NO, PROBLEM PROCESS
* DYNAMIC ALLOCATION SUCCEEDED.
         B     DUA2000
* PROBLEM HANLDING
DUA1000  EQU   *

DUA2000  EQU   *
         LM    R1,R3,SVL4
         BR    R1





***********************************************************************
*              FINAL CALL PROCESSING                          *
***********************************************************************
LASTCALL DS    0H
         LA     R9,BUFSSS2          Point at actual SSS2
         USING  SSS2,R9
         ST    R3,SVL2             SAVE R3 REGISTER
         LA    R0,SSS2INPT         Point to input start field
         LA    R1,L'SSS2INPC       Get length of input field
         SR    R15,R15             Zero length and pad field
         MVCL  R0,R14              Clear input SSS2 section
         MVI   SSS2DSP1,SSS2DKPE   Show keep dataset
         MVI   SSS2MSC1,SSS2CTRL   Indicate this is a control
         BAL   R3,ASKJES           Go ask jes to dispose of job
         L     R3,SVL2             RESTORE R3
         BR    R3
         DROP  R9
***********************************************************************
***********************************************************************
*   CONVERT A NUMBER TO PRINTABLE HEXADECIMAL                 *
*   R1 CONTAINS NUMBER ON ENTRY AND ADDRESS OF EBCDIC ON EXIT *
*-------------------------------------------------------------*
CVTHEX   DS    0H
         XC    DWORK,DWORK
         STCM  R1,B'1111',DWORK2+3
         UNPK  DWORK1(9),DWORK2+3(5)
         TR    DWORK1,TRANSLAT
         LA    R1,DWORK1
         BR    R15
*-------------------------------------------------------------*
*   CONVERT A HEX NUMBER TO PRINTABLE CHARACTERS.             *
*   R1 CONTAINS NUMBER ON ENTRY AND ADDRESS OF EBCDIC ON EXIT *
*-------------------------------------------------------------*
CVTDEC   DS    0H
         XC    DWORK,DWORK
         CVD   R1,DWORK2
         OI    DWORK2+7,X'0F'
         LA    R1,DWORK1
         UNPK  0(L'DWORK1,R1),DWORK2
         TR    DWORK1,TRANSLAT
         LA    R1,DWORK1
         LA    R14,7
CVTD1000 EQU   *
         CLI   0(R1),C'0'
         BNE   CVTD2000
         MVI   0(R1),C' '
         LA    R1,1(0,R1)
         BCT   R14,CVTD1000
CVTD2000 EQU   *
         LA    R1,DWORK1
         BR    R15

*---------------------------------------------------------------------*
* ROUTINE: READPARM
* DESCRIPTION: READ AND VALIDATE THE EXEC PARM
* INPUT:
*    R2  : RETURN CONTROL
* RETURN :
*   RETCODE: 0 IF VALID PARM, 8 IF INVALID PARM
*---------------------------------------------------------------------*
READPARM DS    0H
         STM   R2,R4,SVL1
* READ PARM
         L     R4,PARMADR         ;READ PARM ADDRESS
         L     R4,0(R4)           ;PARM ADDRESS
         LH    R2,0(R4)           ;LENGTH OF PARM
         LTR   R2,R2              ;TEST IF PARM IS ZERO
         BZ    RDP8000            ;IF NO PARM, SHOW HELP MESSAGE
         MVC   MSGBUFTX(30),=CL30'JOF036I Given EXEC parameters:'
         BAL   R1,LOG
         MVC   MSGBUFTX(7),=CL7'JOF037I'
         LA    R4,2(,R4)          ;LOAD THE START OF PARAMETER
         LR    R5,R2              ;LOAD THE LENGTH FOR MVCREC
         LR    R7,R4              ;LOAD START ADDRESS FOR MVCREC
         LA    R6,MSGBUFTX+9      ;LOAD COPY TARGET ADDRESS
         EX    R5,MVCREC
         BAL   R1,LOG
         CLC   0(4,R4),=CL4'HELP'   ;TEST IF NEED HELP.
         BE    RDP8000            ;IF NO PARM, USE THE DEFAULT
RDP0500  EQU   *
         XR    R7,R7              ;CLEAR START ADDRESS
* PARSE PARAMETERS INTO EACH PARM
RDP1000  EQU   *
         CLI   0(R4),C'('
         BE    RDP1800
         CLI   0(R4),C')'
         BE    RDP1800
         LTR   R7,R7              IS THIS THE BEGINNING OF PARAMETER?
         BNZ   RDP1100
         LR    R7,R4              SET R7 AT THE BEGINNING OF THIS PARM
* TEST IF THIS IS A SEPARATOR
RDP1100  CLI   0(R4),C','
         BNE   RDP1800            IF NOT SEPARATOR, CONTINUE NEXT BYTE
         LR    R6,R4              SET R6 AT THE END OF THIS PARM
         CR    R7,R6
         BE    RDP1300            IF END == START, THEN SKIP IT
         BCTR  R6,0               SKIP THE ','
         BAL   R3,PRS1PARM        PROCESS ONE PARAMETER
RDP1300  XR    R7,R7              RESET THE START ADDRESS
* PROCESS NEXT BYTE
RDP1800  EQU   *
         LA    R4,1(0,R4)         MOVE TO NEXT BYTE
         BCT   R2,RDP1000
* PROCESS THE LAST PARAMETER
         BCTR  R4,0
         LR    R6,R4
         CLI   0(R6),C')'
         BNE   RDP1900
         BCTR  R6,0
RDP1900  BAL   R3,PRS1PARM        PROCESS ONE PARAMETER
         CLI   RETCODE,X'00'
         BNE   RDP9000
* SHOW LOG MESSAGE FORMAT
         MVC  MSGBUFTX(37),=CL37'JOF030I JES spool selection criteria:'
         BAL   R1,LOG
* CLASS SELECTION CRITERIA
         CLI   ISCLASS,YES
         BNE   RDP2100
         MVC   MSGBUFTX(20),=CL20'JOF031I   CLASSES  :'
         MVC   MSGBUFTX+21(36),SELCLASS
         BAL   R1,LOG
         MVI   ISSELGV,YES
RDP2100  EQU   *
* DEST  SELECTION CRITERIA
         CLI   ISDEST,YES
         BNE   RDP2200
         MVC   MSGBUFTX(20),=CL20'JOF032I   DEST     :'
         MVC   MSGBUFTX+21(8),SELDEST
         BAL   R1,LOG
         MVI   ISSELGV,YES
RDP2200  EQU   *
* JOBNAME SELECTION CRITERIA
         CLI   ISJOBNM,YES
         BNE   RDP2300
         MVC   MSGBUFTX(20),=CL20'JOF033I   JOBNAME  :'
         MVC   MSGBUFTX+21(8),SELJOBNM
         BAL   R1,LOG
         MVI   ISSELGV,YES
RDP2300  EQU   *
* FORM SELECTION CRITERIA
         CLI   ISFORM,YES
         BNE   RDP2400
         MVC   MSGBUFTX(20),=CL20'JOF034I   FORM     :'
         MVC   MSGBUFTX+21(8),SELFORM
         BAL   R1,LOG
         MVI   ISSELGV,YES
RDP2400  EQU   *
* CREATER SELECTION CRITERIA
         CLI   ISUSRID,YES
         BNE   RDP2500
         MVC   MSGBUFTX(20),=CL20'JOF035I   USERID   :'
         MVC   MSGBUFTX+21(8),SELUSRID
         BAL   R1,LOG
         MVI   ISSELGV,YES
RDP2500  EQU   *
* CREATER SELECTION CRITERIA
         CLI   ISHLQ,YES
         BNE   RDP2600
         MVC   MSGBUFTX(20),=CL20'JOF035I   HLQ      :'
         MVC   MSGBUFTX+21(14),SELHLQ
         BAL   R1,LOG
         B     RDP2700
         MVI   ISSELGV,YES
RDP2600  EQU   *
* HLQ IS MISSING
         MVC   MSGBUFTX(51),INIMSG07
         BAL   R1,LOG
         MVI   RETCODE,X'08'
         B     RDP9000
RDP2700  EQU   *
* NO SELECTION PARAMETER GIVEN
         CLI   ISSELGV,YES
         BE    RDP3000
         MVC   MSGBUFTX(46),INIMSG08
         BAL   R1,LOG
         MVI   RETCODE,X'08'
         B     RDP9000
RDP3000  EQU   *
* SHOW LOG MESSAGE FORMAT HEADER
         MVC   MSGBUFTX(36),INIMSG09
         BAL   R1,LOG
         MVC   MSGBUFTX(86),INIMSG06
         BAL   R1,LOG
         MVC   MSGBUFTX(87),INIMSG10
         BAL   R1,LOG
         MVC   MSGBUFTX(87),INIMSG11
         BAL   R1,LOG
         B     RDP9000
* SHOW HELP MESSAGE
RDP8000  EQU   *
         MVC   MSGBUFTX(30),=CL30'JOF120I Showing help messages.'
         BAL   R1,LOG
         BAL   R3,SHOWHELP
         MVI   ISSTOP,YES        AFTER HELP MESSAGE, JUST END PROGRAM
         B     RDP9000
RDP9000  EQU   *
         LM    R2,R4,SVL1
         BR    R2

*---------------------------------------------------------------------*
* ROUTINE: PRS1PARM
* DESCRIPTION: READ AND VALIDATE THE EXEC PARM
* INPUT:
*    R3  : RETURN CONTROL
*    R7  : START OF THE PARAMETER
*    R6  : END OF THE PARAMETER
* RETURN :
*   RETCODE: 0 IF VALID PARM, 8 IF INVALID PARM
*---------------------------------------------------------------------*
PRS1PARM DS    0H
         STM   R2,R10,SVPSR
         LR    R5,R6
         SR    R5,R7          GET THE LENGTH OF PARAMETER
         LTR   R5,R5          TEST IF THE LENGTH IS 0?
         BZ    P1P9000        IGNORE EMPTY PARAMETERS
*
         LR    R2,R5           COPY THE PARAMETER LENGTH
         LR    R3,R6           COPY THE END   ADDRESS
         LR    R4,R7           COPY THE START ADDRESS
         LA    R8,0           THE ERROR MESSAGE START POSITION
*
         CLI   1(R4),C'='      TEST THE SECOND BYTE IS '='?
         BNE   P1P6000         NO, SHOW THE ERROR MESSAGE
         LA    R7,2(0,R7)      MOVE TO THE VALUE
         BCTR  R5,0            REDUCE THE LENGTH BY 2
         BCTR  R5,0
         CLI   0(R4),C'C'      IS THIS THE KEYWORD C (CLASS)
         BE    P1P2100
         CLI   0(R4),C'D'      IS THIS THE KEYWORD C (DEST)
         BE    P1P2200
         CLI   0(R4),C'F'      IS THIS THE KEYWORD C (FORM)
         BE    P1P2300
         CLI   0(R4),C'H'      IS THIS THE KEYWORD C (HLQ)
         BE    P1P2400
         CLI   0(R4),C'J'      IS THIS THE KEYWORD C (JOBNAME)
         BE    P1P2500
         CLI   0(R4),C'U'      IS THIS THE KEYWORD U (USERID)
         BE    P1P2600
  MVC   MSGBUFTX(40),=CL40'JOF040E This is an unsupported parameter:'
         LA    R8,30
         B     P1P7000         NO, SHOW THE ERROR MESSAGE
* KEY C(CLASS)
*  LENGTH: 0 - 36
*  VALUE : 0-9, A-Z
P1P2100  EQU   *
         LA    R1,35
         CR    R5,R1
         BH    P1P2110
         MVI   SELCLASS,C' '          CLEAR THE FIELD
         MVC   SELCLASS+1(35),SELCLASS
         LA    R6,SELCLASS
         EX    R5,MVCREC       COPY THE CLASS INFOMRATION
         MVI   ISCLASS,YES     SET CLASS AS A CRITERIA
         B     P1P8000
* FIELD TOO LONG
P1P2110  EQU   *
  MVC  MSGBUFTX(36),=CL36'JOF041E CLASS exceeds 36 characters:'
         LA    R8,37
         B     P1P7000
* KEY D(DEST)
P1P2200  EQU   *
         LA    R1,7
         CR    R5,R1
         BH    P1P2210
         MVI   SELDEST,C' '          CLEAR THE FIELD
         MVC   SELDEST+1(7),SELDEST
         LA    R6,SELDEST
         EX    R5,MVCREC             COPY THE PARM INFOMRATION
         MVI   ISDEST,YES            SET THIS IS A CRITERIA
         B     P1P8000
* FIELD TOO LONG
P1P2210  EQU   *
         MVC   MSGBUFTX(34),=CL34'JOF042E DEST exceeds 8 characters:'
         LA    R8,35
         B     P1P7000
* KEY F(FORM)
P1P2300  EQU   *
         LA    R1,7
         CR    R5,R1
         BH    P1P2310
         MVI   SELFORM,C' '          CLEAR THE FIELD
         MVC   SELFORM+1(7),SELFORM
         LA    R6,SELFORM
         EX    R5,MVCREC             COPY THE PARM INFOMRATION
         MVI   ISFORM,YES            SET THIS IS A CRITERIA
         B     P1P8000
* FIELD TOO LONG
P1P2310  EQU   *
         MVC   MSGBUFTX(34),=CL34'JOF043E FORM exceeds 8 characters:'
         LA    R8,35
         B     P1P7000
* KEY H(HLQ )
P1P2400  EQU   *
         LA    R1,12                MAXIMUM 13 CHARS
         CR    R5,R1
         BH    P1P2410
         MVI   SELHLQ,C' '          CLEAR THE FIELD
         MVC   SELHLQ+1(12),SELHLQ
         LA    R6,SELHLQ
         EX    R5,MVCREC             COPY THE PARM INFOMRATION
         MVI   ISHLQ,YES            SET THIS IS A CRITERIA
         B     P1P8000
* FIELD TOO LONG
P1P2410  EQU   *
         MVC   MSGBUFTX(34),=CL34'JOF044E HLQ exceeds 13 characters:'
         LA    R8,34
         B     P1P7000
* KEY J(JOBNAME)
P1P2500  EQU   *
         LA    R1,7
         CR    R5,R1
         BH    P1P2510
         MVI   SELJOBNM,C' '          CLEAR THE FIELD
         MVC   SELJOBNM+1(7),SELJOBNM
         LA    R6,SELJOBNM
         EX    R5,MVCREC             COPY THE PARM INFOMRATION
         MVI   ISJOBNM,YES            SET THIS IS A CRITERIA
         B     P1P8000
* FIELD TOO LONG
P1P2510  EQU   *
     MVC   MSGBUFTX(37),=CL37'JOF045E JOBNAME exceeds 8 characters:'
         LA    R8,38
         B     P1P7000
* KEY U(USERID)
P1P2600  EQU   *
         LA    R1,7
         CR    R5,R1
         BH    P1P2610
         MVI   SELUSRID,C' '          CLEAR THE FIELD
         MVC   SELUSRID+1(7),SELUSRID
         LA    R6,SELUSRID
         EX    R5,MVCREC              COPY THE PARM INFOMRATION
         MVI   ISUSRID,YES            SET THIS IS A CRITERIA
         B     P1P8000
* FIELD TOO LONG
P1P2610  EQU   *
         MVC   MSGBUFTX(36),=CL36'JOF046E USERID exceeds 8 characters:'
         LA    R8,37
         B     P1P7000
P1P6000  EQU   *
    MVC   MSGBUFTX(40),=CL40'JOF047E This is a unsupported parameter:'
         LA    R8,41
* INVALID KEYWORD
P1P7000  EQU   *
         LR    R5,R2           RESTORE THE PARAMETER LENGTH
         LR    R6,R3           RESTORE THE END   ADDRESS
         LR    R7,R4           RESTORE THE START ADDRESS
         LA    R6,MSGBUFTX
         AR    R6,R8
         LA    R6,1(0,R6)
         EX    R5,MVCREC
         BAL   R1,LOG
         MVI   RETCODE,X'08'   SET THE RETURN CODE 8
         B     P1P9000
* VALID   KEYWORD
P1P8000  EQU   *
P1P9000  EQU   *
         LM    R2,R10,SVPSR
         BR    R3

***********************************************************************
* ROUTINE: GETJOBNM
* DESCRIPTION: GET CURRENT JOBNAME
* INPUT:
*    R1  : RETURN CONTROL
*
* UPDATE DSECT:
*
* JOBINFO  DSECT
* JIJOBNM  DS    CL8                JOBNAME
* JIPRCNM  DS    CL8                PROCEDURE NAME
* JISTPNM  DS    CL8                STEP NAME
* JIJOBID  DS    CL8                JOBID
* JIASID   DS    CL4                ADDRESS SPACE ID
* JIUSERID DS    CL8                USER ID TO SUBMITTED THE JOB
* JIJBTYP  DS    CL3                JOB TYPE: JOB, STC OR TSO
* JIPGM    DS    CL8                PROGRAM NAME
* JIOS     DS    CL24               OPERATING SYSTEM, VERSION/RELEASE
* JISSNM   DS    CL4                SUBSYSTEM NAME, JES SUBSYSTEM
* JISYSID  DS    CL8                SYSTEM ID
* JOBINFLN EQU   *-JOBINFO
*
*---------------------------------------------------------------------*
GJOBINFO DS        0H
         STM       R1,R15,SVPSR
* CLEAR THE JOBINFO WITH SPACES
         MVI       MYJOB,C' '
         MVC       MYJOB+1(JOBINFLN-1),MYJOB
* ADDRESSABILITY FOR MY JOBINFO
         LA        R9,MYJOB
         USING     JOBINFO,R9
* GET ASID, USERID, JOBNAME
         LA        R2,0                  LOAD PSA ADDRESS (0)
         USING     PSA,R2                ADDRESSABILITY FOR PSA DSECT
         L         R2,PSAAOLD            LOAD THE ASCB ADDRESS
         DROP      R2
         USING     ASCB,R2               ADDRESSABILITY FOR ASCB
* ASID: PSA->PSAAOLD(ASCB)->ASCBASID
         XR        R1,R1
         ICM       R1,B'0011',ASCBASID   LOAD THE HEX ASID
         BAL       R15,CVTHEX            CONVERT IT INTO DISPLAY HEX
         MVC       JIASID(4),4(R1)       COPY THE ASID
         L         R3,ASCBASXB           LOAD ASXB ADDRESS
         USING     ASXB,R3
* USERID: PSA->PSAAOLD(ASCB)->ASCBASXB(ASXB)->ASXBUSER
         MVC       JIUSERID(8),ASXBUSER  COPY USERID
         DROP      R3,R2
* GET PROGRAM NAME(JSCB), JOBID, JOB TYPE (SSIB)
         LA        R2,0                 LOAD PSA ADDRESS (0)
         USING     PSA,R2                ADDRESSABILITY FOR PSA DSECT
         L         R2,PSATOLD           LOAD THE TCB ADDRESS
         DROP      R2
         USING     TCB,R2                ADDRESSABILITY FOR PSA DSECT
* PROGRAM NAME: PSA->PSATOLD(TCB)->TCBJSCB(JSCB)->JSCBPGMN
         L         R1,TCBJSCB           LOAD JSCB ADDRESS
         USING     IEZJSCB,R1
         MVC       JIPGM(8),JSCBPGMN     COPY PROGRAM NAME
         L         R1,JSCBSSIB          LOAD SSIB ADDRESS
         DROP      R1
         USING     SSIB,R1
* JOBID: PSA->PSATOLD(TCB)->TCBJSCB(JSCB)->JSCBSSIB(SSIB)->SSIBJBID
         MVC       JIJOBID(8),SSIBJBID   COPY JOBID
         MVC       JIJBTYP(3),SSIBJBID   COPY JOB TYPE
         MVC       JISSNM(4),SSIBSSNM    COPY SUBSYSTEM NAME
         DROP      R1
* JOBNAME : PSA->PSATOLD(TCB)->TCBTIO(TIOT)->TIOCNJOB
* STEPNAME: PSA->PSATOLD(TCB)->TCBTIO(TIOT)->TIOCPSPN
* PROCNAME: PSA->PSATOLD(TCB)->TCBTIO(TIOT)->TIOCJSTN
         L         R3,TCBTIO            LOAD TIOT ADDRESS
         USING     TIOT1,R3
         MVC       JIJOBNM(8),TIOCNJOB   GET THE JOBNAME
         MVC       JISTPNM(8),TIOCSTPN   COPY JOB STEP NAME (W/O PROC)
         CLI       TIOCJSTN,C' '         THE STEP NAME EMPTY?
         BE        GTJN2000              YES, NO PROCEDURE
         MVC       JIPRCNM(8),TIOCPSTN   COPY JOB PROC NAME
         MVC       JISTPNM(8),TIOCJSTN   COPY JOB STEP NAME
GTJN2000 EQU       *
         DROP      R3,R2
* SYSTEM ID: PSA->FLCCVT(CVT)->CVTSMCA(SMCA)->SMCASID
         LA        R2,0                   LOAD PSA ADDRESS (0)
         USING     PSA,R2                 ADDRESSABILITY FOR PSA DSECT
         L         R2,FLCCVT              LOAD THE CVT ADDRESS
         DROP      R2
         USING     CVT,R2                 ADDRESSABILITY FOR PSA DSECT
         L         R3,CVTSMCA             LOAD SMF CONTROL AREA (SMCA)
         USING     SMCABASE,R3
         MVC       JISYSID(4),SMCASID     COPY SYSTEM NAME
         DROP      R3
* OS : PSA->FLCCVT(CVT)->CVTECVT(ECVT)->ECVTPNAM
* VER: PSA->FLCCVT(CVT)->CVTECVT(ECVT)->ECVTPVER
* REL: PSA->FLCCVT(CVT)->CVTECVT(ECVT)->ECVTPREL
         L         R3,CVTECVT             LOAD ECVT
         USING     ECVT,R3
         MVC       JIOS(16),ECVTPNAM      COPY OS NAME
         LA        R1,JIOS
         LA        R14,16
         BAL       R15,FINDEOS
         MVI       1(R1),C'V'
         MVC       2(2,R1),ECVTPVER       COPY OS VERSION
         MVI       4(R1),C'.'
         MVC       5(2,R1),ECVTPREL       COPY OS RELEASE
         DROP      R3
         DROP      R2
GTJN8000 EQU       *
         MVC       JOBNAME,JIJOBNM          COPY THE JOBNAME
         DROP      R9
         LM        R1,R15,SVPSR
         BR        R1
*
***********************************************************************
* ROUTINE: SJOBINFO
* DESCRIPTION: SHOW CURRENT RUNNING JOB INFORMATION
* INPUT:
*    R1  : RETURN CONTROL
* RETURN
*---------------------------------------------------------------------*
SJOBINFO DS        0H
         STM       R1,R15,SVPSR
* ADDRESSABILITY FOR MY JOBINFO
         LA        R9,MYJOB
         USING     JOBINFO,R9
* SHOW JOBINFO
         MVC       MSGBUFTX(32),=CL32'JOF100I SYSTEM ENVIRONMENT INFO.'
         BAL       R1,LOG
         MVC       MSGBUFTX(23),=CL23'JOF101I Current jobname'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(8),JIJOBNM
         BAL       R1,LOG
         MVC       MSGBUFTX(22),=CL22'JOF102I Current job ID'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(8),JIJOBID
         BAL       R1,LOG
         MVC       MSGBUFTX(24),=CL24'JOF103I Address space ID'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(4),JIASID
         BAL       R1,LOG
         MVC       MSGBUFTX(25),=CL25'JOF104I Current procedure'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(8),JIPRCNM
         BAL       R1,LOG
         MVC       MSGBUFTX(24),=CL24'JOF105I Current job step'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(8),JISTPNM
         BAL       R1,LOG
         MVC       MSGBUFTX(22),=CL22'JOF106I Submit user ID'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(8),JIUSERID
         BAL       R1,LOG
         MVC       MSGBUFTX(25),=CL25'JOF107I Running task type'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(3),JIJBTYP
         BAL       R1,LOG
         MVC       MSGBUFTX(28),=CL28'JOF108I Running Program Name'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(8),JIPGM
         BAL       R1,LOG
         MVC       MSGBUFTX(24),=CL24'JOF109I Operating System'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(24),JIOS
         BAL       R1,LOG
         MVC       MSGBUFTX(26),=CL26'JOF110I Job subsystem name'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(4),JISSNM
         BAL       R1,LOG
         MVC       MSGBUFTX(21),=CL21'JOF111I SMF system ID'
         MVI       MSGBUFTX+28,C':'
         MVC       MSGBUFTX+30(8),JISYSID
         BAL       R1,LOG
         DROP      R9
         LM        R1,R15,SVPSR
         BR        R1


***********************************************************************
* ROUTINE: LOG
* DESCRIPTION: WRITE LOG TO SYSPRINT DD
* INPUT:
*    R1  : RETURN CONTROL
* MSGBUFTX: THE MESSAGE TO BE DISPLAYED
* RETURN
*---------------------------------------------------------------------*
LOG      EQU   *
         CLI   SPROPNFL,YES       IS THE SYSPRINT PROVIDED?
         BNE   LOG9900            NO, JUST SKIP THE LOG
         STM   R1,R15,SVLOG       SAVE R1-R7 REGISTERS
* UPDATE TIME AND DATE
         TIME  DEC,DATESAVE,LINKAGE=SYSTEM,DATETYPE=YYYYMMDD
         MVC   MSGBUFCC(TSTMPTNL),TSTMPTN   COPY TIME EDIT PATTERN
         ED    MSGBUFCC+11(9),DATEAREA+1 EDIT TIME
         ED    MSGBUFCC(12),DATEAREA+9   EDIT DATE
         MVI   MSGBUFCC+11,X'40'            SAVE X'01'
* MESSAGE PAGE BREAK PROCESSING
         CP    MSGCTR,P0          PAGE BREAKER?
         BE    LOG4100
         CP    MSGCTR,P50         PAGE BREAKER?
         BNE   LOG4200
         ZAP   MSGCTR,P0          RESET THE COUNTER
LOG4100  MVI   MSGBUFCC,C'1'      SET CC BYTE TO SPACE
         B     LOG4300
* NORMAL LINES
LOG4200  MVI   MSGBUFCC,C' '
LOG4300  AP    MSGCTR,P1
         PUT   SYSPRINT,MSGBUF      WRITE THE MESSAGE TO SYSPRINT
LOG9000  EQU   *
         MVI   MSGBUFTX,C' '
         MVC   MSGBUFTX+1(131),MSGBUFTX
         LM    R1,R15,SVLOG        RESTORE R1-R7 REGISTERS
LOG9900  BR    R1

***********************************************************************
* SHOW HELP MESSAGE BY CALLING OFLHELP PROGRAM
***********************************************************************
SHOWHELP EQU  *
         STM   R2,R3,SVL2
         LA    R2,MSGINFO          ; LOAD MESSAGE INFO SECTION
         CALL  OFLHELP             ; CALL TO SHOW MESSAGE
         STCM  R15,B'0001',RETCODE ; SAVE RETURN CODE
         LM    R2,R3,SVL2
         BR    R3
***********************************************************************
***********************************************************************
*        PROGRAM CONSTANTS DATA AREA
***********************************************************************
***********************************************************************
         LTORG
*--------------------------------------------------------------*
*   Compare Instruction equates                                *
*--------------------------------------------------------------*
GT       EQU   2                   A HIGH
LT       EQU   4                   A LOW
NE       EQU   7                   A NOT EQUAL B
EQ       EQU   8                   A EQUAL B
GE       EQU   11                  A NOT LOW
LE       EQU   13                  A NOT HIGH
*--------------------------------------------------------------*
YES      EQU   X'1'              ; YES
NO       EQU   X'0'              ; NO
MVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5
MCTPFF   EQU   X'8B'             ; THE FIRST BYTE OF FIRST MC RECORD
CCTPFF   EQU   C'1'              ; CC BYTE '1' FORM FEED
* TRANSLATE TABLE
TRANSLAT DS    0XL256              Table for translation to EBCDIC
         ORG   TRANSLAT+C'0'
         DC    C'0123456789ABCDEF'
         ORG
* OUTPUT DATASET SEQUENCE NUMBER
SEQID    DC    C'ABCDEFGHIJKLMOPGRSTUVWXYZ0123456789'
ODSTSMX  EQU   *-SEQID             MAX OUT DATASET TEST RETRY
*************************************************************
* PACKED DECIMAL CONSTANTS FOR MESSAGE PROCESSING
P50      DC    PL2'60'       PAGE BREAKER LINES
P1       DC    PL1'1'
P0       DC    PL1'0'
         DS    0F
TRKSIZE  DC    XL4'0000DA00'       THE SIZE OF A TRACK
*---------------------------------------------------------------------*
* SYSPRINT DCB
MSGINFO  DS    0D
MSGCTR   DS    PL2                ;MESSAGE COUNTER
SPROPNFL DS    XL1            0 FOR NOT OPENED, 1 FOR OPENED
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=133
MSGINFOL EQU   *-MSGINFO
* INPUT DCB
INDCB    DCB   DSORG=PS,           DCB for open/close                  X
               MACRF=GL,                                               X
               EODAD=INDCBEOF,                                         X
               DDNAME=SYSIDS
* OUTPUT DCB
OUTDCB   DCB   DSORG=PS,                                               X
               MACRF=PM,                                               X
               RECFM=VBA,                                              X
               LRECL=260,                                              X
               DDNAME=SYSODS
* EXTRACT LIST FORM                                           *
XTPRML   EXTRACT COMMADDR,FIELDS=(COMM),MF=L
COMMADDR DC    A(0)                Address of stuff from EXTRACT
* TIME AND DATE EDIT FORMATS FOR DATASET NAME
DATEPTN  DC    X'40212020202120402020202021202120'
* EDIT MEANING:  b ( d d d d d b ( d d d d d d d
DATEPTNL EQU   *-DATEPTN

* TIME AND DATE EDIT FORMATS FOR LOGS
*                0 1 2 3 4 5 6 7 8 9 10111213141516171819
TSTMPTN  DC    X'F021202020612120612120F021207A21207A2120'
* EDIT MEANING:  S y y y y / m m / d d s h h : m m : s s
TSTMPTNL EQU   *-TSTMPTN

ODSNPTN  DC    XL4'40212020'          OUTOUT DATASET ID PATTERN
* INSERT RECORD FORMAT
INSRECPT DC    C'1**JOF700I JOBNAME(        ),JOBID(        ),'
         DC    C'DDNAME(        ),RECORDS(        )**'
INSRECLN EQU   *-INSRECPT

INIMSG01 DC    CL45'JOF001I Welcome to JES Spool Offload Program.'
INIMSG02 DC    CL50'JOF002I Purpose    : Offload JES spool to datasets'
INIMSG03 DC    CL34'JOF003I Design     : Hunter Zhou.'
INIMSG04 DC    CL45'JOF004I Support    : zhough2000@yahoo.com    '
INIMSG05 DC    CL35'JOF005I Last Update: February, 2004'
INIMSG06 DC    86C'*'
INIMSG07 DC    CL51'JOF038E Required parameter "H" for HLQ is missing.'
INIMSG08 DC    CL46'JOF039E No selection criteria in EXEC PARM.'
INIMSG09 DC    CL36'JOF070I Offload Activity Log Begins.'
INIMSG10 DC    0CL87
         DC    CL43'MSG ID  COMMAND JOB NAME JOB ID    RECORDS '
         DC    CL44'DATASET: hlq.jobname.Ddate.Jjobid.Ttimeid'
INIMSG11 DC    0CL87
         DC    CL43'======= ======= ======== ======== ======== '
         DC    CL44'============================================'

*-------------------------------------------------------------*
*        Dynamic allocation work area                         *
*-------------------------------------------------------------*
S99RBLEN EQU   S99RBEND-S99RB      EQUATE for length of S99RB
* SVC 99 POINTER FOR R1
@LDAS99  DS    0F
         DC    A(LDAS99RB)         S99RBPTR,pointer to S99RB
         DS    0F
LDAS99RB DC    XL(S99RBLEN)'00'    area for the RB
*
*-------------------------------------------------------------*
*        Allocation text unit table for input dataset         *
*-------------------------------------------------------------*
LDATXTAL DS    0F                  Allocation text unit ptrs
         DC    A(LDADSNAM)         First pointer
         DC    A(LDASSNAM)         Second pointer
LDATXTA1 DC    A(0)                THIRD  pointer
         DC    A(X'80000000'+LDADDNAL)       LAST    pointer
LDATXTUN DS    0F                  Deallocation text unit ptrs
         DC    A(X'80000000'+LDADDNUN)       LAST  pointer
*-------------------------------------------------------------*
*        Allocation text units                                *
*-------------------------------------------------------------*
LDADSNAM DC    Y(DALDSNAM)         DSN to be allocated   1st
         DC    Y(1)                  One entry
         DC    Y(L'LDADSN)           Length of entry
LDADSN   DC    CL44' '               Data set name
LDASSNAM DC    Y(DALSSREQ)         Subsystem request     2nd
         DC    Y(1)                  One entry
         DC    Y(L'LDAJES)           Length of entry
LDAJES   DC    CL4'JES2'               Subsystem name
LDADDNAL DC    Y(DALDDNAM)         DDname returned       3rd
         DC    Y(1)                  One entry
         DC    Y(L'LDADDNMA)         Length of entry
LDADDNMA DC    CL8'SYSIDS'             DDname
*-------------------------------------------------------------*
*        Unallocation text units                              *
*-------------------------------------------------------------*
LDADDNUN DC    Y(DUNDDNAM)         Unallocate DDname     1st
         DC    Y(1)                  One entry
         DC    Y(L'LDADDNMU)         Length of entry
LDADDNMU DC    CL8'SYSIDS'           DDname to unallocate
*
*-------------------------------------------------------------*
*        Allocation text unit table for new output dataset    *
*-------------------------------------------------------------*
LDOTXTAL DS    0F                  Allocation text unit ptrs
         DC    A(LDODSNAM)         pointer table
         DC    A(LDOPRIME)
         DC    A(LDOSECND)
         DC    A(LDOLRECL)
         DC    A(LDODDNAL)
         DC    A(LDOTRK)
         DC    A(LDORLSE)
*        DC    A(LDOCLOSE)
         DC    A(LDOSTATS)
         DC    A(LDONDISP)
         DC    A(LDOCDISP)
         DC    A(LDOUNIT)
         DC    A(LDODSORG)
         DC    A(X'80000000'+LDORECFM)       LAST    pointer
LDOTXTUN DS    0F                  Deallocation text unit ptrs
         DC    A(X'80000000'+LDODDNUN)       LAST    pointer
*-------------------------------------------------------------*
*        Allocation text units                                *
*-------------------------------------------------------------*
*!dataset name
LDODSNAM DC    Y(DALDSNAM)         DSN to be allocated   1st
         DC    Y(1)                  One entry
         DC    Y(L'LDODSN)           Length of entry
LDODSN   DC    CL44' '               Data set name
*!Primary Space quantity
LDOPRIME DC    Y(DALPRIME)         Primary Space quantity
         DC    Y(1)                  One entry
         DC    Y(L'LDOPRIM)          Length of entry
LDOPRIM  DC    XL3'00'               DDname
*!Secondary Space quantity
LDOSECND DC    Y(DALSECND)         Secondary Space quantity
         DC    Y(1)                  One entry
         DC    Y(L'LDOSCND)          Length of entry
LDOSCND  DC    XL3'00'               DDname
*!LRECL=
LDOLRECL DC    Y(DALLRECL)         LOGICAL RECORD LENGTH
         DC    Y(1)                  One entry
         DC    Y(L'LDORECL)          Length of entry
LDORECL  DC    XL2'00FF'             LRECL=255
* DD name
LDODDNAL DC    Y(DALDDNAM)         DDname returned       3rd
         DC    Y(1)                  One entry
         DC    Y(L'LDODDNMA)         Length of entry
LDODDNMA DC    CL8'SYSODS'         DEFAULT DDNAME SYSODS
* Status
LDOSTATS DC    Y(DALSTATS)         Status (disposition)
         DC    Y(1)                  One entry
         DC    Y(L'LDOSTAT)          Length of entry
LDOSTAT  DC    XL1'04'               DISP=(NEW,,)
* Noraml Disposition
LDONDISP DC    Y(DALNDISP)         Status (disposition)
         DC    Y(1)                  One entry
         DC    Y(L'LDONDSP)          Length of entry
LDONDSP  DC    XL1'02'               DISP=(,CATLG,)
* Conditional Disposition
LDOCDISP DC    Y(DALCDISP)         Status (disposition)
         DC    Y(1)                  One entry
         DC    Y(L'LDOCDSP)          Length of entry
LDOCDSP  DC    XL1'04'               DISP=(,,DELETE)
* Track space type
LDOTRK   DC    Y(DALTRK)           Status (disposition)
         DC    Y(0)                  One entry
* Unused Space release
LDORLSE  DC    Y(DALRLSE)          Status (disposition)
         DC    Y(0)                  One entry
* Unallocate at CLOSE time
LDOCLOSE DC    Y(DALCLOSE)         Status (disposition)
         DC    Y(0)                  One entry
* UNIT=SYSDA
LDOUNIT  DC    Y(DALUNIT)          Status (disposition)
         DC    Y(1)                  One entry
         DC    Y(L'LDOUNT)           Length of entry
LDOUNT   DC    CL5'SYSDA'            DDname
* DSORG=PS
LDODSORG DC    Y(DALDSORG)         Status (disposition)
         DC    Y(1)                  One entry
         DC    Y(L'LDODSO)           Length of entry
LDODSO   DC    XL2'4000'             DSORG=PS
* RECFM=VBA
LDORECFM DC    Y(DALRECFM)         Status (disposition)
         DC    Y(1)                  One entry
         DC    Y(L'LDORECF)          Length of entry
LDORECF  DC    XL1'54'               RECFM=VBA
*-------------------------------------------------------------*
*        Unallocation text units                              *
*-------------------------------------------------------------*
LDODDNUN DC    Y(DUNDDNAM)         Unallocate DDname     1st
         DC    Y(1)                  One entry
         DC    Y(L'LDODDNMU)         Length of entry
LDODDNMU DC    CL8'SYSODS'         DEFAULT DDNAME SYSODS
*
*
* TEST OUTPUT DATASET EXISTANCE USING LOCATE MACRO
INDAB    CAMLST NAME,LDODSN,,DSASTART
***********************************************************************


***********************************************************************
***********************************************************************
*        PROGRAM DSECTS: DYNAMIC ALLOCATED STORAGE
***********************************************************************
***********************************************************************
DSASTART DS    0D
DSA      DSECT
* SAVE AREA MUST BE THE FIRST OF DSA DSECT,
* BECAUSE R13 WILL BE THE BASE REGISTERS FOR THIS DSA,
* AND THE ADDRESS OF OUR SAVE AREA FOR LINKAGE CONVENTION.
SAVEAREA DS    18F                ;REGISTER SAVE AREA
SVL1     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 1
SVL2     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 2
SVL3     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 3
SVL4     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 3
SVLOG    DS    16F                ;REGISTER SAVE AREA FOR WRITELOG
SVPSR    DS    16F                ;REGISTER SAVE AREA FOR WRITELOG
RETCODE  DS    XL1                ;RETURN CODE
PARMADR  DS    F                  ;EXEC PARM ADDRESS

* CURRENT JOBNAME
JOBNAME  DS    CL8

* pointer save storage
WORKSSOB DS    F                  ;START ADDR OF SSOB
***********************************************************************
* storage for building SSOB
BUFSSPTR DS    F             Pointer to SSOB, Used by IEFSSREQ
BUFSSOB  DS    CL(SSOBHSIZ)  Buffer for SSOB
BUFSSS2  DS    CL(SSS2SIZE)  Buffer for SSS2
BUFSSLEN EQU   *-BUFSSOB     Total buffer length

***********************************************************************
* SELECTION CRERTIRIA FOR SAPI
SRSTCLAS DS    CL1                JOB CLASS X'00' FOR NONE
SRSTDEST DS    CL8                DEST, DEFAULT: LOCAL
SRSTFORM DS    CL8                FORM, DEFAULT: NONE
SRSTJBID DS    CL8                JOB ID, DEFAULT: NONE
SRSTJBNM DS    CL8                JOBNAME, DEFAULT: NONE

* SAPI & COMM ECB
LDAECBL  DS    0F                  ECB list to wait on
@WTRECB  DS    A                   SAPI ECB address
@COMECB  DS    A                   COMM ECB address
ECBSAPI  DS    F                   SAPI ECB
ECBCOM   DS    F                   SAPI ECB
ECBSSOB  DS    F                   SSOB ECB
ZEROES   DS    F                   Dummy ECB

COMMLEN  DC    H'0'                Length of command
COMMBUFF DC    CL128' '            text of command
COMREGS  DC    6F'0'               Reg SA for COMCHECK subroutine
OPVERB   DC    X'00'               place to keep CIBVERB


* FLAGS:
* REQSTAT:
REQSTAT  DS    X              THE STATUS OF IEFSSREQ REQUEST:
RETYES   EQU   X'0'             THERE IS A DATASET RETURNED
RETERR   EQU   X'1'             THERE IS AN ERROR RETURNED
RETNWK   EQU   X'2'             THERE IS NO DATASET MEET CRITERIA


* PROCESS SPOOL DATA STAGE (MULTIPLE DATASET): SCAN OR READ
* SCAN STAGE: TEST IF THIS LOG IS JES JOB LOG, AND
*             COUNT THE TOTAL LINES OF ALL DATASETS IN THIS JCL LOG.
* READ STAGE: READ ALL DATASETS AND SAVE TO OUTPUT DATASET.
PSPSTAGE DS    X
PSPSINIT EQU   X'0'             FIRST TIME SCANNING FOR QUALIFY
PSPSSCAN EQU   X'1'             SECOND TIME TO READ JOB LOG
PSPSREAD EQU   X'2'             SECOND TIME TO READ JOB LOG

* SSS2 DEFAULT SELECTION CRITERIA
SELSTART DS    0C
SELCLASS DS    CL36              CLASS IS SELECTION CRITERIA
SELDEST  DS    CL8               DEST  IS SELECTION CRITERIA
SELFORM  DS    CL8               FORM  IS SELECTION CRITERIA
SELHLQ   DS    CL14              HLQ   IS SELECTION CRITERIA
SELJOBNM DS    CL8               JOBNAME IS SELECTION CRITERIA
SELUSRID DS    CL8               USERID IS SELECTION CRITERIA
SELSTLEN EQU   *-SELSTART

* WHETHER OUT DATASET IS ALLOCATED YES/NO
ISODSALC DS    X
* WHETHER OUT DATASET IS OPENED? YES/NO
ISODSOPN DS    X

* WHETHER IN  DATASET IS ALLOCATED YES/NO
ISIDSALC DS    X
* WHETHER IN  DATASET IS OPENED? YES/NO
ISIDSOPN DS    X

* WHETHER OUTPUT DATASET IS UNABLE TO ALLOCATE?
* SET IN TSTODSN FUNCTION
ISODSBAD DS    X
ISIDSBAD DS    X

* WHETHER STOP COMMAND RECEIVED, YES/NO
ISSTOP   DS    X

* SELECTION FLAGS
ISCLASS  DS    X              IF CLASS IS SELECTION CRITERIA, YES/NO
ISDEST   DS    X              IF DEST  IS SELECTION CRITERIA, YES/NO
ISFORM   DS    X              IF FORM  IS SELECTION CRITERIA, YES/NO
ISHLQ    DS    X              IF HLQ   IS SELECTION CRITERIA, YES/NO
ISJOBNM  DS    X              IF JOBNAME IS SELECTION CRITERIA, YES/NO
ISUSRID  DS    X              IF WRITER IS SELECTION CRITERIA, YES/NO
ISSELGV  DS    X              WHETHER THE SELECTION CRITERIA GIVEN

* THE CURRENT OUTPUT DATASET NAME
OUTLRECL DS    H                THE MAXIMUM LRECL SIZE
OUTTRKS  DS    XL3              THE NUMBER OF TRACKS TO BE ALLOCATED
         DS    0H
OUTREC   DS    0XL260           OUTPUT RECORD
OUTRECLN DS    H                RDW: LENGTH OF CURRENT RECORD
OUTRECRS DS    H                BINARY 0
OUTRECTX DS    XL256            ACTUAL DATA
INSRECTX DS    CL(INSRECLN)     INSERT RECORD TEXT
* TOTAL RECORDS IN THE JOB LOG (SUM OF RECORDS IN ALL DATASETS)
TOTREC   DS    F
TOTLOGS  DS    F                TOTAL NUMBER OF LOGS PROCESSED
*OUTPUT DATASET SEQUENCE ID
ODSNSEQ  DS    A                CURRENT SEQUENCE ID ADDRESS
ODSNILC  DS    F                LOCATION OF THE OUT DSN ID
*

* THE CURRENT TEXT UNIT ADDRESS FOR SVC99 CALL
TUADDR   DS    F
DYNDDNAM DS    CL8              DDNAME IS ALLOCATED
* THE CURRENT TEXT UNIT ADDRESS FOR SVC99 CALL
ALLCCODE DS    0F               RETURN CODE FOR SVC 99 ALLOCATE
ALLCCDE  DS    H                COPY OF RETURN CODE FROM R15
ALLCRSN  DS    H                COPY OF S99ERR0R
UNALCODE DS    F                RETURN CODE FOR SVC 99 UNALLOCATE

* TIME
TIMEFM1  DS    D                STCK FORMAT,DOUBLE FULL WORD FORMAT
TIMEFM2  DS    0CL17            DEC  CONVERTED FORMAT
         DS    X                '01' FOR TEMPORARY BYTE
TIMEFM2A DS    CL16             TIME MACRO FORMAT: HHMMSSssYYYYMMDD
TIMEFM3  DS    0CL20            DEC CONVERTED FORMAT
         DS    XL3
TIME3TM  DS    CL4              TIME FORMAT HHMM
         DS    XL3
TIME3DT  DS    CL6              TIME FORMAT YYMMDD
         DS    XL6

* SSS2 VALUES RETURNED BY IEFSSREQ MACRO
LDACLSR  DS    CL1                 Class of work returned by jes
LDADESTR DS    CL18                Default destination of desired work
LDAJOBIR DS    XL8                 Job id of work returned by jes
LDAJOBNR DS    CL8                 Jobname of work returned by jes
* MESSAGE BUFFER
MSGBUF   DS    0CL134
MSGBUFCC DS    CL1                ;CARRIAGE CONTROL BYTE
MSGBUFTM DS    CL20               ;DATE AND TIME STAMP
MSGBUFTX DS    CL120              ;SYSPRINT MESSAGE BUFFER
MSGBUFTT DS    CL20               ;TEMPORARY BUFFER FOR ED OF TIME
* SYSPRINT OPEN FLAG

* OUTPUT LOG MESSAGE
OJLMSG   DS    0CL133         0 FOR NOT OPENED, 1 FOR OPENED
OJLMID   DS    CL7            MESSAGE ID
         DS    CL1
OJLCMD   DS    CL7            ACTION (COMMAND)
         DS    CL1
OJLJNM   DS    CL8            JOB NAME
         DS    CL1
OJLJID   DS    CL8            JOB ID
         DS    CL1
OJLREC   DS    CL8            TOTAL NUMBER OF RECORDS
         DS    CL1
OJLDSN   DS    CL44           THE OUTPUT DATASET
         DS    CL70

* WORK STORAGE
DWORK    DS    0DL4
DWORK1   DS    D                   Double word for working
         DS    X                   Pad byte
FWORK1   DS    F                   Single work for working
DWORK2   DS    D                   Ditto
         DS    X                   Ditto
FWORK2   DS    F                   Ditto
         DS    D
* DATASET INFORMATION STORAGE FOR INDAB - LOCATE
ODSNINFO DS    0D
         DS    265C
*
DATEAREA DS    0CL17              TIME MACRO FORMAT: HHMMSSssYYYYMMDD
         DS    X                  '01' FOR TEMPORARY BYTE
DATESAVE DS    CL16               TIME MACRO FORMAT: HHMMSSssYYYYMMDD
* MODIFY COMMAND BUFFER
MDFOPT   DS    0H                 MODIFY COMMAND BUFFER
MDFLEN   DS    H                  MODIFY COMMAND OPTION LENGTH
MDFTXT   DS    CL128              MODIFY COMMAND OPTION TEXT

*
JOFHMSG  DS    CL32               OFLHELP PROGRAM INFO EXCHANGE

* JOB INFORMATION
MYJOB    DS    CL(JOBINFLN)
*---------------------------------------------------------------------*
         DS    0D                 Round up to double word boundary
DSALEN   EQU   *-DSA              ;LENGTH OF DATA AREA

JOBINFO  DSECT
JIJOBNM  DS    CL8                JOBNAME
JIPRCNM  DS    CL8                PROCEDURE NAME
JISTPNM  DS    CL8                STEP NAME
JIJOBID  DS    CL8                JOBID
JIASID   DS    CL4                ADDRESS SPACE ID
JIUSERID DS    CL8                USER ID TO SUBMITTED THE JOB
JIJBTYP  DS    CL3                JOB TYPE: JOB, STC OR TSO
JIPGM    DS    CL8                PROGRAM NAME
JIOS     DS    CL24               OPERATING SYSTEM, VERSION/RELEASE
JISSNM   DS    CL4                SUBSYSTEM NAME, JES SUBSYSTEM
JISYSID  DS    CL8                SYSTEM ID
JOBINFLN EQU   *-JOBINFO
***********************************************************************
* Mapping macros
         PRINT NOGEN
         TITLE  'IEFJSSOB - Subsystem Option Block'
         IEFJSSOB ,          Map SSOB header
         TITLE  'IAZSSS2  - SAPI Extension '
SSOBGN   EQU    *
         IAZSSS2
* PSA AND ASCB ASXB
         TITLE 'PSA,ASCB  - ADDRESS SPACE TABLE'
         IHAPSA
         IHAASCB
         IHAASXB
* DSECT MAPS
         TITLE 'CVT       - Communication Vector Table'
         CVT   DSECT=YES
         IHAECVT
* TASK INPUT/OUTPUT TABLE
         IEFTIOT1
* TASK CONTROL BLOCK
         IKJTCB
* SMF CONTROL AREA
         IEESMCA
* JOB/STEP CONTROL BLOCK
         IEZJSCB
* JOB/STEP CONTROL BLOCK
         IEFJSSIB
* DCBD AND DYNAMIC ALLOCATION
         TITLE 'DCBD      -                                       '
         DCBD  DSORG=PS
         IEFZB4D0
         IEFZB4D2
*
*        TITLE 'IEFJESCT  - JES Communication Table'
         IEFJESCT
*        TITLE 'IEFJSBVT  -                                      '
         IEFJSBVT
*        TITLE 'IEFJSCVT  - Subsystem Communications Vector Table'
         IEFJSCVT
* COMMUNICATION AREAS
COM      DSECT
         IEZCOM          COMM AREA
CIB      DSECT
         IEZCIB          CIB
*---------------------------------------------------------------------*
*  END OF PROGRAM                                                     *
*---------------------------------------------------------------------*
         END   OFFLOAD
*
*
*
*
*
*
*
*
***********************************************************************
**PROGRAM HELP CSECT **************************************************
***********************************************************************
***********************************************************************
OFLHELP  CSECT
OFLHELP  TITLE 'OFLHELP - HELP MESSAGE PROCESSING PROGRAM.'
OFLHELP  CSECT
OFLHELP  AMODE 31
OFLHELP  RMODE 24
*PROGRAM: OFLHELP
*PURPOSE: SHOW HELP MESSAGE FOR OFFLOAD PROGRAM
*AUTHOR : Hunter Guanghui Zhou
*         Phone: 1-(416)-602-9567
*         E-mail: zhough2000@yahoo.com
*
         YREGS
         USING OFLHELP,R15        Establish temporary base register
         B     JOFH0000           Branch to bypass data constants
         DC    CL23'PROGRAM NAME(OFFLOAD)'       Module identifier
         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'
         DC    CL48'SAPI EXTERNAL WRITER FOR JES2 SPOOL OUTPUT'
         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '
BASE2REG DC    A(OFLHELP+4096)    Second base register
BASE3REG DC    A(OFLHELP+8192)    Second base register
JOFH0000 DS    0H
         STM   R14,R12,12(R13)    Save caller's registers
         L     R11,BASE2REG       second base register
         L     R10,BASE3REG       third  base register
         LR    R12,R15            Change base registers
         DROP  R15                Tell assembler
         USING OFLHELP,R12,R11,R10 Use 3 base registers
         ST    R13,SAVEAREA+4     ;SET OUR BACKWARD LINK
         LA    R15,SAVEAREA       ;ADDR OF OUR SAVEAREA
         ST    R15,8(R13)         ;SET CALLER'S FORWARD LINK
         LR    R13,R15            ;ADDR OF OUR SAVEAREA
         ST    R2,@MSGINFO        ;SAVE MESSAGE INFORMATION ADDRESS
         USING MSGINFO,R2         ;SAVE SYSPRINT DCB ADDRESS
         BAL   R3,SHOWHELP        LOAD THE LAST MESSAGE ID
RETURN   EQU   *
         XR    R15,R15
         ICM   R15,B'0001',RETCODE  ;LOAD THE RETURN CODE TO R9
         L     R13,4(R13)           ;ADDR OF CALLER'S SAVEAREA
         RETURN (14,12),RC=(15)     ;RESTORE CALLER'S REGS AND RETURN

***********************************************************************
* ROUTINE: SHOWHELP
* DESCRIPTION: SHOW HELP MESSAGE
* INPUT:
*    R3  : RETURN CONTROL
*---------------------------------------------------------------------*
SHOWHELP DS    0H
         LA    R5,MSGLAST         LOAD THE LAST MESSAGE ID
         LA    R4,1
         MVI   MSGBUFTX,C' '
         MVC   MSGBUFTX+1(131),MSGBUFTX
         ZAP  MSGCTR,P0          RESET THE COUNTER
SHP1000  EQU   *
         STC   R4,MSGID
         BAL   R1,LOG
         LA    R4,1(0,R4)
         CR    R4,R5
         BNH   SHP1000
SHP2000  EQU   *
         ZAP  MSGCTR,P0          RESET THE COUNTER
         BR    R3

***********************************************************************
* ROUTINE: LOG
* DESCRIPTION: WRITE LOG TO SYSPRINT DD
* INPUT:
*    R1  : RETURN CONTROL
* MSGBUFTX: THE MESSAGE TO BE DISPLAYED
* RETURN
*---------------------------------------------------------------------*
LOG      EQU   *
         CLI  SPROPNFL,YES       IS THE SYSPRINT PROVIDED?
         BNE  LOG9900            NO, JUST SKIP THE LOG
         STM  R1,R15,SVLOG       SAVE R1-R7 REGISTERS
* SEARCH MESSAGE INDEX FOR GIVEN MESSAGE ID IN MSGID
         XR   R6,R6              CLEAR R6
         XR   R7,R7              CLEAR R7
         LA   R5,MSGIDX          LOAD THE START OF THE TABLE
         IC   R6,MSGID           LOAD THE GIVEN MESSAGE ID
LOG1000  EQU   *
         IC   R7,0(R5)           LOAD THE CURRENT MESSAGE ID
         CR   R6,R7              COMPARE THIS ONE TO THE GIVEN ONE.
         BE   LOG2000
         CLI  0(R5),MSGIXEND     GET THE END OF THE TABLE?
         BE   LOG9000            YES, THE GIVEN MSGID IS NOT FOUND
         LA   R5,5(,R5)          MOVE TO NEXT INDEX RECORD
         B    LOG1000            TEST NEXT MESSAGE
* PROCESS MESSAGE ID
LOG2000  EQU   *
         L    R7,1(R5)           LOAD THE MESSAGE ADDRESS
         LH   R5,0(R7)           LOAD THE MESSAGE LENGTH
         LA   R7,2(,R7)          LOAD THE MESSAGE BODY POSITION
         BCTR R5,0
         LA   R6,MSGBUFTX        COPY TO MESSAGE BUFFER
         EX   R5,MVCREC          COPY MESSAGE TO SYSPRINT MSG BUFFER
* PROCESS MESSAGES IN MSGBUF BUFFER.
LOG4000 EQU   *
* MESSAGE PAGE BREAK PROCESSING
         CP   MSGCTR,P0          PAGE BREAKER?
         BE   LOG4100
         CP   MSGCTR,P50         PAGE BREAKER?
         BNE  LOG4200
         ZAP  MSGCTR,P0          RESET THE COUNTER
* PAGE BREAK
LOG4100 MVI   MSGBUFCC,C'1'      SET CC BYTE TO SPACE
         B    LOG4300
* NORMAL LINES
LOG4200  MVI  MSGBUFCC,C' '
LOG4300  AP   MSGCTR,P1
         PUT  SYSPRINT,MSGBUF      WRITE THE MESSAGE TO SYSPRINT
LOG9000  EQU  *
         MVI   MSGBUFTX,C' '
         MVC   MSGBUFTX+1(131),MSGBUFTX
         LM    R1,R15,SVLOG        RESTORE R1-R7 REGISTERS
LOG9900  BR   R1

*************************************************************
* PACKED DECIMAL CONSTANTS FOR MESSAGE PROCESSING
SAVEAREA DS    18F                ;REGISTER SAVE AREA
SVLOG    DS    16F                ;REGISTER SAVE AREA FOR WRITELOG
RETCODE  DS    XL1                ;RETURN CODE


*************************************************************
* PACKED DECIMAL CONSTANTS FOR MESSAGE PROCESSING
YES      EQU   X'1'              ; YES
NO       EQU   X'0'              ; NO
P50      DC    PL2'60'       PAGE BREAKER LINES
P1       DC    PL1'1'
P0       DC    PL1'0'
MVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5
* MESSAGE INDEX TABLE
*
MSGIDX   DS    0C
         DC    AL1(MSG01I),AL4(MSG01)        * MSG ID 01
         DC    AL1(MSG02I),AL4(MSG02)        * MSG ID 02
         DC    AL1(MSG03I),AL4(MSG03)        * MSG ID 03
         DC    AL1(MSG04I),AL4(MSG04)        * MSG ID 04
         DC    AL1(MSG05I),AL4(MSG05)        * MSG ID 05
         DC    AL1(MSG06I),AL4(MSG06)        * MSG ID 06
         DC    AL1(MSG07I),AL4(MSG07)        * MSG ID 07
         DC    AL1(MSG08I),AL4(MSG08)        * MSG ID 08
         DC    AL1(MSG09I),AL4(MSG09)        * MSG ID 09
         DC    AL1(MSG0AI),AL4(MSG0A)        * MSG ID 0A
         DC    AL1(MSG0BI),AL4(MSG0B)        * MSG ID 0B
         DC    AL1(MSG0CI),AL4(MSG0C)        * MSG ID 0C
         DC    AL1(MSG0DI),AL4(MSG0D)        * MSG ID 0D
         DC    AL1(MSG0EI),AL4(MSG0E)        * MSG ID 0E
         DC    AL1(MSG0FI),AL4(MSG0F)        * MSG ID 0F
         DC    AL1(MSG10I),AL4(MSG10)        * MSG ID 10
         DC    AL1(MSG11I),AL4(MSG11)        * MSG ID 11
         DC    AL1(MSG12I),AL4(MSG12)        * MSG ID 12
         DC    AL1(MSG13I),AL4(MSG13)        * MSG ID 13
         DC    AL1(MSG14I),AL4(MSG14)        * MSG ID 14
         DC    AL1(MSG15I),AL4(MSG15)        * MSG ID 15
         DC    AL1(MSG16I),AL4(MSG16)        * MSG ID 16
         DC    AL1(MSG17I),AL4(MSG17)        * MSG ID 17
         DC    AL1(MSG18I),AL4(MSG18)        * MSG ID 18
         DC    AL1(MSG19I),AL4(MSG19)        * MSG ID 19
         DC    AL1(MSG1AI),AL4(MSG1A)        * MSG ID 1A
         DC    AL1(MSG1BI),AL4(MSG1B)        * MSG ID 1B
         DC    AL1(MSG1CI),AL4(MSG1C)        * MSG ID 1C
         DC    AL1(MSG1DI),AL4(MSG1D)        * MSG ID 1D
         DC    AL1(MSG1EI),AL4(MSG1E)        * MSG ID 1E
         DC    AL1(MSG1FI),AL4(MSG1F)        * MSG ID 1F
         DC    AL1(MSG20I),AL4(MSG20)        * MSG ID 20
         DC    AL1(MSG21I),AL4(MSG21)        * MSG ID 21
         DC    AL1(MSG22I),AL4(MSG22)        * MSG ID 22
         DC    AL1(MSG23I),AL4(MSG23)        * MSG ID 23
         DC    AL1(MSG24I),AL4(MSG24)        * MSG ID 24
         DC    AL1(MSG25I),AL4(MSG25)        * MSG ID 25
         DC    AL1(MSG26I),AL4(MSG26)        * MSG ID 26
         DC    AL1(MSG27I),AL4(MSG27)        * MSG ID 27
         DC    AL1(MSG28I),AL4(MSG28)        * MSG ID 28
         DC    AL1(MSG29I),AL4(MSG29)        * MSG ID 29
         DC    AL1(MSG2AI),AL4(MSG2A)        * MSG ID 2A
         DC    AL1(MSG2BI),AL4(MSG2B)        * MSG ID 2B
         DC    AL1(MSG2CI),AL4(MSG2C)        * MSG ID 2C
         DC    AL1(MSG2DI),AL4(MSG2D)        * MSG ID 2D
         DC    AL1(MSG2EI),AL4(MSG2E)        * MSG ID 2E
         DC    AL1(MSG2FI),AL4(MSG2F)        * MSG ID 2F
         DC    AL1(MSG30I),AL4(MSG30)        * MSG ID 30
         DC    AL1(MSG31I),AL4(MSG31)        * MSG ID 31
         DC    AL1(MSG32I),AL4(MSG32)        * MSG ID 32
         DC    AL1(MSG33I),AL4(MSG33)        * MSG ID 33
         DC    AL1(MSG34I),AL4(MSG34)        * MSG ID 34
         DC    AL1(MSG35I),AL4(MSG35)        * MSG ID 35
         DC    AL1(MSG36I),AL4(MSG36)        * MSG ID 36
         DC    AL1(MSG37I),AL4(MSG37)        * MSG ID 37
         DC    AL1(MSG38I),AL4(MSG38)        * MSG ID 38
         DC    AL1(MSG39I),AL4(MSG39)        * MSG ID 39
         DC    AL1(MSG3AI),AL4(MSG3A)        * MSG ID 3A
         DC    AL1(MSG3BI),AL4(MSG3B)        * MSG ID 3B
         DC    AL1(MSG3CI),AL4(MSG3C)        * MSG ID 3C
         DC    AL1(MSG3DI),AL4(MSG3D)        * MSG ID 3D
         DC    AL1(MSG3EI),AL4(MSG3E)        * MSG ID 3E
         DC    AL1(MSG3FI),AL4(MSG3F)        * MSG ID 3F
         DC    AL1(MSG40I),AL4(MSG40)        * MSG ID 40
         DC    AL1(MSG41I),AL4(MSG41)        * MSG ID 41
         DC    AL1(MSG42I),AL4(MSG42)        * MSG ID 42
         DC    AL1(MSG43I),AL4(MSG43)        * MSG ID 43
         DC    AL1(MSG44I),AL4(MSG44)        * MSG ID 44
         DC    AL1(MSG45I),AL4(MSG45)        * MSG ID 45
         DC    AL1(MSG46I),AL4(MSG46)        * MSG ID 46
         DC    AL1(MSG47I),AL4(MSG47)        * MSG ID 47
         DC    AL1(MSG48I),AL4(MSG48)        * MSG ID 48
         DC    AL1(MSG49I),AL4(MSG49)        * MSG ID 49
         DC    AL1(MSG4AI),AL4(MSG4A)        * MSG ID 4A
         DC    AL1(MSG4BI),AL4(MSG4B)        * MSG ID 4B
         DC    AL1(MSG4CI),AL4(MSG4C)        * MSG ID 4C
         DC    AL1(MSG4DI),AL4(MSG4D)        * MSG ID 4D
         DC    AL1(MSG4EI),AL4(MSG4E)        * MSG ID 4E
         DC    AL1(MSG4FI),AL4(MSG4F)        * MSG ID 4F
         DC    AL1(MSG50I),AL4(MSG50)        * MSG ID 50
         DC    AL1(MSG51I),AL4(MSG51)        * MSG ID 51
         DC    AL1(MSG52I),AL4(MSG52)        * MSG ID 52
         DC    AL1(MSG53I),AL4(MSG53)        * MSG ID 53
         DC    AL1(MSG54I),AL4(MSG54)        * MSG ID 54
         DC    AL1(MSG55I),AL4(MSG55)        * MSG ID 55
         DC    AL1(MSG56I),AL4(MSG56)        * MSG ID 56
         DC    AL1(MSG57I),AL4(MSG57)        * MSG ID 57
         DC    AL1(MSG58I),AL4(MSG58)        * MSG ID 58
         DC    AL1(MSG59I),AL4(MSG59)        * MSG ID 59
         DC    AL1(MSG5AI),AL4(MSG5A)        * MSG ID 5A
         DC    AL1(MSG5BI),AL4(MSG5B)        * MSG ID 5B
         DC    AL1(MSG5CI),AL4(MSG5C)        * MSG ID 5C
         DC    AL1(MSG5DI),AL4(MSG5D)        * MSG ID 5D
         DC    AL1(MSG5EI),AL4(MSG5E)        * MSG ID 5E
         DC    AL1(MSG5FI),AL4(MSG5F)        * MSG ID 5F
         DC    AL1(MSG60I),AL4(MSG60)        * MSG ID 60
         DC    AL1(MSG61I),AL4(MSG61)        * MSG ID 61
         DC    AL1(MSG62I),AL4(MSG62)        * MSG ID 62
         DC    AL1(MSG63I),AL4(MSG63)        * MSG ID 63
         DC    AL1(MSG64I),AL4(MSG64)        * MSG ID 64
         DC    AL1(MSG65I),AL4(MSG65)        * MSG ID 65
         DC    AL1(MSG66I),AL4(MSG66)        * MSG ID 66
         DC    AL1(MSG67I),AL4(MSG67)        * MSG ID 67
         DC    AL1(MSG68I),AL4(MSG68)        * MSG ID 68
         DC    AL1(MSG69I),AL4(MSG69)        * MSG ID 69
         DC    AL1(MSG6AI),AL4(MSG6A)        * MSG ID 6A
         DC    AL1(MSG6BI),AL4(MSG6B)        * MSG ID 6B
         DC    AL1(MSG6CI),AL4(MSG6C)        * MSG ID 6C
         DC    AL1(MSG6DI),AL4(MSG6D)        * MSG ID 6D
         DC    AL1(MSG6EI),AL4(MSG6E)        * MSG ID 6E
         DC    AL1(MSG6FI),AL4(MSG6F)        * MSG ID 6F
         DC    AL1(MSG70I),AL4(MSG70)        * MSG ID 70
         DC    AL1(MSG71I),AL4(MSG71)        * MSG ID 71
         DC    AL1(MSG72I),AL4(MSG72)        * MSG ID 72
         DC    AL1(MSG73I),AL4(MSG73)        * MSG ID 73
         DC    AL1(MSG74I),AL4(MSG74)        * MSG ID 74
         DC    AL1(MSG75I),AL4(MSG75)        * MSG ID 75
         DC    AL1(MSG76I),AL4(MSG76)        * MSG ID 76
         DC    AL1(MSG77I),AL4(MSG77)        * MSG ID 77
         DC    AL1(MSG78I),AL4(MSG78)        * MSG ID 78
         DC    AL1(MSG79I),AL4(MSG79)        * MSG ID 79
         DC    AL1(MSG7AI),AL4(MSG7A)        * MSG ID 7A
         DC    AL1(MSG7BI),AL4(MSG7B)        * MSG ID 7B
         DC    AL1(MSG7CI),AL4(MSG7C)        * MSG ID 7C
         DC    AL1(MSG7DI),AL4(MSG7D)        * MSG ID 7D
         DC    AL1(MSG7EI),AL4(MSG7E)        * MSG ID 7E
         DC    AL1(MSG7FI),AL4(MSG7F)        * MSG ID 7F
         DC    AL1(MSG80I),AL4(MSG80)        * MSG ID 80
         DC    AL1(MSG81I),AL4(MSG81)        * MSG ID 81
         DC    AL1(MSG82I),AL4(MSG82)        * MSG ID 82
         DC    AL1(MSG83I),AL4(MSG83)        * MSG ID 83
         DC    AL1(MSG84I),AL4(MSG84)        * MSG ID 84
         DC    AL1(MSG85I),AL4(MSG85)        * MSG ID 85
         DC    AL1(MSG86I),AL4(MSG86)        * MSG ID 86
         DC    AL1(MSG87I),AL4(MSG87)        * MSG ID 87
         DC    AL1(MSG88I),AL4(MSG88)        * MSG ID 88
         DC    AL1(MSG89I),AL4(MSG89)        * MSG ID 89
         DC    AL1(MSG8AI),AL4(MSG8A)        * MSG ID 8A
         DC    AL1(MSG8BI),AL4(MSG8B)        * MSG ID 8B
         DC    AL1(MSG8CI),AL4(MSG8C)        * MSG ID 8C
         DC    AL1(MSG8DI),AL4(MSG8D)        * MSG ID 8D
         DC    AL1(MSG8EI),AL4(MSG8E)        * MSG ID 8E
         DC    AL1(MSG8FI),AL4(MSG8F)        * MSG ID 8F
         DC    AL1(MSG90I),AL4(MSG90)        * MSG ID 90
         DC    AL1(MSG91I),AL4(MSG91)        * MSG ID 91
         DC    AL1(MSG92I),AL4(MSG92)        * MSG ID 92
         DC    AL1(MSG93I),AL4(MSG93)        * MSG ID 93
         DC    AL1(MSG94I),AL4(MSG94)        * MSG ID 94
         DC    AL1(MSG95I),AL4(MSG95)        * MSG ID 95
         DC    AL1(MSG96I),AL4(MSG96)        * MSG ID 96
         DC    AL1(MSG97I),AL4(MSG97)        * MSG ID 97
         DC    AL1(MSG98I),AL4(MSG98)        * MSG ID 98
         DC    AL1(MSG99I),AL4(MSG99)        * MSG ID 99
         DC    AL1(MSG9AI),AL4(MSG9A)        * MSG ID 9A
         DC    AL1(MSG9BI),AL4(MSG9B)        * MSG ID 9B
         DC    AL1(MSG9CI),AL4(MSG9C)        * MSG ID 9C
         DC    AL1(MSG9DI),AL4(MSG9D)        * MSG ID 9D
         DC    AL1(MSG9EI),AL4(MSG9E)        * MSG ID 9E
         DC    AL1(MSG9FI),AL4(MSG9F)        * MSG ID 9F
         DC    AL1(MSGA0I),AL4(MSGA0)        * MSG ID A0
         DC    AL1(MSGA1I),AL4(MSGA1)        * MSG ID A1
         DC    AL1(MSGA2I),AL4(MSGA2)        * MSG ID A2
         DC    AL1(MSGA3I),AL4(MSGA3)        * MSG ID A3
         DC    AL1(MSGA4I),AL4(MSGA4)        * MSG ID A4
         DC    AL1(MSGA5I),AL4(MSGA5)        * MSG ID A5
         DC    AL1(MSGA6I),AL4(MSGA6)        * MSG ID A6
         DC    AL1(MSGA7I),AL4(MSGA7)        * MSG ID A7
         DC    AL1(MSGA8I),AL4(MSGA8)        * MSG ID A8
         DC    AL1(MSGA9I),AL4(MSGA9)        * MSG ID A9
         DC    AL1(MSGAAI),AL4(MSGAA)        * MSG ID AA
         DC    AL1(MSGABI),AL4(MSGAB)        * MSG ID AB
         DC    AL1(MSGACI),AL4(MSGAC)        * MSG ID AC
         DC    AL1(MSGADI),AL4(MSGAD)        * MSG ID AD
         DC    AL1(MSGAEI),AL4(MSGAE)        * MSG ID AE
         DC    AL1(MSGAFI),AL4(MSGAF)        * MSG ID AF
         DC    AL1(MSGB0I),AL4(MSGB0)        * MSG ID B0
         DC    AL1(MSGB1I),AL4(MSGB1)        * MSG ID B1
         DC    AL1(MSGB2I),AL4(MSGB2)        * MSG ID B2
         DC    AL1(MSGB3I),AL4(MSGB3)        * MSG ID B3
         DC    AL1(MSGB4I),AL4(MSGB4)        * MSG ID B4
         DC    AL1(MSGB5I),AL4(MSGB5)        * MSG ID B5
         DC    AL1(MSGB6I),AL4(MSGB6)        * MSG ID B6
         DC    AL1(MSGB7I),AL4(MSGB7)        * MSG ID B7
         DC    AL1(MSGB8I),AL4(MSGB8)        * MSG ID B8
         DC    AL1(MSGB9I),AL4(MSGB9)        * MSG ID B9
         DC    AL1(MSGBAI),AL4(MSGBA)        * MSG ID BA
         DC    AL1(MSGBBI),AL4(MSGBB)        * MSG ID BB
         DC    AL1(MSGBCI),AL4(MSGBC)        * MSG ID BC
         DC    AL1(MSGBDI),AL4(MSGBD)        * MSG ID BD
         DC    AL1(MSGBEI),AL4(MSGBE)        * MSG ID BE
         DC    AL1(MSGBFI),AL4(MSGBF)        * MSG ID BF
         DC    AL1(MSGC0I),AL4(MSGC0)        * MSG ID C0
         DC    AL1(MSGC1I),AL4(MSGC1)        * MSG ID C1
         DC    AL1(MSGIXEND),AL4(0)          * END OF INDEX TABLE
*
MSG01    DC  AL2(MSG01L)
MSG01T   DC  C'                    PROGRAM HELP MESSAGE'
MSG01L   EQU *-MSG01T
MSG01I   EQU X'01'
*
MSG02    DC  AL2(MSG02L)
MSG02T   DC  C'                    ===================='
MSG02L   EQU *-MSG02T
MSG02I   EQU X'02'
*
MSG03    DC  AL2(MSG03L)
MSG03T   DC  C' '
MSG03L   EQU *-MSG03T
MSG03I   EQU X'03'
*
MSG04    DC  AL2(MSG04L)
MSG04T   DC  C' Program    : OFFLOAD'
MSG04L   EQU *-MSG04T
MSG04I   EQU X'04'
*
MSG05    DC  AL2(MSG05L)
MSG05T   DC  C' Description: JES Spool Offload Program.'
MSG05L   EQU *-MSG05T
MSG05I   EQU X'05'
*
MSG06    DC  AL2(MSG06L)
MSG06T   DC  C' Purpose    : Offload JES Spool Data to cataloged '
         DC  C'dataset.'
MSG06L   EQU *-MSG06T
MSG06I   EQU X'06'
*
MSG07    DC  AL2(MSG07L)
MSG07T   DC  C' Design     : Hunter Zhou.'
MSG07L   EQU *-MSG07T
MSG07I   EQU X'07'
*
MSG08    DC  AL2(MSG08L)
MSG08T   DC  C' Support    : zhough2000@yahoo.com    '
MSG08L   EQU *-MSG08T
MSG08I   EQU X'08'
*
MSG09    DC  AL2(MSG09L)
MSG09T   DC  C' Last Update: February, 2004'
MSG09L   EQU *-MSG09T
MSG09I   EQU X'09'
*
MSG0A    DC  AL2(MSG0AL)
MSG0AT   DC  C' '
MSG0AL   EQU *-MSG0AT
MSG0AI   EQU X'0A'
*
MSG0B    DC  AL2(MSG0BL)
MSG0BT   DC  C' Introduction'
MSG0BL   EQU *-MSG0BT
MSG0BI   EQU X'0B'
*
MSG0C    DC  AL2(MSG0CL)
MSG0CT   DC  C' ============'
MSG0CL   EQU *-MSG0CT
MSG0CI   EQU X'0C'
*
MSG0D    DC  AL2(MSG0DL)
MSG0DT   DC  C' '
MSG0DL   EQU *-MSG0DT
MSG0DI   EQU X'0D'
*
MSG0E    DC  AL2(MSG0EL)
MSG0ET   DC  C' This program will offload the JES spool datasets '
         DC  C'into system'
MSG0EL   EQU *-MSG0ET
MSG0EI   EQU X'0E'
*
MSG0F    DC  AL2(MSG0FL)
MSG0FT   DC  C' datasets. The program is designed based on follow'
         DC  C'ing rules:'
MSG0FL   EQU *-MSG0FT
MSG0FI   EQU X'0F'
*
MSG10    DC  AL2(MSG10L)
MSG10T   DC  C' '
MSG10L   EQU *-MSG10T
MSG10I   EQU X'10'
*
MSG11    DC  AL2(MSG11L)
MSG11T   DC  C' 1. Each spool entry will be saved into one catalo'
         DC  C'ged system dataset.'
MSG11L   EQU *-MSG11T
MSG11I   EQU X'11'
*
MSG12    DC  AL2(MSG12L)
MSG12T   DC  C'    Only spool data in OUTPUT queue will be proces'
         DC  C'sed.'
MSG12L   EQU *-MSG12T
MSG12I   EQU X'12'
*
MSG13    DC  AL2(MSG13L)
MSG13T   DC  C' 2. The system cataloged dataset name convention a'
         DC  C're:'
MSG13L   EQU *-MSG13T
MSG13I   EQU X'13'
*
MSG14    DC  AL2(MSG14L)
MSG14T   DC  C'    hlq.jobname.Ddate.jobid.TtimeIid'
MSG14L   EQU *-MSG14T
MSG14I   EQU X'14'
*
MSG15    DC  AL2(MSG15L)
MSG15T   DC  C' '
MSG15L   EQU *-MSG15T
MSG15I   EQU X'15'
*
MSG16    DC  AL2(MSG16L)
MSG16T   DC  C'   Here:'
MSG16L   EQU *-MSG16T
MSG16I   EQU X'16'
*
MSG17    DC  AL2(MSG17L)
MSG17T   DC  C'   hlq      The high level qualifier of the offloa'
         DC  C'ded spool dataset.'
MSG17L   EQU *-MSG17T
MSG17I   EQU X'17'
*
MSG18    DC  AL2(MSG18L)
MSG18T   DC  C'            This hlq must given as ''H=hlq'' in EX'
         DC  C'EC PARM.'
MSG18L   EQU *-MSG18T
MSG18I   EQU X'18'
*
MSG19    DC  AL2(MSG19L)
MSG19T   DC  C'   jobname  The job name of the spool dataset.'
MSG19L   EQU *-MSG19T
MSG19I   EQU X'19'
*
MSG1A    DC  AL2(MSG1AL)
MSG1AT   DC  C'   date     The date when the spool dataset is cre'
         DC  C'ated.'
MSG1AL   EQU *-MSG1AT
MSG1AI   EQU X'1A'
*
MSG1B    DC  AL2(MSG1BL)
MSG1BT   DC  C'   jobid    The job id of the spool dataset.'
MSG1BL   EQU *-MSG1BT
MSG1BI   EQU X'1B'
*
MSG1C    DC  AL2(MSG1CL)
MSG1CT   DC  C'   time     The time when the spool dataset is cre'
         DC  C'ated.'
MSG1CL   EQU *-MSG1CT
MSG1CI   EQU X'1C'
*
MSG1D    DC  AL2(MSG1DL)
MSG1DT   DC  C'   id       The sequence number automatic generate'
         DC  C'd by program.'
MSG1DL   EQU *-MSG1DT
MSG1DI   EQU X'1D'
*
MSG1E    DC  AL2(MSG1EL)
MSG1ET   DC  C'            When there are multiple spool datasets'
         DC  C' generated by'
MSG1EL   EQU *-MSG1ET
MSG1EI   EQU X'1E'
*
MSG1F    DC  AL2(MSG1FL)
MSG1FT   DC  C'            JES batches, the id will be added from'
         DC  C' 01 to 99.'
MSG1FL   EQU *-MSG1FT
MSG1FI   EQU X'1F'
*
MSG20    DC  AL2(MSG20L)
MSG20T   DC  C' '
MSG20L   EQU *-MSG20T
MSG20I   EQU X'20'
*
MSG21    DC  AL2(MSG21L)
MSG21T   DC  C' 3. All spool datasets in a single spool entry wil'
         DC  C'l be saved'
MSG21L   EQU *-MSG21T
MSG21I   EQU X'21'
*
MSG22    DC  AL2(MSG22L)
MSG22T   DC  C'    into single dataset.'
MSG22L   EQU *-MSG22T
MSG22I   EQU X'22'
*
MSG23    DC  AL2(MSG23L)
MSG23T   DC  C'    For example, JCL batch logs normally contain f'
         DC  C'ollowing 3 DDNAME'
MSG23L   EQU *-MSG23T
MSG23I   EQU X'23'
*
MSG24    DC  AL2(MSG24L)
MSG24T   DC  C'        JESMSGLG, JESJCL, JESYSMSG'
MSG24L   EQU *-MSG24T
MSG24I   EQU X'24'
*
MSG25    DC  AL2(MSG25L)
MSG25T   DC  C'    The program will merge these DDNAMEs in joblog'
         DC  C' into a cataloged'
MSG25L   EQU *-MSG25T
MSG25I   EQU X'25'
*
MSG26    DC  AL2(MSG26L)
MSG26T   DC  C'    system dataset.'
MSG26L   EQU *-MSG26T
MSG26I   EQU X'26'
*
MSG27    DC  AL2(MSG27L)
MSG27T   DC  C' '
MSG27L   EQU *-MSG27T
MSG27I   EQU X'27'
*
MSG28    DC  AL2(MSG28L)
MSG28T   DC  C' 4. There will be a extra record at the beginning '
         DC  C'of each DDNAME.'
MSG28L   EQU *-MSG28T
MSG28I   EQU X'28'
*
MSG29    DC  AL2(MSG29L)
MSG29T   DC  C'    To distinguish each DDNAMEs, the program add o'
         DC  C'ne record at'
MSG29L   EQU *-MSG29T
MSG29I   EQU X'29'
*
MSG2A    DC  AL2(MSG2AL)
MSG2AT   DC  C'    the beginning of the data. Here is the format '
         DC  C'of this record'
MSG2AL   EQU *-MSG2AT
MSG2AI   EQU X'2A'
*
MSG2B    DC  AL2(MSG2BL)
MSG2BT   DC  C' '
MSG2BL   EQU *-MSG2BT
MSG2BI   EQU X'2B'
*
MSG2C    DC  AL2(MSG2CL)
MSG2CT   DC  C' ****JOF700I JOBNAME(jobname ),JOBID(jobid   ),DDN'
         DC  C'AME(ddname  )****'
MSG2CL   EQU *-MSG2CT
MSG2CI   EQU X'2C'
*
MSG2D    DC  AL2(MSG2DL)
MSG2DT   DC  C'        RECORDS(#records)**'
MSG2DL   EQU *-MSG2DT
MSG2DI   EQU X'2D'
*
MSG2E    DC  AL2(MSG2EL)
MSG2ET   DC  C' '
MSG2EL   EQU *-MSG2ET
MSG2EI   EQU X'2E'
*
MSG2F    DC  AL2(MSG2FL)
MSG2FT   DC  C'    Here the jobname, jobid, ddname and number of '
         DC  C'records will be'
MSG2FL   EQU *-MSG2FT
MSG2FI   EQU X'2F'
*
MSG30    DC  AL2(MSG30L)
MSG30T   DC  C'    updatedd according to related information of t'
         DC  C'he spool dataset.'
MSG30L   EQU *-MSG30T
MSG30I   EQU X'30'
*
MSG31    DC  AL2(MSG31L)
MSG31T   DC  C' '
MSG31L   EQU *-MSG31T
MSG31I   EQU X'31'
*
MSG32    DC  AL2(MSG32L)
MSG32T   DC  C' 5. If there is any problem while processing one s'
         DC  C'pool data,'
MSG32L   EQU *-MSG32T
MSG32I   EQU X'32'
*
MSG33    DC  AL2(MSG33L)
MSG33T   DC  C'    the spool data will be in SYSTEM hold. You sho'
         DC  C'uld refer'
MSG33L   EQU *-MSG33T
MSG33I   EQU X'33'
*
MSG34    DC  AL2(MSG34L)
MSG34T   DC  C'    the program logs to get more information.'
MSG34L   EQU *-MSG34T
MSG34I   EQU X'34'
*
MSG35    DC  AL2(MSG35L)
MSG35T   DC  C' '
MSG35L   EQU *-MSG35T
MSG35I   EQU X'35'
*
MSG36    DC  AL2(MSG36L)
MSG36T   DC  C' '
MSG36L   EQU *-MSG36T
MSG36I   EQU X'36'
*
MSG37    DC  AL2(MSG37L)
MSG37T   DC  C' Explanation of EXEC PARM'
MSG37L   EQU *-MSG37T
MSG37I   EQU X'37'
*
MSG38    DC  AL2(MSG38L)
MSG38T   DC  C' ========================'
MSG38L   EQU *-MSG38T
MSG38I   EQU X'38'
*
MSG39    DC  AL2(MSG39L)
MSG39T   DC  C' '
MSG39L   EQU *-MSG39T
MSG39I   EQU X'39'
*
MSG3A    DC  AL2(MSG3AL)
MSG3AT   DC  C'   The spool data can be selected by criteria give'
         DC  C'n in EXEC PARM.'
MSG3AL   EQU *-MSG3AT
MSG3AI   EQU X'3A'
*
MSG3B    DC  AL2(MSG3BL)
MSG3BT   DC  C' All options in EXEC PARM can be in any order.'
MSG3BL   EQU *-MSG3BT
MSG3BI   EQU X'3B'
*
MSG3C    DC  AL2(MSG3CL)
MSG3CT   DC  C' The syntax of option are:'
MSG3CL   EQU *-MSG3CT
MSG3CI   EQU X'3C'
*
MSG3D    DC  AL2(MSG3DL)
MSG3DT   DC  C'      key1=value1,key2=value2'
MSG3DL   EQU *-MSG3DT
MSG3DI   EQU X'3D'
*
MSG3E    DC  AL2(MSG3EL)
MSG3ET   DC  C' Here key is single letter keyword, and value is t'
         DC  C'he actual criteria'
MSG3EL   EQU *-MSG3ET
MSG3EI   EQU X'3E'
*
MSG3F    DC  AL2(MSG3FL)
MSG3FT   DC  C' for that key.'
MSG3FL   EQU *-MSG3FT
MSG3FI   EQU X'3F'
*
MSG40    DC  AL2(MSG40L)
MSG40T   DC  C' If you specify multiple criteria, the selected sp'
         DC  C'ool data will meet'
MSG40L   EQU *-MSG40T
MSG40I   EQU X'40'
*
MSG41    DC  AL2(MSG41L)
MSG41T   DC  C' all criteria.'
MSG41L   EQU *-MSG41T
MSG41I   EQU X'41'
*
MSG42    DC  AL2(MSG42L)
MSG42T   DC  C' '
MSG42L   EQU *-MSG42T
MSG42I   EQU X'42'
*
MSG43    DC  AL2(MSG43L)
MSG43T   DC  C' '
MSG43L   EQU *-MSG43T
MSG43I   EQU X'43'
*
MSG44    DC  AL2(MSG44L)
MSG44T   DC  C' 1. H=higher level qualifier'
MSG44L   EQU *-MSG44T
MSG44I   EQU X'44'
*
MSG45    DC  AL2(MSG45L)
MSG45T   DC  C'    This is mandatory option to specify the higher'
         DC  C' level qualifier'
MSG45L   EQU *-MSG45T
MSG45I   EQU X'45'
*
MSG46    DC  AL2(MSG46L)
MSG46T   DC  C'    to be used to create cataloged system datasets'
         DC  C', maximum in'
MSG46L   EQU *-MSG46T
MSG46I   EQU X'46'
*
MSG47    DC  AL2(MSG47L)
MSG47T   DC  C'    13 characters.'
MSG47L   EQU *-MSG47T
MSG47I   EQU X'47'
*
MSG48    DC  AL2(MSG48L)
MSG48T   DC  C'    Example:'
MSG48L   EQU *-MSG48T
MSG48I   EQU X'48'
*
MSG49    DC  AL2(MSG49L)
MSG49T   DC  C'        H=LOGS                 Use LOGS as HLQ (LO'
         DC  C'GS.jobname.Ddat'
MSG49L   EQU *-MSG49T
MSG49I   EQU X'49'
*
MSG4A    DC  AL2(MSG4AL)
MSG4AT   DC  C'     Use LOGS as higher level qualifier, the datas'
         DC  C'ets will be:'
MSG4AL   EQU *-MSG4AT
MSG4AI   EQU X'4A'
*
MSG4B    DC  AL2(MSG4BL)
MSG4BT   DC  C'        LOGS.jobname.Ddate.jobid.TtimeIid'
MSG4BL   EQU *-MSG4BT
MSG4BI   EQU X'4B'
*
MSG4C    DC  AL2(MSG4CL)
MSG4CT   DC  C' '
MSG4CL   EQU *-MSG4CT
MSG4CI   EQU X'4C'
*
MSG4D    DC  AL2(MSG4DL)
MSG4DT   DC  C' 2. C=classes'
MSG4DL   EQU *-MSG4DT
MSG4DI   EQU X'4D'
*
MSG4E    DC  AL2(MSG4EL)
MSG4ET   DC  C'    This specify the SYSOUT class selection criter'
         DC  C'ia. You can'
MSG4EL   EQU *-MSG4ET
MSG4EI   EQU X'4E'
*
MSG4F    DC  AL2(MSG4FL)
MSG4FT   DC  C'    specify up to 36 classes in this option. The c'
         DC  C'lasses ranges'
MSG4FL   EQU *-MSG4FT
MSG4FI   EQU X'4F'
*
MSG50    DC  AL2(MSG50L)
MSG50T   DC  C'    from 0-9, and A-Z.'
MSG50L   EQU *-MSG50T
MSG50I   EQU X'50'
*
MSG51    DC  AL2(MSG51L)
MSG51T   DC  C'    Example:'
MSG51L   EQU *-MSG51T
MSG51I   EQU X'51'
*
MSG52    DC  AL2(MSG52L)
MSG52T   DC  C'        C=A                    Just select SYSOUT '
         DC  C'class A'
MSG52L   EQU *-MSG52T
MSG52I   EQU X'52'
*
MSG53    DC  AL2(MSG53L)
MSG53T   DC  C'        C=0123456789           Select SYSOUT class'
         DC  C' in numbers'
MSG53L   EQU *-MSG53T
MSG53I   EQU X'53'
*
MSG54    DC  AL2(MSG54L)
MSG54T   DC  C'        C=ASHJ                 Select SYSOUT class'
         DC  C' A,S,H and J'
MSG54L   EQU *-MSG54T
MSG54I   EQU X'54'
*
MSG55    DC  AL2(MSG55L)
MSG55T   DC  C' '
MSG55L   EQU *-MSG55T
MSG55I   EQU X'55'
*
MSG56    DC  AL2(MSG56L)
MSG56T   DC  C' 3. D=dest'
MSG56L   EQU *-MSG56T
MSG56I   EQU X'56'
*
MSG57    DC  AL2(MSG57L)
MSG57T   DC  C'    This specify the SYSOUT DEST selection criteri'
         DC  C'a, maximum'
MSG57L   EQU *-MSG57T
MSG57I   EQU X'57'
*
MSG58    DC  AL2(MSG58L)
MSG58T   DC  C'    8 characters.'
MSG58L   EQU *-MSG58T
MSG58I   EQU X'58'
*
MSG59    DC  AL2(MSG59L)
MSG59T   DC  C'    If this is not specified, the DEST=LOCAL will '
         DC  C'be used.'
MSG59L   EQU *-MSG59T
MSG59I   EQU X'59'
*
MSG5A    DC  AL2(MSG5AL)
MSG5AT   DC  C'    This option support wildcards. use * for multi'
         DC  C'ple characters'
MSG5AL   EQU *-MSG5AT
MSG5AI   EQU X'5A'
*
MSG5B    DC  AL2(MSG5BL)
MSG5BT   DC  C'    and ? for single character.'
MSG5BL   EQU *-MSG5BT
MSG5BI   EQU X'5B'
*
MSG5C    DC  AL2(MSG5CL)
MSG5CT   DC  C'    Example:'
MSG5CL   EQU *-MSG5CT
MSG5CI   EQU X'5C'
*
MSG5D    DC  AL2(MSG5DL)
MSG5DT   DC  C'        D=OFFLOAD              Just select SYSOUT '
         DC  C'DEST=OFFLOAD'
MSG5DL   EQU *-MSG5DT
MSG5DI   EQU X'5D'
*
MSG5E    DC  AL2(MSG5EL)
MSG5ET   DC  C' '
MSG5EL   EQU *-MSG5ET
MSG5EI   EQU X'5E'
*
MSG5F    DC  AL2(MSG5FL)
MSG5FT   DC  C' 4. F=form'
MSG5FL   EQU *-MSG5FT
MSG5FI   EQU X'5F'
*
MSG60    DC  AL2(MSG60L)
MSG60T   DC  C'    This specify the SYSOUT FORM selection criteri'
         DC  C'a, maximum'
MSG60L   EQU *-MSG60T
MSG60I   EQU X'60'
*
MSG61    DC  AL2(MSG61L)
MSG61T   DC  C'    8 characters.'
MSG61L   EQU *-MSG61T
MSG61I   EQU X'61'
*
MSG62    DC  AL2(MSG62L)
MSG62T   DC  C'    If this is not specified, any FORM will be sel'
         DC  C'ected.'
MSG62L   EQU *-MSG62T
MSG62I   EQU X'62'
*
MSG63    DC  AL2(MSG63L)
MSG63T   DC  C'    This option support wildcards. use * for multi'
         DC  C'ple characters'
MSG63L   EQU *-MSG63T
MSG63I   EQU X'63'
*
MSG64    DC  AL2(MSG64L)
MSG64T   DC  C'    and ? for single character.'
MSG64L   EQU *-MSG64T
MSG64I   EQU X'64'
*
MSG65    DC  AL2(MSG65L)
MSG65T   DC  C'    Example:'
MSG65L   EQU *-MSG65T
MSG65I   EQU X'65'
*
MSG66    DC  AL2(MSG66L)
MSG66T   DC  C'        F=OFFLOAD              Just select SYSOUT '
         DC  C'FORM=OFFLOAD'
MSG66L   EQU *-MSG66T
MSG66I   EQU X'66'
*
MSG67    DC  AL2(MSG67L)
MSG67T   DC  C' '
MSG67L   EQU *-MSG67T
MSG67I   EQU X'67'
*
MSG68    DC  AL2(MSG68L)
MSG68T   DC  C' 5. J=jobname'
MSG68L   EQU *-MSG68T
MSG68I   EQU X'68'
*
MSG69    DC  AL2(MSG69L)
MSG69T   DC  C'    This specify the jobname as selection criteria'
         DC  C', maximum'
MSG69L   EQU *-MSG69T
MSG69I   EQU X'69'
*
MSG6A    DC  AL2(MSG6AL)
MSG6AT   DC  C'    8 characters.'
MSG6AL   EQU *-MSG6AT
MSG6AI   EQU X'6A'
*
MSG6B    DC  AL2(MSG6BL)
MSG6BT   DC  C'    If this is not specified, any jobname will be '
         DC  C'selected.'
MSG6BL   EQU *-MSG6BT
MSG6BI   EQU X'6B'
*
MSG6C    DC  AL2(MSG6CL)
MSG6CT   DC  C'    This option support wildcards. use * for multi'
         DC  C'ple characters'
MSG6CL   EQU *-MSG6CT
MSG6CI   EQU X'6C'
*
MSG6D    DC  AL2(MSG6DL)
MSG6DT   DC  C'    and ? for single character.'
MSG6DL   EQU *-MSG6DT
MSG6DI   EQU X'6D'
*
MSG6E    DC  AL2(MSG6EL)
MSG6ET   DC  C'    Example:'
MSG6EL   EQU *-MSG6ET
MSG6EI   EQU X'6E'
*
MSG6F    DC  AL2(MSG6FL)
MSG6FT   DC  C'        J=EDI*                 Select jobname star'
         DC  C'ts with EDI'
MSG6FL   EQU *-MSG6FT
MSG6FI   EQU X'6F'
*
MSG70    DC  AL2(MSG70L)
MSG70T   DC  C' '
MSG70L   EQU *-MSG70T
MSG70I   EQU X'70'
*
MSG71    DC  AL2(MSG71L)
MSG71T   DC  C' 6. HELP or no EXEC PARM at all.'
MSG71L   EQU *-MSG71T
MSG71I   EQU X'71'
*
MSG72    DC  AL2(MSG72L)
MSG72T   DC  C'    When you specify HELP or do not specify EXEC P'
         DC  C'ARM, this help'
MSG72L   EQU *-MSG72T
MSG72I   EQU X'72'
*
MSG73    DC  AL2(MSG73L)
MSG73T   DC  C'    message will be shown.'
MSG73L   EQU *-MSG73T
MSG73I   EQU X'73'
*
MSG74    DC  AL2(MSG74L)
MSG74T   DC  C' '
MSG74L   EQU *-MSG74T
MSG74I   EQU X'74'
*
MSG75    DC  AL2(MSG75L)
MSG75T   DC  C'    Example:'
MSG75L   EQU *-MSG75T
MSG75I   EQU X'75'
*
MSG76    DC  AL2(MSG76L)
MSG76T   DC  C'     1).//OFFLOAD EXEC PGM=OFFLOAD'
MSG76L   EQU *-MSG76T
MSG76I   EQU X'76'
*
MSG77    DC  AL2(MSG77L)
MSG77T   DC  C' '
MSG77L   EQU *-MSG77T
MSG77I   EQU X'77'
*
MSG78    DC  AL2(MSG78L)
MSG78T   DC  C'     2).//OFFLOAD EXEC PGM=OFFLOAD,PARM=HELP'
MSG78L   EQU *-MSG78T
MSG78I   EQU X'78'
*
MSG79    DC  AL2(MSG79L)
MSG79T   DC  C' '
MSG79L   EQU *-MSG79T
MSG79I   EQU X'79'
*
MSG7A    DC  AL2(MSG7AL)
MSG7AT   DC  C' '
MSG7AL   EQU *-MSG7AT
MSG7AI   EQU X'7A'
*
MSG7B    DC  AL2(MSG7BL)
MSG7BT   DC  C' EXEC PARM Examples'
MSG7BL   EQU *-MSG7BT
MSG7BI   EQU X'7B'
*
MSG7C    DC  AL2(MSG7CL)
MSG7CT   DC  C' ------------------'
MSG7CL   EQU *-MSG7CT
MSG7CI   EQU X'7C'
*
MSG7D    DC  AL2(MSG7DL)
MSG7DT   DC  C'   1). Select spool data with SYSOUT class in numb'
         DC  C'ers'
MSG7DL   EQU *-MSG7DT
MSG7DI   EQU X'7D'
*
MSG7E    DC  AL2(MSG7EL)
MSG7ET   DC  C'       and use ''LOGS'' as higher level qualifier.'
MSG7EL   EQU *-MSG7ET
MSG7EI   EQU X'7E'
*
MSG7F    DC  AL2(MSG7FL)
MSG7FT   DC  C' '
MSG7FL   EQU *-MSG7FT
MSG7FI   EQU X'7F'
*
MSG80    DC  AL2(MSG80L)
MSG80T   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'
MSG80L   EQU *-MSG80T
MSG80I   EQU X'80'
*
MSG81    DC  AL2(MSG81L)
MSG81T   DC  C'        //        PARM=''H=LOGS,C=0123456789'''
MSG81L   EQU *-MSG81T
MSG81I   EQU X'81'
*
MSG82    DC  AL2(MSG82L)
MSG82T   DC  C'        //SYSPRINT DD SYSOUT=*'
MSG82L   EQU *-MSG82T
MSG82I   EQU X'82'
*
MSG83    DC  AL2(MSG83L)
MSG83T   DC  C' '
MSG83L   EQU *-MSG83T
MSG83I   EQU X'83'
*
MSG84    DC  AL2(MSG84L)
MSG84T   DC  C'   2). Select spool data with USERID is SP2487, jo'
         DC  C'bname starts'
MSG84L   EQU *-MSG84T
MSG84I   EQU X'84'
*
MSG85    DC  AL2(MSG85L)
MSG85T   DC  C'       with SP2487, and use ''SP2487'' as higher l'
         DC  C'evel qualifier.'
MSG85L   EQU *-MSG85T
MSG85I   EQU X'85'
*
MSG86    DC  AL2(MSG86L)
MSG86T   DC  C' '
MSG86L   EQU *-MSG86T
MSG86I   EQU X'86'
*
MSG87    DC  AL2(MSG87L)
MSG87T   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'
MSG87L   EQU *-MSG87T
MSG87I   EQU X'87'
*
MSG88    DC  AL2(MSG88L)
MSG88T   DC  C'        //        PARM=''H=SP2487,U=SP2487,J=SP248'
         DC  C'7*'''
MSG88L   EQU *-MSG88T
MSG88I   EQU X'88'
*
MSG89    DC  AL2(MSG89L)
MSG89T   DC  C'        //SYSPRINT DD SYSOUT=*'
MSG89L   EQU *-MSG89T
MSG89I   EQU X'89'
*
MSG8A    DC  AL2(MSG8AL)
MSG8AT   DC  C' '
MSG8AL   EQU *-MSG8AT
MSG8AI   EQU X'8A'
*
MSG8B    DC  AL2(MSG8BL)
MSG8BT   DC  C'   3). Select spool data with USERID is SP2487, jo'
         DC  C'bname starts'
MSG8BL   EQU *-MSG8BT
MSG8BI   EQU X'8B'
*
MSG8C    DC  AL2(MSG8CL)
MSG8CT   DC  C'       with SP2487, and use ''SP2487'' as higher l'
         DC  C'evel qualifier.'
MSG8CL   EQU *-MSG8CT
MSG8CI   EQU X'8C'
*
MSG8D    DC  AL2(MSG8DL)
MSG8DT   DC  C' '
MSG8DL   EQU *-MSG8DT
MSG8DI   EQU X'8D'
*
MSG8E    DC  AL2(MSG8EL)
MSG8ET   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'
MSG8EL   EQU *-MSG8ET
MSG8EI   EQU X'8E'
*
MSG8F    DC  AL2(MSG8FL)
MSG8FT   DC  C'        //        PARM=(''H=LOGS,U=OP9999*'','
MSG8FL   EQU *-MSG8FT
MSG8FI   EQU X'8F'
*
MSG90    DC  AL2(MSG90L)
MSG90T   DC  C'        //        ''C=159CX,D=OFFLOAD'')'
MSG90L   EQU *-MSG90T
MSG90I   EQU X'90'
*
MSG91    DC  AL2(MSG91L)
MSG91T   DC  C'        //SYSPRINT DD SYSOUT=*'
MSG91L   EQU *-MSG91T
MSG91I   EQU X'91'
*
MSG92    DC  AL2(MSG92L)
MSG92T   DC  C' '
MSG92L   EQU *-MSG92T
MSG92I   EQU X'92'
*
MSG93    DC  AL2(MSG93L)
MSG93T   DC  C' '
MSG93L   EQU *-MSG93T
MSG93I   EQU X'93'
*
MSG94    DC  AL2(MSG94L)
MSG94T   DC  C' Program Logs in SYSPRINT'
MSG94L   EQU *-MSG94T
MSG94I   EQU X'94'
*
MSG95    DC  AL2(MSG95L)
MSG95T   DC  C' ========================'
MSG95L   EQU *-MSG95T
MSG95I   EQU X'95'
*
MSG96    DC  AL2(MSG96L)
MSG96T   DC  C'   The processing logs can be shown in SYSPRINT DD'
         DC  C'. If SYSPRINT DD'
MSG96L   EQU *-MSG96T
MSG96I   EQU X'96'
*
MSG97    DC  AL2(MSG97L)
MSG97T   DC  C'   is not presented in JCL, there is no logs gener'
         DC  C'ated.'
MSG97L   EQU *-MSG97T
MSG97I   EQU X'97'
*
MSG98    DC  AL2(MSG98L)
MSG98T   DC  C' '
MSG98L   EQU *-MSG98T
MSG98I   EQU X'98'
*
MSG99    DC  AL2(MSG99L)
MSG99T   DC  C'   The requirements of SYSPRINT:'
MSG99L   EQU *-MSG99T
MSG99I   EQU X'99'
*
MSG9A    DC  AL2(MSG9AL)
MSG9AT   DC  C'      LRECL=133,RECFM=FBA'
MSG9AL   EQU *-MSG9AT
MSG9AI   EQU X'9A'
*
MSG9B    DC  AL2(MSG9BL)
MSG9BT   DC  C' '
MSG9BL   EQU *-MSG9BT
MSG9BI   EQU X'9B'
*
MSG9C    DC  AL2(MSG9CL)
MSG9CT   DC  C'   You may just specify following statement in JCL'
         DC  C':'
MSG9CL   EQU *-MSG9CT
MSG9CI   EQU X'9C'
*
MSG9D    DC  AL2(MSG9DL)
MSG9DT   DC  C'        //SYSPRINT DD SYSOUT=*'
MSG9DL   EQU *-MSG9DT
MSG9DI   EQU X'9D'
*
MSG9E    DC  AL2(MSG9EL)
MSG9ET   DC  C' '
MSG9EL   EQU *-MSG9ET
MSG9EI   EQU X'9E'
*
MSG9F    DC  AL2(MSG9FL)
MSG9FT   DC  C' '
MSG9FL   EQU *-MSG9FT
MSG9FI   EQU X'9F'
*
MSGA0    DC  AL2(MSGA0L)
MSGA0T   DC  C' OPERATION'
MSGA0L   EQU *-MSGA0T
MSGA0I   EQU X'A0'
*
MSGA1    DC  AL2(MSGA1L)
MSGA1T   DC  C' ========='
MSGA1L   EQU *-MSGA1T
MSGA1I   EQU X'A1'
*
MSGA2    DC  AL2(MSGA2L)
MSGA2T   DC  C'   START'
MSGA2L   EQU *-MSGA2T
MSGA2I   EQU X'A2'
*
MSGA3    DC  AL2(MSGA3L)
MSGA3T   DC  C'   -----'
MSGA3L   EQU *-MSGA3T
MSGA3I   EQU X'A3'
*
MSGA4    DC  AL2(MSGA4L)
MSGA4T   DC  C'   You can start the program in JCL batch or start'
         DC  C'ed task.'
MSGA4L   EQU *-MSGA4T
MSGA4I   EQU X'A4'
*
MSGA5    DC  AL2(MSGA5L)
MSGA5T   DC  C'   Sample JCL to start:'
MSGA5L   EQU *-MSGA5T
MSGA5I   EQU X'A5'
*
MSGA6    DC  AL2(MSGA6L)
MSGA6T   DC  C' '
MSGA6L   EQU *-MSGA6T
MSGA6I   EQU X'A6'
*
MSGA7    DC  AL2(MSGA7L)
MSGA7T   DC  C'        //jobcard here'
MSGA7L   EQU *-MSGA7T
MSGA7I   EQU X'A7'
*
MSGA8    DC  AL2(MSGA8L)
MSGA8T   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'
MSGA8L   EQU *-MSGA8T
MSGA8I   EQU X'A8'
*
MSGA9    DC  AL2(MSGA9L)
MSGA9T   DC  C'        //        PARM=''your parms here'''
MSGA9L   EQU *-MSGA9T
MSGA9I   EQU X'A9'
*
MSGAA    DC  AL2(MSGAAL)
MSGAAT   DC  C'        //SYSPRINT DD SYSOUT=*'
MSGAAL   EQU *-MSGAAT
MSGAAI   EQU X'AA'
*
MSGAB    DC  AL2(MSGABL)
MSGABT   DC  C' '
MSGABL   EQU *-MSGABT
MSGABI   EQU X'AB'
*
MSGAC    DC  AL2(MSGACL)
MSGACT   DC  C'   STOP'
MSGACL   EQU *-MSGACT
MSGACI   EQU X'AC'
*
MSGAD    DC  AL2(MSGADL)
MSGADT   DC  C'   ----'
MSGADL   EQU *-MSGADT
MSGADI   EQU X'AD'
*
MSGAE    DC  AL2(MSGAEL)
MSGAET   DC  C'   The program support MVS system STOP command.'
MSGAEL   EQU *-MSGAET
MSGAEI   EQU X'AE'
*
MSGAF    DC  AL2(MSGAFL)
MSGAFT   DC  C'   Example, if the jobname of this program is JOFL'
         DC  C'D00,'
MSGAFL   EQU *-MSGAFT
MSGAFI   EQU X'AF'
*
MSGB0    DC  AL2(MSGB0L)
MSGB0T   DC  C'   Use following MVS system command to stop it:'
MSGB0L   EQU *-MSGB0T
MSGB0I   EQU X'B0'
*
MSGB1    DC  AL2(MSGB1L)
MSGB1T   DC  C'      P JOFLD00'
MSGB1L   EQU *-MSGB1T
MSGB1I   EQU X'B1'
*
MSGB2    DC  AL2(MSGB2L)
MSGB2T   DC  C' '
MSGB2L   EQU *-MSGB2T
MSGB2I   EQU X'B2'
*
MSGB3    DC  AL2(MSGB3L)
MSGB3T   DC  C' Support'
MSGB3L   EQU *-MSGB3T
MSGB3I   EQU X'B3'
*
MSGB4    DC  AL2(MSGB4L)
MSGB4T   DC  C' ======='
MSGB4L   EQU *-MSGB4T
MSGB4I   EQU X'B4'
*
MSGB5    DC  AL2(MSGB5L)
MSGB5T   DC  C' '
MSGB5L   EQU *-MSGB5T
MSGB5I   EQU X'B5'
*
MSGB6    DC  AL2(MSGB6L)
MSGB6T   DC  C'  The program is written in assembler for high per'
         DC  C'formance.'
MSGB6L   EQU *-MSGB6T
MSGB6I   EQU X'B6'
*
MSGB7    DC  AL2(MSGB7L)
MSGB7T   DC  C'  If there is a bug or problem, please contact:'
MSGB7L   EQU *-MSGB7T
MSGB7I   EQU X'B7'
*
MSGB8    DC  AL2(MSGB8L)
MSGB8T   DC  C'       Hunter Zhou'
MSGB8L   EQU *-MSGB8T
MSGB8I   EQU X'B8'
*
MSGB9    DC  AL2(MSGB9L)
MSGB9T   DC  C'       Senior System Engineer'
MSGB9L   EQU *-MSGB9T
MSGB9I   EQU X'B9'
*
MSGBA    DC  AL2(MSGBAL)
MSGBAT   DC  C'       Information Technology'
MSGBAL   EQU *-MSGBAT
MSGBAI   EQU X'BA'
*
MSGBB    DC  AL2(MSGBBL)
MSGBBT   DC  C'       Sobeys Inc. Mississauga,'
MSGBBL   EQU *-MSGBBT
MSGBBI   EQU X'BB'
*
MSGBC    DC  AL2(MSGBCL)
MSGBCT   DC  C'       Ontario L4C 1W2'
MSGBCL   EQU *-MSGBCT
MSGBCI   EQU X'BC'
*
MSGBD    DC  AL2(MSGBDL)
MSGBDT   DC  C'       Canada'
MSGBDL   EQU *-MSGBDT
MSGBDI   EQU X'BD'
*
MSGBE    DC  AL2(MSGBEL)
MSGBET   DC  C'       Email: zhough2000@yahoo.com    '
MSGBEL   EQU *-MSGBET
MSGBEI   EQU X'BE'
*
MSGBF    DC  AL2(MSGBFL)
MSGBFT   DC  C' '
MSGBFL   EQU *-MSGBFT
MSGBFI   EQU X'BF'
*
MSGC0    DC  AL2(MSGC0L)
MSGC0T   DC  C' END OF HELP'
MSGC0L   EQU *-MSGC0T
MSGC0I   EQU X'C0'
*
MSGC1    DC  AL2(MSGC1L)
MSGC1T   DC  C' ==========='
MSGC1L   EQU *-MSGC1T
MSGC1I   EQU X'C1'
*
MSGLAST  EQU  MSGC1I
*
* MESSAGE BUFFER
@MSGINFO DS    A                 MESSAGE INFORMATION ADDRESS
MSGBUF   DS    0CL134
MSGBUFCC DS    CL1
MSGBUFTX DS    CL133              ;SYSPRINT MESSAGE BUFFER
* FLAGS FOR MESSAGE
MSGID    DS    X
MSGIXEND EQU   X'00'              END OF MESSAGE INDEX TABLE TAG

* MESSAGE INFOMRATION PASSED FROM OFFLOAD PROGRAM
* ADDRESS IS IN R9.
         DS    0D
MSGINFO  DSECT
MSGCTR   DS    PL2                ;MESSAGE COUNTER
SPROPNFL DS    XL1            0 FOR NOT OPENED, 1 FOR OPENED
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=133
MSGINFOL EQU   *-MSGINFO

*---------------------------------------------------------------------*
*  END OF PROGRAM                                                     *
*---------------------------------------------------------------------*
         END   OFLHELP
