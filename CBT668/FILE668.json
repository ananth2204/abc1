{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012551000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE668.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE668.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x02'", "DS1TRBAL": "b'\\xd8Z'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xba\\x00\\x0e\\x04\\xbb\\x00\\x08\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00\\x10\\x01\\x15#\\x7f\\x01\\x15#\\x7f\\x11W\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-08-25T00:00:00", "modifydate": "2015-08-25T11:57:10", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  668\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE668\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,296 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/25/15    11:57:10    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x9f\\x01\\x04\\x04\\x9f\\x168\\x005\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-18T00:00:00", "modifydate": "2004-02-18T16:38:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi Sam,\n\nI have created a package OFFLOAD to offload JES spool job output\nto dataset level using SAPI.  It is used to offload the joblog in\nour environment.\n\nThe features are:\n1. The program can offload the spool data in JES OUTPUT queue\n    into system catalogued datasets as following format.\n    hlq.jobname.Ddate.jobid.TtimeIid\n\n2. The spool data selection criteria can be given in EXEC PARM,\n   which includes:\n\n    * one or more output classes, maximum 36 classes\n    * Submit USERID, support wildcards (* and ?)\n    * Jobname, support wildcards (* and ?)\n    * Output destination, support wildcards (* and ?)\n    * Output form, support wildcards (* and ?)\n\n3. Output dataset features:\n\n    * Use VBA to remove trailing spaces, in order to save disk\n      spaces.\n    * Add message JOF700I at the beginning of each offloaded DD,\n      in order to separate the DDs in job log.\n    * Use higher level qualifier at the execution time, more\n      flexible for different usage.\n    * Spool data is offloaded when it's ready to offload in JES\n      spool.\n\n4. Operation features:\n\n    * Provide logs in SYSPRINT DD with more meaningful\n      information.\n    * Support MVS system command STOP to stop the task. When the\n      program is started in JCL batch, it must be stopped by MVS\n      STOP command.\n\nFor example, PARM='H=LG.JOBLOG,C=8,J=@*' means offload all spool\ndata with output class 8 and job name started with @, the output\ndataset HLQ is 'LG.JOBLOG'\n\nBest Regards!\n\nHunter Guanghui Zhou\nSenior Systems Engineer\nInformation Technology, Sobeys Inc.\n6355 Viscount Road Mississagua,\nL4V 1W2, Ontario, Canada\nPhone: 1-(905)-671-5208\nE-mail: guanghui.zhou@sobeys.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x001\\x01\\x06\\x11_\\x01\\x06\\x11_\\t!\\x00\\x1a\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2006-04-25T00:00:00", "modifydate": "2006-04-25T09:21:31", "lines": 26, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "Note from Sam Golob:\n\n   I have made adjustments to the support information in\n   this file, according to the email address and (cell)\n   phone number for Hunter Zhou, which is listed here.\n\nSubject:     Good Luck!\nFrom:        \"Zhou, Hunter\" <hunter.zhou@sobeys.com>\nDate:        Fri, 21 Apr 2006 08:42:57 -0400\nTo:          <zhough2000@yahoo.com>\n\nDear All,\n\nAs you might already know, today is my last day in Sobeys.\n\nI wish you continue to success and enjoy everyday in Sobeys.\nPlease keep in touch, and I can be reached at my personal email\naddress zhough2000@yahoo.com.\n\nThanks again for everything.\n\nYours Sincerely,\n\nHunter Zhou\nEmail: zhough2000@yahoo.com\nCell: (416) 602-9567\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE03": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x15#\\x7f\\x01\\x15#\\x7f\\x11C\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-08-25T00:00:00", "modifydate": "2015-08-25T11:43:50", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  FILE # 668\nFrom:     \"Tobias, Ed\" <tobiaet@dshs.wa.gov>\nDate:     8/24/2015 8:09 PM\nTo:       \"sbgolob@cbttape.org\" <sbgolob@cbttape.org>\n\nHello Sam,\n\nWhen migrating from z/OS v1r13 to v2r1 the subject program\nencounters problem with DYNALLOC output:\n\nIGD17101I DATA SET ????????.????????.DATASET\nNOT DEFINED BECAUSE DUPLICATE NAME EXISTS IN CATALOG\nRETURN CODE IS 8 REASON CODE IS 38 IGG0CLEH\n\nThe problem will only surface if programs are recompiled at v2r1.\nThe load module from v1r13 will still work on v2r1 until\nrecompiled.\n\nAs a temporary fix, the program code can be changed as follows:\n\n*        MVI    SSS2VER,SSS2CVER   Set version \u00df------ now a comment\n         MVI    SSS2VER,SSS2VCTP   Set version, revert back to v2\n*                                  \u00df---- now in effect to fix the bug.\n\nThis instruction is unique in the program and can easily be\nlocated and fixed.\n\nBest Regards,\nEd Tobias\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE668": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00\\x05\\x01\\x15#\\x7f\\x01\\x15#\\x7f\\x11W\\x00F\\x00F\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-08-25T00:00:00", "modifydate": "2015-08-25T11:57:05", "lines": 70, "newlines": 70, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 668 is from Hunter Guanghui Zhou, and contains a program  *   FILE 668\n//*           to offload JES2 spool to separate datasets on your    *   FILE 668\n//*           system.                                               *   FILE 668\n//*                                                                 *   FILE 668\n//*      Program    : OFFLOAD                                       *   FILE 668\n//*      Description: JES Spool Offload Program.                    *   FILE 668\n//*      Purpose    : Offload JES Spool Data to cataloged           *   FILE 668\n//*                   dataset.                                      *   FILE 668\n//*      Design     : Hunter Guanghui Zhou                          *   FILE 668\n//*      Support    : Phone: 1-(416)-602-9567                       *   FILE 668\n//*                   E-mail: zhough2000@yahoo.com                  *   FILE 668\n//*                                                                 *   FILE 668\n//*      Last Update: February, 2004                                *   FILE 668\n//*                                                                 *   FILE 668\n//*      I have created a package OFFLOAD to offload JES spool      *   FILE 668\n//*      job output to dataset level using SAPI.  It is used to     *   FILE 668\n//*      offload the joblog in our environment.                     *   FILE 668\n//*                                                                 *   FILE 668\n//*      The features are:                                          *   FILE 668\n//*      1. The program can offload the spool data in JES OUTPUT    *   FILE 668\n//*          queue into system catalogued datasets as following     *   FILE 668\n//*          format:  hlq.jobname.Ddate.jobid.TtimeIid              *   FILE 668\n//*                                                                 *   FILE 668\n//*      2. The spool data selection criteria can be given in       *   FILE 668\n//*         EXEC PARM, which includes:                              *   FILE 668\n//*                                                                 *   FILE 668\n//*          * one or more output classes, maximum 36 classes       *   FILE 668\n//*          * Submit USERID, support wildcards (* and ?)           *   FILE 668\n//*          * Jobname, support wildcards (* and ?)                 *   FILE 668\n//*          * Output destination, support wildcards (* and ?)      *   FILE 668\n//*          * Output form, support wildcards (* and ?)             *   FILE 668\n//*                                                                 *   FILE 668\n//*      3. Output dataset features:                                *   FILE 668\n//*                                                                 *   FILE 668\n//*          * Use VBA to remove trailing spaces, in order to       *   FILE 668\n//*            save disk space.                                     *   FILE 668\n//*          * Add message JOF700I at the beginning of each         *   FILE 668\n//*            offloaded DD, in order to separate the DDs in job    *   FILE 668\n//*            log.                                                 *   FILE 668\n//*          * Use higher level qualifier at the execution time,    *   FILE 668\n//*            more flexible for different usage.                   *   FILE 668\n//*          * Spool data is offloaded when it's ready to           *   FILE 668\n//*            offload in JES spool.                                *   FILE 668\n//*                                                                 *   FILE 668\n//*      4. Operation features:                                     *   FILE 668\n//*                                                                 *   FILE 668\n//*          * Provide logs in SYSPRINT DD with more meaningful     *   FILE 668\n//*            information.                                         *   FILE 668\n//*          * Support MVS system command STOP to stop the task.    *   FILE 668\n//*            When the program is started in JCL batch, it must    *   FILE 668\n//*            be stopped by MVS STOP command.                      *   FILE 668\n//*                                                                 *   FILE 668\n//*      For example, PARM='H=LG.JOBLOG,C=8,J=@*' means offload     *   FILE 668\n//*      all spool data with output class 8 and job name started    *   FILE 668\n//*      with @, the output dataset HLQ is 'LG.JOBLOG'              *   FILE 668\n//*                                                                 *   FILE 668\n//* >>>> Note:  In z/OS 2.1, the macro IAZSSS2 has changed, in that *   FILE 668\n//*             its \"version number default\" is now \"3\" instead     *   FILE 668\n//*             of \"2\".  This is field SSS2CVER, which now defaults *   FILE 668\n//*             to \"3\".  The local fix is to change SSS2CVER in     *   FILE 668\n//*             the OFFLOAD source to SSS2VCTP, which is always     *   FILE 668\n//*             equal to \"2\", and we no longer use the default      *   FILE 668\n//*             version number.  Problem symptom was error message: *   FILE 668\n//*                                                                 *   FILE 668\n//*      IGD17101I DATA SET ????????.????????.DATASET               *   FILE 668\n//*      NOT DEFINED BECAUSE DUPLICATE NAME EXISTS IN CATALOG       *   FILE 668\n//*      RETURN CODE IS 8 REASON CODE IS 38 IGG0CLEH                *   FILE 668\n//*                                                                 *   FILE 668\n//*      (Courtesy of Ed Tobias:  tobiaet@dshs.wa.gov  )            *   FILE 668\n//*                                                                 *   FILE 668\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@INSTALL": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x04\\x04\\x9f\\x01\\x06\\x11_\\x103\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-18T00:00:00", "modifydate": "2006-04-25T10:33:26", "lines": 30, "newlines": 30, "modlines": 0, "user": "ZHOU"}, "text": "*PROGRAM: OFFLOAD\n*PURPOSE: OFFLOAD JES 2 SPOOL DATASETS INTO MVS DATASET.\n*AUTHOR : Hunter Guanghui Zhou\n*         Phone: 1-(416)-602-9567\n*         E-mail: zhough2000@yahoo.com\n*LAST UPDATE: FEBRUARY, 2004\n*\n* DESCRIPTION\n* ===========\n*   GET THE GIVEN DATASET, SELECTED BY CRITERIA SET BY OPTION,\n*   SAVE SAVE EACH DATASET INTO A MVS DATASET WITH ONE RECORD\n*   ADDED AT THE BEGINNING, WHICH IDENTIFY THE CHARACTERISTICS\n*   OF THE DATASET.\n*\n* INSTALL THE PROGRAM\n* ===================\n*   THE LINK PARM MUST USE AC(1) TO USE AUTHORIZED FUNCTIONS.\n*   THE LINKLIB (SYSLMOD DD) MUST BE IN APF AUTHORIZED LIST OF\n*   SYS1.PARMLIB(PROGxx).\n*\n* //COMPILE EXEC ASMACL,PARM.L='AC(1)'\n* //C.SYSIN   DD DISP=SHR,\n* //     DSN=SP2487.ASM.SOURCE(OFFLOAD)         <== This Source Member\n* //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB\n* //          DD DISP=SHR,DSN=SYS1.MODGEN\n* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.TEST.LINKLIB <== Must be APF LIBRARY\n* //L.SYSIN   DD *\n*  NAME OFFLOAD(R)\n* /*\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@USERGDE": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x10\\x01\\x04\\x04\\x9f\\x01\\x06\\x11_\\x105\\x01\\x05\\x01\\x08\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-18T00:00:00", "modifydate": "2006-04-25T10:35:10", "lines": 261, "newlines": 264, "modlines": 0, "user": "ZHOU"}, "text": "*PROGRAM: OFFLOAD\n*PURPOSE: OFFLOAD JES 2 SPOOL DATASETS INTO MVS DATASET.\n*AUTHOR : Hunter Guanghui Zhou\n*         Phone: 1-(416)-602-9567\n*         E-mail: zhough2000@yahoo.com\n*LAST UPDATE: FEBRUARY, 2004\n*\n* DESCRIPTION\n* ===========\n*   GET THE GIVEN DATASET, SELECTED BY CRITERIA SET BY OPTION,\n*   SAVE SAVE EACH DATASET INTO A MVS DATASET WITH ONE RECORD\n*   ADDED AT THE BEGINNING, WHICH IDENTIFY THE CHARACTERISTICS\n*   OF THE DATASET.\n*\n* INSTALL THE PROGRAM\n* ===================\n*   THE LINK PARM MUST USE AC(1) TO USE AUTHORIZED FUNCTIONS.\n*   THE LINKLIB (SYSLMOD DD) MUST BE IN APF AUTHORIZED LIST OF\n*   SYS1.PARMLIB(PROGxx).\n*\n* //COMPILE EXEC ASMACL,PARM.L='AC(1)'\n* //C.SYSIN   DD DISP=SHR,\n* //     DSN=SP2487.ASM.SOURCE(OFFLOAD)         <== This Source Member\n* //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB\n* //          DD DISP=SHR,DSN=SYS1.MODGEN\n* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.TEST.LINKLIB <== Must be APF LIBRARY\n* //L.SYSIN   DD *\n*  NAME OFFLOAD(R)\n* /*\n*\n* PROGRAM LOGIC\n* =============\n*   1. Initialize the program\n*      a. Initialize flags, open SYSPRINT DD\n*      b. Initialize SSOB and SSS2\n*      c. Read this task information\n*      d. Show the welcome information\n*\n*   2. Parse the EXEC PARM\n*      Read and parse all the parameters given in EXEC PARM.\n*      If there is a error (syntax error), stop the program with RC=8\n*      If there is no EXEC PARM or PARM=HELP, show the help message,\n*         and stop the program.\n*      If the parm is valid, continue the program.\n*\n*   4. Run the main program logic\n*\n*     a. reset the status\n*     b. call ASKJES to get dataset from JES spool.\n*     c. test the return codes\n*        If there is no dataset, call WAITWORK to wait work.\n*     d. If there is a dataset, process it.\n*        The process of the job data as follows:\n*       .The program will have scan all the datasets (DD) in\n*        current JOB, get  the total records and maximum record\n*        length, and calculate the track size to be allocated\n*        for output dataset.\n*\n*       . The program will then allocate the output dataset.\n*       . The program will read all the datasets in this JOB output.\n*       . And put the JOF700I record at the beginning of each data\n*         set.\n*      e. When current JOB output is processed, jump to step b.\n*      f. If the wait work returns,\n*         If the returned event is SAPI, then jump to step b to\n*         call ASKJES.\n*         If the returned even is STOP command, then exit the main\n*         program logic.\n*   5. If the program is required to stop, show the end message,\n*      and unallocate storage, close SYSPRINT, and stop the program.\n***********************************************************************\n*\n*\n*                    PROGRAM HELP MESSAGE\n*                    ====================\n*\n* Program    : OFFLOAD\n* Description: JES Spool Offload Program.\n* Purpose    : Offload JES Spool Data to cataloged dataset.\n* Design     : Hunter Guanghui Zhou\n* Support    : Phone: 1-(416)-602-9567\n*              E-mail: zhough2000@yahoo.com\n* Last Update: February, 2004\n*\n* Introduction\n* ============\n*\n* This program will offload the JES spool datasets into system\n* datasets. The program is designed based on following rules:\n*\n* 1. Each spool entry will be saved into one cataloged system dataset.\n*    Only spool data in OUTPUT queue will be processed.\n* 2. The system cataloged dataset name convention are:\n*    hlq.jobname.Ddate.jobid.TtimeIid\n*\n*   Here:\n*   hlq      The high level qualifier of the offloaded spool dataset.\n*            This hlq must given as 'H=hlq' in EXEC PARM.\n*   jobname  The job name of the spool dataset.\n*   date     The date when the spool dataset is created.\n*   jobid    The job id of the spool dataset.\n*   time     The time when the spool dataset is created.\n*   id       The sequence number automatic generated by program.\n*            When there are multiple spool datasets generated by\n*            JES batches, the id will be added from 01 to 99.\n*\n* 3. All spool datasets in a single spool entry will be saved\n*    into single dataset.\n*    For example, JCL batch logs normally contain following 3 DDNAME\n*        JESMSGLG, JESJCL, JESYSMSG\n*    The program will merge these DDNAMEs in joblog into a cataloged\n*    system dataset.\n*\n* 4. There will be a extra record at the beginning of each DDNAME.\n*    To distinguish each DDNAMEs, the program add one record at\n*    the beginning of the data. Here is the format of this record\n*\n* ****JOF700I JOBNAME(jobname ),JOBID(jobid   ),DDNAME(ddname  )****\n*        RECORDS(#records)**\n*\n*    Here the jobname, jobid, ddname and number of records will be\n*    updatedd according to related information of the spool dataset.\n*\n* 5. If there is any problem while processing one spool data,\n*    the spool data will be in SYSTEM hold. You should refer\n*    the program logs to get more information.\n*\n*\n* Explanation of EXEC PARM\n* ========================\n*\n*   The spool data can be selected by criteria given in EXEC PARM.\n* All options in EXEC PARM can be in any order.\n* The syntax of option are:\n*      key1=value1,key2=value2\n* Here key is single letter keyword, and value is the actual criteria\n* for that key.\n* If you specify multiple criteria, the selected spool data will meet\n* all criteria.\n*\n*\n* 1. H=higher level qualifier\n*    This is mandatory option to specify the higher level qualifier\n*    to be used to create cataloged system datasets, maximum in\n*    8 characters.\n*    Example:\n*        H=LOGS                 Use LOGS as HLQ (LOGS.jobname.Ddat\n*     Use LOGS as higher level qualifier, the datasets will be:\n*        LOGS.jobname.Ddate.jobid.TtimeIid\n*\n* 2. C=classes\n*    This specify the SYSOUT class selection criteria. You can\n*    specify up to 36 classes in this option. The classes ranges\n*    from 0-9, and A-Z.\n*    Example:\n*        C=A                    Just select SYSOUT class A\n*        C=0123456789           Select SYSOUT class in numbers\n*        C=ASHJ                 Select SYSOUT class A,S,H and J\n*\n* 3. D=dest\n*    This specify the SYSOUT DEST selection criteria, maximum\n*    8 characters.\n*    If this is not specified, the DEST=LOCAL will be used.\n*    This option support wildcards. use * for multiple characters\n*    and ? for single character.\n*    Example:\n*        D=OFFLOAD              Just select SYSOUT DEST=OFFLOAD\n*\n* 4. F=form\n*    This specify the SYSOUT FORM selection criteria, maximum\n*    8 characters.\n*    If this is not specified, any FORM will be selected.\n*    This option support wildcards. use * for multiple characters\n*    and ? for single character.\n*    Example:\n*        F=OFFLOAD              Just select SYSOUT FORM=OFFLOAD\n*\n* 5. J=jobname\n*    This specify the jobname as selection criteria, maximum\n*    8 characters.\n*    If this is not specified, any jobname will be selected.\n*    This option support wildcards. use * for multiple characters\n*    and ? for single character.\n*    Example:\n*        J=EDI*                 Select jobname starts with EDI\n*\n* 6. HELP or no EXEC PARM at all.\n*    When you specify HELP or do not specify EXEC PARM, this help\n*    message will be shown.\n*\n*    Example:\n*     1).//OFFLOAD EXEC PGM=OFFLOAD\n*\n*     2).//OFFLOAD EXEC PGM=OFFLOAD,PARM=HELP\n*\n*\n* EXEC PARM Examples\n* ------------------\n*   1). Select spool data with SYSOUT class in numbers\n*       and use 'LOGS' as higher level qualifier.\n*\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM='H=LOGS,C=0123456789'\n*        //SYSPRINT DD SYSOUT=*\n*\n*   2). Select spool data with USERID is SP2487, jobname starts\n*       with SP2487, and use 'SP2487' as higher level qualifier.\n*\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM='H=SP2487,U=SP2487,J=SP2487*'\n*        //SYSPRINT DD SYSOUT=*\n*\n*   3). Select spool data with USERID is SP2487, jobname starts\n*       with SP2487, and use 'SP2487' as higher level qualifier.\n*\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM=('H=LOGS,U=OP9999*',\n*        //        'C=159CX,D=OFFLOAD')\n*        //SYSPRINT DD SYSOUT=*\n*\n*\n* Program Logs in SYSPRINT\n* ========================\n*   The processing logs can be shown in SYSPRINT DD. If SYSPRINT DD\n*   is not presented in JCL, there is no logs generated.\n*\n*   The requirements of SYSPRINT:\n*      LRECL=133,RECFM=FBA\n*\n*   You may just specify following statement in JCL:\n*        //SYSPRINT DD SYSOUT=*\n*\n*\n* OPERATION\n* =========\n*   START\n*   -----\n*   You can start the program in JCL batch or started task.\n*   Sample JCL to start:\n*\n*        //jobcard here\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM='your parms here'\n*        //SYSPRINT DD SYSOUT=*\n*\n*   STOP\n*   ----\n*   The program support MVS system STOP command.\n*   Example, if the jobname of this program is JOFLD00,\n*   Use following MVS system command to stop it:\n*      P JOFLD00\n*\n* Support\n* =======\n*\n*  The program is written in assembler for high performance.\n*  If there is a bug or problem, please contact:\n*       Hunter Guanghui Zhou\n*       Phone: 1-(416)-602-9567\n*       E-mail: zhough2000@yahoo.com\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPILE": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00)\\x01\\x04\\x04\\x9f\\x01\\x04\\x04\\x9f\\x10(\\x00\\n\\x00\\t\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-18T00:00:00", "modifydate": "2004-02-18T10:28:29", "lines": 10, "newlines": 9, "modlines": 0, "user": "ZHOU"}, "text": "//insert your jobcard here...                 <== your jobcard\n//COMPILE EXEC ASMACL,PARM.L='AC(1)'\n//C.SYSIN   DD DISP=SHR,\n//  DSN=SYS1.PACKAGE.OFFLOAD.INSTALL(OFFLOAD) <== The Source Member\n//C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//L.SYSLMOD DD DISP=SHR,DSN=SYS1.TEST.LINKLIB <== Must be APF LIBRARY\n//L.SYSIN   DD *\n  NAME OFFLOAD(R)\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OFFLOAD": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x013\\x00D\\x01\\x04\\x03o\\x01\\x15#\\x7f\\x11G\\x0e\\xdd\\r8\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.51", "flags": 0, "createdate": "2004-02-05T00:00:00", "modifydate": "2015-08-25T11:47:44", "lines": 3805, "newlines": 3384, "modlines": 0, "user": "ZHOU"}, "text": "*PROGRAM: OFFLOAD\n*PURPOSE: OFFLOAD JES 2 SPOOL DATASETS INTO MVS DATASET.\n*AUTHOR : Hunter Guanghui Zhou\n*         Phone: 1-(416)-602-9567\n*         E-mail: zhough2000@yahoo.com\n*LAST UPDATE: FEBRUARY, 2004\n*\n* DESCRIPTION\n* ===========\n*   GET THE GIVEN DATASET, SELECTED BY CRITERIA SET BY OPTION,\n*   SAVE SAVE EACH DATASET INTO A MVS DATASET WITH ONE RECORD\n*   ADDED AT THE BEGINNING, WHICH IDENTIFY THE CHARACTERISTICS\n*   OF THE DATASET.\n*\n* INSTALL THE PROGRAM\n* ===================\n*   THE LINK PARM MUST USE AC(1) TO USE AUTHORIZED FUNCTIONS.\n*   THE LINKLIB (SYSLMOD DD) MUST BE IN APF AUTHORIZED LIST OF\n*   SYS1.PARMLIB(PROGxx).\n*\n* //COMPILE EXEC ASMACL,PARM.L='AC(1)'\n* //C.SYSIN   DD DISP=SHR,\n* //     DSN=SP2487.ASM.SOURCE(OFFLOAD)         <== This Source Member\n* //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB\n* //          DD DISP=SHR,DSN=SYS1.MODGEN\n* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.TEST.LINKLIB <== Must be APF LIBRARY\n* //L.SYSIN   DD *\n*  NAME OFFLOAD(R)\n* /*\n*\n* PROGRAM LOGIC\n* =============\n*   1. Initialize the program\n*      a. Initialize flags, open SYSPRINT DD\n*      b. Initialize SSOB and SSS2\n*      c. Read this task information\n*      d. Show the welcome information\n*\n*   2. Parse the EXEC PARM\n*      Read and parse all the parameters given in EXEC PARM.\n*      If there is a error (syntax error), stop the program with RC=8\n*      If there is no EXEC PARM or PARM=HELP, show the help message,\n*         and stop the program.\n*      If the parm is valid, continue the program.\n*\n*   4. Run the main program logic\n*\n*     a. reset the status\n*     b. call ASKJES to get dataset from JES spool.\n*     c. test the return codes\n*        If there is no dataset, call WAITWORK to wait work.\n*     d. If there is a dataset, process it.\n*        The process of the job data as follows:\n*       .The program will have scan all the datasets (DD) in\n*        current JOB, get  the total records and maximum record\n*        length, and calculate the track size to be allocated\n*        for output dataset.\n*\n*       . The program will then allocate the output dataset.\n*       . The program will read all the datasets in this JOB output.\n*       . And put the JOF700I record at the beginning of each data\n*         set.\n*      e. When current JOB output is processed, jump to step b.\n*      f. If the wait work returns,\n*         If the returned event is SAPI, then jump to step b to\n*         call ASKJES.\n*         If the returned even is STOP command, then exit the main\n*         program logic.\n*   5. If the program is required to stop, show the end message,\n*      and unallocate storage, close SYSPRINT, and stop the program.\n***********************************************************************\n*\n*\n*                    PROGRAM HELP MESSAGE\n*                    ====================\n*\n* Program    : OFFLOAD\n* Description: JES Spool Offload Program.\n* Purpose    : Offload JES Spool Data to cataloged dataset.\n* Design     : Hunter Guanghui Zhou\n* Support    : Phone: 1-(416)-602-9567\n*              E-mail: zhough2000@yahoo.com\n* Last Update: February, 2004\n*\n* Introduction\n* ============\n*\n* This program will offload the JES spool datasets into system\n* datasets. The program is designed based on following rules:\n*\n* 1. Each spool entry will be saved into one cataloged system dataset.\n*    Only spool data in OUTPUT queue will be processed.\n* 2. The system cataloged dataset name convention are:\n*    hlq.jobname.Ddate.jobid.TtimeIid\n*\n*   Here:\n*   hlq      The high level qualifier of the offloaded spool dataset.\n*            This hlq must given as 'H=hlq' in EXEC PARM.\n*   jobname  The job name of the spool dataset.\n*   date     The date when the spool dataset is created.\n*   jobid    The job id of the spool dataset.\n*   time     The time when the spool dataset is created.\n*   id       The sequence number automatic generated by program.\n*            When there are multiple spool datasets generated by\n*            JES batches, the id will be added from 01 to 99.\n*\n* 3. All spool datasets in a single spool entry will be saved\n*    into single dataset.\n*    For example, JCL batch logs normally contain following 3 DDNAME\n*        JESMSGLG, JESJCL, JESYSMSG\n*    The program will merge these DDNAMEs in joblog into a cataloged\n*    system dataset.\n*\n* 4. There will be a extra record at the beginning of each DDNAME.\n*    To distinguish each DDNAMEs, the program add one record at\n*    the beginning of the data. Here is the format of this record\n*\n* ****JOF700I JOBNAME(jobname ),JOBID(jobid   ),DDNAME(ddname  )****\n*        RECORDS(#records)**\n*\n*    Here the jobname, jobid, ddname and number of records will be\n*    updatedd according to related information of the spool dataset.\n*\n* 5. If there is any problem while processing one spool data,\n*    the spool data will be in SYSTEM hold. You should refer\n*    the program logs to get more information.\n*\n*\n* Explanation of EXEC PARM\n* ========================\n*\n*   The spool data can be selected by criteria given in EXEC PARM.\n* All options in EXEC PARM can be in any order.\n* The syntax of option are:\n*      key1=value1,key2=value2\n* Here key is single letter keyword, and value is the actual criteria\n* for that key.\n* If you specify multiple criteria, the selected spool data will meet\n* all criteria.\n*\n*\n* 1. H=higher level qualifier\n*    This is mandatory option to specify the higher level qualifier\n*    to be used to create cataloged system datasets, maximum in\n*    13 characters.\n*    Example:\n*        H=LOGS                 Use LOGS as HLQ (LOGS.jobname.Ddat\n*     Use LOGS as higher level qualifier, the datasets will be:\n*        LOGS.jobname.Ddate.jobid.TtimeIid\n*\n* 2. C=classes\n*    This specify the SYSOUT class selection criteria. You can\n*    specify up to 36 classes in this option. The classes ranges\n*    from 0-9, and A-Z.\n*    Example:\n*        C=A                    Just select SYSOUT class A\n*        C=0123456789           Select SYSOUT class in numbers\n*        C=ASHJ                 Select SYSOUT class A,S,H and J\n*\n* 3. D=dest\n*    This specify the SYSOUT DEST selection criteria, maximum\n*    8 characters.\n*    If this is not specified, the DEST=LOCAL will be used.\n*    This option support wildcards. use * for multiple characters\n*    and ? for single character.\n*    Example:\n*        D=OFFLOAD              Just select SYSOUT DEST=OFFLOAD\n*\n* 4. F=form\n*    This specify the SYSOUT FORM selection criteria, maximum\n*    8 characters.\n*    If this is not specified, any FORM will be selected.\n*    This option support wildcards. use * for multiple characters\n*    and ? for single character.\n*    Example:\n*        F=OFFLOAD              Just select SYSOUT FORM=OFFLOAD\n*\n* 5. J=jobname\n*    This specify the jobname as selection criteria, maximum\n*    8 characters.\n*    If this is not specified, any jobname will be selected.\n*    This option support wildcards. use * for multiple characters\n*    and ? for single character.\n*    Example:\n*        J=EDI*                 Select jobname starts with EDI\n*\n* 6. HELP or no EXEC PARM at all.\n*    When you specify HELP or do not specify EXEC PARM, this help\n*    message will be shown.\n*\n*    Example:\n*     1).//OFFLOAD EXEC PGM=OFFLOAD\n*\n*     2).//OFFLOAD EXEC PGM=OFFLOAD,PARM=HELP\n*\n*\n* EXEC PARM Examples\n* ------------------\n*   1). Select spool data with SYSOUT class in numbers\n*       and use 'LOGS' as higher level qualifier.\n*\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM='H=LOGS,C=0123456789'\n*        //SYSPRINT DD SYSOUT=*\n*\n*   2). Select spool data with USERID is SP2487, jobname starts\n*       with SP2487, and use 'SP2487' as higher level qualifier.\n*\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM='H=SP2487,U=SP2487,J=SP2487*'\n*        //SYSPRINT DD SYSOUT=*\n*\n*   3). Select spool data with USERID is SP2487, jobname starts\n*       with SP2487, and use 'SP2487' as higher level qualifier.\n*\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM=('H=LOGS,U=OP9999*',\n*        //        'C=159CX,D=OFFLOAD')\n*        //SYSPRINT DD SYSOUT=*\n*\n*\n* Program Logs in SYSPRINT\n* ========================\n*   The processing logs can be shown in SYSPRINT DD. If SYSPRINT DD\n*   is not presented in JCL, there is no logs generated.\n*\n*   The requirements of SYSPRINT:\n*      LRECL=133,RECFM=FBA\n*\n*   You may just specify following statement in JCL:\n*        //SYSPRINT DD SYSOUT=*\n*\n*\n* OPERATION\n* =========\n*   START\n*   -----\n*   You can start the program in JCL batch or started task.\n*   Sample JCL to start:\n*\n*        //jobcard here\n*        //OFFLOAD EXEC PGM=OFFLOAD,\n*        //        PARM='your parms here'\n*        //SYSPRINT DD SYSOUT=*\n*\n*   STOP\n*   ----\n*   The program support MVS system STOP command.\n*   Example, if the jobname of this program is JOFLD00,\n*   Use following MVS system command to stop it:\n*      P JOFLD00\n*\n* Support\n* =======\n*\n*  The program is written in assembler for high performance.\n*  If there is a bug or problem, please contact:\n*       Hunter Guanghui Zhou\n*       Phone: 1-(416)-602-9567\n*       E-mail: zhough2000@yahoo.com\n*\n* END OF HELP\n* ===========\n*\n***********************************************************************\n* MAIN PROGRAM LOGIC\n***********************************************************************\nOFFLOAD  TITLE 'OFFLOAD JES SPOOL LOG USING SAPI'\nOFFLOAD  CSECT\nOFFLOAD  AMODE 31\nOFFLOAD  RMODE 24\n         YREGS\n         USING OFFLOAD,R15        Establish temporary base register\n         B     OFLD0000           Branch to bypass data constants\n         DC    CL23'PROGRAM NAME(OFFLOAD)'       Module identifier\n         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'\n         DC    CL48'SAPI EXTERNAL WRITER FOR JES2 SPOOL OUTPUT'\n         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '\nBASE2REG DC    A(OFFLOAD+4096)    Second base register\nBASE3REG DC    A(OFFLOAD+8192)    Second base register\nOFLD0000 DS    0H\n         STM   R14,R12,12(R13)    Save caller's registers\n         L     R11,BASE2REG       second base register\n         L     R10,BASE3REG       third  base register\n         LR    R12,R15            Change base registers\n         DROP  R15                Tell assembler\n         USING OFFLOAD,R12,R11,R10\n* START THE PROGRAM LOGIC\n         LR    R7,R1              ;COPY THE CURRENT PARM ADDRESS\n         LR    R8,R13             ;COPY THE CALLER'S SAVE AREA ADDR\n* DYNAMICALLY ALLOCATE STORAGE FOR DATA AREAS\n         GETMAIN RU,LV=DSALEN,LOC=BELOW ;OBTAIN STORAGE FOR DATA AREAS\n         LR    R13,R1             ;LOAD STORAGE ADDRESS INTO R13\n         USING DSA,R13            ;USING R13 AS DSA ADDRESSING REGS.\n         ST    R8,SAVEAREA+4      ;SET OUR BACKWARD LINKAGE\n         ST    R13,8(,R8)         ;SET MY SAVE AREA AT CALLER'S AREA\n         ST    R7,PARMADR         ;SAVE THE EXEC PARM ADDRESS\n* INITIALIZE BUFFERS\n         BAL   R2,INITIAL         ;INITIALIZE BUFFERS\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n* READ PARAMETERS\n         BAL   R2,READPARM\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n         CLI   ISSTOP,YES         ;REQUESTED TO STOP?\n         BE    RETURN\n* MAIN FUNCTION\n         BAL   R2,MAINPRG         ;\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n* RETURN LINKAGE\nRETURN   EQU   *\n* CLEAN THE PROGRAM BEFORE TERMINATE\n         BAL   R2,CLEANUP         ;\n         XR    R9,R9              ;CLEAR R9\n         IC    R9,RETCODE         ;LOAD RETURN CODE TO R9\n         L     R8,SAVEAREA+4      ;LOAD THE CALLER'S SAVE AREA\n         FREEMAIN RU,LV=DSALEN,A=(R13)  ; FREE ALLOCATED STOR\n         LR    R13,R8             ;RESTORE CALL'S SAVE AREA\n         LR    R15,R9             ;SET RETURN CODE TO R15\n         RETURN (14,12),RC=(15)   ;RESTORE CALLER'S REGS AND RETURN\n**********************************************************************\n\n**********************************************************************\n*---------------------------------------------------------------------*\n* ROUTINE: INITIAL\n* DESCRIPTION: INITIALIZE ALL BUFFERS\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN :\n*---------------------------------------------------------------------*\nINITIAL  DS    0H\n* INITIAL VALUES OF FLAGS\n         MVI   RETCODE,X'00'        RESET RETURN CODE\n         MVI   ISSTOP,NO            SET NO STOP ON PROGRAM\n*\n         MVI   REQSTAT,RETNWK       THERE IS NO DATASET FROM JES\n         MVI   PSPSTAGE,PSPSINIT    SET SCAN STAG FOR SPOOL DATA\n         MVI   OJLMSG,C' '          CLEAR THE MESSAGE WITH SPACES\n         MVC   OJLMSG+1(132),OJLMSG CLEAR THE MESSAGE WITH SPACES\n         MVC   OJLMID(7),=CL7'JOF020I' SET THE MESSAGE ID\n         MVC   OJLCMD(7),=CL7'RECEIVE' SET THE COMMAND\n         XC    TIMEFM1,TIMEFM1      CLEAR TIME/DATE SOURCE\n         XC    TOTLOGS,TOTLOGS      RESET TOTAL LOGS\n         XC    OUTRECRS,OUTRECRS    CLEAR 2 BYTES OF VBA RDW\n         MVI   SELSTART,C' '        CLEAR ALL SELECTION AREA\n         MVC   SELSTART+1(SELSTLEN),SELSTART\n* RESET SAPI SELECTION CRITERIA\n         MVI   ISCLASS,NO         SET CRITERIAS DEFAULT TO NO\n         MVI   ISDEST,NO\n         MVI   ISFORM,NO\n         MVI   ISHLQ,NO\n         MVI   ISJOBNM,NO\n         MVI   ISUSRID,NO\n         MVI   ISSELGV,NO\n* CLEAR LOG BUFFER\n         ZAP   MSGCTR,P0            RESET THE MSG LINE COUNTER\n         MVI   MSGBUFTX,C' '\n         MVC   MSGBUFTX+1(131),MSGBUFTX\n* INITIAL INDAB\n         LA    R1,ODSNINFO\n         ST    R1,INDAB+12\n* OPEN SYSPRINT DCB\n         MVI   SPROPNFL,NO          SET SYSPRINT OPEN FLAG TO NO\n         OPEN  (SYSPRINT,(OUTPUT))\n         LTR   R15,R15              OPEN SUCCESS?\n         BNZ   INI1000              NO, SKIP THE SYSPRINT\n         MVI   SPROPNFL,YES         SET OPEN FLAG TO YES\nINI1000  EQU   *\n         BAL   R1,GJOBINFO          GET THE CURRENT RUNNING JOBNAME\n* INITIALIZE SSOB & SSS2\n         BAL   R3,INISSOB\n* INIT ECBS\n         BAL   R3,INIECBS\n* SHOW WELCOME MESSAGES\n         MVC   MSGBUFTX(45),INIMSG01\n         BAL   R1,LOG\n         MVC   MSGBUFTX(50),INIMSG02\n         BAL   R1,LOG\n         MVC   MSGBUFTX(34),INIMSG03\n         BAL   R1,LOG\n         MVC   MSGBUFTX(45),INIMSG04\n         BAL   R1,LOG\n         MVC   MSGBUFTX(35),INIMSG05\n         BAL   R1,LOG\n         MVC   MSGBUFTX(36),=CL36'JOF007I Command to stop this task: P'\n         MVC   MSGBUFTX+37(8),JOBNAME\n         BAL   R1,LOG\n         MVC   MSGBUFTX(86),INIMSG06\n         BAL   R1,LOG\n         BAL   R1,SJOBINFO          SHOW THE JOBNAME INFORMATION\n         MVC   MSGBUFTX(86),INIMSG06\n         BAL   R1,LOG\n* RETURN CONTROL\n         BR    R2\n**********************************************************************\n\n**********************************************************************\n* CLEAN THE PROGRAM BEFORE TERMINATE THE PROGRAM.\n**********************************************************************\nCLEANUP  DS    0H\n         MVC   MSGBUFTX(80),INIMSG06\n         BAL   R1,LOG\n         MVC   MSGBUFTX(29),=CL29'JOF902I Total processed logs:'\n         L     R1,TOTLOGS          LOAD CURRENT LINE COUNT\n         BAL   R15,CVTDEC\n         MVC   MSGBUFTX+30(8),0(R1)\n         MVI   MSGBUFTX+38,C'.'\n         BAL   R1,LOG\n         MVC   MSGBUFTX(27),=CL27'JOF903I The return code is'\n         SR    R1,R1\n         ICM   R1,B'0001',RETCODE  ;LOAD THE RETURN CODE TO R9\n         BAL   R15,CVTDEC\n         MVC   MSGBUFTX+27(2),6(R1)\n         MVI   MSGBUFTX+29,C'.'\n         BAL   R1,LOG\n* SHOW JOB FINISHED MESSAGE\n         CLI   RETCODE,X'00'\n         BNE   CLN1000\n         MVC   MSGBUFTX(36),=CL36'JOF900I The JES spool offload progra'\n         MVC   MSGBUFTX+36(23),=CL23'm is finished normally.'\n         B     CLN1500\nCLN1000  EQU    *\n         MVC   MSGBUFTX(36),=CL36'JOF900I The JES spool offload progra'\n         MVC   MSGBUFTX+36(23),=CL23'm is finished abnormally.'\nCLN1500  EQU    *\n         BAL   R1,LOG\n* CLOSE SYSPRINT DCB IF IT'S OPENED.\n         CLI   SPROPNFL,YES\n         BNE   CLN5000\n         CLOSE (SYSPRINT)\n         MVI   SPROPNFL,NO          SET SYSPRINT OPEN FLAG TO NO\nCLN5000  EQU    *\n         BR    R2\n**********************************************************************\n*-------------------------------------------------------------*\n*        Initialize the SSOB AND SSS2                         *\n*-------------------------------------------------------------*\n**********************************************************************\nINISSOB  DS     0H\n* CLEAR THE SSOB AND SSS2 AREA WITH BINARY ZEROS.\n         LA     R0,BUFSSOB     LOAD THE ADDRESS OF STORAGE\n         LA     R1,BUFSSLEN    LOAD THE LENGTH OF THE STORAGE\n         SR     R15,R15        CLEAR LENGTH AND PAD FIELD IN R15\n         MVCL   R0,R14         CLEAR STORAGE OF SSOB AND SSS2\n* PREPARE SSOB PTR FOR IEFSSREQ\n         LA     R9,BUFSSOB     Point at actual SSOB\n         USING  SSOB,R9\n         ST     R9,BUFSSPTR    Save in ptr for IEFSSREQ\n         OI     BUFSSPTR,X'80' Turn on high-order bit\n         MVC    SSOBID,=CL4'SSOB'  INIT CONTROL BLK ID\n         LA     R1,SSOBHSIZ    Get the length\n         STH    R1,SSOBLEN         and set it.\n         LA     R1,SSOBSOU2    Get the function code (SSI 79)\n         STH    R1,SSOBFUNC        and set it.\n         LA     R1,BUFSSS2     Get address of SSS2\n         ST     R1,SSOBINDV        and set it.\n         DROP   R9\n*-------------------------------------------------------------*\n*          Initial SSS2 setting:                              *\n*            - SSS2 version number                            *\n*            - SSS2 eyecatcher                                *\n*            - GET/PUT                                        *\n*-------------------------------------------------------------*\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\n         LA     R1,SSS2SIZE        Get SYSOUT extension size\n         STH    R1,SSS2LEN         Save in SAPI extension\n         LA     R1,ECBSAPI         Get the SAPI ECB addr\n         ST     R1,SSS2ECBP        Save in SAPI extension\n*        MVI    SSS2VER,SSS2CVER   Set version, default has changed\n*                                   in the IAZSSS2 macro - z/OS 2.1\n         MVI    SSS2VER,SSS2VCTP   Set version, revert back to v2\n*                                  *- now in effect to fix the bug.\n         MVC    SSS2EYE,=C'SSS2'   Set eye-catcher\n         MVI    SSS2TYPE,SSS2PUGE  Indicate PUT/GET request\n         MVI    SSS2SEL1,SSS2SWTR  Select only ODISP=WRITE/KEEP\n* DISPOSITION OF THE DATASET\n         MVI    SSS2DSP1,(SSS2DKPE+SSS2RNPR) Keep dataset,no return\n* SET ECBSAPI AS FIRST ECB FOR WAIT\n         BR     R3\n         DROP   R9\n\n**********************************************************************\n*-------------------------------------------------------------*\n*        Initialize the COM ECBS                              *\n*-------------------------------------------------------------*\n**********************************************************************\nINIECBS  DS    0H\n         STM   R1,R3,SVL2\n* INIT SAPI ECB\n         LA    R1,ECBSAPI           Get addres of writer ECB\n         ST    R1,@WTRECB           Save it away\n* INIT COMM ECB\n         EXTRACT MF=(E,XTPRML)   EXTRACT AREA\n         L     R2,COMMADDR          LOAD THE ADDRESS OF COMMECB\n         USING COM,R2\n         L     R1,COMCIBPT          LOAD ADDR OF THE START CIB\n         LTR   R1,R1                TEST IF START CIB PRESENT\n         BZ    INIE1000\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(R1)   FREE START CIB\nINIE1000 EQU   *\n         QEDIT ORIGIN=COMCIBPT,CIBCTR=1\n         L     R1,COMECBPT\n         ST    R1,@COMECB\n         OI    @COMECB,X'80'        SET THIS IS THE LAST ECB ADDR\n         DROP  R2\nINIE8000 EQU   *\n         LM    R1,R3,SVL2\n         BR    R3\n\n*---------------------------------------------------------------------*\n**********************************************************************\n*  MAIN PROGRAM LOGIC                                         *\n*-------------------------------------------------------------*\nMAINPRG  DS     0H\n         ST     R2,SVL1\n         BAL    R3,RESTSTAT           RESET THE STATUS\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\nMAIN1000 EQU    *\n         CLI    ISSTOP,YES            REQUIRE TO STOP?\n         BE     MAIN7000              YES, STOP THE PROGRAM\n         BAL    R3,ASKJES             CALL SSI CALL FOR JOB DATASETS\n         CLI    REQSTAT,RETYES        TEST IF ANY JOB RETURN FROM JES\n         BE     MAIN2000              YES, PROCESS THIS DATASET.\n         CLI    REQSTAT,RETNWK        TEST IF NO MORE JOB FROM JES\n         BE     MAIN6000              YES, JUST WAIT FOR NEXT JOB\n         B      MAIN7000              NO, PROBLEM PROCESSING\n* PROCESS DATASET\nMAIN2000 EQU    *\n         BAL    R3,GOTJOB             PROCESS THE DATASET\n         CLI    PSPSTAGE,PSPSSCAN     IS THIS A SCAN STAGE?\n         BNE    MAIN3000              NO, JUMP TO READ STAGE\n* SCAN STAGE PROCESSING\n         TM     SSS2RET1,SSS2DSF      Is it 1st dataset?\n         BNO    MAIN2200              NO ,SKIP FIRST DATASET PROCESS\n         BAL    R3,TSTODSN            SET THE OUTPUT DATASET NAME\nMAIN2200 BAL    R3,SETJDISP           SET THE JOB DISPOSITION\n         TM     SSS2RET1,SSS2DSL      Is it last dataset?\n         BNO    MAIN2400              Yep,\n         BAL    R3,RESTSTAT           RESET THE STATUS\nMAIN2400 B      MAIN1000              GET NEXT DATASET\n* READ STAGE PROCESSING\nMAIN3000 BAL    R3,SAVEJOB            SAVE THE CURRENT DATA\n         BAL    R3,SETJDISP           SET THE JOB DISPOSITION\n         TM     SSS2RET1,SSS2DSL      Is it last dataset?\n         BNO    MAIN3400              Yep,\n         BAL    R3,RESTSTAT           RESET THE STATUS\nMAIN3400 B      MAIN1000              GET NEXT DATASET\n* FOR THERE IS NO DATASET AVAILABLE\nMAIN6000 BAL    R3,WAITWORK           YES, THEN PROCESS IT\n         B      MAIN1000              OTHERWISE CONTINUE TO WORK\n* FOR THERE IS A PROBLEM\nMAIN7000 EQU    *\n*        CLI    RETCODE,X'00'\n*        BE     MAIN8000\n*        BAL    R3,LASTCALL\nMAIN8000 EQU    *\n         L      R2,SVL1\n         BR     R2\n         DROP   R9\n\n***********************************************************************\n* RESET THE DEFAULT VALUE AFTER THE LAST DATASET IS PROCESSED *\n***********************************************************************\nRESTSTAT DS    0H\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\n         CLI   PSPSTAGE,PSPSSCAN    IS SCAN STAG FOR SPOOL DATA\n         BNE   RSS1000              NO, PROCESS READ STAGE\n* JCLLOG: END OF SCAN, END OF THE LAST SCAN DATASET.\n* END OF SCAN STAGE:\n         MVI   PSPSTAGE,PSPSREAD    SET READ STAG FOR SPOOL DATA\n* CHANGE THE SELECTION CRITERIA BY LIMIT TO ONE JOBID.\n         MVC   SSS2JBIL,SSS2JBIR\n         MVC   SSS2JBIH,SSS2JBIR\n         MVC   SSS2JBIL(3),=CL3'JOB'\n         MVC   SSS2JBIH(3),=CL3'JOB'\n         OI    SSS2SEL1,SSS2SJBI\n         CLI   ISODSBAD,YES        TEST IF THE OUTPUT DSN IS BAD\n         BNE   RSS0500             NO, CONTINUE\n         MVC   MSGBUFTX(31),=CL31'JOF053W Put job on SYSTEM hold:'\n         MVC   MSGBUFTX+32(31),=CL31'JOBNAME(       ),JOBID(       )'\n         MVC   MSGBUFTX+40(8),SSS2JOBR\n         MVC   MSGBUFTX+55(8),SSS2JBIR\n         BAL   R1,LOG\n         B     RSS4000\nRSS0500  EQU   *\n         BAL   R4,OPNODSN          ALLOCATE AND OPEN THE OUTPUT DATASET\n         CLI   ISODSALC,YES\n         BE    RSS4000\n         MVC   MSGBUFTX(35),=CL35'JOF050E Cannot open output dataset:'\n         MVC   MSGBUFTX+36(44),LDODSN\n         BAL   R1,LOG\n MVC   MSGBUFTX(38),=CL38'JOF051W Please make sure HLQ is valid.'\n         BAL   R1,LOG\n MVC   MSGBUFTX(44),=CL44'JOF052W Please make there is enough storage.'\n         BAL   R1,LOG\n         MVI   RETCODE,12          SET THE RETURN CODE\n         MVI   ISSTOP,YES          SET THE STOP FLAG\n         B     RSS4000\n* RESET THE VALUE TO INITIAL STAGE, READY TO GET NEW ONE\n* INITIAL STAGE\nRSS1000  EQU   *\n         BAL   R4,CLSODSN          CLOSE AND UNALLOCATED OUTPUT DATASET\n         MVI   ISODSOPN,NO          SET OUTPUT DATASET IS NOT OPEN\n         MVI   ISODSALC,NO          SET OUTPUT DATASET IS NOT ALLOCATED\n         MVI   ISIDSOPN,NO          SET INPUT  DATASET IS NOT OPEN\n         MVI   ISIDSALC,NO          SET INPUT  DATASET IS NOT ALLOCATED\n         XC    TOTREC,TOTREC        CLEAR THE TOTAL RECORDS TO 0\n         BAL   R4,SETDFALT         PREPARE SAPI SELECTION CRITERIA\n         LA    R1,SEQID            SET OUTPUT SEQ ID AT THE START\n         ST    R1,ODSNSEQ\n         XC    OUTLRECL,OUTLRECL   RESET THE OUTPUT LRECL\n         MVI   ISODSBAD,NO         OUPTUT DATASET IS GOOD\n         MVI   ISIDSBAD,NO         OUPTUT DATASET IS GOOD\n         CLI   PSPSTAGE,PSPSREAD    IS READ STAG FOR SPOOL DATA\n         BNE   RSS2500              NO, SKIP COUNTER LOGS\n         L     R1,TOTLOGS           LOAD THE LOG COUNTER\n         LA    R1,1(0,R1)           ADD 1\n         ST    R1,TOTLOGS           LOAD THE LOG COUNTER\nRSS2500  EQU   *\n         MVI   PSPSTAGE,PSPSSCAN    SET READ STAG FOR SPOOL DATA\n* RETURN TO CALLER\nRSS4000  EQU   *\n         BR    R3\n         DROP   R9\n\n***********************************************************************\n* SET DATASET DISPOSITION ACCORDING TO:                       *\n*     PROCESSING STAGE                                        *\n*     WHETHER THIS IS A JCLLOG                                *\n***********************************************************************\nSETJDISP DS    0H\n         LA    R9,BUFSSS2          Point at actual SSS2\n         USING SSS2,R9\n         CLI   PSPSTAGE,PSPSSCAN   IS THIS A SCAN STAGE?\n         BNE   SJD4000             NO, PROCESS READ STAGE\n* PROCESS SCAN STAGE\n         CLI   ISODSBAD,YES        IS OUTPUT DATASET FAILED?\n         BE    SJD5000             YES, PROCESS THE JOBLOG AS HOLD\n         MVI   SSS2DSP1,SSS2DKPE   Keep dataset, and return again\n         B     SJD8000\n* PROCESS READ STAGE\nSJD4000  EQU   *\n         CLI   ISODSBAD,YES        IS OUTPUT DATASET FAILED?\n         BE    SJD5000\n         CLI   ISIDSBAD,YES        IS OUTPUT DATASET FAILED?\n         BE    SJD5000\n         MVI   SSS2DSP1,X'00'      DELETE THE DATAET FOR PROCESSED ONE\n         B     SJD8000\n* PROCESS OUTPUT DATASET ALLOCATION FAILED.\nSJD5000  EQU   *\n         MVI   SSS2DSP1,(SSS2DKPE+SSS2RHLD) Keep dataset, SYSTEM HOLD\n         B     SJD8000\nSJD8000  EQU   *\n         BR    R3\n         DROP   R9\n\n***********************************************************************\n* SET THE OUTPUT DATASET NAME                                 *\n***********************************************************************\nSETODSN  DS    0H\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\n         ST    R1,SVL4\n* SETUP ADDRESSABILITY\n* GET THE TIME AND DATE INFO\n         MVC   TIMEFM1(4),SSS2TOD  COPY THE TOD TIME\n         BAL   R15,CVTTIME\n* GET THE DATASET INFO\n         MVI   LDODSN,C' '         CLEAR THE OUTUT DATASET NAME\n         MVC   LDODSN+1(43),LDODSN CLEAR THE OUTUT DATASET W/ SPACE\n         LA    R1,LDODSN           LOAD THE ADDRESS OF DATASET BUFFER\n* COPY HLQ\n         MVC   0(14,R1),SELHLQ      COPY THE HLQ\n         LA    R14,14              LOAD THE MAX LENGTH OF HLQ\n         BAL   R15,FINDEOS         FIND THE LOCATION OF END OF STRING\n* ADD DOT\n         MVI   0(R1),C'.'\n         LA    R1,1(0,R1)\n* COPY THE JOB NAME\n         MVC   0(8,R1),SSS2JOBR    COPY THE JOBNAME\n         LA    R14,8               LOAD THE MAX LENGTH OF HLQ\n         BAL   R15,FINDEOS\n* ADD DOT\n         MVI   0(R1),C'.'\n         LA    R1,1(0,R1)\n* ADD D\n         MVI   0(R1),C'D'\n         LA    R1,1(0,R1)\n* COPY DATE\n         MVC   0(6,R1),TIME3DT     COPY THE DATE INFO\n         LA    R1,6(0,R1)\n* ADD DOT\n         MVI   0(R1),C'.'\n         LA    R1,1(0,R1)\n* COPY JOBID\n         MVC   0(1,R1),SSS2JBIR      COPY THE JOBID\n         MVC   1(5,R1),SSS2JBIR+3    COPY THE JOBID\n         LA    R14,6                 LOAD THE MAX LENGTH OF HLQ\n         BAL   R15,FINDEOS\n* ADD DOT\n         MVI   0(R1),C'.'\n         LA    R1,1(0,R1)\n* ADD T\n         MVI   0(R1),C'T'\n         LA    R1,1(0,R1)\n* COPY TIME\n         MVC   0(4,R1),TIME3TM     COPY THE TIME INFO\n         LA    R1,4(0,R1)\n* COPY DATASET ID\n         ST    R1,ODSNILC          SAVE THE LOCATION OF ODSN ID\n         BAL   R15,SETODSID        SET THE OUTPUT DATASET ID\n         LA    R1,2(0,R1)\n* COPY DATASET NAME\n         L     R1,SVL4\n         BR    R1\n         DROP   R9\n\n***********************************************************************\n*SETODSID: RETURN THE END OF STRING LOCATION IN R1            *\n*  INPUT : SOURCE ADDRESS: R1, LENGTH : R14                   *\n***********************************************************************\nSETODSID DS    0H\n* ADD 1 TO ODSN ID\n         L     R1,ODSNILC          LOAD THE LOCATION OF ODSN ID\n         L     R14,ODSNSEQ         LOAD THE CURRENT SEQUENCE ID\n         MVC   0(1,R1),0(R14)      COPY THE SEQUENCE ID\n         LA    R14,1(0,R14)        ADD THE SEQUENCE ID\n         ST    R14,ODSNSEQ\n         BR    R15\n\n\n***********************************************************************\n* FINDEOS: RETURN THE END OF STRING LOCATION IN R1            *\n*  INPUT : SOURCE ADDRESS: R1, LENGTH : R14                   *\n***********************************************************************\nFINDEOS  DS    0H\nFDE1000  EQU   *\n         CLI   0(R1),C' '       COMPARE THE BYTE FOR END OF STRING BYTE\n         BE    FDE2000          IF FOUND, EXIT THE LOOP\n         CLI   0(R1),X'00'      COMPARE THE BYTE FOR END OF STRING BYTE\n         BE    FDE2000          IF FOUND, EXIT THE LOOP\n         LA    R1,1(0,R1)       MOVE TO NEXT BYTE TO TEST\n         BCT   R14,FDE1000      REDUCE THE COUNTER AND CONTINUE LOOP\nFDE2000  EQU   *\n         BR    R15\n\n***********************************************************************\n* CVTTIME: CONVERT DATE AND TIME FROM STCK TO DEC FORMAT      *\n***********************************************************************\nCVTTIME  DS    0H\n         ST    R15,SVL3\n         MVI   TIMEFM2,X'01'        SAVE X'01' for significant lead 0\n         MVC   TIMEFM3(DATEPTNL),DATEPTN  COPY EDIT PATTERN\n         STCKCONV STCKVAL=TIMEFM1,CONVVAL=TIMEFM2A,TIMETYPE=DEC,       X\n               DATETYPE=YYYYMMDD\n         LA    R6,TIMEFM3         LOAD THE TIME FIELD\n         LA    R7,TIMEFM2         LOAD THE DATA AREA (16 BYTES)\n         ED    0(8,R6),0(R7)      EDIT TIME\n         ED    8(12,R6),9(R7)     EDIT DATE\n         L     R15,SVL3\n         BR    R15\n\n***************************************************************\n*              SELECTION UPDATE                               *\n*-------------------------------------------------------------*\n***********************************************************************\nSETDFALT DS    0H\n         LA    R9,BUFSSS2          Point at actual SSS2\n         USING SSS2,R9\n         XC    LDACLSR,LDACLSR     Clear returned class\n         XC    LDADESTR,LDADESTR   Clear returned destination\n         XC    LDAJOBIR,LDAJOBIR   Clear returned job number\n         MVI   SSS2TYPE,SSS2PUGE   Indicate GET request\n         MVI   SSS2UFLG,0          Clear disposition flag GET request\n         MVI   SSS2SEL1,SSS2SWTR\n* SET CLASS SELECTION CRITERIA\n         CLI   ISCLASS,YES\n         BNE   SDF1000\n         OI    SSS2SEL1,SSS2SCLS\n         MVC   SSS2CLSL,SELCLASS   Set the classes\nSDF1000  EQU   *\n* SET DEST  SELECTION CRITERIA\n         CLI   ISDEST,YES\n         BNE   SDF2000\n         OI    SSS2SEL1,SSS2SDST\n         MVC   SSS2DEST,SELDEST    Set the destination\nSDF2000  EQU   *\n* SET JOBNAME SELECTION CRITERIA\n         CLI   ISJOBNM,YES\n         BNE   SDF3000\n         OI    SSS2SEL1,SSS2SJBN\n         MVC   SSS2JOBN,SELJOBNM   Set the destination\nSDF3000  EQU   *\n         MVI   SSS2SEL2,X'00'      Clear selection flag two\n* SET FORM SELECTION CRITERIA\n         CLI   ISFORM,YES\n         BNE   SDF4000\n         OI    SSS2SEL2,SSS2SFRM\n         MVC   SSS2FORM,SELFORM    Set the destination\nSDF4000  EQU   *\n* SET CREATER SELECTION CRITERIA\n         CLI   ISUSRID,YES\n         BNE   SDF5000\n         OI    SSS2SEL2,SSS2SCRE\n         MVC   SSS2CREA,SELUSRID   Set the destination\nSDF5000  EQU   *\n         MVI   SSS2SEL3,X'00'      and selection flag three\n         MVI   SSS2SEL4,X'00'      and selection flag FOUR\n         MVI   SSS2SEL5,X'00'      and selection flag FOUR\n         BR    R4                  Return to caller\n         DROP  R9\n***********************************************************************\n*-------------------------------------------------------------*\n*        Subroutine to go ask JES for something to do.        *\n*-------------------------------------------------------------*\nASKJES   DS     0H\n         STM    R1,R3,SVL2\n         MVI    REQSTAT,RETERR        SET THERE IS NO JES DATASET\n         MODESET MODE=SUP,KEY=ZERO    Get supervisor state\n         LA     R1,BUFSSPTR           Point at addr of addr of SSOB\n         IEFSSREQ\n         LR     R7,R15                SAVE THE RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO  GET BACK TO PROBLEM STATE\n         LTR    R7,R7                 Good return code from SSI?\n         BNZ    SSIFAIL               No, error\n         LA     R2,BUFSSOB            Point at addr of addr of SSOB\n         USING  SSOB,R2\n         L      R3,SSOBRETN         Get the subsytem return code\n         DROP   R2\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\n*-------------------------------------------------------------*\n*        Check SSOB return code for type of processing to     *\n*        occur next....                                       *\n*-------------------------------------------------------------*\n         C      R3,=A(SSS2RTOK)     Anything to do?\n         BC     EQ,ASKJOK           BIY, Just do it\n         C      R3,=A(SSS2EODS)     End of datasets?\n         BC     EQ,ASKNOJOB         Nothing to do, so wait\n         C      R3,=A(SSS2LERR)     Was is a logical error?\n         BC     EQ,LOGICERR         Nothing to do, so wait\n         C      R3,=A(SSS2BDIS)     Was is a disposition error?\n         BC     EQ,DISPERR          Nothing to do, so wait\n* SAPI CALLING FAILED\n         MVC    MSGBUFTX(31),=CL31'JOF080E SAPI RETURN FAILED, RC='\n         LR     R1,R3\n         BAL    R15,CVTHEX\n         MVC    MSGBUFTX+31(8),0(R1)\n         BAL    R1,LOG                        SHOW THE FINAL MESSAGE\n         MVI    RETCODE,X'08'      ;SET RETURN CODE 8\n         B      ERRCONT             Continue processing\nSSIFAIL  EQU    *\n         MVC    MSGBUFTX(32),=CL32'JOF081E SAPI CALLING FAILED, RC='\n         LR     R1,R7\n         BAL    R15,CVTHEX\n         MVC    MSGBUFTX+32(8),0(R1)\n         BAL    R1,LOG                        SHOW THE FINAL MESSAGE\n         MVI    RETCODE,X'08'      ;SET RETURN CODE 8\n         B      ERRCONT             Continue processing\n*-------------------------------------------------------------*\n*        Logical error processing                             *\n*-------------------------------------------------------------*\nLOGICERR DS     0H\n   MVC    MSGBUFTX(41),=CL41'JOF082E SAPI logical Error, reason code:'\n         SR     R1,R1               Clear to zeroes\n         IC     R1,SSS2REAS         Get reason code\n         BAL    R15,CVTHEX\n         MVC    MSGBUFTX+41(8),0(R1)\n         BAL    R1,LOG\n         B      ERRCONT             Continue processing\n*-------------------------------------------------------------*\n*        Disposition error processing                         *\n*-------------------------------------------------------------*\nDISPERR  DS     0H\n   MVC    MSGBUFTX(37),=CL37'JOF083E SAPI DISP Error, reason code:'\n         SR     R1,R1               Clear to zeroes\n         IC     R1,SSS2REAS         Get reason code\n         BAL    R15,CVTHEX\n         MVC    MSGBUFTX+37(8),0(R1)\n         BAL    R1,LOG\n*-------------------------------------------------------------*\n*        If the error was due to a bad type, the type will    *\n*        be 'reset' on the next IEFSSREQ request. So there    *\n*        is nothing to do here.                               *\n*        If the error was due to a bad length, the length     *\n*        needs to be reset since it is set only once, during  *\n*        initialization.                                      *\n*-------------------------------------------------------------*\nERRCONT  DS     0H\n         MVI    REQSTAT,RETERR     SET THE JES DATASET IS AVAILABLE\n         B      ERRC100            No, SKIP\n         SR     R1,R1\n         IC     R1,SSS2REAS\n         C      R1,=A(SSS2RLEN)     Was it bad SSS2 length?\n         BC     NE,ERRC100          No, SKIP\n         LA     R1,SSS2SIZE         Get SSS2 length\n         STH    R1,SSS2LEN          Get SSS2 length\nERRC100  EQU    *\n         MVI    RETCODE,X'08'      ;SET RETURN CODE 8\n         B      ASKEND\nASKJOK   EQU    *\n         MVI    REQSTAT,RETYES     SET THE JES DATASET IS AVAILABLE\n         B      ASKEND\nASKNOJOB EQU    *\n         MVI    REQSTAT,RETNWK     SET NO DATASET IS AVAILABLE\n         B      ASKEND\nASKEND   EQU    *\n         LM     R1,R3,SVL2\n         BR     R3\n         DROP   R9\n***********************************************************************\n\n***************************************************************\n*              WAIT FOR JES POST/COMMAND                      *\n*-------------------------------------------------------------*\n*        Wait for post indicating newly created SYSOUT        *\n*        exists to process.                                   *\n*-------------------------------------------------------------*\nWAITWORK DS    0H\n         STM   R1,R3,SVL2\n         BAL   R4,CLSODSN          CLOSE AND UNALLOCATED OUTPUT DATASET\nWTWK1000 EQU    *\n         MODESET KEY=ZERO,MODE=SUP\n         WAIT  1,ECBLIST=LDAECBL   Wait for SYSOUT\n         MODESET KEY=NZERO,MODE=PROB\n* TEST IF THERE IS A CONSOLE COMMAND\n         L     R2,COMMADDR          LOAD THE ADDRESS OF COMMECB\n         USING COM,R2               DEFINE COM AREA ADDRESSABILITY\n         L     R3,COMCIBPT          LOAD ADDR OF THE CIB\n         LTR   R3,R3                TEST IF CIB PRESENT\n         BZ    WTWK8000             NO, BYPASS MODIFY COMMAND CHECK\n         BAL   R4,CMDPROC           PROCESS MODIFY COMMAND\n         CLI   ISSTOP,YES           USER REQUESTED STOP?\n         BNE   WTWK1000             NO, CONTINUE TO WAIT\n         DROP  R2\nWTWK8000 EQU   *\n         MVI   ECBSAPI,0           Turn off POSTed bit  (C J Kinn)\n         LM    R1,R3,SVL2\n         BR    R3                  Go see if there is something to do\n***********************************************************************\n\nCMDPROC  DS    0H\n         STM   R2,R4,SVL3\n         L     R2,COMMADDR          LOAD THE ADDRESS OF COMMECB\n         USING COM,R2               DEFINE COM AREA ADDRESSABILITY\n         L     R3,COMCIBPT          LOAD ADDR OF THE CIB\n         USING CIB,R3               DEFINE CIB AREA ADDRESSABILITY\n         IC    R5,CIBVERB\n         CLM   R5,B'0001',=AL1(CIBSTOP)  TEST IF STOP COMMAND\n         BNE   CMDP2000            BR IF NOT\n         MVI   ISSTOP,YES          SET STOP FLAG ON\n         MVC   MSGBUFTX(30),=CL30'JOF904I RECEIVE STOP COMMAND.'\n         BAL   R1,LOG                        SHOW THE FINAL MESSAGE\n         B     CMDP8000            BR IF NOT\n* NORMAL MODIFY COMMAND PROCESSING\nCMDP2000 EQU   *\n         MVC   MSGBUFTX(32),=CL32'JOF910I RECEIVE MODIFY COMMAND.'\n         BAL   R1,LOG                        SHOW THE FINAL MESSAGE\nCMDP8000 EQU   *\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(R3)    FREE THIS CIB\n         LM    R2,R4,SVL3\n         BR    R4                  Go see if there is something to do\n         DROP  R2,R3\n\n***********************************************************************\n*-------------------------------------------------------------*\n*        Job returned from JES3......                         *\n*                                                             *\n*        Now remember the jobid for later, enter the          *\n*        allocation/unallocation loop, when finished with     *\n*        this job, dispose of it and get another.             *\n*                                                             *\n*-------------------------------------------------------------*\nGOTJOB   DS    0H\n         LA    R9,BUFSSS2          Point at actual SSS2\n         USING SSS2,R9\n         MVC   LDACLSR,SSS2CLAR    Save the ds class\n         MVC   LDADESTR,SSS2DESR   Save the ds dest\n         MVC   LDAJOBIR,SSS2JBIR   Save the jobid\n         MVC   LDAJOBNR,SSS2JOBR   Save the jobname\n         MVC   LDATXTA1,SSS2BTOK   Save DS token address\n         MVC   LDADSN,SSS2DSN      Save the Data Set name for alloc\n* COUNT THE NUMBER OF RECORDS FOR SCAN STAGE\n         CLI   PSPSTAGE,PSPSSCAN     IS THIS A SCAN STAGE?\n         BNE   GTJ3000\n         BAL   R15,CNTLINE            COUNT THE LINES\nGTJ3000  EQU   *\n         BR    R3\n*-------------------------------------------------------------*\n         DROP  R9\n*-------------------------------------------------------------*\nSHOWLOG  EQU   *\n         ST    R1,SVL4\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\n         MVC   OJLJNM(8),SSS2JOBR\n         MVC   OJLJID(8),SSS2JBIR\n         L     R1,TOTREC           LOAD CURRENT LINE COUNT\n         BAL   R15,CVTDEC\n         MVC   OJLREC(8),0(R1)\n         MVC   OJLDSN(44),LDODSN\n         MVC   MSGBUFTX(132),OJLMSG\n         BAL   R1,LOG\n         L     R1,SVL4\n         BR    R1\n         DROP  R9\n\n***********************************************************************\n* SCAN JOB TO SEE IF THE JOB IS JOB LOG                       *\n***********************************************************************\n***********************************************************************\n* COUNT THE LINE FOR EACH DATASET IN JOB LOG                  *\n***********************************************************************\nCNTLINE  DS    0H\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\n         L     R1,SSS2LNCT         LOAD CURRENT LINE COUNT\n         A     R1,TOTREC           ADD THE CURRENT LINE COUNT\n         ST    R1,TOTREC           UPDATE THE LINE COUNT\n         LH    R1,SSS2MLRL         LOAD CURRENT LINE COUNT\n         CH    R1,OUTLRECL         COMPARE THE CURRENT MAX LRECL\n         BNH   CTL1000             IF NOT BIGGER, SKIP TO UPDATE\n         STH   R1,OUTLRECL         OTHERWISE UPDATE WITH CURRENT ONE\nCTL1000  EQU   *\n         BR    R15\n         DROP  R9\n\n***********************************************************************\n* INSERT EXTRA RECORD AT START OF JOBLOG\n***********************************************************************\nINSREC   DS    0H\n         LA    R9,BUFSSS2          Point at actual SSS2\n         USING SSS2,R9\n         MVC   INSRECTX,INSRECPT\n         MVC   INSRECTX+19(8),SSS2JOBR\n         MVC   INSRECTX+35(8),SSS2JBIR\n         MVC   INSRECTX+52(8),SSS2DDND\n         L     R1,SSS2LNCT         LOAD CURRENT LINE COUNT\n         BAL   R15,CVTDEC\n         MVC   INSRECTX+70(8),0(R1)\n         LA    R1,INSRECLN+4       SET THE LENGTH OF THE RECORD\n         STH   R1,OUTRECLN         SAVE RECORD LENGTH IN VB HEADER\n         LA    R8,OUTREC\n         MVC   OUTRECTX(INSRECLN),INSRECTX\n         PUT   OUTDCB,(R8)         SAVE IT TO OUTPUT DATASET\n         BR    R4\n         DROP  R9\n\n***********************************************************************\n* SAVE THE CURRENT DATASET                                    *\n***********************************************************************\nSAVEJOB  DS    0H\n         STM   R2,R4,SVL2\n         CLI   ISODSBAD,YES        IF THE OUTPUT DATASET BAD?\n         BE    SVJ8000             YES, SKIP TO SAVE\n         BAL   R4,OPNIDSN          ALLOCATE AND OPEN INPUT DATASET\n         CLI   ISIDSOPN,NO         IS  THE DATASET IS NOT OPENED\n         BE    SVJ7000             YES, SKIP TO SAVE\n         XC    OUTRECRS,OUTRECRS   CLEAR RESERVED 2 BYTES\n         LA    R8,OUTREC           LOAD THE OUTPUT RECORD ADDRESS\n         BAL   R4,INSREC           INSERT THE RECORD FOR SEPARATOR\n         LA    R2,INDCB            Get the DCB\n         USING IHADCB,R2           Tell the assembler\nSVJ1000  EQU   *\n         GET   INDCB               GET NEXT INPUT RECORD\n         LR    R7,R1               SAVE THE RETURNED RECORD ADDRESS\n         LH    R5,DCBLRECL         LOAD CURRENT RECORD LENGTH\n* REMOVE TRAILING SPACES\n         AR    R5,R7               MOVE TO THE END OF RECORD\n         BCTR  R5,0\nSVJ2000  EQU   *\n         CLI   0(R5),C' '          IS THIS A SPACE?\n         BNE   SVJ2200\n         CR    R5,R7               REACH AT THE BEGINNING\n         BE    SVJ2400             YES, PROCESS EMPTY RECORD\n         BCTR  R5,0\n         B     SVJ2000\nSVJ2200  EQU   *\n         SR    R5,R7               GET NEW LENGTH\n         LA    R5,1(0,R5)          ADD 1 TO GET REAL LENGTH\n         B     SVJ3000\nSVJ2400  EQU   *\n         LA    R5,2                ADD AT LEAST ONE SPACE\nSVJ3000  EQU   *\n         LA    R4,4(0,R5)          GET R4 = 4 + R5 (ADD RDW LENGTH)\n         STH   R4,OUTRECLN         SAVE RECORD LENGTH IN VB HEADER\n         BCTR  R5,0                SUBTRACT R5 BY ONE FOR MVC REC\n         LA    R6,OUTRECTX\n         EX    R5,MVCREC           COPY THE RECORD TO OUTREC\n         PUT   OUTDCB,(R8)         SAVE IT TO OUTPUT DATASET\n         B     SVJ1000\nINDCBEOF EQU   *\n         BAL   R4,CLSIDSN          CLOSE & UNALLOCATE INPUT DATASET\n         B     SVJ8000\n* INPUT DATASET IS NOT OPEN\nSVJ7000  EQU   *\n         MVI   ISIDSBAD,YES        SET THE INPUT DATASET BAD\nSVJ8000  EQU   *\n         LM    R2,R4,SVL2\n         BR    R3\n***********************************************************************\n* DATASET OPEN/CLOSE FUNCTIONS\n***********************************************************************\n* TSTODSN: TEST IF OPEN OUTPUT DATASET EXISTS                         *\n***********************************************************************\nTSTODSN  DS    0H\n         STM   R1,R3,SVL2\n         BAL   R1,SETODSN          RESET THE OUTPUT DATASET NAME\n         LA    R2,ODSTSMX\nTSO1000  EQU   *\n         LOCATE INDAB              CALL LOCATE THE DATASET\n         LTR   R15,R15\n         BNZ   TSO8000             DATASET NOT EXIST, JUST RETURN\n         BAL   R15,SETODSID        SET NEXT OUTPUT DATASET ID\n         BCT   R2,TSO1000          RETRY TO ALLCOATE THE DATASET.\n         MVI   ISODSBAD,YES        SET TOO BAD FOR OUTPUT DATASET\n   MVC MSGBUFTX(43),=CL43'JOF067E Too many duplicated output datasets.'\n   MVC MSGBUFTX+46(44),LDODSN\n         BAL   R1,LOG\nTSO8000  EQU   *\n         LM    R1,R3,SVL2\n         BR    R3\n***********************************************************************\n* OPNODSN: OPEN OUTPUT DATASET                                *\n***********************************************************************\nOPNODSN  DS    0H\n         STM   R1,R3,SVL3\n         CLI   ISODSBAD,YES        IS THE OUTPUT DATASET BAD?\n         BE    OPO8000             YES, SKIP TO OPEN IT\n         MVI   ISODSALC,NO         SET THE DATASET IS NOT ALLOCATED\n         MVI   ISODSOPN,NO         SET THE DATASET IS NOT OPENED\n* UPDATE THE TRACKS ACCORDING TO RECORDS IN THE JOB LOG\n         L     R6,TOTREC           LOAD THE TOTAL RECORDS\n         MH    R6,OUTLRECL         MULTIPLY LRECL AND TOTREC\n         SRDA  R6,32(0)            SHIFT ALL BITS IN R6 TO R7\n         D     R6,TRKSIZE          DIVIDD TOTAL BYTES BY TRACK SIZE\n         STCM  R7,B'0111',LDOSCND  SAVE THE TRACKS IN SECONDARY SPACE\n         LA    R7,5(0,R7)          ADD 5 EXTRA TRACKS\n         STCM  R7,B'0111',LDOPRIM  SAVE THE TRACKS IN PRIMARY SPACE\n         MVC   LDORECL,OUTLRECL    SAVE OUTPUT LRECL\n         LA    R1,LDOTXTAL         LOAD TEXT UNIT ADDRESS TABLE\n         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE\n         BAL   R1,DYNALC           CALL DYNAMIC ALLOCATION\n         LH    R5,ALLCCDE          GET THE RETURN CODE\n         LTR   R5,R5               TEST THE RETURN CODE\n         BNZ   OPO4000             PROBLEM ANALYSIS\n* ALLOCATE SUCCEEDED\n         MVI   ISODSALC,YES\n* OPEN THE DATASET\n         LA    R2,OUTDCB           Get the DCB\n         USING IHADCB,R2           Tell the assembler\n         MVC   DCBDDNAM,LDODDNMA   Get address of DDNAME\n         MVC   LDODDNMU,LDODDNMA   Get address of DDNAME\n         LH    R1,OUTLRECL         LOAD THE MAXIMUM RECORD LENGTH\n         LA    R1,8(0,R1)          ADD 8 (4 FOR RDW 4 FOR ROUND)\n         SLL   R1,2                ROUND THE LRECL BY 4\n         SRL   R1,2\n         STH   R1,DCBLRECL\n         STH   R1,OUTLRECL\n         DROP  R2                  OUTDCB\n         OPEN  ((R2),OUTPUT)       OPEN THE DATASET\n         LTR   R15,R15              OPEN SUCCESS?\n         BNZ   OPO8000              NO, SKIP THE SYSPRINT\n         MVI   ISODSOPN,YES        SET THE DATASET IS OPENED\n         BAL   R1,SHOWLOG\n         B     OPO8000              NO, SKIP THE SYSPRINT\nOPO4000  EQU   *\n    MVC   MSGBUFTX(35),=CL35'JOF066E Output dataset open failed:'\n    MVC   MSGBUFTX+36(44),LDODSN\n         BAL   R1,LOG\n         MVI   ISODSBAD,YES         SET THE ODSN IS BAD\nOPO8000  EQU   *\n         LM    R1,R3,SVL3\n         BR    R4\n\n***********************************************************************\n* OPNIDSN: OPEN INPUT  DATASET                                *\n***********************************************************************\nOPNIDSN  DS    0H\n         STM   R1,R3,SVL3\n         MVI   ISIDSALC,NO         SET THE DATASET IS NOT ALLOCATED\n         MVI   ISIDSOPN,NO         SET THE DATASET IS NOT OPENED\n         LA    R1,LDATXTAL         LOAD TEXT UNIT ADDRESS TABLE\n         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE\n         BAL   R1,DYNALC           CALL DYNAMIC ALLOCATION\n         L     R1,ALLCCODE         GET THE RETURN CODE\n         LTR   R1,R1               TEST THE RETURN CODE\n         BNZ   OPI1000\n* ALLOCATE SUCCEEDED\n         MVI   ISIDSALC,YES\n* OPEN THE DATASET\n         LA    R2,INDCB            Get the DCB\n         USING IHADCB,R2           Tell the assembler\n         MVC   DCBDDNAM,LDADDNMA   Get address of DDNAME\n         MVC   LDADDNMU,LDADDNMA   Get address of DDNAME\n         DROP  R2                  INDCB\n         OPEN  ((R2),(INPUT))      Open the dataset\n         LTR   R15,R15             OPEN SUCCESS?\n         BNZ   OPI2000\n         MVI   ISIDSOPN,YES        SET out DATASET IS OPENED\n         B     OPI2000\nOPI1000  EQU   *\n    MVC   MSGBUFTX(32),=CL32'JOF065E Input dataset allocation failed.'\n    MVC   MSGBUFTX+34(44),LDADSN\n         BAL   R1,LOG\nOPI2000  EQU   *\n         LM    R1,R3,SVL3\n         BR    R4\n\n***********************************************************************\n* CLSIDSN: CLOSE INPUT  DATASET                               *\n***********************************************************************\nCLSIDSN  DS    0H\n         CLI   ISIDSOPN,YES        IS INPUT DATASET OPENED?\n         BNE   CLI1000\n         CLOSE (INDCB)             CLOSE THE DATASET\nCLI1000  EQU   *\n         CLI   ISIDSALC,YES        IS THE INPUT DATASET ALLOCATED?\n         BNE   CLI2000\n         LA    R1,LDATXTUN         LOAD TEXT UNIT ADDRESS TABLE\n         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE\n         BAL   R1,DYNUALC          UNALLOCATE THE DATASET\nCLI2000  EQU   *\n         BR    R4\n\n***********************************************************************\n* CLSODSN: CLOSE OUTPUT DATASET                               *\n***********************************************************************\nCLSODSN  DS    0H\n         CLI   ISODSOPN,YES        IS INPUT DATASET OPENED?\n         BNE   CLI1000\n         CLOSE (OUTDCB)            CLOSE THE DATASET\nCLO1000  EQU   *\n         CLI   ISODSALC,YES        IS THE INPUT DATASET ALLOCATED?\n         BNE   CLI2000\n         LA    R1,LDOTXTUN         LOAD TEXT UNIT ADDRESS TABLE\n         ST    R1,TUADDR           SAVE TO CURRENT ADDRESS TABLE\n         BAL   R1,DYNUALC          UNALLOCATE THE DATASET\nCLO2000  EQU   *\n         BR    R4\n\n*********7*************************************************************\n* DYNALCI: DYNAMIC ALLOCATION FOR INPUT DATASET               *\n***********************************************************************\nDYNALC   DS    0H\n         STM   R1,R3,SVL4\n         LA    R2,LDAS99RB         LOAD THE RB ADDRESS\n         USING S99RB,R2            ADDRESSABILITY\n         XC    S99RB(S99RBLEN),S99RB   ZERO OUT 'RB' ENTIRELY.\n         OI    @LDAS99,S99RBPND    TURN ON THE HIGH-ORDER BIT IN RBPTR.\n         MVI   S99RBLN,S99RBLEN    PUT THE LENGTH OF 'RB' IN ITS LENGTH\n         MVI   S99VERB,S99VRBAL    SET VERB CODE FIELD TO ALLOCATE\n         MVC   S99TXTPP,TUADDR     LOAD TEXT UNIT ADDRESS TABLE\n         DROP  R2\n         LA    R1,@LDAS99\n         DYNALLOC ,                CALL DYNAMIC ALLOCATION\n         STH   R15,ALLCCDE         SAVE THE ALLOCATION RETURN CODE\n         LTR   R15,R15             Did it work?\n         BZ    DAL2000            NO, PROBLEM PROCESS\n* PROBLEM ANALYSIS\n         LA    R2,LDAS99RB         LOAD THE RB ADDRESS\n         USING S99RB,R2            ADDRESSABILITY\n         LH    R1,S99ERROR\n         STH   R1,ALLCRSN          SAVE THE RETURN ERROR CODE\n         MVC   MSGBUFTX(35),=CL35'JOF060E Dynamic Allocation Failed: '\n         LR    R1,R15              LOAD CURRENT RETURN CODE\n         BAL   R15,CVTDEC\n         MVC   MSGBUFTX+35(8),0(R1)\n         MVC   MSGBUFTX+46(44),LDODSN\n         BAL   R1,LOG\n*\n*-------------------------------------------------------------*\n*        Set flags1, flags 2 error code and infocode.         *\n*-------------------------------------------------------------*\n  MVC   MSGBUFTX(30),=CL30'JOF061I SVC 99 returned flags:'\n         MVC   MSGBUFTX+30(7),=CL7' flg1: '\n         LH    R1,S99FLAG1\n         BAL   R15,CVTHEX\n         MVC   MSGBUFTX+37(4),4(R1)\n         MVC   MSGBUFTX+41(7),=CL7' flg2: '\n         LH    R1,S99FLAG2\n         BAL   R15,CVTHEX\n         MVC   MSGBUFTX+48(4),0(R1)\n         MVC   MSGBUFTX+52(7),=CL7' ErCd: '\n         LH    R1,S99ERROR\n         BAL   R15,CVTHEX\n         MVC   MSGBUFTX+59(4),4(R1)\n         MVC   MSGBUFTX+63(7),=CL7' info: '\n         LH    R1,S99INFO\n         BAL   R15,CVTHEX\n         MVC   MSGBUFTX+70(4),4(R1)\n         BAL   R1,LOG\n         DROP  R2\nDAL2000  EQU   *\n         LM    R1,R3,SVL4\n         BR    R1\n\n***********************************************************************\n* DYNUALC: DYNAMIC UNALLOCATION                               *\n***********************************************************************\nDYNUALC  DS    0H\n         STM   R1,R3,SVL4\n         LA    R2,LDAS99RB         LOAD THE RB ADDRESS\n         USING S99RB,R2            ADDRESSABILITY\n         OI    @LDAS99,S99RBPND    TURN ON THE HIGH-ORDER BIT IN RBPTR.\n         XC    S99RB(S99RBLEN),S99RB       ZERO OUT 'RB' ENTIRELY.\n         MVI   S99RBLN,S99RBLEN    PUT THE LENGTH OF 'RB' IN ITS LENGTH\n         MVI   S99VERB,S99VRBUN    SET VERB CODE FIELD TO UNALLOCATE\n         L     R1,TUADDR           LOAD TEXT UNIT ADDRESS TABLE\n         ST    R1,S99TXTPP         SAVE IT TO TEXTPP\n         DROP  R2\n* CALL SVC99\n         LA    R1,@LDAS99\n         DYNALLOC ,                Hit allocation\n         ST    R15,UNALCODE        SAVE THE UNALLOCATION RETURN CODE\n         LTR   R15,R15             Did it work?\n         BNZ   DUA1000            NO, PROBLEM PROCESS\n* DYNAMIC ALLOCATION SUCCEEDED.\n         B     DUA2000\n* PROBLEM HANLDING\nDUA1000  EQU   *\n\nDUA2000  EQU   *\n         LM    R1,R3,SVL4\n         BR    R1\n\n\n\n\n\n***********************************************************************\n*              FINAL CALL PROCESSING                          *\n***********************************************************************\nLASTCALL DS    0H\n         LA     R9,BUFSSS2          Point at actual SSS2\n         USING  SSS2,R9\n         ST    R3,SVL2             SAVE R3 REGISTER\n         LA    R0,SSS2INPT         Point to input start field\n         LA    R1,L'SSS2INPC       Get length of input field\n         SR    R15,R15             Zero length and pad field\n         MVCL  R0,R14              Clear input SSS2 section\n         MVI   SSS2DSP1,SSS2DKPE   Show keep dataset\n         MVI   SSS2MSC1,SSS2CTRL   Indicate this is a control\n         BAL   R3,ASKJES           Go ask jes to dispose of job\n         L     R3,SVL2             RESTORE R3\n         BR    R3\n         DROP  R9\n***********************************************************************\n***********************************************************************\n*   CONVERT A NUMBER TO PRINTABLE HEXADECIMAL                 *\n*   R1 CONTAINS NUMBER ON ENTRY AND ADDRESS OF EBCDIC ON EXIT *\n*-------------------------------------------------------------*\nCVTHEX   DS    0H\n         XC    DWORK,DWORK\n         STCM  R1,B'1111',DWORK2+3\n         UNPK  DWORK1(9),DWORK2+3(5)\n         TR    DWORK1,TRANSLAT\n         LA    R1,DWORK1\n         BR    R15\n*-------------------------------------------------------------*\n*   CONVERT A HEX NUMBER TO PRINTABLE CHARACTERS.             *\n*   R1 CONTAINS NUMBER ON ENTRY AND ADDRESS OF EBCDIC ON EXIT *\n*-------------------------------------------------------------*\nCVTDEC   DS    0H\n         XC    DWORK,DWORK\n         CVD   R1,DWORK2\n         OI    DWORK2+7,X'0F'\n         LA    R1,DWORK1\n         UNPK  0(L'DWORK1,R1),DWORK2\n         TR    DWORK1,TRANSLAT\n         LA    R1,DWORK1\n         LA    R14,7\nCVTD1000 EQU   *\n         CLI   0(R1),C'0'\n         BNE   CVTD2000\n         MVI   0(R1),C' '\n         LA    R1,1(0,R1)\n         BCT   R14,CVTD1000\nCVTD2000 EQU   *\n         LA    R1,DWORK1\n         BR    R15\n\n*---------------------------------------------------------------------*\n* ROUTINE: READPARM\n* DESCRIPTION: READ AND VALIDATE THE EXEC PARM\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN :\n*   RETCODE: 0 IF VALID PARM, 8 IF INVALID PARM\n*---------------------------------------------------------------------*\nREADPARM DS    0H\n         STM   R2,R4,SVL1\n* READ PARM\n         L     R4,PARMADR         ;READ PARM ADDRESS\n         L     R4,0(R4)           ;PARM ADDRESS\n         LH    R2,0(R4)           ;LENGTH OF PARM\n         LTR   R2,R2              ;TEST IF PARM IS ZERO\n         BZ    RDP8000            ;IF NO PARM, SHOW HELP MESSAGE\n         MVC   MSGBUFTX(30),=CL30'JOF036I Given EXEC parameters:'\n         BAL   R1,LOG\n         MVC   MSGBUFTX(7),=CL7'JOF037I'\n         LA    R4,2(,R4)          ;LOAD THE START OF PARAMETER\n         LR    R5,R2              ;LOAD THE LENGTH FOR MVCREC\n         LR    R7,R4              ;LOAD START ADDRESS FOR MVCREC\n         LA    R6,MSGBUFTX+9      ;LOAD COPY TARGET ADDRESS\n         EX    R5,MVCREC\n         BAL   R1,LOG\n         CLC   0(4,R4),=CL4'HELP'   ;TEST IF NEED HELP.\n         BE    RDP8000            ;IF NO PARM, USE THE DEFAULT\nRDP0500  EQU   *\n         XR    R7,R7              ;CLEAR START ADDRESS\n* PARSE PARAMETERS INTO EACH PARM\nRDP1000  EQU   *\n         CLI   0(R4),C'('\n         BE    RDP1800\n         CLI   0(R4),C')'\n         BE    RDP1800\n         LTR   R7,R7              IS THIS THE BEGINNING OF PARAMETER?\n         BNZ   RDP1100\n         LR    R7,R4              SET R7 AT THE BEGINNING OF THIS PARM\n* TEST IF THIS IS A SEPARATOR\nRDP1100  CLI   0(R4),C','\n         BNE   RDP1800            IF NOT SEPARATOR, CONTINUE NEXT BYTE\n         LR    R6,R4              SET R6 AT THE END OF THIS PARM\n         CR    R7,R6\n         BE    RDP1300            IF END == START, THEN SKIP IT\n         BCTR  R6,0               SKIP THE ','\n         BAL   R3,PRS1PARM        PROCESS ONE PARAMETER\nRDP1300  XR    R7,R7              RESET THE START ADDRESS\n* PROCESS NEXT BYTE\nRDP1800  EQU   *\n         LA    R4,1(0,R4)         MOVE TO NEXT BYTE\n         BCT   R2,RDP1000\n* PROCESS THE LAST PARAMETER\n         BCTR  R4,0\n         LR    R6,R4\n         CLI   0(R6),C')'\n         BNE   RDP1900\n         BCTR  R6,0\nRDP1900  BAL   R3,PRS1PARM        PROCESS ONE PARAMETER\n         CLI   RETCODE,X'00'\n         BNE   RDP9000\n* SHOW LOG MESSAGE FORMAT\n         MVC  MSGBUFTX(37),=CL37'JOF030I JES spool selection criteria:'\n         BAL   R1,LOG\n* CLASS SELECTION CRITERIA\n         CLI   ISCLASS,YES\n         BNE   RDP2100\n         MVC   MSGBUFTX(20),=CL20'JOF031I   CLASSES  :'\n         MVC   MSGBUFTX+21(36),SELCLASS\n         BAL   R1,LOG\n         MVI   ISSELGV,YES\nRDP2100  EQU   *\n* DEST  SELECTION CRITERIA\n         CLI   ISDEST,YES\n         BNE   RDP2200\n         MVC   MSGBUFTX(20),=CL20'JOF032I   DEST     :'\n         MVC   MSGBUFTX+21(8),SELDEST\n         BAL   R1,LOG\n         MVI   ISSELGV,YES\nRDP2200  EQU   *\n* JOBNAME SELECTION CRITERIA\n         CLI   ISJOBNM,YES\n         BNE   RDP2300\n         MVC   MSGBUFTX(20),=CL20'JOF033I   JOBNAME  :'\n         MVC   MSGBUFTX+21(8),SELJOBNM\n         BAL   R1,LOG\n         MVI   ISSELGV,YES\nRDP2300  EQU   *\n* FORM SELECTION CRITERIA\n         CLI   ISFORM,YES\n         BNE   RDP2400\n         MVC   MSGBUFTX(20),=CL20'JOF034I   FORM     :'\n         MVC   MSGBUFTX+21(8),SELFORM\n         BAL   R1,LOG\n         MVI   ISSELGV,YES\nRDP2400  EQU   *\n* CREATER SELECTION CRITERIA\n         CLI   ISUSRID,YES\n         BNE   RDP2500\n         MVC   MSGBUFTX(20),=CL20'JOF035I   USERID   :'\n         MVC   MSGBUFTX+21(8),SELUSRID\n         BAL   R1,LOG\n         MVI   ISSELGV,YES\nRDP2500  EQU   *\n* CREATER SELECTION CRITERIA\n         CLI   ISHLQ,YES\n         BNE   RDP2600\n         MVC   MSGBUFTX(20),=CL20'JOF035I   HLQ      :'\n         MVC   MSGBUFTX+21(14),SELHLQ\n         BAL   R1,LOG\n         B     RDP2700\n         MVI   ISSELGV,YES\nRDP2600  EQU   *\n* HLQ IS MISSING\n         MVC   MSGBUFTX(51),INIMSG07\n         BAL   R1,LOG\n         MVI   RETCODE,X'08'\n         B     RDP9000\nRDP2700  EQU   *\n* NO SELECTION PARAMETER GIVEN\n         CLI   ISSELGV,YES\n         BE    RDP3000\n         MVC   MSGBUFTX(46),INIMSG08\n         BAL   R1,LOG\n         MVI   RETCODE,X'08'\n         B     RDP9000\nRDP3000  EQU   *\n* SHOW LOG MESSAGE FORMAT HEADER\n         MVC   MSGBUFTX(36),INIMSG09\n         BAL   R1,LOG\n         MVC   MSGBUFTX(86),INIMSG06\n         BAL   R1,LOG\n         MVC   MSGBUFTX(87),INIMSG10\n         BAL   R1,LOG\n         MVC   MSGBUFTX(87),INIMSG11\n         BAL   R1,LOG\n         B     RDP9000\n* SHOW HELP MESSAGE\nRDP8000  EQU   *\n         MVC   MSGBUFTX(30),=CL30'JOF120I Showing help messages.'\n         BAL   R1,LOG\n         BAL   R3,SHOWHELP\n         MVI   ISSTOP,YES        AFTER HELP MESSAGE, JUST END PROGRAM\n         B     RDP9000\nRDP9000  EQU   *\n         LM    R2,R4,SVL1\n         BR    R2\n\n*---------------------------------------------------------------------*\n* ROUTINE: PRS1PARM\n* DESCRIPTION: READ AND VALIDATE THE EXEC PARM\n* INPUT:\n*    R3  : RETURN CONTROL\n*    R7  : START OF THE PARAMETER\n*    R6  : END OF THE PARAMETER\n* RETURN :\n*   RETCODE: 0 IF VALID PARM, 8 IF INVALID PARM\n*---------------------------------------------------------------------*\nPRS1PARM DS    0H\n         STM   R2,R10,SVPSR\n         LR    R5,R6\n         SR    R5,R7          GET THE LENGTH OF PARAMETER\n         LTR   R5,R5          TEST IF THE LENGTH IS 0?\n         BZ    P1P9000        IGNORE EMPTY PARAMETERS\n*\n         LR    R2,R5           COPY THE PARAMETER LENGTH\n         LR    R3,R6           COPY THE END   ADDRESS\n         LR    R4,R7           COPY THE START ADDRESS\n         LA    R8,0           THE ERROR MESSAGE START POSITION\n*\n         CLI   1(R4),C'='      TEST THE SECOND BYTE IS '='?\n         BNE   P1P6000         NO, SHOW THE ERROR MESSAGE\n         LA    R7,2(0,R7)      MOVE TO THE VALUE\n         BCTR  R5,0            REDUCE THE LENGTH BY 2\n         BCTR  R5,0\n         CLI   0(R4),C'C'      IS THIS THE KEYWORD C (CLASS)\n         BE    P1P2100\n         CLI   0(R4),C'D'      IS THIS THE KEYWORD C (DEST)\n         BE    P1P2200\n         CLI   0(R4),C'F'      IS THIS THE KEYWORD C (FORM)\n         BE    P1P2300\n         CLI   0(R4),C'H'      IS THIS THE KEYWORD C (HLQ)\n         BE    P1P2400\n         CLI   0(R4),C'J'      IS THIS THE KEYWORD C (JOBNAME)\n         BE    P1P2500\n         CLI   0(R4),C'U'      IS THIS THE KEYWORD U (USERID)\n         BE    P1P2600\n  MVC   MSGBUFTX(40),=CL40'JOF040E This is an unsupported parameter:'\n         LA    R8,30\n         B     P1P7000         NO, SHOW THE ERROR MESSAGE\n* KEY C(CLASS)\n*  LENGTH: 0 - 36\n*  VALUE : 0-9, A-Z\nP1P2100  EQU   *\n         LA    R1,35\n         CR    R5,R1\n         BH    P1P2110\n         MVI   SELCLASS,C' '          CLEAR THE FIELD\n         MVC   SELCLASS+1(35),SELCLASS\n         LA    R6,SELCLASS\n         EX    R5,MVCREC       COPY THE CLASS INFOMRATION\n         MVI   ISCLASS,YES     SET CLASS AS A CRITERIA\n         B     P1P8000\n* FIELD TOO LONG\nP1P2110  EQU   *\n  MVC  MSGBUFTX(36),=CL36'JOF041E CLASS exceeds 36 characters:'\n         LA    R8,37\n         B     P1P7000\n* KEY D(DEST)\nP1P2200  EQU   *\n         LA    R1,7\n         CR    R5,R1\n         BH    P1P2210\n         MVI   SELDEST,C' '          CLEAR THE FIELD\n         MVC   SELDEST+1(7),SELDEST\n         LA    R6,SELDEST\n         EX    R5,MVCREC             COPY THE PARM INFOMRATION\n         MVI   ISDEST,YES            SET THIS IS A CRITERIA\n         B     P1P8000\n* FIELD TOO LONG\nP1P2210  EQU   *\n         MVC   MSGBUFTX(34),=CL34'JOF042E DEST exceeds 8 characters:'\n         LA    R8,35\n         B     P1P7000\n* KEY F(FORM)\nP1P2300  EQU   *\n         LA    R1,7\n         CR    R5,R1\n         BH    P1P2310\n         MVI   SELFORM,C' '          CLEAR THE FIELD\n         MVC   SELFORM+1(7),SELFORM\n         LA    R6,SELFORM\n         EX    R5,MVCREC             COPY THE PARM INFOMRATION\n         MVI   ISFORM,YES            SET THIS IS A CRITERIA\n         B     P1P8000\n* FIELD TOO LONG\nP1P2310  EQU   *\n         MVC   MSGBUFTX(34),=CL34'JOF043E FORM exceeds 8 characters:'\n         LA    R8,35\n         B     P1P7000\n* KEY H(HLQ )\nP1P2400  EQU   *\n         LA    R1,12                MAXIMUM 13 CHARS\n         CR    R5,R1\n         BH    P1P2410\n         MVI   SELHLQ,C' '          CLEAR THE FIELD\n         MVC   SELHLQ+1(12),SELHLQ\n         LA    R6,SELHLQ\n         EX    R5,MVCREC             COPY THE PARM INFOMRATION\n         MVI   ISHLQ,YES            SET THIS IS A CRITERIA\n         B     P1P8000\n* FIELD TOO LONG\nP1P2410  EQU   *\n         MVC   MSGBUFTX(34),=CL34'JOF044E HLQ exceeds 13 characters:'\n         LA    R8,34\n         B     P1P7000\n* KEY J(JOBNAME)\nP1P2500  EQU   *\n         LA    R1,7\n         CR    R5,R1\n         BH    P1P2510\n         MVI   SELJOBNM,C' '          CLEAR THE FIELD\n         MVC   SELJOBNM+1(7),SELJOBNM\n         LA    R6,SELJOBNM\n         EX    R5,MVCREC             COPY THE PARM INFOMRATION\n         MVI   ISJOBNM,YES            SET THIS IS A CRITERIA\n         B     P1P8000\n* FIELD TOO LONG\nP1P2510  EQU   *\n     MVC   MSGBUFTX(37),=CL37'JOF045E JOBNAME exceeds 8 characters:'\n         LA    R8,38\n         B     P1P7000\n* KEY U(USERID)\nP1P2600  EQU   *\n         LA    R1,7\n         CR    R5,R1\n         BH    P1P2610\n         MVI   SELUSRID,C' '          CLEAR THE FIELD\n         MVC   SELUSRID+1(7),SELUSRID\n         LA    R6,SELUSRID\n         EX    R5,MVCREC              COPY THE PARM INFOMRATION\n         MVI   ISUSRID,YES            SET THIS IS A CRITERIA\n         B     P1P8000\n* FIELD TOO LONG\nP1P2610  EQU   *\n         MVC   MSGBUFTX(36),=CL36'JOF046E USERID exceeds 8 characters:'\n         LA    R8,37\n         B     P1P7000\nP1P6000  EQU   *\n    MVC   MSGBUFTX(40),=CL40'JOF047E This is a unsupported parameter:'\n         LA    R8,41\n* INVALID KEYWORD\nP1P7000  EQU   *\n         LR    R5,R2           RESTORE THE PARAMETER LENGTH\n         LR    R6,R3           RESTORE THE END   ADDRESS\n         LR    R7,R4           RESTORE THE START ADDRESS\n         LA    R6,MSGBUFTX\n         AR    R6,R8\n         LA    R6,1(0,R6)\n         EX    R5,MVCREC\n         BAL   R1,LOG\n         MVI   RETCODE,X'08'   SET THE RETURN CODE 8\n         B     P1P9000\n* VALID   KEYWORD\nP1P8000  EQU   *\nP1P9000  EQU   *\n         LM    R2,R10,SVPSR\n         BR    R3\n\n***********************************************************************\n* ROUTINE: GETJOBNM\n* DESCRIPTION: GET CURRENT JOBNAME\n* INPUT:\n*    R1  : RETURN CONTROL\n*\n* UPDATE DSECT:\n*\n* JOBINFO  DSECT\n* JIJOBNM  DS    CL8                JOBNAME\n* JIPRCNM  DS    CL8                PROCEDURE NAME\n* JISTPNM  DS    CL8                STEP NAME\n* JIJOBID  DS    CL8                JOBID\n* JIASID   DS    CL4                ADDRESS SPACE ID\n* JIUSERID DS    CL8                USER ID TO SUBMITTED THE JOB\n* JIJBTYP  DS    CL3                JOB TYPE: JOB, STC OR TSO\n* JIPGM    DS    CL8                PROGRAM NAME\n* JIOS     DS    CL24               OPERATING SYSTEM, VERSION/RELEASE\n* JISSNM   DS    CL4                SUBSYSTEM NAME, JES SUBSYSTEM\n* JISYSID  DS    CL8                SYSTEM ID\n* JOBINFLN EQU   *-JOBINFO\n*\n*---------------------------------------------------------------------*\nGJOBINFO DS        0H\n         STM       R1,R15,SVPSR\n* CLEAR THE JOBINFO WITH SPACES\n         MVI       MYJOB,C' '\n         MVC       MYJOB+1(JOBINFLN-1),MYJOB\n* ADDRESSABILITY FOR MY JOBINFO\n         LA        R9,MYJOB\n         USING     JOBINFO,R9\n* GET ASID, USERID, JOBNAME\n         LA        R2,0                  LOAD PSA ADDRESS (0)\n         USING     PSA,R2                ADDRESSABILITY FOR PSA DSECT\n         L         R2,PSAAOLD            LOAD THE ASCB ADDRESS\n         DROP      R2\n         USING     ASCB,R2               ADDRESSABILITY FOR ASCB\n* ASID: PSA->PSAAOLD(ASCB)->ASCBASID\n         XR        R1,R1\n         ICM       R1,B'0011',ASCBASID   LOAD THE HEX ASID\n         BAL       R15,CVTHEX            CONVERT IT INTO DISPLAY HEX\n         MVC       JIASID(4),4(R1)       COPY THE ASID\n         L         R3,ASCBASXB           LOAD ASXB ADDRESS\n         USING     ASXB,R3\n* USERID: PSA->PSAAOLD(ASCB)->ASCBASXB(ASXB)->ASXBUSER\n         MVC       JIUSERID(8),ASXBUSER  COPY USERID\n         DROP      R3,R2\n* GET PROGRAM NAME(JSCB), JOBID, JOB TYPE (SSIB)\n         LA        R2,0                 LOAD PSA ADDRESS (0)\n         USING     PSA,R2                ADDRESSABILITY FOR PSA DSECT\n         L         R2,PSATOLD           LOAD THE TCB ADDRESS\n         DROP      R2\n         USING     TCB,R2                ADDRESSABILITY FOR PSA DSECT\n* PROGRAM NAME: PSA->PSATOLD(TCB)->TCBJSCB(JSCB)->JSCBPGMN\n         L         R1,TCBJSCB           LOAD JSCB ADDRESS\n         USING     IEZJSCB,R1\n         MVC       JIPGM(8),JSCBPGMN     COPY PROGRAM NAME\n         L         R1,JSCBSSIB          LOAD SSIB ADDRESS\n         DROP      R1\n         USING     SSIB,R1\n* JOBID: PSA->PSATOLD(TCB)->TCBJSCB(JSCB)->JSCBSSIB(SSIB)->SSIBJBID\n         MVC       JIJOBID(8),SSIBJBID   COPY JOBID\n         MVC       JIJBTYP(3),SSIBJBID   COPY JOB TYPE\n         MVC       JISSNM(4),SSIBSSNM    COPY SUBSYSTEM NAME\n         DROP      R1\n* JOBNAME : PSA->PSATOLD(TCB)->TCBTIO(TIOT)->TIOCNJOB\n* STEPNAME: PSA->PSATOLD(TCB)->TCBTIO(TIOT)->TIOCPSPN\n* PROCNAME: PSA->PSATOLD(TCB)->TCBTIO(TIOT)->TIOCJSTN\n         L         R3,TCBTIO            LOAD TIOT ADDRESS\n         USING     TIOT1,R3\n         MVC       JIJOBNM(8),TIOCNJOB   GET THE JOBNAME\n         MVC       JISTPNM(8),TIOCSTPN   COPY JOB STEP NAME (W/O PROC)\n         CLI       TIOCJSTN,C' '         THE STEP NAME EMPTY?\n         BE        GTJN2000              YES, NO PROCEDURE\n         MVC       JIPRCNM(8),TIOCPSTN   COPY JOB PROC NAME\n         MVC       JISTPNM(8),TIOCJSTN   COPY JOB STEP NAME\nGTJN2000 EQU       *\n         DROP      R3,R2\n* SYSTEM ID: PSA->FLCCVT(CVT)->CVTSMCA(SMCA)->SMCASID\n         LA        R2,0                   LOAD PSA ADDRESS (0)\n         USING     PSA,R2                 ADDRESSABILITY FOR PSA DSECT\n         L         R2,FLCCVT              LOAD THE CVT ADDRESS\n         DROP      R2\n         USING     CVT,R2                 ADDRESSABILITY FOR PSA DSECT\n         L         R3,CVTSMCA             LOAD SMF CONTROL AREA (SMCA)\n         USING     SMCABASE,R3\n         MVC       JISYSID(4),SMCASID     COPY SYSTEM NAME\n         DROP      R3\n* OS : PSA->FLCCVT(CVT)->CVTECVT(ECVT)->ECVTPNAM\n* VER: PSA->FLCCVT(CVT)->CVTECVT(ECVT)->ECVTPVER\n* REL: PSA->FLCCVT(CVT)->CVTECVT(ECVT)->ECVTPREL\n         L         R3,CVTECVT             LOAD ECVT\n         USING     ECVT,R3\n         MVC       JIOS(16),ECVTPNAM      COPY OS NAME\n         LA        R1,JIOS\n         LA        R14,16\n         BAL       R15,FINDEOS\n         MVI       1(R1),C'V'\n         MVC       2(2,R1),ECVTPVER       COPY OS VERSION\n         MVI       4(R1),C'.'\n         MVC       5(2,R1),ECVTPREL       COPY OS RELEASE\n         DROP      R3\n         DROP      R2\nGTJN8000 EQU       *\n         MVC       JOBNAME,JIJOBNM          COPY THE JOBNAME\n         DROP      R9\n         LM        R1,R15,SVPSR\n         BR        R1\n*\n***********************************************************************\n* ROUTINE: SJOBINFO\n* DESCRIPTION: SHOW CURRENT RUNNING JOB INFORMATION\n* INPUT:\n*    R1  : RETURN CONTROL\n* RETURN\n*---------------------------------------------------------------------*\nSJOBINFO DS        0H\n         STM       R1,R15,SVPSR\n* ADDRESSABILITY FOR MY JOBINFO\n         LA        R9,MYJOB\n         USING     JOBINFO,R9\n* SHOW JOBINFO\n         MVC       MSGBUFTX(32),=CL32'JOF100I SYSTEM ENVIRONMENT INFO.'\n         BAL       R1,LOG\n         MVC       MSGBUFTX(23),=CL23'JOF101I Current jobname'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(8),JIJOBNM\n         BAL       R1,LOG\n         MVC       MSGBUFTX(22),=CL22'JOF102I Current job ID'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(8),JIJOBID\n         BAL       R1,LOG\n         MVC       MSGBUFTX(24),=CL24'JOF103I Address space ID'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(4),JIASID\n         BAL       R1,LOG\n         MVC       MSGBUFTX(25),=CL25'JOF104I Current procedure'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(8),JIPRCNM\n         BAL       R1,LOG\n         MVC       MSGBUFTX(24),=CL24'JOF105I Current job step'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(8),JISTPNM\n         BAL       R1,LOG\n         MVC       MSGBUFTX(22),=CL22'JOF106I Submit user ID'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(8),JIUSERID\n         BAL       R1,LOG\n         MVC       MSGBUFTX(25),=CL25'JOF107I Running task type'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(3),JIJBTYP\n         BAL       R1,LOG\n         MVC       MSGBUFTX(28),=CL28'JOF108I Running Program Name'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(8),JIPGM\n         BAL       R1,LOG\n         MVC       MSGBUFTX(24),=CL24'JOF109I Operating System'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(24),JIOS\n         BAL       R1,LOG\n         MVC       MSGBUFTX(26),=CL26'JOF110I Job subsystem name'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(4),JISSNM\n         BAL       R1,LOG\n         MVC       MSGBUFTX(21),=CL21'JOF111I SMF system ID'\n         MVI       MSGBUFTX+28,C':'\n         MVC       MSGBUFTX+30(8),JISYSID\n         BAL       R1,LOG\n         DROP      R9\n         LM        R1,R15,SVPSR\n         BR        R1\n\n\n***********************************************************************\n* ROUTINE: LOG\n* DESCRIPTION: WRITE LOG TO SYSPRINT DD\n* INPUT:\n*    R1  : RETURN CONTROL\n* MSGBUFTX: THE MESSAGE TO BE DISPLAYED\n* RETURN\n*---------------------------------------------------------------------*\nLOG      EQU   *\n         CLI   SPROPNFL,YES       IS THE SYSPRINT PROVIDED?\n         BNE   LOG9900            NO, JUST SKIP THE LOG\n         STM   R1,R15,SVLOG       SAVE R1-R7 REGISTERS\n* UPDATE TIME AND DATE\n         TIME  DEC,DATESAVE,LINKAGE=SYSTEM,DATETYPE=YYYYMMDD\n         MVC   MSGBUFCC(TSTMPTNL),TSTMPTN   COPY TIME EDIT PATTERN\n         ED    MSGBUFCC+11(9),DATEAREA+1 EDIT TIME\n         ED    MSGBUFCC(12),DATEAREA+9   EDIT DATE\n         MVI   MSGBUFCC+11,X'40'            SAVE X'01'\n* MESSAGE PAGE BREAK PROCESSING\n         CP    MSGCTR,P0          PAGE BREAKER?\n         BE    LOG4100\n         CP    MSGCTR,P50         PAGE BREAKER?\n         BNE   LOG4200\n         ZAP   MSGCTR,P0          RESET THE COUNTER\nLOG4100  MVI   MSGBUFCC,C'1'      SET CC BYTE TO SPACE\n         B     LOG4300\n* NORMAL LINES\nLOG4200  MVI   MSGBUFCC,C' '\nLOG4300  AP    MSGCTR,P1\n         PUT   SYSPRINT,MSGBUF      WRITE THE MESSAGE TO SYSPRINT\nLOG9000  EQU   *\n         MVI   MSGBUFTX,C' '\n         MVC   MSGBUFTX+1(131),MSGBUFTX\n         LM    R1,R15,SVLOG        RESTORE R1-R7 REGISTERS\nLOG9900  BR    R1\n\n***********************************************************************\n* SHOW HELP MESSAGE BY CALLING OFLHELP PROGRAM\n***********************************************************************\nSHOWHELP EQU  *\n         STM   R2,R3,SVL2\n         LA    R2,MSGINFO          ; LOAD MESSAGE INFO SECTION\n         CALL  OFLHELP             ; CALL TO SHOW MESSAGE\n         STCM  R15,B'0001',RETCODE ; SAVE RETURN CODE\n         LM    R2,R3,SVL2\n         BR    R3\n***********************************************************************\n***********************************************************************\n*        PROGRAM CONSTANTS DATA AREA\n***********************************************************************\n***********************************************************************\n         LTORG\n*--------------------------------------------------------------*\n*   Compare Instruction equates                                *\n*--------------------------------------------------------------*\nGT       EQU   2                   A HIGH\nLT       EQU   4                   A LOW\nNE       EQU   7                   A NOT EQUAL B\nEQ       EQU   8                   A EQUAL B\nGE       EQU   11                  A NOT LOW\nLE       EQU   13                  A NOT HIGH\n*--------------------------------------------------------------*\nYES      EQU   X'1'              ; YES\nNO       EQU   X'0'              ; NO\nMVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5\nMCTPFF   EQU   X'8B'             ; THE FIRST BYTE OF FIRST MC RECORD\nCCTPFF   EQU   C'1'              ; CC BYTE '1' FORM FEED\n* TRANSLATE TABLE\nTRANSLAT DS    0XL256              Table for translation to EBCDIC\n         ORG   TRANSLAT+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n* OUTPUT DATASET SEQUENCE NUMBER\nSEQID    DC    C'ABCDEFGHIJKLMOPGRSTUVWXYZ0123456789'\nODSTSMX  EQU   *-SEQID             MAX OUT DATASET TEST RETRY\n*************************************************************\n* PACKED DECIMAL CONSTANTS FOR MESSAGE PROCESSING\nP50      DC    PL2'60'       PAGE BREAKER LINES\nP1       DC    PL1'1'\nP0       DC    PL1'0'\n         DS    0F\nTRKSIZE  DC    XL4'0000DA00'       THE SIZE OF A TRACK\n*---------------------------------------------------------------------*\n* SYSPRINT DCB\nMSGINFO  DS    0D\nMSGCTR   DS    PL2                ;MESSAGE COUNTER\nSPROPNFL DS    XL1            0 FOR NOT OPENED, 1 FOR OPENED\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=133\nMSGINFOL EQU   *-MSGINFO\n* INPUT DCB\nINDCB    DCB   DSORG=PS,           DCB for open/close                  X\n               MACRF=GL,                                               X\n               EODAD=INDCBEOF,                                         X\n               DDNAME=SYSIDS\n* OUTPUT DCB\nOUTDCB   DCB   DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               RECFM=VBA,                                              X\n               LRECL=260,                                              X\n               DDNAME=SYSODS\n* EXTRACT LIST FORM                                           *\nXTPRML   EXTRACT COMMADDR,FIELDS=(COMM),MF=L\nCOMMADDR DC    A(0)                Address of stuff from EXTRACT\n* TIME AND DATE EDIT FORMATS FOR DATASET NAME\nDATEPTN  DC    X'40212020202120402020202021202120'\n* EDIT MEANING:  b ( d d d d d b ( d d d d d d d\nDATEPTNL EQU   *-DATEPTN\n\n* TIME AND DATE EDIT FORMATS FOR LOGS\n*                0 1 2 3 4 5 6 7 8 9 10111213141516171819\nTSTMPTN  DC    X'F021202020612120612120F021207A21207A2120'\n* EDIT MEANING:  S y y y y / m m / d d s h h : m m : s s\nTSTMPTNL EQU   *-TSTMPTN\n\nODSNPTN  DC    XL4'40212020'          OUTOUT DATASET ID PATTERN\n* INSERT RECORD FORMAT\nINSRECPT DC    C'1**JOF700I JOBNAME(        ),JOBID(        ),'\n         DC    C'DDNAME(        ),RECORDS(        )**'\nINSRECLN EQU   *-INSRECPT\n\nINIMSG01 DC    CL45'JOF001I Welcome to JES Spool Offload Program.'\nINIMSG02 DC    CL50'JOF002I Purpose    : Offload JES spool to datasets'\nINIMSG03 DC    CL34'JOF003I Design     : Hunter Zhou.'\nINIMSG04 DC    CL45'JOF004I Support    : zhough2000@yahoo.com    '\nINIMSG05 DC    CL35'JOF005I Last Update: February, 2004'\nINIMSG06 DC    86C'*'\nINIMSG07 DC    CL51'JOF038E Required parameter \"H\" for HLQ is missing.'\nINIMSG08 DC    CL46'JOF039E No selection criteria in EXEC PARM.'\nINIMSG09 DC    CL36'JOF070I Offload Activity Log Begins.'\nINIMSG10 DC    0CL87\n         DC    CL43'MSG ID  COMMAND JOB NAME JOB ID    RECORDS '\n         DC    CL44'DATASET: hlq.jobname.Ddate.Jjobid.Ttimeid'\nINIMSG11 DC    0CL87\n         DC    CL43'======= ======= ======== ======== ======== '\n         DC    CL44'============================================'\n\n*-------------------------------------------------------------*\n*        Dynamic allocation work area                         *\n*-------------------------------------------------------------*\nS99RBLEN EQU   S99RBEND-S99RB      EQUATE for length of S99RB\n* SVC 99 POINTER FOR R1\n@LDAS99  DS    0F\n         DC    A(LDAS99RB)         S99RBPTR,pointer to S99RB\n         DS    0F\nLDAS99RB DC    XL(S99RBLEN)'00'    area for the RB\n*\n*-------------------------------------------------------------*\n*        Allocation text unit table for input dataset         *\n*-------------------------------------------------------------*\nLDATXTAL DS    0F                  Allocation text unit ptrs\n         DC    A(LDADSNAM)         First pointer\n         DC    A(LDASSNAM)         Second pointer\nLDATXTA1 DC    A(0)                THIRD  pointer\n         DC    A(X'80000000'+LDADDNAL)       LAST    pointer\nLDATXTUN DS    0F                  Deallocation text unit ptrs\n         DC    A(X'80000000'+LDADDNUN)       LAST  pointer\n*-------------------------------------------------------------*\n*        Allocation text units                                *\n*-------------------------------------------------------------*\nLDADSNAM DC    Y(DALDSNAM)         DSN to be allocated   1st\n         DC    Y(1)                  One entry\n         DC    Y(L'LDADSN)           Length of entry\nLDADSN   DC    CL44' '               Data set name\nLDASSNAM DC    Y(DALSSREQ)         Subsystem request     2nd\n         DC    Y(1)                  One entry\n         DC    Y(L'LDAJES)           Length of entry\nLDAJES   DC    CL4'JES2'               Subsystem name\nLDADDNAL DC    Y(DALDDNAM)         DDname returned       3rd\n         DC    Y(1)                  One entry\n         DC    Y(L'LDADDNMA)         Length of entry\nLDADDNMA DC    CL8'SYSIDS'             DDname\n*-------------------------------------------------------------*\n*        Unallocation text units                              *\n*-------------------------------------------------------------*\nLDADDNUN DC    Y(DUNDDNAM)         Unallocate DDname     1st\n         DC    Y(1)                  One entry\n         DC    Y(L'LDADDNMU)         Length of entry\nLDADDNMU DC    CL8'SYSIDS'           DDname to unallocate\n*\n*-------------------------------------------------------------*\n*        Allocation text unit table for new output dataset    *\n*-------------------------------------------------------------*\nLDOTXTAL DS    0F                  Allocation text unit ptrs\n         DC    A(LDODSNAM)         pointer table\n         DC    A(LDOPRIME)\n         DC    A(LDOSECND)\n         DC    A(LDOLRECL)\n         DC    A(LDODDNAL)\n         DC    A(LDOTRK)\n         DC    A(LDORLSE)\n*        DC    A(LDOCLOSE)\n         DC    A(LDOSTATS)\n         DC    A(LDONDISP)\n         DC    A(LDOCDISP)\n         DC    A(LDOUNIT)\n         DC    A(LDODSORG)\n         DC    A(X'80000000'+LDORECFM)       LAST    pointer\nLDOTXTUN DS    0F                  Deallocation text unit ptrs\n         DC    A(X'80000000'+LDODDNUN)       LAST    pointer\n*-------------------------------------------------------------*\n*        Allocation text units                                *\n*-------------------------------------------------------------*\n*!dataset name\nLDODSNAM DC    Y(DALDSNAM)         DSN to be allocated   1st\n         DC    Y(1)                  One entry\n         DC    Y(L'LDODSN)           Length of entry\nLDODSN   DC    CL44' '               Data set name\n*!Primary Space quantity\nLDOPRIME DC    Y(DALPRIME)         Primary Space quantity\n         DC    Y(1)                  One entry\n         DC    Y(L'LDOPRIM)          Length of entry\nLDOPRIM  DC    XL3'00'               DDname\n*!Secondary Space quantity\nLDOSECND DC    Y(DALSECND)         Secondary Space quantity\n         DC    Y(1)                  One entry\n         DC    Y(L'LDOSCND)          Length of entry\nLDOSCND  DC    XL3'00'               DDname\n*!LRECL=\nLDOLRECL DC    Y(DALLRECL)         LOGICAL RECORD LENGTH\n         DC    Y(1)                  One entry\n         DC    Y(L'LDORECL)          Length of entry\nLDORECL  DC    XL2'00FF'             LRECL=255\n* DD name\nLDODDNAL DC    Y(DALDDNAM)         DDname returned       3rd\n         DC    Y(1)                  One entry\n         DC    Y(L'LDODDNMA)         Length of entry\nLDODDNMA DC    CL8'SYSODS'         DEFAULT DDNAME SYSODS\n* Status\nLDOSTATS DC    Y(DALSTATS)         Status (disposition)\n         DC    Y(1)                  One entry\n         DC    Y(L'LDOSTAT)          Length of entry\nLDOSTAT  DC    XL1'04'               DISP=(NEW,,)\n* Noraml Disposition\nLDONDISP DC    Y(DALNDISP)         Status (disposition)\n         DC    Y(1)                  One entry\n         DC    Y(L'LDONDSP)          Length of entry\nLDONDSP  DC    XL1'02'               DISP=(,CATLG,)\n* Conditional Disposition\nLDOCDISP DC    Y(DALCDISP)         Status (disposition)\n         DC    Y(1)                  One entry\n         DC    Y(L'LDOCDSP)          Length of entry\nLDOCDSP  DC    XL1'04'               DISP=(,,DELETE)\n* Track space type\nLDOTRK   DC    Y(DALTRK)           Status (disposition)\n         DC    Y(0)                  One entry\n* Unused Space release\nLDORLSE  DC    Y(DALRLSE)          Status (disposition)\n         DC    Y(0)                  One entry\n* Unallocate at CLOSE time\nLDOCLOSE DC    Y(DALCLOSE)         Status (disposition)\n         DC    Y(0)                  One entry\n* UNIT=SYSDA\nLDOUNIT  DC    Y(DALUNIT)          Status (disposition)\n         DC    Y(1)                  One entry\n         DC    Y(L'LDOUNT)           Length of entry\nLDOUNT   DC    CL5'SYSDA'            DDname\n* DSORG=PS\nLDODSORG DC    Y(DALDSORG)         Status (disposition)\n         DC    Y(1)                  One entry\n         DC    Y(L'LDODSO)           Length of entry\nLDODSO   DC    XL2'4000'             DSORG=PS\n* RECFM=VBA\nLDORECFM DC    Y(DALRECFM)         Status (disposition)\n         DC    Y(1)                  One entry\n         DC    Y(L'LDORECF)          Length of entry\nLDORECF  DC    XL1'54'               RECFM=VBA\n*-------------------------------------------------------------*\n*        Unallocation text units                              *\n*-------------------------------------------------------------*\nLDODDNUN DC    Y(DUNDDNAM)         Unallocate DDname     1st\n         DC    Y(1)                  One entry\n         DC    Y(L'LDODDNMU)         Length of entry\nLDODDNMU DC    CL8'SYSODS'         DEFAULT DDNAME SYSODS\n*\n*\n* TEST OUTPUT DATASET EXISTANCE USING LOCATE MACRO\nINDAB    CAMLST NAME,LDODSN,,DSASTART\n***********************************************************************\n\n\n***********************************************************************\n***********************************************************************\n*        PROGRAM DSECTS: DYNAMIC ALLOCATED STORAGE\n***********************************************************************\n***********************************************************************\nDSASTART DS    0D\nDSA      DSECT\n* SAVE AREA MUST BE THE FIRST OF DSA DSECT,\n* BECAUSE R13 WILL BE THE BASE REGISTERS FOR THIS DSA,\n* AND THE ADDRESS OF OUR SAVE AREA FOR LINKAGE CONVENTION.\nSAVEAREA DS    18F                ;REGISTER SAVE AREA\nSVL1     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 1\nSVL2     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 2\nSVL3     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 3\nSVL4     DS    3F                 ;REGISTER SAVE AREA ROUTINE LEVEL 3\nSVLOG    DS    16F                ;REGISTER SAVE AREA FOR WRITELOG\nSVPSR    DS    16F                ;REGISTER SAVE AREA FOR WRITELOG\nRETCODE  DS    XL1                ;RETURN CODE\nPARMADR  DS    F                  ;EXEC PARM ADDRESS\n\n* CURRENT JOBNAME\nJOBNAME  DS    CL8\n\n* pointer save storage\nWORKSSOB DS    F                  ;START ADDR OF SSOB\n***********************************************************************\n* storage for building SSOB\nBUFSSPTR DS    F             Pointer to SSOB, Used by IEFSSREQ\nBUFSSOB  DS    CL(SSOBHSIZ)  Buffer for SSOB\nBUFSSS2  DS    CL(SSS2SIZE)  Buffer for SSS2\nBUFSSLEN EQU   *-BUFSSOB     Total buffer length\n\n***********************************************************************\n* SELECTION CRERTIRIA FOR SAPI\nSRSTCLAS DS    CL1                JOB CLASS X'00' FOR NONE\nSRSTDEST DS    CL8                DEST, DEFAULT: LOCAL\nSRSTFORM DS    CL8                FORM, DEFAULT: NONE\nSRSTJBID DS    CL8                JOB ID, DEFAULT: NONE\nSRSTJBNM DS    CL8                JOBNAME, DEFAULT: NONE\n\n* SAPI & COMM ECB\nLDAECBL  DS    0F                  ECB list to wait on\n@WTRECB  DS    A                   SAPI ECB address\n@COMECB  DS    A                   COMM ECB address\nECBSAPI  DS    F                   SAPI ECB\nECBCOM   DS    F                   SAPI ECB\nECBSSOB  DS    F                   SSOB ECB\nZEROES   DS    F                   Dummy ECB\n\nCOMMLEN  DC    H'0'                Length of command\nCOMMBUFF DC    CL128' '            text of command\nCOMREGS  DC    6F'0'               Reg SA for COMCHECK subroutine\nOPVERB   DC    X'00'               place to keep CIBVERB\n\n\n* FLAGS:\n* REQSTAT:\nREQSTAT  DS    X              THE STATUS OF IEFSSREQ REQUEST:\nRETYES   EQU   X'0'             THERE IS A DATASET RETURNED\nRETERR   EQU   X'1'             THERE IS AN ERROR RETURNED\nRETNWK   EQU   X'2'             THERE IS NO DATASET MEET CRITERIA\n\n\n* PROCESS SPOOL DATA STAGE (MULTIPLE DATASET): SCAN OR READ\n* SCAN STAGE: TEST IF THIS LOG IS JES JOB LOG, AND\n*             COUNT THE TOTAL LINES OF ALL DATASETS IN THIS JCL LOG.\n* READ STAGE: READ ALL DATASETS AND SAVE TO OUTPUT DATASET.\nPSPSTAGE DS    X\nPSPSINIT EQU   X'0'             FIRST TIME SCANNING FOR QUALIFY\nPSPSSCAN EQU   X'1'             SECOND TIME TO READ JOB LOG\nPSPSREAD EQU   X'2'             SECOND TIME TO READ JOB LOG\n\n* SSS2 DEFAULT SELECTION CRITERIA\nSELSTART DS    0C\nSELCLASS DS    CL36              CLASS IS SELECTION CRITERIA\nSELDEST  DS    CL8               DEST  IS SELECTION CRITERIA\nSELFORM  DS    CL8               FORM  IS SELECTION CRITERIA\nSELHLQ   DS    CL14              HLQ   IS SELECTION CRITERIA\nSELJOBNM DS    CL8               JOBNAME IS SELECTION CRITERIA\nSELUSRID DS    CL8               USERID IS SELECTION CRITERIA\nSELSTLEN EQU   *-SELSTART\n\n* WHETHER OUT DATASET IS ALLOCATED YES/NO\nISODSALC DS    X\n* WHETHER OUT DATASET IS OPENED? YES/NO\nISODSOPN DS    X\n\n* WHETHER IN  DATASET IS ALLOCATED YES/NO\nISIDSALC DS    X\n* WHETHER IN  DATASET IS OPENED? YES/NO\nISIDSOPN DS    X\n\n* WHETHER OUTPUT DATASET IS UNABLE TO ALLOCATE?\n* SET IN TSTODSN FUNCTION\nISODSBAD DS    X\nISIDSBAD DS    X\n\n* WHETHER STOP COMMAND RECEIVED, YES/NO\nISSTOP   DS    X\n\n* SELECTION FLAGS\nISCLASS  DS    X              IF CLASS IS SELECTION CRITERIA, YES/NO\nISDEST   DS    X              IF DEST  IS SELECTION CRITERIA, YES/NO\nISFORM   DS    X              IF FORM  IS SELECTION CRITERIA, YES/NO\nISHLQ    DS    X              IF HLQ   IS SELECTION CRITERIA, YES/NO\nISJOBNM  DS    X              IF JOBNAME IS SELECTION CRITERIA, YES/NO\nISUSRID  DS    X              IF WRITER IS SELECTION CRITERIA, YES/NO\nISSELGV  DS    X              WHETHER THE SELECTION CRITERIA GIVEN\n\n* THE CURRENT OUTPUT DATASET NAME\nOUTLRECL DS    H                THE MAXIMUM LRECL SIZE\nOUTTRKS  DS    XL3              THE NUMBER OF TRACKS TO BE ALLOCATED\n         DS    0H\nOUTREC   DS    0XL260           OUTPUT RECORD\nOUTRECLN DS    H                RDW: LENGTH OF CURRENT RECORD\nOUTRECRS DS    H                BINARY 0\nOUTRECTX DS    XL256            ACTUAL DATA\nINSRECTX DS    CL(INSRECLN)     INSERT RECORD TEXT\n* TOTAL RECORDS IN THE JOB LOG (SUM OF RECORDS IN ALL DATASETS)\nTOTREC   DS    F\nTOTLOGS  DS    F                TOTAL NUMBER OF LOGS PROCESSED\n*OUTPUT DATASET SEQUENCE ID\nODSNSEQ  DS    A                CURRENT SEQUENCE ID ADDRESS\nODSNILC  DS    F                LOCATION OF THE OUT DSN ID\n*\n\n* THE CURRENT TEXT UNIT ADDRESS FOR SVC99 CALL\nTUADDR   DS    F\nDYNDDNAM DS    CL8              DDNAME IS ALLOCATED\n* THE CURRENT TEXT UNIT ADDRESS FOR SVC99 CALL\nALLCCODE DS    0F               RETURN CODE FOR SVC 99 ALLOCATE\nALLCCDE  DS    H                COPY OF RETURN CODE FROM R15\nALLCRSN  DS    H                COPY OF S99ERR0R\nUNALCODE DS    F                RETURN CODE FOR SVC 99 UNALLOCATE\n\n* TIME\nTIMEFM1  DS    D                STCK FORMAT,DOUBLE FULL WORD FORMAT\nTIMEFM2  DS    0CL17            DEC  CONVERTED FORMAT\n         DS    X                '01' FOR TEMPORARY BYTE\nTIMEFM2A DS    CL16             TIME MACRO FORMAT: HHMMSSssYYYYMMDD\nTIMEFM3  DS    0CL20            DEC CONVERTED FORMAT\n         DS    XL3\nTIME3TM  DS    CL4              TIME FORMAT HHMM\n         DS    XL3\nTIME3DT  DS    CL6              TIME FORMAT YYMMDD\n         DS    XL6\n\n* SSS2 VALUES RETURNED BY IEFSSREQ MACRO\nLDACLSR  DS    CL1                 Class of work returned by jes\nLDADESTR DS    CL18                Default destination of desired work\nLDAJOBIR DS    XL8                 Job id of work returned by jes\nLDAJOBNR DS    CL8                 Jobname of work returned by jes\n* MESSAGE BUFFER\nMSGBUF   DS    0CL134\nMSGBUFCC DS    CL1                ;CARRIAGE CONTROL BYTE\nMSGBUFTM DS    CL20               ;DATE AND TIME STAMP\nMSGBUFTX DS    CL120              ;SYSPRINT MESSAGE BUFFER\nMSGBUFTT DS    CL20               ;TEMPORARY BUFFER FOR ED OF TIME\n* SYSPRINT OPEN FLAG\n\n* OUTPUT LOG MESSAGE\nOJLMSG   DS    0CL133         0 FOR NOT OPENED, 1 FOR OPENED\nOJLMID   DS    CL7            MESSAGE ID\n         DS    CL1\nOJLCMD   DS    CL7            ACTION (COMMAND)\n         DS    CL1\nOJLJNM   DS    CL8            JOB NAME\n         DS    CL1\nOJLJID   DS    CL8            JOB ID\n         DS    CL1\nOJLREC   DS    CL8            TOTAL NUMBER OF RECORDS\n         DS    CL1\nOJLDSN   DS    CL44           THE OUTPUT DATASET\n         DS    CL70\n\n* WORK STORAGE\nDWORK    DS    0DL4\nDWORK1   DS    D                   Double word for working\n         DS    X                   Pad byte\nFWORK1   DS    F                   Single work for working\nDWORK2   DS    D                   Ditto\n         DS    X                   Ditto\nFWORK2   DS    F                   Ditto\n         DS    D\n* DATASET INFORMATION STORAGE FOR INDAB - LOCATE\nODSNINFO DS    0D\n         DS    265C\n*\nDATEAREA DS    0CL17              TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n         DS    X                  '01' FOR TEMPORARY BYTE\nDATESAVE DS    CL16               TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n* MODIFY COMMAND BUFFER\nMDFOPT   DS    0H                 MODIFY COMMAND BUFFER\nMDFLEN   DS    H                  MODIFY COMMAND OPTION LENGTH\nMDFTXT   DS    CL128              MODIFY COMMAND OPTION TEXT\n\n*\nJOFHMSG  DS    CL32               OFLHELP PROGRAM INFO EXCHANGE\n\n* JOB INFORMATION\nMYJOB    DS    CL(JOBINFLN)\n*---------------------------------------------------------------------*\n         DS    0D                 Round up to double word boundary\nDSALEN   EQU   *-DSA              ;LENGTH OF DATA AREA\n\nJOBINFO  DSECT\nJIJOBNM  DS    CL8                JOBNAME\nJIPRCNM  DS    CL8                PROCEDURE NAME\nJISTPNM  DS    CL8                STEP NAME\nJIJOBID  DS    CL8                JOBID\nJIASID   DS    CL4                ADDRESS SPACE ID\nJIUSERID DS    CL8                USER ID TO SUBMITTED THE JOB\nJIJBTYP  DS    CL3                JOB TYPE: JOB, STC OR TSO\nJIPGM    DS    CL8                PROGRAM NAME\nJIOS     DS    CL24               OPERATING SYSTEM, VERSION/RELEASE\nJISSNM   DS    CL4                SUBSYSTEM NAME, JES SUBSYSTEM\nJISYSID  DS    CL8                SYSTEM ID\nJOBINFLN EQU   *-JOBINFO\n***********************************************************************\n* Mapping macros\n         PRINT NOGEN\n         TITLE  'IEFJSSOB - Subsystem Option Block'\n         IEFJSSOB ,          Map SSOB header\n         TITLE  'IAZSSS2  - SAPI Extension '\nSSOBGN   EQU    *\n         IAZSSS2\n* PSA AND ASCB ASXB\n         TITLE 'PSA,ASCB  - ADDRESS SPACE TABLE'\n         IHAPSA\n         IHAASCB\n         IHAASXB\n* DSECT MAPS\n         TITLE 'CVT       - Communication Vector Table'\n         CVT   DSECT=YES\n         IHAECVT\n* TASK INPUT/OUTPUT TABLE\n         IEFTIOT1\n* TASK CONTROL BLOCK\n         IKJTCB\n* SMF CONTROL AREA\n         IEESMCA\n* JOB/STEP CONTROL BLOCK\n         IEZJSCB\n* JOB/STEP CONTROL BLOCK\n         IEFJSSIB\n* DCBD AND DYNAMIC ALLOCATION\n         TITLE 'DCBD      -                                       '\n         DCBD  DSORG=PS\n         IEFZB4D0\n         IEFZB4D2\n*\n*        TITLE 'IEFJESCT  - JES Communication Table'\n         IEFJESCT\n*        TITLE 'IEFJSBVT  -                                      '\n         IEFJSBVT\n*        TITLE 'IEFJSCVT  - Subsystem Communications Vector Table'\n         IEFJSCVT\n* COMMUNICATION AREAS\nCOM      DSECT\n         IEZCOM          COMM AREA\nCIB      DSECT\n         IEZCIB          CIB\n*---------------------------------------------------------------------*\n*  END OF PROGRAM                                                     *\n*---------------------------------------------------------------------*\n         END   OFFLOAD\n*\n*\n*\n*\n*\n*\n*\n*\n***********************************************************************\n**PROGRAM HELP CSECT **************************************************\n***********************************************************************\n***********************************************************************\nOFLHELP  CSECT\nOFLHELP  TITLE 'OFLHELP - HELP MESSAGE PROCESSING PROGRAM.'\nOFLHELP  CSECT\nOFLHELP  AMODE 31\nOFLHELP  RMODE 24\n*PROGRAM: OFLHELP\n*PURPOSE: SHOW HELP MESSAGE FOR OFFLOAD PROGRAM\n*AUTHOR : Hunter Guanghui Zhou\n*         Phone: 1-(416)-602-9567\n*         E-mail: zhough2000@yahoo.com\n*\n         YREGS\n         USING OFLHELP,R15        Establish temporary base register\n         B     JOFH0000           Branch to bypass data constants\n         DC    CL23'PROGRAM NAME(OFFLOAD)'       Module identifier\n         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'\n         DC    CL48'SAPI EXTERNAL WRITER FOR JES2 SPOOL OUTPUT'\n         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '\nBASE2REG DC    A(OFLHELP+4096)    Second base register\nBASE3REG DC    A(OFLHELP+8192)    Second base register\nJOFH0000 DS    0H\n         STM   R14,R12,12(R13)    Save caller's registers\n         L     R11,BASE2REG       second base register\n         L     R10,BASE3REG       third  base register\n         LR    R12,R15            Change base registers\n         DROP  R15                Tell assembler\n         USING OFLHELP,R12,R11,R10 Use 3 base registers\n         ST    R13,SAVEAREA+4     ;SET OUR BACKWARD LINK\n         LA    R15,SAVEAREA       ;ADDR OF OUR SAVEAREA\n         ST    R15,8(R13)         ;SET CALLER'S FORWARD LINK\n         LR    R13,R15            ;ADDR OF OUR SAVEAREA\n         ST    R2,@MSGINFO        ;SAVE MESSAGE INFORMATION ADDRESS\n         USING MSGINFO,R2         ;SAVE SYSPRINT DCB ADDRESS\n         BAL   R3,SHOWHELP        LOAD THE LAST MESSAGE ID\nRETURN   EQU   *\n         XR    R15,R15\n         ICM   R15,B'0001',RETCODE  ;LOAD THE RETURN CODE TO R9\n         L     R13,4(R13)           ;ADDR OF CALLER'S SAVEAREA\n         RETURN (14,12),RC=(15)     ;RESTORE CALLER'S REGS AND RETURN\n\n***********************************************************************\n* ROUTINE: SHOWHELP\n* DESCRIPTION: SHOW HELP MESSAGE\n* INPUT:\n*    R3  : RETURN CONTROL\n*---------------------------------------------------------------------*\nSHOWHELP DS    0H\n         LA    R5,MSGLAST         LOAD THE LAST MESSAGE ID\n         LA    R4,1\n         MVI   MSGBUFTX,C' '\n         MVC   MSGBUFTX+1(131),MSGBUFTX\n         ZAP  MSGCTR,P0          RESET THE COUNTER\nSHP1000  EQU   *\n         STC   R4,MSGID\n         BAL   R1,LOG\n         LA    R4,1(0,R4)\n         CR    R4,R5\n         BNH   SHP1000\nSHP2000  EQU   *\n         ZAP  MSGCTR,P0          RESET THE COUNTER\n         BR    R3\n\n***********************************************************************\n* ROUTINE: LOG\n* DESCRIPTION: WRITE LOG TO SYSPRINT DD\n* INPUT:\n*    R1  : RETURN CONTROL\n* MSGBUFTX: THE MESSAGE TO BE DISPLAYED\n* RETURN\n*---------------------------------------------------------------------*\nLOG      EQU   *\n         CLI  SPROPNFL,YES       IS THE SYSPRINT PROVIDED?\n         BNE  LOG9900            NO, JUST SKIP THE LOG\n         STM  R1,R15,SVLOG       SAVE R1-R7 REGISTERS\n* SEARCH MESSAGE INDEX FOR GIVEN MESSAGE ID IN MSGID\n         XR   R6,R6              CLEAR R6\n         XR   R7,R7              CLEAR R7\n         LA   R5,MSGIDX          LOAD THE START OF THE TABLE\n         IC   R6,MSGID           LOAD THE GIVEN MESSAGE ID\nLOG1000  EQU   *\n         IC   R7,0(R5)           LOAD THE CURRENT MESSAGE ID\n         CR   R6,R7              COMPARE THIS ONE TO THE GIVEN ONE.\n         BE   LOG2000\n         CLI  0(R5),MSGIXEND     GET THE END OF THE TABLE?\n         BE   LOG9000            YES, THE GIVEN MSGID IS NOT FOUND\n         LA   R5,5(,R5)          MOVE TO NEXT INDEX RECORD\n         B    LOG1000            TEST NEXT MESSAGE\n* PROCESS MESSAGE ID\nLOG2000  EQU   *\n         L    R7,1(R5)           LOAD THE MESSAGE ADDRESS\n         LH   R5,0(R7)           LOAD THE MESSAGE LENGTH\n         LA   R7,2(,R7)          LOAD THE MESSAGE BODY POSITION\n         BCTR R5,0\n         LA   R6,MSGBUFTX        COPY TO MESSAGE BUFFER\n         EX   R5,MVCREC          COPY MESSAGE TO SYSPRINT MSG BUFFER\n* PROCESS MESSAGES IN MSGBUF BUFFER.\nLOG4000 EQU   *\n* MESSAGE PAGE BREAK PROCESSING\n         CP   MSGCTR,P0          PAGE BREAKER?\n         BE   LOG4100\n         CP   MSGCTR,P50         PAGE BREAKER?\n         BNE  LOG4200\n         ZAP  MSGCTR,P0          RESET THE COUNTER\n* PAGE BREAK\nLOG4100 MVI   MSGBUFCC,C'1'      SET CC BYTE TO SPACE\n         B    LOG4300\n* NORMAL LINES\nLOG4200  MVI  MSGBUFCC,C' '\nLOG4300  AP   MSGCTR,P1\n         PUT  SYSPRINT,MSGBUF      WRITE THE MESSAGE TO SYSPRINT\nLOG9000  EQU  *\n         MVI   MSGBUFTX,C' '\n         MVC   MSGBUFTX+1(131),MSGBUFTX\n         LM    R1,R15,SVLOG        RESTORE R1-R7 REGISTERS\nLOG9900  BR   R1\n\n*************************************************************\n* PACKED DECIMAL CONSTANTS FOR MESSAGE PROCESSING\nSAVEAREA DS    18F                ;REGISTER SAVE AREA\nSVLOG    DS    16F                ;REGISTER SAVE AREA FOR WRITELOG\nRETCODE  DS    XL1                ;RETURN CODE\n\n\n*************************************************************\n* PACKED DECIMAL CONSTANTS FOR MESSAGE PROCESSING\nYES      EQU   X'1'              ; YES\nNO       EQU   X'0'              ; NO\nP50      DC    PL2'60'       PAGE BREAKER LINES\nP1       DC    PL1'1'\nP0       DC    PL1'0'\nMVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5\n* MESSAGE INDEX TABLE\n*\nMSGIDX   DS    0C\n         DC    AL1(MSG01I),AL4(MSG01)        * MSG ID 01\n         DC    AL1(MSG02I),AL4(MSG02)        * MSG ID 02\n         DC    AL1(MSG03I),AL4(MSG03)        * MSG ID 03\n         DC    AL1(MSG04I),AL4(MSG04)        * MSG ID 04\n         DC    AL1(MSG05I),AL4(MSG05)        * MSG ID 05\n         DC    AL1(MSG06I),AL4(MSG06)        * MSG ID 06\n         DC    AL1(MSG07I),AL4(MSG07)        * MSG ID 07\n         DC    AL1(MSG08I),AL4(MSG08)        * MSG ID 08\n         DC    AL1(MSG09I),AL4(MSG09)        * MSG ID 09\n         DC    AL1(MSG0AI),AL4(MSG0A)        * MSG ID 0A\n         DC    AL1(MSG0BI),AL4(MSG0B)        * MSG ID 0B\n         DC    AL1(MSG0CI),AL4(MSG0C)        * MSG ID 0C\n         DC    AL1(MSG0DI),AL4(MSG0D)        * MSG ID 0D\n         DC    AL1(MSG0EI),AL4(MSG0E)        * MSG ID 0E\n         DC    AL1(MSG0FI),AL4(MSG0F)        * MSG ID 0F\n         DC    AL1(MSG10I),AL4(MSG10)        * MSG ID 10\n         DC    AL1(MSG11I),AL4(MSG11)        * MSG ID 11\n         DC    AL1(MSG12I),AL4(MSG12)        * MSG ID 12\n         DC    AL1(MSG13I),AL4(MSG13)        * MSG ID 13\n         DC    AL1(MSG14I),AL4(MSG14)        * MSG ID 14\n         DC    AL1(MSG15I),AL4(MSG15)        * MSG ID 15\n         DC    AL1(MSG16I),AL4(MSG16)        * MSG ID 16\n         DC    AL1(MSG17I),AL4(MSG17)        * MSG ID 17\n         DC    AL1(MSG18I),AL4(MSG18)        * MSG ID 18\n         DC    AL1(MSG19I),AL4(MSG19)        * MSG ID 19\n         DC    AL1(MSG1AI),AL4(MSG1A)        * MSG ID 1A\n         DC    AL1(MSG1BI),AL4(MSG1B)        * MSG ID 1B\n         DC    AL1(MSG1CI),AL4(MSG1C)        * MSG ID 1C\n         DC    AL1(MSG1DI),AL4(MSG1D)        * MSG ID 1D\n         DC    AL1(MSG1EI),AL4(MSG1E)        * MSG ID 1E\n         DC    AL1(MSG1FI),AL4(MSG1F)        * MSG ID 1F\n         DC    AL1(MSG20I),AL4(MSG20)        * MSG ID 20\n         DC    AL1(MSG21I),AL4(MSG21)        * MSG ID 21\n         DC    AL1(MSG22I),AL4(MSG22)        * MSG ID 22\n         DC    AL1(MSG23I),AL4(MSG23)        * MSG ID 23\n         DC    AL1(MSG24I),AL4(MSG24)        * MSG ID 24\n         DC    AL1(MSG25I),AL4(MSG25)        * MSG ID 25\n         DC    AL1(MSG26I),AL4(MSG26)        * MSG ID 26\n         DC    AL1(MSG27I),AL4(MSG27)        * MSG ID 27\n         DC    AL1(MSG28I),AL4(MSG28)        * MSG ID 28\n         DC    AL1(MSG29I),AL4(MSG29)        * MSG ID 29\n         DC    AL1(MSG2AI),AL4(MSG2A)        * MSG ID 2A\n         DC    AL1(MSG2BI),AL4(MSG2B)        * MSG ID 2B\n         DC    AL1(MSG2CI),AL4(MSG2C)        * MSG ID 2C\n         DC    AL1(MSG2DI),AL4(MSG2D)        * MSG ID 2D\n         DC    AL1(MSG2EI),AL4(MSG2E)        * MSG ID 2E\n         DC    AL1(MSG2FI),AL4(MSG2F)        * MSG ID 2F\n         DC    AL1(MSG30I),AL4(MSG30)        * MSG ID 30\n         DC    AL1(MSG31I),AL4(MSG31)        * MSG ID 31\n         DC    AL1(MSG32I),AL4(MSG32)        * MSG ID 32\n         DC    AL1(MSG33I),AL4(MSG33)        * MSG ID 33\n         DC    AL1(MSG34I),AL4(MSG34)        * MSG ID 34\n         DC    AL1(MSG35I),AL4(MSG35)        * MSG ID 35\n         DC    AL1(MSG36I),AL4(MSG36)        * MSG ID 36\n         DC    AL1(MSG37I),AL4(MSG37)        * MSG ID 37\n         DC    AL1(MSG38I),AL4(MSG38)        * MSG ID 38\n         DC    AL1(MSG39I),AL4(MSG39)        * MSG ID 39\n         DC    AL1(MSG3AI),AL4(MSG3A)        * MSG ID 3A\n         DC    AL1(MSG3BI),AL4(MSG3B)        * MSG ID 3B\n         DC    AL1(MSG3CI),AL4(MSG3C)        * MSG ID 3C\n         DC    AL1(MSG3DI),AL4(MSG3D)        * MSG ID 3D\n         DC    AL1(MSG3EI),AL4(MSG3E)        * MSG ID 3E\n         DC    AL1(MSG3FI),AL4(MSG3F)        * MSG ID 3F\n         DC    AL1(MSG40I),AL4(MSG40)        * MSG ID 40\n         DC    AL1(MSG41I),AL4(MSG41)        * MSG ID 41\n         DC    AL1(MSG42I),AL4(MSG42)        * MSG ID 42\n         DC    AL1(MSG43I),AL4(MSG43)        * MSG ID 43\n         DC    AL1(MSG44I),AL4(MSG44)        * MSG ID 44\n         DC    AL1(MSG45I),AL4(MSG45)        * MSG ID 45\n         DC    AL1(MSG46I),AL4(MSG46)        * MSG ID 46\n         DC    AL1(MSG47I),AL4(MSG47)        * MSG ID 47\n         DC    AL1(MSG48I),AL4(MSG48)        * MSG ID 48\n         DC    AL1(MSG49I),AL4(MSG49)        * MSG ID 49\n         DC    AL1(MSG4AI),AL4(MSG4A)        * MSG ID 4A\n         DC    AL1(MSG4BI),AL4(MSG4B)        * MSG ID 4B\n         DC    AL1(MSG4CI),AL4(MSG4C)        * MSG ID 4C\n         DC    AL1(MSG4DI),AL4(MSG4D)        * MSG ID 4D\n         DC    AL1(MSG4EI),AL4(MSG4E)        * MSG ID 4E\n         DC    AL1(MSG4FI),AL4(MSG4F)        * MSG ID 4F\n         DC    AL1(MSG50I),AL4(MSG50)        * MSG ID 50\n         DC    AL1(MSG51I),AL4(MSG51)        * MSG ID 51\n         DC    AL1(MSG52I),AL4(MSG52)        * MSG ID 52\n         DC    AL1(MSG53I),AL4(MSG53)        * MSG ID 53\n         DC    AL1(MSG54I),AL4(MSG54)        * MSG ID 54\n         DC    AL1(MSG55I),AL4(MSG55)        * MSG ID 55\n         DC    AL1(MSG56I),AL4(MSG56)        * MSG ID 56\n         DC    AL1(MSG57I),AL4(MSG57)        * MSG ID 57\n         DC    AL1(MSG58I),AL4(MSG58)        * MSG ID 58\n         DC    AL1(MSG59I),AL4(MSG59)        * MSG ID 59\n         DC    AL1(MSG5AI),AL4(MSG5A)        * MSG ID 5A\n         DC    AL1(MSG5BI),AL4(MSG5B)        * MSG ID 5B\n         DC    AL1(MSG5CI),AL4(MSG5C)        * MSG ID 5C\n         DC    AL1(MSG5DI),AL4(MSG5D)        * MSG ID 5D\n         DC    AL1(MSG5EI),AL4(MSG5E)        * MSG ID 5E\n         DC    AL1(MSG5FI),AL4(MSG5F)        * MSG ID 5F\n         DC    AL1(MSG60I),AL4(MSG60)        * MSG ID 60\n         DC    AL1(MSG61I),AL4(MSG61)        * MSG ID 61\n         DC    AL1(MSG62I),AL4(MSG62)        * MSG ID 62\n         DC    AL1(MSG63I),AL4(MSG63)        * MSG ID 63\n         DC    AL1(MSG64I),AL4(MSG64)        * MSG ID 64\n         DC    AL1(MSG65I),AL4(MSG65)        * MSG ID 65\n         DC    AL1(MSG66I),AL4(MSG66)        * MSG ID 66\n         DC    AL1(MSG67I),AL4(MSG67)        * MSG ID 67\n         DC    AL1(MSG68I),AL4(MSG68)        * MSG ID 68\n         DC    AL1(MSG69I),AL4(MSG69)        * MSG ID 69\n         DC    AL1(MSG6AI),AL4(MSG6A)        * MSG ID 6A\n         DC    AL1(MSG6BI),AL4(MSG6B)        * MSG ID 6B\n         DC    AL1(MSG6CI),AL4(MSG6C)        * MSG ID 6C\n         DC    AL1(MSG6DI),AL4(MSG6D)        * MSG ID 6D\n         DC    AL1(MSG6EI),AL4(MSG6E)        * MSG ID 6E\n         DC    AL1(MSG6FI),AL4(MSG6F)        * MSG ID 6F\n         DC    AL1(MSG70I),AL4(MSG70)        * MSG ID 70\n         DC    AL1(MSG71I),AL4(MSG71)        * MSG ID 71\n         DC    AL1(MSG72I),AL4(MSG72)        * MSG ID 72\n         DC    AL1(MSG73I),AL4(MSG73)        * MSG ID 73\n         DC    AL1(MSG74I),AL4(MSG74)        * MSG ID 74\n         DC    AL1(MSG75I),AL4(MSG75)        * MSG ID 75\n         DC    AL1(MSG76I),AL4(MSG76)        * MSG ID 76\n         DC    AL1(MSG77I),AL4(MSG77)        * MSG ID 77\n         DC    AL1(MSG78I),AL4(MSG78)        * MSG ID 78\n         DC    AL1(MSG79I),AL4(MSG79)        * MSG ID 79\n         DC    AL1(MSG7AI),AL4(MSG7A)        * MSG ID 7A\n         DC    AL1(MSG7BI),AL4(MSG7B)        * MSG ID 7B\n         DC    AL1(MSG7CI),AL4(MSG7C)        * MSG ID 7C\n         DC    AL1(MSG7DI),AL4(MSG7D)        * MSG ID 7D\n         DC    AL1(MSG7EI),AL4(MSG7E)        * MSG ID 7E\n         DC    AL1(MSG7FI),AL4(MSG7F)        * MSG ID 7F\n         DC    AL1(MSG80I),AL4(MSG80)        * MSG ID 80\n         DC    AL1(MSG81I),AL4(MSG81)        * MSG ID 81\n         DC    AL1(MSG82I),AL4(MSG82)        * MSG ID 82\n         DC    AL1(MSG83I),AL4(MSG83)        * MSG ID 83\n         DC    AL1(MSG84I),AL4(MSG84)        * MSG ID 84\n         DC    AL1(MSG85I),AL4(MSG85)        * MSG ID 85\n         DC    AL1(MSG86I),AL4(MSG86)        * MSG ID 86\n         DC    AL1(MSG87I),AL4(MSG87)        * MSG ID 87\n         DC    AL1(MSG88I),AL4(MSG88)        * MSG ID 88\n         DC    AL1(MSG89I),AL4(MSG89)        * MSG ID 89\n         DC    AL1(MSG8AI),AL4(MSG8A)        * MSG ID 8A\n         DC    AL1(MSG8BI),AL4(MSG8B)        * MSG ID 8B\n         DC    AL1(MSG8CI),AL4(MSG8C)        * MSG ID 8C\n         DC    AL1(MSG8DI),AL4(MSG8D)        * MSG ID 8D\n         DC    AL1(MSG8EI),AL4(MSG8E)        * MSG ID 8E\n         DC    AL1(MSG8FI),AL4(MSG8F)        * MSG ID 8F\n         DC    AL1(MSG90I),AL4(MSG90)        * MSG ID 90\n         DC    AL1(MSG91I),AL4(MSG91)        * MSG ID 91\n         DC    AL1(MSG92I),AL4(MSG92)        * MSG ID 92\n         DC    AL1(MSG93I),AL4(MSG93)        * MSG ID 93\n         DC    AL1(MSG94I),AL4(MSG94)        * MSG ID 94\n         DC    AL1(MSG95I),AL4(MSG95)        * MSG ID 95\n         DC    AL1(MSG96I),AL4(MSG96)        * MSG ID 96\n         DC    AL1(MSG97I),AL4(MSG97)        * MSG ID 97\n         DC    AL1(MSG98I),AL4(MSG98)        * MSG ID 98\n         DC    AL1(MSG99I),AL4(MSG99)        * MSG ID 99\n         DC    AL1(MSG9AI),AL4(MSG9A)        * MSG ID 9A\n         DC    AL1(MSG9BI),AL4(MSG9B)        * MSG ID 9B\n         DC    AL1(MSG9CI),AL4(MSG9C)        * MSG ID 9C\n         DC    AL1(MSG9DI),AL4(MSG9D)        * MSG ID 9D\n         DC    AL1(MSG9EI),AL4(MSG9E)        * MSG ID 9E\n         DC    AL1(MSG9FI),AL4(MSG9F)        * MSG ID 9F\n         DC    AL1(MSGA0I),AL4(MSGA0)        * MSG ID A0\n         DC    AL1(MSGA1I),AL4(MSGA1)        * MSG ID A1\n         DC    AL1(MSGA2I),AL4(MSGA2)        * MSG ID A2\n         DC    AL1(MSGA3I),AL4(MSGA3)        * MSG ID A3\n         DC    AL1(MSGA4I),AL4(MSGA4)        * MSG ID A4\n         DC    AL1(MSGA5I),AL4(MSGA5)        * MSG ID A5\n         DC    AL1(MSGA6I),AL4(MSGA6)        * MSG ID A6\n         DC    AL1(MSGA7I),AL4(MSGA7)        * MSG ID A7\n         DC    AL1(MSGA8I),AL4(MSGA8)        * MSG ID A8\n         DC    AL1(MSGA9I),AL4(MSGA9)        * MSG ID A9\n         DC    AL1(MSGAAI),AL4(MSGAA)        * MSG ID AA\n         DC    AL1(MSGABI),AL4(MSGAB)        * MSG ID AB\n         DC    AL1(MSGACI),AL4(MSGAC)        * MSG ID AC\n         DC    AL1(MSGADI),AL4(MSGAD)        * MSG ID AD\n         DC    AL1(MSGAEI),AL4(MSGAE)        * MSG ID AE\n         DC    AL1(MSGAFI),AL4(MSGAF)        * MSG ID AF\n         DC    AL1(MSGB0I),AL4(MSGB0)        * MSG ID B0\n         DC    AL1(MSGB1I),AL4(MSGB1)        * MSG ID B1\n         DC    AL1(MSGB2I),AL4(MSGB2)        * MSG ID B2\n         DC    AL1(MSGB3I),AL4(MSGB3)        * MSG ID B3\n         DC    AL1(MSGB4I),AL4(MSGB4)        * MSG ID B4\n         DC    AL1(MSGB5I),AL4(MSGB5)        * MSG ID B5\n         DC    AL1(MSGB6I),AL4(MSGB6)        * MSG ID B6\n         DC    AL1(MSGB7I),AL4(MSGB7)        * MSG ID B7\n         DC    AL1(MSGB8I),AL4(MSGB8)        * MSG ID B8\n         DC    AL1(MSGB9I),AL4(MSGB9)        * MSG ID B9\n         DC    AL1(MSGBAI),AL4(MSGBA)        * MSG ID BA\n         DC    AL1(MSGBBI),AL4(MSGBB)        * MSG ID BB\n         DC    AL1(MSGBCI),AL4(MSGBC)        * MSG ID BC\n         DC    AL1(MSGBDI),AL4(MSGBD)        * MSG ID BD\n         DC    AL1(MSGBEI),AL4(MSGBE)        * MSG ID BE\n         DC    AL1(MSGBFI),AL4(MSGBF)        * MSG ID BF\n         DC    AL1(MSGC0I),AL4(MSGC0)        * MSG ID C0\n         DC    AL1(MSGC1I),AL4(MSGC1)        * MSG ID C1\n         DC    AL1(MSGIXEND),AL4(0)          * END OF INDEX TABLE\n*\nMSG01    DC  AL2(MSG01L)\nMSG01T   DC  C'                    PROGRAM HELP MESSAGE'\nMSG01L   EQU *-MSG01T\nMSG01I   EQU X'01'\n*\nMSG02    DC  AL2(MSG02L)\nMSG02T   DC  C'                    ===================='\nMSG02L   EQU *-MSG02T\nMSG02I   EQU X'02'\n*\nMSG03    DC  AL2(MSG03L)\nMSG03T   DC  C' '\nMSG03L   EQU *-MSG03T\nMSG03I   EQU X'03'\n*\nMSG04    DC  AL2(MSG04L)\nMSG04T   DC  C' Program    : OFFLOAD'\nMSG04L   EQU *-MSG04T\nMSG04I   EQU X'04'\n*\nMSG05    DC  AL2(MSG05L)\nMSG05T   DC  C' Description: JES Spool Offload Program.'\nMSG05L   EQU *-MSG05T\nMSG05I   EQU X'05'\n*\nMSG06    DC  AL2(MSG06L)\nMSG06T   DC  C' Purpose    : Offload JES Spool Data to cataloged '\n         DC  C'dataset.'\nMSG06L   EQU *-MSG06T\nMSG06I   EQU X'06'\n*\nMSG07    DC  AL2(MSG07L)\nMSG07T   DC  C' Design     : Hunter Zhou.'\nMSG07L   EQU *-MSG07T\nMSG07I   EQU X'07'\n*\nMSG08    DC  AL2(MSG08L)\nMSG08T   DC  C' Support    : zhough2000@yahoo.com    '\nMSG08L   EQU *-MSG08T\nMSG08I   EQU X'08'\n*\nMSG09    DC  AL2(MSG09L)\nMSG09T   DC  C' Last Update: February, 2004'\nMSG09L   EQU *-MSG09T\nMSG09I   EQU X'09'\n*\nMSG0A    DC  AL2(MSG0AL)\nMSG0AT   DC  C' '\nMSG0AL   EQU *-MSG0AT\nMSG0AI   EQU X'0A'\n*\nMSG0B    DC  AL2(MSG0BL)\nMSG0BT   DC  C' Introduction'\nMSG0BL   EQU *-MSG0BT\nMSG0BI   EQU X'0B'\n*\nMSG0C    DC  AL2(MSG0CL)\nMSG0CT   DC  C' ============'\nMSG0CL   EQU *-MSG0CT\nMSG0CI   EQU X'0C'\n*\nMSG0D    DC  AL2(MSG0DL)\nMSG0DT   DC  C' '\nMSG0DL   EQU *-MSG0DT\nMSG0DI   EQU X'0D'\n*\nMSG0E    DC  AL2(MSG0EL)\nMSG0ET   DC  C' This program will offload the JES spool datasets '\n         DC  C'into system'\nMSG0EL   EQU *-MSG0ET\nMSG0EI   EQU X'0E'\n*\nMSG0F    DC  AL2(MSG0FL)\nMSG0FT   DC  C' datasets. The program is designed based on follow'\n         DC  C'ing rules:'\nMSG0FL   EQU *-MSG0FT\nMSG0FI   EQU X'0F'\n*\nMSG10    DC  AL2(MSG10L)\nMSG10T   DC  C' '\nMSG10L   EQU *-MSG10T\nMSG10I   EQU X'10'\n*\nMSG11    DC  AL2(MSG11L)\nMSG11T   DC  C' 1. Each spool entry will be saved into one catalo'\n         DC  C'ged system dataset.'\nMSG11L   EQU *-MSG11T\nMSG11I   EQU X'11'\n*\nMSG12    DC  AL2(MSG12L)\nMSG12T   DC  C'    Only spool data in OUTPUT queue will be proces'\n         DC  C'sed.'\nMSG12L   EQU *-MSG12T\nMSG12I   EQU X'12'\n*\nMSG13    DC  AL2(MSG13L)\nMSG13T   DC  C' 2. The system cataloged dataset name convention a'\n         DC  C're:'\nMSG13L   EQU *-MSG13T\nMSG13I   EQU X'13'\n*\nMSG14    DC  AL2(MSG14L)\nMSG14T   DC  C'    hlq.jobname.Ddate.jobid.TtimeIid'\nMSG14L   EQU *-MSG14T\nMSG14I   EQU X'14'\n*\nMSG15    DC  AL2(MSG15L)\nMSG15T   DC  C' '\nMSG15L   EQU *-MSG15T\nMSG15I   EQU X'15'\n*\nMSG16    DC  AL2(MSG16L)\nMSG16T   DC  C'   Here:'\nMSG16L   EQU *-MSG16T\nMSG16I   EQU X'16'\n*\nMSG17    DC  AL2(MSG17L)\nMSG17T   DC  C'   hlq      The high level qualifier of the offloa'\n         DC  C'ded spool dataset.'\nMSG17L   EQU *-MSG17T\nMSG17I   EQU X'17'\n*\nMSG18    DC  AL2(MSG18L)\nMSG18T   DC  C'            This hlq must given as ''H=hlq'' in EX'\n         DC  C'EC PARM.'\nMSG18L   EQU *-MSG18T\nMSG18I   EQU X'18'\n*\nMSG19    DC  AL2(MSG19L)\nMSG19T   DC  C'   jobname  The job name of the spool dataset.'\nMSG19L   EQU *-MSG19T\nMSG19I   EQU X'19'\n*\nMSG1A    DC  AL2(MSG1AL)\nMSG1AT   DC  C'   date     The date when the spool dataset is cre'\n         DC  C'ated.'\nMSG1AL   EQU *-MSG1AT\nMSG1AI   EQU X'1A'\n*\nMSG1B    DC  AL2(MSG1BL)\nMSG1BT   DC  C'   jobid    The job id of the spool dataset.'\nMSG1BL   EQU *-MSG1BT\nMSG1BI   EQU X'1B'\n*\nMSG1C    DC  AL2(MSG1CL)\nMSG1CT   DC  C'   time     The time when the spool dataset is cre'\n         DC  C'ated.'\nMSG1CL   EQU *-MSG1CT\nMSG1CI   EQU X'1C'\n*\nMSG1D    DC  AL2(MSG1DL)\nMSG1DT   DC  C'   id       The sequence number automatic generate'\n         DC  C'd by program.'\nMSG1DL   EQU *-MSG1DT\nMSG1DI   EQU X'1D'\n*\nMSG1E    DC  AL2(MSG1EL)\nMSG1ET   DC  C'            When there are multiple spool datasets'\n         DC  C' generated by'\nMSG1EL   EQU *-MSG1ET\nMSG1EI   EQU X'1E'\n*\nMSG1F    DC  AL2(MSG1FL)\nMSG1FT   DC  C'            JES batches, the id will be added from'\n         DC  C' 01 to 99.'\nMSG1FL   EQU *-MSG1FT\nMSG1FI   EQU X'1F'\n*\nMSG20    DC  AL2(MSG20L)\nMSG20T   DC  C' '\nMSG20L   EQU *-MSG20T\nMSG20I   EQU X'20'\n*\nMSG21    DC  AL2(MSG21L)\nMSG21T   DC  C' 3. All spool datasets in a single spool entry wil'\n         DC  C'l be saved'\nMSG21L   EQU *-MSG21T\nMSG21I   EQU X'21'\n*\nMSG22    DC  AL2(MSG22L)\nMSG22T   DC  C'    into single dataset.'\nMSG22L   EQU *-MSG22T\nMSG22I   EQU X'22'\n*\nMSG23    DC  AL2(MSG23L)\nMSG23T   DC  C'    For example, JCL batch logs normally contain f'\n         DC  C'ollowing 3 DDNAME'\nMSG23L   EQU *-MSG23T\nMSG23I   EQU X'23'\n*\nMSG24    DC  AL2(MSG24L)\nMSG24T   DC  C'        JESMSGLG, JESJCL, JESYSMSG'\nMSG24L   EQU *-MSG24T\nMSG24I   EQU X'24'\n*\nMSG25    DC  AL2(MSG25L)\nMSG25T   DC  C'    The program will merge these DDNAMEs in joblog'\n         DC  C' into a cataloged'\nMSG25L   EQU *-MSG25T\nMSG25I   EQU X'25'\n*\nMSG26    DC  AL2(MSG26L)\nMSG26T   DC  C'    system dataset.'\nMSG26L   EQU *-MSG26T\nMSG26I   EQU X'26'\n*\nMSG27    DC  AL2(MSG27L)\nMSG27T   DC  C' '\nMSG27L   EQU *-MSG27T\nMSG27I   EQU X'27'\n*\nMSG28    DC  AL2(MSG28L)\nMSG28T   DC  C' 4. There will be a extra record at the beginning '\n         DC  C'of each DDNAME.'\nMSG28L   EQU *-MSG28T\nMSG28I   EQU X'28'\n*\nMSG29    DC  AL2(MSG29L)\nMSG29T   DC  C'    To distinguish each DDNAMEs, the program add o'\n         DC  C'ne record at'\nMSG29L   EQU *-MSG29T\nMSG29I   EQU X'29'\n*\nMSG2A    DC  AL2(MSG2AL)\nMSG2AT   DC  C'    the beginning of the data. Here is the format '\n         DC  C'of this record'\nMSG2AL   EQU *-MSG2AT\nMSG2AI   EQU X'2A'\n*\nMSG2B    DC  AL2(MSG2BL)\nMSG2BT   DC  C' '\nMSG2BL   EQU *-MSG2BT\nMSG2BI   EQU X'2B'\n*\nMSG2C    DC  AL2(MSG2CL)\nMSG2CT   DC  C' ****JOF700I JOBNAME(jobname ),JOBID(jobid   ),DDN'\n         DC  C'AME(ddname  )****'\nMSG2CL   EQU *-MSG2CT\nMSG2CI   EQU X'2C'\n*\nMSG2D    DC  AL2(MSG2DL)\nMSG2DT   DC  C'        RECORDS(#records)**'\nMSG2DL   EQU *-MSG2DT\nMSG2DI   EQU X'2D'\n*\nMSG2E    DC  AL2(MSG2EL)\nMSG2ET   DC  C' '\nMSG2EL   EQU *-MSG2ET\nMSG2EI   EQU X'2E'\n*\nMSG2F    DC  AL2(MSG2FL)\nMSG2FT   DC  C'    Here the jobname, jobid, ddname and number of '\n         DC  C'records will be'\nMSG2FL   EQU *-MSG2FT\nMSG2FI   EQU X'2F'\n*\nMSG30    DC  AL2(MSG30L)\nMSG30T   DC  C'    updatedd according to related information of t'\n         DC  C'he spool dataset.'\nMSG30L   EQU *-MSG30T\nMSG30I   EQU X'30'\n*\nMSG31    DC  AL2(MSG31L)\nMSG31T   DC  C' '\nMSG31L   EQU *-MSG31T\nMSG31I   EQU X'31'\n*\nMSG32    DC  AL2(MSG32L)\nMSG32T   DC  C' 5. If there is any problem while processing one s'\n         DC  C'pool data,'\nMSG32L   EQU *-MSG32T\nMSG32I   EQU X'32'\n*\nMSG33    DC  AL2(MSG33L)\nMSG33T   DC  C'    the spool data will be in SYSTEM hold. You sho'\n         DC  C'uld refer'\nMSG33L   EQU *-MSG33T\nMSG33I   EQU X'33'\n*\nMSG34    DC  AL2(MSG34L)\nMSG34T   DC  C'    the program logs to get more information.'\nMSG34L   EQU *-MSG34T\nMSG34I   EQU X'34'\n*\nMSG35    DC  AL2(MSG35L)\nMSG35T   DC  C' '\nMSG35L   EQU *-MSG35T\nMSG35I   EQU X'35'\n*\nMSG36    DC  AL2(MSG36L)\nMSG36T   DC  C' '\nMSG36L   EQU *-MSG36T\nMSG36I   EQU X'36'\n*\nMSG37    DC  AL2(MSG37L)\nMSG37T   DC  C' Explanation of EXEC PARM'\nMSG37L   EQU *-MSG37T\nMSG37I   EQU X'37'\n*\nMSG38    DC  AL2(MSG38L)\nMSG38T   DC  C' ========================'\nMSG38L   EQU *-MSG38T\nMSG38I   EQU X'38'\n*\nMSG39    DC  AL2(MSG39L)\nMSG39T   DC  C' '\nMSG39L   EQU *-MSG39T\nMSG39I   EQU X'39'\n*\nMSG3A    DC  AL2(MSG3AL)\nMSG3AT   DC  C'   The spool data can be selected by criteria give'\n         DC  C'n in EXEC PARM.'\nMSG3AL   EQU *-MSG3AT\nMSG3AI   EQU X'3A'\n*\nMSG3B    DC  AL2(MSG3BL)\nMSG3BT   DC  C' All options in EXEC PARM can be in any order.'\nMSG3BL   EQU *-MSG3BT\nMSG3BI   EQU X'3B'\n*\nMSG3C    DC  AL2(MSG3CL)\nMSG3CT   DC  C' The syntax of option are:'\nMSG3CL   EQU *-MSG3CT\nMSG3CI   EQU X'3C'\n*\nMSG3D    DC  AL2(MSG3DL)\nMSG3DT   DC  C'      key1=value1,key2=value2'\nMSG3DL   EQU *-MSG3DT\nMSG3DI   EQU X'3D'\n*\nMSG3E    DC  AL2(MSG3EL)\nMSG3ET   DC  C' Here key is single letter keyword, and value is t'\n         DC  C'he actual criteria'\nMSG3EL   EQU *-MSG3ET\nMSG3EI   EQU X'3E'\n*\nMSG3F    DC  AL2(MSG3FL)\nMSG3FT   DC  C' for that key.'\nMSG3FL   EQU *-MSG3FT\nMSG3FI   EQU X'3F'\n*\nMSG40    DC  AL2(MSG40L)\nMSG40T   DC  C' If you specify multiple criteria, the selected sp'\n         DC  C'ool data will meet'\nMSG40L   EQU *-MSG40T\nMSG40I   EQU X'40'\n*\nMSG41    DC  AL2(MSG41L)\nMSG41T   DC  C' all criteria.'\nMSG41L   EQU *-MSG41T\nMSG41I   EQU X'41'\n*\nMSG42    DC  AL2(MSG42L)\nMSG42T   DC  C' '\nMSG42L   EQU *-MSG42T\nMSG42I   EQU X'42'\n*\nMSG43    DC  AL2(MSG43L)\nMSG43T   DC  C' '\nMSG43L   EQU *-MSG43T\nMSG43I   EQU X'43'\n*\nMSG44    DC  AL2(MSG44L)\nMSG44T   DC  C' 1. H=higher level qualifier'\nMSG44L   EQU *-MSG44T\nMSG44I   EQU X'44'\n*\nMSG45    DC  AL2(MSG45L)\nMSG45T   DC  C'    This is mandatory option to specify the higher'\n         DC  C' level qualifier'\nMSG45L   EQU *-MSG45T\nMSG45I   EQU X'45'\n*\nMSG46    DC  AL2(MSG46L)\nMSG46T   DC  C'    to be used to create cataloged system datasets'\n         DC  C', maximum in'\nMSG46L   EQU *-MSG46T\nMSG46I   EQU X'46'\n*\nMSG47    DC  AL2(MSG47L)\nMSG47T   DC  C'    13 characters.'\nMSG47L   EQU *-MSG47T\nMSG47I   EQU X'47'\n*\nMSG48    DC  AL2(MSG48L)\nMSG48T   DC  C'    Example:'\nMSG48L   EQU *-MSG48T\nMSG48I   EQU X'48'\n*\nMSG49    DC  AL2(MSG49L)\nMSG49T   DC  C'        H=LOGS                 Use LOGS as HLQ (LO'\n         DC  C'GS.jobname.Ddat'\nMSG49L   EQU *-MSG49T\nMSG49I   EQU X'49'\n*\nMSG4A    DC  AL2(MSG4AL)\nMSG4AT   DC  C'     Use LOGS as higher level qualifier, the datas'\n         DC  C'ets will be:'\nMSG4AL   EQU *-MSG4AT\nMSG4AI   EQU X'4A'\n*\nMSG4B    DC  AL2(MSG4BL)\nMSG4BT   DC  C'        LOGS.jobname.Ddate.jobid.TtimeIid'\nMSG4BL   EQU *-MSG4BT\nMSG4BI   EQU X'4B'\n*\nMSG4C    DC  AL2(MSG4CL)\nMSG4CT   DC  C' '\nMSG4CL   EQU *-MSG4CT\nMSG4CI   EQU X'4C'\n*\nMSG4D    DC  AL2(MSG4DL)\nMSG4DT   DC  C' 2. C=classes'\nMSG4DL   EQU *-MSG4DT\nMSG4DI   EQU X'4D'\n*\nMSG4E    DC  AL2(MSG4EL)\nMSG4ET   DC  C'    This specify the SYSOUT class selection criter'\n         DC  C'ia. You can'\nMSG4EL   EQU *-MSG4ET\nMSG4EI   EQU X'4E'\n*\nMSG4F    DC  AL2(MSG4FL)\nMSG4FT   DC  C'    specify up to 36 classes in this option. The c'\n         DC  C'lasses ranges'\nMSG4FL   EQU *-MSG4FT\nMSG4FI   EQU X'4F'\n*\nMSG50    DC  AL2(MSG50L)\nMSG50T   DC  C'    from 0-9, and A-Z.'\nMSG50L   EQU *-MSG50T\nMSG50I   EQU X'50'\n*\nMSG51    DC  AL2(MSG51L)\nMSG51T   DC  C'    Example:'\nMSG51L   EQU *-MSG51T\nMSG51I   EQU X'51'\n*\nMSG52    DC  AL2(MSG52L)\nMSG52T   DC  C'        C=A                    Just select SYSOUT '\n         DC  C'class A'\nMSG52L   EQU *-MSG52T\nMSG52I   EQU X'52'\n*\nMSG53    DC  AL2(MSG53L)\nMSG53T   DC  C'        C=0123456789           Select SYSOUT class'\n         DC  C' in numbers'\nMSG53L   EQU *-MSG53T\nMSG53I   EQU X'53'\n*\nMSG54    DC  AL2(MSG54L)\nMSG54T   DC  C'        C=ASHJ                 Select SYSOUT class'\n         DC  C' A,S,H and J'\nMSG54L   EQU *-MSG54T\nMSG54I   EQU X'54'\n*\nMSG55    DC  AL2(MSG55L)\nMSG55T   DC  C' '\nMSG55L   EQU *-MSG55T\nMSG55I   EQU X'55'\n*\nMSG56    DC  AL2(MSG56L)\nMSG56T   DC  C' 3. D=dest'\nMSG56L   EQU *-MSG56T\nMSG56I   EQU X'56'\n*\nMSG57    DC  AL2(MSG57L)\nMSG57T   DC  C'    This specify the SYSOUT DEST selection criteri'\n         DC  C'a, maximum'\nMSG57L   EQU *-MSG57T\nMSG57I   EQU X'57'\n*\nMSG58    DC  AL2(MSG58L)\nMSG58T   DC  C'    8 characters.'\nMSG58L   EQU *-MSG58T\nMSG58I   EQU X'58'\n*\nMSG59    DC  AL2(MSG59L)\nMSG59T   DC  C'    If this is not specified, the DEST=LOCAL will '\n         DC  C'be used.'\nMSG59L   EQU *-MSG59T\nMSG59I   EQU X'59'\n*\nMSG5A    DC  AL2(MSG5AL)\nMSG5AT   DC  C'    This option support wildcards. use * for multi'\n         DC  C'ple characters'\nMSG5AL   EQU *-MSG5AT\nMSG5AI   EQU X'5A'\n*\nMSG5B    DC  AL2(MSG5BL)\nMSG5BT   DC  C'    and ? for single character.'\nMSG5BL   EQU *-MSG5BT\nMSG5BI   EQU X'5B'\n*\nMSG5C    DC  AL2(MSG5CL)\nMSG5CT   DC  C'    Example:'\nMSG5CL   EQU *-MSG5CT\nMSG5CI   EQU X'5C'\n*\nMSG5D    DC  AL2(MSG5DL)\nMSG5DT   DC  C'        D=OFFLOAD              Just select SYSOUT '\n         DC  C'DEST=OFFLOAD'\nMSG5DL   EQU *-MSG5DT\nMSG5DI   EQU X'5D'\n*\nMSG5E    DC  AL2(MSG5EL)\nMSG5ET   DC  C' '\nMSG5EL   EQU *-MSG5ET\nMSG5EI   EQU X'5E'\n*\nMSG5F    DC  AL2(MSG5FL)\nMSG5FT   DC  C' 4. F=form'\nMSG5FL   EQU *-MSG5FT\nMSG5FI   EQU X'5F'\n*\nMSG60    DC  AL2(MSG60L)\nMSG60T   DC  C'    This specify the SYSOUT FORM selection criteri'\n         DC  C'a, maximum'\nMSG60L   EQU *-MSG60T\nMSG60I   EQU X'60'\n*\nMSG61    DC  AL2(MSG61L)\nMSG61T   DC  C'    8 characters.'\nMSG61L   EQU *-MSG61T\nMSG61I   EQU X'61'\n*\nMSG62    DC  AL2(MSG62L)\nMSG62T   DC  C'    If this is not specified, any FORM will be sel'\n         DC  C'ected.'\nMSG62L   EQU *-MSG62T\nMSG62I   EQU X'62'\n*\nMSG63    DC  AL2(MSG63L)\nMSG63T   DC  C'    This option support wildcards. use * for multi'\n         DC  C'ple characters'\nMSG63L   EQU *-MSG63T\nMSG63I   EQU X'63'\n*\nMSG64    DC  AL2(MSG64L)\nMSG64T   DC  C'    and ? for single character.'\nMSG64L   EQU *-MSG64T\nMSG64I   EQU X'64'\n*\nMSG65    DC  AL2(MSG65L)\nMSG65T   DC  C'    Example:'\nMSG65L   EQU *-MSG65T\nMSG65I   EQU X'65'\n*\nMSG66    DC  AL2(MSG66L)\nMSG66T   DC  C'        F=OFFLOAD              Just select SYSOUT '\n         DC  C'FORM=OFFLOAD'\nMSG66L   EQU *-MSG66T\nMSG66I   EQU X'66'\n*\nMSG67    DC  AL2(MSG67L)\nMSG67T   DC  C' '\nMSG67L   EQU *-MSG67T\nMSG67I   EQU X'67'\n*\nMSG68    DC  AL2(MSG68L)\nMSG68T   DC  C' 5. J=jobname'\nMSG68L   EQU *-MSG68T\nMSG68I   EQU X'68'\n*\nMSG69    DC  AL2(MSG69L)\nMSG69T   DC  C'    This specify the jobname as selection criteria'\n         DC  C', maximum'\nMSG69L   EQU *-MSG69T\nMSG69I   EQU X'69'\n*\nMSG6A    DC  AL2(MSG6AL)\nMSG6AT   DC  C'    8 characters.'\nMSG6AL   EQU *-MSG6AT\nMSG6AI   EQU X'6A'\n*\nMSG6B    DC  AL2(MSG6BL)\nMSG6BT   DC  C'    If this is not specified, any jobname will be '\n         DC  C'selected.'\nMSG6BL   EQU *-MSG6BT\nMSG6BI   EQU X'6B'\n*\nMSG6C    DC  AL2(MSG6CL)\nMSG6CT   DC  C'    This option support wildcards. use * for multi'\n         DC  C'ple characters'\nMSG6CL   EQU *-MSG6CT\nMSG6CI   EQU X'6C'\n*\nMSG6D    DC  AL2(MSG6DL)\nMSG6DT   DC  C'    and ? for single character.'\nMSG6DL   EQU *-MSG6DT\nMSG6DI   EQU X'6D'\n*\nMSG6E    DC  AL2(MSG6EL)\nMSG6ET   DC  C'    Example:'\nMSG6EL   EQU *-MSG6ET\nMSG6EI   EQU X'6E'\n*\nMSG6F    DC  AL2(MSG6FL)\nMSG6FT   DC  C'        J=EDI*                 Select jobname star'\n         DC  C'ts with EDI'\nMSG6FL   EQU *-MSG6FT\nMSG6FI   EQU X'6F'\n*\nMSG70    DC  AL2(MSG70L)\nMSG70T   DC  C' '\nMSG70L   EQU *-MSG70T\nMSG70I   EQU X'70'\n*\nMSG71    DC  AL2(MSG71L)\nMSG71T   DC  C' 6. HELP or no EXEC PARM at all.'\nMSG71L   EQU *-MSG71T\nMSG71I   EQU X'71'\n*\nMSG72    DC  AL2(MSG72L)\nMSG72T   DC  C'    When you specify HELP or do not specify EXEC P'\n         DC  C'ARM, this help'\nMSG72L   EQU *-MSG72T\nMSG72I   EQU X'72'\n*\nMSG73    DC  AL2(MSG73L)\nMSG73T   DC  C'    message will be shown.'\nMSG73L   EQU *-MSG73T\nMSG73I   EQU X'73'\n*\nMSG74    DC  AL2(MSG74L)\nMSG74T   DC  C' '\nMSG74L   EQU *-MSG74T\nMSG74I   EQU X'74'\n*\nMSG75    DC  AL2(MSG75L)\nMSG75T   DC  C'    Example:'\nMSG75L   EQU *-MSG75T\nMSG75I   EQU X'75'\n*\nMSG76    DC  AL2(MSG76L)\nMSG76T   DC  C'     1).//OFFLOAD EXEC PGM=OFFLOAD'\nMSG76L   EQU *-MSG76T\nMSG76I   EQU X'76'\n*\nMSG77    DC  AL2(MSG77L)\nMSG77T   DC  C' '\nMSG77L   EQU *-MSG77T\nMSG77I   EQU X'77'\n*\nMSG78    DC  AL2(MSG78L)\nMSG78T   DC  C'     2).//OFFLOAD EXEC PGM=OFFLOAD,PARM=HELP'\nMSG78L   EQU *-MSG78T\nMSG78I   EQU X'78'\n*\nMSG79    DC  AL2(MSG79L)\nMSG79T   DC  C' '\nMSG79L   EQU *-MSG79T\nMSG79I   EQU X'79'\n*\nMSG7A    DC  AL2(MSG7AL)\nMSG7AT   DC  C' '\nMSG7AL   EQU *-MSG7AT\nMSG7AI   EQU X'7A'\n*\nMSG7B    DC  AL2(MSG7BL)\nMSG7BT   DC  C' EXEC PARM Examples'\nMSG7BL   EQU *-MSG7BT\nMSG7BI   EQU X'7B'\n*\nMSG7C    DC  AL2(MSG7CL)\nMSG7CT   DC  C' ------------------'\nMSG7CL   EQU *-MSG7CT\nMSG7CI   EQU X'7C'\n*\nMSG7D    DC  AL2(MSG7DL)\nMSG7DT   DC  C'   1). Select spool data with SYSOUT class in numb'\n         DC  C'ers'\nMSG7DL   EQU *-MSG7DT\nMSG7DI   EQU X'7D'\n*\nMSG7E    DC  AL2(MSG7EL)\nMSG7ET   DC  C'       and use ''LOGS'' as higher level qualifier.'\nMSG7EL   EQU *-MSG7ET\nMSG7EI   EQU X'7E'\n*\nMSG7F    DC  AL2(MSG7FL)\nMSG7FT   DC  C' '\nMSG7FL   EQU *-MSG7FT\nMSG7FI   EQU X'7F'\n*\nMSG80    DC  AL2(MSG80L)\nMSG80T   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'\nMSG80L   EQU *-MSG80T\nMSG80I   EQU X'80'\n*\nMSG81    DC  AL2(MSG81L)\nMSG81T   DC  C'        //        PARM=''H=LOGS,C=0123456789'''\nMSG81L   EQU *-MSG81T\nMSG81I   EQU X'81'\n*\nMSG82    DC  AL2(MSG82L)\nMSG82T   DC  C'        //SYSPRINT DD SYSOUT=*'\nMSG82L   EQU *-MSG82T\nMSG82I   EQU X'82'\n*\nMSG83    DC  AL2(MSG83L)\nMSG83T   DC  C' '\nMSG83L   EQU *-MSG83T\nMSG83I   EQU X'83'\n*\nMSG84    DC  AL2(MSG84L)\nMSG84T   DC  C'   2). Select spool data with USERID is SP2487, jo'\n         DC  C'bname starts'\nMSG84L   EQU *-MSG84T\nMSG84I   EQU X'84'\n*\nMSG85    DC  AL2(MSG85L)\nMSG85T   DC  C'       with SP2487, and use ''SP2487'' as higher l'\n         DC  C'evel qualifier.'\nMSG85L   EQU *-MSG85T\nMSG85I   EQU X'85'\n*\nMSG86    DC  AL2(MSG86L)\nMSG86T   DC  C' '\nMSG86L   EQU *-MSG86T\nMSG86I   EQU X'86'\n*\nMSG87    DC  AL2(MSG87L)\nMSG87T   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'\nMSG87L   EQU *-MSG87T\nMSG87I   EQU X'87'\n*\nMSG88    DC  AL2(MSG88L)\nMSG88T   DC  C'        //        PARM=''H=SP2487,U=SP2487,J=SP248'\n         DC  C'7*'''\nMSG88L   EQU *-MSG88T\nMSG88I   EQU X'88'\n*\nMSG89    DC  AL2(MSG89L)\nMSG89T   DC  C'        //SYSPRINT DD SYSOUT=*'\nMSG89L   EQU *-MSG89T\nMSG89I   EQU X'89'\n*\nMSG8A    DC  AL2(MSG8AL)\nMSG8AT   DC  C' '\nMSG8AL   EQU *-MSG8AT\nMSG8AI   EQU X'8A'\n*\nMSG8B    DC  AL2(MSG8BL)\nMSG8BT   DC  C'   3). Select spool data with USERID is SP2487, jo'\n         DC  C'bname starts'\nMSG8BL   EQU *-MSG8BT\nMSG8BI   EQU X'8B'\n*\nMSG8C    DC  AL2(MSG8CL)\nMSG8CT   DC  C'       with SP2487, and use ''SP2487'' as higher l'\n         DC  C'evel qualifier.'\nMSG8CL   EQU *-MSG8CT\nMSG8CI   EQU X'8C'\n*\nMSG8D    DC  AL2(MSG8DL)\nMSG8DT   DC  C' '\nMSG8DL   EQU *-MSG8DT\nMSG8DI   EQU X'8D'\n*\nMSG8E    DC  AL2(MSG8EL)\nMSG8ET   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'\nMSG8EL   EQU *-MSG8ET\nMSG8EI   EQU X'8E'\n*\nMSG8F    DC  AL2(MSG8FL)\nMSG8FT   DC  C'        //        PARM=(''H=LOGS,U=OP9999*'','\nMSG8FL   EQU *-MSG8FT\nMSG8FI   EQU X'8F'\n*\nMSG90    DC  AL2(MSG90L)\nMSG90T   DC  C'        //        ''C=159CX,D=OFFLOAD'')'\nMSG90L   EQU *-MSG90T\nMSG90I   EQU X'90'\n*\nMSG91    DC  AL2(MSG91L)\nMSG91T   DC  C'        //SYSPRINT DD SYSOUT=*'\nMSG91L   EQU *-MSG91T\nMSG91I   EQU X'91'\n*\nMSG92    DC  AL2(MSG92L)\nMSG92T   DC  C' '\nMSG92L   EQU *-MSG92T\nMSG92I   EQU X'92'\n*\nMSG93    DC  AL2(MSG93L)\nMSG93T   DC  C' '\nMSG93L   EQU *-MSG93T\nMSG93I   EQU X'93'\n*\nMSG94    DC  AL2(MSG94L)\nMSG94T   DC  C' Program Logs in SYSPRINT'\nMSG94L   EQU *-MSG94T\nMSG94I   EQU X'94'\n*\nMSG95    DC  AL2(MSG95L)\nMSG95T   DC  C' ========================'\nMSG95L   EQU *-MSG95T\nMSG95I   EQU X'95'\n*\nMSG96    DC  AL2(MSG96L)\nMSG96T   DC  C'   The processing logs can be shown in SYSPRINT DD'\n         DC  C'. If SYSPRINT DD'\nMSG96L   EQU *-MSG96T\nMSG96I   EQU X'96'\n*\nMSG97    DC  AL2(MSG97L)\nMSG97T   DC  C'   is not presented in JCL, there is no logs gener'\n         DC  C'ated.'\nMSG97L   EQU *-MSG97T\nMSG97I   EQU X'97'\n*\nMSG98    DC  AL2(MSG98L)\nMSG98T   DC  C' '\nMSG98L   EQU *-MSG98T\nMSG98I   EQU X'98'\n*\nMSG99    DC  AL2(MSG99L)\nMSG99T   DC  C'   The requirements of SYSPRINT:'\nMSG99L   EQU *-MSG99T\nMSG99I   EQU X'99'\n*\nMSG9A    DC  AL2(MSG9AL)\nMSG9AT   DC  C'      LRECL=133,RECFM=FBA'\nMSG9AL   EQU *-MSG9AT\nMSG9AI   EQU X'9A'\n*\nMSG9B    DC  AL2(MSG9BL)\nMSG9BT   DC  C' '\nMSG9BL   EQU *-MSG9BT\nMSG9BI   EQU X'9B'\n*\nMSG9C    DC  AL2(MSG9CL)\nMSG9CT   DC  C'   You may just specify following statement in JCL'\n         DC  C':'\nMSG9CL   EQU *-MSG9CT\nMSG9CI   EQU X'9C'\n*\nMSG9D    DC  AL2(MSG9DL)\nMSG9DT   DC  C'        //SYSPRINT DD SYSOUT=*'\nMSG9DL   EQU *-MSG9DT\nMSG9DI   EQU X'9D'\n*\nMSG9E    DC  AL2(MSG9EL)\nMSG9ET   DC  C' '\nMSG9EL   EQU *-MSG9ET\nMSG9EI   EQU X'9E'\n*\nMSG9F    DC  AL2(MSG9FL)\nMSG9FT   DC  C' '\nMSG9FL   EQU *-MSG9FT\nMSG9FI   EQU X'9F'\n*\nMSGA0    DC  AL2(MSGA0L)\nMSGA0T   DC  C' OPERATION'\nMSGA0L   EQU *-MSGA0T\nMSGA0I   EQU X'A0'\n*\nMSGA1    DC  AL2(MSGA1L)\nMSGA1T   DC  C' ========='\nMSGA1L   EQU *-MSGA1T\nMSGA1I   EQU X'A1'\n*\nMSGA2    DC  AL2(MSGA2L)\nMSGA2T   DC  C'   START'\nMSGA2L   EQU *-MSGA2T\nMSGA2I   EQU X'A2'\n*\nMSGA3    DC  AL2(MSGA3L)\nMSGA3T   DC  C'   -----'\nMSGA3L   EQU *-MSGA3T\nMSGA3I   EQU X'A3'\n*\nMSGA4    DC  AL2(MSGA4L)\nMSGA4T   DC  C'   You can start the program in JCL batch or start'\n         DC  C'ed task.'\nMSGA4L   EQU *-MSGA4T\nMSGA4I   EQU X'A4'\n*\nMSGA5    DC  AL2(MSGA5L)\nMSGA5T   DC  C'   Sample JCL to start:'\nMSGA5L   EQU *-MSGA5T\nMSGA5I   EQU X'A5'\n*\nMSGA6    DC  AL2(MSGA6L)\nMSGA6T   DC  C' '\nMSGA6L   EQU *-MSGA6T\nMSGA6I   EQU X'A6'\n*\nMSGA7    DC  AL2(MSGA7L)\nMSGA7T   DC  C'        //jobcard here'\nMSGA7L   EQU *-MSGA7T\nMSGA7I   EQU X'A7'\n*\nMSGA8    DC  AL2(MSGA8L)\nMSGA8T   DC  C'        //OFFLOAD EXEC PGM=OFFLOAD,'\nMSGA8L   EQU *-MSGA8T\nMSGA8I   EQU X'A8'\n*\nMSGA9    DC  AL2(MSGA9L)\nMSGA9T   DC  C'        //        PARM=''your parms here'''\nMSGA9L   EQU *-MSGA9T\nMSGA9I   EQU X'A9'\n*\nMSGAA    DC  AL2(MSGAAL)\nMSGAAT   DC  C'        //SYSPRINT DD SYSOUT=*'\nMSGAAL   EQU *-MSGAAT\nMSGAAI   EQU X'AA'\n*\nMSGAB    DC  AL2(MSGABL)\nMSGABT   DC  C' '\nMSGABL   EQU *-MSGABT\nMSGABI   EQU X'AB'\n*\nMSGAC    DC  AL2(MSGACL)\nMSGACT   DC  C'   STOP'\nMSGACL   EQU *-MSGACT\nMSGACI   EQU X'AC'\n*\nMSGAD    DC  AL2(MSGADL)\nMSGADT   DC  C'   ----'\nMSGADL   EQU *-MSGADT\nMSGADI   EQU X'AD'\n*\nMSGAE    DC  AL2(MSGAEL)\nMSGAET   DC  C'   The program support MVS system STOP command.'\nMSGAEL   EQU *-MSGAET\nMSGAEI   EQU X'AE'\n*\nMSGAF    DC  AL2(MSGAFL)\nMSGAFT   DC  C'   Example, if the jobname of this program is JOFL'\n         DC  C'D00,'\nMSGAFL   EQU *-MSGAFT\nMSGAFI   EQU X'AF'\n*\nMSGB0    DC  AL2(MSGB0L)\nMSGB0T   DC  C'   Use following MVS system command to stop it:'\nMSGB0L   EQU *-MSGB0T\nMSGB0I   EQU X'B0'\n*\nMSGB1    DC  AL2(MSGB1L)\nMSGB1T   DC  C'      P JOFLD00'\nMSGB1L   EQU *-MSGB1T\nMSGB1I   EQU X'B1'\n*\nMSGB2    DC  AL2(MSGB2L)\nMSGB2T   DC  C' '\nMSGB2L   EQU *-MSGB2T\nMSGB2I   EQU X'B2'\n*\nMSGB3    DC  AL2(MSGB3L)\nMSGB3T   DC  C' Support'\nMSGB3L   EQU *-MSGB3T\nMSGB3I   EQU X'B3'\n*\nMSGB4    DC  AL2(MSGB4L)\nMSGB4T   DC  C' ======='\nMSGB4L   EQU *-MSGB4T\nMSGB4I   EQU X'B4'\n*\nMSGB5    DC  AL2(MSGB5L)\nMSGB5T   DC  C' '\nMSGB5L   EQU *-MSGB5T\nMSGB5I   EQU X'B5'\n*\nMSGB6    DC  AL2(MSGB6L)\nMSGB6T   DC  C'  The program is written in assembler for high per'\n         DC  C'formance.'\nMSGB6L   EQU *-MSGB6T\nMSGB6I   EQU X'B6'\n*\nMSGB7    DC  AL2(MSGB7L)\nMSGB7T   DC  C'  If there is a bug or problem, please contact:'\nMSGB7L   EQU *-MSGB7T\nMSGB7I   EQU X'B7'\n*\nMSGB8    DC  AL2(MSGB8L)\nMSGB8T   DC  C'       Hunter Zhou'\nMSGB8L   EQU *-MSGB8T\nMSGB8I   EQU X'B8'\n*\nMSGB9    DC  AL2(MSGB9L)\nMSGB9T   DC  C'       Senior System Engineer'\nMSGB9L   EQU *-MSGB9T\nMSGB9I   EQU X'B9'\n*\nMSGBA    DC  AL2(MSGBAL)\nMSGBAT   DC  C'       Information Technology'\nMSGBAL   EQU *-MSGBAT\nMSGBAI   EQU X'BA'\n*\nMSGBB    DC  AL2(MSGBBL)\nMSGBBT   DC  C'       Sobeys Inc. Mississauga,'\nMSGBBL   EQU *-MSGBBT\nMSGBBI   EQU X'BB'\n*\nMSGBC    DC  AL2(MSGBCL)\nMSGBCT   DC  C'       Ontario L4C 1W2'\nMSGBCL   EQU *-MSGBCT\nMSGBCI   EQU X'BC'\n*\nMSGBD    DC  AL2(MSGBDL)\nMSGBDT   DC  C'       Canada'\nMSGBDL   EQU *-MSGBDT\nMSGBDI   EQU X'BD'\n*\nMSGBE    DC  AL2(MSGBEL)\nMSGBET   DC  C'       Email: zhough2000@yahoo.com    '\nMSGBEL   EQU *-MSGBET\nMSGBEI   EQU X'BE'\n*\nMSGBF    DC  AL2(MSGBFL)\nMSGBFT   DC  C' '\nMSGBFL   EQU *-MSGBFT\nMSGBFI   EQU X'BF'\n*\nMSGC0    DC  AL2(MSGC0L)\nMSGC0T   DC  C' END OF HELP'\nMSGC0L   EQU *-MSGC0T\nMSGC0I   EQU X'C0'\n*\nMSGC1    DC  AL2(MSGC1L)\nMSGC1T   DC  C' ==========='\nMSGC1L   EQU *-MSGC1T\nMSGC1I   EQU X'C1'\n*\nMSGLAST  EQU  MSGC1I\n*\n* MESSAGE BUFFER\n@MSGINFO DS    A                 MESSAGE INFORMATION ADDRESS\nMSGBUF   DS    0CL134\nMSGBUFCC DS    CL1\nMSGBUFTX DS    CL133              ;SYSPRINT MESSAGE BUFFER\n* FLAGS FOR MESSAGE\nMSGID    DS    X\nMSGIXEND EQU   X'00'              END OF MESSAGE INDEX TABLE TAG\n\n* MESSAGE INFOMRATION PASSED FROM OFFLOAD PROGRAM\n* ADDRESS IS IN R9.\n         DS    0D\nMSGINFO  DSECT\nMSGCTR   DS    PL2                ;MESSAGE COUNTER\nSPROPNFL DS    XL1            0 FOR NOT OPENED, 1 FOR OPENED\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=133\nMSGINFOL EQU   *-MSGINFO\n\n*---------------------------------------------------------------------*\n*  END OF PROGRAM                                                     *\n*---------------------------------------------------------------------*\n         END   OFLHELP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT668/FILE668.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT668", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}