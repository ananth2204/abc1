{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20200503195801000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 308838, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "SLBD.RACFROD.SKELS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 308838, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 308838, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SLBD.RACFROD.SKELS": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\x15\\xa8H\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\x15\\xa8H\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\x15\\xa8H\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DIR": {"ttr": 15, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 \\x11\\x01 \\x04\\x1f\\x01 \\x04\\x1f\\x15\\x08\\x00\\x08\\x00\\x06\\x00\\x00\\xd9\\xc1\\xc3\\xc6\\xd9\\xd6\\xc4@\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2020-02-10T00:00:00", "modifydate": "2020-02-10T15:08:11", "lines": 8, "newlines": 6, "modlines": 0, "user": "RACFROD"}, "text": "*---------------------------------------------------------------------*\n*                       RACFROD - Skeleton Members                    *\n*---------------------------------------------------------------------*\n\n  Member                           Description\n --------  -----------------------------------------------------------\n RACFALLR  Consolidated skeleton code for generating all reports\n RACFREPT  Skeleton code for producing reports selectively (on demand)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACFALLR": {"ttr": 13, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 Q\\x01 \\x03\\x7f\\x01 \\x03\\x7f\\t\\x01\\x00\\xf9\\x00\\xf9\\x00\\x00\\xd9\\xc1\\xc3\\xc6\\xd9\\xd6\\xc4@\\x00\\x00\\x00\\xf9\\x00\\x00\\x00\\xf9\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2020-02-06T00:00:00", "modifydate": "2020-02-06T09:01:51", "lines": 249, "newlines": 249, "modlines": 0, "user": "RACFROD"}, "text": ")CM\n)CM -------------------------------------------------------------------\n)CM\n)CM Updated 27Dec2019, William J. Smith, Trident Services, Inc.\n)CM . Added RecTyp value and report DDNAME to report title.\n)CM . Changed all headers from upper to upper-and-lower case\n)CM\n)CM Written 04Dec2019, William J. Smith, Trident Services, Inc.\n)CM . Skeleton = RACFALLR\n)CM . Globally include all RACF ICETOOL SORT and DISPLAY statements to\n)CM   generate all available reports on demand.\n)CM\n)CM -------------------------------------------------------------------\n)CM\n//DSACC     DD  SYSOUT=*\n//DSACCG    DD  SYSOUT=*\n//DSBD      DD  SYSOUT=*\n//GPBD      DD  SYSOUT=*\n//GPMEM     DD  SYSOUT=*\n//GRACC     DD  SYSOUT=*\n//GRACCG    DD  SYSOUT=*\n//GRBD      DD  SYSOUT=*\n//STDATA    DD  SYSOUT=*\n//USBD      DD  SYSOUT=*\n//USCON     DD  SYSOUT=*\n//USOMVS    DD  SYSOUT=*\n//USTSO     DD  SYSOUT=*\n//*\n//TEMP100   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP102   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP200   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP205   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP220   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP270   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP400   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP404   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMPU404  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP500   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP505   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMPU505  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TEMP540   DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//*\n//TOOLIN    DD  *\nSORT    FROM(DBUDATA) TO(TEMP100) USING(L100)\nDISPLAY FROM(TEMP100) LIST(GPBD)                     -\n        BLANK                                        -\n        TITLE('T100/GPBD - Group Basic Data') DATE TIME PAGE         -\n        HEADER('Group') ON(10,8,CH)                  -\n        HEADER('Sup Group') ON(19,8,CH)              -\n        HEADER('Owner') ON(39,8,CH)                  -\n        HEADER('Create Date ') ON(28,10,CH)          -\n        HEADER('Description') ON(62,60,CH)\nSORT    FROM(DBUDATA) TO(TEMP102) USING(L102)\nDISPLAY FROM(TEMP102) LIST(GPMEM)                    -\n        BLANK                                        -\n        TITLE('T102/GPMEM - Group Members') DATE TIME PAGE           -\n        HEADER('User') ON(19,8,CH)                   -\n        HEADER('User Auth') ON(28,8,CH)              -\n        BTITLE('Group :')                            -\n        BREAK(10,8,CH)\nSORT    FROM(DBUDATA) TO(TEMP200) USING(L200)\nDISPLAY FROM(TEMP200) LIST(USBD)                     -\n        BLANK                                        -\n        TITLE('T200/USBD - User Basic Data') DATE TIME PAGE          -\n        HEADER('User') ON(10,8,CH)                   -\n        HEADER('Name') ON(79,20,CH)                  -\n        HEADER('DefGrp') ON(100,8,CH)                -\n        HEADER('Create Date') ON(19,10,CH)           -\n        HEADER('Logon Date') ON(119,10,CH)           -\n        HEADER('Revoke Date') ON(462,10,CH)          -\n        HEADER('Owner') ON(30,8,CH)                  -\n        HEADER('Spec') ON(44,4,CH)                   -\n        HEADER('Oper') ON(49,4,CH)                   -\n        HEADER('Revoke') ON(54,4,CH)\nSORT    FROM(DBUDATA) TO(TEMP205) USING(L205)\nDISPLAY FROM(TEMP205) LIST(USCON)                    -\n        BLANK                                        -\n        TITLE('T205/USCON - Group Connections') DATE TIME PAGE       -\n        HEADER('Group') ON(19,8,CH)                  -\n        HEADER('Owner') ON(39,8,CH)                  -\n        HEADER('Connect Date') ON(29,10,CH)          -\n        HEADER('Last Connect') ON(57,10,CH)          -\n        HEADER('Revoke Date') ON(119,10,CH)          -\n        BTITLE('User :')                             -\n        BREAK(10,8,CH)\nSORT    FROM(DBUDATA) TO(TEMP220) USING(L220)\nDISPLAY FROM(TEMP220) LIST(USTSO)                    -\n        BLANK                                        -\n        TITLE('T220/USTSO - User TSO Data') DATE TIME PAGE           -\n        HEADER('User') ON(10,8,CH)                   -\n        HEADER('Proc') ON(154,8,CH)                  -\n        HEADER('Size') ON(163,10,CH)                 -\n        HEADER('MaxSize') ON(176,10,CH)              -\n        HEADER('Unit') ON(209,10,CH)                 -\n        HEADER('Account') ON(19,40,CH)\nSORT    FROM(DBUDATA) TO(TEMP270) USING(L270)\nDISPLAY FROM(TEMP270) LIST(USOMVS)                   -\n        BLANK                                        -\n        TITLE('T270/USOMVS - User OMVS Data') DATE TIME PAGE         -\n        HEADER('User') ON(10,8,CH)                   -\n        HEADER('UID') ON(19,10,CH)                   -\n        HEADER('Home Path') ON(30,44,CH)             -\n        HEADER('Program') ON(1054,44,CH)\nSORT    FROM(DBUDATA) TO(TEMP400) USING(L400)\nDISPLAY FROM(TEMP400) LIST(DSBD)                     -\n        BLANK                                        -\n        TITLE('T400/DSBD - Data Set Basic Data') DATE TIME PAGE      -\n        HEADER('Data Set Profile') ON(10,44,CH)      -\n        HEADER('Gen') ON(62,4,CH)                    -\n        HEADER('UACC') ON(133,8,CH)                  -\n        HEADER('Create Date ') ON(67,10,CH)          -\n        HEADER('Owner') ON(156,8,CH)                 -\n        HEADER('Last Referenced') ON(87,10,CH)       -\n        HEADER('Last Changed') ON(98,10,CH)          -\n        HEADER('Audit Level') ON(147,8,CH)           -\n        HEADER('Warning') ON(488,4,CH)\nSORT    FROM(DBUDATA) TO(TEMP404) USING(L404)\nDISPLAY FROM(TEMP404) LIST(DSACC)                    -\n        BLANK                                        -\n        TITLE('T404/DSACC - Data Set Access') DATE TIME PAGE         -\n        HEADER('Group') ON(62,8,CH)                  -\n        HEADER('Access') ON(71,8,CH)                 -\n        HEADER('Access Count') ON(80,4,CH)           -\n        BTITLE('DataSet Profile:')                   -\n        BREAK(10,44,CH)\nSORT    FROM(DBUDATA) TO(TEMPU404) USING(U404)\nDISPLAY FROM(TEMPU404) LIST(DSACCG)                  -\n        BLANK                                        -\n        TITLE('T404U/DSACCG - Data Set Access by Group')             -\n        DATE TIME PAGE                               -\n        HEADER('Data Set Profile') ON(10,44,CH)      -\n        HEADER('Access') ON(71,8,CH)                 -\n        HEADER('Access Count') ON(80,4,CH)           -\n        BTITLE('Group:')                             -\n        BREAK(62,8,CH)\nSORT    FROM(DBUDATA) TO(TEMP500) USING(L500)\nDISPLAY FROM(TEMP500) LIST(GRBD)                     -\n        BLANK                                        -\n        TITLE('T500/GRBD - General Resource Basic Data')             -\n        DATE TIME PAGE                               -\n        HEADER('Profile Name') ON(10,40,CH)          -\n        HEADER('Gen') ON(266,4,CH)                   -\n        HEADER('UACC') ON(341,8,CH)                  -\n        HEADER('Create Date ') ON(275,10,CH)         -\n        HEADER('Owner') ON(286,8,CH)                 -\n        HEADER('Last Referenced') ON(295,10,CH)      -\n        HEADER('Last Changed') ON(306,10,CH)         -\n        HEADER('Audit Level') ON(350,8,CH)           -\n        HEADER('Warning') ON(664,4,CH)               -\n        BTITLE('Class :')                            -\n        BREAK(257,8,CH)\nSORT    FROM(DBUDATA) TO(TEMP505) USING(L505)\nDISPLAY FROM(TEMP505) LIST(GRACC)                    -\n        BLANK                                        -\n        TITLE('T505/GRACC - General Resource Access') DATE TIME PAGE -\n        HEADER('Profile Name') ON(10,40,CH)          -\n        HEADER('Group') ON(266,8,CH)                 -\n        HEADER('Access') ON(275,8,CH)                -\n        HEADER('Access Count') ON(284,4,CH)          -\n        BTITLE('Class :')                            -\n        BREAK(257,8,CH)\nSORT    FROM(DBUDATA) TO(TEMPU505) USING(U505)\nDISPLAY FROM(TEMPU505) LIST(GRACCG)                  -\n        BLANK                                        -\n        TITLE('T505U/GRACCG - General Resource Access by Group')     -\n        DATE TIME PAGE                               -\n        HEADER('Class') ON(257,8,CH)                 -\n        HEADER('Profile Name') ON(10,40,CH)          -\n        HEADER('Access') ON(275,8,CH)                -\n        HEADER('Access Count') ON(284,4,CH)          -\n        BTITLE('Group :')                            -\n        BREAK(266,8,CH)\nSORT    FROM(DBUDATA) TO(TEMP540) USING(L540)\nDISPLAY FROM(TEMP540) LIST(STDATA)                   -\n        BLANK                                        -\n        TITLE('T540/STDATA - Started Task Segment') DATE TIME PAGE   -\n        HEADER('Profile Name') ON(10,44,CH)          -\n        HEADER('User') ON(266,8,CH)                  -\n        HEADER('Group') ON(275,8,CH)                 -\n        HEADER('Trust') ON(284,4,CH)                 -\n        HEADER('Priv') ON(289,4,CH)                  -\n        HEADER('Trace') ON(294,4,CH)\n/*\n//L100CNTL  DD  *\n SORT FIELDS=(10,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0100')\n OPTION   VLSHRT\n/*\n//L102CNTL  DD  *\n SORT FIELDS=(10,8,CH,A,19,8,CH,A,28,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0102')\n OPTION   VLSHRT\n/*\n//L200CNTL  DD  *\n SORT FIELDS=(10,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0200')\n OPTION   VLSHRT\n/*\n//L205CNTL  DD  *\n SORT FIELDS=(10,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0205')\n OPTION   VLSHRT\n/*\n//L220CNTL  DD  *\n SORT FIELDS=(10,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0220')\n OPTION   VLSHRT\n/*\n//L270CNTL  DD  *\n SORT FIELDS=(10,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0270')\n OPTION   VLSHRT\n/*\n//L400CNTL  DD  *\n SORT FIELDS=(10,44,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0400')\n OPTION   VLSHRT\n/*\n//L404CNTL  DD  *\n SORT FIELDS=(10,44,CH,A,62,8,CH,A,71,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0404')\n OPTION   VLSHRT\n/*\n//U404CNTL  DD  *\n SORT FIELDS=(62,8,CH,A,10,44,CH,A,71,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0404')\n OPTION   VLSHRT\n/*\n//L500CNTL  DD  *\n SORT FIELDS=(257,8,CH,A,10,245,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0500')\n OPTION   VLSHRT\n/*\n//L505CNTL  DD  *\n SORT FIELDS=(257,8,CH,A,10,245,CH,A,266,8,CH,A,275,8,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0505')\n OPTION   VLSHRT\n/*\n//U505CNTL  DD  *\n SORT FIELDS=(266,8,CH,A,257,8,CH,A,10,245,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0505')\n OPTION   VLSHRT\n/*\n//L540CNTL  DD  *\n SORT FIELDS=(6,251,CH,A)\n INCLUDE COND=(5,4,CH,EQ,C'0540')\n OPTION   VLSHRT\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACFREPT": {"ttr": 25, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x12 \\x11\\x01 \\x03\\x7f\\x01 \\x12?\\x07D\\x08v\\x01\\x9d\\x00\\x00\\xd9\\xc1\\xc3\\xc6\\xd9\\xd6\\xc4@\\x00\\x00\\x08v\\x00\\x00\\x01\\x9d\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.18", "flags": 32, "createdate": "2020-02-06T00:00:00", "modifydate": "2020-05-02T07:44:11", "lines": 2166, "newlines": 413, "modlines": 0, "user": "RACFROD"}, "text": ")CM\n)CM -------------------------------------------------------------------\n)CM\n)CM Updated 02May2020, Lionel B. Dyck\n)CM . Correct 4 reports - invalid SORTIN variable\n)CM\n)CM Updated 20Mar2020, Lionel B. Dyck\n)CM . Added DSMON reports\n)CM\n)CM Updated 27Dec2019, William J. Smith, Trident Services, Inc.\n)CM . Added RecTyp value and report DDNAME to report title.\n)CM . Changed all headers from upper to upper-and-lower case\n)CM\n)CM Updated 24Dec2019, William J. Smith, Trident Services, Inc.\n)CM . Removed extraneous variables and replaced with IBM publication\n)CM   numbers\n)CM\n)CM Written 04Dec2019, William J. Smith, Trident Services, Inc.\n)CM . SKELETON = RACFREPT\n)CM . Selectively process and include JCL, ICETOOL, and SORT control\n)CM   statements to process and generate all or selected RACF reports.\n)CM\n)CM -------------------------------------------------------------------\n)CM\n&RRJC1\n&RRJC2\n&RRJC3\n&RRJC4\n)SET JCL = 0\n)DOT &ratab\n)SEL &REC NE 400A AND &REC NE 400B AND &REC < 900\n)SEL &JCL = 0\n//*-------------------------------------------------------------------*\n//*                           RACF Reports\n//*-------------------------------------------------------------------*\n//* Extract generic, data set, and group data from RACF IRRDBU00\n//* Select generic classes and sort them by CLASS and PROFILE\n//*-------------------------------------------------------------------*\n//* z/OS Security Server RACF Security Administrator's Guide SA23-2289\n//* z/OS Security Server RACF Macros and Interfaces SA23-2288\n//*-------------------------------------------------------------------*\n//ICETOOL EXEC PGM=ICETOOL,REGION=0M,PARM='MSGPRT=ALL'\n//DBUDATA  DD  DISP=SHR,DSN=&DBUDATA\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(CYL,(400,50))\n//SORTWK02 DD  UNIT=SYSDA,SPACE=(CYL,(400,50))\n//SORTWK03 DD  UNIT=SYSDA,SPACE=(CYL,(400,50))\n//SORTWK04 DD  UNIT=SYSDA,SPACE=(CYL,(400,50))\n//DFSMSG   DD  SYSOUT=*\n//TOOLMSG  DD  SYSOUT=*\n//ADUDATA  DD  DUMMY\n//TOOLIN   DD  *\n)ENDSEL\n)SET JCL = 1\n)ENDSEL\n)SEL &DOIT = S\n)SEL &REC = 100  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    100 (GPBD)\n* Purpose: Group basic data\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP100) USING(L100)\n  DISPLAY FROM(TEMP100) LIST(RPT100)            -\n          BLANK                                 -\n          TITLE('T100/GPBD - Group Basic Data') -\n          DATE TIME PAGE                        -\n          HEADER('Group') ON(10,8,CH)           -\n          HEADER('Sup Group') ON(19,8,CH)       -\n          HEADER('Owner') ON(39,8,CH)           -\n          HEADER('Create Date ') ON(28,10,CH)   -\n          HEADER('Description') ON(62,60,CH)\n)ENDSEL\n)SEL &REC = 100A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    100A (@CPRO)\n* Purpose: Report the number of RACF profiles in the RACF database\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP100A) USING(A100)\n  OCCURS  FROM(TEMP100A) LIST(RPT100A)                           -\n          PAGE                                                   -\n          TITLE('CPRO: Number of Profiles in the RACF Database') -\n          DATE(YMD/)                                             -\n          TIME(12:)                                              -\n          BLANK                                                  -\n          ON(5,26,CH)   HEADER('Type')                           -\n          ON(VALCNT)    HEADER('Count')\n)ENDSEL\n)SEL &REC = 100B | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    100B (@CUG$)\n* Purpose: List the Universal group count\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP100B) USING(B100)\n  OCCURS  FROM(TEMP100B) LIST(RPT100B)        -\n          PAGE                                -\n          TITLE('Universal Group Count')      -\n          DATE(YMD/)                          -\n          TIME(12:)                           -\n          BLANK                               -\n          ON(10,8,CH)    HEADER('Group Name') -\n          ON(39,8,CH)    HEADER('Owner')      -\n          ON(28,10,CH)   HEADER('Date')\n)ENDSEL\n)SEL &REC = 102  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    102 (#LMUG)\n* Purpose: Group Members\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP102) USING(L102)\n  DISPLAY FROM(TEMP102) LIST(RPT102)          -\n          BLANK                               -\n          TITLE('T102/GPMEM - Group Members') -\n          DATE TIME PAGE                      -\n          HEADER('User') ON(19,8,CH)          -\n          HEADER('User Auth') ON(28,8,CH)     -\n          BTITLE('Group :')                   -\n          BREAK(10,8,CH)\n)ENDSEL\n)SEL &REC = 102A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    102A (@CONN)\n* Purpose: Find all userids which have group privileges above USE\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP102A) USING(A102)\n  DISPLAY FROM(TEMP102A) LIST(RPT102A)                            -\n          PAGE                                                    -\n          TITLE('CONN: User IDs With Group Privileges Above Use') -\n          DATE(YMD/)                                              -\n          TIME(12:)                                               -\n          BLANK                                                   -\n          ON(19,8,CH) HEADER('User ID')                           -\n          ON(10,8,CH) HEADER('Group Name')                        -\n          ON(28,8,CH) HEADER('Authority')\n)ENDSEL\n)SEL &REC = 120A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    120A (@GIDS)\n* Purpose: Find all shared UNIX GIDs (those assigned to more than\n*          one group)\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP120A) USING(A120)\n  OCCURS  FROM(TEMP120A) LIST(RPT120A)                 -\n          PAGE                                         -\n          TITLE('GIDS: UNIX GIDs Used More Than Once') -\n          DATE(YMD/)                                   -\n          TIME(12:)                                    -\n          BLANK                                        -\n          ON(19,10,CH) HEADER('UNIX GID')              -\n          ON(VALCNT)   HEADER('Number of Times Used')  -\n          HIGHER(1)\n)ENDSEL\n)SEL &REC = 200  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200 (USBD)\n* Purpose: Userids basic data\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP200) USING(L200)\n  DISPLAY FROM(TEMP200) LIST(RPT200)           -\n          BLANK                                -\n          TITLE('T200/USBD - User Basic Data') -\n          DATE TIME PAGE                       -\n          HEADER('User') ON(10,8,CH)           -\n          HEADER('Name') ON(79,20,CH)          -\n          HEADER('DefGrp') ON(100,8,CH)        -\n          HEADER('Create Data') ON(19,10,CH)   -\n          HEADER('Logon Date') ON(118,10,CH)   -\n          HEADER('Revoke Date') ON(462,10,CH)  -\n          HEADER('Owner') ON(30,8,CH)          -\n          HEADER('Spec') ON(44,4,CH)           -\n          HEADER('Oper') ON(49,4,CH)           -\n          HEADER('Revoke') ON(54,4,CH)\n)ENDSEL\n)SEL &REC = 200A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200A (@NPWI)\n* Purpose: Userids with NOINTERVAL specified\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP200A) USING(A200)\n  DISPLAY FROM(TEMP200A) LIST(RPT200A)                     -\n          PAGE                                             -\n          TITLE('NPWI User IDs with NOINTERVAL Specified') -\n          DATE(YMD/)                                       -\n          TIME(12:)                                        -\n          BLANK                                            -\n          ON(10,8,CH)   HEADER('User ID')                  -\n          ON(30,8,CH)   HEADER('Owner')                    -\n          ON(19,10,CH)  HEADER('Created')                  -\n          ON(44,4,CH)   HEADER('Special')                  -\n          ON(49,4,CH)   HEADER('Operations')               -\n          ON(390,4,CH)  HEADER('Auditor')\n)ENDSEL\n)SEL &REC = 200B | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200B (@UGLB)\n* Purpose: Find all of the user IDs which have extraordinary RACF\n*          privileges, such as SPECIAL, OPERATIONS, and AUDITOR\n*          at the system level\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP200B) USING(B200)\n  DISPLAY FROM(TEMP200B) LIST(RPT200B)                        -\n          PAGE                                                -\n          TITLE('UGLB: Users with Extraordinary Authorities') -\n          DATE(YMD/)                                          -\n          TIME(12:)                                           -\n          BLANK                                               -\n          ON(10,8,CH)  HEADER('User ID')                      -\n          ON(79,20,CH) HEADER('User Name')                    -\n          ON(44,4,CH)  HEADER('Special')                      -\n          ON(49,4,CH)  HEADER('Operations')                   -\n          ON(390,4,CH) HEADER('Auditor')                      -\n          ON(638,4,CH) HEADER('Read-only Auditor')\n)ENDSEL\n)SEL &REC = 200C | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200C (@UL90)\n* Purpose: Find all of the user IDs which have been defined in the\n*          past 90 days\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP200C) USING(C200)\n  DISPLAY FROM(TEMP200C) LIST(RPT200C)                        -\n          PAGE                                                -\n          TITLE('UL90: User IDs defined in the past 90 days') -\n          DATE(YMD/)                                          -\n          TIME(12:)                                           -\n          BLANK                                               -\n          ON(19,10,CH)  HEADER('Date')                        -\n          ON(10,8,CH)   HEADER('User ID')                     -\n          ON(30,8,CH)   HEADER('Owner')                       -\n          ON(44,4,CH)   HEADER('Special')                     -\n          ON(49,4,CH)   HEADER('Operations')                  -\n          ON(390,4,CH)  HEADER('Auditor')                     -\n          ON(118,10,CH) HEADER('Last Date')                   -\n          ON(109,8,CH)  HEADER('Last Time')\n)ENDSEL\n)SEL &REC = 200D | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200D (@UVRK)\n* Purpose: Find all of the user IDs which are currently revoked.\n* Note:    Only those IDs which have the REVOKED flag set in the\n*          RACF database are identified.  IDs which will become\n*          revoked at the next use are not found with this\n*          selection criteria\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP200D) USING(D200)\n  DISPLAY FROM(TEMP200D) LIST(RPT200D)                        -\n          PAGE                                                -\n          TITLE('URVK: User IDs Which are Currently Revoked') -\n          DATE(YMD/)                                          -\n          TIME(12:)                                           -\n          BLANK                                               -\n          ON(10,8,CH)  HEADER('User ID')                      -\n          ON(79,20,CH) HEADER('User Name')\n)ENDSEL\n)SEL &REC = 200E | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200E (ICE50)\n* Purpose: Report all userids who have a 'PASSDATE=00.000'\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP200E) USING(E200)\n  DISPLAY FROM(TEMP200E) LIST(RPT200E)                         -\n          PAGE                                                 -\n          TITLE('USERIDS WHICH HAVE NULL LAST PASSWORD DATES') -\n          DATE(YMD/)                                           -\n          TIME(12:)                                            -\n          BLANK                                                -\n          ON(79,20,CH)  HEADER('USER NAME')                    -\n          ON(10,8,CH)   HEADER('USERID')                       -\n          ON(118,10,CH) HEADER('LAST ACCESS')                  -\n          ON(19,10,CH)  HEADER('CREATED')                      -\n          ON(54,4,CH)   HEADER('REVOKED?')                     -\n          ON(100,8,CH)  HEADER('DEF. GROUP')\n)ENDSEL\n)SEL &REC = 200F | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200F (ICE58)\n* Purpose: Report all userids who have non-expiring passwords\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP200F) USING(F200)\n  DISPLAY FROM(TEMP200F) LIST(RPT200F)                 -\n          PAGE                                         -\n          TITLE('USERIDS WITH NON-EXPIRING PASSWORDS') -\n          DATE(YMD/)                                   -\n          TIME(12:)                                    -\n          BLANK                                        -\n          ON(10,8,CH)     HEADER('USERID')             -\n          ON(79,20,CH)    HEADER('USER NAME')          -\n          ON(100,8,CH)    HEADER('DEF GRP')            -\n          ON(118,10,CH)   HEADER('LAST INIT')          -\n          ON(54,4,CH)     HEADER('REVOKED?')           -\n          ON(129,34,CH)   HEADER('INST DATA (1ST 34 CHARS)')\n)ENDSEL\n)SEL &REC = 200G | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200G (ICE64)\n* Purpose: Report all userids that have never been used\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP200G) USING(G200)\n  DISPLAY FROM(TEMP200G) LIST(RPT200G)                 -\n          PAGE                                         -\n          TITLE('USER IDS WHICH HAVE NEVER BEEN USED') -\n          DATE(YMD/)                                   -\n          TIME(12:)                                    -\n          BLANK                                        -\n          ON(10,8,CH)    HEADER('USER ID')             -\n          ON(79,20,CH)   HEADER('USER NAME')           -\n          ON(19,10,CH)   HEADER('CREATED')             -\n          ON(118,10,CH)  HEADER('LJ DATE')             -\n          ON(54,4,CH)    HEADER('REVOKED?')            -\n          ON(49,3,CH)    HEADER('OPER')                -\n          ON(44,3,CH)    HEADER('SPEC')                -\n          ON(390,3,CH)   HEADER('AUDT')\n)ENDSEL\n)SEL &REC = 200H | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200H (ICE56)\n* Purpose: Report all userids who are revoked or a future revoke\n*          date has been set\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP200H) USING(H200)\n  DISPLAY FROM(TEMP200H) LIST(RPT200H) -\n          PAGE -\n          TITLE('REVOKED USERIDS') -\n          DATE(YMD/) -\n          TIME(12:)  -\n          BLANK      -\n          ON(10,8,CH)   HEADER('USERID')   -\n          ON(79,20,CH)  HEADER('NAME')     -\n          ON(54,4,CH)   HEADER('REVOKED?') -\n          ON(462,10,CH) HEADER('SCHEDULED')\n)ENDSEL\n)SEL &REC = 200I | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200I (ICE61)\n* Purpose: Report all userids who have the 'uaudit' attributes set\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP200I) USING(I200)\n  DISPLAY FROM(TEMP200I) LIST(RPT200I)            -\n          PAGE                                    -\n          TITLE('USERIDS WITH \"UAUDIT\" ASSIGNED') -\n          DATE(YMD/)                              -\n          TIME(12:)                               -\n          BLANK                                   -\n          ON(10,8,CH)   HEADER('USERID')          -\n          ON(79,20,CH)  HEADER('USER NAME')       -\n          ON(118,10,CH) HEADER('LAST ACCESS')     -\n          ON(19,10,CH)  HEADER('CREATED')         -\n          ON(54,4,CH)   HEADER('REVOKED?')        -\n          ON(49,3,CH)   HEADER('OPER')            -\n          ON(44,3,CH)   HEADER('SPEC')            -\n          ON(390,3,CH)  HEADER('AUDT')\n)ENDSEL\n)SEL &REC = 200J | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    200J (ICE74)\n* Purpose: Report all userids that have a password interval not equal\n*          to 60 days, will sort by interval value then userid\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP200J) USING(J200)\n  DISPLAY FROM(TEMP200J) LIST(RPT200J)                   -\n          PAGE                                           -\n          TITLE('USERIDS WITH PASSWORD INTERVALS NE 60') -\n          DATE(YMD/)                                     -\n          TIME(12:)                                      -\n          BLANK                                          -\n          ON(10,8,CH)     HEADER('USERID')               -\n          ON(79,20,CH)    HEADER('USER NAME')            -\n          ON(100,8,CH)    HEADER('DEF GRP')              -\n          ON(118,10,CH)   HEADER('LAST INIT')            -\n          ON(64,3,CH)     HEADER('INTERVAL')             -\n          ON(129,34,CH)   HEADER('INST DATA (1ST 34 CHARS)')\n)ENDSEL\n)SEL &REC = 205  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    205 (USCON)\n* Purpose: Group connections\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP205) USING(L205)\n  DISPLAY FROM(TEMP205) LIST(RPT205)              -\n          BLANK                                   -\n          TITLE('T205/USCON - Group Connections') -\n          DATE TIME PAGE                          -\n          HEADER('Group') ON(19,8,CH)             -\n          HEADER('Owner') ON(39,8,CH)             -\n          HEADER('Connect Date') ON(28,10,CH)     -\n          HEADER('Last Connect') ON(57,10,CH)     -\n          HEADER('Revoke Date') ON(119,10,CH)     -\n          BTITLE('User :')                        -\n          BREAK(10,8,CH)\n)ENDSEL\n)SEL &REC = 205A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    205A (@CCON)\n* Purpose: Find all of the users who have more than a specified\n*          number of group connections\n* Note:    The ICETOOL \"HIGHER(x)\" keyword is used to set the\n*          failure threshold\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP205A) USING(A205)\n  OCCURS  FROM(TEMP205A) LIST(RPT205A)                              -\n          PAGE                                                      -\n          TITLE('CCON: Users With More Than 100 Group Connections') -\n          DATE(YMD/)                                                -\n          TIME(12:)                                                 -\n          BLANK                                                     -\n          ON(10,8,CH)  HEADER('User ID')                            -\n          ON(VALCNT)   HEADER('Number of Group Connections')        -\n          HIGHER(100)\n)ENDSEL\n)SEL &REC = 205B | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    205B (@GRPM)\n* Purpose: List the the members of a group.  Default group name\n*          is 'SYS1'\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP205B) USING(B205)\n  DISPLAY FROM(TEMP205B) LIST(RPT205B)               -\n          PAGE                                       -\n          TITLE('GRPM: Members of the SYS1 Group')   -\n          DATE(YMD/)                                 -\n          TIME(12:)                                  -\n          BLANK                                      -\n          ON(10,8,CH)     HEADER('User ID')          -\n          ON(39,8,CH)     HEADER('Connection Owner') -\n          ON(88,4,CH)     HEADER('Special')          -\n          ON(93,4,CH)     HEADER('Oper')             -\n          ON(113,4,CH)    HEADER('Auditor')          -\n          ON(98,4,CH)     HEADER('Revoked')          -\n          ON(118,10,CH)   HEADER('Revoke Date')      -\n          ON(129,10,CH)   HEADER('Resume Date')\n)ENDSEL\n)SEL &REC = 205C | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    205C (@UGRP)\n* Purpose: Find all of the user IDs which have extraordinary\n*          RACF privileges, such as SPECIAL, OPERATIONS, and\n*          AUDITOR at the group level\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP205C) USING(C205)\n  DISPLAY FROM(TEMP205C) LIST(RPT205C)                              -\n          PAGE                                                      -\n          TITLE('UGRP: Users With Extraordinary Group Authorities') -\n          DATE(YMD/)                                                -\n          TIME(12:)                                                 -\n          BLANK                                                     -\n          ON(10,8,CH)  HEADER('User ID')                            -\n          ON(19,8,CH)  HEADER('Group Name')                         -\n          ON(88,4,CH)  HEADER('Group Special')                      -\n          ON(93,4,CH)  HEADER('Group Operations')                   -\n          ON(113,4,CH) HEADER('Group Auditor')\n)ENDSEL\n)SEL &REC = 206A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    206A (@ASOC)\n* Purpose: Find all users who have RRSF associations defined\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP206A) USING(A206)\n  DISPLAY FROM(TEMP206A) LIST(RPT206A)                                -\n          PAGE                                                        -\n          TITLE('ASOC: Users Who Have Explicit Associations Defined') -\n          DATE(YMD/)                                                  -\n          TIME(12:)                                                   -\n          BLANK                                                       -\n          ON(10,8,CH)    HEADER('User ID')                            -\n          ON(19,8,CH)    HEADER('Tgt Node')                           -\n          ON(28,8,CH)    HEADER('Tgt User')                           -\n          ON(41,4,CH)    HEADER('Peer')                               -\n          ON(56,4,CH)    HEADER('Remote Pend')                        -\n          ON(61,4,CH)    HEADER('Local Pend')                         -\n          ON(66,4,CH)    HEADER('PWSYNC')                             -\n          ON(103,10,CH)  HEADER('Accepted Date')                      -\n          ON(114,8,CH)   HEADER('Accepted Time')                      -\n          ON(130,8,CH)   HEADER('Creator')\n)ENDSEL\n)SEL &REC = 207A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    207A (@CLBL)\n* Purpose: Find certificate labels which will be the same after\n*          folding to upper case and conversion of blanks and\n*          special characters to \"_\"\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP207A) USING(A207)\n  DISPLAY FROM(TEMP207A) LIST(RPT207A)            -\n          PAGE                                    -\n          TITLE('CLBL: Certificate Labels')       -\n          DATE(4MD/)                              -\n          TIME(12:)                               -\n          BLANK                                   -\n          ON(010,08,CH)  HEADER('User ID')        -\n          ON(266,32,CH)  HEADER('Original Label') -\n          ON(298,32,CH)  HEADER('Folded Label')\n   OCCURS FROM(TEMP207A) LIST(RPT207A)                               -\n          PAGE                                                       -\n          TITLE('CLBL: Certificate Labels Which May Need to Change') -\n          DATE(YMD/)                                                 -\n          TIME(12:)                                                  -\n          BLANK                                                      -\n          ON(010,08,CH) HEADER('User ID')                            -\n          ON(298,32,CH) HEADER('Folded Label')                       -\n          ON(VALCNT)    HEADER('Count')                              -\n          HIGHER(1)\n)ENDSEL\n)SEL &REC = 220  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    220 (USTSO)\n* Purpose: Userids TSO data\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP220) USING(L220)\n  DISPLAY FROM(TEMP220) LIST(RPT220)          -\n          BLANK                               -\n          TITLE('T220/USTSO - User TSO Data') -\n          DATE TIME PAGE                      -\n          HEADER('User') ON(10,8,CH)          -\n          HEADER('Proc') ON(154,8,CH)         -\n          HEADER('Size') ON(163,10,CH)        -\n          HEADER('MaxSize') ON(176,10,CH)     -\n          HEADER('Unit') ON(209,10,CH)        -\n          HEADER('Account') ON(19,40,CH)\n)ENDSEL\n)SEL &REC = 270  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    270 (USOMVS)\n* Purpose: Userids OMVS (UNIX System Services) data\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP270) USING(L270)\n  DISPLAY FROM(TEMP270) LIST(RPT270)            -\n          BLANK                                 -\n          TITLE('T270/USOMVS - User OMVS Data') -\n          DATE TIME PAGE                        -\n          HEADER('User') ON(10,8,CH)            -\n          HEADER('UID') ON(19,10,CH)            -\n          HEADER('Home Path') ON(30,44,CH)      -\n          HEADER('Program') ON(1054,44,CH)\n)ENDSEL\n)SEL &REC = 270A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    270 (@OMVS)\n* Purpose: Find all user IDs which have an OMVS segment specified\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP270A) USING(A270)\n  DISPLAY FROM(TEMP270A) LIST(RPT270A)                 -\n          PAGE                                         -\n          TITLE('OMVS: User IDs With an OMVS Segment') -\n          DATE(YMD/)                                   -\n          TIME(12:)                                    -\n          BLANK                                        -\n          ON(10,8,CH)    HEADER('User ID')             -\n          ON(19,10,CH)   HEADER('OMVS UID')            -\n          ON(30,44,CH)   HEADER('OMVS Home Path')      -\n          ON(1054,44,CH) HEADER('Default Program')\n)ENDSEL\n)SEL &REC = 270B | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    270B (@SUPU)\n* Purpose: Find all of the UNIX System Services users who have\n*          a UID of zero (superuser)\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP270B) USING(B270)\n  DISPLAY FROM(TEMP270B) LIST(RPT270B)                               -\n          PAGE                                                       -\n          TITLE('SUPU: UNIX System Services Super Users (UID of 0)') -\n          DATE(YMD/)                                                 -\n          TIME(12:)                                                  -\n          BLANK                                                      -\n          ON(10,8,CH)    HEADER('User ID')                           -\n          ON(30,36,CH)   HEADER('Path Name')                         -\n          ON(1054,36,CH) HEADER('Home Name')\n)ENDSEL\n)SEL &REC = 270C | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    270C (@UIDS)\n* Purpose: Find all shared UNIX UIDs (those assigned to more than\n*          one user\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP270C) USING(C270)\n  OCCURS  FROM(TEMP270C) LIST(RPT270C)                 -\n          PAGE                                         -\n          TITLE('UIDS: UNIX UIDs Used More Than Once') -\n          DATE(YMD/)                                   -\n          TIME(12:)                                    -\n          BLANK                                        -\n          ON(19,10,CH) HEADER('UNIX UID')              -\n          ON(VALCNT)   HEADER('Number of Times Used')  -\n          HIGHER(1)\n)ENDSEL\n)SEL &REC = 400  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    400 (DSBD)\n* Purpose: Dataset basic data\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP400) USING(L400)\n  DISPLAY FROM(TEMP400) LIST(RPT400)               -\n          BLANK                                    -\n          TITLE('T400/DSBD - Data Set Basic Data') -\n          DATE TIME PAGE                           -\n          HEADER('Data Set Profile') ON(10,44,CH)  -\n          HEADER('Gen') ON(62,4,CH)                -\n          HEADER('UACC') ON(133,8,CH)              -\n          HEADER('Create Date ') ON(67,10,CH)      -\n          HEADER('Owner') ON(156,8,CH)             -\n          HEADER('Last Referenced') ON(87,10,CH)   -\n          HEADER('Last Changed') ON(98,10,CH)      -\n          HEADER('Audit Level') ON(147,8,CH)       -\n          HEADER('Warning') ON(488,4,CH)\n)ENDSEL\n)SEL &REC = 400C | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:   400C (@UADS)\n* Purpoe: Find all data set profiles with a UACC other than NONE\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP400C) USING(C400)\n  DISPLAY FROM(TEMP400C) LIST(RPT400C)                           -\n          PAGE                                                   -\n          TITLE('UADS: DS Profiles with a UACC Other Than None') -\n          DATE(YMD/)                                             -\n          TIME(12:)                                              -\n          BLANK                                                  -\n          ON(10,44,CH) HEADER('Data Set Name Profile Name')      -\n          ON(55,6,CH)   HEADER('Volume')                         -\n          ON(62,4,CH)   HEADER('Generic')                        -\n          ON(78,8,CH)   HEADER('Owner')                          -\n          ON(133,8,CH)  HEADER('UACC')\n)ENDSEL\n)SEL &REC = 400D | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    400D (@WNDS)\n* Purpose: Find all data set profiles which are in WARNING mode\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP400D) USING(D400)\n  DISPLAY FROM(TEMP400D) LIST(RPT400D)                    -\n          PAGE                                            -\n          TITLE('WNDS: DS Profiles with in WARNING Mode') -\n          DATE(YMD/)                                      -\n          TIME(12:)                                       -\n          BLANK                                           -\n          ON(10,44,CH) HEADER('Data Set Name')            -\n          ON(55,6,CH)   HEADER('Volume')                  -\n          ON(78,8,CH)   HEADER('Owner')                   -\n          ON(133,8,CH)  HEADER('UACC')\n)ENDSEL\n)SEL &REC = 400E | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    400E (ICE66)\n* Purpose: Report all dataset profiles and their UACC\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP400E) USING(E400)\n  DISPLAY FROM(TEMP400E) LIST(RPT400E)          -\n          PAGE                                  -\n          TITLE('LIST OF DATASET PROFILES')     -\n          DATE(4MD/)                            -\n          TIME(24:)                             -\n          BLANK                                 -\n          ON(10,44,CH)  HEADER('DATA SET NAME') -\n          ON(78,8,CH)   HEADER('OWNER')         -\n          ON(488,3,CH)  HEADER('WARNING')       -\n          ON(133,8,CH)  HEADER('UACC')          -\n          ON(196,30,CH) HEADER('DESCRIPTION')\n)ENDSEL\n)SEL &REC = 400F | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    400F (ICE59)\n* Purpose: Report all dataset profiles that have \"UACC=NONE\"\n* Note:    To make this report on all dataset profiles with a UACC\n*          greater than none, change:\n*            133,4,CH,EQ,C'NONE')\n*          to:\n*            133,4,CH,NE,C'NONE')        (Change 'TITLE' also...)\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP400F) USING(F400)\n  DISPLAY FROM(TEMP400F) LIST(RPT400F)             -\n          PAGE                                     -\n          TITLE('DATASET PROFILES WITH UACC=NONE') -\n          DATE(YMD/)                               -\n          TIME(12:)                                -\n          BLANK                                    -\n          ON(10,44,CH)  HEADER('PROFILE NAME')     -\n          ON(78,8,CH)   HEADER('OWNER')            -\n          ON(62,4,CH)   HEADER('GENERIC?')         -\n          ON(67,10,CH)  HEADER('CREATED')          -\n          ON(133,7,CH)  HEADER('UACC')             -\n          ON(196,64,CH) HEADER('INST. DATA')\n)ENDSEL\n)SEL &REC = 402A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    402A (@IDSC)\n* Purpose: Find all of the data set profiles conditional access\n*          lists which have a \"*\" in the access list with a level\n*          of other than NONE\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP402A) USING(A402)\n  DISPLAY FROM(TEMP402A) LIST(RPT402A)                           -\n          PAGE                                                   -\n          TITLE('IDSC: DS Cond ACLs With ID(*) Other Than None') -\n          DATE(YMD/)                                             -\n          TIME(12:)                                              -\n          BLANK                                                  -\n          ON(10,44,CH)  HEADER('Profile Name')                   -\n          ON(55,6,CH)   HEADER('Volume')                         -\n          ON(89,8,CH)   HEADER('Access')                         -\n          ON(62,8,CH)   HEADER('Access Type')                    -\n          ON(71,8,CH)   HEADER('Access Element')\n)ENDSEL\n)SEL &REC = 404  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    404 (DSACC)\n* Purpose: Dataset access\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP404) USING(L404)\n  DISPLAY FROM(TEMP404) LIST(RPT404)            -\n          BLANK                                 -\n          TITLE('T404/DSACC - Data Set Access') -\n          DATE TIME PAGE                        -\n          HEADER('Group') ON(62,8,CH)           -\n          HEADER('Access') ON(71,8,CH)          -\n          HEADER('Access Count') ON(80,4,CH)    -\n          BTITLE('DataSet Profile:')            -\n          BREAK(10,44,CH)\n)ENDSEL\n)SEL &REC = 404A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    404A (@ALDS)\n* Purpose: Find all of the discrete data set profiles which have\n*          IDs on the standard access list with ALTER.  These IDs\n*          have the ability to change the access list on the profile\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP404A) USING(A404)\n  DISPLAY FROM(TEMP404A) LIST(RPT404A)                            -\n          PAGE                                                    -\n          TITLE('ALDS: IDs with ALTER Auth to Discrete DS Profs') -\n          DATE(YMD/)                                              -\n          TIME(12:)                                               -\n          BLANK                                                   -\n          ON(10,44,CH)  HEADER('Profile Name')                    -\n          ON(55,6,CH)   HEADER('Volume')                          -\n          ON(62,8,CH)   HEADER('ID')                              -\n          ON(80,5,CH)   HEADER('Access Count')\n)ENDSEL\n)SEL &REC = 404B | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    404B (@IDSS)\n* Purpose: Find all of the data set profiles access lists which have\n*          an \"*\" on the access list with a level of other than NONE\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP404B) USING(B404)\n  DISPLAY FROM(TEMP404B) LIST(RPT404B)                               -\n          PAGE                                                       -\n          TITLE('IDSS: DS Standard ACLs With ID(*) Other Than None') -\n          DATE(YMD/)                                                 -\n          TIME(12:)                                                  -\n          BLANK                                                      -\n          ON(10,44,CH)  HEADER('Profile Name')                       -\n          ON(55,6,CH)   HEADER('Volume')                             -\n          ON(71,8,CH)   HEADER('Access')\n)ENDSEL\n)SEL &REC = 404U | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    404U (DSACCG)\n* Purpose: Dataset access by group\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP404U) USING(U404)\n  DISPLAY FROM(TEMP404U) LIST(RPT404U)                     -\n          BLANK                                            -\n          TITLE('T404U/DSACCG - Data Set Access by Group') -\n          DATE TIME PAGE                                   -\n          HEADER('Data Set Profile') ON(10,44,CH)          -\n          HEADER('Access') ON(71,8,CH)                     -\n          HEADER('Access Count') ON(80,4,CH)               -\n          BTITLE('Group:')                                 -\n          BREAK(62,8,CH)\n)ENDSEL\n)SEL &REC = 500  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    500 (GRBD)\n* Purpose: General resource basic data\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP500) USING(L500)\n  DISPLAY FROM(TEMP500) LIST(RPT500)                       -\n          BLANK                                            -\n          TITLE('T500/GRBD - General Resource Basic Data') -\n          DATE TIME PAGE                                   -\n          HEADER('Profile Name') ON(10,40,CH)              -\n          HEADER('Gen') ON(266,4,CH)                       -\n          HEADER('UACC') ON(341,8,CH)                      -\n          HEADER('Create Date ') ON(275,10,CH)             -\n          HEADER('Owner') ON(286,8,CH)                     -\n          HEADER('Last Referenced') ON(295,10,CH)          -\n          HEADER('Last Changed') ON(306,10,CH)             -\n          HEADER('Audit Level') ON(350,8,CH)               -\n          HEADER('Warning') ON(664,4,CH)                   -\n          BTITLE('Class :')                                -\n          BREAK(257,8,CH)\n)ENDSEL\n)SEL &REC = 500A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    500A (@BGGR)\n* Purpose: Find the discrete generic resource profiles which have\n*          generic characters in their name\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP500A) USING(A500)\n  DISPLAY FROM(TEMP500A) LIST(RPT500A)                           -\n          PAGE                                                   -\n          TITLE('BGGR: Discrete GR Profiles with Generic Names') -\n          DATE(YMD/)                                             -\n          TIME(12:)                                              -\n          BLANK                                                  -\n          ON(10,60,CH)   HEADER('Profile')                       -\n          ON(266,4,CH)   HEADER('Generic')                       -\n          ON(257,8,CH)   HEADER('Class')                         -\n          ON(275,10,CH)  HEADER('Created')                       -\n          ON(286,8,CH)   HEADER('Owner')\n)ENDSEL\n)SEL &REC = 500B | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    500B (@CGEN)\n* Purpose: Report the number of RACF general resource profiles in\n*          the RACF database\n*--------------------------------------------------------------------*\n  COPY    FROM(DBUDATA)  TO(TEMP500B) USING(B500)\n  OCCURS  FROM(TEMP500B) LIST(RPT500B)                       -\n          PAGE                                               -\n          TITLE('CGEN: Number of General Resource Profiles') -\n          DATE(YMD/)                                         -\n          TIME(12:)                                          -\n          BLANK                                              -\n          ON(257,8,CH)  HEADER('Class')                      -\n          ON(VALCNT)    HEADER('Count')\n)ENDSEL\n)SEL &REC = 500C | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    500C (@PCAM)\n* Purpose: Find all of the PROGRAM class profiles with specific\n*          program names which have MAIN or BASIC APPLDATA\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP500C) USING(C500)\n  DISPLAY FROM(TEMP500C) LIST(RPT500C)                           -\n          PAGE                                                   -\n          TITLE('PROGRAM Profiles with MAIN or BASIC Attribute') -\n          DATE(YMD/)                                             -\n          TIME(12:)                                              -\n          BLANK                                                  -\n          ON(10,8,CH)   HEADER('Name')                           -\n          ON(286,8,CH)  HEADER('Owner')                          -\n          ON(275,10,CH) HEADER('Created')                        -\n          ON(341,8,CH)  HEADER('UACC')                           -\n          ON(758,5,CH)  HEADER('APPLDATA')\n)ENDSEL\n)SEL &REC = 500D | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    500D (@UAGR)\n* Purpose: Find all of the general resource profiles which have a\n*          UACC of other than NONE\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP500D) USING(D500)\n  DISPLAY FROM(TEMP500D) LIST(RPT500D)                           -\n          PAGE                                                   -\n          TITLE('UAGR: GR Profiles with a UACC Other Than None') -\n          DATE(YMD/)                                             -\n          TIME(12:)                                              -\n          BLANK                                                  -\n          ON(257,8,CH)  HEADER('Class')                          -\n          ON(10,44,CH)  HEADER('General Resource Profile Name')  -\n          ON(266,4,CH)  HEADER('Generic')                        -\n          ON(286,8,CH)  HEADER('Owner')                          -\n          ON(341,8,CH)  HEADER('UACC')\n)ENDSEL\n)SEL &REC = 500E | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    500E (@WNGR)\n* Purpose: Find all general resource profiles which are in\n*          WARNING mode\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP500E) USING(E500)\n  DISPLAY FROM(TEMP500E) LIST(RPT500E)                          -\n          PAGE                                                  -\n          TITLE('WNGR: GR Profiles with in WARNING Mode')       -\n          DATE(YMD/)                                            -\n          TIME(12:)                                             -\n          BLANK                                                 -\n          ON(10,44,CH)  HEADER('General Resource Profile Name') -\n          ON(257,8,CH)  HEADER('Class')                         -\n          ON(286,8,CH)  HEADER('Owner')                         -\n          ON(341,8,CH)  HEADER('UACC')\n)ENDSEL\n)SEL &REC = 503  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    503 (ICE53)\n* Purpose: Report all general resource classes that have duplicate\n*          transactions in the member lists\n*--------------------------------------------------------------------*\n  SORT   FROM(DBUDATA) TO(TEMP503) USING(L503)\n  OCCUR  FROM(TEMP503) LIST(RPT503)                             -\n         TITLE('TRANSACTIONS DEFINED IN GREATER THAN 1 GTRANS') -\n         PAGE                                                   -\n         DATE(YMD/)                                             -\n         TIME(12:)                                              -\n         BLANK                                                  -\n         ON(257,8,CH)  HEADER('CLASS')                          -\n         ON(266,8,CH)  HEADER('NAME')                           -\n         ON(VALCNT)    HEADER('OCCURRENCES')                    -\n         HIGHER(1)\n)ENDSEL\n)SEL &REC = 505  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    505 (GRACC)\n* Purpose: General resource access\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP505) USING(L505)\n  DISPLAY FROM(TEMP505) LIST(RPT505)                    -\n          BLANK                                         -\n          TITLE('T505/GRACC - General Resource Access') -\n          DATE TIME PAGE                                -\n          HEADER('Profile Name') ON(10,40,CH)           -\n          HEADER('Group') ON(266,8,CH)                  -\n          HEADER('Access') ON(275,8,CH)                 -\n          HEADER('Access Count') ON(284,4,CH)           -\n          BTITLE('Class :')                             -\n          BREAK(257,8,CH)\n)ENDSEL\n)SEL &REC = 505A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    505A (@IGRS)\n* Purpose: Find all of the general resource profile standard access\n*          list entries which have a \"*\" on the access list with\n*          a level of other than NONE\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP505A) USING(A505)\n  DISPLAY FROM(TEMP505A) LIST(RPT505A)                               -\n          PAGE                                                       -\n          TITLE('IGRS: GR Standard ACLs with ID(*) Other Than None') -\n          DATE(YMD/)                                                 -\n          TIME(12:)                                                  -\n          BLANK                                                      -\n          ON(257,8,CH)  HEADER('Class')                              -\n          ON(10,80,CH)  HEADER('Profile Name')                       -\n          ON(275,8,CH)  HEADER('Access')\n)ENDSEL\n)SEL &REC = 505U | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    505U (GRACCG)\n* Purpose: General resource access by group\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP505U) USING(U505)\n  DISPLAY FROM(TEMP505U) LIST(RPT505U)                             -\n          BLANK                                                    -\n          TITLE('T505U/GRACCG - General Resource Access by Group') -\n          DATE TIME PAGE                                           -\n          HEADER('Class') ON(257,8,CH)                             -\n          HEADER('Profile Name') ON(10,40,CH)                      -\n          HEADER('Access') ON(275,8,CH)                            -\n          HEADER('Access Count') ON(284,4,CH)                      -\n          BTITLE('Group :')                                        -\n          BREAK(266,8,CH)\n)ENDSEL\n)SEL &REC = 507A | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    507A (@IGRC)\n* Purpose: Find all of the general resource profile conditional\n*          access list entries which have a \"*\" on the access list\n*          with a level of other than NONE\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA)  TO(TEMP507A) USING(A507)\n  DISPLAY FROM(TEMP507A) LIST(RPT507A)                           -\n          PAGE                                                   -\n          TITLE('IGRC: GR Cond ACLs with ID(*) Other Than None') -\n          DATE(YMD/)                                             -\n          TIME(12:)                                              -\n          BLANK                                                  -\n          ON(257,8,CH)  HEADER('Class')                          -\n          ON(10,60,CH)  HEADER('Profile Name')                   -\n          ON(293,8,CH)  HEADER('Access')                         -\n          ON(266,8,CH)  HEADER('Access Type')                    -\n          ON(275,8,CH)  HEADER('Access Element')\n)ENDSEL\n)SEL &REC = 540  | &REC = ALL\n*--------------------------------------------------------------------*\n* Name:    540 (GRST)\n* Purpose: Started task segment\n*--------------------------------------------------------------------*\n  SORT    FROM(DBUDATA) TO(TEMP540) USING(L540)\n  DISPLAY FROM(TEMP540) LIST(RPT540)                  -\n          BLANK                                       -\n          TITLE('T540/STDATA - Started Task Segment') -\n          DATE TIME PAGE                              -\n          HEADER('Profile Name') ON(10,44,CH)         -\n          HEADER('User') ON(266,8,CH)                 -\n          HEADER('Group') ON(275,8,CH)                -\n          HEADER('Trust') ON(284,4,CH)                -\n          HEADER('Priv') ON(289,4,CH)                 -\n          HEADER('Trace') ON(294,4,CH)\n)ENDSEL\n)SEL &REC = 100  | &REC = ALL\n//TEMP100  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 100A | &REC = ALL\n//TEMP100A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 100B | &REC = ALL\n//TEMP100B DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 102  | &REC = ALL\n//TEMP102  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 102A | &REC = ALL\n//TEMP102A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 120A | &REC = ALL\n//TEMP120A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200  | &REC = ALL\n//TEMP200  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200A | &REC = ALL\n//TEMP200A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200B | &REC = ALL\n//TEMP200B DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200C | &REC = ALL\n//TEMP200C DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200D | &REC = ALL\n//TEMP200D DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200E | &REC = ALL\n//TEMP200E DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200F | &REC = ALL\n//TEMP200F DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200G | &REC = ALL\n//TEMP200G DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200H | &REC = ALL\n//TEMP200H DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200I | &REC = ALL\n//TEMP200I DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 200J | &REC = ALL\n//TEMP200J DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 205  | &REC = ALL\n//TEMP205  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 205A | &REC = ALL\n//TEMP205A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 205B | &REC = ALL\n//TEMP205B DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 205C | &REC = ALL\n//TEMP205C DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 206A | &REC = ALL\n//TEMP206A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 207A | &REC = ALL\n//TEMP207A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 220  | &REC = ALL\n//TEMP220  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 270  | &REC = ALL\n//TEMP270  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 270A | &REC = ALL\n//TEMP270A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 270B | &REC = ALL\n//TEMP270B DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 270C | &REC = ALL\n//TEMP270C DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 400  | &REC = ALL\n//TEMP400  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 400C | &REC = ALL\n//TEMP400C DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 400D | &REC = ALL\n//TEMP400D DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 400E | &REC = ALL\n//TEMP400E DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 400F | &REC = ALL\n//TEMP400F DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 402A | &REC = ALL\n//TEMP402A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 404  | &REC = ALL\n//TEMP404  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 404A | &REC = ALL\n//TEMP404A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 404B | &REC = ALL\n//TEMP404B DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 404U | &REC = ALL\n//TEMP404U DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 500  | &REC = ALL\n//TEMP500  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 500A | &REC = ALL\n//TEMP500A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 500B | &REC = ALL\n//TEMP500B DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 500C | &REC = ALL\n//TEMP500C DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 500D | &REC = ALL\n//TEMP500D DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 500E | &REC = ALL\n//TEMP500E DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 503  | &REC = ALL\n//TEMP503  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 505  | &REC = ALL\n//TEMP505  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 505A | &REC = ALL\n//TEMP505A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 505U | &REC = ALL\n//TEMP505U DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 507A | &REC = ALL\n//TEMP507A DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 540  | &REC = ALL\n//TEMP540  DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n)ENDSEL\n)SEL &REC = 100  | &REC = ALL\n//RPT100   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 100A | &REC = ALL\n//RPT100A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 100B | &REC = ALL\n//RPT100B  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 102  | &REC = ALL\n//RPT102   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 102A | &REC = ALL\n//RPT102A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 120A | &REC = ALL\n//RPT120A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200  | &REC = ALL\n//RPT200   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200A | &REC = ALL\n//RPT200A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200B | &REC = ALL\n//RPT200B  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200C | &REC = ALL\n//RPT200C  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200D | &REC = ALL\n//RPT200D  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200E | &REC = ALL\n//RPT200E  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200F | &REC = ALL\n//RPT200F  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200G | &REC = ALL\n//RPT200G  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200H | &REC = ALL\n//RPT200H  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200I | &REC = ALL\n//RPT200I  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 200J | &REC = ALL\n//RPT200J  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 205  | &REC = ALL\n//RPT205   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 205A | &REC = ALL\n//RPT205A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 205B | &REC = ALL\n//RPT205B  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 205C | &REC = ALL\n//RPT205C  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 206A | &REC = ALL\n//RPT206A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 207A | &REC = ALL\n//RPT207A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 220  | &REC = ALL\n//RPT220   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 270  | &REC = ALL\n//RPT270   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 270A | &REC = ALL\n//RPT270A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 270B | &REC = ALL\n//RPT270B  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 270C | &REC = ALL\n//RPT270C  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 400  | &REC = ALL\n//RPT400   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 400C | &REC = ALL\n//RPT400C  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 400D | &REC = ALL\n//RPT400D  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 400E | &REC = ALL\n//RPT400E  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 400F | &REC = ALL\n//RPT400F  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 402A | &REC = ALL\n//RPT402A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 404  | &REC = ALL\n//RPT404   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 404A | &REC = ALL\n//RPT404A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 404B | &REC = ALL\n//RPT404B  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 404U | &REC = ALL\n//RPT404U  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 500  | &REC = ALL\n//RPT500   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 500A | &REC = ALL\n//RPT500A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 500B | &REC = ALL\n//RPT500B  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 500C | &REC = ALL\n//RPT500C  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 500D | &REC = ALL\n//RPT500D  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 500E | &REC = ALL\n//RPT500E  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 503  | &REC = ALL\n//RPT503   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 505  | &REC = ALL\n//RPT505   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 505A | &REC = ALL\n//RPT505A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 505U | &REC = ALL\n//RPT505U  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 507A | &REC = ALL\n//RPT507A  DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 540  | &REC = ALL\n//RPT540   DD  SYSOUT=*\n)ENDSEL\n)SEL &REC = 100  | &REC = ALL\n//L100CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0100')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 100A | &REC = ALL\n//A100CNTL DD  *\n  INCLUDE COND=(5,4,SS,EQ,C'0100,0200,0400,0500')\n  OUTFIL  FNAMES=TEMP100A,OUTREC=(1,4,5,4,CHANGE=(26,\n          C'0100',C'Group Profiles',\n          C'0200',C'User Profiles',\n          C'0400',C'Dataset Profiles',\n          C'0500',C'General Resource Profiles'),\n          NOMATCH=(C'Unknown Profiles'))\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 100B | &REC = ALL\n//B100CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0100',AND,363,4,CH,EQ,C'YES ')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 102  | &REC = ALL\n//L102CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A,19,8,CH,A,28,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0102')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 102A | &REC = ALL\n//A102CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(28,8,CH,NE,C'USE ',AND,5,4,CH,EQ,C'0102')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 120A | &REC = ALL\n//A120CNTL DD  *\n  SORT    FIELDS=(19,10,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0120')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200  | &REC = ALL\n//L200CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200A | &REC = ALL\n//A200CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                64,4,CH,EQ,C'000',AND,\n                10,3,CH,NE,C'irr')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200B | &REC = ALL\n//B200CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n               (44,3,CH,EQ,C'YES',OR,\n                49,3,CH,EQ,C'YES',OR,\n                390,3,CH,EQ,C'YES',OR,\n                638,3,CH,EQ,C'YES'))\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200C | &REC = ALL\n//C200CNTL DD  *\n  SORT    FIELDS=COPY\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                 19,10,CH,GE,DATE1(-)-90)\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200D | &REC = ALL\n//D200CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                 54,3,CH,EQ,C'YES')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200E | &REC = ALL\n//E200CNTL DD  *\n  SORT    FIELDS=(118,10,CH,A,19,10,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                68,8,CH,EQ,C'        ')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200F | &REC = ALL\n//F200CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                64,3,CH,EQ,C'000')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200G | &REC = ALL\n//G200CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                118,8,CH,EQ,C'        ',AND,\n                68,8,CH,EQ,C'        ',AND,\n                10,3,CH,NE,C'irr')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200H | &REC = ALL\n//H200CNTL DD  *\n  SORT FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n          (462,10,CH,NE,C'          ',OR,\n          54,3,CH,EQ,C'YES'))\n)ENDSEL\n)SEL &REC = 200I | &REC = ALL\n//I200CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                385,3,CH,EQ,C'YES')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 200J | &REC = ALL\n//J200CNTL DD  *\n  SORT    FIELDS=(64,3,CH,D,10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,\n                64,3,CH,NE,C'060')\n  OPTION VLSHRT\n)ENDSEL\n)SEL &REC = 205  | &REC = ALL\n//L205CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0205')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 205A | &REC = ALL\n//A205CNTL DD  *\n  INCLUDE COND=(5,4,CH,EQ,C'0205')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 205B | &REC = ALL\n//B205CNTL DD  *\n  SORT    FIELDS=(28,10,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0205',AND,19,8,CH,EQ,C'SYS1 ')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 205C | &REC = ALL\n//C205CNTL DD  *\n  SORT    FIELDS=(10,08,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0205',AND,\n               (88,3,CH,EQ,C'YES',OR,\n                93,3,CH,EQ,C'YES',OR,\n                113,3,CH,EQ,C'YES'))\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 206A | &REC = ALL\n//A206CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0206')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 207A | &REC = ALL\n//A207CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0206')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 220  | &REC = ALL\n//L220CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0220')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 270  | &REC = ALL\n//L270CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0270')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 270A | &REC = ALL\n//A270CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0270')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 270B | &REC = ALL\n//B270CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0270',AND,\n                 19,10,CH,EQ,C'0000000000')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 270C | &REC = ALL\n//C270CNTL DD  *\n  SORT    FIELDS=(19,10,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0270')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 400  | &REC = ALL\n//L400CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0400')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 400C | &REC = ALL\n//C400CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,\n                 133,8,CH,NE,C'NONE')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 400D | &REC = ALL\n//D400CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,\n                 488,4,CH,EQ,C'YES')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 400E | &REC = ALL\n//E400CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0400')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 400F | &REC = ALL\n//F400CNTL DD  *\n  SORT    FIELDS=(118,10,CH,A,19,10,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,\n                133,4,CH,EQ,C'NONE')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 402A | &REC = ALL\n//A402CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0402',AND,\n                 80,8,CH,EQ,C'*',AND,\n                 89,8,CH,NE,C'NONE')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 404  | &REC = ALL\n//L404CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A,62,8,CH,A,71,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0404')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 404A | &REC = ALL\n//A404CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0404',AND,\n                 71,8,CH,EQ,C'ALTER',AND,\n                 55,6,CH,NE,C'     ')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 404B | &REC = ALL\n//B404CNTL DD  *\n  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0404',AND,62,8,CH,EQ,C'*',AND,\n           71,8,CH,NE,C'NONE')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 404U | &REC = ALL\n//U404CNTL DD  *\n  SORT    FIELDS=(62,8,CH,A,10,44,CH,A,71,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0404')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 500  | &REC = ALL\n//L500CNTL DD  *\n  SORT    FIELDS=(257,8,CH,A,10,245,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0500')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 500A | &REC = ALL\n//A500CNTL DD  *\n  SORT    FIELDS=(10,246,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,266,4,CH,EQ,C'NO ',AND,\n                 257,8,CH,NE,C'PROGRAM',AND,\n                 257,8,CH,NE,C'VMNODE',AND,\n                   (10,249,SS,EQ,C'*',OR,\n                    10,249,SS,EQ,C'%',OR,\n                    10,249,SS,EQ,C'&&'))\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 500B | &REC = ALL\n//B500CNTL DD  *\n  INCLUDE COND=(5,4,CH,EQ,C'0500')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 500C | &REC = ALL\n//C500CNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,\n                 257,8,CH,EQ,C'PROGRAM',AND,\n                (758,255,CH,EQ,C'MAIN',OR,\n                 758,255,CH,EQ,C'BASIC'),AND,\n                 10,8,SS,NE,C'*')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 500D | &REC = ALL\n//D500CNTL DD  *\n  SORT    FIELDS=(257,8,CH,A,10,246,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,\n                 664,4,CH,EQ,C'YES')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 500E | &REC = ALL\n//E500CNTL DD  *\n  SORT    FIELDS=(257,8,CH,A,10,246,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,\n                 341,8,CH,NE,C'NONE',AND,\n                 257,8,CH,NE,C'DIGTCERT')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 503  | &REC = ALL\n//L503CNTL DD  *\n  SORT    FIELDS=(257,8,CH,A,10,245,CH,A,266,255,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0503',AND,257,4,CH,EQ,C'GIMS')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 505  | &REC = ALL\n//L505CNTL DD  *\n  SORT    FIELDS=(257,8,CH,A,10,245,CH,A,266,8,CH,A,275,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0505')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 505A | &REC = ALL\n//A505CNTL DD  *\n  SORT    FIELDS=(257,8,CH,A,10,247,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0505',AND,\n                 266,8,CH,EQ,C'*',AND,\n                 275,8,CH,NE,C'NONE')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 505U | &REC = ALL\n//U505CNTL DD  *\n  SORT    FIELDS=(266,8,CH,A,257,8,CH,A,10,245,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0505')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 507A | &REC = ALL\n//A507CNTL DD  *\n  SORT    FIELDS=(257,8,CH,A,10,246,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0507',AND,\n                 284,8,CH,EQ,C'*',AND,\n                 293,8,CH,NE,C'NONE')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 540  | &REC = ALL\n//L540CNTL DD  *\n  SORT    FIELDS=(6,251,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0540')\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 400A | &REC = ALL\n//*-------------------------------------------------------------------*\n//*             Data Sets - Exessive Generic Profiles\n//*-------------------------------------------------------------------*\n//* Count the number of generic data set profiles per high-level\n//* qualifier.\n//*\n//* This report identifies those high-level qualifiers which have more\n//* than the specified number of generic data set profiles defined.\n//*\n//* ICETOOL's \"HIGHER(x)\" keyword is used to set the reporting\n//* threshold.\n//*-------------------------------------------------------------------*\n//REC400A1 EXEC PGM=SORT\n//SORTIN   DD  DISP=SHR,DSN=&DBUDATA\n//SORTWK01 DD  SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//DS$1     DD  DISP=(NEW,PASS),DSN=&&TEMP1,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$2     DD  DISP=(NEW,PASS),DSN=&&TEMP2,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$3     DD  DISP=(NEW,PASS),DSN=&&TEMP3,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$4     DD  DISP=(NEW,PASS),DSN=&&TEMP4,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$5     DD  DISP=(NEW,PASS),DSN=&&TEMP5,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$6     DD  DISP=(NEW,PASS),DSN=&&TEMP6,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$7     DD  DISP=(NEW,PASS),DSN=&&TEMP7,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$8     DD  DISP=(NEW,PASS),DSN=&&TEMP8,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//SYSOUT   DD  SYSOUT=*\n//SORTOUT  DD  DSN=&&TEMP,DISP=(NEW,DELETE,DELETE),\n//             SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//SYSIN    DD  *\n  SORT    FIELDS=(10,44,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,62,4,CH,EQ,C'YES ')\n  OUTFIL  INCLUDE=(11,1,CH,EQ,C'.',OR,11,1,CH,EQ,C' '),\n          OUTREC=(1,4,5,4,X,10,1,7X),FNAMES=DS$1\n  OUTFIL  INCLUDE=(12,1,CH,EQ,C'.'),\n          OUTREC=(1,4,5,4,X,10,2,6X),FNAMES=DS$2\n  OUTFIL  INCLUDE=(13,1,CH,EQ,C'.',AND,10,3,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,3,5X),FNAMES=DS$3\n  OUTFIL  INCLUDE=(14,1,CH,EQ,C'.',AND,10,4,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,4,4X),FNAMES=DS$4\n  OUTFIL  INCLUDE=(15,1,CH,EQ,C'.',AND,10,5,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,5,3X),FNAMES=DS$5\n  OUTFIL  INCLUDE=(16,1,CH,EQ,C'.',AND,10,6,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,6,2X),FNAMES=DS$6\n  OUTFIL  INCLUDE=((17,1,CH,EQ,C'.',OR,17,1,CH,EQ,C' '),\n          AND,10,7,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,7,1X),FNAMES=DS$7\n  OUTFIL  SAVE,\n          OUTREC=(1,4,5,4,X,10,8),FNAMES=DS$8\n  OPTION  VLSHRT\n//*-------------------------------------------------------------------*\n//REC400A2 EXEC PGM=ICETOOL\n//TOOLMSG  DD  SYSOUT=*\n//RPT400A  DD  SYSOUT=*\n//DFSMSG   DD  SYSOUT=*\n//DBUDATA  DD  DISP=(OLD,DELETE),DSN=&&TEMP1\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP2\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP3\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP4\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP5\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP6\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP7\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP8\n//TEMP0001 DD  DISP=(NEW,DELETE,DELETE),SPACE=(CYL,(100,100,0)),\n//             UNIT=SYSALLDA\n//TOOLIN   DD  *\n  OCCURS  FROM(DBUDATA) LIST(RPT400A)                   -\n          PAGE                                          -\n          TITLE('HLQs With Excessive Generic Profiles') -\n          DATE(YMD/)                                    -\n          TIME(12:)                                     -\n          BLANK                                         -\n          ON(10,8,CH)   HEADER('HLQ')                   -\n          ON(VALCNT)    HEADER('Count')                 -\n          HIGHER(200)\n)ENDSEL\n)SEL &REC = 400B | &REC = ALL\n//*-------------------------------------------------------------------*\n//* $CFQG: Count fully qualified generic data set profiles\n//*\n//* This report identifies those high-level qualifiers which\n//* have more than the specified number of fully qualified\n//* generic data set profiles defined.\n//*\n//* ICETOOL's \"HIGHER(x)\" keyword is used to set the reporting\n//* threshold.\n//*-------------------------------------------------------------------*\n//REC400B1 EXEC PGM=SORT\n//SORTIN   DD  DISP=SHR,DSN=&DBUDATA\n//SORTWK01 DD  SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//DS$1     DD  DISP=(NEW,PASS),DSN=&&TEMP1,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$2     DD  DISP=(NEW,PASS),DSN=&&TEMP2,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$3     DD  DISP=(NEW,PASS),DSN=&&TEMP3,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$4     DD  DISP=(NEW,PASS),DSN=&&TEMP4,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$5     DD  DISP=(NEW,PASS),DSN=&&TEMP5,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$6     DD  DISP=(NEW,PASS),DSN=&&TEMP6,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$7     DD  DISP=(NEW,PASS),DSN=&&TEMP7,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//DS$8     DD  DISP=(NEW,PASS),DSN=&&TEMP8,UNIT=SYSALLDA,\n//             SPACE=(CYL,(100,100,0))\n//SYSOUT   DD  SYSOUT=*\n//SORTOUT  DD  DSN=&&TEMP,DISP=(NEW,DELETE,DELETE),\n//             SPACE=(CYL,(20,5,0)),UNIT=SYSALLDA\n//SYSIN    DD  *\n  SORT    FIELDS=(10,44,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,62,4,CH,EQ,C'YES ',AND,\n          10,44,SS,NE,C'*',AND,10,44,SS,NE,C'%')\n  OUTFIL  INCLUDE=(11,1,CH,EQ,C'.',OR,11,1,CH,EQ,C' '),\n          OUTREC=(1,4,5,4,X,10,1,7X),FNAMES=DS$1\n  OUTFIL  INCLUDE=(12,1,CH,EQ,C'.'),\n          OUTREC=(1,4,5,4,X,10,2,6X),FNAMES=DS$2\n  OUTFIL  INCLUDE=(13,1,CH,EQ,C'.',AND,10,3,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,3,5X),FNAMES=DS$3\n  OUTFIL  INCLUDE=(14,1,CH,EQ,C'.',AND,10,4,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,4,4X),FNAMES=DS$4\n  OUTFIL  INCLUDE=(15,1,CH,EQ,C'.',AND,10,5,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,5,3X),FNAMES=DS$5\n  OUTFIL  INCLUDE=(16,1,CH,EQ,C'.',AND,10,6,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,6,2X),FNAMES=DS$6\n  OUTFIL  INCLUDE=((17,1,CH,EQ,C'.',OR,17,1,CH,EQ,C' '),\n          AND,10,7,SS,NE,C'.'),\n          OUTREC=(1,4,5,4,X,10,7,1X),FNAMES=DS$7\n  OUTFIL  SAVE,\n          OUTREC=(1,4,5,4,X,10,8),FNAMES=DS$8\n  OPTION  VLSHRT\n//*-------------------------------------------------------------------*\n//REC400B2 EXEC PGM=ICETOOL\n//TOOLMSG  DD  SYSOUT=*\n//RPT400B  DD  SYSOUT=*\n//DFSMSG   DD  SYSOUT=*\n//DBUDATA  DD  DISP=(OLD,DELETE),DSN=&&TEMP1\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP2\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP3\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP4\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP5\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP6\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP7\n//         DD  DISP=(OLD,DELETE),DSN=&&TEMP8\n//TEMP0001 DD  DISP=(,DELETE,DELETE),SPACE=(CYL,(100,100,0)),\n//             UNIT=SYSALLDA\n//TOOLIN   DD  *\n  OCCURS  FROM(DBUDATA) LIST(RPT400B)                               -\n          PAGE                                                      -\n          TITLE('HLQs With Excessive Fully Qual. Generic Profiles') -\n          DATE(YMD/)                                                -\n          TIME(12:)                                                 -\n          BLANK                                                     -\n          ON(10,8,CH)   HEADER('HLQ')                               -\n          ON(VALCNT)    HEADER('Count')                             -\n          HIGHER(100)\n)ENDSEL\n)SEL &REC = 560  | &REC = ALL\n//*-------------------------------------------------------------------*\n//*   Description: Find all of the digital certificates\n//*                stored in the RACF data base that have\n//*                already expired or which will expire in\n//*                the next 30 days.\n//*\n//*   Status:      11Apr10 Version 1.0\n//*\n//*   Start End Description          Record\n//*   ----- --- -------------------- ----\n//*   001   004 Record type          0560\n//*   266   275 Start Date           0560\n//*   286   295 End Date             0560\n//*\n//*   Note: The \"Start\" and \"End\" values are the ones\n//*   documented in \"RACF Macros and Exits\". DFSORT requires\n//*   that you add four (4) to each of these values to\n//*   account for the four byte record descriptor word that\n//*   is at the front of each variable length record.\n//*-------------------------------------------------------------------*\n//REC560 EXEC PGM=ICETOOL,PARM='MSGPRT=ALL'\n//DBUDATA  DD  DISP=SHR,DSN=&DBUDATA\n//TEMP0001 DD  DISP=(NEW,DELETE,DELETE),SPACE=(CYL,(100,100,0))\n//TOOLMSG  DD  SYSOUT=*\n//RPT560   DD  SYSOUT=*\n//DFSMSG   DD  SYSOUT=*\n//TOOLIN   DD  *\n  SORT    FROM(DBUDATA) TO(TEMP0001) USING(CERT)\n  DISPLAY FROM(TEMP0001) LIST(RPT560)                     -\n          PAGE                                            -\n          TITLE('Expired or Nearly Expired Certificates') -\n          DATE(YMD/)                                      -\n          TIME(12:)                                       -\n          BLANK                                           -\n          ON(010,60,CH)  HEADER('Name')                   -\n          ON(266,10,CH)  HEADER('Start Date')             -\n          ON(286,10,CH)  HEADER('End Date')\n//CERTCNTL DD  *\n  SORT    FIELDS=(10,8,CH,A)\n  INCLUDE COND=(5,4,CH,EQ,C'0560',AND,\n                286,10,CH,NE,C'          ',AND,\n                286,10,CH,LT,DATE1(-)+30)\n  OPTION  VLSHRT\n)ENDSEL\n)SEL &REC = 100C | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Name:     UNIVGRP\n//* Function: List all of the members of all UNIVERSAL groups\n//* Status:   11Apr10 Version 1.0\n//*\n//* Input:    Unloaded RACF database, created by the\n//*           RACF Database Unload Utility (IRRDBU00)\n//*           allocated to DDNAME DBUDATA\n//*\n//* Function: This sample DFSORT ICETOOL job uses the\n//*           ICETOOL SPLICE operator to join the\n//*           GROUP_BASIC_DATA record (0100) with the\n//*           USER_CONNECTION_RECORD (0205) to produce a report\n//*           showing all of the members of all of each of\n//*           the UNIVERSAL groups.\n//*\n//*           This report is created by:\n//*           1) Extract all of the GROUP_BASIC_DATA records\n//*              and reformatting them into a format similar\n//*              to the USER_CONNECT_DATA record,\n//*              setting the \"record type\" to '0000'.\n//*           2) Extract all of the USER_CONNECT_DATA\n//*              records and pad them with blanks to be the\n//*              same size as the records created in step 1.\n//*           3) Combine the records from step 1 and step 2\n//*              and sort them based on the group name and\n//*              the record type. For each group, this places\n//*              the record which contains the \"is this a\n//*              UNIVERSAL\" group flag record ahead of the\n//*              records which define the members of the group.\n//*           4) Merge the records, so that the \"is this a\n//*              UNIVERSAL\" group flag is placed on each of\n//*              the group member records.\n//*           5) Select all of the records which have a \"YES\"\n//*              for the \"is this a UNIVERSAL group\" flag.\n//*           6) Create a report for the records from step 5.\n//*\n//*    Start End Description          From  Start End\n//*    ----- --- -------------------- ----  ----- ---\n//*    001   004 Record type          xxxx  Inserted by SORT stmt\n//*     \"     \"    \"                  0205    001 004\n//*    006   013 User ID              0205    006 013\n//*    015   022 Group ID             0205    015 022\n//*    024   033 Connected date       0205    024 033\n//*    035   042 Connection owner     0205    035 042\n//*    044   051 Last connection time 0205    044 051\n//*    053   062 Last connection date 0205    053 062\n//*    064   071 Default UACC         0205    064 071\n//*    073   077 RACINIT count        0205    073 077\n//*    079   082 ADSP flag            0205    079 082\n//*    084   087 Group-special flag   0205    084 087\n//*    089   092 Group-operations     0205    089 092\n//*    094   097 Revoked flag         0205    094 097\n//*    099   102 GRPACC flag          0205    099 102\n//*    104   107 NOTERMUACC flag      0205    104 107\n//*    109   112 Group-auditor flag   0205    109 112\n//*    114   123 Revoke date          0205    114 123\n//*    125   134 Resume date          0205    125 134\n//*    136   139 UNIVERSAL Group flag 0100    359 362\n//*\n//*    Note: The \"Start\" and \"End\" values are the ones\n//*    documented in \"RACF Macros and Exits\". DFSORT requires\n//*    that you add four (4) to each of these values to\n//*    account for the four byte record descriptor word that\n//*    is at the front of each variable length record.\n//*-------------------------------------------------------------------*\n//REC100C EXEC PGM=ICETOOL,PARM='MSGPRT=ALL'\n//DBUDATA  DD  DISP=SHR,DSN=&DBUDATA\n//GRPS     DD  DSN=&&GRPS,DISP=(NEW,PASS,DELETE),\n//             SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//UNIVGRPS DD  DSN=&&UNIVGRPS,DISP=(NEW,PASS,DELETE),\n//             SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//USRCON   DD  DSN=&&USRCON,DISP=(NEW,PASS,DELETE),\n//             SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//TEMP01   DD  DSN=&&TEMP01,DISP=(NEW,PASS,DELETE),\n//             SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//MERGED   DD  DSN=&&MERGED,DISP=(NEW,PASS,DELETE),\n//             SPACE=(CYL,(100,100,0)),UNIT=SYSALLDA\n//ALLGRPS  DD  DISP=(OLD,PASS),DSN=*.GRPS,VOL=REF=*.GRPS\n//         DD  DISP=(OLD,PASS),DSN=*.USRCON,VOL=REF=*.USRCON\n//TOOLMSG  DD  SYSOUT=*\n//DFSMSG   DD  DUMMY\n//RPT100C  DD  SYSOUT=*\n//TOOLIN   DD  *\n*--------------------------------------------------------------------\n* Step 1:  Extract the GROUP BASIC DATA (0100) records and\n*          place the data into the same columns as the USER\n*          GROUP CONNECTION record, with the \"UNIVERSAL\" flag\n*          appended at the end.\n*--------------------------------------------------------------------\n  SORT    FROM(DBUDATA)  TO(GRPS)     USING(GPBD)\n*--------------------------------------------------------------------\n* Step 2:  Extract all of the USER_CONNECT_DATA\n*          records and pad them with blanks to be the\n*          same size as the records created in step 1.\n*--------------------------------------------------------------------\n  SORT    FROM(DBUDATA)  TO(USRCON)   USING(UCON)\n*--------------------------------------------------------------------\n* Step 3:  Combine the records from step 1 and step 2\n*          and sort them based on the group name and\n*          the record type. For each group, this places\n*          the record which contains the \"is this a\n*          UNIVERSAL\" group flag record ahead of the\n*          records which define the members of the group.\n*--------------------------------------------------------------------\n  SORT    FROM(ALLGRPS)  TO(TEMP01)   USING(ALLG)\n*--------------------------------------------------------------------\n* Step 4:  Merge the records, so that the \"is this a\n*          UNIVERSAL\" group flag is placed on each of\n*          the group member records.\n*--------------------------------------------------------------------\n  SPLICE  FROM(TEMP01)   TO(MERGED)    -\n          ON(19,8,CH)                  -  Group Name (common field)\n          WITH(1,139)                  -  Rest of record\n          WITHALL\n*--------------------------------------------------------------------\n* Step 5:  Select all of the records which have a \"YES\"\n*          for the \"is this a UNIVERSAL group\" flag.\n*--------------------------------------------------------------------\n  SORT    FROM(MERGED)   TO(UNIVGRPS) USING(UNVG)\n*--------------------------------------------------------------------\n* Step 6:  Create a report for the records from step 5.\n*--------------------------------------------------------------------\n  DISPLAY FROM(UNIVGRPS) LIST(RPT100C)                  -\n          PAGE                                          -\n          TITLE('Users Connected to a UNIVERSAL Group') -\n          DATE(YMD/)                                    -\n          TIME(12:)                                     -\n          BLANK                                         -\n          ON(10,8,CH)    HEADER('User')                 -\n          ON(28,10,CH)   HEADER('Created')              -\n          ON(39,8,CH)    HEADER('Owner')                -\n          ON(88,4,CH)    HEADER('Spec?')                -\n          ON(93,4,CH)    HEADER('Oper?')                -\n          ON(113,4,CH)   HEADER('Audit?')               -\n          BREAK(19,8,CH)\n//GPBDCNTL DD  *\n  SORT    FIELDS=COPY\n  INCLUDE COND=(5,4,CH,EQ,C'0100')\n  OUTREC  FIELDS=(1,4,C'0000',10X,10,8,140:363,4)\n//UCONCNTL DD  *\n  SORT    FIELDS=COPY\n  INCLUDE COND=(5,4,CH,EQ,C'0205')\n  OUTREC  FIELDS=(1,4,5,134,C'    ')\n  OPTION  VLSHRT\n//ALLGCNTL DD  *\n  SORT    FIELDS=(19,8,CH,A,5,4,CH,A)\n//UNVGCNTL DD  *\n  SORT    FIELDS=COPY\n  INCLUDE COND=(140,4,CH,EQ,C'YES')\n)ENDSEL\n)SEL &REC = 901  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  System information\n//*-------------------------------------------------------------------*\n//SYSTEM   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION SYSTEM\n)ENDSEL\n)SEL &REC = 902  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Group tree\n//*-------------------------------------------------------------------*\n//RACGRP   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACGRP\n)ENDSEL\n)SEL &REC = 903  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Program properties table\n//*-------------------------------------------------------------------*\n//SYSPPT   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION SYSPPT\n)ENDSEL\n)SEL &REC = 904  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Authorized caller table\n//*-------------------------------------------------------------------*\n//RACAUT   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACAUT\n)ENDSEL\n)SEL &REC = 905  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Class descriptor table\n//*-------------------------------------------------------------------*\n//RACCDT   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACCDT\n)ENDSEL\n)SEL &REC = 906  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Exits\n//*-------------------------------------------------------------------*\n//RACEXT   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACEXT\n)ENDSEL\n)SEL &REC = 907  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Global access table\n//*-------------------------------------------------------------------*\n//RACGAC   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACGAC\n)ENDSEL\n)SEL &REC = 908  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Started procedure table\n//*-------------------------------------------------------------------*\n//RACSPT   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACSPT\n)ENDSEL\n)SEL &REC = 909  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  User attributes\n//*-------------------------------------------------------------------*\n//RACUSR   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACUSR\n)ENDSEL\n)SEL &REC = 910  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Link List datasets\n//*-------------------------------------------------------------------*\n//SYSLNK   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION SYSLNK\n)ENDSEL\n)SEL &REC = 911  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  APF datasets\n//*-------------------------------------------------------------------*\n//SYSAPF   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION SYSAPF\n)ENDSEL\n)SEL &REC = 912  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Master and user catalogs\n//*-------------------------------------------------------------------*\n//SYSCAT   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION SYSCAT\n)ENDSEL\n)SEL &REC = 913  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  Primary and backup datbases\n//*-------------------------------------------------------------------*\n//RACDST   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION RACDST\n)ENDSEL\n)SEL &REC = 914  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  System datasets\n//*-------------------------------------------------------------------*\n//SYSSDS   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION SYSSDS\n)ENDSEL\n)SEL &REC = 915  | &REC = ALL\n//*-------------------------------------------------------------------*\n//* Program: Data Security Monitor (DSMON)\n//* Report:  User datasets\n//* Note:    To obtain data on a specific dataset, add the below\n//*          SYSIN card after/under the 'FUNCTION USRDSN' card\n//*            USEROPT USRDSN data_set_name\n//*-------------------------------------------------------------------*\n//USRDSN   EXEC PGM=ICHDSM00\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  *\n  FUNCTION USRDSN\n)ENDSEL\n/*\n)ENDSEL\n)ENDDOT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT998/CBT.V500.FILE998.PDS/SKELS.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT998/CBT.V500.FILE998.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}