{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012621000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE697.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE697.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x03'", "DS1TRBAL": "b'\\xbbf'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xd6\\x00\\x01\\x04\\xd6\\x00\\x05\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x13\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x13\\x04\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:04:13", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  697\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE697\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,264 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/01/13    13:04:13    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x040\\x9f\\x01\\x040\\x9f\"\\x14\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-04T00:00:00", "modifydate": "2004-11-04T22:14:35", "lines": 23, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "Sam,\n\nWould you please look this over to see if it is worth putting on\nthe CBT Tape?\n\nThis is a system to load CICS CSD (RDO) information into a\nPostgreSQL database on a Linux system.\n\nThe file is a TSO XMIT of a PDS (LRECL=80 RECFM=FB) which contains\nfour members. The first is a documentation member named $DOC. The\nsecond is JCL to run the IBM supplied (in source) program\nDFH0FORC. The third is sample installation JCL called RECEIVE. The\nlast is named TARFILE and contains an XMIT of a z/OS sequential\nfile (LRECL=1 RECFM=FB). This sequential file is a \"tar\" archive\ncontaining a number Linux/UNIX files.\n\n\n--\nJohn McKown\nSenior Systems Programmer\nUICI Insurance Center\nInformation Technology\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x18\\x01\\x04)O\\x01\\x040\\x8f\\x15G\\x00\\xa2\\x00\\x05\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2004-10-20T00:00:00", "modifydate": "2004-11-03T15:47:18", "lines": 162, "newlines": 5, "modlines": 0, "user": "TSH009"}, "text": "This PDS contains documentation and JCL to install code on a system\nrunning Perl and PostgreSQL. This code emulates the DB2 code supplied\nby IBM with CICS/Transaction server 1.3.\n\nThis documentation assumes that you or your are familar with:\n    z/OS\n    CICS/Transaction Server 1.3.\n    Linux\n    Perl on Linux\n    PostgreSQL on Linux\n    How to do SQL queries (at the psql prompt and/or in Perl)\n\nThis documentation does not attempt to teach you about these.\n\nIn particular, this PDS contains the following members:\n1. $DOC     - This member, which contains the basic documentation\n2. DFH0FORC - Example JCL to run DFH0FORC, which will create the\n              sequential file version of the CICS CSD information.\n3. RECEIVE  - The basic JCL to create the file which is to be\n              ftp'ed to the Linux system and then ftp that file\n              to the Linux system.\n              This member must be customized as described therein.\n4. TARFILE  - This member contains the output of an XMIT command.\n              This member must be RECEIVE'd (see RECEIVE member)\n              in order to create a sequential file. This sequential\n              file must then be binary ftp'ed to the Linux system\n              upon which the system will run. This sequential file\n              is the output from a tar command, run on Linux, which\n              was binary ftp'ed to a z/OS system. Don't bother trying\n              to read it, it looks like binary junk.\n\n=======================================================\n\nSteps required to install and use this facility\n\n1. If you have not already done so, compile the DFH0FORC program into\n   a load library. This program is supplied by IBM in the SDFHSAMP\n   library.\n\n2. Run the RECEIVE job. This job will create the tar file in an MVS\n   sequential file. The second step will the ftp this to your Linux\n   system. Please note that you must customize the ftp step with the\n   IP address of your Linux system as well as the appropriate userid\n   and password on your Linux system.\n\n3. Run the DFH0FORC program referenced above. This creates a\n   sequential file with the contents of the CICS CSD. Example JCL\n   exists in the DFH0FORC member.\n\n4. The remainder of the steps must be done on your Linux system.\n   Logon to it.\n\n5. Change to the \"cicsrdo\" subdirectory created by the RECEIVE job.\n\n6. Use ftp to download the dataset created by the DFH0FORC job.  You\n   must remember to preserve trailing blanks or the load Perl programs\n   will not work correctly. If you are using the IBM TCP/IP stack,\n   this is done with the ftp subcommand:\n       quote site trailingblanks\n   This is an \"ascii\" download.  In my examples below, I assume that\n   the DFH0F0RC output is downloaded to the file \"dfh0forc.data\".\n\n7. Create the \"cicsrdo\" database and tables by entering the following\n   command:\n     psql <create_rdo_tables.psql\n   Note that this psql control file will drop and create the \"cicsrdo\"\n   database, thus loosing any information contained therein.\n\n   Note that all my Perl programs and psql script depend on the\n   database being named \"cicsrdo\". If you want to use some other database\n   to contain the tables, you must search for where \"cicsrdo\" is used as\n   a database name and change it to your database name.\n\n8. Run the Perl program \"dfh$sqlt.pl\" by entering:\n       ./dfh\\$sqlt.pl dfh0forc.data\n   This program will abort (die) with an error message if there is any\n   problem.  The program will output a message for every 1000 lines of\n   input which it reads. This is for your comfort that it is doing\n   something. This program does not issue a \"commit\" until all records\n   have been successfully processed.  When this program completes, the\n   CICS CSD database informatin will have been loadede into a number\n   of PostgreSQL tables, which are The easiest way to find the names\n   of the tables created and the columns defined in them is by looking\n   at the dfh$sqlt.txt file.\n\n   If you need to recreate the dfh$sqlt.pl program, you must have\n   downloaded the DFH$SQLT member of SDFHSAMP as dfh$sqlt.txt\n   and run the program:\n     export database='cicsrdo'\n     mkdb2load dfh$sqlt.txt >dfh$sqlt.pl\n     chmod 755 dfh$sqlt.pl\n\n9.  At this point the \"cicsrdo\" database will have all of its tables\n    defined and information loaded into them.\n\n10. You will periodically need to rerun the DFH0FORC job, download the\n    output and rerun the dfh$sqlt.pl program as documented in step 8.\n    This is to keep the information current. Note that the dfh$sqlt.pl\n    program will remove all the old information.\n\n=======================================================\n\nMaintenance of the programs and scripts is the your responsibility. If\nyou go to a new release of CICS and the CSD has been enhanced, there\nis a possibility that you will need to modify the dfh$sqlt.pl script.\nHopefully, you can do this by downloading the DFH$SQLT member of\nSDFHSAMP and rerunning mkdb2load.pl using it.\n\n=======================================================\n\nThe contents of the tar file are:\n\nbad_tran_def.psql\n  This is an example psql script which will show transaction which\n  are likely to be unexecutable.\n\ncreate_rdo_tables.psql\n  This psql script will DROP (delete) and CREATE the CICS RDO tables.\n\ndfh$sqlt.pl\n  This Perl program will load the RDO information into the appropriate\n  tables.\n\ndfh$sqlt.txt\n\nmkdb2load.pl\n  This Perl program is used to create the dfh$sqlt.pl program. It is\n  run by issuing the commands:\n\n  export database='cicsrdo'\n  ./mkdb2load.pl dfh$sqlt.txt >dfh$sqlt.pl\n  chmod 755 dfh$sqlt.pl\n\n\n  You must export the environment variable \"database\" to name the\n  database in which the tables are created. If you use something other\n  than \"cicsrdo\", then you must change all the *.psql files to use that\n  database in the \"\\c cicsrdo\" control statement.\n\n  The plus of this is that it is driven by dfh$sqlt.txt file.  This\n  means that if IBM changes the CICS CSD for new information and\n  updates the DFH$SQLT member in SDFHSAMP the dfh$sqlt.pl program can\n  be updated simply. I assure you that you don't want to create these\n  programs by hand.\n\n  This program removes all DB2 comments and any data in columns 73-80\n  so there is should be no need to \"clean up\" the DB2 LOAD control\n  statements.\n\n  Actually, this program should be able to create a Perl program to\n  load any set of tables for which you have LOAD control statement of\n  the DB2 utilities.\n\n\nmktar.sh\n  This shell script creates the gzip'ed tar file with all the *.pl,\n  *.sh, *.txt, *.psql files in it.\n\nnoseq.pl\n  This Perl program is used to remove any sequence numbers in columns\n  73 through 80, then remove any trailing blanks.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE697": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x08\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x13\\x04\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:04:08", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 697 is from John McKown and contains a system which       *   FILE 697\n//*           does reporting for CICS Transaction Server 1.3        *   FILE 697\n//*           on Linux, using Perl and PostgreSQL.                  *   FILE 697\n//*                                                                 *   FILE 697\n//*           This system runs partially on MVS and partially       *   FILE 697\n//*           on Linux.  The Linux part is in TSO XMIT format       *   FILE 697\n//*           as member TARFILE, and it has to be RECEIVEd on       *   FILE 697\n//*           MVS and FTP'ed to the Linux system and un-TARed       *   FILE 697\n//*           there.                                                *   FILE 697\n//*                                                                 *   FILE 697\n//*           See member $DOC for detailed installation             *   FILE 697\n//*           instructions and information.                         *   FILE 697\n//*                                                                 *   FILE 697\n//*       email:  \"McKown, John\" <john.archie.mckown@GMAIL.com>     *   FILE 697\n//*                                                                 *   FILE 697\n//*     This PDS contains documentation and JCL to install code     *   FILE 697\n//*     on a system running Perl and PostgreSQL. This code          *   FILE 697\n//*     emulates the DB2 code supplied by IBM with                  *   FILE 697\n//*     CICS/Transaction server 1.3.                                *   FILE 697\n//*                                                                 *   FILE 697\n//*     This documentation assumes that you or your are familar     *   FILE 697\n//*     with:                                                       *   FILE 697\n//*                                                                 *   FILE 697\n//*         z/OS                                                    *   FILE 697\n//*         CICS/Transaction Server 1.3.                            *   FILE 697\n//*         Linux                                                   *   FILE 697\n//*         Perl on Linux                                           *   FILE 697\n//*         PostgreSQL on Linux                                     *   FILE 697\n//*         How to do SQL queries (at the psql prompt               *   FILE 697\n//*           and/or in Perl)                                       *   FILE 697\n//*                                                                 *   FILE 697\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DFH0FORC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x01\\x040\\x8f\\x01\\x040\\x8f\\x15\\x00\\x003\\x003\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-03T00:00:00", "modifydate": "2004-11-03T15:00:40", "lines": 51, "newlines": 51, "modlines": 0, "user": "TSH009"}, "text": "//DFH0FORC JOB ACCT,DFH0FORC,\n//         CLASS=A,\n//         MSGCLASS=X,\n//         NOTIFY=&SYSUID\n//*\n//* PUT THE NAME OF YOUR SDFHLOAD LOAD LIBRARY IN THE NEXT SET\n// SET SDFHLOAD=\n//*\n//* PUT THE NAME OF THE LIBRARY CONTAINING THE DFH0FORC PROGRAM\n// SET DFH0FORC=\n//*\n//* PUT THE NAME OF YOUR CSD FILE IN THE NEXT SET\n// SET CSD=\n//EXTRACT  PROC\n//STEP001  EXEC  PGM=DFHCSDUP,\n//             TIME=MAXIMUM,REGION=6M,\n//             PARM='CSD(READONLY)'\n//STEPLIB  DD  DSN=&SDFHLOAD,\n//             DISP=SHR\n//         DD  DSN=&DFH0FORC,\n//             DISP=SHR\n//DFHCSD   DD  DSN=&CSD,\n//             DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//FOROUT   DD  SYSOUT=*\n//         PEND\n//STEP1    EXEC  PGM=IKJEFT01,PARM='DEL DFH0FORC.DB2LOAD'\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  *\n/*\n//GROUPS   EXEC  PROC=EXTRACT\n//FOROUT   DD  DSN=&&FOROUT,\n//             DISP=(NEW,PASS,DELETE),\n//             SPACE=(CYL,(200,20),RLSE),\n//             RECFM=FB,LRECL=461,\n//             BLKSIZE=0,DSORG=PS\n//SYSIN    DD  *\n EXTRACT  GROUP(*)        USERPROGRAM(DFH0FORC) OBJECTS\n/*\n//*\n//SORT     EXEC  PGM=SORT\n//SYSIN    DD  *\n SORT FIELDS=(1,20,CH,A,13,8,CH,A)\n/*\n//SORTIN   DD  DSN=&&FOROUT,DISP=OLD\n//SYSOUT   DD  SYSOUT=*\n//SORTOUT  DD  DSN=&SYSUID..DFH0FORC.DB2LOAD,\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(CYL,(200,20),RLSE),\n//             RECFM=FB,LRECL=461,\n//             BLKSIZE=0,DSORG=PS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RECEIVE": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00D\\x01\\x04)O\\x01\\x040\\x8f\\x15\\x02\\x00&\\x00#\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-10-20T00:00:00", "modifydate": "2004-11-03T15:02:44", "lines": 38, "newlines": 35, "modlines": 0, "user": "TSH009"}, "text": "//RECEIVE  JOB ACCT,RECEIVE,\n//         CLASS=A,\n//         MSGCLASS=X,\n//         NOTIFY=&SYSUID\n//*\n// SET THISDSN=TSH009.CICSPSQL.CNTL\n//*\n//RECEIVE EXEC PGM=IKJEFT01,REGION=6M\n//SYSTSPRT DD SYSOUT=*\n//INFILE DD DISP=SHR,DSN=&THISDSN(TARFILE)\n//SYSTSIN DD *\n RECEIVE INFILE(INFILE)\n  RESTORE DSN(CICSRDO.TAR.GZ)\n/*\n//*\n//FTP EXEC PGM=FTP,PARM='(EXIT'\n//OUTPUT DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//INPUT DD *\nlinux.ip.address\nuser.on.linux.system\nusers.password\nbin\nsendsite\nmkdir cicsrdo\ncd cicsrdo\nput CICSRDO.TAR.GZ\nquit\n/*\n//*\n//* You now have a shiny new gzip'ed tar file on your Linux server.\n//* Logon to that server and issue the commands:\n//* cd cicsrdo\n//* tar xzf CICSRDO.TAR.GZ\n//* This command will \"unwind\" the tar file and put all the\n//* Perl programs and data files in the \"cicsrdo\" subdirectory.\n//* You may, of course, call it something other than \"cicsrdo\".\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TARFILE": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x040\\x8f\\x01\\x040\\x8f\\x15Q\\x03\\xb3\\x03\\xb3\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-03T00:00:00", "modifydate": "2004-11-03T15:51:05", "lines": 947, "newlines": 947, "modlines": 0, "user": "TSH009"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT697/FILE697.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT697", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}