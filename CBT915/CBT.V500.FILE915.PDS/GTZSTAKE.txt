//DHTUSTAK JOB ,'GTZ Stakeholders',CLASS=P,MSGCLASS=1,MSGLEVEL=(1,1),
//     REGION=0M,NOTIFY=&SYSUID SCHENV=
//*
//* *******************************************************************
//*
//* Stakeholders Reports
//* --------------------
//*
//* Change Log .....
//*
//* Updated 11Aug14, William J. Smith, IBM IT Architect
//* . Due to growing size of reports, split out the general stakeholder
//*   reports from the more complex statistical analysis reports
//* . Logic simplification
//*
//* Updated 07Aug14, William J. Smith, IBM IT Architect
//* . Re-wrote Proc Means report set using SAS macro facility
//* . Added second two-way frequency analysis by PROGRAM and HOMEJOB
//* . Overall cleanup for consistency of reports, titles, footnotes
//* . Incorporation of symbolics to eliminate system dependencies
//*
//* Updated 06Aug14, William J. Smith, IBM IT Architect
//* . Changed length of variable PGMOFSET from 19 to 17 to prevent
//*   use of two unwanted trailing blanks
//* . Added subsetting If logic to eliminate "LOST CARD" error message
//*   due to presence of 70 dashes throughout all observations,a
//*   terminating blank line, and the final text string "GTZPRINT"
//* . Added Proc Means using data sorted by event description, homejob,
//*   instance, program
//*
//* Updated 31Jul14, William J. Smith, IBM IT Architect
//* . Added comments throughout code
//* . Added two new reports to breakout programs and event descriptions
//* . Added report to use PROC FREQ for one and two-way frequency
//*   analyses
//* . Added step to produce comma-delimited CSV using ODS (untested)
//* . Added more meaningful titles and footnotes
//* . Added symbolic variable "LPAR" which is used solely as the name
//*   for the output CSV file
//* . Added sample SAS code to FTP the CSV file to a workstation
//*
//* Updated 29Jul14, William J. Smith, IBM IT Architect
//* . Added steps to recreate the tracking data
//* . Added SAS code to correct and enhance report formatting
//*
//* Written 28Jul14, William J. Smith, IBM IT Architect
//* . Initial version tested with SAS 9.2
//* . zOS 2.1 Generic Tracker Facility
//* . Ref:  "DFSMSdfp Advanced Services", SC23-6861-01
//* .       "z/OS MVS Diagnosis Tools and Service Aids", GA32-0905-00
//* . Based upon the output of the GTZPRINT utility (UA70494-13233)
//*
//* Note:
//* -----
//* GTZPRINT requires APAR OA44697: "GTZCNIDT INCORRECTLY ALTERS OUTPUT
//* DATA SET FORMAT TO FBA" (z/OS 2.1 dated 5/2014, R790 PSY UA73091)
//*
//* *******************************************************************
//*
//LPARID   SET  LPARID=ENGR99
//DSNPREFX SET  DSNPREFX=DHTU
//*
//DELETE   EXEC PGM=IDCAMS
//SYSPRINT  DD  SYSOUT=*
//SYSIN     DD  *
  DELETE DHTU.ENGR99.TRAKDATA
  DELETE DHTU.ENGR99.TRAKDATA.CSV
  SET MAXCC=0
/*
//STATUS   EXEC PGM=GTZPRINT
//SYSOUT    DD SYSOUT=*,DCB=BLKSIZE=80
//SYSIN     DD  *
  PRINT STATUS
/*
//TRAKDATA EXEC PGM=GTZPRINT
//SYSOUT    DD  UNIT=SYSDA,SPACE=(CYL,(10,2),RLSE),
//     DSN=&DSNPREFX..&LPARID..TRAKDATA,
//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920,DSORG=PS),
//     DISP=(,CATLG,DELETE)
//CSVFILE   DD  UNIT=SYSDA,SPACE=(CYL,(2,1),RLSE),
//     DSN=&DSNPREFX..&LPARID..TRAKDATA.CSV,
//     DCB=(RECFM=VB,LRECL=133,BLKSIZE=0,DSORG=PS),
//     DISP=(,CATLG,DELETE)
//SYSIN     DD  *
  PRINT TRACKDATA
/*
//SAS      EXEC SAS,COND=(0,LT,TRAKDATA),
//         OPTIONS='SYSPARM="MERGE"'
//SYSPRINT  DD  SYSOUT=*
//INDD      DD  DISP=SHR,DSN=&DSNPREFX..&LPARID..TRAKDATA
//TRAKDATA  DD  DISP=OLD,DSN=&DSNPREFX..&LPARID..TRAKDATA.CSV
//SYSIN     DD  DATA,DLM=$$
*                                                                     ;
* ------------------------------------------------------------------- ;
*                                                                     ;
* The following Data step deconstructs the IBM GTZPRINT utility       ;
* TRAKDATA report into discrete columns and fields such that they can ;
* be easily referenced throughout the program as unique SAS variables.;
*                                                                     ;
* Note the use of the single @ after the DASHES variable.             ;
*                                                                     ;
* The subsetting If statement purges all GTZPRINT lines containing a  ;
* lengthy string of dashes, a terminating blank line, and the closing ;
* GTZPRINT line at the end of the report thereby eliminating a "LOST  ;
* CARD" SAS LOG error message.                                        ;
*                                                                     ;
* ------------------------------------------------------------------- ;
*                                                                     ;
  %Let LPAR = ENGR99;                       /* LPAR Designation      */
  %Let CSVCODE = EBCDIC;                    /* CSV file EBCDIC/ASCII */
  ODS Graphics Off;                         /* SAS default is Off    */
*                                                                     ;
* ------------------------------------------------------------------- ;
*                                                                     ;

  Data TRAKDATA;
    Infile INDD Firstobs=7;
    Input DASHES $ 1-70 @;
    If substr(DASHES,1,8) In('--------', '        ', 'GTZPRINT') then
      Delete;

    Input
/ @'INSTANCE:      ' INSTANCE 8.   @'COUNT:         ' COUNT    8.
/ @'EVENTDESC:     ' EVNTDESC $30.
/ @'OWNER:         ' OWNER    $8.  @'SOURCE:        ' SOURCE   $8.
/ @'EVENTDATA:     ' EVNTDAT1 $17. @37                EVNTDAT2 $17.
/ @'PROGRAM:       ' PROGRAM  $8.  @'PROGRAMOFFSET: ' PGMOFSET $17.
/ @'HOMEJOB:       ' HOMEJOB  $8.  @'HOMEASID:      ' HOMEASID $5.
/ @'EVENTJOB:      ' EVNTJOB  $8.  @'EVENTASID:     ' EVNTASID $5.
/ @'AUTHORIZED:    ' AUTHRIZD $3.  @'FIRST TIME:    ' FIRSTIME $19.   ;

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Sort the tracking data by Program and Event Description.            ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Sort Data=TRAKDATA Out=SORTOUT1 NoDupkey;
    By PROGRAM EVNTDESC;

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Core Report to Stakeholders: Reports I & II                         ;
* -------------------------------------------                         ;
*                                                                     ;
* Report I:  This report presents the instance number, program name   ;
* event desription, invoking batch job name, and the date and time    ;
* the tracker first intercepted the exception.                        ;
*                                                                     ;
* Note the use of the operand "NoDupkey", which eliminates all        ;
* repeated instances of GTZPRINT records.  This keyword digests the   ;
* GTZPRINT data into manageably reduced and useful content.           ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Print Data=SORTOUT1 Label;
    Var INSTANCE PROGRAM COUNT EVNTDESC HOMEJOB FIRSTIME;
    Title1 "Report I: Generic Tracker Facility Exception Reporting";
    Title2 "Analysis of Data Captured on LPAR &LPAR.";
    Label COUNT    = 'Discrete # of Exceptions'
          EVNTDESC = 'Event Description'
          FIRSTIME = 'Date and Time First Reported'
          HOMEJOB  = 'Name of Invoking Batch Job'
          INSTANCE = 'Exception Occurrence #'
          PROGRAM  = 'Executed Program';
    Footnote1 "Tracking Data Sorted by Program and Event Description";

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Report II:  This report uses the SAS verb "By" to generate a break  ;
* out report by unique program names and all of their exceptions.     ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Print Data=SORTOUT1 Label;
    By PROGRAM;
    Var COUNT EVNTDESC HOMEJOB INSTANCE;
    Title1 "Report II: Generic Tracker Facility Exception Reporting";
    Label COUNT    = 'Discrete # of Exceptions'
          EVNTDESC = 'Event Description'
          HOMEJOB  = 'Name of Invoking Batch Job'
          INSTANCE = 'Exception Occurrence #'
          PROGRAM  = 'Executed Program';
    Footnote1 "Tracking Report Broken Out By Program and Event Desc";

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Sort the tracking data by Event Description and Program.            ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Sort Data=TRAKDATA Out=SORTOUT2 NoDupkey;
    By EVNTDESC PROGRAM;

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Core Report to Stakeholders: Reports III & IV                       ;
* ---------------------------------------------                       ;
*                                                                     ;
* Report III:  This report presents the instance number, event        ;
* description, program name, invoking batch job name, and the date    ;
* and time the tracker first intercepted the exception.               ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Print Data=SORTOUT2 Label;
    Var INSTANCE EVNTDESC COUNT PROGRAM HOMEJOB FIRSTIME;
    Title1 "Report III: Generic Tracker Facility Exception Reporting";
    Label COUNT    = 'Discrete # of Exceptions'
          EVNTDESC = 'Event Description'
          FIRSTIME = 'Date and Time First Reported'
          HOMEJOB  = 'Name of Invoking Batch Job'
          INSTANCE = 'Exception Occurrence #'
          PROGRAM  = 'Executed Program';
    Footnote1 "Tracking Data Sorted by Event Description and Program";

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Report IV:  This report uses the SAS verb "By" to generate a break  ;
* out report by event description for program, count, invoking batch  ;
* job, and instance number.                                           ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Print Data=SORTOUT2 Label;
    By EVNTDESC;
    Var PROGRAM COUNT HOMEJOB INSTANCE;
    Title1 "Report IV: Generic Tracker Facility Exception Reporting";
    Label COUNT    = 'Discrete # of Exceptions'
          EVNTDESC = 'Event Description'
          HOMEJOB  = 'Name of Invoking Batch Job'
          INSTANCE = 'Exception Occurrence #'
          PROGRAM  = 'Executed Program';
    Footnote1 "Tracking Report Broken Out By Event Desc and Program";

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Output Delivery System - Comma Delimited CSV File                   ;
*                                                                     ;
* Sample SAS code to FTP the CSV file to a workstation (untested)     ;
*                                                                     ;
* Use TRANTAB=ASCII to generate a CSV file in ASCII rather than in    ;
* EBCDIC.  Without RS=NONE, the CSV file will WRAP (incorrectly!).    ;
*                                                                     ;
* ------------------------------------------------------------------- ;
*                                                                     ;
  Filename TRAKDATA "DHTU.&LPAR..TRAKDATA.CSV";

  ODS CSV BODY=TRAKDATA TRANTAB=&CSVCODE RS=NONE;
  Proc Print Data=SORTOUT1;
    Var INSTANCE PROGRAM COUNT EVNTDESC HOMEJOB FIRSTIME;
  Run;
  ODS CSV Close;

$$
/*
//
