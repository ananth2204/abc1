//DHTUSTAT JOB ,'GTZ Stats Report',CLASS=P,MSGCLASS=1,MSGLEVEL=(1,1),
//     REGION=0M,NOTIFY=&SYSUID SCHENV=
//*
//* *******************************************************************
//*
//* Statistical Analysis Reports
//* ----------------------------
//*
//* Change Log .....
//*
//* Updated 11Aug14, William J. Smith, IBM IT Architect
//* . Due to growing size of reports, split out the general stakeholder
//*   reports from the more complex statistical analysis reports
//* . Logic simplification
//* . Fixed CSV wrapping: added RS=NONE and changed DCB of output file
//*   to VB/133/BLKSIZE=0; allow for ASCII file output
//*
//* Updated 07Aug14, William J. Smith, IBM IT Architect
//* . Re-wrote Proc Means report set using SAS macro facility
//* . Added second two-way frequency analysis by PROGRAM and HOMEJOB
//* . Overall cleanup for consistency of reports, titles, footnotes
//* . Incorporation of symbolics to eliminate system dependencies
//*
//* Updated 06Aug14, William J. Smith, IBM IT Architect
//* . Changed length of variable PGMOFSET from 19 to 17 to prevent
//*   use of two unwanted trailing blanks
//* . Added subsetting If logic to eliminate "LOST CARD" error message
//*   due to presence of 70 dashes throughout all observations,a
//*   terminating blank line, and the final text string "GTZPRINT"
//* . Added Proc Means using data sorted by event description, homejob,
//*   instance, program
//*
//* Updated 31Jul14, William J. Smith, IBM IT Architect
//* . Added comments throughout code
//* . Added two new reports to breakout programs and event descriptions
//* . Added report to use PROC FREQ for one and two-way frequency
//*   analyses
//* . Added step to produce comma-delimited CSV using ODS (untested)
//* . Added more meaningful titles and footnotes
//* . Added symbolic variable "LPAR" which is used solely as the name
//*   for the output CSV file
//* . Added sample SAS code to FTP the CSV file to a workstation
//*
//* Updated 29Jul14, William J. Smith, IBM IT Architect
//* . Added steps to recreate the tracking data
//* . Added SAS code to correct and enhance report formatting
//*
//* Written 28Jul14, William J. Smith, IBM IT Architect
//* . Initial version tested with SAS 9.2
//* . zOS 2.1 Generic Tracker Facility
//* . Ref:  "DFSMSdfp Advanced Services", SC23-6861-01
//* .       "z/OS MVS Diagnosis Tools and Service Aids", GA32-0905-00
//* . Based upon the output of the GTZPRINT utility (UA70494-13233)
//*
//* Note:
//* -----
//* GTZPRINT requires APAR OA44697: "GTZCNIDT INCORRECTLY ALTERS OUTPUT
//* DATA SET FORMAT TO FBA" (z/OS 2.1 dated 5/2014, R790 PSY UA73091)
//*
//* *******************************************************************
//*
//LPARID   SET  LPARID=ENGR99
//DSNPREFX SET  DSNPREFX=DHTU
//*
//DELETE   EXEC PGM=IDCAMS
//SYSPRINT  DD  SYSOUT=*
//SYSIN     DD  *
  DELETE DHTU.ENGR99.TRAKDATA
  SET MAXCC=0
/*
//STATUS   EXEC PGM=GTZPRINT
//SYSOUT    DD  SYSOUT=*,DCB=BLKSIZE=80
//SYSIN     DD  *
  PRINT STATUS
/*
//TRAKDATA EXEC PGM=GTZPRINT
//SYSOUT    DD  UNIT=SYSDA,SPACE=(CYL,(10,2),RLSE),
//     DSN=&DSNPREFX..&LPARID..TRAKDATA,
//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920,DSORG=PS),
//     DISP=(,CATLG,DELETE)
//SYSIN     DD  *
  PRINT TRACKDATA
/*
//SAS      EXEC SAS,COND=(0,LT,TRAKDATA)
//SYSPRINT  DD  SYSOUT=*
//INDD      DD  DISP=SHR,DSN=&DSNPREFX..&LPARID..TRAKDATA
//SYSIN     DD  DATA,DLM=$$
*                                                                     ;
* ------------------------------------------------------------------- ;
*                                                                     ;
* The following Data step deconstructs the IBM GTZPRINT utility       ;
* TRAKDATA report into discrete columns and fields such that they can ;
* be easily referenced throughout the program as unique SAS variables.;
*                                                                     ;
* Note the use of the single @ after the DASHES variable.             ;
*                                                                     ;
* The subsetting If statement purges all GTZPRINT lines containing a  ;
* lengthy string of dashes, a terminating blank line, and the closing ;
* GTZPRINT line at the end of the report thereby eliminating a "LOST  ;
* CARD" SAS LOG error message.                                        ;
*                                                                     ;
* ------------------------------------------------------------------- ;
*                                                                     ;
  %Let LPAR = ENGR99;                       /* LPAR Designation      */
  ODS Graphics Off;                         /* SAS default is Off    */
*
*
------------------------------------------------------------------- ;
  Data TRAKDATA;
    Infile INDD Firstobs=7;
    Input DASHES $ 1-70 @;
    If substr(DASHES,1,8) In('--------', '        ', 'GTZPRINT') then
      Delete;

    Input
/ @'INSTANCE:      ' INSTANCE 8.   @'COUNT:         ' COUNT    8.
/ @'EVENTDESC:     ' EVNTDESC $30.
/ @'OWNER:         ' OWNER    $8.  @'SOURCE:        ' SOURCE   $8.
/ @'EVENTDATA:     ' EVNTDAT1 $17. @37                EVNTDAT2 $17.
/ @'PROGRAM:       ' PROGRAM  $8.  @'PROGRAMOFFSET: ' PGMOFSET $17.
/ @'HOMEJOB:       ' HOMEJOB  $8.  @'HOMEASID:      ' HOMEASID $5.
/ @'EVENTJOB:      ' EVNTJOB  $8.  @'EVENTASID:     ' EVNTASID $5.
/ @'AUTHORIZED:    ' AUTHRIZD $3.  @'FIRST TIME:    ' FIRSTIME $19.   ;

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Report I:  Using Proc Univariate, this report describes the overall ;
* distribution of a single variable, COUNT.  It analyses the mean,    ;
* mode, standard deviation, skewness, and kurtosis of all recorded    ;
* exceptions.                                                         ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Univariate Data=TRAKDATA;                                      ;
    Var COUNT;
    Title1 "Report I: Generic Tracker Facility Exception Reporting";
    Title2 "Analysis of Raw Numeric Data Captured on LPAR &LPAR.";
    Title3 "Tracking Data Health Check";
    Label COUNT = 'Discrete # of Exceptions';
    Footnote1 "Statistical Analysis of Numeric Tracking Data";
    Footnote2 "Distribution of Count Metrics";
  Run;                                                                ;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Report II-A/B:  Frequency tables to answer the question "How many?" ;
*                                                                     ;
* Generate one-way and two-way frequency analyses across the entire   ;
* set of sorted tracking data by PROGRAM, EVeNT DESCription, and      ;
* HOMEJOB.                                                            ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  Proc Freq Data=TRAKDATA;
    Tables PROGRAM PROGRAM * EVNTDESC;
    Title1 "Report II-A: Generic Tracker Facility Exception Reporting";
    Label EVNTDESC = 'Event Description'
          PROGRAM  = 'Executed Program';
    Footnote1 "Frequency Analysis of GTZPRINT Exception Data";
    Footnote2 "One-Way and Two-Way Analysis by Program and Event";

  Run;

  Proc Freq Data=TRAKDATA;
    Tables PROGRAM PROGRAM * HOMEJOB;
    Title1 "Report II-B: Generic Tracker Facility Exception Reporting";
    Label HOMEJOB  = 'Name of Invoking Batch Job'
          PROGRAM  = 'Executed Program';
    Footnote1 "Frequency Analysis of GTZPRINT Exception Data";
    Footnote2 "One-Way and Two-Way Analysis by Program and HomeJob";

  Run;

* ------------------------------------------------------------------- ;
*                                                                     ;
* Report III:  Descriptive Statistics using PROC Means                ;
*                                                                     ;
* Note:  When using Proc Means, if you do not include any statistic   ;
* keywords, then Means will produce the mean, the number of non-miss- ;
* ing values, the standard deviation, the minimum value, and the max- ;
* imum value for each numeric variable.                               ;
*                                                                     ;
* ------------------------------------------------------------------- ;

  %Macro ProcMeans(Sortin=,Sortout=,Criteria=,Key=,FNote=);
  Proc Sort Data=&Sortin Out=&Sortout &Key;
    By &Criteria;

  Run;

  Proc Means Data=&Sortout N NMISS MAX MIN MEAN MEDIAN SUM;
    By &Criteria;
    Title1 "Report III: Generic Tracker Facility Exception Reporting";
    Label EVNTDESC = 'Event Description'
          HOMEJOB  = 'Name of Invoking Batch Job'
          INSTANCE = 'Exception Occurrence #'
          PROGRAM  = 'Executed Program';
    Footnote1 "Descriptive Statistics";
    Footnote2 "Non-Missing, Missing, Max, Min, Mean, Median, Sum";

  Run;
  %Mend ProcMeans;

  %ProcMeans(Sortin=TRAKDATA, Sortout=MEANOUT1, Criteria=EVNTDESC,
             Key=NoDupkey, FNote='Event Description');

  %ProcMeans(Sortin=TRAKDATA, Sortout=MEANOUT2, Criteria=HOMEJOB,
             Key=NoDupkey, FNote='Invoking Batch Job');

  %ProcMeans(Sortin=TRAKDATA, Sortout=MEANOUT3, Criteria=INSTANCE,
             Key=NoDupkey, FNote='Exception Instance');

  %ProcMeans(Sortin=TRAKDATA, Sortout=MEANOUT4, Criteria=PROGRAM,
             Key=NoDupkey, FNote='Program');

* Proc SGPlot;                                                        ;
*   Histogram Instance / Showbins Scale=Count;                        ;
* Run;                                                                ;

$$
/*
//
