{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012621000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1528436, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE698.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE698.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x18\\t'", "DS1TRBAL": "b'+\\xd4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xd6\\x00\\x06\\x04\\xd8\\x00\\x00\\x00\\x19'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x001\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x13\\x10\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:10:31", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  698\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE698\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 14,200 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/01/13    13:10:30    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x01\\x040\\x9f\\x01\\x040\\x9f\"\\x17\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-04T00:00:00", "modifydate": "2004-11-04T22:17:20", "lines": 31, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "Sam,\n\nWould you please look this over to see if it is worth putting on\nthe CBT Tape?\n\nThis is a system to load RACF information into a PostgreSQL\ndatabase on a Linux system.\n\nThe file is a TSO XMIT of a PDS (LRECL=80 RECFM=FB) which\ncontains six members. The first is a documentation member named\n$DOC. The second, HASX20B, is a JES2 exit 20 program which is\noptional.  This program puts a \"unique identifier\" in the SMFxUIF\nfields so that records can be related to each other.  The third,\nIRRADU00, is sample JCL to run the IRRADU00 program, which creates\nRACF activity records in a format which can be downloaded and put\ninto PostgreSQL.  The fourth, IRRDBU00, is sample JCL to run the\nIRRDBU00 utility which creates a sequential file containing most\nof the information in the RACF database in a format which can be\ndownloaded and put into PostgreSQL.  The last is named TARFILE and\ncontains an XMIT of a z/OS sequential file (LRECL=1 RECFM=FB).\nThis sequential file is a \"tar\" archive containing a number\nLinux/UNIX files.\n\n\n--\nJohn McKown\nSenior Systems Programmer\nUICI Insurance Center\nInformation Technology\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00I\\x01\\x04)O\\x01\\x040\\x8f\\x15\\x18\\x01d\\x00\\x05\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2004-10-20T00:00:00", "modifydate": "2004-11-03T15:18:49", "lines": 356, "newlines": 5, "modlines": 0, "user": "TSH009"}, "text": "This PDS contains documentation and JCL to install code on a system\nrunning Perl and PostgreSQL. This code emulates the DB2 code supplied\nby IBM with z/OS.\n\nThis documentation assumes that you or your are familar with:\n    z/OS\n    RACF on z/OS\n    Linux\n    Perl on Linux\n    PostgreSQL on Linux\n    How to do SQL queries (at the psql prompt and/or in Perl)\nThis documentation does not attempt to teach you about these.\n\nIn particular, this PDS contains the following members:\n1. $DOC     - This member, which contains the basic documentation\n2. HASX20B  - This member is a JES2 exit which puts a value in the\n              JCTUSEID field of the $JCT. This is then placed in all\n              of the SMF records generated by this job, in the SMFnUIF\n              field.\n3. IRRADU00 - This member is example JCL to create the RACF activity\n              records to be sent to your Linux system.\n4. IRRDBU00 - This member is example JCL to create the RACF database\n              unload dataset to be sent to your Linux system.\n5. RECEIVE  - The basic JCL to create the file which is to be\n              ftp'ed to the Linux system and then ftp that file\n              to the Linux system.\n              This member must be customized as described therein.\n6. TARFILE  - This member contains the output of an XMIT command.\n              This member must be RECEIVE'd (see RECEIVE member)\n              in order to create a sequential file. This sequential\n              file must then be binary ftp'ed to the Linux system\n              upon which the system will run. This sequential file\n              is the output from a tar command, run on Linux, which\n              was binary ftp'ed to a z/OS system. Don't bother trying\n              to read it, it looks like binary junk.\n\n=======================================================\n\nSteps required to install and use this facility\n\n1. Run the RECEIVE job. This job will create the tar file in an MVS\n   sequential file. The second step will the ftp this to your Linux\n   system. Please note that you must customize the ftp step with the\n   IP address of your Linux system as well as the appropriate userid\n   and password on your Linux system.\n\n2. If needed, run the example jobs:\n\n   IRRADU00 - This job creates the RACF activity reformatted dataset\n              on your MVS system.\n\n   IRRDBU00 - This job creates the dataset which contains the unloaded\n              RACF database.\n\n3. The remainder of the steps must be done on your Linux system.\n   Logon to it.\n\n4. Change to the \"newracf\" subdirectory created by the RECEIVE job.\n\n5. Use ftp to download the datasets created by the IRRADU00 and\n   IRRDBU00 jobs.  You must remember to preserve trailing blanks or\n   the load Perl programs will not work correctly. If you are using\n   the IBM TCP/IP stack, this is done with the ftp subcommand:\n       quote site trailingblanks\n   This is an \"ascii\" download.  In my examples below, I assume that\n   the IRRADU00 output is downloaded to the file \"irradu00.data\" and\n   the IRRDBU00 output is downloaded to the file \"irrdbu00.data\".\n\n   Please note that the irradu00.data file may be very large,\n   depending on your RACF options and activity. For example, on my\n   system, one weeks worth of data is around 3.5 gigabytes once it is\n   downloaded. Once processed, this data can either be deleted or you\n   can use the bzip2 or gzip program to decrease its size.  When I\n   used bzip2 on the 3.5 gigabyte file, it was reduced to only 10\n   megabytes! That is 350 to 1 compression. The Perl programs cannot\n   directly read this compressed file, but you could invoke them by\n       bzcat input.file.bz2 | ./perl-program.pl\n   instead of\n       ./perl-program.pl input.file\n   This will, of course, cause the programs to run slower.\n\n6. Create the \"racf\" database and tables by entering the following\n   commands:  From the shell, enter the command \"psql\" to get a\n   PostgreSQL command prompt.  Once in psql, enter the following\n   commands:\n\n       create database racf;\n       \\c racf\n       \\i racdbutb.psql\n       \\i irradutb.psql\n       \\i create_jobinit_index.psql\n       \\i create_jobstart-jobend_views.psql\n       \\i create_and_load_viol.psql\n       \\q\n\n   -- or --\n\n   Run the shell command:\n      ./create_racf_database.sh\n\n   Note that all my Perl programs and psql script depend on the\n   database being named \"racf\". If you want to use some other database\n   to contain the tables, you must search for where \"racf\" is used as\n   a database name and change it to your database name.\n\n7. Run the Perl program \"racdbuld.pl\" by entering:\n       ./racdbuld.pl irrdbu00.data\n   This program will abort (die) with an error message if there is any\n   problem.  The program will output a message for every 1000 lines of\n   input which it reads. This is for your comfort that it is doing\n   something. This program does not issue a \"commit\" until all records\n   have been successfully processed.  When this program completes, the\n   RACF database information will have been loaded into a number of\n   PostgreSQL tables, which are The easiest way to find the names of\n   the tables created and the columns defined in them is by looking at\n   the racdbuld.txt file.\n\n8. Create and load the \"auth_ids\" table by entering the shell command:\n       psql <create_and_load_auth_ids.psql\n\n9. Run the Perl program \"irraduld.pl\" by entering:\n       ./irraduld.pl irradu00.data\n   Due to its large size, this program takes quite a while to start\n   up.  The program will abort (die) with an error message if an error\n   occurs.  The program will output a message for every 1000 lines of\n   input which it reads. It will also issue a \"commit\" at this time.\n   The message is to assure you that it is running. When the program\n   completes, the RACF activity information will have been loaded into\n   a number of PostgreSQL tables. The easiest way to find the names of\n   the tables created and the columns defined in them is by looking at\n   the racdbutb.txt file.\n\n10. At this point the \"racf\" database will have all of its tables\n    defined and information loaded into them.\n\n11. You will periodically need to rerun the IRRDBU00 job, download the\n    output and rerun the irrdbuld.pl program and the\n    create_and_load_auth_ids.psql script as documented in steps 7 and\n    8. This is to keep the information current. Note that the\n    irrdbuld.pl program will remove all the old information.\n\n12. You will need to periodically run the IRRADU00 job, download the\n    output and run the \"irraduld.pl\" program. This is to keep\n    information current.  Note that unlike the \"irrdbuld.pl\" program,\n    the \"irraduld.pl\" program does not clear out old information. It\n    is the responsibility of the user of this data to periodically\n    purge it from the system.\n\n13. Optionally, install the HASX20B exit in JES2. I don't have a JES3\n    equivalent due to lack of knowledge of JES3.\n\n=======================================================\n\nMaintenance of the programs and scripts is the your responsibility. If\nyou go to a new release of z/OS and RACF has been enhanced, there is a\npossibility that any of the members:  IRRADULD, IRRADUTB, RACDBULD, or\nRACDBUTB may be changed. If this occurs, you will likely be able to\nuse the new RACF functionality by downloading those members and running\nthe the various Perl program which begin with \"mk\". These programs and\nhow to run them are documented below. I will attempt to keep my\nversion of these programs up to date. But I cannot guarantee that I\nwill be able to do so.\n\nHowever, doing the above may result in data loss. This is because\nthese Perl programs are not designed to \"upgrade\" the tables with new\ncolumns, but to delete the current tables and replace them with new\ntables.\n\nI will mention that the \"mk\" programs are dependant on the way that\nIBM has formatted the commands contained within them. There are many\nways to format these commands. The \"mk\" scripts are not intelligent\nenough to decode every possible legal formatting.\n\n=======================================================\n\nThe contents of the tar file are:\n\n45day.psql\n  This shows how to get a report of RACF userids not accessed in 45\n  days. You execute this interactively by using the \"\\i\" command in\n  an interactive \"psql\" session. This is true of all files which\n  end in \".psql\".\n\n90day.psql\n  The same as the above, only with 90 days as the interval.\n\nadusymbl.txt\n  This is the contents of SYS1.SAMPLIB(ADUSYMBL). I currently do not\n  use it for anything.\n\ncreate_access_indices.psql\n  This psql script simply defines some indices on the ACCESS table which\n  should help with some queries. Running it is optional. Having these\n  indices does slow down the loading of data into the ACCESS table.\n\ncreate_and_load_auth_ids.psql\n  This Perl program creates and loads the AUTH_IDS table. It must\n  be run after the \"racdbuld.psql\" program is run.\n\ncreate_and_load_viol.psql\n  This psql script creates a table with two fields. One field contains\n  the values (as of z/OS 1.5) which may occur in the \"init_event_qual\"\n  field of the JOBINIT table. This field is the primary key. The second\n  field contains an English explaination of what it means.\n\ncreate_jobinit_index.psql\n  This psql script creates two PostgreSQL indices on the \"jobinit\"\n  table. You need not run this for other things to work. I used it\n  to increase the performance of some queries.\n\ncreate_jobstart-jobend_views.psql\n  This psql script creates two views. They are both on the \"jobinit\"\n  table. One view is for when a job started. The other is for when\n  a job ended. I use these view in the \"jobsrun.psql\" script to report\n  on job executions. The simplify some SELECT commands.\n\ncreate_racf_database.sh\n  This shell script simply issues the psql command necessary to create\n  the racf database and most of its tables.\n\ndbusplit.pl\n  This Perl program is designed to read the output from IRRDBU00 and\n  report on the counts for the various record types.\n\ndbusymbl.txt\n  This is the contents of SYS1.SAMPLIB(DBUSYMBL). I currently do not\n  use it for anything.\n\ndsn_access.psql\n  This is just an example psql script relating dataset names and the\n  accesses granted to them.\n\nirradu00_count.pl\n  This Perl program can read the IRRADU00 output and give you the\n  counts of how many rows will be inserted into which tables. It is\n  just an example of using Perl to directly read the IRRADU00 output\n  for some simple functionality.\n\nirraduld.pl\n  This is a very large Perl program. This program reads the output\n  from IRRADU00 and loads the data into the various tables. This\n  Perl program is created by the mkirraduld.pl program.\n\nirraduld.txt\n  This is the contents of SYS1.SAMPLIB(IRRADULD). This file is read\n  by the mkirraduld.pl program in order to create the irraduld.pl\n  program.\n\nirradutb.psql\n  This psql script creates the tables used by the irraduld.pl program.\n  You must run this psql script before running the irraduld.pl program.\n  This script assumes that the tables DO NOT exist. If they already\n  exist, it will generate a lot of error messages.\n  I generated this file \"by hand\" from the irradutb.txt file. It is\n  ugly.\n\nirradutb.txt\n  This is the contents of SYS1.SAMPLIB(IRRADUTB). I used this file\n  as the basis for the irradutb.psql file.\n\njobsrun.psql\n  This psql script generates a listing of all jobs which successfully\n  initiated and / or terminated.\n\njobs_with_errors.psql\n  This psql script is supposed to generate output listing all jobs\n  which had a problem such as \"Invalid Password\".\n\nmkdb2load.pl\n  This Perl program is used to create the irraduld.pl and racdbuld.pl\n  programs. It is run by issuing the commands:\n\n  export database='racf'\n  ./mkdb2load.pl irraduld.txt >irraduld.pl\n  chmod 755 irraduld.pl\n\n  export database='racf'\n  ./mkdb2load.pl racdbuld.txt >racdbuld.pl\n  chmod 755 racdbuld.pl\n\n  You must export the environment variable \"database\" to name the\n  database in which the tables are created. If you use something other\n  than \"racf\", then you must change all the *.psql files to use that\n  database in the \"\\c racf\" control statement.\n\n  The plus of this is that it is driven by either the irraduld.txt or\n  racdbuld.txt files. This means that if IBM changes RACF, and the\n  SYS1.SAMPLIB(IRRADULD) member or SYS1.SAMPLIB(RACDBULD) member, the\n  irraduld.pl and racdbuld.pl programs can be updated simply. I assure\n  you that you don't want to create these programs by hand.\n\n  This program removes all DB2 comments and any data in columns 73-80\n  so there is should be no need to \"clean up\" the DB2 LOAD control\n  statements.\n\n  Actually, this program should be able to create a Perl program to\n  load any set of tables for which you have LOAD control statement of\n  the DB2 utilities.\n\nmktar.sh\n  This shell script creates the gzip'ed tar file with all the *.pl,\n  *.sh, *.txt, *.psql files in it.\n\nnoowner.psql\n  This psql script simply shows those resources which reference an\n  owner which no longer exists. Actually, it is much easier to get\n  this report by using the IRRRID00 program supplied by IBM with RACF.\n\nnoseq.pl\n  This Perl program is used to remove any sequence numbers in columns\n  73 through 80, then remove any trailing blanks.\n\nracdbuld.pl\n  This Perl program loads the output of the IRRDBU00 program into\n  the PostgreSQL tables. This is based on the z/OS 1.4 version of\n  the racdbuld.txt file.\n\nracdbuld.txt\n  This is the contents of SYS1.SAMPLIB(RACDBULD). This file is read\n  by the mkracdbuld.pl program in order to create the racdbuld.pl\n  program.\n\nracdbuqr.txt\n  This is the contents of SYS1.SAMPLIB(RACDBUQR). It is not used for\n  any particular purpose. I just keep it around for reference.\n\nracdbutb.psql\n  This psql script creates the PostgreSQL tables needed by the\n  racdbuld.pl program. It was created, by hand, by editting the\n  racdbutb.txt file.\n\nracdbutb.txt\n  This is the contents of SYS1.SAMPLIB(RACDBUTB). I used it to create\n  the racdbutb.psql file.\n\nremove_carriage_returns.pl\n  This is another weird utility that I had to create due to the way\n  that I got the IRRADU00 and RACDBU00 output onto my Linux system at\n  home. This routine basically does the same thing as \"dos2unix\".\n  Unfortunately, \"dos2unix\" did not work on the above outputs due\n  to embedded binary data placed by CA-7 in the \"SMFUSER\" fields.\n\nremove_db2_comments.pl\n  This is a utility which simply strips out all DB2 and SPFUI\n  comments.  I created it to simplify some files that I was working\n  with.  It is not needed before sending a \"control file\" to the\n  mkdb2load.pl program.\n\nsortsymbl.pl\n  This program simply reads its input file and writes it out, excluding\n  any lines which start with an asterisk. I don't remember why I wrote\n  it. Likely it had something to do with the \"adusymbl.txt\" and\n  \"dbusymbl.txt\" files which I ended up not using.\n\n==========================================================\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE698": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00$\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x13\\x10\\x00C\\x00C\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:10:24", "lines": 67, "newlines": 67, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 698 is from John McKown and contains a system to do       *   FILE 698\n//*           RACF reporting for a z/OS system, on Linux, using     *   FILE 698\n//*           Perl and PostgreSQL.  This package emulates DB2       *   FILE 698\n//*           code which is supplied by IBM, but it does the        *   FILE 698\n//*           reporting on the underlying Linux system if you       *   FILE 698\n//*           are running z/OS on a FLEX-ES box.                    *   FILE 698\n//*                                                                 *   FILE 698\n//*           This system runs partially on MVS and partially       *   FILE 698\n//*           on Linux.  The Linux part is in TSO XMIT format       *   FILE 698\n//*           as member TARFILE, and it has to be RECEIVEd on       *   FILE 698\n//*           MVS and FTP'ed to the Linux system and un-TARed       *   FILE 698\n//*           there.                                                *   FILE 698\n//*                                                                 *   FILE 698\n//*           See member $DOC for detailed installation             *   FILE 698\n//*           instructions and information.                         *   FILE 698\n//*                                                                 *   FILE 698\n//*       email:  \"McKown, John\" <john.archie.mckown@GMAIL.com>     *   FILE 698\n//*                                                                 *   FILE 698\n//*     This PDS contains documentation and JCL to install code     *   FILE 698\n//*     on a Linux system running Perl and PostgreSQL.  This code   *   FILE 698\n//*     emulates the DB2 code supplied by IBM with z/OS.            *   FILE 698\n//*                                                                 *   FILE 698\n//*     This documentation assumes that you are familar with:       *   FILE 698\n//*                                                                 *   FILE 698\n//*         z/OS                                                    *   FILE 698\n//*         RACF on z/OS                                            *   FILE 698\n//*         Linux                                                   *   FILE 698\n//*         Perl on Linux                                           *   FILE 698\n//*         PostgreSQL on Linux                                     *   FILE 698\n//*         How to do SQL queries (at the psql prompt               *   FILE 698\n//*           and/or in Perl)                                       *   FILE 698\n//*                                                                 *   FILE 698\n//*     This documentation does not attempt to teach you about      *   FILE 698\n//*     these.                                                      *   FILE 698\n//*                                                                 *   FILE 698\n//*     In particular, this PDS contains the following members:     *   FILE 698\n//*                                                                 *   FILE 698\n//*     1. $DOC     - This member, which contains the basic         *   FILE 698\n//*                   documentation                                 *   FILE 698\n//*     2. HASX20B  - This member is a JES2 exit which puts a       *   FILE 698\n//*                   value in the JCTUSEID field of the $JCT.      *   FILE 698\n//*                   This is then placed in all of the SMF         *   FILE 698\n//*                   records generated by this job, in the         *   FILE 698\n//*                   SMFnUIF field.                                *   FILE 698\n//*     3. IRRADU00 - This member is example JCL to create the      *   FILE 698\n//*                   RACF activity records to be sent to your      *   FILE 698\n//*                   Linux system.                                 *   FILE 698\n//*     4. IRRDBU00 - This member is example JCL to create the      *   FILE 698\n//*                   RACF database unload dataset to be sent       *   FILE 698\n//*                   to your Linux system.                         *   FILE 698\n//*     5. RECEIVE  - The basic JCL to create the file which is     *   FILE 698\n//*                   to be ftp'ed to the Linux system and then     *   FILE 698\n//*                   ftp that file to the Linux system.            *   FILE 698\n//*                   This member must be customized as             *   FILE 698\n//*                   described therein.                            *   FILE 698\n//*     6. TARFILE  - This member contains the output of an XMIT    *   FILE 698\n//*                   command.  This member must be RECEIVE'd       *   FILE 698\n//*                   (see RECEIVE member) in order to create a     *   FILE 698\n//*                   sequential file. This sequential file must    *   FILE 698\n//*                   then be binary ftp'ed to the Linux system     *   FILE 698\n//*                   upon which the system will run. This          *   FILE 698\n//*                   sequential file is the output from a tar      *   FILE 698\n//*                   command, run on Linux, which was binary       *   FILE 698\n//*                   ftp'ed to a z/OS system. Don't bother         *   FILE 698\n//*                   trying to read it, it looks like binary       *   FILE 698\n//*                   junk.                                         *   FILE 698\n//*                                                                 *   FILE 698\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HASX20B": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00A\\x01\\x040\\x0f\\x01\\x040\\x0f\\x12 \\x00\\xb3\\x00\\xb3\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-10-26T00:00:00", "modifydate": "2004-10-26T12:20:41", "lines": 179, "newlines": 179, "modlines": 0, "user": "TSH009"}, "text": "HASX20B  TITLE 'JES2 USER EXIT 20 -- PROLOG (MODULE COMMENT BLOCK)'\n***********************************************************************\n*                                                                     *\n* MODULE NAME = HASX20B  (HASX20B load module)                        *\n*                                                                     *\n* DESCRIPTIVE NAME = SAMPLE JES2 USER EXIT 20 (End of Input ROUTINE)  *\n*                                                                     *\n* STATUS = OS/VS2 - See $MODULE expansion below for FMID, version     *\n*                                                                     *\n* FUNCTION : This exit places the last two bytes of the output from   *\n*            an STCK instruction, converted to printable hex in       *\n*            bytes 3 through 6 of the JCTUSEID field. This field      *\n*            is propogated into the SMF \"user_id\" records generated   *\n*            by the job. This is done due to the fact that the        *\n*            IRRADU00 output truncates the READER START TIME          *\n*            to the nearest second. This could result in separate     *\n*            jobs having the same \"SMF JOBLOG\" value. Also, IBM       *\n*            has indicated that the JOBLOG is not guaranteed to       *\n*            be unique. Use of the last two bytes of the STCK         *\n*            output, along with the \"JOBLOG\" should result in a       *\n*            unique indentifier, at least within a single sysplex.    *\n*                                                                     *\n*            The SMF \"JOBLOG\" consists of the concatenation of        *\n*            the job name, reader start date, and reader start time.  *\n*                                                                     *\n*            Implementation of this JES2 exit is totally optional.    *\n*            You may do it by compiling this program into a           *\n*            dataset on the linklist and including the JES2           *\n*            initialization statements (in z/OS 1.4):                 *\n*                                                                     *\n*            LOADMOD(HASX20B)                                         *\n*            EXIT(20) ROUTINE=(EXIT20B),STATUS=ENABLED                *\n*                                                                     *\n* ENVIRONMENT : JES2 MAIN TASK                                        *\n*                                                                     *\n* NOTES                                                               *\n*                                                                     *\n*    DEPENDENCIES = JES2 $EXIT FACILITY, STANDARD JES2 SERVICES       *\n*                                                                     *\n*    RESTRICTIONS = This code is provided as an example of            *\n*                   installation extensions to JES2.  This code       *\n*                   is not considered TYPE 1 supported code of IBM.   *\n*                   Any problems encountered in the use of this       *\n*                   sample code is a user responsibility.  The        *\n*                   IBM support center does not support user          *\n*                   extensions of sample user exits.                  *\n*                                                                     *\n*    REGISTER CONVENTIONS = See entry point documentation             *\n*                                                                     *\n*    PATCH LABEL = NONE                                               *\n*                                                                     *\n* MODULE TYPE = Procedure ( CSECT type )                              *\n*                                                                     *\n*    PROCESSOR = IBM OS/Assembler H Version 2 or               @430P270\n*                IBM High Level Assembler/MVS                  @430P270\n*                                                                     *\n*    MODULE SIZE = See $MODEND macro expansion at end of assembly     *\n*                                                                     *\n*    ATTRIBUTES = JES2 REENTRANT, RMODE ANY, AMODE 31                 *\n*                                                                     *\n* ENTRY POINTS : EXIT04                                               *\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG       VALUE ON ENTRY             VALUE ON EXIT               *\n*                                                                     *\n*    R0        A CODE PASSED TO THE       UNCHANGED                   *\n*              ROUTINE BY JES2:                                       *\n*                0  NORMAL END OF INPUT                               *\n*                4  JOBS HAS A JES2 CONTROL STATEMENT ERROR.          *\n*    R1-R9     N/A                        UNCHANGED                   *\n*    R10       ADDRESS OF THE JCT OR ZERO UNCHANGED                   *\n*    R11       ADDRESS OF THE HCT         UNCHANGED                   *\n*    R12       N/A                        UNCHANGED                   *\n*    R13       ADDRESS OF THE PCE         UNCHANGED                   *\n*    R14       RETURN ADDRESS             UNCHANGED                   *\n*    R15       ENTRY ADDRESS              RETURN CODE                 *\n*                                                                     *\n* RETURN CODES (R15 ON EXIT)                                          *\n*                                                                     *\n*       0  TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES  *\n*          ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE       *\n*          EXIT ROUTINE.  IF THERE ARE NO OTHER EXIT ROUTINES ASSO-   *\n*          CIATED WITH THIS EXIT, CONTINUE WITH NORMAL PROCESSING.    *\n*                                                                     *\n*       4  TELLS JES2 THAT EVEN IF THERE ARE ADDITIONAL EXIT ROUTINES *\n*          ASSOCIATED WITH THIS EXIT, IGNORE THEM.  CONTINUE WITH     *\n*          NORMAL PROCESSING.                                         *\n*                                                                     *\n*       8  TELLS JES2 TO TERMINATE NORMAL PROCESSING AND PRINT        *\n*          THE OUTPUT.                                                *\n*                                                                     *\n*      12  TELLS JES2 TO TERMINATE NORMAL PROCESSING WITHOUT          *\n*          PRINTING THE OUTPUT.                                       *\n*                                                                     *\n* MACROS = JES2 - $ENTRY, $MODEND, $MODULE, $MSG, $RETURN, $SAVE,     *\n*                 $WTO                                                *\n*                                                                     *\n* MACROS = MVS  - NONE                                                *\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n*                                                                     *\n*        @311    MVS/SP-JES2 VERSION 3 RELEASE 1 LEVEL 1              *\n*                (SP3.1.1, HJE3311)                                   *\n*                                                                     *\n* $430P270=10X      HJE4430 920721 HGF:  $MODULE, ENVIRON, RMODE      *\n*                                                                     *\n* A000000-999999    CREATED FOR JES2 3.1.1                         @311\n***********************************************************************\n         TITLE 'JES2 USER EXIT 20 -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL\n         TITLE 'JES2 USER EXIT 20 -- PROLOG ($MODULE)'\nHASX20B $MODULE ENVIRON=JES2,                                  @430P270C\n               RMODE=ANY,                                      @430P270C\n               TITLE='JES2 USER EXIT 20',                      @430P270C\n               SPLEVEL=NOCHECK,                                        X\n               $BUFFER,            GENERATE HASP I/O BUFFER DSECT      C\n               $DCT,               GENERATE HASP DCT DSECT             C\n               $HASPEQU,           GENERATE HASP EQUATES DSECT         C\n               $HCT,               GENERATE HASP HCT DSECT             C\n               $JCT,               GENERATE HASP JCT DSECT             C\n               $MIT,               GENERATE HASP MIT DSECT             C\n               $PCE,               GENERATE HASP PCE DSECT             C\n               ASCB,               GENERATE MVS ASCB DSECT             C\n               RPL                 GENERATE MVS RPL DSECT      @430P270\n         TITLE 'JES2 USER EXIT 20 -- JCL/JECL SCAN'\n***********************************************************************\n*                                                                     *\n*        EXIT20 - INSTALLATION EXIT 20 ROUTINE                        *\n*                                                                     *\n*  FUNCTION:                                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT20B $ENTRY  BASE=R12           PROVIDE EXIT ROUTINE ENTRY POINT\n        $SAVE                      SAVE CALLER'S REGISTERS\n         USING JCT,R10             ESTABLISH JCT ADDRESSABILITY\n         SPACE 1\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LTR   R0,R0               TEST FOR NORMAL END OF INPUT\n         BNZ   X20RC00\n         LA    R2,JCTUSER1\n         N     R2,=A(X'FFFFFFF8')\n         LM    R3,R6,0(R2)\n         STCK  0(R2)\n         UNPK  8(5,R2),6(3,R2)\n         MVC   JCTUSEID+2(4),8(R2)\n         TR    JCTUSEID+2(4),TOHEX-C'0'\n         STM   R3,R6,0(R2)\n         B     X20RC00\n         EJECT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*    EXIT20 COMMON RETURN ROUTINE                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nX20RC00  LA    R15,0               SET RC=0\n         B     RRET                BRANCH TO RETURN WITH RC SET\n         SPACE 1\nX20RC04  LA    R15,4               SET RC=4\n         B     RRET                BRANCH TO RETURN WITH RC SET\n         SPACE 1\nX20RC08  LA    R15,8               SET RC=8\n         B     RRET                BRANCH TO RETURN WITH RC SET\n         SPACE 1\nX20RC12  LA    R15,12              SET RC=12\n         SPACE 1\nRRET    $RETURN RC=(R15)           SAVE RETURN CODE\n         EJECT\n         SPACE 2\n         DS    CL90'UNUSED'\nTOHEX    DC    C'0123456789ABCDEF'\n         LTORG\n         TITLE 'JES2 USER EXIT 20 -- EPILOG ($MODEND)'         @430P270\n        $MODEND\nAPARNUM  DC    CL8'NONE'           APAR NUMBER\n         END   ,                   END OF HASX20B\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IRRADU00": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x12\\x01\\x04)_\\x01\\x04)_\\x078\\x00#\\x00#\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-10-21T00:00:00", "modifydate": "2004-10-21T07:38:12", "lines": 35, "newlines": 35, "modlines": 0, "user": "TSH009"}, "text": "//IRRADU00 JOB ACCT,IRRADU00,\n//         CLASS=A,\n//         MSGCLASS=X,\n//         NOTIFY=&SYSUID\n//*\n// SET SMFINPUT=\n//* PUT THE DSN OF THE SMF DATASET IN THE ABOVE SET COMMAND\n//*\n// SET OUTDSN=\n//* PUT THE DSN OF THE OUTPUT DATASET IN THE ABOVE SET COMMAND\n//*\n// SET OUTSPC='SPACE=(CYL,(??,??),RLSE),'\n//* PUT THE SPACE PARAMETER IN THE ABOVE SET COMMAND\n//* NOTE THAT YOU CAN SET OUTSPC TO '' IF YOU ARE USING TAPE\n//*\n// SET OUTUNIT=DISK\n//* PUT THE OUTPUT UNIT IN THE ABOVE SET\n//*\n//STEP002  EXEC  PGM=IFASMFDP\n//SYSPRINT DD  SYSOUT=*\n//ADUPRINT DD  SYSOUT=*\n//OUTDD    DD  DSN=&OUTDSN,\n//         DISP=(NEW,CATLG),&OUTSPC\n//         UNIT=&OUTUNIT\n//SMFDATA  DD  DSN=&SMFINPUT,\n//             DISP=SHR\n//SMFOUT   DD  DUMMY\n//SYSIN    DD  *\n INDD(SMFDATA,OPTIONS(DUMP))\n OUTDD(SMFOUT,TYPE(000:255))\n ABEND(NORETRY)\n USER2(IRRADU00)\n USER3(IRRADU86)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRRDBU00": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01\\x04)_\\x01\\x04)_\\x079\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-10-21T00:00:00", "modifydate": "2004-10-21T07:39:34", "lines": 28, "newlines": 28, "modlines": 0, "user": "TSH009"}, "text": "//IRRDBU00 JOB ACCT,IRRDBU00,\n//         CLASS=A,\n//         MSGCLASS=X,\n//         NOTIFY=&SYSUID\n//*\n// SET RACFDSN=\n//* PUT THE DSN OF THE RACF DATASET IN THE ABOVE SET COMMAND\n//*\n// SET OUTDSN=\n//* PUT THE DSN OF THE OUTPUT DATASET IN THE ABOVE SET COMMAND\n//*\n// SET OUTSPC='SPACE=(CYL,(??,??),RLSE),'\n//* PUT THE SPACE PARAMETER IN THE ABOVE SET COMMAND\n//* NOTE THAT YOU CAN SET OUTSPC TO '' IF YOU ARE USING TAPE\n//*\n// SET OUTUNIT=DISK\n//* PUT THE OUTPUT UNIT IN THE ABOVE SET\n//*\n//STEP010  EXEC  PGM=IRRDBU00,\n//             PARM=NOLOCKINPUT\n//SYSPRINT DD  SYSOUT=*\n//INDD1    DD  DSN=&RACFDSN,\n//             DISP=SHR\n//OUTDD    DD  DSN=&OUTDSN,&OUTSPC\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=&OUTUNIT,\n//             RECFM=VB,LRECL=6000,\n//             BLKSIZE=23746,DSORG=PS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RECEIVE": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x02\\x01\\x04)O\\x01\\x04)O\\x14\\x05\\x00%\\x00#\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-10-20T00:00:00", "modifydate": "2004-10-20T14:05:02", "lines": 37, "newlines": 35, "modlines": 0, "user": "TSH009"}, "text": "//RECEIVE  JOB ACCT,RECEIVE,\n//         CLASS=A,\n//         MSGCLASS=X,\n//         NOTIFY=&SYSUID\n//*\n// SET THISDSN=TSH009.RACFPSQL.CNTL\n//RECEIVE EXEC PGM=IKJEFT01,REGION=6M\n//SYSTSPRT DD SYSOUT=*\n//INFILE DD DISP=SHR,DSN=&THISDSN(TARFILE)\n//SYSTSIN DD *\n RECEIVE INFILE(INFILE)\n  RESTORE DSN(ASCII.NEWRACF.TAR.GZ)\n/*\n//*\n//FTP EXEC PGM=FTP,PARM='(EXIT'\n//OUTPUT DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//INPUT DD *\nlinux.ip.address\nuser.on.linux.system\nusers.password\nbin\nsendsite\nmkdir newracf\ncd newracf\nput ASCII.NEWRACF.TAR.GZ\nquit\n/*\n//*\n//* You now have a shiny new gzip'ed tar file on your Linux server.\n//* Logon to that server and issue the commands:\n//* cd newracf\n//* tar xzf ASCII.NEWRACF.TAR.GZ\n//* This command will \"unwind\" the tar file and put all the\n//* Perl programs and data files in the \"newracf\" subdirectory.\n//* You may, of course, call it something other than \"newracf\".\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TARFILE": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00A\\x01\\x04)O\\x01\\x040\\x8f\\x15Q4\\x8f3\\x0e\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-10-20T00:00:00", "modifydate": "2004-11-03T15:51:41", "lines": 13455, "newlines": 13070, "modlines": 0, "user": "TSH009"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT698/FILE698.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT698", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}