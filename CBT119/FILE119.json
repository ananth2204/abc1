{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011251000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1234506, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 20, "INMDSNAM": "CBT.V500.FILE119.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1234506, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1234506, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE119.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x15\\x04'", "DS1TRBAL": "b'\\xc2p'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xbe\\x00\\x00\\x00\\xbf\\x00\\x06\\x00\\x16'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00D\\x01\\x19!O\\x01\\x19!O\\x153\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:33:44", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  119\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE119\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 84 MEMBERS COUNTED; CUMULATIVE SIZE IS 10,705 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/02/19    15:33:44    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x9d\\x00\\x9d\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 157, "newlines": 157, "modlines": 0, "user": "HMDEAN"}, "text": "//***FILE XXX IS FROM MR HOWARD DEAN OF SYNTEC                      *\n//*           ==================================================    *\n//*                       STARTED TASK ACCOUNTING AND               *\n//*                       JES2 CONTROL CARDS IN STARTED             *\n//*                       TASKS                                     *\n//*           ==================================================    *\n//*           JOBNAME     FRONT END TO 'STARTED TASK                *\n//*                       CONTROL' FOR ADDING JOB                   *\n//*                       ACCOUNTING AND JES2 CONTROL CARDS         *\n//*                       * THIS CODE IS ON FILE 425 OF THE         *\n//*                       CBT MODS TAPE *                           *\n//*           LM00038     PART 1 LOCAL MODIFICATION FOR             *\n//*                       STARTED TASK ACCOUNTING                   *\n//*           LM00039     PART 2 LOCAL MODIFICATION FOR             *\n//*                       STARTED TASK ACCOUNTING                   *\n//*           STCADOC     FORMAT OF 'SYS3.STCACCT' MEMBERS          *\n//*           X           EXAMPLE OF STC ACCOUNTING (STARTS)        *\n//*           ==================================================    *\n//*                       IEFDB401 AND JES2 USER EXIT 6             *\n//*           ==================================================    *\n//*           DYNANAME    SAMPLE DYNAMIC UNIT NAME INPUT            *\n//*                       FOR DYNAMASK                              *\n//*           DYNAJOB     DYNAMASK CATALOGED PROCEDURE              *\n//*           IEFDB401    DYNAMIC ALLOCATION EXIT TO                *\n//*                       SUPPORT DYNAMIC UNIT NAMES                *\n//*           JESUX006    JES2 USER EXIT TO SUPPORT DYNAMIC         *\n//*                       UNIT NAMES                                *\n//*           UNITDOC     DOCUMENTATION AND JUSTIFICATION           *\n//*                       FOR DYNAMIC UNIT NAME                     *\n//*                       MODIFICATION.                             *\n//*           ==================================================    *\n//*                       DUMP TRANSFER UTILITY                     *\n//*           ==================================================    *\n//*           B           CLIST FOR INVOKING ISPF BROWSE            *\n//*                       FROM EITHER READY MODE OR AN ISPF         *\n//*                       ENVIORNMENT.                              *\n//*           E           CLIST FOR INVOKING ISPF 'EDIT'            *\n//*                       FROM EITHER READY MODE OR AN ISPF         *\n//*                       ENVIRONMENT                               *\n//*           JULDATE     INNER CLIST FOR EXTRACTING                *\n//*                       TIME/DATE/DAY OF WEEK                     *\n//*                       ===>   (THIS CLIST CAN BE USED AS         *\n//*                       A GENERAL DATE ROUTINE)                   *\n//*           MAKEDAY     CLIST TO INITIALIZE DUMP TRANSFER         *\n//*                       PDS                                       *\n//*           XFERJOB     JOB TO TRANSFER SYSTEM DUMP               *\n//*                       DATASET TO TAPE                           *\n//*           XFERINST    HINTS ON INSTALLATION OF THE DUMP         *\n//*                       TRANSFER UTILITY                          *\n//*           XFERUTIL    TSO COMMAND SUBROUTINE TO                 *\n//*                       DETERMINE DUMP DATASET VOLUME             *\n//*                       SERIAL.                                   *\n//*           XFERVOL     SUBROUTINE OF XFERUTIL TO                 *\n//*                       DETERMINE VOLUME SERIAL #                 *\n//*           XFERWTO     PROGRAM TO ISSUE WTO FROM SYSIN           *\n//*                       (USED WITH CLISTS)                        *\n//*           XFER1       CLIST INVOKED UNDER TMP IN BATCH          *\n//*                       TO UPDATE XFER PDS                        *\n//*           XFER2       CLIST INVOKED UNDER TMP IN BATCH          *\n//*                       TO UPDATE XFER PDS                        *\n//*           XIX         CLIST TO INQUIRE INTO THE DUMP            *\n//*                       TITLE DATABASE                            *\n//*           XIXHELP     HELP MEMBER FOR XIX CLIST                 *\n//*           ==================================================    *\n//*                       TSO COMMANDS AND UTILITIES                *\n//*           ==================================================    *\n//*           ASID        COMMAND TO PRINT ADDRESS SPACE            *\n//*                       DATA CONVERTED TO WORK IN 31BIT           *\n//*                       MODE UNDER MVS/XA (WORKS ON               *\n//*                       NON-XA SYSTEMS TOO,IF VARIABLE            *\n//*                       SET)                                      *\n//*           ASHELP      HELP TEXT FOR THE 'ASID' COMMAND          *\n//*           CLR3270     COMMAND TO CLEAR SCREEN OF 3270           *\n//*                       TERMINAL. CHECKS FOR SESSION              *\n//*                       MANAGER ACTIVE AND RETURNS NULL           *\n//*                       STRING TO AVOID FLICKER.                  *\n//*           CLRHELP     HELP TEXT FOR THE 'CLR3270'               *\n//*                       COMMAND                                   *\n//*           HMDCHRON    TIME OF DAY UTILITY - CONVERT             *\n//*                       TIME-OF-DAY                               *\n//*           JULGREG     JULIAN-GREGORIAN AND VICE-VERSA           *\n//*                       CONVERSION (SUBROUTINE OF                 *\n//*                       HMDCHRON)                                 *\n//*           HTIME       TSO COMMAND TO FORMAT THE DATE            *\n//*                       AND TIME OF DAY (CALLS HMDCHRON           *\n//*                       AS SUBROUTINE)                            *\n//*           PDFINIT     PROGRAM FOR ALLOCATING THE \"ISPF\"         *\n//*                       PROFILE DATASET AND OPTIONALLY            *\n//*                       INVOKING EITHER A COMMAND OR              *\n//*                       \"USERID.PROFILE.CLIST\" UPON               *\n//*                       LOGON. CAN BE SET UP SIMILIAR TO          *\n//*                       VM PROFILE EXEC INVOCATION.               *\n//*           PDFHELP     HELP TEXT FOR THE 'PDFINIT'               *\n//*                       COMMAND                                   *\n//*           SM          COMMAND TO TURN SESSION MANAGER           *\n//*                       ON/OFF. WORKS IN MVX/XA MODE              *\n//*                       WHERE SESSION MANAGER CONTROL             *\n//*                       BLOCKS ARE MOVED 'ABOVE THE               *\n//*                       LINE'.                                    *\n//*           ==================================================    *\n//*                       MACROS AND SUBROUTINES                    *\n//*           ==================================================    *\n//*           EPUTL       PUTLINE SUBROUTINE TO ACCEPT PARM         *\n//*                       LIST \"ABOVE THE LINE\"                     *\n//*           APUT        MACRO TO INVOKE 'EPUTL' INSTEAD           *\n//*                       OF TPUT                                   *\n//*           --------------------------------------------------    *\n//*           CALL#       INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           DATA#       INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           END#        INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           ENDDATA#    INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           ENTRE#      INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           EXIT#       INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           IEXIT#      INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           INIT#       INTERNAL STRUCTURED MACROS USED           *\n//*                       BY XFER UTILITY                           *\n//*           --------------------------------------------------    *\n//*           INUSE       INNER MACRO FOR                           *\n//*                       TSOENTER/TSOLEAVE/SETREG/EOJ              *\n//*           LUSE        INNER MACRO FOR                           *\n//*                       TSOENTER/TSOLEAVE/SETREG/EOJ              *\n//*           LDROP       INNER MACRO FOR                           *\n//*                       TSOENTER/TSOLEAVE/SETREG/EOJ              *\n//*           CSPL        INNER MACRO FOR TSOENTER/TSOLEAVE         *\n//*           DO          MACRO                                     *\n//*           DOWHILE     MACRO                                     *\n//*           DOWHLOR     MACRO                                     *\n//*           IOPL        INNER MACRO FOR TSOENTER/TSOLEAVE         *\n//*           CPPL        INNER MACRO FOR TSOENTER/TSOLEAVE         *\n//*           TSOENTER    MACRO TO SET UP COMMAND PROCESSOR         *\n//*                       ENVIRONMENT                               *\n//*           TSOLEAVE    MACRO TO RETURN TO TMP (USED              *\n//*                       W/TSOENTER)                               *\n//*           SETREG      ENTRY SETUP MACRO  - NON/TSO              *\n//*                       ENVIORNMENT                               *\n//*           EOJ         EXIT  RETURN MACRO - NON/TSO              *\n//*                       ENVIORNMENT                               *\n//*           XABSM       BRANCH AND SET MODE MACRO FOR             *\n//*                       MVS/XA 31BIT CODING                       *\n//*                                                                 *\n//*           ELSE        MACRO                                     *\n//*           ENDO        MACRO                                     *\n//*           ENDIF       MACRO                                     *\n//*           GENC        MACRO                                     *\n//*           IF          MACRO                                     *\n//*           IFOR        MACRO                                     *\n//*           SEQCK       MACRO                                     *\n//*           UNTIL       MACRO                                     *\n//*           UNTILOR     MACRO                                     *\n//*                                                                 *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE01": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01\\x12\\x17\\x0f\\x01\\x12\\x17\\x0f#U\\x00\"\\x00\"\\x00\\x00\\xe6\\xd1\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-06-18T00:00:00", "modifydate": "2012-06-18T23:55:44", "lines": 34, "newlines": 34, "modlines": 0, "user": "WJSMITH"}, "text": "Subject:  CBT TAPE - File 119 UPDATE to TSO SM for z/OS 1.13 RSU 1204+\n          Works without modifications after 27 years!\nFrom:     \"Bill J. Smith\" <bill.smith@hds.com>\nDate:     6/18/2012 7:57 PM\nTo:       \"Sam Golob (sbgolob@cbttape.org)\" <sbgolob@cbttape.org>\n\nSam,\n\nPlease find attached an updated copy of the assembler source for\nthe TSO CP command  SM\", which allows for dynamic  off and on\" of\nthe TSO Session Manager.  Yes, it assembles cleanly, and I still\nuse the Session Manager!  Not a line of code was modified (with\nthe exception of new comments and some superficial cleanup with\nattached assembly JCL).  The LOGON WORK AREA DSECT, IKJEFLWA, is\nno longer in  Private Macs\":  It may be found in SYS1.MODGEN.\nJust type 'SM' from the TSO READY prompt after having logged on\nTSO with SM defined (EXEC PGM=ADFMDF03 + PARM) in your LOGON\nprocedure.  I could not find the HELP text (which I wrote) for\nthis command.  Time permitting, I may rewrite it.\n\nThis TSO CP REQUIRES for assembly some macros in FILE119 from\nwhich I extracted the source.  Howard Dean and I contributed SM\nto the tape in 1985 when we were employed at SYNTEX (USA) in Palo\nAlto, CA.\n\nI wonder what ever happened to Howard Dean.  Maybe a question for\nIBM-MAIN?\n\nBill Smith\nHitachi Data Systems\nSanta Clara, CA  95050-2627\n(408) 327-4287 (office)\n(415) 531-7667 (iPhone)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE02": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x01\\x13\\x12o\\x01\\x13\\x12o\\x10\\x11\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-05-06T00:00:00", "modifydate": "2013-05-06T10:11:03", "lines": 24, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "          Changes to this file:\n\n1.  TSOENTER and TSOLEAVE were copied into this file from CBT File\n    136, also from Howard Dean.  The original macros from this file\n    were renamed as TSOENTEO and TSOLEAVO, so they are still here\n    if you need them in their original form.  The newer macro versions\n    take XA and RMODE and AMODE into account, whereas the old versions\n    do not.    (SBG - 2013/05/06)\n\n    These macros are needed by the DOPROGL program in CBT File 300.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE03": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x13\\x01\\x164?\\x01\\x164?\\x00U\\x00)\\x00)\\x00\\x00\\xe6\\xd1\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-12-08T00:00:00", "modifydate": "2016-12-08T00:55:13", "lines": 41, "newlines": 41, "modlines": 0, "user": "WJSMITH"}, "text": "Subject:  The Best CLEAR 3270 TSO Command Processor -\n          CBT File 119 - Howard Dean Utilities from Syntex (USA)\nFrom:     Bill Smith <BillSmith@ussposco.com>\nDate:     12/7/2016 8:11 PM\nTo:       \"lbdyck@gmail.com\" <lbdyck@gmail.com>,\n          \"jkalinic@outlook.com\" <jkalinic@outlook.com>,\n          \"sbgolob@cbttape.org\" <sbgolob@cbttape.org>,\n          \"bruce.koss@wellsfargo.com\" <bruce.koss@wellsfargo.com>,\n          \"pinncons@rochester.rr.com\" <pinncons@rochester.rr.com>\n\nGentlemen:\n\nI seem to recall someone (Lionel?) asked for a TSO command to\nclear a 3270 display.  By coincidence, I ran across Howard Dean's\ncode from 1985  . I reassembled and tested it with z/OS 2.1 RSU\n1606, VISTA, and the TSO Session Manager  SM\" command.  The code\nis located on CBT FILE 119.  I did some trivial reformatting and\nadded some additional supporting inline documentation.  This CP\nchecks for Session Manager, ASCII devices, runs in 31 bit mode,\nno APF, looks at 3270 SFs, and best of all:  it cleans the glass\nbetter than Windex.\n\nIn memory of a dear friend and colleague, HMD, a superb sysprog.\nI was told he passed away some time ago.  I haven't seen him\nsince Christmas dinner at my house in 1987.  If anyone knows\notherwise, please let me know.\n\nI'll reship to Sam for inclusion on FILE 119.  I guess this code\ncould use a HELP member.\n\nBill\n\nWilliam J. Smith, M.A. Ed C/I\nSr. Consulting z/OS Systems Engineer/Solutions Architect\nfor Insight Global USS-POSCO Industries\n900 Loveridge Road, MS#00\nPittsburg, CA  94565-2808\n(415) 531-7667 (iPhone)\n(925) 439-6652 (office)\n(800) USS-POSCO  x6652\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE04": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x10V\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T10:56:25", "lines": 30, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  CBT File 119 - member CLR3270\nFrom:     \"Andreas Freybier\" <andreas.freybier@freybits.de>\nDate:     5/16/2018 6:49 AM\nTo:       \"'Sam Golob'\" <sbgolob@cbttape.org>\n\nHello Sam\n\nNow I have a job as consultant for z/OS system programming and\nmainframe storage.\n\nHere the customer asked me for a command to clear screen within a\nREXX.\nSo I tried member CLR3270 of file 119:\n   - in the source, there are 55 lines twice included\n       - after deletion the assembly was well done\n   - the module works fine.\n\nI attached the corrected Source of CLR3270 and for your\ndocumentation a member with the deleted lines.\nThe member name is  CLR3270Z.\n\nPlease include the new Source to File 119.\n\nGreetings from Germany\nAndreas\n\nAndreas Freybier\n\nandreas.freybier@freybits.de\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INDEX": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00q\\x00q\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 113, "newlines": 113, "modlines": 0, "user": "HMDEAN"}, "text": "                S Y N T E X    S H A R E    M O D S\n+======================================================================+\n                        HOWARD M. DEAN\n                           08/05/86\n+======================================================================+\nINDEX OF MEMBERS - $UHMD.SHARE.DATA\n----------------\n\nALL MODIFICATIONS WERE WRITTEN AND TESTED ON MVS/XA 2.1.3 JES2 2.1.2\n-----------------------------------------------------------------------\nCONTATENATE THIS LIBRARY TO YOUR 'SYSLIB' STATEMENT TO PICK UP MACROS\n WHEN ASSEMBLING THE VARIOUS PROGRAMS AND TSO COMMANDS\n-----------------------------------------------------------------------\n=======================================================================\n*** STARTED TASK ACCOUNTING AND JES2 CONTROL CARDS IN STARTED TASKS ***\n=======================================================================\nJOBNAME            FRONT END TO 'STARTED TASK CONTROL' FOR ADDING\n                   JOB ACCOUNTING AND JES2 CONTROL CARDS\nLM00038            PART 1 LOCAL MODIFICATION FOR STARTED TASK ACCOUNTING\nLM00039            PART 2 LOCAL MODIFICATION FOR STARTED TASK ACCOUNTING\nSTCADOC            FORMAT OF 'SYS3.STCACCT' MEMBERS\nX                  EXAMPLE OF STC ACCOUNTING (START X)\n=======================================================================\n*** DYNAMIC UNIT NAME MODIFCATIONS - IEFDB401 AND JES2 USER EXIT 6 ***\n=======================================================================\nDYNALIST           CBT TAPE 'DYNALIST' UTILITY TO LIST UNIT NAMES\n                   WITH FIX FOR EIGHT CHARACTER UNIT NAME PROBLEM\nDYNAMASK           CBT TAPE 'DYNAMASK' UTILITY FROM SPNB\n                   WITH EXTRA SERIALIZATION AND A FEW BUGS FIXED\nDYNANAME           SAMPLE DYNAMIC UNIT NAME INPUT FOR DYNAMASK\nDYNAJOB            DYNAMASK CATALOGED PROCEDURE\nIEFDB401           DYNAMIC ALLOCATION EXIT TO SUPPORT DYNAMIC UNIT NAMES\nJESUX006           JES2 USER EXIT TO SUPPORT DYNAMIC UNIT NAMES\nUNITDOC            DOCUMENTATION AND JUSTIFICATION FOR DYNAMIC UNIT\n                   NAME MODIFICATION.\nVATUCB             CBT TAPE 'VATUCB' UTILITY WITH MOD TO MOUNT ALL\n                   FIXED DASD AS PERM RESIDENT. THIS FIXES PROBLEM\n                   WHEN 'SYS1.IMAGELIB' IS ON A 3380 NOT MARKED\n                   PERM RESIDENT IN THE 'VATLSTXX' MEMBER OF\n                   'SYS1.PARMLIB'\n=======================================================================\n***                     DUMP TRANSFER UTILITY                       ***\n=======================================================================\nB                  CLIST FOR INVOKING ISPF BROWSE FROM EITHER\n                   READY MODE OR AN ISPF ENVIORNMENT.\nE                  CLIST FOR INVOKING ISPF 'EDIT' FROM EITHER\n                   READY MODE OR AN ISPF ENVIRONMENT\nJULDATE            INNER CLIST FOR EXTRACTING TIME/DATE/DAY OF WEEK\n            ===>   (THIS CLIST CAN BE USED AS A GENERAL DATE ROUTINE)\nMAKEDAY            CLIST TO INITIALIZE DUMP TRANSFER PDS\nXFERJOB            JOB TO TRANSFER SYSTEM DUMP DATASET TO TAPE\nXFERINST           HINTS ON INSTALLATION OF THE DUMP TRANSFER UTILITY\nXFERUTIL           TSO COMMAND SUBROUTINE TO DETERMINE DUMP DATASET\n                   VOLUME SERIAL.\nXFERVOL            SUBROUTINE OF XFERUTIL TO DETERMINE VOLUME SERIAL #\nXFERWTO            PROGRAM TO ISSUE WTO FROM SYSIN (USED WITH CLISTS)\nXFER1              CLIST INVOKED UNDER TMP IN BATCH TO UPDATE XFER PDS\nXFER2              CLIST INVOKED UNDER TMP IN BATCH TO UPDATE XFER PDS\nXIX                CLIST TO INQUIRE INTO THE DUMP TITLE DATABASE\nXIXHELP            HELP MEMBER FOR XIX CLIST\n=======================================================================\n***                  TSO COMMANDS AND UTILITIES                     ***\n=======================================================================\nASID               COMMAND TO PRINT ADDRESS SPACE DATA\n                   CONVERTED TO WORK IN 31BIT MODE UNDER MVS/XA\n                   (WORKS ON NON-XA SYSTEMS TOO,IF VARIABLE SET)\nASHELP             HELP TEXT FOR THE 'ASID' COMMAND\nCLR3270            COMMAND TO CLEAR SCREEN OF 3270 TERMINAL. CHECKS\n                   FOR SESSION MANAGER ACTIVE AND RETURNS NULL STRING\n                   TO AVOID FLICKER.\nCLRHELP            HELP TEXT FOR THE 'CLR3270' COMMAND\nHMDCHRON           TIME OF DAY UTILITY - CONVERT TIME-OF-DAY\nJULGREG            JULIAN-GREGORIAN AND VICE-VERSA CONVERSION\n                   (SUBROUTINE OF HMDCHRON)\nHTIME              TSO COMMAND TO FORMAT THE DATE AND TIME OF DAY\n                   (CALLS HMDCHRON AS SUBROUTINE)\nPDFINIT            PROGRAM FOR ALLOCATING THE \"ISPF\" PROFILE DATASET\n                   AND OPTIONALLY INVOKING EITHER A COMMAND OR\n                   \"USERID.PROFILE.CLIST\" UPON LOGON. CAN BE SET UP\n                   SIMILIAR TO VM PROFILE EXEC INVOCATION.\nPDFHELP            HELP TEXT FOR THE 'PDFINIT' COMMAND\nSM                 COMMAND TO TURN SESSION MANAGER ON/OFF. WORKS IN\n                   MVX/XA MODE WHERE SESSION MANAGER CONTROL BLOCKS\n                   ARE MOVED 'ABOVE THE LINE'.\n=======================================================================\n***                  MACROS AND SUBROUTINES                         ***\n=======================================================================\nEPUTL              PUTLINE SUBROUTINE TO ACCEPT PARM LIST\n                   \"ABOVE THE LINE\"\nAPUT               MACRO TO INVOKE 'EPUTL' INSTEAD OF TPUT\n-------------------------------------------------------------------\nCALL#              INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nDATA#                 \"        \"         \"      \"  \"   \"    \"\nEND#                  \"        \"         \"      \"  \"   \"    \"\nENDDATA#              \"        \"         \"      \"  \"   \"    \"\nENTRE#                \"        \"         \"      \"  \"   \"    \"\nEXIT#                 \"        \"         \"      \"  \"   \"    \"\nIEXIT#                \"        \"         \"      \"  \"   \"    \"\nINIT#                 \"        \"         \"      \"  \"   \"    \"\n---------------------------------------------------------------------\nINUSE              INNER MACRO FOR TSOENTER/TSOLEAVE/SETREG/EOJ\nLUSE                 \"    \"     \"     \"       \"\nLDROP                \"    \"     \"     \"       \"\nCSPL               INNER MACRO FOR TSOENTER/TSOLEAVE\nIOPL                 \"    \"     \"     \"       \"\nCPPL                 \"    \"     \"     \"       \"\nTSOENTER           MACRO TO SET UP COMMAND PROCESSOR ENVIRONMENT\nTSOLEAVE           MACRO TO RETURN TO TMP (USED W/TSOENTER)\nSETREG             ENTRY SETUP MACRO  - NON/TSO ENVIORNMENT\nEOJ                EXIT  RETURN MACRO - NON/TSO ENVIORNMENT\n---------------------------------------------------------------------\nXABSM              BRANCH AND SET MODE MACRO FOR MVS/XA 31BIT CODING\n=======================================================================\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE119": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x007\\x01\\x19!O\\x01\\x19!O\\x153\\x00\\xa5\\x00\\xa5\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:33:37", "lines": 165, "newlines": 165, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 119 IS FROM MR HOWARD DEAN, FORMERLY OF SYNTEX, AND       *   FILE 119\n//*           CONTAINS SEVERAL OF THEIR UTILITIES AND PROGRAMS.     *   FILE 119\n//*                                                                 *   FILE 119\n//*       Further support:  Sam Golob                               *   FILE 119\n//*                 email:  sbgolob@cbttape.org                     *   FILE 119\n//*                                                                 *   FILE 119\n//*       Please note that File 136, also from Howard Dean, is      *   FILE 119\n//*       of a later date than this file, so File 136 should        *   FILE 119\n//*       also be consulted before installing anything from         *   FILE 119\n//*       this file, just to check that there isn't something       *   FILE 119\n//*       newer.  (SG)                                              *   FILE 119\n//*                                                                 *   FILE 119\n//*       Members in this file which have corresponding members     *   FILE 119\n//*       in CBT File 136 are:                                      *   FILE 119\n//*                                                                 *   FILE 119\n//*       APUT ASID CPPL CSPL EPUTL EPUTL$ EPUTLO HMDCHRON          *   FILE 119\n//*       HTIME INUSE IOPL JULGREG LDROP LUSE PDFINIT REGS          *   FILE 119\n//*       TSOENTER TSOLEAVE XABSM                                   *   FILE 119\n//*                                                                 *   FILE 119\n//*           ==================================================    *   FILE 119\n//*                       STARTED TASK ACCOUNTING AND               *   FILE 119\n//*                       JES2 CONTROL CARDS IN STARTED             *   FILE 119\n//*                       TASKS                                     *   FILE 119\n//*           ==================================================    *   FILE 119\n//*           JOBNAME     FRONT END TO 'STARTED TASK                *   FILE 119\n//*                       CONTROL' FOR ADDING JOB                   *   FILE 119\n//*                       ACCOUNTING AND JES2 CONTROL CARDS         *   FILE 119\n//*                       * THIS CODE IS ON FILE 426 OF THE         *   FILE 119\n//*                       CBT MODS TAPE *                           *   FILE 119\n//*           LM00038     PART 1 LOCAL MODIFICATION FOR             *   FILE 119\n//*                       STARTED TASK ACCOUNTING                   *   FILE 119\n//*           LM00039     PART 2 LOCAL MODIFICATION FOR             *   FILE 119\n//*                       STARTED TASK ACCOUNTING                   *   FILE 119\n//*           STCADOC     FORMAT OF 'SYS3.STCACCT' MEMBERS          *   FILE 119\n//*           X1          EXAMPLE OF STC ACCOUNTING (STARTS)        *   FILE 119\n//*           ==================================================    *   FILE 119\n//*                       IEFDB401 AND JES2 USER EXIT 6             *   FILE 119\n//*           ==================================================    *   FILE 119\n//*           DYNANAME    SAMPLE DYNAMIC UNIT NAME INPUT            *   FILE 119\n//*                       FOR DYNAMASK                              *   FILE 119\n//*           DYNAJOB     DYNAMASK CATALOGED PROCEDURE              *   FILE 119\n//*           IEFDB401    DYNAMIC ALLOCATION EXIT TO                *   FILE 119\n//*                       SUPPORT DYNAMIC UNIT NAMES                *   FILE 119\n//*           JESUX006    JES2 USER EXIT TO SUPPORT DYNAMIC         *   FILE 119\n//*                       UNIT NAMES                                *   FILE 119\n//*           UNITDOC     DOCUMENTATION AND JUSTIFICATION           *   FILE 119\n//*                       FOR DYNAMIC UNIT NAME                     *   FILE 119\n//*                       MODIFICATION.                             *   FILE 119\n//*           ==================================================    *   FILE 119\n//*                       DUMP TRANSFER UTILITY                     *   FILE 119\n//*           ==================================================    *   FILE 119\n//*           B           CLIST FOR INVOKING ISPF BROWSE            *   FILE 119\n//*                       FROM EITHER READY MODE OR AN ISPF         *   FILE 119\n//*                       ENVIRONMENT.                              *   FILE 119\n//*           E           CLIST FOR INVOKING ISPF 'EDIT'            *   FILE 119\n//*                       FROM EITHER READY MODE OR AN ISPF         *   FILE 119\n//*                       ENVIRONMENT                               *   FILE 119\n//*           JULDATE     INNER CLIST FOR EXTRACTING                *   FILE 119\n//*                       TIME/DATE/DAY OF WEEK                     *   FILE 119\n//*                       ===>   (THIS CLIST CAN BE USED AS         *   FILE 119\n//*                       A GENERAL DATE ROUTINE)                   *   FILE 119\n//*           MAKEDAY     CLIST TO INITIALIZE DUMP TRANSFER         *   FILE 119\n//*                       PDS                                       *   FILE 119\n//*           XFERJOB     JOB TO TRANSFER SYSTEM DUMP               *   FILE 119\n//*                       DATASET TO TAPE                           *   FILE 119\n//*           XFERINST    HINTS ON INSTALLATION OF THE DUMP         *   FILE 119\n//*                       TRANSFER UTILITY                          *   FILE 119\n//*           XFERUTIL    TSO COMMAND SUBROUTINE TO                 *   FILE 119\n//*                       DETERMINE DUMP DATASET VOLUME             *   FILE 119\n//*                       SERIAL.                                   *   FILE 119\n//*           XFERVOL     SUBROUTINE OF XFERUTIL TO                 *   FILE 119\n//*                       DETERMINE VOLUME SERIAL #                 *   FILE 119\n//*           XFERWTO     PROGRAM TO ISSUE WTO FROM SYSIN           *   FILE 119\n//*                       (USED WITH CLISTS)                        *   FILE 119\n//*           XFER1       CLIST INVOKED UNDER TMP IN BATCH          *   FILE 119\n//*                       TO UPDATE XFER PDS                        *   FILE 119\n//*           XFER2       CLIST INVOKED UNDER TMP IN BATCH          *   FILE 119\n//*                       TO UPDATE XFER PDS                        *   FILE 119\n//*           XIX         CLIST TO INQUIRE INTO THE DUMP            *   FILE 119\n//*                       TITLE DATABASE                            *   FILE 119\n//*           XIXHELP     HELP MEMBER FOR XIX CLIST                 *   FILE 119\n//*           ==================================================    *   FILE 119\n//*                       TSO COMMANDS AND UTILITIES                *   FILE 119\n//*           ==================================================    *   FILE 119\n//*           ASID        COMMAND TO PRINT ADDRESS SPACE            *   FILE 119\n//*                       DATA CONVERTED TO WORK IN 31 BIT          *   FILE 119\n//*                       MODE UNDER MVS/XA (WORKS ON               *   FILE 119\n//*                       NON-XA SYSTEMS TOO, IF VARIABLE           *   FILE 119\n//*                       SET)                                      *   FILE 119\n//*           ASHELP      HELP TEXT FOR THE 'ASID' COMMAND          *   FILE 119\n//*           CLR3270     COMMAND TO CLEAR SCREEN OF 3270           *   FILE 119\n//*                       TERMINAL. CHECKS FOR SESSION              *   FILE 119\n//*                       MANAGER ACTIVE AND RETURNS NULL           *   FILE 119\n//*                       STRING TO AVOID FLICKER.                  *   FILE 119\n//*                       (Fixed by William Smith to work           *   FILE 119\n//*                       properly under more adverse conditions.)  *   FILE 119\n//*           CLRHELP     HELP TEXT FOR THE 'CLR3270'               *   FILE 119\n//*                       COMMAND                                   *   FILE 119\n//*           HMDCHRON    TIME OF DAY UTILITY - CONVERT             *   FILE 119\n//*                       TIME-OF-DAY                               *   FILE 119\n//*           JULGREG     JULIAN-GREGORIAN AND VICE-VERSA           *   FILE 119\n//*                       CONVERSION (SUBROUTINE OF                 *   FILE 119\n//*                       HMDCHRON)                                 *   FILE 119\n//*           HTIME       TSO COMMAND TO FORMAT THE DATE            *   FILE 119\n//*                       AND TIME OF DAY (CALLS HMDCHRON           *   FILE 119\n//*                       AS SUBROUTINE)                            *   FILE 119\n//*           PDFINIT     PROGRAM FOR ALLOCATING THE \"ISPF\"         *   FILE 119\n//*                       PROFILE DATASET AND OPTIONALLY            *   FILE 119\n//*                       INVOKING EITHER A COMMAND OR              *   FILE 119\n//*                       \"USERID.PROFILE.CLIST\" UPON               *   FILE 119\n//*                       LOGON. CAN BE SET UP SIMILIAR TO          *   FILE 119\n//*                       VM PROFILE EXEC INVOCATION.               *   FILE 119\n//*           PDFHELP     HELP TEXT FOR THE 'PDFINIT'               *   FILE 119\n//*                       COMMAND                                   *   FILE 119\n//*           SM          COMMAND TO TURN SESSION MANAGER           *   FILE 119\n//*                       ON/OFF. WORKS IN MVX/XA MODE              *   FILE 119\n//*                       WHERE SESSION MANAGER CONTROL             *   FILE 119\n//*                       BLOCKS ARE MOVED 'ABOVE THE               *   FILE 119\n//*                       LINE'.  (SM tested to run on z/OS 2.2. )  *   FILE 119\n//*           ==================================================    *   FILE 119\n//*                       MACROS AND SUBROUTINES                    *   FILE 119\n//*           ==================================================    *   FILE 119\n//*           EPUTL       PUTLINE SUBROUTINE TO ACCEPT PARM         *   FILE 119\n//*                       LIST \"ABOVE THE LINE\"                     *   FILE 119\n//*                       (Cleaned up a bit by Sam Golob)           *   FILE 119\n//*           APUT        MACRO TO INVOKE 'EPUTL' INSTEAD           *   FILE 119\n//*                       OF TPUT                                   *   FILE 119\n//*           --------------------------------------------------    *   FILE 119\n//*           CALL#       INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           DATA#       INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           END#        INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           ENDDATA#    INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           ENTRE#      INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           EXIT#       INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           IEXIT#      INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           INIT#       INTERNAL STRUCTURED MACROS USED           *   FILE 119\n//*                       BY XFER UTILITY                           *   FILE 119\n//*           --------------------------------------------------    *   FILE 119\n//*           INUSE       INNER MACRO FOR                           *   FILE 119\n//*                       TSOENTER/TSOLEAVE/SETREG/EOJ              *   FILE 119\n//*           LUSE        INNER MACRO FOR                           *   FILE 119\n//*                       TSOENTER/TSOLEAVE/SETREG/EOJ              *   FILE 119\n//*           LDROP       INNER MACRO FOR                           *   FILE 119\n//*                       TSOENTER/TSOLEAVE/SETREG/EOJ              *   FILE 119\n//*           CSPL        INNER MACRO FOR TSOENTER/TSOLEAVE         *   FILE 119\n//*           IOPL        INNER MACRO FOR TSOENTER/TSOLEAVE         *   FILE 119\n//*           CPPL        INNER MACRO FOR TSOENTER/TSOLEAVE         *   FILE 119\n//*           TSOENTER    MACRO TO SET UP COMMAND PROCESSOR         *   FILE 119\n//*                       ENVIRONMENT                               *   FILE 119\n//*           TSOLEAVE    MACRO TO RETURN TO TMP (USED              *   FILE 119\n//*                       W/TSOENTER)                               *   FILE 119\n//*           SETREG      ENTRY SETUP MACRO  - NON/TSO              *   FILE 119\n//*                       ENVIRONMENT                               *   FILE 119\n//*           EOJ         EXIT  RETURN MACRO - NON/TSO              *   FILE 119\n//*                       ENVIRONMENT                               *   FILE 119\n//*           XABSM       BRANCH AND SET MODE MACRO FOR             *   FILE 119\n//*                       MVS/XA 31 BIT CODING                      *   FILE 119\n//*                                                                 *   FILE 119\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APUT": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x85\\x00\\x85\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 133, "newlines": 133, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         AGO   .AMEND\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         AGO   .AMEND\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASHELP": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00G\\x00G\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "HMDEAN"}, "text": ")F FUNCTION -\n  THE ASID COMMAND DISPLAYS INFORMATION ON THE ADDRESS SPACES.\n)X SYNTAX -\n         ASID    'ASID#'/*  STC/JOBS/TS/ALL HOLES GROUP('N1') PROCNAME\n                 PERIOD('N2') DOMAIN('N3') IN/OUT/BOTH COMMAND\n  REQUIRED - NONE\n  DEFAULTS - ASID ALL,BOTH\n  ALIAS    - AS\n  NOTE     - ASID OUTPUT HAS THE FOLLOWING FORMAT :\nID  DP JOB  STEP  FLAGS CPUTIME REAL SWPN  G/P/D EXCPS TRC SRC  SC\nWHERE\n        ID - ASID NUMBER\n        DP - DISPATCHING PRIORITY\n       JOB - STC / JOB / TSU\n      STEP - STEP NAME / PROCEDURE NAME / COMMAND NAME\n     FLAGS - XXXYY\n       XXX - APG - AUTOMATIC-PRIORITY-GROUP APPLIES\n             AXS - AUX SHORTAGE FORCED SWAP\n             ENQ - TEMPORARILY NON-SWAPPABLE DUE TO ENQ\n             GOB - CURRENTLY CHANGING STATUS\n             GOI - IN PROCESS OF BEING SWAPPED IN\n             GOO - IN PROCESS OF BEING SWAPPED OUT\n             IN  - IN CORE, SWAPPED IN (DEFAULT IF NONE OF THE BELOW)\n             LSW - LOGICALLY SWAPPED\n             NSW - NON-SWAPPABLE\n             OUT - SWAPPED OUT\n             PVL - PRIVILEDGED (NON-SWAPPABLE EXCEPT FOR LONG WAIT)\n             RPG - RPGNS ARE PRESENT\n        YY - CP  - SIGINIFICANT CPU USER (SET BY IRARMCPM)\n             LW  - EXPLICIT LONG WAIT\n             MW  - LONG WAIT STATUS DETECTED BY MSO (MS6)\n             NW  - NON-SWAPPABLE WAIT\n             OW  - OUTPUT TERMINAL WAIT\n             TW  - TERMINAL WAIT\n   CPUTIME - STEP CPU TIME IN HOURS:MINUTES:SECONDS\n      REAL - AMOUNT OF REAL CORE AT LAST PAGE-IN\n      SWPN - WORKING SET SIZE AT LAST SWAPIN\n     G/P/D - PERFORMANCE GROUP/PERFORMANCE GROUP PERIOD/DOMAIN\n     EXCPS - NUMBER OF EXCPS ACCUMALATED DURING SESSION\n       TRC - NUMBER OF TRANSACTIONS DURING SESSION\n       SRC - SWAP OUT REASON CODES\n             ASS - AUXILIARY STORAGE SHORTAGE\n             DW  - DETECTED WAIT\n             EE  - ENQ EXCHANGE\n             ERV - EXCHANGE OF RECOMMENDATION VALUE\n             ITW - INPUT TERMINAL WAIT\n             LW  - LONGWAIT\n             OTW - OUTPUT TERMINAL WAIT\n             RS  - REQUESTED SWAP\n             RSS - REAL PAGEABLE STORAGE SHORTAGE\n             U   - UNILATERAL\n        SC - NUMBER OF SWAPS FOR CURRENT TRANSACTION\n)O OPERANDS -\n  'ASID#'      - ADDRESS SPACE IDENTIFICATION NUMBER.  AN ASTERISK (*)\n                 INDICATES CURRENT TSO USER.\n))STC          - DISPLAY STARTED OR SYSTEM TASKS.\n))JOBS         - DISPLAY JOBS ON JES INITIATORS.\n))TS           - DISPLAY TSO USERS.\n))PROCNAME     - DISPLAY JOB PROCEDURE NAMES.\n))COMMAND      - DISPLAY TSO USER COMMAND NAME.\n))ALL          - PERFORM SYSTEM, INITIATOR AND TSO FUNCTIONS.\n))HOLES        - DISPLAY ASIDS WITHOUT JOBNAMES.\n))GROUP('N1')  - DISPLAY ASIDS IN A PARTICULAR PERFORMANCE GROUP.\n        'N1'   - PERFORMANCE GROUP NUMBER FROM 0 TO 99.\n))PERIOD('N2') - DISPLAY ASIDS IN A PARTICULAR PERIOD.\n         'N2'  - PERIOD RANGES FROM 0 TO 9.\n))DOMAIN('N3') - DISPLAY ASIDS IN A PARTICULAR DOMAIN.\n         'N3'  - DOMAIN RANGES FROM 0 TO 99.\n))IN           - DISPLAY ASIDS IN CORE.\n))OUT          - DISPLAY ASIDS OUT OF CORE.\n))BOTH         - DISPLAY ASIDS BOTH IN AND OUT OF CORE.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASID": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x03B\\x03B\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 834, "newlines": 834, "modlines": 0, "user": "HMDEAN"}, "text": "ASID    TITLE 'ASID COMMAND PROCESSOR - DISPLAY ACTIVE ADDRESS SPACES'\n        LCLB  &XA             XA ASSEMBLY SWITCH            *HMD 10/85*\n&XA     SETB  1               SET TO ZERO IF NON/XA SYSTEM  *HMD 10/85*\n        SPACE 2                                             *HMD 10/85*\n        AIF   (NOT &XA).X001                                *HMD 10/85*\nASID    AMODE 31                                            *HMD 09/85*\nASID    RMODE ANY             RESIDE ABOVE THE LINE         *HMD 09/85*\n.X001   ANOP                                                *HMD 10/85*\nASID    CSECT\n*\n*   ASID WAS WRITTEN BY\n*                             R P WENZEL\n*                             OPTIMUM SYSTEMS INCORPORATED\n*                             JUNE 2, 1976.\n*\n*   WITH MODIFICATIONS BY\n*                             J R PASEUR\n*                             OPTIMUM SYSTEMS INCORPORATED\n*\n*   MORE MODIFICATIONS BY\n*                             R P WENZEL\n*                             U S POSTAL SERVICE\n*                             FEBRUARY 1977.\n*   MORE MODIFICATIONS BY\n*                             R P WENZEL\n*                             MEMOREX CORPORATION\n*                             APRIL 1979.\n*   MORE MODIFICATIONS FOR SE-II\n*                             R P WENZEL\n*                             ITEL CORPORATION\n*                             APRIL 1981.\n*\n*   MORE MODIFICATIONS FOR SP1.3.1\n*                             R P WENZEL\n*                             AMERICAN PRESIDENT LINES\n*                             MARCH 1984.\n*\n*   MORE MODIFICATIONS FOR SP2.1.1  (XA YOU KNOW)\n*                             R P WENZEL\n*                             AMERICAN PRESIDENT LINES\n*                             DEC   1984.\n*\n*   MORE MODIFICATIONS FOR SP2.1.2  (XA OF COURSE)          *HMD 10/85*\n*                             H M DEAN                      *HMD 10/85*\n*                             SYNTEX U.S.A.                 *HMD 10/85*\n*                             OCT   1985                    *HMD 10/85*\n*    AND OTHERS. . .\n*\n         EJECT                                              *HMD 10/85*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT                                              *HMD 10/85*\nASID     CSECT\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         SPLEVEL SET=2                    INDICATE XA MODE  *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         SAVE  (14,12),,ASID_&SYSDATE._&SYSTIME\n         LR    R12,R15                    SET UP PROGRAM BASE\n         USING ASID,R12\n         USING ASCB,R5\n*\n         BAL   R14,BEGIN\n*\n         B     PRSE\n*\nRETURN   LR    R1,R13                   DYNAMIC AREA ADDRESS IN R1\n         LA    R0,LDYNAMIC              SIZE OF AREA\n         L     R13,4(R13)               PREVIOUS SAVE AREA\n         FREEMAIN RU,LV=(0),A=(1),SP=0  FREE STORAGE        *HMD 10/85*\n         RETURN (14,12),T,RC=0\n EJECT\n*  SUBROUTINE TO GET READY SET AND GO\n*\nBEGIN    LR    R10,R1        SAVE R1\n         AIF   (&XA).X005                                   *HMD 10/85*\n         GETMAIN R,LV=LDYNAMIC          GET CORE\n         AGO   .X006                                        *HMD 10/85*\n.X005    ANOP                                               *HMD 10/85*\n         GETMAIN RU,LV=LDYNAMIC,LOC=RES,SP=0                *HMD 10/85*\n.X006    ANOP                                               *HMD 10/85*\n         LR    R11,R1\n         USING WORKAREA,R11             SET UP ADDRESSABILITY\n         LA    R9,SAVEAREA              CHAIN\n         ST    R13,SAVEAREA+4             SAVE\n         ST    R9,8(R13)                    AREAS\n         LR    R13,R9\n         MVI   LINE,C' '      BLANK LINE\n         MVC   LINE+1(79),LINE\n         MVC   CMPRGRP(2),=CL2'  '\n         MVI   CMPRPRD,C' '\n         MVC   CMPRDMN(2),=CL2'  '\n         MVI   ASIDFLAG,OFF   BLANK FLAG\n         MVI   SWGRP,OFF      BLANK SWITCH\n         MVI   SWPRD,OFF      BLANK SWITCH\n         MVI   SWDMN,OFF      BLANK SWITCH\n         MVI   SWCMD,OFF      BLANK SWITCH                      DLW\n         MVI   SWPRC,OFF      BLANK SWITCH                      RPW\n         L     R2,CVTPTR      CVT ->\n         L     R2,CVTASVT-CVTMAP(R2)                        *HMD 10/85*\n*                             ASID VECTOR TABLE             *HMD 10/85*\n         LA    R2,ASVTMAXU-ASVT(R2)                         *HMD 10/85*\n*                             ADDR OF ASVTMAXU\n         L     R3,0(R2)       ASVTMAXU\n         ST    R3,ASCBMAX     SAVE MAX ASCB'S\n         LA    R2,ASVTFRST-ASVTMAXU(R2)                     *HMD 10/85*\n*                             ADDRESS OF FIRST ASCB         *HMD 10/85*\n         ST    R2,ASCBONE     FIRST ASCB\n         AIF   (&XA).X008                                   *HMD 10/85*\n         BR    R14\n         AGO   .X009                                        *HMD 10/85*\n.X008    ANOP                                               *HMD 10/85*\n         BSM   R0,R14         RETURN TO CALLER              *HMD 10/85*\n.X009    ANOP                                               *HMD 10/85*\n EJECT\n*  SUBROUTINE TO FORMAT ASID NUMBER\n*                       DISPATCHING PRIORITY\n*                       OUCB STATUS FLAGS\n*                       STEP TIME\n*                       AMOUNT OF REAL STORAGE\n*                       CORE AT LAST SWAP IN\n*                       PERFORMANCE GROUP, PERIOD AND DOMAIN\n*                       SWAP REASON AND COUNT\n*                       TRANSACTION COUNT\n*                       NUMBER OF EXCPS\n*\nCOMN     CVD   R3,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEASID,CHAR+5 MOVE THREE CHARS TO LINE\n         USING OUCB,R7\n         L     R7,ASCBOUCB\nCOMNFRST SR    R8,R8          CLEAR R8\n         IC    R8,OUCBNDP     NEW ASCB DISPATCHING PRIORITY\n         SRL   R8,4           LEFT CHAR\n         AH    R8,=H'240'     ADD X'F0'\n         CH    R8,=H'249'     LESS THAN X'F9'\n         BH    COMNFST1       NO\n         STC   R8,LINEDPRT    SAVE CHAR\n         B     COMNSCND       RETURN\nCOMNFST1 SH    R8,=H'57'      SUB X'39'\n         STC   R8,LINEDPRT    SAVE CHAR\nCOMNSCND SR    R8,R8          CLEAR R8\n         IC    R8,ASCBDP      DPRTY\n         LA    R9,240         X'F0'\n         OR    R8,R9          AND REGS.\n         CH    R8,=H'249'     LESS THAN X'F9'\n         BH    COMSCND1       NO\n         STC   R8,LINEDPRT+1  SAVE CHAR\n         B     COMN1          CONTINUE\nCOMSCND1 SH    R8,=H'57'      SUB X'39'\n         STC   R8,LINEDPRT+1  SAVE CHAR\n EJECT\nCOMN1    MVC   LINESTAT,=C'FAIL '  DEFAULT STATUS - FAILED\n         TM    ASCBDSP1,ASCBFAIL   TEST FOR FAILED ADDRSPC\n         BO    COMN3               BR IF ADDRESS SPACE DEAD\n         MVC   LINESTAT,=C'IN   '  DEFAULT - WLM ALGORITHM IN EFFECT\n         LA    R8,COMNMVE1    MOVE STATEMENT\nTESTOUT  LA    R9,=C'LSW'          LOGICALLY SWAPPED\n         TM    OUCBQFL,OUCBLSW\n         BOR   R8\n         LA    R9,=C'OUT'          SWAPPED OUT\n         TM    ASCBRCTF,ASCBOUT    TEST ASCB FOR THIS\n         BOR   R8\n         LA    R9,=C'ENQ'          NONSWAPPABLE DUE TO ENQ\n         TM    OUCBSFL,OUCBENQ\n         BOR   R8\n         LA    R9,=C'NSW'          NON-SWAPPABLE\n         TM    OUCBSFL,OUCBNSW\n         BOR   R8\n         LA    R9,=C'PVL'          PRIVELEGED STATUS\n         TM    OUCBSFL,OUCBPVL\n         BOR   R8\n         LA    R9,=C'AXS'          AUX SHORTAGE FORCED SWAP\n         TM    OUCBYFL,OUCBAXS\n         BOR   R8\n         LA    R9,=C'GOO'          GOING OUT\n         TM    OUCBQFL,OUCBGOO\n         BOR   R8\n         LA    R9,=C'GOI'          GOING IN\n         TM    OUCBQFL,OUCBGOI\n         BOR   R8\n         LA    R9,=C'GOB'          CHANGING STATUS\n         TM    OUCBQFL,OUCBGOB\n         BOR   R8\n         LA    R9,=C'APG'          APG ALGORITM APPLICABLE\n         TM    OUCBAFL,OUCBAPG\n         BOR   R8\n         LA    R9,=C'RPG'          RPGNS ARE PRESENT\n         TM    OUCBAFL,OUCBREPT\n         BOR   R8\n         B     COMN2               ACCEPT DEFAULT STATUS\nCOMNMVE1 MVC   LINESTA1,0(R9) MOVE COMN1\n         SPACE 3\nCOMN2    LA    R8,COMNMVE2    MOVE COMMENT\n         LA    R9,=C'TW'           TERMINAL WAIT\n         TM    OUCBEFL,OUCBTRM\n         BOR   R8\n         LA    R9,=C'MW'           MSO-DETECTED WAIT\n         TM    OUCBEFL,OUCBMWT\n         BOR   R8\n         LA    R9,=C'LW'           LONG WAIT\n         TM    OUCBEFL,OUCBLWT\n         BOR   R8\n         LA    R9,=C'OW'           OUTPUT WAIT\n         TM    OUCBEFL,OUCBOWT\n         BOR   R8\n         LA    R9,=C'NW'           NON-SWAPPABLE WAIT\n         TM    OUCBAFL,OUCBNWT\n         BOR   R8\n         LA    R9,=C'CP'           SIGNIFICANT CPU USER\n         TM    OUCBAFL,OUCBCPL\n         BOR   R8\n         B     COMN3\nCOMNMVE2 MVC   LINESTA2,0(R9) MOVE COMN2\n EJECT\nCOMN3    LM    R8,R9,ASCBEJST           PICK UP CPU TIME\n         SRDL  R8,12                    MOVE TO ODD REG\n         D     R8,=A(1000000)\n         BAL   R7,TIMECNVT    CHANGE SEC. TO HH:MM:SS\n         SPACE 3\n         LH    R8,ASCBFMCT    ALLOCATED PAGE FRAME COUNT\n         SLL   R8,2           MULT. BY 4\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         C     R8,=F'9999'    GREATER THAN 9,999\n         BH    COMN3A         YES, CHANGE TO M\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEFMCT,CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEFMCT+4,C'K' MOVE C'K' TO PRINT LINE\n         B     COMN3B         RETURN\nCOMN3A   AH    R8,=H'512'     ADD .5M FOR ROUND OFF\n         SRL   R8,10          DIVIDE BY 1024\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEFMCT(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEFMCT+4,C'M' MOVE M TO LINE\n         SPACE 3\nCOMN3B   L     R7,ASCBOUCB\n         USING OUCB,R7\n         LH    R8,OUCBWSS     WORKING SET SIZE AT SWAP-IN\n         SLL   R8,2           MULT. BY 4\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEWSS,CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEWSS+4,C'K' MOVE C'K' TO PRINT LINE\n         SPACE 3\n         SR    R8,R8          CLEAR REG. 8\n         LH    R8,OUCBNPG     NEW PERFORMANCE GROUP NUMBER\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINENPG,CHAR+6 MOVE TWO CHARS TO LINE\n         MVI   LINENPG+2,C'/' MOVE IN SLASH\n         SPACE 3\n         IC    R8,OUCBPGP     WMPGP OFFSET\n         AH    R8,=H'4'       ADD 4 TO OFFSET, WAS 0C, 1C, 2C ETC\n         SRL   R8,4           DIVIDE BY 16\n         STC   R8,LINEPGP     PERFORMANCE GROUP PERIOD\n         OI    LINEPGP,X'F0'  OR TO GET PRINTABLE CHAR\n         MVI   LINEPGP+1,C'/' MOVE IN SLASH\n         SPACE 3\n         SR    R8,R8          CLEAR REG. 8\n         IC    R8,OUCBDMN     DOMAIN NUMBER\n         CH    R8,=H'9'       DOMAIN NUMBER GREATER THAN 9\n         BH    COMN4          YES THERE ARE TWO CHARS\n         STC   R8,LINEDMN     STORE CHARACTER\n         OI    LINEDMN,X'F0'  MAKE NUMBER\n         B     COMN5          SKIP MOVING TWO CHARACTERS\nCOMN4    CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK2    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEDMN,CHAR+6 MOVE TWO CHARS TO LINE\n         SPACE 3\nCOMN5    SR    R8,R8          CLEAR REGISTER 8\n         IC    R8,OUCBSRC     SWAP REASON CODE\n         LTR   R8,R8          EQUAL TO ZERO?\n         BZ    COMN6          GO TO COMN6 AND FIND SWAP COUNT\n         SLL   R8,2           MULT. BY 4 FOR TABLE OFFSET\n         LA    R9,COMNTBLE    TABLE OF SWAP REASON CODES\n         AR    R9,R8          ADD OFFSET\n         MVC   LINESRC(3),0(R9) MOVE SWAP REASON CODE TO LINE\n         B     COMN6          SKIP COMNTBLE\n*                 0   1   2   3   4   5   6  7   8   9  10\nCOMNTBLE DC    C'    OTW/ITW/ LW/ASS/RSS/ DW/ RS/ EE/ERV/  U/'\n         SPACE 3\nCOMN6    LH    R8,OUCBSWC     SWAP COUNT FOR CURRENT TRANSACTION\n         LTR   R8,R8          EQUAL TO ZERO?\n         BZ    COMMTRC        GO GET TRANSACTION COUNT\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINESWC,CHAR+3 MOVE FIVE CHARS TO LINE\n         SPACE 3\nCOMMTRC  L     R7,ASCBOUXB\n         USING OUXB,R7\n         L     R8,OUXBTRC     TRANSACTION COUNT\n         LTR   R8,R8          EQUAL TO ZERO?\n         BZ    COMMOUCB       GO GET EXCP COUNT\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINETRC,CHAR+4 MOVE FOUR CHARS TO LINE\nCOMMOUCB L     R7,ASCBOUCB\n         USING OUCB,R7\n         L     R8,ASCBIOSC    SMF EXCP COUNT\n         LTR   R8,R8          EQUAL TO 0?\n         BZ    COMNRTN        RETURN\n         C     R8,=F'9999'    GREATER THAN 9,999\n         BH    COMMOUC1       YES, CHANGE TO K\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEEXCP,CHAR+3 MOVE FIVE CHARS TO LINE\n         B     COMNRTN        RETURN\nCOMMOUC1 AH    R8,=H'512'     ADD .5K FOR ROUND OFF\n         SRL   R8,10          DIVIDE BY 1024\n         C     R8,=F'9999'    GREATER THAN 9,999\n         BH    COMMOUC2       YES, CHANGE TO M\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEEXCP(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEEXCP+4,C'K' MOVE K TO LINE\n         B     COMNRTN        RETURN\nCOMMOUC2 AH    R8,=H'512'     ADD .5M FOR ROUND OFF\n         SRL   R8,10          DIVIDE BY 1024\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEEXCP(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEEXCP+4,C'M' MOVE M TO LINE\nCOMNRTN  EQU   *\n         BR    R15\n         DROP  R7\n EJECT\n*  SUBROUTINE TO FIND JOBS ON JES INITIATORS\n*\nINIT     MVC   HEADER,INITLINE MOVE INITLINE TO HEADER\n         MVI   HEADERSW,OFF   SET HEADERSW TO OFF\n         L     R2,ASCBONE     FIRST ASCB ->\n         LA    R3,0           SET R3 = 0\n         L     R4,ASCBMAX     MAX NO. OF ASCB\n         TM    ASIDFLAG,ON    WAS ASID=0\n         BZ    INITLOOP       YES\n         LH    R2,ASIDNMBR    NO, PICK UP ASID NUMBER\n         SLL   R2,2           MULT. BY 4\n         A     R2,ASCBONE     FIND CORRECT ASCB\n         LH    R3,ASIDNMBR    PICK UP ASID NUMBER\n         LA    R4,1           NULLIFY LOOP\nINITLOOP TM    0(R2),X'80'    ASID IN USE?\n         BO    INITINCR       NO\n         L     R5,0(R2)       BEGINNING OF ASCB\n         L     R6,ASCBJBNI    JOB NAME FOR INIT PGMS\n         LTR   R6,R6          ZERO?\n         BZ    INITINCR       YES\nINITOUT  MVC   LINEJOBN,0(R6) MOVE JOBNAME\n         MVC   LINESTEP,56(R6) MOVE STEPNAME\nINITPROC CLI   SWPRC,ON                                         RPW\n         BNE   INITNOPR                                         RPW\n         MVC   LINESTEP,24(R6) MOVE PROCNAME                    RPW\nINITNOPR BAL   R15,COMN       COMMON INFO\n         BAL   R7,PUTLINE\nINITINCR LA    R3,1(R3)       ADD ONE TO R3\n         LA    R2,4(R2)       NEXT ASCB ENTRY\n         BCT   R4,INITLOOP\n         BR    R14            RETURN\n EJECT\n*  SUBROUTINE TO PARSE INPUT AND TO PERFORM THE REQUESTS\n*\nPRSE     EQU   *\n         USING CPPL,R10\n*\n*        REMOVE THE * IN THE FOLLOWING 5 LINES OF CODE IF\n*        YOU WISH TO RESTRICT USE OF THIS COMMAND TO ONLY\n*        THOSE USERS WHO HAVE OPERATOR PRIVILEDGES\n*\n*        L     R8,CPPLPSCB\n*        USING PSCB,R8\n*        TM    PSCBATR1,PSCBCTRL USER HAVE OPERATOR PRIV.\n*        BZ    PRSEVLDT      TPUT MESSAGE AND QUIT\n*        DROP  R8\n         LA    R9,PPLADDR         ADDRESSABILITY FOR PPL\n         USING PPL,R9\n         MVC   PPLUPT,CPPLUPT           UPT\n         MVC   PPLECT,CPPLECT           ECT\n         LA    R3,ECB\n         ST    R3,PPLECB                ECB\n         L     R3,PCLADDR\n         ST    R3,PPLPCL                PCL\n         LA    R3,PDLADDR               PDL ADDRESS\n         ST    R3,PPLANS                ANSWER\n         MVC   PPLCBUF,CPPLCBUF         CBUF\n         LA    R1,PPLADDR               GET PARM LIST       *HMD 10/85*\n         LINK  EP=IKJPARS               CALL IKJPARS        *HMD 10/85*\n         LTR   R15,R15\n         BZ    PRSE1\n         APUT  PRSERM,40,RSA=WORK\n         B     RETURN\n         DROP  R9\n         DROP  R10\n EJECT\n*  ROUTINE FOR PARSING\nPRSE1    L     R10,PDLADDR\n         USING IKJPARMD,R10\nPRSECMD  CLC   COMMAND,=H'1'  WAS COMMAND SPECIFIED             DLW\n         BNE   PRSEPRC        NO                                DLW\n         MVI   SWCMD,ON       SET SWITCH                        DLW\nPRSEPRC  CLC   PROCNAME,=H'1'  WAS PROCNAME SPECIFIED           RPW\n         BNE   PRSEGRP        NO                                RPW\n         MVI   SWPRC,ON       SET SWITCH                        RPW\nPRSEGRP  CLC   GROUP,=H'1'    WAS GROUP SPECIFIED?\n         BNE   PRSEPRD        NO\n         MVI   SWGRP,ON       SET SWITCH\n         L     R3,GROUP#      GET ADDRESS OF GROUP NUMBER\n         LH    R4,GROUP#+4    LENGTH OF GROUP NUMBER\n         MVC   CMPRGRP+1(1),0(R3) GET ONE CHARACTER\n         CH    R4,=H'1'       WAS THERE ONLY ONE CHARACTER?\n         BE    PRSEPRD        YES, GO PARSE PERIOD\n         MVC   CMPRGRP(2),0(R3) NO MOVE BOTH CHARACTER\nPRSEPRD  CLC   PERIOD,=H'1'   WAS PERIOD SPECIFIED?\n         BNE   PRSEDMN        NO\n         MVI   SWPRD,ON       SET SWITCH\n         L     R3,PERIOD#     GET ADDRESS OF PERIOD NUMBER\n         MVC   CMPRPRD(1),0(R3) SAVE PERIOD NUMBER\nPRSEDMN  CLC   DOMAIN,=H'1'   WAS DOMAIN SPECIFIED\n         BNE   PRSEASID       NO\n         MVI   SWDMN,ON       SET SWITCH\n         L     R3,DOMAIN#     GET ADDRESS OF DOMAIN NUMBER\n         LH    R4,DOMAIN#+4   LENGTH OF DOMAIN NUMBER\n         MVC   CMPRDMN(1),0(R3) GET ONE CHARACTER\n         CH    R4,=H'1'       WAS THERE ONLY ONE CHARACTER?\n         BE    PRSEASID       YES, GO PARSE ASID\n         MVC   CMPRDMN+1(1),1(R3) NO MOVE SECOND CHARACTER\nPRSEASID L     R3,ASIDNO      ADDR OF ASIDNO\n         CLI   0(R3),C'*'     WANT ONLY CURRENT USER?\n         BNE   PRSEASLN       NO\n         L     R3,CVTPTR      CVT ->\n         L     R3,0(R3)       TCB CURRENT - OLD POINTER\n         L     R3,8(R3)       ASCB CURRENT - OLD POINTER\n         LH    R3,ASCBASID-ASCB(R3)      ASCBASID\n*                             GET ASID NUMBER               *HMD 10/85*\n         STH   R3,ASIDNMBR    SAVE ASID NUMBER\n         LA    R3,4           TSO TYPE NUMBER\n         STH   R3,TYPE        SAVE TYPE\n         B     PSRESTFL\n         SPACE 1\nPRSEASLN LH    R3,ASIDNO+4    LENGTH OF ASIDNO\n         BCTR  R3,0           DECREMENT BY 1\n         LA    R4,X'70'       LENGTH OF WORK - 1\n         OR    R3,R4          LENGTHS FOR PACK INSTR.\n         L     R4,ASIDNO      ADDR OF ASIDNO\n         EX    R3,PACK        PACK ASIDNO\n         CVB   R3,WORK        CONVERT ASID TO BINARY\n         C     R3,ASCBMAX     DOES ASIDNO EXISTS?\n         BH    PRSEMXER       NO SAY SO AND QUIT\n         STH   R3,ASIDNMBR    SAVE ASID NUMBER\n         LTR   R3,R3          ASIDNO = 0 ?\n         BZ    PRSEBRTB       YES GO TO PARSE BRANCH TABLE\nPSRESTFL MVI   ASIDFLAG,ON    NO TURN ASID FLAG ON\nPRSEBRTB XR    R3,R3          CLEAR IN CASE 31 BIT MODE     *HMD 10/85*\n         LH    R3,TYPE        PICK UP TYPE\n         SLL   R3,2           MULT. BY 4\n         B     *+0(R3)        BRANCH TABLE\n         B     PRSEALL        TYPE = 1\n         B     PRSESTRT       TYPE = 2\n         B     PRSEINIT       TYPE = 3\n         B     PRSETSO        TYPE = 4\nPRSEALL  BAL   R14,STRT\n         BAL   R14,INIT\n         BAL   R14,TSOJ\n         B     RETURN\nPRSETSO  BAL   R14,TSOJ\n         B     RETURN\nPRSEINIT BAL   R14,INIT\n         B     RETURN\nPRSESTRT BAL   R14,STRT\n         B     RETURN\n EJECT\nPRSEVLDT APUT  PRSEVLD,40,RSA=WORK\n         B     RETURN\n         SPACE 3\nPRSEMXER L     R3,ASCBMAX     MAX ASCB\n         MVC   LINE,PRSEMXTP\n         CVD   R3,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINE+27(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         LA    R3,LINE        SET UP FOR TPUT\n         APUT  (R3),80,RSA=WORK\n         B     RETURN\n         SPACE 3\nPACK     PACK  WORK,0(0,R4)\n*        DROP  R10\n*\nPRSERM   DC    CL40'PARSE ERROR'\nPRSEVLD  DC    CL40'COMMAND NOT AUTHORIZED FOR YOUR USE'\nPRSEMXTP DC    CL80'MAXIMUM NUMBER OF ASCBS IS'\n EJECT\n*  SUBROUTINE TO 1 LOOK FOR GROUPS, PERIODS, DOMAINS,\n*                  IN CORE USERS, OUT OF CORE USERS AND\n*                  HOLES IF REQUESTED,\n*                2 TEST IF APPROPRIATE HEADER HAS BEEN PRINTED,\n*                3 AND THEN PRINT CURRENT LINE\n*\nPUTLINE  EQU   *\nPUTGRP   TM    SWGRP,ON      LOOK FOR A GROUP\n         BNO   PUTPRD        NO\n         CLC   LINENPG(2),CMPRGRP IS THIS THE GROUP\n         BNE   PUTLINE2\nPUTPRD   TM    SWPRD,ON      LOOK FOR A PERIOD\n         BNO   PUTDMN        NO\n         CLC   LINEPGP(1),CMPRPRD IS THIS THE PERIOD\n         BNE   PUTLINE2\nPUTDMN   TM    SWDMN,ON      LOOK FOR A DOMAIN\n         BNO   PUTIN         NO\n         CLC   LINEDMN(2),CMPRDMN IS THIS THE DOMAIN\n         BNE   PUTLINE2\nPUTIN    CLC   REAL(2),=H'2' LOOK FOR IN CORE USERS\n         BNE   PUTOUT         NO\n         CLC   LINEFMCT+2(2),=C' 0'\n         BE    PUTLINE2\nPUTOUT   CLC   REAL(2),=H'3'  LOOK FOR OUT OF CORE USERS\n         BNE   PUTHOLE        NO\n         CLC   LINEFMCT+2(2),=C' 0'\n         BNE   PUTLINE2\nPUTHOLE  CLC   HOLES(2),=H'1' LOOK FOR HOLES ONLY\n         BNE   PUTHEAD        NO\n         CLC   LINEJOBN,=CL8' '\n         BNE   PUTLINE2\nPUTHEAD  TM    HEADERSW,ON    ALREADY TPUT HEADER\n         BO    PUTLINE1       YES SKIP\n         L     R6,CVTPTR      GET CVT ADDR.                 *HMD 10/85*\n         L     R6,CVTSMCA-CVTMAP(R6)                        *HMD 10/85*\n         MVC   HEADER+11(4),16(R6) SAVE IT IN THE HEADER\n         LA    R6,HEADER      ADDR OF HEADER\n         APUT  (R6),80,RSA=WORK\n         MVI   HEADERSW,ON    TURN HEADER SWITCH ON\nPUTLINE1 LA    R6,LINE        ADDR OF LINE FOR TPUT\n         APUT  (R6),80,RSA=WORK  OUTPUT LINE\nPUTLINE2 MVI   LINE,C' '      BLANK LINE\n         MVC   LINE+1(79),LINE\n         BR    7              RETURN\n EJECT\n*  SUBROUTINE TO FIND STARTED TASKS\n*\nSTRT     MVC   HEADER,STRTLINE MOVE STRTLINE TO HEADER\n         MVI   HEADERSW,OFF   SET HEADERSW TO OFF\n         L     R2,ASCBONE     FIRST ASCB ->\n         LA    R3,0           SET R3 = 0\n         L     R4,ASCBMAX     MAX NO. OF ASCB\n         TM    ASIDFLAG,ON    WAS ASID=0\n         BZ    STRTLOOP       YES\n         LH    R2,ASIDNMBR    NO, PICK UP ASID NUMBER\n         SLL   R2,2           MULT. BY 4\n         A     R2,ASCBONE     FIND CORRECT ASCB\n         LH    R3,ASIDNMBR    PICK UP ASID NUMBER\n         LA    R4,1           NULLIFY LOOP\nSTRTLOOP TM    0(R2),X'80'    ASID IN USE?\n         BO    STRTINCR       NO\n         L     R5,0(R2)       BEGINNING OF ASCB\n         L     R6,ASCBJBNI    JOB NAME FOR INIT PGMS\n         LTR   R6,R6          ZERO?\n         BNZ   STRTINCR       NO\n         L     R6,ASCBCSCB    ASCBCSCB ->\n         USING CSCB,R6\n         LTR   R6,R6          ZERO?\n         BZ    STRTOUT        YES SYSTEM TASK\n         TM    CHPKE,CHTSID   TSO JOB?\n         BO    STRTINCR       YES\n         DROP  R6\nSTRTOUT  L     R6,ASCBJBNS    JOB NAME FOR STARTED TASK\n         MVC   LINEJOBN,0(R6) MOVE JOBNAME\n         CLC   LINEJOBN(8),=C'*MASTER*' WAS JOBNAME *MASTER*?\n         BE    STRTOUT0       YES SKIP STEP NAME\n*        STEPNAME\n         MVC   LINESTEP(3),8(R6) MOVE ID  (FIRST 3 CHARS)\n         CLI   8(R6),C'*'\n         BNE   STRTOUT0\n         MVC   LINESTEP,8(R6) MOVE ID  (TASK'S STEPNAME)\nSTRTOUT0 BAL   R15,COMN\n         BAL   R7,PUTLINE\nSTRTINCR LA    R3,1(R3)       ADD ONE TO R3\n         LA    R2,4(R2)       NEXT ASCB ENTRY\n         BCT   R4,STRTLOOP\n         BR    R14            RETURN\n EJECT\n*  SUBROUTINE TO CONVERT TIME IN SEC TO HH:MM:SS.\n*        INPUT - R9=TIME IN SEC.\n*        OUTPUT - TIME IN 'LINEEJST'.\n*\nTIMECNVT MVC   LINEEJST,TIMECNST   SET DEFAULT LINEEJST\n         LTR   R9,R9          ANY SECONDS\n         BZ    TMECNV0        RETURN IF NO TIME\n         SR    R8,R8          ZERO FOR DIVIDE\n         D     R8,=F'3600'    GET HOURS IN R9\n         CVD   R9,WORK\n         UNPK  LINEEJST(2),WORK\n         OI    LINEEJST+1,X'F0'\n         LTR   R8,R8          ANY REMAINING SECONDS\n         BZ    TMECNV0        RETURN IF NO\n         LR    R9,R8          GET READY FOR DIVIDE\n         SR    R8,R8\n         D     R8,=F'60'      GET MINUTES IN R9\n         CVD   R9,WORK\n         UNPK  LINEEJST+3(2),WORK\n         OI    LINEEJST+4,X'F0'\n         CVD   R8,WORK        GET REMAINING SECONDS\n         UNPK  LINEEJST+6(2),WORK\n         OI    LINEEJST+7,X'F0'\nTMECNV0  CLC   LINEEJST(7),=C'00:00:0' CLEAN UP SOME\n         BNE   TMECNV1\n         MVC   LINEEJST(7),=C'       '\nTMECNV1  CLC   LINEEJST(6),=C'00:00:' CLEAN UP SOME MORE\n         BNE   TMECNV2\n         MVC   LINEEJST(6),=C'      '\nTMECNV2  CLC   LINEEJST(4),=C'00:0' CLEAN UP SOME MORE\n         BNE   TMECNV3\n         MVC   LINEEJST(4),=C'    '\nTMECNV3  CLC   LINEEJST(3),=C'00:' CLEAN UP SOME MORE\n         BNE   TMECNV4\n         MVC   LINEEJST(3),=C'   '\nTMECNV4  CLI   LINEEJST,C'0' CLEAN UP SOME MORE\n         BNER  R7              RETURN\n         MVI   LINEEJST,C' '\n         BR    R7             RETURN TO CALLER\n*\nTIMECNST DC    CL8'00:00:00'  DEFAULT TIME VALUE\n EJECT\n*  SUBROUTINE TO FIND TSO USERS\n*\nTSOJ     MVC   HEADER,TSOJLINE MOVE TSOJLINE TO HEADER\n         MVI   HEADERSW,OFF   SET HEADERSW TO OFF\n         L     R2,ASCBONE     FIRST ASCB ->\n         LA    R3,0           SET R3 = 0\n         L     R4,ASCBMAX     MAX NO. OF ASCB\n         TM    ASIDFLAG,ON    WAS ASID=0\n         BZ    TSOJLOOP       YES\n         LH    R2,ASIDNMBR    NO, PICK UP ASID NUMBER\n         SLL   R2,2           MULT. BY 4\n         A     R2,ASCBONE     FIND CORRECT ASCB\n         LH    R3,ASIDNMBR    PICK UP ASID NUMBER\n         LA    R4,1           NULLIFY LOOP\nTSOJLOOP TM    0(R2),X'80'    ASID IN USE?\n         BO    TSOJINCR       NO\n         L     R5,0(R2)       BEGINNING OF ASCB\n         L     R6,ASCBJBNI    JOB NAME FOR INIT PGMS\n         LTR   R6,R6          ZERO?\n         BNZ   TSOJINCR       NO\n         L     R6,ASCBCSCB    ASCBCSCB ->\n         USING CSCB,R6\n         LTR   R6,R6          ZERO?\n         BZ    TSOJINCR       YES SYSTEM TASK\n         TM    CHPKE,CHINITID INTIT?\n         BO    TSOJINCR       YES\n         TM    CHPKE,CHTSID   TSO JOB?\n         BNO   TSOJINCR       NO\nTSOJOUT  MVC   LINEJOBN,CHKEY MOVE JOBNAME\n         MVC   LINESTEP,CHCLS MOVE STEPNAME\n         DROP  R6\n         BAL   R15,COMN\n         BAL   R15,TSOOUCB                                      DLW\n         BAL   R7,PUTLINE\nTSOJINCR LA    R3,1(R3)       ADD ONE TO R3\n         LA    R2,4(R2)       NEXT ASCB ENTRY\n         BCT   R4,TSOJLOOP\n         BR    R14            RETURN\n EJECT\n*\n*  SUBROUTINE TO EXTRACT CURRENT COMMAND\n*         AND TO EXTRACT EXCP COUNT\n*\nTSOOUCB  CLI   SWCMD,ON\n         BNE   TSOOUCB1\n         L     R7,ASCBOUCB\n         USING OUCB,R7\n         MVC   LINESTEP(8),OUCBTRXN\nTSOOUCB1 EQU   *\n         BR    R15            RETURN\n EJECT\nPCLADDR  DC    A(DSPPCL)\nSTRTLINE DC    CL80' '\n         ORG   STRTLINE            RESET ADDRESSABILITY\n         DC    C' ID DP *** XXXX  STC *** FLAGS CPUTIME'\n         DC    C' REAL WORK  G/P/D  EXCPS  TRC SRC    SC'\n         ORG\nINITLINE DC    CL80' '\n         ORG   INITLINE            RESET ADDRESSABILITY\n         DC    C' ID DP *** XXXX  JOB *** FLAGS CPUTIME'\n         DC    C' REAL WORK  G/P/D  EXCPS  TRC SRC    SC'\n         ORG\nTSOJLINE DC    CL80' '\n         ORG   TSOJLINE            RESET ADDRESSABILITY\n         DC    C' ID DP *** XXXX  TSU *** FLAGS CPUTIME'\n         DC    C' REAL WORK  G/P/D  EXCPS  TRC SRC    SC'\n         ORG\nEDMSK1   DC    XL8'4020202020202120'\nEDMSK2   DC    XL8'4020202020212020'\n         LTORG\n EJECT\nDSPPCL   IKJPARM\nASIDNO   IKJIDENT 'ASID NUMBER',ASTERISK,                              C\n               MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,                  C\n               DEFAULT='0'\nTYPE     IKJKEYWD DEFAULT='ALL'\n         IKJNAME 'ALL'\n         IKJNAME 'STC'\n         IKJNAME 'JOBS'\n         IKJNAME 'TS'\nREAL     IKJKEYWD DEFAULT='BOTH'\n         IKJNAME 'BOTH'\n         IKJNAME 'IN'\n         IKJNAME 'OUT'\nHOLES    IKJKEYWD\n         IKJNAME 'HOLES'\nPROCNAME IKJKEYWD\n         IKJNAME 'PROCNAME'                                   RPW\nCOMMAND  IKJKEYWD\n         IKJNAME 'COMMAND'\nGROUP    IKJKEYWD\n         IKJNAME 'GROUP',SUBFLD=GROUPN\nPERIOD   IKJKEYWD\n         IKJNAME 'PERIOD',SUBFLD=PERIODN\nDOMAIN   IKJKEYWD\n         IKJNAME 'DOMAIN',SUBFLD=DOMAINN\nGROUPN   IKJSUBF\nGROUP#   IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=2,      X\n               PROMPT='GROUP NUMBER'\nPERIODN  IKJSUBF\nPERIOD#  IKJIDENT 'NUMBER',FIRST=NUMERIC,MAXLNTH=1,                    X\n               PROMPT='PERIOD NUMBER'\nDOMAINN  IKJSUBF\nDOMAIN#  IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=2,      X\n               PROMPT='DOMAIN NUMBER'\n         IKJENDP\n EJECT\n         IKJCPPL\n EJECT\n         IKJPSCB\n EJECT\n         IKJPPL\n EJECT\n*   CSCB\nCSCB     DSECT\n         IEECHAIN\n EJECT\n*   ASCB\n         IHAASCB\n EJECT\n*   OUCB\n         IRAOUCB\n EJECT\n*   OUXB\n         IHAOUXB\n EJECT\nWORKAREA DSECT\nSAVEAREA DS    18F\nLINE     DS    CL80\n         ORG   LINE+0\nLINEASID DS    CL3\n         ORG   LINE+4\nLINEDPRT DS    CL2\n         ORG   LINE+7\nLINEJOBN DS    CL8\n         ORG   LINE+16\nLINESTEP DS    CL8\n         ORG   LINE+25\nLINESTAT DS    0CL5\nLINESTA1 DS    CL3\nLINESTA2 DS    CL2\n         ORG   LINE+30\nLINEEJST DS    CL8\n         ORG   LINE+38\nLINEFMCT DS    CL4\n         ORG   LINE+43\nLINEWSS  DS    CL4\n         ORG   LINE+49\nLINENPG  DS    CL2\n         ORG   LINE+52\nLINEPGP  DS    CL1\n         ORG   LINE+54\nLINEDMN  DS    CL2\n         ORG   LINE+57\nLINEEXCP DS    CL5\n         ORG   LINE+63\nLINETRC  DS    CL4\n         ORG   LINE+68\nLINESRC  DS    CL3\n         ORG   LINE+72\nLINESWC  DS    CL5\n         ORG   LINE+80\nWORK     DS    D\nCHAR     DS    D\nASCBONE  DS    F\nASCBMAX  DS    F\nECB      DS    F\nPDLADDR  DS    F\nPPLADDR  DS    7F\nASIDNMBR DS    H\nHEADER   DS    CL80\nCMPRGRP  DS    CL2\nCMPRPRD  DS    C\nCMPRDMN  DS    CL2\nASIDFLAG DS    C\nSWGRP    DS    C\nSWPRD    DS    C\nSWDMN    DS    C\nSWCMD    DS    C                                                DLW\nSWPRC    DS    C                                                DLW\nHEADERSW DS    C\nLDYNAMIC EQU   *-WORKAREA\nOFF      EQU   X'00'\nON       EQU   X'01'\n         EJECT                                              *HMD 10/85*\n         CVT   DSECT=YES,LIST=YES                           *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         IHAASVT                                            *HMD 10/85*\n         END   ASID\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "B": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "HMDEAN"}, "text": "PROC 1 DSNAME DEBUG\n/* ***************************************************************** */\n/*                                                                   */\n/* \"BROWSE\" RECURSIVE CLIST                                          */\n/*  WRITTEN 13MAR86, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT         */\n/*    . SIMPLE RECURSIVE CLIST TO DIRECTLY INVOKE THE PDF BROWSE     */\n/*      SERVICE FROM WITHIN ISPF OR FROM READY MODE TSO              */\n/*    . EXISTENCE OF DATA SET IS VERIFIED PRIOR TO EDIT ENTRY        */\n/*                                                                   */\n/* ***************************************************************** */\nIF &DEBUG = DEBUG THEN -\n   CONTROL MSG LIST CONLIST SYMLIST\nELSE -\n   CONTROL NOMSG NOLIST NOCONLIST NOSYMLIST\nIF &SYSDSN(&DSNAME.) = OK THEN -\n   DO\n     IF &SYSISPF = ACTIVE THEN -\n        DO\n          ISPEXEC BROWSE DATASET(&DSNAME.)\n          EXIT\n        END\n     ELSE -\n        ISPSTART CMD(%B &DSNAME. &DEBUG)\n   END\nELSE -\n   DO\n     CLR3270\n     WRITE ***** &DSNAME. DOES NOT EXIST... TRY AGAIN *****\n     EXIT\n   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CALL#": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         CALL# &MODNAME\n.*\n         GBLC  &GLREG                            LINK REGISTER\n.*\n         AIF   ('&MODNAME' EQ '').ERR01          IS ADDR SUPPLIED ?\n         AIF   (N'&MODNAME GT 1).ERR01\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000022-ROUTINE ADDRESS NOT SPECIFIED OR INVALID'\n         MEXIT\n.*\n.OK      ANOP\n         SPACE\n         AIF   ('&MODNAME'(1,1) EQ '(').CODE010  IS ADDRESS IN REG ?\n.*\n         BAL   &GLREG,&MODNAME                   BRANCH ON SUBROUTINE\n         AGO   .CODE020\n.CODE010 ANOP\n         BALR  &GLREG,&MODNAME(1)                BRANCH ON SUBROUTINE\n.CODE020 ANOP\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLRHELP": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "HMDEAN"}, "text": ")F FUNCTION -\n   THE CLR3270 COMMAND WILL CLEAR THE SCREEN OF A 3270 DISPLAY\n   TERMINAL.  SUBSEQUENT OUTPUT LINES WILL BE WRITTEN STARTING\n   AT THE TOP OF THE SCREEN.  THIS COMMAND SHOULD NOT BE ISSUED\n   FROM TERMINALS OTHER THAN IBM 3270 COMPATIBLE ONES.\n)X SYNTAX   -\n              CLR3270\n\nALIAS    -    CLR1377\n)O OPERANDS -\n   THERE ARE NO OPERANDS ON THE CLR3270 COMMAND.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLR3270": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00T\\x01\\x18\\x13o\\x01\\x18\\x13o\\x11H\\x00\\x80\\x00\\x80\\x00\\x00\\xc6\\xd9\\xc5\\xe8\\xc2\\xc9\\xc5\\xd9@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-05-16T00:00:00", "modifydate": "2018-05-16T11:48:54", "lines": 128, "newlines": 128, "modlines": 0, "user": "FREYBIER"}, "text": "//WJSASMBL JOB (9998,TS),'ASM/LINK CLR3270 CP ',CLASS=1,MSGCLASS=S,\n//     NOTIFY=&SYSUID\n/*\n//ASM      EXEC PGM=ASMA90,REGION=0M,\n//         PARM='BATCH,NODECK,RLD,OBJ,TERM,SIZE(MAX,ABOVE),RENT'\n//SYSPRINT  DD  SYSOUT=*\n//SYSTERM   DD  SYSOUT=*\n//SYSLIB    DD  DISP=SHR,DSN=WTS01.FILE119.PDS\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=SYS1.MACLIB\n//SYSLIN    DD  UNIT=SYSDA,SPACE=(CYL,(2,1,1)),DSN=&&OBJMOD,\n//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),DISP=(,PASS)\n//SYSIN     DD  *\n*****\n*\n*   Updated 07Dec16, William Smith, USS POSCO, Pittsburg, CA 94565\n*   .  Tested with z/OS 2.1 RSU 1606, HLASM, the TSO Session Manager\n*      \"SM\" TSO CP, and Tom Brennan's VISTA TN3270 emulator\n*   .  Local macros found and used from CBT FILE 119 which are required\n*      to assemble:  EOJ, LDROP, LUSE, SETREG, XABSM\n*   .  http://www.cbttape.org , billsmith@ussposco.com\n*\n* ---------------------------------------------------------------------\n*\n*   UPDATED 10OCT84, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT\n*   .  AUTHOR UNKNOWN; CONTRIBUTED BY SAM BASS, OCCIDENTAL SYSTEMS,\n*      HOUSTON, TEXAS (713) 840-2178\n*   .  THE FUNCTION OF THIS PROGRAM IS TO CLEAR A 327X TYPE TERMINAL.\n*   .  ASCII DEVICES ARE PROPERLY HANDLED TO ELIMINATE DISPLAY OF AN\n*      UN-SUPPORTED DATA STREAM\n*   .  IF THE TSO SESSION MANAGER IS ACTIVE, THE EFFECT OF THIS COMMAND\n*      IS ESSENTIALLY A NO OPERATION TO ELIMINATE A SCREEN FLICKER\n*\n*   UPDATED 30JUN86, HOWARD M. DEAN, SYNTEX TECHNICAL SUPPORT\n*   .  CHANGED ENTRY AND EXIT MACROS\n*   .  USE SYSTEM MAPPING MACROS\n*   .  SWITCH BACK TO 24BIT MODE FOR TPUT/STLINENO MACROS\n*   .  THIS COMMAND IS ENTERED IN 31 BIT MODE, BUT SWITCHES TO 24BIT\n*\n*****\nCLEAR    TITLE 'TSO UTILITY TO CLEAR A 327X TYPE TERMINAL DISPLAY'\nCLEAR    CSECT                                                 HD JUN86\nCLEAR    AMODE 31                                              HD JUN86\nCLEAR    RMODE 24                                              HD JUN86\n         SETREG 12,CODE=RENT,CPR=NO                            HD JUN86\n         GTSIZE ,                  GET TERMINAL DIMENSIONS\n         LTR   R0,R0               IS THIS A 327X TYPE TERMINAL?\n         BP    DISPLAY             YES, GO ISSUE SCREEN CLEAR\n         C     R1,=F'80'           IS THIS A ASCII TUBE?\n         BE    TTY35SCR            YES, GO ISSUE SCREEN CLEAR\n         B     EXIT                MUST BE HARDCOPY, GO EXIT\nDISPLAY  DS    0H\n         L     R2,PSAAOLD-PSA(R0)   GET ASCB ADDRESS\n         L     R2,ASCBASXB-ASCB(R2) GET ASXB ADDRESS\n         L     R2,ASXBLWA-ASXB(R2)  GET LWA ADDRESS\n         LTR   R2,R2                DOES LWA EXIST?\n         BZ    EXIT                 NO, OOPS\n         L     R2,LWAXXXX-LWA(R2)   GET RDF ADDRESS\n         LTR   R2,R2                DOES RDF EXIST?\n         BZ    NONSMGR             NO, SESSION MANAGER NOT ACTIVE\n         TM    RDFFLGS(R2),RDFFSCR TEST RDFFSCR BIT OF RDFFLAGS\n         BZ    EXIT                EXIT IF SESSION MANAGER ACTIVE\nNONSMGR  DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         STFSMODE ON,INITIAL=YES   SETUP SCREEN FOR CLEAR\n         TPUT  DCLR,DCLRL,FULLSCR  ISSUE 327X TYPE SCREEN CLEAR\n         STLINENO LINE=1,MODE=OFF  TURN OFF FULL SCREEN MODE\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nTTY35SCR DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         TPUT  TCLR,TCLRL,ASIS     ISSUE ASCII TYPE SCREEN CLEAR\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nEXIT     DS    0H\n         EOJ RC=0\n         EJECT\nSPACE    DC    C' '                A SPACE CHARACTER\nDCLR     DS    0H                  327X TYPE SCREEN CLEAR\n*              WCC   SBA   R 24  C 79\n         DC    X'40',X'11',X'5D',X'7E'\n*              SBA   R 01  C 01\n         DC    X'11',X'40',X'40'\n*              SF    AID - UNPROTECTED,ALPHA,DISPLAY,NOT-MDFYD\n         DC    X'1D',X'40'\n*              IC\n         DC    X'13'\n*              RA    R 07  C 01  NULL\n         DC    X'3C',X'C7',X'60',X'00'\n*              RA    R 13  C 01  NULL\n         DC    X'3C',X'4F',X'40',X'00'\n*              RA    R 19  C 01  NULL\n         DC    X'3C',X'D6',X'60',X'00'\n*              RA    R 01  C 01  NULL\n         DC    X'3C',X'40',X'40',X'00'\n*              IC\n         DC    X'13'\nDCLRL    EQU   *-DCLR\nTCLR     DC    23X'25'             ASCII TYPE SCREEN CLEAR\n         DC    X'15'\nTCLRL    EQU   *-TCLR\nRDFFLGS  EQU   X'90'               OFFSET OF RDFFLGS IN RDFBLOCK\nRDFFSCR  EQU   X'40'               SESSION MANAGER FULLSCREEN FLAG\n         EJECT\n         IHAPSA\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IKJEFLWA\n         END\n/*\n//BIND     EXEC PGM=IEWBLINK,\n//         PARM='LIST,LET,XREF,NCAL'\n//SYSPRINT  DD  SYSOUT=*\n//SYSLMOD   DD  DISP=SHR,DSN=WTS01.LOAD\n//SYSLIN    DD  DSN=&&OBJMOD,DISP=(OLD,DELETE)\n//          DD  *\n  ENTRY CLEAR\n  ALIAS CLR3270,CLRSCR,CLEARSCR\n  NAME  CLEAR(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLR3270A": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00_\\x00_\\x00\\x00\\xd6\\xd3\\xc4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 95, "newlines": 95, "modlines": 0, "user": "OLD"}, "text": "*****\n*\n*   UPDATED 10OCT84, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT\n*   -  AUTHOR UNKNOWN; CONTRIBUTED BY SAM BASS, OCCIDENTAL SYSTEMS,\n*      HOUSTON, TEXAS (713) 840-2178\n*   -  THE FUNCTION OF THIS PROGRAM IS TO CLEAR A 327X TYPE TERMINAL.\n*   -  ASCII DEVICES ARE PROPERLY HANDLED TO ELIMINATE DISPLAY OF AN\n*      UN-SUPPORTED DATA STREAM\n*   -  IF THE TSO SESSION MANAGER IS ACTIVE, THE EFFECT OF THIS COMMAND\n*      IS ESSENTIALLY A NO OPERATION TO ELIMINATE A SCREEN FLICKER\n*\n*   UPDATED 30JUN86, HOWARD M. DEAN, SYNTEX TECHNICAL SUPPORT\n*\n*   -  CHANGED ENTRY AND EXIT MACROS\n*   -  USE SYSTEM MAPPING MACROS\n*   -  SWITCH BACK TO 24BIT MODE FOR TPUT/STLINENO MACROS\n*   -  THIS COMMAND IS ENTERED IN 31 BIT MODE, BUT SWITCHES TO 24BIT\n*\n*****\nCLEAR    TITLE 'TSO UTILITY TO CLEAR A 327X TYPE TERMINAL DISPLAY'\nCLEAR    CSECT                                                 HD JUN86\nCLEAR    AMODE 31                                              HD JUN86\nCLEAR    RMODE 24                                              HD JUN86\n         SETREG 12,CODE=RENT,CPR=NO                            HD JUN86\n         GTSIZE ,                  GET TERMINAL DIMENSIONS\n         LTR   R0,R0               IS THIS A 327X TYPE TERMINAL?\n         BP    DISPLAY             YES, GO ISSUE SCREEN CLEAR\n         C     R1,=F'80'           IS THIS A ASCII TUBE?\n         BE    TTY35SCR            YES, GO ISSUE SCREEN CLEAR\n         B     EXIT                MUST BE HARDCOPY, GO EXIT\nDISPLAY  DS    0H\n         L     R2,PSAAOLD-PSA(R0)   GET ASCB ADDRESS\n         L     R2,ASCBASXB-ASCB(R2) GET ASXB ADDRESS\n         L     R2,ASXBLWA-ASXB(R2)  GET LWA ADDRESS\n         LTR   R2,R2                DOES LWA EXIST?\n         BZ    EXIT                 NO, OOPS\n         L     R2,LWAXXXX-LWA(R2)   GET RDF ADDRESS\n         LTR   R2,R2                DOES RDF EXIST?\n         BZ    NONSMGR             NO, SESSION MANAGER NOT ACTIVE\n         TM    RDFFLGS(R2),RDFFSCR TEST RDFFSCR BIT OF RDFFLAGS\n         BZ    EXIT                EXIT IF SESSION MANAGER ACTIVE\nNONSMGR  DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         STFSMODE ON,INITIAL=YES   SETUP SCREEN FOR CLEAR\n         TPUT  DCLR,DCLRL,FULLSCR  ISSUE 327X TYPE SCREEN CLEAR\n         STLINENO LINE=1,MODE=OFF  TURN OFF FULL SCREEN MODE\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nTTY35SCR DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         TPUT  TCLR,TCLRL,ASIS     ISSUE ASCII TYPE SCREEN CLEAR\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nEXIT     DS    0H\n         EOJ RC=0\n         EJECT\nSPACE    DC    C' '                A SPACE CHARACTER\nDCLR     DS    0H                  327X TYPE SCREEN CLEAR\n*              WCC   SBA   R 24  C 79\n         DC    X'40',X'11',X'5D',X'7E'\n*              SBA   R 01  C 01\n         DC    X'11',X'40',X'40'\n*              SF    AID - UNPROTECTED,ALPHA,DISPLAY,NOT-MDFYD\n         DC    X'1D',X'40'\n*              IC\n         DC    X'13'\n*              RA    R 07  C 01  NULL\n         DC    X'3C',X'C7',X'60',X'00'\n*              RA    R 13  C 01  NULL\n         DC    X'3C',X'4F',X'40',X'00'\n*              RA    R 19  C 01  NULL\n         DC    X'3C',X'D6',X'60',X'00'\n*              RA    R 01  C 01  NULL\n         DC    X'3C',X'40',X'40',X'00'\n*              IC\n         DC    X'13'\nDCLRL    EQU   *-DCLR\nTCLR     DC    23X'25'             ASCII TYPE SCREEN CLEAR\n         DC    X'15'\nTCLRL    EQU   *-TCLR\nRDFFLGS  EQU   X'90'               OFFSET OF RDFFLGS IN RDFBLOCK\nRDFFSCR  EQU   X'40'               SESSION MANAGER FULLSCREEN FLAG\n         EJECT\n         IHAPSA\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IKJEFLWA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLR3270B": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00R\\x01\\x164?\\x01\\x164?\\x007\\x00\\xb7\\x00\\xb7\\x00\\x00\\xe6\\xd1\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-12-08T00:00:00", "modifydate": "2016-12-08T00:37:52", "lines": 183, "newlines": 183, "modlines": 0, "user": "WJSMITH"}, "text": "//WJSASMBL JOB (9998,TS),'ASM/LINK CLR3270 CP ',CLASS=1,MSGCLASS=S,\n//     NOTIFY=&SYSUID\n/*\n//ASM      EXEC PGM=ASMA90,REGION=0M,\n//         PARM='BATCH,NODECK,RLD,OBJ,TERM,SIZE(MAX,ABOVE),RENT'\n//SYSPRINT  DD  SYSOUT=*\n//SYSTERM   DD  SYSOUT=*\n//SYSLIB    DD  DISP=SHR,DSN=WTS01.FILE119.PDS\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=SYS1.MACLIB\n//SYSLIN    DD  UNIT=SYSDA,SPACE=(CYL,(2,1,1)),DSN=&&OBJMOD,\n//     DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),DISP=(,PASS)\n//SYSIN     DD  *\n*****\n*\n*   Updated 07Dec16, William Smith, USS POSCO, Pittsburg, CA 94565\n*   .  Tested with z/OS 2.1 RSU 1606, HLASM, the TSO Session Manager\n*      \"SM\" TSO CP, and Tom Brennan's VISTA TN3270 emulator\n*   .  Local macros found and used from CBT FILE 119 which are required\n*      to assemble:  EOJ, LDROP, LUSE, SETREG, XABSM\n*   .  http://www.cbttape.org , billsmith@ussposco.com\n*\n* ---------------------------------------------------------------------\n*\n*   UPDATED 10OCT84, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT\n*   .  AUTHOR UNKNOWN; CONTRIBUTED BY SAM BASS, OCCIDENTAL SYSTEMS,\n*      HOUSTON, TEXAS (713) 840-2178\n*   .  THE FUNCTION OF THIS PROGRAM IS TO CLEAR A 327X TYPE TERMINAL.\n*   .  ASCII DEVICES ARE PROPERLY HANDLED TO ELIMINATE DISPLAY OF AN\n*      UN-SUPPORTED DATA STREAM\n*   .  IF THE TSO SESSION MANAGER IS ACTIVE, THE EFFECT OF THIS COMMAND\n*      IS ESSENTIALLY A NO OPERATION TO ELIMINATE A SCREEN FLICKER\n*\n*   UPDATED 30JUN86, HOWARD M. DEAN, SYNTEX TECHNICAL SUPPORT\n*   .  CHANGED ENTRY AND EXIT MACROS\n*   .  USE SYSTEM MAPPING MACROS\n*   .  SWITCH BACK TO 24BIT MODE FOR TPUT/STLINENO MACROS\n*   .  THIS COMMAND IS ENTERED IN 31 BIT MODE, BUT SWITCHES TO 24BIT\n*\n*****\nCLEAR    TITLE 'TSO UTILITY TO CLEAR A 327X TYPE TERMINAL DISPLAY'\nCLEAR    CSECT                                                 HD JUN86\nCLEAR    AMODE 31                                              HD JUN86\nCLEAR    RMODE 24                                              HD JUN86\n         SETREG 12,CODE=RENT,CPR=NO                            HD JUN86\n         GTSIZE ,                  GET TERMINAL DIMENSIONS\n         LTR   R0,R0               IS THIS A 327X TYPE TERMINAL?\n         BP    DISPLAY             YES, GO ISSUE SCREEN CLEAR\n         C     R1,=F'80'           IS THIS A ASCII TUBE?\n         BE    TTY35SCR            YES, GO ISSUE SCREEN CLEAR\n         B     EXIT                MUST BE HARDCOPY, GO EXIT\nDISPLAY  DS    0H\n         L     R2,PSAAOLD-PSA(R0)   GET ASCB ADDRESS\n         L     R2,ASCBASXB-ASCB(R2) GET ASXB ADDRESS\n         L     R2,ASXBLWA-ASXB(R2)  GET LWA ADDRESS\n         LTR   R2,R2                DOES LWA EXIST?\n         BZ    EXIT                 NO, OOPS\n         L     R2,LWAXXXX-LWA(R2)   GET RDF ADDRESS\n         LTR   R2,R2                DOES RDF EXIST?\n         BZ    NONSMGR             NO, SESSION MANAGER NOT ACTIVE\n         TM    RDFFLGS(R2),RDFFSCR TEST RDFFSCR BIT OF RDFFLAGS\n         BZ    EXIT                EXIT IF SESSION MANAGER ACTIVE\nNONSMGR  DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         STFSMODE ON,INITIAL=YES   SETUP SCREEN FOR CLEAR\n         TPUT  DCLR,DCLRL,FULLSCR  ISSUE 327X TYPE SCREEN CLEAR\n         STLINENO LINE=1,MODE=OFF  TURN OFF FULL SCREEN MODE\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nTTY35SCR DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         TPUT  TCLR,TCLRL,ASIS     ISSUE ASCII TYPE SCREEN CLEAR\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nEXIT     DS    0H\n         EOJ RC=0\n         EJECT\nSPACE    DC    C' '                A SPACE CHARACTER\nDCLR     DS    0H                  327X TYPE SCREEN CLEAR\n*              WCC   SBA   R 24  C 79\n         DC    X'40',X'11',X'5D',X'7E'\n*              SBA   R 01  C 01\n         DC    X'11',X'40',X'40'\n*              SF    AID - UNPROTECTED,ALPHA,DISPLAY,NOT-MDFYD\n         DC    X'1D',X'40'\n*              IC\n         DC    X'13'\n*              RA    R 07  C 01  NULL\n         DC    X'3C',X'C7',X'60',X'00'\n*              RA    R 13  C 01  NULL\n         DC    X'3C',X'4F',X'40',X'00'\n*              RA    R 19  C 01  NULL\n         DC    X'3C',X'D6',X'60',X'00'\n*              RA    R 01  C 01  NULL\n         DC    X'3C',X'40',X'40',X'00'\n*              IC\n         DC    X'13'\nDCLRL    EQU   *-DCLR\nTCLR     DC    23X'25'             ASCII TYPE SCREEN CLEAR\n         DC    X'15'\nTCLRL    EQU   *-TCLR\nRDFFLGS  EQU   X'90'               OFFSET OF RDFFLGS IN RDFBLOCK\nRDFFSCR  EQU   X'40'               SESSION MANAGER FULLSCREEN FLAG\n         EJECT\n         IHAPSA\n         EJECT\n         LTR   R2,R2                DOES LWA EXIST?\n         BZ    EXIT                 NO, OOPS\n         L     R2,LWAXXXX-LWA(R2)   GET RDF ADDRESS\n         LTR   R2,R2                DOES RDF EXIST?\n         BZ    NONSMGR             NO, SESSION MANAGER NOT ACTIVE\n         TM    RDFFLGS(R2),RDFFSCR TEST RDFFSCR BIT OF RDFFLAGS\n         BZ    EXIT                EXIT IF SESSION MANAGER ACTIVE\nNONSMGR  DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         STFSMODE ON,INITIAL=YES   SETUP SCREEN FOR CLEAR\n         TPUT  DCLR,DCLRL,FULLSCR  ISSUE 327X TYPE SCREEN CLEAR\n         STLINENO LINE=1,MODE=OFF  TURN OFF FULL SCREEN MODE\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nTTY35SCR DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         TPUT  TCLR,TCLRL,ASIS     ISSUE ASCII TYPE SCREEN CLEAR\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nEXIT     DS    0H\n         EOJ RC=0\n         EJECT\nSPACE    DC    C' '                A SPACE CHARACTER\nDCLR     DS    0H                  327X TYPE SCREEN CLEAR\n*              WCC   SBA   R 24  C 79\n         DC    X'40',X'11',X'5D',X'7E'\n*              SBA   R 01  C 01\n         DC    X'11',X'40',X'40'\n*              SF    AID - UNPROTECTED,ALPHA,DISPLAY,NOT-MDFYD\n         DC    X'1D',X'40'\n*              IC\n         DC    X'13'\n*              RA    R 07  C 01  NULL\n         DC    X'3C',X'C7',X'60',X'00'\n*              RA    R 13  C 01  NULL\n         DC    X'3C',X'4F',X'40',X'00'\n*              RA    R 19  C 01  NULL\n         DC    X'3C',X'D6',X'60',X'00'\n*              RA    R 01  C 01  NULL\n         DC    X'3C',X'40',X'40',X'00'\n*              IC\n         DC    X'13'\nDCLRL    EQU   *-DCLR\nTCLR     DC    23X'25'             ASCII TYPE SCREEN CLEAR\n         DC    X'15'\nTCLRL    EQU   *-TCLR\nRDFFLGS  EQU   X'90'               OFFSET OF RDFFLGS IN RDFBLOCK\nRDFFSCR  EQU   X'40'               SESSION MANAGER FULLSCREEN FLAG\n         EJECT\n         IHAPSA\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IKJEFLWA\n         END\n/*\n//BIND     EXEC PGM=IEWBLINK,\n//         PARM='LIST,LET,XREF,NCAL'\n//SYSPRINT  DD  SYSOUT=*\n//SYSLMOD   DD  DISP=SHR,DSN=WTS01.LOAD\n//SYSLIN    DD  DSN=&&OBJMOD,DISP=(OLD,DELETE)\n//          DD  *\n  ENTRY CLEAR\n  ALIAS CLR3270,CLRSCR,CLEARSCR\n  NAME  CLEAR(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLR3270Z": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x18\\x13o\\x01\\x18\\x13\\x7f\\x10D\\x008\\x007\\x00\\x00\\xc4\\xc5\\xd3\\xc5\\xe3\\xc5\\xc4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2018-05-16T00:00:00", "modifydate": "2018-05-17T10:44:00", "lines": 56, "newlines": 55, "modlines": 0, "user": "DELETED"}, "text": "*  THESE LINES WERE DELETED FROM THE CLR3270 SOURCE CODE.\n         LTR   R2,R2                DOES LWA EXIST?\n         BZ    EXIT                 NO, OOPS\n         L     R2,LWAXXXX-LWA(R2)   GET RDF ADDRESS\n         LTR   R2,R2                DOES RDF EXIST?\n         BZ    NONSMGR             NO, SESSION MANAGER NOT ACTIVE\n         TM    RDFFLGS(R2),RDFFSCR TEST RDFFSCR BIT OF RDFFLAGS\n         BZ    EXIT                EXIT IF SESSION MANAGER ACTIVE\nNONSMGR  DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         STFSMODE ON,INITIAL=YES   SETUP SCREEN FOR CLEAR\n         TPUT  DCLR,DCLRL,FULLSCR  ISSUE 327X TYPE SCREEN CLEAR\n         STLINENO LINE=1,MODE=OFF  TURN OFF FULL SCREEN MODE\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nTTY35SCR DS    0H\n         SPACE 2                                               HD JUN86\n         XABSM MODE=24             GET 24BIT MODE              HD JUN86\n         TPUT  TCLR,TCLRL,ASIS     ISSUE ASCII TYPE SCREEN CLEAR\n         XABSM MODE=31             GET 31BIT MODE              HD JUN86\n         SPACE 2                                               HD JUN86\n         B     EXIT                GO EXIT\nEXIT     DS    0H\n         EOJ RC=0\n         EJECT\nSPACE    DC    C' '                A SPACE CHARACTER\nDCLR     DS    0H                  327X TYPE SCREEN CLEAR\n*              WCC   SBA   R 24  C 79\n         DC    X'40',X'11',X'5D',X'7E'\n*              SBA   R 01  C 01\n         DC    X'11',X'40',X'40'\n*              SF    AID - UNPROTECTED,ALPHA,DISPLAY,NOT-MDFYD\n         DC    X'1D',X'40'\n*              IC\n         DC    X'13'\n*              RA    R 07  C 01  NULL\n         DC    X'3C',X'C7',X'60',X'00'\n*              RA    R 13  C 01  NULL\n         DC    X'3C',X'4F',X'40',X'00'\n*              RA    R 19  C 01  NULL\n         DC    X'3C',X'D6',X'60',X'00'\n*              RA    R 01  C 01  NULL\n         DC    X'3C',X'40',X'40',X'00'\n*              IC\n         DC    X'13'\nDCLRL    EQU   *-DCLR\nTCLR     DC    23X'25'             ASCII TYPE SCREEN CLEAR\n         DC    X'15'\nTCLRL    EQU   *-TCLR\nRDFFLGS  EQU   X'90'               OFFSET OF RDFFLGS IN RDFBLOCK\nRDFFSCR  EQU   X'40'               SESSION MANAGER FULLSCREEN FLAG\n         EJECT\n         IHAPSA\n         EJECT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPPL": {"ttr": 1295, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&X       CPPL  &Y,&DSECT=NO\n***********************************************************************\n*                                                                     *\n*             COMMAND   PROCESSOR   PARAMETER   LIST                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         AIF   ('&DSECT' NE 'NO').DSECT\nCPPL     DS    0A .                     COMMAND PROC PARM LIST\n         AGO   .COM\n.DSECT   ANOP\nCPPL     DSECT ,                        COMMAND PROC PARM LIST\n.COM     ANOP\nCPPLCBUF DC    A(0) .                   COMMAND BUFFER ADDR\nCPPLUPT  DC    A(0) .                   USER PROF. TAB\nCPPLPSCB DC    A(0) .                   PROT STEP CB\nCPPLECT  DC    A(0) .                   ENV. CTL TABLE\nCPPLLEN  EQU   *-CPPL .                 LENGTH\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSPL": {"ttr": 1297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         CSPL  &DSECT=,                                     @HMD78174\n         AIF   ('&DSECT' EQ 'NO').DS0A                      @HMD78174\n.* RELEASE 20 SUPPORT CODE -- 20035                         @HMD78174\nCSPL     DSECT                                              @HMD78174\n         AGO    .GEN                                        @HMD78174\n.DS0A    ANOP                                               @HMD78174\nCSPL     DS      0A           COMMAND SCAN PARAMETER LIST   @HMD78174\n.GEN     ANOP\n***********************************************************************\n*    THE COMMAND SCAN PARAMETER LIST (CSPL) IS A LIST OF ADDRESSES    *\n*    PASSED FROM THE INVOKER TO COMMAND SCAN VIA REGISTER 1           *\n***********************************************************************\n         SPACE\nCSPLUPT  DS    A        PTR TO  UPT\nCSPLECT  DS    A        PTR TO  ECT\nCSPLECB  DS    A        PTR TO  CP'S ECB\nCSPLFLG  DS    A        PTR TO  FLAG WORD WHICH IS OBTAINED & FREED\n*                       BY CALLER. BIT 0 SET TO 0= SYNTAX CHECKING OF\n*                       COMMAND NAME.\nCSPLOA   DS    A        PTR TO OUTPUT AREA (CSOA DSECT)\nCSPLCBUF DS    A        PTR TO COMMAND BUFFER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATA#": {"ttr": 1299, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         DATA#\n.*\n.*       DEFINE VARIABLES\n.*\n         GBLC  &REENT                            CODE TYPE INDICATOR\n         GBLC  &MYCSECT                          CSECT NAME\n.*\n.*       SET UP GLOBAL VARIABLES\n.*\n         SEQCK ENTRE                             CHANGE A STACK\n.*\n.*       GENERATE CODE\n.*\n         AIF   ('&REENT' EQ 'N').CODE001         IS CODE REENT ?\n         SPACE\n&MYCSECT SETC  '&SYSECT'\nZLINDSCT DSECT                                   DSECT FOR REMOTE CORE\n.CODE001 ANOP\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DO": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         DO    &MODNAME\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16)\n         GBLC  &GLREG\n         LCLC  &LBLYSS\n.*\n         AIF   ('&MODNAME' EQ '').ERR01\n         AIF   ('&MODNAME' NE 'BELOW').ERR01\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000030-PARAMETER NOT SPECIFIED OR INVALID'\n         MEXIT\n.*\n.OK      ANOP\n         SEQCK DO\n.*\n&GDOCNT  SETA  &GDOCNT+3\n&GDOLVL  SETA  &GDOLVL+1\n&GDOSTK(&GDOLVL) SETA &GDOCNT\n&GDOIFST(&GDOLVL) SETA &GIFLVL\n.*\n         SPACE\n.*\n&GDOCNT  SETA  &GDOCNT-1\n.*\n&LBLYSS  SETC  'ZLDO&GDOCNT'\n&LBLYSS  DS    0H                                LOOP START\n.*\n&GDOCNT  SETA  &GDOCNT+1\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOWHILE": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00S\\x00S\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         DOWHILE &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16),&GDWCNT\n         GBLB  &DWORSW#\n         LCLC  &LOC\n         LCLC  &LBLYSS\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n.*\n         SEQCK DOWHILE\n.*\n         SPACE\n         AIF   (&DWORSW# EQ 1).L10\n&GDOCNT  SETA  &GDOCNT+2\n.*\n&LBLYSS  SETC  'ZLDO&GDOCNT'                   TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                LOOP START\n.*\n&GDOCNT  SETA  &GDOCNT+1\n&GDOLVL  SETA  &GDOLVL+1\n&GDOSTK(&GDOLVL) SETA &GDOCNT\n&GDOIFST(&GDOLVL) SETA &GIFLVL\n.*\n.L10     ANOP\n&GDOCNT  SETA  &GDOCNT+1\n&LOC     SETC  'ZLDO'.'&GDOCNT'\n&GDOCNT  SETA  &GDOCNT-1\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&LOC\n.GENOK   ANOP                                    GEN IS DONE\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n.**********************************************************************\n.*       ANALIZE 'OR' CONDITION                                       *\n.**********************************************************************\n.*\n         AIF   (&DWORSW# EQ 0).CODE020         IF NO DOWHLOR,SKIP NEXT\n&LBLYSS  SETC  'ZLDO&GDOCNT'                   TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                BODY OF LOOP FOLLOWS\n.CODE020 ANOP\n.*\n&GDWCNT  SETA  &GDWCNT+1\n&DWORSW# SETB  0\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOWHLOR": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00T\\x00T\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         DOWHLOR &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16),&GDWCNT\n         GBLB  &DWORSW#\n         GBLC  &GTYPE\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n         LCLB  &ANDSW\n         LCLC  &ORLOC\n         LCLC  &LOC\n         LCLC  &LBLYSS\n.*\n         SEQCK DOWHLOR                           PRED/SUCCESSOR CHECK\n.*\n         SPACE\n         AIF   (&DWORSW# EQ 1).L10  IF THERE IS OTHER DOWHLOR,SKIP NEXT\n&DWORSW# SETB  1                               INDICATE-DOWHLOR DONE\n&GDOCNT  SETA  &GDOCNT+2\n.*\n&LBLYSS  SETC  'ZLDO&GDOCNT'                   TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                LOOP START\n.*\n&GDOCNT  SETA  &GDOCNT+1\n&GDOLVL  SETA  &GDOLVL+1\n&GDOSTK(&GDOLVL) SETA &GDOCNT\n&GDOIFST(&GDOLVL) SETA &GIFLVL\n.*\n.L10     ANOP\n&LOC     SETC  'ZLDO'.'&GDOCNT'\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&ORLOC   SETC  'ZLAD&SYSNDX'\n&ANDSW   SETB  0                                 ASSUME - NO *AND*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n&GTYPE   SETC  'DOWHILE'                         CHANGE FLAG FOR GENC\n&ANDSW   SETB  1                                 INDICATE - *AND* FOUND\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&ORLOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&ORLOC\n.GENOK   ANOP                                    GEN IS DONE\n&GTYPE   SETC  'DOWHLOR'                         RESTORE FLAG FOR GENC\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n         AIF   (&ANDSW EQ 0).CODE040             IS THERE *AND* PARM ?\n&ORLOC   DS    0H                                CONDITIONS ARE FALSE\n.CODE040 ANOP\n.*\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNAJOB": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "HMDEAN"}, "text": "//DYNAMASK     PROC\n//********************************************************************\n//**                                                                **\n//**                     D Y N A M A S K                            **\n//**  D Y N A M I C    E L I G I B L E    D E V I C E    T A B L E  **\n//**                                                                **\n//** INSTALLED  06/24/86 - HOWARD M. DEAN                           **\n//********************************************************************\n//IEFPROC      EXEC PGM=DYNAMASK\n//SYSPRINT     DD   SYSOUT=A\n//SYSABEND     DD   SYSOUT=A\n//SYSIN        DD   DSN=SYS3.PARMLIB(DYNANAME),DISP=SHR\n//*VATIN       DD   DSN=SYS1.PARMLIB(VATLST00),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNANAME": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\t\\x00\\t\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "HMDEAN"}, "text": "WORK SWORK1,SWORK2,SWORK3,SWORK4,SWORK5\nINTUSER INTER1,INTER2,INTER3,INTER4,INTER5\nTSOUSER TSO001,TSO002,TSO003,TSO004,TSO005\nSASUSER SAS801,SAS802,SAS803,SAS804,SAS805,SAS806\nDATAPROD PROD01,PROD02,PROD03\nDATAUSER SYX801,SYX802,SYX803,SYX804,SYX805,SYX806\nVSAMPROD SYX850,SYX851,SYX852\nVSAMUSER SYX860,SYX861,SYX862\nTECHSYS  MVS801,MVS802,MVS803,MVS804,MVS805\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "E": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "HMDEAN"}, "text": "PROC 1 DSNAME DEBUG\n/* ***************************************************************** */\n/*                                                                   */\n/* \"EDIT\" RECURSIVE CLIST                                            */\n/*  WRITTEN 13MAR86, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT         */\n/*    . SIMPLE RECURSIVE CLIST TO DIRECTLY INVOKE THE PDF EDIT       */\n/*      SERVICE FROM WITHIN ISPF OR FROM READY MODE TSO              */\n/*    . EXISTENCE OF DATA SET IS VERIFIED PRIOR TO EDIT ENTRY        */\n/*                                                                   */\n/* ***************************************************************** */\nIF &DEBUG = DEBUG THEN -\n   CONTROL MSG LIST CONLIST SYMLIST\nELSE -\n   CONTROL NOMSG NOLIST NOCONLIST NOSYMLIST\nIF &SYSDSN(&DSNAME.) = OK THEN -\n   DO\n     IF &SYSISPF = ACTIVE THEN -\n        DO\n          ISPEXEC EDIT DATASET(&DSNAME.)\n          EXIT\n        END\n     ELSE -\n        ISPSTART CMD(%E &DSNAME. &DEBUG)\n   END\nELSE -\n   DO\n     CLR3270\n     WRITE ***** &DSNAME. DOES NOT EXIST... TRY AGAIN *****\n     EXIT\n   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ELSE": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         ELSE  ,\n         GBLA  &GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         LCLA  &WKA1\n         LCLC  &LBLYSS\n         SEQCK ELSE\n         SPACE\n         AIF   (&GIFLVL EQ 0).ER1\n&WKA1    SETA  &GIFSTK(&GIFLVL)/3*3\n         AIF   (&WKA1 NE &GIFSTK(&GIFLVL)).ER1\n&GIFSTK(&GIFLVL) SETA &GIFSTK(&GIFLVL)+1\n         B     ZLIF&GIFSTK(&GIFLVL)              SKIP ALTERNATE BRANCH\n.*       ***************** TO MAKE STATEMENT IN COLUMN 10 *******\n&LBLYSS  SETC  'ZLIF&WKA1'\n&LBLYSS  DS    0H                                ALTERNATE BRANCH START\n.*\n         AIF   (&GIFDOST(&GIFLVL) EQ &GDOLVL).L10\n         MNOTE 8,'ENDDO/UNTIL/WHILE MISSING WITHIN IF SET'\n.L10     ANOP\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'ELSE NOT PRECEDED BY IF'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "END#": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         END#  &CSECT\n.*\n.*       DEFINE VARIABLES\n.*\n         GBLC  &REENT                            CODE TYPE INDICATOR\n.*\n.*       CHECK INPUT PARAMETERS\n.*\n         AIF   ('&CSECT' NE '').OK               IS CSECT NAME SUPPLIED\n         MNOTE 12,'YS000001-CSECT NAME WAS NOT SPECIFIED'\n         MEXIT\n.*\n.*       SET UP GLOBAL VARIABLES\n.*\n.OK      ANOP\n         SEQCK ENTRE                             CLOSE A STACK\n         SEQCK EXIT                              CLOSE A STACK\n.*\n.*       GENERATE CODE\n.*\n         SPACE\n         AIF   ('&REENT' EQ 'N').CODE001         IS CODE REENT ?\nZLINDSCT DSECT                                   DSECT FOR REMOTE CORE\nZLINSIZE EQU   *-ZLINSAVE                        DSECT LENGTH\n.CODE001 ANOP\nZLIN9999 EQU   *\n         END   &CSECT\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDDATA#": {"ttr": 1555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00.\\x00.\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         ENDDATA#\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLC  &REENT,&MYCSECT\n         GBLA  &GIFLVL,&GDOLVL                   IF/DO LEVEL\n         GBLA  &GDWCNT\n         GBLB  &IFORSW#,&UNORSW#,&DWORSW#\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   (&GIFLVL EQ 0).L10\n         MNOTE 8,'YS000016-MISSING ENDIF STATEMENT(S)'\n&GIFLVL  SETA  0\n.L10     ANOP\n         AIF   (&GDOLVL EQ 0).L15\n         MNOTE 8,'YS000017-MISSING ENDDO/UNTIL STATEMENT(S)'\n&GDOLVL  SETA  0\n&GDWCNT  SETA  0\n.L15     ANOP\n         AIF   (&IFORSW# EQ 0).L17\n         MNOTE 8,'YS000018-MISSING IF FOLLOWING IFOR(S)'\n&IFORSW# SETB  0\n.L17     ANOP\n         AIF   (&UNORSW# EQ 0).L17A\n         MNOTE 8,'YS000019-MISSING UNTIL FOLLOWING UNTILOR(S)'\n&UNORSW# SETB  0\n.L17A    ANOP\n         AIF   (&DWORSW# EQ 0).L17B\n         MNOTE 8,'YS000020-MISSING DOWHILE FOLLOWING DOWHLOR(S)'\n&DWORSW# SETB  0\n.L17B    ANOP\n.*\n         SEQCK EXIT                              PRED/SUCCESSOR CHECK\n.*\n         AIF   ('&REENT' EQ 'N').CODE001\n         SPACE\n&MYCSECT CSECT                                   CSECT CONTINUATION\n.CODE001 ANOP\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDDO": {"ttr": 1557, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         ENDDO\n         GBLA  &GDWCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16)\n         LCLC  &LBLYSS\n         SEQCK ENDDO\n         SPACE\n         AIF   (&GDOLVL EQ 0).ER1\n         AIF   (&GDWCNT EQ 0).ER1\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)-1\n         B     ZLDO&GDOSTK(&GDOLVL)              REPEAT LOOP\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)+2\n.************************* TO MAKE STATEMENT IN COLUMN 10 *******\n&LBLYSS  SETC  'ZLDO&GDOSTK(&GDOLVL)'\n&LBLYSS  DS    0H                                LOOP END\n.****************************************************************\n         AIF   (&GDOIFST(&GDOLVL) EQ &GIFLVL).L10\n         MNOTE 8,'ENDIF STATEMENT(S) MISSING WITHIN DO LOOP'\n.L10     ANOP\n&GDOLVL  SETA  &GDOLVL-1\n&GDWCNT  SETA  &GDWCNT-1\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'ENDDO NOT PRECEDED BY DOWHILE'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDIF": {"ttr": 1559, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         ENDIF  ,\n         GBLA  &GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         LCLC  &LBLYSS\n         SEQCK ENDIF\n         SPACE\n         AIF   (&GIFLVL EQ 0).ER1\n.************************* TO MAKE STATEMENT IN COLUMN 10 *******\n&LBLYSS  SETC  'ZLIF&GIFSTK(&GIFLVL)'\n&LBLYSS  DS    0H                                END OF (IF)-BRANCH(ES)\n.****************************************************************\n         AIF   (&GIFDOST(&GIFLVL) EQ &GDOLVL).L10\n         MNOTE 8,'ENDDO/UNTIL/WHILE MISSING WITHIN IF SET'\n.L10     ANOP\n&GIFLVL  SETA  &GIFLVL-1\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'ENDIF NOT PRECEDED BY IF'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTRE#": {"ttr": 1561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00M\\x00M\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 77, "newlines": 77, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         ENTRE# &MODNAME,&SAREA=YES\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GEXCNT                           COUNTER FOR LABELS\n         GBLB  &IEXSW#                           IEXIT CONTROL SWITCH\n         GBLC  &SAVE#                            SAVE AREA FOR LINK REG\n         GBLC  &GLREG                            LINK REGISTER\n         GBLC  &EXLIS                            LISTING TYPE INDICATOR\n         GBLC  &STARTEX                          FIRST MODULE NAME\n         GBLC  &ENTNAME                          CURRENT MOD NAME\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   ('&MODNAME' EQ '').ERR01          IS MODNAME SUPPLIED ?\n.*\n         AIF   ('&SAREA' EQ '').ERR02            IS SAVAREA SUPPLIED ?\n         AIF   (N'&SAREA GT 1).ERR02             IS THERE ONE SAREA ?\n.*\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000012-MODULE NAME MISSING'\n         MEXIT\n.ERR02   MNOTE 12,'YS000013-&&SAREA NOT SUPPLIED OR INVALID'\n         MEXIT\n.*\n.**********************************************************************\n.*       SET UP GLOBAL VARIABLES                                      *\n.**********************************************************************\n.*\n.OK      ANOP\n.*       SET UP COUNTER INITIAL VALUE FOR LABELS OF EXIT#-MACRO\n&GEXCNT  SETA  &GEXCNT+1\n         SEQCK ENTRE                             PRED/SUCCESSOR CHECK\n.*       CHANGE COUNTER FOR SECOND LABEL\n&GEXCNT  SETA  &GEXCNT+1\n&IEXSW#  SETB  0                                 TURN OFF IEXIT SWITCH\n&SAVE#   SETC  '&SAREA'                          SET LINK REG SAREA\n&ENTNAME SETC  '&MODNAME'                        SET CURRENT MOD NAME\n.*\n.**********************************************************************\n.*       GENERATE CODE                                                *\n.**********************************************************************\n.*\n         AIF   ('&EXLIS' EQ 'Y').CODE010         IS PRINT GEN ?\n         PUSH  PRINT\n         PRINT NOGEN\n.CODE010 ANOP\n         SPACE\n&MODNAME DS    0H                                ROUTINE ENTRY POINT\n         AIF   ('&STARTEX' EQ '&ENTNAME').CODE020  IS IT FIRST MODULE ?\n.*\n         AIF   ('&SAREA' EQ 'NO').CODE020        IS THERE ANY SAREA ?\n.*\n         AIF   ('&SAREA' NE 'YES').CODE030       IS SAREA STANDARD ?\n.*       NEXT STATEMENT USES SECOND LABEL OF EXIT# TO SAVE LINK REG\n         ST    &GLREG,ZLEX&GEXCNT                SAVE LINK REGISTER\n         AGO   .CODE020\n.CODE030 ANOP\n         AIF   ('&SAREA'(1,1) NE '(').CODE040    IS SAREA REG ?\n         LR    &SAREA(1),&GLREG                  SAVE LINK REGISTER\n         AGO   .CODE020\n.CODE040 ANOP\n         ST    &GLREG,&SAREA                     SAVE LINK REGISTER\n.*\n.CODE020 ANOP\n.*\n.*       CHANGE COUNTER BACK FOR FIRST LABEL-IT WILL BE USED IN\n.*       SUBSEQUENT MACRO-IEXIT#\n&GEXCNT  SETA  &GEXCNT-1\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EOJ": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00Z\\x00Z\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 90, "newlines": 90, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    EOJ   &RC=0,&LOG=NO,&XA=YES                           HD JUN86\n         GBLA  &SIDX\n         GBLB  &SREG\n         GBLB  &XAW                                            HD JUN86\n         GBLB  &IDS(255)\n         GBLB  &CRENT(255)        ON IF CODE=RENT FROM SETREG\n         GBLC  &IDP(255)\n         GBLC  &POOL(255)         SUBPOOL FROM SETREG\n         GBLC  &LV(255)           LENGTH FROM SETREG\n         GBLC  &SYSSPLV           CHECK SPLEVEL MACRO SETTING  HD JUN86\n         LCLC  &IDE\n         LCLC  &RCR,&NAM,&SID\n         LCLB  &RTYPE\n&XAW     SETB  ('&SYSSPLV' EQ '2' OR '&XA' EQ 'YES')           HD JUN86\n&NAM     SETC  '&NAME'\n&SID     SETC  '&SIDX'\n         AIF   (&SREG).OK\n         MNOTE *,'SHAME ON YOU USING EOJ WITHOUT SETREG'\n&NAM     L     13,4(13)           GET OLD REGISTER SAVE AREA\n         AGO   .RET\n.OK      ANOP\n&NAM     DC    0H'0'\n         AIF   ('&RC' EQ '').RCNR1\n         AIF   ('&RC'(1,1) NE '(').RCNR1\n&RTYPE   SETB  1\n.RCNR1   ANOP\n&IDS(&SIDX) SETB (&IDS(&SIDX) AND '&LOG' EQ 'YES')\n         AIF   (NOT &IDS(&SIDX)).NOLOG SOMEBODY DOESNT WANT TO LOG\n&IDE     SETC  'END   '.'&IDP(&SIDX)'\n         WTO   '&IDE',ROUTCDE=11  LOG THE PROGRAM OFF\n.NOLOG   ANOP\n         AIF   (NOT &CRENT(&SIDX)).NORENT\n         LR    1,13               SAVE MY SAVEAREA ADDRESS\n         L     13,4(13)           GET BACK SAVE AREA POINTER\n         AIF   ('&RC' EQ '').FREE1\n         AIF   (NOT &RTYPE).FREE1\n         ST    &RC(1),16(,13) SAVE RET CODE IN R15 PLACE\n.FREE1   ANOP\n         L     0,$SPLV&SID        GET SP+LV\n         FREEMAIN R,LV=(0),A=(1)  DO FREEMAIN\n         AGO   .RET\n.NORENT  ANOP\n         L     13,4(13)           BACK SAVEAREA POINTER\n.RET     ANOP\n.RETTEST AIF   (&RTYPE).R9\n         AIF   ('&RC' EQ '').RETEQ0 *   MESSAGE, ASSUME ZERO\n         AIF   (T'&RC NE 'N').REGLD1 *  RETURN NUMBER?\n         AIF   (&RC EQ 0).R0       *    RC=0\n         AGO   .REGLA                   * LOAD ADDRESS ON RC\n.RETEQ0  MNOTE *,'*** WARNING *** RC=0 (ZERO) ASSUMED '\n         AGO   .R0\n.REGLD1  L     15,&RC .                 LOAD SAVED RETURN CODE\n         AGO   .BR14\n.REGLA   LA    15,&RC .                 LOAD REQUESTED RETURN CODE\n         AGO   .BR14\n.R9      AIF   (&CRENT(&SIDX)).R0\n         ST    &RC(1),16(,13)           SAVE RETURN CODE\n.R0      XC    8(4,13),8(13) .          CLEAR FWD CHAIN PTR\n         LM    14,12,12(13) .           RELOAD CALLERS' REGS\n.*                                                             HD JUN86\n         AIF   (NOT &XAW).X001                                 HD JUN86\n         OI    15(13),X'01'             SET RETURN INDICATOR   HD JUN86\n         AGO   .X002                                           HD JUN86\n.X001    ANOP                                                  HD JUN86\n         MVI   12(13),X'FF'             SET RETURN INDICATOR   HD JUN86\n.X002    ANOP                                                  HD JUN86\n.*                                                             HD JUN86\n         AIF   (&RTYPE).R00\n         XR    15,15 .                  CLEAR RETURN CODE\n.R00     BR    14 .                     RETURN TO CALLER\n         AGO   .END\n.BR14    XC    8(4,13),8(13) .          CLEAR FWD CHAIN PTR\n         LM    0,12,20(13) .            LOAD SAVED REGS\n         L     14,12(0,13) .            AND RETURN\n.*                                                             HD JUN86\n         AIF   (NOT &XAW).X003                                 HD JUN86\n         OI    15(13),X'01'             SET RETURN INDICATOR   HD JUN86\n         AGO   .X004                                           HD JUN86\n.X003    ANOP                                                  HD JUN86\n         MVI   12(13),X'FF'             SET RETURN INDICATOR   HD JUN86\n.X004    ANOP                                                  HD JUN86\n.*                                                             HD JUN86\n         BR    14 .                     RETURN TO CALLER\n.END     ANOP\n.* NOW DECREMENT SIDX BACK TO PREVIOUS LEVEL\n         AIF   (&SIDX EQ 1).RET2  *NEVER DECR LESS THAN 1*\n&SIDX    SETA  &SIDX-1\n.RET2    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00Q\\x01\\x185/\\x01\\x19!O\\x129\\x00\\xcb\\x00\\xcb\\x00\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2018-12-18T00:00:00", "modifydate": "2019-08-02T12:39:51", "lines": 203, "newlines": 203, "modlines": 1, "user": "SBGOLOB"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*  CLEANED A BIT  . . . 08/17\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATER  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUMENTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFORE R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nR3       EQU   3                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\n         DS    0D\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   R14,R12,12(R13)    SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES,SP=0       RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    R1,8(,R13)         OUR SAVE AREA POINTER\n         ST    R13,4(,R1)         POINTER TO CALLER'S SAVE AREA\n         LR    R13,R1             @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(,R13)        POINT TO CALLER'S RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 RC IF BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 RC IF BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(,RML)              MESSAGE LENGTH\n         STH   R15,PUTLEN               PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(,R2)       @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(,R2)               REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    R2,R13                   @OUR SAVE AREA\n         LR    R3,R15                   SAVE RETURN CODE\n         L     R13,4(,R13)              @CALLER'S SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,R3                   RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLER'S REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL$": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00V\\x00\\x87\\x03/\\x01\\x17$o\\x02H\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "2017-09-03T02:48:56", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(EPUTL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB495119\n SETCODE AC(0)\n ENTRY   EPUTL\n NAME    EPUTL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL01": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\xc8\\x00\\xc8\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 200, "newlines": 200, "modlines": 0, "user": "HMDEAN"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL02": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\t\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\xc8\\x00\\xc8\\x00\\x13\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:09", "lines": 200, "newlines": 200, "modlines": 19, "user": "HMDEAN"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH     SBG MAY10\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT#": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00}\\x00}\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 125, "newlines": 125, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         EXIT# &RC=(15)\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GIFLVL,&GDOLVL                   IF/DO LEVEL\n         GBLA  &GEXCNT,&GDWCNT                   COUNTERS FOR LABELS\n         GBLB  &IFORSW#,&UNORSW#,&DWORSW#\n         GBLB  &IEXSW#                           IEXIT CONTROL SWITCH\n         GBLC  &SAVE#                            SAVE AREA FOR LINK REG\n         GBLC  &GLREG                            LINK REGISTER\n         GBLC  &REENT                            CODE TYPE INDICATOR\n         GBLC  &EXLIS                            LISTING TYPE INDICATOR\n         GBLC  &STARTEX                          FIRST MODULE NAME\n         GBLC  &ENTNAME                          CURRENT MOD NAME\n         LCLC  &LBLYSS                           TO GENERATE LABELS\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   (&GIFLVL EQ 0).L10\n         MNOTE 8,'YS000016-MISSING ENDIF STATEMENT(S)'\n&GIFLVL  SETA  0\n.L10     ANOP\n         AIF   (&GDOLVL EQ 0).L15\n         MNOTE 8,'YS000017-MISSING ENDDO/UNTIL/WHILE STATEMENT(S)'\n&GDOLVL  SETA  0\n&GDWCNT  SETA  0\n.L15     ANOP\n         AIF   (&IFORSW# EQ 0).L17\n         MNOTE 8,'YS000018-MISSING IF FOLLOWING IFOR(S)'\n&IFORSW# SETB  0\n.L17     ANOP\n         AIF   (&UNORSW# EQ 0).L17A\n         MNOTE 8,'YS000019-MISSING UNTIL FOLLOWING UNTILOR(S)'\n&UNORSW# SETB  0\n.L17A    ANOP\n         AIF   (&DWORSW# EQ 0).L17B\n         MNOTE 8,'YS000020-MISSING DOWHILE FOLLOWING DOWHLOR(S)'\n&DWORSW# SETB  0\n.L17B    ANOP\n.*\n         AIF   ('&RC'(1,1) EQ '(' AND '&RC' NE '(15)').ERR010\n         AGO   .OK\n.ERR010  ANOP\n         MNOTE 12,'YS000021 - &RC. IS INVALID PARAMETER'\n         MEXIT\n.*\n.**********************************************************************\n.*       SET UP GLOBAL VARIABLES                                      *\n.**********************************************************************\n.*\n.OK      ANOP\n         SEQCK EXIT                              PRED/SUCCESSOR CHECK\n.*\n.**********************************************************************\n.*       GENERATE CODE                                                *\n.**********************************************************************\n.*\n         SPACE\n         AIF   ('&RC' EQ '(15)').CODE010         IS RET.CODE IN REG15 ?\n         LA    15,&RC.(0,0)                      LOAD RETURN CODE\n.CODE010 ANOP\n.*\n         AIF   (&IEXSW# EQ 0).CODE015            IS IEXIT PRESENTED ?\n.*       GENERATE FIRST LABEL OF EXIT# TO BRANCH ON FROM IEXIT#\n&LBLYSS  SETC  'ZLEX&GEXCNT'                     GEN LABEL FOR IEXIT\n&LBLYSS  DS    0H\n&IEXSW#  SETB  0                                 TURN OFF IEXIT SWITCH\n.CODE015 ANOP\n.*\n.*       CHANGE COUNTER FOR SECOND LABEL OF EXIT# - LABEL OF SAREA\n&GEXCNT  SETA  &GEXCNT+1\n.*\n         AIF   ('&STARTEX' NE '&ENTNAME').CODE020  IS IT FIRST MODULE ?\n         B     ZLINEXIT                          EXIT FROM ROUTINE\n         AGO   .CODE040\n.*\n.CODE020 ANOP\n         AIF   ('&SAVE#' EQ 'YES').CODE030       IS SAREA STANDARD ?\n         AIF   ('&SAVE#' EQ 'NO').CODE050        IS THERE ANY SAREA ?\n         AIF   ('&SAVE#'(1,1) EQ '(').CODE060    IS SAREA REG ?\n.*\n.*       SAVE AREA IS USER SUPPLIED ADDRESS\n         L     &GLREG,&SAVE#                     RESTORE LINK REG\n         BR    &GLREG                            RETURN TO CALLER\n         AGO   .CODE040\n.*\n.CODE030 ANOP\n.*       NEXT STATEMENT USES SECOND LABEL TO RESTORE LINK REG\n         L     &GLREG,ZLEX&GEXCNT                RESTORE LINK REG\n         BR    &GLREG                            RETURN TO CALLER\n         AIF   ('&REENT' EQ 'N').CODE070         IS CODE REENT ?\nZLINDSCT DSECT\n.CODE070 ANOP\n.*\n.*       GENERATE SECOND LABEL OF EXIT# TO SAVE LINK REG\n&LBLYSS  SETC  'ZLEX&GEXCNT'                     GET LABEL\n&LBLYSS  DC    F'0'                              LINK REG SAVE AREA\n.*\n         AIF   ('&REENT' EQ 'N').CODE080         IS CODE REENT ?\n&SYSECT  CSECT\n.CODE080 ANOP\n.*\n         AGO   .CODE040\n.*\n.CODE050 ANOP\n         BR    &GLREG                            RETURN TO CALLER\n         AGO   .CODE040\n.*\n.CODE060 ANOP\n         LA    &GLREG,0&SAVE#                    RESTORE LINK REG\n         BR    &GLREG                            RETURN TO CALLER\n.*\n.CODE040 ANOP\n.*\n         SPACE\n         AIF   ('&EXLIS' EQ 'Y').CODE090         IS PRINT GEN ?\n         POP   PRINT\n.CODE090 ANOP\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENC": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x99\\x00\\x99\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 153, "newlines": 153, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         GENC  &P1,&REL,&P2,&OP,&LABEL\n         GBLC  &GTYPE\n         LCLB  &TRUEB#\n         LCLC  &WKC1\n&TRUEB#  SETB  1\n         AIF   ('&GTYPE' EQ 'WHILE' OR '&GTYPE' EQ 'IFOR').L05\n         AIF   ('&GTYPE' EQ 'UNTILOR' OR '&GTYPE' EQ 'WHILEOR').L05\n         AIF   ('&GTYPE' EQ 'DOWHLOR').L05\n&TRUEB#  SETB  0\n.L05     ANOP\n         AIF   ('&OP' EQ '').L100\n         AIF   ('&P1' EQ '' OR '&REL' EQ '' OR '&P2' EQ '').ER1\n&WKC1    SETC  'BNE'\n         AIF   ('&REL' EQ 'EQ' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'NE' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BNH'\n         AIF   ('&REL' EQ 'GT' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'LE' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BNL'\n         AIF   ('&REL' EQ 'LT' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'GE' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BE'\n         AIF   ('&REL' EQ 'NE' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'EQ' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BL'\n         AIF   ('&REL' EQ 'GE' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'LT' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BH'\n         AIF   ('&REL' EQ 'LE' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'GT' AND &TRUEB# EQ 1).L10\n         AGO   .ER2\n.L10     ANOP\n         AIF   ('&OP' EQ 'BCT').L40\n         AIF   ('&OP' EQ 'BXLE').L50\n         AIF   ('&OP' EQ 'BXH').L50\n         AIF   ('&OP' EQ 'TM').L20\n         AIF   ('&OP' EQ 'CLC').L30\n         AIF   ('&OP' EQ 'CLI').L30\n         AIF   ('&OP' EQ 'C').L30\n         AIF   ('&OP' EQ 'CH').L30\n         AIF   ('&OP' EQ 'CL').L30\n         AIF   ('&OP' EQ 'CR').L30\n         AIF   ('&OP' EQ 'CLR').L30\n         AIF   ('&OP' EQ 'CP').L30\n         AIF   ('&OP' EQ 'EX').L30\n         AIF   ('&OP' EQ 'LTR').L70\n         AGO   .ER3\n.L20     ANOP\n         AIF   ('&WKC1' EQ 'BNE').L25\n         AIF   ('&WKC1' NE 'BE').ER2\n&WKC1    SETC  'BO'\n         AGO   .L30\n.L25     ANOP\n&WKC1    SETC  'BNO'\n.L30     ANOP\n         &OP   &P1,&P2\n         &WKC1 &LABEL\n         MEXIT\n.L40     ANOP\n         AIF   ('&WKC1' NE 'BNE').ER2\n         AIF   ('&P2' NE '0').ER4\n         BCT   &P1,&LABEL\n         MEXIT\n.L50     ANOP\n         AIF   ('&OP' EQ 'BXLE' AND '&WKC1' NE 'BNH').ER2\n         AIF   ('&OP' EQ 'BXH' AND '&WKC1' NE 'BH').ER2\n         &OP   &P1,&P2,&LABEL\n         MEXIT\n.L70     ANOP\n         AIF   ('&P2' NE '0').ER4\n         &OP   &P1,&P1\n         &WKC1 &LABEL\n         MEXIT\n.L100    ANOP\n         AIF   ('&REL' NE '' OR '&P2' NE '').ER4\n         AIF   (&TRUEB# EQ 1).L105\n&WKC1    SETC  'BNE'\n         AIF   ('&P1' EQ 'EQUAL').L110\n&WKC1    SETC  'BE'\n         AIF   ('&P1' EQ 'NOTEQUAL').L110\n&WKC1    SETC  'BNL'\n         AIF   ('&P1' EQ 'LOW').L110\n&WKC1    SETC  'BL'\n         AIF   ('&P1' EQ 'NOTLOW').L110\n&WKC1    SETC  'BNH'\n         AIF   ('&P1' EQ 'HIGH').L110\n&WKC1    SETC  'BH'\n         AIF   ('&P1' EQ 'NOTHIGH').L110\n&WKC1    SETC  'BNZ'\n         AIF   ('&P1' EQ 'ZERO').L110\n         AIF   ('&P1' EQ 'ZEROS').L110\n&WKC1    SETC  'BZ'\n         AIF   ('&P1' EQ 'NOTZERO').L110\n&WKC1    SETC  'BNO'\n         AIF   ('&P1' EQ 'ONES').L110\n         AIF   ('&P1' EQ 'OVERFLOW').L110\n&WKC1    SETC  'BO'\n         AIF   ('&P1' EQ 'NOTONES').L110\n&WKC1    SETC  'BNP'\n         AIF   ('&P1' EQ 'PLUS').L110\n&WKC1    SETC  'BP'\n         AIF   ('&P1' EQ 'NOTPLUS').L110\n&WKC1    SETC  'BNM'\n         AIF   ('&P1' EQ 'MINUS').L110\n         AIF   ('&P1' EQ 'MIXED').L110\n&WKC1    SETC  'BM'\n         AIF   ('&P1' EQ 'NOTMINUS').L110\n         AGO   .ER4\n.L105    ANOP\n&WKC1    SETC  'BE'\n         AIF   ('&P1' EQ 'EQUAL').L110\n&WKC1    SETC  'BNE'\n         AIF   ('&P1' EQ 'NOTEQUAL').L110\n&WKC1    SETC  'BL'\n         AIF   ('&P1' EQ 'LOW').L110\n&WKC1    SETC  'BNL'\n         AIF   ('&P1' EQ 'NOTLOW').L110\n&WKC1    SETC  'BH'\n         AIF   ('&P1' EQ 'HIGH').L110\n&WKC1    SETC  'BNH'\n         AIF   ('&P1' EQ 'NOTHIGH').L110\n&WKC1    SETC  'BZ'\n         AIF   ('&P1' EQ 'ZERO').L110\n         AIF   ('&P1' EQ 'ZEROS').L110\n&WKC1    SETC  'BNZ'\n         AIF   ('&P1' EQ 'NOTZERO').L110\n&WKC1    SETC  'BO'\n         AIF   ('&P1' EQ 'ONES').L110\n         AIF   ('&P1' EQ 'OVERFLOW').L110\n&WKC1    SETC  'BNO'\n         AIF   ('&P1' EQ 'NOTONES').L110\n&WKC1    SETC  'BP'\n         AIF   ('&P1' EQ 'PLUS').L110\n&WKC1    SETC  'BNP'\n         AIF   ('&P1' EQ 'NOTPLUS').L110\n&WKC1    SETC  'BM'\n         AIF   ('&P1' EQ 'MINUS').L110\n         AIF   ('&P1' EQ 'MIXED').L110\n&WKC1    SETC  'BNM'\n         AIF   ('&P1' EQ 'NOTMINUS').L110\n         AGO   .ER4\n.L110    ANOP\n         &WKC1 &LABEL\n         MEXIT\n.ER1     MNOTE 8,'REQUIRED OPERAND MISSING'\n         MEXIT\n.ER2     MNOTE 8,'INVALID RELATION'\n         MEXIT\n.ER3     MNOTE 8,'INVALID OPCODE'\n         MEXIT\n.ER4     MNOTE 8,'INVALID OPERAND'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HMDCHRON": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x01\\x98\\x01\\x98\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 408, "newlines": 408, "modlines": 0, "user": "HMDEAN"}, "text": "HMDC     TITLE 'HMDCHRONO - SUPER TIME-N-DATE ROUTINE'      *HMD 03/85*\nHMDCHRON CSECT                    TIME/DATE SUBROUTINE\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n**  S U P E R    T I M E  -  A N D  -  D A T E   S U B R O U T I N E **\n**                                                                   **\n**  ON ENTRY TO THIS SUBROUTINE:                            *HMD 03/85*\n**                                                          *HMD 03/85*\n**                                                          *HMD 03/85*\n**  R1 ========> A(DATE) - JULIAN FOUR BYTES 00YYDDDF       *HMD 03/85*\n**                       - GREG   EIGHT BYTES MM/YY/DD      *HMD 03/85*\n**                       - GREG   EIGHT BYTES MM-YY-DD      *HMD 03/85*\n**                       - ZERO   GET DATE FROM SYSTEM      *HMD 03/85*\n**                                                          *HMD 03/85*\n**               A(WORK) - 72 BYTE UNINITIALIZED WORK AREA  *HMD 03/85*\n**                       - FILLED IN BY THIS PROGRAM AND    *HMD 03/85*\n**                         MAPPED BY 'HMDTIME' MACRO        *HMD 03/85*\n**                                                          *HMD 03/85*\n*   UPON EXIT, THE FIELDS DESCRIBED BY THE MACRO 'HMDTIME'  *HMD 03/85*\n*   WILL BE FILLED IN. BASICALLY, THIS IS THE TIME OF DAY   *HMD 03/85*\n*   AND DATE IN VARIOUS FORMATS. YOU CAN ADDRESS THE WORK   *HMD 03/85*\n*   AREA AND ACCESS THE FORMATTED VALUES FOR USE IN YOUR    *HMD 03/85*\n*   PROGRAM.                                                *HMD 03/85*\n*                                                           *HMD 03/85*\n*   THE TIME RETURNED BY THIS PROGRAM IS THE TIME THE       *HMD 03/85*\n*   PROGRAM WAS CALLED AND IS OBTAINED VIA THE 'TIME'       *HMD 03/85*\n*   MACRO.                                                  *HMD 03/85*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n         EJECT\n         REGS\n         SPACE 2                                            *HMD 03/85*\nRNULL    EQU   0                   FOR BALR, ETC\nNULL     EQU   0                   VALUE OF ZERO\nZERO     EQU   0                   ZERO - ZORRO\nONE      EQU   1                   VALUE OF 1\nRPARM    EQU   1                   PARAMETER REGISTER\nRWORK2   EQU   2                   WORK REGISTER\nRWORK3   EQU   3                   WORK REGISTER\nPPARM    EQU   3                   POINTS TO PASSED PARM AREA\nRW4      EQU   4                   WORK REGISTER\nRW5      EQU   5                   WORK REGISTER\nX        EQU   7\nRMNDR    EQU   8\nDVDND    EQU   RMNDR\nBINMTH   EQU   9\nBINYR    EQU   9\nQOT      EQU   9\nNINE     EQU   9                   DISPLACEMENT OF NINE       @HMD78265\nCORR     EQU   11\nRBASE    EQU   12                  BASE REGISTER\nRSAVE    EQU   13                  BASE REGISTER FOR WORKING STORAGE\n*                                                           *HMD 03/85*\nD0       EQU   ZERO                DISPLACEMENT OF ZERO     *HMD 03/85*\nD4       EQU   4                   DISPLACEMENT OF FOUR     *HMD 03/85*\nD8       EQU   8                   DISPLACEMENT OF EIGHT    *HMD 03/85*\nD12      EQU   12                  DISPLACEMENT OF TWELVE   *HMD 03/85*\n*                                                           *HMD 03/85*\nMASK     EQU   15                  ICM MASK                 *HMD 03/85*\n*                                                           *HMD 03/85*\nFXIG     EQU   X'0F'               FOR FIXING SIGN\nGIXF     EQU   X'F0'               FOR FIXING SIGN\nLEAPTM   EQU   X'12'               FOR TESTING LEAP YEAR\nCOLON    EQU   C':'                SEPERATOR\nSPACE    EQU   C' '                SEPERATOR\nDOT      EQU   C'.'                SEPERATOR\nSLASH    EQU   C'/'                SEPERATOR\nDASH     EQU   C'-'                SEPERATOR\nCOMMA    EQU   C','                SEPERATOR\n         EJECT\n         SAVE  (14,12),T,HMDCHRON_&SYSDATE_&SYSTIME_HOWARD_M_DEAN\n         BALR  RBASE,RNULL          ESTABLISH ADDRESSIBILITY\n         USING *,RBASE\n         USING TIMESTOR,RSAVE       ADDRESS WORKING STORAGE\n         USING HMDTIME,PPARM        ADDRESS THE PARAMETER AREA\n         LR    PPARM,RPARM          SAVE PARM ADDRESS       *HMD 03/85*\n         GETMAIN R,LV=HMDLV,SP=NINE GET STORAGE IN SUBPOOL NINE\n         ST    RSAVE,4(,RPARM)      SAVE R13\n         ST    RPARM,8(,RSAVE)      CHAIN BACKWARDS TOO\n         LR    RSAVE,RPARM          GET SAVE AREA ADDRESS\n         MVC   PARMAP(PARMLEN),D0(PPARM)                    *HMD 03/85*\n*                                   SAVE PASSED PARMS       *HMD 03/85*\n         L     PPARM,AWORK          ADDRESS THE WORK AREA   *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         TIME  DEC                  GET DATE/TOD            *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         ST    R0,TIME              SAVE TIME VALUE         *HMD 03/85*\n         ST    R1,DATE              SAVE DATE VALUE         *HMD 03/85*\n         EJECT                                              *HMD 03/85*\n*************************************************************HMD 03/85*\n*  CHECK THE FORMAT OF THE DATE AND CALL JULIAN OR GREGOR   *HMD 03/85*\n*                                                           *HMD 03/85*\n*  IF DATE IS 00YYDDDF THEN LEAVE AS IS                     *HMD 03/85*\n*  OTHERWISE IF DATE IS MM/DD/YY THEN                       *HMD 03/85*\n*  CONVERT TO 6 BYTE YYMMDD FORMAT AND PASS TO JULIAN       *HMD 03/85*\n*                                                           *HMD 03/85*\n*  WORKING DATE WILL ALWAYS BE JULIAN                       *HMD 03/85*\n*************************************************************HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         L     RWORK2,ADATE       GET THE DATE ADDRESS      *HMD 03/85*\n         CLC   KF0,D0(RWORK2)     NULL WORD?                *HMD 03/85*\n         BE    FORMDTIM           YES, USE TODAY'S DATE     *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   DATE,0(RWORK2)     ASSUME JULIAN DATE        *HMD 03/85*\n         CLI   2(RWORK2),DASH     IS THIS A JULIAN DATE?    *HMD 03/85*\n         BE    CALLER             NO, MUST BE GREGORIAN     *HMD 03/85*\n         CLI   2(RWORK2),SLASH    TRY THE SLASH             *HMD 03/85*\n         BNE   FORMDTIM           NOPE, MUST BE JULIAN NOW  *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\nCALLER   DS    0H                                           *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   DATEG,0(RWORK2)    MOVE IN THE GREG DATE     *HMD 03/85*\n         MVC   DATEWORK,FABTAB    MOVE IN SNEEKY TABLE      *HMD 03/85*\n         TR    DATEWORK,DATEG-1   SNEEKY, AREN'T I?         *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   GDATE,DATEWORK     EASE IN THE DATE          *HMD 03/85*\n         XC    JDATE,JDATE        CLEAR JULIAN DATE         *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\nREACHOUT CALL  JULIAN,(GDATE,JDATE),VL,MF=(E,CALLMAC)       *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   DATE,JDATE         GET JULIAN DATE           *HMD 03/85*\n         EJECT                                              *HMD 03/85*\n*                                                           *HMD 03/85*\n* FORMAT THE TIME OF DAY                                    *HMD 03/85*\n*                                                           *HMD 03/85*\nFORMDTIM EQU   *\n         SPACE 1                                            *HMD 03/85*\n         TIME  BIN                GET THE SYSTEM TIME       *HMD 03/85*\n         LR    R9,R0              GET THE CURRENT TIME\n         SPACE 1                                            *HMD 03/85*\n         SR    R8,R8              CLEAR FOR DIVIDE\n         D     R8,KF100           GET THE TIME IN SECONDS\n         CVD   R8,DBLWORK         PACK IT IN\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMEHUNS(2),DBLWORK(8)  MAKE IT READABLE\n         OI    TIMEHUNS+1,GIXF    FIX SIGN\n         MVI   COLON1,COLON       MOVE IN SEPARATOR\n         SR    R8,R8              CLEAR FOR DIVIDE\n         D     R8,KF60            SECONDS\n         CVD   R8,DBLWORK         PACK IT IN\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMESECS(2),DBLWORK(8)  MAKE IT READABLE\n         OI    TIMESECS+1,GIXF    FIX SIGN\n         MVI   COLON2,COLON       INSERT SEPARATOR\n         SR    R8,R8              CLEAR FOR DIVIDE\n         D     R8,KF60            MINUTES\n         CVD   R8,DBLWORK         PACK IT IN\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMEMINS(2),DBLWORK(8)  MAKE IT READABLE\n         OI    TIMEMINS+1,GIXF     FIX SIGN\n         MVI   COLON3,COLON       INSERT SEPARATOR\n         CVD   R9,DBLWORK         GET HOURS\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMEHRS(2),DBLWORK(8) MAKE IT READABLE\n         OI    TIMEHRS+1,GIXF     FIX SIGN\n         MVC   HMDTIMER,BIGTIME   MOVE TIME TO PARM AREA\n         EJECT\n*\n*   GET TIME IN FORM HH.MM.SS  PM/AM\n*\nTIMEDEC  DS    0H\n         MVC   PATTERN,PATURN     MOVE EDIT PATTERN\n         LA    X,INDIC            LOAD AM/PM ADDRESS\n         OI    TIME+3,FXIG        FIX SIGN\n         CP    TIME,PTERM         IS IT AM OR PM?\n         BC    4,AM               IF LT NOON INDICATE AM\n         CP    TIME,PTERM+4(4)    COMPARE TO 1:00 PM\n         BC    11,*+10            IF HIGH OR = SUB 12 FROM TIME\nNOON     AP    TIME,PTERM(4)      ADD 12 TO HOUR\nPM       SP    TIME,PTERM(4)      SUBTRACT 12 FROM HOUR\n         LA    X,3(X)             INDICATE PM\nAM       CLI   TIME,ZERO          IS IS BETWEEN MIDNITE AND 1 AM?\n         BNE   EDIT               NO, LEAVE TIME ALONE\n         MVI   TIME,X'12'         OTHERWISE INDICATE 12:00 AM\nEDIT     ED    PATTERN,TIME       MAKE IT READABLE\n         MVC   PATTERN+9(3),NULL(X)  MOVE IN AM/PM INDICATOR\n         MVC   HMDTIMED(11),PATTERN+1  MOVE LINE TO OUTPUT BUFFER\n         EJECT\n*\n*  FORMAT THE DATE IN VARIOUS WAYS\n*\nFORMDAT  EQU   *\n         L     R1,DATE        GET TODAYS DATE\n         MVC   TEMP2(2),DATE+2  SAVE DAYS DIGITS\n         MVC   WORKWORD,DATE    MOVE DATE TO WORKAREA\n         MVO   WORKWORD+1(3),WORKWORD(2)  MAKE 00YYDDDS INTO 00000YYS\n         UNPK  YEAR(2),WORKWORD+2(2)  MAKE YEAR READABLE\n         OI    YEAR+1,GIXF        FIX SIGN\n         SR    X,X            CLEAR MONTH REG.\n         ST    X,DBLWORK      CNVT YEAR TO BINARY\n         MVC   DBLWORK+4(4),WORKWORD\n         CVB   R0,DBLWORK     CONVERT IT\n         L     R9,MONMSK+8    GET MASK\n         LA    R14,3          SET OUTER LOOP\n         TM    DATE+1,ONE     IF ODD, NOT LEAP YEAR\n         BO    MON1X                                        *HMD 02/80*\n         TM    DATE+1,LEAPTM  VALID TILL 1999               *HMD 02/80*\n         BM    MON1X          NOT A LEAP YEAR               *HMD 02/80*\n         O     R9,FEBFIX\nMON1X    ST    X,DBLWORK+4    CLEAR FOR CVB\n         MVC   DBLWORK+6(2),TEMP2\n         CVB   R0,DBLWORK\n         LA    X,ONE\n         B     MON2X\nMON1     SLL   R14,2\n         L     R9,MONMSK-4(R14)   SUBTRACT CODE\n         SRL   R14,2          BACK TO ORIGINAL\nMON2X    LA    R15,4          SET INNER LOOP\nMON2     SR    R8,R8          CLEAR SUBTRACT REG\n         SLDL  R8,8           GET NEXT MONTHS LENGTH\n         SR    R0,R8          SUB MON LENGTH FROM DATA\n         BC    12,MONOVR      OVERDRAW\n         LA    X,ONE(X)       INCR MONTH NUMBER\n         BCT   R15,MON2       CLOSE INNER LOOP\n         BCT   R14,MON1       CLOSE OUTER LOOP\n         B     MONOUT\nMONOVR   AR    R0,R8\nMONOUT   CVD   R0,DBLWORK\n         UNPK  DAY(2),DBLWORK+6(2)  GET DAY OF WEEK\n         OI    DAY+1,GIXF     FIX SIGN\n         LR    R14,X          GET MONTH NUMBER\n         MH    R14,KH9        MULTIPLY BY NINE\n         LA    R15,MONTAB-9   SET FOR INDEX INTO TABLE\n         AR    R14,R15        INDEX MONTH NAME\n         MVC   HMDDAYYR(3),NULL(R14) MOVE IN SHORT MONTH NAME\n         MVC   HMDMONTH,NULL(R14)  MOVE IN MONTH NAME\n         MVI   HMDDAYYR+3,SPACE    MOVE IN SPACE\n         MVC   HMDDAYYR+4(2),DAY   MOVE IN DAY\n         MVI   HMDDAYYR+6,COMMA    MOVE IN COMMA\n         MVC   HMDDAYYR+7(2),CENTURY  MOVE IN YEAR\n         MVC   HMDDAYYR+9(2),YEAR  FINISH MOVING IN YEAR\n         CVD   X,DBLWORK           PREPARE TO GET MONTH\n         UNPK  MONTH(2),DBLWORK+6(2) MAKE IT READABLE\n         OI    MONTH+1,GIXF       FIX SIGN\n         MVC   HMDENGDT(2),MONTH  MOVE IN MONTH VALUE\n         MVI   HMDENGDT+2,SLASH   SEPERATOR\n         MVC   HMDENGDT+3(2),DAY  MOVE IN DAY VALUE\n         MVI   HMDENGDT+5,SLASH   SEPERATOR\n         MVC   HMDENGDT+6(2),YEAR  MOVE IN YEAR VALUE\n         EJECT\n*\n*  THIS WILL GET YOU THE DAY OF THE WEEK\n*\nDAYOWK   DS    0H\n         LR    R14,R0\n         XC    DECDATE(4),DECDATE\n         MVC   INMY(4),HMDDAYYR+7\n         MVC   INMTH,MONTH\n         MVC   INDAY,DAY\n         PACK  DECMY,INDAY\n         CVB   CORR,DECDATE\n         PACK  DECMTH,INMTH\n         CVB   BINMTH,DECDATE\n         IC    BINMTH,FFTBL-1(BINMTH)\n         AR    CORR,BINMTH\n         PACK  DECMY,INMY\n         SP    DECMY,P3\n         OI    YRSIGN,FXIG\n         ZAP   DECMY,DECYR\n         CVB   BINYR,DECDATE\n         SR    DVDND,DVDND\n         LA    X,3\n         D     DVDND,KF100\n* CENTURY MOD 4\n         NR    QOT,X\n         NR    X,RMNDR\n         SRA   RMNDR,2\n         AR    QOT,RMNDR\n         MH    QOT,KH5\n         AR    CORR,QOT\n         AR    CORR,X\n         SR    CORR-1,CORR-1\n         D     CORR-1,KF7\n         LR    R14,CORR-1\n         STH   R14,HMDDAYNO       SAVE ORGIN ZERO DAY NMBR  *HMD 03/85*\n         LA    R15,DAYTAB         INDEX                     *HMD 03/85*\n         MH    R14,KH9               INTO                   *HMD 03/85*\n         AR    R14,R15                  THE TABLE           *HMD 03/85*\n         MVC   HMDDAYNM,0(R14)\n         LH    R14,HMDDAYNO       MAKE IT ORIGIN ONE        *HMD 03/85*\n         AH    R14,KH1                                      *HMD 03/85*\n         STH   R14,HMDDAYNO       SAVE ORIGIN ONE DAY NMBR  *HMD 03/85*\n         MVC   HMDJULDT(2),YEAR\n         MVI   HMDJULDT+2,DOT\n         UNPK  HMDJULDT+3(3),TEMP2(2)\n         OI    HMDJULDT+5,GIXF\n         EJECT\n*\n*  ALL DONE...GO BACK\n*\nEXIT     DS    0H                 WE'RE DONE FINALLY\n         LR    RPARM,RSAVE\n         L     RSAVE,4(,RSAVE)\n         FREEMAIN R,LV=HMDLV,A=(RPARM),SP=NINE\n         RETURN (14,12),T,RC=0\n         EJECT\n*\n*  CONSTANTS\n*\nKF100    DC    F'100'             CONSTANT OF 100\nKF60     DC    F'60'              CONSTANT OF 60\nKF7      DC    F'7'               CONSTANT OF 7\nKF0      DC    F'0'               CONSTANT OF ZERO          *HMD 03/85*\nKH1      DC    H'1'               CONSTANT OF ONE           *HMD 03/85*\nKH5      DC    H'5'               CONSTANT OF 5\nKH9      DC    H'9'               CONSTANT OF 9\nP3       DC    P'3'               PACKED CONSTANT OF 3\nPATURN   DC    X'4020217A20207A2020'   TO EDIT TIME\nINDIC    DC    C' AM'             MORNING\n         DC    C' PM'             NOON OR NIGHT\nCENTURY  DC    C'19'              CENTURY (GOOD TILL YEAR 2000)\n         DS    0F                 ALIGN TO FULLWORD\nPTERM    DC    X'1200000F'        SUBTRACTED FROM TIME IF AFTERNOON\n         DC    X'1300000F'        1300 O'CLOCK\nMONMSK   DC    X'1E1F1E1F1F1E1F1F1F1C1F1E'\nFFTBL    DC    AL1(0,3,2,5,0,3,5,1,4,6,2,4)  FUDGE FACTOR TABLE\nFEBFIX   DC    A(X'00010000') TO FIX LEAP YEARS\n* TRICKY TRANSLATE TABLE                                    *HMD 03/85*\nFABTAB   DC    X'0708010204050303'                          *HMD 03/85*\n         EJECT\n*\n*   DAY TABLE\n*\nDAYTAB   DC    CL9'SUNDAY'\n         DC    CL9'MONDAY'\n         DC    CL9'TUESDAY'\n         DC    CL9'WEDNESDAY'\n         DC    CL9'THURSDAY'\n         DC    CL9'FRIDAY'\n         DC    CL9'SATURDAY'\n         EJECT\n*\n*  MONTH TABLE\n*\nMONTAB   DC    CL9'JANUARY'\n         DC    CL9'FEBRUARY'\n         DC    CL9'MARCH'\n         DC    CL9'APRIL'\n         DC    CL9'MAY'\n         DC    CL9'JUNE'\n         DC    CL9'JULY'\n         DC    CL9'AUGUST'\n         DC    CL9'SEPTEMBER'\n         DC    CL9'OCTOBER'\n         DC    CL9'NOVEMBER'\n         DC    CL9'DECEMBER'\n         TITLE 'STORAGE MAPS FOR HMDCHRON'\nTIMESTOR DSECT                    WORKING STORAGE FOR HMDCHRON\nSAVEAREA DS    18F                OS/VS STANDARD SAVE AREA\nTIME     DS    F                  TIME OF DAY\nDATE     DS    F                  DATE (JULIAN PACKED)\nDATEG    DS    CL8                DATE (GREGORIAN MM/DD/YY) *HMD 03/85*\n*                                                           *HMD 03/85*\nDATEWORK DS    CL8                WORK AREA FOR GREG DATE   *HMD 03/85*\n*                                                           *HMD 03/85*\n* PASSED PARM SAVE AREA                                     *HMD 03/85*\n*                                                           *HMD 03/85*\nPARMAP   DS    0A                 PASSED PARMS              *HMD 03/85*\nADATE    DS    A                  ADDRESS OF DATE VALUE     *HMD 03/85*\nAWORK    DS    A                  ADDRESS OF 'HMDTIME' AREA *HMD 03/85*\nPARMLEN  EQU   *-PARMAP           TOTAL PARM LENGTH         *HMD 03/85*\n*                                                           *HMD 03/85*\n*  PARAMETER LIST FOR JULGREG SUBROUTINE                    *HMD 03/85*\n*                                                           *HMD 03/85*\nCALLMAC  CALL  ,(NULL,NULL),MF=L                            *HMD 03/85*\n*                                                           *HMD 03/85*\n*                                                           *HMD 03/85*\nJDATE    DS    F                  JULIAN DATE WORK AREA     *HMD 03/85*\nGDATE    DS    CL6                YYMMDD - GREGORIAN DATE   *HMD 03/85*\n*                                                           *HMD 03/85*\nWORKWORD DS    F                  A WORD TO WORK WITH\nDBLWORK  DS    D                  A DOUBLE-WORD TO WORK WITH\n*                                                           *HMD 03/85*\nBIGTIME  DS    0CL11              HH.MM.SS.TH - TIME OF DAY\nTIMEHRS  DS    CL2                HH PART OF ABOVE\nCOLON1   DS    C                  COLON\nTIMEMINS DS    CL2                MM PART OF ABOVE\nCOLON2   DS    C                  COLON\nTIMESECS DS    CL2                SS PART OF ABOVE\nCOLON3   DS    C                  COLON\nTIMEHUNS DS    CL2                HH PART OF ABOVE\n*                                                           *HMD 03/85*\nPATTERN  DS    CL9                FOR EDITING TIME\nAMPM     DS    CL3                AM/PM INDICATOR\nTEMP2    DS    XL4                TEMPORARY STORAGE AREA\nYEAR     DS    CL2                CURRENT YEAR\nMONTH    DS    CL2                MONTH NUMBER\nDAY      DS    CL2                DAY NUMBER\nALIGN    DS    0D                 ALIGN TO DOUBLEWORD\nDECDATE  DS    0PL8               WORK AREA\n         DS    4XL1\nDECMY    DS    0PL4               WORK AREA\nDECYR    DS    PL3\n         ORG   DECYR+2            OVERLAY STRUCTURE\nDECMTH   DS    0PL2\nYRSIGN   DS    PL1\n         DS    PL1\nINPUT    DS    0F             DSECT FOR CRAZY DAY OF WEEK CODE\nDAYY     DS    0ZL1\nDATEE    DS    0ZL8\nINMY     DS    0ZL6\n         DS    ZL4\nINMTH    DS    ZL2\nINDAY    DS    ZL2\nHMDLV    EQU   ((*-TIMESTOR+7)/8)*8  ROUND LENGTH TO DOUBLEWORD\n         EJECT\n         HMDTIME  ,               RETURN AREA FOR TIME OF DAY\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HTIME": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\xa4\\x00\\xa4\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 164, "newlines": 164, "modlines": 0, "user": "HMDEAN"}, "text": "HTIM     TITLE 'DISPLAY THE TIME OF DAY AND DATE FOR TSO'\n***********************************************************************\n*                                                                     *\n* MODULE NAME = HTIME                                                 *\n*                                                                     *\n* STATUS = COMMAND PROCESSOR                                          *\n*                                                                     *\n* AUTHOR = HOWARD M. DEAN                                             *\n*          SYNTEX USA M/S A5-5                                        *\n*          3401 HILLVIEW AVENUE                                       *\n*          PALO ALTO, CA 94303                                        *\n*          (415) 852-1792\n*                                                                     *\n* FUNCTION = PUT OUT AN INFORMATIONAL MESSAGE INDICATING THE DATE     *\n*            AND TIME OF DAY VIA THE PUTLINE FACILITY OF TSO.         *\n*                                                                     *\n* ENTRY POINTS = HTIME                                                *\n*                                                                     *\n* EXIT NORMAL =  EXIT TO MVS IS ALWAYS WITH A RETURN CODE OF ZERO     *\n*                                                                     *\n* EXIT ERROR = NO ERROR EXIT POINTS                                   *\n*                                                                     *\n* RESTRICTIONS = NONE                                                 *\n*                                                                     *\n* REGISTER-CONVENTIONS =                                              *\n*                                                                     *\n*  REGISTER 0: USED BY SYSTEM - UNPREDICTABLE                         *\n*  REGISTER 1: PARAMETER REGISTER                                     *\n*              USED BY SYSTEM AND SUBROUTINES - UNPREDICTABLE         *\n*                                                                     *\n*  REGISTERS 2-12: WORK REGISTERS AVAILABLE FOR USE BY PROGRAM        *\n*  REGISTER  13 ADDRESS OF AN 18 WORD SAVE AREA                       *\n*               AND POINTER TO WORK AREA/TSO DSECTS                   *\n*  REGISTER  14 RETURN ADDRESS                                        *\n*  REGISTER  15 ENTRY POINT OF HTIME                                  *\n*                                                                     *\n* ATTRIBUTES -  HTIME IS REENTERABLE AND REFRESHABLE                  *\n*                                                                     *\n* MACROS = SAVE, RETURN, GETMAIN, FREEMAIN, CALL, REGS,               *\n*          LUSE, LDROP, CPPL, IOPL, TSOENTER, TSOLEAVE                *\n*                                                                     *\n* EXTERNAL                                                            *\n*    ROUTINES =   HMDCHRON (LINKED WITH PROGRAM)                      *\n*                 IKJPUTL  (PUTLINE SUBROUTINE VIA CVT)               *\n*                                                                     *\n* INSTALLED 05/28/85 - HOWARD M. DEAN                                 *\n***********************************************************************\nHTIME    TSOENTER  PL=(CPPL,IO),REGS=YES,WORK=WORKLEN\n         SPACE 2\n         LA    R0,TSOUSER          R0 -> USER AREA\n         LA    R1,WORKLEN          R1 = LENGTH OF AREA\n         SR    R15,R15             R15 = 0\n         MVCL  R0,R14              CLEAR WORKAREA\n         SPACE 2\n         MVC   OUTONE(ONEMSGL),ONEMSG\n         MVC   OUTTWO(TWOMSGL),TWOMSG\n         MVC   OLD,=F'1'           ONE MESSAGE SEGMENT\n         SPACE 1\n         CALL  HMDCHRON,(TODAY,HMDTIME),VL,MF=(E,CALLEX)\n         SPACE 1\n         MVC   ONEJUL(L'HMDJULDT),HMDJULDT\n         MVC   ONETIM(L'HMDTIMER),HMDTIMER\n         SPACE 2\n         MVC   TWODAY(L'HMDDAYNM),HMDDAYNM\n         MVC   TWODATE(L'HMDDAYYR),HMDDAYYR\n         MVC   TWOTIME(11),HMDTIMED\n         SPACE 1\n         LA    R1,OUTONE            PUT OUT FIRST MESSAGE\n         BAL   R14,PUTOUT           CALL SUBROUTINE\n         LA    R1,OUTTWO            PUT OUT SECOND MESSAGE\n         BAL   R14,PUTOUT           CALL SUBROUTINE\n         B     EOJ                  RETURN TO MVS\n         EJECT\nPUTOUT   DS    0H                 PUTLINE SUBROUTINE\n         ST    R14,SAVELINK       SAVE LINK REGISTER\n         ST    R1,OLDADDR         SAVE MESSAGE ADDRESS\n         XC    PTPB(PTPBLEN),PTPB CLEAR THE PARM BLOCK\n         XC    TSOECB,TSOECB      CLEAR THE EVENT CONTROL BLOCK\n         SPACE 2\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),             X\n               MF=(E,IOPL)\n         SPACE 2\n         L     R14,SAVELINK       RETSORE LINK REGISTER\n         BR    R14                RETURN TO CALLER\n         EJECT\nEOJ      TSOLEAVE ISN=LTORG,RETCODE=0\n         SPACE 2\n*\n* PROGRAM CONSTANTS\n*\nONEMSG   DS    0C\n         DC    AL2(ONEMSGL),AL2(00)\n         DC    C'TSO036I '\n         DC    C'DATE='\n         DC    C'XX.XXX'\n         DC    C'      TIME='\n         DC    C'XX:XX:XX:XX'\nONEMSGL  EQU   *-ONEMSG\n         SPACE 2\nTWOMSG   DS    0C\n         DC    AL2(TWOMSGL),AL2(00)\n         DC    C'TSO037I '\n         DC    C'WEDNESDAY'       NAME OF DAY\n         DC    C' '\n         DC    C'XXXXXXXXXXX'     DATE MMM DD,YYYY\n         DC    C' '\n         DC    C'XXXXXXXXXXX'     XX:XX:XX  AM/PM\nTWOMSGL  EQU   *-TWOMSG\n         EJECT\nTSODSECT DSECT\n*\n* LIST FORM MACRO INSTRUCTIONS\n*\nPTPB     PUTLINE MF=L             PUTLINE MACRO - LIST FORM\nPTPBLEN  EQU   *-PTPB\n         SPACE 2\nCALLEX   CALL  ,(0,0),MF=L        CALL MACRO - LIST FORM\n         SPACE 2\n*\n* PROGRAM VARIABLES\n*\nOLD      DS    F                  NUMBER OF MESSAGE SEGMENTS\nOLDADDR  DS    A                  ADDRESS OF FIRST SEGMENT\n         SPACE 2\nSAVELINK DS    F                  R14 LINK REGISTER SAVE AREA\n         SPACE 1\nTODAY    DS    F                  TODAY'S DATE\nHMDTIME  DS    0CL72              AREA RETURNED BY HMDCHRON\n*******************************************************************\n** THIS 72 BYTE AREA MAPS THE RETURN AREA FOR THE 'HMDCHRON'     **\n** SUBROUTINE. THE TIME OF DAY AND DATE IS RETURNED AS MAPPED.   **\n** A FULLWORD DATE FIELD CAN BE PASSED TO THE ROUTINE AND THAT   **\n** VALUE WILL BE USED IN THE CALCULATIONS. IF ZEROED, THE        **\n** CURRENT DATE (VIA SVC 11)  WILL BE USED IN THE COMPUTATIONS.  **\n** THE ADDRESS OF THIS AREA IS IN THE SECOND WORD OF THE PLIST.  **\n*******************************************************************\nHMDJULDT DS    CL6                JULIAN DATE (FORM 'YY.DDD')\nHMDENGDT DS    CL8                GREGORIAN DATE (FORM MM/DD/YY)\nHMDMONTH DS    CL9                MONTH NAME\nHMDDAYYR DS    CL11               DATE IN FORM MMM DD,YYYY\nHMDDAYNO DS    H                  HALF WORD DAY NUMBER\nHMDDAYNM DS    CL9                DAY OF THE WEEK\nHMDTIMER DS    CL11               TIME OF DAY (24 HR FORM HH.MM.SS.HH)\nHMDTIMED DS    CL8                TIME OF DAY (12 HR FORM HH.MM.SS)\nHMDAMPM  DS    CL3                AM/PM INDICATOR (' AM' OR ' PM')\nHMDPAD   DS    CL(72-(*-HMDTIME)) PAD TO 72 BYTES\n         SPACE 2\nOUTONE   DC    AL2(00),AL2(00)    LENTH/OFFSET\nONEMID   DC    C'TSO036I '\n         DC    C'DATE='\nONEJUL   DC    C'XX.XXX'\n         DC    C'      TIME='\nONETIM   DC    C'XX:XX:XX:XX'\n         SPACE 2\nOUTTWO   DC    AL2(00),AL2(00)    LENGTH/OFFSET\nTWOMID   DC    C'TSO037I '\nTWODAY   DC    C'WEDNESDAY'       NAME OF DAY\n         DC    C' '\nTWODATE  DC    C'XXXXXXXXXXX'     DATE MMM DD,YYYY\n         DC    C' '\nTWOTIME  DC     C'XXXXXXXXXXX'     XX:XX:XX  AM/PM\n         SPACE 1\nWORKLEN  EQU   ((*-TSOUSER+7)/8)*8   ALIGN TO DOUBLEWORD\n         END   HTIME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFDB401": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x03\\x0b\\x03\\x0b\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 779, "newlines": 779, "modlines": 0, "user": "HMDEAN"}, "text": "B401     TITLE 'IEFDB401 DYNAMIC ALLOCATION VALIDATION EXIT'\nIEFDB401 CSECT\nIEFDB401 RMODE ANY                                             HD JUL86\nIEFDB401 AMODE 31                                              HD JUL86\n***********************************************************************\n*                                                                     *\n* MODULE NAME = IEFDB401 (OS/VS2) VERSION 2, RELEASE 1, LEVEL 0       *\n*               2.1.0 - 26JUN86                                  @HMD1A\n*                                                                     *\n* DESCRIPTIVE NAME = DYNAMIC ALLOCATION EXIT                          *\n*                                                                     *\n* COPYRIGHT = COPYRIGHT (C) HOWARD M. DEAN 1985                       *\n*                                                                     *\n* AUTHOR    = HOWARD M. DEAN                                          *\n*             SR. SYSTEMS PROGRAMMER                                  *\n*   |H|       SYNTEX(USA)                                             *\n*   |M|       3401 HILLVIEW AVENUE                                    *\n*   |D|       PALO ALTO, CA 94303                                     *\n*             (415) 852-1792                                          *\n*                                                                     *\n* STATUS = VERSION 2, RELEASE 1, LEVEL 0                              *\n*                                                                     *\n* FUNCTION = THE FUNCTIONAL FLOW OF THIS MODULE FOLLOWS:              *\n*                                                                     *\n*    1. CHECK FOR A TSO TIMESHARING USER AND SET FLAGS                *\n*                                                                     *\n*    2. IF A TSO USER, OBTAIN PSCB ADDRESS AND CHECK FOR              *\n*       INSTALLATION DATA (PSCBATR2). SET FLAG INDICATING             *\n*       'TSOUSER' VOLUME MUST BE USED.                                *\n*                                                                     *\n*    3. CHECK DYNAMIC ALLOCATION PARAMETER LIST FOR SPECIFIC          *\n*       VOLUME REQUEST. IF THERE IS A SPECIFIC VOLUME REQUEST         *\n*       CHECK THE FOLLOWING:                                          *\n*                                                                     *\n*        * IF A TSO USER, CHECK FOR A 'UNIT=' TEXT UNIT               *\n*          AND ADD 'UNIT=SYSALLDA' TEXT UNIT IF NOT FOUND             *\n*                                                                     *\n*        * IF A TSO USER, CHECK FOR A 'UNIT=' TEXT UNIT               *\n*          AND IF SUPPLIED, THEN LET THE REQUEST THROUGH ASIS         *\n*                                                                     *\n*    4. IF UNSPECIFIC VOLUME REQUST PREFORM THE FOLLOWING:            *\n*                                                                     *\n*        * IF NAME OF DATASET MATCHES THE MASK TABLE,                 *\n*          SUBSTITUTE 'UNIT=WORK' OR ADD TO TEXT UNIT CHAIN           *\n*          IF NO UNIT SUPPLIED.                                       *\n*                                                                     *\n*        * IF NO MATCH OF DATASET NAME, THEN SUBSTITUTE               *\n*          UNIT NAME FROM THE PSCB THAT WAS SAVED ABOVE.              *\n*                                                                     *\n*    5. FOR NON-TSO DYNAMIC ALLOCATION USERS, TAKE THE FOLLOWING      *\n*       ACTIONS:                                                      *\n*                                                                     *\n*        * IF   'UNIT=SYSDA'                                          *\n*               'UNIT=DISK'                                           *\n*               'UNIT=SYSSQ'                                          *\n*               'UNIT=SYSALLDA'                                       *\n*               'UNIT=(ANY DASD GENERIC NAME)                         *\n*                                                                     *\n*          AND NON-SPECIFIC REQUEST, SUBSTITUTE 'UNIT=WORK'           *\n*                                                                     *\n*        * IF AND ESOTERIC UNIT NAME OTHER THAN ABOVE,                *\n*          ALLOW REQUEST TO PROCEED.                                  *\n*                                                                     *\n*     6 CHECK FOR CERTAIN EXCEPTIONS AND EXIT IF CONDITIONS MET:      *\n*                                                                     *\n*        * APF AUTHORIZED FUNCTION REQUEST                            *\n*        * ALLOCATION OF \"OLD\" OR \"MOD\" DATASET                       *\n*        * ALLOCATION OF SYSOUT DATASET                               *\n*        * ALLOCATION OF VIO OR TAPE DATASET                          *\n*        * SUBSYSTEM REQUEST                                          *\n*        * ALLOCATION OF \"DUMMY\" OR \"TERMINAL\" DATASET                *\n*        * SPECIFIC VOLUME PROCESSING                                 *\n*                                                                     *\n* NOTES = SEE BELOW                                                   *\n*                                                                     *\n*    DEPENDENCIES =                                                   *\n*                                                                     *\n*            CLASS ONE CHARACTER CODE.  THE EBCDIC CHARACTER CODE     *\n*            WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED   *\n*            IF A DIFFERENT CHARACTER SET IS USED FOR EXECUTION.      *\n*                                                                     *\n*    RESTRICTIONS = NONE                                              *\n*                                                                     *\n*    REGISTER CONVENTIONS =                                           *\n*                                                                     *\n*            R1 - INPUT PARAMETER REGISTER                            *\n*            R2 - SAVE OF INPUT PARAMETER ADDRESS LIST                *\n*            R3 - POINTER TO COMMUNICATION VECTOR TABLE (CVT)         *\n*            R4 - POINTS TO TEXT UNITS; S99TUPL                       *\n*            R5 - POINTS TO PROTECTED STEP CONTROL BLOCK              *\n*            R6 - POINTS TO SVC99 TEXT UNITS ADDRESS VECTOR           *\n*            R7 - WORK REGISTER   - W1                                *\n*            R8 - WORK REGESTER   - W2                                *\n*            R9 - POINTS TO ADDRESS OF SVC99 REQUEST BLOCK            *\n*            R10- POINTS TO A 500 BYTE SUPPLIED WORKAREA              *\n*            R11- 2ND BASE REGISTER                                   *\n*            R12- 1ST BASE REGISTER                                   *\n*            R13- POINTS TO A 72 BYTE SAVE AREA                       *\n*            R14- POINTS TO THE RETURN ADDRESS                        *\n*            R15- WORK REGISTER AND RETURN CODE REGISTER              *\n*                                                                     *\n*    PATCH LABEL = NO PATCH AREA PROVIDED                             *\n*                                                                     *\n*    PROCESSOR = ASSEMBLER H                                          *\n*                                                                     *\n*    MODULE SIZE = SEE EXTERNAL SYMBOL DICTIONARY                     *\n*                                                                     *\n*    ATTRIBUTES = REENTRANT, REFRESHABLE, ENABLED, READ ONLY,         *\n*                 PRIVILEGED, SUPERVISOR STATE, SCHEDULER KEY         *\n*                 RMODE=ANY, AMODE=31                                 *\n*                                                                     *\n* ENTRY POINT = IEFDB401                                              *\n*                                                                     *\n*    PURPOSE = SEE FUNCTION                                           *\n*                                                                     *\n* INPUT = STANDARD REGISTERS                                          *\n*                                                                     *\n*    REG 1  - INPUT PARAMETER LIST                                    *\n*                                                                     *\n*        * ADDRESS OF A COPY OF THE SVC99 INPUT REQUEST BLOCK         *\n*        * ADDRESS OF THE ADDRESS OF A WORK AREA (500 BYTES)          *\n*        * FULLWORD CONTAINING THE LENGTH OF THE WORK AREA (500 BYTES)*\n*        * ADDRESS OF THE EIGHT CHARACTER JOBNAME                     *\n*        * ADDRESS OF ACCOUNTING INFORMATION FROM THE JOB CARD        *\n*        * ADDRESS OF THE EIGHT CHARACTER STEPNAME                    *\n*        * ADDRESS OF THE EIGHT CHARACTER PROGRAM NAME                *\n*        * ADDRESS OF ACCOUNTING INFORMATION FROM THE EXEC CARD       *\n*                                                                     *\n*    REG 13 - => CALLER'S SAVE AREA                                   *\n*    REG 14 - RETURN TO IEFW21SD                                      *\n*                                                                     *\n* OUTPUT = STANDARD REGISTERS AND/OR OPERATOR MESSAGE                 *\n*                                                                     *\n* EXIT-NORMAL = IEFDB400 - RETURN TO DYNAMIC ALLOCATION               *\n*                                                                     *\n*    REG 15 =  0 CONTINUE WITH REQUEST                                *\n*    REG 15 = \u00ac0 TERMINATE PROCESSING                                 *\n*                                                                     *\n* EXIT-ERROR = NONE                                                   *\n*                                                                     *\n* EXTERNAL REFERENCES = NONE                                          *\n*                                                                     *\n*    CONTROL BLOCK = CVT, TCB, JSCB, PSCB, IEFZB4D0, IEFZB4D2, UCB    *\n*                                                                     *\n*    EQUATES       = SEE BELOW                                        *\n*                                                                     *\n* TABLES = NONE                                                       *\n*                                                                     *\n* MACROS = WTO, CALL, EXTRACT, FREEMAIN, SAVE, RETURN                 *\n*                                                                     *\n* CHANGE ACTIVITY = SEE BELOW                                         *\n*                                                                     *\n* 06/25/86 - RE-WRITTEN FOR UNIT NAME PROJECT:                   @HMD1A\n*            INITIAL - VERSION 2.1.0                             @HMD1A\n*                                                                @HMD1A\n***********************************************************************\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*      IEFDB401 DECISION MATRIX (DYNAMIC ALLOCATION CONTROL EXIT)     *\n*                                                                     *\n*---------------------------------------------------------------------*\n* |                            |                |                     |\n* |   UNITNAME SPECIFICATION   | VOLSER REQUEST |    EXIT ACTION      |\n* |_____________________________________________|_____________________|\n* |                            |                |                     |\n* |                            |                |                     |\n* | NONE - IMPLIES THAT THE    | SPECIFIC       | SUBSTITUTE UNIT=DISK|\n* | DEFAULT UNITNAME FROM      |________________|_____________________|\n* |                            |                |                     |\n* | SYS1.UADS WILL BE USED     |                |                     |\n* |                            | NON-SPECIFIC   | SUBSTITUTE UNIT=WORK|\n* |                            |                | OR UNIT=TSOUSER     |\n* |                            |                | (REFER TO NOTE BELOW|\n* |____________________________|________________|_____________________|\n* |                            |                |                     |\n* |                            |                |                     |\n* | UNIT=SYSDA OR UNIT=DISK OR | SPECIFIC       | NONE REQUIRED       |\n* | UNIT=SYSSQ OR UNIT=SYSALLDA|________________|_____________________|\n* |                            |                |                     |\n* |                            |                |                     |\n* |                            | NON-SPECIFIC   | SUBSTITUTE UNIT=WORK|\n* |____________________________|________________|_____________________|\n* |                            |                |                     |\n* |                            |                |                     |\n* | ANY GENERIC DASD UNITNAME  | SPECIFIC       | NONE REQUIRED       |\n* |                            |________________|_____________________|\n* |                            |                |                     |\n* |                            |                |                     |\n* |                            | NON-SPECIFIC   | SUBSTITUTE UNIT=WORK|\n* |___________________________________________________________________|\n* |                            |                |                     |\n* |                            |                |                     |\n* | ANY ESOTERIC DASD UNITNAME | SPECIFIC       | NONE REQUIRED       |\n* | EXCEPT: SYSDA, DISK, SYSSQ,|______________________________________|\n* |                            |                |                     |\n* | OR SYSALLDA                |                |                     |\n* |                            | NON-SPECIFIC   | NONE REQUIRED       |\n* |___________________________________________________________________|\n* ---------------------------------------------------------------------\n*\n*\n*NOTE:  FOR NON-SPECIFIC ALLOCATIONS USING THE DEFAULT UNITNAME FROM\n*       SYS1.UADS, THE UNITNAME SUBSTITUTED WILL DEPEND UPON THE\n*       DATASET NAME. UNIT=TSOUSER WILL BE USED, UNLESS THE DATASET\n*       NAME MATCHES ONE FROM THE FOLLOWING EXCEPTION LIST:\n*\n*              USERID.ADMPRINT.REQUEST.#NNNNN\n*              USERID.GDDM.REQUEST.#NNNNN\n*              USERID.IDTFLOG.LIST\n*              USERID.JCLCHECK.XXXXXXXX\n*              USERID.IDTFLOG.LIST\n*              USERID.SPFLOGN.LIST\n*              USERID.WORK.SELJOB\n*              USERID.WORK.JLSCRN\n*              USERID.WORK.DOCOUT\n*\n*IF THE DATASET NAME SPECIFIED MATCHES ONE OF THE ABOVE, IEFDB401 WILL\n*SUBSTITUTE UNIT=WORK.\n***********************************************************************\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\nIEFDB401 CSECT                    DYNAMIC ALLOCATION EXIT\n         ENTRY  COHMD             COPYRIGHT NOTICE             HD JUL86\n         ENTRY  EXCEPT            DATASET EXCEPTION TABLE      HD JUL86\n         ENTRY  BYPASS            BYPASS PROCESSING            HD JUL86\n         SAVE   (14,12),T,IEFDB401_VERSION_2.1.0_&SYSDATE._&SYSTIME\n         SPACE 1\n         USING  IEFDB401,R12,R11  ESTABLISH BASE(S)\n         USING  CVTMAP,R3         ADDRESS THE CVT\n         USING  S99TUNIT,R4       TEXT UNITS\n         USING  PSCB,R5           PROTECTED STEP CNTL BLOCK\n         USING  S99TUPL,R6        TEXT UNIT VECTOR TABLE\n         USING  S99RB,R9          SVC99 REQUEST BLOCK\n         USING  IEFWORK,R10       BASE FOR WORK AREA\n         SPACE  1\n         LR     R12,R15           ENTRY POINT IEFDB401\n         SPACE  1                                              HD JUL86\n         B      IEFDB40A          BRANCH AROUND ID             HD JUL86\nCOHMD    DC     C'IEFDB401 COPYRIGHT (C) 1986 HOWARD M. DEAN'  HD JUL86\n         SPACE  1                                              HD JUL86\nIEFDB40A LA     R11,2048          POINT HALF WAY UP\n         SLL    R11,1             MULITPLY BY 2 FOR 4096\n         LA     R11,0(R11,R12)    LOAD SECOND BASE START ADDRESS\n         L      R3,CVTPTR         LOAD POINTER TO CVT\n         L      R9,D0(,R1)        POINT TO REQUEST BLOCK\n         L      R10,D4(,R1)       ADDR OF ADDR OF WORK AREA\n         L      R10,D0(,R10)      ACTUAL ADDRESS OF SUPPLIED WORK AREA\n         LR     R2,R1             SAVE INPUT PARAMTER LIST POINTER\n*                                                              HD JUL86\n         MVI    DYNAFLAG,DYNAZERO       CLEAR DYNAMIC FLAGS    HD JUL86\n         XC     SAVEAREA(18*4),SAVEAREA CLEAR TO ZERO          HD JUL86\n*                                                              HD JUL86\n         LA     R1,SAVEAREA       FETCH ADDRESS OF S/A\n         ST     R13,D4(,R1)       CHAIN\n         ST     R1,D8(,R13)            SAVE\n         LR     R13,R1                       AREAS\nBYPASS   NOP    IEFEXITN                                       HD JUL86\n*\n         SPACE  2\n*\n*  VALIDATE THE REQUEST BLOCK AND SET UP POINTERS\n*\nVALIDRB  CLI    S99VERB,S99VRBAL  DSNAME ALLOCATION?           HD JUL86\n         BNE    IEFEXITN          NO, EXIT\n         L      R6,S99TXTPP       GET ADDRESS OF TEXT POINTERS HD JUL86\n         N      R6,HIBIT          CHECK FOR TEXT POINTERS      HD JUL86\n         BZ     IEFEXITN          STRANGE, NO TEXT POINTERS    HD JUL86\n         ST     R6,TUPLPTR        SAVE POINTER TO TABLE\n*\n* R6 NOW CONTAINS A POINTER TO THE TEXT UNIT VECTOR TABLE (TUVT)\n*\n         TITLE  'IEFDB401 - EXTRACT TSO USERID (IF ANY) AND SET FLAGS'\n*                                                              HD JUL86\n* CHECK FOR TSO USER - SET FLAG SO A DIFFERENT PROCESS         HD JUL86\n* CAN BE USED FURTHER ON DOWN IN THE CODE                      HD JUL86\n*                                                              HD JUL86\n         SPACE  2\n         XC     EXTRA(EXTRALEN),EXTRA   CLEAR EXTRACT LIST FORM\n         SPACE  1\nVANILLA  EXTRACT  EXTRACTA,'S',FIELDS=(TJID,PSB),MF=(E,EXTRA)\n         SPACE  1\n         L      R5,TJID           GET TSO ASID                 HD JUL86\n         LTR    R5,R5             WAS AN ASID RETURNED?        HD JUL86\n         BZ     SCANTXT           NO, NOT A TSO USER           HD JUL86\n         OI     DYNAFLAG,DYNATSO  INDICATE THIS IS A TSO USER  HD JUL86\n*\n*  INDICATE WE MUST SUBSTITUTE 'UNIT=TSOUSER' IF USERDATA FOUND\n*\nSCANPSB  L      R5,PSCBAD         GET RETURNED PSCB ADDRESS    HD JUL86\n         IC     W1,PSCBATR2+1     CHECK FOR INSTALLATION DATA  HD JUL86\n         N      W1,LOBYTE         WAS THERE ANYTHING THERE?    HD JUL86\n         BNZ    SCANTXT           YES, NOT A PRIVILEGED USER   HD JUL86\n         OI     DYNAFLAG,DYNAPRIV A PRIVILEDGED TSO USER       HD JUL86\n         TITLE  'IEFDB401 - SCAN TEXT UNIT BLOCKS'\n*\n*  SCAN FOR DATASET NAME, VOLUME, UNIT TEXT UNITS AND SAVE\n*  POINTERS IN THE WORK AREA\n*\nSCANTXT  DS     0H                                             HD JUL86\n         XC     TUPVSTA(TUPVEND-TUPVSTA),TUPVSTA               HD JUL86\n*                                    CLEAR VECTOR SAVE AREA    HD JUL86\n         SPACE 1                                               HD JUL86\nSCAN00   L      R4,S99TUPTR          R4 ==> TEXT UNIT          HD JUL86\n         N      R4,HIBIT             TEST FOR NULL UNIT        HD JUL86\n         BZ     NEXTUNIT             NULL UNIT, GET NEXT ONE\n*\n* CHECK FOR ONES WE CAN LET THROUGH\n*\n         CLI    S99TUKEY+1,DALSSREQ  SUBSYSTEM REQUEST?\n         BE     IEFEXITN             YES, BYPASS\n         CLI    S99TUKEY+1,DALSYSOU  IS THIS SYSOUT?\n         BE     IEFEXITN             YES, BYPASS\n         CLI    S99TUKEY+1,DALDUMMY  DUMMY DATASET?\n         BE     IEFEXITN             YES, BYPASS\n         CLI    S99TUKEY+1,DALTERM   IS THIS THE TERMINAL?\n         BE     IEFEXITN             YES, BYPASS\n         SPACE  2\n*\n* NOW COMES THE REAL FUN\n*\n         SPACE  2\nSCAN01   CLI    S99TUKEY+1,DALUNIT   IS THIS A UNIT KEY?\n         BNE    SCAN02               NOPE, CHECK ANOTHER\n         SLR    W1,W1                CLEAR WORK REGISTER       HD JUL86\n         ICM    W1,M3,S99TULNG       LOAD LENGTH OF UNIT       HD JUL86\n         BZ     NEXTUNIT             ZERO LENGTH IS INVALID    HD JUL86\n         BCTR   W1,R0                DECREMENT FOR 'EXECUTE'   HD JUL86\n         ST     R4,TUUNITP           SAVE POINTER TO TEXT UNIT\n         ST     R6,TUUNITX           SAVE POINTER TO VECTOR\n         OI     DYNAFLAG,DYNAUNIT    INDICATE WE GOT UNIT      HD JUL86\n         LA     W2,SYSDTAB           LOAD 'SYSDA' TABLE ADDR   HD JUL86\n         SPACE  1                                              HD JUL86\n**                                                             HD JUL86\n* SCAN 'SYSDA' UNIT NAME TABLE FOR MATCH'                      HD JUL86\n**                                                             HD JUL86\nSCAN01A  CLC    D0(L'SYSDTAB,W2),ENDOTAB                       HD JUL86\n*                                    CHECK FO END'O TABLE      HD JUL86\n         BE     NEXTUNIT             GET NEXT TEXT UNIT        HD JUL86\n         CLC    S99TUPAR,D0(W2)      CHECK FOR MATCH           HD JUL86\n         EX     W1,*-6               CHECK FOR LENGTH OF UNIT  HD JUL86\n         LA     W2,L'SYSDTAB(W2)                               HD JUL86\n         BNE    SCAN01A              IF NO MATCH, LOOP         HD JUL86\n         OI     DYNAFLAG,DYNANIL     INDICATE NAME IN LIST     HD JUL86\n         B      NEXTUNIT                                       HD JUL86\n         SPACE  1                                              HD JUL86\nSCAN02   CLI    S99TUKEY+1,DALVLSER  IS THIS A VOLSER KEY?\n         BNE    SCAN03               NOPE, CHECK ANOTHER\n         ST     R4,TUPVOLUM          SAVE POINTER TO TEXT UNIT\n         ST     R6,TUPVOLUX          SAVE ADDRESS FOR LATER\n         CLC    S99TULNG(2),ZERO     LENGTH OF ZERO?           HD JUL86\n         BE     NEXTUNIT             YES, SCAN NEXT UNIT       HD JUL86\n         CLC    S99TUPAR(6),BLANKS   IS VOLSER BLANKS          HD JUL86\n         BE     *+8                  YES, INVAID VOLUME        HD JUL86\n         OI     DYNAFLAG,DYNAVOLU    INDICATE SPECIFIC VOLUME  HD JUL86\n         B      NEXTUNIT             GET NEXT TEXT UNIT        HD JUL86\n         SPACE  1                                              HD JUL86\nSCAN03   CLI    S99TUKEY+1,DALDSNAM  DSNAME TEXT UNIT?\n         BNE    SCAN04               NOPE, CHECK ANOTHER\n         SLR    W1,W1                CLEAR WORK REGISTER       HD JUL86\n         ICM    W1,M3,S99TULNG       LENGTH OF TEXT UNIT       HD JUL86\n         BZ     NEXTUNIT             INVALID LENGTH, FORGET IT HD JUL86\n         BCTR   W1,0                 DECREMENT FOR 'EX'        HD JUL86\n         CLI    S99TUPAR,C'&&'       TEMPORARY DATASET NAME?   HD JUL86\n         BE     NEXTUNIT             AS IF ITS NOT EVEN THERE  HD JUL86\n         ST     R4,TUPDSN            SAVE POINTER TO TEXT UNIT HD JUL86\n         ST     R6,TUPDSNX           SAVE \"DSNAME\" UNIT PTR    HD JUL86\n         OI     DYNAFLAG,DYNADSN     INDICATE DSNAME FOUND     HD JUL86\n         SPACE  1\n         MVC    UWORK(44),UPPERC     CLEAR WORK AREA           HD JUL86\n         EX     W1,DSNMOV            MOVE NAME TO WORK AREA    HD JUL86\n         SPACE  1                                              HD JUL86\n         LA     R14,EXCEPT           LOAD EXCEPTION TABLE ADDR HD JUL86\n         LA     R15,UWORK            LOAD DSNAME ADDRESS       HD JUL86\n         BAL    W2,MATCHIT           BRANCH TO MATCH ROUTINE   HD JUL86\n         SPACE  1                                              HD JUL86\n         LTR    R15,R15              DID WE FIND A MATCH?      HD JUL86\n         BZ     *+8                  NO, CONTINUE              HD JUL86\n         OI     DYNAFLAG,DYNAMDSN    WE FOUND A MATCH          HD JUL86\n         B      NEXTUNIT             CONTINUE WITH NEXT TU     HD JUL86\n         SPACE  1\nSCAN04   CLI    S99TUKEY+1,DALSTATS  D/S STATUS TEXT UNIT?\n         BNE    SCAN05               NOPE, CHECK ANOTHER\n         ST     R4,TUPSTATS          SAVE POINTER TO TEXT UNIT\n         B      NEXTUNIT             GET NEXT TEXT UNIT\nSCAN05   DS     0H\n         B      NEXTUNIT             FOR ADDING MORE CHECKS\n*\n* ADD ADDITIONAL CHECKS HERE..NO WHERE TO GO FOR NOW\n*\nNEXTUNIT TM     S99TUPL,S99TUPLN     LAST TEXT UNIT?\n         BO     ENDSCAN              YES, END SCAN\n         LA     R6,D4(,R6)           GET NEXT POINTER\n         B      SCAN00               CONTINUE WITH SCAN\n*\nENDSCAN  ST     R6,TUPLAST           SAVE LAST UNIT POINTER\n         B      PROCESS              CONTINUE PROCESSING\n         TITLE  'IEFDB401 - MAIN PROCESSING ROUTINE'\nPROCESS  DS     0H\n**\n** PROCESS THE TEXT UNITS\n**\nCKDISP   L      R4,TUPSTATS      POINTER TO 'DISP' UNIT        HD JUL86\n         N      R4,HIBIT         TEST FOR NULL ENTRY           HD JUL86\n         BZ     CKUNIT           DISP(NEW,...) DEFAULT         HD JUL86\n         CLI    S99TUPAR,S99NEW  IS IT NEW?\n         BNE    IEFEXITN         NO, BYPASS CHECK              HD JUL86\n         SPACE  1\n***************************************************************HD JUL86\n*  THIS COULD INTRODUCE AN ERROR. IF 'DISP=MOD' AND DATASET    HD JUL86\n*  DOES NOT EXIST, THEN WE REALLY SHOULD SUBSTITUTE THE        HD JUL86\n*  CORRECT UNIT TYPE.  HOWEVER, IF THE DATASET DOES EXIST      HD JUL86\n*  THEN THE SUBSTITUTION MAY FAIL THE REQUEST. THERE IS NO     HD JUL86\n*  WAY FOR US TO KNOW IF IT EXISTS WITHOUT GOING THROUGH A     HD JUL86\n*  LOT OF UNNECESSARY OVERHEAD. SO THEREFORE, WE'LL TAKE THE   HD JUL86\n*  EASY WAY OUT AND IGNORE ANYTHING BUT A 'NEW' REQUEST.       HD JUL86\n***************************************************************HD JUL86\n         SPACE  1                                              HD JUL86\n         TITLE  'IEFDB401 - PERFORM DATA SET NAME CHECKING'\n**\n**  CHECK UNIT (IF PRESENT) FOR NON-DASD\n**\nCKUNIT   DS     0H               CONTINUE PROCESSING           HD JUL86\n         TM     DYNAFLAG,DYNAUNIT                              HD JUL86\n*                                WAS UNIT SUPPLIED?            HD JUL86\n         BZ     PROCTUTU         CONTINUE                      HD JUL86\n         L      R4,TUUNITP       GET POINTER TO UNIT TEXT      HD JUL86\n         SLR    W1,W1            CLEAR WORK REGISTER           HD JUL86\n         ICM    W1,M3,S99TULNG   LOAD LENGTH IN WORK REG       HD JUL86\n         BZ     PROCTUTU         JUST TO BE SURE               HD JUL86\n         BCTR   W1,0             LENGTH OF UNIT NAME           HD JUL86\n         CLC    S99TUPAR(0),TA   TAPE GETS LEFT ALONE          HD JUL86\n         EX     W1,*-6           CHECK FOR TAPE                HD JUL86\n         BE     IEFEXITN         ONLY DASD                     HD JUL86\n         CLC    S99TUPAR(0),CA   LEAVE CARTRIDGE ALONE         HD JUL86\n         EX     W1,*-6           CHECK FOR CARTRIDGE           HD JUL86\n         BE     IEFEXITN         ONLY DASD                     HD JUL86\n         CLC    S99TUPAR(0),VI   VIO GETS LEFT ALONE           HD JUL86\n         EX     W1,*-6           CHECK FOR VIO                 HD JUL86\n         BE     IEFEXITN         DO NOT PROCESS 'VIO'          HD JUL86\n         B      PROCTUTU         PROCESS THE TEXT UNITS        HD JUL86\n         TITLE  'IEFDB401 - PROCESS THE TEXT UNITS - NON-TSO'  HD JUL86\n*-------------------------------------------------------------*HD JUL86\n**  PROCESS THE SPECIFIC CASES OF ACTION AS OUTLINED IN THE  **HD JUL86\n**  DECISION MATRIX AT THE BEGINNING OF THE PROGRAM          **HD JUL86\n*-------------------------------------------------------------*HD JUL86\nPROCTUTU DS     0H                                             HD JUL86\n         TM     DYNAFLAG,DYNATSO IS THIS A TSO USER?           HD JUL86\n         BO     PROCTSO          YES, PROCESS THE TSO CASE     HD JUL86\n         TM     DYNAFLAG,DYNAVOLU                              HD JUL86\n         BO     VOLSUP           BRANCH IF VOLSER SUPPLIED     HD JUL86\n         TM     DYNAFLAG,DYNAUNIT                              HD JUL86\n         BZ     GO2WORK          NO UNIT SUPPLIED, 'UNIT=WORK' HD JUL86\n         SPACE  1                                              HD JUL86\nUNITSUP  DS     0H               UNIT NAME SUPPLIED            HD JUL86\n         TM     DYNAFLAG,DYNANIL                               HD JUL86\n         BZ     IEFEXITN         UNIT NAME NOT IN LIST         HD JUL86\n         SPACE  1                                              HD JUL86\nGO2WORK  DS     0H                                             HD JUL86\n         MVC    TUPARM00(UNITWKL),UNITWK                       HD JUL86\n*                                MOVE IN UNIT=WORK             HD JUL86\n         B      ENDUP            AND CHAIN IT IN               HD JUL86\n         SPACE  1                                              HD JUL86\nVOLSUP   DS     0H               NON-TSO SPECIFIC VOLUME       HD JUL86\n         TM     DYNAFLAG,DYNAUNIT    WAS UNIT SUPPLIED         HD JUL86\n         BO     IEFEXITN         VOLUME/UNIT SUPPLIED          HD JUL86\n         SPACE  1                                              HD JUL86\n         MVC    TUPARM00(UNITSAL),UNITSA                       HD JUL86\n*                                MOVE IN 'SYSALLDA'            HD JUL86\n         B      ENDUP            AND CHAIN IT IN               HD JUL86\n         TITLE  'IEFDB401 - PROCESS THE TEXT UNITS - TSO'      HD JUL86\nPROCTSO  DS     0H                                             HD JUL86\n         TM     DYNAFLAG,DYNAVOLU                              HD JUL86\n         BO     TSOVSUP          TSO AND SPECIFIC VOLUME       HD JUL86\n         TM     DYNAFLAG,DYNAUNIT                              HD JUL86\n         BO     TSOUNIT          TSO AND SPECIFIC UNIT         HD JUL86\n         SPACE  1\n* NO UNIT OR VOLUME SERIAL SPECIFIED                           HD JUL86\n         SPACE  1\nTSOG2D   TM     DYNAFLAG,DYNADSN FOUND A DSNAME?               HD JUL86\n         BZ     TSOG2W           NO, TEMPORARY - GO TO WORK    HD JUL86\n         TM     DYNAFLAG,DYNAPRIV                              HD JUL86\n         BO     TSOG2W           PRIVILEGED, GO TO WORK PACK   HD JUL86\n         TM     DYNAFLAG,DYNAMDSN                              HD JUL86\n         BZ     TSOG2S           NO MATCH ==> 'UNIT=TSOUSER'   HD JUL86\n         SPACE  1                                              HD JUL86\nTSOG2W   DS     0H               INSERT 'UNIT=WORK'            HD JUL86\n         MVC    TUPARM00(UNITWKL),UNITWK                       HD JUL86\n*                                MOVE IN UNIT=WORK             HD JUL86\n         B      ENDUP            AND CHAIN IT IN               HD JUL86\n         SPACE  1                                              HD JUL86\nTSOG2S   DS     0H               INSERT 'UNIT=TSOUSER'         HD JUL86\n         MVC    TUPARM00(UNITTSL),UNITTS                       HD JUL86\n*                                MOVE IN 'UNIT=TSOUSER'        HD JUL86\n         B      ENDUP            AND CHAIN IT IN               HD JUL86\n         SPACE  1                                              HD JUL86\nTSOVSUP  DS     0H               TSO SPECIFIC VOLUME           HD JUL86\n         TM     DYNAFLAG,DYNAUNIT    WAS UNIT SUPPLIED         HD JUL86\n         BO     IEFEXITN         UNIT + VOLSER IS WHAT YOU GET HD JUL86\n         SPACE  1                                              HD JUL86\n         MVC    TUPARM00(UNITSAL),UNITSA                       HD JUL86\n*                                MOVE IN 'SYSALLDA'            HD JUL86\n         B      ENDUP            AND CHAIN IT IN               HD JUL86\n         SPACE  1                                              HD JUL86\nTSOUNIT  DS     0H               UNIT SUPPLIED + NO VOLSER     HD JUL86\n         TM     DYNAFLAG,DYNANIL NAME IN 'SYSDA' LIST          HD JUL86\n         BZ     IEFEXITN         NO, RETURN TO CALLER          HD JUL86\n         B      TSOG2D           CHECK FOR DSNAME SUPPLIED     HD JUL86\n         SPACE  1                                              HD JUL86\n         TITLE  'IEFDB401 - CHAIN IN NEW TEXT UNIT POINTER'    HD JUL86\nENDUP    DS     0H               CHAIN IN NEW POINTER AND EXIT HD JUL86\n         SPACE  1                                              HD JUL86\n         L      R6,TUUNITX       GET VECTOR TABLE POINTER      HD JUL86\n         N      R6,HIBIT         POINTER SUPPLIED?             HD JUL86\n         BZ     *+10             DON'T ZERO OUT LOCATION ZERO! HD JUL86\n         MVC    S99TUPTR,ZERO    ZERO OUT OLD UNIT POINTER     HD JUL86\n         SPACE  1                                              HD JUL86\n         LA     R4,TUPARM00      GET PARM ADDRESS              HD JUL86\n         L      R6,TUPLAST       GET LAST UNIT POINTER         HD JUL86\n         NI     S99TUPTR,DYNAHEXF-S99TUPLN                     HD JUL86\n         SPACE  1                                              HD JUL86\n         LA     R6,D4(R6)        INCREMENT TO NEXT POINTER     HD JUL86\n         ST     R4,S99TUPTR      SAVE UNIT PARM                HD JUL86\n         OI     S99TUPTR,S99TUPLN                              HD JUL86\n         B      IEFEXITN         IN CASE WE ADD SOMETHING      HD JUL86\n         TITLE  'IEFDB401 - EXIT ROUTINES'\n**\n**  EXIT ROUTINES - EXIT TO IEFDB400\n**\nIEFEXITN L      R13,SAVEAREA+4    NORMAL EXIT ROUTINE\n         LA     R15,0             NORMAL RETURN CODE\n         RETURN (14,12),T,RC=(15)\n         SPACE  2\nIEFEXITA L      R13,SAVEAREA+4    ABNORMAL EXIT ROUTINE\n         LA     R15,4             ABNORMAL RETURN CODE\n         RETURN (14,12),T,RC=(15)\n         TITLE  'IEFDB401 - SUBROUTINES '\n*--------------------------------------------------------------------*\n**               MATCHIT - TABLE MATCH ROUTINE                      **\n**                                                                  **\n**  BAL  R7,MATCHIT                                                 **\n**                                                                  **\n**  R14 = POINTS TO 1ST DSNAME IN MASK TABLE                        **\n**  R15 = POINTS TO DSNAME IN TEXT UNIT                             **\n**                                                                  **\n**  THIS ROUTINE DOES FIXED LENGTH MATCHING OF DATASETS.  A         **\n**  TABLE ENTRY OF '$USYS.DATA033*.G****V**' WILL MATCH             **\n**  '$USYS.DATA033D.G0001V00' BUT '$USYS.DATA033*.G0001V' WILL      **\n**  NOT.  AN ASTERISK ('*') MEANS ANY * CHARACTER IN THAT           **\n**  POSITION. MUST HAVE AS MANY ASTERISKS/CHARS AS NEEDED TO        **\n**  COMPLETE THE FULL DATASET NAME.                                 **\n**                                                                  **\n*--------------------------------------------------------------------*\n         SPACE  2\nMATCHIT  DS     0H\n         MVC    MTCHMASK,0(R14)   COPY TABLE DATASET NAME MASK\n         OC     MTCHMASK,UPPERC   UPPERCASE THE DSNAME\n         CLC    MTCHMASK,UPPERC   TEST FOR BLANK MASK\n         BE     MATRET0           YES - BYPASS\n         TR     MTCHMASK,MTCHTRAN ZERO ANY \"I-DON'T CARE\" CHARACTER\n         MVC    MTCHWORK,MTCHMASK COPY TRANSLATED MASK\n         NC     MTCHMASK,0(R14)   COPY TABLE DATASET NAME MASK\n         BZ     MATRET0           EXIT\n         NC     MTCHWORK,0(R15)   COPY DATASET NAME TO BE MATCHED\n         CLC    MTCHMASK,MTCHWORK TEST IF MASK MATCHES\n         BE     MATRET0           YES! IT MATCHES\nMATCH10  DS     0H\n         LA     R14,44(,R14)      POINT TO NEXT NAME\n         CLI    0(R14),DYNAHEXF   END OF TABLE?\n         BNE    MATCHIT           RETURN AND TRY AGAIN\n         SPACE  1\nMATRET4  DS     0H                NO MATCH\n         LA     R15,D4            LOAD BAD RETURN CODE\n         BR     W2                RETURN TO SENDER\n         SPACE  1\nMATRET0  DS     0H                RETURN AS FOUND\n         LA     R15,D0            LOAD GOOD RETURN CODE\n         BR     W2                RETURN TO SENDER\n         TITLE  'IEFDB401 - CONSTANTS  AND EQUATES'\n*---------------------------------------------------------------*\n**                        EQUATES                              **\n*---------------------------------------------------------------*\nD0       EQU    0                 DISPLACEMENT OF ZERO\nD2       EQU    2                 DISPLACEMENT OF TWO\nD4       EQU    4                 DISPLACEMENT OF FOUR\nD8       EQU    8                 DISPLACEMENT OF EIGHT\nD10      EQU    10                DISPLACEMENT OF TEN\nD12      EQU    12                DISPLACEMENT OF TWELVE\nD16      EQU    16                DISPLACEMENT OF SIXTEEN\n         SPACE  1                                              HD JUL86\nM15      EQU    15                MASK BYTE OF B'1111'         HD JUL86\nM7       EQU    7                 MASK BYTE OF B'0111'         HD JUL86\nM3       EQU    3                 MASK BYTE OF B'0011'         HD JUL86\n*\n*  DYNAMIC ALLOCATION REQUESTS EQUATES                      *HMD 01/85*\n*                                                           *HMD 01/85*\nS99OLD   EQU    X'01'             INDICATE DISP=OLD         *HMD 01/85*\nS99MOD   EQU    X'02'             INDICATE DISP=MOD         *HMD 01/85*\nS99NEW   EQU    X'04'             INDICATE DISP=NEW         *HMD 01/85*\nS99SHR   EQU    X'08'             INDICATE DISP=SHR         *HMD 01/85*\n*                                                           *HMD 01/85*\n*\nW1       EQU    8                 WORK REGISTER\nW2       EQU    7                 WORK REGISTER\n*\n*---------------------------------------------------------------*\n**                        CONSTANTS                            **\n*---------------------------------------------------------------*\nZERO     DC     F'0'              FULLWORD OF ZERO\nC31      DC     F'-2147483648'    CHANGE TO 31 BIT MODE        HD JUL86\nC24      DC     F'2147483647'     CHANGE TO 24 BIT MODE        HD JUL86\nHIBIT    EQU    C24,4,X'C6'       CLEAR THE HIGH BIT           HD JUL86\nLOBYTE   DC     F'255'            CLEAR ALL BUT LOW BYTE       HD JUL86\nBLANKS   DC     CL8' '            BLANKS\nUPPERC   DC     CL44' '           UPPERCASE IT\nTA       DC     C'TAPE'           'UNIT=TAPE'                  HD JUL86\nCA       DC     C'CART'           'UNIT=CART' (3480)           HD JUL86\nVI       DC     C'SYSVIO'         'UNIT=VIO'                   HD JUL86\n**\n** TEXT UNIT MODELS\n**\nUNITTS   DC     0H'0',AL2(DALUNIT),H'1',H'7',C'TSOUSER'        HD JUL86\nUNITTSL  EQU    *-UNITTS                                       HD JUL86\nUNITWK   DC     0H'0',AL2(DALUNIT),H'1',H'4',C'WORK'           HD JUL86\nUNITWKL  EQU    *-UNITWK                                       HD JUL86\nUNITSA   DC     0H'0',AL2(DALUNIT),H'1',H'8',C'SYSALLDA'       HD JUL86\nUNITSAL  EQU    *-UNITSA                                       HD JUL86\n*\n         SPACE  2                                              HD JUL86\n**                                                             HD JUL86\n**         \"SYSDA\" VOLUME LIST                                 HD JUL86\n**                                                             HD JUL86\nSYSDTAB  DC     0D'0'           ALIGN TO DOUBLEWORD            HD JUL86\n         DC     CL8'DISK    '      UNIT=DISK                   HD JUL86\n         DC     CL8'SYSALLDA'      UNIT=SYSALLDA               HD JUL86\n         DC     CL8'SYSDA   '      UNIT=SYSDA                  HD JUL86\n         DC     CL8'SYSSQ   '      UNIT=SYSSQ                  HD JUL86\n         DC     CL8'3330    '      UNIT=3330                   HD JUL86\n         DC     CL8'3330-1  '      UNIT=3330-1                 HD JUL86\n         DC     CL8'3350    '      UNIT=3350                   HD JUL86\n         DC     CL8'3380    '      UNIT=3380                   HD JUL86\nENDOTAB  DC     XL8'FFFFFFFF'      END OF TABLE INDICATOR      HD JUL86\n         SPACE  2                                              HD JUL86\n**  MATCHING TABLE AREA - THESE DSNAMES ARE EXCEPTIONS\n**\n*   LENGTH OF EACH ENTRY MUST BE 44 CHARACTERS\n         SPACE  1\nEXCEPT   DS     0D\n         DC     CL44'*****.ADMPRINT.REQUEST.#*****               '\n         DC     CL44'*****.GDDM.REQUEST.#*****                   '\n         DC     CL44'*****.IDTFLOG.LIST                          '\n         DC     CL44'*****.JCLCHECK.*****************************'\n         DC     CL44'*****.IDTFLOG.LIST                          '\n         DC     CL44'*****.SPFLOG*.LIST                          '\n         DC     CL44'*****.WORK.SELJOB                           '\n         DC     CL44'*****.WORK.JLSCRN                           '\n         DC     CL44'*****.WORK.DOCOUT                           '\n         DC     CL44'*****.XXXXX.XXXXXXXX************************'\n* ABOVE IS DUMMY ENTRY FOR ZAPPING\n         DC     44X'FF'             END OF TABLE\n         SPACE  2\n**\n** TRANSLATE TABLE\n**\nMTCHTRAN DC     256X'FF'            ANY CHARACTER\n         ORG    MTCHTRAN+C'*'       C'*' IS I-DON'T-CARE\n         DC     X'00'\n         ORG    ,                   END OF TABLE\n         SPACE  2\n**\n** EXECUTED INSTRUCTIONS\n**\nDSNMOV   OC     UWORK(0),S99TUPAR   MOVE THE DSNAME            HD JUL86\n**\n         TITLE  'WORK AREA DUMMY SECTION'\nIEFWORK  DSECT\n*---------------------------------------------------------------\n* THIS AREA IS CONTIGUOUS TO TEXT UNIT POINTERS AND SERVES AS\n* AN EXTENTION. DO NOT REMVOVE THE FIRST TWO ENTRIES OR ADD    HD JUL86\n* ANYTHING AHEAD OF THEM.\n*---------------------------------------------------------------\nUNITVECT DS    F                  ROOM FOR AN ADDITIONAL UNIT  HD JUL86\nTUPARM00 DS    CL16               FOR SUBSTITUTING UNIT NAME   HD JUL86\n*\nSAVEAREA DS    18F                REGISTER SAVE AREA\n         SPACE 2                                               HD JUL86\n*---------------------------------------------------------------*\n*                     FLAGS AND SWITCHES\n*---------------------------------------------------------------*\nDYNAFLAG DS    X                  DYNAMIC ALLOCATION FLAG\n*\nDYNAMDSN EQU   X'80' 1... ....    DSNAME IS A MATCH INTABLE    HD JUL86\nDYNATSO  EQU   X'40' .1.. ....    USER IS A TSO TERMINAL USER  HD JUL86\nDYNAPRIV EQU   X'20' ..1. ....    USER IS A PRIVILEGED USER    HD JUL86\nDYNARES1 EQU   X'10' ...1 ....    RESERVED                     HD JUL86\nDYNAVOLU EQU   X'08' .... 1...    WE FOUND A VOLUME SERIAL     HD JUL86\nDYNAUNIT EQU   X'04' .... .1..    WE FOUND A UNIT NAME         HD JUL86\nDYNADSN  EQU   X'02' .... ..1.    WE FOUND A DATASET NAME      HD JUL86\nDYNANIL  EQU   X'01' .... ...1    UNIT NAME IS IN LIST         HD JUL86\nDYNAHEXF EQU   X'FF' 1111 1111    ALL BITS ARE SET             HD JUL86\nDYNAZERO EQU   X'00' .... ....    ALL BITS ARE OFF             HD JUL86\n*\n         SPACE 2                                               HD JUL86\n*---------------------------------------------------------------*\n*                     EXECUTED INSTRUCTIONS\n*---------------------------------------------------------------*\n*\n*---------------------------------------------------------------*\n** SAVED TEXT UNIT POINTER ADDRESSES FOR SVC99 REQUESTS\n*---------------------------------------------------------------*\nTUPVSTA  DS    0F                  START OF POINTER VECTOR\nTUPLPTR  DS    F                   POINTER TO TU ADDRESS VECTOR TABLE\nTUPDSN   DS    F                   POINTER TO DSNAME TEXT UNIT\nTUPDSNX  DS    F                   POINTER TO \"DSNAME\" IN VECTOR TBL\nTUPVOLUM DS    F                   POINTER TO VOLSER TEXT UNIT\nTUPVOLUX DS    F                   POINTER TO \"VOLUME\" IN VECTOR TABLE\nTUUNITP  DS    F                   POINTER TO UNIT   TEXT UNIT\nTUUNITX  DS    F                   POINTER TO \"UNIT\" IN TU VECTOR TABLE\nTUPSTATS DS    F                   POINTER TO NORMAL DISP TEXT UNIT\nTUPLAST  DS    F                   LAST TEXT UNIT POINTER ADDRESS\nTUPVEND  DS    0F                  END OF POINTER VECTOR\n         SPACE 2\n*---------------------------------------------------------------*\n**\n** LIST FORM MACRO INSTRUCTIONS\n**\n*---------------------------------------------------------------*\nEXTRA    EXTRACT MF=L             EXTRACT LIST FORM\nEXTRALEN EQU   *-EXTRA            LENGTH OF PARM LIST\n         SPACE 2\n*---------------------------------------------------------------*\n**\n** PARAMETER LISTS\n**\n*---------------------------------------------------------------*\nEXTRACTA DS    0F                 EXTRACT PARM LIST\nPSCBAD   DS    F                  ADDRESS OF TSO PSCB\nTJID     DS    F                  ASID FOR TSO; ZERO FOR NON-TSO\n*---------------------------------------------------------------*\n** NOTE: THE ABOVE FIELDS ARE RETURNED FROM EXTRACT IN THE ORDER\n**       GIVEN ABOVE, NOT THEY WAY THEY ARE LISTED IN THE EXECUTE\n**       FORM OF THE MACRO. DO NOT CHANGE THE ORDER OF THE ABOVE\n**       TWO FIELDS.\n*---------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------*\n*   MATCHING TABLE WORK AREA\n*---------------------------------------------------------------*\nUWORK    DS    CL44                                            HD JUL86\nMTCHMASK DS    CL44\nMTCHWORK DS    CL44\n*---------------------------------------------------------------*\nIEFWORKL EQU   *-IEFWORK          TOTAL LENGTH OF USED WORK AREA\n*---------------------------------------------------------------*\n         TITLE  'MVS CONTROL BLOCK MAPPING DSECTS'\n         CVT      DSECT=YES,LIST=YES\n         EJECT\n         IKJPSCB                  PROTECTED STEP CONTROL BLOCK\n         EJECT\n         IEFZB4D0                 DYNALLOC PARAMETER LIST\n         EJECT\n         IEFZB4D2                 DYNALLOC KEY EQUATES\n         END   IEFDB401\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEXIT#": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         IEXIT# &RC=(15)\n.*\n         GBLA  &GEXCNT                           COUNTER FOR LABELS\n         GBLB  &IEXSW#                           IEXIT CONTROL SWITCH\n.*\n         AIF   ('&RC'(1,1) EQ '(' AND '&RC' NE '(15)').ERR010\n         AGO   .OK\n.ERR010  ANOP\n         MNOTE 12,'YS000021 - &RC. IS INVALID PARAMETER'\n         MEXIT\n.*\n.OK      ANOP\n         SEQCK IEXIT\n&IEXSW#  SETB  1                                 TURN ON IEXIT SWITCH\n         SPACE\n.*\n         AIF   ('&RC' EQ '(15)').CODE010         IS RET.CODE IN REG15 ?\n         LA    15,&RC.(0,0)                      LOAD RETURN CODE\n.CODE010 ANOP\n.*\n.*       NEXT STATEMENT USES FIRST LABEL OF EXIT# TO BRANCH ON\n         B     ZLEX&GEXCNT                       BRANCH TO EXIT POINT\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IF": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00N\\x00N\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         IF    &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GIFCNT,&GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         GBLB  &IFORSW#                          'IFOR' INDICATOR\n         LCLC  &LOC\n         LCLC  &LBLYSS\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n.*\n         SEQCK IF\n.*\n         SPACE\n         AIF   (&IFORSW# EQ 1).L10          IF THERE IS IFOR,SKIP NEXT\n&GIFCNT  SETA  &GIFCNT+3\n&GIFLVL  SETA  &GIFLVL+1\n&GIFSTK(&GIFLVL) SETA &GIFCNT\n&GIFDOST(&GIFLVL) SETA &GDOLVL\n.*\n.L10     ANOP\n&LOC     SETC  'ZLIF'.'&GIFCNT'\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&LOC\n.GENOK   ANOP                                    GEN IS DONE\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n.**********************************************************************\n.*       ANALIZE 'OR' CONDITION                                       *\n.**********************************************************************\n.*\n         AIF   (&IFORSW# EQ 0).CODE020        IF NO IFOR,SKIP NEXT\n&GIFCNT  SETA  &GIFCNT-1\n&LBLYSS  SETC  'ZLIF&GIFCNT'                  TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                MAIN BRANCH START\n&GIFCNT  SETA  &GIFCNT+1\n.*\n.CODE020 ANOP\n&IFORSW# SETB  0\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IFOR": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00O\\x00O\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 79, "newlines": 79, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         IFOR  &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GIFCNT,&GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         GBLB  &IFORSW#\n         GBLC  &GTYPE\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n         LCLB  &ANDSW\n         LCLC  &ORLOC\n         LCLC  &LOC\n.*\n         SEQCK IFOR\n.*\n         SPACE\n         AIF   (&IFORSW# EQ 1).L10     IF THERE IS OTHER IFOR,SKIP NEXT\n&IFORSW# SETB  1\n&GIFCNT  SETA  &GIFCNT+3\n&GIFLVL  SETA  &GIFLVL+1\n&GIFSTK(&GIFLVL) SETA &GIFCNT\n&GIFDOST(&GIFLVL) SETA &GDOLVL\n.*\n.L10     ANOP\n&GIFCNT  SETA  &GIFCNT-1\n&LOC     SETC  'ZLIF'.'&GIFCNT'\n&GIFCNT  SETA  &GIFCNT+1\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&ORLOC   SETC  'ZLAD&SYSNDX'\n&ANDSW   SETB  0                                 ASSUME - NO *AND*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n&GTYPE   SETC  'IF'                              CHANGE FLAG FOR GENC\n&ANDSW   SETB  1                                 INDICATE - *AND* FOUND\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&ORLOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&ORLOC\n.GENOK   ANOP                                    GEN IS DONE\n&GTYPE   SETC  'IFOR'                            RESTORE FLAG FOR GENC\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n         AIF   (&ANDSW EQ 0).CODE040             IS THERE *AND* PARM ?\n&ORLOC   DS    0H                                CONDITIONS ARE FALSE\n.CODE040 ANOP\n.*\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INIT#": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x01+\\x01+\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 299, "newlines": 299, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         INIT# &CSECT,&BASEREG=,&EXEC=,                                X\n               &REGS=YES,&CODE=NORENT,&SP=0,                           X\n               &LNKREG=(14),&PATCH=(128,ZLINPTCH),                     X\n               &LIST=YES,&EXLIST=YES,                                  X\n               &SAVE=(14,12),&ID=*,&REL=,                              X\n               &RC=(15),&USTART=NO,&UEND=NO\n.*\n.**********************************************************************\n.*       MACRO DESCRIPTION                                            *\n.**********************************************************************\n.*                                                                    *\n.*                              YURY STRASHNOY                        *\n.*                              @/YSS - 07/27/81                      *\n.*                              ----------------                      *\n.*                                                                    *\n.*       INIT# MYNAME,BASEREG=(12),EXEC=MAINLINE  MINIMUM SET OF PARM *\n.*                                                                    *\n.*                                                                    *\n.*       INIT# MYNAME,                   MYNAME-CSECT NAME            *\n.*             BASEREG=(12,3,9),         12,3,9 - BASE REGS           *\n.*             EXEC=MAINLINE,            START EXECUTION FROM MAINLINE*\n.*             REGS=YES,                 GEN.STANDARD REGS EQUATION   *\n.*             CODE=NORENT,SP=0,         NONREENTRABLE CODE           *\n.*             LNKREG=(14),              REG.14 - LINK REGISTER       *\n.*             PATCH=(128,ZLINPTCH),     PATCH - ZLINPTCH DC 128H'0'  *\n.*             LIST=YES,EXLIST=YES,      PRINT GEN IS OK              *\n.*             SAVE=(14,12),ID=*,        SAVE (14,12),,*              *\n.*             REL=03.02.01,             RELEASE NUMBER-DC'03.02.01'  *\n.*             RC=(15)                   RETURN CODE IN REG15         *\n.*                                                                    *\n.*       INIT# MYNAME,                   MYNAME-CSECT NAME            *\n.*             BASEREG=(12),             12 - BASE REGISTER           *\n.*             EXEC=MAINLINE,            START EXECUTION FROM MAINLINE*\n.*             REGS=NO,                  DO NOT GENER REGS EQUATION   *\n.*             CODE=RENT,SP=255,         REENTERABLE CODE,SUBPOOL=255 *\n.*             LNKREG=(11),              REG.11 - LINK REGISTER       *\n.*             PATCH=(120),              PATCH -          DC 120H'0'  *\n.*             LIST=NO,EXLIST=NO,        PRINT NOGEN                  *\n.*             SAVE=(14,12),ID=YURY,     SAVE (14,12),,YURY           *\n.*             REL=,                     NO RELEASE NUMBER SPECIFIED  *\n.*             RC=4                      RETURN CODE IS 4             *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         LCLA  &I,&N                             COUNTERS\n         GBLC  &GLREG                            GLOBAL LINK REGISTER\n         GBLC  &REENT                            CODE TYPE INDICATOR\n         GBLC  &STARTEX                          START POINT NAME\n         GBLC  &LIS,&EXLIS                       LISTING TYPE INDICATOR\n         LCLC  &VMTMDT,&PATLBL                   TIME STAMP;PATCH LABEL\n         LCLC  &BASPARM\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   ('&CSECT' EQ '').ERR01            SPECIFY CSECT NAME\n.*\n         AIF   ('&BASEREG' EQ '').ERR02          SPECIFY BASE REGISTERS\n         AIF   ('&BASEREG'(1,1) NE '(').ERR02\n         AIF   (N'&BASEREG GT 11 OR N'&BASEREG EQ 0).ERR02\n&I       SETA  0                                 ZERO OUT COUNTER\n.CHKBASE ANOP\n&I       SETA  &I+1\n         AIF   ('&BASEREG(&I)' EQ '').ERR02      SPECIFY BASE REGISTER\n         AIF   ('&BASEREG(&I)' GT '12' OR '&BASEREG(&I)' LT '2').ERR02\n         AIF   ('&BASEREG(&I)' GT '9' AND '&BASEREG(&I)' LT '10').ERR02\n         AIF   ('&LNKREG(1)' EQ '&BASEREG(&I)').ERR07\n         AIF   (N'&BASEREG GT &I).CHKBASE        CHECK NEXT BASE REG\n.*\n         AIF   ('&EXEC' EQ '').ERR03             SPECIFY START POINT\n.*\n         AIF   ('&REGS' NE 'YES' AND '&REGS' NE 'NO').ERR04\n         AIF   ('&CODE' NE 'NORENT' AND '&CODE' NE 'RENT').ERR05\n         AIF   ('&SP' EQ '' AND '&CODE' EQ 'RENT').ERR06\n.*\n         AIF   ('&LNKREG' EQ '').ERR07\n         AIF   ('&LNKREG'(1,1) NE '(').ERR07\n         AIF   (N'&LNKREG NE 1).ERR07\n         AIF   ('&LNKREG(1)' GT '14' OR '&LNKREG(1)' LT '2').ERR07\n         AIF   ('&LNKREG(1)' GT '9' AND '&LNKREG(1)' LT '10').ERR07\n         AIF   ('&LNKREG(1)' GT '12' AND '&LNKREG(1)' LT '14').ERR07\n.*\n         AIF   (N'&PATCH GT 2).ERR08\n         AIF   ('&LIST' NE 'YES' AND '&LIST' NE 'NO').ERR09\n         AIF   ('&EXLIST' NE 'YES' AND '&EXLIST' NE 'NO').ERR10\n         AIF   (K'&REL GT 8).ERR11\n.*\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000001-CSECT NAME WAS NOT SPECIFIED'\n         MEXIT\n.ERR02   MNOTE 12,'YS000002-&&BASEREG DEFINES INVALID BASE REGISTER'\n         MEXIT\n.ERR03   MNOTE 12,'YS000003-&&EXEC DOES NOT DEFINE START POINT'\n         MEXIT\n.ERR04   MNOTE 12,'YS000004-&&REGS MUST BE ''YES'' OR ''NO'''\n         MEXIT\n.ERR05   MNOTE 12,'YS000005-&&CODE MUST BE ''RENT'' OR ''NORENT'''\n         MEXIT\n.ERR06   MNOTE 12,'YS000006-&&SP DOES NOT DEFINE SUBPOOL NUMBER'\n         MEXIT\n.ERR07   MNOTE 12,'YS000007-&&LNKREG DEFINES INVALID LINK REGISTER'\n         MEXIT\n.ERR08   MNOTE 12,'YS000008-&&PATCH HAS TOO MANY SUBPARAMETERS'\n         MEXIT\n.ERR09   MNOTE 12,'YS000009-&&LIST MUST BE ''YES'' OR ''NO'''\n         MEXIT\n.ERR10   MNOTE 12,'YS000010-&&EXLIST MUST BE ''YES'' OR ''NO'''\n         MEXIT\n.ERR11   MNOTE 12,'YS000011-&&REL HAS TOO MANY CHARACTERS'\n         MEXIT\n.*\n.**********************************************************************\n.*       SET UP GLOBAL VARIABLES                                      *\n.**********************************************************************\n.*\n.OK      ANOP\n         SEQCK INIT                              SET UP STACK\n.*\n&REENT   SETC  'N'                               ASSUME NONREENTRENT\n         AIF   ('&CODE' EQ 'NORENT').REENTOK     IS CODE NORENT ?\n&REENT   SETC  'Y'                               CODE IS REENTRENT\n.REENTOK ANOP\n.*\n&EXLIS   SETC  'N'                               ASSUME CODE NOGEN\n         AIF   ('&EXLIST' EQ 'NO').EXLISOK       IS CODE NOGEN ?\n&EXLIS   SETC  'Y'                               CODE IS PRINT GEN\n.EXLISOK ANOP\n.*\n&LIS     SETC  'N'                               ASSUME PRINT NOGEN\n         AIF   ('&LIST' EQ 'NO').LISOK           IS ALL LISTING NOGEN ?\n&LIS     SETC  'Y'                               LISTING IS PRINT GEN\n.LISOK   ANOP\n.*\n&GLREG   SETC  '&LNKREG(1)'                      SET UP GLOBAL LINK REG\n.*\n&STARTEX SETC  '&EXEC'                           START POINT\n.*\n.**********************************************************************\n.*       GENERATE CODE                                                *\n.**********************************************************************\n.*\n         AIF   ('&LIS' EQ 'Y').CODE010           IS PRINT GEN ?\n         PRINT NOGEN\n.CODE010 ANOP\n.*\n         SPACE\n&CSECT   CSECT\n         SPACE\n         AIF   ('&REGS' EQ 'NO').CODE020         DO WE DEFINE REGS ?\nR0       EQU   0                                 REGISTERS EQUATES\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n.CODE020 ANOP\n.*\n.*       GENERATE MACRO 'SAVE' TO SAVE REGISTERS\n.*\n         AIF   ('&LIS' EQ 'N').CODE025           IS PRINT NOGEN ?\n         MNOTE '         SAVE  &SAVE,,&ID'       DISPLAY MACRO-CALL\n.CODE025 ANOP\n         SAVE  &SAVE,,&ID                        SAVE REGISTERS\n         SPACE\n.*\n&N       SETA  K'&BASEREG-2\n&BASPARM SETC  '&BASEREG'(2,&N)\n         USING &CSECT,&BASPARM                   DEFINE BASE REGISTERS\n.*\n&I       SETA  1                                 COUNTER IS 1\n         LR    &BASEREG(1),15                    LOAD BASE REGISTER\n.CODE030 ANOP\n&I       SETA  &I+1                              INCREASE REGS COUNTER\n         AIF   (N'&BASEREG LT &I).CODE040        ARE THERE MORE REGS ?\n         LA    &BASEREG(&I),4095(&BASEREG(&I-1)) LOAD BASE REGISTER\n         LA    &BASEREG(&I),1(&BASEREG(&I))      LOAD BASE REGISTER\n         AGO   .CODE030                          GET NEXT REGISTER\n.CODE040 ANOP\n.*\n         AIF   ('&REENT' EQ 'N').CODE050         IS CODE REENT ?\n         USING ZLINSAVE,13                       SET UP DSECT BASE\n         SPACE\n         AIF   ('&LIS' EQ 'N').CODE055\n         MNOTE '         GETMAIN R,LV=ZLINSIZE,SP=&SP'\n.CODE055 ANOP\n         GETMAIN R,LV=ZLINSIZE,SP=&SP            GET DYNAMIC CORE\n         SPACE\n         LR    &LNKREG(1),13                     PREV SAVE AREA ADDR\n         LR    13,1                              LOAD DSECT BASE\n         L     0,20(&LNKREG(1))                  RELOAD R0 FROM SAREA\n         L     1,24(&LNKREG(1))                  RELOAD R1 FROM SAREA\n         L     15,16(&LNKREG(1))                 RELOAD 15 FROM SAREA\n         AGO   .CODE060\n.*\n.CODE050 ANOP\n         LR    &LNKREG(1),13                     PREV SAVE AREA ADDR\n         LA    13,ZLINSAVE                       NEW SAVE AREA ADDR\n.CODE060 ANOP\n         ST    &LNKREG(1),ZLINSAVE+4             SAVE PREV SAREA ADDR\n         ST    13,8(&LNKREG(1))                  SAVE MY SAREA ADDR\n.*\n         SPACE\n         B     &EXEC                             EXECUTE MAIN ROUTINE\nZLINEXIT EQU   *                                 RETURN POINT\n         SPACE\n.*\n         AIF   ('&REENT' EQ 'N').CODE070         IS CODE REENT ?\n         LR    &LNKREG(1),15                     SAVE RETURN CODE\n         LR    1,13                              FREEMAIN CORE ADDR\n         L     13,ZLINSAVE+4                     LOAD CALLER SAREA ADDR\n         SPACE\n         AIF   ('&LIS' EQ 'N').CODE075           IS PRINT NOGEN ?\n         MNOTE '         FREEMAIN R,LV=ZLINSIZE,A=(1),SP=&SP'\n.CODE075 ANOP\n         FREEMAIN R,LV=ZLINSIZE,A=(1),SP=&SP\n         SPACE\n         LR    15,&LNKREG(1)                     RESTORE RETURN CODE\n.*\n.*       GENERATE MACRO 'RETURN' TO RETURN TO CALLER\n.*\n         AIF   ('&LIS' EQ 'N').CODE077           IS PRINT NOGEN ?\n         MNOTE '         RETURN &SAVE,RC=&RC'\n.CODE077 ANOP\n         RETURN &SAVE,RC=&RC\n         AGO   .CODE080\n.*\n.CODE070 ANOP\n         L     13,ZLINSAVE+4                     LOAD CALLER SAREA ADDR\n.*\n.*       GENERATE MACRO 'RETURN' TO RETURN TO CALLER\n.*\n         AIF   ('&LIS' EQ 'N').CODE085           IS PRINT NOGEN ?\n         MNOTE '         RETURN &SAVE,RC=&RC'\n.CODE085 ANOP\n         RETURN &SAVE,RC=&RC\n.*\n.CODE080 ANOP\n.*\n         SPACE\n         AIF   ('&REENT' EQ 'N').CODE090         IS CODE REENT ?\nZLINDSCT DSECT                                   REMOTE CORE DSECT\nZLINSAVE DC    18F'0'                            REGISTERS SAVE AREA\n&CSECT   CSECT                                   CSECT CONTINUATION\n         AGO   .CODE100\n.CODE090 ANOP\nZLINSAVE DC    18F'0'                            REGISTERS SAVE AREA\n         DC    A(ZLIN9999)                       CHECK MACRO 'END#'\n.*\n.CODE100 ANOP\n         DC    CL8'&CSECT'                       CSECT NAME\n         AIF   ('&REL' EQ '').NOREL              IS RELEASE SPECIFIED ?\n         DC    CL4'REL:'                         RELEASE ID\n         DC    CL8'&REL'                         RELEASE NUMBER\n.NOREL   ANOP\n         SPACE\n         DC    CL10' ASM.TIME '                  TIME STAMP HEADER\n&VMTMDT  SETC  '&SYSTIME'(1,2)\n         DC    CL2'&VMTMDT'                      ASSEMBLY TIME (HH)\n         DC    C':'                              COLON\n&VMTMDT  SETC  '&SYSTIME'(4,2).' '\n         DC    CL3'&VMTMDT'                      ASSEMBLY TIME (MM)\n&VMTMDT  SETC  '&SYSDATE'(1,8)\n         DC    CL8'&VMTMDT'                      DATE (MM/DD/YY)\n.*\n         AIF   ('&PATCH' EQ '').NOPATCH          IS PATCH REQUIRED ?\n         AIF   ('&PATCH(1)' EQ '').NOPATCH       IS PATCH REQUIRED ?\n&PATLBL  SETC  '&PATCH(2)'                       SET PATCH LABEL\n         SPACE\n         DS    0H\n         DC    CL8' YSPATCH'                     PATCH INITIAL ID\n&PATLBL  DC    &PATCH(1).H'0'                    PATCH AREA\n         DC    CL8'ENDPATCH'                     PATCH FINAL ID\n.NOPATCH ANOP\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INUSE": {"ttr": 2833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    INUSE &FOOLASM\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&D,&B\n         LCLB  &F\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').CHK\n&NAME    DS    0H .                     NAME DEFINED\n.CHK     AIF   (&LUSED).GO\n         MNOTE 0,'USER ERROR - LUSE NEVER USED, NO KNOWN BASE REGS'\n         MEXIT\n.GO      SPACE 2\n&A       SETA  1\n*              THE FOLLOWING REGISTER(S) IN USE:\n*                LOCATION           BASE\n.LOOP    AIF   ('&USEW(&A)' EQ '').MENDX\n&D       SETA  (&A*2)-1\n&X1      SETC  '&USENM(&D)'.'           '\n&X2      SETC  '&USENM(&D+1)'.'            '\n         MNOTE *,'&X1&X2    &USEW(&A)'\n&A       SETA  &A+1\n&F       SETB  1\n         AGO   .LOOP\n.MENDX   AIF   (&F).MEXIT\n*              ** NO REGISTERS CURRENTLY IN USE **\n.MEXIT   SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IOPL": {"ttr": 2835, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         IOPL     &DSECT=,                                  *HMD 05/78*\n         AIF  ('&DSECT' EQ 'NO').NODSECT                    *HMD 05/78*\nIOPL     DSECT                                              *HMD 05/78*\n         AGO   .DSCT                                        *HMD 05/78*\n.NODSECT ANOP                                               *HMD 05/78*\nIOPL     DS    0A                                           *HMD 05/78*\n.DSCT    ANOP                                               *HMD 05/78*\n***********************************************************************\n*    THE I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LIST OF       *\n*    FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE      *\n*    ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.     *\n***********************************************************************\n         SPACE\nIOPLUPT  DS    A        PTR TO UPT\nIOPLECT  DS    A        PTR TO ECT\nIOPLECB  DS    A        PTR TO USER'S ECB\nIOPLIOPB DS    A        PTR TO THE I/O SERVICE RTN PARM BLOCK\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESUX006": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x01\\x89\\x01\\x89\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 393, "newlines": 393, "modlines": 0, "user": "HMDEAN"}, "text": "X006     TITLE 'JES2 USER EXIT 6:  INTERNAL TEXT SCAN'\n***********************************************************************\n*                                                                     *\n*                    INTERNAL TEXT SCAN                               *\n*                                                                     *\n*   AUTHOR:                                                           *\n*          HOWARD M. DEAN                                             *\n*          SYNTEX U.S.A.                                              *\n*          TECHNICAL SUPPORT DEPARTMENT                               *\n*          3401 HILLVIEW AVENUE                                       *\n*          MAIL STOP A5-CIS-5                                         *\n*          PALO ALTO, CALIFORNIA 94303                                *\n*          (415) 852-1792                                             *\n*                                                                     *\n*   PURPOSE:                                                          *\n*                                                                     *\n*        ALLOWS ONE TO SCAN THE INTERNAL TEXT CREATED BY THE JES2     *\n*        CONVERTER SUBTASK.  AT SYNTEX, WE WILL USE THIS EXIT TO      *\n*        MODIFY THE INTERNAL TEXT, FOR 'NEW' DATASETS, TO ALTER       *\n*        NON-SPECIFIC GENERIC UNIT NAMES AND THE NON-SPECIFIC         *\n*        ESOTERIC UNIT NAMES OF 'SYSDA','SYSSQ','SYSALLDA',AND        *\n*        'DISK' TO AN ESOTERIC UNIT NAME OF 'WORK'.                   *\n*                                                                     *\n*        THIS WILL ALLOW ALL VOLUMES TO BE MOUNTED STORAGE.  THUS,    *\n*        'NEW' DATASETS CAN BE ALLOCATED BY SIMPLY USING AN ESOTERIC  *\n*        UNIT NAME AND BE DIRECTED TO A SPECIFIC DASD 'POOL' RATHER   *\n*        THAN HAVING TO MENTION SPECIFIC VOLUME SERIALS.              *\n*                                                                     *\n*        NOTE: THIS EXIT IS ENTERED IN 'SUBTASK' MODE                 *\n*                                                                     *\n*  ENTRY POINT JESUX006                                               *\n*                                                                     *\n*  INPUT (REGISTERS):                                                 *\n*        R0    A CODE INDICATING THE STATUS OF JCL CONVERSION         *\n*              PROCESSING:                                            *\n*                                                                     *\n*              0  -  INDICATES THAT A JCL STATEMENT HAS BEEN          *\n*                    CONVERTED TO AN INTERNAL TEXT IMAGE              *\n*                                                                     *\n*              4  -  INDICATES THAT ALL THE JCL FOR A PARTICULAR      *\n*                    JOB HAS BEEN CONVERTED                           *\n*                                                                     *\n*        R1    ADDRESS OF A 2-WORD PARAMETER LIST                     *\n*                                                                     *\n*              WORD 1 (+0) ADDRESS OF A 16-BYTE WORK AREA             *\n*                          AVAILABLE TO THE USER                      *\n*                                                                     *\n*              WORD 2 (+4) IF THE CODE PASSED IN R0 IS 0, THIS        *\n*                          WORD POINTS TO THE ADDRESS OF THE LAST     *\n*                          SINGLE INTERNAL TEXT IMAGE CONVERTED       *\n*                          FROM A JCL STATEMENT. IF THE CODE PASSED   *\n*                          IN R0 IS 4, THIS WORD POINTS TO THE        *\n*                          ADDRESS OF THE CONVERTER'S RETURN CODE.    *\n*                                                                     *\n*        R2-R7 N/A         USED AS WORK REGISTERS IN THIS ROUTINE     *\n*                                                                     *\n*        R8    ADDRESS OF THE PCE                                     *\n*                                                                     *\n*        R9    N/A         USED AS WORK REGISTER IN THIS ROUTINE      *\n*                                                                     *\n*        R10   ADDRESS OF THE JCT                                     *\n*                                                                     *\n*        R11   ADDRESS OF THE HCT                                     *\n*                                                                     *\n*        R12   N/A         USED AT EXIT PROGRAM BASE REGISTER         *\n*                                                                     *\n*        R13   ON ENTRY - ADDRESS OF O/S STYLE SAVE AREA              *\n*                                                                     *\n*        R14   RETURN ADDRESS                                         *\n*                                                                     *\n*        R15   ENTRY ADDRESS                                          *\n*                                                                     *\n*   RETURN (REGISTERS):                                               *\n*                                                                     *\n*        R0-R1 N/A                                                    *\n*                                                                     *\n*        R15   RETURN CODE TO DIRECT FURTHER JES2 PROCESSING          *\n*              =0  TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT   *\n*                  ROUTINES, EXECUTE THE NEXT CONSECUTIVE ROUTINE.    *\n*                  IF THE ENTRY CODE IN R0 WAS 0, PASS THE NEXT       *\n*                  INTERNAL TEXT IMAGE TO THE EXIT. IF THE ENTRY      *\n*                  CODE WAS 4, THEN QUEUE THE JOB FOR PROCESSING      *\n*                                                                     *\n*              =4  IGNORE ANY ADDITIONAL EXIT ROUTINES ASSOCIATED     *\n*                  WITH THIS EXIT; CONTINUE WITH CONVERSION OF THE    *\n*                  JOB.                                               *\n*                                                                     *\n*              =8  BYPASS EXECUTION AND CANCEL THE JOB. THE JOB IS    *\n*                  QUEUED FOR OUTPUT RATHER THAN EXECUTION.           *\n*                                                                     *\n* MACROS = JES2 - $BUFFER, $CAT, $CB, $DECODE, $ENTRY, $HASPEQU,      *\n*                 $HASPGBL, $HCT, $JCT, $JQE, $MID, $MIT, $MODEND,    *\n*                 $MODULE, $PATCHSP, $PCE, $$WTO, $XIT                *\n*                                                                     *\n*                                                                     *\n* MACROS = MVS  - SPLEVEL, SAVE, RETURN, IEFTXTFT, IEFVKEYS, IHASU1,  *\n*                 IEZWPL, WTO                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL                COPY HASP GLOBALS\nJESUXIT6 $MODULE NOTICE=(SP134),SYSP=(GEN,GEN,NODATA,GEN,GEN),         C\n               ENVIRON=SUBTASK,        CALLED IN SUBTASK ENVIRONMENT   C\n               TEXT,                   MVS INTERNAL TEXT FORMAT        C\n               KEYS,                   MVS TEXT UNIT KEY VALUES        C\n               WPL,                    MVS WTO PARAMETER LIST          C\n               $HASPEQU,               GENERATE HASP EQUATES           C\n               $BUFFER,                GENERATE HASP BUFFER DSECT      C\n               $CAT,                   GENERATE HASP CAT DSECT         C\n               $HCT,                   GENERATE HASP HCT DSECT         C\n               $JCT,                   GENERATE HASP JCT DSECT         C\n               $JQE,                   GENERATE HASP JQE DSECT         C\n               $MIT,                   GENERATE HASP MIT DSECT         C\n               $PCE,                   GENERATE HASP PCE DSECT         C\n               $XIT                    GENERATE HASP XIT DSECT\nJESUX006 $ENTRY BASE=R12               ESTABLISH ENTRY POINT\n         DROP  R13                     PCE IS REALLY IN R8\n         USING WORKAREA,R2             ADDRESS OF THE WORK AREA\n         USING PARMLIST,R3             ADDRESS THE PARM LIST\n         USING TEXT,R4                 ADDRESS THE TEXT UNIT\n         USING PCEDSECT,R8             ADDRESS THE PCE\n         USING JCTDSECT,R10            ADDRESS THE JCT\n         USING HCTDSECT,R11            ADDRESS THE HCT\n         TITLE 'JES2 USER EXIT 6: INTERNAL TEXT SCAN'\n         SPACE 1\n         STM   R14,R12,12(R13)         SAVE IN CALLER'S AREA\n         LR    R12,R15                 ESTABLISH ADDRESSIBILITY\n         LR    R3,R1                   LOAD PARMAMETER REGISTER\n         L     R2,USERWORK             LOAD ADDRESS OF WORK AREA\n         MVC   JESFLAG,$ZEROS          CLEAR JES2 FLAG\n         MVC   SAVEPOS,$ZEROS          CLEAR SAVED POSITION\n         SPACE 1\n**\n**  CHECK FOR END OF CONVERSION - RETURN IF SO\n**\n         C     R0,$F4                  ENTRY CODE FOUR?\n         BE    RC0                     RETURN TO CALLER\n         SPACE 1\n         EJECT\n**********************************************************************\n**                                                                  **\n**  PROCESS TEXT UNIT STRINGS AND REJECT ANY STRING THAT IS NOT     **\n**  A 'DD' CARD. SET FLAGS IF A NON-EMPTY 'SER=' IS FOUND AND/OR    **\n**  A NON-EMPTY UNIT NAME IS FOUND THAT IS IN OUR TABLE.            **\n**                                                                  **\n**                                                                  **\n**  REGISTER USAGE:                                                 **\n**                                                                  **\n**       R2    -ADDRESS OF 16 BYTE WORK AREA                        **\n**       R3    -ADDRESS OF INPUT PARAMETER LIST                     **\n**       R4    -POINTER TO BEGINNING OF TEXT UNIT                   **\n**       R5-R7 -WORK REGISTERS                                      **\n**       R8    ---> $PCE                                            **\n**       R9    -WORK REGISTER                                       **\n**       R10   ---> $JCT                                            **\n**       R10   ---> $HCT                                            **\n**       R12   -PROGRAM BASE                                        **\n**       R13   -SAVE AREA AND WORK AREA POINTER                     **\n**                                                                  **\n**********************************************************************\nPROCESS  DS    0H                      PROCESS TEXT UNITS\n         MVC   WTX900(MSG900L),MSG900  MOVE $HASP900 MSG TO WORK AREA\n         L     R4,TEXTUNIT             GET TEXT UNIT ADDRESS\n         TM    STRINDCS,JOBSTR         START OF JOB STMT?\n         BZ    XXSTMT                  MUST BE ANOTHER STATEMENT\n         MVC   SCTR,$H1                INDICATE STATEMENT #1\n         B     RC0                     DON'T PROCESS JOB STATEMENT\nXXSTMT   LH    R1,SCTR                 LOAD STATEMENT NUMBER\n         AH    R1,$H1                  INCREMENT COUNTER\n         STH   R1,SCTR                 SAVE IN AREA\n         SPACE 1\n         TM    STRINDCS,DDSTR          IS THIS A DD CARD?\n         BZ    RC0                     RETURN WITH NEXT STATEMENT\n         SPACE 1\n* WE'VE GOT A DD STATEMENT\n         TM    STRDINDC,DTXDUMMY+DTXDDNM+DTXDYNAM\n         SPACE 1\n* IS IT DUMMY, DDNAME, OR DYNAM?\n         BNZ   RC0                     FORGET IT\n         TM    STRDINDC,DTXSYSIN+DTXSYOUT+DTXSUBSK\n         SPACE 1\n* IS IT SYSIN, SYSOUT, OR SUBSYS?\n         BNZ   RC0\n         SLR   R5,R5                   CLEAR WORK REGISTER\n         LA    R4,STRDKEY              POINT TO THE KEY\n         IC    R5,2(R4)                INSERT LENGTH OF KEY\n         LA    R4,2(R4,R5)             POINT PAST THE DDNAME\n         SPACE 1\n* LOOK FOR 'UNIT=', 'SER=' KEYWORDS\n         SPACE 1\nSLIDE    CLI   0(R4),ENDK              END OF FIELD?\n         BE    ENDOTXT                 WE'VE HIT THE END\n         SPACE 1\n         CLI   0(R4),DSNAMEK           CHECK FOR 'DSNAME' KEYWORD\n         BE    DSNAME                  WE'VE GOT A DSNAME\n         CLI   0(R4),VOLUMEK           CHECK FOR \"VOL\" KEYWORD\n         BE    VOLUME                  TURN OFF \"DSNAME\" FLAG\n         CLI   0(R4),SERMK             IS THIS A 'SER=' KEYWORD?\n         BE    VOLSER                  WE'VE GOT A SPECIFIC VOLSER\n         CLI   0(R4),REFMK             CHECK FOR \"REF=\"\n         BE    VOLREF                  PROCESS THE UNIT\n         CLI   0(R4),UNITK             IS THIS A UNIT DDNAME?\n         BE    UNIT                    THIS IS A 'UNIT=' KEYWORD\n         CLI   0(R4),DISPK             IS THIS A 'DISP' KEYWORD?\n         BE    DISP                    BI GEORGE, EYE TINK WIVE GOTIT\nNEXT     LA    R4,1(R4)                INCREMENT POINTER\n         B     SLIDE                   SLIDE ACROSS\n         SPACE 1\nDSNAME   DS    0H                      CHECK FOR \"&\" DSNAME\n         OI    JESFLAG,JGOTDSN         TURN ON DSNAME IN PROGRESS FLAG\n         B     NEXT\n         SPACE 1\nVOLUME   DS    0H                      PROCESS \"VOLUME=\" KEYWORD\n         NI    JESFLAG,JFF-JGOTDSN     TURN OF \"DSNAME\" FLAG\n         B     NEXT                    AND KEEP ON TRUCKING\n         SPACE 1\nVOLREF   DS    0H\n         TM    JESFLAG,JGOTDSN         ARE WE PROCESSING AN && NAME?\n         BO    NEXT                    NO, A REAL \"REF=\" STMT\n         SPACE 1\nVOLSER   DS    0H                      WE'VE FOUND A 'VOL=SER=' KEYWORD\n         CLI   1(R4),0                 ANY SUBPARMS?\n         BE    NEXT                    NO, INVALID \"SER\" OR \"REF\"\n         CLI   2(R4),0                 ZERO LENGTH \"SER\" OR \"REF\"?\n         BE    *+8                     YES, INVALID\n         OI    JESFLAG,JGOTVOL         WE'VE GOT A VOLUME SERIAL\n         B     NEXT                    CHECK NEXT BYTE\n         SPACE 1\nDISP     DS    0H\n         OI    JESFLAG,JGOTDISP        INDICATE 'DISP' FOUND\n         CLI   2(R4),0                 IS IT DISP=(,CATLG)?\n         BE    DISPNEW                 YES, INDICATE 'NEW'\n         IC    R5,2(R4)                GET LENGTH OF FIELD\n         BCTR  R5,0                    DECREMENT\n         CLC   3(0,R4),NEWORD          COMPARE TO CONSTANT\n         EX    R5,*-6\n         BNE   *+8                     DISP IS NOT 'NEW'\nDISPNEW  OI    JESFLAG,JDISPNEW        DISP INCLUDED AND IS 'NEW'\n         B     NEXT                    GET NEXT BYTE\n         SPACE 1\nUNIT     DS    0H\n         CLI   2(R4),0                 LENGTH OF ZERO?\n         BE    NEXT                    YES, CHECK NEXT FIELD\n         LA    R5,DDTAB                LOAD THE TABLE ADDRESS\n         LA    R6,L'DDTAB              LENGTH OF TABLE\n         LA    R7,ENDOTAB              END OF TABLE\n         SLR   R9,R9                   CLEAR FOR INSERT\n         IC    R9,2(R4)                LOAD LENGTH OF UNIT NAME\n         BCTR  R9,0                    DECREMENT FOR 'EX'\n         SPACE 1\nUNITLOOP CLC   3(0,R4),0(R5)           COMPARE AGAINST TABLE\n         EX    R9,*-6\n         BE    UNITGOT                 WE'VE GOT IT\n         BXLE  R5,R6,UNITLOOP          LOOP TILL IT MATCHES\n         B     NEXT                    CHECK NEXT BYTE\n         SPACE 1\nUNITGOT  OI    JESFLAG,JGOTSYSD        WE FOUND A 'SYSDA' NAME\n         MVC   WTXTUN(0),3(R4)         MOVE IN THE NAME\n         EX    R9,*-6\n         ST    R4,SAVEPOS              SAVE ORIGINAL POSITION\n         B     NEXT                    RETURN TO LOOP BEGINNING\n         SPACE 2\nENDOTXT  DS    0H\n         TM    JESFLAG,JGOTDISP        DID WE FIND A 'DISP' KEY?\n         BZ    CHKWORK                 NO, IS DEFINITELY NEW\n         TM    JESFLAG,JDISPNEW        IS SUBPARM NULL OR 'NEW'?\n         BZ    RC0                     NO, THEN JUST RETURN\nCHKWORK  TM    JESFLAG,JGOTSYSD        DID WE GET A 'SYSDA' FIELD?\n         BZ    RC0                     NO, DO NOT PROCESS\n         TM    JESFLAG,JGOTVOL         SPECIFIC VOLUME?\n         BO    RC0                     YES, LEAVE TEXT UNIT ALONE\n         EJECT\n********************************************************************\n**                                                                **\n** WE'VE GOT A TEXT UNIT WE CAN WORK WITH. LOAD POSITION IN TEXT  **\n** UNIT AND SQUEEZE IN YOUR NEW DDNAME 'WORK'. ADJUST LENGTH SO   **\n** THAT TEXT UNIT SIZE NEED NOT BE CHANGED. THIS WILL SCREW UP    **\n** WITH UNIT NAMES LESS THAN THE SIZE OF 'WORKDD', BUT A THREE    **\n** CHARACTER UNIT NAME IS UNLIKELY.                               **\n**                                                                **\n********************************************************************\n         L     R4,SAVEPOS              POINT TO THE ORIGINAL UNIT\n         IC    R5,2(R4)                INSERT LENGTH OF UNIT\n         BCTR  R5,0                    MACHINE LENGTH\n         SPACE 1\n         MVC   3(1,R4),WORKDD          MOVE IN WORK UNIT\n         EX    R5,*-6                  ADJUST TO CORRECT LENGTH\n         SPACE 2\nENDWTO   DS    0H                      END WRITE TO OPERATOR\n         LH    R1,SCTR                 GET STATEMENT NUMBER\n         CVD   R1,DBLWORD2             CONVERT TO DECIMAL\n         ED    WTXSTMT,DBLWORD2+6      EDIT THE DATA\n         SPACE 1\n         $$WTO WTX900                  WRITE TO THE OPERATOR\n         SPACE 1\n         B     RC0                     IN CASE WE ADD SOMETHING\n         EJECT\n**********************************************************************\n**                                                                  **\n**       RETURN CODE VECTOR BRANCH TABLE                            **\n**                                                                  **\n**********************************************************************\nRC0      L     R15,$ZEROS              RETURN CODE ZERO\n         B     EXIT\n         SPACE 1\nRC4      L     R15,$F4                 LOAD RETURN CODE\n         B     EXIT\n         SPACE 1\nRC8      L     R15,$F8                 LOAD RETURN CODE\n         B     EXIT\n         SPACE 1\nEXIT     L     R14,4*3(R13)\n         LM    R0,R12,4*5(R13)         RESTORE REGISTERS\n         BR    R14                     RETURN BACK TO EXIT EFFECTOR\n         SPACE 1\n         $MODEND ,                     END OF MODULE\n         TITLE 'JES2 USER EXIT 6:  INTERNAL TEXT SCAN'\n********************************************************************\n**                                                                **\n**                INTERMODULE CONSTANTS                           **\n**                                                                **\n********************************************************************\n         SPACE  1\n********************************************************************\n**                                                                **\n**        WARNING WRITE-TO-OPERATOR MESSAGE CONSTANTS             **\n**                                                                **\n********************************************************************\n         $MID 900\n         SPACE 1\nMSG900   WTO   '&MID.STMT     UNIT=         REPLACED WITH UNIT=WORK',  +\n               MF=L\nMSG900L  EQU   *-MSG900           TOTAL LENGTH OF WTO\n         SPACE 2\n         ORG   MSG900+17          ORG OVER TEXT\n         DC    X'40202120'        EDIT PATTERN FOR STMT NUMBER\n         ORG   ,\nNEWORD   DC    CL3'NEW'           THE CHARS 'NEW'\nWORKDD   DC    CL8'WORK'          NAME OF WORK UNIT\n         SPACE 2\n********************************************************************\n**                                                                **\n**        DDNAME TABLE - SCAN FOR \"SYSDA\" TYPE UNIT NAME          **\n**                                                                **\n********************************************************************\nDDTAB    DS     0D                 DDNAME TABLE\nA3330    DC     CL8'3330    '      UNIT=3330\nA3331    DC     CL8'3330-1  '      UNIT=3330-1\nA3350    DC     CL8'3350    '      UNIT=3350\nA3380    DC     CL8'3380    '      UNIT=3380\nSYSDA    DC     CL8'SYSDA   '      UNIT=SYSDA\nSYSSQ    DC     CL8'SYSSQ   '      UNIT=SYSSQ\nSYSALLDA DC     CL8'SYSALLDA'      UNIT=SYSALLDA\nDISK     DC     CL8'DISK    '      UNIT=DISK\nENDOTAB  DC     8X'FF'             END OF TABLE INDICATOR\n         SPACE  2\n         TITLE 'JES2 USER EXIT 6:  INTERNAL TEXT SCAN'\n********************************************************************\n**                                                                **\n**            INTERNAL EQUATES AND DUMMY SECTIONS                 **\n**                                                                **\n********************************************************************\nJCTDSECT DSECT                         RESUME JCT DSECT\n         ORG   JCTWORK\nWTX900   DS    0F                      START OF MESSAGE 900\n         ORG   WTX900+17\nWTXSTMT  DS    CL4                     TEXT UNIT DDNAME\n         ORG   WTX900+27\nWTXTUN   DS    CL8                     TEXT UNIT UNIT NAME\n         ORG   ,                       BACK TO REALITY\n         SPACE 2\nPARMLIST DSECT                         R1 --> PARMLIST\nUSERWORK DS    A                       POINTER TO 16 BYTE WORK AREA\nTEXTUNIT DS    A                       POINTER TO ASSEMBLED TEXT UNIT\n         SPACE 2\nWORKAREA DSECT\nDBLWORD1 DS    D                       1ST DOUBLE WORD OF WORK AREA\nDBLWORD2 DS    D                       2ND DOUBLE WORD OF WORK AREA\n         ORG   DBLWORD1\nJESFLAG  DS    X                       FLAG SWITCH FOR PROCESSING\nJGOTSYSD EQU   X'80'  1... ....        WE FOUND UNIT=SYSDA\nJGOTVOL  EQU   X'40'  .1.. ....        WE FOUND A SPECIFIC VOLUME\nJGOTDISP EQU   X'20'  ..1. ....        WE FOUND A 'DISP' SUBPARM\nJDISPNEW EQU   X'10'  ...1 ....        THE 'DISP' PARM IS 'NEW'\nJGOTDSN  EQU   X'08'  .... 1...        LAST TEXT UNIT WAS FOR \"DSN\"\nJFF      EQU   X'FF'  1111 1111        FOR \"ANDING' OFF BITS\n         ORG   DBLWORD1+2\nSCTR     DS    H                       HALFWORD STATEMENT COUNTER\n         ORG   DBLWORD2                POINT TO THE SECOND DOUBLEWORD\nSAVEPOS  DS    F                       SAVE POSITION OF 'UNIT' PARM\n         ORG   ,\nWL       EQU   *-WORKAREA              LENGTH OF AREA (16 BYTES)\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JOBNAME": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "HMDEAN"}, "text": "THIS CODE IS IN FILE 425 OF THE CBT MVSMODS TAPE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULDATE": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00I\\x00I\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "HMDEAN"}, "text": "PROC 0 DATE()\nGLOBAL MONTH DAY YEAR\nGLOBAL JULIAN SHOP WEEKDAY\nGLOBAL CDEBUG\n/*-------------------------------------------------------------------*/\n/*  INSTALLED 05/03/85                                               */\n/*                                                                   */\n/*  HOWARD M. DEAN                                                   */\n/*  SYNTEX USA                                                       */\n/*  3401 HILLVIEW AVENUE M/S A5-5                                    */\n/*  PALO ALTO, CALIFORNIA 94303                                      */\n/*-------------------------------------------------------------------*/\nIF &CDEBUG EQ YES THEN CONTROL LIST CONLIST SYMLIST PROMPT MSG\n    ELSE CONTROL NOMSG NOLIST\n/*                                                                   */\n/* THE FOLLOWING CLIST PERFORMS THESE FUNCTIONS:                     */\n/*                                                                   */\n/* TAKES ANY VALID GREGORIAN DATE IN THIS CENTURY AND                */\n/* CALCULATES THE JULIAN DATE, THE DAY OF THE WEEK, AND              */\n/* A 'SHOP DATE' IE- THE NUMBER OF DAYS ELAPSED BETWEEN              */\n/* THE INPUT DATE AND JAN. 1, 1900. THUS IF YOU FEED                 */\n/* THIS CLIST 2 DATES, THE DIFFERENCE BETWEEN THE TWO                */\n/* SHOP DATES EQUALS THE NUMBER OF ELAPSED DAYS BETWEEN              */\n/* THE TWO.                                                          */\n/*                                                                   */\n/* THE FORMATS OF THE GLOBAL VARIABLES ARE AS FOLLOWS:               */\n/*                                                                   */\n/* INPUT - MONTH=MM, DAY=DD, YEAR=YY                                 */\n/*         FOR EXAMPLE: 01 01 76                                     */\n/*         NOTE - 1 1 76 WILL NOT WORK.                              */\n/*                                                                   */\n/* INPUT - DATE(SYSDATE)  - SETS VARIABLES FOR TODAY'S DATE          */\n/*         DATE(MM/DD/YY) - SETS VARIABLES FOR THE DATE SPECIFIED    */\n/*                                                                   */\n/* OUTPUT - JULIAN=YYDDD, IE 99365 FOR 12/31/99                      */\n/* SHOP   - DD..DD, IE, 36523 FOR THE SAME DATE                      */\n/* WEEKDAY - MONDAY, TUESDAY, WEDNESDAY, ETC.                        */\n/*                                                                   */\nERROR +\nDO\n  SET &LASTCC EQ 4\n  EXIT\nEND\nIF  &STR(&DATE) NE &STR() THEN                                         -\n   DO\n      IF &STR(&DATE) EQ &STR(SYSDATE) THEN                             -\n         DO\n           SET &MONTH EQ &SUBSTR(1:2,&SYSDATE)\n           SET &DAY   EQ &SUBSTR(4:5,&SYSDATE)\n           SET &YEAR  EQ &SUBSTR(7:8,&SYSDATE)\n         END\n      ELSE                                                             -\n         DO\n           SET &MONTH EQ &SUBSTR(1:2,&STR(&DATE))\n           SET &DAY   EQ &SUBSTR(4:5,&STR(&DATE))\n           SET &YEAR  EQ &SUBSTR(7:8,&STR(&DATE))\n         END\n   END\nSET &JULIAN = &SUBSTR(&EVAL((&MONTH*3)-2):+\n              &EVAL(&MONTH*3),000031059090120151181212243273304334)\nSET &JULIAN = &JULIAN + &DAY\nIF &YEAR//4 = 0 AND &MONTH GT 2 THEN SET &JULIAN = &JULIAN + 1\nSET &SHOP = &JULIAN\nSET &L = &LENGTH(&JULIAN)\nSET &JULIAN = &STR(X00&JULIAN)\nSET &JULIAN = &STR(&YEAR)+\n              &STR(&SUBSTR(&EVAL(&L+1):+\n              &EVAL(&LENGTH(&JULIAN)),&JULIAN))\nSET &SHOP = &EVAL(&YEAR*365) + &EVAL((&YEAR-1)/4) + &SHOP - 1\nSET &WEEKDAY = &SUBSTR(&EVAL(((&SHOP//7)*6)+1):+\n               &EVAL(((&SHOP//7)*6)+6),   +\n               MON  TUESWEDNES THURS   FRI SATUR   SUN)\nSET &WEEKDAY = &SUBSTR(&EVAL(6-&LENGTH(&WEEKDAY)+1):6,&WEEKDAY)DAY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULGREG": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x01\\x15\\x01\\x15\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 277, "newlines": 277, "modlines": 0, "user": "HMDEAN"}, "text": "         TITLE 'JULIAN/GREGOR CONVERSION ROUTINES'\n*        *         *         *         *         *         *          *\n* THIS ROUTINE CONVERTS A SIX CHARACTER ALPHAMERIC GREGORIAN DATE OF  *\n* THE FORM 'YYMMDD' TO A THREE BYTE PACKED DECIMAL FIELD OF THE FORM  *\n* YYDDDC, IF A JULIAN DATE IS DESIRED. THE JULIAN DATE IS C SIGNED.   *\n* EXAMPLE:                                                            *\n*                                                                     *\n*     R1 ==> A(GDATE)==>GDATE    DS    CL6                            *\n*            A(JDATE)==>JDATE    DS    F                              *\n*                                                                     *\n*  ON ENTRY R1......> |>GREGDATE|>JULDATE |                           *\n*                         P1        P2                                *\n*                                                                     *\n* HOWARD M. DEAN                                                      *\n* SYNTEX U.S.A.                                                       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\nJULGRE   CSECT\n         ENTRY JULIAN,GREGOR\nJULIAN   SAVE  (14,12)\n         BALR  10,0\n         USING *,10\n         USING DSA,13                   TELL ASSEMBLER      *HMD 03/85*\n         LR    2,1                      SAVE PARMS          *HMD 03/85*\n         GETMAIN R,LV=STORLEN           GET DYNAMIC STORAGE *HMD 03/85*\n         MVC   0(STORLEN,1),BEGOSTOR    INITIALIZE DYNAMIC  *HMD 03/85*\n         ST    13,4(1)                  SAVE REGISTERS      *HMD 03/85*\n         ST    1,8(13)                   CHAIN BACK         *HMD 03/85*\n         LR    13,1                     ADDRESS DYNASTOR    *HMD 03/85*\n         LR    3,2                      RETORE PARM REG     *HMD 03/85*\n         ZAP   JULDATE,=P'0'\n         ZAP   YEAR,=P'0'               INITIALIZE <YEAR>\n         ZAP   DAYS,=P'0'               INITIALIZE JULIAN DAYS\n         ZAP   LYEAR,=P'64'             INITIALIZE LEAP YEAR TO 1964\n         L     4,0(0,3)                 GPR-4 <- ADDR OF GREGORIAN VAR.\n         CLC   0(6,4),=C'000000'        ZERO GREGORIAN DATE?\n         BE    ZDATE\n         MVC   YEAR(6),0(4)             MOVE GREGOR DATE TO YEAR,MO,DAY\n         MVZ   YEAR+1(1),=X'C0'         SET UP <YEAR> FOR PACKING\n         MVZ   MO+1(1),=X'C0'           SET UP <MO> FOR PACKING\n         MVZ   DAY+1(1),=X'C0'          SET UP <DAY> FOR PACKING\n         PACK  YEAR,YEAR                PACK <YEAR>\n         PACK  MO,MO                    PACK <MO>\n         PACK  DAY,DAY                  PACK <DAY>\n         CLC   DAY,=X'001C'\n         BL    ERROR\n         CLC   DAY,=X'031C'\n         BH    ERROR\n         CLC   MO,=X'001C'\n         BL    ERROR\n         CLC   MO,=X'012C'\n         BH    ERROR\n         CLC   YEAR,=X'000C'\n         BL    ERROR\n         CLC   YEAR,=X'099C'\n         BH    ERROR\n         ZAP   DBLWRK,YEAR         MOVE YEAR TO DOUBLEWORD\n         STM   6,7,STORM           SAVE THESE 2 REGS\n         CVB   6,DBLWRK            CONVERT YEAR TO BINARY\n         LTR   6,6                 CHECK FOR YEAR 0\n         BZ    LEAPYEAR            IF YEAR IS 0-ITS A LEAPYEAR\n         SRDA  6,32                SHIFT TO ODD # REG\n         D     6,=F'4'              DIVIDE BY 4  (ALL LEAPYEARS ARE\n*                                  EVENLY DIVISIBLE BY 4)\n         LTR   6,6                 CHECK FOR REMAINDER\n         LM    6,7,STORM           (RELOAD REGS REGARDLESS OF CC)\n         BNZ   NOTLYEAR            IF THERE WAS REMAINDER-\n*                                  THIS WASN'T A LEAPYEAR\nLEAPYEAR ZAP   FEBDAYS,=P'29'           MOVE 29 DAYS INTO # OF FEB DAYS\n         B     ADDDAYS                  GO ADD UP # OF DAYS\nNOTLYEAR ZAP   FEBDAYS,=P'28'           MOVE 28 DAYS INTO # OF FEB DAYS\nADDDAYS  LA    5,DAYSINMO               GPR-5 <- ADDR OF <DAYSINMO>\n         CP    DAY,=P'0'                IS DAY GREATER THAN 0 ?\n         BNH   ERROR                    NO, GO RETURN ERROR DATE\n         CP    MO,=P'0'                 IS MONTH GREATER THAN 0 ?\n         BNH   ERROR                    NO, GO RETURN ERROR DATE\n         CP    MO,=P'12'                IS MONTH GREATER THAN 12 ?\n         BH    ERROR                    YES, GO RETURN ERROR DATE\nNEXTMO   CP    MO,0(2,5)                COMPARE MONTH WITH TABLE MONTH\n         BZ    GOTMONTH                 IF EQUAL ADD DAYS IN MONTH\n         AP    DAYS,2(2,5)              OTHERWISE, ADD # OF DAYS IN MO\n         LA    5,4(0,5)                 SKIP TO NEXT MO IN TABLE\n         B     NEXTMO                   GO COMPARE AGAIN\nERROR    L     4,4(0,3)                 GPR-4 <- ADDR OF JULIAN DATE\n* OUTPUT IS FOUR BYTE FIELD                                 *HMD 03/85*\n         ZAP   0(4,4),=P'99999'         MOVE ERROR DATA     *HMD 03/85*\n         OI    3(4),X'0F'               CHANGE SIGN TO X'F' *HMD 03/85*\n         B     BADGOUT                  GO RETURN\nGOTMONTH CP    DAY,2(2,5)               IS DAY > # OF DAYS IN MONTH ?\n         BH    ERROR                    YES, GO RETURN ERROR DATE\n         AP    DAYS,DAY                 ADD # OF DAYS IN THIS MONTH\nZDATE    EQU   *\n         ZAP   JULDATE,YEAR             MOVE YEAR TO JULIAN VARIABLE\n         MP    JULDATE,=P'1000'         MULTIPLY BY 1000\n         AP    JULDATE,DAYS             ADD # OF JULIAN DAYS\n         L     4,4(3)                   GPR-4 <- ADDR OF JULIAN VAR.\n* OUTPUT IS FOUR BYTE FIELD                                 *HMD 03/85*\n         ZAP   0(4,4),JULDATE+5(3)      MOVE JUL DATE TO CALLING PGM\n         OI    3(4),X'0F'               CHANGE SIGN TO X'F' *HMD 03/85*\nBADGOUT  EQU   *\n         LR    1,13                     SAVE OUR STORAGE    *HMD 03/85*\n         L     13,4(0,13)               GET BACK POINTER    *HMD 03/85*\n         LA    0,STORLEN                LENGTH TO FREE      *HMD 03/85*\n         FREEMAIN R,LV=(0),A=(1)        FREE IT UP          *HMD 03/85*\n         RETURN (14,12),T,RC=0          RETURN TO CALLER    *HMD 03/85*\n         SPACE 2                                            *HMD 03/85*\nMOE      LTORG                          LITERALS FOLLOW\n         TITLE 'JULIAN TO GREGORIAN CONVERSION'\n*---------------------------------------------------------------------*\n* THIS ROUTINE CONVERTS A FOUR BYTE PACKED DECIMAL JULIAN DATE TO A   *\n* SIX BYTE GREGORIAN 'YYMMDD' DATE.                                   *\n* EXAMPLE:                                                            *\n*   R1==> A(GDATE)      GDATE   DS     CL6      GREGORIAN YYMMDD      *\n*         A(JDATE)      JDATE   DS     F        JULIAN    00YYDDDF    *\n*                                                                     *\n*  ON ENTRY R1......> |>GREGDATE|>JULDATE |                           *\n*                         P1        P2                                *\n* HOWARD M. DEAN                                                      *\n* SYNTEX U.S.A.                                                       *\n*---------------------------------------------------------------------*\nGREGOR   SAVE (14,12)\n         BALR  10,0\n         USING *,10\n         USING DSA,13                   TELL ASSEMBLER      *HMD 03/85*\n         LR    2,1                      SAVE PARMS          *HMD 03/85*\n         GETMAIN R,LV=STORLEN           GET DYNAMIC STORAGE *HMD 03/85*\n         MVC   0(STORLEN,1),BEGOSTOR    INITIALIZE DYNAMIC  *HMD 03/85*\n         ST    13,4(1)                  SAVE REGISTERS      *HMD 03/85*\n         ST    1,8(13)                   CHAIN BACK         *HMD 03/85*\n         LR    13,1                     ADDRESS DYNASTOR    *HMD 03/85*\n         LR    3,2                      RETORE PARM REG     *HMD 03/85*\n         ZAP   YEAR,=P'0'\n         ZAP   MO,=P'0'\n         ZAP   DAY,=P'0'\n         L     4,4(0,3)                 GPR-4 <- ADDR OF JULIAN VAR.\n*  DATE PRESENTED AS FULLWORD SIGNED 00YYDDDF               *HMD 03/85*\n         ZAP   JDATE,0(4,4)             MOVE JULIAN DATE TO <JDATE>\n         CLI   JDATE+2,X'0C'         M/B SIGNED\n         BL    BADJDATE\n         CLI   JDATE+2,X'9C'\n         BH    BADJDATE\n         CP    JDATE,=P'0'             ZERO DATE ENTERED\"?\n         BE    GOTGDATE                YES   ---   RETURN ZEROS\n         CP    JDATE+1(2),=P'366'      # OF DAYS > 366?\n         BH    BADJDATE                YES---RETURN ERROR DATE\n         ZAP   DAYS,JDATE+1(2)          MOVE JULIAN DAYS TO <DAYS>\n         SP    JDATE,DAYS               SUBTRACT TO ZERO JULIAN DAYS\n         ZAP   JULDATE,JDATE            MOVE YEAR TIMES 100 TO <JULDATE\n         DP    JULDATE,=P'1000'         DIVIDE BY 100 TO GET YEAR\n         ZAP   YEAR,JULDATE+3(2)        MOVE YEAR TO <YEAR>\n         ZAP   LYEAR,=P'64'             INITIALIZE LEAP YEAR TO 1964\n         ZAP   DBLWRK,YEAR         MOVE YEAR TO DOUBLEWORD\n         STM   6,7,STORM           SAVE THESE TWO REGS\n         CVB   6,DBLWRK            CONVERT YEAR TO BINARY\n         LTR   6,6                 CHECK FOR YEAR 0\n         BZ    LEAPYR              IF YEAR IS 0-ITS A LEAPYEAR\n         SRDA  6,32                SHIFT TO ODD # REG\n         D     6,=F'4'             DIVIDE BY 4-ALL LEAP YEARS ARE\n*                                  EVENLY DIVISIBLE BY 4\n         LTR   6,6                 CHECK FOR REMAINDER\n         LM    6,7,STORM           (RELOAD REGS REGARDLESS OF CC)\n         BNZ   NOTLYR              IF THERE WAS REMAINDER-THIS WASNT A\n*                                  LEAPYEAR\nLEAPYR   ZAP   FEBDAYS,=P'29'           SET FEB DAYS IN TABLE TO 29\n         B     GETMODAY                 GO ADD DAYS IN EACH MONTH\nNOTLYR   ZAP   FEBDAYS,=P'28'           SET FEB DAYS IN TABLE TO 28\nGETMODAY LA    5,DAYSINMO               GPR-5 <- ADDR OF MO/DAY TABLE\nNEXTGMO  CP    DAYS,2(2,5)              COMPARE # DAYS WITH DAYS IN MO\n         BP    NOTGMON                  IF HIGH, SUBTRACT DAYS IN MO\n         ZAP   DAY,DAYS                 IF NOT HIGH,MOVE DAYS TO <DAY>\n         ZAP   MO,0(2,5)                MOVE MONTH TO <MO>\n         B     GOTGDATE                 GO CONVERT TO ZONED DECIMAL\nNOTGMON  SP    DAYS,2(2,5)              SUBTRACT DAYS IN MO FROM JULIAN\n         LA    5,4(0,5)                 GPR-5 <- ADDR OF NEXT TABLE ENT\n         B     NEXTGMO                  GO COMPARE JULIAN DAYS AGAIN\nBADJDATE L     4,0(0,3)                 GPR-4 <- ADDR OF GREGORIAN VAR.\n         MVC   0(6,4),=C'999999'        SET GREG ERROR DATE\n         B     BADJOUT                  GO RETURN\nGOTGDATE L     4,0(0,3)                 GPR-4 <- ADDR OF GREGORIAN VAR.\n         UNPK  0(2,4),YEAR              CONVERT YEAR TO ZONED DECIMAL\n         MVZ   1(1,4),=X'F0'            CHANGE SIGN TO PRINT CHAR\n         UNPK  2(2,4),MO                CONVERT MONTH TO ZONED DECIMAL\n         MVZ   3(1,4),=X'F0'            CHANGE SIGN TO PRINT CHAR\n         UNPK  4(2,4),DAY               CONVERT DAY TO ZONED DECIMAL\n         MVZ   5(1,4),=X'F0'            CHANGE SIGN TO PRINT CHAR\nBADJOUT  EQU   *\n         LR    1,13                     RESTORE AREA PTR    *HMD 03/85*\n         L     13,4(0,13)               LOAD BACK CHAIN     *HMD 03/85*\n         LA    0,STORLEN                LENGTH TO FREE      *HMD 03/85*\n         FREEMAIN R,LV=(0),A=(1)        FREE IT UP          *HMD 03/85*\n         RETURN (14,12),T,RC=0          RETURN TO CALLER    *HMD 03/85*\n         SPACE 2                                            *HMD 03/85*\nIRVING   LTORG                          LITERALS FOLLOW\nBEGOSTOR DC    20F'0'\n         DS    PL8\n         DS    PL3\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'1'\n         DC    PL2'31'\n         DC    PL2'2'\n         DC    PL2'0'\n         DC    PL2'3'\n         DC    PL2'31'\n         DC    PL2'4'\n         DC    PL2'30'\n         DC    PL2'5'\n         DC    PL2'31'\n         DC    PL2'6'\n         DC    PL2'30'\n         DC    PL2'7'\n         DC    PL2'31'\n         DC    PL2'8'\n         DC    PL2'31'\n         DC    PL2'9'\n         DC    PL2'30'\n         DC    PL2'10'\n         DC    PL2'31'\n         DC    PL2'11'\n         DC    PL2'30'\n         DC    PL2'12'\n         DC    PL2'31'\n         DC    PL2'99'\n         DC    PL2'99'\n         SPACE 3\n         DS    D\n         DS    2F\nENDOSTOR EQU   *                                            *HMD 03/85*\nSTORLEN  EQU   ENDOSTOR-BEGOSTOR        END MINUS BEGINNING *HMD 03/85*\n         TITLE 'DYNAMIC SAVE AREA'                          *HMD 03/85*\nDSA      DSECT                          DYNAMIC SAVE AREA   *HMD 03/85*\nSAVE     DC    20F'0'\nJULDATE  DS    PL8                      JULIAN DATE WORK WORD\nJDATE    DS    PL3                      JULIAN DATE\nLYEAR    DC    PL2'0'                   LEAP YEAR\nDAYS     DC    PL2'0'                   JULIAN DAYS\nYEAR     DC    PL2'0'                   YEAR\nMO       DC    PL2'0'                   MONTH\nDAY      DC    PL2'0'                   DAY\nDAYSINMO EQU   *\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'1'                   JANUARY\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'2'                   FEBRUARY\nFEBDAYS  DC    PL2'0'                   INITIALIZED TO 0 DAYS\n         DC    PL2'3'                   MARCH\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'4'                   APRIL\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'5'                   MAY\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'6'                   JUNE\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'7'                   JULY\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'8'                   AUGUST\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'9'                   SEPTEMBER\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'10'                  OCTOBER\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'11'                  NOVEMBER\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'12'                  DECEMBER\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'99'\n         DC    PL2'99'\n         SPACE 3\nDBLWRK   DS    D\nSTORM    DS    2F\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LDROP": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00Q\\x00Q\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    LDROP &W1,&W2\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&B,&C,&D,&E\n         LCLB  &F\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H .                     NAME DEFINED\n.NONAME  AIF   (&LUSED).CNTU\n         MNOTE 8,'USER ERROR - LUSE HAS NEVER BEEN USED'\n         MEXIT\n.CNTU    ANOP\n&C       SETA  N'&SYSLIST\n         AIF   (&C GT 0).OK1\n         MNOTE 4,'NO OPERAND(S) ON LDROP, MACRO IGNORED'\n         MEXIT\n.OK1     AIF   ('&W1' EQ '*').DROPALL\n&A       SETA  1\n.LOOP    AIF   (&A GT &C).MEND\n&X1      SETC  '&SYSLIST(&A)'\n&B       SETA  1\n&F       SETB  0\n.LL1     AIF   ('&USEW(&B)' EQ '&X1').DROPIT\n         AIF   ('&USEW(&B)' EQ '').LL1A\n&B       SETA  &B+1\n         AIF   (&B LE 25).LL1\n.LL1A    AIF   (&F).GETNEXT\n         MNOTE 8,'USER ERROR - &SYSLIST(&A) NOT LUSED'\n.GETNEXT ANOP\n&A       SETA  &A+1\n         AGO   .LOOP\n.DROPIT  ANOP\n&D       SETA  (&B*2)-1\n         MNOTE *,'&USEW(&B) WAS BASE FOR &USENM(&D)&USENM(&D+1)'\n.*       CLEAN UP USEW ARRAY FIRST\n&E       SETA  &B                       SET POINTER\n.CL1     AIF   (&E EQ 25).NULLAST\n&USEW(&E) SETC '&USEW(&E+1)'\n&E       SETA  &E+1\n         AIF   ('&USEW(&E)' EQ '').CL2\n         AGO   .CL1\n.NULLAST ANOP\n&USEW(25) SETC ''\n.*       NOW - THE HARD PART, CLEAN UP USENM\n.CL2     AIF   (&D GE 49).NULBOTH\n&USENM(&D) SETC '&USENM(&D+2)'\n&USENM(&D+1) SETC '&USENM(&D+3)'\n&D       SETA  &D+2\n         AIF   ('&USENM(&D)' EQ '').GOTO\n         AGO   .CL2\n.NULBOTH ANOP\n&USENM(49) SETC ''\n&USENM(50) SETC ''\n.GOTO    AIF   (&F).LL1                 TRY AGAIN\n         DROP  &SYSLIST(&A) .           GEN DROP STMT\n&F       SETB  1                        NO MULTI-DROPS\n         AGO   .LL1                     CLEAN ANY REMAINING ENTRIES\n.DROPALL MNOTE *,'ALL KNOWN BASE REGISTERS BEING DROPPED'\n&B       SETA  1\n.DD1     AIF   ('&USEW(&B)' EQ '').DDONE\n         MNOTE *,'&USEW(&B) WAS BASE FOR &USENM(&B*2-1)&USENM(&B*2)'\n&B       SETA  &B+1\n&F       SETB  1\n         AGO   .DD1\n.DDONE   AIF   (&F).DDTWO\n         MNOTE 4,'** NO REGISTERS IN USE TO BE LDROP''ED **'\n         MEXIT\n.DDTWO   ANOP\n&A       SETA  1\n.CLEAR   AIF   (&A GT 25).MEND\n         AIF   ('&USEW(&A)' EQ '').NODRP\n         DROP  &USEW(&A) .                  GENERATE DROP STMT\n.NODRP   ANOP\n&USEW(&A) SETC ''\n&B       SETA  (&A*2)-1\n&USENM(&B) SETC ''\n&USENM(&B+1) SETC ''\n&A       SETA  &A+1\n         AGO   .CLEAR\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LM00038": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00Q\\x00Q\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "HMDEAN"}, "text": "//MVS$U038 JOB (U4757,U4757,000000),'MVS/XA SYSTEM MOD',\n//  CLASS=C,\n//  MSGCLASS=2\n//*\n/*ROUTE  PRINT FETCH\n/*MAIL=HMD\n/*NOTIFY   $UHMD\n/*JOBPARM  L=999,ROOM=A539,F=J012\n//*\n//****|\n//****| BE SURE TO RUN \"LM00039\" IMMEDIATELY AFTER THIS\n//****| MODIFICATION.\n//****|\n//*\n//XAMOD    EXEC XASMPE,\n//  CSI='SYS1.XASMPE.GLOBAL.CSI'\n//SMPEIN   DD   *\n SET BDY(XATARG).\n RESTORE S(                /* RESTORE REQUESITE SYSMODS */\n           LM00038\n           LM00039         /* RUN THIS MOD AFTER \"LM00038\" ENDS */\n          ).\n RESETRC.\n SET BDY(GLOBAL).\n RECEIVE S(LM00038) SYSMODS SOURCEID(LOCALMOD).\n SET BDY(XATARG).\n APPLY   S(LM00038) REDO.\n/*\n//SMPPTFIN DD   DATA,DLM=$$\n++ USERMOD (LM00038)  /* STARTED TASK ACCOUNTING MODIFICATION\n  *****************************************************************\n  *                                                               *\n  *                   S Y N T E X    U S A                        *\n  *                       PALO ALTO, CA                           *\n  *                                                               *\n  *       DATE:  07/10/86  BY: HOWARD M. DEAN                     *\n  *                                                               *\n  *                                                               *\n  *       RELEASE         - MVS EXTENDED ARCHITECTURE REL 2.1.3   *\n  *                                                               *\n  *       PTF LEVEL       - 8601 (FMID HBB2102) (BASE MVS/XA)     *\n  *                                                               *\n  *       USERMOD         - LM00038                               *\n  *       JOBNAME         - MVS$U308                              *\n  *       TYPE            - ZAP, SRC                              *\n  *                                                               *\n  *       PRODUCT         - MVS/XA BASE - STARTED TASK CONTROL    *\n  *       LMOD            - JOBNAME   (NEW MODULE ADDED)          *\n  *                       - IEEVSTAR, IEEVMNT1                    *\n  *                                                               *\n  *       MOD (CSECT)     - JOBNAME, IEEVJCL                      *\n  *                                                               *\n  *                                                               *\n  *       REASON FOR MOD  - PROVIDE A METHOD FOR INSERTING        *\n  *                         ACCOUNTING INTO STARTED TASKS AND     *\n  *                         ALSO ADDING JES2 CONTROL CARDS AFTER  *\n  *                         THE STARTED TASK JOB CARD AND BEFORE  *\n  *                         THE STARTED TASK EXEC CARD.           *\n  *---------------------------------------------------------------*\n  *       NOTE: THIS SYSMOD IS A PREREQ OF LM00039 WHICH UPDATES  *\n  *             THE MSTJCL00 SYSGEN MACRO SGIEE0MS.               *\n  *****************************************************************\n  */.\n++ VER (Z038) FMID(HBB2102) /* MVS XA BASE PRODUCT */.\n++ JCLIN.\n//SG7 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT,SIZE=(512K,100K)',\n//    UNIT='3380',SER=MVXTGT,N=SYS1,NAME=LPALIB3,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=M\n//AOSB3 DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3\n//SYSLIN DD *\n INCLUDE AOSB3(JOBNAME)\n ENTRY JOBNAME\n NAME  JOBNAME(R)\n++ SRC (JOBNAME) DISTLIB(SYNSRC) DISTMOD(AOSB3) TXLIB(SYNSRC).\n++ ZAP (IEEVJCL) DISTLIB(AOSB3).\n NAME IEEVJCL\n VER 0178 C9C5,C5E2,C2F6,F0F5     IEESB605\n REP 0178 D1D6,C2D5,C1D4,C540     JOBNAME\n IDRDATA LM00038\n$$\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LM00039": {"ttr": 3339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00K\\x00K\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "HMDEAN"}, "text": "//MVS$U039 JOB (U4757,U4757,000000),'MVS/XA SYSTEM MOD',\n//  CLASS=C,\n//  MSGCLASS=2\n//*\n/*ROUTE  PRINT FETCH\n/*MAIL=HMD\n/*NOTIFY   $UHMD\n/*JOBPARM  L=999,ROOM=A539,F=J012\n//*\n//********************************************************************\n//**                                                                **\n//**     WARNING! DO NOT RENUMBER THIS MOD - MACRO UPDATE INSIDE    **\n//**                                                                **\n//********************************************************************\n//XAMOD    EXEC XASMPE,\n//  CSI='SYS1.XASMPE.GLOBAL.CSI'\n//SMPEIN   DD   *\n SET BDY(GLOBAL).\n REJECT  S(LM00039) BYPASS(APPLYCHECK).\n RESETRC.\n RECEIVE S(LM00039) SYSMODS SOURCEID(LOCALMOD).\n SET BDY(XATARG).\n APPLY   S(LM00039) ASSEM REDO.\n/*\n//SMPPTFIN DD   DATA,DLM=$$\n++ USERMOD (LM00039)  /* STARTED TASK ACCOUNTING MODIFICATION\n  *****************************************************************\n  *                                                               *\n  *                   S Y N T E X    U S A                        *\n  *                       PALO ALTO, CA                           *\n  *                                                               *\n  *       DATE:  07/10/86  BY: HOWARD M. DEAN                     *\n  *                                                               *\n  *       (*** DO NOT RENUMBER THIS DATASET - MACUPD INSIDE ***)  *\n  *                                                               *\n  *       RELEASE         - MVS EXTENDED ARCHITECTURE REL 2.1.3   *\n  *                                                               *\n  *       PTF LEVEL       - 8601 (FMID JBB2110)                   *\n  *                                                               *\n  *       USERMOD         - LM00039                               *\n  *       JOBNAME         - MVS$U039                              *\n  *       TYPE            - MACUPD                                *\n  *                                                               *\n  *       PRODUCT         - MVS/XA BASE - STARTED TASK CONTROL    *\n  *       LMOD            - MSTJCL00                              *\n  *                                                               *\n  *       MACUPD          - SGIEE0MS (MASTER JCL)                 *\n  *                                                               *\n  *       REASON FOR MOD  - THIS MODIFICATION, ALONG WITH         *\n  *                         LM00038 (WHICH IS A PREREQ TO         *\n  *                         THIS MOD) WILL PROVIDE STARTED TASK   *\n  *                         ACCOUNTING AND JES2 CONTROL CARDS FOR *\n  *                         STARTED TASK.                         *\n  *\n  *                         THIS SECTION IS IN A DIFFERENT MOD    *\n  *                         BECAUSE THE FMID FOR \"SGIEE0MS\" IS    *\n  *                         DIFFERENT FROM THE FMID FOR \"IEEVJCL\" *\n  *                         UPDATED IN LM00038.                   *\n  *---------------------------------------------------------------*\n  *       NOTE: THIS MOD REQUIRES MOD LM00038 AS A                *\n  *             PREREQUESITE DUE TO \"SGIEE0MS\" HAVING             *\n  *             A DIFFERENT FMID FROM \"IEEVJCL\"                   *\n  *****************************************************************\n  */.\n++ VER (Z038) FMID(JBB2110) PRE(LM00038) /*\n                                            MODIFICATION LM00038 IS\n                                            REQUIRED AS A PREREQ TO\n                                            THIS MACRO UPDATE\n                                         */.\n++ MACUPD(SGIEE0MS) DISTLIB(AMODGEN).\n./ CHANGE NAME=SGIEE0MS\n*                 STCACCT          STC ACCOUNTING DATASET       LM00039\n         DC    CL80'//STCACCT  DD DSN=SYS3.STCACCT,DISP=SHR'    LM00039\n./ ENDUP\n$$\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LUSE": {"ttr": 3342, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00B\\x00B\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    LUSE  &WHERE,&W1,&W2\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&B,&C,&D,&E\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H .           DEFINE NAME\n.NONAME  AIF   (N'&SYSLIST LE 15).OK1\n         MNOTE 16,'OPERAND ERROR - TOO MANY OPERANDS, MACRO ABORTED'\n         MEXIT\n.OK1     AIF   (N'&SYSLIST LT 2).ERR\n&A       SETA  1\n&C       SETA  N'&SYSLIST\n.OKX     AIF   ('&SYSLIST(&A)' NE '').INCR\n         MNOTE 16,'OPERAND ERROR - NULL OPERAND'\n         MEXIT\n.INCR    AIF   (&A EQ &C).GEN\n&A       SETA  &A+1\n         AGO   .OKX\n.GEN     AIF   (&C NE 2).RECURSE\n&A       SETA  1\n.FNULL   AIF   ('&USEW(&A)' EQ '').HNULL\n&A       SETA  &A+1\n         AIF   (&A LE 25).FNULL\n         MNOTE 16,'LUSE USER ERROR - TOO MANY LUSE WITHOUT LDROP'\n         MEXIT\n.HNULL   ANOP\n&D       SETA  (&A*2)-1\n&E       SETA  K'&WHERE-8\n&X1      SETC  '&WHERE'\n         AIF   (&E LE 0).COMMON\n         AIF   (&E LE 8).SETX2\n&E       SETA  8\n.SETX2   ANOP\n&X2      SETC  '&WHERE'(9,&E)\n.COMMON  ANOP\n&USENM(&D)     SETC           '&X1'\n&USENM(&D+1) SETC '&X2'\n&USEW(&A) SETC '&W1'\n&E       SETA  1\n.MATCH   AIF   (&E GE &A).GENUSE\n         AIF   ('&USEW(&E)' EQ '&USEW(&A)').MN0\n&E       SETA  &E+1\n         AGO   .MATCH\n.MN0     MNOTE 0,'** WARNING **  REGISTER '\n         MNOTE *,'&USEW(&E) PREVIOUSLY LUSED AS BASE FOR'\n&D       SETA  (&E*2)-1\n         MNOTE *,'&USENM(&D)&USENM(&D+1) - NEW USING CREATED'\n&E       SETA  &E+1\n         AGO   .MATCH\n.GENUSE  USING &WHERE,&W1 .   GEN USING STMT\n         AIF   (&LUSED).MEND\n&LUSED   SETB  1\n         SPACE 1\n         MEXIT\n.RECURSE ANOP\n&B       SETA  2\n.RCU     AIF   (&B GT &C).MEND\n         LUSE  &WHERE&X1,&SYSLIST(&B)\n&B       SETA  &B+1\n&E       SETA  &E+4096\n&X1      SETC  '+'.'&E'\n         AGO   .RCU\n.ERR     MNOTE 16,'OPERAND ERROR - NEED 2 OR MORE OPERANDS, MACRO EXIT'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAKEDAY": {"ttr": 3344, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00(\\x00(\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "HMDEAN"}, "text": "PROC 0 DEBUG\nIF &DEBUG EQ DEBUG THEN CONTROL LIST CONLIST SYMLIST PROMPT\n   ELSE CONTROL NOMSG NOLIST NOPROMPT NOFLUSH\nERROR RETURN\n/*********************************/\n/*  INITIALIZE 'XFER' DATASET    */\n/*                               */\n/* HOWARD M. DEAN                */\n/* SYNTEX U.S.A.                 */\n/* 3401 HILLVIEW AVE.            */\n/* PALO ALTO, CA 94303           */\n/* (415) 852-1792                */\n/*                               */\n/*********************************/\nDEL 'SYS3.XFER.DATA' PURGE\nFREE  DA('SYS3.XFER.DATA') FI(INPUT)\nALLOC DA('SYS3.XFER.DATA') SP(5,1) CYL DIR(45) NEW CATALOG -\n      UNIT(SYSDA) VOL(MVS802)\nSET &X EQ 1\nCONTROL NOFLUSH\nDO WHILE(&X LT 32)\n   IF &X LT 10 THEN SET &X EQ &STR(0&X)\n   FREE  FI(INPUT)\n   ALLOC FI(INPUT) DA('SYS3.XFER.DATA(DAY&X)') OLD\n   OPENFILE INPUT OUTPUT\n   /* INSURE 80 BYTE RECORDS */\n   SET &INPUT EQ -\n   &STR(PAD............)\n   SET &INPUT EQ -\n   &INPUT&STR(...................................)\n   SET &INPUT EQ -\n   &INPUT&STR(..............................)\n   /* INSURE 80 BYTE RECORDS */\n   PUTFILE INPUT\n   CLOSFILE INPUT\n   WRITE MEMBER DAY&X WRITTEN\n   SET &X EQ &X + 1\nEND\nWRITE PROCESS COMPLETE\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDFHELP": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00A\\x00A\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "HMDEAN"}, "text": ")F   FUNCTION -\n\n     The PDFINIT command is used to optionally initialize the\n     environment for ISPF/PDF Version 2. Also, a dataset named\n     'PREFIX.PROFILE.CLIST', or a character string representing a\n     TSO command, can be optionally placed on the command input\n     stack for execution after the PDFINIT command terminates.\n\n     The catalog will be searched for a dataset named\n     'USERID.ISPF.PROFILE' and, if found, will be allocated\n     exclusivly to ddname ISPPROF. If the dataset cannot\n     be located, one will be created on a TSO volume.\n     If the NOISPF operand is supplied, this step will be\n     bypassed.\n\n     After allocation of the ISPF/PDF profile dataset, a search\n     is made for a dataset named 'PREFIX.PROFILE.CLIST'. If such\n     a dataset is found, an EXEC command specifying this file is\n     placed on the command input stack. After PDFINIT terminates,\n     the commands in this dataset will be executed by the TSO\n     terminal monitor program. If the CMD operand is supplied,\n     the command in this string is executed and the\n     'PREFIX.PROFILE.CLIST' search and execution is bypassed.\n\n     Normally, this command is placed in the PARM field of the\n     EXEC card in a users TSO logon procedure. This will allocate\n     the necessary PROFILE dataset for ISPF/PDF Version 2 and\n     execute a string of initialization commands for each user.\n     If a group of users share a logon procedure, the CMD operand\n     may be used to execute a common CLIST from a group command\n     procedure library.\n\n     NOTE: This command MAY NOT be used from within a CLIST!\n\n)X   SYNTAX -\n\n     PDFINIT  ISPF/NOISPF  COMMAND('Command String')\n\n     DEFAULTS - ISPF,(no command string)\n     ALIAS    - NONE\n     REQUIRED - NONE\n\n)O   OPERANDS -\n\n))ISPF        Indicates that the ISPF/PDF Version 2 profile\n              dataset is to be allocated to the ddname ISPPROF.\n              The profile dataset must be named\n              'USERID.ISPF.PROFILE'.  If no dataset exits, one\n              will be created on a TSO volume. This is the\n              DEFAULT.\n\n))NOISPF      Indicates that ISFP/PDF Version 2 processing is\n              to be bypassed. No ISPF profile dataset is\n              allocated, so ISPF services will be unusable\n              if this operand is specified.\n\n))COMMAND     Specifies a quoted string containing a single\n              TSO command to be placed on the input stack. If\n              quotes are contained within the command, double\n              quotes must be used. A command length of up to\n              256 bytes may be entered. When this operand is\n              entered, the execution of 'PREFIX.PROFILE.CLIST'\n              will be bypassed.\n\n))CMD         This is an alias of the COMMAND operand.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDFINIT": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x04\\xce\\x04\\xce\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 1230, "newlines": 1230, "modlines": 0, "user": "HMDEAN"}, "text": "PDF      TITLE 'INITIALIZATION UTILITY FOR TSO/E PROGRAM PRODUCT'\nPDFINIT  CSECT\n***********************************************************************\n*                                                                     *\n* MODULE NAME = PDFINIT                                               *\n*                                                                     *\n* STATUS = TSO EXTENSIONS VERSION 2.1                                 *\n*          (NOTE - THIS COMMAND WILL NOT OPERATE                      *\n*                  WITHOUT THE TSO/EXTENTIONS                         *\n*                  PROGRAM PRODUCT)                                   *\n*                                                                     *\n* AUTHOR = HOWARD M. DEAN                                             *\n*          SYNTEX U.S.A.                                              *\n*          TECHNICAL SUPPORT                                          *\n*          M/S A5-CIS-5                                               *\n*          3401 HILLVIEW AVENUE                                       *\n*          PALO ALTO, CA 94303                                        *\n*          (415) 852-1792                                             *\n*                                                                     *\n* FUNCTION = THIS MODULE WILL OPTIONALLY ALLOCATE THE 'ISPPROF'       *\n*            PROFILE DATASET FOR USE WITH ISPF VERSION 2.2.  ALSO, A  *\n*            COMMAND NAMED IN THE 'CMD' KEYWORD PARAMETER, OR A       *\n*            DATASET NAMED '&PREFIX..PROFILE.CLIST' WILL              *\n*            BE PLACED ON THE INPUT STACK FOR EXECUTION AS SOON AS    *\n*            THIS COMMAND PROCESSOR TERMINATES. THE EXECUTION FLOW    *\n*            IS A FOLLOWS:                                            *\n*                                                                     *\n*            1) CHECK FOR VALID ENVIRONMENT. 'PDFINIT' MAY NOT BE     *\n*               EXECUTED FROM WITHIN A COMMAND PROCEDURE. THIS IS     *\n*               TO PREVENT RECURSION IN CASE SOMEONE PUTS THIS        *\n*               COMMAND IN THEIR PROFILE 'CLIST'.                     *\n*                                                                     *\n*            2) BUILD THE NAME OF THE PROFILE DATASET AND      HD JUN86\n*               PROFILE COMMAND PROCEDURE. THE USERID FROM     HD JUN86\n*               THE PSCB IS USED FOR THE ISPF PROFILE DATASET  HD JUN86\n*               AND THE PREFIX FROM THE UPT IS USED FOR THE    HD JUN86\n*               PROFILE CLIST.  HOWEVER, IF A COMMAND IS       HD JUN86\n*               SPECIFIED, THE PROFILE CLIST IS NOT ALLOCATED  HD JUN86\n*               AND EXECUTED.                                  HD JUN86\n*                                                                     *\n*            3) CALL 'IKJPARS' TO CHECK OPERANDS ON COMMAND    HD JUN86\n*               LINE                                           HD JUN86\n*                                                              HD JUN86\n*            4) IF 'NOISPF' SPECIFIED, SKIP STEPS 5, 6, & 7    HD JUN86\n*\n*            5) DEALLOCATE 'ISPPROF' DDNAME  (IF PREVIOUSLY USED)     *\n*                                                                     *\n*            6) ATTEMPT TO ALLOCATE FILE 'ISPPROF' EXCLUSIVELY        *\n*               AS DATASET '&SYSUID..ISPF.PROFILE'             HD MAY86\n*                                                                     *\n*            7) IF DATASET NOT FOUND, ALLOCATE IT NEW AS FOLLOWS:     *\n*                                                                     *\n*               ALLOC FI(ISPPROF) DA('&SYSUID..ISPF.PROFILE')- HD MAY86\n*               BLOCK(9040) DIR(3) UNIT(SYSALLDA) VOL(TSO004)-        *\n*               SPACE(10) BLKSIZE(9040) LRECL(80) RECFM(F B)          *\n*                                                                     *\n*               NOTE: IF USER IS NOT PRIVILEGED, PERFORM A            *\n*                     NON-SPECIFIC ALLOCATION. IEFDB401 WILL          *\n*                     DETERMINE THE PROPER VOLSER FOR THE PROFILE     *\n*                     DATASET                                         *\n*                                                                     *\n*            6) IF THE 'CMD' KEYWORD WAS SUPPLIED:             HD JUN86\n*                                                              HD JUN86\n*               * ALLOCATE STORAGE FOR AN LSD                  HD JUN86\n*               * MOVE THE COMMAND SUPPLIED INTO THE LSD       HD JUN86\n*               * INVOKE IKJSTCK TO PLACE THE COMMAND ON       HD JUN86\n*                 THE INPUT STACK AND AN 'IN-STORAGE' SOURCE   HD JUN86\n*                 DATASET.                                     HD JUN86\n*               * SKIP STEPS 7, 8, & 9 AND RETURN              HD JUN86\n*                                                              HD JUN86\n*            7) ATTEMPT TO ALLOCATE '&SYSPREF..PROFILE.CLIST'         *\n*                                                                     *\n*            8) IF DATASET NOT FOUND, THEN JUST RETURN                *\n*                                                                     *\n*            9) IF DATASET WAS FOUND, THEN PLACE IT ON THE STACK      *\n*               FOR EXECUTION AFTER THIS COMMAND PROCESSOR FINISHES.  *\n*                                                                     *\n*                                                                     *\n* USAGE  =  PLACE THE FOLLOWING PARAMETER FIELD ON                    *\n*           THE 'EXEC' CARD IN TSO LOGON PROCEDURES:                  *\n*                                                              HD JUN86\n*                //TSO    EXEC PGM=IKJEFT01,                   HD JUN86\n*                //     PARM='PDFINIT NOISPF CMD(''TIME'')'    HD JUN86\n*                                                              HD JUN86\n*           IF NO PARAMETERS ARE SPECIFIED, THEN               HD JUN86\n*           AN ISPF PROFILE DATASET IS ALLOCATED AND           HD JUN86\n*           AN '&SYSPREF..PROFILE.CLIST' IS PLACED ON          HD JUN86\n*           THE INPUT STACK.                                   HD JUN86\n*                                                              HD JUN86\n* ENTRY POINTS = PDFINIT                                              *\n*                                                                     *\n* EXIT NORMAL =  EXIT TO THE TERMINAL MONITOR PROGRAM WITH AN R/C IN  *\n*                REGISTER 15 AS FOLLOWS:                              *\n*                                                                     *\n*                R15 = 0       ALLOCATIONS COMPLETE - PROCEED         *\n*                R15 = 8       COULD NOT FIND PROFILE CLIST           *\n*                R15 = 12      AN ERROR OCCURED PROCESSING THIS CMD   *\n*                                                                     *\n* EXIT ERROR = DISPLAY MULTILEVEL ERROR MESSAGE AND                   *\n*              RETURN TO CALLER AS IN EXIT NORMAL ABOVE.\n*                                                                     *\n* RESTRICTIONS =                                                      *\n*\n*      WARNING! THIS COMMAND PROCEDURE CANNOT BE EXECUTED FROM        *\n*               WITHIN A CLIST OR CMDPROC DATASET. THIS IS TO         *\n*               PREVENT A RECURSIVE LOOP IF PDFINIT IS ONE            *\n*               COMMAND IN A USER'S PROFILE CLIST.                    *\n*                                                                     *\n*               A SPECIFIC CHECK IS MADE AND AN INVALID ENVIRONMENT   *\n*               WILL CAUSE AN ERROR MESSAGE TO BE GENERATED AND       *\n*               PROCESSING WILL TERMINATE.                            *\n* REGISTER-CONVENTIONS =                                              *\n*                                                                     *\n*  REGISTER     0: WORK AND SYSTEM PARAMETERS                         *\n*  REGISTER     1: WORK AND SYSTEM PARAMETERS                         *\n*  REGISTERS 2-11: WORK REGISTERS                                     *\n*  REGISTER    12: PROGRAM BASE REGISTER                              *\n*  REGISTER    13: POINTER TO DYNAMIC AREA AND SAVE AREA              *\n*  REGISTER    14: LINK REGISTER FOR PROGRAM SUBROUTINES              *\n*  REGISTER    15: WORK REGISTER AND SUBROUTINE CALL REGISTER         *\n*                                                                     *\n* ATTRIBUTES -  PDFINIT IS REENTERABLE, REFRESHABLE AND               *\n*               RUNS IN PROBLEM STATE, PROBLEM KEY, UNAUTHORIZED.     *\n*                                                                     *\n*                                                                     *\n* CHANGE ACTIVITY =                                                   *\n*                                                                     *\n*   INSTALLED = 04 APR 1986     HOWARD M. DEAN                        *\n*                               SYNTEX U.S.A.                         *\n*=====================================================================*\n*   UPDATED   = 26 JUN 1986     HOWARD M. DEAN                 HD JUN86\n*                               SYNTEX U.S.A.                  HD JUN86\n*   1) ADDED PARSE ROUTINE                                     HD JUN86\n*   2) ADDED THE 'NOISPF' KEYWORD TO BYPASS THE                HD JUN86\n*      ISPF ALLOCATION.                                        HD JUN86\n*   3) ADDED THE 'CMD' KEYWORD TO STACK A QUOTED               HD JUN86\n*      COMMAND STRING INSTEAD OF THE PROFILE CLIST             HD JUN86\n*   4) WROTE HELP MEMBER                                       HD JUN86\n*   5) MISC. CLEANUP                                           HD JUN86\n***********************************************************************\n         EJECT                                              *HMD 04/86*\n         TSOENTER REGS=YES,CPR=YES,PL=(CPPL,IO,SCAN,PARSE), *HMD 04/86*X\n               SP=1,WORK=AREALEN                            *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       HOUSEKEEPING - INITIALIZE STORAGE                  *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R0,TSOUSER          R0 -> USER SECTION       *HMD 03/85*\n         LA    R1,AREALEN          R1 = LENGTH OF WORKAREA  *HMD 03/85*\n         SLR   R15,R15             R15 = 0                  *HMD 03/85*\n         MVCL  R0,R14              CLEAR WORKAREA  TO ZEROS *HMD 03/85*\n         SPACE 1                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       MAIN PROCESSING SECTION - CALL SUBROUTINES         *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,CMDPROC       CHECK FOR VALID ENVIRON  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,NAMES         BUILD DATASET NAMES      *HMD 04/86*\n         SPACE 1                                               HD JUN86\n         BAL   RLINK,PARSE         PARSE OPERANDS              HD JUN86\n         SPACE 1                                               HD JUN86\n         TM    PARSFLAG,PARSFAIL   DID PARSE FAIL?             HD JUN86\n         LA    R2,MESS10           LOAD ERROR MESSAGE          HD JUN86\n         LA    R3,MESS02           LOAD SECOND LEVEL MESSAGE   HD JUN86\n         BO    ERRORMSG            SEND MESSAGE AND RETURN     HD JUN86\n         SPACE 1                                               HD JUN86\n         LUSE  IKJPARMD,R9         ADDRESS THE PARSE DSECT     HD JUN86\n         L     R9,PPLRANS          LOAD ANSWER PLACE           HD JUN86\n         CLI   KEYISPF+1,2         WAS NOISPF ENTERED?         HD JUN86\n         BNE   *+8                 BRANCH AROUND 'OI'          HD JUN86\n         OI    PARSFLAG,PNOISPF    INDICATE NO ISPF ALLOCATE   HD JUN86\n         SPACE 1                                               HD JUN86\n         LDROP R9                  NO NEED FOR BASE NOW        HD JUN86\n         BAL   RLINK,ALLODDN       FIX UP 'ISPPROF' DNAME   *HMD 04/86*\n         CLI   DYNFLAG,DYNFAIL     DID DYNALLOC FAIL?       *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,MESS01           GET FIRST LEVEL MESSAGE  *HMD 04/86*\n         LA    R3,MESS02           GET SECOND LEVEL MESSAGE *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BE    ERRORMSG            YES, PRINT MSG AND END   *HMD 04/86*\n         BAL   RLINK,ALLODSN       GO ALLOCATE ISPPROF DSN  *HMD 04/86*\n         CLI   DYNFLAG,DYNFAIL     CHECK FOR DYNALLOC FAIL  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,MESS01           GET FIRST LEVEL MESSAGE  *HMD 04/86*\n         LA    R3,MESS02           GET SECOND LEVEL MESSAGE *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BE    ERRORMSG            YES, PRINT MSG AND END   *HMD 04/86*\n         SPACE 1                                               HD JUN86\n         LUSE  IKJPARMD,R9         ADDRESS THE PDE             HD JUN86\n         L     R9,PPLRANS          LOAD ANSWER PLACE           HD JUN86\n         CLI   KEYCMD+1,0          'COMMAND' KEYWORK PRESENT?  HD JUN86\n         BE    CLII                NO, TRY THE PROFILE CLIST   HD JUN86\n         TM    CMD+6,X'80'         IS COMMAND PRESENT?         HD JUN86\n         BZ    CLII                NO, TRY THE PROFILE CLIST   HD JUN86\n         OI    PARSFLAG,PCMD       INDICATE COMMAND PRESENT    HD JUN86\n         SPACE 1                                               HD JUN86\n         BAL   RLINK,DOCMD         GO STACK THE COMMAND        HD JUN86\n         SPACE 1                                               HD JUN86\n         SLR   R2,R2               CLEAR RETURN CODE           HD JUN86\n         B     RETURN                                          HD JUN86\n         LDROP R9                                              HD JUN86\n         SPACE 1                                               HD JUN86\nCLII     BAL   RLINK,ALLOCLI       GO CHECK FOR CLIST       *HMD 04/86*\n         CLI   DYNFLAG,DYNCNF      CLIST NOT FOUND?         *HMD 04/86*\n         BNE   CHKFAIL             YES, JUST GO BACK        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,8                RETURN CODE 8            *HMD 04/86*\n         B     RETURN              RETURN TO CALLER         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nCHKFAIL  CLI   DYNFLAG,DYNFAIL     FAILURE?                 *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,MESS05           GET FIRST LEVEL MESSAGE  *HMD 04/86*\n         LA    R3,MESS06           GET SECOND LEVEL MSG     *HMD 04/86*\n         BE    ERRORMSG            PRINT MESSAGE AND RETURN *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,GOSTACK       GO SET UP STACK          *HMD 04/86*\n         SLR   R2,R2               CLEAR RETURN CODE        *HMD 04/86*\n         B     RETURN              RETURN TO CALLER         *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       RETURN TO THE TERMINAL MONITOR PROGRAM             *HMD 04/86*\n**               (FREE STORAGE AND GO)                      *  HD JUN86\n**                                                          *  HD JUN86\n*************************************************************  HD JUN86\nRETURN   IKJRLSA  PPLRANS          CLEAR PARSE STORAGE         HD JUN86\n         SPACE 2                                               HD JUN86\n         TSOLEAVE RETCODE=(2)      RETURN TO CALLER         *HMD 04/86*\n         EJECT\n***************************************************************HD JUN86\n**                                                             HD JUN86\n**  PARSE    -  INVOKE PARSE SERVICE ROUTINE                   HD JUN86\n**                                                             HD JUN86\n***************************************************************HD JUN86\nPARSE    DS    0H                                              HD JUN86\n         ST    RLINK,SAVRLINK      SAVE LINK REGISTER          HD JUN86\n         MVI   PARSFLAG,0          CLEAR PARSE FLAG            HD JUN86\n         MVC   PPLPCL,APDFTAB      MOVE PARM TAB ENTRY         HD JUN86\n         XC    TSOECB,TSOECB       CLEAR THE EVENT BLOCK       HD JUN86\n         SPACE 1\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)                        HD JUN86\n         SPACE 1\n         LTR   R15,R15             CHECK RETURN CODE           HD JUN86\n         BZ    PARSEZ              OK RETURN TO CALLER         HD JUN86\n         C     R15,PARSERC         PROMPT NOT ALLOWED?         HD JUN86\n         BE    PARSEB              YES, JUST SEND MESSAGE      HD JUN86\n         SPACE 1\n         ST    R15,GFRCODE         SAVE RETURN CODE            HD JUN86\n         MVI   GFCALLID+1,GFPARSE  INDICATE PARSE IS CALLER    HD JUN86\n         LA    R0,CPPL             LOAD CPPL ADDRESS           HD JUN86\n         ST    R0,GFCPPLP          SAVE POINTER TO CPPL        HD JUN86\n         LA    R0,TSOECB           LOAD ECB POINTER            HD JUN86\n         ST    R0,GFECBP           SAVE IN PARM LIST           HD JUN86\n         LA    R0,L'PGMNAME        LOAD LENGTH OF PGM NAME     HD JUN86\n         STH   R0,GFPGMNL          SAVE LENGTH OF PROGRAM NAME HD JUN86\n         LA    R0,PGMNAME          LOAD PROGRAM NAME           HD JUN86\n         ST    R0,GFPGMNP          SAVE POINTER TO NAME        HD JUN86\n         LA    R0,GFPARMS          LOAD PARM ADDRESS           HD JUN86\n         ST    R0,GFPTR            SAVE IN PARM POINTER        HD JUN86\n         SPACE 1\n         LA    R1,GFPTR                                        HD JUN86\n         SPACE 1                                               HD JUN86\n         XC    TSOECB,TSOECB       CLEAR THE EVENT BLOCK       HD JUN86\n         LINK  EP=IKJEFF19         LINK TO MESSAGE ROUTINE     HD JUN86\n         SPACE 1\nPARSEB   OI    PARSFLAG,PARSFAIL   INDICATE PARSE FAILURE      HD JUN86\n         SPACE 1\nPARSEZ   L     RLINK,SAVRLINK      LOAD RETURN REGISTER        HD JUN86\n         BR    RLINK               RETURN TO CALLER            HD JUN86\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  ALLODDN  -  DEALLOCATE THE PROFILE DDNAME               *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n*   BUILD SVC99 REQUEST BLOCKS IN GOTTEN AREA TO DEALLOCATE *HMD 04/86*\n*   THE PROFILE DDNAME                                      *HMD 04/86*\n*************************************************************HMD 04/86*\nALLODDN  DS    0H                                           *HMD 04/86*\n         ST    RLINK,STAKLINK   SAVE LINKAGE REG IN STACK   *HMD 04/86*\n         TM    PARSFLAG,PNOISPF WAS 'NOISPF' SPECIFIED?        HD JUN86\n         BO    ALLOCDNE         ALL DONE, GO HOME              HD JUN86\n         LA    R5,RB1           BUILD S99 RB PTR\n         ST    R5,APRB1\n         OI    APRB1,S99RBPND\n         SPACE 2\n         LUSE  S99RB,R5\n         MVI   S99RBLN,20       BUILD S99 RB\n         MVI   S99VERB,S99VRBUN UNALLOCATE THE DDNAME       *HMD 04/86*\n         LA    R6,RB1P1\n         ST    R6,S99TXTPP\n         LDROP R5\n         SPACE 2\n         LA    R5,RB1TU1\n         ST    R5,RB1P1\n         LUSE  S99TUNIT,R5      BUILD RB1TU1 - DDNAME\n         MVI   S99TUKEY+1,DALDDNAM\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,L'DDNAME\n         MVC   S99TUPAR(8),DDNAME\n         OI    RB1P1,S99RBPND               FLAG END OF CHAIN\n         SPACE 2\n         LDROP R5\n         SPACE 1\n         MVI   DYNFLAG,DYNOK ASSUME ALLOCATION WAS FINE     *HMD 04/86*\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         SPACE 1\n         DYNALLOC            ISSUE SVC99\n         SPACE 1\n         LTR   RRC,RRC       CHECK RETURN CODE\n         BZ    ALLOCDNE      RETURN TO CALLER               *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,RB1        POINTER TO REQUEST BLOCK       *HMD 04/86*\n         LUSE  S99RB,R1      ADDRESS THE BLOCK              *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         CLC   S99ERROR,=X'0438'  SEE IF DDNAME NOT FOUND   *HMD 04/86*\n         BE    ALLOCDNE           ...NO ERROR AFTER ALL     *HMD 04/86*\n         LDROP R1\n         MVI   DYNFLAG,DYNFAIL    INDICATE ERROR            *HMD 04/86*\n         ST    R15,SVC99RC        SAVE RETURN CODE          *HMD 04/86*\n         LA    R15,SVC99RC        LOAD CODE ADDRESS         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLOCDNE L     RLINK,STAKLINK     LOAD FROM THE STACK       *HMD 04/86*\n         BR    RLINK              RETURN TO CALLER          *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  ALLODSN  -  ALLOC THE XXXX.ISPF.PROFILE DSNAME          *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n*   BUILD SVC99 REQUEST BLOCKS IN GOTTEN AREA TO ALLOCATE   *HMD 04/86*\n*   THE PROFILE DATASET OLD                                 *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLODSN  DS    0H                 ALLOCATE THE PROFILE DSN  *HMD 04/86*\n         ST    RLINK,STAKLINK     PUSH LINKAGE ON THE STACK *HMD 04/86*\n         TM    PARSFLAG,PNOISPF   WAS 'NOISPF' SPECIFIED?      HD JUN86\n         BO    ALLODSNE           ALL DONE, RETURN             HD JUN86\n         LA    R5,RB1             BUILD S99 RB PTR          *HMD 04/86*\n         ST    R5,APRB1\n         OI    APRB1,S99RBPND\n         SPACE 1\n         LUSE  S99RB,R5           ESTABLISH BASE REGISTER\n         MVI   S99RBLN,X'14'      BUILD S99 RB\n         MVI   S99VERB,S99VRBAL   INDICATE 'ALLOCATE'\n         MVI   S99FLG11,S99NOCNV  NON-CONVERTABLE BONDS\n         LA    R6,RB1P1\n         ST    R6,S99TXTPP\n         LDROP R5\n         SPACE 2\n         LA    R5,RB1TU1\n         ST    R5,RB1P1\n         LUSE  S99TUNIT,R5        BUILD RB1TU1 - DDNAME\n         MVI   S99TUKEY+1,DALDDNAM\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,L'DDNAME\n         MVC   S99TUPAR(8),DDNAME\n         SPACE 1\n         LA    R5,RB1TU2          BUILD RB1TU2 - DSNAME\n         ST    R5,RB1P2\n         MVI   S99TUKEY+1,DALDSNAM\n         MVI   S99TUNUM+1,X'01'\n         SPACE 1\n         LA    R5,RB1TU4          BUILD RB1TU4 - STATUS\n         ST    R5,RB1P4\n         MVI   S99TUKEY+1,DALSTATS\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'01'\n         MVI   S99TUPAR,DA08OLD             SET FOR OLD\n         SPACE 1\n         LA    R5,RB1TU5          BUILD RB1TU5 - DISPOSITION\n         ST    R5,RB1P5\n         MVI   S99TUKEY+1,DALNDISP\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'01'\n         MVI   S99TUPAR,DA08KEEP  SET FOR KEEP\n         OI    RB1P5,S99RBPND     FLAG END OF CHAIN\n         LDROP R5\n         SPACE 2\n         MVI   DYNFLAG,DYNOK      ASSUME ALLOCATION OK      *HMD 04/86*\n         LA    R1,APRB1           LOAD PARAMETER POINTER    *HMD 04/86*\n         SPACE 1\n         DYNALLOC                 ISSUE SVC99\n         SPACE 1\n         LTR   RRC,RRC            CHECK SVC99 RETURN CODE\n         BZ    ALLODSNE           ALL OK, END THIS ROUTINE  *HMD 04/86*\n         SPACE 2\n         LA    R1,RB1\n         LUSE  S99RB,R1\n         SPACE 1\n         CLC   S99ERROR,=X'1708'  SEE IF DSNAME NOT FOUND\n         BE    ALLODSN2           ... OK NO ERROR AFTER ALL\n         LDROP R1\n         MVI   DYNFLAG,DYNFAIL    INDICATE FAILURE          *HMD 04/86*\n         ST    RRC,SVC99RC        SAVE RETURN CODE FOR FF18 *HMD 04/86*\n         LA    RRC,SVC99RC        POINT TO RETURN CODE      *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLODSNE DS    0H                                           *HMD 04/86*\n         L     RLINK,STAKLINK     LOAD FROM STACK           *HMD 04/86*\n         BR    RLINK              RETURN TO CALLER          *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n** OK - MUST NOT HAVE ONE SO LETS BUILD A NEW               *HMD 04/86*\n** PROFILE DATASET BUILD MORE SVC99 REQUEST BLOCKS          *HMD 04/86*\n** IN GOTTEN AREA TO ALLOCATE THE PROFILE DATASET AS        *HMD 04/86*\n** NEW, CATLG                                               *HMD 04/86*\n*************************************************************HMD 04/86*\nALLODSN2 DS    0H            ALLOCATE DSNAME AS NEW         *HMD 04/86*\n         LUSE  S99TUNIT,R5\n         LA    R5,RB1TU4     BUILD RB1TU4 - STATUS\n         MVI   S99TUPAR,DA08NEW             SET FOR NEW\n         SPACE 1\n         LA    R5,RB1TU5     BUILD RB1TU5 - DISPOSITION\n         ST    R5,RB1P5      RESET END OF CHAIN FLAG\n         MVI   S99TUPAR,DA08CAT             SET FOR CATLG\n         SPACE 1\n         LA    R5,RB1TU7     BUILD RB1TU7 - BLOCKLEN SPECS  *HMD 04/86*\n         ST    R5,RB1P7\n         MVI   S99TUKEY+1,DALBLKLN          AVG BLOCK LEN   *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'03'             MOVE IN LENGTH  *HMD 04/86*\n         MVC   S99TUPAR+1(2),BLKSIZE        MOVE IN BLKSIZE *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TUA     BUILD RB1TUA - PRIMARY SPACE\n         ST    R5,RB1PA\n         MVI   S99TUKEY+1,DALPRIME\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'03'\n         MVC   S99TUPAR+1(2),PRIM           SET FOR # BLKS  *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TUC     BUILD RB1TUC - DIRECTORY BLKS\n         ST    R5,RB1PC\n         MVI   S99TUKEY+1,DALDIR\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'03'\n         MVC   S99TUPAR+1(2),DIRBLKS        SET FOR # DIR BLK\n         SPACE 1\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       MOVE IN THE UNIT NAME IN THE PSCB (IF ANY)         *HMD 04/86*\n**       IF USER IS NOT PRIVILEGED, THEN NULLIFY VOLUME;    *HMD 04/86*\n**       OTHERWISE SELECT VOLUME IN PROGRAM CONSTANT.       *HMD 04/86*\n**                                                          *HMD 04/86*\n**       THIS WILL ALLOW IEFDB401 TO SELECT PROPER VOLUME   *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nCHKPSCB  DS    0H            CHECK FOR PRIVILEDGED USER     *HMD 04/86*\n         L     R1,CPPLPSCB   LOAD PSCB ADDRESS              *HMD 04/86*\n         LUSE  PSCB,R1       ADDRESS THE BLOCK              *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R3,PSCBGPNM   LOAD UNIT NAME MINUS ONE       *HMD 04/86*\n         LA    R4,1          INCREMENT REGISTER             *HMD 04/86*\n         LA    R5,PSCBGPNM+7 END OF FIELD                   *HMD 04/86*\nCHK@001  CLI   0(R3),C' '    END OF NAME?                   *HMD 04/86*\n         BE    CHK@002       YES - GET OUT OF LOOP          *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BXLE  R3,R4,CHK@001 KEEP CHECKING                  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nCHK@002  LA    R5,PSCBGPNM   LOAD UNIT NAME                 *HMD 04/86*\n         SR    R3,R5         GET LENGTH                     *HMD 04/86*\n         BNP   CHK@003       NO UNIT NAME - MOVE IN OURS    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU15    LOAD TEXT UNIT 15              *HMD 04/86*\n         STC   R3,S99TULNG+1 SAVE THE LENGTH                *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nMOVEUNIT MVC   S99TUPAR(0),PSCBGPNM                         *HMD 04/86*\n         BCTR  R3,0          DECREMENT FOR 'EX'             *HMD 04/86*\n         EX    R3,MOVEUNIT   MOVE IN THE UNIT               *HMD 04/86*\n         B     CHK@004       CONTINUE WITH CHECKING         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nCHK@003  LA    R5,RB1TU15    LOAD 'UNIT' TEXT UNIT          *HMD 04/86*\n         MVC   S99TUPAR(L'UNIT),UNIT                        *HMD 04/86*\n         MVI   S99TULNG+1,L'UNIT                            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nCHK@004  CLI   PSCBATR2+1,0  IS THE VOLUME FLAG ZERO?       *HMD 04/86*\n         BE    PRIVUSER      YES, WE MUST DIRECT VOLUME     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU10    CLEAR TEXT UNIT 10             *HMD 04/86*\n         MVI   S99TUKEY+1,0  MAKE INTO A DUMMY              *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         B     NONPRIV       CONTINUE BUILDING TEXT UNITS   *HMD 04/86*\n         LDROP R1                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nPRIVUSER LA    R5,RB1TU10    BUILD RB1TU10- VOL SER\n         ST    R5,RB1P10\n         MVI   S99TUKEY+1,DALVLSER\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'06'\n         MVC   S99TUPAR(6),VOLSER  MOVE IN VOLSER\n         SPACE 2\nNONPRIV  LA    R5,RB1TU15    BUILD RB1TU15- UNIT\n         ST    R5,RB1P15\n         MVI   S99TUKEY+1,DALUNIT\n         MVI   S99TUNUM+1,X'01'\n*  TEXT HAS BEEN PREVIOUSLY MOVE INTO PLACE                 *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TU30    BUILD RB1TU30- BLKSIZE\n         ST    R5,RB1P30\n         MVI   S99TUKEY+1,DALBLKSZ\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'2'\n         MVC   S99TUPAR(2),BLKSIZE          MOVE IN BLKSIZE\n         SPACE 1\n         LA    R5,RB1TU3C    BUILD RB1TU3C- DSORG\n         ST    R5,RB1P3C\n         MVI   S99TUKEY+1,DALDSORG\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'2'\n         MVI   S99TUPAR,X'02'               MOVE IN DSORG=PO\n         SPACE 1\n         LA    R5,RB1TU42    BUILD RB1TU42- LRECL\n         ST    R5,RB1P42\n         MVI   S99TUKEY+1,DALLRECL\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'02'\n         MVC   S99TUPAR(2),LRECL            MOVE IN LRECL\n         SPACE 1\n         LA    R5,RB1TU49    BUILD RB1TU49- RECFM\n         ST    R5,RB1P49\n         MVI   S99TUKEY+1,DALRECFM\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'1'\n         MVI   S99TUPAR,X'90'        MOVE IN RECFM=FB\n         SPACE 1\n         OI    RB1P49,S99RBPND       FLAG END OF CHAIN\n         LDROP R5\n         SPACE 2\n         MVI   DYNFLAG,DYNOK ASSUME ALLOCATION WAS OK       *HMD 04/86*\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n         SPACE 1\n         LTR   RRC,RRC           CHECK SVC99 RETURN CODE\n         BNZ   ALLOFAIL          NON-ZERO, SOME FAILURE     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,1              NUMBER OF SEGMENTS         *HMD 04/86*\n         ST    R1,OLD            SAVE IN OLD                *HMD 04/86*\n         LA    R1,MESS03         GET MESSAGE NUMBER 3       *HMD 04/86*\n         ST    R1,OLD+4          SAVE IN OLD                *HMD 04/86*\n         XC    TSOECB,TSOECB     CLEAR EVENT CNTL BLOCK     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 04/86*X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         B     ALLODSXE          RETURN TO CALLER           *HMD 04/86*\nALLOFAIL DS    0H                                           *HMD 04/86*\n         MVI   DYNFLAG,DYNFAIL   INDICATE FAILURE           *HMD 04/86*\n         ST    RRC,SVC99RC       SAVE RETURN CODE           *HMD 04/86*\n         LA    RRC,SVC99RC       LOAD ADDRESS               *HMD 04/86*\n         LA    R1,RB1            GET PARM BLOCK POINTER     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,DERROR      PRINT ERROR MESSAGE        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLODSXE DS    0H                END OF THE LINE\n         L     RLINK,STAKLINK    RELOAD FROM STACK          *HMD 04/86*\n         BR    RLINK             RETURN TO CALLER           *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  ALLOCLI  -  CHECK FOR EXISTANCE OF:                     *HMD 04/86*\n**              '&PREFIX..PROFILE.CLIST'                    *HMD 04/86*\n**  IF SO, THEN PUT IT ON THE EXECUTION STACK               *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nALLOCLI  DS    0H                                           *HMD 04/86*\n         ST    RLINK,STAKLINK   SAVE LINKAGE REG IN STACK   *HMD 04/86*\n         LA    R5,RB1           BUILD S99 RB PTR            *HMD 04/86*\n         ST    R5,APRB1                                     *HMD 04/86*\n         OI    APRB1,S99RBPND                               *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LUSE  S99RB,R5                                     *HMD 04/86*\n         MVI   S99RBLN,20       BUILD S99 RB                *HMD 04/86*\n         MVI   S99VERB,S99VRBAL ALLOCATE THE DSNAME         *HMD 04/86*\n         LA    R6,RB1P1                                     *HMD 04/86*\n         ST    R6,S99TXTPP                                  *HMD 04/86*\n         LDROP R5                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU1                                    *HMD 04/86*\n         ST    R5,RB1P1                                     *HMD 04/86*\n         LUSE  S99TUNIT,R5      BUILD RB1TU1 - RETURN DDN   *HMD 04/86*\n         MVI   S99TUKEY+1,DALRTDDN    RETURN DDNAME         *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'                             *HMD 04/86*\n         MVI   S99TULNG+1,8           DDNAME IS EIGHT BYTES *HMD 04/86*\n         MVI   S99TUPAR,C' '          CLEAR DDNAME          *HMD 04/86*\n         MVC   S99TUPAR+1(7),S99TUPAR CLEAR IT ALL THE WAY  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         XC    RB1P2,RB1P2      CLEAR SECOND TU POINTER     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU3        GET DSNAME TEXT UNIT        *HMD 04/86*\n         ST    R5,RB1P3         SAVE POINTER IN LIST        *HMD 04/86*\n         MVI   S99TUKEY+1,DALDSNAM                          *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'                             *HMD 04/86*\n* DSNAME HAS ALREADY BEEN BUILT                             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU4          BUILD RB1TU4 - STATUS     *HMD 04/86*\n         ST    R5,RB1P4                                     *HMD 04/86*\n         MVI   S99TUKEY+1,DALSTATS                          *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'                             *HMD 04/86*\n         MVI   S99TULNG+1,X'01'                             *HMD 04/86*\n         MVI   S99TUPAR,DA08SHR   SET STATUS FOR SHR        *HMD 04/86*\n         SPACE 1\n         XC    RB1P5,RB1P5        CLEAR TU POINTER          *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TU7          SET RETURN DSORG          *HMD 04/86*\n         ST    R5,RB1P7           STORE POINTER IN LIST     *HMD 04/86*\n         MVI   S99TUKEY+1,DALRTORG    RETURN DSORG          *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'   ONE PARAMETER             *HMD 04/86*\n         MVI   S99TULNG+1,2       LENGTH OF TWO             *HMD 04/86*\n         XC    S99TUPAR(2),S99TUPAR                         *HMD 04/86*\n*                                 CLEAR RETURN FIELD        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         OI    RB1P7,S99RBPND     FLAG END OF CHAIN\n         LDROP R5                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   DYNFLAG,DYNOK ASSUME ALLOCATION WAS FINE     *HMD 04/86*\n         LA    R1,APRB1\n         SPACE 1                                            *HMD 04/86*\n         DYNALLOC            ISSUE SVC99                    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LTR   RRC,RRC       CHECK RETURN CODE              *HMD 04/86*\n         BZ    ALLOCLFE      NOW FREE THE DDNAME            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         ST    RRC,SVC99RC        SAVE RETURN CODE          *HMD 04/86*\n         LA    R1,RB1                                       *HMD 04/86*\n         LUSE  S99RB,R1                                     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         CLC   S99ERROR,=X'1708'  SEE IF DSNAME NOT FOUND   *HMD 04/86*\n         BNE   ALLOCLID           .. OK, JUST RETURN        *HMD 04/86*\n         MVI   DYNFLAG,DYNCNF     INDICATE DSN NOT FOUND    *HMD 04/86*\n         B     ALLOCLIE           RETURN TO CALLER          *HMD 04/86*\n         LDROP R1                                           *HMD 04/86*\nALLOCLID MVI   DYNFLAG,DYNFAIL    INDICATE ERROR            *HMD 04/86*\n         LA    R15,SVC99RC        LOAD CODE ADDRESS         *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLOCLIE L     RLINK,STAKLINK     LOAD FROM THE STACK       *HMD 04/86*\n         BR    RLINK              RETURN TO CALLER          *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n***********************************************************************\n**                                                                   **\n**  ALLOCLFE -  FREE THE DDNAME OF THE DATASET WE JUST               **\n**              ALLOCATED.                                           **\n**                                                                   **\n***********************************************************************\n         SPACE 2                                            *HMD 04/86*\nALLOCLFE DS    0H                 FREE THE ALLOCATED DDN    *HMD 04/86*\n         LA    R5,RB1TU7          GET DSORG RETURN          *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LUSE  S99TUNIT,R5        ADDRESS THE TEXT UNIT     *HMD 04/86*\n         CLI   S99TUPAR,X'40'     SEQUENTIAL - NORMAL?      *HMD 04/86*\n         BE    ALLOCLFF           YES, THIS IS FINE         *HMD 04/86*\n         CLI   S99TUPAR,X'41'     SEQUENTIAL - UNMOVABLE?   *HMD 04/86*\n         BE    ALLOCLFF           YES, THIS IS FINE         *HMD 04/86*\n         MVI   DYNFLAG,DYNFAIL    INDICATE FAILURE          *HMD 04/86*\n         LDROP R5                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,1               ONE MESSAGE SEGMENT       *HMD 04/86*\n         ST    R1,OLD             SAVE IN OLD               *HMD 04/86*\n         LA    R1,MESS04          GET MESSAGE               *HMD 04/86*\n         ST    R1,OLD+4           SAVE IN OLD               *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         XC    TSOECB,TSOECB      CLEAR ECB                 *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 04/86*X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLOCLFF DS    0H                                           *HMD 04/86*\n         LA    R5,RB1           BUILD S99 RB PTR\n         ST    R5,APRB1\n         OI    APRB1,S99RBPND\n         SPACE 2\n         LUSE  S99RB,R5\n         MVI   S99RBLN,20       BUILD S99 RB\n         MVI   S99VERB,S99VRBUN UNALLOCATE THE DDNAME       *HMD 04/86*\n         LA    R6,RB1P1\n         ST    R6,S99TXTPP\n         LDROP R5\n         SPACE 2\n         LA    R5,RB1TU1\n         ST    R5,RB1P1\n         LUSE  S99TUNIT,R5      GET RETURNED DDNAME\n         MVI   S99TUKEY+1,DALDDNAM\n         MVI   S99TUNUM+1,X'01'\n* DDNAME IS ALREADY SETUP FROM PREVIOUS ALLOCATION          *HMD 04/86*\n         OI    RB1P1,S99RBPND               FLAG END OF CHAIN\n         LDROP R5\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         SPACE 1\n         DYNALLOC            ISSUE SVC99\n         SPACE 1                                            *HMD 04/86*\n* IF DEALLOCATION FAILS, FLAG FAILURE AND RETURN            *HMD 04/86*\n         LTR   RRC,RRC                                      *HMD 04/86*\n         BZ    ALLOCLIE                                     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,RB1                                       *HMD 04/86*\n         LUSE  S99RB,R1                                     *HMD 04/86*\n         CLC   S99ERROR,=X'0438'  SEE IF DDNAME NOT FOUND   *HMD 04/86*\n         BE    ALLOCLIE           ..THIS IS NOT AN ERROR    *HMD 04/86*\n         LDROP R1                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   DYNFLAG,DYNFAIL    FLAG FAILURE              *HMD 04/86*\n         ST    RRC,SVC99RC        SAVE RETURN CODE          *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R15,SVC99RC        ADDRESS THE RETURN CODE   *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18 FOR MSG     *HMD 04/86*\n         B     ALLOCLIE           RETURN TO CALLER          *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**   DOCMD   - STACK OUR COMMAND AND GET OUT FAST!!         *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                               HD JUN86\nDOCMD    DS    0H                                              HD JUN86\n         LUSE  LSD,R5                                          HD JUN86\n         LUSE  IKJPARMD,R9                                     HD JUN86\n         SPACE 1                                               HD JUN86\n         ST    RLINK,STAKLINK                                  HD JUN86\n         SPACE 2                                               HD JUN86\n         LH    R7,CMD+4      LOAD LENGTH OF COMMAND            HD JUN86\n         CH    R7,MAXLEN     CHECK COMMAND LENGTH              HD JUN86\n         SPACE 1                                               HD JUN86\n         LA    R2,MESS11              MESSAGE TO DISPLAY\n         LA    R3,MESS06                \"     \"    \"\n         BH    ERRORMSG      OK, LET'S DO IT                   HD JUN86\n         SPACE 2                                               HD JUN86\n         GETMAIN LU,LA=CMDREQ,A=ANSWER,SP=78,LOC=BELOW,        HD JUN86X\n               MF=(E,LGM)              GET STORAGE FOR LIST    HD JUN86\n         SPACE 2                                               HD JUN86\n         L     R9,PPLRANS    LOAD ANSWER PLACE                 HD JUN86\n         SPACE 1                                               HD JUN86\n         L     R5,ANSWER     LOAD LSD ADDRESS                  HD JUN86\n         L     R6,ANSWER+4   LOAD INSTORAGE LIST ADDRESS       HD JUN86\n         SPACE 1                                               HD JUN86\n         ST    R6,LSDADATA   SAVE DATA ADDRESS                 HD JUN86\n         ST    R6,LSDANEXT   SAVE NEXT LINE ADDRESS            HD JUN86\n         SPACE 1                                               HD JUN86\n         L     R4,CMDREQ+4   LOAD LENGTH OF RECORD             HD JUN86\n         STH   R4,LSDRCLEN            LENGTH OF RECORD         HD JUN86\n         STH   R4,LSDTOTLN            SAVE TOTAL LENGTH        HD JUN86\n         XC    12(4,R5),12(R5)        CLEAR LAST ELEMENT       HD JUN86\n         LDROP R5                                              HD JUN86\n         SPACE 1                                               HD JUN86\n         L     R1,CMD                                          HD JUN86\n         MVI   0(R6),C' '    CLEAR AREA                        HD JUN86\n         MVC   1(255,R6),0(R6)     TO BLANKS                   HD JUN86\n         BCTR  R7,0          DECREMENT FOR 'EX'                HD JUN86\n         MVC   0(0,R6),0(R1) MOVE COMMAND                      HD JUN86\n         EX    R7,*-6              TO AREA                     HD JUN86\n         SPACE 1                                               HD JUN86\n         B     DOSTACK       GO PLACE COMMAND ON STACK         HD JUN86\n         EJECT                                                 HD JUN86\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**   GOSTACK - STACK AN 'EXECUTE' COMMAND IN STORAGE TO     *HMD 04/86*\n**             BE EXECUTED UPON EXIT FROM THIS COMMAND      *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nGOSTACK  DS    0H           STACK AN EXECUTE COMMAND        *HMD 04/86*\n         ST    RLINK,STAKLINK     SAVE LINK REGISTER        *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         GETMAIN LU,LA=REQUEST,A=ANSWER,SP=78,LOC=BELOW,    *HMD 04/86*X\n               MF=(E,LGM)   GET STORAGE FOR LIST            *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         L     R5,ANSWER    GET LSD ADDRESS                 *HMD 04/86*\n         L     R6,ANSWER+4  GET INSTORAGE LIST ADDRESS      *HMD 04/86*\n         LUSE  LSD,R5       ADDRESS THE LSD                 *HMD 04/86*\n         ST    R6,LSDADATA  SAVE DATA ADDRESS               *HMD 04/86*\n         ST    R6,LSDANEXT  SAVE NEXT LINE ADDRESS          *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         L     R4,REQUEST+4           LOAD RECORD LENGTH    *HMD 04/86*\n         STH   R4,LSDRCLEN            LENGTH OF RECORD      *HMD 04/86*\n         STH   R4,LSDTOTLN            SAVE TOTAL LENGTH     *HMD 04/86*\n         XC    12(4,R5),12(R5)        CLEAR LAST ELEMENT    *HMD 04/86*\n         LDROP R5                     DROP LSD BASE         *HMD 04/86*\n         MVI   0(R6),C' '             CLEAR LIST            *HMD 04/86*\n         MVC   1(55,R6),0(R6)            TO BLANKS          *HMD 04/86*\n         MVC   0(L'STAKEXEC,R6),STAKEXEC                    *HMD 04/86*\n         LA    R6,L'STAKEXEC(R6)      MOVE IN 'EXEC' CMD    *HMD 04/86*\n         LH    R4,CDSNLEN             GET DATASET LENGTH    *HMD 04/86*\nMOVEDSNC MVC   0(0,R6),CDSNAME        MOVE IN THE NAME      *HMD 04/86*\n         BCTR  R4,0                   DECREMENT FOR 'EX'    *HMD 04/86*\n         EX    R4,MOVEDSNC            MOVE IN THE NAME      *HMD 04/86*\n         LA    R6,1(R4,R6)            POINT TO END OF NAME  *HMD 04/86*\n         MVI   0(R6),C''''            MOVE IN END QUOTE     *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nDOSTACK  STACK PARM=STKPB,STORAGE=((5),SOURCE),MF=(E,IOPL)  *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LTR   RRC,RRC                CHECK RETURN CODE     *HMD 04/86*\n         BZ    STACKRTE               RETURN TO CALLER      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,1                   ONE SEGMENT           *HMD 04/86*\n         ST    R1,OLD                 SAVE IN O.L.D         *HMD 04/86*\n         LA    R1,MESS07              PRINT MESSAGE         *HMD 04/86*\n         ST    R1,OLD+4               SAVE IN O.L.D         *HMD 04/86*\n         XC    TSOECB,TSOECB          CLEAR ECB             *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 04/86*X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LA    R2,MESS05              MESSAGE TO DISPLAY    *HMD 04/86*\n         LA    R3,MESS06                \"     \"    \"        *HMD 04/86*\n         B     ERRORMSG               PRINT MSG AND RETURN  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nSTACKRTE L     RLINK,STAKLINK         RESTORE RETURN REG    *HMD 04/86*\n         XC    ANSWER(8),ANSWER       CLEAR STORAGE POINTER    HD JUN86\n         BR    RLINK                  RETURN TO CALLER      *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       DYNAMIC ALLOCATION FAILURE - PRINT MESSAGE         *HMD 04/86*\n**                                                          *HMD 04/86*\n**                                                          *HMD 04/86*\n** INPUT: THIS ROUTINE PRINTS A MULTILEVEL MESSAGE          *HMD 04/86*\n**                                                          *HMD 04/86*\n**        R2 --> POINTER TO FIRST LEVEL MESSAGE             *HMD 04/86*\n**        R3 --> POINTER TO SECOND LEVEL MESSAGE            *HMD 04/86*\n*************************************************************HMD 04/86*\nERRORMSG DS    0H                                           *HMD 04/86*\n         LA    R1,OLD2          SECOND LEVEL MESSAGE        *HMD 04/86*\n         ST    R1,OLD1          SAVE IN FIRST OLD           *HMD 04/86*\n         LA    R1,1             NUMBER OF SEGMENTS          *HMD 04/86*\n         ST    R1,OLD1+4                                    *HMD 04/86*\n         ST    R1,OLD2+4        SAVE IN LINE DESCRIPTORS    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LR    R1,R2            GET MESSAGE POINTER         *HMD 04/86*\n         ST    R1,OLD1+8        SAVE IN OLD                 *HMD 04/86*\n         LR    R1,R3            GET MESSAGE POINTER         *HMD 04/86*\n         ST    R1,OLD2+8        SAVE IN OLD                 *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         XC    TSOECB,TSOECB    CLEAR EVENT CNTL BLOCK      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD1,TERM,MULTLVL,INFOR),           X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,12            RETURN CODE 12              *HMD 04/86*\n         B     RETURN                                       *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  CMDPROC - CHECK TO SEE IF USER IS INVOKING THIS COMMAND *HMD 04/86*\n**            FROM A CLIST. IF SO, TERMINATE TO AVOID       *HMD 04/86*\n**            A RECURSIVE INVOCATION.                       *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nCMDPROC  DS    0H\n         ST    RLINK,SAVRLINK        SAVE THE LINKAGE REG   *HMD 04/86*\n         L     R15,CVTPTR            GET CVT POINTER        *HMD 04/86*\n         L     R15,CVTTVT-CVT(R15)   GET TSO VECTOR TABLE   *HMD 04/86*\n         L     R15,TSVTVACC-TSVT(R15)                       *HMD 04/86*\n*                                    GET IKJCT441 ADDRESS   *HMD 04/86*\n         LA    R1,TSVELOC            SELECT LOCATE SERVICE  *HMD 04/86*\n         ST    R1,ECODE              SAVE IN PARM LIST      *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         CALL  (15),                  CALL IKJCT441         *HMD 04/86*X\n               (ECODE,                ENTRY CODE            *HMD 04/86*X\n               NAMEPTR,               NAME POINTER          *HMD 04/86*X\n               NAMELEN,               NAME LENGTH           *HMD 04/86*X\n               VALUEPTR,              VALUE POINTER         *HMD 04/86*X\n               VALUELEN,              VALUE LENGTH          *HMD 04/86*X\n               TOKEN),                TOKEN (UNUSED HERE)   *HMD 04/86*X\n               VL,MF=(E,CCT441L)      CALL THE SUCKER       *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         CH     R15,=H'40'            CALL FROM READY MODE  *HMD 04/86*\n         BE    CMDPROCE                                     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA     R2,MESS08                                   *HMD 04/86*\n         LA     R3,MESS09                                   *HMD 04/86*\n         B      ERRORMSG              INDICATE ERROR        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nCMDPROCE DS     0H                                          *HMD 04/86*\n         L      RLINK,SAVRLINK        RETURN TO CALLER      *HMD 04/86*\n         BR     RLINK                                       *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 05/86*\n**                                                          *HMD 05/86*\n**  NAMES - SUBROUTINE TO BUILD DATASET NAMES. THE ISPF     *HMD 05/86*\n**          PROFILE DATASET IS BUILT FROM THE USERID, BUT   *HMD 05/86*\n**          THE TSO PREFIX IS USED TO BUILD THE PROFILE     *HMD 05/86*\n**          COMMAND PROCEDURE DATASET.                      *HMD 05/86*\n**                                                          *HMD 05/86*\n*************************************************************HMD 05/86*\nNAMES    DS    0H                                           *HMD 05/86*\n         ST    RLINK,SAVRLINK      SAVE THE LINKAGE REG     *HMD 04/86*\n         LUSE  UPT,R1                                       *HMD 04/86*\n         LUSE  PSCB,R2                                      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   PDSNAME,C' '        CLEAR                    *HMD 04/86*\n         MVC   PDSNAME+1(43),PDSNAME     NAME FIELD         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   CDSNAME,C' '        CLEAR                    *HMD 04/86*\n         MVC   CDSNAME+1(43),CDSNAME     NAME FIELD         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         L     R1,CPPLUPT    GET USER PROFILE TABLE         *HMD 04/86*\n         L     R2,CPPLPSCB   GET PROTECTED STEP CNTL BLOCK  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         INUSE ,             SEE WHOS ON FIRST              *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n*                                                           *HMD 05/86*\n* BUILD THE ISPF PROFILE DATASET NAME                       *HMD 05/86*\n*                                                           *HMD 05/86*\nPROFNAME SLR   R3,R3         CLEAR WORK REGISTER            *HMD 05/86*\n         ICM   R3,B'0001',PSCBUSRL                          *HMD 05/86*\n*                            LOAD USERID LENGTH             *HMD 05/86*\n         LA    R4,PDSNAME    POINT TO NAME BUILD FIELD      *HMD 05/86*\n         LA    R6,PSCBUSER   POINT TO USERID AREA           *HMD 05/86*\nNAMEMOV1 MVC   0(0,R4),0(R6) >>>  EXECUTED INSTRUCTION <<<  *HMD 05/86*\n         BCTR  R3,0          DECREMENT FOR EXECUTE          *HMD 05/86*\n         EX    R3,NAMEMOV1   MOVE IN THE NAME               *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LA    R4,1(R3,R4)   POINT TO END OF NAME           *HMD 05/86*\n         MVI   0(R4),C'.'    BUILD DOT                      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         MVC   1(L'DSNPART,R4),DSNPART                      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LA    R4,PDSNAME                                   *HMD 05/86*\n         SLR   R3,R3          CLEAR COUNTER                 *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nPARTLOOP DS    0H                                           *HMD 05/86*\n         CLI   0(R4),C' '     END OF NAME?                  *HMD 05/86*\n         BE    PARTEXIT       EXIT                          *HMD 05/86*\n         LA    R3,1(,R3)      COUNT CHARACTERS              *HMD 05/86*\n         LA    R4,1(,R4)      BUMP TEXT POINTER             *HMD 05/86*\n         B     PARTLOOP                                     *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nPARTEXIT DS    0H                                           *HMD 05/86*\n         STH   R3,PDSNLEN     SAVE LENGTH                   *HMD 04/86*\n         SPACE 2                                            *HMD 05/86*\n*                                                           *HMD 05/86*\n* BUILD THE PROFILE CLIST DATASET NAME                      *HMD 05/86*\n*                                                           *HMD 05/86*\nPREFIX   SLR   R3,R3         CLEAR WORK REGISTER            *HMD 05/86*\n         ICM   R3,B'0001',UPTPREFL                          *HMD 05/86*\n*                            LOAD PREFIX POINTER            *HMD 05/86*\n         BZ    USERID        NO PREFIX, USE USERID          *HMD 05/86*\n         LA    R6,UPTPREFX   POINT TO PREFIX AREA           *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nBLDNAME  LA    R5,CDSNAME    POINT TO NAME BUILD FIELD      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nNAMEMOV2 MVC   0(0,R5),0(R6)                                *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         BCTR  R3,0          DECREMENT FOR EXECUTE          *HMD 05/86*\n         EX    R3,NAMEMOV2                                  *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LA    R5,1(R3,R5)   POINT TO END OF PREFIX/USERID  *HMD 05/86*\n         MVI   0(R5),C'.'    MOVE IN 'DOT'                  *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         MVC   1(L'DSNXCTL,R5),DSNXCTL                      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         SLR   R3,R3          CLEAR COUNTERS                *HMD 05/86*\n         LA    R5,CDSNAME     COUNT CHARACTERS              *HMD 05/86*\nXCTLLOOP DS    0H                                           *HMD 05/86*\n         CLI   0(R5),C' '     END OF NAME?                  *HMD 05/86*\n         BE    XCTLEXIT                                     *HMD 05/86*\n         LA    R3,1(,R3)      COUNT CHARACTERS              *HMD 05/86*\n         LA    R5,1(,R5)      BUMP TEXT POINTER             *HMD 05/86*\n         B     XCTLLOOP       CONTINUE COUNTING             *HMD 05/86*\nXCTLEXIT STH   R3,CDSNLEN     SAVE THE LENGTH               *HMD 05/86*\n         L     RLINK,SAVRLINK RESTORE THE LINKOR            *HMD 05/86*\n         BR    RLINK          RETURN HOME                   *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nUSERID   SLR   R3,R3         CLEAR WORK REGISTER            *HMD 05/86*\n         ICM   R3,B'0001',PSCBUSRL                          *HMD 05/86*\n*                            LOAD PREFIX POINTER            *HMD 05/86*\n         LA    R6,PSCBUSER   POINT TO PREFIX AREA           *HMD 05/86*\n         B     BLDNAME       GO BUILD NAME                  *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LDROP R1,R2         DROP REGISTERS                 *HMD 05/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**   DERROR - USE IKJEFF18 (DAIRFAIL) TO REPORT DYNAMIC     *HMD 04/86*\n**            ALLOCATION ERRORS                             *HMD 04/86*\n**                                                          *HMD 04/86*\n**   INPUT  - R15 = POINTER TO DYNAMIC ALLOC RETURN CODE    *HMD 04/86*\n**            R1  = POINTER TO SVC99 REQUEST BLOCK          *HMD 04/86*\n**                                                          *HMD 04/86*\n**   OUTPUT - MESSAGE TO TSO USER, THEN CONTINUE WITH       *HMD 04/86*\n**            THE COMMAND                                   *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nDERROR   DS    0H                                           *HMD 04/86*\n         ST    RLINK,SAVRLINK     SAVE RETURN REGISTER      *HMD 04/86*\n         ST    R15,DFRCP          POINTER TO RETURN CODE    *HMD 04/86*\n         ST    R1,DFS99RBP        SAVE REQUEST BLOCK PTRAD  *HMD 04/86*\n         MVI   S99ID,0            ISSUE PUTLINE             *HMD 04/86*\n         MVI   S99ID+1,DFSVC99    INDICATE CALLER IS SVC99  *HMD 04/86*\n         XC    DFBUFP,DFBUFP      GET FULLWORD OF ZEROS     *HMD 04/86*\n         LA    R1,DFBUFP          POINT TO FULLWORD OF ZERO *HMD 04/86*\n         ST    R1,DFJEFF02        SAVE IN PARM LIST         *HMD 04/86*\n         LA    R1,S99ID           ADDRESS OF ID FIELD       *HMD 04/86*\n         ST    R1,DFIDP           DAIRFAIL ID POINTER       *HMD 04/86*\n         LA    R1,CPPL            ADDRESS OF CPPL           *HMD 04/86*\n         ST    R1,DFCPPLP         STORE IN POINTER          *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LA    R1,DFPARMS         GET PARAMETERS            *HMD 04/86*\nHOT      LINK  EP=IKJEFF18        GET YOUR HOT LINKS HERE   *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         L     RLINK,SAVRLINK     GET RETURN REGISTER       *HMD 04/86*\n         BR    RLINK              AND RETURN TO CALLER      *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**             LITERAL ORGANIZATION                         *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nIRVING   LTORG                                              *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n***********************************************************************\n* CURRENT ALLOCATION IS AS:                                           *\n*                                                                     *\n*   ALLOC F(ISPPROF) DA('&PREF..ISPF.PROFILE') BLOCK(9040) DIR(3)  -  *\n*         UNIT(SYSALLDA) VOL(TSO002) SPACE(10) BLKSIZE(9040)       -  *\n*         LRECL(80) RECFM(F B)                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTAKEXEC DC    C'EXEC '''          COMMAND TO BE EXECUTED   *HMD 04/86*\nDSNPART  DC    C'ISPF.PROFILE'     REST OF DATASET NAME\nDSNXCTL  DC    C'PROFILE.CLIST'    EXECUTE FROM WITHIN      *HMD 04/86*\nDDNAME   DC    C'ISPPROF '         DDNAME - MUST BE ISPPROF\nUNIT     DC    C'SYSALLDA'         UNIT   - UNIT TO ALLOC   *HMD 04/86*\nVOLSER   DC    C'TSO004'           VOLSER - VOLSER TO ALLOC *HMD 04/86*\nPGMNAME  DC    C'PDFINIT'          NAME OF PROGRAM             HD JUN86\n         SPACE 1                                               HD JUN86\nPARSERC  DC    F'4'                RETURN CODE OF 4 OR HIGHER  HD JUN86\nAPDFTAB  DC    V(PDFTAB)           ADDRESS OF PARSE PARM LIST  HD JUN86\nPRIM     DC    H'10'               PRIM   - # OF BLOCKS     *HMD 04/86*\nDIRBLKS  DC    H'02'               DIRBLKS- # OF DIR BLOCKS *HMD 04/86*\nLRECL    DC    H'80'               LRECL  - MUST BE 80 FOR ISPF\nBLKSIZE  DC    H'9040'             BLKSIZE- AVERAGE BLKLEN  *HMD 04/86*\nMAXLEN   DC    H'256'              MAXIMUM COMMAND LENGTH      HD JUN86\n         SPACE 1                                            *HMD 04/86*\nREQUEST  DC    F'16'               SPACE FOR LSD DATA AREA  *HMD 04/86*\n         DC    AL1(128)            END OF LIST INDICATOR    *HMD 04/86*\n         DC    AL3(56)             80 BYTE RECORDS          *HMD 04/86*\n         SPACE 1                                               HD JUN86\n*                                                              HD JUN86\n* ALLOCATE STORAGE FOR 'CMD(' PARM ON COMMAND EXECUTION        HD JUN86\n*                                                              HD JUN86\nCMDREQ   DC    F'16'               SPACE FOR LSD DATA AREA     HD JUN86\n         DC    AL1(128)            END OF LIST INDICATOR       HD JUN86\n         DC    AL3(256)            256 BYTES FOR COMMAND       HD JUN86\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**             PUTLINE MESSAGES                             *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nMESS01   TSOMSG 'PDF080I FAULT OCCURED PROCESSING ISPF PROFILE FILE+'\nMESS02   TSOMSG 'PDF081I INITIALIZTION TERMINATED DUE TO THIS ERROR'\n         SPACE 2\nMESS03   TSOMSG 'PDF082I A NEW ISPF PROFILE DATASET HAS BEEN CREATED'\n         SPACE 1                                            *HMD 04/86*\nMESS04   TSOMSG 'PDF085I DSORG OF PROFILE CLIST MUST BE PHYSICAL SEQUENX\n               TIAL'                                        *HMD 04/86*\nMESS05   TSOMSG 'PDF086I ALLOCATION ERROR OCCURED FOR PROFILE COMMAND PX\n               ROCEDURE+'                                      HD JUN86\nMESS06   TSOMSG 'PDF087I COMMAND OR COMMAND PROCEDURE NOT EXECUTED'\n         SPACE 1                                            *HMD 04/86*\nMESS07   TSOMSG 'PDF088I STACK FAILURE PROCESSING COMMAND OR PROCEDURE'\n         SPACE 2                                            *HMD 04/86*\nMESS08   TSOMSG 'PDF089I INVALID ENVIRONMENT FOR TSO INITIALIZATION+'\nMESS09   TSOMSG 'PDF090I INITIALIZATION ROUTINE MAY NOT BE EXECUTED FROX\n               M WITHIN A COMMAND PROCEDURE'                *HMD 04/86*\n         SPACE 1                                               HD JUN86\nMESS10   TSOMSG 'PDF100I FAULT OCCURED PARSING THE COMMAND OPERANDS+'\nMESS11   TSOMSG 'PDF101I SPECIFIED COMMAND IS TOO LONG TO PROCESS+'\n         SPACE 2                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**           MISCELLANEOUS EQUIVILENCES                     *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nRLINK    EQU   14                LINKAGE REGISTER           *HMD 04/86*\nRRC      EQU   15                RETURN CODE REGISTER       *HMD 04/86*\n         EJECT                                                 HD JUN86\n***************************************************************HD JUN86\n**                                                             HD JUN86\n**           PARSE CONTROL PARAMETERS                          HD JUN86\n**                                                             HD JUN86\n***************************************************************HD JUN86\nPDFTAB   IKJPARM\n         SPACE 1\nKEYISPF  IKJKEYWD DEFAULT='ISPF'\n         IKJNAME  'ISPF'\n         IKJNAME  'NOISPF'\n         SPACE 1\nKEYCMD   IKJKEYWD\n         IKJNAME  'COMMAND',SUBFLD=CMDSUBF,ALIAS='CMD'\n         SPACE 2\nCMDSUBF  IKJSUBF\nCMD      IKJPOSIT QSTRING,UPPERCASE,                                   +\n               PROMPT='A QUOTED TSO COMMAND FOR POST-PROCESSING+',     +\n               HELP=('A QUOTED STRING REPRESENTING A TSO COMMAND AND IT+\n               S POSITIONAL AND KEYWORD PARAMETERS+','A STRING OF CHARA+\n               CTERS BETWEEN TWO QUOTATION MARKS TO BE PLACED ON THE IN+\n               PUT STACK')\n         IKJENDP\n         EJECT\n***************************************************************HD JUN86\n**                                                             HD JUN86\n**           DYNAMIC STORAGE AREA                              HD JUN86\n**                                                             HD JUN86\n***************************************************************HD JUN86\nTSODSECT DSECT                   RESUME USER AREA\n         SPACE 1\nDYNFLAG  DS    X                 DYNAMIC ALLOCATION FLAG    *HMD 04/86*\nDYNOK    EQU   X'00' .... ....   DYNAMIC ALLOC WAS FINE     *HMD 04/86*\nDYNFAIL  EQU   X'FF' 1111 1111   DYNAMIC ALLOC FAILED       *HMD 04/86*\nDYNCNF   EQU   X'FE' 1111 111.   CLIST DSN NOT FOUND        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nPARSFLAG DS    X                 PARSE FLAG                    HD JUN86\nPNOISPF  EQU   X'80' 1... ....   NOISPF KEYWORD SPECIFIED      HD JUN86\nPCMD     EQU   X'40' .1.. ....   CMD STRING SPECIFIED          HD JUN86\nPARSFAIL EQU   X'01' .... ...1   ERROR OCCURED IN PARSE        HD JUN86\n         SPACE 1                                               HD JUN86\nSAVRLINK DS    F                 LINKAGE REGISTER SAVE      *HMD 04/86*\nSTAKLINK DS    F                 LINKAGE REGISTER SAVE      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nPTPB     PUTLINE MF=L            PUTLINE PARM BLOCK         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nSTKPB    STACK   MF=L            STACK PARM BLOCK           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nOLD      DS    F                 NUMBER OF SEGMENTS         *HMD 04/86*\n         DS    F                 POINTER TO MESSAGE LINE    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nOLD1     DS    A                 POINTER TO OLD2            *HMD 04/86*\n         DS    F                 NUMBER OF SEGMENTS         *HMD 04/86*\n         DS    A                 POINTER TO MESSAGE LINE    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nOLD2     DS    A                 ZERO - END OF CHAIN        *HMD 04/86*\n         DS    F                 NUMBER OF SEGMENTS         *HMD 04/86*\n         DS    A                 POINTER TO MESSAGE LINE    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nGFPTR    DS    F                 POINTER TO GNRLFAIL PARM LIST HD JUN86\nSVC99RC  DS    F                 SVC99 RETURN CODE          *HMD 04/86*\nS99ID    DS    H                 2 BYTE IKJEFF18 ID FIELD   *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         IKJEFFDF DFDSECT=NO     IKJEFF18 PARM LIST         *HMD 04/86*\n         SPACE 1                                               HD JUN86\n         IKJEFFGF GFDSECT=NO     IKJEFF19 PARM LIST            HD JUN86\n         SPACE 2                                            *HMD 04/86*\nAPRB1    DS    F                 POINTER TO SVC99 REQUEST BLOCKS\n         SPACE 1\nRB1      DS    5F                SVC 99 REQUEST BLOCK\n         SPACE 1\nRB1P1    DS    F                 POINTER TO SVC99 TEXT UNIT 01\nRB1P2    DS    F                 POINTER TO SVC99 TEXT UNIT 02\nRB1P3    DS    F                 POINTER TO SVC99 TEXT UNIT 03\nRB1P4    DS    F                 POINTER TO SVC99 TEXT UNIT 04\nRB1P5    DS    F                 POINTER TO SVC99 TEXT UNIT 05\nRB1P7    DS    F                 POINTER TO SVC99 TEXT UNIT 07\nRB1PA    DS    F                 POINTER TO SVC99 TEXT UNIT 0A\nRB1PC    DS    F                 POINTER TO SVC99 TEXT UNIT 0C\nRB1P10   DS    F                 POINTER TO SVC99 TEXT UNIT 10\nRB1P15   DS    F                 POINTER TO SVC99 TEXT UNIT 15\nRB1P30   DS    F                 POINTER TO SVC99 TEXT UNIT 30\nRB1P3C   DS    F                 POINTER TO SVC99 TEXT UNIT 3C\nRB1P42   DS    F                 POINTER TO SVC99 TEXT UNIT 42\nRB1P49   DS    F                 POINTER TO SVC99 TEXT UNIT 49\n         SPACE 1\nRB1TU1   DS    XL14              SVC99 TEXT UNIT 01 - DDNAME\n         SPACE 1\nRB1TU2   DS    F                 SVC99 TEXT UNIT 02 - DSNAME\nPDSNLEN  DS    H                 LENGTH OF DATASET NAME     *HMD 04/86*\nPDSNAME  DS    CL44              DATA SET NAME              *HMD 04/86*\n         SPACE 1\nRB1TU3   DS    F                 PROFILE.CLIST DSNAME PTR   *HMD 04/86*\nCDSNLEN  DS    H                 LENGTH OF BUILD DSNAME     *HMD 04/86*\nCDSNAME  DS    CL44              DATA SET NAME              *HMD 04/86*\n         SPACE 1\nRB1TU4   DS    XL7               SVC99 TEXT UNIT 04 - DS STATUS\nRB1TU5   DS    XL7               SVC99 TEXT UNIT 05 - DS DISPOSITION\nRB1TU7   DS    XL9 BLOCK LENGTH  SVC99 TEXT UNIT 07 - BLKLEN*HMD 04/86*\nRB1TUA   DS    XL9               SVC99 TEXT UNIT 0A - PRIMARY SPACE\nRB1TUC   DS    XL9               SVC99 TEXT UNIT 0C - DIRECTORY BLKS\nRB1TU10  DS    XL12              SVC99 TEXT UNIT 10 - VOL SER\nRB1TU15  DS    XL(6+L'UNIT)      SVC99 TEXT UNIT 15 - UNIT\nRB1TU30  DS    XL8               SVC99 TEXT UNIT 30 - BLKSIZE\nRB1TU3C  DS    XL8               SVC99 TEXT UNIT 3C - DSORG\nRB1TU42  DS    XL8               SVC99 TEXT UNIT 42 - LRECL\nRB1TU49  DS    XL7               SVC99 TEXT UNIT 49 - RECFM\n         SPACE 1                                            *HMD 04/86*\nANSWER   DS    2F                ANSWER FROM LIST GETMAIN   *HMD 04/86*\n         SPACE 1                                               HD JUN86\nLGM      GETMAIN LU,MF=L         LIST FORM GETMAIN          *HMD 04/86*\n         SPACE 1                                               HD JUN86\nCCT441L  CALL  ,(0,0,0,0,0,0),MF=L                          *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nECODE    DS    A                                            *HMD 04/86*\nNAMEPTR  DS    A                                            *HMD 04/86*\nNAMELEN  DS    F                                            *HMD 04/86*\nVALUEPTR DS    A                                            *HMD 04/86*\nVALUELEN DS    F                                            *HMD 04/86*\nTOKEN    DS    F                                            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nAREALEN  EQU   *-TSOUSER\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJDAP08                                           *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJUPT                                             *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJPSCB                                            *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJLSD                                             *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJTSVT                                            *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         CVT   LIST=YES,DSECT=YES                           *HMD 04/86*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGS": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00*\\x00*\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         REGS\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEQCK": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x9f\\x00\\x9f\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 159, "newlines": 159, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         SEQCK &TYPE\n         GBLC  &GTYPE,&GTYPEP\n&GTYPE   SETC  '&TYPE'\n         AIF   ('&GTYPE' EQ 'INIT').INIT\n         AIF   ('&GTYPE' EQ 'ENTRE').ENTRE\n         AIF   ('&GTYPE' EQ 'DO').DO\n         AIF   ('&GTYPE' EQ 'DOWHILE').DOWHILE\n         AIF   ('&GTYPE' EQ 'DOWHLOR').DOWHILE\n         AIF   ('&GTYPE' EQ 'UNTIL').UNTIL\n         AIF   ('&GTYPE' EQ 'UNTILOR').UNTILOR\n         AIF   ('&GTYPE' EQ 'WHILE').WHILE\n         AIF   ('&GTYPE' EQ 'WHILEOR').WHILEOR\n         AIF   ('&GTYPE' EQ 'ENDDO').ENDDO\n         AIF   ('&GTYPE' EQ 'DOEND').DOEND\n         AIF   ('&GTYPE' EQ 'IF').IF\n         AIF   ('&GTYPE' EQ 'IFOR').IF\n         AIF   ('&GTYPE' EQ 'ELSE').ELSE\n         AIF   ('&GTYPE' EQ 'ENDIF').ENDIF\n         AIF   ('&GTYPE' EQ 'IEXIT').IEXIT\n         AIF   ('&GTYPE' EQ 'EXIT').EXIT\n         MNOTE 8,'SEQCK FAILED'\n         MEXIT\n.INIT    ANOP\n         AIF   ('&GTYPEP' EQ '').OKXIT\n         AGO   .ER1\n.ENTRE   ANOP\n         AIF   ('&GTYPEP' EQ 'INIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'EXIT').OKXIT\n         AGO   .ER1\n.DO      ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AGO   .ER1\n.DOWHILE ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHLOR').OKXIT\n         AGO   .ER1\n.UNTIL   ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTILOR').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AGO   .ER1\n.UNTILOR ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTILOR').OKXIT\n         AGO   .ER1\n.WHILE   ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILEOR').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AGO   .ER1\n.WHILEOR ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILEOR').OKXIT\n         AGO   .ER1\n.DOEND   ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AGO   .ER1\n.ENDDO   ANOP\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n.IF      ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ  'IFOR').OKXIT\n         AGO   .ER1\n.ELSE    ANOP\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.ENDIF   ANOP\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.IEXIT   ANOP\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.EXIT    ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.ER1     MNOTE 8,'COMMAND OUT-OF-SEQUENCE'\n.OKXIT   ANOP\n&GTYPEP  SETC  '&GTYPE'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETREG": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\xdd\\x00\\xdd\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 221, "newlines": 221, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    SETREG  &R1,&R2,&R3,&R4,&R5,&R6,&R7,&R8,&R9,&R10,&R11,&R12,&COC\n               DE=NORENT,&PARM=,&EQU=YES,&ID=NO,&SD=YES,               C\n               &SP=0,&LVA=0,&CLEAR=(NO,00),&CPR=NO,&VER=YES,           C\n               &BASE=\n         GBLA  &SIDX\n         GBLB  &SREG\n         GBLB  &SDMAP             GLOBAL TO TURN OF S/A MAP\n         GBLB  &IDS(255)          GLOBAL FOR ID LOGOFF FOR EOJ\n         GBLB  &CRENT(255)        GLOBAL TO TELL EOJ CODE=RENT\n         GBLC  &IDP(255)          GLOBAL WHICH CONTAINS ID\n         GBLC  &POOL(255),&LV(255) GLOBAL FOR SUBPOOL & LENGTH\n         LCLA  &A1,&A2,&A3\n         LCLB  &REG,&MAP           EQUATE SWITCH\n         LCLC  &C(10),&SID,&CDE,&RA,&RB\n         LCLC  &SECT\n         LCLC  &CPYR,&CRX,&CBX    COPYRIGHT STATEMENT       *HMD 04/85*\n&SECT    SETC  '&SYSECT'          SET DEFAULT CSECT NAME\n         AIF   ('&CPR' EQ 'NO').NOCPR                       *HMD 04/85*\n&CPYR    SETC  '&SECT. - COPYRIGHT (C) 1986 HOWARD M. DEAN' *HMD 12/85*\n&CRX     SETC  'CR'.'&SYSNDX'                               *HMD 12/85*\n&CBX     SETC  'CB'.'&SYSNDX'                               *HMD 12/85*\n.NOCPR   ANOP\n         AIF   (T'&BASE EQ 'O').NBASE\n&SECT    SETC  '&BASE(1)'\n.NBASE   ANOP\n&REG     SETB  (&SREG)             SET WHETHER TO MAKE EQUATES\n&MAP     SETB  (&SDMAP)            SET FOR SAVE AREA MAP\n&SIDX    SETA  &SIDX+1             INCREMENT INDEX LEVEL\n&SID     SETC  '&SIDX'\n&A1      SETA  1                   SET COUNTER TO INITIAL VALUE\n&A2      SETA  2                   SET POINTER TO INITIAL VALUE\n&IDS(&SIDX) SETB  ('&ID' EQ 'YES')   SET INDICATOR FOR LOGON,OFF\n&IDP(&SIDX) SETC '&SECT'.' (VERSION '.'&SYSDATE'.' '.'&SYSTIME'.')'\n&CRENT(&SIDX) SETB ('&CODE' EQ 'RENT') SET INDICATOR FOR EOJ\n         AIF   (T'&R1 EQ 'O').DEF  SET DEFAULT AND NO ADDITIONAL REGS\n         AIF   ('&R1' GE '2' AND '&R1' LE '12').ROK1 1ST OK\n         AIF   ('&R1'(1,1) EQ 'R').ROK1\n         MNOTE 4,'&R1 INVALID FIRST OPERAND. 12 ASSUMED'\n.DEF     ANOP                      ENTRY FOR DEFAULT OF 12\n&RA      SETC  '12'               SET DEFAULT BASE REGISTER\n&A1      SETA  0                   NO ADDITIONAL BASES\n         AGO   .CONT1              GO ASSMB. MACRO\n.ROK1    ANOP\n&RA      SETC  '&R1'\n.ROK     AIF   (T'&SYSLIST(&A2) EQ 'O').CONTA  IF NO MORE CONTINUE\n         AIF   ('&SYSLIST(&A2)' GE '2' AND '&SYSLIST(&A2)' LE '12').S1\n         AIF   ('&SYSLIST(&A2)'(1,1) EQ 'R').S1\n         MNOTE 4,'OPERAND &A2 INVALID. GENERATION STOPPED HERE'\n.CONTA   ANOP\n&A1      SETA  &A1-1               ONE LESS FOR ADDITIONAL REG\n         AGO   .CONT1\n.S1      ANOP\n&C(&A1)  SETC  ','.'&SYSLIST(&A2)'   SET ONE REGISTER\n&A1      SETA  &A1+1               POINT TO NEXT POSITION\n&A2      SETA  &A2+1               POINT TO NEXT POSITION\n         AIF   (&A1 NE 11).ROK    ALLOW ONLY 10 BASE REGISTERS\n         MNOTE 4,'TOO MANY REGISTERS SPECIFIED. 10 ASSUMED'\n&A1      SETA  10                  NUMBER OF ADDITIONAL REGISTERS\n.CONT1   ANOP\n&A3      SETA  &A1                 SET POSITION OF LAST REGISTER\n         AIF   ('&CODE' EQ 'RENT' OR '&CODE' EQ 'NORENT').CODE1\n         MNOTE 0,'INVALID CODE PARAMETER. NORENT ASSUMED'\n&CDE     SETC  'NORENT'            DEFAULT\n         AGO   .CODE2\n.CODE1   ANOP\n&CDE     SETC  '&CODE'             SET CODE SPECIFICATION\n.CODE2   ANOP\n         AIF   ('&CDE' EQ 'RENT' OR '&LVA' EQ '0').CODE3    *HMD 12/85*\n         MNOTE 0,'ADDITIONAL STORAGE SPECIFIED - REENTRANCY FORCED'\n&CDE     SETC  'RENT'                                       *HMD 12/85*\n.CODE3   ANOP                                               *HMD 12/85*\n         LUSE  &SECT,15           TEMP ADDRESSING\n&NAME    SAVE  (14,12),,&IDP(&SIDX) SAVE REGS AND POST ID\n         AIF   ('&CPR' EQ 'NO').NOCPR1                      *HMD 04/85*\n         ENTRY &CRX                                         *HMD 12/85*\n         B     &CBX                                         *HMD 12/85*\n&CRX     DC    C'&CPYR'           COPYRIGHT NOTICE          *HMD 12/85*\n&CBX     DS 0H                    COPYRIGHT BRANCH POINT    *HMD 04/85*\n.NOCPR1  ANOP                                               *HMD 04/85*\n         LDROP 15 .                LDROP TEMP ADDRESSING\n         LR    &RA,15             SET FIRST BASE\n         LUSE  &SECT,&RA&C(1)&C(2)&C(3)&C(4)&C(5)&C(6)&C(7)&C(8)&C(9)&CC\n               (10)   SET UP LUSE\n         AIF   (&A3 EQ 0).CKRENT1\n         LA    &SYSLIST(&A3+1),2048 .     GET HALF THE DISPLACEMENT\n         SLL   &SYSLIST(&A3+1),1 .      DOUBLE TO GET 4096\n&A2      SETA  1                   POINT TO FIRST OPERAND\n.S3      ANOP\n         LA    &SYSLIST(&A2+1),0(&SYSLIST(&A3+1),&SYSLIST(&A2)) .     LC\n               OAD ADDITIONAL BASE REGISTER\n&A1      SETA  &A1-1               SUB FROM COUNTER\n&A2      SETA  &A2+1               ADD TO POINTER\n         AIF   (&A1 NE 0).S3       IF MORE KEEP ON TRUCKIN\n.CKRENT1 AIF   ('&CDE' EQ 'NORENT').NORENT1\n&POOL(&SIDX) SETC '&SP'           SET THE SUBPOOL NUMBER\n&LV(&SIDX) SETC '&LVA'            SET LENGTH FOR GETMAIN\n         CNOP  0,4            FOR ALIGNMENT\n         BAL   1,*+8          BRANCH AROUND SP+LV\n$SPLV&SID DS    0F             USED BY LOAD\n         DC    AL1(&POOL(&SIDX)) SUBPOOL\n         AIF   (&MAP OR '&SD' EQ 'NO').ABS\n         DC    AL3((((USERWORK-SAVEAREA)+(&LV(&SIDX))+7)/8)*8) LENGTH\n         AGO   .RND\n.ABS     ANOP\n         DC    AL3(((72+&LV(&SIDX)+7)/8)*8)                  LENGTH\n.RND     ANOP\n         L     0,$SPLV&SID    GET SP+LV\n         SVC   10             DO GETMAIN\n         AIF   (T'&CLEAR EQ 'O').LMSAVE GO IF NO CLEAR\n         AIF   ('&CLEAR(1)' EQ 'NO').LMSAVE DO NOT CLEAR\n         XC    0(72,1),0(1) .      CLEAR REGISTER SAVE AREA\n&RB      SETC  '00'                DEFAULT BINARY ZERO\n         AIF   (N'&CLEAR EQ 1).BIN0 DEFAULT TO BINARY ZERO\n&RB      SETC  '&CLEAR(2)'         SET CLEAR CHARACTER\n.BIN0    LA    2,72(1)             POINT TO 'TO' ADDRESS\n         L     3,$SPLV&SID         GET 'TO' LENGTH          *HMD 12/85*\n         N     3,$CLR&SID          CLEAR HI-ORDER BITS      *HMD 12/85*\n         S     3,$LEN&SID          SUBTRACT SAVE AREA       *HMD 12/85*\n         BNP   $DES&SID            IF ONLY A SAVE AREA      *HMD 12/85*\n         LA    4,0                 GET 'FROM' ADDRESS (DUMMY)\n         LA    5,X'&RB.'           GET FILL CHARACTER\n         SLL   5,24                PUT IN HIGH BYTE AND CLEAR LENGTH\n         MVCL  2,4                 CLEAR STORAGE FAST       *HMD 12/85*\n         CNOP  0,4                 ALIGNMENT                *HMD 12/85*\n         B     $DES&SID            BRANCH AROUND CONSTANTS  *HMD 12/85*\n$CLR&SID DC    F'16777215'         CLEAR HIGH ORDER BITS    *HMD 12/85*\n$LEN&SID DC    F'72'               LENGTH CONSTANT -        *HMD 12/85*\n$DES&SID EQU   *                   END OF CONSTANT AREA\n         AGO   .LMSAVE\n.NORENT1 ANOP\n         LA    1,SAVE&SYSNDX .     POINT TO SAVE AREA\n.LMSAVE  ST    13,4(1) .           SAVE OLD SAVE AREA ADDRESS\n         ST    1,8(13) .           SAVE NEW SAVE AREA ADDRESS\n         LR    13,1 .              GET NEW SAVE AREA ADDRESS\n         AIF   ('&CDE' EQ 'RENT').NOSAV\n         B     SEND&SYSNDX .      BRANCH AROUND NON-EXECUTABLE CODE\nSAVE&SYSNDX  DC    18F'0' .        NON-REENTRANT PROGRAM SAVE AREA\nSEND&SYSNDX    DC  0H'0' .         END OF SAVE AREA TO BRANCH AROUND\n.NOSAV   ANOP\n         AIF   (NOT &IDS(&SIDX)).DOEQU NO ID LOG TO PROGRAMMER\n&RA      SETC  'BEGIN '.'&IDP(&SIDX)' SET LOGON MESSAGE\n         WTO   '&RA',ROUTCDE=11 . LOG THE PROGRAM ON\n.DOEQU   AIF   (&REG OR '&EQU' EQ 'NO').NOEQU\n         SPACE 2\n*****    REGISTER EQUATES    *****\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         SPACE 2\n*****    MISC EQUATES    *****\n         SPACE 2\nBRANCH   EQU   240\nNOP      EQU   15\nON       EQU   255\nOFF      EQU   0\n         SPACE 2\n.NOEQU   AIF   (&MAP OR '&SD' EQ 'NO').NOMAP\n*****    SAVE AREA DSECT    *****\n         SPACE 2\nSAVEAREA DSECT ,                  SAVE AREA DUMMY SECTION\nPL1      DC    F'0' .             AREA USED BY PL/I\nLASTSAVE DC    F'0' .             ADDRESS OF LAST SAVE AREA\nNEXTSAVE DC    F'0' .             ADDRESS OF NEXT SAVE AREA\nREGE     DC    F'0' .             SAVE AREA FOR REGISTER 14\nREGF     DC    F'0' .             SAVE AREA FOR REGISTER 15\nREG0     DC    F'0' .             SAVE AREA FOR REGISTER 0\nREG1     DC    F'0' .             SAVE AREA FOR REGISTER 1\nREG2     DC    F'0' .             SAVE AREA FOR REGISTER 2\nREG3     DC    F'0' .             SAVE AREA FOR REGISTER 3\nREG4     DC    F'0' .             SAVE AREA FOR REGISTER 4\nREG5     DC    F'0' .             SAVE AREA FOR REGISTER 5\nREG6     DC    F'0' .             SAVE AREA FOR REGISTER 6\nREG7     DC    F'0' .             SAVE AREA FOR REGISTER 7\nREG8     DC    F'0' .             SAVE AREA FOR REGISTER 8\nREG9     DC    F'0' .             SAVE AREA FOR REGISTER 9\nREGA     DC    F'0' .             SAVE AREA FOR REGISTER 10\nREGB     DC    F'0' .             SAVE AREA FOR REGISTER 11\nREGC     DC    F'0' .             SAVE AREA FOR REGISTER 12\nUSERWORK DS    0C\n&SYSECT  CSECT .                  RESTORE PROGRAM ADDRESSING\n         LUSE  SAVEAREA,13        SET DSECT ADDRESSING\n         AGO   .YMAP\n.NOMAP   ANOP\n&SYSECT  CSECT  .\n.YMAP    ANOP\n         SPACE 3\n         AIF   (T'&PARM EQ 'O').EXIT  PARM NOT WANTED\n         AIF   ('&PARM'(1,1) EQ '(').PREG REGISTER NOTATION\n         L     15,4(13) .         GET OLD SAVEAREA ADDRESS\n&RA      SETC  '&PARM(1)'         GET PARM DATA\n         MVC   &RA.(4),24(15) .   MOVE PARM POINTER TO USER\n         AGO   .EXIT\n.PREG    ANOP\n         L     15,4(13) .         GET OLD SAVE AREA ADDRESS\n&RA      SETC  '&PARM(1)'         GET PARM DATA\n         L     &RA,24(15) .       PASS OLD REG 1 (PARM POINTER) TO USER\n.EXIT    ANOP\n&SREG    SETB  1\n&SDMAP   SETB  1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SM": {"ttr": 4110, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00C\\x01\\x12\\x17\\x0f\\x01\\x164?\\x00D\\x01\\xda\\x01\\xda\\x00\\x02\\xe6\\xd1\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-06-18T00:00:00", "modifydate": "2016-12-08T00:44:43", "lines": 474, "newlines": 474, "modlines": 2, "user": "WJSMITH"}, "text": "//ASMSM    JOB (1),'ASM/LINK SM UTIL  ',CLASS=A,MSGLEVEL=(1,1),\n//     MSGCLASS=A,TIME=1439,NOTIFY=BSMITH,REGION=4M\n//ASM      EXEC PGM=ASMA90,\n//     PARM=(NOOBJECT,DECK,NOESD,NORLD)\n//SYSPRINT  DD  SYSOUT=*\n//SYSTERM   DD  SYSOUT=*\n//SYSUT1    DD  UNIT=SYSALLDA,SPACE=(CYL,(10,10))\n//SYSLIB    DD  DISP=SHR,DSN=SYS1.MACLIB\n//          DD  DISP=SHR,DSN=SYS1.MODGEN\n//          DD  DISP=SHR,DSN=CBTTAPE.FILE119.PDS   <-- MACROS --- !!!!\n//SYSPUNCH  DD  DSN=&&OBJ(SM),DISP=(,PASS),\n//     UNIT=SYSALLDA,SPACE=(CYL,(1,1,45)),\n//     DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=27920)\n//SYSIN     DD  *\nSM       TITLE 'SESSION MANAGER SWITCH ROUTINE'\n***********************************************************************\n*                                                                     *\n*   MODULE NAME  =  SM                                                *\n*                                                                     *\n*   DESCRIPTIVE  =  THE SM COMMAND IS A TSO COMMAND TO TURN-OFF AND   *\n*                   SUBSEQUENTLY TURN-ON THE TSO SESSION MANAGER      *\n*                                                                     *\n*   COMMAND SYNTAX  =  SM  OFF/ON                                     *\n*                                                                     *\n*   CSECT NAME  =  SM                                                 *\n*                                                                     *\n*   COPYRIGHT  =  NONE                                                *\n*                                                                     *\n*   STATUS  =  z/OS 2.2  (PUT 1607)                                   *\n*           =  MVS / SP 1.3  & MVS / SP 2.1.2                         *\n*           =  AMODE 24, RMODE 24 (MODE CHANGE TO ACCESS CONTROL BLKS)*\n*                                                                     *\n*   FUNCTION  =                                                       *\n*      TO PROVIDE A TSO COMMAND THAT WILL TEMPORARILY DISABLE (AND    *\n*      SUBSEQUENTLY RE-ENABLE) THE TSO SESSION MANAGER (NOTE:  THIS   *\n*      COMMAND HAS NO EFFECT IF USED IN A TSO SESSION WHERE THE TSO   *\n*      SESSION MANAGER WAS NOT INITIALLY ACTIVE.)                     *\n*                                                                     *\n*      OPERATION  =                                                   *\n*         1.  ESTABLISH LOCAL ADDRESSIBILITY                          *\n*         2.  LOCATE THE ONLINE TSO PROTECTED-STEP-CONTROL-BLOCK      *\n*             (PSCB) AND EXIT (WITH A MESSAGE) IF NOT FOUND           *\n*         3.  TEST APF-AUTHORIZATION:                                 *\n*             3.1  IF AUTHORIZED, THEN PROCEED TO STEP 4              *\n*             3.2  IF NOT AUTHORIZED THEN DISPLAY ERROR MESSAGE       *\n*                  AND EXIT                                           *\n*         4.  GET KEY 0 USING MODESET MACRO                           *\n*         5.  LOCATE THE TSO TERMINAL-STATUS-BLOCK (TSB), THE TSO     *\n*             LOGON-WORK-AREA (LWA), THE TSO SESSION MANAGER MAIN     *\n*             WORK AREA (RDFBLOCK), AND THE SAVED RDFBLOCK PTR        *\n*             (LAST FOUR BYTES OF PSCB USER FIELD - PCSBU)            *\n*         6.  TEST THE ACTIVE ENVIRONMENT AND GO PERFORM ERROR EXIT   *\n*             PROCESSING IF THE TSO SESSION MANAGER IS NOT ACTIVE     *\n*             OR CAN NOT BE RESTORED                                  *\n*         7.  IF THE TSO SESSION MANAGER IS ACTIVE, THEN:             *\n*             7.1  RESET PSW KEY AND EXIT IF \"SM ON\" SPECIFIED        *\n*             7.2  PROCEED THROUGH THE STEPS NEEDED TO DISABLE THE    *\n*                  TSO SESSION MANAGER:                               *\n*                  7.2.1  STATUS-STOP THE SESSION MANAGER TCB         *\n*                  7.2.2  SET FLAGS SO THAT SESSION MANAGER THINKS    *\n*                         THAT A FULL-SCREEN COMMAND IS ACTIVE        *\n*                  7.2.3  SAVE RDFBLOCK PTR IN THE PSCBU+4 FIELD      *\n*                  7.2.4  ISSUE TPUT TO CLEAR THE TERMINAL SCREEN     *\n*                  7.2.5  RESET TERMINAL DISPLAY MANAGER OPTIONS      *\n*                         FLAGS IN THE TSB                            *\n*                  7.2.6  IF VTAM, DISABLE FULL-SCREEN MODE           *\n*                  7.2.7  RESET PSW KEY AND EXIT                      *\n*         8.  IF THE TSO SESSION MANAGER IS NOT ACTIVE, THEN:         *\n*             8.1  RESET PSW KEY AND EXIT IF \"SM OFF\" SPECIFIED       *\n*             8.2  PROCEED THROUGH THE STEPS NEEDED TO ENABLE THE     *\n*                  TSO SESSION MANAGER:                               *\n*                  8.2.1  ENABLE TERMINAL DISPLAY MANAGER OPTIONS     *\n*                         FLAGS IN THE TSB                            *\n*                  8.2.2  RESTORE RDFBLOCK PTR FROM THE PSCBU+4 FIELD *\n*                  8.2.3  STATUS-START THE SESSION MANAGER TCB        *\n*                  8.2.4  MODIFY TSB FLAGS SO THAT SESSION MANAGER    *\n*                         MAY RESUME TERMINAL DISPLAY CONTROL         *\n*                  8.2.5  IF VTAM, ENABLE FULL-SCREEN MODE            *\n*                  8.2.6  ISSUE TPUT TO CLEAR THE TERMINAL SCREEN     *\n*                  8.2.7  RESET PSW KEY AND EXIT                      *\n*                                                                     *\n*   MACROS USED  =                                                    *\n*         CVT                   SYSTEM CVT MAPPING DSECT              *\n*         TSOLEAVE              SYNTEX TSO RESTORE SEQUENCE           *\n*         EXTRACT               SYSTEM CONTROL-BLOCK LOCATOR          *\n*         FREEMAIN              SYSTEM FREE MEMORY OPERATION          *\n*         GETMAIN               SYSTEM GET MEMORY OPERATION           *\n*         IHAASCB               SYSTEM ASCB MAPPING DSECT             *\n*         IHAASXB               SYSTEM ASXB MAPPING DSECT             *\n*         IHAPSA                SYSTEM PSA MAPPING DSECT              *\n*         IKJPSCB               TSO PSCB MAPPING DSECT                *\n*         IKJTSB                TSO TSB MAPPING DSECT                 *\n*         IKJWFLWA              TSO LOGON WORK AREA MAPPING DSECT     *\n*         MODESET               SYSTEM PSW-KEY/PSW-MODE CONTROL       *\n*         TSOENTER              SYNTEX TSO SAVE SEQUENCE              *\n*         RDFBLOCK              EQUS FOR SESSION MGR RDFBLOCK AREA    *\n*         STATUS                SYSTEM TCB DISPATCH CONTROL           *\n*         STAX                  SYSTEM ATTENTION-EXIT CONTROL         *\n*         STFSMODE              TSO SET-TERM OPTIONS OPERATION        *\n*         STTMPPMD              TSO SET-TERM OPTIONS OPERATION        *\n*         TESTAUTH              SYSTEM APF-AUTHORIZATION CHECKER      *\n*         TPUT                  TSO TERMINAL OUTPUT OPERATION         *\n*                                                                     *\n*   NOTES  =                                                          *\n*      REGISTER CONVENTIONS  =  STANDARD CONVENTIONS                  *\n*         REGISTERS 0 - 1    =  WORK REGISTERS                        *\n*         REGISTER  2        =  TEMPORARY PSCB/ASCB/CVT BASE REGISTER *\n*         REGISTER  3        =  TEMPORARY ASXB BASE REGISTER          *\n*         REGISTER  4        =  TSO LWA BASE REGISTER                 *\n*         REGISTER  5        =  TSO TSB BASE REGISTER                 *\n*         REGISTER  6        =  SESSION MANAGER RDFBLOCK BASE         *\n*         REGISTERS 7 - 9    =  UNUSED                                *\n*         REGISTER 10        =  ADDRESS OF PSCBU+4 LOCATION           *\n*         REGISTER 11        =  WORK/SAVE AREA BASE ADDRESS           *\n*         REGISTER 12        =  CSECT BASE ADDRESS                    *\n*         REGISTER 13        =  SAVE AREA BASE ADDRESS                *\n*         REGISTER 14        =  RETURN ADDRESS                        *\n*         REGISTER 15        =  ENTRY POINT ADDRESS REGISTER          *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* Updated 18Jun2012, William Smith, Hitachi Data Systems,             *\n*   Santa Clara, CA, 95050-2627, bill.smith@hds.com                   *\n*                                                                     *\n* . Reassembled with z/OS 1.13, z/196, PUT/RSU 1204+                  *\n* . Requires macros from CBT TAPE file 119 (see above for list)       *\n* . TSO version 3.13.0 (from the TASID 5.19 display)                  *\n* . No assembly errors and no need to uncomment LWA mapping macro     *\n*   which has changed substantially since 1985; now shipped with      *\n*   z/OS in SYS1.MODGEN (IKJEFLWA service level 2011/HTE7780)         *\n* . Requires APF authorization:  Hence, issue a PARMLIB UPDATE TSO    *\n*   command after adding SM to the AUTHCMD section in IKJTSO00 and    *\n*   linking into an APF authorized LINK or LPA list data set followed *\n*   by a LLA REFRESH                                                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* UPDATED 21FEB85, WILLIAM SMITH, SYNTEX (USA), INC., PALO ALTO, CA.  *\n* UPDATED 27OCT85, HOWARD DEAN,   SYNTEX (USA), INC., PALO ALTO, CA.  *\n*                                                                     *\n* . SOURCE:  OCCIDENTAL PETROLEUM, HOUSTON, TX.; COURTESY OF SAM BASS *\n* . THIS CODE HAS BEEN TESTED AT THE 8409 PUT LEVEL OF MVS/SP 1.3.3   *\n*   JES2 WITH TSO/E RELEASE 2.0                                       *\n*   AND AT THE 8505 PUT LEVEL OF MVS/XA 2.1.2 WITH TSO/E RELASE 2.1   *\n* . MODIFICATION HISTORY AND NOTES                                    *\n*   - AN IN-LINE DSECT FOR THE \"LWA\" (LOGON WORK AREA) HAS BEEN       *\n*     REPLACED WITH COMMENTS AND THE IBM MAPPING MACRO, \"IKJEFLWA\",   *\n*     HAS BEEN CODED IN ITS PLACE                                     *\n*   - WARNING:  IKJEFLWA IS *RESTRICTED* MATERIAL AND CANNOT BE       *\n*     DISTRIBUTED WITH THIS MODULE.  IKJEFLWA IS DISTRIBUTED ON THE   *\n*     OPTIONAL MATERIALS TAPE, FEATURE 7029 (1600 BPI) OR 7031 (6250  *\n*     BPI), VOL=SER=SYM-01, FILE 1 IN THE \"AAPVT\" (PRIVATE MACROS),   *\n*     FILE FOR FMID JBB1213.  IF YOU ARE NOT LICENSED FOR THE OPTION- *\n*     AL MATERIALS, SIMPLY REMOVE THE COMMENTS FROM THE IN-LINE LWA   *\n*     DSECT TO CREATE THE MAPPING DSECT FOR USE DURING ASSEMBLY.      *\n*                                                                     *\n*     'IKJEFLWA' IS IN SYS1.MACLIB FOR JBB2267 (TSO/E FOR MVS/XA)     *\n*                                                                     *\n* . TO ELIMINATE NEED FOR THE AUTHORIZATION SVC, LINK SM AS AN APF    *\n*   AUTHORIZED COMMAND AND ADD THE COMMAND NAME TO THE IKJEFTE2 TSO   *\n*   AUTHORIZED COMMAND TABLE; THE SVC CALL SHOULD BE NO-OP'ED.        *\n* . IF SM IS EXECUTED FROM ISPF OPTION 4 OR 6 AND THE SM MODULE IS    *\n*   LOCATED IN THE PLPA, BE SURE TO UPDATE THE ISPF TABLE \"ISPTCM\" TO *\n*   ALLOW ISPF TO LOCATE THE MODULE; CONSULT THE ISPF INSTALLATION    *\n*   GUIDE FOR FURTHER DETAILS ON UPDATING THIS TABLE                  *\n*                                                                     *\n* UPDATED 24OCT85, WILLIAM SMITH/HOWARD DEAN, SYNTEX (USA)            *\n*                                                                     *\n* . ELIMINATED NEED FOR AUTHORIZATION SVC - PUT INTO IKJTABLS         *\n*                                                                     *\n* UPDATED 27OCT85, WILLIAM SMITH/HOWARD DEAN, SYNTEX (USA)            *\n* . USE 31 BIT MODE FOR ACCESSING CONTROL BLOCKS UNDER MVS/XA         *\n* . RUN 'SM' IN AMODE 24 RMODE 24 BUT SWITCH MODES WHEN APPROPRIATE   *\n*                                                                     *\n***********************************************************************\nSM       TSOENTER REGS=YES,PL=(CPPL,IO),WORK=SMWORKL,SP=1\n         SPACE 1\n         LA    R0,TSOWORK          WORK AREA ADDRESS\n         LA    R1,SMWORKL          R1 = LENGTH OF WORKAREA\n         SLR   R15,R15             PAD BYTE AND LENGTH = 0\n         SLR   R14,R14             CLEAR 'TO' ADDRESS\n         MVCL  R0,R14              CLEAR WORKAREA\n         SPACE 1\n         XC    SMWOPRND,SMWOPRND   CLEAR OPERAND\n         SPACE 1\n         L     R1,CPPLCBUF         GET CBUF ADDR\n         LH    R2,0(R1)            GET BUFFER LENGTH\n         SH    R2,=H'4'            MINUS CONTROL WORD LENGTH\n         CH    R2,2(,R1)           COMPARE TO OFFSET VALUE\n         BE    SMEXTRA             NO OPERANDS\n         SPACE 1\n         LH    R3,2(,R1)           R3 = OFFSET TO OPERAND\n         LA    R3,4(R1,R3)         R3 = ADDRESS OF OPERAND\n         LA    R2,4(R1,R2)         R2 = ADDRESS OF BUFFER END\n         SR    R2,R3               R2 = LENGTH OF OPERAND\n         CH    R2,=H'2'            AT LEAST TWO?\n         BL    SMEXTRA             NON MEANINGFUL OPERAND\n         SPACE 1\n         MVC   SMWOPRND,0(R3)      COPY OPERAND\n         OI    SMWONOFF,C' '       UPCASE OPERAND\nSMEXTRA  EXTRACT SMWPSCBA,'S',FIELDS=(PSB),MF=(E,SMWXTRCT)\n         L     R2,SMWPSCBA         GET PSCB ADDRESS\n         LA    R2,0(R2)            CLEAR HIGH-ORDER BYTE\n         LTR   R2,R2               IS PSCB ADDRESS VALID?\n         BZ    SMNOTSO               NO, GO PRINT NON-TSO MESSAGE\n         USING PSCB,R2               YES, USE IKJPSCB MAPPING\n         LA    R10,PSCBU+4         COMPUTE ADDRESS OF PSCB USER WORD\n         DROP  R2                  DROP PSCB\n         TESTAUTH FCTN=1,RBLEVEL=1 TEST THE COMMANDS AUTHORIZATION\n         LTR   R15,R15             CAN MODESET BE ISSUED ?\n         BNZ   SMNOAPF             NO, ISSUE MESSAGE FOR NO AUTH\nSMKEY0   DS    0H\n         MODESET KEY=ZERO,MODE=SUP\n         MVI   SMWFLAGS,C'S'       DEFAULT TO MVS/SP\n         SPACE 1\n         USING CVTMAP,R3           ADDRESS THE CVT\n         L     R3,CVTPTR           LOAD CVT ADDRESS\n         TM    CVTDCB,CVTMVSE      ARE WE RUNNING MVS/XA\n         BZ    SMKEY0S             NO, USE 24 BIT MODE\n         DROP  R3                  DROP   CVT\n         MVI   SMWFLAGS,C'X'       INDICATE MVS/XA MODE\n         XABSM MODE=31             SWITCH TO 31 BIT MODE\n         SPACE 1\nSMKEY0S  DS    0H\n         USING PSA,R0              USE IHAPSA MAPPING\n         L     R2,PSAAOLD          GET ASCB ADDRESS\n         DROP  R0                  DROP PSA\n         USING ASCB,R2             USE IHAASCB MAPPING\n         L     R3,ASCBASXB         GET ASXB ADDRESS\n         USING ASXB,R3             USE IHAASXB MAPPING\n         L     R4,ASXBLWA          GET LOGON WORK AREA ADDRESS\n         DROP  R3                  DROP ASXB\n         L     R5,ASCBTSB          GET TSB ADDRESS\n         DROP  R2                  DROP ASCB\n         USING LWA,R4              USE LWA DSECT MAPPING\n         CLC   =C'   LWA  ',LWALWA DOES LWA CONTAIN A VALID ID?\n         BE    SMLWA0              YES, CONTINUE\n         CLI   SMWFLAGS,C'S'       ARE WE RUNNING MVX/XA?\n         BE    SMERROR             NO, DO NOT RESET MODE\n         XABSM MODE=24             RESET BACK TO 24 BIT MODE\n         B     SMERROR             AND SEND ERROR MESSAGE\n         SPACE 1\n         USING TSB,R5              USE IKJTSB MAPPING\nSMLWA0   DS    0H\n         L     R6,LWAXXXX          GET SESSION MANAGER RDFBLOCK ADDR.\n         LA    R6,0(R6)            CLEAR HIGH-ORDER BYTE (OR BIT)\n         LTR   R6,R6               IS RDFBLOCK ADDRESS VALID?\n         BZ    SMSWON                NO, GO SEE IF CAN BE RESTORED\n         CLC   =C'RDF ',RDFRDF(R6) DOES RDF CONTAIN A VALID ID?\n         BNE   SMSWON                NO, GO SEE IF RDF CAN BE RESTORED\n         TM    TSBFLG5,TSBATMP     IS SESSION MANAGER IN CONTROL?\n         BZ    SMSTART               NO, RE-START SESSION MANAGER\n         CLI   SMWONOFF,C'N'       WAS C'ON' SPECIFIED?\n         BE    SMRESET             IMPOSSIBLE SINCE WE ARE ALREADY ON\n         SPACE 1\n         L     R7,RDFTCB(R6)       GET RDF TCB ADDRESS\n         STATUS STOP,TCB=(R7)      STOP SESSION MANAGER TASK\n         OI    RDFFLGS(R6),RDFFSCR INDICATE FULLSCREEN APPLICATION\n         ST    R6,0(R10)           SAVE RDFBLOCK ADDRESS INTO PSCB\n         MVC   LWAXXXX,=F'0'       ZERO RDFBLOCK ADDRESS\n         TPUT  CLEAR,CLEARL,FULLSCR     ERASE SCREEN\n         STTMPMD OFF,KEYS=NO       DISABLE SESSION MANAGER\n         TM    TSBFLG5,TSBVTAM     IS THIS A VTAM SESSION?\n         BZ    SMRESET               NO, GO RESET KEY AND EXIT\n         STFSMODE OFF                YES, FULLSCREEN PROTECT MODE OFF\n         B     SMRESET             GO RESET STORAGE KEY AND EXIT\nSMSWON   DS    0H\n         L     R6,0(R10)           GET SAVED RDFBLOCK ADDRESS\n         LA    R6,0(R6)            CLEAR HIGH-ORDER BYTE\n         LTR   R6,R6               WAS RDFBLOCK ADDRESS SAVED?\n         BNZ   SMSWON1             YES, RESTORE SESSION MGR\n         CLI   SMWFLAGS,C'S'       ARE WE IN 31 BIT MODE?\n         BE    SMERROR             NO, DO NOT RESET\n         XABSM MODE=24\n         B     SMERROR             SEND MESSAGE, THEN EXIT\n         SPACE 1\nSMSWON1  CLC   =C'RDF ',RDFRDF(R6) DOES RDF CONTAIN A VALID ID?\n         BE    SMSWON2             YES, RESTORE SESSION MGR\n         CLI   SMWFLAGS,C'S'       ARE WE IN 31 BIT MODE?\n         BE    SMERROR             NO, DO NOT RESET\n         XABSM MODE=24\n         B     SMERROR             SEND MESSAGE, THEN EXIT\n         SPACE 1\nSMSWON2  CLI   SMWONOFF,C'F'       WAS C'OFF' SPECIFIED?\n         BE    SMRESET               YES, SKIP BECAUSE ALREADY OFF\n         STTMPMD ON,KEYS=ALL         NO, ENABLE SESSION MANAGER\n         ST    R6,LWAXXXX          RESTORE RDFBLOCK ADDRESS\n         MVC   0(4,R10),=F'0'      ZERO PSCB USER WORD\n         L     R7,RDFTCB(R6)       GET RDF TCB ADDRESS\n         STATUS START,TCB=(R7)     START SESSION MANAGER TASK\n         B     SMRESET             GO RESET STORAGE KEY AND EXIT\nSMSTART  DS    0H\n         OI    TSBFLG5,TSBATMP+TSBKEYS  ENABLE SESSION MANAGER\n         NI    RDFFLG1(R6),X'FF'-(RDFFSCRA+RDFFSCRK)\n         TM    TSBFLG5,TSBVTAM          IS THIS A VTAM SESSION?\n         BZ    SMCLEAR                    NO, SKIP STFSMODE MACRO\n         STFSMODE ON,INITIAL=YES        ENABLE FULL SCREEN MODE\nSMCLEAR  TPUT  CLEAR,CLEARL,FULLSCR     ERASE SCREEN\n         B     SMRESET             GO RESET STORAGE KEY AND EXIT\n         DROP  R4,R5\nSMERROR  DS    0H\n         MODESET KEY=NZERO,MODE=PROB     RESET KEY\n         LA    R0,ERROR            FIRST MESSAGE LINE\n         LA    R1,ERRORM           SECOND MESSAGE LINE\n         B     PUTLINEI\nSMRESET  DS    0H\n         CLI   SMWFLAGS,C'S'       ARE WE MVS/SP MODE?\n         BE    SMRMODE             YES, DO NOT RESET MODE\n         XABSM MODE=24             RESET TO 24 BIT MODE\n         SPACE 1\nSMRMODE  DS    0H\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 1\n         B     SMEPILOG            GO EXIT\nSMNOTSO  DS    0H\n         LA    R0,NOPSCB           FIRST MESSAGE LINE\n         LA    R1,NOBATCH          SECOND MESSAGE LINE\n         B     PUTLINEI            PRINT MESSAGE AND EXIT\nSMNOAPF  DS    0H\n         LA    R0,NOAUTH           FIRST MESSAGE LINE\n         LA    R1,NOAUTHM          SECOND MESSAGE LINE\n         B     PUTLINEI            PRINT MESSAGE AND EXIT\n         EJECT                     SUBROUTINE TO WRITE TO TERMINAL\nPUTLINEI DS    0H                  DROP THROUGH TO EPILOG\n         XC    SMWOLDN,SMWOLDN     END OF THE LINES\n         ST    R0,SMWOLDM+8        ADDRESS OF FIRST LINE\n         ST    R1,SMWOLDN+8        ADDRESS OF SECOND LINE\n         LA    R2,SMWOLDN          LOAD NEXT MESSAGE LINE\n         ST    R2,SMWOLDM          SAVE ADDRESS IN OLD\n         MVC   SMWOLDM+4,=F'1'     NUMBER OF SEGMENTS\n         MVC   SMWOLDN+4,=F'1'     NUMBER OF SEGMENTS\n         SPACE 1\n         PUTLINE PARM=PTPB,OUTPUT=(SMWOLDM,TERM,MULTLVL,INFOR),        X\n               MF=(E,IOPL)\n         SPACE 1\n         B     SMEPILOG\n         EJECT\nSMEPILOG TSOLEAVE ISN=LTORG        LEAVE THIS MESS\n         EJECT\nRDFRDF   EQU   X'00'               OFFSET WITHIN RDF OF RDF BLOCK ID\nRDFFLGS  EQU   X'90'               OFFSET WITHIN RDF OF RDFFLAG BYTE\nRDFSLEEP EQU   X'80'                 ADFMDF01 IS IN A WAIT\nRDFFSCR  EQU   X'40'                 TPUT FULLSCR BEING USED\nRDFWAITF EQU   X'20'                 ADFMDF01 TCB IS WAITING\nRDFLOCKF EQU   X'10'                 THE LOCAL LOCK IS HELD\nRDFTWAIT EQU   X'08'                 DO NOT ISSUE SYSEVENT TERMWAIT\nRDFTGET  EQU   X'04'                 OUTSTANDING TGET FLAG\nRDFEXIT  EQU   X'02'                 SESSION MANAGER IS TO QUIT\nRDFFSREF EQU   X'01'                 RETURNING TO FULL SCREEN MODE\nRDFFLG1  EQU   X'91'               OFFSET WITHIN RDF OF RDFFLG1 BYTE\nRDFTPUT  EQU   X'80'                 WINBLOCK(S) UPDATED BUT SCREEN\n*                                    * NOT YET UPDATED\nRDFTSOIN EQU   X'40'                 LINE TO THE TMP\nRDFMODAL EQU   X'20'                 MODE INDICATOR\nRDFFSCRA EQU   X'10'                 DO NOT INTERCEPT I/O\nRDFFSCRK EQU   X'08'                 LEAVE TSBKEYS=1 WHEN GOING TO\n*                                    * FULL SCREEN MODE FLAG\nRDFATTN  EQU   X'04'                 ATTN HAS BEEN ENTERED\nRDFTCB   EQU   X'94'               OFFSET WITHIN RDF OF SM. TCB ADDR.\nCLEAR    DC    X'40115D7E1140401D4013' KEY STRING\n         DC    X'3CC76000'\n         DC    X'3C4F4000'\n         DC    X'3CD66000'\n         DC    X'3C404000'\n         DC    X'13'\nCLEARL   EQU   *-CLEAR\n         EJECT\nERROR    DC    AL2(ERRORL,0)\n         DC    C'TSO052I '\n         DC    C'SESSION MANAGER CANNOT BE RESTORED OR IS UNAVAILABLE+'\nERRORL   EQU   *-ERROR\n*\nERRORM   DC    AL2(ERRORML,0)\n         DC    C'TSO053I '\n         DC    C'THE SESSION MANAGER ''END'' COMMAND MAY HAVE BEEN ENTEC\n               RED'\nERRORML  EQU   *-ERRORM\n*\nNOPSCB   DC    AL2(NOPSCBL,0)\n         DC    C'TSO054I '\n         DC    C'UNABLE TO LOCATE TSO CONTROL BLOCKS+'\nNOPSCBL  EQU   *-NOPSCB\n*\nNOBATCH  DC    AL2(NOBATCHL,0)\n         DC    C'TSO055I '\n         DC    C'THE ''SM'' COMMAND CANNOT BE RUN IN BATCH MODE'\nNOBATCHL EQU   *-NOBATCH\n*\nNOAUTH   DC    AL2(NOAUTHL,0)\n         DC    C'TSO056I '\n         DC    C'UNABLE TO OBTAIN MVS AUTHORIZATION+'\nNOAUTHL  EQU   *-NOAUTH\n*\nNOAUTHM  DC    AL2(NOAUTHML,0)\n         DC    C'TSO057I '\n         DC    C'THE ''SM'' COMMAND WAS NOT INVOKED IN AN APF AUTHORIZEC\n               D MODE'\nNOAUTHML EQU   *-NOAUTHM\n         EJECT\nTSODSECT DSECT                     CONTINUE USER DSECT\nSMWXTRCT EXTRACT 0,'S',FIELDS=(PSB),MF=L\nXTRACTL  EQU   *-SMWXTRCT          LENGTH TO CLEAR\nPTPB     PUTLINE MF=L              PUTLINE PARAMETER LIST\nSMWPSCBA DS    A                   PSCB ADDRESS\nSMWOPRND DS    0CL2                COMMAND OPERAND\nSMWFLAGS DS    XL1                 LOCAL ROUTINE FLAGS\nSMWONOFF DS    CL1                 OPERAND BYTE\nSMWOLDM  DS    F                   POINTER FOR MULTILINE PUTLINE\n         DS    F                   NUMBER OF SEGMENTS\n         DS    A                   ADDRESS OF MESSAGE SEGMENT\n         SPACE 1\nSMWOLDN  DS    F                   POINTER FOR MULTILING PUTLINE\n         DS    F                   NUMBER OF SEGMENTS\n         DS    A                   ADDRESS OF MESSAGE SEGMENT\nSMWORKL  EQU   *-TSOWORK\n         EJECT\n*LWA     DSECT\n*********************************************************************\n*      THE LOGON WORK AREA WILL CONTAIN INFORMATION WHICH IS        *\n*      NECESSARY FOR THE LOGON/LOGOFF PROCESSING ROUTINES.  IT      *\n*      WILL CONTAIN CONTROL BLOCK POINTERS, ENTRANCE LISTS AND      *\n*      PARAMETER LISTS.                                             *\n*********************************************************************\n*LWAPPTR  DS    A\n*LWALWA   DC    CL8'   LWA  '         /*LWA CONTROL BLOCK ID      */\n*\n*         LWA AREA DELETED\n*\n*         ORG   LWA+X'94'\n*LWAXXXX  DS    A                     /*POINTER TO SESSION MANAGER*/\n*                                    /*RDFBLOCK AREA             */\n*\n*         ORG   LWA+X'9C'\n*LWATCB02 DS    A                     /*POINTER TO TCB FOR        */\n*                                    /*IKJEFT02                  */\n*\n*         ORG   LWA+X'A0'\n*LWAPIOWA DS    A                     /*POINTER TO I/O DCB        */\n*                                    /*WORK TABLES               */\n*         DS    F                     /*RESERVED                  */\n*         DS    F                     /*RESERVED                  */\n*\n*         DS    0D\n*LWALEN   EQU   *-LWA\n*         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n         IHAPSA\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         PRINT GEN\n         EJECT\n         IKJEFLWA\n         EJECT\n         IKJPSCB\n         EJECT\n         IKJTSB LIST=YES\n         END\n/*\n//LINKEDIT EXEC PGM=IEWL,\n//         PARM='LET,LIST,XREF'\n//SYSPRINT  DD  SYSOUT=*\n//SYSLMOD   DD  DISP=SHR,DSN=BSMITH.LOADLIB\n//SYSPUNCH  DD  DSN=&&OBJ,DISP=(OLD,PASS)\n//SYSUT1    DD  UNIT=SYSALLDA,SPACE=(CYL,(1,1))\n//SYSLIN    DD   *\n  INCLUDE  SYSPUNCH(SM)\n  SETCODE  AC(1)\n  NAME     SM(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STCADOC": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00@\\x00@\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 64, "newlines": 64, "modlines": 0, "user": "HMDEAN"}, "text": "Documentation of Started Task Accounting Modification:\n\n\nThe started task accounting modifications (LM00038, LM00039) are very\nsimple to use. For each started task invoked by the START command, a\nFIND macro is issued for a member of SYS3.STCACCT with the same name\nas the started task. If no member by that name is found, the STARTED\nTASK CONTROL module invokes the task without any accounting\ninformation.  However, if the correct member is found, a READ macro is\nissued to fetch card images from the contents of the member. Any I/O\nerror will cause the started task to be executed without any supplied\naccounting information. The format of the control cards in\nSYS3.STCACCT are as follows:\n\n\n\n    Card #1 - This is the account card. It MUST be the FIRST card\nC             in the dataset. Here is the format:\nO   000000000100000000020000000003000000000400000000070000000008\nL   123456789012345678901234567890123456789012345678901234567890\n#   ------------------------------------------------------------\n             (U4757,U4757,000000),'PGMR''S NAME'\n\n               * There are NO slashes in columns 1 & 2.\n               * There is NO comma after the programmer's name\n               * Account information is EXACTLY as how you\n                 wish it to appear on the JOB card\n               * The MSGLEVEL=1 parameter CANNOT be overridden\n\n    Card #2 - This is an optional continuation card. Here is the\nC             format:\nO   000000000100000000020000000003000000000400000000070000000008\nL   123456789012345678901234567890123456789012345678901234567890\n#   ------------------------------------------------------------\n\n    //      MSGCLASS=A,NOTIFY=$UHMD\n\n               * For this to be a continuation of the JOB card,\n                 there must be NO text in column 3\n               * If you wish to continue to a third card, the\n                 text on this card must end in a COMMA AND column 3\n                 on the next card must be BLANK.\n               * If a COMMA is NOT the last character, the next\n                 card will be ADDED between the JOB and EXEC card\n                 for STARTED TASKS.\n               * The MSGLEVEL keyword is NOT allowed, since it would\n                 create a JCL error due to a duplicate entry.\n\n    Card #3 - This is an optional control or OUTPUT card. Here is\nC             the format:\nO   000000000100000000020000000003000000000400000000070000000008\nL   123456789012345678901234567890123456789012345678901234567890\n#   ------------------------------------------------------------\n\n    /*JOBPARM  L=999,F=J012\n\n               or\n\n    //ABC    OUTPUT  FORMS=WXYZ,CLASS=2,JESDS=ALL\n\n               * No BLANK in column 3\n               * Any number of these cards may be inserted\n               * Continue with a COMMA as the last character\n                 and next card text begins in column 3\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOENTEO": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x87\\x00\\x87\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 135, "newlines": 135, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAYME   TSOENTER &FAKE,&BASE=12,&REGS=YES,&PL=,                       +\n               &WORK=0,&DSECT=NO,&SP=0,&CPR=NO              *HMD 04/85*\n.*\n         GBLC  &R\n         LCLA  &A\n         LCLC  &NAME                    TO HOLD CSECT NAME    @HMD78174\n         LCLB  &OPTS(8),&BIT\n         LCLC  &BASEREG\n         LCLC  &SECT                    CURRENT CSECT NAME    @HMD78174\n         LCLC  &YEAR                                          @HMD86107\n         LCLC  &LAB1,&LAB2,&LAB3,&LAB4  LABEL VARIABLES       @HMD86107\n.*\n&YEAR    SETC  '19'.'&SYSDATE'(7,8)                           @HMD76107\n&SECT    SETC  '&SYSECT'                SET CONTROL SECT NAME @HMD78174\n&NAME    SETC  '&NAYME'                 HOLD CSECT NAME       @HMD78174\nTSODSECT DSECT ,                        DEFINE NAME OF DSECT\nTSOSAVE  DS    18F .                    FIRST SAVE AREA\n         CPPL  DSECT=NO                 PARAMETER LIST\n&A       SETA  1\n.A1      AIF   (&A GT N'&PL).L1\n&OPTS(1) SETB  ((&OPTS(1))OR('&PL(&A)' EQ 'MESSAGE'))\n&OPTS(2) SETB  ((&OPTS(2))OR('&PL(&A)' EQ 'PARSE'))\n&OPTS(3) SETB  ((&OPTS(3))OR('&PL(&A)' EQ 'IO'))\n&OPTS(4) SETB  ((&OPTS(4))OR('&PL(&A)' EQ 'CSCAN'))\n&OPTS(5) SETB  ((&OPTS(5))OR('&PL(&A)' EQ 'DAIR'))\n&A       SETA  &A+1\n         AGO   .A1\n.L1      ANOP\nTSOECB   DS    F .                      DEFINE COMMAND ECB\n.LL1     AIF   (NOT &OPTS(1)).L2\n         MNOTE 0,'MESSAGE PARM LIST UNDEFINED'\n.L2      AIF   (NOT &OPTS(2)).L3\n         PPL   DSECT=NO                 PARSE PARM LIST\n.L3      AIF   (NOT &OPTS(3)).L4\n         IOPL  DSECT=NO                 I/O PARAMETER LIST\n.L4      AIF   (NOT &OPTS(4)).L5\n         CSPL  DSECT=NO                 CMD SCAN PARM LIST\n.L5      AIF   (NOT &OPTS(5)).L6\n         DAPL  DSECT=NO                 DAIR PARM LIST\n.L6      ANOP\nTSOWORK  DS    0D .                     ALIGN TO DOUBLE-WORD\nTSOUSER  EQU   * .                      GIVE ALTERNATE NAME\n         AIF   ('&REGS' NE 'YES').NOREGS\n         EJECT\n         REGS\n&R       SETC  'R'\n.NOREGS  AIF   ('&DSECT' EQ 'NO').GEN\n         MEXIT\n.GEN     EJECT                                                @HMD78174\n         AIF   ('&NAME' EQ '').NONAME                         @HMD78174\n&NAME    CSECT                                                @HMD78174\n         AGO   .GEN1                                          @HMD78174\n.NONAME  AIF   ('&SECT' NE '').GEN0                           @HMD78174\n         MNOTE 16,'CSECT NAME MISSING, GENERATION TERMINATED'\n         MEXIT                                                @HMD86107\n.GEN0    ANOP                                                 @HMD78174\n&SECT    CSECT                                                @HMD78174\n&NAME    SETC  '&SECT'            SET NAME TO CSECT NAME      @HMD78174\n.GEN1    ANOP                                                 @HMD78174\n&LAB1    SETC  'IHB'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB2    SETC  'IHC'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB3    SETC  'IHD'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         B     &LAB1-&NAME.(,15)        BRANCH AROUND IDS     @HMD78174\n         DC    AL1(&LAB1-&LAB2)         LENGTH OF ID AREA   *HMD 04/86*\n&LAB2    DC    C'&NAME  &SYSDATE'       PGM ID AND DATE     *HMD 04/85*\n         AIF   ('&CPR' EQ 'NO').NOCPR   BYPASS COPYRIGHT    *HMD 04/85*\n         DC    C' COPYRIGHT (C) &YEAR HOWARD M. DEAN'       *HMD 04/85*\n.NOCPR   ANOP                                               *HMD 04/85*\n         SPACE 1                                            *HMD 04/86*\n&LAB1    DS    0H                       POINT TO BRANCH TO    @HMD78174\n         STM   14,12,12(13)             SAVE REGISTERS      *HMD 04/86*\n         AIF   (T'&BASE NE 'N').LUSE1\n&BASEREG SETC  '&R&BASE'\n         AGO   .LUSE2\n.LUSE1   ANOP\n&BASEREG SETC  '&BASE'\n.LUSE2   ANOP\n         LUSE  &NAME,&BASEREG           PERMANANT BASE        @HMD78174\n         CNOP  0,4                      ALIGNMENT             @HMD78174\n         L     &BASEREG,&LAB3-&NAME.(,15)\n*                                       ESTABLISH BASE REG  *HMD 04/86*\n         B     &LAB3+L'&LAB3            BRANCH AROUND ADDR  *HMD 04/86*\n         SPACE 1\n&LAB3    DC    A(&NAME)                 CSECT ADDRESS       *HMD 04/86*\n         SPACE 1\n         LR    &R.2,1 .                 SAVE CPPL POINTER\n         CNOP  0,4 .                    PROPER ALIGNMENT\n         BAL   &R.1,*+8 .               BRANCH AROUND SP+LV\nTSOLEN   DC    0XL4'00' .               DEFINE ACCESS NAME\n         DC    AL1(&SP) .               SUBPOOL VALUE\n         DC    AL3((((TSOUSER-TSODSECT)+(&WORK)+7)/8)*8) .  AREA LENGTH\n         L     0,TSOLEN .               LOAD SP AND LV\n         SVC   10 .                     ISSUE REGMAIN SVC\n         ST    13,4(,1) .               CHAIN\n         ST    1,8(,13) .               SAVE\n         LR    &R.13,1 .                AREAS\n         LUSE  TSODSECT,&R.13 .         ESTABLISH ADDRESSABILITY\n         MVC   CPPL(CPPLLEN),0(&R.2) .  COPY PARM LIST\n         AIF   (NOT &OPTS(2)).NPARSE\n         MVC   PPLUPT(4),CPPLUPT .      USER PROFILE TAB\n         MVC   PPLECT(4),CPPLECT\n         MVC   PPLCBUF(4),CPPLCBUF      INIT CMD BUFFER       @HMD78174\n         LA    &R.0,PPLRANS .              LOAD ANSWER PLACE\n         ST    &R.0,PPLANS\n         LA    &R.0,TSOECB\n         ST    &R.0,PPLECB\n&BIT     SETB  1\n.NPARSE  AIF   (NOT &OPTS(3)).NIO\n         MVC   IOPLECT(4),CPPLECT\n         MVC   IOPLUPT(4),CPPLUPT\n         AIF   (&BIT).Q1\n         LA    &R.0,TSOECB\n.Q1      ST    &R.0,IOPLECB\n&BIT     SETB  1\n.NIO     AIF   (NOT &OPTS(5)).NDAIR\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         MVC   DAPLPSCB(4),CPPLPSCB\n         AIF   (&BIT).Q2\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q2      ST    &R.0,DAPLECB\n.NDAIR   AIF   (NOT &OPTS(4)).NCSCAN\n         MVC   CSPLUPT(4),CPPLUPT\n         MVC   CSPLECT(4),CPPLECT\n         MVC   CSPLCBUF(4),CPPLCBUF     INIT CMD BUFFER       @HMD78174\n         AIF   (&BIT).Q3\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q3      ST    &R.0,CSPLECB\n.NCSCAN  INUSE\n         EJECT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOENTER": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\xa1\\x00\\xa1\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAYME   TSOENTER &FAKE,&BASE=12,&REGS=YES,&PL=CPPL,&ADBIT=24,         X\n               &WORK=0,&DSECT=NO,&SP=0,&CPR=NO,&XA=NO,&RMOD=24\n.*\n         GBLC  &R,&FSIZE,&POOL\n         GBLB  &XAM                                         *HMD 11/86*\n         LCLA  &A\n         LCLC  &NAME,&FNAME             TO HOLD CSECT NAME    @HMD78174\n         LCLB  &OPTS(8),&BIT\n         LCLC  &BASEREG\n         LCLC  &SECT                    CURRENT CSECT NAME    @HMD78174\n         LCLC  &YEAR                                          @HMD86107\n         LCLC  &LAB1,&LAB2,&LAB3,&LAB4  LABEL VARIABLES       @HMD86107\n.*\n&FNAME   SETC  'GM'.'&SYSNDX'           SET GETMAIN NAME    *HMD 11/86*\n&FSIZE   SETC  '&FNAME'.'S'             SET SIZE EQUATE LABEL\n&POOL    SETC  '&SP'\n&XAM     SETB  ('&XA' EQ 'YES')         SET XA FLAG         *HMD 11/86*\n&YEAR    SETC  '19'.'&SYSDATE'(7,8)                           @HMD76107\n&SECT    SETC  '&SYSECT'                SET CONTROL SECT NAME @HMD78174\n&NAME    SETC  '&NAYME'                 HOLD CSECT NAME       @HMD78174\nTSODSECT DSECT ,                        DEFINE NAME OF DSECT\nTSOSAVE  DS    18F .                    FIRST SAVE AREA\n         CPPL  DSECT=NO                 PARAMETER LIST\n&A       SETA  1\n.A1      AIF   (&A GT N'&PL).L1\n&OPTS(1) SETB  ((&OPTS(1))OR('&PL(&A)' EQ 'MESSAGE'))\n&OPTS(2) SETB  ((&OPTS(2))OR('&PL(&A)' EQ 'PARSE'))\n&OPTS(3) SETB  ((&OPTS(3))OR('&PL(&A)' EQ 'IO'))\n&OPTS(4) SETB  ((&OPTS(4))OR('&PL(&A)' EQ 'CSCAN'))\n&OPTS(5) SETB  ((&OPTS(5))OR('&PL(&A)' EQ 'DAIR'))\n&A       SETA  &A+1\n         AGO   .A1\n.L1      ANOP\nTSOECB   DS    F .                      DEFINE COMMAND ECB\n.LL1     AIF   (NOT &OPTS(1)).L2\n         MNOTE 0,'MESSAGE PARM LIST UNDEFINED'\n.L2      AIF   (NOT &OPTS(2)).L3\n         PPL   DSECT=NO                 PARSE PARM LIST\n.L3      AIF   (NOT &OPTS(3)).L4\n         IOPL  DSECT=NO                 I/O PARAMETER LIST\n.L4      AIF   (NOT &OPTS(4)).L5\n         CSPL  DSECT=NO                 CMD SCAN PARM LIST\n.L5      AIF   (NOT &OPTS(5)).L6\n         DAPL  DSECT=NO                 DAIR PARM LIST\n.L6      ANOP\nTSOWORK  DS    0D .                     ALIGN TO DOUBLE-WORD\nTSOUSER  EQU   * .                      GIVE ALTERNATE NAME\n         AIF   ('&REGS' NE 'YES').NOREGS\n         EJECT\n         REGS\n&R       SETC  'R'\n.NOREGS  AIF   ('&DSECT' EQ 'NO').GEN\n         MEXIT\n.GEN     EJECT                                                @HMD78174\n         AIF   ('&NAME' EQ '').NONAME                         @HMD78174\n&NAME    CSECT                                                @HMD78174\n         AGO   .GEN1                                          @HMD78174\n.NONAME  AIF   ('&SECT' NE '').GEN0                           @HMD78174\n         MNOTE 16,'CSECT NAME MISSING, GENERATION TERMINATED'\n         MEXIT                                                @HMD86107\n.GEN0    ANOP                                                 @HMD78174\n&SECT    CSECT                                                @HMD78174\n&NAME    SETC  '&SECT'            SET NAME TO CSECT NAME      @HMD78174\n.GEN1    ANOP\n         AIF   (NOT &XAM).XAM1                              *HMD 11/86*\n         AIF   ('&ADBIT' EQ '24' OR '&ADBIT' EQ '31').XAM2  *HMD 11/86*\n         MNOTE 20,'MVS/XA ADDRESSING MODE &ADBIT IS INVALID'\n         MEXIT                                              *HMD 11/86*\n.XAM2    ANOP                                               *HMD 11/86*\n&NAME    AMODE &ADBIT                                       *HMD 11/86*\n         MNOTE *,'MVS/XA ADDRESSING MODE IS &ADBIT'         *HMD 11/86*\n         AIF   ('&ADBIT' EQ '24').XAM3                      *HMD 11/86*\n         SPLEVEL SET=2    .       SET XA MODE FOR 31 BIT    *HMD 11/86*\n         AIF   ('&RMOD' EQ '24' OR '&RMOD' EQ '31').XAM0\n         AIF   ('&RMOD' EQ 'ANY').XAM0\n         MNOTE 20,'MVS/XA RESIDENCY MODE OF &RMOD IS INVALID'\n.XAM0    ANOP\n         AIF   ('&RMOD' EQ '24').XAM3\n&NAME    RMODE ANY                                          *HMD 11/86*\n         AGO   .XAM1                                        *HMD 11/86*\n.XAM3    ANOP                                               *HMD 11/86*\n&NAME    RMODE 24                                           *HMD 11/86*\n.XAM1    ANOP                                               *HMD 11/86*\n&LAB1    SETC  'IHB'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB2    SETC  'IHC'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB3    SETC  'IHD'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         B     &LAB1-&NAME.(,15)        BRANCH AROUND IDS     @HMD78174\n         DC    AL1(&LAB1-&LAB2)         LENGTH OF ID AREA   *HMD 04/86*\n&LAB2    DC    C'&NAME  &SYSDATE'       PGM ID AND DATE     *HMD 04/85*\n         AIF   ('&CPR' EQ 'NO').NOCPR   BYPASS COPYRIGHT    *HMD 04/85*\n         DC    C' COPYRIGHT (C) &YEAR HOWARD M. DEAN'       *HMD 04/85*\n.NOCPR   ANOP                                               *HMD 04/85*\n         SPACE 1                                            *HMD 04/86*\n&LAB1    DS    0H                       POINT TO BRANCH TO    @HMD78174\n         STM   14,12,12(13)             SAVE REGISTERS      *HMD 04/86*\n         AIF   (T'&BASE NE 'N').LUSE1\n&BASEREG SETC  '&R&BASE'\n         AGO   .LUSE2\n.LUSE1   ANOP\n&BASEREG SETC  '&BASE'\n.LUSE2   ANOP\n         LUSE  &NAME,&BASEREG           PERMANANT BASE        @HMD78174\n         CNOP  0,4                      ALIGNMENT             @HMD78174\n         L     &BASEREG,&LAB3-&NAME.(,15)\n*                                       ESTABLISH BASE REG  *HMD 04/86*\n         B     &LAB3+L'&LAB3            BRANCH AROUND ADDR  *HMD 04/86*\n         SPACE 1\n&LAB3    DC    A(&NAME)                 CSECT ADDRESS       *HMD 04/86*\n         SPACE 1\n         LR    &R.2,1 .                 SAVE CPPL POINTER\n&FSIZE   EQU   (((TSOUSER-TSODSECT)+(&WORK)+7)/8)*8 .  AREA LENGTH\n         AIF   (&XAM).X003\n&FNAME   GETMAIN R,LV=&FSIZE,SP=&SP\n         AGO   .X004\n.X003    ANOP\n         SPACE 1\n&FNAME   GETMAIN RU,LV=&FSIZE,SP=&SP,LOC=RES\n.X004    ANOP\n         SPACE 1\n         ST    13,4(,1) .               CHAIN\n         ST    1,8(,13) .               SAVE\n         LR    &R.13,1 .                AREAS\n         LUSE  TSODSECT,&R.13 .         ESTABLISH ADDRESSABILITY\n         MVC   CPPL(CPPLLEN),0(&R.2) .  COPY PARM LIST\n         AIF   (NOT &OPTS(2)).NPARSE\n         MVC   PPLUPT(4),CPPLUPT .      USER PROFILE TAB\n         MVC   PPLECT(4),CPPLECT\n         MVC   PPLCBUF(4),CPPLCBUF      INIT CMD BUFFER       @HMD78174\n         LA    &R.0,PPLRANS .              LOAD ANSWER PLACE\n         ST    &R.0,PPLANS\n         LA    &R.0,TSOECB\n         ST    &R.0,PPLECB\n&BIT     SETB  1\n.NPARSE  AIF   (NOT &OPTS(3)).NIO\n         MVC   IOPLECT(4),CPPLECT\n         MVC   IOPLUPT(4),CPPLUPT\n         AIF   (&BIT).Q1\n         LA    &R.0,TSOECB\n.Q1      ST    &R.0,IOPLECB\n&BIT     SETB  1\n.NIO     AIF   (NOT &OPTS(5)).NDAIR\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         MVC   DAPLPSCB(4),CPPLPSCB\n         AIF   (&BIT).Q2\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q2      ST    &R.0,DAPLECB\n.NDAIR   AIF   (NOT &OPTS(4)).NCSCAN\n         MVC   CSPLUPT(4),CPPLUPT\n         MVC   CSPLECT(4),CPPLECT\n         MVC   CSPLCBUF(4),CPPLCBUF     INIT CMD BUFFER       @HMD78174\n         AIF   (&BIT).Q3\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q3      ST    &R.0,CSPLECB\n.NCSCAN  INUSE\n         EJECT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOLEAVE": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00+\\x00+\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    TSOLEAVE &SPLV=TSOLEN,&ISN=,&RETCODE=0\n         GBLC  &R,&FSIZE,&POOL\n         GBLB  &XAM                     XA-MODE GLOBAL      *HMD 11/86*\n         LCLB  &RTYPE\n.*       TSOLEAVE MACRO                  BRUCE M. DANE\n.*       LAST UPDATED:                  06 NOV 1973\n.*       LAST UPDATED:                  24 NOV 1986         *HMD 11/86*\n.*       HOWARD M. DEAN - AMERICAN PRESIDENT LINES          *HMD 11/86*\n.*       MACRO GENERATES RE-ENTRANT CODE\n.*\n&NAME    LR    1,&R.13 .                LOAD RETURN ADDRESS\n         L     &R.13,4(0,&R.13) .       LOAD REGISTER POINTER\n         AIF   ('&RETCODE' EQ '').FREE1\n         AIF   ('&RETCODE'(1,1) NE '(').FREE1\n         ST    &RETCODE(1),16(,&R.13) . SAVE RETURN CODE IN R15 PLACE\n&RTYPE   SETB  1\n.FREE1   ANOP\n*        RETURN DYNAMIC SAVE AREA TO SYSTEM\n         FREEMAIN RU,LV=&FSIZE,A=(1),SP=&POOL ISSUE FREEMAIN\n.RETTEST AIF   (&RTYPE).R0\n         AIF   ('&RETCODE' EQ '').RETEQ0 * MESSAGE, ASSUME ZERO\n         AIF   (T'&RETCODE NE 'N').REGLD1 * RETURN NUMBER?\n         AIF   (&RETCODE EQ 0).R0       * RETCODE=0\n         AGO   .REGLA                   * LOAD ADDRESS ON RETCODE\n.RETEQ0  MNOTE 0,'*** WARNING *** RETCODE ASSUMED ZERO (0)'\n         AGO   .R0\n.REGLD1  L     &R.15,&RETCODE .         LOAD SAVED RETURN CODE\n         AGO   .BR14\n.REGLA   LA    &R.15,&RETCODE .         LOAD REQUESTED RETURN CODE\n         AGO   .BR14\n.R0      LM    14,12,12(13) .           RELOAD CALLERS' REGS\n         AIF   (&RTYPE).R00\n         SLR   15,15 .                  CLEAR RETURN CODE\n         AGO   .R00\n.BR14    LM    0,12,20(13) .            LOAD SAVED REGS\n         L     14,12(0,13) .            AND RETURN\n.R00     ANOP\n         BR    14 .                     RETURN TO CALLER\n         AGO   .ISNCHEK\n.ISNCHEK AIF   ('&ISN' EQ '').MEND\n         &ISN\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOLEAVO": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00(\\x00(\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    TSOLEAVE &SPLV=TSOLEN,&ISN=,&RETCODE=0\n         GBLC  &R\n         LCLB  &RTYPE\n.*       TSOLEAVE MACRO                  BRUCE M. DANE\n.*       LAST UPDATED:                  06 NOV 1973\n.*       MACRO GENERATES RE-ENTRANT CODE\n.*\n&NAME    LR    1,&R.13 .                LOAD RETURN ADDRESS\n         L     &R.13,4(0,&R.13) .       LOAD REGISTER POINTER\n         AIF   ('&RETCODE' EQ '').FREE1\n         AIF   ('&RETCODE'(1,1) NE '(').FREE1\n         ST    &RETCODE(1),16(,&R.13) . SAVE RETURN CODE IN R15 PLACE\n&RTYPE   SETB  1\n.FREE1   ANOP\n*        RETURN DYNAMIC SAVE AREA TO SYSTEM\n         L     0,&SPLV .                LOAD SP/LEN TO FREE\n         FREEMAIN R,LV=(0),A=(1) .      ISSUE FREEMAIN\n.RETTEST AIF   (&RTYPE).R0\n         AIF   ('&RETCODE' EQ '').RETEQ0 * MESSAGE, ASSUME ZERO\n         AIF   (T'&RETCODE NE 'N').REGLD1 * RETURN NUMBER?\n         AIF   (&RETCODE EQ 0).R0       * RETCODE=0\n         AGO   .REGLA                   * LOAD ADDRESS ON RETCODE\n.RETEQ0  MNOTE *,'*** WARNING *** RETCODE ASSUMED ZERO (0)'\n         AGO   .R0\n.REGLD1  L     &R.15,&RETCODE .         LOAD SAVED RETURN CODE\n         AGO   .BR14\n.REGLA   LA    &R.15,&RETCODE .         LOAD REQUESTED RETURN CODE\n         AGO   .BR14\n.R0      LM    14,12,12(13) .           RELOAD CALLERS' REGS\n         AIF   (&RTYPE).R00\n         XR    15,15 .                  CLEAR RETURN CODE\n.R00     BR    14 .                     RETURN TO CALLER\n         AGO   .ISNCHEK\n.BR14    LM    0,12,20(13) .            LOAD SAVED REGS\n         L     14,12(0,13) .            AND RETURN\n         BR    14 .                     RETURN TO CALLER\n.ISNCHEK AIF   ('&ISN' EQ '').MEND\n         &ISN\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNITDOC": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x01J\\x01J\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 330, "newlines": 330, "modlines": 0, "user": "HMDEAN"}, "text": "1\n                             M E M O R A N D U M\n\n                               April 24, 1986\n\n\n      TO:       Names deleted\n                to protect the\n                innocent\n\n      FROM:     dum, da, dum, dum\n\n      SUBJECT:  Change Request #7002 - DASD SUBPOOL ALLOCATION\n\n\n      LIS has opened Change Request #7002.  This change asks CIS to develop a\n      method which will allow users to allocate new datasets, on appropriate\n      DASD volumes, without specifying a volume serial ID.  For the sake of\n      convenience, I will refer to this change as \"SUBPOOL ALLOCATION\" for the\n      remainder of this discussion. The purpose of this document is to provide\n      background information explaining the need for SUBPOOL ALLOCATION, and\n      to define the technical requirements which must be satisfied.\n\n      The changes described in this memorandum are intended to be compatible\n      with existing JCL, TSO commands, and CLISTS.  TSO commands and CLISTS\n      that use dynamic, non-specific allocation will require no changes to\n      take advantage of SUBPOOL ALLOCATION benefits.  Batch users will need to\n      update their JCL before they can benefit from SUBPOOL ALLOCATION, but\n      JCL changes will not be mandatory.  Dataset creation under INTERACT will\n      be unaffected by this change.\n\n\n      BACKGROUND\n+     __________\n\n      MVS allocation design restricts non-specific, non-temporary dataset\n      allocation to \"storage\" volumes.  Today, only WORK volumes are mounted\n      \"storage\", all other DASD are mounted \"private\".  MVS will allocate new\n      datasets on \"private\" volumes only when specifically requested.\n\n      Excluding the WORK volumes, we have seven unique DASD subpools available\n      for user-allocated datasets.  Depending on the type of dataset to be\n      created, users must select a volume from one of the following subpools\n      when allocating new datasets:\n\n      -  INTERACT           (5 x 3350 volumes)\n\n      -  TSO                (5 x 3380 volumes)\n\n      -  SAS                (6 x 3380 volumes)\n\n      -  Production VSAM    (3 x 3380 volumes)\n\n      -  Production NONVSAM (3 x 3380 volumes)\n\n      -  User VSAM          (3 x 3380 volumes)\n\n      -  User NONVSAM       (6 x 3380 volumes)\n\n      I will refer to the above DASD subpools collectively as USER volumes\n      throughout the rest of this memorandum.\n\n1\n                                                                       page 2\n\n\n\n\n      PROBLEM STATEMENT\n+     _________________\n\n      With the current system, all non-temporary dataset allocations must be\n      specific (i.e., the user must request a specific volume).  TSO commands\n      and CLISTS may request dynamic, non-specific allocations; however, these\n      allocations are converted to specific requests by a system exit routine.\n      This exit forces all non-specific requests for an individual user to\n      allocate on a single volume; volume selection is based upon an arbitrary\n      attribute assigned to each user's TSO account.\n\n      The main problem with specific allocation is that requested volumes do\n      not always contain adequate free space.  When a requested volume lacks\n      sufficient space, dataset allocation fails and the job or transaction\n      aborts.  Typically, someone must update JCL or modify a CLIST before the\n      aborted task can be re-executed.  In other cases, usually involving\n      dynamic allocation or program-generated JCL, the only practical solution\n      is for CIS to create free space on the required volume by deleting or\n      relocating existing datasets.\n\n      Dependence upon specific allocation also complicates the process of\n      managing DASD capacity within the USER subpools.  Whenever additional\n      volumes are added to one of the USER subpools, JCL changes and/or TSO\n      account changes are required before new volumes can be used effectively.\n      Installing extra DASD does not automatically fix space problems.\n\n\n      RECOMMENDATION AND BENEFITS\n+     ___________________________\n\n      To resolve our current DASD space allocation problems, I recommend we\n      implement SUBPOOL ALLOCATION at the earliest possible date.\n\n      From a user's perspective, the major benefit of SUBPOOL ALLOCATION will\n      be simplified data management procedures and reduced abends because of\n      out-of-space conditions.  Users will no longer be required to request\n      specific volumes when creating new datasets.  Instead, they will request\n      space within a designated subpool (identified by the unitname parameter\n      they specify).  The operating system will search all volumes within the\n      requested subpool to locate a volume with enough free space.  Users will\n      not need to concern themselves with which volume is allocated, as long\n      as they follow the recommended practice of cataloging all DASD datasets.\n\n      Within CIS, the primary benefit will be more efficient DASD management\n      and more cost-effective use of our DASD resource.  DASD space problems\n      will be easier to resolve since users' JCL, CLISTS, etc. will not have\n      to be changed to make use of newly-installed volumes.  New USER volumes\n      can be used as soon as they are added to a subpool.  In addition, space\n      allocation across all volumes within each subpool will be more evenly\n      distributed; as a result, the percentage of total space allocated within\n      the subpools can be increased.\n\n1\n                                                                       page 3\n\n\n\n\n      IMPLEMENTATION STRATEGY\n+     _______________________\n\n      The following actions are required to implement SUBPOOL ALLOCATION:\n\n      -  Define new esoteric unitnames for each USER and WORK subpool.  Refer\n         to TABLE 1 for the proposed list of unitnames.\n\n      -  Modify the JES exit 6 routine:   Direct all non-specific allocations\n         to WORK volumes.  Refer to TABLE 2 for details.\n\n      -  Modify the IEFDB401 exit routine:  Direct all dynamic, non-specific\n         allocations to either TSO or WORK volumes.  Refer to TABLE 3 for\n         details.\n\n      -  Change the mount status of all USER DASD volumes from \"private\"\n         to \"storage\".\n\n      The disadvantage of this plan is that MVS operational and technical\n      support procedures will be more complicated.  Standard MVS procedures\n      for defining device subpools require that esoteric names be associated\n      with device addresses.  If we use standard MVS facilities to implement\n      SUBPOOL ALLOCATION, we will usually have to perform an EDTGEN (a subset\n      of an MVS system generation) and system re-IPL whenever we reconfigure\n      DASD volumes.\n\n      MVS user-modifications are available which will allow changes to device\n      subpool definitions without requiring a re-IPL.  If we choose to use\n      these modifications, the operational disadvantages of SUBPOOL ALLOCATION\n      will be insignificant.  *Censored* should decide whether it is better to\n      depend upon standard MVS features, or to install user-modifications when\n      implementing SUBPOOL ALLOCATION.\n\n\n      SUMMARY\n+     _______\n\n      Please evaluate the technical and operational feasibility of this\n      recommendation.  With your concurrence, the plan will be presented to\n      all SYNTEX Information Systems groups on Monday, April 28.  I will\n      develop a detailed implementation plan once user-community agreement\n      has been obtained.\n\n\n1\n                                  TABLE 1\n+                                 _______\n\n\n                     PROPOSED ESOTERIC DASD UNITNAMES\n+                    ________________________________\n\n\n         _____________________________________________________________\n        |                        |               |                    |\n        |     DASD SUBPOOL       |   UNITNAME    |   VOLUME SERIAL    |\n         _____________________________________________________________\n+       |                        |               |                    |\n        |                        |               |                    |\n        |  All volumes           |   SYSDA       |    Any volser      |\n        |                        |               |                    |\n        |  All volumes           |   DISK        |    Any volser      |\n        |                        |               |                    |\n        |  WORK                  |   WORK        |     SWORKn         |\n        |                        |               |                    |\n        |  INTERACT              |   INTUSER     |     INTERn         |\n        |                        |               |                    |\n        |  TSO                   |   TSOUSER     |     TSOnnn         |\n        |                        |               |                    |\n        |  SAS                   |   SASUSER     |     SAS8nn         |\n        |                        |               |                    |\n        |  NONVSAM production    |   DATAPROD    |     PRODnn         |\n        |                        |               |                    |\n        |  NONVSAM user          |   DATAUSER    |     SYX80n         |\n        |                        |               |                    |\n        |  VSAM production       |   VSAMPROD    |     SYX85n         |\n        |                        |               |                    |\n        |  VSAM user             |   VSAMUSER    |     SYX86n         |\n         _____________________________________________________________\n+       |                        |               |                    |\n\n\n\n      Note: To retain compatibility with existing SYNTEX JCL conventions, the\n+     _____\n      SYSDA and DISK esoteric subpools must continue to include all DASD.\n\n1\n                                  TABLE 2\n+                                 _______\n\n\n            JES Exit 6 DECISION MATRIX (JCL Validation Exit)\n+           ________________________________________________\n\n\n       _____________________________________________________________________\n      |                            |                |                       |\n      |   UNITNAME SPECIFICATION   | VOLSER REQUEST |    EXIT ACTION        |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n      |                            |                |                       |\n      | UNIT=SYSDA or UNIT=DISK or | Specific       | None Required         |\n      | UNIT=SYSSQ or UNIT=SYSALLDA|________________________________________|\n+                                                   |\n      |                            |                |                       |\n      |                            | Non-Specific   | Substitute UNIT=WORK  |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n      |                            |                |                       |\n      | Any generic DASD unitname  | Specific       | None Required         |\n      |                            |________________________________________|\n+                                                   |\n      |                            |                |                       |\n      |                            | Non-Specific   | Substitute UNIT=WORK  |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n      |                            |                |                       |\n      | Any esoteric DASD unitname | Specific       | None Required         |\n      | except: SYSDA, DISK, SYSSQ,|________________________________________|\n+                                                   |\n      | or SYSALLDA                |                |                       |\n      |                            | Non-Specific   | None Required         |\n       _____________________________________________________________________\n+     |                            |                |                       |\n\n\n\n\n      Note:  The SYSSQ and SYSALLDA unitnames are not used at SYNTEX, but they\n+     _____\n      must be included to maintain compatibility with IBM conventions.\n\n\n1\n                                  TABLE 3\n+                                 _______\n\n\n\n             IEFDB401 DECISION MATRIX (Dynamic Allocation Control Exit)\n+            __________________________________________________________\n\n\n       _____________________________________________________________________\n      |                            |                |                       |\n      |   UNITNAME SPECIFICATION   | VOLSER REQUEST |    EXIT ACTION        |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n      |                            |                |                       |\n      | None - implies that the    | Specific       | Substitute UNIT=DISK  |\n      | default unitname from      |________________________________________|\n+                                                   |\n      | SYS1.UADS will be used     |                |                       |\n      |                            | Non-Specific   | Substitute UNIT=WORK  |\n      |                            |                | or UNIT=TSOUSER       |\n      |                            |                | (refer to note below) |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n      |                            |                |                       |\n      | UNIT=SYSDA or UNIT=DISK or | Specific       | None Required         |\n      | UNIT=SYSSQ or UNIT=SYSALLDA|________________________________________|\n+                                                   |\n      |                            |                |                       |\n      |                            | Non-Specific   | Substitute UNIT=WORK  |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n      |                            |                |                       |\n      | Any generic DASD unitname  | Specific       | None Required         |\n      |                            |________________________________________|\n+                                                   |\n      |                            |                |                       |\n      |                            | Non-Specific   | Substitute UNIT=WORK  |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n      |                            |                |                       |\n      | Any esoteric DASD unitname | Specific       | None Required         |\n      | except: SYSDA, DISK, SYSSQ,|________________________________________|\n+                                                   |\n      | or SYSALLDA                |                |                       |\n      |                            | Non-Specific   | None Required         |\n      |_____________________________________________________________________|\n+     |                            |                |                       |\n\n\n\n      Note:  For non-specific allocations using the default unitname from\n+     _____\n      SYS1.UADS, the unitname substituted will depend upon the dataset name.\n      UNIT=TSOUSER will be used, unless the dataset name matches one from the\n      following exception list:\n\n                    userid.ADMPRINT.REQUEST.#nnnnn\n                    userid.GDDM.REQUEST.#nnnnn\n                    userid.IDTFLOG.LIST\n                    userid.JCLCHECK.xxxxxxxx\n                    userid.IDTFLOG.LIST\n                    userid.SPFLOGn.LIST\n                    userid.WORK.SELJOB\n                    userid.WORK.JLSCRN\n                    userid.WORK.DOCOUT\n\n      If the dataset name specified matches one of the above, IEFDB401 will\n      substitute UNIT=WORK.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNTIL": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00U\\x00U\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         UNTIL &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16)\n         GBLB  &UNORSW#                       'UNTILOR' INDICATOR\n         LCLC  &LOC\n         LCLC  &LBLYSS\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n.*\n         SEQCK UNTIL\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         SPACE\n         AIF   (&GDOLVL EQ 0).ER1\n         AIF   (&GDOIFST(&GDOLVL) EQ &GIFLVL).L10\n         MNOTE 8,'ENDIF STATEMENT(S) MISSING WITHIN DO LOOP'\n.L10     ANOP\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)-1\n&LOC     SETC  'ZLDO'.'&GDOSTK(&GDOLVL)'\n.*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&LOC\n.GENOK   ANOP                                    GEN IS DONE\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)+2\n.*\n.**********************************************************************\n.*       ANALIZE 'OR' CONDITION                                       *\n.**********************************************************************\n.*\n         AIF   (&UNORSW# EQ 0).CODE020        IF NO UNTILOR,SKIP NEXT\n&LBLYSS  SETC  'ZLDO&GDOSTK(&GDOLVL)'          TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                LOOP END\n.*\n.CODE020 ANOP\n&UNORSW# SETB  0\n&GDOLVL  SETA  &GDOLVL-1\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'UNTIL NOT PRECEDED BY DO'\n&UNORSW# SETB  0\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNTILOR": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00N\\x00N\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         UNTILOR &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GDOSTK(16)\n         GBLB  &UNORSW#                       'UNTILOR' INDICATOR\n         GBLC  &GTYPE\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n         LCLB  &ANDSW\n         LCLC  &ORLOC\n         LCLA  &WKA1\n         LCLC  &LOC\n.*\n         SEQCK UNTILOR\n.*\n         SPACE\n         AIF   (&GDOLVL EQ 0).ER1\n&WKA1    SETA  &GDOSTK(&GDOLVL)+1\n&LOC     SETC  'ZLDO'.'&WKA1'\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&ORLOC   SETC  'ZLAD&SYSNDX'\n&ANDSW   SETB  0                                 ASSUME - NO *AND*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n&GTYPE   SETC  'UNTIL'                           CHANGE FLAG FOR GENC\n&ANDSW   SETB  1                                 INDICATE - *AND* FOUND\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&ORLOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&ORLOC\n.GENOK   ANOP                                    GEN IS DONE\n&GTYPE   SETC  'UNTILOR'                         RESTORE FLAG FOR GENC\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n         AIF   (&ANDSW EQ 0).CODE040             IS THERE *AND* PARM ?\n&ORLOC   DS    0H                                CONDITIONS ARE FALSE\n.CODE040 ANOP\n.*\n&UNORSW# SETB  1\n.*\n         SPACE\n.*\n         MEXIT\n.ER1     MNOTE 8,'UNTILOR NOT PRECEDED BY DO'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XABSM": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&LAB     XABSM &MODE=24\n         AIF   ('&LAB' EQ '').NOLAB CHECK FOR LABEL\n&LAB     DS    0H                  MVS/XA SET MODE MACRO\n.NOLAB   ANOP\n         AIF   ('&MODE' EQ '31').XAON\n         AIF   ('&MODE' EQ '24').XAOFF\n         MNOTE 8,'MODE &MODE INVALID'\n.XAON    ANOP                      GO TO 31 BIT MODE\n         CNOP  2,4                 FORCE FULL WORD ALIGNMENT\n         LA    R1,*+14 .              POINT TO AMODE = 31 CODE\n         O     R1,*+6 .               TURN ON AMODE = 31 BIT\n         BSM   0,R1 .                 BRANCH TO AMODE = 31 CODE\n         DC    X'80000000'         AMODE = 31 BIT\n         AGO   .MACEND\n.XAOFF   LA    R1,*+6 .               POINT TO AMODE = 24 CODE\n         BSM   0,R1 .                 BRANCH TO AMODE = 24 CODE\n.MACEND  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERDOC": {"ttr": 4873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00&\\x00&\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "HMDEAN"}, "text": "XA------------------------X F E R D U M P-----------------------------XA\nXA      S V C    D U M P    T R A N S F E R     P R O C E D U R E     XA\nXA         M V S    E X T E N D E D    A R C H I T E C T U R E        XA\n*----------------------------------------------------------------------*\nImplemented:  06/22/85 - Howard M. Dean\n    Updated:  11/17/85 - Howard M. Dean\n\nThe XFERDUMP procedure will transfer the MVS/XA SVC dumps from\ndisk to tape and create an index entry in the dump index\ndataset, \"SYS3.XFER.DATA\".\n\nThe name of the dataset on tape will be \"SYS.TAPExx\" where \"xx\" is\neither 00, 01, 02, or 03, corresponding to the associated\n\"SYS1.DUMPxx\" dataset name. To find the volume containing the current\ntape, use the \"%XIX\" clist to browse the dump index dataset.  The file\nnumber of each dump on tape is one higher than the number of the dump\ndataset. For example, \"SYS1.DUMP00\" on tape 009999 would be named\n\"SYS.TAPE00\" and reside on file 1.\n\nIt is important that the cataloged procedure \"XFERDUMP\" be used to\ntransfer dump datasets to tape because the internally called CLISTS\nwill update the dump index dataset (\"SYS3.XFER.DATA\"). The listing\nfrom the run of this procedure will, in its job message log, also have\nthe dump titles and volume serial number of the tape in an easily\nreadable format. The MASTER TRACE table will be printed along with\na SUMMARY dump.\n\nTo transfer full dump datasets to tape (I would wait for a least\nTHREE datasets to fill), enter the following SOF command at the\nsystem console:\n\n    > /XFERDUMP\n\nIf, for some reason, SOF is not available, the dumps can be transfered\nby entering:\n\n    > S SYSJOB,N=XFERDUMP\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFERINST": {"ttr": 4875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "HMDEAN"}, "text": "**** INSTALLATION OF XFER DUMP INDEX UTILITY ****\n\n1)  ASSEMBLE 'XFERUTIL'\n2)  ASSEMBLE 'XFERVOL'\n3)  LINK THEM TOGETHER AS 'XFERUTIL' AND PLACE IN 'LINKLIST' DATASET\n4)  ASSEMBLER AND LINK 'XFERWTO' AND PLACE IN LINKLIST DATASET\n5)  PLACE 'XFER1' AND 'XFER2' CLISTS IN YOUR SYSTEM CLIST LIBRARY\n6)  PLACE 'XIX' 'JULDATE', 'B',' AND 'E', CLISTS IN YOUR\n    SYSTEM CLIST LIBRARY\n7)  ALLOCATE A PARTITIONED DATASET (80 BYTE RECORDS)\n8)  EDIT 'MAKEDAY' CLIST FOR CORRECT DATASET NAME AS ALLOCATED ABOVE\n9)  RUN 'MAKEDAY' TO INITIALIZE THE DAYS OF THE WEEK\n10) EDIT THE 'XFERJOB' JOBSTREAM AND EDIT FOR YOUR INSTALLTAION.\n    ADD DUMP DATASET NAMES IF YOU HAVE MORE THAN FOUR DUMP DATASETS.\n11) PLACE THE EDITED 'XFERJOB' IN A PRODUCTION LIBRARY\n12) MAKE SURE THE STEP THAT INVOKES THE TSO 'TMP' HAS THE CORRECT\n    CLIST LIBRARIES ALLOCATED\n13) FILL UP YOUR DUMP DATASETS AND TEST THE RUN THE PROGRAM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERJOB": {"ttr": 4877, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x89\\x00\\x89\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 137, "newlines": 137, "modlines": 0, "user": "HMDEAN"}, "text": "//DUMP$XFR JOB (U4757,U4757,000000),'MINISTRY OF SYSTEMS',\n//     CLASS=C,\n//     MSGCLASS=A\n/*NOTIFY $UHMD\n/*MAIL=HMD\n/*JOBPARM L=999,ROOM=A539\n//*********************************************************************\n//***                       M V X / X A                              **\n//***                     X F E R D U M P                            **\n//***                                                                **\n//***  THIS PROCEDURE WILL TRANSFER ALL THE SYS1.DUMPXX DATASETS     **\n//***  ON A PARTICULAR SYSTEM TO TAPE. THE DUMP TITLES AND TAPE      **\n//***  VOLUME WILL BE RECORED IN AN INDEX DATA SET FOR LATER         **\n//***  PERUSAL UNDER ISPF. THE TITLES ARE STORED IN DATASET          **\n//***  'SYS3.XFER.DATA' AND THE ENTRIES CAN BE BROWSED USING         **\n//***  THE 'XIX' CLIST UNDER TSO.                                    **\n//***                                                                **\n//***  THE FOLLOWING SERVICES ARE PROVIDED:                          **\n//***                                                                **\n//***  (1) TRANSFER 'SYS1.DUMPXX' DATASETS TO TAPE                   **\n//***  (2) UPDATE DUMP TRANFER INDEX ('SYS3.XFER.DATA')              **\n//***  (3) WRITE TAPE VOLUME SERIAL TO OPERATOR/PROGRAMMER           **\n//***  (4) WRITE DUMP TITLES TO OPERATOR/PROGRAMMER                  **\n//***  (5) PRINT THE MASTER TRACE TABLE AND DUMP SUMMARY             **\n//***                                                                **\n//***  UPDATED FOR MVS/XA VERSION 2.1.2                              **\n//***  INSTALLED 11/13/85 - HOWARD M. DEAN                           **\n//*********************************************************************\n//XFERDMP0 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP00,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500))\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS3.PARMLIB(DUMPXFR1),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=SYS3.XFER.DATA,DISP=OLD\n//*\n//XFERDMP1 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP01,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500))\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS3.PARMLIB(DUMPXFR1),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=SYS3.XFER.DATA,DISP=OLD\n//*\n//XFERDMP2 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP02,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500))\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS3.PARMLIB(DUMPXFR1),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=SYS3.XFER.DATA,DISP=OLD\n//*\n//XFERDMP3 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP03,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500))\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS3.PARMLIB(DUMPXFR1),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=SYS3.XFER.DATA,DISP=OLD\n//*\n//INDEX1    EXEC PGM=IKJEFT01,PARM='%XFER1',REGION=512M\n//SYSPROC   DD   DSNAME=SYS3.CLIST,DISP=SHR\n//SYSTSPRT  DD   DSNAME=SYS3.XFER.TEMP,DISP=(,CATLG,DELETE),\n//   UNIT=SYSDA,\n//   SPACE=(TRK,(15,5),RLSE),\n//   DCB=(BLKSIZE=800,LRECL=80,RECFM=FB)\n//SYSTSIN   DD   DUMMY\n//SYSUT2    DD   DSNAME=SYS.TAPE00,\n//   DISP=(,PASS,DELETE),\n//   VOL=(,RETAIN),\n//   DCB=(BLKSIZE=4104,LRECL=4104,RECFM=F),\n//   UNIT=3480,LABEL=(1,SL,RETPD=0)\n//SERIAL    DD   DSN=SYS3.XFER.DATA,DISP=OLD\n//*\n//INDEX2   EXEC PGM=IKJEFT01,PARM='%XFER2',REGION=1024K\n//SYSPROC  DD   DSNAME=SYS3.CLIST,DISP=SHR\n//SYSTSPRT DD   SYSOUT=*\n//SYSTSIN  DD   DUMMY\n//TEMP     DD   DSN=SYS3.XFER.TEMP,DISP=(OLD,DELETE)\n//INDEX    DD   DSN=SYS3.XFER.DATA,DISP=OLD\n//*\n//*\n//TRANDMP0  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP00,DISP=SHR\n//SYSUT2    DD   DSNAME=SYS.TAPE00,DISP=(NEW,PASS),\n//    UNIT=3480,LABEL=(1,SL,RETPD=15),\n//    VOL=(,RETAIN,REF=*.INDEX1.SYSUT2)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS3.PARMLIB(DUMPXFR2),DISP=SHR\n//*\n//TRANDMP1  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP01,DISP=SHR\n//SYSUT2    DD   DSNAME=SYS.TAPE01,DISP=(NEW,PASS),\n//    UNIT=3480,LABEL=(2,SL,RETPD=15),\n//    VOL=(,RETAIN,REF=*.TRANDMP0.SYSUT2)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS3.PARMLIB(DUMPXFR2),DISP=SHR\n//*\n//TRANDMP2  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP02,DISP=SHR\n//SYSUT2    DD   DSNAME=SYS.TAPE02,DISP=(NEW,PASS),\n//    UNIT=3480,LABEL=(3,SL,RETPD=15),\n//    VOL=(,RETAIN,REF=*.TRANDMP0.SYSUT2)\n//SYSTSIN   DD   DUMMY\n//SYSTSPRT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS3.PARMLIB(DUMPXFR2),DISP=SHR\n//*\n//TRANDMP3  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP03,DISP=SHR\n//SYSUT2    DD   DSNAME=SYS.TAPE03,DISP=(NEW,PASS),\n//    UNIT=3480,LABEL=(4,SL,RETPD=15),\n//    VOL=(,RETAIN,REF=*.TRANDMP0.SYSUT2)\n//SYSTSIN   DD   DUMMY\n//SYSTSPRT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS3.PARMLIB(DUMPXFR2),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERUTIL": {"ttr": 4880, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00:\\x00:\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "HMDEAN"}, "text": "XFER     TITLE 'XFER TAPE VOLUME SERIAL NUMBER TO SYSTSOUT'\n         EJECT\nXFERUTIL TSOENTER REGS=YES,PL=(CPPL,IO,CSCAN),WORK=WORKSIZE,SP=1\n         MVC   DDNAME,=C'SYSUT2  '\n         CALL  XFERVOL,(DDNAME),VL\n         LTR   15,15\n         BNZ   END\n         MVC   VOLUME,DDNAME\n         XC    IOPLPTG(16),IOPLPTG\n         LA    R1,TSOECB              GET ECB ADDRESS\n         ST    R1,IOPLECB             SAVE IN IOPL\n         XC    TSOECB,TSOECB          CLEAR ECB\n         PUTLINE PARM=PTPB,OUTPUT=(BUFFER,TERM,SINGLE,INFOR),          X\n               MF=(E,IOPL)\n**\n**  END OF PROGRAM\n**\nEND      TSOLEAVE ISN=LTORG\n         SPACE 2\n***\n***   CONSTANTS\n***\n*\n* SPACES TO TRANSLATE FROM LOWER CASE TO UPPER CASE\n*\nDDNAME   DC    CL8' '\nBUFFER   DC    A(1),A(MSGBUFF),A(0)\nMSGBUFF  DC    H'36',H'0'\n         DC    C'XFER TAPE VOL=SER = '\nVOLUME   DC    CL6' '\n         DC    C'                   '\n*\n         EJECT\n***\n***  DYNAMIC STORAGE AREA\n***\nTSODSECT DSECT          RESUME USER DSECT\n         ORG  TSOUSER\nIOPLPTG  DS   4F\nCSOUT    DS   3F\nPTPB     PUTLINE MF=L\nCMDLEN   DS   F\nCOMMAND  DS   CL127\nALIGN    DS   F\nTJIDLIST DS   0CL12\n         DS   3A\nTJIDTEST DS   F\nINPUT    DS   CL127\nWORKSIZE EQU  *-TSOUSER\n         EJECT\n         IKJPGPB\n         EJECT\n         IKJCSOA\n         EJECT\n         IKJPSCB\n         EJECT\n         CVT   LIST=YES,DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERVOL": {"ttr": 4882, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x82\\x00\\x82\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 130, "newlines": 130, "modlines": 0, "user": "HMDEAN"}, "text": "XFER     TITLE 'XFERVOL - GETS XFER TAPE VOLUME NUMBER'\n***********************************************************************\n*                                                                     *\n*                        XFERVOL                                      *\n*                                                                     *\n*                XFER SDUMPS INDEX SUPPORT                            *\n*                                                                     *\n* ABSTRACT: GETS VOLSER OF XFER TAPE. TAPE DD-NAME PASSED TO PROGRAM  *\n*                                                                     *\n* INPUT: R1 -> A(PARM FIELD)                                          *\n*              PARM FIELD = XFER TAPE DD-NAME                         *\n*                                                                     *\n* OUTPUT:             : XFER TAPE VOL=SER=XXXXXX                      *\n*                                                                     *\n* RETURN CODES:R15=0 - SUCCESSFUL EXECUTION OF PROGRAMM               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*  REGISTERS:   15 - ENTRY ADDRESS & RETURN CODE                      *\n*               14 - RETURN ADDRESS                                   *\n*               13 - SAVE AREA ADDRESS                                *\n*               12 - CSECT BASE                                       *\n*               11 - TIOT DSECT BASE                                  *\n*               10 - UCB DSECT BASE                                   *\n*                9 -                                                  *\n*                8 -                                                  *\n*                7 -                                                  *\n*                6 - WORK REG                                         *\n*                5 -                                                  *\n*                4 - WORK REG                                         *\n*                3 - WORK REG                                         *\n*                2 - WORK REG                                         *\n*                1 - LIST PARAM ADDRESS                               *\n*                0 -                                                  *\n***********************************************************************\n         EJECT\n***********************************************************************\n*               XFERVOL CODE                                          *\n***********************************************************************\n         SPACE 3\n*                            ******************************************\n*                            *     DSECTS  AREAS.                     *\n*                            ******************************************\n         SPACE 2\nTIODSECT DSECT\n         IEFTIOT1                 MAP OF TIOT\n         EJECT\n         IEFUCBOB LIST=YES        MAP OF UCB\n         EJECT\n*                            ******************************************\n*                            *   XFERVOL CSECT INITIALIZATION.        *\n*                            ******************************************\n         SPACE 2\n         INIT# XFERVOL,BASEREG=(12),                                   X\n               EXEC=MAINLINE,REL=02.01.00,                             X\n               ID=COPYRIGHT_(C)_HOWARD_M._DEAN_1985,                   X\n               EXLIST=YES\n         SPACE\n         USING UCBCMSEG,RA        UCB DSECT BASE\n         USING TIOT1,RB           TIOT DSECT BASE\n         EJECT\n*                            ******************************************\n*                            *    WORK FIELDS.                        *\n*                            ******************************************\n         SPACE\nXFDDNAME DC    CL8' '             INPUT DD-NAME\nTESTNAME DC    CL8' '             INPUT DD-NAME\nADDRTIOT DC    A(0)               TIOT ADDRESS\nSAVEIN   DC    A(0)\n*\nTVOLSER  DC    CL6' '             XFER TAPE VOL=SER\n*---------------------------------------------------------------------*\n*        PROGRAM MESSAGES                                             *\n*---------------------------------------------------------------------*\n         SPACE\nWTO001   WTO   'YS-001 DD-NAME NOT FOUND IN TIOT    ',ROUTCDE=(2,11),  X\n               MF=L\n         EJECT\n*                            ******************************************\n*                            * MAINLINE- MAIN ROUTINE OF THE XFERVOL  *\n*                            ******************************************\n         SPACE 2\n         ENTRE# MAINLINE\n         SPACE\n***********************************************************************\n*        GET XFER TAPE DD-NAME FROM INPUT PARM FIELD                  *\n***********************************************************************\n         SPACE\n         L     R4,0(R1)           R3=ADDRESS OF PARM FIELD\n         ST    R4,SAVEIN          SAVE INPUT PARM ADDRESS\n         MVC   XFDDNAME,0(R4)\n         SPACE\n*---------------------------------------------------------------------*\n*        GET TIOT AND THEN UCB ADDRESS FOR OUR DD-NAME                *\n*---------------------------------------------------------------------*\n         SPACE\n         EXTRACT ADDRTIOT,'S',FIELDS=(TIOT)  LOAD TIOT ADD.IN BASE REG\n         L     RB,ADDRTIOT\n         LA    RB,TIOENTRY       ADDRESS OF FIRST DD-ENTRY\n         USING TIOENTRY,RB\n         DOWHILE XFDDNAME,NE,TIOEDDNM,CLC\n            IF TIOELNGH,EQ,X'00',CLI\n               WTO   MF=(E,WTO001)      DDNAME NOT FOUND\n               IEXIT# RC=12\n            ENDIF\n            SR   R3,R3\n            IC   R3,TIOELNGH\n            LA   RB,0(R3,RB)\n         ENDDO\n         ICM   RA,B'0111',TIOEFSRT    LOAD UCB ADDRESS INTO BASE REG\n         SPACE\n***********************************************************************\n*        GET VOL=SER FROM UCB AND RETURN TO CALLER                    *\n***********************************************************************\n         SPACE\n         L     R4,SAVEIN\n         MVC   0(8,R4),=CL8' '\n         MVC   0(8,R4),UCBVOLI\n         SPACE\n         EXIT# RC=0\n         EJECT\n*                            ******************************************\n*                            *     LITERALS                           *\n*                            ******************************************\n         SPACE\n         LTORG\n         SPACE 3\n         END#  XFERVOL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERWTO": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "HMDEAN"}, "text": "WTO      TITLE 'SEND SYSTSPRT FROM BATCH TMP TO OPERATOR'\nXFERWTO  CSECT\n         SETREG 12,CODE=RENT\n         OPEN (SYSIN,INPUT)\n         MVI  BUFFER,C'*'\n         MVC  BUFFER+1(79),BUFFER\n         WTO  MF=(E,WTOLIST)\nGETIT    GET  SYSIN,BUFFER\n         CLC  =C'READY',BUFFER      IS IT READY?\n         BE   GETIT                 BYPASS THIS RECORD\n         CLC  =C'END',BUFFER        IS IT END?\n         BE   GETIT                 BYPASS THIS RECORD\n         WTO  MF=(E,WTOLIST)\n         B    GETIT\nEOFIN    DS   0H                    END OF FILE/SYSIN\n         CLOSE SYSIN\n         MVI  BUFFER,C'*'\n         MVC  BUFFER+1(79),BUFFER\n         WTO  MF=(E,WTOLIST)\n         EOJ  RC=0\n         EJECT\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,BLKSIZE=800,RECFM=FB,    X\n               BUFNO=2,MACRF=GM,EODAD=EOFIN\n         EJECT\nWTOLIST  WTO  'A234567890B234567890C234567890D234567890E234567890F23456X\n               7890G234567890H234567890',                              X\n               ROUTCDE=(2,11),DESC=(4,6),MF=L\nBUFFER   EQU   WTOLIST+4\n         END   XFERWTO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFER1": {"ttr": 5125, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x009\\x009\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "HMDEAN"}, "text": "PROC 0 DEBUG\nGLOBAL MONTH DAY YEAR\nGLOBAL JULIAN SHOP WEEKDAY\nGLOBAL CDEBUG\n/*\n/* >>> COPYRIGHT (C) 1985, 1986 HOWARD M. DEAN\n/* >>> INSTALLED 06/25/85 - HOWARD M. DEAN\n/* >>> UPDATED   06/25/85 - HOWARD M. DEAN\n/*\n/**\n/** CHECK FOR PROPER ENVIRONMENT\n/**\nIF  &SYSENV EQ FORE THEN -\n    DO\n      WRITE *-------------------------------------------*\n      WRITE *  THIS CLIST CAN ONLY BE EXECUTED IN THE   *\n      WRITE *  BACKGROUND AS PART OF THE XFERDUMP PROC  *\n      WRITE *-------------------------------------------*\n      CONTROL FLUSH\n      EXIT CODE(99)\n    END\n/**\nIF &DEBUG EQ DEBUG THEN -\n   DO\n     SET &CDEBUG EQ &STR(YES)\n     CONTROL MSG LIST CONLIST SYMLIST PROMPT FLUSH\n   END\nELSE -\n   DO\n     SET &CDEBUG EQ &STR(NO)\n     CONTROL MAIN NOMSG NOPROMPT NOLIST\n   END\n/**\n/** CHECK FOR PROPER ENVIRONMENT\n/**\nIF  &SYSENV EQ FORE THEN -\n    DO\n      WRITE *-------------------------------------------*\n      WRITE *  THIS CLIST CAN ONLY BE EXECUTED IN THE   *\n      WRITE *  BACKGROUND AS PART OF THE XFERDUMP PROC  *\n      WRITE *-------------------------------------------*\n      CONTROL FLUSH\n      EXIT CODE(99)\n    END\nOPENFILE SYSUT2 OUTPUT\nSET &SYSUT2 = &STR(INITIALIZE TAPE VOLUME)\nPUTFILE  SYSUT2\nCLOSFILE SYSUT2\nCONTROL MSG\n%JULDATE DATE(SYSDATE)\nWRITE %%------------------------------------------------%%\nWRITE %% TODAY IS &WEEKDAY &MONTH &DAY &YEAR - &JULIAN\nWRITE %% THE CURRENT TIME OF DAY IS &SYSTIME\nWRITE %%------------------------------------------------%%\nXFERUTIL\nSYSDSCAN 00:02\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFER2": {"ttr": 5127, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\x9d\\x00\\x9d\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 157, "newlines": 157, "modlines": 0, "user": "HMDEAN"}, "text": "PROC 0 DEBUG IX('SYS3.XFER.DATA')\nIF &DEBUG EQ DEBUG THEN CONTROL LIST CONLIST SYMLIST NOFLUSH MSG PROMPT\n   ELSE CONTROL NOFLUSH NOMSG NOPROMPT NOLIST\n/*\n/* >>> COPYRIGHT (C) 1985, 1986 HOWARD M. DEAN\n/* >>> INSTALLED 06/25/85 - HOWARD M. DEAN\n/* >>> UPDATED   06/25/85 - HOWARD M. DEAN\n/*\n/**\n/** CHECK FOR PROPER ENVIRONMENT\n/**\nIF  &SYSENV EQ FORE THEN -\n    DO\n      WRITE *-------------------------------------------*\n      WRITE *  THIS CLIST CAN ONLY BE EXECUTED IN THE   *\n      WRITE *  BACKGROUND AS PART OF THE XFERDUMP PROC  *\n      WRITE *-------------------------------------------*\n      CONTROL FLUSH\n      EXIT CODE(99)\n    END\n/**\n/** SET UP VARIABLES\n/**\nSET &SYSD2 EQ &SUBSTR(4:5,&STR(&SYSDATE))\nSET &SW     EQ 0\nSET &CALL   EQ &STR(#)\nSET &NAME   EQ &STR(')&IX(DAY&SYSD2)&STR(')\nSET &PREFIX EQ &STR(SYS3)\nSET &HNAME  EQ &STR(')&PREFIX..TEMP.DATA&STR(')\nSET &INAME  EQ &STR(')&PREFIX..WTO.DATA&STR(')\n/**\n/**  SET UP FILES\n/**\nDEL &HNAME PURGE\nFREE  FI(HOLD INDEX)\nALLOC FI(INDEX) DA(&NAME)  SHR\nALLOC FI(HOLD)  DA(&HNAME) NEW CATALOG -\n      SP(100,10) TRACKS RELEASE UNIT(SYSDA)\n/**\n/**  OPEN FILES AND PRIME INPUT\n/**\nOPENFILE INDEX INPUT\nOPENFILE TEMP  INPUT               /* ALLOCATED IN XFERDUMP PROC */\nOPENFILE HOLD  OUTPUT\nGETFILE  INDEX\n/**\n/**  SET UP ERROR HANDLING ROUTINE\n/**\nERROR -\n   DO\n     IF &LASTCC = 400 THEN SET &SW EQ 1\n     RETURN\n   END\n/**\n/** BEGIN PROCESSING\n/**\nIF &SUBSTR(1:18,&INDEX) EQ &STR(DUMPS FOR &SYSDATE) THEN -\n   DO\n     SET &SW   EQ 0\n     SET &HOLD EQ &NSTR(&INDEX)       /* DON'T DROP HEADER RECORD */\n     PUTFILE HOLD\n     DO  WHILE &SW EQ 0               /* READ TO END OF FILE */\n       GETFILE INDEX                  /* AND WRITE TO HOLD FILE */\n       IF &SW EQ 0 THEN -\n         DO\n           SET &HOLD EQ &NSTR(&INDEX)\n           PUTFILE HOLD\n         END\n     END\n     SET &HOLD = &STR(*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-)\n     SET &HOLD = &HOLD&STR(-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*)\n     PUTFILE HOLD                     /* PUT OUT A SEPERATOR LINE */\n     SET &HOLD = &STR(DUMPS FOR &SYSDATE)\n     PUTFILE HOLD\n     SET &SW EQ 0\n       DO WHILE &SW EQ 0\n         GETFILE TEMP\n         IF &SW EQ 0 THEN -\n           DO\n             SET &HOLD EQ &NSTR(&TEMP)\n             IF  &SUBSTR(1:3,&HOLD) EQ &STR(END)   THEN SET &SW EQ 1\n             IF  &SUBSTR(1:5,&HOLD) EQ &STR(READY) THEN SET &SW EQ 1\n             IF  &SW EQ 0 THEN PUTFILE HOLD\n           END\n       END\n   END\n/*\nELSE -\n   DO\n     SET &HOLD EQ &STR(DUMPS FOR &SYSDATE)\n     PUTFILE  HOLD\n     SET &SW EQ 0\n     DO WHILE &SW EQ 0\n       GETFILE TEMP\n       IF &SW EQ 0 THEN -\n         DO\n          SET &HOLD EQ &NSTR(&TEMP)\n          IF  &SUBSTR(1:3,&HOLD) EQ &STR(END)   THEN SET &SW EQ 1\n          IF  &SUBSTR(1:5,&HOLD) EQ &STR(READY) THEN SET &SW EQ 1\n          IF  &SW EQ 0 THEN PUTFILE HOLD\n         END\n     END\n   END\n/**\n/** UPDATE THE PDS\n/**\nCLOSFILE TEMP\nCLOSFILE INDEX\nCLOSFILE HOLD\n/*\nOPENFILE INDEX OUTPUT\nOPENFILE HOLD  INPUT\nSET &SW EQ 0\nDO WHILE &SW EQ 0\n   GETFILE HOLD\n   IF &SW EQ 0 THEN -\n     DO\n       SET &INDEX EQ &NSTR(&HOLD)\n       PUTFILE INDEX\n     END\nEND\n/*\nCLOSFILE INDEX\nCLOSFILE HOLD\n/**\n/** WRITE TO THE OPERATOR\n/**\nDEL &INAME PURGE\nFREE  FI(SYSIN)\nALLOC FI(SYSIN) DA(&INAME) NEW CATALOG -\n      SP(100,10) TRACKS RELEASE UNIT(SYSDA)\n/**\nCLOSFILE TEMP                    /* RESET TO BEGINNING OF FILE */\nOPENFILE TEMP  INPUT\nOPENFILE SYSIN OUTPUT\n/**\nSET &SW EQ 0\nDO WHILE &SW EQ 0\n  GETFILE TEMP\n  IF &SW EQ 0 THEN -\n    DO\n      SET &SYSIN EQ &NSTR(&TEMP)\n      IF  &SUBSTR(1:3,&SYSIN) EQ &STR(END)   THEN SET &SW EQ 1\n      IF  &SUBSTR(1:5,&SYSIN) EQ &STR(READY) THEN SET &SW EQ 1\n      IF  &SW EQ 0 THEN PUTFILE SYSIN\n    END\nEND\nCLOSFILE TEMP\nCLOSFILE SYSIN\n&CALL XFERWTO\n/**\n/** CLEAN UP AND EXIT\n/**\nDEL  &HNAME PURGE\nDEL  &INAME PURGE\nFREE FI(HOLD INDEX SYSIN)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XIX": {"ttr": 5131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00\\xd8\\x00\\xd8\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "HMDEAN"}, "text": "PROC 0 D() TODAY YESTERDAY TOMORROW DEBUG\nGLOBAL MONTH DAY YEAR\nGLOBAL JULIAN SHOP WEEKDAY\nGLOBAL CDEBUG\n/*>>> COPYRIGHT (C) 1985, 1986 HOWARD M. DEAN\n/*>>> INSTALLED 06/27/85 - HOWARD M. DEAN\n/*>>> UPDATED   07/01/85 - HOWARD M. DEAN\n/*\n/******************************************************/\n/*    CLIST TO INQUIRE INTO THE DUMP INDEX DATASET    */\n/******************************************************/\n/*\n/* )STARTHELP\n/* )F FUNCTION  -\n/*    THE XIX COMMAND IS A CLIST USED TO INQUIRE INTO THE SYSTEM\n/*    DUMP INDEX DATASET. THE DUMP TITLES ASSOCIATED WITH A TAPE\n/*    VOLUME ARE LISTED ALONG WITH THE TAPE VOLUME SERIAL\n/*    NUMBER.\n/*\n/*    THE DUMP DATASET INDEX, \"SYS3.XFER.DATA\", IS A WRAP-AROUND\n/*    PARTITIONED DATASET. EACH MEMBER IS ASSOCIATED WITH A DAY\n/*    OF THE MONTH.  ONE MEMBER  MAY CONTAIN AN INDEX OF\n/*    MULTIPLE DUMP TAPES FOR A PARTICULAR DAY. THE PREVIOUS\n/*    MONTH'S INDEX MEMBER IS OVERLAYED BY THE CURRENT DUMP TAPE\n/*    INDEX MEMBER.\n/*\n/*    THIS CLIST WORKS IN CONJUNCTION WITH THE \"XFERDUMP\" CATALOGED\n/*    PROCEDURE. THAT PROCEDURE UPDATES THE INDEX DATA SET BASED ON\n/*    THE CURRENT DAY OF THE WEEK.\n/*\n/*    IF THE PROPER OPERANDS ARE ENTERED, ISPF \"BROWSE\" SERVICES ARE\n/*    INVOKED AGAINST THE SPECIFIED DUMP INDEX MEMBER.\n/*\n/* )X SYNTAX -  %XIX D(XX)/TODAY/YESTERDAY/TOMORROW\n/*\n/*    REQUIRED - NONE\n/*    ALIAS    - NONE\n/*    DEFAULTS - TODAY\n/*\n/*    ALL OPERANDS ARE KEYWORDS\n/*    ONLY ONE OPERAND MAY BE SPECIFIED, BUT NONE ARE REQUIRED\n/*\n/*    UPON ENTERING \"BROWSE\", YOU MAY SEE THE CHARACTERS \"PAD\"\n/*    FOLLOWED BY 77 DOTS. THIS MEANS THAT THERE HAS NEVER BEEN\n/*    A DUMP TRANSFERED ON THAT PARTICULAR DAY SINCE THE INDEX\n/*    WAS INITIALIZED.\n/*\n/* )O OPERANDS -\n/*\n/*    ALL OPERANDS ARE KEYWORDS\n/*    NONE ARE REQUIRED; ONLY ONE MAY BE SPECIFIED\n/*\n/* ))D(XX) -\n/*    SPECIFIES THE DAY OF THE MONTH FOR WHICH YOU WOULD LIKE THE\n/*    DUMP INDEX DISPLAYED. IF THIS OPERAND IS SPECIFIED, THE INDEX\n/*    DATASET IS SEARCHED FOR A MEMBER CORRESPONDING TO THE DAY\n/*    NUMBER \"XX\". THAT MEMBER IS SUBSEQUENTLY \"BROWSED\" VIA ISPF/PDF.\n/*\n/*    \"XX\" MUST BE A NUMERIC VALUE BETWEEN 1 AND 31.\n/*\n/* ))TODAY -\n/*    SPECIFIES THE DUMP INDEX MEMBER CORRESPONDING TO TODAY'S\n/*    TRANSFERED DUMP DATASETS. THIS MEMBER MAY OR MAY NOT\n/*    CONTAIN A CURRENT ENTRY. HOWEVER, YOU CAN EASILY TELL IF\n/*    YOU ARE LOOKING AT LAST MONTH'S ENTRY OR THE INITIALIZING\n/*    PAD ENTRY BY EXAMINING THE CONTENTS UNDER \"BROWSE\".\n/*\n/* ))YESTERDAY -\n/*    LIKE THE \"TODAY\" OPERAND, THIS KEYWORD SELECTS A MEMBER\n/*    FROM THE DUMP INDEX DATASET. HOWEVER, THE SELECTED MEMBER\n/*    CORRESPONDS TO A DAY NUMBER ONE LESS THAN THE CURRENT DAY.\n/*    IF THE FIRST OF THE MONTH, \"YESTERDAY\" BROWSES THE LAST\n/*    DAY OF THE PREVIOUS MONTH.  THUS, YOU \"BROWSE\" THE ENTRY\n/*    CORRESPONDING TO \"YESTERDAY'S\" DAY OF THE MONTH.\n/*\n/* ))TOMORROW -\n/*    SPECIFIES THAT YOU WOULD LIKE TO SEE \"TOMORROW'S\" DUMP\n/*    DATASET INDEX. IN EFFECT, THIS OPERAND SHOULD PREDICT\n/*    WHICH DUMPS WILL OCCUR TOMORROW AND ON WHICH TAPE\n/*    VOLUMES THEY WILL RESIDE. THIS SEEMS LIKE AN IMPOSSIBLE\n/*    TASK, BUT IN MVS ALL THINGS ARE POSSIBLE.\n/*\n/* )ENDHELP\n/*\n/******************************************************/\n/** SET UP DEBUG ENVIRONMENT - FOR THIS LEVEL ONLY   **/\n/******************************************************/\n/*\nIF &DEBUG EQ DEBUG THEN +\n   CONTROL LIST CONLIST SYMLIST NOFLUSH PROMPT MSG\n   ELSE CONTROL NOMSG NOPROMPT NOFLUSH NOLIST\n/*\n/**********************************************/\n/** IF NO OPERANDS ENTERED; DEFAULT TO TODAY **/\n/**********************************************/\nIF &D EQ  &STR() -\n      AND &TODAY     EQ &STR() -\n      AND &YESTERDAY EQ &STR() -\n      AND &TOMORROW  EQ &STR() THEN SET &TODAY EQ TODAY\n/*\n/************************************************************/\n/** CALL SUBROUTINE TO GET THE CURRENT DATE                **/\n/** \"JULDATE\" WILL FORMAT THE GLOBAL VARIABLES             **/\n/************************************************************/\n%JULDATE DATE(SYSDATE)\n/**\n/** SET UP VARIALBES\n/**\nSET  &NULL EQ &STR()\nSET  &SW   EQ 0\nDO WHILE &SW EQ 0\nIF &SW EQ 0 THEN -\n  DO\n   IF &D NE &NULL THEN -\n     DO\n       IF &DATATYPE(&D) NE NUM  OR &LENGTH(&STR(&D)) GT 2) THEN -\n         DO\n           WRITE ******************************************\n           WRITE ENTRY FOR DAY NUMBER NOT VALID - TRY AGAIN\n           WRITE ******************************************\n           EXIT CODE(94)\n         END\n       ELSE -\n       IF  &D LT 1 OR &D GT 31 THEN -\n         DO\n           WRITE *********************************************\n           WRITE ENTRY FOR DAY NUMBER OUT OF RANGE - TRY AGAIN\n           WRITE *********************************************\n           EXIT CODE(95)\n          END\n       IF &TODAY NE &NULL -\n                 OR &YESTERDAY NE &NULL -\n                 OR &TOMORROW  NE &NULL -\n                 THEN -\n         DO\n           WRITE *************************************************\n           WRITE IF YOU ENTER A SPECIFIC DAY NUMBER, YOU CANNOT\n           WRITE ENTER TODAY, YESTERDAY, OR TOMORROW\n           WRITE TRY THIS CLIST AGAIN - THIS TIME CORRECTLY!!\n           WRITE **************************************************\n           EXIT CODE(91)\n         END\n       ELSE -\n         DO\n           SET &D EQ &STR(&D)\n           IF &LENGTH(&STR(&D)) EQ 1 THEN SET &D EQ &STR(0&D)\n           %B 'SYS3.XFER.DATA(DAY&D)'\n           SET &SW EQ 1\n         END\n     END\n  END\nIF &SW EQ 0 THEN -\n   IF &TODAY EQ TODAY THEN -\n      IF &YESTERDAY NE &NULL OR &TOMORROW NE &NULL THEN -\n         DO\n           WRITE ******************************************************\n           WRITE CHOOSE ONLY ONE OPTION - YESTERDAY, TODAY, OR TOMORROW\n           WRITE ******************************************************\n           EXIT CODE(98)\n           SET &SW EQ 1\n         END\n       ELSE -\n         DO\n           SET &DAY EQ &STR(&DAY)\n           IF  &LENGTH(&STR(&DAY)) EQ 1 THEN SET &DAY EQ &STR(0&DAY)\n           %B 'SYS3.XFER.DATA(DAY&DAY)'\n           SET &SW EQ 1\n         END\nIF &SW EQ 0 THEN -\n   IF  &YESTERDAY EQ YESTERDAY THEN -\n     IF &TODAY NE &NULL OR &TOMORROW NE &NULL THEN -\n         DO\n           WRITE ******************************************************\n           WRITE CHOOSE ONLY ONE OPTION - YESTERDAY, TODAY, OR TOMORROW\n           WRITE ******************************************************\n           EXIT CODE(98)\n         END\n     ELSE -\n         DO\n           SET &DAY EQ &DAY - 1\n           IF  &DAY EQ 0 THEN -\n              DO\n                /**************************************************/\n                /** CALCULATE THE LAST DAY OF THE PREVIOUS MONTH **/\n                /**************************************************/\n                SET &MONTH EQ &MONTH - 1\n                IF  &MONTH EQ 0 THEN SET &MONTH EQ 12\n                SET &DAY   EQ &SUBSTR(&EVAL(&MONTH*2):+\n                    &EVAL((&MONTH*2)+1),0312831303130313130313031)\n                IF &YEAR//4 EQ 0 AND &MONTH EQ 2 THEN SET &DAY EQ 29\n              END\n           SET &DAY EQ &STR(&DAY)\n           IF  &LENGTH(&STR(&DAY)) EQ 1 THEN SET &DAY EQ &STR(0&DAY)\n           %B 'SYS3.XFER.DATA(DAY&DAY)'\n           SET &SW EQ 1\n         END\nIF &SW EQ 0 THEN -\n   IF &TOMORROW EQ TOMORROW THEN -\n      IF &TODAY NE &NULL OR &YESTERDAY NE &NULL THEN -\n         DO\n           WRITE ******************************************************\n           WRITE CHOOSE ONLY ONE OPTION - YESTERDAY, TODAY, OR TOMORROW\n           WRITE ******************************************************\n           EXIT CODE(98)\n         END\n     ELSE -\n         DO\n           WRITE ***********************************************\n           WRITE SILLY! I CAN'T FORTELL THE FUTURE\n           WRITE DOES THIS TERMINAL LOOK LIKE A CRYSTAL BALL?\n           WRITE (DON'T ANSWER THAT!!)\n           WRITE ***********************************************\n           EXIT CODE(97)\n           END\nEND\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XIXHELP": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x00\\x00E\\x00E\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:00:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "HMDEAN"}, "text": ")F FUNCTION  -\n   THE XIX COMMAND IS A CLIST USED TO INQUIRE INTO THE SYSTEM\n   DUMP INDEX DATASET. THE DUMP TITLES ASSOCIATED WITH A TAPE\n   VOLUME ARE LISTED ALONG WITH THE TAPE VOLUME SERIAL\n   NUMBER.\n\n   THE DUMP DATASET INDEX, \"SYS3.XFER.DATA\", IS A WRAP-AROUND\n   PARTITIONED DATASET. EACH MEMBER IS ASSOCIATED WITH A DAY\n   OF THE MONTH.  ONE MEMBER  MAY CONTAIN AN INDEX OF\n   MULTIPLE DUMP TAPES FOR A PARTICULAR DAY. THE PREVIOUS\n   MONTH'S INDEX MEMBER IS OVERLAYED BY THE CURRENT DUMP TAPE\n   INDEX MEMBER.\n\n   THIS CLIST WORKS IN CONJUNCTION WITH THE \"XFERDUMP\" CATALOGED\n   PROCEDURE. THAT PROCEDURE UPDATES THE INDEX DATA SET BASED ON\n   THE CURRENT DAY OF THE WEEK.\n\n   IF THE PROPER OPERANDS ARE ENTERED, ISPF \"BROWSE\" SERVICES ARE\n   INVOKED AGAINST THE SPECIFIED DUMP INDEX MEMBER.\n\n)X SYNTAX -  %XIX D(XX)/TODAY/YESTERDAY/TOMORROW\n\n   REQUIRED - NONE\n   ALIAS    - NONE\n   DEFAULTS - TODAY\n\n   ALL OPERANDS ARE KEYWORDS\n   ONLY ONE OPERAND MAY BE SPECIFIED, BUT NONE ARE REQUIRED\n\n   UPON ENTERING \"BROWSE\", YOU MAY SEE THE CHARACTERS \"PAD\"\n   FOLLOWED BY 77 DOTS. THIS MEANS THAT THERE HAS NEVER BEEN\n   A DUMP TRANSFERED ON THAT PARTICULAR DAY SINCE THE INDEX\n   WAS INITIALIZED.\n\n)O OPERANDS -\n\n   ALL OPERANDS ARE KEYWORDS\n   NONE ARE REQUIRED; ONLY ONE MAY BE SPECIFIED\n\n))D(XX) -\n   SPECIFIES THE DAY OF THE MONTH FOR WHICH YOU WOULD LIKE THE\n   DUMP INDEX DISPLAYED. IF THIS OPERAND IS SPECIFIED, THE INDEX\n   DATASET IS SEARCHED FOR A MEMBER CORRESPONDING TO THE DAY\n   NUMBER \"XX\". THAT MEMBER IS SUBSEQUENTLY \"BROWSED\" VIA ISPF/PDF.\n\n   \"XX\" MUST BE A NUMERIC VALUE BETWEEN 1 AND 31.\n\n))TODAY -\n   SPECIFIES THE DUMP INDEX MEMBER CORRESPONDING TO TODAY'S\n   TRANSFERED DUMP DATASETS. THIS MEMBER MAY OR MAY NOT\n   CONTAIN A CURRENT ENTRY. HOWEVER, YOU CAN EASILY TELL IF\n   YOU ARE LOOKING AT LAST MONTH'S ENTRY OR THE INITIALIZING\n   PAD ENTRY BY EXAMINING THE CONTENTS UNDER \"BROWSE\".\n\n))YESTERDAY -\n   LIKE THE \"TODAY\" OPERAND, THIS KEYWORD SELECTS A MEMBER\n   FROM THE DUMP INDEX DATASET. HOWEVER, THE SELECTED MEMBER\n   CORRESPONDS TO A DAY NUMBER ONE LESS THAN THE CURRENT DAY.\n   IF THE FIRST OF THE MONTH, \"YESTERDAY\" BROWSES THE LAST\n   DAY OF THE PREVIOUS MONTH.  THUS, YOU \"BROWSE\" THE ENTRY\n   CORRESPONDING TO \"YESTERDAY'S\" DAY OF THE MONTH.\n\n))TOMORROW -\n   SPECIFIES THAT YOU WOULD LIKE TO SEE \"TOMORROW'S\" DUMP\n   DATASET INDEX. IN EFFECT, THIS OPERAND SHOULD PREDICT\n   WHICH DUMPS WILL OCCUR TOMORROW AND ON WHICH TAPE\n   VOLUMES THEY WILL RESIDE. THIS SEEMS LIKE AN IMPOSSIBLE\n   TASK, BUT IN MVS ALL THINGS ARE POSSIBLE.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "X1": {"ttr": 5379, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x03/\\x00\\x87\\x03/\\x12\\x01\\x00\\x08\\x00\\x08\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T12:01:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "HMDEAN"}, "text": "         (U4756,U4756,000000),'X MARKS THE SPOT'\n//   MSGCLASS=A,USER=HOWIE\n/*NOTIFY $UHMD\n/*JOBPARM F=J012\n//*\n//* SAMPLE STARTED TASK ACCOUNTING MEMBER\n//* SEE MEMBER STCADOC FOR FURTHER INFORMATION\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT119/FILE119.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT119", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}