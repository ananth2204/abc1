{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011459000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3115658, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE199.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE199.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x001\\x02'", "DS1TRBAL": "b'\\xcd\\xba'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x85\\x00\\r\\x01\\x89\\x00\\x02\\x002'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00\"\\x01\\x165o\\x01\\x165o\\x14 \\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-12-21T00:00:00", "modifydate": "2016-12-21T14:20:22", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-493"}, "text": "REGULAR CBT TAPE - VERSION 493    FILE:  199\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT493.FILE199\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 29,324 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/21/16    14:20:22    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x00;\\x00;\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "OLDSTUF"}, "text": "The BLKSPTRK command can be used to display track capacities for any\nDASD device for any combination of key lengths, block sizes, and/or\nblock counts. Read the provided help file for usage details.\n\nThe BLKSPTRK member of the distribution library contains the source for\nthe BLKSPTRK command. The HELP member contains a TSO help file. Sample\nASSEMBLY AND LINKEDIT JCL CAN BE FOUND IN THE ASMJCLB MEMBER.\n\nAssembling BLKSPTRK requires a macro library that is available in file\n408 of the CBT mods tape.\n\nThe CMDPGM command provides an easy to use means of invoking (from TSO)\narbitrary TSO commands or \"batch\" programs out of arbitrary libraries\nin either a non-authorized mode or an authorized mode (subject, of\ncourse, to suitable \"goodguy\" checking).\n\nAll of the CMDPGM functions are capable of establishing any desired\nload library as a \"task-library\" during the execution of your chosen\ncommand or program. Task-libraries function exactly like job-libraries\nor step-libraries, so this capability relieves the need of a \"steplib\"\nmod for TSO.\n\nThe following members of this distribution library are TSO help\nfiles describing the various functions of the CMDPGM command. Read\nthem to learn the functional details.\n\n         COMMAND (alias CMD)       APFCMD\n         PROGRAM (alias PGM)       APFPGM\n\nThe source for CMDPGM is in the member CMDPGM. Assembling it requires a\nmacro library that is available in file 408 of the CBT mods tape.\n\nCMDPGM should be link edited into two identical load modules. one\nshould be authorized, the other not. The authorized module should be\ngiven the aliases APFPGM and APFCMD. The non-authorized module should\nbe given the aliases CMD and PGM (and, if you like to type, COMMAND\nand PROGRAM). If this is done, then programs and commands invoked by\nAPFPGM and APFCMD will be invoked authorized. Programs and commands\ninvoked by PGM and CMD (and PROGRAM and COMMAND) will be invoked\nnon-authorized. See the help files for details.\n\nThe member ASMJCL contains sample assembly and linkedit JCL.\n\nWarning, the authorized functions of CMDPGM can represent a SIGNIFICANT\nintegrity exposure. Accordingly, each installation must write its own\n\"goodguy\" checking code to insure that only the right people get to use\nCMDPGM in the authorized mode. Assemble the code and then look for\nMNOTEs for details.\n\nNote, if you do write a suitably \"airtight\" goodguy checker into this\nprogram, then you might not have to repeat the effort in any other\nsensitive programs that you might have laying around. Instead, you\ncould link such other programs non-authorized and then front-end them\nwith this program which, if your goodguy checker says ok, will execute\nthem authorized anyway.\n\nThe PGM and APFPGM functions of CMDPGM can be executed in the batch (as\nwell as in TSO).\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE199": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00\\x16\\x01\\x165o\\x01\\x165o\\x14 \\x00P\\x00P\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-12-21T00:00:00", "modifydate": "2016-12-21T14:20:16", "lines": 80, "newlines": 80, "modlines": 0, "user": "CBT-493"}, "text": "//***FILE 199 IS FROM DAVE COLE WHO IS NOW AT COLE SOFTWARE         *   FILE 199\n//*           IN CHARLOTTESVILLE, VIRGINIA.                         *   FILE 199\n//*                                                                 *   FILE 199\n//*    Dave Cole has updated most of his contributions, and         *   FILE 199\n//*    they are available for direct download from his web          *   FILE 199\n//*    site at www.colesoft.com.  The following list of             *   FILE 199\n//*    his software is currently available there:                   *   FILE 199\n//*                                                                 *   FILE 199\n//*    Fixed CMDPGM source to AMODE 31, RMODE 24.  Adjusted         *   FILE 199\n//*    permissions to OPER only, but you should change this.        *   FILE 199\n//*    (Some sysprogs don't have ACCOUNT authority.)                *   FILE 199\n//*                                                                 *   FILE 199\n//*    So on this file, you have CMDPGM fixed up.  Tested on        *   FILE 199\n//*    z/OS 1.6.  (Not done by Dave Cole.)                          *   FILE 199\n//*                                                                 *   FILE 199\n//*         Cole Software LLC's File Upload/Download Area           *   FILE 199\n//*                                                                 *   FILE 199\n//*       The following shareware is available for download         *   FILE 199\n//*                                                                 *   FILE 199\n//*      Filename   Platform            Description                 *   FILE 199\n//*                                                                 *   FILE 199\n//*    asm2zap.zip   z/OS      A utility for converting an          *   FILE 199\n//*                            assembly listing into SUPERZAP       *   FILE 199\n//*                            cards.                               *   FILE 199\n//*                                                                 *   FILE 199\n//*    blksptrk.zip  z/OS      A TSO command that computes and      *   FILE 199\n//*                            displays track capacities for any    *   FILE 199\n//*                            IBM DASD device for any BLKSIZE,     *   FILE 199\n//*                            with or without key fields.          *   FILE 199\n//*                                                                 *   FILE 199\n//*    macros.zip    z/OS      A set of Assembler/390 macros        *   FILE 199\n//*                            needed for assembling the various    *   FILE 199\n//*                            programs available from Cole         *   FILE 199\n//*                            Software LLC.                        *   FILE 199\n//*                                                                 *   FILE 199\n//*    schedrun.zip  z/OS      A set of MVS programs for            *   FILE 199\n//*                            scheduling the execution of System   *   FILE 199\n//*                            Operator Commands on an interval     *   FILE 199\n//*                            or calander basis. Can be used to    *   FILE 199\n//*                            control production scheduling.       *   FILE 199\n//*                                                                 *   FILE 199\n//*    dscopy.zip    z/OS      A flexible program for copying       *   FILE 199\n//*                            any number of datasets in a single   *   FILE 199\n//*                            jobstep.  (Newly released.)          *   FILE 199\n//*                                                                 *   FILE 199\n//*    xrefasm.zip   z/OS      A pair of programs for producing     *   FILE 199\n//*                            master cross-reference listings      *   FILE 199\n//*                            for multi-assembly programs.         *   FILE 199\n//*                                                                 *   FILE 199\n//*         Colesoft Marketing, Inc.                                *   FILE 199\n//*         414 3rd ST. NE                                          *   FILE 199\n//*         Charlottesville, VA 22902 USA                           *   FILE 199\n//*         540-456-8210                                            *   FILE 199\n//*         www.colesoft.com                                        *   FILE 199\n//*         email:  dbcole@gmail.com                                *   FILE 199\n//*                                                                 *   FILE 199\n//*     THIS FILE CONTAINS SEVERAL TSO COMMAND PROCESSORS.          *   FILE 199\n//*     THEY ARE:                                                   *   FILE 199\n//*                                                                 *   FILE 199\n//*     THE BLKSPTRK COMMAND CAN BE USED TO DISPLAY TRACK           *   FILE 199\n//*     CAPACITIES FOR ANY DASD DEVICE FOR ANY COMBINATION OF       *   FILE 199\n//*     KEY LENGTHS,  BLOCK SIZES,  AND / OR BLOCK COUNTS.          *   FILE 199\n//*                                                                 *   FILE 199\n//*     THE CMDPGM COMMAND PROVIDES AN EASY TO USE MEANS OF         *   FILE 199\n//*     INVOKING (FROM TSO) ARBITRARY TSO COMMANDS OR               *   FILE 199\n//*     \"BATCH\" PROGRAMS OUT OF ARBITRARY LIBRARIES IN EITHER A     *   FILE 199\n//*     NON-AUTHORIZED MODE OR AN AUTHORIZED MODE.                  *   FILE 199\n//*                                                                 *   FILE 199\n//*     ALL OF THE CMDPGM FUNCTIONS ARE CAPABLE OF ESTABLISHING     *   FILE 199\n//*     ANY DESIRED LOAD LIBRARY AS A \"TASK-LIBRARY\" DURING         *   FILE 199\n//*     THE EXECUTION OF YOUR CHOSEN COMMAND OR PROGRAM.            *   FILE 199\n//*     TASK-LIBRARIES FUNCTION EXACTLY LIKE JOB-LIBRARIES OR       *   FILE 199\n//*     STEP-LIBRARIES,  SO THIS CAPABILITY RELIEVES THE NEED       *   FILE 199\n//*     OF A \"STEPLIB\" MOD FOR TSO.                                 *   FILE 199\n//*                                                                 *   FILE 199\n//*     DAVE COLE'S PROGRAMS REQUIRE DAVE COLE'S MACROS FOR         *   FILE 199\n//*     ASSEMBLY, WHICH MAY BE FOUND ON FILE 408.                   *   FILE 199\n//*                                                                 *   FILE 199\n//*     See member called NEWSTUFF.                                 *   FILE 199\n//*                                                                 *   FILE 199\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APFCMD": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x00<\\x00<\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "OLDSTUF"}, "text": ")F FUNCTION\n*** THIS COMMAND CAN BE USED ONLY BY THE COMNET DEVELOPMENT AND SUPPORT\n*** STAFFS\n\nAPFCMD allows you to invoke an arbitrary TSO command from an arbitrary\nload library in the authorized mode.\n\nAPFCMD checks for the presence of either a given ddname or a TASKLIB\nddname. If found, then it establishes that library as the\n\"task-library\" (in place of either a job-library or a step-library)\nfor the command to be executed. In addition, APFCMD flags the\ntask-library as being authorized for the duration of the command's\nexecution.\n\n)X SYNTAX\n\nAPFCMD name:ddname operands\n\n         - name is the name of the TSO command to be executed.\n         - :ddname is the ddname to be used as a task-library.\n         - operands are that command's operands, if any.\n\nrequired - name\ndefault  - if :ddname is omitted, then ddname TASKLIB, if present, is\n           used for the task-library.\n         - if : is given without a ddname, then no task-library is\n           established - not even the ddname TASKLIB, if present.\n\n)O OPERANDS\n))NAME -\nThis operand gives the name of the TSO command to be executed\nauthorized. This may be an arbitrary command. It may come from either\nthe standard link-libraries or from an arbitrary library (pointed to\nby the task-library ddname).\n\n))DDNAME -\nThis operand gives a ddname to be used for a task-library for the\ncommand to be executed. (A task-library is similar to a job-library or\nstep-library).\n\nIf a ddname is given, then it must be appended to the name of the\ncommand to be executed and delimited from that name by a colon (:).\n\nExample:   APFCMD LISTC:MYLIB LEVEL(SYS1)\nThe library pointed to by the ddname MYLIB is established by APFCMD as\na task-library for LISTC. If the LISTC command is contained in that\nlibrary, then it will be loaded from there and executed authorized.\n\nIf :ddname is omitted, then APFCMD searches for the ddname TASKLIB. If\nfound, then that library will be established as a task-library. If not\nfound, then no task-library is established.\n\nIf a colon is given all by itself without a ddname, then no\ntask-library is established regardless of whether or not a TASKLIB\nddname exists.\n\n))OPERANDS -\nThese are whatever operands the TSO command needs. They should NOT be\nframed by any special characters.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APFPGM": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x00=\\x00=\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "OLDSTUF"}, "text": ")F FUNCTION\n*** THIS COMMAND CAN BE USED ONLY BY THE COMNET DEVELOPMENT AND SUPPORT\n*** STAFFS\n\nAPFPGM allows you to invoke an arbitrary \"batch\" program from an\narbitrary load library in the authorized mode.\n\nAPFPGM checks for the presence of either a given ddname or a TASKLIB\nddname. If found, then it establishes that library as the\n\"task-library\" (in place of either a job-library or a step-library)\nfor the program to be executed. In addition, APFPGM flags the\ntask-library as being authorized for the duration of the program's\nexecution.\n\n)X SYNTAX\n\nAPFPGM name:ddname parms\n\n         - name is the name of the \"batch\" program to be executed.\n         - :ddname is the ddname to be used as a task-library.\n         - parms are that program's PARM field data, if any.\n\nrequired - name\ndefault  - if :ddname is omitted, then ddname TASKLIB, if present, is\n           used for the task-library.\n         - if : is given without a ddname, then no task-library is\n           established - not even the ddname TASKLIB, if present.\n\n)O OPERANDS\n))NAME -\nThis operand gives the name of the \"batch\" program to be executed\nauthorized. This may be an arbitrary program. It may come from either\nthe standard link-libraries or from an arbitrary library (pointed to\nby the task-library ddname).\n\n))DDNAME -\nThis operand gives a ddname to be used for a task-library for the\nprogram to be executed. (A task-library is similar to a job-library or\nstep-library).\n\nIf a ddname is given, then it must be appended to the name of the\nprogram to be executed and delimited from that name by a colon (:).\n\nExample:   APFPGM IEHMOVE:MYLIB POWER=2\nThe library pointed to by the ddname MYLIB is established by APFPGM as\na task-library for IEHMOVE. If the IEHMOVE program is contained in that\nlibrary, then it will be loaded from there and executed authorized.\nPARM='POWER=2' will be passed to IEHMOVE.\n\nIf :ddname is omitted, then APFPGM searches for the ddname TASKLIB. If\nfound, then that library will be established as a task-library. If not\nfound, then no task-library is established.\n\nIf a colon is given all by itself without a ddname, then no\ntask-library is established regardless of whether or not a TASKLIB\nddname exists.\n\n))PARMS -\nThese are whatever PARM field data the \"batch\" program needs. They\nshould NOT be framed by any special characters.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMJCL": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x00-\\x00-\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "OLDSTUF"}, "text": "//*\n//***********************************************************\n//*                                                         *\n//*      SAMPLE JCL TO ASSEMBLE AND LINKEDIT THE CMDPGM     *\n//*      PROGRAM.                                           *\n//*                                                         *\n//***********************************************************\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM=(RENT,TERM,TEST,LOAD,NODECK)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=6160\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//*\n//***********************************************************\n//*                                                         *\n//* THE FOLLOWING MACLIB IS AVAILABLE FROM FILE 408 OF THE  *\n//* CBT MODS TAPE.                                          *\n//*                                                         *\n//         DD  DSN=COLE.MACLIB,DISP=SHR                     *\n//*                                                         *\n//***********************************************************\n//*\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSSQ,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=COLE.SOURCLIB(CMDPGM),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM='RENT,TEST,XREF,LET,LIST,NCAL',\n//             COND=(0,LT)\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//CMDPGM   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLIN  DD   *\n         INCLUDE CMDPGM\n         ALIAS   COMMAND,PROGRAM,PGM\n         NAME    CMD(R)\n         INCLUDE CMDPGM\n         SETCODE AC(1)\n         ALIAS   APFPGM\n         NAME    APFCMD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMJCLB": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x00(\\x00(\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "OLDSTUF"}, "text": "//*\n//***********************************************************\n//*                                                         *\n//*      SAMPLE JCL TO ASSEMBLE AND LINKEDIT THE BLKSPTRK   *\n//*      PROGRAM.                                           *\n//*                                                         *\n//***********************************************************\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM=(RENT,TERM,TEST,LOAD,NODECK)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=6160\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//*\n//***********************************************************\n//*                                                         *\n//* THE FOLLOWING MACLIB IS AVAILABLE FROM FILE 408 OF THE  *\n//* CBT MODS TAPE.                                          *\n//*                                                         *\n//         DD  DSN=COLE.MACLIB,DISP=SHR                     *\n//*                                                         *\n//***********************************************************\n//*\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSSQ,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=COLE.SOURCLIB(BLKSPTRK),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM='RENT,TEST,XREF,LET,LIST,NCAL',\n//             COND=(0,LT)\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//        DD   *\n         ALIAS BPT\n         NAME  BLKSPTRK(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLKSPTRK": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x02\\x85\\x02\\x85\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 645, "newlines": 645, "modlines": 0, "user": "OLDSTUF"}, "text": "BPT      TITLE 'BLKSPTRK -- PHYSICAL BLOCKS PER DASD TRACK CALCULATER'\n************************************************************* 11/84 DBC\n*                                                           * 11/84 DBC\n* MODULE NAME = BLKSPTRK.                                   * 11/84 DBC\n*                                                           * 11/84 DBC\n* DESCRIPTIVE NAME = PHYSICAL BLOCKS PER DASD TRACK         * 11/84 DBC\n*                    CALCULATOR.                            * 11/84 DBC\n*                                                           * 11/84 DBC\n* STATUS = RELEASE 8411.                                    * 11/84 DBC\n*                                                           * 11/84 DBC\n* FUNCTION = A TSO COMMAND THAT DISPLAYS TRACK CAPACITIES   * 11/84 DBC\n*            FOR ANY SET OF DASD DEVICES, FOR ANY GIVEN     * 11/84 DBC\n*            COMBINATION OF KEY LENGTHS, BLOCK SIZES,       * 11/84 DBC\n*            AND/OR BLOCK COUNTS.                           * 11/84 DBC\n*                                                           * 11/84 DBC\n* PROCESSOR = OS/VS ASSEMBLER.                              * 11/84 DBC\n*                                                           * 11/84 DBC\n* TYPE = TSO COMMAND PROCESSOR.                             * 11/84 DBC\n*                                                           * 11/84 DBC\n* ATTRIBUTES = REENTRANT, REFRESHABLE, REUSABLE.            * 11/84 DBC\n*                                                           * 11/84 DBC\n* AUTHOR = DAVID B. COLE.                                   * 11/84 DBC\n*                                                           * 11/84 DBC\n************************************************************* 11/84 DBC\n*                                                           * 11/84 DBC\n* ENTRY POINT = BLKSPTRK.                                   * 11/84 DBC\n*                                                           * 11/84 DBC\n* ALIAS NAME = BPT.                                         * 11/84 DBC\n*                                                           * 11/84 DBC\n* COMMAND FORMAT = BLKSPTRK (<DEVTYPE> ...)                 * 11/84 DBC\n*                  KEYLEN(<KEY_LENGTH> ...)                 * 11/84 DBC\n*                  BLKSIZE(<BLOCK_SIZE>|#<BLOCK_COUNT>|0 ...) 11/84 DBC\n*                                                           * 11/84 DBC\n* ANY NUMBER OF DEVICE TYPES, KEY LENGTHS AND BLOCK SIZES   * 11/84 DBC\n* MAY BE GIVEN. A MATRIX IS DISPLAYED SHOWING TRACK         * 11/84 DBC\n* CAPACITIES FOR ALL COMBINATIONS OF THE GIVEN PARAMETERS.  * 11/84 DBC\n*                                                           * 11/84 DBC\n* THE KEYLEN PARAMETER CAN BE OMITTED IN WHICH CASE THE     * 11/84 DBC\n* TRACK CAPACITIES WILL BE CALCULATED FOR BLOCKS WITHOUT    * 11/84 DBC\n* KEYS. EQUIVALENTLY, KEYLEN(0) MAY BE GIVEN.               * 11/84 DBC\n*                                                           * 11/84 DBC\n* THE BLKSIZE PARAMETER ALSO CAN BE OMITTED IN WHICH CASE   * 11/84 DBC\n* THE SIZE OF THE LARGEST BLOCK (CONSIDERING THE GIVEN OR   * 11/84 DBC\n* OMITTED KEY LENGTH(S)) THAT CAN BE CONTAINED ON A TRACK   * 11/84 DBC\n* IS DISPLAYED FOR EACH DEVICE TYPE REQUESTED.              * 11/84 DBC\n* EQUIVALENTLY, BLKSIZE(0) MAY BE GIVEN.                    * 11/84 DBC\n*                                                           * 11/84 DBC\n* IF A BLKSIZE VALUE IS GIVEN AS #N (E.G., #6), THEN IT IS  * 11/84 DBC\n* INTERPRETED AS A BLOCK COUNT INSTEAD OF A BLOCK SIZE. IN  * 11/84 DBC\n* THIS CASE THE BLOCK SIZE DISPLAYED WILL BE THE LARGEST    * 11/84 DBC\n* FOR WHICH N BLOCKS CAN FIT ON A TRACK FOR EACH DEVICE     * 11/84 DBC\n* TYPE REQUESTED (TAKING INTO CONSIDERATION KEY LENGTH      * 11/84 DBC\n* VALUES, IF ANY).                                          * 11/84 DBC\n*                                                           * 11/84 DBC\n************************************************************* 11/84 DBC\n         EJECT ,\nBLKSPTRK START ,\nBPT      EQU   BLKSPTRK            ALIAS NAME\n         SPACE 3\n         #REGS R                   STANDARD REGISTER EQUATES\n         EJECT\nCONSTANT DSECT ,                   DEVICE DESCRIPTIVE DATA\nLASTALT  DS    CL4                 CCHH OF LAST ALTERNATE.\nCONVCYL  DS    CL4                 CONVERSION TO CHANGE CYLINDERS.\nCONV1    DS    CL4                 CONVERSION TO GIVE CC-1,HH+XX.\nMAXREC   DS    1H                  MAXIMUM RECORDS PER TRACK.\nSACAP    DS    1H                  SURFACE ANALYSIS TRACK CAPACITY.\nLASTORIG DS    CL4                 CCHH OF LAST PRIMARY TRACK.\nTOTALALT DS    1H                  NUMBER OF ALTERNATES.\nCYLNO    DS    1H                  NUMBER OF CYLINDERS.\nTRKCYL   DS    1H                  TRACKS PER CYLINDER.\nTRKCAP   DS    1H                  TRACK CAPACITY.\nROVRHD   DS    CL3                 RECORD OVERHEAD.\nFLAG     DS    CL1                 FLAG BYTE.\nTOLER    DS    1H                  TOLERANCE FACTOR.\nDSCBTRK  DS    CL1                 DSCBS PER TRACK.\nDIRBTRK  DS    CL1                 DIRECTORY BLOCKS PER TRACK.\nTOTALPRM DS    1H                  NUMBER OF PRIMARY TRACKS.\nKDEVSIZE EQU   *-CONSTANT          DDD ENTRY SIZE\n         SPACE 1\n*        FLAG BIT DEFINITIONS\nDVC2BOV  EQU   X'08'               OVERHEAD IS SINGLE HALFWORD\nDVCCELLS EQU   X'10'               DEVICE IS CELLULAR         11/84 DBC\nDVCFTOL  EQU   X'01'               DEVICE USES TOLERENCE FACTOR\n         SPACE 3\n         IKJCPPL ,                 COMMAND PROCESSOR PARAMETER LIST\n         SPACE 3\n         IKJPPL ,                  PARSE PARAMETER LIST\nPPLLEN   EQU   *-PPL               LIST LENGTH\n         EJECT\n         #DSA  ,                   DATA STORAGE AREA\nDSAWORK  DS    D                   WORK AREA\nDSABUFF  DS    CL80                MESSAGE BUFFER AND WORK AREA\nDSAECB   DS    A                   ECB USED BY PARSE\nDSAPDL   DS    A                   PARSE PARAMETER DESCRIPTER LIST PTR\n         DS    0A\nDSAPPL   DS    XL(PPLLEN)          PARSE PARAMETER LIST\nDSALEN   EQU   *-DSA               DSA LENGTH\n         EJECT\nBLKSPTRK #ENTER SAVTYPE=(RENT,DSALEN) STANDARD REENTRANT ENTRY LINKAGE\n         LR    R11,R13             COPY DSA PTR\n         USING DSA,R11             DECLARE DSA BASE\n         SPACE 3\n*        INITIALIZE A PARAMETER LIST FOR PARSE AND THEN LINK TO IT\n         SPACE 1\n         LR    R2,R1               GET THE CPPL POINTER\n         USING CPPL,R2             DECLARE A BASE FOR IT\n         LA    R1,DSAPPL           POINT TO THE PPL\n         USING PPL,R1              DECLARE A BASE FOR IT\n         L     R0,CPPLUPT          INITIALIZE -\n         ST    R0,PPLUPT            UPT POINTER\n         L     R0,CPPLECT          INITIALIZE -\n         ST    R0,PPLECT            ECT POINTER\n         MVI   DSAECB,0            CLEAR AN ECB FOR PARSE\n         LA    R0,DSAECB           INITIALIZE -\n         ST    R0,PPLECB            ECB POINTER\n         L     R0,=V(PCL)          INITIALIZE -\n         ST    R0,PPLPCL            PCL POINTER\n         LA    R0,DSAPDL           INITIALIZE -\n         ST    R0,PPLANS            PDL POINTER POINTER\n         L     R0,CPPLCBUF         INITIALIZE -\n         ST    R0,PPLCBUF           CBUF POINTER\n         ST    R13,PPLUWA          INITIALIZE VLDTY CHK WA PTR\n         DROP  R2                  RELEASE CPPL BASE\n         DROP  R1                  RELEASE PPL BASE\n         LINK  EP=IKJPARS          PARSE THE INVOKING OPERANDS\n         LTR   R15,R15             PARSE OK?\n         BZ    PARSOK              YES, PROCEED\n         CVD   R15,DSAWORK         NO, CNVRT RC TO DECIMAL\n         UNPK  DSABUFF(2),DSAWORK+6(2) CNVRT TO EBCDIC\n         OI    DSABUFF+1,X'F0'     FIX THE FUCKING SIGN\n         LA    R4,DSABUFF          POINT TO EBCDIC RC\n         LA    R5,1                GET ITS MACHINE LENGTH\n         LA    R1,PARSFMSG-1       POINT TO ERROR MSG\n         LR    R3,R15              SAVE THE RC\n         BAL   R2,TPUTERRM         GO ISSUE THE ERROR MSG\n         LR    R15,R3              RESTORE THE RC\n         B     EXITGOOD            GO RETURN TO TMP\nPARSOK   EQU   *\n         SPACE 3\n*        DISPLAY THE REQUESTED DATA\n         SPACE 1\n         L     R2,DSAPDL           POINT TO THE PDL\n         USING PDL,R2              DECLARE A BASE FOR IT\n         LA    R1,TITLE            POINT TO TITLE\n         LA    R0,TITLEN           GET ITS LENGTH\n         TPUT  (1),(0),R           SEND IT\n         SPACE 3\n         LA    R3,PDLDEVT          PNT TO DEVICE PARAMETER CHAIN\nDEVTLOOP CLI   0(R3),X'FF'         OMITTED VALUE?\n         BE    DEVTNEXT            YES, LOOP FOR NEXT\n         MVI   DSABUFF,C' '        NO, CLEAR MSG BUFFER\n         MVC   DSABUFF+1(TITLEN-1),DSABUFF\n         L     R1,0(,R3)           POINT TO DEVTYPE STRING\n         LH    R15,4(,R3)          GET ITS LENGTH\n         BCTR  R15,0               CONVERT TO MACHINE LENGTH\n         MVC   DSABUFF+TITDEVT(*-*),0(R1) (EXECUTED INSTRUCTION)\n         EX    R15,*-6             COPY TO MSG BUFFER\n         IC    R6,0(,R3)           GET THE DDD INDEX\n         N     R6,=X'0000007F'     ISSOLATE IT\n         MH    R6,=Y(KDEVSIZE)     CONVERT TO OFFSET\n         LA    R6,#(R6)            --> DEVICE DESCRIPTER DATA\n         USING CONSTANT,R6         DECLARE A BASE\n         SPACE 3\n         LA    R5,PDLKEYL          POINT TO KEYLEN(S) CHAIN\nKEYLLOOP CLI   0(R5),X'FF'         OMITTED ENTRY?\n         BE    KEYLNEXT            YES, SKIP\n         MVC   DSABUFF+TITKEYL(3),=X'202120' NO, EDIT MASK\n         L     R8,0(,R5)           GET KEYLENGTH VALUE\n         CVD   R8,DSAWORK          CONVERT TO DECIMAL\n         ED    DSABUFF+TITKEYL-1(4),DSAWORK+6 CNVRT TO EBCDIC\n         SPACE 3\n         LA    R4,PDLBLKS          PNT TO BLKSIZE(S) CHAIN\nBLKSLOOP CLC   =4C'*',0(R4)        OMITTED ENTRY?             11/84 DBC\n         BE    BLKSNEXT            YES, SKIP\n         MVC   DSABUFF+TITBLKS(5),=X'2020202120' NO, EDIT MASK\n         ICM   R9,15,0(R4)         GET GIVEN BLKSIZE; DEFAULT WANTED?\n         BP    NDFLBLKS            NO, USE GIVEN VALUE        11/84 DBC\n         LA    R15,1               (TREAT \"0\" AS \"#1\")        11/84 DBC\n         BZ    DFLTBLKS            YES, PROCESS AS B(#1)      11/84 DBC\n         LPR   R15,R9              NO, GET N OF B(#N)         11/84 DBC\n         SPACE 1                                              11/84 DBC\nDFLTBLKS SR    R9,R9               CLEAR                      11/84 DBC\n         ICM   R9,3,TRKCAP         YES, GET TRACK CAPACITY    11/84 DBC\n         SR    R7,R7               CLEAR\n         TM    FLAG,DVCCELLS       CELLULAR DEVICE?           11/84 DBC\n         BZ    OLDWAY1             NO, SKIP                   11/84 DBC\n         SPACE 1                                              11/84 DBC\n         IC    R7,ROVRHD+2         YES, GET CELL SIZE         11/84 DBC\n         LR    R1,R9               GET TRKCAP                 11/84 DBC\n         SR    R0,R0               CLEAR                      11/84 DBC\n         DR    R0,R7               GET # CELLS AVAILABLE      11/84 DBC\n         SR    R0,R0               CLEAR                      11/84 DBC\n         DR    R0,R15              GET # CELLS AVAIL PER RCD  11/84 DBC\n         MR    R0,R7               CNVRT BACK TO BYTES        11/84 DBC\n         LR    R9,R1               AND COPY BACK TO R9        11/84 DBC\n         LTR   R1,R8               ANY KEYS?                  11/84 DBC\n         BZ    NWNOKYS1            NO, SKIP                   11/84 DBC\n         AH    R1,TOLER            YES, ADD KEY-AREA OVERHEAD 11/84 DBC\n         SR    R0,R0               CLEAR FOR DIVIDE           11/84 DBC\n         DR    R0,R7               GET # CELLS NEEDED         11/84 DBC\n         MR    R0,R7               CNVRT BACK TO ROUNDED UP   11/84 DBC\n*                                  BYTES                      11/84 DBC\n         SR    R9,R1               DECR SPACE FOR DATA        11/84 DBC\nNWNOKYS1 SH    R9,ROVRHD           DECR FOR COUNT AREA OVHD   11/84 DBC\n         LR    R1,R9               COPY                       11/84 DBC\n         SR    R0,R0               CLEAR                      11/84 DBC\n         DR    R0,R7               GET # CELLS AVAILABLE FOR  11/84 DBC\n*                                  DATA AREA (+ OVERHEAD)     11/84 DBC\n         MR    R0,R7               CNVRT BACK TO ROUNDED DOWN 11/84 DBC\n*                                  BYTES                      11/84 DBC\n         AR    R1,R7               ADD IN SPACE IN THE REST - 11/84 DBC\n         BCTR  R1,0                 OF THE LAST CELL          11/84 DBC\n         SH    R1,TOLER            DECR DATA AREA OVERHEAD    11/84 DBC\n         BNP   NDFLBMIN            TOO MANY BLKS TO FIT       11/84 DBC\n         LR    R9,R1               COPY BACK TO R9            11/84 DBC\n         B     NDFLBLKS            DONE HERE                  11/84 DBC\n         SPACE 1                                              11/84 DBC\nOLDWAY1  LR    R1,R9               GET TRK CAPACITY           11/84 DBC\n         TM    FLAG,DVC2BOV        LB_OVHD = NLB_OVHD?        11/84 DBC\n         BNZ   DFLOHOK             YES, SKIP                  11/84 DBC\n         IC    R7,ROVRHD           NO, GET NLB_OVHD           11/84 DBC\n         AR    R1,R7               ADD TO TRK_CAP             11/84 DBC\n         IC    R7,ROVRHD+1         GET LB_OVHD                11/84 DBC\n         SR    R1,R7               TAKE BACK FROM TRK_CAP     11/84 DBC\nDFLOHOK  SR    R0,R0               CLEAR                      11/84 DBC\n         DR    R0,R15              GET BYTES AVAIL / RCD      11/84 DBC\n         LR    R9,R1               COPY BACK TO R9            11/84 DBC\n         SPACE 1                                              11/84 DBC\n         LTR   R8,R8               ANY KEY?                   11/84 DBC\n         BNZ   DFLBKEYD            YES, SKIP\n         IC    R7,ROVRHD+2         NO, GET UNKEYED UNDERHEAD\n         AR    R9,R7               ADD TO TRK CAPACITY\nDFLBKEYD SR    R9,R8               SUBTRACT OFF KEY LENGTH\n         IC    R7,ROVRHD           GET NLB_OVHD               11/84 DBC\n         TM    FLAG,DVC2BOV        OVERHEAD IN 2 SINGLE BYTES?\n         BZ    DFLBN2BO            YES, R7 IS OK\n         LH    R7,ROVRHD           NO, GET ANY BLOCK OVERHEAD\nDFLBN2BO SR    R9,R7               GET MAX BLKSIZE FOR CONDITIONS\n         BP    NDFLBLKS            CAN DO; PROCEED            11/84 DBC\nNDFLBMIN LA    R9,1                BLK_CNT WAS TOO LARGE; SET 11/84 DBC\n*                                  MINIMUM BLKSIZE            11/84 DBC\nNDFLBLKS CVD   R9,DSAWORK          CONVERT TO DECIMAL\n         ED    DSABUFF+TITBLKS-1(6),DSAWORK+5 CNVRT TO EBCDIC\n         SPACE 3\n         TM    FLAG,DVCCELLS       CELLULAR DEVICE?           11/84 DBC\n         BZ    OLDWAY2             NO, SKIP                   11/84 DBC\n         SPACE 1                                              11/84 DBC\n         SR    R7,R7               YES, CLEAR                 11/84 DBC\n         IC    R7,ROVRHD+2         GET CELL SIZE              11/84 DBC\n         SR    R14,R14             CLEAR RESIDUE REG          11/84 DBC\n         LTR   R15,R8              COPY KEYLEN; ANY?          11/84 DBC\n         BZ    NWNOKYS2            NO, SKIP                   11/84 DBC\n         AH    R15,TOLER           YES, ADD OVERHEAD          11/84 DBC\n         DR    R14,R7              CNVRT TO CELL COUNT        11/84 DBC\n         MR    R14,R7              CNVRT BACK TO ROUNDED UP   11/84 DBC\n*                                  BYTES                      11/84 DBC\nNWNOKYS2 LTR   R1,R9               GET DATALEN; EOF?          11/84 DBC\n         BNZ   NWNTEOF             NO, PROCEED                11/84 DBC\n         LR    R1,R7               YES, DATA AREA STILL TAKES 11/84 DBC\n*                                  A CELL                     11/84 DBC\nNWNTEOF  AH    R1,TOLER            ADD DATA AREA OVERHEAD     11/84 DBC\n         SR    R0,R0               CLEAR                      11/84 DBC\n         DR    R0,R7               CNVRT TO CELL COUNT        11/84 DBC\n         MR    R0,R7               CNVRT BACK TO ROUNDED UP   11/84 DBC\n*                                  BYTES                      11/84 DBC\n         AR    R1,R15              ADD SIZE OF KEY, IF ANY    11/84 DBC\n         AH    R1,ROVRHD           ADD COUNT AREA OVHD        11/84 DBC\n         SR    R15,R15             CLEAR                      11/84 DBC\n         ICM   R15,3,TRKCAP        GET L'TRACK                11/84 DBC\n         DR    R14,R1              CNVRT TO COUNT & RESIDUE   11/84 DBC\n         LR    R1,R14              COPY                       11/84 DBC\n         SR    R0,R0               CLEAR                      11/84 DBC\n         DR    R0,R7               CNVRT TO CELL COUNT        11/84 DBC\n         MR    R0,R7               CNVRT BACK TO ROUNDED DOWN 11/84 DBC\n*                                  BYTES                      11/84 DBC\n         AR    R1,R7               ADJUST                     11/84 DBC\n         BCTR  R1,0                ADJUST                     11/84 DBC\n         SR    R14,R14             ASSUME NO USEFUL RESIDUE   11/84 DBC\n         SH    R1,TOLER            ADJUST; RIGHT?             11/84 DBC\n         BNP   GOTRESDU            YES, DONE HERE             11/84 DBC\n         LR    R14,R1              NO, GET USEFUL RESIDUE     11/84 DBC\n         B     GOTRESDU            DONE HERE                  11/84 DBC\n         SPACE 1                                              11/84 DBC\nOLDWAY2  LA    R1,0(R8,R9)         GET KEYLEN+BLKSIZE         11/84 DBC\n         LR    R0,R1               COPY FOR NOT-LAST-BLOCK\n         TM    FLAG,DVCFTOL        APPLY TOLERANCE FACTOR TO \u00acLAST-BLK?\n         BZ    NTOLF               NO, SKIP\n         MH    R0,TOLER            YES, DO SO\n         SRL   R0,9                DROP THE FRACTION\nNTOLF    SR    R7,R7               CLEAR FOR \"IC\"'S\n         CLI   3(R5),0             ANY KEY?\n         BNE   GOTOVNK             YES, SKIP KEY-UNDERHEAD\n         IC    R7,ROVRHD+2         NO, GET UNDERHEAD VALUE\n         SR    R0,R7               ADJUST NOT-LAST-BLOCK\n         SR    R1,R7               ADJUST LAST-BLOCK\nGOTOVNK  IC    R7,ROVRHD           ASSUME NOT 2305\n         TM    FLAG,DVC2BOV        OVERHEAD IS 2 BYTES?\n         BZ    GOTNLB              NO, GOT NOT-LAST-BLOCK OVERHEAD\n         LH    R7,ROVRHD           YES, GET ANY-BLOCK-OVERHEAD\nGOTNLB   AR    R0,R7               ADD NOT-LAST-BLOCK OVERHEAD\n         TM    FLAG,DVC2BOV        2305, ETC.?\n         BO    GOTLB               YES, GOT ANY-BLOCK-OVERHEAD\n         IC    R7,ROVRHD+1         NO, GET LAST-BLOCK OVERHEAD\nGOTLB    AR    R1,R7               GET LAST-BLOCK LENGTH\n         SR    R15,R15             CLEAR                      11/84 DBC\n         ICM   R15,3,TRKCAP        GET L'TRACK                11/84 DBC\n         SR    R14,R14             CLEAR\n         DR    R14,R0              GET NOT-LAST-BLOCK CAPACITY\n         CR    R14,R1              ROOM FOR LAST BLOCK?\n         BL    GOTCPCTY            NO, SKIP\n         LA    R15,1(,R15)         YES, COUNT IT\n         SR    R14,R0              ADJUST RESIDULE (NEGATIVE)\n         SPACE 1                                              11/84 DBC\nGOTCPCTY SR    R1,R9               ISSOLATE LAST-BLOCK -      11/84 DBC\n         SR    R1,R8                OVERHEAD\n         SR    R14,R1              TAKE OFF FROM RESIDUE; ANY LEFT?\n         BNM   GOTRESDU            YES, PROCEED\n         SR    R14,R14             NO, CLEAR RESIDUE\nGOTRESDU MVC   DSABUFF+TITRSDU(5),=X'2020202120' EDIT MASK\n         CVD   R14,DSAWORK         CNVRT RESIDUE TO DECIMAL\n         ED    DSABUFF+TITRSDU-1(6),DSAWORK+5 CNVRT TO EBCDIC\n         MVC   DSABUFF+TITBPT(5),=X'2020202120' GET EDIT MASK 11/84 DBC\n         CVD   R15,DSAWORK         CNVRT BPT TO DECIMAL       11/84 DBC\n         ED    DSABUFF+TITBPT-1(6),DSAWORK+5 CNVRT TO EBCDIC  11/84 DBC\n         SPACE 3\n         LA    R1,DSABUFF          POINT TO MESSAGE\n         LA    R0,TITLEN           GET ITS LENGTH\n         TPUT  (1),(0),R           SEND THE MESSAGE\n         SPACE 3\nBLKSNEXT ICM   R4,7,9(R4)          NO, CHAIN TO NEXT BLKSIZE; ANY?\n         BNZ   BLKSLOOP            YES, LOOP TO PROCESS\nKEYLNEXT ICM   R5,7,9(R5)          CHAIN TO NEXT KEYLEN; ANY?\n         BNZ   KEYLLOOP            YES, LOOP TO PROCESS\nDEVTNEXT ICM   R3,7,9(R3)          NO, CHAIN TO NEXT DEVICE TYPE; ANY?\n         BNZ   DEVTLOOP            YES, LOOP TO PROCESS\n         DROP  R6                  RELEASE IEHDCONS BASE\n         SPACE 3\n         SR    R15,R15             SET AOK RC\nEXITGOOD #EXIT ((R14,R12)),RC=(R15) RETURN TO TMP\n         #DROP                     RELEASE PROGRAM BASE\n         DROP  ,                   RELEASE ALL BASES\n         EJECT\nDEVTCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT DEVT OPND CHK RTNE\n         L     R12,=A(BLKSPTRK)    ADJUST BASE ADDRESS\n         USING BLKSPTRK,R12        REDECLRAE THE PGM BASE\n         LM    R2,R3,0(R1)         POINT TO PDE AND DSA\n         LR    R11,R3              LOAD NORMAL DSA BASE\n         USING DSA,R11             DECLARE DSA BASE\n         L     R4,0(,R2)           NO, POINT TO STRING\n         CLI   0(R4),C'*'          OMITTED VALUE?\n         BNE   DNTSTAR             NO, PROCEED\nDSTAR    MVI   0(R2),X'FF'         YES, REMEMBER\n         B     EXITOK              RETURN TO PARSE\nDNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH\n         BCTR  R5,0                CNVRT TO MACHINE LENGTH\n         TM    6(R2),X'80'         OMITTED?\n         BNO   DSTAR               YES, SKIP\n         LTR   R5,R5               NO, NULL?\n         BM    DSTAR               YES, SKIP\n         SR    R15,R15             NO, CLEAR FOR TABLE SCAN\n         LA    R1,LKUPDVTB-LKUPDNME-1 POINT TO TABLE\nLKUPLOOP LA    R1,LKUPDNME+1(R15,R1) POINT TO NEXT ENTRY\n         CLI   0(R1),X'FF'         END OF TABLE?\n         BE    LKUPFAIL            YES, BAD STRING\n         IC    R15,LKUPDNLN(,R1)   NO, GET ENTRY'S LENGTH\n         CR    R15,R5              RIGHT ENTRY?\n         BNE   LKUPLOOP            NO, KEEP LOOPING\n         CLC   0(*-*,R4),LKUPDNME(R1) (EXECUTED INSTRUCTION)\n         EX    R15,*-6             MAYBE, CHECK AGAIN\n         BNE   LKUPLOOP            NO, KEEP LOOPING\n         MVC   0(1,R2),LKUPDNDX(R1) YES, SAVE THE DEVICE TYPE\n         B     EXITOK              GO RETURN TO PARSE\n         DROP  ,                   RELEASE BASES\n         EJECT\nBLKSCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT BLKSIZE CHECKING ROUTINE\n         L     R12,=A(BLKSPTRK)    RESET THE BASE REGISTER\n         USING BLKSPTRK,R12        REDECLARE IT\n         LM    R2,R3,0(R1)         POINT TO PDE AND DSA\n         LR    R11,R3              LOAD DSA BASE\n         USING DSA,R11             DECLARE DSA BASE\n         L     R4,0(,R2)           POINT TO BLKSIZE STRING\n         CLI   0(R4),C'*'          ASTERISK?\n         BNE   BNTSTAR             NO, PROCEED\nBSTAR    MVC   0(4,R2),=4C'*'      YES, SIGNEL OPND OMITTED   11/84 DBC\n         B     EXITOK              RETURN TO PARSE\nBNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH\n         BCTR  R5,0                CONVERT TO MACHINE LENGTH\n         TM    6(R2),X'80'         OMITTED?\n         BNO   BSTAR               YES, GO REMEMBER\n         LTR   R5,R5               NO, NULL?\n         BM    BSTAR               YES, GO REMEMBER\n         SPACE 1                                              11/84 DBC\n         LA    R14,1               NO, ASSUME BLKSIZE         11/84 DBC\n         CLI   0(R4),C'#'          BLOCK COUNT GIVEN?         11/84 DBC\n         BNE   BNTCNT              NO, PROCEED                11/84 DBC\n         SR    R5,R14              YES, DECR L'DIGITS; NULL?  11/84 DBC\n         BM    BSTAR               YES, TREAT AS B(0)         11/84 DBC\n         AR    R4,R14              NO, --> DIGITS             11/84 DBC\n         LNR   R14,R14             SET \"BLOCK COUNT\" SIGNAL   11/84 DBC\nBNTCNT   TM    0(R4),C'0'          VALID DIGIT?               11/84 DBC\n         BNO   EXITFAIL            NO, ERROR                  11/84 DBC\n         SPACE 1                                              11/84 DBC\n         PACK  DSAWORK(8),0(*-*,R4) (EXECUTED INSTRUCTION)\n         EX    R5,*-6              YES, PACK THE STRING\n         CVB   R15,DSAWORK         CONVERT TO BINARY\n         C     R15,=X'0000FFFF'    CHECK FOR MAX VALUE        11/84 DBC\n         BH    BLKS2LRG            ERROR\n         MR    R14,R14             OK, IF BLK_CNT; THEN MAKE  11/84 DBC\n*                                  NEGATIVE                   11/84 DBC\n         ST    R15,0(,R2)          RETURN THE CONVERTED VALUE\n         B     EXITOK              GO RETURN TO PARSE\n         DROP  ,                   RELEASE BASES\n         EJECT\nKEYLCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT KEYLEN VALIDITY CHECK\n         L     R12,=A(BLKSPTRK)    RESET BASE ADDRESS\n         USING BLKSPTRK,R12        REDECLARE IT\n         LM    R2,R3,0(R1)         POINT TO PDE AND DSA\n         LR    R11,R3              LOAD DSA BASE\n         USING DSA,R11             DECLARE DSA BASE\n         L     R4,0(,R2)           POINT TO KEYLEN VALUE STRING\n         CLI   0(R4),C'*'          IGNORE THIS?\n         BNE   KNTSTAR             NO, PROCEED\n         MVI   0(R2),X'FF'         YES, SIGNEL IT\n         B     EXITOK              RETURN TO PARSE\nKNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH\n         BCTR  R5,0                CONVERT TO MACHINE LENGTH\n         PACK  DSAWORK(8),0(*-*,R4) (EXECUTED INSTRUCTION)\n         EX    R5,*-6              PACK IT\n         CVB   R15,DSAWORK         CONVERT TO BINARY\n         C     R15,=A(255)         CHECK MAX VALUE\n         BH    KEYL2LRG            ERROR\n         ST    R15,0(,R2)          OK, RETURN CONVERTED VALUE\n         B     EXITOK              GO RETURN TO PARSE\n         DROP  ,                   RELEASE BASES\n         EJECT\n         USING BLKSPTRK,R12        DECLARE PROGRAM BASE\n         USING DSA,R11             DECLARE DSA BASE\n         SPACE 3\nEXITFAIL LA    R15,8               ERROR RC\n         B     EXIT\n         SPACE 1\nEXITOK   SR    R15,R15             SET AOK RC\nEXIT     #EXIT ((R14,R12)),RC=(R15) RETURN TO PARSE\n         SPACE 3\nLKUPFAIL LA    R1,LKUPFMSG-1\n         BAL   R2,TPUTERRM\n         B     EXITFAIL\n         SPACE 1\nBLKS2LRG LA    R1,BLKS2MSG-1\n         BAL   R2,TPUTERRM\n         B     EXITFAIL\n         SPACE 1\nKEYL2LRG LA    R1,KEYL2MSG-1\n         BAL   R2,TPUTERRM\n         B     EXITFAIL\n         SPACE 3\nTPUTERRM LA    R15,DSABUFF         GET SINK SCANNER\n         LTR   R5,R5               NULL OPERAND?\n         BM    OPNDNULL            YES, SKIP\n         MVC   DSABUFF(*-*),0(R4)  (EXECUTED INSTRUCTION)\n         EX    R5,*-6              NO, MOVE OPND TO MSG\n         ALR   R15,R5              ADVANCE SINK SCANNER\nOPNDNULL SR    R14,R14             CLEAR\n         IC    R14,0(,R1)          GET MSG LENGTH\n         MVC   1(*-*,R15),1(R1)    (EXECUTED INSTRUCTION)\n         EX    R14,*-6             MOVE MSG TO SINK\n         LA    R0,2(R14,R15)       POINT PAST EO MSG\n         LA    R1,DSABUFF          POINT TO START\n         SR    R0,R1               GET MSG LENGTH\n         TPUT  (1),(0),R           SEND THE MSG\n         BR    R2                  RETURN TO CALLER\n         DROP  ,                   RELEASE BASES\n         EJECT\n         PRINT NOGEN\n         SPACE 3\nPCL      IKJPARM DSECT=PDL\nPDLDEVT  IKJIDENT 'DASD DEVICE TYPE(S)',LIST,ASTERISK,UPPERCASE,       *\n               FIRST=ANY,OTHER=ANY,PROMPT='DASD DEVICE TYPE(S)',       *\n               MAXLNTH=10,VALIDCK=DEVTCHK,                             *\n               HELP='2301 2302 2303 2305-1 2305-2 2311 2314 2319 2321 3*\n               330 3330-1 MSS-3330 MSS-3330-1 3340-1 3340-2 3350 3375 O*\n               R 3380. ENTER AN ASTERISK TO SKIP THIS FIELD.'\nPDLBLKSK IKJKEYWD\n         IKJNAME 'BLKSIZE',SUBFLD=PCLBLKS\nPDLKEYLK IKJKEYWD\n         IKJNAME 'KEYLEN',SUBFLD=PCLKEYL\nPCLBLKS  IKJSUBF\nPDLBLKS  IKJIDENT 'NUMBER',LIST,ASTERISK,MAXLNTH=6,FIRST=ALPHANUM,     *\n               OTHER=NUMERIC,PROMPT='BLKSIZE',VALIDCK=BLKSCHK,         *\n               HELP='A PHYSICAL BLOCK LENGTH VALUE RANGING FROM 1 TO 65*\n               535 OR A # FOLLOWED BY A BLOCK COUNT (E.G., #6). ENTER A*\n                0 TO FIND THE MAXIMUM BLKSIZE. TO SKIP THIS FIELD, ENTE*\n               R AN ASTERISK.'                                11/84 DBC\nPCLKEYL  IKJSUBF\nPDLKEYL  IKJIDENT 'NUMBER',LIST,ASTERISK,MAXLNTH=3,FIRST=NUMERIC,      *\n               OTHER=NUMERIC,DEFAULT='0',VALIDCK=KEYLCHK,              *\n               HELP='A KEY LENGTH VALUE RANGING FROM 0 TO 255. TO SKIP *\n               THIS FIELD, ENTER AN ASTERISK.'\n         IKJENDP\n         SPACE 3\n         PRINT ON,GEN,NODATA\n         EJECT ,\n#        DS    0H\n*        DEVICE DESCRIPTIVE DATA\n         SPACE 3\n#2301    DS    0H                  2301 PARALLEL DRUM (OBSELETE)\n         DC    X'000000C7,00000001,FFFF0008,009D,5090'\n         DC    X'000000C7,0000,0019,0008,5003,BA3535,04'\n         DC    X'0200,3F,2D,00C8'\n         SPACE 3\n#2302    DS    0H                  2302 DISK STORAGE (OBSELETE)\n         DC    X'00F9002D,0000FFD3,FFFF002E,0051,13BD'\n         DC    X'00F5002D,00B8,00FA,002E,1378,511414,01'\n         DC    X'0219,16,0E,2C34'\n         SPACE 3\n#2303    DS    0H                  2303 SERIAL DRUM (OBSELETE)\n         DC    X'004F0009,0000FFF7,FFFF000A,002F,1390'\n         DC    X'004F0009,0000,0050,000A,131C,922626,00'\n         DC    X'0200,11,0C,0320'\n         SPACE 3\n#23051   DS    0H                  2305-1 FIXED HEAD STORAGE FACILITY\n         DC    X'00300000,0000FFF9,FFFF0008,0021,38F0'\n         DC    X'002F0007,0001,0030,0008,38E8,027ACA,09'\n         DC    X'0200,12,10,0180'\n         SPACE 3\n#23052   DS    0H                  2305-2 FIXED HEAD STORAGE FACILITY\n         DC    X'00600000,0000FFF9,FFFF0008,0048,3A12'\n         DC    X'005F0007,0001,0060,0008,3A0A,01215B,09'\n         DC    X'0200,22,1A,0300'\n         SPACE 3\n#2311    DS    0H                  2311 DISK STORAGE DRIVE (OBSELETE)\n         DC    X'00CA0009,0000FFF7,FFFF000A,003C,0E6E'\n         DC    X'00C70009,001E,00CB,000A,0E29,511414,01'\n         DC    X'0219,10,0A,07D0'\n         SPACE 3\n#2314    DS    0H                  DIRECT ACCESS STORAGE FACILITY\n#2319    DS    0H                  DIRECT ACCESS STORAGE FACILITY\n         DC    X'00CA0013,0000FFED,FFFF0014,0049,1CEA'\n         DC    X'00C70013,003C,00CB,0014,1C7E,922D2D,01'\n         DC    X'0216,19,11,0FA0'\n         SPACE 3\n#2321    DS    0H                  2321 DATA CELL DRIVE (OBSELETE)\n         DC    X'13090413,000000ED,FFFF0014,0041,07D0'\n         DC    X'13050413,0190,03E8,0014,07D0,641010,03'\n         DC    X'0219,08,05,4C90'\n         SPACE 3\n#3330    DS    0H                  3330 DISK STORAGE\n         DC    X'019A0012,0000FFEE,FFFF0013,0062,338B'\n         DC    X'01930012,0085,019B,0013,336D,BFBF38,01'\n         DC    X'0200,27,1C,1DFC'\n         SPACE 3\n#33301   DS    0H                  3330-1 DUAL DENSITY DISK STORAGE\n         DC    X'032E0012,0000FFEE,FFFF0013,0062,338B'\n         DC    X'03270012,0085,032F,0013,336D,BFBF38,01'\n         DC    X'0200,27,1C,3BF8'\n         SPACE 3\n#MS3330  DS    0H                  3330 MSS VIRTUAL DISK STORAGE\n         DC    X'019A0012,0000FFEE,FFFF0013,0062,338B'\n         DC    X'01980012,0026,019B,0013,336D,BFBF38,01'\n         DC    X'0200,27,1C,1E5B'\n         SPACE 3\n#MS33301 DS    0H                  3330-1 MSS VIRTUAL DUAL DENSITY DISK\n*                                  STORAGE\n         DC    X'032E0012,0000FFEE,FFFF0013,0062,338B'\n         DC    X'03280012,0072,032F,0013,336D,BFBF38,01'\n         DC    X'0200,27,1C,3C0B'\n         SPACE 3\n#33401   DS    0H                  3340-1 DISK\n         DC    X'015C000B,0000FFF5,FFFF000C,0032,2157'\n         DC    X'015B000B,000C,015D,000C,2157,F2F24B,01'\n         DC    X'0200,16,10,105C'\n         SPACE 3\n#33402   DS    0H                  3340-2 DISK\n         DC    X'02B9000B,0000FFF5,FFFF000C,0032,2157'\n         DC    X'02B7000B,0018,02BA,000C,2157,F2F24B,01'\n         DC    X'0200,16,10,20B8'\n         SPACE 3\n#3350    DS    0H                  3350 NON-REMOVABLE DISK STORAGE\n         DC    X'022F001D,0000FFE3,FFFF001E,0067,4B36'\n         DC    X'022A001D,0096,0230,001E,4B36,010B52,09'\n         DC    X'0200,2F,24,410A'\n         SPACE 3                                              11/84 DBC\n#3375    DS    0H                  3375 NON-REMOVABLE DISK    11/84 DBC\n         DC    X'03BF000B,0000FFF5,FFFF000C,0056,8FE0'        11/84 DBC\n         DC    X'03BE000B,000C,03C0,000C,8CA0,00E020,10'      11/84 DBC\n         DC    X'00BF,33,2B,2CF4'                             11/84 DBC\n         SPACE 3                                              11/84 DBC\n#3380    DS    0H                  3380 NON-REMOVABLE DISK    11/84 DBC\n         DC    X'0375000E,0000FFF2,FFFF000F,005D,C040'        11/84 DBC\n         DC    X'0374000E,000F,0376,000F,BB60,010020,10'      11/84 DBC\n         DC    X'010B,35,2E,33DB'                             11/84 DBC\n         EJECT\nLKUPDVTB DC    AL1((#2301-#)/KDEVSIZE,3),C'2301'\n         DC    AL1((#2302-#)/KDEVSIZE,3),C'2302'\n         DC    AL1((#2303-#)/KDEVSIZE,3),C'2303'\n         DC    AL1((#23051-#)/KDEVSIZE,5),C'2305-1'\n         DC    AL1((#23052-#)/KDEVSIZE,5),C'2305-2'\n         DC    AL1((#2311-#)/KDEVSIZE,3),C'2311'\n         DC    AL1((#2314-#)/KDEVSIZE,3),C'2314'\n         DC    AL1((#2319-#)/KDEVSIZE,3),C'2319'\n         DC    AL1((#2321-#)/KDEVSIZE,3),C'2321'\n         DC    AL1((#3330-#)/KDEVSIZE,3),C'3330'\n         DC    AL1((#33301-#)/KDEVSIZE,5),C'3330-1'\n         DC    AL1((#MS3330-#)/KDEVSIZE,7),C'MSS-3330'\n         DC    AL1((#MS33301-#)/KDEVSIZE,9),C'MSS-3330-1'\n         DC    AL1((#33401-#)/KDEVSIZE,5),C'3340-1'\n         DC    AL1((#33402-#)/KDEVSIZE,5),C'3340-2'\n         DC    AL1((#3350-#)/KDEVSIZE,3),C'3350'\n         DC    AL1((#3375-#)/KDEVSIZE,3),C'3375'              11/84 DBC\n         DC    AL1((#3380-#)/KDEVSIZE,3),C'3380'              11/84 DBC\n         DC    X'FF'\n         SPACE 1\nLKUPDNDX EQU   0                   DEVICE TYPE\nLKUPDNLN EQU   LKUPDNDX+1          DEVICE NAME LENGTH\nLKUPDNME EQU   LKUPDNLN+1          DEVICE NAME\n         SPACE 3\n         LTORG\n         EJECT ,\nTITLE    DS    0C\nTITDEVT  EQU   *-TITLE\n         DC    C'DEVICE      KEYLEN'\nTITKEYL  EQU   *-TITLE-3\n         DC    C'  BLKSIZE'\nTITBLKS  EQU   *-TITLE-5\n         DC    C'  BLOCKS/TRACK'\nTITBPT   EQU   *-TITLE-5\n         DC    C'  RESIDUE'\nTITRSDU  EQU   *-TITLE-5\nTITLEN   EQU   *-TITLE\n         SPACE 3\n         DC    AL1(L'LKUPFMSG-1)\nLKUPFMSG DC    C' - NOT A RECOGNIZABLE DASD DEVICE TYPE +'\n         SPACE 3\n         DC    AL1(L'BLKS2MSG-1)\nBLKS2MSG DC    C' - VALUE TOO LARGE FOR A BLKSIZE OR A BLOCK COUNT. MAX*\n                ALLOWED IS 65767 +'                           11/84 DBC\n         SPACE 3\n         DC    AL1(L'KEYL2MSG-1)\nKEYL2MSG DC    C' - VALUE TOO LARGE FOR A KEYLEN. MAX ALLOWED IS 255 +'\n         SPACE 3\n         DC    AL1(L'PARSFMSG-1)\nPARSFMSG DC    C' - PARSE ERROR CODE'\n         SPACE 3\n         END   BLKSPTRK\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMDPGM": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x17\\x00\\x85\\x04\\x8f\\x01\\x06\\x01/\\x10$\\x04\\xc2\\x04\\xb8\\x00\\x00\\xd7\\xf3\\xf9\\xf0@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "2006-01-12T10:24:17", "lines": 1218, "newlines": 1208, "modlines": 0, "user": "P390"}, "text": "CMDPGM   TITLE 'INITIAL DEFINITIONS'\n*************************************************************\n*                                                           *\n* MODULE NAME = CMDPGM.                                     *\n*                                                           *\n* ENTRY NAMES = COMMAND (ALIASES: CMD, APFCMD)              *\n*             = PROGRAM (ALIASES: PGM, APFPGM)              *\n*                                                           *\n* DESCRIPTIVE NAME = INTERFACE FOR THE EXECUTION OF         *\n*                    ARBITRARY PROGRAMS OR TSO COMMANDS.    *\n*                                                           *\n* STATUS = RELEASE 84A.                                     *\n*                                                           *\n* FUNCTION = THIS ROUTINE PROVIDES A FRIENDLY INTERFACE FOR *\n*            EXECUTING ARBITRARY PROGRAMS OR TSO COMMANDS   *\n*            FROM ARBITRARY LOAD LIBRARIES. THE ORIGINATING *\n*            LOAD LIBRARY MAY BE EITHER A LINK-LIBRARY, A   *\n*            JOB-LIBRARY, A STEP-LIBRARY, OR A              *\n*            TASK-LIBRARY.                                  *\n*                                                           *\n*            IF A \"TASKLIB\" DDNAME EXISTS, OR IF A          *\n*            TASK-LIBRARY DDNAME IS GIVEN (SEE THE HELP     *\n*            FILES), THEN THAT LIBRARY IS ESTABLISHED AS A  *\n*            TASK-LIBRARY FOR THE DURATION OF THE EXECUTION *\n*            OF THE DESIRED PROGRAM OR COMMAND.             *\n*                                                           *\n*            IF THIS PROGRAM IS ENTERED AUTHORIZED, THEN    *\n*            (AFTER APPROPRIATE PERMISSION CHECKS) THE      *\n*            PROGRAM OR COMMAND TO BE EXECUTED WILL BE      *\n*            EXECUTED AUTHORIZED REGUARDLESS OF WHETHER OR  *\n*            NOT IT COMES FROM AN AUTHORIZED LIBRARY.       *\n*                                                           *\n* PROCESSER = OS/VS ASSEMBLER.                              *\n*                                                           *\n* TYPE = TSO COMMAND PROCESSOR OR BATCH PROGRAM.            *\n*                                                           *\n* ATTRIBUTES = REENTRANT, REFRESHABLE, REUSABLE.            *\n*                                                           *\n* AUTHOR = DAVID B. COLE.                                   *\n*                                                           *\n* CHANGE LOG:                                               *\n*                                                           *\n*   2006/01/12 - ADJUSTED RMODE TO 31, AMODE TO 24.         *\n*                GOT RID OF PSCBATR2 FLAGS AND JUST         *\n*                TESTED PSCBATR1 FOR OPER (X'80')           *\n*                ONLY.  GOOD ENOUGH FOR DISTRIBUTION.       *\n*                YOU CHANGE YOUR OWN PERMIT MECHANISM       *\n*                ACCORDING TO TASTE.                        *\n*                                                           *\n*************************************************************\n*                                                           *\n* ENTRY POINT = PROGRAM.                                    *\n*                                                           *\n* ALIAS NAME = PGM, APFPGM.                                 *\n*                                                           *\n* COMMAND FORMAT = PROGRAM <PGM NAME>:<DDNAME> <OPERANDS>   *\n*                                                           *\n* FUNCTION = THE INDICATED PROGRAM IS GIVEN CONTROL WITH R1 *\n*            POINTING TO A POINTER TO A STANDARD OS PARM    *\n*            FIELD CONSTRUCTED FROM THE GIVEN OPERANDS.     *\n*                                                           *\n*            :<DDNAME> IS OPTIONAL. IF GIVEN, THEN THAT     *\n*            LIBRARY IS ESTABLISHED AS A TASK-LIBRARY FOR   *\n*            THE PROGRAM. IF OMITTED, THEN IF A \"TASKLIB\"   *\n*            DDNAME EXISTS, THEN THAT IS USED FOR THE       *\n*            TASK-LIBRARY. IF A COLON IS GIVEN WITHOUT A    *\n*            DDNAME, THEN NO TASK-LIBRARY IS ESTABLISHED    *\n*            REGARDLESS OF WHETHER OR NOT A \"TASKLIB\"       *\n*            DDNAME EXISTS.                                 *\n*                                                           *\n* ATTRIBUTES = THE APFPGM ALIAS SHOULD BE LINKED            *\n*              AUTHORIZED.                                  *\n*                                                           *\n*************************************************************\n*                                                           *\n* ENTRY POINT = COMMAND.                                    *\n*                                                           *\n* ALIAS NAME = CMD, APFCMD.                                 *\n*                                                           *\n* COMMAND FORMAT = COMMAND <CMD NAME>:<DDNAME> <OPERANDS>   *\n*                                                           *\n* FUNCTION = THE INDICATED TSO COMMAND PROCESSOR IS GIVEN   *\n*            CONTROL WITH R1 POINTING TO A CPPL.            *\n*                                                           *\n*            :<DDNAME> IS OPTIONAL. IF GIVEN, THEN THAT     *\n*            LIBRARY IS ESTABLISHED AS A TASK-LIBRARY FOR   *\n*            THE COMMAND. IF OMITTED, THEN IF A \"TASKLIB\"   *\n*            DDNAME EXISTS, THEN THAT IS USED FOR THE       *\n*            TASK-LIBRARY. IF A COLON IS GIVEN WITHOUT A    *\n*            DDNAME, THEN NO TASK-LIBRARY IS ESTABLISHED    *\n*            REGARDLESS OF WHETHER OR NOT A \"TASKLIB\"       *\n*            DDNAME EXISTS.                                 *\n*                                                           *\n* ATTRIBUTES = THE APFCMD ALIAS SHOULD BE LINKED            *\n*              AUTHORIZED.                                  *\n*                                                           *\n*************************************************************\n         TITLE 'IBM CONTROL BLOCKS'\nCMDPGM   CSECT ,\nCMDPGM   AMODE 31\nCMDPGM   RMODE 24\n         PRINT GEN\n         SPACE 3\n*************************************************************\n*        ASCB = ADDRESS SPACE CONTROL BLOCK                 *\n*        ASCB = DSECT AND BASE                              *\n*************************************************************\n         SPACE 1\n         IHAASCB ,\n         SPACE 3\n*************************************************************\n*        CDE = CONTENTS DIRECTORY ENTRY                     *\n*        CDENTRY = DSECT AND BASE                           *\n*************************************************************\n         SPACE 1\n         IHACDE ,\n         SPACE 3\n*************************************************************\n*        CPPL = COMMAND PROCESSOR PARAMETER LIST (TSO       *\n*               COMMANDS)                                   *\n*        CPPL = DSECT AND BASE                              *\n*************************************************************\n         SPACE 1\n         IKJCPPL ,\n         SPACE 3\n*************************************************************\n*        DCB = DATA CONTROL BLOCK                           *\n*        IHADCB = DSECT AND BASE                            *\n*************************************************************\n         SPACE 1\n         DCBD  DSORG=(PS,PO)\n         SPACE 3\n*************************************************************\n*        DEB = DATA EXTENT BLOCK (IOS)                      *\n*        AVT = APPENDAGE VECTOR TABLE (IOS)                 *\n*        DEB = AVT AND DEB BASIC SECTION DSECT              *\n*        DEB = AVT BASE                                     *\n*        DEBBASIC = BASIC SECTION BASE                      *\n*        DEBDASD = DIRECT ACCESS SECTION DSECT AND BASE     *\n*        DEBACSMD = ACCESS METHOD SECTIONS DSECT AND BASE   *\n*        DEBSUBNM = SUBROUTINE NAMES SECTION DSECT AND BASE *\n*        DEBXTN = EXTENSION SECTION DSECT AND BASE          *\n*************************************************************\n         SPACE 1\n         IEZDEB LIST=YES\n         SPACE 3\n*************************************************************\n*        ECT = ENVIRONMENT CONTROL TABLE (TSO)              *\n*        ECT = DSECT AND BASE                               *\n*************************************************************\n         SPACE 1\n         IKJECT ,\n         SPACE 3\n*************************************************************\n*        JSCB = JOB STEP CONTROL BLOCK                      *\n*        IEZJSCB = DSECT AND BASE                           *\n*************************************************************\n         SPACE 1\n         IEZJSCB ,\n         SPACE 3\n*************************************************************\n*        PSA = PREFIXED STORAGE AREA                        *\n*        PSA = DSECT AND BASE                               *\n*************************************************************\n         SPACE 1\n         IHAPSA ,\n         SPACE 3\n*************************************************************\n*        PSCB = PROTECTED STEP CONTROL BLOCK (TSO)          *\n*        PSCB = DSECT AND BASE                              *\n*************************************************************\n         SPACE 1\n         IKJPSCB ,\n         SPACE 3\n*************************************************************\n*        RB = REQUEST BLOCK                                 *\n*        RBPRFX = PREFIX AND BASIC SECTIONS DESCT           *\n*        RBPRFX = PREFIX SECTION BASE                       *\n*        RBBASIC = BASIC SECTION BASE                       *\n*************************************************************\n         SPACE 1\n         IHARB ,\n         SPACE 3\n*************************************************************\n*        S99 = SVC 99 PARAMETERS (DYNAMIC ALLOCATION)       *\n*        S99RBP = SVC 99 INPUT REQUEST BLOCK POINTER DSECT  *\n*                 AND BASE                                  *\n*        S99RB = SVC 99 INPUT REQUEST BLOCK DSECT AND BASE  *\n*        S99TUPL = SVC 99 TEXT UNITS POINTER LIST DSECT AND *\n*                  BASE                                     *\n*        S99TUNIT = SVC 99 TEXT UNIT DSECT AND BASE         *\n*        S99TUFLD = SVC 99 TEXT UNIT FIELDS DSECT AND BASE  *\n*************************************************************\n         SPACE 1\n         IEFZB4D0 ,\n         SPACE 3\n*************************************************************\n*        TEXT KEY NAMES FOR SVC 99 (DYNAMIC ALLOCATION)     *\n*        SVC99KYS = DSECT                                   *\n*************************************************************\n         SPACE 1\n         IEFZB4D2 ,\n         SPACE 3\n*************************************************************\n*        TCB = TASK CONTROL BLOCK                           *\n*        TCBFIX = PREFIX AND BASIC SECTIONS DSECT           *\n*        TCBFIX = PREFIX SECTION BASE                       *\n*        TCB = BASIC SECTION BASE                           *\n*        TCBXTNT2 = COMMON EXTENSION DSECT AND BASE         *\n*************************************************************\n         SPACE 1\n         IKJTCB LIST=YES\n         SPACE 3\n*************************************************************\n*        TIOT = TASK INPUT/OUTPUT TABLE                     *\n*        DSECT CARD NOT GENERATED                           *\n*        TIOCNJOB = BASIC SECTION BASE                      *\n*        TIOENTRY = DD ENTRY BASE                           *\n*        TIOESTTB = DEVICE ENTRY BASE                       *\n*************************************************************\n         SPACE 1\nTIOT     DSECT ,\n         IEFTIOT1 ,\n         SPACE 3\n*************************************************************\n*        UPT = USER PROFILE TABLE (TSO)                     *\n*        UPT = DSECT AND BASE                               *\n*************************************************************\n         SPACE 1\n         IKJUPT ,\n         SPACE 3\n*************************************************************\n*        STANDARD REGISTER NAMES                            *\n*************************************************************\n         SPACE 1\n         #REGS R\n         SPACE 3\n         PRINT ON,GEN,NODATA\n         TITLE 'DYNAMIC STORAGE AREA'\n*************************************************************\n*        DSAT -- LOCAL DYNAMIC STORAGE AREA                 *\n*************************************************************\n         SPACE 1\nDSAT     #DSA  ,                   STANDARD REGISTER SAVE AREA\n         SPACE 3\nDSATDATA DS    0X                  START OF DATA AREA\n         SPACE 1\n*************************************************************\n*        VARIOUS STANDARD REGISTER SAVE AREAS               *\n*************************************************************\n         SPACE 1\nDSASAVE2 DS    18A                 USED BY DBCLOADR\n         SPACE 3\n*************************************************************\n*        MISCELLANEOUS LOCAL SUBROUTINE SAVE AREAS          *\n*************************************************************\n         SPACE 1\nSAVEPUM1 DS    4A                  PUTMSG1\nSAVEPUM2 DS    4A                  PUTMSG2\n         SPACE 3\n*************************************************************\n*        DYNAMIC ALLOCATION PARAMETERS                      *\n*************************************************************\n         SPACE 1\nDALPLIST DS    0F\n         DC    AL1(S99RBPND),AL3(DALRB)\n         SPACE 1\nDALRB    DS    0F\n         DC    AL1(DALRBLEN,S99VRBIN,S99NOMNT,0)\n         DC    2X'0000'\n         DC    A(DALTEXTP)\n         DC    XL4'00'\n         DC    4B'00000000'\nDALRBLEN EQU   *-DALRB\n         SPACE 1\nDALTEXTP DS    0F\n         DC    AL1(S99TUPLN),AL3(LIBDDNAM)\nDALTEXT  DS    0H\nLIBDDNAM DC    Y(DINDDNAM,1,8)\nDALTEXTL EQU   *-DALTEXT\nLIBDDN   DS    CL8\n         SPACE 1\n         ORG   ,\n         SPACE 3\n*************************************************************\n*        DCB AND OPEN PLIST FOR TASKLIB                     *\n*************************************************************\n         SPACE 1\nTSKSAM   DS    0F\n         PRINT NOGEN\nTSKDCB   DCB   DDNAME=*-*,DSORG=PO,MACRF=R\n         PRINT ON,GEN,NODATA\n         SPACE 1\nTSKOPEN  OPEN  TSKDCB,MF=L\nTSKSAML  EQU   *-TSKSAM\n         SPACE 3\n*************************************************************\n*        ATTACH PARAMETER LIST                              *\n*************************************************************\n         SPACE 1\nDSATTACH ATTACH EPLOC=TSOCMDN,ECB=TERMECB,SHSPV=78,SZERO=NO,           *\n               TASKLIB=*-*,TERM=NO,SF=L\n         SPACE 3\n*************************************************************\n*        WTO BUFFER AND MESSAGE CONSTRUCTION AREA.          *\n*************************************************************\n         SPACE 1\nWTO      DS    0F\nWTOHEAD  DS    XL4\nWTOTEXT  DS    CL256\nWTOTAIL  DS    XL4\n         SPACE 3\n*************************************************************\n*        MISCELLANEOUS                                      *\n*************************************************************\n         SPACE 1\nCMDNAME  DS    CL8                 NAME OF COMMAND OR PROGRAM TO BE\n*                                  DEBUGGED\nTLIBDDN  DS    CL8                 ALTERNATE DDNAME FOR TASKLIB\n         SPACE 1\nDSAPARMA DS    A                   A(PARM FIELD OR CPPL)\nPARMDATA DS    A                   --> PAST COMMAND NAME TO REAL\n*                                  PARM DATA (BATCH ONLY)\nDSABASER DS    A                   COMMAND'S BASE ADDRESS\nDSACMD   DS    A                   A(COMMAND PROCESSOR)\nTERMECB  DS    A                   TERMINATION ECB\nDSATCB   DS    A                   A(SUBTASK TCB)\nPARAMETR DS    A                   R1 VALUE TO PASS TO PGM/CMD\n         SPACE 1\nDSACC    DS    H                   SUB COMMAND COMPLETION CODE\nPARMDATL DS    H                   LENGTH OF REAL PARM DATA (BATCH\n*                                  ONLY)\n         SPACE 1\nTSOCMDN  DS    CL8                 NAME USED BY ATTACH\n         SPACE 3\n*************************************************************\n*        FLAG BYTE                                          *\n*************************************************************\n         SPACE 1\nDSATFLAG DS    B                   FLAG BYTE\nCALLED   EQU   B'10000000'         PROGRAM (NOT COMMAND)\nBATCH    EQU   B'01000000'         RUNNING IN THE BATCH\nNOMSGID  EQU   B'00100000'         DELETE MSGID'S FROM MESSAGES\nIAMAUTHD EQU   B'00010000'         I AM RUNNING AUTHORIZED\nTLIBREQ  EQU   B'00001000'         A TASKLIB DDNAME IS REQUIRED\n         SPACE 3\n*************************************************************\n*        END OF DYNAMIC STORAGE AREA                        *\n*************************************************************\n         SPACE 1\nDSAZ     DS    0H\nDSALEN   EQU   DSAZ-DSAT\n         TITLE 'REGISTER AND OTHER EQUATES'\n*************************************************************\n*        ADDITIONAL REGISTER EQUATES                        *\n*************************************************************\n         SPACE 1\n         #REGS (BASEREG,R12),      COMMAND & CMDLOADR BASE REG         *\n               (DSATREG,R11)       DSATDATA PTR FOR COMMAND & LOADR\n         TITLE 'COMMAND PROCESSOR ATTACHER'\n*************************************************************\n*        ENTRY POINTS. SET A SIGNAL DISTINGUISHING THEM.    *\n*************************************************************\n         SPACE 1\nCMDPGM   CSECT ,\n         SPACE 1\n         ENTRY COMMAND,CMD,APFCMD  ALIAS NAMES\nCOMMAND  DS    0H                  ALIAS\nCMD      DS    0H                  ALIAS\nAPFCMD   SR    R0,R0               SIGNAL 'COMMAND'\n         B     COMMON-COMMAND(,R15) GO TO COMMON CODE\n         SPACE 1\n         ENTRY PROGRAM,PGM,APFPGM  ALIAS NAMES\nPROGRAM  DS    0H                  ALIAS\nPGM      DS    0H                  ALIAS\nAPFPGM   LA    R0,1                SIGNAL 'PROGRAM'\n         SPACE 3\n*************************************************************\n*        REENTRANT ENTRY LINKAGE                            *\n*************************************************************\n         SPACE 1\nCOMMON   BALR  R15,0               LOAD TEMP BASE\nBASE     #ENTER COMMAND/PROGRAM,ESDTYPE=NONE,                          *\n               SAVTYPE=(RENT,(DSALEN,1)),BASES=(BASEREG)\n         LA    DSATREG,DSATDATA-DSAT(,R13) --> DATA AREA\n         USING DSATDATA,DSATREG    DCL DATA AREA BASE\n         SPACE 3\n*************************************************************\n*        INITIALIZE THE DSA                                 *\n*************************************************************\n         SPACE 1\n         ST    R1,DSAPARMA         SAVE A(PARM FIELD OR CPPL)\n         ST    BASEREG,DSABASER    SAVE COMMAND'S BASE ADDRESS\n         SPACE 1\n         LTR   R0,R0               PROGRAM?\n         BZ    CMDED               NO, COMMAND\n         OI    DSATFLAG,CALLED     YES, REMEMBER\nCMDED    DS    0H\n         SPACE 3\n*************************************************************\n*        IF I AM RUNNING AUTHORIZED, VERIFY THAT MY CALLER  *\n*        IS PERMITTED TO CALL ME.                           *\n*************************************************************\n         SPACE 1\n         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=1 AM I SPECIAL?\n         LTR   R15,R15             AM I SPECIAL?\n         BNZ   PERMIT              NO, PERMIT MY USE\n         OI    DSATFLAG,IAMAUTHD   YES, REMEMBER\n         EJECT ,\n*************************************************************\n*        THE FOLLOWING IS COMPUTER CENTER DEPENDANT         *\n*        AUTHORITY CHECKING CODE.                           *\n         MNOTE 0,'  IMPORTANT -- REPLACE THE FOLLOWING CODE WITH       *\n               *'\n         MNOTE 0,'  AUTHORITY CHECKING CODE APPROPRIATE FOR YOUR       *\n               *'\n         MNOTE 0,'  COMPUTER CENTER.                                   *\n               *'\n*************************************************************\n         SPACE 1\n*        ALWFLAGS ,               PSCBATR2 FLAGS SET AT COLE'S OLD SITE\n         SPACE 1\n         L     R1,PSAAOLD-PSA      --> ASCB\n         USING ASCB,R1             DCL ASCB BASE\n         ICM   R15,15,ASCBJBNI     INITIATED (BATCH) JOB?\n         BNZ   INBATCH             YES, GO TEST JOBNAME\n         ICM   R0,15,ASCBTSB       NO, TSO JOB?\n         BZ    PERMIT              NO, STC; PERMIT ACCESS\n         DROP  R1                  YES, RELEASE ASCB BASE\n         SPACE 1\nINTSO    L     R1,PSATOLD-PSA      --> MY TCB\n         L     R1,TCBJSCB-TCB(,R1) --> ITS JSCB\n         L     R1,JSCBACT-IEZJSCB(,R1) --> ACTIVE JSCB\n         ICM   R1,15,JSCBPSCB-IEZJSCB(R1) --> PSCB; EXIST?\n         BZ    PROHIBIT            NO (STRANGE); DENY PERMISSION\n         TM    PSCBATR1-PSCB(R1),X'80'      AT LEAST OPER PRIVILEGE?\n         BNZ   PERMIT              YES, PERMIT MY USE\n         B     PROHIBIT            NO, DENY PERMISSION\n         SPACE 1\nINBATCH  CLC   =C'J0PD',0(R15)     PRODUCT DEVELOPMENT?\n         BE    PERMIT              YES, PERMIT MY USE\n         CLC   =C'J0PS',0(R15)     NO, PRODUCT SUPPORT?\n         BE    PERMIT              YES, PERMIT MY USE\n         SPACE 1\n*************************************************************\n*        END OF COMPUTER CENTER DEPENDANT AUTHORITY         *\n*        CHECKING CODE.                                     *\n*************************************************************\n         EJECT ,\n*************************************************************\n*        AUTHORIZED ACCESS HAS BEEN DENIED. BUILD A         *\n*        MISSLEADING ERROR MESSAGE, AND EXIT.               *\n*************************************************************\n         SPACE 1\nPROHIBIT MVC   WTOTEXT(18),=C'IKJ56500I COMMAND ' TEXT\n         LA    R1,WTOTEXT+16       SCANNER\n         L     R15,PSATOLD-PSA     --> MY TCB\n         L     R15,TCBRBP-TCB(,R15) --> MY PRB (ASSUMED)\n         ICM   R15,7,RBCDE1-RBBASIC(R15) --> MY CDE; DEFINED?\n         BZ    NOPGMNAM            NO, SKIP\n         MVC   2(L'CDNAME,R1),CDNAME-CDENTRY(R15) GET MY NAME\n         LA    R1,2+L'CDNAME(,R1)  ADVANCE SCANNER\n         BALR  R14,0               LOOPER\n         BCTR  R1,0                BACK SCAN\n         TM    0(R1),255-C' '      TRAILING BLANK?\n         BZR   R14                 YES, CONTINUE BACKSCANNING\nNOPGMNAM MVC   1(10,R1),=C' NOT FOUND' NO, APPEND TEXT\n         #TEST SIZE=(L'WTOTEXT,GE,18+L'CDNAME+10)\n         LA    R0,WTOTEXT-11       --> SO-MSG\n         SR    R1,R0               GET L'MSG\n         STC   R1,WTOTEXT-1        STORE\n         LA    R2,WTOTEXT-1        --> MSG\n         B     ERROR               GO DISPLAY AND EXIT\n         SPACE 3\n*************************************************************\n*        ACCESS (AUTHORIZED OR NON-AUTHORIZED) HAS BEEN     *\n*        GRANTED.                                           *\n*************************************************************\n         SPACE 1\nPERMIT   DS    0H\n         SPACE 3\n*************************************************************\n*        DETERMINE WHETHER WE ARE RUNNING IN TSO OR IN THE  *\n*        BATCH WITHOUT THE TMP. IN THE LATTER CASE,         *\n*        DISALLOW \"COMMAND\".                                *\n*************************************************************\n         SPACE 1\n         L     R1,PSATOLD-PSA      --> MY TCB\n         L     R1,TCBJSCB-TCB(,R1) --> JSCB\n         L     R1,JSCBACT-IEZJSCB(,R1) --> ACTIVE JSCB\n         ICM   R1,15,JSCBPSCB-IEZJSCB(R1) --> PSCB; EXIST?\n         BNZ   INTSO2              YES, RUNNING UNDER A TMP\n*                                  EITHER IN TSO OR IN BATCH\n         OI    DSATFLAG,BATCH      NO, RUNNING IN BATCH\n*                                  WITHOUT A TMP\n         SPACE 1\n         LA    R2,CANTCMD-1        --> POSSIBLE ERR MSG\n         TM    DSATFLAG,CALLED     PROGRAM?\n         BZ    ERROR               NO, COMMAND; TERMINATE\n         SPACE 3\n*************************************************************\n*        RUNNING IN THE BATCH WITHOUT A TMP. ISSOLATE DATA  *\n*        FROM THE PARM FIELD.                               *\n*************************************************************\n         SPACE 1\n         LA    R2,BADPARM-1        --> POSSIBLE ERROR MSG\n         ICM   R1,15,DSAPARMA      --> PARM PLIST; EXIST?\n         BZ    ERROR               NO, TERMINATE\n         L     R1,0(,R1)           --> PARM\n         N     R1,=X'7FFFFFFF'     PURIFY; EXIST?\n         BZ    ERROR               NO, TERMINATE\n         LH    R0,0(,R1)           YES, GET ITS LENGTH\n         LTR   R0,R0               PARM FIELD GIVEN?\n         BNP   ERROR               NO, TERMINATE\n         LA    R1,2(,R1)           YES, --> DATA\n         B     DATASCAN            GO SCAN IT\n         SPACE 3\n*************************************************************\n*        RUNNING UNDER A TMP (EITHER IN TSO OR IN THE       *\n*        BATCH). SET THE MSGID CONTROL FLAG APPROPRIATELY.  *\n*************************************************************\n         SPACE 1\nINTSO2   L     R1,DSAPARMA         --> CPPL\n         USING CPPL,R1             DCL CPPL BASE\n         L     R15,CPPLUPT         --> UPT\n         TM    UPTSWS-UPT(R15),UPTMID DISPLAY MSGID'S?\n         BNZ   GOTMIDSW            YES, PROCEED\n         OI    DSATFLAG,NOMSGID    NO, REMEMBER\nGOTMIDSW DS    0H\n         SPACE 3\n*************************************************************\n*        ISSOLATE DATA FROM THE COMMAND BUFFER.             *\n*************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF         --> COMMAND BUFFER\n         DROP  R1                  RELEASE CPPL BASE\n         LH    R0,0(,R1)           GET L'CBUF\n         AR    R0,R1               --> PAST CBUF\n         SPACE 1\n         LA    R14,4(,R1)          --> CLEARANCE SINK\n         LH    R15,2(,R1)          GET CLEARANCE LENGTH\n         L     R1,=AL1(C' ',0,0,0) GET CLEARANCE CONTROL\n         MVCL  R14,R0              CLEAR ORIGINAL COMMAND NAME\n         LR    R1,R14              --> TARGET COMMAND/PROGRAM NAME\n         SPACE 1\n         LA    R2,BADCBUF-1        --> POSSIBLE ERROR MSG\n         SR    R0,R1               GET L'OPERANDS; NULL?\n         BNP   ERROR               YES, ERROR\n         SPACE 1\n         LA    R2,IECNS-1          NO, --> POSSIBLE ERROR MSG\n         CLI   0(R1),C'%'          IMPLICIT EXEC REQ?\n         BE    ERROR               YES, ERROR\n         SPACE 1\n         LA    R2,NIA-1            NO, --> POSSIBLE INFO MSG\n         CLI   0(R1),C'?'          HELP REQUESTED?\n         BE    ERROR               YES, ERROR\n         SPACE 3\n*************************************************************\n*        NOW SCAN THE DATA TO EXTRACT THE DESIRED PROGRAM   *\n*        OR COMMAND NAME.                                   *\n*************************************************************\n         SPACE 1\nDATASCAN TM    0(R1),C'0'          YES, START WITH A DIGIT?\n         BO    BPGMERR             YES, INVALID\n         LR    R14,R1              NO, SAVE SO-PARMS\n         SPACE 1\nBPGMSCAN SR    R2,R2               CLEAR FOR INSERT\n         TRT   0(1,R1),VALID       TEST NEXT CHARACTER\n         B     *+4(R2)             IS IT VALID?\n         B     BPGMERR             +0 NO, INVALID PGM NAME\n         B     BPGMGOTN            +4 DELIMITER; EO-NAME\n         LA    R1,1(,R1)           +8 YES, ADVANCE THE SCANR\n         BCT   R0,BPGMSCAN         LOOP FOR NEXT CHARACTER\n         SPACE 1\nBPGMGOTN LR    R15,R1              SAVE EO-CMD\n         SR    R1,R14              GET L'CMD; NULL?\n         BNP   BPGMERR             YES, INVALID\n         CH    R1,=Y(L'CMDNAME)    NO, TOO LONG?\n         BNH   BPGMOK              NO, PROCEED\n         SPACE 1\nBPGMERR  LA    R2,CNSE-1           YES, --> ERROR MSG\n         B     ERROR               GO SEND IT\n         SPACE 1\nBPGMOK   MVC   CMDNAME,=CL(L'CMDNAME)' ' CLEAR THE NAME BUFFER\n         BCTR  R1,0                ADJ L'NAME FOR 'EX'\n         OC    0(*-*,R14),CMDNAME  (EXECUTED)\n         EX    R1,*-6              UPCASE THE NAME\n         MVC   CMDNAME(*-*),0(R14) (EXECUTED)\n         EX    R1,*-6              COPY IT TO LOCAL BUFFER\n         SPACE 3\n*************************************************************\n*        CONTINUE SCANNING TO EXTRACT A TASKLIB DDNAME, IF  *\n*        ANY.                                               *\n*************************************************************\n         SPACE 1\n         MVC   TLIBDDN,=CL(L'TLIBDDN)'TASKLIB' DEFAULT DDNAME\n         LTR   R0,R0               ANY MORE DATA?\n         BNP   NODDN               NO, SKIP\n         CLI   0(R15),C':'         YES, IS A TASKLIB DDNAME GIVEN?\n         BNE   NODDN               NO, SKIP\n         MVI   0(R15),C' '         YES, CLEAR\n         MVC   TLIBDDN,=CL(L'TLIBDDN)' ' CLEAR THE NAME BUFFER\n         LA    R15,1(,R15)         ADVANCE SCANNER\n         BCT   R0,BDDNMORE         DECR RESIDUE & PROCEED\n         B     NODDN               NO MORE; DONE HERE\n         SPACE 1\nBDDNMORE TM    0(R15),C'0'         START WITH A DIGIT?\n         BO    BDDNERR             YES, INVALID\n         LR    R1,R15              NO, COPY SO-PARMS\n         SPACE 1\nBDDNSCAN SR    R2,R2               CLEAR FOR INSERT\n         TRT   0(1,R1),VALID       TEST NEXT CHARACTER\n         B     *+4(R2)             IS IT VALID?\n         B     BDDNERR             +0 NO, INVALID PGM NAME\n         B     BDDNGOTN            +4 DELIMITER; EO-NAME\n         LA    R1,1(,R1)           +8 YES, ADVANCE THE SCANR\n         BCT   R0,BDDNSCAN         LOOP FOR NEXT CHARACTER\n         B     BDDNGOT2            PROCEED\n         SPACE 1\nBDDNGOTN CLI   0(R1),C':'          EO-DDN; IS DELIM OK?\n         BE    BDDNERR             NO, ERROR\nBDDNGOT2 LR    R14,R1              YES, SAVE EO-DDN\n         SR    R1,R15              GET L'DDN; NULL?\n         BNP   NULLDDN             YES, DONE\n         CH    R1,=Y(L'TLIBDDN)    NO, TOO LONG?\n         BNH   BDDNOK              NO, PROCEED\n         SPACE 1\nBDDNERR  LA    R2,BADDDN-1         YES, --> ERROR MSG\n         B     ERROR               GO SEND IT\n         SPACE 1\nBDDNOK   OI    DSATFLAG,TLIBREQ    \"TLIB IS REQUIRED\"\n         BCTR  R1,0                ADJ L'NAME FOR 'EX'\n         OC    TLIBDDN(*-*),0(R15) (EXECUTED)\n         EX    R1,*-6              COPY AND UPCASE THE NAME TO BUFFER\n         SPACE 1\nNULLDDN  BCTR  R15,0               BACK UP ONE\n         MVC   1(*-*,R15),0(R15)   (EXECUTED)\n         EX    R1,*-6              BLANK OUT THE DDNAME\n         LR    R15,R14             ADVANCE SCANNER\nNODDN    DS    0H\n         SPACE 3\n*************************************************************\n*        NOW LOCATE THE START OF, AND DETERMINE THE LENGTH  *\n*        OF THE OPERANDS/PARMS TO BE PASSED TO THE TARGET   *\n*        COMMAND/PROGRAM.                                   *\n*************************************************************\n         SPACE 1\n         LTR   R0,R0               ANY MORE DATA?\n         BNP   SOOPNDS             NO, SKIP\n         MVI   0(R15),C' '         YES, CHANGE POSSIBLE C',' TO C' '\n         BALR  R14,0               LOOPER\n         TM    0(R15),255-C' '     LEADING DELIMITER?\n         BNZ   SOOPNDS             NO, GOT OPERANDS\n         LA    R15,1(,R15)         YES, ADVANCE\n         BCTR  R0,R14              AND LOOP\n         SPACE 1\nSOOPNDS  ST    R15,PARMDATA        YES, SAVE DATA POINTER\n         STH   R0,PARMDATL         AND SAVE L'DATA\n         SPACE 3\n*************************************************************\n*        CHECK TO SEE IF THE USE OF A TASKLIB IS TO BE      *\n*        BYPASSED.                                          *\n*************************************************************\n         SPACE 1\n         CLI   TLIBDDN,C' '        WAS A BLANK TLIB DDNAME GIVEN?\n         BE    TSKLGOTN            YES, FORGET IT\n         SPACE 3\n*************************************************************\n*        DETERMINE IF THE DDNAME TASKLIB HAS BEEN ASSIGNED  *\n*        AS A TASK LIBRARY TO EITHER THE CURRENT TASK OR    *\n*        TO ANY ORIGINATING TASK OF THE CURRENT TASK.       *\n*************************************************************\n         SPACE 1\n         L     R1,PSATOLD-PSA      --> OUR TCB\n         USING TCB,R1              DCL TCB BASE\nTSKLSRCH ICM   R15,7,TCBJLB+1      JOB-, STEP-, | TASK-LIBRARY EXIST?\n         BZ    TSKLCLMB            NO, GO GET MOMMY\n         USING IHADCB,R15          YES, DCB DCB BASE\n         TM    DCBOFLGS,DCBOFOPN   IS THE LIBRARY DCB OPEN?\n         BZ    TSKLCLMB            NO (VERY STRANGE), GO GET MOMMY\n         LH    R15,DCBTIOT         YES, GET TIOT DD ENTRY OFFSET\n         DROP  R15                 RELEASE DCB BASE\n         A     R15,TCBTIO          + A(TIOT)\n         USING TIOENTRY,R15        = A(LIB'S DD ENTRY IN THE TIOT)\n         CLC   TIOEDDNM,TLIBDDN    DDNAME = 'TASKLIB'?\n         BE    TSKLGOTN            YES, NO NEED TO RESPECIFY\n         DROP  R15                 NO, RELEASE TIOT DD ENTRY BASE\nTSKLCLMB ICM   R1,7,TCBOTC+1       --> MOMMY; EXIST?\n         BNZ   TSKLSRCH            YES, GO CHECK IT OUT\n         DROP  R1                  NO, I MUST BE GOD\n         SPACE 3\n*************************************************************\n*        SEE IF A TASKLIB DDNAME EXISTS.                    *\n*************************************************************\n         SPACE 1\n         LA    R1,DALRB\n         ST    R1,DALPLIST\n         MVI   DALPLIST,S99RBPND   PLIST TERMINATER\n         MVI   S99RBLN-S99RB+DALRB,DALRBLEN L'RB\n         MVI   S99VERB-S99RB+DALRB,S99VRBIN\n         MVI   S99FLAG1-S99RB+DALRB,S99NOMNT\n         LA    R1,DALTEXTP         TEXT KEYS VECTOR\n         ST    R1,S99TXTPP-S99RB+DALRB\n         LA    R14,LIBDDNAM\n         ST    R14,DALTEXTP        TEXT KEY VECTOR\n         MVI   DALTEXTP,S99TUPLN   VECTOR TERMINATER\n         MVC   DALTEXT(DALTEXTL),MDLTEXT TEXT KEYS\n         MVC   LIBDDN,TLIBDDN      INSERT THE DDNAME\n         LA    R1,DALPLIST         --> PLIST\n         DYNALLOC ,                ATTEMPT DYNAMIC ALLOCATION\n         LTR   R15,R15             AOK?\n         BZ    TLIBOPEN            YES, PROCEED\n         SPACE 1\nTLIBFAIL TM    DSATFLAG,TLIBREQ    NO, IS A TASKLIB REQUIRED?\n         BZ    TSKLGOTN            NO, FORGET TASKLIB\n         LA    R2,NOTLIB-1         YES, --> ERROR MSG\n         B     ERROR               EXIT\n         SPACE 3\n*************************************************************\n*        THE DDNAME TASKLIB EXISTS. OPEN THE LIBRARY DATA   *\n*        AND SET IT UP TO BE A TASK LIBRARY.                *\n*************************************************************\n         SPACE 1\nTLIBOPEN MVC   TSKSAM(TSKSAML),MDLSAM DCB AND OPEN PLIST\n         #TEST SIZE=(TSKSAML,EQ,MDLSAML)\n         MVC   DCBDDNAM-IHADCB+TSKDCB,LIBDDN DDNAME\n         OPEN  (TSKDCB,INPUT),MF=(E,TSKOPEN) OPEN THE TASK LIBRARY\n         SPACE 1\n         TM    DCBOFLGS-IHADCB+TSKDCB,DCBOFOPN OPEN OK?\n         BNZ   TSKOPNED            YES, PROCEED\n         XC    TSKOPEN,TSKOPEN     NO, CLEAR THE POINTER\n         B     TLIBFAIL            GO CHECK FOR REQUIRED\nTSKOPNED DS    0H\n         SPACE 3\n*************************************************************\n*        IF I AM SPECIAL, THEN INSURE THAT I CAN LOAD       *\n*        PROGRAMS FROM THE TASK-LIBRARY.                    *\n*************************************************************\n         SPACE 1\n         TM    DSATFLAG,IAMAUTHD   AM I SPECIAL?\n         BZ    TSKLGOTN            NO, SKIP\n         L     R2,DCBDEBAD-IHADCB+TSKDCB YES, --> TSKLIB'S DEB\n         USING DEBBASIC,R2         DCL DEB BASE\n         TM    DEBFLGS1,DEBAPFIN   AUTHORIZED LIBRARY?\n         BNZ   TSKLGOTN            YES, AOK\n         SPACE 1\n         MODESET KEY=ZERO          NO, LOAD KEY-0\n         OI    DEBFLGS1,DEBAPFIN   MAKE IT AUTHORIZED\n         MODESET KEY=NZERO         RESUME TCB-KEY\n         DROP  R2                  RELEASE DEB BASE\nTSKLGOTN DS    0H\n         SPACE 3\n*************************************************************\n*        IDENTIFY A LOCAL ENTRY POINT. GO TO GREAT LENGTHS  *\n*        TO FIND A UNIQUE NAME THAT IS STILL REMINISCENT OF *\n*        THE NAME OF THE COMMAND/PROGRAM BEING CALLED.      *\n*************************************************************\n         SPACE 1\n         MVC   TSOCMDN,CMDNAME     COPY PROGRAM NAME\n         LA    R3,TSOCMDN+L'TSOCMDN --> PAST IT\nTNBLP    BCTR  R3,0                BACK UP\n         CLI   0(R3),C' '          TRAILING BLANK?\n         BE    TNBLP               YES, KEEP BACKING\n         CLI   TSOCMDN+L'TSOCMDN-1,C' ' NO, 8-CHAR NAME?\n         BNE   GOTEON              YES, WILL KLOTZ LAST CHAR\n         LA    R3,1(,R3)           NO, --> PAST NAME\nGOTEON   DS    0H\n         SPACE 1\n         LH    R2,=H'-1'           LOAD SUFFIX GENERATER\nIDENLOOP LA    R2,1(,R2)           --> NEXT SUFFIX\n         CH    R2,=H'256'          ALL POSSIBILITIES EXHAUSTED?\n         #DIE  NL                  YES, GIVE UP\n         STC   R2,0(,R3)           NO, INSERT SUFFIX\n         SPACE 1\n         CLC   TSOCMDN,CMDNAME     SAME NAME AS TARGET PGM?\n         BE    IDENLOOP            YES, TRY ANOTHER NAME\n         SPACE 1\n         L     R1,=A(CMDLOADR)     NO, --> INTERCEPT ROUTINE\n         IDENTIFY EPLOC=TSOCMDN,ENTRY=(1)\n         LTR   R15,R15             AOK?\n         BNZ   IDENLOOP            NO, TRY NEXT NAME SUFFIX\n         SPACE 3\n*************************************************************\n*        ATTACH A LOCAL ROUTINE WHICH WILL EVENTUALLY LOAD  *\n*        AND PASS CONTROL TO THE PROGRAM TO BE EXECUTED.    *\n*************************************************************\n         SPACE 1\n         MVI   TERMECB,0           CLEAR THE ECB\n         L     R3,TSKOPEN          LOAD A(TASKLIB) OR 0\n         LA    R3,0(,R3)           PURIFY\n         LR    R1,DSATREG          A(DSATDATA)\n         SPACE 1\n         ATTACH EPLOC=TSOCMDN,ECB=TERMECB,SHSPV=78,SZERO=NO,           *\n               TASKLIB=(R3),TERM=NO,SF=(E,DSATTACH)\n         ORG   *-2                 DON'T SVC YET\n         LTR   R3,R3               DOES A TASKLIB EXIST?\n         BNZ   SVC42               YES, PROCEED WITH THE ATTACH\n         NI    8(R15),B'11111101'  NO, CLEAR 'TASKLIB PRESENT' SIGNAL\nSVC42    SVC   42                  ATTACH MY LOADER\n         SPACE 1\n         LTR   R15,R15             AOK?\n         #DIE  NZ                  NO, LOGIC ERROR\n         ST    R1,DSATCB           YES, SAVE A(SUBTASK TCB)\n         SPACE 1\n         WAIT  ECB=TERMECB         JUST WAIT FOR TERMINATION\n         SPACE 3\n*************************************************************\n*        THE SUB-COMMAND/PROGRAM HAS ENDED. DETACH THE      *\n*        SUBTASK.                                           *\n*************************************************************\n         SPACE 1\n         MVC   DSACC,TERMECB+2     SAVE TERMINATION CC\n         DETACH DSATCB             DETACH THE SUBTASK\n         LTR   R15,R15             AOK?\n         #DIE  NZ                  NO, LOGIC ERROR\n         SPACE 3\n*************************************************************\n*        CLOSE TASKLIB FILE                                 *\n*************************************************************\n         SPACE 1\n         ICM   R0,7,TSKOPEN+1      TASKLIB EXIST?\n         BZ    NTASKLIB            NO, SKIP\n         CLOSE MF=(E,TSKOPEN)      YES, CLOSE IT\nNTASKLIB DS    0H\n         SPACE 3\n*************************************************************\n*        RETURN TO THE CALLER.                              *\n*************************************************************\n         SPACE 1\nRETURN   LH    R15,DSACC           LOAD THE COMPLETION CODE\n         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER\n         SPACE 3\n*************************************************************\n*        ERROR HANDLER. DISPLAY A MESSAGE, THEN EXIT.       *\n*************************************************************\n         SPACE 1\nERROR    LR    R1,R2               --> ERROR MESSAGE\n         BAL   R14,PUTMSG1         DISPLAY IT\n         MVI   DSACC+1,16          SET COMPLETION CODE\n         B     RETURN              GO EXIT\n         TITLE 'PUTMSG1 -- MESSAGE DISPLAY ROUTINE'\n*************************************************************\n*                                                           *\n*        PUTMSG1 -- THIS ROUTINE DISPLAYS A MESSAGE EITHER  *\n*        TO THE OPERATOR (IF BATCH) OR TO TSO. IF           *\n*        APPRIPRIATE, THEN MESSAGE ID'S ARE STRIPPED OFF.   *\n*                                                           *\n*        INPUTS:                                            *\n*              - R1 POINTS TO A MESSAGE BLOCK.              *\n*              - R14 POINTS TO A RETURN ADDRESS.            *\n*                                                           *\n*        RETURN 0(,R14):                                    *\n*              - THE MESSAGE IS SENT.                       *\n*              - ALL REGISTERS ARE RESTORED.                *\n*                                                           *\n*************************************************************\n         SPACE 1\nPUTMSG1  STM   R14,R1,SAVEPUM1     SAVE REGISTERS\n         SPACE 1\n         SR    R15,R15             CLEAR FOR INSERT\n         ICM   R15,1,0(R1)         GET L'MSG; NULL?\n         BZ    PUTM1RET            YES, RETURN DIRECTLY TO CALLER\n         SPACE 1\n         TM    DSATFLAG,BATCH      NO, IN THE BATCH?\n         BZ    PUTM1TPU            NO, GO ISSUE TPUT\n         SPACE 3\n*************************************************************\n*        THIS IS THE BATCH. ISSUE A WTO.                    *\n*************************************************************\n         SPACE 1\n         MVC   WTOTEXT(*-*),1(R1)  (EXECUTED)\n         EX    R15,*-6             COPY TO WTO BUFFER. (1 GARBAGE\n*                                  BYTE IS INCLUDED).\n         MVC   WTOHEAD,MWTOHEAD    SET WTO HEADER FLAGS\n         LA    R15,L'WTOHEAD(,R15) GET WTO MSG BLOCK LENGTH\n         STH   R15,WTOHEAD         STORE\n         LA    R15,WTOHEAD(R15)    --> MSG TEXT\n         MVC   0(L'WTOTAIL,R15),MWTOTAIL COPY WTO TAIL STUFF\n         SPACE 1\n         WTO   MF=(E,WTO)          SEND THE MESSAGE\n         B     PUTM1RET            CO RETURN TO CALLER\n         SPACE 3\n*************************************************************\n*        THIS IS TSO. ISSUE A TPUT. FIRST, IF REQUESTED,    *\n*        THEN STRIP OFF THE MESSAGE ID.                     *\n*************************************************************\n         SPACE 1\nPUTM1TPU LA    R1,1(,R1)           --> MSG\n         SPACE 1\n         TM    DSATFLAG,NOMSGID    SUPPRESS MESSAGE ID?\n         BZ    PUTM1MID            NO, SKIP\nPUTM1MIL TM    0(R1),255-C' '      YES, BLANK REACHED YET?\n         BZ    PUTM1MID            YES, MSGID STRIPPED\n         LA    R1,1(,R1)           NO, ADVANCE SCANNER\n         BCT   R15,PUTM1MIL        LOOP FOR NEXT CHARACTER\n         L     R1,SAVEPUM1+12      NO BLANKS; RESTORE MSG PTR\n         IC    R15,0(,R1)          RESTORE L'MSG\n         LA    R1,1(,R1)           --> TEXT\nPUTM1MID TM    0(R1),255-C' '      BLANK HERE?\n         BNZ   PUTM1PUT            NO, GO ISSUE TPUT\n         LA    R1,1(,R1)           YES, ADVANCE PAST IT\n         BCT   R15,PUTM1PUT        DECR L'MSG\n         B     PUTM1RET            NULL MSG; FORGET IT\n         SPACE 3\n*************************************************************\n*        TPUT THE MESSAGE TO THE USER.                      *\n*************************************************************\n         SPACE 1\nPUTM1PUT TPUT  (1),(15),R          ISSUE TPUT\n         SPACE 3\n*************************************************************\n*        RETURN TO CALLER                                   *\n*************************************************************\n         SPACE 1\nPUTM1RET LM    R14,R1,SAVEPUM1     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         TITLE 'DATA'\n*************************************************************\n*        DATA AREA                                          *\n*************************************************************\n         SPACE 1\n         DROP  ,                   RELEASE ALL BASES\n         SPACE 3\nMDLSAM   DS    0F\n         PRINT NOGEN\n         DCB   DDNAME=*-*,DSORG=PO,MACRF=R\n         PRINT ON,GEN,NODATA\n         SPACE 1\n         OPEN  *-*,MF=L\nMDLSAML  EQU   *-MDLSAM\n         #TEST SIZE=(MDLSAML,EQ,TSKSAML)\n         SPACE 3\nMDLTEXT  DS    0H\nMDLDDNAM DC    Y(DINDDNAM,1,8)\nMDLTEXTL EQU   *-MDLTEXT\n         #TEST SIZE=(MDLTEXTL,EQ,DALTEXTL)\n         SPACE 3\nMDLWTO   WTO   '*',ROUTCDE=11,DESC=7,MF=L\nMWTOHEAD EQU   MDLWTO,L'WTOHEAD\nMWTOTEXT EQU   MWTOHEAD+L'MWTOHEAD,1\nMWTOTAIL EQU   MWTOTEXT+L'MWTOTEXT,L'WTOTAIL\n         SPACE 3\n         LTORG ,\n         SPACE 3\n         DC    AL1(L'CNSE)\nCNSE     DC    C' INVALID SYNTAX FOR THE NAME OF THE PROGRAM OR COMMAND*\n                TO BE EXECUTED'\n         SPACE 1\n         DC    AL1(L'BADDDN)\nBADDDN   DC    C' INVALID SYNTAX FOR THE TASKLIB DDNAME'\n         SPACE 1\n         DC    AL1(L'NOTLIB)\nNOTLIB   DC    C' REQUESTED TASK-LIBRARY DDNAME NOT FOUND'\n         SPACE 1\n         DC    AL1(L'IECNS)\nIECNS    DC    C' IMPLICIT EXEC COMMAND NOT SUPPORTED'\n         SPACE 1\n         DC    AL1(L'NIA)\nNIA      DC    C'IKJ56760I NO INFORMATION AVAILABLE'\n         SPACE 1\n         DC    AL1(L'CANTCMD)\nCANTCMD  DC    C' \"COMMAND\" NOT SUPPORTED IN THE BATCH - USE \"PROGRAM\"'\n         SPACE 1\n         DC    AL1(L'BADPARM)\nBADPARM  DC    C' REQUIRED PARM FIELD IS OMITTED OR INVALID'\n         SPACE 1\n         DC    AL1(L'BADCBUF)\nBADCBUF  DC    C' REQUIRED OPERANDS OMITTED OR INVALID'\n         SPACE 3\nVALID    DC    256AL1(0)           INVALID CHARACTERS\n         SPACE 1\n         ORG   VALID+X'00'\n         DC    AL1(4)              DELIMITER\n         SPACE 1\n         ORG   VALID+C' '\n         DC    AL1(4)              DELIMITER\n         SPACE 1\n         ORG   VALID+C'$'\n         DC    AL1(8)              VALID\n         SPACE 1\n         ORG   VALID+C','\n         DC    AL1(4)              DELIMITER\n         SPACE 1\n         ORG   VALID+C':'\n         DC    AL1(4)              DELIMITER\n         SPACE 1\n         ORG   VALID+C'#'\n         DC    AL1(8)              VALID\n         SPACE 1\n         ORG   VALID+C'@'\n         DC    AL1(8)              VALID\n         SPACE 1\n         ORG   VALID+C'a'\n         DC    (C'i'-C'a'+1)AL1(8) VALID\n         SPACE 1\n         ORG   VALID+C'j'\n         DC    (C'r'-C'j'+1)AL1(8) VALID\n         SPACE 1\n         ORG   VALID+C's'\n         DC    (C'z'-C's'+1)AL1(8) VALID\n         SPACE 1\n         ORG   VALID+C'A'\n         DC    (C'I'-C'A'+1)AL1(8) VALID\n         SPACE 1\n         ORG   VALID+C'J'\n         DC    (C'R'-C'J'+1)AL1(8) VALID\n         SPACE 1\n         ORG   VALID+C'S'\n         DC    (C'Z'-C'S'+1)AL1(8) VALID\n         SPACE 1\n         ORG   VALID+C'0'\n         DC    (C'9'-C'0'+1)AL1(8) VALID\n         SPACE 1\n         ORG   ,\n         TITLE 'COMMAND PROCESSOR LOADER'\n*************************************************************\n*        ENTRY LINKAGE                                      *\n*************************************************************\n         SPACE 1\n         USING DSATDATA,R1         DCL TEMP DSATDATA BASE\nCMDLOADR #ENTER SAVTYPE=(REMOTE,DSASAVE2) ENTRY LINKAGE\n         LR    DSATREG,R1          COPY DSATDATA POINTER\n         DROP  R1                  RELEASE TEMP BASE\n         USING DSATDATA,DSATREG    DCL LOCAL DSATDATA BASE\n         SPACE 3\n*************************************************************\n*        ATTEMPT TO LOAD THE INDICATED COMMAND PROCESSOR OR *\n*        PROGRAM.                                           *\n*************************************************************\n         SPACE 1\n         LOAD  EPLOC=CMDNAME,ERRET=CMDNFOUN LOAD THE COMMAND\n         ST    R0,DSACMD           SAVE ITS ADDRESS\n         SPACE 3\n*************************************************************\n*        ADJUST THE ECT                                     *\n*************************************************************\n         SPACE 1\n         TM    DSATFLAG,BATCH      RUNNING IN THE BATCH?\n         BNZ   YBCH3               YES, SKIP\n         L     R1,DSAPARMA         NO, TSO; --> ORIGINAL CPPL\n         L     R1,CPPLECT-CPPL(,R1) --> ECT\n         USING ECT,R1              DCL ECT BASE\n         MVC   ECTPCMD,CMDNAME     INSERT TRUE COMMAND NAME\n         NI    ECTSWS,255-ECTNOPD ASSUME GOT OPERANDS\n         ICM   R0,3,PARMDATL       RIGHT?\n         BNZ   GOTOPNDS            YES, PROCEED\n         OI    ECTSWS,ECTNOPD      NO, SIGNAL NO OPERANDS\nGOTOPNDS DS    0H\n         DROP  R1                  RELEASE ECT BASE\nYBCH3    DS    0H\n         SPACE 3\n*************************************************************\n*        IF THIS IS A COMMAND, THEN ADJUST THE CBUF TO      *\n*        POINT TO THAT PART OF THE OPERANDS INTENDED FOR    *\n*        THE COMMAND.                                       *\n*************************************************************\n         SPACE 1\n         TM    DSATFLAG,CALLED     PROGRAM?\n         BNZ   PARMF               YES, GO BUILD A PARM FIELD\n         L     R2,DSAPARMA         NO, COMMAND; --> CPPL\n         ST    R2,PARAMETR         STORE FOR LATER\n         L     R2,CPPLCBUF-CPPL(,R2) --> CBUF\n         L     R1,PARMDATA         --> OPERANDS IN THE CBUF\n         LA    R0,4(,R2)           GET \"BASE\"\n         SR    R1,R0               GET OPERANDS OFFSET\n         STH   R1,2(,R2)           ADJUST THE CBUF\n         B     NOPARMF             DONE HERE\n         SPACE 3\n*************************************************************\n*        THIS IS A PROGRAM. CONSTRUCT A PARM FIELD.         *\n*************************************************************\n         SPACE 1\nPARMF    L     R2,PARMDATA         --> PARM DATA\n         LH    R3,PARMDATL         GET L'PARM DATA\n         LA    R0,6(,R3)           GET L'PARM BLOCK TO BE\n         CH    R0,=H'106'          UP TO MINIMUM SIZE?\n         BNL   PARMSZOK            YES, PROCEED\n         LA    R0,106              NO, LOAD MINIMUM SIZE\nPARMSZOK ICM   R0,8,=AL1(1)        SET SUBPOOL=1\n         GETMAIN R,LV=(0)          GET MEMORY\n         ST    R1,PARAMETR         SAVE\n         LA    R0,4(,R1)           --> PARM FIELD\n         ST    R0,0(,R1)           BUILD PLIST\n         OI    0(R1),B'10000000'   SET EOL FLAG\n         STH   R3,4(,R1)           SET L'PARMS\n         XC    6(100,R1),6(R1)     INSURE POSSIBLE EXCESS AREA CLEARED\n         LTR   R3,R3               NULL PARMS?\n         BNP   NOPARMF             YES, DONE HERE\n         LA    R0,1                SET ' SWITCH\nCOPYLP   MVC   6(1,R1),0(R2)       COPY CHARACTER\n         LTR   R0,R0               UPCASE IT?\n         BM    NOUPCASE            NO, SKIP\n         OI    6(R1),C' '          YES, DO SO\nNOUPCASE CLI   6(R1),C''''         '?\n         BNE   NOQUOTE             NO, SKIP\n         LCR   R0,R0               YES, ALTER THE SWITCH\nNOQUOTE  LA    R1,1(,R1)           ADVANCE SINK SCANNER\n         LA    R2,1(,R2)           ADVANCE SOURCE SCANNER\n         BCT   R3,COPYLP           CONTINUE\nNOPARMF  DS    0H\n         SPACE 3\n*************************************************************\n*        RESTORE THE ENTRY ENVIRONMENT, THEN BRANCH TO THE  *\n*        COMMAND OR PROGRAM.                                *\n*************************************************************\n         SPACE 1\n         #EXIT ((R14,R12))         RESTORE REGISTERS\n         ORG   *-2                 DON'T BR R14\n         PUSH  USING               SAVE USING STATUS\n         DROP  ,                   RELEASE ALL BASES\n         USING DSATDATA,R1         DCL TEMP DSATDATA BASE\n         L     R15,DSACMD          --> PROGRAM'S ENTRY POINT\n         L     R1,PARAMETR         --> PARM FIELD OR CPPL\n         DROP  R1                  RELEASE DSATDATA BASE\n         BR    R15                 GO TO CMD/PGM; NO RETURN\n         POP   USING               RESTORE USING STATUS\n         SPACE 3\n*************************************************************\n*        COMMAND NOT FOUND                                  *\n*************************************************************\n         SPACE 1\nCMDNFOUN MVC   WTOTEXT(18),=C'IKJ56500I COMMAND ' MSG TEXT\n         MVC   WTOTEXT+18(L'CMDNAME),CMDNAME COMMAND NAME\n         LA    R1,WTOTEXT+L'CMDNAME+18 PREPARE TO BACKSCAN BLANKS\nBLP1     BCTR  R1,0                BACK SCAN\n         TM    0(R1),255-C' '      STILL BLANK?\n         BZ    BLP1                YES, KEEP LOOPING\n         MVC   1(10,R1),=C' NOT FOUND' MORE TEXT\n         LA    R0,WTOTEXT-11       --> SO-MSG\n         SR    R1,R0               GET L'MSG\n         STC   R1,WTOTEXT-1        STORE\n         LA    R1,WTOTEXT-1        --> MSG\n         BAL   R14,PUTMSG2         DISPLAY IT\nCERREXIT #EXIT ((R14,R12)),RC=16   RETURN WITH ERROR SIGNAL\n         TITLE 'PUTMSG2 -- MESSAGE DISPLAY ROUTINE'\n*************************************************************\n*                                                           *\n*        PUTMSG2 -- THIS ROUTINE DISPLAYS A MESSAGE EITHER  *\n*        TO THE OPERATOR (IF BATCH) OR TO TSO. IF           *\n*        APPRIPRIATE, THEN MESSAGE ID'S ARE STRIPPED OFF.   *\n*                                                           *\n*        INPUTS:                                            *\n*              - R1 POINTS TO A MESSAGE BLOCK.              *\n*              - R14 POINTS TO A RETURN ADDRESS.            *\n*                                                           *\n*        RETURN 0(,R14):                                    *\n*              - THE MESSAGE IS SENT.                       *\n*              - ALL REGISTERS ARE RESTORED.                *\n*                                                           *\n*************************************************************\n         SPACE 1\nPUTMSG2  STM   R14,R1,SAVEPUM2     SAVE REGISTERS\n         SR    R15,R15             CLEAR FOR INSERT\n         ICM   R15,1,0(R1)         GET L'MSG; NULL?\n         BZ    PUTM2RET            YES, RETURN DIRECTLY TO CALLER\n         SPACE 1\n         TM    DSATFLAG,BATCH      NO, IN THE BATCH?\n         BZ    PUTM2TPU            NO, GO ISSUE TPUT\n         SPACE 3\n*************************************************************\n*        THIS IS THE BATCH. ISSUE A WTO.                    *\n*************************************************************\n         SPACE 1\n         MVC   WTOTEXT(*-*),1(R1)  (EXECUTED)\n         EX    R15,*-6             COPY TO WTO BUFFER. (1 GARBAGE\n*                                  BYTE IS INCLUDED).\n         L     R14,=A(MDLWTO)      --> MODEL WTO\n         USING MDLWTO,R14          DCL A BASE FOR IT\n         MVC   WTOHEAD,MWTOHEAD    SET WTO HEADER FLAGS\n         LA    R15,L'WTOHEAD(,R15) GET WTO MSG BLOCK LENGTH\n         STH   R15,WTOHEAD         STORE\n         LA    R15,WTOHEAD(R15)    --> MSG TEXT\n         MVC   0(L'WTOTAIL,R15),MWTOTAIL COPY WTO TAIL STUFF\n         DROP  R14                 RELEASE MODEL WTO BASE\n         SPACE 1\n         WTO   MF=(E,WTO)          SEND THE MESSAGE\n         B     PUTM2RET            CO RETURN TO CALLER\n         SPACE 3\n*************************************************************\n*        THIS IS TSO. ISSUE A TPUT. FIRST, IF REQUESTED,    *\n*        THEN STRIP OFF THE MESSAGE ID.                     *\n*************************************************************\n         SPACE 1\nPUTM2TPU LA    R1,1(,R1)           --> MSG\n         SPACE 1\n         TM    DSATFLAG,NOMSGID    SUPPRESS MESSAGE ID?\n         BZ    PUTM2MID            NO, SKIP\nPUTM2MIL TM    0(R1),255-C' '      YES, BLANK REACHED YET?\n         BZ    PUTM2MID            YES, MSGID STRIPPED\n         LA    R1,1(,R1)           NO, ADVANCE SCANNER\n         BCT   R15,PUTM2MIL        LOOP FOR NEXT CHARACTER\n         L     R1,SAVEPUM2+12      NO BLANKS; RESTORE MSG PTR\n         IC    R15,0(,R1)          RESTORE L'MSG\n         LA    R1,1(,R1)           --> TEXT\nPUTM2MID TM    0(R1),255-C' '      BLANK HERE?\n         BNZ   PUTM2PUT            NO, GO ISSUE TPUT\n         LA    R1,1(,R1)           YES, ADVANCE PAST IT\n         BCT   R15,PUTM2PUT        DECR L'MSG\n         B     PUTM2RET            NULL MSG; FORGET IT\n         SPACE 3\n*************************************************************\n*        TPUT THE MESSAGE TO THE USER.                      *\n*************************************************************\n         SPACE 1\nPUTM2PUT TPUT  (1),(15),R          ISSUE TPUT\n         SPACE 3\n*************************************************************\n*        RETURN TO CALLER                                   *\n*************************************************************\n         SPACE 1\nPUTM2RET LM    R14,R1,SAVEPUM2     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         TITLE 'DATA'\n         DROP  ,                   CLEAR USINGS\n         SPACE 3\n         LTORG ,\n         SPACE 3\n         END   ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMDPGM$": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00#\\x00\\x85\\x04\\x8f\\x01\\x165o\\x13P\\x00/\\x00-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "2016-12-21T13:50:23", "lines": 47, "newlines": 45, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//***********************************************************\n//*                                                         *\n//*      SAMPLE JCL TO ASSEMBLE AND LINKEDIT THE CMDPGM     *\n//*      PROGRAM.                                           *\n//*                                                         *\n//***********************************************************\n//*\n//ASM     EXEC PGM=ASMA90,REGION=4096K,\n//             PARM=(RENT,TERM,TEST,NODECK)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//*\n//***********************************************************\n//*                                                         *\n//* THE FOLLOWING MACLIB IS AVAILABLE FROM FILE 408 OF THE  *\n//* CBT MODS TAPE.                                          *\n//*                                                         *\n//         DD  DSN=SBGOLOB.COLE.MACLIB,DISP=SHR             *\n//*                                                         *\n//***********************************************************\n//*\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSALLDA,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSALLDA,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=SBGOLOB.CBT493.FILE199(CMDPGM),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM='RENT,TEST,XREF,LET,LIST,NCAL',\n//             COND=(0,LT)\n//SYSLMOD  DD  DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//CMDPGM   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSLIN  DD   *\n         INCLUDE CMDPGM\n         ALIAS   COMMAND,PROGRAM,PGM\n         NAME    CMD(R)\n         INCLUDE CMDPGM\n         SETCODE AC(1)\n         ALIAS   APFPGM\n         NAME    APFCMD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMMAND": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x009\\x009\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "OLDSTUF"}, "text": ")F FUNCTION\nCOMMAND allows you to invoke an arbitrary TSO command from an arbitrary\nload library.\n\nCOMMAND checks for the presence of either a given ddname or a TASKLIB\nddname. If found, then it establishes that library as the\n\"task-library\" (in place of either a job-library or a step-library)\nfor the command to be executed.\n\n)X SYNTAX\n\nCOMMAND name:ddname operands\n\nalias    - CMD\n\n         - name is the name of the TSO command to be executed.\n         - :ddname is the ddname to be used as a task-library.\n         - operands are that command's operands, if any.\n\nrequired - name\ndefault  - if :ddname is omitted, then ddname TASKLIB, if present, is\n           used for the task-library.\n         - if : is given without a ddname, then no task-library is\n           established - not even the ddname TASKLIB, if present.\n\n)O OPERANDS\n))NAME -\nThis operand gives the name of the TSO command to be executed. This\nmay be an arbitrary command. It may come from either the standard\nlink-libraries or from an arbitrary library (pointed to by the\ntask-library ddname).\n\n))DDNAME -\nThis operand gives a ddname to be used for a task-library for the\ncommand to be executed. (A task-library is similar to a job-library or\nstep-library).\n\nIf a ddname is given, then it must be appended to the name of the\ncommand to be executed and delimited from that name by a colon (:).\n\nExample:   COMMAND LISTC:MYLIB LEVEL(SYS1)\nThe library pointed to by the ddname MYLIB is established by COMMAND as\na task-library for LISTC. If the LISTC command is contained in that\nlibrary, then it will be loaded from there and executed.\n\nIf :ddname is omitted, then COMMAND searches for the ddname TASKLIB. If\nfound, then that library will be established as a task-library. If not\nfound, then no task-library is established.\n\nIf a colon is given all by itself without a ddname, then no\ntask-library is established regardless of whether or not a TASKLIB\nddname exists.\n\n))OPERANDS -\nThese are whatever operands the TSO command needs. They should NOT be\nframed by any special characters.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HELP": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x00+\\x00+\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "OLDSTUF"}, "text": ")F FUNCTION\n  The BLKSPTRK command calculates direct access storage device track\n  capacities. For a given list of device types, this command will\n  display exactly how many blocks of a given size (with or without\n  keys) will fit on each track.\n\n)X SYNTAX\n             BLKSPTRK (devtype devtype ...)\n                      BLKSIZE(<size or #count> <size or #count> ...)\n                      KEYLEN(length length ...)\n  alias    - BPT\n  default  - BLKSPTRK BLKSIZE(#1) KEYLEN(0)\n  required - at least one devtype\n\n)O OPERANDS\n))devtype -\n         This operand is required. It must be a direct access storage\n         device type. (e.g. 3330, 2305-2, etc.). If more than one device\n         type is given, then the list must be enclosed within\n         parentheses. Currently, the following device types are\n         recognized:\n               2301 2302 2305-1 2305-2 2311 2314 2319 2321 3330\n               3330-1 MSS-3330 MSS-3330-1 3340-1 3340-2 3350 3375\n               3380\n\n))BLKSIZE -\n         This operand is optional. If omitted, then B(#1) is used. If\n         given, then it may specify one or more physical block sizes\n         and/or block counts.\n\n         A block size is given as a plain number (e.g., B(6160)). A\n         block count is given preceded by a pound sign (e.g., B(#5)).\n         When a block count is given, BLKSPTRK will display the size of\n         the largest block that will fit the given number of times on a\n         track.\n\n         Giving a zero value is equivalent to giving #1.\n\n))KEYLEN -\n         This operand is optional. If omitted, then a zero value is\n         used. if given, then it may specify one or more key lengths to\n         be used in the track capacity calculations.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NEWSTUFF": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x05!\\x7f\\x01\\x05!\\x7f\\x12\\x00i\\x13i\\x13\\x00\\x00\\xd5\\xc5\\xe6\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-08-05T00:00:00", "modifydate": "2005-08-05T12:00:00", "lines": 26899, "newlines": 26899, "modlines": 0, "user": "NEWSTUF"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PROGRAM": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04\\x8f\\x00\\x85\\x04\\x8f\\x12\\x00\\x00:\\x00:\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xe3\\xe4\\xc6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-17T00:00:00", "modifydate": "1985-02-17T12:00:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "OLDSTUF"}, "text": ")F FUNCTION\nPROGRAM allows you to invoke an arbitrary \"batch\" program from an\narbitrary load library.\n\nPROGRAM checks for the presence of either a given ddname or a TASKLIB\nddname. If found, then it establishes that library as the\n\"task-library\" (in place of either a job-library or a step-library)\nfor the program to be executed.\n\n)X SYNTAX\n\nPROGRAM name:ddname parms\n\nalias    - PGM\n\n         - name is the name of the \"batch\" program to be executed.\n         - :ddname is the ddname to be used as a task-library.\n         - parms are that program's PARM field data, if any.\n\nrequired - name\ndefault  - if :ddname is omitted, then ddname TASKLIB, if present, is\n           used for the task-library.\n         - if : is given without a ddname, then no task-library is\n           established - not even the ddname TASKLIB, if present.\n\n)O OPERANDS\n))NAME -\nThis operand gives the name of the \"batch\" program to be executed.\nThis may be an arbitrary program. It may come from either the\nstandard link-libraries or from an arbitrary library (pointed to by\nthe task-library ddname).\n\n))DDNAME -\nThis operand gives a ddname to be used for a task-library for the\nprogram to be executed. (A task-library is similar to a job-library or\nstep-library).\n\nIf a ddname is given, then it must be appended to the name of the\nprogram to be executed and delimited from that name by a colon (:).\n\nExample:   PROGRAM IEBUPDTE:MYLIB NEW\nThe library pointed to by the ddname MYLIB is established by PROGRAM as\na task-library for IEBUPDTE. If the IEBUPDTE program is contained in\nthat library, then it will be loaded from there and executed.\nPARM='NEW' will be passed to IEBUPDTE.\n\nIf :ddname is omitted, then PROGRAM searches for the ddname TASKLIB. If\nfound, then that library will be established as a task-library. If not\nfound, then no task-library is established.\n\nIf a colon is given all by itself without a ddname, then no\ntask-library is established regardless of whether or not a TASKLIB\nddname exists.\n\n))PARMS -\nThese are whatever PARM field data the \"batch\" program needs. They\nshould NOT be framed by any special characters.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT199/FILE199.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT199", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}