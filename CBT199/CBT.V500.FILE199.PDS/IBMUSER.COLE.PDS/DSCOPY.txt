./ ADD NAME=ASMJCL   0100-05218-05218-1502-00038-00038-00000-DBCOLE9
//@DSCOPY  JOB (CSW,UPS),'540-456-8536',CLASS=A,
//             MSGLEVEL=(1,1),NOTIFY=R9999,TIME=1439
//*
//*
//***********************************************************
//*                                                         *
//* Sample JCL to assemble and linkedit the DSCOPY program. *
//*                                                         *
//***********************************************************
//*
//ASM     EXEC PGM=ASMA90,REGION=0M,
// PARM='TERM,TEST,OBJECT,NODECK,LINECOUNT(109)' <=========LINECOUNT===
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//*
//***********************************************************
//*                                                         *
//* The following MACLIB is available from WWW.COLESOFT.COM *
//*                                                         *
//         DD  DSN=DBCOLE.MACLIB,DISP=SHR <======================DSN===
//*                                                         *
//***********************************************************
//*
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=DISK,SPACE=(CYL,(15,5)),
//             DISP=(,PASS)
//SYSTERM  DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&OBJSET,UNIT=DISK,SPACE=(CYL,(1,1),RLSE),
//             DISP=(MOD,PASS)
//SYSIN    DD  DSN=DBCOLE.DSCOPY.EXPORT(DSCOPY),DISP=SHR <=======DSN===
//*
//LKED    EXEC PGM=IEWL,REGION=0M,
//             PARM='TEST,XREF,LET,LIST,NCAL',
//             COND=(0,LT)
//SYSLMOD  DD  DSN=DBCOLE.LOAD(DSCOPY),DISP=SHR <================DSN===
//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
./ ADD NAME=DSCOPY   0101-05218-05218-1643-01976-01761-00000-DBCOLEA
DSCOPY   TITLE 'DSCOPY - Description'                         08/05 Z17 DSCOPY
***********************************************************************
*                                                                     *
* The DSCOPY program is copyrighted (c) 1972-2005 by David B. Cole.   *
* All rights reserved.                                                *
*                                                                     *
***********************************************************************
*                                                                     *
* DESCRIPTION                                                         *
*                                                                     *
* DSCOPY is a general purpose program which copies data sets          *
* sequentially.  It allows the user to copy sequential files, BDAM    *
* files (i.e.  REGIONAL(1) files in PL/I or direct access files in    *
* FORTRAN), and single members of partitioned data sets from any      *
* valid input device (e.g. card reader, disk drive, or tape drive) to *
* any valid output device (e.g.  printer, card punch, disk drive, or  *
* tape drive).  The advantage of this utility over others having the  *
* same function is that DSCOPY is considerably more efficient and     *
* faster (more that twice as fast as the IBM utility IEBGENER, for    *
* example).  It takes full advantage of OS data management facilities *
* in order to optimize as much as possible the data transfer rate.    *
*                                                                     *
* DSCOPY has the following features:                                  *
*                                                                     *
* 1.) All information needed is specified through JCL or through the  *
*     PARM field. No control dataset (SYSIN, for example) is needed.  *
*                                                                     *
* 2.) DSCOPY can perform any number of seperate copies in one jobstep *
*     (subject, of course, to OS limits on the number of DD cards     *
*     permitted within a job or step).                                *
*                                                                     *
* 3.) Input datasets may be sequential, direct, or individual members *
*     of partitioned data sets, or a concatenation of any combination *
*     of the above with any combination of DCB attributes (RECFM,     *
*     LRECL, and BLKSIZE).                                            *
*                                                                     *
* 4.) Any record format is allowed (fixed, variable, undefined) for   *
*     input, and it may be changed to any other record format for     *
*     output. In addition, logical record lengths and/or block sizes  *
*     may also be changed. All such changes are automaticly           *
*     accomodated for (see below).                                    *
*                                                                     *
* Here is a simple example of the invocation of DSCOPY:               *
*    //...      JOB CARD       ...                                    *
*    //*                                                              *
*    //A       EXEC PGM=DSCOPY                                        *
*    //SYSPRINT DD  SYSOUT=A                                          *
*    //IN01     DD  DSN=       ... etc.                               *
*    //OUT01    DD  DSN=       ... etc.                               *
*    //IN02     DD  DSN=       ... etc.                               *
*    //OUT02    DD  DSN=       ... etc.                               *
*    //         .                                                     *
*    //         .                                                     *
*    //         .                                                     *
*    //         etc.                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
* LEGAL INFORMATION:                                                  *
*                                                                     *
* This program is copyrighted (c) 1972-2005 by David B. Cole. All     *
* rights reserved.                                                    *
*                                                                     *
* This program is distributed freely and may be reproduced and        *
* redistributed without restriction other than:                       *
*   - This copyright and usage/warranty/liability restriction         *
*     statement ("Legal Statement") may not be modified or removed.   *
*   - A similar Legal Statement located in this program's source code *
*     also may not be removed.                                        *
*                                                                     *
* This program is distributed without warranty of any kind, including *
* (without limitation) warranties of merchantability and of fitness   *
* for a particular purpose. It is up to the user to make his own      *
* determination of the usefulness of this program in his own system.  *
*                                                                     *
* The user agrees not to hold either David B. Cole or Cole Software,  *
* LLC or any person affiliated with Cole Software, LLC (collectively  *
* "COLE") liable for any injury or damage whatsoever.                 *
*                                                                     *
* Further, the user agrees to indemnify COLE against third parties    *
* for any action arising from the user's use, misuse, modification,   *
* and/or redistribution of this program.                              *
*                                                                     *
* This program may be modified freely so long as all modifications    *
* are clearly marked both internally and externally to distinguish    *
* them from the distributed code and functionality.                   *
*                                                                     *
* As a courtesy, please notify David Cole if you discover any bugs or *
* if you need or have made any code changes. (COLE, of course, does   *
* not guarantee that any future changes or corrections wither will or *
* will not be made.)                                                  *
*                                                                     *
* Contact information as of AUG05 is:                                 *
*                                                                     *
*     Name:                David B. Cole                              *
*     Country:             USA                                        *
*     Telephone:           540-456-8536                               *
*     FAX:                 540-456-6658                               *
*     E-mail:              dbcole@colesoft.com                        *
*     Website:             www.colesoft.com                           *
*                                                                     *
*     Snail Mail:          Cole Software                              *
*                          736 Fox Hollow Road                        *
*                          Afton, VA 22920                            *
*                          USA                                        *
*                                                                     *
***********************************************************************
*                                                                     *
* PACKAGING:                                                          *
*                                                                     *
* The DSCOPY.ZIP file contains the following files:                   *
*                                                                     *
*   - DSCOPY.ALC is the assembler source code for the program.        *
*                                                                     *
*   - JCL.TXT is sample JCL for assembling and link editing the       *
*     program.                                                        *
*                                                                     *
* All of the files are encoded in ASCII. When uploading them to your  *
* mainframe, ASCII-to-EBCDIC translation should be enabled.           *
*                                                                     *
***********************************************************************
*                                                                     *
* INSTALLATION:                                                       *
*                                                                     *
* Assembling DSCOPY will require a macro library available from Cole  *
* Software's web site (www.colesoft.com). The file there is named     *
* MACROS.ZIP. You will have to obtain and install these macros before *
* you will be able to complete the installation of DSCOPY.            *
*                                                                     *
* To install DSCOPY, do the following:                                *
*                                                                     *
*   - Obtain and install Cole Software's macro library (MACROS.ZIP).  *
*                                                                     *
*   - Use WINZIP or PKUNZIP (or whatever) to decompress and extract   *
*     the DSCOPY.ALC, and JCL.TXT files from DSCOPY.ZIP.              *
*                                                                     *
*   - Upload the two files to your mainframe. Make sure that          *
*     ASCII-to-EBCDIC translation is turned on.                       *
*                                                                     *
*   - Upload the files to a library whose DCB attributes are          *
*     RECFM=FB, LRECL=80, and BLKSIZE=n*80.                           *
*                                                                     *
*   - Check out the JCL member for sample JCL to assemble and         *
*     linkedit the DSCOPY program.                                    *
*                                                                     *
*   - Assemble the DSCOPY member using both system macros and private *
*     macros available from Cole Software.                            *
*                                                                     *
*   - Linkedit the DSCOPY program into a suitable load library.       *
*                                                                     *
*   - Try it out.                                                     *
*                                                                     *
***********************************************************************
*                                                                     *
* USAGE:                                                              *
*                                                                     *
*  1.) DDNAMEs for input must be of the form INx where x is any       *
*      alphameric character string of from 0 to 5 characters in       *
*      length.                                                        *
*                                                                     *
*  2.) DDNAMEs for output must be of the form OUTx where x is as in   *
*      (1) above.                                                     *
*                                                                     *
*  3.) Copy operations are performed from each //INx DD card to a     *
*      corresponding //OUTx DD card (e.g. from //INA to //OUTA, from  *
*      //IN9999A to OYT9999A, from //IN to //OUT, from //INTRASH to   *
*      //OUTTRASH, etc.). Clearly, there must exist a one to one      *
*      correspondence between the input DD cards and the output DD    *
*      cards.                                                         *
*                                                                     *
*  4.) Copy operations are performed in the order of the ascending    *
*      EBCDIC coalating sequence of x. In the following example, the  *
*      copies are performed in the order shown (*regardless* of the   *
*      sequence in which the DD cards are actually presented):        *
*          1st //IN      to //OUT                                     *
*          2nd //INA     to //OUTA                                    *
*          3rd //INTRASH to //OUTTRASH                                *
*          4th //IN01    to //OUT01                                   *
*          5th //IN02    to //OUT02                                   *
*          6th //IN1     to //OUT1                                    *
*          7th //IN10    to //OUT10                                   *
*          8th //IN2     to //OUT2                                    *
*          9th //IN9999A to //OUT9999A                                *
*      Watch out for pitfalls here! Note in particular, that a copy   *
*      from //IN10 to //OUT10 will occur *before* a copy from //IN2   *
*      to //OUT2. (This may matter, for example, if you're writing to *
*      tape.)                                                         *
*                                                                     *
*  5.) Input block sizes must be available to DSCOPY from either      *
*      DSCBs, tape labels, or JCL. If other necessary DCB parameters  *
*      are missing, then defaults are taken (see below).              *
*                                                                     *
*  6.) Keyed direct access files (e.g. PL/I REGIONAL(2) and           *
*      regional(3) files) may be copied, but the keys themselves      *
*      won't be copied. The resulting output file will be sequential  *
*      unless DSORG=DA is coded in the JCL.                           *
*                                                                     *
*  7.) A SYSPRINT DD card (e.g. //SYSPRINT DD SYSOUT=*) must be       *
*      included in the JCL. This DD card specifies a message data set *
*      for DSCOPY.  It's DCB is DSORG=PS, RECFM=UA, LRECL=121,        *
*      BLKSIZE=121). Any attempt to override this is ignored.         *
*                                                                     *
*  8.) If any necessary DCB atributes are missing, then the following *
*      conversions are performed:                                     *
*                                                                     *
*      a.) If the input's DSORG is missing, then DSORG=PS is used.    *
*                                                                     *
*      b.) If the output's DSORG is missing, then DSORG=PS is used.   *
*                                                                     *
*      c.) If the input's RECFM is missing, then RECFM=U is used.     *
*                                                                     *
*      d.) If the output's RECFM is missing, then the input's RECFM   *
*          is used.                                                   *
*                                                                     *
*      e.) If the input's BLKSIZE is missing, then an error condition *
*          is reported.                                               *
*                                                                     *
*      f.) If the output's BLKSIZE is missing, then the input's       *
*          BLKSIZE is used. Exceptions:                               *
*                                                                     *
*            - If the input's RECFM=V while the output's RECFM<>V     *
*              then the input's BLKSIZE-4 is used.                    *
*                                                                     *
*            - If the input's RECFM<>V while the output's RECFM=V,    *
*              then the input's BLKSIZE+4 is used.                    *
*                                                                     *
*      g.) If the input's LRECL is missing, then the input's BLKSIZE  *
*          is used. Exception:                                        *
*                                                                     *
*            - If the input's RECFM=V, then the input's BLKSIZE-4 is  *
*              used.                                                  *
*                                                                     *
*      h.) If the output's LRECL is missing, then the output's        *
*          BLKSIZE is used. Exception:                                *
*                                                                     *
*            - If the output's RECFM=V, then the output's BLKSIZE - 4 *
*              is used.                                               *
*                                                                     *
*      i.) In the case of concatenated input, any settings that are   *
*          made for the output data set that are based on the         *
*          characteristics of the input data set, are based on the    *
*          chatacteristics of the *first* DD card in the input        *
*          concatenation.                                             *
*                                                                     *
*      j.) The above listed conversions are (if required) applied in  *
*          the same order in which they are listed. For example,      *
*          conversion (f) will be applied before conversion (h).      *
*                                                                     *
*  9.) If the LRECL for the output data set is to be different from   *
*      the LRECL for the input data set, then there are three cases:  *
*                                                                     *
*      A.) Output's LRECL > input's LRECL:                            *
*                                                                     *
*            - In this case, if the output's RECFM=F, then the unused *
*              portion of each output record is filled with blanks    *
*              (I.e. the record is right-padded with blanks).         *
*                                                                     *
*      b.) Output's LRECL < input's LRECL *but* the entire input      *
*          record is still desired in the output data set:            *
*                                                                     *
*            - In this case, the input record is spanned onto as many *
*              output records as is required. Note that this is the   *
*              default action.                                        *
*                                                                     *
*     c.) Output's LRECL < input's LRECL and only that portion of the *
*         input record that will fit on one output record is desired: *
*                                                                     *
*           - In this case each input record that is too long is      *
*             truncated before it is written to the output data set.  *
*             In order to use this truncation facility, the user must *
*             code TRUNCATE in the EXEC statement's PARM= field.      *
*             Notes:                                                  *
*                                                                     *
*               - If TRUNCATE is coded, then truncation will occur    *
*                 for all copy operations in the jobstep.             *
*                                                                     *
*               - If truncate is not coded, then spanning will occur  *
*                 for all copy operations.                            *
*                                                                     *
*               - WARNING! If spanning occurs, and the output file's  *
*                 RECFM is V or VS, the spanning will *not* be        *
*                 compatible with RECFM=VS!                           *
*                                                                     *
* 10.) DSCOPY generates a completion code with the following values:  *
*                                                                     *
*        0  - Execution completed without errors                      *
*                                                                     *
*        4  - One of the following "concerns" occurred:               *
*                                                                     *
*               a.) When DSCOPY was called as a subroutine, too many  *
*                   arguements were passed (see below).               *
*                                                                     *
*               b.) When DSCOPY was called as a subroutine, the third *
*                   arguement was invalid (see below).                *
*                                                                     *
*               c.) For a //INx or a //OUTx DDNAME, a corresponding   *
*                   //OUTx or //INx DDNAME was not found.             *
*                                                                     *
*        8  - One or more copy operations was either suppressed or    *
*             terminated for some reason.                             *
*                                                                     *
*        12 - The program was terminated before any copies were       *
*             attempted.                                              *
*                                                                     *
* 11.) PARM FIELD PROCESSING: There are several controls that DSCOPY  *
*      accepts via the parm field. The general syntax is:             *
*                                                                     *
*        - Their form is either "keyword" or "keyword=value".         *
*                                                                     *
*        - They may be given in any order.                            *
*                                                                     *
*        - They must be separated from each other by blanks or commas.*
*                                                                     *
*        - Keyword names must be given in full; abbreviations are not *
*          checked for.                                               *
*                                                                     *
*        - Also, redundancies are not checked for; each instance of a *
*          particular keyword overrides and nullifies all prior       *
*          instances.                                                 *
*                                                                     *
*        - These controls apply to *all* copies performed by DSCOPY.  *
*                                                                     *
*      The following controls are supported:                          *
*                                                                     *
*          TRUNCATE                                                   *
*          When copying long records into output files with short     *
*          LRECLs, this cause DSCOPY to truncate the record. (Omit    *
*          this keyword if you want longs records to be spanned into  *
*          the output file.)                                          *
*                                                                     *
*          START=number                                               *
*          This causes copying to start with the given input record   *
*          NUMBER. NUMBER-1 RECORDS ARE SKIPPED. THE DEFAULT IS       *
*          START=1.                                                   *
*                                                                     *
*          STOP=number                                                *
*          This causes copying to stop after the given input record   *
*          number IS REACHED AND COPIED. (THE FIRST INPUT RECORD,     *
*          *REGARDLESS* of whether or not it is actually copied, is   *
*          record number 1.)  The default is to copy until input EOF  *
*          is reached.                                                *
*                                                                     *
*          COUNT=number                                               *
*          This causes copying to stop after the given number of      *
*          input records have been copied. The default is to copy     *
*          until input EOF is reached.                                *
*                                                                     *
*          IMPORTANT! When COUNT=number is given, the given or        *
*          implied START=number control is incrimented by the given   *
*          COUNT= value for each successive copy. This makes it       *
*          easier to segment large files into smaller ones via        *
*          suitable multiple copy requests.                           *
*                                                                     *
*      NOTES:                                                         *
*                                                                     *
*        - If COUNT= and STOP= conflict, then copying will stop at    *
*          whichever event occurs first.                              *
*                                                                     *
*        - If COUNT=0 or if STOP= is less than START=, then no        *
*          records are copied.                                        *
*                                                                     *
*        - All numbers are treated as being unsigned 32-bit. They may *
*          range from 0 to 4g.                                        *
*                                                                     *
***********************************************************************
*                                                                     *
* TECHNICAL INFORMATION:                                              *
*                                                                     *
* 1.) DSCOPY uses QSAM for all I/O.                                   *
*                                                                     *
* 2.) Chained scheduling (OPTCD=C) is used wherever possible. It is   *
*     not possible for input data sets with RECFM=U. It is also not   *
*     possible when the BLKSIZE is sufficiently large and the region  *
*     is sufficently small that only one buffer can be generated.     *
*                                                                     *
* 3.) DSCOPY is serially reusable.                                    *
*                                                                     *
*                                                                     *
***********************************************************************
*                                                                     *
* DYNAMIC INVOCATION:                                                 *
*                                                                     *
*  DYNAMIC INVOCATION:                                                *
*      "DSCOPY" CAN BE EITHER LINK-EDITED INTO OR DYNAMICLY INVOKED   *
*      BY A USER'S PROGRAM AND USED AS A SUBROUTINE.  WHEN THIS IS    *
*      DONE, "DSCOPY" EXPECTS TO BE PASSED UP TO THREE ARGUEMENTS:    *
*                                                                     *
*      1.) THE FIRST ARGUEMENT WILL BE USED AS A PARM FIELD           *
*                                                                     *
*      2.) THE SECOND ARGUEMENT IS A LIST OF "DDNAME" PREFIXES TO     *
*          BE USED IN PLACE OF "IN" AND "OUT".  THE LIST MAY ALSO     *
*          CONTAIN A REPLACEMENT "DDNAME" FOR THE "SYSPRINT" DATA     *
*          SET.                                                       *
*                                                                     *
*      3.) THE THIRD ARGUEMENT IS AN EBCDIC NUMBER TO BE USED AS      *
*          THE STARTING VALUE OF "X" IN THE MESSAGE "COPY # X".       *
*                                                                     *
*      ANY OR ALL ARGUEMENTS MAY BE EITHER OMITTED OR NULL IN WHICH   *
*      CASE THE OBVIOUS DEFAULTS WILL BE TAKEN.                       *
*                                                                     *
*                                                                     *
*                                                                     *
* EXAMPLES OF INVOCATION:                                             *
*                                                                     *
*                                                                     *
*     1.) FOR "ASSEMBLER" USERS:                                      *
*                  .                                                  *
*                  .                                                  *
*                  .                                                  *
*        ALL ARGUEMENTS GIVEN (NOTE: ANY ARGUEMENTS MAY STILL BE      *
*        NULL):                                                       *
*                  LINK  EP=DSCOPY,PARAM=(PARM-2,DDNAMES,CPYCNT)      *
*                                                                     *
*        SOME ARGUEMENTS NOT GIVEN:                                   *
*                  LINK  EP=DSCOPY,PARAM=(,DDNAMES)                   *
*                  .                                                  *
*                  .                                                  *
*                  .                                                  *
*        PARM FIELD GIVEN:                                            *
*                  DC    Y(L'PARM)                            07/96   *
*         PARM     DC    C'TRUNCATE,COUNT=10000'              07/96   *
*                                                                     *
*        NULL PARM FIELD GIVEN:                                       *
*                  DC    Y(0)                                 07/96   *
*         PARM     DS    0X                                   07/96   *
*                                                                     *
*        COMPLETE DDNAME LIST GIVEN:                                  *
*         DDNAMES  DC    Y(48)               LENGTH OF LIST           *
*                  DC    CL8'INPUT'          CHANGE "IN" PREFIX TO    *
*         *                                  "INPUT"                  *
*                  DC    CL8'OUTPUT'         CHANGE "OUT" PREFIX TO   *
*         *                                  "OUTPUT"                 *
*                  DC    3XL8'00'            UNUSED ENTRIES           *
*                  DC    CL8'PRINTER'        CHANGE "SYSPRINT"        *
*         *                                  DDNAME TO "PRINTER"      *
*                                                                     *
*        PARTIAL DDNAME LIST GIVEN:                                   *
*         DDNAMES  DC    Y(16)               LENGTH OF LIST           *
*                  DC    CL8' '              DON'T CHANGE THE "IN"    *
*         *                                  PREFIX                   *
*                  DC    CL8'O'              CHANGE THE "OUT"         *
*         *                                  PREFIX TO "O"            *
*                                                                     *
*        NULL DDNAME LIST GIVEN:                                      *
*         DDNAME   DC    Y(0)                DDNAME LIST LENGTH       *
*                                                                     *
*        NOTE: BLANKS AND BINARY ZEROS ARE TREATED EQUVALENTLY IN     *
*        THE DDNAME LIST ENTRIES - E.G. " DC CL8'A' " IS TREATED      *
*        THE SAME WAY AS " DC C'A',XL7'00' ".                         *
*                                                                     *
*        STARTING COPY NUMBER GIVEN:                                  *
*         CPYCNT   DC    Y(3)                COPY # LENGTH            *
*                  DC    C'200'              STARTING COPY #          *
*                                                                     *
*        NULL COPY NUMBER GIVEN:                                      *
*         CPYCNT   DC    Y(0)                CPY # LENGTH             *
*                                                                     *
*                                                                     *
*     2.) FOR "FORTRAN" USERS:                                        *
*               .                                                     *
*               .                                                     *
*               .                                                     *
*        NOTE THAT THE FIRST ELEMENT IN EACH ARAY DESCRIBED BELOW     *
*        GIVES THE LENGTH IN BYTES OF THE REMAINDER OF THE ARAY.      *
*                                                                     *
*        PARM FIELD GIVEN:                                            *
*               INTEGER*2 PARM(9)/8,'TR','UN','CA','TE'/      07/96   *
*                                                                     *
*        NULL PARM FIELD GIVEN:                                       *
*               INTEGER*2 PARM/0/                                     *
*                                                                     *
*        COMPLETE DDNAME LIST GIVEN:                                  *
*         C CHANGE "IN" PREFIX TO "ABC"                               *
*         C CHANGE "OUT" PREFIX TO "DE"                               *
*         C CHANGE "SYSPRINT" TO "PRT"                                *
*               INTEGER*2 DDNAME(25)/48,'AB','C ',2*'  ','DE',        *
*              X15*'  ','PR','T ',2*0/                                *
*                                                                     *
*        PARTIAL DDNAME LIST GIVEN:                                   *
*         C DON'T CHANGE THE "IN" PREFIX                              *
*         C DON'T CHANGE THE "OUT" PREFIX                             *
*         C CHANGE "SYSPRINT" TO "PAPER"                              *
*               INTEGER*2 DDNAME(25)/48,20*0,'PA','PE','R ','  '/     *
*                                                                     *
*        NULL DDNAME LIST GIVEN:                                      *
*         C DON'T CHANGE ANY "DDNAME"'S                               *
*               INTEGER*2 DDNAME/0/                                   *
*                                                                     *
*        NOTE: TRAILING BLANKS AND TRAILING ZEROS ARE TREATED         *
*        EQUIVALENTLY IN THE DDNAME LIST ENTRIES - E.G. THE           *
*        FOLLOWING ARE EQUIVALENT:                                    *
*               INTEGER*2 DDNAME(5)/8,'A ',3*'  '/                    *
*               INTEGER*2 DDNAME(5)/8,'A ',3*0/                       *
*                                                                     *
*        STARTING COPY NUMBER GIVEN:                                  *
*               INTEGER*2 CPYCNT(3)/4,'77','34'/                      *
*                                                                     *
*        NULL COPY NUMBER GIVEN:                                      *
*               INTEGER CPYCNT/0/                                     *
*               .                                                     *
*               .                                                     *
*               .                                                     *
*        ALL ARGUEMENTS GIVEN (NOTE: ANY ARGUEMENTS MAY STILL BE      *
*        NULL):                                                       *
*               CALL DSCOPY(PARM,DDNAME,CPYCNT)                       *
*                                                                     *
*        SOME ARGUEMENTS NOT GIVEN:                                   *
*               CALL DSCOPY(PARM)                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* "DSCOPY" "JCL" EXAMPLES:                                            *
*      //... JOB CARD ...                                             *
*      //A EXEC PGM=DSCOPY                                            *
*      //SYSPRINT DD SYSOUT=A                                         *
*      //IN DD *                                                      *
*      DATA CARD 1                                                    *
*      DATA CARD 2                                                    *
*      .                                                              *
*      .                                                              *
*      .                                                              *
*      DATA CARD N                                                    *
*      /*                                                             *
*      //OUT DD SYSOUT=A                                              *
*      //* THE ABOVE COPIES THE DATA CARDS ONTO THE PRINTER.          *
*                                                                     *
*                                                                     *
*      //INA DD DSN=DATASET,UNIT=2314,VOL=SER=DISK,DISP=SHR           *
*      // DD DSN=PDS(MEMBER),UNIT=2314,VOL=SER=DISK1,DISP=SHR         *
*      // DD DSN=PDS(MEMBER1),UNIT=2314,VOL=SER=DISK1,DISP=SHR        *
*      // DD *                                                        *
*      DATA CARD 1                                                    *
*      DATA CARD 2                                                    *
*      /*                                                             *
*      // DD DSN=DATASET2,UNIT=2400,VOL=SER=TAPE,DISP=SHR,            *
*      // DCB=(RECFM=VB,LRECL=20,BLKSIZE=7294),LABEL=(2,NL)           *
*      //OUTA DD DSN=DATASET3,UNIT=SYSDA,SPACE=(TRK,(10,10)),         *
*      // DCB=RECFM=U,DISP=(,PASS)                                    *
*      //* THIS IS AN EXAMPLE OF INPUT CONCATINATION, MIXED INPUT     *
*      //* DCB ATRIBUTES, CHANGE OF ATRIBUTES FROM THE INPUT DATA     *
*      //* SET TO THE OUTPUT DATA SET, AND USE OF DEFAULT ATRIBUTES   *
*      //* FOR THE OUTPUT DATA SET (THE OUTPUT "BLKSIZE" IS ASSUMED   *
*      //* TO BE EQUAL TO THE "BLKSIZE" OF THE FIRST INPUT DATA       *
*      //* SET).                                                      *
*                                                                     *
***********************************************************************
         TITLE 'DSCOPY -- Change History'                     07/96 DBC
************************************************************* 08/05 DBC
*                                                           * 08/05 DBC
* Last Change Date - August 6, 2005                         * 08/05 DBC
*                                                           * 08/05 DBC
* Repackaged DSCOPY for shareware distribution via the      * 08/05 DBC
* Internet.                                                 * 08/05 DBC
*                                                           * 08/05 DBC
* Added a copyright statement and summary legalese to the   * 08/05 DBC
* SYSPRINT output.                                          * 08/05 DBC
*                                                           * 08/05 DBC
* Added a README file to the distribution package           * 08/05 DBC
* containing extensive legalese and a comprehensive         * 08/05 DBC
* installation and usage instructions.                      * 08/05 DBC
*                                                           * 08/05 DBC
* Ditto for the sorce code: Added extensive legalese,       * 08/05 DBC
* installation instructions, and a reqork of the usage      * 08/05 DBC
* instructions.                                             * 08/05 DBC
*                                                           * 08/05 DBC
* Replaced all obsolete DBCOLE.MACLIB macros with their     * 08/05 DBC
* current versions so that this program can be successively * 08/05 DBC
* assembler using the DBCOLE.MACLIB library available from  * 08/05 DBC
* www.colesoft.com.                                         * 08/05 DBC
*                                                           * 08/05 DBC
* Updated obsolete contact information.                     * 08/05 DBC
*                                                           * 08/05 DBC
************************************************************* 08/05 DBC
         SPACE 3                                              08/05 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
* Last Change Date - July 18, 1996                          * 07/96 DBC
*                                                           * 07/96 DBC
* Added support for PARM field keywords                     * 07/96 DBC
*                                                           * 07/96 DBC
* Added improved statistics messages to the SYSPRINT        * 07/96 DBC
* output.                                                   * 07/96 DBC
*                                                           * 07/96 DBC
* Added unit-of-work commentary headers throughout the      * 07/96 DBC
* code.                                                     * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         TITLE 'DSCOPY -- $PRINT MACRO'                             DBC
         MACRO
&N       $PRINT &MSGADR
&N       LA    R15,&MSGADR-1       PNT TO MSG LEN FLD
         BAL   R14,PUTSYSP         GO TO MSG PRTING ROUTINE
         MEND
         TITLE 'DSCOPY -- INITAL DEFFINITIONS'
         GBLA  &MAXBUFS            MAX NUMBER OF BUFFERS
         GBLA  &MINGET             MIN GETMAIN
         SPACE 3
*MAXBUFS SETA  50                  ALLOW 50 BUFS / DS
&MAXBUFS SETA  5                   ALLOW 50 BUFS / DS  12/3/79     JRB
&MINGET  SETA  60*1024+2*((96*&MAXBUFS+2047)/2048*2048)+2*(80+8)   JRB
*        ALLOW SPACE FOR:
*        OPEN, CLOSE, FDR/ABR DS NOT FOUND EXIT,                   JRB
*        AND QSAM ROUTINES (60*1024) (WAS 6*1024) )                JRB
*        SUFFICENT 2K BLOCKS FOR 96 BYTE IOB'S/ICB'S FOR EACH DCB
*        MINIMAL BUFFER POOLS (FOR EMERGENCIES)
         SPACE 1
&MINGET  SETA  (&MINGET+15)/16*16  ROUND TO DUOBLE-DOUBLE WORD LENGTH
         SPACE 3
         #REGS R                                              08/05 DBC
         TITLE 'DSCOPY -- INITALIZATION AND PARAMETER PROCESSING'
DSCOPY   #ENTER SAVTYPE=(LOCAL,    STD NONREENTRANT RSA       08/05 DBC*
               DSCSAVE),           RSA'S NAME                 08/05 DBC*
               BASES=2             2 BASES (R13 AND R12)      08/05 DBC
         MVI   RCD+1,0             ZERO THE RETURN CODE       08/05 DBC
         MVC   IDDNAME(L'DCBDDNAM),=CL8'IN' INIT DDNAME
         MVC   ODDNAME(L'DCBDDNAM),=CL8'OUT' INIT DDNAME
         MVC   PRTDDNAM,=CL8'SYSPRINT' INIT DDNAME
         ZAP   CPY#,=P'1'          INIT COPY COUNT
         MVI   FLAG,0              CLEAR ALL FLAGS
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*             INPUT PARAMETERS PROCESSING                   * 07/96 DBC
*                                                           * 07/96 DBC
* I ACCEPT UP TO THREE INPUT PARAMETERS:                    * 07/96 DBC
*     1ST - A STANDARD PARM FIELD                           * 07/96 DBC
*     2ND - A SUBSTITUTE DDNAME LIST.                       * 07/96 DBC
*     3RD - A STARTING COPY NUMBER.                         * 07/96 DBC
* THE LAST USED PLIST SLOT MUST BE HI-FLAGGED.              * 07/96 DBC
*                                                           * 07/96 DBC
* SEE IF I HAVE RECEIVED ANY PARAMETERS AT ALL.             * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         LTR   R7,R1               COPT PLIST PTR; ANY GIVEN? 07/96 DBC
         BZ    NOPARAMS            NOPE; SKIP *ALL* THIS      07/96 DBC
         LM    R2,R4,0(R7)         LOAD THE ENTIRE PLIST      07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*        2ND PARAMETER PROCESSING: DDNAMES LIST             * 07/96 DBC
*                                                           * 07/96 DBC
* (NOTE, PARM FIELD ANALYSIS (1ST PARAMATER PROCESSING) IS  * 07/96 DBC
* POSTPONED UNTIL AFTER I OPEN SYSPRINT. THIS IS BECAUSE    * 07/96 DBC
* PARM FIELD PROCESSING WILL GENERATE MESSAGES, BUT I DON'T * 07/96 DBC
* KNOW WHAT MY SYSPRINT DDNAME IS UNTIL I CHECK FOR A       * 07/96 DBC
* DDNAMES LIST {2ND PARAMETER}).                            * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         LTR   R2,R2               IS THERE A 2ND PARAMETER?  07/96 DBC
         BM    NOPARAMS            NO, SKIP OUT
         LA    R5,0(,R3)           YES, CLEAR HI BYTE OF ITS ADR
         LTR   R5,R5               IS 2ND PARAMETER OMITTED?
         BZ    NODDN               YES, SKIP OUT
         TM    7(R7),X'01'         NO, IS IT 1/2 WD ALIGNED?  07/96 DBC
         BZ    DDNOK1              YES, CONTINUE
BDDDN    OI    FLAG,BADDDNM        NO, SET ERROR FLAG
         B     NODDN
DDNOK1   LH    R0,0(,R3)           GET LENGTH OF DDN LIST
         LTR   R0,R0               IS IT NULL?
         BZ    NODDN               YES, SKIP OUT
         BM    BDDDN               NO, IT'S INVALID; ERROR
         TM    1(R3),X'07'         NO, IS LEN A MULT OF 8?
         BNZ   BDDDN               NO, ERROR
         SRL   R0,3                YES, GET # OF ENTRIES
         SH    R3,=Y(L'DCBDDNAM-2) PNT TO LIST - 1 ENTRY
         LA    R5,DDNPTRTB-4       PNT TO OUTPUT PTR TBL - 1 ENTRY
DDNLP    LA    R3,L'DCBDDNAM(,R3)  PNT TO NEXT LIST ENTRY
         CLI   0(R5),X'FF'         AT END OF PTR TBL?
         BE    MUSTB0              YES, LIST ENTRY MUST BE 0
         LA    R5,4(,R5)           NO, PNT TO NEXT PTR ENTRY
         L     R6,0(,R5)           GET OUTPUT PTR
         LTR   R6,R6               IS THERE ONE?
         BZ    MUSTB0              NO, LIST ENTRY MUST BE 0
         OC    0(L'DCBDDNAM,R3),0(R3) NO, IS LIST ENTRY 0?
         BZ    DDNLPN              YES, GO TO NEXT ENTRY
         TM    0(R3),X'BF'         NO, IS 1ST BYTE 0 OR BLANK?
         BZ    BDDDN               YES, ERROR
         MVC   0(L'DCBDDNAM,R6),0(R3) NO, MVC NEW DDN TO OUTPUT LOC
         B     DDNLPN              GO PROCESS NEXT ENTRY
MUSTB0   OC    0(L'DCBDDNAM,R3),0(R3) IS LIST ENTRY 0?
         BNZ   BDDDN               NO, ERROR
DDNLPN   BCT   R0,DDNLP            YES, GO PROCESS NEXT ENTRY
NODDN    DS    0H                                             07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*     3RD PARAMETER PROCESSING: STARTING COPY NUMBER        * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         TM    4(R7),X'80'         IS THERE A 3RD PARAMETER?  07/96 DBC
         BO    NOPARAMS            NO, SKIP OUT
         LA    R4,0(,R4)           YES, ZERO HI BYTE OF ADR
         LTR   R4,R4               IS 3RD PARAMETER OMITTED?
         BZ    NOCPY#              YES, SKIP OUT
         TM    11(R7),X'01'        NO, IS 1/2 WD ALIGNED?     07/96 DBC
         BZ    CPY#OK1             YES, CONTINUE
BDCPY#   OI    FLAG,BADCPY#        NO, SET ERROR FLAG
         B     NOCPY#              SKIP OUT
CPY#OK1  LH    R0,0(,R4)           GET PARAMETER LENGTH
         LTR   R15,R0              SAVE FOR LATER; IS PARAM NULL?
         BZ    NOCPY#              YES, SKIP OUT
         BM    BDCPY#              NO, IF NEG. THEN ERROR
         CH    R0,=Y(4)            NO, IS LENGTH TOO BIG?
         BH    BDCPY#              YES, ERROR
CPY#LP   LA    R4,1(,R4)           NO, PNT TO NEXT DIGIT
         CLI   1(R4),C'0'          IS IT A DIGIT?
         BL    BDCPY#              NO, ERROR
         CLI   1(R4),C'9'          MAYBE, IS IT A DIGIT?
         BH    BDCPY#              NO, ERROR
         BCT   R0,CPY#LP           YES, GO CHECK NEXT DIGIT
         SR    R4,R15              PNT BACK TO START OF PARAM
         BCTR  R15,0               GET MACHINE LENGTH
         EX    R15,CPY#PK          PACK GIVEN VALUE INTO CURRENT FLD
NOCPY#   DS    0H                                             07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*     4TH PARAMETER PROCESSING: TOO MANY PARAMETERS         * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         TM    8(R7),X'80'         ARE THERE EXTRA OPERANDS?  07/96 DBC
         BO    NOPARAMS            NO, FINISHED
         OI    FLAG,TOOMP          YES, SET ERROR FLAG
NOPARAMS DS    0H                                             07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* OPEN SYSPRINT AND INTRODUCE MYSELF.                       * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         OPEN  (SYSPRINT,OUTPUT)   TRY TO OPEN MSG DATASET    07/96 DBC
         MVI   RCD+1,12            SET BAD RETURN CODE        07/96 DBC
         TM    PRTOFLGS,X'10'      WAS OPEN OK?
         BZ    EXIT                NO, GIVE UP
         MVI   RCD+1,0             RESET RETURN CODE               JRB
         SPACE 1                                              07/96 DBC
         $PRINT CRIGHT             NAME AND COPYRIGHT         08/05 DBC
         $PRINT LEGAL1             LEGALESE                   08/05 DBC
         $PRINT LEGAL2             LEGALESE                   08/05 DBC
         $PRINT LEGAL3             LEGALESE                   08/05 DBC
         $PRINT LEGAL4             LEGALESE                   08/05 DBC
         $PRINT LEGAL5             LEGALESE                   08/05 DBC
         $PRINT LEGAL6             LEGALESE                   08/05 DBC
         $PRINT LEGAL7             LEGALESE                   08/05 DBC
         $PRINT SKIP3              WHITE SPACE                08/05 DBC
         $PRINT DSCP               PRINT TITLE                08/05 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* IF PARAMETER PROCESSING ERRORS HAVE OCCURRED, THEN        * 07/96 DBC
* EXPLAIN IT TO DUMMY HERE.                                 * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         TM    FLAG,TOOMP          TOO MANY OPERANDS?
         BZ    #POK                NO, CONTINUE
         MVI   RCD+1,4             YES, SET RET CDE
         $PRINT TMEIPL             PRINT ERROR MESSAGE
#POK     DS    0H                                             07/96 DBC
         SPACE 1                                              07/96 DBC
         TM    FLAG,BADCPY#        VALID COPY PARAMETER?      07/96 DBC
         BZ    C#OK                YES, CONTINUE
         MVI   RCD+1,4             NO, SET RET CODE
         $PRINT IC#                PRINT ERROR MESSAGE
C#OK     DS    0H                                             07/96 DBC
         SPACE 1                                              07/96 DBC
         TM    FLAG,BADDDNM        VALID DDNAME LIST?         07/96 DBC
         BZ    DOK                 YES, CONTINUE
         MVI   RCD+1,12            NO, SET RET CODE
         $PRINT IDL                PRINT ERROR MSG
DOK      DS    0H                                             07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*    1ST PARAMETER PROCESSING (FINALLY): THE PARM FIELD     * 07/96 DBC
*                                                           * 07/96 DBC
* SEE WHETHER OR NOT I EVEN HAVE A PARM FIELD. ISSUE AN     * 07/96 DBC
* INFO MESSAGE IF I DON'T.                                  * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         LTR   R7,R7               ARE THERE ANY PARAMETERS   07/96 DBC
*                                  AT ALL?                    07/96 DBC
         BZ    NOPARM              NO, GO ISSUE MSG           07/96 DBC
         L     R1,0(,R7)           @'PARM FIELD               07/96 DBC
         LA    R1,0(,R1)           PURIFY THE PARM FIELD PTR  07/96 DBC
         LTR   R1,R1               IS THERE A PARM FIELD?     07/96 DBC
         BZ    NOPARM              NO, GO ISSUE MESSAGE       07/96 DBC
         LH    R3,0(,R1)           GET L'PARM FIELD           07/96 DBC
         LTR   R3,R3               IS IT NULL?                07/96 DBC
         BNZ   GOTPARM             NO, GO CHECK IT OUT        07/96 DBC
         SPACE 1                                              07/96 DBC
NOPARM   $PRINT PFN                "PARM FIELD: NONE"         07/96 DBC
         B     PARMZ               DONE HERE                  07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* I'VE GOT A PARM FIELD. DETERMINE ITS LENGTH, EXTRACT IT,  * 07/96 DBC
* AND UPCASE IT.                                            * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
GOTPARM  CL    R3,=A(L'PFTEXT)     IS L'PARM VALID AND        07/96 DBC
*                                  REASONABLE?                07/96 DBC
         BNH   PLENOK              YES, PROCEED               07/96 DBC
         $PRINT PFIL               ISSUE ERROR MESSAGE        07/96 DBC
         MVI   RCD+1,12            I'M GONNA ABORT            07/96 DBC
         B     PARMZ               BLOW OUTTA HERE            07/96 DBC
PLENOK   DS    0H                                             07/96 DBC
         SPACE 1                                              07/96 DBC
         OC    PFTEXT-1(*-*),1(R1) (EXECUTED)                 07/96 DBC
         EX    R3,*-6              COPY PARM FIELD TO MSG     07/96 DBC
*                                  BUFFER AND UPCASE IT.      07/96 DBC
         SPACE 1                                              07/96 DBC
         MVI   PFTEXT-1,C' '       CLEAN UP GARBAGE           07/96 DBC
         CLC   PFTEXT,PFTEXT-1     IS THE PARM FIELD ALL      07/96 DBC
*                                  BLANK?                     07/96 DBC
         BE    NOPARM              YEP, AIN'T GOT ONE AFTER   07/96 DBC
*                                  ALL.                       07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* OK, NOW IT'S TIME TO SCAN THE PARM FIELD. FIRST, DISPLAY  * 07/96 DBC
* IT. THEN SET UP BXH SCAN CONTROLS, THEN STRIP OFF LEADING * 07/96 DBC
* BLANKS AND COMMAS.                                        * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         LA    R0,PFLEN-L'PFTEXT(,R3) L'PARM FIELD MSG        07/96 DBC
         STC   R0,PF-1             STORE FOR PUTSYSP          07/96 DBC
         $PRINT PF                 DISPLAY THE PARM FIELD     07/96 DBC
         SPACE 1                                              07/96 DBC
         LA    R1,PFTEXT-1         @'UPCASED PARM FIELD -1    07/96 DBC
         LA    R2,1                BXH INCRIMENT              07/96 DBC
         ALR   R3,R1               BXH LIMIT                  07/96 DBC
         SPACE 1                                              07/96 DBC
PARMLP1  BALR  R14,0               TOL: STRIP LEADING BLANKS  07/96 DBC
         BXH   R1,R2,PARMZ         ADVANCE                    07/96 DBC
         CLI   0(R1),C' '          LEADING BLANK?             07/96 DBC
         BER   R14                 YES, LOOP                  07/96 DBC
         CLI   0(R1),C','          LEADING COMMA?             07/96 DBC
         BER   R14                 YES, LOOP                  07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* IDENTIFY THE NEXT KEYWORD                                 * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         LA    R4,PARMKEYS-(PKYWORD+1) LOAD KEYWORD TBL SCANR 07/96 DBC
         SLR   R5,R5               CLEAR KEYWORD LENGTH REG   07/96 DBC
         BALR  R14,0               TOL: KEYWORD TABLE SCAN    07/96 DBC
         LA    R4,PKYWORD+1(R5,R4) ADVANCE TO NEXT TABLE SLOT 07/96 DBC
         IC    R5,PKYEXLEN(,R4)    GET ITS TEXT LENGTH -1     07/96 DBC
         CLC   PKYWORD(*-*,R4),0(R1) (EXECUTED)               07/96 DBC
         EX    R5,*-6              RIGHT TRIAL KEYWORD YET?   07/96 DBC
         BLR   R14                 NOT YET, KEEP SCANNING     07/96 DBC
         BH    BADPARM             NOPE, MISSED. ERROR        07/96 DBC
         SPACE 1                                              07/96 DBC
         LA    R1,1(R5,R1)         ADVANCE THE PARM FLD SCANR 07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* EXTRACT THE KEYWORD'S VALUE/MEANING AND "STORE" IT INTO   * 07/96 DBC
* THE ASSOCIATED VALUE SINK. DO FLAG KEYWORDS FIRST.        * 07/96 DBC
* (THEY'RE EASY.)                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         ICM   R15,15,PKYSINK(R4)  @'VALUE SINK; EXIST?       07/96 DBC
         BZ    BADPARM             NOPE; SOMEHOW I MATCHED    07/96 DBC
*                                  THE TABLE DELIMITER        07/96 DBC
         ICM   R4,1,PKYOIFLG(R4)   GET KEYWORD'S MEANING      07/96 DBC
*                                  FLAG. IS THERE ONE?        07/96 DBC
         BZ    GET#                NO, THIS IS NOT A FLAG     07/96 DBC
*                                  KEYWORD                    07/96 DBC
         SPACE 1                                              07/96 DBC
         CLI   0(R1),C' '          IS DELIMITER OK?           07/96 DBC
         BE    PSETFLAG            YES, PROCEED               07/96 DBC
         CLI   0(R1),C','          CHECK AGAIN                07/96 DBC
         BNE   BADPARM             NO, ERROR.                 07/96 DBC
         SPACE 1                                              07/96 DBC
PSETFLAG OI    0(R15),*-*          (EXECUTED)                 07/96 DBC
         EX    R4,*-4              STORE THE KEYWORD'S        07/96 DBC
*                                  MEANING                    07/96 DBC
         B     PARMLP1             DONE HERE. LOOP TO SCAN    07/96 DBC
*                                  FOR THE NEXT KEYWORD.      07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* THE KEYWORD HAS A NUMERIC VALUE. EXTRACT IT, VCHECK IT,   * 07/96 DBC
* AND STORE IT.                                             * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
GET#     L     R5,0(,R15)          GET KEYWORD'S PRIOR VALUE  07/96 DBC
         CLR   R1,R3               IS THERE ENOUGH ROOM LEFT  07/96 DBC
*                                  IN THE PARM FIELD FOR THE  07/96 DBC
*                                  KEYWORD TO HAVE A VALUE?   07/96 DBC
         BH    PARMGOT#            NO, THE KEYWORD HAS A NULL 07/96 DBC
*                                  VALUE. LEAVE ITS PRIOR (OR 07/96 DBC
*                                  ORIGINAL) VALUE            07/96 DBC
*                                  UNDISTURBED.               07/96 DBC
         TM    0(R1),C'0'          IS THE KEYWORD DIRECTLY    07/96 DBC
*                                  FOLLOWED BY A NUMERIC      07/96 DBC
*                                  VALUE?                     07/96 DBC
         BNO   PARMLP3Z            NOPE, THE KEYWORD'S VALUE  07/96 DBC
*                                  IS NULL.                   07/96 DBC
         SPACE 1                                              07/96 DBC
         SLR   R5,R5               CLEAR THE VALUE ACCUMULATR 07/96 DBC
         BCTR  R1,0                BACK OFF THE SCANNER A     07/96 DBC
*                                  LITTLE.                    07/96 DBC
         BALR  R14,0               TOL: DECIMAL # EXTRACTION  07/96 DBC
         BXH   R1,R2,PARMGOT#      ADVANCE TO NEXT DIGIT      07/96 DBC
         TM    0(R1),C'0'          IS IT A DIGIT?             07/96 DBC
         BNO   PARMLP3Z            NO, HOPE IT'S A VALID      07/96 DBC
*                                  DELIMITER.                 07/96 DBC
         M     R4,=F'10'           DECIMAL SHIFT THE          07/96 DBC
*                                  ACCUMULATER                07/96 DBC
         LTR   R4,R4               DID 32-BIT OVERFLOW        07/96 DBC
*                                  OCCUR?                     07/96 DBC
         BNZ   BADPARM             YES, ERROR.                07/96 DBC
         IC    R4,0(,R1)           EXTRACT THE DIGIT          07/96 DBC
         N     R4,=X'0000000F'     PURIFY IT.                 07/96 DBC
         ALR   R5,R4               ACCUMULATE IT; DID A CARRY 07/96 DBC
*                                  OCCUR?                     07/96 DBC
         BC    3,BADPARM           YES, ERROR.                07/96 DBC
         BR    R14                 LOOP FOR NEXT DIGIT        07/96 DBC
         SPACE 1                                              07/96 DBC
PARMLP3Z CLI   0(R1),C' '          EO-# BUT NOT EO-PARM;      07/96 DBC
*                                  VALID DELIMITER?           07/96 DBC
         BE    PARMGOT#            YES, PROCEED               07/96 DBC
         CLI   0(R1),C','          VALID DELIMITER?           07/96 DBC
         BNE   BADPARM             NO, ERROR.                 07/96 DBC
         SPACE 1                                              07/96 DBC
PARMGOT# ST    R5,0(,R15)          STORE THE EXTRACTED VALUE  07/96 DBC
         B     PARMLP1             LOOP FOR NEXT PARM         07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* PARM FIELD ERROR. POINT OUT THE ERROR, THEN ABORT.        * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
BADPARM  MVC   PFTEXT,PFTEXT-1     CLEAR THE PARM DATA        07/96 DBC
         MVI   0(R1),C'*'          FLAG THE ERROR POINT       07/96 DBC
         MVC   PF,=C' ERROR-----> '                           07/96 DBC
         #TEST SIZE=(L'PF,EQ,13)   DEPENDANCY CHECK           07/96 DBC
         $PRINT PF                 DISPLAY THE ERROR MESSAGE  07/96 DBC
         MVI   RCD+1,12            SET "ABORT" RC             07/96 DBC
PARMZ    DS    0H                                             07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
* END OF ALL PARAMETER PROCESSING. ABORT IF SIGNIFICANT     * 07/96 DBC
* ERRORS WERE FOUND.                                        * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         CLI   RCD+1,8             SHOULD I GIVE UP?          07/96 DBC
         BNL   CLOSEPRT            YES, DO SO                 07/96 DBC
         TITLE 'DSCOPY -- COPY PROCESSING SETUP'              07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*                COPY PROCESSING SETUP                      * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         LA    R1,INDCB            NO, PNT TO INDCB
         BAL   R14,GETPFXLN        GO SET INDDNAM COMPARE PARAMS
         LA    R1,OUTDCB           PNT TO OUTDCB
         BAL   R14,GETPFXLN        GO SET OUTDDNAM COMPARE PARAMS
         GETMAIN VC,LA=GETMQTY,A=GETMADR GET CORE FOR BUFFERS
         LTR   R15,R15             WAS MIN REQUEST GOTTEN?
         BZ    GTMOK               YES, CONTINUE
         MVI   RCD+1,12            NO, SET RET CODE
         $PRINT IC                 PRINT ERROR MSG
         B     CLOSEPRT            QUIT
GTMOK    L     R1,GETMADR          PNT TO GETMAIN'ED CORE
         ST    R1,INBUFCB          INIT INPUT BUFFER PTR
         A     R1,GETMADR+4        PNT TO END OF GOTTEN CORE
         L     R0,GETMQTY          GET AMMOUNT TO GIVE BACK TO OS
         SH    R0,=Y(2*(80+8))     ADJUST FOR MIN BUF REQUIREMENT
         SR    R1,R0               PNT TO START OF CORE TO FREE
         FREEMAIN R,LV=(0),A=(1)   GIVE OS SOME ELBOW ROOM
         L     R1,GETMADR+4        GET ORIGINAL L'GOTTEN CORE 07/96 DBC
         LA    R1,2*(80+8)(,R1)    AJD FOR MIN BUF REQUIREMENT
         S     R1,GETMQTY          ADJUST FOR FREED CORE
         ST    R1,GETMADR+4        SAVE LEN FOR FINAL FREEMAIN
         SRL   R1,1                GET BUF SPACE FOR EA DCB
         LR    R0,R1               REPLICATE
         A     R1,GETMADR          PNT TO OUTPUT BUFFER AREA
         ST    R1,OUTBUFCB         INIT OUTPUT BUFFER PTR
         SH    R0,=Y(8)            ADJUST AMMOUNT FOR BUF CNTRL BLK
         ST    R0,MAXCR            SAVE FOR LATER
         L     R1,CVTPTR           PNT TO CVT
*        L     R1,CVTTCBP-CVTDSECT(,R1) PNT TO NEW/OLD TCB PTRS
         L     R1,0(,R1)           POINT TO TCB POINTER.           JRB
         L     R1,4(,R1)           PNT TO OUR TCB
         L     R1,12(,R1)          PNT TO TIOT
         LA    R1,24(,R1)          PNT TO 1ST DD ENTRY IN TIOT
         ST    R1,TIOTADR          SAVE IT
         TITLE 'DSCOPY -- DATASET COPY LOOP'                  07/96 DBC
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*                  DATASET COPY LOOP                        * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
COPYLP   NI    FLAG,TRUNC          CLEAR MOST OF FLAG BYTE
         NI    FLAG2,0             CLEAR FLAG BYTE
         BAL   R14,ITIOT           GO FIND NEXT INPUT DDNAME
OTIOTLP  BAL   R14,OTIOT           FIND NEXT OUTPUT DDN TO COPY
ENDTST   TM    FLAG,OUTEND+INEND   BOTH DDNAMES MISSING?
         BO    FREECORE            YES, END OF PROGRAM
         MVC   COPYTIT+8(3),EDMSK+8 NO, SET UP -
         ED    COPYTIT+7(4),CPY#    COPY TITLE
         AP    CPY#,=P'1'          INCR CPY COUNT FOR NEXT
         $PRINT SKIP3              SKIP A FEW LINES           07/96 DBC
         $PRINT COPYTIT            PRINT THE COPY TITLE
         CLC   INWORK(L'DCBDDNAM),OUTWORK IS THE IN/OUT PAIR MATCHED?
         BE    OPEN                YES, GO START COPYING
         BH    INMSNG              NO, INPUT DDNAME MISSING
         OI    FLAG,OUTMISS        NO, FLAG OUTPUT DDNAME MISSING
         B     PUTDDNMS            CONTINUE
INMSNG   OI    FLAG,INMISS         FLAG INPUT DDNAME MISSING
PUTDDNMS MVI   PRNTM+1,INMISS      SET INPUT DDNAME MISSING TEST MASK
         LA    R2,INDCB            GET INPUT DCB
         BAL   R14,PRNTDDCC        GO PRINT INPUT DDNAME (IF ANY)
         MVI   PRNTM+1,OUTMISS     SET OUTPUT DDNAME MISSING TEST MASK
         LA    R2,OUTDCB           GET OUTPUT DCB
         BAL   R14,PRNTDDCC        GO PRINT OUTPUT DDNAME (IF ANY)
         TM    FLAG,INMISS         IS INPUT DDNAME MISSING?
         BO    OTIOTLP             YES, GO GET NEXT OUTPUT DDNAME
         BAL   R14,ITIOT           GO FIND NEXT INPUT DDNAME
         B     ENDTST              LOOP BACK
         SPACE 1                                              07/96 DBC
OPEN     LA    R8,1                COUNTER INCRIMENT          07/96 DBC
         SR    R9,R9               INIT INPUT RECORD COUNT    07/96 DBC
         SR    R10,R10             INIT OUTPUT RECORD COUNT
         SLR   R11,R11             INIT INPUT RECORDS COPIED  07/96 DBC
         SP    INCNT,INCNT         INIT INPUT DATA SET COUNT
         LA    R1,INDCB            PNT TO INPUT DCB
         BAL   R14,DCBINIT         GO (RE)INITALIZE DCB
         LA    R1,OUTDCB           PNT TO OUTPUT DCB
         BAL   R14,DCBINIT         GO (RE)INITALIZE OUTPUT DCB
         OPEN  (IN,(INPUT,LEAVE),OUT,(OUTPUT,LEAVE)) OPEN DS'S
         TM    INOFLGS,X'10'       IS THE INPUT DCB OPENED?
         BZ    NOCOPY              NO, GO SAY SO
         TM    OUTOFLGS,X'10'      YES, IS THE OUTPUT DCB OPENED?
         BZ    NOCOPY              NO, GO SAY SO
         TM    FLAG,CPYSUPRS       YES, SHOULD COPY BE SUPPRESSED?
         BZ    OPENOK              NO, GO COPY
NOCOPY   $PRINT CS                 NO, SAY SO
         CLI   RCD+1,8             IS RET CODE HIGH ENOUCH?
         BNL   CLOSE               YES, GO MAKE SURE DS'S ARE CLOSED
         MVI   RCD+1,8             NO, RESET RET CODE
         B     CLOSE               GO CLOSE THE OTHER DATA SET
         TITLE 'DSCOPY -- COPY ROUTINE'
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*               LOGICAL RECORD COPY LOOP                    * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
OPENOK   NI    FLAG,255-REREAD     TURN OFF REREAD FLAG
         OI    FLAG2,CONCAT        FLAG ICO CONCAT FOR INEXIT
         LH    R4,LRECL            GET OUTPUT DATA LENGTH
         SPACE 1                                              07/96 DBC
GET      CL    R9,STOP#            HAVE I COPIED THE STOP     07/96 DBC
*                                  RECORD?                    07/96 DBC
         BNL   WRAPUP              YES, TERMINATE THIS COPY   07/96 DBC
         CL    R11,COUNT#          HAVE I COPIED THE REQUIRED 07/96 DBC
*                                  NUMBER OF RECORDS?         07/96 DBC
         BNL   WRAPUP              YES, TERMINATE THIS COPY   07/96 DBC
         SPACE 1                                              07/96 DBC
         GET   IN                  GET AN INPUT RECORD        07/96 DBC
         TM    FLAG,REREAD         HAS CONCATINATION OCCURED?
         BZ    NOREREAD            NO, CONTINUE
         TM    INOFLGS,X'10'       YES, WAS DATA SET REOPENED OK?
         BO    OPENOK              YES, GO REREAD
         $PRINT CT                 NO, ISSUE MESSAGE
         B     WRAPUP              GO WRAP UP THIS COPY
         SPACE 1                                              07/96 DBC
NOREREAD ALR   R9,R8               INCR RECORDS IN COUNTER    07/96 DBC
         CL    R9,START#           HAVE I REACHED THE START   07/96 DBC
*                                  RECORD?                    07/96 DBC
         BL    GET                 NOT YET, SKIP              07/96 DBC
         ALR   R11,R8              COUNT COPIED RECORD        07/96 DBC
         LR    R2,R1               SAVE INPUT RCD PTR
         SPACE 1                                              07/96 DBC
INGT     B     *-*                 INPUT RECFM GATE
         SPACE 1                                              07/96 DBC
INU      DS    0H                  INPUT RECFM=U
INF      LH    R3,INLRECL          INPUT RECFM=F: GET LRECL
         B     PUT                 GO WRITE RCD
         SPACE 1                                              07/96 DBC
INV      MVC   HWD,0(R2)           INPUT RECFM=V: GET RCD LENGTH
         LH    R3,HWD              GET LRECL
         SH    R3,=Y(4)            GET DATA LENGTH
         LA    R2,4(,R2)           PNT TO DATA FIELD
         SPACE 1                                              07/96 DBC
PUT      ALR   R10,R8              INCR RECORDS OUT COUNTER   07/96 DBC
         LR    R5,R3               SAVE INPUT DATA LENGTH
         CR    R3,R4               COMPARE INPUT VS OUTPUT DATA LENGTHS
         BNH   OUTGT               IF INPUT NOT LONG, CONTINUE
         LR    R5,R4               ELSE, ADJUST INPUT LENGTH
         SPACE 1                                              07/96 DBC
OUTGT    B     *-*                 OUTPUT RECFM GATE
         SPACE 1                                              07/96 DBC
OUTU     STH   R5,OUTLRECL         SET OUTPUT LRECL
         PUT   OUT                 GET OUTPUT BUFFER
         SPACE 1                                              07/96 DBC
MVCRCD   BAL   R14,MVC             MOVE RCD TO OUTPUT BUFFER
         ALR   R1,R5               ADVANCE TO Z'SINK          08/05 DBC
         ALR   R2,R5               ADVANCE TO Z'SOURCE        08/05 DBC
TRUNCTST TM    FLAG,TRUNC          DO WE SPAN THE RECORD?
         BO    GET                 NO, GO GET NEXT RCD
         SR    R3,R4               YES, IS RDC TOO LONG?
         BNP   GET                 NO, GO GET NEXT RCD
         B     PUT                 YES, GO PUT NEXT RD SEGMENT
         SPACE 1                                              07/96 DBC
OUTF     PUT   OUT                 GET OUTPUT BUFFER
         BAL   R14,MVC             MOVE RDC TO OUTPUT BUFFER
         ALR   R1,R5               ADVANCE TO Z'SINK          08/05 DBC
         ALR   R2,R5               ADVANCE TO Z'SOURCE        08/05 DBC
         LR    R5,R3               RESTORE INPUT LRECL
         SR    R5,R4               COMPARE INPUT VS OUTPUT RCD LENGTHS
         BNM   TRUNCTST            IF ¬ SHORT, GO TST 4 TRUNCATION
         MVI   0(R1),C' '          SET INITAL PAD BLANK
         LPR   R5,R5               GET PADDING LENGTH
         BCTR  R5,0                DECR FOR INITAL PAD BLANK
         LTR   R5,R5               WAS INITAL SUFFICENT?
         BNP   GET                 YES, GO GET NEXT RCD
         LR    R2,R1               NO, GET SOURCE PAD PTR
         LA    R1,1(,R1)           GET OUTPUT PAD PTR
         BAL   R14,MVC             GO PAD OUT RCD
         ALR   R1,R5               ADVANCE TO Z'SINK          08/05 DBC
         ALR   R2,R5               ADVANCE TO Z'SOURCE        08/05 DBC
         B     GET                 GO GET NEXT RCD
         SPACE 1                                              07/96 DBC
OUTV     LA    R6,4(,R5)           ADJUST FOR LENGTH FIELD
         STH   R6,HWD              SET UP LENGTH FIELD
         STH   R6,OUTLRECL         SET OUTPUT LRECL
         PUT   OUT                 GET OUTPUT BUFFER
         MVC   0(4,R1),HWD         MVC LENGTH FIELD TO RECORD
         LA    R1,4(,R1)           PNT PAST LENGTH FIELD
         B     MVCRCD              GO MOVE RECORD TO BUFFER
         TITLE 'DSCOPY -- END OF COPY ROUTINE'
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*               END-OF-FILE PROCESSING                      * 07/96 DBC
*                                                           * 07/96 DBC
* DISPLAY THE FOLLOWING:                                    * 07/96 DBC
*   - THE 1ST INPUT RECORD# COPIED.                         * 07/96 DBC
*   - THE LAST INPUT RECORD# COPIED.                        * 07/96 DBC
*   - THE NUMBER OF INPUT RECORDS COPIED.                   * 07/96 DBC
*   - THE NUMBER OF OUTPUT RECORDS WRITTEN.                 * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
WRAPUP   MVI   RIO,C'0'            CCC                        07/96 DBC
         MVC   RIOWHICH(5),=C'FIRST'                          07/96 DBC
         MVC   RIOINOUT(L'INNME),INNME                        07/96 DBC
         MVI   RIOPLURL,C' '                                  07/96 DBC
         MVC   RIOVERB(7),=C'COPIED '                         07/96 DBC
         L     R0,START#           #'1ST RECORD COPIED        07/96 DBC
         BAL   R14,PUTTOTL         COMPLETE AND SEND THE MSG  07/96 DBC
         SPACE 1                                              07/96 DBC
         MVI   RIO,C' '            CCC                        07/96 DBC
         MVC   RIOWHICH(5),=C' LAST'                          07/96 DBC
         LR    R0,R9               #'LAST RECORD COPIED       07/96 DBC
         BAL   R14,PUTTOTL         COMPLETE AND SEND THE MSG  07/96 DBC
         SPACE 1                                              07/96 DBC
         MVC   RIOWHICH(5),=C'TOTAL'                          07/96 DBC
         MVI   RIOPLURL,C'S'                                  07/96 DBC
         LR    R0,R11              #'INPUT RECORDS COPIED     07/96 DBC
         BAL   R14,PUTTOTL         COMPLETE AND SEND THE MSG  07/96 DBC
         SPACE 1                                              07/96 DBC
         MVC   RIOINOUT(L'OUTNME),OUTNME                      07/96 DBC
         MVC   RIOVERB(7),=C'WRITTEN'                         07/96 DBC
         LR    R0,R10              #'OUTPUT RECORDS WRITTEN   07/96 DBC
         BAL   R14,PUTTOTL         COMPLETE AND SEND THE MSG  07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* IF A COUNT= VALUE WAS GIVEN, THEN INCRIMENT THE START=    * 07/96 DBC
* VALUE BY THE COUNT= VALUE. THIS MAKES IT EASIER TO        * 07/96 DBC
* SEGMENT A VERY LARGE DATASET INTO SEVERAL SMALLER ONES    * 07/96 DBC
* VIA SUCCESSIVE COPIES.                                    * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         L     R0,COUNT#           GET THE COUNT= VALUE       07/96 DBC
         CL    R0,=X'FFFFFFFF'     WAS ONE GIVEN?             07/96 DBC
         BE    SEGMENTZ            NO, FORGET IT              07/96 DBC
         SPACE 1                                              07/96 DBC
         L     R15,START#          GET START= VALUE           07/96 DBC
         ALR   R15,R0              INCRIMENT; OVERFLOW?       07/96 DBC
         BC    12,NEWSTART         NO, PROCEED                07/96 DBC
         L     R15,=X'FFFFFFFF'    TRUNCATE TO MAX VALUE      07/96 DBC
NEWSTART ST    R15,START#          STORE                      07/96 DBC
SEGMENTZ DS    0H                                             07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* FINALLY, CLUSE THE FILES AND LOOP TO PERFORM NEXT COPY.   * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
CLOSE    CLOSE (IN,LEAVE,OUT,LEAVE) CLOSE THE DATA SETS
         B     COPYLP              GO PERFORM NEXT COPY       07/96 DBC
         TITLE 'DSCOPY -- END OF PROGRAM ROUTINE'
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*              END-OF-PROGRAM PROCESSING                    * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
FREECORE FREEMAIN V,A=GETMADR      FREE THE BUFFERS
CLOSEPRT $PRINT SKIP3              SKIP A FEW MSG LINES       07/96 DBC
         CLI   RCD+1,12            IS RET CODE TERMINAL?
         BL    PUTEOP              NO, GO PRT NORMAL EOP MSG
         $PRINT PT                 YES, PUT PGM TERMINATE MSG
         B     GETRCD              GO PROCESS RET CODE
PUTEOP   $PRINT EOP                ISSUE EOP MSG
GETRCD   LH    R2,RCD              GET RETURN CODE
         MVC   RCDMSG+15(3),EDMSK+8 MOVE EDIT MASK TO MSG
         CVD   R2,CVDWA            CNVRT RETURN CODE TO DEC
         ED    RCDMSG+14(4),CVDWA+6 EDIT RCD INTO MSG
         $PRINT RCDMSG             ISSUE RET CODE MSG
         CLOSE (SYSPRINT,LEAVE)    CLOSE THE MESSAGE DATA SET
         FREEPOOL SYSPRINT         FREE ITS BUFFERS
EXIT     DS    0H                  RECEIVE BRANCHES
         LH    R15,RCD             GET THE RETURN CODE        07/96 DBC
         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER          08/05 DBC
         TITLE 'DSCOPY -- DCBINIT (1ST LEVEL SUBROUTINE) - (RE) INITALI*
               ZE DCB''S FOR OPEN'
         USING DCBDSECT,R1         DECLARE DCB BASE
DCBINIT  MVI   DCBRECFM,0          INIT RECFM
         MVI   DCBOPTCD,0          INIT OPTCD
         STH   R9,DCBLRECL         ZERO LRECL
         STH   R9,DCBBLKSI         ZERO BLKSIZE
         BR    R14                 RETURN
         DROP  R1                  KILL DCB BASE
         TITLE 'DSCOPY -- GETPFXLN (1ST LEVEL SUBROUTINE) - GENERATE DD*
               NAME COMPARE AND SHIFT VALUES'
         USING DCBDSECT,R1         DECLARE DCB BASE
GETPFXLN LA    R0,L'DCBDDNAM       GET MAX DDNAME LENGTH
         LA    R15,DDNAME+L'DCBDDNAM PNT TO END OF DDNAME
PFXLNLP  BCTR  R0,0                DECRIMENT PREFIX LENGTH
         BCTR  R15,0               DECRIMENT CHARACTER PTR
         TM    0(R15),X'BF'        PNTING TO ZERO OR BLANK?
         BNZ   PFXLPND             NO, BREAK LOOP
         MVI   0(R15),0            YES, ENSURE TRAILING ZERO
         B     PFXLNLP             LOOP TO NEXT CHARACTER
PFXLPND  STH   R0,PFXLN            SAVE PREFIX MACHING LENGTH
         AH    R0,=Y(1)            GET ACTUAL LENGTH
         SLL   R0,3                CNVRT TO BIT COUNT
         STH   R0,SFXLN            SAVE IT FOR LATER SHIFT LOGICALS
         BR    R14                 RETURN
         DROP  R1                  KILL DCB BASE
         TITLE 'DSCOPY -- INEXIT (1ST LEVEL SUBROUTINE) - INPUT DCB EXI*
               T'
INEXIT   ST    R14,SAVE14A         SAVE RETURN ADDRESS
         LA    R2,IN               GET DCB ADDRESS
         USING DCBDSECT,R2         DECLARE DCB BASE
         MVC   SAVESA(18*4),0(R13) SAVE THE SAVE AREA
         OI    INOFLGS,X'08'       FLAG POSSIBLE INPUT CONCATINATION
         OI    FLAG,REREAD         FLAG POSSIBLE CONCAT REREAD
         AP    INCNT,=P'1'         INCR INPUT DATA SET COUNT
         MVC   IN#+19(3),EDMSK+8   MOVE EDIT MASK TO MESSAGE
         ED    IN#+18(4),INCNT     EDIT COUNT INTO MSG
         $PRINT IN#                PRINT INPUT CONCAT SEQ MSG
         MVI   DDNMSG,C' '         SET NEXT MSG'S CARRAGE CNTL
         BAL   R14,PRNTNMES        DO FURTHER PROCESSING
         BC    8,EXITERR           IF ERROR, QUIT
         NI    FLAG,255-UNITRCD    DON'T CONFUSE OUTEXIT
         LA    R3,INGT             PNT TO INPUT F, V, OR U GATE
         BAL   R14,GETRECFM        PROCESS RECFM
         OC    INBLKSI,INBLKSI     IS BLKSIZE GIVEN?
         BNZ   IPROCLRC            YES, CONTINUE
         $PRINT BLKSIERR           NO, PRINT ERROR MESSAGE
         B     EXITERR             QUIT
IPROCLRC BAL   R14,GETBUFS         GET BUFFERS
         BC    8,EXITERR           IF ERROR, QUIT
         LH    R14,LRECL           SAVE OUTPUT'S LRECL ICO CONCAT
         STH   R15,LRECL           SET INPUT'S LRECL
         TM    FLAG2,CONCAT        IS THIS A CONCATINATION?
         BZ    EXITRTRN            NO, EXIT TO OPEN
         LR    R15,R14             YES, GET OUTPUT'S LRECL
         B     OVSIMSG             GO PRINT DATA LEN COMPARE MSG
EXITERR  MVI   DCBRECFM,X'C0'      BAD DCB INFORMATION -
         MVC   DCBBLKSI,=Y(80)      CORRECT DCB SO OPEN WONT ABEND
         OI    FLAG,CPYSUPRS       FLAG TO SUPPRESS COPYING
         LA    R3,80               GET BUFFER LENGTH
         LA    R5,1                GET BUFNO
         LA    R14,EXITRTRN        GET RETURN ADDRESS
         ST    R14,SAVE14B         SAVE IT
         B     ERRBUILD            MAKE OPEN HAPPY: BUILD SOME BUFFERS
EXITRTRN MVC   0(18*4,R13),SAVESA  RESTORE THE SAVE AREA
LEVL1RET L     R14,SAVE14A         RESTORE RETURN ADDRESS
         BR    R14                 RETURN
         DROP  R2                  KILL DCB ADDRESSABILITY
         TITLE 'DSCOPY -- IOERR (1ST LEVEL SUBROUTINE) - SYNAD EXIT'
IOERR    SYNADAF ACSMETH=QSAM      GET SYNAD MESSAGE
         L     R13,4(,R13)         RESTORE BASE REGISTER
         CLC   133(3,R1),=AL3(SYSPRINT) IS ERROR ON SYSPRINT?
         BNE   NOABND              NO, CONTINUE
         LA    R15,82              YES, GET LENGTH OF WTO
         SLL   R15,16              SHIFT TO 1ST 1/2 WORD
         O     R15,=X'00008000'    SET MCS BIT
         ST    R15,46(,R1)         INIT WTO PREFIX FIELD
         LA    R15,X'20'           GET ROUTE CODE (11)
         ST    R15,128(,R1)        INIT WTO SUFIX FIELD
         WTO   MF=(E,46(R1))       ISSUE I/O ERROR MSG
         ABEND 1,DUMP              GIVE UP
NOABND   LA    R15,37(,R1)         PNT TO START OF ERROR MSG
         MVC   0(13,R15),=C'!0I/O ERROR: ' SET MSG LEN & PREFIX
         BAL   R14,PUTSYSP         GO PRINT MSG
         $PRINT CT                 ISSUE COPY ENDED MSG
         L     R13,8(,R13)         RESTORE SYNAD SAVE AREA PTR
         DROP  R13                 MAIN BASE NOT USABLE AGAIN
         SR    R15,R15             SET NEG R15 TO -
         BCTR  R15,0                SIGNEL SYNADRLS
         SVC   68                  ISSUE SYNADRLS
         USING DSCSAVE,R13         MAIN BASE RESTORED BY SYNADRLS
         CLI   RCD+1,8             IS RET CODE ALREADY HIGH?
         BNL   WRAPUP              YES, GO WRAP UP COPY
         MVI   RCD+1,8             NO, SET RET CODE
         B     WRAPUP              GO WRAP UP COPY
         TITLE 'DSCOPY -- MVC (1ST LEVEL SUBROUTINE) - CHARACTER MOVING*
                ROUTINE'
MVC      #XXC  MVC,                OPERATION                  08/05 DBC*
               (R1),               TO POINTER                 08/05 DBC*
               (R2),               FROM POINTER               08/05 DBC*
               (R5),               LENGTH                     08/05 DBC*
               MF=SUBROUTINE       FORM TO GENERATE           08/05 DBC
         TITLE 'DSCOPY -- OUTEXIT (1ST LEVEL SUBROUTINE) - OUTPUT DCB E*
               XIT'
OUTEXIT  ST    R14,SAVE14A         SAVE RETURN ADDRESS
         LA    R2,OUTDCB           PNT TO OUTPUT DCB
         USING DCBDSECT,R2         DECLARE DCB BASE
         MVC   SAVESA(18*4),0(R13) SAVE THE SAVE AREA
         MVI   DDNMSG,C'0'         SET NEXT MSG CARRAGE CONTROL
         BAL   R14,PRNTNMES        GO DO FURTHER PROCESSING
         BC    8,EXITERR           IF ERROR, QUIT
         CLI   OUTRECFM,0          IS RECFM GIVEN?
         BNE   RFNTNULL            YES, STAY WITH IT
         MVC   OUTRECFM,INRECFM    NO, GET INPUT'S RECFM
RFNTNULL TM    FLAG,UNITRCD        UNIT RECORD DEVICE?
         BZ    GOGETRFM            NO, CONTINUE
         NI    OUTRECFM,255-X'10'  YES, KILL BLOCKING
GOGETRFM LA    R3,OUTGT            PNT TO OUTPUT F-V-U GATE
         BAL   R14,GETRECFM        GO PROCESS RECFM
         OC    OUTBLKSI,OUTBLKSI   IS BLKSIZE GIVEN?
         BNZ   OPROCLRC            YES, GO PROCESS
         OC    OUTBLKSI,INBLKSI    NO, GET INPUT'S; ALSO OMITTED?
         BZ    EXITERR             YES, QUIT
         OC    OUTLRECL,OUTLRECL   NO, IS LRECL GIVEN?
         BNZ   OPROCLRC            YES, GO PROCESS
         MVC   OUTLRECL,INLRECL    NO, USE INPUT'S
OPROCLRC BAL   R14,GETBUFS         GO GET OUTPUT BUFFERS
         BC    8,EXITERR           IF ERROR, QUIT
         TM    FLAG,CPYSUPRS       COPY ALREADY SUPPRESSED?
         BO    EXITRTRN            YES, QUIT EXIT
OVSIMSG  LA    R1,27               GET MESSAGE LENGTH
         MVI   RLC+20,C'='         ASSUME OUT LRECL = IN LRECL
         CH    R15,LRECL           CMPR RTRN'ED DATA LEN W INPUT'S
         BE    PUTRLC              IF =, GO PRINT MSG
         STH   R15,LRECL           MUST = OUTPUT DATA LEN
         BH    OGTI                IF >, GO MODIFY MSG
         MVI   RLC+20,C'<'         LESS; SET MSG
         LA    R1,L'RLC            ADJUST MSG LENGTH
         MVC   RLC+44(15),=CL15'WHEN NECESSARY' ADJUST MSG
         MVC   RLC+35(8),=CL8' "SPAN"' ASSUME SPANNING
         TM    FLAG,TRUNC          DO WE REALLY TRUNCATE ON LONG RCDS?
         BZ    PUTRLC              NO, GO PRINT MSG
         MVC   RLC+35(8),=CL8'TRUNCATE' YES, SAY SO
         B     PUTRLC              GO PRINT MSG
OGTI     MVI   RLC+20,C'>'         SAY OUTPUT > INPUT
         TM    OUTRECFM,X'40'      IS RECFM F?
         BO    PUTRLC              NO, GO PRINT MSG
         LA    R1,L'RLC            YES, ADJUST MSG LENGTH
         MVC   RLC+35(24),=C'PAD WITH BLANKS ON RIGHT' ADJ MSG
PUTRLC   STC   R1,RLC-1            SET MSG LENGTH
         $PRINT RLC                PRINT THE MSG
         B     EXITRTRN            GO RETURN TO OPEN
         DROP  R2                  KILL DCB ADDRESSABILITY
         TITLE 'DSCOPY -- PUTTOTL (1ST LEVEL SUBROUTINE) - PUT RECORDS *
               COPIED MESSAGES'
************************************************************* 07/96 DBC
*                                                           * 07/96 DBC
*                    PUTTOTL                                * 07/96 DBC
*                                                           * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         USING DCBDSECT,R1         DECLARE DCB BASE
PUTTOTL  ST    R14,SAVE14A         SAVE RETURN ADDRESS
         MVC   RIOCOUNT+1(L'RIOCOUNT-1),=X'20206B2020206B2020206B202120*
               '                   XX-GIG EDIT MASK           07/96 DBC
         CVD   R0,CVDWA            CNVRT COUNT RO DECIMAL     07/96 DBC
         ED    RIOCOUNT,CVDWA+2    CNVRT TO TEXT              07/96 DBC
         $PRINT RIO                PRINT THE MESSAGE
         B     LEVL1RET            GO RETURN
         DROP  R1                  KILL DCB BASE
         TITLE 'DSCOPY -- TIOTSRCH (1ST LEVEL SUBROUTINE) - DDNAME SEAR*
               CHING ROUTINE'
ITIOT    MVI   TIOTSMSK+1,INEND    SET INPUT LIST EXHAUSTED BIT
         LA    R2,INDCB            PNT TO INPUT DCB
         B     TIOTSRCH            SEARCH FOR DDNAME
OTIOT    MVI   TIOTSMSK+1,OUTEND   SET OUTPUT LIST EXHAUSTED TEST BIT
         LA    R2,OUTDCB           PNT TO OUTPUT DCB
         USING DCBDSECT,R2         DECLARE DCB BASE
TIOTSRCH NI    FLAG,255-INMISS-OUTMISS TURN OFF DDNMAE MISSING BITS
         SR    R0,R0               ZERO FOR GETTING DD ENTRY LENGTHS
         L     R15,TIOTADR         PNT TO 1ST DD ENTRY
         MVI   WORK,X'FF'          SET NEW DDNAME TO -
         MVC   WORK+1(L'DCBDDNAM-1),WORK HIGHEST COALATE
         MVC   TIOTCLC+1(1),PFXLN+1 GET DDNAME PREFIX LEN
TIOTLP   AR    R15,R0              PNT TO NEXT DD ENTRY
         IC    R0,0(,R15)          GET ITS LENGTH
         LTR   R0,R0               PAST LAST ENTRY?
         BZ    TIOTLPND            YES, QUIT LOOP
TIOTCLC  CLC   DDNAME(*-*),4(R15)  NO, DDNAME HAS PROPER PREFIX?
         BNE   TIOTLP              NO, LOOP BACK
         CLC   DDNAME(L'DCBDDNAM),4(R15) YES, IS DDNAME TOO LOW?
         BNL   TIOTLP              YES, LOOP BACK
         CLC   WORK(L'DCBDDNAM),4(R15) NO, IS DDNAME TOO HIGH?
         BNH   TIOTLP              YES, LOOP BACK
         MVC   WORK(L'DCBDDNAM),4(R15) NO, SAVE IT AS NEW LOW
         ST    R15,TIOTP           SAVE DD ENTRY PTR
         B     TIOTLP              LOOP BACK TO CHECK NEXT ENTRY
TIOTLPND MVC   DDNAME(L'DCBDDNAM),WORK SET NEW DDNAME
         CLI   WORK,X'FF'          IS THERE A NEW DDNAME?
         BNE   SETSFX              YES, GO ISOLATE SUFFIX
TIOTSMSK OI    FLAG,*-*            NO, FLAG DDNAME MISSING
SETSFX   LM    R0,R1,DDNAME        GET THE DDNAME
         STM   R0,R1,DCBDDNAM      SET DDNAME INTO DCB
         LH    R15,SFXLN           GET SUFFIX SHIFT VALUE
         SLDL  R0,0(R15)           SHIFT OUT UNLIKE PREFIX
         STM   R0,R1,WORK          SAVE SUFFIX FOR COMPARES
         OC    WORK(L'DCBDDNAM),=CL8' ' ENSURE TRAILING BLANKS
         BR    R14                 RETURN
         DROP  R2                  KILL DCB ADDRESSABILITY
         TITLE 'DSCOPY -- GETBUFS (2ND LEVEL SUBROUTINE) - CHK LRECL &&*
                BLKSIZE AND GET BUFFERS'
         USING DCBDSECT,R2         DECLARE DCB BASE
GETBUFS  ST    R14,SAVE14B         SAVE RETURN ADDRESS
         LH    R3,DCBLRECL         GET LRECL
         LH    R5,DCBBLKSI         GET BLKSIZE
         TM    DCBRECFM,X'C0'      IS RECFM=U?
         BNM   USETLRCL            YES, GO FORCE LRECL=BLKSIZE
         LTR   R3,R3               NO, LRECL OMITTED?
         BZ    USETLRCL            YES, GO SET IT
         TM    FLAG,UNITRCD        NO, OUTPUT ON UNIT RCD?
         BO    SETUR               YES, GO SET BLKSIZE
         TM    DCBRECFM,X'10'      NO, OUTPUT BLOCKED?
         BO    PRNTLRCL            YES, GO PRINT VALUES
USETLRCL LR    R3,R5               NO, SET LRECL=BLKSIZE
         TM    DCBRECFM,X'80'      IS RECFM=V?
         BO    SETLRCL             NO, GO PRINT LRECL
         SH    R3,=Y(4)            YES, ADJUST LRECL
SETLRCL  STH   R3,DCBLRECL         RESET LRECL
         B     PRNTLRCL            GO PRINT IT
SETUR    LR    R5,R3               NO, SET BLKSIZE=LRECL
         TM    DCBRECFM,X'80'      RECFM=F?
         BO    SETBLKSI            YES, CONTINUE
         LA    R5,4(,R5)           NO, RECFM=V; ADJUST BLKSIZE
SETBLKSI STH   R5,DCBBLKSI         RESET THE BLKSIZE
PRNTLRCL MVC   IOLRL+8(5),=C'LRECL' SET MSG TO LRECL
         MVC   IOLRL+18(6),EDMSK+5 MOVE EDIT MASK INTO MSG
         CVD   R3,CVDWA            CNVRT LRECL TO DEC
         ED    IOLRL+17(7),CVDWA+5 EDIT LRECL INTO MSG
         MVI   IOLRL-1,L'IOLRL     SET MSG LENGTH
         $PRINT IOLRL              PRINT THE MSG
         MVC   IOLRL+8(7),=CL7'BLKSIZE' SET MSG TO BLKSIZE
         MVC   IOLRL+18(6),EDMSK+5 MOVE EDIT MASK TO MSG
         CVD   R5,CVDWA            CNVRT BLKSIZE TO DEC
         ED    IOLRL+17(7),CVDWA+5 EDIT BLKSIZE INTO MSG
         $PRINT IOLRL              PRINT THE MSG
         TM    DCBRECFM,X'C0'      IS RECFM=U?
         BNM   BUILDBUF            YES, GO BUILD BUFFERS
         TM    DCBRECFM,X'80'      NO, IS RECFM=F?
         BO    TSTF                YES, GO TEST VALIDITY
         SH    R5,=Y(8)            NO, RECFM=V, IS BLKSIZE OK?
         BP    TSTVLRCL            YES, CONTINUE
         MVC   LENERR+8(7),=CL7'BLKSIZE' NO, SET ERR MSG TO BLKSIZE
         $PRINT LENERR             PRINT IT
         B     L2ERRRET            GO SIGNEL ERROR AND RETURN
TSTVLRCL SH    R3,=Y(4)            IS LRECL BIG ENOUGH?
         BP    BUILDBUF            YES, GO BUILD BUFFERS
         MVC   LENERR+8(7),=CL7'LRECL' NO, SET ERR MSG TO LRECL
         $PRINT LENERR             PRINT THE MSG
         B     L2ERRRET            GO SIGNEL ERROR AND RETURN
TSTF     SR    R4,R4               ZERO R4 FOR DEVIDE
         DR    R4,R3               GET BLOCKING FACTOR
         LTR   R4,R4               WAS DIVISION EVEN?
         BZ    BUILDBUF            YES, GO BUILD BUFFERS
         $PRINT FIXLNERR           NO, ISSUE ERROR MSG
         B     L2ERRRET            GO SIGNEL ERROR AND RETURN
BUILDBUF NI    DCBBFALN,255-X'01'  TRN OFF BUFFER ALIGN BIT
         L     R5,MAXCR            GET MAX CORE FOR BUFFERS
         LH    R3,DCBBLKSI         GET BLKSIZE
         LA    R3,3(,R3)           ROUND -
         SRL   R3,2                 UP TO -
         SLL   R3,2                  FULLWORD LENGTH
         SR    R4,R4               ZERO R4 FOR DEVIDE
         DR    R4,R3               GET # OF BUFFERS TO BUILD
         CH    R5,=Y(&MAXBUFS)     TOO MANY BUFFERS?
         BNH   SETBUF#             NO, GO BUILD THEM
         LH    R5,=Y(&MAXBUFS)     YES, SET MAX # OF BUFS
SETBUF#  LA    R4,31               GET MSG LENGTH
         CH    R5,=Y(1)            HOW MANY BUFFERS CAN BE BUILT?
         BNL   BUFGOTN             AT LEAST 1; CONTINUE
         $PRINT NOBUFS             NONE, ISSUE ERROR MSG
         B     L2ERRRET            GO SIGNEL ERROR AND RETURN
BUFGOTN  BH    MORETHN1            MORE THAN 1 BUFFER CAN BE BUILT
         TM    DCBOPTCD,X'20'      ONLY 1 BUF; IS CHN SCHED ON?
         BZ    MORETHN1            NO, CONTINUE
         NI    DCBOPTCD,255-X'20'  YES, TURN IT OFF
         LA    R4,L'BUF#           ADJ MSG LEN TO SAY SO
MORETHN1 MVC   BUF#+1(3),NME       SET MSG NAME
         MVC   BUF#+20(3),EDMSK+8  MOVE EDIT MASK TO MSG
         CVD   R5,CVDWA            CNVRT # OF BUFS TO DEC
         ED    BUF#+19(4),CVDWA+6  EDIT IT INTO MSG
         STC   R4,BUF#-1           SET MSG LENGTH
         $PRINT BUF#               PRINT THE MSG
ERRBUILD STC   R5,DCBBUFNO         SET BUFNO IN DCB
         LR    R0,R5               GET # OF BUFS FOR BUILD
         SLL   R0,16               SHIFT TO 1ST 1/2 WD
         OR    R0,R3               OR IN BUFFER LENGTH
         L     R1,DCBBUFCB         PNT TO BUFFER AREA
         BUILD (1),(0)             BUILD THE BUFFERS
         LR    R15,R3              GET DATA LEN 4 RTN (ASSUMING U)
         TM    DCBRECFM,X'C0'      RECFM=U?
         BNM   LEVL2RET            YES, GO RETURN
         LH    R15,DCBLRECL        NO, GET DATA LEN FOR RECFM=F
         TM    DCBRECFM,X'80'      RECFM=F?
         BO    LEVL2RET            YES, GO RETURN
         SH    R15,=Y(4)           NO, RECFM=V; SET DATA LEN
         B     LEVL2RET            GO RETURN
         DROP  R2                  KILL DCB ADDRESSABILITY
         TITLE 'DSCOPY -- GETRECFM (2ND LEVEL SUBROUTINE) - RECORD FORM*
               AT PROCESSING'
         USING DCBDSECT,R2         DECLARE DCB BASE
GETRECFM ST    R14,SAVE14B         SAVE RETURN REGISTER
         MVC   IOLRL+1(3),NME      SET MSG NAME
         MVC   IOLRL+18(6),IOLRL+17 CLEAR RECFM CODES FROM MSG
         LA    R1,IOLRL+18         PNT TO RECFM CODES OUTPUT POINT
         MVI   0(R1),C'U'          ASSUME RECFM=U
         MVC   2(2,R3),SU          SET GATE
         TM    DCBRECFM,X'C0'      IS RECFM=U?
         BM    TESTF               NO, CONTINUE
         OI    DCBRECFM,X'C0'      YES, BUE FORCE IT
         B     TESTOTHR            GO TEST OTHER RECFM BITS
TESTF    MVI   0(R1),C'F'          ASSUME RECFM=F
         MVC   2(2,R3),SF          SET GATE
         TM    DCBRECFM,X'80'      IS RECFM=F?
         BO    TESTOTHR            YES, GO TEST OTHER BITS
         MVI   0(R1),C'V'          NO, RECFM=V
         MVC   2(2,R3),SV          SET GATE
TESTOTHR LA    R15,5               LOAD LOOP CONTROL
RECFMLP  LA    R14,TMASKS-1(R15)   PNT TO TESTING MASK
         MVC   RECFMTM+1(1),0(R14) MOVE IT TO TM INSTRUCTION
RECFMTM  TM    DCBRECFM,*-*        IS THE BIT ON?
         BZ    RECFMLPN            NO, LOOP
         LA    R14,RECFMS-1(R15)   YES, PNT TO CORRESPONDING CODE
         LA    R1,1(,R1)           INCR OUTPUT PTR
         MVC   0(,R1),0(R14)       MOVE CODE TO MSG
RECFMLPN BCT   R15,RECFMLP         LOOP TO NEXT
         LR    R15,R1              SAVE FOR LATER
         S     R1,=A(IOLRL-1)      GET MSG LENGTH
         C     R2,=A(IN)           ARE WE PROCESSING THE INPUT?
         BNE   RECFMSL             NO, GO PRINT MSG
         TM    DCBRECFM,X'C0'      YES, IS RECFM=U?
         BM    RECFMSL             NO, GO PRINT MSG
         TM    DCBOPTCD,X'20'      YES, IS CHAINED SCHEDULING STILL ON?
         BZ    RECFMSL             NO, GO PRINT MSG
         NI    DCBOPTCD,255-X'20'  YES, TURN IT OFF
         MVC   1(32,R15),BUF#+31   SAY SO
         LA    R1,32(,R1)          AJUST MSG LEN
RECFMSL  STC   R1,IOLRL-1          SET MSG LENGTH
         MVC   IOLRL+8(7),=CL7'RECFM' SET MSG TO RECFM
         $PRINT IOLRL              PRINT RECFM MSG
         B     LEVL2RET            GO RETURN
         DROP  R2                  KILL DCB ADDRESSABILITY
         TITLE 'DSCOPY -- PRNTNMES (2ND LEVEL SUBROUTINE) - PROCESS DSN*
               AME ETC'
         USING DCBDSECT,R2         DECLARE DCB BASE
PRNTNMES ST    R14,SAVE14B         SAVE RETURN ADDRESS
         MVI   PRNTM+1,0           SET NULL MASK FOR DDNAME PRTING
         LR    R1,R2               GET DCB ADDRESS FOR DDNAME PRINTING
         BAL   R14,PRNTDDNM        GO PRINT DDNAME
         L     R4,TIOTP            PNT TO DD ENTRY IN TIOT
         SR    R3,R3               POINT TO ...                    JRB
         ICM   R3,7,17(R4)         ... UCB.                        JRB
         USING UCBDSECT,R3         DECLARE UCB BASE
         MVC   DSNMSG+1(3),NME     SET MSG NAME
         MVC   DSNMSG+10(3),=C' IS MISSING' INIT MSG
         OI    DCBOPTCD,X'20'      FORCE CHAINED SCHEDULING
         L     R4,DCBDEBAD         PNT TO OPEN WORK AREA
         USING OPENWKA,R4          DECLARE WORK AREA BASE
         CLC   JFCBDSNM(9),=CL9'NULLFILE' IS DATA SET A DUMMY?
         BNE   NOTDUMMY            NO, CONTINUE
         MVC   DSNMSG+14(5),=C'DUMMY' YES, SAY SO
         MVC   DSNMSG+19(32),BUF#+31 SAY NO CHAINED SCHEDULING
         NI    DCBOPTCD,255-X'20'  PREVENT CHAINED SCHEDULING
         LA    R5,51               GET MSG LENGTH
         B     PUTDSNMG            GO PRINT MSG
NOTDUMMY TM    JFCBTSDM,X'20'      IS DATA SET OS SPOOLED?
         BZ    NOTOSPOL            NO, CONTINUE
         MVC   DSNMSG+14(10),=C'OS SPOOLED' YES, SAY SO
         LA    R5,24               GET MSG LENGTH
         B     PUTDSNMG            GO PRINT MSG
NOTOSPOL TM    UCBTBYT3,UCB3TAPE+UCB3DACC IS DS REALLY A DATA SET?
         BNZ   REALDS              YES, CONTINUE
         MVC   DSNMSG+14(11),=C'UNIT RECORD' NO, SAY SO (SORT OF)
         NI    DCBRECFM,255-X'10'  TURN OFF BLOCKING BIT
         OI    FLAG,UNITRCD        FLAG UNIT RECORD DEVICE
         LA    R5,25               GET MSG LENGTH
         B     PUTDSNMG            GO PRINT MSG
REALDS   TM    JFCBIND2,X'01'      IS DATA SET TEMPORARY?
         BZ    NOTTEMP             NO, CONTINUE
         MVC   DSNMSG+14(9),=C'TEMPORARY' YES, SAY SO
         LA    R5,DSNMSG+22        PNT TO LAST NON-BLANK IN MSG
         B     PDSMEM              GO SEE IF THERE EXISTS A PDS MEMBER
NOTTEMP  MVC   DSNMSG+10(3),=C'N =' ADJUST MSG
         MVC   DSNMSG+14(44),JFCBDSNM PUT DSN INTO MSG
         LA    R5,DSNMSG+58        FIND -
DSNBLP1  BCTR  R5,0                 END -
         CLI   0(R5),C' '            OF -
         BE    DSNBLP1                DSNAME
PDSMEM   TM    JFCBIND1,JFCBPMEM+X'02' PDS MEMBER OR GENERATION DS?
         BZ    SETDSNLN            NO, GO GET MSG LENGTH
         MVI   1(R5),C'('          YES, ADJ MSG
         MVC   2(8,R5),JFCBELNM    PUT ELEMENT NAME INTO MSG
DSNBLP2  BCTR  R5,0                FIND -
         CLI   10(R5),C' '          FIRST -
         BE    DSNBLP2               NON-BLANK
         LA    R5,11(,R5)          POINT TO IT
         MVI   0(R5),C')'          ADJ MSG
SETDSNLN LA    R6,DSNMSG-1         PNT TO START OF MSG
         SR    R5,R6               GET MSG LENGTH
PUTDSNMG STC   R5,DSNMSG-1         SET MSG LENGTH
         $PRINT DSNMSG             PRINT THE MESSAGE
         TM    JFCDSORG,X'02'      IS DATA SET A PDS?
         BZ    NOTPDS              NO, CONTINUE
         TM    JFCBIND1,JFCBPMEM   DOES JCL PNT TO 1 MEMBER?
         BO    NOTPDS              YES, CONTINUE
         $PRINT PDSERR             NO, PRINT ERROR MSG
L2ERRRET SR    R0,R0               SET ERROR CC
         B     LEVL2RET            GO RETURN
NOTPDS   LTR   R3,R3               IS THERE A UCB?
         BZ    ISDUMMY             NO, BYPASS PRINTING MSG
         MVC   CUUMSG+1(3),NME     YES, SET MSG NAME
         MVC   CUUMSG+L'CUUMSG-3(3),UCBNAME SET CUU ADR INTO MSG
         $PRINT CUUMSG             PRINT THE MSG
ISDUMMY  LH    R5,JFCBFLSQ         GET TAPE FILE SEQ NUMBER (IF ANY)
         LTR   R5,R5               IS UNIT A TAPE?
         BZ    NOTTAPE             NO, BYPASS MSG PRINTING
         MVC   FILESEQ#+1(3),NME   YES, SET MSG NAME
         CVD   R5,CVDWA            CNVRT SEQ # TO DEC
         MVC   FILESEQ#+22(6),EDMSK+5 MOVE EDIT MASK TO MSG
         ED    FILESEQ#+21(7),CVDWA+5 EDIT FILE SEQ # INTO MSG
         $PRINT FILESEQ#           PRINT THE MSG
NOTTAPE  LTR   R13,R13             SET SUCCESSFUL CC
LEVL2RET L     R14,SAVE14B         RESTORE RETURN ADDRESS
         BR    R14                 RETURN
         DROP  R2,R3,R4            KILL CONTROL BLOCK ADDRESSABILITIES
         TITLE 'DSCOPY -- PRNTDDNM (3RD LEVEL SUBROUTINE) - PRINT DDNAM*
               ES BEING COPIED (IF ANY)'
         USING DCBDSECT,R2         DECLARE DCB BASE
PRNTDDCC MVI   DDNMSG,C' '         SET ASA CARRAGE CONTROL
PRNTDDNM ST    R14,SAVE14C         SAVE THE RETURN REGISTER
         MVC   DDNMSG+1(3),NME     GENERATE -
         MVC   DDNMSG+14(2),=C': '  THE -
         MVC   DDNMSG+16(L'DCBDDNAM),DDNAME DDNAME -
         MVI   DDNMSG+16+L'DCBDDNAM,C' ' MESSAGE
PRNTM    TM    FLAG,*-*            IS DDNAME REALLY MISSING?
         BZ    PRTDDNMS            NO, GO PRINT MESSAGE
         MVC   DDNMSG+14(11),=C' IS MISSING' RESET THE MESSAGE
         CLI   RCD+1,4             IS RET CODE >= 4?
         BNL   PRTDDNMS            YES, GO PRINT MESSAGE
         MVI   RCD+1,4             NO, SET RET CODE
PRTDDNMS $PRINT DDNMSG             ISSUE THE MESSAGE
LEVL3RET L     R14,SAVE14C         RESTORE RETURN REGISTER
         BR    R14                 RETURN
         DROP  R2                  KILL DCB BASE
         TITLE 'DSCOPY -- PUTSYSP (4TH LEVEL SUBROUTINE) - MESSAGE PRIN*
               TING ROUTINE'
PUTSYSP  ST    R14,SAVE14D         SAVE RETURN REGISTER
         MVC   PRTLRECL+1(1),0(R15) SET MESSAGE LENGTH INTO LRECL
         LA    R0,1(,R15)          POINT TO MESSAGE
         PUT   SYSPRINT,(0)        ISSUE THE MESSAGE
LEVL4RET L     R14,SAVE14D         RESTORE THE RETURN ADDRESS
         BR    R14                 RETURN
         TITLE 'DSCOPY -- DATA - DCB''S'
         PRINT NOGEN               DON'T NEED DCB EXPANSIONS
IN       #DCBD DSORG=QS            DEFINE INDCB NAMES         07/96 DBC
         ORG   INDCB               ORG TO OVERLAY WITH DCB    08/05 DBC
IN       DCB   DSORG=PS,MACRF=GL,EODAD=WRAPUP,EXLST=INEX,EROPT=ACC,    *
               SYNAD=IOERR         INPUT DCB
INTIOTP  DS    A                   PTR TO CURRENT ENTRY IN ITOT
INWORK   DS    2A                  WORK AREA
IDDNAME  DS    2A                  DDNAME SAVE AREA
SINU     DC    S(INU)              INPUT RECFM=U GATE
SINF     DC    S(INF)              INPUT RECFM=F GATE
SINV     DC    S(INV)              INPUT RECFM=V GATE
INPFXLN  DS    Y                   DDNAME PREFIX LENGTH
INSFXLN  DS    Y                   DDNAME PREFIX LEN IN BITS
INNME    DC    CL3' IN'            DCB NAME
         SPACE 3
OUT      #DCBD DSORG=QS            DEFINE OUTDCB NAMES        08/05 DBC
         ORG   OUTDCB              ORG TO OVERLAY WITH DCB
OUT      DCB   DSORG=PS,MACRF=PL,EXLST=OUTEX,EROPT=ACC,SYNAD=IOERR
OUTTIOTP DS    A                   PTR TO CURRENT ENTRY IN TIOT
OUTWORK  DS    2A                  WORK AREA
ODDNAME  DS    2A                  DDNAME SAVE AREA
SOUTU    DC    S(OUTU)             OUTPUT RECFM=U GATE
SOUTF    DC    S(OUTF)             OUTPUT RECFM=F GATE
SOUTV    DC    S(OUTV)             OUTPUT RECFM=V GATE
OUTPFXLN DS    Y                   DDNAME PREFIX MACHINE LENGTH
OUTSFXLN DS    Y                   DDNAME PREFIX LENGTH IN BITS
OUTNME   DC    CL3'OUT'            DCB NAME
         SPACE 3
PRT      #DCBD DSORG=QS            DEFINE PRTDCB NAMES        08/05 DBC
         ORG   PRTDCB              ORG TO OVERLAY WITH DCB
SYSPRINT DCB   DSORG=PS,MACRF=PM,EROPT=ACC,SYNAD=IOERR,RECFM=UA,       *
               BLKSIZE=121,BUFNO=1,LRECL=121 MSG DCB
         PRINT GEN                 END OF DCB'S               07/96 DBC
         TITLE 'DSCOPY -- DATA - MISCELLANIOUS'               07/96 DBC
CVDWA    DS    D                   DOUBLE WORD WORK AREA
TIOTADR  DS    A                   PTR TO 1ST DD ENTRY IN TIOT
SAVESA   DS    18A                 DCB EXIT SAVE AREA SAVE AREA
SAVE14A  DS    A                   R14 1ST LEVEL SAVE AREA
SAVE14B  DS    A                   R14 2ND LEVEL SAVE AREA
SAVE14C  DS    A                   R14 3RD LEVEL SAVE AREA
SAVE14D  DS    A                   R14 4TH LEVEL SAVE AREA
GETMADR  DS    2A                  RETURN AREA FOR VARIABLE GETMAIN
GETMQTY  DC    A(&MINGET,X'FFFFF8') VARIABLE GETMAIN PARAMETERS
MAXCR    DS    A                   MAX CORE FOR BUFS FOR EA DCB
INEX     DC    0A(0),X'85',AL3(INEXIT) INPUT DCB EXIT ADDRESS
OUTEX    DC    0A(0),X'85',AL3(OUTEXIT) OUTPUT DCB EXIT ADDRESS
         SPACE 1
*        NOTE: THE 4TH BYTE PRECEEDING THE FOLLOWING TABLE MUST NOT BE
*        X'FF'.
DDNPTRTB DS    0A                  TABLE FOR CHANGING DDNAMES
         DC    A(IDDNAME)          INDCB DDNAME ADDRESS
         DC    A(ODDNAME)          OUTDCB DDNAME ADDRESS
         DC    3A(0)               NON-APPLICABLE ENTRIES
         DC    A(PRTDDNAM)         PRTDCB DDNAME ADDRESS
         DC    X'FF'               END OF TABLE
         SPACE 1
FLAG     DS    X                   FLAG BYTE
TRUNC    EQU   X'01'               TRUNCATION COPY FLAG
INMISS   EQU   X'02'               MISSING INPUT DDNAME FLAG
BADDDNM  EQU   X'04'               BAD DDNAME LIST
OUTMISS  EQU   X'04'               MISSING OUTPUT DDNAME FLAG
BADCPY#  EQU   X'08'               BAD 1ST COPY NUMBER
REREAD   EQU   X'08'               CONCAT EOF REREAD BIT
INEND    EQU   X'10'               INPUT DDNAMES EXHAUSTED
TOOMP    EQU   X'10'               TOO MANY PASSED PARAMETERS
OUTEND   EQU   X'20'               OUTPUT DDNAMES EXHAUSTED
UNITRCD  EQU   X'40'               UNIT RECORD DEVICE BEING OPENED
CPYSUPRS EQU   X'80'               ABEND C03 PROCESSING FLAG
         SPACE 1
FLAG2    DS    X                   FLAG BYTE
CONCAT   EQU   X'01'               POSSIBLE CONCATINATION FLAG
         SPACE 1
CPY#PK   PACK  CPY#,2(*-*,R4)      PACK NEW 1ST COPY NUMBER
HWD      DC    2Y(0)               RECFM=V LENGTH FIELD HOLDER
RCD      DC    Y(0)                RETURN CODE
LRECL    DS    Y                   OUTPUT DATA LENGTH
CPY#     DC    PL2'0'              NEXT COPY NUMBER
INCNT    DC    PL2'0'              INPUT DATA SET COUNTER
EDMSK    DC    X'2020206B2020206B202120' EDIT MASK
TMASKS   DC    X'0204200810'       RECFM=M,A,T,S,B
RECFMS   DC    C'MATSB'            RECFM CODES
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* PARTIAL COPY CONTROLS                                     * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         DS    0F                                             07/96 DBC
START#   DC    X'00000001'         START AT NTH RECORD        07/96 DBC
STOP#    DC    X'FFFFFFFF'         STOP AFTER NTH RECORD      07/96 DBC
COUNT#   DC    X'FFFFFFFF'         COPY N RECORDS             07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* PARM FIELD PARSING CONTROLS. THE TABLE MUST BE SORTED BY  * 07/96 DBC
* KEYWORD TEXT.                                             * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
PARMKEYS DS    0X                                             07/96 DBC
         DC    AL4(COUNT#),AL1(0,5),C'COUNT='                 07/96 DBC
         DC    AL4(START#),AL1(0,5),C'START='                 07/96 DBC
         DC    AL4(STOP#),AL1(0,4),C'STOP='                   07/96 DBC
         DC    AL4(FLAG),AL1(TRUNC,7),C'TRUNCATE'             07/96 DBC
         DC    AL4(0),AL1(0,0),X'FF' TABLE DELIMITER          07/96 DBC
         SPACE 1                                              07/96 DBC
PKYSINK  EQU   0,4                 @'VALUE SINK               07/96 DBC
PKYOIFLG EQU   PKYSINK+L'PKYSINK,1 FOR FLAGS, BIT TO TURN ON  07/96 DBC
PKYEXLEN EQU   PKYOIFLG+L'PKYOIFLG,1 L'KEYWORD TEXT -1        07/96 DBC
PKYWORD  EQU   PKYEXLEN+L'PKYEXLEN KEYWORD TEXT               07/96 DBC
         SPACE 3                                              07/96 DBC
************************************************************* 07/96 DBC
* LOCAL LITERALS                                            * 07/96 DBC
************************************************************* 07/96 DBC
         SPACE 1                                              07/96 DBC
         LTORG ,                   LITTERALS HERE
         TITLE 'DSCOPY -- DATA - MESSAGES'
         DC    AL1(L'SKIP1)                                   07/96 DBC
SKIP1    DC    C'  '                                          07/96 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(L'SKIP3)                                   07/96 DBC
SKIP3    DC    C'- '                                          07/96 DBC
         SPACE 3                                              08/05 DBC
         DS    AL1
IOLRL    DC    C' ***PUT ******* = ******'
         DS    CL32
         SPACE 3                                              08/05 DBC
         DC    AL1(L'DDNMSG)
DDNMSG   DC    CL25'****PUT DDNAME'
         SPACE 3                                              08/05 DBC
         DS    AL1
DSNMSG   DC    CL68' ***PUT DS'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'CUUMSG)
CUUMSG   DC    C' ***PUT FIRST DEVICE ADDRESS IS ***'
         SPACE 3                                              08/05 DBC
         DS    AL1
BUF#     DC    C' ***PUT IS ASSIGNED *** BUFFERS - CHAINED SCHEDULING S*
               UPPRESSED'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'FILESEQ#)
FILESEQ# DC    C' ***PUT TAPE FILE # = **,***'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'COPYTIT)
COPYTIT  DC    C'-COPY # ***'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'CS)
CS       DC    C'0COPY SUPPRESSED'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'CT)
CT       DC    C' COPY TERMINATED'
         SPACE 3                                              08/05 DBC
         DC    AL1(CRIGHT_L)                                  08/05 DBC
CRIGHT   DC    C'1DSCOPY - Copyright (c) David B. Cole, '     08/05 DBC
         DC    C'1972-2005. All rights reserved.'             08/05 DBC
CRIGHT_L EQU   *-CRIGHT                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(LEGAL1_L)                                  08/05 DBC
LEGAL1   DC    C'0This program is distributed '               08/05 DBC
         DC    C'without warranty of any kind, '              08/05 DBC
         DC    C'including'                                   08/05 DBC
LEGAL1_L EQU   *-LEGAL1                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(LEGAL2_L)                                  08/05 DBC
LEGAL2   DC    C' (without limitation) '                      08/05 DBC
         DC    C'warranties of merchantability '              08/05 DBC
         DC    C'and of fitness for a'                        08/05 DBC
LEGAL2_L EQU   *-LEGAL2                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(LEGAL3_L)                                  08/05 DBC
LEGAL3   DC    C' particular purpose. It is up '              08/05 DBC
         DC    C'to the user to make his own '                08/05 DBC
         DC    C'determination'                               08/05 DBC
LEGAL3_L EQU   *-LEGAL3                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(LEGAL4_L)                                  08/05 DBC
LEGAL4   DC    C' of the '                                    08/05 DBC
         DC    C'usefulness of this program in '              08/05 DBC
         DC    C'his own system. '                            08/05 DBC
LEGAL4_L EQU   *-LEGAL4                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(LEGAL5_L)                                  08/05 DBC
LEGAL5   DC    C'0For additional restrictions, see the '      08/05 DBC
         DC    C'README file located in this'                 08/05 DBC
LEGAL5_L EQU   *-LEGAL5                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(LEGAL6_L)                                  08/05 DBC
LEGAL6   DC    C' program''s '                                08/05 DBC
         DC    C'distribution library '                       08/05 DBC
         DC    C'(originally named DBCOLE.DSCOPY.EXPORT,'     08/05 DBC
LEGAL6_L EQU   *-LEGAL6                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(LEGAL7_L)                                  08/05 DBC
LEGAL7   DC    C' and availble for download from '            08/05 DBC
         DC    C'www.colesoft.com).'                          08/05 DBC
LEGAL7_L EQU   *-LEGAL7                                       08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(L'DSCP)
DSCP     DC    C'-DATA SET COPYING PROGRAM'                   08/05 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(L'PFN)                                     07/96 DBC
PFN      DC    C' PARM FIELD: NONE'                           07/96 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(PFILLEN)                                   07/96 DBC
PFIL     DC    C'0INVALID PARM FIELD LENGTH '                 07/96 DBC
         DC    C'(NEGATIVE OR GREATER THAN 108)'              07/96 DBC
         #TEST SIZE=(L'PFTEXT,EQ,108) TRUTH CHECK             07/96 DBC
PFILLEN  EQU   *-PFIL              L'MSG                      07/96 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(*-*)                                       07/96 DBC
PF       DC    C'0PARM FIELD: '                               07/96 DBC
PFTEXT   DC    CL(121-L'PF)' '                                07/96 DBC
PFLEN    EQU   *-PF                MAX L'MSG                  07/96 DBC
         DC    C' '                TRAILER                    07/96 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(L'EOP)
EOP      DC    C'-END OF PROGRAM'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'LENERR)
LENERR   DC    C' ERROR: ******* IS TOO SMALL FOR RECFM=V'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'FIXLNERR)
FIXLNERR DC    C' ERROR: BLKSIZE MUST BE A MULTIPLE OF LRECL FOR RECFM=*
               F'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'BLKSIERR)
BLKSIERR DC    C' ERROR: BLKSIZE NOT GIVEN FOR INPUT DATA SET'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'PDSERR)
PDSERR   DC    C' ERROR: DATA SET IS PARTITIONED'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'NOBUFS)
NOBUFS   DC    C' ERROR: INSUFFICENT CORE FOR BUFFERS'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'IC)
IC       DC    C' GETMAIN OF &MINGET BYTES FAILED'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'IN#)
IN#      DC    C'0 INPUT DATA SET # ***'
         SPACE 3                                              08/05 DBC
         DC    AL1(IC#LEN)                                    07/96 DBC
IC#      DC    C' INVALID STARTING COPY NUMBER GIVEN - '      07/96 DBC
         DC    C'"1" WILL BE USED'                            07/96 DBC
IC#LEN   EQU   *-IC#                                          07/96 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(L'IDL)
IDL      DC    C' INVALID DDNAME LIST'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'IPF)
IPF      DC    C' INVALID PARM FIELD'
         SPACE 3                                              08/05 DBC
         DS    AL1
RLC      DC    CL59' OUTPUT DATA LENGTH * INPUT - WILL'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'PT)
PT       DC    C'-PROGRAM TERMINATED'
         SPACE 3                                              08/05 DBC
         DC    AL1(RIOLEN)                                    07/96 DBC
RIO      DC    C'*'                CCC: 0/BLANK               07/96 DBC
RIOWHICH DC    C'*****',C' '       FIRST/LAST/TOTAL           07/96 DBC
RIOINOUT DC    C'***',C'PUT RECORD' IN/OUT                    07/96 DBC
RIOPLURL DC    C'*',C' '           S/BLANK                    07/96 DBC
RIOVERB  DC    C'*******',C' = '   COPIED/WRITTEN             07/96 DBC
RIOCOUNT DC    C' **,***,***,***'                             07/96 DBC
RIOLEN   EQU   *-RIO                                          07/96 DBC
         SPACE 3                                              08/05 DBC
         DC    AL1(L'RCDMSG)
RCDMSG   DC    C' RETURN CODE = ***'
         SPACE 3                                              08/05 DBC
         DC    AL1(L'TMEIPL)
TMEIPL   DC    C' TOO MANY ARGUEMENTS IN PARAMETER LIST - EXTRA ARGUEME*
               NTS IGNORED'
         TITLE 'DSCOPY -- DSECTS'
         PRINT  NOGEN                                         07/96 DBC
SYMDEL   DSECT ,                                              07/96 DBC
         SPACE 3                                              07/96 DBC
DCBDSECT DSECT
         #DCBD DSORG=QS                                       08/05 DBC
TIOTP    DS    A                   CURRENT DD ENTRY PTR
WORK     DS    2A                  WORK AREA
DDNAME   DS    2A                  DDNAME SAVE AREA
SU       DS    S                   RECFM=U GATE SETTING
SF       DS    S                   RECFM=F GATE SETTING
SV       DS    S                   RECFM=V GATE SETTING
PFXLN    DS    Y                   DDNMAE PREFIX MACHINE LEN (BYTES)
SFXLN    DS    Y                   DDNAME PREFIX LEN (BITS)
NME      DS    CL3                 DCB NAME
         SPACE 3                                              07/96 DBC
CVTDSECT DSECT
         CVT   DSECT=YES,LIST=YES                                  JRB
         SPACE 3                                              07/96 DBC
UCBDSECT DSECT
         IEFUCBOB ,
         SPACE 3                                              07/96 DBC
OPENWKA  DSECT
         ORG   OPENWKA+100
         IEFJFCBN ,
         SPACE 3                                              07/96 DBC
         END   ,                                              07/96 DBC
./ ADD NAME=README   0105-05218-05218-1530-00375-00080-00375-DBCOLEA
The DSCOPY program is copyrighted (c) 1972-2005 by David B. Cole. All
rights reserved.

You are reading DBCOLE.DSCOPY.EXPORT(README).



DESCRIPTION

DSCOPY is a general purpose program which copies data sets
sequentially.  It allows the user to copy sequential files, BDAM files
(i.e.  REGIONAL(1) files in PL/I or direct access files in FORTRAN),
and single members of partitioned data sets from any valid input device
(e.g. card reader, disk drive, or tape drive) to any valid output
device (e.g.  printer, card punch, disk drive, or tape drive). The
advantage of this utility over others having the same function is that
DSCOPY is considerably more efficient and faster (more that twice as
fast as the IBM utility IEBGENER, for example). It takes full advantage
of OS data management facilities in order to optimize as much as
possible the data transfer rate.

DSCOPY has the following features:

1.) All information needed is specified through JCL or through the PARM
    field. No control dataset (SYSIN, for example) is needed.

2.) DSCOPY can perform any number of seperate copies in one jobstep
    (subject, of course, to OS limits on the number of DD cards
    permitted within a job or step).

3.) Input datasets may be sequential, direct, or individual members of
    partitioned data sets, or a concatenation of any combination of the
    above with any combination of DCB attributes (RECFM, LRECL, and
    BLKSIZE).

4.) Any record format is allowed (fixed, variable, undefined) for
    input, and it may be changed to any other record format for output.
    In addition, logical record lengths and/or block sizes may also be
    changed. All such changes are automaticly accomodated for (see
    below).

Here is a simple example of the invocation of DSCOPY:
   //...      JOB CARD       ...
   //*
   //A       EXEC PGM=DSCOPY
   //SYSPRINT DD  SYSOUT=A
   //IN01     DD  DSN=       ... etc.
   //OUT01    DD  DSN=       ... etc.
   //IN02     DD  DSN=       ... etc.
   //OUT02    DD  DSN=       ... etc.
   //         .
   //         .
   //         .
   //         etc.



LEGAL INFORMATION:

This program is copyrighted (c) 1972-2005 by David B. Cole. All rights
reserved.

This program is distributed freely and may be reproduced and
redistributed without restriction other than:
  - This copyright and usage/warranty/liability restriction statement
    ("Legal Statement") may not be modified or removed.
  - A similar Legal Statement located in this program's source code
    also may not be removed.

This program is distributed without warranty of any kind, including
(without limitation) warranties of merchantability and of fitness for a
particular purpose. It is up to the user to make his own determination
of the usefulness of this program in his own system.

The user agrees not to hold either David B. Cole or Cole Software, LLC
or any person affiliated with Cole Software, LLC (collectively "COLE")
liable for any injury or damage whatsoever.

Further, the user agrees to indemnify COLE against third parties for
any action arising from the user's use, misuse, modification, and/or
redistribution of this program.

This program may be modified freely so long as all modifications are
clearly marked both internally and externally to distinguish them from
the distributed code and functionality.

As a courtesy, please notify David Cole if you discover any bugs or if
you need or have made any code changes. (COLE, of course, does not
guarantee that any future changes or corrections wither will or will
not be made.)

Contact information as of AUG05 is:

    Name:                David B. Cole
    Country:             USA
    Telephone:           540-456-8536
    FAX:                 540-456-6658
    E-mail:              dbcole@colesoft.com
    Website:             www.colesoft.com

    Snail Mail:          Cole Software
                         736 Fox Hollow Road
                         Afton, VA 22920
                         USA



PACKAGING:

The DSCOPY.ZIP file contains the following files:

  - DSCOPY.ALC is the assembler source code for the program.

  - JCL.TXT is sample JCL for assembling and link editing the program.

All of the files are encoded in ASCII. When uploading them to your
mainframe, ASCII-to-EBCDIC translation should be enabled.



INSTALLATION:

Assembling DSCOPY will require a macro library available from Cole
Software's web site (www.colesoft.com). The file there is named
MACROS.ZIP. You will have to obtain and install these macros before you
will be able to complete the installation of DSCOPY.

To install DSCOPY, do the following:

  - Obtain and install Cole Software's macro library (MACROS.ZIP).

  - Use WINZIP or PKUNZIP (or whatever) to decompress and extract the
    DSCOPY.ALC, and JCL.TXT files from DSCOPY.ZIP.

  - Upload the two files to your mainframe. Make sure that
    ASCII-to-EBCDIC translation is turned on.

  - Upload the files to a library whose DCB attributes are RECFM=FB,
    LRECL=80, and BLKSIZE=n*80.

  - Check out the JCL member for sample JCL to assemble and linkedit
    the DSCOPY program.

  - Assemble the DSCOPY member using both system macros and private
    macros available from Cole Software.

  - Linkedit the DSCOPY program into a suitable load library.

  - Try it out.



USAGE:

 1.) DDNAMEs for input must be of the form INx where x is any
     alphameric character string of from 0 to 5 characters in length.

 2.) DDNAMEs for output must be of the form OUTx where x is as in (1)
     above.

 3.) Copy operations are performed from each //INx DD card to a
     corresponding //OUTx DD card (e.g. from //INA to //OUTA, from
     //IN9999A to OYT9999A, from //IN to //OUT, from //INTRASH to
     //OUTTRASH, etc.). Clearly, there must exist a one to one
     correspondence between the input DD cards and the output DD cards.

 4.) Copy operations are performed in the order of the ascending EBCDIC
     coalating sequence of x. In the following example, the copies are
     performed in the order shown (*regardless* of the sequence in
     which the DD cards are actually presented):
         1st //IN      to //OUT
         2nd //INA     to //OUTA
         3rd //INTRASH to //OUTTRASH
         4th //IN01    to //OUT01
         5th //IN02    to //OUT02
         6th //IN1     to //OUT1
         7th //IN10    to //OUT10
         8th //IN2     to //OUT2
         9th //IN9999A to //OUT9999A
     Watch out for pitfalls here! Note in particular, that a copy from
     //IN10 to //OUT10 will occur *before* a copy from //IN2 to //OUT2.
     (This may matter, for example, if you're writing to tape.)

 5.) Input block sizes must be available to DSCOPY from either DSCBs,
     tape labels, or JCL. If other necessary DCB parameters are
     missing, then defaults are taken (see below).

 6.) Keyed direct access files (e.g. PL/I REGIONAL(2) and regional(3)
     files) may be copied, but the keys themselves won't be copied. The
     resulting output file will be sequential unless DSORG=DA is coded
     in the JCL.

 7.) A SYSPRINT DD card (e.g. //SYSPRINT DD SYSOUT=*) must be included
     in the JCL. This DD card specifies a message data set for DSCOPY.
     It's DCB is DSORG=PS, RECFM=UA, LRECL=121, BLKSIZE=121). Any
     attempt to override this is ignored.

 8.) If any necessary DCB atributes are missing, then the following
     conversions are performed:

     a.) If the input's DSORG is missing, then DSORG=PS is used.

     b.) If the output's DSORG is missing, then DSORG=PS is used.

     c.) If the input's RECFM is missing, then RECFM=U is used.

     d.) If the output's RECFM is missing, then the input's RECFM is
         used.

     e.) If the input's BLKSIZE is missing, then an error condition is
         reported.

     f.) If the output's BLKSIZE is missing, then the input's BLKSIZE
         is used. Exceptions:

           - If the input's RECFM=V while the output's RECFM<>V then
             the input's BLKSIZE-4 is used.

           - If the input's RECFM<>V while the output's RECFM=V, then
             the input's BLKSIZE+4 is used.

     g.) If the input's LRECL is missing, then the input's BLKSIZE is
         used. Exception:

           - If the input's RECFM=V, then the input's BLKSIZE-4 is
             used.

     h.) If the output's LRECL is missing, then the output's BLKSIZE is
         used. Exception:

           - If the output's RECFM=V, then the output's BLKSIZE - 4 is
             used.

     i.) In the case of concatenated input, any settings that are made
         for the output data set that are based on the characteristics
         of the input data set, are based on the chatacteristics of the
         *first* DD card in the input concatenation.

     j.) The above listed conversions are (if required) applied in the
         same order in which they are listed. For example, conversion
         (f) will be applied before conversion (h).

 9.) If the LRECL for the output data set is to be different from the
     LRECL for the input data set, then there are three cases:

     A.) Output's LRECL > input's LRECL:

           - In this case, if the output's RECFM=F, then the unused
             portion of each output record is filled with blanks (I.e.
             the record is right-padded with blanks).

     b.) Output's LRECL < input's LRECL *but* the entire input record
         is still desired in the output data set:

           - In this case, the input record is spanned onto as many
             output records as is required. Note that this is the
             default action.

    c.) Output's LRECL < input's LRECL and only that portion of the
        input record that will fit on one output record is desired:

          - In this case each input record that is too long is
            truncated before it is written to the output data set. In
            order to use this truncation facility, the user must code
            TRUNCATE in the EXEC statement's PARM= field. Notes:

              - If TRUNCATE is coded, then truncation will occur for
                all copy operations in the jobstep.

              - If truncate is not coded, then spanning will occur for
                all copy operations.

              - WARNING! If spanning occurs, and the output file's
                RECFM is V or VS, the spanning will *not* be compatible
                with RECFM=VS!

10.) DSCOPY generates a completion code with the following values:

       0  - Execution completed without errors

       4  - One of the following "concerns" occurred:

              a.) When DSCOPY was called as a subroutine, too many
                  arguements were passed (see below).

              b.) When DSCOPY was called as a subroutine, the third
                  arguement was invalid (see below).

              c.) For a //INx or a //OUTx DDNAME, a corresponding
                  //OUTx or //INx DDNAME was not found.

       8  - One or more copy operations was either suppressed or
            terminated for some reason.

       12 - The program was terminated before any copies were
            attempted.

11.) PARM FIELD PROCESSING: There are several controls that DSCOPY
     accepts via the parm field. The general syntax is:

       - Their form is either "keyword" or "keyword=value".

       - They may be given in any order.

       - They must be separated from each other by blanks or commas.

       - Keyword names must be given in full; abbreviations are not
         checked for.

       - Also, redundancies are not checked for; each instance of a
         particular keyword overrides and nullifies all prior
         instances.

       - These controls apply to *all* copies performed by DSCOPY.

     The following controls are supported:

         TRUNCATE
         When copying long records into output files with short LRECLs,
         this cause DSCOPY to truncate the record. (Omit this keyword
         if you want longs records to be spanned into the output file.)

         START=number
         This causes copying to start with the given input record
         number. Number-1 records are skipped. The default is START=1.

         STOP=number
         This causes copying to stop after the given input record
         number is reached and copied. (The first input record,
         *regardless* of whether or not it is actually copied, is
         record number 1.)  The default is to copy until input EOF is
         reached.

         COUNT=number
         This causes copying to stop after the given number of input
         records have been copied. The default is to copy until input
         EOF is reached.

         IMPORTANT! When COUNT=number is given, the given or implied
         START=number control is incrimented by the given COUNT= value
         for each successive copy. This makes it easier to segment
         large files into smaller ones via suitable multiple copy
         requests.

     NOTES:

       - If COUNT= and STOP= conflict, then copying will stop at
         whichever event occurs first.

       - If COUNT=0 or if STOP= is less than START=, then no records
         are copied.

       - All numbers are treated as being unsigned 32-bit. They may
         range from 0 to 4g.



TECHNICAL INFORMATION:

1.) DSCOPY uses QSAM for all I/O.

2.) Chained scheduling (OPTCD=C) is used wherever possible. It is not
    possible for input data sets with RECFM=U. It is also not possible
    when the BLKSIZE is sufficiently large and the region is
    sufficently small that only one buffer can be generated.

3.) DSCOPY is serially reusable.



DYNAMIC INVOCATION:

DSCOPY can be invoked as a subroutine by other programs. For details,
see commentary within DSCOPY's sopurce code.

./ ADD NAME=XMITMSG  0100-05218-05218-1644-00048-00048-00000-DBCOLEA
The DSCOPY program is copyrighted (c) 1972-2005 by David B. Cole. All
rights reserved.

This program is distributed freely and may be reproduced and
redistributed without restriction other than:
  - This copyright and usage/warranty/liability restriction statement
    ("Legal Statement") may not be modified or removed.
  - A similar Legal Statement located in this program's source code
    also may not be removed.

This program is distributed without warranty of any kind, including
(without limitation) warranties of merchantability and of fitness for a
particular purpose. It is up to the user to make his own determination
of the usefulness of this program in his own system.

The user agrees not to hold either David B. Cole or Cole Software, LLC
or any person affiliated with Cole Software, LLC (collectively "COLE")
liable for any injury or damage whatsoever.

Further, the user agrees to indemnify COLE against third parties for
any action arising from the user's use, misuse, modification, and/or
redistribution of this program.

This program may be modified freely so long as all modifications are
clearly marked both internally and externally to distinguish them from
the distributed code and functionality.

As a courtesy, please notify David Cole if you discover any bugs or if
you need or have made any code changes. (COLE, of course, does not
guarantee that any future changes or corrections wither will or will
not be made.)

Contact information as of AUG05 is:

    Name:                David B. Cole
    Country:             USA
    Telephone:           540-456-8536
    FAX:                 540-456-6658
    E-mail:              dbcole@colesoft.com
    Website:             www.colesoft.com

    Snail Mail:          Cole Software
                         736 Fox Hollow Road
                         Afton, VA 22920
                         USA

For additional information, read the README file.

