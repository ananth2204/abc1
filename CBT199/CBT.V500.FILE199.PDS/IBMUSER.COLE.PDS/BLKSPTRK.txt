./ ADD NAME=ASMJCL   0101-99126-99126-0841-00042-00042-00000-DBCOLE6
//ASMBPT   JOB (CSW,UPS),'540-456-8536',CLASS=A,MSGCLASS=D,
//             MSGLEVEL=(1,1),NOTIFY=R9999,TIME=1439
//*
//*
//***********************************************************
//*                                                         *
//*      SAMPLE JCL TO ASSEMBLE AND LINKEDIT THE BLKSPTRK   *
//*      PROGRAM.                                           *
//*                                                         *
//***********************************************************
//*
//ASM     EXEC PGM=ASMA90,REGION=0M,
// PARM='TERM,TEST,OBJECT,NODECK,LINECOUNT(109),RENT' <====LINECOUNT===
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//*
//***********************************************************
//*                                                         *
//* THE FOLLOWING MACLIB IS AVAILABLE FROM WWW.COLESOFT.COM *
//*                                                         *
//         DD  DSN=DBCOLE.MACLIB,DISP=SHR <======================DSN===
//*                                                         *
//***********************************************************
//*
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=DISK,SPACE=(CYL,(15,5)),
//             DISP=(,PASS)
//SYSTERM  DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&OBJSET,UNIT=DISK,SPACE=(CYL,(1,1),RLSE),
//             DISP=(MOD,PASS)
//SYSIN    DD  DSN=DBCOLE.EXPORT.BLKSPTRK(BLKSPTRK),DISP=SHR <===DSN===
//*
//LKED    EXEC PGM=IEWL,REGION=1024K,
//             PARM='RENT,TEST,XREF,LET,LIST,NCAL',
//             COND=(0,LT)
//SYSLMOD  DD  DSN=DBCOLE.LOAD,DISP=SHR <========================DSN===
//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)
//SKIPTHIS DD  *
         ALIAS BPT
         NAME  BLKSPTRK(R)
./ ADD NAME=BLKSPTRK 0100-99126-99126-0831-01190-01190-00000-DBCOLE6
BPT      TITLE 'BLKSPTRK -- PHYSICAL BLOCKS PER DASD TRACK CALCULATER'
************************************************************* 11/84 DBC
*                                                           * 11/84 DBC
* MODULE NAME = BLKSPTRK.                                   * 11/84 DBC
*                                                           * 11/84 DBC
* DESCRIPTIVE NAME = PHYSICAL BLOCKS PER DASD TRACK         * 11/84 DBC
*                    CALCULATOR.                            * 11/84 DBC
*                                                           * 11/84 DBC
* STATUS = RELEASE 9707.                                    * 07/97 DBC
*                                                           * 11/84 DBC
* FUNCTION = A TSO COMMAND THAT DISPLAYS TRACK CAPACITIES   * 11/84 DBC
*            FOR ANY SET OF DASD DEVICES, FOR ANY GIVEN     * 11/84 DBC
*            COMBINATION OF KEY LENGTHS, BLOCK SIZES,       * 11/84 DBC
*            AND/OR BLOCK COUNTS.                           * 11/84 DBC
*                                                           * 11/84 DBC
* PROCESSOR = OS/VS ASSEMBLER.                              * 11/84 DBC
*                                                           * 11/84 DBC
* TYPE = TSO COMMAND PROCESSOR.                             * 11/84 DBC
*                                                           * 11/84 DBC
* ATTRIBUTES = REENTRANT, REFRESHABLE, REUSABLE.            * 11/84 DBC
*                                                           * 11/84 DBC
* AUTHOR = DAVID B. COLE.                                   * 11/84 DBC
*                                                           * 11/84 DBC
************************************************************* 11/84 DBC
*                                                           * 07/97 DBC
* This program is copyrighted (c) 1997 by David B. Cole.    * 07/97 DBC
*                                                           * 07/97 DBC
* This program is distributed freely and may be reproduced  * 07/97 DBC
* and redistributed without restriction other than:         * 07/97 DBC
*   - This copyright and usage/warranty/liability           * 07/97 DBC
*     restriction statement ("Legal Statement") may not be  * 07/97 DBC
*     modified or removed.                                  * 07/97 DBC
*   - A similar Legal Statement located in this program's   * 07/97 DBC
*     Online Help file may not be removed.                  * 07/97 DBC
*   - This program's Online Help File must be installed in  * 07/97 DBC
*     a suitable "help library" (such as SYS1.HELP) so that * 07/97 DBC
*     users may see both the Legal Statement as well as     * 07/97 DBC
*     usage instruction.                                    * 07/97 DBC
*                                                           * 07/97 DBC
* This program is distributed without warranty of any kind, * 07/97 DBC
* including (without limitation) warranties of              * 07/97 DBC
* merchantability and of fitness for a particular purpose.  * 07/97 DBC
* It is up to the user to make his own determination of the * 07/97 DBC
* usefulness of this program in his own system.             * 07/97 DBC
*                                                           * 07/97 DBC
* The user agrees not to hold me ( David B. Cole) liable    * 07/97 DBC
* for any damage whatsoever, and the user agrees to         * 07/97 DBC
* indemnify me against third parties for any action arising * 07/97 DBC
* from the user's use, modification, and/or redistribution  * 07/97 DBC
* of this program.                                          * 07/97 DBC
*                                                           * 07/97 DBC
* This program may be modified freely so long as all        * 07/97 DBC
* modifications are clearly marked both internally and      * 07/97 DBC
* externally to distinguish them from the distributed code  * 07/97 DBC
* and functionallity.                                       * 07/97 DBC
*                                                           * 07/97 DBC
* As a courtesy, please notify me if you discover any bugs  * 07/97 DBC
* or if you need or have made any code changes. (I of       * 07/97 DBC
* of course do not guarantee either that I will or that I   * 07/97 DBC
* will not make any future changes or corrections.)         * 07/97 DBC
*                                                           * 07/97 DBC
* My contact information as of JUL97 is:                    * 07/97 DBC
*                                                           * 07/97 DBC
*     Name:                David B. Cole                    * 07/97 DBC
*     Country:             USA                              * 07/97 DBC
*     Telephone:           540-456-8536                     * 07/97 DBC
*     FAX:                 540-456-6658                     * 07/97 DBC
*     E-mail:              davidbcole@aol.com               * 07/97 DBC
*     Website:             www.colesoft.com                 * 07/97 DBC
*                                                           * 07/97 DBC
*     Snail Mail:          Cole Software                    * 07/97 DBC
*                          736 Fox Hollow Road              * 07/97 DBC
*                          Afton, VA 22920                  * 07/97 DBC
*                          USA                              * 07/97 DBC
*                                                           * 07/97 DBC
************************************************************* 07/97 DBC
         EJECT ,                                              07/97 DBC
************************************************************* 11/84 DBC
*                                                           * 11/84 DBC
* ENTRY POINT = BLKSPTRK.                                   * 11/84 DBC
*                                                           * 11/84 DBC
* ALIAS NAME = BPT.                                         * 11/84 DBC
*                                                           * 11/84 DBC
* COMMAND FORMAT = BLKSPTRK (<DEVTYPE> ...)                 * 11/84 DBC
*                  KEYLEN(<KEY_LENGTH> ...)                 * 11/84 DBC
*                  BLKSIZE(<BLOCK_SIZE>|#<BLOCK_COUNT>|0 ...) 11/84 DBC
*                                                           * 11/84 DBC
* ANY NUMBER OF DEVICE TYPES, KEY LENGTHS AND BLOCK SIZES   * 11/84 DBC
* MAY BE GIVEN. A MATRIX IS DISPLAYED SHOWING TRACK         * 11/84 DBC
* CAPACITIES FOR ALL COMBINATIONS OF THE GIVEN PARAMETERS.  * 11/84 DBC
*                                                           * 11/84 DBC
* THE KEYLEN PARAMETER CAN BE OMITTED IN WHICH CASE THE     * 11/84 DBC
* TRACK CAPACITIES WILL BE CALCULATED FOR BLOCKS WITHOUT    * 11/84 DBC
* KEYS. EQUIVALENTLY, KEYLEN(0) MAY BE GIVEN.               * 11/84 DBC
*                                                           * 11/84 DBC
* THE BLKSIZE PARAMETER ALSO CAN BE OMITTED IN WHICH CASE   * 11/84 DBC
* THE SIZE OF THE LARGEST BLOCK (CONSIDERING THE GIVEN OR   * 11/84 DBC
* OMITTED KEY LENGTH(S)) THAT CAN BE CONTAINED ON A TRACK   * 11/84 DBC
* IS DISPLAYED FOR EACH DEVICE TYPE REQUESTED.              * 11/84 DBC
* EQUIVALENTLY, BLKSIZE(0) MAY BE GIVEN.                    * 11/84 DBC
*                                                           * 11/84 DBC
* IF A BLKSIZE VALUE IS GIVEN AS #N (E.G., #6), THEN IT IS  * 11/84 DBC
* INTERPRETED AS A BLOCK COUNT INSTEAD OF A BLOCK SIZE. IN  * 11/84 DBC
* THIS CASE THE BLOCK SIZE DISPLAYED WILL BE THE LARGEST    * 11/84 DBC
* FOR WHICH N BLOCKS CAN FIT ON A TRACK FOR EACH DEVICE     * 11/84 DBC
* TYPE REQUESTED (TAKING INTO CONSIDERATION KEY LENGTH      * 11/84 DBC
* VALUES, IF ANY).                                          * 11/84 DBC
*                                                           * 11/84 DBC
************************************************************* 11/84 DBC
*                                                           * 07/97 DBC
*  Last Change Date - 07/10/97                              * 07/97 DBC
*                                                           * 07/97 DBC
*  Reorganized the device data tables and removed unused    * 07/97 DBC
*  fields.                                                  * 07/97 DBC
*                                                           * 07/97 DBC
*  Added support for 3390, 3995, and 9345 devices.          * 07/97 DBC
*                                                           * 07/97 DBC
*  Corrected the residue calculations for all devices.      * 07/97 DBC
*                                                           * 07/97 DBC
*  Corrected block count calculations for 2311, 2314, and   * 07/97 DBC
*  2321 devices (devices that use tolerance factors).       * 07/97 DBC
*                                                           * 07/97 DBC
************************************************************* 07/97 DBC
         EJECT ,
BLKSPTRK START ,
BPT      EQU   BLKSPTRK            ALIAS NAME
         SPACE 3
         #REGS R                   STANDARD REGISTER EQUATES
         EJECT
************************************************************* 07/97 DBC
* Track calculation data for all IBM dasd devices.          * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
CONSTANT DSECT ,                   DEVICE DESCRIPTIVE DATA
TRKCAP   DS    HL2                 TRACK CAPACITY.            07/97 DBC
FLAG     DS    B                   CONTROL FLAGS              07/97 DBC
DVC2BOV  EQU   X'08'               OVERHEAD IS SINGLE HALFWORD
DVCCELLS EQU   X'10'               DEVICE IS CELLULAR         11/84 DBC
DVCFTOL  EQU   X'01'               DEVICE USES TOLERENCE FACTOR
FORMULA2 EQU   X'02'               CALCULATE TRACK CAPACITIES 07/97 DBC
*                                  USING "FORMULA 2".         07/97 DBC
         SPACE 1                                              07/97 DBC
FACTORS  DS    0X                  MISC CALCULATION FACTORS   07/97 DBC
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* The following fields contain overhead data and factors    * 07/97 DBC
* for noncellular devices.                                  * 07/97 DBC
************************************************************* 07/97 DBC
         ORG   FACTORS                                        07/97 DBC
ROVRHD   DS    XL3                 RECORD OVERHEAD.           07/97 DBC
TOLER    DS    HL2                 TOLERANCE FACTOR.          07/97 DBC
         DS    X                   RESERVED                   07/97 DBC
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* The following fields contain overhead data and factors    * 07/97 DBC
* for early cellular devices (3375 and 3380).               * 07/97 DBC
************************************************************* 07/97 DBC
         ORG   FACTORS                                        07/97 DBC
DCELLSIZ DS    X                   DEVICE'S CELL SIZE         07/97 DBC
D3380CO  DS    HL2                 COUNT AREA OVERHEAD        07/97 DBC
D3380KDO DS    HL2                 KEY OR DATA AREA OVERHEAD  07/97 DBC
         DS    X                   RESERVED                   07/97 DBC
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* The following fields contain overhead data and factors    * 07/97 DBC
* for later cellular devices (3390 and later). The          * 07/97 DBC
* calculation formula is based on information found in "IBM * 07/97 DBC
* 3990 Storage Control Reference" (GA32-0099-05). The       * 07/97 DBC
* formula is:                                               * 07/97 DBC
*   ((DL+F6+(F5*2-1)/(F5*2)*F4+F6+DL+(F1-1))/F1+F2)*F1      * 07/97 DBC
*  +(((KL+F6+(F5*2-1)/(F5*2)*F4+F6+DL+(F1-1))/F1+F3)*F1)    * 07/97 DBC
*   *(KL<>0)                                                * 07/97 DBC
* where:                                                    * 07/97 DBC
*   - DL = l'data                                           * 07/97 DBC
*   - KL = l'key                                            * 07/97 DBC
*   - F1, ..., F6 are factors given by the "Read Device     * 07/97 DBC
*     Characteristics" CCW and are as documented in         * 07/97 DBC
*     GA32-0099.                                            * 07/97 DBC
*   - All divisions truncate the remainder.                 * 07/97 DBC
* Basically, this formula means:                            * 07/97 DBC
*   - The minimum allocation unit is a "cell" whose size is * 07/97 DBC
*     F1 bytes.                                             * 07/97 DBC
*   - The count area and its leading gap requires F2-F3     * 07/97 DBC
*     cells.                                                * 07/97 DBC
*   - The gaps in front of key areas (if any) and data      * 07/97 DBC
*     areas each require F3 cells.                          * 07/97 DBC
*   - If no key is given, then no overhead is taken for it. * 07/97 DBC
*   - Data within key areas and data areas have an overhead * 07/97 DBC
*     of:                                                   * 07/97 DBC
*       - F6 bytes per area,                                * 07/97 DBC
*       - Plus F4 bytes for every F5*2 bytes of data.       * 07/97 DBC
*     Presumedly, this overhead is ECC overhead of some     * 07/97 DBC
*     sort.                                                 * 07/97 DBC
************************************************************* 07/97 DBC
         ORG   FACTORS                                        07/97 DBC
         DS    X                   DCELLSIZ ("F1" FACTOR)     07/97 DBC
D3390F2  DS    X                   CNT+DATA OVERHEAD (CELLS)  07/97 DBC
D3390F3  DS    X                   KEY OVERHEAD (CELLS)       07/97 DBC
D3390F4  DS    X                   ECC(?) OHEAD MULTIPLIER    07/97 DBC
D3390F5  DS    X                   ECC(?) OHEAD DIVISOR/2     07/97 DBC
D3390F6  DS    X                   ECC(?) OHEAD INCRIMENT     07/97 DBC
         SPACE 1                                              07/97 DBC
         ORG   ,                   RELOCATE HIGH              07/97 DBC
KDEVSIZE EQU   *-CONSTANT          DDD ENTRY SIZE
         SPACE 3
         IKJCPPL ,                 COMMAND PROCESSOR PARAMETER LIST
         SPACE 3
         IKJPPL ,                  PARSE PARAMETER LIST
PPLLEN   EQU   *-PPL               LIST LENGTH
         EJECT
         #DSA  ,                   DATA STORAGE AREA
DSAWORK  DS    D                   WORK AREA
DSABUFF  DS    CL80                MESSAGE BUFFER AND WORK AREA
DSAECB   DS    A                   ECB USED BY PARSE
DSAPDL   DS    A                   PARSE PARAMETER DESCRIPTER LIST PTR
         DS    0A
DSAPPL   DS    XL(PPLLEN)          PARSE PARAMETER LIST
SAVC3390 DS    10A                 RSA FOR CPA3390            07/97 DBC
SAVOBPT  DS    5A                  RSA FOR OLDBPT             07/97 DBC
DSALEN   EQU   *-DSA               DSA LENGTH
         EJECT
BLKSPTRK #ENTER SAVTYPE=(RENT,DSALEN) STANDARD REENTRANT ENTRY LINKAGE
         LR    R11,R13             COPY DSA PTR
         USING DSA,R11             DECLARE DSA BASE
         SPACE 3
*        INITIALIZE A PARAMETER LIST FOR PARSE AND THEN LINK TO IT
         SPACE 1
         LR    R2,R1               GET THE CPPL POINTER
         USING CPPL,R2             DECLARE A BASE FOR IT
         LA    R1,DSAPPL           POINT TO THE PPL
         USING PPL,R1              DECLARE A BASE FOR IT
         L     R0,CPPLUPT          INITIALIZE -
         ST    R0,PPLUPT            UPT POINTER
         L     R0,CPPLECT          INITIALIZE -
         ST    R0,PPLECT            ECT POINTER
         MVI   DSAECB,0            CLEAR AN ECB FOR PARSE
         LA    R0,DSAECB           INITIALIZE -
         ST    R0,PPLECB            ECB POINTER
         L     R0,=V(PCL)          INITIALIZE -
         ST    R0,PPLPCL            PCL POINTER
         LA    R0,DSAPDL           INITIALIZE -
         ST    R0,PPLANS            PDL POINTER POINTER
         L     R0,CPPLCBUF         INITIALIZE -
         ST    R0,PPLCBUF           CBUF POINTER
         ST    R13,PPLUWA          INITIALIZE VLDTY CHK WA PTR
         DROP  R2                  RELEASE CPPL BASE
         DROP  R1                  RELEASE PPL BASE
         LINK  EP=IKJPARS          PARSE THE INVOKING OPERANDS
         LTR   R15,R15             PARSE OK?
         BZ    PARSOK              YES, PROCEED
         CVD   R15,DSAWORK         NO, CNVRT RC TO DECIMAL
         UNPK  DSABUFF(2),DSAWORK+6(2) CNVRT TO EBCDIC
         OI    DSABUFF+1,X'F0'     FIX THE FUCKING SIGN
         LA    R4,DSABUFF          POINT TO EBCDIC RC
         LA    R5,1                GET ITS MACHINE LENGTH
         LA    R1,PARSFMSG-1       POINT TO ERROR MSG
         LR    R3,R15              SAVE THE RC
         BAL   R2,TPUTERRM         GO ISSUE THE ERROR MSG
         LR    R15,R3              RESTORE THE RC
         B     EXITGOOD            GO RETURN TO TMP
PARSOK   EQU   *
         SPACE 3
************************************************************* 07/97 DBC
* Display copyright, legal reference, and title messages.   * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
         LA    R1,=C' '                                       07/97 DBC
         LA    R0,1                                           07/97 DBC
         TPUT  (1),(0),R           SEND SPACER                07/97 DBC
         SPACE 1                                              07/97 DBC
         LA    R1,COPYRIGH                                    07/97 DBC
         LA    R0,L'COPYRIGH                                  07/97 DBC
         TPUT  (1),(0),R           SEND COPYRIGHT STATEMENT   07/97 DBC
         SPACE 1                                              07/97 DBC
         LA    R1,LEGALRF1                                    07/97 DBC
         LA    R0,L'LEGALRF1                                  07/97 DBC
         TPUT  (1),(0),R           SEND LEGAL REFERENCE MSG   07/97 DBC
         SPACE 1                                              07/97 DBC
         LA    R1,LEGALRF2                                    07/97 DBC
         LA    R0,L'LEGALRF2                                  07/97 DBC
         TPUT  (1),(0),R           SEND REST OF LEGAL REF.    07/97 DBC
         SPACE 1                                              07/97 DBC
         LA    R1,=C' '                                       07/97 DBC
         LA    R0,1                                           07/97 DBC
         TPUT  (1),(0),R           SEND SPACER                07/97 DBC
         SPACE 1
         LA    R1,TITLE            POINT TO TITLE
         LA    R0,TITLEN           GET ITS LENGTH
         TPUT  (1),(0),R           SEND IT
         SPACE 3
************************************************************* 07/97 DBC
* Start a triple loop to display a matrix of the requested  * 07/97 DBC
* data.                                                     * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
         L     R3,DSAPDL           @'PARSE DESCRIPTOR LIST    07/97 DBC
         LA    R3,PDLDEVT-PDL(,R3) PNT TO DEVICE PARAMETER    07/97 DBC
*                                  CHAIN                      07/97 DBC
DEVTLOOP CLI   0(R3),X'FF'         OMITTED VALUE?
         BE    DEVTNEXT            YES, LOOP FOR NEXT
         MVI   DSABUFF,C' '        NO, CLEAR MSG BUFFER
         MVC   DSABUFF+1(TITLEN-1),DSABUFF
         L     R1,0(,R3)           POINT TO DEVTYPE STRING
         LH    R15,4(,R3)          GET ITS LENGTH
         BCTR  R15,0               CONVERT TO MACHINE LENGTH
         MVC   DSABUFF+TITDEVT(*-*),0(R1) (EXECUTED INSTRUCTION)
         EX    R15,*-6             COPY TO MSG BUFFER
         IC    R6,0(,R3)           GET THE DDD INDEX
         N     R6,=X'0000007F'     ISSOLATE IT
         MH    R6,=Y(KDEVSIZE)     CONVERT TO OFFSET
         LA    R6,#(R6)            --> DEVICE DESCRIPTER DATA
         USING CONSTANT,R6         DECLARE A BASE
         SPACE 3
         L     R5,DSAPDL           @'PARSE DESCRIPTOR LIST    07/97 DBC
         LA    R5,PDLKEYL-PDL(,R5) POINT TO KEYLEN(S) CHAIN   07/97 DBC
KEYLLOOP CLI   0(R5),X'FF'         OMITTED ENTRY?
         BE    KEYLNEXT            YES, SKIP
         MVC   DSABUFF+TITKEYL(3),=X'202120' NO, EDIT MASK
         L     R10,0(,R5)          GET KEYLENGTH VALUE        07/97 DBC
         CVD   R10,DSAWORK         CONVERT TO DECIMAL         07/97 DBC
         ED    DSABUFF+TITKEYL-1(4),DSAWORK+6 CNVRT TO EBCDIC
         SPACE 3
************************************************************* 07/97 DBC
* Capacity Calculation Loop: Extract the next BLKSIZE       * 07/97 DBC
* paremeter and proceed according to whether it's a block   * 07/97 DBC
* size or a block count.                                    * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
         L     R4,DSAPDL           @'PARSE DESCRIPTOR LIST    07/97 DBC
         LA    R4,PDLBLKS-PDL(,R4) PNT TO BLKSIZE(S) CHAIN    07/97 DBC
BLKSLOOP CLC   0(4,R4),=4C'*'      OMITTED ENTRY?             07/97 DBC
         BE    BLKSNEXT            YES, SKIP
         MVC   DSABUFF+TITBLKS(5),=X'2020202120' NO, EDIT MASK
         SPACE 1                                              07/97 DBC
         ICM   R9,15,0(R4)         GET GIVEN BLKSIZE; DEFAULT WANTED?
         BP    SIZGIVEN            NO, USE GIVEN VALUE        07/97 DBC
         LA    R15,1               (TREAT "0" AS "#1")        11/84 DBC
         BZ    CNTGIVEN            YES, PROCESS AS B(#1)      07/97 DBC
         LPR   R15,R9              NO, GET N OF B(#N)         11/84 DBC
         SPACE 3                                              07/97 DBC
************************************************************* 07/97 DBC
* The user has given a block count and wants to know what's * 07/97 DBC
* the largest blksize that will yeald that block/track      * 07/97 DBC
* count.                                                    * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              11/84 DBC
CNTGIVEN SR    R9,R9               CLEAR                      07/97 DBC
         ICM   R9,3,TRKCAP         YES, GET TRACK CAPACITY    11/84 DBC
         SR    R7,R7               CLEAR
         TM    FLAG,DVCCELLS       CELLULAR DEVICE?           11/84 DBC
         BNZ   CNT3380             YES, USE NEWER FORMULAS    07/97 DBC
         SPACE 1                                              11/84 DBC
************************************************************* 07/97 DBC
* Count calculation for pre-cellular devices.               * 07/97 DBC
************************************************************* 07/97 DBC
         LR    R1,R9               GET TRK CAPACITY           07/97 DBC
         TM    FLAG,DVC2BOV        LB_OVHD = NLB_OVHD?        11/84 DBC
         BNZ   DFLOHOK             YES, SKIP                  11/84 DBC
         IC    R7,ROVRHD+1         GET LB_OVHD                11/84 DBC
         SR    R1,R7               TAKE AWAY FROM TRK_CAP     07/97 DBC
         IC    R7,ROVRHD           GET NLB_OVHD               11/84 DBC
         AR    R1,R7               ADD TO TRK_CAP TO GET A    07/97 DBC
*                                  "VIRTUAL" CAPACITY THAT    07/97 DBC
*                                  PRETENDS THAT ALL BLOCKS   07/97 DBC
*                                  HAVE EQUAL OVERHEAD.       07/97 DBC
DFLOHOK  DS    0H                                             07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R0,R0                                          07/97 DBC
         DR    R0,R15              GET #'BYTES NEEDED PER RCD 07/97 DBC
         LR    R9,R1               SAVE                       07/97 DBC
         SPACE 1                                              07/97 DBC
         LTR   R10,R10             ARE RECORDS KEY'D?         07/97 DBC
         BNZ   OLDKEYDZ            YES, SKIP                  07/97 DBC
         IC    R7,ROVRHD+2         GET UNKEYED UNDERHEAD      07/97 DBC
         ALR   R9,R7               ADD TO BYTES AVAILABLE FOR 07/97 DBC
*                                  DATA AREA                  07/97 DBC
OLDKEYDZ SR    R9,R10              DECRIMENT KL FROM SPACE    07/97 DBC
*                                  AVAILABLE FOR THE DL.      07/97 DBC
         SPACE 1                                              07/97 DBC
         IC    R7,ROVRHD           GET NLB_OHEAD              07/97 DBC
         TM    FLAG,DVC2BOV        IS OVERHEAD GIVEN AS TWO   07/97 DBC
*                                  SINGLE BYTES?              07/97 DBC
         BZ    OLDOHDOK            YES, PROCEED               07/97 DBC
         ICM   R7,3,ROVRHD         GET OVERHEAD APPLICABLE TO 07/97 DBC
*                                  ALL BLOCKS                 07/97 DBC
OLDOHDOK SR    R9,R7               TAKE OVERHEAD AWAY FROM    07/97 DBC
*                                  LENGTH AVAILABLE FOR       07/97 DBC
*                                  A DATA AREA. IS THERE ANY  07/97 DBC
*                                  ROOM LEFT FO A DARA AREA?  07/97 DBC
         BP    OLDOHDZ             YES, PROCEED               07/97 DBC
         LA    R9,1                NO, THE USER HAS GIVEN A   07/97 DBC
*                                  BLOCK COUNT THAT IS MORE   07/97 DBC
*                                  THAN CAN BE WRITTEN PER    07/97 DBC
*                                  TRACK. LOAD DL=1 TO SHOW   07/97 DBC
*                                  THE USER THE MAXIMUM       07/97 DBC
*                                  NUMBER OF BLOCKS WRITABLE  07/97 DBC
*                                  PER TRACK.                 07/97 DBC
OLDOHDZ  DS    0H                                             07/97 DBC
         SPACE 1                                              07/97 DBC
         TM    FLAG,DVCFTOL        DOES A TOLERANCE FACTOR    07/97 DBC
*                                  APPLY?                     07/97 DBC
         BZ    SIZGIVEN            NO, MY NUMBERS ARE GOOD.   07/97 DBC
         CLC   TOLER,=X'0200'      IS THE TOLERANCE FACTOR    07/97 DBC
*                                  NULL?                      07/97 DBC
         BE    SIZGIVEN            YES, AOK SO FAR.           07/97 DBC
         LA    R0,1                GET A ONE                  07/97 DBC
         CLR   R15,R0              WAS THE GIVEN BLKCNT=1?    07/97 DBC
         BE    SIZGIVEN            YES, TOLERANCE FACTOR DOES 07/97 DBC
*                                  NOT APPLY TO LAST BLK.     07/97 DBC
         CLR   R9,R0               DID I DEVOLVE TO FORCING   07/97 DBC
*                                  BLKSIZE=1?                 07/97 DBC
         BE    SIZGIVEN            YES, STICK WITH THAT       07/97 DBC
*                                  THOUGHT.                   07/97 DBC
         SPACE 1                                              07/97 DBC
OLDTOLLP BAL   R14,OLDBPT          DETERMINE THE BPT FIT FOR  07/97 DBC
*                                  THE TRIAL DL (R9)          07/97 DBC
         CLR   R1,R15              AS MANY AS THE USER ASKED  07/97 DBC
*                                  FOR?                       07/97 DBC
         BNL   SIZGIVEN            YES, GO WITH IT            07/97 DBC
         BCT   R9,OLDTOLLP         DECRIMENT DL AND TRY AGAIN 07/97 DBC
         LA    R9,1                DEVOLVE TO DISPLAYING DL=1 07/97 DBC
         B     SIZGIVEN            DONE HERE                  07/97 DBC
         SPACE 1                                              11/84 DBC
************************************************************* 07/97 DBC
* Count calculation for early cellular devices (3375s and   * 07/97 DBC
* 3380s).                                                   * 07/97 DBC
************************************************************* 07/97 DBC
CNT3380  IC    R7,DCELLSIZ         GET CELL SIZE              07/97 DBC
         LR    R1,R9               GET TRKCAP                 11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R7               GET # CELLS AVAILABLE      11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R15              GET # CELLS AVAIL PER RCD  11/84 DBC
         TM    FLAG,FORMULA2       USE "FORMULA 2"?           07/97 DBC
         BNZ   CNT3390             YES, GO HANDLE             07/97 DBC
         SPACE 1                                              07/97 DBC
         MR    R0,R7               CNVRT BACK TO BYTES        11/84 DBC
         LR    R9,R1               AND COPY BACK TO R9        11/84 DBC
         SPACE 1                                              07/97 DBC
         LTR   R1,R10              ANY KEYS?                  07/97 DBC
         BZ    NWNOKYS1            NO, SKIP                   11/84 DBC
         AH    R1,D3380KDO         YES, ADD KEY-AREA OVERHEAD 07/97 DBC
         SR    R0,R0               CLEAR FOR DIVIDE           11/84 DBC
         DR    R0,R7               GET # CELLS NEEDED         11/84 DBC
         MR    R0,R7               CNVRT BACK TO ROUNDED UP   11/84 DBC
*                                  BYTES                      11/84 DBC
         SR    R9,R1               DECR SPACE FOR DATA        11/84 DBC
NWNOKYS1 DS    0H                                             07/97 DBC
         SPACE 1                                              07/97 DBC
         SH    R9,D3380CO          DECR FOR COUNT AREA OVHD   07/97 DBC
         LR    R1,R9               COPY                       11/84 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R7               GET # CELLS AVAILABLE FOR  11/84 DBC
*                                  DATA AREA (+ OVERHEAD)     11/84 DBC
         MR    R0,R7               CNVRT BACK TO ROUNDED DOWN 11/84 DBC
*                                  BYTES                      11/84 DBC
         AR    R1,R7               ADD IN SPACE IN THE REST - 11/84 DBC
         BCTR  R1,0                 OF THE LAST CELL          11/84 DBC
         SPACE 1                                              07/97 DBC
         LA    R9,1                ASSUME MINIMUM BLKSIZE     07/97 DBC
         SH    R1,D3380KDO         DECR DATA AREA OVERHEAD    07/97 DBC
         BNP   SIZGIVEN            TOO MANY BLKS TO FIT. GO   07/97 DBC
*                                  WITH MINIMUM BLKSIZE TO    07/97 DBC
*                                  SHOW THE USER THE MOST     07/97 DBC
*                                  BLKS HE CAN HAVE PER TRK.  07/97 DBC
         LR    R9,R1               COPY BACK TO R9            11/84 DBC
         B     SIZGIVEN            DONE HERE                  07/97 DBC
         SPACE 1                                              11/84 DBC
************************************************************* 07/97 DBC
* Count calculation for later cellular devices (3390s and   * 07/97 DBC
* later).                                                   * 07/97 DBC
************************************************************* 07/97 DBC
CNT3390  LR    R9,R1               SAVE #'CELLS NEEDED/RCD    07/97 DBC
         LTR   R1,R10              KEYED RCDS?                07/97 DBC
         BZ    NOKY3390            NO, SKIP                   07/97 DBC
         BAL   R14,CPA3390         COMPUTE #'CELLS FOR KEY    07/97 DBC
         SLR   R9,R1               #'CELLS LEFT FOR DATA+CNT  07/97 DBC
NOKY3390 DS    0H                                             07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R1,R1                                          07/97 DBC
         IC    R1,D3390F2          #'CELLS USED BY CNT+GAP    07/97 DBC
         SLR   R9,R1               TAKE IT OUT                07/97 DBC
         IC    R1,D3390F3          #'CELLS USED BY GAP        07/97 DBC
         AR    R9,R1               ADD IT BACK IN TO GET      07/97 DBC
*                                  #'CELLS AVAILABLE FOR      07/97 DBC
*                                  DATA. ARE THERE ANY?       07/97 DBC
         BNP   NODL3390            NO, USER ERROR.            07/97 DBC
         SPACE 1                                              07/97 DBC
         LR    R2,R9               SAVE #'CELLS FOR DATA AREA 07/97 DBC
         MR    R8,R7               CNVRT TO #'BYTES           07/97 DBC
DLLP3390 LR    R1,R9               COPY TEST L'DATA           07/97 DBC
         BAL   R14,CPA3390         FIGURE HOW MAY CELLS IT    07/97 DBC
*                                  WILL NEED                  07/97 DBC
         CLR   R1,R2               WOULD THAT DL FIT?         07/97 DBC
         BNH   SIZGIVEN            YES, DONE HERE             07/97 DBC
         BCT   R9,DLLP3390         LOOP TO TRY SMALLER DL     07/97 DBC
         SPACE 1                                              07/97 DBC
NODL3390 LA    R9,1                THE USER HAS GIVEN A BLOCK 07/97 DBC
*                                  COUNT GREATER THAN THE     07/97 DBC
*                                  MOST BLOCKS POSSIBLE PER   07/97 DBC
*                                  TRK. LOAD MINIMUM BLKSIZE  07/97 DBC
*                                  TO SHOW THE USER THE MAX   07/97 DBC
*                                  POSSIBLE BLK COUNT.        07/97 DBC
         SPACE 3                                              07/97 DBC
************************************************************* 07/97 DBC
* I (now) have a blksize. Calculate how many blocks of this * 07/97 DBC
* size can fit per track.                                   * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
SIZGIVEN CVD   R9,DSAWORK          CONVERT TO DECIMAL         07/97 DBC
         ED    DSABUFF+TITBLKS-1(6),DSAWORK+5 CNVRT TO EBCDIC
         SPACE 1                                              07/97 DBC
         TM    FLAG,DVCCELLS       CELLULAR DEVICE?           11/84 DBC
         BNZ   SIZ3380             YES, GO HANDLE             07/97 DBC
         SPACE 1                                              11/84 DBC
************************************************************* 07/97 DBC
* Size calculation for pre-cellular devices.                * 07/97 DBC
************************************************************* 07/97 DBC
         BAL   R14,OLDBPT          GO CALCULATE               07/97 DBC
         LR    R15,R1              GET BPT VALUE              07/97 DBC
         LR    R14,R0              GET USABLE RESIDUE         07/97 DBC
         B     GOTRESDU            PROCEED                    07/97 DBC
         SPACE 1                                              11/84 DBC
************************************************************* 07/97 DBC
* Size calculation for early cellular devices (3375s and    * 07/97 DBC
* 3380s).                                                   * 07/97 DBC
************************************************************* 07/97 DBC
SIZ3380  SR    R7,R7                                          07/97 DBC
         IC    R7,DCELLSIZ         GET CELL SIZE              07/97 DBC
         TM    FLAG,FORMULA2       USE "FORMULA 2"?           07/97 DBC
         BNZ   SIZ3390             YES, GO HANDLE             07/97 DBC
         SPACE 1                                              07/97 DBC
         LTR   R1,R9               GET DATALEN; EOF?          07/97 DBC
         BNZ   NWNTEOF             NO, PROCEED                11/84 DBC
         LR    R1,R7               YES, DATA AREA STILL TAKES 11/84 DBC
*                                  A CELL                     11/84 DBC
NWNTEOF  DS    0H                                             07/97 DBC
         SPACE 1                                              07/97 DBC
         AH    R1,D3380KDO         ADD DATA AREA OVERHEAD AND 07/97 DBC
*                                  ROUND-UP INCRIMENT         07/97 DBC
         SR    R0,R0               CLEAR                      11/84 DBC
         DR    R0,R7               CNVRT TO CELL COUNT        11/84 DBC
         LR    R9,R1               SAVE                       07/97 DBC
         SPACE 1                                              11/84 DBC
         LTR   R15,R10             COPY KEYLEN; ANY?          07/97 DBC
         BZ    NWNOKYS2            NO, SKIP                   11/84 DBC
         AH    R15,D3380KDO        ADD OVERHEAD & ROUND-UP    07/97 DBC
*                                  INCRIMENT                  07/97 DBC
         SR    R14,R14                                        07/97 DBC
         DR    R14,R7              CNVRT TO CELL COUNT        11/84 DBC
         ALR   R1,R15              ACCUMULATE                 07/97 DBC
NWNOKYS2 LR    R0,R15              SAVE KEY CELL CNT (OR 0)   07/97 DBC
         SPACE 1                                              07/97 DBC
         LH    R15,D3380CO         GET COUNT AREA OHEAD       07/97 DBC
         ALR   R15,R7              PREPATE TO -               07/97 DBC
         BCTR  R15,0                ROUND UP                  07/97 DBC
         SLR   R14,R14                                        07/97 DBC
         DR    R14,R7              CNVRT OHEAD TO CELL CNT    07/97 DBC
         ALR   R0,R15              ACCUMULATE                 07/97 DBC
         SPACE 1                                              07/97 DBC
         ALR   R1,R15              GET THE TOTAL #'CELLS      07/97 DBC
*                                  NEEDED FOR THE RECORD.     07/97 DBC
         SPACE 1                                              07/97 DBC
         SR    R15,R15             CLEAR                      11/84 DBC
         ICM   R15,3,TRKCAP        GET L'TRACK                11/84 DBC
         SLR   R14,R14                                        07/97 DBC
         DR    R14,R7              GET #'CELLS/TRACK          07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R14,R14                                        07/97 DBC
         DR    R14,R1              R15 = #'RECORDS/TRACK      07/97 DBC
*                                  R14 = #'CELLS LEFT OVER    07/97 DBC
         SPACE 1                                              07/97 DBC
         SR    R14,R0              DECRIMENT RESIDUE BY       07/97 DBC
*                                  #'CELLS NEEDED FOR COUNT   07/97 DBC
*                                  AND KEY (IF ANY). ARE      07/97 DBC
*                                  THERE ANY CELLS LEFT FOR   07/97 DBC
*                                  DATA?                      07/97 DBC
         BNP   NORD3380            NO, NO USABLE RESIDUE      07/97 DBC
         SPACE 1                                              07/97 DBC
         LR    R1,R9               @'DATA CELLS               07/97 DBC
         MR    R0,R7               @'DATE BYTES (INCL OHEAD)  07/97 DBC
         LR    R8,R1               SAVE                       07/97 DBC
         SPACE 1                                              07/97 DBC
FIGR3380 LR    R1,R8               COPY PROPOSED DL           07/97 DBC
         AH    R1,D3380KDO         ADD OHEAD + ROUND-UP       07/97 DBC
         SLR   R0,R0                                          07/97 DBC
         DR    R0,R7               CNVRT TO CELLS             07/97 DBC
         CLR   R1,R14              WILL THIS DL FIT WITHIN    07/97 DBC
*                                  THE RESIDUE?               07/97 DBC
         BNH   RDUE3380            YES, GREAT!                07/97 DBC
         BCT   R8,FIGR3380         TRY SMALLER DL             07/97 DBC
         SPACE 1                                              07/97 DBC
NORD3380 SLR   R14,R14             THERE IS NO USEFUL RESIDUE 07/97 DBC
         B     GOTRESDU            GO DISPLAY                 07/97 DBC
RDUE3380 LR    R14,R8              GET LARGEST FITTING DL     07/97 DBC
         B     GOTRESDU            GO DISPLAY                 07/97 DBC
         SPACE 1                                              11/84 DBC
************************************************************* 07/97 DBC
* Size calculation for later cellular devices (3390s and    * 07/97 DBC
* later).                                                   * 07/97 DBC
************************************************************* 07/97 DBC
SIZ3390  LTR   R1,R9               L'DATA REQ'D; EOF RECORD?  07/97 DBC
         BNZ   EOFZ3390            NO, PROCEED                07/97 DBC
         LR    R1,R7               EOF'S STILL NEED A CELL    07/97 DBC
EOFZ3390 BAL   R14,CPA3390         #'CELLS FOR DATA AREA      07/97 DBC
         LR    R9,R1               SAVE                       07/97 DBC
         SPACE 1                                              07/97 DBC
         LTR   R1,R10              KEY'D RCDS?                07/97 DBC
         BZ    NOKZ3390            NO, SKIP                   07/97 DBC
         BAL   R14,CPA3390         COMPUTE #'CELLS NEEDED     07/97 DBC
         ALR   R9,R1               ADD IT IN                  07/97 DBC
NOKZ3390 LR    R8,R1               SAVE #'CELLS FOR KEY AREA  07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R0,R0                                          07/97 DBC
         SLR   R1,R1                                          07/97 DBC
         IC    R1,D3390F2          #'CELLS FOR CNT+GAP        07/97 DBC
         IC    R0,D3390F3          #'CELLS FOR GAP ONLY       07/97 DBC
         SLR   R1,R0               #'CELLS FOR CNT ONLY       07/97 DBC
         ALR   R9,R1               ADD IN TO GET #'CELLS      07/97 DBC
*                                  NEEDED PER RECORD          07/97 DBC
         ALR   R8,R1               ACCUMULATE #'NON-DATA-AREA 07/97 DBC
*                                  CELLS PER RECORD           07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R15,R15                                        07/97 DBC
         ICM   R15,3,TRKCAP        #'BYTES/TRK                07/97 DBC
         SLR   R14,R14                                        07/97 DBC
         DR    R14,R7              #'CELLS/TRK                07/97 DBC
         SLR   R14,R14                                        07/97 DBC
         DR    R14,R9              R15 = #'BLKS/TRK           07/97 DBC
*                                  R14 = #'CELLS RESIDUE      07/97 DBC
         LR    R9,R14              SAVE                       07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R14,R14             ASSUME NO USEFUL RESIDUE   07/97 DBC
         SR    R9,R8               DECR L'RESIDUE BY #'NON-   07/97 DBC
*                                  DATA-AREA CELLS PER RCD.   07/97 DBC
*                                  IS THE RESIDUE BIG ENOUGH  07/97 DBC
*                                  TO ALLOW A DATA AREA?      07/97 DBC
         BNP   GOTRESDU            NO, DONE HERE              07/97 DBC
         SPACE 1                                              07/97 DBC
         LR    R1,R9               #'CELLS IN RESIDUE THAT    07/97 DBC
*                                  ARE AVAILABLE FOR A DATA   07/97 DBC
*                                  AREA                       07/97 DBC
         MR    R0,R7               CNVRT TO BYTES             07/97 DBC
         LR    R8,R1               SAVE                       07/97 DBC
RDUE3390 LR    R1,R8               GET TEST BLKSIZE           07/97 DBC
         BAL   R14,CPA3390         CNVRT 2 DATA AREA CELL CNT 07/97 DBC
         CR    R1,R9               WILL FIT INTO RESIDUE?     07/97 DBC
         BNH   GRDU3390            YES, GOT IT!               07/97 DBC
         BCT   R8,RDUE3390         NO, TRY NEXT SMALLER BSIZE 07/97 DBC
         SLR   R14,R14             RESIDUE NOT LARGE ENUF TO  07/97 DBC
*                                  BE USEFUL                  07/97 DBC
         B     GOTRESDU            DONE HERE                  07/97 DBC
GRDU3390 LR    R14,R8              SAVE MAX BLKSIZE THAT WILL 07/97 DBC
*                                  FIT INTO THE RESIDUE       07/97 DBC
         SPACE 3                                              07/97 DBC
************************************************************* 07/97 DBC
* R15 now contains the number of blocks (of the given size) * 07/97 DBC
* that will fit on a track. R14 contains the largest        * 07/97 DBC
* additional block size that can fit on the same track. I   * 07/97 DBC
* can now display this information, then loop to compute    * 07/97 DBC
* the next set of numbers.                                  * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
GOTRESDU MVC   DSABUFF+TITRSDU(5),=X'2020202120' EDIT MASK
         CVD   R14,DSAWORK         CNVRT RESIDUE TO DECIMAL
         ED    DSABUFF+TITRSDU-1(6),DSAWORK+5 CNVRT TO EBCDIC
         MVC   DSABUFF+TITBPT(5),=X'2020202120' GET EDIT MASK 11/84 DBC
         CVD   R15,DSAWORK         CNVRT BPT TO DECIMAL       11/84 DBC
         ED    DSABUFF+TITBPT-1(6),DSAWORK+5 CNVRT TO EBCDIC  11/84 DBC
         SPACE 3
         LA    R1,DSABUFF          POINT TO MESSAGE
         LA    R0,TITLEN           GET ITS LENGTH
         TPUT  (1),(0),R           SEND THE MESSAGE
         SPACE 3
************************************************************* 07/97 DBC
* Several loops bottom out here. Loop until done.           * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
BLKSNEXT ICM   R4,7,9(R4)          NO, CHAIN TO NEXT BLKSIZE; ANY?
         BNZ   BLKSLOOP            YES, LOOP TO PROCESS
KEYLNEXT ICM   R5,7,9(R5)          CHAIN TO NEXT KEYLEN; ANY?
         BNZ   KEYLLOOP            YES, LOOP TO PROCESS
         DROP  R6                  DONE W/CONSTANT BASE       07/97 DBC
DEVTNEXT ICM   R3,7,9(R3)          NO, CHAIN TO NEXT DEVICE TYPE; ANY?
         BNZ   DEVTLOOP            YES, LOOP TO PROCESS
         SPACE 3
************************************************************* 07/97 DBC
* All done. return to caller.                               * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
         SR    R15,R15             SET AOK RC
EXITGOOD #EXIT ((R14,R12)),RC=(R15) RETURN TO TMP
         EJECT ,                                              07/97 DBC
************************************************************* 07/97 DBC
*                                                           * 07/97 DBC
* OLDBPT -- This routine computes the number of blocks of   * 07/97 DBC
* a given size that can fit on a track for non-cellular     * 07/97 DBC
* dasd devices.                                             * 07/97 DBC
*                                                           * 07/97 DBC
* It also determines the largest additional block that      * 07/97 DBC
* can fit following the equal-size blocks.                  * 07/97 DBC
*                                                           * 07/97 DBC
* INPUTS:                                                   * 07/97 DBC
*   - R6 points to the CONSTANT entry for the dasd device   * 07/97 DBC
*     in question.                                          * 07/97 DBC
*   - R9 contains a data area length (BLKSIZE).             * 07/97 DBC
*   - R10 contains a key length or equals 0.                * 07/97 DBC
*   - R14 points back to my caller.                         * 07/97 DBC
*                                                           * 07/97 DBC
* RETURN 0(,R14):                                           * 07/97 DBC
*   - R1 contains the computed blocks/track number.         * 07/97 DBC
*   - R0 contains the usable track residue.                 * 07/97 DBC
*   - All other registers are restored.                     * 07/97 DBC
*                                                           * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
         USING CONSTANT,R6         DCL DASD CONSTANTS BASE    07/97 DBC
OLDBPT   STM   R14,R2,SAVOBPT      SAVE REGISTERS             07/97 DBC
         SR    R2,R2               CLEAR FOR "IC"'S           07/97 DBC
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* Setup R0 for computing the not-last-block size, and R1    * 07/97 DBC
* for computing the last-block size.                        * 07/97 DBC
************************************************************* 07/97 DBC
         LA    R1,0(R10,R9)        GET KEYLEN+BLKSIZE         07/97 DBC
         LR    R0,R1               COPY FOR NOT-LAST-BLOCK
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* If appropriate, apply a tolerance factor to all           * 07/97 DBC
* not-last-blocks.                                          * 07/97 DBC
************************************************************* 07/97 DBC
         TM    FLAG,DVCFTOL        APPLY TOLERANCE FACTOR TO ¬LAST-BLK?
         BZ    NTOLF               NO, SKIP
         MH    R0,TOLER            YES, DO SO
         SRL   R0,9                DROP THE FRACTION
NTOLF    DS    0H                                             07/97 DBC
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* If the blocks are unkeyed, then apply an underhead to     * 07/97 DBC
* both not-last-blocks and last-blocks.                     * 07/97 DBC
************************************************************* 07/97 DBC
         LTR   R10,R10             ANY KEY?                   07/97 DBC
         BNZ   GOTOVNK             YES, SKIP KEY-UNDERHEAD    07/97 DBC
         IC    R2,ROVRHD+2         NO, GET UNDERHEAD VALUE    07/97 DBC
         SR    R0,R2               ADJUST NOT-LAST-BLOCK      07/97 DBC
         SR    R1,R2               ADJUST LAST-BLOCK          07/97 DBC
GOTOVNK  DS    0H                                             07/97 DBC
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* Apply possibly differing overheads to not-last-blocks and * 07/97 DBC
* last-blocks.                                              * 07/97 DBC
************************************************************* 07/97 DBC
         IC    R2,ROVRHD           ASSUME NOT 2305            07/97 DBC
         TM    FLAG,DVC2BOV        OVERHEAD IS 2 BYTES?
         BZ    GOTNLB              NO, GOT NOT-LAST-BLOCK OVERHEAD
         ICM   R2,3,ROVRHD         GET ANY-BLOCK-OVERHEAD     07/97 DBC
GOTNLB   AR    R0,R2               ADD NOT-LAST-BLOCK OHEAD   07/97 DBC
         SPACE 1                                              07/97 DBC
         TM    FLAG,DVC2BOV        2305, ETC.?
         BO    GOTLB               YES, GOT ANY-BLOCK-OVERHEAD
         IC    R2,ROVRHD+1         NO, GET LAST-BLOCK OHEAD   07/97 DBC
GOTLB    AR    R1,R2               GET LAST-BLOCK LENGTH      07/97 DBC
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* Compute the number of equal-size blocks that can fit on   * 07/97 DBC
* a track. Also, figure out the number of bytes remaining   * 07/97 DBC
* following those blocks.                                   * 07/97 DBC
************************************************************* 07/97 DBC
         SR    R15,R15                                        07/97 DBC
         ICM   R15,3,TRKCAP        GET L'TRACK                11/84 DBC
         SR    R14,R14                                        07/97 DBC
         DR    R14,R0              GET NOT-LAST-BLOCK COUNT   07/97 DBC
         CR    R14,R1              ROOM FOR LAST BLOCK?
         BNL   OLDADD1             YES, GO ADD ONE            07/97 DBC
         ALR   R14,R0              ADJUST L'RESIDUE TO -      07/97 DBC
         SLR   R14,R1               ACCOUNT FOR THE -         07/97 DBC
*                                    SHORTNESS OF THE LAST -  07/97 DBC
*                                     BLOCK.                  07/97 DBC
         B     OLDEQULZ            PROCEED                    07/97 DBC
         SPACE 1                                              07/97 DBC
OLDADD1  LA    R15,1(,R15)         COUNT SHORT LAST BLOCK     07/97 DBC
*                                  (SHORT DUE ONLY TO         07/97 DBC
*                                  OVERHEAD DIFFERENCES)      07/97 DBC
         SR    R14,R1              REMOVE FROM RESIDUE        07/97 DBC
OLDEQULZ DS    0H                                             07/97 DBC
         SPACE 1                                              11/84 DBC
************************************************************* 07/97 DBC
* Now, compute the BLKSIZE (DL) of the largest additional   * 07/97 DBC
* block that can still fit into the track's residue. The    * 07/97 DBC
* formula is: R14+(R1-R0)-(R1-R9), which reduces to         * 07/97 DBC
* R14-(R0-R9). Where:                                       * 07/97 DBC
*    EO-TRK---------------------------------------------+   * 07/97 DBC
*    R14------------------------------------------++++++¦   * 07/97 DBC
*    R1------------------------------------+++++++¦¦¦¦¦¦¦   * 07/97 DBC
*    R0---------+++++++++++                ¦¦¦¦¦¦¦¦¦¦¦¦¦¦   * 07/97 DBC
*               ¦¦¦¦¦¦¦¦¦¦¦                ¦¦¦¦¦¦¦¦¦¦¦¦¦¦   * 07/97 DBC
*               -----------                ¦¦¦¦¦¦¦¦¦¦¦¦¦¦   * 07/97 DBC
*    R9-----------+++                      ¦¦¦¦¦¦¦¦¦¦¦¦¦¦   * 07/97 DBC
*    R10--------++¦¦¦                      ¦¦¦¦¦¦¦¦¦¦¦¦¦¦   * 07/97 DBC
*    SO-TRK----+¦¦¦¦¦                      ¦¦¦¦¦¦¦¦¦¦¦¦¦¦   * 07/97 DBC
*              ¦¦¦---                      ¦¦¦¦¦¦¦------¦   * 07/97 DBC
*              ¦--                         -------      ¦   * 07/97 DBC
*    TRACK---> ¦KKDDD------KKDDD------ ... KKDDD--______¦   * 07/97 DBC
*                                          -------          * 07/97 DBC
*                                          ¦¦¦¦¦¦¦          * 07/97 DBC
*    LAST-BLK------------------------------+++++++          * 07/97 DBC
************************************************************* 07/97 DBC
         SR    R14,R0              DECR RESIDUE BY THE KEY -  07/97 DBC
         AR    R14,R9               AND OVERHEAD OF AN -      07/97 DBC
*                                    ADDITIONAL NLB. THIS -   07/97 DBC
*                                     YEALDS THE AMOUNT OF -  07/97 DBC
*                                      THE RESIDUE THAT IS -  07/97 DBC
*                                       AVAILABLE FOR USER -  07/97 DBC
*                                        DATA. IS THERE -     07/97 DBC
*                                         ENOUGH SPACE -      07/97 DBC
*                                          LEFT?              07/97 DBC
         BNM   OLDRET              YES, NEARLY DONE           07/97 DBC
         SR    R14,R14             NO, CLEAR RESIDUE
         SPACE 1                                              07/97 DBC
************************************************************* 07/97 DBC
* Done. Return to caller w/values in R0 and R1.             * 07/97 DBC
************************************************************* 07/97 DBC
OLDRET   ST    R15,SAVOBPT+12      RETURN BPT VIA R1          07/97 DBC
         ST    R14,SAVOBPT+8       RETURN RESIDUE VIA R0      07/97 DBC
         LM    R14,R2,SAVOBPT      RESTORE REGISTERS          07/97 DBC
         BR    R14                 RETURN TO CALLER           07/97 DBC
         DROP  R6                  DONE W/CONSTANT BASE       07/97 DBC
         EJECT ,                                              07/97 DBC
************************************************************* 07/97 DBC
*                                                           * 07/97 DBC
* CPA3390 -- This routine computes the number of cells      * 07/97 DBC
* needed (on a 3390 or newer DASD) per data area or key     * 07/97 DBC
* area. This includes all area overheads as well as the gap * 07/97 DBC
* preceeding the area.                                      * 07/97 DBC
*                                                           * 07/97 DBC
* The computation does not include the number of cells      * 07/97 DBC
* needed for a standard count field.                        * 07/97 DBC
*                                                           * 07/97 DBC
* This routine assumes that the gap and overhead            * 07/97 DBC
* calculations required for key and data areas are the      * 07/97 DBC
* same.                                                     * 07/97 DBC
*                                                           * 07/97 DBC
* INPUTS:                                                   * 07/97 DBC
*   - R1 contains the area's size, in bytes.                * 07/97 DBC
*   - R6 points to the current #-table entry, mapped by the * 07/97 DBC
*     CONSTANT dsect.                                       * 07/97 DBC
*   - R14 points back to my caller.                         * 07/97 DBC
*                                                           * 07/97 DBC
* RETURN 0(,R14):                                           * 07/97 DBC
*   - R1 contains the number of cells required for an area  * 07/97 DBC
*     containing the given number of bytes.                 * 07/97 DBC
*   - All other registers are restored.                     * 07/97 DBC
*                                                           * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
CPA3390  STM   R14,R7,SAVC3390     SAVE REGISTERS             07/97 DBC
         LR    R15,R1              COPY #'DATA (OR KEY) BYTES 07/97 DBC
         LR    R7,R6               COPY @'CONSTANTS           07/97 DBC
         USING CONSTANT,R7         DCL ITS BASE               07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R6,R6                                          07/97 DBC
         IC    R6,D3390F6          ECC FIELD WIDTH            07/97 DBC
         ALR   R15,R6              ACCUMULATE                 07/97 DBC
         SLR   R5,R5                                          07/97 DBC
         IC    R5,D3390F5          W/2'ECC PROTECTED AREA     07/97 DBC
         ALR   R5,R5               W'ECC PROTECTED AREA       07/97 DBC
         ALR   R15,R5              PREPARE TO -               07/97 DBC
         BCTR  R15,0                ROUND UP                  07/97 DBC
         SLR   R14,R14                                        07/97 DBC
         DR    R14,R5              COMPUTE ECC'S RUNNING      07/97 DBC
*                                  OVERHEAD                   07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R4,R4                                          07/97 DBC
         IC    R4,D3390F4          ECC FIELD WIDTH            07/97 DBC
         MR    R14,R4              ADJUST THE OVERHEAD        07/97 DBC
         SPACE 1                                              07/97 DBC
         ALR   R15,R6              ADD IN ECC FIXED OVERHEAD  07/97 DBC
         SPACE 1                                              07/97 DBC
         AL    R15,SAVC3390+12     ADD OVERHEAD TO DATA LEN   07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R1,R1                                          07/97 DBC
         IC    R1,DCELLSIZ         DEVICE'S CELL SIZE         07/97 DBC
         ALR   R15,R1              PREPARE TO -               07/97 DBC
         BCTR  R15,0                ROUND UP                  07/97 DBC
         SLR   R14,R14                                        07/97 DBC
         DR    R14,R1              CONVERT BYTE LENGTH TO A   07/97 DBC
*                                  CELL COUNT.                07/97 DBC
         SPACE 1                                              07/97 DBC
         SLR   R3,R3                                          07/97 DBC
         IC    R3,D3390F3          #'CELLS/GAP                07/97 DBC
         ALR   R15,R3              ACCUMULATE                 07/97 DBC
         SPACE 1                                              07/97 DBC
         ST    R15,SAVC3390+12     PASS TO CALLER VIA R1      07/97 DBC
         LM    R14,R7,SAVC3390     RESTORE REGISTERS          07/97 DBC
         DROP  R7                  DONE W/CONSTANT BASE       07/97 DBC
         BR    R14                 RETURN TO CALLER           07/97 DBC
         #DROP                     RELEASE PROGRAM BASE
         DROP  ,                   RELEASE ALL BASES
         EJECT
DEVTCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT DEVT OPND CHK RTNE
         L     R12,=A(BLKSPTRK)    ADJUST BASE ADDRESS
         USING BLKSPTRK,R12        REDECLRAE THE PGM BASE
         LM    R2,R3,0(R1)         POINT TO PDE AND DSA
         LR    R11,R3              LOAD NORMAL DSA BASE
         USING DSA,R11             DECLARE DSA BASE
         L     R4,0(,R2)           NO, POINT TO STRING
         CLI   0(R4),C'*'          OMITTED VALUE?
         BNE   DNTSTAR             NO, PROCEED
DSTAR    MVI   0(R2),X'FF'         YES, REMEMBER
         B     EXITOK              RETURN TO PARSE
DNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH
         BCTR  R5,0                CNVRT TO MACHINE LENGTH
         TM    6(R2),X'80'         OMITTED?
         BNO   DSTAR               YES, SKIP
         LTR   R5,R5               NO, NULL?
         BM    DSTAR               YES, SKIP
         SR    R15,R15             NO, CLEAR FOR TABLE SCAN
         LA    R1,LKUPDVTB-LKUPDNME-1 POINT TO TABLE
LKUPLOOP LA    R1,LKUPDNME+1(R15,R1) POINT TO NEXT ENTRY
         CLI   0(R1),X'FF'         END OF TABLE?
         BE    LKUPFAIL            YES, BAD STRING
         IC    R15,LKUPDNLN(,R1)   NO, GET ENTRY'S LENGTH
         CR    R15,R5              RIGHT ENTRY?
         BNE   LKUPLOOP            NO, KEEP LOOPING
         CLC   0(*-*,R4),LKUPDNME(R1) (EXECUTED INSTRUCTION)
         EX    R15,*-6             MAYBE, CHECK AGAIN
         BNE   LKUPLOOP            NO, KEEP LOOPING
         MVC   0(1,R2),LKUPDNDX(R1) YES, SAVE THE DEVICE TYPE
         B     EXITOK              GO RETURN TO PARSE
         DROP  ,                   RELEASE BASES
         EJECT
BLKSCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT BLKSIZE CHECKING ROUTINE
         L     R12,=A(BLKSPTRK)    RESET THE BASE REGISTER
         USING BLKSPTRK,R12        REDECLARE IT
         LM    R2,R3,0(R1)         POINT TO PDE AND DSA
         LR    R11,R3              LOAD DSA BASE
         USING DSA,R11             DECLARE DSA BASE
         L     R4,0(,R2)           POINT TO BLKSIZE STRING
         CLI   0(R4),C'*'          ASTERISK?
         BNE   BNTSTAR             NO, PROCEED
BSTAR    MVC   0(4,R2),=4C'*'      YES, SIGNEL OPND OMITTED   11/84 DBC
         B     EXITOK              RETURN TO PARSE
BNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH
         BCTR  R5,0                CONVERT TO MACHINE LENGTH
         TM    6(R2),X'80'         OMITTED?
         BNO   BSTAR               YES, GO REMEMBER
         LTR   R5,R5               NO, NULL?
         BM    BSTAR               YES, GO REMEMBER
         SPACE 1                                              11/84 DBC
         LA    R14,1               NO, ASSUME BLKSIZE         11/84 DBC
         CLI   0(R4),C'#'          BLOCK COUNT GIVEN?         11/84 DBC
         BNE   BNTCNT              NO, PROCEED                11/84 DBC
         SR    R5,R14              YES, DECR L'DIGITS; NULL?  11/84 DBC
         BM    BSTAR               YES, TREAT AS B(0)         11/84 DBC
         AR    R4,R14              NO, --> DIGITS             11/84 DBC
         LNR   R14,R14             SET "BLOCK COUNT" SIGNAL   11/84 DBC
BNTCNT   TM    0(R4),C'0'          VALID DIGIT?               11/84 DBC
         BNO   EXITFAIL            NO, ERROR                  11/84 DBC
         SPACE 1                                              11/84 DBC
         PACK  DSAWORK(8),0(*-*,R4) (EXECUTED INSTRUCTION)
         EX    R5,*-6              YES, PACK THE STRING
         CVB   R15,DSAWORK         CONVERT TO BINARY
         C     R15,=X'0000FFFF'    CHECK FOR MAX VALUE        11/84 DBC
         BH    BLKS2LRG            ERROR
         MR    R14,R14             OK, IF BLK_CNT; THEN MAKE  11/84 DBC
*                                  NEGATIVE                   11/84 DBC
         ST    R15,0(,R2)          RETURN THE CONVERTED VALUE
         B     EXITOK              GO RETURN TO PARSE
         DROP  ,                   RELEASE BASES
         EJECT
KEYLCHK  #ENTER ESDTYPE=NONE,SAVTYPE=RENT KEYLEN VALIDITY CHECK
         L     R12,=A(BLKSPTRK)    RESET BASE ADDRESS
         USING BLKSPTRK,R12        REDECLARE IT
         LM    R2,R3,0(R1)         POINT TO PDE AND DSA
         LR    R11,R3              LOAD DSA BASE
         USING DSA,R11             DECLARE DSA BASE
         L     R4,0(,R2)           POINT TO KEYLEN VALUE STRING
         CLI   0(R4),C'*'          IGNORE THIS?
         BNE   KNTSTAR             NO, PROCEED
         MVI   0(R2),X'FF'         YES, SIGNEL IT
         B     EXITOK              RETURN TO PARSE
KNTSTAR  LH    R5,4(,R2)           GET ITS LENGTH
         BCTR  R5,0                CONVERT TO MACHINE LENGTH
         PACK  DSAWORK(8),0(*-*,R4) (EXECUTED INSTRUCTION)
         EX    R5,*-6              PACK IT
         CVB   R15,DSAWORK         CONVERT TO BINARY
         C     R15,=A(255)         CHECK MAX VALUE
         BH    KEYL2LRG            ERROR
         ST    R15,0(,R2)          OK, RETURN CONVERTED VALUE
         B     EXITOK              GO RETURN TO PARSE
         DROP  ,                   RELEASE BASES
         EJECT
         USING BLKSPTRK,R12        DECLARE PROGRAM BASE
         USING DSA,R11             DECLARE DSA BASE
         SPACE 3
EXITFAIL LA    R15,8               ERROR RC
         B     EXIT
         SPACE 1
EXITOK   SR    R15,R15             SET AOK RC
EXIT     #EXIT ((R14,R12)),RC=(R15) RETURN TO PARSE
         SPACE 3
LKUPFAIL LA    R1,LKUPFMSG-1
         BAL   R2,TPUTERRM
         B     EXITFAIL
         SPACE 1
BLKS2LRG LA    R1,BLKS2MSG-1
         BAL   R2,TPUTERRM
         B     EXITFAIL
         SPACE 1
KEYL2LRG LA    R1,KEYL2MSG-1
         BAL   R2,TPUTERRM
         B     EXITFAIL
         SPACE 3
TPUTERRM LA    R15,DSABUFF         GET SINK SCANNER
         LTR   R5,R5               NULL OPERAND?
         BM    OPNDNULL            YES, SKIP
         MVC   DSABUFF(*-*),0(R4)  (EXECUTED INSTRUCTION)
         EX    R5,*-6              NO, MOVE OPND TO MSG
         ALR   R15,R5              ADVANCE SINK SCANNER
OPNDNULL SR    R14,R14             CLEAR
         IC    R14,0(,R1)          GET MSG LENGTH
         MVC   1(*-*,R15),1(R1)    (EXECUTED INSTRUCTION)
         EX    R14,*-6             MOVE MSG TO SINK
         LA    R0,2(R14,R15)       POINT PAST EO MSG
         LA    R1,DSABUFF          POINT TO START
         SR    R0,R1               GET MSG LENGTH
         TPUT  (1),(0),R           SEND THE MSG
         BR    R2                  RETURN TO CALLER
         DROP  ,                   RELEASE BASES
         EJECT
         PRINT NOGEN
         SPACE 3
PCL      IKJPARM DSECT=PDL
PDLDEVT  IKJIDENT 'DASD DEVICE TYPE(S)',LIST,ASTERISK,UPPERCASE,       *
               FIRST=ANY,OTHER=ANY,PROMPT='DASD DEVICE TYPE(S)',       *
               MAXLNTH=10,VALIDCK=DEVTCHK,                             *
               HELP='2301 2302 2303 2305-1 2305-2 2311 2314 2319 2321 3*
               330 3340 3350 3375 3380 3390 3995-111 3995-113 3995-151 *
               3995-153 OR 9345. ENTER AN ASTERISK TO SKIP THIS FIELD.'
PDLBLKSK IKJKEYWD
         IKJNAME 'BLKSIZE',SUBFLD=PCLBLKS
PDLKEYLK IKJKEYWD
         IKJNAME 'KEYLEN',SUBFLD=PCLKEYL
PCLBLKS  IKJSUBF
PDLBLKS  IKJIDENT 'NUMBER',LIST,ASTERISK,MAXLNTH=6,FIRST=ALPHANUM,     *
               OTHER=NUMERIC,PROMPT='BLKSIZE',VALIDCK=BLKSCHK,         *
               HELP='A PHYSICAL BLOCK LENGTH VALUE RANGING FROM 1 TO 65*
               535 OR A # FOLLOWED BY A BLOCK COUNT (E.G., #6). ENTER A*
                0 TO FIND THE MAXIMUM BLKSIZE. TO SKIP THIS FIELD, ENTE*
               R AN ASTERISK.'                                11/84 DBC
PCLKEYL  IKJSUBF
PDLKEYL  IKJIDENT 'NUMBER',LIST,ASTERISK,MAXLNTH=3,FIRST=NUMERIC,      *
               OTHER=NUMERIC,DEFAULT='0',VALIDCK=KEYLCHK,              *
               HELP='A KEY LENGTH VALUE RANGING FROM 0 TO 255. TO SKIP *
               THIS FIELD, ENTER AN ASTERISK.'
         IKJENDP
         SPACE 3
         PRINT ON,GEN,NODATA
         EJECT ,
************************************************************* 07/97 DBC
* The following data is extracted from various incarnations * 07/97 DBC
* of MVS's Device Characteristics Table. This table is      * 07/97 DBC
* pointed to by CVTZDTAB, indexed by UCBTBYT4, and mapped   * 07/97 DBC
* by SYS1.MODGEN(IHADVCT). This table provides usable data  * 07/97 DBC
* for all IBM devices up to and including 3380s (but not    * 07/97 DBC
* beyond 3380s).                                            * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
#        DS    0X                                             07/97 DBC
         SPACE 1                                              07/97 DBC
#2301    DS    0X                  2301 PARALLEL DRUM         07/97 DBC
         DC    X'5003,04,BA3535,0200,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#2302    DS    0X                  2302 DISK STORAGE          07/97 DBC
         DC    X'1378,01,511414,0219,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#2303    DS    0X                  2303 SERIAL DRUM           07/97 DBC
         DC    X'131C,00,922626,0200,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#23051   DS    0X                  2305-1 FIXED HEAD STORAGE  07/97 DBC
         DC    X'38E8,09,027ACA,0200,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#23052   DS    0X                  2305-2 FIXED HEAD STORAGE  07/97 DBC
         DC    X'3A0A,09,01215B,0200,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#2311    DS    0X                  2311 DISK STORAGE DRIVE    07/97 DBC
         DC    X'0E29,01,511414,0219,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#2314    DS    0X                  DIRECT ACCESS STORAGE      07/97 DBC
#2319    DS    0X                  DIRECT ACCESS STORAGE      07/97 DBC
         DC    X'1C7E,01,922D2D,0216,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#2321    DS    0X                  2321 DATA CELL DRIVE       07/97 DBC
         DC    X'07D0,03,641010,0219,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#3330    DS    0X                  3330 DISK STORAGE          07/97 DBC
         DC    X'336D,01,BFBF38,0200,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#3340    DS    0X                  3340 DISK                  07/97 DBC
         DC    X'2157,01,F2F24B,0200,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#3350    DS    0X                  3350 NON-REMOVABLE DISK    07/97 DBC
         DC    X'4B36,09,010B52,0200,00'                      07/97 DBC
         SPACE 1                                              07/97 DBC
#3375    DS    0X                  3375 NON-REMOVABLE DISK    07/97 DBC
         DC    X'8CA0,10,20,00E0,00BF,00'                     07/97 DBC
         SPACE 1                                              07/97 DBC
#3380    DS    0X                  3380 NON-REMOVABLE DISK    07/97 DBC
         DC    X'BB60,10,20,0100,010B,00'                     07/97 DBC
         SPACE 3                                              07/97 DBC
************************************************************* 07/97 DBC
* Starting with 3390s, the track capacity formulas became   * 07/97 DBC
* so complex that MVS's Device Characteristics Table could  * 07/97 DBC
* no longer contain the necessary overheads and computation * 07/97 DBC
* factors. Accordingly, the following data is based on      * 07/97 DBC
* other sources.                                            * 07/97 DBC
************************************************************* 07/97 DBC
         SPACE 1                                              07/97 DBC
#3995113 DS    0X                  3995-113 OPTICAL STORAGE   07/97 DBC
#3995153 DS    0X                  3995-153 OPTICAL STORAGE   07/97 DBC
#3390    DS    0X                  3390 NON-REMOVABLE DISK    07/97 DBC
         DC    X'E5A2,12,22,13,09,06,74,06'                   07/97 DBC
         SPACE 1                                              07/97 DBC
#3995111 DS    0X                  3995-111 OPTICAL STORAGE   07/97 DBC
#3995151 DS    0X                  3995-151 OPTICAL STORAGE   07/97 DBC
         DC    X'D5A2,12,22,13,09,06,74,06'                   07/97 DBC
         SPACE 1                                              07/97 DBC
#9345    DS    0X                  9345 DISK                  07/97 DBC
         DC    X'BC98,12,22,12,07,06,74,06'                   07/97 DBC
         EJECT
LKUPDVTB DC    AL1((#2301-#)/KDEVSIZE,3),C'2301'
         DC    AL1((#2302-#)/KDEVSIZE,3),C'2302'
         DC    AL1((#2303-#)/KDEVSIZE,3),C'2303'
         DC    AL1((#23051-#)/KDEVSIZE,5),C'2305-1'
         DC    AL1((#23052-#)/KDEVSIZE,5),C'2305-2'
         DC    AL1((#2311-#)/KDEVSIZE,3),C'2311'
         DC    AL1((#2314-#)/KDEVSIZE,3),C'2314'
         DC    AL1((#2319-#)/KDEVSIZE,3),C'2319'
         DC    AL1((#2321-#)/KDEVSIZE,3),C'2321'
         DC    AL1((#3330-#)/KDEVSIZE,3),C'3330'
         DC    AL1((#3340-#)/KDEVSIZE,3),C'3340'              07/97 DBC
         DC    AL1((#3350-#)/KDEVSIZE,3),C'3350'
         DC    AL1((#3375-#)/KDEVSIZE,3),C'3375'              11/84 DBC
         DC    AL1((#3380-#)/KDEVSIZE,3),C'3380'              11/84 DBC
         DC    AL1((#3390-#)/KDEVSIZE,3),C'3390'              07/97 DBC
         DC    AL1((#3995111-#)/KDEVSIZE,7),C'3995-111'       07/97 DBC
         DC    AL1((#3995113-#)/KDEVSIZE,7),C'3995-113'       07/97 DBC
         DC    AL1((#3995151-#)/KDEVSIZE,7),C'3995-151'       07/97 DBC
         DC    AL1((#3995153-#)/KDEVSIZE,7),C'3995-153'       07/97 DBC
         DC    AL1((#9345-#)/KDEVSIZE,3),C'9345'              07/97 DBC
         DC    X'FF'
         SPACE 1
LKUPDNDX EQU   0                   DEVICE TYPE
LKUPDNLN EQU   LKUPDNDX+1          DEVICE NAME LENGTH
LKUPDNME EQU   LKUPDNLN+1          DEVICE NAME
         SPACE 3
         LTORG
         EJECT ,
COPYRIGH DC    C'BLKSPTRK - Copyright (c) 1997 - David B. Cole' /97 DBC
         SPACE 3                                              07/97 DBC
LEGALRF1 DC    C'For usage restrictions, either type TSO HELP BLKSPTRK,*
               '                                              07/97 DBC
LEGALRF2 DC    C'or see this program''s source code.'         07/97 DBC
         SPACE 3                                              07/97 DBC
TITLE    DS    0C
TITDEVT  EQU   *-TITLE
         DC    C'DEVICE      KEYLEN'
TITKEYL  EQU   *-TITLE-3
         DC    C'  BLKSIZE'
TITBLKS  EQU   *-TITLE-5
         DC    C'  BLOCKS/TRACK'
TITBPT   EQU   *-TITLE-5
         DC    C'  RESIDUE'
TITRSDU  EQU   *-TITLE-5
TITLEN   EQU   *-TITLE
         SPACE 3
         DC    AL1(L'LKUPFMSG-1)
LKUPFMSG DC    C' - NOT A RECOGNIZABLE DASD DEVICE TYPE +'
         SPACE 3
         DC    AL1(L'BLKS2MSG-1)
BLKS2MSG DC    C' - VALUE TOO LARGE FOR A BLKSIZE OR A BLOCK COUNT. MAX*
                ALLOWED IS 65767 +'                           11/84 DBC
         SPACE 3
         DC    AL1(L'KEYL2MSG-1)
KEYL2MSG DC    C' - VALUE TOO LARGE FOR A KEYLEN. MAX ALLOWED IS 255 +'
         SPACE 3
         DC    AL1(L'PARSFMSG-1)
PARSFMSG DC    C' - PARSE ERROR CODE'
         SPACE 3
         END   BLKSPTRK
./ ADD NAME=EXPORT   0100-99126-99126-1257-00016-00016-00000-DBCOLE2
//XPORTBPT JOB (CSW,UPS),'540-456-8536',CLASS=A,MSGCLASS=D,
//             MSGLEVEL=(1,1),NOTIFY=R9999,TIME=1439
//*
//CLEANUP EXEC PGM=IEFBR14
//SCRATCH  DD  DSN=DBCOLE.EXPORT.BLKSPTRK.XMIT,
//             UNIT=SYSALLDA,SPACE=(TRK,0),DISP=(MOD,DELETE)
//*
//TRANSMIT EXEC PGM=IKJEFT01
//SYSTSPRT DD  SYSOUT=*
//TEST     DD  DSN=DBCOLE.EXPORT.BLKSPTRK,DISP=SHR
//MESSAGE  DD  DSN=DBCOLE.EXPORT.BLKSPTRK(README),DISP=SHR
//SYSTSIN  DD  *
XMIT BLKSPTRK.USER +
     DSNAME('DBCOLE.EXPORT.BLKSPTRK') +
     MSGDDNAME(MESSAGE) +
     OUTDSNAME('DBCOLE.EXPORT.BLKSPTRK.XMIT')
./ ADD NAME=README   0102-99126-99126-1256-00080-00074-00000-DBCOLE2
You are reading DBCOLE.EXPORT.BLKSPTRK(README).


BLKSPTRK is a TSO command processor that computes DASD track capacities
and residues for any given BLKSIZE and/or KEYLEN for a large number of
IBM DASD devices. (Yeah, I know "DASD devices" is redundant. Sorry.)

The BLKSPTRK.ZIP file contains the following files:

  - BLKSPTRK.ALC is the assembler source code for the program.

  - TSO-HELP.TXT is a TSO help file for the program. It should be
    copied into your local version of the SYS1.HELP file.

  - JCL.TXT is sample JCL for assembling and link editing the program

All of the files are encoded in ASCII. When uploading them to your
mainframe, ASCII-to-EBCDIC translation should be enabled.

Assembling BLKSPTRK will require a macro library available from Cole
Software's web site (www.colesoft.com). The file there is named
MACROS.ZIP. You will have to obtain and install these macros before you
will be able to complete the installation of BLKSPTRK.

To install BLKSPTRK, do the following:

  - Obtain and install Cole Software's macro library (MACROS.ZIP).

  - Use WINZIP or PKUNZIP (or whatever) to decompress and extract the
    the BLKSPTRK.ALC, TSO-HELP.TXT, and JCL.TXT files from BLKSPTRK.ZIP.

  - Upload the three files to your mainframe. Make sure that
    ASCII-to-EBCDIC translation is turned on.

  - Upload the files to a library whose DCB attributes are RECFM=FB,
    LRECL=80, and BLKSIZE=n*80.

  - !!! READ THE HELP MEMBER FOR COPYRIGHT INFORMATION, USAGE
    RESTRICTIONS, AND CONTACT INFORMATION (not to mention program usage
    instructions too).

  - Copy the HELP member to a suitable TSO HELP library (such as
    SYS1.HELP). Rename it to BLKSPTRK, and give it an alias of BPT.

  - Check out the JCL member for sample JCL to assemble and linkedit
    the BLKSPTRK program.

  - Assemble the BLKSPTRK member using both system macros and private
    macros available from Cole Software. Specify PARM=RENT for the
    assembly.

  - Linkedit the BLKSPTRK program into a suitable TSO load library.
    Specify PARM=RENT (as well as other typical parameters). Assign BPT
    as an alias.

  - Try it out. Examples:
        BPT (3380 3390 9345) BLKSIZE(#1 #2 #3 #200)
        BPT (3380 3390 9345) BLKSIZE(1 99999) KEYLEN(0 1 255)
        etc.


CONTACT INFORMATION:

    Name:                David B. Cole
    Country:             USA

    Telephone:           540-456-8536
    FAX:                 540-456-6658
    E-mail:              dbcole@cfw.com
    Website:             www.colesoft.com

    Snail Mail:          Cole Software
                         736 Fox Hollow Road
                         Afton, VA 22920
                         USA





./ ADD NAME=TSOHELP  0100-99126-99126-0832-00195-00195-00000-DBCOLE6
)F FUNCTION
  The BLKSPTRK command calculates direct access storage device track
  capacities. For a given list of device types, this command will
  display exactly how many blocks of a given size (with or without
  keys) will fit on each track.

  This command also computes the usable track residue showing the
  largest block that will still fit at the end of a track that has been
  filled with blocks all of the given size.
  This program is copyrighted (c) 1997 by David B. Cole.


  LEGAL INFORMATION:

      This program is copyrighted (c) 1997 by David B. Cole.

      This program is distributed freely and may be reproduced and
      redistributed without restriction other than:
        - This copyright and usage/warranty/liability restriction
          statement ("Legal Statement") may not be modified or removed.
        - A similar Legal Statement located in this program's source
          code also may not be removed.
        - This Online Help File must be installed in a suitable "help
          library" (such as SYS1.HELP) so that users may see both the
          Legal Statement as well as usage instruction.

      This program is distributed without warranty of any kind,
      including (without limitation) warranties of merchantability and
      of fitness for a particular purpose. It is up to the user to make
      his own determination of the usefulness of this program in his
      own system.

      The user agrees not to hold me (David B. Cole) liable for any
      damage whatsoever, and the user agrees to indemnify me against
      third parties for any action arising from the user's use,
      modification, and/or redistribution of this program.

      This program may be modified freely so long as all modifications
      are clearly marked both internally and externally to distinguish
      them from the distributed code and functionallity.

      As a courtesy, please notify me if you discover any bugs or if
      you need or have made any code changes. (I of of course do not
      guarantee either that I will or that I will not make any future
      changes or corrections.)

      My contact information as of JUL97 is:

          Name:                David B. Cole
          Country:             USA
          Telephone:           540-456-8536
          FAX:                 540-456-6658
          E-mail:              davidbcole@aol.com
          Website:             www.colesoft.com

          Snail Mail:          Cole Software
                               736 Fox Hollow Road
                               Afton, VA 22920
                               USA

)X SYNTAX
             BLKSPTRK (devtype devtype ...)
                      BLKSIZE(<size or #count> <size or #count> ...)
                      KEYLEN(length length ...)
  Alias    - BPT
  Default  - BLKSPTRK BLKSIZE(#1) KEYLEN(0)
  Required - at least one devtype

  Note     - Lists of values may be given for both the devtype,
             BLKSIZE, and KEYLEN operands. When lists are given,
             BLKSPTRK will produce a matrix of all value combinations.
             The size of the report will be the product of the number
             of values given in each list. Example:

                 BPT (2314 3380 9345) BLKSIZE(1 99999 #2) KEY(0 1)

             This causes BLKSPTRK to product an 18 line report.

)O OPERANDS
))devtype -
         This operand is required. It must contain a list of one or
         more direct access storage device types. (e.g. 3330, 2305-2,
         etc.).  If more than one device type is given, then the list
         must be enclosed within parentheses. Currently (JUL97) the
         following device types are recognized:
               2301     (parallel drum)
               2302     (disk)
               2303     (serial drum)
               2305-1   (drum, 2 logical tracks per physical track)
               2305-2   (drum, 1 logical track  per physical track)
               2311     (removable disk)
               2314     (removable disk)
               2319     (same as 2314)
               2321     (data cell)
               3330     (removable disk)
               3340     (disk)
               3350     (disk)
               3375     (disk)
               3380     (disk)
               3390     (disk)
               3995-111 (removable optical disk - CD-ROM)
               3995-113 (removable optical disk - CD-ROM)
               3995-151 (removable optical disk - CD-ROM)
               3995-153 (removable optical disk - CD-ROM)
               9345     (rack-mounted disk)

         Notes:

           - In JUL97 I extensively verified program output against
             published track capacity tables for the following devices:
                 2305-1 2305-2 3330 3350 3380 3390 and 9345.
             The program output matched the published data for all
             tested devices except the 2305-1 drum.

           - For 2305-1 drums, the BLKSPTRK program disagreed with
             the published information relating to the maximum size
             blocks that can fit n times per track for the following
             values of "n":
                 #5 #7 #8 #15 #18 #21 #23 #24 #27 #52 and #36.
             In each case the reported maximum blksize was one byte
             greater than the published maximum blksize.

             This descrepancy did not occur for any other tested DASD,
             and in particular it did not occur for 2305-2 drums!

             It is possible that for the 2305-1 drum, the computation
             factors and parameters used by BLKSPTRK might be
             incorrect; however, it is also possible that the published
             tables themselves are wrong. But at this point (JUL97) it
             is both too late and not worth it to double check those
             factors.

             For what it's worth, the published capacity tables were
             found in GA26-1589-3: "Reference Manual for IBM 2835
             Storage Control and IBM 2305 Fixed Head Storage Module".
             The computation parameters used by BLKSPTRK for the 2305-1
             are:
                 DASD Type:                 Non-cellular
                 Track Capacity:            X'38E8' bytes
                 Overhead (all blocks):     X'027A'
                 Unkeyed Block Underhead:   X'CA'
                 Tolerance Factor (all but  X'0200' (X'0200' has no
                 the last block):                   effect)

))BLKSIZE -
         This operand is optional. If omitted, then B(#1) is used. If
         given, then it must specify a list of one or more physical
         block sizes and/or block counts.

         A block size is given as a plain number (e.g., B(6160)). A
         block count is given preceded by a pound sign (e.g., B(#5)).

         When a block count is given, BLKSPTRK displays the size of the
         largest block that fits the given number of times on a track.

         Notes:

           - Giving a zero value is equivalent to giving #1. Thus, all
             of the following are equilivant: BLKSIZE(#1) BLKSIZE(#0)
             and BLKSIZE(0).

           - Giving a block count that is higher than the most number
             of blocks that can fit on a track causes BLKSPTRK to
             devolve to showing the maximum number of blocks (1 byte in
             size) that will fit per track. Thus, the following are
             equivalent: BLKSIZE(#200) and BLKSIZE(1).

           - Giving a block size that is larger than the largest block
             that can fit on a track causes BLKSPTRK to devolve to
             showing the largest block that will fit. Thus, the
             following are equivalent: BLKSIZE(99999) and BLKSIZE(#1).

         Example:

         BPT (3380 3390) BLKSIZE(#1 #200) KEY(0 1)
         This produces a 8-line report (4 lines for each disk) showing
         (a) the largest block that will fit on a track (#1) and (b)
         the most number of blocks that will fit per track (#200). The
         information is shown both for keyed (KEY(1)) and unkeyed
         (KEY(0)) blocks.

))KEYLEN -
         This operand is optional. If omitted, then a zero value is
         used. if given, then it may specify one or more key lengths to
         be used in the track capacity calculations.

         Example:

         BPT (3380 3390) BLKSIZE(#1 #200) KEY(0 1)
         This produces a 8-line report (4 lines for each disk) showing
         (a) the largest block that will fit on a track (#1) and (b)
         the most number of blocks that will fit per track (#200). The
         information is shown both for keyed (KEY(1)) and unkeyed
         (KEY(0)) blocks.

