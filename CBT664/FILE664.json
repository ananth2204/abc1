{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012548000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "CBT.V500.FILE664.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE664.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x04'", "DS1TRBAL": "b'\\x9aT'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xb8\\x00\\x03\\x04\\xb9\\x00\\x07\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f!\\x17\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T21:17:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-465"}, "text": "REGULAR CBT TAPE - VERSION 465    FILE:  664\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT465.FILE664\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 31 MEMBERS COUNTED; CUMULATIVE SIZE IS 10,252 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/16/04    21:17:22    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INTRO": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x04\\x04o\\x01\\x04\\x04o\\x122\\x00,\\x006\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-15T00:00:00", "modifydate": "2004-02-15T12:32:55", "lines": 44, "newlines": 54, "modlines": 0, "user": "MOSELEY"}, "text": "In 1998 I, along with most of the rest of the world, was thinking\nabout the approach of the year 2000 and the implications that\nheld for incompatible two digit years.  I brought together some\nroutines I had written earlier in several languages (COBOL,\nBASIC, and Assembler) and the result was this group of Assembler\nsubroutines that can be used to perform any required date format\nconversion:\n\n    Y2KATOG.ALC         Astronomical number to Gregorian\n    Y2KCONV.ALC         2 digit year to 4 digit year - various\n                        formats\n    Y2KDFMT.ALC         Gregorian date to various output formats\n    Y2KDOWN.ALC         Day of week number for Gregorian date\n    Y2KESTR.ALC         Easter date for given year\n    Y2KGETD.ALC         Return system date in various formats\n    Y2KGTOA.ALC         Gregorian to astronomical number\n    Y2KGTOJ.ALC         Gregorian to Julian (day of year)\n    Y2KJTOG.ALC         Julian (day of year) to Gregorian\n    Y2KLAGE.ALC         Large span age between Gregorian dates\n    Y2KLEAP.ALC         Determines if given year is a leap year\n    Y2KPROJ.ALC         Derives target date forward/back from\n                        given date\n    Y2KSAGE.ALC         Small span age between Gregorian dates\n    Y2KTDOW.ALC         Derives target date for given date and\n                        day of week\n\nFor several financial applications I had written in the past, I\nrequired a date record to be provided from which interest would\nbe calculated either from the prior run date to the current run\ndate or from the current run date forward to the next run date.\nI wrote a program that utilized the date routines above to derive\nsuch a date record using the current system date and a file of\nrules to specify the observed holidays:\n\n    RUNDATES.CBL        Program to build run dates record\n    RUNDATES.CPY        Copy book for run dates record\n\nIn addition to the date routines, I wrote a COBOL program to scan\nsource code for likely date references.  The program is based\nupon the design of a BASIC program that was placed in the public\ndomain by the National Institute of Standards.  The program is\ndriven by a glossary table read in at run time.\n\n    Y2KSCAN.CBL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$ELAPSED": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00'\\x01\\x04\\x04o\\x01\\x04\\x04o\\x126\\x00\\x18\\x00\\x18\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-15T00:00:00", "modifydate": "2004-02-15T12:36:27", "lines": 24, "newlines": 24, "modlines": 0, "user": "MOSELEY"}, "text": "Have you ever needed to figure out the amount of time that has\nelapsed between a couple of dates?  I frequently need to do this\nand it isn't something I enjoy \"tallying\" up using my fingers.\nBack in 1997 I wrote a C++ program to do the computation for me.\nI was sort of curious to see how difficult it would be to write\nin COBOL and I also wanted to make the output a bit more\npolished.\n\nThe result is this small \"main\" program with an embedded\nsubprogram to process the command line parameter.  I use a call\nto the Y2KLAGE subprogram to actually compute the period between\nthe dates.  Naturally, the most complex part of the problem is\nisolating and validating the input parameter(s), so the most\nsignificant portion of the program is the nested subprogram\n'GETPARM'.\n\nIf you want to execute the program, you can download the compiled\nexecutable.  It may be run from a DOS window under Windows\n95/98/NT/2K.  It may also be run under a DOS window under OS/2.\nOf course, it will also run just fine under MS/PC-DOS.  If you\nexecute the program without any parameter it will display the\nparameter syntax.\n\n    ELAPSED            ELAPSEXE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INDEX": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x00\\x17\\x00\\x17\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "MOSELEY"}, "text": "This is the source/jobstream dataset for the Y2K routines.\n$INDEX   - this text\nEYEC     - ALC macro\nYREGS    - ALC macro\nY2K$ASM  - jobstream to assemble/link the routines\nY2K$INST - jobstream to allocate load library & submit Y2K$ASM\nY2K$IVP  - jobstream to run the installation verification program\nY2KATOG  - Astronomical number to Gregorian date\nY2KCONV  - Convert dates between formats\nY2KDFMT  - Edit Gregorian date using predefined formats\nY2KDOWN  - Compute Day of Week number for date\nY2KESTR  - Calculate date Easter falls on for given year\nY2KGETD  - Return System date\nY2KGTOA  - Gregorian date to Astronomical number\nY2KGTOJ  - Gregorian date to Julian date\nY2KIVP   - COBOL Installation Verification program\nY2KIVPD  - SYSIN data for Y2KIVP program\nY2KJTOG  - Julian date to Gregorian date\nY2KLAGE  - Long term difference between dates\nY2KLEAP  - Test year for Leap year status\nY2KPROJ  - Return date using given offset from given date\nY2KSAGE  - Short term difference between dates\nY2KTDOW  - Return date for given day of week and given date\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE664": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f!\\x17\\x00J\\x00J\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T21:17:00", "lines": 74, "newlines": 74, "modlines": 0, "user": "CBT-465"}, "text": "//***FILE 664 is from Jay Moseley and contains date conversion      *   FILE 664\n//*           subroutines written in Assembler.                     *   FILE 664\n//*                                                                 *   FILE 664\n//*           email:     jay@jaymoseley.com                         *   FILE 664\n//*           web site:  www.jaymoseley.com                         *   FILE 664\n//*                                                                 *   FILE 664\n//*     In 1998 I, along with most of the rest of the world, was    *   FILE 664\n//*     thinking about the approach of the year 2000 and the        *   FILE 664\n//*     implications that held for incompatible two digit years.    *   FILE 664\n//*     I brought together some routines I had written earlier      *   FILE 664\n//*     in several languages (COBOL, BASIC, and Assembler) and      *   FILE 664\n//*     the result was this group of Assembler subroutines that     *   FILE 664\n//*     can be used to perform any required date format             *   FILE 664\n//*     conversion:                                                 *   FILE 664\n//*                                                                 *   FILE 664\n//*     This is the source/jobstream dataset for the Y2K routines.  *   FILE 664\n//*                                                                 *   FILE 664\n//*     $INDEX   - this text                                        *   FILE 664\n//*     EYEC     - ALC macro                                        *   FILE 664\n//*     YREGS    - ALC macro                                        *   FILE 664\n//*     Y2K$ASM  - jobstream to assemble/link the routines          *   FILE 664\n//*     Y2K$INST - jobstream to allocate load library & submit      *   FILE 664\n//*                Y2K$ASM                                          *   FILE 664\n//*     Y2K$IVP  - jobstream to run the installation                *   FILE 664\n//*                verification program                             *   FILE 664\n//*     Y2KATOG  - Astronomical number to Gregorian date            *   FILE 664\n//*     Y2KCONV  - Convert dates between formats                    *   FILE 664\n//*     Y2KDFMT  - Edit Gregorian date using predefined formats     *   FILE 664\n//*     Y2KDOWN  - Compute Day of Week number for date              *   FILE 664\n//*     Y2KESTR  - Calculate date Easter falls on for given year    *   FILE 664\n//*     Y2KGETD  - Return System date                               *   FILE 664\n//*     Y2KGTOA  - Gregorian date to Astronomical number            *   FILE 664\n//*     Y2KGTOJ  - Gregorian date to Julian date                    *   FILE 664\n//*     Y2KIVP   - COBOL Installation Verification program          *   FILE 664\n//*     Y2KIVPD  - SYSIN data for Y2KIVP program                    *   FILE 664\n//*     Y2KJTOG  - Julian date to Gregorian date                    *   FILE 664\n//*     Y2KLAGE  - Long term difference between dates               *   FILE 664\n//*     Y2KLEAP  - Test year for Leap year status                   *   FILE 664\n//*     Y2KPROJ  - Return date using given offset from given        *   FILE 664\n//*                date                                             *   FILE 664\n//*     Y2KSAGE  - Short term difference between dates              *   FILE 664\n//*     Y2KTDOW  - Return date for given day of week and given      *   FILE 664\n//*                date                                             *   FILE 664\n//*                                                                 *   FILE 664\n//*     For several financial applications I had written in the     *   FILE 664\n//*     past, I required a date record to be provided from which    *   FILE 664\n//*     interest would be calculated either from the prior run      *   FILE 664\n//*     date to the current run date or from the current run        *   FILE 664\n//*     date forward to the next run date.  I wrote a program       *   FILE 664\n//*     that utilized the date routines above to derive such a      *   FILE 664\n//*     date record using the current system date and a file of     *   FILE 664\n//*     rules to specify the observed holidays:                     *   FILE 664\n//*                                                                 *   FILE 664\n//*         RUNDATES   Program to build run dates record            *   FILE 664\n//*         RUNDCOPY   Copy book for run dates record               *   FILE 664\n//*                                                                 *   FILE 664\n//*     In addition to the date routines, I wrote a COBOL           *   FILE 664\n//*     program to scan source code for likely date references.     *   FILE 664\n//*     The program is based upon the design of a BASIC program     *   FILE 664\n//*     that was placed in the public domain by the National        *   FILE 664\n//*     Institute of Standards.  The program is driven by a         *   FILE 664\n//*     glossary table read in at run time.                         *   FILE 664\n//*                                                                 *   FILE 664\n//*         Y2KSCAN                                                 *   FILE 664\n//*                                                                 *   FILE 664\n//*     On this file, there is also an MS/DOS executable, which     *   FILE 664\n//*     will calculate the elapsed time between two dates.  This    *   FILE 664\n//*     is member ELAPSEXE.  Just download the member to a PC       *   FILE 664\n//*     in binary, give it an .exe suffix, and execute it.          *   FILE 664\n//*     Equivalent COBOL source to run on the mainframe is          *   FILE 664\n//*     included as member ELAPSED.  These programs use the         *   FILE 664\n//*     subroutines (or PC equivalents) from the rest of this       *   FILE 664\n//*     file.                                                       *   FILE 664\n//*                                                                 *   FILE 664\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ELAPSED": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04o\\x01\\x04\\x04o\\x12\\x00\\x02_\\x02_\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-15T00:00:00", "modifydate": "2004-02-15T12:00:00", "lines": 607, "newlines": 607, "modlines": 0, "user": "MOSELEY"}, "text": "000100$SET NESTCALL\n000200 IDENTIFICATION DIVISION.\n000300 PROGRAM-ID. ELAPSED.\n000400\n000500*    AUTHOR. JAY MOSELEY.\n000600*    DATE-WRITTEN. JULY, 2000.\n000700\n000800* ************************************************************** *\n000900* THIS IS A TRANSLATION OF A PROGRAM I WROTE IN APRIL, 1997 (IN  *\n001000* C++) TO CALCULATE THE PERIOD OF TIME ELAPSED BETWEEN TWO DATES *\n001100* WHICH MAY BOTH BE SPECIFIED ON THE PARAMETER LINE.  OPTIONALLY *\n001200* ONLY ONE DATE MAY BE SPECIFIED AND THE SECOND DATE WILL BE     *\n001300* TAKE FROM THE SYSTEM DATE                                      *\n001400*                                                                *\n001500* THE DETAIL OF THE CALCULATION (AND OUTPUT) IS BASED UPON THE   *\n001600* INPUT:  IF ONLY THE YEAR IS ENTERED, THE DIFFERENCE WILL BE    *\n001700* CALCULATED IN YEARS; IF THE YEAR AND MONTH IS ENTERED, THE     *\n001800* DIFFERENCE WILL BE CALCUALTED IN YEARS AND MONTHS; AND IF A    *\n001900* FULL DATE IS ENTERED, THE DIFFERENCE WILL BE CALCULATED IN     *\n002000* YEARS, MONTHS, AND DAYS.                                       *\n002100* ************************************************************** *\n002200\n002300 ENVIRONMENT DIVISION.\n002400\n002500 DATA DIVISION.\n002600\n002700 WORKING-STORAGE SECTION.\n002800\n002900* ************************************************************** *\n003000* THE FOLLOWING VARIABLE BLOCK IS USED TO HOLD THE PARAMETERS    *\n003100* THAT APPLY TO THE CURRENT EXECUTION.  THEY ARE DERIVED BY THE  *\n003200* EMBEDDED SUBPROGRAM 'GETPARM' WHICH SCANS THE COMMAND LINE     *\n003300* ARGUMENT TO EXTRACT THE PARAMETERS.                            *\n003400* ************************************************************** *\n003500\n003600 01  RUN-TIME-PARAMETERS         GLOBAL.\n003700\n003800     02  SYNTAX-MESSAGE-SWITCH   PIC X(1)    VALUE 'N'.\n003900         88  DISPLAY-SYNTAX                  VALUE 'Y'.\n004000\n004100     02  FROM-MODE               PIC 9(1).\n004200     02  FROM-DATE               PIC 9(8)    VALUE ZEROS.\n004300     02                          REDEFINES FROM-DATE.\n004400         03  FROM-Y              PIC 9(4).\n004500         03  FROM-M              PIC 9(2).\n004600         03  FROM-D              PIC 9(2).\n004700\n004800     02  TO-MODE                 PIC 9(1).\n004900     02  TO-DATE                 PIC 9(8)    VALUE ZEROS.\n005000     02                          REDEFINES TO-DATE.\n005100         03  TO-Y                PIC 9(4).\n005200         03  TO-M                PIC 9(2).\n005300         03  TO-D                PIC 9(2).\n005400\n005500* ************************************************************** *\n005600* THE FOLLOWING VARIABLE BLOCK ARE LOCALLY USED VARIABLES.       *\n005700* ************************************************************** *\n005800\n005900 01  LOCAL-WORK-FIELDS.\n006000\n006100     02  SWAP-MODE               PIC 9(1).\n006200     02  SWAP-DATE               PIC 9(8).\n006300\n006400     02  OUTPUT-SUB              PIC S9(4)   COMP.\n006500     02  OUTPUT-LINE             PIC X(75).\n006600\n006700     02  NUMBER-SUB              PIC S9(4)   COMP.\n006800     02  EDIT-NUMBER             PIC ZZ,ZZ9/.\n006900     02  MOVE-NUMBER             PIC X(7).\n007000\n007100* ************************************************************* *\n007200* THE FOLLOWING VARIABLE BLOCK IS THE INTERFACE TO THE LONG     *\n007300* AGE CALCULATION SUBROUTINE 'Y2KLAGE'.                         *\n007400* ************************************************************* *\n007500\n007600 01  LAGE-PARAMETERS.\n007700     02  LAGEP-DATE1             PIC 9(8).\n007800     02                          REDEFINES LAGEP-DATE1.\n007900         03  LAGEP-DATE1-M       PIC 9(2).\n008000         03  LAGEP-DATE1-D       PIC 9(2).\n008100         03  LAGEP-DATE1-Y       PIC 9(4).\n008200     02  LAGEP-DATE2             PIC 9(8).\n008300     02                          REDEFINES LAGEP-DATE2.\n008400         03  LAGEP-DATE2-M       PIC 9(2).\n008500         03  LAGEP-DATE2-D       PIC 9(2).\n008600         03  LAGEP-DATE2-Y       PIC 9(4).\n008700     02  LAGEP-RC                PIC 9(1).\n008800     02  LAGEP-DAYS              PIC S9(2).\n008900     02  LAGEP-MONTHS            PIC S9(2).\n009000     02  LAGEP-YEARS             PIC S9(5).\n009100\n009200 PROCEDURE DIVISION.\n009300\n009400* ************************************************************** *\n009500* CALL EMBEDDED PROGRAM 'GETPARM' TO EVALUATE COMMAND-LINE       *\n009600* PARAMETER(S) AND SETUP THE FIELDS IN RUN-TIME-PARAMETERS.      *\n009700* ************************************************************** *\n009800\n009900     CALL 'GETPARM'.\n010000     IF DISPLAY-SYNTAX\n010100         DISPLAY 'Usage: ELAPSED '\n010200                 'yyyy | mm/yyyy | mm/dd/yyy '\n010300                 '[yyyy | mm/yyyy | mm/dd/yyyy].'\n010400         DISPLAY 'End of period assumed for omitted '\n010500                 'elements.'\n010600         DISPLAY '1900 assumed for short (2 digit) '\n010700                 'years.'\n010800         STOP RUN\n010900     END-IF.\n011000\n011100* ************************************************************** *\n011200* ENSURE THAT THE 'FROM' DATE IS CHRONOLOGICALLY BEFORE THE 'TO' *\n011300* DATE.                                                          *\n011400* ************************************************************** *\n011500\n011600     IF FROM-DATE GREATER THAN TO-DATE\n011700         MOVE FROM-DATE TO SWAP-DATE\n011800         MOVE FROM-MODE TO SWAP-MODE\n011900         MOVE TO-DATE TO FROM-DATE\n012000         MOVE TO-MODE TO FROM-MODE\n012100         MOVE SWAP-DATE TO TO-DATE\n012200         MOVE SWAP-MODE TO TO-MODE\n012300     END-IF.\n012400\n012500* ************************************************************** *\n012600* BEGIN BUILDING THE OUTPUT LINE BY USING THE DATE COMPONENTS    *\n012700* EXTRACTED FROM THE COMMAND LINE.                               *\n012800* ************************************************************** *\n012900\n013000     MOVE SPACES TO OUTPUT-LINE.\n013100     MOVE +1 TO OUTPUT-SUB.\n013200\n013300     EVALUATE FROM-MODE\n013400         WHEN 1\n013500             STRING FROM-Y ' through '\n013600                 DELIMITED BY SIZE\n013700                 INTO OUTPUT-LINE\n013800                 WITH POINTER OUTPUT-SUB\n013900             END-STRING\n014000         WHEN 3\n014100             STRING FROM-M '/' FROM-Y ' through '\n014200                 DELIMITED BY SIZE\n014300                 INTO OUTPUT-LINE\n014400                 WITH POINTER OUTPUT-SUB\n014500             END-STRING\n014600         WHEN 7\n014700             STRING FROM-M '/' FROM-D '/' FROM-Y ' through '\n014800                 DELIMITED BY SIZE\n014900                 INTO OUTPUT-LINE\n015000                 WITH POINTER OUTPUT-SUB\n015100             END-STRING\n015200     END-EVALUATE.\n015300\n015400     EVALUATE TO-MODE\n015500         WHEN 1\n015600             STRING TO-Y ': '\n015700                 DELIMITED BY SIZE\n015800                 INTO OUTPUT-LINE\n015900                 WITH POINTER OUTPUT-SUB\n016000             END-STRING\n016100         WHEN 3\n016200             STRING TO-M '/' TO-Y ': '\n016300                 DELIMITED BY SIZE\n016400                 INTO OUTPUT-LINE\n016500                 WITH POINTER OUTPUT-SUB\n016600             END-STRING\n016700         WHEN 7\n016800             STRING TO-M '/' TO-D '/' TO-Y ': '\n016900                 DELIMITED BY SIZE\n017000                 INTO OUTPUT-LINE\n017100                 WITH POINTER OUTPUT-SUB\n017200             END-STRING\n017300     END-EVALUATE.\n017400\n017500* ************************************************************** *\n017600* CALL 'Y2KLAGE' TO COMPUTE THE PERIOD BETWEEN THE DATES.        *\n017700* ************************************************************** *\n017800\n017900     MOVE TO-M TO LAGEP-DATE1-M.\n018000     MOVE TO-D TO LAGEP-DATE1-D.\n018100     MOVE TO-Y TO LAGEP-DATE1-Y.\n018200     MOVE FROM-M TO LAGEP-DATE2-M.\n018300     MOVE FROM-D TO LAGEP-DATE2-D.\n018400     MOVE FROM-Y TO LAGEP-DATE2-Y.\n018500     CALL 'Y2KLAGE' USING LAGE-PARAMETERS.\n018600\n018700* ************************************************************** *\n018800* FINISH BUILDING OUTPUT LINE AND DISPLAY IT.                    *\n018900* ************************************************************** *\n019000\n019100     MOVE LAGEP-YEARS TO EDIT-NUMBER.\n019200     MOVE SPACES TO MOVE-NUMBER.\n019300     MOVE +0 TO NUMBER-SUB.\n019400     INSPECT EDIT-NUMBER\n019500         TALLYING NUMBER-SUB\n019600         FOR LEADING ' '.\n019700     ADD +1 TO NUMBER-SUB.\n019800     MOVE EDIT-NUMBER(NUMBER-SUB:) TO MOVE-NUMBER.\n019900     STRING MOVE-NUMBER ' Years, /'\n020000         DELIMITED BY '/'\n020100         INTO OUTPUT-LINE\n020200         WITH POINTER OUTPUT-SUB\n020300     END-STRING.\n020400\n020500     MOVE LAGEP-MONTHS TO EDIT-NUMBER.\n020600     MOVE SPACES TO MOVE-NUMBER.\n020700     MOVE +0 TO NUMBER-SUB.\n020800     INSPECT EDIT-NUMBER\n020900         TALLYING NUMBER-SUB\n021000         FOR LEADING ' '.\n021100     ADD +1 TO NUMBER-SUB.\n021200     MOVE EDIT-NUMBER(NUMBER-SUB:) TO MOVE-NUMBER.\n021300     STRING MOVE-NUMBER ' Months, /'\n021400         DELIMITED BY '/'\n021500         INTO OUTPUT-LINE\n021600         WITH POINTER OUTPUT-SUB\n021700     END-STRING.\n021800\n021900     MOVE LAGEP-DAYS TO EDIT-NUMBER.\n022000     MOVE SPACES TO MOVE-NUMBER.\n022100     MOVE +0 TO NUMBER-SUB.\n022200     INSPECT EDIT-NUMBER\n022300         TALLYING NUMBER-SUB\n022400         FOR LEADING ' '.\n022500     ADD +1 TO NUMBER-SUB.\n022600     MOVE EDIT-NUMBER(NUMBER-SUB:) TO MOVE-NUMBER.\n022700     STRING MOVE-NUMBER ' Days. /'\n022800         DELIMITED BY '/'\n022900         INTO OUTPUT-LINE\n023000         WITH POINTER OUTPUT-SUB\n023100     END-STRING.\n023200\n023300     DISPLAY OUTPUT-LINE.\n023400\n023500     STOP RUN.\n023600\n023700 IDENTIFICATION DIVISION.\n023800 PROGRAM-ID. GETPARM.\n023900\n024000*    AUTHOR. JAY MOSELEY.\n024100*    DATE-WRITTEN. JULY, 2000.\n024200\n024300* ************************************************************** *\n024400* THIS EMBEDDED SUBPROGRAM PERFORMS ALL OF THE WORK TO ANALYZE   *\n024500* THE COMMAND LINE ARGUMENT - BREAKING THE ARGUMENT INTO 'WORDS' *\n024600* USING SPACES AS DELIMITERS, ANALYZING THE INDIVIDUAL PARAMETER *\n024700* 'WORDS' TO DERIVE THE DISCRETE COMPONENTS OF THE DATES, AND    *\n024800* VERIFYING THAT THE DATES SUBMITTED ARE VALID DATES.            *\n024900* ************************************************************** *\n025000\n025100 WORKING-STORAGE SECTION.\n025200\n025300* ************************************************************** *\n025400* THE FOLLOWING VARIABLE BLOCK CONTAINS ALL THE VARIABLES USED   *\n025500* TO SCAN THE COMMAND LINE AND EXTRACT THE DATE INFORMATION.     *\n025600* ************************************************************** *\n025700\n025800 01  PARM-EXTRACT-FIELDS.\n025900\n026000     02  PARM-LINE.\n026100         03  PARM-CHAR           OCCURS 80 TIMES\n026200                                 INDEXED BY PARM-X\n026300                                 PIC X(1).\n026400\n026500     02  SUB1                    PIC S9(4)   COMP.\n026600     02  SUB2                    PIC S9(4)   COMP.\n026700\n026800     02  WORD-X                  PIC S9(4)   COMP.\n026900     02  PARM-WORDS              VALUE SPACES.\n027000         03  PARM-WORD           OCCURS 2 TIMES\n027100                                 PIC X(10).\n027200\n027300     02  DATE-PARM               PIC X(10).\n027400\n027500     02  DATE-PARM-Y             PIC X(4).\n027600     02  DATE-PARM-YN            REDEFINES DATE-PARM-Y\n027700                                 PIC 9(4).\n027800     02  DATE-PARM-M             PIC X(2).\n027900     02  DATE-PARM-D             PIC X(2).\n028000\n028100     02  DATE-ELEMENTS.\n028200         03  DATE-ERROR-SWITCH   PIC 9(1).\n028300             88  DATE-VALID                  VALUE 0.\n028400             88  DATE-INVALID                VALUE 1.\n028500         03  DATE-MODE           PIC 9(1).\n028600             88  MODE-YEAR                   VALUE 1.\n028700             88  MODE-YEAR-MONTH             VALUE 3.\n028800             88  MODE-YEAR-MONTH-DAY         VALUE 7.\n028900         03  DATE-Y              PIC 9(4).\n029000         03  DATE-M              PIC 9(2).\n029100         03  DATE-D              PIC 9(2).\n029200\n029300* ************************************************************** *\n029400* THE FOLLOWING VARIABLE BLOCK IS USED BY THE ROUTINES WHICH     *\n029500* VERIFY THAT THE SUBMITTED DATES ARE VALID.                     *\n029600* ************************************************************** *\n029700\n029800 01  DATE-VALIDATION.\n029900\n030000     02  LEAP-YEAR-SWITCH        PIC X(1).\n030100         88  IS-LEAP-YEAR                    VALUE 'Y'.\n030200         88  IS-NOT-LEAP-YEAR                VALUE 'N'.\n030300\n030400     02  DAYS-IN-MONTHS          VALUE\n030500         '312831303130313130313031'.\n030600         03  DAYS-IN-MONTH       OCCURS 12 TIMES\n030700                                 PIC 9(2).\n030800 PROCEDURE DIVISION.\n030900\n031000* ************************************************************** *\n031100* RETRIEVE THE COMMAND-LINE PARAMETER.                           *\n031200* ************************************************************** *\n031300\n031400     ACCEPT PARM-LINE FROM COMMAND-LINE.\n031500\n031600* ************************************************************** *\n031700* PARSE THE COMMAND LINE INTO DISCRETE WORDS.  IF ANY WORD       *\n031800* IS LONGER THAN 10 CHARACTERS, DISPLAY ERROR MESSAGE AND SET    *\n031900* SWITCH TO DISPLAY SYNTAX.                                      *\n032000* ************************************************************** *\n032100\n032200     SET PARM-X TO +1.\n032300     MOVE +0 TO SUB1, WORD-X.\n032400     PERFORM UNTIL PARM-X GREATER THAN +80\n032500         IF SUB1 EQUAL +0\n032600             IF PARM-CHAR (PARM-X) NOT EQUAL SPACE\n032700                 SET SUB1 TO PARM-X\n032800             END-IF\n032900         ELSE\n033000             IF PARM-CHAR (PARM-X) EQUAL SPACE\n033100                 SET SUB2 TO PARM-X\n033200                 SUBTRACT SUB1 FROM SUB2\n033300                 IF SUB2 GREATER THAN +10\n033400                     DISPLAY 'Invalid parameter word ('\n033500                             PARM-LINE(SUB1:SUB2) ').'\n033600                     SET DISPLAY-SYNTAX TO TRUE\n033700                 ELSE\n033800                     ADD +1 TO WORD-X\n033900                     IF WORD-X GREATER THAN +2\n034000                         DISPLAY 'Too many parameters.'\n034100                         SET DISPLAY-SYNTAX TO TRUE\n034200                         SET PARM-X TO +81\n034300                     ELSE\n034400                         MOVE PARM-LINE(SUB1:SUB2)\n034500                           TO PARM-WORD (WORD-X)\n034600                     END-IF\n034700                 END-IF\n034800                 MOVE +0 TO SUB1\n034900             END-IF\n035000         END-IF\n035100         SET PARM-X UP BY +1\n035200     END-PERFORM.\n035300\n035400* ************************************************************** *\n035500* IF NO PARAMETERS SUPPLIED, DISPLAY SYNTAX.  IF 1 PARAMETER     *\n035600* SUPPLIED, USE SYSTEM-DATE AS TO-DATE AND EXTRACT PARAMETER     *\n035700* INTO FROM-DATE.  IF 2 PARAMETERS SUPPLIED, EXTRACT INTO        *\n035800* FROM-DATE AND TO-DATE, RESPECTIVELY.                           *\n035900* ************************************************************** *\n036000\n036100     EVALUATE WORD-X\n036200         WHEN +0\n036300             SET DISPLAY-SYNTAX TO TRUE\n036400         WHEN +1\n036500             MOVE FUNCTION CURRENT-DATE(1:8) TO TO-DATE\n036600             MOVE 7 TO TO-MODE\n036700             MOVE PARM-WORD (1) TO DATE-PARM\n036800             PERFORM ISOLATE-DATE-ELEMENTS\n036900             IF DATE-VALID\n037000                 MOVE DATE-MODE TO FROM-MODE\n037100                 MOVE DATE-Y TO FROM-Y\n037200                 MOVE DATE-M TO FROM-M\n037300                 MOVE DATE-D TO FROM-D\n037400             ELSE\n037500                 SET DISPLAY-SYNTAX TO TRUE\n037600                 DISPLAY 'Date entered is not valid!'\n037700             END-IF\n037800         WHEN +2\n037900             MOVE PARM-WORD (1) TO DATE-PARM\n038000             PERFORM ISOLATE-DATE-ELEMENTS\n038100             IF DATE-VALID\n038200                 MOVE DATE-MODE TO FROM-MODE\n038300                 MOVE DATE-Y TO FROM-Y\n038400                 MOVE DATE-M TO FROM-M\n038500                 MOVE DATE-D TO FROM-D\n038600             ELSE\n038700                 SET DISPLAY-SYNTAX TO TRUE\n038800                 DISPLAY 'First date entered is not valid!'\n038900             END-IF\n039000             MOVE PARM-WORD (2) TO DATE-PARM\n039100             PERFORM ISOLATE-DATE-ELEMENTS\n039200             IF DATE-VALID\n039300                 MOVE DATE-MODE TO TO-MODE\n039400                 MOVE DATE-Y TO TO-Y\n039500                 MOVE DATE-M TO TO-M\n039600                 MOVE DATE-D TO TO-D\n039700             ELSE\n039800                 SET DISPLAY-SYNTAX TO TRUE\n039900                 DISPLAY 'Second date entered is not valid!'\n040000             END-IF\n040100     END-EVALUATE.\n040200\n040300     GOBACK.\n040400\n040500* ************************************************************** *\n040600* BASED UPON THE NUMBER OF EMBEDDED SLASHES ('/'), ISOLATE AND   *\n040700* VALIDATE THE INDIVIDUAL ELEMENTS OF THE DATE PARAMETER.        *\n040800* ************************************************************** *\n040900\n041000 ISOLATE-DATE-ELEMENTS.\n041100\n041200     SET DATE-VALID TO TRUE.\n041300\n041400     MOVE +0 TO SUB1.\n041500     INSPECT DATE-PARM\n041600         TALLYING SUB1 FOR ALL '/'.\n041700\n041800* ************************************************************** *\n041900* IF NO SLASHES, EXTRACT YEAR; IF 1 SLASH, EXTRACT MONTH AND     *\n042000* YEAR; IF 2 SLASHES, EXTRACT MONTH, DAY, AND YEAR.              *\n042100* ************************************************************** *\n042200\n042300     EVALUATE SUB1\n042400         WHEN +0\n042500             UNSTRING DATE-PARM\n042600                 DELIMITED BY ' '\n042700                 INTO DATE-PARM-Y\n042800             END-UNSTRING\n042900             MOVE '88' TO DATE-PARM-M\n043000             MOVE '88' TO DATE-PARM-D\n043100             SET MODE-YEAR TO TRUE\n043200         WHEN +1\n043300             MOVE +1 TO SUB2\n043400             UNSTRING DATE-PARM\n043500                 DELIMITED BY '/'\n043600                 INTO DATE-PARM-M\n043700                 WITH POINTER SUB2\n043800             END-UNSTRING\n043900             UNSTRING DATE-PARM\n044000                 DELIMITED BY ' '\n044100                 INTO DATE-PARM-Y\n044200                 WITH POINTER SUB2\n044300             END-UNSTRING\n044400             MOVE '88' TO DATE-PARM-D\n044500             SET MODE-YEAR-MONTH TO TRUE\n044600         WHEN +2\n044700             MOVE +1 TO SUB2\n044800             UNSTRING DATE-PARM\n044900                 DELIMITED BY '/'\n045000                 INTO DATE-PARM-M\n045100                 WITH POINTER SUB2\n045200             END-UNSTRING\n045300             UNSTRING DATE-PARM\n045400                 DELIMITED BY '/'\n045500                 INTO DATE-PARM-D\n045600                 WITH POINTER SUB2\n045700             END-UNSTRING\n045800             UNSTRING DATE-PARM\n045900                 DELIMITED BY ' '\n046000                 INTO DATE-PARM-Y\n046100                 WITH POINTER SUB2\n046200             END-UNSTRING\n046300             SET MODE-YEAR-MONTH-DAY TO TRUE\n046400     END-EVALUATE.\n046500\n046600* ************************************************************** *\n046700* IF EXTRACTED YEAR IS NOT NUMERIC AND THE LENGTH IS TWO         *\n046800* CHARACTERS, PREPEND '19' TO THE TWO CHARACTERS EXTRACTED.      *\n046900* ************************************************************** *\n047000\n047100     IF DATE-PARM-Y IS NUMERIC\n047200         CONTINUE\n047300     ELSE\n047400         MOVE +0 TO SUB1\n047500         INSPECT DATE-PARM-Y\n047600             TALLYING SUB1\n047700             FOR CHARACTERS\n047800             BEFORE INITIAL ' '\n047900         IF SUB1 EQUAL +2\n048000             MOVE DATE-PARM-Y(1:2) TO DATE-PARM-Y(3:2)\n048100             MOVE '19' TO DATE-PARM-Y(1:2)\n048200         END-IF\n048300     END-IF.\n048400\n048500* ************************************************************** *\n048600* IF EXTRACTED MONTH IS NOT NUMERIC AND THE LENGTH IS ONE        *\n048700* CHARACTER, PREPEND '0' TO THE ONE CHARACTER EXTRACTED.         *\n048800* ************************************************************** *\n048900\n049000     IF DATE-PARM-M IS NUMERIC\n049100         CONTINUE\n049200     ELSE\n049300         MOVE +0 TO SUB1\n049400         INSPECT DATE-PARM-M\n049500             TALLYING SUB1\n049600             FOR CHARACTERS\n049700             BEFORE INITIAL ' '\n049800         IF SUB1 EQUAL +1\n049900             MOVE DATE-PARM-M(1:1) TO DATE-PARM-M(2:1)\n050000             MOVE '0' TO DATE-PARM-M(1:1)\n050100         END-IF\n050200     END-IF.\n050300\n050400* ************************************************************** *\n050500* IF EXTRACTED DAY IS NOT NUMERIC AND THE LENGTH IS ONE          *\n050600* CHARACTER, PREPEND '0' TO THE ONE CHARACTER EXTRACTED.         *\n050700* ************************************************************** *\n050800\n050900     IF DATE-PARM-D IS NUMERIC\n051000         CONTINUE\n051100     ELSE\n051200         MOVE +0 TO SUB1\n051300         INSPECT DATE-PARM-D\n051400             TALLYING SUB1\n051500             FOR CHARACTERS\n051600             BEFORE INITIAL ' '\n051700         IF SUB1 EQUAL +1\n051800             MOVE DATE-PARM-D(1:1) TO DATE-PARM-D(2:1)\n051900             MOVE '0' TO DATE-PARM-D(1:1)\n052000         END-IF\n052100     END-IF.\n052200\n052300* ************************************************************** *\n052400* AT THIS POINT, IF ANY OF THE EXTRACTED DATE ELEMENTS ARE NOT   *\n052500* NUMERIC, THE ONLY RECOURSE IS TO HANDLE AS AN ERROR.           *\n052600* ************************************************************** *\n052700\n052800     IF DATE-PARM-Y IS NOT NUMERIC\n052900     OR DATE-PARM-M IS NOT NUMERIC\n053000     OR DATE-PARM-D IS NOT NUMERIC\n053100         SET DATE-INVALID TO TRUE\n053200     END-IF.\n053300\n053400* ************************************************************** *\n053500* IF THE EXTRACTED DATE ELEMENTS ARE VALID, USE THE MODE VALUE   *\n053600* SET DURING THE EXTRACTION TO FILL IN MISSING PIECE(S) OF THE   *\n053700* DATE ELEMENTS WITH DEFAULT VALUES FOR END OF THE PERIOD.       *\n053800* ************************************************************** *\n053900\n054000     SET IS-NOT-LEAP-YEAR TO TRUE.\n054100     DIVIDE DATE-PARM-YN BY 4\n054200         GIVING SUB1\n054300         REMAINDER SUB2.\n054400     IF SUB2 NOT EQUAL ZERO\n054500         CONTINUE\n054600     ELSE\n054700         DIVIDE DATE-PARM-YN BY 100\n054800             GIVING SUB1\n054900             REMAINDER SUB2\n055000         IF SUB2 NOT EQUAL ZERO\n055100             SET IS-LEAP-YEAR TO TRUE\n055200         ELSE\n055300             DIVIDE DATE-PARM-YN BY 400\n055400                 GIVING SUB1\n055500                 REMAINDER SUB2\n055600             IF SUB2 NOT EQUAL ZERO\n055700                 CONTINUE\n055800             ELSE\n055900                 SET IS-LEAP-YEAR TO TRUE\n056000             END-IF\n056100         END-IF\n056200     END-IF.\n056300\n056400     IF IS-LEAP-YEAR\n056500         MOVE 29 TO DAYS-IN-MONTH (2)\n056600     ELSE\n056700         MOVE 28 TO DAYS-IN-MONTH (2)\n056800     END-IF.\n056900\n057000     IF DATE-VALID\n057100         EVALUATE TRUE\n057200             WHEN MODE-YEAR\n057300                 MOVE '12' TO DATE-PARM-M\n057400                 MOVE '31' TO DATE-PARM-D\n057500             WHEN MODE-YEAR-MONTH\n057600                 MOVE DATE-PARM-M TO SUB1\n057700                 MOVE DAYS-IN-MONTH (SUB1) TO DATE-PARM-D\n057800         END-EVALUATE\n057900         MOVE DATE-PARM-Y TO DATE-Y\n058000         MOVE DATE-PARM-M TO DATE-M\n058100         MOVE DATE-PARM-D TO DATE-D\n058200     END-IF.\n058300\n058400* ************************************************************** *\n058500* IF THE EXTRACTED ELEMENTS HAVE BEEN VALID TO THIS POINT, ONE   *\n058600* FINAL TEST IS MADE TO ENSURE THE MONTH AND DAY COMPONENTS ARE  *\n058700* CORRECT AS ENTERED.                                            *\n058800* ************************************************************** *\n058900\n059000     IF DATE-VALID\n059100         IF (DATE-M GREATER THAN 0) AND\n059200            (DATE-M LESS THAN 13)\n059300             MOVE DATE-M TO SUB1\n059400             IF (DATE-D GREATER THAN 0) AND\n059500                (DATE-D NOT GREATER THAN DAYS-IN-MONTH (SUB1))\n059600                 CONTINUE\n059700             ELSE\n059800                 SET DATE-INVALID TO TRUE\n059900             END-IF\n060000         ELSE\n060100             SET DATE-INVALID TO TRUE\n060200         END-IF\n060300     END-IF.\n060400\n060500 END PROGRAM GETPARM.\n060600\n060700 END PROGRAM ELAPSED.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ELAPSEXE": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04\\x04o\\x01\\x04\\x04o\\x125\\t\\xb8\\t\\xb8\\x00\\x00\\xd4\\xe2\\xc4\\xd6\\xe2\\xd7\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-15T00:00:00", "modifydate": "2004-02-15T12:35:37", "lines": 2488, "newlines": 2488, "modlines": 0, "user": "MSDOSPG"}, "mimetype": "application/x-dosexec", "datatype": "binary", "extension": ".x-dosexec"}, "EYEC": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "MOSELEY"}, "text": "         MACRO\n         EYEC  &DESC\nEC$$B    B     EC$$L(,R15)             BRANCH AROUND EYECATCHER\n         DC    AL1(EC$$E-EC$$V)        LENGTH OF VERSION INFO\nEC$$V    DC    C'&SYSECT '             CSECT NAME\n         DC    C'&SYSDATE &SYSTIME - '  WHEN ASSEMBLED\n         AIF   (T'&DESC EQ 'O').NODESC\n         DC    C&DESC\n.NODESC  ANOP\nEC$$E    DS    0H\nEC$$L    EQU   (*-EC$$B)               LENGTH OF EYECATCHER FIELDS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RUNDATES": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04o\\x01\\x04\\x04o\\x12\\x00\\x02\\xf9\\x02\\xf9\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-15T00:00:00", "modifydate": "2004-02-15T12:00:00", "lines": 761, "newlines": 761, "modlines": 0, "user": "MOSELEY"}, "text": "000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID. RUNDATES.\n000300*\n000400*  AUTHOR. JAY MOSELEY\n000500*  DATE-WRITTEN. NOVEMBER, 1998.\n000600*\n000700* ************************************************************* *\n000800* THIS PROGRAM USES THE SYSTEM DATE AND A SET OF RULES FOR      *\n000900* DETERMINING NON-WORKING HOLIDAYS TO RETURN A SET OF WORKING   *\n001000* DATES (CURRENT, PREVIOUS, AND NEXT) TO THE CALLING PROGRAM.   *\n001100* ************************************************************* *\n001200\n001300 ENVIRONMENT DIVISION.\n001400 INPUT-OUTPUT SECTION.\n001500 FILE-CONTROL.\n001600     SELECT FD1-HOLIDAY-RULES\n001700         ASSIGN TO 'HOLIDATE.RUL'\n001800         ORGANIZATION IS LINE SEQUENTIAL.\n001900\n002000 DATA DIVISION.\n002100 FILE SECTION.\n002200 FD  FD1-HOLIDAY-RULES\n002300     RECORD CONTAINS 80 CHARACTERS.\n002400 01  RD1-HOLIDAY-RULES.\n002500     03  RD1-ORDINAL-MONTH       PIC 9(02).\n002600     03                          REDEFINES RD1-ORDINAL-MONTH.\n002700         05  RD1-COMMENT-FLAG    PIC X(01).\n002800             88  RD1-COMMENT                 VALUE '*'.\n002900         05                      PIC X(01).\n003000     03  RD1-ORDINAL-DAY         PIC 9(02).\n003100     03  RD1-WEEKDAY             PIC X(02).\n003200         88  RD1-MONDAY                      VALUE 'MO'.\n003300         88  RD1-TUESDAY                     VALUE 'TU'.\n003400         88  RD1-WEDNESDAY                   VALUE 'WE'.\n003500         88  RD1-THURSDAY                    VALUE 'TH'.\n003600         88  RD1-FRIDAY                      VALUE 'FR'.\n003700         88  RD1-SATURDAY                    VALUE 'SA'.\n003800         88  RD1-SUNDAY                      VALUE 'SU'.\n003900     03  RD1-WEEKEND-ADJUST-FLAG PIC 9(01).\n004000         88  RD1-NO-WEEKEND-ADJUST           VALUE 0.\n004100         88  RD1-WEEKEND-ADJUST-BACKWARD     VALUE 1.\n004200         88  RD1-WEEKEND-ADJUST-FORWARD      VALUE 2.\n004400     03  RD1-HOLIDAY-NAME        PIC X(50).\n004500     03                          PIC X(23).\n004600\n004610 01  RD1-WORK-WEEK.\n004620     03  RD1-WORK-WEEK-KEY       PIC 9(04).\n004630     03  RD1-WORK-WEEK-TABLE     PIC X(07).\n004640     03                          PIC X(69).\n004650\n004700 WORKING-STORAGE SECTION.\n004800 01  WS-MISC-STORAGE.\n004900     03  END-OF-FILE-SWITCH      PIC X(01)   VALUE 'N'.\n005000         88  END-OF-FILE                     VALUE 'Y'.\n005010\n005100     03  WORK-GREG-DATE          PIC 9(08).\n005200     03                          REDEFINES WORK-GREG-DATE.\n005300         05  WORK-GREG-M         PIC 9(02).\n005400         05  WORK-GREG-D         PIC 9(02).\n005500         05  WORK-GREG-Y         PIC 9(04).\n005510\n005600     03  DATE-TEST-FLAG          PIC 9(01).\n005700         88  VALID-WORKING-DATE              VALUE 0.\n005800         88  DATE-IS-WEEKEND                 VALUE 1.\n005900         88  DATE-IS-HOLIDAY                 VALUE 2.\n006000\n006010     03  WORK-WEEK-TABLE                     VALUE 'YYYYYNN'.\n006020         05  WORK-WEEK-FLAG      OCCURS 7 TIMES\n006030                                 INDEXED BY WORK-WEEK-IX\n006040                                 PIC X(01).\n006041             88  NON-WORKING-WEEKDAY         VALUE 'N'.\n006042             88  WORKING-WEEKDAY             VALUE 'Y'.\n006050\n006100* ************************************************************* *\n006200* THE TABLE OF OBSERVED HOLIDAYS IS BUILT FROM RULES READ FROM  *\n006300* FD1-HOLIDAY-RULES. RULES MAY BE ADDED WITHOUT RECOMPILING THE *\n006400* PROGRAM AS LONG AS THE NUMBER OF HOLIDAYS GENERATED DOES NOT  *\n006500* EXCEED THE CAPACITY OF THIS TABLE.                            *\n006600* ************************************************************* *\n006700 01  OBSERVED-HOLIDAY-AREA.\n006800     03  HOLIDAY-TABLE-CAPACITY  PIC S9(4)   COMP.\n006900     03  HOLIDAY-TABLE-MAXIMUM   PIC S9(4)   COMP.\n007000     03  HOLIDAY-TABLE.\n007100         05  HOLIDAY-DATE        OCCURS 50 TIMES\n007200                                 INDEXED BY HOLIDAY-IX\n007300                                 PIC 9(08).\n007400\n007500 01  DATE-ROUTINE-PARAMETER-BLOCKS.\n007600* ************************************************************* *\n007700* PARAMETER AREA FOR Y2KATOG.                                   *\n007800* ************************************************************* *\n007900     02  ATOG-PARAMETERS.\n008000         03  ATOGP-ANUM          PIC S9(07).\n008100         03  ATOGP-RETURN-CODE   PIC 9(01).\n008200         03  ATOGP-DATE-G        PIC 9(08).\n008300         03                      REDEFINES ATOGP-DATE-G.\n008400              04  ATOGP-DATE-G-M PIC 9(02).\n008500              04  ATOGP-DATE-G-D PIC 9(02).\n008600              04  ATOGP-DATE-G-Y PIC 9(04).\n008700\n008800* ************************************************************* *\n008900* PARAMETER AREA FOR Y2KDOWN.                                   *\n009000* ************************************************************* *\n009100     02  DOWN-PARAMETERS.\n009200         03  DOWNP-DATE-G        PIC 9(8).\n009300         03  DOWNP-RETURN-CODE   PIC 9(1).\n009400         03  DOWNP-DAYNUMBER     PIC 9(1).\n009500\n009600* ************************************************************* *\n009700* PARAMETER AREA FOR Y2KESTR.                                   *\n009800* ************************************************************* *\n009801     02  ESTR-PARAMETERS.\n009802         03  ESTRP-YEAR          PIC 9(04).\n009803         03  ESTRP-RETURN-CODE   PIC X(01).\n009804         03  ESTRP-DATE-G        PIC 9(08).\n009805         03                      REDEFINES ESTRP-DATE-G.\n009806             04  ESTRP-DATE-G-M  PIC 9(02).\n009807             04  ESTRP-DATE-G-D  PIC 9(02).\n009808             04  ESTRP-DATE-G-Y  PIC 9(04).\n009810\n009820* ************************************************************* *\n009830* PARAMETER AREA FOR Y2KGETD.                                   *\n009840* ************************************************************* *\n009900     02  GETD-PARAMETERS.\n010000         03  GETDP-DATE-G        PIC 9(08).\n010100         03                      REDEFINES GETDP-DATE-G.\n010200             04  GETDP-DATE-G-M  PIC 9(02).\n010300             04  GETDP-DATE-G-D  PIC 9(02).\n010400             04  GETDP-DATE-G-Y  PIC 9(04).\n010500         03  GETDP-DATE-J        PIC 9(07).\n010600         03  GETDP-ANUM          PIC S9(07).\n010700\n010800* ************************************************************* *\n010900* PARAMETER AREA FOR Y2KGTOA.                                   *\n011000* ************************************************************* *\n011100     02  GTOA-PARAMETERS.\n011200         03  GTOAP-DATE-G        PIC 9(08).\n011300         03                      REDEFINES GTOAP-DATE-G.\n011400             04  GTOAP-DATE-G-M  PIC 9(02).\n011500             04  GTOAP-DATE-G-D  PIC 9(02).\n011600             04  GTOAP-DATE-G-Y  PIC 9(04).\n011700         03  GTOAP-RETURN-CODE   PIC 9(01).\n011800         03  GTOAP-ANUM          PIC S9(07).\n011900\n012000* ************************************************************* *\n012100* PARAMETER AREA FOR Y2KGTOJ.                                   *\n012200* ************************************************************* *\n012300     02  GTOJ-PARAMETERS.\n012400         03  GTOJP-DATE-G        PIC 9(08).\n012500         03  GTOJP-RETURN-CODE   PIC 9(01).\n012600         03  GTOJP-DATE-J        PIC 9(07).\n012700         03                      REDEFINES GTOJP-DATE-J.\n012800             04  GTOJP-DATE-J-Y  PIC 9(04).\n012900             04  GTOJP-DATE-J-D  PIC 9(03).\n013000\n013100* ************************************************************* *\n013200* PARAMETER AREA FOR Y2KPROJ.                                   *\n013300* ************************************************************* *\n013400     02  PROJ-PARAMETERS.\n013500         03  PROJP-DATE-O        PIC 9(08).\n013600         03                      REDEFINES PROJP-DATE-O.\n013700             04  PROJP-DATE-O-M  PIC 9(02).\n013800             04  PROJP-DATE-O-D  PIC 9(02).\n013900             04  PROJP-DATE-O-Y  PIC 9(04).\n014000         03  PROJP-INCR          PIC S9(06).\n014100         03  PROJP-RETURN-CODE   PIC 9(01).\n014200         03  PROJP-DATE-N        PIC 9(08).\n014300         03                      REDEFINES PROJP-DATE-N.\n014400             04  PROJP-DATE-N-M  PIC 9(02).\n014500             04  PROJP-DATE-N-D  PIC 9(02).\n014600             04  PROJP-DATE-N-Y  PIC 9(04).\n014700\n014800* ************************************************************* *\n014900* PARAMETER AREA FOR Y2KSAGE.                                   *\n015000* ************************************************************* *\n015100     02  SAGE-PARAMETERS.\n015200         03  SAGEP-DATE-1        PIC 9(08).\n015300         03  SAGEP-DATE-2        PIC 9(08).\n015400         03  SAGEP-RETURN-CODE   PIC 9(01).\n015500         03  SAGEP-DAYS          PIC S9(07).\n015600\n015700* ************************************************************* *\n015800* PARAMETER AREA FOR Y2KTDOW.                                   *\n015900* ************************************************************* *\n016000     02  TDOW-PARAMETERS.\n016100         03  TDOWP-DATE-O        PIC 9(08).\n016200         03                      REDEFINES TDOWP-DATE-O.\n016300             04  TDOWP-DATE-O-M  PIC 9(02).\n016400             04  TDOWP-DATE-O-D  PIC 9(02).\n016500             04  TDOWP-DATE-O-Y  PIC 9(04).\n016600         03  TDOWP-NORP          PIC X(01).\n016700         03  TDOWP-DAYNUMBER     PIC 9(01).\n016800         03  TDOWP-RETURN-CODE   PIC 9(01).\n016900         03  TDOWP-DATE-N        PIC 9(08).\n017000         03                      REDEFINES TDOWP-DATE-N.\n017100             04  TDOWP-DATE-N-M  PIC 9(02).\n017200             04  TDOWP-DATE-N-D  PIC 9(02).\n017300             04  TDOWP-DATE-N-Y  PIC 9(04).\n017400\n017500 LINKAGE SECTION.\n017600     COPY 'RUNDCOPY'.\n017700\n017800 PROCEDURE DIVISION USING RUN-DATES-RECORD.\n017900\n018000 0000-PROCESS.\n018100* ************************************************************* *\n018200* 1. RETRIEVE SYSTEM DATE.                                      *\n018300* 2. READ HOLIDAY RULES FILE AND CREATE TABLE OF HOLIDAYS.      *\n018400* 3. TEST SYSTEM DATE FOR VALID WORKING DAY.                    *\n018500* 4. BUILD THIS DATE INFORMATION FOR CURRENT SYSTEM DATE.       *\n018600* 5. DETERMINE PRIOR DATE BACKWARD FROM 'THIS' DATE.            *\n018700* 6. DETERMINE NEXT DATE FORWARD FROM 'THIS' DATE.              *\n018800* 7. SET INDICATOR FLAGS FOR 'THIS' DATE.                       *\n018900* ************************************************************* *\n019000\n019100     CALL 'Y2KGETD' USING GETD-PARAMETERS.\n019200\n019300     PERFORM 1000-ESTABLISH-HOLIDAY-TABLE.\n019400\n019410     PERFORM VARYING HOLIDAY-IX\n019420             FROM +1 BY +1\n019421             UNTIL HOLIDAY-IX GREATER THAN HOLIDAY-TABLE-MAXIMUM\n019422         DISPLAY 'HOLIDAY DATE: '\n019430                 HOLIDAY-DATE (HOLIDAY-IX)\n019440     END-PERFORM.\n019450\n019500     MOVE GETDP-DATE-G TO WORK-GREG-DATE.\n019600     PERFORM 0100-TEST-DATE.\n019700     IF VALID-WORKING-DATE\n019800         PERFORM 2000-BUILD-THIS-DATE\n019900         PERFORM 3000-BUILD-PREV-DATE\n020000         PERFORM 4000-BUILD-NEXT-DATE\n020100         PERFORM 5000-FINISH-THIS\n020200     ELSE\n020300         DISPLAY 'RUNDATES: CURRENT SYSTEM DATE NOT VALID'\n020400         MOVE +8 TO RETURN-CODE\n020500     END-IF.\n020600\n020700     GOBACK.\n020800* - - - - - - - - - - - - - - - - PROGRAM EXIT POINT\n020900\n021000 0100-TEST-DATE.\n021100* ************************************************************* *\n021200* CHECK THE DATE IN WORK-GREG-DATE FOR FALLING ON A NON-WORKING *\n021300* WEEKDAY OR ON A HOLIDAY DATE.                                 *\n021400* ************************************************************* *\n021500     SET VALID-WORKING-DATE TO TRUE.\n021600\n021700     MOVE WORK-GREG-DATE TO DOWNP-DATE-G.\n021800     CALL 'Y2KDOWN' USING DOWN-PARAMETERS.\n021900     IF DOWNP-RETURN-CODE NOT EQUAL ZERO\n022000         DISPLAY 'RUNDATES: ERROR CALLING Y2KDOWN'\n022100         MOVE +16 TO RETURN-CODE\n022200         GOBACK\n022300     END-IF.\n022301     ADD 1 TO DOWNP-DAYNUMBER.\n022310     SET WORK-WEEK-IX TO DOWNP-DAYNUMBER.\n022311     SUBTRACT 1 FROM DOWNP-DAYNUMBER.\n022320     IF NON-WORKING-WEEKDAY (WORK-WEEK-IX)\n022500         SET DATE-IS-WEEKEND TO TRUE\n022600     END-IF.\n022700\n022800     IF VALID-WORKING-DATE\n022900         PERFORM VARYING HOLIDAY-IX\n023000                 FROM +1 BY +1\n023100                 UNTIL HOLIDAY-IX GREATER THAN\n023200                                  HOLIDAY-TABLE-MAXIMUM\n023210                 OR DATE-IS-HOLIDAY\n023300             IF WORK-GREG-DATE EQUAL HOLIDAY-DATE (HOLIDAY-IX)\n023400                 SET DATE-IS-HOLIDAY TO TRUE\n023600             END-IF\n023700         END-PERFORM\n023800     END-IF.\n023900* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n024000\n024110 1000-ESTABLISH-HOLIDAY-TABLE.\n024200* ************************************************************* *\n024300* FOR EACH HOLIDAY RULE RECORD, COMPUTE THE HOLIDAY DATE FOR    *\n024400* THE CURRENT YEAR AND INSERT INTO THE HOLIDAY DATE TABLE.      *\n024500* ************************************************************* *\n024600     COMPUTE HOLIDAY-TABLE-CAPACITY =\n024700         FUNCTION LENGTH(HOLIDAY-TABLE) /\n024800         FUNCTION LENGTH(HOLIDAY-DATE).\n024900\n025000     SET HOLIDAY-IX TO +1.\n025100\n025200     OPEN INPUT FD1-HOLIDAY-RULES.\n025300\n025400     PERFORM 1100-READ-HOLIDAY-RULE.\n025500\n025600     PERFORM 1200-PROCESS-HOLIDAY-RULE\n025700         UNTIL END-OF-FILE.\n025800\n025900     CLOSE FD1-HOLIDAY-RULES.\n026000* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n026100\n026200 1100-READ-HOLIDAY-RULE.\n026300     READ FD1-HOLIDAY-RULES\n026400         AT END\n026500             SET END-OF-FILE TO TRUE\n026600     END-READ.\n026700* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n026800\n026900 1200-PROCESS-HOLIDAY-RULE.\n027000* ************************************************************* *\n027100* FOR EACH NON-COMMENT HOLIDAY RULE RECORD, COMPUTE THE HOLIDAY *\n027200* DATE FOR THE CURRENT YEAR. IF THE CURRENT MONTH IS 12 AND THE *\n027300* HOLIDAY RULE IS FOR MONTH 1 (OR IF CURRENT MONTH IS 1 AND THE *\n027400* HOLIDAY RULE IS FOR MONTH 12) COMPUTE THE HOLIDAY DATE FOR    *\n027500* THE NEXT (OR PREVIOUS) YEAR AS WELL.                          *\n027600* ************************************************************* *\n027700     IF NOT RD1-COMMENT\n027710         IF RD1-WORK-WEEK-KEY EQUAL '0000'\n027720             MOVE RD1-WORK-WEEK-TABLE TO WORK-WEEK-TABLE\n027730         ELSE\n027800             PERFORM 1300-BUILD-HOLIDAY\n027900             EVALUATE GETDP-DATE-G-M ALSO RD1-ORDINAL-MONTH\n028000                 WHEN 12 ALSO 1\n028100                     ADD 1 TO GETDP-DATE-G-Y\n028200                     PERFORM 1300-BUILD-HOLIDAY\n028300                     SUBTRACT 1 FROM GETDP-DATE-G-Y\n028400                 WHEN 1 ALSO 12\n028500                     SUBTRACT 1 FROM GETDP-DATE-G-Y\n028600                     PERFORM 1300-BUILD-HOLIDAY\n028700                     ADD 1 TO GETDP-DATE-G-Y\n028800             END-EVALUATE\n028900         END-IF\n028910     END-IF.\n029000\n029100     PERFORM 1100-READ-HOLIDAY-RULE.\n029200* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n029300\n029400 1300-BUILD-HOLIDAY.\n029500* ************************************************************* *\n029600* IF THE HOLIDAY TABLE IS FULL, DISPLAY A MESSAGE AND SET THE   *\n029700* RETURN CODE TO 16. OTHERWISE, DERIVE THE HOLIDAY DATE FOR THE *\n029800* CURRENT YEAR VALUE AND INSERT INTO THE HOLIDAY TABLE.         *\n029900* ************************************************************* *\n030000     IF HOLIDAY-TABLE-MAXIMUM EQUAL HOLIDAY-TABLE-CAPACITY\n030100         DISPLAY 'RUNDATES: HOLIDAY TABLE CAPACITY EXCEEDED'\n030200         MOVE +16 TO RETURN-CODE\n030300         GOBACK\n030400     END-IF.\n030500\n030600     IF RD1-WEEKDAY EQUAL SPACES\n030610         IF RD1-ORDINAL-MONTH EQUAL 99\n030630             PERFORM 6000-PROGRAMMED-HOLIDAY\n030640         ELSE\n030700            MOVE RD1-ORDINAL-MONTH TO WORK-GREG-M\n030800            MOVE RD1-ORDINAL-DAY TO WORK-GREG-D\n030900            MOVE GETDP-DATE-G-Y TO WORK-GREG-Y\n030910         END-IF\n031000     ELSE\n031100         PERFORM 1400-DERIVE-HOLIDAY\n031200     END-IF.\n031300\n031400     PERFORM 1500-CHECK-FOR-WEEKEND.\n031500\n031600     MOVE WORK-GREG-DATE TO HOLIDAY-DATE (HOLIDAY-IX).\n031700     SET HOLIDAY-TABLE-MAXIMUM TO HOLIDAY-IX.\n031800     SET HOLIDAY-IX UP BY +1.\n031900* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n032000\n032100 1400-DERIVE-HOLIDAY.\n032200* ************************************************************* *\n032300* USING THE HOLIDAY RULES RECORD ENTRIES, CALL DATE ROUTINES TO *\n032400* ESTABLISH THE PROPER HOLIDAY DATE.                            *\n032500* ************************************************************* *\n032600     MOVE RD1-ORDINAL-MONTH TO TDOWP-DATE-O-M.\n032700     MOVE 1                 TO TDOWP-DATE-O-D.\n032800     MOVE GETDP-DATE-G-Y    TO TDOWP-DATE-O-Y.\n032900\n033000     IF RD1-ORDINAL-DAY EQUAL 99\n033100         ADD 1 TO TDOWP-DATE-O-M\n033200         MOVE 'P' TO TDOWP-NORP\n033300     ELSE\n033400         MOVE 'N' TO TDOWP-NORP\n033500     END-IF.\n033600\n033700     EVALUATE TRUE\n033800         WHEN RD1-MONDAY\n033900             MOVE 0 TO TDOWP-DAYNUMBER\n034000         WHEN RD1-TUESDAY\n034100             MOVE 1 TO TDOWP-DAYNUMBER\n034200         WHEN RD1-WEDNESDAY\n034300             MOVE 2 TO TDOWP-DAYNUMBER\n034400         WHEN RD1-THURSDAY\n034500             MOVE 3 TO TDOWP-DAYNUMBER\n034600         WHEN RD1-FRIDAY\n034700             MOVE 4 TO TDOWP-DAYNUMBER\n034800         WHEN RD1-SATURDAY\n034900             MOVE 5 TO TDOWP-DAYNUMBER\n035000         WHEN RD1-SUNDAY\n035100             MOVE 6 TO TDOWP-DAYNUMBER\n035200     END-EVALUATE.\n035300\n035400     CALL 'Y2KTDOW' USING TDOW-PARAMETERS.\n035500     IF TDOWP-RETURN-CODE NOT EQUAL ZERO\n035600         DISPLAY 'RUNDATES: ERROR CALLING Y2KTDOW'\n035700         MOVE +16 TO RETURN-CODE\n035800         GOBACK\n035900     END-IF.\n036000\n036100     IF RD1-ORDINAL-DAY NOT EQUAL 99\n036200         MOVE TDOWP-DATE-N TO PROJP-DATE-O\n036300         COMPUTE PROJP-INCR = (RD1-ORDINAL-DAY - 1) * 7\n036400         CALL 'Y2KPROJ' USING PROJ-PARAMETERS\n036500         IF PROJP-RETURN-CODE NOT EQUAL ZERO\n036600             DISPLAY 'RUNDATES: ERROR CALLING Y2KPROJ'\n036700             MOVE +16 TO RETURN-CODE\n036800             GOBACK\n036900         END-IF\n037000         MOVE PROJP-DATE-N TO WORK-GREG-DATE\n037100     ELSE\n037200         MOVE TDOWP-DATE-N TO WORK-GREG-DATE\n037300     END-IF.\n037400* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n037500\n037600 1500-CHECK-FOR-WEEKEND.\n037700* ************************************************************* *\n037800* IF HOLIDAY RULE SPECIFIES HOLIDAYS FALLING ON WEEKENDS MOVE   *\n037900* FORWARD OR BACK TO NEXT WORKING DAY AND DERIVED HOLIDAY DATE  *\n038000* FALLS ON A WEEKEND, ADJUST TO PROPER DAY (FORWARD OR BACK).   *\n038100* ************************************************************* *\n038200     IF RD1-NO-WEEKEND-ADJUST\n038300         CONTINUE\n038400     ELSE\n038420         PERFORM WITH TEST AFTER\n038430                 UNTIL WORKING-WEEKDAY (WORK-WEEK-IX)\n038500             MOVE WORK-GREG-DATE TO DOWNP-DATE-G\n038600             CALL 'Y2KDOWN' USING DOWN-PARAMETERS\n038700             IF DOWNP-RETURN-CODE NOT EQUAL ZERO\n038800                 DISPLAY 'RUNDATES: ERROR CALLING Y2KDOWN'\n038900                 MOVE +16 TO RETURN-CODE\n039000                 GOBACK\n039100             END-IF\n039101             ADD 1 TO DOWNP-DAYNUMBER\n039110             SET WORK-WEEK-IX TO DOWNP-DAYNUMBER\n039120             IF NON-WORKING-WEEKDAY (WORK-WEEK-IX)\n039121                 MOVE WORK-GREG-DATE TO PROJP-DATE-O\n039130                 IF RD1-WEEKEND-ADJUST-BACKWARD\n039140                     MOVE -1 TO PROJP-INCR\n039150                 ELSE\n039160                     MOVE +1 TO PROJP-INCR\n039170                 END-IF\n040300                 CALL 'Y2KPROJ' USING PROJ-PARAMETERS\n040400                 IF PROJP-RETURN-CODE NOT EQUAL ZERO\n040500                     DISPLAY 'RUNDATES: ERROR CALLING Y2KPROJ'\n040600                     MOVE +16 TO RETURN-CODE\n040700                     GOBACK\n040800                 END-IF\n040900                 MOVE PROJP-DATE-N TO WORK-GREG-DATE\n040910             END-IF\n041000         END-PERFORM\n041100     END-IF.\n041200* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n041300\n041400 2000-BUILD-THIS-DATE.\n041500* ************************************************************* *\n041600* FORMAT 'THIS' DATE AREA IN CALLERS STORAGE USING THE SYSTEM   *\n041700* CURRENT DATE AND CALLS TO DATE ROUTINES.                      *\n041800* ************************************************************* *\n042200     MOVE GETDP-DATE-G TO THIS-DATE-GREGORIAN.\n042300     MOVE GETDP-DATE-J TO THIS-DATE-JULIAN.\n042400     MOVE GETDP-ANUM TO THIS-DATE-ASTRO.\n042500\n042600* ************************************************************* *\n042700* NOTE: SINCE Y2KDOWN WAS LAST CALLED WITH THE DATE WE ARE NOW  *\n042710* PROCESSING (FROM 0000-PROCESS -> 0100-TEST-DATE) WE CAN JUST  *\n042720* UTILIZE THE PARAMETER RETURN AREA WITHOUT AN ADDITIONAL CALL. *\n042800* ************************************************************* *\n043300     MOVE DOWNP-DAYNUMBER TO THIS-DATE-DAYNUMBER.\n043400     EVALUATE DOWNP-DAYNUMBER\n043500         WHEN 0\n043600             MOVE 'MONDAY' TO THIS-DATE-DAYNAME\n043700         WHEN 1\n043800             MOVE 'TUESDAY' TO THIS-DATE-DAYNAME\n043900         WHEN 2\n044000             MOVE 'WEDNESDAY' TO THIS-DATE-DAYNAME\n044100         WHEN 3\n044200             MOVE 'THURSDAY' TO THIS-DATE-DAYNAME\n044300         WHEN 4\n044400             MOVE 'FRIDAY' TO THIS-DATE-DAYNAME\n044500         WHEN 5\n044600             MOVE 'SATURDAY' TO THIS-DATE-DAYNAME\n044700         WHEN 6\n044800             MOVE 'SUNDAY' TO THIS-DATE-DAYNAME\n044900     END-EVALUATE.\n045000\n045100     MOVE ALL 'N' TO THIS-DATE-FLAGS.\n045500* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n045600\n045700 3000-BUILD-PREV-DATE.\n045800* ************************************************************* *\n045900* FORMAT 'PREV' DATE AREA IN CALLERS STORAGE BY SEARCHING BACK  *\n046000* TO THE FIRST PRIOR WORKING DATE.                              *\n046100* ************************************************************* *\n046500     MOVE THIS-DATE-GREGORIAN TO WORK-GREG-DATE.\n046700\n046820     PERFORM WITH TEST AFTER UNTIL VALID-WORKING-DATE\n046825         MOVE WORK-GREG-DATE TO PROJP-DATE-O\n046826         MOVE -1 TO PROJP-INCR\n046830         CALL 'Y2KPROJ' USING PROJ-PARAMETERS\n046840         IF PROJP-RETURN-CODE NOT EQUAL ZERO\n046850             DISPLAY 'RUNDATES: ERROR CALLING Y2KPROJ'\n046860             MOVE +16 TO RETURN-CODE\n046870             GOBACK\n046880         END-IF\n046890         MOVE PROJP-DATE-N TO WORK-GREG-DATE\n047000         PERFORM 0100-TEST-DATE\n047100     END-PERFORM.\n047200\n048300     MOVE WORK-GREG-DATE TO PREV-DATE-GREGORIAN,\n048400                            GTOJP-DATE-G\n048500                            GTOAP-DATE-G.\n048600\n048700     CALL 'Y2KGTOJ' USING GTOJ-PARAMETERS.\n048800     IF GTOJP-RETURN-CODE NOT EQUAL ZERO\n048900         DISPLAY 'RUNDATES: ERROR CALLING Y2KGTOJ'\n049000         MOVE +16 TO RETURN-CODE\n049100         GOBACK\n049200     END-IF.\n049300     MOVE GTOJP-DATE-J TO PREV-DATE-JULIAN.\n049400\n049500     CALL 'Y2KGTOA' USING GTOA-PARAMETERS.\n049600     IF GTOAP-RETURN-CODE NOT EQUAL ZERO\n049700         DISPLAY 'RUNDATES: ERROR CALLING Y2KGTOA'\n049800         MOVE +16 TO RETURN-CODE\n049900         GOBACK\n050000     END-IF.\n050100     MOVE GTOAP-ANUM TO PREV-DATE-ASTRO.\n050200\n050300* ************************************************************* *\n050400* NOTE: SINCE Y2KDOWN WAS LAST CALLED WITH THE DATE WE ARE NOW  *\n050500* PROCESSING (FROM 0100-TEST-DATE ABOVE) WE CAN JUST UTILIZE    *\n050600* THE PARAMETER RETURN AREA WITHOUT AN ADDITIONAL CALL.         *\n050700* ************************************************************* *\n051000     MOVE DOWNP-DAYNUMBER TO PREV-DATE-DAYNUMBER.\n051100     EVALUATE DOWNP-DAYNUMBER\n051200         WHEN 0\n051300             MOVE 'MONDAY' TO PREV-DATE-DAYNAME\n051400         WHEN 1\n051500             MOVE 'TUESDAY' TO PREV-DATE-DAYNAME\n051600         WHEN 2\n051700             MOVE 'WEDNESDAY' TO PREV-DATE-DAYNAME\n051800         WHEN 3\n051900             MOVE 'THURSDAY' TO PREV-DATE-DAYNAME\n052000         WHEN 4\n052100             MOVE 'FRIDAY' TO PREV-DATE-DAYNAME\n052200         WHEN 5\n052300             MOVE 'SATURDAY' TO PREV-DATE-DAYNAME\n052400         WHEN 6\n052500             MOVE 'SUNDAY' TO PREV-DATE-DAYNAME\n052600     END-EVALUATE.\n053000* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n053100\n053200 4000-BUILD-NEXT-DATE.\n053600* ************************************************************* *\n053700* FORMAT 'NEXT' DATE AREA IN CALLERS STORAGE BY SEARCHING       *\n053800* FORWARD TO THE FIRST WORKING DATE.                            *\n053900* ************************************************************* *\n054000     MOVE THIS-DATE-GREGORIAN TO PROJP-DATE-O.\n054100     MOVE +1 TO PROJP-INCR.\n054200\n054300     PERFORM WITH TEST AFTER UNTIL VALID-WORKING-DATE\n054400         CALL 'Y2KPROJ' USING PROJ-PARAMETERS\n054500         IF PROJP-RETURN-CODE NOT EQUAL ZERO\n054600             DISPLAY 'RUNDATES: ERROR CALLING Y2KPROJ'\n054700             MOVE +16 TO RETURN-CODE\n054800             GOBACK\n054900         END-IF\n055000         MOVE PROJP-DATE-N TO WORK-GREG-DATE,\n055100                              PROJP-DATE-O\n055200         PERFORM 0100-TEST-DATE\n055300     END-PERFORM.\n055400\n055500     MOVE WORK-GREG-DATE TO NEXT-DATE-GREGORIAN,\n055600                            GTOJP-DATE-G\n055700                            GTOAP-DATE-G.\n055800\n055900     CALL 'Y2KGTOJ' USING GTOJ-PARAMETERS.\n056000     IF GTOJP-RETURN-CODE NOT EQUAL ZERO\n056100         DISPLAY 'RUNDATES: ERROR CALLING Y2KGTOJ'\n056200         MOVE +16 TO RETURN-CODE\n056300         GOBACK\n056400     END-IF.\n056500     MOVE GTOJP-DATE-J TO NEXT-DATE-JULIAN.\n056600\n056700     CALL 'Y2KGTOA' USING GTOA-PARAMETERS.\n056800     IF GTOAP-RETURN-CODE NOT EQUAL ZERO\n056900         DISPLAY 'RUNDATES: ERROR CALLING Y2KGTOA'\n057000         MOVE +16 TO RETURN-CODE\n057100         GOBACK\n057200     END-IF.\n057300     MOVE GTOAP-ANUM TO NEXT-DATE-ASTRO.\n057400\n057500* ************************************************************* *\n057600* NOTE: SINCE Y2KDOWN WAS LAST CALLED WITH THE DATE WE ARE NOW  *\n057700* PROCESSING (FROM 0100-TEST-DATE ABOVE) WE CAN JUST UTILIZE    *\n057800* THE PARAMETER RETURN AREA WITHOUT AN ADDITIONAL CALL.         *\n057900* ************************************************************* *\n058200     MOVE DOWNP-DAYNUMBER TO NEXT-DATE-DAYNUMBER.\n058300     EVALUATE DOWNP-DAYNUMBER\n058400         WHEN 0\n058500             MOVE 'MONDAY' TO NEXT-DATE-DAYNAME\n058600         WHEN 1\n058700             MOVE 'TUESDAY' TO NEXT-DATE-DAYNAME\n058800         WHEN 2\n058900             MOVE 'WEDNESDAY' TO NEXT-DATE-DAYNAME\n059000         WHEN 3\n059100             MOVE 'THURSDAY' TO NEXT-DATE-DAYNAME\n059200         WHEN 4\n059300             MOVE 'FRIDAY' TO NEXT-DATE-DAYNAME\n059400         WHEN 5\n059500             MOVE 'SATURDAY' TO NEXT-DATE-DAYNAME\n059600         WHEN 6\n059700             MOVE 'SUNDAY' TO NEXT-DATE-DAYNAME\n059800     END-EVALUATE.\n060200* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n060300\n060400 5000-FINISH-THIS.\n060500* ************************************************************* *\n060600* COMPUTE NUMBER OF DAYS BETWEEN 'THIS' AND 'NEXT' DATES,       *\n060700* BETWEEN 'THIS' AND 'PREV' DATES, AND SET FLAGS FOR 'THIS'     *\n060800* DATE.                                                         *\n060900* ************************************************************* *\n061300     MOVE THIS-DATE-GREGORIAN TO SAGEP-DATE-1.\n061400     MOVE PREV-DATE-GREGORIAN TO SAGEP-DATE-2.\n061500     CALL 'Y2KSAGE' USING SAGE-PARAMETERS.\n061600     IF SAGEP-RETURN-CODE NOT EQUAL ZERO\n061700         DISPLAY 'RUNDATES: ERROR CALLING Y2KSAGE'\n061800         MOVE +16 TO RETURN-CODE\n061900         GOBACK\n062000     END-IF.\n062100     MOVE SAGEP-DAYS TO DAYS-UNTIL-THIS.\n062200\n062300     MOVE NEXT-DATE-GREGORIAN TO SAGEP-DATE-2.\n062400     CALL 'Y2KSAGE' USING SAGE-PARAMETERS.\n062500     IF SAGEP-RETURN-CODE NOT EQUAL ZERO\n062600         DISPLAY 'RUNDATES: ERROR CALLING Y2KSAGE'\n062700         MOVE +16 TO RETURN-CODE\n062800         GOBACK\n062900     END-IF.\n063000     MOVE SAGEP-DAYS TO DAYS-SINCE-THIS.\n063100\n063200     IF THIS-DATE-DAYNUMBER IS LESS THAN PREV-DATE-DAYNUMBER\n063300         SET TODAY-IS-WEEK-BEGIN TO TRUE\n063400     END-IF.\n063500\n063600     IF NEXT-DATE-DAYNUMBER IS LESS THAN THIS-DATE-DAYNUMBER\n063700         SET TODAY-IS-WEEK-END TO TRUE\n063800     END-IF.\n063900\n064000     IF TDG-MONTH IS NOT EQUAL PDG-MONTH\n064100         SET TODAY-IS-MONTH-BEGIN TO TRUE\n064200     END-IF.\n064300\n064400     IF NDG-MONTH IS NOT EQUAL TDG-MONTH\n064500         SET TODAY-IS-MONTH-END TO TRUE\n064600     END-IF.\n064700\n064800     IF TODAY-IS-MONTH-BEGIN\n064900         IF TDG-MONTH IS EQUAL 1 OR 4 OR 7 OR 10\n065000             SET TODAY-IS-QUARTER-BEGIN TO TRUE\n065100         END-IF\n065200     END-IF.\n065300\n065400     IF TODAY-IS-MONTH-END\n065500         IF TDG-MONTH IS EQUAL 3 OR 6 OR 9 OR 12\n065600             SET TODAY-IS-QUARTER-END TO TRUE\n065700         END-IF\n065800     END-IF.\n065900\n066000     IF TDG-YEAR IS NOT EQUAL PDG-YEAR\n066100         SET TODAY-IS-YEAR-BEGIN TO TRUE\n066200     END-IF.\n066300\n066400     IF NDG-YEAR IS NOT EQUAL TDG-YEAR\n066500         SET TODAY-IS-YEAR-END TO TRUE\n066600     END-IF.\n067000* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n067100\n067101 6000-PROGRAMMED-HOLIDAY.\n067102* ************************************************************* *\n067103* A FEW HOLIDAYS (EG. EASTER) MUST BE DERIVED BY SPECIAL        *\n067104* COMPUTATIONS. THOSE HOLIDAYS ARE COMPUTED IN THIS SECTION.    *\n067107* ************************************************************* *\n067108     EVALUATE RD1-ORDINAL-DAY\n067109         WHEN 01\n067110             PERFORM 6100-EASTER\n067111         WHEN 02\n067112             PERFORM 6200-GOOD-FRIDAY\n067113         WHEN 03\n067114             PERFORM 6300-ELECTION-DAY\n067115         WHEN OTHER\n067116             DISPLAY 'RUNDATES: PROGRAMMED HOLIDAY CODING ERROR'\n067117             MOVE +16 TO RETURN-CODE\n067118             GOBACK\n067119     END-EVALUATE.\n067120* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n067121\n067122 6100-EASTER.\n067123* ************************************************************* *\n067124* CALL Y2KESTR TO DETERMINE EASTER SUNDAY DATE.                 *\n067125* ************************************************************* *\n067126     MOVE WORK-GREG-Y TO ESTRP-YEAR.\n067127     CALL 'Y2KESTR' USING ESTR-PARAMETERS.\n067128     IF ESTRP-RETURN-CODE NOT EQUAL ZERO\n067129         DISPLAY 'RUNDATES: ERROR CALLING Y2KESTR'\n067130         MOVE +16 TO RETURN-CODE\n067131         GOBACK\n067132     END-IF.\n067133     MOVE ESTRP-DATE-G TO WORK-GREG-DATE.\n067140* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n067150\n067170 6200-GOOD-FRIDAY.\n067180* ************************************************************* *\n067190* DETERMINE EASTER SUNDAY DATE THEN PROJECT BACK 2 DAYS TO GET  *\n067191* GOOD FRIDAY'S DATE.                                           *\n067192* ************************************************************* *\n067193     PERFORM 6100-EASTER.\n067194\n067195     MOVE WORK-GREG-DATE TO PROJP-DATE-O.\n067196     MOVE -2 TO PROJP-INCR.\n067197     CALL 'Y2KPROJ' USING PROJ-PARAMETERS.\n067198     IF PROJP-RETURN-CODE NOT EQUAL ZERO\n067199         DISPLAY 'RUNDATES: ERROR CALLING Y2KPROJ'\n067200         MOVE +16 TO RETURN-CODE\n067300         GOBACK\n067400     END-IF.\n067500     MOVE PROJP-DATE-N TO WORK-GREG-DATE.\n067510* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n067600\n067700 6300-ELECTION-DAY.\n067710* ************************************************************* *\n067720* ELECTION DAY IS THE 1ST TUESDAY FOLLOWING THE FIRST MONDAY IN *\n067730* NOVEMBER.                                                     *\n067740* ************************************************************* *\n067800     MOVE 10310000 TO TDOWP-DATE-O.\n067801     MOVE WORK-GREG-Y TO TDOWP-DATE-O-Y.\n067802     MOVE 'N' TO TDOWP-NORP.\n067803     MOVE 0 TO TDOWP-DAYNUMBER.\n067804     CALL 'Y2KTDOW' USING TDOW-PARAMETERS.\n067805     IF TDOWP-RETURN-CODE NOT EQUAL ZERO\n067806         DISPLAY 'RUNDATES: ERROR CALLING Y2KTDOW'\n067807         MOVE +16 TO RETURN-CODE\n067808         GOBACK\n067809     END-IF.\n067810     MOVE TDOWP-DATE-N TO TDOWP-DATE-O.\n067811     MOVE 'N' TO TDOWP-NORP.\n067812     MOVE 1 TO TDOWP-DAYNUMBER.\n067813     CALL 'Y2KTDOW' USING TDOW-PARAMETERS.\n067814     IF TDOWP-RETURN-CODE NOT EQUAL ZERO\n067815         DISPLAY 'RUNDATES: ERROR CALLING Y2KTDOW'\n067816         MOVE +16 TO RETURN-CODE\n067817         GOBACK\n067818     END-IF.\n067819     MOVE TDOWP-DATE-N TO WORK-GREG-DATE.\n067822* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n067830\n067900 END PROGRAM RUNDATES.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RUNDCOPY": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04o\\x01\\x04\\x04o\\x12\\x00\\x00;\\x00;\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-15T00:00:00", "modifydate": "2004-02-15T12:00:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "MOSELEY"}, "text": "       01  RUN-DATES-RECORD.\n           03  RUN-DATE-THIS.\n               05  THIS-DATE-GREGORIAN PIC 9(08).\n               05                      REDEFINES THIS-DATE-GREGORIAN.\n                   07  TDG-MONTH       PIC 9(02).\n                   07  TDG-DAY         PIC 9(02).\n                   07  TDG-YEAR        PIC 9(04).\n               05  THIS-DATE-JULIAN    PIC 9(07).\n               05                      REDEFINES THIS-DATE-JULIAN.\n                   07  TDJ-YEAR        PIC 9(04).\n                   07  TDJ-DAY         PIC 9(03).\n               05  THIS-DATE-ASTRO     PIC S9(7).\n               05  THIS-DATE-DAYNUMBER PIC 9(01).\n               05  THIS-DATE-DAYNAME   PIC X(09).\n               05  THIS-DATE-FLAGS.\n                   07  THIS-DATE-FLAG1 PIC X(01).\n                       88  TODAY-IS-WEEK-BEGIN     VALUE 'Y'.\n                   07  THIS-DATE-FLAG2 PIC X(01).\n                       88  TODAY-IS-WEEK-END       VALUE 'Y'.\n                   07  THIS-DATE-FLAG3 PIC X(01).\n                       88  TODAY-IS-MONTH-BEGIN    VALUE 'Y'.\n                   07  THIS-DATE-FLAG4 PIC X(01).\n                       88  TODAY-IS-MONTH-END      VALUE 'Y'.\n                   07  THIS-DATE-FLAG5 PIC X(01).\n                       88  TODAY-IS-QUARTER-BEGIN  VALUE 'Y'.\n                   07  THIS-DATE-FLAG6 PIC X(01).\n                       88  TODAY-IS-QUARTER-END    VALUE 'Y'.\n                   07  THIS-DATE-FLAG7 PIC X(01).\n                       88  TODAY-IS-YEAR-BEGIN     VALUE 'Y'.\n                   07  THIS-DATE-FLAG8 PIC X(01).\n                       88  TODAY-IS-YEAR-END       VALUE 'Y'.\n           03  RUN-DATE-PREV.\n               05  PREV-DATE-GREGORIAN PIC 9(08).\n               05                      REDEFINES PREV-DATE-GREGORIAN.\n                   07  PDG-MONTH       PIC 9(02).\n                   07  PDG-DAY         PIC 9(02).\n                   07  PDG-YEAR        PIC 9(04).\n               05  PREV-DATE-JULIAN    PIC 9(07).\n               05                      REDEFINES PREV-DATE-JULIAN.\n                   07  PDJ-YEAR        PIC 9(04).\n                   07  PDJ-DAY         PIC 9(03).\n               05  PREV-DATE-ASTRO     PIC S9(7).\n               05  PREV-DATE-DAYNUMBER PIC 9(01).\n               05  PREV-DATE-DAYNAME   PIC X(09).\n               05  DAYS-UNTIL-THIS     PIC 9(02).\n           03  RUN-DATE-NEXT.\n               05  NEXT-DATE-GREGORIAN PIC 9(08).\n               05                      REDEFINES NEXT-DATE-GREGORIAN.\n                   07  NDG-MONTH       PIC 9(02).\n                   07  NDG-DAY         PIC 9(02).\n                   07  NDG-YEAR        PIC 9(04).\n               05  NEXT-DATE-JULIAN    PIC 9(07).\n               05                      REDEFINES NEXT-DATE-JULIAN.\n                   07  NDJ-YEAR        PIC 9(04).\n                   07  NDJ-DAY         PIC 9(03).\n               05  NEXT-DATE-ASTRO     PIC S9(7).\n               05  NEXT-DATE-DAYNUMBER PIC 9(01).\n               05  NEXT-DATE-DAYNAME   PIC X(09).\n               05  DAYS-SINCE-THIS     PIC 9(02).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YREGS": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x00\\x17\\x00\\x17\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "MOSELEY"}, "text": "         MACRO\n         YREGS\n         GBLA  &REGS\n&REGS    SETA  1\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2K$ASM": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x00\\xa1\\x00\\xa1\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "MOSELEY"}, "text": "//Y2K$ASM  JOB (Y2K),'ASSEMBLE Y2K',CLASS=A,MSGCLASS=A,COND=(0,NE)\n//ALLOC   EXEC PGM=IEFBR14\n//LLIB     DD  DSN=JAY01.Y2K.LOADLIB,DISP=(NEW,CATLG,DELETE),\n//             UNIT=3330,VOL=SER=JAY001,\n//             SPACE=(TRK,(38,19,10)),DCB=(SYS1.LINKLIB)\n//*****************************************************************\n//ATOG EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KATOG)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KATOG(R)\n//*****************************************************************\n//GTOA EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KGTOA)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KGTOA(R)\n//*****************************************************************\n//JTOG EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KJTOG)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KJTOG(R)\n//*****************************************************************\n//GTOJ EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KGTOJ)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KGTOJ(R)\n//*****************************************************************\n//DOWN EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KDOWN)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KDOWN(R)\n//*****************************************************************\n//CONV EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KCONV)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KCONV(R)\n//*****************************************************************\n//DFMT EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KDFMT)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KDFMT(R)\n//*****************************************************************\n//ESTR EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KESTR)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KESTR(R)\n//*****************************************************************\n//GETD EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KGETD)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KGETD(R)\n//*****************************************************************\n//LAGE EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KLAGE)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KLAGE(R)\n//*****************************************************************\n//LEAP EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KLEAP)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KLEAP(R)\n//*****************************************************************\n//PROJ EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KPROJ)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KPROJ(R)\n//*****************************************************************\n//SAGE EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KSAGE)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KSAGE(R)\n//*****************************************************************\n//TDOW EXEC ASMFCL,PARM.ASM='LIST,OBJECT,NODECK,RENT',\n//             MAC1='JAY01.Y2K.SOURCE',\n//             PARM.LKED='LIST,XREF,MAP,RENT,REUS'\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN DD DISP=SHR,DSN=JAY01.Y2K.SOURCE(Y2KTDOW)\n//LKED.SYSLMOD DD DSN=JAY01.Y2K.LOADLIB,DISP=OLD\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLIB DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n  NAME Y2KTDOW(R)\n//*****************************************************************\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2K$INST": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x00\\x14\\x00\\x14\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "MOSELEY"}, "text": "//Y2K$INST JOB (Y2K),'INSTALL Y2K',CLASS=A,MSGCLASS=A\n//DELETE  EXEC PGM=IDCAMS,REGION=4096K\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n\n  /* DELETE Y2K LOAD LIBRARY                                */\n\n  DELETE (JAY01.Y2K.LOADLIB)                                -\n         NONVSAM SCRATCH PURGE\n\n  SET MAXCC=0\n  SET LASTCC=0\n\n//*****************************************************************\n//SUBMIT  EXEC PGM=IEBGENER\n//SYSIN    DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=JAY01.Y2K.SOURCE(Y2K$ASM),DISP=SHR\n//SYSUT2   DD  SYSOUT=(A,INTRDR)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2K$IVP": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x00\\t\\x00\\t\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "MOSELEY"}, "text": "//Y2K$IVP JOB (Y2K),'Y2K VERIFY',CLASS=A,MSGCLASS=A\n//Y2KIVP EXEC COBUCLG,REGION.COB=4096K,\n//             PARM.COB='LOAD,LIST,DMAP,SIZE=2048K,BUF=1024K'\n//COB.SYSIN DD DSN=JAY01.Y2K.SOURCE(Y2KIVP),DISP=SHR\n//LKED.SYSLIB DD\n//         DD DSN=JAY01.Y2K.LOADLIB,DISP=SHR\n//GO.TESTDATA DD DSN=JAY01.Y2K.SOURCE(Y2KIVPD),DISP=SHR\n//GO.REPORT DD SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KATOG": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f C\\x00\\xf1\\x00\\xf1\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:43:13", "lines": 241, "newlines": 241, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KATOG - REBUILD GREGORIAN DATE FROM ASTRO NUMBER'\n*                                                                     *\n*   YY   YY   222   KK   KK    A   TTTTTTTT  OOOOO   GGGGG            *\n*   YY   YY  2   2  KK  KK    AAA     TT    OO   OO GG   GG           *\n*   YY   YY      2  KK KK    AA AA    TT    OO   OO GG   GG           *\n*    YY YY       2  KKKK    AA   AA   TT    OO   OO GG                *\n*     YYY     222   KKKK    AA   AA   TT    OO   OO GG  GGG           *\n*     YY     2      KK KK   AAAAAAA   TT    OO   OO GG   GG           *\n*     YY     2      KK  KK  AA   AA   TT    OO   OO GG   GG           *\n*     YY     22222  KK   KK AA   AA   TT     OOOOO   GGGGG            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE REBUILDS THE GREGORIAN DATE (MMDDYYYY) FOR       *\n*    A GIVEN ASTRONOMICAL NUMBER                                      *\n*                                                                     *\n*    1.  VALID ASTRONOMICAL NUMBERS FOR THIS ROUTINE ARE 2305814+     *\n*        THROUGH 2962884+ (INCLUSIVE)                                 *\n*                                                                     *\n*    2.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 7 BYTE FIELD CONTAINING THE ASTRONOMICAL NUMBER        *\n*            (IN ZONED-DECIMAL FORMAT) TO BE PROCESSED,               *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE OUTPUT DATE       *\n*            (IN ZONED-DECIMAL FORMAT).                               *\n*        THE ROUTINE WILL NOT ALTER THE ASTRONOMICAL NUMBER PASSED    *\n*        TO IT.                                                       *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KATOG,(ANUM)                           *\n*                         . . .                                       *\n*             ANUM     DS    ZL7'2451544'                             *\n*             RC       DS    ZL1'0'                                   *\n*             DATE     DS    ZL8'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  ATOG-PARAMETERS.                                    *\n*                 02  ANUM PIC 9(7) VALUE +2451544.                   *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  DATE PIC 9(8) VALUE 0.                          *\n*             CALL 'Y2KATOG' USING ATOG-PARAMETERS.                   *\n*                                                                     *\n*    3.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE ANUM FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER BYTE'S  *\n*        ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF X'C', X'D', OR    *\n*        X'F'), OR IF THE PRECEDING BYTES' ZONES ARE OTHER THAN       *\n*        X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE CONTAINS A VALUE     *\n*        GREATER THAN X'9'.                                           *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE ANUM SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE GREGORIAN DATE TO WHICH       *\n*        THE ASTRONOMICAL NUMBER CORRESPONDS WILL BE PLACED IN        *\n*        THE 3RD PARAMETER FIELD (DATE).  IF THE RETURN CODE IS       *\n*        A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE DATE          *\n*        FIELD WILL CONTAINS ZEROS.                                   *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KATOG  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT ASTRO DATE TO GREGORIAN'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KATOG,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KATOG GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KATOG GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DATE PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            NULL GREGORIAN DATE\n*\n*    TEST ANUM FOR INVALID CHARACTER\n*\n         LA    R2,PANUM                ADDRESS PASSED ANUM\n         LA    R3,6                    LENGTH OF FIELD MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC\n*\n*    ANUM CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST ANUM FOR VALID RANGE\n*\nP1OK1    PACK  TA(8),PANUM(7)          PACK PASSED ANUM\n         CP    TA(8),=P'2305814'       IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    TA(8),=P'2962884'       IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    ANUM CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    CONVERT ANUM TO GREGORIAN DATE\n*\nP1OK2    MP    TA,=P'4'                MULTIPLY BY 4\n         SP    TA,=P'6884477'          SUBTRACT 6,884,477\n*\n         ZAP   TY,TA                   GET TA RESULT\n         DP    TY,=P'146097'           DIVIDE BY 146,097\n         ZAP   TD,TY+4(4)              SAVE REMAINDER\n         ZAP   TY,TY(4)                SHIFT QUOTIENT\n         MP    TY,=P'100'              MULTIPLY BY 100\n*\n         DP    TD,=P'4'                DIVIDE BY 4\n         ZAP   TD,TD(7)                SHIFT QUOTIENT\n*\n         ZAP   TA,TD                   GET TD RESULT\n         MP    TA,=P'4'                MULTIPLY BY 4\n         AP    TA,=P'3'                ADD 3\n*\n         ZAP   TX,TA                   GET TA RESULT\n         DP    TX,=P'1461'             DIVIDE BY 1,461\n         ZAP   TD,TX+5(3)              SAVE REMAINDER\n         ZAP   TX,TX(5)                SHIFT QUOTIENT\n         AP    TY,TX                   ADD TO PRIOR VALUE OF TY\n*\n         DP    TD,=P'4'                DIVIDE BY 4\n         ZAP   TD,TD(7)                SHIFT QUOTIENT\n         AP    TD,=P'1'                ADD 1\n*\n         ZAP   TA,TD                   GET PRIOR TD RESULT\n         MP    TA,=P'5'                MULTIPLY BY 5\n         SP    TA,=P'3'                SUBTRACT 3\n*\n         ZAP   TM,TA                   GET PRIOR TA RESULT\n         DP    TM,=P'153'              DIVIDE BY 153\n         ZAP   TD,TM+6(2)              SAVE REMAINDER\n         ZAP   TM,TM(6)                SHIFT QUOTIENT\n         AP    TM,=P'1'                ADD 1\n*\n         DP    TD,=P'5'                DIVIDE BY 5\n         ZAP   TD,TD(7)                SHIFT QUOTIENT\n         AP    TD,=P'1'                ADD 1\n*\n         ZAP   TMONTH,TM               TRUNCATE MONTH\n         CP    TMONTH,=P'11'           IS MONTH LESS THAN 11?\n         BL    COMP001                 YES\n         SP    TMONTH,=P'10'           SUBTRACT 10\n         B     COMP002                 CONTINUE\nCOMP001  AP    TMONTH,=P'2'            ADD 2\nCOMP002  ZAP   TDAY,TD                 TRUNCATE DAY\n         DP    TM,=P'11'               DIVIDE TM BY 11\n         ZAP   TYEAR,TM(6)             TRUNCATE QUOTIENT\n         AP    TYEAR,TY                FINISH YEAR\n*\n         UNPK  PMONTH,TMONTH           UNPACK MONTH\n         OI    PMONTH+1,X'F0'          CLEAR SIGN\n         UNPK  PDAY,TDAY               UNPACK DAY\n         OI    PDAY+1,X'F0'            CLEAR SIGN\n         UNPK  PYEAR,TYEAR             UNPACK YEAR\n         OI    PYEAR+3,X'F0'           CLEAR SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nTA       DS    PL8                     INTERMEDIATE ANSWER\nTX       DS    PL8                     INTERMEDIATE ANSWER\nTM       DS    PL8                     INTERMEDIATE ANSWER\nTD       DS    PL8                     INTERMEDIATE ANSWER\nTY       DS    PL8                     INTERMEDIATE ANSWER\nTMONTH   DS    PL2                     CALCULATED GREGORIAN MONTH\nTDAY     DS    PL2                     CALCULATED GREGORIAN DAY\nTYEAR    DS    PL4                     CALCULATED GREGORIAN YEAR\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPANUM    DS    ZL7                     ASTRONOMICAL NUMBER\nPRC      DS    ZL1                     RETURN CODE (0/2/4)\nPDATE    DS    0ZL8                    EXPANDED DATE\nPMONTH   DS    ZL2                       MONTH\nPDAY     DS    ZL2                       DAY\nPYEAR    DS    ZL4                       YEAR\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KCONV": {"ttr": 2317, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00V\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f A\\x01|\\x01|\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:41:56", "lines": 380, "newlines": 380, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KCONV - CONVERT DATES WITH 2 DIGIT YEARS'\n*                                                                     *\n*   YY   YY   222   KK   KK  CCCCC   OOOOO  NN   NN VV   VV           *\n*   YY   YY  2   2  KK  KK  CC   CC OO   OO NNN  NN VV   VV           *\n*   YY   YY      2  KK KK   CC   CC OO   OO NNN  NN VV   VV           *\n*    YY YY       2  KKKK    CC      OO   OO NNNN NN VV   VV           *\n*     YYY     222   KKKK    CC      OO   OO NN NNNN VV   VV           *\n*     YY     2      KK KK   CC   CC OO   OO NN  NNN  VV VV            *\n*     YY     2      KK  KK  CC   CC OO   OO NN  NNN   VVV             *\n*     YY     22222  KK   KK  CCCCC   OOOOO  NN   NN    V              *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE CONVERTS EXISTING DATE FIELDS WITH 2 DIGIT       *\n*    YEARS TO A YEAR 2000 COMPLIANT FORMAT                            *\n*                                                                     *\n*    1.  VALID INPUT MONTH VALUES (FOR FORMATS 1, 2, AND 3 INPUT      *\n*        DATES) FOR THIS ROUTINE ARE 01 THROUGH 12.                   *\n*                                                                     *\n*    2.  VALID INPUT DAY VALUES (FOR FORMATS 1, 2, AND 3 INPUT DATES) *\n*        FOR THIS ROUTINE ARE 01 THROUGH 31, WITH EXCEPTIONS FOR      *\n*        THE MONTHS LISTED:                                           *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    3.  VALID INPUT DAY OF YEAR VALUES (FOR FORMAT 4 INPUT DATE)     *\n*        FOR THIS ROUTINE ARE 001 THROUGH 365 (FOR NON-LEAP YEARS)    *\n*        OR 001 THROUGH 366 (FOR LEAP YEARS).                         *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE ONE OF THE FOLLOWING (BASED UPON     *\n*        THE INPUT FORMAT CODE - PARAMETER 2):                        *\n*          A)  FORMAT 1 DATES MUST BE MMDDYY (U.S. 6)                 *\n*          B)  FORMAT 2 DATES MUST BE DDMMYY (EUROPEAN 6)             *\n*          C)  FORMAT 3 DATES MUST BE YYMMDD (FIPS 6)                 *\n*          D)  FORMAT 4 DATES MUST BE YYDDD (JULIAN 5)                *\n*        WHERE MM = THE 2 DIGIT MONTH VALUE, DD = THE 2 DIGIT DAY     *\n*        VALUE, YY = THE 2 DIGIT YEAR VALUE, AND DDD = THE 3 DIGIT    *\n*        ORDINAL DAY OF THE YEAR VALUE.                               *\n*                                                                     *\n*    5.  SEVEN FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  THE INPUT DATE (IN ZONED-DECIMAL FORMAT) TO BE CON-      *\n*            VERTED IN A SUB-FORMAT CORRESPONDING TO THE FORMAT       *\n*            CODE CONTAINED IN FIELD #2 (SEE 4 ABOVE).  (FORMAT 4     *\n*            DATES (5 BYTE JULIAN) MUST BE FOLLOWED BY A SLACK        *\n*            BYTE WHICH IS NOT ACCESSED BY THE ROUTINE)               *\n*        2)  A 1 BYTE FIELD CONTAINING THE FORMAT OF THE DATE IN      *\n*            FIELD #1 (IN ZONED-DECIMAL) AS SPECIFIED IN 4 (ABOVE).   *\n*        3)  A 2 BYTE FIELD CONTAINING THE YEAR AT WHICH THE CENTURY  *\n*            IS TO SWITCH FROM 1900 TO 2000 (IN ZONED-DECIMAL).  IF   *\n*            THIS FIELD CONTAINS 20, INPUT DATES WITH YEAR VALUES OF  *\n*            00 THROUGH 20 WILL EXPAND TO 2000 THROUGH 2020 AND       *\n*            INPUT DATES WITH YEAR VALUES OF 21 THROUGH 99 WILL       *\n*            EXPAND TO 1921 THROUGH 1999.                             *\n*        4)  A 1 BYTE ZONED-DECIMAL RETURN CODE.                      *\n*        5)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE DATE IN GREGOR-   *\n*            IAN FORMAT (IN ZONED DECIMAL FORMAT).  THIS FIELD WILL   *\n*            BE RETURNED IN COMMERCIAL-8 FORMAT (MMDDYYYY).           *\n*        6)  A 7 BYTE FIELD WHICH WILL RECEIVE THE DATE IN JULIAN     *\n*            FORMAT (IN ZONED DECIMAL FORMAT).                        *\n*        7)  A 7 BYTE FIELD WHICH WILL RECEIVE THE ASTRONOMICAL       *\n*            NUMBER (IN ZONED DECIMAL FORMAT).                        *\n*        THE ROUTINE WILL NOT ALTER THE FIELDS PASSED TO IT (1-3).    *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KCONV,(DATEIN)                         *\n*                         . . .                                       *\n*             DATEIN   DS    ZL6'010197'                              *\n*             DATEFMT  DS    ZL1'1'                                   *\n*             BREAK    DS    ZL2'20'                                  *\n*             RC       DS    ZL1'0'                                   *\n*             DATEG    DS    ZL8'00000000'                            *\n*             DATEJ    DS    ZL7'0000000'                             *\n*             ANUM     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  CONV-PARAMETERS.                                    *\n*                 02  DATEIN  PIC 9(6) VALUE 010197.                  *\n*                 02  DATEFMT PIC 9(1) VALUE 1.                       *\n*                 02  BREAK   PIC 9(2) VALUE 20.                      *\n*                 02  RC      PIC 9(1) VALUE 0.                       *\n*                 02  DATEG   PIC 9(8) VALUE 0.                       *\n*                 02  DATEJ   PIC 9(7) VALUE 0.                       *\n*                 02  ANUM    PIC 9(7) VALUE 0.                       *\n*             CALL 'Y2KCONV' USING CONV-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE INPUT DATE FIELD   *\n*        (3 FOR THE BREAK VALUE FIELD).  INVALID DATA ARE DETERMINED  *\n*        IF THE FIELD'S LOW ORDER BYTE'S ZONE CONTAINS AN INVALID     *\n*        SIGN, (NOT ONE OF X'C', X'D', OR X'F'), OR IF THE PRECEED-   *\n*        ING BYTES' ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW   *\n*        LOW ORDER NIBBLE CONTAINS A VALUE GREATER THAN X'9'.         *\n*                                                                     *\n*        5 INDICATES THE VALUE OF THE DATE FORMAT CODE IS INVALID     *\n*        ('1', '2', '3', AND '4' ARE VALID).                          *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED IN THE INPUT    *\n*        DATE FIELD WAS NOT IN THE RANGE SPECIFIED IN 1 (ABOVE).      *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED IN THE INPUT      *\n*        DATE FIELD WAS NOT IN THE RANGE SPECIFIED IN 2 OR 3          *\n*        (ABOVE) DEPENDING UPON THE INPUT DATE FORMAT.                *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE GREGORIAN DATE WITH THE 4     *\n*        DIGIT YEAR WILL BE PLACED IN FIELD 5, THE JULIAN DATE WITH   *\n*        THE 4 DIGIT YEAR WILL BE PLACED IN FIELD 6, AND THE ASTRO-   *\n*        NOMICAL NUMBER FOR THE DATE WILL BE PLACE IN FIELD 7.  IF    *\n*        THE RETURN CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION) *\n*        RETURN FIELDS 5 THROUGH 7 WILL CONTAIN ZEROS.                *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KCONV  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT PRE-2000 DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KCONV,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KCONV GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KCONV GETMAIN ENDS'\n*\n*    INITIALIZE OUTPUT FIELDS.\n*\n         MVI   PRC,C'0'                RETURN CODE\n         MVC   PRC+1(22),PRC           OUTPUT DATES\n*\n*    TEST INPUT FORMAT CODE FOR INVALID VALUE\n*\n         XR    R1,R1                   CLEAR WORK REGISTER\n         IC    R1,PFORM                GET FORMAT CODE\n         LA    R2,X'F1'                LOWEST VALID CODE\n         LA    R3,4                    HIGHEST VALID CODE\nFMTLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    FORMOK                  YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT VALID CODE\n         BCT   R3,FMTLOOP              CONTINUE TESTING NEXT CODE\n         MVI   PRC,C'5'                INDICATE INVALID CODE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST INPUT BREAK POINT FOR INVALID CHARACTER\n*\nFORMOK   LA    R2,PBREAK               ADDRESS BREAK VALUE\n         LA    R3,1                    LENGTH MINUS 1\n         MVI   PRC,C'3'                ASSUME INVALID DATA\n         BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID BREAK TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    TEST INPUT DATE FOR INVALID CHARACTER\n*\n         LA    R2,PDATEG               ADDRESS DATE FIELDS\n         LA    R3,5                    LENGTH MINUS 1 (FOR FORMAT 1)\n         MVI   PRC,C'2'                ASSUME INVALID DATA\n         CLI   PFORM,C'1'              IS IT FORMAT 1?\n         BE    F1CALL                  YES, GO TEST IT\n         BCTR  R3,0                    NO, DECREMENT LENGTH\nF1CALL   BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID DATE TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    BRANCH AROUND PERFORMED CODE TO CONTINUE\n*\n         B     PERCON                  CONTINUE\n*\n*    THIS ROUTINE SCANS FOR INVALIDS CHARACTER IN ZONED-DECIMAL\n*    PARAMETER FIELDS.  IT IS CALLED FOR BOTH DATE FIELDS.\n*\nPTEST1   EQU   *\nPT1LOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,PT1LOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATA CONTAINED AN INVALID CHARACTER.  SINCE THE ERROR RC WAS\n*    SET BY THE CALLER, JUST RETURN.\n*\nPT1ERR   BR    R14                     RETURN\n*\n*    DATA WAS VALID, SO RESET RETURN CODE TO GOOD AND RETURN.\n*\nPT1OK    MVI   PRC,C'0'                INDICATE GOOD DATA\n         BR    R14                     AND RETURN\n*\n*    THIS BRANCH POINT IS TO JUMP OVER PERFORMED ROUTINE ABOVE\n*\nPERCON   EQU   *\n*\n*    WHICH FORMAT IS COMING IN?\n*\n         CLI   PFORM,C'4'              FORMAT 4 (YYDDD)?\n         BNE   DATE6                   NO, GO TO 6 DIGIT DATES\n*\n*    PROCESSING INPUT FORMAT 4 (YYDDD)\n*\n         MVC   JDATEJ+4(3),PDATEJ+2    MOVE DDD PART OF FIELD\n         PACK  WORKY,PDATEJ(2)         PACK YY PART OF FIELD\n         BAL   R14,EXTYEAR             PERFORM YEAR EXTENSION\n         MVC   JDATEJ(4),WORKYZ+1      UNPACK EXTENDED DATE\n         LA    R1,JTOGPARM             ADDRESS OF Y2KJTOG PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KJTOG)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    TEST RETURN CODE TO SEE IF JULIAN DATE PASSED LOGIC TEST\n*\n         MVC   PRC,RCJ                 SHARE RETURN CODE\n         CLI   RCJ,C'0'                GOOD RETURN CODE?\n         BNE   RETURN                  RETURN TO MY CALLER\n*\n*    RETURN CODE IS OK, MOVE FIELDS TO OUTPUT\n*\n         MVC   POUTG,JDATEG            MOVE GREGORIAN\n         MVC   POUTJ,JDATEJ            MOVE EXTENDED JULIAN\n         MVC   GDATEA,JDATEG           LOAD INPUT FOR LAST CALL\n         B     FINI                    GO DO COMMON FINISH\n*\n*    INPUT FORMAT IS PARSED ACCORDING TO DATE FORMAT CODE.\n*\nDATE6    CLI   PFORM,C'2'              FORMAT 1?\n         BE    DATE6I2                 YES, DO DDMMYY\n         CLI   PFORM,C'3'              FORMAT 2?\n         BE    DATE6I3                 YES, DO YYMMDD\nDATE6I1  MVC   GDATEG(4),PDATEG        MOVE MMDD PART OF FIELD\n         PACK  WORKY,PDATEG+4(2)       PACK YY PART OF FIELD\n         B     DATE6IX                 GO DO COMMON DATE6 PROCESS\nDATE6I2  MVC   GDATEG(2),PDATEG+2      MOVE DD PART OF FIELD\n         MVC   GDATEG+2(2),PDATEG      MOVE MM PART OF FIELD\n         PACK  WORKY,PDATEG+4(2)       PACK YY PART OF FIELD\n         B     DATE6IX                 GO DO COMMON DATE6 PROCESS\nDATE6I3  MVC   GDATEG(4),PDATEG+2      MOVE MMDD PART OF FIELD\n         PACK  WORKY,PDATEG(2)         PACK YY PART OF FIELD\nDATE6IX  BAL   R14,EXTYEAR             PERFORM YEAR EXTENSION\n         MVC   GDATEG+4(4),WORKYZ+1    UNPACK EXTENDED YEAR\n*\n*    CALL Y2KGTOJ TO DO VERIFY DATE AND DO 1ST CONVERSION\n*\n         LA    R1,GTOJPARM             ADDRESS OF Y2KGTOJ PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOJ)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    TEST RETURN CODE TO SEE IF GREGORIAN DATE PASSED LOGIC TEST\n*\n         MVC   PRC,RCG                 SHARE RETURN CODE\n         CLI   RCG,C'0'                GOOD RETURN CODE?\n         BNE   RETURN                  RETURN TO MY CALLER\n*\n*    RETURN CODE IS OK, MOVE FIELDS TO OUTPUT\n*\n         MVC   POUTG,GDATEG            MOVE MMDDYYYY TO OUTPUT\n         MVC   POUTJ,GDATEJ            MOVE JULIAN\n         MVC   GDATEA,GDATEG           LOAD INPUT FOR LAST CALL\n         B     FINI                    GO DO COMMON FINISH\n*\n*    THIS ROUTINE IS CALLED BY BOTH FORMAT ROUTINES ABOVE TO EXTEND\n*    THE 2 DIGIT YEAR TO 4 DIGITS.\n*\nEXTYEAR  PACK  WORKB,PBREAK            PACK BREAK POINT\n         ZAP   WORKY,WORKY             SET SIGN TO POSITIVE\n         ZAP   WORKB,WORKB             SET SIGN TO POSITIVE\n         CP    WORKY,WORKB             COMPARE PASSED YEAR TO IT\n         BH    IS1900                  IF ABOVE POINT, MAKE IT 1900\nIS2000   OC    WORKY,=X'020000'        ADD 20 BEFORE YY\n         B     EXTYEARF                COMMON FINISH\nIS1900   OC    WORKY,=X'019000'        ADD 19 BEFORE YY\nEXTYEARF UNPK  WORKYZ,WORKY            UNPACK THE RESULT\n         OI    WORKYZ+4,X'F0'          CLEAR SIGN\n         BR    R14                     AND RETURN\n*\n*    CALL Y2KGTOA TO GET THE ASTRONOMICAL NUMBER\n*\nFINI     LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SHOULD BE ABLE TO IGNORE THE RETURN CODE HERE ... JUST COPY\n*    THE ASTRO NUMBER TO THE OUTPUT FIELD.\n*\n         MVC   PANUM,ANUM              WAS EXECUTION SUCCESSFUL?\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nGDATEA   DS    CL8                       INPUT DATE\nRCGTOA   DS    CL1                       RETURN CODE\nANUM     DS    CL7                       ASTRO NUMBER\nJTOGPARM DS    0H                      PARAMETERS FOR Y2KJTOG\nJDATEJ   DS    CL7                       INPUT DATE\nRCJ      DS    CL1                       RETURN CODE\nJDATEG   DS    CL8                       OUTPUT GREGORIAN DATE\nGTOJPARM DS    0H                      PARAMETERS FOR Y2KGTOJ\nGDATEG   DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nGDATEJ   DS    CL7                       OUTPUT JULIAN DATE\nWORKB    DS    PL2                     WORK FIELD FOR COMPUTATION\nWORKY    DS    PL3                     WORK FIELD FOR COMPUTATION\nWORKYZ   DS    ZL5                     WORK FIELD FOR COMPUTATION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATEG   DS    CL6                     GREGORIAN DATE FORMAT\n         ORG   PDATEG\nPDATEJ   DS    CL5                     JULIAN DATE FORMAT\n         ORG\nPFORM    DS    CL1                     FORMAT CODE OF INPUT DATE\nPBREAK   DS    ZL2                     YEAR WHERE 2000 BEGINS\nPRC      DS    CL1                     RETURN CODE (0, 2-6, 8)\nPOUTG    DS    CL8                     EXPANDED GREGORIAN\nPOUTJ    DS    CL7                     EXPANDED JULIAN\nPANUM    DS    CL7                     ASTRONOMICAL NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KDFMT": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00)\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f C\\x02P\\x02P\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:43:29", "lines": 592, "newlines": 592, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KDFMT - FORMAT DATE FOR OUTPUT'\n*                                                                     *\n*   YY   YY   222   KK   KK DDDDDD  FFFFFFF M     MTTTTTTTT           *\n*   YY   YY  2   2  KK  KK  DD   DD FF      MM   MM   TT              *\n*   YY   YY      2  KK KK   DD   DD FF      MMM MMM   TT              *\n*    YY YY       2  KKKK    DD   DD FFFFF   MMMMMMM   TT              *\n*     YYY     222   KKKK    DD   DD FF      MM M MM   TT              *\n*     YY     2      KK KK   DD   DD FF      MM   MM   TT              *\n*     YY     2      KK  KK  DD   DD FF      MM   MM   TT              *\n*     YY     22222  KK   KK DDDDDD  FF      MM   MM   TT              *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE FORMATS A GIVEN GREGORIAN DATE (MMDDYYYY) IN     *\n*    A LARGE VARIETY OF FORMATS                                       *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THE MAJOR FORMAT CODE DETERMINES THE OVERALL OUTPUT FORMAT   *\n*        AND THE MINOR FORMAT CODE DETERMINES SUBTLE VARIATIONS OF    *\n*        THE FORMAT:                                                  *\n*          MAJOR                                  MINOR               *\n*            1 = COMMERCIAL (01051997)              1 = NO INSERT     *\n*            1 = COMMERCIAL (01 05 1997)            2 = SPACE         *\n*            2 = EUROPEAN   (05/01/1997)            3 = SLASH         *\n*            2 = EUROPEAN   (05-01-1997)            4 = HYPHEN        *\n*            3 = F.I.P.S.   (YYYY.MM.DD)            5 = PERIOD        *\n*          ---------------------------------------------------------  *\n*            4 = TEXT 1 (JANUARY 5, 1997)           1 = U.S.          *\n*            4 = TEXT 1 (5 JANUARY 1997)            2 = EUROPEAN      *\n*            5 = TEXT 2 (JAN 5, 1997)               1 = U.S.          *\n*            6 = TEXT 3 (SUNDAY, JANUARY 5, 1997)   1 = U.S.          *\n*            7 = TEXT 4 (SUNDAY, 5 JAN 1997)        2 = EUROPEAN      *\n*            8 = TEXT 5 (SUN, JANUARY 5, 1997)      1 = U.S.          *\n*            9 = TEXT 6 (SUN, 5 JAN 1997)           2 = EUROPEAN      *\n*                                                                     *\n*    6.  SIX FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:          *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-           *\n*            DECIMAL FORMAT) TO BE FORMATTED,                         *\n*        2)  A 1 BYTE ZONED-DECIMAL MAJOR FORMAT CODE (SEE 5 ABOVE),  *\n*        3)  A 1 BYTE ZONED-DECIMAL MINOR FORMAT CODE (SEE 5 ABOVE),  *\n*        4)  A 1 BYTE ZONED-DECIMAL RETURN CODE,                      *\n*        5)  A 2 BYTE FIELD WHICH WILL CONTAIN THE NUMBER OF BYTES    *\n*            PLACED IN THE FOLLOWING FIELD (IN ZONED DECIMAL FORMAT), *\n*        6)  AN OUTPUT FIELD TO RECEIVE THE FORMATTED DATE (NOTE:     *\n*            THE SIZE OF THIS FIELD DEPENDS UPON THE FORMATTING       *\n*            CODES ... IT IS THE CALLER'S RESPONSIBILITY TO PASS A    *\n*            FIELD LONG ENOUGH TO RECEIVE THE REQUESTED FORMAT).      *\n*        THE ROUTINE WILL NOT ALTER THE DATE OR FORMAT CODE FIELDS.   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KDFMT,(DATEIN)                         *\n*                         . . .                                       *\n*             DATEIN   DS    ZL8'01051997'                            *\n*             MAJOR    DS    CL1'1'                                   *\n*             MINOR    DS    CL1'3'                                   *\n*             RC       DS    ZL1'0'                                   *\n*             OUTSIZE  DS    ZL2'00'                                  *\n*             OUTDATE  DS    CL29' '                                  *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  DFMT-PARAMETERS.                                    *\n*                 02  DATEIN  PIC 9(8) VALUE 01011997.                *\n*                 02  MAJOR   PIC 9(1) VALUE 1.\n*                 02  MINOR   PIC 9(1) VALUE 3.\n*                 02  RC      PIC 9(1) VALUE 0.                       *\n*                 02  OUTSIZE PIC 9(2) VALUE 0.                       *\n*                 02  OUTDATE PIC X(29).                              *\n*             CALL 'Y2KDFMT' USING DFMT-PARAMETERS.                   *\n*                                                                     *\n*    7.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*        3 INDICATES THE VALUE OF THE MAJOR FORMAT CODE SPECIFIED     *\n*        WAS NOT ONE OF THE ACCEPTABLE VALUES (SEE 5 ABOVE).          *\n*                                                                     *\n*        5 INDICATES THE VALUE OF THE MINOR FORMAT CODE SPECIFIED     *\n*        WAS NOT ONE OF THE ACCEPTABLE VALUES FOR THE MAJOR FORMAT    *\n*        CODE SPECIFIED (SEE 5 ABOVE).                                *\n*                                                                     *\n*    8.  UPON SUCCESSFUL EXECUTION, THE FORMATTED DATE WILL BE        *\n*        PLACED IN THE 6TH PARAMETER FIELD AND THE NUMBER OF BYTES    *\n*        PLACED IN THE FIELD WILL BE PLACED IN THE 5TH FIELD.  IF     *\n*        THE RETURN CODE CONTAINS A NON-ZERO VALUE (UNSUCCESSFUL      *\n*        EXECUTION), THE 6TH FIELD WILL NOT BE MODIFIED BY THE        *\n*        ROUTINE AND THE 5TH FIELD WILL CONTAIN ZERO.                 *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KDFMT  CSECT\n*         PRINT NOGEN\n         EYEC  'FORMAT DATE WITH FOR PRINT/DISPLAY'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KDFMT,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KDFMT GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KDFMT GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND OUTPUT BYTE COUNT.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(2),PRC            ZERO RETURN SIZE\n*\n*    CALL Y2KDOWN TO VERIFY DATE AND RETURN INTEGRAL DAY NUMBER.\n*\n         MVC   DDATE,PDATE             COPY YEAR TO Y2KDOWN PARM\n         LA    R1,DOWNPARM             ADDRESS OF Y2KDOWN PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KDOWN)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KDOWN.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,DRC                 ADOPT RECEIVED RETURN CODE\n         CLI   DRC,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    TEST MAJOR FORMAT CODE FOR INVALID VALUE.\n*\n         XR    R1,R1                   CLEAR WORK REGISTER\n         IC    R1,PMAJOR               GET MAJOR FORMAT CODE\n         LA    R2,X'F1'                LOWEST VALID CODE\n         LA    R3,9                    HIGHEST VALID CODE\nMAJLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    MAJOK                   YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT TO NEXT VALID CODE\n         BCT   R3,MAJLOOP              AND CONTINUE TESTING\n         MVI   PRC,C'3'                INDICATE INVALID CODE\n         B                             RETURN\n*\n*    TEST MINOR FORMAT CODE FOR INVALID VALUE.\n*\nMAJOK    IC    R1,PMINOR               GET MINOR FORMAT CODE\n         LA    R2,X'F1'                LOWEST VALID CODE\n         LA    R3,5                    HIGHEST VALID CODE FOR MAJ:1-3\n         CLI   PMAJOR,C'4'             IS MAJOR LESS THAN 4?\n         BL    MINLOOP                 YES, BEGIN TEST\n         LA    R3,2                    ELSE SET HIGHEST FOR MAJ:4-9\nMINLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    MINOK                   YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT TO NEXT VALID CODE\n         BCT   R3,MINLOOP              AND CONTINUE TESTING\n         MVI   PRC,C'5'                INDICATE INVALID CODE\n         B                             RETURN\n*\n*    BRANCH TO FORMAT ROUTINE BASED ON MAJOR FORMAT CODE\n*\nMINOK    XR    R3,R3                   CLEAR WORK REGISTER\n         IC    R3,PMAJOR               GET FORMAT NUMBER\n         N     R3,=F'15'               CLEAR SIGN\n         BCTR  R3,0                    DECREMENT BY 1 (ZERO BASED)\n         SLL   R3,2                    MULTIPLY BY 4 (LENGTH OF BRANCH)\n         LA    R3,MFMTBR(R3)           LOAD ADDRESS OF BRANCH\n         BR    R3                      GO BRANCH DEPENDING ON FORMAT\n*\n*    BRANCH TABLE TO SELECT ROUTINE FOR MAJOR FORMAT CODE\n*\nMFMTBR   B     MFMT1\n         B     MFMT2\n         B     MFMT3\n         B     MFMT4\n         B     MFMT5\n         B     MFMT6\n         B     MFMT7\n         B     MFMT8\n         B     MFMT9\n*\n*    MAJOR FORMAT CODE 1: COMMERCIAL (MMDDYYYY)\n*\nMFMT1    BAL   R9,MFMTSUB              GO GET SEPARATOR CHARACTOR\n         LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         MVC   0(2,R2),PDATE           MOVE MM\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT1A                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT1A   MVC   0(2,R2),PDATE+2         MOVE DD\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT1B                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT1B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 2: EUROPEAN (DDMMYYYY)\n*\nMFMT2    BAL   R9,MFMTSUB              GO GET SEPARATOR CHARACTOR\n         LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         MVC   0(2,R2),PDATE+2         MOVE DD\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT2A                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT2A   MVC   0(2,R2),PDATE           MOVE MM\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT2B                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT2B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 3: F.I.P.S. (YYYYMMDD)\n*\nMFMT3    BAL   R9,MFMTSUB              GO GET SEPARATOR CHARACTOR\n         LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT3A                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT3A   MVC   0(2,R2),PDATE           MOVE MM\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT3B                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT3B   MVC   0(2,R2),PDATE+2         MOVE DD\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    THIS SUBROUTINE PLACES THE INSERTION CHARACTER (IF ANY) INTO\n*    REGISTER 3 BASED UPON MINOR CODE 1 THROUGH 5 (USED BY MAJOR\n*    CODE ROUTINES 1 THROUGH 3 ABOVE.\n*\nMFMTSUB  XR    R3,R3                   ASSUME NO SEPARATOR\n         XR    R4,R4                   CLEAR WORK REGISTER\n         IC    R4,PMINOR               GET MINOR FORMAT NUMBER\n         N     R4,=F'15'               CLEAR SIGN\n         BCTR  R4,0                    DECREMENT BY 1 (ZERO BASED)\n         SLL   R4,2                    MULTIPLY BY 4 (LENGTH OF BRANCH)\n         LA    R4,MFMTSBR(R4)          LOAD ADDRESS OF BRANCH\n         BR    R4                      GO BRANCH DEPENDING ON FORMAT\n*\n*    BRANCH TABLE TO SELECT INSERTION CHARACTER\n*\nMFMTSBR  B     MFMTSC1                 NONE\n         B     MFMTSC2                 SPACE\n         B     MFMTSC3                 SLASH\n         B     MFMTSC4                 HYPHEN\n         B     MFMTSC5                 PERIOD\n*\nMFMTSC1  BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC2  LA    R3,C' '                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC3  LA    R3,C'/'                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC4  LA    R3,C'-'                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC5  LA    R3,C'.'                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\n*\n*    MAJOR FORMAT CODE 4: TEXT 1 (MMMMMMMMM D, YYYY)\n*\nMFMT4    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT4A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHN              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT4B                  CONTINUE\nMFMT4A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHN              MOVE MONTH NAME\nMFMT4B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 5: TEXT 2 (MMM D, YYYY)\n*\nMFMT5    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT5A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT5B                  CONTINUE\nMFMT5A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\nMFMT5B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 6: TEXT 3 (DAYNAME, MMMMMMMMM D, YYYY)\n*\nMFMT6    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYN                MOVE DAY OF WEEK NAME\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT6A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHN              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT6B                  CONTINUE\nMFMT6A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHN              MOVE MONTH NAME\nMFMT6B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 7: TEXT 4 (DAYNAME, MMM D, YYYY)\n*\nMFMT7    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYN                MOVE DAY OF WEEK NAME\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT7A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT7B                  CONTINUE\nMFMT7A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\nMFMT7B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 8: TEXT 5 (DAY, MMMMMMMMM D, YYYY)\n*\nMFMT8    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYA                MOVE DAY OF WEEK ABBREVIATION\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT8A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHN              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT8B                  CONTINUE\nMFMT8A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHN              MOVE MONTH NAME\nMFMT8B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 9: TEXT 6 (DAY, MMM D, YYYY)\n*\nMFMT9    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYA                MOVE DAY OF WEEK ABBREVIATION\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT9A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHA              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF ABBREVIATION\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT9B                  CONTINUE\nMFMT9A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\nMFMT9B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MOVE WEEKDAY NAME TO OUTPUT AREA FOLLOWED BY ', ' (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 6/7 ABOVE)\n*\nMDAYN    BAL   R8,LDAY                 GET ADDRESS/LENGTH OF DAYNAME\n         BCTR  R7,0                    DECREMENT LENGTH FOR EX\n         EX    R7,VARMOVE              MOVE DAY NAME\n         LA    R7,1(,R7)               RESTORE FULL NAME LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVC   0(2,R2),=C', '          INSERT COMMA/BLANK AFTER NAME\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    MOVE WEEKDAY ABBR TO OUTPUT AREA FOLLOWED BY ', ' (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 7/8 ABOVE)\n*\nMDAYA    BAL   R8,LDAY                 GET ADDRESS/LENGTH OF DAYNAME\n         LA    R7,2                    ABBR LENGTH MINUS 1 FOR EX\n         EX    R7,VARMOVE              MOVE DAY NAME\n         LA    R7,1(,R7)               RESTORE FULL MOVE LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVC   0(2,R2),=C', '          INSERT COMMA/BLANK AFTER NAME\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    MOVE MONTH NAME TO OUTPUT AREA FOLLOWED BY A BLANK (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 4/6/8 ABOVE)\n*\nMMONTHN  BAL   R8,LMONTH               GET ADDRESS/LENGTH OF MONTH\n         BCTR  R7,0                    DECREMENT LENGTH FOR EX\n         EX    R7,VARMOVE              MOVE MONTH NAME\n         LA    R7,1(,R7)               RESTORE FULL NAME LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVI   0(R2),C' '              INSERT BLANK AFTER NAME\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\nVARMOVE  MVC   0(0,R2),0(R6)           VARIABLE MOVE FOR EXECUTE\n*\n*    MOVE MONTH ABBR TO OUTPUT AREA FOLLOWED BY A BLANK (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 5/7/9 ABOVE)\n*\nMMONTHA  BAL   R8,LMONTH               GET ADDRESS/LENGTH OF MONTH\n         LA    R7,2                    ABBR LENGTH MINUS 1 FOR EX\n         EX    R7,VARMOVE              MOVE MONTH NAME\n         LA    R7,1(,R7)               RESTORE FULL MOVE LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVI   0(R2),C' '              INSERT BLANK AFTER NAME\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    MOVE DAY OF MONTH TO OUTPUT AREA (COMMON ROUTINE PERFORMED FROM\n*    MAJOR FORMAT CODE ROUTINES 4 THROUGH 9 ABOVE)\n*\nMDAY     CLI   PDATE+2,C'0'            IS FIRST DIGIT ZERO?\n         BNE   MDAY2                   NO, MOVE BOTH DIGITS\nMDAY1    MVC   0(1,R2),PDATE+3         MOVE ONLY RIGHT DIGIT\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\nMDAY2    MVC   0(2,R2),PDATE+2         MOVE BOTH DIGITS\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    LOAD ADDRESS OF DAY NAME IN R6, LENGTH IN R7 (COMMON ROUTINE\n*    PERFORMED FROM MDAYN AND MDAYA ABOVE)\n*\nLDAY     PACK  DWORK(1),DDOW(1)        PACK DAY INTEGRAL NUMBER\n         ZAP   DWORK(8),DWORK(1)       EXPAND TO DOUBLEWORD\n         CVB   R6,DWORK                CONVERT TO BINARY\n         MH    R6,=H'12'               MULTIPLY BY 12 (LENGTH OF ENTRY)\n         LA    R7,DNAME(R6)            LOAD ADDRESS OF NAME'S SIZE\n         LA    R6,2(,R7)               LOAD ADDRESS OF DAY'S NAME\n         LH    R7,0(,R7)               LOAD SIZE OF DAY'S NAME\n         BR    R8                      AND RETURN\n*\n*    LOAD ADDRESS OF MONTH NAME IN R6, LENGTH IN R7 (COMMON ROUTINE\n*    PERFORMED FROM MMONTHN AND MMONTHA ABOVE)\n*\nLMONTH   PACK  DWORK(2),PDATE(2)       PACK MONTH INTEGRAL NUMBER\n         ZAP   DWORK(8),DWORK(2)       EXPAND TO DOUBLEWORD\n         CVB   R6,DWORK                CONVERT TO BINARY\n         BCTR  R6,0                    DECREMENT BY 1 (ZERO BASED)\n         MH    R6,=H'12'               MULTIPLY BY 12 (LENGTH OF ENTRY)\n         LA    R7,MNAME(R6)            LOAD ADDRESS OF NAME'S SIZE\n         LA    R6,2(,R7)               LOAD ADDRESS OF MONTH'S NAME\n         LH    R7,0(,R7)               LOAD SIZE OF MONTH'S NAME\n         BR    R8                      AND RETURN\n*\n*    RETURN THE SIZE OF THE OUTPUT FIELD IN BYTES (COMMON ROUTINE\n*    BRANCHED TO BY ALL MAJOR FORMAT CODE ROUTINES ABOVE)\n*\nSETSIZE  LA    R1,POUTDATE             GET ADDRESS OF FIELD START\n         SR    R2,R1                   COMPUTE LENGTH OF FIELD\n         CVD   R2,DWORK                CONVERT TO DECIMAL\n         UNPK  DWORK(3),DWORK+6(2)     UNPACK SIZE\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PSIZE,DWORK+1           MOVE TO OUTPUT FIELD\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         EJECT\n* ******************************************************************* *\n* **************************** CONSTANTS **************************** *\n* ******************************************************************* *\n*\n*    DAY OF WEEK NAMES, PRECEEDED BY LENGTH ATTRIBUTE\n*\nDNAME    DC    H'6',CL10'MONDAY  '\n         DC    H'7',CL10'TUESDAY '\n         DC    H'9',CL10'WEDNESDAY'\n         DC    H'8',CL10'THURSDAY '\n         DC    H'6',CL10'FRIDAY  '\n         DC    H'8',CL10'SATURDAY '\n         DC    H'6',CL10'SUNDAY  '\n*\n*    MONTH NAMES, PRECEEDED BY LENGTH ATTRIBUTE\n*\nMNAME    DC    H'7',CL10'JANUARY '\n         DC    H'8',CL10'FEBRUARY '\n         DC    H'5',CL10'MARCH   '\n         DC    H'5',CL10'APRIL   '\n         DC    H'3',CL10'MAY     '\n         DC    H'4',CL10'JUNE    '\n         DC    H'4',CL10'JULY    '\n         DC    H'6',CL10'AUGUST  '\n         DC    H'9',CL10'SEPTEMBER'\n         DC    H'7',CL10'OCTOBER '\n         DC    H'8',CL10'NOVEMBER '\n         DC    H'8',CL10'DECEMBER '\n* ******************************************************************* *\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nDOWNPARM DS    0H                      PARAMETERS FOR Y2KDOWN\nDDATE    DS    CL8                       INPUT DATE\nDRC      DS    CL1                       RETURN CODE\nDDOW     DS    CL1                       INTEGRAL DAY OF WEEK\nDWORK    DS    D                       DOUBLEWORD WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPMAJOR   DS    CL1                     MAJOR FORMAT CODE\nPMINOR   DS    CL1                     MINOR FORMAT CODE\nPRC      DS    CL1                     RETURN CODE (0, 2-6, 8)\nPSIZE    DS    CL2                     SIZE OF OUTPUT FIELD\nPOUTDATE DS    CL1                     OUTPUT DATE (SIZE WILL VARY!)\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KDOWN": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f C\\x00\\xb4\\x00\\xb4\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:43:37", "lines": 180, "newlines": 180, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KDOWN - DETERMINES DAY NUMBER FOR DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK DDDDDD   OOOOO  WW   WW NN   NN           *\n*   YY   YY  2   2  KK  KK  DD   DD OO   OO WW   WW NNN  NN           *\n*   YY   YY      2  KK KK   DD   DD OO   OO WW   WW NNN  NN           *\n*    YY YY       2  KKKK    DD   DD OO   OO WW   WW NNNN NN           *\n*     YYY     222   KKKK    DD   DD OO   OO WW W WW NN NNNN           *\n*     YY     2      KK KK   DD   DD OO   OO WWWWWWW NN  NNN           *\n*     YY     2      KK  KK  DD   DD OO   OO WWW WWW NN  NNN           *\n*     YY     22222  KK   KK DDDDDD   OOOOO   W   W  NN   NN           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES THE INTEGRAL NUMBER OF THE DAY        *\n*    OF THE WEEK A GREGORIAN DATE (MMDDYYYY) FALLS ON                 *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-DECIMAL    *\n*            FORMAT) TO BE PROCESSED,                                 *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 1 BYTE FIELD IN WHICH THE INTEGRAL DAY NUMBER (IN      *\n*            ZONED-DECIMAL FORMAT) WILL BE PLACED.                    *\n*        THE ROUTINE WILL NOT ALTER THE YEAR PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KDOWN,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'04151997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             DOWN     DS    ZL1'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  DOWN-PARAMETERS.                                    *\n*                 02  DATE PIC 9(8) VALUE 04151997.                   *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  DOWN PIC 9(1) VALUE 0.                          *\n*             CALL 'Y2KDOWN' USING DOWN-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE INTEGRAL DAY NUMBER ON WHICH  *\n*        THE INPUT DATE FALLS (0=MONDAY, 1=TUESDAY, ... 6=SUNDAY)     *\n*        WILL BE PLACED IN THE 3RD PARAMETER FIELD.  IF THE RETURN    *\n*        CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE       *\n*        3RD PARAMETER FIELD WILL CONTAIN THE VALUE OF 9 TO PROTECT   *\n*        AGAINST UNINTENTIONAL USE OF AN INVALID RESULT.              *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KDOWN  CSECT\n*         PRINT NOGEN\n         EYEC  'RETURN DAY OF WEEK FOR DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KDOWN,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KDOWN GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KDOWN GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DAY OF WEEK NUMBER.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVI   PDOWN,C'9'              UNDETERMINED DOWN\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR DATE PASSED\n*\n         MVC   GDATE,PDATE             LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    INTEGRAL DAY NUMBER IS THE REMAINDER OF ASTRO NUMBER / 7.\n*\nP1OK     PACK  WORK(8),ANUM(7)         PACK ASTRO NUMBER\n         DP    WORK,=P'7'              DIVIDE BY 7\n         UNPK  PDOWN,WORK+7(1)         UNPACK REMAINDER\n         OI    PDOWN,X'F0'             REMOVE SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nGDATE    DS    CL8                       DATE INPUT\nRCG      DS    CL1                       RETURN CODE\nANUM     DS    ZL7                       ASTRO NUMBER\nWORK     DS    PL8                     WORK FIELD FOR DIVISION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0/2/4/6/8)\nPDOWN    DS    CL1                     INTEGRAL DAY NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KESTR": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x01(\\x01(\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 296, "newlines": 296, "modlines": 0, "user": "MOSELEY"}, "text": "         TITLE 'Y2KESTR - DETERMINES DATE ON WHICH EASTER FALLS'\n* ******************************************************************* *\n* ******************************************************************* *\n*  THIS PROGRAM IS COPYRIGHTED BY:  MR. JAY MOSELEY, CCP              *\n*                                   200 HEYWOOD AVE 1503              *\n*                                   SPARTANBURG, SC 29307-1792        *\n*  NO USE MAY BE MADE OF THE DESIGN, CODING STRUCTURE, OR ANY PART    *\n*  THEREOF WITHOUT THE EXPRESS WRITTEN PERMISSION OF THE AUTHOR IN    *\n*  ADVANCE.  (1996, 1997, 1998, 1999, 2000)                           *\n* ******************************************************************* *\n* ******************************************************************* *\n*                                                                     *\n*   YY   YY   222   KK   KK EEEEEE   SSSSS TTTTTTTT RRRRRR            *\n*   YY   YY  2   2  KK  KK  EE      SS   SS   TT    RR   RR           *\n*   YY   YY      2  KK KK   EE      SS        TT    RR   RR           *\n*    YY YY       2  KKKK    EEEE     SSSSS    TT    RR   RR           *\n*     YYY     222   KKKK    EE           SS   TT    RRRRRR            *\n*     YY     2      KK KK   EE      SS   SS   TT    RR RR             *\n*     YY     2      KK  KK  EE      SS   SS   TT    RR  RR            *\n*     YY     22222  KK   KK EEEEEEE  SSSSS    TT    RR   RR           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES THE DATE ON WHICH EASTER FALLS        *\n*    FOR A GIVEN YEAR                                                 *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 4 BYTE FIELD CONTAINING THE YEAR TO BE PROCESSED       *\n*            (IN ZONED-DECIMAL FORMAT),                               *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE GREGORIAN DATE    *\n*            ON WHICH EASTER FALLS (IN ZONED-DECIMAL FORMAT).         *\n*        THE ROUTINE WILL NOT ALTER THE YEAR PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KESTR,(YEAR)                           *\n*                         . . .                                       *\n*             YEAR     DS    ZL4'1997'                                *\n*             RC       DS    ZL1'0'                                   *\n*             EASTER   DS    CL8'00000000'                            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  ESTR-PARAMETERS.                                    *\n*                 02  YEAR   PIC 9(4) VALUE 1997.                     *\n*                 02  RC     PIC 9(1) VALUE 0.                        *\n*                 02  EASTER PIC 9(8) VALUE 0.                        *\n*             CALL 'Y2KESTR' USING ESTR-PARAMETERS.                   *\n*                                                                     *\n*    3.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE YEAR FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE GREGORIAN DATE (MMDDYYYY)     *\n*        ON WHICH EASTER FALLS FOR THE GIVEN YEAR WILL BE PLACED      *\n*        IN THE 3RD PARAMETER FIELD.  IF THE RETURN CODE IS A         *\n*        NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE OUTPUT DATE     *\n*        FIELD WILL CONTAIN ZEROS.                                    *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KESTR  CSECT\n         PRINT NOGEN\n         EYEC  'RETURN EASTER DATE FOR GIVEN YEAR'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KESTR,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KESTR GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KESTR GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND EASTER OUTPUT DATE.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            ZERO RETURN DATE\n*\n*    TEST YEAR FOR INVALID CHARACTER\n*\n         LA    R2,PYEAR                ADDRESS PASSED YEAR\n         LA    R3,3                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n*\n*    YEAR CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  P3(3),PYEAR             PACK PASSED YEAR\n         CP    P3(3),=P'1601'          IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    P3(3),=P'3399'          IS YEAR AFTER 3399?\n         BNH   P1OK                    IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    STEP 1: COMPUTE CENTURY NUMBER + 1.\n*\nP1OK     PACK  CENT,PYEAR(2)           DIVIDE BY 100\n         AP    CENT,=P'1'              ADD 1\n*\n*    STEP 2: COMPUTE NON-LEAP-YEAR CENTESIMALS.\n*\n         ZAP   P5,P3                   EXPAND FULL YEAR\n         SP    P5,=P'1600'             SUBTRACT 1600\n         DP    P5,=P'400'              DIVIDE BY 400\n         ZAP   T2,P5+1(2)              TAKE QUOTIENT\n         MP    T2,=P'3'                MULTIPLY BY 3\n         ZAP   P5,P5+3(2)              TAKE REMAINDER\n         DP    P5,=P'100'              DIVIDE BY 100\n         ZAP   T3,P5+2(1)              SAVE QUOTIENT\n         ZAP   NONL,T2                 COMBINE THE\n         AP    NONL,T3                   TWO ANSWERS\n*\n*    STEP 3: COMPUTE YEAR'S POSITION IN METONIC CYCLE.\n*\n         ZAP   P5,P3                   EXPAND FULL YEAR\n         DP    P5,=P'19'               DIVIDE BY 19\n         AP    P5+3(2),=P'1'           ADD 1 TO REMAINDER\n         ZAP   MET,P5+3(2)             SAVE ANSWER\n*\n*    STEP 4: COMPUTE CORRECTION FOR METONIC CYCLE.\n*\n         ZAP   P5,CENT                 EXPAND CENTURY NUMBER\n         MP    P5,=P'8'                MULTIPLY BY 8\n         AP    P5,=P'5'                ADD 5\n         DP    P5,=P'25'               DIVIDE BY 25\n         SP    P5(3),=P'5'             SUBTRACT 5\n         SP    P5(3),NONL              SUBTRACT NONL\n         ZAP   METC,P5+1(2)            SAVE ANSWER\n*\n*    STEP 5: COMPUTE DAY COUNT MODIFIER.\n*\n         ZAP   P5,P3                   EXPAND FULL YEAR\n         MP    P5,=P'5'                MULTIPLY BY 5\n         DP    P5,=P'4'                DIVIDE BY 4\n         SP    P5(4),NONL              SUBTRACT NONL\n         SP    P5(4),=P'10'            SUBTRACT 10\n         ZAP   DMOD,P5+1(3)            SAVE ANSWER\n*\n*    STEP 6: COMPUTE THE EPACT.\n*\n         ZAP   P5,MET                  TAKE THE METONIC POSITION\n         MP    P5,=P'11'               MULTIPLY BY 11\n         AP    P5,=P'20'               ADD 20\n         AP    P5,METC                 ADD THE METONIC CORRECTION\n         DP    P5,=P'30'               DIVIDE BY 30\n         ZAP   EPACT,P5+3(2)           SAVE THE ANSWER\n*\n*    STEP 7: DETERMINE THE EPACT VALUE.\n*\n         CP    EPACT,=P'25'            IS EPACT 25?\n         BNE   EADJ                    NO\n*\n*    STEP 8: DETERMINE THE METONIC CYCLE POSITION FOR EPACT ADJUSTMENT.\n*\n         CP    MET,=P'11'              IS METONIC CYCLE 11?\n         BNH   EADJ                    NO\n         AP    EPACT,=P'1'             ADD 1 TO EPACT\n*\n*    STEP 9: DETERMINE THE EPACT VALUE FOR ADJUSTMENT.\n*\nEADJ     CP    EPACT,=P'24'            IS EPACT 24?\n         BNE   DAYV                    NO\n         AP    EPACT,=P'1'             ADD 1 TO EPACT\n*\n*    STEP 10: COMPUTE VALUE OF DAY.\n*\nDAYV     ZAP   DAY,=P'44'              INITIALIZE DAY TO 44\n         SP    DAY,EPACT               SUBTRACT EPACT\n*\n*    STEP 11: DETERMINE DAY VALUE FOR ADJUSTMENT.\n*\n         CP    DAY,=P'21'              IS DAY 21 OR GREATER?\n         BNL   CANDA                   YES\n         AP    DAY,=P'30'              ADD 30 TO DAY\n*\n*    STEP 12: FIND MODIFIED DAY VALUE.\n*\nCANDA    ZAP   P4,DAY                  EXPAND DAY\n         AP    P4,=P'7'                ADD 7\n         ZAP   P5,DAY                  EXPAND DAY\n         AP    P5,DMOD                 ADD DMOD\n         DP    P5,=P'7'                DIVIDE BY 7\n         SP    P4,P5+4(1)              SUBTRACT REMAINDER\n         ZAP   DAY,P4+2(2)             SAVE ANSWER\n*\n*    STEP 13: FIND EXACT DATE:  IF DAY LESS THAN/EQUAL 31, EASTER IS\n*    03/DAY/YR ELSE EASTER IS 04/(DAY - 31)/YR.\n*\n         MVC   PEASTER(2),=C'03'       ASSUME MONTH IS MARCH\n         CP    DAY,=P'31'              IS DAY GREATER THAN 31?\n         BNH   MARCH                   NO\n         MVC   PEASTER(2),=C'04'       MONTH IS APRIL\n         SP    DAY,=P'31'              ADJUST DAY\nMARCH    UNPK  Z3,DAY                  UNPACK DAY\n         OI    Z3+2,X'F0'              CLEAR SIGN\n         MVC   PEASTER+2(2),Z3+1       MOVE DAY\n         MVC   PEASTER+4(4),PYEAR      MOVE YEAR\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nP3       DS    PL3                     WORK AREA\nP4       DS    PL4                     WORK AREA\nP5       DS    PL5                     WORK AREA\nZ3       DS    ZL3                     WORK AREA\nCENT     DS    PL2                     CENTURY NUMBER\nT2       DS    PL2                     INTERMEDIATE ANSWER\nT3       DS    PL1                     INTERMEDIATE ANSWER\nNONL     DS    PL2                     INTERMEDIATE ANSWER\nMET      DS    PL2                     INTERMEDIATE ANSWER\nMETC     DS    PL2                     INTERMEDIATE ANSWER\nDMOD     DS    PL3                     INTERMEDIATE ANSWER\nEPACT    DS    PL2                     INTERMEDIATE ANSWER\nDAY      DS    PL2                     INTERMEDIATE ANSWER\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPYEAR    DS    CL4                     YEAR TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0/2/4)\nPEASTER  DS    CL8                     DATE OF EASTER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KGETD": {"ttr": 3076, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f C\\x00\\xb9\\x00\\xb9\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:43:52", "lines": 185, "newlines": 185, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KGETD - GET CURRENT SYSTEM DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK  GGGGG  EEEEEE TTTTTTTT DDDDDD            *\n*   YY   YY  2   2  KK  KK  GG   GG EE        TT    DD   DD           *\n*   YY   YY      2  KK KK   GG   GG EE        TT    DD   DD           *\n*    YY YY       2  KKKK    GG      EEEE      TT    DD   DD           *\n*     YYY     222   KKKK    GG  GGG EE        TT    DD   DD           *\n*     YY     2      KK KK   GG   GG EE        TT    DD   DD           *\n*     YY     2      KK  KK  GG   GG EE        TT    DD   DD           *\n*     YY     22222  KK   KK  GGGGG  EEEEEEE   TT    DDDDDD            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE RETRIEVES THE CURRENT DATE FROM THE OPERATING    *\n*    SYSTEM AND RETURNS IT IN 3 FORMATS                               *\n*                                                                     *\n*    1.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE CURRENT GREGORIAN *\n*            DATE (IN ZONED-DECIMAL FORMAT),                          *\n*        2)  A 7 BYTE FIELD WHICH WILL RECEIVE THE CURRENT JULIAN     *\n*            DATE (IN ZONED-DECIMAL FORMAT), AND                      *\n*        3)  A 7 BYTE FIELD WHICH WILL RECEIVE THE ASTRONOMICAL       *\n*            NUMBER (IN ZONED-DECIMAL FORMAT) FOR THE CURRENT DATE.   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KGETD,(DATEG)                          *\n*                         . . .                                       *\n*             DATEG    DS    ZL8'00000000'                            *\n*             DATEJ    DS    ZL7'0000000'                             *\n*             ANUM     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  GETD-PARAMETERS.                                    *\n*                 02  DATEG PIC 9(8) VALUE 0.                         *\n*                 02  DATEJ PIC 9(7) VALUE 0.                         *\n*                 02  ANUM  PIC 9(7) VALUE 0.                         *\n*             CALL 'Y2KGETD' USING GETD-PARAMETERS.                   *\n*                                                                     *\n*    2.  UPON SUCCESSFUL EXECUTION, THE CURRENT DATE IN GREGORIAN     *\n*        (MMDDYYYY) AND JULIAN (YYYYDDD) WILL BE PLACED IN FIELDS     *\n*        1 AND 2, RESPECTIVELY, AND THE ASTRONOMICAL NUMBER FOR THE   *\n*        CURRENT DATE WILL BE PLACED IN FIELD 3.                      *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KGETD  CSECT\n*         PRINT NOGEN\n         EYEC  'RETURN SYSTEM DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KGETD,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KGETD GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KGETD GETMAIN ENDS'\n*\n*    RETRIEVE SYSTEM DATE\n*\n*         XC    SYSTIME,SYSTIME         CLEAR DATE/TIME RETURN AREA\n*         TIME  DEC,SYSTIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY,\n*               MF=(E,TIMEPL)\n*\n*    MODIFIED FOR MVS3.8J WHICH LACKS CURRENT TIME MACRO FUNCTIONALITY\n*\n          TIME  DEC                     GET DECIMAL DATE/TIME VALUE\n          STM   R0,R1,SYSTWRK           STORE IN WORK AREA\n          AP    SYSTWRK+4(4),=PL4'1900000' ADD 19 TO CENTURY BYTE\n          UNPK  SYSTIME,SYSTWRK         UNPACK DATE/TIME FIELDS\n          OI    SYSTIME+15,X'F0'        CLEAR SIGN\n          LA    R1,SYSTIME              RETRIEVE\n          MVC   JDATEJ,9(R1)              DATE VALUE\n          MVC   PDATEJ,9(R1)                FOR SUBROUTINE\n          LA    R1,JTOGPARM             STORE\n          ST    R1,PLIST                  IN\n          LA    R1,PLIST                    PARAMETER\n          L     R15,=V(Y2KJTOG)               LIST\n          BALR  R14,R15                         AND CALL\n          MVC   PDATEG,JDATEG           STORE GREGORIAN DATE\n          B     MVSCONT                 AND CONTINUE NORMALLY\n*\n*    UNPACK FIELDS FROM MACRO CALL INTO OUTPUT AREA\n*\n         UNPK  Z5,SYSTIME+8(3)         UNPACK YEAR\n         MVC   PDATEG+4(4),Z5          MOVE TO OUTPUT FIELD\n         UNPK  Z5,SYSTIME+10(3)        UNPACK MONTH, DAY\n         MVC   PDATEG(4),Z5            MOVE TO OUTPUT FIELD\n*\n*    CALL Y2KGTOJ TO GET JULIAN VERSION OF DATE.\n*\n         MVC   GDATEG,PDATEG           LOAD DATE TO PASS\n         LA    R1,GTOJPARM             ADDRESS OF Y2KGTOJ PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOJ)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    MOVE RETURNED JULIAN DATE TO OUTPUT AREA.\n*\n         MVC   PDATEJ,GDATEJ           MOVE JULIAN TO OUTPUT AREA\n*\nMVSCONT  EQU   *\n*\n*    CALL Y2KGTOA TO GET ASTRONOMICAL NUMBER OF DATE.\n*\n         MVC   ADATEG,PDATEG           LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    MOVE RETURNED ASTRO NUMBER TO OUTPUT AREA.\n*\n         MVC   PANUM,ANUM              MOVE TO OUTPUT AREA\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG                         LITERAL POOL\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\n*SYSTIME  TIME  LINKAGE=SYSTEM,MF=L     PARAMETER LIST FOR TIME MACRO\n*\n* MODIFIED FOR MVS3.8J\n*\nSYSTIME  DS    CL16\nSYSTWRK  DS    D\nJTOGPARM DS    0H\nJDATEJ   DS    CL7\nJRC      DS    CL1\nJDATEG   DS    CL8\n*\nZ5       DS    ZL5                     WORK FIELD\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOJPARM DS    0H                      PARAMETERS FOR Y2KGTOJ\nGDATEG   DS    CL8                       INPUT DATE\nGRC      DS    CL1                       RETURN CODE\nGDATEJ   DS    CL7                       JULIAN DATE\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nADATEG   DS    CL8                       INPUT DATE\nARC      DS    CL1                       RETURN CODE\nANUM     DS    ZL7                       ASTRO NUMBER\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS TO CALLER\nPDATEG   DS    CL8                     GREGORIAN DATE\nPDATEJ   DS    CL7                     JULIAN DATE\nPANUM    DS    ZL7                     ASTRONOMICAL NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KGTOA": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f D\\x01<\\x01<\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:44:01", "lines": 316, "newlines": 316, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KGTOA - COMPUTE ASTRO NUMBER FROM GREGORIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK  GGGGG TTTTTTTT  OOOOO     A              *\n*   YY   YY  2   2  KK  KK  GG   GG   TT    OO   OO   AAA             *\n*   YY   YY      2  KK KK   GG   GG   TT    OO   OO  AA AA            *\n*    YY YY       2  KKKK    GG        TT    OO   OO AA   AA           *\n*     YYY     222   KKKK    GG  GGG   TT    OO   OO AA   AA           *\n*     YY     2      KK KK   GG   GG   TT    OO   OO AAAAAAA           *\n*     YY     2      KK  KK  GG   GG   TT    OO   OO AA   AA           *\n*     YY     22222  KK   KK  GGGGG    TT     OOOOO  AA   AA           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE ASTRONOMICAL NUMBER FOR A           *\n*    GIVEN GREGORIAN DATE (MMDDYYYY)                                  *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-           *\n*            DECIMAL FORMAT) FOR WHICH THE ASTRONOMICAL NUMBER IS     *\n*            TO BE CALCULATED,                                        *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 7 BYTE FIELD WHICH WILL RECEIVE THE ASTRONOMICAL       *\n*            NUMBER (IN ZONED-DECIMAL FORMAT).                        *\n*        THE ROUTINE WILL NOT ALTER THE DATE PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KGTOA,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'01011997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             ANUM     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  GTOA-PARAMETERS.                                    *\n*                 02  DATE PIC 9(8) VALUE 01011997.                   *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  ANUM PIC 9(7) VALUE 0.                          *\n*             CALL 'Y2KGTOA' USING GTOA-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE ASTRONOMICAL NUMBER FOR THE   *\n*        DATE WILL BE PLACED IN THE 3RD PARAMETER FIELD (ANUM).  IF   *\n*        THE RETURN CODE IS A NON-ZERO VALUE (UNSUCCESSFUL            *\n*        EXECUTION), THE ANUM FIELD WILL CONTAIN ZEROS.               *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KGTOA  CSECT\n*         PRINT NOGEN\n         EYEC  'RETURN ASTRO NUMBER FOR GREGORIAN DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KGTOA,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KGTOA GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KGTOA GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND ANUM PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(7),PRC            NULL ASTRONOMICAL NUMBER\n*\n*    TEST DATE FOR INVALID CHARACTER\n*\n         LA    R2,PDATE                ADDRESS PASSED DATE\n         LA    R3,7                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATE CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  YEAR(4),PDATE+4(4)      PACK PASSED YEAR\n         CP    YEAR(4),=P'1601'        IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    YEAR(4),=P'3399'        IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST MONTH FOR VALID RANGE\n*\nP1OK2    PACK  MONTH(2),PDATE(2)       PACK PASSED MONTH\n         CP    MONTH(2),=P'1'          IS MONTH ZERO?\n         BL    P1ERR3                  IF YES, MONTH NOT VALID\n         CP    MONTH(2),=P'12'         IS MONTH GREATER THAN 12?\n         BNH   P1OK3                   IF NOT, MONTH IS VALID\n*\n*    MONTH CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR3   MVI   PRC,C'6'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    DETERMINE LEAP YEAR STATUS\n*\nP1OK3    MVI   LEAP,C'0'               ASSUME NOT A LEAP YEAR\n         ZAP   DWORK(5),YEAR           PUT YEAR INTO WORK FIELD\n         DP    DWORK(5),=P'4'          DIVIDE YEAR BY 4\n         CP    DWORK+4(1),=P'0'        WAS IT EVENLY DIVISIBLE?\n         BH    P1CON4                  IF NOT, IT IS *NOT* LEAP YEAR\n         ZAP   DWORK(5),YEAR           PUT YEAR INTO WORK FIELD\n         DP    DWORK(5),=P'100'        DIVIDE YEAR BY 100\n         CP    DWORK+3(2),=P'0'        WAS IT EVENLY DIVISIBLE?\n         BH    ISLEAP                  IF NOT, IT IS A LEAP YEAR\n         ZAP   DWORK(5),YEAR           PUT YEAR INTO WORK FIELD\n         DP    DWORK(5),=P'400'        DIVIDE YEAR BY 400\n         CP    DWORK+3(2),=P'0'        WAS IT EVENLY DIVISIBLE?\n         BH    P1CON4                  IF NOT, IT IS *NOT* LEAP YEAR\n*\n*    TEST FOR LEAP YEAR SUCCEEDED, RESET LEAP INDICATOR.\n*\nISLEAP   MVI   LEAP,C'1'               INDICATE LEAP YEAR\n*\n*    DETERMINE MAXIMUM DAYS FOR GIVEN MONTH\n*\nP1CON4   LA    R4,DIM                  GET ADDRESS OF DAY TABLE\n         CLI   LEAP,C'0'               IS THIS LEAP YEAR?\n         BE    P1CON4A                 IF NOT, ADDRESS IS OK\n         LA    R4,2(,R4)               ELSE ADJUST TO LEAP ENTRY\nP1CON4A  ZAP   DWORK(8),MONTH          GET MONTH INTO DOUBLEWORD\n         CVB   R3,DWORK                CONVERT TO BINARY\n         BCTR  R3,0                    DECREMENT BY 1 (ZERO BASE)\n         SLL   R3,2                    MULTIPLY BY TABLE ENTRY LENGTH\n         LA    R4,0(R3,R4)             LOAD ENTRY ADDRESS INTO R4\n*\n*    TEST DAY FOR VALID RANGE\n*\n         PACK  DAY(2),PDATE+2(2)       PACK PASSED DAY\n         ZAP   DAY,DAY                 CONVERT SIGN OF DAY TO X'C'\n         CP    DAY(2),=P'1'            IS DAY ZERO?\n         BL    P1ERR4                  IF YES, DAY NOT VALID\n         CLC   DAY(2),0(R4)            IS DAY GREATER THAN MAX?\n         BNH   P1OK4                   IF NOT, MONTH IS VALID\n*\n*    DAY CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR4   MVI   PRC,C'8'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    COMPUTE ASTRONOMICAL NUMBER\n*\nP1OK4    CP    MONTH(2),=P'2'          IS MONTH GREATER THAN 2?\n         BH    COMP001                 YES\n*\n         AP    MONTH(2),=P'9'          INCREMENT MONTH BY 9\n         SP    YEAR(4),=P'1'           DECREMENT YEAR BY 1\n         B     COMP002                 PROCEED WITH CONVERSION\n*\nCOMP001  SP    MONTH(2),=P'3'          DECREMENT MONTH BY 3\n*\nCOMP002  DP    YEAR,=P'100'            DIVIDE BY 100\n         ZAP   TA,YEAR(2)              SAVE QUOTIENT IN TA\n         ZAP   TB,YEAR+2(2)            SAVE REMAINDER IN TB\n         MP    TA,=P'146097'           MULTIPLY BY 146097\n         DP    TA,=P'4'                DIVIDE BY 4\n         ZAP   TA,TA(7)                SHIFT QUOTIENT OVER REMAINDER\n*\n         MP    TB,=P'1461'             MULTIPLY BY 1461\n         DP    TB,=P'4'                DIVIDE BY 4\n         ZAP   TB,TB(7)                SHIFT QUOTIENT OVER REMAINDER\n*\n         ZAP   TC,MONTH\n         MP    TC,=P'153'              MULTIPLY BY 153\n         AP    TC,=P'2'                ADD 2\n         DP    TC,=P'5'                DIVIDE BY 5\n         ZAP   TC,TC(7)                SHIFT QUOTIENT OVER REMAINDER\n         AP    TC,DAY                  ADD DAY\n         AP    TC,=P'1721119'          ADD 1721119\n*\n         ZAP   TX,TA                   COMBINE THE ANSWERS\n         AP    TX,TB\n         AP    TX,TC\n*\n         UNPK  PANUM(7),TX+4(4)        UNPACK ANUM\n         OI    PANUM+6,X'F0'           CLEAR SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n         EJECT\n* ******************************************************************* *\n* **************************** CONSTANTS **************************** *\n* ******************************************************************* *\n*\n*    MAXIMUM DAYS IN MONTHS ... EACH ENTRY HAS 2 VALUES, THE 1ST FOR\n*    A NORMAL (NON-LEAP) YEAR AND THE 2ND FOR A LEAP YEAR\n*\nDIM      DC    PL2'31',PL2'31'           JANUARY\n         DC    PL2'28',PL2'29'           FEBRUARY\n         DC    PL2'31',PL2'31'           MARCH\n         DC    PL2'30',PL2'30'           APRIL\n         DC    PL2'31',PL2'31'           MAY\n         DC    PL2'30',PL2'30'           JUNE\n         DC    PL2'31',PL2'31'           JULY\n         DC    PL2'31',PL2'31'           AUGUST\n         DC    PL2'30',PL2'30'           SEPTEMBER\n         DC    PL2'31',PL2'31'           OCTOBER\n         DC    PL2'30',PL2'30'           NOVEMBER\n         DC    PL2'31',PL2'31'           DECEMBER\n* ******************************************************************* *\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nMONTH    DS    PL2                     GREGORIAN MONTH\nDAY      DS    PL2                     GREGORIAN DAY\nYEAR     DS    PL4                     GREGORIAN YEAR\nTA       DS    PL8                     INTERMEDIATE ANSWER\nTB       DS    PL8                     INTERMEDIATE ANSWER\nTC       DS    PL8                     INTERMEDIATE ANSWER\nTX       DS    PL8                     INTERMEDIATE ANSWER\nLEAP     DS    CL1                     LEAP STATUS\nDWORK    DS    D                       DOUBLEWORD WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0/2/4/6/8)\nPANUM    DS    ZL7                     ASTRONOMICAL NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KGTOJ": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x10\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f D\\x00\\xc6\\x00\\xc6\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:44:10", "lines": 198, "newlines": 198, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KGTOJ - CONVERT GREGORIAN DATE TO JULIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK  GGGGG TTTTTTTT  OOOOO       JJ           *\n*   YY   YY  2   2  KK  KK  GG   GG   TT    OO   OO      JJ           *\n*   YY   YY      2  KK KK   GG   GG   TT    OO   OO      JJ           *\n*    YY YY       2  KKKK    GG        TT    OO   OO      JJ           *\n*     YYY     222   KKKK    GG  GGG   TT    OO   OO      JJ           *\n*     YY     2      KK KK   GG   GG   TT    OO   OO JJ   JJ           *\n*     YY     2      KK  KK  GG   GG   TT    OO   OO JJ   JJ           *\n*     YY     22222  KK   KK  GGGGG    TT     OOOOO   JJJJJ            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE JULIAN DATE(YYYYDDD) FOR A GIVEN    *\n*    A GREGORIAN DATE (MMDDYYYY)                                      *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-           *\n*            DECIMAL FORMAT) FOR WHICH THE JULIAN DAY NUMBER IS       *\n*            TO BE CALCULATED,                                        *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 7 BYTE FIELD WHICH WILL RECEIVE THE YEAR AND JULIAN    *\n*            DAY NUMBER (IN ZONED-DECIMAL FORMAT).                    *\n*        THE ROUTINE WILL NOT ALTER THE DATE PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KGTOJ,(DATEG)                          *\n*                         . . .                                       *\n*             DATEG    DS    ZL8'01011997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             JDATE    DS    ZL7'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  GTOJ-PARAMETERS.                                    *\n*                 02  DATEG PIC 9(8) VALUE 01011997.                  *\n*                 02  RC    PIC 9(1) VALUE 0.                         *\n*                 02  JDATE PIC 9(7) VALUE 0.                         *\n*             CALL 'Y2KGTOJ' USING GTOJ-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE 4 DIGIT YEAR PLUS THE 3       *\n*        DIGIT JULIAN DAY NUMBER (YYYYDDD) WILL BE PLACED IN THE      *\n*        3RD PARAMETER FIELD (IN ZONED-DECIMAL FORMAT).  IF THE       *\n*        RETURN CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION),    *\n*        THE 3RD PARAMETER FIELD WILL CONTAIN ZEROS.                  *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KGTOJ  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT GREGORIAN DATE TO JULIAN (DAY OF YEAR)'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KGTOJ,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KGTOJ GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KGTOJ GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND JULIAN OUTPUT FIELD.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(7),PRC            NULL JULIAN DATE\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR DATE PASSED\n*\n         MVC   DATEG,PDATEG            LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    SAVE THE ASTRONOMICAL NUMBER FOR DAY PASSED\n*\n         PACK  WORK(4),ANUMG(7)        SAVE ASTRO NUMBER\n*\n*    RETRIEVE THE ASTRONOMICAL NUMBER FOR JANUARY 1 OF THE SAME YEAR.\n*\n         MVC   DATEG(4),=C'0101'       SET DATE TO JAN 1\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    DECREASE BY 1 BECAUSE WE REALLY WANT TO SUBTRACT 12/31 OF THE\n*    PRIOR YEAR (IT'S JUST LESS WORK TO DO IT THIS WAY).\n*\n         PACK  WORK2(4),ANUMG(7)       PACK ASTRO NUMBER\n         SP    WORK2,=P'1'             SUBTRACT 1 FROM ASTRO NUMBER\n*\n*    SUBTRACT THAT NUMBER FROM THE PRIOR ONE.\n*\n         SP    WORK,WORK2              YIELDS DAY NUMBER\n         UNPK  PDATEJ+4(3),WORK+2(2)   UNPACK DAY NUMBER INTO OUTPUT\n         OI    PDATEJ+6,X'F0'          CLEAR SIGN\n         MVC   PDATEJ(4),PDATEG+4      PREPEND YEAR TO OUTPUT\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nDATEG    DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       ASTRO NUMBER\nWORK     DS    PL4                     WORK FIELD\nWORK2    DS    PL4                     WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATEG   DS    CL8                     GREGORIAN DATE INPUT\nPRC      DS    CL1                     RETURN CODE (0/2/4/6/8)\nPDATEJ   DS    CL7                     GREGORIAN DATE OUTPUT\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KIVP": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x03\\xad\\x03\\xad\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 941, "newlines": 941, "modlines": 0, "user": "MOSELEY"}, "text": "000200 IDENTIFICATION DIVISION.\n000300 PROGRAM-ID. Y2KIVP.\n000400 AUTHOR. JAY MOSELEY.\n000500 DATE-WRITTEN. FEBRUARY, 1997.\n000600 DATE-COMPILED.\n000700\n000800* ************************************************************* *\n000900* THE PURPOSE OF THIS PROGRAM IS TO VERIFY THE SUCCESSFUL       *\n001000* INSTALLATION AND FUNCTIONALITY OF THE SET OF DYNAMICALLY      *\n001100* CALLABLE YEAR 2000 SUBROUTINES (YEAR 2000 COMPLIANT DATE      *\n001200* ROUTINES).                                                    *\n001300*                                                               *\n001400* WHEN THE SUPPLIED DATA IS READ AND PROCESSED BY THIS PROGRAM, *\n001500* EACH OF THE ROUTINES WILL BE CALLED AND ALL FUNCTIONALITY OF  *\n001600* EACH IS THOROUGHLY TESTED.  THE OUTPUT REPORT SHOULD BE       *\n001700* COMPARED WITH THE BENCHMARK REPORT PRODUCED WHEN THE ROUTINES *\n001800* WERE ORIGINALLY CODED AND TESTED.  THE SHOULD BE IDENTICAL.   *\n001900* ************************************************************* *\n002000/\n002100 ENVIRONMENT DIVISION.\n002110 CONFIGURATION SECTION.\n002112 SPECIAL-NAMES.\n002114     C01 IS TO-FIRST-LINE.\n002200 INPUT-OUTPUT SECTION.\n002300 FILE-CONTROL.\n002400     SELECT DATA-FILE\n002500         ASSIGN TO UT-S-TESTDATA.\n002600\n002700     SELECT PRINT-FILE\n002800         ASSIGN TO UR-S-REPORT.\n002900 DATA DIVISION.\n003000\n003100 FILE SECTION.\n003200 FD  DATA-FILE\n003210     LABEL RECORDS ARE STANDARD\n003215     BLOCK CONTAINS 0 RECORDS\n003300     RECORD CONTAINS 80 CHARACTERS\n003400     DATA RECORD IS DATA-RECD.\n003500 01  DATA-RECORD                 PIC X(80).\n003600\n003700 FD  PRINT-FILE\n003710     LABEL RECORDS ARE OMITTED\n003800     RECORD CONTAINS 133 CHARACTERS\n003900     DATA RECORD IS PRINT-RECD.\n004000 01  PRINT-RECORD               PIC X(133).\n004100/\n004200 WORKING-STORAGE SECTION.\n004300\n004400* ************************************************************* *\n004500* THESE ARE PROGRAM CONTROL SWITCHES AND MISCELLANEOUS FIELDS.  *\n004600* ************************************************************* *\n004700 01  PROGRAM-CONTROL-FIELDS.\n004800     02  END-OF-DATA-SWITCH      PIC X(1) VALUE 'N'.\n004900         88  END-OF-DATA         VALUE 'Y'.\n005000     02  SYSTEM-TIME             PIC 9(8).\n005100     02  FILLER                  REDEFINES SYSTEM-TIME.\n005200         03  SYSTEM-TIME-SHORT   PIC 9(4).\n005300         03  FILLER              PIC 9(4).\n005400     02  PAGE-COUNT              PIC 999 VALUE ZERO.\n005402     02  LINE-COUNT              PIC 99  VALUE 99.\n005404     02  PAGE-SIZE               PIC 99  VALUE 42.\n005500\n005502     02  UNFORMATTED-GDATE       PIC X(8).\n005504     02  FILLER                  REDEFINES UNFORMATTED-GDATE.\n005506         03  UNFORMATTED-GMONTH  PIC 9(2).\n005508         03  UNFORMATTED-GDAY    PIC 9(2).\n005510         03  UNFORMATTED-GYEAR   PIC 9(4).\n005512\n005514     02  UNFORMATTED-JDATE       PIC X(7).\n005516     02  FILLER                  REDEFINES UNFORMATTED-JDATE.\n005518         03  UNFORMATTED-JYEAR   PIC 9(4).\n005520         03  UNFORMATTED-JDAY    PIC 9(3).\n005522\n005604     02  FORMATTED-GDATE         PIC X(10).\n005606     02  FILLER                  REDEFINES FORMATTED-GDATE.\n005608         03  FORMATTED-GMONTH    PIC Z9.\n005610         03  FILLER              PIC X(1).\n005612         03  FORMATTED-GDAY      PIC 9(2).\n005614         03  FILLER              PIC X(1).\n005616         03  FORMATTED-GYEAR     PIC 9(4).\n005700\n005702     02  FORMATTED-JDATE         PIC X(8).\n005704     02  FILLER                  REDEFINES FORMATTED-JDATE.\n005706         03  FORMATTED-JYEAR     PIC 9(4).\n005708         03  FILLER              PIC X(1).\n005710         03  FORMATTED-JDAY      PIC 9(3).\n005712\n005800* ************************************************************* *\n005900* FOLLOWING ARE SPECIFIC RECORD DESCRIPTIONS USED TO REDEFINE   *\n006000* THE TEST DATA INPUT RECORD FOR EACH OF THE 12 ROUTINES.       *\n006100* ************************************************************* *\n006200 01  TEST-RECORD.\n006300     02  TR-IDENTIFICATION       PIC X(4).\n006400     02  FILLER                  PIC X(1).\n006500     02  TR-DATA                 PIC X(75).\n006600\n006700     02  FILLER                  REDEFINES TR-DATA.\n006800         03  TR-ATOG-ANUM        PIC X(7).\n006900         03  FILLER              PIC X(68).\n007000\n007100     02  FILLER                  REDEFINES TR-DATA.\n007200         03  TR-CONV-DATE        PIC X(6).\n007300         03  FILLER              PIC X(1).\n007400         03  TR-CONV-FORMAT      PIC X(1).\n007500         03  FILLER              PIC X(1).\n007600         03  TR-CONV-BREAK       PIC X(2).\n007700         03  FILLER              PIC X(64).\n007800\n007900     02  FILLER                  REDEFINES TR-DATA.\n008000         03  TR-DFMT-DATE        PIC X(8).\n008100         03  FILLER              PIC X(1).\n008200         03  TR-DFMT-MAJOR       PIC X(1).\n008300         03  FILLER              PIC X(1).\n008400         03  TR-DFMT-MINOR       PIC X(1).\n008500         03  FILLER              PIC X(63).\n008600\n008700     02  FILLER                  REDEFINES TR-DATA.\n008800         03  TR-DOWN-DATE        PIC X(8).\n008900         03  FILLER              PIC X(67).\n009000\n009100     02  FILLER                  REDEFINES TR-DATA.\n009200         03  TR-GTOA-DATE        PIC X(8).\n009300         03  FILLER              PIC X(67).\n009400\n009500     02  FILLER                  REDEFINES TR-DATA.\n009600         03  TR-GTOJ-DATE        PIC X(8).\n009700         03  FILLER              PIC X(67).\n009800\n009900     02  FILLER                  REDEFINES TR-DATA.\n010000         03  TR-JTOG-DATE        PIC X(7).\n010100         03  FILLER              PIC X(68).\n010200\n010300     02  FILLER                  REDEFINES TR-DATA.\n010400         03  TR-LAGE-DATE1       PIC X(8).\n010500         03  FILLER              PIC X(1).\n010600         03  TR-LAGE-DATE2       PIC X(8).\n010700         03  FILLER              PIC X(58).\n010800\n010900     02  FILLER                  REDEFINES TR-DATA.\n011000         03  TR-PROJ-DATE        PIC X(8).\n011100         03  FILLER              PIC X(1).\n011200         03  TR-PROJ-INCREMENT   PIC X(6).\n011300         03  FILLER              PIC X(60).\n011400\n011500     02  FILLER                  REDEFINES TR-DATA.\n011600         03  TR-SAGE-DATE1       PIC X(8).\n011700         03  FILLER              PIC X(1).\n011800         03  TR-SAGE-DATE2       PIC X(8).\n011900         03  FILLER              PIC X(58).\n012000\n012100     02  FILLER                  REDEFINES TR-DATA.\n012200         03  TR-TDOW-DATE        PIC X(8).\n012300         03  FILLER              PIC X(1).\n012400         03  TR-TDOW-DIRECTION   PIC X(1).\n012500         03  FILLER              PIC X(1).\n012600         03  TR-TDOW-DAY-NUMBER  PIC X(1).\n012700         03  FILLER              PIC X(63).\n012800\n012900* ************************************************************* *\n013000* FOLLOWING ARE SPECIFIC DATA DESCRIPTIONS FOR THE PARAMETERS   *\n013100* REQUIRED FOR THE CALLS TO THE 12 Y2K ROUTINES.                *\n013200* ************************************************************* *\n013300 01  INTER-PROGRAM-DATA          PIC X(42).\n013400\n013500 01  ATOG-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n013600     02   ATOGP-ANUM             PIC X(7).\n013700     02   ATOGP-RETURN-CODE      PIC 9(1).\n013800     02   ATOGP-DATE             PIC 9(8).\n013900     02   FILLER                 PIC X(26).\n014000\n014100 01  CONV-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n014200     02   CONVP-DATEIN           PIC X(6).\n014300     02   CONVP-FORMAT           PIC X(1).\n014400     02   CONVP-BREAK            PIC X(2).\n014500     02   CONVP-RETURN-CODE      PIC 9(1).\n014600     02   CONVP-DATE-G           PIC 9(8).\n014700     02   CONVP-DATE-J           PIC 9(7).\n014800     02   CONVP-ANUM             PIC S9(7).\n014900     02   FILLER                 PIC X(10).\n015000\n015100 01  DFMT-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n015200     02   DFMTP-DATEIN           PIC X(8).\n015300     02   DFMTP-MAJOR            PIC X(1).\n015400     02   DFMTP-MINOR            PIC X(1).\n015500     02   DFMTP-RETURN-CODE      PIC 9(1).\n015600     02   DFMTP-OUTPUT-SIZE      PIC S9(2).\n015700     02   DFMTP-OUTPUT           PIC X(29).\n015800\n015900 01  DOWN-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n016000     02   DOWNP-DATE             PIC X(8).\n016100     02   DOWNP-RETURN-CODE      PIC 9(1).\n016200     02   DOWNP-DAY-NUMBER       PIC 9(1).\n016300     02   FILLER                 PIC X(32).\n016400\n016500 01  GETD-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n016600     02   GETDP-DATE-G           PIC 9(8).\n016700     02   GETDP-DATE-J           PIC 9(7).\n016800     02   GETDP-ANUM             PIC S9(7).\n016900     02   FILLER                 PIC X(20).\n017000\n017100 01  GTOA-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n017200     02   GTOAP-DATE-G           PIC X(8).\n017300     02   GTOAP-RETURN-CODE      PIC 9(1).\n017400     02   GTOAP-ANUM             PIC S9(7).\n017500     02   FILLER                 PIC X(26).\n017600\n017700 01  GTOJ-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n017800     02   GTOJP-DATE-G           PIC X(8).\n017900     02   GTOJP-RETURN-CODE      PIC 9(1).\n018000     02   GTOJP-DATE-J           PIC 9(7).\n018100     02   FILLER                 PIC X(26).\n018200\n018300 01  JTOG-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n018400     02   JTOGP-DATE-J           PIC X(7).\n018500     02   JTOGP-RETURN-CODE      PIC 9(1).\n018600     02   JTOGP-DATE-G           PIC 9(8).\n018700     02   FILLER                 PIC X(26).\n018800\n018900 01  LAGE-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n019000     02   LAGEP-DATE1            PIC X(8).\n019100     02   LAGEP-DATE2            PIC X(8).\n019200     02   LAGEP-RETURN-CODE      PIC 9(1).\n019300     02   LAGEP-DAYS-PAST        PIC S9(2).\n019400     02   LAGEP-MONTHS-PAST      PIC S9(2).\n019500     02   LAGEP-YEARS-PAST       PIC S9(5).\n019600     02   FILLER                 PIC X(16).\n019700\n019800 01  PROJ-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n019900     02   PROJP-DATE             PIC X(8).\n020000     02   PROJP-INCREMENT        PIC X(6).\n020100     02   PROJP-RETURN-CODE      PIC 9(1).\n020200     02   PROJP-NEW-DATE         PIC 9(8).\n020300     02   FILLER                 PIC X(19).\n020400\n020500 01  SAGE-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n020600     02   SAGEP-DATE1            PIC X(8).\n020700     02   SAGEP-DATE2            PIC X(8).\n020800     02   SAGEP-RETURN-CODE      PIC 9(1).\n020900     02   SAGEP-DAYS-PAST        PIC S9(7).\n021000     02   FILLER                 PIC X(18).\n021100\n021200 01  TDOW-PARAMETERS             REDEFINES INTER-PROGRAM-DATA.\n021300     02   TDOWP-DATEIN           PIC X(8).\n021400     02   TDOWP-DIRECTION        PIC X(1).\n021500     02   TDOWP-DAY-NUMBER       PIC X(1).\n021600     02   TDOWP-RETURN-CODE      PIC 9(1).\n021700     02   TDOWP-NEW-DATE         PIC 9(8).\n021800     02   FILLER                 PIC X(23).\n021900\n022000* ************************************************************* *\n022100* FOLLOWING ARE THE REPORT HEADING AND DETAIL DESCRIPTIONS.     *\n022200* ************************************************************* *\n022300\n022400 01  HEADING-1.\n022410     02  FILLER  PIC X(1) VALUE ' '.\n022500     02  FILLER  PIC X(6) VALUE 'DATE: '.\n022600     02  H1-DATE PIC X(8).\n022700     02  FILLER  PIC X(32) VALUE SPACES.\n022800     02  FILLER  PIC X(36) VALUE\n022900         'YEAR 2000 COMPLIANT DATE SUBROUTINES'.\n023000     02  FILLER  PIC X(35) VALUE SPACES.\n023100     02  FILLER  PIC X(15) VALUE 'PROGRAM: Y2KIVP'.\n023200\n023300 01  HEADING-2.\n023310     02  FILLER  PIC X(1) VALUE ' '.\n023400     02  FILLER  PIC X(6) VALUE 'TIME: '.\n023500     02  H2-TIME PIC X(5).\n023600     02  FILLER  PIC X(36) VALUE SPACES.\n023700     02  FILLER  PIC X(33) VALUE\n023800         'INSTALLATION VERIFICATION PROGRAM'.\n023900     02  FILLER  PIC X(40) VALUE SPACES.\n024000     02  FILLER  PIC X(9) VALUE 'PAGE:   '.\n024100     02  H2-PAGE PIC ZZ9.\n024200\n024300 01  HEADING-3.\n024310     02  FILLER  PIC X(1) VALUE ' '.\n024400     02  FILLER  PIC X(22) VALUE\n024500         'TEST DATA INPUT RECORD'.\n024600     02  FILLER  PIC X(39) VALUE SPACES.\n024700     02  FILLER  PIC X(7) VALUE 'ROUTINE'.\n024800     02  FILLER  PIC X(2) VALUE SPACES.\n024900     02  FILLER  PIC X(3) VALUE 'R/C'.\n025000     02  FILLER  PIC X(59) VALUE SPACES.\n025100\n025200 01  DETAIL-LINE.\n025210     02  FILLER  PIC X(1) VALUE ' '.\n025300     02  DL-TEST-RECORD          PIC X(50).\n025400     02  FILLER                  PIC X(11) VALUE SPACES.\n025500     02  DL-ROUTINE-NAME         PIC X(7).\n025600     02  FILLER                  PIC X(2) VALUE SPACES.\n025610     02  DL-SLASH-1              PIC X.\n025700     02  DL-RETURN-CODE          PIC X.\n025710     02  DL-SLASH-2              PIC X.\n025800     02  FILLER                  PIC X(2) VALUE SPACES.\n025900     02  DL-COMMON-FORMAT        PIC X(57).\n026000\n026100 01  DETAIL-ATOG.\n026200     02  DATOG-DATE              PIC X(10).\n026300\n026400 01  DETAIL-CONV.\n026500     02  DCONV-DATEG             PIC X(10).\n026600     02  FILLER                  PIC X(2) VALUE SPACES.\n026700     02  DCONV-DATEJ             PIC X(8).\n026800     02  FILLER                  PIC X(2) VALUE SPACES.\n026900     02  DCONV-ANUM              PIC 9,999,999.\n027000\n027100 01  DETAIL-DFMT.\n027200     02  DDFMT-COUNT             PIC 99.\n027300     02  FILLER                  PIC X(14) VALUE\n027400         ' BYTES OUTPUT='.\n027500     02  DDFMT-FORMAT            PIC X(29).\n027600\n027700 01  DETAIL-DOWN.\n027800     02  FILLER                  PIC X(23) VALUE\n027900         'DAY OF WEEK NUMBER IS: '.\n028000     02  DDOWN-NUMBER            PIC 9.\n028100     02  FILLER                  PIC X(2) VALUE ' ('.\n028200     02  DDOWN-NAME              PIC X(10).\n028300\n028400 01  DETAIL-GETD.\n028500     02  DGETD-DATEG             PIC X(10).\n028600     02  FILLER                  PIC X(2) VALUE SPACES.\n028700     02  DGETD-DATEJ             PIC X(8).\n028800     02  FILLER                  PIC X(2) VALUE SPACES.\n028900     02  DGETD-ANUM              PIC 9,999,999.\n029000\n029100 01  DETAIL-GTOA.\n029200     02  DGTOA-ANUM              PIC 9,999,999.\n029300\n029400 01  DETAIL-GTOJ.\n029500     02  DGTOJ-DATE              PIC X(8).\n029600\n029700 01  DETAIL-JTOG.\n029800     02  DJTOG-DATE              PIC X(10).\n029900\n030000 01  DETAIL-LAGE.\n030100     02  DLAGE-YEARS             PIC ZZ,ZZ9.\n030200     02  FILLER                  PIC X(8) VALUE ' YEARS, '.\n030300     02  DLAGE-MONTHS            PIC Z9.\n030400     02  FILLER                  PIC X(9) VALUE ' MONTHS, '.\n030500     02  DLAGE-DAYS              PIC Z9.\n030600     02  FILLER                  PIC X(13) VALUE ' DAYS BETWEEN'.\n030700\n030800 01  DETAIL-PROJ.\n030900     02  DPROJ-DATE              PIC X(10).\n031000\n031100 01  DETAIL-SAGE.\n031200     02  DSAGE-DAYS              PIC Z,ZZZ,ZZ9.\n031300     02  FILLER                  PIC X(13) VALUE ' DAYS BETWEEN'.\n031400\n031500 01  DETAIL-TDOW.\n031600     02  DTDOW-DATE              PIC X(10).\n031700/\n031800 PROCEDURE DIVISION.\n031900\n032000 0000-MAIN SECTION.\n032100 0050-SETUP.\n032110     MOVE TIME-OF-DAY TO UNFORMATTED-GDATE.\n032112     MOVE '  :  ' TO FORMATTED-GDATE.\n032114     MOVE UNFORMATTED-GMONTH TO FORMATTED-GMONTH.\n032116     MOVE UNFORMATTED-GDAY   TO FORMATTED-GDAY.\n032118     MOVE FORMATTED-GDATE TO H2-TIME.\n032300     MOVE CURRENT-DATE TO H1-DATE.\n032600\n032700 0100-CONTROL.\n032800     OPEN INPUT DATA-FILE,\n032900          OUTPUT PRINT-FILE.\n033000     PERFORM 0200-READ-DATA-FILE\n033010        THRU 0299-READ-DATA-FILE-EXIT.\n033100     PERFORM 0300-PROCESS-DATA\n033200        THRU 0399-PROCESS-DATA-EXIT\n033300       UNTIL END-OF-DATA.\n033400     CLOSE DATA-FILE, PRINT-FILE.\n033500     STOP RUN.\n033600* - - - - - - - - - - - - - - - - PROGRAM EXIT POINT\n033700\n033800 0200-READ-DATA-FILE.\n033900     READ DATA-FILE\n034000         AT END MOVE 'Y' TO END-OF-DATA-SWITCH.\n034010 0299-READ-DATA-FILE-EXIT.\n034015     EXIT.\n034100* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n034200\n034300 0300-PROCESS-DATA.\n034400     MOVE SPACES TO DETAIL-LINE.\n034500     MOVE DATA-RECORD TO TEST-RECORD, DL-TEST-RECORD.\n034510     IF TR-IDENTIFICATION EQUAL 'ATOG'\n034512         PERFORM 0400-CALL-ATOG THRU 0400-CALL-ATOG-EXIT\n034513         GO TO 0300-CONTINUE.\n034514\n034610     IF TR-IDENTIFICATION EQUAL 'CONV'\n034612         PERFORM 0405-CALL-CONV THRU 0405-CALL-CONV-EXIT\n034613         GO TO 0300-CONTINUE.\n034614\n034710     IF TR-IDENTIFICATION EQUAL 'DFMT'\n034712         PERFORM 0410-CALL-DFMT THRU 0410-CALL-DFMT-EXIT\n034713         GO TO 0300-CONTINUE.\n034714\n034810     IF TR-IDENTIFICATION EQUAL 'DOWN'\n034812         PERFORM 0415-CALL-DOWN THRU 0415-CALL-DOWN-EXIT\n034813         GO TO 0300-CONTINUE.\n034814\n034910     IF TR-IDENTIFICATION EQUAL 'GETD'\n034912         PERFORM 0420-CALL-GETD THRU 0420-CALL-GETD-EXIT\n034913         GO TO 0300-CONTINUE.\n034914\n035010     IF TR-IDENTIFICATION EQUAL 'GTOA'\n035012         PERFORM 0425-CALL-GTOA THRU 0425-CALL-GTOA-EXIT\n035013         GO TO 0300-CONTINUE.\n035014\n035110     IF TR-IDENTIFICATION EQUAL 'GTOJ'\n035112         PERFORM 0430-CALL-GTOJ THRU 0430-CALL-GTOJ-EXIT\n035113         GO TO 0300-CONTINUE.\n035114\n035210     IF TR-IDENTIFICATION EQUAL 'JTOG'\n035212         PERFORM 0435-CALL-JTOG THRU 0435-CALL-JTOG-EXIT\n035213         GO TO 0300-CONTINUE.\n035214\n035310     IF TR-IDENTIFICATION EQUAL 'LAGE'\n035312         PERFORM 0440-CALL-LAGE THRU 0440-CALL-LAGE-EXIT\n035313         GO TO 0300-CONTINUE.\n035314\n035410     IF TR-IDENTIFICATION EQUAL 'PROJ'\n035412         PERFORM 0445-CALL-PROJ THRU 0445-CALL-PROJ-EXIT\n035413         GO TO 0300-CONTINUE.\n035414\n035510     IF TR-IDENTIFICATION EQUAL 'SAGE'\n035512         PERFORM 0450-CALL-SAGE THRU 0450-CALL-SAGE-EXIT\n035513         GO TO 0300-CONTINUE.\n035514\n035610     IF TR-IDENTIFICATION EQUAL 'TDOW'\n035612         PERFORM 0455-CALL-TDOW THRU 0455-CALL-TDOW-EXIT\n035613         GO TO 0300-CONTINUE.\n035614\n036000     MOVE '-------' TO DL-ROUTINE-NAME\n036100     MOVE '*' TO DL-SLASH-1, DL-SLASH-2, DL-RETURN-CODE\n036200     MOVE 'INVALID ROUTINE SPECIFIED' TO DL-COMMON-FORMAT.\n036210\n036220  0300-CONTINUE.\n036400     IF LINE-COUNT LESS THAN PAGE-SIZE\n036410         GO TO 0300-DETAIL.\n036500     IF LINE-COUNT LESS THAN 99\n036510         GO TO 0300-PAGEHEAD.\n036600     MOVE SPACES TO PRINT-RECORD.\n036700     WRITE PRINT-RECORD AFTER ADVANCING TO-FIRST-LINE.\n036710  0300-PAGEHEAD.\n036900     ADD 1 TO PAGE-COUNT\n037000     MOVE PAGE-COUNT TO H2-PAGE\n037100     WRITE PRINT-RECORD FROM HEADING-1 BEFORE ADVANCING 1\n037200     WRITE PRINT-RECORD FROM HEADING-2 BEFORE ADVANCING 2\n037300     WRITE PRINT-RECORD FROM HEADING-3 BEFORE ADVANCING 1\n037400     MOVE 4 TO LINE-COUNT.\n037405\n037410 0300-DETAIL.\n037600     WRITE PRINT-RECORD FROM DETAIL-LINE BEFORE ADVANCING 1.\n037700     ADD 1 TO LINE-COUNT.\n037800     PERFORM 0200-READ-DATA-FILE\n037810        THRU 0299-READ-DATA-FILE-EXIT.\n037900 0399-PROCESS-DATA-EXIT.\n038000     EXIT.\n038100* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n038200\n038300 0400-CALL-ATOG.\n038400     MOVE 'Y2KATOG' TO DL-ROUTINE-NAME.\n038500     MOVE TR-ATOG-ANUM TO ATOGP-ANUM.\n038600     CALL 'Y2KATOG' USING ATOG-PARAMETERS.\n038700     MOVE ATOGP-RETURN-CODE TO DL-RETURN-CODE.\n038800     IF ATOGP-RETURN-CODE = 0\n039000         MOVE ATOGP-DATE TO UNFORMATTED-GDATE\n039002         PERFORM 0901-FORMAT-GDATE THRU 0901-FORMAT-GDATE-EXIT\n039004         MOVE FORMATTED-GDATE TO DATOG-DATE\n039100         MOVE DETAIL-ATOG TO DL-COMMON-FORMAT\n039110         GO TO 0400-CALL-ATOG-EXIT.\n039200\n039300     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n039400     IF ATOGP-RETURN-CODE EQUAL 2\n039500         MOVE 'INVALID ZONED-DECIMAL DATA'\n039700           TO DL-COMMON-FORMAT\n039710         GO TO 0400-CALL-ATOG-EXIT.\n039715\n039900     MOVE 'INVALID VALUE (OUT OF RANGE)'\n040000       TO DL-COMMON-FORMAT.\n040210 0400-CALL-ATOG-EXIT.\n040212     EXIT.\n040300* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n040400\n040500 0405-CALL-CONV.\n040600     MOVE 'Y2KCONV' TO DL-ROUTINE-NAME.\n040700     MOVE TR-CONV-DATE TO CONVP-DATEIN.\n040800     MOVE TR-CONV-FORMAT TO CONVP-FORMAT.\n040900     MOVE TR-CONV-BREAK TO CONVP-BREAK.\n041000     CALL 'Y2KCONV' USING CONV-PARAMETERS.\n041100     MOVE CONVP-RETURN-CODE TO DL-RETURN-CODE.\n041200     IF CONVP-RETURN-CODE = 0\n041400         MOVE CONVP-DATE-G TO UNFORMATTED-GDATE\n041410         PERFORM 0901-FORMAT-GDATE THRU 0901-FORMAT-GDATE-EXIT\n041415         MOVE FORMATTED-GDATE TO DCONV-DATEG\n041500         MOVE CONVP-DATE-J TO UNFORMATTED-JDATE\n041510         PERFORM 0902-FORMAT-JDATE THRU 0902-FORMAT-JDATE-EXIT\n041515         MOVE FORMATTED-JDATE TO DCONV-DATEJ\n041600         MOVE CONVP-ANUM TO DCONV-ANUM\n041700         MOVE DETAIL-CONV TO DL-COMMON-FORMAT\n041710         GO TO 0405-CALL-CONV-EXIT.\n041800\n041900     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n041910\n042000     IF CONVP-RETURN-CODE EQUAL 2\n042200         MOVE 'INVALID ZONED-DECIMAL DATA (DATE)'\n042300           TO DL-COMMON-FORMAT\n042310         GO TO 0405-CALL-CONV-EXIT.\n042315\n042400     IF CONVP-RETURN-CODE EQUAL 3\n042500         MOVE 'INVALID ZONED-DECIMAL DATA (BREAK)'\n042600           TO DL-COMMON-FORMAT\n042605         GO TO 0405-CALL-CONV-EXIT.\n042610\n042700     IF CONVP-RETURN-CODE EQUAL 4\n042800         MOVE 'INVALID VALUE (YEAR)'\n042900           TO DL-COMMON-FORMAT\n042905         GO TO 0405-CALL-CONV-EXIT.\n042910\n043000     IF CONVP-RETURN-CODE EQUAL 5\n043100         MOVE 'INVALID DATE FORMAT CODE'\n043200           TO DL-COMMON-FORMAT\n043205         GO TO 0405-CALL-CONV-EXIT.\n043210\n043300     IF CONVP-RETURN-CODE EQUAL 6\n043400         MOVE 'INVALID VALUE (MONTH)'\n043500           TO DL-COMMON-FORMAT\n043505         GO TO 0405-CALL-CONV-EXIT.\n043510\n043600     IF CONVP-RETURN-CODE EQUAL 8\n043700         MOVE 'INVALID VALUE (DAY)'\n043800           TO DL-COMMON-FORMAT.\n044010 0405-CALL-CONV-EXIT.\n044015     EXIT.\n044100* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n044200\n044300 0410-CALL-DFMT.\n044400     MOVE 'Y2KDFMT' TO DL-ROUTINE-NAME.\n044500     MOVE TR-DFMT-DATE TO DFMTP-DATEIN.\n044600     MOVE TR-DFMT-MAJOR TO DFMTP-MAJOR.\n044700     MOVE TR-DFMT-MINOR TO DFMTP-MINOR.\n044800     MOVE SPACES TO DFMTP-OUTPUT.\n044900     CALL 'Y2KDFMT' USING DFMT-PARAMETERS.\n045000     MOVE DFMTP-RETURN-CODE TO DL-RETURN-CODE.\n045100     IF DFMTP-RETURN-CODE = 0\n045300         MOVE DFMTP-OUTPUT-SIZE TO DDFMT-COUNT\n045400         MOVE DFMTP-OUTPUT TO DDFMT-FORMAT\n045500         MOVE DETAIL-DFMT TO DL-COMMON-FORMAT\n045510         GO TO 0410-CALL-DFMT-EXIT.\n045600\n045700     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n045800     IF DFMTP-RETURN-CODE EQUAL 2\n046000         MOVE 'INVALID ZONED-DECIMAL DATA'\n046100           TO DL-COMMON-FORMAT\n046105         GO TO 0410-CALL-DFMT-EXIT.\n046110\n046200     IF DFMTP-RETURN-CODE EQUAL 3\n046300         MOVE 'INVALID MAJOR FORMAT CODE'\n046400           TO DL-COMMON-FORMAT\n046405         GO TO 0410-CALL-DFMT-EXIT.\n046410\n046500     IF DFMTP-RETURN-CODE EQUAL 4\n046600         MOVE 'INVALID VALUE (YEAR)'\n046700           TO DL-COMMON-FORMAT\n046705         GO TO 0410-CALL-DFMT-EXIT.\n046710\n046800     IF DFMTP-RETURN-CODE EQUAL 5\n046900         MOVE 'INVALID MINOR FORMAT CODE'\n047000           TO DL-COMMON-FORMAT\n047005         GO TO 0410-CALL-DFMT-EXIT.\n047010\n047100     IF DFMTP-RETURN-CODE EQUAL 6\n047200         MOVE 'INVALID VALUE (MONTH)'\n047300           TO DL-COMMON-FORMAT\n047305         GO TO 0410-CALL-DFMT-EXIT.\n047310\n047400     IF DFMTP-RETURN-CODE EQUAL  8\n047500         MOVE 'INVALID VALUE (DAY)'\n047600           TO DL-COMMON-FORMAT.\n047810 0410-CALL-DFMT-EXIT.\n047812     EXIT.\n047900* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n048000\n048100 0415-CALL-DOWN.\n048200     MOVE 'Y2KDOWN' TO DL-ROUTINE-NAME.\n048300     MOVE TR-DOWN-DATE TO DOWNP-DATE.\n048400     CALL 'Y2KDOWN' USING DOWN-PARAMETERS.\n048500     MOVE DOWNP-RETURN-CODE TO DL-RETURN-CODE.\n048600     IF DOWNP-RETURN-CODE NOT EQUAL 0\n048610         GO TO 0415-CALL-DOWN-ERR.\n048612\n048800     MOVE DOWNP-DAY-NUMBER TO DDOWN-NUMBER.\n048900         IF DOWNP-DAY-NUMBER EQUAL 0\n049000             MOVE 'MONDAY)' TO DDOWN-NAME\n049005             MOVE DETAIL-DOWN TO DL-COMMON-FORMAT\n049006             GO TO 0415-CALL-DOWN-EXIT\n049010         ELSE IF DOWNP-DAY-NUMBER EQUAL 1\n049100             MOVE 'TUESDAY)' TO DDOWN-NAME\n049105             MOVE DETAIL-DOWN TO DL-COMMON-FORMAT\n049106             GO TO 0415-CALL-DOWN-EXIT\n049110         ELSE IF DOWNP-DAY-NUMBER EQUAL 2\n049200             MOVE 'WEDNESDAY)' TO DDOWN-NAME\n049205             MOVE DETAIL-DOWN TO DL-COMMON-FORMAT\n049206             GO TO 0415-CALL-DOWN-EXIT\n049210         ELSE IF DOWNP-DAY-NUMBER EQUAL 3\n049300             MOVE 'THURSDAY)' TO DDOWN-NAME\n049305             MOVE DETAIL-DOWN TO DL-COMMON-FORMAT\n049306             GO TO 0415-CALL-DOWN-EXIT\n049310         ELSE IF DOWNP-DAY-NUMBER EQUAL 4\n049400             MOVE 'FRIDAY)' TO DDOWN-NAME\n049405             MOVE DETAIL-DOWN TO DL-COMMON-FORMAT\n049406             GO TO 0415-CALL-DOWN-EXIT\n049410         ELSE IF DOWNP-DAY-NUMBER EQUAL 5\n049500             MOVE 'SATURDAY)' TO DDOWN-NAME\n049505             MOVE DETAIL-DOWN TO DL-COMMON-FORMAT\n049506             GO TO 0415-CALL-DOWN-EXIT\n049510         ELSE IF DOWNP-DAY-NUMBER EQUAL 6\n049600             MOVE 'SUNDAY)' TO DDOWN-NAME\n049800             MOVE DETAIL-DOWN TO DL-COMMON-FORMAT\n049806             GO TO 0415-CALL-DOWN-EXIT.\n049810\n049900 0415-CALL-DOWN-ERR.\n050000     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n050100     IF DOWNP-RETURN-CODE EQUAL 2\n050300         MOVE 'INVALID ZONED-DECIMAL DATA'\n050400           TO DL-COMMON-FORMAT\n050410         GO TO 0415-CALL-DOWN-EXIT.\n050500     IF DOWNP-RETURN-CODE EQUAL 4\n050600         MOVE 'INVALID VALUE (YEAR)'\n050700           TO DL-COMMON-FORMAT\n050710         GO TO 0415-CALL-DOWN-EXIT.\n050800     IF DOWNP-RETURN-CODE EQUAL 6\n050900         MOVE 'INVALID VALUE (MONTH)'\n051000           TO DL-COMMON-FORMAT\n051010         GO TO 0415-CALL-DOWN-EXIT.\n051100     IF DOWNP-RETURN-CODE EQUAL 8\n051200         MOVE 'INVALID VALUE (DAY)'\n051300           TO DL-COMMON-FORMAT.\n051510 0415-CALL-DOWN-EXIT.\n051520     EXIT.\n051600* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n051700\n051800 0420-CALL-GETD.\n051900     MOVE 'Y2KGETD' TO DL-ROUTINE-NAME.\n052000     CALL 'Y2KGETD' USING GETD-PARAMETERS.\n052100     MOVE GETDP-DATE-G TO DGETD-DATEG.\n052200     MOVE GETDP-DATE-J TO DGETD-DATEJ.\n052300     MOVE GETDP-ANUM TO DGETD-ANUM.\n052400     MOVE DETAIL-GETD TO DL-COMMON-FORMAT.\n052410 0420-CALL-GETD-EXIT.\n052415     EXIT.\n052500* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n052600\n052700 0425-CALL-GTOA.\n052800     MOVE 'Y2KGTOA' TO DL-ROUTINE-NAME.\n052900     MOVE TR-GTOA-DATE TO GTOAP-DATE-G.\n053000     CALL 'Y2KGTOA' USING GTOA-PARAMETERS.\n053100     MOVE GTOAP-RETURN-CODE TO DL-RETURN-CODE.\n053200     IF GTOAP-RETURN-CODE = 0\n053400         MOVE GTOAP-ANUM TO DGTOA-ANUM\n053500         MOVE DETAIL-GTOA TO DL-COMMON-FORMAT\n053510         GO TO 0425-CALL-GTOA-EXIT.\n053600\n053700     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n053800\n053900     IF GTOAP-RETURN-CODE EQUAL 2\n054000         MOVE 'INVALID ZONED-DECIMAL DATA'\n054100           TO DL-COMMON-FORMAT\n054110         GO TO 0425-CALL-GTOA-EXIT.\n054200     IF GTOAP-RETURN-CODE EQUAL 4\n054300         MOVE 'INVALID VALUE (YEAR)'\n054400           TO DL-COMMON-FORMAT\n054410         GO TO 0425-CALL-GTOA-EXIT.\n054500     IF GTOAP-RETURN-CODE EQUAL 6\n054600         MOVE 'INVALID VALUE (MONTH)'\n054700           TO DL-COMMON-FORMAT\n054710         GO TO 0425-CALL-GTOA-EXIT.\n054800     IF GTOAP-RETURN-CODE EQUAL 8\n054900         MOVE 'INVALID VALUE (DAY)'\n055000           TO DL-COMMON-FORMAT.\n055210 0425-CALL-GTOA-EXIT.\n055215     EXIT.\n055300* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n055400\n055500 0430-CALL-GTOJ.\n055600     MOVE 'Y2KGTOJ' TO DL-ROUTINE-NAME.\n055700     MOVE TR-GTOJ-DATE TO GTOJP-DATE-G.\n055800     CALL 'Y2KGTOJ' USING GTOJ-PARAMETERS.\n055900     MOVE GTOJP-RETURN-CODE TO DL-RETURN-CODE.\n056000     IF GTOJP-RETURN-CODE = 0\n056200         MOVE GTOJP-DATE-J TO UNFORMATTED-JDATE\n056210         PERFORM 0902-FORMAT-JDATE THRU 0902-FORMAT-JDATE-EXIT\n056215         MOVE FORMATTED-JDATE TO DGTOJ-DATE\n056300         MOVE DETAIL-GTOJ TO DL-COMMON-FORMAT\n056400         GO TO 0430-CALL-GTOJ-EXIT.\n056500     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n056700     IF GTOJP-RETURN-CODE EQUAL 2\n056800                 MOVE 'INVALID ZONED-DECIMAL DATA'\n056900                   TO DL-COMMON-FORMAT\n056920       GO TO 0430-CALL-GTOJ-EXIT.\n057000     IF GTOJP-RETURN-CODE EQUAL 4\n057100                 MOVE 'INVALID VALUE (YEAR)'\n057200                   TO DL-COMMON-FORMAT\n057210       GO TO 0430-CALL-GTOJ-EXIT.\n057220     IF GTOJP-RETURN-CODE EQUAL 6\n057400                 MOVE 'INVALID VALUE (MONTH)'\n057500                   TO DL-COMMON-FORMAT\n057510       GO TO 0430-CALL-GTOJ-EXIT.\n057520     IF GTOJP-RETURN-CODE EQUAL 8\n057700                 MOVE 'INVALID VALUE (DAY)'\n057800                   TO DL-COMMON-FORMAT.\n058010 0430-CALL-GTOJ-EXIT.\n058012     EXIT.\n058100* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n058200\n058300 0435-CALL-JTOG.\n058400     MOVE 'Y2KJTOG' TO DL-ROUTINE-NAME.\n058500     MOVE TR-JTOG-DATE TO JTOGP-DATE-J.\n058600     CALL 'Y2KJTOG' USING JTOG-PARAMETERS.\n058700     MOVE JTOGP-RETURN-CODE TO DL-RETURN-CODE.\n058800     IF JTOGP-RETURN-CODE = 0\n059000         MOVE JTOGP-DATE-G TO UNFORMATTED-GDATE\n059020         PERFORM 0901-FORMAT-GDATE THRU 0901-FORMAT-GDATE-EXIT\n059030         MOVE FORMATTED-GDATE TO DJTOG-DATE\n059100         MOVE DETAIL-JTOG TO DL-COMMON-FORMAT\n059110         GO TO 0435-CALL-JTOG-EXIT.\n059200\n059300     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n059400     IF JTOGP-RETURN-CODE EQUAL 2\n059600                 MOVE 'INVALID ZONED-DECIMAL DATA'\n059700                   TO DL-COMMON-FORMAT\n059710            GO TO 0435-CALL-JTOG-EXIT.\n059720     IF JTOGP-RETURN-CODE EQUAL 4\n059900                 MOVE 'INVALID VALUE (YEAR)'\n060000                   TO DL-COMMON-FORMAT\n060010            GO TO 0435-CALL-JTOG-EXIT.\n060020     IF JTOGP-RETURN-CODE EQUAL 8\n060200                 MOVE 'INVALID VALUE (DAY)'\n060300                   TO DL-COMMON-FORMAT.\n060520 0435-CALL-JTOG-EXIT.\n060530     EXIT.\n060600* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n060700\n060800 0440-CALL-LAGE.\n060900     MOVE 'Y2KLAGE' TO DL-ROUTINE-NAME.\n061000     MOVE TR-LAGE-DATE1 TO LAGEP-DATE1.\n061100     MOVE TR-LAGE-DATE2 TO LAGEP-DATE2.\n061200     CALL 'Y2KLAGE' USING LAGE-PARAMETERS.\n061300     MOVE LAGEP-RETURN-CODE TO DL-RETURN-CODE.\n061400     IF LAGEP-RETURN-CODE = 0\n061600         MOVE LAGEP-DAYS-PAST TO DLAGE-DAYS\n061700         MOVE LAGEP-MONTHS-PAST TO DLAGE-MONTHS\n061800         MOVE LAGEP-YEARS-PAST TO DLAGE-YEARS\n061900         MOVE DETAIL-LAGE TO DL-COMMON-FORMAT\n061910         GO TO 0440-CALL-LAGE-EXIT.\n062000\n062100     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n062200     IF LAGEP-RETURN-CODE EQUAL 2\n062400                 MOVE 'INVALID ZONED-DECIMAL DATA (DATE 1)'\n062500                   TO DL-COMMON-FORMAT\n062510          GO TO 0440-CALL-LAGE-EXIT.\n062520     IF LAGEP-RETURN-CODE EQUAL 3\n062700                 MOVE 'INVALID ZONED-DECIMAL DATA (DATE 2)'\n062800                   TO DL-COMMON-FORMAT\n062810          GO TO 0440-CALL-LAGE-EXIT.\n062820     IF LAGEP-RETURN-CODE EQUAL 4\n063000                 MOVE 'INVALID VALUE (YEAR/DATE 1)'\n063100                   TO DL-COMMON-FORMAT\n063110          GO TO 0440-CALL-LAGE-EXIT.\n063120     IF LAGEP-RETURN-CODE EQUAL 5\n063300                 MOVE 'INVALID VALUE (YEAR/DATE 2)'\n063400                   TO DL-COMMON-FORMAT\n063410          GO TO 0440-CALL-LAGE-EXIT.\n063420     IF LAGEP-RETURN-CODE EQUAL 6\n063600                 MOVE 'INVALID VALUE (MONTH/DATE 1)'\n063700                   TO DL-COMMON-FORMAT\n063710          GO TO 0440-CALL-LAGE-EXIT.\n063720     IF LAGEP-RETURN-CODE EQUAL 7\n063900                 MOVE 'INVALID VALUE (MONTH/DATE 2)'\n064000                   TO DL-COMMON-FORMAT\n064110          GO TO 0440-CALL-LAGE-EXIT.\n064120     IF LAGEP-RETURN-CODE EQUAL 8\n064200                 MOVE 'INVALID VALUE (DAY/DATE 1)'\n064300                   TO DL-COMMON-FORMAT\n064310          GO TO 0440-CALL-LAGE-EXIT.\n064320     IF LAGEP-RETURN-CODE EQUAL 9\n064500                 MOVE 'INVALID VALUE (DAY/DATE 2)'\n064600                   TO DL-COMMON-FORMAT.\n064810 0440-CALL-LAGE-EXIT.\n064820      EXIT.\n064900* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n065000\n065100 0445-CALL-PROJ.\n065200     MOVE 'Y2KPROJ' TO DL-ROUTINE-NAME.\n065300     MOVE TR-PROJ-DATE TO PROJP-DATE.\n065400     MOVE TR-PROJ-INCREMENT TO PROJP-INCREMENT.\n065500     CALL 'Y2KPROJ' USING PROJ-PARAMETERS.\n065600     MOVE PROJP-RETURN-CODE TO DL-RETURN-CODE.\n065700     IF PROJP-RETURN-CODE = 0\n065900         MOVE PROJP-NEW-DATE TO UNFORMATTED-GDATE\n065910         PERFORM 0901-FORMAT-GDATE THRU 0901-FORMAT-GDATE-EXIT\n065920         MOVE FORMATTED-GDATE TO DPROJ-DATE\n066000         MOVE DETAIL-PROJ TO DL-COMMON-FORMAT\n066010         GO TO 0445-CALL-PROJ-EXIT.\n066100\n066200     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n066300     IF PROJP-RETURN-CODE EQUAL 2\n066500                 MOVE 'INVALID ZONED-DECIMAL DATA (DATE)'\n066600                   TO DL-COMMON-FORMAT\n066610         GO TO 0445-CALL-PROJ-EXIT.\n066620     IF PROJP-RETURN-CODE EQUAL 3\n066800                 MOVE 'INVALID ZONED-DECIMAL DATA (INCREMENT)'\n066900                   TO DL-COMMON-FORMAT\n066910         GO TO 0445-CALL-PROJ-EXIT.\n066920     IF PROJP-RETURN-CODE EQUAL 4\n067100                 MOVE 'INVALID VALUE (YEAR)'\n067200                   TO DL-COMMON-FORMAT\n067210         GO TO 0445-CALL-PROJ-EXIT.\n067220     IF PROJP-RETURN-CODE EQUAL 5\n067400                 MOVE 'INVALID VALUE (INCREMENT)'\n067500                   TO DL-COMMON-FORMAT\n067510         GO TO 0445-CALL-PROJ-EXIT.\n067520     IF PROJP-RETURN-CODE EQUAL 6\n067700                 MOVE 'INVALID VALUE (MONTH)'\n067800                   TO DL-COMMON-FORMAT\n067810         GO TO 0445-CALL-PROJ-EXIT.\n067820     IF PROJP-RETURN-CODE EQUAL 8\n068000                 MOVE 'INVALID VALUE (DAY)'\n068100                   TO DL-COMMON-FORMAT.\n068310 0445-CALL-PROJ-EXIT.\n068320      EXIT.\n068400* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n068500\n068600 0450-CALL-SAGE.\n068700     MOVE 'Y2KSAGE' TO DL-ROUTINE-NAME.\n068800     MOVE TR-SAGE-DATE1 TO SAGEP-DATE1.\n068900     MOVE TR-SAGE-DATE2 TO SAGEP-DATE2.\n069000     CALL 'Y2KSAGE' USING SAGE-PARAMETERS.\n069100     MOVE SAGEP-RETURN-CODE TO DL-RETURN-CODE.\n069200     IF SAGEP-RETURN-CODE = 0\n069400         MOVE SAGEP-DAYS-PAST TO DSAGE-DAYS\n069500         MOVE DETAIL-SAGE TO DL-COMMON-FORMAT\n069510         GO TO 0450-CALL-SAGE-EXIT.\n069600\n069700     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n069800     IF SAGEP-RETURN-CODE EQUAL 2\n070000                 MOVE 'INVALID ZONED-DECIMAL DATA (DATE 1)'\n070100                   TO DL-COMMON-FORMAT\n070110          GO TO 0450-CALL-SAGE-EXIT.\n070120     IF SAGEP-RETURN-CODE EQUAL 3\n070300                 MOVE 'INVALID ZONED-DECIMAL DATA (DATE 2)'\n070400                   TO DL-COMMON-FORMAT\n070410          GO TO 0450-CALL-SAGE-EXIT.\n070420     IF SAGEP-RETURN-CODE EQUAL 4\n070600                 MOVE 'INVALID VALUE (YEAR/DATE 1)'\n070700                   TO DL-COMMON-FORMAT\n070710          GO TO 0450-CALL-SAGE-EXIT.\n070720     IF SAGEP-RETURN-CODE EQUAL 5\n070900                 MOVE 'INVALID VALUE (YEAR/DATE 2)'\n071000                   TO DL-COMMON-FORMAT\n071010          GO TO 0450-CALL-SAGE-EXIT.\n071020     IF SAGEP-RETURN-CODE EQUAL 6\n071200                 MOVE 'INVALID VALUE (MONTH/DATE 1)'\n071300                   TO DL-COMMON-FORMAT\n071310          GO TO 0450-CALL-SAGE-EXIT.\n071320     IF SAGEP-RETURN-CODE EQUAL 7\n071500                 MOVE 'INVALID VALUE (MONTH/DATE 2)'\n071600                   TO DL-COMMON-FORMAT\n071610          GO TO 0450-CALL-SAGE-EXIT.\n071620     IF SAGEP-RETURN-CODE EQUAL 8\n071800                 MOVE 'INVALID VALUE (DAY/DATE 1)'\n071900                   TO DL-COMMON-FORMAT\n071910          GO TO 0450-CALL-SAGE-EXIT.\n071920     IF SAGEP-RETURN-CODE EQUAL 9\n072100                 MOVE 'INVALID VALUE (DAY/DATE 2)'\n072200                   TO DL-COMMON-FORMAT.\n072310 0450-CALL-SAGE-EXIT.\n072320     EXIT.\n072500* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n072600\n072700 0455-CALL-TDOW.\n072800     MOVE 'Y2KTDOW' TO DL-ROUTINE-NAME.\n072900     MOVE TR-TDOW-DATE TO TDOWP-DATEIN.\n073000     MOVE TR-TDOW-DIRECTION TO TDOWP-DIRECTION.\n073100     MOVE TR-TDOW-DAY-NUMBER TO TDOWP-DAY-NUMBER.\n073200     CALL 'Y2KTDOW' USING TDOW-PARAMETERS.\n073300     MOVE TDOWP-RETURN-CODE TO DL-RETURN-CODE.\n073400     IF TDOWP-RETURN-CODE = 0\n073600         MOVE TDOWP-NEW-DATE TO UNFORMATTED-GDATE\n073610         PERFORM 0901-FORMAT-GDATE THRU 0901-FORMAT-GDATE-EXIT\n073620         MOVE FORMATTED-GDATE TO DTDOW-DATE\n073700         MOVE DETAIL-TDOW TO DL-COMMON-FORMAT\n073710         GO TO 0455-CALL-TDOW-EXIT.\n073800\n073900     MOVE '*' TO DL-SLASH-1, DL-SLASH-2.\n074000     IF TDOWP-RETURN-CODE EQUAL 2\n074200                 MOVE 'INVALID ZONED-DECIMAL DATA (DATE)'\n074300                   TO DL-COMMON-FORMAT\n074310         GO TO 0455-CALL-TDOW-EXIT.\n074320     IF TDOWP-RETURN-CODE EQUAL 3\n074500                 MOVE 'INVALID DIRECTION CODE'\n074600                   TO DL-COMMON-FORMAT\n074610         GO TO 0455-CALL-TDOW-EXIT.\n074620     IF TDOWP-RETURN-CODE EQUAL 4\n074800                 MOVE 'INVALID VALUE (YEAR)'\n074900                   TO DL-COMMON-FORMAT\n074910         GO TO 0455-CALL-TDOW-EXIT.\n074920     IF TDOWP-RETURN-CODE EQUAL 5\n075100                 MOVE 'TARGET DATE WILL BE INVALID'\n075200                   TO DL-COMMON-FORMAT\n075210         GO TO 0455-CALL-TDOW-EXIT.\n075220     IF TDOWP-RETURN-CODE EQUAL 7\n075400                 MOVE 'INVALID DAY OF WEEK NUMBER'\n075500                   TO DL-COMMON-FORMAT\n075510         GO TO 0455-CALL-TDOW-EXIT.\n075520     IF TDOWP-RETURN-CODE EQUAL 6\n075700                 MOVE 'INVALID VALUE (MONTH)'\n075800                   TO DL-COMMON-FORMAT\n075810         GO TO 0455-CALL-TDOW-EXIT.\n075820     IF TDOWP-RETURN-CODE EQUAL 8\n076000                 MOVE 'INVALID VALUE (DAY)'\n076100                   TO DL-COMMON-FORMAT.\n076310 0455-CALL-TDOW-EXIT.\n076320     EXIT.\n076400* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n076500\n080002 0901-FORMAT-GDATE.\n080004     MOVE '  /  /    ' TO FORMATTED-GDATE.\n080006     MOVE UNFORMATTED-GMONTH TO FORMATTED-GMONTH.\n080008     MOVE UNFORMATTED-GDAY   TO FORMATTED-GDAY.\n080010     MOVE UNFORMATTED-GYEAR  TO FORMATTED-GYEAR.\n080012 0901-FORMAT-GDATE-EXIT.\n080014     EXIT.\n080102 0902-FORMAT-JDATE.\n080104     MOVE '    /   ' TO FORMATTED-JDATE.\n080106     MOVE UNFORMATTED-JYEAR TO FORMATTED-JYEAR.\n080108     MOVE UNFORMATTED-JDAY  TO FORMATTED-JDAY.\n080110 0902-FORMAT-JDATE-EXIT.\n080112     EXIT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KIVPD": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f @\\x00\\xc9\\x00\\xc9\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:40:00", "lines": 201, "newlines": 201, "modlines": 0, "user": "MOSELEY"}, "text": "SAGE 03221997 12312000\nATOG 2$%D000           INVALID DATA\nATOG 2304000           INVALID VALUE\nATOG 2305813           INVALID VALUE\nATOG 2305814\nATOG 2962884\nATOG 2962885           INVALID VALUE\nATOG 2980000           INVALID VALUE\nATOG 2451544\nATOG 2451545\nATOG 2451546\nATOG 2451547\nCONV 010197 1 70\nCONV 310197 2 70\nCONV 970103 3 70\nCONV 97004  4 70\nCONV 060195 1 97\nCONV 01A597 1 70       INVALID DATA (DATE)\nCONV 010197 8 70       INVALID FORMAT\nCONV 010197 1 B7       INVALID DATA (BREAK)\nCONV 130197 1 70       INVALID MONTH\nCONV 023197 1 70       INVALID DAY\nCONV 131397 2 70       INVALID MONTH\nCONV 300297 2 70       INVALID DAY\nCONV 972701 3 70       INVALID MONTH\nCONV 970431 3 70       INVALID DAY\nCONV 97366  4 70       INVALID DAY\nDFMT 0101ABCD 1 1      INVALID DATA (DATE)\nDFMT 01011997 0 1      INVALID MAJOR FORMAT\nDFMT 01011997 1 7      INVALID MINOR FORMAT\nDFMT 51011997 1 1      INVALID MONTH\nDFMT 06311997 1 1      INVALID DAY\nDFMT 04014000 1 1      INVALID YEAR\nDFMT 12311600 1 1      INVALID YEAR\nDFMT 01013400 1 1      INVALID YEAR\nDFMT 12255010 1 1      INVALID YEAR\nDFMT 12313399 1 1\nDFMT 01011601 1 2\nDFMT 01021601 1 3\nDFMT 01031601 1 4\nDFMT 01041601 1 5\nDFMT 12011997 2 1\nDFMT 12021997 2 2\nDFMT 12031997 2 3\nDFMT 12041997 2 4\nDFMT 12051997 2 5\nDFMT 01011998 3 1\nDFMT 01021998 3 2\nDFMT 01031998 3 3\nDFMT 01041998 3 4\nDFMT 01051998 3 5\nDFMT 12251999 4 1\nDFMT 12261999 4 2\nDFMT 12271999 5 1\nDFMT 12281999 5 2\nDFMT 12291999 6 1\nDFMT 12301999 6 2\nDFMT 12311999 7 1\nDFMT 01012000 7 2\nDFMT 01022000 8 1\nDFMT 01032000 8 2\nDFMT 01042000 9 1\nDFMT 01052000 9 2\nDOWN X3121997          INVALID DATA\nDOWN 02291997          INVALID DAY\nDOWN 77011997          INVALID MONTH\nDOWN 04014000          INVALID YEAR\nDOWN 12311600          INVALID YEAR\nDOWN 01013400          INVALID YEAR\nDOWN 12255000          INVALID YEAR\nDOWN 01011601\nDOWN 12313399\nDOWN 02011997\nDOWN 02021997\nDOWN 02031997\nDOWN 02041997\nDOWN 02051997\nDOWN 02061997\nDOWN 02071997\nDOWN 07041997\nDOWN 12251997\nDOWN 12311997\nDOWN 04151997\nGETD\nGTOA X3121997          INVALID DATA\nGTOA 02291997          INVALID DAY\nGTOA 77011997          INVALID MONTH\nGTOA 04014000          INVALID YEAR\nGTOA 12311600          INVALID YEAR\nGTOA 01013400          INVALID YEAR\nGTOA 12255000          INVALID YEAR\nGTOA 01011601\nGTOA 12313399\nGTOA 12311999\nGTOA 01012000\nGTOA 01022000\nGTOA 01032000\nGTOJ X3121997          INVALID DATA\nGTOJ 02291997          INVALID DAY\nGTOJ 77011997          INVALID MONTH\nGTOJ 04014000          INVALID YEAR\nGTOJ 12311600          INVALID YEAR\nGTOJ 01013400          INVALID YEAR\nGTOJ 12255000          INVALID YEAR\nGTOJ 12311800\nGTOJ 01011601\nGTOJ 12313399\nGTOJ 12311999\nGTOJ 12311984\nGTOJ 12312000\nGTOJ 12312004\nJTOG ABCD204           INVALID DATA\nJTOG 1800366           INVALID DAY\nJTOG 1400366           INVALID YEAR\nJTOG 1600365           INVALID YEAR\nJTOG 3400001           INVALID YEAR\nJTOG 3600366           INVALID YEAR\nJTOG 1997366           INVALID DAY\nJTOG 1601001\nJTOG 3399365\nJTOG 1996366\nJTOG 1997365\nJTOG 1998365\nJTOG 1999365\nJTOG 2000366\nJTOG 2001365\nLAGE X3B21997 01021997 INVALID DATA (DATE1)\nLAGE 01011997 010##997 INVALID DATA (DATE2)\nLAGE 02291997 12312005 INVALID DAY/DATE1\nLAGE 77011997 12312005 INVALID MONTH/DATE1\nLAGE 04014000 12312005 INVALID YEAR/DATE1\nLAGE 02291997 02291983 INVALID DAY/DATE2\nLAGE 12311987 14012005 INVALID MONTH/DATE2\nLAGE 01011984 12313500 INVALID YEAR/DATE2\nLAGE 12311600 12311999 INVALID YEAR/DATE1\nLAGE 01013400 12311999 INVALID YEAR/DATE1\nLAGE 12255000 12311999 INVALID YEAR/DATE1\nLAGE 01011961 12311600 INVALID YEAR/DATE1\nLAGE 01011961 12313400 INVALID YEAR/DATE1\nLAGE 12251961 12315010 INVALID YEAR/DATE1\nLAGE 01011997 12311997\nLAGE 10011998 12311998\nLAGE 01012000 13312000\nLAGE 01011601 12313399\nLAGE 08291997 03302000\nLAGE 06291998 08302203\nLAGE 04291999 01292001\nLAGE 06151999 08152121\nLAGE 12311999 08222408\nLAGE 12311999 03012711\nLAGE 12302001 02282009\nLAGE 05082483 03052100\nLAGE 12232004 12312000\nPROJ X3121997          INVALID DATA (DATE)\nPROJ 03011997 0#$030   INVALID DATA (INCREMENT)\nPROJ 02291997 000030   INVALID DAY\nPROJ 77011997 000060   INVALID MONTH\nPROJ 04014000 000090   INVALID YEAR\nPROJ 12311600 000090   INVALID YEAR\nPROJ 01013400 000120   INVALID YEAR\nPROJ 12255000 000150   INVALID YEAR\nPROJ 01011601 900000   INVALID INCREMENT\nPROJ 01011601 365000\nPROJ 12313399 36500J\nPROJ 01011997 000090\nPROJ 12311997 00009J\nPROJ 01011996 000366\nSAGE X3B21997 01021997 INVALID DATA (DATE1)\nSAGE 01011997 010##997 INVALID DATA (DATE2)\nSAGE 02291997 12312005 INVALID DAY/DATE1)\nSAGE 77011997 12312005 INVALID MONTH/DATE1\nSAGE 04014000 12312005 INVALID YEAR/DATE1\nSAGE 02291997 02291983 INVALID DAY/DATE2\nSAGE 12311987 14012005 INVALID MONTH/DATE2\nSAGE 01011984 12313500 INVALID YEAR/DATE2\nSAGE 12311600 12311999 INVALID YEAR/DATE1\nSAGE 01013400 12311999 INVALID YEAR/DATE1\nSAGE 12255000 12311999 INVALID YEAR/DATE1\nSAGE 01011961 12311600 INVALID YEAR/DATE1\nSAGE 01011961 12313400 INVALID YEAR/DATE1\nSAGE 12251961 12315010 INVALID YEAR/DATE1\nSAGE 01011997 12311997\nSAGE 10011998 12311998\nSAGE 01012000 12312000\nSAGE 01011601 12313399\nTDOW X3121997 N 5      INVALID DATA (DATE)\nTDOW 03011997 L 5      INVALID DIRECTION\nTDOW 04201985 P 8      INVALID DAY OF WEEK\nTDOW 77011997 N 0      INVALID MONTH\nTDOW 04014000 N 2      INVALID YEAR\nTDOW 12311600 P 5      INVALID YEAR\nTDOW 01013400 P 5      INVALID YEAR\nTDOW 12255000 N 1      INVALID YEAR\nTDOW 01011601 P 1      INVALID INCREMENT\nTDOW 01011601 N 2\nTDOW 12313399 N 4      INVALID INCREMENT\nTDOW 01011997 N 5\nTDOW 12311997 P 2\nTDOW 01011996 N 3\nTDOW 04151997 P 4\nTDOW 04151997 N 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KJTOG": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x003\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f D\\x00\\xe2\\x00\\xe2\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:44:33", "lines": 226, "newlines": 226, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KJTOG - CONVERT JULIAN DATE TO GREGORIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK      JJTTTTTTTT  OOOOO   GGGGG            *\n*   YY   YY  2   2  KK  KK       JJ   TT    OO   OO GG   GG           *\n*   YY   YY      2  KK KK        JJ   TT    OO   OO GG   GG           *\n*    YY YY       2  KKKK         JJ   TT    OO   OO GG                *\n*     YYY     222   KKKK         JJ   TT    OO   OO GG  GGG           *\n*     YY     2      KK KK   JJ   JJ   TT    OO   OO GG   GG           *\n*     YY     2      KK  KK  JJ   JJ   TT    OO   OO GG   GG           *\n*     YY     22222  KK   KK  JJJJJ    TT     OOOOO   GGGGG            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE RETURNS THE GREGORIAN DATE (MMDDYYYY) FOR        *\n*    A GIVEN JULIAN DATE (YYYYDDD)                                    *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 001 THROUGH      *\n*        365 (NON-LEAP YEARS) AND 001 THROUGH 366 (LEAP YEARS).       *\n*                                                                     *\n*    3.  THE DATE FORMAT MUST BE YYYYDDD, WHERE YYYY = THE 4 DIGIT    *\n*        YEAR VALUE AND DDD = THE 3 DIGIT JULIAN DAY NUMBER VALUE.    *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 7 BYTE FIELD CONTAINING THE JULIAN DATE (IN ZONED      *\n*            DECIMAL FORMAT),                                         *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE CORRESPONDING     *\n*            GREGORIAN DATE (IN ZONED-DECIMAL FORMAT).                *\n*        THE ROUTINE WILL NOT ALTER THE DATE PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KJTOG,(DATEJ)                          *\n*                         . . .                                       *\n*             DATEJ    DS    ZL7'1997158'                             *\n*             RC       DS    ZL1'0'                                   *\n*             DATEG    DS    ZL8'00000000'                            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  JTOG-PARAMETERS.                                    *\n*                 02  DATEJ PIC 9(7) VALUE 1997158.                   *\n*                 02  RC    PIC 9(1) VALUE 0.                         *\n*                 02  DATEG PIC 9(8) VALUE 0.                         *\n*             CALL 'Y2KJTOG' USING JTOG-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE 8 DIGIT GREGORIAN DATE        *\n*        (MMDDYYYY) WILL BE PLACED IN THE 3RD PARAMETER FIELD (IN     *\n*        ZONED DECIMAL FORMAT).  IF THE RETURN CODE IS A NON-ZERO     *\n*        VALUE (UNSUCCESSFUL EXECUTION), THE 3RD PARAMETER WILL       *\n*        CONTAIN ZEROS.                                               *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KJTOG  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT JULIAN (DAY OF YEAR) TO GREGORIAN'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KJTOG,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KJTOG GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KJTOG GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND OUTPUT DATE FIELD.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            NULL GREGORIAN DATE\n*\n*    TEST DATE FOR INVALID CHARACTER\n*\n         LA    R2,PDATEJ               ADDRESS PASSED DATE\n         LA    R3,6                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATE CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  WX,PDATEJ(4)            PACK PASSED YEAR\n         CP    WX,=P'1601'             IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    WX,=P'3399'             IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    CALL Y2KGTOA TO GET JANUARY 1 ASTRO NUMBER\n*\nP1OK2    MVC   DATEG(4),=C'0101'       JANUARY 1\n         MVC   DATEG+4(4),PDATEJ       OF REQUESTED YEAR\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    ADJUST ASTRO NUMBER NUMBER FOR JULIAN DATE\n*\n         PACK  WX(4),ANUMG(7)          PACK IT\n         SP    WX,=P'1'                ADJUST TO 12/31 OF PRIOR YEAR\n         PACK  WY(2),PDATEJ+4(3)       PACK JULIAN DAY NUMBER\n         AP    WX,WY                   ADD TO PRIOR YEAR'S ASTRO #\n*\n*    CALL Y2KATOG TO GET NEW GREGORIAN DATE\n*\n         UNPK  ANUMA(7),WX             UNPACK COMPUTED ASTRO #\n         LA    R1,ATOGPARM             ADDRESS OF Y2KATOG PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KATOG)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    IF YEAR IS DIFFERENT, DDD WAS INVALID FOR YEAR SPECIFIED\n*\n         CLC   PDATEJ(4),DATEA+4       COMPARE YEARS\n         BE    MOVEOUT                 IF SAME, ALL OK\n         MVI   PRC,C'8'                ELSE INDICATE ERROR\n         B     RETURN\n*\n*    MOVE RETURNED DATE TO OUR CALLER'S RETURN AREA\n*\nMOVEOUT  MVC   PDATEG,DATEA            STORE OUTPUT FIELD\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nDATEG    DS    CL8                       INPUT GREGORIAN DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       RETURNED ASTRO NUMBER\nATOGPARM DS    0H                      PARAMETERS FOR Y2KATOG\nANUMA    DS    ZL7                       INPUT ASTRO NUMBER\nRCA      DS    CL1                       RETURN CODE\nDATEA    DS    CL8                       RETURNED GREGORIAN DATE\nWX       DS    PL4                     WORK FIELD\nWY       DS    PL2                     WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATEJ   DS    CL7                     JULIAN DATE INPUT\nPRC      DS    CL1                     RETURN CODE (0/2/4/8)\nPDATEG   DS    CL8                     GREGORIAN DATE OUTPUT\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KLAGE": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f D\\x02\\x03\\x02\\x03\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:44:42", "lines": 515, "newlines": 515, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KLAGE - COMPUTE ELAPSED YEARS, MONTHS, DAYS'\n*                                                                     *\n*   YY   YY   222   KK   KK LL         A     GGGGG  EEEEEE            *\n*   YY   YY  2   2  KK  KK  LL        AAA   GG   GG EE                *\n*   YY   YY      2  KK KK   LL       AA AA  GG   GG EE                *\n*    YY YY       2  KKKK    LL      AA   AA GG      EEEE              *\n*     YYY     222   KKKK    LL      AA   AA GG  GGG EE                *\n*     YY     2      KK KK   LL      AAAAAAA GG   GG EE                *\n*     YY     2      KK  KK  LL      AA   AA GG   GG EE                *\n*     YY     22222  KK   KK LLLLLLL AA   AA  GGGGG  EEEEEEE           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE NUMBER OF YEARS, MONTHS, AND        *\n*    DAYS ELAPSED BETWEEN 2 GIVEN GREGORIAN DATES (MMDDYYYY) FOR      *\n*    LONG TERM AGING                                                  *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  SIX FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:          *\n*        1) & 2)  8 BYTE FIELDS CONTAINING THE GREGORIAN DATES (IN    *\n*            (ZONED-DECIMAL FORMAT) BETWEEN WHICH THE NUMBER OF       *\n*            YEARS, MONTHS AND DAYS IS TO BE CALCULATED (ORDER        *\n*            OF THE DATES IS IMMATERIAL),                             *\n*        3)  A 1 BYTE ZONED-DECIMAL RETURN CODE,                      *\n*        4), 5) & 6)  2 BYTE, 2 BYTE, AND 5 BYTE FIELDS WHICH WIL     *\n*            RECEIVE THE NUMBER OF DAYS, MONTHS, AND YEARS ELAPSED    *\n*            (IN ZONED-DECIMAL FORMAT).                               *\n*        THE ROUTINE WILL NOT ALTER THE DATES PASSED TO IT.           *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KLAGE,(DATE1)                          *\n*                         . . .                                       *\n*             DATE1    DS    ZL8'01011997'                            *\n*             DATE2    DS    ZL8'04251988'                            *\n*             RC       DS    ZL1'0'                                   *\n*             DAYS     DS    ZL2'00'                                  *\n*             MONTHS   DS    ZL2'00'                                  *\n*             YEARS    DS    ZL3'00000'                               *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  LAGE-PARAMETERS.                                    *\n*                 02  DATE1  PIC 9(8) VALUE 01011997.                 *\n*                 02  DATE2  PIC 9(8) VALUE 04251988.                 *\n*                 02  RC     PIC 9(1) VALUE 0.                        *\n*                 02  DAYS   PIC S9(2) VALUE +0.                      *\n*                 02  MONTHS PIC S9(2) VALUE +0.                      *\n*                 02  YEARS  PIC S9(5) VALUE +0.                      *\n*             CALL 'Y2KLAGE' USING LAGE-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE1 FIELD        *\n*        (3 FOR DATE2).  INVALID DATA ARE DETERMINED IF THE FIELD'S   *\n*        LOW ORDER BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE     *\n*        OF X'C', X'D', OR X'F'), OR IF THE PRECEEDING BYTES' ZONES   *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED IN THE DATE1     *\n*        FIELD (5 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 1      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED IN THE DATE1    *\n*        FIELD (7 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 2      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED IN THE DATE1      *\n*        FIELD (9 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 3      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE ABSOLUTE VALUE OF THE NUMBER  *\n*        OF DAYS, MONTHS, AND YEARS WILL BE PLACED IN THE 4TH, 5TH    *\n*        AND 6TH FIELDS.  IF THE RETURN CODE IS A NON-ZERO VALUE      *\n*        (UNSUCCESSFUL EXECUTION), THESE 3 FIELDS WILL CONTAIN ZEROS. *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KLAGE  CSECT\n*         PRINT NOGEN\n         EYEC  'LONG TERM AGE BETWEEN 2 DATES'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KLAGE,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KLAGE GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KLAGE GETMAIN ENDS'\n*\n*    INITIALIZE OUTPUT PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN CODE\n         MVC   PRC+1(9),PRC            ZERO ELAPSED DAYS\n*\n*    TEST DATE1 FOR INVALID CHARACTER\n*\n         LA    R2,PDATE1               ADDRESS PASSED DATE\n         LA    R3,7                    LENGTH MINUS 1\n         MVI   PRC,C'2'                ASSUME INVALID DATA\n         BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID DATE TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    TEST DATE2 FOR INVALID CHARACTER\n*\n         LA    R2,PDATE2               ADDRESS PASSED DATE\n         LA    R3,7                    LENGTH MINUS 1\n         MVI   PRC,C'3'                ASSUME INVALID DATA\n         BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID DATE TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    BRANCH AROUND PERFORMED CODE TO CONTINUE\n*\n         B     TEST2                   CONTINUE WITH NEXT TEST\n*\n*    THIS ROUTINE SCANS FOR INVALID CHARACTERS IN ZONED-DECIMAL\n*    PARAMETER FIELDS.  IT IS CALLED FOR BOTH DATE FIELDS.\n*\nPTEST1   EQU   *\nPT1LOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,PT1LOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATE CONTAINED AN INVALID CHARACTER.  SINCE THE ERROR RC WAS\n*    SET BY THE CALLER, JUST RETURN.\n*\nPT1ERR   BR    R14                     RETURN\n*\n*    DATE WAS VALID, SO RESET RETURN CODE TO GOOD AND RETURN.\n*\nPT1OK    MVI   PRC,C'0'                INDICATE GOOD DATE\n         BR    R14                     AND RETURN\n*\n*    THIS BRANCH POINT IS TO JUMP OVER PERFORMED ROUTINE ABOVE\n*\nTEST2    EQU   *\n*\n*    TEST YEAR1 FOR VALID RANGE\n*\n         PACK  WFY,PDATE1+4(4)         PACK PASSED YEAR1\n         CP    WFY,=P'1601'            IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    WFY,=P'3399'            IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR1 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR2 FOR VALID RANGE\n*\nP1OK2    PACK  WTY,PDATE2+4(4)         PACK PASSED YEAR2\n         CP    WTY,=P'1601'            IS YEAR PRIOR TO 1601?\n         BL    P2ERR2                  IF YES, YEAR NOT VALID\n         CP    WTY,=P'3399'            IS YEAR AFTER 3399?\n         BNH   P2OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR2 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP2ERR2   MVI   PRC,C'5'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST MONTH1 FOR VALID RANGE\n*\nP2OK2    PACK  WFM,PDATE1(2)           PACK PASSED MONTH1\n         CP    WFM,=P'1'               IS MONTH ZERO?\n         BL    P1ERR3                  IF YES, MONTH NOT VALID\n         CP    WFM,=P'12'              IS MONTH GREATER THAN 12?\n         BNH   P1OK3                   IF NOT, MONTH IS VALID\n*\n*    MONTH1 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR3   MVI   PRC,C'6'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST MONTH2 FOR VALID RANGE\n*\nP1OK3    PACK  WTM,PDATE2(2)           PACK PASSED MONTH2\n         CP    WTM,=P'1'               IS MONTH ZERO?\n         BL    P2ERR3                  IF YES, MONTH NOT VALID\n         CP    WTM,=P'12'              IS MONTH GREATER THAN 12?\n         BNH   P2OK3                   IF NOT, MONTH IS VALID\n*\n*    MONTH2 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP2ERR3   MVI   PRC,C'7'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    GET MAXIMUM DAYS FOR DATE1 MONTH\n*\nP2OK3    MVC   GMYEAR,PDATE1+4         COPY YEAR TO GETMDAYS PARM\n         MVC   GMMONTH,PDATE1          COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n*\n*    TEST DAY FOR VALID RANGE\n*\n         PACK  WFD,PDATE1+2(2)         PACK PASSED DAY1\n         ZAP   WFD,WFD                 CONVERT SIGN OF DAY TO X'C'\n         CP    WFD,=P'1'               IS DAY ZERO?\n         BL    P1ERR4                  IF YES, DAY NOT VALID\n         CP    WFD,MAXDAYS             IS DAY GREATER THAN MAX?\n         BNH   P1OK4                   IF NOT, MONTH IS VALID\n*\n*    DAY1 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR4   MVI   PRC,C'8'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    GET MAXIMUM DAYS FOR DATE2 MONTH\n*\nP1OK4    MVC   GMYEAR,PDATE2+4         COPY YEAR TO GETMDAYS PARM\n         MVC   GMMONTH,PDATE2          COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n*\n*    TEST DAY FOR VALID RANGE\n*\n         PACK  WTD,PDATE2+2(2)         PACK PASSED DAY2\n         ZAP   WTD,WTD                 CONVERT SIGN OF DAY TO X'C'\n         CP    WTD,=P'1'               IS DAY ZERO?\n         BL    P2ERR4                  IF YES, DAY NOT VALID\n         CP    WTD,MAXDAYS             IS DAY GREATER THAN MAX?\n         BNH   P2OK4                   IF NOT, MONTH IS VALID\n*\n*    DAY2 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP2ERR4   MVI   PRC,C'9'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    ENSURE THAT WFM/WFD/WFY CONTAINS EARLIER OF THE 2 DATES\n*\nP2OK4    CP    WFY,WTY                 COMPARE YEARS\n         BL    ORDOK                   ORDER IS CORRECT\n         BH    ORDSWAP                 ORDER IS INCORRECT\n         CP    WFM,WTM                 COMPARE MONTHS (SAME YEAR)\n         BL    ORDOK                   ORDER IS CORRECT\n         BH    ORDSWAP                 ORDER IS INCORRECT\n         CP    WFD,WTD                 COMPARE DAYS (SAME MONTH)\n         BNH   ORDOK                   ORDER IS CORRECT\nORDSWAP  ZAP   COUNT,WFY               SWAP\n         ZAP   WFY,WTY                    WFY AND\n         ZAP   WTY,COUNT                     WTY\n         ZAP   COUNT,WFM               SWAP\n         ZAP   WFM,WTM                    WFM AND\n         ZAP   WTM,COUNT                     WTM\n         ZAP   COUNT,WFD               SWAP\n         ZAP   WFD,WTD                    WFD AND\n         ZAP   WTD,COUNT                     WTD\n*\n*    SET COUNT WORK FIELD TO ZERO.\n*\nORDOK    ZAP   COUNT,=P'0'              SET COUNT TO ZERO\n*\n*    BEGIN COMPUTATIONS FOR ELAPSED TIME:  STEP 1:  IF YEAR AND\n*    MONTH ARE THE SAME, COMPUTE DIFFERENCE IN DAYS AND EXIT.\n*\n         CP    WFY,WTY                 ARE YEARS THE SAME?\n         BNE   STEP2                   IF NOT, GO TO NEXT STEP\n         CP    WFM,WTM                 ARE MONTHS THE SAME?\n         BNE   STEP2                   IF NOT, GO TO NEXT STEP\n         SP    WTD,WFD                 COMPUTE DIFFERENCE BETWEEN DAYS\n         UNPK  DWORK(3),WTD(2)         UNPACK\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PDAYS,DWORK+1           MOVE TO OUTPUT\n         B     RETURN                  AND RETURN\n*\n*    STEP2:  GET MAXDAYS FOR FROM MONTH AND STORE FROM DAY IN ID\n*\nSTEP2    UNPK  GMYEAR,WFY              COPY YEAR TO GETMDAYS PARM\n         UNPK  GMMONTH,WFM             COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n         ZAP   ID,WFD                  STORE FROM DAY AND\n         ZAP   IMAX,MAXDAYS              MAXDAYS FOR FROM YEAR/MONTH\n*\n*    STEP3:  BEGIN INCREMENTING FROM MONTH AND YEAR UNTIL EQUAL\n*    TO MONTH AND YEAR, COUNTING THE NUMBER OF INCREMENTS.\n*\nSTEP3    CP    WFY,WTY                 YEARS DIFFERENT?\n         BL    STEP3A                  IF SO, CONTINUE INCREMENTING\n         CP    WFM,WTM                 MONTHS DIFFERENT?\n         BNL   STEP4                   IF NOT, GO TO NEXT STEP\nSTEP3A   AP    WFM,=P'1'               INCREMENT MONTH\n         AP    COUNT,=P'1'             COUNT MONTHS INCREMENTED\n         CP    WFM,=P'13'              EXCEEDED 12 MONTHS THIS YEAR?\n         BL    STEP3                   IF NOT, CONTINUE THIS STEP\n         SP    WFM,=P'12'              ELSE, RESET MONTH\n         AP    WFY,=P'1'                 AND INCREMENT YEAR\n         B     STEP3                       THEN CONTINUE THIS STEP\n*\n*    GET MAXDAYS FOR INCREMENTED YEAR/MONTH.\n*\nSTEP4    UNPK  GMYEAR,WFY              COPY YEAR TO GETMDAYS PARM\n         UNPK  GMMONTH,WFM             COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n*\n*    TEST FOR OVERSHOOT.\n*\nSTEP5    ZAP   X,WTD                   PUT TO DAY IN WORK FIELD\n         SP    X,MAXDAYS               SUBTRACT MAX DAYS\n         BL    STEP7                   IF LESS THAN ZERO, STEP 7\n*\n*    COMPUTE SUM OF DAYS COUNTED TO END OF THE EARLIEST MONTH, PLUS\n*    DAYS COUNTED TO THE TARGET DAY FROM THE END OF THE NEWLY\n*    CALCULATED MONTH.\n*\n         ZAP   WTD,X                   SET TO DAY EQUAL X\n         AP    WTD,IMAX                ADD ORIGINAL MAX DAYS\n         SP    WTD,ID                  SUBTRACT ORIGINAL DAY\n         B     FINI                    GO TRANSFER TO RETURN FIELDS\n*\n*    CORRECT OVERSHOOT.\n*\nSTEP7    SP    COUNT,=P'1'             DECREMENT MONTH COUNTER\n         AP    WTD,IMAX                ADD ORIGINAL MAX DAYS\n         SP    WTD,ID                  SUBTRACT ORIGINAL DAY\n*\n*    IF TO DAY NOT LESS THAN ORIGINAL MAX DAYS AND INITIAL FROM DAY\n*    IS LESS THAN 29, SWITCH TO RELATIVE DATE DISPLACEMENT AGING\n*\n         CP    WTD,IMAX                TO DAY < ORIGINAL MAX DAYS?\n         BL    FINI                    NO, TRANSFER TO RETURN FIELDS\n         CP    ID,=P'29'               ORIGINAL DAY < 29?\n         BNL   FINI                    NO, TRANSFER TO RETURN FIELDS\n*\n*    SWITCH TO RELATIVE AGING: PDAY PARAMETER WILL BE: -1 < PDAY < 33\n*\n         SP    WTD,IMAX                SUBTRACT ORIGINAL MAX DAYS\n         AP    COUNT,=P'1'             INCREMENT COUNT\n*\n*    BUILD PARAMETER FIELDS\n*\nFINI     ZAP   WORK5,COUNT             PUT COUNT IN 5 BYTE FIELD\n         DP    WORK5,=P'12'            DIVIDE BY 12\n         UNPK  PYEARS(5),WORK5(3)      UNPACK YEARS\n         OI    PYEARS+4,X'F0'          CLEAR SIGN\n         UNPK  DWORK(3),WORK5+3(2)     UNPACK MONTHS\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PMONTHS,DWORK+1         MOVE TO OUTPUT\n         UNPK  DWORK(3),WTD(2)         UNPACK DAYS\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PDAYS,DWORK+1           MOVE TO OUTPUT\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n* ******************************************************************* *\n* *************************** SUBROUTINES *************************** *\n* ******************************************************************* *\n*\n*    SINCE IT IS NECESSARY TO REPEATEDLY DETERMINE THE MAXIMUM NUMBER\n*    OF DAYS FOR A GIVEN MONTH IN A GIVEN YEAR, THIS ROUTINE IS USED\n*    TO REDUCE PROGRAM SIZE.  THE YEAR IS PLACED IN GMYEAR, THE MONTH\n*    IN GMMONTH AND THE ROUTINE IS BRANCHED TO USING REGISTER 9 AS\n*    THE LINK POINT TO THE CALL.\n*\n* ******************************************************************* *\nGETMDAYS EQU   *\n*\n*    DETERMINE LEAP YEAR STATUS\n*\n         MVI   LEAP,C'0'               ASSUME NOT A LEAP YEAR\n         PACK  DWORK(5),GMYEAR         PUT YEAR INTO WORK FIELD\n         DP    DWORK(5),=P'4'          DIVIDE YEAR BY 4\n         CP    DWORK+4(1),=P'0'        WAS IT EVENLY DIVISIBLE?\n         BH    GMCONT1                 IF NOT, IT IS *NOT* LEAP YEAR\n         PACK  DWORK(5),GMYEAR         PUT YEAR INTO WORK FIELD\n         DP    DWORK(5),=P'100'        DIVIDE YEAR BY 100\n         CP    DWORK+3(2),=P'0'        WAS IT EVENLY DIVISIBLE?\n         BH    GMLEAP                  IF NOT, IT IS A LEAP YEAR\n         PACK  DWORK(5),GMYEAR         PUT YEAR INTO WORK FIELD\n         DP    DWORK(5),=P'400'        DIVIDE YEAR BY 400\n         CP    DWORK+3(2),=P'0'        WAS IT EVENLY DIVISIBLE?\n         BH    GMCONT1                 IF NOT, IT IS *NOT* LEAP YEAR\n*\n*    TEST FOR LEAP YEAR SUCCEEDED, RESET LEAP INDICATOR.\n*\nGMLEAP   MVI   LEAP,C'1'               INDICATE LEAP YEAR\n*\n*    RETRIEVE MAXIMUM DAYS ENTRY FROM TABLE\n*\nGMCONT1  LA    R4,DIM                  GET ADDRESS OF DAY TABLE\n         CLI   LEAP,C'0'               IS THIS LEAP YEAR?\n         BE    GMCONT2                 IF NOT, ADDRESS IS OK\n         LA    R4,2(,R4)               ELSE ADJUST TO LEAP ENTRY\nGMCONT2  PACK  DWORK(8),GMMONTH(2)     GET MONTH INTO DOUBLEWORD\n         CVB   R3,DWORK                CONVERT TO BINARY\n         BCTR  R3,0                    DECREMENT BY 1 (ZERO BASE)\n         SLL   R3,2                    MULTIPLY BY TABLE ENTRY LENGTH\n         LA    R4,0(R3,R4)             LOAD ENTRY ADDRESS INTO R4\n         MVC   MAXDAYS(2),0(R4)        MOVE ENTRY TO WORK FIELD\n*\n*    RETURN FROM SUBROUTINE\n*\n         BR    R9                      RETURN TO CALLING POINT\n         EJECT\n* ******************************************************************* *\n* **************************** CONSTANTS **************************** *\n* ******************************************************************* *\n*\n*    MAXIMUM DAYS IN MONTHS ... EACH ENTRY HAS 2 VALUES, THE 1ST FOR\n*    A NORMAL (NON-LEAP) YEAR AND THE 2ND FOR A LEAP YEAR\n*\nDIM      DC    PL2'31',PL2'31'           JANUARY\n         DC    PL2'28',PL2'29'           FEBRUARY\n         DC    PL2'31',PL2'31'           MARCH\n         DC    PL2'30',PL2'30'           APRIL\n         DC    PL2'31',PL2'31'           MAY\n         DC    PL2'30',PL2'30'           JUNE\n         DC    PL2'31',PL2'31'           JULY\n         DC    PL2'31',PL2'31'           AUGUST\n         DC    PL2'30',PL2'30'           SEPTEMBER\n         DC    PL2'31',PL2'31'           OCTOBER\n         DC    PL2'30',PL2'30'           NOVEMBER\n         DC    PL2'31',PL2'31'           DECEMBER\n* ******************************************************************* *\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nWFM      DS    PL2                     FROM MONTH\nWFD      DS    PL2                     FROM DAY\nWFY      DS    PL3                     FROM YEAR\nWTM      DS    PL2                     TO MONTH\nWTD      DS    PL2                     TO DAY\nWTY      DS    PL3                     TO YEAR\nID       DS    PL2                     WORK FIELD\nIMAX     DS    PL2                     WORK FIELD\nX        DS    PL2                     WORK FIELD\nWORK5    DS    PL5                     WORK FIELD\nCOUNT    DS    PL3                     WORK COUNTER\nGMYEAR   DS    ZL4                     PARM YEAR TO GETMDAYS ROUTINE\nGMMONTH  DS    ZL2                     PARM MONTH TO GETMDAYS ROUTINE\nMAXDAYS  DS    PL2                     MAX DAYS IN CURRENT MONTH\nLEAP     DS    CL1                     LEAP STATUS\nDWORK    DS    D                       DOUBLEWORD WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE1   DS    CL8                     DATE TO BE PROCESSED\nPDATE2   DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0, 2-9)\nPDAYS    DS    ZL2                     ELAPSED DAYS\nPMONTHS  DS    ZL2                     ELAPSED MONTHS\nPYEARS   DS    ZL5                     ELAPSED YEARS\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KLEAP": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00X\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f D\\x00\\xc8\\x00\\xc8\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:44:58", "lines": 200, "newlines": 200, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KLEAP - DETERMINES LEAP YEAR STATUS'\n* ******************************************************************* *\n* ******************************************************************* *\n*  THIS PROGRAM IS COPYRIGHTED BY:  MR. JAY MOSELEY, CCP              *\n*                                   200 HEYWOOD AVE 1503              *\n*                                   SPARTANBURG, SC 29307-1792        *\n*  NO USE MAY BE MADE OF THE DESIGN, CODING STRUCTURE, OR ANY PART    *\n*  THEREOF WITHOUT THE EXPRESS WRITTEN PERMISSION OF THE AUTHOR IN    *\n*  ADVANCE.  (1996, 1997, 1998, 1999, 2000)                           *\n* ******************************************************************* *\n* ******************************************************************* *\n*                                                                     *\n*   YY   YY   222   KK   KK LL      EEEEEE     A    PPPPPP            *\n*   YY   YY  2   2  KK  KK  LL      EE        AAA   PP   PP           *\n*   YY   YY      2  KK KK   LL      EE       AA AA  PP   PP           *\n*    YY YY       2  KKKK    LL      EEEE    AA   AA PP   PP           *\n*     YYY     222   KKKK    LL      EE      AA   AA PPPPPP            *\n*     YY     2      KK KK   LL      EE      AAAAAAA PP                *\n*     YY     2      KK  KK  LL      EE      AA   AA PP                *\n*     YY     22222  KK   KK LLLLLLL EEEEEEE AA   AA PP                *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES GREGORIAN LEAP YEARS                  *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 4 BYTE FIELD CONTAINING THE YEAR TO BE TESTED          *\n*            (IN ZONED-DECIMAL FORMAT),                               *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 1 BYTE LEAP YEAR INDICATOR (IN ZONED-DECIMAL FORMAT).  *\n*        THE ROUTINE WILL NOT ALTER THE YEAR PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KLEAP,(YEAR)                           *\n*                         . . .                                       *\n*             YEAR     DS    ZL4'1997'                                *\n*             RC       DS    ZL1'0'                                   *\n*             LEAP     DS    ZL1'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  LEAP-PARAMETERS.                                    *\n*                 02  YEAR PIC 9(4) VALUE 1997.                       *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  LEAP PIC 9(1) VALUE 0.                          *\n*             CALL 'Y2KLEAP' USING LEAP-PARAMETERS.                   *\n*                                                                     *\n*    3.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE YEAR FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE LEAP INDICATOR FIELD WILL     *\n*        CONTAIN A VALUE OF 1 IF THE YEAR IS A LEAP YEAR.  A VALUE    *\n*        OF 0 INDICATES NO LEAP YEAR.  IF THE RETURN CODE IS A        *\n*        NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE LEAP YEAR       *\n*        INDICATOR WILL CONTAIN THE VALUE OF 9 TO PROTECT AGAINST     *\n*        UNINTENTIONAL USE OF AN INVALID RESULT.                      *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KLEAP  CSECT\n*        PRINT NOGEN\n         EYEC  'RETURN LEAP YEAR STATUS FOR PASSED YEAR'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KLEAP,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KLEAP GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KLEAP GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND LEAP YEAR STATUS PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVI   PLEAP,C'9'              UNDETERMINED LEAP STATUS\n*\n*    TEST YEAR FOR INVALID CHARACTER\n*\n         LA    R2,PYEAR                ADDRESS PASSED YEAR\n         LA    R3,3                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n*\n*    YEAR CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  P3(3),PYEAR             PACK PASSED YEAR\n         CP    P3(3),=P'1601'          IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    P3(3),=P'3399'          IS YEAR AFTER 3399?\n         BNH   P1OK                    IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    DETERMINE LEAP YEAR STATUS\n*\nP1OK     MVI   PLEAP,C'0'              ASSUME NOT A LEAP YEAR\n         ZAP   P5,P3                   PUT YEAR INTO WORK FIELD\n         DP    P5,=P'4'                DIVIDE YEAR BY 4\n         CP    P5+4(1),=P'0'           WAS IT EVENLY DIVISIBLE?\n         BH    RETURN                  IF NOT, IT IS *NOT* LEAP YEAR\n         ZAP   P5,P3                   PUT YEAR INTO WORK FIELD\n         DP    P5,=P'100'              DIVIDE YEAR BY 100\n         CP    P5+3(2),=P'0'           WAS IT EVENLY DIVISIBLE?\n         BH    ISLEAP                  IF NOT, IT IS A LEAP YEAR\n         ZAP   P5,P3                   PUT YEAR INTO WORK FIELD\n         DP    P5,=P'400'              DIVIDE YEAR BY 400\n         CP    P5+3(2),=P'0'           WAS IT EVENLY DIVISIBLE?\n         BH    RETURN                  IF NOT, IT IS *NOT* LEAP YEAR\n*\n*    TEST FOR LEAP YEAR SUCCEEDED, RESET LEAP INDICATOR.\n*\nISLEAP   MVI   PLEAP,C'1'              INDICATE LEAP YEAR\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nTOPFLAG  DS    CL24                    EYECATCHER\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nP3       DS    PL3                     WORK AREA FOR PACKED YEAR\nP5       DS    PL5                     WORK AREA FOR DIVISION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPYEAR    DS    CL4                     YEAR TO BE TESTED\nPRC      DS    CL1                     RETURN CODE (0/2/4)\nPLEAP    DS    CL1                     LEAP YEAR STATUS (0/1/9)\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KPROJ": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x04\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f E\\x00\\xfd\\x00\\xfd\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:45:04", "lines": 253, "newlines": 253, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KPROJ - INCREMENT/DECREMENT GREGORIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK PPPPPP  RRRRRR   OOOOO       JJ           *\n*   YY   YY  2   2  KK  KK  PP   PP RR   RR OO   OO      JJ           *\n*   YY   YY      2  KK KK   PP   PP RR   RR OO   OO      JJ           *\n*    YY YY       2  KKKK    PP   PP RR   RR OO   OO      JJ           *\n*     YYY     222   KKKK    PPPPPP  RRRRRR  OO   OO      JJ           *\n*     YY     2      KK KK   PP      RR RR   OO   OO JJ   JJ           *\n*     YY     2      KK  KK  PP      RR  RR  OO   OO JJ   JJ           *\n*     YY     22222  KK   KK PP      RR   RR  OOOOO   JJJJJ            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE INCREMENTS OR DECREMENTS A GIVEN GREGORIAN       *\n*    DATE (MMDDYYYY) BY A SPECIFIED NUMBER OF DAYS                    *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  FOUR FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:         *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE TO BE INCR/          *\n*            DECREMENTED (IN ZONED-DECIMAL FORMAT),                   *\n*        2)  A 6 BYTE FIELD CONTAINING THE INCREMENTAL VALUE (IN      *\n*            ZONED-DECIMAL FORMAT, NEGATIVE OR POSITIVE),             *\n*        3)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        4)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE RESULTING         *\n*            GREGORIAN DATE (IN ZONED-DECIMAL FORMAT).                *\n*        THE ROUTINE WILL NOT ALTER THE DATE AND INCREMENT FIELDS     *\n*        PASSED TO IT.                                                *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KPROJ,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'01011997'                            *\n*             INCR     DS    ZL6'00003N'     NOTE: -35 DAYS           *\n*             RC       DS    ZL1'0'                                   *\n*             NUDATE   DS    ZL8'00000000'                            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  PROJ-PARAMETERS.                                    *\n*                 02  DATE   PIC 9(8) VALUE 01011997.                 *\n*                 02  INCR   PIC S9(6) VALUE -35.                     *\n*                 02  RC     PIC 9(1) VALUE 0.                        *\n*                 02  NUDATE PIC 9(8) VALUE ZERO.                     *\n*             CALL 'Y2KPROJ' USING PROJ-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*        3 INDICATES INVALID DATA WAS FOUND IN THE INCREMENT FIELD.   *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        5 INDICATES THAN AN INVALID DATE WILL BE DEVELOPED WHEN      *\n*        THE INPUT DATE IS INCREMENTED BY THE SPECIFIED AMOUNT        *\n*        (OUTSIDE OF YEAR RANGE LISTED IN 1 ABOVE).                   *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE RESULTING DATE IS PLACED      *\n*        IN THE 4TH PARAMETER.  IF THE RETURN CODE IS A NON-ZERO      *\n*        VALUE (UNSUCCESSFUL EXECUTION), THE 4TH PARAMETER WILL       *\n*        CONTAIN ZEROS.                                               *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KPROJ  CSECT\n*        PRINT NOGEN\n         EYEC  'COMPUTE DATE USING OFFSET FROM GIVEN DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KPROJ,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KPROJ GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KPROJ GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND ANUM PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            NULL NEW DATE\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR DATE PASSED\n*\n         MVC   DATEG,PDATE             LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    TEST INCREMENT/DECREMENT VALUE FOR INVALID CHARACTER\n*\n         LA    R2,PINCR                ADDRESS PASSED INCREMENT\n         LA    R3,5                    LENGTH MINUS 1\nP2VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P2ERR1                  IF YES, INCR CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P2ERR1                  IF YES, INCR CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P2VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P2ERR1                  IF YES, INCR CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P2OK                    IF YES, INCR IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P2OK                    IF YES, INCR IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P2OK                    IF YES, INCR IS VALID NUMERIC\n*\n*    INCREMENT CONTAINED AN INVALID CHARACTER\n*\nP2ERR1   MVI   PRC,C'3'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    ADD INCREMENT TO ASTRO NUMBER FOR ORIGIN DATE.\n*\nP2OK     PACK  WORK(4),PINCR(6)        PACK THE INCREMENT\n         PACK  WORK2(4),ANUMG(7)       AND THE ASTRO #\n         AP    WORK(4),WORK2(4)        ADD THEM\n*\n*    NOW MAKE SURE RESULTING DATE WILL BE IN ALLOWABLE RANGE.\n*\n         CP    WORK,=P'2305814'        WILL YEAR BE LESS THAN 1601?\n         BL    P2ERR2                  IF YES, RETURN ERROR\n         CP    WORK,=P'2962884'        OR GREATER THAN 3399?\n         BNH   GETDATE                 IF NOT, GET THE DATE\n*\n*    NEW DATE WOULD BE OUT OF RANGE, SO INDICATE ERROR.\n*\nP2ERR2   MVI   PRC,C'5'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    USE Y2KATOG TO BUILD NEW DATE.\n*\nGETDATE  UNPK  ANUMA(7),WORK(4)        UNPACK NEW ASTRO #\n         OI    ANUMA+6,X'F0'           CLEAR SIGN\n         LA    R1,ATOGPARM             ADDRESS OF Y2KATOG PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KATOG)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    PLACE DATE IN CALLER'S STORAGE.\n*\n         MVC   PNUDATE(8),DATEA        RETURNED DATE\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nDATEG    DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       ASTRO NUMBER\nATOGPARM DS    0H                      PARAMETERS FOR Y2KATOG\nANUMA    DS    ZL7                       ASTRO NUMBER\nRCA      DS    CL1                       RETURN CODE\nDATEA    DS    CL8                       OUTPUT DATE\nWORK     DS    PL4                     CALCULATION WORK FIELD\nWORK2    DS    PL4                     CALCULATION WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPINCR    DS    ZL6                     AMOUNT OF INCREMENT\nPRC      DS    CL1                     RETURN CODE (0/2-6/8)\nPNUDATE  DS    CL8                     NEW DATE\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KSAGE": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x11\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f E\\x00\\xd5\\x00\\xd5\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:45:11", "lines": 213, "newlines": 213, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KSAGE - COMPUTE ELAPSED DAYS BETWEEN DATES'\n*                                                                     *\n*   YY   YY   222   KK   KK  SSSSS     A     GGGGG  EEEEEE            *\n*   YY   YY  2   2  KK  KK  SS   SS   AAA   GG   GG EE                *\n*   YY   YY      2  KK KK   SS       AA AA  GG   GG EE                *\n*    YY YY       2  KKKK     SSSSS  AA   AA GG      EEEE              *\n*     YYY     222   KKKK         SS AA   AA GG  GGG EE                *\n*     YY     2      KK KK   SS   SS AAAAAAA GG   GG EE                *\n*     YY     2      KK  KK  SS   SS AA   AA GG   GG EE                *\n*     YY     22222  KK   KK  SSSSS  AA   AA  GGGGG  EEEEEEE           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE NUMBER OF DAYS ELAPSED BETWEEN 2    *\n*    GIVEN GREGORIAN DATES (MMDDYYYY) FOR SHORT TERM AGING            *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  FOUR FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:         *\n*        1) & 2)  8 BYTE FIELDS CONTAINING THE GREGORIAN DATES (IN    *\n*            (ZONED-DECIMAL FORMAT) BETWEEN WHICH THE NUMBER OF DAYS  *\n*            IS TO BE CALCULATED (ORDER OF THE DATES IS IMMATERIAL),  *\n*        3)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        4)  A 7 BYTE FIELD WHICH WILL RECEIVE THE NUMBER OF ELAPSED  *\n*            DAYS (IN ZONED-DECIMAL FORMAT).                          *\n*        THE ROUTINE WILL NOT ALTER THE DATES PASSED TO IT.           *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KSAVE,(DATE1)                          *\n*                         . . .                                       *\n*             DATE1    DS    ZL8'01011997'                            *\n*             DATE2    DS    ZL8'04011997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             DAYS     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  SAGE-PARAMETERS.                                    *\n*                 02  DATE1 PIC 9(8) VALUE 01011997.                  *\n*                 02  DATE2 PIC 9(8) VALUE 04011997.                  *\n*                 02  RC    PIC 9(1) VALUE 0.                         *\n*                 02  DAYS  PIC S9(7) VALUE +0.                       *\n*             CALL 'Y2KSAGE' USING SAGE-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE1 FIELD        *\n*        (3 FOR DATE2).  INVALID DATA ARE DETERMINED IF THE FIELD'S   *\n*        LOW ORDER BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE     *\n*        OF X'C', X'D', OR X'F'), OR IF THE PRECEEDING BYTES' ZONES   *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED IN THE DATE1     *\n*        FIELD (5 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 1      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED IN THE DATE1    *\n*        FIELD (7 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 2      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED IN THE DATE1      *\n*        FIELD (9 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 3      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE ABSOLUTE VALUE OF THE NUMBER  *\n*        OF DAYS BETWEEN THE 2 SPECIFIED DATES WILL BE PLACED IN THE  *\n*        4TH PARAMETER (IN PACKED DECIMAL FORMAT).  IF THE RETURN     *\n*        CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE 4TH   *\n*        PARAMETER WILL CONTAIN ZEROS.                                *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KSAGE  CSECT\n*         PRINT NOGEN\n         EYEC  'SHORT TERM AGE BETWEEN 2 DATES'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KSAGE,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KSAGE GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KSAGE GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DAYS PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(7),PRC            NULL DAYS\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR 1ST DATE PASSED\n*\n         MVC   GDATE,PDATE1            LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    SAVE THE ASTRONOMICAL NUMBER FOR DAY PASSED\n*\n         PACK  WORK(4),ANUMG(7)        SAVE ASTRO NUMBER\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR 2ND DATE PASSED\n*\n         MVC   GDATE,PDATE2            LOAD DATE TO PASS\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    AGAIN, TEST THE RETURN CODE SO THE CALLER'S DATA IS CHECKED\n*    BY Y2KGTOA INSTEAD OF US ... BUT WE HAVE TO ADJUST THE CODE\n*    THIS TIME TO REFLECT THE SECOND DATE FIELD.\n*\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BE    COMPUTE                 IF YES, GO FIGURE DAYS\n*\n*    WE HAVE TO BUMP THE RETURN CODE BY 1 TO INDICATE THE 2ND DATE.\n*\n         PACK  WORK(1),RCG(1)          PACK THE RETURN CODE\n         AP    WORK(1),=P'1'           INCREMENT BY 1\n         UNPK  PRC(1),WORK(1)          UNPACK TO DESTINATION\n         OI    PRC,X'F0'               REMOVE THE ZONE\n         B     RETURN                  AND EXIT TO CALLER\n*\n*    SUBTRACT 2ND ASTRO NUMBER FROM THE 1ST ONE.\n*\nCOMPUTE  PACK  WORK2(4),ANUMG(7)       PACK THE 2ND ASTRO #\n         SP    WORK,WORK2              YIELDS DIFFERENCE IN DAYS\n         UNPK  PDAYS(7),WORK           UNPACK RESULT\n         OI    PDAYS+6,X'F0'           CLEAR SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nGDATE    DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       ASTRO NUMBER\nWORK     DS    PL4                     WORK FIELD FOR COMPUTATION\nWORK2    DS    PL4                     WORK FIELD FOR COMPUTATION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE1   DS    CL8                     DATE TO BE PROCESSED\nPDATE2   DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0, 2-9)\nPDAYS    DS    ZL7                     DAYS DIFFERENCE\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KSCAN": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x04o\\x01\\x04\\x04o\\x12\\x00\\x02\\xd6\\x02\\xd6\\x00\\x00\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-15T00:00:00", "modifydate": "2004-02-15T12:00:00", "lines": 726, "newlines": 726, "modlines": 0, "user": "MOSELEY"}, "text": "000100$SET LITLINK\n000200 IDENTIFICATION DIVISION.\n000300 PROGRAM-ID. Y2KSCAN.\n000400 AUTHOR. JAY MOSELEY.\n000500 DATE-WRITTEN. AUGUST, 1998.\n000600 DATE-COMPILED.\n000700\n000800* ************************************************************* *\n000900* THE PURPOSE OF THIS PROGRAM IS TO SCAN THE SOURCE CODE FILE   *\n001000* FOR A COMPUTER PROGRAM AND, USING A GLOSSARY FILE SUPPLIED AT *\n001100* RUN TIME, IDENTIFY LINES IN THE SOURCE PROGRAM THAT MAY BE    *\n001200* SUSPECTS FOR CONTAINING DATE FIELD REFERENCES.                *\n001300*                                                               *\n001400* THIS PROGRAM WAS BASED UPON THE CONCEPT OF A PROGRAM WRITTEN  *\n001500* BY THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY (NIST)  *\n001600* AND PLACED INTO THE PUBLIC DOMAIN IN OCTOBER, 1996.           *\n001700* ************************************************************* *\n001800/\n001900 ENVIRONMENT DIVISION.\n002000 INPUT-OUTPUT SECTION.\n002100 FILE-CONTROL.\n002200     SELECT GLOSSARY-FILE ASSIGN TO UT-S-SYSIN\n002300         ORGANIZATION IS LINE SEQUENTIAL.\n002400\n002500     SELECT SOURCE-CODE-FILE ASSIGN TO UT-S-SOURCE\n002600         ORGANIZATION IS LINE SEQUENTIAL.\n002700\n002800     SELECT PRINT-FILE ASSIGN TO UT-S-SYSPRINT\n002900         ORGANIZATION IS LINE SEQUENTIAL.\n003000 DATA DIVISION.\n003100\n003200 FILE SECTION.\n003300 FD  GLOSSARY-FILE\n003400     RECORD CONTAINS 80 CHARACTERS\n003500     DATA RECORD IS GLOSSARY-RECD.\n003600* ************************************************************* *\n003700* GLOSSARY RECORD IS FREE-FORM INPUT.  EACH RECORD DEFINES AN   *\n003800* ENTRY IN THE GLOSSARY TABLE.  THE FIRST WORD ON THE RECORD    *\n003900* BECOMES A \"KEY\" TO SEARCH FOR POSSIBLE MATCHS IN THE SOURCE   *\n004000* CODE FILE.  BY PLACING AN EXCLAMATION POINT (!) AFTER THIS    *\n004100* KEY WORD, ADDITIONAL WORDS MAY BE CODED TO SPECIFY WORDS THAT *\n004200* CONTAIN THE KEY WORD AS A SUBSTRING AND ARE TO BE EXCLUDED    *\n004300* FROM MATCHING SOURCE CODE ELEMENTS.  FOR EXAMPLE:             *\n004400*                                                               *\n004500*     DOW ! DOWN WINDOW                                         *\n004600*                                                               *\n004700* SPECIFIES THAT THE STRING \"DOW\" WHEN FOUND IN THE SOURCE CODE *\n004800* SHOULD BE REPORTED UNLESS IT IS A PART OF THE LARGER STRINGS  *\n004900* \"DOWN\" OR \"WINDOW\".                                           *\n005000*                                                               *\n005100* EACH WORD SPECIFIED MUST BE DELIMITED BY SPACES AND NO WORD   *\n005200* MAY BE LARGER THAN 20 CHARACTERS.                             *\n005300* ************************************************************* *\n005400 01  GLOSSARY-RECD.\n005500     02  GR-COMMENT-FLAG         PIC X(1).\n005600     02  FILLER                  PIC X(79).\n005700\n005800 FD  SOURCE-CODE-FILE\n005900     RECORD CONTAINS 80 CHARACTERS\n006000     DATA RECORD IS SOURCE-CODE-RECD.\n006100 01  SOURCE-CODE-RECD            PIC X(80).\n006200\n006300 FD  PRINT-FILE\n006400     RECORD CONTAINS 132 CHARACTERS\n006500     DATA RECORD IS PRINT-RECD.\n006600 01  PRINT-RECD                 PIC X(132).\n006700/\n006800 WORKING-STORAGE SECTION.\n006900\n007000* ************************************************************* *\n007100* FOLLOWING ARE GLOBAL CONTROL SWITCHES AND MISCELLANEOUS DATA. *\n007200* ************************************************************* *\n007300\n007400 01  PROGRAM-CONTROL-FIELDS.\n007500     02  INPUT-RECORD-COUNT      PIC S9(9) COMP.\n007600     02  END-OF-DATA-SWITCH      PIC X(1).\n007700         88  NOT-END-OF-DATA     VALUE 'N'.\n007800         88  END-OF-DATA         VALUE 'Y'.\n007900     02  SYSTEM-DATE-AND-TIME    PIC X(21).\n008000     02  FILLER                  REDEFINES SYSTEM-DATE-AND-TIME.\n008100         03  SYSTEM-DATE-YYYY    PIC 9(4).\n008200         03  SYSTEM-DATE-MMDD    PIC 9(4).\n008300         03  SYSTEM-TIME-HHMM    PIC 9(4).\n008400         03  FILLER              REDEFINES SYSTEM-TIME-HHMM.\n008500             04  SYSTEM-TIME-HH  PIC 9(2).\n008600             04  FILLER          PIC X(2).\n008700         03  FILLER              PIC X(9).\n008800     02  PAGE-COUNT              PIC 999 VALUE ZERO.\n008900     02  LINE-COUNT              PIC 99  VALUE 99.\n009000     02  PAGE-SIZE               PIC 99  VALUE 42.\n009100\n009200* ************************************************************* *\n009300* FOLLOWING IS THE DEFINITION OF THE GLOSSARY TABLE.            *\n009400* ************************************************************* *\n009500\n009600 01  GLOSSARY-TABLE.\n009700     02  GT-MAX                  PIC 9(8).\n009800     02  GT-LOAD-COUNT           PIC S9(9) COMP VALUE +0.\n009900     02  GT-EXCEPT-MAX           PIC 9(4).\n010000     02  GT-DATA.\n010100         03  GT-ENTRY            OCCURS 1000 TIMES\n010200                                 INDEXED BY GT-INDEX\n010300                                 ASCENDING KEY IS GT-WORD.\n010400             04  GT-WORD         PIC X(20).\n010500             04  GT-WORD-SIZE    PIC S9(4) COMP.\n010600             04  GT-EXCEPT-COUNT PIC S9(4) COMP.\n010700             04  GT-EXCEPTIONS.\n010800                 05  GT-EXCEPT   OCCURS 5 TIMES\n010900                                 INDEXED BY GT-EXCEPT-INDEX.\n011000                     06  GT-EXCEPT-WORD\n011100                                 PIC X(20).\n011200                     06  GT-EXCEPT-OFFSET\n011300                                 PIC S9(4) COMP.\n011400                     06  GT-EXCEPT-SIZE\n011500                                 PIC S9(4) COMP.\n011600\n011700* ************************************************************* *\n011800* WORK AREA USED TO PROCESS GLOSSARY TABLE ENTRIES.             *\n011900* ************************************************************* *\n012000 01  GLOSSARY-TABLE-WORK-AREA.\n012100     02  GTWA-INDEX-1            PIC S9(4) COMP VALUE +0.\n012200     02  GTWA-INDEX-2            PIC S9(4) COMP VALUE +0.\n012300     02  GTWA-CHARACTER          PIC X(1).\n012400     02  EXCLUDE-SWITCH          PIC X(1).\n012500         88  EXCLUDE-INDICATOR-NOTFOUND     VALUE 'N'.\n012600         88  EXCLUDE-INDICATOR-FOUND        VALUE 'Y'.\n012700     02  GTWA-WORD-MAX           PIC 9(4).\n012800     02  GTWA-STATUS             PIC 9(1) VALUE 0.\n012900         88  LOAD-STATUS-CONTINUE           VALUE 0, 1, 2.\n013000         88  LOAD-STATUS-INITIAL            VALUE 0.\n013100         88  LOAD-STATUS-INPROCESS          VALUE 1.\n013200         88  LOAD-STATUS-SKIP-WORD          VALUE 2.\n013300         88  LOAD-STATUS-SKIP-RECORD        VALUE 8.\n013400         88  LOAD-STATUS-ABORT              VALUE 9.\n013500     02  GTWA-WORD-LENGTH        PIC S9(4) COMP VALUE +0.\n013600     02  GTWA-WORD               PIC X(20).\n013700     02  GTWA-OFFSET             PIC S9(4) COMP VALUE +0.\n013800     02  GTWA-EXCEPT-WORD        PIC X(20).\n013900     02  GTWA-SUB-WORD           PIC X(20).\n014000\n014100* ************************************************************* *\n014200* WORK AREA USED TO PROCESS SOURCE CODE RECORDS.                *\n014300* ************************************************************* *\n014400 01  SOURCE-CODE-WORK-AREA.\n014500     02  MATCHED-RECORD-COUNT    PIC S9(9) COMP VALUE +0.\n014600     02  SCWA-SCAN-ZONE-BEGIN    PIC S9(4) COMP VALUE +1.\n014700     02  SCWA-SCAN-ZONE-END      PIC S9(4) COMP VALUE +80.\n014800     02  SCWA-INDEX-1            PIC S9(4) COMP VALUE +0.\n014900     02  SCWA-INDEX-2            PIC S9(4) COMP VALUE +0.\n015000     02  SCWA-WORD               PIC X(20).\n015100     02  SCWA-SEARCH-STATUS      PIC 9.\n015200         88  SEARCH-INITIAL                 VALUE 0.\n015300         88  SEARCH-KEYWORD-FOUND           VALUE 1.\n015400         88  SEARCH-EXCLUDE-FOUND           VALUE 2.\n015500\n015600* ************************************************************* *\n015700* FOLLOWING ARE THE REPORT HEADING AND DETAIL DESCRIPTIONS.     *\n015800* ************************************************************* *\n015900\n016000 01  HEADING-1.\n016100     02  FILLER      PIC X(6) VALUE 'DATE: '.\n016200     02  H1-DATE-MD  PIC Z9/99/.\n016300     02  H1-DATE-Y   PIC 9999.\n016400     02  FILLER      PIC X(27) VALUE SPACES.\n016500     02  FILLER      PIC X(43) VALUE\n016600         'SCANNING SOURCE CODE FOR YEAR 2000 SUSPECTS'.\n016700     02  FILLER      PIC X(27) VALUE SPACES.\n016800     02  FILLER      PIC X(16) VALUE 'PROGRAM: Y2KSCAN'.\n016900\n017000 01  HEADING-2.\n017100     02  FILLER      PIC X(6) VALUE 'TIME: '.\n017200     02  H2-TIME     PIC Z9/99B.\n017300     02  H2-TIME-M   PIC X(2).\n017400     02  FILLER      PIC X(33) VALUE SPACES.\n017500     02  H2-TITLE    PIC X(33) VALUE\n017600         '   PHASE 1: GLOSSARY TABLE LOAD  '.\n017700     02  FILLER      PIC X(40) VALUE SPACES.\n017800     02  FILLER      PIC X(9) VALUE 'PAGE:   '.\n017900     02  H2-PAGE     PIC ZZ9.\n018000\n018100 01  HEADING-3       PIC X(132) VALUE SPACES.\n018200\n018300 01  HEADING-3-PHASE-2.\n018400     02  FILLER      PIC X(11) VALUE ' RECORD NO '.\n018500     02  FILLER      PIC X(05) VALUE SPACES.\n018600     02  FILLER      PIC X(80) VALUE 'LINE FROM SOURCE CODE FILE'.\n018700     02  FILLER      PIC X(05) VALUE SPACES.\n018800     02  FILLER      PIC X(31) VALUE 'GLOSSARY WORD FOUND'.\n018900\n019000 01  DETAIL-LINE                 PIC X(132) VALUE SPACES.\n019100\n019200 01  DETAIL-LINE-PHASE-1         REDEFINES DETAIL-LINE.\n019300     02  DLP1-GLOSSARY-RECD      PIC X(80).\n019400     02  DLP1-MESSAGE            PIC X(52).\n019500\n019600 01  SUMMARY-LINE-PHASE-1        REDEFINES DETAIL-LINE.\n019700     02  SLP1-COUNT              PIC ZZ,ZZ9B.\n019800     02  SLP1-MESSAGE            PIC X(125).\n019900\n020000 01  DETAIL-LINE-PHASE-2         REDEFINES DETAIL-LINE.\n020100     02  DLP2-RECORD-NUMBER      PIC ZZZ,ZZZ,ZZ9.\n020200     02  FILLER                  PIC X(05).\n020300     02  DLP2-SOURCE-CODE-RECD   PIC X(80).\n020400     02  FILLER                  PIC X(05).\n020500     02  DLP2-GLOSSARY-WORD      PIC X(31).\n020600\n020700 01  SUMMARY-LINE-PHASE-2        REDEFINES DETAIL-LINE.\n020800     02  SLP2-COUNT              PIC ZZZ,ZZZ,ZZ9B.\n020900     02  SLP2-MESSAGE            PIC X(120).\n021000\n021100/\n021200 LINKAGE SECTION.\n021300\n021400* ************************************************************* *\n021500* AN OPTIONAL PROGRAM PARAMETER MAY BE SPECIFIED TO LIMIT THE   *\n021600* AREA OF THE SOURCE CODE RECORD THAT IS SCANNED.               *\n021700* ************************************************************* *\n021800\n021900 01  PROGRAM-PARAMETERS.\n022000     02  PP-LENGTH               PIC S9(4)  COMP.\n022100     02  PP-SCAN-BEGIN           PIC 9(4).\n022200     02  PP-SCAN-END             PIC 9(4).\n022300\n022400/\n022500 PROCEDURE DIVISION USING PROGRAM-PARAMETERS.\n022600\n022700 0000-MAIN SECTION.\n022800\n022900* ************************************************************* *\n023000* INITIALIZE HEADINGS AND CONSTANTS THAT DO NOT CHANGE AGAIN    *\n023100* THROUGHOUT THE PROGRAM'S EXECUTION.                           *\n023200* ************************************************************* *\n023300\n023400 0050-SETUP.\n023500\n023600     MOVE FUNCTION CURRENT-DATE\n023700       TO SYSTEM-DATE-AND-TIME.\n023800     MOVE SYSTEM-DATE-MMDD TO H1-DATE-MD.\n023900     MOVE SYSTEM-DATE-YYYY TO H1-DATE-Y.\n024000     IF SYSTEM-TIME-HHMM = 1200\n024100         MOVE 'M ' TO H2-TIME-M\n024200     ELSE\n024300         IF SYSTEM-TIME-HH < 12\n024400             MOVE 'AM' TO H2-TIME-M\n024500         ELSE\n024600             MOVE 'PM' TO H2-TIME-M\n024700             IF SYSTEM-TIME-HH > 13\n024800                 SUBTRACT 12 FROM SYSTEM-TIME-HH\n024900             END-IF\n025000         END-IF\n025100     END-IF.\n025200     MOVE SYSTEM-TIME-HHMM TO H2-TIME.\n025300     INSPECT H2-TIME REPLACING ALL '/' BY ':'.\n025400\n025500     MOVE FUNCTION LENGTH(SOURCE-CODE-RECD)\n025600       TO SCWA-SCAN-ZONE-END.\n025700\n025800     IF PP-LENGTH > +0\n025900         IF PP-SCAN-BEGIN IS NUMERIC\n026000        AND PP-SCAN-END IS NUMERIC\n026100             IF PP-SCAN-END > PP-SCAN-BEGIN\n026200            AND PP-SCAN-BEGIN > 0\n026300            AND (PP-SCAN-END NOT > SCWA-SCAN-ZONE-END)\n026400                 MOVE PP-SCAN-BEGIN TO SCWA-SCAN-ZONE-BEGIN\n026500                 MOVE PP-SCAN-END TO SCWA-SCAN-ZONE-END\n026600             END-IF\n026700         END-IF\n026800     END-IF.\n026900\n027000* ************************************************************* *\n027100* PROGRAM EXECUTION IS DIRECTED BY CALLING THE HIGHEST LEVEL    *\n027200* PARAGRAPH REQUIRED TO COMPLETE THE PROGRAMS DESIGN FUNCTION.  *\n027300* ************************************************************* *\n027400\n027500 0100-CONTROL.\n027600\n027700     OPEN OUTPUT PRINT-FILE.\n027800     PERFORM 1000-LOAD-GLOSSARY.\n027900     PERFORM 2000-PROCESS-SOURCE-FILE.\n028000     CLOSE PRINT-FILE.\n028100\n028200     STOP RUN.\n028300* - - - - - - - - - - - - - - - - PROGRAM EXIT POINT\n028400\n028500* ************************************************************* *\n028600* THIS IS THE COMMON ROUTINE FOR PRINTING DETAIL LINES ON THE   *\n028700* REPORT AND DETERMINING WHEN HEADINGS NEED TO BE PRINTED.      *\n028800* ************************************************************* *\n028900\n029000 0200-PRINT-DETAIL-LINE.\n029100     IF LINE-COUNT GREATER THAN PAGE-SIZE\n029200         IF LINE-COUNT LESS THAN 99\n029300             MOVE SPACES TO PRINT-RECD\n029400             WRITE PRINT-RECD BEFORE ADVANCING PAGE\n029500         END-IF\n029600         ADD 1 TO PAGE-COUNT\n029700         MOVE PAGE-COUNT TO H2-PAGE\n029800         WRITE PRINT-RECD FROM HEADING-1 BEFORE ADVANCING 1\n029900         WRITE PRINT-RECD FROM HEADING-2 BEFORE ADVANCING 2\n030000         WRITE PRINT-RECD FROM HEADING-3 BEFORE ADVANCING 1\n030100         MOVE 4 TO LINE-COUNT\n030200     END-IF.\n030300     WRITE PRINT-RECD FROM DETAIL-LINE BEFORE ADVANCING 1.\n030400     ADD 1 TO LINE-COUNT.\n030500     MOVE SPACES TO DETAIL-LINE.\n030600* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n030700\n030800* ************************************************************* *\n030900* THE GLOSSARY FILE IS LOADED INTO THE GLOSSARY TABLE.          *\n031000* ************************************************************* *\n031100 1000-LOAD-GLOSSARY.\n031200\n031300     OPEN INPUT GLOSSARY-FILE.\n031400     SET NOT-END-OF-DATA TO TRUE.\n031500     MOVE +0 TO INPUT-RECORD-COUNT.\n031600     INITIALIZE GT-DATA.\n031700     COMPUTE GT-MAX = FUNCTION LENGTH(GT-DATA) /\n031800                      FUNCTION LENGTH(GT-ENTRY).\n031900     MOVE FUNCTION LENGTH(GTWA-WORD) TO GTWA-WORD-MAX.\n032000     COMPUTE GT-EXCEPT-MAX = FUNCTION LENGTH(GT-EXCEPTIONS) /\n032100                             FUNCTION LENGTH(GT-EXCEPT).\n032200\n032300     PERFORM 1100-READ-GLOSSARY-FILE.\n032400     PERFORM 1200-PROCESS-GLOSSARY-RECORD\n032500       UNTIL END-OF-DATA\n032600          OR LOAD-STATUS-ABORT.\n032700\n032800     PERFORM 0200-PRINT-DETAIL-LINE.\n032900     MOVE INPUT-RECORD-COUNT TO SLP1-COUNT.\n033000     MOVE 'RECORDS READ FROM GLOSSARY FILE'\n033100       TO SLP1-MESSAGE.\n033200     PERFORM 0200-PRINT-DETAIL-LINE.\n033300     MOVE GT-LOAD-COUNT TO SLP1-COUNT.\n033400     MOVE 'GLOSSARY ENTRIES LOADED'\n033500       TO SLP1-MESSAGE.\n033600     PERFORM 0200-PRINT-DETAIL-LINE.\n033700\n033800     IF RETURN-CODE = +8\n033900         PERFORM 0200-PRINT-DETAIL-LINE\n034000         MOVE 'SERIOUS ERRORS ENCOUNTERED DURING LOAD'\n034100           TO DETAIL-LINE\n034200         PERFORM 0200-PRINT-DETAIL-LINE.\n034300\n034400     IF RETURN-CODE = +4\n034500         PERFORM 0200-PRINT-DETAIL-LINE\n034600         MOVE 'GLOSSARY FILE SIZE EXCEEDED PROGRAM CAPACITY'\n034700           TO DETAIL-LINE\n034800         PERFORM 0200-PRINT-DETAIL-LINE.\n034900\n035000     CLOSE GLOSSARY-FILE.\n035100* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n035200\n035300* ************************************************************* *\n035400* A RECORD IS READ FROM THE GLOSSARY FILE FOR PROCESSING.       *\n035500* ************************************************************* *\n035600\n035700 1100-READ-GLOSSARY-FILE.\n035800\n035900     READ GLOSSARY-FILE\n036000         AT END\n036100             MOVE 'Y' TO END-OF-DATA-SWITCH\n036200         NOT AT END\n036300             ADD +1 TO INPUT-RECORD-COUNT\n036400     END-READ.\n036500* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n036600\n036700* ************************************************************* *\n036800* AN INDIVIDUAL RECORD IS PROCESSED FROM THE GLOSSARY FILE.     *\n036900* CHARACTERS ARE ACCUMULATED TO FORM A WORD AND WHEN A SPACE    *\n037000* IS ENCOUNTERED, THE WORD IS PROCESSED.                        *\n037100* ************************************************************* *\n037200\n037300 1200-PROCESS-GLOSSARY-RECORD.\n037400\n037500     MOVE GLOSSARY-RECD TO DLP1-GLOSSARY-RECD.\n037600     PERFORM 0200-PRINT-DETAIL-LINE.\n037700\n037800     IF GR-COMMENT-FLAG NOT = '*'\n037900\n038000         SET LOAD-STATUS-INITIAL TO TRUE\n038100         MOVE SPACES TO GTWA-WORD\n038200         SET EXCLUDE-INDICATOR-NOTFOUND TO TRUE\n038300         MOVE +0 TO GTWA-WORD-LENGTH\n038400\n038500         PERFORM VARYING GTWA-INDEX-1\n038600                    FROM +1 BY +1\n038700                   UNTIL (GTWA-INDEX-1 > +80)\n038800                      OR NOT LOAD-STATUS-CONTINUE\n038900             MOVE GLOSSARY-RECD(GTWA-INDEX-1:1) TO GTWA-CHARACTER\n039000             EVALUATE TRUE\n039100                 WHEN GTWA-CHARACTER = SPACE\n039200                     PERFORM 1210-PROCESS-WORD\n039300                 WHEN GTWA-CHARACTER = '!'\n039400                     SET EXCLUDE-INDICATOR-FOUND TO TRUE\n039500                 WHEN OTHER\n039600                     ADD +1 TO GTWA-WORD-LENGTH\n039700                     IF GTWA-WORD-LENGTH NOT > GTWA-WORD-MAX\n039800                         MOVE GLOSSARY-RECD(GTWA-INDEX-1:1)\n039900                           TO GTWA-WORD(GTWA-WORD-LENGTH:1)\n040000                     END-IF\n040100             END-EVALUATE\n040200         END-PERFORM\n040300\n040400         PERFORM 1210-PROCESS-WORD\n040500\n040600     END-IF.\n040700\n040800     PERFORM 1100-READ-GLOSSARY-FILE.\n040900* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n041000\n041100* ************************************************************* *\n041200* A WORD FROM THE GLOSSARY RECORD IS PROCESSED. IF IT IS LONGER *\n041300* THAN THE MAXIMUM ALLOWABLE WORD, AN ERROR IS REPORTED AND THE *\n041400* WORD IS DISCARDED. OTHERWISE, THE APPROPRIATE ROUTINE IS      *\n041500* PERFORMED TO FURTHER VALIDATE AND STORE THE WORD AS EITHER A  *\n041600* NEW KEY WORD ENTRY IN THE GLOSSARY TABLE OR AS AN EXCEPTION   *\n041700* TO THE CURRENT WORD, DEPENDING UPON WHETHER THE EXCEPTION     *\n041800* INDICATOR (!) HAS BEEN ENCOUNTERED.                           *\n041900* ************************************************************* *\n042000\n042100 1210-PROCESS-WORD.\n042200     IF GTWA-WORD-LENGTH > ZERO\n042300         IF GTWA-WORD-LENGTH > GTWA-WORD-MAX\n042400             STRING 'MAX WORD SIZE ('\n042500                    GTWA-WORD-MAX\n042600                    ') EXCEEDED'\n042700                 DELIMITED BY SIZE INTO DLP1-MESSAGE\n042800             PERFORM 0200-PRINT-DETAIL-LINE\n042900             MOVE +8 TO RETURN-CODE\n043000         ELSE\n043100             MOVE FUNCTION UPPER-CASE(GTWA-WORD)\n043200               TO GTWA-WORD\n043300             IF EXCLUDE-INDICATOR-FOUND\n043400                 PERFORM 1230-PROCESS-EXCLUDE-WORD\n043500             ELSE\n043600                 PERFORM 1220-PROCESS-KEYWORD\n043700             END-IF\n043800         END-IF\n043900         MOVE SPACES TO GTWA-WORD\n044000         MOVE +0 TO GTWA-WORD-LENGTH\n044100     END-IF.\n044200* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n044300\n044400* ************************************************************* *\n044500* IF THIS IS THE FIRST WORD ON THE RECORD IT IS LOADED INTO THE *\n044600* GLOSSARY TABLE.  IF IT IS THE SECOND WORD ENCOUNTERED WITHOUT *\n044700* AN INTERVENING EXCEPTION INDICATOR (!), AN ERROR MESSAGE IS   *\n044800* PRINTED AND THE WORD IS DISCARDED.  WHEN THE GLOSSARY TABLE   *\n044900* BECOMES FULL, THE LOADING PROCESS IS STOPPED ... ALTHOUGH THE *\n045000* PROGRAM WILL CONTINUE TO THE SCANNING PHASE AN ERROR MESSAGE  *\n045100* IS PRINTED AND CORRECTIVE ACTION WILL NEED TO BE TAKEN TO     *\n045200* OBTAIN COMPLETELY SATISFACTORY RESULTS.                       *\n045300* ************************************************************* *\n045400\n045500 1220-PROCESS-KEYWORD.\n045600     IF NOT LOAD-STATUS-INITIAL\n045700         MOVE '! MISSING AFTER FIRST KEY WORD'\n045800           TO DLP1-MESSAGE\n045900         PERFORM 0200-PRINT-DETAIL-LINE\n046000         MOVE +8 TO RETURN-CODE\n046100         SET LOAD-STATUS-SKIP-RECORD TO TRUE\n046200     ELSE\n046300         ADD +1 TO GT-LOAD-COUNT\n046400         SET GT-INDEX TO GT-LOAD-COUNT\n046500         MOVE GTWA-WORD TO GT-WORD (GT-INDEX)\n046600         MOVE GTWA-WORD-LENGTH TO GT-WORD-SIZE (GT-INDEX)\n046700         SET LOAD-STATUS-INPROCESS TO TRUE\n046800     END-IF.\n046900\n047000     IF GT-LOAD-COUNT = GT-MAX\n047100         PERFORM 0200-PRINT-DETAIL-LINE\n047200         STRING 'GLOSSARY TABLE SIZE ('\n047300                GT-MAX\n047400                ') EXCEEDED'\n047500             DELIMITED BY SIZE INTO DETAIL-LINE\n047600         PERFORM 0200-PRINT-DETAIL-LINE\n047700         MOVE +4 TO RETURN-CODE\n047800         SET LOAD-STATUS-ABORT TO TRUE\n047900     END-IF.\n048000\n048100* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n048200\n048300* ************************************************************* *\n048400* IF THIS IS THE FIRST WORD ON THE RECORD, THE RECORD IS DIS-   *\n048500* CARDED AS THE EXCLUSION INDICATOR (!) PRECEEDED ANY WORDS.    *\n048600*                                                               *\n048700* OTHERWISE, WE LOCATE THE OFFSET OF THE KEY WORD IN THIS WORD. *\n048800* IF THIS WORD DOES NOT CONTAIN THE KEY WORD, THIS WORD IS      *\n048900* DISCARDED AND SCANNING OF THIS GLOSSARY RECORD PROCEEDS.      *\n049000*                                                               *\n049100* OTHERWISE, IF THERE ARE STILL OPEN EXCLUSION SLOTS, THIS WORD *\n049200* IS ADDED TO THE CURRENT GLOSSARY RECORD.  IF THE SLOTS ARE    *\n049300* ALL FILLED, PROCESSING OF THE REMAINDER OF THIS GLOSSARY      *\n049400* RECORD IS ABANDONED.                                          *\n049500* ************************************************************* *\n049600\n049700 1230-PROCESS-EXCLUDE-WORD.\n049800     IF LOAD-STATUS-INITIAL\n049900         MOVE '! PRECEEDS ANY KEY WORD ON RECORD'\n050000           TO DLP1-MESSAGE\n050100         PERFORM 0200-PRINT-DETAIL-LINE\n050200         MOVE +8 TO RETURN-CODE\n050300         SET LOAD-STATUS-SKIP-RECORD TO TRUE\n050400     ELSE\n050500         PERFORM 1235-FIND-CONTAINER-OFFSET\n050600         IF GTWA-OFFSET = GTWA-WORD-MAX\n050700             STRING 'KEYWORD NOT FOUND IN EXCLUSION WORD ('\n050800                    GTWA-WORD ')'\n050900                 DELIMITED BY SIZE INTO DLP1-MESSAGE\n051000             PERFORM 0200-PRINT-DETAIL-LINE\n051100             MOVE +8 TO RETURN-CODE\n051200         ELSE\n051300             ADD +1 TO GT-EXCEPT-COUNT (GT-INDEX)\n051400             IF GT-EXCEPT-COUNT (GT-INDEX) > GT-EXCEPT-MAX\n051500                 STRING 'WORD EXCLUSION CAPACITY ('\n051600                        GT-EXCEPT-MAX\n051700                        ') EXCEEDED'\n051800                     DELIMITED BY SIZE INTO DLP1-MESSAGE\n051900                 PERFORM 0200-PRINT-DETAIL-LINE\n052000                 MOVE +8 TO RETURN-CODE\n052100                 SET LOAD-STATUS-SKIP-RECORD TO TRUE\n052200             ELSE\n052300                 SET GT-EXCEPT-INDEX TO GT-EXCEPT-COUNT (GT-INDEX)\n052400                 MOVE GTWA-WORD\n052500                   TO GT-EXCEPT-WORD (GT-INDEX, GT-EXCEPT-INDEX)\n052600                 MOVE GTWA-WORD-LENGTH\n052700                   TO GT-EXCEPT-SIZE (GT-INDEX, GT-EXCEPT-INDEX)\n052800                 SUBTRACT 1 FROM GTWA-OFFSET\n052900                     GIVING GT-EXCEPT-OFFSET (GT-INDEX,\n053000                                              GT-EXCEPT-INDEX)\n053100             END-IF\n053200         END-IF\n053300     END-IF.\n053400* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n053500\n053600* ************************************************************* *\n053700* THE EXCLUSION WORD IS SEARCHED TO FIND THE OFFSET AT WHICH    *\n053800* THE KEY WORD BEGINS. IF IT IS NOT FOUND, THE OFFSET WILL BE   *\n053900* EQUAL TO THE MAXIMUM WORD SIZE.                               *\n054000* ************************************************************* *\n054100\n054200 1235-FIND-CONTAINER-OFFSET.\n054300\n054400     PERFORM VARYING GTWA-OFFSET FROM +1 BY +1\n054500               UNTIL GTWA-OFFSET > GTWA-WORD-MAX\n054600         MOVE SPACES TO GTWA-SUB-WORD\n054700         MOVE GTWA-WORD(GTWA-OFFSET:GT-WORD-SIZE(GT-INDEX))\n054800           TO GTWA-SUB-WORD\n054900         IF GTWA-SUB-WORD = GT-WORD (GT-INDEX)\n055000             EXIT PERFORM\n055100         END-IF\n055200     END-PERFORM.\n055300* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n055400\n055500* ************************************************************* *\n055600* THE SOURCE FILE IS PROCESSED LOOKING FOR ANY OCCURANCE OF     *\n055700* WORDS IN THE GLOSSARY TABLE IN ANY RECORD OF THE SOURCE FILE. *\n055800* ************************************************************* *\n055900\n056000 2000-PROCESS-SOURCE-FILE.\n056100\n056200     OPEN INPUT SOURCE-CODE-FILE.\n056300     SET NOT-END-OF-DATA TO TRUE.\n056400     MOVE +0 TO INPUT-RECORD-COUNT.\n056500     MOVE 99 TO LINE-COUNT.\n056600     MOVE '    PHASE 2: SOURCE CODE SCAN    ' TO H2-TITLE.\n056700     MOVE HEADING-3-PHASE-2 TO HEADING-3.\n056800\n056900     PERFORM 2100-READ-SOURCE-CODE-FILE.\n057000     PERFORM 2200-PROCESS-SOURCE-RECORD\n057100       UNTIL END-OF-DATA.\n057200\n057300     PERFORM 0200-PRINT-DETAIL-LINE.\n057400     MOVE INPUT-RECORD-COUNT TO SLP2-COUNT.\n057500     MOVE 'RECORDS READ FROM SOURCE CODE FILE'\n057600       TO SLP2-MESSAGE.\n057700     PERFORM 0200-PRINT-DETAIL-LINE.\n057800     MOVE MATCHED-RECORD-COUNT TO SLP2-COUNT.\n057900     MOVE 'SOURCE CODE RECORDS CONTAINING GLOSSARY WORDS'\n058000       TO SLP2-MESSAGE.\n058100     PERFORM 0200-PRINT-DETAIL-LINE.\n058200\n058300     CLOSE SOURCE-CODE-FILE.\n058400* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n058500\n058600* ************************************************************* *\n058700* A RECORD IS READ FROM THE SOURCE CODE FILE FOR PROCESSING.    *\n058800* ************************************************************* *\n058900\n059000 2100-READ-SOURCE-CODE-FILE.\n059100\n059200     READ SOURCE-CODE-FILE\n059300         AT END\n059400             MOVE 'Y' TO END-OF-DATA-SWITCH\n059500         NOT AT END\n059600             ADD +1 TO INPUT-RECORD-COUNT\n059700     END-READ.\n059800* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n059900\n060000* ************************************************************* *\n060100* AN INDIVIDUAL RECORD IS PROCESSED FROM THE SOURCE CODE FILE.  *\n060200* THE RECORD IS SCANNED FROM LEFT TO RIGHT CHECKING EACH        *\n060300* CHARACTER POSITION AGAINST EACH WORD IN THE GLOSSARY TABLE.   *\n060400* IF A WORD IS FOUND, THAT IS NOT ALSO LISTED IN AN EXCEPTION   *\n060500* ENTRY, THE SOURCE LINE IS LISTED ON THE SUSPECT REPORT.       *\n060600* ************************************************************* *\n060700\n060800 2200-PROCESS-SOURCE-RECORD.\n060900\n061000     SET SEARCH-INITIAL TO TRUE.\n061100\n061200     PERFORM VARYING SCWA-INDEX-1\n061300                FROM SCWA-SCAN-ZONE-BEGIN BY +1\n061400               UNTIL SCWA-INDEX-1 > SCWA-SCAN-ZONE-END\n061500\n061600         PERFORM 2210-SEARCH-FOR-KEYWORD\n061700         IF SEARCH-KEYWORD-FOUND\n061800             EXIT PERFORM\n061900         END-IF\n062000\n062100     END-PERFORM.\n062200\n062300     IF SEARCH-KEYWORD-FOUND\n062400         ADD +1 TO MATCHED-RECORD-COUNT\n062500         MOVE INPUT-RECORD-COUNT TO DLP2-RECORD-NUMBER\n062600         MOVE SOURCE-CODE-RECD TO DLP2-SOURCE-CODE-RECD\n062700         MOVE GT-WORD (GT-INDEX) TO DLP2-GLOSSARY-WORD\n062800         PERFORM 0200-PRINT-DETAIL-LINE\n062900     END-IF.\n063000\n063100     PERFORM 2100-READ-SOURCE-CODE-FILE.\n063200* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n063300\n063400* ************************************************************* *\n063500* TEST THE CURRENT SOURCE RECORD POSITION AGAINST EACH KEY WORD *\n063600* IN THE GLOSSARY TABLE. IF A MATCH IS FOUND, TEST TO MAKE SURE *\n063700* THE MATCH ISN'T REALLY AN EXCLUDED WORD.                      *\n063800* ************************************************************* *\n063900\n064000 2210-SEARCH-FOR-KEYWORD.\n064100\n064200     PERFORM VARYING GT-INDEX FROM +1 BY +1\n064300               UNTIL GT-INDEX > GT-LOAD-COUNT\n064400\n064500         MOVE SPACES TO SCWA-WORD\n064600         MOVE SOURCE-CODE-RECD(SCWA-INDEX-1:GT-WORD-SIZE\n064700                                              (GT-INDEX))\n064800           TO SCWA-WORD\n064900         MOVE FUNCTION UPPER-CASE(SCWA-WORD) TO SCWA-WORD\n065000         IF SCWA-WORD = GT-WORD (GT-INDEX)\n065100             SET SEARCH-KEYWORD-FOUND TO TRUE\n065200             PERFORM 2220-CHECK-FOR-EXCLUSION\n065300             IF SEARCH-KEYWORD-FOUND\n065400                 EXIT PERFORM\n065500             END-IF\n065600         END-IF\n065700\n065800     END-PERFORM.\n065900* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n066000\n066100* ************************************************************* *\n066200* THE KEY WORD HAS MATCHED, SO CHECK TO SEE IF THIS LOCATION    *\n066300* IS REALLY A MATCH TO AN EXCLUSION WORD.                       *\n066400* ************************************************************* *\n066500\n066600 2220-CHECK-FOR-EXCLUSION.\n066700\n066800     PERFORM VARYING GT-EXCEPT-INDEX FROM +1 BY +1\n066900               UNTIL GT-EXCEPT-INDEX > GT-EXCEPT-COUNT (GT-INDEX)\n067000\n067100         MOVE SCWA-INDEX-1 TO SCWA-INDEX-2\n067200         SUBTRACT GT-EXCEPT-OFFSET (GT-INDEX, GT-EXCEPT-INDEX)\n067300             FROM SCWA-INDEX-2\n067400         IF SCWA-INDEX-2 > ZERO\n067500             MOVE SPACES TO SCWA-WORD\n067600             MOVE SOURCE-CODE-RECD(SCWA-INDEX-2:\n067700                                   GT-EXCEPT-SIZE (GT-INDEX,\n067800                                                GT-EXCEPT-INDEX))\n067900               TO SCWA-WORD\n068000             MOVE FUNCTION UPPER-CASE(SCWA-WORD) TO SCWA-WORD\n068100             IF SCWA-WORD = GT-EXCEPT-WORD (GT-INDEX,\n068200                                            GT-EXCEPT-INDEX)\n068300                 SET SEARCH-EXCLUDE-FOUND TO TRUE\n068400                 EXIT PERFORM\n068500             END-IF\n068600         END-IF\n068700\n068800     END-PERFORM.\n068900* - - - - - - - - - - - - - - - - PERFORM EXIT POINT\n069000\n069100* ************************************************************* *\n069200*               EXPANDING THE PROGRAM'S CAPACITY                *\n069300* ************************************************************* *\n069400* THE PROGRAM HAS SOME SPECIFIC LIMITS THAT MAY BE EXPANDED     *\n069500* EASILY ENOUGH BY CHANGING A FEW DATA DEFINITION ELEMENTS AND  *\n069600* RE-COMPILING (PROVIDED YOUR EXECUTION REGION IS LARGE ENOUGH  *\n069700* TO CONTAIN THE RESULTANT PROGRAM).                            *\n069800*                                                               *\n069900* TO EXPAND THE MAXIMUM WORD LENGTH FOR BOTH THE KEYWORD AND    *\n070000* EXCLUDED WORDS, SEARCH FOR AND CHANGE THE PICTURE CLAUSE OF:  *\n070100*                                                               *\n070200*     GTWA-WORD, GTWA-EXCEPT-WORD, GTWA-SUB-WORD,               *\n070300*     SCWA-WORD, GT-WORD AND GT-EXCEPT-WORD                     *\n070400*                                                               *\n070500* TO INCREASE THE NUMBER OF GLOSSARY ENTRIES, SEARCH FOR AND    *\n070600* CHANGE THE OCCURS CLAUSE FOR:                                 *\n070700*                                                               *\n070800*     GT-ENTRY                                                  *\n070900*                                                               *\n071000* TO INCREASE THE NUMBER OF EXCLUDED WORDS FOR EACH GLOSSARY    *\n071100* ENTRY, SEARCH FOR AND CHANGE THE OCCURS CLAUSE FOR:           *\n071200*                                                               *\n071300*     GT-EXCEPT                                                 *\n071400*                                                               *\n071500* TO INCREASE THE SIZE OF THE SOURCE CODE RECORD, SEARCH FOR    *\n071600* AND CHANGE THE RECORD CONTAINS AND PICTURE CLAUSES FOR:       *\n071700*                                                               *\n071800*     SOURCE-CODE-FILE AND SOURCE-CODE-RECD.                    *\n071900*                                                               *\n072000* THE PROGRAM CALCULATES SIZE AND TABLE LIMITS FOR THE DEFINED  *\n072100* DATA STORAGE, SO IT IS NOT NECESSARY TO CHANGE ANY PROCEDURE  *\n072200* DIVISION ENTRIES TO EFFECT THESE EXPANSIONS.                  *\n072300* ************************************************************* *\n072400\n072500* - - - - - - - - - - - - - - - - END OF Y2KSCAN SOURCE CODE\n072600 END PROGRAM Y2KSCAN.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "Y2KTDOW": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x17\\x01\\x04\\x04\\x7f\\x01\\x04\\x04\\x7f E\\x01\\x10\\x01\\x10\\x00\\x01\\xd4\\xd6\\xe2\\xc5\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-02-16T00:00:00", "modifydate": "2004-02-16T20:45:17", "lines": 272, "newlines": 272, "modlines": 1, "user": "MOSELEY"}, "text": "         TITLE 'Y2KTDOW - DETERMINES DATE FOR GIVEN DAY REFERENCE'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*   YY   YY   222   KK   KK TTTTTTTT DDDDDD   OOOOO  WW   WW          *\n*   YY   YY  2   2  KK  KK     TT    DD   DD OO   OO WW   WW          *\n*   YY   YY      2  KK KK      TT    DD   DD OO   OO WW   WW          *\n*    YY YY       2  KKKK       TT    DD   DD OO   OO WW   WW          *\n*     YYY     222   KKKK       TT    DD   DD OO   OO WW W WW          *\n*     YY     2      KK KK      TT    DD   DD OO   OO WWWWWWW          *\n*     YY     2      KK  KK     TT    DD   DD OO   OO WWW WWW          *\n*     YY     22222  KK   KK    TT    DDDDDD   OOOOO   W   W           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES THE DATE FOR A GIVEN DAY OF WEEK      *\n*    USING A GIVEN GREGORIAN DATE (MMDDYYYY) AS A REFERENCE DATE      *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  FIVE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:         *\n*        1)  AN 8 BYTE FIELD CONTAINING THE REFERENCE DATE (IN        *\n*            ZONED-DECIMAL FORMAT),                                   *\n*        2)  A 1 BYTE FIELD CONTAINING 'P' TO SPECIFY THE PREVIOUS    *\n*            DATE OR 'N' TO SPECIFY THE NEXT DATE TO BE RETURNED,     *\n*        3)  A 1 BYTE FIELD CONTAINING THE NUMERIC DESIGNATION OF     *\n*            THE DAY OF WEEK TO BE RETURNED (0=MONDAY, 1=TUESDAY, ... *\n*            6=SUNDAY),                                               *\n*        4)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        5)  AN 8 BYTE FIELD IN WHICH THE DERIVED DATE (IN            *\n*            ZONED-DECIMAL FORMAT) WILL BE PLACED.                    *\n*        THE ROUTINE WILL NOT ALTER THE FIELDS PASSED TO IT.          *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KTDOW,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'04151997'                            *\n*             NORP     DS    CL1'N'                                   *\n*             DAYN     DS    ZL1'3'                                   *\n*             RC       DS    ZL1'0'                                   *\n*             NEWDATE  DS    ZL8'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  TDOW-PARAMETERS.                                    *\n*                 02  DATE    PIC 9(8) VALUE 04151997.                *\n*                 02  NORP    PIC X(1) VALUE 'N'.                     *\n*                 02  DAYN    PIC 9(1) VALUE 3.                       *\n*                 02  RC      PIC 9(1) VALUE 0.                       *\n*                 02  NEWDATE PIC 9(8) VALUE 0.                       *\n*             CALL 'Y2KTDOW' USING TDOW-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*        3 INDICATES THE VALUE OF THE PREVIOUS/NEXT INDICATOR WAS     *\n*        NOT VALID ('N' OR 'P').                                      *\n*                                                                     *\n*        5 INDICATES THAN AN INVALID DATE WILL BE DEVELOPED WHEN      *\n*        THE TARGET DATE IS CREATED (OUTSIDE OF YEAR RANGE LISTED     *\n*        IN 1 ABOVE).                                                 *\n*                                                                     *\n*        7 INDICATES THE VALUE OF THE DAY OF THE WEEK WAS NOT IN      *\n*        THE ALLOWABLE RANGE (0-6).                                   *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE DERIVED DATE WILL BE          *\n*        PLACED IN THE 5TH PARAMETER FIELD.  IF THE RETURN CODE IS    *\n*        A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE 5TH           *\n*        PARAMETER FIELD WILL CONTAIN ZEROS.                          *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KTDOW  CSECT\n*         PRINT NOGEN\n         EYEC  'COMPUTE NEW DATE USING DOW+OFFSET'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KTDOW,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KTDOW GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KTDOW GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DAY OF WEEK NUMBER.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            INITIALIZE RETURN DATE TO ZEROS\n*\n*    RETRIEVE DAY OF WEEK FOR DATE PASSED.\n*\n         MVC   DATED,PDATE             LOAD DATE TO PASS\n         LA    R1,DOWNPARM             ADDRESS OF Y2KDOWN PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KDOWN)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KDOWN.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCD                 ADOPT RECEIVED RETURN CODE\n         CLI   RCD,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    TEST DIRECTION CODE FOR INVALID VALUE\n*\n         CLI   PDIR,C'P'               WAS 'PREVIOUS' SPECIFIED?\n         BE    P2OK                    YES, OK\n         CLI   PDIR,C'N'               WAS 'NEXT' SPECIFIED?\n         BE    P2OK                    YES, OK\n         MVI   PRC,C'3'                INDICATE ERROR\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST TARGET DAY OF WEEK NUMBER FOR INVALID VALUE\n*\nP2OK     XR    R1,R1                   CLEAR WORK REGISTER\n         IC    R1,PDOW                 GET FORMAT CODE\n         LA    R2,X'F0'                LOWEST VALID CODE\n         LA    R3,7                    TEST THROUGH X'F6'\nDOWLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    P3OK                    YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT VALID CODE\n         BCT   R3,DOWLOOP              CONTINUE TESTING NEXT CODE\n         MVI   PRC,C'7'                INDICATE INVALID CODE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    INITIALIZE Y2KPROJ PARAMETER FIELDS.\n*\nP3OK     MVC   DATEP,PDATE             LOAD REFERENCE DATE\n         MVC   OFFSETP,=C'000000'      INITIALIZE OFFSET\n         LA    R1,PROJPARM             ADDRESS OF Y2KPROJ PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n*\n*    SELECT CALCULATION BASED ON DIRECTION OF INCREMENT\n*\n         ZAP   WORK,=P'7'              INITIALIZE WORK FIELD\n         CLI   PDIR,C'N'               GOING TO NEXT?\n         BE    NEXTDAY                 YES\nPREVDAY  PACK  P1(1),DOW(1)            PACK CURRENT DAY NUMBER\n         AP    WORK,P1                 ADD TO WORK FIELD\n         PACK  P1(1),PDOW(1)           PACK TARGET DAY NUMBER\n         SP    WORK,P1                 SUBTRACT FROM WORK FIELD\n         CP    WORK,=P'7'              IS RESULT GREATER THAN 7?\n         BNH   PREVFINI                NO, GO FINISH\n         SP    WORK,=P'7'              ADJUST FOR OVERSHOOT\nPREVFINI UNPK  OFFSETP+5(1),WORK+1(1)  UNPACK COMPUTED OFFSET\n         MVZ   OFFSETP+5(1),=X'D0'     NEGATIVE SIGN\n         B     FINI                    BRANCH TO COMMON FINISH\n*\nNEXTDAY  PACK  P1(1),DOW(1)            PACK CURRENT DAY NUMBER\n         SP    WORK,P1                 SUBTRACT FROM WORK FIELD\n         PACK  P1(1),PDOW(1)           PACK TARGET DAY NUMBER\n         AP    WORK,P1                 ADD TO WORK FIELD\n         CP    WORK,=P'7'              IS RESULT GREATER THAN 7?\n         BNH   NEXTFINI                NO, GO FINISH\n         SP    WORK,=P'7'              ADJUST FOR OVERSHOOT\nNEXTFINI UNPK  OFFSETP+5(1),WORK+1(1)  UNPACK COMPUTED OFFSET\n         MVZ   OFFSETP+5(1),=X'C0'     POSITIVE SIGN\n*\n*    CALL TO Y2KPROJ TO GET TARGET DATE\n*\nFINI     LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KPROJ)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    IF RETURN CODE FROM Y2KPROJ IS '5', THE DATE THAT WOULD BE\n*    DEVELOPED WOULD BE OUTSIDE OF RANGE OF VALID YEARS.\n*\n         MVC   PRC,RCP                 ADOPT RECEIVED RETURN CODE\n         CLI   RCP,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    MOVE RETURNED DATE TO CALLER'S AREA\n*\n         MVC   PNEWDATE(8),NUDATEP\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nDOWNPARM DS    0H                      PARAMETERS FOR Y2KDOWN\nDATED    DS    CL8                       DATE INPUT\nRCD      DS    CL1                       RETURN CODE\nDOW      DS    ZL1                       DAY OF WEEK\nPROJPARM DS    0H                      PARAMETERS FOR Y2KPROJ\nDATEP    DS    CL8                       DATE INPUT\nOFFSETP  DS    ZL6                       OFFSET IN DAYS\nRCP      DS    CL1                       RETURN CODE\nNUDATEP  DS    CL8                       NEW DATE\nWORK     DS    PL2                     WORK FIELD FOR CALCULATION\nP1       DS    PL1                     WORK FIELD FOR CALCULATION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     REFERENCE DATE\nPDIR     DS    CL1                     DIRECTION AWAY FROM\nPDOW     DS    CL1                     TARGET DAY OF WEEK\nPRC      DS    CL1                     RETURN CODE (0/2-6/8)\nPNEWDATE DS    CL8                     NEW DATE\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT664/FILE664.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT664", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}