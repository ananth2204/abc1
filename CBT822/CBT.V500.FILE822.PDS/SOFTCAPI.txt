**********************************************************************
*
*       SSSS OOOOO FFFFF TTTTT  CCCC   A   PPPP   III
*      S     O   O F       T   C      A A  P   P   I
*       SSS  O   O FFFF    T   C     A   A PPPP    I
*          S O   O F       T   C     AAAAA P       I
*      SSSS  OOOOO F       T    CCCC A   A P      III
*
*   WRITTEN     - 11/23/2009 - TKMILLE
*   LAST UPDATE - 02/26/2010 - TKMILLE
*
*   ISSUES TWO WTO MESSAGES WHICH REVEAL SOFTCAPPING INFORMATION.
*
* 1) SOFTCAPI LPAR LPARX CURRENT ROLLING 4-HR AVG UTILIZATION IS 5 MSUS
* 2) SOFTCAPI SY6 CAPACITY IS 27 MSUS, LPAR CAPACITY IS 15 MSUS
*
*   THESE TWO WTO MESSAGES ARE ALSO WRITTEN TO THE OUTPUT FILE
*   ALLOCATED TO DDNAME 'OUTPUT'.
*
*   SOFTCAPPING CAN BE ENABLED AT THE LPAR LEVEL OR AT THE
*   LPARGROUP LEVEL. THIS PROGRAM CANNOT TELL AT WHICH LEVEL THE
*   SOFTCAPPING IS ENABLED.  IT CAN ONLY TELL THAT IS IS ENABLED.
*
*   IF SOFTCAPPING IS IMPOSED UPON THE LPAR (SOFTCAPPING IS ACTIVELY
*   REDUCING LIMITING UTILIZATION ON THE LPAR), THEN THIS CLAUSE IS
*   APPENDED TO THE END OF MSG 1 ABOVE:
*
*      "SOFTCAPPING IS CURRENTLY IMPOSED ON LPAR."
*
*   IF SOFTCAPPING IS ENABLED BUT NOT ACTIVELY SOFTCAPPING THE LPAR
*   THE FOLLOWING CLAUSE IS APPENDED TO THE END OF MSG 1 ABOVE:
*
*      "SOFTCAPPING IS ENABLED AT SOME LEVEL."
*
*   RETURNS WLM 4-HOUR ROLLING AVERAGE CPU UTILIZATION IN MSUS IF
*   CALLED AS A SUBROUTINE AS WELL AS THE FOLLOWING PARMS TO CALLER:
*      LPARNAME  - LPARNAME OF THE RUNNING IMAGE (MUST BE LOADED WITH
*                  SPACES (BLANKS) PRIOR TO CALL TO SOFTCAPI)
*      HARDWNME  - HARDWARE (CEC) NAME
*      CECCAPAC  - CEC CAPACITY IN MSUS
*      LPRCAPAC  - LPAR CAPACITY IN MSUS
*      ROLLAVG   - 4-HOUR ROLLING AVG FOR THE LPAR IN MSUS
*      LIMITED   - SOFTCAPPING ENABLED INDICATOR FLAG (Y OR N)
*      SOFTCAP   - SOFTCAPPING IMPOSED INDICATOR FLAG (Y OR N)
*
*   PARAMETER DEFINITIONS:
*      LPARNAME     CL8      (LPARXXX) MUST BE PRIMED WITH BLANKS!
*      HARDWNME     CL8
*      CECCAPAC     F
*      LPRCAPAC     F
*      ROLLAVG      F
*      LIMITED      CL1  (Y/N - SOFTCAPPING IS ENABLED)
*      SOFTCAP      CL1  (Y/N - SOFTCAPPING IS IMPOSED (AFFECTING) THE
*                               LPAR)
*
*   MVC   LPARNAME,=CL8'        '
*   CALL SOFTCAPI,(LPARNAME,HARDWNME,CECCAPAC,LPRCAPAC,ROLLAVG,       +
*               LIMITED,SOFTCAP),VL=1
*
* OUTPUT FILE: RECFM=FB LRECL=150
*   MIRROR OF THE WTO MESSAGES ARE WRITTEN TO THIS OUTPUT FILE.
*   WITH THE DATE, TIME, AND SYSID ADDED AS A 21 BYTE PREFIX TO
*   THE MESSAGE (MM/DD/YY HH:MM:SS SYSID).
*
* REGISTER USAGE:
*
*   R1  - POINTS TO THE PARMLIST PASSED ON ENTRY TO SOFTCAPI
*   R2  - MAPS THE CVT  AREA
*   R3  - MAPS THE ECVT AREA
*   R4  - MAPS THE RMCT AREA
*   R5  - MAPS THE RCT  AREA
*   R6  - MAPS THE WPL  AREA
*   R7  - WORK REGISTER
*   R8  - WORK REGISTER
*   R9  - WORK REGISTER
*   R10 - BRANCHING REGISTER
*   R11 - STORES TO THE PARMLIST ADDRESS PASSED TO SOFTCAPI
*   R12 - PROGRAM BASE REGISTER
*   R13 - MAPS THE SAVEAREA
*
**********************************************************************
SOFTCAPI CSECT
SOFTCAPI AMODE 31
SOFTCAPI RMODE 24
         SAVE  (14,12),,SOFTCAPI_ASSEMBLED_ON_&SYSDATE._&SYSTIME
         LR    R12,R15             LOAD ENTRY ADDRESS
         USING SOFTCAPI,R12        DECLARE ENTRY BASE
         LR    R11,R1              PRESERVE PASSED PARMLIST ADDRESS
         LR    R6,R13              STORE SAVEAREA BACKWARD LINK
         LA    R3,WKAREALN         SIZE OF STORAGE TO GET AND CLEAR
         STORAGE OBTAIN,LENGTH=(R3),LOC=(RES)
         ST    R1,8(,R13)          SET SAVEAREA FORWARD LINK
         LR    R13,R1              ADDRESS OF OBTAINED AREA
         USING WKAREA,R13          ADDRESSABILITY TO OBTAINED AREA
         LR    R2,R13              ADDRESS OF TARGET OF MOVE (OBTND)
         LA    R3,WKAREALN         LENGTH OF THE TARGET OF MOVE
         XR    R14,R14             FROM ADDRESS (IRRELEVANT WITH LEN=0)
         XR    R15,R15             PAD/LENGTH TO PROPAGATE IN ODD REG
         MVCL  R2,R14          PROPAGATE BINARY ZEROES IN OBTAINED AREA
         ST    R6,4(,R13)           SET SAVEAREA BACKWARD LINK
*
         MVI   PREFIX,C' '          INITIALIZE MESSAGE PREFIX
         MVC   PREFIX+1(PREFIXL-1),PREFIX
         TIME  DEC ,                GET CURRENT DATE AND TIME
         STM   R0,R1,CURRTIME       STORE CURRENT TIME AND JULDATE
         MVI   CURRDATE,X'20'       FORCE CENTURY OVER X'01'
         MVC   STORTIME,CURRTIME
         UNPK  TIME9(9),STORTIME(5) UNPACK THE TIME
         MVC   PREFTMHH(2),TIME9    FORMAT TIME
         MVI   PREFTMC1,C':'
         MVC   PREFTMMM(2),TIME9+2
         MVI   PREFTMC2,C':'
         MVC   PREFTMSS(2),TIME9+4
         UNPK  JULDATE7(7),CURRDATE(4)   STORE THE JULIAN DATE
         OI    JULDATE7+6,X'F0'          FIX THE SIGN
         MVC   PREFDATE(JULDATEL),JULDATE7 LOAD JULIAN DATE FOR NOW
         MVI   PREFDATE+4,C'.'             IN CASE WE CANNOT OBTAIN A
         MVC   PREFDATE+5(3),JULDATE7+4    GREGORIAN DATE.
**********************************************************************
*  CALL PROGRAM JUL2GREG TO CONVERT A JULIAN DATE TO GREGORIAN FORMAT.
*  INPUT  PARM => JULIAN DATE    (YYYYDDD)  7 CHARACTERS
*  OUTPUT PARM => GREGORIAN DATE (YYYYMMDD) 8 CHARACTERS
**********************************************************************
         LOAD  EP=JUL2GREG       LOAD PROGRAM "JUL2GREG"
         ST    R0,JUL2GENT       STORE THE ENTRY ADDRESS
         LA    R1,JUL2GRPL       PARMLIST FOR JUL2GREG
         LA    R0,JULDATE7       INPUT PARM JULIAN DATE
         ST    R0,0(,R1)         STORE ADDRESS OF JULIAN DATE PARM
         LA    R0,GREGDATE       OUTPUT PARM GREGORIAN DATE
         ST    R0,4(,R1)         STORE ADDRESS OF GREGORIAN DATE PARM
         OI    4(R1),X'80'       INDICATE END OF PARM ADDRESSES
         L     R15,JUL2GENT      LOAD JUL2GREG ENTRY POINT ADDRESS
         BASSM R14,R15           CALL "JUL2GREG" TO CONVERT JULIAN DATE
         LR    R7,R15            SAVE JUL2GREG RETURN CODE
         DELETE EP=JUL2GENT
         LTR   R7,R7             SUCCESSFUL CALL TO JUL2GREG ?
         BNZ   INITFLGS          NO - DON'T HAVE A GOOD GREGORIAN DATE
         MVC   PREFDTMO(2),GREGDTMO LOAD GREGORIAN DATE
         MVI   PREFDTH1,C'/'
         MVC   PREFDTDY(2),GREGDTDY
         MVI   PREFDTH2,C'/'
         MVC   PREFDTYR(2),GREGDTYR+2
INITFLGS DS    0H
         MVI   SUBRTN,C'N'          INITLIZE CALLED-BY-SUBROUTINE FLAG
         MVI   SOFTCAP,C'N'         INITLIZE SOFTCAP INDICATOR FLAG
         MVI   LIMITED,C'N'         INITLIZE LIMITED INDICATOR FLAG
         MVI   OPENOUT,C'N'         INITLIZE OPEN    INDICATOR FLAG
         LR    R1,R11               RESTORE R1
         ST    R11,PARMADR1         STORE THE PARMLIST ADDRESS
         HOWCALLD PARMCALL=GETMSUS  , HOW WAS I CALLED? SUBR OR EXEC?
         MVI   SUBRTN,C'Y'          I WAS CALLED AS A SUBROUTINE
GETMSUS  DS    0H
         USING PSA,0                DEFINE PREFIXED SAVE AREA BASE
         L     R2,FLCCVT            LOAD CVT ADDRESS FROM PSA
         USING CVT,R2               MAP  CVT DSECT
         MVC   SYSID,CVTSNAME       GET THE SYSTEM ID
         L     R3,CVTECVT           POINT TO ECVT
         USING ECVT,R3              MAP  ECVT DSECT
         MVC   HARDWNME,ECVTHDNM    SAVE HARDWARE NAME
         MVC   LPARNAME,ECVTLPNM    SAVE LPAR NAME
         L     R4,CVTOPCTP          LOAD RMCT ADDRESS
         USING RMCT,R4              MAP  RMCT DSECT
         L     R5,RMCTRCT           LOAD RCT ADDRESS
         USING RCT,R5               MAP  RCT DSECT
***********************************************************************
*  CHECK THE SOFTCAPPING METRICS.  AN LPAR CAN BE LIMITED BY TWO
*  LEVELS OF SOFTCAPPING - 1) LPAR LEVEL 2)  LPARGROUP LEVEL.
*  THE RCT AREA CAN ONLY INDICATE IF AN LPAR IS BEING SOFTCAPPED BY
*  ONE OF THE TWO LEVELS ABOVE, BUT IT CANNOT TELL WHICH LEVLE IS
*  DOING THE CAPPING.  IT CAN ONLY TELL IF SOFTCAPPING IS ENABLED AT
*  SOME LEVEL OR THAT THE LPAR IS CURRENTLY BEING AFFECT BY ITS OWN
*  4HRA VALUE (IT CANNOT SEE THE AGGREGATE 4HRA TO KNOW IF SOFTCAPPING
*  IS BEING INVOKED DUE TO AGGREGATE GROUP CAPACITY UTILIZATION -
*  AT LEAST I DO NOT PRESENTLY KNOW HOW TO OBTAIN THIS AGGREGATE
*  LPARGROUP 4HRA VALUE).
*  THEREFORE, IT IS POSSIBLE THAT THE AGGREGATE GROUP OF LPAR'S
*  UTILIZATION IS INVOKING SOFTCAPPING, BUT THIS PROGRAM CAN ONLY TELL
*  WHEN SOFTCAPPING IS BEING INVOKED SOLEY DUE TO THIS LPAR'S
*  UTILIZATION.
*  TWO INDICATORS (FLAGS) ARE USED TO INDICATE SOFTCAPPPING:
*   1) SOFTCAP  - WHEN THE LPAR'S UTILIZATION EXCEEDS THE SOFTCAP LIMIT
*                 AND SO SOFTCAPPING IS PRESENTLY BEING IMPOSED
*                 (TRIGGERED) EITHER VIA A SOFTCAP LIMIT SET AT THE
*                 LPAR LEVEL OR AT THE LPARGROUP LEVEL).
*                 THE 'SOFTCAP' INDICATOR PRESUPPOSES THE FACT THAT
*                 SOFTCAPPING IS ENABLED BUT SOFTCAPPING MAY NOT
*                 PRESENTLY BE IMPOSED. ALSO, SOFTCAPPING MAY BE
*                 PRESENTLY BE IMPOSED DUE TO THE AGGREGATE 4HRA OF
*                 AN LPARGROUP, BUT THIS PROGRAM CANNOT DETECT IT.
*   2) LIMITED  - WHEN THE CEC CAPACITY EXCEEDS THE LPAR CAPACITY LIMIT
*                 BUT SOFTCAPPING IS NOT PRESENTLY BEING IMPOSED (AS
*                 FAR AS THIS PROGRAM CAN DETECT DUE TO THIS LPAR'S
*                 4HRA UTILIZATION SINCE IT CANNOT SEE THE AGGREGATE
*                 4HRA UTILIZATION OF ALL OF THE LPARS IN AN LPARGROUP
*                 SOFTCAPPING SCENARIO).
*                 THIS INDICATES THAT SOFTCAPPING IS ENABLED AT SOME
*                 LEVEL (EITHER LPAR LEVEL OR LPARGROUP LEVEL) BUT
*                 THIS LPAR'S 4HRA UTILIZATION IS LESS THAN THE
*                 SOFTCAP LIMIT.
***********************************************************************
         MVC   LPRCAPAC,RCTIMGWU    SAVE LPAR CAPACITY IN MSUS
         MVC   CECCAPAC,RCTCECWU    SAVE CEC  CAPACITY IN MSUS
         MVC   ROLLAVG,RCTLACS      SAVE 4-HR ROLLING AVG IN MSUS
         CLC   CECCAPAC,LPRCAPAC    CEC CAPACITY = LPAR CAPACITY ?
         BE    OUTMSGS                 YES - SOFTCAPPING IS NOT ENABLED
         MVI   LIMITED,C'Y'         SOFTCAPPING IS ENABLED IN SOME WAY
         CLC   ROLLAVG,LPRCAPAC     LPAR 4-HR ROLLAVG < LPAR CAPACITY?
         BL    OUTMSGS                 SOFTCAPPING IS NOT IMPOSED
         MVI   SOFTCAP,C'Y'            OSFTCAPPING IS BEING IMPOSED
OUTMSGS  DS    0H
         LA    R7,OUTPUT               DCB TO OPEN
         MVC   OUTPUT(OUTPUTL),OUTPUTI RELOCATE
         MVC   OPENCL(OPENIL),OPENI    RELOCATE
         LA    R8,OPENCL               OPEN/CLOSE WORK AREA
         OPEN  ((R7),OUTPUT),MODE=31,MF=(E,(R8))   OPEN OUTPUT FILE
         LTR   R15,R15                 GOOD OPEN ?
         BNZ   STARTMSG                  NO
         MVI   OPENOUT,C'Y'            OUTPUT FILE SUCCESSFULLY OPENED?
STARTMSG DS    0H
         LA    R6,EXECWTO              POINT TO WTO PARMLIST
         USING WPL,R6                  MAP PARM LIST DSECT
***********************************************************************
*  ISSUE THE FIRST SOFTCAPI WTO MESSAGE (UTILIZATION MESSAGE)
***********************************************************************
         MVC   EXECWTO(EXECWTOL),WTOI       INIT. MESSAGE AREA
         MVC   WPLTXT(WTOMSG1L),WTOMSG1     LOAD MESSAGE TEXT
         MVC   DOUBLE,LPARNAME              MOVE TO WORK FIELD
         TR    DOUBLE,TRTB                  CONVERT BLANKS TO EDIT PAD
         MVC   WPLTXT+14(L'LPARNAME),DOUBLE LOAD LPARNAME WITH EDITCHAR
         L     R1,ROLLAVG                   FORMAT ROLLAVG FOR WTO
         BAS   R10,CONVEBCD                 CONVERT TO EBCDIC WITH PAD
         MVC   WPLTXT+63(10),EDITMASK+2     LOAD ROLLING AVG IN MSUS
         CLI   SOFTCAP,C'Y'                 LPAR 4HRA EXCEEEDS SOFTCAP?
         BNE   CHKLIMIT                      NO-LPAR DOESN'T EXCEED CAP
         MVC   WPLTXT+78(CAPISONL),CAPISON  LPAR IS AFFECTED BY CAP MSG
         B     ISSUMSG1
CHKLIMIT DS    0H
         CLI   LIMITED,C'Y'                 SOFTCAPPING ENABLED?
         BNE   ISSUMSG1                      NO-SOFTCAPPING NOT ENABLED
         MVC   WPLTXT+78(LPARLMTL),LPARLMTD ADD SOFTCAPPING ENABLED MSG
ISSUMSG1 DS    0H
         BAS   R10,REMNUMBK                 REMOVE ALL IMBEDDED PADCHAR
         WTO   MF=(E,EXECWTO)               EXEC WTO MACRO
         CLI   OPENOUT,C'Y'                 OUTPUT FILE OPEN ?
         BNE   GOMSG2                         NO  - SKIP WRITE TO FILE
         MVI   OUTREC,C' '                    YES - OUTPUT RECORD
         MVC   OUTREC+1(OUTRECL-1),OUTREC    INITIALIZE OUTPUT RECORD
         MVC   OUTREC(PREFIXL),PREFIX        MOVE PREFIX INTO OUTREC
         MVC   OUTREC+PREFIXL(WPLLEN),WPLTXT MOVE WTO MSG TO RECORD
         PUT   OUTPUT,OUTREC                 OUTPUT RECORD
GOMSG2   DS    0H
***********************************************************************
*  ISSUE THE SECOND SOFTCAPI WTO MESSAGE (CAPACITY MESSAGE)
***********************************************************************
         MVC   EXECWTO(EXECWTOL),WTOI      INIT. MESSAGE AREA
         MVC   WPLTXT(WTOMSG2L),WTOMSG2    LOAD MESSAGE TEXT
         MVC   DOUBLE,HARDWNME             MOVE TO WORK FIELD
         TR    DOUBLE,TRTB                 CONVERT BLANKS TO EDIT PAD
         MVC   WPLTXT+9(L'HARDWNME),DOUBLE LOAD HARDWNME WITH EDITCHAR
         L     R1,CECCAPAC                 FORMAT CECCAPAC FOR WTO
         BAS   R10,CONVEBCD                CONVERT TO EBCDIC WITH PAD
         MVC   WPLTXT+30(10),EDITMASK+2    LOAD CEC CAPACITY IN MSUS
         L     R1,LPRCAPAC                 FORMAT LPRCAPAC FOR WTO
         BAS   R10,CONVEBCD                CONVERT TO EBCDIC WITH PAD
         MVC   WPLTXT+64(10),EDITMASK+2    LOAD CEC CAPACITY IN MSUS
         BAS   R10,REMNUMBK                REMOVE ALL IMBEDDED PADCHAR
         WTO   MF=(E,EXECWTO)              EXEC WTO MACRO
         CLI   OPENOUT,C'Y'                OUTPUT FILE OPEN ?
         BNE   RETNPRMS                       NO  - SKIP WRITE TO FILE
         MVI   OUTREC,C' '                    YES - OUTPUT RECORD
         MVC   OUTREC+1(OUTRECL-1),OUTREC  INITIALIZE OUTPUT RECORD
         MVC   OUTREC(PREFIXL),PREFIX      MOVE PREFIX INTO OUTREC
         MVC   OUTREC+PREFIXL(WPLLEN),WPLTXT MOVE WTO MSG TO RECORD
         PUT   OUTPUT,OUTREC               OUTPUT RECORD
RETNPRMS DS    0H
         CLI   SUBRTN,C'Y'          WAS I CALLED AS A SUBROUTINE ?
         BNE   CLOSOUPT               NO  - DON'T RETURN PARMS
         L     R11,PARMADR1           YES - GET THE PARMLIST ADDRESS
         L     R1,0(,R11)                   MOVE DATA TO RETURN PARMS
         MVC   0(L'LPARNAME,R1),LPARNAME    LOAD RETURN PARM #1
         L     R1,4(,R11)
         MVC   0(L'HARDWNME,R1),HARDWNME    LOAD RETURN PARM #2
         L     R1,8(,R11)
         MVC   0(L'CECCAPAC,R1),CECCAPAC    LOAD RETURN PARM #3
         L     R1,12(,R11)
         MVC   0(L'LPRCAPAC,R1),LPRCAPAC    LOAD RETURN PARM #4
         L     R1,16(,R11)
         MVC   0(L'ROLLAVG,R1),ROLLAVG      LOAD RETURN PARM #5
         L     R1,20(,R11)
         MVC   0(L'LIMITED,R1),LIMITED      LOAD RETURN PARM #6
         L     R1,24(,R11)
         MVC   0(L'SOFTCAP,R1),SOFTCAP      LOAD RETURN PARM #7
CLOSOUPT DS    0H
         CLI   OPENOUT,C'Y'                 OUTPUT FILE OPEN ?
         BNE   RETURN                         NO  - SKIP CLOSE
         LA    R7,OUTPUT                    DCB TO CLOSE
         LA    R8,OPENCL                    OPEN/CLOSE WORK AREA
         CLOSE ((R7)),MODE=31,MF=(E,(R8))   CLOSE OUTPUT FILE
RETURN   DS    0H
         DROP  R2
         LR    R2,R13               POINTER TO STORAGE AREA
         LA    R3,WKAREALN          WORK AREA SIZE
         L     R13,4(,R13)          RESTORE CALLER'S SAVEAREA ADDRESS
         STORAGE RELEASE,LENGTH=(R3),ADDR=(R2)
         L     R14,12(,R13)         RESTORE R14
         XR    R15,R15              ZERO RETURN CODE
         LM    R0,R12,20(R13)       RESTORE CALLER'S REGISTERS
         BSM   0,R14                RETURN TO PROGRAM CALLER
**********************************************************************
* SUBROUTINES FOLLOW.
**********************************************************************
* CONVERT NUMERIC MSU FIELDS TO EBCDIC FOR DISPLAY AND ADD EDIT PAD
* LEADING CHARACTERS TO BE SCRUNCHED OUT LATER ON.
**********************************************************************
CONVEBCD DS    0H
         CVD   R1,DOUBLE                  CONVERT TO PACKED DECIMAL
         MVC   EDITMASK,MASKDW            RELOCATE/REINIT EDIT MASK
         ED    EDITMASK,DOUBLE+2          PERFORM EDIT TO ZONED DECIMAL
         BR    R10                        RETURN TO SUBROUTINE CALLER
***********************************************************************
* REMOVE ALL EDIT PAD CHARS FROM THE TEXT LINE AND SHIFT END OF LINE
* ONE CHARACTER TO THE LEFT TO REMOVE EACH EDIT PAD FILLER CHARACTER.
* THE CHARACTER X'BA' IS USED AS AN EDIT PAD CHARACTER IN THE
* NUMERIC MSU FIELDS, THE LPARNAME, AND THE HARDWARE NAME FIELDS.
***********************************************************************
REMNUMBK DS    0H                         PREPARE FOR PADCHAR SCRUNCH
         L     R7,=A(WPLLEN)              STORE LENGTH WPL TEXT FOR BCT
         LA    R9,WPLTXT-1                PRIME CHARACTER POINTER
LOOPCHAR DS    0H
         LR    R8,R7                      GET LENGTH OF ENDLINE REMAINS
         LA    R9,1(,R9)                  INCREMENT CHARACTER POINTER
         CLI   0(R9),X'BA'                FOUND EDIT PAD CHARACTER ?
         BE    SHIFTLFT                     YES - SCRUNCH OUT PAD CHAR
         B     CHKLOOP                      NO  - CHECK LOOP STATUS
SHIFTLFT DS    0H                         SHIFT TEXT LEFT 1 BYTE
         BCTR  R8,0                       DECREMENT 1 BYTE FOR EX MOVE
         EX    R8,MOVENDLN                MOVE END OF LINE LEFT 1 BYTE
         MVI   WPLTXTL,C' '               MOVE BLANK TO FINAL END BYTE
         BCTR  R9,0                       DECREMENT CHAR POINTER BY 1
CHKLOOP  DS    0H                         CHECK THE LOOP STATUS
         BCT   R7,LOOPCHAR                HIT END OF PADCHAR LOOP CHK ?
         BR    R10                           YES - RETURN TO CALLER
MOVENDLN DS    0H
         MVC   0(0,R9),1(R9)              SHIFT END OF LINE LEFT BY 1
*
**********************************************************************
*    STATIC STORAGE FOLLOWS
*---------------------------------------------------------------------*
WTOMSG1  DS    0F
         DC    CL(WPLLEN)'SOFTCAPI LPAR          CURRENT ROLLING 4-HR A+
               VG UTILIZATION IS            MSUS                       +
                                        '
WTOMSG1L EQU   *-WTOMSG1
*
CAPISON  DS    0F
         DC    C'. SOFTCAPPING IS CURRENTLY IMPOSED ON LPAR.'
CAPISONL EQU   *-CAPISON
*
LPARLMTD DS    0F
         DC    C'. SOFTCAPPING IS ENABLED AT SOME LEVEL.'
LPARLMTL EQU   *-LPARLMTD
*
WTOMSG2  DS    0F
         DC    CL(WPLLEN)'SOFTCAPI          CAPACITY IS            MSUS+
               , LPAR CAPACITY IS            MSUS                      +
                                        '
WTOMSG2L EQU   *-WTOMSG2
*
*---------------------------------------------------------------------*
* WTO INITIALIZE AREA                                                 *
*---------------------------------------------------------------------*
WTOI     DS    0F
         WTO   '                                                       +
                                                                       +
                              ',MF=L,ROUTCDE=(11)
WTOIL    EQU   *-WTOI
*
MASKDW   DS    0F
         DC    X'BA2020202020202020202120'  EDIT MASK WITH PAD FOR MSUS
MASKDWL  EQU   *-MASKDW
*
TRTB     DS    0F                 TRANSLATION TABLE WITH EDIT PAD CHAR
         DC    256AL1(*-TRTB)
         ORG   TRTB+X'00'
         DC    XL1'BA'            CHANGE HEXZEROS TO EDIT PAD CHARACTER
         ORG   TRTB+C' '
         DC    XL1'BA'            CHANGE BLANKS   TO EDIT PAD CHARACTER
         ORG
*
OUTPUTI  DS    0F
         DCB   DDNAME=OUTPUT,MACRF=(PM),DSORG=PS,                      +
               LRECL=150,RECFM=FB
OUTPUTL  EQU   *-OUTPUTI
*
OPENI    DS    0F
         OPEN  (*,OUTPUT),MODE=31,MF=L
OPENIL   EQU   *-OPENI
*
         LTORG ,
**********************************************************************
*    DYNAMIC STORAGE FOLLOWS
**********************************************************************
WKAREA      DSECT ,
SAVEAREA    DS    20F
PARMADR1    DS    F
JUL2GENT    DS    F                ENTRY ADDRESS FOR PROGRAM JUL2GREG
JUL2GRPL    DS    D                JUL2GREG PARMLIST
LPARNAME    DS    CL8              LPAR NAME
HARDWNME    DS    CL8              HARDWARE NAME
CECCAPAC    DS    F                CEC CAPACITY IN MSUS
LPRCAPAC    DS    F                LPAR CAPACITY IN MSUS
ROLLAVG     DS    F                ROLLING 4-HOUR AVERAGE IN MSUS
LIMITED     DS    CL1              LPAR CAPACITY IS LIMITED IN SOME WAY
SOFTCAP     DS    CL1              LPAR SOFTCAP INDICATOR FLAG (Y OR N)
DOUBLE      DS    D                DOUBLE WORD WORK AREA
SUBRTN      DS    CL1              SUBROUTINE CALL FLAG
OUTPUT      DS    0F,CL(OUTPUTL)   OUTPUT DCB RELOCATE AREA
OPENCL      DS    0F,CL(OPENIL)    OPEN/CLOSE PARMLIST RELOCATE AREA
OPENOUT     DS    CL1              OUTPUT DCB OPENED FLAG
*
*---------------------------------------------------------------------*
* BASE SYSTEM RETURNED DATE AND TIME
*---------------------------------------------------------------------*
CURRTIME    DS    F                CURRENT TIME OF DAY HHMMSSHH(BINARY)
CURRDATE    DS    PL4              CURRENT JULIAN DATE
*
STORTIME    DS    F                USED TO CONVERT TO PACKED DECIMAL
STORTMSG    DS    XL1              SIGN FOR PACKED DECIMAL
TIME9       DS    CL9              STORE PACKED-TO-ZONE CONVERSION
*
JULDATE7    DS    0CL7             7 DIGIT JULIAN DATE (YYYYDDD)
JULCENTY    DS    CL2              JULIAN DATE'S CENTURY
JULIANYR    DS    CL2              JULIAN DATE'S YEAR
JULDAYS     DS    CL3              JULIAN DATE'S DAYS
JULDATEL    EQU   *-JULDATE7
*
GREGDATE    DS    0CL8             GREGORIAN DATE (YYYYMMDD)
GREGDTYR    DS    CL4              GREGORIAN YEAR
GREGDTMO    DS    CL2              GREGORIAN MONTH
GREGDTDY    DS    CL2              GREGORIAN DAY
GREGDATL    EQU   *-GREGDATE
*
**********************************************************************
*  ADD THIS PREFIX TO THE FRONT OF EACH WTO MESSAGE THAT IS WRITTEN
*  TO FILE "OUTPUT".
**********************************************************************
PREFIX      DS    0F                    PREFIX TO "OUTPUT" RECORD
PREFDATE    DS    0CL8                  CURRENT DATE
PREFDTMO    DS    CL2                   MONTH
PREFDTH1    DS    CL1                   FORWARD SLASH
PREFDTDY    DS    CL2                   DAY
PREFDTH2    DS    CL1                   FORWARD SLASH
PREFDTYR    DS    CL2                   YEAR
            DS    CL1                   BLANK
PREFTIME    DS    0CL8                  CURRENT TIME
PREFTMHH    DS    CL2                   HOURS
PREFTMC1    DS    CL1                   COLON
PREFTMMM    DS    CL2                   MINUTES
PREFTMC2    DS    CL1                   COLON
PREFTMSS    DS    CL2                   SECONDS
            DS    CL1                   BLANK
SYSID       DS    CL3                   SYSTEM ID
            DS    CL1                   BLANK
PREFIXL     EQU   *-PREFIX
*
EDITMASK    DS    CL(MASKDWL)           EDIT MASK WORK AREA
*
EXECWTO     DS    0F
            DS    CL(WTOIL)             WTO MESSAGE AREA
EXECWTOL    EQU   *-EXECWTO
*
WPLLEN      EQU   (WPLTXTL-WPLTXT+1)    LENGTH OF WPL TEXT AREA
*
OUTREC      DS    0F
            DS    CL150                 OUTPUT RECORD BUFFER
OUTRECL     EQU   *-OUTREC
*
WKAREALN    EQU   *-WKAREA              LENGTH OF WORKAREA
*
         YREGS ,                   REGISTER EQUATES
DSECTPSA IHAPSA   LIST=YES ,
DSECTCVT CVT      DSECT=YES,LIST=YES ,
         IEZWPL   ,                WTO PARAMETER LIST DSECT
         IHAECVT  LIST=YES ,       EXTENDED COMMUNICATIONS VECTOR TABLE
         IRARMCT  ,                RESOURCES MANAGER CONTROL TABLE
         IRARCT   ,                RESOURCE CONTROL TABLE
         END
