         TITLE '**** COPY RECORDS WITH DYNAMIC ALLOCATION ON OUTPUT FIL+
               E (SYSUT2) ****'
***********************************************************************
*                                                                     *
*        DDDD  Y   Y BBBB    A    CCCC K  K  U   U PPPP               *
*        D   D  Y Y  B   B  A A  C     K K   U   U P   P              *
*        D   D   Y   BBBB  A   A C     KK    U   U PPPP               *
*        D   D   Y   B   B AAAAA C     K K   U   U P                  *
*        DDDD    Y   BBBB  A   A  CCCC K  K   UUU  P                  *
*                                                                     *
* DATE WRITTEN: 02/04/2010 TKMILLE                                    *
* LAST UPDATED: 03/09/2010 TKMILLE                                    *
*                                                                     *
* GLORIFIED IEBGENER COPY PROGRAM WHICH INPUTS THE "SYSUT1" FILE      *
* AND COPIES THE DATA IN THIS FILE TO THE OUTPUT "SYSUT2" FILE.       *
*                                                                     *
* HOWEVER, THE "SYSUT2" DATASET NAME IS PASSED AS A LINKAGE           *
* EXECUTION PARAMETER AND IS DYNAMICALLY ALLOCATED.                   *
*                                                                     *
* THE DISPOSITION (STATUS) FOR THE DYNAMIC ALLOCATION FOR DDNAME      *
* "SYSUT2" IS ALSO PASSED AS A LINKAGE EXECUTION PARAMETER TO THIS    *
* PROGRAM.                                                            *
*                                                                     *
* ALSO, THE SYSIN FILE CAN BE USED TO PASS TWO PARAMETERS TO          *
* OVERRIDE DYNALC PROGRAM DEFAULTS.                                   *
* SYSIN PARAMETERS:                                                   *
*     ALLOCAT=NNNNNN (NUMBER OF DYNALC ATTEMPTS - IF FILE IS BUSY)    *
*     WAITINT=NNNNNN (NUMBER OF SECONDS TO WAIT BETWEEN ATTEMPTS)     *
*                                                                     *
* THESE SYSIN RECORD PARAMETERS WILL OVERRIDE THE FOLLOWING DEFAULTS: *
*  NUMBER OF DYNALC ATTEMPTS => 60 ATTEMPTS   (ALLOCAT = 60)          *
*  WAIT INTERVAL (IN SECONDS) BETWEEN DYNALC ATTEMPTS => 10 SECONDS   *
*  (WAITINV = 10)                                                     *
*                                                                     *
* EXAMPLE:                                                            *
*                                                                     *
* //STEP1    EXEC PGM=DYBACKUP,                                       *
* //         PARM='OLD MY.SYSUT2.DATASET.NAME'  <= SYSUT2 DSNAME      *
* //SYSUT1   DD DISP=SHR,DSN=INPUT.DATASET      <= SYSUT1 DSNAME      *
* //SYSPRINT DD SYSOUT=*                                              *
* //SYSUDUMP DD SYSOUT=*                                              *
* //SYSIN    DD *                                                     *
*   ALLOCAT=000006  WAITINT=000005                                    *
* /*                                                                  *
*                                                                     *
* INPUT FILES:                                                        *
*       SYSIN   - PARAMETER OVERRIDE FILE  LRECL=80 RECFM=FB          *
*       SYSUT1  - ANY FILE TO BE COPIED TO FILE SYSUT2.  THIS FILE    *
*                     MUST BE ALLOCATED PRIOR TO THE CALL TO THIS     *
*                     PROGRAM.                                        *
*                                                                     *
* OUTPUT FILES:                                                       *
*     SYSPRINT  - REPORT OUTPUT FILE       LRECL=133 RECFM=FB         *
*       SYSOUT  - WTO REPORT FILE          LRECL=121 RECFM=FB         *
*       SYSUT2  - FILE TO COPY SYSUT1 DATA TO. THIS FILE IS           *
*                    DYNAMICALLY ALLOCATED. DCB IS MAPPED TO THE      *
*                    SYSUT1 DCB (EXCEPT BLKSIZE) IF THE DCB RECFM     *
*                    AND LRECL ARE NOT PRESENT PRIOR TO OPEN.         *
*                                                                     *
* MACROS USED:                                                        *
*       SAVE                                                          *
*       STORAGE                                                       *
*       WTO                                                           *
*       LOAD                                                          *
*       DELETE                                                        *
*       EXTRACT                                                       *
*       OPEN                                                          *
*       CLOSE                                                         *
*       GET                                                           *
*       PUT                                                           *
*       RDJFCB                                                        *
*       DYNALLOC                                                      *
*       STIMER                                                        *
*       DEVTYPE                                                       *
*                                                                     *
* PROGRAMS CALLED:                                                    *
*       JUL2GREG - CONVERTS JULIAN DATE FORMAT TO GREGORIAN DATE      *
*                                                                     *
* REGISTER USAGE:                                                     *
*                                                                     *
* R0      - WORK REGISTER                                             *
* R1      - POINTS TO THE EXECUTION PARAMETER ADDRESS ON ENTRY        *
* R2      - WORK REGISTER & MAPS THE DD ENTRIES IN THE TIOT           *
* R3      - MAPS SYSUT1 (INPUT) DCB                                   *
* R4      - WORK REGISTER                                             *
* R5      - MAPS SYSUT2 (OUTPUT) DCB                                  *
* R6      - RETURN CODE SAVE REGISTER                                 *
* R7      - WORK REGISTER                                             *
* R8      - WORK REGISTER & MAPS DEVTYPE INFO=AMCAP RETURN AREA       *
* R9      - MAPS DYNAMIC ALLOCATION REQUEST BLOCK                     *
* R10     - MAPS 2ND SAVE AREA                                        *
* R11     - 2ND PROGRAM BASE REGISTER                                 *
* R12     - PROGRAM BASE REGISTER                                     *
* R13     - MAPS SAVE AREA                                            *
* R14     - BRANCHING REGISTER                                        *
* R15     - WORK REGISTER AND RETURN CODE                             *
*                                                                     *
* RETURN CODES:                                                       *
*                                                                     *
*    0 - SUCCESSFUL EXECUTION OF PROGRAM DYBACKUP                     *
*   12 - FAILED EXECUTION OF PROGRAM DYBACKUP                         *
*                                                                     *
*                                                                     *
* ABENDS:   NONE                                                      *
*                                                                     *
* ATTRIBUTES: AMODE=31,RMODE=24,RENT,REUS                             *
*                                                                     *
***********************************************************************
DYBACKUP CSECT
DYBACKUP AMODE 31
DYBACKUP RMODE 24
         SAVE  (14,12),,DYBACKUP_ASSEMBLED_ON_&SYSDATC._&SYSTIME
         LR    R12,R15              LOAD ENTRY ADDRESS
         LA    R11,2048(,R12)       CHAIN R11 TO R12 BASE
         LA    R11,2048(,R11)
         USING DYBACKUP,R12,R11     DECLARE ENTRY BASE REGISTERS
         LR    R5,R1                PRESERVE PASSED PARMLIST ADDRESS
         LR    R6,R13               STORE SAVEAREA BACKWARD LINK
         L     R3,=A(WKAREAL)       SIZE OF STORAGE TO OBTAIN
         STORAGE OBTAIN,LENGTH=(R3),LOC=(RES)
         ST    R1,8(,R13)           SET SAVEAREA FORWARD LINK
         LR    R13,R1               ADDRESS OF OBTAINED AREA
         USING WKAREA,R13           ADDRESSABILITY TO OBTAINED AREA
INITOBTN DS    0H                   INITIALIZE OBTAINED STORAGE AREA
         LR    R2,R13               ADDRESS OF TARGET OF MOVE (OBTND)
         L     R3,=A(WKAREAL)       LENGTH OF THE TARGET OF MOVE
         XR    R14,R14             FROM ADDRESS (IRRELEVANT WITH LEN=0)
         XR    R15,R15              PAD/LENGTH TO PROPAGATE IN ODD REG
         MVCL  R2,R14          PROPAGATE BINARY ZEROES IN OBTAINED AREA
         ST    R6,4(,R13)           SET SAVEAREA BACKWARD LINK
         XR    R6,R6                ZERO THE RETURN CODE SAVE REGISTER
         ST    R5,PARMADDR
OBTAIN2  DS    0H                   GET A SECOND STORAGE AREA
         L     R3,=A(WKAREAL2)      SIZE OF STORAGE AREA2 BO OBTAIN
         STORAGE OBTAIN,LENGTH=(R3),LOC=(31)
         LR    R10,R1               ADDRESS OF OBTAINED AREA2
         USING WKAREA2,R10          ADDRESSABILITY TO OBTAINED AREA2
         B     HOUSKEEP             SKIP EYECATCHER
***********************************************************************
MOD_LEVEL  DC  CL9'V01.01.01'      PROGRAM VERSION RELEASE MOD. LEVEL
***********************************************************************
HOUSKEEP DS    0H
         MVC   HEADING1(HEADING1L),BLANKLIN     INITIALIZE
         MVC   H1LIT1,=CL11'DYBACKUP - '        INITIALIZE
         MVC   H1LIT2(39),=CL39'  COPY PROGRAM WITH DYNAMIC ALLOCATION'
         MVC   H1VERS,MOD_LEVEL          MAINTENANCE LEVEL VERS.REL.MOD
         TIME  DEC ,                     GET CURRENT DATE AND TIME
         STM   R0,R1,CURRTIME            STORE CURRENT TIME AND JULDATE
         MVI   CURRDATE+0,X'20'
         UNPK  JULIANDT(7),CURRDATE(4)   STORE THE JULIAN DATE
         OI    JULIANDT+6,X'F0'          FIX THE SIGN
         MVC   H1DATE(4),JULIANDT
         MVI   H1DATE+4,C'.'
         MVC   H1DATE+5(3),JULIANDT+4
         MVC   STORTIME,CURRTIME
         MVI   STORTMSG,X'0F'
         UNPK  TIME9(9),STORTIME(5)      UNPACK THE TIME
         MVC   DISPTMHH(2),TIME9
         MVI   DISPTMC1,C':'
         MVC   DISPTMMM(2),TIME9+2
         MVI   DISPTMC2,C':'
         MVC   DISPTMSS(2),TIME9+4
         MVC   H1TIME(8),DISPTIME
**********************************************************************
*  CALL PROGRAM JUL2GREG TO CONVERT A JULIAN DATE TO GREGORIAN FORMAT.
*  INPUT  PARM => JULIAN DATE    (YYYYDDD)  7 CHARACTERS
*  OUTPUT PARM => GREGORIAN DATE (YYYYMMDD) 8 CHARACTERS
**********************************************************************
         LOAD  EP=JUL2GREG       LOAD PROGRAM "JUL2GREG"
         ST    R0,JUL2GENT       STORE THE ENTRY ADDRESS
         LA    R1,JUL2GRPL       PARMLIST FOR JUL2GREG
         LA    R0,JULIANDT       INPUT PARM JULIAN DATE
         ST    R0,0(,R1)         STORE ADDRESS OF JULIAN DATE PARM
         LA    R0,GREGDATE       OUTPUT PARM GREGORIAN DATE
         ST    R0,4(,R1)         STORE ADDRESS OF GREGORIAN DATE PARM
         OI    4(R1),X'80'       INDICATE END OF PARM ADDRESSES
         L     R15,JUL2GENT      LOAD JUL2GREG ENTRY POINT ADDRESS
         BASSM R14,R15           CALL "JUL2GREG" TO CONVERT JULIAN DATE
         LR    R7,R15            SAVE JUL2GREG RETURN CODE
         DELETE EP=JUL2GENT
         LTR   R7,R7             SUCCESSFUL CALL TO JUL2GREG ?
         BNZ   INITALL           NO - DON'T HAVE A GOOD GREGORIAN DATE
         MVC   H1DATE(2),GREGDTMO  OVERRIDE JULIAN WITH GREGORIAN DATE
         MVI   H1DATE+2,C'/'
         MVC   H1DATE+3(2),GREGDTDY
         MVI   H1DATE+5,C'/'
         MVC   H1DATE+6(4),GREGDTYR
INITALL  DS     0H
         MVI   MSGCC,C' '                    INITIALIZE
         ZAP   RECCNT,=PL1'0'                INITIALIZE
         MVC   ALCINTDS,DFLTWINT      SET DEFAULT DYNALC WAIT INTERVAL
         OI    ALCINTDS+L'ALCINTDS-1,X'F0'
         MVC   ALCATTDS,DFLTATT       SET DEFAULT # OF DYNALC ATTEMPTS
         OI    ALCATTDS+L'ALCINTDS-1,X'F0'
**********************************************************************
* ESTABLISH ADDRESSABILITY FOR DYNALLOC ROUTINE
**********************************************************************
         LA    R9,ALORB               DYNALLOC REQUEST BLOCK
         USING S99RB,R9               MAP DYNALLOC REQUEST BLOCK
         ST    R9,ALOPARM             PARM POINTS TO REQUEST BLOCK
         OI    ALOPARM,X'80'          FLAG END OF PARMLIST
         MVI   S99RBLN,S99RBEND-S99RB INSERT RB LENGTH
         LA    R0,S99VRBAL            ALLOCATE VERB
         STC   R0,S99VERB             SET VERB TO 'ALLOCATE'
         LA    R0,ALODD               FIRST TEXT UNIT
         ST    R0,S99TXTPP            TEXT UNIT LIST POINTER
         MVC   DAIRDDNP(IAIRDDNL),IAIRDDNP RELOCATE DAIR DDNAME POINTER
         MVC   DAIRDSNP(IAIRDSNL),IAIRDSNP RELOCATE DAIR DSNAME POINTER
         MVC   DAIRSTAP(IAIRSTAL),IAIRSTAP RELOCATE DAIR STATUS POINTER
         MVC   DAIRCLOS(IAIRCLOL),IAIRCLOS RELOCATE DAIR CLOSE  POINTER
         LA    R0,DALDDNAM
         STH   R0,DAIRDDNP            STORE TEXT UNIT KEY # FOR DDNAME
         LA    R0,DALDSNAM
         STH   R0,DAIRDSNP            STORE TEXT UNIT KEY # FOR DSNAME
         LA    R0,DALSTATS
         STH   R0,DAIRSTAP            STORE TEXT UNIT KEY # FOR STATUS
         LA    R0,DALCLOSE
         STH   R0,DAIRCLOS            STORE TEXT UNIT KEY # FOR CLOSE
*
         LA    R0,DAIRDDNP
         ST    R0,ALODD               LOAD DAIRDDN POINTER ADDRESS
         LA    R0,DAIRDSNP
         ST    R0,ALODSN              LOAD DAIRDSN POINTER ADDRESS
         LA    R0,DAIRSTAP
         ST    R0,ALOSTAT             LOAD DAIRSTAT POINTER ADDRESS
         LA    R0,DAIRCLOS
         ST    R0,ALOCLOSE            LOAD DAIRCLOS POINTER ADDRESS
         OI    ALOCLOSE,X'80'         FLAG END OF TEXT UNIT PTR LIST
**********************************************************************
* RELOCATE DCBS AND MACRO PARMLISTS
**********************************************************************
         MVC   SYSIN(SYSINIL),SYSINI         RELOCATE SYSIN  DCB
         MVC   SYSUT1(SYSUT1IL),SYSUT1I      RELOCATE SYSUT1 DCB
         MVC   SYS1LIST(SYS1LISL),SYS1LISI   RELOCATE SYSUT1 EXIT LIST
         LA    R0,SYS1LIST                   POINT TO SYSUT1 EXIT LIST
         STCM  R0,7,SYSUT1+DCBEXLSA-IHADCB   SYSUT1 EXIT LIST ADDRESS
         MVC   DCBEUT1(DCBEUT1L),DCBEUT1I    RELOCATE SYSUT1 DCBE
         LA    R0,DCBEUT1
         ST    R0,SYSUT1+DCBDCBE-IHADCB      RELOCATE SYSUT1 DCBE ADDR
         OI    DCBEFLG2-DCBE(R1),DCBEULBI    REQUEST SAM LBI FOR SYSUT1
         MVC   SYSUT2(SYSUT2IL),SYSUT2I      RELOCATE SYSUT2 DCB
         MVC   SYS2LIST(SYS2LISL),SYS2LISI   RELOCATE SYSUT2 EXIT LIST
         LA    R0,SYS2LIST                   POINT TO SYSUT2 EXIT LIST
         STCM  R0,7,SYSUT2+DCBEXLSA-IHADCB   SYSUT2 EXIT LIST ADDRESS
         MVC   DCBEUT2(DCBEUT1L),DCBEUT2I    RELOCATE SYSUT2 DCBE
         LA    R0,DCBEUT2
         ST    R0,SYSUT2+DCBDCBE-IHADCB      RELOCATE SYSUT2 DCBE ADDR
         LA    R0,JFCBARB                    POINT TO JFCB WORKAREA
         STCM  R0,7,SYS1LIST+SYS1RJFC-SYS1LISI LOAD JFCB WORKAREA ADDR
         STCM  R0,7,SYS2LIST+SYS2RJFC-SYS2LISI LOAD JFCB WORKAREA ADDR
         MVC   WKRDJFCB(RDJFCBIL),RDJFCBI    RELOCATE JFCB PARM LIST
         MVC   WKOPENCL(OPENIL),OPENI        RELOCATE OPEN/CLOSE PMLST
         MVC   SYSPRINT(SYSPRINL),SYSPRINI   RELOCATE SYSPRINT DCB
***********************************************************************
*    OPEN THE SYSPRINT DCB
***********************************************************************
         LA    R2,SYSPRINT                   ADDR OF SYSPRINT DCB
         LA    R4,WKOPENCL                        OPEN/CLOSE WORK AREA
         OPEN  ((R2),OUTPUT),MODE=31,MF=(E,(R4))   OPEN SYSPRINT FILE
         TM    SYSPRINT+DCBOFLGS-IHADCB,DCBOFOPN  SYSPRINT FILE OPEN ?
         BO    DHEADING                    YES - GOOD OPEN ON SYSPRINT
BADSYPRT DS    0H                           NO - DCB ERROR ON SYSPRINT
         USING WPL,EXECWTO                       MAP PARM LIST DSECT
         MVC   EXECWTO(WTOIL),WTOI
         MVC   WPLTXT(L'INVOPSYS),INVOPSYS       LOAD WTO MESSAGE
         WTO   MF=(E,EXECWTO)                    EXEC WTO MACRO
         LA    R6,12
         B     RETURN
DHEADING DS    0H
         MVC   MSGAREA,HEADING1            FORMAT HEADING LINE
         PUT   SYSPRINT,MSGLINE            OUTPUT HEADING LINE
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
GETPARMS DS    0H
         L     R1,PARMADDR                 LOAD PARM POINTER ADDRESS
         L     R4,0(,R1)              POINT TO THE LINKAGE PARM ADDRESS
         MVC   LL,0(R4)                    SAVE THE LINKAGE PARM LENGTH
         CLC   LL,=H'5'                    LINKAGE PARM < 5 BYTES?
         BL    LINKERR                       NO - BAD LINKAGE PARM
         MVC   ALOCDDNM,DDSYSUT2           GET THE DDNAME FOR DYNALLOC
         MVC   ALOCDISP,2(R4)              GET THE DISP FOR DYNALLOC
         MVC   ALOCDSN,BLANKLIN            INITIALIZE DATASET NAME
         LH    R2,LL
         S     R2,=F'4'                    SUBTRACT LENGTH OF DISP PARM
         BCTR  R2,0                        DECREMENT 1 FOR MOVE DSNAME
         EX    R2,MOVEDSN                  GET DSNAME FOR DYNALLOC
MOVEDSN  DS    0H
         MVC   ALOCDSN(0),6(R4)            MOVE SYSUT2 DATASET NAME
         MVC   SYSUT2DS,ALOCDSN            SAVE SYSUT2 DATASET NAME
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DISPEXPM),DISPEXPM   FORMAT DISPLAY MSG
         LH    R2,LL
         BCTR  R2,0                        DECREMENT 1 FOR MOVE DSNAME
         EX    R2,MOVELNKP                 LOAD EXECUTION LINKAGE PARM
MOVELNKP DS    0H
         MVC   MSGAREA+29(0),2(R4)
         PUT   SYSPRINT,MSGLINE               OUTPUT MSG
         B     FINDSYSN                    OBTAIN SYSIN PARAMETERS
LINKERR  DS    0H
         PUT   SYSPRINT,BLANKLIN              OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVLINKA),INVLINKA   FORMAT ERROR MSG
         PUT   SYSPRINT,MSGLINE               OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVLINKB),INVLINKB   FORMAT ERROR MSG
         PUT   SYSPRINT,MSGLINE               OUTPUT MSG
         LA    R6,12
         B     ENDDATA
FINDSYSN DS    0H
         LA    R2,TIOTADDR
         MVC   EXTRACTW(EXTRACTL),EXTRACTI   RELOCATE EXTRACT PLIST
         EXTRACT (R2),FIELDS=TIOT,MF=(E,EXTRACTW) GET ADDR OF TIOT AREA
         L     R2,TIOTADDR         LOAD ADDRESS OF TIOT INTO R2
         USING TIOT1,R2            MAP THE START OF THE TIOT
         LA    R2,TIOENTRY         POINT TO FIRST DD ENTRY
         DROP  R2                  DONE WITH TIOT BASE
         USING TIOENTRY,R2         MAP THE DD ENTRIES IN THE TIOT
         SR    R3,R3               CLEAR R3 (WILL HOLD TIOT DD ENT LEN)
TIOTSCAN DS    0H
         IC    R3,TIOELNGH         1 BYTE - LENTH OF THIS TIOT DD ENTRY
         LTR   R3,R3               0 = END OF TIOT ?
         BZ    READJFCB             YES - DID NOT FIND SYSIN DD IN TIOT
         CLC   DDSYSIN,TIOEDDNM    TIOT DDNAME = SYSIN ?
         LA    R2,TIOENTRY(R3)     ADDRESS OF NEXT TIOT ENTRY
         BNE   TIOTSCAN              NO - CHECK NEXT TIOT DDNAME
         DROP  R2
OPENSYSN DS    0H                               YES - HAVE SYSIN DDNAME
         LA    R2,SYSIN                           ADDR OF SYSIN DCB
         LA    R4,WKOPENCL                        OPEN/CLOSE WORK AREA
         OPEN  ((R2),INPUT),MODE=31,MF=(E,(R4))   OPEN SYSIN INPUT
         TM    SYSIN+DCBOFLGS-IHADCB,DCBOFOPN     SYSIN FILE OPEN OK ?
         BNO   READJFCB                             NO - BAD SYSIN OPEN
GETSYSIN DS    0H
         GET   SYSIN,SYSINREC
         LA    R5,SYSINREC
         CLC   SYSINREC(SYSINRCL),BLANKLIN  IS THIS A BLANK SYSIN LINE?
         BE    GETSYSIN                        YES - IGNORE IT
         PUT   SYSPRINT,BLANKLIN             OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DISPSNPM),DISPSNPM  FORMAT SYSIN MESSAGE
         MVC   MSGAREA+29(SYSINRCL),SYSINREC  LOAD SYSIN RECORD
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         LA    R2,SYSINREC-1                PRIME SYSIN CHAR POINTER
         MVI   HAVSYNPM,C'N'                INITIALIZE
***********************************************************************
** SYSIN PARM LOOP (GET SYSIN PARAMETERS)                             *
** TWO PARAMETERS CAN BE INPUT ON THE SYSIN RECORD:                   *
**     ALLOCAT=NNNNNN  (NUMBER OF DYNALC  ATTEMPTS)                   *
**     WAITINT=NNNNNN  (NUMBER OF SECONDS TO WAIT BETWEEN ATTEMPTS)   *
***********************************************************************
SYSINPLP   DS  0H
         LA    R2,1(,R2)               LOOK AT NEXT CHARACTER IN RECORD
         LA    R1,SYSINRCL(,R5)        GET THE END OF RECORD ADDRESS
         CR    R2,R1                   EXCEEDED SYSIN RECORD LENGTH ?
         BH    GETSYSIN                   YES - REACHED END OF RECORD
         CLI   0(R2),C' '              HAVE A BLANK DELIMITER ?
         BE    CHKTOKEN                   YES - THEN VALIDATE THE TOKEN
         CLI   0(R2),C','              HAVE A COMMA DELIMITER ?
         BE    CHKTOKEN                   YES - THEN VALIDATE THE TOKEN
         CLI   0(R2),X'00'             HAVE A NULL DELIMITER ?
         BE    CHKTOKEN                   YES - THEN VALIDATE THE TOKEN
         CLI   HAVSYNPM,C'Y'           HAVE A SYSIN PARAMETER IN HAND?
         BE    SYSINPLP                   YES - GET NEXT CHARACTER
         MVI   HAVSYNPM,C'Y'           I HAVE A SYSIN PARM IN HAND
         LR    R3,R2                  R3 POINTS TO START OF INPUT TOKEN
         B     SYSINPLP
CHKTOKEN DS    0H                     HAVE A DELIMITER CHARACTER
         CLI   HAVSYNPM,C'Y'
         BNE   SYSINPLP               I DO NOT HAVE A PARAMETER IN HAND
         LR    R4,R2
         LR    R1,R3
         SR    R4,R1                  GET LENGTH OF PARAMETER TOKEN
         ST    R4,SYSINTKL            STORE LENGTH OF PARAMETER TOKEN
         BCTR  R4,0                   SUBTRACT 1 FOR EX MOVE
         MVC   SYSINTOK,BLANKLIN
         EX    R4,MVTOKEN
         CLC   SYSINTKL,=A(9)         IS LENGTH OF PARM TOKEN < 9 ?
         BL    INVSYNPM                  YES TOKEN LENGTH ERROR LOW
         CLC   SYSINTKL,=A(14)        IS LENGTH OF PARM TOKEN < 14?
         BH    INVSYNPM                  YES TOKEN LENGTH ERROR HIGH
         CLC   0(8,R3),=CL8'ALLOCAT=' HAVE ALLOCATE ATTEMPTS PARM ?
         BE    HAVATTPM                  YES
         CLC   0(8,R3),=CL8'WAITINT=' HAVE WAIT INTERVAL PARM ?
         BE    HAVINTPM                  YES
         B     INVSYNPM               INVALID SYSIN PARAMETER ERROR
MVTOKEN  DS    0H
         MVC   SYSINTOK(0),0(R3)
INVSYNPM DS    0H
         PUT   SYSPRINT,BLANKLIN             OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVSNPMA),INVSNPMA  FORMAT ERROR MESSAGE
         MVC   MSGAREA+48(L'SYSINTOK),SYSINTOK  LOAD SYSIN TOKEN
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVSNPMB),INVSNPMB  FORMAT ERROR MESSAGE
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         B     SYSINPLP                      GO GET NEXT PARM
***********************************************************************
*    HAVE A "ALLOCAT=" (# OF DYNALC ATTEMPTS) SYSIN PARAMETER
***********************************************************************
HAVATTPM DS    0H
         MVI   HAVSYNPM,C'N'                 INITIALIZE FOR NEXT PARM
         MVC   HOLDATT,INITATT               INITIALIZE LEADING ZEROS
         LA    R7,8(,R3)                     R7 IS START OF PARM ADDR
         L     R1,SYSINTKL                   GET TOKEN LENGTH OF PARM
         SH    R1,=H'8'                      R1 HAS LENGTH OF PARM
         LR    R8,R7
         AR    R8,R1                         R8 IS END OF PARM ADDR
         LA    R4,HOLDATT                    POINT TO TARGET FIELD
         LA    R3,ALCATTDL                   GET LENGTH OF TARGET FLD
         SR    R3,R1
         AR    R4,R3                         POINT TARGET CHAR TO START
***********************************************************************
*    EDIT THE "ALLOCAT=" PARAMETER FOR NUMERIC DIGITS
*    OVERRIDE THE "ACLATTDS" PROGRAM DEFAULT VALUE
***********************************************************************
HAVATT1  DS    0H
         BAS   R14,NUMEDIT                   BRANCH TO NUMERIC EDIT
         MVC   0(1,R4),0(R7)                 MOVE 1 BYTE AT A TIME
         LA    R4,1(,R4)                      FOR LENGTH OF PARM
         LA    R7,1(,R7)                     POINT TO NEXT CHARACTER
         CR    R7,R8                         FINISHED LOADING TARGET?
         BL    HAVATT1                         NO - MOVE NEXT CHAR
         MVC   ALCATTDS,HOLDATT               YES - OVERRIDE THE PARM
         B     SYSINPLP                      GO GET NEXT PARM
***********************************************************************
*    HAVE A "WAITINT=" (WAIT INVERVAL IN SECONDS) SYSIN PARAMETER
***********************************************************************
HAVINTPM DS    0H
         MVI   HAVSYNPM,C'N'                 INITIALIZE FOR NEXT PARM
         MVC   HOLDINT,INITINT               INITIALIZE LEADING ZEROS
         LA    R7,8(,R3)                     R7 IS START OF PARM ADDR
         L     R1,SYSINTKL                   GET TOKEN LENGTH OF PARM
         SH    R1,=H'8'                      R1 HAS LENGTH OF PARM
         LR    R8,R7
         AR    R8,R1                         R8 IS END OF PARM ADDR
         LA    R4,HOLDINT                    POINT TO TARGET FIELD
         LA    R3,ALCATTDL                   GET LENGTH OF TARGET FLD
         SR    R3,R1
         AR    R4,R3                         POINT TARGET CHAR TO START
***********************************************************************
*    EDIT THE "WAITINT=" PARAMETER FOR NUMERIC DIGITS
*    OVERRIDE THE "ACLINTDS" PROGRAM DEFAULT VALUE
***********************************************************************
HAVINT1  DS    0H
         BAS   R14,NUMEDIT                   BRANCH TO NUMERIC EDIT
         MVC   0(1,R4),0(R7)                 MOVE 1 BYTE AT A TIME
         LA    R4,1(,R4)                      FOR LENGTH OF PARM
         LA    R7,1(,R7)                     POINT TO NEXT CHARACTER
         CR    R7,R8                         FINISHED LOADING TARGET?
         BL    HAVINT1                         NO - MOVE NEXT CHAR
         MVC   ALCINTDS,HOLDINT               YES - OVERRIDE THE PARM
         B     SYSINPLP                      GO GET NEXT PARM
***********************************************************************
*    NUMERIC EDIT UPON EBCDIC WHOLE NUMBER PARAMETER
***********************************************************************
NUMEDIT  DS    0H
         CLC   =CL1'0',0(R7)                 PASS LOW NUMERIC CHECK ?
         BH    INVSYNPM                        NO - INVALID NUMERIC
         CLC   =CL1'9',0(R7)                 PASS HIGH NUMERIC CHECK ?
         BL    INVSYNPM                        NO - INVALID NUMERIC
         BR    R14                           RETURN FROM BAS
ENDSYSIN DS    0H
         LA    R3,SYSIN                      DCB TO CLOSE
         LA    R4,WKOPENCL                   OPEN/CLOSE WORK AREA
         CLOSE ((R3)),MODE=31,MF=(E,(R4))    CLOSE SYSIN DCB
***********************************************************************
*  OBTAIN THE SYSUT1 DATASET NAME FOR DISPLAY USING THE RDJFCB MACRO
***********************************************************************
READJFCB DS    0H
         LA    R3,SYSUT1                     ADDR OF SYSUT1 DCB
         LA    R5,SYSUT2                     ADDR OF SYSUT2 DCB
INFILE   USING IHADCB,R3                     MAP SYSUT1 DCB (INFILE)
OUTFILE  USING IHADCB,R5                     MAP SYSUT2 DCB (OUTFILE)
*
         XC    JFCBARB(JFCBLGTH),JFCBARB     INIT JFCB WORK AREA BUFFER
*
         RDJFCB ((R3)),MF=(E,WKRDJFCB)       READ JFCB FOR SYSUT1
*
         LTR   R15,R15                       GOOD JFCB READ ?
         BZ    ENDJFCB1                        YES - HAVE SYSUT1 DSNAME
*
         CVD   R15,DOUBLE                 CONVERT RC TO PACKED DECIMAL4
         UNPK  UNPACK15(15),DOUBLE(8)     UNPACK IT
         OI    UNPACK15+14,X'F0'       CHANGE SIGN TO ABSOLUTE POSITIVE
         MVC   DISPRC,UNPACK15+11      MOVE TO RETURN CODE DECIMAL DISP
*
         PUT   SYSPRINT,BLANKLIN             OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'JFCBRDER),JFCBRDER  FORMAT ERROR MESSAGE
         MVC   MSGAREA+46(L'DDSYSUT1),DDSYSUT1   DDNAME
         MVC   MSGAREA+73(L'DISPRC),DISPRC       RETURN CODE
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         LA    R6,12
         B     ENDDATA
ENDJFCB1 DS    0H
         MVC   SYSUT1DS,JFCBDSNM      SAVE SYSUT1 DATASET NAME
**********************************************************************
* FIND THE STATUS DISPOSITION IN THE DISPOSTITION TABLE TO OBTAIN
*    THE TEXT UNIT KEY VALUE FOR THE DAIR STATUS (DISPOSITION).
**********************************************************************
         LA    R2,DISPTBLE            PREPARE FOR DISP TABLE SEARCH
LOOPDISP DS    0H
         CLI   0(R2),X'FF'            HIT END OF DISPOSITION TABLE ?
         BE    DISPERR                  YES - DISPOSITION NOT FOUND
         CLC   0(3,R2),ALOCDISP       DISPOSITION FOUND IN TABLE ?
         BE    DAIRPRMS                 YES - DISPLAY PARMS
         LA    R2,4(,R2)              GET NEXT DISPOSITION ENTRY
         B     LOOPDISP
DISPERR  DS    0H
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVLINKA),INVLINKA   FORMAT ERROR MSG
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVLINKB),INVLINKB   FORMAT ERROR MSG
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVDISPA),INVDISPA   FORMAT ERROR MSG
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVDISPB),INVDISPB   FORMAT ERROR MSG
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVDISPC),INVDISPC   FORMAT ERROR MSG
         MVC   MSGAREA+36(L'ALOCDISP),ALOCDISP
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         LA    R6,12
         B     ENDDATA
DAIRPRMS DS    0H                     LOAD DAIR PARM VALUES
         MVC   DAIRDDN,ALOCDDNM       LOAD DDNAME TEXT UNIT VALUE
         MVC   DAIRDSN,ALOCDSN        LOAD DSNAME TEXT UNIT VALUE
         MVC   DAIRSTAT,3(R2)         LOAD STATUS TEXT UNIT VALUE
*
DISPDSNS DS    0H
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'SYSUT1MS),SYSUT1MS    FORMAT DISPLAY MSG
         MVC   MSGAREA+38(L'SYSUT1DS),SYSUT1DS
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'SYSUT2MS),SYSUT2MS   FORMAT DISPLAY MSG
         MVC   MSGAREA+38(L'SYSUT2DS),SYSUT2DS
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
*
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DYNALPMA),DYNALPMA   FORMAT DISPLAY MSG
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DYNALPMB),DYNALPMB   FORMAT DISPLAY MSG
         MVC   MSGAREA+62(L'ALOCDISP),ALOCDISP
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DYNALATT),DYNALATT   FORMAT DISPLAY MSG
         MVC   MSGAREA+62(L'ALCATTDS),ALCATTDS
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DYNALINT),DYNALINT   FORMAT DISPLAY MSG
         MVC   MSGAREA+62(L'ALCINTDS),ALCINTDS
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
*
CNVTPRMS DS    0H
         PACK  DOUBLE,ALCINTDS        CONVERT ZONED DECIMAL TO BINARY
         CVB   R1,DOUBLE              CONVERT TO BINARY
         MH    R1,=H'100'             MULTIPLY BY 100 FOR HUNDS OF SECS
         ST    R1,ALOCWINT
         PACK  DOUBLE,ALCATTDS        CONVERT ZONED DECIMAL TO BINARY
         CVB   R8,DOUBLE              CONVERT TO BINARY
         ST    R8,ALOCATTS            R8 HAS # DYNALC ATTEMPTS
**********************************************************************
*    CALL DYNALLOC (SVC99) TO ALLOCATE DDNAME SYSUT2.
**********************************************************************
GOALLOC  DS    0H                     DYNAMIC ALLOCATION LOOP
         LA    R1,ALOPARM             ALLOCATION PARM LIST
*
         DYNALLOC ,                   ISSUE DYNAMIC ALLOCATION (SVC99)
*
         LTR   R15,15                 CHECK DYNAMIC ALLOCATION RC=0?
         BZ    READJFC2                 YES
*                                       NO
         CLC   S99ERROR,X0210         ALLOCATED TO ANOTHER TASK?
         BNE   DYNALERR                 NO  - DISPLAY ERROR CODES
*                                       YES - DSN IN USE - RETRY
         S     R8,F001                MINUS 1 FROM NUMBER OF ATTEMPTS
         CL    R8,F000                NUMBER OF ATTEMPTS = ZERO?
         BNH   TIMEOUT                  YES - EXHAUSTED WAIT ATTEMPTS
*
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DSNINUSE),DSNINUSE   FORMAT IN-USE MSG
         MVC   MSGAREA+58(L'ALCINTDS),ALCINTDS
         PUT   SYSPRINT,MSGLINE               OUTPUT MSG
*
         STIMER WAIT,BINTVL=ALOCWINT , WAIT BINTVL HUNDRED SECONDS
*
         B     GOALLOC                TRY THE ALLOCATION AGAIN
**********************************************************************
* COULD NOT ALLOCATE THE IN-USE FILE AFTER MAXIMUM NUMBER OF ATTEMPTS.
**********************************************************************
TIMEOUT  DS    0H
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DSNINUSE),DSNINUSE   FORMAT IN-USE MSG
         MVC   MSGAREA+48(85),BLANKLIN        BLANK END OF MESSAGE
         PUT   SYSPRINT,MSGLINE               OUTPUT MSG
*
         PUT   SYSPRINT,BLANKLIN        TOO MANY IN-USE ATTEMPTS
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'WTTIMEOT),WTTIMEOT   FORMAT ERROR MSG
         MVC   MSGAREA+91(L'ALCATTDS),ALCATTDS
         PUT   SYSPRINT,MSGLINE            OUTPUT MSG
         LA    R6,12
         B     ENDDATA
DYNALERR DS    0H
**********************************************************************
*    DISPLAY RETURN/ERROR/REASON CODES
**********************************************************************
         STH   R15,ALCRETCD           OBTAIN SVC99 RETURN CODE
         UNPK  DOUBLE(5),ALCRETCD(3)  OBTAIN STATUS CODE (RETCD)
         MVZ   DOUBLE+2(2),HEX0F0F    TURN OFF ZONES
         TR    DOUBLE+2(2),HEXCHAR    TRANSLATE TO PRINTABLE
         MVC   ALCRETCD,DOUBLE+2      MOVE TO RETURN CODE HEX2
*
         CVD   R15,DOUBLE             CONVERT RETCD TO PACKED DECIMAL
         UNPK  UNPACK15(15),DOUBLE(8) UNPACK IT
         OI    UNPACK15+14,X'F0'      CHANGE SIGN TO ABSOLUTE POSITIVE
         MVC   ALCRETDC,UNPACK15+13   MOVE TO RETURN CODE DECIMAL2
*
         UNPK  DOUBLE(5),S99ERROR(3)  OBTAIN SVC99 ERROR CODE
         MVZ   DOUBLE(4),HEX0F0F      TURN OFF ZONES
         TR    DOUBLE(4),HEXCHAR      TRANSLATE TO PRINTABLE
         MVC   ALCERRCD,DOUBLE        MOVE TO ERROR CODE HEX4
*
         LH    R1,S99ERROR            OBTAIN SVC99 ERROR CODE
         CVD   R1,DOUBLE              CONVERT TO PACKED DECIMAL4
         UNPK  UNPACK15(15),DOUBLE(8) UNPACK IT
         OI    UNPACK15+14,X'F0'      CHANGE SIGN TO ABSOLUTE POSITIVE
         MVC   ALCERRDC,UNPACK15+11   MOVE TO ERROR CODE DECIMAL
*
         UNPK  DOUBLE(5),S99INFO(3)   OBTAIN SVC99 REASON CODE
         MVZ   DOUBLE(4),HEX0F0F      TURN OFF ZONES
         TR    DOUBLE(4),HEXCHAR      TRANSLATE TO PRINTABLE
         MVC   ALCRSNCD,DOUBLE        MOVE TO REASON CODE HEX4
*
         LH    R1,S99INFO             OBTAIN SVC99 REASON CODE
         CVD   R1,DOUBLE              CONVERT TO PACKED DECIMAL
         UNPK  UNPACK15(15),DOUBLE(8) UNPACK IT
         OI    UNPACK15+14,X'F0'      CHANGE SIGN TO ABSOLUTE POSITIVE
         MVC   ALCRSNDC,UNPACK15+11   MOVE TO REASON CODE DECIMAL4
*
         PUT   SYSPRINT,BLANKLIN      DISPLAY RETURN/ERROR CODES
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'DYNALCFL),DYNALCFL      FORMAT ERROR MSG
         MVC   MSGAREA+52(L'ALCRETCD),ALCRETCD   FORMAT RETURN CODE
         MVC   MSGAREA+56(L'ALCRETDC),ALCRETDC   FORMAT RETURN CODE
         MVC   MSGAREA+73(L'ALCERRCD),ALCERRCD   FORMAT ERROR  CODE
         MVC   MSGAREA+79(L'ALCERRDC),ALCERRDC   FORMAT ERROR  CODE
         MVC   MSGAREA+99(L'ALCRSNCD),ALCRSNCD   FORMAT REASON CODE
         MVC   MSGAREA+105(L'ALCRSNDC),ALCRSNDC  FORMAT REASON CODE
         PUT   SYSPRINT,MSGLINE                  OUTPUT MSG
         PUT   SYSPRINT,BLANKLIN
         LA    R6,12
         B     ENDDATA
READJFC2 DS    0H
***********************************************************************
*  OBTAIN THE SYSUT2 DCB INFORMATION USING THE RDJFCB MACRO
*  OBTAIN THE DSORG, RECFM, AND LRECL FOR SYSUT2 PRIOR TO THE
*  OPEN FOR FILE SYSUT2.
***********************************************************************
*
         XC    JFCBARB(JFCBLGTH),JFCBARB     INIT JFCB WORK AREA BUFFER
*
         RDJFCB ((R5)),MF=(E,WKRDJFCB)       READ JFCB FOR SYSUT2
*
         LTR   R15,R15                       GOOD JFCB READ ?
         BZ    ENDJFCB2                        YES - HAVE SYSUT1 DSNAME
*
         CVD   R15,DOUBLE                 CONVERT RC TO PACKED DECIMAL4
         UNPK  UNPACK15(15),DOUBLE(8)     UNPACK IT
         OI    UNPACK15+14,X'F0'       CHANGE SIGN TO ABSOLUTE POSITIVE
         MVC   DISPRC,UNPACK15+11      MOVE TO RETURN CODE DECIMAL DISP
*
         PUT   SYSPRINT,BLANKLIN             OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'JFCBRDER),JFCBRDER  FORMAT ERROR MESSAGE
         MVC   MSGAREA+46(L'DDSYSUT2),DDSYSUT2   DDNAME
         MVC   MSGAREA+73(L'DISPRC),DISPRC       RETURN CODE
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         LA    R6,12
         B     ENDDATA
ENDJFCB2 DS    0H
         MVC   S2DSORG,JFCDSORG              SAVE SYSUT2 JFCB DSORG
         MVC   S2RECFM,JFCRECFM              SAVE SYSUT2 JFCB RECFM
         MVC   S2LRECL,JFCLRECL              SAVE SYSUT2 JFCB LRECL
OPENSYS1 DS    0H
***********************************************************************
*    OPEN THE SYSUT1 (INFILE) DCB
***********************************************************************
         LA    R4,WKOPENCL                        OPEN/CLOSE WORK AREA
         OPEN  ((R3),INPUT),MODE=31,MF=(E,(R4))   OPEN SYSUT1 INPUT
         TM    SYSUT1+DCBOFLGS-IHADCB,DCBOFOPN    SYSUT1 FILE OPEN OK ?
         BNO   BADSYS1A                            NO - BAD SYSUT1 OPEN
         LA    R2,DCBEUT1                  ADDR OF SYSUT1 DCBE (INFILE)
         TM    DCBEFLG1-DCBE(R2),DCBEMD31      IS DCBE 31 Bit Mode on ?
         BNO   BADSYS1A               31 BIT MODE DCBE IS NOT SUPPORTED
         TM    DCBEFLG1-DCBE(R2),DCBEOPEN   WAS SYSUT1 DCBE OPENED OK ?
         BO    GOODSYS1                       YES
BADSYS1A DS    0H                         NO - DCB ERROR ON SYSUT1 OPEN
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVOPSY1),INVOPSY1  FORMAT ERROR MESSAGE
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         LA    R6,12
         B     ENDDATA
GOODSYS1 DS    0H
*********************************************************************
* OBTAIN THE MAXIMUM ALLOWABLE BLKSIZE FOR SYSUT2'S DEVICE TYPE
* USING THE DEVTYPE MACRO.
* (See IBM DFSMSdfp Advanced Services Manual SC26-7400-07)
*********************************************************************
         MVI   DEVAREA,C' '
         MVC   DEVAREA+1(DEVTDL-1),DEVAREA
         MVC   DEVTYPDD,DDSYSUT2           LOAD DDNAME FOR DEVTYPE
         MVC   DEVTYP(DEVTYPEL),DEVTYPEI   RELOCATE DEVTYPE MACRO PL
         DEVTYPE DEVTYPDD,(DEVAREA,DEVTDL),MF=(E,DEVTYP)
         LTR   R15,R15                      CALL OK ?
         BNZ   MAPDCBS                       - NO - GO ON ANYWAY
         LA    R8,DEVAREA
         USING DVAAMCAP,R8                 MAP DEVAREA FOR INFO=AMCAP
*********************************************************************
* IS SYSUT1 BLKSIZE GREATER THAN MAX. ALLOWABLE BLKSIZE FOR SYSUT2 ?
* IF SO, ERROR.  CANNOT LOWER THE BLKSIZE ON THE COPY TO SYSUT2.
* MAXIMUM ALLOWABLE BLKSIZE IS +8 OFF DEVTYPE RETURN WORK AREA FOR
* 8 BYTES.
*********************************************************************
         LA    R2,DCBEUT1
         LA    R2,DCBEBLKSI8-DCBE(,R2)       POINT TO SYSUT1 BLKSIZE
         CLC   0(8,R2),DVAMAXBLK COMPARE SYSUT1 BLKSZ TO MAX ALLOWABLE
         BNH   MAPDCBS                  BLKSIZE IS WITHIN DEVICE LIMIT
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVBLS1A),INVBLS1A  FORMAT ERROR MESSAGE
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         MVC   DOUBLE(8),0(R2)  PREPARE TO CONVERT BLKSIZE TO DECIMAL
         BAS   R14,CVTODISP               BRANCH TO CONVERT TO DECIMAL
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVBLS1B),INVBLS1B  FORMAT ERROR MESSAGE
         MVC   MSGAREA+54(L'DISPLY16),DISPLY16
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         MVC   DOUBLE(8),DVAMAXBLK PREPARE TO CONVERT MAX ALLOW TO DEC
         BAS   R14,CVTODISP               BRANCH TO CONVERT TO DECIMAL
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVBLS1C),INVBLS1C  FORMAT ERROR MESSAGE
         MVC   MSGAREA+54(L'DISPLY16),DISPLY16
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         LA    R6,12
         B     ENDDATA
         DROP  R8
CVTODISP DS    0H
         SAM64                  SWITCH TO 64 BIT MODE
         LG    R1,DOUBLE        LOAD DOUBLE WORD
         CVDG  R1,QUADWORD      CONVERT 64 BIT WORD TO DECIMAL
         SAM31                  SWITCH BACK TO 31 BIT MODE
         UNPK  UNPACK15(15),QUADWORD+8(8)  UNPACK 8 BYTES
         OI    UNPACK15+14,X'F0'           FIX SIGN
         MVC   DISPLY16+1(15),UNPACK15     MOVE LOW 15 DIGITS
         UNPK  UNPACK15(15),QUADWORD(8)    UNPACK 8 BYTES
         OI    UNPACK15+14,X'F0'           FIX SIGN
         MVC   DISPLY16(1),UNPACK15+14     PICK UP HIGH DIGIT
         BR    R14                         RETURN FROM BAS
*
MAPDCBS  DS    0H                    MAP SYSUT2 DCB FROM SYSUT1 DCB
         CLC   S2DSORG,=AL2(0)       SYSUT2 JFCB DSORG PRESENT ?
         BNE   MAPRECFM                  YES
         MVC   OUTFILE.DCBDSORG,INFILE.DCBDSORG  MAP DSORG SYSUT1=>2
MAPRECFM DS    0H
         CLC   S2RECFM,=AL1(0)       SYSUT2 JFCB RECFM PRESENT ?
         BNE   MAPLRECL                  YES
         MVC   OUTFILE.DCBRECFM,INFILE.DCBRECFM  MAP RECFM SYSUT1=>2
MAPLRECL DS    0H
         CLC   S2LRECL,=AL2(0)       SYSUT2 JFCB LRECL PRESENT ?
         BNE   ENDMAPDC                  YES
         MVC   OUTFILE.DCBLRECL,INFILE.DCBLRECL  MAP LRECL SYSUT1=>2
ENDMAPDC DS    0H
***********************************************************************
* Your DCB OPEN exit can test bit DCBESLBI to learn if the access
* method supports LBI. If your program did not request unlike
* attributes processing (by turning on bit DCBOFPPC) before
* issuing OPEN, then DCBESLBI being on means that all the data
* sets in the concatenation support LBI . If your program
* requested unlike attributes processing before OPEN, then
* DCBESLBI being on each time that the system calls your DCB OPEN
* exit or JFCBE exit means only that the next data set supports
* LBI. After the exit, OPEN leaves DCBESLBI on ONLY if DCBEULBI
* also is on.  Your exit routine can change DCBEULBI.
* Never change DCBESLBI.
***********************************************************************
         LA    R2,DCBEUT1            ADDR OF SYSUT1 DCBE (INFILE)
         LA    R4,DCBEUT2            ADDR OF SYSUT2 DCBE (OUTFILE)
         TM    DCBEFLG1-DCBE(R2),DCBESLBI   IS SAM LBI SUPPORTED?
         BNO   CHKDSORG                        NO - SAM LBI IS NOT ON
***********************************************************************
* DON'T MAP (OVERRIDE) THE BLKSIZE.  LEAVE COMMENTED OUT UNLESS YOU
* WANT TO IMPOSE THE BLKSIZE VALUE FROM SYSUT1 UPON SYSUT2.
***********************************************************************
****     MVC   DCBEBLKSI8-DCBE(8,R4),DCBEBLKSI8-DCBE(R2)   MAP BLKSIZE
CHKDSORG DS    0H
         CLI   INFILE.DCBDSRG1,DCBDSGPS           IS DSORG = 'PS' ?
         BE    OPENSYS2                              YES
         MVC   DSORGSAV,INFILE.DCBDSORG    SAVE DSORG VALUE FOR DISPLAY
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVDSORA),INVDSORA  FORMAT ERROR MESSAGE
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVDSORB),INVDSORB  FORMAT ERROR MESSAGE
         MVC   MSGAREA+28(L'DCBDSORG),INFILE.DCBDSORG
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         LA    R6,12
         B     ENDDATA
OPENSYS2 DS    0H
         TM    DCBEFLG1-DCBE(R2),DCBESLBI   IS SAM LBI SUPPORTED/UESED?
         BNO   OSYSUT2                         NO - SAM LBI IS NOT ON
         LA    R1,DCBEUT2                 ADDR OF SYSUT2 DCBE (OUTFILE)
         OI    DCBEFLG2-DCBE(R1),DCBEULBI   REQUEST SAM LBI FOR SYSUT2
***********************************************************************
*    OPEN THE SYSUT2 (OUTFILE) DCB
***********************************************************************
OSYSUT2  DS    0H
         LA    R4,WKOPENCL                OPEN/CLOSE WORK AREA
         OPEN  ((R5),OUTPUT),MODE=31,MF=(E,(R4)) OPEN SYSUT2 OUTPUT
         TM    SYSUT2+DCBOFLGS-IHADCB,DCBOFOPN   SYSUT2 FILE OPEN OK ?
         BNO   BADSYS2A                           NO - BAD SYSUT2 OPEN
         LA    R1,DCBEUT2                ADDR OF SYSUT2 DCBE (OUTFILE)
         TM    DCBEFLG1-DCBE(R1),DCBEOPEN    WAS DCBE OPENED OK ?
         BO    READLOOP                         YES - GOOD SYSUT2 OPEN
BADSYS2A DS    0H                                BAD SYSUT2 OPEN
         PUT   SYSPRINT,BLANKLIN           OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'INVOPSY2),INVOPSY2  FORMAT ERROR MESSAGE
         PUT   SYSPRINT,MSGLINE              OUTPUT MSG
         LA    R6,12
         B     ENDDATA
***********************************************************************
* READ/WRITE DATA LOOP UNTIL SYSUT1-EOF.
***********************************************************************
READLOOP DS    0H
         GET   SYSUT1,INPAREA                    READ INPUT SYSUT1 FILE
         CLI   INFILE.DCBRECFM,DCBRECU               IS RECFM = 'U' ?
         BNE   NOTRECFU                                 NO NOT RECFM=U
         MVC   OUTFILE.DCBLRECL,INFILE.DCBLRECL     REMAP FOR RECFM=U
NOTRECFU DS    0H
         PUT   SYSUT2,INPAREA        WRITE RECORD TO OUTPUT SYSUT2 FILE
         AP    RECCNT,=PL1'1'                  INCREMENT RECORD COUNTER
         B     READLOOP
*
***********************************************************************
*    END OF INPUT=>OUTPUT (SYSUT1=>SYSUT2) LOOP
***********************************************************************
ENDDATA  DS    0H
         TM    SYSUT1+DCBOFLGS-IHADCB,DCBOFOPN        SYSUT1 FILE OPEN?
         BNO   CLOSSYS2                                 NO - SKIP CLOSE
***********************************************************************
*    CLOSE THE SYSUT1 DCB
***********************************************************************
         LA    R4,WKOPENCL                         OPEN/CLOSE WORK AREA
         CLOSE ((R3)),MODE=31,MF=(E,(R4))          CLOSE SYSUT1 FILE
CLOSSYS2 DS    0H
         TM    SYSUT2+DCBOFLGS-IHADCB,DCBOFOPN     SYSUT2 FILE OPEN?
         BNO   CLOSSYSP                               NO - SKIP CLOSE
***********************************************************************
*    CLOSE THE SYSUT2 DCB (ALSO UNALLOCATES THE SYSUT2 FILE).
***********************************************************************
         LA    R4,WKOPENCL                         OPEN/CLOSE WORK AREA
         CLOSE ((R5)),MODE=31,MF=(E,(R4))          CLOSE SYSUT2 FILE
CLOSSYSP DS    0H
         LA    R2,SYSPRINT
         TM    SYSPRINT+DCBOFLGS-IHADCB,DCBOFOPN  SYSPRINT FILE OPEN?
         BNO   RETURN                                NO - SKIP SUMMARY
         UNPK  DISPCNT,RECCNT
         OI    DISPCNT+10,X'F0'
         PUT   SYSPRINT,BLANKLIN                   OUTPUT A BLANK LINE
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'SUMMARY),SUMMARY       FORMAT SUMMARY MESSAGE
         MVC   MSGAREA+62(L'DISPCNT),DISPCNT    RECORD COUNT
         PUT   SYSPRINT,MSGLINE                 OUTPUT MSG
         PUT   SYSPRINT,BLANKLIN                OUTPUT A BLANK LINE
*
         CVD   R6,DOUBLE              CONVERT RC TO PACKED DECIMAL4
         UNPK  UNPACK15(15),DOUBLE(8) UNPACK IT
         OI    UNPACK15+14,X'F0'      CHANGE SIGN TO ABSOLUTE POSITIVE
         MVC   DISPRC,UNPACK15+11     MOVE TO RETURN CODE DECIMAL DISP
         MVC   MSGLINE,BLANKLIN
         MVC   MSGAREA(L'SUMMRC),SUMMRC         FORMAT RETCODE MESSAGE
         MVC   MSGAREA+26(L'DISPRC),DISPRC      DYBACKUP RETURN CODE
         PUT   SYSPRINT,MSGLINE                 OUTPUT MSG
         PUT   SYSPRINT,BLANKLIN                OUTPUT A BLANK LINE
***********************************************************************
*    CLOSE THE SYSPRINT DCB
***********************************************************************
         L     R2,SYSPRINT
         LA    R4,WKOPENCL                      OPEN/CLOSE WORK AREA
         CLOSE ((R2)),MODE=31,MF=(E,(R4))       CLOSE SYSPRINT FILE
RETURN   DS    0H
         DROP  INFILE,OUTFILE
         LR    R2,R10                        POINTER TO STORAGE AREA
         L     R4,=A(WKAREAL2)               SIZE OF STORAGE OBTAINED
         STORAGE RELEASE,LENGTH=(R4),ADDR=(R2)
         LR    R2,R13                        POINTER TO STORAGE AREA
         L     R4,=A(WKAREAL)                SIZE OF STORAGE OBTAINED
         L     R13,4(,R13)          RESTORE CALLER'S SAVEAREA ADDRESS
         STORAGE RELEASE,LENGTH=(R4),ADDR=(R2)
         L     R14,12(,R13)                  RESTORE R14
         LR    R15,R6                        LOAD RETURN CODE
         LM    R0,R12,20(R13)                RESTORE CALLER'S REGISTERS
         BSM   0,R14                         RETURN TO PROGRAM CALLER
*
**********************************************************************
*  STATIC STORAGE FOLLOWS
**********************************************************************
*  MACROS AND PARAMETER LISTS TO RELOCATE
**********************************************************************
OPENI     OPEN  (0,OUTPUT),MODE=31,MF=L
OPENIL    EQU   *-OPENI
*
WTOI      DS    0F
          WTO   '                                                      +
                                                                       +
                               ',MF=L,ROUTCDE=(11)
WTOIL     EQU   *-WTOI
*
BLANKLIN  DC    CL133' '
DDSYSIN   DC    CL8'SYSIN   '         SYSIN  DDNAME
DDSYSUT1  DC    CL8'SYSUT1  '         INPUT  DDNAME
DDSYSUT2  DC    CL8'SYSUT2  '         OUTPUT DDNAME (DYNAMIC ALLOCATED)
*
**********************************************************************
*  MESSAGE LITERALS
**********************************************************************
DISPEXPM  DC   C'DYBACKUP - EXECUTION PARM =>                          +
                                                                       +
                                               '
INVLINKA  DC   C'DYBACKUP - INVALID EXECUTION PARM PASSED TO DYBACKUP P+
               ROGRAM !'
INVLINKB  DC   C'DYBACKUP - EXECUTION PARMAMETER LIST SHOULD BE: DISPOS+
               ITION (1:3) DATASET NAME (4:47)'
INVOPSYS  DC   C'DYBACKUP - ERROR OPENING THE SYSPRINT FILE !!!       '
DISPSNPM  DC   C'DYBACKUP - SYSIN RECORD   =>                          +
                                                                       +
                              '
INVSNPMA  DC   C'DYBACKUP - SYSIN PARMAMETER INPUT IS INVALID => XXXXXX+
               XXXXXXXXXXXXXXXXXXXXXXXX - USING PROGRAM DEFAULT.'
INVSNPMB  DC   C'DYBACKUP - SYSIN PARMAMETERS SHOULD EITHER BE "ALLOCAT+
               =NNNNNN" OR "WAITINT=NNNNNN" WHERE NNNNNN IS 1 TO 6 NUME+
               RIC DIGITS IN LENGTH'
INVDISPA  DC   C'DYBACKUP - INVALID DISPOSTION (STATUS) PARAMETER PASSE+
               D AS EXECUTE PARAMETER FOR SYSUT2 ALLOCATION'
INVDISPB  DC   C'DYBACKUP -   VALID VALUES ARE "MOD", "OLD", AND "SHR"'
INVDISPC  DC   C'DYBACKUP -   DISPOSITION PASSED => ''   ''           '
DSNINUSE  DC   C'DYBACKUP - DATASET IS ALLOCATED TO ANOTHER TASK - WAIT+
               ING XXXXXX SECONDS AND WILL RETRY DYNAMIC ALLOCATION.'
WTTIMEOT  DC   C'DYBACKUP - EXHAUSTED THE NUMBER OF ATTEMPTS TO DYNAMIC+
               ALLY ALLOCATE THIS DATASET. LIMIT IS XXXXXX ATTEMPTS.'
DYNALPMA  DC   C'DYBACKUP - SYSUT2 (OUTPUT) DATASET WILL BE DYNAMICALLY+
                ALLOCATED'
DYNALPMB  DC   C'DYNINPUT - DYNAMIC ALLOCATION DISPOSITION FOR SYSUT2  +
                    => XXX      '
DYNALATT  DC   C'DYNINPUT - MAXIMUM NUMBER OF DYNAMIC ALLOCATION ATTEMP+
               TS   => XXXXXX   '
DYNALINT  DC   C'DYNINPUT - NBR OF SECONDS TO WAIT BETWEEN DYNALOC ATTE+
               MPTS => XXXXXX   '
SYSUT1MS  DC   C'DYBACKUP - SYSUT1 (INPUT)  DATASET =>                 +
                                            '
SYSUT2MS  DC   C'DYBACKUP - SYSUT2 (OUTPUT) DATASET =>                 +
                                            '
DYNALCFL  DC   C'DYNALLOC - DYNAMIC ALLOCATION FAILED. RETURN CODE = XX+
                (XX) ERROR CODE = XXXX (XXXX) REASON CODE = XXXX (XXXX)+
                '
JFCBRDER  DC   C'DYBACKUP - ERROR READING THE JFCB FOR DDNAME "XXXXXXXX+
               ". RDJFCB RETCD => XXXX  '
INVLBIMG  DC   C'DYBACKUP - SAM LBI (LARGE BLKSIZE INTERFACE) IS NOT SU+
               PPORTED !!!'
INVBLS1A  DC   C'DYBACKUP - SYSUT1 BLKSIZE IS TOO LARGE - EXCEEDS MAXIM+
               UM ALLOWABLE BLKSIZE FOR COPYING DATA TO SYSUT2'
INVBLS1B  DC   C'DYBACKUP - SYSUT1 (INPUT) BLKSIZE IS ===============> +
               XXXXXXXXXXXXXXXX'
INVBLS1C  DC   C'DYBACKUP - MAXIMUM ALLOWABLE BLKSIZE FOR OUTPUT IS => +
               XXXXXXXXXXXXXXXX'
INVOPSY1  DC   C'DYBACKUP - ERROR OPENING THE SYSUT1 (INPUT) FILE !!! '
INVOPSY2  DC   C'DYBACKUP - ERROR OPENING THE SYSUT2 (OUTPUT) FILE !!!'
INVDSORA  DC   C'DYBACKUP - INVALID DSORG FOR SYSUT1 (INPUT) FILE !!! '
INVDSORB  DC   C'DYBACKUP -    DSORG IS => X''  ''                    '
SUMMARY   DC   C'DYNINPUT - NUMBER OF RECORDS COPIED FROM SYSUT1 TO SYS+
               UT2  =>                '
SUMMRC    DC   C'DYBACKUP - RETURN CODE =>                            '
*
**********************************************************************
*  LIST OF DCBS AND PARAMETER LISTS TO RELOCATE.
**********************************************************************
SYSINI   DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,EODAD=ENDSYSIN,        +
               LRECL=80,RECFM=FB
SYSINIL  EQU   *-SYSINI
*
SYSUT1I  DCB   DDNAME=SYSUT1,MACRF=(GM),DSORG=PS,EODAD=ENDDATA,        +
               EXLST=*,DCBE=*
SYSUT1IL EQU   *-SYSUT1I
*
SYS1LISI DS    0F
         DC    XL1'07'              JFCB EXIT
SYS1RJFC DC    AL3(0)               JFCB WORK AREA BUFFER ADDRESS
         DC    X'80'                END OF EXIT LIST
         DC    AL3(0)
SYS1LISL EQU   *-SYS1LISI
*
DCBEUT1I DCBE  BLKSIZE=0
DCBEUT1L EQU   *-DCBEUT1I
*
SYSUT2I  DCB   DDNAME=SYSUT2,MACRF=(PM),DSORG=PS,                      +
               EXLST=*,DCBE=*
SYSUT2IL EQU   *-SYSUT2I
*
SYS2LISI DS    0F
         DC    XL1'07'              JFCB EXIT
SYS2RJFC DC    AL3(0)               JFCB WORK AREA BUFFER ADDRESS
         DC    X'80'                END OF EXIT LIST
         DC    AL3(0)
SYS2LISL EQU   *-SYS2LISI
*
DCBEUT2I DCBE  BLKSIZE=0
DCBEUT2L EQU   *-DCBEUT2I
*
RDJFCBI  DS    0F
         RDJFCB *,MF=L              JFCB MACRO INIT AREA
RDJFCBIL EQU   *-RDJFCBI
*
EXTRACTI DS    0F
         EXTRACT MF=L               EXTRACT PARAMETER LIST
EXTRACTL EQU   *-EXTRACTI
*
DEVTYPEI DEVTYPE *,(0,0),INFOLIST=DEVLIST1,MF=L
DEVTYPEL EQU   *-DEVTYPEI
*
DEVLIST1 DEVTYPE INFO=AMCAP
DEVLISTL EQU   *-DEVLIST1
*
SYSPRINI DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,LRECL=133,RECFM=FB
SYSPRINL EQU  *-SYSPRINI
*
**********************************************************************
*  PARAMETERS FOR DYNAMIC ALLOCATION (SVC99).
**********************************************************************
DFLTATT  DC    ZL6'60'         DEFAULT MAXIMUM NUMBER OF TIMES TO WAIT
DFLTATTL EQU   *-DFLTATT
DFLTWINT DC    ZL6'10'                DEFAULT WAIT INTERVAL IN SECONDS
DFLTWINL EQU   *-DFLTWINT
X0210    DC    X'0210'                DYNALC ERROR CODE X'0210'
HEX0F0F  DC    16X'0F'
HEXCHAR  DC    C'0123456789ABCDEF'
F000     DC    F'0'
F001     DC    F'1'
INITATT  DC    ZL(DFLTATTL)'0'
INITINT  DC    ZL(DFLTWINL)'0'
DISPTBLE DS    0C                     DISPOSITION (STATUS) TABLE
         DC    C'SHR',X'08'
         DC    C'MOD',X'02'
         DC    C'OLD',X'01'
         DC    X'FF'                  END OF DISPOSITION TABLE
*
IAIRDDNP DC    AL2(0),AL2(1),AL2(8)   DAIR TEXT UNIT DDNAME POINTER
IAIRDDNL EQU   *-IAIRDDNP
IAIRDSNP DC    AL2(0),AL2(1),AL2(44)  DAIR TEXT UNIT DSNAME POINTER
IAIRDSNL EQU   *-IAIRDSNP
IAIRSTAP DC    AL2(0),AL2(1),AL2(1)   DAIR TEXT UNIT STATUS POINTER
IAIRSTAL EQU   *-IAIRSTAP
IAIRCLOS DC    AL2(0),AL2(0)          DAIR TEXT UNIT UNALC ON CLOSE
IAIRCLOL EQU   *-IAIRCLOS
*
         LTORG
*
**********************************************************************
*    DYNAMIC STORAGE FOLLOWS (ACQUIRED STORAGE AREA)
**********************************************************************
WKAREA      DSECT ,                   REENTRANT STORAGE
WKSAVE      DS    20F                 SAVEAREA
PARMADDR    DS    F                   SAVE EXECUTION PARM ADDRESS
JUL2GENT    DS    F                   JUL2GREG ENTRY POINT ADDRESS
JUL2GRPL    DS    D                   JUL2GREG PARMLIST
LL          DS    H                   LINKAGE PARM LENGTH
HOLDATT     DS    CL(DFLTATTL)        HOLD ALLOCAT= PARM FOR EDITTING
HOLDINT     DS    CL(DFLTWINL)        HOLD WAITINT= PARM FOR EDITTING
DOUBLE      DS    D                   DOUBLE WORD WORK AREA
QUADWORD    DS    2D                  QAUD WORD WORK AREA
UNPACK15    DS    XL15                QUAD UNPACK WORK FIELD
DISPLY16    DS    CL16                DISPLAY BLOCKSIZE IN EBCDIC
DSORGSAV    DS    XL2                 DISPLAY INVALID DSORG VALUE
*
SYSUT1DS    DS    CL44                SYSUT1 JFCB DATASET NAME
SYSUT2DS    DS    CL44                SYSUT2 JFCB DATASET NAME
*
S2DSORG     DS    XL2                 SYSUT2 JFCB DSORG BEFORE OPEN
S2RECFM     DS    XL1                 SYSUT2 JFCB RECFM BEFORE OPEN
S2LRECL     DS    H                   SYSUT2 JFCB LRECL BEFORE OPEN
*
**********************************************************************
* BASE SYSTEM RETURNED DATE AND TIME
**********************************************************************
            DS    0F
CURRTIME    DS    F               CURRENT TIME OF DAY HHMMSSHH (BINARY)
CURRDATE    DS    PL4                 CURRENT JULIAN DATE
*
DISPTIME    DS    0F                  CURRENT TIME IN DISPLAY FORMAT
DISPTMHH    DS    CL2                 HOURS
DISPTMC1    DS    CL1                 COLON
DISPTMMM    DS    CL2                 MINUTES
DISPTMC2    DS    CL1                 COLON
DISPTMSS    DS    CL2                 SECONDS
DISPTIML    EQU   *-DISPTIME          LENGTH OF DISPTIME
*
TIMEXXXX    DS    CL8                 CURRENT TIME HH:MM:SS
*
STORTIME    DS    F                   USED TO CONVERT TO PACKED DECIMAL
STORTMSG    DS    XL1                 SIGN FOR PACKED DECIMAL
TIME9       DS    CL9                 STORE PACKED-TO-ZONE CONVERSION
*
JULIANDT    DS    0F                  7 DIGIT JULIAN DATE
JULCENTY    DS    CL2                 JULIAN DATE'S CENTURY
JULIANYR    DS    CL2                 JULIAN DATE'S YEAR
JULDAYS     DS    CL3                 JULIAN DATE'S DAYS
JULDATEL    EQU   *-JULIANDT          LENGTH OF JULIANDT
*
GREGDATE    DS    0CL8                GREGORIAN DATE (YYYYMMDD)
GREGDTYR    DS    CL4                 GREGORIAN YEAR
GREGDTMO    DS    CL2                 GREGORIAN MONTH
GREGDTDY    DS    CL2                 GREGORIAN DAY
GREGDATL    EQU   *-GREGDATE
*
EXECWTO     DS    0F,CL(WTOIL)        WTO MESSAGE WORK AREA
WKOPENCL    DS    0F,CL(OPENIL)       OPEN/CLOSE WORK AREA
WKRDJFCB    DS    0F,CL(RDJFCBIL)     RDJFCB MACRO RELOCATE AREA
*
SYSIN       DS    0F,CL(SYSINIL)      SYSIN    DCB AREA
SYSUT1      DS    0F,CL(SYSUT1IL)     SYSUT1   DCB AREA
SYSUT2      DS    0F,CL(SYSUT2IL)     SYSUT2   DCB AREA
DCBEUT1     DS    0F,CL(DCBEUT1L)     DCBE     FOR SYSUT1
DCBEUT2     DS    0F,CL(DCBEUT2L)     DCBE     FOR SYSUT2
SYS1LIST    DS    0F,CL(SYS1LISL)     SYSUT1 EXIT LIST
SYS2LIST    DS    0F,CL(SYS2LISL)     SYSUT2 EXIT LIST
SYSPRINT    DS    0F,CL(SYSPRINL)     SYSPRINT DCB AREA
*
JFCBARB     DS    CL(JFCBLGTH)        RDJFCB WORK AREA BUFFER
            ORG   JFCBARB
            IEFJFCBN LIST=YES         MAP RDJFCB WORK AREA
*
DEVTYPDD    DS    CL8
DEVTYP      DS    0F,CL(DEVTYPEL)     DEVTYPE RELOCATION
DEVAREA     DS    0F,CL(DEVTDL)       DEVTYPE WORK RETURN AREA
*
EXTRACTW    DS    0F,CL(EXTRACTL)     EXTRACT MACRO RELOCATE AREA
TIOTADDR    DS    A                   ADDRESS OF TIOT
*
RECCNT      DS    PL6                 RECORDS COPIED
DISPCNT     DS    ZL11                DISPLAY ZONED VALUE COUNTS
DISPRC      DS    ZL4                 DISPLAY DYBACKUP RETURN CODE
*
MSGLINE     DS    0CL133
MSGCC       DS    CL1
            ORG   MSGLINE+L'MSGCC
MSGAREA     DS    CL132               FORMAT MSGS IN THIS AREA
*
HEADING1    DS    0CL132              PROGRAM DYBACKUP HEADING LINE
H1LIT1      DS    CL11
H1VERS      DS    CL9                 MAINTENANCE LEVEL VERS.REL.MOD
            DS    CL1
H1DATE      DS    CL10                CURRENT JULIAN DATE
            DS    CL1
H1TIME      DS    CL8                 CURRENT TIME
H1LIT2      DS    CL92
HEADING1L   EQU   *-HEADING1
*
SYSINREC    DS    80CL1               SYSIN RECORD INPUT
SYSINRCL    EQU   *-SYSINREC
*
HAVSYNPM    DS    CL1                 HAVE SYSIN PARM IN HAND FLAG
SYSINTOK    DS    CL30                SYSIN PARAMETER TOKEN
SYSINTKL    DS    F                   LENGTH OF SYSIN PARAMETER TOKEN
*
**********************************************************************
*  DYNAMIC ALLOCATION AND STIMER ATTEMPTS AND WAIT PARAMETERS.
**********************************************************************
ALCATTDS    DS    ZL6                 DYNALC WAIT INTERVAL IN SECONDS
ALCATTDL    EQU   *-ALCATTDS
ALCINTDS    DS    ZL6                 DYNALC ATTEMPTS FOR IN-USE FILE
ALCINTDL    EQU   *-ALCINTDS
ALOCWINT    DS    F                   WAIT INTERVAL (10 SECONDS=1000)
ALOCATTS    DS    F                   NUMBER OF ATTEMPTS FOR DYNALLOC
*
**********************************************************************
*  DYNAMIC ALLOCATION REQUEST PARMLIST.
**********************************************************************
            DS    0D
ALOPARM     DS    A                   ALLOCATE REQUEST BLOCK POINTER
ALORB       DS    XL(S99RBEND-S99RB)  ALLOCATION REQUEST BLOCK
ALORBL      EQU   *-ALORB
**********************************************************************
*  DYNAMIC ALLOCATION TEXT UNIT POINTERS
**********************************************************************
ALODD       DS    A                   DDNAME PARAMETER ADDRESS
ALODSN      DS    A                   DATA SET NAME PARAMETER ADDRESS
ALOSTAT     DS    A                   STATUS (DISP) PARAMETER ADDRESS
ALOCLOSE    DS    A                   UNALC UPON CLOSE PARM   ADDRESS
*
**********************************************************************
*  DYNAMIC ALLOCATION TEXT UNIT KEYS AND KEY PARMS.
**********************************************************************
DAIRDDNP    DS    0F,XL6              DAIR TEXT UNIT DDNAME POINTER
DAIRDDN     DS    CL8                 DDNAME TEXT UNIT KEY
*
DAIRDSNP    DS    0F,XL6              DAIR TEXT UNIT DSNAME POINTER
DAIRDSN     DS    CL44                DATASET NAME TEXT UNIT KEY
*
DAIRSTAP    DS    0F,XL6              DAIR TEXT UNIT STATUS POINTER
DAIRSTAT    DS    XL1                 STATUS (DISP) TEXT UNIT KEY
*
DAIRCLOS    DS    0F,XL4              DAIR TEXT UNIT UNALC ON CLOSE
*
**********************************************************************
*  DYNAMIC ALLOCATION PARM WORK FIELDS.
**********************************************************************
ALOCDDNM    DS    CL8                 DDNAME TO ALLOCATE
ALOCDSN     DS    CL44                DATA SET NAME TO ALLOCATE
ALOCDISP    DS    CL3                 STATUS (SHR, MOD, OR OLD)
*
**********************************************************************
*  DYNAMIC ALLOCATION RETURN CODE, ERROR CODE, REASON CODE.
*  FEEDBACK FROM DYNALLOC MACRO.
**********************************************************************
            DS    0D
ALCSTAT     DS    0CL20               SVC 99 STATUS RETURN AREA
ALCRETCD    DS    XL2                 SVC 99 RETURN CODE HEX (FROM R15)
ALCRETDC    DS    ZL2                 SVC 99 RETURN CODE DECIMAL
ALCERRCD    DS    XL4                 SVC 99 ERROR  CODE HEX
ALCERRDC    DS    ZL4                 SVC 99 ERROR  CODE DECIMAL
ALCRSNCD    DS    XL4                 SVC 99 REASON CODE HEX
ALCRSNDC    DS    ZL4                 SVC 99 REASON CODE DECIMAL
*
WKAREAL     EQU   *-WKAREA
*
**********************************************************************
*  SECOND ACQUIRED STORAGE AREA FOR SYSUT1 - SYSUT2 I/O.
**********************************************************************
WKAREA2     DS    0F
INPAREA     DS    (8*1024*1024)CL1    SYSUT1/SYSUT2 I/O AREA 8 MBs
WKAREAL2    EQU   *-WKAREA2
*
**********************************************************************
*    DSECTS
**********************************************************************
            YREGS    ,                REGISTER EQUATES
            DCBD  DSORG=PS,DEVD=DA ,  DATA CONTROL BLOCK DEFINITION
            IHADCBE  ,                DCBE MACRO DSECT
DEVTD       DSECT    ,                MAP DEVTYPE AREA FOR INFO=AMCAP
            IHADVA DSECT=NO,INFO=AMCAP ,
DEVTDL      EQU   *-DEVTD
TIOTD       DSECT    ,
            IEFTIOT1 ,                TASK INPUT/OUTPUT TABLE DSECT
            IEFZB4D0 ,
            IEFZB4D2 ,
            IEZWPL   ,                WTO PARAMETER LIST DSECT
            END
