       IDENTIFICATION DIVISION.
       PROGRAM-ID.    SYMBSUB.
       AUTHOR.        BILL BASS.
       DATE-WRITTEN.  OCT 2002.
       DATE-COMPILED.
      *****************************************************************
      * PURPOSE:
      *   THIS PROGRAM TAKES INPUT FILES OF 80 BYTE CARDS AND PERFORMS
      *   SYMBOLIC VARIABLE SUBSTITUTION ON THEM, THEN WRITES THE
      *   MODIFIED CARDS TO AN OUTPUT FILE
      *
      * INPUTS: (ONE OR MORE OF THE FOLLOWING)
      *   1) PARMS FOR SPECIFYING OR OVERRIDING PROGRAM DEFAULTS.
      *   2) DISCRETE CONTROL CARD FILES.
      *   3) CONTROL CARD LIBRARIES (CONCATENATION ALLOWED).
      *
      * OUTPUTS: (ONE OR MORE OF THE FOLLOWING)
      *   1) DISCRETE CONTROL CARD FILES.
      *   2) CONTROL CARD LIBRARY (CONCATENATION PROHIBITED).
      *
      * DEFAULT COLUMN BOUNDARIES ARE 1-72, I.E. DATA WILL ONLY BE
      * EXAMINED WITHIN THIS COLUMN RANGE.  ALL DATA OUTSIDE OF THIS
      * RANGE WILL BE WRITTEN OUT UNCHANGED.  COLUMN BOUNDS CAN BE
      * OVERRIDDEN BY USING PARM "$BOUNDS=L:R", WHERE L AND R ARE
      * THE COLUMN NUMBERS FOR THE LEFT AND RIGHT BOUNDS.  THE COLON
      * IS MANDATORY ON THE $BOUNDS PARM, BUT EITHER COLUMN NUMBER
      * MAY BE OMITTED TO RETAIN THE DEFAULT.  "$BOUNDS" MAY BE
      * ABBREVIATED AS "$BNDS" OR "$B".
      *
      * DATA IS SHIFTED BY THE SYMBOLIC SUBSTITUTION.  IF SHIFTING
      * PUSHES THE DATA PAST THE RIGHT BOUNDARY, TRUNCATION OCCURS
      * AND THE PROGRAM SETS THE RETURN CODE TO 8.
      *
      * SYMBOL VALUES ARE RETRIEVED FROM THE JCL.  THEY WILL HAVE
      * THE VALUES THAT ARE CURRENT FOR THE JOB STEP THAT THIS PROGRAM
      * IS RUNNING IN.  ADDITIONAL OR OVERRIDING SYMBOLIC VALUES MAY
      * ALSO BE PASSED ON THE EXEC PARM= STATEMENT:
      *     E.G. IF YOU CODE THE FOLLOWING IN THE JCL
      *         //      SET ENV=P
      *         //STEP1 EXEC PGM=SYMBSUB,PARM=('ENV=X')
      *
      *     THE PROGRAM WOULD THEN PERFORM THE FOLLOWING
      *     SUBSTITUTIONS IN THE CONTROL CARDS:
      *         &ENV OR &ENV. WOULD BE CHANGED TO "X" RATHER THAN "P"
      *****************************************************************
      * THE PROGRAM ACCEPTS MULTIPLE INPUT AND OUTPUT DD CARDS IN
      * SEVERAL DIFFERENT FORMATS TO SUPPORT DISCRETE CONTROL CARD
      * FILES OR LIBRARIES OF INPUT AND OUTPUT CARDS.
      *****************************************************************
      * TO PROCESS A DISCRETE CARD FILE INPUT/OUTPUT, A MATCHING PAIR
      * OF DD CARDS MUST BE SPECIFIED.  ONE FOR INPUT, ONE FOR OUTPUT.
      * THE CARDS ARE IDENTIFIED BY DDNAMES BEGINNING WITH "CNTL".
      *   INPUT CARD DDNAMES MUST END WITH "I".
      *   OUTPUT CARD DDNAMES MUST END WITH "O".
      *   CHARACTERS BETWEEN THE "CNTL" AND THE "I" OR "O" IDENTIFY
      *     WHICH DDNAMES ARE MATCHED FOR INPUT AND OUTPUT.
      *
      * (NOTE: FOR COMPATIBILTY WITH EARLIER VERSIONS, DDNAMES ENDING
      *  WITH "IN" OR "OUT" ARE ALSO RECOGNIZED BUT ARE DISCOURAGED)
      *
      * DISCRETE FILES MAY BE SEQUENTIAL OR SINGLE MEMBERS OF A PDS.
      *
      * THIS EXAMPLE WOULD PROCESS THREE DISCRETE CONTROL CARD FILES:
      *   //CNTL001I  DD DSN=INPUT.CARD.ONE
      *   //CNTL001O  DD DSN=OUTPUT.CARD.ONE
      *   //CNTLABCI  DD DSN=INPUT.PDS.NAME(CARD2)
      *   //CNTLABCO  DD DSN=OUTPUT.CARD.TWO
      *   //CNTLXIN   DD DSN=INPUT.PDS.NAME(CARD3)
      *   //CNTLXOUT  DD DSN=OUTPUT.PDS.NAME(CARD3)
      * DDNAMES CNTL001I AND CNTL001O WOULD MATCH (MATCHED BY "001")
      * DDNAMES CNTLABCI AND CNTLABCO WOULD MATCH (MATCHED BY "ABC")
      * DDNAMES CNTLXIN  AND CNTLXOUT WOULD MATCH (MATCHED BY "X")
      *****************************************************************
      * TO PROCESS LIBRAY CARD FILE INPUT/OUTPUT, A MATCHING TRIO
      * OF DD CARDS MUST BE SPECIFIED.  ONE FOR THE INPUT LIBRARY, ONE
      * FOR THE OUTPUT LIBRARY AND ONE FOR A MEMBER SELECTION LIST.
      * THESE DD CARDS ARE IDENTIFIED BY DDNAMES BEGINNING WITH "LIBR".
      *   INPUT LIBRARY DDNAMES MUST END WITH "I".  THIS MAY BE A
      *         CONCATENTION OF PDS DATASETS THAT WILL BE SEARCHED.
      *   OUTPUT LIBRARY DDNAMES MUST END WITH "O".
      *   MEMBER LIST DDNAMES MUST END WITH "M".
      *   CHARACTERS BETWEEN THE "LIBR" AND THE "I", "O" OR "M"
      *     IDENTIFY WHICH DDNAMES ARE MATCHED.
      *
      * INPUT AND OUTPUT LIBRARIES MUST BE PDS (OR PDSE).
      * MEMBER LIST MUST BE A SEQUENTIAL FILE OR A SINGLE PDS MEMBER,
      *   WHICH CONTAINS A LIST MEMBERS TO BE PROCESSED.  THE LIST
      *   CONSISTS OF ONE OR MORE RECORDS, EACH HAVING ONE OR MORE
      *   MEMBER SELECTION MASKS SEPERATED BY SPACES.  EACH MASK IS
      *   EITHER A FULL MEMBER NAME OR A MEMBER NAME WITH WILD CARDS.
      *   THESE ARE THE WILD CHARACTERS PERMITTED:
      *     "*" = MATCH ZERO OR MORE OF ANY CHARACTERS.
      *     "?" = MATCH ANY SINGLE CHARACTER.
      *     "!" = MATCH ALPHABET LETTER "A" THROUGH "Z".
      *     "%" = MATCH NUMERIC DIGIT "0" THROUGH "9".
      *     "~" = MATCH SPECIAL CHARACTER "@", "#" OR "$"
      *
      * THESE DDCARDS WOULD PROCESS A LIBRARY OF CONTROL CARD FILES:
      *   //LIBR001I DD DSN=INPUT.PDS.NAME,DISP=SHR
      *   //LIBR001O DD DSN=OUTPUT.PDS.NAME,DISP=SHR
      *   //LIBR001M DD *
      *       MYMEMBER CARD# CARD## TEST*
      *   /*
      * MASK "MYMEMBER"
      *   MATCHES ONLY MEMBER NAME "MYMEMBER"
      * MASK "CARD#"
      *   MATCHES "CARD1", "CARD2", "CARD3"
      *   BUT NOT "CARD", "CARDA", "CARDXYZ", "CARD12" OR "MYCARD1"
      * MASK "CARD##"
      *   MATCHES "CARD01", "CARD10", "CARD99"
      *   BUT NOT "CARD12X", "CARD999" OR "MYCARD99"
      * MASK "TEST*"
      *   MATCHES "TEST", "TEST2", "TEST99", "TESTWXYZ"
      *   BUT NOT "MYTEST", "XTEST99"
      *****************************************************************
      * THE FOLLOWING ARE EXAMPLES OF HOW THIS WOULD BE USED IN JCL:
      *   THE DEFAULT LEFT BOUNDARY (1) WILL REMAIN AS IS.
      *   THE DEFAULT RIGHT BOUNDARY (72) WILL BE OVERRIDDEN TO 80.
      *   THE SYMBOLIC VARIABLES &HIBYE AND &DAYNITE WILL BE REPLACE
      *     WITH THE VALUES 'HELLO' AND 'MORNING'.
      *****************************************************************
      * //         SET HIBYE='HELLO'
      * //         SET DAYNITE='MORNING'
      *****************************************************************
      * SAMPLE JCL USING ONE DISCRETE INPUT AND OUTPUT CARD FILE
      *****************************************************************
      * //STEP0010 EXEC PGM=SYMBSUB,COND=(4,LT),PARM=('&BNDS=:80')
      * //CNTLIN   DD DSN=EXAMPLE.CNTLCARD.WITH.SYMBOLS,DISP=SHR
      * //CNTLOUT  DD DSN=EXAMPLE.CNTLCARD.SYMBOLS.RESOLVED,
      * //            DISP=(NEW,CATLG,CATLG),
      * //            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),
      * //            UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE)
      * //SYSOUT   DD SYSOUT=*
      * //SYSPRINT DD SYSOUT=*
      * //SYSUDUMP DD SYSOUT=*
      *****************************************************************
      * SAMPLE JCL USING MULTIPLE DISCRETE INPUT AND OUTPUT CARD FILES
      *****************************************************************
      * //STEP0010 EXEC PGM=SYMBSUB,COND=(4,LT),PARM=('&B=:80')
      * //CNTL001I DD DSN=EXAMPLE.CNTLCARD.WITH.SYMBOLS,DISP=SHR
      * //CNTL001O DD DSN=EXAMPLE.CNTLCARD.SYMBOLS.RESOLVED,
      * //            DISP=(NEW,CATLG,CATLG),
      * //            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),
      * //            UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE)
      * //CNTLABCI DD DSN=ANOTHER.CNTLCARD.WITH.SYMBOLS,DISP=SHR
      * //CNTLABCO DD DSN=ANOTHER.CNTLCARD.SYMBOLS.RESOLVED,
      * //            DISP=(NEW,CATLG,CATLG),
      * //            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),
      * //            UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE)
      * //SYSOUT   DD SYSOUT=*
      * //SYSPRINT DD SYSOUT=*
      * //SYSUDUMP DD SYSOUT=*
      *****************************************************************
      * SAMPLE JCL USING INPUT AND OUTPUT LIBRARIES OF CARD FILES
      *****************************************************************
      * //ALLOCPDS EXEC PGM=IEFBR14
      * //TEMPPDS  DD DSN=JOB.TEMP.CARDLIB,
      * //            DCB=(DSORG=PO,LRECL=80,BLKSIZE=0,RECFM=FB),
      * //            DISP=(NEW,CATLG,CATLG),
      * //            UNIT=SYSDA,SPACE=(CYL,(1,1,10))
      * //STEP0020 EXEC PGM=SYMBSUB,COND=(4,LT),PARM=('&B=:80')
      * //LIBR001I DD DSN=TEST.CONTROL.CARDLIB,DISP=SHR
      * //         DD DSN=PROD.CONTROL.CARDLIB,DISP=SHR
      * //LIBR001O DD DSN=JOB.TEMP.CARDLIB,DISP=SHR
      * //LIBR001M DD *
      *   MYMEMBER CARD# CARD## TEST*
      * //SYSOUT   DD SYSOUT=*
      * //SYSPRINT DD SYSOUT=*
      * //SYSUDUMP DD SYSOUT=*
      *****************************************************************
      *****************************************************************
      * IF THE DATA IN THE INPUT FILE LOOKED LIKE THIS:
      *
      *     JUST A CARD TO SAY &HIBYE AND HAVE A GREAT &DAYNITE..
      *
      * THE OUTPUT WOULD LOOK LIKE THIS:
      *
      *     JUST A CARD TO SAY HELLO AND HAVE A GREAT MORNING.
      *
      *****************************************************************
      * BUT IF THE JCL HAD THE FOLLOWING SYMBOLIC VARIABLES DEFINED
      * //         SET HIBYE='GOODBYE'
      * //         SET DAYNITE='EVENING'
      *
      * THE OUTPUT WOULD LOOK LIKE THIS:
      *
      *     JUST A CARD TO SAY GOODBYE AND HAVE A GREAT EVENING.
      *
      *****************************************************************
      *****************************************************************
      * MAINTENANCE:
      *
      *    DATE     PGMR    DESCRIPTION
      *  11/04/2002 BBASS   NEW PROGRAM CREATION
      *  07/21/2004 BBASS   ADDED BOUNDARY OVERRIDE CAPABILITY
      *  11/08/2007 BBASS   ADDED SDSF JCL SCANNING FOR SYMBOL VALUES
      *                     ADDED DYNAMIC SCANNING FOR I/O DDNAMES
080212*  02/12/2008 BBASS   CLEAR ALL SDSF FILTERING AT START
080310*  03/10/2008 BBASS   FIXED EXEC PROC SYMBOL LEVEL INIT BUG
081107*  11/07/2008 BBASS   FIXED A BUG THAT CAUSED PROC OVERRIDE JCL
081107*                     CARDS TO ACCIDENTALLY BE INTERPRETED AS
081107*                     END OF THE PROC WHEN PARSING THE JESJCL
081113*  11/13/2008 BBASS   ADDED AUTOMATIC SYSTEM SYMBOL SUBSTITUTION
081113*                     ADDED PARM FOR DEFAULT TIMEZONE (UTC/LOCAL)
090505*  05/05/2009 BBASS   ADDED JOBID BUILTIN SYMBOL
090505*                     FIXED MINOR PROC PARSING BUG
090915*  09/15/2009 BBASS   FIXED BUG ON SUBSTITUTION OF ONE CHARACTER
090915*                     SYMBOL NAMES
091020*  10/20/2009 BBASS   ADDED DB2 DATE/TIME BUILTIN SYMBOLS.
091020*                     PROCESS SYMBPARM PHASE BEFORE JCLSCAN SO
091020*                     THAT SYMBOLS PASSED ON THE PARM, OVERRIDE
091020*                     PROPERLY AND CAN BE SUBSTITUTED WITHIN
091020*                     SYMBOLS THAT ARE SCANNED IN THE JCL.
100313*  03/13/2010 BBASS   ADDED LIBRARY INPUT CAPABILITY.
100313*                     INPUT IS A PDS CONCATENATION (DD=LIBRXXXI)
100313*                       AND A LIST OF MEMBERS      (DD=LIBRXXXM)
100313*                     OUTPUT IS A PDS              (DD=LIBRXXXO)
110222*  02/22/2011 BBASS   ADDED MEMBER MASK MATCHING CAPABILITY
120824*  08/24/2012 BBASS   ADDED OPTIONAL PARMIN FILE FOR SETTING
120824*                     PARMS FROM AN EXTERNAL DATASET
      *****************************************************************
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS TOP-OF-PAGE.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
120824     SELECT OPTIONAL PARMIN-FILE     ASSIGN TO PARMIN.
100313     SELECT MEMLIST-FILE             ASSIGN TO LSTDD.
100313     SELECT DIR-FILE                 ASSIGN TO DIRDD
100313                                     FILE STATUS DIR-STATUS.
           SELECT CNTLIN-FILE              ASSIGN TO CNTLIN
100313                                     FILE STATUS IN-STATUS.
           SELECT CNTLOUT-FILE             ASSIGN TO CNTLOUT
100313                                     FILE STATUS OUT-STATUS.
           SELECT ISFIN-FILE               ASSIGN TO ISFIN.
           SELECT JESJCL-FILE              ASSIGN TO OUTJCL.

       DATA DIVISION.
       FILE SECTION.
120824
120824 FD  PARMIN-FILE
120824     LABEL RECORDS ARE STANDARD
120824     RECORDING MODE IS F
120824     RECORD CONTAINS 80 CHARACTERS
120824     BLOCK CONTAINS   0 RECORDS
120824     DATA RECORD IS FD-PARMIN-REC.
120824
120824 01  FD-PARMIN-REC               PIC X(80).
100313
100313 FD  MEMLIST-FILE
100313     LABEL RECORDS ARE STANDARD
100313     RECORDING MODE IS F
100313     RECORD CONTAINS 80 CHARACTERS
100313     BLOCK CONTAINS   0 RECORDS
100313     DATA RECORD IS FD-MEMLIST-REC.
100313
100313 01  FD-MEMLIST-REC              PIC X(80).
100313
100313 FD  DIR-FILE
100313     RECORD CONTAINS 0 CHARACTERS
100313     RECORDING MODE IS U.
100313 01  FD-DIR-REC                  PIC X(256).

       FD  CNTLIN-FILE
           LABEL RECORDS ARE STANDARD
           RECORDING MODE IS F
           RECORD CONTAINS 80 CHARACTERS
           BLOCK CONTAINS   0 RECORDS
           DATA RECORD IS FD-CNTLIN-REC.

       01  FD-CNTLIN-REC               PIC X(80).

       FD  CNTLOUT-FILE
           LABEL RECORDS ARE STANDARD
           RECORDING MODE IS F
           RECORD CONTAINS 80 CHARACTERS
           BLOCK CONTAINS   0 RECORDS
           DATA RECORD IS FD-CNTLOUT-REC.

       01  FD-CNTLOUT-REC              PIC X(80).

       FD  ISFIN-FILE
           LABEL RECORDS ARE STANDARD
           RECORDING MODE IS F
           RECORD CONTAINS 80 CHARACTERS
           BLOCK CONTAINS   0 RECORDS
           DATA RECORD IS FD-ISFIN-REC.

       01  FD-ISFIN-REC                PIC X(80).

       FD  JESJCL-FILE
           LABEL RECORDS ARE STANDARD
           RECORDING MODE IS F
           RECORD CONTAINS 133 CHARACTERS
           BLOCK CONTAINS    0 RECORDS
           DATA RECORD IS FD-JESJCL-REC.

       01  FD-JESJCL-REC.
           05 FILLER                   PIC X(10).
           05 JESJCL-DATA              PIC X(72).
           05 JESJCL-SEQNO             PIC X(8).
           05 FILLER                   PIC X(43).

      ******************************************************************
       WORKING-STORAGE SECTION.
      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'WORKING STORAGE BEGINS HERE ===>'.
      ******************************************************************
       01  CNTLIN-REC                  PIC X(80) VALUE SPACES.
       01  WORK-FIELDS.
           05 WS-PROGRAM-ID.
              10 PGM-NAME              PIC X(8)  VALUE 'SYMBSUB'.
              10 PGM-VERS              PIC X(8)  VALUE '02.03.00'.
           05 WS-COMPILE-DATE-TIME.
              10 WS-COMPILE-DATE       PIC X(8).
              10 WS-COMPILE-TIME       PIC X(8).
      ******************************************************************
      * CHANGE DEFAULT TIMEZONE TO 'LOCAL' IF YOU WANT DATE AND TIME
      * SYMBOLS THAT DO NOT BEGIN WITH &U OR &L TO USE LOCAL TIME.
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      *                      W A R N I N G
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      *     IF YOU CHANGE TO 'LOCAL', SYMBSUB WILL RESOLVE SYSTEM
      *     DYNAMIC DATE/TIME SYMBOLS DIFFERENTLY THAN THE SYSTEM!
      *     FOR EXAMPLE, IBM SYSTEM DYNAMIC SYMBOL &HHMMSS REFERS TO
      *     UTC TIME.  IF YOU CHANGE THE DEFAULT TO LOCAL, SYMBSUB
      *     WILL RESOLVE THIS USING LOCAL TIME.  YOU WOULD HAVE TO USE
      *     &UHHMMSS TO GET UTC TIME.  REGARDLESS OF THE TIMEZONE
      *     OPTION YOU SPECIFY, ALL DATE/TIME SYMBOLS THAT BEGIN WITH
      *     &U WILL ALWAYS RESOLVE USING UTC TIME AND THOSE THAT BEGIN
      *     WITH &L WILL RESOLVE USING LOCAL TIME.  ONLY DATE/TIME
      *     SYMBOLS THAT DO NOT BEGIN WITH &U OR &L ARE AFFECTED BY THE
      *     TIMEZONE OPTION.  YOU SHOULD BE AWARE THAT SYMBOLS
      *     BEGINNING WITH &U ARE SYMBSUB BUILTIN SYMBOLS NOT STANDARD
      *     SYSTEM DYNAMIC SYMBOLS.  WHILE THEY WILL WORK FINE WITHIN
      *     SYMBSUB, THEY CANNOT BE USED IN OTHER IBM SOFTWARE WHERE
      *     ACTUAL SYSTEM DYNAMIC SYMBOLS ARE PERMITTED.  FOR THIS
      *     REASON, IF YOU USE UTC TIME IT IS NOT A GOOD IDEA TO CHANGE
      *     YOUR DEFAULT TO LOCAL.
      *
      * LONG STORY MADE SHORT:
      *     ALTHOUGH THIS OPTION IS AVAILABLE, I DON'T RECOMMEND IT.
      *     BETTER TO GET IN THE HABIT OF USING SYMBOLS THAT BEGIN WITH
      *     &L WHEN YOU WANT LOCAL DATE/TIME EVEN IF THAT IS THE ONLY
      *     DATE/TIME YOU ARE EVER INTERESTED IN.
      ******************************************************************
081113     05 WS-DEFAULT-TIMEZONE      PIC X(8)         VALUE 'UTC'.
081113     05 WS-CURRENT-TIMEZONE      PIC X(8)         VALUE 'UTC'.
           05 WS-FILES-READ            PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-FILES-WRITTEN         PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-PARM-CARDS-READ       PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-CARDS-READ            PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-FILE-CARDS-READ       PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-CARDS-CHANGED         PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-CARDS-UNCHANGED       PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-CARDS-WRITTEN         PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-FILE-CARDS-WRITTEN    PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-JESJCL-CNT            PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-LINE-CNT              PIC S9(8) COMP-5 VALUE +99.
           05 WS-DISPLAY-RC            PIC +9(8)        VALUE ZERO.
           05 WS-DISPLAY-NDX           PIC 9(4)         VALUE ZERO.
           05 WS-DISPLAY-CHAR.
              10 WS-DISPLAY-CNT        PIC ---,---,--9.

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'PARSING-DATA    BEGINS HERE ===>'.
      ******************************************************************
       01  PARSING-DATA.
           05 WS-BEG                   PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-END                   PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-LEN                   PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-BX                    PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-EX                    PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-LX                    PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-NAME-LEN              PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-VALUE-LEN             PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-LBND                  PIC S9(8) COMP-5 VALUE +1.
           05 WS-RBND                  PIC S9(8) COMP-5 VALUE +72.
           05 WS-PREV-LBND             PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-PREV-RBND             PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-DLEN                  PIC S9(8) COMP-5 VALUE +72.
           05 WS-PAREN-DEPTH           PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-CNTL-LEN              PIC S9(4) COMP-5 VALUE +10.
           05 WS-CNTL-STRING           PIC X(80) VALUE '$SYMBPARM'.
           05 WS-BOUND                 PIC 9(8)  VALUE ZERO.
           05 WS-PARM                  PIC X(60) VALUE SPACES.
           05 WS-NAME                  PIC X(60) VALUE SPACES.
           05 WS-VALUE                 PIC X(60) VALUE SPACES.
081113     05 WS-VALUE-SOURCE          PIC X(16) VALUE SPACES.
081113     05 WS-LVL-IND               PIC X(1)  VALUE '0'.
081113        88 WS-LVL-NO-VALUE                 VALUE '0'.
081113        88 WS-LVL-BUILTIN-SYMBOL           VALUE '1'.
081113        88 WS-LVL-STATIC-SYMBOL            VALUE '2'.
081113        88 WS-LVL-DYNAMIC-SYMBOL           VALUE '3'.
081113        88 WS-LVL-BASE-JCL-VALUE           VALUE '4'.
081113        88 WS-LVL-DFLT-PROC-VALUE          VALUE '5'.
081113        88 WS-LVL-EXEC-PROC-VALUE          VALUE '6'.
081113        88 WS-LVL-PARM-OVERRIDE            VALUE '9'.
           05 WS-BOUND-ID              PIC X(5)  VALUE SPACES.
           05 WS-BOUND-STR             PIC X(61) VALUE SPACES.
           05 WS-BOUND-HOLD            PIC X(61) VALUE SPACES.

       01  WS-SAVE-AREA.
           05 WS-SAVE-END              PIC S9(8) COMP-5 VALUE ZERO.
           05 WS-SAVE-PARMS-BUFF.
              10 WS-SAVE-PARMS-LEN     PIC S9(4) COMP-5 VALUE ZERO.
              10 WS-SAVE-PARMS         PIC X(1024)      VALUE SPACES.

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'JCL-PARSE-AREA  BEGINS HERE ===>'.
      ******************************************************************
       01  JCL-PARSE-AREA.
           05 JSX                      PIC S9(8) COMP-5 VALUE ZERO.
           05 JEX                      PIC S9(8) COMP-5 VALUE ZERO.
           05 JLX                      PIC S9(8) COMP-5 VALUE ZERO.
           05 JPLEN                    PIC S9(8) COMP-5 VALUE ZERO.
           05 JDATAMAX                 PIC S9(8) COMP-5 VALUE +72.
           05 JPHASE                   PIC S9(4) COMP-5 VALUE ZERO.
           05 JID                      PIC X(2)         VALUE SPACES.
           05 JNAME                    PIC X(17)        VALUE SPACES.
           05 JOPER                    PIC X(8)         VALUE SPACES.
           05 JPARAM                   PIC X(1024)      VALUE SPACES.
           05 JSTEPNO                  PIC 9(4)         VALUE ZERO.
           05 JPROCNM                  PIC X(8)         VALUE SPACES.
080310     05 JPRV-OPER                PIC X(8)         VALUE SPACES.
           05 JEND-NODE-SW             PIC X(1)         VALUE 'N'.
              88 JEND-NODE                              VALUE 'Y'.
           05 JPRV-CONTINUED-SW        PIC X(1)         VALUE SPACES.
              88 JPRV-CONTINUED-JCL                     VALUE 'J'.
              88 JPRV-CONTINUED-QUOTE                   VALUE 'Q'.
              88 JPRV-CONTINUED-COMMENT                 VALUE 'C'.
           05 JCUR-CONTINUED-SW        PIC X(1)         VALUE SPACES.
              88 JCUR-CONTINUED-JCL                     VALUE 'J'.
              88 JCUR-CONTINUED-QUOTE                   VALUE 'Q'.
              88 JCUR-CONTINUED-COMMENT                 VALUE 'C'.
090505     05 JEXEC-TYPE-SW            PIC X(1)         VALUE SPACES.
090505        88 JEXEC-TYPE-PGM                         VALUE '1'.
090505        88 JEXEC-TYPE-PROC                        VALUE '2'.
           05 JIN-QUOTES-SW            PIC X(1)         VALUE 'N'.
              88 JIN-QUOTES                             VALUE 'Y'.
           05 JINSTREAM-PROC-SW        PIC X(1)         VALUE 'N'.
              88 JINSTREAM-PROC                         VALUE 'Y'.
      ******************************************************************
       01  FILLER                      PIC X(32)  VALUE
           'MISCELLANEOUS   BEGINS HERE ===>'.
      ******************************************************************
       01  MISCELLANEOUS.
           05 WS-STEPNO-CHAR.
              10 WS-STEPNO             PIC 9(4)  COMP-5.
           05 WS-STEPNUM               PIC 9(4)         VALUE ZERO.
           05 WS-PROCSTEP              PIC X(8)         VALUE SPACES.
           05 WS-STEPNAME              PIC X(8)         VALUE SPACES.
           05 WS-PGMNAME               PIC X(8)         VALUE SPACES.
           05 WS-SYSUID                PIC X(8)         VALUE SPACES.
           05 WS-JOBNAME               PIC X(8)         VALUE SPACES.
090505     05 WS-JOBID                 PIC X(8)         VALUE SPACES.

091020     05 WS-HH                    PIC 9(2)         VALUE ZERO.
           05 WS-QUOTE                 PIC X(1)         VALUE SPACES.
           05 WS-PREV-CARD-TYPE        PIC X(1)         VALUE SPACES.
               88 WS-PREV-CARD-TYPE-NONE                VALUE SPACES.
               88 WS-PREV-CARD-TYPE-PARM                VALUE 'P'.
               88 WS-PREV-CARD-TYPE-DATA                VALUE 'D'.

100313     05 IN-STATUS                PIC X(2)         VALUE '00'.
100313     05 OUT-STATUS               PIC X(2)         VALUE '00'.
120824     05 WS-PARMIN-EOF-SW         PIC X(1)         VALUE 'N'.
120824        88 WS-PARMIN-EOF                          VALUE 'Y'.

           05 WS-CNTLIN-EOF-SW         PIC X(1)         VALUE 'N'.
              88 WS-CNTLIN-EOF                          VALUE 'Y'.

           05 WS-JESJCL-EOF-SW         PIC X(1)         VALUE 'N'.
              88 WS-JESJCL-EOF                          VALUE 'Y'.

           05 WS-WITHIN-PROC-SW        PIC X(1)         VALUE 'N'.
              88 WS-WITHIN-PROC                         VALUE 'Y'.

           05 WS-NESTED-PROC-SW        PIC X(1)         VALUE 'N'.
              88 WS-NESTED-PROC                         VALUE 'Y'.

           05 WS-OUTPUT-OPEN-SW        PIC X(1)         VALUE 'N'.
              88 WS-OUTPUT-OPEN                         VALUE 'C'.

           05 WS-PGM-PHASE-SW          PIC X(1)         VALUE SPACES.
              88 WS-PGM-PHASE-INITPARM                  VALUE 'I'.
              88 WS-PGM-PHASE-SYMBPARM                  VALUE 'S'.
              88 WS-PGM-PHASE-JCLSCAN                   VALUE 'J'.
              88 WS-PGM-PHASE-CNTLIN                    VALUE 'C'.

           05 WS-BOUND-OK-SW           PIC X(1)         VALUE 'N'.
              88 WS-BOUND-OK                            VALUE 'Y'.

           05 WS-WITHIN-QUOTES-SW      PIC X(1)         VALUE 'N'.
              88 WS-WITHIN-QUOTES                       VALUE 'Y'.

           05 WS-NAM-FROM-SYMBOL-SW    PIC X(1)         VALUE 'N'.
              88 WS-NAM-FROM-SYMBOL                     VALUE 'Y'.

           05 WS-VAL-FROM-SYMBOL-SW    PIC X(1)         VALUE 'N'.
              88 WS-VAL-FROM-SYMBOL                     VALUE 'Y'.

           05 WS-INHERIT-NP-CHG-SW     PIC X(1)         VALUE 'N'.
              88 WS-INHERIT-NP-CHG                      VALUE 'Y'.

           05 WS-SEARCH-FLAG           PIC X(1)         VALUE SPACES.
              88 WS-SEARCH-END                          VALUE 'E'.
              88 WS-SEARCH-MATCH                        VALUE 'M'.

           05 WS-DEBUG-SWITCHES.
              10 WS-DEBUG-TRACE-SW     PIC X(1)         VALUE ' '.
                 88 WS-DEBUG-TRACE                      VALUE 'T'.
              10 WS-DEBUG-INPUT-SW     PIC X(1)         VALUE ' '.
                 88 WS-DEBUG-INPUT                      VALUE 'I'.
              10 WS-DEBUG-OUTPUT-SW    PIC X(1)         VALUE ' '.
                 88 WS-DEBUG-OUTPUT                     VALUE 'O'.
              10 WS-DEBUG-DDNAME-SW    PIC X(1)         VALUE ' '.
                 88 WS-DEBUG-DDNAME                     VALUE 'D'.
              10 WS-DEBUG-JESJCL-SW    PIC X(1)         VALUE ' '.
                 88 WS-DEBUG-JESJCL                     VALUE 'J'.
              10 WS-DEBUG-SEARCH-SW    PIC X(1)         VALUE ' '.
                 88 WS-DEBUG-SEARCH                     VALUE 'S'.
              10 WS-DEBUG-PARSING-SW   PIC X(1)         VALUE ' '.
                 88 WS-DEBUG-PARSING                    VALUE 'P'.

           05 WS-LASTCC                PIC 9(2)         VALUE ZERO.
           05 WS-MAXCC                 PIC 9(2)         VALUE ZERO.
           05 WS-PARAGRAPH-NAME        PIC X(32)        VALUE SPACES.
100313
100313* MVS DATA AREAS MISC
100313 01  MVS-MISC.
100313     05 JFCB-HI-HEX              PIC S9(8) COMP-5 VALUE ZERO.
100313     05 JFCB-LO-HEX              PIC S9(8) COMP-5 VALUE ZERO.
100313     05 TIOE-LEN-CHAR.
100313        10 TIOE-LEN              PIC S9(4) COMP-5 VALUE ZERO.
100313     05 TIOE-POINT.
100313        10 TIOE-PTR              POINTER.
100313        10 TIOE-PNUM             REDEFINES TIOE-PTR
100313                                 PIC 9(8) COMP-5.
100313     05 QMAT-POINT.
100313        10 QMAT-PTR              POINTER.
100313        10 QMAT-PNUM             REDEFINES QMAT-PTR
100313                                 PIC 9(8) COMP-5.
100313     05 JFCB-POINT.
100313        10 JFCB-PTR              POINTER.
100313        10 JFCB-PNUM             REDEFINES JFCB-PTR
100313                                 PIC 9(8) COMP-5.
100313        10 FILLER                REDEFINES JFCB-PNUM.
100313           15 FILLER             PIC X.
100313           15 JFCB-PTR-LO3       PIC X(3).
100313
100313* LIBRARY LIST WORK AREA
100313 01  LIBR-WORK-AREA.
100313     05 LIBRX                        PIC S9(8) COMP-5 VALUE ZERO.
100313     05 LIBR-MAX                     PIC S9(4) COMP-5 VALUE +100.
100313     05 LIBR-CNT                     PIC S9(4) COMP-5 VALUE ZERO.
100313     05 LIBR-SRCH-DDNAME             PIC X(8)  VALUE SPACES.
100313     05 LIBR-DDNAME                  PIC X(8)  VALUE SPACES.
100313     05 LIBR-DSN                     PIC X(44)
100313                                     OCCURS 100.
100313     05 LIBR-EOF-SW                  PIC X     VALUE 'N'.
100313        88 LIBR-MORE                 VALUE 'N'.
100313        88 LIBR-EOF                  VALUE 'Y'.
100313
100313* MEMLIST WORK AREA
100313 01  MEMLIST-WORK-AREA.
100313     05 MEMBEG                       PIC S9(8) COMP-5 VALUE ZERO.
100313     05 MEMEND                       PIC S9(8) COMP-5 VALUE ZERO.
100313     05 MEMLEN                       PIC S9(8) COMP-5 VALUE ZERO.
100313     05 MEMLIST-EOF-SW               PIC X     VALUE 'N'.
100313        88 MEMLIST-MORE              VALUE 'N'.
100313        88 MEMLIST-EOF               VALUE 'Y'.
100313
100313* DIRECTORY WORK AREA
100313 01  DIR-WORK-AREA.
100313     05 DIR-ADR                      PIC S9(8) COMP-5 VALUE ZERO.
100313     05 DIR-PTR            REDEFINES DIR-ADR
100313                                     POINTER.
100313     05 DIR-ENTLEN                   PIC S9(4) COMP-5 VALUE ZERO.
100313     05 DIR-POS                      PIC S9(4) COMP-5 VALUE ZERO.
100313     05 DIR-TRASH                    PIC S9(4) COMP-5 VALUE ZERO.
100313     05 DIR-HWORDS                   PIC S9(4) COMP-5 VALUE ZERO.
100313     05 DIR-2BYTES.
100313        10 DIR-SMALLINT              PIC S9(4) COMP-5 VALUE ZERO.
100313     05 DIR-STATUS                   PIC X(2)  VALUE '00'.
100313     05 DIR-EOF-SW                   PIC X     VALUE 'N'.
100313        88 DIR-MORE                  VALUE 'N'.
100313        88 DIR-EOF                   VALUE 'Y'.
100313 01  DIR-REC.
100313     05 DIR-REC-LEN                  PIC S9(4) COMP-5 VALUE ZERO.
100313     05 DIR-DATA                     PIC X(254) VALUE SPACES.
100313
100313* MEMBER WORK AREA
100313 01  MEM-WORK-AREA.
110222     05 MEM-MAX                      PIC S9(8) COMP-5 VALUE +500.
110222     05 MEM-CNT                      PIC S9(8) COMP-5 VALUE ZERO.
110222     05 MEMX                         PIC S9(8) COMP-5 VALUE ZERO.
110222     05 MEM-MASK                     PIC X(17) VALUE SPACES.
110222     05 MEM-NAME-ARRAY.
110222        10 MEM-NAME-ENTRY            OCCURS 500 TIMES.
110222           15 MEM-LIBR               PIC X(44).
110222           15 MEM-NAME               PIC X(8).
100313     05 MEM-DSN-OUT                  PIC X(44) VALUE SPACES.
110222
110222* MASK WORK AREA
110222 01  MSK-WORK-AREA.
110222     05 MSK-MAX                      PIC S9(8) COMP-5 VALUE +100.
110222     05 MSK-PART-MAX                 PIC S9(8) COMP-5 VALUE 9.
110222     05 MSK-CNT                      PIC S9(8) COMP-5 VALUE ZERO.
110222     05 MSK-MIN-LEN                  PIC S9(8) COMP-5 VALUE ZERO.
110222     05 MSKX                         PIC S9(8) COMP-5 VALUE ZERO.
110222     05 MPX                          PIC S9(8) COMP-5 VALUE ZERO.
110222     05 MSK-ARRAY.
110222        10 MSK-ENTRY                 OCCURS 100 TIMES.
110222           15 MSK-MEM-CNT            PIC S9(8) COMP-5.
110222           15 MSK-PART-CNT           PIC S9(8) COMP-5.
110222           15 MSK-MASK               PIC X(17).
110222           15 FILLER                 PIC X(3).
110222           15 MSK-PART-ENTRY         OCCURS 9 TIMES.
110222              20 MSK-PART-LEN        PIC S9(8) COMP-5 VALUE ZERO.
110222              20 MSK-PART-TXT        PIC X(8)  VALUE SPACES.
110222
110222 01  MASK-PART-AREA.
110222     05 MPL                          PIC S9(8) COMP-5 VALUE ZERO.
110222     05 MP-TXT                       PIC X(8)  VALUE SPACES.
110222     05 MP-MATCH-SW                  PIC X(1)  VALUE 'N'.
110222        88 MP-NOMATCH                          VALUE 'N'.
110222        88 MP-MATCH                            VALUE 'Y'.
110222     05 MP-PART-MATCH-SW             PIC X(1)  VALUE 'N'.
110222        88 MP-PART-NOMATCH                     VALUE 'N'.
110222        88 MP-PART-MATCH                       VALUE 'Y'.
081113
081113*****************************************************************
081113*    SUPPORT FIELDS FOR CALLS TO LE UTC DATE-TIME ROUTINES
081113*****************************************************************
081113
081113 01  CEE-WORK-SECS               COMP-2           VALUE ZERO.
081113 01  CEE-UTC-SECS                COMP-2           VALUE ZERO.
081113 01  CEE-LOCAL-SECS              COMP-2           VALUE ZERO.
081113 01  CEE-LILIAN                  PIC S9(9) COMP-5 VALUE ZERO.
081113 01  CEE-OFF-HRS                 PIC S9(9) COMP-5 VALUE ZERO.
081113 01  CEE-OFF-MINS                PIC S9(9) COMP-5 VALUE ZERO.
081113 01  CEE-OFF-SECS                COMP-2           VALUE ZERO.
081113 01  CEE-PICSTR.
081113     05 CEE-PICSTR-LEN           PIC S9(4) COMP-5 VALUE ZERO.
081113     05 CEE-PICSTR-TEXT.
081113        10 CEE-PICSTR-CHAR       PIC X(1) OCCURS 0 TO 256
081113                                 DEPENDING ON CEE-PICSTR-LEN.
081113 01  CEE-WORK-DATM-BUFF          PIC X(80)        VALUE SPACES.
081113 01  CEE-FC.
081113     05 CEE-CONDITION-TOKEN-VALUE.
081113        10 CEE-CONDITION-ID.
081113           15 CEE-SEVERITY       PIC S9(4) COMP-5 VALUE ZERO.
081113           15 CEE-MSG-NO         PIC S9(4) COMP-5 VALUE ZERO.
081113        10 CEE-CASE-SEV-CTL      PIC X     VALUE  LOW-VALUES.
081113        10 CEE-FACILITY-ID       PIC XXX   VALUE  LOW-VALUES.
081113     05 CEE-I-S-INFO             PIC S9(9) COMP-5 VALUE ZERO.
081113
081113*****************************************************************
081113*    WORK DATE AND TIME FIELDS
081113*****************************************************************
081113
081113 01  WS-WORK-DATE-TIME.
091020     05 WS-WSQL-TIMESTMP.
091020        10 WS-WSQL-ISODATE.
091020           15 WS-WSQL-ISODATE-YYYY   PIC 9(4).
091020           15 FILLER                 PIC X(1).
091020           15 WS-WSQL-ISODATE-MM     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-WSQL-ISODATE-DD     PIC 9(2).
091020        10 FILLER                    PIC X(1).
091020        10 WS-WSQL-ISOTIME.
091020           15 WS-WSQL-ISOTIME-HH     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-WSQL-ISOTIME-MM     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-WSQL-ISOTIME-SS     PIC 9(2).
091020        10 FILLER                    PIC X(1).
091020        10 WS-WSQL-TIMESTMP-TTT      PIC 9(3).
091020        10 WS-WSQL-TIMESTMP-ZZZ      PIC 9(3).
091020     05 WS-WSQL-USADATE              PIC X(10).
091020     05 WS-WSQL-EURDATE              PIC X(10).
091020     05 WS-WSQL-JISDATE              PIC X(10).
091020     05 WS-WSQL-USATIME              PIC X(8).
091020     05 WS-WSQL-EURTIME              PIC X(8).
091020     05 WS-WSQL-JISTIME              PIC X(8).
091020     05 WS-WGREG-YYYYMMDD            PIC 9(8).
091020     05 WS-WTIME-HHMMSS999           PIC 9(9).
081113     05 WS-WDOW-NUM                  PIC 9(1).
081113     05 WS-WJUL-YYYYJJJ              PIC 9(7).
081113
081113*****************************************************************
081113*    UTC DATE AND TIME FIELDS
081113*****************************************************************
081113 01  WS-UTC-DATE-TIME.
091020     05 WS-USQL-TIMESTMP.
091020        10 WS-USQL-ISODATE.
091020           15 WS-USQL-ISODATE-YYYY   PIC 9(4).
091020           15 FILLER                 PIC X(1).
091020           15 WS-USQL-ISODATE-MM     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-USQL-ISODATE-DD     PIC 9(2).
091020        10 FILLER                    PIC X(1).
091020        10 WS-USQL-ISOTIME.
091020           15 WS-USQL-ISOTIME-HH     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-USQL-ISOTIME-MM     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-USQL-ISOTIME-SS     PIC 9(2).
091020        10 FILLER                    PIC X(1).
091020        10 WS-USQL-TIMESTMP-TTT      PIC 9(3).
091020        10 WS-USQL-TIMESTMP-ZZZ      PIC 9(3).
091020     05 WS-USQL-USADATE              PIC X(10).
091020     05 WS-USQL-EURDATE              PIC X(10).
091020     05 WS-USQL-JISDATE              PIC X(10).
091020     05 WS-USQL-USATIME              PIC X(8).
091020     05 WS-USQL-EURTIME              PIC X(8).
091020     05 WS-USQL-JISTIME              PIC X(8).
091020     05 WS-UGREG-YYYYMMDD            PIC 9(8).
091020     05 WS-UTIME-HHMMSS999           PIC 9(9).
081113     05 WS-UDOW-NUM                  PIC 9(1).
081113     05 WS-UJUL-YYYYJJJ              PIC 9(7).
081113
081113*****************************************************************
081113*    LOCAL DATE AND TIME FIELDS
081113*****************************************************************
081113 01  WS-LOCAL-DATE-TIME.
091020     05 WS-LSQL-TIMESTMP.
091020        10 WS-LSQL-ISODATE.
091020           15 WS-LSQL-ISODATE-YYYY   PIC 9(4).
091020           15 FILLER                 PIC X(1).
091020           15 WS-LSQL-ISODATE-MM     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-LSQL-ISODATE-DD     PIC 9(2).
091020        10 FILLER                    PIC X(1).
091020        10 WS-LSQL-ISOTIME.
091020           15 WS-LSQL-ISOTIME-HH     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-LSQL-ISOTIME-MM     PIC 9(2).
091020           15 FILLER                 PIC X(1).
091020           15 WS-LSQL-ISOTIME-SS     PIC 9(2).
091020        10 FILLER                    PIC X(1).
091020        10 WS-LSQL-TSTMP-TTT         PIC 9(3).
091020        10 WS-LSQL-TSTMP-ZZZ         PIC 9(3).
091020     05 WS-LSQL-USADATE              PIC X(10).
091020     05 WS-LSQL-EURDATE              PIC X(10).
091020     05 WS-LSQL-JISDATE              PIC X(10).
091020     05 WS-LSQL-USATIME              PIC X(8).
091020     05 WS-LSQL-EURTIME              PIC X(8).
091020     05 WS-LSQL-JISTIME              PIC X(8).
091020     05 WS-LGREG-YYYYMMDD            PIC 9(8).
091020     05 WS-LTIME-HHMMSS999           PIC 9(9).
081113     05 WS-LDOW-NUM                  PIC 9(1).
081113     05 WS-LJUL-YYYYJJJ              PIC 9(7).

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'IKJEFT PARMS    BEGINS HERE ===>'.
      ******************************************************************
       01  WS-IKJEFT-PARMS.
           05 WS-IKJEFT-FUTURE-USE     PIC S9(8) COMP.
           05 WS-IKJEFT-RC             PIC S9(8) COMP.
           05 WS-IKJEFT-REASON-CD      PIC S9(8) COMP.
           05 WS-IKJEFT-ABEND-CD       PIC S9(8) COMP.
           05 WS-IKJEFT-INFO-CD        PIC S9(8) COMP.
           05 WS-IKJEFT-CPPL-ADDR      PIC S9(8) COMP.
           05 WS-IKJEFT-FLAGS          PIC X(4) VALUE X'00010001'.
           05 WS-IKJEFT-BUFFER         PIC X(256).
           05 WS-IKJEFT-LENGTH         PIC S9(8) COMP-5 VALUE ZERO.

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'ISFIN DATA AREA BEGINS HERE ===>'.
      ******************************************************************
       01  WS-ISFIN-DATA-AREA.
080212     05 WS-ISFX-MAX              PIC S9(8) COMP-5 VALUE +16.
           05 WS-ISFIN-TABLE.
090505        10 WS-ISFIN-1.
090505           15 FILLER             PIC X(16)
090505                                 VALUE 'FILTER JOBID EQ '.
090505           15 WS-ISFIN-JOBID     PIC X(8)  VALUE SPACES.
090505           15 FILLER             PIC X(56) VALUE SPACES.
080212        10 WS-ISFIN-2            PIC X(80) VALUE 'PREFIX *'.
080212        10 WS-ISFIN-3        PIC X(80) VALUE 'OWNER *'.
080212        10 WS-ISFIN-4        PIC X(80) VALUE 'DEST'.
              10 WS-ISFIN-5.
                 15 FILLER         PIC X(5)  VALUE 'FIND '.
                 15 WS-ISFIN-JOBNM PIC X(8)  VALUE SPACES.
                 15 FILLER         PIC X(67) VALUE SPACES.
              10 WS-ISFIN-6        PIC X(80) VALUE '++?'.
              10 WS-ISFIN-7        PIC X(80) VALUE 'RESET'.
              10 WS-ISFIN-8        PIC X(80) VALUE 'FIND JESJCL'.
              10 WS-ISFIN-9        PIC X(80) VALUE '++S'.
              10 WS-ISFIN-10       PIC X(80) VALUE 'PRINT FILE OUTJCL'.
              10 WS-ISFIN-11       PIC X(80) VALUE 'PRINT'.
              10 WS-ISFIN-12       PIC X(80) VALUE 'PRINT CLOSE'.
              10 WS-ISFIN-13       PIC X(80) VALUE 'END'.
              10 WS-ISFIN-14       PIC X(80) VALUE 'END'.
              10 WS-ISFIN-15       PIC X(80) VALUE 'END'.
              10 WS-ISFIN-16       PIC X(80) VALUE 'END'.
           05 WS-ISFIN-ARRAY REDEFINES WS-ISFIN-TABLE.
080212        10 WS-ISFIN          PIC X(80) OCCURS 16 TIMES
                                             INDEXED BY ISFX.
      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'WS-CARDIN       BEGINS HERE ===>'.
       01  WS-CARDIN                   PIC X(80).

       01  FILLER                      PIC X(32) VALUE
           'WS-CARDOUT      BEGINS HERE ===>'.
       01  WS-CARDOUT                  PIC X(80).

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'DDNAME AREA     BEGINS HERE ===>'.
      ******************************************************************
       01  DDNAME-AREA.
           05 DDNAME-MAX               PIC S9(8) COMP-5 VALUE +256.
           05 DDNAME-CNT               PIC S9(8) COMP-5 VALUE ZERO.
100313     05 DDNAME-CNTLIN            PIC X(8).
100313     05 DDNAME-CNTLOUT           PIC X(8).
           05 DDNAME-SRCH-ROOT         PIC X(8).
           05 DDNAME-SRCH-TYPE         PIC X(1).
           05 DDNAME-ENTRY             OCCURS 0 TO 256 TIMES
                                       DEPENDING ON DDNAME-CNT
                                       INDEXED BY DDX.
              10 DDNAME-ROOT           PIC X(8).
              10 DDNAME-IN             PIC X(8).
              10 DDNAME-OUT            PIC X(8).
100313        10 DDNAME-MEMS           PIC X(8).

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'SYMBOL ARRAY    BEGINS HERE ===>'.
      ******************************************************************
       01  SA-ARRAY-AREA.
           05 SA-MAX                   PIC S9(8) COMP-5 VALUE 500.
           05 SA-CNT                   PIC S9(8) COMP-5 VALUE ZERO.
           05 SA-ANY-VAL-NP-USE-SW     PIC X(1)         VALUE 'N'.
      *       88 NO-NP-CHANGED-VALUES-USED              VALUE 'N'.
      *       88 NP-CHANGED-VALUES-USED                 VALUE 'Y'.
           05 FILLER                   PIC X(3)         VALUE SPACES.
           05 SA-ENTRY                 OCCURS 0 TO 500 TIMES
                                       DEPENDING ON SA-CNT
                                       INDEXED BY SAX.
              10 SA-NAME-LEN           PIC S9(8) COMP-5.
              10 SA-VALUE-LEN          PIC S9(8) COMP-5.
              10 SA-NAME               PIC X(60).
              10 SA-VALUE              PIC X(60).
081113        10 SA-LVL-IND            PIC X(1).
081113           88 SA-LVL-NO-VALUE              VALUE '0'.
081113           88 SA-LVL-BUILTIN-SYMBOL        VALUE '1'.
081113           88 SA-LVL-STATIC-SYMBOL         VALUE '2'.
081113           88 SA-LVL-DYNAMIC-SYMBOL        VALUE '3'.
081113           88 SA-LVL-BASE-JCL-VALUE        VALUE '4'.
081113           88 SA-LVL-DFLT-PROC-VALUE       VALUE '5'.
081113           88 SA-LVL-EXEC-PROC-VALUE       VALUE '6'.
081113           88 SA-LVL-PARM-OVERRIDE         VALUE '9'.
              10 SA-VAL-NP-CHG-SW      PIC X(1).
      *          88 VALUE-NOT-CHANGED-IN-NESTED-PROC    VALUE 'N'.
      *          88 VALUE-CHANGED-IN-NESTED-PROC        VALUE 'Y'.
              10 SA-VAL-NP-USE-SW      PIC X(1).
      *          88 NP-CHANGED-VALUE-NOT-USED           VALUE 'N'.
      *          88 NP-CHANGED-VALUE-USED               VALUE 'Y'.
              10 FILLER                PIC X(1).

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'SYMBOL SAVE     BEGINS HERE ===>'.
      ******************************************************************
       01  SS-SAVE-AREA.
           05 SS-MAX                   PIC S9(8) COMP-5 VALUE 500.
           05 SS-CNT                   PIC S9(8) COMP-5 VALUE ZERO.
           05 SS-ANY-VAL-NP-USE-SW     PIC X(1)         VALUE SPACES.
           05 FILLER                   PIC X(3)         VALUE SPACES.
           05 SS-ENTRY                 OCCURS 0 TO 500 TIMES
                                       DEPENDING ON SS-CNT
                                       INDEXED BY SSX.
              10 SS-NAME-LEN           PIC S9(8) COMP-5.
              10 SS-VALUE-LEN          PIC S9(8) COMP-5.
              10 SS-NAME               PIC X(60).
              10 SS-VALUE              PIC X(60).
              10 SS-VALUE-LVL          PIC X(1).
              10 SS-VAL-NP-CHG-SW      PIC X(1).
              10 SS-VAL-NP-USE-SW      PIC X(1).
              10 FILLER                PIC X(1).

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'SYMBOL WORKAREA BEGINS HERE ===>'.
      ******************************************************************
       01  SA-WORK-AREA.
081113     05 SA-PTR                   POINTER          VALUE NULL.
081113     05 SA-PTR-NUM               REDEFINES SA-PTR
081113                                 PIC 9(8)  COMP-5.
081113     05 SA-BASE                  PIC 9(8)  COMP-5 VALUE ZERO.
           05 SA-START                 PIC S9(8) COMP-5 VALUE ZERO.
           05 SA-END                   PIC S9(8) COMP-5 VALUE ZERO.
           05 SA-LEN                   PIC S9(8) COMP-5 VALUE ZERO.
           05 SA-STRING-LEN            PIC S9(8) COMP-5 VALUE ZERO.
           05 SA-SYM-CHGD-SW           PIC X(1)         VALUE 'N'.
           05 SA-PARM                  PIC X(60)        VALUE SPACES.
           05 SA-STRING                PIC X(1024)      VALUE SPACES.
           05 SA-SUFFIX                PIC X(1024)      VALUE SPACES.

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           'WS-INPUT-PARMS  BEGINS HERE ===>'.
      ******************************************************************
       01  WS-INPUT-PARMS-BUFF.
           05 WS-INPUT-PARMS-LEN       PIC S9(4) COMP-5.
           05 WS-INPUT-PARMS           PIC X(1024).

      ******************************************************************
       01  FILLER                      PIC X(32) VALUE
           '<=== WORKING-STORAGE ENDS HERE<<'.
      ******************************************************************
       LINKAGE SECTION.
      ******************************************************************
       01  LS-INPUT-PARMS-BUFF.
           05 LS-INPUT-PARMS-LEN       PIC S9(4) COMP-5.
           05 LS-INPUT-PARMS           PIC X(1024).
100313
100313 01  DIR-ENTRY.
100313     05 DIR-MEM-NAME             PIC X(8).
100313     05 FILLER                   PIC X(3).
100313     05 DIR-BITLEN               PIC X.

      * PROGRAM STATUS AREA.
       01  PSA.
081113     05 FILLER                   PIC X(16).
081113     05 PSA-FLCCVT               POINTER.
081113     05 FILLER                   PIC X(520).
           05 PSA-PSATOLD              POINTER.
           05 FILLER                   PIC X(4).
           05 PSA-PSAAOLD              POINTER.

090505* ADDRESS SPACE CONTROL BLOCK
090505 01  ASCB.
090505     05 FILLER                   PIC X(336).
090505     05 ASCB-ASCBASSB            POINTER.

090505* ADDRESS SPACE SECONDARY BLOCK
090505 01  ASSB.
090505     05 FILLER                   PIC X(168).
090505     05 ASSB-ASSBJSAB            POINTER.

      * TASK CONTROL BLOCK
       01  TCB.
           05 FILLER                   PIC X(12).
           05 TCB-TCBTIO               POINTER.
           05 FILLER                   PIC X(164).
           05 TCB-TCBJSCB              POINTER.

      * TASK I/O TABLE
       01  TIOT.
           05 TIOT-TIOCNJOB            PIC X(08).
090505     05 TIOT-TIOCSTEP.
090505        10 TIOT-TIOCSTPN         PIC X(8).
090505        10 TIOT-TIOCJSTN         PIC X(8).
       01  TIOENTRY.
           05 TIOT-TIOELNGH            PIC X.
           05 FILLER                   PIC X(3).
           05 TIOT-TIOEDDNM            PIC X(8).
100313     05 TIOT-TIOEJFCB            PIC X(3).

090505* JOB SCHEDULER ADDRESS SPACE CONTROL BLOCK
090505 01  JSAB.
090505     05 FILLER                   PIC X(20).
090505     05 JSAB-JSABJBID            PIC X(8).
090505     05 JSAB-JSABJBNM            PIC X(8).
090505     05 FILLER                   PIC X(8).
090505     05 JSAB-JSABUSID            PIC X(8).

      * JOB/STEP CONTROL BLOCK
       01  JSCB.
           05 FILLER                   PIC X(228).
           05 JSCB-JSCBSTEP            PIC X(1).
100313     05 FILLER                   PIC X(15).
100313     05 JSCB-JSCBQMPI            POINTER.
100313     05 FILLER                   PIC X(112).
           05 JSCB-JSCBPGMN            PIC X(8).

100313* JOB FILE CONTROL BLOCK (FORMAT 1 DSCB)
100313 01  JFCB.
100313     05 JFCBDSNM                 PIC X(44).

081113* COMMUNICATIONS VECTOR TABLE.
081113 01  CVT.
081113     05 FILLER                   PIC X(56).
081113     05 CVT-CVTDATE              PIC S9(7) COMP-3.
081113     05 FILLER                   PIC X(80).
081113     05 CVT-CVTECVT              POINTER.
081113     05 FILLER                   PIC X(1136).

081113* EXTENDED COMMUNICATIONS VECTOR TABLE.
081113 01  ECVT.
081113     05 FILLER                   PIC X(296).
081113     05 ECVT-ECVTSYMT            POINTER.
081113     05 FILLER                   PIC X(356).

081113* SYSTEM SYMBOL TABLE
081113 01  SYMBT.
081113     05 FILLER                   PIC X(2).
081113     05 SYMBT-SYMBTE-CNT         PIC 9(4)  COMP-5.
081113     05 SYMBTE                   OCCURS 0 TO 65535
081113                                 DEPENDING ON SYMBT-SYMBTE-CNT
081113                                 INDEXED BY SYMBTE-X.
081113        10 SYMBTE-SYMB-OFF       PIC 9(8)  COMP-5.
081113        10 SYMBTE-SYMB-LEN       PIC 9(8)  COMP-5.
081113        10 SYMBTE-TEXT-OFF       PIC 9(8)  COMP-5.
081113        10 SYMBTE-TEXT-LEN       PIC 9(8)  COMP-5.
100313
100313 01  QMPI.
100313     05 FILLER                   PIC X(24).
100313     05 QMPI-QMPIQMAT            POINTER.
100313
100313 01  QMAT.
100313     05 FILLER                   PIC X(12).
100313     05 QMAT-QMATNEXT            POINTER.
100313
100313 01  JNXT-POINT.
100313     05 JNXT-PTR                 POINTER.
100313     05 JNXT-PNUM                REDEFINES JNXT-PTR
100313                                 PIC 9(8) COMP-5.
081113* SYSTEM SYMBOL TABLE DATA
081113 01  SYMBTE-DAT                  PIC X(62).
      ******************************************************************
       PROCEDURE DIVISION USING LS-INPUT-PARMS-BUFF.
      ******************************************************************
       0000-MAINLINE.
      ******************************************************************
      *    THIS CONTROLS THE MAIN LOGIC OF THE PROGRAM. IT PERFORMS
      *    THE HOUSEKEEPING, MAIN PROCESSING LOOP AND THE END-OF-JOB.
      ******************************************************************

           MOVE WHEN-COMPILED              TO WS-COMPILE-DATE-TIME
           MOVE 'S000-MAINLINE'            TO WS-PARAGRAPH-NAME
           DISPLAY '****************************************'
                   '****************************************'
091020     DISPLAY '**** BEGIN ' PGM-NAME ' V' PGM-VERS
           DISPLAY '**** COMPILED ' WS-COMPILE-DATE ' ' WS-COMPILE-TIME
           DISPLAY '****************************************'
                   '****************************************'

           PERFORM 1000-HOUSEKEEPING                     THRU 1000-EXIT

           MOVE 'C'                        TO WS-PGM-PHASE-SW
           IF WS-DEBUG-SWITCHES NOT = SPACES
             DISPLAY '*************************************************'
             DISPLAY 'BEGIN CNTLIN PHASE'
             DISPLAY '*************************************************'
           END-IF

      *    PROCESS THE LIST OF CNTL DDCARDS THAT ARE ALLOCATED
           PERFORM VARYING DDX FROM 1 BY 1
           UNTIL DDX > DDNAME-CNT
             EVALUATE TRUE
100313         WHEN DDNAME-OUT (DDX)     = SPACES
100313         AND  DDNAME-IN  (DDX) NOT = SPACES
                 DISPLAY '**** ERROR - INPUT DDNAME SKIPPED.'
                 DISPLAY '**** DATA FROM INPUT DDNAME '
                         DDNAME-IN(DDX)
                         ' CANNOT BE PROCESSED BECAUSE NO MATCHING'
                         ' OUTPUT DDNAME WAS FOUND.'
                 MOVE 12                       TO WS-LASTCC
                 PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT

100313         WHEN DDNAME-IN  (DDX)     = SPACES
100313         AND  DDNAME-OUT (DDX) NOT = SPACES
                 DISPLAY '**** WARNING - UNUSED OUTPUT DDNAME FOUND.'
                 DISPLAY '**** OUTPUT DDNAME '
                         DDNAME-OUT(DDX)
                         ' WAS NOT MATCHED TO ANY INPUT DDNAME.'
                 MOVE 4                        TO WS-LASTCC
                 PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT
100313
100313         WHEN DDNAME-IN  (DDX)     = SPACES
100313         AND  DDNAME-MEMS(DDX) NOT = SPACES
100313           DISPLAY '**** WARNING - UNUSED MEMLIST DDNAME FOUND.'
100313           DISPLAY '**** MEMLIST DDNAME '
100313                   DDNAME-OUT(DDX)
100313                   ' WAS NOT MATCHED TO ANY INPUT DDNAME.'
100313           MOVE 4                        TO WS-LASTCC
100313           PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT
100313
100313         WHEN DDNAME-ROOT(DDX)(1:4) = 'LIBR'
100313           PERFORM 3000-PROCESS-LIBR-FILE          THRU 3000-EXIT

               WHEN OTHER
100313           MOVE DDNAME-IN (DDX)      TO DDNAME-CNTLIN
100313           MOVE DDNAME-OUT(DDX)      TO DDNAME-CNTLOUT
                 PERFORM 4000-PROCESS-CNTL-FILE          THRU 4000-EXIT
             END-EVALUATE
           END-PERFORM

      * WRAP IT UP
           PERFORM 9000-END-OF-JOB                       THRU 9000-EXIT
           .
       0000-MAINLINE-EXIT.
           MOVE WS-MAXCC                   TO RETURN-CODE
           GOBACK
           .
      ******************************************************************
       1000-HOUSEKEEPING.
      ******************************************************************
      *    THIS ROUTINE PERFORMS ALL OF THE ONE-TIME PROCESSES THAT
      *    NEED TO BE DONE BEFORE THE MAIN LOOP PROCESSES BEGIN.
      *    OPENS FILES, INITS ARRAYS AND HEADERS, READS FIRST RECORD.
      ******************************************************************

           MOVE '1000-HOUSEKEEPING'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           MOVE 'I'                        TO WS-PGM-PHASE-SW
           IF WS-DEBUG-SWITCHES NOT = SPACES
             DISPLAY '*************************************************'
             DISPLAY 'BEGIN INITPARM PHASE'
             DISPLAY '*************************************************'
           END-IF

      * CREATE TSO ENVIRONMENT
           CALL 'IKJTSOEV' USING WS-IKJEFT-FUTURE-USE
                                 WS-IKJEFT-RC
                                 WS-IKJEFT-REASON-CD
                                 WS-IKJEFT-INFO-CD
                                 WS-IKJEFT-CPPL-ADDR
           IF WS-IKJEFT-RC NOT = ZERO
              MOVE WS-IKJEFT-RC            TO WS-DISPLAY-RC
              DISPLAY 'IKJTSOEV FAILED - RC=' WS-DISPLAY-RC
              MOVE WS-IKJEFT-REASON-CD     TO WS-DISPLAY-RC
              DISPLAY '         REASON CODE=' WS-DISPLAY-RC
              MOVE 20                      TO WS-LASTCC
              PERFORM 9998-HANDLE-LASTCC                 THRU 9998-EXIT
           END-IF

      * PROCESS PARMS WITH PHASE=P, JUST TO SET INITIAL $SYMBPARM,
      * $BOUNDS, $DEBUG, ETC., THIS WILL NOT LOAD ANY SYMBOLS!!!
081113     MOVE WS-DEFAULT-TIMEZONE        TO WS-CURRENT-TIMEZONE
081113     SET  WS-LVL-NO-VALUE            TO TRUE
           MOVE LS-INPUT-PARMS-LEN         TO WS-INPUT-PARMS-LEN
           MOVE LS-INPUT-PARMS(1:LS-INPUT-PARMS-LEN)
                                           TO WS-INPUT-PARMS
           PERFORM 5000-PROCESS-PARMS                    THRU 5000-EXIT
081113     IF WS-CURRENT-TIMEZONE = 'LOCAL'
081113       DISPLAY '****************************************'
081113               '****************************************'
081113       DISPLAY 'CAUTION: LOCAL TIMEZONE SPECIFIED!'
081113       DISPLAY '  DATE/TIME SYMBOLS NOT BEGINNING WITH '
081113               '&L OR &U WILL DEFAULT TO LOCAL TIME.'
081113       DISPLAY '  THIS IS DIFFERENT FROM IBM SYSTEM '
081113               'DYNAMIC SYMBOLS, WHICH USE UTC TIME FOR'
081113       DISPLAY '  SYMBOLS THAT DO NOT BEGIN WITH &L AND '
081113               'DO NOT USE DATE/TIME SYMBOLS WITH &U.'
081113       DISPLAY '****************************************'
081113               '****************************************'
081113     END-IF

      * GET JOB INFO FROM MVS DATA AREAS
           PERFORM 1100-GET-MVS-JOB-INFO                 THRU 1100-EXIT

      * GET INPUT AND OUTPUT FILE DDNAMES
           PERFORM 1200-GET-IO-FILE-DDNAMES              THRU 1200-EXIT
081113
081113* GET UTC AND LOCAL DATE AND TIME FOR USE IN DYNAMIC SYMBOLS
081113     PERFORM 1300-GET-DATE-TIME                    THRU 1300-EXIT

      * LOAD SUBSTITUTION ARRAY WITH BUILTIN VALUES
           PERFORM 1400-LOAD-BUILTIN-SYMBOLS             THRU 1400-EXIT
081113
081113* GET SYSTEM SYMBOLS FROM THE MVS SYSTEM SYMBOL TABLE
081113     PERFORM 1500-LOAD-SYSTEM-SYMBOLS              THRU 1500-EXIT
091020
091020     MOVE 'S'                        TO WS-PGM-PHASE-SW
091020     IF WS-DEBUG-SWITCHES NOT = SPACES
091020       DISPLAY '*************************************************'
091020       DISPLAY 'BEGIN SYMBPARM PHASE'
091020       DISPLAY '*************************************************'
091020     END-IF
120824
120824* PROCESS PARMIN FILE TO LOAD ANY PARMS SPECIFIED THERE
120824     OPEN INPUT PARMIN-FILE
120824     MOVE 'N'                        TO WS-PARMIN-EOF-SW
120824     READ PARMIN-FILE
120824       AT END MOVE 'Y'               TO WS-PARMIN-EOF-SW
120824     END-READ
120824
120824     SET WS-LVL-PARM-OVERRIDE        TO TRUE
120824     PERFORM UNTIL WS-PARMIN-EOF
120824       PERFORM VARYING WS-BEG FROM 1 BY 1
120824         UNTIL WS-BEG >= LENGTH OF FD-PARMIN-REC
120824            OR FD-PARMIN-REC(WS-BEG:1) > SPACES
120824       END-PERFORM
120824
120824       PERFORM VARYING WS-LEN
120824         FROM LENGTH OF FD-PARMIN-REC BY -1
120824         UNTIL WS-LEN <= WS-BEG
120824            OR FD-PARMIN-REC(WS-LEN:1) > SPACES
120824       END-PERFORM
120824
120824       COMPUTE WS-LEN = (WS-LEN - WS-BEG) + 1
120824       IF WS-LEN > ZERO
120824         MOVE WS-LEN                 TO WS-INPUT-PARMS-LEN
120824         MOVE FD-PARMIN-REC(WS-BEG:WS-LEN)
120824                                     TO WS-INPUT-PARMS
120824         PERFORM 5000-PROCESS-PARMS                THRU 5000-EXIT
120824       END-IF
120824
120824       READ PARMIN-FILE
120824         AT END MOVE 'Y'             TO WS-PARMIN-EOF-SW
120824       END-READ
120824     END-PERFORM
120824
120824     CLOSE PARMIN-FILE
091020
091020* PROCESS PARMS AGAIN TO FULLY PROCESS ANY SYMBOLS PASSED
091020* SET VALUE LEVEL FOR SYMBOLS PASSED ON PARMS,
091020* THEY OVERLAY ALL OTHER INPUT SOURCES!!!
081113     SET WS-LVL-PARM-OVERRIDE        TO TRUE
091020     MOVE LS-INPUT-PARMS-LEN         TO WS-INPUT-PARMS-LEN
091020     MOVE LS-INPUT-PARMS(1:LS-INPUT-PARMS-LEN)
091020                                     TO WS-INPUT-PARMS
091020     PERFORM 5000-PROCESS-PARMS                    THRU 5000-EXIT

      * LOAD SYMBOLS FROM JESJCL
           MOVE 'J'                        TO WS-PGM-PHASE-SW
           IF WS-DEBUG-SWITCHES NOT = SPACES
             DISPLAY '*************************************************'
             DISPLAY 'BEGIN JCLSCAN PHASE'
             DISPLAY '*************************************************'
           END-IF

           PERFORM 1600-GET-JESJCL                       THRU 1600-EXIT
           PERFORM 1700-PARSE-JESJCL                     THRU 1700-EXIT

091020     PERFORM 1800-DISPLAY-SYMBOLS                  THRU 1800-EXIT
           .
       1000-EXIT. EXIT.
      *****************************************************************
       1100-GET-MVS-JOB-INFO.
      *****************************************************************
      *    THIS ROUTINE GETS JOB INFO FROM THE MVS DATA AREAS.
      *****************************************************************
           MOVE '1100-GET-MVS-JOB-INFO'    TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    GET THE USER/JOB/PROC/STEP INFO
           SET ADDRESS OF PSA              TO NULL
           SET ADDRESS OF ASCB             TO PSA-PSAAOLD
090505     SET ADDRESS OF ASSB             TO ASCB-ASCBASSB
090505     SET ADDRESS OF JSAB             TO ASSB-ASSBJSAB
090505     MOVE JSAB-JSABUSID              TO WS-SYSUID
090505     MOVE JSAB-JSABJBNM              TO WS-JOBNAME
090505     MOVE JSAB-JSABJBID              TO WS-JOBID
           SET ADDRESS OF TCB              TO PSA-PSATOLD
           SET ADDRESS OF TIOT             TO TCB-TCBTIO

           SET ADDRESS OF JSCB             TO TCB-TCBJSCB
           MOVE ZERO                       TO WS-STEPNO
           MOVE JSCB-JSCBSTEP              TO WS-STEPNO-CHAR(2:1)
           MOVE WS-STEPNO                  TO WS-STEPNUM
           MOVE JSCB-JSCBPGMN              TO WS-PGMNAME

090505     IF TIOT-TIOCJSTN = SPACES
090505       MOVE TIOT-TIOCSTPN            TO WS-STEPNAME
090505       MOVE SPACES                   TO WS-PROCSTEP
           ELSE
090505       MOVE TIOT-TIOCSTPN            TO WS-PROCSTEP
090505       MOVE TIOT-TIOCJSTN            TO WS-STEPNAME
           END-IF

           IF WS-DEBUG-SWITCHES > SPACES
             DISPLAY '**** SYSUID  =' WS-SYSUID
             DISPLAY '**** JOBNAME =' WS-JOBNAME
090505       DISPLAY '**** JOBID   =' WS-JOBID
             DISPLAY '**** PROCSTEP=' WS-PROCSTEP
             DISPLAY '**** STEPNAME=' WS-STEPNAME
             DISPLAY '**** STEPNUM =' WS-STEPNUM
             DISPLAY '**** PGMNAME =' WS-PGMNAME
           END-IF
           .
       1100-EXIT. EXIT.
      *****************************************************************
       1200-GET-IO-FILE-DDNAMES.
      *****************************************************************
      *    THIS ROUTINE FINDS ALL THE INPUT AND OUTPUT FILE DDNAMES.
      *****************************************************************
           MOVE '1200-GET-IO-FILE-DDNAMES' TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    SET ADDRESSABILITY TO THE TIOT
           SET ADDRESS OF PSA              TO NULL
           SET ADDRESS OF TCB              TO PSA-PSATOLD
           SET ADDRESS OF TIOT             TO TCB-TCBTIO

      *    WALK THE TIOT ENTRIES TO FIND THE I/O FILE DDNAMES
100313     SET TIOE-PTR                    TO TCB-TCBTIO
100313     ADD 24                          TO TIOE-PNUM
100313     SET ADDRESS OF TIOENTRY         TO TIOE-PTR
           PERFORM UNTIL TIOT-TIOELNGH = LOW-VALUES
             IF WS-DEBUG-DDNAME
               DISPLAY 'TIOT-TIOEDDNM=<' TIOT-TIOEDDNM '>'
             END-IF
             IF TIOT-TIOEDDNM(1:4) = 'CNTL'
100313       OR TIOT-TIOEDDNM(1:4) = 'LIBR'
               PERFORM 1210-PROCESS-CNTL-DDNAME          THRU 1210-EXIT
             END-IF

      *      POINT TO NEXT DDNAME ENTRY IN TIOT
100313       MOVE ZERO                     TO TIOE-LEN
100313       MOVE TIOT-TIOELNGH            TO TIOE-LEN-CHAR(2:1)
100313       ADD TIOE-LEN                  TO TIOE-PNUM
100313       SET ADDRESS OF TIOENTRY       TO TIOE-PTR
           END-PERFORM

      *    DISPLAY DDNAME ENTRIES IF REQUESTED
           IF WS-DEBUG-DDNAME
             DISPLAY '*************************************************'
             DISPLAY 'CNTL INPUT AND OUTPUT DDNAME ENTRIES:'
             DISPLAY '*************************************************'
             PERFORM VARYING DDX FROM 1 BY 1
               UNTIL DDX > DDNAME-CNT
                 SET WS-DISPLAY-NDX        TO DDX
                 DISPLAY 'ENTRY(' WS-DISPLAY-NDX     ')'
                         ' ROOT=<'  DDNAME-ROOT(DDX) '>'
                         ' IN=<'    DDNAME-IN  (DDX) '>'
                         ' OUT=<'   DDNAME-OUT (DDX) '>'
100313                   ' MEMS=<'  DDNAME-MEMS(DDX) '>'
             END-PERFORM
             DISPLAY '*************************************************'
             DISPLAY 'END CNTL INPUT AND OUTPUT DDNAME ENTRIES'
             DISPLAY '*************************************************'
           END-IF
           .
       1200-EXIT. EXIT.
      ******************************************************************
       1210-PROCESS-CNTL-DDNAME.
      ******************************************************************
      *    THIS ROUTINE PROCESSES A CNTL TIOT DD ENTRY
      ******************************************************************
           MOVE '1210-PROCESS-CNTL-DDNAME' TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    GET THE DDNAME ROOT TO MATCH THE INPUT AND OUTPUT NAMES
           PERFORM VARYING WS-EX FROM 5 BY 1
             UNTIL WS-EX > 8
                OR TIOT-TIOEDDNM(WS-EX:1) = SPACES
           END-PERFORM
           SUBTRACT 1                      FROM WS-EX

           COMPUTE WS-LX = WS-EX - 4

           EVALUATE TRUE
             WHEN WS-LX > 0 AND TIOT-TIOEDDNM(WS-EX:1)     = 'I'
               MOVE TIOT-TIOEDDNM(1:WS-EX - 1)   TO DDNAME-SRCH-ROOT
               MOVE 'I'                          TO DDNAME-SRCH-TYPE

             WHEN WS-LX > 1 AND TIOT-TIOEDDNM(WS-EX - 1:2) = 'IN'
               MOVE TIOT-TIOEDDNM(1:WS-EX - 2)   TO DDNAME-SRCH-ROOT
               MOVE 'I'                          TO DDNAME-SRCH-TYPE

             WHEN WS-LX > 0 AND TIOT-TIOEDDNM(WS-EX:1)     = 'O'
               MOVE TIOT-TIOEDDNM(1:WS-EX - 1)   TO DDNAME-SRCH-ROOT
               MOVE 'O'                          TO DDNAME-SRCH-TYPE

             WHEN WS-LX > 1 AND TIOT-TIOEDDNM(WS-EX - 1:2) = 'OT'
               MOVE TIOT-TIOEDDNM(1:WS-EX - 2)   TO DDNAME-SRCH-ROOT
               MOVE 'O'                          TO DDNAME-SRCH-TYPE

             WHEN WS-LX > 2 AND TIOT-TIOEDDNM(WS-EX - 2:3) = 'OUT'
               MOVE TIOT-TIOEDDNM(1:WS-EX - 3)   TO DDNAME-SRCH-ROOT
               MOVE 'O'                          TO DDNAME-SRCH-TYPE
100313
100313       WHEN WS-LX > 0 AND TIOT-TIOEDDNM(WS-EX:1)     = 'M'
100313         MOVE TIOT-TIOEDDNM(1:WS-EX - 1)   TO DDNAME-SRCH-ROOT
100313         MOVE 'M'                          TO DDNAME-SRCH-TYPE
100313
100313       WHEN WS-LX > 2 AND TIOT-TIOEDDNM(WS-EX - 2:3) = 'MEM'
100313         MOVE TIOT-TIOEDDNM(1:WS-EX - 3)   TO DDNAME-SRCH-ROOT
100313         MOVE 'M'                          TO DDNAME-SRCH-TYPE
100313
100313       WHEN WS-LX > 3 AND TIOT-TIOEDDNM(WS-EX - 3:4) = 'MEMS'
100313         MOVE TIOT-TIOEDDNM(1:WS-EX - 4)   TO DDNAME-SRCH-ROOT
100313         MOVE 'M'                          TO DDNAME-SRCH-TYPE

             WHEN OTHER
               MOVE SPACES                       TO DDNAME-SRCH-ROOT
           END-EVALUATE
100313
100313     IF  DDNAME-SRCH-TYPE = 'M'
100313     AND DDNAME-SRCH-ROOT(1:4) NOT = 'LIBR'
100313       MOVE SPACES                         TO DDNAME-SRCH-ROOT
100313       MOVE SPACES                         TO DDNAME-SRCH-TYPE
100313     END-IF

      *    SEARCH THE DD ARRAY FOR A MATCHING ENTRY
           IF DDNAME-SRCH-ROOT > SPACES
             SET DDX                       TO 1
             SEARCH DDNAME-ENTRY
      *        IF NO MATCH, ADD NEW ENTRY
               AT END
                 PERFORM 1211-ADD-DDNAME-ENTRY           THRU 1211-EXIT

      *        IF MATCH, CHECK FOR CONFLICTS
               WHEN DDNAME-ROOT(DDX) = DDNAME-SRCH-ROOT
                 EVALUATE TRUE
      *            IF INPUT AND MATCH IS EMPTY, ADD INPUT DDNAME
                   WHEN DDNAME-SRCH-TYPE = 'I'
                    AND DDNAME-IN(DDX) = SPACES
                     MOVE TIOT-TIOEDDNM    TO DDNAME-IN(DDX)

      *            IF OUTPUT AND MATCH IS EMPTY, ADD OUTPUT DDNAME
                   WHEN DDNAME-SRCH-TYPE = 'O'
                    AND DDNAME-OUT(DDX) = SPACES
                     MOVE TIOT-TIOEDDNM    TO DDNAME-OUT(DDX)
100313
100313*            IF MEMS AND MATCH IS EMPTY, ADD MEMS DDNAME
100313             WHEN DDNAME-SRCH-TYPE = 'M'
100313              AND DDNAME-MEMS(DDX) = SPACES
100313               MOVE TIOT-TIOEDDNM    TO DDNAME-MEMS(DDX)

      *            OTHERWISE ERROR!
                   WHEN OTHER
                     EVALUATE DDNAME-SRCH-TYPE
                       WHEN 'I'
                         DISPLAY '**** ERROR - DDNAME '
                                 TIOT-TIOEDDNM(1:WS-EX)
                                 ' CONFLICTS WITH DDNAME '
                                 DDNAME-IN(DDX)
                       WHEN 'O'
                         DISPLAY '**** ERROR - DDNAME '
                                 TIOT-TIOEDDNM(1:WS-EX)
                                 ' CONFLICTS WITH DDNAME '
                                 DDNAME-OUT(DDX)
100313                 WHEN OTHER
100313                   DISPLAY '**** ERROR - DDNAME '
100313                           TIOT-TIOEDDNM(1:WS-EX)
100313                           ' CONFLICTS WITH DDNAME '
100313                           DDNAME-MEMS(DDX)
                     END-EVALUATE
                     DISPLAY '**** DDNAME '
                             TIOT-TIOEDDNM(1:WS-EX)
                             ' WILL BE IGNORED.'
                     MOVE 12               TO WS-LASTCC
                     PERFORM 9998-HANDLE-LASTCC          THRU 9998-EXIT
                 END-EVALUATE
             END-SEARCH
           END-IF
           .
       1210-EXIT. EXIT.
      ******************************************************************
       1211-ADD-DDNAME-ENTRY.
      ******************************************************************
      *    THIS ROUTINE ADDS A NEW ENTRY TO THE DDNAME ARRAY
      ******************************************************************
           MOVE '1211-ADD-DDNAME-ENTRY'    TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           ADD 1                           TO DDNAME-CNT

           IF DDNAME-CNT > DDNAME-MAX
             DISPLAY '****************************************'
                     '****************************************'
             DISPLAY '****************************************'
                     '****************************************'
             DISPLAY '**** ERROR: DDNAME ARRAY OVERFLOW,'
                     ' INCREASE ARRAY SIZE'
             DISPLAY '****************************************'
                     '****************************************'
             DISPLAY '****************************************'
                     '****************************************'
             MOVE 20                       TO WS-LASTCC
             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
           END-IF

           SET DDX                         TO DDNAME-CNT
           MOVE DDNAME-SRCH-ROOT           TO DDNAME-ROOT(DDX)
           MOVE SPACES                     TO DDNAME-IN  (DDX)
           MOVE SPACES                     TO DDNAME-OUT (DDX)
100313     MOVE SPACES                     TO DDNAME-MEMS(DDX)
           EVALUATE DDNAME-SRCH-TYPE
             WHEN 'I'
               MOVE TIOT-TIOEDDNM          TO DDNAME-IN  (DDX)
             WHEN 'O'
               MOVE TIOT-TIOEDDNM          TO DDNAME-OUT (DDX)
100313       WHEN OTHER
100313         MOVE TIOT-TIOEDDNM          TO DDNAME-MEMS(DDX)
           END-EVALUATE
           .
       1211-EXIT. EXIT.
081113*****************************************************************
081113 1300-GET-DATE-TIME.
081113*****************************************************************
081113*    THIS ROUTINE GETS THE UTC AND LOCAL DATE AND TIME
081113*****************************************************************
081113     MOVE '1300-GET-DATE-TIME.'      TO WS-PARAGRAPH-NAME
081113     IF WS-DEBUG-TRACE
081113       DISPLAY                          WS-PARAGRAPH-NAME
081113     END-IF
081113
081113* GET UTC DATE/TIME FROM THE SYSTEM
081113     CALL 'CEEUTC' USING CEE-LILIAN, CEE-UTC-SECS, CEE-FC
081113     IF CEE-SEVERITY NOT = ZERO
081113     OR CEE-MSG-NO   NOT = ZERO
081113       DISPLAY  'CEEUTC FAILED: CEE-SEVERITY=<' CEE-SEVERITY
081113                '> CEE-MSG-NO=<' CEE-MSG-NO
081113                '> SEV-CTL=<' CEE-CASE-SEV-CTL
081113                '> FAC-ID=<' CEE-FACILITY-ID '>'
081113     END-IF
081113
081113* GET LOCAL DATE/TIME OFFSET FROM UTC AND CALC LOCAL SECONDS
081113     CALL 'CEEGMTO' USING CEE-OFF-HRS,  CEE-OFF-MINS,
081113                          CEE-OFF-SECS, CEE-FC
081113     IF CEE-SEVERITY NOT = ZERO
081113     OR CEE-MSG-NO   NOT = ZERO
081113       DISPLAY  'CEEGMTO FAILED: CEE-SEVERITY=<' CEE-SEVERITY
081113                '> CEE-MSG-NO=<' CEE-MSG-NO
081113                '> SEV-CTL=<' CEE-CASE-SEV-CTL
081113                '> FAC-ID=<' CEE-FACILITY-ID '>'
081113     END-IF
081113
081113     COMPUTE CEE-LOCAL-SECS = CEE-UTC-SECS + CEE-OFF-SECS
081113
081113* SET ALL UTC DATE/TIME FIELDS
081113     MOVE CEE-UTC-SECS               TO CEE-WORK-SECS
081113     PERFORM 1310-SET-WORK-DATE-TIME               THRU 1310-EXIT
081113     MOVE WS-WORK-DATE-TIME          TO WS-UTC-DATE-TIME
081113
081113* SET ALL LOCAL DATE/TIME FIELDS
081113     MOVE CEE-LOCAL-SECS             TO CEE-WORK-SECS
081113     PERFORM 1310-SET-WORK-DATE-TIME               THRU 1310-EXIT
081113     MOVE WS-WORK-DATE-TIME          TO WS-LOCAL-DATE-TIME
081113     .
081113 1300-EXIT. EXIT.
081113*****************************************************************
081113 1310-SET-WORK-DATE-TIME.
081113*****************************************************************
081113*    THIS ROUTINE BUILDS DTTMSTR, DAY OF WEEK AND JULIAN DATE
081113*****************************************************************
081113     MOVE '1310-SET-WORK-DATE-TIME'  TO WS-PARAGRAPH-NAME
081113     IF WS-DEBUG-TRACE
081113       DISPLAY                          WS-PARAGRAPH-NAME
081113     END-IF
081113
091020     MOVE 23                         TO CEE-PICSTR-LEN
091020     MOVE 'YYYY-MM-DD-HH.MI.SS.999'  TO CEE-PICSTR-TEXT
081113     MOVE SPACES                     TO CEE-WORK-DATM-BUFF
081113     CALL 'CEEDATM' USING CEE-WORK-SECS,      CEE-PICSTR,
081113                          CEE-WORK-DATM-BUFF, CEE-FC
081113
081113     IF CEE-SEVERITY NOT = ZERO
081113     OR CEE-MSG-NO   NOT = ZERO
081113       DISPLAY 'CEEDATM FAILED: CEE-SEVERITY=<' CEE-SEVERITY
081113                '> CEE-MSG-NO=<' CEE-MSG-NO
081113                '> SEV-CTL=<' CEE-CASE-SEV-CTL
081113                '> FAC-ID=<' CEE-FACILITY-ID '>'
081113     END-IF
081113
091020     MOVE CEE-WORK-DATM-BUFF(1:23)   TO WS-WSQL-TIMESTMP(1:23)
091020     MOVE ZERO                       TO WS-WSQL-TIMESTMP-ZZZ
091020
091020     MOVE WS-WSQL-ISODATE-YYYY       TO WS-WGREG-YYYYMMDD(1:4)
091020     MOVE WS-WSQL-ISODATE-MM         TO WS-WGREG-YYYYMMDD(5:2)
091020     MOVE WS-WSQL-ISODATE-DD         TO WS-WGREG-YYYYMMDD(7:2)
091020
091020     MOVE WS-WSQL-ISOTIME-HH         TO WS-WTIME-HHMMSS999(1:2)
091020     MOVE WS-WSQL-ISOTIME-MM         TO WS-WTIME-HHMMSS999(3:2)
091020     MOVE WS-WSQL-ISOTIME-SS         TO WS-WTIME-HHMMSS999(5:2)
091020     MOVE WS-WSQL-TIMESTMP-TTT       TO WS-WTIME-HHMMSS999(7:3)
081113
081113     COMPUTE WS-WDOW-NUM
081113       = FUNCTION MOD(
081113         FUNCTION INTEGER-OF-DATE(WS-WGREG-YYYYMMDD) 7) + 1
081113
081113     COMPUTE WS-WJUL-YYYYJJJ
081113       = FUNCTION DAY-OF-INTEGER(
081113         FUNCTION INTEGER-OF-DATE(WS-WGREG-YYYYMMDD))
091020
091020     MOVE WS-WSQL-ISODATE-MM         TO WS-WSQL-USADATE(1:2)
091020     MOVE '/'                        TO WS-WSQL-USADATE(3:1)
091020     MOVE WS-WSQL-ISODATE-DD         TO WS-WSQL-USADATE(4:2)
091020     MOVE '/'                        TO WS-WSQL-USADATE(6:1)
091020     MOVE WS-WSQL-ISODATE-YYYY       TO WS-WSQL-USADATE(7:4)
091020
091020     MOVE WS-WSQL-ISODATE-DD         TO WS-WSQL-EURDATE(1:2)
091020     MOVE '.'                        TO WS-WSQL-EURDATE(3:1)
091020     MOVE WS-WSQL-ISODATE-MM         TO WS-WSQL-EURDATE(4:2)
091020     MOVE '.'                        TO WS-WSQL-EURDATE(6:1)
091020     MOVE WS-WSQL-ISODATE-YYYY       TO WS-WSQL-EURDATE(7:4)
091020
091020     MOVE WS-WSQL-ISODATE            TO WS-WSQL-JISDATE
091020
091020     IF WS-WSQL-ISOTIME-HH > 12
091020       COMPUTE WS-HH = WS-WSQL-ISOTIME-HH - 12
091020       MOVE WS-HH                    TO WS-WSQL-USATIME(1:2)
091020     ELSE
091020       MOVE WS-WSQL-ISOTIME-HH       TO WS-WSQL-USATIME(1:2)
091020     END-IF
091020     MOVE ':'                        TO WS-WSQL-USATIME(3:1)
091020     MOVE WS-WSQL-ISOTIME-MM         TO WS-WSQL-USATIME(4:2)
091020     MOVE ' '                        TO WS-WSQL-USATIME(6:1)
091020     IF WS-WTIME-HHMMSS999 < 120000000
091020     OR WS-WTIME-HHMMSS999 = 240000000
091020       MOVE 'AM'                     TO WS-WSQL-USATIME(7:2)
091020     ELSE
091020       MOVE 'PM'                     TO WS-WSQL-USATIME(7:2)
091020     END-IF
091020
091020     MOVE WS-WSQL-ISOTIME            TO WS-WSQL-EURTIME
091020
091020     MOVE WS-WSQL-ISOTIME-HH         TO WS-WSQL-JISTIME(1:2)
091020     MOVE ':'                        TO WS-WSQL-JISTIME(3:1)
091020     MOVE WS-WSQL-ISOTIME-MM         TO WS-WSQL-JISTIME(4:2)
091020     MOVE ':'                        TO WS-WSQL-JISTIME(6:1)
091020     MOVE WS-WSQL-ISOTIME-SS         TO WS-WSQL-JISTIME(7:2)
081113     .
081113 1310-EXIT. EXIT.
      *****************************************************************
       1400-LOAD-BUILTIN-SYMBOLS.
      *****************************************************************
      *    THIS ROUTINE LOADS THE SYMBSUB BUILTIN SYMBOLS
      *****************************************************************
           MOVE '1400-LOAD-BUILTIN-SYMBOLS'
                                           TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    SET VALUE LEVEL FOR BUILTIN SYMBOLS,
      *    ANY INPUT SOURCE WILL OVERLAY THEM
081113     SET WS-LVL-BUILTIN-SYMBOL       TO TRUE
081113
081113     IF WS-CURRENT-TIMEZONE = 'LOCAL'
081113       MOVE WS-LOCAL-DATE-TIME       TO WS-WORK-DATE-TIME
081113     ELSE
081113       MOVE WS-UTC-DATE-TIME         TO WS-WORK-DATE-TIME
081113     END-IF
091020
091020     MOVE 'SQLTIMST'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-TIMESTMP           TO WS-VALUE
091020     MOVE +26                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'ISODATE'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-ISODATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'USADATE'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-USADATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'EURDATE'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-EURDATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'JISDATE'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-JISDATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'ISOTIME'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-ISOTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'USATIME'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-USATIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'EURTIME'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-EURTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'JISTIME'                  TO WS-NAME
091020     MOVE +7                         TO WS-NAME-LEN
091020     MOVE WS-WSQL-JISTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'YYYYMMDD'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD          TO WS-VALUE
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'MMDDYYYY'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)
081113     MOVE WS-WGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'MMDDYY'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)
081113     MOVE WS-WGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'DDMMYYYY'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)
081113     MOVE WS-WGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)
081113     MOVE WS-WGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'DDMMYY'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)
081113     MOVE WS-WGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)
081113     MOVE WS-WGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'YYYYJJJ'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-WJUL-YYYYJJJ            TO WS-VALUE
081113     MOVE +7                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'YYJJJ'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-WJUL-YYYYJJJ(3:5)       TO WS-VALUE
081113     MOVE +5                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'HHMM'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(1:4)    TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'SEC999'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(5:5)    TO WS-VALUE
081113     MOVE +5                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'SEC99'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(5:4)    TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'SEC9'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(5:3)    TO WS-VALUE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'MONNAM'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     EVALUATE WS-WGREG-YYYYMMDD(5:2)
081113       WHEN '01'   MOVE 'JANUARY'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN '02'   MOVE 'FEBRUARY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN '03'   MOVE 'MARCH'      TO WS-VALUE
081113                   MOVE +5           TO WS-VALUE-LEN
081113       WHEN '04'   MOVE 'APRIL'      TO WS-VALUE
081113                   MOVE +5           TO WS-VALUE-LEN
081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE
081113                   MOVE +3           TO WS-VALUE-LEN
081113       WHEN '06'   MOVE 'JUNE'       TO WS-VALUE
081113                   MOVE +4           TO WS-VALUE-LEN
081113       WHEN '07'   MOVE 'JULY'       TO WS-VALUE
081113                   MOVE +4           TO WS-VALUE-LEN
081113       WHEN '08'   MOVE 'AUGUST'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN '09'   MOVE 'SEPTEMBER'  TO WS-VALUE
081113                   MOVE +9           TO WS-VALUE-LEN
081113       WHEN '10'   MOVE 'OCTOBER'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN '11'   MOVE 'NOVEMBER'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN '12'   MOVE 'DECEMBER'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113     END-EVALUATE
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'MON3'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     EVALUATE WS-WGREG-YYYYMMDD(5:2)
081113       WHEN '01'   MOVE 'JAN'        TO WS-VALUE
081113       WHEN '02'   MOVE 'FEB'        TO WS-VALUE
081113       WHEN '03'   MOVE 'MAR'        TO WS-VALUE
081113       WHEN '04'   MOVE 'APR'        TO WS-VALUE
081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE
081113       WHEN '06'   MOVE 'JUN'        TO WS-VALUE
081113       WHEN '07'   MOVE 'JUL'        TO WS-VALUE
081113       WHEN '08'   MOVE 'AUG'        TO WS-VALUE
081113       WHEN '09'   MOVE 'SEP'        TO WS-VALUE
081113       WHEN '10'   MOVE 'OCT'        TO WS-VALUE
081113       WHEN '11'   MOVE 'NOV'        TO WS-VALUE
081113       WHEN '12'   MOVE 'DEC'        TO WS-VALUE
081113     END-EVALUATE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'WDAYNUM'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-WDOW-NUM                TO WS-VALUE
081113     MOVE +1                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'WDAYNAM'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     EVALUATE WS-WDOW-NUM
081113       WHEN 1      MOVE 'SUNDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 2      MOVE 'MONDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 3      MOVE 'TUESDAY'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN 4      MOVE 'WEDNESDAY'  TO WS-VALUE
081113                   MOVE +9           TO WS-VALUE-LEN
081113       WHEN 5      MOVE 'THURSDAY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN 6      MOVE 'FRIDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 7      MOVE 'SATURDAY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113     END-EVALUATE
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'USQLTIMST'                TO WS-NAME
091020     MOVE +9                         TO WS-NAME-LEN
091020     MOVE WS-USQL-TIMESTMP           TO WS-VALUE
091020     MOVE +26                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UISODATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-ISODATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UUSADATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-USADATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UEURDATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-EURDATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UJISDATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-JISDATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UISOTIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-ISOTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UUSATIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-USATIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UEURTIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-EURTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'UJISTIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-USQL-JISTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UYYMMDD'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(3:6)     TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UDATE'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(3:6)     TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UYR4'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(1:4)     TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UYR2'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(3:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UMON'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(5:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UDAY'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(7:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UWDAY'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     EVALUATE WS-UDOW-NUM
081113       WHEN 1      MOVE 'SUN'        TO WS-VALUE
081113       WHEN 2      MOVE 'MON'        TO WS-VALUE
081113       WHEN 3      MOVE 'TUE'        TO WS-VALUE
081113       WHEN 4      MOVE 'WED'        TO WS-VALUE
081113       WHEN 5      MOVE 'THU'        TO WS-VALUE
081113       WHEN 6      MOVE 'FRI'        TO WS-VALUE
081113       WHEN 7      MOVE 'SAT'        TO WS-VALUE
081113     END-EVALUATE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UJDAY'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-UJUL-YYYYJJJ(5:3)       TO WS-VALUE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UHHMMSS'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(1:6)    TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UTIME'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(1:6)    TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UHR'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(1:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UMIN'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(3:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'USEC'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(5:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UYYYYMMDD'                TO WS-NAME
081113     MOVE +9                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD          TO WS-VALUE
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UMMDDYYYY'                TO WS-NAME
081113     MOVE +9                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)
081113     MOVE WS-UGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UMMDDYY'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)
081113     MOVE WS-UGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UDDMMYYYY'                TO WS-NAME
081113     MOVE +9                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)
081113     MOVE WS-UGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)
081113     MOVE WS-UGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UDDMMYY'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-UGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)
081113     MOVE WS-UGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)
081113     MOVE WS-UGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UYYYYJJJ'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     MOVE WS-UJUL-YYYYJJJ            TO WS-VALUE
081113     MOVE +7                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UYYJJJ'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-UJUL-YYYYJJJ(3:5)       TO WS-VALUE
081113     MOVE +5                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UHHMM'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(1:4)    TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'USEC999'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(5:5)    TO WS-VALUE
081113     MOVE +5                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'USEC99'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(5:4)    TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'USEC9'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-UTIME-HHMMSS999(5:3)    TO WS-VALUE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UMONNAM'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     EVALUATE WS-UGREG-YYYYMMDD(5:2)
081113       WHEN '01'   MOVE 'JANUARY'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN '02'   MOVE 'FEBRUARY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN '03'   MOVE 'MARCH'      TO WS-VALUE
081113                   MOVE +5           TO WS-VALUE-LEN
081113       WHEN '04'   MOVE 'APRIL'      TO WS-VALUE
081113                   MOVE +5           TO WS-VALUE-LEN
081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE
081113                   MOVE +3           TO WS-VALUE-LEN
081113       WHEN '06'   MOVE 'JUNE'       TO WS-VALUE
081113                   MOVE +4           TO WS-VALUE-LEN
081113       WHEN '07'   MOVE 'JULY'       TO WS-VALUE
081113                   MOVE +4           TO WS-VALUE-LEN
081113       WHEN '08'   MOVE 'AUGUST'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN '09'   MOVE 'SEPTEMBER'  TO WS-VALUE
081113                   MOVE +9           TO WS-VALUE-LEN
081113       WHEN '10'   MOVE 'OCTOBER'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN '11'   MOVE 'NOVEMBER'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN '12'   MOVE 'DECEMBER'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113     END-EVALUATE
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UMON3'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     EVALUATE WS-UGREG-YYYYMMDD(5:2)
081113       WHEN '01'   MOVE 'JAN'        TO WS-VALUE
081113       WHEN '02'   MOVE 'FEB'        TO WS-VALUE
081113       WHEN '03'   MOVE 'MAR'        TO WS-VALUE
081113       WHEN '04'   MOVE 'APR'        TO WS-VALUE
081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE
081113       WHEN '06'   MOVE 'JUN'        TO WS-VALUE
081113       WHEN '07'   MOVE 'JUL'        TO WS-VALUE
081113       WHEN '08'   MOVE 'AUG'        TO WS-VALUE
081113       WHEN '09'   MOVE 'SEP'        TO WS-VALUE
081113       WHEN '10'   MOVE 'OCT'        TO WS-VALUE
081113       WHEN '11'   MOVE 'NOV'        TO WS-VALUE
081113       WHEN '12'   MOVE 'DEC'        TO WS-VALUE
081113     END-EVALUATE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UWDAYNUM'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     MOVE WS-UDOW-NUM                TO WS-VALUE
081113     MOVE +1                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'UWDAYNAM'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     EVALUATE WS-UDOW-NUM
081113       WHEN 1      MOVE 'SUNDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 2      MOVE 'MONDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 3      MOVE 'TUESDAY'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN 4      MOVE 'WEDNESDAY'  TO WS-VALUE
081113                   MOVE +9           TO WS-VALUE-LEN
081113       WHEN 5      MOVE 'THURSDAY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN 6      MOVE 'FRIDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 7      MOVE 'SATURDAY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113     END-EVALUATE
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LSQLTIMST'                TO WS-NAME
091020     MOVE +9                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-TIMESTMP           TO WS-VALUE
091020     MOVE +26                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LISODATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-ISODATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LUSADATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-USADATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LEURDATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-EURDATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LJISDATE'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-JISDATE            TO WS-VALUE
091020     MOVE +10                        TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LISOTIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-ISOTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LUSATIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-USATIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LEURTIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-EURTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
091020
091020     MOVE 'LJISTIME'                 TO WS-NAME
091020     MOVE +8                         TO WS-NAME-LEN
091020     MOVE WS-LSQL-JISTIME            TO WS-VALUE
091020     MOVE +8                         TO WS-VALUE-LEN
091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LYYYYMMDD'                TO WS-NAME
081113     MOVE +9                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD          TO WS-VALUE
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LMMDDYYYY'                TO WS-NAME
081113     MOVE +9                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)
081113     MOVE WS-LGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LMMDDYY'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)
081113     MOVE WS-LGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LDDMMYYYY'                TO WS-NAME
081113     MOVE +9                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)
081113     MOVE WS-LGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)
081113     MOVE WS-LGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)
081113     MOVE +8                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LDDMMYY'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)
081113     MOVE WS-LGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)
081113     MOVE WS-LGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LYYYYJJJ'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     MOVE WS-LJUL-YYYYJJJ            TO WS-VALUE
081113     MOVE +7                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LYYJJJ'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-LJUL-YYYYJJJ(3:5)       TO WS-VALUE
081113     MOVE +5                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LHHMM'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(1:4)    TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LSEC999'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(5:5)    TO WS-VALUE
081113     MOVE +5                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LSEC99'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(5:4)    TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LSEC9'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(5:3)    TO WS-VALUE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LMONNAM'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     EVALUATE WS-LGREG-YYYYMMDD(5:2)
081113       WHEN '01'   MOVE 'JANUARY'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN '02'   MOVE 'FEBRUARY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN '03'   MOVE 'MARCH'      TO WS-VALUE
081113                   MOVE +5           TO WS-VALUE-LEN
081113       WHEN '04'   MOVE 'APRIL'      TO WS-VALUE
081113                   MOVE +5           TO WS-VALUE-LEN
081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE
081113                   MOVE +3           TO WS-VALUE-LEN
081113       WHEN '06'   MOVE 'JUNE'       TO WS-VALUE
081113                   MOVE +4           TO WS-VALUE-LEN
081113       WHEN '07'   MOVE 'JULY'       TO WS-VALUE
081113                   MOVE +4           TO WS-VALUE-LEN
081113       WHEN '08'   MOVE 'AUGUST'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN '09'   MOVE 'SEPTEMBER'  TO WS-VALUE
081113                   MOVE +9           TO WS-VALUE-LEN
081113       WHEN '10'   MOVE 'OCTOBER'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN '11'   MOVE 'NOVEMBER'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN '12'   MOVE 'DECEMBER'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113     END-EVALUATE
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LMON3'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     EVALUATE WS-LGREG-YYYYMMDD(5:2)
081113       WHEN '01'   MOVE 'JAN'        TO WS-VALUE
081113       WHEN '02'   MOVE 'FEB'        TO WS-VALUE
081113       WHEN '03'   MOVE 'MAR'        TO WS-VALUE
081113       WHEN '04'   MOVE 'APR'        TO WS-VALUE
081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE
081113       WHEN '06'   MOVE 'JUN'        TO WS-VALUE
081113       WHEN '07'   MOVE 'JUL'        TO WS-VALUE
081113       WHEN '08'   MOVE 'AUG'        TO WS-VALUE
081113       WHEN '09'   MOVE 'SEP'        TO WS-VALUE
081113       WHEN '10'   MOVE 'OCT'        TO WS-VALUE
081113       WHEN '11'   MOVE 'NOV'        TO WS-VALUE
081113       WHEN '12'   MOVE 'DEC'        TO WS-VALUE
081113     END-EVALUATE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LWDAYNUM'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     MOVE WS-LDOW-NUM                TO WS-VALUE
081113     MOVE +1                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LWDAYNAM'                 TO WS-NAME
081113     MOVE +8                         TO WS-NAME-LEN
081113     EVALUATE WS-LDOW-NUM
081113       WHEN 1      MOVE 'SUNDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 2      MOVE 'MONDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 3      MOVE 'TUESDAY'    TO WS-VALUE
081113                   MOVE +7           TO WS-VALUE-LEN
081113       WHEN 4      MOVE 'WEDNESDAY'  TO WS-VALUE
081113                   MOVE +9           TO WS-VALUE-LEN
081113       WHEN 5      MOVE 'THURSDAY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113       WHEN 6      MOVE 'FRIDAY'     TO WS-VALUE
081113                   MOVE +6           TO WS-VALUE-LEN
081113       WHEN 7      MOVE 'SATURDAY'   TO WS-VALUE
081113                   MOVE +8           TO WS-VALUE-LEN
081113     END-EVALUATE
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113     .
081113 1400-EXIT. EXIT.
081113*****************************************************************
081113 1500-LOAD-SYSTEM-SYMBOLS.
081113*****************************************************************
081113*    THIS ROUTINE LOADS SYMBOLS FROM THE MVS STATIC SYSTEM SYMBOL
081113*    TABLE AND ALSO BUILDS VALUES FOR THE DYNAMIC SYSTEM SYMBOLS
081113*****************************************************************
081113     MOVE '1500-LOAD-SYSTEM-SYMBOLS' TO WS-PARAGRAPH-NAME
081113     IF WS-DEBUG-TRACE
081113       DISPLAY                          WS-PARAGRAPH-NAME
081113     END-IF
081113
081113*    SET VALUE LEVEL FOR SYSTEM SYMBOLS,
081113*    ANY INPUT SOURCE WILL OVERLAY THEM
081113     SET WS-LVL-STATIC-SYMBOL        TO TRUE
081113
081113*    SET ADDRESSABILITY TO THE SYSTEM SYMBOL TABLE
081113     SET ADDRESS OF PSA              TO NULL
081113     SET ADDRESS OF CVT              TO PSA-FLCCVT
081113     SET ADDRESS OF ECVT             TO CVT-CVTECVT
081113     SET ADDRESS OF SYMBT            TO ECVT-ECVTSYMT
081113
081113*    NOW WALK THE SYMBT ENTRIES TO RETRIEVE THE SYMBOLS
081113     SET SA-PTR                      TO ECVT-ECVTSYMT
081113     ADD +4                          TO SA-PTR-NUM
081113     MOVE SA-PTR-NUM                 TO SA-BASE
081113     PERFORM VARYING SYMBTE-X FROM 1 BY 1
081113     UNTIL SYMBTE-X > SYMBT-SYMBTE-CNT
081113
081113*      NAMES IN TABLE HAVE LEADING '&' AND TRAILING '.'
081113       IF SYMBTE-SYMB-LEN(SYMBTE-X) > 2
081113         COMPUTE SA-PTR-NUM = SA-BASE + SYMBTE-SYMB-OFF(SYMBTE-X)
081113         SET ADDRESS OF SYMBTE-DAT   TO SA-PTR
081113         COMPUTE WS-NAME-LEN = SYMBTE-SYMB-LEN(SYMBTE-X) - 2
081113         MOVE SYMBTE-DAT (2:WS-NAME-LEN)
081113                                     TO WS-NAME
081113
081113         COMPUTE SA-PTR-NUM = SA-BASE + SYMBTE-TEXT-OFF(SYMBTE-X)
081113         SET ADDRESS OF SYMBTE-DAT   TO SA-PTR
081113         MOVE SYMBTE-TEXT-LEN(SYMBTE-X) TO WS-VALUE-LEN
081113         MOVE SYMBTE-DAT (1:WS-VALUE-LEN)
081113                                     TO WS-VALUE
081113         PERFORM 8810-ADD-SA-ENTRY                 THRU 8810-EXIT
081113       END-IF
081113     END-PERFORM
081113
081113*    NOW BUILD AND LOAD THE DYNAMIC SYSTEM SYMBOLS
081113
081113*    SET VALUE LEVEL FOR DYNAMIC SYSTEM SYMBOLS,
081113*    ANY INPUT SOURCE WILL OVERLAY THEM
081113     SET WS-LVL-DYNAMIC-SYMBOL       TO TRUE
081113
081113     MOVE 'SYSUID'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-SYSUID                  TO WS-VALUE
081113     PERFORM VARYING WS-VALUE-LEN FROM 8 BY -1
081113       UNTIL WS-VALUE-LEN < 1
081113          OR WS-SYSUID(WS-VALUE-LEN:1) NOT = SPACES
081113     END-PERFORM
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'JOBNAME'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-JOBNAME                 TO WS-VALUE
081113     PERFORM VARYING WS-VALUE-LEN FROM 8 BY -1
081113       UNTIL WS-VALUE-LEN < 1
081113          OR WS-JOBNAME(WS-VALUE-LEN:1) NOT = SPACES
081113     END-PERFORM
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
090505
090505     MOVE 'JOBID'                    TO WS-NAME
090505     MOVE +5                         TO WS-NAME-LEN
090505     MOVE WS-JOBID                   TO WS-VALUE
090505     PERFORM VARYING WS-VALUE-LEN FROM 8 BY -1
090505       UNTIL WS-VALUE-LEN < 1
090505          OR WS-JOBID(WS-VALUE-LEN:1) NOT = SPACES
090505     END-PERFORM
090505     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     IF WS-CURRENT-TIMEZONE = 'LOCAL'
081113       MOVE WS-LOCAL-DATE-TIME       TO WS-WORK-DATE-TIME
081113     ELSE
081113       MOVE WS-UTC-DATE-TIME         TO WS-WORK-DATE-TIME
081113     END-IF
081113
081113     MOVE 'YYMMDD'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(3:6)     TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'DATE'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(3:6)     TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'YR4'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(1:4)     TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'YR2'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(3:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'MON'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(5:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'DAY'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-WGREG-YYYYMMDD(7:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'WDAY'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     EVALUATE WS-WDOW-NUM
081113       WHEN 1      MOVE 'SUN'        TO WS-VALUE
081113       WHEN 2      MOVE 'MON'        TO WS-VALUE
081113       WHEN 3      MOVE 'TUE'        TO WS-VALUE
081113       WHEN 4      MOVE 'WED'        TO WS-VALUE
081113       WHEN 5      MOVE 'THU'        TO WS-VALUE
081113       WHEN 6      MOVE 'FRI'        TO WS-VALUE
081113       WHEN 7      MOVE 'SAT'        TO WS-VALUE
081113     END-EVALUATE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'JDAY'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-WJUL-YYYYJJJ(5:3)       TO WS-VALUE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'HHMMSS'                   TO WS-NAME
081113     MOVE +6                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(1:6)    TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'TIME'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(1:6)    TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'HR'                       TO WS-NAME
081113     MOVE +2                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(1:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'MIN'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(3:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'SEC'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-WTIME-HHMMSS999(5:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LYYMMDD'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(3:6)     TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LDATE'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(3:6)     TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LYR4'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(1:4)     TO WS-VALUE
081113     MOVE +4                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LYR2'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(3:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LMON'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(5:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LDAY'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-LGREG-YYYYMMDD(7:2)     TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LWDAY'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     EVALUATE WS-LDOW-NUM
081113       WHEN 1      MOVE 'SUN'        TO WS-VALUE
081113       WHEN 2      MOVE 'MON'        TO WS-VALUE
081113       WHEN 3      MOVE 'TUE'        TO WS-VALUE
081113       WHEN 4      MOVE 'WED'        TO WS-VALUE
081113       WHEN 5      MOVE 'THU'        TO WS-VALUE
081113       WHEN 6      MOVE 'FRI'        TO WS-VALUE
081113       WHEN 7      MOVE 'SAT'        TO WS-VALUE
081113     END-EVALUATE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LJDAY'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-LJUL-YYYYJJJ(5:3)       TO WS-VALUE
081113     MOVE +3                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LHHMMSS'                  TO WS-NAME
081113     MOVE +7                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(1:6)    TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LTIME'                    TO WS-NAME
081113     MOVE +5                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(1:6)    TO WS-VALUE
081113     MOVE +6                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LHR'                      TO WS-NAME
081113     MOVE +3                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(1:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LMIN'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(3:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113
081113     MOVE 'LSEC'                     TO WS-NAME
081113     MOVE +4                         TO WS-NAME-LEN
081113     MOVE WS-LTIME-HHMMSS999(5:2)    TO WS-VALUE
081113     MOVE +2                         TO WS-VALUE-LEN
081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT
081113     .
081113 1500-EXIT. EXIT.
      *****************************************************************
       1600-GET-JESJCL.
      *****************************************************************
      *    THIS ROUTINE CALLS SDSF TO PRINT THE JESJCL TO A FILE
      *****************************************************************
           MOVE '1600-GET-JESJCL'          TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      * ALLOCATE ISFIN
           MOVE SPACES                     TO WS-IKJEFT-BUFFER
           STRING 'ALLOC DD(ISFIN) '                DELIMITED BY SIZE
                  'DSORG(PS) LRECL(80) BLKSIZE(0) RECFM(F B) '
                                                    DELIMITED BY SIZE
                  'UNIT(SYSDA) SPACE(1,1) TRACKS '  DELIMITED BY SIZE
                  'NEW DELETE'                      DELIMITED BY SIZE
                                         INTO WS-IKJEFT-BUFFER
           END-STRING
           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT

      * FILL ISFIN WITH DATA
           MOVE WS-JOBNAME                 TO WS-ISFIN-JOBNM
090505     MOVE WS-JOBID                   TO WS-ISFIN-JOBID

           OPEN OUTPUT ISFIN-FILE

           PERFORM VARYING ISFX FROM 1 BY 1
           UNTIL ISFX > WS-ISFX-MAX
             IF  WS-DEBUG-JESJCL
             AND WS-DEBUG-INPUT
               DISPLAY WS-ISFIN(ISFX)
             END-IF
             WRITE FD-ISFIN-REC          FROM WS-ISFIN(ISFX)
           END-PERFORM

           CLOSE ISFIN-FILE

      * ALLOCATE ISFOUT
           MOVE 'ALLOC DD(ISFOUT) DUMMY'   TO WS-IKJEFT-BUFFER
           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT

      * ALLOCATE JESJCL
           MOVE SPACES                     TO WS-IKJEFT-BUFFER
           STRING 'ALLOC DD(OUTJCL) '               DELIMITED BY SIZE
                  'DSORG(PS) LRECL(133) BLKSIZE(0) RECFM(F B A) '
                                                    DELIMITED BY SIZE
                  'UNIT(SYSDA) SPACE(1,1) TRACKS '  DELIMITED BY SIZE
                  'NEW DELETE '                     DELIMITED BY SIZE
                                         INTO WS-IKJEFT-BUFFER
           END-STRING
           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT

      * CALL SDSF
           MOVE 'SDSF DA'                  TO WS-IKJEFT-BUFFER
           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT

      * FREE ISFIN
           MOVE 'FREE DD(ISFIN)'           TO WS-IKJEFT-BUFFER
           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT

      * FREE ISFOUT
           MOVE 'FREE DD(ISFOUT)'          TO WS-IKJEFT-BUFFER
           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT
           .
       1600-EXIT. EXIT.
      *****************************************************************
       1700-PARSE-JESJCL.
      *****************************************************************
      *    THIS ROUTINE PARSES THE JESJCL TO FIND THE SYMBOL VALUES
      *****************************************************************
      *    ALTHOUGH WE ARE ONLY INTERESTED IN SET, EXEC, PROC & PEND
      *    JCL CARDS, WE HAVE TO PARSE ALL OF THE CARDS TO PROPERLY
      *    DETECT AND HANDLE COMMENT CONTINUATION CARDS, WHICH COULD
      *    MAKE OTHERWISE VALID JCL CARDS ACTUALLY BE COMMENTS.
      *****************************************************************
           MOVE '1700-PARSE-JESJCL'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      * OPEN JESJCL
           OPEN INPUT JESJCL-FILE
           MOVE ZERO                       TO WS-JESJCL-CNT

           IF WS-DEBUG-JESJCL
             DISPLAY '*************************************************'
             DISPLAY '*****             JESJCL FOLLOWS            *****'
             DISPLAY '*************************************************'
           END-IF

           MOVE 'N'                        TO WS-JESJCL-EOF-SW
           PERFORM UNTIL WS-JESJCL-EOF

             READ JESJCL-FILE
               AT END   MOVE 'Y'           TO WS-JESJCL-EOF-SW
               NOT AT END
                 ADD +1                    TO WS-JESJCL-CNT

                 IF (JESJCL-DATA(1:2) = '//' OR 'XX' OR '++')
                 AND JESJCL-DATA(3:1) NOT = '*'
                   PERFORM 1710-PARSE-JCL-LINE           THRU 1710-EXIT
                 END-IF
             END-READ
           END-PERFORM

           IF WS-DEBUG-JESJCL
             DISPLAY '*************************************************'
             DISPLAY '*****               END JESJCL              *****'
             DISPLAY '*************************************************'
           END-IF

           CLOSE JESJCL-FILE

      * FREE JESJCL
           MOVE 'FREE DD(OUTJCL)'          TO WS-IKJEFT-BUFFER
           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT

      * IF NO JESJCL LINES SET RETURN CODE TO 12
           IF WS-JESJCL-CNT = ZERO
             DISPLAY '**** ERROR - JESJCL NOT FOUND WITHIN SDSF'
             DISPLAY '**** THE JESJCL DATA COULD NOT BE READ TO'
                     ' OBTAIN THE SYMBOLIC VARIABLE VALUES.  SYMBOL'
                     ' SUBSTITUTION INCOMPLETE.'
             MOVE 12                           TO WS-LASTCC
             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
           END-IF
           .
       1700-EXIT. EXIT.
      ******************************************************************
       1710-PARSE-JCL-LINE.
      ******************************************************************
      *    THIS ROUTINE PARSES AND PROCESSES A JCL LINE
      ******************************************************************
           MOVE '1710-PARSE-JCL-LINE'      TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           IF  WS-DEBUG-JESJCL
           AND WS-DEBUG-INPUT
             DISPLAY JESJCL-DATA
           END-IF

           MOVE JCUR-CONTINUED-SW          TO JPRV-CONTINUED-SW
           MOVE SPACES                     TO JCUR-CONTINUED-SW

      *    IF THIS IS THE START OF A NEW JCL CARD, CLEAR THE JDATA
           IF JPRV-CONTINUED-SW = SPACES
080310       MOVE JOPER                    TO JPRV-OPER
             MOVE SPACES                   TO JID
             MOVE SPACES                   TO JNAME
             MOVE SPACES                   TO JOPER
             MOVE SPACES                   TO JPARAM
             MOVE ZERO                     TO JPLEN
           END-IF

      *    IF PREVIOUS LINE ENDED WITH A CONTINUED COMMENT, THEN THIS
      *    ENTIRE LINE IS ALSO A COMMENT, SO WE WILL DISCARD IT.
      *    WE ONLY NEED TO KNOW IF IT IS ALSO A CONTINUED COMMENT.
           IF JPRV-CONTINUED-COMMENT
             IF JESJCL-DATA(JDATAMAX:1) NOT = SPACES
               MOVE 'C'                    TO JCUR-CONTINUED-SW
             END-IF
             GO TO 1710-EXIT
           END-IF

      *    ALL JCL LINES MUST BE PARSED TO FIND COMMENT CONTINUATIONS
      *    WHICH CAN CAUSE OTHERWISE VALID JCL TO BECOME COMMENT LINES
           MOVE SPACES                     TO JESJCL-SEQNO
           MOVE ZERO                       TO JEX

           PERFORM VARYING JPHASE FROM 1 BY 1
           UNTIL JPHASE > 4

             PERFORM 1711-PARSE-JCL-NODE                 THRU 1711-EXIT

             EVALUATE JPHASE
               WHEN 1
      *          IF IT IS A NEW JCL CARD, SAVE THE NAME
                 IF JPRV-CONTINUED-SW = SPACES
                   MOVE JESJCL-DATA(JSX:2) TO JID
                   COMPUTE JLX = (JEX - JSX) - 1
                   IF JLX > ZERO
                     MOVE JESJCL-DATA(JSX + 2:JLX)
                                           TO JNAME
                   END-IF
                 END-IF
               WHEN 2
      *          IF IT IS A NEW JCL CARD, SAVE THE OPER
                 COMPUTE JLX = (JEX - JSX) + 1
                 IF JPRV-CONTINUED-SW = SPACES
                 AND JLX > ZERO
                   MOVE JESJCL-DATA(JSX:JLX)
                                           TO JOPER
                 END-IF
      *        CONCAT THE PARAM DATA FOR THE CARDS
               WHEN 3
                 COMPUTE JLX = (JEX - JSX) + 1
                 IF JLX > ZERO
                   MOVE JESJCL-DATA(JSX:JLX)
                                           TO JPARAM(JPLEN + 1:JLX)
                   ADD JLX                 TO JPLEN
                 END-IF
               WHEN OTHER
                 CONTINUE
             END-EVALUATE
           END-PERFORM

      *    IF CARD ENDED WITH A CONTINUED QUOTE, DO NOT PROCESS IT YET.
      *    WAIT UNTIL THE QUOTED DATA IS COMPLETE.
           IF NOT JCUR-CONTINUED-QUOTE
             PERFORM 2000-PROCESS-JCL-PARAM              THRU 2000-EXIT
             MOVE SPACES                   TO JPARAM
             MOVE ZERO                     TO JPLEN
           END-IF
           .
       1710-EXIT. EXIT.
      ******************************************************************
       1711-PARSE-JCL-NODE.
      ******************************************************************
      *    THIS ROUTINE PARSES OFF THE NEXT NODE ON THE JCL LINE
      ******************************************************************
           MOVE '1711-PARSE-JCL-NODE'      TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           COMPUTE JSX = JEX + 1

      *    IF PREV LINE WAS CONTINUED, THERE WILL NOT BE AN OPER NODE
           IF  JPHASE = 2
           AND (JPRV-CONTINUED-JCL
             OR JPRV-CONTINUED-QUOTE)
               GO TO 1711-EXIT
           END-IF

      *    ALL WE NEED TO KNOW ABOUT COMMENTS IS CONTINUATION
           IF JPHASE = 4
      *      IF THIS CARD NOT ALREADY CONTINUED BY PARAM OR QUOTES,
      *      IT CAN BE CONTINUED BY COMMENTS IN COLUMN 72
             IF  JCUR-CONTINUED-SW = SPACES
             AND JESJCL-DATA(JDATAMAX:1) NOT = SPACES
               MOVE 'C'                    TO JCUR-CONTINUED-SW
             END-IF
             GO TO 1711-EXIT
           END-IF

      *    IF LOOKING FOR CONTINUED QUOTES, START AT COL 16
           IF  JPHASE = 3
           AND JPRV-CONTINUED-QUOTE
             MOVE 16                       TO JSX
             MOVE 'Y'                      TO JIN-QUOTES-SW
           ELSE
      *    ELSE REMOVE LEADING SPACES FROM START OF NODE
             PERFORM VARYING JSX FROM JSX BY 1
               UNTIL JSX >= JDATAMAX
               OR JESJCL-DATA(JSX:1) NOT = ' '
             END-PERFORM
           END-IF

           IF  WS-DEBUG-JESJCL
           AND WS-DEBUG-PARSING
             DISPLAY 'OLD JEX=<' JEX '> JSX=<' JSX '>'
           END-IF

      *    FIND END OF NODE
           MOVE 'N'                        TO JEND-NODE-SW

           PERFORM VARYING JEX FROM JSX BY 1
           UNTIL JEX >= JDATAMAX
           OR JEND-NODE

      *      LOOK FOR END OF QUOTED STRING, ALLOW FOR DOUBLE QUOTES
             IF JIN-QUOTES
               IF JESJCL-DATA(JEX:1) = ''''
                 ADD 1                     TO JEX
                 IF JESJCL-DATA(JEX:1) NOT = ''''
                 OR JEX >= JDATAMAX
                   MOVE 'N'                TO JIN-QUOTES-SW
                 END-IF
               END-IF
             END-IF

      *      LOOK FOR BEGIN OF QUOTED STRING OR END OF PARAM
             IF    JEX < JDATAMAX
             AND NOT JIN-QUOTES
               EVALUATE JESJCL-DATA(JEX:1)
                 WHEN ''''
                   MOVE 'Y'                TO JIN-QUOTES-SW
                 WHEN ' '
                   MOVE 'Y'                TO JEND-NODE-SW
                   SUBTRACT 1            FROM JEX
                   IF JESJCL-DATA(JEX:1) = ','
                     MOVE 'J'              TO JCUR-CONTINUED-SW
                   END-IF
                   SUBTRACT 1             FROM JEX
                 WHEN OTHER
                   CONTINUE
               END-EVALUATE
             END-IF
           END-PERFORM

      *    IF END OF NODE NOT FOUND, DATA ENDED IN COL 71
           IF NOT JEND-NODE
             COMPUTE JEX = JDATAMAX - 1
             EVALUATE TRUE
               WHEN JIN-QUOTES
                 MOVE 'Q'                  TO JCUR-CONTINUED-SW
               WHEN JESJCL-DATA(JEX:1) = ','
                 MOVE 'J'                  TO JCUR-CONTINUED-SW
               WHEN OTHER
                 CONTINUE
             END-EVALUATE
           END-IF
           .
       1711-EXIT. EXIT.
      ******************************************************************
091020 1800-DISPLAY-SYMBOLS.
      ******************************************************************
      *    THIS ROUTINE DISPLAYS THE SYMBOLS THAT ARE IN USE
      ******************************************************************
091020     MOVE '1800-DISPLAY-SYMBOLS'     TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    FIND THE LENGTH OF THE LONGEST NAME, MINIMUM OF 6 FOR HEADER
           MOVE +6                         TO WS-LEN
           PERFORM VARYING SAX FROM 1 BY 1
           UNTIL SAX > SA-CNT
             IF SA-NAME-LEN (SAX) > WS-LEN
               MOVE SA-NAME-LEN (SAX)      TO WS-LEN
             END-IF
           END-PERFORM

           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '**** THE FOLLOWING SUBSTITUTION VALUES '
                   'ARE AVAILABLE TO USE:'
           DISPLAY '****************************************'
                   '****************************************'
081113     MOVE 'SYMBOL'                   TO WS-NAME
081113     DISPLAY 'SOURCE OF VALUE     '
081113       WS-NAME(1:WS-LEN) '    VALUE'

           PERFORM VARYING SAX FROM 1 BY 1
           UNTIL SAX > SA-CNT
081113       EVALUATE TRUE
081113         WHEN SA-LVL-BUILTIN-SYMBOL    (SAX)
091020           MOVE SPACES               TO WS-VALUE-SOURCE
091020           STRING PGM-NAME              DELIMITED BY SPACES
091020                  ' BUILTIN'            DELIMITED BY SIZE
091020                                   INTO WS-VALUE-SOURCE
081113         WHEN SA-LVL-STATIC-SYMBOL     (SAX)
081113           MOVE 'SYSTEM STATIC   '   TO WS-VALUE-SOURCE
081113         WHEN SA-LVL-DYNAMIC-SYMBOL    (SAX)
081113           MOVE 'SYSTEM DYNAMIC  '   TO WS-VALUE-SOURCE
081113         WHEN SA-LVL-BASE-JCL-VALUE    (SAX)
081113           MOVE 'JCL SET STMT    '   TO WS-VALUE-SOURCE
081113         WHEN SA-LVL-DFLT-PROC-VALUE (SAX)
081113           MOVE 'PROC DEFAULT    '   TO WS-VALUE-SOURCE
081113         WHEN SA-LVL-EXEC-PROC-VALUE (SAX)
081113           MOVE 'EXEC PROC STMT  '   TO WS-VALUE-SOURCE
081113         WHEN SA-LVL-PARM-OVERRIDE     (SAX)
081113           MOVE 'PARM OVERRIDE   '   TO WS-VALUE-SOURCE
081113         WHEN OTHER
081113           STRING 'UNK:LVL-IND="'       DELIMITED BY SIZE
081113                  SA-LVL-IND(SAX)       DELIMITED BY SIZE
081113                  '"'                   DELIMITED BY SIZE
081113                                   INTO WS-VALUE-SOURCE
081113       END-EVALUATE
081113
081113       DISPLAY WS-VALUE-SOURCE               ' | &'
081113         SA-NAME (SAX)(1:WS-LEN)             ' | <'
               SA-VALUE(SAX)(1:SA-VALUE-LEN(SAX))  '>'
           END-PERFORM

           DISPLAY '****************************************'
                   '****************************************'
           .
091020 1800-EXIT. EXIT.
      ******************************************************************
       2000-PROCESS-JCL-PARAM.
      ******************************************************************
      *    THIS ROUTINE PROCESSES THE JCL PARAM DATA THAT WAS PARSED
      ******************************************************************
           MOVE '2000-PROCESS-JCL-PARAM'   TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           IF WS-DEBUG-JESJCL
             DISPLAY JPRV-CONTINUED-SW
                     JCUR-CONTINUED-SW ' '
                     JID ' ' JNAME ' ' JOPER ' <' JPARAM(1:JPLEN) '>'
           END-IF

080310*    IF THIS IS THE FIRST LINE OF A NEW JCL CARD AND THE PREVIOUS
080310*    CARD WAS A PROC DEFINITION, RESET PROC VALUE LEVELS TO BASE
080310*    JCL TO HANDLE SETS WITHIN PROC AND NEXT EXEC PROC STATEMENT
080310     IF JPRV-CONTINUED-SW = SPACES
080310     AND JPRV-OPER = 'PROC'
080310       PERFORM VARYING SAX FROM 1 BY 1
080310         UNTIL SAX > SA-CNT
081113           IF SA-LVL-DFLT-PROC-VALUE(SAX)
081113           OR SA-LVL-EXEC-PROC-VALUE(SAX)
081113             SET SA-LVL-BASE-JCL-VALUE(SAX)
081113                                     TO TRUE
080310           END-IF
080310       END-PERFORM
080310     END-IF

      *    IF WE WERE WITHIN A PROC, AND THIS IS NOW THE FIRST CARD
081107*    OF A MAIN JCL CARD, AND NOT A PROC OVERRIDE CARD, CLEAR THE
      *    WITHIN PROC SWITCH AND RESTORE THE SYMBOLS TO THE VALUES
      *    THAT WERE SAVED BEFORE THE EXEC PROC STATEMENT
           IF  WS-WITHIN-PROC-SW = 'Y'
           AND JPRV-CONTINUED-SW = SPACES
           AND JID = '//'
081107       PERFORM VARYING WS-LX FROM 1 BY 1
081107         UNTIL WS-LX > LENGTH OF JNAME
081107         OR    JNAME(WS-LX:1) = '.'
081107       END-PERFORM
081107       IF WS-LX > LENGTH OF JNAME
               MOVE 'N'                    TO WS-WITHIN-PROC-SW
               MOVE 'N'                    TO WS-NESTED-PROC-SW
               MOVE SS-SAVE-AREA           TO SA-ARRAY-AREA
081107       END-IF
           END-IF

      *    HERE IS WHERE WE DETERMINE IF WE NEED TO USE THIS DATA
      *    TO UPDATE THE SYMBOL TABLE
           EVALUATE JOPER
             WHEN 'SET'
      *        IGNORE SET STATEMENTS DURING INSTREAM PROC DEFINITIONS
               IF JINSTREAM-PROC
                 CONTINUE
               ELSE
                 IF JPLEN > ZERO
      *            SET VALUE LEVEL FOR JCL SET STATEMENT SYMBOLS.
      *            PROC DEFS, EXECS, AND PARMS WILL OVERLAY THEM
081113             SET WS-LVL-BASE-JCL-VALUE
081113                                     TO TRUE
                   MOVE JPLEN              TO WS-INPUT-PARMS-LEN
                   MOVE JPARAM(1:JPLEN)    TO WS-INPUT-PARMS
                   PERFORM 5000-PROCESS-PARMS            THRU 5000-EXIT
                 END-IF
               END-IF

             WHEN 'PROC'
      *        IF // IT'S AN INSTREAM PROC DEFINITION, JUST SET SWITCH
               IF JID = '//'
                 MOVE 'Y'                  TO JINSTREAM-PROC-SW
      *        ELSE IT'S EXECUTION OF PROC DEF, PROCESS THE SYMBOLS
               ELSE
                 IF JPLEN > ZERO
      *            SET VALUE LEVEL FOR SYMBOLS ON PROC DEFINITION.
      *            EXECS AND PARMS WILL OVERLAY THEM
081113             SET WS-LVL-DFLT-PROC-VALUE
081113                                     TO TRUE
                   MOVE JPLEN              TO WS-INPUT-PARMS-LEN
                   MOVE JPARAM(1:JPLEN)    TO WS-INPUT-PARMS
                   PERFORM 5000-PROCESS-PARMS            THRU 5000-EXIT
                 END-IF
               END-IF

             WHEN 'PEND'
      *        CHECK FOR END OF INSTREAM PROC DEFINITION
               IF  JID = '//'
               AND JPRV-CONTINUED-SW = SPACES
               AND JINSTREAM-PROC
                 MOVE 'N'                  TO JINSTREAM-PROC-SW
               END-IF

             WHEN 'EXEC'
090505         PERFORM 2100-HANDLE-EXEC-CARD             THRU 2100-EXIT

      *      IGNORE ALL JCL CARD TYPES EXCEPT SET, EXEC, PROC & PEND
             WHEN OTHER
               CONTINUE

           END-EVALUATE
           .
       2000-EXIT. EXIT.
090505******************************************************************
090505 2100-HANDLE-EXEC-CARD.
090505******************************************************************
090505*    THIS ROUTINE HANDLES JCL EXEC CARDS
090505******************************************************************
090505     MOVE '2100-HANDLE-EXEC-CARD'    TO WS-PARAGRAPH-NAME
090505     IF WS-DEBUG-TRACE
090505       DISPLAY                          WS-PARAGRAPH-NAME
090505     END-IF

      *    IGNORE EXEC STATEMENTS DURING INSTREAM PROC DEFINITION
           IF JINSTREAM-PROC
             GO TO 2100-EXIT
           END-IF

090505     IF JPRV-CONTINUED-SW = SPACES
             IF (JPLEN > 3 AND JPARAM(1:4) = 'PGM=')
             OR (JPLEN > 1 AND JPARAM(1:2) = '*.')
             OR (JPLEN > 6 AND JPARAM(1:7) = 'JCLTEST')
             OR (JPLEN > 6 AND JPARAM(1:7) = 'JSTTEST')
090505         SET JEXEC-TYPE-PGM          TO TRUE
090505       ELSE
090505         SET JEXEC-TYPE-PROC         TO TRUE
090505       END-IF
090505     END-IF

      *    HANDLE EXEC STATEMENTS THAT EXECUTE PGMS
090505     IF JEXEC-TYPE-PGM
             IF JPRV-CONTINUED-SW = SPACES
      *        IF THIS IS THE STEP THAT IS EXECUTING THIS PGM,
      *        SET EOF ON THE JESJCL, WE ARE DONE WITH THE JCL!
               ADD +1                      TO JSTEPNO
               IF JSTEPNO = WS-STEPNUM
                 MOVE 'Y'                  TO WS-JESJCL-EOF-SW
               ELSE
      *          IF THE FIRST STEP IN THE NESTED PROC WORLD IS NOT
      *          THIS PROGRAM, FLIP THE SWITCH FULLY ON
                 IF WS-NESTED-PROC-SW = '1'
                   MOVE 'Y'                TO WS-NESTED-PROC-SW
                 END-IF
               END-IF
             END-IF

      *    HANDLE EXEC STATEMENTS THAT EXECUTE PROCS
           ELSE
      *      IF THIS IS THE FIRST CARD OF AN EXEC PROC,
      *      REMOVE EVERYTHING UP TO THE FIRST COMMA OR BLANK
      *      BECAUSE IT IS THE NAME OF THE PROC, NOT A SYMBOL.
             IF JPRV-CONTINUED-SW = SPACES
               IF JID = '//'
      *          AT START OF AN EXEC PROC FROM MAIN JCL, SAVE THE
      *          SYMBOLS SO THEY CAN BE RESTORED AFTER THE PROC
                 MOVE 'Y'                  TO WS-WITHIN-PROC-SW
                 MOVE SA-ARRAY-AREA        TO SS-SAVE-AREA
               ELSE
      ******************************************************************
      *****              WARNING - DRAGONS BE HERE!                *****
      *****        ALL YE WHO ENTER HERE ABANDON ALL HOPE!         *****
      *****  YE HAVE NOW ENTERED THE NETHER WORLD OF NESTED PROCS  *****
      *****        FROM WHENCE THERE IS NO DETECTABLE END!         *****
      ******************************************************************
      * WHEN WE ENTER THE FIRST PROC FROM THE MAIN JCL WE SAVE THE
      * STATE OF THE SYMBOLS AND WE RESTORE THEM WHEN WE RETURN TO THE
      * MAIN JCL, WE WOULD LIKE TO DO THE SAME WITH EACH NESTED PROC.
      *
      * THE PROBLEM WE HAVE WITH NESTED PROCS IS THAT WE CANNOT TELL
      * WHERE A NESTED PROC ENDS.  SINCE WE CANNOT TELL WHERE THE PROC
      * ENDS WE CANNOT TELL IF SUBSEQUENT PROC STATEMENTS ARE NESTED
      * DEEPER OR ARE AT THE SAME LEVEL, WHICH STEPS ARE EXECUTED IN
      * WHICH PROCS, WHAT THE SCOPE OF THE SYMBOLS ARE, ETC., ETC.
      *
      * SYMBOL VALUES THAT ARE CHANGED BY THE "EXEC" STATEMENT OR THE
      * NESTED PROCS "PROC" STATEMENT OR BY ANY "SET" STATEMENTS WITHIN
      * THE NESTED PROC ARE LIMITED IN SCOPE TO WITHIN THAT PROC AND
      * ANY DEEPER NESTED PROCS.  SINCE WE CANNOT TELL WHERE THE NESTED
      * PROC ENDS, WE HAVE NO WAY TO DETERMINE WHEN TO RESTORE THE
      * VALUES TO THEIR FORMER STATES.
      *
      * THE ONE CASE WHERE WE KNOW WE ARE SAFE WITHIN NESTED PROCS IS
      * WHEN WE ARE THE FIRST PROGRAM EXECUTED WITHIN THE FIRST NESTED
      * PROC.  IN THIS CASE WE KNOW THAT WE ARE INTENDED TO RECEIVE THE
      * ALTERED SYMBOL VALUES.  WE WILL ALLOW FOR THIS SPECIAL CASE.
      *
      * THE BEST WE CAN DO FOR THE OTHER CASES IS TO TRACK VALUES THAT
      * GET CHANGED AND MONITOR TO SEE IF WE ACTUALLY USE ANY OF THOSE
      * CHANGED VALUES BEFORE THEY GET RESTORED BY RETURNING TO THE
      * MAIN JCL.  IF THEY ARE USED, WE WILL ISSUE A HIGHLY DETAILED
      * WARNING MESSAGE PROVIDING THE USER INSTRUCTIONS FOR A
      * WORK-AROUND AND SET THE RETURN CODE TO 8.
      ******************************************************************
      *                SET FLAG FOR POTENTIAL WARNING THAT SYMBOLIC
      *                VALUES MAY BE INCORRECT.  WE SET IT TO "1" SO WE
      *                CAN DETECT IF WE ARE THE FIRST PGM IN THE NESTED
      *                PROC WORLD, IF NOT WE CHANGE IT TO "Y" LATER.
                 MOVE '1'                  TO WS-NESTED-PROC-SW
               END-IF
               PERFORM VARYING WS-BX FROM 1 BY 1
                 UNTIL WS-BX > JPLEN
                    OR JPARAM(WS-BX:1) = (',' OR ' ')
               END-PERFORM
               ADD +1                      TO WS-BX
               COMPUTE WS-LX = (JPLEN - WS-BX) + 1
             ELSE
               MOVE 1                      TO WS-BX
               MOVE JPLEN                  TO WS-LX
             END-IF

             IF WS-LX > ZERO
      *        SET LEVEL FOR SYMBOLS ON EXEC PROC STATEMENTS.
      *        ONLY PARMS OVERRIDE THEM
081113         SET WS-LVL-EXEC-PROC-VALUE  TO TRUE
               MOVE WS-LX                  TO WS-INPUT-PARMS-LEN
               MOVE JPARAM(WS-BX:WS-LX)    TO WS-INPUT-PARMS
               PERFORM 5000-PROCESS-PARMS                THRU 5000-EXIT
             END-IF
           END-IF
090505     .
090505 2100-EXIT. EXIT.
100313******************************************************************
100313 3000-PROCESS-LIBR-FILE.
100313******************************************************************
100313*    THIS ROUTINE PROCESSES ONE LIBR FILE
100313******************************************************************
100313     MOVE '3000-PROCESS-LIBR-FILE' TO WS-PARAGRAPH-NAME
100313     IF WS-DEBUG-TRACE
100313       DISPLAY                          WS-PARAGRAPH-NAME
100313     END-IF
100313
110222     PERFORM 3010-LOAD-MEMBER-MASKS                THRU 3010-EXIT
110222
110222     IF MSK-CNT > ZERO
100313       MOVE DDNAME-OUT(DDX)          TO LIBR-SRCH-DDNAME
100313       PERFORM 3100-GET-LIBR-DSNS                  THRU 3100-EXIT
100313       IF LIBR-CNT > 1
100313         DISPLAY '**** ERROR - OUTPUT LIBRARY IS A CONCATENATION'
100313                 ' - DDNAME=' DDNAME-OUT(DDX)
100313         DISPLAY '**** PLEASE CORRECT THE JCL AND RERUN.'
100313         MOVE 20                     TO WS-LASTCC
100313         PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT
100313       ELSE
100313         MOVE LIBR-DSN(1)            TO MEM-DSN-OUT
100313       END-IF
100313
100313       MOVE DDNAME-IN(DDX)           TO LIBR-SRCH-DDNAME
100313       PERFORM 3100-GET-LIBR-DSNS                  THRU 3100-EXIT
100313       IF LIBR-CNT > LIBR-MAX
100313         DISPLAY '**** ERROR - TOO MANY DATASETS ON DD '
100313                 DDNAME-IN(DDX)
100313                 ' - CNT=' LIBR-CNT
100313                 ' MAX=' LIBR-MAX
100313         DISPLAY '**** THE EXCESS DATASETS WILL BE IGNORED.'
100313                 '  SOME INPUT MEMBERS MAY NOT BE FOUND.'
100313         MOVE 12                     TO WS-LASTCC
100313         PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT
100313       END-IF
100313     END-IF
100313
110222     MOVE ZERO                       TO MEMX
110222     MOVE ZERO                       TO MEM-CNT
100313
100313     PERFORM VARYING LIBRX FROM 1 BY 1
100313     UNTIL LIBRX > LIBR-CNT
100313       PERFORM 3300-SEARCH-LIBR-FOR-MEMS           THRU 3300-EXIT
100313     END-PERFORM
110222
110222     PERFORM VARYING MSKX FROM 1 BY 1
110222     UNTIL MSKX > MSK-CNT
110222       IF MSK-MEM-CNT(MSKX) = ZERO
110222         DISPLAY '**** ERROR - NO MEMBERS MATCHING '
110222                 MSK-MASK(MSKX)
110222                 ' WERE FOUND IN DD ' DDNAME-IN(DDX)
110222         MOVE 8                      TO WS-LASTCC
110222         PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT
110222       END-IF
110222     END-PERFORM
110222
110222     IF MEM-CNT >= MEM-MAX
110222       DISPLAY '**** ERROR - TOO MANY MATCHING MEMBERS FOUND '
110222               ' IN DD ' DDNAME-IN(DDX)
110222       DISPLAY '**** CNT=' MEMX ' MAX=' MEM-MAX
110222               ' - THE EXCESS MEMBERS WILL BE IGNORED.'
110222       MOVE MEM-MAX                  TO MEM-CNT
110222       MOVE 8                        TO WS-LASTCC
110222       PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
110222     END-IF
110222
110222     PERFORM 3500-PROCESS-LIBR-MEMBER              THRU 3500-EXIT
110222       VARYING MEMX FROM 1 BY 1
110222       UNTIL MEMX > MEM-CNT
100313     .
100313 3000-EXIT. EXIT.
110222******************************************************************
110222 3010-LOAD-MEMBER-MASKS.
110222******************************************************************
110222*    THIS ROUTINE LOADS THE MEMBER MASK ARRAY
110222******************************************************************
110222     MOVE '3010-LOAD-MEMBER-MASKS'   TO WS-PARAGRAPH-NAME
110222     IF WS-DEBUG-TRACE
110222       DISPLAY                          WS-PARAGRAPH-NAME
110222     END-IF
110222
110222* OPEN THE MEMLIST
110222     CALL 'CHGDDNM' USING MEMLIST-FILE DDNAME-MEMS(DDX)
110222     OPEN INPUT MEMLIST-FILE
110222     MOVE 'N'                        TO MEMLIST-EOF-SW
110222
110222* READ THE FIRST MEMLIST RECORD
110222     PERFORM 8100-READ-MEMLIST                     THRU 8100-EXIT
110222
110222     MOVE ZERO                       TO MSK-CNT
110222
110222     PERFORM UNTIL MEMLIST-EOF
110222       MOVE 1                        TO MEMEND
110222       PERFORM UNTIL MEMEND > LENGTH OF FD-MEMLIST-REC
110222*        FIND START OF MEMBER MASK
110222         PERFORM VARYING MEMBEG FROM MEMEND BY 1
110222           UNTIL MEMBEG > LENGTH OF FD-MEMLIST-REC
110222           OR NOT (FD-MEMLIST-REC(MEMBEG:1) = ',' OR SPACES)
110222         END-PERFORM
110222*        FIND END OF MEMBER MASK
110222         MOVE ZERO                   TO MEMLEN
110222         PERFORM VARYING MEMEND FROM MEMBEG BY 1
110222           UNTIL MEMEND > LENGTH OF FD-MEMLIST-REC
110222           OR (FD-MEMLIST-REC(MEMEND:1) = ',' OR SPACES)
110222             ADD +1                  TO MEMLEN
110222         END-PERFORM
110222*        IF MEMBER MASK FOUND
110222         IF MEMLEN > ZERO
110222           IF MEMLEN > LENGTH OF MEM-MASK
110222             DISPLAY '**** ERROR: MEMBER MASK '
110222                     FD-MEMLIST-REC(MEMBEG:MEMLEN)
110222                     ' TOO LONG - TRUNCATED TO '
110222                     LENGTH OF MEM-MASK ' CHARACTERS'
110222             MOVE 8                  TO WS-LASTCC
110222             PERFORM 9998-HANDLE-LASTCC            THRU 9998-EXIT
110222           END-IF
110222           ADD +1                    TO MSK-CNT
110222           IF MSK-CNT <= MSK-MAX
110222             MOVE FD-MEMLIST-REC(MEMBEG:MEMLEN)
110222                                     TO MSK-MASK    (MSK-CNT)
110222             MOVE ZERO               TO MSK-MEM-CNT (MSK-CNT)
110222             MOVE MSK-CNT            TO MSKX
110222             PERFORM 3011-SPLIT-MASK-PARTS         THRU 3011-EXIT
110222           END-IF
110222         END-IF
110222       END-PERFORM
110222
110222       PERFORM 8100-READ-MEMLIST                   THRU 8100-EXIT
110222     END-PERFORM
110222
110222     CLOSE MEMLIST-FILE
110222
110222     IF MSK-CNT >= MSK-MAX
110222       DISPLAY '**** ERROR - TOO MANY MEMBER MASKS'
110222               ' SPECIFIED IN DD ' DDNAME-MEMS(DDX)
110222       DISPLAY '**** CNT=' MSK-CNT ' MAX=' MSK-MAX
110222               ' - THE EXCESS MASKS WILL BE IGNORED.'
110222       MOVE MSK-MAX                  TO MSK-CNT
110222       MOVE 8                        TO WS-LASTCC
110222       PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
110222     END-IF
110222     .
110222 3010-EXIT. EXIT.
110222*****************************************************************
110222 3011-SPLIT-MASK-PARTS.
110222*****************************************************************
110222*    SPLIT MASK INTO PARTS SEPARATED BY "*"
110222*****************************************************************
110222
110222     MOVE MSK-MASK(MSKX)             TO MEM-MASK
110222
110222     MOVE ZERO                       TO MSK-PART-CNT(MSKX)
110222     MOVE ZERO                       TO MSK-MIN-LEN
110222     MOVE ZERO                       TO MPL
110222     MOVE 1                          TO MPX
110222     MOVE 1                          TO WS-BX
110222     MOVE ZERO                       TO MSK-PART-LEN(MSKX MPX)
110222     MOVE SPACES                     TO MSK-PART-TXT(MSKX MPX)
110222
110222     PERFORM VARYING WS-EX FROM LENGTH OF MEM-MASK BY -1
110222       UNTIL WS-EX < 1
110222       OR    MEM-MASK(WS-EX:1) NOT = SPACES
110222     END-PERFORM
TEST  *    DISPLAY 'MEM-MASK=<' MEM-MASK(1:WS-EX) '>'
110222
110222     PERFORM UNTIL WS-BX > WS-EX
110222       EVALUATE TRUE
110222*        IF CONSECUTIVE "*", IGNORE
110222         WHEN WS-BX > 1
110222         AND (MEM-MASK(WS-BX:1)     = '*')
110222         AND (MEM-MASK(WS-BX - 1:1) = '*')
110222           CONTINUE
110222*        IF NON-CONSECUTIVE "*", START NEXT MP AND ADD "*"
110222         WHEN (MEM-MASK(WS-BX:1) = '*')
110222           IF MSK-PART-LEN(MSKX MPX) > ZERO
110222             ADD 1                   TO MPX
110222           END-IF
110222           MOVE 1                    TO MPL
110222           MOVE MPL                  TO MSK-PART-LEN(MSKX MPX)
110222           MOVE '*'                  TO MSK-PART-TXT(MSKX MPX)
110222           MOVE MPX                  TO MSK-PART-CNT(MSKX)
110222*        IF OTHER CHARACTER, JUST ADD TO MP
110222         WHEN OTHER
110222           ADD 1                     TO MSK-MIN-LEN
110222           ADD 1                     TO MPL
110222           MOVE MPL                  TO MSK-PART-LEN(MSKX MPX)
110222           MOVE MEM-MASK(WS-BX:1)    TO MSK-PART-TXT(MSKX MPX)
110222                                                    (MPL:1)
110222           MOVE MPX                  TO MSK-PART-CNT(MSKX)
110222       END-EVALUATE
110222       ADD 1                         TO WS-BX
110222     END-PERFORM
110222
110222     IF MSK-MIN-LEN > 8
110222       DISPLAY '**** ERROR - MASK ' MEM-MASK
110222               ' REQUIRES A ' MSK-MIN-LEN ' CHARACTER MEMBER NAME'
110222       DISPLAY '**** NO MEMBERS WILL MATCH THIS MASK'
110222       MOVE 8                        TO WS-LASTCC
110222       PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
110222     END-IF
TEST  *
TEST  *    PERFORM VARYING MPX FROM 1 BY 1
TEST  *    UNTIL MPX > MSK-PART-CNT(MSKX)
TEST  *      MOVE MSK-PART-LEN(MSKX MPX)   TO MPL
TEST  *      DISPLAY 'MSK-PART-TXT=<' MSK-PART-TXT(MSKX MPX)(1:MPL) '>'
TEST  *    END-PERFORM
110222     .
110222 3011-EXIT. EXIT.
100313*****************************************************************
100313 3100-GET-LIBR-DSNS.
100313*****************************************************************
100313* FIND DDNAMES AND ASSOCIATED DSNAMES
100313* PSA -> TCB -> TIOT -> TIOT SEG -> SWAREQ(SVA) -> JFCB
100313*****************************************************************
100313
100313     MOVE ZERO                       TO LIBR-CNT
100313     MOVE SPACES                     TO LIBR-DDNAME
100313     SET LIBR-MORE                   TO TRUE
100313
100313*    SET ADDRESSABILITY TO THE TIOT
100313     SET ADDRESS OF PSA              TO NULL
100313     SET ADDRESS OF TCB              TO PSA-PSATOLD
100313     SET ADDRESS OF TIOT             TO TCB-TCBTIO
100313
100313*    WALK THE TIOT ENTRIES TO FIND THE I/O FILE DDNAMES
100313     SET TIOE-PTR                    TO TCB-TCBTIO
100313     ADD 24                          TO TIOE-PNUM
100313     SET ADDRESS OF TIOENTRY         TO TIOE-PTR
100313     PERFORM UNTIL TIOT-TIOELNGH = LOW-VALUES
100313     OR LIBR-EOF
100313       PERFORM 3110-SET-JFCB-ADDRESS             THRU 3110-EXIT
100313       IF TIOT-TIOEDDNM > SPACES
TEST  *        DISPLAY 'DDNAME=' TIOT-TIOEDDNM
100313         MOVE TIOT-TIOEDDNM          TO LIBR-DDNAME
100313       END-IF
TEST  *      DISPLAY 'DSN=' JFCBDSNM
100313       IF LIBR-DDNAME = LIBR-SRCH-DDNAME
110222*        IF LIBRARY DSN IS ALREADY IN THE LIST, SKIP IT
110222         PERFORM VARYING LIBRX FROM 1 BY 1
110222           UNTIL LIBRX > LIBR-CNT
110222           OR LIBR-DSN(LIBRX) = JFCBDSNM
110222         END-PERFORM
110222*        ELSE ADD IT TO THE LIBRARY DSN LIST
110222         IF LIBRX > LIBR-CNT
100313           ADD +1                    TO LIBR-CNT
100313           IF LIBR-CNT <= LIBR-MAX
100313             MOVE JFCBDSNM           TO LIBR-DSN(LIBR-CNT)
100313           END-IF
110222         END-IF
100313       ELSE
100313         IF LIBR-CNT > ZERO
100313           SET LIBR-EOF              TO TRUE
100313         END-IF
100313       END-IF
100313
100313*      POINT TO NEXT DDNAME ENTRY IN TIOT
100313       MOVE ZERO                     TO TIOE-LEN
100313       MOVE TIOT-TIOELNGH            TO TIOE-LEN-CHAR(2:1)
100313       ADD TIOE-LEN                  TO TIOE-PNUM
100313       SET ADDRESS OF TIOENTRY       TO TIOE-PTR
100313     END-PERFORM
100313     .
100313 3100-EXIT. EXIT.
100313*****************************************************************
100313 3110-SET-JFCB-ADDRESS.
100313*****************************************************************
100313
100313     MOVE LOW-VALUES                 TO JFCB-POINT
100313     MOVE TIOT-TIOEJFCB              TO JFCB-PTR-LO3
100313     DIVIDE JFCB-PNUM BY 16      GIVING JFCB-HI-HEX
100313                              REMAINDER JFCB-LO-HEX
100313
100313     IF JFCB-LO-HEX NOT = 15
100313       COMPUTE JFCB-PNUM = JFCB-PNUM + 16
100313     ELSE
100313       SET ADDRESS OF JSCB           TO TCB-TCBJSCB
100313       SET ADDRESS OF QMPI           TO JSCB-JSCBQMPI
100313       SET QMAT-PTR                  TO QMPI-QMPIQMAT
100313
100313       PERFORM UNTIL JFCB-PNUM <= 65536
100313         SET ADDRESS OF QMAT         TO QMAT-PTR
100313         SET QMAT-PTR                TO QMAT-QMATNEXT
100313         COMPUTE JFCB-PNUM = JFCB-PNUM - 65536
100313       END-PERFORM
100313
100313       COMPUTE JFCB-PNUM = JFCB-PNUM + QMAT-PNUM + 1
100313       SET ADDRESS OF JNXT-POINT     TO JFCB-PTR
100313       COMPUTE JFCB-PNUM = JNXT-PNUM + 16
100313     END-IF
100313
100313     SET ADDRESS OF JFCB             TO JFCB-PTR
100313     .
100313 3110-EXIT. EXIT.
100313*****************************************************************
100313 3300-SEARCH-LIBR-FOR-MEMS.
TEST  *    DISPLAY '3300-SEARCH-LIBR-FOR-MEMS'
100313*****************************************************************
100313*    ALLOCATE LIB TO DIRDD
100313*****************************************************************
100313     MOVE SPACES                     TO WS-IKJEFT-BUFFER
100313     STRING 'ALLOC DD(DIRDD) DSN('''          DELIMITED BY SIZE
100313            LIBR-DSN(LIBRX)                   DELIMITED BY SPACES
100313            ''') '                            DELIMITED BY SIZE
100313            'SHR'                             DELIMITED BY SIZE
100313                                   INTO WS-IKJEFT-BUFFER
100313     END-STRING
100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT
100313
100313*    OPEN DIRECTORY OF LIB
100313     OPEN INPUT DIR-FILE
100313
100313*    READ DIRECTORY UNTIL MEM FOUND OR EOF
100313     READ DIR-FILE             INTO DIR-REC
100313
100313     IF DIR-STATUS(1:1) = '0'
100313       SET DIR-MORE                  TO TRUE
100313       PERFORM 3310-READ-DIR-MEMS                  THRU 3310-EXIT
100313         UNTIL DIR-EOF
100313     END-IF
100313
100313     CLOSE DIR-FILE
100313
100313*    FREE LIB FROM DIRDD
100313     MOVE 'FREE DD(DIRDD)'           TO WS-IKJEFT-BUFFER
100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT
100313     .
100313 3300-EXIT. EXIT.
100313*****************************************************************
100313 3310-READ-DIR-MEMS.
100313*****************************************************************
100313
100313     MOVE 1                          TO DIR-POS
100313     SET DIR-PTR                     TO ADDRESS OF DIR-DATA
100313     SET ADDRESS OF DIR-ENTRY        TO DIR-PTR
100313
100313     PERFORM UNTIL DIR-POS + 11 > DIR-REC-LEN
100313     OR DIR-ENTRY(1:1) = HIGH-VALUES
100313
110222       PERFORM 3400-MATCH-MEMBER-MASK              THRU 3400-EXIT
110222         VARYING MSKX FROM 1 BY 1
110222         UNTIL MSKX > MSK-CNT
100313
100313       MOVE LOW-VALUES               TO DIR-2BYTES(1:1)
100313       MOVE DIR-BITLEN               TO DIR-2BYTES(2:1)
100313       DIVIDE DIR-SMALLINT           BY 32
100313                                 GIVING DIR-TRASH
100313                              REMAINDER DIR-HWORDS
100313       COMPUTE DIR-ENTLEN = 12 + (DIR-HWORDS * 2)
100313       ADD DIR-ENTLEN                TO DIR-POS
100313       ADD DIR-ENTLEN                TO DIR-ADR
100313       SET ADDRESS OF DIR-ENTRY      TO DIR-PTR
100313     END-PERFORM
100313
100313     IF DIR-ENTRY(1:1) = HIGH-VALUES
100313       SET DIR-EOF                   TO TRUE
100313     ELSE
100313       READ DIR-FILE               INTO DIR-REC
100313     END-IF
100313     .
100313 3310-EXIT. EXIT.
110222*****************************************************************
110222 3400-MATCH-MEMBER-MASK.
TEST  *    DISPLAY '3400-MATCH-MEMBER-MASK -'
TEST  *            ' MSK-MASK=<' MSK-MASK(MSKX) '>'
TEST  *            ' DIR-MEM-NAME=<' DIR-MEM-NAME '>'
110222*****************************************************************
110222
110222     MOVE MSK-MASK(MSKX)             TO MEM-MASK
110222
110222*    TEST DIRECTORY MEMBER NAME AGAINST MASK PARTS
110222     MOVE 1                          TO WS-BEG
110222     SET MP-MATCH                    TO TRUE
110222
110222     IF DIR-MEM-NAME NOT = MEM-MASK
110222       PERFORM 3410-MATCH-MASK-PARTS               THRU 3410-EXIT
110222     END-IF
110222
110222     IF MP-MATCH
110222*      SKIP MEMBER IF ALREADY FOUND IN AN EARLIER LIBRARY
110222       PERFORM VARYING MEMX FROM 1 BY 1
110222         UNTIL MEMX > MEM-CNT
110222           IF DIR-MEM-NAME = MEM-NAME(MEMX)
                   GO TO 3400-EXIT
110222           END-IF
110222       END-PERFORM
110222*      ELSE ADD THE MEMBER TO THE LIST
110222       ADD 1                         TO MEM-CNT
110222       ADD 1                         TO MSK-MEM-CNT(MSKX)
110222       IF MEM-CNT <= MEM-MAX
110222         MOVE LIBR-DSN(LIBRX)        TO MEM-LIBR(MEM-CNT)
110222         MOVE DIR-MEM-NAME           TO MEM-NAME(MEM-CNT)
110222       END-IF
110222     END-IF
110222     .
110222 3400-EXIT. EXIT.
110222*****************************************************************
110222 3410-MATCH-MASK-PARTS.
110222*****************************************************************
110222
110222     PERFORM VARYING MPX FROM 1 BY 1
110222     UNTIL MPX > MSK-PART-CNT(MSKX)
110222     OR    MP-NOMATCH
110222
110222       EVALUATE TRUE
110222*        IF MASK PART IS JUST "*", AUTOMATIC MATCH TO PART
110222         WHEN MSK-PART-TXT(MSKX MPX) = '*'
110222         AND  MSK-PART-LEN(MSKX MPX) = 1
110222           SET MP-PART-MATCH         TO TRUE
110222*        IF MASK PART BEGINS WITH "*", SLIDING MATCH POSSIBLE
110222         WHEN MSK-PART-TXT(MSKX MPX)(1:1) = '*'
110222           COMPUTE MPL = MSK-PART-LEN(MSKX MPX) - 1
110222           MOVE MSK-PART-TXT(MSKX MPX)(2:MPL)
110222                                     TO MP-TXT
110222           COMPUTE WS-END = (LENGTH OF DIR-MEM-NAME - MPL) + 1
110222           SET MP-PART-NOMATCH       TO TRUE
110222           PERFORM UNTIL WS-BEG > WS-END
110222           OR MP-PART-MATCH
110222             PERFORM 3411-MATCH-PART               THRU 3411-EXIT
110222             IF MP-PART-MATCH
110222               ADD MPL               TO WS-BEG
110222             ELSE
110222               ADD 1                 TO WS-BEG
110222             END-IF
110222           END-PERFORM
110222*        OTHERWISE ONLY FIXED MATCH POSSIBLE
110222         WHEN OTHER
110222           MOVE MSK-PART-LEN(MSKX MPX)
110222                                     TO MPL
110222           MOVE MSK-PART-TXT(MSKX MPX)
110222                                     TO MP-TXT
110222           COMPUTE WS-END = (LENGTH OF DIR-MEM-NAME - MPL) + 1
110222           PERFORM 3411-MATCH-PART                 THRU 3411-EXIT
110222           ADD MPL                   TO WS-BEG
110222       END-EVALUATE
110222
110222       IF MP-PART-NOMATCH
110222         SET MP-NOMATCH              TO TRUE
110222       END-IF
110222     END-PERFORM
110222
110222*    IF MATCHED ALL MASK PARTS
110222*    AND NOT ALL CHARS OF DIR-MEM-NAME COMPARED
110222*    AND MASK DOES NOT END WITH *
110222*    THEN REQUIRE TRAILING SPACES
110222     MOVE MSK-PART-CNT(MSKX)         TO MPX
110222
110222     IF MP-NOMATCH
110222     OR WS-BEG > LENGTH OF DIR-MEM-NAME
110222     OR   (MSK-PART-TXT(MSKX MPX) = "*"
110222       AND MSK-PART-LEN(MSKX MPX) = 1 )
110222         CONTINUE
110222     ELSE
110222       IF DIR-MEM-NAME(WS-BEG:) NOT = SPACES
110222         SET MP-NOMATCH              TO TRUE
110222       END-IF
110222     END-IF
110222     .
110222 3410-EXIT. EXIT.
110222*****************************************************************
110222 3411-MATCH-PART.
110222*****************************************************************
110222* AT THIS POINT THE FOLLOWING VALUES ARE ALREADY SET:
110222*   MP-TXT = TEXT OF CURRENT MASK PART
110222*   MPL          = LENGTH OF CURRENT MASK PART
110222*   WS-BEG       = POSITION IN DIR-MEM-NAME TO MATCH AGAINST
110222*   WS-END       = MAX BEGIN POS THAT MASK PART THAT COULD MATCH
110222*****************************************************************
110222
110222     SET MP-PART-MATCH               TO TRUE
110222     MOVE WS-BEG                     TO WS-BX
110222
110222     PERFORM VARYING WS-LX FROM 1 BY 1
110222     UNTIL WS-LX > MPL
110222     OR MP-PART-NOMATCH
110222       EVALUATE TRUE
110222*        IF PAST END OF MEMBER NAME, PART NOMATCH
110222         WHEN WS-BX > LENGTH OF DIR-MEM-NAME
110222           SET MP-PART-NOMATCH       TO TRUE
110222*        WILD CARD "?" MATCHES ANY ONE CHARACTER
110222         WHEN MP-TXT(WS-LX:1) = '?'
110222           CONTINUE
110222*        WILD CARD "!" MATCHES ONE UPPER CASE ALPHABET CHARACTER
110222         WHEN MP-TXT(WS-LX:1) = '!'
110222           IF NOT (DIR-MEM-NAME(WS-BX:1)
110222                 = 'A' OR 'B' OR 'C' OR 'D' OR 'E' OR 'F' OR 'G'
110222                OR 'H' OR 'I' OR 'J' OR 'K' OR 'L' OR 'M' OR 'N'
110222                OR 'O' OR 'P' OR 'Q' OR 'R' OR 'S' OR 'T' OR 'U'
110222                OR 'V' OR 'W' OR 'X' OR 'Y' OR 'Z')
110222             SET MP-PART-NOMATCH     TO TRUE
110222           END-IF
110222*        WILD CARD "%" MATCHES ONE NUMERIC DIGIT
110222         WHEN MP-TXT(WS-LX:1) = '%'
110222           IF NOT (DIR-MEM-NAME(WS-BX:1)
110222                 = '0' OR '1' OR '2' OR '3' OR '4'
110222                OR '5' OR '6' OR '7' OR '8' OR '9')
110222             SET MP-PART-NOMATCH     TO TRUE
110222           END-IF
110222*        WILD CARD "~" MATCHES ONE OF "@", "#" AND "$"
110222         WHEN MP-TXT(WS-LX:1) = '~'
110222           IF NOT (DIR-MEM-NAME(WS-BX:1)
110222                 = '@' OR '#' OR '$')
110222             SET MP-PART-NOMATCH     TO TRUE
110222           END-IF
110222*        ANY OTHER CHARACTER MUST BE AN EXACT MATCH
110222         WHEN OTHER
110222           IF MP-TXT(WS-LX:1) NOT = DIR-MEM-NAME(WS-BX:1)
110222             SET MP-PART-NOMATCH     TO TRUE
110222           END-IF
110222       END-EVALUATE
110222
110222       ADD 1                         TO WS-BX
110222     END-PERFORM
110222     .
110222 3411-EXIT. EXIT.
100313*****************************************************************
100313 3500-PROCESS-LIBR-MEMBER.
100313*****************************************************************
100313
100313*    ALLOCATE INPUT PDS/MEMBER TO DD LIBRTMPI
100313     MOVE SPACES                     TO WS-IKJEFT-BUFFER
100313     STRING 'ALLOC DD(LIBRTMPI) DSN('''       DELIMITED BY SIZE
110222            MEM-LIBR(MEMX)                    DELIMITED BY SPACES
100313            '('                               DELIMITED BY SIZE
110222            MEM-NAME(MEMX)                    DELIMITED BY SPACES
100313            ')'') '                           DELIMITED BY SIZE
100313            'SHR'                             DELIMITED BY SIZE
100313                                   INTO WS-IKJEFT-BUFFER
100313     END-STRING
100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT
TEST  *    DISPLAY WS-IKJEFT-BUFFER(1:WS-IKJEFT-LENGTH)
100313
100313*    ALLOCATE OUTPUT PDS/MEMBER TO DD LIBRTMPO
100313     MOVE SPACES                     TO WS-IKJEFT-BUFFER
100313     STRING 'ALLOC DD(LIBRTMPO) DSN('''       DELIMITED BY SIZE
100313            MEM-DSN-OUT                       DELIMITED BY SPACES
100313            '('                               DELIMITED BY SIZE
110222            MEM-NAME(MEMX)                    DELIMITED BY SPACES
100313            ')'') '                           DELIMITED BY SIZE
100313            'SHR'                             DELIMITED BY SIZE
100313                                   INTO WS-IKJEFT-BUFFER
100313     END-STRING
100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT
TEST  *    DISPLAY WS-IKJEFT-BUFFER(1:WS-IKJEFT-LENGTH)
100313
100313*    SET DDNAME FOR CNTLIN FILE AND OPEN THE FILE
100313     MOVE 'LIBRTMPI'                 TO DDNAME-CNTLIN
100313     MOVE 'LIBRTMPO'                 TO DDNAME-CNTLOUT
100313     PERFORM 4000-PROCESS-CNTL-FILE                THRU 4000-EXIT
100313
100313*    FREE INPUT AND OUTPUT LIBRARIES
100313     MOVE 'FREE DD(LIBRTMPI)'        TO WS-IKJEFT-BUFFER
100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT
100313     MOVE 'FREE DD(LIBRTMPO)'        TO WS-IKJEFT-BUFFER
100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT
100313     .
100313 3500-EXIT. EXIT.
      ******************************************************************
       4000-PROCESS-CNTL-FILE.
      ******************************************************************
      *    THIS ROUTINE PROCESSES ONE CNTLIN FILE
      ******************************************************************
           MOVE '4000-PROCESS-CNTL-FILE'   TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      * OPEN THE INPUT FILE
           CALL 'CHGDDNM' USING CNTLIN-FILE DDNAME-CNTLIN
           OPEN INPUT CNTLIN-FILE
           MOVE 'N'                        TO WS-CNTLIN-EOF-SW
           MOVE ZERO                       TO WS-FILE-CARDS-READ
           ADD +1                          TO WS-FILES-READ

      * READ AND PROCESS CNTLIN UNTIL EOF
           PERFORM 8000-READ-CNTLIN                      THRU 8000-EXIT

           PERFORM UNTIL WS-CNTLIN-EOF
             MOVE CNTLIN-REC               TO WS-CARDIN
             PERFORM 4100-PROCESS-CARD                   THRU 4100-EXIT
             PERFORM 8000-READ-CNTLIN                    THRU 8000-EXIT
           END-PERFORM

      * CLOSE FILES
           CLOSE CNTLIN-FILE

           IF WS-OUTPUT-OPEN
             PERFORM 8220-CLOSE-CNTLOUT                  THRU 8220-EXIT
           END-IF
           .
       4000-EXIT. EXIT.
      ******************************************************************
       4100-PROCESS-CARD.
      ******************************************************************
      *    THIS ROUTINE PROCESSES THE SUBSTITUTION AND WRITES THE CARD
      ******************************************************************
           MOVE '4100-PROCESS-CARD'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           IF WS-DEBUG-PARSING
             DISPLAY '  WS-CARDIN=<' WS-CARDIN '>'
           END-IF

           MOVE ZERO                       TO WS-LASTCC

           MOVE WS-CARDIN(WS-LBND:WS-DLEN) TO SA-STRING
           MOVE WS-DLEN                    TO SA-STRING-LEN
           PERFORM 6000-SUBSTITUTE-SYMBOLS               THRU 6000-EXIT

           IF SA-SYM-CHGD-SW = 'Y'
             ADD 1                         TO WS-CARDS-CHANGED
           ELSE
             ADD 1                         TO WS-CARDS-UNCHANGED
           END-IF

      *    CHECK BUFFER FOR DATA SHIFTED BEYOND BOUNDS
           COMPUTE WS-LX = WS-DLEN + 1
           IF SA-STRING(WS-LX:) NOT = SPACES
             MOVE WS-FILE-CARDS-READ       TO WS-DISPLAY-CNT
             PERFORM VARYING WS-LX FROM 1 BY 1
               UNTIL WS-LX > 10
               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES
             END-PERFORM
             DISPLAY 'SUBSTITUTION CAUSED TRUNCATION ON CARD NUMBER '
                     WS-DISPLAY-CHAR(WS-LX:)
                     ' OF FILE ' DDNAME-IN(DDX)
             MOVE WS-RBND                  TO WS-DISPLAY-CNT
             PERFORM VARYING WS-LX FROM 1 BY 1
               UNTIL WS-LX > 10
               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES
             END-PERFORM
             DISPLAY '  DATA SHIFTED BEYOND COLUMN '
                     WS-DISPLAY-CHAR(WS-LX:)
                     ' WAS LOST'
             DISPLAY '  REFORMAT CARD TO ALLOW FOR SUBSTITUTION'
                     ' WITHOUT TRUNCATION'
             DISPLAY '****************************************'
                     '****************************************'
             MOVE 8                        TO WS-LASTCC
             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
           END-IF

      * FIRST MOVE THE ENTIRE UNMODIFIED INPUT RECORD TO THE OUTPUT
      * THEN MOVE THE MODIFIED PART WITHIN THE BOUNDS TO THE OUTPUT
           MOVE WS-CARDIN                  TO WS-CARDOUT
           MOVE SA-STRING(1:WS-DLEN)
             TO WS-CARDOUT(WS-LBND:WS-DLEN)

      *    IF THIS CARD IS AN INPUT PARM CARD, PROCESS IT AS SUCH
      *    (I.E. IT BEGINS WITH $SYMBPARM OR THE OVERRIDDEN VALUE)
           IF WS-CARDOUT(1:WS-CNTL-LEN) = WS-CNTL-STRING(1:WS-CNTL-LEN)
             ADD 1                         TO WS-PARM-CARDS-READ
             COMPUTE WS-BX = WS-CNTL-LEN + 1
             COMPUTE WS-LX = (WS-DLEN - WS-BX) + 1
             MOVE SA-STRING(WS-BX:WS-LX) TO WS-INPUT-PARMS
             PERFORM VARYING WS-LX FROM WS-LX BY -1
               UNTIL WS-INPUT-PARMS(WS-LX:1) NOT = SPACE
                  OR WS-LX < 1
             END-PERFORM
             MOVE WS-LX                    TO WS-INPUT-PARMS-LEN
             IF NOT WS-PREV-CARD-TYPE-PARM
               DISPLAY '****************************************'
                       '****************************************'
             END-IF
      *      SET VALUE LEVEL FOR INPUT CARDS.
      *      THEY CANNOT CONTAIN SYMBOL VALUES TO USE.
081113       SET WS-LVL-NO-VALUE           TO TRUE
             PERFORM 5000-PROCESS-PARMS                  THRU 5000-EXIT
             MOVE 'P'                      TO WS-PREV-CARD-TYPE
           ELSE
      *    ELSE WRITE IT OUT AS A DATA CARD
             PERFORM 8200-WRITE-OUTPUT                   THRU 8200-EXIT
             MOVE 'D'                      TO WS-PREV-CARD-TYPE
           END-IF
           .
       4100-EXIT. EXIT.
      ******************************************************************
       5000-PROCESS-PARMS.
      ******************************************************************
      *    THIS ROUTINE PARSES THE INPUT PARMS AND BUILDS AN ARRAY OF
      *    SUBSTITUTION VARIABLE NAMES AND VALUES.
      ******************************************************************
           MOVE '5000-PROCESS-PARMS'       TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           MOVE WS-INPUT-PARMS-LEN         TO WS-DISPLAY-CNT
           PERFORM VARYING WS-LX FROM 1 BY 1
             UNTIL WS-LX > 10
             OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES
           END-PERFORM

           IF WS-INPUT-PARMS-LEN > ZERO
             EVALUATE TRUE
               WHEN WS-PGM-PHASE-INITPARM
                 DISPLAY '**** THE FOLLOWING ' WS-DISPLAY-CHAR(WS-LX:)
                         ' CHARACTER PARM WAS RECEIVED AS INPUT:'
                 DISPLAY '  <' WS-INPUT-PARMS(1:WS-INPUT-PARMS-LEN) '>'
               WHEN WS-PGM-PHASE-CNTLIN
                 DISPLAY '**** THE FOLLOWING ' WS-DISPLAY-CHAR(WS-LX:)
                         ' CHARACTER PARM WAS READ FROM CNTLIN:'
                 DISPLAY '  <' WS-INPUT-PARMS(1:WS-INPUT-PARMS-LEN) '>'
             END-EVALUATE
           END-IF

      *    NOW PARSE THE PARM DATA FOR THE SYMBOLS
           MOVE ZERO                       TO WS-BEG
           MOVE ZERO                       TO WS-END
           MOVE ZERO                       TO WS-LEN
           PERFORM 5100-PARSE-PARM                       THRU 5100-EXIT

           PERFORM UNTIL WS-LEN = ZERO
             MOVE WS-PARM                  TO WS-NAME
             MOVE WS-LEN                   TO WS-NAME-LEN

             PERFORM 5100-PARSE-PARM                     THRU 5100-EXIT
             MOVE WS-PARM                  TO WS-VALUE
             MOVE WS-LEN                   TO WS-VALUE-LEN

             IF WS-DEBUG-PARSING
               DISPLAY 'NAME=<' WS-NAME(1:WS-NAME-LEN) '>'
                       ' VALUE=<' WS-VALUE(1:WS-VALUE-LEN) '>'
             END-IF

             IF WS-PGM-PHASE-JCLSCAN
               PERFORM 5030-SUB-JCL-SYMBOLS              THRU 5030-EXIT
             END-IF

             IF WS-NAME(1:1) = '$'
               EVALUATE TRUE
      *          IF COMING FROM JCL, TREAT $NAMES AS SYMBOLS
                 WHEN WS-PGM-PHASE-JCLSCAN
                   PERFORM 5010-PROCESS-SYMBOL-PARM      THRU 5010-EXIT

      *          IF SYMBPARM PHASE, IGNORE PGMPARMS - ALREADY LOADED
                 WHEN WS-PGM-PHASE-SYMBPARM
                   CONTINUE

      *          ELSE $NAMES MUST BE PGMPARMS
                 WHEN OTHER
                   PERFORM 5020-PROCESS-PGM-PARM         THRU 5020-EXIT
               END-EVALUATE
             ELSE
      *        DURING THE INITPARM PHASE WE DO NOT PROCESS THE SYMBOLS
               IF NOT WS-PGM-PHASE-INITPARM
                 PERFORM 5010-PROCESS-SYMBOL-PARM        THRU 5010-EXIT
               END-IF
             END-IF

             PERFORM 5100-PARSE-PARM                     THRU 5100-EXIT
           END-PERFORM

           PERFORM 5300-DISPLAY-PGMPARMS                 THRU 5300-EXIT
           .
       5000-EXIT. EXIT.
      ******************************************************************
       5010-PROCESS-SYMBOL-PARM.
      ******************************************************************
      *    THIS ROUTINE HANDLES A PARM THAT CONTAINS SYMBOL VALUE DATA
      ******************************************************************
           MOVE '5010-PROCESS-SYMBOL-PARM' TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    IF VALUE IS COMING FROM JCL EXEC STATEMENT, CHECK TO SEE IF
      *    IT IS REALLY AN EXEC KEYWORD PARAMETER.  DISCARD IF IT IS.
           IF  WS-PGM-PHASE-JCLSCAN
           AND JOPER = 'EXEC'
             EVALUATE TRUE
               WHEN WS-NAME       = 'ACCT'
               WHEN WS-NAME(1:5)  = 'ACCT.'
               WHEN WS-NAME       = 'ADDRSPC'
               WHEN WS-NAME(1:8)  = 'ADDRSPC.'
               WHEN WS-NAME       = 'COND'
               WHEN WS-NAME(1:5)  = 'COND.'
               WHEN WS-NAME       = 'DYNAMNBR'
               WHEN WS-NAME(1:9)  = 'DYNAMNBR.'
               WHEN WS-NAME       = 'PARM'
               WHEN WS-NAME(1:5)  = 'PARM.'
               WHEN WS-NAME       = 'PERFORM'
               WHEN WS-NAME(1:8)  = 'PERFORM.'
               WHEN WS-NAME       = 'RD'
               WHEN WS-NAME(1:3)  = 'RD.'
               WHEN WS-NAME       = 'REGION'
               WHEN WS-NAME(1:7)  = 'REGION.'
               WHEN WS-NAME       = 'TIME'
               WHEN WS-NAME(1:5)  = 'TIME.'
                 IF WS-DEBUG-JESJCL
                   DISPLAY 'DISCARDING EXEC PARM - NAME=<'
                           WS-NAME(1:WS-NAME-LEN)    '> VALUE=<'
                           WS-VALUE(1:WS-VALUE-LEN)  '>'
                 END-IF
                 GO TO 5010-EXIT

               WHEN OTHER
                 CONTINUE
             END-EVALUATE
           END-IF

           PERFORM 8800-UPDATE-SA-ENTRY                  THRU 8800-EXIT
           .
       5010-EXIT. EXIT.
      ******************************************************************
       5020-PROCESS-PGM-PARM.
      ******************************************************************
      *    THIS ROUTINE HANDLES PROGRAM PARMS (I.E. $XXXXXX PARMS)
      ******************************************************************
           MOVE '5020-PROCESS-PGM-PARM'    TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           EVALUATE WS-NAME
             WHEN '$SYMBPARM'
               COMPUTE WS-CNTL-LEN = WS-VALUE-LEN + 1
               MOVE WS-VALUE               TO WS-CNTL-STRING
               DISPLAY '**** DEFAULT PARM ID "$SYMBPARM" OVERRIDDEN'
               DISPLAY '**** PARM RECORDS WILL BE IDENTIFIED BY "'
                       WS-CNTL-STRING(1:WS-VALUE-LEN) '"'

             WHEN '$BOUNDS'
             WHEN '$BNDS'
             WHEN '$B'
               PERFORM 5200-GET-BOUNDS                   THRU 5200-EXIT
081113
081113       WHEN '$DEFAULTTIMEZONE'
081113       WHEN '$DFLTTIMEZONE'
081113       WHEN '$DFLTTZ'
081113       WHEN '$DTZ'
081113         EVALUATE WS-VALUE(1:WS-VALUE-LEN)
081113           WHEN 'U'
081113           WHEN 'UTC'
081113             MOVE 'UTC'                  TO WS-CURRENT-TIMEZONE
081113           WHEN 'L'
081113           WHEN 'LOCAL'
081113             MOVE 'LOCAL'                TO WS-CURRENT-TIMEZONE
081113           WHEN 'D'
081113           WHEN 'DEFAULT'
081113             MOVE WS-DEFAULT-TIMEZONE    TO WS-CURRENT-TIMEZONE
081113           WHEN OTHER
081113             DISPLAY '**** ERROR - INVALID DEFAULT TIMEZONE "'
081113                     WS-VALUE(1:WS-VALUE-LEN)
081113                     '" SPECIFIED.'
081113             DISPLAY '**** THE PARM HAS BEEN IGNORED.'
081113             MOVE 8                  TO WS-LASTCC
081113             PERFORM 9998-HANDLE-LASTCC            THRU 9998-EXIT
081113         END-EVALUATE

             WHEN '$DEBUG'
             WHEN '$DBUG'
             WHEN '$DBG'
             WHEN '$D'
               IF WS-DEBUG-SWITCHES = SPACES
                 DISPLAY '**** DEBUG ACTIVATED.'
               END-IF

               EVALUATE WS-VALUE(1:WS-VALUE-LEN)
                 WHEN 'T'
                 WHEN 'TRACE'
                                 MOVE 'T'      TO WS-DEBUG-TRACE-SW
                 WHEN 'I'
                 WHEN 'INPUT'
                                 MOVE 'I'      TO WS-DEBUG-INPUT-SW
                 WHEN 'O'
                 WHEN 'OUTPUT'
                                 MOVE 'O'      TO WS-DEBUG-OUTPUT-SW
                 WHEN 'D'
                 WHEN 'DD'
                 WHEN 'DDNAME'
                                 MOVE 'D'      TO WS-DEBUG-DDNAME-SW
                 WHEN 'J'
                 WHEN 'JCL'
                 WHEN 'JESJCL'
                                 MOVE 'J'      TO WS-DEBUG-JESJCL-SW
                 WHEN 'S'
                 WHEN 'SEARCH'
                                 MOVE 'S'      TO WS-DEBUG-SEARCH-SW
                 WHEN 'P'
                 WHEN 'PARSING'
                                 MOVE 'P'      TO WS-DEBUG-PARSING-SW
                 WHEN 'OFF'      MOVE SPACES   TO WS-DEBUG-SWITCHES
                 WHEN OTHER      MOVE 'T'      TO WS-DEBUG-TRACE-SW
                                 MOVE 'I'      TO WS-DEBUG-INPUT-SW
                                 MOVE 'O'      TO WS-DEBUG-OUTPUT-SW
                                 MOVE 'D'      TO WS-DEBUG-DDNAME-SW
                                 MOVE 'J'      TO WS-DEBUG-JESJCL-SW
                                 MOVE 'S'      TO WS-DEBUG-SEARCH-SW
                                 MOVE 'P'      TO WS-DEBUG-PARSING-SW
               END-EVALUATE

             WHEN OTHER
               DISPLAY '**** ERROR - UNRECOGNIZED PARM "'
                       WS-NAME(1:WS-NAME-LEN) '='
                       WS-VALUE(1:WS-VALUE-LEN)
                       '" SPECIFIED.'
               DISPLAY '**** THE PARM HAS BEEN IGNORED.'
               MOVE 8                      TO WS-LASTCC
               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT
           END-EVALUATE
           .
       5020-EXIT. EXIT.
      ******************************************************************
       5030-SUB-JCL-SYMBOLS.
      ******************************************************************
      *    THIS ROUTINE SUBSTITUTES SYMBOLS IN JCLPARM NAMES AND VALUES
      ******************************************************************
           MOVE '5030-SUB-JCL-SYMBOLS'     TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           MOVE 'N'                        TO WS-NAM-FROM-SYMBOL-SW
           MOVE 'N'                        TO WS-VAL-FROM-SYMBOL-SW
           MOVE 'N'                        TO WS-INHERIT-NP-CHG-SW

           MOVE WS-NAME                    TO SA-STRING
           MOVE WS-NAME-LEN                TO SA-STRING-LEN

           PERFORM 6000-SUBSTITUTE-SYMBOLS               THRU 6000-EXIT

           IF SA-SYM-CHGD-SW = 'Y'
             MOVE 'Y'                      TO WS-NAM-FROM-SYMBOL-SW
             MOVE SA-STRING(1:SA-STRING-LEN)
                                           TO WS-NAME
             MOVE SA-STRING-LEN            TO WS-NAME-LEN
           END-IF

           MOVE WS-VALUE                   TO SA-STRING
           MOVE WS-VALUE-LEN               TO SA-STRING-LEN

           PERFORM 6000-SUBSTITUTE-SYMBOLS               THRU 6000-EXIT

           IF SA-SYM-CHGD-SW = 'Y'
             MOVE 'Y'                      TO WS-VAL-FROM-SYMBOL-SW
             MOVE SA-STRING(1:SA-STRING-LEN)
                                           TO WS-VALUE
             MOVE SA-STRING-LEN            TO WS-VALUE-LEN
           END-IF

           IF  WS-DEBUG-PARSING
           AND (WS-NAM-FROM-SYMBOL
             OR WS-VAL-FROM-SYMBOL)
             DISPLAY 'NAME=<' WS-NAME(1:WS-NAME-LEN) '>'
                     ' VALUE=<' WS-VALUE(1:WS-VALUE-LEN) '>'
           END-IF
           .
       5030-EXIT. EXIT.
      ******************************************************************
       5100-PARSE-PARM.
      ******************************************************************
      *    THIS ROUTINE PARSES THE PARM FOR THE NEXT NAME OR VALUE
      ******************************************************************
           MOVE '5100-PARSE-PARM'          TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           MOVE SPACES                     TO WS-PARM
           MOVE ZERO                       TO WS-LEN
           COMPUTE WS-BEG = WS-END + 1

           IF WS-DEBUG-PARSING
             IF WS-INPUT-PARMS-LEN < 80
               MOVE WS-INPUT-PARMS-LEN     TO WS-LX
             ELSE
               MOVE 80                     TO WS-LX
             END-IF
             DISPLAY '  1. START=' WS-BEG
                     ' LEN=' WS-INPUT-PARMS-LEN
                     ' <' WS-INPUT-PARMS(1:WS-LX) '>'
           END-IF

      *    FIND START - SKIP LEADING SPACES AND DELIMITER CHARS
           PERFORM VARYING WS-BEG FROM WS-BEG BY 1
             UNTIL WS-BEG > WS-INPUT-PARMS-LEN
             OR NOT (WS-INPUT-PARMS(WS-BEG:1) = ' ' OR '=' OR ',')
           END-PERFORM

           IF WS-BEG > WS-INPUT-PARMS-LEN
             GO TO 5100-EXIT
           END-IF

           IF WS-DEBUG-PARSING
             DISPLAY '  2. BEG=' WS-BEG
           END-IF

      *    FIND END - DELIMITED BY ' ', '=' OR ','
      *    EXCLUSIVELY ENCAPSULATED BY QUOTES
      *    NON-EXCLUSIVELY ENCAPSULATED BY PARENTHESES
           MOVE ZERO                       TO WS-PAREN-DEPTH
           MOVE 'N'                        TO WS-WITHIN-QUOTES-SW

      *    WE WILL BUILD WS-PARM 1 CHAR AT A TIME AS WE LOOP THROUGH
           MOVE ZERO                       TO WS-LX

      *    EXAMINE ONE CHARACTER AT A TIME UNTIL WE FIND A DELIMITER
      *    THAT IS NOT WITHIN QUOTES AND NOT WITHIN PAIRED PARENTHESES
           PERFORM VARYING WS-END FROM WS-BEG BY 1
             UNTIL (WS-END > WS-INPUT-PARMS-LEN)
             OR ((WS-INPUT-PARMS(WS-END:1) = ' ' OR '=' OR ',')
                 AND (WS-PAREN-DEPTH < 1)
                 AND (NOT WS-WITHIN-QUOTES))

             IF  WS-DEBUG-PARSING
               DISPLAY '  2A. END=' WS-END
                       ' "' WS-INPUT-PARMS(WS-END:1) '"'
                       ' PD=' WS-PAREN-DEPTH
                       ' WQ=' WS-WITHIN-QUOTES-SW
                       ' LX=' WS-LX ' <' WS-PARM(1:WS-LX) '>'
             END-IF

             EVALUATE WS-INPUT-PARMS(WS-END:1)
      *        HANDLE QUOTES
               WHEN ''''
                 IF WS-WITHIN-QUOTES
      *            CHECK FOR END OF QUOTED STRING
                   COMPUTE WS-EX = WS-END + 1
                   IF WS-EX > WS-INPUT-PARMS-LEN
                   OR WS-INPUT-PARMS(WS-EX:1) NOT = ''''
                     MOVE 'N'              TO WS-WITHIN-QUOTES-SW
                   ELSE
      *              ALLOW FOR DOUBLE QUOTES - TWO WILL GET YOU ONE
                     ADD 1                 TO WS-END
                     ADD 1                 TO WS-LX
                     MOVE ''''             TO WS-PARM(WS-LX:1)
                   END-IF
                 ELSE
      *            CHECK FOR START OF QUOTED STRING
                   MOVE 'Y'                TO WS-WITHIN-QUOTES-SW
                 END-IF

      *        OPEN PARENTHESES
               WHEN '('
                 IF NOT WS-WITHIN-QUOTES
                   ADD 1                   TO WS-PAREN-DEPTH
                 END-IF
                 ADD 1                     TO WS-LX
                 MOVE '('                  TO WS-PARM(WS-LX:1)

      *        CLOSE PARENTHESES
               WHEN ')'
                 IF NOT WS-WITHIN-QUOTES
                   SUBTRACT 1              FROM WS-PAREN-DEPTH
                 END-IF
                 ADD 1                     TO WS-LX
                 MOVE ')'                  TO WS-PARM(WS-LX:1)

      *        ANYTHING ELSE
               WHEN OTHER
                 ADD 1                     TO WS-LX
                 MOVE WS-INPUT-PARMS(WS-END:1)
                                           TO WS-PARM(WS-LX:1)
             END-EVALUATE
           END-PERFORM

           IF WS-END > WS-INPUT-PARMS-LEN
             MOVE WS-INPUT-PARMS-LEN       TO WS-END
           END-IF

           IF WS-INPUT-PARMS(WS-BEG:1) = ''''
             COMPUTE WS-BX = WS-BEG + 1
           ELSE
             MOVE WS-BEG                   TO WS-BX
           END-IF

           IF WS-DEBUG-PARSING
             DISPLAY '  3. BEG=' WS-BEG ' END=' WS-END
                     ' LX=' WS-LX ' PD=' WS-PAREN-DEPTH
                     ' WQ=' WS-WITHIN-QUOTES-SW
           END-IF

           IF WS-LX < 1
             GO TO 5100-EXIT
           END-IF

           MOVE WS-LX                      TO WS-LEN

           IF WS-DEBUG-PARSING
             DISPLAY '  4. LEN=' WS-LEN
                     ' PARM=<' WS-PARM(1:WS-LEN) '>'
           END-IF
           .
       5100-EXIT. EXIT.
      ******************************************************************
       5200-GET-BOUNDS.
      ******************************************************************
      *    THIS ROUTINE SETS THE RIGHT AND LEFT BOUNDS
      ******************************************************************
           PERFORM VARYING WS-LX FROM 1 BY 1
             UNTIL WS-LX > WS-VALUE-LEN
             OR    WS-VALUE(WS-LX:1) = ':'
           END-PERFORM

           IF WS-LX > WS-VALUE-LEN
             DISPLAY '**** INVALID BOUNDARIES - MISSING ":"'
                     ' - BOUNDS OVERRIDE IGNORED'
             MOVE 12                       TO WS-LASTCC
             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
             GO TO 5200-EXIT
           END-IF

           SUBTRACT +1                 FROM WS-LX
           MOVE WS-VALUE(1:WS-LX)          TO WS-BOUND-STR
           ADD +2                          TO WS-LX
           MOVE WS-VALUE(WS-LX:)           TO WS-BOUND-HOLD

           MOVE 'LEFT '                    TO WS-BOUND-ID
           PERFORM 5210-EDIT-BOUND                       THRU 5210-EXIT
           IF  WS-BOUND-OK
           AND WS-BOUND NOT = ZERO
             MOVE WS-BOUND                 TO WS-LBND
           END-IF

           MOVE WS-BOUND-HOLD              TO WS-BOUND-STR
           MOVE 'RIGHT'                    TO WS-BOUND-ID
           PERFORM 5210-EDIT-BOUND                       THRU 5210-EXIT
           IF  WS-BOUND-OK
           AND WS-BOUND NOT = ZERO
             MOVE WS-BOUND                 TO WS-RBND
           END-IF

           IF WS-LBND > WS-RBND
             MOVE WS-RBND                  TO WS-LX
             MOVE WS-LBND                  TO WS-RBND
             MOVE WS-LX                    TO WS-LBND
             DISPLAY '**** LEFT BOUND > RIGHT BOUND - BOUNDS REVERSED'
             MOVE 8                        TO WS-LASTCC
             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT
           END-IF
           COMPUTE WS-DLEN = (WS-RBND - WS-LBND) + 1
           .
       5200-EXIT. EXIT.
      ******************************************************************
       5210-EDIT-BOUND.
      ******************************************************************
      *    THIS ROUTINE EDITS THE BOUNDARY PARM
      ******************************************************************
           MOVE '5210-EDIT-BOUND'          TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           MOVE 'Y'                        TO WS-BOUND-OK-SW
           MOVE ZERO                       TO WS-BOUND

           PERFORM VARYING WS-LX FROM 1 BY 1
             UNTIL WS-BOUND-STR(WS-LX:1) = SPACES
               IF NOT (WS-BOUND-STR(WS-LX:1)
                 = '0' OR '1' OR '2' OR '3' OR '4'
                 OR '5' OR '6' OR '7' OR '8' OR '9' OR ' ')
                   MOVE 'N'                TO WS-BOUND-OK-SW
               END-IF
           END-PERFORM

           SUBTRACT 1                  FROM WS-LX

           EVALUATE TRUE
             WHEN NOT WS-BOUND-OK
               DISPLAY '**** INVALID BOUNDARY - ILLEGAL CHARACTER'
                       ' - ' WS-BOUND-ID ' OVERRIDE IGNORED'
               DISPLAY '**** ' WS-BOUND-ID ' BOUNDARY PARM=<'
                        WS-BOUND-STR(1:WS-LX) '>'
               MOVE 12                     TO WS-LASTCC
               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT
             WHEN WS-LX > 8
               MOVE 'N'                    TO WS-BOUND-OK-SW
               DISPLAY '**** INVALID BOUNDARY - TOO MANY DIGITS'
                       ' - ' WS-BOUND-ID ' OVERRIDE IGNORED'
               DISPLAY '**** ' WS-BOUND-ID ' BOUNDARY PARM=<'
                        WS-BOUND-STR(1:WS-LX) '>'
               MOVE 12                     TO WS-LASTCC
               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT
             WHEN WS-LX < 1
               CONTINUE
             WHEN OTHER
               MOVE WS-BOUND-STR(1:WS-LX) TO WS-BOUND(9 - WS-LX:)
               IF WS-BOUND < 1 OR WS-BOUND > 80
                 MOVE 'N'                  TO WS-BOUND-OK-SW
                 MOVE ZERO                 TO WS-BOUND
                 DISPLAY '**** INVALID BOUNDARY - OUTSIDE RECORD'
                         ' - ' WS-BOUND-ID ' OVERRIDE IGNORED'
                 DISPLAY '**** ' WS-BOUND-ID ' BOUNDARY PARM=<'
                          WS-BOUND-STR(1:WS-LX) '>'
                 MOVE 12                   TO WS-LASTCC
                 PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT
               END-IF
           END-EVALUATE
           .
       5210-EXIT. EXIT.
      ******************************************************************
       5300-DISPLAY-PGMPARMS.
      ******************************************************************
      *    THIS ROUTINE DISPLAY THE PGMPARMS THAT ARE IN USE
      ******************************************************************
           MOVE '5300-DISPLAY-PGMPARMS'    TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    IF BOUNDS CHANGED, DISPLAY NEW BOUNDS
           IF WS-LBND NOT = WS-PREV-LBND
           OR WS-RBND NOT = WS-PREV-RBND
             MOVE WS-LBND                  TO WS-PREV-LBND
             MOVE WS-RBND                  TO WS-PREV-RBND
             MOVE WS-LBND                  TO WS-DISPLAY-CNT
             PERFORM VARYING WS-LX FROM 1 BY 1
               UNTIL WS-LX > 10
               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES
             END-PERFORM
             DISPLAY '**** LEFT  BOUNDARY = ' WS-DISPLAY-CHAR(WS-LX:)

             MOVE WS-RBND                  TO WS-DISPLAY-CNT
             PERFORM VARYING WS-LX FROM 1 BY 1
               UNTIL WS-LX > 10
               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES
             END-PERFORM
             DISPLAY '**** RIGHT BOUNDARY = ' WS-DISPLAY-CHAR(WS-LX:)
           END-IF
           .
       5300-EXIT. EXIT.
      ******************************************************************
       6000-SUBSTITUTE-SYMBOLS.
      ******************************************************************
      *    THIS ROUTINE LOCATES THE NEXT SYMBOLIC IN THE CONTROL CARD
      ******************************************************************
           MOVE '6000-SUBSTITUTE-SYMBOLS'  TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF
           IF WS-DEBUG-PARSING
             DISPLAY '  BUFF=<' SA-STRING '>'
           END-IF

           MOVE 'N'                        TO SA-SYM-CHGD-SW

      *    TRIM TRAILING SPACES FROM INPUT STRING LENGTH
           PERFORM VARYING SA-LEN FROM SA-STRING-LEN BY -1
             UNTIL SA-LEN < 1
                OR SA-STRING(SA-LEN:1) NOT = SPACES
           END-PERFORM
           IF SA-LEN = ZERO
             GO TO 6000-EXIT
           END-IF

           MOVE SA-LEN                     TO SA-STRING-LEN

           MOVE ZERO                       TO SA-START
           MOVE ZERO                       TO SA-END
           MOVE ZERO                       TO SA-LEN
           PERFORM 6100-FIND-NEXT-SYMBOL                 THRU 6100-EXIT

           PERFORM UNTIL SA-PARM = SPACES
             SET SAX                       TO 1
             SEARCH SA-ENTRY
               AT END
                 CONTINUE

               WHEN SA-NAME (SAX) = SA-PARM
                 PERFORM 6200-REPLACE-SYMBOL             THRU 6200-EXIT
             END-SEARCH

             PERFORM 6100-FIND-NEXT-SYMBOL               THRU 6100-EXIT
           END-PERFORM
           .
       6000-EXIT. EXIT.
      ******************************************************************
       6100-FIND-NEXT-SYMBOL.
      ******************************************************************
      *    THIS ROUTINE LOCATES THE NEXT SYMBOLIC IN THE STRING
      ******************************************************************
           MOVE '6100-FIND-NEXT-SYMBOL'    TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    START SCAN AT NEXT CHAR AFTER LAST SCAN ENDED
           MOVE SPACES                     TO SA-PARM
           COMPUTE SA-START = SA-END + 1
           MOVE ZERO                       TO SA-END
           MOVE ZERO                       TO SA-LEN
           IF WS-DEBUG-PARSING
             DISPLAY '  1. SA-START=' SA-START
           END-IF

      *    SCAN FOR START OF SYMBOL - END OF STRING OR AMPERSAND
           PERFORM VARYING SA-START FROM SA-START BY 1
             UNTIL SA-START > SA-STRING-LEN
                OR SA-STRING(SA-START:1) = '&'
           END-PERFORM

           IF WS-DEBUG-PARSING
             DISPLAY '  2. SA-START=' SA-START
           END-IF

           COMPUTE WS-BX = SA-START + 1

      *    IF END OF STRING - DONE
090915     IF WS-BX > SA-STRING-LEN
             IF WS-DEBUG-PARSING
               DISPLAY '  3. WS-BX=' WS-BX ' LEN=' SA-STRING-LEN
             END-IF
             GO TO 6100-EXIT
           END-IF

      *    SCAN FOR END OF SYMBOL - END OF STRING OR NON-ALPHNUM
           PERFORM VARYING SA-END FROM WS-BX BY 1
             UNTIL SA-END > SA-STRING-LEN
                OR SA-STRING(SA-END:1) < X'81'
                OR SA-STRING(SA-END:1) > '9'
           END-PERFORM

      *    IF ENDS WITH PERIOD - EAT THE PERIOD WITH THE SYMBOL
           IF SA-STRING(SA-END:1) = '.'
             COMPUTE WS-EX = SA-END - 1
           ELSE
             SUBTRACT 1                  FROM SA-END
             MOVE SA-END                   TO WS-EX
           END-IF

           COMPUTE SA-LEN = (SA-END - SA-START) + 1
      *    SA-START, SA-END & SA-LEN POINT TO ENTIRE SYMBOL IN STRING
      *    INCLUDING LEADING AMPERSAND AND TRAILING PERIOD (IF EXISTS)

           COMPUTE WS-LX  = (WS-EX - WS-BX) + 1
           IF WS-DEBUG-PARSING
             DISPLAY '  SA-END=' SA-END
             DISPLAY '  SA-LEN=' SA-LEN
             DISPLAY '  WS-BX =' WS-BX
             DISPLAY '  WS-EX =' WS-EX
             DISPLAY '  WS-LX =' WS-LX
           END-IF

      *    IF SYMBOL NAME IS ZERO LENGTH, EXIT WITH SA-PARM BLANK
           IF WS-LX < 1
             GO TO 6100-EXIT
           END-IF

           MOVE SA-STRING(WS-BX:WS-LX)     TO SA-PARM

      *    WS-BX, WS-EX, WS-LX & SA-PARM ARE FOR SYMBOL NAME ONLY!
      *    LEADING AMPERSAND AND TRAILING PERIOD ARE NOT INCLUDED.
           IF WS-DEBUG-PARSING
               DISPLAY '  SA-PARM=<' SA-PARM '>'
           END-IF
           .
       6100-EXIT. EXIT.
      ******************************************************************
       6200-REPLACE-SYMBOL.
      ******************************************************************
      *    THIS ROUTINE REPLACES THE SYMBOLIC STRING WITH THE VALUE
      ******************************************************************
           MOVE '6200-REPLACE-SYMBOL'      TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    SAVE THE PART OF THE STRING THAT FOLLOWS THE SYMBOL
           COMPUTE WS-BX = SA-END + 1
           MOVE SA-STRING(WS-BX:)          TO SA-SUFFIX

      *    OVERLAY THE VALUE ONTO THE STRING AT THE START OF THE SYMBOL
           MOVE SA-VALUE-LEN(SAX)          TO WS-LX
           MOVE SA-VALUE    (SAX)(1:WS-LX) TO SA-STRING(SA-START:WS-LX)

      *    OVERLAY THE SAVED PART OF THE STRING FOLLOWING THE VALUE
           COMPUTE WS-BX = SA-START + WS-LX
           MOVE SA-SUFFIX                  TO SA-STRING(WS-BX:)

           IF WS-DEBUG-PARSING
             DISPLAY '  OLD SA-END=<' SA-END '> LEN=' SA-STRING-LEN
           END-IF
      *    COMPUTE THE NEW END POINTER FOR THE SCAN TO CONTINUE
           COMPUTE SA-END = WS-BX - 1

      *    COMPUTE THE NEW LENGTH OF THE STRING
           COMPUTE SA-STRING-LEN = (SA-STRING-LEN - SA-LEN) + WS-LX
           IF WS-DEBUG-PARSING
             DISPLAY '  NEW SA-END=<' SA-END '> LEN=' SA-STRING-LEN
           END-IF

      *    CHECK TO SEE IF THE VALUE HAS A NESTED PROC CHANGE
      *    IF SO SET THE WS-INHERIT-NP-CHG SWITCH.
      *    IF ALSO PROCESSING CNTLIN RECORDS, SET SA-USE SWITCHES TOO.
           IF SA-VAL-NP-CHG-SW(SAX) = 'Y'
             MOVE 'Y'                      TO WS-INHERIT-NP-CHG-SW
             IF WS-PGM-PHASE-CNTLIN
               MOVE 'Y'                    TO SA-ANY-VAL-NP-USE-SW
               MOVE 'Y'                    TO SA-VAL-NP-USE-SW(SAX)
             END-IF
           END-IF
           MOVE 'Y'                        TO SA-SYM-CHGD-SW
           .
       6200-EXIT. EXIT.
      ******************************************************************
       8000-READ-CNTLIN.
      ******************************************************************
      *    THIS ROUTINE READS THE INCOMING CONTROL CARD
      ******************************************************************
           MOVE '8000-READ-CNTLIN'         TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           READ CNTLIN-FILE              INTO CNTLIN-REC
             AT END      MOVE 'Y'          TO WS-CNTLIN-EOF-SW
           END-READ

           IF WS-CNTLIN-EOF
             IF WS-DEBUG-INPUT
               DISPLAY '**** EOF ENCOUNTERED ON CNTLIN-FILE'
             END-IF
             GO TO 8000-EXIT
100313     END-IF

           ADD 1                           TO WS-CARDS-READ
           ADD 1                           TO WS-FILE-CARDS-READ

           IF WS-DEBUG-INPUT
             DISPLAY '**** ' DDNAME-IN(DDX) ' '
                     WS-FILE-CARDS-READ '<'
                     CNTLIN-REC '>'
           END-IF
           .
       8000-EXIT. EXIT.
      ******************************************************************
       8100-READ-MEMLIST.
      ******************************************************************
      *    THIS ROUTINE READS THE LIBRARY MEMBER LIST
      ******************************************************************
           MOVE '8100-READ-MEMLIST'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           READ MEMLIST-FILE
             AT END
               SET MEMLIST-EOF             TO TRUE
               IF WS-DEBUG-INPUT
                 DISPLAY '**** EOF ENCOUNTERED ON MEMLIST-FILE'
               END-IF
               GO TO 8100-EXIT
           END-READ

           IF WS-DEBUG-INPUT
             DISPLAY '**** ' DDNAME-MEMS(DDX)
                     ' <'
                     FD-MEMLIST-REC '>'
           END-IF
           .
       8100-EXIT. EXIT.
      ******************************************************************
       8200-WRITE-OUTPUT.
      ******************************************************************
      *    THIS ROUTINE WRITES THE MODIFIED CONTROL CARD TO CNTLOUT
      ******************************************************************
           MOVE '8200-WRITE-OUTPUT'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           IF NOT WS-OUTPUT-OPEN
             DISPLAY '****************************************'
                     '****************************************'
110222       IF DDNAME-CNTLIN = 'LIBRTMPI'
110222         PERFORM VARYING WS-END
110222           FROM LENGTH OF MEM-NAME(MEMX) BY -1
110222           UNTIL MEM-NAME(MEMX)(WS-END:1) NOT = SPACES
110222         END-PERFORM
110222         PERFORM VARYING WS-EX
110222           FROM LENGTH OF MEM-LIBR(MEMX) BY -1
110222           UNTIL MEM-LIBR(MEMX)(WS-EX:1) NOT = SPACES
110222         END-PERFORM
110222         DISPLAY '**** INPUT  LIBRARY MEMBER '''
110222                 MEM-LIBR(MEMX)(1:WS-EX) '('
110222                 MEM-NAME(MEMX)(1:WS-END) ')'''
110222         PERFORM VARYING WS-EX
110222           FROM LENGTH OF MEM-DSN-OUT BY -1
110222           UNTIL MEM-DSN-OUT(WS-EX:1) NOT = SPACES
110222         END-PERFORM
110222         DISPLAY '**** OUTPUT LIBRARY MEMBER '''
110222                 MEM-DSN-OUT(1:WS-EX) '('
110222                 MEM-NAME(MEMX)(1:WS-END) ')'''
110222       END-IF
             DISPLAY '**** THE FOLLOWING LINES WERE WRITTEN TO'
                     ' OUTPUT DDNAME ''' DDNAME-OUT(DDX) ''''
             DISPLAY '****************************************'
                     '****************************************'
             DISPLAY '----+----1----+----2----+----3----+----4'
                     '----+----5----+----6----+----7----+----8'
           END-IF

           DISPLAY WS-CARDOUT

           IF NOT WS-OUTPUT-OPEN
             PERFORM 8210-OPEN-CNTLOUT                   THRU 8210-EXIT
           END-IF

           WRITE FD-CNTLOUT-REC          FROM WS-CARDOUT

           ADD 1                           TO WS-CARDS-WRITTEN
           ADD 1                           TO WS-FILE-CARDS-WRITTEN
           .
       8200-EXIT. EXIT.
      ******************************************************************
       8210-OPEN-CNTLOUT.
      ******************************************************************
      *    THIS ROUTINE POINTS TO AND OPENS THE OUTPUT FILE
      ******************************************************************
           MOVE '8210-OPEN-CNTLOUT'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           ADD +1                          TO WS-FILES-WRITTEN

           CALL 'CHGDDNM' USING CNTLOUT-FILE DDNAME-CNTLOUT
           OPEN OUTPUT CNTLOUT-FILE
           SET WS-OUTPUT-OPEN              TO TRUE
           .
       8210-EXIT. EXIT.
      ******************************************************************
       8220-CLOSE-CNTLOUT.
      ******************************************************************
      *    THIS ROUTINE CLOSES THE OUTPUT FILE
      ******************************************************************
           MOVE '8220-CLOSE-CNTLOUT'       TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           MOVE WS-FILE-CARDS-WRITTEN      TO WS-DISPLAY-CNT
           IF WS-DEBUG-OUTPUT
             DISPLAY '**** ' WS-DISPLAY-CNT
                     ' LINES WERE WRITTEN TO DDNAME '
                     DDNAME-OUT(DDX)
           END-IF

           MOVE 'N'                        TO WS-OUTPUT-OPEN-SW
           CLOSE CNTLOUT-FILE

           MOVE ZERO                       TO WS-FILE-CARDS-WRITTEN
           .
       8220-EXIT. EXIT.
      ******************************************************************
       8800-UPDATE-SA-ENTRY.
      ******************************************************************
      *    THIS ROUTINE SEARCHES THE SUBSTITUTES ARRAY AND ADDS OR
      *    CHANGES THE ENTRIES AS NEEDED
      ******************************************************************
           MOVE '8800-UPDATE-SA-ENTRY'     TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           IF WS-LVL-NO-VALUE
             GO TO 8800-EXIT
           END-IF

      *    SEE IF THE VALUE IS ALREADY IN THE ARRAY, THEN ADD OR CHANGE
      *    IT AS NEEDED.  DO NOT UPDATE IF LEVEL IS LESS THAN EXISTING!
           SET SAX                         TO 1
           SEARCH SA-ENTRY
             AT END
               PERFORM 8810-ADD-SA-ENTRY                 THRU 8810-EXIT

             WHEN SA-NAME (SAX) = WS-NAME
               PERFORM 8820-CHG-SA-ENTRY                 THRU 8820-EXIT

           END-SEARCH
           .
       8800-EXIT. EXIT.
      ******************************************************************
       8810-ADD-SA-ENTRY.
      ******************************************************************
      *    THIS ROUTINE ADDS A NEW ENTRY TO THE SUBSTITUTES ARRAY
      ******************************************************************
           MOVE '8810-ADD-SA-ENTRY'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           ADD 1                           TO SA-CNT

           IF WS-DEBUG-SEARCH
               DISPLAY '  SA-CNT=' SA-CNT
               DISPLAY '  WS-NAME-LEN=' WS-NAME-LEN
               DISPLAY '  WS-NAME=<' WS-NAME '>'
               DISPLAY '  WS-VALUE-LEN=' WS-VALUE-LEN
               DISPLAY '  WS-VALUE=<' WS-VALUE '>'
           END-IF

           IF SA-CNT > SA-MAX
               DISPLAY '****************************************'
                       '****************************************'
               DISPLAY '****************************************'
                       '****************************************'
               DISPLAY '**** ERROR: TABLE OVERFLOW, INCREASE TABLE SIZE'
               DISPLAY '****************************************'
                       '****************************************'
               DISPLAY '****************************************'
                       '****************************************'
               MOVE 20                     TO WS-LASTCC
               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT
           END-IF

           SET SAX                         TO SA-CNT
           MOVE WS-NAME-LEN                TO SA-NAME-LEN      (SAX)
           MOVE WS-NAME                    TO SA-NAME          (SAX)
           MOVE WS-VALUE-LEN               TO SA-VALUE-LEN     (SAX)
           MOVE WS-VALUE                   TO SA-VALUE         (SAX)
           MOVE WS-LVL-IND                 TO SA-LVL-IND       (SAX)
           MOVE 'N'                        TO SA-VAL-NP-CHG-SW (SAX)
           MOVE 'N'                        TO SA-VAL-NP-USE-SW (SAX)

      *    IF WE ADDED A NEW SYMBOL THAT GOT IT'S VALUE FROM ANOTHER
      *    SYMBOL THAT WAS ALREADY FLAGGED FOR POTENTIAL WARNINGS,
      *    FLAG THE NEW SYMBOL FOR POTENTIAL WARNINGS TOO.
           IF WS-PGM-PHASE-JCLSCAN
             IF (WS-NESTED-PROC-SW = '1' OR 'Y')
             AND WS-INHERIT-NP-CHG
               MOVE 'Y'                    TO SA-VAL-NP-CHG-SW (SAX)
             END-IF
           END-IF
           .
       8810-EXIT. EXIT.
      ******************************************************************
       8820-CHG-SA-ENTRY.
      ******************************************************************
      *    THIS ROUTINE CHANGES AN ENTRY IN THE SUBSTITUTES ARRAY
      ******************************************************************
           MOVE '8820-CHG-SA-ENTRY'        TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           IF WS-LVL-IND > SA-LVL-IND(SAX)
             MOVE WS-LVL-IND               TO SA-LVL-IND       (SAX)
             IF NOT WS-PGM-PHASE-JCLSCAN
               MOVE 'N'                    TO SA-VAL-NP-CHG-SW (SAX)
             END-IF
           END-IF

           MOVE SA-VALUE-LEN(SAX)          TO WS-LX

           IF WS-LVL-IND = SA-LVL-IND(SAX)
           AND (WS-VALUE-LEN NOT = WS-LX
             OR WS-VALUE(1:WS-LX) NOT = SA-VALUE(SAX)(1:WS-LX))

             MOVE WS-VALUE-LEN             TO SA-VALUE-LEN  (SAX)
             MOVE WS-VALUE                 TO SA-VALUE      (SAX)

             IF WS-PGM-PHASE-JCLSCAN
      *        IF WE ARE IN THE NESTED PROC WORLD,
      *        FLAG CHANGES FOR POTENTIAL WARNINGS.
               IF WS-NESTED-PROC-SW = '1' OR 'Y'
                 MOVE 'Y'                  TO SA-VAL-NP-CHG-SW (SAX)
               ELSE
                 MOVE 'N'                  TO SA-VAL-NP-CHG-SW (SAX)
               END-IF
             END-IF

           END-IF
           .
       8820-EXIT. EXIT.
      *****************************************************************
       8900-CALL-TSO.
      *****************************************************************
      *    THIS ROUTINE CALLS IKJEFT TO PROCESS A TSO COMMAND
      *****************************************************************
           MOVE '8900-CALL-TSO'            TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

           PERFORM VARYING WS-IKJEFT-LENGTH
             FROM LENGTH OF WS-IKJEFT-BUFFER BY -1
             UNTIL WS-IKJEFT-LENGTH = 1
                OR WS-IKJEFT-BUFFER(WS-IKJEFT-LENGTH:1) > SPACES
           END-PERFORM

           CALL 'IKJEFTSR' USING WS-IKJEFT-FLAGS
                                 WS-IKJEFT-BUFFER
                                 WS-IKJEFT-LENGTH
                                 WS-IKJEFT-RC
                                 WS-IKJEFT-REASON-CD
                                 WS-IKJEFT-ABEND-CD
           END-CALL

           IF WS-IKJEFT-RC NOT = ZERO
              MOVE WS-IKJEFT-RC            TO WS-DISPLAY-RC
              DISPLAY 'IKJEFTSR FAILED - RC=' WS-DISPLAY-RC
              MOVE WS-IKJEFT-REASON-CD     TO WS-DISPLAY-RC
              DISPLAY '         REASON CODE=' WS-DISPLAY-RC
              MOVE WS-IKJEFT-ABEND-CD      TO WS-DISPLAY-RC
              DISPLAY '          ABEND CODE=' WS-DISPLAY-RC
              DISPLAY 'CMD=<' WS-IKJEFT-BUFFER(1:WS-IKJEFT-LENGTH) '>'
              MOVE 20                      TO WS-LASTCC
              PERFORM 9998-HANDLE-LASTCC                 THRU 9998-EXIT
           END-IF
           .
       8900-EXIT. EXIT.
      ******************************************************************
       9000-END-OF-JOB.
      ******************************************************************
      *    THIS ROUTINE CLOSES FILES AND DISPLAYS PROCESSING COUNTS.
      ******************************************************************
           MOVE '9000-END-OF-JOB'          TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      * DISPLAY THE NESTED PROC WARNING IF NEEDED
           IF  WS-NESTED-PROC-SW    = 'Y'
             PERFORM 9100-NESTED-PROC-WARNING            THRU 9100-EXIT
           END-IF

      * DISPLAY PROCESSING COUNTS
           DISPLAY '****************************************'
                   '****************************************'
091020     DISPLAY '**** STATISTICS FOR PROGRAM ' PGM-NAME
           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '* RECORD COUNTS:'
           MOVE WS-FILES-READ                    TO WS-DISPLAY-CNT
           DISPLAY '*   FILES/MEMBERS READ.......:' WS-DISPLAY-CNT
           MOVE WS-FILES-WRITTEN                 TO WS-DISPLAY-CNT
           DISPLAY '*   FILES/MEMBERS WRITTEN....:' WS-DISPLAY-CNT
           MOVE WS-CARDS-READ                    TO WS-DISPLAY-CNT
           DISPLAY '*   CARDS READ...............:' WS-DISPLAY-CNT
           MOVE WS-CARDS-CHANGED                 TO WS-DISPLAY-CNT
           DISPLAY '*       CARDS MODIFIED.......:' WS-DISPLAY-CNT
           MOVE WS-CARDS-UNCHANGED               TO WS-DISPLAY-CNT
           DISPLAY '*       CARDS UNCHANGED......:' WS-DISPLAY-CNT
           MOVE WS-PARM-CARDS-READ               TO WS-DISPLAY-CNT
           DISPLAY '*     PARM CARDS READ........:' WS-DISPLAY-CNT
           MOVE WS-CARDS-WRITTEN                 TO WS-DISPLAY-CNT
           DISPLAY '*     DATA CARDS WRITTEN.....:' WS-DISPLAY-CNT
           MOVE WS-MAXCC                         TO WS-DISPLAY-CNT
           DISPLAY '* MAX RETURN CODE............:' WS-DISPLAY-CNT
           DISPLAY '****************************************'
                   '****************************************'
091020     DISPLAY '**** END PROGRAM ' PGM-NAME
           DISPLAY '****************************************'
                   '****************************************'
           .
       9000-EXIT. EXIT.
      *****************************************************************
       9100-NESTED-PROC-WARNING.
      *****************************************************************
      *    THIS ROUTINE DISPLAYS THE NESTED PROC WARNING MESSAGES
      *****************************************************************
           MOVE '9100-NESTED-PROC-WARNING' TO WS-PARAGRAPH-NAME
           IF WS-DEBUG-TRACE
             DISPLAY                          WS-PARAGRAPH-NAME
           END-IF

      *    FIND THE LENGTH OF THE LONGEST NAME, RESET NP-USED SWITCH
      *    BECAUSE THEY MAY HAVE BEEN CLEARED BY PARM OVERRIDES
           MOVE 'N'                        TO SA-ANY-VAL-NP-USE-SW
           MOVE ZERO                       TO WS-LEN
           PERFORM VARYING SAX FROM 1 BY 1
             UNTIL SAX > SA-CNT
               IF SA-VAL-NP-USE-SW(SAX) = 'Y'
                 MOVE 'Y'                  TO SA-ANY-VAL-NP-USE-SW
               END-IF
               IF SA-NAME-LEN (SAX) > WS-LEN
                 MOVE SA-NAME-LEN (SAX)    TO WS-LEN
               END-IF
           END-PERFORM

           IF SA-ANY-VAL-NP-USE-SW = 'N'
             GO TO 9100-EXIT
           END-IF

           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '**** WARNING: THE FOLLOWING SUBSTITUTION'
                   ' VALUES MAY NOT BE CORRECT FOR THE  ****'
           DISPLAY '****          PROCSTEP THAT THIS PROGRAM'
                   ' WAS EXECUTED IN.                   ****'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****************************************'
                   '****************************************'

      *    DISPLAY THE NAMES AND VALUES OF THE NP-USED SYMBOLS
           PERFORM VARYING SAX FROM 1 BY 1
             UNTIL SAX > SA-CNT
               IF SA-VAL-NP-USE-SW(SAX) = 'Y'
                 DISPLAY '  &'
                   SA-NAME (SAX)(1:WS-LEN)        ' ===> <'
                   SA-VALUE(SAX)(1:SA-VALUE-LEN(SAX)) '>'
               END-IF
           END-PERFORM

           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****                      WHY DID YOU GE'
                   'T THIS ERROR?                       ****'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '**** THIS STEP WAS EXECUTED FROM WITHIN '
                   'A PROC THAT EXECUTED A NESTED PROC. ****'
           DISPLAY '**** THE SYMBOLIC VALUES SHOWN ABOVE WER'
                   'E CHANGED WITHIN THAT NESTED PROC.  ****'
           DISPLAY '**** DUE TO LIMITATIONS IN THE ABILITY T'
                   'O DETERMINE THE ENDING LOCATIONS OF ****'
           DISPLAY '**** NESTED PROCS FROM THE JESJCL LISTIN'
                   'G, IT CANNOT BE DETERMINED WHERE    ****'
           DISPLAY '**** THE SCOPE ENDS AND THE VALUES SHOUL'
                   'D REVERT TO THEIR FORMER STATE.     ****'
           DISPLAY '**** FOR THIS REASON IT IS POSSIBLE THAT'
                   ' THE SYMBOLS LISTED ABOVE MAY HAVE  ****'
           DISPLAY '**** HAD INCORRECT VALUES AT THE TIME WH'
                   'EN THEY WERE SUBSTITUTED.           ****'
           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****                 WHAT CAN YOU DO TO '
                   'PREVENT THIS ERROR?                 ****'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****************************************'
                   '****************************************'
091020     DISPLAY '**** THE PREFERRED SOLUTION IS TO MOVE T'
091020             'HE STEP THAT EXECUTES ' PGM-NAME '      ****'
           DISPLAY '**** AHEAD OF ANY STEPS THAT EXECUTE NES'
                   'TED PROCS.                          ****'
           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '**** ALTERNATELY, YOU CAN ASSURE THAT TH'
                   'E CORRECT VALUES FOR THESE SPECIFIC ****'
           DISPLAY '**** SYMBOLS ARE USED BY PASSING THEM ON'
                   ' THE PARM AS FOLLOWS:               ****'
           DISPLAY '****                                    '
                   '                                    ****'

           MOVE SPACES                     TO SA-STRING
           MOVE 1                          TO WS-BX
      *    STRING THE NAMES AND VALUES TOGETHER AS A PARM
           PERFORM VARYING SAX FROM 1 BY 1
             UNTIL SAX > SA-CNT
               IF SA-VAL-NP-USE-SW(SAX) = 'Y'
                 IF WS-BX = 1
                   MOVE '**** PARM=('''    TO SA-STRING(WS-BX:12)
                   ADD 12                  TO WS-BX
                 ELSE
                   MOVE ','                TO SA-STRING(WS-BX:1)
                   ADD 1                   TO WS-BX
                 END-IF
                 MOVE SA-NAME-LEN(SAX)     TO WS-LX
                 MOVE SA-NAME(SAX)(1:WS-LX)
                                           TO SA-STRING(WS-BX:WS-LX)
                 ADD WS-LX                 TO WS-BX
                 MOVE '=&'                 TO SA-STRING(WS-BX:2)
                 ADD 2                     TO WS-BX
                 MOVE SA-NAME-LEN(SAX)     TO WS-LX
                 MOVE SA-NAME(SAX)(1:WS-LX)
                                           TO SA-STRING(WS-BX:WS-LX)
                 ADD WS-LX                 TO WS-BX
               END-IF
           END-PERFORM
           MOVE ''')'                      TO SA-STRING(WS-BX:2)
           ADD 1                           TO WS-BX
           IF WS-BX < 76
             MOVE '****'                   TO SA-STRING(77:4)
             MOVE 80                       TO WS-BX
           END-IF

           DISPLAY SA-STRING(1:WS-BX)

           DISPLAY '****                                    '
                   '                                    ****'
           DISPLAY '****************************************'
                   '****************************************'
           DISPLAY '****************************************'
                   '****************************************'

      *    SET RETURN CODE TO 8
           MOVE 8                          TO WS-LASTCC
           PERFORM 9998-HANDLE-LASTCC                    THRU 9998-EXIT
           .
       9100-EXIT. EXIT.
      ******************************************************************
       9998-HANDLE-LASTCC.
      ******************************************************************
      *    THIS ROUTINE HANDLES THE ERROR CODE                         *
      ******************************************************************

           IF WS-LASTCC > WS-MAXCC
               MOVE WS-LASTCC              TO WS-MAXCC
           END-IF
           IF WS-MAXCC > 12
              GO TO 0000-MAINLINE-EXIT
           END-IF
           .
       9998-EXIT. EXIT.
      ******************************************************************
      * BEGIN NESTED PROGRAM CHGDDNM                                   *
      ******************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CHGDDNM.
       DATA DIVISION.
       LINKAGE SECTION.
       01  FILE-DCB.
           05 FILLER                   PIC X(40).
           05 FILE-DCB-DDNAME          PIC X(8).
           05 FILLER                   PIC X(48).
       01  NEW-DDNAME                  PIC X(8).
       PROCEDURE DIVISION  USING FILE-DCB, NEW-DDNAME.
           MOVE NEW-DDNAME         TO FILE-DCB-DDNAME
           GOBACK
           .
       END PROGRAM CHGDDNM.
       END PROGRAM SYMBSUB.
