{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012759000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE779.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE779.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0b\\x07'", "DS1TRBAL": "b'Z\\x94'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05L\\x00\\x0b\\x05M\\x00\\x07\\x00\\x0c'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04U\\x00W\\x01\\x12\\'?\\x01\\x12\\'?\"\\x10\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf5@@@'", "ispf": {"version": "04.85", "flags": 0, "createdate": "2012-09-29T00:00:00", "modifydate": "2012-09-29T22:10:57", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-485"}, "text": "REGULAR CBT TAPE - VERSION 485    FILE:  779\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT485.FILE779\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 5,838 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/29/12    22:10:57    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00(\\x01\\x08\\x01O\\x01\\x12'/\\x15T\\x00$\\x00%\\x00\\x00\\xe3\\xe2\\xe4\\xc1\\xf0\\xe8\\xd4@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-01-14T00:00:00", "modifydate": "2012-09-28T15:54:28", "lines": 36, "newlines": 37, "modlines": 0, "user": "TSUA0YM"}, "text": "Subject:    Contribution to CBTTAPE\nFrom:       \"Bass, Walter W\" <bill_bass@uhc.com>\nDate:       Mon, 7 Jan 2008 13:04:27 -0600\nTo:         <sbgolob@cbttape.org>\n\nSam,\n\nI would like to contribute a program source code to the CBT tape.\nI posted to the IBM-MAIN discussion list about this program a\nlittle while ago to the thread with subject \"JCL procedure\nparameters\".\n\nThis is a COBOL II program that I wrote from scratch to perform\nbatch symbolic variable substitution on 80 byte cards.  What\nmakes this particular program unique from previous programs of\nit's ilk, is that it invokes SDSF to read it's own jobs' JESJCL\nfile from the spool and it parses that jcl to find the\nsymbolic values.  This eliminates the need for passing the\nsymbols from the jcl to the program and also gets around the 100\ncharacter parm bottleneck.  It can read multiple input files and\nwrite multiple output files in a single execution.  It\nsubstitutes symbolic variables using basic jcl substitution\nsyntax rules.  This permits creation of control cards, etc. that\nhave symbolic variables that are resolved at execution time.  The\nprogram is smart enough to detect which job step it is executing\nwithin and to resolve the symbols to the appropriate values for\nthat step.\n\nThe submitted file was a zipped ASCII text file.  I have not run\ninto any problems with converting it back and forth between EBCDIC\n& ASCII.  In this pds, the file has been converted into EBCDIC.\nPlease let me know if you need further information from me for this\ncontribution.\n\nBill Bass\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x08\\x15\\x1f\\x01\\x08\\x15\\x1f\\x19\\x04\\x00 \\x00 \\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-05-30T00:00:00", "modifydate": "2008-05-30T19:04:53", "lines": 32, "newlines": 32, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    RE: Contribution to CBTTAPE\nFrom:       \"Bass, Walter W\" <bill_bass@uhc.com>\nDate:       Fri, 30 May 2008 13:29:54 -0500\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\n\nSam,\n\nI found and corrected a critical bug in this program in March.  I\nhave held off until now submitting an update to insure that I had\nnot introduced other issues.  It has continued to work without\nincident in our production environment since then, so I feel it\nis safe to forward it on to the rest of the world.\n\nI am attaching an updated XMI file that looks the same as I would\ndownload from the CBT web site, except that the SYMBSUB member\nhas been updated.  I did not attempt to modify any of the other\nmembers to match.\n\nIn case it is of use, here is a description of the changes that\nhave been made since the original submission:\n\n    1) Fixed a critical bug that caused SYMBSUB to incorrectly\n       handle symbolic values passed on EXEC PROC statements.\n    2) Corrected a minor bug that caused SYMBSUB to fail to find\n       his own JCL in the active queue if the submitting user had\n       various SDSF filters set.\n\nLet me know if I you need any further information from me.\n\nThanks,\nBill Bass\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE3": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x009\\x01\\x12'\\x7f\\x01\\x12'\\x7f\\x02\\x11\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-03T00:00:00", "modifydate": "2012-10-03T02:11:39", "lines": 16, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  RE: Update to File 779\nFrom:     \"Bass, Walter W\" <bill_bass@uhc.com>\nDate:     10/2/2012 6:18 PM\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nAttached is an updated XMIT file.  I added a compile JCL as you\nrequested as member $COMPILE, but please feel free to rename it\nas appropriate.  I also had to update the SYMBSUB program source\ncode.  I had inadvertently left some COPY statements in it that\nreferred to local code that is not freely distributable.\n\nThanks,\nBill\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$COMPILE": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x007\\x01\\x12'o\\x01\\x12'o\\x18\\x12\\x00\\x1c\\x00\\x01\\x00\\x00\\xe3\\xe2\\xe4\\xc1\\xf0\\xe8\\xd4@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-10-02T00:00:00", "modifydate": "2012-10-02T18:12:37", "lines": 28, "newlines": 1, "modlines": 0, "user": "TSUA0YM"}, "text": "//YOUR JOB CARD\n//*--------------------------------------------------------------------\n//* COMPILE STEP    (COBOLII)\n//*--------------------------------------------------------------------\n//S10      EXEC PGM=IGYCRCTL,PARM=DYNAM\n//SYSIN    DD DSN=YOUR.SOURCE.LIB(SYMBSUB),DISP=SHR\n//SYSLIB   DD DUMMY\n//SYSLIN   DD DSN=&&OBJECT,\n//            DCB=(RECFM=FB),DISP=(NEW,PASS,DELETE),\n//            UNIT=SYSDA,SPACE=(CYL,(1,1),RLSE)\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT5   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT6   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT7   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//*--------------------------------------------------------------------\n//* LINKEDIT STEP\n//*--------------------------------------------------------------------\n//S20      EXEC PGM=IEWL,COND=(4,LT),\n// PARM=('LIST,LET,MAP,XREF,AMODE=31,RMODE=ANY')\n//SYSLIN   DD DISP=(OLD,DELETE),DSN=&&OBJECT\n//SYSLIB   DD DSN=SYS1.SCEELKED,DISP=SHR\n//SYSLMOD  DD DSN=YOUR.LOAD.LIB(SYMBSUB),DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$COMPILS": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x00\\x01\\x12'o\\x01\\x12'\\x7f\\x02$\\x00!\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-10-02T00:00:00", "modifydate": "2012-10-03T02:24:00", "lines": 33, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBC JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*   COMPILE AND LINK THAT WORKED FOR ME.\n//*\n//*--------------------------------------------------------------------\n//* COMPILE STEP    (COBOLII)\n//*--------------------------------------------------------------------\n//S10      EXEC PGM=IGYCRCTL,PARM=DYNAM\n//STEPLIB  DD DISP=SHR,DSN=IGY420.SIGYCOMP\n//SYSIN    DD DSN=SBGOLOB.CBT485.FILE779(SYMBSUB),DISP=SHR\n//SYSLIB   DD DUMMY\n//SYSLIN   DD DSN=&&OBJECT,\n//            DCB=(RECFM=FB),DISP=(NEW,PASS,DELETE),\n//            UNIT=SYSDA,SPACE=(CYL,(1,1),RLSE)\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT5   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT6   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//SYSUT7   DD UNIT=SYSDA,SPACE=(CYL,(4,4),RLSE)\n//*--------------------------------------------------------------------\n//* LINKEDIT STEP\n//*--------------------------------------------------------------------\n//S20      EXEC PGM=IEWL,COND=(5,LT),\n// PARM=('LIST,LET,MAP,XREF,AMODE=31,RMODE=ANY')\n//SYSLIN   DD DISP=(OLD,DELETE),DSN=&&OBJECT\n//SYSLIB   DD DSN=CEE.SCEELKED,DISP=SHR\n//SYSLMOD  DD DSN=SYS1.W$$.LINKLIB(SYMBSUB),DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INTRO01": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04O\\x00F\\x01\\x08\\x15\\x1f\\x01\\x12'/\\x17$\\x01\\xbd\\x00\\x1c\\x00\\x00\\xe3\\xe2\\xe4\\xc1\\xf0\\xe8\\xd4@@@\"", "ispf": {"version": "04.79", "flags": 0, "createdate": "2008-05-30T00:00:00", "modifydate": "2012-09-28T17:24:46", "lines": 445, "newlines": 28, "modlines": 0, "user": "TSUA0YM"}, "text": "//***FILE 779 is from Bill Bass, and contains a very clever COBOL   *   FILE 779\n//*           program which looks at a job in SDSF and performs     *   FILE 779\n//*           symbolic substitution from reading the symbolic       *   FILE 779\n//*           substitutions that are shown in SDSF, which were      *   FILE 779\n//*           performed by the JCL converter and interpreter.       *   FILE 779\n//*                                                                 *   FILE 779\n//*           email:  \"Bass, Walter W\" <bill_bass@uhc.com>          *   FILE 779\n//*                                                                 *   FILE 779\n//*     Further explanation:                                        *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//*                     HOW-TO Guide for SYMBSUB                    *   FILE 779\n//*                               with                              *   FILE 779\n//*                       JCL Symbolic Variable                     *   FILE 779\n//*                          Include Modules                        *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*                         What is SYMBSUB?                        *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB is a tool that reads in 80 column card files and        *   FILE 779\n//* performs symbolic variable substitution using the values of the *   FILE 779\n//* symbols from the JCL, then writes the cards back out.  Each     *   FILE 779\n//* input DD can be either instream data, a single sequential file, *   FILE 779\n//* a single PDS member or a concatenated list of PDS libraries.    *   FILE 779\n//* Each output DD can be either a single sequential file, a single *   FILE 779\n//* PDS member, or a PDS library.                                   *   FILE 779\n//*                                                                 *   FILE 779\n//* What makes SYMBSUB unique from other tools of this type that    *   FILE 779\n//* have come before it, is that it retrieves the values of the     *   FILE 779\n//* symbols from the JCL on its own.  All you have to do is provide *   FILE 779\n//* it with one or more input dd cards and matching output dd cards.*   FILE 779\n//* It will automatically find your input files, read them,         *   FILE 779\n//* substitute the symbols with the values from the JCL and write   *   FILE 779\n//* the modified cards out to the appropriate output files.         *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*                        How do I use SYMBSUB?                    *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* To use SYMBSUB, you provide it with input and output DD cards   *   FILE 779\n//* that it finds and processes.  These can be of two types:        *   FILE 779\n//*   1) Single file input/output pairs.                            *   FILE 779\n//*   2) Multiple PDS member input/output libraries and a member    *   FILE 779\n//*      selection list (wild carded member lists are supported).   *   FILE 779\n//*      These are the wild characters permitted:                   *   FILE 779\n//*        \"*\" = match zero or more of any characters.              *   FILE 779\n//*        \"?\" = match any one single character.                    *   FILE 779\n//*        \"!\" = match one upper case alphabet letter (\"A\" - \"Z\").  *   FILE 779\n//*        \"%\" = match one numeric digit (\"0\" - \"9\").               *   FILE 779\n//*        \"~\" = match one special character (\"@\", \"#\" or \"$\").     *   FILE 779\n//*                                                                 *   FILE 779\n//* One execution of SYMBSUB can have multiple occurances of type 1 *   FILE 779\n//* and/or type 2 input/output sets of DD cards.                    *   FILE 779\n//*                                                                 *   FILE 779\n//* The easiest way to explain using SYMBSUB is to show examples.   *   FILE 779\n//* The following are four sample JCL include members followed by a *   FILE 779\n//* sample job that makes use of them to demonstrate how SYMBSUB can*   FILE 779\n//* be used to customize data files or in-stream data at execution  *   FILE 779\n//* time.                                                           *   FILE 779\n//*                                                                 *   FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n//* Sample Include Member SAMPLE.PROCLIB(SETUSER)                   *   FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n// SET HLQ=&SYSUID                                                      FILE 779\n// SET DB2CRE8='DEVLDBA1'                                               FILE 779\n// SET DB2DBNM='DEVLDB01'                                               FILE 779\n// SET DB2SUBS='TEST'                                                   FILE 779\n// SET PARMLIB1=&SYSUID..USER.PARMLIB                                   FILE 779\n// SET PARMLIB2='STST.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB3='QTST.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB4='PROD.ENDEVOR.PARMLIB'                                  FILE 779\n// SET LODLIB1=&SYSUID..USER.LOADLIB                                    FILE 779\n// SET LODLIB2='STST.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB3='QTST.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB4='PROD.BATCH.LOADLIB'                                     FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n//* Sample Include Member SAMPLE.PROCLIB(SETSTST)                   *   FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n// SET HLQ='SYSTST'                                                     FILE 779\n// SET DB2CRE8='STSTDBA1'                                               FILE 779\n// SET DB2DBNM='STSTDB01'                                               FILE 779\n// SET DB2SUBS='TEST'                                                   FILE 779\n// SET PARMLIB1='STST.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB2='QTST.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB3='PROD.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB4='SYS1.DUMMY'                                            FILE 779\n// SET LODLIB1='STST.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB2='QTST.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB3='PROD.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB4='SYS1.DUMMY'                                             FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n//* Sample Include Member SAMPLE.PROCLIB(SETQTST)                   *   FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n// SET HLQ='QATST'                                                      FILE 779\n// SET DB2CRE8='QTSTDBA1'                                               FILE 779\n// SET DB2DBNM='QTSTDB01'                                               FILE 779\n// SET DB2SUBS='TEST'                                                   FILE 779\n// SET PARMLIB1='QTST.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB2='PROD.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB3='SYS1.DUMMY'                                            FILE 779\n// SET PARMLIB4='SYS1.DUMMY'                                            FILE 779\n// SET LODLIB1='QTST.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB2='PROD.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB3='SYS1.DUMMY'                                             FILE 779\n// SET LODLIB4='SYS1.DUMMY'                                             FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n//* Sample Include Member SAMPLE.PROCLIB(SETPROD)                   *   FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n// SET HLQ='PROD'                                                       FILE 779\n// SET DB2CRE8='PRODDBA1'                                               FILE 779\n// SET DB2DBNM='PRODDB01'                                               FILE 779\n// SET DB2SUBS='PROD'                                                   FILE 779\n// SET PARMLIB1='PROD.ENDEVOR.PARMLIB'                                  FILE 779\n// SET PARMLIB2='SYS1.DUMMY'                                            FILE 779\n// SET PARMLIB3='SYS1.DUMMY'                                            FILE 779\n// SET PARMLIB4='SYS1.DUMMY'                                            FILE 779\n// SET LODLIB1='PROD.BATCH.LOADLIB'                                     FILE 779\n// SET LODLIB2='SYS1.DUMMY'                                             FILE 779\n// SET LODLIB3='SYS1.DUMMY'                                             FILE 779\n// SET LODLIB4='SYS1.DUMMY'                                             FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n//* Sample SYMBSUB job to substitute symbols at execution time.     *   FILE 779\n//*                                                                 *   FILE 779\n//* Note how changing, SET ENV='USER', 'STST', 'QTST' or 'PROD'     *   FILE 779\n//*   would permit this job to run any any of these environments    *   FILE 779\n//*   with no other changes to the JCL, PROCs or control cards.     *   FILE 779\n//*   A different INCLUDE member would be pulled in containing SET  *   FILE 779\n//*   statements appropriate for the environment, thus different    *   FILE 779\n//*   values are substituted for the symbols HLQ, DB2CRE8, DB2DBNM  *   FILE 779\n//*   and DB2SUBS by SYMBSUB.  This allows maintenance of a single  *   FILE 779\n//*   set of control cards for these multiple environments instead  *   FILE 779\n//*   of multiple cards.  Less to maintain, less risk of things     *   FILE 779\n//*   getting out of sync.                                          *   FILE 779\n//*                                                                 *   FILE 779\n//* Also note that when the input is a library concatenation        *   FILE 779\n//*   (example 5), the input members will be searched for from among*   FILE 779\n//*   the concatenated libraries.  This allows your JCL to have the *   FILE 779\n//*   flexibilty of locating the latest version of an input member  *   FILE 779\n//*   that applies for the environment.  This is very convenient    *   FILE 779\n//*   when the concatenation list of control card libraries are     *   FILE 779\n//*   contained in an INCLUDE member for the environment.           *   FILE 779\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *   FILE 779\n//*                                                                 *   FILE 779\n//*                                                                 *   FILE 779\n//*#################################################################*   FILE 779\n//* Begin sample job                                                *   FILE 779\n//*#################################################################*   FILE 779\n//MYJOBNAM JOB (MYACCTNO),'SYMBSUB EXAMPLES',                           FILE 779\n//  CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID                                   FILE 779\n//********************************************************************* FILE 779\n//**********   THIS IS A SAMPLE JOB OF HOW TO USE SYMBSUB   *********** FILE 779\n//********************************************************************* FILE 779\n//PROC JCLLIB ORDER=(SAMPLE.PROCLIB,PROD.PROCLIB)                       FILE 779\n//********************************************************************* FILE 779\n//  SET ENV='USER'   VALUES ARE 'USER', 'STST', 'QTST' OR 'PROD'        FILE 779\n//  INCLUDE MEMBER=SET&ENV.                                             FILE 779\n//********************************************************************* FILE 779\n//* CLEANUP - ALLOC/DELETE OLD TEMPORARY OUTPUT FILES                   FILE 779\n//********************************************************************* FILE 779\n//CLEANUP  EXEC PGM=IEFBR14                                             FILE 779\n//EX01     DD DSN=&HLQ..TEMPCARD.EX01,                                  FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX02     DD DSN=&HLQ..TEMPCARD.EX02,                                  FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX03     DD DSN=&HLQ..TEMPCARD.EX03.PDSOUT,                           FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX04     DD DSN=&HLQ..TEMPCARD.EX04.PDSOUT,                           FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX05     DD DSN=&HLQ..TEMPCARD.EX05.PDSOUT,                           FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX06A    DD DSN=&HLQ..TEMPCARD.EX06.TBLBKUP,                          FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX06B    DD DSN=&HLQ..TEMPCARD.EX06.TBLTERM,                          FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX07A    DD DSN=&HLQ..TEMPCARD.EX07.TBLBKUP,                          FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//EX07B    DD DSN=&HLQ..TEMPCARD.EX07.TBLTERM,                          FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,0)),DISP=(MOD,DELETE,DELETE)      FILE 779\n//********************************************************************* FILE 779\n//* ALLOC - ALLOCATE NEW TEMPORARY LIBRARY OUTPUT FILES                 FILE 779\n//********************************************************************* FILE 779\n//ALLOC    EXEC PGM=IEFBR14                                             FILE 779\n//EX03     DD DSN=&HLQ..TEMPCARD.EX03.PDSOUT,                           FILE 779\n//            DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(CYL,(1,1,10)),DISP=(NEW,CATLG,CATLG)     FILE 779\n//EX04     DD DSN=&HLQ..TEMPCARD.EX04.PDSOUT,                           FILE 779\n//            DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(CYL,(1,1,10)),DISP=(NEW,CATLG,CATLG)     FILE 779\n//EX05     DD DSN=&HLQ..TEMPCARD.EX05.PDSOUT,                           FILE 779\n//            DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(CYL,(1,1,10)),DISP=(NEW,CATLG,CATLG)     FILE 779\n//********************************************************************* FILE 779\n//* EXAMPLE 1 - INSTREAM INPUT,                                         FILE 779\n//*             SINGLE DISCRETE FLAT FILE OUTPUT                        FILE 779\n//********************************************************************* FILE 779\n//EXAMPL01 EXEC PGM=SYMBSUB                                             FILE 779\n//STEPLIB  DD DSN=&LODLIB1,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB2,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB3,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB4,DISP=SHR                                     FILE 779\n//CNTLIN   DD *                                                         FILE 779\n  DSN SYSTEM(&DB2SUBS)                                                  FILE 779\n -TERM UTILITY(LOADTBLX)                                                FILE 779\n  END                                                                   FILE 779\n/*                                                                      FILE 779\n//CNTLOUT  DD DSN=&HLQ..TEMPCARD.EX01,                                  FILE 779\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,1),RLSE),DISP=(NEW,CATLG,CATLG)   FILE 779\n//SYSOUT   DD SYSOUT=*                                                  FILE 779\n//SYSPRINT DD SYSOUT=*                                                  FILE 779\n//SYSUDUMP DD SYSOUT=*                                                  FILE 779\n//********************************************************************* FILE 779\n//* EXAMPLE 2 - SINGLE DISCRETE MEMBER INPUT,                           FILE 779\n//*             SINGLE DISCRETE FLAT FILE OUTPUT                        FILE 779\n//********************************************************************* FILE 779\n//EXAMPL02 EXEC PGM=SYMBSUB                                             FILE 779\n//STEPLIB  DD DSN=&LODLIB1,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB2,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB3,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB4,DISP=SHR                                     FILE 779\n//CNTLIN   DD DSN=&PARMLIB1(TBLTERM),DISP=SHR                           FILE 779\n//CNTLOUT  DD DSN=&HLQ..TEMPCARD.EX02,                                  FILE 779\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,1),RLSE),DISP=(NEW,CATLG,CATLG)   FILE 779\n//SYSOUT   DD SYSOUT=*                                                  FILE 779\n//SYSPRINT DD SYSOUT=*                                                  FILE 779\n//SYSUDUMP DD SYSOUT=*                                                  FILE 779\n//********************************************************************* FILE 779\n//* EXAMPLE 3 - SINGLE DISCRETE MEMBER INPUT,                           FILE 779\n//*             SINGLE DISCRETE MEMBER OUTPUT                           FILE 779\n//********************************************************************* FILE 779\n//EXAMPL03 EXEC PGM=SYMBSUB                                             FILE 779\n//STEPLIB  DD DSN=&LODLIB1,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB2,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB3,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB4,DISP=SHR                                     FILE 779\n//CNTLIN   DD DSN=&PARMLIB1(TBLBKUP),DISP=SHR                           FILE 779\n//CNTLOUT  DD DSN=&HLQ..TEMPCARD.EX03.PDSOUT(TBLBKUP),DISP=SHR          FILE 779\n//SYSOUT   DD SYSOUT=*                                                  FILE 779\n//SYSPRINT DD SYSOUT=*                                                  FILE 779\n//SYSUDUMP DD SYSOUT=*                                                  FILE 779\n//********************************************************************* FILE 779\n//* EXAMPLE 4 - MULTIPLE DISCRETE MEMBERS INPUT,                        FILE 779\n//*             MULTIPLE DISCRETE MEMBERS OUTPUT                        FILE 779\n//********************************************************************* FILE 779\n//EXAMPL04 EXEC PGM=SYMBSUB                                             FILE 779\n//STEPLIB  DD DSN=&LODLIB1,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB2,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB3,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB4,DISP=SHR                                     FILE 779\n//CNTL001I DD DSN=&PARMLIB1(TBLBKUP),DISP=SHR                           FILE 779\n//CNTL001O DD DSN=&HLQ..TEMPCARD.EX04.PDSOUT(TBLBKUP),DISP=SHR          FILE 779\n//CNTL002I DD DSN=&PARMLIB1(TBLTERM),DISP=SHR                           FILE 779\n//CNTL002O DD DSN=&HLQ..TEMPCARD.EX04.PDSOUT(TBLTERM),DISP=SHR          FILE 779\n//SYSOUT   DD SYSOUT=*                                                  FILE 779\n//SYSPRINT DD SYSOUT=*                                                  FILE 779\n//SYSUDUMP DD SYSOUT=*                                                  FILE 779\n//********************************************************************* FILE 779\n//* EXAMPLE 5 - PDS LIBRARY AND MEMBER LIST INPUT,                      FILE 779\n//*             PDS LIBRARY OUTPUT                                      FILE 779\n//********************************************************************* FILE 779\n//EXAMPL05 EXEC PGM=SYMBSUB                                             FILE 779\n//STEPLIB  DD DSN=&LODLIB1,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB2,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB3,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB4,DISP=SHR                                     FILE 779\n//LIBR001I DD DSN=&PARMLIB1,DISP=SHR                                    FILE 779\n//         DD DSN=&PARMLIB2,DISP=SHR                                    FILE 779\n//         DD DSN=&PARMLIB3,DISP=SHR                                    FILE 779\n//         DD DSN=&PARMLIB4,DISP=SHR                                    FILE 779\n//LIBR001O DD DSN=&HLQ..TEMPCARD.EX05.PDSOUT,DISP=SHR                   FILE 779\n//LIBR001M DD *                                                         FILE 779\n   TBL* *UNLD*                                                          FILE 779\n//SYSOUT   DD SYSOUT=*                                                  FILE 779\n//SYSPRINT DD SYSOUT=*                                                  FILE 779\n//SYSUDUMP DD SYSOUT=*                                                  FILE 779\n//********************************************************************* FILE 779\n//* EXAMPLE 6 - MULTIPLE PDS MEMBERS INPUT,                             FILE 779\n//*             MULTIPLE FLAT FILES OUTPUT                              FILE 779\n//********************************************************************* FILE 779\n//EXAMPL06 EXEC PGM=SYMBSUB                                             FILE 779\n//STEPLIB  DD DSN=&LODLIB1,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB2,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB3,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB4,DISP=SHR                                     FILE 779\n//SYSOUT   DD SYSOUT=*                                                  FILE 779\n//SYSPRINT DD SYSOUT=*                                                  FILE 779\n//SYSUDUMP DD SYSOUT=*                                                  FILE 779\n//CNTL6AIN DD DSN=&PARMLIB1(TBLBKUP),DISP=SHR                           FILE 779\n//CNTL6AOT DD DSN=&HLQ..TEMPCARD.EX06.TBLBKUP,                          FILE 779\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,1),RLSE),DISP=(NEW,CATLG,CATLG)   FILE 779\n//CNTL6BIN DD DSN=&PARMLIB1(TBLTERM),DISP=SHR                           FILE 779\n//CNTL6BOT DD DSN=&HLQ..TEMPCARD.EX06.TBLTERM,                          FILE 779\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,1),RLSE),DISP=(NEW,CATLG,CATLG)   FILE 779\n//********************************************************************* FILE 779\n//* EXAMPLE 7 - INSTREAM INPUT,                                         FILE 779\n//*             MULTIPLE FLAT FILES OUTPUT                              FILE 779\n//********************************************************************* FILE 779\n//EXAMPL07 EXEC PGM=SYMBSUB                                             FILE 779\n//STEPLIB  DD DSN=&LODLIB1,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB2,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB3,DISP=SHR                                     FILE 779\n//         DD DSN=&LODLIB4,DISP=SHR                                     FILE 779\n//CNTL1IN  DD *                                                         FILE 779\n  UNLOAD TABLESPACE &DB2DBNM..CNTDGKEY                                  FILE 779\n    LOCK NO                                                             FILE 779\n    QUIESCE NO                                                          FILE 779\n    QUIESCECAT NO                                                       FILE 779\n    SELECT *                                                            FILE 779\n      FROM &DB2CRE8..CONTR_DESG_KEY                                     FILE 779\n    FORMAT USER ()                                                      FILE 779\n    OUTDDN(SYSREC00)                                                    FILE 779\n//CNTL1OUT DD DSN=&HLQ..TEMPCARD.EX07.TBLBKUP,                          FILE 779\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,1),RLSE),DISP=(NEW,CATLG,CATLG)   FILE 779\n//CNTL2IN  DD *                                                         FILE 779\n  DSN SYSTEM(&DB2SUBS)                                                  FILE 779\n -TERM UTILITY(LOADTBLX)                                                FILE 779\n  END                                                                   FILE 779\n//CNTL2OUT DD DSN=&HLQ..TEMPCARD.EX07.TBLTERM,                          FILE 779\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=0),               FILE 779\n//            UNIT=DELW,SPACE=(TRK,(1,1),RLSE),DISP=(NEW,CATLG,CATLG)   FILE 779\n//SYSOUT   DD SYSOUT=*                                                  FILE 779\n//SYSPRINT DD SYSOUT=*                                                  FILE 779\n//SYSUDUMP DD SYSOUT=*                                                  FILE 779\n//                                                                      FILE 779\n//*#################################################################*   FILE 779\n//* End sample job                                                  *   FILE 779\n//*#################################################################*   FILE 779\n//*                                                                 *   FILE 779\n//*                                                                 *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*          How does SYMBSUB get the values of the symbols?        *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB invokes SDSF to \"print\" the JESJCL listing to a dataset.*   FILE 779\n//* This is the same listing you can view in SDSF if you view the   *   FILE 779\n//* JESJCL of an executing batch job.  SYMBSUB then reads this      *   FILE 779\n//* dataset and parses the JCL to find the values of the symbols.   *   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB also has several \"BUILTIN\" symbols that are available   *   FILE 779\n//* for substitution even when they are not defined within the JCL. *   FILE 779\n//*                                                                 *   FILE 779\n//*   &SYSUID                                                       *   FILE 779\n//*   &JOBNAME                                                      *   FILE 779\n//*   Current date and time in several formats                      *   FILE 779\n//*   Century, Year, Mon, Day, Hour, Min, Sec, etc. individually    *   FILE 779\n//*   Day of Week - number, full name and abbreviated name,         *   FILE 779\n//*   Month - full name and abbreviated name                        *   FILE 779\n//*                                                                 *   FILE 779\n//* Each execution of SYMBSUB displays a complete list of all of the*   FILE 779\n//* symbols that were available for that run, including the builtin *   FILE 779\n//* ones.                                                           *   FILE 779\n//*                                                                 *   FILE 779\n//* You can also pass values via the parm and they will override the*   FILE 779\n//* values found in the JCL, but this is rarely needed and          *   FILE 779\n//* recommended only for special situations.                        *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*     \"Special Situations\"?  You sound like a politician ...      *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB is aware of which step or procstep it is executing      *   FILE 779\n//* within and keeps track of the changes that take place to all of *   FILE 779\n//* the symbolic variables in the JCL.  Due to limitations in the   *   FILE 779\n//* way the JCL is presented in the JESJCL listing, there is one    *   FILE 779\n//* rare situation where SYMBSUB may have a problem because it      *   FILE 779\n//* cannot correctly determine the value of a symbol.               *   FILE 779\n//*                                                                 *   FILE 779\n//* That situation is when all of the following are true:           *   FILE 779\n//*   1) The job executes a nested proc (i.e. a proc calls a proc). *   FILE 779\n//*   2) Symbol values are changed within the nested proc or within *   FILE 779\n//*      the calling proc after the nested proc.                    *   FILE 779\n//*   3) SYMBSUB is executed within the nested proc or within the   *   FILE 779\n//*      calling proc after the nested proc.                        *   FILE 779\n//*   4) SYMBSUB needs to use one of those specific changed symbols *   FILE 779\n//*      in a substitution variable assignment.                     *   FILE 779\n//*                                                                 *   FILE 779\n//* Complicated?  Yep, but you don't need to figure out if that     *   FILE 779\n//* happens in your job, SYMBSUB will tell you, and it depends on   *   FILE 779\n//* the structure of the JCL, not the current values of the symbols.*   FILE 779\n//* This means you'll find out about it the first time you test the *   FILE 779\n//* job after making any JCL or PROC changes.                       *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*          What if I encounter this \"Special Situation\"?          *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* If this does happen, SYMBSUB will issue a very detailed error   *   FILE 779\n//* message and give a return code of 8.  It will tell you exactly  *   FILE 779\n//* which symbols it encountered the problem on and what to do to   *   FILE 779\n//* work around the problem.  The preferred solution would be to    *   FILE 779\n//* change the job structure so that the SYMBSUB is executed before *   FILE 779\n//* the nested proc or to not use nested procs.  Obviously this may *   FILE 779\n//* not always be possible.  A second possible fix would be to avoid*   FILE 779\n//* changing the value of the symbolic variable within the nested   *   FILE 779\n//* proc or after the beginning of the nested proc.  Again this may *   FILE 779\n//* not always be possible.  The last alternative will always work  *   FILE 779\n//* but is not preferred, and that is to pass the specific symbols  *   FILE 779\n//* needed to SYMBSUB on the parm.  This alternative will be        *   FILE 779\n//* explained in the error message and the specific text needed for *   FILE 779\n//* the parm string will even be provided in the message.  It will  *   FILE 779\n//* typically be something similar to the following:                *   FILE 779\n//*                                                                 *   FILE 779\n//*     PARM=('SOMEVAR=&SOMEVAR')                                   *   FILE 779\n//*                                                                 *   FILE 779\n//* Where SOMEVAR would be the name of the actual symbolic variable *   FILE 779\n//* that the problem was encountered on.  This would cause the      *   FILE 779\n//* actual value to be substituted by the JCL interpreter and passed*   FILE 779\n//* in through the PARM, thus overriding what SYMBSUB encounters    *   FILE 779\n//* while parsing the JESJCL.                                       *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*         How does SYMBSUB find my input and output dd cards?     *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB dynamically searches through the MVS TIOT entries to    *   FILE 779\n//* find the allocated DD names at the time it is executing.  It    *   FILE 779\n//* specifically looks for any DD cards with names beginning with   *   FILE 779\n//* \"CNTL\" or \"LIBR\" and ending with \"I\" or \"IN\" (for input), \"O\",  *   FILE 779\n//* \"OT\" or \"OUT\" (for output) and \"M\" (for member selection lists).*   FILE 779\n//* Any DD cards it finds that fit this format are assumed to be    *   FILE 779\n//* intended as input or output cards for processing.  The input and*   FILE 779\n//* output DD cards are matched to each other by the characters     *   FILE 779\n//* found between the prefix (\"CNTL\") and the suffix (\"I\", \"IN\",    *   FILE 779\n//* \"O\", \"OT\" or \"OUT\").  SYMBSUB can handle up to 100 DD cards.    *   FILE 779\n//*                                                                 *   FILE 779\n//* If an input DD card is found for which no matching output DD    *   FILE 779\n//* card can be found, SYMBSUB will issue a error message and return*   FILE 779\n//* code 12, and that input DD card will be ignored.                *   FILE 779\n//*                                                                 *   FILE 779\n//* If an output DD card is found for which no matching input DD    *   FILE 779\n//* card can be found, SYMBSUB will issue a warning message and     *   FILE 779\n//* return code 4, and that output DD card will be ignored.         *   FILE 779\n//*                                                                 *   FILE 779\n//* If more than one input or output DD card is found with the same *   FILE 779\n//* characters between the prefix and the suffix, SYMBSUB will issue*   FILE 779\n//* an error message and return code 12 and only the first such DD  *   FILE 779\n//* card found will be used.                                        *   FILE 779\n//*                                                                 *   FILE 779\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE779": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04U\\x00F\\x01\\x12\\'?\\x01\\x12\\'?\"\\x10\\x00\\xab\\x00\\xab\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf5@@@'", "ispf": {"version": "04.85", "flags": 0, "createdate": "2012-09-29T00:00:00", "modifydate": "2012-09-29T22:10:46", "lines": 171, "newlines": 171, "modlines": 0, "user": "CBT-485"}, "text": "//***FILE 779 is from Bill Bass, and contains a very clever COBOL   *   FILE 779\n//*           program which looks at a job in SDSF and performs     *   FILE 779\n//*           symbolic substitution from reading the symbolic       *   FILE 779\n//*           substitutions that are shown in SDSF, which were      *   FILE 779\n//*           performed by the JCL converter and interpreter.       *   FILE 779\n//*                                                                 *   FILE 779\n//*           email:  \"Bass, Walter W\" <bill_bass@uhc.com>          *   FILE 779\n//*                                                                 *   FILE 779\n//*     Further explanation:                                        *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//*                     HOW-TO Guide for SYMBSUB                    *   FILE 779\n//*                               with                              *   FILE 779\n//*                       JCL Symbolic Variable                     *   FILE 779\n//*                          Include Modules                        *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*                         What is SYMBSUB?                        *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB is a tool that reads in 80 column card files and        *   FILE 779\n//* performs symbolic variable substitution using the values of     *   FILE 779\n//* the symbols from the JCL, then writes the cards back out.       *   FILE 779\n//* Each input DD can be either instream data, a single sequential  *   FILE 779\n//* file, a single PDS member or a concatenated list of PDS         *   FILE 779\n//* libraries.  Each output DD can be either a single sequential    *   FILE 779\n//* file, a single PDS member, or a PDS library.                    *   FILE 779\n//*                                                                 *   FILE 779\n//* What makes SYMBSUB unique from other tools of this type that    *   FILE 779\n//* have come before it, is that it retrieves the values of the     *   FILE 779\n//* symbols from the JCL on its own.  All you have to do is         *   FILE 779\n//* provide it with one or more input dd cards and matching output  *   FILE 779\n//* dd cards.  It will automatically find your input files, read    *   FILE 779\n//* them, substitute the symbols with the values from the JCL and   *   FILE 779\n//* write the modified cards out to the appropriate output files.   *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*                        How do I use SYMBSUB?                    *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* To use SYMBSUB, you provide it with input and output DD cards   *   FILE 779\n//* that it finds and processes.  These can be of two types:        *   FILE 779\n//*   1) Single file input/output pairs.                            *   FILE 779\n//*   2) Multiple PDS member input/output libraries and a member    *   FILE 779\n//*      selection list (wild carded member lists are supported).   *   FILE 779\n//*      These are the wild characters permitted:                   *   FILE 779\n//*        \"*\" = match zero or more of any characters.              *   FILE 779\n//*        \"?\" = match any one single character.                    *   FILE 779\n//*        \"!\" = match one upper case alphabet letter (\"A\" - \"Z\").  *   FILE 779\n//*        \"%\" = match one numeric digit (\"0\" - \"9\").               *   FILE 779\n//*        \"~\" = match one special character (\"@\", \"#\" or \"$\").     *   FILE 779\n//*                                                                 *   FILE 779\n//* One execution of SYMBSUB can have multiple occurances of type 1 *   FILE 779\n//* and/or type 2 input/output sets of DD cards.                    *   FILE 779\n//*                                                                 *   FILE 779\n//* The easiest way to explain using SYMBSUB is to show examples.   *   FILE 779\n//* Please see member $INTRO01 in this pds.....                     *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*          How does SYMBSUB get the values of the symbols?        *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB invokes SDSF to \"print\" the JESJCL listing to a         *   FILE 779\n//* dataset.  This is the same listing you can view in SDSF if you  *   FILE 779\n//* view the JESJCL of an executing batch job.  SYMBSUB then reads  *   FILE 779\n//* this dataset and parses the JCL to find the values of the       *   FILE 779\n//* symbols.                                                        *   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB also has several \"BUILTIN\" symbols that are available   *   FILE 779\n//* for substitution even when they are not defined within the JCL. *   FILE 779\n//*                                                                 *   FILE 779\n//*   &SYSUID                                                       *   FILE 779\n//*   &JOBNAME                                                      *   FILE 779\n//*   Current date and time in several formats                      *   FILE 779\n//*   Century, Year, Mon, Day, Hour, Min, Sec, etc. individually    *   FILE 779\n//*   Day of Week - number, full name and abbreviated name,         *   FILE 779\n//*   Month - full name and abbreviated name                        *   FILE 779\n//*                                                                 *   FILE 779\n//* Each execution of SYMBSUB displays a complete list of all of    *   FILE 779\n//* the symbols that were available for that run, including the     *   FILE 779\n//* builtin ones.                                                   *   FILE 779\n//*                                                                 *   FILE 779\n//* You can also pass values via the parm and they will override    *   FILE 779\n//* the values found in the JCL, but this is rarely needed and      *   FILE 779\n//* recommended only for special situations.                        *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*     \"Special Situations\"?  You sound like a politician ...      *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB is aware of which step or procstep it is executing      *   FILE 779\n//* within and keeps track of the changes that take place to all of *   FILE 779\n//* the symbolic variables in the JCL.  Due to limitations in the   *   FILE 779\n//* way the JCL is presented in the JESJCL listing, there is one    *   FILE 779\n//* rare situation where SYMBSUB may have a problem because it      *   FILE 779\n//* cannot correctly determine the value of a symbol.               *   FILE 779\n//*                                                                 *   FILE 779\n//* That situation is when all of the following are true:           *   FILE 779\n//*   1) The job executes a nested proc (i.e. a proc calls a proc). *   FILE 779\n//*   2) Symbol values are changed within the nested proc or within *   FILE 779\n//*      the calling proc after the nested proc.                    *   FILE 779\n//*   3) SYMBSUB is executed within the nested proc or within the   *   FILE 779\n//*      calling proc after the nested proc.                        *   FILE 779\n//*   4) SYMBSUB needs to use one of those specific changed symbols *   FILE 779\n//*      in a substitution variable assignment.                     *   FILE 779\n//*                                                                 *   FILE 779\n//* Complicated?  Yep, but you don't need to figure out if that     *   FILE 779\n//* happens in your job, SYMBSUB will tell you, and it depends on   *   FILE 779\n//* the structure of the JCL, not the current values of the         *   FILE 779\n//* symbols.  This means you'll find out about it the first time    *   FILE 779\n//* you test the job after making any JCL or PROC changes.          *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*          What if I encounter this \"Special Situation\"?          *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* If this does happen, SYMBSUB will issue a very detailed error   *   FILE 779\n//* message and give a return code of 8.  It will tell you exactly  *   FILE 779\n//* which symbols it encountered the problem on and what to do to   *   FILE 779\n//* work around the problem.  The preferred solution would be to    *   FILE 779\n//* change the job structure so that the SYMBSUB is executed        *   FILE 779\n//* before the nested proc or to not use nested procs.  Obviously   *   FILE 779\n//* this may not always be possible.  A second possible fix would   *   FILE 779\n//* be to avoid changing the value of the symbolic variable within  *   FILE 779\n//* the nested proc or after the beginning of the nested proc.      *   FILE 779\n//* Again this may not always be possible.  The last alternative    *   FILE 779\n//* will always work but is not preferred, and that is to pass the  *   FILE 779\n//* specific symbols needed to SYMBSUB on the parm.  This           *   FILE 779\n//* alternative will be explained in the error message and the      *   FILE 779\n//* specific text needed for the parm string will even be provided  *   FILE 779\n//* in the message.  It will typically be something similar to the  *   FILE 779\n//* following:                                                      *   FILE 779\n//*                                                                 *   FILE 779\n//*     PARM=('SOMEVAR=&SOMEVAR')                                   *   FILE 779\n//*                                                                 *   FILE 779\n//* Where SOMEVAR would be the name of the actual symbolic          *   FILE 779\n//* variable that the problem was encountered on.  This would       *   FILE 779\n//* cause the actual value to be substituted by the JCL             *   FILE 779\n//* interpreter and passed in through the PARM, thus overriding     *   FILE 779\n//* what SYMBSUB encounters while parsing the JESJCL.               *   FILE 779\n//*                                                                 *   FILE 779\n//*=================================================================*   FILE 779\n//*         How does SYMBSUB find my input and output dd cards?     *   FILE 779\n//*=================================================================*   FILE 779\n//*                                                                 *   FILE 779\n//* SYMBSUB dynamically searches through the MVS TIOT entries to    *   FILE 779\n//* find the allocated DD names at the time it is executing.  It    *   FILE 779\n//* specifically looks for any DD cards with names beginning with   *   FILE 779\n//* \"CNTL\" or \"LIBR\" and ending with \"I\" or \"IN\" (for input), \"O\",  *   FILE 779\n//* \"OT\" or \"OUT\" (for output) and \"M\" (for member selection        *   FILE 779\n//* lists).  Any DD cards it finds that fit this format are         *   FILE 779\n//* assumed to be intended as input or output cards for             *   FILE 779\n//* processing.  The input and output DD cards are matched to each  *   FILE 779\n//* other by the characters found between the prefix (\"CNTL\") and   *   FILE 779\n//* the suffix (\"I\", \"IN\", \"O\", \"OT\" or \"OUT\").  SYMBSUB can        *   FILE 779\n//* handle up to 100 DD cards.                                      *   FILE 779\n//*                                                                 *   FILE 779\n//* If an input DD card is found for which no matching output DD    *   FILE 779\n//* card can be found, SYMBSUB will issue a error message and       *   FILE 779\n//* return code 12, and that input DD card will be ignored.         *   FILE 779\n//*                                                                 *   FILE 779\n//* If an output DD card is found for which no matching input DD    *   FILE 779\n//* card can be found, SYMBSUB will issue a warning message and     *   FILE 779\n//* return code 4, and that output DD card will be ignored.         *   FILE 779\n//*                                                                 *   FILE 779\n//* If more than one input or output DD card is found with the      *   FILE 779\n//* same characters between the prefix and the suffix, SYMBSUB      *   FILE 779\n//* will issue an error message and return code 12 and only the     *   FILE 779\n//* first such DD card found will be used.                          *   FILE 779\n//*                                                                 *   FILE 779\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYMBSUB": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00P\\x01\\x08\\x01O\\x01\\x12'o\\x17Y\\x14\\x10\\x0b\\xbf\\x00\\x00\\xe3\\xe2\\xe4\\xc1\\xf0\\xe8\\xd4@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "2008-01-14T00:00:00", "modifydate": "2012-10-02T17:59:50", "lines": 5136, "newlines": 3007, "modlines": 0, "user": "TSUA0YM"}, "text": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    SYMBSUB.\n       AUTHOR.        BILL BASS.\n       DATE-WRITTEN.  OCT 2002.\n       DATE-COMPILED.\n      *****************************************************************\n      * PURPOSE:\n      *   THIS PROGRAM TAKES INPUT FILES OF 80 BYTE CARDS AND PERFORMS\n      *   SYMBOLIC VARIABLE SUBSTITUTION ON THEM, THEN WRITES THE\n      *   MODIFIED CARDS TO AN OUTPUT FILE\n      *\n      * INPUTS: (ONE OR MORE OF THE FOLLOWING)\n      *   1) PARMS FOR SPECIFYING OR OVERRIDING PROGRAM DEFAULTS.\n      *   2) DISCRETE CONTROL CARD FILES.\n      *   3) CONTROL CARD LIBRARIES (CONCATENATION ALLOWED).\n      *\n      * OUTPUTS: (ONE OR MORE OF THE FOLLOWING)\n      *   1) DISCRETE CONTROL CARD FILES.\n      *   2) CONTROL CARD LIBRARY (CONCATENATION PROHIBITED).\n      *\n      * DEFAULT COLUMN BOUNDARIES ARE 1-72, I.E. DATA WILL ONLY BE\n      * EXAMINED WITHIN THIS COLUMN RANGE.  ALL DATA OUTSIDE OF THIS\n      * RANGE WILL BE WRITTEN OUT UNCHANGED.  COLUMN BOUNDS CAN BE\n      * OVERRIDDEN BY USING PARM \"$BOUNDS=L:R\", WHERE L AND R ARE\n      * THE COLUMN NUMBERS FOR THE LEFT AND RIGHT BOUNDS.  THE COLON\n      * IS MANDATORY ON THE $BOUNDS PARM, BUT EITHER COLUMN NUMBER\n      * MAY BE OMITTED TO RETAIN THE DEFAULT.  \"$BOUNDS\" MAY BE\n      * ABBREVIATED AS \"$BNDS\" OR \"$B\".\n      *\n      * DATA IS SHIFTED BY THE SYMBOLIC SUBSTITUTION.  IF SHIFTING\n      * PUSHES THE DATA PAST THE RIGHT BOUNDARY, TRUNCATION OCCURS\n      * AND THE PROGRAM SETS THE RETURN CODE TO 8.\n      *\n      * SYMBOL VALUES ARE RETRIEVED FROM THE JCL.  THEY WILL HAVE\n      * THE VALUES THAT ARE CURRENT FOR THE JOB STEP THAT THIS PROGRAM\n      * IS RUNNING IN.  ADDITIONAL OR OVERRIDING SYMBOLIC VALUES MAY\n      * ALSO BE PASSED ON THE EXEC PARM= STATEMENT:\n      *     E.G. IF YOU CODE THE FOLLOWING IN THE JCL\n      *         //      SET ENV=P\n      *         //STEP1 EXEC PGM=SYMBSUB,PARM=('ENV=X')\n      *\n      *     THE PROGRAM WOULD THEN PERFORM THE FOLLOWING\n      *     SUBSTITUTIONS IN THE CONTROL CARDS:\n      *         &ENV OR &ENV. WOULD BE CHANGED TO \"X\" RATHER THAN \"P\"\n      *****************************************************************\n      * THE PROGRAM ACCEPTS MULTIPLE INPUT AND OUTPUT DD CARDS IN\n      * SEVERAL DIFFERENT FORMATS TO SUPPORT DISCRETE CONTROL CARD\n      * FILES OR LIBRARIES OF INPUT AND OUTPUT CARDS.\n      *****************************************************************\n      * TO PROCESS A DISCRETE CARD FILE INPUT/OUTPUT, A MATCHING PAIR\n      * OF DD CARDS MUST BE SPECIFIED.  ONE FOR INPUT, ONE FOR OUTPUT.\n      * THE CARDS ARE IDENTIFIED BY DDNAMES BEGINNING WITH \"CNTL\".\n      *   INPUT CARD DDNAMES MUST END WITH \"I\".\n      *   OUTPUT CARD DDNAMES MUST END WITH \"O\".\n      *   CHARACTERS BETWEEN THE \"CNTL\" AND THE \"I\" OR \"O\" IDENTIFY\n      *     WHICH DDNAMES ARE MATCHED FOR INPUT AND OUTPUT.\n      *\n      * (NOTE: FOR COMPATIBILTY WITH EARLIER VERSIONS, DDNAMES ENDING\n      *  WITH \"IN\" OR \"OUT\" ARE ALSO RECOGNIZED BUT ARE DISCOURAGED)\n      *\n      * DISCRETE FILES MAY BE SEQUENTIAL OR SINGLE MEMBERS OF A PDS.\n      *\n      * THIS EXAMPLE WOULD PROCESS THREE DISCRETE CONTROL CARD FILES:\n      *   //CNTL001I  DD DSN=INPUT.CARD.ONE\n      *   //CNTL001O  DD DSN=OUTPUT.CARD.ONE\n      *   //CNTLABCI  DD DSN=INPUT.PDS.NAME(CARD2)\n      *   //CNTLABCO  DD DSN=OUTPUT.CARD.TWO\n      *   //CNTLXIN   DD DSN=INPUT.PDS.NAME(CARD3)\n      *   //CNTLXOUT  DD DSN=OUTPUT.PDS.NAME(CARD3)\n      * DDNAMES CNTL001I AND CNTL001O WOULD MATCH (MATCHED BY \"001\")\n      * DDNAMES CNTLABCI AND CNTLABCO WOULD MATCH (MATCHED BY \"ABC\")\n      * DDNAMES CNTLXIN  AND CNTLXOUT WOULD MATCH (MATCHED BY \"X\")\n      *****************************************************************\n      * TO PROCESS LIBRAY CARD FILE INPUT/OUTPUT, A MATCHING TRIO\n      * OF DD CARDS MUST BE SPECIFIED.  ONE FOR THE INPUT LIBRARY, ONE\n      * FOR THE OUTPUT LIBRARY AND ONE FOR A MEMBER SELECTION LIST.\n      * THESE DD CARDS ARE IDENTIFIED BY DDNAMES BEGINNING WITH \"LIBR\".\n      *   INPUT LIBRARY DDNAMES MUST END WITH \"I\".  THIS MAY BE A\n      *         CONCATENTION OF PDS DATASETS THAT WILL BE SEARCHED.\n      *   OUTPUT LIBRARY DDNAMES MUST END WITH \"O\".\n      *   MEMBER LIST DDNAMES MUST END WITH \"M\".\n      *   CHARACTERS BETWEEN THE \"LIBR\" AND THE \"I\", \"O\" OR \"M\"\n      *     IDENTIFY WHICH DDNAMES ARE MATCHED.\n      *\n      * INPUT AND OUTPUT LIBRARIES MUST BE PDS (OR PDSE).\n      * MEMBER LIST MUST BE A SEQUENTIAL FILE OR A SINGLE PDS MEMBER,\n      *   WHICH CONTAINS A LIST MEMBERS TO BE PROCESSED.  THE LIST\n      *   CONSISTS OF ONE OR MORE RECORDS, EACH HAVING ONE OR MORE\n      *   MEMBER SELECTION MASKS SEPERATED BY SPACES.  EACH MASK IS\n      *   EITHER A FULL MEMBER NAME OR A MEMBER NAME WITH WILD CARDS.\n      *   THESE ARE THE WILD CHARACTERS PERMITTED:\n      *     \"*\" = MATCH ZERO OR MORE OF ANY CHARACTERS.\n      *     \"?\" = MATCH ANY SINGLE CHARACTER.\n      *     \"!\" = MATCH ALPHABET LETTER \"A\" THROUGH \"Z\".\n      *     \"%\" = MATCH NUMERIC DIGIT \"0\" THROUGH \"9\".\n      *     \"~\" = MATCH SPECIAL CHARACTER \"@\", \"#\" OR \"$\"\n      *\n      * THESE DDCARDS WOULD PROCESS A LIBRARY OF CONTROL CARD FILES:\n      *   //LIBR001I DD DSN=INPUT.PDS.NAME,DISP=SHR\n      *   //LIBR001O DD DSN=OUTPUT.PDS.NAME,DISP=SHR\n      *   //LIBR001M DD *\n      *       MYMEMBER CARD# CARD## TEST*\n      *   /*\n      * MASK \"MYMEMBER\"\n      *   MATCHES ONLY MEMBER NAME \"MYMEMBER\"\n      * MASK \"CARD#\"\n      *   MATCHES \"CARD1\", \"CARD2\", \"CARD3\"\n      *   BUT NOT \"CARD\", \"CARDA\", \"CARDXYZ\", \"CARD12\" OR \"MYCARD1\"\n      * MASK \"CARD##\"\n      *   MATCHES \"CARD01\", \"CARD10\", \"CARD99\"\n      *   BUT NOT \"CARD12X\", \"CARD999\" OR \"MYCARD99\"\n      * MASK \"TEST*\"\n      *   MATCHES \"TEST\", \"TEST2\", \"TEST99\", \"TESTWXYZ\"\n      *   BUT NOT \"MYTEST\", \"XTEST99\"\n      *****************************************************************\n      * THE FOLLOWING ARE EXAMPLES OF HOW THIS WOULD BE USED IN JCL:\n      *   THE DEFAULT LEFT BOUNDARY (1) WILL REMAIN AS IS.\n      *   THE DEFAULT RIGHT BOUNDARY (72) WILL BE OVERRIDDEN TO 80.\n      *   THE SYMBOLIC VARIABLES &HIBYE AND &DAYNITE WILL BE REPLACE\n      *     WITH THE VALUES 'HELLO' AND 'MORNING'.\n      *****************************************************************\n      * //         SET HIBYE='HELLO'\n      * //         SET DAYNITE='MORNING'\n      *****************************************************************\n      * SAMPLE JCL USING ONE DISCRETE INPUT AND OUTPUT CARD FILE\n      *****************************************************************\n      * //STEP0010 EXEC PGM=SYMBSUB,COND=(4,LT),PARM=('&BNDS=:80')\n      * //CNTLIN   DD DSN=EXAMPLE.CNTLCARD.WITH.SYMBOLS,DISP=SHR\n      * //CNTLOUT  DD DSN=EXAMPLE.CNTLCARD.SYMBOLS.RESOLVED,\n      * //            DISP=(NEW,CATLG,CATLG),\n      * //            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),\n      * //            UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE)\n      * //SYSOUT   DD SYSOUT=*\n      * //SYSPRINT DD SYSOUT=*\n      * //SYSUDUMP DD SYSOUT=*\n      *****************************************************************\n      * SAMPLE JCL USING MULTIPLE DISCRETE INPUT AND OUTPUT CARD FILES\n      *****************************************************************\n      * //STEP0010 EXEC PGM=SYMBSUB,COND=(4,LT),PARM=('&B=:80')\n      * //CNTL001I DD DSN=EXAMPLE.CNTLCARD.WITH.SYMBOLS,DISP=SHR\n      * //CNTL001O DD DSN=EXAMPLE.CNTLCARD.SYMBOLS.RESOLVED,\n      * //            DISP=(NEW,CATLG,CATLG),\n      * //            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),\n      * //            UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE)\n      * //CNTLABCI DD DSN=ANOTHER.CNTLCARD.WITH.SYMBOLS,DISP=SHR\n      * //CNTLABCO DD DSN=ANOTHER.CNTLCARD.SYMBOLS.RESOLVED,\n      * //            DISP=(NEW,CATLG,CATLG),\n      * //            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB),\n      * //            UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE)\n      * //SYSOUT   DD SYSOUT=*\n      * //SYSPRINT DD SYSOUT=*\n      * //SYSUDUMP DD SYSOUT=*\n      *****************************************************************\n      * SAMPLE JCL USING INPUT AND OUTPUT LIBRARIES OF CARD FILES\n      *****************************************************************\n      * //ALLOCPDS EXEC PGM=IEFBR14\n      * //TEMPPDS  DD DSN=JOB.TEMP.CARDLIB,\n      * //            DCB=(DSORG=PO,LRECL=80,BLKSIZE=0,RECFM=FB),\n      * //            DISP=(NEW,CATLG,CATLG),\n      * //            UNIT=SYSDA,SPACE=(CYL,(1,1,10))\n      * //STEP0020 EXEC PGM=SYMBSUB,COND=(4,LT),PARM=('&B=:80')\n      * //LIBR001I DD DSN=TEST.CONTROL.CARDLIB,DISP=SHR\n      * //         DD DSN=PROD.CONTROL.CARDLIB,DISP=SHR\n      * //LIBR001O DD DSN=JOB.TEMP.CARDLIB,DISP=SHR\n      * //LIBR001M DD *\n      *   MYMEMBER CARD# CARD## TEST*\n      * //SYSOUT   DD SYSOUT=*\n      * //SYSPRINT DD SYSOUT=*\n      * //SYSUDUMP DD SYSOUT=*\n      *****************************************************************\n      *****************************************************************\n      * IF THE DATA IN THE INPUT FILE LOOKED LIKE THIS:\n      *\n      *     JUST A CARD TO SAY &HIBYE AND HAVE A GREAT &DAYNITE..\n      *\n      * THE OUTPUT WOULD LOOK LIKE THIS:\n      *\n      *     JUST A CARD TO SAY HELLO AND HAVE A GREAT MORNING.\n      *\n      *****************************************************************\n      * BUT IF THE JCL HAD THE FOLLOWING SYMBOLIC VARIABLES DEFINED\n      * //         SET HIBYE='GOODBYE'\n      * //         SET DAYNITE='EVENING'\n      *\n      * THE OUTPUT WOULD LOOK LIKE THIS:\n      *\n      *     JUST A CARD TO SAY GOODBYE AND HAVE A GREAT EVENING.\n      *\n      *****************************************************************\n      *****************************************************************\n      * MAINTENANCE:\n      *\n      *    DATE     PGMR    DESCRIPTION\n      *  11/04/2002 BBASS   NEW PROGRAM CREATION\n      *  07/21/2004 BBASS   ADDED BOUNDARY OVERRIDE CAPABILITY\n      *  11/08/2007 BBASS   ADDED SDSF JCL SCANNING FOR SYMBOL VALUES\n      *                     ADDED DYNAMIC SCANNING FOR I/O DDNAMES\n080212*  02/12/2008 BBASS   CLEAR ALL SDSF FILTERING AT START\n080310*  03/10/2008 BBASS   FIXED EXEC PROC SYMBOL LEVEL INIT BUG\n081107*  11/07/2008 BBASS   FIXED A BUG THAT CAUSED PROC OVERRIDE JCL\n081107*                     CARDS TO ACCIDENTALLY BE INTERPRETED AS\n081107*                     END OF THE PROC WHEN PARSING THE JESJCL\n081113*  11/13/2008 BBASS   ADDED AUTOMATIC SYSTEM SYMBOL SUBSTITUTION\n081113*                     ADDED PARM FOR DEFAULT TIMEZONE (UTC/LOCAL)\n090505*  05/05/2009 BBASS   ADDED JOBID BUILTIN SYMBOL\n090505*                     FIXED MINOR PROC PARSING BUG\n090915*  09/15/2009 BBASS   FIXED BUG ON SUBSTITUTION OF ONE CHARACTER\n090915*                     SYMBOL NAMES\n091020*  10/20/2009 BBASS   ADDED DB2 DATE/TIME BUILTIN SYMBOLS.\n091020*                     PROCESS SYMBPARM PHASE BEFORE JCLSCAN SO\n091020*                     THAT SYMBOLS PASSED ON THE PARM, OVERRIDE\n091020*                     PROPERLY AND CAN BE SUBSTITUTED WITHIN\n091020*                     SYMBOLS THAT ARE SCANNED IN THE JCL.\n100313*  03/13/2010 BBASS   ADDED LIBRARY INPUT CAPABILITY.\n100313*                     INPUT IS A PDS CONCATENATION (DD=LIBRXXXI)\n100313*                       AND A LIST OF MEMBERS      (DD=LIBRXXXM)\n100313*                     OUTPUT IS A PDS              (DD=LIBRXXXO)\n110222*  02/22/2011 BBASS   ADDED MEMBER MASK MATCHING CAPABILITY\n120824*  08/24/2012 BBASS   ADDED OPTIONAL PARMIN FILE FOR SETTING\n120824*                     PARMS FROM AN EXTERNAL DATASET\n      *****************************************************************\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS TOP-OF-PAGE.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n120824     SELECT OPTIONAL PARMIN-FILE     ASSIGN TO PARMIN.\n100313     SELECT MEMLIST-FILE             ASSIGN TO LSTDD.\n100313     SELECT DIR-FILE                 ASSIGN TO DIRDD\n100313                                     FILE STATUS DIR-STATUS.\n           SELECT CNTLIN-FILE              ASSIGN TO CNTLIN\n100313                                     FILE STATUS IN-STATUS.\n           SELECT CNTLOUT-FILE             ASSIGN TO CNTLOUT\n100313                                     FILE STATUS OUT-STATUS.\n           SELECT ISFIN-FILE               ASSIGN TO ISFIN.\n           SELECT JESJCL-FILE              ASSIGN TO OUTJCL.\n\n       DATA DIVISION.\n       FILE SECTION.\n120824\n120824 FD  PARMIN-FILE\n120824     LABEL RECORDS ARE STANDARD\n120824     RECORDING MODE IS F\n120824     RECORD CONTAINS 80 CHARACTERS\n120824     BLOCK CONTAINS   0 RECORDS\n120824     DATA RECORD IS FD-PARMIN-REC.\n120824\n120824 01  FD-PARMIN-REC               PIC X(80).\n100313\n100313 FD  MEMLIST-FILE\n100313     LABEL RECORDS ARE STANDARD\n100313     RECORDING MODE IS F\n100313     RECORD CONTAINS 80 CHARACTERS\n100313     BLOCK CONTAINS   0 RECORDS\n100313     DATA RECORD IS FD-MEMLIST-REC.\n100313\n100313 01  FD-MEMLIST-REC              PIC X(80).\n100313\n100313 FD  DIR-FILE\n100313     RECORD CONTAINS 0 CHARACTERS\n100313     RECORDING MODE IS U.\n100313 01  FD-DIR-REC                  PIC X(256).\n\n       FD  CNTLIN-FILE\n           LABEL RECORDS ARE STANDARD\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS   0 RECORDS\n           DATA RECORD IS FD-CNTLIN-REC.\n\n       01  FD-CNTLIN-REC               PIC X(80).\n\n       FD  CNTLOUT-FILE\n           LABEL RECORDS ARE STANDARD\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS   0 RECORDS\n           DATA RECORD IS FD-CNTLOUT-REC.\n\n       01  FD-CNTLOUT-REC              PIC X(80).\n\n       FD  ISFIN-FILE\n           LABEL RECORDS ARE STANDARD\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS   0 RECORDS\n           DATA RECORD IS FD-ISFIN-REC.\n\n       01  FD-ISFIN-REC                PIC X(80).\n\n       FD  JESJCL-FILE\n           LABEL RECORDS ARE STANDARD\n           RECORDING MODE IS F\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS    0 RECORDS\n           DATA RECORD IS FD-JESJCL-REC.\n\n       01  FD-JESJCL-REC.\n           05 FILLER                   PIC X(10).\n           05 JESJCL-DATA              PIC X(72).\n           05 JESJCL-SEQNO             PIC X(8).\n           05 FILLER                   PIC X(43).\n\n      ******************************************************************\n       WORKING-STORAGE SECTION.\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'WORKING STORAGE BEGINS HERE ===>'.\n      ******************************************************************\n       01  CNTLIN-REC                  PIC X(80) VALUE SPACES.\n       01  WORK-FIELDS.\n           05 WS-PROGRAM-ID.\n              10 PGM-NAME              PIC X(8)  VALUE 'SYMBSUB'.\n              10 PGM-VERS              PIC X(8)  VALUE '02.03.00'.\n           05 WS-COMPILE-DATE-TIME.\n              10 WS-COMPILE-DATE       PIC X(8).\n              10 WS-COMPILE-TIME       PIC X(8).\n      ******************************************************************\n      * CHANGE DEFAULT TIMEZONE TO 'LOCAL' IF YOU WANT DATE AND TIME\n      * SYMBOLS THAT DO NOT BEGIN WITH &U OR &L TO USE LOCAL TIME.\n      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n      *                      W A R N I N G\n      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n      *     IF YOU CHANGE TO 'LOCAL', SYMBSUB WILL RESOLVE SYSTEM\n      *     DYNAMIC DATE/TIME SYMBOLS DIFFERENTLY THAN THE SYSTEM!\n      *     FOR EXAMPLE, IBM SYSTEM DYNAMIC SYMBOL &HHMMSS REFERS TO\n      *     UTC TIME.  IF YOU CHANGE THE DEFAULT TO LOCAL, SYMBSUB\n      *     WILL RESOLVE THIS USING LOCAL TIME.  YOU WOULD HAVE TO USE\n      *     &UHHMMSS TO GET UTC TIME.  REGARDLESS OF THE TIMEZONE\n      *     OPTION YOU SPECIFY, ALL DATE/TIME SYMBOLS THAT BEGIN WITH\n      *     &U WILL ALWAYS RESOLVE USING UTC TIME AND THOSE THAT BEGIN\n      *     WITH &L WILL RESOLVE USING LOCAL TIME.  ONLY DATE/TIME\n      *     SYMBOLS THAT DO NOT BEGIN WITH &U OR &L ARE AFFECTED BY THE\n      *     TIMEZONE OPTION.  YOU SHOULD BE AWARE THAT SYMBOLS\n      *     BEGINNING WITH &U ARE SYMBSUB BUILTIN SYMBOLS NOT STANDARD\n      *     SYSTEM DYNAMIC SYMBOLS.  WHILE THEY WILL WORK FINE WITHIN\n      *     SYMBSUB, THEY CANNOT BE USED IN OTHER IBM SOFTWARE WHERE\n      *     ACTUAL SYSTEM DYNAMIC SYMBOLS ARE PERMITTED.  FOR THIS\n      *     REASON, IF YOU USE UTC TIME IT IS NOT A GOOD IDEA TO CHANGE\n      *     YOUR DEFAULT TO LOCAL.\n      *\n      * LONG STORY MADE SHORT:\n      *     ALTHOUGH THIS OPTION IS AVAILABLE, I DON'T RECOMMEND IT.\n      *     BETTER TO GET IN THE HABIT OF USING SYMBOLS THAT BEGIN WITH\n      *     &L WHEN YOU WANT LOCAL DATE/TIME EVEN IF THAT IS THE ONLY\n      *     DATE/TIME YOU ARE EVER INTERESTED IN.\n      ******************************************************************\n081113     05 WS-DEFAULT-TIMEZONE      PIC X(8)         VALUE 'UTC'.\n081113     05 WS-CURRENT-TIMEZONE      PIC X(8)         VALUE 'UTC'.\n           05 WS-FILES-READ            PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-FILES-WRITTEN         PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-PARM-CARDS-READ       PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-CARDS-READ            PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-FILE-CARDS-READ       PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-CARDS-CHANGED         PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-CARDS-UNCHANGED       PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-CARDS-WRITTEN         PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-FILE-CARDS-WRITTEN    PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-JESJCL-CNT            PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-LINE-CNT              PIC S9(8) COMP-5 VALUE +99.\n           05 WS-DISPLAY-RC            PIC +9(8)        VALUE ZERO.\n           05 WS-DISPLAY-NDX           PIC 9(4)         VALUE ZERO.\n           05 WS-DISPLAY-CHAR.\n              10 WS-DISPLAY-CNT        PIC ---,---,--9.\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'PARSING-DATA    BEGINS HERE ===>'.\n      ******************************************************************\n       01  PARSING-DATA.\n           05 WS-BEG                   PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-END                   PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-LEN                   PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-BX                    PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-EX                    PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-LX                    PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-NAME-LEN              PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-VALUE-LEN             PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-LBND                  PIC S9(8) COMP-5 VALUE +1.\n           05 WS-RBND                  PIC S9(8) COMP-5 VALUE +72.\n           05 WS-PREV-LBND             PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-PREV-RBND             PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-DLEN                  PIC S9(8) COMP-5 VALUE +72.\n           05 WS-PAREN-DEPTH           PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-CNTL-LEN              PIC S9(4) COMP-5 VALUE +10.\n           05 WS-CNTL-STRING           PIC X(80) VALUE '$SYMBPARM'.\n           05 WS-BOUND                 PIC 9(8)  VALUE ZERO.\n           05 WS-PARM                  PIC X(60) VALUE SPACES.\n           05 WS-NAME                  PIC X(60) VALUE SPACES.\n           05 WS-VALUE                 PIC X(60) VALUE SPACES.\n081113     05 WS-VALUE-SOURCE          PIC X(16) VALUE SPACES.\n081113     05 WS-LVL-IND               PIC X(1)  VALUE '0'.\n081113        88 WS-LVL-NO-VALUE                 VALUE '0'.\n081113        88 WS-LVL-BUILTIN-SYMBOL           VALUE '1'.\n081113        88 WS-LVL-STATIC-SYMBOL            VALUE '2'.\n081113        88 WS-LVL-DYNAMIC-SYMBOL           VALUE '3'.\n081113        88 WS-LVL-BASE-JCL-VALUE           VALUE '4'.\n081113        88 WS-LVL-DFLT-PROC-VALUE          VALUE '5'.\n081113        88 WS-LVL-EXEC-PROC-VALUE          VALUE '6'.\n081113        88 WS-LVL-PARM-OVERRIDE            VALUE '9'.\n           05 WS-BOUND-ID              PIC X(5)  VALUE SPACES.\n           05 WS-BOUND-STR             PIC X(61) VALUE SPACES.\n           05 WS-BOUND-HOLD            PIC X(61) VALUE SPACES.\n\n       01  WS-SAVE-AREA.\n           05 WS-SAVE-END              PIC S9(8) COMP-5 VALUE ZERO.\n           05 WS-SAVE-PARMS-BUFF.\n              10 WS-SAVE-PARMS-LEN     PIC S9(4) COMP-5 VALUE ZERO.\n              10 WS-SAVE-PARMS         PIC X(1024)      VALUE SPACES.\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'JCL-PARSE-AREA  BEGINS HERE ===>'.\n      ******************************************************************\n       01  JCL-PARSE-AREA.\n           05 JSX                      PIC S9(8) COMP-5 VALUE ZERO.\n           05 JEX                      PIC S9(8) COMP-5 VALUE ZERO.\n           05 JLX                      PIC S9(8) COMP-5 VALUE ZERO.\n           05 JPLEN                    PIC S9(8) COMP-5 VALUE ZERO.\n           05 JDATAMAX                 PIC S9(8) COMP-5 VALUE +72.\n           05 JPHASE                   PIC S9(4) COMP-5 VALUE ZERO.\n           05 JID                      PIC X(2)         VALUE SPACES.\n           05 JNAME                    PIC X(17)        VALUE SPACES.\n           05 JOPER                    PIC X(8)         VALUE SPACES.\n           05 JPARAM                   PIC X(1024)      VALUE SPACES.\n           05 JSTEPNO                  PIC 9(4)         VALUE ZERO.\n           05 JPROCNM                  PIC X(8)         VALUE SPACES.\n080310     05 JPRV-OPER                PIC X(8)         VALUE SPACES.\n           05 JEND-NODE-SW             PIC X(1)         VALUE 'N'.\n              88 JEND-NODE                              VALUE 'Y'.\n           05 JPRV-CONTINUED-SW        PIC X(1)         VALUE SPACES.\n              88 JPRV-CONTINUED-JCL                     VALUE 'J'.\n              88 JPRV-CONTINUED-QUOTE                   VALUE 'Q'.\n              88 JPRV-CONTINUED-COMMENT                 VALUE 'C'.\n           05 JCUR-CONTINUED-SW        PIC X(1)         VALUE SPACES.\n              88 JCUR-CONTINUED-JCL                     VALUE 'J'.\n              88 JCUR-CONTINUED-QUOTE                   VALUE 'Q'.\n              88 JCUR-CONTINUED-COMMENT                 VALUE 'C'.\n090505     05 JEXEC-TYPE-SW            PIC X(1)         VALUE SPACES.\n090505        88 JEXEC-TYPE-PGM                         VALUE '1'.\n090505        88 JEXEC-TYPE-PROC                        VALUE '2'.\n           05 JIN-QUOTES-SW            PIC X(1)         VALUE 'N'.\n              88 JIN-QUOTES                             VALUE 'Y'.\n           05 JINSTREAM-PROC-SW        PIC X(1)         VALUE 'N'.\n              88 JINSTREAM-PROC                         VALUE 'Y'.\n      ******************************************************************\n       01  FILLER                      PIC X(32)  VALUE\n           'MISCELLANEOUS   BEGINS HERE ===>'.\n      ******************************************************************\n       01  MISCELLANEOUS.\n           05 WS-STEPNO-CHAR.\n              10 WS-STEPNO             PIC 9(4)  COMP-5.\n           05 WS-STEPNUM               PIC 9(4)         VALUE ZERO.\n           05 WS-PROCSTEP              PIC X(8)         VALUE SPACES.\n           05 WS-STEPNAME              PIC X(8)         VALUE SPACES.\n           05 WS-PGMNAME               PIC X(8)         VALUE SPACES.\n           05 WS-SYSUID                PIC X(8)         VALUE SPACES.\n           05 WS-JOBNAME               PIC X(8)         VALUE SPACES.\n090505     05 WS-JOBID                 PIC X(8)         VALUE SPACES.\n\n091020     05 WS-HH                    PIC 9(2)         VALUE ZERO.\n           05 WS-QUOTE                 PIC X(1)         VALUE SPACES.\n           05 WS-PREV-CARD-TYPE        PIC X(1)         VALUE SPACES.\n               88 WS-PREV-CARD-TYPE-NONE                VALUE SPACES.\n               88 WS-PREV-CARD-TYPE-PARM                VALUE 'P'.\n               88 WS-PREV-CARD-TYPE-DATA                VALUE 'D'.\n\n100313     05 IN-STATUS                PIC X(2)         VALUE '00'.\n100313     05 OUT-STATUS               PIC X(2)         VALUE '00'.\n120824     05 WS-PARMIN-EOF-SW         PIC X(1)         VALUE 'N'.\n120824        88 WS-PARMIN-EOF                          VALUE 'Y'.\n\n           05 WS-CNTLIN-EOF-SW         PIC X(1)         VALUE 'N'.\n              88 WS-CNTLIN-EOF                          VALUE 'Y'.\n\n           05 WS-JESJCL-EOF-SW         PIC X(1)         VALUE 'N'.\n              88 WS-JESJCL-EOF                          VALUE 'Y'.\n\n           05 WS-WITHIN-PROC-SW        PIC X(1)         VALUE 'N'.\n              88 WS-WITHIN-PROC                         VALUE 'Y'.\n\n           05 WS-NESTED-PROC-SW        PIC X(1)         VALUE 'N'.\n              88 WS-NESTED-PROC                         VALUE 'Y'.\n\n           05 WS-OUTPUT-OPEN-SW        PIC X(1)         VALUE 'N'.\n              88 WS-OUTPUT-OPEN                         VALUE 'C'.\n\n           05 WS-PGM-PHASE-SW          PIC X(1)         VALUE SPACES.\n              88 WS-PGM-PHASE-INITPARM                  VALUE 'I'.\n              88 WS-PGM-PHASE-SYMBPARM                  VALUE 'S'.\n              88 WS-PGM-PHASE-JCLSCAN                   VALUE 'J'.\n              88 WS-PGM-PHASE-CNTLIN                    VALUE 'C'.\n\n           05 WS-BOUND-OK-SW           PIC X(1)         VALUE 'N'.\n              88 WS-BOUND-OK                            VALUE 'Y'.\n\n           05 WS-WITHIN-QUOTES-SW      PIC X(1)         VALUE 'N'.\n              88 WS-WITHIN-QUOTES                       VALUE 'Y'.\n\n           05 WS-NAM-FROM-SYMBOL-SW    PIC X(1)         VALUE 'N'.\n              88 WS-NAM-FROM-SYMBOL                     VALUE 'Y'.\n\n           05 WS-VAL-FROM-SYMBOL-SW    PIC X(1)         VALUE 'N'.\n              88 WS-VAL-FROM-SYMBOL                     VALUE 'Y'.\n\n           05 WS-INHERIT-NP-CHG-SW     PIC X(1)         VALUE 'N'.\n              88 WS-INHERIT-NP-CHG                      VALUE 'Y'.\n\n           05 WS-SEARCH-FLAG           PIC X(1)         VALUE SPACES.\n              88 WS-SEARCH-END                          VALUE 'E'.\n              88 WS-SEARCH-MATCH                        VALUE 'M'.\n\n           05 WS-DEBUG-SWITCHES.\n              10 WS-DEBUG-TRACE-SW     PIC X(1)         VALUE ' '.\n                 88 WS-DEBUG-TRACE                      VALUE 'T'.\n              10 WS-DEBUG-INPUT-SW     PIC X(1)         VALUE ' '.\n                 88 WS-DEBUG-INPUT                      VALUE 'I'.\n              10 WS-DEBUG-OUTPUT-SW    PIC X(1)         VALUE ' '.\n                 88 WS-DEBUG-OUTPUT                     VALUE 'O'.\n              10 WS-DEBUG-DDNAME-SW    PIC X(1)         VALUE ' '.\n                 88 WS-DEBUG-DDNAME                     VALUE 'D'.\n              10 WS-DEBUG-JESJCL-SW    PIC X(1)         VALUE ' '.\n                 88 WS-DEBUG-JESJCL                     VALUE 'J'.\n              10 WS-DEBUG-SEARCH-SW    PIC X(1)         VALUE ' '.\n                 88 WS-DEBUG-SEARCH                     VALUE 'S'.\n              10 WS-DEBUG-PARSING-SW   PIC X(1)         VALUE ' '.\n                 88 WS-DEBUG-PARSING                    VALUE 'P'.\n\n           05 WS-LASTCC                PIC 9(2)         VALUE ZERO.\n           05 WS-MAXCC                 PIC 9(2)         VALUE ZERO.\n           05 WS-PARAGRAPH-NAME        PIC X(32)        VALUE SPACES.\n100313\n100313* MVS DATA AREAS MISC\n100313 01  MVS-MISC.\n100313     05 JFCB-HI-HEX              PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 JFCB-LO-HEX              PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 TIOE-LEN-CHAR.\n100313        10 TIOE-LEN              PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 TIOE-POINT.\n100313        10 TIOE-PTR              POINTER.\n100313        10 TIOE-PNUM             REDEFINES TIOE-PTR\n100313                                 PIC 9(8) COMP-5.\n100313     05 QMAT-POINT.\n100313        10 QMAT-PTR              POINTER.\n100313        10 QMAT-PNUM             REDEFINES QMAT-PTR\n100313                                 PIC 9(8) COMP-5.\n100313     05 JFCB-POINT.\n100313        10 JFCB-PTR              POINTER.\n100313        10 JFCB-PNUM             REDEFINES JFCB-PTR\n100313                                 PIC 9(8) COMP-5.\n100313        10 FILLER                REDEFINES JFCB-PNUM.\n100313           15 FILLER             PIC X.\n100313           15 JFCB-PTR-LO3       PIC X(3).\n100313\n100313* LIBRARY LIST WORK AREA\n100313 01  LIBR-WORK-AREA.\n100313     05 LIBRX                        PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 LIBR-MAX                     PIC S9(4) COMP-5 VALUE +100.\n100313     05 LIBR-CNT                     PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 LIBR-SRCH-DDNAME             PIC X(8)  VALUE SPACES.\n100313     05 LIBR-DDNAME                  PIC X(8)  VALUE SPACES.\n100313     05 LIBR-DSN                     PIC X(44)\n100313                                     OCCURS 100.\n100313     05 LIBR-EOF-SW                  PIC X     VALUE 'N'.\n100313        88 LIBR-MORE                 VALUE 'N'.\n100313        88 LIBR-EOF                  VALUE 'Y'.\n100313\n100313* MEMLIST WORK AREA\n100313 01  MEMLIST-WORK-AREA.\n100313     05 MEMBEG                       PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 MEMEND                       PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 MEMLEN                       PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 MEMLIST-EOF-SW               PIC X     VALUE 'N'.\n100313        88 MEMLIST-MORE              VALUE 'N'.\n100313        88 MEMLIST-EOF               VALUE 'Y'.\n100313\n100313* DIRECTORY WORK AREA\n100313 01  DIR-WORK-AREA.\n100313     05 DIR-ADR                      PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 DIR-PTR            REDEFINES DIR-ADR\n100313                                     POINTER.\n100313     05 DIR-ENTLEN                   PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 DIR-POS                      PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 DIR-TRASH                    PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 DIR-HWORDS                   PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 DIR-2BYTES.\n100313        10 DIR-SMALLINT              PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 DIR-STATUS                   PIC X(2)  VALUE '00'.\n100313     05 DIR-EOF-SW                   PIC X     VALUE 'N'.\n100313        88 DIR-MORE                  VALUE 'N'.\n100313        88 DIR-EOF                   VALUE 'Y'.\n100313 01  DIR-REC.\n100313     05 DIR-REC-LEN                  PIC S9(4) COMP-5 VALUE ZERO.\n100313     05 DIR-DATA                     PIC X(254) VALUE SPACES.\n100313\n100313* MEMBER WORK AREA\n100313 01  MEM-WORK-AREA.\n110222     05 MEM-MAX                      PIC S9(8) COMP-5 VALUE +500.\n110222     05 MEM-CNT                      PIC S9(8) COMP-5 VALUE ZERO.\n110222     05 MEMX                         PIC S9(8) COMP-5 VALUE ZERO.\n110222     05 MEM-MASK                     PIC X(17) VALUE SPACES.\n110222     05 MEM-NAME-ARRAY.\n110222        10 MEM-NAME-ENTRY            OCCURS 500 TIMES.\n110222           15 MEM-LIBR               PIC X(44).\n110222           15 MEM-NAME               PIC X(8).\n100313     05 MEM-DSN-OUT                  PIC X(44) VALUE SPACES.\n110222\n110222* MASK WORK AREA\n110222 01  MSK-WORK-AREA.\n110222     05 MSK-MAX                      PIC S9(8) COMP-5 VALUE +100.\n110222     05 MSK-PART-MAX                 PIC S9(8) COMP-5 VALUE 9.\n110222     05 MSK-CNT                      PIC S9(8) COMP-5 VALUE ZERO.\n110222     05 MSK-MIN-LEN                  PIC S9(8) COMP-5 VALUE ZERO.\n110222     05 MSKX                         PIC S9(8) COMP-5 VALUE ZERO.\n110222     05 MPX                          PIC S9(8) COMP-5 VALUE ZERO.\n110222     05 MSK-ARRAY.\n110222        10 MSK-ENTRY                 OCCURS 100 TIMES.\n110222           15 MSK-MEM-CNT            PIC S9(8) COMP-5.\n110222           15 MSK-PART-CNT           PIC S9(8) COMP-5.\n110222           15 MSK-MASK               PIC X(17).\n110222           15 FILLER                 PIC X(3).\n110222           15 MSK-PART-ENTRY         OCCURS 9 TIMES.\n110222              20 MSK-PART-LEN        PIC S9(8) COMP-5 VALUE ZERO.\n110222              20 MSK-PART-TXT        PIC X(8)  VALUE SPACES.\n110222\n110222 01  MASK-PART-AREA.\n110222     05 MPL                          PIC S9(8) COMP-5 VALUE ZERO.\n110222     05 MP-TXT                       PIC X(8)  VALUE SPACES.\n110222     05 MP-MATCH-SW                  PIC X(1)  VALUE 'N'.\n110222        88 MP-NOMATCH                          VALUE 'N'.\n110222        88 MP-MATCH                            VALUE 'Y'.\n110222     05 MP-PART-MATCH-SW             PIC X(1)  VALUE 'N'.\n110222        88 MP-PART-NOMATCH                     VALUE 'N'.\n110222        88 MP-PART-MATCH                       VALUE 'Y'.\n081113\n081113*****************************************************************\n081113*    SUPPORT FIELDS FOR CALLS TO LE UTC DATE-TIME ROUTINES\n081113*****************************************************************\n081113\n081113 01  CEE-WORK-SECS               COMP-2           VALUE ZERO.\n081113 01  CEE-UTC-SECS                COMP-2           VALUE ZERO.\n081113 01  CEE-LOCAL-SECS              COMP-2           VALUE ZERO.\n081113 01  CEE-LILIAN                  PIC S9(9) COMP-5 VALUE ZERO.\n081113 01  CEE-OFF-HRS                 PIC S9(9) COMP-5 VALUE ZERO.\n081113 01  CEE-OFF-MINS                PIC S9(9) COMP-5 VALUE ZERO.\n081113 01  CEE-OFF-SECS                COMP-2           VALUE ZERO.\n081113 01  CEE-PICSTR.\n081113     05 CEE-PICSTR-LEN           PIC S9(4) COMP-5 VALUE ZERO.\n081113     05 CEE-PICSTR-TEXT.\n081113        10 CEE-PICSTR-CHAR       PIC X(1) OCCURS 0 TO 256\n081113                                 DEPENDING ON CEE-PICSTR-LEN.\n081113 01  CEE-WORK-DATM-BUFF          PIC X(80)        VALUE SPACES.\n081113 01  CEE-FC.\n081113     05 CEE-CONDITION-TOKEN-VALUE.\n081113        10 CEE-CONDITION-ID.\n081113           15 CEE-SEVERITY       PIC S9(4) COMP-5 VALUE ZERO.\n081113           15 CEE-MSG-NO         PIC S9(4) COMP-5 VALUE ZERO.\n081113        10 CEE-CASE-SEV-CTL      PIC X     VALUE  LOW-VALUES.\n081113        10 CEE-FACILITY-ID       PIC XXX   VALUE  LOW-VALUES.\n081113     05 CEE-I-S-INFO             PIC S9(9) COMP-5 VALUE ZERO.\n081113\n081113*****************************************************************\n081113*    WORK DATE AND TIME FIELDS\n081113*****************************************************************\n081113\n081113 01  WS-WORK-DATE-TIME.\n091020     05 WS-WSQL-TIMESTMP.\n091020        10 WS-WSQL-ISODATE.\n091020           15 WS-WSQL-ISODATE-YYYY   PIC 9(4).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-WSQL-ISODATE-MM     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-WSQL-ISODATE-DD     PIC 9(2).\n091020        10 FILLER                    PIC X(1).\n091020        10 WS-WSQL-ISOTIME.\n091020           15 WS-WSQL-ISOTIME-HH     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-WSQL-ISOTIME-MM     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-WSQL-ISOTIME-SS     PIC 9(2).\n091020        10 FILLER                    PIC X(1).\n091020        10 WS-WSQL-TIMESTMP-TTT      PIC 9(3).\n091020        10 WS-WSQL-TIMESTMP-ZZZ      PIC 9(3).\n091020     05 WS-WSQL-USADATE              PIC X(10).\n091020     05 WS-WSQL-EURDATE              PIC X(10).\n091020     05 WS-WSQL-JISDATE              PIC X(10).\n091020     05 WS-WSQL-USATIME              PIC X(8).\n091020     05 WS-WSQL-EURTIME              PIC X(8).\n091020     05 WS-WSQL-JISTIME              PIC X(8).\n091020     05 WS-WGREG-YYYYMMDD            PIC 9(8).\n091020     05 WS-WTIME-HHMMSS999           PIC 9(9).\n081113     05 WS-WDOW-NUM                  PIC 9(1).\n081113     05 WS-WJUL-YYYYJJJ              PIC 9(7).\n081113\n081113*****************************************************************\n081113*    UTC DATE AND TIME FIELDS\n081113*****************************************************************\n081113 01  WS-UTC-DATE-TIME.\n091020     05 WS-USQL-TIMESTMP.\n091020        10 WS-USQL-ISODATE.\n091020           15 WS-USQL-ISODATE-YYYY   PIC 9(4).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-USQL-ISODATE-MM     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-USQL-ISODATE-DD     PIC 9(2).\n091020        10 FILLER                    PIC X(1).\n091020        10 WS-USQL-ISOTIME.\n091020           15 WS-USQL-ISOTIME-HH     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-USQL-ISOTIME-MM     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-USQL-ISOTIME-SS     PIC 9(2).\n091020        10 FILLER                    PIC X(1).\n091020        10 WS-USQL-TIMESTMP-TTT      PIC 9(3).\n091020        10 WS-USQL-TIMESTMP-ZZZ      PIC 9(3).\n091020     05 WS-USQL-USADATE              PIC X(10).\n091020     05 WS-USQL-EURDATE              PIC X(10).\n091020     05 WS-USQL-JISDATE              PIC X(10).\n091020     05 WS-USQL-USATIME              PIC X(8).\n091020     05 WS-USQL-EURTIME              PIC X(8).\n091020     05 WS-USQL-JISTIME              PIC X(8).\n091020     05 WS-UGREG-YYYYMMDD            PIC 9(8).\n091020     05 WS-UTIME-HHMMSS999           PIC 9(9).\n081113     05 WS-UDOW-NUM                  PIC 9(1).\n081113     05 WS-UJUL-YYYYJJJ              PIC 9(7).\n081113\n081113*****************************************************************\n081113*    LOCAL DATE AND TIME FIELDS\n081113*****************************************************************\n081113 01  WS-LOCAL-DATE-TIME.\n091020     05 WS-LSQL-TIMESTMP.\n091020        10 WS-LSQL-ISODATE.\n091020           15 WS-LSQL-ISODATE-YYYY   PIC 9(4).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-LSQL-ISODATE-MM     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-LSQL-ISODATE-DD     PIC 9(2).\n091020        10 FILLER                    PIC X(1).\n091020        10 WS-LSQL-ISOTIME.\n091020           15 WS-LSQL-ISOTIME-HH     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-LSQL-ISOTIME-MM     PIC 9(2).\n091020           15 FILLER                 PIC X(1).\n091020           15 WS-LSQL-ISOTIME-SS     PIC 9(2).\n091020        10 FILLER                    PIC X(1).\n091020        10 WS-LSQL-TSTMP-TTT         PIC 9(3).\n091020        10 WS-LSQL-TSTMP-ZZZ         PIC 9(3).\n091020     05 WS-LSQL-USADATE              PIC X(10).\n091020     05 WS-LSQL-EURDATE              PIC X(10).\n091020     05 WS-LSQL-JISDATE              PIC X(10).\n091020     05 WS-LSQL-USATIME              PIC X(8).\n091020     05 WS-LSQL-EURTIME              PIC X(8).\n091020     05 WS-LSQL-JISTIME              PIC X(8).\n091020     05 WS-LGREG-YYYYMMDD            PIC 9(8).\n091020     05 WS-LTIME-HHMMSS999           PIC 9(9).\n081113     05 WS-LDOW-NUM                  PIC 9(1).\n081113     05 WS-LJUL-YYYYJJJ              PIC 9(7).\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'IKJEFT PARMS    BEGINS HERE ===>'.\n      ******************************************************************\n       01  WS-IKJEFT-PARMS.\n           05 WS-IKJEFT-FUTURE-USE     PIC S9(8) COMP.\n           05 WS-IKJEFT-RC             PIC S9(8) COMP.\n           05 WS-IKJEFT-REASON-CD      PIC S9(8) COMP.\n           05 WS-IKJEFT-ABEND-CD       PIC S9(8) COMP.\n           05 WS-IKJEFT-INFO-CD        PIC S9(8) COMP.\n           05 WS-IKJEFT-CPPL-ADDR      PIC S9(8) COMP.\n           05 WS-IKJEFT-FLAGS          PIC X(4) VALUE X'00010001'.\n           05 WS-IKJEFT-BUFFER         PIC X(256).\n           05 WS-IKJEFT-LENGTH         PIC S9(8) COMP-5 VALUE ZERO.\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'ISFIN DATA AREA BEGINS HERE ===>'.\n      ******************************************************************\n       01  WS-ISFIN-DATA-AREA.\n080212     05 WS-ISFX-MAX              PIC S9(8) COMP-5 VALUE +16.\n           05 WS-ISFIN-TABLE.\n090505        10 WS-ISFIN-1.\n090505           15 FILLER             PIC X(16)\n090505                                 VALUE 'FILTER JOBID EQ '.\n090505           15 WS-ISFIN-JOBID     PIC X(8)  VALUE SPACES.\n090505           15 FILLER             PIC X(56) VALUE SPACES.\n080212        10 WS-ISFIN-2            PIC X(80) VALUE 'PREFIX *'.\n080212        10 WS-ISFIN-3        PIC X(80) VALUE 'OWNER *'.\n080212        10 WS-ISFIN-4        PIC X(80) VALUE 'DEST'.\n              10 WS-ISFIN-5.\n                 15 FILLER         PIC X(5)  VALUE 'FIND '.\n                 15 WS-ISFIN-JOBNM PIC X(8)  VALUE SPACES.\n                 15 FILLER         PIC X(67) VALUE SPACES.\n              10 WS-ISFIN-6        PIC X(80) VALUE '++?'.\n              10 WS-ISFIN-7        PIC X(80) VALUE 'RESET'.\n              10 WS-ISFIN-8        PIC X(80) VALUE 'FIND JESJCL'.\n              10 WS-ISFIN-9        PIC X(80) VALUE '++S'.\n              10 WS-ISFIN-10       PIC X(80) VALUE 'PRINT FILE OUTJCL'.\n              10 WS-ISFIN-11       PIC X(80) VALUE 'PRINT'.\n              10 WS-ISFIN-12       PIC X(80) VALUE 'PRINT CLOSE'.\n              10 WS-ISFIN-13       PIC X(80) VALUE 'END'.\n              10 WS-ISFIN-14       PIC X(80) VALUE 'END'.\n              10 WS-ISFIN-15       PIC X(80) VALUE 'END'.\n              10 WS-ISFIN-16       PIC X(80) VALUE 'END'.\n           05 WS-ISFIN-ARRAY REDEFINES WS-ISFIN-TABLE.\n080212        10 WS-ISFIN          PIC X(80) OCCURS 16 TIMES\n                                             INDEXED BY ISFX.\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'WS-CARDIN       BEGINS HERE ===>'.\n       01  WS-CARDIN                   PIC X(80).\n\n       01  FILLER                      PIC X(32) VALUE\n           'WS-CARDOUT      BEGINS HERE ===>'.\n       01  WS-CARDOUT                  PIC X(80).\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'DDNAME AREA     BEGINS HERE ===>'.\n      ******************************************************************\n       01  DDNAME-AREA.\n           05 DDNAME-MAX               PIC S9(8) COMP-5 VALUE +256.\n           05 DDNAME-CNT               PIC S9(8) COMP-5 VALUE ZERO.\n100313     05 DDNAME-CNTLIN            PIC X(8).\n100313     05 DDNAME-CNTLOUT           PIC X(8).\n           05 DDNAME-SRCH-ROOT         PIC X(8).\n           05 DDNAME-SRCH-TYPE         PIC X(1).\n           05 DDNAME-ENTRY             OCCURS 0 TO 256 TIMES\n                                       DEPENDING ON DDNAME-CNT\n                                       INDEXED BY DDX.\n              10 DDNAME-ROOT           PIC X(8).\n              10 DDNAME-IN             PIC X(8).\n              10 DDNAME-OUT            PIC X(8).\n100313        10 DDNAME-MEMS           PIC X(8).\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'SYMBOL ARRAY    BEGINS HERE ===>'.\n      ******************************************************************\n       01  SA-ARRAY-AREA.\n           05 SA-MAX                   PIC S9(8) COMP-5 VALUE 500.\n           05 SA-CNT                   PIC S9(8) COMP-5 VALUE ZERO.\n           05 SA-ANY-VAL-NP-USE-SW     PIC X(1)         VALUE 'N'.\n      *       88 NO-NP-CHANGED-VALUES-USED              VALUE 'N'.\n      *       88 NP-CHANGED-VALUES-USED                 VALUE 'Y'.\n           05 FILLER                   PIC X(3)         VALUE SPACES.\n           05 SA-ENTRY                 OCCURS 0 TO 500 TIMES\n                                       DEPENDING ON SA-CNT\n                                       INDEXED BY SAX.\n              10 SA-NAME-LEN           PIC S9(8) COMP-5.\n              10 SA-VALUE-LEN          PIC S9(8) COMP-5.\n              10 SA-NAME               PIC X(60).\n              10 SA-VALUE              PIC X(60).\n081113        10 SA-LVL-IND            PIC X(1).\n081113           88 SA-LVL-NO-VALUE              VALUE '0'.\n081113           88 SA-LVL-BUILTIN-SYMBOL        VALUE '1'.\n081113           88 SA-LVL-STATIC-SYMBOL         VALUE '2'.\n081113           88 SA-LVL-DYNAMIC-SYMBOL        VALUE '3'.\n081113           88 SA-LVL-BASE-JCL-VALUE        VALUE '4'.\n081113           88 SA-LVL-DFLT-PROC-VALUE       VALUE '5'.\n081113           88 SA-LVL-EXEC-PROC-VALUE       VALUE '6'.\n081113           88 SA-LVL-PARM-OVERRIDE         VALUE '9'.\n              10 SA-VAL-NP-CHG-SW      PIC X(1).\n      *          88 VALUE-NOT-CHANGED-IN-NESTED-PROC    VALUE 'N'.\n      *          88 VALUE-CHANGED-IN-NESTED-PROC        VALUE 'Y'.\n              10 SA-VAL-NP-USE-SW      PIC X(1).\n      *          88 NP-CHANGED-VALUE-NOT-USED           VALUE 'N'.\n      *          88 NP-CHANGED-VALUE-USED               VALUE 'Y'.\n              10 FILLER                PIC X(1).\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'SYMBOL SAVE     BEGINS HERE ===>'.\n      ******************************************************************\n       01  SS-SAVE-AREA.\n           05 SS-MAX                   PIC S9(8) COMP-5 VALUE 500.\n           05 SS-CNT                   PIC S9(8) COMP-5 VALUE ZERO.\n           05 SS-ANY-VAL-NP-USE-SW     PIC X(1)         VALUE SPACES.\n           05 FILLER                   PIC X(3)         VALUE SPACES.\n           05 SS-ENTRY                 OCCURS 0 TO 500 TIMES\n                                       DEPENDING ON SS-CNT\n                                       INDEXED BY SSX.\n              10 SS-NAME-LEN           PIC S9(8) COMP-5.\n              10 SS-VALUE-LEN          PIC S9(8) COMP-5.\n              10 SS-NAME               PIC X(60).\n              10 SS-VALUE              PIC X(60).\n              10 SS-VALUE-LVL          PIC X(1).\n              10 SS-VAL-NP-CHG-SW      PIC X(1).\n              10 SS-VAL-NP-USE-SW      PIC X(1).\n              10 FILLER                PIC X(1).\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'SYMBOL WORKAREA BEGINS HERE ===>'.\n      ******************************************************************\n       01  SA-WORK-AREA.\n081113     05 SA-PTR                   POINTER          VALUE NULL.\n081113     05 SA-PTR-NUM               REDEFINES SA-PTR\n081113                                 PIC 9(8)  COMP-5.\n081113     05 SA-BASE                  PIC 9(8)  COMP-5 VALUE ZERO.\n           05 SA-START                 PIC S9(8) COMP-5 VALUE ZERO.\n           05 SA-END                   PIC S9(8) COMP-5 VALUE ZERO.\n           05 SA-LEN                   PIC S9(8) COMP-5 VALUE ZERO.\n           05 SA-STRING-LEN            PIC S9(8) COMP-5 VALUE ZERO.\n           05 SA-SYM-CHGD-SW           PIC X(1)         VALUE 'N'.\n           05 SA-PARM                  PIC X(60)        VALUE SPACES.\n           05 SA-STRING                PIC X(1024)      VALUE SPACES.\n           05 SA-SUFFIX                PIC X(1024)      VALUE SPACES.\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           'WS-INPUT-PARMS  BEGINS HERE ===>'.\n      ******************************************************************\n       01  WS-INPUT-PARMS-BUFF.\n           05 WS-INPUT-PARMS-LEN       PIC S9(4) COMP-5.\n           05 WS-INPUT-PARMS           PIC X(1024).\n\n      ******************************************************************\n       01  FILLER                      PIC X(32) VALUE\n           '<=== WORKING-STORAGE ENDS HERE<<'.\n      ******************************************************************\n       LINKAGE SECTION.\n      ******************************************************************\n       01  LS-INPUT-PARMS-BUFF.\n           05 LS-INPUT-PARMS-LEN       PIC S9(4) COMP-5.\n           05 LS-INPUT-PARMS           PIC X(1024).\n100313\n100313 01  DIR-ENTRY.\n100313     05 DIR-MEM-NAME             PIC X(8).\n100313     05 FILLER                   PIC X(3).\n100313     05 DIR-BITLEN               PIC X.\n\n      * PROGRAM STATUS AREA.\n       01  PSA.\n081113     05 FILLER                   PIC X(16).\n081113     05 PSA-FLCCVT               POINTER.\n081113     05 FILLER                   PIC X(520).\n           05 PSA-PSATOLD              POINTER.\n           05 FILLER                   PIC X(4).\n           05 PSA-PSAAOLD              POINTER.\n\n090505* ADDRESS SPACE CONTROL BLOCK\n090505 01  ASCB.\n090505     05 FILLER                   PIC X(336).\n090505     05 ASCB-ASCBASSB            POINTER.\n\n090505* ADDRESS SPACE SECONDARY BLOCK\n090505 01  ASSB.\n090505     05 FILLER                   PIC X(168).\n090505     05 ASSB-ASSBJSAB            POINTER.\n\n      * TASK CONTROL BLOCK\n       01  TCB.\n           05 FILLER                   PIC X(12).\n           05 TCB-TCBTIO               POINTER.\n           05 FILLER                   PIC X(164).\n           05 TCB-TCBJSCB              POINTER.\n\n      * TASK I/O TABLE\n       01  TIOT.\n           05 TIOT-TIOCNJOB            PIC X(08).\n090505     05 TIOT-TIOCSTEP.\n090505        10 TIOT-TIOCSTPN         PIC X(8).\n090505        10 TIOT-TIOCJSTN         PIC X(8).\n       01  TIOENTRY.\n           05 TIOT-TIOELNGH            PIC X.\n           05 FILLER                   PIC X(3).\n           05 TIOT-TIOEDDNM            PIC X(8).\n100313     05 TIOT-TIOEJFCB            PIC X(3).\n\n090505* JOB SCHEDULER ADDRESS SPACE CONTROL BLOCK\n090505 01  JSAB.\n090505     05 FILLER                   PIC X(20).\n090505     05 JSAB-JSABJBID            PIC X(8).\n090505     05 JSAB-JSABJBNM            PIC X(8).\n090505     05 FILLER                   PIC X(8).\n090505     05 JSAB-JSABUSID            PIC X(8).\n\n      * JOB/STEP CONTROL BLOCK\n       01  JSCB.\n           05 FILLER                   PIC X(228).\n           05 JSCB-JSCBSTEP            PIC X(1).\n100313     05 FILLER                   PIC X(15).\n100313     05 JSCB-JSCBQMPI            POINTER.\n100313     05 FILLER                   PIC X(112).\n           05 JSCB-JSCBPGMN            PIC X(8).\n\n100313* JOB FILE CONTROL BLOCK (FORMAT 1 DSCB)\n100313 01  JFCB.\n100313     05 JFCBDSNM                 PIC X(44).\n\n081113* COMMUNICATIONS VECTOR TABLE.\n081113 01  CVT.\n081113     05 FILLER                   PIC X(56).\n081113     05 CVT-CVTDATE              PIC S9(7) COMP-3.\n081113     05 FILLER                   PIC X(80).\n081113     05 CVT-CVTECVT              POINTER.\n081113     05 FILLER                   PIC X(1136).\n\n081113* EXTENDED COMMUNICATIONS VECTOR TABLE.\n081113 01  ECVT.\n081113     05 FILLER                   PIC X(296).\n081113     05 ECVT-ECVTSYMT            POINTER.\n081113     05 FILLER                   PIC X(356).\n\n081113* SYSTEM SYMBOL TABLE\n081113 01  SYMBT.\n081113     05 FILLER                   PIC X(2).\n081113     05 SYMBT-SYMBTE-CNT         PIC 9(4)  COMP-5.\n081113     05 SYMBTE                   OCCURS 0 TO 65535\n081113                                 DEPENDING ON SYMBT-SYMBTE-CNT\n081113                                 INDEXED BY SYMBTE-X.\n081113        10 SYMBTE-SYMB-OFF       PIC 9(8)  COMP-5.\n081113        10 SYMBTE-SYMB-LEN       PIC 9(8)  COMP-5.\n081113        10 SYMBTE-TEXT-OFF       PIC 9(8)  COMP-5.\n081113        10 SYMBTE-TEXT-LEN       PIC 9(8)  COMP-5.\n100313\n100313 01  QMPI.\n100313     05 FILLER                   PIC X(24).\n100313     05 QMPI-QMPIQMAT            POINTER.\n100313\n100313 01  QMAT.\n100313     05 FILLER                   PIC X(12).\n100313     05 QMAT-QMATNEXT            POINTER.\n100313\n100313 01  JNXT-POINT.\n100313     05 JNXT-PTR                 POINTER.\n100313     05 JNXT-PNUM                REDEFINES JNXT-PTR\n100313                                 PIC 9(8) COMP-5.\n081113* SYSTEM SYMBOL TABLE DATA\n081113 01  SYMBTE-DAT                  PIC X(62).\n      ******************************************************************\n       PROCEDURE DIVISION USING LS-INPUT-PARMS-BUFF.\n      ******************************************************************\n       0000-MAINLINE.\n      ******************************************************************\n      *    THIS CONTROLS THE MAIN LOGIC OF THE PROGRAM. IT PERFORMS\n      *    THE HOUSEKEEPING, MAIN PROCESSING LOOP AND THE END-OF-JOB.\n      ******************************************************************\n\n           MOVE WHEN-COMPILED              TO WS-COMPILE-DATE-TIME\n           MOVE 'S000-MAINLINE'            TO WS-PARAGRAPH-NAME\n           DISPLAY '****************************************'\n                   '****************************************'\n091020     DISPLAY '**** BEGIN ' PGM-NAME ' V' PGM-VERS\n           DISPLAY '**** COMPILED ' WS-COMPILE-DATE ' ' WS-COMPILE-TIME\n           DISPLAY '****************************************'\n                   '****************************************'\n\n           PERFORM 1000-HOUSEKEEPING                     THRU 1000-EXIT\n\n           MOVE 'C'                        TO WS-PGM-PHASE-SW\n           IF WS-DEBUG-SWITCHES NOT = SPACES\n             DISPLAY '*************************************************'\n             DISPLAY 'BEGIN CNTLIN PHASE'\n             DISPLAY '*************************************************'\n           END-IF\n\n      *    PROCESS THE LIST OF CNTL DDCARDS THAT ARE ALLOCATED\n           PERFORM VARYING DDX FROM 1 BY 1\n           UNTIL DDX > DDNAME-CNT\n             EVALUATE TRUE\n100313         WHEN DDNAME-OUT (DDX)     = SPACES\n100313         AND  DDNAME-IN  (DDX) NOT = SPACES\n                 DISPLAY '**** ERROR - INPUT DDNAME SKIPPED.'\n                 DISPLAY '**** DATA FROM INPUT DDNAME '\n                         DDNAME-IN(DDX)\n                         ' CANNOT BE PROCESSED BECAUSE NO MATCHING'\n                         ' OUTPUT DDNAME WAS FOUND.'\n                 MOVE 12                       TO WS-LASTCC\n                 PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT\n\n100313         WHEN DDNAME-IN  (DDX)     = SPACES\n100313         AND  DDNAME-OUT (DDX) NOT = SPACES\n                 DISPLAY '**** WARNING - UNUSED OUTPUT DDNAME FOUND.'\n                 DISPLAY '**** OUTPUT DDNAME '\n                         DDNAME-OUT(DDX)\n                         ' WAS NOT MATCHED TO ANY INPUT DDNAME.'\n                 MOVE 4                        TO WS-LASTCC\n                 PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT\n100313\n100313         WHEN DDNAME-IN  (DDX)     = SPACES\n100313         AND  DDNAME-MEMS(DDX) NOT = SPACES\n100313           DISPLAY '**** WARNING - UNUSED MEMLIST DDNAME FOUND.'\n100313           DISPLAY '**** MEMLIST DDNAME '\n100313                   DDNAME-OUT(DDX)\n100313                   ' WAS NOT MATCHED TO ANY INPUT DDNAME.'\n100313           MOVE 4                        TO WS-LASTCC\n100313           PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT\n100313\n100313         WHEN DDNAME-ROOT(DDX)(1:4) = 'LIBR'\n100313           PERFORM 3000-PROCESS-LIBR-FILE          THRU 3000-EXIT\n\n               WHEN OTHER\n100313           MOVE DDNAME-IN (DDX)      TO DDNAME-CNTLIN\n100313           MOVE DDNAME-OUT(DDX)      TO DDNAME-CNTLOUT\n                 PERFORM 4000-PROCESS-CNTL-FILE          THRU 4000-EXIT\n             END-EVALUATE\n           END-PERFORM\n\n      * WRAP IT UP\n           PERFORM 9000-END-OF-JOB                       THRU 9000-EXIT\n           .\n       0000-MAINLINE-EXIT.\n           MOVE WS-MAXCC                   TO RETURN-CODE\n           GOBACK\n           .\n      ******************************************************************\n       1000-HOUSEKEEPING.\n      ******************************************************************\n      *    THIS ROUTINE PERFORMS ALL OF THE ONE-TIME PROCESSES THAT\n      *    NEED TO BE DONE BEFORE THE MAIN LOOP PROCESSES BEGIN.\n      *    OPENS FILES, INITS ARRAYS AND HEADERS, READS FIRST RECORD.\n      ******************************************************************\n\n           MOVE '1000-HOUSEKEEPING'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           MOVE 'I'                        TO WS-PGM-PHASE-SW\n           IF WS-DEBUG-SWITCHES NOT = SPACES\n             DISPLAY '*************************************************'\n             DISPLAY 'BEGIN INITPARM PHASE'\n             DISPLAY '*************************************************'\n           END-IF\n\n      * CREATE TSO ENVIRONMENT\n           CALL 'IKJTSOEV' USING WS-IKJEFT-FUTURE-USE\n                                 WS-IKJEFT-RC\n                                 WS-IKJEFT-REASON-CD\n                                 WS-IKJEFT-INFO-CD\n                                 WS-IKJEFT-CPPL-ADDR\n           IF WS-IKJEFT-RC NOT = ZERO\n              MOVE WS-IKJEFT-RC            TO WS-DISPLAY-RC\n              DISPLAY 'IKJTSOEV FAILED - RC=' WS-DISPLAY-RC\n              MOVE WS-IKJEFT-REASON-CD     TO WS-DISPLAY-RC\n              DISPLAY '         REASON CODE=' WS-DISPLAY-RC\n              MOVE 20                      TO WS-LASTCC\n              PERFORM 9998-HANDLE-LASTCC                 THRU 9998-EXIT\n           END-IF\n\n      * PROCESS PARMS WITH PHASE=P, JUST TO SET INITIAL $SYMBPARM,\n      * $BOUNDS, $DEBUG, ETC., THIS WILL NOT LOAD ANY SYMBOLS!!!\n081113     MOVE WS-DEFAULT-TIMEZONE        TO WS-CURRENT-TIMEZONE\n081113     SET  WS-LVL-NO-VALUE            TO TRUE\n           MOVE LS-INPUT-PARMS-LEN         TO WS-INPUT-PARMS-LEN\n           MOVE LS-INPUT-PARMS(1:LS-INPUT-PARMS-LEN)\n                                           TO WS-INPUT-PARMS\n           PERFORM 5000-PROCESS-PARMS                    THRU 5000-EXIT\n081113     IF WS-CURRENT-TIMEZONE = 'LOCAL'\n081113       DISPLAY '****************************************'\n081113               '****************************************'\n081113       DISPLAY 'CAUTION: LOCAL TIMEZONE SPECIFIED!'\n081113       DISPLAY '  DATE/TIME SYMBOLS NOT BEGINNING WITH '\n081113               '&L OR &U WILL DEFAULT TO LOCAL TIME.'\n081113       DISPLAY '  THIS IS DIFFERENT FROM IBM SYSTEM '\n081113               'DYNAMIC SYMBOLS, WHICH USE UTC TIME FOR'\n081113       DISPLAY '  SYMBOLS THAT DO NOT BEGIN WITH &L AND '\n081113               'DO NOT USE DATE/TIME SYMBOLS WITH &U.'\n081113       DISPLAY '****************************************'\n081113               '****************************************'\n081113     END-IF\n\n      * GET JOB INFO FROM MVS DATA AREAS\n           PERFORM 1100-GET-MVS-JOB-INFO                 THRU 1100-EXIT\n\n      * GET INPUT AND OUTPUT FILE DDNAMES\n           PERFORM 1200-GET-IO-FILE-DDNAMES              THRU 1200-EXIT\n081113\n081113* GET UTC AND LOCAL DATE AND TIME FOR USE IN DYNAMIC SYMBOLS\n081113     PERFORM 1300-GET-DATE-TIME                    THRU 1300-EXIT\n\n      * LOAD SUBSTITUTION ARRAY WITH BUILTIN VALUES\n           PERFORM 1400-LOAD-BUILTIN-SYMBOLS             THRU 1400-EXIT\n081113\n081113* GET SYSTEM SYMBOLS FROM THE MVS SYSTEM SYMBOL TABLE\n081113     PERFORM 1500-LOAD-SYSTEM-SYMBOLS              THRU 1500-EXIT\n091020\n091020     MOVE 'S'                        TO WS-PGM-PHASE-SW\n091020     IF WS-DEBUG-SWITCHES NOT = SPACES\n091020       DISPLAY '*************************************************'\n091020       DISPLAY 'BEGIN SYMBPARM PHASE'\n091020       DISPLAY '*************************************************'\n091020     END-IF\n120824\n120824* PROCESS PARMIN FILE TO LOAD ANY PARMS SPECIFIED THERE\n120824     OPEN INPUT PARMIN-FILE\n120824     MOVE 'N'                        TO WS-PARMIN-EOF-SW\n120824     READ PARMIN-FILE\n120824       AT END MOVE 'Y'               TO WS-PARMIN-EOF-SW\n120824     END-READ\n120824\n120824     SET WS-LVL-PARM-OVERRIDE        TO TRUE\n120824     PERFORM UNTIL WS-PARMIN-EOF\n120824       PERFORM VARYING WS-BEG FROM 1 BY 1\n120824         UNTIL WS-BEG >= LENGTH OF FD-PARMIN-REC\n120824            OR FD-PARMIN-REC(WS-BEG:1) > SPACES\n120824       END-PERFORM\n120824\n120824       PERFORM VARYING WS-LEN\n120824         FROM LENGTH OF FD-PARMIN-REC BY -1\n120824         UNTIL WS-LEN <= WS-BEG\n120824            OR FD-PARMIN-REC(WS-LEN:1) > SPACES\n120824       END-PERFORM\n120824\n120824       COMPUTE WS-LEN = (WS-LEN - WS-BEG) + 1\n120824       IF WS-LEN > ZERO\n120824         MOVE WS-LEN                 TO WS-INPUT-PARMS-LEN\n120824         MOVE FD-PARMIN-REC(WS-BEG:WS-LEN)\n120824                                     TO WS-INPUT-PARMS\n120824         PERFORM 5000-PROCESS-PARMS                THRU 5000-EXIT\n120824       END-IF\n120824\n120824       READ PARMIN-FILE\n120824         AT END MOVE 'Y'             TO WS-PARMIN-EOF-SW\n120824       END-READ\n120824     END-PERFORM\n120824\n120824     CLOSE PARMIN-FILE\n091020\n091020* PROCESS PARMS AGAIN TO FULLY PROCESS ANY SYMBOLS PASSED\n091020* SET VALUE LEVEL FOR SYMBOLS PASSED ON PARMS,\n091020* THEY OVERLAY ALL OTHER INPUT SOURCES!!!\n081113     SET WS-LVL-PARM-OVERRIDE        TO TRUE\n091020     MOVE LS-INPUT-PARMS-LEN         TO WS-INPUT-PARMS-LEN\n091020     MOVE LS-INPUT-PARMS(1:LS-INPUT-PARMS-LEN)\n091020                                     TO WS-INPUT-PARMS\n091020     PERFORM 5000-PROCESS-PARMS                    THRU 5000-EXIT\n\n      * LOAD SYMBOLS FROM JESJCL\n           MOVE 'J'                        TO WS-PGM-PHASE-SW\n           IF WS-DEBUG-SWITCHES NOT = SPACES\n             DISPLAY '*************************************************'\n             DISPLAY 'BEGIN JCLSCAN PHASE'\n             DISPLAY '*************************************************'\n           END-IF\n\n           PERFORM 1600-GET-JESJCL                       THRU 1600-EXIT\n           PERFORM 1700-PARSE-JESJCL                     THRU 1700-EXIT\n\n091020     PERFORM 1800-DISPLAY-SYMBOLS                  THRU 1800-EXIT\n           .\n       1000-EXIT. EXIT.\n      *****************************************************************\n       1100-GET-MVS-JOB-INFO.\n      *****************************************************************\n      *    THIS ROUTINE GETS JOB INFO FROM THE MVS DATA AREAS.\n      *****************************************************************\n           MOVE '1100-GET-MVS-JOB-INFO'    TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    GET THE USER/JOB/PROC/STEP INFO\n           SET ADDRESS OF PSA              TO NULL\n           SET ADDRESS OF ASCB             TO PSA-PSAAOLD\n090505     SET ADDRESS OF ASSB             TO ASCB-ASCBASSB\n090505     SET ADDRESS OF JSAB             TO ASSB-ASSBJSAB\n090505     MOVE JSAB-JSABUSID              TO WS-SYSUID\n090505     MOVE JSAB-JSABJBNM              TO WS-JOBNAME\n090505     MOVE JSAB-JSABJBID              TO WS-JOBID\n           SET ADDRESS OF TCB              TO PSA-PSATOLD\n           SET ADDRESS OF TIOT             TO TCB-TCBTIO\n\n           SET ADDRESS OF JSCB             TO TCB-TCBJSCB\n           MOVE ZERO                       TO WS-STEPNO\n           MOVE JSCB-JSCBSTEP              TO WS-STEPNO-CHAR(2:1)\n           MOVE WS-STEPNO                  TO WS-STEPNUM\n           MOVE JSCB-JSCBPGMN              TO WS-PGMNAME\n\n090505     IF TIOT-TIOCJSTN = SPACES\n090505       MOVE TIOT-TIOCSTPN            TO WS-STEPNAME\n090505       MOVE SPACES                   TO WS-PROCSTEP\n           ELSE\n090505       MOVE TIOT-TIOCSTPN            TO WS-PROCSTEP\n090505       MOVE TIOT-TIOCJSTN            TO WS-STEPNAME\n           END-IF\n\n           IF WS-DEBUG-SWITCHES > SPACES\n             DISPLAY '**** SYSUID  =' WS-SYSUID\n             DISPLAY '**** JOBNAME =' WS-JOBNAME\n090505       DISPLAY '**** JOBID   =' WS-JOBID\n             DISPLAY '**** PROCSTEP=' WS-PROCSTEP\n             DISPLAY '**** STEPNAME=' WS-STEPNAME\n             DISPLAY '**** STEPNUM =' WS-STEPNUM\n             DISPLAY '**** PGMNAME =' WS-PGMNAME\n           END-IF\n           .\n       1100-EXIT. EXIT.\n      *****************************************************************\n       1200-GET-IO-FILE-DDNAMES.\n      *****************************************************************\n      *    THIS ROUTINE FINDS ALL THE INPUT AND OUTPUT FILE DDNAMES.\n      *****************************************************************\n           MOVE '1200-GET-IO-FILE-DDNAMES' TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    SET ADDRESSABILITY TO THE TIOT\n           SET ADDRESS OF PSA              TO NULL\n           SET ADDRESS OF TCB              TO PSA-PSATOLD\n           SET ADDRESS OF TIOT             TO TCB-TCBTIO\n\n      *    WALK THE TIOT ENTRIES TO FIND THE I/O FILE DDNAMES\n100313     SET TIOE-PTR                    TO TCB-TCBTIO\n100313     ADD 24                          TO TIOE-PNUM\n100313     SET ADDRESS OF TIOENTRY         TO TIOE-PTR\n           PERFORM UNTIL TIOT-TIOELNGH = LOW-VALUES\n             IF WS-DEBUG-DDNAME\n               DISPLAY 'TIOT-TIOEDDNM=<' TIOT-TIOEDDNM '>'\n             END-IF\n             IF TIOT-TIOEDDNM(1:4) = 'CNTL'\n100313       OR TIOT-TIOEDDNM(1:4) = 'LIBR'\n               PERFORM 1210-PROCESS-CNTL-DDNAME          THRU 1210-EXIT\n             END-IF\n\n      *      POINT TO NEXT DDNAME ENTRY IN TIOT\n100313       MOVE ZERO                     TO TIOE-LEN\n100313       MOVE TIOT-TIOELNGH            TO TIOE-LEN-CHAR(2:1)\n100313       ADD TIOE-LEN                  TO TIOE-PNUM\n100313       SET ADDRESS OF TIOENTRY       TO TIOE-PTR\n           END-PERFORM\n\n      *    DISPLAY DDNAME ENTRIES IF REQUESTED\n           IF WS-DEBUG-DDNAME\n             DISPLAY '*************************************************'\n             DISPLAY 'CNTL INPUT AND OUTPUT DDNAME ENTRIES:'\n             DISPLAY '*************************************************'\n             PERFORM VARYING DDX FROM 1 BY 1\n               UNTIL DDX > DDNAME-CNT\n                 SET WS-DISPLAY-NDX        TO DDX\n                 DISPLAY 'ENTRY(' WS-DISPLAY-NDX     ')'\n                         ' ROOT=<'  DDNAME-ROOT(DDX) '>'\n                         ' IN=<'    DDNAME-IN  (DDX) '>'\n                         ' OUT=<'   DDNAME-OUT (DDX) '>'\n100313                   ' MEMS=<'  DDNAME-MEMS(DDX) '>'\n             END-PERFORM\n             DISPLAY '*************************************************'\n             DISPLAY 'END CNTL INPUT AND OUTPUT DDNAME ENTRIES'\n             DISPLAY '*************************************************'\n           END-IF\n           .\n       1200-EXIT. EXIT.\n      ******************************************************************\n       1210-PROCESS-CNTL-DDNAME.\n      ******************************************************************\n      *    THIS ROUTINE PROCESSES A CNTL TIOT DD ENTRY\n      ******************************************************************\n           MOVE '1210-PROCESS-CNTL-DDNAME' TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    GET THE DDNAME ROOT TO MATCH THE INPUT AND OUTPUT NAMES\n           PERFORM VARYING WS-EX FROM 5 BY 1\n             UNTIL WS-EX > 8\n                OR TIOT-TIOEDDNM(WS-EX:1) = SPACES\n           END-PERFORM\n           SUBTRACT 1                      FROM WS-EX\n\n           COMPUTE WS-LX = WS-EX - 4\n\n           EVALUATE TRUE\n             WHEN WS-LX > 0 AND TIOT-TIOEDDNM(WS-EX:1)     = 'I'\n               MOVE TIOT-TIOEDDNM(1:WS-EX - 1)   TO DDNAME-SRCH-ROOT\n               MOVE 'I'                          TO DDNAME-SRCH-TYPE\n\n             WHEN WS-LX > 1 AND TIOT-TIOEDDNM(WS-EX - 1:2) = 'IN'\n               MOVE TIOT-TIOEDDNM(1:WS-EX - 2)   TO DDNAME-SRCH-ROOT\n               MOVE 'I'                          TO DDNAME-SRCH-TYPE\n\n             WHEN WS-LX > 0 AND TIOT-TIOEDDNM(WS-EX:1)     = 'O'\n               MOVE TIOT-TIOEDDNM(1:WS-EX - 1)   TO DDNAME-SRCH-ROOT\n               MOVE 'O'                          TO DDNAME-SRCH-TYPE\n\n             WHEN WS-LX > 1 AND TIOT-TIOEDDNM(WS-EX - 1:2) = 'OT'\n               MOVE TIOT-TIOEDDNM(1:WS-EX - 2)   TO DDNAME-SRCH-ROOT\n               MOVE 'O'                          TO DDNAME-SRCH-TYPE\n\n             WHEN WS-LX > 2 AND TIOT-TIOEDDNM(WS-EX - 2:3) = 'OUT'\n               MOVE TIOT-TIOEDDNM(1:WS-EX - 3)   TO DDNAME-SRCH-ROOT\n               MOVE 'O'                          TO DDNAME-SRCH-TYPE\n100313\n100313       WHEN WS-LX > 0 AND TIOT-TIOEDDNM(WS-EX:1)     = 'M'\n100313         MOVE TIOT-TIOEDDNM(1:WS-EX - 1)   TO DDNAME-SRCH-ROOT\n100313         MOVE 'M'                          TO DDNAME-SRCH-TYPE\n100313\n100313       WHEN WS-LX > 2 AND TIOT-TIOEDDNM(WS-EX - 2:3) = 'MEM'\n100313         MOVE TIOT-TIOEDDNM(1:WS-EX - 3)   TO DDNAME-SRCH-ROOT\n100313         MOVE 'M'                          TO DDNAME-SRCH-TYPE\n100313\n100313       WHEN WS-LX > 3 AND TIOT-TIOEDDNM(WS-EX - 3:4) = 'MEMS'\n100313         MOVE TIOT-TIOEDDNM(1:WS-EX - 4)   TO DDNAME-SRCH-ROOT\n100313         MOVE 'M'                          TO DDNAME-SRCH-TYPE\n\n             WHEN OTHER\n               MOVE SPACES                       TO DDNAME-SRCH-ROOT\n           END-EVALUATE\n100313\n100313     IF  DDNAME-SRCH-TYPE = 'M'\n100313     AND DDNAME-SRCH-ROOT(1:4) NOT = 'LIBR'\n100313       MOVE SPACES                         TO DDNAME-SRCH-ROOT\n100313       MOVE SPACES                         TO DDNAME-SRCH-TYPE\n100313     END-IF\n\n      *    SEARCH THE DD ARRAY FOR A MATCHING ENTRY\n           IF DDNAME-SRCH-ROOT > SPACES\n             SET DDX                       TO 1\n             SEARCH DDNAME-ENTRY\n      *        IF NO MATCH, ADD NEW ENTRY\n               AT END\n                 PERFORM 1211-ADD-DDNAME-ENTRY           THRU 1211-EXIT\n\n      *        IF MATCH, CHECK FOR CONFLICTS\n               WHEN DDNAME-ROOT(DDX) = DDNAME-SRCH-ROOT\n                 EVALUATE TRUE\n      *            IF INPUT AND MATCH IS EMPTY, ADD INPUT DDNAME\n                   WHEN DDNAME-SRCH-TYPE = 'I'\n                    AND DDNAME-IN(DDX) = SPACES\n                     MOVE TIOT-TIOEDDNM    TO DDNAME-IN(DDX)\n\n      *            IF OUTPUT AND MATCH IS EMPTY, ADD OUTPUT DDNAME\n                   WHEN DDNAME-SRCH-TYPE = 'O'\n                    AND DDNAME-OUT(DDX) = SPACES\n                     MOVE TIOT-TIOEDDNM    TO DDNAME-OUT(DDX)\n100313\n100313*            IF MEMS AND MATCH IS EMPTY, ADD MEMS DDNAME\n100313             WHEN DDNAME-SRCH-TYPE = 'M'\n100313              AND DDNAME-MEMS(DDX) = SPACES\n100313               MOVE TIOT-TIOEDDNM    TO DDNAME-MEMS(DDX)\n\n      *            OTHERWISE ERROR!\n                   WHEN OTHER\n                     EVALUATE DDNAME-SRCH-TYPE\n                       WHEN 'I'\n                         DISPLAY '**** ERROR - DDNAME '\n                                 TIOT-TIOEDDNM(1:WS-EX)\n                                 ' CONFLICTS WITH DDNAME '\n                                 DDNAME-IN(DDX)\n                       WHEN 'O'\n                         DISPLAY '**** ERROR - DDNAME '\n                                 TIOT-TIOEDDNM(1:WS-EX)\n                                 ' CONFLICTS WITH DDNAME '\n                                 DDNAME-OUT(DDX)\n100313                 WHEN OTHER\n100313                   DISPLAY '**** ERROR - DDNAME '\n100313                           TIOT-TIOEDDNM(1:WS-EX)\n100313                           ' CONFLICTS WITH DDNAME '\n100313                           DDNAME-MEMS(DDX)\n                     END-EVALUATE\n                     DISPLAY '**** DDNAME '\n                             TIOT-TIOEDDNM(1:WS-EX)\n                             ' WILL BE IGNORED.'\n                     MOVE 12               TO WS-LASTCC\n                     PERFORM 9998-HANDLE-LASTCC          THRU 9998-EXIT\n                 END-EVALUATE\n             END-SEARCH\n           END-IF\n           .\n       1210-EXIT. EXIT.\n      ******************************************************************\n       1211-ADD-DDNAME-ENTRY.\n      ******************************************************************\n      *    THIS ROUTINE ADDS A NEW ENTRY TO THE DDNAME ARRAY\n      ******************************************************************\n           MOVE '1211-ADD-DDNAME-ENTRY'    TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           ADD 1                           TO DDNAME-CNT\n\n           IF DDNAME-CNT > DDNAME-MAX\n             DISPLAY '****************************************'\n                     '****************************************'\n             DISPLAY '****************************************'\n                     '****************************************'\n             DISPLAY '**** ERROR: DDNAME ARRAY OVERFLOW,'\n                     ' INCREASE ARRAY SIZE'\n             DISPLAY '****************************************'\n                     '****************************************'\n             DISPLAY '****************************************'\n                     '****************************************'\n             MOVE 20                       TO WS-LASTCC\n             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n           END-IF\n\n           SET DDX                         TO DDNAME-CNT\n           MOVE DDNAME-SRCH-ROOT           TO DDNAME-ROOT(DDX)\n           MOVE SPACES                     TO DDNAME-IN  (DDX)\n           MOVE SPACES                     TO DDNAME-OUT (DDX)\n100313     MOVE SPACES                     TO DDNAME-MEMS(DDX)\n           EVALUATE DDNAME-SRCH-TYPE\n             WHEN 'I'\n               MOVE TIOT-TIOEDDNM          TO DDNAME-IN  (DDX)\n             WHEN 'O'\n               MOVE TIOT-TIOEDDNM          TO DDNAME-OUT (DDX)\n100313       WHEN OTHER\n100313         MOVE TIOT-TIOEDDNM          TO DDNAME-MEMS(DDX)\n           END-EVALUATE\n           .\n       1211-EXIT. EXIT.\n081113*****************************************************************\n081113 1300-GET-DATE-TIME.\n081113*****************************************************************\n081113*    THIS ROUTINE GETS THE UTC AND LOCAL DATE AND TIME\n081113*****************************************************************\n081113     MOVE '1300-GET-DATE-TIME.'      TO WS-PARAGRAPH-NAME\n081113     IF WS-DEBUG-TRACE\n081113       DISPLAY                          WS-PARAGRAPH-NAME\n081113     END-IF\n081113\n081113* GET UTC DATE/TIME FROM THE SYSTEM\n081113     CALL 'CEEUTC' USING CEE-LILIAN, CEE-UTC-SECS, CEE-FC\n081113     IF CEE-SEVERITY NOT = ZERO\n081113     OR CEE-MSG-NO   NOT = ZERO\n081113       DISPLAY  'CEEUTC FAILED: CEE-SEVERITY=<' CEE-SEVERITY\n081113                '> CEE-MSG-NO=<' CEE-MSG-NO\n081113                '> SEV-CTL=<' CEE-CASE-SEV-CTL\n081113                '> FAC-ID=<' CEE-FACILITY-ID '>'\n081113     END-IF\n081113\n081113* GET LOCAL DATE/TIME OFFSET FROM UTC AND CALC LOCAL SECONDS\n081113     CALL 'CEEGMTO' USING CEE-OFF-HRS,  CEE-OFF-MINS,\n081113                          CEE-OFF-SECS, CEE-FC\n081113     IF CEE-SEVERITY NOT = ZERO\n081113     OR CEE-MSG-NO   NOT = ZERO\n081113       DISPLAY  'CEEGMTO FAILED: CEE-SEVERITY=<' CEE-SEVERITY\n081113                '> CEE-MSG-NO=<' CEE-MSG-NO\n081113                '> SEV-CTL=<' CEE-CASE-SEV-CTL\n081113                '> FAC-ID=<' CEE-FACILITY-ID '>'\n081113     END-IF\n081113\n081113     COMPUTE CEE-LOCAL-SECS = CEE-UTC-SECS + CEE-OFF-SECS\n081113\n081113* SET ALL UTC DATE/TIME FIELDS\n081113     MOVE CEE-UTC-SECS               TO CEE-WORK-SECS\n081113     PERFORM 1310-SET-WORK-DATE-TIME               THRU 1310-EXIT\n081113     MOVE WS-WORK-DATE-TIME          TO WS-UTC-DATE-TIME\n081113\n081113* SET ALL LOCAL DATE/TIME FIELDS\n081113     MOVE CEE-LOCAL-SECS             TO CEE-WORK-SECS\n081113     PERFORM 1310-SET-WORK-DATE-TIME               THRU 1310-EXIT\n081113     MOVE WS-WORK-DATE-TIME          TO WS-LOCAL-DATE-TIME\n081113     .\n081113 1300-EXIT. EXIT.\n081113*****************************************************************\n081113 1310-SET-WORK-DATE-TIME.\n081113*****************************************************************\n081113*    THIS ROUTINE BUILDS DTTMSTR, DAY OF WEEK AND JULIAN DATE\n081113*****************************************************************\n081113     MOVE '1310-SET-WORK-DATE-TIME'  TO WS-PARAGRAPH-NAME\n081113     IF WS-DEBUG-TRACE\n081113       DISPLAY                          WS-PARAGRAPH-NAME\n081113     END-IF\n081113\n091020     MOVE 23                         TO CEE-PICSTR-LEN\n091020     MOVE 'YYYY-MM-DD-HH.MI.SS.999'  TO CEE-PICSTR-TEXT\n081113     MOVE SPACES                     TO CEE-WORK-DATM-BUFF\n081113     CALL 'CEEDATM' USING CEE-WORK-SECS,      CEE-PICSTR,\n081113                          CEE-WORK-DATM-BUFF, CEE-FC\n081113\n081113     IF CEE-SEVERITY NOT = ZERO\n081113     OR CEE-MSG-NO   NOT = ZERO\n081113       DISPLAY 'CEEDATM FAILED: CEE-SEVERITY=<' CEE-SEVERITY\n081113                '> CEE-MSG-NO=<' CEE-MSG-NO\n081113                '> SEV-CTL=<' CEE-CASE-SEV-CTL\n081113                '> FAC-ID=<' CEE-FACILITY-ID '>'\n081113     END-IF\n081113\n091020     MOVE CEE-WORK-DATM-BUFF(1:23)   TO WS-WSQL-TIMESTMP(1:23)\n091020     MOVE ZERO                       TO WS-WSQL-TIMESTMP-ZZZ\n091020\n091020     MOVE WS-WSQL-ISODATE-YYYY       TO WS-WGREG-YYYYMMDD(1:4)\n091020     MOVE WS-WSQL-ISODATE-MM         TO WS-WGREG-YYYYMMDD(5:2)\n091020     MOVE WS-WSQL-ISODATE-DD         TO WS-WGREG-YYYYMMDD(7:2)\n091020\n091020     MOVE WS-WSQL-ISOTIME-HH         TO WS-WTIME-HHMMSS999(1:2)\n091020     MOVE WS-WSQL-ISOTIME-MM         TO WS-WTIME-HHMMSS999(3:2)\n091020     MOVE WS-WSQL-ISOTIME-SS         TO WS-WTIME-HHMMSS999(5:2)\n091020     MOVE WS-WSQL-TIMESTMP-TTT       TO WS-WTIME-HHMMSS999(7:3)\n081113\n081113     COMPUTE WS-WDOW-NUM\n081113       = FUNCTION MOD(\n081113         FUNCTION INTEGER-OF-DATE(WS-WGREG-YYYYMMDD) 7) + 1\n081113\n081113     COMPUTE WS-WJUL-YYYYJJJ\n081113       = FUNCTION DAY-OF-INTEGER(\n081113         FUNCTION INTEGER-OF-DATE(WS-WGREG-YYYYMMDD))\n091020\n091020     MOVE WS-WSQL-ISODATE-MM         TO WS-WSQL-USADATE(1:2)\n091020     MOVE '/'                        TO WS-WSQL-USADATE(3:1)\n091020     MOVE WS-WSQL-ISODATE-DD         TO WS-WSQL-USADATE(4:2)\n091020     MOVE '/'                        TO WS-WSQL-USADATE(6:1)\n091020     MOVE WS-WSQL-ISODATE-YYYY       TO WS-WSQL-USADATE(7:4)\n091020\n091020     MOVE WS-WSQL-ISODATE-DD         TO WS-WSQL-EURDATE(1:2)\n091020     MOVE '.'                        TO WS-WSQL-EURDATE(3:1)\n091020     MOVE WS-WSQL-ISODATE-MM         TO WS-WSQL-EURDATE(4:2)\n091020     MOVE '.'                        TO WS-WSQL-EURDATE(6:1)\n091020     MOVE WS-WSQL-ISODATE-YYYY       TO WS-WSQL-EURDATE(7:4)\n091020\n091020     MOVE WS-WSQL-ISODATE            TO WS-WSQL-JISDATE\n091020\n091020     IF WS-WSQL-ISOTIME-HH > 12\n091020       COMPUTE WS-HH = WS-WSQL-ISOTIME-HH - 12\n091020       MOVE WS-HH                    TO WS-WSQL-USATIME(1:2)\n091020     ELSE\n091020       MOVE WS-WSQL-ISOTIME-HH       TO WS-WSQL-USATIME(1:2)\n091020     END-IF\n091020     MOVE ':'                        TO WS-WSQL-USATIME(3:1)\n091020     MOVE WS-WSQL-ISOTIME-MM         TO WS-WSQL-USATIME(4:2)\n091020     MOVE ' '                        TO WS-WSQL-USATIME(6:1)\n091020     IF WS-WTIME-HHMMSS999 < 120000000\n091020     OR WS-WTIME-HHMMSS999 = 240000000\n091020       MOVE 'AM'                     TO WS-WSQL-USATIME(7:2)\n091020     ELSE\n091020       MOVE 'PM'                     TO WS-WSQL-USATIME(7:2)\n091020     END-IF\n091020\n091020     MOVE WS-WSQL-ISOTIME            TO WS-WSQL-EURTIME\n091020\n091020     MOVE WS-WSQL-ISOTIME-HH         TO WS-WSQL-JISTIME(1:2)\n091020     MOVE ':'                        TO WS-WSQL-JISTIME(3:1)\n091020     MOVE WS-WSQL-ISOTIME-MM         TO WS-WSQL-JISTIME(4:2)\n091020     MOVE ':'                        TO WS-WSQL-JISTIME(6:1)\n091020     MOVE WS-WSQL-ISOTIME-SS         TO WS-WSQL-JISTIME(7:2)\n081113     .\n081113 1310-EXIT. EXIT.\n      *****************************************************************\n       1400-LOAD-BUILTIN-SYMBOLS.\n      *****************************************************************\n      *    THIS ROUTINE LOADS THE SYMBSUB BUILTIN SYMBOLS\n      *****************************************************************\n           MOVE '1400-LOAD-BUILTIN-SYMBOLS'\n                                           TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    SET VALUE LEVEL FOR BUILTIN SYMBOLS,\n      *    ANY INPUT SOURCE WILL OVERLAY THEM\n081113     SET WS-LVL-BUILTIN-SYMBOL       TO TRUE\n081113\n081113     IF WS-CURRENT-TIMEZONE = 'LOCAL'\n081113       MOVE WS-LOCAL-DATE-TIME       TO WS-WORK-DATE-TIME\n081113     ELSE\n081113       MOVE WS-UTC-DATE-TIME         TO WS-WORK-DATE-TIME\n081113     END-IF\n091020\n091020     MOVE 'SQLTIMST'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-TIMESTMP           TO WS-VALUE\n091020     MOVE +26                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'ISODATE'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-ISODATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'USADATE'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-USADATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'EURDATE'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-EURDATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'JISDATE'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-JISDATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'ISOTIME'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-ISOTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'USATIME'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-USATIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'EURTIME'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-EURTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'JISTIME'                  TO WS-NAME\n091020     MOVE +7                         TO WS-NAME-LEN\n091020     MOVE WS-WSQL-JISTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'YYYYMMDD'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD          TO WS-VALUE\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'MMDDYYYY'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)\n081113     MOVE WS-WGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'MMDDYY'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)\n081113     MOVE WS-WGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'DDMMYYYY'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)\n081113     MOVE WS-WGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)\n081113     MOVE WS-WGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'DDMMYY'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)\n081113     MOVE WS-WGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)\n081113     MOVE WS-WGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'YYYYJJJ'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-WJUL-YYYYJJJ            TO WS-VALUE\n081113     MOVE +7                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'YYJJJ'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-WJUL-YYYYJJJ(3:5)       TO WS-VALUE\n081113     MOVE +5                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'HHMM'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(1:4)    TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'SEC999'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(5:5)    TO WS-VALUE\n081113     MOVE +5                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'SEC99'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(5:4)    TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'SEC9'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(5:3)    TO WS-VALUE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'MONNAM'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     EVALUATE WS-WGREG-YYYYMMDD(5:2)\n081113       WHEN '01'   MOVE 'JANUARY'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN '02'   MOVE 'FEBRUARY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN '03'   MOVE 'MARCH'      TO WS-VALUE\n081113                   MOVE +5           TO WS-VALUE-LEN\n081113       WHEN '04'   MOVE 'APRIL'      TO WS-VALUE\n081113                   MOVE +5           TO WS-VALUE-LEN\n081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE\n081113                   MOVE +3           TO WS-VALUE-LEN\n081113       WHEN '06'   MOVE 'JUNE'       TO WS-VALUE\n081113                   MOVE +4           TO WS-VALUE-LEN\n081113       WHEN '07'   MOVE 'JULY'       TO WS-VALUE\n081113                   MOVE +4           TO WS-VALUE-LEN\n081113       WHEN '08'   MOVE 'AUGUST'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN '09'   MOVE 'SEPTEMBER'  TO WS-VALUE\n081113                   MOVE +9           TO WS-VALUE-LEN\n081113       WHEN '10'   MOVE 'OCTOBER'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN '11'   MOVE 'NOVEMBER'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN '12'   MOVE 'DECEMBER'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113     END-EVALUATE\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'MON3'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     EVALUATE WS-WGREG-YYYYMMDD(5:2)\n081113       WHEN '01'   MOVE 'JAN'        TO WS-VALUE\n081113       WHEN '02'   MOVE 'FEB'        TO WS-VALUE\n081113       WHEN '03'   MOVE 'MAR'        TO WS-VALUE\n081113       WHEN '04'   MOVE 'APR'        TO WS-VALUE\n081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE\n081113       WHEN '06'   MOVE 'JUN'        TO WS-VALUE\n081113       WHEN '07'   MOVE 'JUL'        TO WS-VALUE\n081113       WHEN '08'   MOVE 'AUG'        TO WS-VALUE\n081113       WHEN '09'   MOVE 'SEP'        TO WS-VALUE\n081113       WHEN '10'   MOVE 'OCT'        TO WS-VALUE\n081113       WHEN '11'   MOVE 'NOV'        TO WS-VALUE\n081113       WHEN '12'   MOVE 'DEC'        TO WS-VALUE\n081113     END-EVALUATE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'WDAYNUM'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-WDOW-NUM                TO WS-VALUE\n081113     MOVE +1                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'WDAYNAM'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     EVALUATE WS-WDOW-NUM\n081113       WHEN 1      MOVE 'SUNDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 2      MOVE 'MONDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 3      MOVE 'TUESDAY'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN 4      MOVE 'WEDNESDAY'  TO WS-VALUE\n081113                   MOVE +9           TO WS-VALUE-LEN\n081113       WHEN 5      MOVE 'THURSDAY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN 6      MOVE 'FRIDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 7      MOVE 'SATURDAY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113     END-EVALUATE\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'USQLTIMST'                TO WS-NAME\n091020     MOVE +9                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-TIMESTMP           TO WS-VALUE\n091020     MOVE +26                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UISODATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-ISODATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UUSADATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-USADATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UEURDATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-EURDATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UJISDATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-JISDATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UISOTIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-ISOTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UUSATIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-USATIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UEURTIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-EURTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'UJISTIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-USQL-JISTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UYYMMDD'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(3:6)     TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UDATE'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(3:6)     TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UYR4'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(1:4)     TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UYR2'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(3:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UMON'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(5:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UDAY'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(7:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UWDAY'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     EVALUATE WS-UDOW-NUM\n081113       WHEN 1      MOVE 'SUN'        TO WS-VALUE\n081113       WHEN 2      MOVE 'MON'        TO WS-VALUE\n081113       WHEN 3      MOVE 'TUE'        TO WS-VALUE\n081113       WHEN 4      MOVE 'WED'        TO WS-VALUE\n081113       WHEN 5      MOVE 'THU'        TO WS-VALUE\n081113       WHEN 6      MOVE 'FRI'        TO WS-VALUE\n081113       WHEN 7      MOVE 'SAT'        TO WS-VALUE\n081113     END-EVALUATE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UJDAY'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-UJUL-YYYYJJJ(5:3)       TO WS-VALUE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UHHMMSS'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(1:6)    TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UTIME'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(1:6)    TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UHR'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(1:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UMIN'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(3:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'USEC'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(5:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UYYYYMMDD'                TO WS-NAME\n081113     MOVE +9                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD          TO WS-VALUE\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UMMDDYYYY'                TO WS-NAME\n081113     MOVE +9                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)\n081113     MOVE WS-UGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UMMDDYY'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)\n081113     MOVE WS-UGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UDDMMYYYY'                TO WS-NAME\n081113     MOVE +9                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)\n081113     MOVE WS-UGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)\n081113     MOVE WS-UGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UDDMMYY'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-UGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)\n081113     MOVE WS-UGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)\n081113     MOVE WS-UGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UYYYYJJJ'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     MOVE WS-UJUL-YYYYJJJ            TO WS-VALUE\n081113     MOVE +7                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UYYJJJ'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-UJUL-YYYYJJJ(3:5)       TO WS-VALUE\n081113     MOVE +5                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UHHMM'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(1:4)    TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'USEC999'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(5:5)    TO WS-VALUE\n081113     MOVE +5                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'USEC99'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(5:4)    TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'USEC9'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-UTIME-HHMMSS999(5:3)    TO WS-VALUE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UMONNAM'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     EVALUATE WS-UGREG-YYYYMMDD(5:2)\n081113       WHEN '01'   MOVE 'JANUARY'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN '02'   MOVE 'FEBRUARY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN '03'   MOVE 'MARCH'      TO WS-VALUE\n081113                   MOVE +5           TO WS-VALUE-LEN\n081113       WHEN '04'   MOVE 'APRIL'      TO WS-VALUE\n081113                   MOVE +5           TO WS-VALUE-LEN\n081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE\n081113                   MOVE +3           TO WS-VALUE-LEN\n081113       WHEN '06'   MOVE 'JUNE'       TO WS-VALUE\n081113                   MOVE +4           TO WS-VALUE-LEN\n081113       WHEN '07'   MOVE 'JULY'       TO WS-VALUE\n081113                   MOVE +4           TO WS-VALUE-LEN\n081113       WHEN '08'   MOVE 'AUGUST'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN '09'   MOVE 'SEPTEMBER'  TO WS-VALUE\n081113                   MOVE +9           TO WS-VALUE-LEN\n081113       WHEN '10'   MOVE 'OCTOBER'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN '11'   MOVE 'NOVEMBER'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN '12'   MOVE 'DECEMBER'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113     END-EVALUATE\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UMON3'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     EVALUATE WS-UGREG-YYYYMMDD(5:2)\n081113       WHEN '01'   MOVE 'JAN'        TO WS-VALUE\n081113       WHEN '02'   MOVE 'FEB'        TO WS-VALUE\n081113       WHEN '03'   MOVE 'MAR'        TO WS-VALUE\n081113       WHEN '04'   MOVE 'APR'        TO WS-VALUE\n081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE\n081113       WHEN '06'   MOVE 'JUN'        TO WS-VALUE\n081113       WHEN '07'   MOVE 'JUL'        TO WS-VALUE\n081113       WHEN '08'   MOVE 'AUG'        TO WS-VALUE\n081113       WHEN '09'   MOVE 'SEP'        TO WS-VALUE\n081113       WHEN '10'   MOVE 'OCT'        TO WS-VALUE\n081113       WHEN '11'   MOVE 'NOV'        TO WS-VALUE\n081113       WHEN '12'   MOVE 'DEC'        TO WS-VALUE\n081113     END-EVALUATE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UWDAYNUM'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     MOVE WS-UDOW-NUM                TO WS-VALUE\n081113     MOVE +1                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'UWDAYNAM'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     EVALUATE WS-UDOW-NUM\n081113       WHEN 1      MOVE 'SUNDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 2      MOVE 'MONDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 3      MOVE 'TUESDAY'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN 4      MOVE 'WEDNESDAY'  TO WS-VALUE\n081113                   MOVE +9           TO WS-VALUE-LEN\n081113       WHEN 5      MOVE 'THURSDAY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN 6      MOVE 'FRIDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 7      MOVE 'SATURDAY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113     END-EVALUATE\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LSQLTIMST'                TO WS-NAME\n091020     MOVE +9                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-TIMESTMP           TO WS-VALUE\n091020     MOVE +26                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LISODATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-ISODATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LUSADATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-USADATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LEURDATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-EURDATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LJISDATE'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-JISDATE            TO WS-VALUE\n091020     MOVE +10                        TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LISOTIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-ISOTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LUSATIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-USATIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LEURTIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-EURTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n091020\n091020     MOVE 'LJISTIME'                 TO WS-NAME\n091020     MOVE +8                         TO WS-NAME-LEN\n091020     MOVE WS-LSQL-JISTIME            TO WS-VALUE\n091020     MOVE +8                         TO WS-VALUE-LEN\n091020     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LYYYYMMDD'                TO WS-NAME\n081113     MOVE +9                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD          TO WS-VALUE\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LMMDDYYYY'                TO WS-NAME\n081113     MOVE +9                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)\n081113     MOVE WS-LGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LMMDDYY'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(5:4)     TO WS-VALUE(1:4)\n081113     MOVE WS-LGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LDDMMYYYY'                TO WS-NAME\n081113     MOVE +9                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)\n081113     MOVE WS-LGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)\n081113     MOVE WS-LGREG-YYYYMMDD(1:4)     TO WS-VALUE(5:)\n081113     MOVE +8                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LDDMMYY'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(7:2)     TO WS-VALUE(1:2)\n081113     MOVE WS-LGREG-YYYYMMDD(5:2)     TO WS-VALUE(3:2)\n081113     MOVE WS-LGREG-YYYYMMDD(3:2)     TO WS-VALUE(5:)\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LYYYYJJJ'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     MOVE WS-LJUL-YYYYJJJ            TO WS-VALUE\n081113     MOVE +7                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LYYJJJ'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-LJUL-YYYYJJJ(3:5)       TO WS-VALUE\n081113     MOVE +5                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LHHMM'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(1:4)    TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LSEC999'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(5:5)    TO WS-VALUE\n081113     MOVE +5                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LSEC99'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(5:4)    TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LSEC9'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(5:3)    TO WS-VALUE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LMONNAM'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     EVALUATE WS-LGREG-YYYYMMDD(5:2)\n081113       WHEN '01'   MOVE 'JANUARY'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN '02'   MOVE 'FEBRUARY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN '03'   MOVE 'MARCH'      TO WS-VALUE\n081113                   MOVE +5           TO WS-VALUE-LEN\n081113       WHEN '04'   MOVE 'APRIL'      TO WS-VALUE\n081113                   MOVE +5           TO WS-VALUE-LEN\n081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE\n081113                   MOVE +3           TO WS-VALUE-LEN\n081113       WHEN '06'   MOVE 'JUNE'       TO WS-VALUE\n081113                   MOVE +4           TO WS-VALUE-LEN\n081113       WHEN '07'   MOVE 'JULY'       TO WS-VALUE\n081113                   MOVE +4           TO WS-VALUE-LEN\n081113       WHEN '08'   MOVE 'AUGUST'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN '09'   MOVE 'SEPTEMBER'  TO WS-VALUE\n081113                   MOVE +9           TO WS-VALUE-LEN\n081113       WHEN '10'   MOVE 'OCTOBER'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN '11'   MOVE 'NOVEMBER'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN '12'   MOVE 'DECEMBER'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113     END-EVALUATE\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LMON3'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     EVALUATE WS-LGREG-YYYYMMDD(5:2)\n081113       WHEN '01'   MOVE 'JAN'        TO WS-VALUE\n081113       WHEN '02'   MOVE 'FEB'        TO WS-VALUE\n081113       WHEN '03'   MOVE 'MAR'        TO WS-VALUE\n081113       WHEN '04'   MOVE 'APR'        TO WS-VALUE\n081113       WHEN '05'   MOVE 'MAY'        TO WS-VALUE\n081113       WHEN '06'   MOVE 'JUN'        TO WS-VALUE\n081113       WHEN '07'   MOVE 'JUL'        TO WS-VALUE\n081113       WHEN '08'   MOVE 'AUG'        TO WS-VALUE\n081113       WHEN '09'   MOVE 'SEP'        TO WS-VALUE\n081113       WHEN '10'   MOVE 'OCT'        TO WS-VALUE\n081113       WHEN '11'   MOVE 'NOV'        TO WS-VALUE\n081113       WHEN '12'   MOVE 'DEC'        TO WS-VALUE\n081113     END-EVALUATE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LWDAYNUM'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     MOVE WS-LDOW-NUM                TO WS-VALUE\n081113     MOVE +1                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LWDAYNAM'                 TO WS-NAME\n081113     MOVE +8                         TO WS-NAME-LEN\n081113     EVALUATE WS-LDOW-NUM\n081113       WHEN 1      MOVE 'SUNDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 2      MOVE 'MONDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 3      MOVE 'TUESDAY'    TO WS-VALUE\n081113                   MOVE +7           TO WS-VALUE-LEN\n081113       WHEN 4      MOVE 'WEDNESDAY'  TO WS-VALUE\n081113                   MOVE +9           TO WS-VALUE-LEN\n081113       WHEN 5      MOVE 'THURSDAY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113       WHEN 6      MOVE 'FRIDAY'     TO WS-VALUE\n081113                   MOVE +6           TO WS-VALUE-LEN\n081113       WHEN 7      MOVE 'SATURDAY'   TO WS-VALUE\n081113                   MOVE +8           TO WS-VALUE-LEN\n081113     END-EVALUATE\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113     .\n081113 1400-EXIT. EXIT.\n081113*****************************************************************\n081113 1500-LOAD-SYSTEM-SYMBOLS.\n081113*****************************************************************\n081113*    THIS ROUTINE LOADS SYMBOLS FROM THE MVS STATIC SYSTEM SYMBOL\n081113*    TABLE AND ALSO BUILDS VALUES FOR THE DYNAMIC SYSTEM SYMBOLS\n081113*****************************************************************\n081113     MOVE '1500-LOAD-SYSTEM-SYMBOLS' TO WS-PARAGRAPH-NAME\n081113     IF WS-DEBUG-TRACE\n081113       DISPLAY                          WS-PARAGRAPH-NAME\n081113     END-IF\n081113\n081113*    SET VALUE LEVEL FOR SYSTEM SYMBOLS,\n081113*    ANY INPUT SOURCE WILL OVERLAY THEM\n081113     SET WS-LVL-STATIC-SYMBOL        TO TRUE\n081113\n081113*    SET ADDRESSABILITY TO THE SYSTEM SYMBOL TABLE\n081113     SET ADDRESS OF PSA              TO NULL\n081113     SET ADDRESS OF CVT              TO PSA-FLCCVT\n081113     SET ADDRESS OF ECVT             TO CVT-CVTECVT\n081113     SET ADDRESS OF SYMBT            TO ECVT-ECVTSYMT\n081113\n081113*    NOW WALK THE SYMBT ENTRIES TO RETRIEVE THE SYMBOLS\n081113     SET SA-PTR                      TO ECVT-ECVTSYMT\n081113     ADD +4                          TO SA-PTR-NUM\n081113     MOVE SA-PTR-NUM                 TO SA-BASE\n081113     PERFORM VARYING SYMBTE-X FROM 1 BY 1\n081113     UNTIL SYMBTE-X > SYMBT-SYMBTE-CNT\n081113\n081113*      NAMES IN TABLE HAVE LEADING '&' AND TRAILING '.'\n081113       IF SYMBTE-SYMB-LEN(SYMBTE-X) > 2\n081113         COMPUTE SA-PTR-NUM = SA-BASE + SYMBTE-SYMB-OFF(SYMBTE-X)\n081113         SET ADDRESS OF SYMBTE-DAT   TO SA-PTR\n081113         COMPUTE WS-NAME-LEN = SYMBTE-SYMB-LEN(SYMBTE-X) - 2\n081113         MOVE SYMBTE-DAT (2:WS-NAME-LEN)\n081113                                     TO WS-NAME\n081113\n081113         COMPUTE SA-PTR-NUM = SA-BASE + SYMBTE-TEXT-OFF(SYMBTE-X)\n081113         SET ADDRESS OF SYMBTE-DAT   TO SA-PTR\n081113         MOVE SYMBTE-TEXT-LEN(SYMBTE-X) TO WS-VALUE-LEN\n081113         MOVE SYMBTE-DAT (1:WS-VALUE-LEN)\n081113                                     TO WS-VALUE\n081113         PERFORM 8810-ADD-SA-ENTRY                 THRU 8810-EXIT\n081113       END-IF\n081113     END-PERFORM\n081113\n081113*    NOW BUILD AND LOAD THE DYNAMIC SYSTEM SYMBOLS\n081113\n081113*    SET VALUE LEVEL FOR DYNAMIC SYSTEM SYMBOLS,\n081113*    ANY INPUT SOURCE WILL OVERLAY THEM\n081113     SET WS-LVL-DYNAMIC-SYMBOL       TO TRUE\n081113\n081113     MOVE 'SYSUID'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-SYSUID                  TO WS-VALUE\n081113     PERFORM VARYING WS-VALUE-LEN FROM 8 BY -1\n081113       UNTIL WS-VALUE-LEN < 1\n081113          OR WS-SYSUID(WS-VALUE-LEN:1) NOT = SPACES\n081113     END-PERFORM\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'JOBNAME'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-JOBNAME                 TO WS-VALUE\n081113     PERFORM VARYING WS-VALUE-LEN FROM 8 BY -1\n081113       UNTIL WS-VALUE-LEN < 1\n081113          OR WS-JOBNAME(WS-VALUE-LEN:1) NOT = SPACES\n081113     END-PERFORM\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n090505\n090505     MOVE 'JOBID'                    TO WS-NAME\n090505     MOVE +5                         TO WS-NAME-LEN\n090505     MOVE WS-JOBID                   TO WS-VALUE\n090505     PERFORM VARYING WS-VALUE-LEN FROM 8 BY -1\n090505       UNTIL WS-VALUE-LEN < 1\n090505          OR WS-JOBID(WS-VALUE-LEN:1) NOT = SPACES\n090505     END-PERFORM\n090505     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     IF WS-CURRENT-TIMEZONE = 'LOCAL'\n081113       MOVE WS-LOCAL-DATE-TIME       TO WS-WORK-DATE-TIME\n081113     ELSE\n081113       MOVE WS-UTC-DATE-TIME         TO WS-WORK-DATE-TIME\n081113     END-IF\n081113\n081113     MOVE 'YYMMDD'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(3:6)     TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'DATE'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(3:6)     TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'YR4'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(1:4)     TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'YR2'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(3:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'MON'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(5:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'DAY'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-WGREG-YYYYMMDD(7:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'WDAY'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     EVALUATE WS-WDOW-NUM\n081113       WHEN 1      MOVE 'SUN'        TO WS-VALUE\n081113       WHEN 2      MOVE 'MON'        TO WS-VALUE\n081113       WHEN 3      MOVE 'TUE'        TO WS-VALUE\n081113       WHEN 4      MOVE 'WED'        TO WS-VALUE\n081113       WHEN 5      MOVE 'THU'        TO WS-VALUE\n081113       WHEN 6      MOVE 'FRI'        TO WS-VALUE\n081113       WHEN 7      MOVE 'SAT'        TO WS-VALUE\n081113     END-EVALUATE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'JDAY'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-WJUL-YYYYJJJ(5:3)       TO WS-VALUE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'HHMMSS'                   TO WS-NAME\n081113     MOVE +6                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(1:6)    TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'TIME'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(1:6)    TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'HR'                       TO WS-NAME\n081113     MOVE +2                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(1:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'MIN'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(3:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'SEC'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-WTIME-HHMMSS999(5:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LYYMMDD'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(3:6)     TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LDATE'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(3:6)     TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LYR4'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(1:4)     TO WS-VALUE\n081113     MOVE +4                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LYR2'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(3:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LMON'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(5:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LDAY'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-LGREG-YYYYMMDD(7:2)     TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LWDAY'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     EVALUATE WS-LDOW-NUM\n081113       WHEN 1      MOVE 'SUN'        TO WS-VALUE\n081113       WHEN 2      MOVE 'MON'        TO WS-VALUE\n081113       WHEN 3      MOVE 'TUE'        TO WS-VALUE\n081113       WHEN 4      MOVE 'WED'        TO WS-VALUE\n081113       WHEN 5      MOVE 'THU'        TO WS-VALUE\n081113       WHEN 6      MOVE 'FRI'        TO WS-VALUE\n081113       WHEN 7      MOVE 'SAT'        TO WS-VALUE\n081113     END-EVALUATE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LJDAY'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-LJUL-YYYYJJJ(5:3)       TO WS-VALUE\n081113     MOVE +3                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LHHMMSS'                  TO WS-NAME\n081113     MOVE +7                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(1:6)    TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LTIME'                    TO WS-NAME\n081113     MOVE +5                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(1:6)    TO WS-VALUE\n081113     MOVE +6                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LHR'                      TO WS-NAME\n081113     MOVE +3                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(1:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LMIN'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(3:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113\n081113     MOVE 'LSEC'                     TO WS-NAME\n081113     MOVE +4                         TO WS-NAME-LEN\n081113     MOVE WS-LTIME-HHMMSS999(5:2)    TO WS-VALUE\n081113     MOVE +2                         TO WS-VALUE-LEN\n081113     PERFORM 8810-ADD-SA-ENTRY                     THRU 8810-EXIT\n081113     .\n081113 1500-EXIT. EXIT.\n      *****************************************************************\n       1600-GET-JESJCL.\n      *****************************************************************\n      *    THIS ROUTINE CALLS SDSF TO PRINT THE JESJCL TO A FILE\n      *****************************************************************\n           MOVE '1600-GET-JESJCL'          TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      * ALLOCATE ISFIN\n           MOVE SPACES                     TO WS-IKJEFT-BUFFER\n           STRING 'ALLOC DD(ISFIN) '                DELIMITED BY SIZE\n                  'DSORG(PS) LRECL(80) BLKSIZE(0) RECFM(F B) '\n                                                    DELIMITED BY SIZE\n                  'UNIT(SYSDA) SPACE(1,1) TRACKS '  DELIMITED BY SIZE\n                  'NEW DELETE'                      DELIMITED BY SIZE\n                                         INTO WS-IKJEFT-BUFFER\n           END-STRING\n           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n\n      * FILL ISFIN WITH DATA\n           MOVE WS-JOBNAME                 TO WS-ISFIN-JOBNM\n090505     MOVE WS-JOBID                   TO WS-ISFIN-JOBID\n\n           OPEN OUTPUT ISFIN-FILE\n\n           PERFORM VARYING ISFX FROM 1 BY 1\n           UNTIL ISFX > WS-ISFX-MAX\n             IF  WS-DEBUG-JESJCL\n             AND WS-DEBUG-INPUT\n               DISPLAY WS-ISFIN(ISFX)\n             END-IF\n             WRITE FD-ISFIN-REC          FROM WS-ISFIN(ISFX)\n           END-PERFORM\n\n           CLOSE ISFIN-FILE\n\n      * ALLOCATE ISFOUT\n           MOVE 'ALLOC DD(ISFOUT) DUMMY'   TO WS-IKJEFT-BUFFER\n           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n\n      * ALLOCATE JESJCL\n           MOVE SPACES                     TO WS-IKJEFT-BUFFER\n           STRING 'ALLOC DD(OUTJCL) '               DELIMITED BY SIZE\n                  'DSORG(PS) LRECL(133) BLKSIZE(0) RECFM(F B A) '\n                                                    DELIMITED BY SIZE\n                  'UNIT(SYSDA) SPACE(1,1) TRACKS '  DELIMITED BY SIZE\n                  'NEW DELETE '                     DELIMITED BY SIZE\n                                         INTO WS-IKJEFT-BUFFER\n           END-STRING\n           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n\n      * CALL SDSF\n           MOVE 'SDSF DA'                  TO WS-IKJEFT-BUFFER\n           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n\n      * FREE ISFIN\n           MOVE 'FREE DD(ISFIN)'           TO WS-IKJEFT-BUFFER\n           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n\n      * FREE ISFOUT\n           MOVE 'FREE DD(ISFOUT)'          TO WS-IKJEFT-BUFFER\n           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n           .\n       1600-EXIT. EXIT.\n      *****************************************************************\n       1700-PARSE-JESJCL.\n      *****************************************************************\n      *    THIS ROUTINE PARSES THE JESJCL TO FIND THE SYMBOL VALUES\n      *****************************************************************\n      *    ALTHOUGH WE ARE ONLY INTERESTED IN SET, EXEC, PROC & PEND\n      *    JCL CARDS, WE HAVE TO PARSE ALL OF THE CARDS TO PROPERLY\n      *    DETECT AND HANDLE COMMENT CONTINUATION CARDS, WHICH COULD\n      *    MAKE OTHERWISE VALID JCL CARDS ACTUALLY BE COMMENTS.\n      *****************************************************************\n           MOVE '1700-PARSE-JESJCL'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      * OPEN JESJCL\n           OPEN INPUT JESJCL-FILE\n           MOVE ZERO                       TO WS-JESJCL-CNT\n\n           IF WS-DEBUG-JESJCL\n             DISPLAY '*************************************************'\n             DISPLAY '*****             JESJCL FOLLOWS            *****'\n             DISPLAY '*************************************************'\n           END-IF\n\n           MOVE 'N'                        TO WS-JESJCL-EOF-SW\n           PERFORM UNTIL WS-JESJCL-EOF\n\n             READ JESJCL-FILE\n               AT END   MOVE 'Y'           TO WS-JESJCL-EOF-SW\n               NOT AT END\n                 ADD +1                    TO WS-JESJCL-CNT\n\n                 IF (JESJCL-DATA(1:2) = '//' OR 'XX' OR '++')\n                 AND JESJCL-DATA(3:1) NOT = '*'\n                   PERFORM 1710-PARSE-JCL-LINE           THRU 1710-EXIT\n                 END-IF\n             END-READ\n           END-PERFORM\n\n           IF WS-DEBUG-JESJCL\n             DISPLAY '*************************************************'\n             DISPLAY '*****               END JESJCL              *****'\n             DISPLAY '*************************************************'\n           END-IF\n\n           CLOSE JESJCL-FILE\n\n      * FREE JESJCL\n           MOVE 'FREE DD(OUTJCL)'          TO WS-IKJEFT-BUFFER\n           PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n\n      * IF NO JESJCL LINES SET RETURN CODE TO 12\n           IF WS-JESJCL-CNT = ZERO\n             DISPLAY '**** ERROR - JESJCL NOT FOUND WITHIN SDSF'\n             DISPLAY '**** THE JESJCL DATA COULD NOT BE READ TO'\n                     ' OBTAIN THE SYMBOLIC VARIABLE VALUES.  SYMBOL'\n                     ' SUBSTITUTION INCOMPLETE.'\n             MOVE 12                           TO WS-LASTCC\n             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n           END-IF\n           .\n       1700-EXIT. EXIT.\n      ******************************************************************\n       1710-PARSE-JCL-LINE.\n      ******************************************************************\n      *    THIS ROUTINE PARSES AND PROCESSES A JCL LINE\n      ******************************************************************\n           MOVE '1710-PARSE-JCL-LINE'      TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           IF  WS-DEBUG-JESJCL\n           AND WS-DEBUG-INPUT\n             DISPLAY JESJCL-DATA\n           END-IF\n\n           MOVE JCUR-CONTINUED-SW          TO JPRV-CONTINUED-SW\n           MOVE SPACES                     TO JCUR-CONTINUED-SW\n\n      *    IF THIS IS THE START OF A NEW JCL CARD, CLEAR THE JDATA\n           IF JPRV-CONTINUED-SW = SPACES\n080310       MOVE JOPER                    TO JPRV-OPER\n             MOVE SPACES                   TO JID\n             MOVE SPACES                   TO JNAME\n             MOVE SPACES                   TO JOPER\n             MOVE SPACES                   TO JPARAM\n             MOVE ZERO                     TO JPLEN\n           END-IF\n\n      *    IF PREVIOUS LINE ENDED WITH A CONTINUED COMMENT, THEN THIS\n      *    ENTIRE LINE IS ALSO A COMMENT, SO WE WILL DISCARD IT.\n      *    WE ONLY NEED TO KNOW IF IT IS ALSO A CONTINUED COMMENT.\n           IF JPRV-CONTINUED-COMMENT\n             IF JESJCL-DATA(JDATAMAX:1) NOT = SPACES\n               MOVE 'C'                    TO JCUR-CONTINUED-SW\n             END-IF\n             GO TO 1710-EXIT\n           END-IF\n\n      *    ALL JCL LINES MUST BE PARSED TO FIND COMMENT CONTINUATIONS\n      *    WHICH CAN CAUSE OTHERWISE VALID JCL TO BECOME COMMENT LINES\n           MOVE SPACES                     TO JESJCL-SEQNO\n           MOVE ZERO                       TO JEX\n\n           PERFORM VARYING JPHASE FROM 1 BY 1\n           UNTIL JPHASE > 4\n\n             PERFORM 1711-PARSE-JCL-NODE                 THRU 1711-EXIT\n\n             EVALUATE JPHASE\n               WHEN 1\n      *          IF IT IS A NEW JCL CARD, SAVE THE NAME\n                 IF JPRV-CONTINUED-SW = SPACES\n                   MOVE JESJCL-DATA(JSX:2) TO JID\n                   COMPUTE JLX = (JEX - JSX) - 1\n                   IF JLX > ZERO\n                     MOVE JESJCL-DATA(JSX + 2:JLX)\n                                           TO JNAME\n                   END-IF\n                 END-IF\n               WHEN 2\n      *          IF IT IS A NEW JCL CARD, SAVE THE OPER\n                 COMPUTE JLX = (JEX - JSX) + 1\n                 IF JPRV-CONTINUED-SW = SPACES\n                 AND JLX > ZERO\n                   MOVE JESJCL-DATA(JSX:JLX)\n                                           TO JOPER\n                 END-IF\n      *        CONCAT THE PARAM DATA FOR THE CARDS\n               WHEN 3\n                 COMPUTE JLX = (JEX - JSX) + 1\n                 IF JLX > ZERO\n                   MOVE JESJCL-DATA(JSX:JLX)\n                                           TO JPARAM(JPLEN + 1:JLX)\n                   ADD JLX                 TO JPLEN\n                 END-IF\n               WHEN OTHER\n                 CONTINUE\n             END-EVALUATE\n           END-PERFORM\n\n      *    IF CARD ENDED WITH A CONTINUED QUOTE, DO NOT PROCESS IT YET.\n      *    WAIT UNTIL THE QUOTED DATA IS COMPLETE.\n           IF NOT JCUR-CONTINUED-QUOTE\n             PERFORM 2000-PROCESS-JCL-PARAM              THRU 2000-EXIT\n             MOVE SPACES                   TO JPARAM\n             MOVE ZERO                     TO JPLEN\n           END-IF\n           .\n       1710-EXIT. EXIT.\n      ******************************************************************\n       1711-PARSE-JCL-NODE.\n      ******************************************************************\n      *    THIS ROUTINE PARSES OFF THE NEXT NODE ON THE JCL LINE\n      ******************************************************************\n           MOVE '1711-PARSE-JCL-NODE'      TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           COMPUTE JSX = JEX + 1\n\n      *    IF PREV LINE WAS CONTINUED, THERE WILL NOT BE AN OPER NODE\n           IF  JPHASE = 2\n           AND (JPRV-CONTINUED-JCL\n             OR JPRV-CONTINUED-QUOTE)\n               GO TO 1711-EXIT\n           END-IF\n\n      *    ALL WE NEED TO KNOW ABOUT COMMENTS IS CONTINUATION\n           IF JPHASE = 4\n      *      IF THIS CARD NOT ALREADY CONTINUED BY PARAM OR QUOTES,\n      *      IT CAN BE CONTINUED BY COMMENTS IN COLUMN 72\n             IF  JCUR-CONTINUED-SW = SPACES\n             AND JESJCL-DATA(JDATAMAX:1) NOT = SPACES\n               MOVE 'C'                    TO JCUR-CONTINUED-SW\n             END-IF\n             GO TO 1711-EXIT\n           END-IF\n\n      *    IF LOOKING FOR CONTINUED QUOTES, START AT COL 16\n           IF  JPHASE = 3\n           AND JPRV-CONTINUED-QUOTE\n             MOVE 16                       TO JSX\n             MOVE 'Y'                      TO JIN-QUOTES-SW\n           ELSE\n      *    ELSE REMOVE LEADING SPACES FROM START OF NODE\n             PERFORM VARYING JSX FROM JSX BY 1\n               UNTIL JSX >= JDATAMAX\n               OR JESJCL-DATA(JSX:1) NOT = ' '\n             END-PERFORM\n           END-IF\n\n           IF  WS-DEBUG-JESJCL\n           AND WS-DEBUG-PARSING\n             DISPLAY 'OLD JEX=<' JEX '> JSX=<' JSX '>'\n           END-IF\n\n      *    FIND END OF NODE\n           MOVE 'N'                        TO JEND-NODE-SW\n\n           PERFORM VARYING JEX FROM JSX BY 1\n           UNTIL JEX >= JDATAMAX\n           OR JEND-NODE\n\n      *      LOOK FOR END OF QUOTED STRING, ALLOW FOR DOUBLE QUOTES\n             IF JIN-QUOTES\n               IF JESJCL-DATA(JEX:1) = ''''\n                 ADD 1                     TO JEX\n                 IF JESJCL-DATA(JEX:1) NOT = ''''\n                 OR JEX >= JDATAMAX\n                   MOVE 'N'                TO JIN-QUOTES-SW\n                 END-IF\n               END-IF\n             END-IF\n\n      *      LOOK FOR BEGIN OF QUOTED STRING OR END OF PARAM\n             IF    JEX < JDATAMAX\n             AND NOT JIN-QUOTES\n               EVALUATE JESJCL-DATA(JEX:1)\n                 WHEN ''''\n                   MOVE 'Y'                TO JIN-QUOTES-SW\n                 WHEN ' '\n                   MOVE 'Y'                TO JEND-NODE-SW\n                   SUBTRACT 1            FROM JEX\n                   IF JESJCL-DATA(JEX:1) = ','\n                     MOVE 'J'              TO JCUR-CONTINUED-SW\n                   END-IF\n                   SUBTRACT 1             FROM JEX\n                 WHEN OTHER\n                   CONTINUE\n               END-EVALUATE\n             END-IF\n           END-PERFORM\n\n      *    IF END OF NODE NOT FOUND, DATA ENDED IN COL 71\n           IF NOT JEND-NODE\n             COMPUTE JEX = JDATAMAX - 1\n             EVALUATE TRUE\n               WHEN JIN-QUOTES\n                 MOVE 'Q'                  TO JCUR-CONTINUED-SW\n               WHEN JESJCL-DATA(JEX:1) = ','\n                 MOVE 'J'                  TO JCUR-CONTINUED-SW\n               WHEN OTHER\n                 CONTINUE\n             END-EVALUATE\n           END-IF\n           .\n       1711-EXIT. EXIT.\n      ******************************************************************\n091020 1800-DISPLAY-SYMBOLS.\n      ******************************************************************\n      *    THIS ROUTINE DISPLAYS THE SYMBOLS THAT ARE IN USE\n      ******************************************************************\n091020     MOVE '1800-DISPLAY-SYMBOLS'     TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    FIND THE LENGTH OF THE LONGEST NAME, MINIMUM OF 6 FOR HEADER\n           MOVE +6                         TO WS-LEN\n           PERFORM VARYING SAX FROM 1 BY 1\n           UNTIL SAX > SA-CNT\n             IF SA-NAME-LEN (SAX) > WS-LEN\n               MOVE SA-NAME-LEN (SAX)      TO WS-LEN\n             END-IF\n           END-PERFORM\n\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '**** THE FOLLOWING SUBSTITUTION VALUES '\n                   'ARE AVAILABLE TO USE:'\n           DISPLAY '****************************************'\n                   '****************************************'\n081113     MOVE 'SYMBOL'                   TO WS-NAME\n081113     DISPLAY 'SOURCE OF VALUE     '\n081113       WS-NAME(1:WS-LEN) '    VALUE'\n\n           PERFORM VARYING SAX FROM 1 BY 1\n           UNTIL SAX > SA-CNT\n081113       EVALUATE TRUE\n081113         WHEN SA-LVL-BUILTIN-SYMBOL    (SAX)\n091020           MOVE SPACES               TO WS-VALUE-SOURCE\n091020           STRING PGM-NAME              DELIMITED BY SPACES\n091020                  ' BUILTIN'            DELIMITED BY SIZE\n091020                                   INTO WS-VALUE-SOURCE\n081113         WHEN SA-LVL-STATIC-SYMBOL     (SAX)\n081113           MOVE 'SYSTEM STATIC   '   TO WS-VALUE-SOURCE\n081113         WHEN SA-LVL-DYNAMIC-SYMBOL    (SAX)\n081113           MOVE 'SYSTEM DYNAMIC  '   TO WS-VALUE-SOURCE\n081113         WHEN SA-LVL-BASE-JCL-VALUE    (SAX)\n081113           MOVE 'JCL SET STMT    '   TO WS-VALUE-SOURCE\n081113         WHEN SA-LVL-DFLT-PROC-VALUE (SAX)\n081113           MOVE 'PROC DEFAULT    '   TO WS-VALUE-SOURCE\n081113         WHEN SA-LVL-EXEC-PROC-VALUE (SAX)\n081113           MOVE 'EXEC PROC STMT  '   TO WS-VALUE-SOURCE\n081113         WHEN SA-LVL-PARM-OVERRIDE     (SAX)\n081113           MOVE 'PARM OVERRIDE   '   TO WS-VALUE-SOURCE\n081113         WHEN OTHER\n081113           STRING 'UNK:LVL-IND=\"'       DELIMITED BY SIZE\n081113                  SA-LVL-IND(SAX)       DELIMITED BY SIZE\n081113                  '\"'                   DELIMITED BY SIZE\n081113                                   INTO WS-VALUE-SOURCE\n081113       END-EVALUATE\n081113\n081113       DISPLAY WS-VALUE-SOURCE               ' | &'\n081113         SA-NAME (SAX)(1:WS-LEN)             ' | <'\n               SA-VALUE(SAX)(1:SA-VALUE-LEN(SAX))  '>'\n           END-PERFORM\n\n           DISPLAY '****************************************'\n                   '****************************************'\n           .\n091020 1800-EXIT. EXIT.\n      ******************************************************************\n       2000-PROCESS-JCL-PARAM.\n      ******************************************************************\n      *    THIS ROUTINE PROCESSES THE JCL PARAM DATA THAT WAS PARSED\n      ******************************************************************\n           MOVE '2000-PROCESS-JCL-PARAM'   TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           IF WS-DEBUG-JESJCL\n             DISPLAY JPRV-CONTINUED-SW\n                     JCUR-CONTINUED-SW ' '\n                     JID ' ' JNAME ' ' JOPER ' <' JPARAM(1:JPLEN) '>'\n           END-IF\n\n080310*    IF THIS IS THE FIRST LINE OF A NEW JCL CARD AND THE PREVIOUS\n080310*    CARD WAS A PROC DEFINITION, RESET PROC VALUE LEVELS TO BASE\n080310*    JCL TO HANDLE SETS WITHIN PROC AND NEXT EXEC PROC STATEMENT\n080310     IF JPRV-CONTINUED-SW = SPACES\n080310     AND JPRV-OPER = 'PROC'\n080310       PERFORM VARYING SAX FROM 1 BY 1\n080310         UNTIL SAX > SA-CNT\n081113           IF SA-LVL-DFLT-PROC-VALUE(SAX)\n081113           OR SA-LVL-EXEC-PROC-VALUE(SAX)\n081113             SET SA-LVL-BASE-JCL-VALUE(SAX)\n081113                                     TO TRUE\n080310           END-IF\n080310       END-PERFORM\n080310     END-IF\n\n      *    IF WE WERE WITHIN A PROC, AND THIS IS NOW THE FIRST CARD\n081107*    OF A MAIN JCL CARD, AND NOT A PROC OVERRIDE CARD, CLEAR THE\n      *    WITHIN PROC SWITCH AND RESTORE THE SYMBOLS TO THE VALUES\n      *    THAT WERE SAVED BEFORE THE EXEC PROC STATEMENT\n           IF  WS-WITHIN-PROC-SW = 'Y'\n           AND JPRV-CONTINUED-SW = SPACES\n           AND JID = '//'\n081107       PERFORM VARYING WS-LX FROM 1 BY 1\n081107         UNTIL WS-LX > LENGTH OF JNAME\n081107         OR    JNAME(WS-LX:1) = '.'\n081107       END-PERFORM\n081107       IF WS-LX > LENGTH OF JNAME\n               MOVE 'N'                    TO WS-WITHIN-PROC-SW\n               MOVE 'N'                    TO WS-NESTED-PROC-SW\n               MOVE SS-SAVE-AREA           TO SA-ARRAY-AREA\n081107       END-IF\n           END-IF\n\n      *    HERE IS WHERE WE DETERMINE IF WE NEED TO USE THIS DATA\n      *    TO UPDATE THE SYMBOL TABLE\n           EVALUATE JOPER\n             WHEN 'SET'\n      *        IGNORE SET STATEMENTS DURING INSTREAM PROC DEFINITIONS\n               IF JINSTREAM-PROC\n                 CONTINUE\n               ELSE\n                 IF JPLEN > ZERO\n      *            SET VALUE LEVEL FOR JCL SET STATEMENT SYMBOLS.\n      *            PROC DEFS, EXECS, AND PARMS WILL OVERLAY THEM\n081113             SET WS-LVL-BASE-JCL-VALUE\n081113                                     TO TRUE\n                   MOVE JPLEN              TO WS-INPUT-PARMS-LEN\n                   MOVE JPARAM(1:JPLEN)    TO WS-INPUT-PARMS\n                   PERFORM 5000-PROCESS-PARMS            THRU 5000-EXIT\n                 END-IF\n               END-IF\n\n             WHEN 'PROC'\n      *        IF // IT'S AN INSTREAM PROC DEFINITION, JUST SET SWITCH\n               IF JID = '//'\n                 MOVE 'Y'                  TO JINSTREAM-PROC-SW\n      *        ELSE IT'S EXECUTION OF PROC DEF, PROCESS THE SYMBOLS\n               ELSE\n                 IF JPLEN > ZERO\n      *            SET VALUE LEVEL FOR SYMBOLS ON PROC DEFINITION.\n      *            EXECS AND PARMS WILL OVERLAY THEM\n081113             SET WS-LVL-DFLT-PROC-VALUE\n081113                                     TO TRUE\n                   MOVE JPLEN              TO WS-INPUT-PARMS-LEN\n                   MOVE JPARAM(1:JPLEN)    TO WS-INPUT-PARMS\n                   PERFORM 5000-PROCESS-PARMS            THRU 5000-EXIT\n                 END-IF\n               END-IF\n\n             WHEN 'PEND'\n      *        CHECK FOR END OF INSTREAM PROC DEFINITION\n               IF  JID = '//'\n               AND JPRV-CONTINUED-SW = SPACES\n               AND JINSTREAM-PROC\n                 MOVE 'N'                  TO JINSTREAM-PROC-SW\n               END-IF\n\n             WHEN 'EXEC'\n090505         PERFORM 2100-HANDLE-EXEC-CARD             THRU 2100-EXIT\n\n      *      IGNORE ALL JCL CARD TYPES EXCEPT SET, EXEC, PROC & PEND\n             WHEN OTHER\n               CONTINUE\n\n           END-EVALUATE\n           .\n       2000-EXIT. EXIT.\n090505******************************************************************\n090505 2100-HANDLE-EXEC-CARD.\n090505******************************************************************\n090505*    THIS ROUTINE HANDLES JCL EXEC CARDS\n090505******************************************************************\n090505     MOVE '2100-HANDLE-EXEC-CARD'    TO WS-PARAGRAPH-NAME\n090505     IF WS-DEBUG-TRACE\n090505       DISPLAY                          WS-PARAGRAPH-NAME\n090505     END-IF\n\n      *    IGNORE EXEC STATEMENTS DURING INSTREAM PROC DEFINITION\n           IF JINSTREAM-PROC\n             GO TO 2100-EXIT\n           END-IF\n\n090505     IF JPRV-CONTINUED-SW = SPACES\n             IF (JPLEN > 3 AND JPARAM(1:4) = 'PGM=')\n             OR (JPLEN > 1 AND JPARAM(1:2) = '*.')\n             OR (JPLEN > 6 AND JPARAM(1:7) = 'JCLTEST')\n             OR (JPLEN > 6 AND JPARAM(1:7) = 'JSTTEST')\n090505         SET JEXEC-TYPE-PGM          TO TRUE\n090505       ELSE\n090505         SET JEXEC-TYPE-PROC         TO TRUE\n090505       END-IF\n090505     END-IF\n\n      *    HANDLE EXEC STATEMENTS THAT EXECUTE PGMS\n090505     IF JEXEC-TYPE-PGM\n             IF JPRV-CONTINUED-SW = SPACES\n      *        IF THIS IS THE STEP THAT IS EXECUTING THIS PGM,\n      *        SET EOF ON THE JESJCL, WE ARE DONE WITH THE JCL!\n               ADD +1                      TO JSTEPNO\n               IF JSTEPNO = WS-STEPNUM\n                 MOVE 'Y'                  TO WS-JESJCL-EOF-SW\n               ELSE\n      *          IF THE FIRST STEP IN THE NESTED PROC WORLD IS NOT\n      *          THIS PROGRAM, FLIP THE SWITCH FULLY ON\n                 IF WS-NESTED-PROC-SW = '1'\n                   MOVE 'Y'                TO WS-NESTED-PROC-SW\n                 END-IF\n               END-IF\n             END-IF\n\n      *    HANDLE EXEC STATEMENTS THAT EXECUTE PROCS\n           ELSE\n      *      IF THIS IS THE FIRST CARD OF AN EXEC PROC,\n      *      REMOVE EVERYTHING UP TO THE FIRST COMMA OR BLANK\n      *      BECAUSE IT IS THE NAME OF THE PROC, NOT A SYMBOL.\n             IF JPRV-CONTINUED-SW = SPACES\n               IF JID = '//'\n      *          AT START OF AN EXEC PROC FROM MAIN JCL, SAVE THE\n      *          SYMBOLS SO THEY CAN BE RESTORED AFTER THE PROC\n                 MOVE 'Y'                  TO WS-WITHIN-PROC-SW\n                 MOVE SA-ARRAY-AREA        TO SS-SAVE-AREA\n               ELSE\n      ******************************************************************\n      *****              WARNING - DRAGONS BE HERE!                *****\n      *****        ALL YE WHO ENTER HERE ABANDON ALL HOPE!         *****\n      *****  YE HAVE NOW ENTERED THE NETHER WORLD OF NESTED PROCS  *****\n      *****        FROM WHENCE THERE IS NO DETECTABLE END!         *****\n      ******************************************************************\n      * WHEN WE ENTER THE FIRST PROC FROM THE MAIN JCL WE SAVE THE\n      * STATE OF THE SYMBOLS AND WE RESTORE THEM WHEN WE RETURN TO THE\n      * MAIN JCL, WE WOULD LIKE TO DO THE SAME WITH EACH NESTED PROC.\n      *\n      * THE PROBLEM WE HAVE WITH NESTED PROCS IS THAT WE CANNOT TELL\n      * WHERE A NESTED PROC ENDS.  SINCE WE CANNOT TELL WHERE THE PROC\n      * ENDS WE CANNOT TELL IF SUBSEQUENT PROC STATEMENTS ARE NESTED\n      * DEEPER OR ARE AT THE SAME LEVEL, WHICH STEPS ARE EXECUTED IN\n      * WHICH PROCS, WHAT THE SCOPE OF THE SYMBOLS ARE, ETC., ETC.\n      *\n      * SYMBOL VALUES THAT ARE CHANGED BY THE \"EXEC\" STATEMENT OR THE\n      * NESTED PROCS \"PROC\" STATEMENT OR BY ANY \"SET\" STATEMENTS WITHIN\n      * THE NESTED PROC ARE LIMITED IN SCOPE TO WITHIN THAT PROC AND\n      * ANY DEEPER NESTED PROCS.  SINCE WE CANNOT TELL WHERE THE NESTED\n      * PROC ENDS, WE HAVE NO WAY TO DETERMINE WHEN TO RESTORE THE\n      * VALUES TO THEIR FORMER STATES.\n      *\n      * THE ONE CASE WHERE WE KNOW WE ARE SAFE WITHIN NESTED PROCS IS\n      * WHEN WE ARE THE FIRST PROGRAM EXECUTED WITHIN THE FIRST NESTED\n      * PROC.  IN THIS CASE WE KNOW THAT WE ARE INTENDED TO RECEIVE THE\n      * ALTERED SYMBOL VALUES.  WE WILL ALLOW FOR THIS SPECIAL CASE.\n      *\n      * THE BEST WE CAN DO FOR THE OTHER CASES IS TO TRACK VALUES THAT\n      * GET CHANGED AND MONITOR TO SEE IF WE ACTUALLY USE ANY OF THOSE\n      * CHANGED VALUES BEFORE THEY GET RESTORED BY RETURNING TO THE\n      * MAIN JCL.  IF THEY ARE USED, WE WILL ISSUE A HIGHLY DETAILED\n      * WARNING MESSAGE PROVIDING THE USER INSTRUCTIONS FOR A\n      * WORK-AROUND AND SET THE RETURN CODE TO 8.\n      ******************************************************************\n      *                SET FLAG FOR POTENTIAL WARNING THAT SYMBOLIC\n      *                VALUES MAY BE INCORRECT.  WE SET IT TO \"1\" SO WE\n      *                CAN DETECT IF WE ARE THE FIRST PGM IN THE NESTED\n      *                PROC WORLD, IF NOT WE CHANGE IT TO \"Y\" LATER.\n                 MOVE '1'                  TO WS-NESTED-PROC-SW\n               END-IF\n               PERFORM VARYING WS-BX FROM 1 BY 1\n                 UNTIL WS-BX > JPLEN\n                    OR JPARAM(WS-BX:1) = (',' OR ' ')\n               END-PERFORM\n               ADD +1                      TO WS-BX\n               COMPUTE WS-LX = (JPLEN - WS-BX) + 1\n             ELSE\n               MOVE 1                      TO WS-BX\n               MOVE JPLEN                  TO WS-LX\n             END-IF\n\n             IF WS-LX > ZERO\n      *        SET LEVEL FOR SYMBOLS ON EXEC PROC STATEMENTS.\n      *        ONLY PARMS OVERRIDE THEM\n081113         SET WS-LVL-EXEC-PROC-VALUE  TO TRUE\n               MOVE WS-LX                  TO WS-INPUT-PARMS-LEN\n               MOVE JPARAM(WS-BX:WS-LX)    TO WS-INPUT-PARMS\n               PERFORM 5000-PROCESS-PARMS                THRU 5000-EXIT\n             END-IF\n           END-IF\n090505     .\n090505 2100-EXIT. EXIT.\n100313******************************************************************\n100313 3000-PROCESS-LIBR-FILE.\n100313******************************************************************\n100313*    THIS ROUTINE PROCESSES ONE LIBR FILE\n100313******************************************************************\n100313     MOVE '3000-PROCESS-LIBR-FILE' TO WS-PARAGRAPH-NAME\n100313     IF WS-DEBUG-TRACE\n100313       DISPLAY                          WS-PARAGRAPH-NAME\n100313     END-IF\n100313\n110222     PERFORM 3010-LOAD-MEMBER-MASKS                THRU 3010-EXIT\n110222\n110222     IF MSK-CNT > ZERO\n100313       MOVE DDNAME-OUT(DDX)          TO LIBR-SRCH-DDNAME\n100313       PERFORM 3100-GET-LIBR-DSNS                  THRU 3100-EXIT\n100313       IF LIBR-CNT > 1\n100313         DISPLAY '**** ERROR - OUTPUT LIBRARY IS A CONCATENATION'\n100313                 ' - DDNAME=' DDNAME-OUT(DDX)\n100313         DISPLAY '**** PLEASE CORRECT THE JCL AND RERUN.'\n100313         MOVE 20                     TO WS-LASTCC\n100313         PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT\n100313       ELSE\n100313         MOVE LIBR-DSN(1)            TO MEM-DSN-OUT\n100313       END-IF\n100313\n100313       MOVE DDNAME-IN(DDX)           TO LIBR-SRCH-DDNAME\n100313       PERFORM 3100-GET-LIBR-DSNS                  THRU 3100-EXIT\n100313       IF LIBR-CNT > LIBR-MAX\n100313         DISPLAY '**** ERROR - TOO MANY DATASETS ON DD '\n100313                 DDNAME-IN(DDX)\n100313                 ' - CNT=' LIBR-CNT\n100313                 ' MAX=' LIBR-MAX\n100313         DISPLAY '**** THE EXCESS DATASETS WILL BE IGNORED.'\n100313                 '  SOME INPUT MEMBERS MAY NOT BE FOUND.'\n100313         MOVE 12                     TO WS-LASTCC\n100313         PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT\n100313       END-IF\n100313     END-IF\n100313\n110222     MOVE ZERO                       TO MEMX\n110222     MOVE ZERO                       TO MEM-CNT\n100313\n100313     PERFORM VARYING LIBRX FROM 1 BY 1\n100313     UNTIL LIBRX > LIBR-CNT\n100313       PERFORM 3300-SEARCH-LIBR-FOR-MEMS           THRU 3300-EXIT\n100313     END-PERFORM\n110222\n110222     PERFORM VARYING MSKX FROM 1 BY 1\n110222     UNTIL MSKX > MSK-CNT\n110222       IF MSK-MEM-CNT(MSKX) = ZERO\n110222         DISPLAY '**** ERROR - NO MEMBERS MATCHING '\n110222                 MSK-MASK(MSKX)\n110222                 ' WERE FOUND IN DD ' DDNAME-IN(DDX)\n110222         MOVE 8                      TO WS-LASTCC\n110222         PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT\n110222       END-IF\n110222     END-PERFORM\n110222\n110222     IF MEM-CNT >= MEM-MAX\n110222       DISPLAY '**** ERROR - TOO MANY MATCHING MEMBERS FOUND '\n110222               ' IN DD ' DDNAME-IN(DDX)\n110222       DISPLAY '**** CNT=' MEMX ' MAX=' MEM-MAX\n110222               ' - THE EXCESS MEMBERS WILL BE IGNORED.'\n110222       MOVE MEM-MAX                  TO MEM-CNT\n110222       MOVE 8                        TO WS-LASTCC\n110222       PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n110222     END-IF\n110222\n110222     PERFORM 3500-PROCESS-LIBR-MEMBER              THRU 3500-EXIT\n110222       VARYING MEMX FROM 1 BY 1\n110222       UNTIL MEMX > MEM-CNT\n100313     .\n100313 3000-EXIT. EXIT.\n110222******************************************************************\n110222 3010-LOAD-MEMBER-MASKS.\n110222******************************************************************\n110222*    THIS ROUTINE LOADS THE MEMBER MASK ARRAY\n110222******************************************************************\n110222     MOVE '3010-LOAD-MEMBER-MASKS'   TO WS-PARAGRAPH-NAME\n110222     IF WS-DEBUG-TRACE\n110222       DISPLAY                          WS-PARAGRAPH-NAME\n110222     END-IF\n110222\n110222* OPEN THE MEMLIST\n110222     CALL 'CHGDDNM' USING MEMLIST-FILE DDNAME-MEMS(DDX)\n110222     OPEN INPUT MEMLIST-FILE\n110222     MOVE 'N'                        TO MEMLIST-EOF-SW\n110222\n110222* READ THE FIRST MEMLIST RECORD\n110222     PERFORM 8100-READ-MEMLIST                     THRU 8100-EXIT\n110222\n110222     MOVE ZERO                       TO MSK-CNT\n110222\n110222     PERFORM UNTIL MEMLIST-EOF\n110222       MOVE 1                        TO MEMEND\n110222       PERFORM UNTIL MEMEND > LENGTH OF FD-MEMLIST-REC\n110222*        FIND START OF MEMBER MASK\n110222         PERFORM VARYING MEMBEG FROM MEMEND BY 1\n110222           UNTIL MEMBEG > LENGTH OF FD-MEMLIST-REC\n110222           OR NOT (FD-MEMLIST-REC(MEMBEG:1) = ',' OR SPACES)\n110222         END-PERFORM\n110222*        FIND END OF MEMBER MASK\n110222         MOVE ZERO                   TO MEMLEN\n110222         PERFORM VARYING MEMEND FROM MEMBEG BY 1\n110222           UNTIL MEMEND > LENGTH OF FD-MEMLIST-REC\n110222           OR (FD-MEMLIST-REC(MEMEND:1) = ',' OR SPACES)\n110222             ADD +1                  TO MEMLEN\n110222         END-PERFORM\n110222*        IF MEMBER MASK FOUND\n110222         IF MEMLEN > ZERO\n110222           IF MEMLEN > LENGTH OF MEM-MASK\n110222             DISPLAY '**** ERROR: MEMBER MASK '\n110222                     FD-MEMLIST-REC(MEMBEG:MEMLEN)\n110222                     ' TOO LONG - TRUNCATED TO '\n110222                     LENGTH OF MEM-MASK ' CHARACTERS'\n110222             MOVE 8                  TO WS-LASTCC\n110222             PERFORM 9998-HANDLE-LASTCC            THRU 9998-EXIT\n110222           END-IF\n110222           ADD +1                    TO MSK-CNT\n110222           IF MSK-CNT <= MSK-MAX\n110222             MOVE FD-MEMLIST-REC(MEMBEG:MEMLEN)\n110222                                     TO MSK-MASK    (MSK-CNT)\n110222             MOVE ZERO               TO MSK-MEM-CNT (MSK-CNT)\n110222             MOVE MSK-CNT            TO MSKX\n110222             PERFORM 3011-SPLIT-MASK-PARTS         THRU 3011-EXIT\n110222           END-IF\n110222         END-IF\n110222       END-PERFORM\n110222\n110222       PERFORM 8100-READ-MEMLIST                   THRU 8100-EXIT\n110222     END-PERFORM\n110222\n110222     CLOSE MEMLIST-FILE\n110222\n110222     IF MSK-CNT >= MSK-MAX\n110222       DISPLAY '**** ERROR - TOO MANY MEMBER MASKS'\n110222               ' SPECIFIED IN DD ' DDNAME-MEMS(DDX)\n110222       DISPLAY '**** CNT=' MSK-CNT ' MAX=' MSK-MAX\n110222               ' - THE EXCESS MASKS WILL BE IGNORED.'\n110222       MOVE MSK-MAX                  TO MSK-CNT\n110222       MOVE 8                        TO WS-LASTCC\n110222       PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n110222     END-IF\n110222     .\n110222 3010-EXIT. EXIT.\n110222*****************************************************************\n110222 3011-SPLIT-MASK-PARTS.\n110222*****************************************************************\n110222*    SPLIT MASK INTO PARTS SEPARATED BY \"*\"\n110222*****************************************************************\n110222\n110222     MOVE MSK-MASK(MSKX)             TO MEM-MASK\n110222\n110222     MOVE ZERO                       TO MSK-PART-CNT(MSKX)\n110222     MOVE ZERO                       TO MSK-MIN-LEN\n110222     MOVE ZERO                       TO MPL\n110222     MOVE 1                          TO MPX\n110222     MOVE 1                          TO WS-BX\n110222     MOVE ZERO                       TO MSK-PART-LEN(MSKX MPX)\n110222     MOVE SPACES                     TO MSK-PART-TXT(MSKX MPX)\n110222\n110222     PERFORM VARYING WS-EX FROM LENGTH OF MEM-MASK BY -1\n110222       UNTIL WS-EX < 1\n110222       OR    MEM-MASK(WS-EX:1) NOT = SPACES\n110222     END-PERFORM\nTEST  *    DISPLAY 'MEM-MASK=<' MEM-MASK(1:WS-EX) '>'\n110222\n110222     PERFORM UNTIL WS-BX > WS-EX\n110222       EVALUATE TRUE\n110222*        IF CONSECUTIVE \"*\", IGNORE\n110222         WHEN WS-BX > 1\n110222         AND (MEM-MASK(WS-BX:1)     = '*')\n110222         AND (MEM-MASK(WS-BX - 1:1) = '*')\n110222           CONTINUE\n110222*        IF NON-CONSECUTIVE \"*\", START NEXT MP AND ADD \"*\"\n110222         WHEN (MEM-MASK(WS-BX:1) = '*')\n110222           IF MSK-PART-LEN(MSKX MPX) > ZERO\n110222             ADD 1                   TO MPX\n110222           END-IF\n110222           MOVE 1                    TO MPL\n110222           MOVE MPL                  TO MSK-PART-LEN(MSKX MPX)\n110222           MOVE '*'                  TO MSK-PART-TXT(MSKX MPX)\n110222           MOVE MPX                  TO MSK-PART-CNT(MSKX)\n110222*        IF OTHER CHARACTER, JUST ADD TO MP\n110222         WHEN OTHER\n110222           ADD 1                     TO MSK-MIN-LEN\n110222           ADD 1                     TO MPL\n110222           MOVE MPL                  TO MSK-PART-LEN(MSKX MPX)\n110222           MOVE MEM-MASK(WS-BX:1)    TO MSK-PART-TXT(MSKX MPX)\n110222                                                    (MPL:1)\n110222           MOVE MPX                  TO MSK-PART-CNT(MSKX)\n110222       END-EVALUATE\n110222       ADD 1                         TO WS-BX\n110222     END-PERFORM\n110222\n110222     IF MSK-MIN-LEN > 8\n110222       DISPLAY '**** ERROR - MASK ' MEM-MASK\n110222               ' REQUIRES A ' MSK-MIN-LEN ' CHARACTER MEMBER NAME'\n110222       DISPLAY '**** NO MEMBERS WILL MATCH THIS MASK'\n110222       MOVE 8                        TO WS-LASTCC\n110222       PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n110222     END-IF\nTEST  *\nTEST  *    PERFORM VARYING MPX FROM 1 BY 1\nTEST  *    UNTIL MPX > MSK-PART-CNT(MSKX)\nTEST  *      MOVE MSK-PART-LEN(MSKX MPX)   TO MPL\nTEST  *      DISPLAY 'MSK-PART-TXT=<' MSK-PART-TXT(MSKX MPX)(1:MPL) '>'\nTEST  *    END-PERFORM\n110222     .\n110222 3011-EXIT. EXIT.\n100313*****************************************************************\n100313 3100-GET-LIBR-DSNS.\n100313*****************************************************************\n100313* FIND DDNAMES AND ASSOCIATED DSNAMES\n100313* PSA -> TCB -> TIOT -> TIOT SEG -> SWAREQ(SVA) -> JFCB\n100313*****************************************************************\n100313\n100313     MOVE ZERO                       TO LIBR-CNT\n100313     MOVE SPACES                     TO LIBR-DDNAME\n100313     SET LIBR-MORE                   TO TRUE\n100313\n100313*    SET ADDRESSABILITY TO THE TIOT\n100313     SET ADDRESS OF PSA              TO NULL\n100313     SET ADDRESS OF TCB              TO PSA-PSATOLD\n100313     SET ADDRESS OF TIOT             TO TCB-TCBTIO\n100313\n100313*    WALK THE TIOT ENTRIES TO FIND THE I/O FILE DDNAMES\n100313     SET TIOE-PTR                    TO TCB-TCBTIO\n100313     ADD 24                          TO TIOE-PNUM\n100313     SET ADDRESS OF TIOENTRY         TO TIOE-PTR\n100313     PERFORM UNTIL TIOT-TIOELNGH = LOW-VALUES\n100313     OR LIBR-EOF\n100313       PERFORM 3110-SET-JFCB-ADDRESS             THRU 3110-EXIT\n100313       IF TIOT-TIOEDDNM > SPACES\nTEST  *        DISPLAY 'DDNAME=' TIOT-TIOEDDNM\n100313         MOVE TIOT-TIOEDDNM          TO LIBR-DDNAME\n100313       END-IF\nTEST  *      DISPLAY 'DSN=' JFCBDSNM\n100313       IF LIBR-DDNAME = LIBR-SRCH-DDNAME\n110222*        IF LIBRARY DSN IS ALREADY IN THE LIST, SKIP IT\n110222         PERFORM VARYING LIBRX FROM 1 BY 1\n110222           UNTIL LIBRX > LIBR-CNT\n110222           OR LIBR-DSN(LIBRX) = JFCBDSNM\n110222         END-PERFORM\n110222*        ELSE ADD IT TO THE LIBRARY DSN LIST\n110222         IF LIBRX > LIBR-CNT\n100313           ADD +1                    TO LIBR-CNT\n100313           IF LIBR-CNT <= LIBR-MAX\n100313             MOVE JFCBDSNM           TO LIBR-DSN(LIBR-CNT)\n100313           END-IF\n110222         END-IF\n100313       ELSE\n100313         IF LIBR-CNT > ZERO\n100313           SET LIBR-EOF              TO TRUE\n100313         END-IF\n100313       END-IF\n100313\n100313*      POINT TO NEXT DDNAME ENTRY IN TIOT\n100313       MOVE ZERO                     TO TIOE-LEN\n100313       MOVE TIOT-TIOELNGH            TO TIOE-LEN-CHAR(2:1)\n100313       ADD TIOE-LEN                  TO TIOE-PNUM\n100313       SET ADDRESS OF TIOENTRY       TO TIOE-PTR\n100313     END-PERFORM\n100313     .\n100313 3100-EXIT. EXIT.\n100313*****************************************************************\n100313 3110-SET-JFCB-ADDRESS.\n100313*****************************************************************\n100313\n100313     MOVE LOW-VALUES                 TO JFCB-POINT\n100313     MOVE TIOT-TIOEJFCB              TO JFCB-PTR-LO3\n100313     DIVIDE JFCB-PNUM BY 16      GIVING JFCB-HI-HEX\n100313                              REMAINDER JFCB-LO-HEX\n100313\n100313     IF JFCB-LO-HEX NOT = 15\n100313       COMPUTE JFCB-PNUM = JFCB-PNUM + 16\n100313     ELSE\n100313       SET ADDRESS OF JSCB           TO TCB-TCBJSCB\n100313       SET ADDRESS OF QMPI           TO JSCB-JSCBQMPI\n100313       SET QMAT-PTR                  TO QMPI-QMPIQMAT\n100313\n100313       PERFORM UNTIL JFCB-PNUM <= 65536\n100313         SET ADDRESS OF QMAT         TO QMAT-PTR\n100313         SET QMAT-PTR                TO QMAT-QMATNEXT\n100313         COMPUTE JFCB-PNUM = JFCB-PNUM - 65536\n100313       END-PERFORM\n100313\n100313       COMPUTE JFCB-PNUM = JFCB-PNUM + QMAT-PNUM + 1\n100313       SET ADDRESS OF JNXT-POINT     TO JFCB-PTR\n100313       COMPUTE JFCB-PNUM = JNXT-PNUM + 16\n100313     END-IF\n100313\n100313     SET ADDRESS OF JFCB             TO JFCB-PTR\n100313     .\n100313 3110-EXIT. EXIT.\n100313*****************************************************************\n100313 3300-SEARCH-LIBR-FOR-MEMS.\nTEST  *    DISPLAY '3300-SEARCH-LIBR-FOR-MEMS'\n100313*****************************************************************\n100313*    ALLOCATE LIB TO DIRDD\n100313*****************************************************************\n100313     MOVE SPACES                     TO WS-IKJEFT-BUFFER\n100313     STRING 'ALLOC DD(DIRDD) DSN('''          DELIMITED BY SIZE\n100313            LIBR-DSN(LIBRX)                   DELIMITED BY SPACES\n100313            ''') '                            DELIMITED BY SIZE\n100313            'SHR'                             DELIMITED BY SIZE\n100313                                   INTO WS-IKJEFT-BUFFER\n100313     END-STRING\n100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n100313\n100313*    OPEN DIRECTORY OF LIB\n100313     OPEN INPUT DIR-FILE\n100313\n100313*    READ DIRECTORY UNTIL MEM FOUND OR EOF\n100313     READ DIR-FILE             INTO DIR-REC\n100313\n100313     IF DIR-STATUS(1:1) = '0'\n100313       SET DIR-MORE                  TO TRUE\n100313       PERFORM 3310-READ-DIR-MEMS                  THRU 3310-EXIT\n100313         UNTIL DIR-EOF\n100313     END-IF\n100313\n100313     CLOSE DIR-FILE\n100313\n100313*    FREE LIB FROM DIRDD\n100313     MOVE 'FREE DD(DIRDD)'           TO WS-IKJEFT-BUFFER\n100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n100313     .\n100313 3300-EXIT. EXIT.\n100313*****************************************************************\n100313 3310-READ-DIR-MEMS.\n100313*****************************************************************\n100313\n100313     MOVE 1                          TO DIR-POS\n100313     SET DIR-PTR                     TO ADDRESS OF DIR-DATA\n100313     SET ADDRESS OF DIR-ENTRY        TO DIR-PTR\n100313\n100313     PERFORM UNTIL DIR-POS + 11 > DIR-REC-LEN\n100313     OR DIR-ENTRY(1:1) = HIGH-VALUES\n100313\n110222       PERFORM 3400-MATCH-MEMBER-MASK              THRU 3400-EXIT\n110222         VARYING MSKX FROM 1 BY 1\n110222         UNTIL MSKX > MSK-CNT\n100313\n100313       MOVE LOW-VALUES               TO DIR-2BYTES(1:1)\n100313       MOVE DIR-BITLEN               TO DIR-2BYTES(2:1)\n100313       DIVIDE DIR-SMALLINT           BY 32\n100313                                 GIVING DIR-TRASH\n100313                              REMAINDER DIR-HWORDS\n100313       COMPUTE DIR-ENTLEN = 12 + (DIR-HWORDS * 2)\n100313       ADD DIR-ENTLEN                TO DIR-POS\n100313       ADD DIR-ENTLEN                TO DIR-ADR\n100313       SET ADDRESS OF DIR-ENTRY      TO DIR-PTR\n100313     END-PERFORM\n100313\n100313     IF DIR-ENTRY(1:1) = HIGH-VALUES\n100313       SET DIR-EOF                   TO TRUE\n100313     ELSE\n100313       READ DIR-FILE               INTO DIR-REC\n100313     END-IF\n100313     .\n100313 3310-EXIT. EXIT.\n110222*****************************************************************\n110222 3400-MATCH-MEMBER-MASK.\nTEST  *    DISPLAY '3400-MATCH-MEMBER-MASK -'\nTEST  *            ' MSK-MASK=<' MSK-MASK(MSKX) '>'\nTEST  *            ' DIR-MEM-NAME=<' DIR-MEM-NAME '>'\n110222*****************************************************************\n110222\n110222     MOVE MSK-MASK(MSKX)             TO MEM-MASK\n110222\n110222*    TEST DIRECTORY MEMBER NAME AGAINST MASK PARTS\n110222     MOVE 1                          TO WS-BEG\n110222     SET MP-MATCH                    TO TRUE\n110222\n110222     IF DIR-MEM-NAME NOT = MEM-MASK\n110222       PERFORM 3410-MATCH-MASK-PARTS               THRU 3410-EXIT\n110222     END-IF\n110222\n110222     IF MP-MATCH\n110222*      SKIP MEMBER IF ALREADY FOUND IN AN EARLIER LIBRARY\n110222       PERFORM VARYING MEMX FROM 1 BY 1\n110222         UNTIL MEMX > MEM-CNT\n110222           IF DIR-MEM-NAME = MEM-NAME(MEMX)\n                   GO TO 3400-EXIT\n110222           END-IF\n110222       END-PERFORM\n110222*      ELSE ADD THE MEMBER TO THE LIST\n110222       ADD 1                         TO MEM-CNT\n110222       ADD 1                         TO MSK-MEM-CNT(MSKX)\n110222       IF MEM-CNT <= MEM-MAX\n110222         MOVE LIBR-DSN(LIBRX)        TO MEM-LIBR(MEM-CNT)\n110222         MOVE DIR-MEM-NAME           TO MEM-NAME(MEM-CNT)\n110222       END-IF\n110222     END-IF\n110222     .\n110222 3400-EXIT. EXIT.\n110222*****************************************************************\n110222 3410-MATCH-MASK-PARTS.\n110222*****************************************************************\n110222\n110222     PERFORM VARYING MPX FROM 1 BY 1\n110222     UNTIL MPX > MSK-PART-CNT(MSKX)\n110222     OR    MP-NOMATCH\n110222\n110222       EVALUATE TRUE\n110222*        IF MASK PART IS JUST \"*\", AUTOMATIC MATCH TO PART\n110222         WHEN MSK-PART-TXT(MSKX MPX) = '*'\n110222         AND  MSK-PART-LEN(MSKX MPX) = 1\n110222           SET MP-PART-MATCH         TO TRUE\n110222*        IF MASK PART BEGINS WITH \"*\", SLIDING MATCH POSSIBLE\n110222         WHEN MSK-PART-TXT(MSKX MPX)(1:1) = '*'\n110222           COMPUTE MPL = MSK-PART-LEN(MSKX MPX) - 1\n110222           MOVE MSK-PART-TXT(MSKX MPX)(2:MPL)\n110222                                     TO MP-TXT\n110222           COMPUTE WS-END = (LENGTH OF DIR-MEM-NAME - MPL) + 1\n110222           SET MP-PART-NOMATCH       TO TRUE\n110222           PERFORM UNTIL WS-BEG > WS-END\n110222           OR MP-PART-MATCH\n110222             PERFORM 3411-MATCH-PART               THRU 3411-EXIT\n110222             IF MP-PART-MATCH\n110222               ADD MPL               TO WS-BEG\n110222             ELSE\n110222               ADD 1                 TO WS-BEG\n110222             END-IF\n110222           END-PERFORM\n110222*        OTHERWISE ONLY FIXED MATCH POSSIBLE\n110222         WHEN OTHER\n110222           MOVE MSK-PART-LEN(MSKX MPX)\n110222                                     TO MPL\n110222           MOVE MSK-PART-TXT(MSKX MPX)\n110222                                     TO MP-TXT\n110222           COMPUTE WS-END = (LENGTH OF DIR-MEM-NAME - MPL) + 1\n110222           PERFORM 3411-MATCH-PART                 THRU 3411-EXIT\n110222           ADD MPL                   TO WS-BEG\n110222       END-EVALUATE\n110222\n110222       IF MP-PART-NOMATCH\n110222         SET MP-NOMATCH              TO TRUE\n110222       END-IF\n110222     END-PERFORM\n110222\n110222*    IF MATCHED ALL MASK PARTS\n110222*    AND NOT ALL CHARS OF DIR-MEM-NAME COMPARED\n110222*    AND MASK DOES NOT END WITH *\n110222*    THEN REQUIRE TRAILING SPACES\n110222     MOVE MSK-PART-CNT(MSKX)         TO MPX\n110222\n110222     IF MP-NOMATCH\n110222     OR WS-BEG > LENGTH OF DIR-MEM-NAME\n110222     OR   (MSK-PART-TXT(MSKX MPX) = \"*\"\n110222       AND MSK-PART-LEN(MSKX MPX) = 1 )\n110222         CONTINUE\n110222     ELSE\n110222       IF DIR-MEM-NAME(WS-BEG:) NOT = SPACES\n110222         SET MP-NOMATCH              TO TRUE\n110222       END-IF\n110222     END-IF\n110222     .\n110222 3410-EXIT. EXIT.\n110222*****************************************************************\n110222 3411-MATCH-PART.\n110222*****************************************************************\n110222* AT THIS POINT THE FOLLOWING VALUES ARE ALREADY SET:\n110222*   MP-TXT = TEXT OF CURRENT MASK PART\n110222*   MPL          = LENGTH OF CURRENT MASK PART\n110222*   WS-BEG       = POSITION IN DIR-MEM-NAME TO MATCH AGAINST\n110222*   WS-END       = MAX BEGIN POS THAT MASK PART THAT COULD MATCH\n110222*****************************************************************\n110222\n110222     SET MP-PART-MATCH               TO TRUE\n110222     MOVE WS-BEG                     TO WS-BX\n110222\n110222     PERFORM VARYING WS-LX FROM 1 BY 1\n110222     UNTIL WS-LX > MPL\n110222     OR MP-PART-NOMATCH\n110222       EVALUATE TRUE\n110222*        IF PAST END OF MEMBER NAME, PART NOMATCH\n110222         WHEN WS-BX > LENGTH OF DIR-MEM-NAME\n110222           SET MP-PART-NOMATCH       TO TRUE\n110222*        WILD CARD \"?\" MATCHES ANY ONE CHARACTER\n110222         WHEN MP-TXT(WS-LX:1) = '?'\n110222           CONTINUE\n110222*        WILD CARD \"!\" MATCHES ONE UPPER CASE ALPHABET CHARACTER\n110222         WHEN MP-TXT(WS-LX:1) = '!'\n110222           IF NOT (DIR-MEM-NAME(WS-BX:1)\n110222                 = 'A' OR 'B' OR 'C' OR 'D' OR 'E' OR 'F' OR 'G'\n110222                OR 'H' OR 'I' OR 'J' OR 'K' OR 'L' OR 'M' OR 'N'\n110222                OR 'O' OR 'P' OR 'Q' OR 'R' OR 'S' OR 'T' OR 'U'\n110222                OR 'V' OR 'W' OR 'X' OR 'Y' OR 'Z')\n110222             SET MP-PART-NOMATCH     TO TRUE\n110222           END-IF\n110222*        WILD CARD \"%\" MATCHES ONE NUMERIC DIGIT\n110222         WHEN MP-TXT(WS-LX:1) = '%'\n110222           IF NOT (DIR-MEM-NAME(WS-BX:1)\n110222                 = '0' OR '1' OR '2' OR '3' OR '4'\n110222                OR '5' OR '6' OR '7' OR '8' OR '9')\n110222             SET MP-PART-NOMATCH     TO TRUE\n110222           END-IF\n110222*        WILD CARD \"~\" MATCHES ONE OF \"@\", \"#\" AND \"$\"\n110222         WHEN MP-TXT(WS-LX:1) = '~'\n110222           IF NOT (DIR-MEM-NAME(WS-BX:1)\n110222                 = '@' OR '#' OR '$')\n110222             SET MP-PART-NOMATCH     TO TRUE\n110222           END-IF\n110222*        ANY OTHER CHARACTER MUST BE AN EXACT MATCH\n110222         WHEN OTHER\n110222           IF MP-TXT(WS-LX:1) NOT = DIR-MEM-NAME(WS-BX:1)\n110222             SET MP-PART-NOMATCH     TO TRUE\n110222           END-IF\n110222       END-EVALUATE\n110222\n110222       ADD 1                         TO WS-BX\n110222     END-PERFORM\n110222     .\n110222 3411-EXIT. EXIT.\n100313*****************************************************************\n100313 3500-PROCESS-LIBR-MEMBER.\n100313*****************************************************************\n100313\n100313*    ALLOCATE INPUT PDS/MEMBER TO DD LIBRTMPI\n100313     MOVE SPACES                     TO WS-IKJEFT-BUFFER\n100313     STRING 'ALLOC DD(LIBRTMPI) DSN('''       DELIMITED BY SIZE\n110222            MEM-LIBR(MEMX)                    DELIMITED BY SPACES\n100313            '('                               DELIMITED BY SIZE\n110222            MEM-NAME(MEMX)                    DELIMITED BY SPACES\n100313            ')'') '                           DELIMITED BY SIZE\n100313            'SHR'                             DELIMITED BY SIZE\n100313                                   INTO WS-IKJEFT-BUFFER\n100313     END-STRING\n100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\nTEST  *    DISPLAY WS-IKJEFT-BUFFER(1:WS-IKJEFT-LENGTH)\n100313\n100313*    ALLOCATE OUTPUT PDS/MEMBER TO DD LIBRTMPO\n100313     MOVE SPACES                     TO WS-IKJEFT-BUFFER\n100313     STRING 'ALLOC DD(LIBRTMPO) DSN('''       DELIMITED BY SIZE\n100313            MEM-DSN-OUT                       DELIMITED BY SPACES\n100313            '('                               DELIMITED BY SIZE\n110222            MEM-NAME(MEMX)                    DELIMITED BY SPACES\n100313            ')'') '                           DELIMITED BY SIZE\n100313            'SHR'                             DELIMITED BY SIZE\n100313                                   INTO WS-IKJEFT-BUFFER\n100313     END-STRING\n100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\nTEST  *    DISPLAY WS-IKJEFT-BUFFER(1:WS-IKJEFT-LENGTH)\n100313\n100313*    SET DDNAME FOR CNTLIN FILE AND OPEN THE FILE\n100313     MOVE 'LIBRTMPI'                 TO DDNAME-CNTLIN\n100313     MOVE 'LIBRTMPO'                 TO DDNAME-CNTLOUT\n100313     PERFORM 4000-PROCESS-CNTL-FILE                THRU 4000-EXIT\n100313\n100313*    FREE INPUT AND OUTPUT LIBRARIES\n100313     MOVE 'FREE DD(LIBRTMPI)'        TO WS-IKJEFT-BUFFER\n100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n100313     MOVE 'FREE DD(LIBRTMPO)'        TO WS-IKJEFT-BUFFER\n100313     PERFORM 8900-CALL-TSO                         THRU 8900-EXIT\n100313     .\n100313 3500-EXIT. EXIT.\n      ******************************************************************\n       4000-PROCESS-CNTL-FILE.\n      ******************************************************************\n      *    THIS ROUTINE PROCESSES ONE CNTLIN FILE\n      ******************************************************************\n           MOVE '4000-PROCESS-CNTL-FILE'   TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      * OPEN THE INPUT FILE\n           CALL 'CHGDDNM' USING CNTLIN-FILE DDNAME-CNTLIN\n           OPEN INPUT CNTLIN-FILE\n           MOVE 'N'                        TO WS-CNTLIN-EOF-SW\n           MOVE ZERO                       TO WS-FILE-CARDS-READ\n           ADD +1                          TO WS-FILES-READ\n\n      * READ AND PROCESS CNTLIN UNTIL EOF\n           PERFORM 8000-READ-CNTLIN                      THRU 8000-EXIT\n\n           PERFORM UNTIL WS-CNTLIN-EOF\n             MOVE CNTLIN-REC               TO WS-CARDIN\n             PERFORM 4100-PROCESS-CARD                   THRU 4100-EXIT\n             PERFORM 8000-READ-CNTLIN                    THRU 8000-EXIT\n           END-PERFORM\n\n      * CLOSE FILES\n           CLOSE CNTLIN-FILE\n\n           IF WS-OUTPUT-OPEN\n             PERFORM 8220-CLOSE-CNTLOUT                  THRU 8220-EXIT\n           END-IF\n           .\n       4000-EXIT. EXIT.\n      ******************************************************************\n       4100-PROCESS-CARD.\n      ******************************************************************\n      *    THIS ROUTINE PROCESSES THE SUBSTITUTION AND WRITES THE CARD\n      ******************************************************************\n           MOVE '4100-PROCESS-CARD'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           IF WS-DEBUG-PARSING\n             DISPLAY '  WS-CARDIN=<' WS-CARDIN '>'\n           END-IF\n\n           MOVE ZERO                       TO WS-LASTCC\n\n           MOVE WS-CARDIN(WS-LBND:WS-DLEN) TO SA-STRING\n           MOVE WS-DLEN                    TO SA-STRING-LEN\n           PERFORM 6000-SUBSTITUTE-SYMBOLS               THRU 6000-EXIT\n\n           IF SA-SYM-CHGD-SW = 'Y'\n             ADD 1                         TO WS-CARDS-CHANGED\n           ELSE\n             ADD 1                         TO WS-CARDS-UNCHANGED\n           END-IF\n\n      *    CHECK BUFFER FOR DATA SHIFTED BEYOND BOUNDS\n           COMPUTE WS-LX = WS-DLEN + 1\n           IF SA-STRING(WS-LX:) NOT = SPACES\n             MOVE WS-FILE-CARDS-READ       TO WS-DISPLAY-CNT\n             PERFORM VARYING WS-LX FROM 1 BY 1\n               UNTIL WS-LX > 10\n               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES\n             END-PERFORM\n             DISPLAY 'SUBSTITUTION CAUSED TRUNCATION ON CARD NUMBER '\n                     WS-DISPLAY-CHAR(WS-LX:)\n                     ' OF FILE ' DDNAME-IN(DDX)\n             MOVE WS-RBND                  TO WS-DISPLAY-CNT\n             PERFORM VARYING WS-LX FROM 1 BY 1\n               UNTIL WS-LX > 10\n               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES\n             END-PERFORM\n             DISPLAY '  DATA SHIFTED BEYOND COLUMN '\n                     WS-DISPLAY-CHAR(WS-LX:)\n                     ' WAS LOST'\n             DISPLAY '  REFORMAT CARD TO ALLOW FOR SUBSTITUTION'\n                     ' WITHOUT TRUNCATION'\n             DISPLAY '****************************************'\n                     '****************************************'\n             MOVE 8                        TO WS-LASTCC\n             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n           END-IF\n\n      * FIRST MOVE THE ENTIRE UNMODIFIED INPUT RECORD TO THE OUTPUT\n      * THEN MOVE THE MODIFIED PART WITHIN THE BOUNDS TO THE OUTPUT\n           MOVE WS-CARDIN                  TO WS-CARDOUT\n           MOVE SA-STRING(1:WS-DLEN)\n             TO WS-CARDOUT(WS-LBND:WS-DLEN)\n\n      *    IF THIS CARD IS AN INPUT PARM CARD, PROCESS IT AS SUCH\n      *    (I.E. IT BEGINS WITH $SYMBPARM OR THE OVERRIDDEN VALUE)\n           IF WS-CARDOUT(1:WS-CNTL-LEN) = WS-CNTL-STRING(1:WS-CNTL-LEN)\n             ADD 1                         TO WS-PARM-CARDS-READ\n             COMPUTE WS-BX = WS-CNTL-LEN + 1\n             COMPUTE WS-LX = (WS-DLEN - WS-BX) + 1\n             MOVE SA-STRING(WS-BX:WS-LX) TO WS-INPUT-PARMS\n             PERFORM VARYING WS-LX FROM WS-LX BY -1\n               UNTIL WS-INPUT-PARMS(WS-LX:1) NOT = SPACE\n                  OR WS-LX < 1\n             END-PERFORM\n             MOVE WS-LX                    TO WS-INPUT-PARMS-LEN\n             IF NOT WS-PREV-CARD-TYPE-PARM\n               DISPLAY '****************************************'\n                       '****************************************'\n             END-IF\n      *      SET VALUE LEVEL FOR INPUT CARDS.\n      *      THEY CANNOT CONTAIN SYMBOL VALUES TO USE.\n081113       SET WS-LVL-NO-VALUE           TO TRUE\n             PERFORM 5000-PROCESS-PARMS                  THRU 5000-EXIT\n             MOVE 'P'                      TO WS-PREV-CARD-TYPE\n           ELSE\n      *    ELSE WRITE IT OUT AS A DATA CARD\n             PERFORM 8200-WRITE-OUTPUT                   THRU 8200-EXIT\n             MOVE 'D'                      TO WS-PREV-CARD-TYPE\n           END-IF\n           .\n       4100-EXIT. EXIT.\n      ******************************************************************\n       5000-PROCESS-PARMS.\n      ******************************************************************\n      *    THIS ROUTINE PARSES THE INPUT PARMS AND BUILDS AN ARRAY OF\n      *    SUBSTITUTION VARIABLE NAMES AND VALUES.\n      ******************************************************************\n           MOVE '5000-PROCESS-PARMS'       TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           MOVE WS-INPUT-PARMS-LEN         TO WS-DISPLAY-CNT\n           PERFORM VARYING WS-LX FROM 1 BY 1\n             UNTIL WS-LX > 10\n             OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES\n           END-PERFORM\n\n           IF WS-INPUT-PARMS-LEN > ZERO\n             EVALUATE TRUE\n               WHEN WS-PGM-PHASE-INITPARM\n                 DISPLAY '**** THE FOLLOWING ' WS-DISPLAY-CHAR(WS-LX:)\n                         ' CHARACTER PARM WAS RECEIVED AS INPUT:'\n                 DISPLAY '  <' WS-INPUT-PARMS(1:WS-INPUT-PARMS-LEN) '>'\n               WHEN WS-PGM-PHASE-CNTLIN\n                 DISPLAY '**** THE FOLLOWING ' WS-DISPLAY-CHAR(WS-LX:)\n                         ' CHARACTER PARM WAS READ FROM CNTLIN:'\n                 DISPLAY '  <' WS-INPUT-PARMS(1:WS-INPUT-PARMS-LEN) '>'\n             END-EVALUATE\n           END-IF\n\n      *    NOW PARSE THE PARM DATA FOR THE SYMBOLS\n           MOVE ZERO                       TO WS-BEG\n           MOVE ZERO                       TO WS-END\n           MOVE ZERO                       TO WS-LEN\n           PERFORM 5100-PARSE-PARM                       THRU 5100-EXIT\n\n           PERFORM UNTIL WS-LEN = ZERO\n             MOVE WS-PARM                  TO WS-NAME\n             MOVE WS-LEN                   TO WS-NAME-LEN\n\n             PERFORM 5100-PARSE-PARM                     THRU 5100-EXIT\n             MOVE WS-PARM                  TO WS-VALUE\n             MOVE WS-LEN                   TO WS-VALUE-LEN\n\n             IF WS-DEBUG-PARSING\n               DISPLAY 'NAME=<' WS-NAME(1:WS-NAME-LEN) '>'\n                       ' VALUE=<' WS-VALUE(1:WS-VALUE-LEN) '>'\n             END-IF\n\n             IF WS-PGM-PHASE-JCLSCAN\n               PERFORM 5030-SUB-JCL-SYMBOLS              THRU 5030-EXIT\n             END-IF\n\n             IF WS-NAME(1:1) = '$'\n               EVALUATE TRUE\n      *          IF COMING FROM JCL, TREAT $NAMES AS SYMBOLS\n                 WHEN WS-PGM-PHASE-JCLSCAN\n                   PERFORM 5010-PROCESS-SYMBOL-PARM      THRU 5010-EXIT\n\n      *          IF SYMBPARM PHASE, IGNORE PGMPARMS - ALREADY LOADED\n                 WHEN WS-PGM-PHASE-SYMBPARM\n                   CONTINUE\n\n      *          ELSE $NAMES MUST BE PGMPARMS\n                 WHEN OTHER\n                   PERFORM 5020-PROCESS-PGM-PARM         THRU 5020-EXIT\n               END-EVALUATE\n             ELSE\n      *        DURING THE INITPARM PHASE WE DO NOT PROCESS THE SYMBOLS\n               IF NOT WS-PGM-PHASE-INITPARM\n                 PERFORM 5010-PROCESS-SYMBOL-PARM        THRU 5010-EXIT\n               END-IF\n             END-IF\n\n             PERFORM 5100-PARSE-PARM                     THRU 5100-EXIT\n           END-PERFORM\n\n           PERFORM 5300-DISPLAY-PGMPARMS                 THRU 5300-EXIT\n           .\n       5000-EXIT. EXIT.\n      ******************************************************************\n       5010-PROCESS-SYMBOL-PARM.\n      ******************************************************************\n      *    THIS ROUTINE HANDLES A PARM THAT CONTAINS SYMBOL VALUE DATA\n      ******************************************************************\n           MOVE '5010-PROCESS-SYMBOL-PARM' TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    IF VALUE IS COMING FROM JCL EXEC STATEMENT, CHECK TO SEE IF\n      *    IT IS REALLY AN EXEC KEYWORD PARAMETER.  DISCARD IF IT IS.\n           IF  WS-PGM-PHASE-JCLSCAN\n           AND JOPER = 'EXEC'\n             EVALUATE TRUE\n               WHEN WS-NAME       = 'ACCT'\n               WHEN WS-NAME(1:5)  = 'ACCT.'\n               WHEN WS-NAME       = 'ADDRSPC'\n               WHEN WS-NAME(1:8)  = 'ADDRSPC.'\n               WHEN WS-NAME       = 'COND'\n               WHEN WS-NAME(1:5)  = 'COND.'\n               WHEN WS-NAME       = 'DYNAMNBR'\n               WHEN WS-NAME(1:9)  = 'DYNAMNBR.'\n               WHEN WS-NAME       = 'PARM'\n               WHEN WS-NAME(1:5)  = 'PARM.'\n               WHEN WS-NAME       = 'PERFORM'\n               WHEN WS-NAME(1:8)  = 'PERFORM.'\n               WHEN WS-NAME       = 'RD'\n               WHEN WS-NAME(1:3)  = 'RD.'\n               WHEN WS-NAME       = 'REGION'\n               WHEN WS-NAME(1:7)  = 'REGION.'\n               WHEN WS-NAME       = 'TIME'\n               WHEN WS-NAME(1:5)  = 'TIME.'\n                 IF WS-DEBUG-JESJCL\n                   DISPLAY 'DISCARDING EXEC PARM - NAME=<'\n                           WS-NAME(1:WS-NAME-LEN)    '> VALUE=<'\n                           WS-VALUE(1:WS-VALUE-LEN)  '>'\n                 END-IF\n                 GO TO 5010-EXIT\n\n               WHEN OTHER\n                 CONTINUE\n             END-EVALUATE\n           END-IF\n\n           PERFORM 8800-UPDATE-SA-ENTRY                  THRU 8800-EXIT\n           .\n       5010-EXIT. EXIT.\n      ******************************************************************\n       5020-PROCESS-PGM-PARM.\n      ******************************************************************\n      *    THIS ROUTINE HANDLES PROGRAM PARMS (I.E. $XXXXXX PARMS)\n      ******************************************************************\n           MOVE '5020-PROCESS-PGM-PARM'    TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           EVALUATE WS-NAME\n             WHEN '$SYMBPARM'\n               COMPUTE WS-CNTL-LEN = WS-VALUE-LEN + 1\n               MOVE WS-VALUE               TO WS-CNTL-STRING\n               DISPLAY '**** DEFAULT PARM ID \"$SYMBPARM\" OVERRIDDEN'\n               DISPLAY '**** PARM RECORDS WILL BE IDENTIFIED BY \"'\n                       WS-CNTL-STRING(1:WS-VALUE-LEN) '\"'\n\n             WHEN '$BOUNDS'\n             WHEN '$BNDS'\n             WHEN '$B'\n               PERFORM 5200-GET-BOUNDS                   THRU 5200-EXIT\n081113\n081113       WHEN '$DEFAULTTIMEZONE'\n081113       WHEN '$DFLTTIMEZONE'\n081113       WHEN '$DFLTTZ'\n081113       WHEN '$DTZ'\n081113         EVALUATE WS-VALUE(1:WS-VALUE-LEN)\n081113           WHEN 'U'\n081113           WHEN 'UTC'\n081113             MOVE 'UTC'                  TO WS-CURRENT-TIMEZONE\n081113           WHEN 'L'\n081113           WHEN 'LOCAL'\n081113             MOVE 'LOCAL'                TO WS-CURRENT-TIMEZONE\n081113           WHEN 'D'\n081113           WHEN 'DEFAULT'\n081113             MOVE WS-DEFAULT-TIMEZONE    TO WS-CURRENT-TIMEZONE\n081113           WHEN OTHER\n081113             DISPLAY '**** ERROR - INVALID DEFAULT TIMEZONE \"'\n081113                     WS-VALUE(1:WS-VALUE-LEN)\n081113                     '\" SPECIFIED.'\n081113             DISPLAY '**** THE PARM HAS BEEN IGNORED.'\n081113             MOVE 8                  TO WS-LASTCC\n081113             PERFORM 9998-HANDLE-LASTCC            THRU 9998-EXIT\n081113         END-EVALUATE\n\n             WHEN '$DEBUG'\n             WHEN '$DBUG'\n             WHEN '$DBG'\n             WHEN '$D'\n               IF WS-DEBUG-SWITCHES = SPACES\n                 DISPLAY '**** DEBUG ACTIVATED.'\n               END-IF\n\n               EVALUATE WS-VALUE(1:WS-VALUE-LEN)\n                 WHEN 'T'\n                 WHEN 'TRACE'\n                                 MOVE 'T'      TO WS-DEBUG-TRACE-SW\n                 WHEN 'I'\n                 WHEN 'INPUT'\n                                 MOVE 'I'      TO WS-DEBUG-INPUT-SW\n                 WHEN 'O'\n                 WHEN 'OUTPUT'\n                                 MOVE 'O'      TO WS-DEBUG-OUTPUT-SW\n                 WHEN 'D'\n                 WHEN 'DD'\n                 WHEN 'DDNAME'\n                                 MOVE 'D'      TO WS-DEBUG-DDNAME-SW\n                 WHEN 'J'\n                 WHEN 'JCL'\n                 WHEN 'JESJCL'\n                                 MOVE 'J'      TO WS-DEBUG-JESJCL-SW\n                 WHEN 'S'\n                 WHEN 'SEARCH'\n                                 MOVE 'S'      TO WS-DEBUG-SEARCH-SW\n                 WHEN 'P'\n                 WHEN 'PARSING'\n                                 MOVE 'P'      TO WS-DEBUG-PARSING-SW\n                 WHEN 'OFF'      MOVE SPACES   TO WS-DEBUG-SWITCHES\n                 WHEN OTHER      MOVE 'T'      TO WS-DEBUG-TRACE-SW\n                                 MOVE 'I'      TO WS-DEBUG-INPUT-SW\n                                 MOVE 'O'      TO WS-DEBUG-OUTPUT-SW\n                                 MOVE 'D'      TO WS-DEBUG-DDNAME-SW\n                                 MOVE 'J'      TO WS-DEBUG-JESJCL-SW\n                                 MOVE 'S'      TO WS-DEBUG-SEARCH-SW\n                                 MOVE 'P'      TO WS-DEBUG-PARSING-SW\n               END-EVALUATE\n\n             WHEN OTHER\n               DISPLAY '**** ERROR - UNRECOGNIZED PARM \"'\n                       WS-NAME(1:WS-NAME-LEN) '='\n                       WS-VALUE(1:WS-VALUE-LEN)\n                       '\" SPECIFIED.'\n               DISPLAY '**** THE PARM HAS BEEN IGNORED.'\n               MOVE 8                      TO WS-LASTCC\n               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT\n           END-EVALUATE\n           .\n       5020-EXIT. EXIT.\n      ******************************************************************\n       5030-SUB-JCL-SYMBOLS.\n      ******************************************************************\n      *    THIS ROUTINE SUBSTITUTES SYMBOLS IN JCLPARM NAMES AND VALUES\n      ******************************************************************\n           MOVE '5030-SUB-JCL-SYMBOLS'     TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           MOVE 'N'                        TO WS-NAM-FROM-SYMBOL-SW\n           MOVE 'N'                        TO WS-VAL-FROM-SYMBOL-SW\n           MOVE 'N'                        TO WS-INHERIT-NP-CHG-SW\n\n           MOVE WS-NAME                    TO SA-STRING\n           MOVE WS-NAME-LEN                TO SA-STRING-LEN\n\n           PERFORM 6000-SUBSTITUTE-SYMBOLS               THRU 6000-EXIT\n\n           IF SA-SYM-CHGD-SW = 'Y'\n             MOVE 'Y'                      TO WS-NAM-FROM-SYMBOL-SW\n             MOVE SA-STRING(1:SA-STRING-LEN)\n                                           TO WS-NAME\n             MOVE SA-STRING-LEN            TO WS-NAME-LEN\n           END-IF\n\n           MOVE WS-VALUE                   TO SA-STRING\n           MOVE WS-VALUE-LEN               TO SA-STRING-LEN\n\n           PERFORM 6000-SUBSTITUTE-SYMBOLS               THRU 6000-EXIT\n\n           IF SA-SYM-CHGD-SW = 'Y'\n             MOVE 'Y'                      TO WS-VAL-FROM-SYMBOL-SW\n             MOVE SA-STRING(1:SA-STRING-LEN)\n                                           TO WS-VALUE\n             MOVE SA-STRING-LEN            TO WS-VALUE-LEN\n           END-IF\n\n           IF  WS-DEBUG-PARSING\n           AND (WS-NAM-FROM-SYMBOL\n             OR WS-VAL-FROM-SYMBOL)\n             DISPLAY 'NAME=<' WS-NAME(1:WS-NAME-LEN) '>'\n                     ' VALUE=<' WS-VALUE(1:WS-VALUE-LEN) '>'\n           END-IF\n           .\n       5030-EXIT. EXIT.\n      ******************************************************************\n       5100-PARSE-PARM.\n      ******************************************************************\n      *    THIS ROUTINE PARSES THE PARM FOR THE NEXT NAME OR VALUE\n      ******************************************************************\n           MOVE '5100-PARSE-PARM'          TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           MOVE SPACES                     TO WS-PARM\n           MOVE ZERO                       TO WS-LEN\n           COMPUTE WS-BEG = WS-END + 1\n\n           IF WS-DEBUG-PARSING\n             IF WS-INPUT-PARMS-LEN < 80\n               MOVE WS-INPUT-PARMS-LEN     TO WS-LX\n             ELSE\n               MOVE 80                     TO WS-LX\n             END-IF\n             DISPLAY '  1. START=' WS-BEG\n                     ' LEN=' WS-INPUT-PARMS-LEN\n                     ' <' WS-INPUT-PARMS(1:WS-LX) '>'\n           END-IF\n\n      *    FIND START - SKIP LEADING SPACES AND DELIMITER CHARS\n           PERFORM VARYING WS-BEG FROM WS-BEG BY 1\n             UNTIL WS-BEG > WS-INPUT-PARMS-LEN\n             OR NOT (WS-INPUT-PARMS(WS-BEG:1) = ' ' OR '=' OR ',')\n           END-PERFORM\n\n           IF WS-BEG > WS-INPUT-PARMS-LEN\n             GO TO 5100-EXIT\n           END-IF\n\n           IF WS-DEBUG-PARSING\n             DISPLAY '  2. BEG=' WS-BEG\n           END-IF\n\n      *    FIND END - DELIMITED BY ' ', '=' OR ','\n      *    EXCLUSIVELY ENCAPSULATED BY QUOTES\n      *    NON-EXCLUSIVELY ENCAPSULATED BY PARENTHESES\n           MOVE ZERO                       TO WS-PAREN-DEPTH\n           MOVE 'N'                        TO WS-WITHIN-QUOTES-SW\n\n      *    WE WILL BUILD WS-PARM 1 CHAR AT A TIME AS WE LOOP THROUGH\n           MOVE ZERO                       TO WS-LX\n\n      *    EXAMINE ONE CHARACTER AT A TIME UNTIL WE FIND A DELIMITER\n      *    THAT IS NOT WITHIN QUOTES AND NOT WITHIN PAIRED PARENTHESES\n           PERFORM VARYING WS-END FROM WS-BEG BY 1\n             UNTIL (WS-END > WS-INPUT-PARMS-LEN)\n             OR ((WS-INPUT-PARMS(WS-END:1) = ' ' OR '=' OR ',')\n                 AND (WS-PAREN-DEPTH < 1)\n                 AND (NOT WS-WITHIN-QUOTES))\n\n             IF  WS-DEBUG-PARSING\n               DISPLAY '  2A. END=' WS-END\n                       ' \"' WS-INPUT-PARMS(WS-END:1) '\"'\n                       ' PD=' WS-PAREN-DEPTH\n                       ' WQ=' WS-WITHIN-QUOTES-SW\n                       ' LX=' WS-LX ' <' WS-PARM(1:WS-LX) '>'\n             END-IF\n\n             EVALUATE WS-INPUT-PARMS(WS-END:1)\n      *        HANDLE QUOTES\n               WHEN ''''\n                 IF WS-WITHIN-QUOTES\n      *            CHECK FOR END OF QUOTED STRING\n                   COMPUTE WS-EX = WS-END + 1\n                   IF WS-EX > WS-INPUT-PARMS-LEN\n                   OR WS-INPUT-PARMS(WS-EX:1) NOT = ''''\n                     MOVE 'N'              TO WS-WITHIN-QUOTES-SW\n                   ELSE\n      *              ALLOW FOR DOUBLE QUOTES - TWO WILL GET YOU ONE\n                     ADD 1                 TO WS-END\n                     ADD 1                 TO WS-LX\n                     MOVE ''''             TO WS-PARM(WS-LX:1)\n                   END-IF\n                 ELSE\n      *            CHECK FOR START OF QUOTED STRING\n                   MOVE 'Y'                TO WS-WITHIN-QUOTES-SW\n                 END-IF\n\n      *        OPEN PARENTHESES\n               WHEN '('\n                 IF NOT WS-WITHIN-QUOTES\n                   ADD 1                   TO WS-PAREN-DEPTH\n                 END-IF\n                 ADD 1                     TO WS-LX\n                 MOVE '('                  TO WS-PARM(WS-LX:1)\n\n      *        CLOSE PARENTHESES\n               WHEN ')'\n                 IF NOT WS-WITHIN-QUOTES\n                   SUBTRACT 1              FROM WS-PAREN-DEPTH\n                 END-IF\n                 ADD 1                     TO WS-LX\n                 MOVE ')'                  TO WS-PARM(WS-LX:1)\n\n      *        ANYTHING ELSE\n               WHEN OTHER\n                 ADD 1                     TO WS-LX\n                 MOVE WS-INPUT-PARMS(WS-END:1)\n                                           TO WS-PARM(WS-LX:1)\n             END-EVALUATE\n           END-PERFORM\n\n           IF WS-END > WS-INPUT-PARMS-LEN\n             MOVE WS-INPUT-PARMS-LEN       TO WS-END\n           END-IF\n\n           IF WS-INPUT-PARMS(WS-BEG:1) = ''''\n             COMPUTE WS-BX = WS-BEG + 1\n           ELSE\n             MOVE WS-BEG                   TO WS-BX\n           END-IF\n\n           IF WS-DEBUG-PARSING\n             DISPLAY '  3. BEG=' WS-BEG ' END=' WS-END\n                     ' LX=' WS-LX ' PD=' WS-PAREN-DEPTH\n                     ' WQ=' WS-WITHIN-QUOTES-SW\n           END-IF\n\n           IF WS-LX < 1\n             GO TO 5100-EXIT\n           END-IF\n\n           MOVE WS-LX                      TO WS-LEN\n\n           IF WS-DEBUG-PARSING\n             DISPLAY '  4. LEN=' WS-LEN\n                     ' PARM=<' WS-PARM(1:WS-LEN) '>'\n           END-IF\n           .\n       5100-EXIT. EXIT.\n      ******************************************************************\n       5200-GET-BOUNDS.\n      ******************************************************************\n      *    THIS ROUTINE SETS THE RIGHT AND LEFT BOUNDS\n      ******************************************************************\n           PERFORM VARYING WS-LX FROM 1 BY 1\n             UNTIL WS-LX > WS-VALUE-LEN\n             OR    WS-VALUE(WS-LX:1) = ':'\n           END-PERFORM\n\n           IF WS-LX > WS-VALUE-LEN\n             DISPLAY '**** INVALID BOUNDARIES - MISSING \":\"'\n                     ' - BOUNDS OVERRIDE IGNORED'\n             MOVE 12                       TO WS-LASTCC\n             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n             GO TO 5200-EXIT\n           END-IF\n\n           SUBTRACT +1                 FROM WS-LX\n           MOVE WS-VALUE(1:WS-LX)          TO WS-BOUND-STR\n           ADD +2                          TO WS-LX\n           MOVE WS-VALUE(WS-LX:)           TO WS-BOUND-HOLD\n\n           MOVE 'LEFT '                    TO WS-BOUND-ID\n           PERFORM 5210-EDIT-BOUND                       THRU 5210-EXIT\n           IF  WS-BOUND-OK\n           AND WS-BOUND NOT = ZERO\n             MOVE WS-BOUND                 TO WS-LBND\n           END-IF\n\n           MOVE WS-BOUND-HOLD              TO WS-BOUND-STR\n           MOVE 'RIGHT'                    TO WS-BOUND-ID\n           PERFORM 5210-EDIT-BOUND                       THRU 5210-EXIT\n           IF  WS-BOUND-OK\n           AND WS-BOUND NOT = ZERO\n             MOVE WS-BOUND                 TO WS-RBND\n           END-IF\n\n           IF WS-LBND > WS-RBND\n             MOVE WS-RBND                  TO WS-LX\n             MOVE WS-LBND                  TO WS-RBND\n             MOVE WS-LX                    TO WS-LBND\n             DISPLAY '**** LEFT BOUND > RIGHT BOUND - BOUNDS REVERSED'\n             MOVE 8                        TO WS-LASTCC\n             PERFORM 9998-HANDLE-LASTCC                  THRU 9998-EXIT\n           END-IF\n           COMPUTE WS-DLEN = (WS-RBND - WS-LBND) + 1\n           .\n       5200-EXIT. EXIT.\n      ******************************************************************\n       5210-EDIT-BOUND.\n      ******************************************************************\n      *    THIS ROUTINE EDITS THE BOUNDARY PARM\n      ******************************************************************\n           MOVE '5210-EDIT-BOUND'          TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           MOVE 'Y'                        TO WS-BOUND-OK-SW\n           MOVE ZERO                       TO WS-BOUND\n\n           PERFORM VARYING WS-LX FROM 1 BY 1\n             UNTIL WS-BOUND-STR(WS-LX:1) = SPACES\n               IF NOT (WS-BOUND-STR(WS-LX:1)\n                 = '0' OR '1' OR '2' OR '3' OR '4'\n                 OR '5' OR '6' OR '7' OR '8' OR '9' OR ' ')\n                   MOVE 'N'                TO WS-BOUND-OK-SW\n               END-IF\n           END-PERFORM\n\n           SUBTRACT 1                  FROM WS-LX\n\n           EVALUATE TRUE\n             WHEN NOT WS-BOUND-OK\n               DISPLAY '**** INVALID BOUNDARY - ILLEGAL CHARACTER'\n                       ' - ' WS-BOUND-ID ' OVERRIDE IGNORED'\n               DISPLAY '**** ' WS-BOUND-ID ' BOUNDARY PARM=<'\n                        WS-BOUND-STR(1:WS-LX) '>'\n               MOVE 12                     TO WS-LASTCC\n               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT\n             WHEN WS-LX > 8\n               MOVE 'N'                    TO WS-BOUND-OK-SW\n               DISPLAY '**** INVALID BOUNDARY - TOO MANY DIGITS'\n                       ' - ' WS-BOUND-ID ' OVERRIDE IGNORED'\n               DISPLAY '**** ' WS-BOUND-ID ' BOUNDARY PARM=<'\n                        WS-BOUND-STR(1:WS-LX) '>'\n               MOVE 12                     TO WS-LASTCC\n               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT\n             WHEN WS-LX < 1\n               CONTINUE\n             WHEN OTHER\n               MOVE WS-BOUND-STR(1:WS-LX) TO WS-BOUND(9 - WS-LX:)\n               IF WS-BOUND < 1 OR WS-BOUND > 80\n                 MOVE 'N'                  TO WS-BOUND-OK-SW\n                 MOVE ZERO                 TO WS-BOUND\n                 DISPLAY '**** INVALID BOUNDARY - OUTSIDE RECORD'\n                         ' - ' WS-BOUND-ID ' OVERRIDE IGNORED'\n                 DISPLAY '**** ' WS-BOUND-ID ' BOUNDARY PARM=<'\n                          WS-BOUND-STR(1:WS-LX) '>'\n                 MOVE 12                   TO WS-LASTCC\n                 PERFORM 9998-HANDLE-LASTCC              THRU 9998-EXIT\n               END-IF\n           END-EVALUATE\n           .\n       5210-EXIT. EXIT.\n      ******************************************************************\n       5300-DISPLAY-PGMPARMS.\n      ******************************************************************\n      *    THIS ROUTINE DISPLAY THE PGMPARMS THAT ARE IN USE\n      ******************************************************************\n           MOVE '5300-DISPLAY-PGMPARMS'    TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    IF BOUNDS CHANGED, DISPLAY NEW BOUNDS\n           IF WS-LBND NOT = WS-PREV-LBND\n           OR WS-RBND NOT = WS-PREV-RBND\n             MOVE WS-LBND                  TO WS-PREV-LBND\n             MOVE WS-RBND                  TO WS-PREV-RBND\n             MOVE WS-LBND                  TO WS-DISPLAY-CNT\n             PERFORM VARYING WS-LX FROM 1 BY 1\n               UNTIL WS-LX > 10\n               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES\n             END-PERFORM\n             DISPLAY '**** LEFT  BOUNDARY = ' WS-DISPLAY-CHAR(WS-LX:)\n\n             MOVE WS-RBND                  TO WS-DISPLAY-CNT\n             PERFORM VARYING WS-LX FROM 1 BY 1\n               UNTIL WS-LX > 10\n               OR WS-DISPLAY-CHAR(WS-LX:1) NOT = SPACES\n             END-PERFORM\n             DISPLAY '**** RIGHT BOUNDARY = ' WS-DISPLAY-CHAR(WS-LX:)\n           END-IF\n           .\n       5300-EXIT. EXIT.\n      ******************************************************************\n       6000-SUBSTITUTE-SYMBOLS.\n      ******************************************************************\n      *    THIS ROUTINE LOCATES THE NEXT SYMBOLIC IN THE CONTROL CARD\n      ******************************************************************\n           MOVE '6000-SUBSTITUTE-SYMBOLS'  TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n           IF WS-DEBUG-PARSING\n             DISPLAY '  BUFF=<' SA-STRING '>'\n           END-IF\n\n           MOVE 'N'                        TO SA-SYM-CHGD-SW\n\n      *    TRIM TRAILING SPACES FROM INPUT STRING LENGTH\n           PERFORM VARYING SA-LEN FROM SA-STRING-LEN BY -1\n             UNTIL SA-LEN < 1\n                OR SA-STRING(SA-LEN:1) NOT = SPACES\n           END-PERFORM\n           IF SA-LEN = ZERO\n             GO TO 6000-EXIT\n           END-IF\n\n           MOVE SA-LEN                     TO SA-STRING-LEN\n\n           MOVE ZERO                       TO SA-START\n           MOVE ZERO                       TO SA-END\n           MOVE ZERO                       TO SA-LEN\n           PERFORM 6100-FIND-NEXT-SYMBOL                 THRU 6100-EXIT\n\n           PERFORM UNTIL SA-PARM = SPACES\n             SET SAX                       TO 1\n             SEARCH SA-ENTRY\n               AT END\n                 CONTINUE\n\n               WHEN SA-NAME (SAX) = SA-PARM\n                 PERFORM 6200-REPLACE-SYMBOL             THRU 6200-EXIT\n             END-SEARCH\n\n             PERFORM 6100-FIND-NEXT-SYMBOL               THRU 6100-EXIT\n           END-PERFORM\n           .\n       6000-EXIT. EXIT.\n      ******************************************************************\n       6100-FIND-NEXT-SYMBOL.\n      ******************************************************************\n      *    THIS ROUTINE LOCATES THE NEXT SYMBOLIC IN THE STRING\n      ******************************************************************\n           MOVE '6100-FIND-NEXT-SYMBOL'    TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    START SCAN AT NEXT CHAR AFTER LAST SCAN ENDED\n           MOVE SPACES                     TO SA-PARM\n           COMPUTE SA-START = SA-END + 1\n           MOVE ZERO                       TO SA-END\n           MOVE ZERO                       TO SA-LEN\n           IF WS-DEBUG-PARSING\n             DISPLAY '  1. SA-START=' SA-START\n           END-IF\n\n      *    SCAN FOR START OF SYMBOL - END OF STRING OR AMPERSAND\n           PERFORM VARYING SA-START FROM SA-START BY 1\n             UNTIL SA-START > SA-STRING-LEN\n                OR SA-STRING(SA-START:1) = '&'\n           END-PERFORM\n\n           IF WS-DEBUG-PARSING\n             DISPLAY '  2. SA-START=' SA-START\n           END-IF\n\n           COMPUTE WS-BX = SA-START + 1\n\n      *    IF END OF STRING - DONE\n090915     IF WS-BX > SA-STRING-LEN\n             IF WS-DEBUG-PARSING\n               DISPLAY '  3. WS-BX=' WS-BX ' LEN=' SA-STRING-LEN\n             END-IF\n             GO TO 6100-EXIT\n           END-IF\n\n      *    SCAN FOR END OF SYMBOL - END OF STRING OR NON-ALPHNUM\n           PERFORM VARYING SA-END FROM WS-BX BY 1\n             UNTIL SA-END > SA-STRING-LEN\n                OR SA-STRING(SA-END:1) < X'81'\n                OR SA-STRING(SA-END:1) > '9'\n           END-PERFORM\n\n      *    IF ENDS WITH PERIOD - EAT THE PERIOD WITH THE SYMBOL\n           IF SA-STRING(SA-END:1) = '.'\n             COMPUTE WS-EX = SA-END - 1\n           ELSE\n             SUBTRACT 1                  FROM SA-END\n             MOVE SA-END                   TO WS-EX\n           END-IF\n\n           COMPUTE SA-LEN = (SA-END - SA-START) + 1\n      *    SA-START, SA-END & SA-LEN POINT TO ENTIRE SYMBOL IN STRING\n      *    INCLUDING LEADING AMPERSAND AND TRAILING PERIOD (IF EXISTS)\n\n           COMPUTE WS-LX  = (WS-EX - WS-BX) + 1\n           IF WS-DEBUG-PARSING\n             DISPLAY '  SA-END=' SA-END\n             DISPLAY '  SA-LEN=' SA-LEN\n             DISPLAY '  WS-BX =' WS-BX\n             DISPLAY '  WS-EX =' WS-EX\n             DISPLAY '  WS-LX =' WS-LX\n           END-IF\n\n      *    IF SYMBOL NAME IS ZERO LENGTH, EXIT WITH SA-PARM BLANK\n           IF WS-LX < 1\n             GO TO 6100-EXIT\n           END-IF\n\n           MOVE SA-STRING(WS-BX:WS-LX)     TO SA-PARM\n\n      *    WS-BX, WS-EX, WS-LX & SA-PARM ARE FOR SYMBOL NAME ONLY!\n      *    LEADING AMPERSAND AND TRAILING PERIOD ARE NOT INCLUDED.\n           IF WS-DEBUG-PARSING\n               DISPLAY '  SA-PARM=<' SA-PARM '>'\n           END-IF\n           .\n       6100-EXIT. EXIT.\n      ******************************************************************\n       6200-REPLACE-SYMBOL.\n      ******************************************************************\n      *    THIS ROUTINE REPLACES THE SYMBOLIC STRING WITH THE VALUE\n      ******************************************************************\n           MOVE '6200-REPLACE-SYMBOL'      TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    SAVE THE PART OF THE STRING THAT FOLLOWS THE SYMBOL\n           COMPUTE WS-BX = SA-END + 1\n           MOVE SA-STRING(WS-BX:)          TO SA-SUFFIX\n\n      *    OVERLAY THE VALUE ONTO THE STRING AT THE START OF THE SYMBOL\n           MOVE SA-VALUE-LEN(SAX)          TO WS-LX\n           MOVE SA-VALUE    (SAX)(1:WS-LX) TO SA-STRING(SA-START:WS-LX)\n\n      *    OVERLAY THE SAVED PART OF THE STRING FOLLOWING THE VALUE\n           COMPUTE WS-BX = SA-START + WS-LX\n           MOVE SA-SUFFIX                  TO SA-STRING(WS-BX:)\n\n           IF WS-DEBUG-PARSING\n             DISPLAY '  OLD SA-END=<' SA-END '> LEN=' SA-STRING-LEN\n           END-IF\n      *    COMPUTE THE NEW END POINTER FOR THE SCAN TO CONTINUE\n           COMPUTE SA-END = WS-BX - 1\n\n      *    COMPUTE THE NEW LENGTH OF THE STRING\n           COMPUTE SA-STRING-LEN = (SA-STRING-LEN - SA-LEN) + WS-LX\n           IF WS-DEBUG-PARSING\n             DISPLAY '  NEW SA-END=<' SA-END '> LEN=' SA-STRING-LEN\n           END-IF\n\n      *    CHECK TO SEE IF THE VALUE HAS A NESTED PROC CHANGE\n      *    IF SO SET THE WS-INHERIT-NP-CHG SWITCH.\n      *    IF ALSO PROCESSING CNTLIN RECORDS, SET SA-USE SWITCHES TOO.\n           IF SA-VAL-NP-CHG-SW(SAX) = 'Y'\n             MOVE 'Y'                      TO WS-INHERIT-NP-CHG-SW\n             IF WS-PGM-PHASE-CNTLIN\n               MOVE 'Y'                    TO SA-ANY-VAL-NP-USE-SW\n               MOVE 'Y'                    TO SA-VAL-NP-USE-SW(SAX)\n             END-IF\n           END-IF\n           MOVE 'Y'                        TO SA-SYM-CHGD-SW\n           .\n       6200-EXIT. EXIT.\n      ******************************************************************\n       8000-READ-CNTLIN.\n      ******************************************************************\n      *    THIS ROUTINE READS THE INCOMING CONTROL CARD\n      ******************************************************************\n           MOVE '8000-READ-CNTLIN'         TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           READ CNTLIN-FILE              INTO CNTLIN-REC\n             AT END      MOVE 'Y'          TO WS-CNTLIN-EOF-SW\n           END-READ\n\n           IF WS-CNTLIN-EOF\n             IF WS-DEBUG-INPUT\n               DISPLAY '**** EOF ENCOUNTERED ON CNTLIN-FILE'\n             END-IF\n             GO TO 8000-EXIT\n100313     END-IF\n\n           ADD 1                           TO WS-CARDS-READ\n           ADD 1                           TO WS-FILE-CARDS-READ\n\n           IF WS-DEBUG-INPUT\n             DISPLAY '**** ' DDNAME-IN(DDX) ' '\n                     WS-FILE-CARDS-READ '<'\n                     CNTLIN-REC '>'\n           END-IF\n           .\n       8000-EXIT. EXIT.\n      ******************************************************************\n       8100-READ-MEMLIST.\n      ******************************************************************\n      *    THIS ROUTINE READS THE LIBRARY MEMBER LIST\n      ******************************************************************\n           MOVE '8100-READ-MEMLIST'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           READ MEMLIST-FILE\n             AT END\n               SET MEMLIST-EOF             TO TRUE\n               IF WS-DEBUG-INPUT\n                 DISPLAY '**** EOF ENCOUNTERED ON MEMLIST-FILE'\n               END-IF\n               GO TO 8100-EXIT\n           END-READ\n\n           IF WS-DEBUG-INPUT\n             DISPLAY '**** ' DDNAME-MEMS(DDX)\n                     ' <'\n                     FD-MEMLIST-REC '>'\n           END-IF\n           .\n       8100-EXIT. EXIT.\n      ******************************************************************\n       8200-WRITE-OUTPUT.\n      ******************************************************************\n      *    THIS ROUTINE WRITES THE MODIFIED CONTROL CARD TO CNTLOUT\n      ******************************************************************\n           MOVE '8200-WRITE-OUTPUT'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           IF NOT WS-OUTPUT-OPEN\n             DISPLAY '****************************************'\n                     '****************************************'\n110222       IF DDNAME-CNTLIN = 'LIBRTMPI'\n110222         PERFORM VARYING WS-END\n110222           FROM LENGTH OF MEM-NAME(MEMX) BY -1\n110222           UNTIL MEM-NAME(MEMX)(WS-END:1) NOT = SPACES\n110222         END-PERFORM\n110222         PERFORM VARYING WS-EX\n110222           FROM LENGTH OF MEM-LIBR(MEMX) BY -1\n110222           UNTIL MEM-LIBR(MEMX)(WS-EX:1) NOT = SPACES\n110222         END-PERFORM\n110222         DISPLAY '**** INPUT  LIBRARY MEMBER '''\n110222                 MEM-LIBR(MEMX)(1:WS-EX) '('\n110222                 MEM-NAME(MEMX)(1:WS-END) ')'''\n110222         PERFORM VARYING WS-EX\n110222           FROM LENGTH OF MEM-DSN-OUT BY -1\n110222           UNTIL MEM-DSN-OUT(WS-EX:1) NOT = SPACES\n110222         END-PERFORM\n110222         DISPLAY '**** OUTPUT LIBRARY MEMBER '''\n110222                 MEM-DSN-OUT(1:WS-EX) '('\n110222                 MEM-NAME(MEMX)(1:WS-END) ')'''\n110222       END-IF\n             DISPLAY '**** THE FOLLOWING LINES WERE WRITTEN TO'\n                     ' OUTPUT DDNAME ''' DDNAME-OUT(DDX) ''''\n             DISPLAY '****************************************'\n                     '****************************************'\n             DISPLAY '----+----1----+----2----+----3----+----4'\n                     '----+----5----+----6----+----7----+----8'\n           END-IF\n\n           DISPLAY WS-CARDOUT\n\n           IF NOT WS-OUTPUT-OPEN\n             PERFORM 8210-OPEN-CNTLOUT                   THRU 8210-EXIT\n           END-IF\n\n           WRITE FD-CNTLOUT-REC          FROM WS-CARDOUT\n\n           ADD 1                           TO WS-CARDS-WRITTEN\n           ADD 1                           TO WS-FILE-CARDS-WRITTEN\n           .\n       8200-EXIT. EXIT.\n      ******************************************************************\n       8210-OPEN-CNTLOUT.\n      ******************************************************************\n      *    THIS ROUTINE POINTS TO AND OPENS THE OUTPUT FILE\n      ******************************************************************\n           MOVE '8210-OPEN-CNTLOUT'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           ADD +1                          TO WS-FILES-WRITTEN\n\n           CALL 'CHGDDNM' USING CNTLOUT-FILE DDNAME-CNTLOUT\n           OPEN OUTPUT CNTLOUT-FILE\n           SET WS-OUTPUT-OPEN              TO TRUE\n           .\n       8210-EXIT. EXIT.\n      ******************************************************************\n       8220-CLOSE-CNTLOUT.\n      ******************************************************************\n      *    THIS ROUTINE CLOSES THE OUTPUT FILE\n      ******************************************************************\n           MOVE '8220-CLOSE-CNTLOUT'       TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           MOVE WS-FILE-CARDS-WRITTEN      TO WS-DISPLAY-CNT\n           IF WS-DEBUG-OUTPUT\n             DISPLAY '**** ' WS-DISPLAY-CNT\n                     ' LINES WERE WRITTEN TO DDNAME '\n                     DDNAME-OUT(DDX)\n           END-IF\n\n           MOVE 'N'                        TO WS-OUTPUT-OPEN-SW\n           CLOSE CNTLOUT-FILE\n\n           MOVE ZERO                       TO WS-FILE-CARDS-WRITTEN\n           .\n       8220-EXIT. EXIT.\n      ******************************************************************\n       8800-UPDATE-SA-ENTRY.\n      ******************************************************************\n      *    THIS ROUTINE SEARCHES THE SUBSTITUTES ARRAY AND ADDS OR\n      *    CHANGES THE ENTRIES AS NEEDED\n      ******************************************************************\n           MOVE '8800-UPDATE-SA-ENTRY'     TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           IF WS-LVL-NO-VALUE\n             GO TO 8800-EXIT\n           END-IF\n\n      *    SEE IF THE VALUE IS ALREADY IN THE ARRAY, THEN ADD OR CHANGE\n      *    IT AS NEEDED.  DO NOT UPDATE IF LEVEL IS LESS THAN EXISTING!\n           SET SAX                         TO 1\n           SEARCH SA-ENTRY\n             AT END\n               PERFORM 8810-ADD-SA-ENTRY                 THRU 8810-EXIT\n\n             WHEN SA-NAME (SAX) = WS-NAME\n               PERFORM 8820-CHG-SA-ENTRY                 THRU 8820-EXIT\n\n           END-SEARCH\n           .\n       8800-EXIT. EXIT.\n      ******************************************************************\n       8810-ADD-SA-ENTRY.\n      ******************************************************************\n      *    THIS ROUTINE ADDS A NEW ENTRY TO THE SUBSTITUTES ARRAY\n      ******************************************************************\n           MOVE '8810-ADD-SA-ENTRY'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           ADD 1                           TO SA-CNT\n\n           IF WS-DEBUG-SEARCH\n               DISPLAY '  SA-CNT=' SA-CNT\n               DISPLAY '  WS-NAME-LEN=' WS-NAME-LEN\n               DISPLAY '  WS-NAME=<' WS-NAME '>'\n               DISPLAY '  WS-VALUE-LEN=' WS-VALUE-LEN\n               DISPLAY '  WS-VALUE=<' WS-VALUE '>'\n           END-IF\n\n           IF SA-CNT > SA-MAX\n               DISPLAY '****************************************'\n                       '****************************************'\n               DISPLAY '****************************************'\n                       '****************************************'\n               DISPLAY '**** ERROR: TABLE OVERFLOW, INCREASE TABLE SIZE'\n               DISPLAY '****************************************'\n                       '****************************************'\n               DISPLAY '****************************************'\n                       '****************************************'\n               MOVE 20                     TO WS-LASTCC\n               PERFORM 9998-HANDLE-LASTCC                THRU 9998-EXIT\n           END-IF\n\n           SET SAX                         TO SA-CNT\n           MOVE WS-NAME-LEN                TO SA-NAME-LEN      (SAX)\n           MOVE WS-NAME                    TO SA-NAME          (SAX)\n           MOVE WS-VALUE-LEN               TO SA-VALUE-LEN     (SAX)\n           MOVE WS-VALUE                   TO SA-VALUE         (SAX)\n           MOVE WS-LVL-IND                 TO SA-LVL-IND       (SAX)\n           MOVE 'N'                        TO SA-VAL-NP-CHG-SW (SAX)\n           MOVE 'N'                        TO SA-VAL-NP-USE-SW (SAX)\n\n      *    IF WE ADDED A NEW SYMBOL THAT GOT IT'S VALUE FROM ANOTHER\n      *    SYMBOL THAT WAS ALREADY FLAGGED FOR POTENTIAL WARNINGS,\n      *    FLAG THE NEW SYMBOL FOR POTENTIAL WARNINGS TOO.\n           IF WS-PGM-PHASE-JCLSCAN\n             IF (WS-NESTED-PROC-SW = '1' OR 'Y')\n             AND WS-INHERIT-NP-CHG\n               MOVE 'Y'                    TO SA-VAL-NP-CHG-SW (SAX)\n             END-IF\n           END-IF\n           .\n       8810-EXIT. EXIT.\n      ******************************************************************\n       8820-CHG-SA-ENTRY.\n      ******************************************************************\n      *    THIS ROUTINE CHANGES AN ENTRY IN THE SUBSTITUTES ARRAY\n      ******************************************************************\n           MOVE '8820-CHG-SA-ENTRY'        TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           IF WS-LVL-IND > SA-LVL-IND(SAX)\n             MOVE WS-LVL-IND               TO SA-LVL-IND       (SAX)\n             IF NOT WS-PGM-PHASE-JCLSCAN\n               MOVE 'N'                    TO SA-VAL-NP-CHG-SW (SAX)\n             END-IF\n           END-IF\n\n           MOVE SA-VALUE-LEN(SAX)          TO WS-LX\n\n           IF WS-LVL-IND = SA-LVL-IND(SAX)\n           AND (WS-VALUE-LEN NOT = WS-LX\n             OR WS-VALUE(1:WS-LX) NOT = SA-VALUE(SAX)(1:WS-LX))\n\n             MOVE WS-VALUE-LEN             TO SA-VALUE-LEN  (SAX)\n             MOVE WS-VALUE                 TO SA-VALUE      (SAX)\n\n             IF WS-PGM-PHASE-JCLSCAN\n      *        IF WE ARE IN THE NESTED PROC WORLD,\n      *        FLAG CHANGES FOR POTENTIAL WARNINGS.\n               IF WS-NESTED-PROC-SW = '1' OR 'Y'\n                 MOVE 'Y'                  TO SA-VAL-NP-CHG-SW (SAX)\n               ELSE\n                 MOVE 'N'                  TO SA-VAL-NP-CHG-SW (SAX)\n               END-IF\n             END-IF\n\n           END-IF\n           .\n       8820-EXIT. EXIT.\n      *****************************************************************\n       8900-CALL-TSO.\n      *****************************************************************\n      *    THIS ROUTINE CALLS IKJEFT TO PROCESS A TSO COMMAND\n      *****************************************************************\n           MOVE '8900-CALL-TSO'            TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n           PERFORM VARYING WS-IKJEFT-LENGTH\n             FROM LENGTH OF WS-IKJEFT-BUFFER BY -1\n             UNTIL WS-IKJEFT-LENGTH = 1\n                OR WS-IKJEFT-BUFFER(WS-IKJEFT-LENGTH:1) > SPACES\n           END-PERFORM\n\n           CALL 'IKJEFTSR' USING WS-IKJEFT-FLAGS\n                                 WS-IKJEFT-BUFFER\n                                 WS-IKJEFT-LENGTH\n                                 WS-IKJEFT-RC\n                                 WS-IKJEFT-REASON-CD\n                                 WS-IKJEFT-ABEND-CD\n           END-CALL\n\n           IF WS-IKJEFT-RC NOT = ZERO\n              MOVE WS-IKJEFT-RC            TO WS-DISPLAY-RC\n              DISPLAY 'IKJEFTSR FAILED - RC=' WS-DISPLAY-RC\n              MOVE WS-IKJEFT-REASON-CD     TO WS-DISPLAY-RC\n              DISPLAY '         REASON CODE=' WS-DISPLAY-RC\n              MOVE WS-IKJEFT-ABEND-CD      TO WS-DISPLAY-RC\n              DISPLAY '          ABEND CODE=' WS-DISPLAY-RC\n              DISPLAY 'CMD=<' WS-IKJEFT-BUFFER(1:WS-IKJEFT-LENGTH) '>'\n              MOVE 20                      TO WS-LASTCC\n              PERFORM 9998-HANDLE-LASTCC                 THRU 9998-EXIT\n           END-IF\n           .\n       8900-EXIT. EXIT.\n      ******************************************************************\n       9000-END-OF-JOB.\n      ******************************************************************\n      *    THIS ROUTINE CLOSES FILES AND DISPLAYS PROCESSING COUNTS.\n      ******************************************************************\n           MOVE '9000-END-OF-JOB'          TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      * DISPLAY THE NESTED PROC WARNING IF NEEDED\n           IF  WS-NESTED-PROC-SW    = 'Y'\n             PERFORM 9100-NESTED-PROC-WARNING            THRU 9100-EXIT\n           END-IF\n\n      * DISPLAY PROCESSING COUNTS\n           DISPLAY '****************************************'\n                   '****************************************'\n091020     DISPLAY '**** STATISTICS FOR PROGRAM ' PGM-NAME\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '* RECORD COUNTS:'\n           MOVE WS-FILES-READ                    TO WS-DISPLAY-CNT\n           DISPLAY '*   FILES/MEMBERS READ.......:' WS-DISPLAY-CNT\n           MOVE WS-FILES-WRITTEN                 TO WS-DISPLAY-CNT\n           DISPLAY '*   FILES/MEMBERS WRITTEN....:' WS-DISPLAY-CNT\n           MOVE WS-CARDS-READ                    TO WS-DISPLAY-CNT\n           DISPLAY '*   CARDS READ...............:' WS-DISPLAY-CNT\n           MOVE WS-CARDS-CHANGED                 TO WS-DISPLAY-CNT\n           DISPLAY '*       CARDS MODIFIED.......:' WS-DISPLAY-CNT\n           MOVE WS-CARDS-UNCHANGED               TO WS-DISPLAY-CNT\n           DISPLAY '*       CARDS UNCHANGED......:' WS-DISPLAY-CNT\n           MOVE WS-PARM-CARDS-READ               TO WS-DISPLAY-CNT\n           DISPLAY '*     PARM CARDS READ........:' WS-DISPLAY-CNT\n           MOVE WS-CARDS-WRITTEN                 TO WS-DISPLAY-CNT\n           DISPLAY '*     DATA CARDS WRITTEN.....:' WS-DISPLAY-CNT\n           MOVE WS-MAXCC                         TO WS-DISPLAY-CNT\n           DISPLAY '* MAX RETURN CODE............:' WS-DISPLAY-CNT\n           DISPLAY '****************************************'\n                   '****************************************'\n091020     DISPLAY '**** END PROGRAM ' PGM-NAME\n           DISPLAY '****************************************'\n                   '****************************************'\n           .\n       9000-EXIT. EXIT.\n      *****************************************************************\n       9100-NESTED-PROC-WARNING.\n      *****************************************************************\n      *    THIS ROUTINE DISPLAYS THE NESTED PROC WARNING MESSAGES\n      *****************************************************************\n           MOVE '9100-NESTED-PROC-WARNING' TO WS-PARAGRAPH-NAME\n           IF WS-DEBUG-TRACE\n             DISPLAY                          WS-PARAGRAPH-NAME\n           END-IF\n\n      *    FIND THE LENGTH OF THE LONGEST NAME, RESET NP-USED SWITCH\n      *    BECAUSE THEY MAY HAVE BEEN CLEARED BY PARM OVERRIDES\n           MOVE 'N'                        TO SA-ANY-VAL-NP-USE-SW\n           MOVE ZERO                       TO WS-LEN\n           PERFORM VARYING SAX FROM 1 BY 1\n             UNTIL SAX > SA-CNT\n               IF SA-VAL-NP-USE-SW(SAX) = 'Y'\n                 MOVE 'Y'                  TO SA-ANY-VAL-NP-USE-SW\n               END-IF\n               IF SA-NAME-LEN (SAX) > WS-LEN\n                 MOVE SA-NAME-LEN (SAX)    TO WS-LEN\n               END-IF\n           END-PERFORM\n\n           IF SA-ANY-VAL-NP-USE-SW = 'N'\n             GO TO 9100-EXIT\n           END-IF\n\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '**** WARNING: THE FOLLOWING SUBSTITUTION'\n                   ' VALUES MAY NOT BE CORRECT FOR THE  ****'\n           DISPLAY '****          PROCSTEP THAT THIS PROGRAM'\n                   ' WAS EXECUTED IN.                   ****'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****************************************'\n                   '****************************************'\n\n      *    DISPLAY THE NAMES AND VALUES OF THE NP-USED SYMBOLS\n           PERFORM VARYING SAX FROM 1 BY 1\n             UNTIL SAX > SA-CNT\n               IF SA-VAL-NP-USE-SW(SAX) = 'Y'\n                 DISPLAY '  &'\n                   SA-NAME (SAX)(1:WS-LEN)        ' ===> <'\n                   SA-VALUE(SAX)(1:SA-VALUE-LEN(SAX)) '>'\n               END-IF\n           END-PERFORM\n\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****                      WHY DID YOU GE'\n                   'T THIS ERROR?                       ****'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '**** THIS STEP WAS EXECUTED FROM WITHIN '\n                   'A PROC THAT EXECUTED A NESTED PROC. ****'\n           DISPLAY '**** THE SYMBOLIC VALUES SHOWN ABOVE WER'\n                   'E CHANGED WITHIN THAT NESTED PROC.  ****'\n           DISPLAY '**** DUE TO LIMITATIONS IN THE ABILITY T'\n                   'O DETERMINE THE ENDING LOCATIONS OF ****'\n           DISPLAY '**** NESTED PROCS FROM THE JESJCL LISTIN'\n                   'G, IT CANNOT BE DETERMINED WHERE    ****'\n           DISPLAY '**** THE SCOPE ENDS AND THE VALUES SHOUL'\n                   'D REVERT TO THEIR FORMER STATE.     ****'\n           DISPLAY '**** FOR THIS REASON IT IS POSSIBLE THAT'\n                   ' THE SYMBOLS LISTED ABOVE MAY HAVE  ****'\n           DISPLAY '**** HAD INCORRECT VALUES AT THE TIME WH'\n                   'EN THEY WERE SUBSTITUTED.           ****'\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****                 WHAT CAN YOU DO TO '\n                   'PREVENT THIS ERROR?                 ****'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****************************************'\n                   '****************************************'\n091020     DISPLAY '**** THE PREFERRED SOLUTION IS TO MOVE T'\n091020             'HE STEP THAT EXECUTES ' PGM-NAME '      ****'\n           DISPLAY '**** AHEAD OF ANY STEPS THAT EXECUTE NES'\n                   'TED PROCS.                          ****'\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '**** ALTERNATELY, YOU CAN ASSURE THAT TH'\n                   'E CORRECT VALUES FOR THESE SPECIFIC ****'\n           DISPLAY '**** SYMBOLS ARE USED BY PASSING THEM ON'\n                   ' THE PARM AS FOLLOWS:               ****'\n           DISPLAY '****                                    '\n                   '                                    ****'\n\n           MOVE SPACES                     TO SA-STRING\n           MOVE 1                          TO WS-BX\n      *    STRING THE NAMES AND VALUES TOGETHER AS A PARM\n           PERFORM VARYING SAX FROM 1 BY 1\n             UNTIL SAX > SA-CNT\n               IF SA-VAL-NP-USE-SW(SAX) = 'Y'\n                 IF WS-BX = 1\n                   MOVE '**** PARM=('''    TO SA-STRING(WS-BX:12)\n                   ADD 12                  TO WS-BX\n                 ELSE\n                   MOVE ','                TO SA-STRING(WS-BX:1)\n                   ADD 1                   TO WS-BX\n                 END-IF\n                 MOVE SA-NAME-LEN(SAX)     TO WS-LX\n                 MOVE SA-NAME(SAX)(1:WS-LX)\n                                           TO SA-STRING(WS-BX:WS-LX)\n                 ADD WS-LX                 TO WS-BX\n                 MOVE '=&'                 TO SA-STRING(WS-BX:2)\n                 ADD 2                     TO WS-BX\n                 MOVE SA-NAME-LEN(SAX)     TO WS-LX\n                 MOVE SA-NAME(SAX)(1:WS-LX)\n                                           TO SA-STRING(WS-BX:WS-LX)\n                 ADD WS-LX                 TO WS-BX\n               END-IF\n           END-PERFORM\n           MOVE ''')'                      TO SA-STRING(WS-BX:2)\n           ADD 1                           TO WS-BX\n           IF WS-BX < 76\n             MOVE '****'                   TO SA-STRING(77:4)\n             MOVE 80                       TO WS-BX\n           END-IF\n\n           DISPLAY SA-STRING(1:WS-BX)\n\n           DISPLAY '****                                    '\n                   '                                    ****'\n           DISPLAY '****************************************'\n                   '****************************************'\n           DISPLAY '****************************************'\n                   '****************************************'\n\n      *    SET RETURN CODE TO 8\n           MOVE 8                          TO WS-LASTCC\n           PERFORM 9998-HANDLE-LASTCC                    THRU 9998-EXIT\n           .\n       9100-EXIT. EXIT.\n      ******************************************************************\n       9998-HANDLE-LASTCC.\n      ******************************************************************\n      *    THIS ROUTINE HANDLES THE ERROR CODE                         *\n      ******************************************************************\n\n           IF WS-LASTCC > WS-MAXCC\n               MOVE WS-LASTCC              TO WS-MAXCC\n           END-IF\n           IF WS-MAXCC > 12\n              GO TO 0000-MAINLINE-EXIT\n           END-IF\n           .\n       9998-EXIT. EXIT.\n      ******************************************************************\n      * BEGIN NESTED PROGRAM CHGDDNM                                   *\n      ******************************************************************\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CHGDDNM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  FILE-DCB.\n           05 FILLER                   PIC X(40).\n           05 FILE-DCB-DDNAME          PIC X(8).\n           05 FILLER                   PIC X(48).\n       01  NEW-DDNAME                  PIC X(8).\n       PROCEDURE DIVISION  USING FILE-DCB, NEW-DDNAME.\n           MOVE NEW-DDNAME         TO FILE-DCB-DDNAME\n           GOBACK\n           .\n       END PROGRAM CHGDDNM.\n       END PROGRAM SYMBSUB.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT779/FILE779.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT779", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}