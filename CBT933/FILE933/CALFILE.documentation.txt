//*ADD NAME=@FILE930 0490-15126-15126-1204-00090-00090-00000-CBT-490*   FILE 930
//***FILE 930 is from Phil Polchinski and contains the maxmium      *   FILE 930
//*           size "Calendar File" (LRECL=35) that can be generated *   FILE 930
//*           by his "calendar generation" program, which he is     *   FILE 930
//*           not distributing here.  BUT ONCE YOU HAVE THE         *   FILE 930
//*           "CALENDAR FILE", THAT IS ALL YOU NEED.  This is the   *   FILE 930
//*           maximum-sized date file which Phil's program can      *   FILE 930
//*           generate.  (You can use parts of the file, as         *   FILE 930
//*           well as the full file, if space is a consideration.)  *   FILE 930
//*                                                                 *   FILE 930
//*           This calendar file has dates ranging from             *   FILE 930
//*           January 1, 1753 thru December 31, 2600.               *   FILE 930
//*                                                                 *   FILE 930
//*           The format of this calendar file allows for sure-fire *   FILE 930
//*           calculations (which are accurate) for complicated     *   FILE 930
//*           date-difference questions, and for all kinds of       *   FILE 930
//*           other purposes, all having to do with dates.          *   FILE 930
//*                                                                 *   FILE 930
//*     The Calendar File is in TSO XMIT format, and can be         *   FILE 930
//*     obtained using the TSO RECEIVE command as follows:          *   FILE 930
//*                                                                 *   FILE 930
//*     TSO RECEIVE INDS(this.pds(CALFILEX))                        *   FILE 930
//*                                                                 *   FILE 930
//*       and then you follow the prompts or press ENTER.           *   FILE 930
//*                                                                 *   FILE 930
//*       (The TSO HELP for the RECEIVE command will tell you       *   FILE 930
//*        the particulars of all the prompts.)                     *   FILE 930
//*                                                                 *   FILE 930
//*     To obtain the calendar file more easily, File 932 contains  *   FILE 930
//*     an EBCDIC version of the calendar file (LRECL=35), and      *   FILE 930
//*     File 933 contains an ASCII text version of the calendar     *   FILE 930
//*     file.  For further information, pleaae send emails to:      *   FILE 930
//*                                                                 *   FILE 930
//*       email:  philmpolchinski@hotmail.com                       *   FILE 930
//*                                                                 *   FILE 930
//*     In this file, you have the maximum-size file which can      *   FILE 930
//*     be created with Phil Polchinski's program, so therefore     *   FILE 930
//*     you can program solutions to solve all the date problems    *   FILE 930
//*     which you want to solve (hopefully) between the years of    *   FILE 930
//*     1753 thru 2600.                                             *   FILE 930
//*                                                                 *   FILE 930
//*                                                                 *   FILE 930
//*ADD NAME=$$NOTE01 0100-15111-15111-2133-00113-00113-00000-SBGOLOB*   FILE 930

              CALFILE - The Interval Calendar File

The Interval Calendar File is an actual calendar in a file format that contains
a continuous flow of individual date records.  This file contains fixed-length
35-byte records and can be easily moved and used on other platforms.

All "date records" appear in accurate and sequential order where:
    366 sequential Date Records exist for each Leap Year
    365 sequential Date Records exist for each Non-Leap Year

CALFILE contains some unique features not available elsewhere:
    A dependable, accurate calendar that requires no maintenance
    Every date is identified by its correct weekday name
    The exact interval between any 2 dates is easily determined
    There are no issues with overlapping Months or Years
    Can be used on a DB2 table or on any other platform

All dates are identified by their correct weekday name and by its exact
occurrence of when that date falls within that month, i.e., the First Monday,
the Last Friday, etc.  All date conversions between Gregorian and Julian
are a snap regardless of whether a leap year is involved or not.

CALFILE can assist with giving faster solutions for date-related coding issues
because every record contains a unique sequential counter.  Programmers can
easily obtain the precise interval between any 2 dates. They can just as
easily find a "new" date simply by adding or subtracting a number of days
to the sequential counter found in the first date record.

These sample problems can be easily solved by using CALFILE:

Determine the Day of the Week for July 4, 2016
Determine the calendar date for Thanksgiving Day, 2015
Determine the exact interval between February 15 and May 15, 2015
Determine the exact interval between February 15 and May 15, 2016
Determine the number of Tuesdays that will occur during the
    month of January 2016
Determine the calendar date for the last Tuesday during the
    month of January 2016
Determine the new calendar date when adding 180 days to
    November 20, 2015
Determine the new calendar date when adding 180 days to
    November 20, 2016
Determine the calendar date and day of the week for Julian Date
    060 in the year 2016
Determine the calendar date for the Monday before
    Thanksgiving Day, 2015
Determine the number of days remaining in the month,
    when it is February 19, 2015
Determine the number of days remaining in the month,
    when it is February 19, 2016
Determine the number of days remaining in the year,
    when it is February 19, 2015
Determine the number of days remaining in the year,
    when it is February 19, 2016
Create a list of dates containing all first Mondays that will
    occur during a 100 year period from 1950 through 2050
Create a list of dates containing all last Fridays that will
    occur during a 100 year period from 2000 through 2100

                 RECORD DESCRIPTION

Each Record Contains A Unique Date Where All Remaining Data
Fields Relate to this Date

Col 1-8:    A Unique Date appearing in a Gregorian Date Format
            CCYYMMDD

Col 9-10:   The number of days remaining in the month when this
            date occurs

Col 11-12:  The total number of days in the month when this date
            occurs

Col 13:     The 1st to 5th occurrence of this weekday name when this
            date occurs

Col 14:     The number of remaining occurrences of this weekday
            name when this date occurs

Col 15:     The total number of occurrences of this weekday name
            when this date occurs

Col 16-18:  The correct weekday name for this date  -
            This is a FIRST !!!

Col 19-21:  This Unique Date appearing in a Julian Date Format

Col 22-24:  The number of days remaining in the year when this
            date occurs

Col 25:     An "L" or "C" to denote that this date occurs during
            a Leap or non-Leap Year

Col 26-27:  The weekday name of the first day of the month when
            this date occurs

Col 28-29:  The weekday name of the last day of the month when
            this date occurs

Col 30-35:  A specific 6-digit sequence number is assigned to
            each unique date

