{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011530000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE227.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE227.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\t'", "DS1TRBAL": "b'5\\xca'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x9d\\x00\\x05\\x01\\x9d\\x00\\x0b\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92!?\\x00\\x92!\\x7f\\x11E\\x00*\\x00\"\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-08-04T11:45:00", "lines": 42, "newlines": 34, "modlines": 0, "user": "SBGCSC"}, "text": "\n  THIS PDS IS A SERIES OF PROGRAMS TO ALLOW CERTAIN TSO USERS TO\n  PERFORM AUTHORIZED FUNCTIONS\n\n      MEMBER          DESCRIPTION\n\n      $DOC            THIS DOCUMENTATION FILE\n      AOFF            PROGRAM TO TURN THE AUTHORIZATION BIT OFF\n      AON             PROGRAM TO TURN THE AUTHORIZATION BIT ON\n      AUTHSVC         ANOTHER AUTH SVC.  LA R0,0 TO TURN ON.  07/92 SBG\n                      OTHER CODE IN THIS FILE USES THE OTHER  07/92 SBG\n                      AUTH SVC, PRESUMABLY.  LA R0,1 TURNS IT 07/92 SBG\n                      OFF.                                    07/92 SBG\n      AUTSVC          ANOTHER SVC THAT DOES THE SAME THING.   07/92 SBG\n                      THIS ONE HAS NO PASSWORD CHECKS OR ANY  07/92 SBG\n                      EXTRA STUFF.  (FROM A SWISS G.U.I.D.E.  07/92 SBG\n                      TAPE OR SOME SIMILAR COLLECTION.)       07/92 SBG\n      BEGIN           USER MACRO\n      CBT385          PROGRAM TO ATTACH IEBCOPY IN AN AUTHORIZED\n                      ENVIRONMENT FOR ANYONE\n      CBT594          PROGRAM TO ATTACH IKJEFT01 IN AN AUTHORIZED\n                      ENVIRONMENT FOR ANYONE\n      CBT390          VALIDATION OF USER IDS TO DO AN AUTHORIZED\n                      FUNCTION\n      D0              PROGRAM TO ATTACH A LOAD MODULE VIA\n                      LINKLIST (AUTHORIZED)\n      D0D0            SAME AS D0 EXCEPT BEFORE PGM IS ATTACHED\n                      THIS CODE GOES TO KEY 0 AND SUPERVISOR\n                      STATE. USED TO GET AROUND PTF UZ26385\n                      (APAR OZ39506) FOR DIDOCS AND SPY. THIS\n                      PTF PUT THE CONSOLE BUFFERS INTO PROTECTED\n                      STORAGE\n      ENDALL          USER MACRO\n      HREADY          HELP MEMBER FOR CBT594 (ALIAS READY)\n      IGC0025D        USER SVC TO TURN AUTHORIZE BIT ON/OFF\n      SAVEALL         USER MACRO\n      XEQ             PROGRAM TO ATTACH A LOAD MODULE VIA\n                      LINKLIST (NOT AUTHORIZED)\n      LISTPW          TSO CP TO LIST ENTRIES FROM THE PASSWORD\n                      DATA SET\n      UADS            TSO CP TO ALLOW AUTHORIZED USERS THE ABILITY\n                      TO CHANGE THEIR PSCB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AOFF": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&NAME    AUTH  &P\n         AIF   ('&NAME' EQ '').START\n&NAME    DS    0H\n.START   AIF   ('&P' EQ '' OR '&P' NE 'ON').OFF\n         SR    1,1 .               LOAD AUTHORIZATION ON CODE\n         SVC   254 .               TURN AUTHORIZATION ON\n         MEXIT\n.OFF     LA    1,4 .               LOAD AUTHORIZATION OFF CODE\n         SVC   254 .               TURN AUTHORIZATION OFF\n         MEND\n         EJECT\nAOFF     BEGIN &SYSDATE,BASE1=12\n         LINK  EP=CBT390,PARAM=(PARM)\n         AUTH  OFF                 TURN AUTHORIZATION OFF\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n         EJECT\nPARM     DC    XL2'0200'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AON": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&NAME    AUTH  &P\n         AIF   ('&NAME' EQ '').START\n&NAME    DS    0H\n.START   AIF   ('&P' EQ '' OR '&P' NE 'ON').OFF\n         SR    1,1 .               LOAD AUTHORIZATION ON CODE\n         SVC   254 .               TURN AUTHORIZATION ON\n         MEXIT\n.OFF     LA    1,4 .               LOAD AUTHORIZATION OFF CODE\n         SVC   254 .               TURN AUTHORIZATION OFF\n         MEND\n         EJECT\nAON      BEGIN &SYSDATE,BASE1=12\n         LINK  EP=CBT390,PARAM=(PARM)\n         AUTH  ON                  TURN AUTHORIZATION ON\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n         EJECT\nPARM     DC    XL2'0100'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTHSVC": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x92!?\\x00\\x92!\\x7f\\x10\\x10\\x00C\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-08-04T10:10:00", "lines": 67, "newlines": 22, "modlines": 0, "user": "SBGCSC"}, "text": "//SBGCSC  JOB (A006,SYTM,99,99),S-GOLOB,\n//        CLASS=S,MSGCLASS=V,NOTIFY=SBGCSC\n/*DIST ROOM-9\n//************************************************************//\n//**    Example of a Simple Authorization SVC for MVS       **//\n//************************************************************//\n//* ---------  ASSEMBLY AND LINKEDIT PROCEDURE  ------------ *//\n//REASMLNK PROC\n//*SM    EXEC  PGM=IEV90,REGION=2048K,        IBM H ASSEMBLER\n//ASM    EXEC  PGM=AEV90,REGION=2048K,        SLAC ASSEMBLER\n//             PARM=(DECK,NOOBJECT,NORLD,RENT,TERM,'XREF(SHORT)')\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.USER.LINKLIB   <--- HAS SLAC ASMBLR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(MOD,PASS),DSN=&&X,\n//             DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR,DCB=BLKSIZE=23440\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//*        DD  DSN=SYS2.SBG.MACLIB,DISP=SHR\n//LKED   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR,LET,NCAL',COND=(0,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIBX  DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=&OUTPUT\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//   PEND\n//* -------------------------------------------------------- *//\n//IGC0022C  EXEC REASMLNK,OUTPUT='SBGCSC.A.LOAD',         <=== CHANGE\n//  PARM.LKED='NCAL,MAP,LIST,LET,RENT,REUS'\n//ASM.SYSIN   DD *\nIGC0022C CSECT                                                     0000  000000\n         BALR  R12,0                   05C0       R12 IS BASE      0000  000000\n         USING *,R12                              TELL ASSEMBLER\n         C     R1,STRING               5910 C01E  COMPARE TO \"AUTH\"0002  000002\n         BNE   RETURN                  4770 C01C  NOT EQUAL, RETRN 0006  000006\n         L     R2,180(,R4)             5820 40B4  JSCB OFF TCB     000A  00000A\n         BCT   R0,AUTHOFF              4600 C018  TEST R0 IF ZERO  000E  00000E\nAUTHON   OI    236(R2),X'01'           9601 20EC  TURN JSCBAUTH ON 0012  000012\n         B     RETURN                  47F0 C01C  BACK TO CALLER   0016  000016\nAUTHOFF  NI    236(R2),X'FE'           94FE 20EC  TURN JSCBAUTH OFF001A  00001A\nRETURN   BR    R14                     07FE       RETURN           001E  00001E\nSTRING   DC    C'AUTH'                 C1E4E3C8   *AUTH* STRING    0020  000020\nR0       EQU   0              R\nR1       EQU   1                E\nR2       EQU   2                  G\nR3       EQU   3                    I\nR4       EQU   4                      S\nR5       EQU   5                        T\nR6       EQU   6                          E\nR7       EQU   7                            R\nR8       EQU   8\nR9       EQU   9                                E\nR10      EQU   10                                 Q\nR11      EQU   11                                   U\nR12      EQU   12                                     A\nR13      EQU   13                                       T\nR14      EQU   14                                         E\nR15      EQU   15                                           S\n         END\n//LKED.SYSLIN  DD *\n INCLUDE SYSLIBX\n ORDER   IGC0022C\n ENTRY   IGC0022C\n NAME    IGC0022C(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUTHSVC#": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!\\x7f\\x00\\x92!\\x7f\\tD\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-08-04T00:00:00", "modifydate": "1992-08-04T09:44:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SBGCSC"}, "text": "DOC FOR AUTHSVC.                                              07/92 SBG\n                                                              07/92 SBG\n      THIS IS ANOTHER SIMPLE AUTHORIZATION SVC.  JUST         07/92 SBG\nINCLUDED FOR THE HECK OF IT.  HOPE IT HELPS SOMEBODY IN       07/92 SBG\nSOME SITUATION.                                               07/92 SBG\n                                                              07/92 SBG\n    LA  R0,0    TO TURN ON                                    07/92 SBG\n    SVC 223                                                   07/92 SBG\n                                                              07/92 SBG\n    LA  R0,1    TO TURN OFF                                   07/92 SBG\n    SVC 223                                                   07/92 SBG\n                                                              07/92 SBG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTSVC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92!\\x7f\\x00\\x92!\\x7f\\x11B\\x00!\\x00!\\x00\\x04\\xe2\\xe6\\xc9\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-08-04T00:00:00", "modifydate": "1992-08-04T11:42:00", "lines": 33, "newlines": 33, "modlines": 4, "user": "SWISS"}, "text": "     TITLE '*** P9030100 SVC 219 (IGC0021I)  - AUTHORIZATION -  ***  '\n**********************************************************************\n*/*P9030100    SET AUTHORIZATION ON/OFF  (FROM SWISS G.U.I.D.E. TAPE *\n*                                                     (I THINK))     *\n*1 FUNCTION    ALLOWS USER TO AUTHORIZE HIS PROGRAM                  *\n*              THIS IS A TYPE-3 SVC                                  *\n*2 SUMMARY                                                           *\n*  TYPE        SYSTEM    UTLITIY                                     *\n*  ACCOUNT     90                                                    *\n*  ENTRY       IGC0021I                                              *\n*  HISTORY     1979.06   HE   FIRST VERSION                          *\n*              1982.04   HE   CONVERT TO  MVS-SP                     *\n*3 USAGE       SIEHE PROGRAMMIER-RICHTLINIEN, HAUPTKAPITEL 01        *\n*              SVC 219                                               *\n**/                                                                  *\n**********************************************************************\n         SPACE 1\nAUTHON   EQU   X'01'\nAUTHOFF  EQU   X'FE'\n         SPACE 2\nIGC0021I CSECT\n         BALR  9,0                      ADRESSABILITY OF PROGRAM\n         USING *,9\n         L     2,180(4)                 TCBJSCB\n         BCT   0,SETOFF                 R0 \u00ac= 1, REQUESTS AUTH OFF\n         OI    236(2),AUTHON            JSCBOPTS,JSCBAUTH BIT\n         B     RETURN\n         SPACE 1\nSETOFF   DS    0H\n         NI    236(2),AUTHOFF           CLEAR JSCBAUTH BIT\nRETURN   DS    0H\n         BR    14\n         END   IGC0021I\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BEGIN": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00\\x83\\x00\\x83\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 131, "newlines": 131, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&NAME    BEGIN &DATE,&BASE1=,&BASE2=,&BASE3=,&NOEQU=,&EQU=\n         LCLA  &REG,&S,&SW\n         LCLC  &P\n         AIF   (T'&NAME EQ 'O').ONE\n&NAME    CSECT\n         AGO   .TWO\n.ONE     ANOP\n         MNOTE 12,'NO CSECT NAME SPECIFIED - MACRO NOT EXPANDED'\n         AGO   .EXIT\n.TWO     AIF   (T'&DATE NE 'O').THREE\n         MNOTE 12,'NO DATE SPECIFIED - MACRO NOT EXPANDED'\n         AGO   .EXIT\n.THREE   B     20(15)\n         DC    CL8'&NAME'\n         DC    CL8'&DATE'\n         AIF   (T'&NOEQU EQ 'O').DOEQU\n&P       SETC    'BEGINM'\n         AIF    (T'&BASE1 NE 'O').DONOT1\n&P.3     EQU   3\n         AGO   .AROUND\n.DONOT1   ANOP\n         AIF   (&BASE1 EQ 15).N01\n         AIF   (&BASE1 EQ 12).N01\n&P&BASE1 EQU   &BASE1\n.N01     ANOP\n         AIF   (T'&BASE2 EQ 'O').AROUND\n         AIF   (&BASE2 EQ 12).N02\n         AIF   (&BASE2 EQ 15).N02\n&P&BASE2 EQU   &BASE2\n.N02     ANOP\n         AIF   (T'&BASE3 EQ 'O').AROUND\n         AIF   (&BASE3 EQ 12).N03\n         AIF   (&BASE3 EQ 15).N03\n&P&BASE3 EQU   &BASE3\n.N03     ANOP\n&P.12    EQU   12\n&P.13    EQU   13\n&P.14    EQU   14\n&P.15    EQU   15\n         AGO   .AROUND\n.DOEQU    ANOP\n         AIF   (T'&EQU EQ 'O').FOUR\n&P       SETC  '&EQU'\n         AGO   .FOURA\n.FOUR    ANOP\n&P       SETC  'R'\n.FOURA   ANOP\n&P.0     EQU   0\n&P.1     EQU   1\n&P.2     EQU   2\n&P.3     EQU   3\n&P.4     EQU   4\n&P.5     EQU   5\n&P.6     EQU   6\n&P.7     EQU   7\n&P.8     EQU   8\n&P.9     EQU   9\n&P.10    EQU   10\n&P.11    EQU   11\n&P.12    EQU   12\n&P.13    EQU   13\n&P.14    EQU   14\n&P.15    EQU   15\n.AROUND  ANOP\n         AIF   (T'&BASE1 EQ 'O').GOODBAS\n         AIF   (&BASE1 EQ 0).BADBASE  BASE1 CANNOT BE EQUAL TO 0\n         AIF   (&BASE1 EQ 1).BADBASE  BASE1 CANNOT BE EQUAL TO 1\n         AIF   (&BASE1 EQ 13).BADBASE BASE1 CANNOT BE EQUAL TO 13\n         AIF   (&BASE1 EQ 14).BADBASE BASE1 CANNOT BE EQUAL TO 14\n         AIF   (T'&BASE2 EQ 'O').GOODBAS  IF BASE2 NOT DEFINED DONT TST\n         AIF   (&BASE2 EQ 0).BADBASE BASE 2 CONNOT BE EQUAL TO 0\n         AIF   (&BASE2 EQ 1).BADBASE BASE 2 CONNOT BE EQUAL TO 1\n         AIF   (&BASE2 EQ 13).BADBASE BASE2 CONNOT BE EQUAL TO 13\n         AIF   (&BASE2 EQ 14).BADBASE BASE2 CONNOT BE EQUAL TO 14\n         AIF   (T'&BASE3 EQ 'O').GOODBAS IF BASE3 NOT DEFINED DONT TST\n         AIF   (&BASE3 EQ 0).BADBASE  BASE3 CONNOT BE EQUAL TO 0\n         AIF   (&BASE3 EQ 1).BADBASE  BASE3 CONNOT BE EQUAL TO 1\n         AIF   (&BASE3 EQ 13).BADBASE BASE3 CONNOT BE EQUAL TO 13\n         AIF   (&BASE3 NE 14).GOODBAS BASE3 CONNOT BE EQUAL TO 14\n.BADBASE MNOTE 16,'BASE REGISTER  SPECIFIED MUST NOT BE 0,1,13,14 MACRO-\n               NOT EXPANDED'\n         AGO   .EXIT\n.GOODBAS ANOP\n&SW      SETA  0\n&S       SETA  15\n.FIVE    AIF   (T'&BASE1 EQ 'O').SIX\n&REG     SETA  &BASE1\n         AGO   .TEST\n.SIX     ANOP\n&REG     SETA  3\n         AGO   .TEST\n.LOOP    AIF   (&SW EQ 1).LOOP1\n&SW      SETA  1\n&S       SETA  2\n.LOOP1   ANOP\n&S       SETA  &S+1\n         AIF   (&S GT 12).EXIT\n.TEST    AIF   (&REG EQ &S).LOOP\n         AIF   (T'&BASE2 EQ 'O').SEVEN\n         AIF   (&BASE2 EQ &S).LOOP\n         AIF   (T'&BASE3 EQ 'O').SEVEN\n         AIF   (&BASE3 EQ &S).LOOP\n.SEVEN   STM   &P.14,&P.12,12(&P.13)\n         BALR  &P&REG,0\n         AIF   (T'&BASE3 EQ 'O').EIGHT\n         USING *,&P&BASE1,&P&BASE2,&P&BASE3\n         L     &P&BASE2,*+14\n         L     &P&BASE3,*+14\n         B     SAVEAREA+72\n         DS    0F\n         DC    A(*-14+4096,*-18+8192)\n         AGO   .FINI\n.EIGHT   AIF   (T'&BASE2 EQ 'O').NINE\n         USING *,&P&BASE1,&P&BASE2\n         L     &P&BASE2,*+10\n         B     SAVEAREA+72\n         DS    0F\n         DC    A(*-10+4096)\n         AGO   .FINI\n.NINE    ANOP\n         USING *,&P&REG\n         B     SAVEAREA+72\n.FINI    ANOP\nSAVEAREA DC    18F'0'\n         ST    &P.13,SAVEAREA+4\n         LR    &P&S,&P.13\n         LA    &P.13,SAVEAREA\n         ST    &P.13,8(&P&S)\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBT385": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00%\\x00%\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "CNBNTRS"}, "text": "CBT385   SAVEALL REG=(2)            SAVE EVERYTHING BASE IS REG 2\n*\n* THIS PROGRAM ATTACHES IEBCOPY SO A USER MAY DO\n* IT FROM HIS TERMINAL\n*\n         STAX  DEFER=YES            NO INTERRUPTS\n         TPUT  MSG1,L'MSG1          TELL HIM NO INTERRUPTS\nSTAE     STAE  0                    TURN OFF DUMP\n         LTR   R15,R15              IS IT ZERO YET\n         BZ    STAE                 NO IT IS NOT\n         SR    1,1                  ZERO OUT REGISTER 1\n         SVC   254                  SVC 254\n         ATTACH EP=IEBCOPY,ECB=WRKECB,STAI=CBTSTAI,PARAM=(OPTLST),VL=1\n         ST    R1,WRKTCB            SAVE THE TCB ADDRESS\n         WAIT  ECB=WRKECB           WAIT UNTIL HE IS DONE\n         DETACH WRKTCB              DETATCH IEBCOPY\n         LA    1,4                  PUT A 4 IN REGISTER 1\n         SVC   254                  SVC 254\n         STAX  DEFER=NO             LET HIM INTERRUPT\n         ENDALL\nWRKECB   DC    F'0'                 AN ECB\nWRKTCB   DC    F'0'                 A TCB ADDRESS\nOPTLST   DC    F'0'                 NEED AN OPTLIST LIST OF 0'S\nMSG1     DC    C'***    YOU CANNOT INTERRUPT FROM THIS COMMAND     ***'\n     EJECT\nCBTSTAI  CSECT                      A NEW CSECT TO HANDLE ABEND\n         SAVE  (14,12)              SAVE\n         LR    R3,R15               START FOR USING\n         USING CBTSTAI,R3           BASE\n         ST    R13,SAVA+4           SET UP\n         LA    R13,SAVA             STORING CONVENTIONS\n         LA    1,4                  A 4 IN REGISTER 1\n         SVC   254                  SVC 254\n         L     R13,SAVA+4           RESTORE\n         RETURN (14,12),RC=0        AND RETURN\nSAVA     DC    18F'0'               PLACE TO SAVE REGISTERS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBT390": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00\\xb3\\x00\\xb3\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 179, "newlines": 179, "modlines": 0, "user": "CNBNTRS"}, "text": "CBT390   SAVEALL REG=(2)            SAVE EVERYTHING BASE IS REG 2\n**********************************************************************\n*                                                                    *\n*                                                                    *\n*                    REG 2 - BASE REGISTER                           *\n*                                                                    *\n*                    REG 3 - DSECT                                   *\n*                                                                    *\n*                    REG 4 - HOLD PARM ADDRESS                       *\n*                                                                    *\n*                    REG 5 - WORK REGISTER                           *\n*                                                                    *\n*                    REG 6 - JOBNAME REGISTER                        *\n*                                                                    *\n*                    REG 7 - AUTHORIZATION TABLE REGISTER            *\n*                                                                    *\n**********************************************************************\n         TITLE   ' G E T   P A R M   A N D   S T A X'\n         L     R3,0(0,R1)           LOAD DATA AREA ADDRESS TO R3\n         LA    R3,0(R3)             CLEAR HI-ORDER BYTE\n*        LA    R3,2(R3)             GET PAST LENGTH FOR CALL TEST\n         LR    R4,R1                SAVE ADDRESS OF PARM LIST IN R4\n         USING PARM,R3              DSECT HIS FIELD\n         STAX  DEFER=YES            NO INTERUPTS\n         TITLE  '  J O B N A M E    A N D    S T E P N A M E'\n**********************************************************************\n****                                                                 *\n**** THIS SECTION WILL GET THE JOBNAME AND STEPNAME                  *\n****                                                                 *\n* CVT + 0    ADDRESS OF A DOUBLE WORK, THE FIRST CONTAINING          *\n*            THE NEXT-TO-BE DISPATCHED TCB ADDRESS, THE              *\n*            SECOND CONTAINING THE LAST (CURRENT) TCB                *\n*            ADDRESS.                                                *\n*                                                                    *\n* TCB + 12   ADDRESS OF THE TASK I/O TABLE (TIOT)                    *\n*                                                                    *\n* TIOT + 0   JOB NAME                                                *\n*                                                                    *\n* TIOT + 8   STEP NAME FOR A JOB STEP THAT IS NOT A PROCEDURE        *\n*            STEP.                                                   *\n*            FOR A JOB STEP THAT IS A PROCEDURE STEP, PROCEDURE\n*            STEP NAME.                                              *\n*                                                                    *\n***                                                                  *\n**********************************************************************\nSECURE   EQU   *                    AN EQUATE TO ADD INSTRUCTIONS\n         L     R1,16(0)             GET THE CVT\n         L     R1,0(R1)             SHIFT REG ONCE AGAIN\n         L     R1,4(R1)             GET THE CURRENT TCB\n         L     R1,12(R1)            GET TCB + 12 TIOT ADDRESS\n         MVC   JOBNAM,0(R1)         MOVE IN JOBNAME\n         MVC   STEPNA,8(R1)         MOVE IN STEPNAME\n         SR    R5,R5                ZERO OUT REGISTER 5\n         IC    R5,PGMCODE           INSERT THE CALLING PROGRAM CODE\n         CVD   R5,DBLWRD            COVERT THE HEX TO DECIMAL\n         UNPK  NUMBER+33(3),DBLWRD+6(2) WHAT IS THE NUMBER\n         OI    NUMBER+35,X'F0'      GET RID OF A NEGATIVE\n         MVC   MES+7(8),JOBNAM      MOVE IN JOBNAME\n         MVC   MES+17(8),STEPNA     MOVE IN STEPNAME\n         MVC   CIBNAME(8),JOBNAM    MOVE IN JOBNAME TO CIB\n         UNPK  MES+56(3),DBLWRD+6(2) WHAT IS THE NUMBER\n         OI    MES+58,X'F0'         GET RID OF A NEGATIVE\n         TITLE 'A U T H O R I Z E D    U S E R    C H E C K'\n         MVI   AUTHSW,X'00'         SET AUTH SW TO ZERO\n         LA    R7,AUTHTABL          LOAD USERID AUTH. TABLE ADDR\n         LA    R6,JOBNAM            LOAD USERID THAT IS RUNNING\nAUTHLOOP CLC   0(8,R6),0(R7)        IS THIS AN AUTHORIZED USER\n         BE    AUTHSET              YES\n         CLC   0(8,R7),EIGHT1       AM I AT THE END  OF THE TABLE ?\n         BE    SETCODES             LET'S FIND OUT AND SET R.C.\n         LA    R7,8(R7)             NO POINT TO THE NEXT ENTRY\n         B     AUTHLOOP             NO LOOK AGAIN\nAUTHSET  MVI   AUTHSW,X'01'         TURN ON USER AUTH SW\nSETCODES CLI   AUTHSW,X'01'         IS HE AN AUTHORIZED USER\n         BE    EOJ                  OK AN AUTHORIZED USER\n         TITLE 'U N A U T H O R I Z E D    U S E R'\n         WTO   MF=(E,MES)           TIME FOR THE OPER TO KNOW\n         TPUT  MESS,67              FOR TESTING PUT TO TSO\n         CLI   RTNCODE,X'00'        ABEND THE USER\n         BNE   RTNBAD               NO RETURN WITH A BAD CC\n         SR    1,1                  ZERO OUT REGISTER 1\n         SVC   254                  GO TO OUR SVC\n         MODESET KEY=ZERO,MODE=SUP  KEY ZERO SUPERVISOR STATE\n         SR    R1,R1                ZERO OUT REGISTER 1\n         LA    R1,CIBLEN            LOAD ADDRESS OF CIB\n         SR    R0,R0                ZERO OUT REGISTER 0\n         SVC   34                   ISSUE SVC34 TO ISSUE COMMAND\n         MODESET KEY=NZERO,MODE=PROB ORIG PROTECT KEY, PROBLEM STATE\n         LA    1,4                  PUT A 4 IN REGISTER 1\n         SVC   254                  GO TO OUR SVC\n         STIMER WAIT,DINTVL=TIMEX WE WILL NOW WAIT 10 SECONDS\n         STAX  DEFER=NO             LET HIM INTERRUPT\n         ABEND 1                    OH WELL YOU CAN'T WIN THEM ALL\n         B     EOJ                  LET US END\nTIMEX    DC    C'00001000'                 TEN SECONDS\n         TITLE ' E O J'\nEOJ      EQU   *                    AN EQUATE TO ADD INSTRUCTIONS\n         MVI   RTNCODE,X'00'        AN AUTHORIZED USER A OKAY\nSTAX     STAX  DEFER=NO             LET HIM INTERRUPT\n         ENDALL                     THE ENDING MACRO\nRTNBAD   MVI   RTNCODE,X'FF'        A NON-AUTHORIZED USER\n         B     STAX                 LET'S GO BACK\n         TITLE 'C  O  N  S  T  A  N  T  S'\nMESS     DS    0CL67                THE WHOLE MESSAGE AREA\n         DC    CL5'*** ('           LEADING CONSTANTS\nJOBNAM   DC    CL8'JOBNAME '        THE JOBNAME\n         DC    CL1'/'               A VIRGULE\nSTEPNA   DC    CL8'STEPNAME'        THE STEPNAME\nNUMBER   DC    CL45') SECURITY   VIOLATION   NUMBER           ***'\nMES      WTO   '**(JOBNAME  /STEPNAME SECURITY   VIOLATION   NUMBER    C\n                     ) ***',DESC=2,MF=L\nAUTHSW   DS    C                    AUTHORIZATION SWITCH\nDBLWRD   DC    D'0'                 WORK AREA - DOUBLE WORD\nCIBLEN   DC    XL2'12'              LENGTH OF COMMAND\nCIBSPC   DC    XL2'0'               FILL OUT THE REST\nCIBCMD   DC    C'C U='              THE COMMAND IT SELF\nCIBNAME  DC    CL10' '              THE USERID\n         TITLE 'THE AUTHORIZATION TABLE'\nAUTHTABL DS    0F                   AUTHORIZATION TABLE\n         DC    CL8'USER01'          USER01\n         DC    CL8'USER02'          USER02\n         DC    CL8'USER03'          USER03\n         DC    CL8'USER04'          USER04\n         DC    CL8'USER05'          USER05\n         DC    CL8'IBMSE'           IBM-SE\n         DC    CL8'IBMCE'           IBM-CE\n         DC    CL8'IBMPSR'          IBM-PSR\n         DC    CL8' '               OPEN\n         DC    CL8' '               OPEN\n         DC    CL8' '               OPEN\n         DC    CL8' '               OPEN\n         DC    CL8' '               OPEN\n         DC    CL8' '               OPEN\nEIGHT1   DC    CL8'11111111'        TABLE END\n         DS    0F                   LET'S ALIGN\n         TITLE 'T H E    D S E C T     '\nPARM     DSECT                      A DSECT\nPGMCODE  DS    C                    ORIGINIATING PRGM NUMBER\nRTNCODE  DS    C                    RETURN CODE ON WHAT TO DO\n         TITLE      '   C   O   M   M   E   N   T   S'\n**********************************************************************\n*                                                                    *\n*                                                                    *\n*      THIS PROGRAM WILL CHECK TO SEE IF IT IS BEING CALLED BY       *\n*      AN AUTHORIZED USER. I.E. A TECHNICAL SUPPORT TSO USER.        *\n*                                                                    *\n*      THIS PROGRAM EXPECTS A TWO POSITION FIELD.                    *\n*                                                                    *\n*        THE FIRST BYTE BEING THE NUMBER (IN HEX) OF THE CALLING PGM *\n*                                                                    *\n*            01 = CBT700 (AON)                                       *\n*            02 = CBT701 (AOFF)                                      *\n*                                                                    *\n*        THE SECOND BYTE TELLS CBT390 WHAT TO DO                     *\n*                                                                    *\n*            00 = ABEND THE USER IF HE IS NOT AUTHORIZED             *\n*        ANYTHING ELSE = RETURN TO THE CALLING PROGRAM               *\n*                                                                    *\n*     UPON EXIT FROM CBT390                                          *\n*                                                                    *\n*        THE FIRST BYTE IS NOT CHANGED                               *\n*                                                                    *\n*        THE SECOND BYTE                                             *\n*                                                                    *\n*            00 = AUTHORIZED USER                                    *\n*                                                                    *\n*            FF = AN UNAUTHORIZED USER                               *\n*                                                                    *\n*                                                                    *\n*            THE FOLLOWING IS WHAT YOU NEED IN YOUR PROGRAM          *\n*                                                                    *\n*         LINK  EP=CBT390,PARAM=(PARM)                               *\n*                                                                    *\n* PARM  DC XL2'0100'                PGM # 1 AND LOGOFF               *\n*                                                                    *\n* PARM  DC XL2'01FF'                PGM # 1 AND DO NOT LOGOFF        *\n*                                                                    *\n**********************************************************************\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBT594": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00%\\x00%\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "CNBNTRS"}, "text": "*          DATA SET CBT594     AT LEVEL 001 AS OF 01/14/80\nCBT594   SAVEALL REG=2              SAVE EVERYTHING BASE IS REG 2\n*\n* THIS PROGRAM ATTACHES THE TERMINAL MONITOR PROGRAM SO A PROGRAMMER\n* WILL BE ABLE TO GO BACK TO READY WHENEVER HE/SHE WISHES\n*\nSTAE     STAE  0                    TURN OFF DUMP\n         LTR   R15,R15              IS IT ZERO YET\n         BZ    STAE                 NO IT IS NOT\n         LINK  EP=CLEAR             CLEAR THE SCREEN FOR THEM\n         TPUT  HELP,60              TELL THEM WERE WE ARE\n         SR    1,1                  ZERO OUT REGISTER 1 FOR ATTACH\n         SVC   254                  PREPARE FOR ATTACH\n         ATTACH EP=IKJEFT01,ECB=WRKECB,STAI=CBTSTAI,PARAM=(OPTLST),VL=1\n         ST    R1,WRKTCB            SAVE THE TCB ADDRESS\n         WAIT  ECB=WRKECB           WAIT UNTIL HE IS DONE\n         DETACH WRKTCB              DETATCH IKJEFT01\n         LA    1,4                  PUT A 4 IN REGISTER 1 FOR DETACH\n         SVC   254                  CLEAN UP AFTER DETACH\n         ENDALL\nWRKECB   DC    F'0'                 AN ECB\nWRKTCB   DC    F'0'                 A TCB ADDRESS\nOPTLST   DC    F'0'                 NEED AN OPTLIST LIST OF 0'S\nHELP     DC    CL60'FOR INFORMATION ON READY TYPE IN HELP READY'\n     EJECT\nCBTSTAI  CSECT                      A NEW CSECT TO HANDLE ABEND\n         SAVE  (14,12)              SAVE\n         LR    R3,R15               START FOR USING\n         USING CBTSTAI,R3           BASE\n         ST    R13,SAVA+4           SET UP\n         LA    R13,SAVA             STORING CONVENTIONS\n         LA    1,4                  A 4 IN REGISTER 1\n         SVC   254                  SVC 254\n         L     R13,SAVA+4           RESTORE\n         RETURN (14,12),RC=0        AND RETURN\nSAVA     DC    18F'0'               PLACE TO SAVE REGISTERS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "D0": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x01S\\x01S\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 339, "newlines": 339, "modlines": 0, "user": "CNBNTRS"}, "text": "         TITLE 'XEQ TSO COMMAND PROCESSOR WITH AUTHORIZATION'\nXEQ      CSECT\n************************************************************\n* XEQ TSO COMMAND PROCESSOR                                *\n*                                                          *\n* THIS COMMAND PROCESSOR WILL INVOKE A PROGRAM RESIDING    *\n* IN A SYSTEM LIBRARY (WILL ATTACH THE PGM AUTHORIZED)     *\n*                                                          *\n* FORMAT:   D0    PROGRAM-NAME   'PARM-DATA'               *\n*                                                          *\n************************************************************\n SPACE 1\n*                   MAIN                     VALIDITY CHECK EXIT\n*                   ----                     -------------------\nR0       EQU   0    WORK REG                 WORK REG\nR1       EQU   1    WORK REG                 WORK REG\nR2       EQU   2    NOT USED                 NOT USED\nR3       EQU   3    MODULE BASE REG          MODULE BASE REG\nR4       EQU   4    A(CPPL)                  A(CPPL)\nR5       EQU   5    A(PPL)                   NOT USED\nR6       EQU   6    WORK REG                 A(WORKAREA)\nR7       EQU   7    NOT USED                 A(PDE)\nR8       EQU   8    WORK REG                 WORK REG\nR9       EQU   9    WORK REG                 WORK REG\nR10      EQU   10   WORK REG                 WORK REG\nR11      EQU   11   A(PDL)                   A(PSCB)\nR12      EQU   12   WORK REG                 NOT USED\nR13      EQU   13   A(WORKAREA)              A(EXITSAVE)\nR14      EQU   14   LINK REG                 LINK REG\nR15      EQU   15   RETURN CODES             RETURN CODES\n SPACE 1\n****************************\n* ENTRY AND INITIALIZATION *\n****************************\nXEQ      CSECT\n         USING *,R15          USING R15 AT *\n         B     XEQENT         GO AROUND MODULE ID\n         DROP  R15            DROP R15\n         DC    CL4'XEQ'       MODULE ID\n         DC    CL4'0101'      VERSION\n SPACE 1\nXEQENT   STM   R14,R12,12(R13) SAVE R14-R12\n         BALR  R3,0           R3 IS MODULE BASE REG\n         USING *,R3           USING R3 AT *\n         LR    R4,R1          A(CPPL) IN R4\n         USING CPPL,R4        USING R4 AT CPPL\n SPACE 1\n         LA    R0,WORKLEN     L'WORKAREA IN R0\n         GETMAIN R,LV=(R0)    ACQUIRE WORKAREA\n         LR    R8,R1          A(WORKAREA) IN R8\n         ST    R13,4(R8)      A(HISAVE) IN MYSAVE+4\n         ST    R8,8(R13)      A(MYSAVE) IN HISAVE+8\n         LR    R13,R8         A(MYSAVE) IN R13\n         USING WORKAREA,R13   USING R13 AT WORKAREA\n SPACE 1\n************************\n* PARSE COMMAND BUFFER *\n************************\nXEQPARS  LA    R5,XEQPPL      A(PPL) IN R5\n         USING PPL,R5         USING R5 AT PPL\n         MVC   PPLUPT,CPPLUPT A(UPT) IN PPL\n         MVC   PPLECT,CPPLECT A(ECT) IN PPL\n         MVC   PPLCBUF,CPPLCBUF A(CBUF) IN PPL\n         MVC   PPLPCL,XEQPCLA A(PCL) IN PPL\n         XC    ECB,ECB        ZERO CP ECB\n         LA    R8,ECB         A(CP ECB)\n         ST    R8,PPLECB        IN PPL\n         XC    XEQANS,XEQANS  ZERO PDL ANSWER AREA\n         LA    R8,XEQANS      A(PDL ANSWER AREA)\n         ST    R8,PPLANS        IN PPL\n         LA    R8,WORKAREA    A(WORKAREA)\n         ST    R8,PPLUWA        IN PPL\n SPACE 1\n         LA    R1,PPL         A(PPL) IN R1\n         LINK  EP=IKJPARS     GO PARSE COMMAND BUFFER\n         LR    R8,R15         PUT PARSE RETURN CODE IN R8\n SPACE 1\n************************\n* PARSE ERROR ANALYSIS *\n************************\n         B     XEQPARCK(R8) ROUTE TO ERROR HANDLER\nXEQPARCK B     XEQPAROK       NO ERRORS\n         B     XEQPE4         INCOMPLETE PARAMETERS AND NOPROMPT\n         B     XEQRET         USER ATTENTIONED OUT (RETURN)\n         B     XEQPE12        BAD PPL (ABEND)\n         B     XEQPE16        INSUFFICIENT REGION SIZE FOR PARSE\n         B     XEQPE20        INVALID PARAMETERS (VALIDCK FAILURE)\n         B     XEQPE24        PCL CONFLICT (ABEND)\n SPACE 1\nXEQPE0   ABEND 100,DUMP       A(PDL) IS ZERO AFTER SUCCESSFUL PARSE\n SPACE 1\nXEQPE4   LA    R1,XEQPM4      INCOMPLETE PARAMETERS AND NOPROMPT\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE12  ABEND 112,DUMP       BAD PPL\n SPACE 1\nXEQPE16  LA    R1,XEQPM16     INSUFFICIENT REGION SIZE FOR PARSE\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE20  LA    R1,XEQPM20     INVALID PARAMETERS (VALIDCK FAILURE)\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE24  ABEND 124,DUMP       PCL CONFLICT\n SPACE 1\n************************************\n* PREPARE PARM DATA IF ANY PRESENT *\n************************************\nXEQPAROK L     R11,XEQANS     A(PDL) IN R11\n         LA    R11,0(R11)     EXORCISE HI ORDER BYTE\n         LTR   R11,R11        DOES PDL EXIST\n         BZ    XEQPE0         NO, SOMETHING IS WRONG\n         USING XEQPDL,R11     USING R11 AT XEQPDL\n SPACE 1\nXEQPCK   LA    R8,PARMLEN     A(PARM AREA) IN R8\n         ST    R8,PARMADDR    STORE IN WORKAREA\n         OI    PARMADDR,X'80' INDICATE LAST IN LIST\n         XC    PARMLEN,PARMLEN ZERO PARMLEN\n         MVI   PARMAREA,C' '  SET BLANK\n         MVC   PARMAREA+1(L'PARMAREA-1),PARMAREA PROPAGATE\n         TM    PARM+6,X'80'   IS PARM PRESENT\n         BZ    XEQPRLS        NO, CONTINUE\n SPACE 1\n         L     R8,PARM        A(PARM DATA) IN R8\n         LTR   R8,R8          IS PARM PRESENT\n         BZ    XEQPRLS        NO, CONTINUE\n SPACE 1\n         MVC   PARMLEN,PARM+4 SET L'PARM DATA\n         LH    R9,PARMLEN     L'PARM DATA IN R9\n         SH    R9,XEQONE      DECREMENT BY 1\n         BM    XEQPRLS        BRANCH IF NO PARM DATA\n SPACE 1\n         CH    R9,XEQPMAX     DOES PARM LENGTH EXCEED MAX\n         BL    XEQPSET        NO, CONTINUE\n SPACE 1\n         MVC   PARMLEN,XEQPMAX YES, SET\n         LH    R9,PARMLEN           TO\n         SH    R9,XEQONE            MAX\n         LA    R1,XEQMM0      PARM LENGTH EXCEEDS MAX\n         BAL   R6,XEQTPUT     GO TELL\n SPACE 1\nXEQPSET  EX    R9,PARMOVE     MOVE PARM DATA TO WORKAREA\n SPACE 1\n***********************\n* CLEANUP AFTER PARSE *\n***********************\nXEQPRLS  IKJRLSA XEQANS       RELEASE PARSE STORAGE\n SPACE 1\n**********************************\n* XFER CONTROL TO TARGET PROGRAM *\n**********************************\nXEQXFER  MVC   MEMXFER(MEMXFERL),MEMXFERS PREP XFER LIST SKELETON\n         LINK  EP=AON                                    AXC\n         LA    R1,PARMADDR    A(PARM LIST) IN R1\n         LA    R15,MEMXFER    A(XFER LIST) IN R15\n         LA    R8,BLDLNAME    A(BLDL ENTRY) IN R8\n         L     R13,4(R13)     A(HISAVE) IN R13\n         XCTL  (2,12),        XFER CONTROL TO TARGET PROGRAM           X\n               DE=(R8),                                                X\n               MF=(E,(1)),SF=(E,(15))\n SPACE 1\n**********************\n* CLEANUP AND RETURN *\n**********************\nXEQRET   LA    R1,WORKAREA    A(WORKAREA) IN R1\n         LA    R0,WORKLEN     L'WORKAREA IN R0\n         L     R13,4(R13)     A(HISAVE) IN R13\n         FREEMAIN R,LV=(R0),A=(R1) FREE WORKAREA\n         LM    R14,R12,12(R13) RESTORE R14-R12\n         BR    R14            RETURN\n SPACE 1\n*********************************\n* SUBROUTINE TO WRITE A MESSAGE *\n*********************************\nXEQTPUT  SR    R0,R0          ZERO R0\n         IC    R0,0(R1)       L'MESSAGE IN R0\n         LA    R1,1(R1)       A(MESSAGE) IN R1\n         TPUT  (R1),(R0)      TELL TERMINAL\n         BR    R6             RETURN TO CALLER\n SPACE 1\n**************************\n* LOCAL READONLY STORAGE *\n**************************\nMEMXFERS XCTL  SF=L           SKELETON MEMBER XFER CONTROL LIST\nMEMXFERL EQU   *-MEMXFERS     LENGTH\n SPACE 1\nXEQPCLA  DC    V(XEQPCL)      A(PCL)\nXEQPMAX  DC    H'100'         MAX LENGTH FOR PARMS\nXEQONE   DC    H'1'           CONSTANT OF 1\nMEMOVEB  MVC   0(0,R10),0(R9) MOVE MEMBER NAME TO BLDL NAME AREA\nPARMOVE  MVC   PARMAREA(0),0(R8) MOVE PARM TO WORKAREA\n SPACE 1\nXEQPM4   DC    AL1(XEQPM4L),C'INCOMPLETE PARAMETERS AND NOPROMPT'\nXEQPM4L  EQU   *-(XEQPM4+1)   LENGTH\n SPACE 1\nXEQPM16  DC    AL1(XEQPM16L),C'INSUFFICIENT REGION SIZE FOR PARSE'\nXEQPM16L EQU   *-(XEQPM16+1)  LENGTH\n SPACE 1\nXEQPM20  DC    AL1(XEQPM20L),C'INVALID PARAMETERS (VALIDCK FAILURE)'\nXEQPM20L EQU   *-(XEQPM20+1)  LENGTH\n SPACE 1\nXEQMM0   DC    AL1(XEQMM0L),C'PARM LENGTH EXCEEDS MAX, TRUNCATED'\nXEQMM0L  EQU   *-(XEQMM0+1)   LENGTH\n SPACE 1\n         DROP  R5,R11,R13     DROP R5, R11, R13\n SPACE 1\n****************************************\n* VALIDITY CHECK EXIT FOR PROGRAM NAME *\n****************************************\nMEMVAL   STM   R14,R12,12(R13) SAVE R14-R12\n         LR    R8,R1          SAVE A(EXIT PARM LIST) IN R8\n         USING MEMCOMM,R8     USING R8 AT MEMCOMM\n         L     R6,USERWORD    A(WORKAREA) IN R6\n         USING WORKAREA,R6    USING R6 AT WORKAREA\n         LM    R3,R4,SAVEAREA+32 RESTORE MODULE BASE REG AND A(CPPL)\n         L     R11,CPPLPSCB   A(PSCB) IN R11\n         USING PSCB,R11       USING R11 AT PSCB\n         L     R7,PDEADR      A(PDE) IN R7\n         DROP  R8             DROP R8\n SPACE 1\n         LA    R8,EXITSAVE    A(SAVEAREA) IN R8\n         ST    R13,4(R8)      A(HISAVE) IN MYSAVE)+4\n         ST    R8,8(R13)      A(MYSAVE) IN HISAVE+8\n         LR    R13,R8         A(MYSAVE) IN R13\n SPACE 1\n****************************************\n* DO A BLDL TO VERIFY MEMBER EXISTENCE *\n****************************************\nMEMVALB  MVC   BLDLCNT,XEQONE SET ENTRY COUNT TO 1\n         LA    R8,BLDLENT     SET ENTRY\n         STH   R8,BLDLENE       LENGTH\n         XC    BLDLRES,BLDLRES ZERO REST\n         MVI   BLDLNAME,C' '  SET BLANK\n         MVC   BLDLNAME+1(L'BLDLNAME-1),BLDLNAME PROPAGATE\n SPACE 1\n         SR    R8,R8          ZERO R8\n         LH    R8,4(R7)       L'MEMBER NAME IN R8\n         SH    R8,XEQONE      DECREMENT BY 1\n         BM    MEMVNO         BRANCH IF NO MEMBER - GO PROMPT\n SPACE 1\n         L     R9,0(R7)       A(MEMBER NAME) IN R9\n         LTR   R9,R9          DOES MEMBER NAME EXIST\n         BZ    MEMVNO         NO, GO PROMPT\n SPACE 1\n         LA    R10,BLDLNAME   A(BLDL NAME AREA) IN R10\n         EX    R8,MEMOVEB     MOVE MEMBER NAME TO BLDL NAME AREA\n SPACE 1\n         BLDL  0,BLDLIST      ISSUE BLDL FOR MEMBER NAME\n         LTR   R15,R15        WAS MEMBER FOUND\n         BZ    MEMVALA        YES, GO GET AUTHORIZATION CLEARANCE\n SPACE 1\nMEMVNO   LA    R15,4          NO, SET PARAMETER INVALID INDICATOR\n         B     MEMVRET        GO RETURN\n SPACE 1\n**********************************\n* VALIDATE AUTHORIZATION VIA MMI *\n**********************************\nMEMVALA  MVI   MMIREQ,MMIREQPG INDICATE PROGRAM TYPE\n         MVC   MMIUSER,PSCBUSER MOVE USERID TO MMICB\n         MVC   MMIPROG,BLDLNAME MOVE MEMBER NAME\n         LA    R1,MMICB       A(MMICB) IN R1\n*        LINK  EP=TSOMMI      LINK TO MMI\n*        LTR   R15,R15        IS AUTHORIZATION CLEARED\n*        BZ    MEMVRET        YES, GO RETURN\n         B     MEMVRET        ALWAYS GO\n SPACE 1\n         LA    R15,8          NO, SET PARAMETER INVALID INDICATOR\n SPACE 1\nMEMVRET  L     R13,4(R13)     A(HISAVE) IN R13\n         ST    R15,16(R13)    PLACE RETURN CODE IN R15\n         LM    R14,R12,12(R13) RESTORE R14-R12\n         BR    R14            RETURN TO PARSE\n SPACE 1\n         DROP  R11,R6         DROP R11, R6\n SPACE 1\n************************************************\n* PARSE CONTROL LIST AND PARSE DESCRIPTOR LIST *\n************************************************\nXEQPCL   IKJPARM DSECT=XEQPDL\n SPACE 1\nMEMBER   IKJIDENT 'MEMBER NAME',MAXLNTH=8,OTHER=ALPHANUM,              X\n               PROMPT='MEMBER NAME',VALIDCK=MEMVAL\n SPACE 1\nPARM     IKJPOSIT QSTRING\n SPACE 1\n         IKJENDP\n SPACE 1\n******************\n* DSECT MAPPINGS *\n******************\nMEMCOMM  DSECT                MEMBER VALIDITY CHECK EXIT COMM\nPDEADR   DS    A              A(PDE)\nUSERWORD DS    A              A(WORKAREA)\nVALMSG   DS    A              A(MESSAGE)\n SPACE 1\n         IKJPPL\nPPLLEN   EQU   *-PPL          LENGTH\n SPACE 1\nWORKAREA DSECT                WORKAREA\n******************************\n* COMMAND PROCESSOR WORKAREA *\n******************************\nSAVEAREA DS    18F            STD SAVEAREA (MAIN)\n SPACE 1\nMEMXFER  DS    0D             MEMBER XFER LIST\n         ORG   *+MEMXFERL       AREA\n SPACE 1\nXEQPPL   DS    0A             PPL\n         ORG   *+PPLLEN        AREA\n SPACE 1\nECB      DS    F              CP ECB\nXEQANS   DS    A              A(PDL)\nEXITSAVE DS    18F            STD SAVEAREA (VALIDITY CHECK EXIT)\n SPACE 1\nBLDLIST  DS    0F             BLDL LIST FOR MEMBER VALIDATION\nBLDLCNT  DS    H              MEMBER COUNT\nBLDLENE  DS    H              ENTRY LENGTH AREA\nBLDLNAME DS    CL8            MEMBER NAME\nBLDLRES  DS    CL50           REST\nBLDLENT  EQU   *-BLDLNAME     ENTRY LENGTH\n SPACE 1\nPARMADDR DS    A              A(PARMAREA)\nPARMLEN  DS    H              L'PARM DATA\nPARMAREA DS    CL100          PARM DATA\n SPACE 1\nMMICB    DS    0CL16          MMICB\nMMIREQ   DS    XL1            REQUEST\nMMIREQPG EQU   128            PROGRAM TYPE\nMMIUSER  DS    CL7            USERID\nMMIPROG  DS    CL8            MEMBER NAME\n         DS    0D             ALIGNMENT\nWORKLEN  EQU   *-WORKAREA     LENGTH\n SPACE 1\n         IKJCPPL\n SPACE 1\n         IKJPSCB\n         END   XEQ           END ASSEMBLY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "D0D0": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x01X\\x01X\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 344, "newlines": 344, "modlines": 0, "user": "CNBNTRS"}, "text": "         TITLE 'XEQ TSO COMMAND PROCESSOR'\nXEQ      CSECT\n************************************************************\n* XEQ TSO COMMAND PROCESSOR                                *\n*                                                          *\n* THIS COMMAND PROCESSOR WILL INVOKE A PROGRAM RESIDING    *\n* IN A SYSTEM LIBRARY                                      *\n*                                                          *\n* FORMAT:   XEQ   PROGRAM-NAME   'PARM-DATA'               *\n*                                                          *\n************************************************************\n SPACE 1\n*                   MAIN                     VALIDITY CHECK EXIT\n*                   ----                     -------------------\nR0       EQU   0    WORK REG                 WORK REG\nR1       EQU   1    WORK REG                 WORK REG\nR2       EQU   2    NOT USED                 NOT USED\nR3       EQU   3    MODULE BASE REG          MODULE BASE REG\nR4       EQU   4    A(CPPL)                  A(CPPL)\nR5       EQU   5    A(PPL)                   NOT USED\nR6       EQU   6    WORK REG                 A(WORKAREA)\nR7       EQU   7    NOT USED                 A(PDE)\nR8       EQU   8    WORK REG                 WORK REG\nR9       EQU   9    WORK REG                 WORK REG\nR10      EQU   10   WORK REG                 WORK REG\nR11      EQU   11   A(PDL)                   A(PSCB)\nR12      EQU   12   WORK REG                 NOT USED\nR13      EQU   13   A(WORKAREA)              A(EXITSAVE)\nR14      EQU   14   LINK REG                 LINK REG\nR15      EQU   15   RETURN CODES             RETURN CODES\n SPACE 1\n****************************\n* ENTRY AND INITIALIZATION *\n****************************\nXEQ      CSECT\n         USING *,R15          USING R15 AT *\n         B     XEQENT         GO AROUND MODULE ID\n         DROP  R15            DROP R15\n         DC    CL4'XEQ'       MODULE ID\n         DC    CL4'0101'      VERSION\n SPACE 1\nXEQENT   STM   R14,R12,12(R13) SAVE R14-R12\n         BALR  R3,0           R3 IS MODULE BASE REG\n         USING *,R3           USING R3 AT *\n         LR    R4,R1          A(CPPL) IN R4\n         USING CPPL,R4        USING R4 AT CPPL\n SPACE 1\n         LA    R0,WORKLEN     L'WORKAREA IN R0\n         GETMAIN R,LV=(R0)    ACQUIRE WORKAREA\n         LR    R8,R1          A(WORKAREA) IN R8\n         ST    R13,4(R8)      A(HISAVE) IN MYSAVE+4\n         ST    R8,8(R13)      A(MYSAVE) IN HISAVE+8\n         LR    R13,R8         A(MYSAVE) IN R13\n         USING WORKAREA,R13   USING R13 AT WORKAREA\n SPACE 1\n************************\n* PARSE COMMAND BUFFER *\n************************\nXEQPARS  LA    R5,XEQPPL      A(PPL) IN R5\n         USING PPL,R5         USING R5 AT PPL\n         MVC   PPLUPT,CPPLUPT A(UPT) IN PPL\n         MVC   PPLECT,CPPLECT A(ECT) IN PPL\n         MVC   PPLCBUF,CPPLCBUF A(CBUF) IN PPL\n         MVC   PPLPCL,XEQPCLA A(PCL) IN PPL\n         XC    ECB,ECB        ZERO CP ECB\n         LA    R8,ECB         A(CP ECB)\n         ST    R8,PPLECB        IN PPL\n         XC    XEQANS,XEQANS  ZERO PDL ANSWER AREA\n         LA    R8,XEQANS      A(PDL ANSWER AREA)\n         ST    R8,PPLANS        IN PPL\n         LA    R8,WORKAREA    A(WORKAREA)\n         ST    R8,PPLUWA        IN PPL\n SPACE 1\n         LA    R1,PPL         A(PPL) IN R1\n         LINK  EP=IKJPARS     GO PARSE COMMAND BUFFER\n         LR    R8,R15         PUT PARSE RETURN CODE IN R8\n SPACE 1\n************************\n* PARSE ERROR ANALYSIS *\n************************\n         B     XEQPARCK(R8) ROUTE TO ERROR HANDLER\nXEQPARCK B     XEQPAROK       NO ERRORS\n         B     XEQPE4         INCOMPLETE PARAMETERS AND NOPROMPT\n         B     XEQRET         USER ATTENTIONED OUT (RETURN)\n         B     XEQPE12        BAD PPL (ABEND)\n         B     XEQPE16        INSUFFICIENT REGION SIZE FOR PARSE\n         B     XEQPE20        INVALID PARAMETERS (VALIDCK FAILURE)\n         B     XEQPE24        PCL CONFLICT (ABEND)\n SPACE 1\nXEQPE0   ABEND 100,DUMP       A(PDL) IS ZERO AFTER SUCCESSFUL PARSE\n SPACE 1\nXEQPE4   LA    R1,XEQPM4      INCOMPLETE PARAMETERS AND NOPROMPT\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE12  ABEND 112,DUMP       BAD PPL\n SPACE 1\nXEQPE16  LA    R1,XEQPM16     INSUFFICIENT REGION SIZE FOR PARSE\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE20  LA    R1,XEQPM20     INVALID PARAMETERS (VALIDCK FAILURE)\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE24  ABEND 124,DUMP       PCL CONFLICT\n SPACE 1\n************************************\n* PREPARE PARM DATA IF ANY PRESENT *\n************************************\nXEQPAROK L     R11,XEQANS     A(PDL) IN R11\n         LA    R11,0(R11)     EXORCISE HI ORDER BYTE\n         LTR   R11,R11        DOES PDL EXIST\n         BZ    XEQPE0         NO, SOMETHING IS WRONG\n         USING XEQPDL,R11     USING R11 AT XEQPDL\n SPACE 1\nXEQPCK   LA    R8,PARMLEN     A(PARM AREA) IN R8\n         ST    R8,PARMADDR    STORE IN WORKAREA\n         OI    PARMADDR,X'80' INDICATE LAST IN LIST\n         XC    PARMLEN,PARMLEN ZERO PARMLEN\n         MVI   PARMAREA,C' '  SET BLANK\n         MVC   PARMAREA+1(L'PARMAREA-1),PARMAREA PROPAGATE\n         TM    PARM+6,X'80'   IS PARM PRESENT\n         BZ    XEQPRLS        NO, CONTINUE\n SPACE 1\n         L     R8,PARM        A(PARM DATA) IN R8\n         LTR   R8,R8          IS PARM PRESENT\n         BZ    XEQPRLS        NO, CONTINUE\n SPACE 1\n         MVC   PARMLEN,PARM+4 SET L'PARM DATA\n         LH    R9,PARMLEN     L'PARM DATA IN R9\n         SH    R9,XEQONE      DECREMENT BY 1\n         BM    XEQPRLS        BRANCH IF NO PARM DATA\n SPACE 1\n         CH    R9,XEQPMAX     DOES PARM LENGTH EXCEED MAX\n         BL    XEQPSET        NO, CONTINUE\n SPACE 1\n         MVC   PARMLEN,XEQPMAX YES, SET\n         LH    R9,PARMLEN           TO\n         SH    R9,XEQONE            MAX\n         LA    R1,XEQMM0      PARM LENGTH EXCEEDS MAX\n         BAL   R6,XEQTPUT     GO TELL\n SPACE 1\nXEQPSET  EX    R9,PARMOVE     MOVE PARM DATA TO WORKAREA\n SPACE 1\n***********************\n* CLEANUP AFTER PARSE *\n***********************\nXEQPRLS  IKJRLSA XEQANS       RELEASE PARSE STORAGE\n SPACE 1\n**********************************\n* XFER CONTROL TO TARGET PROGRAM *\n**********************************\nXEQXFER  MVC   MEMXFER(MEMXFERL),MEMXFERS PREP XFER LIST SKELETON\n         LINK  EP=AON                                        AXC\n         MODESET KEY=ZERO,MODE=SUP                           AXC\n*                   FOR DIDOCS PUT ON THE FOLLOWING ZAP      AXC\n*                                     NAME DIDOCS CONS       AXC\n*                                     VER 0120 0A6B          AXC\n*                                     REP 0120 0700          AXC\n         LA    R1,PARMADDR    A(PARM LIST) IN R1\n         LA    R15,MEMXFER    A(XFER LIST) IN R15\n         LA    R8,BLDLNAME    A(BLDL ENTRY) IN R8\n         L     R13,4(R13)     A(HISAVE) IN R13\n         XCTL  (2,12),        XFER CONTROL TO TARGET PROGRAM           X\n               DE=(R8),                                                X\n               MF=(E,(1)),SF=(E,(15))\n SPACE 1\n**********************\n* CLEANUP AND RETURN *\n**********************\nXEQRET   LA    R1,WORKAREA    A(WORKAREA) IN R1\n         LA    R0,WORKLEN     L'WORKAREA IN R0\n         L     R13,4(R13)     A(HISAVE) IN R13\n         FREEMAIN R,LV=(R0),A=(R1) FREE WORKAREA\n         LM    R14,R12,12(R13) RESTORE R14-R12\n         BR    R14            RETURN\n SPACE 1\n*********************************\n* SUBROUTINE TO WRITE A MESSAGE *\n*********************************\nXEQTPUT  SR    R0,R0          ZERO R0\n         IC    R0,0(R1)       L'MESSAGE IN R0\n         LA    R1,1(R1)       A(MESSAGE) IN R1\n         TPUT  (R1),(R0)      TELL TERMINAL\n         BR    R6             RETURN TO CALLER\n SPACE 1\n**************************\n* LOCAL READONLY STORAGE *\n**************************\nMEMXFERS XCTL  SF=L           SKELETON MEMBER XFER CONTROL LIST\nMEMXFERL EQU   *-MEMXFERS     LENGTH\n SPACE 1\nXEQPCLA  DC    V(XEQPCL)      A(PCL)\nXEQPMAX  DC    H'100'         MAX LENGTH FOR PARMS\nXEQONE   DC    H'1'           CONSTANT OF 1\nMEMOVEB  MVC   0(0,R10),0(R9) MOVE MEMBER NAME TO BLDL NAME AREA\nPARMOVE  MVC   PARMAREA(0),0(R8) MOVE PARM TO WORKAREA\n SPACE 1\nXEQPM4   DC    AL1(XEQPM4L),C'INCOMPLETE PARAMETERS AND NOPROMPT'\nXEQPM4L  EQU   *-(XEQPM4+1)   LENGTH\n SPACE 1\nXEQPM16  DC    AL1(XEQPM16L),C'INSUFFICIENT REGION SIZE FOR PARSE'\nXEQPM16L EQU   *-(XEQPM16+1)  LENGTH\n SPACE 1\nXEQPM20  DC    AL1(XEQPM20L),C'INVALID PARAMETERS (VALIDCK FAILURE)'\nXEQPM20L EQU   *-(XEQPM20+1)  LENGTH\n SPACE 1\nXEQMM0   DC    AL1(XEQMM0L),C'PARM LENGTH EXCEEDS MAX, TRUNCATED'\nXEQMM0L  EQU   *-(XEQMM0+1)   LENGTH\n SPACE 1\n         DROP  R5,R11,R13     DROP R5, R11, R13\n SPACE 1\n****************************************\n* VALIDITY CHECK EXIT FOR PROGRAM NAME *\n****************************************\nMEMVAL   STM   R14,R12,12(R13) SAVE R14-R12\n         LR    R8,R1          SAVE A(EXIT PARM LIST) IN R8\n         USING MEMCOMM,R8     USING R8 AT MEMCOMM\n         L     R6,USERWORD    A(WORKAREA) IN R6\n         USING WORKAREA,R6    USING R6 AT WORKAREA\n         LM    R3,R4,SAVEAREA+32 RESTORE MODULE BASE REG AND A(CPPL)\n         L     R11,CPPLPSCB   A(PSCB) IN R11\n         USING PSCB,R11       USING R11 AT PSCB\n         L     R7,PDEADR      A(PDE) IN R7\n         DROP  R8             DROP R8\n SPACE 1\n         LA    R8,EXITSAVE    A(SAVEAREA) IN R8\n         ST    R13,4(R8)      A(HISAVE) IN MYSAVE)+4\n         ST    R8,8(R13)      A(MYSAVE) IN HISAVE+8\n         LR    R13,R8         A(MYSAVE) IN R13\n SPACE 1\n****************************************\n* DO A BLDL TO VERIFY MEMBER EXISTENCE *\n****************************************\nMEMVALB  MVC   BLDLCNT,XEQONE SET ENTRY COUNT TO 1\n         LA    R8,BLDLENT     SET ENTRY\n         STH   R8,BLDLENE       LENGTH\n         XC    BLDLRES,BLDLRES ZERO REST\n         MVI   BLDLNAME,C' '  SET BLANK\n         MVC   BLDLNAME+1(L'BLDLNAME-1),BLDLNAME PROPAGATE\n SPACE 1\n         SR    R8,R8          ZERO R8\n         LH    R8,4(R7)       L'MEMBER NAME IN R8\n         SH    R8,XEQONE      DECREMENT BY 1\n         BM    MEMVNO         BRANCH IF NO MEMBER - GO PROMPT\n SPACE 1\n         L     R9,0(R7)       A(MEMBER NAME) IN R9\n         LTR   R9,R9          DOES MEMBER NAME EXIST\n         BZ    MEMVNO         NO, GO PROMPT\n SPACE 1\n         LA    R10,BLDLNAME   A(BLDL NAME AREA) IN R10\n         EX    R8,MEMOVEB     MOVE MEMBER NAME TO BLDL NAME AREA\n SPACE 1\n         BLDL  0,BLDLIST      ISSUE BLDL FOR MEMBER NAME\n         LTR   R15,R15        WAS MEMBER FOUND\n         BZ    MEMVALA        YES, GO GET AUTHORIZATION CLEARANCE\n SPACE 1\nMEMVNO   LA    R15,4          NO, SET PARAMETER INVALID INDICATOR\n         B     MEMVRET        GO RETURN\n SPACE 1\n**********************************\n* VALIDATE AUTHORIZATION VIA MMI *\n**********************************\nMEMVALA  MVI   MMIREQ,MMIREQPG INDICATE PROGRAM TYPE\n         MVC   MMIUSER,PSCBUSER MOVE USERID TO MMICB\n         MVC   MMIPROG,BLDLNAME MOVE MEMBER NAME\n         LA    R1,MMICB       A(MMICB) IN R1\n*        LINK  EP=TSOMMI      LINK TO MMI\n*        LTR   R15,R15        IS AUTHORIZATION CLEARED\n*        BZ    MEMVRET        YES, GO RETURN\n         B     MEMVRET        ALWAYS GO\n SPACE 1\n         LA    R15,8          NO, SET PARAMETER INVALID INDICATOR\n SPACE 1\nMEMVRET  L     R13,4(R13)     A(HISAVE) IN R13\n         ST    R15,16(R13)    PLACE RETURN CODE IN R15\n         LM    R14,R12,12(R13) RESTORE R14-R12\n         BR    R14            RETURN TO PARSE\n SPACE 1\n         DROP  R11,R6         DROP R11, R6\n SPACE 1\n************************************************\n* PARSE CONTROL LIST AND PARSE DESCRIPTOR LIST *\n************************************************\nXEQPCL   IKJPARM DSECT=XEQPDL\n SPACE 1\nMEMBER   IKJIDENT 'MEMBER NAME',MAXLNTH=8,OTHER=ALPHANUM,              X\n               PROMPT='MEMBER NAME',VALIDCK=MEMVAL\n SPACE 1\nPARM     IKJPOSIT QSTRING\n SPACE 1\n         IKJENDP\n SPACE 1\n******************\n* DSECT MAPPINGS *\n******************\nMEMCOMM  DSECT                MEMBER VALIDITY CHECK EXIT COMM\nPDEADR   DS    A              A(PDE)\nUSERWORD DS    A              A(WORKAREA)\nVALMSG   DS    A              A(MESSAGE)\n SPACE 1\n         IKJPPL\nPPLLEN   EQU   *-PPL          LENGTH\n SPACE 1\nWORKAREA DSECT                WORKAREA\n******************************\n* COMMAND PROCESSOR WORKAREA *\n******************************\nSAVEAREA DS    18F            STD SAVEAREA (MAIN)\n SPACE 1\nMEMXFER  DS    0D             MEMBER XFER LIST\n         ORG   *+MEMXFERL       AREA\n SPACE 1\nXEQPPL   DS    0A             PPL\n         ORG   *+PPLLEN        AREA\n SPACE 1\nECB      DS    F              CP ECB\nXEQANS   DS    A              A(PDL)\nEXITSAVE DS    18F            STD SAVEAREA (VALIDITY CHECK EXIT)\n SPACE 1\nBLDLIST  DS    0F             BLDL LIST FOR MEMBER VALIDATION\nBLDLCNT  DS    H              MEMBER COUNT\nBLDLENE  DS    H              ENTRY LENGTH AREA\nBLDLNAME DS    CL8            MEMBER NAME\nBLDLRES  DS    CL50           REST\nBLDLENT  EQU   *-BLDLNAME     ENTRY LENGTH\n SPACE 1\nPARMADDR DS    A              A(PARMAREA)\nPARMLEN  DS    H              L'PARM DATA\nPARMAREA DS    CL100          PARM DATA\n SPACE 1\nMMICB    DS    0CL16          MMICB\nMMIREQ   DS    XL1            REQUEST\nMMIREQPG EQU   128            PROGRAM TYPE\nMMIUSER  DS    CL7            USERID\nMMIPROG  DS    CL8            MEMBER NAME\n         DS    0D             ALIGNMENT\nWORKLEN  EQU   *-WORKAREA     LENGTH\n SPACE 1\n         IKJCPPL\n SPACE 1\n         IKJPSCB\n         END   XEQ           END ASSEMBLY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDALL": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         AIF   ('&CODE' GT '4095').MESS1\n&NAME    DS    0H\n         AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13                LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)          RE-LOAD REGISTER 13\n         LA    0,72                LOAD NUMBER OF BYTES TO BE FREED\n         FREEMAIN   R,LV=(0),A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4    RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '(15)').ENDIT\n         AIF   ('&CODE' EQ '').COND1\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.MESS1   MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HREADY": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00>\\x00>\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "CNBNTRS"}, "text": ")F       FUNCTION -\n\n            READY IS THE TSO COMMAND THAT WILL ATTACH IKJEFT01\n            WHICH IS THE TERMINAL MONITOR PROGRAM (TMP)\n\n)X       SYNTAX -\n\n            READY, %READY, XEQ READY, DO READY\n\n)O       OPERANDS - NONE\n\n)S       EXPLANATION -\n\n            AT LOGON TIME THE PROGRAM THAT IS EXECUTED IS IKJEFT01\n            WHICH IS KNOWN AS THE TMP (THE TERMINAL MONITOR PROGRAM).\n            WHEN READY IS TYPED IN YOU EXECUTE A PROGRAM CALLED\n            CBT954 WHICH DOES AN ATTACH OF THE TMP (IKJEFT01). WHAT\n            YOU WILL SEE AT YOUR TERMINAL WHEN YOU DO THIS IS THE\n            MESSAGE: 'FOR INFORMATION ON READY TYPE IN HELP READY'\n            THEN THE WORD  READY.\n            YOU MAY ISSUE THE READY COMMAND AT ANY TIME YOU CAN ENTER\n            A TSO COMMAND (EX. UNDER EDIT MODE, OPTION 6 OF SPF,\n            READY MODE, ETC.). AFTER THE READY HAS BEEN ISSUED YOU\n            MAY ISSUE ANY OTHER TSO COMMAND.\n            TO GET OUT OF THIS ENVIRONMENT TYPE IN LOGOFF AND YOU\n            WILL BE RETURNED TO WHERE YOU PREVIOUSLY ISSUED THE\n            READY COMMAND.  IF YOU WHERE UNDER SPF OPTION 6 AND\n            ISSUED READY, WHEN YOU TYPE IN LOGOFF YOU WOULD BE\n            RETURNED TO SPF OPTION 6 AGAIN.\n            SINCE THIS PSEUDO-READY MODE IS REALLY NOT NORMAL\n            (NOR SUPPORTED BY IBM) YOU CAN DO THINGS THAT ARE\n            NOT USUALLY ALLOWED. EXAMPLE - EDIT A DATA SET,\n            TYPE IN READY, DELETE THE DATA SET YOU WERE EDITING\n            BEFORE YOU TYPED IN READY, DON'T DO THIS KIND OF\n            NONSENSE EVEN THOUGH IT WILL WORK.\n            ONE PROBLEM WITH THE PSEUDO-READY MODE IS THAT\n            THERE IS NO COMMAND TO TELL YOU WHAT LEVEL YOU\n            ARE AT, THE ONLY WAY TO FIND OUT IS TO TYPE IN\n            LOGOFF UNTIL YOU GET LOGGED OFF OF YOUR TSO SESSION,\n            AND THEN YOU'LL KNOW YOU WENT 1 TOO MANY LOGOFFS.\n\n               WHAT HAPPENS\n\n                  LOGON USERID                      (EXEC PGM=IKJEFT01)\n                      READY |\n                            |\n                      EDIT  |\n                        |--------|\n                        |  EDIT  |<<<<<<<<<<<<<<<<|\n                        |--------|                |\n                                |                 |\n                         READY  |                 | (ATTACH IKJEFT01)\n                           |---------|            |\n                           | READY   |            |\n                           |   MODE  |            |\n                           |---------|            |\n                                |                 |\n                                |>>>>>>>>>>>>>>>>>|\n                             LOGOFF                 (DETACH IKJEFT01)\n\n\n            FOR ADDITIONAL INFORMATION SEE TECH SUPPORT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGC0025D": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00%\\x00%\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "CNBNTRS"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  SETJSCB - A NON-AUTHORIZED TYPE 3 SVC THAT TURNS THE JSCB          *\n*  AUTHORIZATION ON OR OFF BASED ON THE ENTRY CODE IN REGISTER 1.     *\n*                                                                     *\n*  ENTRY CODE = 0 - TURN JSCB AUTHORIZATION ON                        *\n*  ENTRY CODE = 4 - TURN JSCB AUTHORIZATION OFF                       *\n*                                                                     *\n*  CODED 3/18/76 BY J. W. RICH (FROM R. MARKEL).                      *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nIGC0025D CSECT\n         USING *,R6                BASE REGISTER\n         L     R12,PSATOLD         LOAD CURRENT TCB PTR\n         L     R12,TCBJSCB(0,R12)  LOAD JSCB PTR\n         EX    R0,APFON(R1)        \"EX\"ECUTE APFON OR APFOFF BASED\n*                                       ON REGISTER 1 ENTRY CODE\n         BR    R14                 RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*  VARIOUS AND SUNDRY \"EX\"ECUTED INSTRUCTIONS                         *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nAPFON    OI    JSCBOPTS(R12),JSCBAUTH        TURN ON AUTHORIZATION\nAPFOFF   NI    JSCBOPTS(R12),X'FF'-JSCBAUTH  TURN OFF AUTHORIZATION\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*  VARIOUS AND SUNDRY EQUATES\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nJSCBAUTH EQU   X'01'               JSCB AUTHORIZATION BIT\nPSATOLD  EQU   X'21C'              OFFSET TO TCBOLD PTR\nTCBJSCB  EQU   X'B4'               OFFSET TO JSCB PTR\nJSCBOPTS EQU   X'EC'               OFFSET TO JSCB AUTHORIZATION FIELD\nR0       EQU   0                   REGISTER 0\nR1       EQU   1                   REGISTER 1\nR6       EQU   6                   REGISTER 6\nR12      EQU   12                  REGISTER 12\nR14      EQU   14                  REGISTER 14\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTPW": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x01\\xb8\\x01\\xb8\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 440, "newlines": 440, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n*----------------------------------------------------------------------\n*\n*        BOB BECKER NOV ,1977\n*\n*        THIS TSO COMMAND PROCESSOR WILL DISPLAY THE CONTENTS OF THE\n*        PASSWORD DATASET TO AUTHORIZED USERS (AN AUTHORIZED USER IS\n*        ONE THAT HAS 'OPER' AUTHORITY IN THE UADS DATASET).  IF\n*        ADDITIONAL CONTROL IS REQUIRED, THE 'PASSWORD' DATASET MAY\n*        BE 'PASSWORD PROTECTED' AS WELL.\n*\n*        NO PARAMETERS SHOULD BE SPECIFIED WHEN INVOKED.  INSTEAD,\n*        THIS ROUTINE WILL PROMPT FOR THE OPTION (DEFINED BELOW).\n*\n*        OPTIONS ARE: DSN= NAME OF DATASET FOR WHICH THE PASSWORD\n*                          IS TO BE DISPLAYED\n*                     PW=  PASSWORD FOR WHICH ASSOCIATED DATASETS\n*                          ARE TO BE DISPLAYED\n*                   (NULL) LIST ALL PASSWORD/DATASET ASSOCIATIONS\n*\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        VALIDATE USER AUTHORITY BY CHECKING THE PSCB FOR 'OPER'\n*        AND LOCATE THE VOLUME ON WHICH THE PASSWORD DATASET RESIDES\n*\n*----------------------------------------------------------------------\nLISTPW   $PROLOG\nENTRY010 DS    0H\n         L     R2,16          GET CVT POINTER\n         L     R2,0(R2)       OLD/NEW POINTER\n         L     R2,4(R2)       OUR TCB POINTER\n         L     R15,12(R2)     OUR TIOT POINTER\n*        CLI   0(R15),C'S'    IS THIS SYSTEMS USER?\n*        BNE   ERROR1         NO, INFORM USER OF RESTRICTION\n         L     R2,180(R2)     JSCB POINTER\n         L     R2,264(R2)     PSCB POINTER\n         TM    16(R2),X'80'   DO WE HAVE OPER ABILITY?\n    LINK EP=AOFF\n         LOCATE LOCATE        LOCATE SYS1.NUCLEUS TO GET VOLSER\n         LTR   R15,R15        CHECK RETCODE\n         BNZ   ERROR0         NOT FOUND, ERROR\n         MVC   IPLVOL(6),LOCWORK+6 MOVE VOLSER TO DYNALOC AREA\nEXIT010  EQU   *\n         B     ENTRY015\n         SPACE 3\n*----------------------------------------------------------------------\n*\n*        BUILD THE DYNAMIC ALLOCATION REQUEST BLOCK AND ALLOCATE\n*        THE PASSWORD DATASET (IF IT IS PASSWORD PROTECTED, THE\n*        USER WILL BE PROMPTED FOR THE PASSWORD).\n*\n*----------------------------------------------------------------------\nENTRY015 DS    0H\n         L     R0,RBSIZE          GET STORAGE FOR BUILDING\n         GETMAIN R,LV=(0)         *   THE DYNAMIC ALOC REQUEST BLOCK\n         ST    R1,REQBLK          SAVE ADDRESS OF STORAGE\n         BAL   R14,ENTRY910       ALLOC A THE PASSWORD DATA SET\n         OPEN  PASSWORD\nEXIT015  EQU   *\n         B     ENTRY018\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ASK USER FOR TYPE OF REQUEST (ALL, PW=, OR DSN=)\n*\n*----------------------------------------------------------------------\nENTRY018 DS    0H\n         TPUT  MSG18A,80         ASK USER FOR REQUEST TYPE\n         TGET  DSN,56            GET ANSWER\n         LTR   R2,R1             CHECK LENGTH OF REPLY\n         BNZ   AAA018            NOT ZERO, CHECK NEXT OPTION\n         OI    SWITCH,OPTALL     SET 'ALL' OPTION\n         B     ENTRY020          PROCESS 'ALL'\nAAA018   OC    DSN,=CL56' '      INSURE UPPER CASE\n         CLC   DSN(3),=C'PW='    CHECK VALIDITY\n         BNE   BBB018            NO, CONTINUE\n         SH    R2,=H'4'          DECREMENT LENGTH (+1)\n         BM    ENTRY018          INVALID REPLY\n         LA    R3,DSN+3          COMPARE OPERAND\n         LA    R4,IN#PW          COMPARE OPERAND\n         B     ENTRY020          PROCESS PASSWORD REQ\nBBB018   CLC   DSN(4),=C'DSN='   CHECK VALIDITY\n         BNE   ENTRY018          INVALID, RETRY\n         SH    R2,=H'5'          DECREMENT LENGTH\n         BM    ENTRY018          INVALID REPLY\n         LA    R3,DSN+4          COMPARE OPERAND\n         LA    R4,IN#DSN         COMPARE OPERAND\n         B     ENTRY020          PROCESS PASSWORD REQ\nMSG18A   DC    CL80'ENTER DSN=, PW=, (OR NULL)'\nDSN      DC    CL56' '\n         EJECT\n*----------------------------------------------------------------------\n*\n*        READ PASSWORD DATASET TO PROCESS USER REQUEST\n*\n*----------------------------------------------------------------------\nENTRY020 DS    0H\n         READ  RDECB,SF,PASSWORD,INREC\n         CHECK RDECB\n         LA    R1,INREC\n         CLI   IN#DSN,X'FF'   UNUSED ENTRY ?\n         BE    ENTRY020  YES - GET NEXT RECORD\n         CLI   IN#DSN,X'00'   UNUSED ENTRY ?\n         BE    ENTRY020  YES - GET NEXT RECORD\n         TM    SWITCH,OPTALL  IS THIS 'ALL' REQUEST?\n         BO    AAA020         YES, DO IT ALL\n         EX    R2,COMP020     CHECK FOR REQUESTED ENTRY\n         BNE   ENTRY020       NOT EQUAL, IGNORE IT\nAAA020   MVC   OT#DSN,IN#DSN  MOVE DSNAME TO MESSAGE\n         MVC   OT#PW,IN#PW    MOVE PASSWORD TO MESSAGE\n         TPUT  OT#REC,80\nEXIT020  EQU   *\n         B     ENTRY020      GET NEXT RECORD\nCOMP020  CLC   0(0,R3),0(R4) EXECUTED COMPARE\n         EJECT\n*----------------------------------------------------------------------\n*\n*\n*----------------------------------------------------------------------\nEOJ      DS    0H\n         CLOSE PASSWORD            THIS WILL DE-ALLOCATE (FREE=CLOSE)\nEOJ1     L     R0,RBSIZE\n         L     R1,REQBLK\n         FREEMAIN R,LV=(0),A=(1)   FREE THE ALLOCATION WORK AREA\n         L     R15,RC            SET RETURN CODE\n         $EPILOG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ALLOC THE PASSWORD DATA SET ON THE IPL VOLUME\n*\n*----------------------------------------------------------------------\nENTRY910 DS    0H\n         ST    R14,ST910          SAVE RETURN ADDRESS\n         L     R11,REQBLK         ADDRESS OF REQUEST BLOCK\n         USING S99RBP,R11         REQ BLK POINTER DSECT\n         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT\n         USING S99RB,R10          RB DSECT\n         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB\n         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR\n         XC    S99RB(RBLEN),S99RB  CLEAR RB\n         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD\n         MVI   S99VERB,S99VRBAL   SET VERB CODE TO ALLOCATE\n         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)\n         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS\n         ST    R9,S99TXTPP        INIT TEXT PTR IN RB\n         LA    R8,S99TUPL+32 (16) POINT BEYOND LAST TXT PTR (1ST TXT\n*                                  UNIT)\n         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS\n* DDNAME\n         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT\n         LA    R1,DALDDNAM        KEY FOR DDNAME\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=X'0001'  MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=X'0008'  MOVE 8 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(8),=C'PASSWORD' DDNAME\n         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n* DSNAME\n         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT\n         LA    R1,DALDSNAM        KEY FOR DSNAME\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=X'0001'  MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=X'0008'  MOVE 8 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(8),=C'PASSWORD'         DSNAME\n         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n* DATA SET STATUS - SHR\n         ST    R8,S99TUPTR        PTR TO UNIT\n         LA    R1,DALSTATS        KEY FOR DSN STATUS\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=X'0001'  MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=X'0001'  MOVE 1 TO TXT UNIT LNGTH FLD\n         MVI   S99TUPAR,X'08'     INDICATE SHR DATA SET\n         LA    R8,7(R8)           BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n* VOL SER NUMBER\n         ST    R8,S99TUPTR             PTR TO UNIT\n         LA    R1,DALVLSER        KEY FOR VOL SER ALLOCATION\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=X'0001'  MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=X'0006'  MOVE 6 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(6),IPLVOL   USE IPL VOL SER\n         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n* UNIT TYPE\n         ST    R8,S99TUPTR             PTR TO UNIT\n         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR\n         LA    R1,DALUNIT         KEY FOR UNIT ALLOCATION\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=X'0001'  MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=X'0008'  MOVE 8 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(8),=C'SYSALLDA'   ANY UNIT IS OK\n         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n* FREE = CLOSE\n         ST    R8,S99TUPTR             PTR TO UNIT\n         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR\n         LA    R1,DALCLOSE        KEY FOR CLOSE PARM\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=X'0000'  MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R8,6(R8)           BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n********\n         LR    R1,R11             ADDR OF REQUEST BLOCK\n         DYNALLOC\n         ST    R15,RC             SAVE RETURN CODE\n         LTR   R15,R15            RETURN CODE ZERO ?\n         BNZ   ERROR2             NO - DECODE ERROR\nEXIT910  EQU   *\n         L     R14,ST910\n         BR    R14\nST910    DC    F'0'\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ERROR ROUTINES\n*\n*----------------------------------------------------------------------\nERROR0   DS    0H\n         TPUT  MSGER0,80\n         B     EOJ\nMSGER0   DC    CL80'SYS1.NUCLEUS NOT CATALOGED, ABORT'\n*----------------------------------------------------------------------\nERROR1   DS    0H\n         TPUT  MSGER1,80\n         B     EOJ\nMSGER1   DC    CL80'SECURITY VIOLATION, PROGRAM ABORTED'\n*----------------------------------------------------------------------\nERROR2   DS    0H\n         L     R1,RC              PICK UP RETURN CODE\n         CVD   R1,DBWRD\n         UNPK  MSG2+1(3),DBWRD+6(2)\n         OI    MSG2+3,X'F0'\n         UNPK  MSG2+7(5),S99ERROR(3)  1 MORE THAN FIELD SIZE\n         MVI   MSG2+11,X'40'   BLANK OUT GARBAGE\n         TR    MSG2+7(4),TRTBL-240    MAKE HEX PRINTABLE TOO\n         UNPK  MSG2+19(5),S99INFO(3)\n         MVI   MSG2+23,X'40'\n         TR    MSG2+19(4),TRTBL-240   MAKE HEX PRINTABLE TOO\n         TPUT  MSG2,40\n         B     EOJ1\nDBWRD    DC    D'0' 01234567890123456789012345\nMSG2     DC    CL40' XXX - XXXXX ERROR XXXXX INFO'\nTRTBL    DC    C'0123456789ABCDEF' HEX TRANSLATE TABLE\n*----------------------------------------------------------------------\n         EJECT\nOT#REC   DS    0CL80\n         DC    CL4'DSN='\nOT#DSN   DC    CL44' '\n         DC    CL7' '\n         DC    CL9'PASSWORD='\nOT#PW    DC    CL8' '\n         DC    CL8' '\n*-------\nINREC    DS   0CL132\nIN#DSN   DS   CL44\nIN#PW    DS   CL8\n         DS   CL80\n*-------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        STORAGE AREAS\n*\n*----------------------------------------------------------------------\n         LTORG\nREQBLK   DC    F'0'\nRBSIZE   DC    F'512'\nRC       DC    F'0'\nSWITCH   DC    X'00'\nOPTALL   EQU   X'01'\nIPLVOL   DC    CL6' '\nLOCATE   CAMLST NAME,LOCNAME,,LOCWORK\nLOCNAME  DC   CL44'SYS1.NUCLEUS'\n         DS   0D\nLOCWORK  DC   256X'00'\n*-------\n         EJECT\nPASSWORD DCB   DDNAME=PASSWORD,DSORG=PS,MACRF=R,EODAD=EOJ,             X\n               KEYLEN=52,RECFM=F,BLKSIZE=80,LRECL=80\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DSECTS\n*\n*----------------------------------------------------------------------\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\nRBLEN    EQU   (S99RBEND-S99RB)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAVEALL": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00e\\x00e\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&NAME    SAVEALL    &RENT,&REG=3,&EQU=YES\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE 2\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE 1\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE 2\n.NOEQU   ANOP\n         SAVE  (14,12),,*\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN    R,LV=72        GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\nJ&SYSNDX DS    0H\n         EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UADS": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x01\\xa0\\x01\\xa0\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 416, "newlines": 416, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n*---------------------------------------------------------------------\n*\n*        THIS TSO COMMAND PROCESSOR WILL ALLOW THOSE USERS WITH\n*        OPERATOR ABILITY TO DYNAMICALLY CHANGE THEIR UADS ENTRIES\n*        IN THE PSCB.  ONCE CHANGED, IT WILL REMAIN IN EFFECT\n*        ACCROSS A RELOGON (UNLESS THE SYSTEM CRASHES).\n*\n*        THOSE ENTRIES THAT MAY BE CHANGED AND THEIR ASSOCIATED\n*        KEYWORDS ARE LISTED BELOW:\n*\n*        ID(????)/RESET    CHANGE CURRENT USER-ID TO ???? OR RESET\n*                          BACK TO REAL ID. THIS OPERAND IS ALLOWED\n*                          ONLY FOR USERS WITH ACCOUNT AUTHORITY,\n*                          SINCE ONE MUST INSURE THAT PRIOR TO\n*                          LOGOFF THE NEW ID MUST BE RESET.  IF NOT\n*                          RESET, THE NEW ID SET WILL BE UPDATED\n*                          WITH THE UADS ENTRY FOR THE ACTIVE USER.\n*\n*        DEST(????)/NODEST CHANGE THE CURRENT DEFAULT DESTINATION\n*                          TO ???? OR NULLIFY IT.\n*\n*        UNIT(????)/NOUNIT CHANGE THE CURRENT DEFAULT DYNAMIC\n*                          ALLOCATION UNITNAME TO ???? OR NULLIFY IT.\n*\n*        JCL/NOJCL         ALLOW OR DISALLOW BATCH JOB SUBMISSIONS.\n*\n*        MOUNT/NOMOUNT     ALLOW OR DISALLOW FOREGROUND TAPE/DISK\n*                          MOUNT CAPABILITIES.\n*\n*        PASS/NOPASS       ALLOW OR DISALLOW DATASET PASSWORD CHECKING\n*\n*---------------------------------------------------------------------\n         EJECT\nUADS     $PROLOG\n*\n*        REGISTER USAGE:\n*\n*        R0-R8 =====> WORK REGISTERS\n*\n*        R9    =====> BASE FOR THE PSCB\n*        R10   =====> BASE FOR THE PARSE PDE'S\n*        R11   =====> BASE FOR THE CPPL\n*        R12   =====> BASE FOR UADS (THIS ROUTINE)\n*\n         EJECT\n*---------------------------------------------------------------------*\n*\n*        RETRIEVE INITIALIZATION PARMS\n*\n*---------------------------------------------------------------------*\nENTRY010 DS    0H\n         LR    R11,R1             SAVE CPPL POINTER\n         USING CPPL,R11           PROVIDE ADDRESSABILITY\n         MVC   PPLUPT,CPPLUPT     COPY UPT ADDRESS\n         MVC   PPLECT,CPPLECT     COPY ECT ADDRESS\n         MVC   PPLCBUF,CPPLCBUF   COPY ADDRESS OF COMMAND BUF\n         L     R9,CPPLPSCB        ADDR OF PSCB\n         USING PSCB,R9\nEXIT010  EQU   *\n         EJECT\n*---------------------------------------------------------------------*\n*\n*        LINK TO PARSE TO RETRIEVE COMMAND DATA\n*        PROCESS USER-ID OPERANDS\n*\n*---------------------------------------------------------------------*\nENTRY020 DS    0H\n         LA    R1,PPLUPT          PROVIDE LIST FOR PARSE\n         LINK  EP=IKJPARS         PARSE COMMAND\n         LINK  EP=AON\n         MODESET KEY=ZERO\n         L     R10,PPLANSR        GET POINTER TO ANSWER AREA\n         USING IKJPARMD,R10       PROVIDE ADDRESSABILITY\n         LH    R15,USERID         GET NUMBER OF SPECIFIED KEYWORD\n         SLL   R15,2              MULTIPLY BY FOUR\n         B     *+4(R15)           TO PROCESSING ROUTINE\n         B     EXIT020            NOT SPECIFIED, SKIP IT\n         B     BBB020             RESET SPECIFIED, GO TO IT\nAAA020   L     R1,UID             ADDRESS OF NEW USERID\n         LH    R3,UID+4           GET SIZE OF ID\n         B     DDD020             TO COMMON ROUTINE\nBBB020   EQU   *\n         L     R3,16              ADDR OF CVT\n         L     R3,0(R3)           ADDR OF OLD/NEW PTRS\n         L     R3,12(R3)          ADDR OF CURRENT ASCB\n         L     R1,176(R3)         ADDR OF REAL USER-ID\n         LR    R3,R1\n         MVC   PSCBUSER,BLANKS\n         LA    R15,7              MAX SIZE OF USERID\nLOOP020  EQU   *\n         CLI   0(R3),C' '         END OF ID ?\n         BE    CCC020             YES - OK\n         CLI   0(R3),X'00'        END OF ID ?\n         BE    CCC020             YES - OK\n         LA    R3,1(R3)           BUMP\n         BCT   R15,LOOP020        CHECK ALL BYTES\nCCC020   SR    R3,R1              LENGTH OF USERID\nDDD020   EQU   *\n         TM    PSCBATR1,PSCBACCT  DOES USER HAVE ACCOUNT AUTHORITY?\n         BZ    ERR020             NO, INFORM USER\n         STC   R3,PSCBUSRL        STORE LENGTH\n         BCTR  R3,R0              DECR FOR EX\n         EX    R3,MVCID\nEXIT020  EQU   *\n         B     ENTRY030\nERR020   TPUT  MSG020,60\n         B     ENTRY030\nMSG020   DC    CL60'USER-ID CHANGE NOT AUTHORIZED'\nMVCID    MVC   PSCBUSER(0),0(R1)\n         EJECT\n*---------------------------------------------------------------------*\n*\n*        PROCESS UNIT OPERANDS\n*\n*---------------------------------------------------------------------*\nENTRY030 DS    0H\n         LH    R15,UNIT           GET NUMBER OF SPECIFIED KEYWORD\n         SLL   R15,2              MULTIPLY BY FOUR\n         B     *+4(R15)           TO PROCESSING ROUTINE\n         B     EXIT030            NOT SPECIFIED, SKIP IT\n         B     AAA030             NOUNIT SPECIFIED, GO TO IT\n         L     R1,UNITN           UNIT SPECIFIED, DO IT\n         LH    R2,UNITN+4         GET SIZE OF NAME\n         BCTR  R2,R0              DECR FOR EX\n         EX    R2,MVCUNIT         MOVE UNIT\n         B     EXIT030\nAAA030   EQU   *\n         MVC   PSCBGPNM,BLANKS\nEXIT030  DS    0H\n         B     ENTRY040\nMVCUNIT  MVC   PSCBGPNM(0),0(R1)\n         EJECT\n*---------------------------------------------------------------------*\n*\n*        PROCESS DEST OPERANDS\n*\n*---------------------------------------------------------------------*\nENTRY040 DS    0H\n         LH    R15,DEST           GET NUMBER OF SPECIFIED KEYWORD\n         SLL   R15,2              MULTIPLY BY FOUR\n         B     *+4(R15)           TO PROCESSING ROUTINE\n         B     EXIT040            NOT SPECIFIED, SKIP IT\n         B     AAA040             NODEST SPECIFIED, GO TO IT\n         MVC   PSCBDEST,BLANKS\n         L     R1,DESTN           DEST SPECIFIED, DO IT\n         LH    R2,DESTN+4         GET SIZE OF DEST NAME\n         BCTR  R2,R0              DECR FOR EX\n         EX    R2,MVCDEST         MOVE DEST\n         B     EXIT040\nAAA040   EQU   *\n         MVC   PSCBDEST,BLANKS\nEXIT040  DS    0H\n         B     ENTRY050\nMVCDEST  MVC   PSCBDEST(0),0(R1)\n         EJECT\n*---------------------------------------------------------------------*\n*\n*        PROCESS JCL OPERANDS\n*\n*---------------------------------------------------------------------*\nENTRY050 DS    0H\n         LH    R15,JCL            GET NUMBER OF SPECIFIED KEYWORD\n         SLL   R15,2              MULTIPLY BY FOUR\n         B     *+4(R15)           TO PROCESSING ROUTINE\n         B     EXIT050            NOT SPECIFIED, SKIP IT        0\n         B     AAA050             NOJCL SPECIFIED, GO TO IT      1\n         OI    PSCBATR1,PSCBJCL   ALLOW JCL                      2\n         B     EXIT050\nAAA050   EQU   *\n         NI    PSCBATR1,X'FF'-PSCBJCL  RESET JCL\nEXIT050  DS    0H\n         EJECT\n*---------------------------------------------------------------------*\n*\n*        PROCESS MOUNT OPERANDS\n*\n*---------------------------------------------------------------------*\nENTRY060 DS    0H\n         LH    R15,MOUNT          GET NUMBER OF SPECIFIED KEYWORD\n         SLL   R15,2              MULTIPLY BY FOUR\n         B     *+4(R15)           TO PROCESSING ROUTINE\n         B     EXIT060            NOT SPECIFIED, SKIP IT          0\n         B     AAA060             NOMOUNT SPECIFIED, GO TO IT        1\n         OI    PSCBATR1,PSCBVMNT  ALLOW MOUNT                     2\n         B     EXIT060\nAAA060   EQU   *\n         NI    PSCBATR1,X'FF'-PSCBVMNT  RESET MOUNT\nEXIT060  DS    0H\n         EJECT\n*---------------------------------------------------------------------*\n*\n*        PROCESS PASSWORD OPERANDS\n*\n*---------------------------------------------------------------------*\nENTRY070 DS    0H\n         L     R1,16          GET CVT POINTER\n         L     R1,0(R1)       OLD/NEW POINTER\n         L     R1,4(R1)       OUR TCB POINTER\n         L     R2,180(R1)     JSCB POINTER\n         USING IEZJSCB,R2\n         OI    JSCBSWT1,JSCBPASS  NO PASSWORD CHECKING\n         LH    R15,PASS           GET NUMBER OF SPECIFIED KEYWORD\n         SLL   R15,2              MULTIPLY BY FOUR\n         B     *+4(R15)           TO PROCESSING ROUTINE\n         B     EXIT070            NOT SPECIFIED, SKIP IT          0\n         B     AAA070             NOPASS SPECIFIED, GO TO IT      1\n         NI    JSCBSWT1,X'FF'-JSCBPASS  NO PASSWORD CHECKING      2\n         B     EXIT070\nAAA070   EQU   *\n         OI    JSCBSWT1,JSCBPASS  ALLOW PASSWORD CHECKING\nEXIT070  DS    0H\n         DROP  R2\n         EJECT\n*---------------------------------------------------------------------*\nRETURN   DS    0H\n         MODESET KEY=ZERO\n         LINK  EP=AOFF\n         L     R15,RC             RESTORE RETURN CODE\n         $EPILOG\n         EJECT\n*---------------------------------------------------------------------*\nBLANKS   DC    81C' '             BLANK FOLLOWED BY 80 BYTE BUFFER\nECB      DC    F'0'               DUMB ECB FOR PARSE\nPPLANSR  DC    F'0'               PARSE ANSWER AREA POINTER\nRC       DC    F'0'               RETURN CODE SAVE AREA\n*---------------------------------------------------------------------*\nPPLUPT   DC    F'0'               USER PROFILE TABLE POINTER\nPPLECT   DC    F'0'               ENVIRONMENT CONTROL TABLE\nPPLECB   DC    A(ECB)             ECB POINTER\nPPLPCL   DC    A(IKJPCL)          ADDRESS OF IKJPARM\nPPLANS   DC    A(PPLANSR)         PLACE TO PUT ANSWER\nPPLCBUF  DC    F'0'               POINTER TO COMMAND BUFFER\n         EJECT\n*---------------------------------------------------------------------*\n         LTORG\n         EJECT\nIKJPCL   IKJPARM\nUSERID   IKJKEYWD\n         IKJNAME 'RESET'\n         IKJNAME 'ID',SUBFLD=IDSUBF\nUNIT     IKJKEYWD\n         IKJNAME 'NOUNIT'\n         IKJNAME 'UNIT',SUBFLD=UNITSUBF\nDEST     IKJKEYWD\n         IKJNAME 'NODEST'\n         IKJNAME 'DEST',SUBFLD=DESTSUBF\nJCL      IKJKEYWD\n         IKJNAME 'NOJCL'\n         IKJNAME 'JCL'\nMOUNT    IKJKEYWD\n         IKJNAME 'NOMOUNT'\n         IKJNAME 'MOUNT'\nPASS     IKJKEYWD\n         IKJNAME 'NOPASS'\n         IKJNAME 'PASS'\nIDSUBF   IKJSUBF\nUID      IKJPOSIT  USERID,PROMPT='NEW USER-ID TO BE USED'\nUNITSUBF IKJSUBF\nUNITN    IKJIDENT  'UNITNAME',MAXLNTH=8,FIRST=ALPHANUM,OTHER=ALPHANUM, X\n               PROMPT='UNIT NAME FOR DEFAULT DEVICE ALLOCATIONS'\nDESTSUBF IKJSUBF\nDESTN    IKJIDENT  'DEST',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,        X\n               PROMPT='DESTID FOR DEFAULT SYSOUT/JOB ROUTING'\n         IKJENDP\n         PRINT OFF\n         IKJCPPL\n         IKJPSCB\n         IEZJSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XEQ": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x01R\\x01R\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 338, "newlines": 338, "modlines": 0, "user": "CNBNTRS"}, "text": "         TITLE 'XEQ TSO COMMAND PROCESSOR'\nXEQ      CSECT\n************************************************************\n* XEQ TSO COMMAND PROCESSOR                                *\n*                                                          *\n* THIS COMMAND PROCESSOR WILL INVOKE A PROGRAM RESIDING    *\n* IN A SYSTEM LIBRARY                                      *\n*                                                          *\n* FORMAT:   XEQ   PROGRAM-NAME   'PARM-DATA'               *\n*                                                          *\n************************************************************\n SPACE 1\n*                   MAIN                     VALIDITY CHECK EXIT\n*                   ----                     -------------------\nR0       EQU   0    WORK REG                 WORK REG\nR1       EQU   1    WORK REG                 WORK REG\nR2       EQU   2    NOT USED                 NOT USED\nR3       EQU   3    MODULE BASE REG          MODULE BASE REG\nR4       EQU   4    A(CPPL)                  A(CPPL)\nR5       EQU   5    A(PPL)                   NOT USED\nR6       EQU   6    WORK REG                 A(WORKAREA)\nR7       EQU   7    NOT USED                 A(PDE)\nR8       EQU   8    WORK REG                 WORK REG\nR9       EQU   9    WORK REG                 WORK REG\nR10      EQU   10   WORK REG                 WORK REG\nR11      EQU   11   A(PDL)                   A(PSCB)\nR12      EQU   12   WORK REG                 NOT USED\nR13      EQU   13   A(WORKAREA)              A(EXITSAVE)\nR14      EQU   14   LINK REG                 LINK REG\nR15      EQU   15   RETURN CODES             RETURN CODES\n SPACE 1\n****************************\n* ENTRY AND INITIALIZATION *\n****************************\nXEQ      CSECT\n         USING *,R15          USING R15 AT *\n         B     XEQENT         GO AROUND MODULE ID\n         DROP  R15            DROP R15\n         DC    CL4'XEQ'       MODULE ID\n         DC    CL4'0101'      VERSION\n SPACE 1\nXEQENT   STM   R14,R12,12(R13) SAVE R14-R12\n         BALR  R3,0           R3 IS MODULE BASE REG\n         USING *,R3           USING R3 AT *\n         LR    R4,R1          A(CPPL) IN R4\n         USING CPPL,R4        USING R4 AT CPPL\n SPACE 1\n         LA    R0,WORKLEN     L'WORKAREA IN R0\n         GETMAIN R,LV=(R0)    ACQUIRE WORKAREA\n         LR    R8,R1          A(WORKAREA) IN R8\n         ST    R13,4(R8)      A(HISAVE) IN MYSAVE+4\n         ST    R8,8(R13)      A(MYSAVE) IN HISAVE+8\n         LR    R13,R8         A(MYSAVE) IN R13\n         USING WORKAREA,R13   USING R13 AT WORKAREA\n SPACE 1\n************************\n* PARSE COMMAND BUFFER *\n************************\nXEQPARS  LA    R5,XEQPPL      A(PPL) IN R5\n         USING PPL,R5         USING R5 AT PPL\n         MVC   PPLUPT,CPPLUPT A(UPT) IN PPL\n         MVC   PPLECT,CPPLECT A(ECT) IN PPL\n         MVC   PPLCBUF,CPPLCBUF A(CBUF) IN PPL\n         MVC   PPLPCL,XEQPCLA A(PCL) IN PPL\n         XC    ECB,ECB        ZERO CP ECB\n         LA    R8,ECB         A(CP ECB)\n         ST    R8,PPLECB        IN PPL\n         XC    XEQANS,XEQANS  ZERO PDL ANSWER AREA\n         LA    R8,XEQANS      A(PDL ANSWER AREA)\n         ST    R8,PPLANS        IN PPL\n         LA    R8,WORKAREA    A(WORKAREA)\n         ST    R8,PPLUWA        IN PPL\n SPACE 1\n         LA    R1,PPL         A(PPL) IN R1\n         LINK  EP=IKJPARS     GO PARSE COMMAND BUFFER\n         LR    R8,R15         PUT PARSE RETURN CODE IN R8\n SPACE 1\n************************\n* PARSE ERROR ANALYSIS *\n************************\n         B     XEQPARCK(R8) ROUTE TO ERROR HANDLER\nXEQPARCK B     XEQPAROK       NO ERRORS\n         B     XEQPE4         INCOMPLETE PARAMETERS AND NOPROMPT\n         B     XEQRET         USER ATTENTIONED OUT (RETURN)\n         B     XEQPE12        BAD PPL (ABEND)\n         B     XEQPE16        INSUFFICIENT REGION SIZE FOR PARSE\n         B     XEQPE20        INVALID PARAMETERS (VALIDCK FAILURE)\n         B     XEQPE24        PCL CONFLICT (ABEND)\n SPACE 1\nXEQPE0   ABEND 100,DUMP       A(PDL) IS ZERO AFTER SUCCESSFUL PARSE\n SPACE 1\nXEQPE4   LA    R1,XEQPM4      INCOMPLETE PARAMETERS AND NOPROMPT\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE12  ABEND 112,DUMP       BAD PPL\n SPACE 1\nXEQPE16  LA    R1,XEQPM16     INSUFFICIENT REGION SIZE FOR PARSE\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE20  LA    R1,XEQPM20     INVALID PARAMETERS (VALIDCK FAILURE)\n         BAL   R6,XEQTPUT     GO TELL\n         B     XEQRET         GO RETURN\n SPACE 1\nXEQPE24  ABEND 124,DUMP       PCL CONFLICT\n SPACE 1\n************************************\n* PREPARE PARM DATA IF ANY PRESENT *\n************************************\nXEQPAROK L     R11,XEQANS     A(PDL) IN R11\n         LA    R11,0(R11)     EXORCISE HI ORDER BYTE\n         LTR   R11,R11        DOES PDL EXIST\n         BZ    XEQPE0         NO, SOMETHING IS WRONG\n         USING XEQPDL,R11     USING R11 AT XEQPDL\n SPACE 1\nXEQPCK   LA    R8,PARMLEN     A(PARM AREA) IN R8\n         ST    R8,PARMADDR    STORE IN WORKAREA\n         OI    PARMADDR,X'80' INDICATE LAST IN LIST\n         XC    PARMLEN,PARMLEN ZERO PARMLEN\n         MVI   PARMAREA,C' '  SET BLANK\n         MVC   PARMAREA+1(L'PARMAREA-1),PARMAREA PROPAGATE\n         TM    PARM+6,X'80'   IS PARM PRESENT\n         BZ    XEQPRLS        NO, CONTINUE\n SPACE 1\n         L     R8,PARM        A(PARM DATA) IN R8\n         LTR   R8,R8          IS PARM PRESENT\n         BZ    XEQPRLS        NO, CONTINUE\n SPACE 1\n         MVC   PARMLEN,PARM+4 SET L'PARM DATA\n         LH    R9,PARMLEN     L'PARM DATA IN R9\n         SH    R9,XEQONE      DECREMENT BY 1\n         BM    XEQPRLS        BRANCH IF NO PARM DATA\n SPACE 1\n         CH    R9,XEQPMAX     DOES PARM LENGTH EXCEED MAX\n         BL    XEQPSET        NO, CONTINUE\n SPACE 1\n         MVC   PARMLEN,XEQPMAX YES, SET\n         LH    R9,PARMLEN           TO\n         SH    R9,XEQONE            MAX\n         LA    R1,XEQMM0      PARM LENGTH EXCEEDS MAX\n         BAL   R6,XEQTPUT     GO TELL\n SPACE 1\nXEQPSET  EX    R9,PARMOVE     MOVE PARM DATA TO WORKAREA\n SPACE 1\n***********************\n* CLEANUP AFTER PARSE *\n***********************\nXEQPRLS  IKJRLSA XEQANS       RELEASE PARSE STORAGE\n SPACE 1\n**********************************\n* XFER CONTROL TO TARGET PROGRAM *\n**********************************\nXEQXFER  MVC   MEMXFER(MEMXFERL),MEMXFERS PREP XFER LIST SKELETON\n         LA    R1,PARMADDR    A(PARM LIST) IN R1\n         LA    R15,MEMXFER    A(XFER LIST) IN R15\n         LA    R8,BLDLNAME    A(BLDL ENTRY) IN R8\n         L     R13,4(R13)     A(HISAVE) IN R13\n         XCTL  (2,12),        XFER CONTROL TO TARGET PROGRAM           X\n               DE=(R8),                                                X\n               MF=(E,(1)),SF=(E,(15))\n SPACE 1\n**********************\n* CLEANUP AND RETURN *\n**********************\nXEQRET   LA    R1,WORKAREA    A(WORKAREA) IN R1\n         LA    R0,WORKLEN     L'WORKAREA IN R0\n         L     R13,4(R13)     A(HISAVE) IN R13\n         FREEMAIN R,LV=(R0),A=(R1) FREE WORKAREA\n         LM    R14,R12,12(R13) RESTORE R14-R12\n         BR    R14            RETURN\n SPACE 1\n*********************************\n* SUBROUTINE TO WRITE A MESSAGE *\n*********************************\nXEQTPUT  SR    R0,R0          ZERO R0\n         IC    R0,0(R1)       L'MESSAGE IN R0\n         LA    R1,1(R1)       A(MESSAGE) IN R1\n         TPUT  (R1),(R0)      TELL TERMINAL\n         BR    R6             RETURN TO CALLER\n SPACE 1\n**************************\n* LOCAL READONLY STORAGE *\n**************************\nMEMXFERS XCTL  SF=L           SKELETON MEMBER XFER CONTROL LIST\nMEMXFERL EQU   *-MEMXFERS     LENGTH\n SPACE 1\nXEQPCLA  DC    V(XEQPCL)      A(PCL)\nXEQPMAX  DC    H'100'         MAX LENGTH FOR PARMS\nXEQONE   DC    H'1'           CONSTANT OF 1\nMEMOVEB  MVC   0(0,R10),0(R9) MOVE MEMBER NAME TO BLDL NAME AREA\nPARMOVE  MVC   PARMAREA(0),0(R8) MOVE PARM TO WORKAREA\n SPACE 1\nXEQPM4   DC    AL1(XEQPM4L),C'INCOMPLETE PARAMETERS AND NOPROMPT'\nXEQPM4L  EQU   *-(XEQPM4+1)   LENGTH\n SPACE 1\nXEQPM16  DC    AL1(XEQPM16L),C'INSUFFICIENT REGION SIZE FOR PARSE'\nXEQPM16L EQU   *-(XEQPM16+1)  LENGTH\n SPACE 1\nXEQPM20  DC    AL1(XEQPM20L),C'INVALID PARAMETERS (VALIDCK FAILURE)'\nXEQPM20L EQU   *-(XEQPM20+1)  LENGTH\n SPACE 1\nXEQMM0   DC    AL1(XEQMM0L),C'PARM LENGTH EXCEEDS MAX, TRUNCATED'\nXEQMM0L  EQU   *-(XEQMM0+1)   LENGTH\n SPACE 1\n         DROP  R5,R11,R13     DROP R5, R11, R13\n SPACE 1\n****************************************\n* VALIDITY CHECK EXIT FOR PROGRAM NAME *\n****************************************\nMEMVAL   STM   R14,R12,12(R13) SAVE R14-R12\n         LR    R8,R1          SAVE A(EXIT PARM LIST) IN R8\n         USING MEMCOMM,R8     USING R8 AT MEMCOMM\n         L     R6,USERWORD    A(WORKAREA) IN R6\n         USING WORKAREA,R6    USING R6 AT WORKAREA\n         LM    R3,R4,SAVEAREA+32 RESTORE MODULE BASE REG AND A(CPPL)\n         L     R11,CPPLPSCB   A(PSCB) IN R11\n         USING PSCB,R11       USING R11 AT PSCB\n         L     R7,PDEADR      A(PDE) IN R7\n         DROP  R8             DROP R8\n SPACE 1\n         LA    R8,EXITSAVE    A(SAVEAREA) IN R8\n         ST    R13,4(R8)      A(HISAVE) IN MYSAVE)+4\n         ST    R8,8(R13)      A(MYSAVE) IN HISAVE+8\n         LR    R13,R8         A(MYSAVE) IN R13\n SPACE 1\n****************************************\n* DO A BLDL TO VERIFY MEMBER EXISTENCE *\n****************************************\nMEMVALB  MVC   BLDLCNT,XEQONE SET ENTRY COUNT TO 1\n         LA    R8,BLDLENT     SET ENTRY\n         STH   R8,BLDLENE       LENGTH\n         XC    BLDLRES,BLDLRES ZERO REST\n         MVI   BLDLNAME,C' '  SET BLANK\n         MVC   BLDLNAME+1(L'BLDLNAME-1),BLDLNAME PROPAGATE\n SPACE 1\n         SR    R8,R8          ZERO R8\n         LH    R8,4(R7)       L'MEMBER NAME IN R8\n         SH    R8,XEQONE      DECREMENT BY 1\n         BM    MEMVNO         BRANCH IF NO MEMBER - GO PROMPT\n SPACE 1\n         L     R9,0(R7)       A(MEMBER NAME) IN R9\n         LTR   R9,R9          DOES MEMBER NAME EXIST\n         BZ    MEMVNO         NO, GO PROMPT\n SPACE 1\n         LA    R10,BLDLNAME   A(BLDL NAME AREA) IN R10\n         EX    R8,MEMOVEB     MOVE MEMBER NAME TO BLDL NAME AREA\n SPACE 1\n         BLDL  0,BLDLIST      ISSUE BLDL FOR MEMBER NAME\n         LTR   R15,R15        WAS MEMBER FOUND\n         BZ    MEMVALA        YES, GO GET AUTHORIZATION CLEARANCE\n SPACE 1\nMEMVNO   LA    R15,4          NO, SET PARAMETER INVALID INDICATOR\n         B     MEMVRET        GO RETURN\n SPACE 1\n**********************************\n* VALIDATE AUTHORIZATION VIA MMI *\n**********************************\nMEMVALA  MVI   MMIREQ,MMIREQPG INDICATE PROGRAM TYPE\n         MVC   MMIUSER,PSCBUSER MOVE USERID TO MMICB\n         MVC   MMIPROG,BLDLNAME MOVE MEMBER NAME\n         LA    R1,MMICB       A(MMICB) IN R1\n*        LINK  EP=TSOMMI      LINK TO MMI\n*        LTR   R15,R15        IS AUTHORIZATION CLEARED\n*        BZ    MEMVRET        YES, GO RETURN\n         B     MEMVRET        ALWAYS GO\n SPACE 1\n         LA    R15,8          NO, SET PARAMETER INVALID INDICATOR\n SPACE 1\nMEMVRET  L     R13,4(R13)     A(HISAVE) IN R13\n         ST    R15,16(R13)    PLACE RETURN CODE IN R15\n         LM    R14,R12,12(R13) RESTORE R14-R12\n         BR    R14            RETURN TO PARSE\n SPACE 1\n         DROP  R11,R6         DROP R11, R6\n SPACE 1\n************************************************\n* PARSE CONTROL LIST AND PARSE DESCRIPTOR LIST *\n************************************************\nXEQPCL   IKJPARM DSECT=XEQPDL\n SPACE 1\nMEMBER   IKJIDENT 'MEMBER NAME',MAXLNTH=8,OTHER=ALPHANUM,              X\n               PROMPT='MEMBER NAME',VALIDCK=MEMVAL\n SPACE 1\nPARM     IKJPOSIT QSTRING\n SPACE 1\n         IKJENDP\n SPACE 1\n******************\n* DSECT MAPPINGS *\n******************\nMEMCOMM  DSECT                MEMBER VALIDITY CHECK EXIT COMM\nPDEADR   DS    A              A(PDE)\nUSERWORD DS    A              A(WORKAREA)\nVALMSG   DS    A              A(MESSAGE)\n SPACE 1\n         IKJPPL\nPPLLEN   EQU   *-PPL          LENGTH\n SPACE 1\nWORKAREA DSECT                WORKAREA\n******************************\n* COMMAND PROCESSOR WORKAREA *\n******************************\nSAVEAREA DS    18F            STD SAVEAREA (MAIN)\n SPACE 1\nMEMXFER  DS    0D             MEMBER XFER LIST\n         ORG   *+MEMXFERL       AREA\n SPACE 1\nXEQPPL   DS    0A             PPL\n         ORG   *+PPLLEN        AREA\n SPACE 1\nECB      DS    F              CP ECB\nXEQANS   DS    A              A(PDL)\nEXITSAVE DS    18F            STD SAVEAREA (VALIDITY CHECK EXIT)\n SPACE 1\nBLDLIST  DS    0F             BLDL LIST FOR MEMBER VALIDATION\nBLDLCNT  DS    H              MEMBER COUNT\nBLDLENE  DS    H              ENTRY LENGTH AREA\nBLDLNAME DS    CL8            MEMBER NAME\nBLDLRES  DS    CL50           REST\nBLDLENT  EQU   *-BLDLNAME     ENTRY LENGTH\n SPACE 1\nPARMADDR DS    A              A(PARMAREA)\nPARMLEN  DS    H              L'PARM DATA\nPARMAREA DS    CL100          PARM DATA\n SPACE 1\nMMICB    DS    0CL16          MMICB\nMMIREQ   DS    XL1            REQUEST\nMMIREQPG EQU   128            PROGRAM TYPE\nMMIUSER  DS    CL7            USERID\nMMIPROG  DS    CL8            MEMBER NAME\n         DS    0D             ALIGNMENT\nWORKLEN  EQU   *-WORKAREA     LENGTH\n SPACE 1\n         IKJCPPL\n SPACE 1\n         IKJPSCB\n         END   XEQ           END ASSEMBLY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT227/FILE227.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT227", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}