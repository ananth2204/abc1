{"INMR01": {"INMLRECL": 80, "INMFNODE": "ORIGNODE", "INMFUID": "ORIGUID", "INMTNODE": "DESTNODE", "INMTUID": "DESTUID", "INMFTIME": "20110427165832000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 479680, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 5, "INMDSNAM": "RAKF.RRKF002.ELEMENTS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 479680, "INMDSORG": "PS", "INMLRECL": 5616, "INMBLKSZ": 5620, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 479680, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RAKF.RRKF002.ELEMENTS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 5620, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 14, "DVAMAXRC": 32760, "DVACYL": 886, "DVATRK": 15, "DVATRKLN": 47968, "DVAOVHD": 256, "num_header_records": 0, "DS1REFD": "000000", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x00\\x00\\x00\\x00'", "DS1LSTAR": "b'\\x00\\x00\\x00'", "DS1TRBAL": "b''"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bvD\\x04\\x9a\\xdc\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bvD\\x04\\x9a\\xdc\\xd8'", "b'X\\x00:\\x18\\x00\\x00\\x00*\\x00\\x02\\x00*\\x00\\x0b\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$CUST": {"ttr": 13, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x01\\x11\\x11\\x7f\\x01\\x11\\x11o\\x18\\x00\\x00w\\x00w\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-04-27T00:00:00", "modifydate": "2011-04-26T18:00:00", "lines": 119, "newlines": 119, "modlines": 0, "user": "*RAKF*"}, "text": "                   RAKF 1.2.0 Customization Instructions\n                   =====================================\n\nThis document describes the steps to customize and activate RAKF 1.2.0\nafter the basic SMP4 installation has been completed.\n\n1. a) Allocate a PDS named SYS1.SECURE.CNTL (LRECL=80). This PDS will\n      contain 2 members:\n\n      o USERS:    The RAKF users table\n      o PROFILES: The RAKF profiles table\n\n      If you've already allocated this library in an earlier version of\n      RAKF you can continue to use it. The name of the library has to be\n      SYS1.SECURE.CNTL. Although it could be changed this has to be done\n      in several locations and will for the sake of simplicity not be outlined\n      in these instructions.\n\n   b) Allocate a sequential dataset named SYS1.SECURE.PWUP with\n      LRECL=18 and RECFM=F (fixed records of 18 bytes, no blocking).\n      This dataset serves as a queue: User initiated password changes\n      are saved here until the next run of RAKFUSER integrates them into\n      the RAKF users table.\n\n      If you've already allocated this dataset in an earlier version of\n      RAKF you can continue to use it. The name of the dataset has to be\n      SYS1.SECURE.PWUP. Although it could be changed this has to be done\n      in several locations and will for the sake of simplicity not be outlined\n      in these instructions.\n\n   Note: During the process of adapting the profiles and users tables\n   ====  to meet your security requirements (step 6) special attention\n         to the protection of the datasets created in step 1 should be\n         payed:\n\n         o SYS1.SECURE.CNTL: started tasks and the user(s) and/or group(s)\n                             responsible for RAKF administration need UPDATE\n                             access to this dataset.\n         o SYS1.SECURE.PWUP: started tasks need UPDATE access to this dataset.\n\n         As both datasets contain clear text passwords normal users shouldn't be\n         allowed any access to them. An easy way to protect these datasets is\n         to define a dataset profile SYS1.SECURE.* with universal access NONE\n         and selectively allow the RAKF administrator user(s)/group(s) UPDATE\n         access to this profile. If the standard setup is used started tasks\n         have operations authority and thus don't need to be explicitely\n         allowed.\n\n2. If you're a first time RAKF user copy the following members from\n   HLQ.SAMPLIB to SYS1.SECURE.CNTL:\n\n   o MINUSR using a new name of USERS\n   o MINPRF using a new name of PROFILES\n\n   This establishes a minimal configuration equivalent to an unprotected\n   system with IBMUSER being defined as the only user. IBMUSER has\n   operations priviledge allowing all accesses.\n\n   If you are running Volker's TK3 (Turnkey MVS) system you can use\n   TK3USR instead of MINUSR which defines besides IBMUSER also the\n   users HERC01, HERC02, HERC03 and HERC04 with equivalent attributes\n   as they are defined in UADS. Note, however, that RAKF doesn't allow\n   users having no password. For this reason IBMUSER, HERC01 and HERC03\n   have a password of NONE defined instead of no password as in TK3.\n\n   Note that each TSO user still needs an UADS entry to define the TSO\n   authorizations JCL, MOUNT, OPER and ACCOUNT. These are not covered\n   by RAKF's users table.\n\n3. Issue the command\n\n   S RAKF\n\n   at the MVS console and reply YES to message RAKF002A. Verify that\n   the profiles and users tables initialize correctly and that you can\n   logon using the usernames and passwords from SYS1.SECURE.CNTL(USERS).\n\n   Note Although the RAKF procedure loads the in-core users and profiles tables\n   ==== it is not primarily intended to be used for that purpose during normal\n        operations. To routinely update the profiles or user table to activate\n        changes the procedures RAKFPROF or RAKFUSER should be used as outlined\n        in $$$$$DOC (this document is the unmodified \"INTRODUCTION TO THE ESC\n        SECURITY SYSTEM\" dated 1991 where these procedures are called CJYRPROF\n        and CJYRUIDS, respectively).\n\n        The main purpose of the RAKF procedure is to provide a means to activate\n        RAKF if initialization didn't take place automatically at IPL time, for\n        example during installation and customization. If the RAKF procedure is\n        run when RAKF had been activated already it will skip the initialization\n        and refresh the in-core users and profile table, which is equivalent to\n        running RAKFPROF and RAKFUSER.\n\n4. To enable automatic initialization of RAKF at system IPL time\n   (highly recommended!) MSTRJCL needs to be modified to contain DD\n   statements pointing to the users and profiles tables:\n\n   //RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),\n   //            DISP=SHR\n   //RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),\n   //            DISP=SHR\n   //RAKFPWUP DD DSN=SYS1.SECURE.PWUP,\n   //            DISP=SHR\n\n   Member ZJW0003 of HLQ.SAMPLIB provides a sample USERMOD accomplishing this.\n   If ZJW0003 fits your system just submit it. If not use any other\n   method of your choice to add the required DD cards.\n\n5. Edit SYS1.PARMLIB(RAKFINIT) and change the value NO in line 1 to ASK.\n   Then reIPL the system. Message RAKF002A will now be issued immediately\n   after master scheduler initialization and give you the choice to start\n   RAKF or not.\n\n6. Start now modifying your USERS and PROFILES tables until the desired\n   level of protection is reached. Please read also member $$$$M38J for\n   additional considerations.\n\n7. Once you're satisfied with your configuration change line 1 in\n   SYS1.PARMLIB(RAKFINIT) from ASK to YES which will cause RAKF to be\n   activated unconditionally during IPL.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RAKFPSAV": {"ttr": 16, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x01\\x11\\x11\\x7f\\x01\\x11\\x11o\\x18\\x00\\x00\\x9f\\x00\\x9f\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-04-27T00:00:00", "modifydate": "2011-04-26T18:00:00", "lines": 159, "newlines": 159, "modlines": 0, "user": "*RAKF*"}, "text": "         TITLE 'Save Password Changes in RAKF Users Table'\nRAKFPSAV CSECT\n         PRINT NOGEN\n*\n**********************************************************************\n*                                                                    *\n* NAME: RAKFPSAV                                                     *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Save Password Changes in RAKF Users Table                    *\n*                                                                    *\n* FUNCTION: - read the password change queue created by RAKFPWUP     *\n*             into memory                                            *\n*           - loop through the RAKF users table and check each line  *\n*             for a password change queue entry. If an entry exists  *\n*             update that line in place                              *\n*           - clear the password change queue                        *\n*                                                                    *\n* REQUIREMENTS: - RAKF users table pointed to by ddname RAKFUSER     *\n*               - RAKF password change queue pointed to by ddname    *\n*                 RAKFPWUP, a sequential dataset with LRECL=18,      *\n*                 RECFM=F and one line per password change in the    *\n*                 following format:                                  *\n*                                                                    *\n*                 ----+----1----+---                                 *\n*                 uuuuuuuu pppppppp                                  *\n*                                                                    *\n*                 where uuuuuuuu is the username and pppppppp is     *\n*                 the new password, each padded to the right with    *\n*                 blanks to 8 characters.                            *\n*                                                                    *\n**********************************************************************\n*\n* initialize\n*\n         SAVE  (14,12),,RAKFPSAV_&SYSDATE._&SYSTIME\n         USING RAKFPSAV,R15        establish => program EP\n         ST    R13,SAVEAREA+4      save HSA\n         LA    R11,SAVEAREA        establish => savearea\n         ST    R11,8(R13)          save LSA\n         LR    R13,R11             setup => our savearea\n         USING SAVEAREA,R13        new addressability\n         DROP  R15                 program EP no longer needed\n         B     CONTINUE            branch around savearea\nSAVEAREA DS    18F                 savearea\n*\n* first read of password change queue to determine number of changes\n*\nCONTINUE XR    R5,R5               initialize changes counter\n         XR    R6,R6               initialize changes buffer size\n         OPEN  (RAKFPWUP,(INPUT))  open password change queue\nSIZELOOP GET   RAKFPWUP,PWUP       get change record\n         LA    R5,1(,R5)           increment changes counter\n         A     R6,CHGRECL          increment buffer size\n         B     SIZELOOP            read next change record\nENDPWUP  CLOSE (RAKFPWUP)          close password change queue\n         LTR   R5,R5               no password changes queued?\n         BZ    RETURN               exit\n*\n* second read of password change queue loads all changes in storage\n*\n         ST    R5,NCHANGES         remember number of changes\n         ST    R6,CHGBSIZE         remember changes buffer size\n         GETMAIN RU,LV=CHGBSIZE    get storage for changes buffer\n         ST    R1,ACHGBUF          remember changes buffer address\n         OPEN  (RAKFPWUP,(INPUT))  reopen password change queue\n         A     R6,ACHGBUF          one byte beyond change buffer\n         USING PWUP,R6             establish changes addressability\nCHGREAD  S     R6,CHGRECL          address record for backward read\n         GET   RAKFPWUP,PWUP       get change record\n         BCT   R5,CHGREAD          read next change record\n         CLOSE (RAKFPWUP)          close password change queue\n*\n* update RAKF users table\n*\n         RDJFCB (RAKFUSER)         find out user table DSN for ENQ\n         MODESET MODE=SUP,KEY=ZERO authorize ourselves for SYSDSN ENQ\n         ENQ   (SYSDSN,JFCBDSNM,E,44,SYSTEM),RET=HAVE   serialization\n         ENQ   (SPFEDIT,JFCBDSNM,E,52,SYSTEMS),RET=HAVE serialization\n         MODESET MODE=PROB,KEY=NZERO return to problem state\n         OPEN  (RAKFUSER,(UPDAT))  open users table\n         USING USERREC,R1          addressability of users table record\nUSERLOOP GET   RAKFUSER            get record from users table\n         CLI   USER,C'*'           is it a comment?\n         BE    USERLOOP             process next record\n         L     R5,NCHANGES         get number of changes\n         L     R6,ACHGBUF          get changes buffer address\nPWDLOOP  CLC   USER(8),PWUPUSER    do we have an update?\n         BE    UPDATEPW             go process it\n         A     R6,CHGRECL          address next entry\n         BCT   R5,PWDLOOP          check next password change record\n         B     USERLOOP            no update found, process next user\nUPDATEPW MVC   PASSWORD(8),PWUPPSWD update password\n         MVC   SEQNO(8),PWCHANGE   flag sequence number\n         PUTX  RAKFUSER            update users table record in place\n         B     USERLOOP            process next user\nENDUSER  CLOSE (RAKFUSER)          close users table\n         DROP  R1                  users table record no longer needed\n         MODESET MODE=SUP,KEY=ZERO authorize ourselves for SYSDSN DEQ\n         DEQ   (SPFEDIT,JFCBDSNM,52,SYSTEMS),RET=HAVE release ENQ\n         DEQ   (SYSDSN,JFCBDSNM,44,SYSTEM),RET=HAVE   release ENQ\n         MODESET MODE=PROB,KEY=NZERO return to problem state\n         OPEN  (RAKFPWUP,(OUTPUT)) clear ..\n         CLOSE (RAKFPWUP)                 .. password change queue\n*\n* clear and free change queue buffer\n*\n         L     R5,NCHANGES         get number of changes\n         L     R6,ACHGBUF          get changes buffer address\nCLRLOOP  XC    PWUP(CHGLRECL),PWUP clear record\n         A     R6,CHGRECL          address next entry\n         BCT   R5,CLRLOOP          clear next change record\n         DROP  R6                  changes buffer no longer needed\n         FREEMAIN RU,LV=CHGBSIZE,A=ACHGBUF free changes buffer\n*\n* cleanup and return\n*\n         XC    PWUP(CHGLRECL),PWUP clear local changes queue record\nRETURN   L     R13,SAVEAREA+4      get caller's savearea\n         RETURN (14,12),,RC=0      return\n*\n* data area\n*\nCHGBSIZE DS    F                   size of changes queue buffer\nACHGBUF  DS    F                   address of changes queue buffer\nNCHANGES DS    F                   number of changes in queue\nCHGRECL  DC    A(CHGLRECL)         record length of changes queue\nPWCHANGE DC    CL8'PWCHANGE'       flag for sequence number field\nSYSDSN   DC    CL8'SYSDSN'         resource name for enqueue\nSPFEDIT  DC    CL8'SPFEDIT'        resource name for enqueue\nRAKFPWUP DCB   DDNAME=RAKFPWUP,MACRF=(GM,PM),EODAD=ENDPWUP,DSORG=PS\nRAKFUSER DCB   DDNAME=RAKFUSER,MACRF=(GL,PM),EODAD=ENDUSER,DSORG=PS,   X\n               EXLST=JFCB          DCB with exit list for RDJFCB\nJFCB     DS    0F                  the exit list contains only ..\n         DC    X'87'                .. the target JFCB address ..\n         DC    AL3(INFMJFCB)        .. for RDJFCB\n         IEFJFCBN                  RDJFCB target\n         LTORG ,                   all literals go here\nPWUP     DS    0C                  changes queue record\nPWUPUSER DC    CL8' '              userid\n         DC    C' '                filler\nPWUPPSWD DC    CL8' '              new password\n         DC    C' '                filler\nCHGLRECL EQU   *-PWUP              record length of changes queue\n*\n* equates\n*\n         YREGS                     register equates\n*\n* RAKF users table\n*\nUSERREC  DSECT                     record from users table\nUSER     DS    CL8                 user\n         DS    CL10                group, filler, flag\nPASSWORD DS    CL8                 password\n         ORG   USER+72             any other stuff\nSEQNO    DS    CL8                 sequence number\n         END   RAKFPSAV            end of program\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RAKFRMV": {"ttr": 9, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x01\\x11\\x11\\x7f\\x01\\x11\\x11o\\x18\\x00\\x00\\xa6\\x00\\xa6\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-04-27T00:00:00", "modifydate": "2011-04-26T18:00:00", "lines": 166, "newlines": 166, "modlines": 0, "user": "*RAKF*"}, "text": "//RAKFRMV  JOB (RAKF),\n//             'RAKF Removal',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* Remove RAKF 1.2.0                                                 *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*  This job is to be used for RAKF removal only if RAKF is in       *\n//*  ACCEPTed state. If RAKF is APPLIed but not ACCEPTed use the      *\n//*  the SMP command \"RESTORE S(TRKF120)\" instead of this job         *\n//*  to remove it.                                                    *\n//*                                                                   *\n//*  After RAKF removal the system is NOT IPLable until the original  *\n//*  MVS stub modules have been reinstated. Refer to job RAKF2MVS     *\n//*  for reinstating these modules                                    *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*                                                                   *\n//* Expected return codes: Step UCLIN:    00                          *\n//* Expected return codes: Step SCRATCH:  00                          *\n//* ------------------------------------------------------------------*\n//*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from SMP                                     *\n//* ------------------------------------------------------------------*\n//UCLIN   EXEC SMPAPP\n//SMPCNTL  DD  *\n UCLIN CDS .\n  DEL LMOD(ICHRIN00) .\n  DEL LMOD(ICHSEC00) .\n  DEL LMOD(ICHSFR00) .\n  DEL LMOD(RAKFPROF) .\n  DEL LMOD(RAKFPWUP) .\n  DEL LMOD(RAKFUSER) .\n  DEL  MOD(CJYRCVT)  .\n  DEL  MOD(ICHRIN00) .\n  DEL  MOD(ICHSEC00) .\n  DEL  MOD(ICHSFR00) .\n  DEL  MOD(IGC0013A) .\n  DEL  MOD(IGC0013C) .\n  DEL  MOD(IGC00130) .\n  DEL  MOD(RAKFPROF) .\n  DEL  MOD(RAKFPSAV) .\n  DEL  MOD(RAKFPWUP) .\n  DEL  MOD(RAKFUSER) .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPSAV) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$CUST) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$$$INST) .\n  DEL  MAC($$$$M38J) .\n  DEL  MAC($$$$RMVE) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n UCLIN ACDS .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPSAV) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$CUST) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$$$INST) .\n  DEL  MAC($$$$M38J) .\n  DEL  MAC($$$$RMVE) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n/*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from LINKLIB, LPALIB, PARMLIB and PROCLIB    *\n//* ------------------------------------------------------------------*\n//SCRATCH EXEC PGM=IEHPROGM\n//SYSPRINT DD  SYSOUT=*\n//DD1      DD  VOL=SER=rrrrrr,DISP=OLD,UNIT=tttt\n//SYSIN    DD  *\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHSFR00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013A\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013B\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013C\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013{\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHRIN00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=ICHSEC00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PARMLIB,MEMBER=RAKFINIT\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZJW0003": {"ttr": 7, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x01\\x11\\x11\\x7f\\x01\\x11\\x11o\\x18\\x00\\x00+\\x00+\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-04-27T00:00:00", "modifydate": "2011-04-26T18:00:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "*RAKF*"}, "text": "//ZJW0003  JOB (RAKF),\n//             'Modify MSTRJCL',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------------------------*\n//*                                                                   *\n//* Name: ZJW0003                                                     *\n//*                                                                   *\n//* DESC: Install USERMOD ZJW0003 to modify generation of MSTRJCL     *\n//*       RAKF DD statements added for early initialization           *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//RECEIVE EXEC SMPREC\n//SMPPTFIN DD  *\n++USERMOD (ZJW0003).\n++VER (Z038) FMID(EBB1102).\n++MACUPD(SGIEE0MS).\n./ CHANGE NAME=SGIEE0MS\n         DC    CL80'//RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),'\n         DC    CL80'//            DISP=SHR'\n         DC    CL80'//RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),'\n         DC    CL80'//            DISP=SHR'\n         DC    CL80'//RAKFPWUP DD DSN=SYS1.SECURE.PWUP,'\n         DC    CL80'//            DISP=SHR'\n/*\n//SMPCNTL  DD  *\n REJECT  SELECT(ZJW0003)\n .\n RESETRC\n .\n RECEIVE SELECT(ZJW0003)\n .\n/*\n//APPLY   EXEC SMPAPP\n//AMODGEN  DD  DISP=SHR,DSN=SYS1.AMODGEN\n//SMPCNTL  DD  *\n APPLY   SELECT(ZJW0003)\n         DIS(WRITE)\n .\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT850/CBT.V500.FILE850.PDS/RRKF002E.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT850/CBT.V500.FILE850.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}