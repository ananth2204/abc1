{"INMR01": {"INMLRECL": 80, "INMFNODE": "ORIGNODE", "INMFUID": "ORIGUID", "INMTNODE": "DESTNODE", "INMTUID": "DESTUID", "INMFTIME": "20110511164933000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1439040, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "RAKF.RRKF005.RACIND", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1439040, "INMDSORG": "PS", "INMLRECL": 5616, "INMBLKSZ": 5620, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1439040, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RAKF.RRKF005.RACIND": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 5620, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 14, "DVAMAXRC": 32760, "DVACYL": 886, "DVATRK": 15, "DVATRKLN": 47968, "DVAOVHD": 256, "num_header_records": 0, "DS1REFD": "000000", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x00\\x00\\x00\\x00'", "DS1LSTAR": "b'\\x00\\x00\\x00'", "DS1TRBAL": "b''"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bvD\\x04\\x9a\\xdc\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bvD\\x04\\x9a\\xdc\\xd8'", "b'P\\x00:\\x18\\x00\\x00\\x00?\\x00\\x00\\x00@\\x00\\x0e\\x00\\x1e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"IEZCTGFL": {"ttr": 17, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*  %GO TO CTGFLX01;\n*  /*\n         MACRO\n         IEZCTGFL &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODS\nCTGFL    DSECT ,\n         AGO   .BOTHDS\n.NODS    ANOP  ,\nCTGFL    DS    0F\n.BOTHDS  ANOP  ,                        */\n*%CTGFLX01:;\n*/********************************************************************/\n*/*                                                                  */\n*/*   MACRO NAME = IEZCTGFL                                          */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = CATALOG FIELD PARAMETER LIST                */\n*/*                                                                  */\n*/*   FUNCTION = THE FIELD PARAMETER LIST (CTGFL) DEFINES ONE OF     */\n*/*              THE CATALOG RECORD'S FIELDS OR A GROUP OF           */\n*/*              LOGICALLY RELATED FIELDS.  THE CTGFL IS BUILT       */\n*/*              BEFORE AN OS/VS COMPONENT ISSUES THE CATLG          */\n*/*              MACRO INSTRUCTION (SVC 26) TO PROCESS A             */\n*/*              CATALOG RECORD.  THE CTGFL IS USED IN TWO           */\n*/*              SITUATIONS:                                         */\n*/*                (1)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO RETRIEVE OR UPDATE.  THE CTGPL CONTAINS   */\n*/*                     THE ADDRESS OF EACH CTGFL USED IN THIS WAY.  */\n*/*                (2)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO COMPARE AGAINST CALLER-SUPPLIED DATA.     */\n*/*                     THIS IS A \"TEST\" CTGFL AND IS ADDRESSED BY   */\n*/*                     ANOTHER CTGFL.                               */\n*/*                                                                  */\n*/*   CONTROL BLOCK STRUCTURE = THE CTGFL IS POINTED TO BY THE       */\n*/*                             CCA ('CCAFLPT' OR 'CCATEST').        */\n*/*                                                                  */\n*/*   INCLUDED MACROS = NONE                                         */\n*/*                                                                  */\n*/*   METHOD OF ACCESS = PL/S - NO DECLARES NECESSARY                */\n*/*                                                                  */\n*/*   STATUS = VS/2 RELEASE 3   (CHANGE FLAG @Y30SSXX)               */\n*/*                                                                  */\n*/*   DATE OF LAST CHANGE = 17 JUL 74                                */\n*/*                                                                  */\n*/********************************************************************/\n         AGO   .CTGFL01                 */\n*%DECLARE (CTGFLLEN, CTGFL999, CTGFLLVL) CHAR;\n*%CTGFLLEN = 'LENGTH(CTGFL)';       /* LENGTH OF CTGFL               */\n*%GOTO CTGFLX03;\n* /*\n*%CTGFLX03:;\n*%IF CTGFL999 \u00ac= ','                /* IF BLOCK NOT CONTINUED,       */\n*  %THEN %CTGFL999 = ';';           /*   THEN CLOSE DECLARE STMNT    */\n*%IF CTGFLLVL  = ''                 /* IF BLOCK NOT CONCATENATED,    */\n*  %THEN %GOTO CTGFL001;            /*   THEN GENERATE DECLARE       */\n*%CTGFLDUM = CTGFLLVL||' CTGFL';    /* SET MINOR LEVEL NUMBER        */\n*   CTGFLDUM                        /* CTGFL CONCATENATED LEVEL      */\n*%GOTO CTGFL002;                    /* SKIP DECLARE                  */\n*%CTGFL001:;                        /* DECLARE                       */\n    DECLARE\n*     1 CTGFL BASED(CTGFLPTR)       /* DECLARE CTGFL LEVEL ONE       */\n*%CTGFL002:;                        /* SKIP DECLARE                  */\n*        BDY(WORD),                 /* WORD BOUNDARY                 */\n*       5 CTGFLDNO PTR(8),          /* NO. PAIRS DATA LENGTH/ADDR    */\n*       5 CTGFLDCD BIT(8),          /* TEST CONDITION                */\n*       5 CTGFLDGC PTR(8),          /* GROUP CODE NUMBER             */\n*       5 CTGFLDRE BIT(8),          /* TEST RESULT                   */\n*         10 *        BIT(7),       /* RESERVED                      */\n*         10 CTGFLDTS BIT(1),       /* 0 = SUCCESSFUL TEST,          */\n*                                   /* 1 = TEST FAILED               */\n*       5 CTGFLDWA BIT(32),         /* CATALOG WORK AREA             */\n*       5 CTGFLDNM PTR(31),         /* FIELD NAME ADDRESS            */\n*       5 CTGFLCHN PTR(31),         /* ADDR OF NEXT FIELD MACRO      */\n*                                   /* OR ZERO                       */\n*       5 CTGFLDAT(*),              /* PAIRS OF DATA LENGTH/ADDR     */\n*         10 CTGFLNG FIXED(31),     /* DATA LENGTH                   */\n*         10 CTGFLPT  PTR(31) CTGFL999 /* DATA ADDRESS               */\n*/********************************************************************/\n*/*     CONSTANTS USED TO SET AND/OR TEST FIELDS DECLARED ABOVE      */\n*/********************************************************************/\n    DECLARE                         /* TEST CONDITION - CTGFLDCD     */\n      CTGFLDEQ BIT(8) CONSTANT('80'X), /* EQUAL                      */\n      CTGFLDNE BIT(8) CONSTANT('60'X), /* NOT EQUAL                  */\n      CTGFLDGT BIT(8) CONSTANT('20'X), /* GREATER THAN               */\n      CTGFLDLT BIT(8) CONSTANT('40'X), /* LESS THAN                  */\n      CTGFLDGE BIT(8) CONSTANT('A0'X), /* GREATER THAN OR EQUAL      */\n      CTGFLDLE BIT(8) CONSTANT('C0'X), /* LESS THAN OR EQUAL         */\n      CTGFLDZ  BIT(8) CONSTANT('80'X), /* TEST UNDER MASK FOR ZEROES */\n      CTGFLDON BIT(8) CONSTANT('10'X), /* TEST UNDER MASK FOR ONES   */\n      CTGFLDMX BIT(8) CONSTANT('40'X); /* TEST UNDER MASK FOR MIXED  */\n* %GO TO CTGFLX02;\n*/*\n.CTGFL01 ANOP\n*\nCTGFLDNO DS    XL1                      NUMBER PAIRS DATA LNG/ADDR\n*\nCTGFLDCD DS    XL1                      TEST CONDITION\nCTGFLDEQ EQU   X'80'                    EQUAL\nCTGFLDNE EQU   X'60'                    NOT EQUAL\nCTGFLDGT EQU   X'20'                    GREATER THAN\nCTGFLDLT EQU   X'40'                    LESS THAN\nCTGFLDGE EQU   X'A0'                    GREATER THAN OR EQUAL\nCTGFLDLE EQU   X'C0'                    LESS THAN OR EQUAL\nCTGFLDZ  EQU   X'80'                    TEST UNDER MASK FOR ZEROES\nCTGFLDON EQU   X'10'                    TEST UNDER MASK FOR ONES\nCTGFLDMX EQU   X'40'                    TEST UNDER MASK FOR MIXED\nCTGFLDGF EQU   X'FF'                    GENERIC FILTER TEST        @SCA\n*\nCTGFLDGC DS    XL1                      GROUP CODE NUMBER\n*\nCTGFLDRE DS    XL1                      TEST RESULT\nCTGFLDTS EQU   X'01'                    TEST MASK - CTGFLDRE\n*                                       = 0 - SUCCESSFUL TEST,\n*                                       = 1 - TEST FAILED\n*\nCTGFLDWA DS    F                        CATALOG WORK AREA\n*\nCTGFLDNM DS    A                        FIELD NAME ADDRESS\n*\nCTGFLCHN DS    A                        ADDRESS OF NEXT FIELD\n*\n*\nCTGFLDAT DS    0CL8                     PAIRS OF DATA LENGTH/ADDRESS\nCTGFLNG  DS    F                        DATA LENGTH\nCTGFLPT  DS    A                        DATA ADDRESS\n*\n*\nCTGFLLEN EQU   *-CTGFL                  LENGTH OF CTGFL\n         MEND  ,                        */\n* %CTGFLX02:;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACIND": {"ttr": 12, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13\\x1f\\x01\\x11\\x13\\x0f!\\x15\\x01\\x05\\x01\\x05\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-11T00:00:00", "modifydate": "2011-05-10T21:15:00", "lines": 261, "newlines": 261, "modlines": 0, "user": "*RAKF*"}, "text": "         TITLE 'Set or Clear RACF Indicator of VSAM Catalog Entries'\nRACIND   CSECT\n         PRINT NOGEN\n*\n**********************************************************************\n*                                                                    *\n* NAME: RACIND                                                       *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Set or Clear RACF Indicator of VSAM Catalog Entries          *\n*                                                                    *\n* FUNTION: Act upon control statements read from SYSIN to set or     *\n*          clear the RACF indicator of VSAM catalog entries. The     *\n*          following control statements are valid:                   *\n*                                                                    *\n*          ----+----1----+----2----+----3----+----4----+----5----+   *\n*          CATALOG   name of catalog to search for entries           *\n*          RACON     name of entry to indicate                       *\n*          RACOFF    name of entry to unindicate                     *\n*          * Comment                                                 *\n*                                                                    *\n*          Any number of control statements is allowed. The first    *\n*          none comment statement must be a CATALOG statement. A     *\n*          CATALOG statement remains active until a new CATALOG      *\n*          statement replaces it. The SYSIN dataset must have fixed  *\n*          length records with LRECL=80, padded to the right with    *\n*          blanks.                                                   *\n*                                                                    *\n* REQUIREMENTS: //SYSIN DD    defining the input control statements  *\n*               //SYSPRINT DD defining the print output listing      *\n*               The utility must be run from an authorized library   *\n*                                                                    *\n**********************************************************************\n*\n* initialize\n*\n         SAVE  (14,12),,RACIND_&SYSDATE._&SYSTIME\n         USING RACIND,R15          establish => program EP\n         ST    R13,SAVEAREA+4      save HSA\n         LA    R11,SAVEAREA        establish => savearea\n         ST    R11,8(R13)          save LSA\n         LR    R13,R11             setup => our savearea\n         USING SAVEAREA,R13        new addressability\n         DROP  R15                 program EP no longer needed\n         B     CONTINUE            branch around savearea\nSAVEAREA DS    18F                 savearea\nCONTINUE OPEN  (SYSIN,(INPUT))     open control statement dataset\n         OPEN  (SYSPRINT,(OUTPUT)) open output dataset\n         RACHECK ENTITY=RAKFADM,CLASS='FACILITY',ATTR=READ authorize\n         LTR    R15,R15            RAKFADM granted?\n         BNZ    NOAUTH              no, talk dirrty and exit\n         MODESET MODE=SUP,KEY=ZERO authorize ourselves\n         LA    R12,PL              address CTGPL\n         USING CTGPL,R12           tell assembler\n         LA    R11,FL              address CTGFL\n         USING CTGFL,R11           tell assembler\n*\n* setup catalog parameter and catalog field parameter lists\n*\n         MVI   CTGNOFLD,X'01'      number of fields in CTGPL\n         LA    R1,ENTNAME          entry name address\n         ST    R1,CTGENT           store entry name address in CTGPL\n         LA    R1,ENTCAT           catalog name address\n         ST    R1,CTGCAT           store catalog name address in CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME indicate names provided\n         ST    R11,CTGFIELD        store field list address in CTGPL\n         LA    R1,WA               CTGPL work area address\n         ST    R1,CTGWKA           store work area address in CTGPL\n         MVI   CTGFLDNO,X'01'      number of fields in CTGFL\n         LA    R1,SECFLAGS         field name address\n         ST    R1,CTGFLDNM         store field name address in CTGFL\n         LA    R1,FLDWA            CTGFL work area address\n         ST    R1,CTGFLDWA         store work area address in CTGFL\n*\n* read and interpret control statement\n*\nNEXTENT  GET   SYSIN,INPUT         read control statement\n         CLI   INPUT,C'*'          comment line?\n         BE    NEXTENT              yes, read next control statement\n         CLC   INPUT(10),=C'CATALOG   ' CATALOG statement?\n         BE    SETCAT               yes, replace current catalog name\n         CLC   INPUT(10),=C'RACON     ' RACON statement?\n         BE    SETENT               yes, replace current entry name\n         CLC   INPUT(10),=C'RACOFF    ' RACOFF statement?\n         BE    SETENT               yes, replace current entry name\n         B     INVSTMT              alas master, what do you want?\n*\n* clear work areas\n*\nENTOK    LA    R4,WA               CTGPL work area address\n         LA    R2,3(,R4)           MVCL target is second byte of WA\n         LA    R4,2(,R4)           MVCL source is first byte of WA\n         MVI   0(R4),X'00'         clear source\n         LA    R3,WAL-3            length of MVCL target\n         LA    R5,1                length of MVCL source with X'00' pad\n         MVCL  R2,R4               clear CTGPL work area\n         LA    R4,FLDWA            CTGFL work area address\n         LA    R2,3(,R4)           MVCL target is second byte of WA\n         LA    R4,2(,R4)           MVCL source is first byte of WA\n         MVI   0(R4),X'00'         clear source\n         LA    R3,FLDWAL-3         length of MVCL target\n         LA    R5,1                length of MVCL source with X'00' pad\n         MVCL  R2,R4               clear CTGFL work area\n*\n* locate entry\n*\n         NI    CTGOPTN3,X'00'      clear function indicator\n         OI    CTGOPTN3,CTGLOC+CTGAM0 indicate locate via CTGPL\n         LR    R1,R12              CTGPL address\n         SVC   26                  locate entry\n         LTR   R15,R15             found?\n         BNZ   CATERR              no, issue catalog error message\n*\n* set or clear RACF indicator\n*\n         L     R5,CTGFLPT          get SECFLAGS address\n         CLC   INPUT(10),=C'RACOFF    ' request type?\n         BE    RACOFF              process RACOFF\n         OI    0(R5),B'10000000'   RACON:  set RACF indicator\n         B     UPDATE              go update\nRACOFF   NI    0(R5),B'01111111'   RACOFF: clear RACF indicator\n*\n* update entry\n*\nUPDATE   NI    CTGOPTN3,X'00'      clear function indicator\n         OI    CTGOPTN3,CTGUPDAT+CTGAM0 indicate update via CTGPL\n         LR    R1,R12              CTGPL address\n         SVC   26                  update entry\n         LTR   R15,R15             success?\n         BNZ   CATERR              no, issue catalog error message\n         MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(37),=C'IND003I RACF indicator turned xxx for'\n         MVC   OUTPUT+30(3),INPUT+3             build ..\n         MVC   OUTPUT+38(44),ENTNAME                .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\n*\n* return\n*\nRETURN   MODESET MODE=PROB,KEY=NZERO return to problem state\nEXIT     CLOSE (SYSIN)             close control statement dataset\n         CLOSE (SYSPRINT)          close output dataset\n         L     R15,MAXRC           get this run's maximum return code\n         L     R13,SAVEAREA+4      get caller's savearea\n         L     R14,12(,R13)        restore ..\n         LM    R0,R12,20(R13)                .. regs\n         BR    R14                 return\n*\n* process control statements\n*\nSETCAT   CLI   INPUT+10,C' '       process CATALOG statement\n         BE    INVCAT              first char blank, ignore statement\n         MVC   ENTCAT(44),INPUT+10 set new catalog\n         MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(21),=C'IND001I using catalog' build ..\n         MVC   OUTPUT+22(44),ENTCAT                     .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nSETENT   CLI   INPUT+10,C' '       process RACxxx statement\n         BE    INVENT              first char blank, ignore statement\n         CLI   ENTCAT,C' '         catalog defined?\n         BE    NOCAT                no, ignore statement\n         MVC   ENTNAME(44),INPUT+10 set entry name\n         MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(18),=C'IND002I processing'    build ..\n         MVC   OUTPUT+19(44),ENTNAME                    .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     ENTOK               process entry\n*\n* end of SYSIN dataset reached\n*\nDONE     MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(31),=C'IND004I processing ended at EOD' message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     RETURN              exit\n*\n* error messages\n*\nINVCAT   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(33),=C'IND005E CATALOG statement invalid' message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nINVENT   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(32),=C'IND006E RACxxx statement invalid' build ..\n         MVC   OUTPUT+11(3),INPUT+3                          .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nNOCAT    MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(45),=C'IND007E no catalog defined, statement ignoX\n               red'                build message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nINVSTMT  MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(33),=C'IND008E invalid statement ignored' message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nCATERR   C     R15,MAXRC           RC higher than MAXRC?\n         BNH   CATLOW               no, don't update MAXRC\n         ST    R15,MAXRC            yes, update MAXRC\nCATLOW   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(72),=C'IND009E ** VSAM catalog return code is rrrX\n                - reason code is IGG0CLxx-nnn' build message\n         MVC   OUTPUT+66(2),CTGFDBK move module id into message\n         CVD   R15,ERRDEC          convert return code to decimal\n         L     R5,ERRDEC+4         get low order decimal word\n         SLL   R5,4                separate last digit from sign\n         ST    R5,ERRDEC           store in high order decimal word\n         UNPK  ERREBC(7),ERRDEC(4) convert to EBCDIC\n         MVC   OUTPUT+39(3),ERREBC+3 move return code into message\n         LH    R5,CTGREAS1         get reason code\n         CVD   R5,ERRDEC           convert reason code to decimal\n         L     R5,ERRDEC+4         get low order decimal word\n         SLL   R5,4                separate last digit from sign\n         ST    R5,ERRDEC           store in high order decimal word\n         UNPK  ERREBC(7),ERRDEC(4) convert to EBCDIC\n         MVC   OUTPUT+69(3),ERREBC+3 move reason code into message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nNOAUTH   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(21),=C'IND010T access denied' build message\n         PUT   SYSPRINT,OUTPUT     print message\n         LA    R15,12              set ..\n         ST    R15,MAXRC                 .. return code ..\n         B     EXIT                                       .. and exit\n*\n* data area\n*\nENTNAME  DS    CL44                name of entry to modify\nENTCAT   DC    CL44' '             name of catalog to search for entry\nSECFLAGS DC    CL8'SECFLAGS'       field name for CTGFL\nMAXRC    DC    F'0'                maximum catalog return code\nPL       DC    8F'0'               catalog parameter list\nFL       DC    6F'0'               catalog field list\nWA       DC    AL2(WAL)            CTGPL ..\n         DS    1022X                       .. work area\nWAL      EQU   *-WA                length of CTGPL work area\nFLDWA    DC    AL2(FLDWAL)         CTGFL ..\n         DS    1022X                       .. work area\nFLDWAL   EQU   *-FLDWA             length of CTGFL work area\nRAKFADM  DC    CL39'RAKFADM'       facility name to authorize\nINPUT    DS    CL80                control statement\nBLANK    DC    C' '                blank to clear output record\nOUTPUT   DS    CL132               output record\nERRDEC   DS    D                   return/reason codes decimal\nERREBC   DS    CL8                 return/reason codes EBCDIC\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=DONE,              X\n               LRECL=80,RECFM=FB,BLKSIZE=800      control statements\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      X\n               LRECL=132,RECFM=FB,BLKSIZE=1320    messages\n         LTORG ,                   all literals go here\n*\n* equates\n*\n         YREGS                     register equates\n*\n* parameter list mappings\n*\n         IEZCTGPL                  catalog parameter list\n         IEZCTGFL                  catalog field parameter list\n         END   RACIND              end of program\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RAKFRMV": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13\\x1f\\x01\\x11\\x13\\x0f!\\x15\\x00\\xb3\\x00\\xb3\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-11T00:00:00", "modifydate": "2011-05-10T21:15:00", "lines": 179, "newlines": 179, "modlines": 0, "user": "*RAKF*"}, "text": "//RAKFRMV  JOB (RAKF),\n//             'RAKF Removal',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* Remove RAKF 1.2.0                                                 *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*  This job is to be used for RAKF removal only if RAKF is in       *\n//*  ACCEPTed state. If RAKF is APPLIed but not ACCEPTed use the      *\n//*  the SMP command \"RESTORE S(TRKF120)\" instead of this job         *\n//*  to remove it.                                                    *\n//*                                                                   *\n//*  After RAKF removal the system is NOT IPLable until the original  *\n//*  MVS stub modules have been reinstated. Refer to job RAKF2MVS     *\n//*  for reinstating these modules                                    *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*                                                                   *\n//* Expected return codes: Step UCLIN:    00                          *\n//* Expected return codes: Step SCRATCH:  00                          *\n//* ------------------------------------------------------------------*\n//*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from SMP                                     *\n//* ------------------------------------------------------------------*\n//UCLIN   EXEC SMPAPP\n//SMPCNTL  DD  *\n UCLIN CDS .\n  DEL LMOD(ICHRIN00) .\n  DEL LMOD(ICHSEC00) .\n  DEL LMOD(ICHSFR00) .\n  DEL LMOD(RACIND)   .\n  DEL LMOD(RAKFPROF) .\n  DEL LMOD(RAKFPWUP) .\n  DEL LMOD(RAKFUSER) .\n  DEL  MOD(CJYRCVT)  .\n  DEL  MOD(ICHRIN00) .\n  DEL  MOD(ICHSEC00) .\n  DEL  MOD(ICHSFR00) .\n  DEL  MOD(IGC0013A) .\n  DEL  MOD(IGC0013C) .\n  DEL  MOD(IGC00130) .\n  DEL  MOD(RACIND)   .\n  DEL  MOD(RAKFPROF) .\n  DEL  MOD(RAKFPSAV) .\n  DEL  MOD(RAKFPWUP) .\n  DEL  MOD(RAKFUSER) .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RACIND)   .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPSAV) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC($DOC$ZIP) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RACIND)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(IEZCTGFL) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(RRKF001) .\n  DEL  SYSMOD(RRKF002) .\n  DEL  SYSMOD(RRKF003) .\n  DEL  SYSMOD(RRKF004) .\n  DEL  SYSMOD(RRKF005) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n UCLIN ACDS .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RACIND)   .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPSAV) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC($DOC$ZIP) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RACIND)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(IEZCTGFL) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(RRKF001) .\n  DEL  SYSMOD(RRKF002) .\n  DEL  SYSMOD(RRKF003) .\n  DEL  SYSMOD(RRKF004) .\n  DEL  SYSMOD(RRKF005) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n/*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from LINKLIB, LPALIB, PARMLIB and PROCLIB    *\n//* ------------------------------------------------------------------*\n//SCRATCH EXEC PGM=IEHPROGM\n//SYSPRINT DD  SYSOUT=*\n//DD1      DD  VOL=SER=rrrrrr,DISP=OLD,UNIT=tttt\n//SYSIN    DD  *\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHSFR00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013A\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013B\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013C\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013{\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHRIN00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=ICHSEC00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RACIND\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PARMLIB,MEMBER=RAKFINIT\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT850/CBT.V500.FILE850.PDS/RRKF005E.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT850/CBT.V500.FILE850.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}