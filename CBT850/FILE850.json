{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012951000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 5525884, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE850.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 5525884, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 5525884, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE850.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00V\\x05'", "DS1TRBAL": "b'\\xafr'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x06\\x02\\x00\\x02\\x06\\x07\\x00\\r\\x00W'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x00%\\x01\\x11\\x17?\\x01\\x11\\x17?\\x02\\x12\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-06-22T00:00:00", "modifydate": "2011-06-22T02:12:25", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-482"}, "text": "REGULAR CBT TAPE - VERSION 482    FILE:  850\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT482.FILE850\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 50 MEMBERS COUNTED; CUMULATIVE SIZE IS 52,179 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/22/11    02:12:25    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01\\x11\\x10/\\x01\\x11\\x10/\\x13\\x05\\x00<\\x00<\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-12T00:00:00", "modifydate": "2011-04-12T13:05:10", "lines": 60, "newlines": 60, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: RAKF Status\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Tue, 12 Apr 2011 09:35:13 +0000\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\nCC:       \"Phil Roberts\" <opplr@hotmail.com>,\n          \"scott\" <svetter@ameritech.net>\n\nHi Sam,\n\nThanks for the packaging proposal. I like it very much because of\nits independency from the way users might wish to download/install.\n\nPlease note, however, that the distribution is not yet finalized.\nFrom my point of view it is important to have the same version on\nCBT than the one we make available to the H390-MVS Yahoo group\nwhere 6 years ago a first binary RAKF version had been published\nby Phil Dickinson. I've attached a newer version of the AWS tape\nthan the one Scott mailed to you. It is almost final, but it\nmight still happen that the SMP definitions in File 1 get\naugmented by a PREreq depending on Scott's findings concerning\nthe SMP service level of his system. So I'd appreciate if you\nreplaced the version you've uploaded to the Updates page by the\nversion attached here  and, if the PREreq mentioned becomes\nnecessary, in a few days by the final one.\n\nConcerning the credits: Please have a look into relfile\nTRKF120.F2 of the attached tape. In the $$$$INFO member I try to\ndescribe the way of the product from ESG to RAKF and in the\n$$NOTICE member I added the relevant part of my mail exchange\nwith Craig. I totally agree with you to give Craig the main\ncredit but would suggest to add Phil Dickinson and Phil Roberts\nto the first sentence of the @FILE850 member as they did major\nenabling work to get RAKF going with MVS 3.8j. The exact\ncontributions are:\n\n-      Phil Dickinson: First idea on how to do it on MVS 3.8j and\n        early beta\" type of implementation in 2005. Lost his source\n       later on.\n\n-      Phil Roberts: Recovery of Phil D's changes to the original\n       ESG source through disassembly and compare. Great job!\n\n-      Juergen Winkelmann: Debugging and finalizing Phil D's\n       implementation, source cleanup, documentation and SMP\n       packaging.\n\n-      Scott Vetter: Testing, recommendations concerning the\n       logic flow of the RAKF initialization program, the\n       documentation and the SMP packaging. Very useful quality\n       and user experience enhancements!\n\nBest, Juergen\n-----------------------------------------------------------------------\nJuergen Winkelmann            Tel.:   +41-44-632 5837\nETH Zuerich                   Fax.:   +41-44-632 1022\nInformatikdienste             e-mail: winkelmann@id.ethz.ch\nClausiusstr. 59\nCH-8092 Zuerich\n-----------------------------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x11\\x10/\\x01\\x11\\x10/\\x13\\x15\\x00-\\x00-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-12T00:00:00", "modifydate": "2011-04-12T13:15:31", "lines": 45, "newlines": 45, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: RAKF Status\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Tue, 12 Apr 2011 11:43:42 +0000\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nJust an additional remark: Assuming you've an archive of\nbackground information on the files on CBT I've attached a job\nstream which accomplishes the complete source update from ESG to\nRAKF for documentation purposes. It only needs the original CBT\nFile 165 PDS (named MVS.RAKF.ESG2RAKF.CBT.F165 here, but can be\nchanged to anything of course). Result is PDS\nMVS.RAKF.ESG2RAKF.SRC, which contains the new source (making up\nrelfile TRKF120.F4 after resequencing) and the original copyright\nfiles (becoming part of relfile TRKF120.F2 with a modification to\n$$NOTICE concerning Craig's consent).\n\nThe last 3 sequence number digits of the source created using\nthis job show the origin of the respective modification:\n\n-      380: Modification introduced by Phil D or Phil R\n\n-      381: Basic fixes from me correcting the most obvious\n            problems\n\n-      382: Final fixes and new source members from me introduced\n            after more detailed analysis. Some of the 382\n            additions may make some 380's obsolete but I didn't\n            have time to test that in detail and just left the\n            380's in.\n\nSo, if you've a place to store it, it's fine (don't think it's\nworth publishing it, as this would probably only cause\nconfusion). If not  just discard it.\n\nBest, Juergen\n-----------------------------------------------------------------------\nJuergen Winkelmann              Tel.:   +41-44-632 5837\nETH Zuerich                     Fax.:   +41-44-632 1022\nInformatikdienste               e-mail: winkelmann@id.ethz.ch\nClausiusstr. 59\nCH-8092 Zuerich\n-----------------------------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE3": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x11\\x10_\\x01\\x11\\x10_\\x007\\x00P\\x00P\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T00:37:18", "lines": 80, "newlines": 80, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: RAKF Status\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Thu, 14 Apr 2011 20:09:51 +0000\nTo:       \"Phil Roberts\" <opplr@hotmail.com>,\n          <svetter@ameritech.net>\nCC:       <n9gtm@comcast.net>,\n          <vbandke@bsp-gmbh.com>,\n          \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Phil, all,\n\nI've attached my final distribution tape to this mail. Although\nthere are of course still details that could be enhanced I think\nthat we can distribute these later through modifications given\nthat we now have a maintainable SMP distribution (an example for\nsuch a modification could then be the implementation of RAKFPWUP\nto allow end users to permanently change their passwords). If we\ncontinue to change small details of the distribution like during\nthe past two weeks, I fear we'll never get it out\n\nI've added Sam to the CC of this mail to keep him informed, as\nhe's already prepared a beautiful distribution for CBT from one\nof the earlier tapes I sent out and I think this one he could now\nfinally publish if no objections come up. (BTW, Sam, the\nVTT2TAPE source you mailed me yesterday assembles and runs\nwithout problems on 3.8j so this is definitely the way to go for\npeople wanting to create their own tape; if you like I'm sending\nyou the loadlib back using XMIT370)\n\nThis distribution includes the following changes:\n\n-      Documentation change mentioning that SMP level higher than\n       04.44 (desirable is 04.48 as in TK 3) is needed. I think\n       that's sufficient to point people to problems they might\n       have with backlevel SMPs as encountered by Scott (I don't\n       have final feedback from him by now but should it turn out\n       not to disappear after he updated his SMP, than I'm going\n       to fix it by providing an UCLIN workaround for people\n       encountering it).\n\n-      As mentioned yesterday, a full backout capability even if\n       it had already been ACCEPTed. You'll find jobs and\n       documentation for this in SAMPLIB. I placed a lot of\n       warnings in there to hopefully prevent people from locking\n       themselves out of their systems when trying to deinstall\n       RAKF. Personally I'm still convinced that one should NEVER\n       deinstall it after having it used for a while. An\n       exception would of course be to deinstall it to be able to\n       install another security system as Phil mentioned below.\n\nI didn't consider your (Phil's) proposal to have RAKF (ICHSEC00)\nsimply put out a message if it is rerun when RAKF is already\nactive and do nothing. I think, if one issues  S RAKF\" he expects\nthat it gets cleanly initialized, including profiles and users\ntable. From that perspective it's consequent to simply reload the\nprofiles and users tables if it is issued when RAKF is already\nactive. From my point of view the argument that this might\nreverse a password change made by a user doesn't hold, as\npassword changes are anyway reversed outside the user's control\nwith every IPL as long as the above mentioned modification\nsupporting permanent password changes isn't implemented. So the\nsolution is here, to implement this feature, and not, to change\nthe behavior of ICHSEC00 (not that I'm too lazy to change it, it\nwould only need a single BC instruction to be modified  I really\nthink it's better to have it as it is now. (J)\n\nJust let me know of any objections against publishing this\nversion now.  If you're fine, I'm going to put it in the RAKF\nfolder on H390-MVS and suggest that Sam goes forward to put it on\nthe CBT tape using packaging method he already proposed for the\nprevious distribution tape.\n\nCheers, Juergen\n-----------------------------------------------------------------------\nJuergen Winkelmann             Tel.:   +41-44-632 5837\nETH Zuerich                    Fax.:   +41-44-632 1022\nInformatikdienste              e-mail: winkelmann@id.ethz.ch\nClausiusstr. 59\nCH-8092 Zuerich\n-----------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE4": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x008\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11%\\x00s\\x00s\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:25:38", "lines": 115, "newlines": 115, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: RAKF Status\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Fri, 15 Apr 2011 10:01:31 +0000\nTo:       \"Phil Roberts\" <opplr@hotmail.com>,\n          <svetter@ameritech.net>\nCC:       <n9gtm@comcast.net>,\n          <vbandke@bsp-gmbh.com>,\n          <sbgolob@cbttape.org>\n\nHi Phil, all,\n\n> The problem as we have switched from email messages to a\n> 'release' documentation, is that the below isn't reflected in\n> the $$$$M38J or any member on the install tape ( even the one\n> sent today ).  This caution - \"it is strongly recommended to\n> use the MVS ZAPs only temporary\" - is good but perhaps the\n> \"DANGER DANGER\" would perhaps be even better to warn concerning\n> VSAM files with the ZAPs in place.\n>\n> Including a sample job to ZAP DSCB of an orphaned VSAM data\n> might be good for folks that go ahead and do this anyway.  I\n> seem to remember a VVDS on the pack as well, but perhaps that\n> was a more recent OS.\n\nPhil's mailings from tonight convinced me to produce a final\nfinaL finAL fiNAL fINAL FINAL product tape J which is attached\nhere. Please replace all tapes sent out previously by this one!\n\nThe only change to last night's tape is the documentation in\nSAMPLIB member $$$$M38J:\n\nYes, I didn't put enough emphasis on outlining when the MVS ZAPs\nshould be used and when not, so I\n\n\u00b7    1. introduced a more detailed section on the consequences of\n        applying the ZAPs\n\n\u00b7    2. mentioned the orphaned VSAM dataspaces as an example for\n        the risk when simply running with the ZAPs and not\n        considering them only as a transition help to a fully\n        indicated system\n\n\u00b7    3. mentioned your workaround using CDSCB instead of a sample\n        DSCB ZAP job, as this is basically the same but with much\n        lower risk\n\n\u00b7    4. introduced a table showing the different\n        protection/reliability aspects for indicated/not\n        indicated object in ZAPed vs. not ZAPed, fully indicated\n        vs. mixed environments, which should show any user\n        clearly the way to go.\n\nWhat I didn't do is putting the DANGER DANGER banner in $$$$M38J:\nSimply because doing it wrong with the ZAPs isn't dangerous  it\nonly yields annoying effects but doesn't harm the system (of\ncourse a user exploiting a security hole caused by such an effect\ncould then harm the system but that I really don't consider to be\nour problem given the lots of warnings I now wrote on this). So\nI'd like to use the DANGER DANGER banner only where it's really\ndangerous and that's in the RAKF removal section.\n\nSo be it then, we're done for now!\n\nCheers, Juergen\n-------------------------------------------------------------\nJuergen Winkelmann           Tel.:   +41-44-632 5837\nETH Zuerich                  Fax.:   +41-44-632 1022\nInformatikdienste            e-mail: winkelmann@id.ethz.ch\nClausiusstr. 59\nCH-8092 Zuerich\n-------------------------------------------------------------\n\nFrom: Phil Roberts \u00ddmailto:opplr@hotmail.com\u00a8\nSent: Friday, April 15, 2011 8:39 AM\nTo: Winkelmann Juergen; svetter@ameritech.net\nCc: n9gtm@comcast.net; vbandke@bsp-gmbh.com; sbgolob@cbttape.org\nSubject: RE: RAKF Status\n\nHi Juergen, all\n\n\"If we continue to change small details of the distribution like\nduring the past two weeks, I fear we'll never get it out \"\n\n\"Just let me know of any objections against publishing this\nversion now  If you're fine, I'm going to put it in the RAKF\nfolder on H390-MVS and suggest that Sam goes forward to put it on\nthe CBT tape using packaging method he already proposed for the\nprevious distribution tape.\"\n\nI have tinkered some and have a work around for the situation\nwhere a VSAM dataset may get orphaned due to a mixed environment.\nIt doesn't take any outside utilities and can probably be posted\nin the forum as/if the issue arises.\n\nBasically if a VSAM cluster is deleted while running with the\nMVSZAPs ( not recommened operation but perhaps necessary for some\n) one can:\n\ndelete hlq.vsam.name noscr\ncdscb hlq.vsam.name.data dsorg(ps) vol(xxxxxx) racf\ncdscb hlq.vsam.name.index dsorg(ps) vol(xxxxxx) racf\nrpf 3.4 with hlq and vol xxxxxx to C catalog then D to delete from pack\n\nDon't think we have a scratch only TSO CP althought IDCAMS might\nhave a command combination so cataloging wouldn't be needed to\ndelete from VTOC.\n\nJust can't remember too much any more right now, but think the\nabove got a clobbered VSAM dataset cleared off the system.\n\nSo no, there aren't any objections to release.  Just trying to\nanticipate and prepare for some possible issues.\n\nPhil\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE5": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00H\\x01\\x11\\x11\\x8f\\x01\\x11\\x11\\x8f\\tI\\x00E\\x00E\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-28T00:00:00", "modifydate": "2011-04-28T09:49:48", "lines": 69, "newlines": 69, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: PTF is on File 850\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Thu, 28 Apr 2011 09:10:43 +0000\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nBack from Easter holidays I couldn't resist solving this pending\nRAKF password change issue... the evolution was:\n\n\u00b7       The ESG Security System ignored the NEWPASS parameter of\n        RACINIT completely.\n\n\u00b7       The first RAKF implementation from 2005 updated the\n        in-core UDATA table with the new password which provided\n        an almost usable functionality in that it enabled users to\n        change their password but the change lived only as long as\n        the in-core UDATA table didn't get rebuilt from source.\n        So, at the latest with the next IPL, all passwords changed\n        by users through their application using RACINIT NEWPASS=\n        were reverted to the ones coded in the source users table.\n\n\u00b7       With the change I've now published as PTF RRKF002 the new\n        password is not only updated to the in-core UDATA table\n        but also to the source table through a queuing mechanism.\n        This, finally, provides a fully functional RACINIT NEWPASS\n        handling conforming to the specifications defined by\n        RACF.\n\nPTF RRKF002 wasn't fully packagable inline, I need a TXLIB to\nprovide some of the elements (to be exact: Sample job ZJW0003\nfrom SAMPLIB which modifies MSTRJCL to add some DD statements is\nthe culprit  as it is a USERMOD it contains MCS statements that\nwould intermix with the PTF's MCS statements with inline\npackaging).  So, the attached file RRKF002.zip contains an XMITted\nPDS with 3 members:\n\n*       RRKF002: The PTF\n*       RRKF002E: The TXLIB in XMITted format\n*       RRKF002I: Instructions on making the TXLIB available for\n                  APPLY/ACCEPT\n\nI think, you could just copy the 3 members to File 850. This\nwould comply with your convention to add PTFs just with their\nmember name and the two additional members are close enough in\nthe member list to be easily spotted if one wants to install the\nPTF.\n\nThanks again!\n\nBest, Juergen\n\nP.S.: With this change the original $$$$$DOC member you prepared\nin 1991 would be really due for an update. Up to now I left it\ncompletely untouched for nostalgic reasons and just referred in\nthe other documentation members on which information is no longer\nvalid in $$$$$DOC. This is (just a probably incomplete quick\nshot) the installation procedure, the startup and customization\nconsiderations, the password change feature, the names of the\ntables and cataloged procedures  huuuhhh, I'd probably need a\nvolunteer J\n---------------------------------------------------------------\nJuergen Winkelmann           Tel.:   +41-44-632 5837\nETH Zuerich                  Fax.:   +41-44-632 1022\nInformatikdienste            e-mail: winkelmann@id.ethz.ch\nWeinbergstr. 11\nCH-8092 Zuerich\n---------------------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE6": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x11\\x12O\\x01\\x11\\x12O\\x10\\x17\\x00;\\x00;\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-05-04T00:00:00", "modifydate": "2011-05-04T10:17:35", "lines": 59, "newlines": 59, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: PTF is on File 850\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Wed, 4 May 2011 06:18:58 +0000\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nThanks for the background info concerning how the documentation\nwas written. Of course I had no idea under which circumstances\nyour documentation was written (I assumed you had some sort of\ncooperation with Craig's company ESG back then). For Europeans it\nis beyond imagination that an employer can kick you out from one\nday to the next, although we of course know that it is done often\nlike this in the US. You did a great job back then preparing it\nfor use and writing that documentation!\n\nBack in 1991 I didn't know of the existence of the ESG Security\nSystem but I wish I had. At that time I ran three IBM hosts at\nETH, one of which was an IBM 3090-600J-6VF (6 CPUs, each one\nequipped with a Vector Feature). This was the biggest iron sold\nby IBM at that time. Our use case for that system was scientific\ncomputing (of course), so we would have been perfectly happy with\na security solution a the level of the ESG Security System. If I\nimagine now, how much licensing fees for that incredibly\nexpensive RACF we could have saved.\n\nAnyway now it's 20 years later and we're doing it just for fun J\n\nI've attached the documentation PTF RRKF004 to this mail. It is\nin the same format as RRKF002 was, i.e. an XMITed PDS with three\nmembers that you can incorporate directly into File 850:\n\n*       RRKF004:    The PTF\n*       RRKF004E:   A PDF in XMITted format to be used by SMP as\n                    TXLIB\n*       RRKF004I:   Instructions on making the TXLIB available\n                    for APPLY/ACCEPT\n\nThe PTF simply replaces the obsolete documentation members\n($$$$INST, $$$$CUST, $$$$M38J, $$$$RMVE) in SAMPLIB with a new\none named $DOC$ZIP which is a zip archive containing the User's\nGuide as a PDF file and the  source\" Word document from which the\nPDF was created. SAMPLIB member $$$$INFO, which previously\npointed the user to the four now deleted document members and to\nyour $$$$$DOC, has been changed to point to the $DOC$ZIP file\nwith an instruction on how to use it and to your $$$$$DOC member\nas a historic reference.\n\nThanks again for all your help. It's a real pleasure working with\nyou at this stuff.\n\nBest, Juergen\n----------------------------------------------------------------\nJuergen Winkelmann          Tel.:   +41-44-632 5837\nETH Zuerich                 Fax.:   +41-44-632 1022\nInformatikdienste           e-mail: winkelmann@id.ethz.ch\nWeinbergstr. 11\nCH-8092 Zuerich\n----------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE7": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00!\\x01\\x11\\x13/\\x01\\x11\\x13/\\x167\\x001\\x001\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-05-12T00:00:00", "modifydate": "2011-05-12T16:37:21", "lines": 49, "newlines": 49, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: PTF is on File 850\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Thu, 12 May 2011 18:26:16 +0000\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nSo, I'll follow up as soon as I've finalized it.  I think I'm\nthen going to publish it as a PTF to RAKF, as I see it as a RAKF\ncomponent.\n\nIn the meantime I've finalized the utility and attached it here\nas PTF RRKF005.  The packaging is the same as RRKF002 again, three\nmembers for File 850.\n\nAs I mentioned last week, this one really is the last \"high\npriority\" PTF.  So, I'm now going to create further updates only\nif there are coming up real requirements from people using it or\nat least intending to use it.  In the beginning of the project\nthere was quite a bit of feedback in the H390-MVS Yahoo group but\nnow it's completely quiet, so I think there is not much need for\nfurther enhancements.\n\nBtw.:  I had a few mail exchanges with Dan concerning the RACIND\nutility and he pointed me to CBT File 452, which contains besides\nlots of other stuff some macros he wrote to create various forms\nof the SVC 26 (CTGPL) parameter lists.  These macros for sure are\nvery useful for people trying to understand this stuff and code\nprograms against this interface, as these are exactly the\nexamples one needs to quickly get to practice after having read\nPeter's paper.  But by now it's not possible for people searching\nfor information to find these macros, because they aren't\nmentioned anywhere.  Dan wrote, that he will put some information\nin the header member of File 452.  I think, in addition it would\nbe a good idea to put a pointer into File 689 (Peter's paper)\nmentioning Dan's macros in File 452, because Peter's paper\nprobably is the first useful bit of information one finds when\ngoogling for SVC 26 and CTGPL.\n\nThanks again and all the best!\n\nCheers, Juergen\n------------------------------------------------------------\nJuergen Winkelmann         Tel.:   +41-44-632 5837\nETH Zuerich                Fax.:   +41-44-632 1022\nInformatikdienste          e-mail: winkelmann@id.ethz.ch\nWeinbergstr. 11\nCH-8092 Zuerich\n------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE8": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01\\x11\\x17?\\x01\\x11\\x17?\\x017\\x00)\\x00)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-06-22T00:00:00", "modifydate": "2011-06-22T01:37:15", "lines": 41, "newlines": 41, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: PTF is on File 850\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Tue, 21 Jun 2011 19:06:51 +0000\nTo:       \"'Sam Golob'\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nI hope you're well!\n\nIn the meantime RACF change activity has calmed down as expected.\nNonetheless I've now completed two sample jobs (one for VSAM and\none for non-VSAM) to set or clear the RACF indicators of all\ndatasets, catalogs and VSAM objects in the system in a fully\nautomated way. Also, Phil recently tested the complete\ninstallation procedure including all PTFs and detected a bug and\nseveral minor issues.\n\nI've combined these sample jobs, some utilities needed to run\nthem, the fixes for the issues Phil detected and a lot of changes\nto the User's Guide into PTF RRKF006, which is attached to this\nmail in the usual format (XMITed PDS).\n\nThe new User s Guide is packaged inside the PTF the same way as I\ndid it in RRKF004 (a ZIP file containing it in PDF and in MS-Word\nformat). I've also attached them separately so that you can\neasily replace members RAKFDOC# and RAKFDOC@ in File 850 without\nhaving to unpack the RRKF006E member containing the ZIP file. I\ndon't think it's worthwhile to update the text format User's\nGuide in RAKFDOC that you created after RRKF004, I'd just add a\nremark that the PDF and MS-Word versions are more recent.\n\nThanks again for updating File 850\n\nBest, Juergen\n---------------------------------------------------------------\nJ\u00fcrgen Winkelmann              Tel.:   +41-44-632 5837\nETH Zuerich                    Fax.:   +41-44-632 1022\nInformatikdienste              e-mail: winkelmann@id.ethz.ch\nWeinbergstr. 11\nCH-8092 Zuerich\n---------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$RKDOC@": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00$\\x01\\x11\\x12_\\x01\\x11\\x12o\\x14\\x11\\x00M\\x00@\\x00\\x00\\xd7\\xd9\\xd6\\xc2\\xd3\\xc5\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-05-05T00:00:00", "modifydate": "2011-05-06T14:11:24", "lines": 77, "newlines": 64, "modlines": 0, "user": "PROBLEM"}, "text": "-----------------------------------------------------------------\nThis note has to do with a problem in reading the RAKFDOC@ member\nin MS Word.  Since the original Word document was FTP-ed to an\nFB-80 file on MVS, it was padded with blanks at the end.  When\nyou download the RAKFDOC@ member back to the PC, Word complains\nthat there is damage to the file and it can't open it.  Then it\nasks you if you want to fix the file, and if you say yes, Word\nwill then fix the file and open it.\n\nThis note is for the purpose of telling you that it is OK to\nopen the RAKFDOC@ document after going through all this trouble.\n-----------------------------------------------------------------\n\nSubject:  Re: PTF is on File 850\nFrom:     \"Winkelmann Juergen\" <winkelmann@id.ethz.ch>\nDate:     Thu, 5 May 2011 08:52:47 +0000\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nThe problem with the MS-Word document is caused by the padding\nbytes that fill the last  record\" of the RAKFDOC@ member to 80\ncharacters:\n\nDownloading SAMPLIB member $DOC$ZIP to the PC and extracting\nUsers_Guide.docx from that zip archive yields exactly the same\nfile, i.e. it compares identically with the original Word\ndocument.\n\nThe original Word document has a size of 64,971 bytes.\nDownloading member RAKFDOC@ from File 850 results in a file size\nof 65,040 bytes (the next multiple of 80). If I manually cut this\nfile to its first 64,971 bytes it compares identically with the\noriginal document:\n\n------------------------------------------------------------------\nC:\\Users\\juergen\\Desktop>dir *.docx\n05.05.2011  09:14            65'040 rakfdoc@.docx\n05.05.2011  09:25            64'971 rakfdoc@_cut.docx\n03.05.2011  09:03            64'971 Users_Guide.docx\nC:\\Users\\juergen\\Desktop>comp Users_Guide.docx rakfdoc@.docx\nVergleichen von Users_Guide.docx und rakfdoc@.docx...\nDateien sind unterschiedlich gross.\nC:\\Users\\juergen\\Desktop>comp Users_Guide.docx rakfdoc@_cut.docx\nVergleichen von Users_Guide.docx und rakfdoc@_cut.docx...\nDateien sind identisch     (Data is identical)\n------------------------------------------------------------------\n\nAs the cut file is identical to the original Word document it of\ncourse opens flawlessly in Word.\n\nSo, the original Word document is either 11 bytes too long or 69\nbytes too short to fit for raw packaging in File 850 without\nupsetting MS-Word.\n\nAt the moment I don't have a good idea on how to get the original\nWord document's size to be a multiple of 80 bytes. The .docx\nformat in itself is a zip archive (just open it with your zip\nutility and you'll see that it contains about 20 xml files), so\njust adding a few blanks at the end of the document will not help\nas they will be compressed out when MS-Word creates the zip\narchive.\n\nProbably it will be best to leave it as it is and perhaps place a\nremark in @FILE850 that MS-Word is expected to give error\nmessages when opening the document and that these should be\nignored.\n\nBest, Juergen\n-----------------------------------------------------------------\nJuergen Winkelmann          Tel.:   +41-44-632 5837\nETH Zuerich                 Fax.:   +41-44-632 1022\nInformatikdienste           e-mail: winkelmann@id.ethz.ch\nWeinbergstr. 11\nCH-8092 Zuerich\n-----------------------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CREDITS": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x11\\x10/\\x01\\x11\\x10/\\x13\\x07\\x00\\x1a\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-04-12T00:00:00", "modifydate": "2011-04-12T13:07:35", "lines": 26, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "Concerning the credits: Please have a look into relfile\nTRKF120.F2 of the attached tape. In the $$$$INFO member I try to\ndescribe the way of the product from ESG to RAKF and in the\n$$NOTICE member I added the relevant part of my mail exchange\nwith Craig. I totally agree with you to give Craig the main\ncredit but would suggest to add Phil Dickinson and Phil Roberts\nto the first sentence of the @FILE850 member as they did major\nenabling work to get RAKF going with MVS 3.8j. The exact\ncontributions are:\n\n-      Phil Dickinson: First idea on how to do it on MVS 3.8j and\n        early beta\" type of implementation in 2005. Lost his source\n       later on.\n\n-      Phil Roberts: Recovery of Phil D's changes to the original\n       ESG source through disassembly and compare. Great job!\n\n-      Juergen Winkelmann: Debugging and finalizing Phil D's\n       implementation, source cleanup, documentation and SMP\n       packaging.\n\n-      Scott Vetter: Testing, recommendations concerning the\n       logic flow of the RAKF initialization program, the\n       documentation and the SMP packaging. Very useful quality\n       and user experience enhancements!\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$RAKF12": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01\\x11\\x10/\\x01\\x11\\x10/\\x127\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-12T00:00:00", "modifydate": "2011-04-12T12:37:23", "lines": 23, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "//RAKF12   JOB (RAKF),\n//             'RAKF Install',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=2048K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* Read installation jcl library from                                *\n//* RAKF 1.2.0 distribution tape                                      *\n//* ------------------------------------------------------------------*\n//COPY    EXEC PGM=IEBCOPY\n//TAPE     DD  DISP=(OLD,KEEP),DSN=TRKF120.F2,\n//             UNIT=(TAPE,,DEFER),VOL=(,RETAIN,SER=RAKF12),\n//             LABEL=(3,SL)\n//INSTJCL  DD  DISP=(,CATLG),SPACE=(TRK,(3,1,1)),\n//             UNIT=SYSDA,DCB=(LRECL=80,RECFM=FB,BLKSIZE=5600),\n//             DSN=RAKF.INSTALL.CNTL            <== change if necessary\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n COPY INDD=TAPE,OUTDD=INSTJCL\n SELECT MEMBER=($$$$INST,A@PREP,B@RECV,C@APPLY,D@ACCPT)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE850": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x00\\x19\\x01\\x11\\x17?\\x01\\x11\\x17?\\x02\\x12\\x00O\\x00O\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-06-22T00:00:00", "modifydate": "2011-06-22T02:12:19", "lines": 79, "newlines": 79, "modlines": 0, "user": "CBT-482"}, "text": "//***FILE 850 is from Juergen Winkelmann, based on the pioneering   *   FILE 850\n//*           and expert work of Craig Yasuna.  This is Craig's     *   FILE 850\n//*           ESG security system adapted for MVS 3.8J that is run  *   FILE 850\n//*           under Hercules, and is called RAKF.                   *   FILE 850\n//*                                                                 *   FILE 850\n//*           Credit for the modifications goes to Phil Dickinson,  *   FILE 850\n//*           Phil Roberts, Juergen Winkelmann, and Scott Vetter.   *   FILE 850\n//*           See member $CREDITS in this file for details.         *   FILE 850\n//*                                                                 *   FILE 850\n//*           For the record, to see the modifications from the ESG *   FILE 850\n//*           security system thru (some level of) this source code *   FILE 850\n//*           please see member ESG2RAKF.                           *   FILE 850\n//*                                                                 *   FILE 850\n//*           The product is packaged as an SMP install for MVS 3.8 *   FILE 850\n//*           as a \"tape\" file in AWS format.  This \"tape\" has been *   FILE 850\n//*           folded into FB-80 and is included in this file as     *   FILE 850\n//*           member AWSTAPE.  A \"real tape\" can be made from this  *   FILE 850\n//*           member, using the VTT2TAPE program from CBT File 533  *   FILE 850\n//*           whose source (in RECV370 format) is in member VASM.   *   FILE 850\n//*                                                                 *   FILE 850\n//*           However, if you already have a Hercules system, you   *   FILE 850\n//*           can just FTP the AWSTAPE member to a PC file, or      *   FILE 850\n//*           download it to there using the IND$FILE program, and  *   FILE 850\n//*           mount it as a tape under Hercules using the devinit   *   FILE 850\n//*           command on the Hercules console.                      *   FILE 850\n//*                                                                 *   FILE 850\n//*           PTFs are listed here under their sysmod name.         *   FILE 850\n//*                                                                 *   FILE 850\n//*           Example:  RRKF001                                     *   FILE 850\n//*                                                                 *   FILE 850\n//*           However, for those who do not want to use the \"tape\"  *   FILE 850\n//*           to install RAKF, each relfile has been expanded into  *   FILE 850\n//*           a member of this file, that can be made into a pds    *   FILE 850\n//*           using the PDSLOAD program (whose source code is also  *   FILE 850\n//*           packaged in the VASM member).  To my knowledge, both  *   FILE 850\n//*           programs (PDSLOAD and this version of VTT2TAPE) can   *   FILE 850\n//*           be run on MVS 3.8.                                    *   FILE 850\n//*                                                                 *   FILE 850\n//*       PTFs were added to this package, and will be added as     *   FILE 850\n//*       needed:                                                   *   FILE 850\n//*                                                                 *   FILE 850\n//*       RRKF001  Introduce change history                         *   FILE 850\n//*                Enable comment lines in UDATA and PDATA          *   FILE 850\n//*                                                                 *   FILE 850\n//*       RRKF002  Allow users to make permanent changes to         *   FILE 850\n//*                their passwords                                  *   FILE 850\n//*                                                                 *   FILE 850\n//*       RRKF003  Prevent unauthorized user from accessing         *   FILE 850\n//*                incore tables                                    *   FILE 850\n//*                                                                 *   FILE 850\n//*       RRKF004  Fix and unify RAKF documentation                 *   FILE 850\n//*                                                                 *   FILE 850\n//*       RRKF005  RACIND Utility to control VSAM RACF Indicators   *   FILE 850\n//*                                                                 *   FILE 850\n//*       RRKF006  + Sample jobs to RACF indicate or unindicate     *   FILE 850\n//*                  the whole system                               *   FILE 850\n//*                + OCO distribution of RAKF-external utilities    *   FILE 850\n//*                + Sample jobs for creation of SYS1.SECURE.CNTL   *   FILE 850\n//*                  and SYS1.SECURE.PWUP                           *   FILE 850\n//*                + Add missing //RAKFPWUP DD statement to the     *   FILE 850\n//*                  RAKF cataloged procedure                       *   FILE 850\n//*                + Update the RAKF User's Guide with changes      *   FILE 850\n//*                  introduced since RRKF004                       *   FILE 850\n//*                                                                 *   FILE 850\n//*       Documentation for this system is in text form, in member  *   FILE 850\n//*       RAKFDOC.  However, the more up-to-date documentation is   *   FILE 850\n//*       in the two other members RAKFDOC# (PDF format) and        *   FILE 850\n//*       RAKFDOC@ (MSWORD format).  These latter members were      *   FILE 850\n//*       Juergen's original doc, and RAKFDOC was converted from    *   FILE 850\n//*       these, at a previous level, by Sam Golob.  The MSWORD     *   FILE 850\n//*       and PDF documentation reflect the latest PTF level,       *   FILE 850\n//*       RRKF006.                                                  *   FILE 850\n//*                                                                 *   FILE 850\n//*       email:   winkelmann@id.ethz.ch                            *   FILE 850\n//*                                                                 *   FILE 850\n//*       email:   svetter@ameritech.net                            *   FILE 850\n//*                                                                 *   FILE 850\n//*       email:   sbgolob@cbttape.org  or sbgolob@attglobal.net    *   FILE 850\n//*                                                                 *   FILE 850\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AWSTAPE": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11C\\x0e\\xdb\\x0e\\xdb\\x00\\x00\\xc1\\xe6\\xe2\\xe3\\xc1\\xd7\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:43:00", "lines": 3803, "newlines": 3803, "modlines": 0, "user": "AWSTAPE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CKIEBGE1": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00!\\x01\\x00$?\\x01\\x11\\x10_\\x11\\x11\\x00\\x0e\\x00\\t\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2011-04-15T11:11:21", "lines": 14, "newlines": 9, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBB JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*   CKIEBGEN IS ON CBT FILE 229 AND/OR FILE 293.\n//*      (INSTEAD OF IEBGENER - YOU CAN USE IEBGENER)\n//*\n//CKIEBGEN EXEC PGM=CKIEBGEN\n//STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSUT1    DD  DISP=SHR,DSN=TRKF120.F0,UNIT=562,\n//   VOL=SER=RAKF12,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),\n//   LABEL=(1,SL,EXPDT=98000)\n//SYSUT2    DD  DISP=SHR,DSN=SBGOLOB.CBT482.FILE850(F0)\n//SYSPRINT  DD  SYSOUT=*,DCB=RECFM=FBA\n//SYSUDUMP  DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESG2RACF": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x11\\x10/\\x01\\x11\\x10/\\x12W\\x02c\\x02c\\x00\\x00\\xd1\\xe6\\xc9\\xd5\\xd2\\xc5\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-12T00:00:00", "modifydate": "2011-04-12T12:57:19", "lines": 611, "newlines": 611, "modlines": 0, "user": "JWINKEL"}, "text": "//ESG2RAKF JOB\n//* ------------------------------------------------------------------*\n//* Update the ESG Security System from CBT file 165 to RAKF 1.2.0    *\n//* ------------------------------------------------------------------*\n//*\n//* ------------------------------------------------------------------*\n//* Copy ESG members being reused by RAKF unmodified                  *\n//* ------------------------------------------------------------------*\n//ESGCOPY  EXEC PGM=IEBCOPY\n//ESG      DD  DISP=SHR,DSN=MVS.RAKF.ESG2RAKF.CBT.F165\n//RAKF     DD  DISP=(,CATLG),DSN=MVS.RAKF.ESG2RAKF.SRC,\n//             UNIT=3390,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),\n//             SPACE=(TRK,(5,2,3))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n COPY INDD=((ESG,R)),OUTDD=RAKF\n SELECT MEMBER=($$$$$DOC,$$COPYRT,$$NOTICE,                            X\n                CJYPCBLK,CJYRCVTD,CJYUCBLK)\n/*\n//* ------------------------------------------------------------------*\n//* Update ESG members being reused by RAKF with modifications        *\n//* ------------------------------------------------------------------*\n//ESGUPDTE EXEC PGM=IEBUPDTE,PARM=MOD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=MVS.RAKF.ESG2RAKF.CBT.F165\n//SYSUT2   DD DISP=OLD,DSN=MVS.RAKF.ESG2RAKF.SRC\n//SYSIN    DD *\n./  CHANGE NAME=CJYRCVT\n./ DELETE  SEQ1=00060014,SEQ2=00060014\n./ DELETE  SEQ1=00160014,SEQ2=00160014\n         GETMAIN RU,LV=GMLEN,SP=245 GET SQA\n./ DELETE  SEQ1=00250001,SEQ2=00280001\n         MVI   RCVTVERS,X'06'      V1R7 OF RACF\n         MVI   RCVTFLG1,RCVTTAPE TAPE\n         MVI   RCVTSTA1,X'FF'\n         MVI   RCVTAUOP,X'7A'\n./ DELETE  SEQ1=00440001,SEQ2=00440001\n         WTO   'RCVT WAS PROCESSED SUCCESSFULLY'\n./ DELETE  SEQ1=00500010,SEQ2=00500010\nCJYRCVTX DC    XL8'0'\n./ DELETE  SEQ1=00950001,SEQ2=00950001\n         IHAPSA  DSECT=YES\n./  CHANGE NAME=CJYRPROF\n         MACRO\n&LABEL   BASMAC &R1,&S2\n&LABEL.  DC    0XL4'00',X'4D',AL.4(&R1.,0),S(&S2.)\n         MEND\n./ DELETE  SEQ1=00400001,SEQ2=00400001\n         MODESET MODE=SUP,KEY=ZERO     authorize ourselves\n./ DELETE  SEQ1=01410001,SEQ2=01410001\n         BASMAC R14,MORERPE            START TO FREE RPE'S\n./ DELETE  SEQ1=01440001,SEQ2=01440001\n         MODESET MODE=PROB,KEY=NZERO   return to problem state\n./ DELETE  SEQ1=01460001,SEQ2=01460001\n         WTO   'RAKFPROF7  RAKF PROFILES UPDATED'\n./ DELETE  SEQ1=01640001,SEQ2=01640001\n         BR    R14                     RETURN TO END RUN\n./ DELETE  SEQ1=01670001,SEQ2=01680001\n         WTO   'RAKFPROF1  RCVT NOT PROPERLY INITIALIZED'\n         WTO   'RAKFPROF1  **  PROGRAM TERMINATED  **'\n./ DELETE  SEQ1=01720001,SEQ2=01730001\n         WTO   'RAKFPROF2  NO RECORDS INPUT FROM CJYPDATA'\n         WTO   'RAKFPROF2  **  PROGRAM TERMINATED  **'\n./ DELETE  SEQ1=01780001,SEQ2=01810001\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF3  I/P RECORDS OUT OF ORDER'\n         WTO   'RAKFPROF3  **  PROGRAM TERMINATED  **'\n./ DELETE  SEQ1=01860001,SEQ2=01880001\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF4  PERMIT RECORD WITHOUT UNIVERSAL ACCESS RECOR*\n./ DELETE  SEQ1=01900001,SEQ2=01900001\n         WTO   'RAKFPROF4  **  PROGRAM TERMINATED  **'\n./ DELETE  SEQ1=01950001,SEQ2=01980001\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF5  PERMIT RECORD WITHOUT GROUPID/USERID'\n         WTO   'RAKFPROF5  **  PROGRAM TERMINATED  **'\n./ DELETE  SEQ1=02030001,SEQ2=02060001\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF6  ENTITY RECORD WITH NO ACCESS AUTHORITY'\n         WTO   'RAKFPROF6  **  PROGRAM TERMINATED  **'\n./ DELETE  SEQ1=02110001,SEQ2=02110001\nBADMSGN  WTO   'RAKFPROF8                                              X\n./ DELETE  SEQ1=02130001,SEQ2=02130001\n         BR    R14\n./ DELETE  SEQ1=02440001,SEQ2=02440001\nCJYPDATA DCB   MACRF=GM,EODAD=EOFILE,DDNAME=RAKFPROF,DSORG=PS\n./  CHANGE NAME=CJYRUIDS\n./ DELETE  SEQ1=00390000,SEQ2=00390000\n         MODESET MODE=SUP,KEY=ZERO  authorize ourselves\n./ DELETE  SEQ1=01340005,SEQ2=01340005\nBYEBYE   MODESET MODE=PROB,KEY=NZERO   return to problem state\n         CLOSE (CJYUDATA)              close input dataset\n         WTO    'RAKFUIDS4  USER TABLE UPDATED'\n./ DELETE  SEQ1=01380005,SEQ2=01390005\nABEND100 WTO    'RAKFUIDS1  RCVT NOT PROPERLY INITIALIZED',DESC=(2)\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)\n./ DELETE  SEQ1=01420005,SEQ2=01420005\nABEND2   WTO    'RAKFUIDS2  INPUT DATA INVALID OR OUT OF SEQ.',DESC=(2)\n./ DELETE  SEQ1=01470005,SEQ2=01470005\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)\n./ DELETE  SEQ1=01540005,SEQ2=01550005\nABEND300 WTO    'RAKFUIDS3  EMPTY INPUT FILE ?!?!',DESC=(2)\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)\n./ DELETE  SEQ1=01640001,SEQ2=01640001\nCJYUDATA DCB    DDNAME=RAKFUSER,MACRF=GM,EODAD=ENDDATA,DSORG=PS\n./ DELETE  SEQ1=02090000,SEQ2=02090000\n         IHAPSA  DSECT=YES\n./  CHANGE NAME=ICHRTX00\n./ DELETE  SEQ1=00010060,SEQ2=00020098\nICHSFR00 TITLE 'SAF ROUTER - ENTRY FOR ALL SECURITY CALLS'\n* CPARM='XREF(SHORT),RENT,OBJ,NODECK',LPARM='RENT,REUS,MAP'   ICHSFR00\n./ DELETE  SEQ1=00070060,SEQ2=00070060\nICHSFR00 CSECT\n./ DELETE  SEQ1=00240060,SEQ2=00250060\n./ DELETE  SEQ1=00270060,SEQ2=00280060\n         USING ICHSFR00,R15\n         SAVE  (14,12),,ICHSFR00.&SYSDATE..&SYSTIME\n./ DELETE  SEQ1=00350060,SEQ2=00350060\n         USING ICHSFR00,R12        PROGRAM BASE\n./ DELETE  SEQ1=00390060,SEQ2=00390060\n         L     R9,24(R1)           ADDRESS EXIT WORK AREA\n./ DELETE  SEQ1=00490068,SEQ2=00490068\nSTRTROUT LR    R9,R1               GET ADDR. OF SAF PARAMETER LIST\n./ DELETE  SEQ1=00740060,SEQ2=00780060\n./ DELETE  SEQ1=00810060,SEQ2=00810060\n         BNZ   RACHCLNE            found --> continue\n         LA    R2,RACDDSNC         use our DSN CLASS\nRACHCLNE XR    ENTYREG,ENTYREG     CLEAR ENTYREG\n*        BNZ   RACHACEE            found --> continue\n*        B     RACHGOOD            not found --> exit\n*        BNZ   RACHNBLK            not zero --> continue\n*        B     RACHGOOD            zero --> exit\n./ DELETE  SEQ1=00880060,SEQ2=00880060\n         CLC   WORKCLAS(8),=CL8' ' CLASS blank?\n         BNE   RACHNBLK               --> no, continue\n         MVC   WORKCLAS,=CL8'DATASET' --> yes, assume DATASET\nRACHNBLK ICM   ACEEREG,B'1111',ACHKACEE POINT TO ACEE\n./ DELETE  SEQ1=00900060,SEQ2=00920060\n./ DELETE  SEQ1=01320060,SEQ2=01340060\n./ DELETE  SEQ1=01690083,SEQ2=01690083\nRACDNDEL ICM   R2,B'0111',RDDFCLNW CLASS ???\n./ DELETE  SEQ1=01730060,SEQ2=01750060\n./ DELETE  SEQ1=01820060,SEQ2=01850060\n         CLC   WORKCLAS(8),=CL8' ' CLASS blank?\n         BNE   RACDNBLK               --> no, continue\n         MVC   WORKCLAS,=CL8'DATASET' --> yes, assume DATASET\nRACDNBLK ICM   ACEEREG,B'1111',RDDFACEE POINT TO ACEE\n         BNZ   RACDCHCK            GO CHECK\n./ DELETE  SEQ1=01860060,SEQ2=01860060\n./ DELETE  SEQ1=02120060,SEQ2=02220060\nRACDCK18 EQU   *\n./ DELETE  SEQ1=02240060,SEQ2=02290060\nRACDCMCL EQU   *\n./ DELETE  SEQ1=02310083,SEQ2=02320060\n./ DELETE  SEQ1=02350060,SEQ2=02390083\n         BO    RACDFAIL            BYPASS RC=4\n./ DELETE  SEQ1=02450083,SEQ2=02450083\n         BO    RACDGDD0            --> Yes, RC=0\n./ DELETE  SEQ1=02470083,SEQ2=02480083\n         BNO   RACDGDD0            --> No, RC=0\n         MVC   SAFPRREA,=F'04'     --> Yes, RC=0 & Reason=4\n./ DELETE  SEQ1=02790075,SEQ2=02810075\n./ DELETE  SEQ1=03880060,SEQ2=03900060\n         IC    R1,CBLKPWDL         LENGTH OF PSWD IN CORE\n         EX    R1,RACICKPW         check password\n         BE    RACIPWOK            password is correct\n./ DELETE  SEQ1=03920060,SEQ2=03920060\n         EX    R1,RACISTPW         check STC password\n./ DELETE  SEQ1=03950060,SEQ2=03990079\nRACIPWOK EQU   *\nRACICHPW EQU   *\nRACINCL2 EQU   *\n         ICM   R3,15,24(R8)        set new password?\n         BZ    RACIACEE            no, go make ACEE\n         MVC   WORKPASS,0(R3)      yes, move new password\n         XC    WORKPASS+1(8),=C'SECURITY' encrypt\n         IC    R1,WORKPASS         length of new password\n         EX    R1,RACIRPWD         replace password\n         SR    R0,R0               clear R0\n         LA    R1,RAKFPWUP         get command address\n         SVC   34                  execute S RAKFPWUP command\n./ DELETE  SEQ1=04010060,SEQ2=04010060\n         B     RACIACEE            go make ACEE\nRAKFPWUP DC    X'000E0000'         parameter list for ..\n         DC    C'S RAKFPWUP'        .. S RAKFPWUP command\nRACIRPWD MVC   CBLKPWDL(1),WORKPASS replace in core password\nRACICKPW CLC   CBLKPWDL(1),WORKPASS check password\nRACISTPW CLC   STCPASS(1),WORKPASS  check STC password\nRACIERR1 MVC   WORKWTO+4(60),WTOMSG1 CJYUSERS INVALID\n./ DELETE  SEQ1=04090093,SEQ2=04090093\nRACIWTO1 MVC   WORKWTO+5+WTOMSG2U(0),1(R5) MOVE USERID\n./ DELETE  SEQ1=04390060,SEQ2=04390060\n         OI    ACEEFLG1,ACEERACF+ACEECNTL\n./ DELETE  SEQ1=04540060,SEQ2=04540060\n         CLI   0(R8),X'34'         check length of RACINIT plist\n         BNL   RACIAPPL            -> ge x'34' continue\n         B     RACINSTA            -> lt x'34' store ACEE addr in ASXB\n./ DELETE  SEQ1=04950060,SEQ2=04960060\nRACINSTA EQU   *\n./ DELETE  SEQ1=04990060,SEQ2=05000081\n./ DELETE  SEQ1=05100060,SEQ2=05130060\nRACIDNAC EQU   *\n./ DELETE  SEQ1=05170060,SEQ2=05170060\n         BNE   RACINTDM            NO, GO DO FREE\n./ DELETE  SEQ1=05670060,SEQ2=05700072\nRACIINPW MVC   SAFPRRET,=F'08'     invalid or no password entered\n         XC    WORKPASS,WORKPASS   clear just in case\n         B     RACIFAIL            BRANCH TO FAIL COMMON\n./ DELETE  SEQ1=05710060,SEQ2=05710060\n./ DELETE  SEQ1=06000060,SEQ2=06000060\n         BNO   RACINPWF            no  --> check for WTO suppression\nRACINPWF CLC   SAFPRRET,=F'08'     invalid or no password entered?\n         BNE   RACIFWTO            no  --> write message\n         LTR   R3,R3               yes --> no password entered?\n         BZ    RTRNFAIL            yes --> don't write message\n./ DELETE  SEQ1=06150068,SEQ2=06150068\nRTRNGOOD LA    R15,0               RACF RC=0\n./ DELETE  SEQ1=06180068,SEQ2=06180068\nRTRNWARN LA    R15,0               RACF RC=4\n./ DELETE  SEQ1=06210068,SEQ2=06210068\nRTRNFAIL LA    R15,0               RACF RC=8\n./ DELETE  SEQ1=06360060,SEQ2=06360060\n         CLC   WORKCLAS(8),=CL8' '    CLASS blank?\n         BNE   ENTYNBLK                  --> no, continue\n         MVC   WORKCLAS(8),=CL8'DATASET' --> yes, assume DATASET\nENTYNBLK CLC   =C'DATASET',WORKCLAS  CHECK FOR OUR OWN DSNS.\n         CLC   0(3,ENTYREG),=C'SYS' is it a ..\n         BNE   ENTYCLLP              --> no\n         CLC   8(2,ENTYREG),=C'.T'            .. temporary ..\n         BNE   ENTYCLLP              --> no\n         CLC   16(3,ENTYREG),=C'.RA'                         .. dataset\n         BNE   ENTYCLLP              --> no, go on\n         B     AUTHGOOD              --> yes, go for it\n./ DELETE  SEQ1=06940060,SEQ2=06940060\nENTYOPER CLC   =C'DATASET',RPECLASN  DATASET CLASS\n./ DELETE  SEQ1=07110060,SEQ2=07110060\n         MVC   WORKWTO+4(9),=C'RAKF0006 ' USERID/CLASS\n./ DELETE  SEQ1=07190060,SEQ2=07190060\n         MVC   WORKWTO+4(9),=C'RAKF0009 ' USERID/CLASS\n./ DELETE  SEQ1=07290060,SEQ2=07290060\n         MVC   WORKWTO+4(9),=C'RAKF000B ' USERID/CLASS\n./ DELETE  SEQ1=07310060,SEQ2=07310060\n         B     AUTHGOOD            ALLOW ACCESS\n./ DELETE  SEQ1=07390060,SEQ2=07390060\n         MVC   WORKWTO+4(9),=C'RAKF000A ' USERID/CLASS\n./ DELETE  SEQ1=07740079,SEQ2=07740079\nSTCPASS  DC    X'08251C06253A1F362D',C'Y'\n./ DELETE  SEQ1=07770079,SEQ2=07770079\nPRODPASS DC    X'08251C06253A1F362D',C'N'\n./ DELETE  SEQ1=07840060,SEQ2=07850060\nWTOMSG1  DC    CL60'RAKF0001 USERID TABLE INVALID OR MISSING'\nWTOMSG2  DC    C'RAKF0002 STC ACCESS ALLOWED: USER:'\n./ DELETE  SEQ1=07880060,SEQ2=07890060\nWTOMSG3  DC    C'RAKF0003 RESOURCE TABLE INVALID/MISSING: ALLOWED:'\n*        DC    C': USER ALLOWED:'\n./ DELETE  SEQ1=07920060,SEQ2=07920060\nWTOMSG4  DC    C'RAKF0004 INVALID ATTEMPT TO ACCESS SYSTEM:  USER:'\n./ DELETE  SEQ1=07950060,SEQ2=07960060\nWTOMSG5  DC    CL60'RAKF0005 INVALID ATTEMPT TO ACCESS RESOURCE'\nWTOMSG7  DC    C'RAKF0007 ACCESS ALLOWED VIA OPERATIONS:  USER:'\n./ DELETE  SEQ1=07990060,SEQ2=07990060\nWTOMSG8  DC    CL60'RAKF0008 UNDEFINED RESOURCE - ACCESS ALLOWED'\n./ DELETE  SEQ1=08020060,SEQ2=08020060\n         DC    CL8' ',C','\n./ DELETE  SEQ1=08040060,SEQ2=08040060\n         DC    CL8' ',C','\n./ DELETE  SEQ1=08060060,SEQ2=08060060\n         DC    CL8' ',C','\n         DC    CL133' '\n         DC    C'                                              '\n         DC    C'                                              '\n         DC    C'                                              '\n         DC    C'         0123456789ABCDEF'\n./ DELETE  SEQ1=08630060,SEQ2=08640060\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\n./ DELETE  SEQ1=08660071,SEQ2=08670060\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n./ DELETE  SEQ1=08710088,SEQ2=08750088\n./  CHANGE NAME=IGC0013A\n./ DELETE  SEQ1=00020019,SEQ2=00020019\n* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF013A\n./ DELETE  SEQ1=00060017,SEQ2=00060017\nRAKF013A CSECT\n./ DELETE  SEQ1=00230013,SEQ2=00230013\n         USING RAKF013A,R6         SVC ENTRY R6 = EP.\n./ DELETE  SEQ1=00300013,SEQ2=00360013\n./ DELETE  SEQ1=00380013,SEQ2=00380013\n         L     R15,PSATOLD-PSA(0)  ADDRESS TCB\n./ DELETE  SEQ1=00420013,SEQ2=00430013\n./ DELETE  SEQ1=00490013,SEQ2=00510013\n./ DELETE  SEQ1=00560013,SEQ2=00610013\n./ DELETE  SEQ1=00830013,SEQ2=00840013\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n./ DELETE  SEQ1=00860013,SEQ2=00900013\n./  CHANGE NAME=IGC0013C\n./ DELETE  SEQ1=00020013,SEQ2=00020013\n* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF013C\n./ DELETE  SEQ1=00060008,SEQ2=00060008\nRAKF013C CSECT\n./ DELETE  SEQ1=00230008,SEQ2=00230008\n         USING RAKF013C,R6         SVC ENTRY R6 = EP.\n         MVC   RACRGM,RACRREAL     move RACROUTE\n./ DELETE  SEQ1=00290008,SEQ2=00350008\n./ DELETE  SEQ1=00370008,SEQ2=00370008\n         L     R15,PSATOLD-PSA(0)  ADDRESS TCB\n./ DELETE  SEQ1=00410008,SEQ2=00420008\n./ DELETE  SEQ1=00460008,SEQ2=00460008\n         MVC   RACRGM+RACRLEN-RACDLEN(RACDLEN-8),0(R10) MOVE PARM\n./ DELETE  SEQ1=00490008,SEQ2=00490008\n./ DELETE  SEQ1=00510008,SEQ2=00510008\n./ DELETE  SEQ1=00560008,SEQ2=00610008\n         DC    A(0)       INSTALLATION DATA ADDRESS (missing in RACDEF)\n         DC    A(0)       ENTITY NAME ADDR FIELD    (missing in RACDEF)\n./ DELETE  SEQ1=00820008,SEQ2=00830008\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n./ DELETE  SEQ1=00850008,SEQ2=00880008\n./  CHANGE NAME=IGC00130\n./ DELETE  SEQ1=00020016,SEQ2=00020016\n* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF0130\n./ DELETE  SEQ1=00050015,SEQ2=00070015\n./ DELETE  SEQ1=00090010,SEQ2=00090010\nRAKF0130 CSECT\n./ DELETE  SEQ1=00260010,SEQ2=00260010\n         USING RAKF0130,R6         SVC ENTRY R6 = EP.\n./ DELETE  SEQ1=00330010,SEQ2=00390010\n./ DELETE  SEQ1=00410010,SEQ2=00410010\n         L     R15,PSATOLD-PSA(0)  ADDRESS TCB\n./ DELETE  SEQ1=00450010,SEQ2=00460010\n./ DELETE  SEQ1=00520010,SEQ2=00540010\n./ DELETE  SEQ1=00590010,SEQ2=00640010\n./ DELETE  SEQ1=00700010,SEQ2=00700010\n         USING ACHKLIST,R9         RACHECK parameter list\n         TM    ACHKFLG1,ACHKCSA    profile to be returned in CSA?\n         BNO   RETURN              no  --> exit\n         XR    R1,R1               yes --> return zero address to\n*                                          signal unsupported function\nRETURN   BR    R8                  RETURN TO ORIG. R14\n./ DELETE  SEQ1=00850010,SEQ2=00860010\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n./ DELETE  SEQ1=00880010,SEQ2=00910010\n         ICHACHKL\n./   ENDUP\n/*\n//* ------------------------------------------------------------------*\n//* Rename reused ESG members to their RAKF names                     *\n//* ------------------------------------------------------------------*\n//RENAME   EXEC PGM=IKJEFT01\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTERM  DD DUMMY\n//SYSTSIN  DD *\n  RENAME 'MVS.RAKF.ESG2RAKF.SRC(ICHRTX00)' +\n         'MVS.RAKF.ESG2RAKF.SRC(ICHSFR00)'\n  RENAME 'MVS.RAKF.ESG2RAKF.SRC(CJYRPROF)' +\n         'MVS.RAKF.ESG2RAKF.SRC(RAKFPROF)'\n  RENAME 'MVS.RAKF.ESG2RAKF.SRC(CJYRUIDS)' +\n         'MVS.RAKF.ESG2RAKF.SRC(RAKFUSER)'\n/*\n//* ------------------------------------------------------------------*\n//* Load RAKF unique members ICHSEC00 and ICHRIN00                    *\n//* ------------------------------------------------------------------*\n//ICHSEC00 EXEC PGM=IEBGENER\n//SYSUT2   DD  DISP=SHR,DSN=MVS.RAKF.ESG2RAKF.SRC(ICHSEC00)\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  *\n         TITLE 'RAKF Initialization Program'\nICHSEC00 CSECT\n*\n**********************************************************************\n*                                                                    *\n* NAME: ICHSEC00                                                     *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Initialize RAKF                                              *\n*                                                                    *\n* FUNCTION: - output banner to console                               *\n*           - check if SAFV is already defined and initialized       *\n*             o if yes: skip initialization and go directly to       *\n*                       profile and user table initialization        *\n*           - try to read initialization directive from              *\n*             parmlib member RAKFINIT:                               *\n*             o if first line of member starts with YES:    continue *\n*             o if first line of member starts with NO:     exit     *\n*             o else, of if member doesn't exist:                    *\n*               + ask operator for permission to initialize          *\n*                 if operator denies permission:            exit     *\n*           - get SQA storage for SAFV and initialize it             *\n*           - put entry address of SAF router ICHSFR00 in SAFV       *\n*           - initialize RCVT                                        *\n*           - initialize profile table                               *\n*           - initialize user table                                  *\n*                                                                    *\n* REQUIREMENTS: - ICHSFR00 in LPA                                    *\n*               - RAKFPROF and RAKFUSER in linklist                  *\n*               - parmlib defined through ddname IEFPARM             *\n*               - user and profile table DDs as needed               *\n*                 by RAKFPROF and RAKFUSER                           *\n*                                                                    *\n**********************************************************************\n*\n         PRINT NOGEN\n         SAVE  (14,12),,ICHSEC00_&SYSDATE._&SYSTIME\n         USING ICHSEC00,R15        establish => program EP\n         ST    R13,SAVEAREA+4      save HSA\n         LA    R11,SAVEAREA        establish => savearea\n         ST    R11,8(R13)          save LSA\n         LR    R13,R11             setup => our savearea\n         USING SAVEAREA,R13        new addressability\n         DROP  R15                 program EP no longer needed\n         B     CONTINUE            branch around savearea\nSAVEAREA DS    18F                 savearea\n*\n* identify\n*\nCONTINUE WTO   'RAKF is based on the ESG Security System'\n         WTO   'written by Craig J. Yasuna               (Mar 1991)'\n         WTO   'adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)'\n         WTO   '                     Phil Roberts        (Apr 2011)'\n         WTO   '                     Juergen Winkelmann  (Apr 2011)'\n*\n* RAKF already active?\n*\n         L     R2,FLCCVT-PSA(0)    get CVT address from PSA\n         ICM   R3,B'1111',CVTSAF(R2) SAFV already defined?\n         BZ    GOFORIT             no RAC active, continue activation\n         USING SAFV,R3             addressability of SAFV\n         CLC   SAFVIDEN(4),SAFVID  SAFV initialized?\n         BNE   GOFORIT             no RAC active, continue activation\n         DROP  R3                  SAFV no longer needed\n         WTO   'RAKF005I RAKF is already active' tell operator\n         B     PROFUSER            initialize user and profile table\n*\n* read parmlib\n*\nGOFORIT  LA    R11,PARMLIB         establish ..\n         USING IHADCB,R11           .. DCB addressability\n         OPEN  PARMLIB             open PARMLIB\n         LH    R12,DCBBLKSI        get blocksize\n         GETMAIN EU,LV=(R12),A=BLKADDR get storage for block\n         FIND  PARMLIB,RAKFINIT,D  find member RAKFINIT\n         LTR   R15,R15             parmlib member found?\n         BNZ   CLOSE                --> no, don't read\n         L     R12,BLKADDR         get block address\n         READ  INDECB,SF,PARMLIB,(R12),'S' read block\n         CHECK INDECB              wait for data to arrive\n         MVC   RAKSTART(4),0(R12)  get parmlib input\nCLOSE    LH    R12,DCBBLKSI        get blocksize\n         FREEMAIN EU,LV=(R12),A=BLKADDR free storage\n         CLOSE PARMLIB             close parmlib\n         DROP  R11                 DCB no longer needed\n*\n* decide initialization\n*\n         CLC   RAKSTART(2),NO      if RAKFINIT directive is NO ..\n         BE    NOINIT               .. talk dirrty and don't initialize\n         CLC   RAKSTART(3),YES     if RAKFINIT directive is YES ..\n         BE    INITMSG              .. initialize RAKF\n         WTO   MF=(E,INITWTO)       .. else ask operator\n         WTOR  'RAKF002A Reply YES to continue or NO to cancel',       X\n               REPLY,4,SECECB,ROUTCDE=(1) .. shall we?\n         WAIT  ECB=SECECB          wait for reply\n         CLC   REPLY(2),NO         if operator replied NO ..\n         BNE   INIT                 .. talk dirrty and don't initialize\nNOINIT   WTO   'RAKF004W RAKF not initialized' tell operator\nRETURN   L     R13,SAVEAREA+4      get caller's savearea\n         RETURN (14,12),,RC=0      return\n*\n* initialize\n*\nINITMSG  WTO   MF=(E,INITWTO)      tell operator\nINIT     MODESET MODE=SUP,KEY=ZERO authorize ourselves\n         GETMAIN RU,LV=SAFVLEN,SP=245 get SQA storage for SAFV\n         LR    R3,R1               establish ..\n         USING SAFV,R3              .. addressability of SAFV\n         XC    SAFV(SAFVLEN),SAFV  clear SAFV\n         MVC   SAFVIDEN(4),SAFVID  move identifier into SAFV\n         LOAD  EP=ICHSFR00         get SFR address (LPA)\n         ST    R0,SAFVSAFR         store SFR address in SAFV\n         DROP  R3                  SAFV addressability no longer needed\n         L     R2,FLCCVT-PSA(0)    get CVT address from PSA\n         ST    R3,CVTSAF(R2)       save SAFV address in CVT\n         L     R15,CJYRCVT         get RCVT loader address\n         BALR  R14,R15             call it\n         MODESET MODE=PROB,KEY=NZERO return to problem state\n         WTO   'RAKF003I RAKF is now active',ROUTCDE=(2) tell operator\nPROFUSER LOAD  EP=RAKFPROF         load profile updater\n         LR    R15,R0              address of entry point\n         BALR  R14,R15             call it\n         DELETE EP=RAKFPROF        remove it\n         LOAD  EP=RAKFUSER         load user updater\n         LR    R15,R0              address of entry point\n         BALR  R14,R15             call it\n         DELETE EP=RAKFUSER        remove it\n         B     RETURN              return\n*\n* data area\n*\nBLKADDR  DS    F                   address of parmlib read buffer\nCJYRCVT  DC    V(CJYRCVT)          RCVT loader\nRAKFINIT DC    C'RAKFINIT'         parmlib member name\nRAKSTART DC    CL4' '              parameter read from parmlib\nREPLY    DC    CL4' '              reply from operator\nSAFVID   DC    CL4'SAFV'           SAFV eye catcher\nSECECB   DC    A(0)                ECB for WTOR\nNO       DC    CL2'NO'             NO\nYES      DC    CL3'YES'            YES\nINITWTO  WTO   'RAKF001I RAKF is now being activated',                 X\n               ROUTCDE=(1),MF=L    tell operator\nPARMLIB  DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=R,EODAD=CLOSE\n*\n* equates\n*\nCVTSAF   EQU   248 CVTSAF doesn't exist but is a reserved field in 3.8J\n         YREGS                     register equates\n*\n* control block mappings\n*\n         CVT   DSECT=YES           map CVT\n         IHAPSA   DSECT=YES        map PSA\n         ICHSAFV  DSECT=YES        map SAFV\n         DCBD  DSORG=PO,DEVD=DA    map DCB\n         END   ICHSEC00\n/*\n//ICHRIN00 EXEC PGM=IEBGENER\n//SYSUT2   DD  DISP=SHR,DSN=MVS.RAKF.ESG2RAKF.SRC(ICHRIN00)\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  *\n         TITLE 'RAKF SVCs'\nICHRIN00 CSECT\n         ENTRY IGC0013A,IGC0013B,IGC0013C\n*\n**********************************************************************\n*                                                                    *\n* NAME: ICHRIN00                                                     *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Stub module for RAKF SVCs                                    *\n*                                                                    *\n* FUNCTION: provide dummy RACF SVC 132                               *\n*           provide real RAKF SVCs 130, 131, 133                     *\n*                                                                    *\n**********************************************************************\n*\n         USING ICHRIN00,R6         SCV entry R6 = EP\n         B     SVC130              continue with IGC00130\n         DC    C'IGC00130 RAKF  &SYSDATE. ' eye catcher\nSVC130   L     R6,RAKF0130         address of SVC 130\n         BR    R6                  go for it\n*\n         USING IGC0013A,R6         SCV entry R6 = EP\nIGC0013A B     SVC131              continue with IGC0013A\n         DC    C'IGC0013A RAKF  &SYSDATE. ' eye catcher\nSVC131   L     R6,RAKF013A         address of SVC 131\n         BR    R6                  go for it\n*\n         USING IGC0013B,R6         SCV entry R6 = EP\nIGC0013B B     SVC132              continue with IGC0013B (dummy)\n         DC    C'ICHRIN00 DUMMY &SYSDATE. ' eye catcher\nSVC132   LA    R15,0               indicate RACLIST successful ..\n         LA    R0,4                 .. but no profiles mapped\n         BR    R14                 return to the caller\n*\n         USING IGC0013C,R6         SCV entry R6 = EP\nIGC0013C B     SVC133              continue with IGC0013C\n         DC    C'IGC0013C RAKF  &SYSDATE. ' eye catcher\nSVC133   L     R6,RAKF013C         address of SVC 133\n         BR    R6                  go for it\n*\n*\nRAKF0130 DC    V(RAKF0130)         SVC 130 (RACHECK)\nRAKF013A DC    V(RAKF013A)         SVC 131 (RACINIT)\nRAKF013C DC    V(RAKF013C)         SVC 133 (RACDEF)\n         YREGS                     register equates\n         END   ICHRIN00\n/*\n//* ------------------------------------------------------------------*\n//* Update member statistics for documentation                        *\n//* ------------------------------------------------------------------*\n//STATUPD EXEC PGM=IKJEFT01\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  *\nPDS 'MVS.RAKF.ESG2RAKF.SRC'\nMEMBERS  (ICHSFR00,IGC0013A,IGC0013C,                  +\n          IGC00130,RAKFPROF,RAKFUSER)\nATTRIB * VER(38) MOD(02) ID(*RAKF*) MODIFIED(11/03/31) +\n         TIME(2045) SECS(00)\nMEMBERS  (ICHRIN00,ICHSEC00)\nATTRIB * NONE\nATTRIB * ADDSTATS\nATTRIB * VER(38) MOD(02) ID(*RAKF*) MODIFIED(11/03/31) +\n         TIME(2045) SECS(00) CREATED(11/03/31)\nMEMBERS  (CJYRCVT)\nATTRIB * VER(38) MOD(00) ID(*PHILS*) MODIFIED(05/08/23) +\n         TIME(0000) SECS(00)\nEND\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "F0": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11R\\x00+\\x00+\\x00\\x00\\xe3\\xd9\\xd2\\xc6\\xf1\\xf2\\xf0@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:52:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "TRKF120"}, "text": "++FUNCTION(TRKF120) FILES(6).\n++VER(Z038).\n++JCLIN RELFILE(1).\n++MAC($$$$$DOC) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC($$$$CUST) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC($$$$INFO) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC($$$$INST) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC($$$$M38J) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC($$$$RMVE) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC($$COPYRT) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC($$NOTICE) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(A@PREP)   DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(B@RECV)   DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(C@APPLY)  DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(D@ACCPT)  DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(LPABACK)  DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(LPAREST)  DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(MINPRF)   DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(MINUSR)   DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(RAKFRMV)  DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(RAKF2MVS) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(TK3USR)   DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(ZAPMVS38) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(ZJW0003)  DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) RELFILE(2).\n++MAC(CJYPCBLK) DISTLIB(AMACLIB)  SYSLIB(MACLIB)  RELFILE(3).\n++MAC(CJYRCVTD) DISTLIB(AMACLIB)  SYSLIB(MACLIB)  RELFILE(3).\n++MAC(CJYUCBLK) DISTLIB(AMACLIB)  SYSLIB(MACLIB)  RELFILE(3).\n++MAC(YREGS)    DISTLIB(AMACLIB)  SYSLIB(MACLIB)  RELFILE(3).\n++SRC(CJYRCVT)  DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(ICHRIN00) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(ICHSEC00) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(ICHSFR00) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(IGC0013A) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(IGC0013C) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(IGC00130) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(RAKFPROF) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(RAKFPWUP) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++SRC(RAKFUSER) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  RELFILE(4).\n++MAC(RAKF)     DISTLIB(APROCLIB) SYSLIB(PROCLIB) RELFILE(5).\n++MAC(RAKFPROF) DISTLIB(APROCLIB) SYSLIB(PROCLIB) RELFILE(5).\n++MAC(RAKFPWUP) DISTLIB(APROCLIB) SYSLIB(PROCLIB) RELFILE(5).\n++MAC(RAKFUSER) DISTLIB(APROCLIB) SYSLIB(PROCLIB) RELFILE(5).\n++MAC(RAKFINIT) DISTLIB(APARMLIB) SYSLIB(PARMLIB) RELFILE(6).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "F1": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11V\\x00~\\x00~\\x00\\x00\\xd1\\xc3\\xd3\\xc9\\xd5@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:56:00", "lines": 126, "newlines": 126, "modlines": 0, "user": "JCLIN"}, "text": "./ ADD NAME=TRKF120  0200-11093-11093-0000-00125-00125-00000-*RAKF*\n//TRKF120  JOB 1,'RAKF 1.2',MSGLEVEL=1,CLASS=A\n//*\n//* JCLIN for RAKF 1.2\n//*\n//ASMSEC   EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(ICHSEC00)\n//SYSPUNCH DD  DISP=(,PASS),DSN=&&OBJ(ICHSEC00)\n//ASMRCVT  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(CJYRCVT)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(CJYRCVT)\n//ICHSEC00 EXEC  PGM=IEWL,PARM='MAP,LIST,LET,NCAL,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(ICHSEC00)\n INCLUDE SYSPUNCH(CJYRCVT)\n ENTRY   ICHSEC00\n NAME    ICHSEC00(R)\n/*\n//*\n//ASMUSER  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RAKFUSER)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RAKFUSER)\n//RAKFUSER EXEC  PGM=IEWL,PARM='MAP,LIST,LET,NCAL,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(RAKFUSER)\n ENTRY   CJYRUIDS\n NAME    RAKFUSER(R)\n/*\n//*\n//ASMPROF  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RAKFPROF)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RAKFPROF)\n//RAKFPROF EXEC  PGM=IEWL,PARM='MAP,LIST,LET,NCAL,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(RAKFPROF)\n ENTRY   CJYRPROF\n NAME    RAKFPROF(R)\n/*\n//*\n//ASMPWUP  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RAKFPWUP)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RAKFPWUP)\n//RAKFPWUP EXEC  PGM=IEWL,PARM='MAP,LIST,LET,NCAL,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(RAKFPWUP)\n ENTRY   RAKFPWUP\n NAME    RAKFPWUP(R)\n/*\n//*\n//ASMSFR   EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(ICHSFR00)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(ICHSFR00)\n//ICHSFR00 EXEC  PGM=IEWL,PARM='MAP,LIST,NCAL,LET,RENT,REFR,REUS,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LPALIB\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(ICHSFR00)\n ENTRY   ICHSFR00\n NAME    ICHSFR00(R)\n/*\n//*\n//ASMRIN   EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(ICHRIN00)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(ICHRIN00)\n//ASM130   EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(IGC00130)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(IGC00130)\n//ASM13A   EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(IGC0013A)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(IGC0013A)\n//ASM13C   EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(IGC0013C)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(IGC0013C)\n//ICHRIN00 EXEC  PGM=IEWL,PARM='MAP,LIST,NCAL,LET,RENT,REFR,REUS,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LPALIB\n//SYSPUNCH DD  DISP=(OLD,DELETE),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(ICHRIN00)\n INCLUDE SYSPUNCH(IGC00130)\n INCLUDE SYSPUNCH(IGC0013A)\n INCLUDE SYSPUNCH(IGC0013C)\n ENTRY   ICHRIN00\n ALIAS   IGC0013{\n ALIAS   IGC0013A\n ALIAS   IGC0013B\n ALIAS   IGC0013C\n NAME    ICHRIN00(R)\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "F2": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11V\\x05\\xed\\x05\\xed\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:56:00", "lines": 1517, "newlines": 1517, "modlines": 0, "user": "SAMPLIB"}, "text": "./ ADD NAME=$$$$$DOC 0125-91017-91070-1453-00312-00046-00000-*-ESG-*\n             INTRODUCTION TO THE ESG SECURITY SYSTEM\n\n                          (This documentation was prepared by\n                           Sam Golob.\n                           Please address questions to the author:\n                              Craig Yasuna, (908) 549-4821   )\n\n      The ESG Security System is a RACF-like interface to the MVS SAF\nfacility.  RACF Version 1.7 facilities are emulated, except for the\nRACF database.  Two tables, the USERID and PROFILE tables, are kept in\nstorage.  The actual security verifications are made by the ICHRTX00\nexit, using these two tables.  The formats of these USERID and PROFILE\ntables are compatible with RACF database entry data.\n\n      In this package, the USERID table is often called the \"UDATA\"\ntable, and the PROFILE table is called the \"PDATA\" table.\n\n      The main practical difference between the effect of this\nproduct and of \"IBM RACF\" on your system is that with this system,\nusers cannot change their passwords or their profiles.  The change is\ndone easily by an administrator.  After a table change (through ISPF\nEdit), a PROC is started to refresh either the user table or the\nprofile table in core.  The administrator does not need to be trained\nmuch, because the system structure is quite simple to maintain, once\nit has been set up initially.\n\n      Protection is achieved by routing all operating system or vendor\nproduct security calls (including RACDEF, RACINIT, and RACHECK)\nthrough an ICHRTX00 RACROUTE interface.  ICHRTX00 contains the real\nverification code.  The ESG Security System is designed to force \"one\npoint of handling\" for all security calls.  ICHRTX00 processes the\nvarious kinds of security calls in a standard way that is (mostly)\ndocumented by IBM.  ICHRTX00 refers to the installation-coded user and\nprofile in-core tables, to make its judgments.  These in-core user and\nresource tables are each reloadable at any time by the execution of\ntheir special started tasks.\n\n      The ESG Security \"one point of handling\" design, allows for more\ncomplete control of the total data center environment.\n\n\nINSTALLATION.\n\n      Installation is achieved through assembling and linkediting the\nCJYR---- assembler programs, the SVC 130, 131, and 133 programs, and\nICHRTX00.  Please reference the member $PARMS to see assembly and\nlinkedit parms.  The SVC 130, 131, and 133 programs need not be placed\nin LPALIB.  They, and ICHRTX00, are linkedited into load module\nCJYRINIT.  (Leave assembly of CJYRINIT for last.)  At security\ninitialization time, the SVCs and ICHRTX00 are dynamically copied into\ngetmained CSA.  (For this reason, any code changes to these modules\nare not allowed to contain relocatable ADCONs whose values are not\ndetermined at assembly time.)\n\n      All programs may reside in a LINKLIST library, and should be\nauthorized.  To complete the installation, 3 procedures should be\ncataloged:  CJYRINIT, CJYRUIDS, and CJYRPROF.  Samples are found in\nthis library as members:  #JYRINIT, #JYRUIDS, and #JYRPROF.  The\nCJYRINIT procedure does not have to be used.  It need only be used if\nthe IEFSSN-- member of SYS1.PARMLIB is not updated with the subsystem\nentry:  SEC,CJYRINIT    (see member IEFSSN00 in this library).  That\nsubsystem entry will initialize the presence of security in the\nsystem, awaiting the execution of the other two procedures.\n\n      If it is desired to initialize the security system as fast as\npossible, the procedures CJYRUIDS and CJYRPROF may be executed in\nSYS1.PARMLIB member IEACMD00, with ,SUB=MSTR.  Care must then be taken,\nthat the datasets pointed to by the INPUT ddnames be CATALOGED IN THE\nMASTER CATALOG, so that they may be found.\n\n      Before the procedures:  CJYRUIDS and CJYRPROF are executed,\nICHRTX00 will issue warning messages (but no access denials) for every\nattempted dataset open.  This should flood the console somewhat.\nThese messages have been provided so that you can properly plan your\nprofile and userid table entries, especially as concerns dataset\naccess.  After the UDATA and PDATA tables have been initialized, these\nmessages will stop.\n\n      A valid SYS1.UADS entry must be present for every TSO userid\nto be used.  CICS users are defined by the security USERID table only.\nThe CICS signon table should be coded with only a default entry (see\nour sample).  Members DFHPCT, DFHSIT, and DFHSNT in this library\ndescribe sample settings for these respective CICS tables.  When\nsecurity is present, passwords coded in UADS will not be used, but the\nones in UDATA will be used.\n\n      Please note that when MVS is informed that \"security\" is present\non the system, ALL PREVIOUSLY DEFINED PASSWORDS, INCLUDING VSAM\nPASSWORDS, ARE IGNORED.  Any password protection must be reinstated by\nthe security system.  Evidently, the MVS designers wanted any\npasswords designated by security, not to be interfered with by any\nother password mechanisms in MVS.\n\n      Be informed that the two \"RACF\" fields on the right side of the\nTSO Logon screen, NEW PASSWORD and GROUP IDENT, are ignored by the\nESG Security System.  Also please note that in this version of the ESG\nSecurity System, the RCVT is initialized as RACF Version 1.7, and this\nshould not be changed.\n\n\nSETTING UP AND ENABLING THE USERID AND PROFILE TABLES.\n\n      The way that protection will work on your system is entirely\nup to your control.  Protection depends completely on the way you code\nthe USERID and PROFILE Data Tables.  ESG Security utilizes these\ntables for its protection decisions, instead of using a RACF Database.\nSample tables have been provided.  These MUST NOT be used in your\ninstallation as they are.  They have been made large enough to\n(hopefully) help you code your own tables, but they are only examples.\n\n      In order for both the UDATA and PDATA tables to be valid, THEY\nMUST BE IN SORT ORDER.  Under ISPF Edit, the command \"SORT 1 72\", or\n\"SORT\" is adequate to sort the records correctly (if they were coded\nproperly in the first place).  Sort errors will inhibit initialization\nof the tables and will generate nasty error messages.\n\n      In the PDATA table, DEFAULT, OR \"UNIVERSAL\" ACCESS FOR ANY\nFACILITY OR DATASET MUST BE CODED before any specific access is coded.\nYou code a universal access entry in the PDATA table by leaving the\nuser group field blank.  Then you code other entries for the same\nfacility, specifying different settings for each user group that will\nhave special access (or denial of access) to that facility.\n\n      Generally, only those features included in \"IBM RACF Version 1.7\"\nhave been emulated.\n\n      The author of this system has referred to two RACF Manuals\nduring his planning.  It is important for all users of this package to\nobtain these manuals also.  These are needed in the security\nadministration, which will be ongoing.\n\nThe two manuals are:\n\n\n      SPL RACF           -   Referred to for information how to write\n       (SC28-1343)           macros and return codes.\n\n      RACF Administrator's Guide  -  Has an overview of profiles that\n       (SC28-1340)                   should be used, and their\n                                     structure.\n\n\n      It is necessary to consult the RACF Administrator's Guide to\nunderstand the reason for some of the special facility names in the\nPDATA table, what they mean, and how to use them.  Some of these\nspecial names are:  \"FACILITY\" (with particular dataset-like special\nkeywords, such as IEAABD.DMPAUTH, STGADMIN.*, or IEC.TAPERING, etc.),\nand PROPCNTL (which suppresses userid propagation).  It is really\nnecessary to study the manual in order to control many parts of system\nprotection properly.  One need also study the manual to understand\nAPPL security.\n\n      An example of the USERID table may be found in the member,\nCJYUDATA.  An example of the PROFILE table may be found in the member,\nCJYPDATA.  It is hoped that enough data is provided in these examples\nto give a working knowledge for further coding and setting up.\n\n      Please be informed that IN CORE, THESE TABLES WILL BE READ FROM\nTHE BOTTOM UPWARDS.\n\n\n      USERDATA is coded as follows:\n\n  Cols   1 -  8         USERID (TSO, CICS, or whatever application)\n  Cols  10 - 17         User Group   (Installation defined)\n  Col   18              Asterisk '*' to denote that multiple user\n                         groups exist for this userid.\n                         Otherwise blank.\n  Cols  19 - 26         Password\n  Col   28              Operation Authority  (Y or N)   If \"Y\", then\n                         access is always granted to this user unless\n                         it is denied explicitly.\n  Col   31 - 50         Comment field (ignored by ESG Security but\n                         used by \"IBM RACF\").\n  Cols  51 - 80         Ignored\n\n\n      PROFILE DATA is coded as follows:\n\n  Cols   1 -  8         Facility title: (APPL, DASDVOL, DATASET, etc.)\n                         See the RACF Administrator's Guide.  You\n                         need to know the different facility types\n                         used by the operating system, CICS, TP\n                         products, and vendor products.\n  Cols   9 - 52         Dataset Name, or Generic Name, or Name to be\n                         protected.  (Generics are achieved using\n                         the asterisk '*'.  See the examples.)\n  Cols  53 - 60         User Group Id  (Installation defined)\n                         Blanks in this field denote universal access\n                         rules for this resource.\n  Cols  61 - 66         Permission Level (NONE, READ, UPDATE, ALTER)\n  Cols  67 - 72         Blank\n\n\n      I must reemphasize that your security protection is completely\ndependent on how you code these tables.  Please get most of your\nknowledge from the RACF Administrator's Guide.\n\nMORE REMARKS.\n\n      In order for CICS users and transactions to be protected,\nentries need to be made in the SIT, PCT, and SNT tables.  See the\nincluded DFH--- members, and refer to the appropriate CICS manuals.\nBasically, the parameter \"EXTSEC=YES\" (meaning that external security\nis turned on) has to be coded in these entries.  The CICS Signon Table\nshould only contain one default entry.  All users will be granted\nadmission or denial through the security system's UDATA table.  In our\nPDATA member, the proper FACILITY NAME has to be used for each\ntransaction protected under CICS.  Our sample facility name is\nTD1XXTRN, which was set up in the SIT's XTRAN parameter as\nXTRAN=D1XXTRN.  (See our sample member DFHSIT.  CICS itself supplies\nthe initial \"T\" in the facility name.)\n\n      To protect other products, they must have an interface to the\nsecurity system.  For example, a PANVALET exit was used to regulate\naccess to PANVALET library members.  This exit may be obtained as a\nsample exit from Pansophic Systems, the vendor for the Panvalet\nproduct.  The name of their sample is \"PVRACF\".\n\n      I have to say a word about userids in the UDATA table that were\nset up with MULTIPLE GROUP ENTRIES.  These will get the highest\nauthority for all protected objects in all the groups.  As a practical\nexample, multiple groups are used for managers who oversee the work of\nseveral programming groups.  The multiple group arrangement gives these\nmanagers access to everything done by all the groups under them.\n\n      Batch jobs and STCs are controlled as follows:  All batch jobs\ndefault to a userid of PROD and a user group of PRDGROUP.  Started\ntasks are forced a userid of STC and a user group of STCGROUP.  This\ndefault is imposed by ICHRTX00.  Any job that has no userid connected\nto it is assigned a userid of PROD and a user group of PRDGROUP by\nICHRTX00.  That situation is true for jobs submitted by RJE, by NJE,\nor by a local (card) reader.  The specific authority of PRDGROUP and\nSTCGROUP is controlled by the PDATA table.\n\n      Upon initial setup of the security system, PRDGROUP can be given\nrather broad powers.  According to the default coding of ICHRTX00,\nPRDGROUP is given Operations Authority, which means that any resource\nNOT SPECIFICALLY EXCLUDED, is granted to PRDGROUP.  (Operations\nauthority may be taken away from PRDGROUP by a simple coding change.\nFind label PRODUID in ICHRTX00.  Change the last C'Y' to C'N'.)\n\n      The security system AS DELIVERED, does the following.  All STC's\nthemselves have a userid of STC, Operations Authority, and any powers\ngranted to STCGROUP in the PDATA member.  However, the PDATA member\n(as delivered) has a special entry of \"PROPCNTL STC\".  This entry has\nthe effect of suppressing userid propagation of the userid \"STC\" from\nany job that a started task submits.  The job submitted by a started\ntask then has NO USERID attached to it.  But ICHRTX00 goes and assigns\nall jobs with NO USERID, a default userid of PROD and a default user\ngroup of PRDGROUP (as we have stated).  So STC's will have different\nauthority than the jobs they submit.  This can be regulated as the\ninstallation desires, usually by granting STC's more authority than\nproduction jobs.\n\n      That is the state of affairs if the default arrangement is\nfollowed.  A suggestion for shops who want to better regulate batch\njobs has been advanced by IBM itself.  It will work under the ESG\nSecurity System, because the ESG Security System follows IBM\nspecifications, and uses the documented SAF interface faithfully.\n\n      The installation (after initial install) may later choose to do\nthe following:  Turn off Operations Authority from PROD in ICHRTX00\n(as described above).  In PDATA, give the PRDGROUP very little power.\nThen, require all batch jobs to use the \"USER=\" and \"PASSWORD=\"\nparameters in the JOB card.  This has to be planned carefully.\nPerhaps, one initial userid, with the same power as the PROD userid\nused to have, could be assigned.  In any case, appropriate userids and\nuser groups must already be in place in the PDATA member, to immediately\nhandle protection of the regulated batch jobs.\n\n      Then, the installation can plan to split the jobs into more\nuser groups with separate userids that are more finely regulated.\nPerhaps at first, Operations Authority could be granted to these batch\nuserids.  That extra margin of authority might later be taken away\nafter their requirements have been further refined and evaluated.\n\n\nFURTHER COMMENTS.  EASE OF CONVERSION TO IBM RACF.\n\n      I want to tell you that this product can be used as a precursor\nto \"IBM RACF\" installation.  By itself, this product is perfectly\nadequate for many shops.  However, a shop where this product was\nrunning was converted to IBM RACF, and the tables were compatible.\nThe following was done:\n\n      In the PDATA member:\n\n  ADDSD   was done for cards denoting \"universal access\" for DATASETs.\n  PERMIT  was done for cards denoting  special access    for DATASETs.\n  RDEFINE was done for cards referencing a FACILITY other than datasets.\n  PERMIT  was done for cards denoting  special access    for facilities\n      other than datasets.\n\n      Only minor format changes to the PDATA card images were\nnecessary, to put them into a form that was runnable in a CLIST.\n\n      In the UDATA member:\n\n  ADDUSER was done for cards denoting any user.\n  CONNECT was done for cards denoting multiple group membership for\n      one user.\n\n      Only minor format changes to the UDATA card images were\nnecessary, to put them into a form that was runnable in a CLIST.\n\n      A small RACF exit had to be written to allow preassignment of\nuserids and passwords for batch jobs, NJEs and RJEs.\n\n      For more help, please refer to the RACF Administrator's Guide.\n\n      Good luck.\n./ ADD NAME=$$$$CUST 0200-11093-11093-0000-00087-00087-00000-*RAKF*\n                   RAKF 1.2.0 Customization Instructions\n                   =====================================\n\nThis document describes the steps to customize and activate RAKF 1.2.0\nafter the basic SMP4 installation has been completed.\n\n1. Allocate a PDS named SYS1.SECURE.CNTL (LRECL=80). This PDS will\n   contain 2 members:\n\n   o USERS:    The RAKF users table\n   o PROFILES: The RAKF profiles table\n\n   If you've already allocated this library in an earlier version of\n   RAKF you can continue to use it. The name of the library has to be\n   SYS1.SECURE.CNTL. Although it could be changed this has to be done\n   in several locations and will for the sake of simplicity not be outlined\n   in these instructions.\n\n2. If you're a first time RAKF user copy the following members from\n   HLQ.SAMPLIB to SYS1.SECURE.CNTL:\n\n   o MINUSR using a new name of USERS\n   o MINPRF using a new name of PROFILES\n\n   This establishes a minimal configuration equivalent to an unprotected\n   system with IBMUSER being defined as the only user. IBMUSER has\n   operations priviledge allowing all accesses.\n\n   If you are running Volker's TK3 (Turnkey MVS) system you can use\n   TK3USR instead of MINUSR which defines besides IBMUSER also the\n   users HERC01, HERC02, HERC03 and HERC04 with equivalent attributes\n   as they are defined in UADS. Note, however, that RAKF doesn't allow\n   users having no password. For this reason IBMUSER, HERC01 and HERC03\n   have a password of NONE defined instead of no password as in TK3.\n\n   Note that each TSO user still needs an UADS entry to define the TSO\n   authorizations JCL, MOUNT, OPER and ACCOUNT. These are not covered\n   by RAKF's users table.\n\n3. Issue the command\n\n   S RAKF\n\n   at the MVS console and reply YES to message RAKF002A. Verify that\n   the profiles and users tables initialize correctly and that you can\n   logon using the usernames and passwords from SYS1.SECURE.CNTL(USERS).\n\n   Note Although the RAKF procedure loads the in-core users and profiles tables\n   ==== it is not primarily intended to be used for that purpose during normal\n        operations. To routinely update the profiles or user table to activate\n        changes the procedures RAKFPROF or RAKFUSER should be used as outlined\n        in $$$$$DOC (this document is the unmodified \"INTRODUCTION TO THE ESC\n        SECURITY SYSTEM\" dated 1991 where these procedures are called CJYRPROF\n        and CJYRUIDS, respectively).\n\n        The main purpose of the RAKF procedure is to provide a means to activate\n        RAKF if initialization didn't take place automatically at IPL time, for\n        example during installation and customization. If the RAKF procedure is\n        run when RAKF had been activated already it will skip the initialization\n        and refresh the in-core users and profile table, which is equivalent to\n        running RAKFPROF and RAKFUSER.\n\n4. To enable automatic initialization of RAKF at system IPL time\n   (highly recommended!) MSTRJCL needs to be modified to contain DD\n   statements pointing to the users and profiles tables:\n\n   //RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),\n   //            DISP=SHR\n   //RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),\n   //            DISP=SHR\n\n   Member ZJW0003 of HLQ.SAMPLIB provides a sample USERMOD accomplishing this.\n   If ZJW0003 fits your system just submit it. If not use any other\n   method of your choice to add the required DD cards.\n\n5. Edit SYS1.PARMLIB(RAKFINIT) and change the value NO in line 1 to ASK.\n   Then reIPL the system. Message RAKF002A will now be issued immediately\n   after master scheduler initialization and give you the choice to start\n   RAKF or not.\n\n6. Start now modifying your USERS and PROFILES tables until the desired\n   level of protection is reached. Please read also member $$$$M38J for\n   additional considerations.\n\n7. Once you're satisfied with your configuration change line 1 in\n   SYS1.PARMLIB(RAKFINIT) from ASK to YES which will cause RAKF to be\n   activated unconditionally during IPL.\n./ ADD NAME=$$$$INFO 0200-11093-11093-0000-00113-00113-00000-*RAKF*\n*\n*    See members $$COPYRT and $$NOTICE in this library.\n*\n**********************************************************************\n*                                                                    *\n*    RAKF is based on the ESG Security System                        *\n*    written by Craig J. Yasuna               (Mar 1991)             *\n*    adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)             *\n*                         Phil Roberts        (Apr 2011)             *\n*                         Juergen Winkelmann  (Apr 2011)             *\n*                                                                    *\n**********************************************************************\n*\n*    The installation instructions in $$$$$DOC are not current.\n*    Installation is performed through the standard SMP4 RECEIVE,\n*    APPLY, ACCEPT procedure as outlined in member $$$$INST of this\n*    library which is also part of the installation JCL library created\n*    when running initial job RAKF12 according to the documentation\n*    accompanying the distribution tape. After installation RAKF\n*    is inactive. Member $$$$CUST of this library describes the\n*    steps to customize and activate it.\n*\n*    For information on operational aspects specific to MVS 3.8j\n*    refer to member $$$$M38J. It should be noted that usage of the\n*    ZAPs to MVS security processing outlined in $$$$M38J should be\n*    avoided by all means. They are provided as a courtesy to help\n*    in cases where RACF indication of the whole system is not feasible\n*    but they are not meant to be a permanent solution.\n*\n*    Member $$$$RMVE contains information on how to remove RAKF from\n*    the system by reinstating the standard MVS versions of SVCs 130-133\n*    and the ICHSEC00 initialization program. It should be noted, however,\n*    that deinstalling RAKF isn't a standard procedure to be performed\n*    routinely as it can lead to a total lock out from the system or\n*    even to a system being no longer IPLable. The recommended way is to\n*    let RAKF be installed and active and replace the profiles table\n*    by the minimum table MINPRF from this library. This enables ALTER\n*    access by everyone to everything and thus is equivalent to a\n*    vanilla MVS system without RAKF.\n*\n*    For information on configuring the PROFILES and USERS tables\n*    and other operational aspects of this software refer to\n*    member $$$$$DOC.\n*\nVersion History\n===============\n\nESG Security System (March 1991):\n---------------------------------\nThe ESG Security System was published by Craig J. Yasuna as an alternative to\nIBM's RACF and similar products. It uses the ICHRTX00 security router exit to\ncommunicate it's security decisions to MVS. ICHRTX00 is a user exit of the SAF\nrouter ICHSFR00.\n\nRAKF \"RAcK oF\" Security System (August 2005):\n---------------------------------------------\n\nRAKF was published by A. Philip Dickinson as an adaption of the ESG Security\nSystem to MVS 3.8j. The ESG Security doesn't natively support MVS 3.8j for\nseveral reasons. The major ones are:\n\no At MVS 3.8j times the SAF router ICHSFR00 was part of the RACF product and\n  thus not a available on MVS systems without RACF being installed. So the\n  ICHRTX00 exit as a convenient place for third party security products to hook\n  into the SAF didn't exist.\n\no incompatible ACEE handling.\n\no The ESG Security System uses the BAS instruction which is not available\n  in S/370.\n\no ESG Security's 24/31 bit AMODE handling wasn't compatible with the usage of\n  high order address bytes for flags in MVS 3.8j.\n\no incompatible parameter lists of RACROUTE, RACDEF, RACHECK and RACINIT.\n\no handling of in core profiles incompatible with MVS's VSAM catalog management.\n\nPhil D. converted ESG Security's ICHRTX00 router exit into an ICHSFR00 SAF\nrouter to overcome the first major incompatibility. He also solved the next two\npoints and in parts the 24/31 bit AMODE issues. The rest remained undetected\nwhen he published his work and caused several problems when using RAKF on\nMVS 3.8j:\n\no Arbitrary 0C4 abends during RACINIT and RACDEF processing. The most\n  severe of these abends is the \"initiator blowout\" mentioned in\n  http://tech.groups.yahoo.com/group/H390-MVS/message/10015.\n\no Arbitrary 0C4 abends and FREEMAIN errors during RACHECK processing\n  of VSAM catalogs and objects. These problems are discussed in\n  http://tech.groups.yahoo.com/group/H390-MVS/message/11811.\n\no Arbitrary invalid authorization decisions: Access denied if it\n  should have been granted and access granted if it should have been\n  denied. The latter in a way that with some trial and error any user\n  is able to acquire ALTER access to any dataset in the system.\n\nRAKF 1.2.0 (April 2011):\n------------------------\n\nWhen the above mentioned problems became visible and identified as being\nRAKF caused in several MVS 3.8j environments it turned out that Phil D's RAKF\nsource wasn't accessible any more (lost in a package crate from moving). Phil\nRoberts (\"halfmeg\") stepped in and reconstructed the source by disassembling\nPhil D's binary RAKF distribution and comparing it with the original source of\nthe ESG Security System. Based on that reconstructed source the rest of the\nincompatibilities listed above were identified and corrected by Juergen\nWinkelmann.\n\nTo avoid another loss of the source to occur an additional effort has been made\nto clean up the source to a publishable state and to provide an SMP4 compatible\nsource distribution enabling RAKF installation through the well known SMP 4\nstandard RECEIVE, APPLY, ACCEPT procedure.\n./ ADD NAME=$$$$INST 0200-11093-11093-0000-00077-00077-00000-*RAKF*\n                    RAKF 1.2.0 Installation Instructions\n                    ====================================\n\nThis document describes the steps to install RAKF 1.2.0.\n\nThe installation is performed through the standard SMP RECEIVE, APPLY and\nACCEPT procedure. The process has been tested with SMP level 04.48 which\nis the level provided by the Turnkey 3 MVS system. This presumably is equivalent\nto having PTFs UR13349, UR15994, UR17644 and UR19590 applied. Tests have\nshown that APPLY processing doesn't work reliably at lower levels: For\nexample at level 04.44 APPLY doesn't assemble and link all modules. So\nbefore starting please update your SMP as close to level 04.48 as possible.\n\n1. Edit jobs A@PREP, C@APPLY and D@ACCPT:\n\n   o change all occurances of HLQ to the desired high level qualifier\n     for the RAKF libraries, e.g. RAKF, RAKF.V1R2M0, etc. Please note\n     that HLQs where HLQ.SAMPLIB, HLQ.ASAMPLIB, HLQ.APROCLIB, HLQ.APARMLIB\n     HLQ.MACLIB, HLQ.AMACLIB, HLQ.SRCLIB or HLQ.ASRCLIB already exist\n     are not recommended.\n   o change all occurances of dddddd to the desired volume for the\n     RAKF distribution libraries.\n   o change all occurances of ssssss to the desired volume for the\n     RAKF target libraries.\n   o change all occurances of tttt to the device type and all occurances\n     of rrrrrr to the volume of the sysres device where SYS1.LPALIB and\n     SYS1.LINKLIB of the system reside on which RAKF is to be installed.\n     (If you are running TK3 MVS and install on your current system the\n     device type is 3350 and the volume is MVSRES.)\n\n   Verify that in jobs C@APPLY and D@ACCPT the sequence of the SYSLIB and\n   the target and distribution library DD statements matches your\n   SMPAPP and SMPACC procedures. The jobs have been tested with the\n   SMP procedures as defined in Volker's MVS TK3 system. If the sequence\n   of DD statements in the SMP procedures in your system doesn't match\n   the sequence of the overriding DD statements in C@APPLY and D@ACCPT\n   RAKF elements may erroneously be placed in SYS1.ASAMPLIB, SYS1.SAMPLIB,\n   SYS1.APROCLIB, SYS1.APARMLIB, SYS1.AMACLIB or SYS1.MACLIB instead of\n   their HLQ.xxxxLIB counterparts.\n\n2. Submit job A@PREP. This job performs the following actions to prepare\n   your system for RAKF 1.2.0 installation:\n\n   o Delete MODs and LMODs that are defined in MVS 3.8j as placeholders for\n     RACF modules from SMP's target and distribution zones.\n   o Delete the placeholder modules as well as potentialy installed\n     pre RAKF 1.2.0 modules from SYS1.LINKLIB and SYS1.LPALIB.\n   o Allocate RAKF 1.2.0 target and distribution libraries.\n\n3. Receive RAKF by submitting job B@RECV. Be prepared to mount the RAKF\n   distribution tape rakf12.aws after submitting the job.\n\n4. Apply RAKF by submitting job C@APPLY.\n\n5. Accept RAKF by submitting job D@ACCPT. This step can be skipped if\n   you don't want to accept the sysmod now. It is, however, strongly\n   recommended to accept it as only then it will be possible to \"test\n   drive\" updates that might be published later and to return to the\n   previous state in case of problems.\n\n6. Perform an IPL CLPA of your system. The system will come up with all\n   RAKF elements installed but without activating RAKF. Successful\n   installation can be verified from the RAKF banner being displayed\n   at the beginning of the IPL and by checking the system's SVC table\n   for example using menu option T in IMON and scroll forward to the\n   RACF SVCs (130 - 133) which should show entries like this:\n\n   130 82 00EAEB30 3/4        RACHECK    -RACF IGC00130 RAKF  mm/dd/yy\n   131 83 00EAEB52 3/4 YES    RACINIT    -RACF IGC0013A RAKF  mm/dd/yy\n   132 84 00EAEB74 3/4 YES    RACLIST    -RACF ICHRIN00 DUMMY mm/dd/yy\n   133 85 00EAEB9A 3/4 YES    RACDEF     -RACF IGC0013C RAKF  mm/dd/yy\n\n   where mm/dd/yy is RAKF's installation date.\n\n7. Consult member $$$$CUST in HLQ.SAMPLIB for information on how\n   to customize and activate RAKF and member $$$$INFO for various\n   other aspects around RAKF usage and background informations.\n./ ADD NAME=$$$$M38J 0200-11093-11093-0000-00158-00158-00000-*RAKF*\n              RAKF 1.2.0 Usage Considerations for MVS 3.8j\n              ============================================\n\nThe implementation of calls to the security system in MVS 3.8j to\nprotect datasets greatly relies on the concept of indication: Only\ndatasets having their \"RACF indicator\" set on are reliably protected.\nThe RACF indicator is a bit in the type 1 DSCB of a none VSAM dataset\nor in the catalog entry of a VSAM object. Once activated RAKF ensures\nthat all newly created datasets, catalogs and VSAM objects have their\nRACF indicator turned on. But this is typically not the case for\nalready existing ones. So it is strongly recommended to manually\nturn the RACF indicator on for all datasets, catalogs and VSAM objects\nthat already existed before RAKF activation. It should also be noted\nthat once the whole system is RAKF protected (i.e. the RACF indicator\nis on for all datasets, catalogs and VSAM objects) it is no longer\nfeasible to run it without RAKF being active as most accesses will then\nbe denied.\n\nFirst time users of RAKF might have a problem instantly RACF indicating\nall datasets in the system. Also there might be users needing to protect\nonly none VSAM datasets (i.e. don't need catalog and/or VSAM object\nprotection). For those users a set of ZAPs to the MVS modules handling\nnone VSAM datasets is provided that enforce calls to RAKF for all none\nVSAM datasets, not only for those with RACF indicator turned on. So the\neasiest way to get some basic protection on the system is to simply\ninstall RAKF together with the MVS ZAPs and you're all set.\n\nIt should be noted, however, that this constitutes a massive change of logic\nflow in the modules ZAPed. There exist complex interactions between VSAM\ncatalog management and the DADSM functions modified by the ZAPs. So, while\nintensive testing has shown that these ZAPs together with correctly defined RAKF\nDATASET and DASDVOL profiles provide reliable protection for none VSAM datasets,\nthey partly break VSAM catalog management. An artefact of this situation is\nthat with applied ZAPs an IDCAMS \"DELETE CLUSTER\" command of a VSAM cluster that\nhasn't been allocated with the SUBAL option ends with CC=0 but leaves the data\nand index dataspaces of this cluster orphaned on disk. Phil Roberts has found\na workaround which allows to delete these orphaned VSAM components from disk\nwhich is cited here to help in case this problem occured:\n\nPhil wrote:\n\n\"I have tinkered some and have a work around for the situation where a\nVSAM dataset may get orphaned due to a mixed environment. It doesn't\ntake any outside utilities.\n\nBasically if a VSAM cluster is deleted while running with the MVSZAPs\n(not recommened operation but perhaps necessary for some) one can:\n\n- DELETE hlq.vsam.name NOSCR\n- CDSCB hlq.vsam.name.data DSORG(PS) VOL(xxxxxx) RACF\n- CDSCB hlq.vsam.name.index DSORG(PS) VOL(xxxxxx) RACF\n- RPF 3.4 with hlq and VOL xxxxxx to C CATALOG then D to delete the\n  orphaned components from pack xxxxxx\"\n\nThis example illustrates why it is strongly recommended to use the\nMVS ZAPs only temporary, during a phase while working to RACF indicate\nthe whole system, and to remove them as soon as possible.\n\nThe following table gives an overview on the influence of the ZAPs in a few\nscenarios and should help to decide whether to use them or not:\n\n                                     -------------------------------------\n                                     ! All datasets  !                   !\n                                     ! VSAM objects  ! System has mixed  !\n                                     ! and catalogs  ! indication status !\n                                     ! are indicated !                   !\n                                     !---------------!-------------------!\n                                     !       !       !  VSAM  !  NVSAM   !\n                                     !       !       !-------------------!\n                                     ! VSAM  ! NVSAM !  i ! n !  i ! n   !\n                                     !       !       !  n ! o !  n ! o   !\n                                     !       !       !  d ! t !  d ! t   !\n-------------------------------------!-------!-------!----!---!----!-----!\n!      ! Reliable protection         !   Y   !   Y   !  Y ! N !  Y ! Y   !\n!    Z !-----------------------------!-------!-------!----!---!----!-----!\n!    A ! Reliable catalog management !   N   !   Y   !  N ! N !  Y ! Y   !\n!    P !-----------------------------!-------!-------!----!---!----!-----!\n!      ! Catalog protection          !   Y   !   Y   !  Y ! N !  Y ! N   !\n-------------------------------------!-------!-------!----!---!----!-----!\n!      ! Reliable protection         !   Y   !   Y   !  Y ! N !  N ! N   !\n!    Z !-----------------------------!-------!-------!----!---!----!-----!\n! No A ! Reliable catalog management !   Y   !   Y   !  Y ! Y !  Y ! Y   !\n!    P !-----------------------------!-------!-------!----!---!----!-----!\n!      ! Catalog protection          !   Y   !   Y   !  Y ! N !  Y ! N   !\n--------------------------------------------------------------------------\n\nIt should be noted that in a mixed environment without ZAPs even indicated\nnone VSAM datasets aren't reliably protected, that's not a typo! The table\nshows clearly that one should by all means try to reach the \"not ZAPed and\nfully indicated\" configuration because this is the only one to provide full\nprotection without introducing risky changes to basic system functionality.\n\nThe following steps describe the installation and removal of the MVS ZAPs:\n\n1. Run job LPABACK: In step 2 you'll ZAP MVS modules IFG0194A,\n   IGC0002I, IGC00030 and IGG0553A. These modules are typically located\n   in SYS1.LPALIB but they might also be elsewhere in LPALIST or\n   LINKLIST. Job LPABACK copies these modules and their aliases to a\n   backup library... just in case you want to revert to the non-ZAPed\n   versions later. Find out where these modules reside on your system\n   and change SYS1.LPALIB in job LPABACK to the name of that library.\n   If you want to use another name for the backup library than\n   RAKF.LPALIB.BACKUP then change that name too at the location\n   indicated by a comment in the JCL. Then submit the job and check\n   that the library has been created correctly. It should contain 4\n   members and 17 aliases.\n\n2. Run job ZAPMVS38: This job applies the MVS ZAPs. If necessary\n   change the //SYSLIB DD statement to the name of the library where\n   IFG0194A, IGC0002I, IGC00030 and IGG0553A reside. If module\n   IFG0194A has already been ZAPed as recommended in Phil D's\n   original rakf.pdf installation procedure then comment out the 6 ZAP\n   statements indicated by the respective comment in the job. Run the\n   job and verify that the ZAPs where successful.\n\n   If any of the ZAPs failed your system isn't at a service level\n   compatible with the ZAPs. The ZAPs were tested with the following\n   PTF levels of the ZAPed modules:\n\n   o IFG0194A PTF UZ74083\n   o IGC0002I PTF UZ68267\n   o IGC00030 PTF UZ63439\n   o IGG0553A PTF UZ63439\n\n   This is the level of Volker's Turnkey 3 system. If you're using\n   other PTF levels most probably the ZAPs need to be reworked to\n   reflect at least the correct addresses of the ZAPed instructions.\n\n   After having run job ZAPMVS38 successfully your system is ready to\n   use with RAKF 1.2.0 for basic none VSAM dataset protection.\n\n3. Restore job LPAREST: If you want to remove the MVS ZAPs... job\n   LPAREST copies the modules backed up in step 1 by job LPABACK back\n   to their original locations. If you adjusted dataset names in\n   LPABACK make analogous changes in LPAREST before running it. Please\n   note that Phil D's original OPEN processing ZAP is still applied\n   after running LPAREST if it was already applied before running\n   LPABACK. So, if you want to get rid of that ZAP too which is strongly\n   recommended, you need to find another source to restore IFG0194A and\n   it's aliases from (hopefully you backed them up before applying Phil D's\n   ZAP).\n\nFinally it should be emphasized that although RAKF now works mostly as it is\nsupposed to the protection of your system is only as good as your resource\nprofile definitions are. Consult the RAKF 1.7 manuals for details; Phil R\nhas kindly scanned SPL: RACF SC28-1343-2 and posted it to the H390-MVS\nYahoo group at http://tech.groups.yahoo.com/group/H390-MVS/message/11648.\nThis manual provides a good insight on how RACF was supposed to work at\nthat time and RAKF now behaves mostly the same way. Member $$$$$DOC is a good\nsource of information on RAKF's ressource definition logic which is still the\nsame as it was with the ESG Security system.\n\nSpecial attention should be given to the fact that RAKF allows ALTER\naccess to all undefined resources. Thus, for example, a user can delete any\ndataset on any volume even if access NONE is defined for the dataset as\nlong as there is no DASDVOL profile defined: ALTER access to a DASD allows\nscratching of any file on it regardless of the file's protection and\nexactly that's what a user gets if no DASDVOL is defined.\n./ ADD NAME=$$$$RMVE 0200-11093-11093-0000-00078-00078-00000-*RAKF*\n                   RAKF 1.2.0 Deinstallation Instructions\n                   ======================================\n\nThis document describes the steps to deinstall RAKF 1.2.0 and\nreinstate native MVS security behavior.\n\n /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!\n \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\n\nDEINSTALLING RAKF IS NOT RECOMMENDED!\n\nAfter deinstallation RACF indicated files will no longer be\naccessible. This may lead to a not IPLable or not accessible\nsystem. Removing RAKF and reinstating native MVS security\nbehavior is NOT RECOMMENDED unless in preparation the RACF\nindicator of all non VSAM datasets, VSAM catalogs and VSAM\nobjects has been turned off.\n\nThe RECOMMENDED WAY instead of deinstalling RAKF is to let it\nbe installed and active and replace the profiles table by the\nminimum table MINPRF from this library. This enables ALTER\naccess by everyone to everything and thus is accesswise\nequivalent to a vanilla MVS system without RAKF.\n\nDEINSTALLING RAKF IS NOT RECOMMENDED!\n\n /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!\n \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\n\nThe following instructions assume that you've read the above\nrecommendation and understood the consequences of removing RAKF\nfrom your system. Continue at your own risk:\n\n1. If you've applied the MVS ZAPs using job ZAPMVS38 consult member\n   $$$$M38J on how to remove these ZAPs. The ZAPs MUST be removed\n   prior to deinstalling RAKF otherwise the system will not be\n   accessible or will not even IPL after the deinstallation.\n\n2. Copy members $$$$RMVE (this instruction), $$$$INST, C@APPLY,\n   RAKFRMV and RAKF2MVS from your RAKF SAMPLIB to a private library.\n   Work with these copies throughout the following steps as the RAKF\n   libraries will be deleted! The jobs to be edited and submitted in\n   the course of this procedure have been prepared under the assumption\n   that the libraries to be deleted or modified can be located through\n   the standard catalog search order. If this is not the case look\n   thoroughly through the JCL to be sure to add VOL and/or UNIT parameters\n   to the DD statements to correctly identify the libraries.\n\n3. a) If RAKF SYSMOD TRKF120 has been APPLIed but not ACCEPTed,\n      edit installation job C@APPLY:\n      o change all occurances of HLQ to the high level qualifier of your\n        RAKF libraries, e.g. RAKF, RAKF.V1R2M0, etc. and verify the\n        correct sequence of the overiding DD statements against your\n        SMPAPP procedure as described in $$$$INST.\n      o change the command \"APPLY S(TRKF120) DIS(WRITE)\" in line 30 to\n        read \"RESTORE S(TRKF120) DIS(WRITE)\".\n      Submit changed job C@APPLY to remove all RAKF components from\n      your system.\n\n   b) If RAKF SYSMOD TRKF120 has been ACCEPTed, edit job RAKFRMV:\n      o change all occurances of tttt to the device type and all occurances\n        of rrrrrr to the volume of the sysres device where SYS1.LPALIB and\n        SYS1.LINKLIB of the system reside from which RAKF is to be deleted.\n        (If you are running TK3 MVS and delete from your current system the\n        device type is 3350 and the volume is MVSRES.)\n      Submit changed job RAKFRMV to remove all RAKF components from\n      your system.\n\n4. Review the DD statements pointing to SYS1.LINKLIB and SYS1.LPALIB in\n   job RAKF2MVS and add VOL and/or UNIT parameters if necessary. Change\n   all occurances of HLQ to the high level qualifier of your RAKF libraries.\n   Submit the job which concludes the deinstallation procedure.\n\nThe system libraries as well as SMP are now reverted back to native MVS\nsecurity. Before activating this configuration through an IPL CLPA make\nsure that no dataset needed for IPL is RACF indicated.\n./ ADD NAME=$$COPYRT 0102-91017-91023-1151-00018-00016-00000-*-ESG-*\n*\n*    SEE MEMBER $$NOTICE IN THIS LIBRARY.\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n./ ADD NAME=$$NOTICE 0200-91017-11097-1847-00047-00019-00000-*RAKF*\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n*    THIS PRODUCT IS NOT \"PUBLIC-DOMAIN\", BUT ITS AUTHOR HAS GIVEN   *\n*    PERMISSION THAT IT BE DISTRIBUTED ON THE CBT MVS MODS TAPE.     *\n*                                                                    *\n**********************************************************************\n*\n* From: Yasuna, Craig\n* Sent: Thursday, April 07, 2011 6:47 PM\n* To: Winkelmann Juergen\n* Subject: RE: Question concerning the ESG Security System\n*\n* Absolutely ... I am very glad that the code still lives on and that it\n* has value.\n*\n* THANKS!!! - Craig\n*\n* -----Original Message-----\n* From: Winkelmann Juergen [mailto:winkelmann@id.ethz.ch]\n* Sent: Thursday, April 07, 2011 12:46 PM\n* To: Yasuna, Craig\n* Subject: Question concerning the ESG Security System\n*\n* . . .\n*\n* Phil Roberts reconstructed Phil Dickinson's changes to the original\n* ESG source through disassembly and compare. Based on that source I\n* finalized Phil D's work and now have RAKF fully working on MVS 3.8j.\n* I'm still in a final testing phase. After having finished this, I'd\n* like to post RAKF to the H390-MVS group and also to submit the changed\n* source back to CBT to avoid it getting lost again. Before doing this,\n* I'd like to ask for your consent as the original author. As far as I\n* understood Phil D asked for the same permission in 2005 but I don't\n* want to just quietly take over from him.\n*\n./ ADD NAME=A@PREP   0200-11093-11093-0000-00080-00080-00000-*RAKF*\n//RAKFPREP JOB (RAKF),\n//             'RAKF Installation',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* Prepare system for RAKF 1.2.0 installation                        *\n//*                                                                   *\n//* Expected return codes: Step UCLIN:  00                            *\n//*                        Step LIBS:   00                            *\n//*                        Step DELETE: 08 or lower                   *\n//* ------------------------------------------------------------------*\n//*\n//* ------------------------------------------------------------------*\n//* Delete MVS stub modules from SMP                                  *\n//* ------------------------------------------------------------------*\n//UCLIN   EXEC SMPAPP\n//SMPCNTL  DD  *\n UCLIN CDS .\n  DEL SYSMOD(EBB1102) MOD(ICHRIN00) .\n  DEL MOD(IEFBR14) LMOD(ICHSEC00) .\n  DEL MOD(ICHRIN00) .\n  DEL LMOD(ICHSEC00) .\n  DEL LMOD(IGC0013{) .\n ENDUCL .\n UCLIN ACDS .\n  DEL SYSMOD(EBB1102) MOD(ICHRIN00) .\n  DEL MOD(ICHRIN00) .\n ENDUCL .\n/*\n//* ------------------------------------------------------------------*\n//* Allocate target und and distribution libraries                    *\n//* ------------------------------------------------------------------*\n//LIBS    EXEC PGM=IEFBR14\n//ASAMPLIB DD  DISP=(,CATLG),DSN=HLQ.ASAMPLIB,VOL=SER=dddddd,\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),\n//             SPACE=(TRK,(15,5,5))\n//SAMPLIB  DD  DISP=(,CATLG),DSN=HLQ.SAMPLIB,VOL=SER=ssssss,\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),\n//             SPACE=(TRK,(15,5,5))\n//AMACLIB  DD   DISP=(,CATLG),DSN=HLQ.AMACLIB,VOL=SER=dddddd,\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),\n//             SPACE=(TRK,(2,1,1))\n//MACLIB   DD  DISP=(,CATLG),DSN=HLQ.MACLIB,VOL=SER=ssssss,\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),\n//             SPACE=(TRK,(2,1,1))\n//ASRCLIB  DD  DISP=(,CATLG),DSN=HLQ.ASRCLIB,VOL=SER=dddddd,\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),\n//             SPACE=(TRK,(30,10,4))\n//SRCLIB   DD  DISP=(,CATLG),DSN=HLQ.SRCLIB,VOL=SER=ssssss,\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=5600),\n//             SPACE=(TRK,(30,10,4))\n//APROCLIB DD  DISP=(,CATLG),DSN=HLQ.APROCLIB,VOL=SER=dddddd,\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),\n//             SPACE=(TRK,(2,1,1))\n//APARMLIB DD  DISP=(,CATLG),DSN=HLQ.APARMLIB,VOL=SER=dddddd,\n//             UNIT=SYSDA,DCB=(RECFM=F,LRECL=80,BLKSIZE=80),\n//             SPACE=(TRK,(1,1,1))\n//* ------------------------------------------------------------------*\n//* Delete MVS stub modules and/or pre-SMP RAKF modules               *\n//* from LINKLIB and LPALIB                                           *\n//* ------------------------------------------------------------------*\n//DELETE  EXEC PGM=IEHPROGM\n//SYSPRINT DD  SYSOUT=*\n//DD1      DD  VOL=SER=rrrrrr,DISP=OLD,UNIT=tttt\n//SYSIN    DD  *\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHSFR00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013A\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013B\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013C\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013{\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHRIN00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=ICHSEC00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFINIT\n/*\n//\n./ ADD NAME=B@RECV   0200-11093-11093-0000-00018-00018-00000-*RAKF*\n//RAKFRECV JOB (RAKF),\n//             'RAKF Installation',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* SMP receive of RAKF 1.2.0                                         *\n//* Expected return code: 00                                          *\n//* ------------------------------------------------------------------*\n//RECEIVE EXEC SMPREC\n//SMPPTFIN DD  DISP=(OLD,KEEP),DSN=TRKF120.F0,\n//             UNIT=(TAPE,,DEFER),VOL=(,RETAIN,SER=RAKF12),\n//             LABEL=(1,SL)\n//SMPCNTL  DD  *\n RECEIVE S(TRKF120) .\n/*\n//\n./ ADD NAME=C@APPLY  0200-11093-11093-0000-00032-00032-00000-*RAKF*\n//RAKFAPLY JOB (RAKF),\n//             'RAKF Installation',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* SMP apply of RAKF 1.2.0                                           *\n//* Expected APPLY step return code: 04 or lower                      *\n//*                                   |                               *\n//*                                    --> resulting from RC=8 in SMP *\n//*                                        generated LINKEDITs.       *\n//*                                                                   *\n//* After successful APPLY continue as outlined in member $$$$INST    *\n//* of the installation JCL-Library, step 5 (Run Job D_ACCPT) to      *\n//* SMP ACCEPT RAKF or step 6 (IPL CLPA) if you want to skip the      *\n//* SMP ACCEPT for now.                                               *\n//* ------------------------------------------------------------------*\n//APPLY   EXEC SMPAPP\n//SYSLIB   DD\n//         DD\n//         DD\n//         DD\n//         DD\n//         DD  DISP=SHR,DSN=HLQ.MACLIB\n//MACLIB   DD  DISP=SHR,DSN=HLQ.MACLIB\n//SAMPLIB  DD  DISP=SHR,DSN=HLQ.SAMPLIB\n//SRCLIB   DD  DISP=SHR,DSN=HLQ.SRCLIB\n//SMPCNTL  DD  *\n APPLY S(TRKF120) DIS(WRITE) .\n/*\n//\n./ ADD NAME=D@ACCPT  0200-11093-11093-0000-00028-00028-00000-*RAKF*\n//RAKFACPT JOB (RAKF),\n//             'RAKF Installation',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* SMP accept of RAKF 1.2.0                                          *\n//* Expected return code: 00                                          *\n//* ------------------------------------------------------------------*\n//ACCEPT  EXEC SMPACC\n//SYSLIB   DD\n//         DD\n//         DD\n//         DD\n//         DD  DISP=SHR,DSN=HLQ.AMACLIB\n//AMACLIB  DD  DISP=SHR,DSN=HLQ.AMACLIB\n//APARMLIB DD  DISP=SHR,DSN=HLQ.APARMLIB\n//APROCLIB DD  DISP=SHR,DSN=HLQ.APROCLIB\n//ASAMPLIB DD  DISP=SHR,DSN=HLQ.ASAMPLIB\n//MACLIB   DD  DISP=SHR,DSN=HLQ.MACLIB\n//SAMPLIB  DD  DISP=SHR,DSN=HLQ.SAMPLIB\n//ASRCLIB  DD  DISP=SHR,DSN=HLQ.ASRCLIB\n//SRCLIB   DD  DISP=SHR,DSN=HLQ.SRCLIB\n//SMPCNTL  DD  *\n ACCEPT S(TRKF120) DIS(WRITE) .\n/*\n//\n./ ADD NAME=LPABACK  0200-11093-11093-0000-00027-00027-00000-*RAKF*\n//LPABACK  JOB (RAKF),\n//             'ZAP MVS for RAKF',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=2048K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//* Backup LPA modules to be ZAPed for RAKF installation              *\n//*                                                                   *\n//* !!! Caution: Refer to member $$$$M38J before running this job !!! *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//BACKUP  EXEC PGM=IEBCOPY\n//LPALIB   DD  DISP=SHR,DSN=SYS1.LPALIB  <== LPA modules to be backuped\n//LPABKUP  DD  DISP=(,CATLG),SPACE=(TRK,(3,1,5)),\n//             UNIT=SYSDA,DCB=*.LPALIB,\n//             DSN=RAKF.LPALIB.BACKUP    <== backup copy of LPA modules\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n COPY INDD=((LPALIB,R)),OUTDD=LPABKUP\n SELECT MEMBER=(IGC0002I,IGG0290A,IGG0300F,IGC00030,IGC0003{,          -\n               IGG03001,IGG03002,IGG0553A,IGG0553F,IFG0194A,IFG0194F,  -\n               IFG0194J,IFG0195G,IFG0204A,IFG0204J,IFG0554A,IFG0554C,  -\n               IFG0554F,IFG0554J,IGG0190A,IGG0550P)\n/*\n//\n./ ADD NAME=LPAREST  0200-11093-11093-0000-00022-00022-00000-*RAKF*\n//LPAREST  JOB (RAKF),\n//             'ZAP MVS for RAKF',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=2048K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//* Restore LPA modules ZAPed for RAKF installation                   *\n//*                                                                   *\n//* !!! Caution: Refer to member $$$$M38J before running this job !!! *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//RESTORE EXEC PGM=IEBCOPY\n//LPABKUP  DD  DISP=SHR,\n//             DSN=RAKF.LPALIB.BACKUP    <== Backup copy of LPA modules\n//LPALIB   DD  DISP=SHR,DSN=SYS1.LPALIB  <== Modules are restored here\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n COPY INDD=((LPABKUP,R)),OUTDD=LPALIB\n/*\n//\n./ ADD NAME=MINPRF   0200-11093-11093-0000-00005-00005-00000-*RAKF*\nDASDVOL *                                                   ALTER\nDATASET *                                                   ALTER\nFACILITY*                                                   ALTER\nTAPEVOL *                                                   ALTER\nTERMINAL*                                                   ALTER\n./ ADD NAME=MINUSR   0200-11093-11093-0000-00001-00001-00000-*RAKF*\nIBMUSER  ADMIN    NONE     Y\n./ ADD NAME=RAKFRMV  0200-11093-11093-0000-00163-00163-00000-*RAKF*\n//RAKFRMV  JOB (RAKF),\n//             'RAKF Removal',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* Remove RAKF 1.2.0                                                 *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*  This job is to be used for RAKF removal only if RAKF is in       *\n//*  ACCEPTed state. If RAKF is APPLIed but not ACCEPTed use the      *\n//*  the SMP command \"RESTORE S(TRKF120)\" instead of this job         *\n//*  to remove it.                                                    *\n//*                                                                   *\n//*  After RAKF removal the system is NOT IPLable until the original  *\n//*  MVS stub modules have been reinstated. Refer to job RAKF2MVS     *\n//*  for reinstating these modules                                    *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*                                                                   *\n//* Expected return codes: Step UCLIN:    00                          *\n//* Expected return codes: Step SCRATCH:  00                          *\n//* ------------------------------------------------------------------*\n//*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from SMP                                     *\n//* ------------------------------------------------------------------*\n//UCLIN   EXEC SMPAPP\n//SMPCNTL  DD  *\n UCLIN CDS .\n  DEL LMOD(ICHRIN00) .\n  DEL LMOD(ICHSEC00) .\n  DEL LMOD(ICHSFR00) .\n  DEL LMOD(RAKFPROF) .\n  DEL LMOD(RAKFPWUP) .\n  DEL LMOD(RAKFUSER) .\n  DEL  MOD(CJYRCVT)  .\n  DEL  MOD(ICHRIN00) .\n  DEL  MOD(ICHSEC00) .\n  DEL  MOD(ICHSFR00) .\n  DEL  MOD(IGC0013A) .\n  DEL  MOD(IGC0013C) .\n  DEL  MOD(IGC00130) .\n  DEL  MOD(RAKFPROF) .\n  DEL  MOD(RAKFPWUP) .\n  DEL  MOD(RAKFUSER) .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$CUST) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$$$INST) .\n  DEL  MAC($$$$M38J) .\n  DEL  MAC($$$$RMVE) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n UCLIN ACDS .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$CUST) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$$$INST) .\n  DEL  MAC($$$$M38J) .\n  DEL  MAC($$$$RMVE) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n/*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from LINKLIB, LPALIB, PARMLIB and PROCLIB    *\n//* ------------------------------------------------------------------*\n//SCRATCH EXEC PGM=IEHPROGM\n//SYSPRINT DD  SYSOUT=*\n//DD1      DD  VOL=SER=rrrrrr,DISP=OLD,UNIT=tttt\n//SYSIN    DD  *\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHSFR00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013A\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013B\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013C\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013{\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHRIN00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=ICHSEC00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PARMLIB,MEMBER=RAKFINIT\n/*\n//\n./ ADD NAME=RAKF2MVS 0200-11093-11093-0000-00101-00101-00000-*RAKF*\n//RAKF2MVS JOB (RAKF),\n//             'back to MVS Security',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* Reinstate MVS security stub modules                               *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\      *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/      *\n//*                                                                   *\n//*  Prior to running this job RAKF has to be removed completely from *\n//*  SMP and system libraries PARMLIB, PROCLIB, LPALIB and LINKLIB.   *\n//*  If RAKF is ACCEPTed use job RAFKRMV to achieve this, if RAKF is  *\n//*  APPLIed but not ACCEPTed run SMP command \"RESTORE S(TRKF120)\" to *\n//*  remove RAKF from the system.                                     *\n//*                                                                   *\n//*  After running RAKF2MVS RACF indicated files will no longer be    *\n//*  accessible. This may lead to a not IPLable or not accessible     *\n//*  system. Removing RAKF and reinstating native MVS security        *\n//*  behavior is NOT RECOMMENDED unless in preparation the RACF       *\n//*  indicator of all non VSAM datasets, VSAM catalogs and VSAM       *\n//*  objects has been turned off.                                     *\n//*                                                                   *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\      *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/      *\n//*                                                                   *\n//*                                                                   *\n//* Expected return codes: Step UCLIN:    00                          *\n//*                        Step SCRATCH:  00                          *\n//*                        Step ICHSEC00: 00                          *\n//*                        Step ICHRIN00: 00                          *\n//* ------------------------------------------------------------------*\n//*\n//* ------------------------------------------------------------------*\n//* Restore MVS stub modules to SMP                                   *\n//* ------------------------------------------------------------------*\n//UCLIN   EXEC SMPAPP\n//SMPCNTL  DD  *\n UCLIN CDS .\n  ADD LMOD(ICHSEC00) STD SYSLIB(LINKLIB)\n                     LASTUPD(JCLIN) LASTUPDTYPE(ADD) .\n  ADD LMOD(IGC0013{) RENT SYSLIB(LPALIB)\n++LMODIN\n ALIAS IGC0013A,IGC0013B,IGC0013C\n ENTRY ICHRIN00\n++ENDLMODIN\n                     LASTUPD(JCLIN) LASTUPDTYPE(ADD) .\n  ADD  MOD(IEFBR14)  LMOD(ICHSEC00) .\n  ADD  MOD(ICHRIN00) LMOD(IGC0013{)\n                     DISTLIB(AOSBN) FMID(EBB1102) RMID(UZ90283)\n                     LASTUPD(JCLIN) LASTUPDTYPE(UPD) .\n  ADD SYSMOD(EBB1102) MOD(ICHRIN00) .\n ENDUCL .\n UCLIN ACDS .\n  ADD  MOD(ICHRIN00) DISTLIB(AOSBN)   FMID(EBB1102) RMID(UZ90283)\n                     LASTUPD(EBB1102) LASTUPDTYPE(ADD) .\n  ADD SYSMOD(EBB1102) MOD(ICHRIN00) .\n ENDUCL .\n/*\n//* ------------------------------------------------------------------*\n//* Delete target und and distribution libraries                      *\n//* ------------------------------------------------------------------*\n//SCRATCH EXEC PGM=IEFBR14\n//ASAMPLIB DD  DISP=(OLD,DELETE),DSN=HLQ.ASAMPLIB\n//SAMPLIB  DD  DISP=(OLD,DELETE),DSN=HLQ.SAMPLIB\n//AMACLIB  DD  DISP=(OLD,DELETE),DSN=HLQ.AMACLIB\n//MACLIB   DD  DISP=(OLD,DELETE),DSN=HLQ.MACLIB\n//ASRCLIB  DD  DISP=(OLD,DELETE),DSN=HLQ.ASRCLIB\n//SRCLIB   DD  DISP=(OLD,DELETE),DSN=HLQ.SRCLIB\n//APROCLIB DD  DISP=(OLD,DELETE),DSN=HLQ.APROCLIB\n//APARMLIB DD  DISP=(OLD,DELETE),DSN=HLQ.APARMLIB\n//* ------------------------------------------------------------------*\n//* Reinstate MVS stub modules in LINKLIB and LPALIB                  *\n//* ------------------------------------------------------------------*\n//ICHSEC00 EXEC  PGM=IEWL\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//AOSB3    DD  DISP=SHR,DSN=SYS1.AOSB3\n//SYSLIN   DD  *\n INCLUDE AOSB3(IEFBR14)\n ENTRY   IEFBR14\n NAME    ICHSEC00(R)\n/*\n//ICHRIN00 EXEC  PGM=IEWL,PARM='RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LPALIB\n//AOSBN    DD  DISP=SHR,DSN=SYS1.AOSBN\n//SYSLIN   DD  *\n INCLUDE AOSBN(ICHRIN00)\n ALIAS   IGC0013A,IGC0013B,IGC0013C\n ENTRY   ICHRIN00\n NAME    IGC0013{(R)\n/*\n//\n./ ADD NAME=TK3USR   0200-11093-11093-0000-00005-00005-00000-*RAKF*\nHERC01   ADMIN    NONE     Y\nHERC02   ADMIN    CUL8TR   Y\nHERC03   USER     NONE     N\nHERC04   USER     PASS4U   N\nIBMUSER  ADMIN    NONE     Y\n./ ADD NAME=ZAPMVS38 0200-11093-11093-0000-00083-00083-00000-*RAKF*\n//ZAPMVS38 JOB (RAKF),\n//             'ZAP MVS for RAKF',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=2048K,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------------------------*\n//*                                                                   *\n//* Name: ZAPMVS38                                                    *\n//*                                                                   *\n//* Desc: ZAP MVS 3.8 OPEN, RENAME and SCRATCH processing for RAKF    *\n//*                                                                   *\n//* !!! Caution: Refer to member $$$$M38J before running this job !!! *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//ZAP     EXEC PGM=AMASPZAP\n//SYSLIB   DD DISP=SHR,DSN=SYS1.LPALIB      <== LPA modules to be ZAPed\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n*\n* original ZAP to OPEN processing from\n* Phil D's RAKF installation instructions\n*\n* ===> comment out the following 6 statements  <===\n* ===> if you've already applied Phil D's ZAP  <===\n*\n  NAME IFG0194A IFG0194C\n   IDRDATA PD050823\n   VER 1392 47E0\n   REP 1392 4700\n   VER 13FA 47E0\n   REP 13FA 4700\n*\n* fix additional security wholes in OPEN processing\n*\n  NAME IFG0194A IFG0194C\n   IDRDATA JW110302\n   VER 13EE 4780\n   REP 13EE 4700\n   VER 1426 47E0\n   REP 1426 4700\n*\n* fix security wholes in DADSM RENAME processing\n*\n  NAME IGC00030 IGG03001\n   IDRDATA JW110302\n   VER 02E8 4710\n   REP 02E8 47F0\n   VER 02E0 4780\n   REP 02E0 4700\n   VER 032A 4710\n   REP 032A 4700\n   VER 036A 47E0\n   REP 036A 47F0\n   VER 0372 4710\n   REP 0372 4700\n*\n* fix security wholes in DADSM SCRATCH processing\n*\n  NAME IGC0002I IGG0290A\n   IDRDATA JW110302\n   VER 0298 47E0\n   REP 0298 47F0\n   VER 02BA 4780\n   REP 02BA 4700\n*\n* fix security wholes in DADSM SPACE ALLOCATION processing\n*\n  NAME IGG0553A IGG0553A\n   IDRDATA JW110302\n   VER 014A 4780\n   REP 014A 4700\n   VER 015C 4780\n   REP 015C 4700\n   VER 016E 4780\n   REP 016E 4700\n*\n  NAME IGG0553A IGG0553E\n   IDRDATA JW110302\n   VER 0234 4780\n   REP 0234 4700\n/*\n//\n./ ADD NAME=ZJW0003  0200-11093-11093-0000-00041-00041-00000-*RAKF*\n//ZJW0003  JOB (RAKF),\n//             'Modify MSTRJCL',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------------------------*\n//*                                                                   *\n//* Name: ZJW0003                                                     *\n//*                                                                   *\n//* DESC: Install USERMOD ZJW0003 to modify generation of MSTRJCL     *\n//*       RAKF DD statements added for early initialization           *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//RECEIVE EXEC SMPREC\n//SMPPTFIN DD  *\n++USERMOD (ZJW0003).\n++VER (Z038) FMID(EBB1102).\n++MACUPD(SGIEE0MS).\n>< CHANGE NAME=SGIEE0MS\n         DC    CL80'//RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),'\n         DC    CL80'//            DISP=SHR'\n         DC    CL80'//RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),'\n         DC    CL80'//            DISP=SHR'\n/*\n//SMPCNTL  DD  *\n REJECT  SELECT(ZJW0003)\n .\n RESETRC\n .\n RECEIVE SELECT(ZJW0003)\n .\n/*\n//APPLY   EXEC SMPAPP\n//AMODGEN  DD  DISP=SHR,DSN=SYS1.AMODGEN\n//SMPCNTL  DD  *\n APPLY   SELECT(ZJW0003)\n         DIS(WRITE)\n .\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "F3": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11W\\x00P\\x00P\\x00\\x00\\xd4\\xc1\\xc3\\xd3\\xc9\\xc2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:57:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "MACLIB"}, "text": "./ ADD NAME=CJYPCBLK 0109-90274-90290-1057-00026-00011-00021-*-ESG-*\nRPECBLK  DSECT ,                    RESOURCE PROFILE ELEMENT\nRPENEXT  DS    F                    NEXT RPE\nRPECLASS DS    0XL9                 CLASS LEN/NAME\nRPECLASL DS    X                    CLASS NAME\nRPECLASN DS    XL8                  CLASS NAME\nRPEENTTY DS    0XL45                ENTITY LENGTH/NAME\nRPEENTYL DS    X                    ENTITY LENGTH\nRPEENTYN DS    XL44                 ENTITY\nRPEUACC  DS    X                    UNIVERSAL ACCESS\nRPEACCPT DS    F                    POINTER TO RPE PERMITS\nRPEEND   DS    0F                   END OF FIXED PART\nRPEL     EQU   *-RPECBLK\n*\nRPEACCLE DSECT ,                    ACCESS LIST\nRPEANEXT DS    F                    NEXT RPE\nRPEAUSR  DS    CL8                  USER/GROUP ID\nRPEACS   DS    BL1                  ACCESS AUTHORITY\n         DS    0F\nRPEACCLN EQU   *-RPEACCLE\n*\nRACFALTR EQU   X'80'                ALTER AUTHORITY\nRACFCNTL EQU   X'40'                CONTROL AUTHORITY\nRACFUPDT EQU   X'20'                UPDATE AUTHORITY\nRACFREAD EQU   X'10'                READ AUTHORITY\nRACFEXEC EQU   X'09'                EXEC AUTHORITY\nRACFNONE EQU   X'01'                NONE AUTHORITY\n./ ADD NAME=CJYRCVTD 0103-90274-91017-1611-00004-00004-00003-*-ESG-*\nCJYRCVTD DSECT\nCJYUSERS DS    F                    POINTER TO USERIDS\nCJYPROFS DS    F                    POINTER TO PROFILES\nCJYRL    EQU   *-CJYRCVTD\n./ ADD NAME=CJYUCBLK 0102-90299-90301-1526-00023-00020-00020-*-ESG-*\nCBLK     DSECT\nCBLKNEXT DS    F                  NEXT CBLK\nCBLKGRPS DS    F                  POINTER TO GROUPS\nCBLKUSER DS    0CL9               USERID\nCBLKUSRL DS    X                  USERID LENGTH\nCBLKUSRI DS    CL8                USERID NAME\nCBLKGRP  DS    0CL9               GROUP\nCBLKGRPL DS    X                  GROUP LENGTH\nCBLKGRPN DS    CL8                GROUP NAME\nCBLKPSWD DS    0CL9               PASSWORD\nCBLKPWDL DS    X                  PASSWORD LENGTH\nCBLKPWDE DS    CL8                PASSWORD ENCRYPTED\nCBLKFLG1 DS    C                  OPER AUTHORITY\n         DS    0F                 END THE BLOCK\nCBLKL    EQU   *-CBLK\n*\nCONNGRUP DSECT ,                   CONNECTS\nCONNNEXT DS    F                   NEXT CONNECT\nCONNGRP  DS    0CL9                GROUP\nCONNGRPL DS    X                   GROUP LENGTH\nCONNGRPN DS    CL8                 GROUP NAME\n         DS    0F\nCONNL    EQU   *-CONNGRUP\n./ ADD NAME=YREGS\n         MACRO\n         YREGS &DUMMY\n         GBLA  &REGS\n&REGS    SETA  1\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "F4": {"ttr": 3337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11W\\x07\\x8d\\x07\\x8d\\x00\\x00\\xe2\\xd9\\xc3\\xd3\\xc9\\xc2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:57:00", "lines": 1933, "newlines": 1933, "modlines": 0, "user": "SRCLIB"}, "text": "./ ADD NAME=CJYRCVT  3800-90253-05235-0000-00133-00073-00133-*PHILS*\n         TITLE 'INITIALIZE OUR RACF CVT'\n* CPARM='XREF(SHORT),OBJ,NODECK',LPARM='AC=1'                 CJYRCVT\n*      DD DSN=SYS1.MACLIB,DISP=SHR\n*      DD DSN=SYS1.MODGEN,DISP=SHR\n*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR\n         EJECT\nCJYRCVT  CSECT\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n         PRINT NOGEN\n         SAVE  (14,12),,CJYRCVT_&SYSDATE._&SYSTIME\n         LR    R12,R15             USE ENTRY AS BASE\n         USING CJYRCVT,R12         \" \" \"\n         ST    R13,SAVEAREA+4      SAVE CALLER'S SAVE AREA ADDR\n         LA    R2,SAVEAREA         MY SAVEAREA\n         ST    R2,8(R13)           SAVE MY AREA\n         LR    R13,R2              LOAD REGISTER 13 WITH SAVEAREA\n*\n         GETMAIN RU,LV=GMLEN,SP=245 GET SQA\n         LR    R4,R1               SAVE AREA\n         LA    R5,GMLEN            LENGTH\n         LR    R6,R4               TARGET\n         LA    R7,0                ZERO FILL\n         MVCL  R4,R6               MOVE IT\n         LR    R4,R1               BRING BACK R1\n         USING RCVT,R4             ADDRESS IT\n         MVC   RCVTID,=C'RCVT'     MOVE NAME\n         MVI   RCVTVERS,X'06'      V1R7 OF RACF\n         MVI   RCVTFLG1,RCVTTAPE TAPE\n         MVI   RCVTSTA1,X'FF'\n         MVI   RCVTAUOP,X'7A'\n         LA    R2,RCVTEND          POINT TO G.M. AREA AFTER RCVT\n         LA    R3,CJYRCVTL         LENGTH\n         LA    R6,CJYRCVTX         POINT TO OUR CODE\n         LR    R7,R3               LENGTH EQUAL\n         MVCL  R2,R6               MOVE IT\n         LA    R2,RCVTEND          ADDRESS OF CJYRCVT\n         ST    R2,RCVTISTL         INSTALLATION POINTER\n         LA    R2,RCVTEND+RACSTAT-CJYRCVTX CDT POINTER\n         ST    R2,RCVTREXP         RACSTAT POINTER\n         LA    R2,RCVTEND+CDT-CJYRCVTX CDT POINTER\n         ST    R2,RCVTCDTP         SAVE IT\n         LA    R2,RCVTEND+ICHAUTAB-CJYRCVTX CDT POINTER\n         ST    R2,RCVTAUTP         SAVE IT\n         L     R2,FLCCVT-PSA(0)    LOAD CVT\n         ST    R4,CVTRAC-CVTMAP(R2) SAVE IN CVT\n         WTO   'RCVT WAS PROCESSED SUCCESSFULLY'\n         L     R13,SAVEAREA+4      LOAD OLD REG 13\n         RETURN (14,12),RC=0       RETURN TO CALLER\n*\n         LTORG\nSAVEAREA DS    18F\nCJYRCVTX DC    XL8'0'\nRACSTAT  SAVE  (14,12),,RACSTAT_&SYSDATE._&SYSTIME\n         DROP  ,\n         LR    R12,R15             USE ENTRY AS BASE\n         USING RACSTAT,R12         \" \" \"\n         LA    R15,0               RC = 0\n         ICM   R2,B'1111',0(R1)    CLASS TO CHECK FOR\n         BZ    RETURN              NONE, RETURN\n         LA    R3,CDT              CDT\n         LA    R4,CDTE#            NUMBER OF CDTS.\nCDTLOOP  CLC   0(8,R2),3(R3)       US?\n         BE    FOUNDCDT            YES, GO ON\n         LA    R3,CDTELEN(R3)      NEXT\n         BCT   R4,CDTLOOP          GO ON\n         LA    R15,8               SORRY\n         B     RETURN              ....\nFOUNDCDT LA    R15,0               RACF ACTIVE, CLASS ACTIVE\n         ICM   R2,B'1111',4(R1)    ENTRY\n         BZ    RETURN              NONE ...\n         ST    R3,0(R2)            SAVE CDT ADDRESS\nRETURN   RETURN (14,12),RC=(15)    BYE ...\n*\nCDT      DC    X'003005',C'DASDVOL GDASDVOL',X'06E0E00078',XL24'00'\nCDTELEN  EQU   *-CDT\n         DC    X'003012',C'FACILITY        ',X'27F0F00118',XL24'00'\n         DC    X'00302D',C'TSOPROC         ',X'08C0E00110',XL24'00'\n         DC    X'00302E',C'ACCTNUM         ',X'27F0F00110',XL24'00'\n         DC    X'00302F',C'PERFGRP         ',X'0320200110',XL24'00'\n         DC    X'003027',C'GDASDVOLDASDVOL ',X'06E0E000E0',XL24'00'\n         DC    X'003028',C'PMBR    PROGRAM ',X'27C0E00100',XL24'00'\n         DC    X'003029',C'PROGRAM PMBR    ',X'08C0E00180',XL24'00'\n         DC    X'003030',C'TSOAUTH         ',X'08E0E00110',XL24'00'\n         DC    X'003038',C'PROPCNTL        ',X'08E0E00110',XL24'00'\nCDTE#    EQU   (*-CDT)/CDTELEN\n*\nICHAUTAB DC    CL8'DSIOST',XL4'80000000'   NCCF\n         DC    CL8'DSILAR',XL4'80000000'   NCCF\n         DC    XL4'00000000'               END OF CHAIN\n*\nCJYRCVTL EQU   *-CJYRCVTX\n*\n         ICHPRCVT\nRCVTEND  DS    0H\nGMLEN    EQU   *-RCVT+CJYRCVTL\n         CVT     DSECT=YES\n         IHAPSA  DSECT=YES\n         IHASCVT\n         COPY    CJYRCVTD\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./ ADD NAME=ICHRIN00 0200-11090-11093-0000-00048-00048-00000-*RAKF*\n         TITLE 'RAKF SVCs'\nICHRIN00 CSECT\n         ENTRY IGC0013A,IGC0013B,IGC0013C\n*\n**********************************************************************\n*                                                                    *\n* NAME: ICHRIN00                                                     *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Stub module for RAKF SVCs                                    *\n*                                                                    *\n* FUNCTION: provide dummy RACF SVC 132                               *\n*           provide real RAKF SVCs 130, 131, 133                     *\n*                                                                    *\n**********************************************************************\n*\n         USING ICHRIN00,R6         SCV entry R6 = EP\n         B     SVC130              continue with IGC00130\n         DC    C'IGC00130 RAKF  &SYSDATE. ' eye catcher\nSVC130   L     R6,RAKF0130         address of SVC 130\n         BR    R6                  go for it\n*\n         USING IGC0013A,R6         SCV entry R6 = EP\nIGC0013A B     SVC131              continue with IGC0013A\n         DC    C'IGC0013A RAKF  &SYSDATE. ' eye catcher\nSVC131   L     R6,RAKF013A         address of SVC 131\n         BR    R6                  go for it\n*\n         USING IGC0013B,R6         SCV entry R6 = EP\nIGC0013B B     SVC132              continue with IGC0013B (dummy)\n         DC    C'ICHRIN00 DUMMY &SYSDATE. ' eye catcher\nSVC132   LA    R15,0               indicate RACLIST successful ..\n         LA    R0,4                 .. but no profiles mapped\n         BR    R14                 return to the caller\n*\n         USING IGC0013C,R6         SCV entry R6 = EP\nIGC0013C B     SVC133              continue with IGC0013C\n         DC    C'IGC0013C RAKF  &SYSDATE. ' eye catcher\nSVC133   L     R6,RAKF013C         address of SVC 133\n         BR    R6                  go for it\n*\n*\nRAKF0130 DC    V(RAKF0130)         SVC 130 (RACHECK)\nRAKF013A DC    V(RAKF013A)         SVC 131 (RACINIT)\nRAKF013C DC    V(RAKF013C)         SVC 133 (RACDEF)\n         YREGS                     register equates\n         END   ICHRIN00\n./ ADD NAME=ICHSEC00 0200-11090-11093-0000-00158-00158-00000-*RAKF*\n         TITLE 'RAKF Initialization Program'\nICHSEC00 CSECT\n*\n**********************************************************************\n*                                                                    *\n* NAME: ICHSEC00                                                     *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Initialize RAKF                                              *\n*                                                                    *\n* FUNCTION: - output banner to console                               *\n*           - check if SAFV is already defined and initialized       *\n*             o if yes: skip initialization and go directly to       *\n*                       profile and user table initialization        *\n*           - try to read initialization directive from              *\n*             parmlib member RAKFINIT:                               *\n*             o if first line of member starts with YES:    continue *\n*             o if first line of member starts with NO:     exit     *\n*             o else, of if member doesn't exist:                    *\n*               + ask operator for permission to initialize          *\n*                 if operator denies permission:            exit     *\n*           - get SQA storage for SAFV and initialize it             *\n*           - put entry address of SAF router ICHSFR00 in SAFV       *\n*           - initialize RCVT                                        *\n*           - initialize profile table                               *\n*           - initialize user table                                  *\n*                                                                    *\n* REQUIREMENTS: - ICHSFR00 in LPA                                    *\n*               - RAKFPROF and RAKFUSER in linklist                  *\n*               - parmlib defined through ddname IEFPARM             *\n*               - user and profile table DDs as needed               *\n*                 by RAKFPROF and RAKFUSER                           *\n*                                                                    *\n**********************************************************************\n*\n         PRINT NOGEN\n         SAVE  (14,12),,ICHSEC00_&SYSDATE._&SYSTIME\n         USING ICHSEC00,R15        establish => program EP\n         ST    R13,SAVEAREA+4      save HSA\n         LA    R11,SAVEAREA        establish => savearea\n         ST    R11,8(R13)          save LSA\n         LR    R13,R11             setup => our savearea\n         USING SAVEAREA,R13        new addressability\n         DROP  R15                 program EP no longer needed\n         B     CONTINUE            branch around savearea\nSAVEAREA DS    18F                 savearea\n*\n* identify\n*\nCONTINUE WTO   'RAKF is based on the ESG Security System'\n         WTO   'written by Craig J. Yasuna               (Mar 1991)'\n         WTO   'adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)'\n         WTO   '                     Phil Roberts        (Apr 2011)'\n         WTO   '                     Juergen Winkelmann  (Apr 2011)'\n*\n* RAKF already active?\n*\n         L     R2,FLCCVT-PSA(0)    get CVT address from PSA\n         ICM   R3,B'1111',CVTSAF(R2) SAFV already defined?\n         BZ    GOFORIT             no RAC active, continue activation\n         USING SAFV,R3             addressability of SAFV\n         CLC   SAFVIDEN(4),SAFVID  SAFV initialized?\n         BNE   GOFORIT             no RAC active, continue activation\n         DROP  R3                  SAFV no longer needed\n         WTO   'RAKF005I RAKF is already active' tell operator\n         B     PROFUSER            initialize user and profile table\n*\n* read parmlib\n*\nGOFORIT  LA    R11,PARMLIB         establish ..\n         USING IHADCB,R11           .. DCB addressability\n         OPEN  PARMLIB             open PARMLIB\n         LH    R12,DCBBLKSI        get blocksize\n         GETMAIN EU,LV=(R12),A=BLKADDR get storage for block\n         FIND  PARMLIB,RAKFINIT,D  find member RAKFINIT\n         LTR   R15,R15             parmlib member found?\n         BNZ   CLOSE                --> no, don't read\n         L     R12,BLKADDR         get block address\n         READ  INDECB,SF,PARMLIB,(R12),'S' read block\n         CHECK INDECB              wait for data to arrive\n         MVC   RAKSTART(4),0(R12)  get parmlib input\nCLOSE    LH    R12,DCBBLKSI        get blocksize\n         FREEMAIN EU,LV=(R12),A=BLKADDR free storage\n         CLOSE PARMLIB             close parmlib\n         DROP  R11                 DCB no longer needed\n*\n* decide initialization\n*\n         CLC   RAKSTART(2),NO      if RAKFINIT directive is NO ..\n         BE    NOINIT               .. talk dirrty and don't initialize\n         CLC   RAKSTART(3),YES     if RAKFINIT directive is YES ..\n         BE    INITMSG              .. initialize RAKF\n         WTO   MF=(E,INITWTO)       .. else ask operator\n         WTOR  'RAKF002A Reply YES to continue or NO to cancel',       X\n               REPLY,4,SECECB,ROUTCDE=(1) .. shall we?\n         WAIT  ECB=SECECB          wait for reply\n         CLC   REPLY(2),NO         if operator replied NO ..\n         BNE   INIT                 .. talk dirrty and don't initialize\nNOINIT   WTO   'RAKF004W RAKF not initialized' tell operator\nRETURN   L     R13,SAVEAREA+4      get caller's savearea\n         RETURN (14,12),,RC=0      return\n*\n* initialize\n*\nINITMSG  WTO   MF=(E,INITWTO)      tell operator\nINIT     MODESET MODE=SUP,KEY=ZERO authorize ourselves\n         GETMAIN RU,LV=SAFVLEN,SP=245 get SQA storage for SAFV\n         LR    R3,R1               establish ..\n         USING SAFV,R3              .. addressability of SAFV\n         XC    SAFV(SAFVLEN),SAFV  clear SAFV\n         MVC   SAFVIDEN(4),SAFVID  move identifier into SAFV\n         LOAD  EP=ICHSFR00         get SFR address (LPA)\n         ST    R0,SAFVSAFR         store SFR address in SAFV\n         DROP  R3                  SAFV addressability no longer needed\n         L     R2,FLCCVT-PSA(0)    get CVT address from PSA\n         ST    R3,CVTSAF(R2)       save SAFV address in CVT\n         L     R15,CJYRCVT         get RCVT loader address\n         BALR  R14,R15             call it\n         MODESET MODE=PROB,KEY=NZERO return to problem state\n         WTO   'RAKF003I RAKF is now active',ROUTCDE=(2) tell operator\nPROFUSER LOAD  EP=RAKFPROF         load profile updater\n         LR    R15,R0              address of entry point\n         BALR  R14,R15             call it\n         DELETE EP=RAKFPROF        remove it\n         LOAD  EP=RAKFUSER         load user updater\n         LR    R15,R0              address of entry point\n         BALR  R14,R15             call it\n         DELETE EP=RAKFUSER        remove it\n         B     RETURN              return\n*\n* data area\n*\nBLKADDR  DS    F                   address of parmlib read buffer\nCJYRCVT  DC    V(CJYRCVT)          RCVT loader\nRAKFINIT DC    C'RAKFINIT'         parmlib member name\nRAKSTART DC    CL4' '              parameter read from parmlib\nREPLY    DC    CL4' '              reply from operator\nSAFVID   DC    CL4'SAFV'           SAFV eye catcher\nSECECB   DC    A(0)                ECB for WTOR\nNO       DC    CL2'NO'             NO\nYES      DC    CL3'YES'            YES\nINITWTO  WTO   'RAKF001I RAKF is now being activated',                 X\n               ROUTCDE=(1),MF=L    tell operator\nPARMLIB  DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=R,EODAD=CLOSE\n*\n* equates\n*\nCVTSAF   EQU   248 CVTSAF doesn't exist but is a reserved field in 3.8J\n         YREGS                     register equates\n*\n* control block mappings\n*\n         CVT   DSECT=YES           map CVT\n         IHAPSA   DSECT=YES        map PSA\n         ICHSAFV  DSECT=YES        map SAFV\n         DCBD  DSORG=PO,DEVD=DA    map DCB\n         END   ICHSEC00\n./ ADD NAME=ICHSFR00 0200-90264-11093-0000-00876-00555-00876-*RAKF*\nICHSFR00 TITLE 'SAF ROUTER - ENTRY FOR ALL SECURITY CALLS'\n* CPARM='XREF(SHORT),RENT,OBJ,NODECK',LPARM='RENT,REUS,MAP'   ICHSFR00\n*      DD DSN=SYS1.MACLIB,DISP=SHR\n*      DD DSN=SYS1.MODGEN,DISP=SHR\n*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR\n         EJECT\nICHSFR00 CSECT\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n         USING AUTHDS,R10\n         USING ICHSFR00,R15\n         SAVE  (14,12),,ICHSFR00.&SYSDATE..&SYSTIME\n         B     AROUNDZP            GO AROUND OUR ZAP CODE\n         L     R15,NEWCODE         GET NEW CODE\n         BR    R15                 AND BRANCH TO IT\nNEWCODE  DC    F'0'                FOR NEW CODE (OMON ZAPS..)\n         DROP  R15\nAROUNDZP LR    R12,R15\n         USING ICHSFR00,R12        PROGRAM BASE\n         USING ACEE,ACEEREG        ADDRESS ACEE\n         USING PSA,0               ADDRESS PSA\n         LR    R12,R15             FIRST BASE\n         L     R9,24(R1)           ADDRESS EXIT WORK AREA\n         USING WORKSAVE,R9         ... HELLO SAVE AREA\n         XC    WORKAREA(WORKAREL),WORKAREA CLEAR WORKAREA\n         ST    R13,WORKSAVE+4      SAVE HSA\n         ST    R9,8(R13)           SAVE LSA\n         LR    R13,R9              ADDRESS SAVE AREA\n         DROP  R9\n         USING WORKSAVE,R13        ... HELLO SAVE AREA\n         MVC   WORKWTO,REALWTO     MOVE WTO SKEL\n*\nSTRTROUT LR    R9,R1               GET ADDR. OF SAF PARAMETER LIST\n         USING SAFP,R9             BASE FOR SAFP PARAMETER LIST\n         LA    R2,SAFPAU           RACHECK\n         CH    R2,SAFPREQT         CHECK REQUEST TYPE\n         BE    RACHECK             YES, GO ON\n         LA    R2,SAFPFAU          FRACHECK\n         CH    R2,SAFPREQT         CHECK REQUEST TYPE\n         BE    FRACHECK            YES, GO ON\n         LA    R2,SAFPDEF          RACDEF\n         CH    R2,SAFPREQT         CHECK REQUEST TYPE\n         BE    RACDEF              YES, GO ON\n         LA    R2,SAFPVER          RACINIT\n         CH    R2,SAFPREQT         CHECK REQUEST TYPE\n         BE    RACINIT             YES, GO ON\n         LA    R2,SAFPEXT          RACXTRT\n         CH    R2,SAFPREQT         CHECK REQUEST TYPE\n         BE    RACXTRT             YES, GO ON\n         LA    R2,SAFPLIS          RACLIST\n         CH    R2,SAFPREQT         CHECK REQUEST TYPE\n         BE    RTRNGOOD            YES, GO ON\n         B     RTRN0000            GO AWAY\n         TITLE 'RACHECK PROCESSING (EXISTING RESOURCE) '\nRACHECK  L     R8,SAFPRACP         OFFSET TO RACHECK PARAMETER LIST\n         AR    R8,R9               ADDR. OF RACHECK PARAMETER LIST.\n         USING ACHKLIST,R8\nRACHLN31 XR    R2,R2               CLEAR R2\n         ICM   R2,B'0111',ACHKCLN  GET CLASS\n         BNZ   RACHCLNE            found --> continue\n         LA    R2,RACDDSNC         use our DSN CLASS\nRACHCLNE XR    ENTYREG,ENTYREG     CLEAR ENTYREG\n         ICM   ENTYREG,B'0111',ACHKENT GET ENTITY\n*        BNZ   RACHACEE            found --> continue\n*        B     RACHGOOD            not found --> exit\n*\nRACHACEE MVC   WORKCLAS,=CL8' '    BLANK IT OUT\n         IC    R1,0(R2)            LENGTH\n*        BNZ   RACHNBLK            not zero --> continue\n*        B     RACHGOOD            zero --> exit\n         BCTR  R1,0                SUB 1 FOR MVC\n         EX    R1,RACHMVCC         MVC WORKCLAS(0),1(R2)\n         CLC   WORKCLAS(8),=CL8' ' CLASS blank?\n         BNE   RACHNBLK               --> no, continue\n         MVC   WORKCLAS,=CL8'DATASET' --> yes, assume DATASET\nRACHNBLK ICM   ACEEREG,B'1111',ACHKACEE POINT TO ACEE\n         BNZ   RACHCHCK            NO ACEE -> ALLOW ACCES\n         L     R2,PSAAOLD          OUR ASCB\n         L     R2,ASCBASXB-ASCB(R2) OUR ASXB\n         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE\n         BZ    RACHGOOD            WHO KNOWS\nRACHCHCK IC    R2,ACHKFLG2         GET AUTH. REQ.\n         SLL   R2,3                CONFORM TO RACDEF\n         STC   R2,WORKAUTH         SAVE IT\n         OC    WORKAUTH,ACHKFLG2   ADD BACK X'80'\n         NI    WORKAUTH,X'F0'      TURN OFF LOW ORDER\n*\n         TM    ACHKFLG1,ACHKLOGS   LOG SUPPRESSED?\n         BZ    RACHCHK1            DO ENTITY CHECK\n         OI    WORKFLAG,WORKNLOG   SUPPRESS LOG\n*\nRACHCHK1 BAL   R10,ENTYCHCK        GO DO ENTITY CHECK\n         B     RACHGOOD            GOOD RETURN\n         B     RACHUNKN            RC4 - UNKN\n         B     RACHFAIL            RC8 - FAIL\nRACHMVCC MVC   WORKCLAS(0),1(R2)   MOVE CLASS\n*\nRACHGOOD XC    SAFPRRET,SAFPRRET   NOTHING ...\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNGOOD            GO TO RC 200 CODE\n*\nRACHUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNWARN            GO TO RC 204 CODE\n*\nRACHFAIL MVC   SAFPRRET,=F'08'     FAIL ....\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNFAIL            DO ANY EXCEPTIONS\n         TITLE 'FRACHECK PROCESSING (EXISTING RESOURCE IN-CORE) '\nFRACHECK L     R8,SAFPRACP         OFFSET TO RACHECK PARAMETER LIST\n         AR    R8,R9               ADDR. OF RACHECK PARAMETER LIST.\n         L     R2,8(R8)            GET CLASS FRACHECK CLASS\n         MVC   WORKCLAS,0(R2)      MOVE CLASS\n         L     ENTYREG,4(R8)       GET ENTITY FRACHECK ENTITY\n         ICM   ACEEREG,B'1111',12(R8) POINT TO ACEE IN FRACHECK\n         BNZ   FRACCHCK            GO DO CHECK\n         L     R2,PSAAOLD          OUR ASCB\n         L     R2,ASCBASXB-ASCB(R2) OUR ASXB\n         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE\n         BZ    FRACUNKN            UNKNOWN\nFRACCHCK IC    R2,0(R8)            GET AUTH. REQ.\n         SLL   R2,3                CONFORM TO RACDEF\n         STC   R2,WORKAUTH         SAVE IT\n         OC    WORKAUTH,0(R8)      ADD BACK X'80'\n         NI    WORKAUTH,X'F0'      TURN OFF LOW ORDER\n         BAL   R10,ENTYCHCK        GO DO ENTITY CHECK\n         B     FRACGOOD            GOOD RETURN\n         B     FRACUNKN            RC4 - UNKN\n         B     FRACFAIL            RC8 - FAIL\n*\nFRACGOOD XC    SAFPRRET,SAFPRRET   NOTHING ...\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNGOOD            GO TO RC 200 CODE\nFRACUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNWARN            GO TO RC 204 CODE\nFRACFAIL MVC   SAFPRRET,=F'08'     FAIL ....\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNFAIL            DO ANY EXCEPTIONS\n         TITLE 'RACDEF PROCESSING (NEW RESOURCE) '\nRACDEF   L     R8,SAFPRACP         OFFSET TO RACDEF  PARAMETER LIST\n         AR    R8,R9               ADDR. OF RACDEF PARAMETER LIST.\n         USING RDDFLIST,R8\n         XC    SAFPRRET,SAFPRRET   PRIME RC/REAS = 0\n         XC    SAFPRREA,SAFPRREA   PRIME RC/REAS = 0\n         TM    RDDFFLGS,RDDFTDEL+RDDFNEWN DELETE OR NEWNAME\n         BZ    RACDNDEL            NOT DELETE\n         TM    RDDFFLG2,RDDFCHKA   CHECKAUTH SPEC.?\n         BZ    RACDGOOD            NO, RC=0\n*\nRACDNDEL ICM   R2,B'0111',RDDFCLNW CLASS ???\n         BNZ   RACDGCLS            GOT CLASS\n         LA    R2,RACDDSNC         USE OUR DSN CLASS\nRACDGCLS TM    RDDFFLGS,RDDF31IN   31 BIT MODE?\nRACDEN31 XR    ENTYREG,ENTYREG     CLEAR ENTYREG\n         ICM   ENTYREG,B'0111',RDDFENT GET ENTITY\nRACDACEE MVC   WORKCLAS,=CL8' '    BLANK IT OUT\n         IC    R1,0(R2)            LENGTH\n         BCTR  R1,0                SUB 1 FOR MVC\n         EX    R1,RACDMVCC         MVC WORKCLAS(0),1(R2)\n         CLC   WORKCLAS(8),=CL8' ' CLASS blank?\n         BNE   RACDNBLK               --> no, continue\n         MVC   WORKCLAS,=CL8'DATASET' --> yes, assume DATASET\nRACDNBLK ICM   ACEEREG,B'1111',RDDFACEE POINT TO ACEE\n         BNZ   RACDCHCK            GO CHECK\n         L     R2,PSAAOLD          OUR ASCB\n         L     R2,ASCBASXB-ASCB(R2) OUR ASXB\n         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE\n         BZ    RACDGOOD            WHO KNOWS\nRACDCHCK MVI   WORKAUTH,RACFALTR   MOVE AUTH REQ.\n*\n         TM    RDDFFLG2,RDDFRFI    RACFIND IND?\n         BZ    RACDCHK1            NO, DO ENTITY CHECK\n         OI    WORKFLAG,WORKNLOG   YES, SUPPRESS LOG\n*\nRACDCHK1 BAL   R10,ENTYCHCK        GO DO ENTITY CHECK\n         B     RACDNEW             GOOD RETURN - CHECK RENAME\n         B     RACDNEW             RC4 - UNKN\n         B     RACDFAIL            RC8 - FAIL\nRACDMVCC MVC   WORKCLAS(0),1(R2)   MOVE CLASS\nRACDDSNC DC    X'07',CL8'DATASET'  DATASET CLASS\n*\nRACDNEW  TM    RDDFFLGS,RDDFNEWN   NEWNAME SPEC?\n         BNO   RACDCK18            CHECK 1.8 STUFF\n         L     ENTYREG,RDDFNNAM    LOAD NEWNAME\n         BAL   R10,ENTYCHCK        GO DO ENTITY CHECK\n         B     RACDCK18            CHECK 1.8 STUFF\n         B     RACDCK18            CHECK 1.8 STUFF\n         B     RACDFAIL            RC8 - FAIL\n*\nRACDCK18 EQU   *\n*\nRACDCMCL EQU   *\n         B     RACDGOOD            RC4 - UNKN\n*\nRACDGOOD TM    WORKENTY,8          RC=8\n         BO    RACDFAIL            BYPASS RC=4\nRACDNVFY TM    WORKENTY,4          RC=4\n         BO    RACDUNKN            AT LEAST 1 WARN\n         TM    RDDFFLGS,RDDFCHGV   DELETE OR ADD\n         BNZ   RACDGDD0            GOOD 0\n         TM    RDDFFLG2,RDDFRFIY   RACFIND=YES\n         BO    RACDGDD0            --> Yes, RC=0\n         TM    RDDFFLG2,RDDFRFI    RACFIND=NO\n         BNO   RACDGDD0            --> No, RC=0\n         MVC   SAFPRREA,=F'04'     --> Yes, RC=0 & Reason=4\nRACDGDD0 XC    SAFPRRET,SAFPRRET   NOTHING ...\n         B     RTRNGOOD            GO TO RC 200 CODE\n*\nRACDUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNWARN            GO TO RC 204 CODE\n*\nRACDFAIL MVC   SAFPRRET,=F'08'     FAIL ....\n         B     RTRNFAIL            DO ANY EXCEPTIONS\n         TITLE 'RACXTRT CODE - RETRIEVE DATA FROM PROFILE'\nRACXTRT  L     R8,SAFPRACP         OFFSET TO RACXTRT PARAMETER LIST\n         AR    R8,R9               ADDR. OF RACXTRT PARAMETER LIST.\n         TM    3(R8),X'01'         EXTRACT ...\n         BO    RACXEXTR            GO ON\n         TM    3(R8),X'03'         EXTRACTN...\n         BO    RACXEXTR            GO ON\n         B     RACXUNKN            NOT YET SUPPORTED ...\n*\nRACXEXTR XR    R2,R2               CLEAR R2\n         LH    R2,6(R8)            GET OFFSET TO VARIABLE STUFF.\n         AR    R2,R8               ADD BEGINNING OF RACXTRT\n         ICM   R3,B'1111',0(R2)    GET CLASS ADDRESS\n         BZ    RACXUNKN            NONE ....\n         CLC   =C'USER',0(R3)      USER CLASS ????\n         BNE   RACXUNKN            NO, NOT SUPPORTED\n*\n         ICM   R3,B'1111',8(R8)    GET ENTITY ADDRESS\n         BNZ   RACXENTY            GOT ENTITY(USERNAME)\n         ICM   ACEEREG,B'1111',X'14'(R2) ACEE REQ?\n         BNZ   RACXACEE            GO ON...\n         L     R3,PSAAOLD-PSA(0)   OUR ASCB\n         L     R3,ASCBASXB-ASCB(R3) OUR ASXB\n         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R3) ACEE\n         BZ    RACXUNKN            WHO KNOWS\nRACXACEE LA    R3,ACEEUSRI         GET ACEEUSER\nRACXENTY ICM   R8,B'1111',X'0C'(R2) CHECK SEGMENT\n         BZ    RACXUNKN            BASE NOT SUPPORTED\n         CLC   =C'TSO',0(R8)       TSO SEGMENT?\n         BNE   RACXUNKN            NO, NOT SUPPORTED\n         B     RACXUNKN            GO THERE ANYWAY\n*        FIELDS ...\n*  GETMAIN AREA IN SP... & RETURN IN ...\n*\nRACXUNKN MVC   SAFPRRET,=F'08'     NOT PROTECTED ...\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         B     RTRNWARN            GO TO RC 208 CODE\n*\n         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - CHECK AUTH'\nRACINIT  L     R8,SAFPRACP         OFFSET TO RACINIT PARAMETER LIST\n         AR    R8,R9               ADDR. OF RACINIT PARAMETER LIST.\n         TM    3(R8),X'C0'         TEST FOR VERIFY\n         BO    RTRN0000            ENVIR=VERIFY USED BY JES2 EARLY VFY\n*\n         L     R2,PSATOLD          ADDRESS TCB\n         L     R2,TCBRBP-TCB(R2)   ADDRESS RB\n         TM    RBSTAB1-RBSECT(R2),RBFTP CHECK RBTYPE\n         BZ    RACIRACR            PRB DID RACROUTE\n*\n         XR    R3,R3               CLEAR R3\n         ICM   R3,B'0111',RBLINKB-RBSECT(R2) PRIOR RB\n         S     R3,=A(RBSECT-RBPREFIX) SUBTRACT PFIX LENG\n         CLI   RBINTCOD-RBPREFIX+1(R3),X'83' SVC83 (RACINIT)\n         BNE   RACIRACR            SVC ISSUED RACROUTE\n*\n         ICM   R2,B'0111',RBLINKB-RBSECT(R2) PRIOR RB\n         TM    RBSTAB1-RBSECT(R2),RBFTP PRB?????\n         BNZ   RACINAUT            NO, DON'T BOTHER WITH TABLE\n*\n         ICM   R2,B'0111',RBCDE1-RBSECT(R2) PRIOR RB\n         BZ    RACINAUT            NO CDE\n         L     R3,FLCCVT           LOAD CVT\n         ICM   R3,B'1111',CVTRAC-CVTMAP(R3) CHECK RCVT\n         BZ    RACIERR1            WHO KNOWS\n         ICM   R3,B'1111',RCVTAUTP-RCVT(R3) CHECK AUTHORIZED CALLERS\n         BZ    RACINAUT            NO TABLE\n*\nRACIAUTL CLC   =F'0',0(R3)         END OF TABLE?\n         BE    RACINAUT            YES, SORRY\n         CLC   CDNAME-CDENTRY(,R2),0(R3) IS THIS US?\n         BE    RACIMDST            YES, BYPASS TESTAUTH\n         LA    R3,12(R3)           NEXT ENTRY\n         BE    RACIAUTL            GO ON\n*\nRACINAUT TESTAUTH FCTN=1,STATE=YES,KEY=YES    APF/SUP/KEY0-7\n         LTR   R15,R15             GOT IT?\n         BZ    RACIMDST            YES, GO ON\n         ABEND 1667,,,SYSTEM       ABEND 683\n*\nRACIRACR TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=1 APF/SUP/KEY0-7\n         LTR   R15,R15             GOT IT?\n         BZ    RACISCHP            YES, GO ON\n         ABEND 1667,,,SYSTEM       ABEND 683\n*\nRACISCHP TESTAUTH STATE=YES,RBLEVEL=1 SUPV STATE?\n         LTR   R15,R15             GOT IT?\n         BZ    RACIMDST            YES, GO ON\n         OI    WORKFLAG,WORKSUPO   SUP. ON\n         MODESET MODE=SUP          SET STATE\n*\nRACIMDST MODESET EXTKEY=ZERO,SAVEKEY=WORKKEY,WORKREG=2\n         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) '\n         TM    3(R8),X'40'         TEST FOR CHANGE\n         BO    RACIGOOD            NOT YET SUPPORTED ...\n         TM    3(R8),X'80'         CREATE = ZERO\n         BO    RACINDEL            NO, GO DELETE ACEE\n*\n         ICM   R5,B'1111',4(R8)    GO TO USERID\n         BZ    RACINOID            NONE, CHECK FOR STC ...\n         L     R4,FLCCVT           LOAD CVT\n         ICM   R4,B'1111',CVTRAC-CVTMAP(R4) CHECK RCVT\n         BZ    RACIERR1            WHO KNOWS\n         ICM   R4,B'1111',RCVTISTL-RCVT(R4) OUR STUFF?\n         BZ    RACIERR1            WHO KNOWS\n         ICM   R4,B'1111',CJYUSERS-CJYRCVTD(R4) OUR STUFF?\n         BZ    RACIERR1            WHO KNOWS\n         USING CBLK,R4             ADDRESS THE BALL -- HELLO BALL\nRACICKLP IC    R1,CBLKUSRL         LENGTH OF UID\n         EX    R1,RACINCLC         CLC CBLKUSER(0),0(R5)\n         BE    RACIIDOK            ID OK\n         ICM   R4,B'1111',CBLKNEXT GO TO NEXT ID\n         BNZ   RACICKLP            GO FOR NEXT\nRACICSTC LA    R4,STCUID-L'CBLKNEXT POINT TO UID  (TEST FOR STC)\n         EX    R1,RACINCLC         CLC CBLKUSER(0),0(R5)\n         BE    RACIIDOK            ID OK\n         LA    R4,PRODUID-L'CBLKNEXT POINT TO UID\n         EX    R1,RACINCLC         CLC CBLKUSER(0),0(R5)\n         BE    RACIIDOK            ID OK\n         B     RACIREVK            WHO KNOWS ...\nRACINCLC CLC   CBLKUSER(0),0(R5)   CORE UID VS RACINIT\n*\nRACIIDOK TM    3(R8),X'08'         PASSCHK=NO?\n         BO    RACIACEE            YES, GO MAKE ACEE\n         ICM   R3,B'1111',8(R8)    GO TO RACINIT PASSWORD\n         BZ    RACIINPW            NO PASSWORD -> INVALID\n         MVC   WORKPASS,0(R3)      MOVE PASSWORD\n         XC    WORKPASS+1(8),=C'SECURITY' ENCRYPT\n         IC    R1,CBLKPWDL         LENGTH OF PSWD IN CORE\n         EX    R1,RACICKPW         check password\n         BE    RACIPWOK            password is correct\n         IC    R1,WORKPASS         LENGTH OF PSWD\n         EX    R1,RACISTPW         check STC password\n         BE    RACISSTC            YES, IT IS STC\n         B     RACIINPW            NO, INVALID PWD.\nRACIPWOK EQU   *\nRACICHPW EQU   *\nRACINCL2 EQU   *\n*\n         ICM   R3,15,24(R8)        set new password?\n         BZ    RACIACEE            no, go make ACEE\n         MVC   WORKPASS,0(R3)      yes, move new password\n         XC    WORKPASS+1(8),=C'SECURITY' encrypt\n         IC    R1,WORKPASS         length of new password\n         EX    R1,RACIRPWD         replace password\n         SR    R0,R0               clear R0\n         LA    R1,RAKFPWUP         get command address\n         SVC   34                  execute S RAKFPWUP command\n         B     RACIACEE            go make ACEE\nRAKFPWUP DC    X'000E0000'         parameter list for ..\n         DC    C'S RAKFPWUP'        .. S RAKFPWUP command\nRACIRPWD MVC   CBLKPWDL(1),WORKPASS replace in core password\nRACICKPW CLC   CBLKPWDL(1),WORKPASS check password\nRACISTPW CLC   STCPASS(1),WORKPASS  check STC password\nRACIERR1 MVC   WORKWTO+4(60),WTOMSG1 CJYUSERS INVALID\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         MVC   WORKWTO+4(60),WTOMSG2 STC ACCESS\n         ICM   R5,B'1111',4(R8)    GO TO USERID\n         IC    R1,0(R5)            GET LENGTH\n         EX    R1,RACIWTO1         MOVE NAME FOR WTO\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         B     RACISSTC            ASSUME STC\nRACIWTO1 MVC   WORKWTO+5+WTOMSG2U(0),1(R5) MOVE USERID\n*\nRACINOID CLC   =F'0',X'C'(R8)      STC ?\n         BNE   RACISSTC            YES, DO IT ...\n         CLC   =F'0',X'28'(R8)     TERMID SPEC?\n         BNE   RACIREVK            TSO ---- > REVOKED\n         CLC   =F'0',X'2C'(R8)     JOBNAME SPEC.?\n         BNE   RACISBAT            BATCH, OK ....\n         ICM   R2,B'1111',PSAAOLD   POINT TO ASCB OLD\n         BZ    RACISSTC            ASSUME STC\n         CLC   =F'0',ASCBJBNI-ASCB(R2) JOBNAME SPEC.?\n         BNE   RACISBAT            BATCH, OK ....\nRACISSTC LA    R4,STCUID-L'CBLKNEXT POINT TO UID\n         B     RACIACEE            GO BUILD ACEE\nRACISBAT LA    R4,PRODUID-L'CBLKNEXT POINT TO UID\n         B     RACIACEE            GO BUILD ACEE\n         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - BUILD ACEE'\nRACIACEE LA    R2,255              PRE-FILL WITH LSQA SUBPOOL\n         TM    3(R8),X'10'         S.P. SPEC?\n         BNO   RACINDGM            DO GETMAIN\n         IC    R2,1(R8)            GET SP NUMBER\nRACINDGM GETMAIN RC,LV=ACEEL,SP=(R2) DO GETMAIN\n         LR    ACEEREG,R1          ADDRESS AREA\n         XC    ACEE(ACEEL),ACEE    CLEAR IT\n         MVC   ACEEACEE,=C'ACEE'   ACEE NAME\n         STC   R2,ACEESP           SP OF G.M.\n         MVC   ACEELEN,=AL3(ACEEL) LENGTH\n         MVI   ACEEVRSN,C'1'       VERSION 1\n         MVC   ACEEUSER,CBLKUSER   USERID\n         MVC   ACEEGRP,CBLKGRP     GROUP\n         OI    ACEEFLG1,ACEERACF+ACEECNTL\n         OI    ACEEFLG2,ACEENONE   DEFAULT UACC\n         L     R2,FLCCVT           CVT\n         MVC   ACEEDATE,CVTDATE+1-CVT(R2) MOVE DATE\n         CLI   CBLKFLG1,C'Y'       OPER AUTHORITY\n         BNE   RACINNOP            NO, SORRY ....\n         OI    ACEEFLG1,ACEEOPER   MAKE OPER AUTH.\nRACINNOP ICM   R2,B'1111',X'C'(R8) STC ?\n         BZ    RACINANS            NO, BATCH\n         MVC   ACEEPROC,0(R2)      MOVE PROC NAME FOR STC\nRACINANS ICM   R2,B'1111',X'28'(R8) TERMID SPEC?\n         BZ    RACINNTR            NO, NONE SPEC.\n         MVC   ACEETRID,0(R2)      MOVE PROC NAME FOR STC\nRACINNTR CLM   ACEEREG,B'1000',=X'00' ABOVE THE LINE?\n         BE    RACICGRP            NO, ADD GROUPS\n*\nRACICGRP ICM   R3,B'1111',CBLKGRPS POINTER TO C.GRPS\n         BNZ   RACICGP1            NONE IN PROFS\n         LA    R3,STCGROUP         STC GROUP IF STC\n         CLC   =CL8'STC',ACEEUSRI  STC?\n         BE    RACICGP1            YES, GO ON\n         LA    R3,PRDGROUP         NO USE PRD GROUP\nRACICGP1 LA    R5,ACEECGRP         FIRST POINTER\n         XR    R2,R2               CLEAR R2\n         IC    R2,ACEESP           GET SUBPOOL\nRACICGPL GETMAIN RC,LV=CONNL,SP=(R2)\n         XC    0(CONNL,R1),0(R1)   CLEAR AREA\n         ST    R1,0(R5)            SAVE IN PTR\n         MVC   CONNGRP-CONNGRUP(,R1),CONNGRP-CONNGRUP(R3) THEM TO US\n         LA    R5,CONNNEXT-CONNGRUP(R1) NEXT POINTER\n         ICM   R3,B'1111',CONNNEXT-CONNGRUP(R3) NEXT CONN.\n         BNZ   RACICGPL            NEXT CGRP.\n*\n         CLI   0(R8),X'34'         check length of RACINIT plist\n         BNL   RACIAPPL            -> ge x'34' continue\n         B     RACINSTA            -> lt x'34' store ACEE addr in ASXB\nRACIAPPL ICM   ENTYREG,B'1111',X'30'(R8) ANY APPL REQ?\n         BZ    RACITERM            NO, GO ON\n         MVC   WORKCLAS,=CL8'APPL' APPL CLASS\n         MVI   WORKAUTH,RACFREAD   READ REQ\n         BAL   R10,ENTYCHCK        CHECK ENTITY\n         B     RACITERM            0 -> OK\n         B     RACITERM            4 -> OK\n         B     RACIFAPL            8 -> NG\n*\nRACITERM ICM   ENTYREG,B'1111',X'28'(R8) ANY APPL REQ?\n         BZ    RACIALOK            NO, GO ON\n         MVC   WORKCLAS,=CL8'TERMINAL' TERM CLASS\n         MVI   WORKAUTH,RACFREAD   READ REQ\n         BAL   R10,ENTYCHCK        CHECK ENTITY\n         B     RACIALOK            0 -> OK\n         B     RACIALOK            4 -> OK\n         B     RACIFTRM            8 -> NG\n*\nRACIALOK ICM   R2,B'1111',X'34'(R8) ACEE PTR\n         BZ    RACINSTA            SAVE ACEE\n         ST    ACEEREG,0(R2)       SAVE ACEE ADDRESS\n         B     RACIGOOD            OK ..........\nRACINSTA EQU   *\n         L     R2,PSAAOLD          ADDRESS ASCB\n         L     R2,ASCBASXB-ASCB(R2) ADDRESS ASCB\n         ST    ACEEREG,ASXBSENV-ASXB(R2) STORE IN ASXB\n         B     RACIGOOD            OK ..........\n*\n         DROP  R4\n         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - DEL. ACEE'\nRACINDEL ICM   R2,B'1111',X'34'(R8) ACEE PTR\n         BZ    RACIDNAC            DELETE, NO ACEE\n         L     ACEEREG,0(R2)       GET ACEE ADDRESS\n         B     RACINFRE            GO DO FREEMAIN\nRACIDNAC EQU   *\n         L     R2,PSAAOLD          OUR ASCB\n         L     R2,ASCBASXB-ASCB(R2) OUR ASXB\n         C     ACEEREG,ASXBSENV-ASXB(R2) ACEE SAME?\n         BNE   RACINTDM            NO, GO DO FREE\n         XC    ASXBSENV-ASXB(,R2),ASXBSENV-ASXB(R2) YES, CLEAR\n         B     RACINFRE            GO FREE ACEE\n*\nRACINTDM L     R2,PSAAOLD          OUR ASCB\n         L     R2,ASCBASXB-ASCB(R2) OUR ASXB\n         ICM   ACEEREG,B'1111',ASXBSENV-ASXB(R2) ACEE\n         BZ    RACIGOOD            ASXB & TCB  BOTH DUMMY\n         XC    ASXBSENV-ASXB(,R2),ASXBSENV-ASXB(R2) CLEAR ASXB\nRACINFRE ICM   R2,B'1111',ACEEIEP  ANY OTHER F.M?\n         BZ    RACINIEP            NO, SO BYE...\n         XR    R3,R3               CLEAR R3\n         IC    R3,0(R2)            SUBPOOL\n         XR    R4,R4               CLEAR R4\n         ICM   R4,B'0111',1(R2)    LENGTH\n         FREEMAIN RC,A=(R2),SP=(R3),LV=(R4) FREE ????\n*\nRACINIEP XR    R2,R2               CLEAR R2\n         IC    R2,ACEESP           SUBPOOL\n         LA    R3,CONNL            CLEAR R3\n         L     R5,ACEECGRP         CONN. GROUPS\n         B     RACIFCN2            START FREEMAINS\nRACIFCNL L     R5,CONNNEXT-CONNGRUP(R4) LOOP THRU OLD TABLE\n         FREEMAIN RC,A=(R4),SP=(R2),LV=(R3) FREE ACEE\nRACIFCN2 LTR   R4,R5               MORE ENTRIES?\n         BNZ   RACIFCNL             Y - NEXT ENTRY\n*\nRACINCGP XR    R2,R2               CLEAR R2\n         IC    R2,ACEESP           SUBPOOL\n         XR    R3,R3               CLEAR R3\n         ICM   R3,B'0111',ACEELEN  LENGTH\n         FREEMAIN RC,A=(ACEEREG),SP=(R2),LV=(R3) FREE ACEE\n         B     RACIGOOD            GO TO GOOD RETURN CODE\n         TITLE 'RACINIT PROCESS. (GET INTO/OUT OF SYSTEM) - BYEEEE'\nRACIGOOD XC    SAFPRRET,SAFPRRET   NOTHING ...\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         XC    WORKPASS,WORKPASS   CLEAR JUST IN CASE\n         MODESET KEYADDR=WORKKEY,WORKREG=2\n         TM    WORKFLAG,WORKSUPO   SUP. ON\n         BNO   RTRNGOOD            NO, GO TO RC 200 CODE\n         MODESET MODE=PROB         SET STATE\n         B     RTRNGOOD            GO TO RC 200 CODE\n*\nRACIUNKN MVC   SAFPRRET,=F'04'     NOT PROTECTED ...\n         MODESET KEYADDR=WORKKEY,WORKREG=2\n         TM    WORKFLAG,WORKSUPO   SUP. ON\n         BNO   RTRNWARN            NO, GO TO RC 204 CODE\n         MODESET MODE=PROB         SET STATE\n         B     RTRNWARN            GO TO RC 204 CODE\n*\nRACIINPW MVC   SAFPRRET,=F'08'     invalid or no password entered\n         XC    WORKPASS,WORKPASS   clear just in case\n         B     RACIFAIL            BRANCH TO FAIL COMMON\n*\nRACIREVK MVC   SAFPRRET,=F'28'     REVOKED....\n         B     RACIFAIL            BRANCH TO FAIL COMMON\n*\nRACIFAPL MVC   SAFPRRET,=F'52'     NOT AUTH TO APPL...\n         B     RACIFAFM            FAIL & FREEMAIN\nRACIFTRM MVC   SAFPRRET,=F'48'     NOT AUTH TO TERM...\n*\nRACIFAFM ICM   R4,B'1111',ACEECGRP CONN. GROUPS\n         BZ    RACIFACF            NO, GO FREEMAIN ACEE\n         XR    R2,R2               CLEAR R2\n         IC    R2,ACEESP           SUBPOOL\n         LA    R3,CONNL            CLEAR R3\n         B     RACIFAG2            BYPASS MOVE\nRACIFAGL L     R5,CONNNEXT-CONNGRUP(R4) LOOP THRU OLD TABLE\n         FREEMAIN RC,A=(R4),SP=(R2),LV=(R3) FREE ACEE\nRACIFAG2 LTR   R4,R5               MORE ENTRIES?\n         BNZ   RACIFAGL             Y - NEXT ENTRY\n*\nRACIFACF XR    R2,R2               CLEAR R2\n         IC    R2,ACEESP           SUBPOOL\n         XR    R3,R3               CLEAR R3\n         ICM   R3,B'0111',ACEELEN  LENGTH\n         FREEMAIN RC,A=(ACEEREG),SP=(R2),LV=(R3) FREE ACEE\n         B     RACIFAIL            BRANCH TO FAIL COMMON\n*\nRACIFAIL MODESET KEYADDR=WORKKEY,WORKREG=2\n         TM    WORKFLAG,WORKSUPO   SUP. ON\n         BNO   RACINPWF            no  --> check for WTO suppression\n         MODESET MODE=PROB         SET STATE\nRACINPWF CLC   SAFPRRET,=F'08'     invalid or no password entered?\n         BNE   RACIFWTO            no  --> write message\n         LTR   R3,R3               yes --> no password entered?\n         BZ    RTRNFAIL            yes --> don't write message\nRACIFWTO MVC   WORKWTO+4(60),WTOMSG4  ATTEMPTED ACCESS\n         ICM   R5,B'1111',4(R8)    GO TO USERID\n         IC    R1,0(R5)            GET LENGTH\n         EX    R1,RACIWTO2         MOVE NAME FOR WTO\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         XC    SAFPRREA,SAFPRREA   NOTHING ...\n         XC    WORKPASS,WORKPASS   CLEAR JUST IN CASE\n         B     RTRNFAIL            BYE ............\nRACIWTO2 MVC   WORKWTO+4+WTOMSG4U(0),1(R5) MOVE USERID\n         TITLE 'ALL ROADS LEAD HERE'\nRTRN0000 LA    R15,0               RC = 0\n         B     RTRNRTRN            GO BACK\n*\nRTRNGOOD LA    R15,0               RACF RC=0\n         B     RTRNRTRN            GO BACK\n*\nRTRNWARN LA    R15,0               RACF RC=4\n         B     RTRNRTRN            GO BACK\n*\nRTRNFAIL LA    R15,0               RACF RC=8\n         B     RTRNRTRN            GO BACK\n*\nRTRNRTRN L     R13,WORKSAVE+4      RETURN R13\n         RETURN (14,12),RC=(15)    BYE\n*\n         TITLE 'CHECK FOR ACCESS'\nENTYCHCK L     R2,FLCCVT           LOAD CVT\n         ICM   R2,B'1111',CVTRAC-CVTMAP(R2) CHECK RCVT\n         BZ    ENTYERR1            WHO KNOWS?\n         ICM   R2,B'1111',RCVTISTL-RCVT(R2) OUR STUFF?\n         BZ    ENTYERR1            WHO KNOWS?\n         ICM   R2,B'1111',CJYPROFS-CJYRCVTD(R2) OUR STUFF?\n         BZ    ENTYERR1            WHO KNOWS?\n         USING RPECBLK,R2          ADDRESS CBLK\n         CLC   WORKCLAS(8),=CL8' '    CLASS blank?\n         BNE   ENTYNBLK                  --> no, continue\n         MVC   WORKCLAS(8),=CL8'DATASET' --> yes, assume DATASET\nENTYNBLK CLC   =C'DATASET',WORKCLAS  CHECK FOR OUR OWN DSNS.\n         BNE   ENTYCLLP            NO, GO ON\n         IC    R1,ACEEUSRL         GET LENGTH\n         BCTR  R1,0                DOWN 1 FOR CLC\n         EX    R1,ENTYEXUS         CLC 0(0,ENTYREG),ACEEUSRN\n         BE    AUTHGOOD            GO FOR IT\n         CLC   0(3,ENTYREG),=C'SYS' is it a ..\n         BNE   ENTYCLLP              --> no\n         CLC   8(2,ENTYREG),=C'.T'            .. temporary ..\n         BNE   ENTYCLLP              --> no\n         CLC   16(3,ENTYREG),=C'.RA'                         .. dataset\n         BNE   ENTYCLLP              --> no, go on\n         B     AUTHGOOD              --> yes, go for it\nENTYCLLP IC    R1,RPECLASL         GET LENGTH\n         BCTR  R1,0                SUBTRACT 1 FOR CLC\n         EX    R1,ENTYEXEC         CLC RPECLASN(0),WORKCLAS\n         BL    ENTYNFND            NOT FOUND\n         BNE   ENTYNCLS            NO, GET NEXT\n         ICM   R1,B'0001',RPEENTYL GET LENGTH\n         BZ    ENTYENFN            '*' ONLY ENTITY?\n         BCTR  R1,0                NO, SUBTRACT 1 FOR CLC\n         EX    R1,ENTYEXEN         CLC RPEENTYN(0),0(ENTYREG)\n         BE    ENTYENFN            FOUND ENTITY\nENTYNCLS ICM   R2,B'1111',RPENEXT  GET NEXT\n         BNZ   ENTYCLLP            GO FOR NEXT\nENTYNFND B     ENTYWARN            RETURN WARN\nENTYEXEC CLC   RPECLASN(0),WORKCLAS SAME CLASS?\nENTYEXEN CLC   RPEENTYN(0),0(ENTYREG) CHECK ENTITY\nENTYEXUS CLC   0(0,ENTYREG),ACEEUSRI US?\n*\nENTYENFN ICM   R3,B'1111',RPEACCPT POINTER TO ACCESSES\n         BZ    ENTYUACC            GO CHECK UACC\n*\n         USING RPEACCLE,R3         VARIABLE SECTION\nENTYULOP CLC   RPEAUSR,ACEEUSRI    USER EXCEPTION?\n         BE    ENTYEXCP            MATCH, GO CHECK\n         ICM   R3,B'1111',RPEANEXT NEXT POINTER\n         BNZ   ENTYULOP            GO CHECK NEXT\n*\nENTYCONN ICM   R4,B'1111',ACEECGRP CONNECT GROUPS\n         BZ    ENTYUACC            NONE, GO ON\n         USING CONNGRUP,R4         ADDRESS IT\nENTYCONL L     R3,RPEACCPT         GET POINTER AGAIN\nENTYCON2 CLC   RPEAUSR,CONNGRPN    GROUP EXCEPTION?\n         BNE   ENTYNCRP            NO, NEXT RPE\n         OI    WORKFLAG,WORKOPRB   SET OPER BYPASS\n         CLC   WORKAUTH,RPEACS     SUFFICENT ACCESS IN PERMIT?\n         BH    ENTYNCRP            NO, CHECK NEXT AUTH.\n         B     AUTHGOOD            YES, GO ON ...\nENTYNCRP ICM   R3,B'1111',RPEANEXT NEXT POINTER\n         BNZ   ENTYCON2            GO CHECK NEXT EXCEPTION\nENTYNCON ICM   R4,B'1111',CONNNEXT NEXT POINTER\n         BNZ   ENTYCONL            GO CHECK NEXT CONNECT\n         TM    WORKFLAG,WORKOPRB   BYPASS OPER CHECK?\n         BNO   ENTYUACC            NO, GO UACC\n         B     ENTYFAIL            ALL CONN.S FAILED\n*\nENTYUACC CLC   WORKAUTH,RPEUACC    SUFFICENT ACCESS IN UACC?\n         BH    ENTYOPER            NO, RETURN CHECK FOR OP. AUTH\n         B     AUTHGOOD            YES, GO ON ...\n*\nENTYEXCP CLC   WORKAUTH,RPEACS     SUFFICENT ACCESS IN PERMIT?\n         BH    ENTYFAIL            NO, RETURN CHECK FOR OP. AUTH\n         B     AUTHGOOD            YES, GO ON ...\n*\nENTYOPER CLC   =C'DATASET',RPECLASN  DATASET CLASS\n         BE    ENTYOPR2            YES, CHECK OPER AUTH\n         CLC   =C'DASDVOL',RPECLASN DASDVOL CLASS\n         BE    ENTYOPR2            YES, CHECK OPER AUTH\n         B     ENTYFAIL            TOUGH\nENTYOPR2 TM    ACEEFLG1,ACEEOPER   MAKE OPER AUTH.\n         BNO   ENTYFAIL            TOUGH\n*\n         DROP  R4,R3,R2\n         CLC   =C'PROD',ACEEUSRI   PROD USERID?\n         BNE   AUTHGOOD            NO MSG NEC. -> OPER ALLOWED\n         TM    WORKFLAG,WORKNLOG   NO LOG REQUESTED?\n         BO    AUTHGOOD            YES, NO MESS..\n         MVC   WORKWTO+4(60),WTOMSG7 INVALID ACCESS TO RESOURCE\n         MVC   WORKWTO+4+WTOMSG7U(L'WTOMSG7U),ACEEUSRI MOVE USERID\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON\n         MVC   WORKWTO+4(9),=C'RAKF0006 ' USERID/CLASS\n         BAL   R11,ENTYENTY        ENTY COMMON\n         B     AUTHGOOD            ALLOW ACCESS\n*\nENTYERR1 MVC   WORKWTO+4(60),WTOMSG3 PROFS IN ERROR\n         MVC   WORKWTO+4+WTOMSG3U(L'WTOMSG3U),ACEEUSRI MOVE USERID\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON\n         MVC   WORKWTO+4(9),=C'RAKF0009 ' USERID/CLASS\n         BAL   R11,ENTYENTY        ENTY COMMON\n         B     AUTHGOOD            ALLOW ACCESS\n*\nENTYWARN OI    WORKENTY,4          RC = 4\n         TM    WORKFLAG,WORKNLOG   NO LOG REQUESTED?\n         BO    AUTHWARN            SORRY ....\n         MVC   WORKWTO+4(60),WTOMSG8 INVALID ACCESS TO RESOURCE\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON\n         MVC   WORKWTO+4(9),=C'RAKF000B ' USERID/CLASS\n         BAL   R11,ENTYENTY        ENTY COMMON\n         B     AUTHGOOD            ALLOW ACCESS\n*\nENTYFAIL OI    WORKENTY,8          RC = 8\n         TM    WORKFLAG,WORKNLOG   NO LOG REQUESTED?\n         BO    AUTHFAIL            SORRY ....\n         MVC   WORKWTO+4(60),WTOMSG5 INVALID ACCESS TO RESOURCE\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         MVC   WORKWTO+4(60),WTOMSGE ENTITY SKELETON\n         MVC   WORKWTO+4(9),=C'RAKF000A ' USERID/CLASS\n         BAL   R11,ENTYENTY        ENTY COMMON\n         B     AUTHFAIL            FAIL ACCESS\n*\nENTYENTY MVC   WORKWTO+4+WTOMSGEU(L'WTOMSGEU),ACEEUSRI MOVE USERID\n         MVC   WORKWTO+4+WTOMSGEC(L'WTOMSGEC),WORKCLAS MOVE CLASS\n         L     R2,PSAAOLD          ASCB ADDRESS\n         ICM   R3,B'1111',ASCBJBNI-ASCB(R2) JOBNAME SPEC.?\n         BNZ   ENTYJOBN            YES, GO USE NAME\n         L     R3,ASCBJBNS-ASCB(R2) STC ... NAME\nENTYJOBN MVC   WORKWTO+4+WTOMSGEJ(L'WTOMSGEJ),0(R3) MOVE JOBNAME\n         LA    R1,43               DEFAULT ENTITY LEN.\n         CLC   =C'DATASET',WORKCLAS CLASS = DATASET\n         BE    ENTYWTO1            GO DO WTO\n         LA    R1,5                LEN = 6\n         CLC   =C'VOL',WORKCLAS+4  CLASS = DASDVOL/TAPEVOL\n         BE    ENTYWTO1            DO WTO ...\n         LA    R1,38               FACILITY = 39\n         CLC   =C'FACILITY',WORKCLAS CLASS=FACILITY\n         BE    ENTYWTO1            DO WTO ...\n         LA    R1,7                ALL ELSE = 8\nENTYWTO1 LA    R2,L'WTOMSGEE-1     MAX LENGTH\n         CR    R2,R1               TOO MUCH ?\n         BH    ENTYWTO2            NO, ITS OK\n         LR    R1,R2               SORRY, MOVE MAX\nENTYWTO2 EX    R1,ENTYERRX         MVC WORKWTO+4+WTOMSGEE(0),0(ENTYREG)\n         WTO   MF=(E,WORKWTO)      WRITE IT\n         BR    R11                 RETURN\n*\nENTYERRX MVC   WORKWTO+4+WTOMSGEE(0),0(ENTYREG) MOVE ENTITY\n*\n         TITLE 'CONSTANTS AND SUCH'\n         LTORG\n*\nSTCUID   DC    AL4(0),X'03',CL8'STC',X'08',C'STCGROUP'\nSTCPASS  DC    X'08251C06253A1F362D',C'Y'\nSTCGROUP DC    AL4(0),AL1(8),CL8'STCGROUP'\nPRODUID  DC    AL4(0),X'04',CL8'PROD',X'08',C'PRDGROUP'\nPRODPASS DC    X'08251C06253A1F362D',C'N'\nPRDGROUP DC    AL4(0),AL1(8),CL8'PRDGROUP'\n*\nREALWTO  WTO   '1234567 101234567 201234567 301234567 401234567 5012345X\n               67 60',MF=L\nREALWTOL EQU   *-REALWTO           LENGTH\n*\nWTOMSG1  DC    CL60'RAKF0001 USERID TABLE INVALID OR MISSING'\nWTOMSG2  DC    C'RAKF0002 STC ACCESS ALLOWED: USER:'\nWTOMSG2U EQU   *-WTOMSG2,8\n         DC    CL8' ',CL(60-(*-WTOMSG2))' '\nWTOMSG3  DC    C'RAKF0003 RESOURCE TABLE INVALID/MISSING: ALLOWED:'\n*        DC    C': USER ALLOWED:'\nWTOMSG3U EQU   *-WTOMSG3,8\n         DC    CL8' ',CL(60-(*-WTOMSG3))' '\nWTOMSG4  DC    C'RAKF0004 INVALID ATTEMPT TO ACCESS SYSTEM:  USER:'\nWTOMSG4U EQU   *-WTOMSG4,8\n         DC    CL8' ',CL(60-(*-WTOMSG4))' '\nWTOMSG5  DC    CL60'RAKF0005 INVALID ATTEMPT TO ACCESS RESOURCE'\nWTOMSG7  DC    C'RAKF0007 ACCESS ALLOWED VIA OPERATIONS:  USER:'\nWTOMSG7U EQU   *-WTOMSG7,8\n         DC    CL8' ',CL(60-(*-WTOMSG7))' '\nWTOMSG8  DC    CL60'RAKF0008 UNDEFINED RESOURCE - ACCESS ALLOWED'\nWTOMSGE  DC    C'XXXXXXXXX '\nWTOMSGEU EQU   *-WTOMSGE,8\n         DC    CL8' ',C','\nWTOMSGEJ EQU   *-WTOMSGE,8\n         DC    CL8' ',C','\nWTOMSGEC EQU   *-WTOMSGE,8\n         DC    CL8' ',C','\nWTOMSGEE EQU   *-WTOMSGE,20\n         DC    CL20' ',CL(60-(*-WTOMSGE))' '\n         DC    CL133' '\n         DC    C'                                              '\n         DC    C'                                              '\n         DC    C'                                              '\n         DC    C'         0123456789ABCDEF'\n         TITLE 'REGISTERS AND SUCH'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nENTYREG  EQU   6\nACEEREG  EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT NOGEN\n         TITLE 'DSECTS AND SUCH'\nWORKAREA DSECT                     150 BYTE AREA\nWORKSAVE DS    18F                 SAVE AREA\nWORKWTO  DS    XL(REALWTOL)        FOR WTO\nWORKKEY  DS    X                   RACINIT KEY SAVE\nWORKENTY DS    X                   ENTITY RETURN\nWORKFLAG DS    X                   FLAG BYTES\nWORKSUPO EQU   X'80'                  WE SET SUPERVISOR STATE\nWORKNLOG EQU   X'40'                  NO LOG IF FAILURE\nWORKOPRB EQU   X'20'                  RPE MATCH ON USERID/CLASS\nWORKPASS DS    XL9                 RACINIT LEN/PSWD\n         ORG   WORKPASS\nWORKCLAS DS    XL8                 RACHECK/DEF/FRAC CLASS\nWORKAUTH DS    X                   RACHECK/DEF/FRAC AUTHORITY REQ.\n         ORG\n         DS    XL(150-(*-WORKAREA)) MAKE SURE\nWORKAREL EQU   *-WORKAREA           S.B 150\n*\nAUTHDS   DSECT                     USED FOR RETURN FROM SUBS(R10)\nAUTHGOOD DS    F'0'\nAUTHWARN DS    F'0'\nAUTHFAIL DS    F'0'\n*\n         COPY  CJYUCBLK            USERID CBLK\n*\n         COPY  CJYPCBLK            PROFILE CBLK\n*\n         COPY  CJYRCVTD            RCVT CBLK\n*\n         CVT     DSECT=YES,LIST=NO\n         ICHACHKL\n         ICHPRCVT\n         ICHRDDFL\n         ICHSAFP\n         IEFAJCTB\n         IEZJSCB\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\n         IHACDE\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n         IKJTCB  DSECT=YES,LIST=NO\n         IHAACEE\nACEEL    EQU   *-ACEE\n         END\n./ ADD NAME=IGC0013A 0200-90250-11093-0000-00091-00048-00091-*RAKF*\n         TITLE 'ESG-SECURITY  SVC 131'\n* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF013A\n*      DD DSN=SYS1.MACLIB,DISP=SHR\n*      DD DSN=SYS1.MODGEN,DISP=SHR\n         EJECT\nRAKF013A CSECT\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n         USING RAKF013A,R6         SVC ENTRY R6 = EP.\n         LR    R9,R1               SAVE ENTRY REG.\n         LR    R8,R14              SAVE RETURN REG.\n         GETMAIN RC,LV=GMLEN       GET STORAGE\n         LR    R13,R1              LOAD REGISTER 13 WITH GETMAINED PTR\n         USING WORKAREA,R13        SET UP DATA DSECT ADDR.\n         MVC   RACRGM,RACRREAL     MOVE RACROUTE\n*\n         L     R15,PSATOLD-PSA(0)  ADDRESS TCB\n         L     R15,TCBRBP-TCB(R15) ADDRESS RB\n         XR    R14,R14             CLEAR R14\n         ICM   R14,B'0111',RBLINKB-RBSECT(R15) PRIOR RB\n*\n         LR    R10,R9              SAVE ENTRY REG.\n         ICM   R10,B'1000',=X'00'  CLEAR HIGH ORDER OF PARM ADDR.\n         MVC   RACRGM+RACRLEN-RACILEN(RACILEN),0(R10) MOVE PARM\n         NC    RACRGM+RACRLEN-RACILEN+4(52),=13X'00FFFFFF'\nSTRTSAFR LA    R5,SAFWORK          FOR SAF\n         RACROUTE REQUEST=VERIFY,WORKA=(R5),MF=(E,RACRGM)\n         L     R3,RACRGM           RACINIT RETURN CODE\n         L     R4,RACRGM+4         RACINIT REASON CODE\n*\nRTRNFREE FREEMAIN RC,LV=GMLEN,A=(R13)\n         LR    R15,R3              RETURN CODE\n         LR    R0,R4               REASON CODE\n         LR    R1,R9               RETURN R1\n         BR    R8                  RETURN TO ORIG. R14\n         LTORG\n*\nRACRREAL RACROUTE REQUEST=VERIFY,MF=L\nRACRLEN  EQU   *-RACRREAL\nRACINIT  RACINIT MF=L              THIS IS JUST FOR THE LENGTH\nRACILEN  EQU   *-RACINIT\n*\nWORKAREA DSECT\nSAVEAREA DS     18F\nSAFWORK  DS     XL512\nRACRGM   DS     XL(RACRLEN)\nGMLEN    EQU    *-WORKAREA\n         PRINT  NOGEN\n         YREGS\n         CVT     DSECT=YES,LIST=NO\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n         IKJTCB  DSECT=YES,LIST=NO\n         END\n./ ADD NAME=IGC0013C 0200-90250-11093-0000-00089-00048-00089-*RAKF*\n         TITLE 'ESG-SECURITY  SVC 133'\n* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF013C\n*      DD DSN=SYS1.MACLIB,DISP=SHR\n*      DD DSN=SYS1.MODGEN,DISP=SHR\n         EJECT\nRAKF013C CSECT\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n         USING RAKF013C,R6         SVC ENTRY R6 = EP.\n         LR    R9,R1               SAVE ENTRY REG.\n         LR    R8,R14              SAVE RETURN REG.\n         GETMAIN RC,LV=GMLEN       GET STORAGE\n         LR    R13,R1              LOAD REGISTER 13 WITH GETMAINED PTR\n         USING WORKAREA,R13        SET UP DATA DSECT ADDR.\n         MVC   RACRGM,RACRREAL     move RACROUTE\n*\n         L     R15,PSATOLD-PSA(0)  ADDRESS TCB\n         L     R15,TCBRBP-TCB(R15) ADDRESS RB\n         XR    R14,R14             CLEAR R14\n         ICM   R14,B'0111',RBLINKB-RBSECT(R15) PRIOR RB\n*\n         LR    R10,R9              SAVE ENTRY REG.\n         ICM   R10,B'1000',=X'00'  CLEAR HIGH ORDER OF PARM ADDR.\n         MVC   RACRGM+RACRLEN-RACDLEN(RACDLEN-8),0(R10) MOVE PARM\n         NC    RACRGM+RACRLEN-RACDLEN+8(28),=7X'00FFFFFF'\n         NC    RACRGM+RACRLEN-RACDLEN+40(8),=7X'00FFFFFF'\n*\nSTRTSAFR LA    R5,SAFWORK          FOR SAF\n         RACROUTE REQUEST=DEFINE,WORKA=(R5),MF=(E,RACRGM)\n         L     R3,RACRGM           RACDEF RETURN CODE\n         L     R4,RACRGM+4         RACDEF REASON CODE\n*\nRTRNFREE FREEMAIN RC,LV=GMLEN,A=(R13)\n         LR    R15,R3              RETURN CODE\n         LR    R0,R4               REASON CODE\n         LR    R1,R9               RETURN R1\n         BR    R8                  RETURN TO ORIG. R14\n         LTORG\nRACRREAL RACROUTE REQUEST=DEFINE,MF=L\nRACRLEN  EQU   *-RACRREAL\nRACDEF   RACDEF MF=L               THIS IS JUST FOR THE LENGTH\n         DC    A(0)       INSTALLATION DATA ADDRESS (missing in RACDEF)\n         DC    A(0)       ENTITY NAME ADDR FIELD    (missing in RACDEF)\nRACDLEN  EQU   *-RACDEF\n*\nWORKAREA DSECT\nSAVEAREA DS     18F\nSAFWORK  DS     XL512\nRACRGM   DS     XL(RACRLEN)\nGMLEN    EQU    *-WORKAREA\n         PRINT  NOGEN\n         YREGS\n         CVT     DSECT=YES,LIST=NO\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n         IKJTCB  DSECT=YES,LIST=NO\n         END\n./ ADD NAME=IGC00130 0200-90250-11093-0000-00092-00048-00092-*RAKF*\n         TITLE 'ESG-SECURITY  SVC 130'\n* CPARM='XREF(SHORT),OBJ,NODECK,RENT',LPARM='RENT'            RAKF0130\n*      DD DSN=SYS1.MACLIB,DISP=SHR\n*      DD DSN=SYS1.MODGEN,DISP=SHR\n         EJECT\nRAKF0130 CSECT\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n         USING RAKF0130,R6         SVC ENTRY R6 = EP.\n         LR    R9,R1               SAVE ENTRY REG.\n         LR    R8,R14              SAVE RETURN REG.\n         GETMAIN RC,LV=GMLEN       GET STORAGE\n         LR    R13,R1              LOAD REGISTER 13 WITH GETMAINED PTR\n         USING WORKAREA,R13        SET UP DATA DSECT ADDR.\n         MVC   RACRGM,RACRREAL     MOVE RACROUTE\n*\n         L     R15,PSATOLD-PSA(0)  ADDRESS TCB\n         L     R15,TCBRBP-TCB(R15) ADDRESS RB\n         XR    R14,R14             CLEAR R14\n         ICM   R14,B'0111',RBLINKB-RBSECT(R15) PRIOR RB\n*\n         LR    R10,R9              SAVE ENTRY REG.\n         ICM   R10,B'1000',=X'00'  CLEAR HIGH ORDER OF PARM ADDR.\n         MVC   RACRGM+RACRLEN-RACCLEN(RACCLEN),0(R10) MOVE PARM\n         NC    RACRGM+RACRLEN-RACCLEN+16(40),=10X'00FFFFFF'\nSTRTSAFR LA    R5,SAFWORK          FOR SAF\n         RACROUTE REQUEST=AUTH,WORKA=(R5),MF=(E,RACRGM)\n         L     R3,RACRGM           RACHECK RETURN CODE\n         L     R4,RACRGM+4         RACHECK REASON CODE\n*\nRTRNFREE FREEMAIN RC,LV=GMLEN,A=(R13)\n         LR    R15,R3              RETURN CODE\n         LR    R0,R4               REASON CODE\n         LR    R1,R9               RETURN R1\n         USING ACHKLIST,R9         RACHECK parameter list\n         TM    ACHKFLG1,ACHKCSA    profile to be returned in CSA?\n         BNO   RETURN              no  --> exit\n         XR    R1,R1               yes --> return zero address to\n*                                          signal unsupported function\nRETURN   BR    R8                  RETURN TO ORIG. R14\n         LTORG\nRACRREAL RACROUTE REQUEST=AUTH,MF=L\nRACRLEN  EQU   *-RACRREAL\nRACHECK  RACHECK MF=L              THIS IS JUST FOR THE LENGTH\nRACCLEN  EQU   *-RACHECK\n*\nWORKAREA DSECT\nSAVEAREA DS     18F\nSAFWORK  DS     XL512\nRACRGM   DS     XL(RACRLEN)\nGMLEN    EQU    *-WORKAREA\n         PRINT  NOGEN\n         YREGS\n         CVT     DSECT=YES,LIST=NO\n         IHAPSA  DSECT=YES\n         IKJRB   DSECT=YES\n         IKJTCB  DSECT=YES,LIST=NO\n         ICHACHKL\n         END\n./ ADD NAME=RAKFPROF 0200-90289-11093-0000-00267-00242-00267-*RAKF*\n         TITLE 'ESG-SECURITY DATA PROFILE PROCESSOR'\n* CPARM='XREF(SHORT),OBJ,NODECK',LPARM='AC=1'                 CJYRPROF\n*      DD DSN=SYS1.MACLIB,DISP=SHR\n*      DD DSN=SYS1.MODGEN,DISP=SHR\n*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR\n         EJECT\n         MACRO\n&LABEL   BASMAC &R1,&S2\n&LABEL.  DC    0XL4'00',X'4D',AL.4(&R1.,0),S(&S2.)\n         MEND\nCJYRPROF CSECT\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n         SAVE  (14,12),,CJYRPROF_&SYSDATE._&SYSTIME._\n         LR    R12,R15                 SETUP BASE REG.\n         USING CJYRPROF,R12            ESTABLISH ADDRESSABILITY\n         LA    R11,SAVEAREA            OUR SAVEAREA\n         ST    R13,SAVEAREA+4          SAVE HIGH SAVEAREA\n         ST    R11,8(R13)              SAVE LOW SAVEAREA\n         LR    R13,R11                 POINT TO OUR SAVEAREA\n         L     R8,FLCCVT-PSA(R0)       GET CVT POINTER\n         ICM   R8,B'1111',CVTRAC-CVTMAP(R8) IS RCVT POINTER ZERO?\n         BZ    NOGOOD                       YES, ABEND\n         ICM   R8,B'1111',RCVTISTL-RCVT(R8) IS POINTER TO OUR AREA 0?\n         BZ    NOGOOD                       YES, ABEND\n*\n         USING CJYRCVTD,R8\nOK2GO    DS    0H                      NO, CONTINUE\n         ENQ   (SECURITY,PROFS,E,,SYSTEM),RET=HAVE\n         OPEN  (CJYPDATA,(INPUT))      OPEN INPUT FILE\n         MODESET MODE=SUP,KEY=ZERO     authorize ourselves\n*\nREADLOOP DS    0H\n         MVC   INRECOLD,INRECNEW       SAVE OLD I/P FOR COMPARE\n         GET   CJYPDATA,INRECNEW\n         CLC   INRECNEW(ACCAUTH-INREC),INRECOLD  NEXT REC. > PREV?\n         BNH   OUTOFORD                          NO, NOT SORTED\n         CLC   INRECNEW(GROUPID-INREC),INRECOLD  SAME CLASS/ENTITY?\n         BE    PERMBLD                 YES, BUILD PERMIT RECORD\n         CLC   =CL8' ',GROUPID         IS THIS A UNIVERSAL RECORD?\n         BNE   NOUAR                   NO, A PERMIT WITHOUT UAR - ABEND\n         GETMAIN RU,LV=RPEL,SP=241\n         LR    R10,R1                  ESTABLISH ADDRESSABILITY\n         USING RPECBLK,R10               TO RPE\n         XC    RPECBLK(RPEL),RPECBLK   INITIALIZE TO BINARY ZEROES\n         MVC   RPENEXT,LASTRPE         POINT TO PREVIOUS RPE\n         ST    R10,LASTRPE             SAVE -> THIS RPE\n         LA    R11,RPEACCPT            SET PERMIT ANCHOR\n         LA    R1,L'RPECLASN           DEFAULT LENGTH IF NOTFOUND\n         TRT   CLASS,TRTTEST           SEARCH CLASS - BLANKS FOUND?\n         BZ    NOBLANKS                NO, LENGTH ALREADY IN R1\n         S     R1,=A(CLASS)            CALCULATE LENGTH OF DATA\nNOBLANKS DS    0H\n         STC   R1,RPECLASL             SAVE LENGTH\n         MVC   RPECLASN,CLASS            AND CLASS NAME\n         XR    R2,R2                   CLEAR R2 FOR NOTFOUND\n         LA    R4,38                   PRESET LENGTH FOR FACILITY\n         CLC   =CL8'FACILITY',RPECLASN IS IT FACILITY?\n         BE    TESTENT                 YES, TRT\n         LA    R4,5                    PRESET LENGTH FOR DASDVOL\n         CLC   =CL8'DASDVOL',RPECLASN  IS IT DASDVOL?\n         BE    TESTENT                 YES, TRT\n         LA    R4,5                    PRESET LENGTH FOR TAPEVOL\n         CLC   =CL8'TAPEVOL',RPECLASN  IS IT TAPEVOL?\n         BE    TESTENT                 YES, TRT\n         LA    R4,43                   PRESET LENGTH FOR DATASET\n         CLC   =CL8'DATASET',RPECLASN  IS IT DATASET?\n         BE    TESTENT                 YES, TRT\n         LA    R4,7                    DEFAULT LENGTH IF NOTFOUND\nTESTENT  DS    0H\n         LA    R1,1(R4)                DEFAULT LENGTH FOR SUBTRACTION\n         EX    R4,TRT                  EXECUTE THE TRT\n         B     CONT\nTRT      TRT   ENTITY(*-*),TRTTEST     SEARCH ENTITY FOR BLANK/*\nCONT     DS    0H\n         B     BRANCTBL(R2)            AND WE FOUND...\nBRANCTBL DS    0H\n         B     NOTFND                  ... NO BLANKS/NO ASTERISKS\n         B     ASTRKFND                ... AN ASTERISK\n         B     BLANKFND                ... A BLANK\nBLANKFND DS    0H\n         LA    R1,1(R1)                ADD 1 TO INCLUDE BLANK IN LENGTH\nASTRKFND DS    0H\n         S     R1,=A(ENTITY)           CALCULATE LENGTH\nNOTFND   DS    0H                      IF NOTFOUND LENGTH ALREADY IN R1\n         STC   R1,RPEENTYL             SAVE LENGTH\n         MVC   RPEENTYN,ENTITY           AND ENTITY NAME\n*\n         CLC   =CL8' ',ACCAUTH         IS THERE AN ACCESS AUTHORITY?\n         BE    NOACCAUT                NO, BLANK ACCESS AUTH. - ABEND\n*\n         LA    R1,PATTERN              BEGINNING OF TABLE\n         LA    R2,ROWLEN               LENGTH OF A ROW IN THE TABLE\n         LA    R3,PATTERN+PATTERNL-1   LAST BYTE OF TABLE\nAUTHLP1  DS    0H\n         CLC   ACCAUTH,0(R1)           MATCH ON ACCESS AUTHORITY?\n         BE    MATCH1                  YES, MOVE IT IN\n         BXLE  R1,R2,AUTHLP1           CHECK NEXT\nMATCH1   MVC   RPEUACC,8(R1)           MOVE IN BIT PATTERN\n         B     READLOOP                SEE IF ANY MORE I/P RECORDS\nPERMBLD  DS    0H\n         CLC   =CL8' ',GROUPID         IS THERE A GROUP/USERID?\n         BE    PERMINVL                NO, INVALID PERMIT RECORD- ABEND\n*\n         CLC   =CL8' ',ACCAUTH         IS THERE AN ACCESS AUTHORITY?\n         BE    NOACCAUT                NO, BLANK ACCESS AUTH. - ABEND\n*\n         GETMAIN RU,LV=RPEACCLN,SP=241\n         LR    R9,R1                   ESTABLISH ADDRESSABILITY\n         USING RPEACCLE,R9               TO ACCESS RECORD\n         XC    RPEACCLE(RPEACCLN),RPEACCLE INITIALIZE TO B'0'\n         ST    R9,0(R11)               ESTABLISH POINTER TO HERE\n         MVC   RPEAUSR,GROUPID         SAVE GROUP/USERID OF PERMIT\n*\n         LA    R1,PATTERN              BEGINNING OF TABLE\n         LA    R2,ROWLEN               LENGTH OF A ROW IN THE TABLE\n         LA    R3,PATTERN+PATTERNL-1   LAST BYTE OF TABLE\nAUTHLP2  DS    0H\n         CLC   ACCAUTH,0(R1)           MATCH ON ACCESS AUTHORITY?\n         BE    MATCH2                  YES, MOVE IT IN\n         BXLE  R1,R2,AUTHLP2           CHECK NEXT\nMATCH2   MVC   RPEACS,8(R1)            MOVE IN BIT PATTERN\n         LA    R11,RPEANEXT            PROVIDE ANCHOR FOR NEXT PERMIT\n         B     READLOOP                SEE IF ANY MORE I/P RECORDS\n*\nEOFILE   DS    0H\n         OC    LASTRPE,LASTRPE         WERE THERE ANY RECORDS I/P?\n         BZ    NOREC                   NO, ABEND\n         L     R11,CJYPROFS            SAVE ADDRESS OF OLD CHAIN\n         MVC   CJYPROFS,LASTRPE        ACTIVATE NEW CHAIN\n         DROP  R8\n         BASMAC R14,MORERPE            START TO FREE RPE'S\n*\n         DEQ   (SECURITY,PROFS,,SYSTEM)    RELEASE ENQ\n         MODESET MODE=PROB,KEY=NZERO   return to problem state\n         CLOSE (CJYPDATA)              CLOSE I/P DATASET\n         WTO   'RAKFPROF7  RAKF PROFILES UPDATED'\n         L     R13,4(R13)              RESTORE HSA\n         RETURN (14,12),,RC=0          END O.K.\nFREERPE  DS    0H\n         L     R8,RPEACCPT             GET ACCESS LIST POINTER\n         B     MOREACC                 SEE IF ANY PERMITS\nFREEACC  DS    0H\n         L     R8,RPEANEXT             GET -> NEXT ACC\n         FREEMAIN RU,LV=RPEACCLN,A=(R9),SP=241    FREE CURRENT RPE\nMOREACC  DS    0H\n         LTR   R9,R8                   ANY MORE PERMITS?\n         BNZ   FREEACC                 YES, DELETE THEM\n*\n         L     R11,RPENEXT             GET -> NEXT RPE\n         FREEMAIN RU,LV=RPEL,A=(R10),SP=241   FREE CURRENT RPE\nMORERPE  DS    0H\n         LTR   R10,R11                 ANYMORE RPE'S?\n         BNZ   FREERPE                 YES, FREE THEM\n         BR    R14                     RETURN TO END RUN\n*\nNOGOOD   DS    0H\n         WTO   'RAKFPROF1  RCVT NOT PROPERLY INITIALIZED'\n         WTO   'RAKFPROF1  **  PROGRAM TERMINATED  **'\n         ABEND 100,,STEP\n*\nNOREC    DS    0H\n         WTO   'RAKFPROF2  NO RECORDS INPUT FROM CJYPDATA'\n         WTO   'RAKFPROF2  **  PROGRAM TERMINATED  **'\n         ABEND 200,,STEP\n*\nOUTOFORD DS    0H\n         L     R11,LASTRPE             SETUP FOR RPE CLEANUP\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF3  I/P RECORDS OUT OF ORDER'\n         WTO   'RAKFPROF3  **  PROGRAM TERMINATED  **'\n         ABEND 300,,STEP\n*\nNOUAR    DS    0H\n         L     R11,LASTRPE             SETUP FOR RPE CLEANUP\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF4  PERMIT RECORD WITHOUT UNIVERSAL ACCESS RECOR*\n               D'\n         WTO   'RAKFPROF4  **  PROGRAM TERMINATED  **'\n         ABEND 400,,STEP\n*\nPERMINVL DS    0H\n         L     R11,LASTRPE             SETUP FOR RPE CLEANUP\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF5  PERMIT RECORD WITHOUT GROUPID/USERID'\n         WTO   'RAKFPROF5  **  PROGRAM TERMINATED  **'\n         ABEND 500,,STEP\n*\nNOACCAUT DS    0H\n         L     R11,LASTRPE             SETUP FOR RPE CLEANUP\n         BASMAC R14,MORERPE            GO CLEANUP AND RETURN HERE\n         BASMAC R14,BADMSG             WRITE BADMSG\n         WTO   'RAKFPROF6  ENTITY RECORD WITH NO ACCESS AUTHORITY'\n         WTO   'RAKFPROF6  **  PROGRAM TERMINATED  **'\n         ABEND 500,,STEP\n*\nBADMSG   DS    0H\n         MVC   BADMSGN+18(80),INRECNEW\nBADMSGN  WTO   'RAKFPROF8                                              X\n                                                  '\n         BR    R14\n**********************\n         PRINT NOGEN\nSAVEAREA DS    18F\nLASTRPE  DC    F'0'\nLASTACC  DC    F'0'\nSECURITY DC    CL8'CJYRCVT'\nPROFS    DC    CL8'CJYPROFS'\nINREC    DS    0CL80\nINRECNEW DS    0CL80\nCLASS    DC    XL8'00'\nENTITY   DC    XL44'00'\nGROUPID  DC    XL8'00'\nACCAUTH  DC    XL8'00'\n         DC    XL(80-(*-INREC))'00'\nINRECOLD DC    XL80'00'\nPATTERN  EQU   *\n         DC    CL8'ALTER   ',AL1(RACFALTR)\nROWLEN   EQU   *-PATTERN\n         DC    CL8'CONTROL ',AL1(RACFCNTL)\n         DC    CL8'UPDATE  ',AL1(RACFUPDT)\n         DC    CL8'READ    ',AL1(RACFREAD)\n         DC    CL8'EXEC    ',AL1(RACFEXEC)\n         DC    CL8'NONE    ',AL1(RACFNONE)\nPATTERNL EQU   *-PATTERN\nTRTTEST  DC    XL256'00'               TABLE TO FIND BLANK/ASTERISK\n         ORG   TRTTEST+C' '            SETUP FLAG FOR BLANK\n         DC    X'08'\n         ORG   TRTTEST+C'*'            SETUP FLAG FOR ASTERISK\n         DC    X'04'\n         ORG\nCJYPDATA DCB   MACRF=GM,EODAD=EOFILE,DDNAME=RAKFPROF,DSORG=PS\n         COPY  CJYRCVTD\n         COPY  CJYPCBLK\n         IHAPSA DSECT=YES\n         CVT    DSECT=YES\n         ICHPRCVT\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   CJYRPROF\n./ ADD NAME=RAKFPWUP 0200-11093-11093-0000-00023-00023-00000-*RAKF*\n         TITLE 'RAKF Password Update Program'\nRAKFPWUP CSECT\n*\n**********************************************************************\n*                                                                    *\n* NAME: RAKFPWUP                                                     *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Process Password Update Requests                             *\n*                                                                    *\n* FUNCTION: - retrieve username and new password from SQA            *\n*           - clear and free SQA                                     *\n*           - append username and new password to update queue       *\n*                                                                    *\n* NOTE: Yet to be implemented!                                       *\n*                                                                    *\n**********************************************************************\n*\n         PRINT NOGEN\n         XR    15,15\n         BR    14\n         END   RAKFPWUP\n./ ADD NAME=RAKFUSER 0200-90299-11093-0000-00211-00160-00122-*RAKF*\n         TITLE 'ESG-SECURITY USERID TABLE LOADER'\n* CPARM='XREF(SHORT)',LPARM='AC=1'                            CJYRUIDS\n*      DD DSN=SYS1.MACLIB,DISP=SHR\n*      DD DSN=SYS1.MODGEN,DISP=SHR\n*      DD DSN=SYS3.SAF.PARMLIB,DISP=SHR\n         EJECT\nCJYRUIDS CSECT\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n**********************************************************************\n*\n         SAVE   (14,12),,CJYRUIDS_&SYSDATE._&SYSTIME\n         LR     R12,R15             USE ENTRY AS BASE\n         USING  CJYRUIDS,R12        \" \" \"\n         ST     R13,SAVEAREA+4      SAVE CALLER'S SAVE AREA ADDR\n         LA     R2,SAVEAREA         OUR SAVEAREA\n         ST     R2,8(R13)           SAVE OUR AREA\n         LR     R13,R2              LOAD REGISTER 13 WITH SAVEAREA\n*\n         L      R8,FLCCVT-PSA(0)    GET CVT ADDR\n         ICM    R8,B'1111',CVTRAC-CVTMAP(R8) GET RCVT ADDR, IS IT 0?\n         BZ     ABEND100             Y - CJYRCVT FAILED, GO TO ABEND\n         ICM    R8,B'1111',RCVTISTL-RCVT(R8) GET OUR POINTER, IS IT 0?\n         BZ     ABEND100             YES, ABEND\n         ENQ    (SECURITY,USERS,E,,SYSTEM)\n         OPEN   (CJYUDATA,(INPUT))  OPEN INPUT FILE\n         MODESET MODE=SUP,KEY=ZERO  authorize ourselves\n*\nREADLOOP GET    CJYUDATA,RECORD     GET RECORD\n         CLC    USERID,OLDUSER      IS INPUT IN SORT SEQUENCE?\n         BE     NEWGROUP               OK ---\n         CLI    USERID,C' '         UID?\n         BE     ABEND2               NO ---\n         CLI    PASSWORD,C' '       PSWD?\n         BE     ABEND2               NO ---\n         CLI    GROUP,C' '          GROUP.\n         BE     ABEND2               NO ---\n         CLI    OPERFLAG,C'Y'       FLAG ??\n         BE     RECOK                RECORD OK\n         CLI    OPERFLAG,C'N'       FLAG ??\n         BNE    ABEND2               TOUGH\n*\nRECOK    MVC    OLDREC,RECORD       REFRESH LAST USER ID READ\n         GETMAIN RU,LV=CBLKL,SP=241 GET AREA IN CSA\n         LR     R5,R1               GM AREA ADDR TO WORK REG.\n         USING  CBLK,R5             HELLO BALL ---\n         XC     CBLK(CBLKL),CBLK    CLEAR TO B'0'\n         MVC    CBLKNEXT,LASTGM     GET PREV GETMAINED ADDR.\n         ST     R5,LASTGM           SAVE ADDR OF GM AREA.\n         LA     R7,CBLKGRPS        POINTER FOR GROUP\n*\n         LA     R1,8               MAX\n         TRT    USERID,TRTBLANK    FIND BLANK\n         BZ     MOVEUID            GO MOVE USERID\n         S      R1,=A(USERID)      SUBTRACT BEGINNING\nMOVEUID  STC    R1,CBLKUSRL        SAVE LENGTH\n         MVC    CBLKUSRI,USERID    MOVE USERID\n*\n         LA     R1,8               MAX\n         TRT    GROUP,TRTBLANK     FIND BLANK\n         BZ     MOVEGRP            GO MOVE GROUP\n         S      R1,=A(GROUP)       SUBTRACT BEGINNING\nMOVEGRP  STC    R1,CBLKGRPL        SAVE LENGTH\n         MVC    CBLKGRPN,GROUP     MOVE GROUP\n*\n         LA     R1,8               MAX\n         TRT    PASSWORD,TRTBLANK  FIND BLANK\n         BZ     MOVEPSW            GO MOVE PASSWORD\n         S      R1,=A(PASSWORD)    SUBTRACT BEGINNING\nMOVEPSW  STC    R1,CBLKPWDL        SAVE LENGTH\n         MVC    CBLKPWDE,PASSWORD  MOVE USERID\n         BCTR   R1,0               LENGTH OF PSWD - 1 FOR EX.\n         EX     R1,SCRAMBLE        SCRABLE PSWD\n         MVC    CBLKFLG1,OPERFLAG  MOVE OPER FLAG TO ENTRY.\n*\n         B      ADDGROUP           ADD CONNECTS\n*\nSCRAMBLE XC     CBLKPWDE(0),=C'SECURITY'  SCRAMBLE PSWD\n*\nNEWGROUP CLC    GROUP,OLDGROUP      IS INPUT IN SORT SEQUENCE?\n         BNH    ABEND2                 N - TELL ABOUT IT\n         MVC    OLDREC,RECORD       REFRESH LAST USER ID READ\nADDGROUP GETMAIN RU,LV=CONNL,SP=241 GET AREA IN CSA\n         LR     R6,R1              GM AREA ADDR TO WORK REG.\n         USING  CONNGRUP,R6        HELLO BALL ---\n         XC     CONNGRUP(CONNL),CONNGRUP CLEAR AREA\n         ST     R6,0(R7)           SAVE IN LAST POINTER\n         LA     R7,CONNNEXT        SAVE FOR NEXT TIME\n*\n         LA     R1,8               MAX\n         TRT    GROUP,TRTBLANK     FIND BLANK\n         BZ     MOVECONN           GO MOVE GROUP\n         S      R1,=A(GROUP)       SUBTRACT BEGINNING\nMOVECONN STC    R1,CONNGRPL        SAVE LENGTH\n         MVC    CONNGRPN,GROUP     MOVE GROUP\n*\n         CLI    DFLTGRPF,C'*'      DEFAULT FLAG SET?\n         BNE    READLOOP           NO, DON'T MOVE\n         STC    R1,CBLKGRPL        SAVE LENGTH\n         MVC    CBLKGRPN,GROUP     MOVE GROUP\n         B      READLOOP           READ NEXT RECORD.\n*\nENDDATA  OC     OLDUSER,OLDUSER    EMPTY INPUT FILE?\n         BZ     ABEND300              Y - TELL ABOUT IT AND TERMINATE.\n         L      R4,CJYUSERS-CJYRCVTD(R8)       GET OLD TABLE PTR\n         MVC    CJYUSERS-CJYRCVTD(,R8),LASTGM  UPDATE PTR TO NEW TABLE\n         B      ANYMORE                        GO CHK FOR ANY ENTRIES.\n*                                      N - FALL THROUGH\nFREELOOP L      R4,CBLKNEXT        LOOP THRU OLD TABLE\n         L      R7,CBLKGRPS-CBLK(R5)  GROUP LOOP\n         B      FREECON2\nFREECONN L      R7,CONNNEXT        LOOP THRU OLD TABLE\n         FREEMAIN RU,LV=CONNL,A=(R6),SP=241 FREE CURRENT ENTRY.\nFREECON2 LTR    R6,R7              MORE ENTRIES?\n         BNZ    FREECONN               Y - NEXT ENTRY\n         FREEMAIN RU,LV=CBLKL,A=(R5),SP=241 FREE CURRENT ENTRY.\nANYMORE  LTR    R5,R4              MORE ENTRIES?\n         BNZ    FREELOOP               Y - NEXT ENTRY\n*\n         TM     TERMFLAG,TERMABND  WAS AN ABEND REQUESTED?\n         BO     ABEND200               Y-ABEND\nBYEBYE   MODESET MODE=PROB,KEY=NZERO   return to problem state\n         CLOSE (CJYUDATA)              close input dataset\n         WTO    'RAKFUIDS4  USER TABLE UPDATED'\n         L      R13,SAVEAREA+4     LOAD CALLER'S SAVE AREA ADDR\n         RETURN (14,12),RC=0\n*\nABEND100 WTO    'RAKFUIDS1  RCVT NOT PROPERLY INITIALIZED',DESC=(2)\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)\n         ABEND  100,,STEP\n*\nABEND2   WTO    'RAKFUIDS2  INPUT DATA INVALID OR OUT OF SEQ.',DESC=(2)\n         MVC    PASSWORD,=C'********'\n         MVC    BADMSG+8(80),RECORD\nBADMSG   WTO    '                                                      X\n                                           ',DESC=(2)\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)\n         OI     TERMFLAG,TERMABND          SET TO ABEND @ TERMINATION\n         LR     R4,R5                      GET LAST GM AREA ADDR AND\n         B      ANYMORE                    GO CLEAN THE GM CHAIN.\n*\nABEND200 ABEND  200,,STEP              Y - ABEND !\n*\nABEND300 WTO    'RAKFUIDS3  EMPTY INPUT FILE ?!?!',DESC=(2)\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **',DESC=(2)\n         ABEND  300,,STEP\n*\nTRTBLANK DC     XL256'00'          TABLE FOR TRT\n         ORG    TRTBLANK+C' '      BLANK\n         DC     X'04'\n         ORG\n*\n         PRINT  NOGEN\nCJYUDATA DCB    DDNAME=RAKFUSER,MACRF=GM,EODAD=ENDDATA,DSORG=PS\n*\nSAVEAREA DS     18F\nLASTGM   DC     F'0'\nSECURITY DC     CL8'CJYRCVT'\nUSERS    DC     CL8'CJYUSRS'\nTERMFLAG DC     X'00'\nTERMABND EQU    X'01'\nRECORD   DS     0XL80\nUSERID   DS     CL8\nDFLTGRPF DS     X                  DEFAULT GROUP FLAG\nGROUP    DS     CL8\n         DS     X\nPASSWORD DS     CL8\n         DS     X\n*\nOPERFLAG DS     X\n         DS     XL(80-(*-RECORD))\nOLDREC   DS     0XL80\nOLDUSER  DS     CL8\n         DS     X\nOLDGROUP DS     CL8\n         DS     XL(80-(*-OLDREC))\n*\nR0       EQU    00\nR1       EQU    01\nR2       EQU    02\nR3       EQU    03\nR4       EQU    04\nR5       EQU    05\nR6       EQU    06\nR7       EQU    07\nR8       EQU    08\nR9       EQU    09\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n*\n         COPY    CJYRCVTD\n         COPY    CJYUCBLK\n         ICHPRCVT\n         CVT     DSECT=YES\n         IHAPSA  DSECT=YES\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "F5": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11W\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd7\\xd9\\xd6\\xc3\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:57:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "PROCLIB"}, "text": "./ ADD NAME=RAKF     0200-11093-11093-0000-00005-00005-00000-*RAKF*\n//RAKF     EXEC PGM=ICHSEC00\n//IEFPARM  DD DCB=(LRECL=80,BLKSIZE=80,DSORG=PO),DISP=(,DELETE),\n//            UNIT=SYSDA,SPACE=(80,(1,0,1))\n//RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),DISP=SHR\n//RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),DISP=SHR\n./ ADD NAME=RAKFPROF 0200-11093-11093-0000-00002-00002-00000-*RAKF*\n//RAKFPROF EXEC PGM=RAKFPROF\n//RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),DISP=SHR\n./ ADD NAME=RAKFPWUP 0200-11093-11093-0000-00001-00001-00000-*RAKF*\n//RAKFPWUP EXEC PGM=RAKFPWUP\n./ ADD NAME=RAKFUSER 0200-11093-11093-0000-00002-00002-00000-*RAKF*\n//RAKFUSER EXEC PGM=RAKFUSER\n//RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "F6": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11W\\x00\\x06\\x00\\x06\\x00\\x00\\xd7\\xc1\\xd9\\xd4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:57:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "PARMLIB"}, "text": "./ ADD NAME=RAKFINIT 0200-11093-11093-0000-00005-00005-00000-*RAKF*\nNO\n/* control RAKF initialization:                                      */\n/* YES -- initialize RAKF                                            */\n/* NO  -- don't initialize RAKF                                      */\n/* ASK -- ask operator                                               */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEZCTGFL": {"ttr": 4108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13/\\x01\\x11\\x13/\\x15T\\x00\\x81\\x00\\x81\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-12T00:00:00", "modifydate": "2011-05-12T15:54:00", "lines": 129, "newlines": 129, "modlines": 0, "user": "MACRO"}, "text": "*  %GO TO CTGFLX01;\n*  /*\n         MACRO\n         IEZCTGFL &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODS\nCTGFL    DSECT ,\n         AGO   .BOTHDS\n.NODS    ANOP  ,\nCTGFL    DS    0F\n.BOTHDS  ANOP  ,                        */\n*%CTGFLX01:;\n*/********************************************************************/\n*/*                                                                  */\n*/*   MACRO NAME = IEZCTGFL                                          */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = CATALOG FIELD PARAMETER LIST                */\n*/*                                                                  */\n*/*   FUNCTION = THE FIELD PARAMETER LIST (CTGFL) DEFINES ONE OF     */\n*/*              THE CATALOG RECORD'S FIELDS OR A GROUP OF           */\n*/*              LOGICALLY RELATED FIELDS.  THE CTGFL IS BUILT       */\n*/*              BEFORE AN OS/VS COMPONENT ISSUES THE CATLG          */\n*/*              MACRO INSTRUCTION (SVC 26) TO PROCESS A             */\n*/*              CATALOG RECORD.  THE CTGFL IS USED IN TWO           */\n*/*              SITUATIONS:                                         */\n*/*                (1)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO RETRIEVE OR UPDATE.  THE CTGPL CONTAINS   */\n*/*                     THE ADDRESS OF EACH CTGFL USED IN THIS WAY.  */\n*/*                (2)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO COMPARE AGAINST CALLER-SUPPLIED DATA.     */\n*/*                     THIS IS A \"TEST\" CTGFL AND IS ADDRESSED BY   */\n*/*                     ANOTHER CTGFL.                               */\n*/*                                                                  */\n*/*   CONTROL BLOCK STRUCTURE = THE CTGFL IS POINTED TO BY THE       */\n*/*                             CCA ('CCAFLPT' OR 'CCATEST').        */\n*/*                                                                  */\n*/*   INCLUDED MACROS = NONE                                         */\n*/*                                                                  */\n*/*   METHOD OF ACCESS = PL/S - NO DECLARES NECESSARY                */\n*/*                                                                  */\n*/*   STATUS = VS/2 RELEASE 3   (CHANGE FLAG @Y30SSXX)               */\n*/*                                                                  */\n*/*   DATE OF LAST CHANGE = 17 JUL 74                                */\n*/*                                                                  */\n*/********************************************************************/\n         AGO   .CTGFL01                 */\n*%DECLARE (CTGFLLEN, CTGFL999, CTGFLLVL) CHAR;\n*%CTGFLLEN = 'LENGTH(CTGFL)';       /* LENGTH OF CTGFL               */\n*%GOTO CTGFLX03;\n* /*\n*%CTGFLX03:;\n*%IF CTGFL999 \u00ac= ','                /* IF BLOCK NOT CONTINUED,       */\n*  %THEN %CTGFL999 = ';';           /*   THEN CLOSE DECLARE STMNT    */\n*%IF CTGFLLVL  = ''                 /* IF BLOCK NOT CONCATENATED,    */\n*  %THEN %GOTO CTGFL001;            /*   THEN GENERATE DECLARE       */\n*%CTGFLDUM = CTGFLLVL||' CTGFL';    /* SET MINOR LEVEL NUMBER        */\n*   CTGFLDUM                        /* CTGFL CONCATENATED LEVEL      */\n*%GOTO CTGFL002;                    /* SKIP DECLARE                  */\n*%CTGFL001:;                        /* DECLARE                       */\n    DECLARE\n*     1 CTGFL BASED(CTGFLPTR)       /* DECLARE CTGFL LEVEL ONE       */\n*%CTGFL002:;                        /* SKIP DECLARE                  */\n*        BDY(WORD),                 /* WORD BOUNDARY                 */\n*       5 CTGFLDNO PTR(8),          /* NO. PAIRS DATA LENGTH/ADDR    */\n*       5 CTGFLDCD BIT(8),          /* TEST CONDITION                */\n*       5 CTGFLDGC PTR(8),          /* GROUP CODE NUMBER             */\n*       5 CTGFLDRE BIT(8),          /* TEST RESULT                   */\n*         10 *        BIT(7),       /* RESERVED                      */\n*         10 CTGFLDTS BIT(1),       /* 0 = SUCCESSFUL TEST,          */\n*                                   /* 1 = TEST FAILED               */\n*       5 CTGFLDWA BIT(32),         /* CATALOG WORK AREA             */\n*       5 CTGFLDNM PTR(31),         /* FIELD NAME ADDRESS            */\n*       5 CTGFLCHN PTR(31),         /* ADDR OF NEXT FIELD MACRO      */\n*                                   /* OR ZERO                       */\n*       5 CTGFLDAT(*),              /* PAIRS OF DATA LENGTH/ADDR     */\n*         10 CTGFLNG FIXED(31),     /* DATA LENGTH                   */\n*         10 CTGFLPT  PTR(31) CTGFL999 /* DATA ADDRESS               */\n*/********************************************************************/\n*/*     CONSTANTS USED TO SET AND/OR TEST FIELDS DECLARED ABOVE      */\n*/********************************************************************/\n    DECLARE                         /* TEST CONDITION - CTGFLDCD     */\n      CTGFLDEQ BIT(8) CONSTANT('80'X), /* EQUAL                      */\n      CTGFLDNE BIT(8) CONSTANT('60'X), /* NOT EQUAL                  */\n      CTGFLDGT BIT(8) CONSTANT('20'X), /* GREATER THAN               */\n      CTGFLDLT BIT(8) CONSTANT('40'X), /* LESS THAN                  */\n      CTGFLDGE BIT(8) CONSTANT('A0'X), /* GREATER THAN OR EQUAL      */\n      CTGFLDLE BIT(8) CONSTANT('C0'X), /* LESS THAN OR EQUAL         */\n      CTGFLDZ  BIT(8) CONSTANT('80'X), /* TEST UNDER MASK FOR ZEROES */\n      CTGFLDON BIT(8) CONSTANT('10'X), /* TEST UNDER MASK FOR ONES   */\n      CTGFLDMX BIT(8) CONSTANT('40'X); /* TEST UNDER MASK FOR MIXED  */\n* %GO TO CTGFLX02;\n*/*\n.CTGFL01 ANOP\n*\nCTGFLDNO DS    XL1                      NUMBER PAIRS DATA LNG/ADDR\n*\nCTGFLDCD DS    XL1                      TEST CONDITION\nCTGFLDEQ EQU   X'80'                    EQUAL\nCTGFLDNE EQU   X'60'                    NOT EQUAL\nCTGFLDGT EQU   X'20'                    GREATER THAN\nCTGFLDLT EQU   X'40'                    LESS THAN\nCTGFLDGE EQU   X'A0'                    GREATER THAN OR EQUAL\nCTGFLDLE EQU   X'C0'                    LESS THAN OR EQUAL\nCTGFLDZ  EQU   X'80'                    TEST UNDER MASK FOR ZEROES\nCTGFLDON EQU   X'10'                    TEST UNDER MASK FOR ONES\nCTGFLDMX EQU   X'40'                    TEST UNDER MASK FOR MIXED\nCTGFLDGF EQU   X'FF'                    GENERIC FILTER TEST        @SCA\n*\nCTGFLDGC DS    XL1                      GROUP CODE NUMBER\n*\nCTGFLDRE DS    XL1                      TEST RESULT\nCTGFLDTS EQU   X'01'                    TEST MASK - CTGFLDRE\n*                                       = 0 - SUCCESSFUL TEST,\n*                                       = 1 - TEST FAILED\n*\nCTGFLDWA DS    F                        CATALOG WORK AREA\n*\nCTGFLDNM DS    A                        FIELD NAME ADDRESS\n*\nCTGFLCHN DS    A                        ADDRESS OF NEXT FIELD\n*\n*\nCTGFLDAT DS    0CL8                     PAIRS OF DATA LENGTH/ADDRESS\nCTGFLNG  DS    F                        DATA LENGTH\nCTGFLPT  DS    A                        DATA ADDRESS\n*\n*\nCTGFLLEN EQU   *-CTGFL                  LENGTH OF CTGFL\n         MEND  ,                        */\n* %CTGFLX02:;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADLIB": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11C\\x01q\\x01q\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:43:00", "lines": 369, "newlines": 369, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOADSL1": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00R\\x01\\x02\\x18/\\x01\\x11\\x10_\\x00\"\\x00\\x16\\x00\\x11\\x00\\x0c\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-07-01T00:00:00", "modifydate": "2011-04-15T00:22:52", "lines": 22, "newlines": 17, "modlines": 12, "user": "JCL"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//LOADSL PROC IPRE='TRKF120',OPRE=SBGOLOB,DASN=TRKF120,LBL=01,XL=SL,\n//            IUNT=562,OUNT=SYSALLDA,IVL=RAKF12,OVL=WORK08,DSP2=CATLG,\n//            DSP1=NEW,DSP3='',P=15,S=15,D=44,QUAL=TRKF120\n//DOLOAD  EXEC PGM=IEBCOPY,REGION=3000K\n//SYSPRINT DD SYSOUT=*\n//SYSUT1 DD DISP=SHR,DSN=&IPRE..&DASN,UNIT=&IUNT,\n//       VOL=(,RETAIN,SER=&IVL),LABEL=(&LBL,&XL,EXPDT=98000)\n//SYSUT2 DD UNIT=&OUNT,VOL=SER=&OVL,DSN=&OPRE..&QUAL..&DASN,\n//       DISP=(&DSP1,&DSP2&DSP3),SPACE=(TRK,(&P,&S,&D),RLSE)\n//SYSIN DD DUMMY\n//  PEND\n//*\n//S0001  EXEC LOADSL,LBL=02,DASN=F1\n//S0002  EXEC LOADSL,LBL=03,DASN=F2\n//S0003  EXEC LOADSL,LBL=04,DASN=F3\n//S0004  EXEC LOADSL,LBL=05,DASN=F4\n//S0005  EXEC LOADSL,LBL=06,DASN=F5\n//S0006  EXEC LOADSL,LBL=07,DASN=F6\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSLOAD": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\t\\x00\\x98\\x01/\\x01\\x11\\x10_\\x12\\t\\x00\\x14\\x00\\x0c\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "2011-04-15T12:09:09", "lines": 20, "newlines": 12, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT482.FILE850',OPRE=SBGOLOB,DASN=TRKF120,\n//             OUNT=SYSDA,DSP2=CATLG,SUFF='???',OVL=WORK05,\n//             P=15,S=14,D=44,DSP1=NEW\n//LOAD EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.JUERGEN.FILE850.UTILS\n//SYSPRINT DD SYSOUT=*\n//SYSUT1 DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2 DD UNIT=&OUNT,VOL=SER=&OVL,DSN=&OPRE..&DASN..&SUFF,\n//       DISP=(&DSP1,&DSP2),SPACE=(TRK,(&P,&S,&D),RLSE),\n//       DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n//  PEND\n//DOCLIB  EXEC PDSLOAD,MEMB=F2,SUFF=SAMPLIB\n//ISPPLIB EXEC PDSLOAD,MEMB=F3,SUFF=MACLIB\n//JCL     EXEC PDSLOAD,MEMB=F4,SUFF=SRCLIB\n//MACLIB  EXEC PDSLOAD,MEMB=F5,SUFF=PROCLIB\n//SOURCE  EXEC PDSLOAD,MEMB=F6,SUFF=PARMLIB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACIND": {"ttr": 4364, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13\\x1f\\x01\\x11\\x13\\x0f!\\x15\\x01\\x05\\x01\\x05\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-11T00:00:00", "modifydate": "2011-05-10T21:15:00", "lines": 261, "newlines": 261, "modlines": 0, "user": "*RAKF*"}, "text": "         TITLE 'Set or Clear RACF Indicator of VSAM Catalog Entries'\nRACIND   CSECT\n         PRINT NOGEN\n*\n**********************************************************************\n*                                                                    *\n* NAME: RACIND                                                       *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Set or Clear RACF Indicator of VSAM Catalog Entries          *\n*                                                                    *\n* FUNTION: Act upon control statements read from SYSIN to set or     *\n*          clear the RACF indicator of VSAM catalog entries. The     *\n*          following control statements are valid:                   *\n*                                                                    *\n*          ----+----1----+----2----+----3----+----4----+----5----+   *\n*          CATALOG   name of catalog to search for entries           *\n*          RACON     name of entry to indicate                       *\n*          RACOFF    name of entry to unindicate                     *\n*          * Comment                                                 *\n*                                                                    *\n*          Any number of control statements is allowed. The first    *\n*          none comment statement must be a CATALOG statement. A     *\n*          CATALOG statement remains active until a new CATALOG      *\n*          statement replaces it. The SYSIN dataset must have fixed  *\n*          length records with LRECL=80, padded to the right with    *\n*          blanks.                                                   *\n*                                                                    *\n* REQUIREMENTS: //SYSIN DD    defining the input control statements  *\n*               //SYSPRINT DD defining the print output listing      *\n*               The utility must be run from an authorized library   *\n*                                                                    *\n**********************************************************************\n*\n* initialize\n*\n         SAVE  (14,12),,RACIND_&SYSDATE._&SYSTIME\n         USING RACIND,R15          establish => program EP\n         ST    R13,SAVEAREA+4      save HSA\n         LA    R11,SAVEAREA        establish => savearea\n         ST    R11,8(R13)          save LSA\n         LR    R13,R11             setup => our savearea\n         USING SAVEAREA,R13        new addressability\n         DROP  R15                 program EP no longer needed\n         B     CONTINUE            branch around savearea\nSAVEAREA DS    18F                 savearea\nCONTINUE OPEN  (SYSIN,(INPUT))     open control statement dataset\n         OPEN  (SYSPRINT,(OUTPUT)) open output dataset\n         RACHECK ENTITY=RAKFADM,CLASS='FACILITY',ATTR=READ authorize\n         LTR    R15,R15            RAKFADM granted?\n         BNZ    NOAUTH              no, talk dirrty and exit\n         MODESET MODE=SUP,KEY=ZERO authorize ourselves\n         LA    R12,PL              address CTGPL\n         USING CTGPL,R12           tell assembler\n         LA    R11,FL              address CTGFL\n         USING CTGFL,R11           tell assembler\n*\n* setup catalog parameter and catalog field parameter lists\n*\n         MVI   CTGNOFLD,X'01'      number of fields in CTGPL\n         LA    R1,ENTNAME          entry name address\n         ST    R1,CTGENT           store entry name address in CTGPL\n         LA    R1,ENTCAT           catalog name address\n         ST    R1,CTGCAT           store catalog name address in CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME indicate names provided\n         ST    R11,CTGFIELD        store field list address in CTGPL\n         LA    R1,WA               CTGPL work area address\n         ST    R1,CTGWKA           store work area address in CTGPL\n         MVI   CTGFLDNO,X'01'      number of fields in CTGFL\n         LA    R1,SECFLAGS         field name address\n         ST    R1,CTGFLDNM         store field name address in CTGFL\n         LA    R1,FLDWA            CTGFL work area address\n         ST    R1,CTGFLDWA         store work area address in CTGFL\n*\n* read and interpret control statement\n*\nNEXTENT  GET   SYSIN,INPUT         read control statement\n         CLI   INPUT,C'*'          comment line?\n         BE    NEXTENT              yes, read next control statement\n         CLC   INPUT(10),=C'CATALOG   ' CATALOG statement?\n         BE    SETCAT               yes, replace current catalog name\n         CLC   INPUT(10),=C'RACON     ' RACON statement?\n         BE    SETENT               yes, replace current entry name\n         CLC   INPUT(10),=C'RACOFF    ' RACOFF statement?\n         BE    SETENT               yes, replace current entry name\n         B     INVSTMT              alas master, what do you want?\n*\n* clear work areas\n*\nENTOK    LA    R4,WA               CTGPL work area address\n         LA    R2,3(,R4)           MVCL target is second byte of WA\n         LA    R4,2(,R4)           MVCL source is first byte of WA\n         MVI   0(R4),X'00'         clear source\n         LA    R3,WAL-3            length of MVCL target\n         LA    R5,1                length of MVCL source with X'00' pad\n         MVCL  R2,R4               clear CTGPL work area\n         LA    R4,FLDWA            CTGFL work area address\n         LA    R2,3(,R4)           MVCL target is second byte of WA\n         LA    R4,2(,R4)           MVCL source is first byte of WA\n         MVI   0(R4),X'00'         clear source\n         LA    R3,FLDWAL-3         length of MVCL target\n         LA    R5,1                length of MVCL source with X'00' pad\n         MVCL  R2,R4               clear CTGFL work area\n*\n* locate entry\n*\n         NI    CTGOPTN3,X'00'      clear function indicator\n         OI    CTGOPTN3,CTGLOC+CTGAM0 indicate locate via CTGPL\n         LR    R1,R12              CTGPL address\n         SVC   26                  locate entry\n         LTR   R15,R15             found?\n         BNZ   CATERR              no, issue catalog error message\n*\n* set or clear RACF indicator\n*\n         L     R5,CTGFLPT          get SECFLAGS address\n         CLC   INPUT(10),=C'RACOFF    ' request type?\n         BE    RACOFF              process RACOFF\n         OI    0(R5),B'10000000'   RACON:  set RACF indicator\n         B     UPDATE              go update\nRACOFF   NI    0(R5),B'01111111'   RACOFF: clear RACF indicator\n*\n* update entry\n*\nUPDATE   NI    CTGOPTN3,X'00'      clear function indicator\n         OI    CTGOPTN3,CTGUPDAT+CTGAM0 indicate update via CTGPL\n         LR    R1,R12              CTGPL address\n         SVC   26                  update entry\n         LTR   R15,R15             success?\n         BNZ   CATERR              no, issue catalog error message\n         MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(37),=C'IND003I RACF indicator turned xxx for'\n         MVC   OUTPUT+30(3),INPUT+3             build ..\n         MVC   OUTPUT+38(44),ENTNAME                .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\n*\n* return\n*\nRETURN   MODESET MODE=PROB,KEY=NZERO return to problem state\nEXIT     CLOSE (SYSIN)             close control statement dataset\n         CLOSE (SYSPRINT)          close output dataset\n         L     R15,MAXRC           get this run's maximum return code\n         L     R13,SAVEAREA+4      get caller's savearea\n         L     R14,12(,R13)        restore ..\n         LM    R0,R12,20(R13)                .. regs\n         BR    R14                 return\n*\n* process control statements\n*\nSETCAT   CLI   INPUT+10,C' '       process CATALOG statement\n         BE    INVCAT              first char blank, ignore statement\n         MVC   ENTCAT(44),INPUT+10 set new catalog\n         MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(21),=C'IND001I using catalog' build ..\n         MVC   OUTPUT+22(44),ENTCAT                     .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nSETENT   CLI   INPUT+10,C' '       process RACxxx statement\n         BE    INVENT              first char blank, ignore statement\n         CLI   ENTCAT,C' '         catalog defined?\n         BE    NOCAT                no, ignore statement\n         MVC   ENTNAME(44),INPUT+10 set entry name\n         MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(18),=C'IND002I processing'    build ..\n         MVC   OUTPUT+19(44),ENTNAME                    .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     ENTOK               process entry\n*\n* end of SYSIN dataset reached\n*\nDONE     MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(31),=C'IND004I processing ended at EOD' message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     RETURN              exit\n*\n* error messages\n*\nINVCAT   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(33),=C'IND005E CATALOG statement invalid' message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nINVENT   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(32),=C'IND006E RACxxx statement invalid' build ..\n         MVC   OUTPUT+11(3),INPUT+3                          .. message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nNOCAT    MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(45),=C'IND007E no catalog defined, statement ignoX\n               red'                build message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nINVSTMT  MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(33),=C'IND008E invalid statement ignored' message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nCATERR   C     R15,MAXRC           RC higher than MAXRC?\n         BNH   CATLOW               no, don't update MAXRC\n         ST    R15,MAXRC            yes, update MAXRC\nCATLOW   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(72),=C'IND009E ** VSAM catalog return code is rrrX\n                - reason code is IGG0CLxx-nnn' build message\n         MVC   OUTPUT+66(2),CTGFDBK move module id into message\n         CVD   R15,ERRDEC          convert return code to decimal\n         L     R5,ERRDEC+4         get low order decimal word\n         SLL   R5,4                separate last digit from sign\n         ST    R5,ERRDEC           store in high order decimal word\n         UNPK  ERREBC(7),ERRDEC(4) convert to EBCDIC\n         MVC   OUTPUT+39(3),ERREBC+3 move return code into message\n         LH    R5,CTGREAS1         get reason code\n         CVD   R5,ERRDEC           convert reason code to decimal\n         L     R5,ERRDEC+4         get low order decimal word\n         SLL   R5,4                separate last digit from sign\n         ST    R5,ERRDEC           store in high order decimal word\n         UNPK  ERREBC(7),ERRDEC(4) convert to EBCDIC\n         MVC   OUTPUT+69(3),ERREBC+3 move reason code into message\n         PUT   SYSPRINT,OUTPUT     print message\n         B     NEXTENT             process next entry\nNOAUTH   MVC   OUTPUT(132),BLANK   clear output record\n         MVC   OUTPUT(21),=C'IND010T access denied' build message\n         PUT   SYSPRINT,OUTPUT     print message\n         LA    R15,12              set ..\n         ST    R15,MAXRC                 .. return code ..\n         B     EXIT                                       .. and exit\n*\n* data area\n*\nENTNAME  DS    CL44                name of entry to modify\nENTCAT   DC    CL44' '             name of catalog to search for entry\nSECFLAGS DC    CL8'SECFLAGS'       field name for CTGFL\nMAXRC    DC    F'0'                maximum catalog return code\nPL       DC    8F'0'               catalog parameter list\nFL       DC    6F'0'               catalog field list\nWA       DC    AL2(WAL)            CTGPL ..\n         DS    1022X                       .. work area\nWAL      EQU   *-WA                length of CTGPL work area\nFLDWA    DC    AL2(FLDWAL)         CTGFL ..\n         DS    1022X                       .. work area\nFLDWAL   EQU   *-FLDWA             length of CTGFL work area\nRAKFADM  DC    CL39'RAKFADM'       facility name to authorize\nINPUT    DS    CL80                control statement\nBLANK    DC    C' '                blank to clear output record\nOUTPUT   DS    CL132               output record\nERRDEC   DS    D                   return/reason codes decimal\nERREBC   DS    CL8                 return/reason codes EBCDIC\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=DONE,              X\n               LRECL=80,RECFM=FB,BLKSIZE=800      control statements\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      X\n               LRECL=132,RECFM=FB,BLKSIZE=1320    messages\n         LTORG ,                   all literals go here\n*\n* equates\n*\n         YREGS                     register equates\n*\n* parameter list mappings\n*\n         IEZCTGPL                  catalog parameter list\n         IEZCTGFL                  catalog field parameter list\n         END   RACIND              end of program\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RAKFDOC": {"ttr": 4612, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00U\\x01\\x11\\x12O\\x01\\x11\\x12O\\x13P\\x04H\\x04N\\x00\\x00\\xe3\\xc5\\xe7\\xe3\\xc4\\xd6\\xc3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-05-04T00:00:00", "modifydate": "2011-05-04T13:50:55", "lines": 1096, "newlines": 1102, "modlines": 0, "user": "TEXTDOC"}, "text": "----------------------- Page 1-----------------------\n\n         RAKF Version 1 Release 2 Modification 0\n\n              A Security System for MVS 3.8j\n\n                       User's Guide\n\n                        April 2011\n\n----------------------- Page 2-----------------------\n\n**********************************************************************\n*                                                                    *\n*    \u20ac Craig J. Yasuna                                               *\n*       See Appendix for detailed Copyright Information              *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n*     RAKF is based on the ESG Security System                       *\n*     written by Craig J. Yasuna                   (Mar 1991)        *\n*     adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)            *\n*                            Phil Roberts          (Apr 2011)        *\n*                            Jurgen Winkelmann     (Apr 2011)        *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n* This document applies to RAKF Version 1 Release 2 Modification 0   *\n* with PTFs RRKF001, RRKF002, RRKF003 and RRKF004 installed.         *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n* The information in this User's Guide is adapted from the original  *\n* ESG Security System's documentation as prepared by Sam Golob in    *\n* 1991. For historical reasons the original documentation has been   *\n* retained and can be found as member $$$$$DOC of HLQ.SAMPLIB (HLQ = *\n* High Level Qualifier of RAKF libraries as chosen at installation   *\n* time) after RAKF installation.                                     *\n*                                                                    *\n**********************************************************************\n\n2\n\n----------------------- Page 3-----------------------\n\nTable of Contents\nRAKF User's Guide ............................................. 4\n\n    Introduction .............................................. 4\n\n    Installation............................................... 4\n\n    PTF Installation .......................................... 6\n\n    Customization ............................................. 7\n\n    Setting Up and Enabling the Users and Profiles Tables...... 9\n\n    Batch Jobs and Started Task Considerations ............... 12\n\n    Security Authorization Facility (SAF) Support in MVS 3.8j  12\n\n       General Resource Classes............................... 13\n\n       Dataset Protection..................................... 13\n\n    Deinstallation ........................................... 16\n\nVersion History .............................................. 18\n\n    ESG Security System (March 1991) ......................... 18\n\n    RAKF \"RAcK oF\" Security System (August 2005) ............. 18\n\n    RAKF 1.2.0 (April 2011)................................... 19\n\n    RAKF 1.2.0 PTF Summary ................................... 19\n\nAppendix A: Copyright Information ............................ 20\n\n\n\n----------------------- Page 4-----------------------\n\nRAKF User's Guide\n\nIntroduction\n\nThe RAKF Security System is a RACF\u00d6-like MVS System Authorization\nFacility (SAF). RACF\u00d6 Version 1.7 facilities are emulated, except for\nthe  RACF\u00d6 database.   Two tables, the users and the profiles table,\nare kept in storage. The actual security   verifications are made by\nICHSFR00, using these two tables. The formats of these   users and\nprofiles tables are compatible with RACF\u00d6 database entry data.\n\nProtection is achieved by routing all operating system or vendor\nproduct security calls   (including RACDEF, RACINIT, and RACHECK)\nthrough the  ICHSFR00 RACROUTE   interface. ICHSFR00 contains the real\nverification code. The RAKF Security System   is designed to force\n\"one point of handling\" for all security calls. ICHSFR00 processes\nthe various kinds of security calls in a standard way that is (mostly)\ndocumented   by IBM. ICHSFR00 refers to the installation-coded user\nand profile in-core tables, to   make its judgments. These in-core\nuser and resource tables are each reloadable at   any time by the\nexecution of their special started tasks.\n\nInstallation\n\nInstallation is performed through the standard SMP RECEIVE, APPLY and\nACCEPT   procedure. The process has been tested with SMP level 04.48\nwhich is the level pro-   vided by the Turnkey 3 MVS system. This\npresumably is equivalent to having PTFs   UR13349 UR15994, UR17644 and\nUR19590 applied.  Tests have shown that APPLY processing doesn't work\nreliably at lower levels:  For example at level 04.44 APPLY doesn't\nassemble and link all modules. So before starting please update your\nSMP to as close to level 04.48 as possible.\n\n    1.  Edit jobs A@PREP, C@APPLY and D@ACCPT:\n\n            ?  change all occurrences of HLQ to the desired high level\n               qualifier for the   RAKF libraries, e.g. RAKF,\n               RAKF.V1R2M0, etc. Please note that HLQs   where\n               HLQ.SAMPLIB, HLQ.ASAMPLIB, HLQ.APROCLIB,   HLQ.APARMLIB\n               HLQ.MACLIB, HLQ.AMACLIB, HLQ.SRCLIB or   HLQ.ASRCLIB\n               already exist are not recommended.\n\n            ?  change all occurrences of dddddd to the desired\n               volume for the RAKF  distribution libraries.\n\n            ?  change all occurrences of ssssss to the desired\n               volume for the  RAKF   target libraries.\n\n            ?  change all occurrences of tttt to the device type\n               and all occurrences of  rrrrrr  to the volume of the\n               sysres device where SYS1.LPALIB and SYS1.LINKLIB of\n               the system reside on which RAKF is to be installed\n               (If   you are running TK3 MVS and install on your\n               current system the device type is 3350 and the\n               volume is MVSRES).\n\n            ?  Verify   that   in   jobs   C@APPLY   and   D@ACCPT the\n               sequence   of   the SYSLIB and the target and\n               distribution library DD statements matches your  SMPAPP\n               and   SMPACC  procedures. The   jobs   have   been\n               tested\n\n4\n\n----------------------- Page 5-----------------------\n\n               with the SMP procedures as defined in Volker's MVS TK3\n               system.  If the sequence of DD statements in the SMP\n               procedures in your system doesn't match the sequence of\n               the overriding DD statements in C@APPLY and D@ACCPT\n               RAKF elements may erroneously be placed in\n               SYS1.ASAMPLIB, SYS1.SAMPLIB, SYS1.APROCLIB,\n               SYS1.APARMLIB, SYS1.AMACLIB or SYS1.MACLIB instead of\n               their HLQ.xxxxLIB counterparts.\n\n2.  Submit job A@PREP. This job performs the following actions to\n    prepare your system for RAKF 1.2.0 installation:\n\n        ?  Delete MODs and LMODs that are defined in MVS 3.8j as\n           placeholders for RACF\u00d6 modules from SMP's target and\n           distribution zones.\n\n        ?  Delete the placeholder modules as well as potentially\n           installed pre RAKF 1.2.0 modules from SYS1.LINKLIB and\n           SYS1.LPALIB.\n\n        ?  Allocate RAKF 1.2.0 target and distribution libraries.\n\n3.  Receive RAKF by submitting job B@RECV. Be prepared to mount the\n    RAKF distribution tape rakf12.aws after submitting the job.\n\n4.  Apply RAKF by submitting job C@APPLY.  This job places all RAKF\n    components in their designated target libraries and assembles and\n    link-edits the SVCs (ICHRIN00) and the SAF router (ICHSFR00) to\n    SYS1.LPALIB and the support modules (ICHSEC00, RAKFUSER, RAKFPROF\n    and RAKFPWUP) to SYS1.LINKLIB. These six load modules constitute\n    the complete code provided by RAKF, making up an extremely small\n    footprint as compared with RACF\u00d6.\n\n5.  Accept RAKF by submitting job D@ACCPT. This step can be skipped if\n    you don't want to accept the  RAKF sysmod now. It is, however,\n    strongly recommended to accept it as only then it will be possible\n    to \"test drive\" updates that might be published later and to\n    return to the  previous state in case of problems.\n\n6.  Perform an IPL CLPA of your system. The system will come up with\n    all RAKF elements installed but without activating RAKF.\n    Successful installation can be verified from the RAKF banner being\n    displayed at the beginning of the IPL and by checking the system's\n    SVC table for example using menu option T in IMON and scroll\n    forward to the RACF\u00d6 SVCs (130 - 133) which should show entries\n    like this:\n\n    130 82 00EAEB30 3/4        RACHECK  -RACF IGC00130 RAKF  mm/dd/yy\n    131 83 00EAEB52 3/4 YES    RACINIT  -RACF IGC0013A RAKF  mm/dd/yy\n    132 84 00EAEB74 3/4 YES    RACLIST  -RACF ICHRIN00 DUMMY mm/dd/yy\n    133 85 00EAEB9A 3/4 YES    RACDEF   -RACF IGC0013C RAKF  mm/dd/yy\n\n    where mm/dd/yy is RAKF's installation date.\n\n7.  Check for any applicable RAKF PTFs and install these following the\n    steps in chapter  \"PTF Installation\"  on page 6.  PTFs are\n    available in folder files/RAKF/PTFs of the H390-MVS Yahoo group\n    and in CBT file 850.\n\n8.  Consult chapter \"Customization\" on page 7 for information on how\n    to customize and activate RAKF.\n\n\n\n----------------------- Page 6-----------------------\n\nPTF Installation\n\nTo install a RAKF PTF  pretty much the same procedure as for RAKF\ninstallation is used:\n\n    ?  Upload the PTF to a sequential file or PDS member\n        (LRECL=80,RECFM=FB) on your MVS system.\n\n    ?  Customize job B@RECV from your HLQ.SAMPLIB (HLQ = highlevel\n        qualifier for RAKF libraries as chosen at RAKF installation\n        time): Have the //SMPPTFIN DD statement point to the dataset\n        or PDS member where you placed the PTF and change the RECEIVE\n        command to read:\n\n        RECEIVE S(PTF-ID) .\n\n        PTF-ID is the ID of the PTF, for example RRKF001. Submit the\n        job. Return code 0 is expected.\n\n    ?  Customize job C@APPLY as described in chapter \"Installation\" on\n        page 4  (if not already done) and change the APPLY command to\n        read:\n\n       APPLY S(PTF-ID) DIS(WRITE) .\n\n       Check the comment section at the beginning of the PTF (the\n       \"Cover Letter\") for any special installation instructions for\n       APPLYing the PTF and perform the- se as appropriate. Then\n       submit the APPLY job. Return code 0 is expected.\n\n    ?  Test RAKF operation with the PTF in place to ensure that no\n        function you use got broken.\n\n           o   When RAKF with the applied PTF operates as it is\n               supposed to accept the PTF:  Customize job D@ACCEPT as\n               described in chapter \"Installation\" on page 4 (if not\n               already done) and change the ACCEPT command to read:\n\n               ACCEPT S(PTF-ID) DIS(WRITE) .\n\n               Check the Cover Letter for any special installation\n               instructions for ACCEPTing the PTF and perform these\n               as appropriate. Then submit the ACCEPT job. Return code\n               0 is expected.\n\n           o   When RAKF with the applied PTF exhibits problems,\n               restore the PTF: Customize job D@ACCEPT as described in\n               chapter \"Installation\" on page 4 (if not already done)\n               and change the ACCEPT command to read:\n\n               RESTORE S(PTF-ID) DIS(WRITE) .\n\n               Submit the job. Return code 0 is expected.  After\n               running the RESTORE command your RAKF system is\n               restored to the state before the PTF was applied.\n\n6\n\n----------------------- Page 7-----------------------\n\nCustomization\n\nThis chapter describes the steps to customize and activate RAKF 1.2.0\nafter the basic SMP4 installation has been completed.\n\n    1. a)   Allocate a PDS named SYS1.SECURE.CNTL (LRECL=80). This PDS\n            will contain 2 members:\n\n            ?  USERS:     The RAKF users table\n\n            ?  PROFILES:  The RAKF profiles table\n\n            If you've already allocated this library in an earlier\n            version of RAKF you can continue to use it. The name of\n            the library has to be SYS1.SECURE.CNTL.  Although it could\n            be changed this has to be done  in several locations and\n            will for the sake of simplicity not be outlined in these\n            instructions.\n\n    1. b)   Allocate a sequential dataset named SYS1.SECURE.PWUP with\n            LRECL=18 and RECFM=F (fixed records of 18 bytes, no\n            blocking).  This dataset serves as a queue:   User\n            initiated password changes are saved here until the next\n            run of RAKFUSER integrates them into the RAKF users table.\n\n            If you've already allocated this dataset in an earlier\n            version of  RAKF you can continue to use it.  The name of\n            the dataset has to be SYS1.SECURE.PWUP.  Although it could\n            be changed this has to be done in several locations and\n            will for the sake of simplicity not be outlined in these\n            instructions.\n\n    Note: During the process of adapting the profiles and users tables\n            to meet your security requirements (step 6) special\n            attention to the protection of the datasets created in\n            step 1 should be paid:\n\n            ?  SYS1.SECURE.CNTL:   started tasks and the user(s)\n                and/or group(s) responsible for RAKF administration\n                need UPDATE access to this dataset.\n\n            ?  SYS1.SECURE.PWUP: started tasks need UPDATE access to\n                this dataset.\n\n           As both datasets contain clear text passwords normal users\n            shouldn't be allowed any access to them. An easy way to\n            protect these datasets is to define a dataset profile\n            SYS1.SECURE.* with universal access NONE and selectively\n            allow the RAKF administrator user(s)/group(s) UPDATE\n            access to this profile. If the standard setup is used\n            started tasks  have operations authority and thus don't\n            need to be explicitly allowed.\n\n    2.  If you're a first time RAKF user, copy the following members\n        from HLQ.SAMPLIB to SYS1.SECURE.CNTL:\n\n            ?  MINUSR using a new name of USERS\n\n            ?  MINPRF using a new name of PROFILES\n\n\n\n----------------------- Page 8-----------------------\n\n        This establishes a minimal configuration equivalent to an\n        unprotected system with IBMUSER being defined as the only\n        user. IBMUSER has operations privilege allowing all\n        accesses.\n\n        If you are running Volker's TK3 (Turnkey MVS) system you can\n        use TK3USR instead of MINUSR which defines besides IBMUSER\n        also the users HERC01, HERC02, HERC03 and HERC04 with\n        equivalent attributes as they are defined in UADS. Note,\n        however, that RAKF doesn't allow users having no password.\n        For this reason IBMUSER, HERC01 and HERC03 have a password of\n        NONE defined instead of no password as in TK3.\n\n        Note that each TSO user still needs an UADS entry to define\n        the TSO attributes and authorizations. These are not covered\n        by RAKF's users table.\n\n    3.  Issue the command\n\n        S RAKF\n\n        at the MVS console and reply YES to message RAKF002A.  Verify\n        that the profiles and users tables initialize correctly and\n        that you can logon using the usernames and passwords from\n        SYS1.SECURE.CNTL(USERS).\n\n        Note: Although the RAKF procedure loads the in-core users and\n               profiles tables it is not primarily intended to be used\n               for that purpose during normal operations. To routinely\n               update the profiles or user table to activate changes\n               the procedures RAKFPROF or RAKFUSER, respectively,\n               should be used. The main purpose of the RAKF procedure\n               is to provide a means to activate RAKF if initialization\n               didn't take place automatically at IPL time, for example\n               during installation and customization. If the RAKF\n               procedure is run when RAKF had been activated already it\n               will skip the initialization and refresh the in-core\n               users and profile table, which is equivalent to running\n               RAKFPROF and RAKFUSER.\n\n    4.  To enable automatic initialization of RAKF at system IPL time\n        (highly recommended!) MSTRJCL needs to be modified to contain\n        DD statements pointing to the users and profiles tables and\n        the password changes queue:\n\n        //RAKFPROF DD DSN=SYS1.SECURE.CNTL(PROFILES),\n        //               DISP=SHR\n        //RAKFUSER DD DSN=SYS1.SECURE.CNTL(USERS),\n        //               DISP=SHR\n        //RAKFPWUP DD DSN=SYS1.SECURE.PWUP,\n        //               DISP=SHR\n\n        Member ZJW0003 of HLQ.SAMPLIB provides a sample USERMOD\n        accomplishing this.  If ZJW0003 fits your system just submit\n        it. If not use any other method of your choice to add the\n        required DD cards.\n\n    5.  Edit   SYS1.PARMLIB(RAKFINIT) and change the value NO in line\n        1 to ASK.  Then reIPL the system. Message RAKF002A will now be\n        issued immediately after master scheduler initialization and\n        give you the choice to start  RAKF or not.  Reply YES to\n        initialize RAKF and continue the IPL.\n\n    6.  Start now modifying your USERS and PROFILES tables until the\n        desired level of protection is reached.  Please read chapter:\n        \"Setting Up and Enabling the Users and Profiles Tables\" on\n        page 9 for information on setting up these tables.\n\n8\n\n----------------------- Page 9-----------------------\n\n    7.  Once you're satisfied with your configuration change line 1 in\n        SYS1.PARMLIB(RAKFINIT) from ASK to YES which will cause RAKF\n        to be activated unconditionally during IPL.\n\nSetting Up and Enabling the Users and Profiles Tables\n\nPlease note that when MVS is informed that \"security\" is present on\nthe system, all previously defined passwords, including VSAM\npasswords, are ignored.  Any password protection must be reinstated by\nthe security system.  Evidently, the MVS designers wanted any\npasswords designated by security, not to be interfered with by any\nother password mechanisms in MVS.\n\nAdditionally it should be noted that the ESG Security System, which\nRAKF is based on, has been developed in 1991 for MVS versions released\n5 to 10 years later than RAKF's target MVS 3.8j.  Consequently RAKF\nsupports security features that are used by MVS 3.8j differently than\nby later MVS versions or are not used at all and thus will not work as\nexpected.  Please read chapter \"Security Authorization Facility (SAF)\nSupport in MVS 3.8j\" on page 12 for considerations concerning this\nsituation.\n\nThe way that protection will work on your system is entirely up to\nyour control. Protec- tion depends completely on the way you code  the\nusers and profiles tables.  RAKF utilizes these tables for its\nprotection decisions, instead of using a RACF\u00d6 database.  Minimal\ntables to create a state equivalent to MVS without an active security\nproduct have been provided. Starting from these you should gradually\nmove forward to tight- en security as needed on your system.\n\nIn order for both the users and profiles tables to be valid, they must\nbe in sort order.  Under RPF Edit, the command \"SORT\" is adequate to\nsort the records correctly (if they were coded properly in the first\nplace). Sort errors will inhibit initialization of the tables and will\ngenerate nasty error messages.\n\nNote that the tables may contain comment lines starting with an\nasterisk (*).  If you have comment lines in your tables using a \"SORT\"\ncommand in RPF Edit will move these lines away from their desired\nlocation.  Consequently it is advisable to keep your users and\nprofiles tables in sort order manually if comment lines are used.\n\nIn the profiles table,  DEFAULT, or \"UNIVERSAL\" access for any\nfacility or dataset must be coded before any specific access is coded.\nYou code a universal access entry in the profiles table by leaving the\nuser group field blank.  Then you code other entries for the same\nfacility, specifying different settings for each user group that will\nhave special access (or denial of access) to that facility.\n\nGenerally, only those features included in \"IBM RACF\u00d6 Version 1.7\"\nhave been emulated.\n\nRAKF uses the decision logic of the ESG Security System without\nmodifications.  The author of the ESG security system has referred to\ntwo RACF\u00d6 Manuals during his planning.  It is important for all users\nof RAKF to obtain these manuals also. These are needed in the security\nadministration, which will be ongoing.\n\n\n\n----------------------- Page 10-----------------------\n\n\nThe two manuals are:\n\nSPL RACF                     -  Referred to for information how to\n(SC28-1343-2)                   write macros and return codes.\n\nRACF Administrator's Guide   -  Has an overview of profiles that\n(SC28-1340)                     should be used, and their structure.\n\nYou should try to find versions of these manuals being as close as\npossible to RACF\u00d6  Version 1.7 because later manuals describe features\nnot available with RAKF and/or MVS 3.8j.\n\nAn example for a minimal users table may be found in the member MINUSR\nin HLQ.SAMPLIB. An example for a minimal profiles table may be found\nin the member MINPRF. Users of Volker's Turnkey 3 system can find in\nmember TK3USR a users table defining all users present in the system\nafter initial TK3 installation to RAKF.  Note, however, that these\ntables only define users and passwords. All profiles are set to grant\nevery request, so the system is in a state equivalent to running\nwithout an active security product after activating these minimal\ntables.\n\nMembers CJYUDATA and CJYPDATA of the original ESG Security System\ndistribution as available in CBT file 165 are sample tables showing a\nrealistic setup and might be used as an example for defining the RAKF\ntables for MVS 3.8j. It is hoped that enough data is provided in these\nexamples to give a working knowledge for further coding and setting\nup but it should be noted that these tables use resource classes\navailable only in MVS versions 5 to 10 years later than MVS 3.8j and\nthus cannot be used as they are. Major differences in security\nhandling  between MVS 3.8j and later systems are detailed in chapter\n\"Security Authorization Facility (SAF) Support in MVS 3.8j\" on page\n12.\n\nPlease be informed that in core, these tables will be read from the\nbottom upwards which is the reason why the source tables need to be in\nascending sort order: Read- ing them in reverse order ensures to find\nthe most significant hit for a resource or user search before any\nless significant hits, so tables search can (and will!) always be\nstopped upon the first hit.\n\n10\n\n----------------------- Page 11-----------------------\n\nThe users table is coded in SYS1.SECURE.CNTL(USERS) as follows:\n\n Columns    Contents\n\n   1 -  8   USERID (TSO, CICS, or whatever application)\n\n  10 - 17   User Group (Installation defined)\n\n  18        Asterisk '*' to denote that multiple user\n            groups exist for this userid. Otherwise blank.\n\n  19 - 26   Password\n\n  28        Operations Authority (Y or N). If \"Y\", then ac-\n             cess is always granted to this user unless it\n             is denied explicitly.\n\n  31 - 50   Comment field (ignored by ESG Security but used\n             by \"IBM RACF\u00d6\").\n\n  51 - 80   Ignored\n\nUserids in the users table that were set up with multiple group\nentries will get the highest authority for all protected objects in\nall the groups. As a practical example, multiple groups are used for\nmanagers who oversee the work of several programming groups.  The\nmultiple group arrangement gives these managers access to everything\ndone by all the groups under them.\n\nThe users table is activated by issuing the command\n\nS RAKFUSER\n\nat the MVS console.\n\nThe profiles table is coded in SYS1.SECURE.CNTL(PROFILES) as follows:\n\n Columns    Contents\n\n   1 -  8   Facility title: (DASDVOL, DATASET, FACILITY,\n            etc.) See the RACF\u00d6 Administrator's Guide. You\n            need to know the different facility types used\n            by the operating system, CICS, TP products, and\n            vendor products.\n\n   9 - 52   Dataset Name, or Generic Name, or Name to be\n            protected.  (Generics are achieved using the\n            asterisk '*'. See the examples.)\n\n  53 - 60   User Group Id (Installation defined). Blanks in\n            this field denote universal access rules for\n            this resource.\n\n  61 - 66   Permission Level (NONE, READ, UPDATE, ALTER)\n\n  67 - 72   Blank\n\nTo protect products other than MVS 3.8j, they must have an interface\nto the security system, typically through the use of specific profiles\nin the FACILITY class.\n\nThe profiles table is activated by issuing the command\n\nS RAKFPROF\n\nat the MVS console.\n\n\n\n----------------------- Page 12-----------------------\n\nIt has to be  reemphasized that your security protection is completely\ndependent on how you code these tables.  Please get most of your\nknowledge from the RACF\u00d6 Administrator's Guide.\n\nSpecial attention should be given to the fact that RAKF allows ALTER\naccess to all undefined resources.   A user can, for example, delete\nany dataset on any volume even if access NONE is defined for the\ndataset as long as there is no DASDVOL profile defined:  ALTER access\nto a DASDVOL allows scratching of any file on it regardless of the\nfile's protection and exactly that's what a user gets if no DASDVOL\nprofile is defined.\n\nBatch Jobs and Started Task Considerations\n\nBatch jobs and STCs are controlled as follows:  All batch jobs default\nto a userid of PROD and a user group of PRDGROUP.  Started tasks are\nforced a userid of STC and a user group of STCGROUP.  This default is\nimposed by ICHSFR00.  Any job that has no userid connected to it is\nassigned a userid of PROD and a user group of PRDGROUP by ICHSFR00.\nThat situation is true for jobs submitted by RJE or by a local (card\nor internal) reader.  The authorities (i.e.  Operations or not) of the\nPROD and STC userids are hardcoded in ICHSFR00.  Upon initial RAKF\ninstallation, the PROD user has no Operations authority while the STC\nuser has Operations authority defined.  The specific authorities of\nthe PRDGROUP and STCGROUP groups are controlled by the profiles table.\n\nUnder MVS 3.8j no userid propagation takes place.  Without further\nmeasure all jobs entering the system have no userid and thus get\nuserid PROD and group PRDGROUP assigned by RAKF, be it jobs submitted\nby already authenticated users or jobs, or by started tasks.  That\nmeans that all jobs that shall run under a specific userid and/or\ngroup need to have the USER and PASSWORD parameters coded on their JOB\ncard.  Coding these parameters constitutes a security hole if jobs are\nsaved in publicly readable JCL libraries. But even with read protected\nJCL libraries having to code these parameters is for sure not desired.\n\nTo avoid having to code USER and PASSWORD parameters on JOB cards it\nis highly recommended to install an IKFEFF10 user exit that\nautomatically  provides these parameters for jobs submitted using the\nTSO submit command processor and to con- figure RPF to use TSO submit\ninstead of RPF submit. That way the majority of jobs submitted in day\nto day system usage don't need to code these parameters on their JOB\ncards. There are many such exits available on the CBT tape and it\nmight be a problem to find one that fulfills that (and only that)\nfunction and works on MVS 3.8j.  File 358 from the \"Georgia\nDepartement of Labor\" on the old CBT249 archive does exactly that.\n\nSecurity Authorization Facility (SAF) Support in MVS 3.8j\n\nRAKF supports security features that are used by MVS 3.8j differently\nthan by later MVS versions or are not used at all and thus will not\nwork as expected. The \"histori- cal\" reason for this is that  RAKF's\npredecessor ESG Security System is dated 1991 which is 5 to 10 years\nlater than most components of  \"current\" MVS 3.8j systems.  Some of\nthe issues resulting from this discrepancy are discussed here.\n\n12\n\n----------------------- Page 13-----------------------\n\nGeneral Resource Classes\n\nThere are resource classes supported by RAKF but not used by MVS 3.8j.\nSo, if you are going to define a profile in any resource class in the\nRAKF profiles table that you never used before make sure to test it by\ntrying an access that should be denied by that profile. Only if it\nthen really gets denied, you can be sure that the corresponding hook\nto call the SAF is already implemented in the level of MVS you are\nrunning.\n\nThe probably most relevant of these classes is the PROGRAM class which\nis meant to be used to protect programs from being executed by\nunauthorized users:  RAKF will accept profiles in the PROGRAM class\nflawlessly but none of the programs defined there will be protected\nbecause MVS 3.8j simply doesn't ask SAF for permission before\nexecuting a program.\n\nSo, basically, with MVS 3.8j one has to make sure that \"critical\"\nprograms cannot be executed by unauthorized users through other means.\nThe following solutions might be feasible on a case by case basis:\n\n    ?  Programs with source code available:  Introduce a profile in\n        the FACILITY class and have the program verify the caller's\n        authorization against this profile.\n\n        An example for this method can be found within RAKF itself\n        (introduced through PTF RRKF003):  The utilities  RAKFUSER and\n        RAKFPROF used to update the in-core USERS and PROFILES tables\n        are critical in the sense that anyone having access to them\n        can take over the security administration of the whole system\n        and thus can conduct arbitrary fraudulent activities.  To\n        enable control over who is authorized to use these utilities\n        they request READ access to  FACILITY RAKFADM and don't\n        execute if this access isn't granted.  That way the use of\n        these utilities can effectively be restricted by defining\n        profile RAKFADM in the FACILITY class and giving only\n        authorized users or groups READ access to this profile.\n\n    ?  Programs without source code available: Create a separate\n        loadlib protected by a DATASET profile and place the program\n        there. This, of course, is kind of a last resort.\n\nDataset Protection\n\nThe implementation of calls to the security system in MVS 3.8j to\nprotect datasets greatly relies on the concept of indication: Only\ndatasets having their \"RACF indicator\" set on are reliably protected.\nThe RACF indicator is a bit in the type 1 DSCB of a non-VSAM dataset\nor in the catalog entry of a VSAM object.  Once activated RAKF ensures\nthat all newly created datasets, catalogs and VSAM objects have their\nRACF indicator turned on.  But this is typically not the case for\nalready existing ones.  So it is strongly recommended to manually turn\nthe RACF indicator on for all datasets, catalogs and VSAM objects that\nalready existed before RAKF activation. It should also be noted that\nonce the whole system is RAKF protected (i.e. the RACF indicator is on\nfor all datasets, catalogs and VSAM objects) it is no longer feasible\nto run it without RAKF being active as most accesses will then be\ndenied.\n\n\n\n----------------------- Page 14-----------------------\n\n\nFirst time users of RAKF might have a problem instantly RACF\nindicating all datasets in the system.  Also there might be users\nneeding to protect only none VSAM datasets (i.e.  don't need catalog\nand/or VSAM object protection).  For those users a set of ZAPs to the\nMVS modules handling non-VSAM datasets is provided that enforce calls\nto RAKF for all non-VSAM datasets, not only for those with RACF\nindicator turned on.  So the easiest way to get some basic protection\non the system is to simply install RAKF together with the MVS ZAPs and\nyou're all set.\n\nIt should be noted, however, that this constitutes a massive change of\nlogic flow in the modules ZAPed. There exist complex interactions\nbetween VSAM  catalog man- agement and the DADSM functions modified by\nthe ZAPs. So, while intensive testing has   shown   that   these ZAPs\ntogether   with   correctly   defined   RAKF  DATASET   and DASDVOL\nprofiles   provide   reliable   protection   for   non-VSAM datasets,\nthey   partly break   VSAM   catalog   management.   An  artifact  of\nthis   situation   is  that   with   applied ZAPs   an   IDCAMS\n\"DELETE   CLUSTER\"   command   of   a   VSAM   cluster   that  hadn't\nbeen allocated with the SUBAL option ends with CC=0 but leaves the\ndata and index dataspaces of this cluster orphaned on disk.\n\nPhil Roberts has found a workaround to delete these orphaned VSAM\ncomponents from disk which is cited here to help in case this problem\noccurred. He wrote:\n\n\"I have tinkered some and have a work around for the situation where a\nVSAM dataset may get orphaned due to a mixed environment. It doesn't\ntake any outside utilities.\n\nBasically if a VSAM cluster is deleted while running with the MVSZAPs\n(not recommended operation but perhaps necessary for some) one can:\n\n- DELETE hlq.vsam.name NOSCR\n- CDSCB hlq.vsam.name.data DSORG(PS) VOL(xxxxxx) RACF\n- CDSCB hlq.vsam.name.index DSORG(PS) VOL(xxxxxx) RACF\n- RPF 3.4 with hlq and VOL xxxxxx to C CATALOG then D to delete the\n   orphaned components from pack xxxxxx\"\n\nThis example illustrates why it is strongly recommended to use the MVS\nZAPs only temporary, during a phase while working to RACF indicate the\nwhole system, and to remove them as soon as possible.\n\n14\n\n----------------------- Page 15-----------------------\n\nThe following table gives an overview on the influence of the ZAPs in\na few scenarios and should help to decide whether to use them or not:\n\n                                          ___________________________________\n                                         | All datasets   |                    |\n                                         | VSAM objects   | System has mixed   |\n                                         | and catalogs   | indication status  |\n                                         | are indicated  |                    |\n                                         |        |       |  VSAM     |  NVSAM |\n                                         |        |       |  i | n |  i | n    |\n                                         | VSAM   | NVSAM |  n | o |  n | o    |\n ____________________________________    |        |       |  d | t |  d | t    |\n |    Z | Reliable protection            |   Y    |    Y  |  Y | N |  Y | Y    |\n |    A | Reliable catalog management    |   N    |    Y  |  N | N |  Y | Y    |\n |    P | Catalog protection             |   Y    |    Y  |  Y | N |  Y | N    |\n |    Z | Reliable protection            |   Y    |    Y  |  Y | N |  N | N    |\n | No A | Reliable catalog management    |   Y    |    Y  |  Y | Y |  Y | Y    |\n |    P | Catalog protection             |   Y    |    Y  |  Y | N |  Y | N    |\n\nIt should be noted that in a mixed environment without ZAPs even\nindicated non-VSAM datasets aren't reliably protected.  That's not a\ntypo!  The table shows clearly that one should by all means try to\nreach the \"not ZAPed and fully indicated\" configuration because this\nis the only one to provide full protection without introducing risky\nchanges to basic system functionality.\n\nThe following steps describe the installation and removal of the MVS\nZAPs:\n\n    1.  Run job LPABACK: In step 2 you'll ZAP MVS modules IFG0194A,\n        IGC0002I, IGC00030 and IGG0553A.  These modules are typically\n        located in SYS1.LPALIB but they might also be elsewhere in\n        LPALIST or LINKLIST.  Job LPABACK copies these modules and\n        their aliases to a backup library... just in case you want to\n        revert to the non-ZAPed versions later.  Find out where these\n        modules reside on your system and change SYS1.LPALIB in job\n        LPABACK to the name of that library.  If you want to use\n        another name for the backup library than RAKF.LPALIB.BACKUP\n        then change that name too at the location indicated by a\n        comment in the JCL.  Then submit the job and check that the\n        library has been created correctly.  It should contain 4\n        members and 17 aliases.\n\n    2.  Run job ZAPMVS38: This job applies the MVS ZAPs.  If necessary\n        change the //SYSLIB DD statement to the name of the library\n        where IFG0194A, IGC0002I, IGC00030 and IGG0553A reside.  If\n        module IFG0194A had already been ZAPed as recommended in Phil\n        D's original rakf.pdf installation procedure then comment out\n        the 6 ZAP statements indicated by the respective comment in\n        the job.  Run the job and verify that the ZAPs where\n        successful.  If any of the ZAPs failed your system isn't at a\n        service level compatible with the ZAPs.  The ZAPs were tested\n        with the following PTF levels of the ZAPed modules:\n\n            ?   IFG0194A PTF UZ74083\n            ?   IGC0002I PTF UZ68267\n            ?   IGC00030 PTF UZ63439\n            ?   IGG0553A PTF UZ63439\n\n\n\n----------------------- Page 16-----------------------\n\n        This is the level of Volker's Turnkey 3 system.  If you're\n        using other PTF levels most probably the ZAPs need to be\n        reworked to reflect at least the correct addresses of the\n        ZAPed instructions. After having run job ZAPMVS38 success-\n        fully your system is ready to use with RAKF 1.2.0 for basic\n        none VSAM dataset protection.\n\n    3.  Restore job LPAREST:  If you want to remove the MVS ZAPs...\n        job LPAREST copies the modules backed up in step 1 by job\n        LPABACK back to their original locations.  If you adjusted\n        dataset names in LPABACK make analogous changes in LPAREST\n        before running it.  Please note that Phil D's original OPEN\n        processing ZAP is still applied after running LPAREST if it\n        was already applied before running LPABACK.  So, if you want\n        to get rid of that ZAP too which is strongly  recommended, you\n        need to find another source to restore IFG0194A and its\n        aliases from (hopefully you backed them up before applying\n        Phil D's ZAP).\n\nDeinstallation\n\nThis document describes the steps to deinstall RAKF 1.2.0 and\nreinstate native MVS security behavior.\n\n  /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n  Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!\n  \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\n\nDEINSTALLING RAKF IS NOT RECOMMENDED!\n\nAfter deinstallation RACF indicated files will no longer be\naccessible. This may lead to a not IPLable or not accessible system.\nRemoving RAKF and reinstating native MVS security behavior is not\nrecommended unless in preparation the RACF indicator of all non VSAM\ndatasets, VSAM catalogs and VSAM objects has been turned off.\n\nThe recommended way instead of deinstalling RAKF is to let it be\ninstalled and active and replace the profiles table by the minimum\ntable MINPRF from HLQ.SAMPLIB.  This enables ALTER access by everyone\nto everything and thus is access wise equivalent to a vanilla MVS\nsystem without RAKF.\n\nDEINSTALLING RAKF IS NOT RECOMMENDED!\n\n  /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n  Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!\n  \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\n\nThe following instructions assume that you've read the above\nrecommendation and understood the consequences of removing RAKF from\nyour system.  Continue at your own risk:\n\n    1. If you've applied the MVS ZAPs using job ZAPMVS38 consult\n       chapter \"Dataset Protection\" on page 13 on how to remove these\n       ZAPs.  The ZAPs MUST be removed prior to deinstalling RAKF\n       otherwise the system will not be accessible or will not even\n       IPL after the deinstallation.\n\n16\n\n----------------------- Page 17-----------------------\n\n\n    2. Copy members C@APPLY, RAKFRMV and  RAKF2MVS from your RAKF\n       SAMPLIB to a private library.  Work with these copies\n       throughout the following steps as the RAKF libraries will be\n       deleted! The jobs to be edited and submitted in the course of\n       this procedure have been prepared under the assumption that the\n       libraries to be deleted or modified can be located through the\n       standard catalog search order.  If this is not the case look\n       thoroughly through the JCL to be sure to add VOL and/or UNIT\n       parameters to the DD statements to correctly identify the\n       libraries.\n\n    3. a) If RAKF SYSMOD TRKF120 has been APPLYed but not ACCEPTed,\n          edit installation job C@APPLY:\n\n            ?  change all occurences of HLQ to the high level\n               qualifier of your RAKF libraries, e.g. RAKF,\n               RAKF.V1R2M0, etc. and verify the correct se quence\n               of the overiding DD statements against your SMPAPP\n               procedure as described in chapter \"Installation\" on\n               page 4.\n\n            ?  change the command \"APPLY S(TRKF120) DIS(WRITE)\" in\n               line 30 to read \"RESTORE S(TRKF120) DIS(WRITE)\".\n\n           Submit changed job C@APPLY to remove all RAKF components\n           from your system.\n\n        b) If RAKF SYSMOD TRKF120 has been ACCEPTed, edit job RAKFRMV:\n\n           Change all occurrences of tttt to the device type and all\n           occurrences of rrrrrr to the volume of the sysres device\n           where SYS1.LPALIB and SYS1.LINKLIB of the system reside\n           from which RAKF is to be deleted (if you are running TK3\n           MVS and delete from your current system the device type is\n           3350 and the volume is MVSRES).\n\n           Submit changed job RAKFRMV to remove all RAKF components\n           from your system.\n\n    4. Review the DD statements pointing to SYS1.LINKLIB and\n       SYS1.LPALIB in job RAKF2MVS and add VOL and/or UNIT parameters\n       if necessary.  Change all occurences of HLQ to the high level\n       qualifier of your RAKF libraries.  Submit the job which\n       concludes the deinstallation procedure.\n\nThe system libraries as well as SMP are now reverted back to native\nMVS security.  Before activating this configuration through an IPL\nCLPA make sure that no dataset needed for IPL is RACF indicated.\n\n\n\n----------------------- Page 18-----------------------\n\nVersion History\n\nESG Security System (March 1991)\n\nThe ESG Security System was published by Craig J. Yasuna as an\nalternative to IBM's RACF\u00d6 and similar products.  It uses the ICHRTX00\nsecurity router exit to communicate its security decisions to MVS.\nICHRTX00 is a user exit of the SAF router ICHSFR00.\n\nRAKF \"RAcK oF\" Security System (August 2005)\n\nRAKF was published by A. Philip Dickinson as an adaption of the ESG\nSecurity System to MVS 3.8j.  The ESG Security doesn't natively\nsupport MVS 3.8j for several reasons.  The major ones are:\n\n    ?  At MVS 3.8j times the SAF router ICHSFR00 was part of the RACF\u00d6\n        product and thus not  available on MVS systems without  RACF\u00d6\n        being installed. So the  ICHRTX00 exit as a convenient place\n        for third party security products to hook into the SAF didn't\n        exist.\n    ?  incompatible ACEE handling.\n    ?  The ESG Security System uses the BAS instruction which is not\n        available  in S/370.\n    ?  ESG Security's 24/31 bit AMODE handling wasn't compatible with\n        the usage of high order address bytes for flags in MVS 3.8j.\n    ?  incompatible parameter lists of RACROUTE, RACDEF, RACHECK and\n        RACINIT.\n    ?  handling of in core profiles incompatible with MVS's VSAM\n        catalog management.\n\nPhil D. converted ESG Security's ICHRTX00 router exit into an ICHSFR00\nSAF rout- er to overcome the first major incompatibility. He also\nsolved the next two points and in parts the 24/31 bit AMODE issues.\nThe rest remained undetected when he published his work and caused\nseveral problems when using RAKF on MVS 3.8j:\n\n    ?  Arbitrary 0C4 abends during RACINIT and RACDEF processing. The\n        most severe of these abends is the \"initiator blowout\"\n        mentioned in\n        http://tech.groups.yahoo.com/group/H390-MVS/message/10015.\n\n    ?  Arbitrary 0C4 abends and FREEMAIN errors during RACHECK\n        processing of VSAM catalogs and objects. These problems are\n        discussed in\n        http://tech.groups.yahoo.com/group/H390-MVS/message/11811.\n\n    ?  Arbitrary invalid authorization decisions: Access denied if it\n        should have been granted and access granted if it should have\n        been denied. The latter in a way that with some trial and\n        error any user is able to acquire ALTER access to any dataset\n        in the system.\n\n18\n\n----------------------- Page 19-----------------------\n\nRAKF 1.2.0 (April 2011)\n\nWhen the above mentioned problems became visible and identified as\nbeing RAKF caused in several MVS 3.8j environments, it turned out that\nPhil D's RAKF source wasn't accessible any more (lost in a package\ncrate from moving).  Phil Roberts stepped in and reconstructed the\nsource by disassembling Phil D's binary RAKF distribution and\ncomparing it with the original source of the ESG Security System.\nBased on that reconstructed source the rest of the incompatibilities\nlisted above were identified and corrected by Jurgen Winkelmann.\n\nTo avoid another loss of the source to occur, an additional effort has\nbeen made to clean up the source to a publishable state and to provide\nan SMP4 compatible source distribution, enabling RAKF installation\nusing the standard SMP 4 RECEIVE, APPLY, ACCEPT procedure.\n\nRAKF 1.2.0 PTF Summary\n\nThe following PTFs are available as of the publishing date of this\nmanual:\n\nRRKF001:       Enable comment lines (lines starting with * ) to be\n               entered in the source users and profiles tables and\n               minor bug fixes in RAKFUSER utility.\n\nRRKF002:       Enhance RACINIT NEWPASS functionality to support\n               permanent password changes to be initiated by an\n               application.  This enables standard password change\n               functionality as for example entering currentpw/newpw\n               on the \"ENTER CURRENT PASSWORD for uuuuuuu\" at TSO\n               logon time.\n\nRRKF003:       Security enhancement in users and profiles tables\n               processing.\n\nRRKF004:       Consolidation of documentation members from RAKF's\n               SAMPLIB to this manual.\n\nThese PTFs are available in folder files/RAKF/PTFs of the H390-MVS\nYahoo group and in CBT file 850, future PTFs will be made available at\nthe same locations.\n\n\n\n----------------------- Page 20-----------------------\n\nAppendix A: Copyright Information\nPlease observe the ESG Security System copyright whenever using this\nproduct:\n\n*\n**********************************************************************\n*                                                                    *\n*    COPYRIGHT (C) 1991 BY CRAIG J. YASUNA.  ALL RIGHTS RESERVED.    *\n*                                                                    *\n*    THIS SOFTWARE PRODUCT OR ANY OF ITS COMPONENTS MUST NOT BE      *\n*    SOLD, GIVEN, OR OTHERWISE DISTRIBUTED TO ANY OTHER COMPANY      *\n*    WITHOUT THE PRIOR WRITTEN PERMISSION OF:                        *\n*                                                                    *\n*                                  CRAIG J. YASUNA, PRESIDENT        *\n*                                  ENTERPRISE SYSTEMS GROUP          *\n*                                  2 MARC COURT                      *\n*                                  EDISON, NEW JERSEY 08820          *\n*                                                                    *\n*    THIS PRODUCT IS NOT \"PUBLIC-DOMAIN\", BUT ITS AUTHOR HAS GIVEN   *\n*    PERMISSION THAT IT BE DISTRIBUTED ON THE CBT MVS MODS TAPE.     *\n*                                                                    *\n**********************************************************************\n*\n* From: Yasuna, Craig\n* Sent: Thursday, April 07, 2011 6:47 PM\n* To: Winkelmann Juergen\n* Subject: RE: Question concerning the ESG Security System\n*\n* Absolutely ... I am very glad that the code still lives on and that it\n* has value.\n*\n* THANKS!!! - Craig\n*\n* -----Original Message-----\n* From: Winkelmann Juergen\n* Sent: Thursday, April 07, 2011 12:46 PM\n* To: Yasuna, Craig\n* Subject: Question concerning the ESG Security System\n*\n* . . .\n*\n* Phil Roberts reconstructed Phil Dickinson's changes to the original\n* ESG source through disassembly and compare.  Based on that source I\n* finalized Phil D's work and now have RAKF fully working on MVS\n* 3.8j.  I'm still in a final testing phase.  After having finished\n* this, I'd like to post RAKF to the H390-MVS group and also to\n* submit the changed  source back to CBT to avoid it getting lost\n* again.  Before doing this, I'd like to ask for your consent as the\n* original author.  As far as I understood Phil D asked for the same\n* permission in 2005 but I don't want to just quietly take over from\n* him.\n\n20\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RAKFDOC#": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x06\\x00E\\x01\\x11\\x17?\\x01\\x11\\x17?\\x01T%\\x9e%\\x9e\\x00\\x00\\xd7\\xc4\\xc6@@@@@@@'", "ispf": {"version": "02.06", "flags": 0, "createdate": "2011-06-22T00:00:00", "modifydate": "2011-06-22T01:54:45", "lines": 9630, "newlines": 9630, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "RAKFDOC@": {"ttr": 8965, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x06\\x00\\x07\\x01\\x11\\x17?\\x01\\x11\\x17?\\x01V\\x04|\\x04|\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "02.06", "flags": 0, "createdate": "2011-06-22T00:00:00", "modifydate": "2011-06-22T01:56:07", "lines": 1148, "newlines": 1148, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "datatype": "binary", "extension": ".docx"}, "RAKFRMV": {"ttr": 9476, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13\\x1f\\x01\\x11\\x13\\x0f!\\x15\\x00\\xb3\\x00\\xb3\\x00\\x00\\\\\\xd9\\xc1\\xd2\\xc6\\\\@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-11T00:00:00", "modifydate": "2011-05-10T21:15:00", "lines": 179, "newlines": 179, "modlines": 0, "user": "*RAKF*"}, "text": "//RAKFRMV  JOB (RAKF),\n//             'RAKF Removal',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             REGION=8192K,\n//             MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* Remove RAKF 1.2.0                                                 *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*  This job is to be used for RAKF removal only if RAKF is in       *\n//*  ACCEPTed state. If RAKF is APPLIed but not ACCEPTed use the      *\n//*  the SMP command \"RESTORE S(TRKF120)\" instead of this job         *\n//*  to remove it.                                                    *\n//*                                                                   *\n//*  After RAKF removal the system is NOT IPLable until the original  *\n//*  MVS stub modules have been reinstated. Refer to job RAKF2MVS     *\n//*  for reinstating these modules                                    *\n//*                                                                   *\n//*   /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/     *\n//*   Danger!!! Danger!!! Danger!!! Danger!!! Danger!!! Danger!!!     *\n//*   \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\     *\n//*                                                                   *\n//*                                                                   *\n//* Expected return codes: Step UCLIN:    00                          *\n//* Expected return codes: Step SCRATCH:  00                          *\n//* ------------------------------------------------------------------*\n//*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from SMP                                     *\n//* ------------------------------------------------------------------*\n//UCLIN   EXEC SMPAPP\n//SMPCNTL  DD  *\n UCLIN CDS .\n  DEL LMOD(ICHRIN00) .\n  DEL LMOD(ICHSEC00) .\n  DEL LMOD(ICHSFR00) .\n  DEL LMOD(RACIND)   .\n  DEL LMOD(RAKFPROF) .\n  DEL LMOD(RAKFPWUP) .\n  DEL LMOD(RAKFUSER) .\n  DEL  MOD(CJYRCVT)  .\n  DEL  MOD(ICHRIN00) .\n  DEL  MOD(ICHSEC00) .\n  DEL  MOD(ICHSFR00) .\n  DEL  MOD(IGC0013A) .\n  DEL  MOD(IGC0013C) .\n  DEL  MOD(IGC00130) .\n  DEL  MOD(RACIND)   .\n  DEL  MOD(RAKFPROF) .\n  DEL  MOD(RAKFPSAV) .\n  DEL  MOD(RAKFPWUP) .\n  DEL  MOD(RAKFUSER) .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RACIND)   .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPSAV) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC($DOC$ZIP) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RACIND)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(IEZCTGFL) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(RRKF001) .\n  DEL  SYSMOD(RRKF002) .\n  DEL  SYSMOD(RRKF003) .\n  DEL  SYSMOD(RRKF004) .\n  DEL  SYSMOD(RRKF005) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n UCLIN ACDS .\n  DEL  SRC(CJYRCVT)  .\n  DEL  SRC(ICHRIN00) .\n  DEL  SRC(ICHSEC00) .\n  DEL  SRC(ICHSFR00) .\n  DEL  SRC(IGC0013A) .\n  DEL  SRC(IGC0013C) .\n  DEL  SRC(IGC00130) .\n  DEL  SRC(RACIND)   .\n  DEL  SRC(RAKFPROF) .\n  DEL  SRC(RAKFPSAV) .\n  DEL  SRC(RAKFPWUP) .\n  DEL  SRC(RAKFUSER) .\n  DEL  MAC($$$$$DOC) .\n  DEL  MAC($$$$INFO) .\n  DEL  MAC($$COPYRT) .\n  DEL  MAC($$NOTICE) .\n  DEL  MAC($DOC$ZIP) .\n  DEL  MAC(A@PREP)   .\n  DEL  MAC(B@RECV)   .\n  DEL  MAC(C@APPLY)  .\n  DEL  MAC(D@ACCPT)  .\n  DEL  MAC(LPABACK)  .\n  DEL  MAC(LPAREST)  .\n  DEL  MAC(MINPRF)   .\n  DEL  MAC(MINUSR)   .\n  DEL  MAC(RACIND)   .\n  DEL  MAC(RAKFRMV)  .\n  DEL  MAC(RAKF2MVS) .\n  DEL  MAC(TK3USR)   .\n  DEL  MAC(ZAPMVS38) .\n  DEL  MAC(ZJW0003)  .\n  DEL  MAC(CJYPCBLK) .\n  DEL  MAC(CJYRCVTD) .\n  DEL  MAC(CJYUCBLK) .\n  DEL  MAC(IEZCTGFL) .\n  DEL  MAC(YREGS)    .\n  DEL  MAC(RAKF)     .\n  DEL  MAC(RAKFPROF) .\n  DEL  MAC(RAKFPWUP) .\n  DEL  MAC(RAKFUSER) .\n  DEL  MAC(RAKFINIT) .\n  DEL  SYSMOD(RRKF001) .\n  DEL  SYSMOD(RRKF002) .\n  DEL  SYSMOD(RRKF003) .\n  DEL  SYSMOD(RRKF004) .\n  DEL  SYSMOD(RRKF005) .\n  DEL  SYSMOD(TRKF120) .\n ENDUCL .\n/*\n//* ------------------------------------------------------------------*\n//* Remove RAKF elements from LINKLIB, LPALIB, PARMLIB and PROCLIB    *\n//* ------------------------------------------------------------------*\n//SCRATCH EXEC PGM=IEHPROGM\n//SYSPRINT DD  SYSOUT=*\n//DD1      DD  VOL=SER=rrrrrr,DISP=OLD,UNIT=tttt\n//SYSIN    DD  *\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHSFR00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013A\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013B\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013C\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=IGC0013{\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LPALIB,MEMBER=ICHRIN00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=ICHSEC00\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RACIND\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.LINKLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPROF\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFPWUP\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PROCLIB,MEMBER=RAKFUSER\n   SCRATCH VOL=tttt=rrrrrr,DSNAME=SYS1.PARMLIB,MEMBER=RAKFINIT\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RECEIVE": {"ttr": 9480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00W\\x01\\x00$\\x1f\\x01\\x11\\x10/\\x03\\x05\\x00\\n\\x00\\x07\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2011-04-12T03:05:57", "lines": 10, "newlines": 7, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n  RECEIVE INDS('SBGOLOB.CBT482.FILE850(LOADLIB)')\n  DSN('SBGOLOB.TRKF120.UTILS') VOL(WORK08)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RRKF001": {"ttr": 9482, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x002\\x01\\x11\\x11\\x1f\\x01\\x11\\x11\\x1f\\x14\\x15\\x003\\x003\\x00\\x00\\xd7\\xe3\\xc6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "2011-04-21T00:00:00", "modifydate": "2011-04-21T14:15:32", "lines": 51, "newlines": 51, "modlines": 0, "user": "PTF"}, "text": "++PTF(RRKF001) /*\n Enhancements and Fixes to RAKFUSER and RAKFPROF */ .\n++VER(Z038) FMID(TRKF120)\n /*\n + introduce change history to source members RAKFUSER and RAKFPROF\n + enable comment lines in RAKF users and profiles tables\n + consistently don't highlight error messages on MVS console\n + fix S378 abend after syntax/sequencing error in first line of UDATA\n + add missing DEQ for SECURITY,USERS\n */ .\n++SRCUPD(RAKFPROF) .\n./  CHANGE NAME=RAKFPROF,SSI=02010000\n*                                                                   @01\n*    Change History                                                 @01\n*                                                                   @01\n*    2011/04/03 TRKF120 base version                                @01\n*    2011/04/18 RRKF001 introduce change history                    @01\n*                       enable comment lines in UDATA and PDATA     @01\n*                                                                   @01\n********************************************************************@01\n         CLI   CLASS,C'*'              Comment?                     @01\n         BE    READLOOP                 read next record            @01\n./ ENDUP\n++SRCUPD(RAKFUSER) .\n./  CHANGE NAME=RAKFUSER,SSI=02010000\n*                                                                   @01\n*    Change History                                                 @01\n*                                                                   @01\n*    2011/04/03 TRKF120 base version                                @01\n*    2011/04/18 RRKF001 introduce change history                    @01\n*                       enable comment lines in UDATA and PDATA     @01\n*                       consistently don't specify msg descriptor   @01\n*                       fix S378 after error in first line of UDATA @01\n*                       add missing DEQ for SECURITY,USERS          @01\n*                                                                   @01\n********************************************************************@01\n         ENQ    (SECURITY,USERS,E,,SYSTEM),RET=HAVE serialization   @01\n         XR     R5,R5               initialize GM chain             @01\n         CLI    USERID,C'*'         Comment?                        @01\n         BE     READLOOP             read next record               @01\n         BE     NEWGROUP             same USER, check for new group @01\n         BNH    ABEND2               not in sort seq, tell about it @01\n         DEQ   (SECURITY,USERS,,SYSTEM) release ENQ                 @01\nABEND100 WTO    'RAKFUIDS1  RCVT NOT PROPERLY INITIALIZED'          @01\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **'               @01\nABEND2   WTO    'RAKFUIDS2  INPUT DATA INVALID OR OUT OF SEQ.'      @01\n                                           '                        @01\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **'               @01\nABEND300 WTO    'RAKFUIDS3  EMPTY INPUT FILE ?!?!'                  @01\n         WTO    'RAKFUIDSX  ** PROGRAM TERMINATED **'               @01\n./ ENDUP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RRKF002": {"ttr": 9484, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x01\\x11\\x11\\x8f\\x01\\x11\\x11o\\x18\\x00\\x01P\\x01P\\x00\\x00\\xd7\\xe3\\xc6@@@@@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-04-28T00:00:00", "modifydate": "2011-04-26T18:00:00", "lines": 336, "newlines": 336, "modlines": 0, "user": "PTF"}, "text": "++PTF(RRKF002) /*\n Make RACINIT Password Changes permanent */ .\n++VER(Z038) FMID(TRKF120) PRE(RRKF001)\n /*\n Summary of Changes:\n -------------------\n\n + Make RACINIT Password Changes permanent:\n\n   Before application of this PTF a new password supplied as NEWPASS\n   parameter of a RACINIT macro was updated in the in-core users table\n   only and thus lived until the in-core table was replaced by the\n   contents of the source users table at RAKF intialization time or by\n   running RAKFUSER. Thus users were able to change their passwords\n   only temporary. Permanent password changes required an RAKF\n   administrator to edit the RAKF users table manually.\n\n   This PTF changes processing of the NEWPASS parameter to queue the\n   new password for update in the source users table in addition to\n   updating the in-core users table. The password changes queue is\n   applied during RAKFUSER processing to the source users table before\n   the new in-core users table is created from the source table. This\n   makes all password changes initiated by end users through using the\n   password change facility of an application permanent and thus\n   fully functional (for example changing the password at TSO logon\n   time by entering currentpw/newpw at the \"ENTER PASSWORD\" prompt).\n\n + introduce change history to source member ICHSFR00\n\n Special Installation Instructions:\n ----------------------------------\n\n 1. This PTF modifies elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname ELEMENTS. File RRKF002.elements.zip\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    a //ELEMENTS DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //ELEMENTS DD statement can be removed from the\n    SMP jobs.\n\n    The following steps can be used to RECEIVE the PDS from file\n    RRKF002.elements.zip:\n\n    o Unzip rrkf002.elements.xmi from RRKF002.elements.zip and upload\n      it to dataset RAKF.RRKF002.ELEMENTS.XMI (LRECL=80,RECFM=FB) on\n      your MVS system using your standard unzip utility and upload\n      software.\n\n    o Submit the following job (requires the RECV370 utility to be\n      installed, of course):\n\n      //RCVELEMS JOB ...\n      //RECV370  EXEC PGM=RECV370\n      //RECVLOG   DD SYSOUT=*\n      //XMITIN    DD DSN=RAKF.RRKF002.ELEMENTS.XMI,DISP=SHR\n      //SYSPRINT  DD SYSOUT=*\n      //SYSUT1    DD DSN=&&SYSUT1,\n      //             UNIT=SYSDA,\n      //             SPACE=(CYL,(10,5)),\n      //             DISP=(,DELETE,DELETE)\n      //SYSUT2    DD DSN=RAKF.RRKF002.ELEMENTS,\n      //             DISP=(,CATLG),SPACE=(TRK,(6,2,1),RLSE),\n      //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n      //             UNIT=SYSDA\n      //SYSIN     DD DUMMY\n      //SYSUDUMP  DD SYSOUT=*\n\n    The dataset names used in this example can be changed to anything\n    you like as long as the //ELEMENT DD statement in the SMP APPLY\n    and ACCEPT jobs points to the dataset created by //SYSUT2 DD of\n    the RCVELEMS job.\n\n 2. RECEIVE and APPLY the PTF as usual. Don't IPL the system!\n\n 3. Perform step 1. b) from member $$$$CUST in HLQ.SAMPLIB (HLQ = high\n    level qualifier of the RAKF libraries) to define the RAKF\n    password changes queue dataset.\n\n 4. Perform step 4 from member $$$$CUST in HLQ.SAMPLIB to add the RAKF\n    password changes queue dataset DD statement to MSTRJCL. The sample\n    usermod ZJW0003 provided in HLQ.SAMPLIB has been adapted by this\n    PTF and can be rerun without changes if the original version had\n    been used at RAKF installation time.\n\n 5. IPL the system using the CLPA option.\n\n 6. ACCEPT the PTF according to your preferences after sufficient\n    testing.\n */ .\n++JCLIN .\n//RRKF002  JOB 1,'RAKF 1.2',MSGLEVEL=1,CLASS=A\n//*\n//* JCLIN for RAKF 1.2 PTF RRKF002\n//*\n//ASMUSER  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RAKFUSER)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RAKFUSER)\n//ASMPSAV  EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RAKFPSAV)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RAKFPSAV)\n//RAKFUSER EXEC  PGM=IEWL,PARM='MAP,LIST,LET,NCAL,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(RAKFUSER)\n INCLUDE SYSPUNCH(RAKFPSAV)\n ENTRY   CJYRUIDS\n NAME    RAKFUSER(R)\n/*\n++SRCUPD(ICHSFR00) .\n./  CHANGE NAME=ICHSFR00,SSI=02020000\n*                                                                   @02\n*    Change History                                                 @02\n*                                                                   @02\n*    2011/04/03 TRKF120 base version                                @02\n*    2011/04/26 RRKF002 introduce change history                    @02\n*                       enable end users to change their passwords  @02\n*                       permanently: store user's password change   @02\n*                       request in fetch protected CSA and pass the @02\n*                       request address to RAKFPWUP which queues it @02\n*                       for replacement in the RAKF users table     @02\n*                       at next run of RAKFUSER                     @02\n*                                                                   @02\n********************************************************************@02\n         GETMAIN RU,LV=PWUPL,SP=227 get fetch protected CSA         @02\n         MVC   0(PWUPCMDL,R1),PWUPSTRT move SVC 34 plist to CSA area@02\n         L     R3,PWUPXTBA         get translate table address      @02\n         USING PWUPSTRT,R1         address CSA area now             @02\n         ST    R1,PWUPADDR         store CSA area address for unpack@02\n         UNPK  PWUPUNPK(9),PWUPADDR(5) unpack CSA area address      @02\n         MVC   PWUPAHEX(8),PWUPUNPK unpacked address to SVC 34 plist@02\n         TR    PWUPAHEX(8),0(R3)   translate address to printable   @02\n         DROP  R1                  revert to standard addressability@02\n         MVC   PWUPCMDL(PWUPRECL,R1),PWUP initialize change record  @02\n         IC    R3,0(,R5)           length of user                   @02\n         BCTR  R3,0                subtract 1 for MVC               @02\n         EX    R3,PWUPMVCU         copy user                        @02\n         IC    R3,WORKPASS         length of new password           @02\n         BCTR  R3,0                subtract 1 for MVC               @02\n         EX    R3,PWUPMVCP         copy new password                @02\n         XR    R0,R0               set R0 = 0 for SVC 34            @02\n         SVC   34                  S RAKFPWUP,PARM='PWUPAHEX'       @02\n         XC    WORKPASS+1(8),=C'SECURITY' encrypt\n         IC    R1,WORKPASS         length of new password\n         EX    R1,RACIRPWD         replace password\nPWUPSTRT DC    AL2(PWUPCMDL)       parameter list to start RAKFPWUP>@02\n         DC    X'0000'              >is copied to CSA subpool 227  >@02\n         DC    C'S RAKFPWUP,PARM=''' >fetch protected storage with >@02\nPWUPAHEX DS    CL8                  >address passed in PARM field  >@02\n         DC    C''''                >in hexadecimal printable format@02\nPWUPCMDL EQU   *-PWUPSTRT          length of parameter list         @02\nPWUP     DS    0C                  changes queue record             @02\nPWUPUSER DC    CL8' '              userid                           @02\n         DC    C' '                filler                           @02\nPWUPPSWD DC    CL8' '              new password                     @02\n         DC    C' '                filler                           @02\nPWUPRECL EQU   *-PWUP              record length of changes queue   @02\nPWUPL    EQU   *-PWUPSTRT          total length of CSA area         @02\n         ORG   PWUP                changes queue record is >        @02\nPWUPADDR DS    F                      > temporarily used   >        @02\n         DS    X                      > for conversion of  >        @02\nPWUPUNPK DS    CL8                    > CSA area to        >        @02\n         DS    X                      > unpacked format             @02\n         ORG   PWUP+PWUPRECL       restore program counter          @02\n         USING PWUPSTRT,R1         address CSA area now             @02\nPWUPMVCU MVC   PWUPUSER(1),1(R5)   get user and new password >      @02\nPWUPMVCP MVC   PWUPPSWD(1),WORKPASS+1  > into change queue record   @02\n         DROP  R1                  revert to standard addressability@02\n*                                  spaceholder blanks removed       @02\n         DC    CL23' '             rest of spaceholder blanks       @02\nPWUPHXTB DC    C'0123456789ABCDEF' translate RAKFPWUP address to >  @02\nPWUPXTBA DC    A(PWUPHXTB-240)      > hex printable format          @02\n./ ENDUP\n++SRCUPD(RAKFPWUP) .\n./  CHANGE NAME=RAKFPWUP,SSI=02020000\n         PRINT NOGEN\n*\n**********************************************************************\n*                                                                    *\n* NAME: RAKFPWUP                                                     *\n*                                                                    *\n* TYPE: Assembler Source                                             *\n*                                                                    *\n* DESC: Process Password Update Requests                             *\n*                                                                    *\n* FUNCTION: - retrieve username and new password from CSA area       *\n*             allocated by ICHSFR00 in subpool 227 (fetch protected) *\n*           - clear and free CSA area                                *\n*           - append username and new password to the RAKF password  *\n*             change queue, a sequential dataset with LRECL=18,      *\n*             RECFM=F containing one line per password change in the *\n*             following format:                                      *\n*                                                                    *\n*             ----+----1----+---                                     *\n*             uuuuuuuu pppppppp                                      *\n*                                                                    *\n*             where uuuuuuuu is the username and pppppppp is the new *\n*             password, each padded to the right with blanks to 8    *\n*             characters.                                            *\n*                                                                    *\n* REQUIREMENTS: - RAKF password change queue pointed to by ddname    *\n*                 RAKFPWUP using DISP=MOD in the DD statement.       *\n*                                                                    *\n**********************************************************************\n*\n* initialize\n*\n         SAVE  (14,12),,RAKFPWUP_&SYSDATE._&SYSTIME\n         USING RAKFPWUP,R15        establish => program EP\n         ST    R13,SAVEAREA+4      save HSA\n         LA    R11,SAVEAREA        establish => savearea\n         ST    R11,8(R13)          save LSA\n         LR    R13,R11             setup => our savearea\n         USING SAVEAREA,R13        new addressability\n         DROP  R15                 program EP no longer needed\n         B     CONTINUE            branch around savearea\nSAVEAREA DS    18F                 savearea\n*\n* Begin of code\n*\nCONTINUE LR    R5,R1               remember PARM plist address\n         MODESET MODE=SUP,KEY=ZERO authorize ourselves\n         L     R1,0(,R5)           address of PARM field plist\n         LH    R5,0(,R1)           length of PARM field\n         CH    R5,=H'8'            is PARM field length 8 characters?\n         BNE   INVPARM              talk dirrty and exit if not\n         MVC   ADDRHEX,2(R1)       get PARM field in check plist\n         MVC   ADDRUNPK,2(R1)      get PARM field for translate\n         TR    ADDRUNPK,HEXTBL     translate PARM field to zoned\n         PACK  ADDRESS(5),ADDRUNPK(9) pack PARM field\n         L     R1,ADDRESS          address storage pointed to by PARM\n         CLC   0(LPWUPCMD,R1),STRTPWUP parmlist from ICHSFR00 found?\n         BNE   INVPARM              talk dirrty and exit if not\n         MVC   PWUPUSER(8),PWUPUSER-STRTPWUP(R1) get user\n         MVC   PWUPPSWD(8),PWUPPSWD-STRTPWUP(R1) get new password\n         XC    0(LPWUP,R1),0(R1)   clear ICHSFR00 parmlist storage\n         FREEMAIN RU,LV=LPWUP,A=ADDRESS,SP=227 free parmlist storage\n         ENQ    (SECURITY,USERS,E,,SYSTEM),RET=HAVE serialization\n         OPEN  (QUEUE,(OUTPUT))    open password change queue\n         PUT   QUEUE,PWUP          write entry\n         CLOSE (QUEUE)             close password change queue\n         DEQ   (SECURITY,USERS,,SYSTEM) release ENQ\n         MVC   SUCCESS+38(8),PWUPUSER move user into success message\n         WTO   MF=(E,SUCCESS)      tell operator\n*\n* return\n*\nRETURN   MODESET MODE=PROB,KEY=NZERO return to problem state\n         L     R13,SAVEAREA+4      get caller's savearea\n         RETURN (14,12),,RC=0      return\nINVPARM  WTO   'RAKF006W invalid password update request ignored'\n         B     RETURN\n*\n* data area\n*\nSTRTPWUP DC    AL2(LPWUPCMD)       parameter list that must have been..\n         DC    X'0000'               .. used to start this RAKFPWUP ..\n         DC    C'S RAKFPWUP,PARM=''' .. run. This is used to perform ..\nADDRHEX  DS    CL8                   .. a validity check of the CSA ..\n         DC    C''''                 .. storage addressed through ..\nLPWUPCMD EQU   *-STRTPWUP            .. the PARM field\nPWUP     DS    0C                  changes queue record\nPWUPUSER DC    CL8' '              userid\n         DC    C' '                filler\nPWUPPSWD DC    CL8' '              new password\n         DC    C' '                filler\nCHGLRECL EQU   *-PWUP              record length of changes queue\nLPWUP    EQU   *-STRTPWUP          total length of CSA area\nADDRUNPK DS    CL8                 unpacked address\n         DC    X'C0'               sign and dummy digit\nADDRESS  DS    F                   packed address\n         DS    X                   dummy digit and sign after pack\nSECURITY DC     CL8'CJYRCVT'       resource name for ENQ\nUSERS    DC     CL8'CJYUSRS'       resource name for ENQ\nQUEUE    DCB   DDNAME=RAKFPWUP,MACRF=PM,DSORG=PS password change queue\nSUCCESS  WTO   'RAKF007I password update for user UUUUUUUU queued',MF=L\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nHEXTBL   DC    X'00000000000000000000000000000000' 0\n         DC    X'00000000000000000000000000000000' 1\n         DC    X'00000000000000000000000000000000' 2\n         DC    X'00000000000000000000000000000000' 3\n         DC    X'00000000000000000000000000000000' 4\n         DC    X'00000000000000000000000000000000' 5 translate table\n         DC    X'00000000000000000000000000000000' 6 to convert CSA\n         DC    X'00000000000000000000000000000000' 7 address from PARM\n         DC    X'00000000000000000000000000000000' 8 field to zoned\n         DC    X'00000000000000000000000000000000' 9 format\n         DC    X'00000000000000000000000000000000' A\n         DC    X'00000000000000000000000000000000' B\n         DC    X'00FAFBFCFDFEFF000000000000000000' C\n         DC    X'00000000000000000000000000000000' D\n         DC    X'00000000000000000000000000000000' E\n         DC    X'F0F1F2F3F4F5F6F7F8F9000000000000' F\n*\n* equates\n*\n         YREGS                     register equates\n         END   RAKFPWUP            end of program\n./ ENDUP\n++SRCUPD(RAKFUSER) .\n./  CHANGE NAME=RAKFUSER,SSI=02020000\n*    2011/04/26 RRKF002 enable end users to change their passwords  @02\n*                       permanently: Before updating the incore     @02\n*                       users table RAKFUSER calls RAKFPSAV to      @02\n*                       update UDATA with the temporary password    @02\n*                       changes queued since the previous execution @02\n*                                                                   @02\n********************************************************************@02\n*                                                                   @02\n         L      R15,RAKFPSAV        get password changer address    @02\n         BALR   R14,R15             call it                         @02\n*                                                                   @02\nRAKFPSAV DC     V(RAKFPSAV)        password change utility          @02\n*                                                                   @02\n./ ENDUP\n++MACUPD(RAKFPWUP) .\n./  CHANGE NAME=RAKFPWUP,SSI=02020000\n//RAKFPWUP  DD  DSN=SYS1.SECURE.PWUP,DISP=MOD                       @02\n./ ENDUP\n++MACUPD(RAKFUSER) .\n./  CHANGE NAME=RAKFUSER,SSI=02020000\n//RAKFPWUP DD DSN=SYS1.SECURE.PWUP,DISP=SHR                         @02\n./ ENDUP\n++SRC(RAKFPSAV) TXLIB(ELEMENTS) DISTLIB(ASRCLIB) SYSLIB(SRCLIB) .\n++MAC($$$$CUST) TXLIB(ELEMENTS) .\n++MAC(RAKFRMV)  TXLIB(ELEMENTS) .\n++MAC(ZJW0003)  TXLIB(ELEMENTS) .\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RRKF002E": {"ttr": 9732, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x01\\x11\\x11\\x8f\\x01\\x11\\x11o\\x18\\x00\\x01\\xf9\\x01\\xf9\\x00\\x00\\xc5\\xd3\\xc5\\xd4\\xd5\\xe3\\xe2@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-04-28T00:00:00", "modifydate": "2011-04-26T18:00:00", "lines": 505, "newlines": 505, "modlines": 0, "user": "ELEMNTS"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RRKF002I": {"ttr": 9987, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x01\\x11\\x11\\x8f\\x01\\x11\\x11\\x8f\\t0\\x00+\\x00+\\x00\\x00\\xc9\\xd5\\xe2\\xd5\\xd6\\xe3\\xc5@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "2011-04-28T00:00:00", "modifydate": "2011-04-28T09:30:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "INSNOTE"}, "text": "Installation note for PTF RRKF002:\n----------------------------------\n\nThe cover letter of RRKF002 contains special installation instructions.\nStep 1 of these instructions refers to file RRKF002.elements.zip containing\nelements needed for installation. The wording in step 1 concerning this\nzip file was based on a different distribution technique. For the CBT tape\ndistribution perform step 1 as outlined here and continue then with steps 2-6\nfrom the PTF cover:\n\n 1. This PTF modifies elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname ELEMENTS. Member RRKF002E of CBT file 850\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    a //ELEMENTS DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //ELEMENTS DD statement can be removed from the\n    SMP jobs.\n\n    Submit the following job (requires the RECV370 utility to be\n    installed, of course) to receive the PDS:\n\n    //RCVELEMS JOB ...\n    //RECV370  EXEC PGM=RECV370\n    //RECVLOG   DD SYSOUT=*\n    //XMITIN    DD DSN=NAME.OF.YOUR.FILE850.PDS(RRKF002E),DISP=SHR\n    //SYSPRINT  DD SYSOUT=*\n    //SYSUT1    DD DSN=&&SYSUT1,\n    //             UNIT=SYSDA,\n    //             SPACE=(CYL,(10,5)),\n    //             DISP=(,DELETE,DELETE)\n    //SYSUT2    DD DSN=RAKF.RRKF002.ELEMENTS,\n    //             DISP=(,CATLG),SPACE=(TRK,(6,2,1),RLSE),\n    //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n    //             UNIT=SYSDA\n    //SYSIN     DD DUMMY\n    //SYSUDUMP  DD SYSOUT=*\n\n    The dataset name RAKF.RRKF002.ELEMENTS in //SYSUT2 DD can be changed\n    to anything you like as long as the //ELEMENT DD statement in the\n    SMP APPLY and ACCEPT job points to this dataset.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RRKF003": {"ttr": 9989, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x07\\x01\\x11\\x12?\\x01\\x11\\x12?\\x10V\\x00R\\x00R\\x00\\x00\\xd7\\xe3\\xc6@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-05-03T00:00:00", "modifydate": "2011-05-03T10:56:07", "lines": 82, "newlines": 82, "modlines": 0, "user": "PTF"}, "text": "++PTF(RRKF003) /*\n Security Enhancement in Users and Profiles Tables Processing */ .\n++VER(Z038) FMID(TRKF120) PRE(RRKF001,RRKF002)\n /*\n Summary of Changes:\n -------------------\n\n + Security Enhancement in Users and Profiles Tables Processing:\n\n   The in-core users and profiles tables which control RAKF's access\n   decisions are maintained by editing source versions of these tables\n   and using the utilities RAKFUSER and RAKFPROF to replace the in-core\n   tables with the current source tables to activate changes.\n\n   Although typically access to the source tables will be restricted\n   to users and/or groups responsible for security administration a\n   malicious user could take over control of the security environment\n   by creating private versions of the source tables and running\n   RAKFUSER and RAKFPROF to replace the in-core tables from the private\n   source. MVS 3.8j doesn't call the security product for access\n   verification through the PROGRAM class before executing a program which\n   would in later versions of MVS be the way to protect the utilities from\n   unauthorized use.\n\n   PTF RRKF003 introduces a request for READ access to profile RAKFADM\n   in the FACILITY class before updating the in-core tables. To prevent\n   unwanted accesses to the RAKFUSER or RAKFPROF utilities define profile\n   RAKFADM in the FACILITY class with universal access NONE and grant\n   only RAKF administration users or groups READ access to this profile.\n\n Special Installation Instructions:\n ----------------------------------\n\n None\n\n */ .\n++SRCUPD(RAKFPROF) .\n./  CHANGE NAME=RAKFPROF,SSI=02030000\n*    2011/04/29 RRKF003 if in-core PDATA table already exists check @03\n*                       for READ access to profile RAKFADM in the   @03\n*                       FACILITY class to ensure that only properly @03\n*                       authorized users can replace the in-core    @03\n*                       PDATA table                                 @03\n*                                                                   @03\n********************************************************************@03\n*                                                                   @03\n         ICM    R5,B'0111',CJYPROFS-CJYRCVTD(R8) does PDATA exist?  @03\n         BZ     OK2GO                   NO, go ahead                @03\n         RACHECK ENTITY=RAKFADM,CLASS='FACILITY',ATTR=READ authorize@03\n         LTR    R15,R15                RAKFADM granted?             @03\n         BNZ    ABEND600                NO, abend                   @03\n*                                                                   @03\nABEND600 WTO    'RAKF008W illegal operation -- access denied'       @03\n         WTO    'RAKF008W   ** program terminated **'               @03\n         ABEND  600,,STEP                                           @03\n*                                                                   @03\nRAKFADM  DC     CL39'RAKFADM'      facility name to authorize       @03\n*                                                                   @03\n./ ENDUP\n++SRCUPD(RAKFUSER) .\n./  CHANGE NAME=RAKFUSER,SSI=02030000\n*    2011/04/29 RRKF003 if in-core UDATA table already exists check @03\n*                       for READ access to profile RAKFADM in the   @03\n*                       FACILITY class to ensure that only properly @03\n*                       authorized users can replace the in-core    @03\n*                       UDATA table                                 @03\n*                                                                   @03\n********************************************************************@03\n*                                                                   @03\n         ICM    R5,B'0111',CJYUSERS-CJYRCVTD(R8) does UDATA exist?  @03\n         BZ     OK2GO                NO, go ahead                   @03\n         RACHECK ENTITY=RAKFADM,CLASS='FACILITY',ATTR=READ authorize@03\n         LTR    R15,R15             RAKFADM granted?                @03\n         BNZ    ABEND600             NO, abend                      @03\n*                                                                   @03\nOK2GO    ENQ    (SECURITY,USERS,E,,SYSTEM),RET=HAVE serialization   @03\n*                                                                   @03\nABEND600 WTO    'RAKF008W illegal operation -- access denied'       @03\n         WTO    'RAKF008W   ** program terminated **'               @03\n         ABEND  600,,STEP                                           @03\nRAKFADM  DC     CL39'RAKFADM'      facility name to authorize       @03\n./ ENDUP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RRKF004": {"ttr": 9992, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00\\x00\\x01\\x11\\x12?\\x01\\x11\\x12?\\x11\\x00\\x00\\x95\\x00\\x95\\x00\\x00\\xd7\\xe3\\xc6@@@@@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "2011-05-03T00:00:00", "modifydate": "2011-05-03T11:00:00", "lines": 149, "newlines": 149, "modlines": 0, "user": "PTF"}, "text": "++PTF(RRKF004) /*\n RAKF User's Guide */ .\n++VER(Z038) FMID(TRKF120) PRE(RRKF001,RRKF002,RRKF003)\n /*\n Summary of Changes:\n -------------------\n\n + RAKF User's Guide:\n\n   RAKF documention was widespread over 5 SAMPLIB members referencing\n   each other: $$$$INST, $$$$CUST, $$$$M38J, $$$$RMVE and $$$$$DOC.\n   This documentation had been written at different stages of the\n   evolution from the ESG Security System to RAKF and became increasingly\n   difficult to read as newer parts often invalidated parts of the\n   older documentation. In addition the total amount of documentation\n   materials exceeds the size that can be edited with reasonable effort\n   in handcrafted text files with fixed length 80 byte records.\n\n   With this PTF the documentation is republished as the \"RAKF Version 1\n   Release 2 Modifaction 0 User's Guide\" which is available in two\n   formats:\n\n   o Microsoft Word 2010 .docx:        The source document (\"original\n                                       copy\") and base for further\n                                       evolutions.\n\n   o Portable Document Format (PDF/A): Display and printer friendly\n                                       format intended for reading or\n                                       printing the document using\n                                       publicly available no-cost\n                                       software (Adobe Acrobat Reader).\n\n   These two formats are made available as member $DOC$ZIP in SAMPLIB\n   which is a zip archive containing the two files \"Users_Guide.docx\"\n   and \"Users_Guide.pdf\". This member is intended to be downloaded in\n   binary format to the user's PC using the 3270 terminal emulation's\n   file transfer function (typically based on IND$FILE) or any other\n   suitable method.\n\n   Once downloaded, the User's Guide can be extracted in the desired\n   format (.pdf or .docx) using the PC's standard unzip utility for\n   reading or printing using Word, Acrobat Reader or other tools\n   compatible with these formats.\n\n   With the installation of this PTF the original documentation members\n   $$$$INST, $$$$CUST, $$$$M38J and $$$$RMVE become obsolete and are\n   deleted from SAMPLIB. Member $$$$$DOC, which is the original\n   documentation of the ESG Security System prepared by Sam Golob in\n   1991, is retained in SAMPLIB as a historical reference.\n\n Special Installation Instructions:\n ----------------------------------\n\n 1. This PTF modifies elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname DOCLIB. File RRKF004.doclib.zip\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    a //DOCLIB DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //DOCLIB DD statement can be removed from the\n    SMP jobs.\n\n    The following steps can be used to RECEIVE the PDS from file\n    RRKF004.doclib.zip:\n\n    o Unzip RRKF004.doclib.xmi from RRKF004.doclib.zip and upload\n      it to dataset RAKF.RRKF004.DOCLIB.XMI (LRECL=80,RECFM=FB) on\n      your MVS system using your standard unzip utility and upload\n      software (use binary mode for upload!)\n\n    o Submit the following job (requires the RECV370 utility to be\n      installed, of course):\n\n      //RCVDOCS  JOB ...\n      //RECV370  EXEC PGM=RECV370\n      //RECVLOG   DD SYSOUT=*\n      //XMITIN    DD DSN=RAKF.RRKF004.DOCLIB.XMI,DISP=SHR\n      //SYSPRINT  DD SYSOUT=*\n      //SYSUT1    DD DSN=&&SYSUT1,\n      //             UNIT=SYSDA,\n      //             SPACE=(CYL,(10,5)),\n      //             DISP=(,DELETE,DELETE)\n      //SYSUT2    DD DSN=RAKF.RRKF004.DOCLIB,\n      //             DISP=(,CATLG),SPACE=(TRK,(30,15,1),RLSE),\n      //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n      //             UNIT=SYSDA\n      //SYSIN     DD DUMMY\n      //SYSUDUMP  DD SYSOUT=*\n\n    The dataset names used in this example can be changed to anything\n    you like as long as the //DOCLIB DD statement in the SMP APPLY\n    and ACCEPT jobs points to the dataset created by //SYSUT2 DD of\n    the RCVDOCS job.\n\n 2. RECEIVE, APPLY and ACCEPT the PTF as usual.\n\n */ .\n++MAC($$$$INFO) SSI(02040000) .\n*\n*    See members $$COPYRT and $$NOTICE in this library.\n*\n**********************************************************************\n*                                                                    *\n*    RAKF is based on the ESG Security System                        *\n*    written by Craig J. Yasuna               (Mar 1991)             *\n*    adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)             *\n*                         Phil Roberts        (Apr 2011)             *\n*                         Juergen Winkelmann  (Apr 2011)             *\n*                                                                    *\n**********************************************************************\n*\n*    Member $$$$$DOC in this library is the original documentation of\n*    the ESG Security System as prepared by Sam Golob in 1991. It is\n*    retained here as a historic reference although it is no longer\n*    current in some aspects due to the changes introduced by RAKF to\n*    achieve MVS 3.8j compatibility.\n*\n*    The current RAKF documentation is the \"RAKF Version 1 Release 2\n*    Modifaction 0 User's Guide\" which is available in two formats:\n*\n*    o Microsoft Word 2010 .docx:        The source document (\"original\n*                                        copy\") and base for further\n*                                        evolutions.\n*\n*    o Portable Document Format (PDF/A): Display and printer friendly\n*                                        format intended for reading or\n*                                        printing the document using\n*                                        publicly available no-cost\n*                                        software (Adobe Acrobat Reader).\n*\n*    These two formats are available as member $DOC$ZIP in this library\n*    which is a zip archive containing the two files \"Users_Guide.docx\"\n*    and \"Users_Guide.pdf\". This member is intended to be downloaded in\n*    binary format to the user's PC using the 3270 terminal emulation's\n*    file transfer function (typically based on IND$FILE) or any other\n*    suitable method.\n*\n*    Once downloaded, the User's Guide can be extracted in the desired\n*    format (.pdf or .docx) using the PC's standard unzip utility for\n*    reading or printing using Word, Acrobat Reader or other tools\n*    compatible with these formats.\n*\n++MAC($DOC$ZIP) TXLIB(DOCLIB) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC($$$$CUST) DELETE .\n++MAC($$$$INST) DELETE .\n++MAC($$$$M38J) DELETE .\n++MAC($$$$RMVE) DELETE .\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RRKF004E": {"ttr": 9996, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00\\x00\\x01\\x11\\x12?\\x01\\x11\\x12?\\x11\\x00\\x17\\r\\x17\\r\\x00\\x00\\xc4\\xd6\\xc3\\xd3\\xc9\\xc2@@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "2011-05-03T00:00:00", "modifydate": "2011-05-03T11:00:00", "lines": 5901, "newlines": 5901, "modlines": 0, "user": "DOCLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RRKF004I": {"ttr": 12299, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00\\x00\\x01\\x11\\x12?\\x01\\x11\\x12?\\x11\\x00\\x00+\\x00+\\x00\\x00\\xc9\\xd5\\xe2\\xd5\\xd6\\xe3\\xc5@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "2011-05-03T00:00:00", "modifydate": "2011-05-03T11:00:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "INSNOTE"}, "text": "Installation note for PTF RRKF004:\n----------------------------------\n\nThe cover letter of RRKF004 contains special installation instructions.\nStep 1 of these instructions refers to file RRKF004.doclib.zip containing\nelements needed for installation. The wording in step 1 concerning this\nzip file was based on a different distribution technique. For the CBT tape\ndistribution perform step 1 as outlined here and continue then with the\nusual RECEIVE, APPLY, ACCEPT procedure to install the PTF.\n\n 1. This PTF modifies elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname DOCLIB. Member RRKF004E of CBT file 850\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    a //DOCLIB DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //DOCLIB DD statement can be removed from the\n    SMP jobs.\n\n    Submit the following job (requires the RECV370 utility to be\n    installed, of course) to receive the PDS:\n\n    //RCVELEMS JOB ...\n    //RECV370  EXEC PGM=RECV370\n    //RECVLOG   DD SYSOUT=*\n    //XMITIN    DD DSN=NAME.OF.YOUR.FILE850.PDS(RRKF004E),DISP=SHR\n    //SYSPRINT  DD SYSOUT=*\n    //SYSUT1    DD DSN=&&SYSUT1,\n    //             UNIT=SYSDA,\n    //             SPACE=(CYL,(10,5)),\n    //             DISP=(,DELETE,DELETE)\n    //SYSUT2    DD DSN=RAKF.RRKF004.DOCLIB,\n    //             DISP=(,CATLG),SPACE=(TRK,(30,15,1),RLSE),\n    //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n    //             UNIT=SYSDA\n    //SYSIN     DD DUMMY\n    //SYSUDUMP  DD SYSOUT=*\n\n    The dataset name RAKF.RRKF004.DOCLIB in //SYSUT2 DD can be changed\n    to anything you like as long as the //DOCLIB DD statement in the\n    SMP APPLY and ACCEPT job points to this dataset.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RRKF005": {"ttr": 12546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13\\x1f\\x01\\x11\\x13\\x0f!\\x15\\x00\\x8c\\x00\\x8c\\x00\\x00\\xd7\\xe3\\xc6@@@@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-11T00:00:00", "modifydate": "2011-05-10T21:15:00", "lines": 140, "newlines": 140, "modlines": 0, "user": "PTF"}, "text": "++PTF(RRKF005) /*\n RACIND Utility to control VSAM RACF Indicators */ .\n++VER(Z038) FMID(TRKF120) PRE(RRKF001,RRKF002,RRKF003,RRKF004)\n /*\n Summary of Changes:\n -------------------\n\n + RACIND Utility to control VSAM RACF Indicators\n\n   This PTF adds a new utility named RACIND to RAKF. RACIND allows\n   to switch the RACF indicator of any VSAM catalog entry on or off,\n   thus enabling easy indication and unindication of the system's VSAM\n   catalogs and objects.\n\n   SAMPLIB member RACIND is a sample job stream illustrating the use\n   of the RACIND utility.\n\n Special Installation Instructions:\n ----------------------------------\n\n 1. This PTF adds elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname RACIND. File RRKF005.racind.zip\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    a //RACIND DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //RACIND DD statement can be removed from the\n    SMP jobs.\n\n    The following steps can be used to RECEIVE the PDS from file\n    RRKF005.racind.zip:\n\n    o Unzip RRKF005.RACIND.XMI from RRKF005.racind.zip and upload\n      it to dataset RAKF.RRKF005.RACIND.XMI (LRECL=80,RECFM=FB) on\n      your MVS system using your standard unzip utility and upload\n      software.\n\n    o Submit the following job (requires the RECV370 utility to be\n      installed, of course):\n\n      //RCVIND   JOB ...\n      //RECV370  EXEC PGM=RECV370\n      //RECVLOG   DD SYSOUT=*\n      //XMITIN    DD DSN=RAKF.RRKF005.RACIND.XMI,DISP=SHR\n      //SYSPRINT  DD SYSOUT=*\n      //SYSUT1    DD DSN=&&SYSUT1,\n      //             UNIT=SYSDA,\n      //             SPACE=(CYL,(10,5)),\n      //             DISP=(,DELETE,DELETE)\n      //SYSUT2    DD DSN=RAKF.RRKF005.RACIND,\n      //             DISP=(,CATLG),SPACE=(TRK,(6,3,1),RLSE),\n      //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n      //             UNIT=SYSDA\n      //SYSIN     DD DUMMY\n      //SYSUDUMP  DD SYSOUT=*\n\n    The dataset names used in this example can be changed to anything\n    you like as long as the //RACIND DD statement in the SMP APPLY\n    and ACCEPT jobs points to the dataset created by //SYSUT2 DD of\n    the RCVIND job.\n\n 2. RECEIVE and APPLY the PTF as usual.\n\n 3. ACCEPT the PTF according to your preferences after sufficient\n    testing.\n */ .\n++JCLIN .\n//RRKF005  JOB 1,'RAKF 1.2',MSGLEVEL=1,CLASS=A\n//*\n//* JCLIN for RAKF 1.2 PTF RRKF005\n//*\n//ASMIND   EXEC PGM=IFOX00,PARM=(NOOBJ,DECK)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=RAKF.MACLIB\n//SYSIN    DD  DISP=SHR,DSN=RAKF.SRCLIB(RACIND)\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ(RACIND)\n//RACIND   EXEC  PGM=IEWL,PARM='MAP,LIST,LET,NCAL,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSPUNCH DD  DISP=(OLD,PASS),DSN=&&OBJ\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(RACIND)\n ENTRY   RACIND\n NAME    RACIND(R)\n/*\n++SRC(RACIND)   TXLIB(RACIND) DISTLIB(ASRCLIB)  SYSLIB(SRCLIB)  .\n++MAC(IEZCTGFL) TXLIB(RACIND) DISTLIB(AMACLIB)  SYSLIB(MACLIB)  .\n++MAC(RAKFRMV)  TXLIB(RACIND) .\n++MAC(RACIND)   SSI(02050000) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n//RACIND   JOB\n//********************************************************************\n//*\n//* Name: RACIND\n//*\n//* Desc: Run RACIND Utility\n//*\n//* FUNTION: Act upon control statements read from SYSIN to set or\n//*          clear the RACF indicator of VSAM catalog entries. The\n//*          following control statements are valid:\n//*\n//*          ----+----1----+----2----+----3----+----4----+----5----+\n//*          CATALOG   name of catalog to search for entries\n//*          RACON     name of entry to indicate\n//*          RACOFF    name of entry to unindicate\n//*          * Comment\n//*\n//*          Any number of control statements is allowed. The first\n//*          none comment statement must be a CATALOG statement. A\n//*          CATALOG statement remains active until a new CATALOG\n//*          statement replaces it.\n//*\n//********************************************************************\n//RACIND  EXEC PGM=RACIND\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n**********************************************************************\n*\n* Example: Switch on the RACF indicator for a VSAM catalog\n*          and a cluster contained in that catalog.\n*\n* Note:    - The data and index components of a VSAM catalog\n*            MUST NOT be RACF indicated.\n*\n*          - All other entry types MUST have either all of their\n*            components RACF indicated or all components not\n*            indicated.\n*\n*          For that reason in the example only one RACON statement\n*          is coded for the catalog, but three for the cluster.\n*\n**********************************************************************\nCATALOG   SYS1.UCAT.TST\nRACON     SYS1.UCAT.TST\nRACON     TSTCAT.CLUSTER\nRACON     TSTCAT.CLUSTER.INDEX\nRACON     TSTCAT.CLUSTER.DATA\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RRKF005E": {"ttr": 12549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13\\x1f\\x01\\x11\\x13\\x0f!\\x15\\x02L\\x02L\\x00\\x00\\xd9\\xc1\\xc3\\xc9\\xd5\\xc4@@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-11T00:00:00", "modifydate": "2011-05-10T21:15:00", "lines": 588, "newlines": 588, "modlines": 0, "user": "RACIND"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RRKF005I": {"ttr": 12805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x00\\x00\\x01\\x11\\x13\\x1f\\x01\\x11\\x13\\x0f!\\x15\\x00+\\x00+\\x00\\x00\\xc9\\xd5\\xe2\\xd5\\xd6\\xe3\\xc5@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2011-05-11T00:00:00", "modifydate": "2011-05-10T21:15:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "INSNOTE"}, "text": "Installation note for PTF RRKF005:\n----------------------------------\n\nThe cover letter of RRKF005 contains special installation instructions.\nStep 1 of these instructions refers to file RRKF005.racind.zip containing\nelements needed for installation. The wording in step 1 concerning this\nzip file was based on a different distribution technique. For the CBT tape\ndistribution perform step 1 as outlined here and continue then with the\nusual RECEIVE, APPLY, ACCEPT procedure to install the PTF.\n\n 1. This PTF modifies elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname RACIND. Member RRKF005E of CBT file 850\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    a //RACIND DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //RACIND DD statement can be removed from the\n    SMP jobs.\n\n    Submit the following job (requires the RECV370 utility to be\n    installed, of course) to receive the PDS:\n\n    //RCVIND   JOB ...\n    //RECV370  EXEC PGM=RECV370\n    //RECVLOG   DD SYSOUT=*\n    //XMITIN    DD DSN=NAME.OF.YOUR.FILE850.PDS(RRKF005E),DISP=SHR\n    //SYSPRINT  DD SYSOUT=*\n    //SYSUT1    DD DSN=&&SYSUT1,\n    //             UNIT=SYSDA,\n    //             SPACE=(CYL,(10,5)),\n    //             DISP=(,DELETE,DELETE)\n    //SYSUT2    DD DSN=RAKF.RRKF005.RACIND,\n    //             DISP=(,CATLG),SPACE=(TRK,(6,3,1),RLSE),\n    //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n    //             UNIT=SYSDA\n    //SYSIN     DD DUMMY\n    //SYSUDUMP  DD SYSOUT=*\n\n    The dataset name RAKF.RRKF005.RACIND in //SYSUT2 DD can be changed\n    to anything you like as long as the //RACIND DD statement in the\n    SMP APPLY and ACCEPT job points to this dataset.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RRKF006": {"ttr": 12807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x06\\x00\\x00\\x01\\x11\\x17\\x1f\\x01\\x11\\x17\\x1f\\x14#\\x00s\\x00s\\x00\\x00\\xd7\\xe3\\xc6@@@@@@@'", "ispf": {"version": "02.06", "flags": 0, "createdate": "2011-06-20T00:00:00", "modifydate": "2011-06-20T14:23:00", "lines": 115, "newlines": 115, "modlines": 0, "user": "PTF"}, "text": "++PTF(RRKF006) /*\n Sample jobs to RACF indicate or unindicate the whole system */ .\n++VER(Z038) FMID(TRKF120) PRE(RRKF001,RRKF002,RRKF003,RRKF004,RRKF005)\n /*\n Summary of Changes:\n -------------------\n\n + Sample jobs to RACF indicate or unindicate the whole system\n\n   These jobs provide a fully automated way to set or clear the RACF\n   indicators of all eligible datasets, VSAM objects and catalogs in\n   the system.\n\n + OCO distribution of RAKF-external utilities\n\n   The sample jobs for RACF indication or unindication need some\n   utilities from other sources than RAKF. To ease installation of\n   these utilities they are collected to an XMI file containing the\n   modules needed and a sample job to install them from this XMI file\n   is provided. The User's Guide describes the procedure to install\n   these utilities as well as the original source from which they\n   were derived.\n\n + Sample jobs for creation of SYS1.SECURE.CNTL and SYS1.SECURE.PWUP\n\n   These jobs are provided to help with the initial customization\n   tasks on systems not having interactive dataset allocation and\n   or move/copy utilities available.\n\n + add missing //RAKFPWUP DD statement to the RAKF cataloged procedure\n\n + update the RAKF User's Guide with changes introduced since RRKF004\n\n Special Installation Instructions:\n ----------------------------------\n\n 1. Due to the large amount of new sample and documentation material\n    the space allocation of hlq.SAMPLIB and hlq.ASAMPLIB needs to be\n    enlarged to avoid space related abends during installation of this\n    PTF. Please reallocate these libraries to meet the following\n    definitions (calculation based on 3350 type DASD):\n\n    //ASAMPLIB DD  DISP=(,CATLG),DSN=hlq.ASAMPLIB,VOL=SER=dddddd,\n    //             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),\n    //             SPACE=(TRK,(120,40,10))\n    //SAMPLIB  DD  DISP=(,CATLG),DSN=hlq.SAMPLIB,VOL=SER=ssssss,\n    //             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040),\n    //             SPACE=(TRK,(120,40,10))\n\n    Of course, the original contents needs to be copied into the\n    newly allocated libraries!\n\n 2. This PTF adds elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname RRKF006E. File RRKF006E.zip\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    an //RRKF006E DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //RRKF006E DD statement can be removed from the\n    SMP jobs.\n\n    The following steps can be used to RECEIVE the PDS from file\n    RRKF006E.zip:\n\n    o Unzip RRKF006E.XMI from RRKF006E.zip and upload\n      it to dataset RAKF.RRKF006E.XMI (LRECL=80,RECFM=FB) on\n      your MVS system using your standard unzip utility and upload\n      software.\n\n    o Submit the following job (requires the RECV370 utility to be\n      installed, of course):\n\n      //RCVTLIB  JOB ...\n      //RECV370  EXEC PGM=RECV370\n      //RECVLOG   DD SYSOUT=*\n      //XMITIN    DD DSN=RAKF.RRKF006E.XMI,DISP=SHR\n      //SYSPRINT  DD SYSOUT=*\n      //SYSUT1    DD DSN=&&SYSUT1,\n      //             UNIT=SYSDA,\n      //             SPACE=(CYL,(10,5)),\n      //             DISP=(,DELETE,DELETE)\n      //SYSUT2    DD DSN=RAKF.RRKF006E,\n      //             DISP=(,CATLG),SPACE=(TRK,(6,3,1),RLSE),\n      //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n      //             UNIT=SYSDA\n      //SYSIN     DD DUMMY\n      //SYSUDUMP  DD SYSOUT=*\n\n    The dataset names used in this example can be changed to anything\n    you like as long as the //RRKF006E DD statement in the SMP APPLY\n    and ACCEPT jobs points to the dataset created by //SYSUT2 DD of\n    the RCVTLIB job.\n\n 3. RECEIVE and APPLY the PTF as usual.\n\n 4. ACCEPT the PTF according to your preferences after sufficient\n    testing.\n */ .\n++MACUPD(RAKF) .\n./  CHANGE NAME=RAKF,SSI=02060000\n//RAKFPWUP DD DSN=SYS1.SECURE.PWUP,DISP=SHR                         @06\n./ ENDUP\n++MAC($DOC$ZIP) TXLIB(RRKF006E) .\n++MAC(RAKFRMV)  TXLIB(RRKF006E) .\n++MAC(A@PREP)   TXLIB(RRKF006E) .\n++MAC(AUXINST)  TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC(AUXUTILS) TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC(INITTBLS) TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC(INITPWUP) TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC(VSAMLRAC) TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC(VSAMSRAC) TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC(VTOCLRAC) TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n++MAC(VTOCSRAC) TXLIB(RRKF006E) DISTLIB(ASAMPLIB) SYSLIB(SAMPLIB) .\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RRKF006E": {"ttr": 12810, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x06\\x00\\x00\\x01\\x11\\x17\\x1f\\x01\\x11\\x17\\x1f\\x14#9\\x1f9\\x1f\\x00\\x00\\xc5\\xd3\\xc5\\xd4\\xd5\\xe3\\xe2@@@'", "ispf": {"version": "02.06", "flags": 0, "createdate": "2011-06-20T00:00:00", "modifydate": "2011-06-20T14:23:00", "lines": 14623, "newlines": 14623, "modlines": 0, "user": "ELEMNTS"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RRKF006I": {"ttr": 18697, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x06\\x00\\x00\\x01\\x11\\x17\\x1f\\x01\\x11\\x17\\x1f\\x14#\\x00+\\x00+\\x00\\x00\\xc9\\xd5\\xe2\\xd5\\xd6\\xe3\\xc5@@@'", "ispf": {"version": "02.06", "flags": 0, "createdate": "2011-06-20T00:00:00", "modifydate": "2011-06-20T14:23:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "INSNOTE"}, "text": "Installation note for PTF RRKF006:\n----------------------------------\n\nThe cover letter of RRKF006 contains special installation instructions.\nStep 2 of these instructions refers to file RRKF006E.zip containing\nelements needed for installation. The wording in step 2 concerning this\nzip file was based on a different distribution technique. For the CBT tape\ndistribution perform step 2 as outlined here and continue then with the\nusual RECEIVE, APPLY, ACCEPT procedure to install the PTF.\n\n 2. This PTF modifies elements that are not provided inline. These\n    elements will be read during APPLY and ACCEPT processing from\n    a PDS pointed to by ddname RRKF006E. Member RRKF006E of CBT file 850\n    contains this PDS in XMIT370 format. Before the PTF can be APPLIed\n    or ACCEPTed the PDS needs to be RECEIVed with an arbitrary name and\n    a //RRKF006E DD DSN=.... statement pointing to the PDS needs to\n    be added to the SMP jobs used for APPLYing or ACCEPTing PTFs. After\n    the PTF has been APPLIed (and ACCEPTed if desired) the PDS can be\n    deleted and the //RRKF006E DD statement can be removed from the\n    SMP jobs.\n\n    Submit the following job (requires the RECV370 utility to be\n    installed, of course) to receive the PDS:\n\n    //RCVTLIB  JOB ...\n    //RECV370  EXEC PGM=RECV370\n    //RECVLOG   DD SYSOUT=*\n    //XMITIN    DD DSN=RAKF.RRKF006E.XMI,DISP=SHR\n    //SYSPRINT  DD SYSOUT=*\n    //SYSUT1    DD DSN=&&SYSUT1,\n    //             UNIT=SYSDA,\n    //             SPACE=(CYL,(10,5)),\n    //             DISP=(,DELETE,DELETE)\n    //SYSUT2    DD DSN=RAKF.RRKF006E,\n    //             DISP=(,CATLG),SPACE=(TRK,(6,3,1),RLSE),\n    //             DCB=(LRECL=80,BLKSIZE=5600,RECFM=FB),\n    //             UNIT=SYSDA\n    //SYSIN     DD DUMMY\n    //SYSUDUMP  DD SYSOUT=*\n\n    The dataset name RAKF.RRKF006E in //SYSUT2 DD can be changed\n    to anything you like as long as the //RRKF006E DD statement in the\n    SMP APPLY and ACCEPT job points to this dataset.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TAPEMAP1": {"ttr": 18699, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00$\\x01\\x05\\x03/\\x01\\x11\\x10_\\x11\\t\\x00\\r\\x00\\x07\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2005-02-01T00:00:00", "modifydate": "2011-04-15T11:09:24", "lines": 13, "newlines": 7, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBM  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*   TAPEMAP SOURCE IS FOUND ON CBT FILE 582 (MVS 3.8 VERSION)\n//*\n//MAP     EXEC PGM=TAPEMAP,REGION=2000K\n//STEPLIB DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD  UNIT=562,DISP=OLD,\n//     VOL=(,RETAIN,,,SER=RAKF12),\n//     LABEL=(1,BLP,EXPDT=98000)\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VASM": {"ttr": 18701, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x11\\x10_\\x01\\x11\\x10_\\x11C\\x1e4\\x1e4\\x00\\x00\\xe4\\xe3\\xc9\\xd3\\xe2\\xd9\\xc3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-04-15T00:00:00", "modifydate": "2011-04-15T11:43:00", "lines": 7732, "newlines": 7732, "modlines": 0, "user": "UTILSRC"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "VTT2TAPE": {"ttr": 22020, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00Q\\x01\\x012\\x8f\\x01\\x11\\x10/\\x03\\x08\\x00\\x1a\\x00\\r\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2001-11-24T00:00:00", "modifydate": "2011-04-12T03:08:51", "lines": 26, "newlines": 13, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*    RUN RECEIVE JOB FIRST, TO CREATE LOAD LIBRARY\n//*\n//*    CREATE A REAL TAPE FROM THE AWSTAPE MEMBER OF THIS FILE\n//*\n//*    OR, WITH PARM=READ, VERIFY THE CONTENTS OF THE AWSTAPE MEMBER\n//*      TO BE CONSISTENT THE WAY IT IS SUPPOSED TO BE.\n//*\n//AWSREAD  EXEC PGM=VTT2TAPE PARM='READ'    (ADD COMMA FOR PARM=READ)\n//STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.FILE850.UTILS\n//AWSIN     DD  DISP=SHR,DSN=SBGOLOB.CBT482.FILE850(AWSTAPE)\n//*\n//*  CAREFUL !!  -  ANY MOUNTED TAPE WILL BE WRITTEN OVER.....\n//*\n//TAPOUT    DD  DISP=OLD,UNIT=562,VOL=SER=RAKF12,\n//          LABEL=(1,BLP,EXPDT=98000)\n//*\n//*  CAREFUL !!  -  ANY MOUNTED TAPE WILL BE WRITTEN OVER.....\n//*\n//SYSPRINT  DD  SYSOUT=*\n//SYSFILES  DD  SYSOUT=*\n//SYSTRACE  DD  SYSOUT=*\n//SYSMOVED  DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT850/FILE850.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT850", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}