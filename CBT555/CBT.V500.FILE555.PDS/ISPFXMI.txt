./ ADD NAME=PXMIT    0300-02151-02151-1513-00025-00025-00000-SPGSRS
)ATTR
  @ TYPE(OUTPUT) INTENS(LOW)
  _ TYPE(inpuT)  INTENS(LOW) Caps(on)
)BODY EXPAND(\\)
%TRANSMIT DATASET+-\-\-
%Command ===>_ZCMD                                            %Scroll ===>_AMT +
+
% Input Ds ==>@IDSN
% XMIT  Ds ==>@ODSN
+
+ Member List        Press F3 to Select
% Sel  member   VV.MM Created    Changed              Size  Init   Mod   ID
)MODEL
 _Z+  @MEM     @Verm @Credate   @Chgdate            @SiZe @Init @Mdl  @Id
)INIT
 .ZVARS = '(SEL)'
 &AMT  = CSR
)REINIT
 IF (.MSG = ' ')
    &SEL  = ' '
    REFRESH (SEL)
)PROC
 IF (&ZTDSELS Â¬= 0000)
    VER (&SEL, LIST, S)
)END
./ ADD NAME=PXMITM   0300-02151-02151-1513-00042-00042-00000-SPGSRS
)ATTR
  @ TYPE(OUTPUT) INTENS(LOW)
)BODY EXPAND(\\)
%-\-\- TRANSMIT DATASET -\-\-
%Command ===>_ZCMD
%
+ Input Dataset Name%==>_IDSN                                       +
+
+ Transmit file     %==>_ODSN                                       +
+
+ Select members    %==>_Z+  * for all, blank to select
+
+ Add message text  %==>_Z+ %N+No %F+Enter full screen manually%D+MsgDsname
+
+ Message Dataset   %==>_MDSN                                       +
+                        If%D+selected for message text
+
+ log this transmit?%==>_Z+ (Y/N)
+
+ log dataset       %==>_LDSN                                       +
+                        If%Y+selected for log, Blank for default
)INIT
 .ZVARS = '(MSEL,MTXT,MLOG)'
 &AMT   = CSR
 &MSEL  = '*'
 &Mtxt  = 'N'
 &Mlog  = 'Y'
)REINIT
 IF (.MSG = ' ')
    &MSEL  = '*'
    REFRESH (MSEL)
)PROC
    VER (&MSEL, LIST, '*', ' ')
    VER (&MTXT, LIST, 'N', 'F', 'D')
    VER (&MLOG, LIST, 'Y', 'N')
    VER (&IDSN, nb, dsname)
    VER (&ODSN, nb, dsname)
 IF (&MTXT = 'D')
    VER (&MDSN, nb, dsname)
 IF (&MLOG = 'Y')
    VER (&LDSN, dsname)
)END
./ ADD NAME=RXMIT    0302-02157-02184-1514-00264-00264-00000-SPGSRS
/* REXX *************************************************************/
/*  Xmit     - Create an XMIT dataset from a PO Dataset             */
/*  at the command line                                             */
/*                                                                  */
/*  Thanks to Gilbert Saint-flour for the Rexx logic of reading the */
/*  directory of a PDS - From the VML Rexx in CBT File#183          */
/********************************************************************/
Parse Arg IDsn
Sysuid  = userid()
  /*-----------------------------------------------------------------*/
  /*                 Display Initial Panel                           */
  /*-----------------------------------------------------------------*/
ADDRESS Ispexec
'Display panel(Pxmitm)'
'VGET (ZVERB)'                              /* Retrieve Command      */
If zverb = 'END' then exit
If zcmd  = 'CAN' | zcmd = 'CANCEL' then exit
Mlist  = ''
msgtxt = ''
logopt = 'LOg'
If mtxt =  'F' then msgtxt = 'Message Fullscreen'
If mtxt =  'D' then msgtxt = 'MSGDSNAME('Mdsn')'
If mlog =  'N' then logopt = 'NoLog'
If Ldsn <> ' ' then logopt = 'LogDSName('Ldsn')'
If mSel =  '*' then signal xmitit
ispf=SYSVAR(SYSISPF)='ACTIVE'
ADDRESS TSO
  /*-----------------------------------------------------------------*/
  /*                 Process Input dataset                           */
  /*-----------------------------------------------------------------*/
"ALLOCATE DD(VMLPDS) SHR DS("IDSN") REUSE" ,
  "RECF(F B) LRECL(256) BLKSIZE(256) DSORG(PS)"
IF RC>0 THEN EXIT(RC)
X=LISTDSI(VMLPDS FILE)
IF SYSDSORG\='PO' THEN DO
  ZEDSMSG = 'NOT A PDS'
  ZEDLMSG = SYSDSNAME "IS NOT A PDS OR A PDSE"
  EXIT 12
  END
"EXECIO * DISKR VMLPDS (STEM DIR. FINIS"       /* read PDS directory */
"FREE DD(VMLPDS)"
  /*-----------------------------------------------------------------*/
  /*                 Process Directory Blocks                        */
  /*-----------------------------------------------------------------*/
n=0
  DO blk = 1 to dir.0
    usedbytes = C2D(LEFT(dir.blk,2))
    index = 3                            /* skip past used bytes     */
    DO WHILE index < usedbytes
      pds2name = SUBSTR(dir.blk,index,8) /* member name              */
      IF pds2name = 'FFFFFFFFFFFFFFFF'x THEN LEAVE blk
      pds2indc = SUBSTR(dir.blk,index+11,1)
      len = BITAND(pds2indc,'1F'x)       /* isolate user data length */
      userdata = C2D(len) * 2            /* halfwords to bytes       */
      n=n+1                              /* next n                   */
      IF userdata=30 & sysrecfm\='U' THEN DO /* SPF stats present    */
        sde=SUBSTR(dir.blk,index+12,30)  /* extract SPF Dir Entry    */
        ver=C2D(SUBSTR(sde,1,1))
        mod=C2D(SUBSTR(sde,2,1))
        idate=C2X(SUBSTR(sde,5,4))       /* 0092123F    */
        idate=LEFT(idate,7)+1900000      /* 1992123     */
        cdate=C2X(SUBSTR(sde,9,4))       /* 0092123F    */
        cdate=LEFT(cdate,7)+1900000      /* 1992123     */
        hh=C2X(SUBSTR(sde,13,1))
        mm=C2X(SUBSTR(sde,14,1))
        ss=C2X(SUBSTR(sde,4,1))
        cline=C2D(SUBSTR(sde,15,2))
        iline=C2D(SUBSTR(sde,17,2))
        mline=C2D(SUBSTR(sde,19,2))
        sclm=BITAND(SUBSTR(sde,3,1),'80'x) /* isolate SCLM flag      */
        IF sclm='80'x THEN sclm='SCLM'
        ELSE sclm=''
        mbr.n=pds2name                   /* member name              */
        vrm.n=RIGHT(ver,2,'0') || '.' || RIGHT(mod,2,'0')
        crd.n=GREGORIAN(idate)           /* creation date            */
        chg.n=GREGORIAN(cdate),          /* last-modified date       */
              hh || '.' || mm || '.' || ss  /* HH.MM.SS              */
        sZe.n=RIGHT(cline,5)             /* current lines            */
        ini.n=RIGHT(iline,5)             /* initial lines            */
        mdl.n=RIGHT(mline,5)             /* modified lines           */
        uid.n=RIGHT(sde,10),             /* userID                   */
              SCLM                       /* SCLM indicator           */
        END
      ELSE  Do                           /* no ISPF stats            */
        mbr.n=pds2name                   /* store member name        */
        vrm.n=' '                        /* No ISPF Stats            */
        crd.n=' '
        chg.n=' '
        sZe.n=' '
        ini.n=' '
        mdl.n=' '
        uid.n=' '
      End
      index = index + 12 + userdata      /* skip past user data      */
    END
  END
  /*-----------------------------------------------------------------*/
  /*                    Display the Member List                      */
  /*-----------------------------------------------------------------*/
IF n=0 THEN DO
  SAY sysdsname is empty
  EXIT 4
  END

SIGNAL DISPLAY

SYNTAX:
  error=rc
  SAY 'REXX error' error 'in line' sigl':' errortext(error)
  SAY sourceline(sigl)
  SAY ''
DISPLAY:
ADDRESS Ispexec
'TBCREATE TB1 NAMES(SEL MEM verm credate chgdate size' ,
                   'init mdl id) NOWRITE'
IX = 0
DO WHILE IX < n
IX       = IX + 1
SEL      = ' '
MEM      = mbr.ix
verm     = vrm.ix
credate  = crd.ix
chgdate  = chg.ix
size     = sZe.ix
init     = ini.ix
mdl      = mdl.ix
id       = uid.ix
'TBADD TB1'
END
Ztdtop   = 1
col      = 'mem'
Do while Zverb <> 'END'
   'TBTOP  tb1'                       /* Set CRP to TOP        */
   'TBSKIP tb1   NUMBER('ZTDTOP')'    /* Set CRP to previous   */
                                      /*  top row displayed    */
   Select                             /* Determine Case        */
    When ZVERB = 'UP' Then Do         /* - When scroll UP req  */
     Zscrolln  = zscrolln * -1
     'TBSKIP tb1 NUMBER('zscrolln')'  /*  skip back toward top */
     End
    When ZVERB = 'DOWN' Then          /* - When scroll DOWN req*/
     'TBSKIP tb1 NUMBER('ZSCROLLN')'  /*  skip forward         */
    Otherwise                         /* - Otherwise, not a    */
   End                                /*  scroll request       */
                                      /*                       */
   'TBDISPL  TB1  PANEL('Pxmit')'     /* Disp the table and pnl*/
   'VGET (ZVERB ZSCROLLN)'            /* Retrieve variables    */
   'TBPut    TB1'
   IX = ZTDSELS
   If Ix > 1 then
   DO ix - 1
      'TBDispl  TB1'
      'TBPut    TB1'
   END
   if zcmd <> ' ' then Do
      parse value zcmd with cmd fld order
      Select
        when cmd = 'SORT'  then col=sorttab(fld order)
        when cmd = 'CAN' | cmd='CANCEL' then Do
                                               'TBEND    TB1'
                                               Exit
                                             End
        when cmd = 'LOC' | cmd='LOCATE' | cmd='L' ,
             then Ztdtop=Loctab(fld col)
        otherwise Do
             zedsmsg = 'Unsupported command'
             zedlmsg = 'Command' cmd 'is currently not supported'
             'SETMSG MSG(ISRZ001)'
         End
      End
   End
End
'tbsort  TB1 fields(Sel,C,D)'
Do N
   'TBskip TB1'
   'TBget  TB1'
   if Sel = ' ' then Leave
   Mlist = Mlist strip(Mem)
End
MLIST = 'members('||strip(MLIST)||')'
'TBEND    TB1'
If mlist = 'members()' then Exit  /* none selected- changed his mind */
  /*-----------------------------------------------------------------*/
  /*                    Execute Transmit command                     */
  /*-----------------------------------------------------------------*/
xmitit:
Address TSO
    'XMIT N1.'||SYSUID||' DSNAME('||IDSN||')' ,
    'OUTDSN('||ODSN||') PDS' logopt mlist msgtxt
  EXIT
/*--------------------------------------------------------------------*/
/*             JULIAN-TO-GREGORIAN CONVERSION ROUTINE                 */
/*                   GDATE=GREGORIAN(1992134)                         */
/*                      RETURNS "YYYY/MM/DD"                          */
/*--------------------------------------------------------------------*/
GREGORIAN: PROCEDURE
  YYYY=LEFT(ARG(1),LENGTH(ARG(1))-3)
  DDD=RIGHT(ARG(1),3)
  T=(YYYY//4=0)
  DD=DDD; IF DD>(59+T) THEN DD=DD+2-T
  MM=((DD+91)*100)%3055
  DD=DD+91-(MM*3055)%100
  RETURN YYYY'/'RIGHT(MM-2,2,'0')'/'RIGHT(DD,2,'0')
/*--------------------------------------------------------------------*/
/* Sort the table according to requested field                        */
/*--------------------------------------------------------------------*/
Sorttab: Procedure
arg fld order
o='D'
if order='A' | order='D' then o=order
fld= strip(fld)
select
   when fld = 'MEMBER' | fld='MEM' then fl='mem'
   when fld = 'VER'     then fl='verm'
   when fld = 'CREATED' then fl='credate'
   when fld = 'CHANGED' then fl='chgdate'
   when fld = 'SIZE'    then fl='size'
   when fld = 'INIT'    then fl='init'
   when fld = 'MOD'     then fl='mdl'
   when fld = 'ID'      then fl='id'
   otherwise do
             zedsmsg = 'Invalid Sort field'
             zedlmsg = 'Valid sort fields are Mem,Ver,Created,'||,
             'Changed,Size,Init,Mod and Id'
             'SETMSG MSG(ISRZ001)'
             Return fl
             end
end
'tbsort  TB1 fields('fl ',C,' o')'
return fl
/*--------------------------------------------------------------------*/
/* Locate a member in a given column                                  */
/* Size,Init and mod fields only supported if sorted in Descending    */
/* order... but then again, ISPF only sorts in descending order       */
/*--------------------------------------------------------------------*/
Loctab: Procedure
arg loc col
If col='SIZE' | col='INIT' | col='MDL' then signal numfld
select
   when col = 'MEM'     then mem     = loc||'*'
   when col = 'VERM'    then verm    = loc||'*'
   when col = 'CREDATE' then credate = loc||'*'
   when col = 'CHGDATE' then chgdate = loc||'*'
   when col = 'ID'      then id      = loc||'*'
   otherwise
End
'TBScan   TB1 arglist('||col||') position(ztdtop)'
return Ztdtop
numfld:
'TBTOP    TB1'
'TBQuery  TB1 Rownum(rows)'
Ztdtop = 0
Do Rows
   'TBskip  TB1'
   'TBget   TB1'
   Ztdtop = Ztdtop + 1
   select
      when col = 'SIZE' then if loc \< size then leave
      when col = 'INIT' then if loc \< init then leave
      when col = 'MDL'  then if loc \< mdl  then leave
      otherwise
   End
End
return Ztdtop
